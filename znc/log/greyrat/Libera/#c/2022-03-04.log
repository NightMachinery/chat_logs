[00:01:32] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[00:03:16] <FatAlbert> that took time ..
[00:03:33] *** Joins: oxfuxxx (~oxfuxxx@104.200.132.103)
[00:03:44] *** Joins: CodeAgain (~codeagain@user/CodeAgain)
[00:05:56] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 252 seconds)
[00:07:55] *** Quits: oxfuxxx (~oxfuxxx@104.200.132.103) (Client Quit)
[00:14:48] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:15:20] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:17:07] *** Joins: Guest3689 (~Guest@181.95.236.163)
[00:17:24] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[00:17:46] *** Joins: Viewday11 (~Viewday@user/viewday)
[00:19:21] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[00:23:29] *** Quits: alch (~alch@151.36.223.211) (Read error: Connection reset by peer)
[00:25:47] *** Joins: Viewday115 (~Viewday@user/viewday)
[00:26:45] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Read error: Connection reset by peer)
[00:27:19] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[00:27:20] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:27:21] *** Viewday115 is now known as Viewday11
[00:27:39] *** Joins: alch (~alch@151.38.210.103)
[00:28:54] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[00:30:32] *** Joins: Viewday110 (~Viewday@user/viewday)
[00:32:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[00:32:05] *** Viewday110 is now known as Viewday11
[00:33:52] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:34:18] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:34:19] *** Quits: Teukka (~teukka@user/Teukka) (Read error: Connection reset by peer)
[00:34:27] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[00:35:48] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:35:48] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:36:02] *** FatAlbert is now known as goodjohnsen
[00:36:56] *** Quits: CodePoint (~CodePoint@173-160-94-242-atlanta.hfc.comcastbusiness.net) (Quit: CodePoint)
[00:37:24] *** Joins: Teukka (~teukka@84-216-41-232.customers.ownit.se)
[00:37:24] *** Quits: Teukka (~teukka@84-216-41-232.customers.ownit.se) (Changing host)
[00:37:24] *** Joins: Teukka (~teukka@user/Teukka)
[00:37:52] *** Quits: goodjohnsen (~archer@user/tessio) (Quit: Bye Noobs !)
[00:38:41] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 245 seconds)
[00:43:30] *** Quits: SGautam (uid286066@id-286066.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[00:45:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:47:43] *** Parts: data68 (~data@2a02:908:a65:3d80:86a:91a8:c0b0:ced9) (WeeChat 1.4)
[00:48:22] *** Quits: crashrip (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[00:50:17] *** Quits: dld (~davidlowr@73.61.8.74) (Ping timeout: 240 seconds)
[00:52:39] *** Joins: dld (~davidlowr@2601:197:600:1210:fddb:e1db:6b56:f9d3)
[00:58:08] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:8dd4:3160:af1d:d6df)
[01:00:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[01:05:30] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[01:05:47] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[01:06:30] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[01:08:37] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Ping timeout: 240 seconds)
[01:08:46] *** Quits: yhirose3 (~yhirose3@user/yhirose3) (Quit: WeeChat 2.8)
[01:10:37] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[01:14:11] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[01:15:40] *** Joins: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:16:36] *** Joins: Viewday116 (~Viewday@user/viewday)
[01:18:15] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[01:18:16] *** Viewday116 is now known as Viewday11
[01:24:00] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[01:26:18] *** Joins: constxd (~brad@142.134.78.128)
[01:27:24] *** Joins: crashrep (~crashrep@user/crashrep)
[01:28:16] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 245 seconds)
[01:28:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:28:41] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:31:04] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com)
[01:31:12] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:31:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:31:42] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:31:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758)
[01:32:11] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:32:30] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[01:32:38] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[01:32:49] *** Joins: pulse_ (~pulse@user/pulse)
[01:32:59] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Ping timeout: 256 seconds)
[01:33:07] *** Quits: pulse (~pulse@user/pulse) (Killed (NickServ (GHOST command used by pulse_)))
[01:33:11] *** pulse_ is now known as pulse
[01:33:56] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[01:34:45] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[01:35:57] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Read error: Connection reset by peer)
[01:36:07] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[01:36:29] *** Quits: magla (~gelignite@d53619a1.access.ecotel.net) (Quit: Stay safe!)
[01:42:36] *** Quits: bnchs__ (~bnchs@160.176.48.22) (Ping timeout: 240 seconds)
[01:44:35] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[01:44:41] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-3139-4f71-8fd9-e202.fixed6.kpn.net)
[01:47:10] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[01:50:46] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[01:51:37] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-3139-4f71-8fd9-e202.fixed6.kpn.net) (Ping timeout: 240 seconds)
[01:51:49] *** Quits: lovetruth (~lovetruth@82.137.21.245) (Quit: This computer has gone to sleep)
[01:52:21] *** Joins: arinov_ (~arinov@213.194.126.155)
[01:52:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[01:53:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[01:54:12] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[01:55:18] *** Quits: joev (~joev@user/joev) (Ping timeout: 260 seconds)
[01:56:10] *** Joins: joev (~joev@user/joev)
[01:57:38] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[01:58:14] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[01:58:45] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 256 seconds)
[01:59:12] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[02:00:12] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[02:03:18] *** Quits: greyrat_ (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[02:03:38] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[02:04:02] *** Quits: pippijn (~pippijn@isis.xinutec.org) (Ping timeout: 240 seconds)
[02:04:32] *** Quits: pnill (~pnill@ip170.ip-54-39-37.net) (Ping timeout: 240 seconds)
[02:04:48] *** Joins: pnill (~pnill@ip170.ip-54-39-37.net)
[02:04:50] *** Server sets mode: +Ccntz 
[02:04:57] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:dcff:52c8:4a63:165d) (Quit: Leaving)
[02:05:14] *** Quits: routeveg (~lee@197.ip-51-195-136.eu) (Ping timeout: 268 seconds)
[02:05:19] *** Joins: zaratustra (~zaratustr@idlerpg/player/zaratustra)
[02:05:32] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 272 seconds)
[02:05:49] *** Joins: pippijn (~pippijn@isis.xinutec.org)
[02:05:51] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (Ping timeout: 268 seconds)
[02:06:00] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:06:27] *** Joins: routeveg (~lee@197.ip-51-195-136.eu)
[02:07:25] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:08:17] *** Quits: kts (~kts@103.73.237.254) (Quit: Konversation terminated!)
[02:08:46] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:09:21] *** Joins: jaeckel_ (~jaeckel@sleipnir.jaeckel.eu)
[02:10:16] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (Ping timeout: 250 seconds)
[02:11:39] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:11:52] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:13:00] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:8dd4:3160:af1d:d6df) (Ping timeout: 240 seconds)
[02:15:22] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 260 seconds)
[02:15:48] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:17:23] *** Joins: Viewday114 (~Viewday@user/viewday)
[02:17:50] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[02:18:06] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:19:27] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:19:28] *** Viewday114 is now known as Viewday11
[02:21:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[02:25:37] *** Joins: yhirose3 (~yhirose3@user/yhirose3)
[02:27:26] *** Joins: Viewday118 (~Viewday@user/viewday)
[02:29:05] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[02:29:06] *** Viewday118 is now known as Viewday11
[02:31:11] <cryptonector> https://devblogs.microsoft.com/cppblog/c11-and-c17-standard-support-arriving-in-msvc/
[02:31:22] *** Quits: mattf (~mattf@li908-138.members.linode.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[02:32:47] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[02:33:17] *** Joins: mattf (~mattf@li908-138.members.linode.com)
[02:33:46] *** Joins: pizdets_ (~pizdets@183.182.114.123)
[02:34:07] *** Quits: pizdets (~pizdets@183.182.110.54) (Ping timeout: 265 seconds)
[02:35:26] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:35:56] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[02:37:18] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 260 seconds)
[02:39:06] *** Quits: nyah (~nyah@05453449.skybroadband.com) (Ping timeout: 272 seconds)
[02:45:57] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Ping timeout: 240 seconds)
[02:46:36] *** Quits: Guest3689 (~Guest@181.95.236.163) (Remote host closed the connection)
[02:46:49] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[02:47:47] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[02:48:23] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[02:50:14] *** Quits: iink[m] (~iinkunred@2001:470:69fc:105::1:cf6f) (Quit: Reconnecting)
[02:50:30] *** Joins: iink[m] (~iinkunred@2001:470:69fc:105::1:cf6f)
[02:51:34] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Read error: Connection reset by peer)
[02:51:42] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[02:52:39] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (Quit: brb)
[02:53:35] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[02:55:30] *** Quits: yhirose3 (~yhirose3@user/yhirose3) (Quit: WeeChat 2.8)
[02:55:34] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 250 seconds)
[02:58:11] *** Quits: iink[m] (~iinkunred@2001:470:69fc:105::1:cf6f) (Quit: Reconnecting)
[02:58:29] *** Joins: iink[m] (~iink@2001:470:69fc:105::1:cf6f)
[03:00:31] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[03:04:45] *** Joins: cation21 (cation@user/cation)
[03:05:26] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[03:05:46] *** Quits: cation (cation@user/cation) (Ping timeout: 260 seconds)
[03:07:04] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[03:07:42] *** Quits: iink[m] (~iink@2001:470:69fc:105::1:cf6f) (Quit: Reconnecting)
[03:07:58] *** Joins: iink[m] (~iink@2001:470:69fc:105::1:cf6f)
[03:08:08] *** cation21 is now known as cation
[03:08:27] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[03:08:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:17] *** Quits: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[03:09:20] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[03:09:24] *** Joins: semeion (~semeion@user/semeion)
[03:11:50] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 268 seconds)
[03:12:29] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:12:39] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:13:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[03:14:59] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[03:16:52] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[03:19:05] *** Joins: Nutte35 (~Nutte@43.231.30.227)
[03:19:08] *** Joins: Viewday113 (~Viewday@user/viewday)
[03:19:43] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4)
[03:19:43] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8151:9b0d:b8cd:32c4) (Changing host)
[03:19:43] *** Joins: skapata (~Skapata@user/skapata)
[03:20:56] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:20:57] *** Viewday113 is now known as Viewday11
[03:21:51] *** Joins: ferdna (~ferdna@user/ferdna)
[03:22:43] *** Joins: soapsudsxx (~soapsudsx@209.221.40.142)
[03:23:43] *** Joins: fowl (~fowlmouth@user/fowl)
[03:25:11] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77)
[03:25:20] *** Joins: Torr (~Torr@user/torr)
[03:26:17] *** Joins: Viewday119 (~Viewday@user/viewday)
[03:27:48] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[03:27:48] *** Viewday119 is now known as Viewday11
[03:28:15] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[03:28:54] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[03:32:44] *** Joins: Viewday113 (~Viewday@user/viewday)
[03:32:45] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[03:34:49] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[03:34:50] *** Viewday113 is now known as Viewday11
[03:36:44] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[03:37:59] *** Joins: Wulf (~Wulf@user/wulf)
[03:38:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[03:38:37] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com) (Read error: Connection reset by peer)
[03:38:52] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[03:39:50] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[03:41:05] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[03:41:09] *** Joins: Satin (uid193953@user/Seten)
[03:41:41] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[03:43:42] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[03:44:40] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[03:45:17] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:cd6a:b7a4:ede4:c758) (Quit: Quit)
[03:45:57] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[03:49:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:52:27] *** Joins: wholean (~wholean@cpc122978-nrwh13-2-0-cust900.4-4.cable.virginm.net)
[03:52:52] <wholean> hallo, does anybody know how the poll() syscall timeout behaves on system suspend? i'm trying to trace it without much luck
[03:53:25] <wholean> if this is too POSIX-y a question for this room, lemme know and i'll happily ask it somewhere more specific :)
[03:53:39] <BtbN> I'd _assume_ it returns with EINTR
[03:53:46] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 268 seconds)
[03:54:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:54:50] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Remote host closed the connection)
[03:55:04] *** Joins: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277)
[03:55:55] <wholean> BtbN: from my testing so far, i don't believe it is returning a negative value on suspend
[03:55:57] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com)
[03:56:00] <wholean> which is making me wonder if it's even noticing :P
[03:57:20] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[03:57:36] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[04:02:44] *** Quits: nostar (~nostar@68.51.221.108) (Ping timeout: 250 seconds)
[04:07:56] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:07:58] *** Joins: soul-d (~uknown@user/soul-d)
[04:11:08] *** Quits: pendarsoheil (~pendarsoh@173-255-243-214.ip.linodeusercontent.com) (Quit: Leaving)
[04:11:34] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com)
[04:12:12] *** Quits: wholean (~wholean@cpc122978-nrwh13-2-0-cust900.4-4.cable.virginm.net) (Quit: Client closed)
[04:14:46] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[04:15:07] *** Parts: rdg (~rdg@user/rdg) ()
[04:18:57] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[04:22:31] *** Joins: Viewday119 (~Viewday@user/viewday)
[04:24:07] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[04:24:07] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (Ping timeout: 256 seconds)
[04:26:05] *** Quits: alch (~alch@151.38.210.103) (Ping timeout: 256 seconds)
[04:26:36] *** Quits: Viewday119 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[04:27:25] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:28:01] *** Joins: alch (~alch@151.36.203.255)
[04:28:10] *** Joins: Viewday119 (~Viewday@user/viewday)
[04:28:59] *** Quits: TonyStone31 (~TonyStone@2603-7080-8607-c36a-d912-8cca-9865-b723.res6.spectrum.com) (Quit: Leaving)
[04:29:43] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Quit: bbl)
[04:29:49] *** Viewday119 is now known as Viewday11
[04:36:27] *** Joins: Viewday113 (~Viewday@user/viewday)
[04:36:57] *** Quits: Thelma (uid509475@id-509475.lymington.irccloud.com) ()
[04:37:50] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:37:50] *** Viewday113 is now known as Viewday11
[04:41:18] *** Joins: Viewday115 (~Viewday@user/viewday)
[04:42:47] *** Quits: Viewday11 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[04:44:13] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[04:44:45] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[04:47:01] *** Joins: karakedi (~eAC53C340@user/karakedi)
[04:48:45] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[04:49:24] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[04:49:34] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[04:49:56] *** Quits: drbeco (~beco@user/beco) (Read error: Connection reset by peer)
[04:51:27] *** Joins: moose (~moose@user/moose)
[04:52:14] *** Joins: FlipFlop (~FlipFlop@user/fl1pfl0p)
[04:52:27] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:53:57] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[04:54:50] <jgart> Hi, does this mean the character 0? https://github.com/genenetwork/QTLReaper/blob/dd9c7fb2a9d5fa40b4054e1bcb7c57905d98d5f8/Src/geneutil.c#L65
[04:55:04] *** Joins: drbeco (~beco@user/beco)
[04:55:08] <jgart> I'm referring to '\0'
[04:56:23] <oldlaptop> No, it means the character '\0'. If I recall correctly, the standard defines it as equal to the number 0.
[04:56:33] <oldlaptop> That is, '\0' == 0
[04:56:35] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[04:57:08] *** Joins: mpan (~mysql@user/mpan)
[04:57:42] <oldlaptop> Strings in C are defined as sequences of chars ending with '\0', hence that loop's condition.
[04:57:48] *** Parts: mpan (~mysql@user/mpan) ()
[05:00:53] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:01:35] <fizzie> You could call '\0' the character 0. As in, the character with the value 0. But it might be too easily confused with the character '0', the one that has some nonzero value and represents the decimal digit zero.
[05:02:20] <dave0> jgart: it's ascii control character NUL .. code point 0
[05:02:23] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[05:03:22] <fizzie> Also called a /null character/ by the standard. Not to be confused with any of the other null things, like a null pointer, a null statement or a null directive.
[05:04:28] *** Joins: rgrinberg (~textual@187.223.63.190)
[05:05:55] *** Joins: mkv (~znc@ubuntu/member/m4v)
[05:06:19] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 256 seconds)
[05:06:19] *** mkv is now known as m4v
[05:06:54] <dave0> jgart: it's a clever way to stop at the end of the string .. instead of   while(i < strlen(str))   you basically roll your own strlen which just checks for NUL
[05:15:24] *** Quits: joev (~joev@user/joev) (Ping timeout: 240 seconds)
[05:15:49] *** Joins: joev (~joev@user/joev)
[05:19:09] *** Joins: immibis_ (~hexchat@62.156.144.218)
[05:21:57] *** Quits: immibis (~hexchat@2a02:3032:3:a84:62b2:c42d:455d:d277) (Ping timeout: 268 seconds)
[05:22:33] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[05:23:15] <jgart> dave0, ah ok. thanks for that! fizzie oldlaptop thank you also for your insights. Much appreciated!
[05:23:37] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:24:12] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 240 seconds)
[05:25:29] <oldlaptop> (do note that the character set is not necessarily ASCII, at least as far as C is concerned - maybe as far as you're concerned it's ASCII or an eight-bit ASCII superset, but there do exist real EBCDIC systems still)
[05:26:13] <oldlaptop> '\0' == 0 is one of the properties of the character set C does require though (again IIRC).
[05:26:28] <jgart> so basically, the while loop keeps looping through the string until it encounters the null character and then returns the variable j which has accumulated the character count of the string by mutating/incrementing `int j`
[05:26:37] <oldlaptop> Quite.
[05:27:01] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[05:27:23] <oldlaptop> And assuming the C standard's definition of a string, the first '\0' character is the end of the string.
[05:27:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[05:27:53] <oldlaptop> (You could have perfectly good character sequences for which that wouldn't hold true, they just wouldn't be "strings".)
[05:27:58] <jgart> null character = '\0' = end of string
[05:27:58] <jgart> ?
[05:28:08] <oldlaptop> Yes.
[05:28:41] <jgart> thnx
[05:28:49] <jgart> just confirming that I understood
[05:29:08] <jgart> s/confirming/making sure
[05:29:39] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:30:02] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (Quit: ZNC - http://znc.in)
[05:32:55] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[05:33:56] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com) (Read error: Connection reset by peer)
[05:34:15] *** Joins: vysn (~vysn@user/vysn)
[05:37:08] <fizzie> Of course a *real* C programmer would have written the loop as just `while (*s) j += *s++ == c;` because being concise is the true way. (Just kidding.)
[05:37:42] <dave0> pfft too much whitespace
[05:38:31] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[05:38:40] <fizzie> Actually come to think of it, there *is* a bug in that function. It never counts the first character of the string, even if it's equal to c.
[05:39:32] <fizzie> (The linked one, I mean.)
[05:39:58] <dave0> that just means it's faster
[05:44:54] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 260 seconds)
[05:44:57] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:45:00] *** Quits: joev (~joev@user/joev) (Ping timeout: 250 seconds)
[05:46:10] *** Joins: joev (~joev@user/joev)
[05:47:05] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:47:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:47:06] *** Joins: wroathe (~wroathe@user/wroathe)
[05:47:59] *** Joins: kurahaupo (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au)
[05:49:04] <cryptonector> fizzie: `while (*s) j += *s++ == c;` is pretty fucking clear
[05:49:37] <cryptonector> I hope s is a char * and c is a char or in and j is a size_t
[05:49:41] <cryptonector> s/in/int/
[05:50:26] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[05:50:38] <fizzie> They were all of those things, yes. Well, `s` was a `const char *`.
[05:50:43] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[05:54:13] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[05:54:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[05:55:47] *** Quits: rgrinberg (~textual@187.223.63.190) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:56:14] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[05:56:46] <cryptonector> +1
[05:57:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:57:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:57:17] *** Joins: wroathe (~wroathe@user/wroathe)
[05:57:37] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[05:58:08] *** Joins: malloy (~jimery@116.30.220.175)
[05:58:29] *** Joins: joev (~joev@user/joev)
[05:59:00] *** Joins: Betal (~Betal@user/betal)
[05:59:14] *** Joins: seninha (~chatzilla@user/seninha)
[06:00:35] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[06:00:36] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[06:00:52] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[06:02:24] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77)
[06:02:49] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[06:03:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[06:03:11] *** Joins: SoF (~skius@user/skius)
[06:04:32] *** Quits: msk (~Thunderbi@89.205.124.39) (Ping timeout: 240 seconds)
[06:06:32] *** Joins: msk (~Thunderbi@89.205.124.40)
[06:09:20] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[06:12:35] *** Joins: Akiva (~Akiva@user/Akiva)
[06:12:40] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[06:16:36] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[06:18:40] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (Quit: The true sign of intelligence is not knowledge but imagination.)
[06:18:52] *** Joins: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[06:20:06] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[06:20:39] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-8-44.pa.qld.optusnet.com.au)
[06:21:06] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:21:24] *** Quits: Inline (~Inline@p200300cd470c380061a83d28f03bd1ae.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:22:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:23:18] *** Quits: robyn (~robyndrak@user/robyndrake) (Ping timeout: 272 seconds)
[06:23:41] *** Quits: kurahaupo (~kurahaupo@pa49-197-107-54.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[06:27:08] *** Joins: saribro (~swinnenb@user/swinnenb)
[06:27:11] *** Joins: usickduck (~qooupapn@142.167.143.188)
[06:29:28] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[06:29:37] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 240 seconds)
[06:30:04] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:32:40] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 250 seconds)
[06:33:58] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 250 seconds)
[06:35:43] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:35:43] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:35:43] *** Joins: wroathe (~wroathe@user/wroathe)
[06:36:19] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[06:36:56] *** Joins: robyn (~robyndrak@154.16.118.240)
[06:37:21] *** robyn is now known as Guest909
[06:41:50] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 256 seconds)
[06:42:19] *** Joins: missogra (~missogra@p200300d097253e00f7ac8a1b7bd18467.dip0.t-ipconnect.de)
[06:43:54] *** Joins: smeso (~smeso@user/smeso)
[06:47:33] *** Joins: zer0x_ (~zer0x@58.186.216.56)
[06:53:48] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:54:39] *** Joins: fe23 (~fe23@2409:8a34:466:6010:9517:a17:c2c0:b4f7)
[06:57:05] *** Joins: Fl1pFl0p (~FlipFlop@user/fl1pfl0p)
[06:57:48] *** Quits: FlipFlop (~FlipFlop@user/fl1pfl0p) (Ping timeout: 240 seconds)
[07:03:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[07:04:12] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[07:05:44] *** Joins: constxd (~brad@142.134.78.128)
[07:06:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:07:42] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[07:11:11] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:11:32] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[07:11:41] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[07:11:52] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:14:57] *** Joins: Rynn (~rynn@216.30.158.198)
[07:15:05] *** Joins: wholean (~wholean@cpc122978-nrwh13-2-0-cust900.4-4.cable.virginm.net)
[07:16:57] *** Parts: wholean (~wholean@cpc122978-nrwh13-2-0-cust900.4-4.cable.virginm.net) ()
[07:24:01] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[07:26:54] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[07:27:24] *** Joins: frost (~frost@user/frost)
[07:29:07] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[07:29:07] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[07:31:10] *** Quits: missogra (~missogra@p200300d097253e00f7ac8a1b7bd18467.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:38:49] *** Joins: kts (~kts@103.73.237.59)
[07:38:50] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:41:48] *** kline is now known as hitler
[07:41:52] *** hitler is now known as kline
[07:42:44] *** Joins: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da)
[07:44:16] *** Joins: eddybilley (~freddieti@2a02-a454-7f89-1-3139-4f71-8fd9-e202.fixed6.kpn.net)
[07:44:22] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[07:47:18] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:48:30] *** Quits: eddybilley (~freddieti@2a02-a454-7f89-1-3139-4f71-8fd9-e202.fixed6.kpn.net) (Ping timeout: 250 seconds)
[07:53:14] *** Quits: mahmutov (~mahmutov@37.155.48.73) (Ping timeout: 272 seconds)
[07:54:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 240 seconds)
[07:54:50] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[07:57:00] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[07:57:02] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[07:58:37] *** Joins: hinata (~hinata@2409:4042:d16:67df:910d:a889:57a1:6ea0)
[07:58:57] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[07:59:53] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:00:03] *** Quits: seninha (~chatzilla@user/seninha) (Remote host closed the connection)
[08:00:53] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[08:01:30] *** Quits: Nutte35 (~Nutte@43.231.30.227) (Read error: Connection reset by peer)
[08:03:36] *** Joins: Satin (uid193953@user/Seten)
[08:04:22] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:07:52] *** Joins: Rynn (~rynn@216.30.158.198)
[08:10:04] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[08:13:29] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[08:15:50] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[08:16:24] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:16:52] *** Joins: Rynn (~rynn@216.30.158.198)
[08:17:24] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[08:17:54] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Remote host closed the connection)
[08:18:25] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-8-44.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[08:21:17] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[08:21:37] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[08:22:02] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[08:23:00] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 272 seconds)
[08:26:17] *** Quits: alch (~alch@151.36.203.255) (Ping timeout: 240 seconds)
[08:26:21] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[08:27:05] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:28:23] *** Joins: alch (~alch@151.36.129.250)
[08:29:16] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[08:30:56] *** Quits: moose (~moose@user/moose) (Quit: Leaving)
[08:32:19] <Xeroine> C programming modern aproach book says with macros the program may be slightly faster but afaik whenever the preprocessor finds a macro it copies some parts from the definition, so why is it faster than copying code?
[08:33:01] <pony> slightly faster than what?
[08:33:16] <Xeroine> the book mentions function calls at that psrt btw
[08:33:24] <Xeroine> part*
[08:33:44] <caze> Because the compiler can copy paste faster than you can.
[08:34:16] <Xeroine> I mean runtime performance
[08:34:29] <pony> they're expanded at compile time
[08:35:02] <Xeroine> but that doesn't affect runtime, right?
[08:36:19] <Xeroine> runtime performance*
[08:36:58] <Xeroine> I mean the book just says "a function call usually requires some overhead during program execution" and "a macro invocation requires no runtime overhead"
[08:37:02] <pony> calling a function does, calling a macro doesn't
[08:37:12] <pony> yeah, that's the one
[08:37:15] <Xeroine> I don't understand what kind of overhead is there
[08:38:31] *** Quits: burakcank (~burakcank@has.arrived.and.is.ready-to.party) (Quit: fBNC - https://bnc4free.com)
[08:38:58] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:39:33] *** Quits: kts (~kts@103.73.237.59) (Quit: Konversation terminated!)
[08:40:31] *** Joins: Burgundy (~NA@86.121.143.206)
[08:43:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:43:23] <caze> Stuff involving "the stack".
[08:43:55] <pony> it would depend on the underlying hardware, but learning an assembly language is a good look into an example :p
[08:44:36] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[08:46:41] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[08:48:27] <Xeroine> alright thx anyways
[08:49:00] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Quit: Leaving)
[08:51:00] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[08:51:39] *** Joins: burakcank (~burakcank@has.arrived.and.is.ready-to.party)
[09:05:17] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[09:07:36] *** Joins: masoudd (~masoudd@user/masoudd)
[09:08:48] *** Quits: soapsudsxx (~soapsudsx@209.221.40.142) (Remote host closed the connection)
[09:09:32] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 250 seconds)
[09:09:49] <nitrix> Xeroine, The preprocessor does very rudimentary token substitutions before the other translation phases. In modern compilers, those phases include optimizations that are vastly more sophisticated, putting to shame whatever performance advantage you might think you're getting with macros.
[09:10:51] <nitrix> Xeroine, Macros or code, they all end up as high-level specifications of your intent and the clearer that is for humans, the better off you'll be.
[09:11:09] *** Joins: ymwm (~yingmanwu@110.85.66.212)
[09:13:45] <nitrix> Xeroine, Just to insist, this is not me repeating the common "You should trade performance for clarity" saying, but rather, that "The optimizer will defeat you and you're overly preoccupied by an irrelevant area of the language".
[09:15:50] <nitrix> Unless asymptotic complexity is involved for algorithms or data structures; you should assume all other claims about performance to be irrelevant.
[09:16:13] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[09:16:22] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:17:26] <Xeroine> oh thanks nitrix
[09:18:07] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[09:18:12] <nitrix> Compilers aren't required to inline `inline` functions, they frequently inline functions not marked `inline`, repetitive code from macro expansion can be pulled out from call sites into a procedure, compilers have advanced too much for that to still play a role. Those concepts are just entirely obsolete now.
[09:18:13] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[09:21:37] *** Joins: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a)
[09:22:56] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:858f:1c83:7b4e:c545)
[09:25:27] *** Joins: rampart (~rampart@3.sub-174-250-56.myvzw.com)
[09:25:31] *** Joins: missogra (~missogra@p200300d097253e00f7ac8a1b7bd18467.dip0.t-ipconnect.de)
[09:26:23] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 252 seconds)
[09:26:47] *** Quits: rampart (~rampart@3.sub-174-250-56.myvzw.com) (Client Quit)
[09:27:20] *** Joins: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net)
[09:27:37] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.173)
[09:27:48] *** Quits: finalriposte (~finalripo@2403-5802-74-2--2000.ip6.aussiebb.net) (Ping timeout: 240 seconds)
[09:29:15] *** Quits: missogra (~missogra@p200300d097253e00f7ac8a1b7bd18467.dip0.t-ipconnect.de) (Client Quit)
[09:29:42] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:30:18] *** Joins: sparkyPotato (~sparkyPot@216.197.220.176)
[09:31:23] <sparkyPotato> Has anybody worked with bluenrg1 here by any chance?
[09:32:14] <sparkyPotato> or stm bluetooth modules in general?
[09:32:54] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[09:38:34] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[09:40:41] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[09:43:00] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[09:44:10] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[09:46:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[09:46:31] *** Quits: asen (~asen@2408:821a:618:8ad0:c30b:1640:f4a3:fe2a) (Quit: Leaving)
[09:47:00] *** Joins: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[09:47:41] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[09:50:47] *** Quits: sparkyPotato (~sparkyPot@216.197.220.176) (Ping timeout: 256 seconds)
[09:51:57] *** Joins: frost (~frost@user/frost)
[09:54:14] *** Joins: lovetruth (~lovetruth@82.137.21.245)
[09:56:41] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[09:57:11] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[09:57:52] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:00:04] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77)
[10:00:56] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[10:03:48] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[10:12:09] *** Quits: zmt00 (~zmt00@user/zmt00) (Quit: Leaving)
[10:13:07] *** Joins: zmt00 (~zmt00@user/zmt00)
[10:14:19] *** Quits: zer0x_ (~zer0x@58.186.216.56) (Ping timeout: 256 seconds)
[10:15:20] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[10:15:24] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 250 seconds)
[10:15:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[10:16:09] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[10:16:57] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[10:18:34] *** Joins: Enitin (~Enitin@82.180.145.225)
[10:19:45] *** Joins: frost (~frost@user/frost)
[10:21:17] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[10:21:54] *** Joins: semeion (~semeion@user/semeion)
[10:23:53] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[10:24:49] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:26:11] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:27:59] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:28:41] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[10:30:57] *** Joins: zer0x_ (~zer0x@58.186.216.56)
[10:33:00] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: rebooter)
[10:33:10] *** Joins: beowuff (~beowuff@50.35.126.161)
[10:34:23] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[10:35:02] *** Joins: bzng (~bzng4@188-23-202-239.adsl.highway.telekom.at)
[10:38:08] *** Joins: silly (silly@user/silly)
[10:38:32] <silly> is this a good place to ask windows WPF c# questions?
[10:38:48] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 250 seconds)
[10:39:16] *** Quits: lovetruth (~lovetruth@82.137.21.245) (Quit: Leaving)
[10:40:26] <dave0> silly: /join #csharp
[10:40:53] <silly> ty
[10:41:31] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[10:41:47] *** Quits: Enitin (~Enitin@82.180.145.225) (Ping timeout: 256 seconds)
[10:41:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[10:44:39] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:44:48] *** imm__ is now known as imm_
[10:44:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:46:19] *** Joins: mcleuder (~mcleuder@gateway/tor-sasl/mcleuder)
[10:48:53] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 256 seconds)
[10:49:09] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[10:49:54] *** Joins: kts (~kts@103.73.237.72)
[10:50:56] *** Joins: Enitin (~Enitin@82.180.145.227)
[10:54:13] <smallville7123> 16:46:34 redempt1on: One time my dad caught me jerking off to Hentai, so I had to make some shit up on the spot... I was like, "oh this is the homework DVD from sex ed class," and my dad was like, "Oh... ok.. cool."
[10:54:41] <smallville7123> fk wrong message
[10:54:55] <smallville7123> if i have a normalized delta, how would i use that to calculate a new location in a view space? eg from x 162 with delta x 0, to x 410 with delta x 0.2
[10:56:01] *** Quits: kts (~kts@103.73.237.72) (Quit: Konversation terminated!)
[10:57:00] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[10:58:23] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[10:58:40] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[10:59:08] <smallville7123> the delta is calculated from ns_touch.NormalizedPosition, and im trying to convert it to a window space or view space delta
[11:00:04] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 272 seconds)
[11:02:29] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:04:22] *** Joins: ekathva (~ekathva@2001:999:51:19b8:36a1:fe41:db45:b13f)
[11:07:46] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:07:53] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Remote host closed the connection)
[11:12:06] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[11:12:49] *** zer0bitz_ is now known as zer0bitz
[11:17:57] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[11:27:23] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[11:29:37] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:31:00] *** Joins: aradesh (~aradesh@user/aradesh)
[11:33:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:34:32] *** Quits: hashfunc528 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[11:35:47] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[11:41:05] *** Joins: slidercrank (~slidercra@user/slidercrank)
[11:42:29] *** Joins: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[11:44:50] *** Joins: jellie (~luv_panda@user/jellie)
[11:44:58] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Quit: WeeChat 2.8)
[11:46:25] *** Joins: cadmio (~cadmio@151.57.219.240)
[11:46:27] <cadmio> Hello
[11:46:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:47:13] <cadmio> I need an algorithm to reorde tabs for example if I've 1,2,3,4 and 4 moves to 1 then 1 ->2 , 2->3, 3->4
[11:47:59] *** Joins: Rounin (~david@84.212.130.215)
[11:48:31] <trenka> #algorithms ?
[11:48:52] <cadmio> this is what I've atm https://paste.gnome.org/pewqerha4
[11:49:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Ping timeout: 240 seconds)
[11:53:10] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[11:54:54] <masoudd> what datastructure are you using to keep the tabs?
[11:55:56] *** Quits: ekathva (~ekathva@2001:999:51:19b8:36a1:fe41:db45:b13f) (Ping timeout: 250 seconds)
[11:56:03] <cadmio> this https://paste.gnome.org/pmih8yj0u
[11:57:15] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[11:57:44] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:58:26] <Xgc> cadmio: What does "4 moves to 1" mean?  Your "then" comment doesn't seem to reflect any movement.
[11:58:31] *** Joins: random-nick (~random-ni@87.116.176.196)
[11:59:13] <cadmio> Xgc: it's like moving tabs in firefox if you imagine to label each tab with a number
[11:59:15] <Xgc> cadmio: Expressing "order" is often handled via linked lists.
[11:59:17] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[11:59:23] <cadmio> really the indexes start fron 0
[11:59:24] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[11:59:47] <Xgc> cadmio: Yes.  But your comment doesn't reflect any order change.  Did you mistype something?
[12:00:30] <Xgc> cadmio: Did you mean you wanted to change the position of 1 to 2, then 2 to 3, etc?
[12:01:08] <cadmio> in my example you take the last tab and put it in 1st position, so the one in 1st position goes to 2, 2 to 3, etc
[12:01:14] <Xgc> cadmio: Linked lists can be used to reflect that ordering.  With that approach, there is no need to "move" every node just to insert the last node at the first position.
[12:02:02] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[12:02:12] <Xgc> cadmio: With linked lists, just remove the last node from the list and then insert it before "tab at 1".  Magically, they are all now in the order you wanted
[12:03:01] <dave0> so it's a rotate?
[12:03:43] <cadmio> after you moved the tab the others rotate, yes
[12:04:02] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Ping timeout: 272 seconds)
[12:04:44] <dave0> cadmio: paste the definition of   struct lit
[12:05:18] <Xgc> cadmio: If you use an array for this, you would typically save the pointer/value in the 4th position, then transfer each node up one place.  Then assign the saved value to the first position.  With linked lists, you can avoid all that movement.
[12:05:30] <dave0> cadmio: the basic idea is    temp = array[0]; for(i = 0; i < n - 1; i++) { array[i] = array[i + 1]; } array[n - 1] = temp;
[12:06:59] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[12:07:13] <dave0> you can also do it with swap    for(i = 0; i < n - 1; i++) { swap(array[i], array[i + 1]); }
[12:07:18] <cadmio> struct lit is this one https://paste.gnome.org/pmih8yj0u
[12:07:55] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[12:09:50] <dave0> so you just need to cycle   fileSaved[]  and   filename[]   ?
[12:09:57] <cadmio> yes
[12:10:22] <dave0> swap is probably easiest
[12:11:01] *** Joins: kts (~kts@103.73.237.72)
[12:12:17] <cadmio> where is swap defined?
[12:13:00] <dave0> for(i = page_num; i < total_pages - 1; i++) { swap(litos, i, i + 1); }    void swap(struct lit *litos, int a, int b) { if(a == b) return; _Bool fs = litos->fileSaved[a]; litos->fileSaved[a] = litos->fileSaved[b]; litos->fileSaved[b] = fs; char *fn = litos->filename[a]; litos->filename[a] = litos->filename[b]; litos->filename[b] = fn; }}
[12:13:05] <dave0> you gotta write swap
[12:13:42] <dave0> but with swap the cycle loop is simpler
[12:14:11] <cadmio> so you first swap the tabs you want to move and then swap in the cycle the remaining tabs?
[12:14:43] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 256 seconds)
[12:15:20] <dave0> you swap each tab in order, and after the loop it will have cycled it around once
[12:15:57] <dave0> if you wanted to cycle tabs 3,4,5,6 to 4,5,6,3 you would   swap(3,4); swap(4,5); swap(5,6);
[12:16:10] <cadmio> if you want to move tab 3 in the position of 1 you cannot just cycle
[12:16:19] *** Joins: argonautx (~argonautx@i5E867391.versanet.de)
[12:16:55] <Xgc> cadmio: Sure you can. Use 2 swaps. conceptually: swap(3, 2); swap(2, 1);
[12:17:02] <dave0> okay if you want to turn  1,2,3   into   3,1,2   you could swap(3,2); swap(2,1);
[12:17:06] <dave0> right
[12:17:12] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[12:17:21] <dave0> swap is a nice primitive
[12:17:31] <dave0> you could even bubble sort the tabs :-)
[12:17:55] <cadmio> that depends on the user's side
[12:18:01] <Xgc> or random_sort them, until they accidentally find the right order.
[12:21:24] <cadmio> I think you've to first swap and then cycle to ratate the remainings
[12:21:31] <sham1> Xgc: ah yes, the bogosort
[12:22:04] <dave0> cadmio: the good thing about swap is you wont lose anything ... the worst that can happen is you dont get the right order
[12:22:21] <dave0> cadmio: try coding a few loops that swap tabs and see how it works
[12:23:31] *** Quits: alch (~alch@151.36.129.250) (Read error: Connection reset by peer)
[12:27:46] *** Joins: alch (~alch@151.44.48.142)
[12:28:00] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:30:22] <cadmio> I'm not sure why are checking if(a == b)
[12:31:24] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.173) (Ping timeout: 240 seconds)
[12:31:36] <dave0> yeah i kinda second guessed myself there
[12:31:50] <dave0> but   swap(n,n)   is a no-op
[12:33:01] <dave0> so it wont hurt
[12:33:12] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[12:33:59] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 256 seconds)
[12:35:10] *** Joins: mrig (~mrig@user/mrig)
[12:35:26] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[12:35:30] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:39:02] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[12:40:53] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[12:41:00] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[12:42:23] *** Quits: cadmio (~cadmio@151.57.219.240) (Read error: Connection reset by peer)
[12:46:05] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[12:47:30] *** Joins: cadmio (~cadmio@151.57.251.180)
[12:48:58] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[12:52:55] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:53:46] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 260 seconds)
[12:53:47] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[12:56:53] *** Joins: ProperN[out] (~holyShizn@user/propernoun)
[12:57:01] *** Joins: the_lanetly_052 (~the_lanet@185.30.91.173)
[12:57:47] *** Quits: ProperNoun (~holyShizn@user/propernoun) (Ping timeout: 256 seconds)
[12:59:47] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[12:59:49] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[13:00:38] *** Quits: hashfuncb70 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[13:02:11] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[13:06:02] <cadmio> so this shoudl work https://paste.gnome.org/perqtvco7 isn't it?
[13:07:32] <cadmio> I might have another bug in the program
[13:07:43] *** Quits: kts (~kts@103.73.237.72) (Ping timeout: 256 seconds)
[13:08:19] *** Joins: Waynes (~Waynes@user/waynes)
[13:08:27] <cadmio> if that's correct
[13:09:29] <Xgc> cadmio: No need for the individual swap before the loop.  Just include all nodes to swap in the loop.
[13:10:08] <Xgc> cadmio: The first and last page are not a special case.
[13:11:12] *** Joins: _wovixo_ (~wovixo@128.104.205.49)
[13:11:18] <cadmio> if the user wants to echange the 7th tab with the 3rd how is going to work?
[13:11:35] <Xgc> cadmio: That was never your question.
[13:11:50] <Xgc> cadmio: Your question was about moving one page to a different position.
[13:12:13] <cadmio> yes for example the 7th to the 3rd
[13:12:21] <Xgc> cadmio: If you just wanted to swap page 7 with page 3, that requires no loop at all, just one swap.
[13:12:39] *** Parts: Waynes (~Waynes@user/waynes) ()
[13:13:06] <Xgc> cadmio: You're using conflicting terminology.  State your requirement more clearly.
[13:13:16] <cadmio> when you do 7->3, 3 does not go to 7 but to 4
[13:13:17] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:45] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:13:50] <cadmio> it's not really a swap
[13:14:21] <Xgc> cadmio: "exchange 7th with the 3rd" is not what you just said.
[13:14:47] *** Quits: wovixo (~wovixo@128.104.205.49) (Ping timeout: 256 seconds)
[13:15:18] <Xgc> cadmio: To move the 7th to the 3rd position, you swap from 7 to 6, 6 to 5, 5 to 4, 4 to 3.  Done.  No special first swap.
[13:15:38] <cadmio> to be more clear take the case : 1,2,3,4,5,6,7 then if the user brings 7 to 3 you get 1,2,7,(3 goes to 4), (4->5), (5->6),(6 -> 7)
[13:15:41] *** Joins: Enitin (~Enitin@82.180.145.230)
[13:15:57] <Xgc> cadmio: Take a few minutes and read my comment carefully
[13:16:26] *** Joins: kts (~kts@103.73.237.72)
[13:16:27] <Xgc> cadmio: Try it on paper, just as I wrote it.
[13:17:05] <dave0> yeah once you visualize it, it makes perfect sense
[13:17:20] <dave0> cadmio: you're not going to crash by doing swaps
[13:17:45] <dave0> it's safe to experiment
[13:17:49] *** Quits: om3ga (~oz@46.49.41.80) (Ping timeout: 240 seconds)
[13:18:05] <cadmio> yes not that was not correct
[13:18:08] <cadmio> I'm trying to fix it
[13:18:57] <dave0> notice also that moving 7 to 3 the loop has to count down
[13:19:26] <dave0> the direction of the loop is important
[13:21:02] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[13:21:58] <Xgc> cadmio: https://dpaste.com/5PY6BUWPY
[13:25:04] <cadmio> Xgc: thanks now it's clearer
[13:25:24] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[13:27:48] <cadmio> so the order is reversed from what I had earlier on  for(i = litos->page; i > end_page ; i--) { swap(litos, i, i - 1); }
[13:29:39] <Xgc> cadmio: When moving a higher node to a lower position, yes.  But when moving a lower node to a higher position, it's the other direction.
[13:33:31] *** Quits: hinata (~hinata@2409:4042:d16:67df:910d:a889:57a1:6ea0) (Quit: Leaving)
[13:37:02] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[13:37:44] *** Joins: Enitin (~Enitin@82.180.145.230)
[13:38:08] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[13:38:48] *** Quits: kts (~kts@103.73.237.72) (Quit: Konversation terminated!)
[13:38:55] *** Quits: the_lanetly_052 (~the_lanet@185.30.91.173) (Ping timeout: 256 seconds)
[13:40:06] *** Joins: FatAlbert (~archer@user/tessio)
[13:42:12] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 272 seconds)
[13:42:53] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 256 seconds)
[13:47:13] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[13:47:17] <cadmio> there must be something wrong still https://paste.gnome.org/powlmtsvl
[13:47:45] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[13:51:19] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:51:22] <FatAlbert> you are assuming we know something about gtk which is not the case
[13:51:30] <FatAlbert> at the most part
[13:52:04] *** Joins: Enitin (~Enitin@82.180.145.230)
[13:52:20] <cadmio> it's not related to GTK
[13:56:06] <FatAlbert> cadmio: you are treating "i" as an int in the for loop but call swap and pass it as a pointer
[13:58:31] <FatAlbert> nope, my bad
[14:00:15] *** Joins: akuma (~i.am@user/marlboro)
[14:01:12] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[14:01:40] *** Joins: constxd (~brad@142.134.78.128)
[14:01:48] *** Joins: joev (~joev@user/joev)
[14:03:31] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[14:05:42] *** Joins: Enitin (~Enitin@82.180.145.227)
[14:06:07] *** Joins: kts (~kts@103.73.237.72)
[14:06:53] *** Joins: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com)
[14:08:27] <FatAlbert> cadmio: the semantic of "set_title" and "filename[end_page]" might be confusing
[14:08:45] <FatAlbert> i have no idea what are you trying to do
[14:09:22] <cadmio> reordering tabs like this https://dpaste.com/5PY6BUWPY
[14:09:31] <cadmio> that part is not important
[14:09:56] <masoudd> use gdb and step through it line by line see what's going wrong
[14:10:31] <FatAlbert> cadmio: swap is entirely useless ..
[14:10:44] <FatAlbert> you can just pass what you want in the other way especially when used with pointers
[14:11:12] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[14:11:25] <FatAlbert> and all these memory access also take time
[14:12:05] <dave0> swap is easy and safe
[14:12:11] <FatAlbert> in simple word .. get the function that depends on the order and just use reverse parameters to "swap"
[14:12:17] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 240 seconds)
[14:14:00] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[14:15:09] *** Quits: joev (~joev@user/joev) (Ping timeout: 256 seconds)
[14:15:37] *** Quits: immibis_ (~hexchat@62.156.144.218) (Ping timeout: 240 seconds)
[14:15:46] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 245 seconds)
[14:16:07] *** Joins: joev (~joev@user/joev)
[14:16:09] *** Quits: bzng (~bzng4@188-23-202-239.adsl.highway.telekom.at) (Quit: Leaving)
[14:16:25] *** Quits: malloy (~jimery@116.30.220.175) (Quit: WeeChat 3.0)
[14:17:02] <masoudd> memory access also takes time? how many times per second is it going to move tabs around?
[14:17:02] <FatAlbert> you don't need access pointer elements to reorder
[14:17:48] *** Joins: Enitin (~Enitin@82.180.145.227)
[14:20:08] <cadmio> the reordering works at first then after few reordering something gets messed up
[14:20:18] <cadmio> btw the swap function should be correct now
[14:22:17] *** Quits: Enitin (~Enitin@82.180.145.227) (Ping timeout: 240 seconds)
[14:24:39] *** Quits: FatAlbert (~archer@user/tessio) (Read error: Connection reset by peer)
[14:24:43] <cadmio> i.e. for 3 tabs it works out fine
[14:26:15] <masoudd> *something* gets messed up. that's not really saying much
[14:26:37] <masoudd> what happens? error? segfault? anything
[14:26:45] <cadmio> ah wait at each swap I need as well to change title!
[14:28:36] *** Joins: FatAlbert (~archer@user/tessio)
[14:30:06] *** Joins: Enitin (~Enitin@82.180.145.230)
[14:30:39] *** Joins: nathanael (~nathanael@user/nathanael)
[14:32:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[14:33:32] *** Joins: Klinda (~superleag@user/klinda)
[14:33:54] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[14:34:34] <cadmio> masoudd: no there aren't segfaults simply the window's titles are not correct
[14:36:37] <pragma-> '\0' is simply an octal escape sequence. It doesn't have any particular magic or special-casing. Yes, '\0' is 0. And '\1' is 1. '\2' is 2. There's nothign special about this.
[14:37:53] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:38:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Remote host closed the connection)
[14:38:38] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[14:39:56] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:40:31] <cadmio> I've understood what happens. I set a particular direction going towards lower indexes
[14:40:54] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[14:41:23] <cadmio> but then I can have also the opposite situation from low tabs to higher
[14:45:06] <NRK> 0 is also octal :)
[14:45:16] *** Quits: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com) (Quit: leaving)
[14:46:05] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[14:49:09] <dave0> 0 isn't always all-bits-zero
[14:50:53] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 256 seconds)
[14:52:26] <fizzie> An all-bits-zero integer is always a 0, but an integer 0 isn't always all-bits-zero. "Whoa."
[14:55:44] <dave0> i think there's 1 machine where 0 isn't all-bits-zero, but perish the thought of making it easier for everyone else instead of losing backwards compatibility
[14:55:45] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[14:55:48] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:56:09] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[14:59:55] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[15:01:09] <fizzie> If you're referring to the integer 0 as opposed to 0 as a null pointer constant, not sure what exactly it would make easier to change things so that all-bits-zero would be the only representation of 0. The existing guarantee covers the things I'd imagine wanting to do.
[15:01:15] <fizzie> (Adding the same "all-bits-zero is always a valid representation" thing for floats and pointers, though, that I could get behind.)
[15:02:20] <cadmio> so this is what I've now https://github.com/gioretikto/litos/blob/main/activate.c
[15:02:24] <cadmio> and it seems to work well
[15:04:46] <Rounin> There should totally be a test platform where numbers randomly have different endianness and use one's complement and text is EBCDIC and all nonaligned memoy reads fail etc.
[15:05:41] <fizzie> Canonically called the DS9k, the DeathStation 9000.
[15:05:46] <Rounin> :D :D
[15:06:14] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[15:06:39] <fizzie> (I suspect a number of people have started to make one, but none have finished.)
[15:09:12] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:15:01] <pragma-> Kind of hard to finish when everything breaks.
[15:15:31] *** Parts: cadmio (~cadmio@151.57.251.180) (WeeChat 3.0)
[15:16:16] <pragma-> "Yup, another test program segfaulted. Guess that means the DS9k is working?"
[15:16:45] <Rounin> :D
[15:16:50] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[15:16:57] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 256 seconds)
[15:17:06] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[15:19:39] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[15:23:57] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[15:25:17] *** Joins: bnchs (~bnchs@160.176.48.22)
[15:29:05] *** Joins: cryptone1tor (~nico@24.28.108.183)
[15:30:05] *** Quits: Elladan (~elladan@user/elladan) (Quit: ZNC - http://znc.in)
[15:30:17] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:31:04] *** Joins: csrf (~csrf@user/csrf)
[15:31:24] *** Joins: Elladan (~elladan@user/elladan)
[15:32:36] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 240 seconds)
[15:34:12] *** Joins: RuotsalainenO (~weechat@kkivimaki.fi)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:35] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[15:38:21] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[15:40:14] *** Joins: Thelma_ (uid509475@id-509475.lymington.irccloud.com)
[15:40:21] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:40:24] *** Thelma_ is now known as sweetsymph
[15:41:12] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:42:32] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[15:42:51] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 245 seconds)
[15:43:18] <rcf> IBM hardware will meet these requirements in varying combinations
[15:43:37] <rcf> The mainframes still use EBCDIC, and POWER switches endianness.
[15:44:10] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[15:44:35] <rcf> (I make use of the latter in testing)
[15:46:19] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[15:46:23] <sham1> It's probably just easier to have an
[15:46:36] <sham1> W pl, a virtual thing that emulates such ansystem
[15:47:00] *** Quits: kts (~kts@103.73.237.72) (Quit: Konversation terminated!)
[15:49:01] <rcf> MVS is fairly easy to emulate if you're into that sort of thing. Can your code survive 31-bit big endian?
[15:49:36] <sham1> > 31-bit
[15:49:39] <sham1> The what
[15:51:37] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:b508:641a:9acd:2179)
[15:58:47] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:05:20] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:07:04] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:07:55] *** Joins: roan (~roan@user/roan)
[16:10:04] *** Joins: bnchs__ (~bnchs@105.158.17.201)
[16:10:48] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[16:11:19] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[16:12:48] <FatAlbert> so
[16:12:56] *** Quits: bnchs (~bnchs@160.176.48.22) (Ping timeout: 272 seconds)
[16:13:14] <FatAlbert> in sunday we will do some KnR i guess
[16:15:01] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[16:15:14] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:ffda:8964:beaf:e5e3)
[16:15:51] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 256 seconds)
[16:16:49] <sham1> .crypto erg
[16:16:54] <sham1> Wrong channel
[16:17:14] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[16:17:51] <sham1> Some people get proper annoyed when they're reminded of the unstable courses of these things
[16:19:18] <FatAlbert> are there still fools that buys cryptocurrency ?
[16:19:51] <FatAlbert> sham1: i hope you are selling
[16:19:53] <FatAlbert> lol
[16:20:05] <sham1> Oh I'm not involved with those things
[16:20:16] <FatAlbert> fizzie hacked it already
[16:20:47] <sham1> All I do is annoy those who are into those things by reminding them that, hey, the investment isn't that great
[16:20:57] *** Quits: rany (~rany@user/rany) (Quit: The Lounge - https://thelounge.chat)
[16:21:11] *** Joins: rany (~rany@user/rany)
[16:21:14] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com)
[16:21:47] <FatAlbert> sham1: im just internet police so i don't know
[16:23:12] <FatAlbert> sham1: we are undercover here and in #asm #re #osdev
[16:23:12] *** Quits: alch (~alch@151.44.48.142) (Read error: Connection reset by peer)
[16:23:18] <FatAlbert> and other channels as well
[16:24:08] <FatAlbert> i starting to think fuck the police ... km pretty good in programming
[16:24:16] <FatAlbert> i should work in that
[16:24:59] <FatAlbert> sham1: are you threre ? lol
[16:25:17] *** Joins: Sheilong (uid293653@2a03:5180:f:3::4:7b15)
[16:25:34] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:27:33] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[16:28:02] *** Joins: alch (~alch@151.46.75.93)
[16:28:17] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:31:53] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[16:32:41] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:3d04:5279:1148:c586)
[16:33:21] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[16:33:34] *** Joins: tejr (~tejr@user/tejr)
[16:34:11] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983)
[16:34:11] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8da:5468:d39:d983) (Changing host)
[16:34:11] *** Joins: skapata (~Skapata@user/skapata)
[16:35:37] *** Quits: ymwm (~yingmanwu@110.85.66.212) (Ping timeout: 240 seconds)
[16:36:37] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:40:46] *** Quits: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:44:20] *** keinbock is now known as jamesmartinez
[16:44:30] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[16:47:57] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[16:48:21] *** Quits: mort (~mort@188.166.114.29) (Quit: Ping timeout (120 seconds))
[16:48:37] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[16:50:18] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[16:51:56] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[16:51:59] *** Joins: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru)
[16:52:01] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:54:56] *** Joins: malina (~malina@user/malina)
[16:55:42] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:57:05] *** Joins: meator (~meator@user/meator)
[17:02:05] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.4)
[17:03:07] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[17:03:12] *** Joins: kurahaupo (~kurahaupo@pa49-182-8-44.pa.qld.optusnet.com.au)
[17:03:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:04:14] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Ping timeout: 272 seconds)
[17:17:19] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:18:35] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 240 seconds)
[17:19:32] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[17:21:10] *** Quits: LordJohn (~lordjohn@l37-194-102-53.novotelecom.ru) (Read error: Connection reset by peer)
[17:21:17] *** Joins: mort (~mort@188.166.114.29)
[17:21:18] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:21:55] *** Quits: Inline__ (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[17:22:09] *** Quits: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz) (Ping timeout: 252 seconds)
[17:24:21] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 252 seconds)
[17:26:24] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[17:26:41] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[17:28:15] *** Joins: X-Scale` (~ARM@135.232.28.37.rev.vodafone.pt)
[17:30:08] *** Quits: Masklin_Gurder (~joel@eduroam-rs-06.wireless.lu.se) (Quit: Konversation terminated!)
[17:30:55] *** Quits: X-Scale (~ARM@83.223.250.236) (Ping timeout: 256 seconds)
[17:30:55] *** X-Scale` is now known as X-Scale
[17:31:15] *** Quits: roan (~roan@user/roan) (Ping timeout: 256 seconds)
[17:33:09] *** Joins: roan (~roan@46-133-209-74.mobile.vf-ua.net)
[17:33:28] *** Joins: halabund (~halabund@2a02:2454:9d42:8500:617b:425a:cdc1:e3da)
[17:35:01] <halabund> What is to most efficient way to convert a floating point number to the largest integer smaller than it?
[17:35:56] <halabund> If I call floor(), GCC seems to emit an explicit function call to floor() unless I use -ffast-math (which I can't)
[17:36:14] <halabund> If I just cast to an integer, I don't get the floor() behaviour.
[17:36:19] *** Quits: FatAlbert (~archer@user/tessio) (Ping timeout: 256 seconds)
[17:36:49] *** Joins: strajder (~strajder@user/strajder)
[17:38:18] <halabund> Is the casting behaviour platform specific? On my platform, (int) -2.3 yields -2. Is this guaranteed?
[17:38:57] *** Quits: AmR (~AmREiSa@156.199.197.9) (Ping timeout: 240 seconds)
[17:39:30] *** Quits: halabund (~halabund@2a02:2454:9d42:8500:617b:425a:cdc1:e3da) (Quit: Leaving...)
[17:40:10] *** Quits: roan (~roan@46-133-209-74.mobile.vf-ua.net) (Changing host)
[17:40:10] *** Joins: roan (~roan@user/roan)
[17:41:49] <masoudd> did you profile your program to see if that conversion is actually the bottle neck?
[17:42:11] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:43:10] *** Joins: gog (~ada@user/gog)
[17:46:45] <clarity> *sigh*
[17:47:25] <gog> hi
[17:51:44] <sham1> Hi
[17:51:47] <sham1> Fancy seeing you here
[17:52:00] <gog> it is fancy, isn't it :)
[17:52:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:52:31] *** Joins: gproto23_ (~gproto23@user/gproto23)
[17:55:44] *** Joins: roue (~roue@097-086-244-045.res.spectrum.com)
[17:55:47] <roue> hola
[17:55:57] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[17:56:50] <fizzie> haliucinas: Yes, the conversion from a floating to integer (that truncates toward zero) is defined, as long as the value can be represented in the result type.
[17:57:12] *** Joins: pulse (~pulse@user/pulse)
[17:57:47] <fizzie> C11 6.3.1.4p1: "When a finite value of real floating type is converted to an integer type other than `_Bool`, the fractional part is discarded (i.e., the value is truncated toward zero). If the value of the integral part cannot be represented by the integer type, the behavior is undefined."
[17:58:41] <fizzie> I imagine you *could* write something silly like `int i = f; i -= f < 0;` to make it round towards negative infinity instead.
[17:59:10] <fizzie> Although that'd be incorrect for exact negative integers.
[17:59:27] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[17:59:43] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[17:59:45] <roue> I'm trying to debug an issue with an open source project ( hh_suite https://github.com/soedinglab/hh-suite ).  It's segfaulting while trying to mmap a 1.5T reference file.  The segfault is happening because they didn't check for the mmap failure and used the bogus value as an address. I fixed that. I'm trying to understand why mmap failed though. This is a Centos 7 host with 768G of memory. Any help would be
[17:59:46] <candide> Title of roue's link: GitHub - soedinglab/hh-suite: Remote protein homology detection suite.
[17:59:51] <roue> appreciated.
[18:01:58] <roue> I thought mmap just opened a window on the file, not actually attempted to allocate enough memory to cover the full size.  The code only needs read access ( it's used as a reference ).
[18:03:48] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[18:04:19] <gog> roue: ffindex.c:254?
[18:04:25] <roue> Exactly
[18:04:47] <roue> I wrote a test case to reproduce it https://bpa.st/TB2Q
[18:05:16] <sham1> Having a test for it is already a huge step forwards
[18:05:20] <roue> gog: how did you find that so quickly ? :)
[18:05:38] <gog> searched for mmap in the repo and took a guess :p
[18:05:43] <gog> what does it return for errno?
[18:06:16] <roue> unfortunately to run the test case you need the ~2T of files it's trying to mmap.
[18:06:28] <roue> They're publically available, but yeah, lots to download.
[18:06:46] <roue> though I don't think the content of the files (aside from the size) are important for the problem I'm seeing.
[18:06:50] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[18:07:45] <roue> gog: "Cannot allocate memory".
[18:07:52] *** Joins: undt1 (undt@gateway/vpn/protonvpn/undt)
[18:08:12] <fizzie> The details are probably very system-specific. Hypothetically, you might be hitting some limits on how many pages a process can have (while it doesn't need to actually allocate memory, it presumably still needs TLB space). If so, using the (Linux-specific) huge page mappings might help.
[18:08:24] <gog> yeah i was aout to suggest that
[18:08:36] <gog> seems the most likely culprit
[18:08:57] <gog> add MAP_HUGETLB|MAP_HUGE_1GB
[18:09:56] <roue> I'll try that. thanks.
[18:10:00] <fizzie> (The other thought I have was the memory overcommit limit, but a read-only file-backed mapping should count as 0 towards that, so that shouldn't be it.)
[18:10:19] *** Quits: undt (undt@gateway/vpn/protonvpn/undt) (Ping timeout: 256 seconds)
[18:11:05] <fizzie> (And I guess possibly `ulimit -v`, but I don't know why that'd be set.)
[18:11:09] <gog> with 4k pages it'd need 268 million PTE's with 4K pages
[18:11:19] *** Joins: undt (undt@gateway/vpn/protonvpn/undt)
[18:11:54] <gog> provided this is x86_64
[18:11:55] <roue> ulimit -v reports virtual memory          (kbytes, -v) 209715200
[18:12:31] <fizzie> Oh, well, that could also be relevant then. Assuming that's an address space limit. Because that's just 200G.
[18:12:42] <gog> ah yeah
[18:12:46] <roue> Ah, that's what I requested in the qsub. I'll ask for more.
[18:13:16] *** Quits: undt1 (undt@gateway/vpn/protonvpn/undt) (Ping timeout: 272 seconds)
[18:13:28] <fizzie> Ref: "RLIMIT_AS: This is the maximum size of the process's virtual memory (address space). The limit is specified in bytes, and is rounded down to the system page size. This limit affects calls to brk(2), mmap(2), and mremap(2), which fail with the error ENOMEM upon exceeding this limit."
[18:14:32] <fizzie> (FWIW, for a mapping measured in terabytes the huge pages are probably a good idea anyway, if possible, just from a performance perspective.)
[18:15:02] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:3d04:5279:1148:c586) (Quit: This computer has gone to sleep)
[18:15:06] <gog> i don't think the TLB is gona have 300,000,000 slots for 4k pages lol
[18:15:16] <roue> when I tried to change the mmap to include MAP_HUGETLB|MAP_HUGE_1GB it failed to compile ( did not recognize MAP_HUGE_1GB and that's not in the man page on my system ).
[18:15:26] <gog> what host?
[18:15:33] <gog> i assumed linux
[18:15:39] <roue> centos 7 linux
[18:15:39] <fizzie> You can try to go with just MAP_HUGETLB for the "default" huge pages.
[18:15:59] <roue> fizzie: okay, trying that now.
[18:16:34] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[18:16:35] <roue> with just MAP_HUGETLB it fails on the first file with "Invalid argument"
[18:16:48] <roue> using mmap(NULL, sb.st_size, PROT_READ, MAP_PRIVATE | MAP_HUGETLB , fd, 0);
[18:16:49] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[18:17:10] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[18:17:41] <roue> I'm on a cluster with access to a few different hosts. Right now I'm trying on an x86_64 box running centos 7 with 768G of memory and 745G of swap.
[18:17:45] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com) (Read error: Connection reset by peer)
[18:17:53] <gog> what's the uname -r on that?
[18:18:03] <roue> uname -r is 3.10.0-1160.53.1.el7.x86_64
[18:18:26] <gog> that should support MAP_HUGE_1GB but i guess that's gonna depend on glibc?
[18:19:25] <fizzie> EINVAL with MAP_HUGETLB is a little odd. I don't think the requirements on the other arguments should change beyond requiring more alignment for the offset. But 0 is aligned with absolutely everything. Although I guess it's an optional kernel feature in the first place.
[18:19:27] *** Quits: roan (~roan@user/roan) (Read error: Connection reset by peer)
[18:22:39] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[18:23:01] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[18:23:07] *** Joins: pizdets (~pizdets@183.182.114.123)
[18:23:07] <roue> gog: is it because of glib? I could try running it in a docker container with a more recent glibc.
[18:23:09] <fikran> The offending line is this: error = usbd_do_request(usc->sc_udev, NULL, &req, (const void *)ptr);
[18:23:10] *** Joins: Dotz0cat_ (~Dotz0cat@98.19.249.252)
[18:23:14] <roue> or is that a kernal limitation?
[18:23:17] *** Joins: Masklin_Gurder (~joel@bioinf-serv.biol.lu.se)
[18:23:18] *** Joins: jkotra_ (~jkotra@122.169.141.242)
[18:23:23] *** Joins: singularity00_ (~singulari@236.lan-hi1-2.static.rozabg.com)
[18:23:26] *** Joins: zachel_ (~zachel@user/zachel)
[18:23:28] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[18:23:32] <RuotsalainenO> Hello, I want to modify man page for realloc, what can I do? It doesn't state that object pointed to by ptr is deallocated. This caused me a lot of head ache.
[18:23:36] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[18:23:46] <fizzie> fikran: Why's there a `(const void *)` cast in the call?
[18:23:50] *** Joins: southey2 (~foxtrot@user/foxtrot)
[18:23:50] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[18:23:51] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[18:23:51] *** Joins: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch)
[18:24:07] <gog> roue: seems like a combination of factors
[18:24:10] *** Joins: [RMS] (~rs@genoce.org)
[18:24:11] *** Joins: jsmolic_ (~quassel@gentoo/developer/jsmolic)
[18:24:11] *** Joins: roan (~roan@128-124-73-237.mobile.vf-ua.net)
[18:24:12] *** Server sets mode: +Ccntz 
[18:24:15] <gog> configuration and library support
[18:24:25] *** Joins: nkiz- (~nki@adsl-89-217-141-227.adslplus.ch)
[18:24:29] *** Quits: roan (~roan@128-124-73-237.mobile.vf-ua.net) (Changing host)
[18:24:29] *** Joins: roan (~roan@user/roan)
[18:24:45] <Inline> RuotsalainenO: was the object allocated formerly ?
[18:24:53] <fikran> fizzie: The variable ptr was/is an unsigned char *, I needed to cast it to work for the call.
[18:24:57] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[18:24:57] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[18:24:57] *** Joins: some02 (~cat@user/sudden)
[18:25:01] *** Joins: pippijn_ (~pippijn@isis.xinutec.org)
[18:25:03] <RuotsalainenO> Inline: Yes it was.
[18:25:06] *** Joins: ncrowl_ (~ncrowl@89-160-77-219.cust.bredband2.com)
[18:25:09] <Inline> hmmm
[18:25:11] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[18:25:19] *** Joins: finstern1s (~X@23.226.237.192)
[18:25:20] <fikran> should I remove the `const` part?
[18:25:20] *** Joins: Alhazred_ (~Alhazred@ool-18b829c5.dyn.optonline.net)
[18:25:20] *** Joins: alch_ (~alch@151.46.75.93)
[18:25:22] *** Joins: constxd (~brad@142.134.78.128)
[18:25:25] *** Joins: ndorf_ (~nd@ob.noxio.us)
[18:25:29] *** Joins: joev1 (~joev@user/joev)
[18:25:30] *** Joins: keur3 (~keur@segfault.fun)
[18:25:32] <roue> fizzie and gog thanks for your help. I appreciate it.
[18:25:38] *** Joins: mrec_ (~markus@sundtek.de)
[18:25:40] *** Joins: raym_ (~raym@user/raym)
[18:25:41] *** Joins: routeveg_ (~lee@197.ip-51-195-136.eu)
[18:25:41] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[18:25:42] *** Joins: Terlisimo1 (~Terlisimo@outofband.ozna.net)
[18:25:44] *** Joins: xa0s_ (~xa0s@mab.sdf.org)
[18:25:47] *** Joins: overrider_ (~overrider@user/overrider)
[18:25:51] *** Joins: pooryori1k (~pooryoric@87-119-174-173.tll.elisa.ee)
[18:25:51] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[18:25:53] *** Joins: HisShadow_ (~HisShadow@user/hisshadow)
[18:25:55] <fizzie> fikran: It shouldn't need a cast in the first place, unless it's being compiled as C++.
[18:25:56] *** Joins: EtherNet_ (~ethernet@user/ethernet)
[18:26:01] <roue> I'll see if I can muster a system with newer glibc and try again.
[18:26:09] *** Joins: KevinX_ (~KevinX@user/KevinX)
[18:26:11] <fikran> When I cast to just (void *), it complains: rror: cast from 'const unsigned char *' to 'void *' drops const qualifier
[18:26:13] <gog> roue: try linux/mman.h instead of sys/mman.h ?
[18:26:21] *** Joins: LuKaRo_ (~LuKaRo@p200300dfa712f19d00000000000001f9.dip0.t-ipconnect.de)
[18:26:24] <fikran> fizzie: That produced an error too. Let me find it...
[18:26:29] <gog> although i think they might bethe same thing
[18:26:38] <fizzie> Oh, well. If it's a `const unsigned char *` to start with, that's different.
[18:27:32] <gog> fikran: you'll have to copy the original into a mutable buffer
[18:27:45] <fikran> oh?
[18:28:05] <roue> gog that helped ( it compiles with MAP_HUGE_1GB now ) but I still get an "Invalid Argument" at runtime.
[18:28:28] <roue> I had to have both linux/mman.h and sys/mman.h for it to build though.
[18:28:48] <gog> yeah, if the object your passing is like from a string literal then it might be in a .rodoata section and can't be modified, but either way it's undefined behavior to pass it to a non-const qualified parameter
[18:28:48] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[18:28:56] *** Joins: marcj- (~marc@205.175.215.11)
[18:29:01] <fikran> is there a way to "move" across a const buffer?
[18:29:10] *** Joins: n1000_ (~n1000@user/n1000)
[18:29:22] <gog> you'll have to malloc() a buffer the same size as the original object then memcpy it
[18:29:22] <fikran> like, point a pointer at a const unsigned char in memory
[18:29:25] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:29:30] <gog> that's aliasing
[18:29:34] <gog> it's undefined behavior
[18:29:48] <fikran> gog: why can't I just point the pointer at a different part of the const variable?
[18:29:51] <gog> from a pointer without equivalent qualifiers
[18:29:52] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (*.net *.split)
[18:29:52] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (*.net *.split)
[18:29:52] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (*.net *.split)
[18:29:52] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (*.net *.split)
[18:29:52] *** Quits: alch (~alch@151.46.75.93) (*.net *.split)
[18:29:52] *** Quits: joev (~joev@user/joev) (*.net *.split)
[18:29:52] *** Quits: singularity00 (~singulari@236.lan-hi1-2.static.rozabg.com) (*.net *.split)
[18:29:52] *** Quits: argonautx (~argonautx@i5E867391.versanet.de) (*.net *.split)
[18:29:52] *** Quits: Rounin (~david@84.212.130.215) (*.net *.split)
[18:29:52] *** Quits: slidercrank (~slidercra@user/slidercrank) (*.net *.split)
[18:29:52] *** Quits: eddybilley (~freddieti@217.119.232.174) (*.net *.split)
[18:29:52] *** Quits: nyah (~nyah@05453449.skybroadband.com) (*.net *.split)
[18:29:52] *** Quits: zer0x_ (~zer0x@58.186.216.56) (*.net *.split)
[18:29:52] *** Quits: riposte (~finalripo@119-17-138-70.77118a.mel.static.aussiebb.net) (*.net *.split)
[18:29:52] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (*.net *.split)
[18:29:52] *** Quits: pizdets_ (~pizdets@183.182.114.123) (*.net *.split)
[18:29:52] *** Quits: routeveg (~lee@197.ip-51-195-136.eu) (*.net *.split)
[18:29:52] *** Quits: pippijn (~pippijn@isis.xinutec.org) (*.net *.split)
[18:29:52] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (*.net *.split)
[18:29:52] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[18:29:52] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[18:29:52] *** Quits: gce108 (~gce@user/gce108) (*.net *.split)
[18:29:52] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[18:29:52] *** Quits: zlg (~zlg@user/zlg) (*.net *.split)
[18:29:52] *** Quits: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se) (*.net *.split)
[18:29:52] *** Quits: Alhazred (~Alhazred@ool-18b829c5.dyn.optonline.net) (*.net *.split)
[18:29:52] *** Quits: xa0s (~xa0s@mab.sdf.org) (*.net *.split)
[18:29:52] *** Quits: raym (~raym@user/raym) (*.net *.split)
[18:29:52] *** Quits: constxo (~brad@142.134.78.128) (*.net *.split)
[18:29:52] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[18:29:52] *** Quits: Haxxa (~Haxxa@203-123-96-204.ip4.superloop.com) (*.net *.split)
[18:29:52] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[18:29:52] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[18:29:52] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[18:29:52] *** Quits: finalsummer (~finalsumm@user/finalsummer) (*.net *.split)
[18:29:52] *** Quits: keur2 (~keur@segfault.fun) (*.net *.split)
[18:29:52] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[18:29:52] *** Quits: overrider (~overrider@user/overrider) (*.net *.split)
[18:29:52] *** Quits: mrec (~markus@sundtek.de) (*.net *.split)
[18:29:52] *** Quits: sebito91 (~sborza@45.55.74.66) (*.net *.split)
[18:29:52] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[18:29:52] *** Quits: noonien (~noonien@user/noonien) (*.net *.split)
[18:29:52] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[18:29:53] *** Quits: teroshan (~teroshan@static.28.181.130.94.clients.your-server.de) (*.net *.split)
[18:29:53] *** Quits: acidtonic_ (~acidtonic@162-17-146-153-static.hfc.comcastbusiness.net) (*.net *.split)
[18:29:53] *** Quits: jkotra (~jkotra@122.169.141.242) (*.net *.split)
[18:29:53] *** Quits: KevinX (~KevinX@user/KevinX) (*.net *.split)
[18:29:53] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[18:29:53] *** Quits: Dotz0cat (~Dotz0cat@98.19.249.252) (*.net *.split)
[18:29:53] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[18:29:53] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[18:29:53] *** Quits: zachel (~zachel@user/zachel) (*.net *.split)
[18:29:53] *** Quits: haniaF (~haniaF@83.24.224.152.ipv4.supernova.orange.pl) (*.net *.split)
[18:29:53] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[18:29:53] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[18:29:53] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[18:29:53] *** Quits: LuKaRo (~LuKaRo@p57b157e5.dip0.t-ipconnect.de) (*.net *.split)
[18:29:53] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[18:29:53] *** Quits: kilobyte_ch (~kbch@77.109.171.24) (*.net *.split)
[18:29:53] *** Quits: Grell (~john@ool-4579c605.dyn.optonline.net) (*.net *.split)
[18:29:53] *** Quits: icy (~icy@user/icy) (*.net *.split)
[18:29:53] *** Quits: marcj (~marc@205.175.215.11) (*.net *.split)
[18:29:53] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[18:29:53] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[18:29:53] *** Quits: fstd (~fstd@xdsl-78-34-125-135.nc.de) (*.net *.split)
[18:29:53] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[18:29:53] *** Quits: DPA (~DPA@94.16.128.75) (*.net *.split)
[18:29:53] *** Quits: cyphics (~cyphix@user/cyphics) (*.net *.split)
[18:29:53] *** Quits: ncrowl (~ncrowl@89-160-77-219.cust.bredband2.com) (*.net *.split)
[18:29:53] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[18:29:53] *** Quits: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net) (*.net *.split)
[18:29:53] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[18:29:53] *** Quits: ntwk (~ntwk@user/ntwk) (*.net *.split)
[18:29:53] *** Quits: nkiz (~nki@adsl-89-217-141-227.adslplus.ch) (*.net *.split)
[18:29:53] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (*.net *.split)
[18:29:53] *** Quits: kilolympus (~kilolympu@31.205.200.235) (*.net *.split)
[18:29:53] *** Quits: foul_owl (~kerry@23.82.193.89) (*.net *.split)
[18:29:53] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[18:29:53] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (*.net *.split)
[18:29:53] *** Quits: acolarh (~niels@3e6be663.rev.stofanet.dk) (*.net *.split)
[18:29:53] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[18:29:53] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[18:29:53] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[18:29:53] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[18:29:53] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[18:29:53] *** Quits: hirish_ (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[18:29:53] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[18:29:53] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[18:29:53] *** Quits: buffet (~buffet@buffet.sh) (*.net *.split)
[18:29:53] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[18:29:53] *** Quits: ndorf (~nd@ob.noxio.us) (*.net *.split)
[18:29:53] *** Quits: slavfox (~slavfox@93.158.232.111) (*.net *.split)
[18:29:53] *** Quits: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it) (*.net *.split)
[18:29:53] *** Quits: voldial (~user@195.179.201.175) (*.net *.split)
[18:29:53] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[18:29:53] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[18:29:53] *** Quits: jsmolic (~quassel@gentoo/developer/jsmolic) (*.net *.split)
[18:29:53] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[18:29:53] *** X-Scale` is now known as X-Scale
[18:29:53] *** Lord_of_Life_ is now known as Lord_of_Life
[18:29:54] *** sebito91_ is now known as sebito91
[18:29:54] *** noonien6 is now known as noonien
[18:29:54] *** teroshan2 is now known as teroshan
[18:29:54] *** DonRichie2 is now known as DonRichie
[18:29:54] *** buffet5 is now known as buffet
[18:29:57] *** slavfox_ is now known as slavfox
[18:29:57] *** flynn4 is now known as flynn
[18:29:57] *** abraham2 is now known as abraham
[18:29:57] *** jancoow9 is now known as jancoow
[18:29:57] *** Dotz0cat_ is now known as Dotz0cat
[18:29:57] *** jkotra_ is now known as jkotra
[18:29:57] *** drin is now known as geezabiscuit
[18:29:57] *** FragByte_ is now known as FragByte
[18:30:00] *** whup_dup is now known as whupdup
[18:30:05] <fikran> wow, netsplit...
[18:30:19] <gog> fikran: because it's undefined behavior and if the procedure wants to modify the buffer at that location it might SIGSEV
[18:30:26] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[18:30:32] <fikran> it doesn't want to modify, just read.
[18:30:37] <roue> gog: I've got to drop. thanks again. I'll fight with it more later and come back if I figure out a work-around.
[18:30:49] <fikran> gog: I'm not saying you're wrong, just confused.
[18:30:53] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[18:31:00] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Quit: Leaving)
[18:31:08] *** Joins: digilink (~digilink@user/digilink)
[18:31:29] <fikran> gog: If there is a const buffer, like const char x[] = "Something"; and I do char *ptr = x; this isn't possible?
[18:31:39] <fikran> ptr[1] wouldn't be 'o' ?
[18:32:32] <gog> roue: np :)
[18:32:51] <gog> fikran: if the procedure doesn't modify the object then make the parameter const
[18:33:22] <fikran> the ptr value?
[18:33:25] <fikran> variable*
[18:33:36] <gog> the parameter in the function you're calling
[18:33:57] <gog> don't alias pointers like that, it's against the law
[18:33:58] <fizzie> I imagine the problem here is, depending on what kind of request it is, `usbd_do_request` may or may not modify the data, and they've gone the lazy way of only providing a single function.
[18:34:08] <gog> oh i see
[18:34:13] <fikran> yeah, I'm stuck.
[18:34:26] <fikran> if I make it const, it complains. If I remove const, it complains.
[18:34:36] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 250 seconds)
[18:34:41] <gog> what's the declaration of the variable?
[18:34:45] <gog> where does it come from?
[18:35:15] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Ping timeout: 256 seconds)
[18:35:38] *** hayaliali is now known as alip
[18:36:27] *** Joins: zlg (~zlg@user/zlg)
[18:36:30] *** Joins: foul_owl (~kerry@23.82.193.89)
[18:36:46] *** Joins: acolarh (~niels@3e6be663.rev.stofanet.dk)
[18:36:58] *** Joins: koolazer (~koo@user/koolazer)
[18:37:01] *** Joins: Rounin (~david@84.212.130.215)
[18:37:02] <gog> i'm guessing it's a string literal?
[18:37:19] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:37:20] *** Joins: cyphics (~cyphix@user/cyphics)
[18:37:26] *** Joins: nyah (~nyah@05453449.skybroadband.com)
[18:37:28] *** Joins: kilobyte_ch (~kbch@77.109.171.24)
[18:37:42] *** Joins: Lyude (~lyudess@pool-96-230-100-15.bstnma.fios.verizon.net)
[18:37:51] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[18:37:56] *** Joins: ntwk (~ntwk@user/ntwk)
[18:38:12] *** Joins: voldial (~user@195.179.201.175)
[18:38:20] *** Joins: crashrep (~crashrep@user/crashrep)
[18:38:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[18:39:44] <fikran> um..let me check.
[18:40:37] *** Quits: zer0x__ (~zer0x@58.186.216.56) (Ping timeout: 256 seconds)
[18:45:04] <fikran> gog: The definition of what I'm pointing to is this: http://bxr.su/FreeBSD/sys/sys/firmware.h#55
[18:45:13] <fikran> its a const void *data;
[18:45:13] *** Joins: kts (~kts@103.73.237.215)
[18:45:31] <fikran> I'm pointing to it with a const unsigned char *ptr;
[18:46:55] <gog> ah ok, so, the only legal workaround i can think of is void *b = malloc(fw_ptr->datasize); memcpy(b, fw_ptr->data, fw_ptr->datasize);
[18:50:17] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[18:50:17] *** Quits: gproto23_ (~gproto23@user/gproto23) (Remote host closed the connection)
[18:52:10] <gog> ¯\_(ツ)_/¯ it's a little silly but
[18:52:41] <fizzie> A lot of real programs do probably use non-const-qualified pointers to read const-qualified objects, though. But if you can't do the `(void *)` const-discarding cast, it is what it is.
[18:53:01] <fikran> let me see what's up.
[18:53:12] <fikran> yeah, I can change that from void* to whatever.
[18:53:21] <fikran> I haven't coded in C in a few years, a bit rusty.
[18:53:33] <gog> those real programs are ill-defined then :D
[18:53:35] <fikran> and its a side project...
[18:53:55] <gog> correctly qualify your pointer types, friends
[18:54:33] <fikran> This happens elsewhere in the BSD kernel: http://bxr.su/FreeBSD/sys/dev/rtwn/if_rtwn_fw.c#139
[18:54:44] <fikran> ptr = fw->data, and then hdr ends up being a pointer to a struct.
[18:54:56] <gog> D:
[18:54:58] <fikran> so its almost like they trick the compiler into forgetting its original type.
[18:55:16] * gog faints
[18:55:22] <fikran> is that...bad?
[18:55:26] <fikran> it works for me, I use this driver. rtwn
[18:55:30] <fizzie> The language doesn't make it particularly easy to do the right thing if you want to write a single function that could operate on const data but also on mutable one, depending on parameter values.
[18:56:08] <gog> it's kinda shaky
[18:56:12] <gog> and in kernel code it makes me cringe
[18:56:44] <gog> well no, because in this function ptr is const u_char *
[18:56:49] <gog> so thaat's fine
[18:57:49] <meator> Is sprintf() signal-safe?
[18:58:44] *** Quits: _wovixo_ (~wovixo@128.104.205.49) (Quit: Leaving)
[18:59:00] <sham1> At least the man-page doesn't say
[18:59:03] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:59:16] <sham1> All it says is that the *printf family is MT-safe
[18:59:42] <sham1> MT-Safe locale at that
[19:02:21] <fikran> gog please explain?
[19:02:59] *** Quits: roan (~roan@user/roan) (Quit: Lost terminal)
[19:03:02] <fikran> not famliar with u_char
[19:03:08] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[19:03:18] <sham1> It's just unsigned char
[19:03:22] <gog> it's probably a typedef or a macro for unsigned char
[19:03:28] <gog> 119    const u_char *ptr;
[19:03:42] <gog> this is fine, because the original pointer has the same cv-qualification
[19:04:06] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:04:20] <gog> but as soon as you have to pass it as an unqualified parameter it gets dodgy and might be undefined behavior even
[19:05:07] <theseb> How invoke a function if you know the address of &my_func ?
[19:05:24] *** raym_ is now known as raym
[19:05:24] <theseb> i.e. I have a function pointer...and don't know how to use it
[19:05:44] <constxd> what type do you have?
[19:05:48] <constxd> `void *`?
[19:05:54] <masoudd> (*funcptr)();
[19:05:57] <masoudd> i assume
[19:06:01] <theseb> I created this typedef..       typedef unsigned int* (*func)(unsigned int**, unsigned int*, unsigned int**);
[19:06:17] <constxd> ok
[19:06:23] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[19:06:39] <constxd> so what's the problem
[19:06:50] <theseb> maybe 1. do a declartion.... func f;   and then 2. f = <address> ?
[19:07:11] <theseb> then i can do f(...) to invoke?
[19:07:12] <constxd> what is <address> though
[19:07:19] <constxd> what is the type of that expression
[19:07:29] <theseb> constxd: i have that stored somewhere and i retrieved it...it is a number
[19:07:32] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 250 seconds)
[19:07:33] *** some02 is now known as sudden
[19:07:37] <theseb> constxd: i stored it as an unsigned int
[19:07:41] <theseb> so need to typecast it
[19:07:55] <theseb> f = (func) the_address; ?
[19:08:02] <constxd> yes
[19:09:09] <constxd> maybe to be legal you have to go through uintptr_t but i can't remember and either way you're clearly doing something implementation-specific so i doubt it really matters
[19:09:18] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:10:02] <gog> safest to do uintptr_t yeah
[19:10:20] <theseb> constxd: I have working code in which i pass an argument of type func.....I don't pass it &some_function but rather some_function and it works
[19:10:21] <theseb> ?
[19:10:22] <sham1> Why would you store the pointer as an integer anyway
[19:11:07] <constxd> theseb: function designators are automatically converted to function pointers when used as expressions
[19:11:28] <constxd> either one is fine
[19:11:55] <theseb> constxd: aha! I needed that! thanks!
[19:11:55] <constxd> same thing applies in reverse when you call it: you can write `func(...)` or `(*func)(...)`
[19:12:32] <theseb> constxd: i'm impressed you knew that level of details
[19:12:56] <constxd> ^ me every time fizzie speaks
[19:13:29] <gog> function pointers are very handy things
[19:14:26] *** Joins: kuber (~kuber@75-172-6-223.tukw.qwest.net)
[19:14:47] <theseb> constxd: yea what is fizzie's job?
[19:14:56] <theseb> how did get so knowledgeable ?
[19:15:58] <constxd> not sure, you'd have to ask him lol
[19:18:41] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-247.cspire.com)
[19:19:36] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[19:21:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:21:49] *** cryptone1tor is now known as cryptonector
[19:23:46] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:23:55] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:23:58] *** Joins: ymwm_ (~yingmanwu@27.153.164.187)
[19:23:59] *** Quits: bnchs__ (~bnchs@105.158.17.201) (Ping timeout: 256 seconds)
[19:24:19] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 268 seconds)
[19:26:47] *** Joins: bliminse (~bliminse@host109-152-150-162.range109-152.btcentralplus.com)
[19:27:12] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:b508:641a:9acd:2179) (Quit: Textual IRC Client: www.textualapp.com)
[19:27:18] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:28:33] *** Quits: begriffs (~begriffs@user/begriffs) (Quit: Leaving)
[19:29:26] *** Joins: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77)
[19:30:06] *** Quits: Roman[m] (~wrongt@2001:470:69fc:105::341e) (Quit: You have been kicked for being idle)
[19:30:08] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (Quit: You have been kicked for being idle)
[19:30:13] *** Joins: crashrep (~crashrep@user/crashrep)
[19:30:30] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[19:34:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:36:17] *** Joins: crashrep (~crashrep@user/crashrep)
[19:37:16] *** Quits: rgrinberg (~textual@2806:101e:7:70b6:74fb:2532:55e4:bc77) (Ping timeout: 268 seconds)
[19:39:33] *** Quits: Juliu_ (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Quit: Quit)
[19:39:36] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Quit: Quit)
[19:39:53] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0)
[19:40:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:40:41] *** Quits: freddietilley (~freddieti@217.119.232.174) (Ping timeout: 256 seconds)
[19:41:35] *** Quits: CATS (~apic@brezn2.muc.ccc.de) (Quit: Reconnecting)
[19:42:01] *** Joins: CATS (apic@brezn3.muc.ccc.de)
[19:42:18] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[19:43:05] *** Joins: crashrep (~crashrep@user/crashrep)
[19:47:35] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[19:47:37] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Remote host closed the connection)
[19:47:47] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[19:48:48] *** john__ is now known as Grell
[19:50:49] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Read error: Connection reset by peer)
[19:50:57] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[19:54:52] *** Joins: crashrep (~crashrep@user/crashrep)
[19:56:30] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[19:59:15] *** Quits: crashrep (~crashrep@user/crashrep) (Ping timeout: 240 seconds)
[20:00:12] <fikran> Why does this line work? http://bxr.su/FreeBSD/sys/dev/rtwn/if_rtwn_fw.c#140
[20:00:16] <fikran> Doesn't it drop the const qualifier?
[20:00:47] *** Quits: dsrt^ (~dsrt@207.243.108.170) (Remote host closed the connection)
[20:01:25] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 256 seconds)
[20:01:40] <gog> fikran: no, 118    const struct r92c_fw_hdr *hdr;
[20:02:36] *** Quits: singularity00_ (~singulari@236.lan-hi1-2.static.rozabg.com) (Ping timeout: 240 seconds)
[20:03:36] *** Joins: bnchs (~bnchs@105.158.17.201)
[20:06:16] *** Joins: vicfred (~vicfred@user/vicfred)
[20:06:26] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Read error: Connection reset by peer)
[20:06:46] *** ghost4096 is now known as pranshukhandal
[20:07:01] *** Joins: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff)
[20:07:28] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:08:45] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[20:08:59] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[20:09:57] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[20:10:30] <kurahaupo> fikran: After « const T *p; », p may be assigned to, but *p may not.
[20:10:57] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:11:52] <kurahaupo> Using const in a cast only makes sense for one or more pointed-to parts; you can't apply const to a value.
[20:13:31] *** Joins: not (~root@5.2.79.79)
[20:14:36] *** Quits: AssKoala (~asskoala@user/asskoala) (Ping timeout: 240 seconds)
[20:15:15] <kurahaupo> fikran: In an expression like « (const T *) x » the "const" is part of the pointer type, whereas in « (T * const) x » the "const" is meaningless and is ignored (perhaps with a diagnostic, though I'm not sure if it's obligatory)
[20:15:55] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[20:15:55] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[20:15:55] *** Joins: AssKoala (~asskoala@user/asskoala)
[20:16:17] *** Joins: Spock_ncc1701 (~Spock_ncc@85.203.44.61)
[20:19:10] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[20:19:20] *** cross_ is now known as cross
[20:19:34] *** jsmolic_ is now known as jsmolic
[20:25:01] *** Joins: singularity00_ (~singulari@236.lan-hi1-2.static.rozabg.com)
[20:25:48] *** Quits: alch_ (~alch@151.46.75.93) (Ping timeout: 240 seconds)
[20:27:18] *** Quits: fe23 (~fe23@2409:8a34:466:6010:9517:a17:c2c0:b4f7) (Quit: fe23)
[20:27:55] *** Joins: alch (~alch@151.44.83.15)
[20:29:02] *** Joins: neverfindme (~hayden@158.123.160.43)
[20:31:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:31:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:31:09] *** Joins: wroathe (~wroathe@user/wroathe)
[20:32:12] *** Quits: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar) (Quit: Leaving)
[20:32:17] *** Joins: merrinx1 (~merrinx@ti0028a400-3686.bb.online.no)
[20:32:26] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[20:34:35] *** Quits: Spock_ncc1701 (~Spock_ncc@85.203.44.61) (Quit: Leaving)
[20:35:59] *** Trashlord__ is now known as Trashlord
[20:36:31] *** Quits: bnchs (~bnchs@105.158.17.201) (Ping timeout: 256 seconds)
[20:36:37] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[20:37:07] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[20:39:30] *** Quits: kuber (~kuber@75-172-6-223.tukw.qwest.net) (Quit: leaving)
[20:43:12] <ioxzev1z> kurahaupo, doesn't T * const apply the const to the pointer itself, such that you cannot modify it, whereas T const * applies const to the value, such that you can't modify it
[20:43:20] <ioxzev1z> Hence char const * const is valid
[20:44:04] *** Quits: wroathe (~wroathe@user/wroathe) (Read error: Connection reset by peer)
[20:44:28] <kurahaupo> ioxzev1z: when declaring a pointer object, yes. When casting a value (that happens to bea pointer), it's senseless
[20:45:14] <kurahaupo> A value is neither a const object nor a  non-const object
[20:46:11] *** Quits: ymwm_ (~yingmanwu@27.153.164.187) (Ping timeout: 252 seconds)
[20:46:19] <kurahaupo> For the sake reason that const in « (unsigned long int const)4 » is senseless
[20:46:36] <kurahaupo> *same reason
[20:46:53] <ioxzev1z> oic
[20:49:31] *** Joins: the_lanetly_052 (~the_lanet@194.135.166.223)
[20:52:25] *** Joins: phrix (~phrix@185.76.176.43)
[20:53:28] *** Joins: tradar (~tradar@user/tradar)
[20:55:05] *** Joins: freddietilley (~freddieti@2a02-a454-7f89-1-4f5-d2d4-abbc-31f6.fixed6.kpn.net)
[20:56:24] *** Quits: merrinx1 (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[20:57:18] *** Joins: EdFletcher (~PKD@user/edfletcher)
[20:57:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:57:38] *** Quits: phrix (~phrix@185.76.176.43) (Remote host closed the connection)
[20:59:42] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: Connection reset by peer)
[20:59:54] *** Quits: freddietilley (~freddieti@2a02-a454-7f89-1-4f5-d2d4-abbc-31f6.fixed6.kpn.net) (Ping timeout: 268 seconds)
[21:01:02] *** Joins: Satin (uid193953@user/Seten)
[21:01:17] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:ffda:8964:beaf:e5e3) (Ping timeout: 240 seconds)
[21:05:23] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:07:32] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[21:09:02] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[21:09:05] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[21:10:08] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95)
[21:11:36] <fizzie> ,c11 footnote.104
[21:11:36] <candide> http://www.iso-9899.info/n1570.html#FOOTNOTE.104 A cast does n﻿ot yield an lvalue. Thus, a cast to a qualified type has the same effect as a cast to the unqualified version of the type.
[21:11:57] <fizzie> (Not a constraint violation, though.)
[21:12:14] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 268 seconds)
[21:12:26] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[21:12:40] *** Joins: pavlushka (~pavlushka@user/pavlushka)
[21:12:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc11:8ee2:2ea1:37a0) (Ping timeout: 245 seconds)
[21:12:58] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b1a0:4b0f:495e:8174)
[21:15:46] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 245 seconds)
[21:17:53] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 256 seconds)
[21:18:49] *** Joins: joev1 (~joev@user/joev)
[21:19:43] <Techcable> The more I glance at this channel the more I'm convinced I know nothing about C
[21:19:54] <Techcable> :laugh:
[21:20:21] *** Joins: slavfox_ (~slavfox@93.158.232.111)
[21:20:44] <Inline> the timeless noob symptom
[21:20:47] <Inline> lol
[21:21:06] *** slavfox_ is now known as slavfox
[21:21:10] *** Quits: gce108_ (~gce@38.128.188.159) (Quit: Leaving)
[21:22:17] *** Joins: gce108 (~gce@user/gce108)
[21:22:45] *** Joins: rgrinberg (~textual@2806:101e:7:cba4:b560:bad3:e7c6:5293)
[21:26:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:b1a0:4b0f:495e:8174) (Quit: Quit)
[21:26:36] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 245 seconds)
[21:26:38] *** Quits: cthi (~cthi@097-082-138-151.res.spectrum.com) (Quit: leaving)
[21:27:46] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:e4e8:d997:3422:7c95) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:29:04] *** Joins: terminalpusher (~terminalp@2a01:586:cee:1:27cd:58f:599e:6a92)
[21:29:28] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[21:29:56] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[21:30:11] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[21:30:26] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[21:30:40] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Quit: WeeChat 3.4)
[21:31:17] *** Joins: Techcable (~Techcable@168.235.93.147)
[21:31:18] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[21:31:24] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 240 seconds)
[21:31:46] *** Quits: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de) (Quit: Leaving)
[21:32:33] *** Joins: slavfox (~slavfox@93.158.232.111)
[21:33:55] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:34:11] *** Joins: Inline (~Inline@p200300cd471026001e3cab216ce28c3c.dip0.t-ipconnect.de)
[21:37:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:37:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:38:31] *** Joins: panda88kazag (~RadimPavl@176-74-132-138.netdatacomm.cz)
[21:40:14] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[21:44:31] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 245 seconds)
[21:45:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:45:25] *** Quits: Red (~Red@41.92-221-233.customer.lyse.net) (Read error: Connection reset by peer)
[21:46:04] *** Joins: Akuli (~Akuli@82-203-164-25.bb.dnainternet.fi)
[21:46:45] *** Joins: Red (~Red@41.92-221-233.customer.lyse.net)
[21:48:01] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[21:50:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (silver.libera.chat (Nickname regained by services)))
[21:50:06] *** vinleod is now known as vdamewood
[21:50:26] <gog> the first step to learning is saying "i don't know" :)
[21:54:27] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[21:56:00] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[21:56:51] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:3ca9:5db3:71e1:e3fc)
[21:57:56] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:3ca9:5db3:71e1:e3fc) (Client Quit)
[22:00:59] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[22:01:24] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[22:02:06] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[22:02:06] *** jmiehe1 is now known as jmiehe
[22:02:37] *** Joins: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0)
[22:03:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:9479:a856:8538:8810)
[22:04:03] *** Quits: Dotz0cat (~Dotz0cat@98.19.249.252) (Ping timeout: 256 seconds)
[22:05:16] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b)
[22:06:03] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[22:07:10] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[22:07:21] <theseb> Anyone else notice they thrive in *development* jobs but not *maintenance*?  What I mean is...I find having to learn an existing blob of source code to be exasperating.  Creating new code is soo much nice and doable.  Agree?
[22:07:29] <theseb> nicer*
[22:09:36] <caze> theseb: See OpenBSD's release cycle.
[22:09:51] *** Joins: constxd_ (~brad@142.134.78.128)
[22:10:22] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[22:10:42] <theseb> caze: how does that relate? i like openbsd
[22:11:58] *** Joins: somlis (~somlis@user/somlis)
[22:12:32] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[22:15:18] *** Quits: Guest909 (~robyndrak@154.16.118.240) (Read error: Connection reset by peer)
[22:15:32] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:16:27] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[22:16:29] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:16:31] *** Quits: constxd_ (~brad@142.134.78.128) (Quit: WeeChat 3.3)
[22:17:21] <caze> theseb: https://www.youtube.com/watch?v=i7pkyDUX5uM
[22:17:22] <candide> Title of caze's link: AsiaBSDCon 2009:The OpenBSD Release Process: A Success Story - YouTube
[22:17:30] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[22:20:45] *** Joins: bnchs (~bnchs@41.141.156.15)
[22:21:18] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 268 seconds)
[22:22:24] *** ChanServ sets mode: +o candide
[22:22:25] *** candide sets mode: -b $a:not_not
[22:22:55] *** candide sets mode: -b $a:catbutts
[22:24:17] *** Quits: pavlushka (~pavlushka@user/pavlushka) (Ping timeout: 240 seconds)
[22:26:07] *** Joins: ekathva (~ekathva@2001:999:51:19b8:f2b5:31fb:6c84:f10)
[22:26:12] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:57] *** Quits: joev1 (~joev@user/joev) (Ping timeout: 240 seconds)
[22:28:50] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[22:29:08] *** Joins: joev1 (~joev@user/joev)
[22:30:07] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[22:31:01] *** Quits: the_lanetly_052 (~the_lanet@194.135.166.223) (Ping timeout: 256 seconds)
[22:31:18] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:33:48] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[22:34:24] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:9479:a856:8538:8810) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:34:47] *** Joins: tiotags (~tiotags@user/tiotags)
[22:35:48] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:35:53] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:39:22] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:42:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[22:45:25] *** Quits: Alhazred_ (~Alhazred@ool-18b829c5.dyn.optonline.net) (Ping timeout: 256 seconds)
[22:50:55] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[22:53:32] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[22:55:23] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 256 seconds)
[22:56:17] <chiselfuse> is there any difference between:
[22:56:21] <chiselfuse> `short function() { long x = <num>; short blah; blah = (short)x; return blah; }`
[22:56:27] <chiselfuse> `short function() { long x = <num>; return (short)x; }`
[22:56:57] <chiselfuse> or rather, why would someone use the former over the latter?
[22:57:21] <gog> chiselfuse: godbolt.org
[22:57:35] <gog> do both versions see what the assembler output is
[22:57:45] <gog> :D
[22:58:35] <gog> but depending on optimization level the compiler might elide the intermediate definition if it has no effect
[22:58:55] <chiselfuse> gog: unfortunately, i can't browse that webpage with my internet and i don't know enough gcc usage flags to tell it to output little assembly portins on my local system
[22:59:13] <chiselfuse> s/portins/portions
[22:59:14] <gog> gcc -s outputs assembly
[23:00:49] <rcf> chiselfuse: there is no meaningful difference.
[23:01:28] <chiselfuse> pff
[23:01:32] <chiselfuse> how do i do this in bash
[23:01:43] <chiselfuse> gcc -s <(`short function() { long x = <num>; short blah; blah = (short)x; return blah; }`)
[23:01:53] <chiselfuse> doesn't work
[23:01:56] <gog> chiselfuse: no optimiation flags https://i.imgur.com/qFgWOka.png
[23:02:05] <gog> chiselfuse: optimization flags
[23:02:07] <gog> https://i.imgur.com/fOug2rm.png
[23:02:23] <gog> chiselfuse: you'd have to make a .c file for those
[23:02:26] <chiselfuse> rcf: what non meaningful difference is there though?
[23:02:29] *** Joins: oilt^ (~oilt@50.224.20.226)
[23:03:02] <gog> there were no operations performed on the value
[23:03:10] <gog> statements with no real effect
[23:03:15] <gog> the optimizer sees this and chucks them
[23:04:13] <chiselfuse> thank you for the screenshots
[23:04:39] <rcf> chiselfuse: some deranged minds may prefer that style; more often, there was some operation performed on the short before it was returned at some point, but then it was removed, with the useless intermediate remaining.
[23:05:07] <chiselfuse> i'm just reading this code somewhere and all of a sudden i wonder if there's some reason it was written this way (the longer way)
[23:05:19] <gog> stylistic choice
[23:06:02] <gog> or to make it explicitly clear that even though the value operated on was long the value to be returned is short
[23:06:08] <gog> which is itself a stylistic choice
[23:06:19] *** Joins: tetravus (~tetravus@c-71-231-69-112.hsd1.wa.comcast.net)
[23:06:37] <gog> but it might also be possible that a hypothetical machine has a different return register for short values in its C abi
[23:06:39] <chiselfuse> rcf: and what if there were some operation done intermediately? how does that change anything
[23:06:41] <gog> i don't know of any
[23:07:04] <gog> the host might have different registers to use for differently-sized types, different instructions
[23:07:18] <gog> so the declared type matters
[23:07:18] <rcf> chiselfuse: it would be a stylistic choice then. Start with the long, do whatever, convert to short, do more stuff, then return the short.
[23:08:15] <chiselfuse> oh, do stuff on short? not at all in this case, but stuff done to long and then sequentially assigned to short and returned, yes
[23:08:25] <rcf> chiselfuse: if you then decide you don't need to do more stuff with the short, you delete it. Leaving behind what you see here.
[23:08:44] <rcf> It seems useless *now*, but at some point it may have had more purpose.
[23:09:01] <gog> yeah, machnes change, compilers change
[23:09:05] <rcf> Not all code you see will be written with intention from start to finish.
[23:09:08] <gog> code might remain
[23:09:32] *** Quits: DPA- (~DPA@75-128-16-94.static.cable.fcom.ch) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[23:09:33] <rcf> It much more often evolves over time.
[23:09:59] <chiselfuse> gog: i mean, i understand how it makes it more visually clear in how it would be done in assembly, and since you think alot about assembly when writing C, but this is still C, not assembly
[23:09:59] <rcf> Leaving behind structure that might not make sense if you were starting from scratch.
[23:10:12] <rcf> It's not even about assembly in my example.
[23:10:32] <chiselfuse> rcf: i know, i was talking about what gog said
[23:10:50] <gog> well it's not so much thinking about how its done in assembly, but how different types might have different semantics
[23:10:54] <gog> depending on the machine
[23:11:06] *** Joins: unlink2 (~unlink@p200300ebcf3e190012b7094ba83de7f3.dip0.t-ipconnect.de)
[23:11:07] <gog> but on x86 that's not really the case for integral types
[23:11:19] <gog> mostly
[23:11:30] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[23:11:40] <rcf> chiselfuse: a lot of old 'optimization' is left behind or even applied prematurely to new code by people who don't realize what is actually going on under the hood. But it's the same general idea: it may have made sense in the past, even if you wouldn't do it that way now.
[23:12:22] <chiselfuse> welp, i was more worried about me possibly not seeing some implicit conversion, promotion, stuff like that that would make it result in different logic in C model, but apparently it's the same
[23:13:00] *** Quits: constxd (~brad@142.134.78.128) (Quit: WeeChat 2.8)
[23:14:05] *** EtherNet_ is now known as EtherNet
[23:14:47] *** Joins: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:db8:21e3:7cd5:55c5)
[23:15:55] *** KevinX_ is now known as KevinX
[23:17:43] *** Quits: sh0ne (~sh0ne@2a06:5b00:6fb:2a00:db8:21e3:7cd5:55c5) (Client Quit)
[23:18:59] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[23:19:18] *** Joins: immibis_ (~hexchat@62.156.144.218)
[23:19:55] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[23:20:26] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[23:21:26] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[23:21:41] *** Quits: masoudd (~masoudd@user/masoudd) (Ping timeout: 256 seconds)
[23:21:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[23:21:51] *** Quits: immibis (~hexchat@2a02:3032:a:5f88:44a5:c3af:6367:30ff) (Ping timeout: 252 seconds)
[23:22:52] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:23:41] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[23:24:12] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:25:38] *** Lord_of_Life_ is now known as Lord_of_Life
[23:26:17] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b)
[23:26:55] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
[23:29:33] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fcdf:d7ba:7957:a89b) (Ping timeout: 252 seconds)
[23:31:24] *** Quits: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f) (Ping timeout: 240 seconds)
[23:33:48] *** Quits: gjvc (~gjvc@user/gjvc) (Quit: leaving)
[23:34:07] *** Joins: gjvc (~gjvc@user/gjvc)
[23:39:05] *** Joins: lispy (~lispy@user/lispy)
[23:39:09] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[23:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[23:50:48] *** Quits: akuma (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[23:51:08] *** Quits: rgrinberg (~textual@2806:101e:7:cba4:b560:bad3:e7c6:5293) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:54:53] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Quit: leaving)
[23:56:40] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[23:56:54] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:58:00] *** Joins: Betal (~Betal@user/betal)
[23:59:48] *** Joins: geezycee (~geezycee@2600:1700:3fc6:4010:3493:70d8:e60:cc7f)
