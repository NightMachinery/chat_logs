[00:03:43] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:04:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[00:07:06] <gurkenglas> Why is there stimes but not mtimes?
[00:07:29] <monochrom> It got the name mconcat.
[00:07:35] <gurkenglas> ah ^^
[00:07:37] <monochrom> err no, nevermind.
[00:07:53] <monochrom> @type stimes
[00:07:54] <lambdabot> (Semigroup a, Integral b) => b -> a -> a
[00:08:38] <pnotequalnp> Because the monoid version doesn't have a different type.
[00:09:12] <monochrom> > stimes 0 ([] :: [Int])
[00:09:14] <lambdabot>  []
[00:09:18] <pnotequalnp> There is mtimesDefault
[00:09:28] <pnotequalnp> Which is used as the definition for `stimes` for types that are monoids.
[00:09:30] <monochrom> > stimes 0 "x"
[00:09:32] <lambdabot>  ""
[00:09:58] <monochrom> Hrm how does it know that mempty="" exists?
[00:10:10] <pnotequalnp> And it's the same thing as the default stimes except it uses mempty for 0 instead of an error
[00:10:24] <monochrom> But I don't get an error :)
[00:11:03] *** Joins: benin3 (~benin@183.82.207.30)
[00:11:04] <pnotequalnp> It's overridden on the semigroup instance for lists.
[00:11:08] <monochrom> Err nevermind. Yeah.
[00:11:12] <gurkenglas> aaaaiiiiieeeee
[00:11:21] <pnotequalnp> Since stimes is a class method and not just a polymorphic function.
[00:13:17] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 268 seconds)
[00:13:17] *** benin3 is now known as benin
[00:14:59] <gurkenglas> the despair-inducing part is that any two monoid instances for the same semigroup are isomorphic so i can't even really go "but what if someone makes a semigroup with two monoid instances"
[00:16:53] <pnotequalnp> Coherence prevents that anyway. Any given semigroup instance can only have one monoid instance based on it.
[00:17:01] <gurkenglas> yes i just said that
[00:17:28] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[00:17:29] <pnotequalnp> Well I mean, the fact that semigroups can only have one identity is superfluous.
[00:17:51] <monochrom> Why is that despair-inducing? I find it comforting and beautiful. :)
[00:18:04] <pnotequalnp> Since you can't define multiple monoid instances based on the same semigroup instance to begin with, even if they could have multiple identities, Haskell wouldn't let you write that.
[00:18:14] <gurkenglas> you can use the constraints library to get around that haskell limitation i think
[00:18:43] <gurkenglas> it's despair-inducing because stimes is *wrong* to refer to mempty but how am i supposed to convince people of this
[00:19:35] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[00:19:57] <pnotequalnp> Tell that to all the people writing instance Applicative M where (<*>) = ap :b
[00:20:14] <gurkenglas> that's fine, it's just a shortcut
[00:20:25] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[00:20:53] <monochrom> The robust moral reason is that if the type says Semigroup only, one does not expect it to have access to mempty.
[00:20:53] <tomsmeding> why would it be better for stimes to throw an error on 0?
[00:21:13] <gurkenglas> tomsmeding: because of the s
[00:21:25] <monochrom> This doesn't need "there can be two conflicting ways".
[00:21:57] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:22:44] <monochrom> IOW parametricity is a more robust moral reason.
[00:23:12] <monochrom> I mean, as far as moral reasons are concerned. I don't really mind either way.
[00:23:36] <gurkenglas> ah the thing that monochrom said inspires in me the argument that i previously failed to find: "forall m. Semigroup m => m" should not have an implementation, but it has "stimes 0 undefined"
[00:24:21] <gurkenglas> (or i suppose by modus tollens, and at that point at least you're consistent so no more aaaaiiieee, remove Monoid and put mempty in Semigroup with default implementation stimes 0 undefined)
[00:25:23] <tomsmeding> gurkenglas: I guess you're arguing that stimes should not be a class method?
[00:26:25] <gurkenglas> tomsmeding: presumably it is a class method because it's sometimes asymptotically faster than the default implementation, and that's valid
[00:26:49] <tomsmeding> I kind of follow your and monochrom's argument that morally stimes should throw for 0, to make it have the same behaviour as if it was a top-level function -- inclusion in the class is only to enable a more optimised implementation in some cases. But I'm... just not able to get worked up over this. There are worse things in the design of Haskell :p
[00:27:25] <tomsmeding> this is not the hill to die on
[00:27:30] <gurkenglas> are there worse newer things, though?
[00:27:35] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 240 seconds)
[00:28:07] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[00:30:13] <pnotequalnp> I was motivated to make something cursed. https://paste.tomsmeding.com/hPK0qgjb
[00:30:15] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f)
[00:30:49] <tomsmeding> makes me think of the hack to detect whether ScopedTypeVariables is on
[00:30:52] *** Quits: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net) (Quit: Client closed)
[00:31:06] *** Joins: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net)
[00:32:19] <pnotequalnp> Oh I haven't seen that, how does it work?
[00:32:49] <tomsmeding> pnotequalnp: https://paste.tomsmeding.com/4nHVRS92
[00:32:57] *** Joins: Pickchea (~private@user/pickchea)
[00:33:24] <tomsmeding> what you're really testing is what the implementer of the Semigroup instance did with stimes, not whether the type has a Monoid instance :p
[00:33:32] *** Joins: admin[m] (~adminzgoc@2001:470:69fc:105::1:51c4)
[00:33:41] <pnotequalnp> Yeah it only works if you override stimes like the base instances all do
[00:36:02] *** Quits: briandaed (~root@109.95.142.93.r.toneticgroup.pl) (Quit: Lost terminal)
[00:37:47] <tomsmeding> pnotequalnp: hm there's this one but there was a clearer one, still searching https://codegolf.stackexchange.com/a/153762
[00:38:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:38:55] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:39:31] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[00:39:34] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:39:53] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:40:06] <pnotequalnp> You can use it to recover """type information""" at runtime. https://paste.tomsmeding.com/fpb4A8gQ
[00:40:14] *** Lord_of_Life_ is now known as Lord_of_Life
[00:40:22] <pnotequalnp> I wonder if it's possible to magic up a monoid dictionary somehow
[00:41:21] <pnotequalnp> By converting the `Either SomeException s` to a `Maybe (DIct (Monoid s))`
[00:41:46] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:41:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:41:59] <tomsmeding> to construct a Monoid dict out of thin air using the mempry you got from stimes?
[00:42:04] <tomsmeding> *mempty
[00:42:16] <pnotequalnp> Yeah
[00:42:50] <pnotequalnp> And of course the semigroup dict hidden under the GADT constructor
[00:43:15] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[00:43:20] *** Joins: leah2_ (~leah@vuxu.org)
[00:45:06] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[00:45:10] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[00:46:28] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 260 seconds)
[00:47:11] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[00:47:17] <maerwald> I forgot whether Handle's are closed by the GC?
[00:48:09] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[00:48:16] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[00:49:09] *** Joins: Pickchea (~private@user/pickchea)
[00:50:15] <maerwald> seems so
[00:50:16] *** Joins: zyklotomic (~ethan@res388d-128-61-90-23.res.gatech.edu)
[00:50:51] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:51:38] <zyklotomic> i'm not sure how to describe this, i want to restrict in a type signature, a monad to only have MonadWrite, but for it to be the same MonadWrite in the return value
[00:51:58] *** Parts: admin[m] (~adminzgoc@2001:470:69fc:105::1:51c4) ()
[00:52:09] *** Joins: hololeap (~hololeap@user/hololeap)
[00:52:28] <zyklotomic> so something like (MonadWrite w m1, MonadState s m2) => m1 () -> (m1 and m2) () ?
[00:53:07] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[00:53:13] <tomsmeding> how would `(MonadWrite w m) => m () -> m ()` be wrong?
[00:53:45] <tomsmeding> and `(MonadWrite w m1, MonadWrite s m2) => m1 () -> m2 ()`
[00:54:04] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:55:02] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:55:30] <zyklotomic> tomsmeding: I also want to modify state in the former, in the latter I want to use the first argument as a callback
[00:55:38] <zyklotomic> maybe there is a better way to structure this logic
[00:56:14] <zyklotomic> and why (MonadWrite w m)
[00:56:37] <zyklotomic> `(MonadWrite w m, MonadState s m) => m () -> m ()` would be wrong for me is because i don't want the first argument to be able to touch state
[00:56:45] <tomsmeding> ignoring the constraints for now, just focusing on the type itself -- should be argument monad be the same as the output monad, or not?
[00:57:32] <tomsmeding> oh you want the argument to be MonadWrite in w and MonadState in s, but have a static guarantee that the argument cannot actually use that State?
[00:57:43] <zyklotomic> now that i think of it, yes, it should. but i'm hoping to yeah, not let myself use state in this case
[00:57:47] <zyklotomic> yes, i think you got it
[00:58:08] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Max SendQ exceeded)
[00:58:12] <tomsmeding> should the argument have access to other properties of m? Or should it just know that it's working on some monad that has MonadWrite w, not knowing what monad that is?
[00:58:28] <dminuoso> You could work with RankNTypes here, if you wanted to badly enough.
[00:58:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:58:57] <tomsmeding> yeah, if yes, that would be `(MonadWrite w m, MonadState s m) => (forall m'. MonadWrite w m' => m' ()) -> m ()`
[00:59:24] <dminuoso> But honestly, I'd go for `MonadWrite w m => m () -> m ()`
[00:59:31] <pnotequalnp> I'm curious if `(MonadWrite w m1, MonadState s m2, m1 ~ m2) => m1 () -> m2 ()` would work, or if GHC is smart enough to carry the instances across the equality.
[00:59:39] <tomsmeding> dminuoso: presumably the function that zyklotomic is writing now _does_ need the MonadState
[00:59:45] <tomsmeding> otherwise the question is moot
[01:00:05] <dminuoso> tomsmeding: So?
[01:00:07] <tomsmeding> pnotequalnp: that's equivalent
[01:00:40] <dminuoso> tomsmeding: Let's call that function f. f can use MonadState all it wants to, you can still apply it to another polymorphic thing that doesnt have MonadState in its contraints.
[01:00:41] <tomsmeding> dminuoso: oh meant "just use `(MonadWrite w m, MonadState s m) => m () -> m ()` ?
[01:00:54] <dminuoso> Yeah that then.
[01:00:55] <tomsmeding> right, so just not have the static guarantee
[01:01:07] <tomsmeding> that's definitely the pragmatic approach :p
[01:01:15] <dminuoso> RankNTypes has a big sanity check for me.
[01:01:16] <zyklotomic> yeah i guess that works too :D
[01:01:27] <zyklotomic> not the most exciting answer though
[01:01:44] <dminuoso> Yes, sometimes boring and simple is better.
[01:01:54] <tomsmeding> my threshold for using RankNTypes is probably a lot lower than dminuoso's, but I would also give up if the argument needs more stuff from m than just the MonadWrite w
[01:02:14] *** Quits: shiraeeshi (~shiraeesh@77.94.25.181) (Quit: Leaving)
[01:02:27] <dminuoso> In my experience, trying to be cute with the type system ends up with headaches when type inference doesn't work out, you get bizarre unreadable diagnostics, and after RankNTypes you add 5 more extensions because you feel like "encoding another property into the type system"
[01:02:49] <dminuoso> To the point where nobody but you understands whats going on, you have bugs in your type system instead, and the code becomes hard to refactor or extend..
[01:03:07] <tomsmeding> heh
[01:03:18] <tomsmeding> yeah it definitely depends on how much you're getting out of it
[01:04:07] <zyklotomic> tomsmeding: your rank 2 signature should work though right
[01:04:25] <tomsmeding> zyklotomic: it should, but only if the argument doesn't need any more information from m than that it's MonadWrite w
[01:05:20] <zyklotomic> first time where I can say I experienced a potential real need for rank2/N lol
[01:05:25] <dminuoso> It's also my experience that encoding properties in the type system is not done out of necessity in the sense that you regularly violate these properties.
[01:05:25] <tomsmeding> like, suppose this function is called f; if at a call site of f, you know that m is WriterT [String] IO, the argument of f can't use the fact that it's in WriterT [String] IO, it just knows "I'm in MonadWrite w m => m"
[01:05:29] <zyklotomic> thanks for the discussion / pointers everyone
[01:05:30] *** Quits: alp (~alp@user/alp) (Ping timeout: 252 seconds)
[01:06:05] <zyklotomic> dminuoso: what do you mean re "violate these properties"
[01:06:20] <dminuoso> I think a lot of haskell programmers have a lot of imaginative power, thinking these "but what if you accidentally used state here.." problems into the world - just as a way to justify to themselves to try out fancy type system tricks.
[01:06:39] <dminuoso> zyklotomic: Okay, so let me give you an example.
[01:06:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:07:46] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:07:54] <dminuoso> We have a RADIUS server, and RADIUS broadly is separated into Accounting and Access requests, but they are often multiplexed onto a single TCP/UDP listener. So I used various type tricks to ensure that *access* handlers didn't accidentally produce accountings responses, and accounting handlers dint accidentally produce access responses.
[01:08:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:08:55] <dminuoso> It was completely absurd, because it all boiled down to just 15 lines of code that you can a) just test and b) easily inspect if written in simple style.
[01:09:30] <dminuoso> It felt good to argue "You cant possibly misuse this", but the relaity is: I never had misused it before, and I had absolutely no good reason to assume this type of misuse could happen
[01:09:55] <dminuoso> The price I paid was everybody looking at the implemention asking tons of "what are all these type tricks going on"
[01:10:30] <dminuoso> I've seen some haskellers make the same mistake
[01:11:05] *** Joins: Pickchea (~private@user/pickchea)
[01:12:01] <zyklotomic> lol, that's a very relatable mistake dminuoso
[01:12:03] *** Quits: pgib (~textual@173.38.117.90) (Ping timeout: 260 seconds)
[01:12:43] <zyklotomic> and probably good enough with just very good comments
[01:13:07] <dminuoso> What I really needed was a simple: wrapHandler f = do ty <- requestType; resp <- f; when (radiusType resp != ty) (throwIO (ConstraintViolation "Request/Response type mismatch))
[01:13:18] <dminuoso> Inside the server, unconditionally wrapped around the entirety
[01:13:25] <dminuoso> There. Done. 
[01:13:43] <zyklotomic> does put things into perspective
[01:13:46] <dminuoso> Sometimes programmers are really good at creating problems for the sole purpose of justifying an engineering solution
[01:13:52] <tomsmeding> BuT tHe PeRfOrMaNcE
[01:14:03] <Rembane> FUN! :D
[01:14:08] <tomsmeding> and that :)
[01:14:19] *** leah2_ is now known as leah2
[01:16:13] <zyklotomic> since this is just for homework and myself, going to do the fun route anyways, but def will keep in mind the advice
[01:16:52] <tomsmeding> dminuoso: I have the luck that all the code I write, for now, is either for myself or for PL research -- and PL research people are usually quite accepting w.r.t. this stuff :p
[01:16:52] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[01:17:23] *** Joins: mikail (~mikail@2a02:c7f:bd03:2c00:38bf:5983:b068:95f1)
[01:17:54] <tomsmeding> zyklotomic: having practice with the fancy stuff is definitely not bad; though for code that is going to be shared with others, dminuoso's advice does indeed apply: have fun, but with moderation
[01:17:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[01:18:30] <zyklotomic> :)
[01:20:00] <mikail> Does anybody have any good references (papers/software apps) of event driven applications in Haskell. 
[01:20:19] *** Quits: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net) (Ping timeout: 256 seconds)
[01:20:35] <jackdk> I would look at functional reactive programming. What are you trying to do?
[01:21:39] <dminuoso> zyklotomic: The project that really kept be at bay was GHC. Structurally there's really no fancy tricks going on. It's essentially just very imperative IO code, with a lot of IORefs being flung around
[01:21:51] <dminuoso> Simple is good! :)
[01:22:41] <zyklotomic> dminuoso: oddly enough, this is for a compilers hw assignment
[01:23:01] <zyklotomic> we did get the autonomy to choose whatever language though
[01:23:26] <tomsmeding> is the teacher going to grade the code
[01:24:23] <zyklotomic> no, just black box run it
[01:24:48] <tomsmeding> interesting assignment
[01:25:05] <zyklotomic> yeah, kinda nice to have an excuse to write haskell
[01:25:21] <tomsmeding> but yeah, lately I've been messing mostly with compiler-like code transformations, and I've been doing so on well-typed well-scoped De Bruijn ASTs
[01:25:26] <tomsmeding> which is... a lot of RankNTypes
[01:25:52] <zyklotomic> are those related to De Bruijn indicies, not that i know about what those are either
[01:26:09] *** Joins: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de)
[01:26:45] <Rembane> tomsmeding: It sounds painful, how painful is it?
[01:27:43] <tomsmeding> Fun! :)
[01:27:56] <tomsmeding> but also some type tetris sometimes
[01:28:30] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:30:15] <Rembane> Good stuff. :)
[01:31:43] *** Joins: fef (~thedawn@user/thedawn)
[01:34:06] *** Quits: mikail (~mikail@2a02:c7f:bd03:2c00:38bf:5983:b068:95f1) (Ping timeout: 252 seconds)
[01:35:43] <tomsmeding> super brief summary: data Idx env t where Z :: Idx (t ': env) t ; S :: Idx env t -> Idx (a ': env) t
[01:35:53] <dolio> They seem painful when you're using them. But then when you use something more lax, it's also painful to keep finding variable management errors.
[01:35:55] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:a9ba:a14e:e332:b83f) (Remote host closed the connection)
[01:36:17] <tomsmeding> data Exp env t where Var :: Idx env t -> Exp env t ; App :: Exp env (a -> b) -> Exp env a -> Exp env b ; Lam :: Exp (a ': env) b -> Exp env (a -> b) ; -- etc.
[01:36:37] <tomsmeding> dolio: especially with these kinds of code transformations that I'm working with lol
[01:38:23] <energizer> why does toGregorian give (Integer, Int, Int) instead of a date?
[01:39:35] *** Quits: Digit (~user@user/digit) (Ping timeout: 260 seconds)
[01:40:20] <Rembane> energizer: Which toGregorian are you thinking of?
[01:41:29] <energizer> oh maybe i did it wrong
[01:43:11] <jackdk> Rembane: https://hackage.haskell.org/package/time-1.13/docs/Data-Time-Calendar.html#v:toGregorian probably
[01:43:25] <jackdk> The components of the tuple are type aliases IIRC
[01:43:42] <Rembane> jackdk: I realized that a bit too late. :)
[01:44:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:45:52] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[01:46:03] <energizer> how to construct a DayOfMonth?
[01:46:36] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:46:47] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[01:47:02] <monochrom> Click on "DayOfMonth" to discover "type DayOfMonth = ...".  Also, what jackdk said.
[01:47:06] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[01:47:32] <monochrom> I thought people clicked on all links.
[01:47:59] <energizer> DayOfMonth 1 doesnt do what i thought
[01:48:16] <jackdk> DayOfMonth is a type alias, not a data declaration
[01:48:28] <monochrom> and not a data constructor
[01:48:35] *** Joins: pavonia (~user@user/siracusa)
[01:48:47] <energizer> so that means i'm supposed to just use 1 instead?
[01:49:14] <monochrom> Have you learned "type aliases" and what "type Foo = Bool" means?
[01:49:56] <energizer> well i guess not if you're asking me that
[01:52:19] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[01:54:00] <energizer> ok so i guess my question is, why are these type aliases instead of newtypes
[01:54:18] <energizer> er
[01:54:41] <energizer> i guess i mean why isnt there such thing as a date
[01:54:49] <energizer> it's just  (Integer, Int, Int)
[01:55:07] *** Joins: alp (~alp@user/alp)
[01:55:10] *** Joins: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net)
[01:55:16] <shapr> Anyone used the validity test library? ( https://github.com/NorfairKing/validity ) I can't figure out how to hook it into hspec.
[01:55:27] <energizer> and relatedly, why is Year a type alias instead of a newtype
[01:55:34] *** Quits: Major_Biscuit (~MajorBisc@c-001-015-045.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[01:56:00] * tomsmeding expects "perhaps they should be newtypes, but it's too late to change now
[01:56:09] <energizer> thanks tomsmeding 
[01:56:17] <tomsmeding> but I don't actually know :p
[01:56:20] *** Joins: GuestyMcGuest (~GuestyMcG@200.89.69.134)
[01:56:54] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[01:57:01] <GuestyMcGuest> Hi, I have a question regarding the installation of ghcup on linux.
[01:57:17] <monochrom> Day is already the "date" type you sought.
[01:58:05] <geekosaur> GuestyMcGuest, you should just ask your question, not ask to ask
[01:59:17] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:59:38] <GuestyMcGuest> Does the installation work for a multi user system? Perusing the procedure, it appears that it installs at user level.
[01:59:43] *** Joins: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[01:59:52] <koz> GuestyMcGuest: You'd be correct.
[02:00:09] <maerwald> GuestyMcGuest: depends how you install it
[02:00:24] <koz> maerwald: Wait, you can do a global ghcup-based install?
[02:00:30] <maerwald> you can set GHCUP_INSTALL_BASE_PREFIX=/var/ghcup or so
[02:00:42] <maerwald> you may have to fix permissions
[02:00:59] <koz> Suppose I have several lists, and I wanna itraverse them all in sequence, but not have to concatenate them first. Is there a way I can spell that?
[02:01:00] <maerwald> you can also install into /usr/local (but then it's unmanaged)
[02:01:17] <koz> Sorry, itraverse_.
[02:01:17] <maerwald> ghcup install ghc --isolate=/usr/local --force 8.10.7
[02:01:23] <koz> (aka, I don't care about the result)
[02:01:40] *** Quits: tzh_ (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[02:01:44] *** Joins: xax__ (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[02:01:44] <maerwald> if you use --isolate, then ghcup won't be able to uninstall
[02:01:50] <monochrom> I was the person who single-handedly drove ghcup to have some compatibility with /usr/local installs. >:)
[02:02:07] <koz> So I'm hunting for something like `itraverseMany_ :: (Applicative f) => (Int -> a -> f b) -> http://en.wikipedia.org/wiki/Special:Search?go=Go&search=a -> f ()`
[02:02:16] <koz> Lolwat.
[02:02:33] <maerwald> GuestyMcGuest: so, do you care about uninstallation?
[02:02:36] <koz> Do I just want some kind of traverse . traverse nesting?
[02:03:04] <sm> so yes, 1 can be interpreted as a DayOfMonth. 1 :: DayOfMonth if you want to be explicit/certain
[02:03:53] <GuestyMcGuest> Absolutely, I'm looking for the documentation (as we write :D)
[02:04:55] <maerwald> https://www.haskell.org/ghcup/guide/#env-variables
[02:04:57] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[02:05:10] <maerwald> and https://www.haskell.org/ghcup/guide/#isolated-installs
[02:10:05] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[02:12:01] *** Parts: GuestyMcGuest (~GuestyMcG@200.89.69.134) ()
[02:12:21] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[02:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:13:47] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:14:00] *** Quits: xax__ (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Ping timeout: 272 seconds)
[02:14:43] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[02:14:50] <shapr> @paste
[02:14:50] <lambdabot> A pastebin: https://paste.debian.net/
[02:15:38] <geekosaur> @where paste
[02:15:38] <lambdabot> Help us help you: please paste full code, input and/or output at e.g. https://paste.tomsmeding.com
[02:16:57] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[02:18:15] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:72bf:4d2e:4b07:eb6c) (Remote host closed the connection)
[02:19:10] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[02:19:31] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:19:57] <tomsmeding> @where lambdabot
[02:19:57] <lambdabot> http://haskell.org/haskellwiki/Lambdabot
[02:24:23] <shapr> @where shapr
[02:24:23] <lambdabot> I run to hug and cuddle shapr
[02:24:26] <shapr> yay?
[02:24:30] <tomsmeding> :D
[02:24:47] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:26:19] <hpc> @where hpc
[02:26:19] <lambdabot> http://www.haskell.org/haskellwiki/Haskell_Program_Coverage
[02:26:21] <hpc> yep, that's me
[02:26:29] <tomsmeding> classic
[02:27:32] *** Quits: pnotequalnp (~pnotequal@207-118-121-128.dyn.centurytel.net) (Quit: Client closed)
[02:31:50] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:35:56] <jackdk> koz: Folds can be combined with <>.
[02:36:06] <jackdk> % let x = ("hello", "world")
[02:36:06] <yahb> jackdk: 
[02:36:30] <jackdk> % x ^.. ((_2 <> _1) . traverse)
[02:36:30] <yahb> jackdk: "worldhello"
[02:36:55] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:37:02] <jackdk> % itraverseOf (indexing ((_2 <> _1) . traverse)) (\i a -> print (i, a)) x
[02:37:02] <yahb> jackdk: ; <interactive>:50:31: error:; * Couldn't match type `()' with `Char'; arising from a functional dependency between:; constraint `Field1 (String, String) ([Char], [()]) [Char] [()]' arising from a use of `_1'; instance Field1 (a, b) (a', b) a a' at <no location info>; * In the second argument of `(<>)', namely `_1'; In the first argument of `(.)', namely `(_2 <> 
[02:37:25] <jackdk> %  itraverseOf_ (indexing ((_2 <> _1) . traverse)) (\i a -> print (i, a)) x
[02:37:25] <yahb> jackdk: (0,'w'); (1,'o'); (2,'r'); (3,'l'); (4,'d'); (5,'h'); (6,'e'); (7,'l'); (8,'l'); (9,'o')
[02:37:31] <jackdk> koz: ^
[02:37:33] <jackdk> % :quit
[02:37:33] <yahb> jackdk: 
[02:38:40] <jackdk> koz: so you could assemble the lists into a tuple, and use `itraverseOf_ (indexed $ each . traverse)`, I think
[02:40:46] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:41:02] <jackdk> Axman6: I know you like lens fun ^
[02:45:10] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[02:48:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 252 seconds)
[02:50:12] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[02:52:41] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:54:52] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:55:10] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[02:57:38] *** Joins: Digit (~user@user/digit)
[02:58:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:03:00] *** Quits: pwug (~pwug@user/pwug) (Read error: Connection reset by peer)
[03:07:08] *** Joins: deadmarshal_ (~deadmarsh@95.38.229.223)
[03:09:51] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[03:11:22] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[03:11:31] *** Quits: deadmarshal_ (~deadmarsh@95.38.229.223) (Ping timeout: 260 seconds)
[03:11:42] *** Joins: alp (~alp@user/alp)
[03:12:27] *** Joins: k8yun (~k8yun@user/k8yun)
[03:23:29] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[03:23:44] <Axman6> :o
[03:29:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[03:32:31] *** Quits: acidjnk (~acidjnk@p200300d0c7049f76ad7ddf43206a2c16.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:33:25] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[03:36:43] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[03:51:05] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[03:52:43] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[03:53:13] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[03:56:06] *** Joins: pnotequalnp (~Srain@207-118-121-128.dyn.centurytel.net)
[03:57:14] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:59:02] *** Quits: pnotequalnp (~Srain@207-118-121-128.dyn.centurytel.net) (Changing host)
[03:59:02] *** Joins: pnotequalnp (~Srain@user/pnotequalnp)
[03:59:26] *** Parts: pnotequalnp (~Srain@user/pnotequalnp) ()
[03:59:39] *** Joins: pnotequalnp (~Srain@user/pnotequalnp)
[04:00:24] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 272 seconds)
[04:05:11] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:06:13] *** Quits: pnotequalnp (~Srain@user/pnotequalnp) (Remote host closed the connection)
[04:10:35] *** Quits: benin (~benin@183.82.207.30) (Quit: The Lounge - https://thelounge.chat)
[04:11:38] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[04:11:53] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[04:13:43] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[04:14:10] *** Joins: biberu (~biberu@user/biberu)
[04:18:10] *** Joins: benin (~benin@183.82.207.30)
[04:18:49] *** Quits: zyklotomic (~ethan@res388d-128-61-90-23.res.gatech.edu) (Ping timeout: 256 seconds)
[04:20:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com) (Quit: Leaving)
[04:20:49] *** Joins: zyklotomic (~ethan@res380d-128-61-85-225.res.gatech.edu)
[04:24:06] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:25:06] *** Quits: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp) (Ping timeout: 272 seconds)
[04:25:55] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-25e7-2817-2baa-33e2.res6.spectrum.com)
[04:27:38] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[04:33:24] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[04:35:07] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[04:41:13] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[04:49:06] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[04:49:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[04:50:07] <boxscape_> I'm not super familiar with Arrow notation, is it possible to modify this example https://paste.tomsmeding.com/ShbLAQlE so that the lambda takes two arguments instead of one? When I try it I get this error (ignore that it says to report it as a bug, that's just related to pretty printing and I just fixed it for a merge request)
[04:50:08] <boxscape_> https://paste.tomsmeding.com/ZItSRCZ5
[04:50:48] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[04:53:01] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[04:53:31] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[04:54:05] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[04:54:40] <jackdk> try `proc x y`?
[04:55:41] <boxscape_> now it says "Boxed sums not supported" 🤔
[04:56:18] <boxscape_> but you're right that it doesn't make sense with just `proc x` at least
[04:58:55] <boxscape_> wait I forgot to enable -XArrows again, that's what it's complaining about
[04:59:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[04:59:55] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[05:00:08] <jackdk> what on earth are you doing, anyway, with boxing/unboxing and arrows?
[05:00:17] <jackdk> I mean it's in your handle but apart from that
[05:00:32] *** Axman6 is now known as unboxscape_
[05:00:53] <unboxscape_> {-# UNPACK #-} 4 lyf!
[05:00:55] <boxscape_> jackdk the boxing is only because it thought the arrow command was an unboxed sum, because -XArrows was disabled
[05:00:59] <boxscape_> nice
[05:01:13] <boxscape_> jackdk what I'm trying to do is make a test case for a ghc change
[05:01:42] <boxscape_> s/unboxed sum/boxed sum
[05:01:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:02:52] <boxscape_> weirdly uncanny to see someone else with a name so close to your own, even given the `Axman6 is now known as unboxscape_` message above it
[05:04:02] <boxscape_> anyway it looks like proc only supports a single argument but possibly having it take a tuple is an avenue worth exploring
[05:05:04] <boxscape_>  not very helpful that ghc says it couldn't match with ‘()’, because I have no idea where that comes from
[05:05:25] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:05:37] *** unboxscape_ is now known as coboxscape_
[05:05:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[05:05:59] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[05:06:08] <boxscape_> now I'm disappointed that we don't have a {-# COPACK #-} pragma
[05:06:59] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[05:07:37] <coboxscape_> "Store this in someone else's heap please"
[05:08:27] <geekosaur> each thread *does* have its own nursery…
[05:09:22] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:10:41] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[05:10:57] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[05:11:47] <boxscape_> ah, I've found an example in the ghc testsuite that should work https://paste.tomsmeding.com/7mmhZm6Z
[05:12:35] *** Joins: pnotequalnp (~pnotequal@user/pnotequalnp)
[05:13:05] *** Joins: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-134-152.cust.tzulo.com)
[05:13:42] <boxscape_> (might as well post the full file so it's not devoid of context https://paste.tomsmeding.com/FZBX0ZY5)
[05:14:07] *** coboxscape_ is now known as Axman6
[05:14:32] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[05:16:47] *** Joins: jakalx (~jakalx@base.jakalx.net)
[05:18:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:18:17] *** Joins: fef (~thedawn@user/thedawn)
[05:18:24] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[05:18:53] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:20:45] <albet70> what's the function name of turn [[1,2],[3,4]...] to [1,2,3,4...]
[05:20:53] <Axman6> concat
[05:20:56] <Axman6> join
[05:21:03] <Axman6> (>>= id)
[05:21:07] <dons> :: [[a]] -> [a]
[05:21:08] <Axman6> mconcat
[05:21:15] <dons> if you write down the type and search for it, hoogle should find it
[05:21:18] <Axman6> foldMap id
[05:21:25] <boxscape_> @hoogle [[a]] -> [a]
[05:21:26] <lambdabot> GHC.List concat :: [[a]] -> [a]
[05:21:26] <lambdabot> GHC.OldList concat :: [[a]] -> [a]
[05:21:26] <lambdabot> Data.Universe.Helpers interleave :: [[a]] -> [a]
[05:22:02] <albet70> >>= id is new
[05:22:18] <jackdk> it's join
[05:22:23] <jackdk> :t (>>= id)
[05:22:24] <lambdabot> Monad m => m (m b) -> m b
[05:22:36] <dons> join.
[05:22:42] <pnotequalnp> There's also fold
[05:23:20] <albet70> foldl1 (+)
[05:23:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:24:09] <geekosaur> (++), not (+)
[05:24:40] <Axman6> % :t traverse Const
[05:24:41] <yahb> Axman6: (Traversable t, Monoid a) => t a -> Const a (t b)
[05:24:57] <Axman6> % :t getConst . traverse Const
[05:24:57] <yahb> Axman6: (Traversable t, Monoid c) => t c -> c
[05:25:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:27:51] *** Joins: Techcable (~Techcable@user/Techcable)
[05:28:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:28:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:28:48] *** Joins: wroathe (~wroathe@user/wroathe)
[05:29:11] *** Joins: awschnap (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[05:30:52] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Ping timeout: 268 seconds)
[05:31:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[05:32:49] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[05:32:53] *** Joins: Batzy (~quassel@user/batzy)
[05:33:19] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[05:34:32] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:35:13] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[05:36:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[05:36:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[05:36:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:38:03] *** Quits: mmhat (~mmh@55d4e56a.access.ecotel.net) (Quit: WeeChat 3.4.1)
[05:38:19] *** Joins: mud (~mud@user/kadoban)
[05:38:54] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[05:38:54] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:40:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[05:40:20] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[05:42:26] *** Joins: nautical (~nautical@2601:602:900:1630::7cbb)
[05:46:26] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[05:48:12] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[05:48:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:b200:f874:1c07:de06:7cf8) (Ping timeout: 260 seconds)
[05:48:40] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[05:54:37] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[05:56:03] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 256 seconds)
[05:56:36] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Quit: argh)
[05:57:27] *** Joins: vglfr (~vglfr@46.96.132.108)
[06:00:55] *** Joins: tjakway (~tjakway@gateway/vpn/pia/tjakway)
[06:01:24] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[06:03:24] <tjakway> have all haskell and ghc-related channels moved to libera?
[06:03:31] <Axman6> yes
[06:04:21] <tjakway> thanks, I heard a little about what happened at freenode but that was a long time ago and I wasn't sure if they'd split
[06:04:57] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:86b6:53c9:ddea:82ad)
[06:06:48] *** Quits: leungbk` (~user@2603-8000-1201-2dd2-1c2f-c4f4-0d21-a4ac.res6.spectrum.com) (Remote host closed the connection)
[06:09:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[06:12:57] *** Quits: awschnap (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[06:13:10] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[06:17:23] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[06:18:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[06:18:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[06:19:58] *** Quits: erts (~erts@user/erts) (Quit: .)
[06:26:27] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:31:24] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:32:24] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[06:34:20] *** Quits: tjakway (~tjakway@gateway/vpn/pia/tjakway) (Quit: WeeChat 2.8)
[06:35:36] *** Quits: pottsy (~pottsy@2400:4050:b560:3700:86b6:53c9:ddea:82ad) (Ping timeout: 265 seconds)
[06:38:40] <albet70> :t (>>=)
[06:38:41] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[06:38:44] <albet70> :t id
[06:38:46] <lambdabot> a -> a
[06:39:40] <albet70> how id fit (a -> m b)?
[06:39:55] <albet70> id is a -> a
[06:40:04] <albet70> only when m b is a
[06:42:26] *** Joins: vglfr (~vglfr@46.96.132.108)
[06:43:59] <jackdk> correct
[06:44:15] <jackdk> a can be anything, so set `a` to `m b`
[06:45:53] <abastro[m]> `join`?
[06:49:35] *** Joins: mbuf (~Shakthi@171.61.240.79)
[06:50:33] <dsal> :t join
[06:50:35] <lambdabot> Monad m => m (m a) -> m a
[06:52:21] *** Joins: notzmv (~zmv@user/notzmv)
[06:54:15] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[06:54:20] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:56:02] *** Joins: Everything (~Everythin@37.115.210.35)
[06:56:52] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:57:46] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:57:58] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:05:47] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[07:11:21] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:19:36] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[07:19:54] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 272 seconds)
[07:21:10] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 272 seconds)
[07:24:08] <boxscape_> % % (proc x -> (| id \case {a -> returnA -< a} |) x (x + 1)) 4
[07:24:08] <yahb> boxscape_: ; <interactive>:5:1: error: parse error on input `%'
[07:24:12] <boxscape_> % (proc x -> (| id \case {a -> returnA -< a} |) x (x + 1)) 4
[07:24:12] <yahb> boxscape_: 4
[07:24:30] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[07:24:35] <boxscape_> this is a bug, right? this shouldn't typecheck because \case is being given two arguments (x and (x + 1))
[07:24:57] <boxscape_> I'm rewriting this code in ghc atm and just want to make sure this isn't behavior that's correct for some reason
[07:26:23] <boxscape_> % (proc x -> (| id \case {} |) x (x + 1)) 4 -- I suppose \case in Arrows in general is in need of a bit of love atm
[07:26:23] <yahb> boxscape_: *** Exception: foldb of empty list; CallStack (from HasCallStack):; error, called at compiler/GHC/HsToCore/Arrows.hs:1201:14 in ghc:GHC.HsToCore.Arrows
[07:32:53] *** Joins: benin (~benin@183.82.207.30)
[07:34:36] *** Quits: hsw (~hsw@2001-b030-2303-0104-0172-0025-0012-0132.hinet-ip6.hinet.net) (Quit: Leaving)
[07:34:40] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:35:30] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[07:38:09] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[07:38:44] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[07:40:19] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:40:23] <boxscape_> % (proc x -> (| id \x -> case x of {} |) x (x + 1)) 4
[07:40:23] <yahb> boxscape_: *** Exception: foldb of empty list; CallStack (from HasCallStack):; error, called at compiler/GHC/HsToCore/Arrows.hs:1201:14 in ghc:GHC.HsToCore.Arrows
[07:40:27] <boxscape_> oh no
[07:40:39] *** Quits: Jeanne-Kamikaze (~Jeanne-Ka@static-198-54-134-152.cust.tzulo.com) (Quit: Leaving)
[07:40:41] <boxscape_> I was going to look at empty case to figure out what to do for empty \case
[07:41:47] *** Joins: benin (~benin@183.82.207.30)
[07:43:39] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[07:49:49] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[07:51:04] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[07:54:06] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[07:55:56] *** Joins: benin (~benin@183.82.207.30)
[08:01:06] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[08:01:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[08:01:07] *** finn_elija is now known as FinnElija
[08:02:01] <pnotequalnp> It's just `\case` on its own
[08:02:19] <boxscape_> both work
[08:02:35] <boxscape_> \case is the same as \case {}
[08:04:55] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:06:03] *** Joins: Guest|26 (~Guest|26@r186-54-101-234.dialup.adsl.anteldata.net.uy)
[08:06:24] <Guest|26> hello, I got error 77 while installing on mac
[08:06:59] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:09:37] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[08:13:06] *** Quits: Guest|26 (~Guest|26@r186-54-101-234.dialup.adsl.anteldata.net.uy) (Ping timeout: 272 seconds)
[08:13:13] *** Quits: benin (~benin@183.82.207.30) (Quit: Ping timeout (120 seconds))
[08:13:27] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 260 seconds)
[08:13:33] *** Joins: benin (~benin@183.82.207.30)
[08:16:43] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 260 seconds)
[08:17:54] <Axman6> error from what? installing how? installing what?
[08:18:04] <Axman6> oh they've already gone
[08:19:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:19:59] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 256 seconds)
[08:20:45] *** Joins: wroathe (~wroathe@user/wroathe)
[08:20:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[08:33:30] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:42:11] *** Joins: mvk (~mvk@2607:fea8:5cc3:7e00::7980)
[08:42:53] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[08:46:32] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.46)
[08:47:00] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Remote host closed the connection)
[08:48:11] *** Joins: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa)
[08:49:28] *** Quits: liz (~liz@2a00:23c5:9680:501:b62e:99ff:fee4:47fa) (Client Quit)
[08:52:50] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[08:54:59] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[08:57:19] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Ping timeout: 260 seconds)
[08:57:33] <monochrom> Error 77 while executing Order 66. >:)
[08:58:04] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[08:58:26] <Axman6> yeah pretty much my first thought too
[08:58:36] *** Joins: vglfr (~vglfr@46.96.132.108)
[08:59:43] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[08:59:44] <jackdk> Guru Meditation: 55
[09:01:23] <abastro[m]> Perhaps a rant?
[09:02:01] *** Joins: pottsy (~pottsy@2400:4050:b560:3700:fe0:b422:790d:35f6)
[09:04:36] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:06:44] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:06:57] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:07:42] *** Quits: vglfr (~vglfr@46.96.132.108) (Remote host closed the connection)
[09:08:49] *** Joins: vglfr (~vglfr@46.96.132.108)
[09:13:07] *** Quits: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com) (Remote host closed the connection)
[09:13:34] *** Joins: _xor (~xor@74.215.232.169)
[09:14:03] *** Quits: pnotequalnp (~pnotequal@user/pnotequalnp) (Ping timeout: 256 seconds)
[09:17:04] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 272 seconds)
[09:18:17] *** Quits: mvk (~mvk@2607:fea8:5cc3:7e00::7980) (Ping timeout: 240 seconds)
[09:22:02] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[09:28:28] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 272 seconds)
[09:30:11] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[09:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:35:44] *** Joins: nicbk (~nicbk@user/nicbk)
[09:37:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:39:56] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[09:47:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.46) (Ping timeout: 240 seconds)
[09:48:23] *** Quits: AkechiShiro (~licht@user/akechishiro) (Quit: WeeChat 3.2.1)
[09:50:17] *** Joins: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl)
[09:55:43] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[09:55:45] *** Joins: HotblackDesiato_ (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[09:56:15] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Ping timeout: 240 seconds)
[09:57:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[09:59:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:07:12] <energizer> is it possible to write negative class bounds, like implement function for types that /aren't/ Monoid?
[10:08:37] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[10:13:02] <liz> energizer: that's an interesting question, do you have a practical use for it?
[10:13:09] <energizer> no
[10:18:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:22:22] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[10:23:05] *** Joins: michalz (~michalz@185.246.204.105)
[10:24:17] *** Quits: merijn (~merijn@c-001-002-002.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[10:26:36] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[10:26:56] *** Joins: mikail (~mikail@2a02:c7f:bd03:2c00:38bf:5983:b068:95f1)
[10:27:34] *** Quits: mikail (~mikail@2a02:c7f:bd03:2c00:38bf:5983:b068:95f1) (Client Quit)
[10:31:17] <c_wraith> It comes up sometimes when people want to do things like picking an implementation based on whether a constraint is present
[10:32:04] <c_wraith> The answer is - you can sort of do it, but it's very indirect and fragile
[10:32:12] <c_wraith> And I never bothered understanding how :)
[10:35:48] *** Quits: michalz (~michalz@185.246.204.105) (Read error: No route to host)
[10:36:23] *** Joins: michalz (~michalz@185.246.204.105)
[10:36:57] *** Joins: vglfr (~vglfr@46.96.132.108)
[10:39:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[10:39:38] *** Quits: polux (~polux@51.15.169.172) (Quit: The Lounge - https://thelounge.github.io)
[10:40:10] *** Joins: polux (~polux@51-15-169-172.rev.poneytelecom.eu)
[10:43:42] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[10:44:12] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[10:45:51] *** Quits: benin (~benin@183.82.207.30) (Ping timeout: 256 seconds)
[10:47:54] *** Joins: Guest50 (~Guest50@94.54.249.160)
[11:11:00] <Axman6> yeah being able to do things like pick a Vector based on whether the type is Primitive, Unpack etc would be useful
[11:18:12] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[11:19:56] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:21:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:22:22] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:24:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:25:04] <dons> choosing based on membership of a set is doable, i think. but negation is much harder
[11:25:17] <dons> tends to make things unsound fast unless you are careful
[11:27:26] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[11:28:35] *** Quits: Guest50 (~Guest50@94.54.249.160) (Quit: Client closed)
[11:35:19] <Axman6> case getDict of None -> "No instance!"; Some Dict -> "Unbox it!" 
[11:35:43] <Axman6> @hoogle Maybe (Dict c)
[11:35:43] <lambdabot> Control.Monad.Par.Class new :: ParIVar ivar m => m (ivar a)
[11:35:43] <lambdabot> Data.Ecstasy defStorage :: HasWorld world m => world ('WorldOf m)
[11:35:43] <lambdabot> Data.Ecstasy.Internal defStorage :: HasWorld world m => world ('WorldOf m)
[11:35:51] <Axman6> not even close lambdabot
[11:37:09] <Axman6> oh, Dict has two arguments!
[11:37:48] <Axman6> uh, no, was looking at barbie's version
[11:38:10] *** Joins: acidjnk (~acidjnk@p200300d0c7049f68f01b5afaf545f9ab.dip0.t-ipconnect.de)
[11:38:30] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[11:42:19] *** Joins: vysn (~vysn@user/vysn)
[11:43:17] *** Joins: benin (~benin@106.198.91.80)
[11:44:30] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[11:44:58] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:46:15] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[11:49:14] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[11:49:24] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 240 seconds)
[11:49:49] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:50:26] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[11:50:26] *** Joins: Everything (~Everythin@37.115.210.35)
[11:51:43] <Maxdamantus> instance ~(BeardTrimmer a) => BeardTrimmer a
[11:55:07] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[11:57:57] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[12:00:17] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[12:07:51] *** Quits: gdown (~gavin@h69-11-149-231.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[12:08:20] *** Joins: fendor (~fendor@178.115.44.78.wireless.dyn.drei.com)
[12:13:45] <energizer> what does 'contraction' mean on this page https://en.wikipedia.org/wiki/Substructural_type_system
[12:13:55] *** Joins: vglfr (~vglfr@46.96.132.108)
[12:15:42] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c822:9539:eb3b:6254)
[12:20:57] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[12:21:02] *** Joins: dextaa_ (~dextaa@user/dextaa)
[12:21:05] *** Joins: cfricke (~cfricke@user/cfricke)
[12:21:19] <joel135> energizer: contraction is a term from linear logic (and logic in general, i guess)
[12:21:51] <joel135> it means a -> (a, a) i.e. duplication/copying
[12:22:43] <energizer> thanks
[12:26:04] <abastro[m]> Showerthought: pattern matching is confusing to beginners because real life deconstruction always makes the entirety unavailable, just like how linear logic works
[12:26:24] *** Joins: briandaed (~root@109.95.142.93.r.toneticgroup.pl)
[12:29:18] *** Quits: jtm (~jtm@user/jtm) (Remote host closed the connection)
[12:29:31] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:29:32] *** Joins: the_proffesor (~theproffe@2601:282:847f:8010::7f59)
[12:29:40] *** Joins: jtm (~jtm@user/jtm)
[12:30:34] *** Quits: loonycyborg (loonycybor@wesnoth/developer/loonycyborg) (Quit: ZNC - http://znc.sourceforge.net)
[12:30:43] *** Joins: loonycyborg (loonycybor@wesnoth/developer/loonycyborg)
[12:31:11] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Quit: No Ping reply in 180 seconds.)
[12:31:30] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[12:31:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[12:32:29] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[12:33:24] *** Quits: theproffesor_ (~theproffe@2601:282:847f:8010::7f59) (Ping timeout: 240 seconds)
[12:33:57] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[12:34:33] <energizer> i'm often annoyed that the original is still in scope on the rhs
[12:36:16] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:37:35] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 260 seconds)
[12:37:55] <joel135> what do you mean?
[12:38:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:38:05] <joel135> both of you
[12:39:10] <energizer> match x with | foo bar => x + foo bar
[12:39:15] *** Joins: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp)
[12:39:20] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[12:39:34] <energizer> but x should be unavailable because its contents were moved into foo bar
[12:39:42] <joel135> oh i see
[12:41:59] *** Quits: acidjnk (~acidjnk@p200300d0c7049f68f01b5afaf545f9ab.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[12:43:06] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:43:58] <abastro[m]> energizer: Sounes like F#
[12:44:50] <energizer> F# would say "error there's no x in scope for  x + foo bar"?
[12:46:28] <abastro[m]> Oh wait
[12:46:41] <abastro[m]> I mean, what language is the term from
[12:46:43] <abastro[m]> Ocaml?
[12:47:53] <energizer> granule
[12:48:35] <abastro[m]> Oh
[12:48:46] <abastro[m]> You meant the language with granular typing right
[12:48:50] <abastro[m]> That's so cool
[12:49:08] <abastro[m]> Perhaps easier to reason about at cost of less flexibility
[12:51:12] *** Joins: oxide (~lambda@user/oxide)
[12:53:23] <energizer> but haskell's getting linear types innit
[12:54:57] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[12:58:16] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:b200:e0e6:2517:8e76:8934)
[12:59:45] *** Joins: mmhat (~mmh@55d4e150.access.ecotel.net)
[13:01:58] *** Quits: nek0 (~nek0@nek0.eu) (Quit: Ping timeout (120 seconds))
[13:02:15] *** Joins: nek0 (~nek0@nek0.eu)
[13:05:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:06:36] <abastro[m]> Well, not as powerful as granular
[13:07:34] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[13:07:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:07:48] *** alMalsamo is now known as lumberjack123
[13:09:11] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:10:15] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 240 seconds)
[13:12:15] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[13:12:20] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[13:17:44] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[13:19:16] *** Joins: alp (~alp@user/alp)
[13:21:50] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[13:22:42] *** Joins: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de)
[13:22:51] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:b200:e0e6:2517:8e76:8934) (Ping timeout: 245 seconds)
[13:22:54] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[13:23:17] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[13:23:59] *** Joins: zaquest (~notzaques@5.130.79.72)
[13:27:27] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[13:29:12] *** Joins: bahamas (~lucian@86.120.77.115)
[13:30:11] *** Quits: freeman42x[m] (~freeman42@2001:470:69fc:105::7d29) (Quit: You have been kicked for being idle)
[13:30:14] *** Quits: norg[m] (~norgmatri@2001:470:69fc:105::1:c809) (Quit: You have been kicked for being idle)
[13:30:37] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[13:30:48] *** Joins: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com)
[13:31:48] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[13:38:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:41:34] *** Joins: vpan (~0@212.117.1.172)
[13:41:47] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:43:01] *** Quits: benin (~benin@106.198.91.80) (Read error: Connection reset by peer)
[13:43:23] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[13:44:56] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 245 seconds)
[13:45:09] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[13:45:10] *** Joins: benin (~benin@183.82.24.110)
[13:45:36] *** Quits: xff0x (~xff0x@125x102x200x106.ap125.ftth.ucom.ne.jp) (Ping timeout: 252 seconds)
[13:45:40] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[13:45:46] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[13:46:23] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[13:57:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[13:59:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:59:45] *** Joins: bahamas (~lucian@86.120.77.115)
[14:01:34] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[14:03:58] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[14:04:19] *** Quits: bahamas (~lucian@86.120.77.115) (Ping timeout: 250 seconds)
[14:08:57] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[14:09:17] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[14:09:27] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[14:09:44] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[14:15:13] *** Joins: benin (~benin@183.82.24.110)
[14:17:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:19:16] *** Quits: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com) (Quit: leaving)
[14:19:22] *** Joins: xff0x (~xff0x@i121-117-52-147.s41.a013.ap.plala.or.jp)
[14:19:36] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[14:19:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:20:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[14:21:54] <mon_aaraj> Hm... well, it seems like my problem from earlier stays. I have my configuration file in ~/.config/.ghci: https://bpa.st/JPLQ and my GHC version is 9.2.2, confirmed via ghc --version and ghci --version as well, just in-case 
[14:22:55] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[14:28:29] *** Joins: xkuru (~xkuru@user/xkuru)
[14:28:54] <mon_aaraj> i realised i haven't mentioned my issue; it's that GHCi does not seem to read or realise that the file exists in that path 
[14:30:20] *** Joins: Guest43 (~Guest43@27.147.226.219)
[14:31:03] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[14:31:16] <sm> are you sure that's a path it looks at ? is there a ./.ghci or ~/.ghci ?
[14:31:24] <jackdk> monochrom: what is $XDG_CONFIG_HOME? https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#the-ghci-and-haskeline-files
[14:31:55] <jackdk> sorry monochrom , I mean mon_aaraj 
[14:35:14] <Guest43> I am applying for gsoc summer of  haskell . During this period I am in my final year so I am not  totally free  but I really want to participate in gsoc . Cause probably I won't be able to apply to gsoc next year when I am not a student anymore? What can I do ?
[14:35:38] *** Quits: acidjnk (~acidjnk@p200300d0c7049f68816ae2824fdd5aac.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:39:19] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[14:39:31] <mon_aaraj> jackdk: ``echo $XDG_CONFIG_HOME`` says ``/home/mon/.config`` 
[14:39:52] <mon_aaraj> /home/mon is my $HOME, of course 
[14:40:58] <mon_aaraj> sm: no, there's none, but there *is* a ``~/.ghc`` folder that has ghci_history inside it. i tried to get rid of it, but ghc keeps creating it
[14:43:20] <Putonlalla> Could I use `unsafeCoerce` to instantiate a class that doesn't export its methods?
[14:43:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Quit: Leaving)
[14:43:31] *** Quits: Guest43 (~Guest43@27.147.226.219) (Quit: Client closed)
[14:43:33] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[14:43:41] <jackdk> mon_aaraj: dunno then, maybe run ghci with some extra `-v` or something and see if it tells you more?
[14:45:09] <mon_aaraj> https://bpa.st/X73A here's the result, i don't see anything myself 
[14:45:10] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:48:37] *** Joins: notzmv (~zmv@user/notzmv)
[14:50:35] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 260 seconds)
[14:50:53] <jackdk> Beats me, then, sorry.
[14:51:19] <sm> also, if it were it ~/.config wouldn't the convention usually be ~/.config/ghci ? But I'd consult the GHC manual
[14:52:02] <jackdk> I'd give that a go, yeah, though the manual says `$XDG_CONFIG_HOME/.ghci`. I'd also try `$XDG_CONFIG_HOME/.ghci/.ghci` just for kicks
[14:53:15] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:54:50] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[14:56:46] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:57:04] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:57:21] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.4.1)
[15:00:53] *** Quits: haskl (~haskl@user/haskl) (Read error: Connection reset by peer)
[15:01:01] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[15:01:41] *** Quits: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com) (Quit: Lost terminal)
[15:03:00] *** Joins: haskl (~haskl@user/haskl)
[15:04:56] *** Joins: mohy (~mohy@eduroam-mff-ms.koleje.cuni.cz)
[15:05:25] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[15:07:04] *** Joins: mohy_ (~mohy@eduroam-mff-ms.koleje.cuni.cz)
[15:09:21] *** Quits: mohy (~mohy@eduroam-mff-ms.koleje.cuni.cz) (Ping timeout: 256 seconds)
[15:10:36] *** Quits: mohy_ (~mohy@eduroam-mff-ms.koleje.cuni.cz) (Client Quit)
[15:12:34] *** Joins: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net)
[15:13:41] *** Quits: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net) (Remote host closed the connection)
[15:15:22] *** Joins: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com)
[15:16:42] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:17:24] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[15:28:55] *** Quits: liz (~liz@host109-151-125-217.range109-151.btcentralplus.com) (Quit: leaving)
[15:30:12] <Putonlalla> I'm trying to use this to import types, but it's not working due to `Illegal promoted term variable in a type` errors. https://www.tweag.io/blog/2021-01-07-haskell-dark-arts-part-i/
[15:30:18] *** Joins: toulene3 (~toulene@user/toulene)
[15:30:26] *** Joins: benin (~benin@183.82.24.110)
[15:31:22] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[15:31:23] *** toulene3 is now known as toulene
[15:32:43] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:35:10] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[15:36:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[15:36:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:37:15] *** Quits: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94) (Quit: Konversation terminated!)
[15:37:37] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[15:38:54] *** Joins: chomwitt (~chomwitt@2a02:587:dc0d:b200:a198:e1d2:32d4:cbec)
[15:40:27] <mon_aaraj> i think i'll make a GHCi issue, that feels like the right place 
[15:44:26] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:563e:b443:91bb:d4e2)
[15:45:21] <boxscape> mon_aaraj: you can also try renaming the .ghci file into ~/.config/.ghc/ghci.conf
[15:45:25] *** Quits: Typedfern (~Typedfern@122.red-88-24-160.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[15:47:51] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:49:56] <mon_aaraj> yep, i have 
[15:50:09] <boxscape_> hmm okay
[15:50:10] <mon_aaraj> i have tried ~/.config/ghci/ghci.conf as well, and ~/.config/ghci.conf
[15:50:51] <boxscape_> I thought .config/.ghci/ghci.conf worked for me, but I think it actually just works because I ln -s'd ~/.ghc to .config/.ghc
[15:53:48] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[15:53:59] *** Joins: razetime (~quassel@117.254.34.170)
[15:59:16] *** Joins: vglfr (~vglfr@46.96.132.108)
[16:01:36] *** Joins: Typedfern (~Typedfern@220.red-83-56-165.dynamicip.rima-tde.net)
[16:06:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:08:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:08:34] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[16:11:53] *** Joins: pagnol (~user@014198154145.ctinets.com)
[16:18:25] *** Joins: lavaman (~lavaman@c-174-63-118-52.hsd1.ma.comcast.net)
[16:20:16] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.46)
[16:20:29] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:21:20] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[16:26:23] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:27:56] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[16:28:12] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[16:28:51] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 250 seconds)
[16:34:14] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[16:40:35] *** Joins: bahamas (~lucian@84.232.140.158)
[16:44:52] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:45:18] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:45:43] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[16:51:12] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[16:53:52] *** Joins: Pickchea (~private@user/pickchea)
[16:55:23] *** Quits: pagnol (~user@014198154145.ctinets.com) (Remote host closed the connection)
[16:57:26] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[17:10:12] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[17:11:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:11:51] *** Joins: p3n_ (~p3n@217.198.124.246)
[17:11:51] *** Quits: p3n (~p3n@2a00:19a0:3:7c:0:d9c6:7cf6:1) (Read error: Connection reset by peer)
[17:16:17] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[17:19:19] *** Quits: tabemann (~travisb@2600:1700:7990:24e0:ef59:1828:166d:a63e) (Remote host closed the connection)
[17:19:32] *** Joins: tabemann (~travisb@2600:1700:7990:24e0:3f89:422:8b05:c533)
[17:20:49] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[17:20:51] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 260 seconds)
[17:26:09] *** Joins: xkuru (~xkuru@user/xkuru)
[17:27:48] *** Quits: razetime (~quassel@117.254.34.170) (Ping timeout: 252 seconds)
[17:31:25] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[17:34:50] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 268 seconds)
[17:36:15] *** Joins: razetime (~quassel@117.254.34.57)
[17:36:26] *** Joins: gdd (~gdd@129.199.146.230)
[17:37:15] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[17:37:35] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[17:38:30] *** Joins: vglfr (~vglfr@46.96.132.108)
[17:38:36] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:40:03] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[17:41:47] *** Quits: p3n_ (~p3n@217.198.124.246) (Ping timeout: 256 seconds)
[17:42:04] *** Joins: p3n (~p3n@217.198.124.246)
[17:47:14] *** Quits: razetime (~quassel@117.254.34.57) (Read error: Connection reset by peer)
[17:49:22] *** Joins: jgeerds (~jgeerds@55d4548e.access.ecotel.net)
[17:53:13] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[17:53:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[17:53:16] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[17:53:44] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[17:53:59] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[17:54:50] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[17:56:31] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 256 seconds)
[17:56:50] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[17:57:41] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[17:57:46] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Client Quit)
[17:58:22] *** Joins: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk)
[17:58:40] *** Joins: ubert (~Thunderbi@185.209.196.165)
[18:00:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:01:56] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:02:32] *** Joins: ub (~Thunderbi@194.110.113.41)
[18:02:44] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 272 seconds)
[18:03:00] *** Quits: ubert (~Thunderbi@185.209.196.165) (Ping timeout: 252 seconds)
[18:03:00] *** ub is now known as ubert
[18:03:12] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::2ff6)
[18:05:05] *** astra is now known as amish
[18:05:26] *** Quits: amish (sid289983@id-289983.hampstead.irccloud.com) (Changing host)
[18:05:26] *** Joins: amish (sid289983@user/amish)
[18:06:29] *** amish is now known as astra
[18:07:21] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[18:09:23] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:09:26] *** Joins: razetime (~quassel@117.254.34.57)
[18:10:20] *** Joins: ystael (~ystael@user/ystael)
[18:12:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[18:12:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:16:03] *** Joins: ub (~Thunderbi@138.199.15.169)
[18:16:12] *** Quits: ubert (~Thunderbi@194.110.113.41) (Ping timeout: 252 seconds)
[18:16:12] *** ub is now known as ubert
[18:17:02] <Midjak> Hi. Is it safe to use cabal and stack on the same system ?
[18:17:14] *** Quits: ubert (~Thunderbi@138.199.15.169) (Client Quit)
[18:17:27] <geekosaur> sure, they just can't share packages
[18:18:20] <Midjak> ok. So there is no risk to have conflicts , right ?
[18:18:27] <geekosaur> right
[18:18:36] <Midjak> cool thank you
[18:18:52] <maerwald> Midjak: they're enemies... you have to hide them from each other or they try to delete each other
[18:19:08] * maerwald giggles
[18:21:02] <Midjak> It's perhaps a silly question . I am not sure how stack and cabale work with dependencies
[18:22:47] <maerwald> stack installs into ~/.stack, cabal into ~/.cabal
[18:22:49] *** Joins: bahamas (~lucian@92.85.13.88)
[18:23:03] <Midjak> simple and sure
[18:23:13] <maerwald> even when using them on the same project, stack uses .stack-work/ and cabal dist-newstyle/
[18:23:23] <maerwald> for project-local artifcats
[18:23:56] <maerwald> the only "conflict" can be stacks hpack usage (package.yaml)
[18:24:09] <maerwald> make sure to not use any of those
[18:24:16] <maerwald> and edit *.cabal directly
[18:24:38] <Midjak> what is hpack ?
[18:24:46] <maerwald> something that generates *.cabal files
[18:24:48] <maerwald> you don't need it
[18:25:03] <Midjak> ok
[18:25:24] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:563e:b443:91bb:d4e2) (Ping timeout: 240 seconds)
[18:25:54] <Midjak> thank you both
[18:27:46] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:29:58] *** Quits: gabriel_sevecek (~gabriel@188-167-229-200.dynamic.chello.sk) (Quit: WeeChat 3.4)
[18:32:08] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 252 seconds)
[18:37:50] *** Joins: stepcut (~lordgothi@c-24-13-80-95.hsd1.il.comcast.net)
[18:38:45] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:39:32] <stepcut> I am using GHC 9.2.1, but this macro does not seem to work, #if __GLASGOW_HASKELL__ >= 921. If I change it to 900 then it works. What am I doing wrong? Is this macro deprecated now?
[18:39:42] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:40:21] *** Quits: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:40:38] <stepcut> should I be using 'if MIN_VERSION_ghc(9,2,1)' or something?
[18:41:36] <maerwald> stepcut: that would check against the *package* ghc
[18:41:44] <stepcut> ah
[18:41:51] <byorgey> stepcut: for GHC version x.y.z the value of __GLASGOW_HASKELL__ is  xyy, possibly with a leading zero
[18:41:52] <maerwald> did you try >= 902?
[18:41:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[18:42:00] <byorgey> should be 902 for GHC 9.2.1
[18:42:10] <maerwald> https://guide.aelve.com/haskell/cpp-vww0qd72#item-fkuvztqe
[18:42:12] <maerwald> yes
[18:42:17] *** Joins: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net)
[18:42:46] <stepcut> oh
[18:42:47] <maerwald> if you're instead relying on base stuff, use MIN_VERSION_base(...)
[18:43:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:43:10] <maerwald> byorgey: what happens with ghc 10? :D
[18:43:14] <stepcut> I guess I don't know why it is 902, but if that is right, that is fine
[18:43:33] <byorgey> maerwald: logically, according to this specification, there can never be a GHC 10
[18:43:36] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[18:43:40] <byorgey> GHC version numbers will asymptotically approach 10
[18:43:57] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[18:44:04] <stepcut> maerwald: hmm.. perhaps I should be checking against base. I need some conditional code for dealing with the internal changes to Word8/Word16/Word32/Int8/Int16/Int32 types
[18:44:41] <maerwald> stepcut: `ghcup list` shows you base versions
[18:44:59] <maerwald> or use https://gitlab.haskell.org/ghc/ghc/-/wikis/working-conventions/boot-libraries
[18:45:28] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:47:36] *** Quits: yauhsien (~yauhsien@61-231-38-131.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[18:48:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[18:52:31] <stepcut> maerwald: I guess I am unclear in this case if checking the version of GHC or the version of base would be better since the internal representation of Int?/Word? required the addition of new primitives to GHC. It is more than just needing a new base -- you also need the newer GHC -- though you can't get one without the other
[18:57:30] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:00:03] *** Joins: Guest91 (~Guest91@114.246.34.22)
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:01:06] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:01:48] *** Joins: on^ (~on@96-91-136-49-static.hfc.comcastbusiness.net)
[19:04:35] *** Quits: n3t (n3t@user/n3t) (Ping timeout: 252 seconds)
[19:05:00] <boxscape> version 10 doesn't seem ambiguous as long as it uses 4 digits
[19:05:27] *** Guest91 is now known as bruceLi
[19:05:29] <boxscape> or wait
[19:05:34] <boxscape> is 9021 also valid?
[19:05:35] *** Quits: bruceLi (~Guest91@114.246.34.22) (Quit: Ping timeout (120 seconds))
[19:06:12] *** Joins: n3t (~n3t@s45.mydevil.net)
[19:06:16] *** Joins: Guest91 (~Guest91@114.246.34.22)
[19:07:08] <boxscape> since it's just comparing integers, that shouldn't be valid, so I rest my case
[19:08:12] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[19:10:32] <maerwald[m]> stepcut: if you're dealing with Haskell imports, it's probably base
[19:11:37] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[19:13:01] <stepcut> maerwald: that seems somewhat sensible. I guess if JHC suddenly got a lot of development, then what I would care about is the version of base where this change happened
[19:13:01] *** Quits: Guest91 (~Guest91@114.246.34.22) (Ping timeout: 256 seconds)
[19:13:09] <stepcut> rather than the compiler version
[19:13:25] <maerwald[m]> Checking against ghc version would only make sense to guard against primops bugs, for example 
[19:13:44] <maerwald[m]> And there are some
[19:15:02] *** Joins: Guest91 (~Guest91@114.246.34.22)
[19:15:02] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[19:16:07] *** Quits: bahamas (~lucian@92.85.13.88) (Ping timeout: 250 seconds)
[19:16:28] *** Joins: hololeap (~hololeap@user/hololeap)
[19:17:37] *** Quits: oxide (~lambda@user/oxide) (Quit: oxide)
[19:18:28] *** Quits: Guest91 (~Guest91@114.246.34.22) (Client Quit)
[19:21:20] *** Joins: Guest91 (~Guest91@114.246.34.22)
[19:23:18] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[19:25:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[19:26:03] *** Quits: Guest91 (~Guest91@114.246.34.22) (Ping timeout: 256 seconds)
[19:26:23] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[19:28:03] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[19:28:21] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:36:45] *** Joins: dextaa_ (~dextaa@user/dextaa)
[19:37:01] *** Joins: zebrag (~chris@user/zebrag)
[19:37:49] *** Joins: Guest91 (~Guest91@198.13.48.162)
[19:43:29] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Quit: boxscape_)
[19:43:43] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[19:45:52] *** Quits: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com) (Quit: ccntrq)
[19:46:00] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[19:47:52] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[19:48:22] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c822:9539:eb3b:6254) (Quit: WeeChat 2.8)
[19:51:57] *** Quits: razetime (~quassel@117.254.34.57) (Ping timeout: 240 seconds)
[19:56:13] *** Joins: vysn (~vysn@user/vysn)
[19:56:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[19:57:56] *** Joins: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com)
[20:00:21] *** Joins: razetime (~quassel@117.254.34.170)
[20:01:40] *** Quits: mmhat (~mmh@55d4e150.access.ecotel.net) (Quit: WeeChat 3.4.1)
[20:02:12] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[20:04:43] *** Quits: Guest91 (~Guest91@198.13.48.162) (Quit: Client closed)
[20:04:55] *** Quits: jgeerds (~jgeerds@55d4548e.access.ecotel.net) (Ping timeout: 256 seconds)
[20:06:20] *** Joins: crazazy (~user@130.89.171.62)
[20:10:24] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[20:13:47] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Remote host closed the connection)
[20:16:25] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Read error: Connection reset by peer)
[20:17:56] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:18:03] *** Joins: bahamas (~lucian@84.232.140.158)
[20:21:29] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:22:51] *** Quits: bahamas (~lucian@84.232.140.158) (Ping timeout: 260 seconds)
[20:30:25] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:32:19] <crazazy> guys I think I found a new recursion scheme
[20:36:04] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:36:51] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 260 seconds)
[20:37:49] <janus> crazazy: what is the name? i will name my first born after it
[20:38:43] <crazazy> i call it an "optomorphism" (i think). It's an unfold tat produces 0 or 1 layers of recursive datatye
[20:38:52] <crazazy> type*
[20:39:34] <monochrom> I was hoping ironically "I'm looking for a name? What's the name of your firstborn? I may steal it.", thus completing the recursion scheme. >:)
[20:39:42] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:39:45] <crazazy> oh lol
[20:40:07] *** Joins: benin (~benin@183.82.24.110)
[20:40:07] <crazazy> well 0 layers of recursion have ben produced sofar
[20:40:16] <crazazy> *ahem* back to the drawing board
[20:40:36] <crazazy> janus: what's the name for your firstborn? I don't have a name yet
[20:40:47] <janus> 'undefined'
[20:40:59] <crazazy> oh oof that name is taken
[20:41:19] *** Quits: benin (~benin@183.82.24.110) (Client Quit)
[20:47:56] *** Joins: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com)
[20:48:17] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:48:18] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[20:49:37] *** Quits: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com) (Remote host closed the connection)
[20:49:55] *** Joins: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com)
[20:50:35] *** Quits: dcoutts__ (~duncan@host86-167-90-249.range86-167.btcentralplus.com) (Ping timeout: 250 seconds)
[20:53:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:54:13] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[20:54:17] *** Quits: rekahsoft (~rekahsoft@cpe001b21a2fd89-cm64777ddc63a0.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[20:54:44] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[20:54:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[20:54:58] *** Joins: benin (~benin@183.82.24.110)
[20:55:27] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[20:55:33] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:56:39] *** Quits: benin (~benin@183.82.24.110) (Client Quit)
[20:57:30] *** Joins: bahamas (~lucian@84.232.140.158)
[20:57:35] *** Joins: benin (~benin@183.82.24.110)
[21:00:51] *** Joins: econo (uid147250@user/econo)
[21:02:47] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[21:03:46] *** Joins: benin (~benin@183.82.24.110)
[21:15:25] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[21:16:30] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:17:20] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[21:19:22] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:22:19] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[21:30:36] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:34:24] *** Joins: alp (~alp@user/alp)
[21:36:08] *** Quits: jtm (~jtm@user/jtm) (Quit: Leaving)
[21:38:59] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[21:41:51] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[21:42:17] *** Joins: Pickchea (~private@user/pickchea)
[21:43:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:45:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:45:33] *** Joins: vglfr (~vglfr@46.96.132.108)
[21:50:52] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:51:30] <Zemyla> :t (<>) . Kleisli
[21:51:31] <lambdabot> Semigroup (Kleisli m a b) => (a -> m b) -> Kleisli m a b -> Kleisli m a b
[21:52:45] *** Quits: rvbcldud (~rvbcldud@2601:602:87f:4220:c526:c452:c7e1:199e) (Quit: WeeChat 3.3)
[21:53:00] *** Joins: fendor_ (~fendor@91.141.68.132.wireless.dyn.drei.com)
[21:53:19] <Zemyla> When should Kleisli be a Semigroup?
[21:53:48] *** Quits: mbuf (~Shakthi@171.61.240.79) (Quit: Leaving)
[21:54:03] *** Joins: ahammer (~ahammer@157.122.68.227)
[21:54:37] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:54:47] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[21:55:35] <int-e> I guess you could have an arrow version of Endo
[21:55:39] *** Quits: fendor (~fendor@178.115.44.78.wireless.dyn.drei.com) (Ping timeout: 256 seconds)
[21:55:49] <int-e> And that would be a monoid
[21:56:36] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[21:57:15] <boxscape_> though then you'd have (<>) . ArrEndo . Kleisli
[21:57:48] <Franciman> :t Endo
[21:57:49] <lambdabot> (a -> a) -> Endo a
[21:58:00] <Franciman> why do we need the newtype Endo?
[21:58:02] <Franciman> for monoids?
[21:58:29] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[21:58:50] *** Joins: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl)
[21:59:25] <int-e> foldr f z t = appEndo (foldMap (Endo . f) t) z
[21:59:37] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[21:59:54] <int-e> (from Foldable, replacing the #. by . because it would just distract from the use of Endo)
[22:00:49] <boxscape_> > appEndo (foldMap Endo [(+1), (*2), (^3)]) 5
[22:00:51] <lambdabot>  251
[22:00:59] <Franciman> :t appEndo
[22:01:01] <lambdabot> Endo a -> a -> a
[22:01:03] <int-e> Franciman: if you talk about Kleisly, the monoid I'd be interested in would be the one on  a -> m a,  which is like Endo but in a different category.
[22:01:04] <Franciman> oh i see
[22:01:06] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:01:08] <energizer> i think i'd rather use pattern matching like cmp a b | a <= b -> 1 | a == b -> 2 | a > b -> 3 rather than using operators that return bool. is that an option?
[22:01:14] <int-e> *kleisli
[22:02:32] <boxscape_> energizer I'm confused by your question because it seems like the example of what you're saying you'd rather use does have operators that return bool
[22:03:34] <Franciman> int-e: can we call it EndoM ?
[22:03:36] <Franciman> :P
[22:04:00] <energizer> lemme try again
[22:04:05] <boxscape_> I'd rather just generalize Endo to work for all Arrows
[22:04:32] <energizer> i think i'd rather use pattern matching like ord a b | LE -> 1 | EQ -> 2 | GT -> 3 rather than using operators that return bool. is that an option?
[22:04:49] <int-e> Franciman: But sure, you could have  instance Semigroup (m b) => Semigroup (Kleisli m a b)
[22:04:51] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[22:05:03] <Zemyla> So should (Applicative m, Semigroup b) => Semigroup (Kleisli m a b) like for (->)?
[22:05:14] <boxscape_> energizer can do `ord a b -> case compare a b of LE -> 1; EQ -> 2; GT -> 3`
[22:05:22] <int-e> (I don't think I'd use it, but whatever)
[22:05:25] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[22:06:06] <boxscape_> s/can/you can
[22:06:55] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 260 seconds)
[22:07:09] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:08:33] <energizer> oh cool, thanks boxscape_ 
[22:08:44] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:09:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[22:09:25] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:09:50] *** Quits: ahammer (~ahammer@157.122.68.227) (Client Quit)
[22:10:03] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:10:26] <energizer> is it too annoying to always use that instead of the boolean-returning operators?
[22:10:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:10:47] <boxscape_> personally I think it's fine
[22:11:00] *** Quits: razetime (~quassel@117.254.34.170) (Ping timeout: 272 seconds)
[22:14:48] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 272 seconds)
[22:16:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[22:16:34] *** Quits: vglfr (~vglfr@46.96.132.108) (Read error: Connection reset by peer)
[22:16:45] *** Joins: vglfr (~vglfr@46.96.132.108)
[22:16:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[22:17:34] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[22:17:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[22:18:20] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[22:18:57] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Client Quit)
[22:19:12] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[22:19:55] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 240 seconds)
[22:22:36] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:22:49] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:23:28] *** Joins: pnotequalnp (~pnotequal@user/pnotequalnp)
[22:26:51] *** Quits: benin (~benin@183.82.24.110) (Quit: The Lounge - https://thelounge.chat)
[22:27:00] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 240 seconds)
[22:27:04] *** Joins: aliosablack (~chomwitt@94.66.60.177)
[22:28:17] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:28:24] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 260 seconds)
[22:28:24] *** Quits: chomwitt (~chomwitt@2a02:587:dc0d:b200:a198:e1d2:32d4:cbec) (Ping timeout: 260 seconds)
[22:30:00] *** Quits: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[22:31:44] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:33:03] *** Quits: merijn (~merijn@c-001-001-001.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[22:34:08] *** Joins: vglfr (~vglfr@46.96.132.108)
[22:34:35] *** Joins: Akiva (~Akiva@user/Akiva)
[22:36:27] *** Quits: ahammer (~ahammer@157.122.68.227) (Ping timeout: 256 seconds)
[22:38:50] *** Joins: ahammer (~ahammer@157.122.68.227)
[22:39:01] *** Quits: ahammer (~ahammer@157.122.68.227) (Remote host closed the connection)
[22:39:36] *** Joins: dcoutts (~duncan@host86-151-44-233.range86-151.btcentralplus.com)
[22:42:12] *** Quits: dcoutts_ (~duncan@host86-167-90-249.range86-167.btcentralplus.com) (Ping timeout: 240 seconds)
[22:43:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[22:44:09] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[22:44:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[22:50:32] *** Joins: boxscape_ (~boxscape_@p4ff0b60b.dip0.t-ipconnect.de)
[22:52:16] <tomsmeding> pnotequalnp: https://paste.tomsmeding.com/4bu8JHdA
[22:52:17] *** Quits: vglfr (~vglfr@46.96.132.108) (Ping timeout: 240 seconds)
[22:55:23] *** Quits: quintasan (~quassel@quintasan.pl) ()
[22:55:31] *** Joins: pgib (~textual@173.38.117.75)
[22:55:55] *** Joins: quintasan (~quassel@quintasan.pl)
[22:56:14] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:59:06] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[23:00:04] *** Joins: alp (~alp@user/alp)
[23:01:45] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:05:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[23:06:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 272 seconds)
[23:08:20] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[23:11:22] *** Quits: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10) (Quit: No Ping reply in 180 seconds.)
[23:11:34] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:12:41] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[23:20:43] *** Joins: vglfr (~vglfr@46.96.132.108)
[23:21:18] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[23:21:36] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:22:35] *** Joins: justOkay (~justache@user/justache)
[23:26:53] *** Quits: pnotequalnp (~pnotequal@user/pnotequalnp) (Ping timeout: 256 seconds)
[23:30:08] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[23:33:31] *** Joins: vicfred (~vicfred@user/vicfred)
[23:36:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:38:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:38:39] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[23:44:26] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Quit: leaving)
[23:44:44] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 272 seconds)
[23:49:31] *** Joins: jlamothe (~jlamothe@198.251.61.229)
