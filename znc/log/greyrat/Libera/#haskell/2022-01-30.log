[00:03:20] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[00:03:22] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[00:03:42] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[00:10:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[00:15:45] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 268 seconds)
[00:15:51] <sm> make a script that lists your haskell projects and their status
[00:17:22] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[00:17:34] <sm> with a Map k a, I'm not finding a way to get the k if I have an a. I guess that's not normally done. Is there a standard way to "invert" a map, to get Map a k ?
[00:17:34] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[00:18:17] <dsal> :t Map.fromList . fmap swap . Map.assocs
[00:18:18] <lambdabot> error:
[00:18:18] <lambdabot>     Not in scope: ‘Map.fromList’
[00:18:18] <lambdabot>     Perhaps you meant one of these:
[00:18:24] <dsal> :t M.fromList . fmap swap . M.assocs
[00:18:25] <lambdabot> Ord k => M.Map a k -> M.Map k a
[00:18:31] <geekosaur> maybe you want a bimap?
[00:18:48] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:19:11] <sm> cool, thanks both
[00:19:35] *** Joins: pavonia (~user@user/siracusa)
[00:19:55] <EvanR> it would be at least Map a [k]
[00:20:07] <EvanR> rather, Map a (NonEmpty k) if you are fancy
[00:20:34] <sm> I have actually Map k [a], which I think Bimap won't handle well
[00:20:51] <sm> to go from a to k. I should hand roll it I think
[00:20:56] <ski> a binary relation ?
[00:21:02] <EvanR> I was going to say this is a poor man's SQL add index, but now you went full relational
[00:21:49] <EvanR> Rel k a
[00:21:53] *** Joins: MatthiasG2 (~matthias@i6DFA01BB.versanet.de)
[00:21:58] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Ping timeout: 250 seconds)
[00:22:11] <monochrom> For full relational, just use [(k, a)] and do exhaustive search by list comprehension :)
[00:22:43] <EvanR> it's sad that often SQL does just that
[00:22:51] <ski> depends on which modes you plan to use
[00:23:33] *** Joins: Null_A (~null_a@2601:645:8700:2290:6509:ee11:ea28:47c)
[00:23:37] * ski . o O ( magic sets )
[00:25:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Remote host closed the connection)
[00:27:41] *** Quits: justGhost (~justache@user/justache) (Remote host closed the connection)
[00:28:40] *** Joins: justGhost (~justache@user/justache)
[00:28:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[00:28:48] <sm> hmm, let me make this concrete. I have accountsbytype :: Map AccountType [AccountName], and I want a accounttypebyn :: Map AccountName AccountType, or a lookupaccounttype :: AccountName -> Maybe AccountType. accountsbytype's AccountName values are disjoint (every account has only one type) but a Map doesn't make that apparent.
[00:29:21] <sm> which is making it a bit harder to reverse, I think
[00:29:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:31:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:32:33] <Clint> i'd say you could use ixset-typed, but that's undermaintained
[00:32:34] <byorgey> sm: yeah, if I were you I would just handroll my own custom data type that stores both a Map AccountType [AccountName] and a Map AccountName AccountType, and provide operations which automatically keep them in sync
[00:34:00] <georgy> @hoogle [a] -> Maybe a
[00:34:01] <lambdabot> Data.Maybe listToMaybe :: [a] -> Maybe a
[00:34:01] <lambdabot> Test.Framework.Providers.API listToMaybeLast :: [a] -> Maybe a
[00:34:01] <lambdabot> Distribution.Compat.Prelude.Internal listToMaybe :: [a] -> Maybe a
[00:34:09] <georgy> hmm, I don't have listToMaybe?
[00:34:24] <geekosaur> import Data.Maybe
[00:34:27] <georgy> I did
[00:34:35] <geekosaur> uh
[00:34:37] <sm> thanks
[00:34:46] <geekosaur> it's been there since at least 6.6, pretty sure
[00:35:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:35:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:35:31] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:35:45] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:35:46] <geekosaur> % :i listToMaybe
[00:35:47] <yahb> geekosaur: listToMaybe :: [a] -> Maybe a -- Defined in `Data.Maybe'
[00:35:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:36:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:36:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:36:22] <georgy> ok I figured it out. if there's an error, ghci won't have functions included in the file it loaded
[00:38:45] <EvanR> yeah it's a bit annoying the ghci reload isn't "transactional" and puts you back in a safe zone if reload files
[00:38:47] <EvanR> fails
[00:40:02] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[00:40:50] <EvanR> though if your file is now broken, there's in some sense nothing to go back to
[00:43:11] *** Quits: xff0x (~xff0x@2001:1a81:52b5:2e00:620f:6b65:415e:34ea) (Ping timeout: 250 seconds)
[00:43:58] *** Joins: xff0x (~xff0x@2001:1a81:52b5:2e00:330a:176:fd58:7823)
[00:51:38] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:f8f2:a6ee:f8f:27a0) (Ping timeout: 260 seconds)
[00:54:12] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[01:00:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:06:31] *** Quits: Null_A (~null_a@2601:645:8700:2290:6509:ee11:ea28:47c) (Remote host closed the connection)
[01:06:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:07:58] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[01:12:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[01:15:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Remote host closed the connection)
[01:24:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[01:27:57] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[01:28:06] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:28:15] *** Quits: xff0x (~xff0x@2001:1a81:52b5:2e00:330a:176:fd58:7823) (Ping timeout: 250 seconds)
[01:29:03] *** Joins: Guest25 (~Guest25@187.17.40.22)
[01:29:09] *** Joins: xff0x (~xff0x@2001:1a81:52b5:2e00:a456:ec27:982:79c1)
[01:36:24] *** Joins: Topsi (~Tobias@dyndsl-095-033-090-071.ewe-ip-backbone.de)
[01:40:40] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:42:57] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[01:45:49] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[01:46:37] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[01:47:03] *** Quits: emad (~emad@156.214.92.21) (Quit: Leaving)
[01:47:32] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[01:49:42] *** Quits: Guest25 (~Guest25@187.17.40.22) (Quit: Client closed)
[01:52:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[01:55:08] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[01:57:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[01:57:28] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[01:58:07] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 268 seconds)
[01:58:19] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[02:01:12] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[02:01:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[02:02:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[02:02:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[02:03:22] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[02:03:47] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:04:15] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:06:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[02:16:06] *** Joins: kaskal (~kaskal@213-147-165-60.nat.highway.webapn.at)
[02:16:22] *** Quits: kaskal (~kaskal@213-147-165-60.nat.highway.webapn.at) (Client Quit)
[02:16:38] *** Joins: kaskal (~kaskal@2001:4bb8:2cc:5073:e1cf:a3ef:264a:1e80)
[02:17:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:20:14] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:21:20] *** Joins: deadmarshal (~deadmarsh@95.38.113.75)
[02:22:40] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[02:25:37] *** Quits: deadmarshal (~deadmarsh@95.38.113.75) (Ping timeout: 240 seconds)
[02:39:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:39:55] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:40:30] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[02:43:45] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 268 seconds)
[02:44:36] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:44:39] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[02:45:46] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:45:57] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[02:46:14] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[02:46:26] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[02:47:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[02:50:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[03:00:41] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[03:00:44] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:03:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:09:09] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[03:10:12] *** Quits: max22- (~maxime@2a01cb088335980091c6fbcd4fea35f7.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:13:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[03:14:52] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[03:15:05] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[03:17:14] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[03:17:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[03:18:38] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[03:19:05] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[03:19:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[03:20:48] *** Joins: notzmv (~zmv@user/notzmv)
[03:22:45] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[03:23:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[03:25:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Remote host closed the connection)
[03:29:25] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[03:33:24] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:33:54] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[03:35:02] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 240 seconds)
[03:36:07] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:37:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[03:40:23] *** Joins: hololeap_ (~hololeap@user/hololeap)
[03:40:57] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:44:39] *** hololeap_ is now known as hololeap
[03:44:59] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[03:48:37] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:50:46] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:50:46] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:50:46] *** Joins: wroathe (~wroathe@user/wroathe)
[03:55:02] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:56:54] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[03:57:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[04:00:16] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:6d2:eb11:feaf:8a98)
[04:04:01] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Ping timeout: 250 seconds)
[04:04:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[04:04:56] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[04:06:17] *** ChanServ sets mode: +o litharge
[04:06:18] *** litharge sets mode: -bo *!*@209.6.150.53 litharge
[04:06:22] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:08:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[04:09:03] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:18:56] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:19:57] *** Quits: nunggu (~q@user/nunggu) (Ping timeout: 276 seconds)
[04:20:51] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:26:46] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:28:38] *** Parts: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Leaving)
[04:28:42] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[04:28:43] <Inst> leaving
[04:28:52] <Inst> I love you guys, but tbh i have to stop annoying you guys and actually learn Haskell instead
[04:28:56] *** Parts: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Leaving)
[04:36:03] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:37:24] <yushyin> a bit weird
[04:39:03] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[04:41:49] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:44:48] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[04:47:51] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:47:57] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:49:30] *** Quits: MatthiasG2 (~matthias@i6DFA01BB.versanet.de) (Quit: Lost terminal)
[04:49:46] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[04:52:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[04:55:24] *** Quits: Topsi (~Tobias@dyndsl-095-033-090-071.ewe-ip-backbone.de) (Ping timeout: 250 seconds)
[04:57:31] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[05:05:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[05:07:16] *** Joins: argento (~argent0@168-227-97-23.ptr.westnet.com.ar)
[05:09:07] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[05:13:20] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:13:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[05:17:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:23:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:31:34] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[05:34:41] *** Joins: tommd (~tommd@67-42-147-226.ptld.qwest.net)
[05:42:52] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[05:44:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[05:44:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[05:48:26] *** Quits: marquis_1ndras (~marquis_a@124.170.163.166) (Quit: Lost terminal)
[05:49:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[05:50:25] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[05:54:08] *** Joins: jespada (~jespada@87.74.36.188)
[05:54:46] *** Joins: zebrag (~chris@user/zebrag)
[05:57:12] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[05:57:41] *** Joins: lionhairdino (~jacoo@121.131.39.82)
[05:58:58] *** Joins: califax (~califax@user/califx)
[05:59:03] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[06:01:17] *** Quits: xff0x (~xff0x@2001:1a81:52b5:2e00:a456:ec27:982:79c1) (Ping timeout: 240 seconds)
[06:02:42] *** Joins: hololeap (~hololeap@user/hololeap)
[06:03:19] *** Joins: xff0x (~xff0x@2001:1a81:52f3:1d00:feda:8b5a:f28:424c)
[06:06:55] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[06:09:26] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 260 seconds)
[06:23:25] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[06:28:49] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[06:29:07] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[06:35:37] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-178.dsl.bell.ca) (Ping timeout: 240 seconds)
[06:36:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553)
[06:36:55] *** Quits: georgy (~bc8147f2@83.167.180.121) (Quit: CGI:IRC)
[06:39:07] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[06:41:38] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[06:43:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[06:47:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[06:49:30] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[06:55:12] *** Quits: CHUD (~CHUD@host-80-41-89-108.as13285.net) (Remote host closed the connection)
[07:02:28] <EvanR> standalone deriving Read for a proper GADTs seems to be problematic
[07:04:52] <EvanR> I guess something is lost when using a standalone deriving Show on the same GADT
[07:08:48] *** Quits: Null_A (~null_a@2601:645:8700:2290:8935:4edf:b32:6553) (Remote host closed the connection)
[07:10:39] <ski> existentials ?
[07:12:17] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:13:30] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:13:35] <EvanR> it complained about this construction I think
[07:13:40] <ski>   readsPrec1 :: Int -> String -> [(exists a. C a *> f a,String)]  -- something like this might be useful
[07:13:42] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[07:13:44] <EvanR> Colorize :: Color -> Sh Bool -> Sh (Maybe Color)
[07:14:13] <ski> what was the complaint ?
[07:14:20] <EvanR> Color doesn't match Maybe Color
[07:15:01] <ski> not the irregularity or the indexing, then ?
[07:15:44] <ski> (not sure i see why one'd expect `Color' to match `Maybe Color' there. perhaps there's some other data constructor with result type `Sh Color' ?)
[07:16:05] <EvanR> https://paste.tomsmeding.com/YyJ9zqFV
[07:16:24] <EvanR> yeah there is
[07:16:53] <EvanR> so it's really complaining that not all the results have the same index
[07:17:37] *** Quits: td_ (~td@muedsl-82-207-238-224.citykom.de) (Ping timeout: 240 seconds)
[07:17:48] <ski> try `-ddump-deriv' to see the code ?
[07:18:27] <ski> i'm guessing it's generating the code as plain recursion, rather than polymorphic recursion or GADT recursion
[07:18:40] * Andrew looks for a haskell macro system that;s as good as that of the Lisps
[07:18:51] <Andrew> Doesn't seem possible because no S-expressions
[07:18:55] <ski> (but there also might be an issue related to the polarity of the index, as i hinted at first)
[07:19:17] <ski> well .. i guess there's TH
[07:19:35] *** Joins: td_ (~td@muedsl-82-207-238-178.citykom.de)
[07:20:41] <EvanR> TH generates haskell code, macros generate lisp code, the concrete syntax doesn't really matter
[07:20:48] <EvanR> (Template Haskell)
[07:21:12] <ski> (also, one can use quasi-quotation with TH)
[07:23:05] <EvanR> well I managed to dump its Read instance and surprisingly, it looks like a Read instance
[07:23:11] <EvanR> it just doesn't type check
[07:23:34] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[07:23:39] <EvanR> I thought it was a long shot to begin with, I'll just write a parser
[07:23:44] <Andrew> I hate it when I see code like in the first expression of https://termbin.com/ebe7 though, haskell forces better readability
[07:24:38] <EvanR> code that ends in N ) is a classic though
[07:24:42] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[07:25:00] <EvanR> you're not supposed to be able to read it anyway, your editor knows if it's right
[07:25:02] <ski> ick ! .. the lonely parens, won't someone think of them !!
[07:26:09] * ski . o O ( "Riastradh's Lisp Style Rules" <https://mumble.net/~campbell/scheme/style.txt> )
[07:26:46] <ski> "Absolutely do *not* place closing brackets on their own lines.","Rationale:  The parentheses grow lonely if their closing brackets are all kept separated and segregated."
[07:27:18] <EvanR> Do not heed this section unless you know what you are doing.
[07:27:40] <ski> (followed by "Exceptions to the Above Rule Concerning Line Separation","Do not heed this section unless you know what you are doing.  Its title does *not* make the unacceptable example above acceptable.",..)
[07:30:57] *** Quits: foul_owl (~kerry@94.140.8.105) (Read error: Connection reset by peer)
[07:31:40] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (K-Lined)
[07:31:40] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (K-Lined)
[07:31:41] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (K-Lined)
[07:31:41] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (K-Lined)
[07:31:41] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (K-Lined)
[07:31:41] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (K-Lined)
[07:31:41] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (K-Lined)
[07:31:41] *** Quits: siraben (~siraben@user/siraben) (K-Lined)
[07:31:41] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (K-Lined)
[07:31:41] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (K-Lined)
[07:31:41] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (K-Lined)
[07:31:41] *** Quits: alex[m] (~alexchete@2001:470:69fc:105::1:1001) (K-Lined)
[07:31:41] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (K-Lined)
[07:31:41] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (K-Lined)
[07:31:41] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (K-Lined)
[07:31:41] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (K-Lined)
[07:31:41] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (K-Lined)
[07:31:41] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (K-Lined)
[07:31:41] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (K-Lined)
[07:31:42] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (K-Lined)
[07:31:42] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (K-Lined)
[07:31:42] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (K-Lined)
[07:31:42] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (K-Lined)
[07:31:42] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (K-Lined)
[07:31:42] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (K-Lined)
[07:31:42] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (K-Lined)
[07:31:42] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (K-Lined)
[07:31:42] *** Quits: ekai[m] (~ekai-zend@2001:470:69fc:105::1:7756) (K-Lined)
[07:31:42] *** Quits: benjamin[m]1234 (~benjaminm@2001:470:69fc:105::1:3f2f) (K-Lined)
[07:31:42] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (K-Lined)
[07:31:42] *** Quits: Tisoxin (~ikosit@user/ikosit) (K-Lined)
[07:31:42] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (K-Lined)
[07:31:42] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (K-Lined)
[07:31:42] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (K-Lined)
[07:31:42] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (K-Lined)
[07:31:42] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (K-Lined)
[07:31:42] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (K-Lined)
[07:31:42] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (K-Lined)
[07:31:42] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (K-Lined)
[07:31:42] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (K-Lined)
[07:31:42] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (K-Lined)
[07:31:42] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (K-Lined)
[07:31:42] *** Quits: kadoban (~kadoban@user/kadoban) (K-Lined)
[07:31:42] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (K-Lined)
[07:31:42] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (K-Lined)
[07:31:42] *** Quits: Deide (~deide@user/deide) (K-Lined)
[07:31:42] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (K-Lined)
[07:31:42] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (K-Lined)
[07:31:42] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (K-Lined)
[07:31:42] *** Quits: soft (~soft@2001:470:69fc:105::c75) (K-Lined)
[07:31:42] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (K-Lined)
[07:31:42] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (K-Lined)
[07:31:42] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (K-Lined)
[07:31:42] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (K-Lined)
[07:31:42] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (K-Lined)
[07:31:43] *** Quits: sm (~sm@plaintextaccounting/sm) (K-Lined)
[07:31:43] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (K-Lined)
[07:31:43] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (K-Lined)
[07:31:43] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (K-Lined)
[07:31:43] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (K-Lined)
[07:31:43] *** Quits: ormaaj (~ormaaj@user/ormaaj) (K-Lined)
[07:31:43] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (K-Lined)
[07:31:43] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (K-Lined)
[07:31:43] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (K-Lined)
[07:31:43] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (K-Lined)
[07:31:43] *** Quits: Nate[m]1 (~m52957mat@2001:470:69fc:105::1:591a) (K-Lined)
[07:31:43] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (K-Lined)
[07:31:43] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (K-Lined)
[07:31:43] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (K-Lined)
[07:31:43] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (K-Lined)
[07:31:43] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (K-Lined)
[07:31:43] *** Quits: quantum (~quantum@user/quantum/x-8556232) (K-Lined)
[07:31:43] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (K-Lined)
[07:31:43] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (K-Lined)
[07:31:43] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (K-Lined)
[07:31:43] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (K-Lined)
[07:31:43] *** Quits: jinsun_ (~jinsun@user/jinsun) (K-Lined)
[07:31:43] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (K-Lined)
[07:31:43] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (K-Lined)
[07:31:43] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (K-Lined)
[07:31:43] *** Quits: moats (~oats@user/oats) (K-Lined)
[07:31:43] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (K-Lined)
[07:31:43] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (K-Lined)
[07:31:43] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (K-Lined)
[07:31:43] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (K-Lined)
[07:31:43] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (K-Lined)
[07:31:43] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (K-Lined)
[07:31:43] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (K-Lined)
[07:31:43] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (K-Lined)
[07:31:43] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (K-Lined)
[07:31:43] *** Quits: psydroid (~psydroid@user/psydroid) (K-Lined)
[07:31:43] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (K-Lined)
[07:31:43] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (K-Lined)
[07:31:43] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (K-Lined)
[07:31:43] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (K-Lined)
[07:31:43] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (K-Lined)
[07:31:43] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (K-Lined)
[07:31:44] <ski> it's sometimes said that Lisp programmers, with some experience, don't really see the brackets that much (certainly don't keep manually counting them that often). since there's a standard indentation, people to a large extent read the structure off that
[07:31:51] <EvanR> Andrew has inspired me to print out and read back this structure as an S expr
[07:32:09] * ski stares blankly at the above
[07:32:34] <EvanR> a mix of matrix users and others got K-lined
[07:32:55] * ski nods
[07:33:36] <EvanR> it's like a hundred silent voices suddenly... remained silent
[07:34:09] <ski> (tbh, there has been a few attempts to actually get rid of the brackets (mostly, at least), and simply use indentation for the tree structure .. however, there are some quirks, like `((...) ...)' and `(... . ...)' that are harder to fit into such a style)
[07:34:49] <ski> (but, if anyone's curious, i could point to two or three SRFIs (Scheme Requests For Implementation) that's about such surface syntices)
[07:34:49] <EvanR> reintroduce brackets when you want to "put indentation on one line" ?
[07:34:58] <ski> yea, they tend to allow that
[07:35:04] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:37:27] <ephemient> https://shaunlebron.github.io/parinfer/ looks pretty cool but like all alternate lisp syntaxes it seems dead
[07:39:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[07:39:53] <EvanR> would lisp really be lisp anymore
[07:40:17] <EvanR> like taking jos wheadon out of The Avengers
[07:40:57] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 240 seconds)
[07:41:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[07:42:54] <EvanR> wait now I need to scroll back to the existentials comment
[07:44:10] <EvanR> a parser for a proper GADT would necessarily return an existential right
[07:44:38] <EvanR> oh, it can do like juicy pixels and return a sum type
[07:47:16] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[07:48:56] *** Joins: foul_owl (~kerry@174-21-143-101.tukw.qwest.net)
[07:52:36] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[07:55:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:56:13] <ski> well, here's three (more) : "Indentation-sensitive syntax" <https://srfi.schemers.org/srfi-49/>,"wisp: simpler indentation-sensitive scheme" <https://srfi.schemers.org/srfi-119/>,"Sweet-expressions (t-expressions)" <https://srfi.schemers.org/srfi-110/>
[07:56:26] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[07:56:38] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[07:57:19] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[07:57:32] <ski> @where liskell
[07:57:32] <lambdabot> a SExp syntax for Haskell, by therp : <http://clemens.endorphin.org/liskell> (broken),<https://web.archive.org/web/20081105133119/http://clemens.endorphin.org/liskell>,<http://clemens.endorphin.org/
[07:57:32] <lambdabot> ILC07-Liskell-draft.pdf>,<https://web.archive.org/web/20120609122549/http://www.liskell.org/>
[07:57:55] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[07:57:57] <ski> EvanR : "a parser for a proper GADT would necessarily return an existential right" -- no .. it depends on what you want out of the parser
[07:58:32] <EvanR> the "original" GADT that was stringified
[07:58:33] *** Joins: s4msung (bZt8T9wHxn@user/s4msung)
[07:58:40] <ski> if you're satisfied with treating the index as input (iow you know beforehand whether you're looking for `Sh Color' or `Sh (Maybe Color)'), then you don't need to muck about existentials
[07:58:52] <EvanR> right
[07:58:57] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:59:02] <ski> but if you want it as output (you discover the type as you parse), then you do need existentials
[07:59:16] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[07:59:21] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:59:31] <ski> (granted, usually people will probably want the latter, not just the former)
[07:59:53] <EvanR> the former could work but I'm not sure how much simpler it would be
[08:00:09] <ski> but then a question is which constraints do you expect to get, on the existential ?
[08:00:09] *** Joins: Null_A (~null_a@2601:645:8700:2290:6509:ee11:ea28:47c)
[08:00:21] <EvanR> I don't use any constraints
[08:00:42] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[08:00:46] *** Joins: ksqsf (~user@2001:da8:d800:611:d162:136f:2ecb:b741)
[08:00:58] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[08:01:03] <ski> it'll probably depend on the GADT .. and possibly, in some cases, also on the particular usage of parsing it (so that we don't necessarily have an FD from the GADT to the constraint)
[08:01:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[08:01:48] <ski> yea, often it'll not be necessary (since you could often simply recover it, by traversing the GADT, to a greater or lesser degree)
[08:02:05] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[08:02:05] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[08:02:05] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[08:02:05] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[08:02:05] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[08:02:05] *** Joins: kadoban (~kadoban@user/kadoban)
[08:02:05] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[08:02:05] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[08:02:05] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[08:02:05] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[08:02:05] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[08:02:05] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[08:02:06] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[08:02:06] *** Joins: sm (~sm@plaintextaccounting/sm)
[08:02:06] *** Joins: Deide (~deide@user/deide)
[08:02:06] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[08:02:06] *** Joins: psydroid (~psydroid@user/psydroid)
[08:02:06] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[08:02:06] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[08:02:06] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[08:02:06] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[08:02:06] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[08:02:06] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[08:02:06] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[08:02:06] *** Joins: Tisoxin (~ikosit@user/ikosit)
[08:02:06] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[08:02:06] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[08:02:06] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[08:02:06] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[08:02:06] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[08:02:06] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[08:02:06] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[08:02:06] *** Joins: jinsun_ (~jinsun@user/jinsun)
[08:02:06] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[08:02:06] *** Quits: d34df00d (~d34df00d@2600:1700:8c60:3a10::48) (Excess Flood)
[08:02:07] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[08:02:07] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[08:02:07] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[08:02:07] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[08:02:08] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[08:02:08] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[08:02:08] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[08:02:08] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[08:02:08] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[08:02:08] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[08:02:08] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[08:02:08] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[08:02:08] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[08:02:09] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[08:02:13] <ski> whee
[08:02:14] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[08:02:16] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[08:02:17] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[08:02:17] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[08:02:17] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[08:02:17] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[08:02:18] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[08:02:18] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[08:02:18] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[08:02:18] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[08:02:18] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[08:02:18] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[08:02:19] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[08:02:19] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[08:02:19] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[08:02:19] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[08:02:19] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[08:02:19] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[08:02:19] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[08:02:19] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[08:02:19] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[08:02:19] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[08:02:19] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[08:02:19] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[08:02:20] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[08:02:20] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[08:02:20] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[08:02:20] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[08:02:20] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[08:02:20] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[08:02:20] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[08:02:20] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[08:02:20] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[08:02:20] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[08:02:20] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[08:02:20] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[08:02:20] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[08:02:20] *** Joins: siraben (~siraben@user/siraben)
[08:02:20] *** Joins: moats (~oats@user/oats)
[08:02:20] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[08:02:20] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[08:02:20] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[08:02:21] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[08:02:21] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[08:02:21] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[08:02:22] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[08:02:22] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[08:02:22] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[08:02:23] *** Joins: alex[m]123456 (~alexchete@2001:470:69fc:105::1:1001)
[08:02:28] <EvanR> a functional dependency from the GADT to the constraint?
[08:02:39] <ski> rather, a lack thereof
[08:02:39] <ephemient> doesn't Generic give you a way to traverse a GADT?
[08:03:39] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[08:04:12] <EvanR> here is my GADT if you're curious, pretty simple right now https://paste.tomsmeding.com/emd6bFhl
[08:06:13] <EvanR> not tonight, but I want to see if I can add let bindings, free variables, higher order abstract syntax. All of which I'll need to heavily review
[08:09:35] <EvanR> in this case the parser can get away with returning data DynamicSh = ShBW (Sh Bool) | ShColor (Sh Color) | ShCutout (Sh (Maybe Color)), I think
[08:09:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:09:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:09:47] *** Joins: wroathe (~wroathe@user/wroathe)
[08:10:35] *** Quits: ksqsf (~user@2001:da8:d800:611:d162:136f:2ecb:b741) (Ping timeout: 250 seconds)
[08:13:12] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[08:13:25] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Ping timeout: 250 seconds)
[08:13:44] *** Joins: burnsidesLlama (~burnsides@client-8-89.eduroam.oxuni.org.uk)
[08:14:30] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:17:11] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Client limit exceeded: 20000)
[08:17:13] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Client limit exceeded: 20000)
[08:17:20] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Client limit exceeded: 20000)
[08:17:29] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Client limit exceeded: 20000)
[08:17:32] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Client limit exceeded: 20000)
[08:17:47] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[08:17:51] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Client limit exceeded: 20000)
[08:17:51] *** Quits: burnsidesLlama (~burnsides@client-8-89.eduroam.oxuni.org.uk) (Ping timeout: 245 seconds)
[08:18:03] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Client limit exceeded: 20000)
[08:18:22] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Client limit exceeded: 20000)
[08:18:24] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Client limit exceeded: 20000)
[08:18:28] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[08:18:34] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Client limit exceeded: 20000)
[08:18:44] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Quit: Client limit exceeded: 20000)
[08:18:47] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Client limit exceeded: 20000)
[08:18:50] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Client limit exceeded: 20000)
[08:19:12] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Client limit exceeded: 20000)
[08:19:31] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Client limit exceeded: 20000)
[08:19:43] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Client limit exceeded: 20000)
[08:19:47] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Client limit exceeded: 20000)
[08:19:47] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Client limit exceeded: 20000)
[08:19:47] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Quit: Client limit exceeded: 20000)
[08:19:48] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[08:19:48] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Client limit exceeded: 20000)
[08:19:54] *** Joins: ksqsf (~user@2001:da8:d800:611:51cf:77ee:66a1:4f90)
[08:19:59] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Client limit exceeded: 20000)
[08:20:09] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Client limit exceeded: 20000)
[08:20:13] <ski> ok, no existentials there
[08:20:14] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[08:20:16] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Client limit exceeded: 20000)
[08:20:19] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Client limit exceeded: 20000)
[08:20:21] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Client limit exceeded: 20000)
[08:20:28] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[08:20:40] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[08:20:54] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[08:21:03] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Client limit exceeded: 20000)
[08:21:07] <ski> (`let' would presumably bring them, though .. and then you'd possibly need to consider if you'd want to annotate the existentials with constraints)
[08:21:14] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[08:21:14] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[08:21:28] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[08:21:30] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[08:21:45] *** Joins: Deide (~deide@user/deide)
[08:21:45] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[08:21:45] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[08:21:59] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[08:22:01] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[08:22:05] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Client limit exceeded: 20000)
[08:22:13] <ski> EvanR : yea .. but how do you get to `DynamicSh' ? do you simply try enumerating the alternatives ?
[08:22:18] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[08:22:30] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[08:22:34] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[08:22:41] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Client limit exceeded: 20000)
[08:22:41] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Client limit exceeded: 20000)
[08:22:47] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Client limit exceeded: 20000)
[08:22:48] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[08:22:49] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Quit: Client limit exceeded: 20000)
[08:22:53] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Quit: Client limit exceeded: 20000)
[08:22:53] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Client limit exceeded: 20000)
[08:22:56] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (Quit: Client limit exceeded: 20000)
[08:22:57] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Quit: Client limit exceeded: 20000)
[08:23:00] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[08:23:02] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[08:23:20] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[08:23:20] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[08:23:20] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[08:23:20] *** Joins: jinsun_ (~jinsun@user/jinsun)
[08:23:23] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Client limit exceeded: 20000)
[08:23:32] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[08:23:50] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[08:24:04] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[08:24:18] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[08:24:30] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[08:24:30] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[08:24:30] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[08:24:43] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[08:24:57] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[08:25:53] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[08:25:57] *** Quits: argento (~argent0@168-227-97-23.ptr.westnet.com.ar) (Quit: leaving)
[08:26:11] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[08:26:21] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[08:26:35] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[08:26:38] *** Quits: ksqsf (~user@2001:da8:d800:611:51cf:77ee:66a1:4f90) (Ping timeout: 260 seconds)
[08:26:50] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[08:27:02] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[08:28:22] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[08:28:24] <EvanR> ski, eyeballing each constructor... it seems like sometimes it's straight forward how to parse the payload or die trying, it's expecting something with a particular type, in two cases it's totally polymorphic so whatever comes back from the recursive parser could be used...
[08:28:32] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[08:28:33] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[08:28:37] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[08:28:37] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[08:28:52] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[08:28:53] *** Joins: psydroid (~psydroid@user/psydroid)
[08:28:53] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[08:28:53] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[08:29:41] <ski> EvanR : yea, i guess it's more `Layer',`Shift' and `Xform' which are problematic, in that sense
[08:29:49] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[08:31:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.75)
[08:32:22] *** Joins: ksqsf (~user@114.214.178.136)
[08:32:40] <EvanR> the three possible results each have a monotype, so that would let Layer construct if the two Dyn results matched
[08:32:41] *** Joins: kadoban (~kadoban@user/kadoban)
[08:33:03] <ksqsf> Is it possible to set multiple implicit parameters by simply calling a function, instead of 'let' them one by one?
[08:33:22] <ksqsf> like the implicitparams version of defaultXXX
[08:34:41] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:37:51] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[08:40:01] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:6d2:eb11:feaf:8a98) (Remote host closed the connection)
[08:40:26] *** Quits: Null_A (~null_a@2601:645:8700:2290:6509:ee11:ea28:47c) (Remote host closed the connection)
[08:40:37] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[08:42:22] * ksqsf feels bad for using CPP to do this
[08:43:20] <EvanR> my running fold over "reasons not to use implicit params" continues xD
[08:44:23] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[08:44:31] <ski> EvanR : oh, you're thinking about involving `Dyn' ?
[08:44:49] <EvanR> DynamicSh
[08:44:53] <ski> oh
[08:45:03] <ski> hm
[08:45:06] <EvanR> it seems to give enough info for subparsers to work
[08:45:12] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[08:45:13] <ski> that being `exists a. Sh a', or ?
[08:45:28] <EvanR> no you missed it
[08:45:31] <EvanR> data DynamicSh = ShBW (Sh Bool) | ShColor (Sh Color) | ShCutout (Sh (Maybe Color))
[08:45:57] <ski> ksqsf : i suppose you could `withContext :: ((?x :: T,...) => a) -> a'
[08:46:28] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[08:46:33] <ski> oh, right, that one
[08:46:45] <ski> (sorry, i forgot that was named `DynamicSh')
[08:47:10] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[08:47:16] <ski> EvanR : hm, so you're saying you're repackaging `DynamicSh' ?
[08:47:28] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[08:48:09] <EvanR> i introduced this type when wondering what a parser would return, coincidentally (?) it seem like it would let the parser work recursively and satisfy the polymorphism
[08:48:19] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[08:49:15] <EvanR> data SomeSh = forall a . SomeSh (Sh a) seems kind of useless
[08:49:18] <EvanR> in this case
[08:49:38] *** Joins: zaquest (~notzaques@5.130.79.72)
[08:50:07] <ksqsf> ski: ah thanks this indeed works
[08:50:11] <EvanR> or not? you can still unwrap and pattern match...
[08:50:13] <ksqsf> (though the callback style is less ideal)
[08:51:11] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 245 seconds)
[08:53:45] *** Quits: tommd (~tommd@67-42-147-226.ptld.qwest.net) (Ping timeout: 268 seconds)
[08:55:04] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[09:07:57] <ski> EvanR : "seems kind of useless" -- yea, especially considering `Union',`Inter',`Minus',`Colorize',`Layer',`BGcolor'
[09:08:56] <EvanR> how do you mean
[09:09:49] <ski> those have recursive calls ("argument types") where the argument isn't just a tyvar
[09:10:42] *** Quits: jao (~jao@68.235.43.172) (Remote host closed the connection)
[09:10:47] *** Joins: mbuf (~Shakthi@223.190.212.194)
[09:11:51] <ski> so, if you're given an `exists a. Sh a' for a parsed sub-part, now you must somehow determine if this `a' matches `Bool' / `Maybe Color' / `Maybe b' .. and that (in general) may require unbounded search (because of `Shift' and `Xform' just forwarding the parameter to the recursive calls)
[09:12:43] <ski> (when i say "recursive calls", i'm wearing my logic programmer hat, viewing the `data' type, with constructors, as clauses for a predicate)
[09:13:07] <ski> ksqsf : np :)
[09:14:14] <EvanR> it's almost midnight but I'd like to know more how a GADT with constructors are clauses for a predicate if you're wearing a logic programmer hat
[09:16:04] <EvanR> also, I'm sure I see the real possibility of unbounded search, if it came down to that
[09:16:30] <EvanR> er, not sure
[09:18:13] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[09:18:27] *** Joins: Everything (~Everythin@37.115.210.35)
[09:19:13] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[09:19:34] <EvanR> an infinite tree?
[09:20:10] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:23:03] *** Joins: marquis_andras (~marquis_a@124.170.163.166)
[09:27:47] <ski> well, in Twelf syntax (which is a logical framework, and sortof a dependently-typed logic programming language), it'd be
[09:28:03] <ski>   sh : type <- type.
[09:28:11] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:b966:c67:7e32:3db8)
[09:28:14] <ski>   ball     : sh  bool.
[09:28:25] <ski>   axigon   : sh  bool         <- float4.
[09:28:38] <ski>   trigon   : sh  bool         <- float2 <- float2 <- float2.
[09:28:47] <ski>   curve2i  : sh  bool        <- float2 <- float2 <- float2.
[09:28:55] <ski>   union    : sh  bool        <- sh bool <- sh bool.
[09:29:03] <ski>   inter    : sh  bool        <- sh bool <- sh bool.
[09:29:11] <ski>   minus    : sh  bool         <- sh bool <- sh bool.
[09:29:18] <ski>   colorize : sh (maybe color) <- sh bool <- color.
[09:29:26] <ski>   layer     : sh (maybe A    ) <- sh (maybe A) <- sh (maybe A).
[09:29:34] <ski>   shift : shift     : sh  A             <- sh A <- float2.
[09:29:40] <ski>   xform     : sh  A            <- sh A <- float4.
[09:29:44] <ski>   bgcolor  : sh  color        <- sh (maybe color) <- color.
[09:30:06] <EvanR> ok I think that all made it through
[09:30:34] *** Joins: jao (~jao@68.235.43.172)
[09:30:55] <ski> in Prolog syntax (if we ignore the names of the clauses (which are the data constructor names). that's not really a thing in Prolog), it'd be tupled rather than curried, so e.g. `colorize' would be
[09:31:18] <ski>   sh(maybe(A    )) :- color,sh(bool).
[09:31:48] <ski> (oh, and there's no static types, so the signature `sh : type <- type.' corresponds to nothing)
[09:32:15] <ski> anyway, this is a recursive predicate, sh/1, of one parameter
[09:32:39] <EvanR> sh(maybe(A space space space space )) ? really?
[09:32:57] <ski> (to align with `sh(maybe(color))' ..)
[09:33:18] <EvanR> oh, don't worry, nothing's aligning
[09:33:24] * ski smiles
[09:33:25] *** Joins: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net)
[09:33:41] *** Quits: deadmarshal (~deadmarsh@95.38.113.75) (Ping timeout: 245 seconds)
[09:33:43] <ski> (it's only morning here, now)
[09:33:52] <EvanR> what is :-
[09:34:02] <ski> converse implication. same as `<-'
[09:34:57] <ski> anyway, in this case i guess there isn't *too* much utility in pondering how sh/1 might execute as a predicate (proof-search) ..
[09:35:20] <ski> but sometimes, considerations from such a view can be helpful, when considering such a data type
[09:35:45] <ski> e.g. sometimes it can be useful to introduce an accumulator parameter
[09:36:06] <ski> or to remove unwanted non-determinism, due to associativity e.g.
[09:37:30] <EvanR> proof-search of sh/1 means find any possible value?
[09:37:43] *** Joins: rusrushal13 (~rusrushal@2401:4900:43a9:6cb9:3b78:294d:342e:939a)
[09:37:54] <ski> e.g. you might want something like `data Path :: Node -> Node -> * where Empty :: Path n n; Append :: Path m n -> Path n o -> Path m o; Single :: Edge m n -> Path m n', for reflexive-transitive closure of `Edge'
[09:37:56] <EvanR> or all possible values
[09:39:07] *** Joins: fef (~thedawn@user/thedawn)
[09:39:23] <ski> but you can associate `Append' in multiple ways. so it may be better to use `Cons :: Edge m n -> Path n o -> m o' (or maybe `Snoc :: Path m n -> Edge n o -> Path m o') (right- (/ left-) associating all the `Append's (and removing `Empty' to the left), and then fusing with `Single')
[09:39:51] <ski> and this corresponds to a common similar refactoring for a predicate in logic programming
[09:41:31] <ski> "proof-search of sh/1 means find any possible value?","or all possible values" -- well, first off, what do you mean by "value" ? the proofs in LP corresponds to the values of the `data' type in Haskell, while the values (the parameters of the predicates) in LP corresponds to the `data' type parameters (whether they be of kind `*' or something else, like `Node')
[09:42:56] <ski> proof-search means that we search for proofs (values of the `data' type). but, it also means that we may know some of the parameters beforehand, while we're searching for possible values of the others (we could also partially know a parameter, know some constructors in it, while searching for what to fill the holes in them with. so a parameter can be both input and output)
[09:44:19] <ski> in your parsing example, if you parse for `Sh (Maybe Color)', then that's calling sh/1 in the sh(+) mode (parameter is input). but if you parse for `Sh a', for an `a' that you hope to discover (if parsing succeeds), then that's output, or mode sh(-)
[09:44:21] <EvanR> so parameters are the payload
[09:44:40] <ski> and one could imagine intermediates, like parsing for `Sh (Maybe a)', searching for `a' ..
[09:44:49] <ski> yea, in LP, they are
[09:45:13] <ski> but for `data' types, we also care more about the proofs (the values of the `data' type)
[09:45:21] <ski> but it can still be a useful view
[09:45:35] <ski> (this is an analogy with LP, in addition to the type class analogy with LP)
[09:46:25] <EvanR> so a search could produce the parameters, but not the proof
[09:46:55] <ski> well, if you return a value of type `Sh a', for some (discovered) `a', then that value is "the proof"
[09:47:08] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:b966:c67:7e32:3db8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:47:21] <ski> but in (plain) LP, the proof would never get materialized. it'd just appear as an execution trace
[09:47:36] <ski> (in Twelf, you can reify it, though, so that you can access it like a value)
[09:48:05] <EvanR> what do you even get if you don't get a value of the type
[09:48:07] <EvanR> if anything
[09:48:27] <EvanR> just a listing of parameters
[09:48:40] <EvanR> the one unknown parameter
[09:48:55] <ski> (and if it's just an execution trace, then presumably we don't care about different execution traces leading to the same solutions (instantiations for output parameters) .. and so we can use refactorings which don't preserve proofs, but which preserve solutions. while, if we also care about proofs, we need to be more careful with such)
[09:49:05] <ski> yes
[09:49:20] <EvanR> interesting
[09:49:43] <ski> e.g. in Prolog, if you perform the query `?- append([0,1],[2,3,4],L).', you'll get as answer `L = [0,1,2,3,4]'
[09:50:43] <EvanR> so append if a function
[09:50:49] <EvanR> so append is a function
[09:50:50] <ski> while, if you ask `?- append(F,B,[0,1,2]).', you'll get three alternative solutions, `F = [],B = [0,1,2] ; F = [0],B = [1,2] ; F = [0,1],B = [2] ; F = [0,1,2],B = []' (comma is conjunction, semicolon is disjunction)
[09:51:10] <ski> it's like solving an equation, you get a disjunction of solutions
[09:51:50] <ski> append/3 is a predicate, a relation. `append(F,B,L)' expresses that the concatentation of the lists `F' and `B' is the list `L'. in Haskell terms, `f ++ b = l'
[09:52:06] <EvanR> i see
[09:52:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:52:25] <EvanR> so that is what the data constructors are
[09:52:32] <ski> Prolog will enumerate all solutions, via backtracking (depth-first search), eventually (unless you commit to a given overall solution)
[09:52:36] *** Joins: cynomys (~cynomys@user/cynomys)
[09:52:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:52:53] *** Quits: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net) (Remote host closed the connection)
[09:53:14] <ski> Prolog doesn't have functions, except in the trivial sense of data constructors
[09:53:32] <ski> (they package data, but they don't compute)
[09:53:44] <ski> only predicates express general computation
[09:53:53] *** Joins: tabemann (~travisb@172-13-49-137.lightspeed.milwwi.sbcglobal.net)
[09:54:18] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[09:55:11] <ski> (in Mercury, which is logic/functional (with a static type system borrowing quite a bit from Haskell, including type classes, existentials, ..), there are real computational functions .. but, just like predicates, we can also run them "backwards" and "sideways". this is like we'd automatically get views (when possible) for undoing functions)
[09:55:22] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[09:55:22] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Remote host closed the connection)
[09:55:37] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[09:55:45] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[09:55:49] <ski> (s/three/four/)
[09:56:06] <EvanR> run a function sideways, what
[09:56:15] <ski> well, imagine you could write
[09:56:17] <EvanR> this I gotta see
[09:56:31] <ski>   foo ([0,1,0] ++ xs) = ..xs..
[09:56:55] <ski> here, we're calling `(++)' with left operand as input, right operand as output, and result as input
[09:57:02] <ski> or say
[09:57:13] <ski>   bar xs (xs ++ ys) = ..xs..ys..
[09:57:35] <ski> (same thing, except that this time, the left operand isn't a literal constant, but involves a (previously bound) variable)
[09:58:21] <ski> (Erlang has a special-case for `++', for this. but in Mercury, this is a general mechanism that you can have for any functions where it makes sense)
[09:58:56] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:59:32] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:00:42] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:00:43] <EvanR> foo is pattern matching using a function?
[10:00:51] <ski> in Haskell, you could make `pattern Prepend010 :: (Num a,Eq a) => () => [a] -> [a]; pattern Prepend010 xs = 0 : 1 : 0 : xs', and then you could say `foo (Prepend010 xs) = ..x..'
[10:00:54] <ski> yes
[10:01:16] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:01:21] <ski> but, afaik, `ViewPattern's doesn't allow you to parameterize with expressions, so you couldn't do `bar' like this
[10:01:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:03:00] <EvanR> and bar xs (xs ++ ys) = is using the same variable twice
[10:03:31] <ski> yes. the first `xs' is a pattern (so, output. we're getting the value of `xs' from matching this pattern)
[10:03:56] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[10:04:01] <ski> the second `xs' is an expression (input. we're using the previously bound value of `xs', passing it as input to `(++)', in its left operand)
[10:04:29] <EvanR> then first occurrence of a pattern variable is "an output"
[10:04:40] <EvanR> after that it is referring to that output
[10:05:16] <ski> and the `ys' (pattern) is output from the pattern-match on the pattern `xs ++ ys' (whose result will be an *input*, matched against this pattern, and which comes from the caller of `bar' (passing second parameter as input))
[10:05:22] <ski> yes
[10:06:04] <EvanR> what does xs ++ ys even match
[10:06:05] <ski> Mercury is quite interesting :)
[10:06:17] <ski> (and logic programming in general is fun :)
[10:06:26] *** Joins: jespada (~jespada@87.74.36.188)
[10:06:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:06:38] <ski> it matches the input list against the concatenation of the two lists `xs' and `ys'
[10:06:48] <EvanR> ah
[10:07:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:07:10] <EvanR> is there a "SICP" of logic programming somewhere
[10:07:16] <ski> if both `xs' and `ys' were to be output (like in my `?- append(F,B,[0,1,2]).' example above), then the match would be non-deterministic, there'd (in general) be multiple ways of matching
[10:07:24] <EvanR> I feel like jumping into mercury would be skipping a few things
[10:07:50] <ski> but, since, in this case, `xs' is already bound/instantiated, it is input, not output, and therefore the match is semi-deterministic (at most one solution, either match success, or failure to match)
[10:09:05] <ski> yea .. it would probably be easier (and in some ways more instructive, especially all the pain you can encounter, and which Mercury protects you from, but if you jump into Mercury, skipping Prolog, it's harder to understand what it's fussing about) to start with basic Prolog
[10:09:17] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[10:09:55] <ski> "Re: Mercury in academic teaching?" <https://www.mercurylang.org/list-archives/users/2006-October/004000.html>
[10:10:17] <ski> <https://www.mercurylang.org/list-archives/users/2006-October/004011.html>, both by Richard A. O'Keefe
[10:10:31] <ski> are two intersting posts that mention this
[10:14:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:15:26] <ski> (some of the points he's making are really important)
[10:16:04] <EvanR> the discussion about compiler error messages is interesting
[10:16:24] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:16:33] <EvanR> it's really an alien language
[10:17:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:18:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:19:08] <ski> yea, but so's Haskell :)
[10:19:18] <ski> (oh, and i'm still sad about Aditi)
[10:20:24] <EvanR> yeah I mean in any compiler I've ever used
[10:20:55] <EvanR> Aditi?
[10:21:59] <ski> Deductive database (using predicate logic (Datalog- / Prolog- like) syntax, rather than something baroque like SQL ..) that integrated nicely with Mercury)
[10:22:40] <ski> (and Mercury mostly uses the (Edinburgh standard) Prolog syntax)
[10:23:54] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[10:24:02] <ski> (oh, and there's ##prolog and #mercury channels, here, in case you wonder)
[10:24:24] <EvanR> right
[10:24:49] *** Joins: deadmarshal (~deadmarsh@95.38.112.42)
[10:26:54] <ski> "is there a \"SICP\" of logic programming somewhere" -- well, hmm .. the closest, imho, would probably be
[10:26:57] <ski> @where CTM
[10:26:57] <lambdabot> "Concepts, Techniques, and Models of Computer Programming", by Peter Van Roy,Seif Haridi, at <http://www.info.ucl.ac.be/~pvr/book.html>
[10:27:56] <ski> it is multiparadigm, but it showcases stuff using Oz, which at its base is a logic programming language, with functional, stateful, object-oriented, and concurrent layers
[10:29:37] <ski> one of the particularly interesting things about it is its declarative (deterministic) concurrency, where you can use "logic variables" (a la Prolog, which effect bi-directional communication) (called "dataflow variables" in the context of concurrency. one can also artificially make them onesided, to prevent information from flowing in one direction) to communicate inbetween threads
[10:31:08] <ski> there are also other nice books, like "The Art of Prolog" by Leon Sterling,Ehud Shapiro,"Prolog: Programming for Artificial Intelligence" by Ivan Bratko,"The Craft of Prolog" (this one is more practical, with lots of useful advice) by Richard A. O'Keefe
[10:31:24] <sm2n> I liked art of prolog
[10:32:13] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:32:24] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:32:32] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.93)
[10:33:36] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:33:39] <ski> fwiw, "Programming in Prolog" by Clocksin,Mellish is the classic starter book on Prolog
[10:34:02] *** Quits: deadmarshal (~deadmarsh@95.38.112.42) (Ping timeout: 260 seconds)
[10:34:31] <ski> there's also a nice tutorial, "Learn Prolog Now!", online, by Patrick Blackburn,et al.
[10:34:37] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[10:34:53] <ski> and, iirc, Amzi! Prolog has a tutorial about how to make a text adventure in Prolog
[10:34:55] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:36:35] <ski> (oh, Oz also has support for Constraint Programming (CP), specifically Constraint Logic Programming (CLP). many Prolog systems also do, to varying degrees (simplex solvers, boolean solvers, finite domains, ..). ECLiPSe is one such system that seems particularly specialized/focused on this)
[10:37:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:37:16] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[10:40:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:42:22] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:45:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:46:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:47:05] *** Joins: img (~img@user/img)
[10:48:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:49:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:49:38] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[10:51:17] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[10:55:30] *** Quits: vglfr (~vglfr@88.155.52.56) (Read error: Connection reset by peer)
[10:56:33] *** Joins: vglfr (~vglfr@88.155.52.56)
[10:56:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:56:57] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[10:57:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:58:48] *** Joins: whatif (~user@123.180.74.74)
[10:59:59] <whatif> inside a cabal project, runghc a.hs, it shows could not load module `Web.Scotty' it is a member of the hidden package `scotty-0.12'...' how I can solve this?
[11:00:11] <whatif> without :set -package scotty?
[11:00:39] <whatif> and no ghc to compile, I'd like to run it with runghc
[11:01:55] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:02:02] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:02:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:08:04] *** Quits: jao (~jao@68.235.43.172) (Remote host closed the connection)
[11:12:05] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[11:17:53] *** Joins: jao (~jao@68.235.43.172)
[11:18:44] *** Quits: ksqsf (~user@114.214.178.136) (Ping timeout: 256 seconds)
[11:23:03] *** Quits: rusrushal13 (~rusrushal@2401:4900:43a9:6cb9:3b78:294d:342e:939a) (Ping timeout: 256 seconds)
[11:24:21] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[11:24:26] <Andrew> Prolog, nice
[11:26:31] *** Quits: phma (phma@2001:5b0:2172:8d38:d8c9:6275:aa70:e454) (Read error: Connection reset by peer)
[11:26:49] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:27:32] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 240 seconds)
[11:27:39] *** Joins: phma (~phma@host-67-44-208-219.hnremote.net)
[11:27:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:28:52] *** Quits: jao (~jao@68.235.43.172) (Remote host closed the connection)
[11:30:08] *** Joins: jao (~jao@68.235.43.172)
[11:34:05] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 268 seconds)
[11:35:39] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:36:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:37:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:39:05] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:40:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:42:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:43:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:44:06] *** Quits: jao (~jao@68.235.43.172) (Ping timeout: 245 seconds)
[11:44:38] *** Joins: ksqsf (~user@2001:da8:d800:611:d4c4:3076:5e68:23e0)
[11:45:09] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[11:46:37] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 240 seconds)
[11:47:04] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[11:47:58] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[11:48:52] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[11:49:14] *** Quits: ksqsf (~user@2001:da8:d800:611:d4c4:3076:5e68:23e0) (Ping timeout: 250 seconds)
[11:49:24] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[11:50:49] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[11:51:50] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[11:51:57] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Client limit exceeded: 20000)
[11:53:31] *** Quits: whatif (~user@123.180.74.74) (Quit: ERC (IRC client for Emacs 26.3))
[11:57:05] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:57:22] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[11:58:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:59:06] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 245 seconds)
[11:59:24] *** Joins: cheater (~Username@user/cheater)
[12:00:05] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:01:10] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[12:03:58] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Ping timeout: 250 seconds)
[12:06:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:07:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:07:57] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[12:08:31] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:12:08] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:13:05] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:13:26] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:14:30] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:15:08] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[12:15:24] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[12:15:46] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[12:17:08] <polyphem> there is https://hackage.haskell.org/package/csp-1.4.0/docs/Control-Monad-CSP.html for ConstrainedSatisfactionProblems which is "constrained logic programming" in haskell
[12:17:08] *** Joins: sm (~sm@plaintextaccounting/sm)
[12:17:15] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:17:40] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[12:18:48] *** Quits: vglfr (~vglfr@88.155.52.56) (Ping timeout: 256 seconds)
[12:19:49] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Client limit exceeded: 20000)
[12:20:41] *** Joins: vglfr (~vglfr@46.96.161.0)
[12:22:05] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[12:22:22] *** Joins: juhp (~juhp@bb121-6-118-149.singnet.com.sg)
[12:23:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:24:11] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:24:46] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[12:25:22] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:26:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:26:10] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[12:26:43] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:30:50] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:30:57] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:33:25] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[12:35:01] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[12:36:09] <Andrew> If somebody takes your code and makes it imperative, do you think that's trolling?
[12:36:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Remote host closed the connection)
[12:36:20] <Andrew> i.e. no functions, everything are IO etches
[12:36:23] *** Joins: Tisoxin (~ikosit@user/ikosit)
[12:36:36] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 245 seconds)
[12:37:46] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 250 seconds)
[12:38:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:38:39] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:40:07] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:42:03] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:46:55] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[12:47:24] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[12:47:38] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:38] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:41] *** allbery_b is now known as geekosaur
[12:50:49] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[12:51:31] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:52:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[12:52:36] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[12:53:22] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:53:45] *** Joins: max22- (~maxime@2a01cb08833598002bb1283111308265.ipv6.abo.wanadoo.fr)
[12:54:32] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[12:56:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[12:59:36] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:00:42] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:01:24] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[13:02:31] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:04:25] *** Joins: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[13:06:08] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Read error: Connection reset by peer)
[13:07:00] *** Quits: Morrow (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Read error: Connection reset by peer)
[13:07:05] *** Joins: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net)
[13:16:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[13:16:53] <Andrew> I originally think that partially applied functions are silly when I did Python
[13:18:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:19:31] *** Quits: Morrow_ (~Morrow@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 245 seconds)
[13:25:35] <[exa]> you were not wrong, they are literally silly in python.
[13:28:18] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[13:29:51] *** Joins: whatif (~user@123.180.74.74)
[13:31:07] <whatif> in scotty, when user visit '/test', then `get '/test'` will run, but I'd like to save the msg within `get '/test'' to out of it, how to do that?
[13:31:50] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:31:53] <whatif> it's like every function f run, save f's inner variable to outside, so that f can read previous result
[13:32:00] <whatif> how to archive that?
[13:32:41] <whatif> with global variable it's easy, just variable reassignment
[13:32:59] <polyphem> pass f an STM TQueue , then in f write to the queue
[13:33:47] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:33:50] <polyphem> another thread can read the q and process further
[13:34:02] *** Joins: random-8 (~kvirc@82.76.54.109)
[13:35:39] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[13:35:57] *** Parts: random-8 (~kvirc@82.76.54.109) ()
[13:36:35] *** Joins: random-jellyfish (~kvirc@user/random-jellyfish)
[13:36:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[13:39:13] <polyphem> if you only need previos call result you can also use a TMVar with swapTMVar
[13:40:34] <polyphem> outside of f you have to first create your TMVar (Maybe StoredResult)
[13:40:47] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:8c0e:5374:183d:34e2)
[13:41:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Ping timeout: 250 seconds)
[13:42:48] *** Joins: MatthiasG2 (~matthias@i6DFA01BB.versanet.de)
[13:43:13] *** Joins: xkuru (~xkuru@user/xkuru)
[13:48:26] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:b1c1:7d23:9565:94df) (Remote host closed the connection)
[13:59:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[14:01:37] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:01:50] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:05:21] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 245 seconds)
[14:17:13] *** Joins: cynomys (~cynomys@user/cynomys)
[14:17:48] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[14:19:19] <MatthiasG2> hi, my book/tutorial says that I have to use the let keyword to define a name in ghci. however, i can define names without the let keyword. is my literature outdated? do i miss something?
[14:19:54] <geekosaur> it's a little outdated, yes
[14:20:19] <geekosaur> ghci has been getting easier to use over the past few years
[14:20:42] <geekosaur> it used to act like the inside of a "do" but it's acting more like a file toplevel these days
[14:20:57] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:21:12] <geekosaur> so you can define without "let", you can use "import" instead of ":m", etc.
[14:21:46] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:22:16] *** Lord_of_Life_ is now known as Lord_of_Life
[14:23:20] <MatthiasG2> ok, thank you :)
[14:42:10] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0:48e1:be0c:b23c:dea9) (Quit: Leaving)
[15:01:18] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:08:30] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[15:09:22] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[15:10:46] *** Joins: hololeap (~hololeap@user/hololeap)
[15:17:17] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[15:18:06] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.93) (Quit: ZNC 1.8.2 - https://znc.in)
[15:19:17] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[15:22:52] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 250 seconds)
[15:23:34] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Remote host closed the connection)
[15:23:37] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 240 seconds)
[15:24:19] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[15:26:05] *** Joins: alp (~alp@user/alp)
[15:31:02] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:34:35] *** Joins: ph88 (~ph88@2a02:8109:9e00:71d0:bc3f:ae22:7b02:63e)
[15:37:04] *** Joins: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[15:38:05] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[15:38:28] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[15:51:09] *** Joins: machinedgod (~machinedg@24.105.81.50)
[15:55:07] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:55:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[15:56:26] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:57:28] *** Joins: chenqisu12 (~chenqisu1@183.217.200.249)
[15:57:46] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:58:50] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 260 seconds)
[15:59:15] *** Quits: random-jellyfish (~kvirc@user/random-jellyfish) (Ping timeout: 250 seconds)
[16:00:39] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:ed4d:fe0e:25ef:ac1f)
[16:01:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:03:41] *** Joins: __monty__ (~toonn@user/toonn)
[16:04:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:08:54] *** Joins: alp (~alp@user/alp)
[16:10:22] *** Quits: zincy (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[16:12:48] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:16:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:19:42] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (Remote host closed the connection)
[16:20:59] *** Joins: coot (~coot@213.134.190.95)
[16:27:34] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[16:27:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[16:29:17] *** Joins: RFV (~Thunderbi@170.red-88-13-189.dynamicip.rima-tde.net)
[16:29:43] *** Quits: RFV (~Thunderbi@170.red-88-13-189.dynamicip.rima-tde.net) (Client Quit)
[16:30:04] *** Quits: lionhairdino (~jacoo@121.131.39.82) (Quit: WeeChat 3.4)
[16:30:24] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:30:57] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[16:32:33] *** Joins: rusrushal13 (~rusrushal@2409:4056:e12:6583:dc44:f6d4:b489:36b1)
[16:33:54] *** Joins: DavidMilestone (~DavidMile@122.179.213.129)
[16:36:57] *** Quits: max22- (~maxime@2a01cb08833598002bb1283111308265.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:38:36] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[16:43:27] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:49:40] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[16:50:00] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:53:43] *** Quits: chenqisu12 (~chenqisu1@183.217.200.249) (Quit: Leaving)
[16:55:01] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Read error: Connection reset by peer)
[16:57:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[16:57:13] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[16:57:45] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[16:58:54] * Andrew needs to write something practical
[17:00:42] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:01:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:03:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:03:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:03:58] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:06:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:06:56] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:09:25] *** Quits: phma (~phma@host-67-44-208-219.hnremote.net) (Read error: Connection reset by peer)
[17:09:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[17:10:17] *** Joins: phma (phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f)
[17:12:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:12:29] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 250 seconds)
[17:12:35] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:14:52] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:15:18] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:16:42] *** Joins: random-jellyfish (~kvirc@82.76.54.109)
[17:16:57] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[17:17:06] *** Quits: random-jellyfish (~kvirc@82.76.54.109) (Changing host)
[17:17:06] *** Joins: random-jellyfish (~kvirc@user/random-jellyfish)
[17:17:18] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[17:18:04] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:19:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:19:37] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:19:51] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[17:20:47] *** Quits: random-jellyfish (~kvirc@user/random-jellyfish) (Client Quit)
[17:21:36] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:21:38] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:21:50] *** Quits: fluxit (~fluxit@techsmix.net) (Quit: Bye!)
[17:21:54] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:24:14] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 260 seconds)
[17:25:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[17:29:26] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[17:31:37] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:32:37] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[17:33:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:34:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:36:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:36:56] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:37:25] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:42:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[17:42:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[17:43:35] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:43:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:44:26] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5)
[17:46:18] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[17:46:35] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[17:46:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[17:47:49] *** Joins: mmhat (~mmh@55d4f42c.access.ecotel.net)
[17:53:25] *** Joins: oldsk00l (~znc@ec2-18-134-147-152.eu-west-2.compute.amazonaws.com)
[17:54:03] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:8c0e:5374:183d:34e2) (Read error: Connection reset by peer)
[17:54:48] *** Joins: coot (~coot@213.134.190.95)
[17:54:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:56:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:56:32] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 256 seconds)
[17:58:00] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:01:57] *** Quits: whatif (~user@123.180.74.74) (Ping timeout: 240 seconds)
[18:03:20] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:685d:59ed:4faf:3de1)
[18:04:00] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[18:05:03] *** Joins: deadmarshal (~deadmarsh@95.38.113.93)
[18:05:27] *** Joins: hololeap (~hololeap@user/hololeap)
[18:09:13] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[18:20:00] <Andrew> why is readFile strict?
[18:21:01] <hpc> in what way?
[18:21:07] <Andrew> Not lazy
[18:21:32] <hpc> it opens the file, but then the contents of the file are lazy IO
[18:21:48] <hpc> and then when you evaluate [] the file is closed
[18:21:52] * Andrew studies IO more
[18:22:17] <hpc> you probably don't want to deal with lazy IO if you're just starting out
[18:22:21] <geekosaur> which readFile are you talking about?
[18:23:17] <Andrew> Prelude System.IO
[18:23:21] <geekosaur> System.IO.readFile is lazy. the readFile operations on strict ByteString and strict Text are strict because they don't have a choice. the ones on lazy ByteString and lazy Text should again be lazy, but in chunks rather than characters
[18:23:34] <geekosaur> "The file is read lazily, on demand, as with getContents."
[18:23:42] *** Joins: whatif (~user@123.180.40.237)
[18:23:57] <whatif> https://hackage.haskell.org/package/scotty-login-session-0.1.0.0/candidate/docs/src/Web-Scotty-Login-Session.html#SessionConfig
[18:24:03] <hpc> i recommend you use openFile, and the various operations on Handle values
[18:24:06] <whatif> defaultSessionConfig :: SessionConfig
[18:24:08] <Andrew> Yay, thanks
[18:24:12] <hpc> in System.IO
[18:24:14] <whatif> defaultSessionConfig = SessionConfig "sessions.sqlite3" 1200 120
[18:24:29] <Andrew> I actually just wanted one that returns a string... I'm not sure what IO () strings are
[18:24:45] <whatif> Couldn't match expected type `SessionConfig' with actual type `Bool -> SessionConfig' * Probable cause: `SessionConfig' is applied to too few arguments In the expression: SessionConfig "sessions.sqlite3" 1200 86400
[18:25:06] <whatif> why this say applied too few arguments?
[18:25:19] <whatif> mySessionConfig = SessionConfig "sessions.sqlite3" 1200 86400
[18:25:44] <geekosaur> whatif, are you actually using the same version as that documentation?
[18:25:58] <geekosaur> "scotty-login-session-0.1.0.0"
[18:26:00] <hpc> (IO String) is the type of values that do stuff to produce a String
[18:26:26] <hpc> ("abc" ++ "def") IS a string, in a way that "open a file and give me its contents" isn't
[18:26:41] <whatif> geekosaur: 0.1.2.0 I'm using
[18:26:53] <hpc> like how the ls command is a formula for the files in a directory, but not a list of files in and of itself
[18:27:07] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:27:17] *** Quits: oldsk00l (~znc@ec2-18-134-147-152.eu-west-2.compute.amazonaws.com) (Ping timeout: 240 seconds)
[18:27:51] <geekosaur> then you will need to consult the documentation for that version
[18:27:52] <whatif> found it https://github.com/asg0451/scotty-login-session/blob/master/src/Web/Scotty/Login/Session.hs
[18:28:12] <Andrew> hpc: So... what's the type of e.g. `readFile "/etc/passwd"`?
[18:28:33] <Andrew> I got confused with: `The readFile function reads a file and returns the contents of the file as a string. The file is read lazily, on demand, as with getContents.`
[18:28:44] <Andrew> Can I just treat it as a string?
[18:29:12] <geekosaur> whatif, it now takes an extra Bool indicating if the session is in debug mode or not https://github.com/asg0451/scotty-login-session/blob/master/src/Web/Scotty/Login/Session.hs#L104
[18:30:43] <whatif> yes
[18:31:08] <geekosaur> Andrew, an IO String is not a String. however if you use do notation you can get a String out of it, as long as you put it back in IO when you're done
[18:31:19] <geekosaur> (you use ``pure` for that)
[18:31:24] *** Joins: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[18:31:25] * Andrew kinda gets the point
[18:31:45] <hpc> Andrew: you bring the function to the IO action, in order to use the contents of the file
[18:31:50] <Andrew> Ill just scower the internet for an example and I'd match it with the nameless theories in my head
[18:31:52] *** Joins: alp (~alp@user/alp)
[18:32:06] <hpc> say you have some isValidPassword :: (String -> Bool)
[18:32:11] <hpc> then you can use this:
[18:32:13] <hpc> :t fmap
[18:32:14] <lambdabot> Functor f => (a -> b) -> f a -> f b
[18:32:26] <hpc> a = String, b = Bool, f = IO
[18:32:41] <hpc> and fmap isValidPassword (readFile "/etc/passwd") :: IO Bool
[18:32:43] <Andrew> Oh, I get you
[18:32:52] <Andrew> Thanks!
[18:32:54] <hpc> there's lots of functions similar to fmap
[18:32:56] <hpc> :t (>>=)
[18:32:57] <lambdabot> Monad m => m a -> (a -> m b) -> m b
[18:33:01] <hpc> ^ is the big one
[18:33:23] <hpc> so for instance, there's no actual passwords in /etc/passwd anymore
[18:33:55] <Andrew> I'm just using /etc/password as a random filename example, but I get you, thanks :D
[18:33:58] *** Quits: coot (~coot@213.134.190.95) (Ping timeout: 250 seconds)
[18:33:59] <hpc> but you can do readFile "/etc/passwd" >>= \passwd -> readFile "/etc/shadow" >>= \shadow -> checkPassword passwd shadow
[18:34:13] <hpc> and sequence things that way
[18:34:33] * Andrew tries to recall what the backslash means
[18:34:37] <hpc> lambda
[18:35:16] <Andrew> ()
[18:35:21] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[18:35:56] <Andrew> Thanks :)
[18:37:11] *** Quits: mmhat (~mmh@55d4f42c.access.ecotel.net) (Ping timeout: 250 seconds)
[18:37:17] *** Quits: xff0x (~xff0x@2001:1a81:52f3:1d00:feda:8b5a:f28:424c) (Ping timeout: 240 seconds)
[18:38:31] *** Joins: xff0x (~xff0x@2001:1a81:52f3:1d00:e2c8:a45c:f0af:d33)
[18:41:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[18:43:17] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d8e:cf48:737f:ec3)
[18:45:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Ping timeout: 240 seconds)
[18:45:18] *** Joins: schuelermine (~anselmsch@user/schuelermine)
[18:50:36] *** Joins: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca)
[18:52:39] *** Quits: geranim0 (~geranim0@d-132-204-221-88.res.umontreal.ca) (Client Quit)
[18:54:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:55:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:55:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[18:57:07] *** Quits: whatif (~user@123.180.40.237) (Quit: ERC (IRC client for Emacs 26.3))
[18:57:28] *** Joins: jkaye (~jkaye@2601:281:8300:7530:780b:5ea4:97fa:3c7e)
[18:58:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[19:00:37] *** Quits: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf) (Ping timeout: 240 seconds)
[19:00:50] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[19:01:08] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[19:02:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[19:03:09] *** Quits: DavidMilestone (~DavidMile@122.179.213.129) (Quit: Client closed)
[19:06:17] *** Quits: emf_ (~emf@2620:10d:c090:400::5:29d7) (Ping timeout: 240 seconds)
[19:06:33] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[19:08:53] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::a2bf)
[19:09:08] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[19:12:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:12:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:12:13] *** Joins: wroathe (~wroathe@user/wroathe)
[19:12:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:12:27] *** Quits: schuelermine (~anselmsch@user/schuelermine) (Quit: WeeChat 3.3)
[19:12:52] *** Joins: schuelermine (~anselmsch@user/schuelermine)
[19:13:23] *** Quits: rusrushal13 (~rusrushal@2409:4056:e12:6583:dc44:f6d4:b489:36b1) (Ping timeout: 256 seconds)
[19:13:42] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[19:13:54] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[19:20:09] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[19:21:43] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:21:57] *** Joins: notzmv (~zmv@user/notzmv)
[19:21:59] *** Joins: ralu5 (~ralu@static.211.245.203.116.clients.your-server.de)
[19:23:02] *** Joins: max22- (~maxime@2a01cb0883359800a797759c8651134a.ipv6.abo.wanadoo.fr)
[19:23:26] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[19:23:26] *** ralu5 is now known as ralu
[19:23:37] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[19:23:47] *** Quits: bcoppens (~bartcopp@vpn2.bartcoppens.be) (Ping timeout: 250 seconds)
[19:23:54] *** Joins: bcoppens (~bartcopp@vpn2.bartcoppens.be)
[19:23:59] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (Ping timeout: 268 seconds)
[19:24:07] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[19:24:34] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[19:24:36] *** Quits: hexagoxel (~hexagoxel@hexagoxel.de) (Ping timeout: 268 seconds)
[19:24:53] *** Joins: hexagoxel (~hexagoxel@hexagoxel.de)
[19:25:59] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:26:56] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[19:29:16] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[19:30:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:31:17] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Ping timeout: 240 seconds)
[19:32:28] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:45:01] *** Quits: polyphem (~rod@2a02:810d:840:8754:cd07:81a6:97c4:d71f) (Ping timeout: 240 seconds)
[19:45:45] *** Joins: polyphem (~rod@2a02:810d:840:8754:a057:eb16:35f3:4c79)
[19:48:08] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:49:47] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[19:51:25] *** Quits: EvanR (~EvanR@user/evanr) (Remote host closed the connection)
[19:51:44] *** Joins: EvanR (~EvanR@user/evanr)
[19:53:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:59:39] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[19:59:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[20:00:06] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[20:01:13] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[20:02:52] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:04:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[20:04:56] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 252 seconds)
[20:05:30] *** Quits: mbuf (~Shakthi@223.190.212.194) (Quit: Leaving)
[20:05:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Ping timeout: 250 seconds)
[20:06:04] *** Joins: mmhat (~mmh@55d4f2c4.access.ecotel.net)
[20:07:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[20:10:21] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[20:10:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[20:11:49] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[20:12:59] *** Quits: SwarmCollective (~joseph@2603-6011-bc02-b600-b30f-c0b6-681c-4c69.res6.spectrum.com) (Remote host closed the connection)
[20:13:22] *** Joins: SwarmCollective (~joseph@2603-6011-bc02-b600-9258-c9a6-2983-1208.res6.spectrum.com)
[20:15:02] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:15:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[20:17:49] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:23:23] *** Joins: thyriaen (~thyriaen@dynamic-077-013-197-086.77.13.pool.telefonica.de)
[20:25:54] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[20:26:19] <thyriaen> i have written a little tool : https://paste.tomsmeding.com/4oDIQ4ud i would like to filter out some a specific subset of my powerset given a given sum, but the way i wrote it it just gives me the sum, but i want to display the subset and not the sum
[20:27:37] *** Quits: schuelermine (~anselmsch@user/schuelermine) (Quit: WeeChat 3.3)
[20:28:24] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:685d:59ed:4faf:3de1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:54] *** Joins: jao (~jao@68.235.43.84)
[20:34:25] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:685d:59ed:4faf:3de1)
[20:35:09] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[20:35:29] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[20:39:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Ping timeout: 250 seconds)
[20:40:10] <RMSBach> thyriaen: you mean you want result of `run` to be the set of subsets of the powerset of `dat` that satisfy your predicate from `filli` on their sum?
[20:40:52] <RMSBach> thyriaen: Just get rid of mapper, and stuff that work into the predicate in `filli`
[20:41:57] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:43:00] <dminuoso> thyriaen: Hi, you probably want to use `sum` rather than your own `summer
[20:43:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:43:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:43:08] *** Joins: wroathe (~wroathe@user/wroathe)
[20:43:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:43:28] <dminuoso> Or alternatively, use `foldl'` rather than `fold`
[20:44:21] <dminuoso> foldl on lists of non-trivial size will rapidly consume stack space
[20:44:46] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[20:46:39] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[20:48:03] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[20:48:37] *** Joins: lavaman (~lavaman@98.38.249.169)
[20:48:43] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 250 seconds)
[20:49:04] <RMSBach> thyriaen: https://bpa.st/IQOQ
[20:49:22] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[20:50:03] <RMSBach> Sorry I replaced `run` with an effectful `main`, so I could run it with runhaskell
[20:53:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[20:53:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:53:38] *** Quits: coot_ (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot_)
[20:54:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[20:57:44] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[20:57:47] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:58:30] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[21:00:30] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[21:02:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:02:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:02:54] *** Joins: wroathe (~wroathe@user/wroathe)
[21:03:24] *** Joins: fef (~thedawn@user/thedawn)
[21:04:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[21:04:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[21:04:54] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[21:10:33] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:10:54] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[21:12:37] <thyriaen> RMSBach, i will look at it and have a little think
[21:14:09] <thyriaen> RMSBach, yes it does what i want, thank you
[21:14:31] <RMSBach> thyriaen: no problem
[21:14:38] <thyriaen> let me try if i understand
[21:15:01] <thyriaen> ((== 271.36) . sumer) is a new function which first sums and then compares the values
[21:15:20] <RMSBach> Yep
[21:15:29] <thyriaen> so it is [double] -> Boolean
[21:15:48] <RMSBach> Yes
[21:15:49] <thyriaen> ah and then it filters
[21:15:53] <thyriaen> yeath that makes sense
[21:16:20] <thyriaen> if i would first define that function as a standalone one
[21:16:28] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[21:16:30] <thyriaen> it would be
[21:17:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:17:48] <segfaultfizzbuzz> so i found this paragraph recently, which i know more than something about:
[21:18:18] <segfaultfizzbuzz> https://github.com/conal/talk-2014-bayhac-denotational-design#why-continuous-time-matters in this link, the paragraph beginning, "Continuous time allows integration and differentiation to be expressed directly and meaningfully. ..."
[21:18:32] <segfaultfizzbuzz> this is part of a defense of laziness, which is something i don't really know about
[21:18:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:18:56] <segfaultfizzbuzz> i feel fairly confident, unless i am missing something, that this paragraph makes a number of false claims about integration
[21:19:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:20:51] <segfaultfizzbuzz> only perhaps in an introductory undergraduate class or in a situation where accuracy was very unimportant would someone use an euler integration
[21:22:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[21:23:01] <thyriaen> dminuoso, but i use foldl not fold
[21:23:30] <RMSBach> segfaultfizzbuzz: I think they just included that as the simplest example.  "The easiest path for an implementor is to use Euler integration..."
[21:24:53] <segfaultfizzbuzz> i don't think the author means like arbitrary precision arithmetic here, he's talking about doubles
[21:25:41] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[21:25:54] <segfaultfizzbuzz> and using laziness doesn't mean that you are using runge-kutta, so i really don't understand the point here
[21:26:07] <dminuoso> thyriaen: Sorry. I meant foldl' vs foldl
[21:26:15] <dminuoso> thyriaen: `foldl` is almost always wrong.
[21:26:28] <dminuoso> It's a strange accident that the one you likely want has a backtick attached to it.
[21:26:48] <dminuoso> And the one without is almost certainly always wrong. :p
[21:26:54] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[21:27:08] <dminuoso> Its particularly confusing because in foldr its slightly different
[21:27:38] <dminuoso> (i.e. foldlr' is almost certainly wrong, foldr is what you likely want)
[21:28:13] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:29:10] *** Joins: thyriaen_ (~thyriaen@dynamic-077-191-211-108.77.191.pool.telefonica.de)
[21:29:11] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:29:36] <thyriaen_> dminuoso, i don't understand :p 
[21:29:55] <dminuoso> thyriaen_: Simply said: dont use foldl, use foldl'
[21:30:03] <thyriaen_> what is the difference ?
[21:30:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:30:29] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:30:39] <dminuoso> % foldl (+) 0 [0..1000000000]
[21:30:40] <yahb> dminuoso: *** Exception: heap overflow
[21:30:41] <dminuoso> % foldl' (+) 0 [0..1000000000]
[21:30:46] <yahb> dminuoso: [Timed out]
[21:30:50] <dminuoso> % foldl' (+) 0 [0..1000000000]
[21:30:56] <yahb> dminuoso: [Timed out]
[21:31:01] <thyriaen_> my ghci does not know foldl'
[21:31:03] <dminuoso> Okay, this is probably a slightly race considition
[21:31:09] <dminuoso> thyriaen_: Import it from Data.Foldable
[21:31:12] *** Joins: econo (uid147250@user/econo)
[21:31:18] <dminuoso> % foldl' (+) 0 [0..100000000]
[21:31:21] <yahb> dminuoso: 5000000050000000
[21:31:22] <dminuoso> % foldl (+) 0 [0..100000000]
[21:31:23] <yahb> dminuoso: *** Exception: heap overflow
[21:31:25] <dminuoso> thyriaen_: ^- there.
[21:31:34] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Ping timeout: 260 seconds)
[21:31:36] *** Quits: thyriaen (~thyriaen@dynamic-077-013-197-086.77.13.pool.telefonica.de) (Ping timeout: 245 seconds)
[21:31:37] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:31:51] <thyriaen_> can i just use foldr because i use + in my example ?
[21:32:20] <dminuoso> thyriaen_: foldr in this usage can overflow your stack.
[21:32:23] <xerox> thyriaen_: import Data.List
[21:32:35] <dminuoso> thyriaen_: (or your heap)
[21:32:46] <dminuoso> Depends a bit on settings I guess?
[21:33:16] <dminuoso> thyriaen_: Broadly the problem is, with foldr you turn this list into something like this: (1 + (2 + (3 + (4 + ...)))
[21:33:38] <dsal> But why not `sum`?
[21:33:53] <dminuoso> But that's particularly bad, because under the bood the STG machine will have to maintain a stack of these arguments 1, 2, 3, 4, ... until it sees the final sum
[21:34:00] <dminuoso> And similarly, with foldl:
[21:34:37] <thyriaen_> dsal, good idea :p
[21:34:43] <dminuoso> You get ....(((n + n-1) + n-2) + n-3) + n-4 ...
[21:34:50] <dminuoso> Which means you need all these things represented on the heap
[21:34:53] <dminuoso> At the same time.
[21:35:03] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:35:28] <dsal> It's good to know `foldr` vs. `foldl` (and maybe `fold`) and when strictness is important, but also nice to know when you don't need to write something because it's common.
[21:35:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[21:35:29] <dminuoso> thyriaen_: foldl' behaves like a proper loop that is *strict*, so it instantly calcualtes the result and doesnt keep the thunk around for later.
[21:36:01] <thyriaen_> does that mean foldl is less lazy ?
[21:36:05] <dminuoso> No, foldl is more lazy.
[21:36:11] <thyriaen_> yea
[21:36:11] <dminuoso> foldl' is strict in the accumulator
[21:36:13] <thyriaen_> thats what i ment
[21:36:18] <thyriaen_> foldl' being less lazy
[21:36:25] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:36:28] <dminuoso> well, lets not say "less lazy" and say what it is exactly
[21:36:31] <dminuoso> its strict in the accumulator.
[21:36:38] <thyriaen_> what does that mean ?
[21:36:48] <dminuoso> % :t foldl
[21:36:49] <yahb> dminuoso: Foldable t => (b -> a -> b) -> b -> t a -> b
[21:36:58] <thyriaen_> what does it mean to be strict ?
[21:37:18] <dminuoso> it means not-lazy
[21:37:25] <thyriaen_> ok
[21:37:33] <dsal> Do you understand what a thunk is?
[21:37:35] <dminuoso> operationally it means, it doesnt create a thunk to represent it.
[21:37:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[21:37:43] <dminuoso> it rather immediately calculates the result instead
[21:37:46] <thyriaen_> dsal, no
[21:37:51] <thyriaen_> dminuoso, i see, thanks
[21:37:55] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[21:37:57] <dminuoso> thyriaen_: Are you familiar with traditional programming langauges?
[21:37:59] <dminuoso> say javascript?
[21:38:03] <thyriaen_> dminuoso, yes
[21:38:25] <dminuoso> Okay, so you can imagine a thunk to be something like `() => some_computation`, a kind of computation you can compute at will later.
[21:38:42] <thyriaen_> yes, i understand
[21:38:44] <dminuoso> But its deferred in the sense that you have to explicitly demand the result of its computation
[21:38:52] <dminuoso> We call this a thunk
[21:38:57] <thyriaen_> okay
[21:39:10] <dsal> Think     `f (1 + 2)`    in a strict language, that calls  `f` with `3`.  In a lazy language, that calls `f` with a thunk of `1 + 2` which may eventually resolve to `3`.  But it also may not.
[21:39:26] *** Quits: jkaye (~jkaye@2601:281:8300:7530:780b:5ea4:97fa:3c7e) (Ping timeout: 250 seconds)
[21:39:40] <thyriaen_> so when i lay in the bed all day and don't work at all but i know what i could do to work i am basically a thunk
[21:39:57] <dsal> Well, no.  The thunk is your plan of what to do.
[21:39:57] <dminuoso> One could say that, yes.
[21:40:10] <thyriaen_> okay :p thanks 
[21:40:14] <dsal> Laziness means you don't do the thing until someone calls you and asks you for it.
[21:40:26] <thyriaen_> dsal, sounds like me
[21:40:26] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[21:40:38] <dminuoso> thyriaen_: We have no direct way of specifying thunks, but operationall you can imagine that most expressions you write become a thunk
[21:40:49] <thyriaen_> yes i understand now
[21:40:50] <thyriaen_> thank you
[21:40:52] <dminuoso> and we say a thunk is *forced* is you demand its result
[21:40:59] <dminuoso> if you demand its result
[21:41:11] <thyriaen_> i love haskell so much
[21:41:15] <dminuoso> So these thunks represent "lazy computations", by demand their result, it starts computing them
[21:41:22] <dminuoso> And even more:
[21:42:00] <dminuoso> once a thunk is computed, the thunk is sort of replaced with the resulting value (this is strictly speaking a lie, but if you want to learn the exact details there's a great paper to read)
[21:42:05] <dsal> A typical value might be in a box that either a value of type `T` or a plan to resolve to a value of type `T` and you don't necessarily know the difference because it doesn't matter.  You can demand that it's not a thunk in particular locations.  That's what `foldl'` does.
[21:42:08] <dsal> @src foldl'
[21:42:08] <lambdabot> foldl' f a []     = a
[21:42:09] <lambdabot> foldl' f a (x:xs) = let a' = f a x in a' `seq` foldl' f a' xs
[21:43:00] <dminuoso> This lets you *share* the result across two references. Say you write `let a = <expensive expression> in (a, a)`, and you *force* the entire tuple, then `a` first becomes a thunk, and its referenced twice. If you access the first element of the tuple, the thunk of a is forced, and if you then access the second element, it will reference the already computed result
[21:43:05] <dminuoso> thyriaen_: ^- does this make any sense to you?
[21:43:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[21:43:44] <thyriaen_> yes
[21:43:45] <dminuoso> Ah wait. a slight miswording: `a` is already created as a thunk by means of the compiler, it doesnt happen on the spot.
[21:44:06] <thyriaen_> h0ly shit
[21:44:08] <thyriaen_> it is genious
[21:44:24] <dminuoso> Now this would all be in the way, because sometimes representing something as a thunk is not helpful
[21:44:42] <dminuoso> because that thunk needs a representation, it means we need to allocate that representation of the thunk (and its entire computation) on memory
[21:44:55] <dminuoso> So if we have:
[21:45:08] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:9145:1668:6954:3d71)
[21:45:12] <dminuoso> (((10 + 9) + 8) + 7) + ...
[21:45:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:45:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:45:13] *** Joins: wroathe (~wroathe@user/wroathe)
[21:45:30] <dminuoso> Then we this creates a lot of thunks, beacuse each sub-expression is kept lazy
[21:46:06] *** Joins: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it)
[21:46:40] <thyriaen_> yes
[21:46:45] <thyriaen_> i understand
[21:46:51] <dminuoso> So here comes the trick
[21:46:53] <dminuoso> say we write a function
[21:47:03] <dminuoso> f x = (x, x)
[21:47:26] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[21:47:28] <dminuoso> We can give an additional annotation to that function that says, when you enter this function, automatically *force* (evaluate its thunk) an argument
[21:47:31] <dminuoso> This looks like this:
[21:47:36] <dminuoso> f (!x) = (x, x)
[21:47:43] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:47:46] <dminuoso> We say `f is strict in its argument`
[21:48:03] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:48:11] <dminuoso> Which means, upon entering this function, at the same time, the argument will *first* be forced.
[21:48:25] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[21:49:14] <dminuoso> This is particularly helpful for some recursive functions, as it prevents an accumulation of thunks, as every time you'd enter the recursive step (and pass along some expression into itself), it could immediately force that argument
[21:50:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:52:13] <dminuoso> % myFoldl' f a [] = a; myFoldl' f !a (x:xs) = myFoldl' f (f a x) x
[21:52:14] <yahb> dminuoso: ; <interactive>:5:1: error:; * Couldn't match type `t1' with `[t1]'; Expected: (t -> t1 -> t) -> t -> t1 -> t; Actual: (t -> t1 -> t) -> t -> [t1] -> t; * Relevant bindings include myFoldl' :: (t -> t1 -> t) -> t -> t1 -> t (bound at <interactive>:5:1)
[21:52:17] <dminuoso> % myFoldl' f a [] = a; myFoldl' f !a (x:xs) = myFoldl' f (f a x) xs
[21:52:17] <yahb> dminuoso: 
[21:52:37] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:52:38] <dminuoso> % myFoldl' (+) 0 [0..100000000]
[21:52:43] <yahb> dminuoso: [Timed out]
[21:52:57] <dminuoso> Ah well, this is a bit racy. You can try this out in your GHCi if you like
[21:53:14] <dminuoso> thyriaen_: ^- does this make sense now?
[21:53:32] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:59e3:db49:aa0a:46e5) (Quit: Leaving)
[21:54:06] *** Quits: cosimone` (~user@93-34-132-136.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[21:54:26] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:54:52] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:55:14] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:55:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[21:55:26] <dminuoso> Interesting to note, that if you have a function that pattern matches on its argument, its automatically strict in that argument as well (since to do the pattern matching, you have to evaluate the argument enough to see the constructor)
[21:55:33] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:55:52] <dminuoso> i.e. `f True = ...; f False = ...` is also strict in its argument. Therefore a ! (pronounced bang) would do nothing here.
[21:56:04] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[21:56:09] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:58:30] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[21:59:31] <energizer> i see there are some packages for functions with keyword arguments. how popular are those?
[21:59:52] <dsal> energizer: What do you mean?
[21:59:59] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[22:00:07] <monochrom> I've never used one. I didn't even know someone made one.
[22:00:43] <energizer> https://hackage.haskell.org/package/named
[22:01:15] <monochrom> I didn't even know I would need a whole bloody library if I wanted keyword arguments.  I thought I could just define a record-syntax type and THE END.
[22:01:36] <dsal> Oh neat.  This is someone who really liked smalltalk, but wanted to write haskell.
[22:03:13] <energizer> clojure and elisp support named parameters
[22:05:41] <dminuoso> I like that it doesnt introduce the kmettiverse to dependencies.
[22:05:47] <dminuoso> It's just base and nothing else.
[22:08:20] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:08:36] <monochrom> I think now I can speak freely about my objections to the recent lazy evaluation conversation.
[22:09:01] *** Joins: zebrag (~chris@user/zebrag)
[22:09:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:09:39] <monochrom> "less lazy" is actually truer than "not lazy" by the time you consider foldl' (\(x,y) -> (undefined, undefined)) which is less lazy than foldl but still retains some laziness because foldl' is only to the point of WHNF.
[22:10:35] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Quit: WeeChat 3.3)
[22:10:35] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:10:40] *** Joins: alp (~alp@user/alp)
[22:11:09] <monochrom> I don't think we always need to introduce the word "thunk". If people already knows "expression", we can re-use it safely.  Add "unevaluated" if the emphasis makes you feel better.
[22:11:42] <monochrom> A thunk is a specific data structure that represents an expression.  We don't always have to bring up the actual data structure.
[22:11:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:12:33] *** Joins: argento (~argent0@168-227-97-34.ptr.westnet.com.ar)
[22:12:39] <monochrom> Behind this is the widespread false dichotomy between talking at the STG level just so as to talk about lazy evaluation and not talking about lazy evaluation at all. NO.
[22:13:20] <monochrom> See for example John Launchbury's A Natural Semantics for Lazy Evaluation for how to talk about lazy evaluation at a less lower level.
[22:14:34] <monochrom> And I will leave how "not lazy" and "strict" are still different for another day. (Yes Hughes, Wadler, SPJ speak like that. Yes that's right I'm saying they were wrong.)
[22:18:06] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: nomeata (~nomeata@2001:470:69fc:105::1:5ed4) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: codygman[m] (~codygman@2001:470:69fc:105::b4ba) (Quit: Bridge terminating on SIGTERM)
[22:18:07] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: alex[m]123456 (~alexchete@2001:470:69fc:105::1:1001) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Quit: Bridge terminating on SIGTERM)
[22:18:08] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[22:18:11] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Quit: Bridge terminating on SIGTERM)
[22:18:12] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Bridge terminating on SIGTERM)
[22:18:14] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[22:18:16] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[22:18:17] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Bridge terminating on SIGTERM)
[22:18:43] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[22:18:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:19:19] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[22:20:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:20:54] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[22:21:25] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[22:21:55] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[22:22:31] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:ed4d:fe0e:25ef:ac1f) (Ping timeout: 250 seconds)
[22:25:08] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Ping timeout: 256 seconds)
[22:27:40] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:29:26] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[22:29:26] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[22:29:26] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[22:29:26] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[22:29:26] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[22:29:26] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[22:29:26] *** Joins: kadoban (~kadoban@user/kadoban)
[22:29:26] *** Joins: moats (~oats@user/oats)
[22:29:26] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[22:29:26] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[22:29:26] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[22:29:26] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[22:29:26] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[22:29:26] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[22:29:26] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[22:29:26] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[22:29:26] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[22:29:26] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[22:29:26] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[22:29:26] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[22:29:26] *** Joins: sm (~sm@plaintextaccounting/sm)
[22:29:27] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[22:29:27] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[22:29:27] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[22:29:27] *** Joins: Deide (~deide@user/deide)
[22:29:27] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[22:29:27] *** Joins: psydroid (~psydroid@user/psydroid)
[22:29:27] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[22:29:27] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[22:29:27] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[22:29:27] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[22:29:27] *** Joins: siraben (~siraben@user/siraben)
[22:29:27] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[22:29:27] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[22:29:27] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[22:29:27] *** Joins: Tisoxin (~ikosit@user/ikosit)
[22:29:27] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[22:29:27] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[22:29:27] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[22:29:27] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[22:29:27] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[22:29:27] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[22:29:27] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[22:29:27] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[22:29:27] *** Joins: jinsun_ (~jinsun@user/jinsun)
[22:29:27] *** Joins: prrxddq[m] (~prrxddqma@2001:470:69fc:105::1:4f72)
[22:29:27] *** Joins: Heffalump[m] (~hsenagmat@2001:470:69fc:105::e11)
[22:29:27] *** Joins: joaquinmg[m] (~joaquinmg@2001:470:69fc:105::1:67d2)
[22:29:28] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[22:29:28] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[22:29:28] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[22:29:28] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[22:29:28] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[22:29:28] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[22:29:28] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[22:29:28] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[22:29:28] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[22:29:28] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[22:29:28] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[22:29:28] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[22:29:28] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[22:29:29] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[22:29:35] *** Joins: alex[m]1234567 (~alexchete@2001:470:69fc:105::1:1001)
[22:29:38] *** Joins: jchia[m] (~jchiamatr@2001:470:69fc:105::c50b)
[22:29:38] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[22:29:38] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[22:29:38] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[22:29:38] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[22:29:38] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[22:29:39] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[22:29:39] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[22:29:39] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[22:29:39] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[22:29:39] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[22:29:39] *** Joins: Morrow[m] (~morrowmma@2001:470:69fc:105::1d0)
[22:29:40] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[22:29:40] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[22:29:40] *** Joins: eoiles[m] (~eoilesmat@2001:470:69fc:105::1:6164)
[22:29:40] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[22:29:40] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[22:29:40] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[22:29:40] *** Joins: yehoshuapw (~yehoshuap@2001:470:69fc:105::a5f)
[22:29:40] *** Joins: Nate[m] (~m52957mat@2001:470:69fc:105::1:591a)
[22:29:40] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[22:29:40] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[22:29:40] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[22:29:40] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[22:29:41] *** Joins: nomeata (~nomeata@2001:470:69fc:105::1:5ed4)
[22:29:42] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[22:29:42] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[22:29:42] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[22:29:42] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[22:29:42] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[22:29:42] *** Joins: codygman[m] (~codygman@2001:470:69fc:105::b4ba)
[22:29:42] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[22:29:43] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[22:30:39] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:7d8e:cf48:737f:ec3) (Read error: Connection reset by peer)
[22:31:11] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:31:23] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:32:44] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:50b5:b57f:7251:ce23)
[22:34:18] *** Quits: argento (~argent0@168-227-97-34.ptr.westnet.com.ar) (Quit: leaving)
[22:35:16] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[22:35:51] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:36:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[22:39:22] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[22:40:26] *** Quits: deadmarshal (~deadmarsh@95.38.113.93) (Ping timeout: 256 seconds)
[22:40:55] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:41:28] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[22:42:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:44:07] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[22:44:41] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[22:45:57] *** Quits: Topik[m] (~topikmatr@2001:470:69fc:105::a082) (Quit: Client limit exceeded: 20000)
[22:46:38] *** Quits: siraben (~siraben@user/siraben) (Quit: Client limit exceeded: 20000)
[22:46:38] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:46:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Client limit exceeded: 20000)
[22:47:03] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[22:47:04] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Client limit exceeded: 20000)
[22:47:04] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Client limit exceeded: 20000)
[22:47:05] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Quit: Client limit exceeded: 20000)
[22:47:05] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Quit: Client limit exceeded: 20000)
[22:47:12] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Client limit exceeded: 20000)
[22:47:15] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Client limit exceeded: 20000)
[22:47:15] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[22:47:16] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Client limit exceeded: 20000)
[22:47:17] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Client limit exceeded: 20000)
[22:47:18] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Client limit exceeded: 20000)
[22:47:21] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Client limit exceeded: 20000)
[22:47:35] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[22:47:48] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Client limit exceeded: 20000)
[22:48:06] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:48:10] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Client limit exceeded: 20000)
[22:48:11] *** Joins: klf (~klf@66.220.205.98)
[22:48:12] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Client limit exceeded: 20000)
[22:48:16] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Client limit exceeded: 20000)
[22:48:16] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Client limit exceeded: 20000)
[22:48:23] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Client limit exceeded: 20000)
[22:48:58] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Client limit exceeded: 20000)
[22:49:10] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Client limit exceeded: 20000)
[22:49:37] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Quit: Client limit exceeded: 20000)
[22:49:43] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Quit: free())
[22:49:44] *** Quits: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32) (Quit: Client limit exceeded: 20000)
[22:49:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:49:57] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Client limit exceeded: 20000)
[22:50:02] *** Quits: Deide (~deide@user/deide) (Quit: Client limit exceeded: 20000)
[22:50:17] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Client limit exceeded: 20000)
[22:50:31] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Client limit exceeded: 20000)
[22:51:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[22:53:09] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Client limit exceeded: 20000)
[22:53:11] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Client limit exceeded: 20000)
[22:53:15] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Client limit exceeded: 20000)
[22:53:16] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Client limit exceeded: 20000)
[22:53:20] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Quit: Client limit exceeded: 20000)
[22:53:32] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Client limit exceeded: 20000)
[22:53:33] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Client limit exceeded: 20000)
[22:54:27] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:55:11] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Client limit exceeded: 20000)
[22:55:16] *** Quits: AkechiShiro (~licht@user/akechishiro) (Ping timeout: 250 seconds)
[22:55:17] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Client limit exceeded: 20000)
[22:55:34] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Client limit exceeded: 20000)
[22:55:39] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Client limit exceeded: 20000)
[22:55:40] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Client limit exceeded: 20000)
[22:55:44] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Client limit exceeded: 20000)
[22:55:50] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[22:56:00] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Quit: Client limit exceeded: 20000)
[22:56:02] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Client limit exceeded: 20000)
[22:56:04] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Client limit exceeded: 20000)
[22:56:05] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Quit: Client limit exceeded: 20000)
[22:56:06] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Client limit exceeded: 20000)
[22:57:41] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[22:58:42] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[22:58:56] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Client limit exceeded: 20000)
[22:59:02] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Client limit exceeded: 20000)
[22:59:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[23:00:32] *** Joins: sm (~sm@plaintextaccounting/sm)
[23:00:33] <sm> whatif: try cabal repl
[23:01:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[23:01:16] <sm> or cabal exec -- runghc a.hs
[23:01:54] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Client limit exceeded: 20000)
[23:02:56] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[23:03:06] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Ping timeout: 256 seconds)
[23:04:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Remote host closed the connection)
[23:07:08] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[23:07:14] <Guillaum[m]> Is there a way to tell cabal to build a plan will minimizing download/build. e.g. if all the needed packages are already available in my package database, use them.
[23:12:06] <maerwald> hmm, I don't think so
[23:12:12] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[23:12:12] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[23:12:12] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[23:12:12] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[23:12:27] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[23:12:41] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[23:12:41] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[23:12:41] *** Joins: kadoban (~kadoban@user/kadoban)
[23:12:41] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[23:12:41] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[23:12:41] *** Joins: Topik[m] (~topikmatr@2001:470:69fc:105::a082)
[23:12:41] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[23:12:42] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[23:12:42] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[23:12:42] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[23:12:42] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[23:12:42] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[23:12:56] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[23:12:56] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[23:13:08] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[23:13:08] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[23:13:08] *** Joins: Deide (~deide@user/deide)
[23:13:08] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[23:13:08] *** Joins: psydroid (~psydroid@user/psydroid)
[23:13:08] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[23:13:22] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[23:13:22] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[23:13:22] *** Joins: siraben (~siraben@user/siraben)
[23:13:23] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[23:13:23] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[23:13:23] *** Joins: Tisoxin (~ikosit@user/ikosit)
[23:13:23] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[23:13:23] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[23:13:23] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[23:13:23] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[23:13:23] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[23:13:23] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[23:13:23] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[23:13:24] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[23:13:24] *** Joins: jinsun_ (~jinsun@user/jinsun)
[23:13:24] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[23:13:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[23:13:37] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[23:13:37] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[23:13:56] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[23:13:56] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[23:13:56] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[23:14:08] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[23:14:08] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[23:14:22] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[23:14:35] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[23:15:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[23:15:13] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[23:16:02] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[23:16:18] <maerwald> that would require the solver to know about what you have downloaded etc... I don't think it has that information sclv?
[23:17:09] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[23:18:07] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[23:21:19] *** Joins: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210)
[23:21:28] <sm> For reporting program-terminating error messages in IO, I'd like to switch from fail to error, because fail prints "user error" and extra parentheses. Do you see any downside ? Are they equivalent ?
[23:21:29] <sm> g'day all
[23:21:34] <sm> (I dug through the source but couldn't quite tell)
[23:21:38] <sm> maybe they're different kinds of exceptions, and fail's is easier to catch. But that sounds ok.
[23:22:14] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[23:22:33] *** Quits: Null_A (~null_a@2601:645:8700:2290:3470:fb13:1e9a:e210) (Read error: Connection reset by peer)
[23:23:31] *** Joins: FreedomConvoy (~FreedomCo@bras-base-lchtpq0202w-grc-14-174-91-187-149.dsl.bell.ca)
[23:23:47] <c_wraith> error is a bottom, but fail is different.  That can affect the way GHC treats the error condition.
[23:24:22] <c_wraith> If you wanted control over the error type as well as its timing, you should use throwIO along with creating an exception of your desired type
[23:24:33] <hololeap> Warning: -rtsopts and -with-rtsopts have no effect with -shared.  -- why is this?
[23:25:07] <hololeap> is it because the RTS is no longer bundled with the executable when you use -shared ?
[23:27:44] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[23:27:45] *** Quits: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[23:28:30] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[23:32:26] <hololeap> I think I found the right section of the GHC docs
[23:32:49] *** Joins: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca)
[23:33:02] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Quit: free())
[23:33:11] <sm> c_wraith: thanks. I'm not crystal clear but I think in my situation they are effectively equivalent
[23:33:12] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:33:58] <sm> throwIO for better control, that makes sense.
[23:34:21] *** Quits: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca) (Remote host closed the connection)
[23:34:42] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[23:36:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca)
[23:37:59] <hololeap> I'm not finding this in the cabal docs so far. when I run `cabal configure --ghc-options="..."`, it adds `ghc-options:` inside two stanzas: `package *` and `program-options`
[23:38:14] <c_wraith> sm: throwIO creates an IO action that throws the exception when it's executed. error creates an expression that throws the exception when it's evaluated. The former is less up to the whims of the optimizer, for instance. IO actions are executed serially
[23:38:22] <hololeap> what is this program-options stanza and how does it differ from the other one?
[23:38:57] *** Joins: coot (~coot@213.134.190.95)
[23:39:29] *** Joins: cynomys (~cynomys@user/cynomys)
[23:40:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca) (Ping timeout: 250 seconds)
[23:43:37] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 240 seconds)
[23:44:24] <sm> nod
[23:45:37] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:47:16] *** Quits: FreedomConvoy (~FreedomCo@bras-base-lchtpq0202w-grc-14-174-91-187-149.dsl.bell.ca) (K-Lined)
[23:49:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:53:05] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 250 seconds)
[23:59:16] *** Joins: vysn (~vysn@user/vysn)
