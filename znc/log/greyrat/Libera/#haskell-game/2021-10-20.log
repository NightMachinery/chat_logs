[01:01:45] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[01:05:51] <sm> f-a: latest stackage nightly contains latest a-t-g, and I confirm the new displaySize exception does seem easier to catch - I no longer needed the return $!
[01:07:32] <sm> I have to ask, does it need to throw an exception at all ?
[01:08:44] <sm> displaySize :: IO (Maybe (Width, Height)) ?
[01:12:44] <sm> as for playGame, if terminal is smaller than the requested size is it better throw an exception, or run with the app partially offscreen ?
[01:15:04] <sm> currently if you start with a big enough terminal then shrink the window, it keeps running. But lines are wrapped - perhaps clipping would be more useful there too
[01:17:38] <sm> currently there's two ways for an a-t-g app not to start (non-interactive terminal, too-small terminal) and I wouldn't mind forcing it to run in both of those circumstances, but currently I can't
[01:20:15] <f-a> how could it start in a non interactive term?
[01:21:33] <f-a> I am unsure about Â«let us start in small screenÂ», the player should be warned screen is too small? What if he doesnâ€™t and think the game is broken?
[01:22:03] <f-a> Â«pixelÂ» games do it but it is easier to zoom out in such games :P
[01:22:09] <f-a> let me see what nethack does
[01:22:33] <f-a> wow it gracefully handles it
[01:22:44] <f-a> scrolls the screen when you change roomâ€¦
[01:25:54] <sm> f-a: I'm thinking of running it in a loop with entr. In that case I'm in a regular terminal and it could display, there'd just be no input. Isn't it possible to output ansi codes in that case ?
[01:26:14] <f-a> you cannot use entr
[01:26:28] <f-a> if input is enabled
[01:26:29] <sm> or, piping output in to a file, which I could cat for playback.. 
[01:26:58] <f-a> I could have a Â«no input modeÂ» and that would work with entrr I suspect
[01:27:17] <sm> yes, if it can't grab stdin just carry on ?
[01:27:44] <f-a> what error does pop now?
[01:27:48] <f-a> (sorry never tried this)
[01:28:47] <sm> hmm wait a minute, it seems to run now
[01:28:59] <f-a> lol
[01:31:17] <sm> with pre-1.3.0.0 too. Can't reproduce that one right now, disregard!
[01:32:22] <f-a> I would like an `entrr` that can somehow run interactive programs!
[01:32:57] <f-a> it seems useful, so I wonder why it is not there
[01:33:11] <f-a> *entr
[01:34:50] <sm> entr -r seems like it should work, but doesn't for me, can't tell why yet
[01:34:55] <f-a> I can
[01:35:09] <sm> it runs once, but doesn't restart then files change
[01:35:12] <sm> when
[01:35:26] <sm> brb
[01:36:06] <f-a> https://eradman.com/entrproject/ check Â«Other implementation detailsÂ»
[01:36:31] <f-a> annoyingly, this is not present in the man 
[01:40:16] <f-a> re: minimum screen size
[01:40:18] <f-a> f@mkiii:~/spool/advgame/invalicabile-nebbia$ omega-rpg
[01:40:18] <f-a> Minimum Screen Size: 24 Lines by 80 Columns.f@mkiii:~/spool/advgame/invalicabile-nebbia$
[02:22:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:27:26] <ManofLetters[m]> how do you check if a handle is a terminal? I do `System.IO.hIsTerminalDevice stdout` and on Windows it says `False`
[02:27:45] <ManofLetters[m]> both in cmd and powershell
[02:28:18] <ManofLetters[m]> terminal/"interactive device" or whatever
[02:28:50] <ManofLetters[m]> what I really need is to tell that the app was started from an icon on desktop and not from console
[02:29:01] <f-a> that must be a bug
[02:29:08] <ManofLetters[m]> to say "start it from console" instead of just crashing
[02:29:09] <f-a> or a cheeky linux chauvinist
[02:29:15] <ManofLetters[m]> heh
[02:31:02] <ManofLetters[m]> doh, I tried `$ansi-terminal-game$ git grep IsTerminalDevice` and concluded you don't use `hIsTerminalDevice`
[02:31:30] <ManofLetters[m]> I guess `rgrep IsTerminalDevice .` should work?
[02:31:36] <ManofLetters[m]> but it turns out nothing as well
[02:31:40] <ManofLetters[m]> you don't check at all?
[02:31:44] <f-a> I do not check
[02:32:23] <f-a> tbh I never thought about it
[02:33:27] <ManofLetters[m]> perhaps your app doesn't install to desktop and doesn't have an icon, so it's fine, I guess
[02:33:55] <ManofLetters[m]> I mean your customers' games
[02:35:07] <f-a> it does not install an icon yeah
[02:35:19] <f-a> well, *my* games :P
[02:35:25] <f-a> but what if it did?
[02:35:59] <ManofLetters[m]> well, let's suppose somebody downloads a Windows exe of your game in a browser
[02:36:05] <ManofLetters[m]> and runs it straight from the browser
[02:36:12] <ManofLetters[m]> it probably silently crashes
[02:36:29] <f-a> wait
[02:36:30] <ManofLetters[m]> while it could display a nice error message saying "run me in 'cmd'"
[02:36:35] <f-a> straight from- oh
[02:36:51] <f-a> I thought if you ran it it opened a win32 console or something
[02:36:52] <f-a> I hope so
[02:36:57] <f-a> I had some testing on win
[02:37:09] <f-a> I really hope testers caught this
[02:37:11] <ManofLetters[m]> I may be spewing nonsense, try it
[02:37:17] <ManofLetters[m]> oh, ok
[02:37:48] <ManofLetters[m]> if it's tested, it's fine
[02:37:48] <f-a> but maybe it is a possibility
[02:37:53] <f-a> eh
[02:38:05] <f-a> I tested with Â«smartÂ» users so maybe they opened a terminal *before*
[02:38:08] <f-a> I need a win wmâ€¦
[02:38:46] <ManofLetters[m]> in reality, I have a more complex situation, because I also have an SDL frontend, but it also writes logs to stdout, etc., etc.
[02:38:53] <ManofLetters[m]> so it may very well work fine for you
[02:38:55] <ManofLetters[m]> but not for me
[02:40:02] <ManofLetters[m]> perhaps Windows, when an app opens a SDL windows, doesn't give stdout, but when it doesn't, spawns 'cmd' for it
[02:40:05] <ManofLetters[m]> no clue
[02:40:45] <ManofLetters[m]> I only know I had silent crashes and also can't get any output when it crashes in CI
[02:40:55] <ManofLetters[m]> not even when I save logs to files
[02:41:25] <ManofLetters[m]> on Windows CI
[02:41:48] <f-a> will you open a ticket for that hIsTerminalDevice?
[02:42:01] <f-a> not that ghc dev will have the bandwidth probablyâ€¦
[02:42:11] <f-a> my Â«ghc segfaultsÂ» one is silent
[02:42:33] <ManofLetters[m]> yes, I will
[02:42:45] <ManofLetters[m]> some do get fixed after a couple of years
[02:43:22] <f-a> I feel we have an exponentially growing compiler
[02:43:29] <f-a> without exponential grow resources
[02:43:31] <f-a> feelsbad
[02:44:42] <ManofLetters[m]> it's all PhDs fault, they add futuristic stuff to GHC then get tenure and never touch it with a finger once
[02:45:28] <f-a> or they get a baby
[02:47:34] <ManofLetters[m]> then the baby should be dedicated to GHC after it grows up and it's not always the case
[02:52:13] <ManofLetters[m]> we need a better Conduct contract for GHC contributors that regulates all those issues for life
[02:52:43] * f-a nods
[02:55:57] <ManofLetters[m]> though my app is compiled on Windows with GHC 8.4.4 ((one of) last version that suports 32bits), so perhaps that's an old bug
[02:56:13] <ManofLetters[m]> I don't have ghci on Windows to try, just exes compiled by CI
[02:57:31] <ManofLetters[m]> hmm, ghcup works on Windows, perhaps it's time to try?
[02:58:01] <f-a> good luck
[04:19:22] <sm> that's right, those PhD babies should be given up to the order of GHC monks and put to work early
[04:20:26] <sm> in frivolous non-productive news, I think I'm ready to complete cr cave 1 @ speed 20, and I'm gonna sit here till it's done
[04:21:58] <sm> I have memorised the number of keypresses at some key points. But man, timing is still tricky
[04:34:08] * sm uploaded an image: (752KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/FywDZlHpkUJPcYuwqICPyJJe/Screen%20Shot%202021-10-19%20at%203.03.52%20PM.png >
[04:34:12] <sm> finally
[08:03:45] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[10:33:08] *** Joins: sm[i]_ (~user@li229-222.members.linode.com)
[10:34:36] *** Joins: f2a (f2a@f2a.jujube.ircnow.org)
[10:39:03] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Read error: Connection reset by peer)
[10:39:50] *** Quits: f-a (f2a@f2a.jujube.ircnow.org) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: thekyriarchy (~thekyriar@2001:470:69fc:105::493) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: sudoreboot (~sudoreboo@2001:470:69fc:105::c824) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ldlework[m] (~ldleworkm@2001:470:69fc:105::1:34d) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: sm[i] (~user@plaintextaccounting/sm) (Ping timeout: 260 seconds)
[10:40:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:43:36] *** Joins: sudoreboot (~sudoreboo@2001:470:69fc:105::c824)
[10:44:39] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[10:45:24] *** Joins: thekyriarchy (~thekyriar@2001:470:69fc:105::493)
[10:48:10] *** Joins: ldlework[m] (~ldleworkm@2001:470:69fc:105::1:34d)
[12:08:46] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 260 seconds)
[12:15:51] *** Joins: __monty__ (~toonn@user/toonn)
[13:45:32] <f2a> 20 is pretty hardcore
[13:45:53] *** f2a is now known as f-a
[13:46:50] <f-a> wow @ that last step :P
[13:47:06] <f-a> also interesting that you have a black-on-brown term
[17:53:11] *** Quits: etrepum (sid763@id-763.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:53:41] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[17:56:57] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[19:18:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:26:35] <sm> Terminal.app's silver aerogel theme,it makes the game look quite nice
[19:44:34] <sm> thinking of making speed the main/first argument, f-a
[19:49:38] <f-a> good
[19:51:11] <sm> and wondering about limiting the argument to 1..10 (selecting speeds 5..60)
[19:53:11] <f-a> seems sensible
[19:59:11] <sm> it complicates.. two different "speeds" to talk about. 
[20:04:03] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[21:36:58] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[22:46:19] <ManofLetters[m]> `hIsTerminalDevice` turns out to work fine on Windows
[22:46:51] <f-a> \o/
[22:46:57] <ManofLetters[m]> it's just that Windows linker, seeing the code is linked with SDL2, marks the exe as GUI and removes stdout/stderr
[22:47:05] <ManofLetters[m]> so much for my idea to have a single exe for both SDL2 and screen readers...
[22:48:07] <ManofLetters[m]> at least it all works fine on Linux
[22:49:37] <ManofLetters[m]> https://stackoverflow.com/questions/54536/win32-gui-app-that-writes-usage-text-to-stdout-when-invoked-as-app-exe-help/113032
[22:52:13] <ManofLetters[m]> f-a: which also suggests that your game indeed auto-start `cmd` and so there's no problem when they are started from browser or double-click in file explorer
[22:52:28] <ManofLetters[m]> *games compiled with your library, on Windows
[22:59:32] <ManofLetters[m]> you lucky punk
[23:00:06] * ManofLetters[m] explains in his README that ANSI is not available on Windows perios
[23:00:11] <ManofLetters[m]> *period
[23:00:18] <ManofLetters[m]> the upside is that I don't need to test it on Windows
[23:00:50] <ManofLetters[m]> in particular the keyboard input would be a nightmare
[23:01:17] <ManofLetters[m]> with different physical keyboards (the Apple one was driving me nuts with vty on Windows)
[23:10:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[23:56:58] <f-a> gosh adding FPS calc is more of a chore than I thought
[23:58:20] <ManofLetters[m]> maths is hard; better ass some sweet pictures :P
[23:58:24] <ManofLetters[m]> *add
[23:58:48] <ManofLetters[m]> but do you mean real-time FPS display?
