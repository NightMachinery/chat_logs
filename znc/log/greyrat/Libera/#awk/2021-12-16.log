[00:04:35] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Quit: No Ping reply in 180 seconds.)
[00:09:33] *** Quits: gaussianblue (~gaussianb@78-61-246-87.static.zebra.lt) (Quit: leaving)
[00:24:03] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[00:29:31] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[00:39:05] *** Quits: user51 (~user51@176.228.151.30) (Quit: leaving)
[00:45:19] *** Joins: _val_ (~valentin@82-169-14-137.biz.kpn.net)
[00:57:07] *** Quits: lavaball (~Melissa@31.204.155.215) (Remote host closed the connection)
[01:14:36] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:39:10] *** Quits: Torr (~Torr@user/torr) ()
[01:39:21] *** Joins: Torr (~Torr@user/torr)
[01:41:18] *** Quits: d630 (~d630@user/d630) (Quit: quit)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:57:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[02:58:04] *** Joins: tangy (~tangy@user/tangy)
[02:58:34] *** Quits: Torr (~Torr@user/torr) ()
[02:58:46] *** Joins: Torr (~Torr@user/torr)
[03:22:36] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.3)
[03:27:25] *** Joins: junebug (~junebug@2600:1700:3db0:2540:56bb:cb52:830f:bd30)
[03:30:03] *** Quits: nvmd (~nvmd@user/nvmd) (*.net *.split)
[03:30:03] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (*.net *.split)
[03:30:03] *** Quits: Fozzworth_ (~Fozzworth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: defjam (~eb0t@90.210.94.161) (*.net *.split)
[03:30:04] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (*.net *.split)
[03:30:04] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:04] *** Quits: yeti (~username@user/yeti) (*.net *.split)
[03:30:04] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[03:30:05] *** Quits: int (~int@0x4.cx) (*.net *.split)
[03:30:05] *** Quits: nmz1 (~nmz@24.137.228.140) (*.net *.split)
[03:30:05] *** Quits: ttmrichter (ttmrichter@user/ttmrichter) (*.net *.split)
[03:30:05] *** Quits: brw (~bas@haring.bas.sh) (*.net *.split)
[03:30:05] *** Quits: Meli (~meli@user/meli) (*.net *.split)
[03:30:06] *** Quits: shbot (~shbot@37.139.2.101) (*.net *.split)
[03:30:06] *** Quits: mute (m@crx.fan) (*.net *.split)
[03:30:06] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[03:30:06] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[03:30:06] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[03:30:06] *** Quits: odc (sid197788@id-197788.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: mete (~mete@static.201.165.216.95.clients.your-server.de) (*.net *.split)
[03:30:06] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (*.net *.split)
[03:30:06] *** Quits: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[03:30:06] *** Quits: Bossi (~quassel@p4fc22a7d.dip0.t-ipconnect.de) (*.net *.split)
[03:30:06] *** Quits: hid3 (~arnoldas@78.157.71.116) (*.net *.split)
[03:30:12] *** Joins: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca)
[03:30:14] *** Joins: mete (~mete@static.201.165.216.95.clients.your-server.de)
[03:30:23] *** Joins: Riviera (Riviera@user/riviera)
[03:30:30] *** Joins: boreas (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[03:30:30] *** Joins: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net)
[03:30:32] *** Joins: nmz1 (~nmz@24.137.228.140)
[03:30:33] *** Joins: shbot (~shbot@37.139.2.101)
[03:30:34] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
[03:30:35] *** Joins: yeti (~username@p4fdb0846.dip0.t-ipconnect.de)
[03:30:49] *** Joins: defjam (~eb0t@90.210.94.161)
[03:30:52] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[03:31:14] *** Quits: yeti (~username@p4fdb0846.dip0.t-ipconnect.de) (Changing host)
[03:31:14] *** Joins: yeti (~username@user/yeti)
[03:31:33] *** Joins: odc (sid197788@helmsley.irccloud.com)
[03:33:15] *** Joins: Meli (~meli@user/meli)
[03:34:28] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[03:34:32] *** Joins: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net)
[03:34:33] *** Joins: int (~int@0x4.cx)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:35:17] *** Joins: bleb (~cm@user/bleb)
[03:35:30] *** Joins: Bossi (~quassel@p4fc22a7d.dip0.t-ipconnect.de)
[03:35:36] *** Joins: mute (m@crx.fan)
[03:35:39] *** Joins: ttmrichter (ttmrichter@user/ttmrichter)
[03:36:05] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[03:54:32] *** Joins: ryu_ (~ryusaku@c09825BC1.dhcp.as2116.net)
[03:55:27] *** Quits: ryu` (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[04:01:24] *** Joins: treble (~treble@user/treble)
[04:12:27] *** Quits: ryu_ (~ryusaku@c09825BC1.dhcp.as2116.net) (Ping timeout: 256 seconds)
[04:30:02] *** Joins: brw (~bas@haring.bas.sh)
[04:44:53] *** Quits: junebug (~junebug@2600:1700:3db0:2540:56bb:cb52:830f:bd30) (Quit: Leaving)
[05:01:29] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[05:06:19] *** Joins: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net)
[05:06:51] *** Quits: Meli (~meli@user/meli) (Ping timeout: 256 seconds)
[05:08:37] *** Joins: Meli (~meli@user/meli)
[05:14:13] *** Quits: treble (~treble@user/treble) (Ping timeout: 256 seconds)
[05:15:47] *** Joins: treble (~treble@user/treble)
[05:38:42] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Ping timeout: 260 seconds)
[05:53:23] *** Joins: loganlee (~Thunderbi@user/loganlee)
[06:30:29] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 250 seconds)
[06:50:25] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 250 seconds)
[07:13:31] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[07:30:03] *** Parts: emanuele6 (~emanuele6@user/emanuele6) (WeeChat 3.3)
[07:31:59] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[09:26:41] *** Joins: junebug (~junebug@2600:1700:3db0:2540:63ac:d802:81f5:de56)
[09:30:44] *** Joins: user51 (~user51@176.228.151.30)
[09:39:41] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 252 seconds)
[09:51:03] *** Quits: junebug (~junebug@2600:1700:3db0:2540:63ac:d802:81f5:de56) (Quit: Leaving)
[09:51:56] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[10:20:00] *** Joins: ztx (~ztx@user/ztx)
[11:10:32] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[11:17:05] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:33:53] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:35:38] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[11:51:24] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[12:19:05] *** Joins: lavaball (felix@31.204.155.215)
[14:20:41] *** Joins: rendar (~rendar@user/rendar)
[14:21:00] <rendar> what is the best way to grep the end of line with awk, when the string is a bash variable? like ${myvar} ?
[14:23:20] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[14:25:09] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[14:31:52] *** Joins: earnestly (~earnest@user/earnestly)
[14:33:01] <emanuele6> awk is not grep
[14:33:13] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[14:56:45] *** Joins: lgc (~lgc@user/lgc)
[14:59:43] *** Quits: lgc (~lgc@user/lgc) (Client Quit)
[15:10:17] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[15:47:53] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[16:00:47] *** Joins: seninha (~seninha@user/seninha)
[16:26:47] *** Quits: Torr (~Torr@user/torr) ()
[16:32:11] *** Joins: lavaball (felix@31.204.155.215)
[16:45:07] *** Quits: mingdao (~mingdao@wireguard/tunneler/mingdao) (Quit: leaving)
[16:45:17] *** Joins: mingdao (~mingdao@wireguard/tunneler/mingdao)
[17:07:55] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[17:08:29] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[17:36:17] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[17:46:50] <nmz1> awk '/\$\{myvar\}$/' ?
[17:46:54] <nmz1> awk is better than grep
[17:50:39] <emanuele6> nmz1: what is that supposed to do?
[17:51:19] <emanuele6> oh, print lines that end in ${myvar} literally, lol
[18:33:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:36:07] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[18:44:44] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 252 seconds)
[18:54:07] *** Joins: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it)
[18:54:14] <rendar> i have strings like that: `name/name2[...nameN]@string` how can i match with a regex a line like this having only partial initial string (e.g. `name/name1`) and partial second piece (e.g. `@stri`) ?
[18:54:19] *** Quits: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it) (Changing host)
[18:54:19] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:54:23] <rendar> is awk good for this?
[18:55:40] <emanuele6> /name\/name2\[\.\.\.nameN\]\@string/
[18:57:43] <rendar> i don't have nameN
[18:57:55] <rendar> and i have name/name2 as an unique string *variable*
[18:57:56] <emanuele6> what even is the question
[18:58:06] <rendar> i stated it correctly
[18:58:17] <emanuele6> "with a regex"
[18:58:24] <rendar> i have strings, like zpool1/ds1/cry@_snap_20211216_121429UTC_sendto_localhost
[18:58:37] <rendar> then A="zpool1/ds1" and B="@_snap"
[18:58:49] <rendar> i want to grep that line with $A and $B
[18:58:59] <emanuele6> what do you think "to grep" means?
[18:59:17] <emanuele6> usually it means "print a whole line that matches something"
[18:59:40] <rendar> yes, i want to print that line
[18:59:45] <rendar> which matches a regex
[18:59:52] <emanuele6> and what is the regex?
[18:59:53] <rendar> that i can partially fill with $A and $B
[19:00:09] <rendar> $Asometing$Bsomethingelse
[19:00:29] <emanuele6> that doesn't look like a regex
[19:00:43] <rendar> emanuele6, come on man, i do this all the time with python
[19:00:54] <rendar> i have to match a f. string! :D
[19:01:06] <emanuele6> that is not safe
[19:01:16] <rendar> there is a safe way to do this?
[19:01:21] <emanuele6> in python, yes
[19:01:40] <rendar> in bash/awk no?
[19:01:55] <emanuele6> i am not talking about your problem
[19:02:09] <emanuele6> i am talking about creating a regex without injecting strings using f strings
[19:02:11] <emanuele6> that is terrible
[19:02:20] <emanuele6> anyway, i don't undestand your question
[19:02:29] <emanuele6> can you not show the actual regex?
[19:02:37] <rendar> i don't know the regex
[19:02:50] <emanuele6> then what even is the question?
[19:02:52] <rendar> i have described you what kind of strings i want to grep
[19:02:58] <rendar> oh my god
[19:03:01] <rendar> are you dumb or what?
[19:03:08] <rendar> zpool1/ds1/cry@_snap_20211216_121429UTC_sendto_localhost <- i have strings like this
[19:03:08] <emanuele6> you just want to print strings that have A and B?
[19:03:30] <rendar> i have a starting piece of this string, that can be "zpool1/ds1" for instance
[19:03:35] <emanuele6> or does it have to start with A
[19:03:44] <rendar> then i have a second piece of this string, which can be "@_snap"
[19:03:45] <emanuele6> you said none of this
[19:03:46] <rendar> how to match it?
[19:04:09] <emanuele6> do you want to match lines that contain both A and B?
[19:04:40] <emanuele6> or is there something extra e.g. "A must be before B" "A and be may overlap" "A must be at the start"
[19:04:58] <emanuele6> there is no way to tell this from what you said
[19:05:02] <rendar> the string must have that format
[19:05:13] <rendar> x/y/z../..@..
[19:05:34] <emanuele6> so what is the deal with "A" and "B"?
[19:05:36] <nmz1> rendar | are you dumb or what?  <- wtf man
[19:05:44] <rendar> sorry
[19:05:50] <nmz1> :S
[19:06:08] <rendar> emanuele6, they are initial part and middle part of that string
[19:06:12] <nmz1> I don't understand what you were saying either
[19:06:22] <nmz1> you can't just magic yourself a regex
[19:06:33] <emanuele6> ok, so start with A and must include B
[19:06:45] <nmz1> emanuele6: you're too nice
[19:06:46] <rendar> emanuele6, yes, but it has to be that format too
[19:06:59] <rendar> e.g. x@@y is not a match
[19:07:22] <emanuele6> you just gave an example and you didn't even mention A and B
[19:07:25] <nmz1> and it needs to inherit a variable from bash?
[19:07:29] <emanuele6> i think i must be dumb at this point
[19:07:34] <rendar> nmz1, 2
[19:07:37] <nmz1> emanuele6: you're not
[19:08:02] <nmz1> emanuele6: rendar is being like a client that wants X feature and expects programmers to "just do it"
[19:08:55] <nmz1> sorry rendar
[19:09:02] <rendar> no prob
[19:09:05] <nmz1> whats the example input, example output
[19:09:19] <nmz1> and should you inherit bash variables
[19:10:45] <nmz1> you can bashvariable=${var} awk 'index($0,ENVIRON["bashvariable"]) && /^[^@]+@[^@]+$/'
[19:11:08] <rendar> yes, that's something
[19:11:31] <emanuele6> awk -F'@' -v a="$a" -v b="$b" 'NF == 2 && index($1, a) == 1 && index($2, b) == 1'
[19:12:11] <nmz1> more correct
[19:12:13] <nmz1> probably
[19:12:21] <rendar> i'm using python sorry
[19:12:22] <emanuele6> i think maybe this is what he is asking
[19:13:36] <emanuele6> or `index($2, b)' without `== 1' if B may be anywhere after the @ and not right after
[19:13:39] <emanuele6> who knows
[19:13:53] <rendar> B will be always after the @
[19:14:00] <rendar> indeed the first B char will always be @
[19:14:07] <emanuele6> wow you gave us another clue!
[19:14:09] <emanuele6> thank you
[19:14:52] <emanuele6> ditch the first character of @
[19:14:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[19:14:55] <emanuele6> err ditch the first character of B
[19:15:22] <emanuele6> if you can't pass ${b#@} instead of $b to awk
[19:15:37] <emanuele6> s/t/t,/
[19:17:05] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[19:18:32] <emanuele6> # a=zpo b=@_snap; printf '%s\n' 'zpool1/ds1/cry@_snap_20211216_121429UTC_sendto_localhost' 'zpool1/ds1/cry@@_snap_20211216_121429UTC_sendto_localhost' 'zpoop@_snape' 'zpoo@_snap@hey' | awk -F'@' -v a="$a" -v b="${b#@}" 'NF == 2 && index($1, a) == 1 && index($2, b) == 1'
[19:18:33] <shbot> emanuele6: zpool1/ds1/cry@_snap_20211216_121429UTC_sendto_localhost
[19:18:33] <shbot> emanuele6: zpoop@_snape
[19:28:42] <emanuele6> the only way you can check this is with a split(/@/) (or -F@)
[19:29:01] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[19:30:37] <emanuele6> even if you use perl  /^\Q$a\E[^@]*@\Q$b\E[^@]*/  or python  re.compile(f"^{re.escape(a)}[^@]*@{re.escape(b)}[^@]$")
[19:31:12] <emanuele6> those regex solutions can't make sure that a and b don't contain @
[19:32:07] <emanuele6> the must check it separately
[19:33:01] <rendar> ok
[19:33:46] <emanuele6> perl -sne 'print if /^\Q$a\E[^@]*@\Q$b\E[^@]*$/' -- -a=zpo@ -b=x   will print zpo@hi@xa
[19:34:19] <emanuele6> awk -F'@' -v a=zpo@ -v b=x 'NF == 2 && index($1, a) == 1 && index($2, b) == 1'  will not
[19:34:43] <emanuele6> not to say that awk can do it and perl cannot, just saying that the regex solution must check it separately
[19:35:36] <rendar> ok, the best thing to do, for now, is grepping lines that starts with $A and also contains $B
[19:35:59] <emanuele6> why?
[19:37:08] <rendar> i need that
[19:40:04] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[19:40:49] <emanuele6> i was just saying that if you use a regex you must do something like:
[19:41:07] <emanuele6>  perl -sne 'BEGIN { $sane_ab = ($a !~ /@/ && $b !~ /@/) } print if $sane_ab && /^\Q$a\E[^@]*@\Q$b\E[^@]*$/' -- -a="$a" -b="$b"
[19:41:25] <emanuele6> or just bail out if a / b are invalid depending on the use case 
[19:42:27] <emanuele6> the best way to check is to just split on `@' in any language
[19:46:18] *** Joins: wwallace (~afernande@63.240.73.102)
[19:46:26] <wwallace> how to fix this:
[19:46:26] <emanuele6> i would use the equivalent solution also in perl
[19:46:28] <wwallace> mount | awk '$5 != “xfs”{printf “--exlcude “$3” “}'; echo
[19:46:29] <wwallace> awk: 1: unexpected character 0xe2
[19:46:42] <emanuele6> perl -F@ -sane 'print if @F == 2 && $F[0] =~ /^\Q$a\E/ && $F[1] =~ /^\Q$b\E/' -- -a="$a" -b="$b"
[19:46:57] <emanuele6> which uses the -sane set of options hehe
[19:48:23] <emanuele6> wwallace: use normal quotes
[19:48:35] <nmz1> wwallace: printf("--exclude %s ",$3) END {print ""}
[19:48:43] <emanuele6> e2 is > 7f so it is not an ascii character
[19:48:46] <emanuele6> whatever it is
[19:49:03] <emanuele6> and don't inject printf format as nmz1 showed
[19:49:32] <emanuele6> and you if you plan on evaluating this stuff as options, reconsider
[19:49:40] <emanuele6> or at least shell quote them
[19:50:24] <wwallace> OK Thank you all.
[19:50:54] <emanuele6> # printf '\xe2\n'
[19:50:55] <shbot> emanuele6: no output
[19:52:42] <emanuele6> probably some utf-8 stuff
[19:52:44] <nmz1> mount doesn't show weird characters afaik
[19:53:47] <rendar> nmz1, that's not mount
[19:54:13] <rendar> oops! sorry
[19:54:14] <nmz1> rendar:?
[19:54:18] <rendar> nevermind!
[19:54:31] <emanuele6> # <<< '“xfs”{printf “--exlcude “$3” “}' jq -R explode
[19:54:32] <shbot> emanuele6: [8220,120,102,115,8221,123,112,114,105,110,116,102,32,8220,45,45,101,120,108,99,117,100,101,32,8220,36,51,8221,32,8220,125]
[19:55:00] <emanuele6> # <<< '“xfs”{printf “--exlcude “$3” “}' jq -R 'explode|map(select(. > 127))|implode'
[19:55:01] <shbot> emanuele6: 3"“”““”“"
[19:55:16] <emanuele6> wwallace is using weird quotes
[19:55:48] *** Joins: junebug (~junebug@2600:1700:3db0:2540:8370:a76b:ff1f:221c)
[20:08:34] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:11:17] <emanuele6> # mawk '$5 != “xfs”{printf “--exlcude “$3” “}'
[20:11:18] <shbot> emanuele6: mawk: 1: unexpected character 0xe2
[20:11:27] <mawk> exactly
[20:11:35] <mawk> stop feeding me crap
[20:11:37] <emanuele6> yes, that is the error that mawk prints for that script
[20:12:03] <mawk> exlcude you wrote
[20:12:32] <emanuele6> i hate non-ascii in source code even if it is just in string literals or comments
[20:13:08] <emanuele6> unless the programming language is based on non-ascii characters by design e.g. APL
[20:16:17] <emanuele6> oh, i forgot to do advent of code today
[20:21:13] <nmz1> hey now let me write in my language
[20:52:40] <e36freak> emanuele6: today was a fun one
[20:53:00] <e36freak> starting to get difficult-ish now
[20:53:15] <emanuele6> yes, I think this one should be pretty fun to solve in sed
[20:54:03] <e36freak> you're a nut
[20:54:14] <e36freak> i did it iteratively with some stacks to track everything
[20:54:26] <e36freak> i don't think sed is gonna cut it for part 2, at least not without a lot of pain, but knock yourself out
[20:54:54] <emanuele6> i think part1 is doable
[20:55:00] <emanuele6> i will try later
[21:11:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:11:53] *** Quits: nmz1 (~nmz@24.137.228.140) (Ping timeout: 256 seconds)
[21:12:07] *** Quits: tangy (~tangy@user/tangy) (Remote host closed the connection)
[21:12:50] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Remote host closed the connection)
[21:13:30] *** Joins: nmz1 (~nmz@24.137.228.140)
[21:14:44] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[21:22:57] *** Joins: gaussianblue (~gaussianb@78-61-246-87.static.zebra.lt)
[21:37:02] *** Joins: Thanatermesis (~Thanaterm@191.92.148.122)
[22:41:33] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[22:49:43] *** Joins: Torr (~Torr@user/torr)
[22:51:02] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[22:51:15] *** Joins: Torr (~Torr@user/torr)
[22:59:00] *** Quits: fford (~fford@p200300c6ff35820060d8bedc1c419ec5.dip0.t-ipconnect.de) (Quit: WeeChat 1.5)
[23:04:17] *** Quits: gaussianblue (~gaussianb@78-61-246-87.static.zebra.lt) (Quit: leaving)
[23:37:37] *** Quits: nmz1 (~nmz@24.137.228.140) (Ping timeout: 240 seconds)
[23:37:52] *** Joins: fford (~fford@p200300c6ff35820060d8bedc1c419ec5.dip0.t-ipconnect.de)
[23:39:20] *** Joins: nmz1 (~nmz@24.137.228.140)
[23:50:56] *** Joins: lavaball (felix@31.204.155.215)
