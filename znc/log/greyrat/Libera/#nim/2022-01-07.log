[00:00:03] <FromDiscord> <michaelb> it's really not
[00:00:15] <FromDiscord> <michaelb> or that's to say, it's missing a lot of the point of MSYS@
[00:00:18] <FromDiscord> <michaelb> (edit) "MSYS@" => "MSYS2"
[00:00:31] <FromDiscord> <Sabena Sema> it is, mingw-w64 is the ‚Äúdifferent‚Äù part
[00:00:54] <FromDiscord> <Patitotective> @Sabena Sema It seems a little bit complex, I will try what @Solitude said and if it doesn't work I know who to ask üòâ
[00:01:04] <FromDiscord> <michaelb> do you understand the concept of MSYS2's environments? UCRT64 vs MINGW64 vs. CLANG32?
[00:01:15] <FromDiscord> <Sabena Sema> I think you can even install mingw-w64 and use it from cygwin
[00:01:16] <FromDiscord> <michaelb> what they bring to the table?
[00:01:28] <FromDiscord> <Sabena Sema> yeah, they are basically shell profiles
[00:01:40] <FromDiscord> <michaelb> with different /usr/lib
[00:01:43] <FromDiscord> <Sabena Sema> yes
[00:02:02] <FromDiscord> <Sabena Sema> also: use ucrt64 if at all possible
[00:02:12] <FromDiscord> <michaelb> anyway, point is you can generate standalone native exe
[00:02:16] <FromDiscord> <michaelb> I
[00:02:21] <FromDiscord> <Sabena Sema> the old msvcrt is bug ridden and basically unmaintained
[00:02:28] <FromDiscord> <Sabena Sema> yeah
[00:02:31] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:03:20] <FromDiscord> <michaelb> I've had luck compiling on Win 10 + MSYS2 with `-static` and then copying the executable to a bare bones Windows 7 machine (nothing of msys2 or cygwin installed) and it worked fine
[00:03:29] <FromDiscord> <michaelb> context being Nim programming
[00:03:39] <FromDiscord> <Sabena Sema> static doesnt do the same thing on windows as linux
[00:03:51] <FromDiscord> <Sabena Sema> windows does not have ‚Äústatic executables‚Äù
[00:04:06] <FromDiscord> <Sabena Sema> it just modifies the linkers preference for static vs dynamic libs
[00:04:21] <FromDiscord> <Sabena Sema> for pe hosts
[00:05:34] <FromDiscord> <michaelb> fair enough, you're more knowledgeable than me in this area apparently; what I meant is that with help of `-static` passed to gcc in msys2 mingw64 environment on win 10, I was able to produce a program that I could copy to an old Win 7 box and it ran fine though that box didn't have anything ever installed having to do with msys2, cygwin, etc.
[00:05:44] <FromDiscord> <Sabena Sema> you shouldn‚Äôt use it on linux either tbh, it can opt you out of some security features, and you dont get the vdso
[00:06:01] <FromDiscord> <Sabena Sema> yeah
[00:06:34] <FromDiscord> <Sabena Sema> Thats possible with the ucrt as well if I‚Äôm not mistaken, there is a static version of the ucrt
[00:06:44] <FromDiscord> <michaelb> yes, I believe so
[00:06:49] <FromDiscord> <Sabena Sema> idk if `-static` alone picks it up
[00:07:34] <FromDiscord> <michaelb> ucrt is definitely preferable, and has proper support for utf-8
[00:07:44] <FromDiscord> <michaelb> msvcrt lacks that
[00:09:54] <FromDiscord> <Sabena Sema> tbh it should also be possible to link with msvcversion.dll to, in theory, but because that would mean you need to redistribute a nonfree file the mingw folks were never interested in supporting it, which is why the horrid and crufty msvcrt.dll was the default for so long
[00:10:20] <FromDiscord> <Sabena Sema> it also is non-broken under multithreading
[00:10:23] <FromDiscord> <Sabena Sema> and is faster
[00:11:33] <FromDiscord> <Sabena Sema> seriously msvcrt hasnt been updated except for extremely critical security issues since 1998
[00:11:55] <FromDiscord> <michaelb> win 98 ftw
[00:45:32] <FromDiscord> <Isofruit> sent a code paste, see https://play.nim-lang.org/#ix=3LhU
[00:46:04] <FromDiscord> <Isofruit> I know I can iterate over the fields using the `fieldPair`iterator, but that gives me the field name as a string and the fieldvalue as a... wait I can just call fieldvalue.type()
[00:46:25] <FromDiscord> <Isofruit> (edit) "I know I can iterate over the fields using the `fieldPair`iterator, but that gives me the field name as a string and the fieldvalue as a... wait I can just call fieldvalue.type() ... " 03added "and compare that with my type"
[00:46:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LhV
[00:46:39] <FromDiscord> <Isofruit> That looks a lot simpler than what I had in mind
[00:47:05] <FromDiscord> <Isofruit> fields is defined for types? When I skimmed over the page for it, I only glimpsed one for strings
[00:47:24] <FromDiscord> <Isofruit> Wait no , that was the pairs iterator
[00:47:33] <FromDiscord> <Isofruit> Fuck my brain today, curse this log4j hell
[00:47:35] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/iterators.html#fields.i%2CT
[00:48:03] <FromDiscord> <Isofruit> Thanks Beef!
[00:48:33] <FromDiscord> <SirOlaf> Hey Beef, what do you think of my newest creation? https://github.com/nim-lang/Nim/issues/19335
[00:49:38] <FromDiscord> <Elegantbeef> I mean not helpful compiler errors suck, but stuff like this is like "No stop it, dont hit yourself, oh no what will i do"
[00:50:05] <FromDiscord> <SirOlaf> Oh yeah, I agree, this is some very obscure stuff. But was funny to see what it did
[00:50:26] <FromDiscord> <Elegantbeef> I mean it's not exactly obscure as completely pointless üòÄ
[00:50:43] <FromDiscord> <SirOlaf> The pointless part is allowing void in type declarations
[00:50:57] <FromDiscord> <Elegantbeef> Exactly
[00:51:25] <FromDiscord> <Elegantbeef> My point is more "Ok so void is 'allowed', but if you use it you're a purposely writing code that will not work"
[00:51:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LhY
[00:52:17] <FromDiscord> <Solitude> In reply to @SirOlaf "The pointless part is": its not entirely pointless, it only breaks if void is only field
[00:53:10] <FromDiscord> <SirOlaf> No, void never works
[00:53:12] <FromDiscord> <Elegantbeef> Attempting to instantiate void is the issue
[00:53:17] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3LhZ
[00:53:25] <FromDiscord> <SirOlaf> You cannot instantiate the void
[00:53:31] <FromDiscord> <Elegantbeef> I've used `distinct void` multiple times as a named flag
[00:53:44] <FromDiscord> <Elegantbeef> Void does work in typedefs
[00:54:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[00:54:30] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Li0
[00:54:34] <FromDiscord> <Elegantbeef> Here's a valid use of void in a type def
[00:54:46] <FromDiscord> <Elegantbeef> We make a type that's usable as a flag to a parameter
[00:55:06] <FromDiscord> <Elegantbeef> You can also use void in a typeclass of course
[00:55:19] <FromDiscord> <Elegantbeef> Unless you meant object definitions
[00:55:41] <FromDiscord> <SirOlaf> When using void as a concrete type in a object definition it seems kinda pointless
[00:55:50] <FromDiscord> <Isofruit> Is there an iterator you can use directly on a type as opposed to an instance of a type?
[00:55:51] <FromDiscord> <Elegantbeef> It's 100% pointless
[00:56:15] <FromDiscord> <SirOlaf> Good, so I'm not just missing the intricacies of invalid types here
[00:56:41] <FromDiscord> <Elegantbeef> You just said typedef so i was pointing out there are valid usages
[00:56:44] <FromDiscord> <Elegantbeef> iso i dont think so
[00:56:59] <FromDiscord> <Elegantbeef> Why are you after that?
[00:57:41] <FromDiscord> <Solitude> `echo default (void,)` compiler really likes that
[00:58:08] <FromDiscord> <Isofruit> I'm just trying to see whether I can make the proc's signature look something like this:‚Üµ`a.getRelatedFieldName(B)` with a being an instance of A and B being the type B
[00:58:18] <FromDiscord> <SirOlaf> In reply to @Solitude "`echo default (void,)` compiler": Nice, another crash
[00:58:42] <FromDiscord> <Isofruit> Because that intuitively makes sense to me, as in, give me the field on B that is related to my instance of a
[00:59:20] <FromDiscord> <Isofruit> But I think I can still make that work by iterating over an empty instance, so just doing B() beforehand in the proc
[00:59:29] <FromDiscord> <Solitude> In reply to @Isofruit "Because that intuitively makes": you can do whatever you want
[00:59:44] <FromDiscord> <Solitude> just dont instantiate void
[00:59:57] <FromDiscord> <Isofruit> Too late, instructions unclear, deleted the internet
[01:09:12] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:12:38] <FromDiscord> <SirOlaf> Does typeRel seem right for this issue? https://github.com/nim-lang/Nim/issues/18845
[01:12:44] <FromDiscord> <SirOlaf> Wanna try fixing some of them instead of creating more
[01:22:44] *** Joins: zgasma[m] (~mckaymatr@2001:470:69fc:105::1:627c)
[01:24:04] <FromDiscord> <Elegantbeef> It could be
[01:24:10] <FromDiscord> <Elegantbeef> My dud of a PR might help though doubtful
[01:24:28] <FromDiscord> <SirOlaf> I saw it, but was in a completely different area from what I think is the issue
[01:25:05] <FromDiscord> <Elegantbeef> From what i could tell the dispatch just doesnt know about non ref inheritance so `tyObject -> tyObject`
[01:26:02] <FromDiscord> <Elegantbeef> I could be wrong about the issue
[01:26:21] <FromDiscord> <SirOlaf> typeRel returns isSubtype for it I think
[01:27:02] <FromDiscord> <Elegantbeef> Well good luck
[01:27:15] <FromDiscord> <Elegantbeef> If you need any back and forth you know where to find me üôÇ
[01:27:35] <FromDiscord> <SirOlaf> üëç
[01:30:30] <FromDiscord> <Elegantbeef> Ah correction skipping `tyObject` brings you to the `tyGenericInst` which is why my solution works
[01:31:24] <FromDiscord> <Elegantbeef> In any other object case it doesnt skip or gets nil, in inheritance it's an `object -> genericInst -> (params, inheriting type)`
[01:32:33] <FromDiscord> <SirOlaf> That does sound correct
[01:34:38] <FromDiscord> <SirOlaf> So that's kinda fixed if you just reopen your pr. Gonna look at a different issue
[01:36:52] <FromDiscord> <Elegantbeef> I do have my doubts on if that's the best solution though
[01:38:59] <FromDiscord> <Elegantbeef> If you want a fun issue look at generic distincts borrowing
[01:39:08] <FromDiscord> <Elegantbeef> I looked at it a while and could not reason a good method
[01:39:48] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lin
[01:40:33] <FromDiscord> <Elegantbeef> The issue here is that there first isnt a mechanism to know `MySeq[T]` is a generic distinct iirc, then also getting the symbol of the proc is complicated due to that
[01:41:15] <FromDiscord> <SirOlaf> That one does look pretty interesting
[01:41:41] <FromDiscord> <SirOlaf> Is it this one? https://github.com/nim-lang/Nim/issues/19097
[01:41:51] <FromDiscord> <Elegantbeef> Yeppers
[01:44:22] <FromDiscord> <Elegantbeef> Further comments https://forum.nim-lang.org/t/8568#55770
[01:46:59] <FromDiscord> <Elegantbeef> `./build_all.sh` on \nix
[01:46:59] <FromDiscord> <Elegantbeef> then you can do `./koch temp c ./someSourceFile.nim`
[01:46:59] <FromDiscord> <ynfle (ynfle)> How do I build koch to test my changes to nim locally?
[01:47:01] <FromDiscord> <ynfle (ynfle)> Where someSourceFile.nim is part of the standard lib?
[01:47:01] <FromDiscord> <ynfle (ynfle)> Thanks
[01:47:02] <FromDiscord> <Elegantbeef> I guess depends what you're testing
[01:47:02] <FromDiscord> <Elegantbeef> If you're testing the stdlib then yea, if you have a scenario you're testing then no
[01:47:15] <FromDiscord> <Elegantbeef> I generally fix semantic stuff so i have a file i just compile to see if anything changes
[01:47:59] <FromDiscord> <ynfle (ynfle)> I want to add to `json`
[01:48:01] <FromDiscord> <Elegantbeef> If you're just changing the stdlib, then you can just do `./koch test cat stdlib` iirc
[01:48:13] <FromDiscord> <ynfle (ynfle)> What's cat in this context?
[01:48:44] <FromDiscord> <Elegantbeef> It's short for category and is just to tell koch "i want to run all tests in X folder"
[01:48:52] <FromDiscord> <Elegantbeef> I dont recall/know if it's possible to run single tests
[01:49:10] <FromDiscord> <ynfle (ynfle)> Ok
[01:53:09] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "The issue here is": Just seems like it's impossible to borrow generic functions in general
[01:54:14] <FromDiscord> <SirOlaf> (edit) "In reply to @Elegantbeef "The issue here is": Just seems like it's impossible to borrow generic functions ... in" 03added "to generic types"
[01:56:04] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Liu
[01:56:18] <FromDiscord> <SirOlaf> That's because B is concrete
[01:56:54] <FromDiscord> <Elegantbeef> Then yes it's presently impossible for generic distincts to borrow operations
[01:57:10] <FromDiscord> <Elegantbeef> That's what that issue comes to
[01:59:22] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3Liv
[01:59:39] <FromDiscord> <SirOlaf> Although I'm not sure if it should
[02:00:07] <FromDiscord> <SirOlaf> (edit) "https://play.nim-lang.org/#ix=3Liv" => "https://play.nim-lang.org/#ix=3Liw"
[02:00:26] <FromDiscord> <SirOlaf> (edit) "https://play.nim-lang.org/#ix=3Liw" => "https://play.nim-lang.org/#ix=3Lix"
[02:02:23] <FromDiscord> <Elegantbeef> It should
[02:02:52] <FromDiscord> <Elegantbeef> Adding type information does not change the base
[02:08:17] <FromDiscord> <SirOlaf> What does `$.T`mean
[02:08:22] <FromDiscord> <SirOlaf> (edit) "`$.T`mean" => "`$.T` mean"
[02:08:46] <FromDiscord> <SirOlaf> Is that just for internal substitution or something?
[02:08:53] <FromDiscord> <Elegantbeef> `$T`?
[02:09:14] <FromDiscord> <SirOlaf> Printed fn.typ in searchForBorrowProc which gave `proc (a: B[$.T]): string`
[02:09:26] <FromDiscord> <Elegantbeef> `$` is the stringification operator in Nim
[02:09:39] <FromDiscord> <SirOlaf> That I do know
[02:09:48] <FromDiscord> <Elegantbeef> Seems `$` is leaking into the generic parameter
[02:10:08] <FromDiscord> <SirOlaf> So no special meaning in this context?
[02:10:25] <FromDiscord> <Elegantbeef> Well `$.T` == `$(T)`
[02:11:05] <FromDiscord> <SirOlaf> sent a code paste, see https://paste.rs/HIH
[02:11:33] <FromDiscord> <Elegantbeef> You're welcome üòÄ
[02:12:03] <FromDiscord> <SirOlaf> Is this even an issue then
[02:12:41] <FromDiscord> <SirOlaf> Seems more like bad documentation at best
[02:12:48] <FromDiscord> <SirOlaf> (edit) "best" => "worst"
[02:13:43] <FromDiscord> <Elegantbeef> well we cannot do `$(b: B[int]): string {.borrow.}` `$(b: B[float]): string = "Hello"`
[02:14:33] <FromDiscord> <Elegantbeef> So i guess this is a possible non issue just needs a better error message to use a composite type class
[02:15:06] <FromDiscord> <SirOlaf> This works too though
[02:15:06] <FromDiscord> <Elegantbeef> Actually the two procs in the example are atrocious to write
[02:15:08] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3LiA
[02:15:57] <FromDiscord> <SirOlaf> No wonder you didn't find a solution if it isn't broken in the first place
[02:16:07] <FromDiscord> <Elegantbeef> I mean look at the example code again
[02:16:17] <FromDiscord> <Elegantbeef> We have a generic distinct we want to borrow operation for
[02:16:23] <FromDiscord> <SirOlaf> Oh
[02:16:33] <FromDiscord> <SirOlaf> Yeah, that works too
[02:17:14] <FromDiscord> <Elegantbeef> How?
[02:17:21] <FromDiscord> <Elegantbeef> Or do we just do `auto` everywhere
[02:17:25] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LiC
[02:18:04] <FromDiscord> <SirOlaf> Don't know if I'm still misunderstanding https://play.nim-lang.org/#ix=3LiD
[02:19:56] <FromDiscord> <Elegantbeef> It doesnt work for uninstantiated generics
[02:20:26] <FromDiscord> <Elegantbeef> You might say "makes sense" but that means it requires manually making operations for any instantiated type
[02:25:22] <FromDiscord> <Elegantbeef> Basically from my recollection we need to know that `DefaultTable[A, B]` is a distinct, get the symbol add it to the generic proc, then not instantiate the body on the generic procs instantiation
[02:25:35] <FromDiscord> <Elegantbeef> The hard part was the knowing it was a distinct and getting the original symbol
[02:27:48] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[02:27:49] <FromDiscord> <SirOlaf> I see now
[02:28:31] <FromDiscord> <SirOlaf> Ah yes `proc [missing parameters](t: var DefaultTable, key: A, val: B): var B`
[02:28:44] <FromDiscord> <Elegantbeef> Lol
[02:33:40] <FromDiscord> <Elegantbeef> I think the issue was along the lines of "we now know this is a distinct, but `semOverloadedCall` get's a type instead of an instantiated type, so doesnt get the symbol"
[02:35:39] <FromDiscord> <SirOlaf> Seems correct, it can't resolve it
[02:46:29] <FromDiscord> <SirOlaf> It is tyGenericInvocation instead of tyDistinct
[02:51:49] <FromDiscord> <SirOlaf> Can you just call like newType on it
[02:52:21] <FromDiscord> <SirOlaf> Probably not, but there must be something to resolve generics, right?
[02:53:32] <FromDiscord> <Elegantbeef> My idea was going to be look up the procedure name check if the generic constrains match and all the types match, if so use that
[02:53:36] <FromDiscord> <Elegantbeef> But i couldnt reason that
[02:54:33] <FromDiscord> <SirOlaf> Feels like it would be easier to just fix the distinct check
[02:57:25] *** Joins: yitr (~yitr@d206-116-166-213.bchsia.telus.net)
[02:59:41] <FromDiscord> <SirOlaf> May have a solution
[03:07:42] <FromDiscord> <SirOlaf> Yeah, so I do have a solution
[03:07:49] <FromDiscord> <SirOlaf> But it probably works only for this scenario
[03:09:10] <FromDiscord> <SirOlaf> The info about these generic types is buried a lot deeper than normal
[03:10:40] <FromDiscord> <SirOlaf> It also only seems to "fix" the first part of the issue
[03:13:07] *** Quits: yitr (~yitr@d206-116-166-213.bchsia.telus.net) (Quit: Client closed)
[03:13:48] <FromDiscord> <Elegantbeef> Yea you will have to not instantiated the proc body if the body is a symbol
[03:13:55] <FromDiscord> <Elegantbeef> So do you have it getting the proper sym?
[03:14:29] <FromDiscord> <SirOlaf> I have something, but not quite sure what exactly I have
[03:15:09] <FromDiscord> <SirOlaf> Can figure out if it's distinct for this specific case by going to t[0].lastSon (obviously check type and length before)
[03:22:05] *** Joins: vicfred (~vicfred@user/vicfred)
[03:23:47] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3Lj2
[03:24:30] <FromDiscord> <Elegantbeef> Ah yes you're at the part i had issue now üòÄ
[03:24:35] <FromDiscord> <SirOlaf> Nice
[03:24:45] <FromDiscord> <SirOlaf> So what is the issue starting here?
[03:24:48] <FromDiscord> <Elegantbeef> SemOverloaded call is now attempting to call with the type
[03:25:09] <FromDiscord> <Elegantbeef> The uninstantiated generic does not allow you to get a resolved symbol
[03:25:31] <FromDiscord> <Elegantbeef> In this case was where my reasoning was to "check all symbols of name and find the one that matches" manually
[03:25:57] <FromDiscord> <Elegantbeef> Since this is a borrow of a generic we do not want to call, but we want to find a symbol of a specific kind
[03:27:13] <FromDiscord> <SirOlaf> Are you sure about that
[03:27:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Lj4
[03:27:19] <FromDiscord> <Elegantbeef> I now wonder if that'd be the solution
[03:27:35] <FromDiscord> <Elegantbeef> to make the body be `(proc(args)) symName`
[03:28:16] <FromDiscord> <Elegantbeef> I dont know if you know how borrows work
[03:28:41] <FromDiscord> <SirOlaf> Not in detail
[03:28:48] <FromDiscord> <SirOlaf> Just going off of what I see
[03:28:57] <FromDiscord> <Elegantbeef> They do not copy code, what they do is store the symbol inside the proc body, and then on `transf` the turn into a call to the base proc, reducing binary size and reducing indirection
[03:29:17] <FromDiscord> <Elegantbeef> So any proc annotated with borrow does not exist past `transf` iirc
[03:30:02] <FromDiscord> <Elegantbeef> So what needs to placed in the body of this proc is the `mgetOrPut` symbol that matches the one we want, and since we dont have an instantiated generic i dont think `semOverloadedCall` will work
[03:31:36] <FromDiscord> <Elegantbeef> I've been wrong before so if you can make my statement wrong i'll be happy üòõ
[03:41:02] <FromDiscord> <SirOlaf> How are generic overrides resolved then
[03:41:18] <FromDiscord> <Elegantbeef> Generic overrides wouldnt be allowed to borrow afaict
[03:41:27] <FromDiscord> <SirOlaf> But they must be resolved somehow
[03:41:31] <FromDiscord> <SirOlaf> Even without borrow
[03:41:35] <FromDiscord> <Elegantbeef> They have more specific types
[03:41:48] <FromDiscord> <Elegantbeef> On instantiation their types are used to dispatch
[03:42:05] <FromDiscord> <Elegantbeef> The dispatch is done on a instantiated type
[03:42:12] <FromDiscord> <SirOlaf> Guess that makes sense
[03:42:45] <FromDiscord> <SirOlaf> Why are borrowed functions different though?
[03:43:02] <FromDiscord> <SirOlaf> Generic functions get ignore from what I know, why are borrowed generic functions not ignored too
[03:43:12] <FromDiscord> <SirOlaf> Until a concrete type is given
[03:43:38] <FromDiscord> <Elegantbeef> The issue is we need to get the symbol
[03:44:02] <FromDiscord> <Elegantbeef> I guess this could be delayed until generic instantiation
[03:44:05] <FromDiscord> <SirOlaf> Point is that the entire resolution should be unneeded until later
[03:44:34] <FromDiscord> <Elegantbeef> So yea at generic instantiation is when you need to make the borrow it seems
[03:44:54] <FromDiscord> <SirOlaf> Yep, that is the idea. I have no idea where to even begin with that though
[03:45:04] <FromDiscord> <Elegantbeef> `semInst`
[03:45:50] <FromDiscord> <Elegantbeef> https://github.com/nim-lang/Nim/blob/devel/compiler/seminst.nim#L403-L404 here i think
[03:48:35] <FromDiscord> <SirOlaf> searchForBorrowProc still needs to do something about it
[03:50:25] <FromDiscord> <Elegantbeef> Check if the symbol flags has  `sfBorrow` if so run that proc, else instantiate body?
[03:52:39] <FromDiscord> <SirOlaf> Gotta slow down there, this is new territory for me
[03:52:52] <FromDiscord> <SirOlaf> seminst that is
[03:55:43] <FromDiscord> <SirOlaf> First question I have is how it can get to generateInstance if searchForBorrowProc fails before
[03:55:59] <FromDiscord> <SirOlaf> Or does it happen the other way around
[03:58:49] <FromDiscord> <Elegantbeef> You dont call search if it's  generic
[03:59:36] <FromDiscord> <Elegantbeef> I guess generic with unresolved types
[04:00:34] <FromDiscord> <SirOlaf> So simply stop semBorrow?
[04:01:17] <FromDiscord> <Elegantbeef> I think so if it has generic parameters  you wait until generic instantiation to borrow
[04:01:21] <FromDiscord> <Elegantbeef> that seems to make sense to me
[04:01:42] <FromDiscord> <SirOlaf> It makes sense, but whether or not that's how things are done in the compiler is a mystery to me
[04:02:16] <FromDiscord> <Elegantbeef> Yea it's yet to be seen if this will work
[04:05:15] <FromDiscord> <SirOlaf> Now how do you check if it has generic params
[04:05:47] <FromDiscord> <SirOlaf> I may or may not have seen a function for that purpose at some point
[04:05:48] <FromDiscord> <Elegantbeef> `procAst[genericParamsPos].len > 0`
[04:06:20] *** Joins: tiorock (~rc@192.12.112.107)
[04:06:21] *** Quits: tiorock (~rc@192.12.112.107) (Changing host)
[04:06:21] *** Joins: tiorock (~rc@user/rockcavera)
[04:06:21] *** rockcavera is now known as Guest1211
[04:06:21] *** Quits: Guest1211 (~rc@user/rockcavera) (Killed (strontium.libera.chat (Nickname regained by services)))
[04:06:21] *** tiorock is now known as rockcavera
[04:06:21] <FromDiscord> <Elegantbeef> There might be
[04:06:36] *** Quits: krux02 (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:07:05] <FromDiscord> <SirOlaf> There is a isGenericRoutine
[04:07:30] <FromDiscord> <Goryleküòö> Hi
[04:07:44] <FromDiscord> <Elegantbeef> Yellow
[04:08:02] <FromDiscord> <SirOlaf> (edit) "There is a isGenericRoutine ... " 03added "in ast"
[04:08:36] <FromDiscord> <SirOlaf> In reply to @SirOlaf "There is a isGenericRoutine": Does what it says
[04:09:37] <FromDiscord> <SirOlaf> So, I can now prevent semBorrow from doing things
[04:10:16] <FromDiscord> <Elegantbeef> Nice we're half way there wooooaaah
[04:11:59] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[04:13:54] <FromDiscord> <SirOlaf> Actually not quite, it doesn't enjoy that
[04:14:33] <FromDiscord> <SirOlaf> Or no, fixed itself
[04:15:56] <FromDiscord> <SirOlaf> Ok it does what it should. Trying to use mgetOrPut creates a new error, which is expected (`Error: internal error: wrong AST for borrowed symbol`)
[04:16:13] <FromDiscord> <SirOlaf> So now it has to be made usable
[04:17:49] <FromDiscord> <SirOlaf> Now how should generateInstance deal with this
[04:18:38] <FromDiscord> <Elegantbeef> Check if the `sfBorrow in procSym.flags` if so make the body the borrowed symbol, otherwise instantiate the body
[04:20:43] <FromDiscord> <SirOlaf> How can I get the body though
[04:21:12] <FromDiscord> <Elegantbeef> `procAst[bodyPos] = semBorrowProc`
[04:23:04] <FromDiscord> <SirOlaf> `n[bodyPos] = fn.ast` ?
[04:23:26] <FromDiscord> <SirOlaf> Or using getBody
[04:23:45] <FromDiscord> <Elegantbeef> semBorrow writes to body
[04:24:01] <FromDiscord> <Elegantbeef> So you just do `semBorrow` in the tree if it's supposed to borrow
[04:24:01] <FromDiscord> <Elegantbeef> Otherwise you instantiate the body
[04:25:13] <FromDiscord> <SirOlaf> That is a bit of a dilemma
[04:25:20] <FromDiscord> <Elegantbeef> Why?
[04:25:26] <FromDiscord> <SirOlaf> semBorrow can't succeed, can it
[04:25:36] <FromDiscord> <Elegantbeef> it can at the point of the generic isntantiation
[04:25:46] <FromDiscord> <Elegantbeef> Since we now have a concrete type instead of a generic inst
[04:25:52] <FromDiscord> <Elegantbeef> generic invocation\
[04:26:04] <FromDiscord> <SirOlaf> Oh yeah, we finally got concrete types
[04:28:07] *** Joins: rockcavera (~rc@192.12.112.107)
[04:28:08] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[04:28:08] *** Joins: rockcavera (~rc@user/rockcavera)
[04:28:15] <FromDiscord> <SirOlaf> Problem is that I don't have access to it from seminst
[04:28:38] <FromDiscord> <Elegantbeef> Reorder it so you do
[04:28:48] <FromDiscord> <SirOlaf> Great plan
[04:28:55] <FromDiscord> <SirOlaf> Issue is that I also can't import it
[04:29:27] <FromDiscord> <Elegantbeef> You can move code around
[04:30:02] <FromDiscord> <SirOlaf> Wouldn't I need to move semBorrow into a different file then
[04:30:04] <FromDiscord> <SirOlaf> Seems a bit intrusive
[04:31:05] <FromDiscord> <Elegantbeef> You gotta do what you gotta do
[04:31:31] <FromDiscord> <Elegantbeef> Get it to work then clean it up
[04:35:11] <FromDiscord> <SirOlaf> Issue seems to just be that seminst is included before semstmts. Moving it produces more issues though, so this is quite the puzzle
[04:39:57] <FromDiscord> <Elegantbeef> Just move the borrow stuff into the main module for now
[04:40:50] <FromDiscord> <SirOlaf> Easier said than done
[04:41:10] <FromDiscord> <SirOlaf> searchForBorrowProc for example depends on lots of stuff in semcall
[04:41:16] <FromDiscord> <SirOlaf> So can't move it out
[04:41:39] <FromDiscord> <SirOlaf> Who would have thought the real challenge would be getting the code in the right order
[04:42:45] <FromDiscord> <Elegantbeef> If you send the diff over i could look at it üòÄ
[04:43:54] <FromDiscord> <SirOlaf> Couldn't I just predecalre
[04:43:59] <FromDiscord> <SirOlaf> (edit) "predecalre" => "forward declare"
[04:44:40] <FromDiscord> <Elegantbeef> Depends if the modules are imported or included
[04:44:45] <FromDiscord> <SirOlaf> All is included
[04:44:49] <FromDiscord> <SirOlaf> That's why they all depend on each other
[04:44:53] <FromDiscord> <Elegantbeef> Then perhaps
[05:02:44] <FromDiscord> <SirOlaf> In reply to @SirOlaf "Actually got it to": We are back at this issue
[05:03:39] <FromDiscord> <Elegantbeef> Is the type a generic instance or generic invocation?
[05:03:52] <FromDiscord> <SirOlaf> Which one
[05:04:11] <FromDiscord> <Elegantbeef> Inside the proc we've declared
[05:04:23] <FromDiscord> <Elegantbeef> IE is `DefaultTable`
[05:04:49] <FromDiscord> <SirOlaf> How or where would I check this
[05:04:52] <FromDiscord> <SirOlaf> Not quite following
[05:05:40] <FromDiscord> <Elegantbeef> check the `ast[paramPos][0].typ.kind`
[05:06:28] <FromDiscord> <Elegantbeef> If it's a `genericInvocation` we're lacking the instantiation info in our proc header
[05:07:03] <FromDiscord> <SirOlaf> In reply to @Elegantbeef "check the `ast[paramPos][0].typ.kind`": Which ast though
[05:07:14] <FromDiscord> <SirOlaf> At what stage of this process
[05:07:37] <FromDiscord> <Elegantbeef> Before you `semBorrow` do `echo n[paramPos][1.typ.kind]`
[05:07:49] <FromDiscord> <Elegantbeef> `echo n[paramPos][1].typ.kind`\
[05:08:06] <FromDiscord> <Elegantbeef> Inside the generate instance
[05:08:31] <FromDiscord> <SirOlaf> Do you mean genericParamsPos?
[05:08:37] <FromDiscord> <SirOlaf> Because paramPos is not declared
[05:08:38] <FromDiscord> <Elegantbeef> No
[05:09:09] <FromDiscord> <Elegantbeef> `paramsPos`\
[05:10:43] <FromDiscord> <SirOlaf> That gives me sigsegv
[05:10:53] <FromDiscord> <SirOlaf> So not quite the output you might want
[05:11:39] <FromDiscord> <Elegantbeef> You did do it only inside the borrow branch right?
[05:12:39] <FromDiscord> <SirOlaf> I put an if statement at the location you showed on github and placed the echo there
[05:14:00] <FromDiscord> <Elegantbeef> odd
[05:17:19] <FromDiscord> <SirOlaf> It does not have a paramsPos
[05:17:23] <FromDiscord> <SirOlaf> Not long enough
[05:17:38] <FromDiscord> <SirOlaf> Or no that's wrong
[05:18:59] <FromDiscord> <SirOlaf> It does not have a typ
[05:19:16] <FromDiscord> <Elegantbeef> it might be `result.ast` instead
[05:19:35] <FromDiscord> <Elegantbeef> Seems that might be the AST we want to use
[05:20:04] <FromDiscord> <Elegantbeef> so pass that to sem borrow instead perhaps
[05:20:09] <FromDiscord> <SirOlaf> Sure
[05:24:10] <FromDiscord> <SirOlaf> That doesn't have typ either
[05:25:17] <FromDiscord> <SirOlaf> Also same type mismatch error
[05:28:53] <FromDiscord> <Elegantbeef> Hmppph
[05:29:27] <FromDiscord> <Elegantbeef> Could you shoot me the git diff, i want to see something without bugging you
[05:30:28] <FromDiscord> <SirOlaf> Bold of you to assume I got anything set up for that
[05:31:01] <FromDiscord> <Elegantbeef> \`git diff \>\> "distinct.diff"
[05:31:08] <FromDiscord> <Elegantbeef> Then just throw that file on a site and send it
[05:32:16] <FromDiscord> <SirOlaf>  https://media.discordapp.net/attachments/371759389889003532/928830869077131284/distinct.diff
[05:32:20] <FromDiscord> <SirOlaf> Not many changes to see
[05:35:57] <FromDiscord> <Elegantbeef> Hmm could you do `git diff --no-color` seems that is not playing nice
[05:37:33] <FromDiscord> <SirOlaf>  https://media.discordapp.net/attachments/371759389889003532/928832197555789834/distinct.diff
[05:38:19] <FromDiscord> <Elegantbeef> Ok it's just not playing nice whatsoever
[05:39:22] <FromDiscord> <Elegantbeef> Are you by anychance using powershell?
[05:39:27] <FromDiscord> <SirOlaf> That I am
[05:39:39] <FromDiscord> <Elegantbeef> Ah apparently it ruins git diffs
[05:39:44] <FromDiscord> <Elegantbeef> Guess i'll manually apply the patch
[05:39:53] <FromDiscord> <SirOlaf> Good to know
[05:51:18] <FromDiscord> <Elegantbeef> Oh you were passing `fn` to `semBorrow` which is the uninstantiated symbol
[05:51:51] <FromDiscord> <SirOlaf> What is supposed to be passed
[05:51:58] <FromDiscord> <Elegantbeef> `result`
[05:52:07] <FromDiscord> <SirOlaf> So result.ast and result
[05:52:09] <FromDiscord> <Elegantbeef> It then causes an issue with the mismatch at the 3rd position in my test file
[05:52:19] <FromDiscord> <Elegantbeef> i think it can be `n`
[05:53:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ljs
[05:54:10] <FromDiscord> <SirOlaf> I don't have that error
[05:54:44] <FromDiscord> <Elegantbeef> What do you have?
[05:55:03] <FromDiscord> <SirOlaf> Currently Error: no symbol to borrow from found again
[05:55:06] <FromDiscord> <SirOlaf> Lemme recompile
[05:55:29] <FromDiscord> <Elegantbeef> Little hint if you arent already do `./koch temp c ./someFIle.nim` if you arent already
[05:55:44] <FromDiscord> <Elegantbeef> I guess on windows it's `koch.exe`?
[05:56:06] <FromDiscord> <SirOlaf> I tried that and promptly gave up
[05:56:19] <FromDiscord> <SirOlaf> Complains about a missing lib file or something
[05:56:24] <FromDiscord> <Elegantbeef> Ah
[05:56:35] <FromDiscord> <Elegantbeef> Not on windows so cannot help much there
[06:01:05] <FromDiscord> <SirOlaf> Did you change anything other than fn
[06:01:27] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[06:02:48] <FromDiscord> <Elegantbeef> did change the `else` to an `elif` statement
[06:03:07] <FromDiscord> <Elegantbeef> `    elif c.inGenericContext == 0:` instead of `else` for the instantiate body
[06:03:29] *** Quits: neurocyte091 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[06:03:29] *** neurocyte0917 is now known as neurocyte091
[06:03:42] <FromDiscord> <SirOlaf> Isn't that checked above
[06:04:32] <FromDiscord> <Elegantbeef> It was the check that was the prior
[06:04:36] <FromDiscord> <Elegantbeef> You removed it, i put it back
[06:05:19] <FromDiscord> <SirOlaf> Pretty sure I didn't remove anything
[06:05:30] <FromDiscord> <SirOlaf> Either way, this is odd
[06:05:46] <FromDiscord> <Elegantbeef> there was an `if c.genericContext ==0` guarding the body instantiation
[06:05:48] <FromDiscord> <Elegantbeef> When you added the sym check you removed that
[06:06:04] <FromDiscord> <SirOlaf> It's there for me
[06:06:32] <FromDiscord> <SirOlaf> And the diff show it too
[06:06:52] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/928839576427061339/image.png
[06:06:58] <FromDiscord> <Elegantbeef> Oh nvm i see
[06:07:02] <FromDiscord> <Elegantbeef> You made this go inside
[06:07:30] <FromDiscord> <SirOlaf> Was it not supposed to go inside?
[06:08:18] <FromDiscord> <Elegantbeef> I just moved the `if c.genericContext == 0` to an elif branch
[06:08:42] <FromDiscord> <Elegantbeef> Dont think so
[06:08:45] <FromDiscord> <Elegantbeef> Could be wrong
[06:10:16] <FromDiscord> <SirOlaf> How on earth can your error be different from mine
[06:10:26] <FromDiscord> <Elegantbeef> Cause i have different flow
[06:11:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[06:11:42] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:11:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ljy
[06:12:17] <FromDiscord> <SirOlaf> No I changed it
[06:13:01] <FromDiscord> <Elegantbeef> mydiff.diff https://media.discordapp.net/attachments/371759389889003532/928841123147960320/mydiff.diff
[06:14:43] <FromDiscord> <SirOlaf> That is identical
[06:15:09] <FromDiscord> <SirOlaf> What code are you testing with
[06:15:35] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ljz
[06:15:44] <FromDiscord> <Elegantbeef> Reduced the complexity a bit to still catch edge cases
[06:15:49] <FromDiscord> <Elegantbeef> But also makes it easier to reason
[06:15:55] <FromDiscord> <SirOlaf> That does now give me the same error
[06:16:29] <FromDiscord> <SirOlaf> Must have changed some strange stuff in my test then
[06:17:08] <FromDiscord> <Elegantbeef> The issue now is that we're skipping the generic for `key` so not getting a `DefaultTable` there
[06:17:18] <FromDiscord> <Elegantbeef> I mean `val`
[06:17:30] <FromDiscord> <SirOlaf> How is that
[06:17:41] <FromDiscord> <SirOlaf> Seems strange
[06:17:45] <FromDiscord> <Elegantbeef> Cause it's skipping over all distincts
[06:17:58] <FromDiscord> <Elegantbeef> But we want `B` to stay whatever `B` is
[06:19:42] <FromDiscord> <SirOlaf> Where could it be skipping
[06:20:06] <FromDiscord> <SirOlaf> Guess stacktrace kinda says
[06:20:09] <FromDiscord> <Elegantbeef> line 727 of semcall
[06:20:21] <FromDiscord> <SirOlaf> Also my weird koch error was because of working dir, working now
[06:24:51] <nixfreaknim[m]> I having lots of issues with understanding inline procs , I know its stupid but can someone please show me in this example ? https://play.nim-lang.org/#ix=3LjA
[06:25:18] <nixfreaknim[m]> I would I call both of those procs correctly ?
[06:25:40] <FromDiscord> <Rika> What‚Äôs the issue?
[06:25:46] <FromDiscord> <Rika> Just call them like normal
[06:26:27] <FromDiscord> <Elegantbeef> Also you may want to do `i: 0..2`
[06:26:27] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3LjB
[06:26:27] <FromDiscord> <Elegantbeef> Works fine
[06:28:02] <FromDiscord> <Elegantbeef> Well olaf i'm at the end of my guesses of what can be done
[06:28:08] <FromDiscord> <Elegantbeef> So good luck from here
[06:28:27] <FromDiscord> <SirOlaf> Thanks for the assistance up till now
[06:30:12] <FromDiscord> <Elegantbeef> No problem, you're closer to having it work than i was
[06:42:12] <FromDiscord> <Varriount> How would I go about compiling Nim to WebAssembly?
[06:45:05] <FromDiscord> <Elegantbeef> Impbox has a wasm file for nico that i used
[06:45:15] <FromDiscord> <Elegantbeef> Which i think is derived from the tutorial treeform has
[07:25:42] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[07:26:32] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[07:39:38] *** Gustavo6046_ is now known as Gustavo6046
[08:05:06] <NimEventer> New post on r/nim by derrpwave: nip: a simple package to get your public IP address with nim, see https://reddit.com/r/nim/comments/rxyp67/nip_a_simple_package_to_get_your_public_ip/
[08:06:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:20:11] <FromDiscord> <michaelb> sent a code paste, see https://play.nim-lang.org/#ix=3LjY
[08:20:33] <FromDiscord> <michaelb> if you have dig and awk installed, try pasting that line in your terminal üòÑ
[08:21:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 240 seconds)
[08:22:32] <FromDiscord> <Elegantbeef> Who's going to make the issue closing the client and wrapping the echo with a `when isMainModule`
[08:44:33] *** Joins: cyraxjoe (~joe@201.150.10.60)
[08:48:57] *** Quits: cyraxjoe (~joe@201.150.10.60) (Ping timeout: 240 seconds)
[08:49:16] *** Joins: cyraxjoe (~joe@201.150.10.60)
[08:54:11] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[09:11:16] *** Quits: cyraxjoe (~joe@201.150.10.60) (Quit: I'm out!)
[09:13:04] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:13:11] *** Joins: cyraxjoe (~joe@201.150.10.60)
[09:16:45] *** Quits: cyraxjoe (~joe@201.150.10.60) (Client Quit)
[09:18:20] *** Joins: cyraxjoe (~joe@201.150.10.60)
[09:23:01] *** Joins: MightyJoe (~joe@201.150.10.60)
[09:23:05] *** Quits: cyraxjoe (~joe@201.150.10.60) (Ping timeout: 256 seconds)
[09:39:52] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[10:43:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[10:51:09] <FromDiscord> <eyecon> Why is `strformat` singular but `sequtils` plural? I always forget which is which. Why is `algorithm` singular but `setutils` plural?
[10:51:23] <FromDiscord> <eyecon> Is there a system to it or is it just random?P
[10:51:29] <FromDiscord> <eyecon> (edit) "random?P" => "random?"
[10:53:11] <FromDiscord> <Solitude> strformat implements single thing
[10:53:18] <FromDiscord> <Solitude> algorithm shoud've been plural, i guess
[10:53:43] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[10:53:50] <FromDiscord> <congusbongus> seems random to me‚Üµimo they should all have been singular, then there's no chance of confusion
[10:56:34] <FromDiscord> <xflywind> https://nim-lang.org/docs/contributing.html#evolving-the-stdlib-conventions
[10:56:55] <FromDiscord> <xflywind> > New module names should prefer plural form whenever possible, e.g.: std/sums.nim instead of std/sum.nim. In particular, this reduces chances of conflicts between module name and the symbols it defines.
[11:06:58] *** Joins: PMunch (~PMunch@user/pmunch)
[11:15:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:21:25] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[13:01:17] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (Ping timeout: 240 seconds)
[13:18:47] *** Quits: neurocyte091 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[13:20:00] *** Joins: neurocyte0917 (~neurocyte@user/neurocyte)
[13:54:52] <FromDiscord> <evoalg> @ElegantBeef I wanna ask you further about `mixin` but if you're about to hit the sack I'll wait until tomorrow?
[13:55:12] <FromDiscord> <Elegantbeef> Feel free to ask right now
[13:55:56] <FromDiscord> <evoalg> https://play.nim-lang.org/#ix=3Lls ... it doesn't seem to make any difference?
[13:56:36] <FromDiscord> <Elegantbeef> That's a template so the mixin isnt even really needed
[13:56:59] <FromDiscord> <evoalg> ahhh ... I was trying to follow what you were saying about it the other day and I got confused üòâ
[13:57:40] <FromDiscord> <evoalg> if I don't need it I don't have to worry about it I guess üôÇ
[13:58:30] <FromDiscord> <Elegantbeef> It's needed in generics more than templates
[13:58:41] <FromDiscord> <Elegantbeef> Though i think it can be used in some cases of templates to solve issues
[13:59:09] <FromDiscord> <evoalg> gotcha ... I'll test in generics - thank you!
[13:59:36] <FromDiscord> <Elegantbeef> I'll save you the effort https://play.nim-lang.org/#ix=3Llv
[13:59:45] <FromDiscord> <Elegantbeef> You can see in this case first `doThing` isnt declared before the proc
[13:59:58] <FromDiscord> <Elegantbeef> Secondly the first `doThing` in scope is used
[14:00:04] <FromDiscord> <Elegantbeef> in both cases
[14:00:19] <FromDiscord> <Elegantbeef> Which is cause a single procedure is generated
[14:00:32] <FromDiscord> <Elegantbeef> one for `showcaseMagic2[int]` is used regardless where you call it from after first instantiation
[14:01:00] <FromDiscord> <evoalg> gosh you always come through! ... I will absorb....
[14:01:37] <FromDiscord> <Elegantbeef> Say you want to have a routine that you can change the behaviour on a per module or even per scope basis, you'd want the template
[14:01:56] <FromDiscord> <Elegantbeef> But if you just want a routine that you implement in a given module and it always calls the right stuff you'd mixin with the generic
[14:02:53] <FromDiscord> <evoalg> nice ... and so you personally use mixin?
[14:03:05] <FromDiscord> <Elegantbeef> If it's needed
[14:03:07] <FromDiscord> <Elegantbeef> Same with bind
[14:03:47] <FromDiscord> <Elegantbeef> bind is the opposite of mixin, instead of taking the scope of the instantiation into account it takes only the scope of declaration
[14:04:10] <FromDiscord> <Elegantbeef> So if you never want a procedure to be overridden in a generic you'd do `bind doThing`
[14:04:54] <FromDiscord> <evoalg> oh wow thank you ... this will take me a little while ... I may be some time üòâ
[14:05:25] <FromDiscord> <Elegantbeef> It's all about generics, best might be to  play with multiple files adding/removing procs before the generic one, exporting/unexporting them
[14:05:50] <FromDiscord> <Elegantbeef> one could probably do a whole talk on generics and open/closed symbols
[14:06:48] <FromDiscord> <evoalg> gosh, and this isn't even getting onto advanced stuff like macros
[14:07:03] <FromDiscord> <Elegantbeef> Well macros play off this stuff
[14:07:20] <FromDiscord> <Elegantbeef> If you understand what a symbol is and what it means to be closed/open it helps
[14:08:09] <FromDiscord> <evoalg> I don't know what they mean ... I ask you a question and I always end up with two new questions üòÑ
[14:08:21] <FromDiscord> <Elegantbeef> A symbol is just a name that points to something
[14:08:29] <FromDiscord> <Elegantbeef> `int` is a name that points to a type
[14:08:41] <FromDiscord> <Elegantbeef> `var a = 100` `a` is a name that points to that variable
[14:09:05] <FromDiscord> <Elegantbeef> Being opened means the choice isnt defined yet
[14:09:39] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Llz
[14:09:59] <FromDiscord> <Elegantbeef> inside `doOtherThing` `doThing` is open since it's uncertain what it could be, but it knows that it is either the float/int overload
[14:10:32] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3LlB
[14:10:42] <FromDiscord> <Elegantbeef> Though possibly not actually closed in the AST, but it's the idea that counts
[14:11:55] <FromDiscord> <evoalg> gotcha ok, and so proc calls can be open like `doThing(a)` in the first eg is open
[14:12:56] <FromDiscord> <evoalg> proc calls themselves must be just another symbol
[14:13:14] <FromDiscord> <Elegantbeef> They're not but that's what you'll learn with macros
[14:13:25] <FromDiscord> <Elegantbeef> They're a `call` and the first child of that is a symbol
[14:13:36] <FromDiscord> <Elegantbeef> So close
[14:14:21] <FromDiscord> <Elegantbeef> But given you arent touching macros yet it doesnt matter üòõ
[14:15:17] <FromDiscord> <Elegantbeef> Point being all named things are symbols and an open symbol is when there is ambiguity that will be resolved, a close symbol is a symbol that's lock at declaration to not consider instantiation scope
[14:17:38] <FromDiscord> <evoalg> nice thank you ... as always you're awesome! It feels good to understand some of this
[14:19:22] <FromDiscord> <Elegantbeef> No problem and good day(night)
[14:46:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[14:49:54] <FromDiscord> <Shiba> Can you run nim code on nim?
[14:50:29] <FromDiscord> <Shiba> Cna you run nim code in nim
[14:50:42] <FromDiscord> <Shiba> (edit) "nim" => "nim?"
[14:51:47] <FromDiscord> <Rika> ?
[14:51:48] <FromDiscord> <valerga> like macros?
[14:51:56] <FromDiscord> <Rika> The VM? NimScript?
[14:52:11] <FromDiscord> <Shiba> Yes
[14:52:27] <FromDiscord> <Rika> `nim e script.nims`
[14:52:55] <FromDiscord> <Rika> Limitations apply
[14:53:01] <FromDiscord> <valerga> i still need to make my first macro, i don't really understand  them
[14:53:49] <FromDiscord> <valerga> what's a good exercise to get the subject?
[14:54:24] <FromDiscord> <valerga> the docs pass me by
[14:56:26] <FromDiscord> <Rika> In reply to @valerga "what's a good exercise": When you want to do something very repetitive and a proc can‚Äôt do it because you need to pass in code as data
[15:00:43] <FromDiscord> <valerga> tbh i've never had such problem
[15:01:01] <FromDiscord> <valerga> maybe because I never considered it
[15:02:25] <FromDiscord> <evoalg> In reply to @valerga "maybe because I never": there is https://dev.to/beef331/demystification-of-macros-in-nim-13n8 but I think Elegantbeef said some of that is outdated with new stuff?
[15:03:09] <FromDiscord> <evoalg> also https://forum.nim-lang.org/t/8658 ?
[15:10:22] <NimEventer> New thread by Pietroppeter: One Language to Rule the Mole, see https://forum.nim-lang.org/t/8780
[15:15:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[15:34:28] <FromDiscord> <Rika> OMG thats cute
[15:40:06] <madprops> haha nice, i dig the mole
[15:40:34] <FromDiscord> <Rika> its good
[16:11:18] <FromDiscord> <SirOlaf> Feel like the bug from yesterday is on its last legs. It manages to resolve the overload correctly and just fails during type comparison
[16:22:34] <FromDiscord> <valerga>  https://media.discordapp.net/attachments/371759389889003532/928994522086654022/backdrop-1920.jpg
[16:22:45] <FromDiscord> <valerga> a mole and his friends
[16:22:54] <FromDiscord> <SirOlaf> In reply to @SirOlaf "Feel like the bug": In fact, disabling the type check makes it work completely
[16:23:20] <FromDiscord> <SirOlaf> So just gotta make it accept the check
[16:25:51] <FromDiscord> <SirOlaf> Although [] isn't quite accepted for some reason
[16:27:53] <FromDiscord> <SirOlaf> sent a code paste, see https://play.nim-lang.org/#ix=3LmM
[16:33:01] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[16:36:41] *** Quits: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21) (Quit: WeeChat 3.4)
[17:05:51] <FromDiscord> <eyecon> In reply to @valerga "what's a good exercise": There's https://dev.to/beef331/demystification-of-macros-in-nim-13n8
[17:06:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[17:11:21] * qwr wouldn't say that something needs to be very repetative with macros, just use them when no other language feature can remove repeatation/boilerplate that annoys you
[17:11:53] <FromDiscord> <Rika> qwr: its a "general use case", not the only
[17:11:54] <FromDiscord> <Rika> just an idea
[17:12:07] <FromDiscord> <Rika> you can also use it to convert "ugly code" into nicer-looking code
[17:28:54] <FromDiscord> <pietroppeter> someone stop me... I may even have submitted the mole thread to an orange site...
[17:30:28] *** Joins: rockcavera (~rc@192.12.112.107)
[17:30:28] *** Quits: rockcavera (~rc@192.12.112.107) (Changing host)
[17:30:28] *** Joins: rockcavera (~rc@user/rockcavera)
[17:45:46] <FromDiscord> <SirOlaf> Anyone know how the compiler resolves nested generics
[17:52:27] *** Joins: tiorock (~rc@192.12.112.107)
[17:52:27] *** Quits: tiorock (~rc@192.12.112.107) (Changing host)
[17:52:27] *** Joins: tiorock (~rc@user/rockcavera)
[17:52:27] *** rockcavera is now known as Guest2947
[17:52:27] *** tiorock is now known as rockcavera
[17:55:56] *** Quits: Guest2947 (~rc@user/rockcavera) (Ping timeout: 256 seconds)
[18:00:27] *** Joins: arkurious (~arkurious@user/arkurious)
[18:23:35] <PMunch> @SirOlaf, yes
[18:23:44] <PMunch> Well I certainly hope so
[18:24:18] <PMunch> @pietroppeter, I kinda like the idea of using a mole as a mascot
[18:24:41] <FromDiscord> <SirOlaf> Do you know? Because this generic borrow breaks apart for nested generics
[18:24:59] <FromDiscord> <SirOlaf> Picks the wrong candidate or something, still digging
[18:30:17] <FromDiscord> <SirOlaf> Decides that `proc (a: T, i: I: Ordinal, x: sink S)` is better than `proc (t: var DefaultTable[[]=.A, []=.B], key: A, val: sink B)`
[18:33:05] <FromDiscord> <Patitotective> Are nimble packages insenstive-case too?
[18:33:08] <FromDiscord> <Patitotective> (edit) "insenstive-case" => "insensitive-case"
[18:38:21] <FromDiscord> <Rika> package names?
[18:40:39] <FromDiscord> <Patitotective> yes
[18:40:50] <PMunch> @SirOlaf, I have no idea
[18:41:13] <PMunch> I was just joking by saying that someone probably knows, since you asked if anyone knows
[18:41:20] <PMunch> @Patitotective, nope
[18:41:37] <FromDiscord> <Patitotective> Ok thanks
[18:59:31] <FromDiscord> <ajusa> Is it possible to use strformat at run time?
[19:01:08] <FromDiscord> <ajusa> that doesn't make sense I guess since strformat can evaluate expressions, which requires it to be done at compile time. is strutils interpolation the best option at runtime then?
[19:02:51] <FromDiscord> <Rika> what?
[19:03:28] <FromDiscord> <Rika> do you mean `&some_runtime_string`?
[19:03:29] <FromDiscord> <Rika> no
[19:04:07] <FromDiscord> <ajusa> In reply to @Rika "do you mean `&some_runtime_string`?": yes, and I realize it isn't possible now. If the string is known at compile time though can I still do it?
[19:04:19] <FromDiscord> <Rika> well yes
[19:04:35] <FromDiscord> <Rika> !eval import strformat; let a = 2; let b = 3; const c = "{a+b}"; echo &c
[19:04:38] <NimBot> Compile failed: /usercode/in.nim(1, 65) Error: type mismatch: got <system.string>
[19:04:43] <FromDiscord> <Rika> whoaaaat
[19:04:49] <FromDiscord> <Rika> maybe static: ?
[19:05:00] <FromDiscord> <Rika> dunno im tired i dont want to deal with this
[19:05:28] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lo8
[19:06:11] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/JdH
[19:06:22] <FromDiscord> <Rika> how do you know my age, thats sus
[19:06:27] <FromDiscord> <Rika> also no
[19:06:31] <FromDiscord> <Rika> technically no
[19:06:41] <FromDiscord> <Solitude> In reply to @Patitotective "Can I create a": stop pythoning
[19:06:42] <FromDiscord> <Rika> you will have to wrap your types in a variant type
[19:07:04] <FromDiscord> <Rika> yeah idk at that point use an object
[19:07:04] <FromDiscord> <Patitotective> In reply to @Solitude "stop pythoning": ;-;
[19:07:18] <FromDiscord> <Solitude> every single python refugee asks that question
[19:07:47] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Lo9
[19:08:13] <FromDiscord> <Solitude> sent a code paste, see https://play.nim-lang.org/#ix=3Loa
[19:08:53] <FromDiscord> <Patitotective> In reply to @Solitude "read a tutorial https://nim-lang.org/docs/tut1.html": no, i mean, i dont want an object
[19:09:06] <FromDiscord> <Patitotective> but maybe a tuple hmmmm
[19:09:12] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Lob
[19:09:33] <FromDiscord> <Patitotective> how would i use it?
[19:11:14] <NimEventer> New thread by Xigoi: Nimdenter, see https://forum.nim-lang.org/t/8781
[19:11:28] <FromDiscord> <Rika> sent a code paste, see https://play.nim-lang.org/#ix=3Lod
[19:11:49] <FromDiscord> <Rika> In reply to @NimEventer "New thread by Xigoi:": holy fuck
[19:12:08] <FromDiscord> <Patitotective> hmmmmmmmmmmmm‚Üµi will use an object, no one want tables
[19:12:09] <FromDiscord> <Patitotective> hehe
[19:12:15] <FromDiscord> <Patitotective> thanks anyways
[19:12:16] <FromDiscord> <Patitotective> üôÉ
[19:15:03] <FromDiscord> <Patitotective> well, hehe, im really trying to simulate (or emulate if you think) this library in nim https://patitotective.github.io/PREFS/
[19:15:08] <FromDiscord> <Patitotective> any suggestions?
[19:15:09] <FromDiscord> <Patitotective> lol
[19:15:13] <FromDiscord> <Patitotective> (edit) "https://patitotective.github.io/PREFS/" => "https://patitotective.github.io/PREFS"
[19:19:10] <FromDiscord> <Rika> the object variant
[19:19:47] <FromDiscord> <Rika> it seems well defined and the types arent variable, so yeah its an appropriate use case
[19:20:16] <FromDiscord> <Rika> you can see that its used in the json module
[19:20:26] <FromDiscord> <Patitotective> let me see
[19:21:14] <FromDiscord> <ajusa> In reply to @NimEventer "New thread by Xigoi:": This is hilarious
[19:25:21] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3Loq
[19:26:17] *** Joins: pro (~pro@user/pro)
[19:30:04] <FromDiscord> <Rika> pretty much
[19:56:19] <FromDiscord> <SirOlaf> Why does magic bypass matchesAux in matches
[20:38:06] <FromDiscord> <Patitotective> should i follow this style guide? https://nim-lang.org/docs/nep1.html
[20:41:27] <FromDiscord> <auxym> probably. I think it's the style most of the community uses.
[21:11:17] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LoX
[21:13:19] <FromDiscord> <eyecon> How does the compiler distinguish `a.b` referring to the value of a (potentially callable) field `b` of `a` or the result of `b(a)`? Simply based on the non-existence of the other?
[21:14:40] <FromDiscord> <eyecon> E.g. I say `if s.len == 3` and this is understood as `if len(s) == 3` but it could also have been a field `len` of the variable `s`
[21:15:47] <FromDiscord> <el__maco> I would assume one of these forms takes precedence and that's it?
[21:20:01] <FromDiscord> <eyecon> I'm on a roll with compiler crashes I guess: https://play.nim-lang.org/#ix=3Lp3
[21:21:11] <FromDiscord> <eyecon> sent a code paste, see https://play.nim-lang.org/#ix=3Lp5
[21:21:31] <FromDiscord> <ajusa> In reply to @eyecon "This is an honor:": I don't think that's a compiler crash? You're calling a function that hasn't been initialized
[21:22:01] <FromDiscord> <eyecon> I get that, but shouldn't the compiler catch this case?
[21:22:48] <FromDiscord> <eyecon> Ah, you mean it's a runtime crash
[21:22:53] <FromDiscord> <ajusa> Ye
[21:22:54] <FromDiscord> <eyecon> Sorry, you're right of course
[21:23:16] <FromDiscord> <eyecon> My point was that it could have been caught at the compilation phase
[21:23:22] <FromDiscord> <ajusa> Adding `myspecial.len = proc(): int = 5` and reordering code to make sense results in it working.
[21:24:00] <FromDiscord> <SirOlaf> Might be a bug with default object constructors
[21:25:03] <FromDiscord> <SirOlaf> If not, only way to prevent would be tracking if it's initialized and that's hard
[21:25:11] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lp8
[21:25:15] <FromDiscord> <ajusa> See https://nim-lang.org/docs/manual_experimental.html#strict-not-nil-checking
[21:26:33] <FromDiscord> <ajusa> I believe Araq has mentioned or alluded to making not nil the default for Nim 2, as that'd be a pretty large breaking change (many people use nil, especially with C libraries). That's one of the reasons it isn't enabled by default right now.
[21:27:25] <FromDiscord> <eyecon> Yes, explicit nillability (nilability?) would change so much
[21:27:50] <FromDiscord> <eyecon> In reply to @el__maco "I would assume one": I guess it's the field access that has higher precedence: https://play.nim-lang.org/#ix=3Lp9
[21:28:13] <FromDiscord> <SirOlaf> In reply to @eyecon "Yes, explicit nillability (nilability?)": Sounds like it would also change the compile times in a bad way
[21:28:56] <FromDiscord> <eyecon> It's good to know that `b(a)` remains unambiguous though
[21:30:06] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.4)
[21:36:46] <FromDiscord> <ajusa> Is there a parseSomeNumber or something similar that parses to an Int, then tries parsing to a float?
[21:37:13] <FromDiscord> <eyecon> But which type would it return?
[21:37:23] <FromDiscord> <ajusa> Some number is a type
[21:37:33] <FromDiscord> <ajusa> Oh wait it mostly for procs, never mind
[21:38:00] <FromDiscord> <ajusa> Guess I'll do it explicitly and use a template for reusability
[21:46:19] *** Quits: mikko (~mikko@2a02:7b40:d418:6a61::1) (Quit: WeeChat 2.7.1)
[22:10:30] *** Joins: krux02_ (~krux02@p200300e81723dd00b48b627b8314596f.dip0.t-ipconnect.de)
[22:12:22] <FromDiscord> <auxym> SomeNumber is a typeclass, not a type
[22:14:04] <FromDiscord> <auxym> The return type of a proc needs to be known at compile time. Nim is a static language, your proc (or template) cannot decide to return either a float or an int based on its input at runtime.
[22:15:55] *** Joins: user_ (~user@185.30.90.116)
[22:16:38] *** Quits: user_ (~user@185.30.90.116) (Client Quit)
[22:16:44] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lpp
[22:19:26] <FromDiscord> <auxym> That could work, but I think you'd need `{.dirty.}` or `{.inject.}` otherwise `n` will get gensym'd to some garbled name.
[22:19:56] <FromDiscord> <auxym> Oh I see you're passing it as a param
[22:20:10] <FromDiscord> <auxym> should be good
[22:21:38] <FromDiscord> <auxym> As long as everything in `body` assumes `n` is SomeNumber and not specifically a float or int.
[22:21:55] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lps
[22:22:12] <FromDiscord> <ajusa> I'm pretty proud of this for validation, reduces a ton of the code I'd need to write otherwise.
[22:23:14] <FromDiscord> <auxym> Yeah, that's what great about nim templates and macros
[22:23:30] <FromDiscord> <ajusa> sent a code paste, see https://play.nim-lang.org/#ix=3Lpt
[22:30:18] <NimEventer> New thread by JohnAD: Fully understanding closure iterators, see https://forum.nim-lang.org/t/8782
[22:35:59] *** Parts: pippin (~pippin@gegl.org) ()
[22:37:12] <FromDiscord> <SirOlaf> Have another question that will probably go unanswered, is there a function to recursively the basetypes of distinct generics
[22:37:20] <FromDiscord> <SirOlaf> (edit) "Have another question that will probably go unanswered, is there a function to recursively ... the" 03added "determine"
[22:37:44] <FromDiscord> <SirOlaf> Specifically of their type parameters
[22:38:16] <FromDiscord> <SirOlaf> Think that's the thing that's missing to make borrowed generic functions work
[22:42:50] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:45:14] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LpE
[22:45:16] <FromDiscord> <Patitotective> sent a code paste, see https://paste.rs/pC5
[22:45:54] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LpE" => "https://play.nim-lang.org/#ix=3LpF"
[22:46:09] <FromDiscord> <Patitotective> (edit) "https://play.nim-lang.org/#ix=3LpF" => "https://play.nim-lang.org/#ix=3LpG"
[22:48:35] <FromDiscord> <SirOlaf> Should work if you make the prefs argument var
[22:48:43] <FromDiscord> <Patitotective> let me try
[22:52:29] <FromDiscord> <Patitotective> sent a code paste, see https://play.nim-lang.org/#ix=3LpI
[22:53:42] <FromDiscord> <Patitotective> Shouldn't `PContent` be `OrderedTable[string, PrefsNode]`?
[23:12:07] *** Joins: fvs (freevryhei@2600:3c00::f03c:92ff:fe55:ff21)
[23:12:27] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3LpO
[23:12:36] <FromDiscord> <Casey.McMahon> (edit) "https://play.nim-lang.org/#ix=3LpO" => "https://play.nim-lang.org/#ix=3LpP"
[23:14:15] <FromDiscord> <leorize> depends on the degree of complexity you want your system to be capable of
[23:14:43] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[23:15:46] <FromDiscord> <Casey.McMahon> haha, what do you mean?
[23:16:29] <FromDiscord> <leorize> do you want to be aware of cmake's syntax to replace things, or do you just want quick 'n dirty text replacement?
[23:18:10] <FromDiscord> <Casey.McMahon> quick n dirty for now
[23:20:53] <FromDiscord> <Isofruit> So you have a file and want to find and replace "foo bar baz" with "foo bat cave" in that file, as a one-of?
[23:20:59] <FromDiscord> <leorize> the `lines` iterator is useful for extracting lines, then pair it with `regex` or `npeg` to extract what you need
[23:43:11] <FromDiscord> <Patitotective> btw This is how package's structure looks like https://media.discordapp.net/attachments/371759389889003532/929105404829503508/Screenshot_from_2022-01-07_15-07-33.png
[23:43:12] <FromDiscord> <Patitotective> I've got some types defined in `niprefs/prefs.nim` and in `niprefs.nim` I have `import niprefs/prefs` but I'm not able to use those types when importing _niprefs_ with `import niprefs` but it works with `import niprefs/prefs`
[23:43:33] <FromDiscord> <Patitotective> (edit) "I've got some types defined in `niprefs/prefs.nim` and in `niprefs.nim` I have `import niprefs/prefs` but I'm not able to use those types when importing _niprefs_ with `import niprefs` ... but" 03added "in an external module"
[23:46:37] <FromDiscord> <Patitotective> do i need to redefine them in `niprefs.nim`?
[23:47:05] <FromDiscord> <Patitotective> (all types in `niprefs/prefs.nim` are marked with `¬®`)
[23:47:08] <FromDiscord> <Patitotective> (edit) "`¬®`)" => "``)"
[23:47:13] <FromDiscord> <leorize> you have to re-export it in `niprefs`
[23:47:18] <FromDiscord> <leorize> Nim does not have package imports
[23:47:31] <FromDiscord> <Patitotective> In reply to @leorize "you have to re-export": re-export?
[23:47:52] <FromDiscord> <leorize> add `export prefs` in `niprefs.nim`
[23:48:17] <FromDiscord> <Casey.McMahon> sent a code paste, see https://play.nim-lang.org/#ix=3Lq1
[23:48:48] <FromDiscord> <Patitotective> In reply to @leorize "add `export prefs` in": Thanks üôÉ
[23:50:14] <FromDiscord> <leorize> that works, regex would be a touch more efficient but this one is simple enough‚Üµ(@Casey.McMahon)
[23:58:12] <FromDiscord> <leorize> though instead of using a boolean, `break` is much better
[23:58:20] <FromDiscord> <leorize> or `parseutils.skipUntil`
