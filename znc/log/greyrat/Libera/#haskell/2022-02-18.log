[00:06:20] *** Joins: cynomys (~cynomys@user/cynomys)
[00:07:02] *** Joins: alx741 (~alx741@157.100.197.240)
[00:10:18] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:11:32] *** Quits: caubert (~caubert@136.244.111.235) (Quit: WeeChat 3.4)
[00:13:34] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[00:13:52] *** Joins: caubert (~caubert@136.244.111.235)
[00:14:08] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:68e2:4c30:8ca1:db3) (Remote host closed the connection)
[00:15:03] *** Quits: jinsun (~jinsun@user/jinsun) (Read error: Connection reset by peer)
[00:16:21] *** Joins: jinsun (~jinsun@user/jinsun)
[00:16:26] *** Joins: notzmv (~zmv@user/notzmv)
[00:17:23] *** Quits: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba) (Quit: coot)
[00:18:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[00:19:41] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[00:20:46] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Ping timeout: 272 seconds)
[00:23:01] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:23:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[00:28:08] *** Quits: Lobux (~Lobux@nat.ds14.agh.edu.pl) (Quit: Client closed)
[00:28:26] *** Joins: alx741 (~alx741@157.100.197.240)
[00:29:11] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[00:29:13] *** Joins: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net)
[00:30:16] *** Joins: pavonia (~user@user/siracusa)
[00:31:19] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:31:28] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[00:31:48] *** Quits: yauhsien_ (~Yau-Hsien@61-231-32-166.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[00:32:39] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[00:33:44] *** Joins: bollu5 (~bollu@159.65.151.13)
[00:34:43] *** Quits: bollu (~bollu@159.65.151.13) (Read error: Connection reset by peer)
[00:34:43] *** bollu5 is now known as bollu
[00:36:10] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[00:37:25] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[00:37:38] *** Joins: Pickchea (~private@user/pickchea)
[00:44:33] *** Quits: thyriaen (~thyriaen@simnet-nat-pool-185-130-54-205.stargrpns.pp.ua) (Quit: Leaving)
[00:46:53] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 250 seconds)
[00:47:50] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net)
[00:48:26] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:48:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:48:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:48:28] *** Joins: wroathe (~wroathe@user/wroathe)
[00:48:41] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[00:49:08] *** Joins: alx741 (~alx741@157.100.197.240)
[00:50:33] *** Joins: acidjnk (~acidjnk@p200300d0c71a5a433051350517ca1eef.dip0.t-ipconnect.de)
[00:51:10] *** Quits: yauhsien (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 272 seconds)
[00:52:14] *** Joins: sss (~sss@2001:18e8:2:28b9:f000::562b)
[00:52:59] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[00:54:15] *** Quits: capo_greco (~textual@60-241-161-167.static.tpgi.com.au) (Quit: Textual IRC Client: www.textualapp.com)
[00:54:45] <Sqaure> I have been pondering if theres a better solution to my problem. Using the Applicative Validation type i construct records in an evaluation like this:
[00:54:50] <Sqaure> (pure MyRecord) <*> v_ ar <*> v_ brOpt <*> v_ cr <*> cv dr <*> cv ers <*> v_ gr <*> v_ hrOpt <*> v_ ir
[00:56:25] *** Quits: wonko- (~wjc@user/wonko) (Ping timeout: 250 seconds)
[00:57:01] <Sqaure> v_ is just a meaningless wrapper.. its just Applicative at work here. But, as you see. Quite unreadable / non clear. I wonder if there was some trick to applicatively construct records using MyRecord field names instead of positional like above? 
[00:57:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[00:58:30] <[exa]> Sqaure: if I count correctly, there's only like 2 items that can actually cause validation failures, right? (`cv dr`, `cv ers`)
[00:58:39] *** Joins: rusty (~rustyboy@82.77.225.116)
[00:59:52] <[exa]> minor side suggestions: remove pure by swapping the first <*> to <$>, and because there aren't that many parameters to "unwrap", perhaps writing this monadically with `do` would make sense
[01:00:07] <Sqaure> [exa], oh bot "cv" / "v_" are meaningless wrappers.  hmm... i believe all terms can fail.
[01:00:13] *** Joins: alp_ (~alp@user/alp)
[01:00:16] <[exa]> what does v_ do ?
[01:00:22] *** Joins: Unhammer (~Unhammer@user/unhammer)
[01:00:57] <[exa]> if all items can fail, you're probably pretty close to the best possibility here
[01:01:08] <Sqaure> just wrapps the value to a appropriate type. I could have left both "v_" and "cv" out of the example
[01:01:33] <Sqaure> [exa], no Lens trickery possibly? 
[01:01:43] <[exa]> ah so it's some kinda `v_ = fmap MyTypeWrap` or so
[01:02:01] <Sqaure> yeah. exactly
[01:02:11] *** Joins: ub (~Thunderbi@86.107.21.10)
[01:02:36] <[exa]> you might like generics to assemble this kind of structures though
[01:02:52] <Sqaure> Oh? How?
[01:02:53] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 252 seconds)
[01:03:00] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 240 seconds)
[01:03:00] *** Quits: scav (sid309693@id-309693.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[01:03:00] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 240 seconds)
[01:03:00] *** Quits: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[01:03:00] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[01:03:01] *** Quits: philpax_ (sid516926@id-516926.lymington.irccloud.com) (Ping timeout: 240 seconds)
[01:03:23] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Read error: Connection reset by peer)
[01:03:23] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Read error: Connection reset by peer)
[01:03:23] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (Read error: Connection reset by peer)
[01:03:23] *** Quits: Firedancer (sid336191@id-336191.hampstead.irccloud.com) (Read error: Connection reset by peer)
[01:03:23] *** Quits: typetetris (sid275937@id-275937.tinside.irccloud.com) (Read error: Connection reset by peer)
[01:03:24] *** Quits: christiaanb (sid84827@id-84827.lymington.irccloud.com) (Read error: Connection reset by peer)
[01:03:24] *** Quits: hubvu_ (sid495858@id-495858.tinside.irccloud.com) (Ping timeout: 240 seconds)
[01:03:24] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[01:03:24] *** Quits: supersven (sid501114@id-501114.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[01:03:30] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[01:03:30] *** Joins: gregberns__ (sid315709@id-315709.helmsley.irccloud.com)
[01:03:31] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[01:03:31] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[01:03:32] *** Joins: caasih (sid13241@id-13241.ilkley.irccloud.com)
[01:03:32] *** Joins: scav (sid309693@id-309693.helmsley.irccloud.com)
[01:03:32] *** Joins: supersven (sid501114@id-501114.ilkley.irccloud.com)
[01:03:32] *** Joins: Firedancer (sid336191@id-336191.hampstead.irccloud.com)
[01:03:32] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[01:03:33] *** Joins: philpax_ (sid516926@id-516926.lymington.irccloud.com)
[01:03:33] *** Joins: typetetris (sid275937@id-275937.tinside.irccloud.com)
[01:03:33] *** Joins: christiaanb (sid84827@id-84827.lymington.irccloud.com)
[01:03:33] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[01:03:49] *** Joins: SanchayanMaity (sid478177@id-478177.hampstead.irccloud.com)
[01:04:01] <Sqaure> The point is this should be a "user" api. The construction of the record have an important meaning. 
[01:04:02] *** Joins: bw (sid2730@user/betawaffle)
[01:04:12] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[01:04:12] *** Quits: caimeo (uid540603@id-540603.lymington.irccloud.com) (Ping timeout: 240 seconds)
[01:04:17] <[exa]> yeah a bit more of the semantics could help here
[01:04:36] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[01:04:36] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[01:04:37] *** Quits: rusty (~rustyboy@82.77.225.116) (Remote host closed the connection)
[01:05:00] *** Quits: econo (uid147250@user/econo) (Ping timeout: 240 seconds)
[01:05:00] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[01:05:00] *** Quits: sooch_ (sid533113@id-533113.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[01:05:30] *** Joins: caimeo (uid540603@id-540603.lymington.irccloud.com)
[01:05:34] *** Joins: sooch_ (sid533113@id-533113.hampstead.irccloud.com)
[01:05:34] *** Joins: econo (uid147250@user/econo)
[01:05:35] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[01:05:36] *** Joins: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com)
[01:05:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[01:05:46] *** Joins: hubvu_ (sid495858@id-495858.tinside.irccloud.com)
[01:05:52] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[01:06:00] <Sqaure> users write construction functions and add validation as they see fit. Last part is the construction of the record. so the function  returns a "Validation FailedConstrutionType MyRecord"
[01:06:02] <[exa]> the things I find kinda uncanny is how much fields are there (would be better named for newcomers)
[01:06:16] <Sqaure> there could be 100s
[01:06:22] <[exa]> oh
[01:06:29] <Sqaure> thats why the above solution isnt great at all
[01:06:38] *** Joins: rusty (~rustyboy@82.77.225.116)
[01:07:07] * geekosaur was wondering about ApplicativeDo + RecordWildCards
[01:07:23] <geekosaur> or is it NamedFieldPuns here?
[01:08:02] <Sqaure> (side note: Need to read up on ApplicativeDo=
[01:08:30] *** Quits: EvanR (~EvanR@user/evanr) (Remote host closed the connection)
[01:08:43] <[exa]> at that point go for lenses, use some combo of Validation and State, and make your own operators that handle the logic correctly so that you can write code such as `myfieldname .?= ar` and `myotherfield .?== ers` instead of `v_` and `cv`  (the operators I picked completely randomly, replace ? with whatever you seem fit
[01:08:50] *** Joins: EvanR (~EvanR@user/evanr)
[01:08:53] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[01:09:02] *** Quits: ub (~Thunderbi@86.107.21.10) (Quit: ub)
[01:09:25] <[exa]> I was wondering about ApplicativeDo but that might just add variables in this case, right?
[01:09:32] *** Joins: ub (~Thunderbi@86.107.21.10)
[01:10:04] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[01:11:49] *** Quits: Midjak (~Midjak@91-169-30-149.subs.proxad.net) (Quit: Leaving)
[01:12:46] <Sqaure> Ah right, you can construct with RecordWildCards. I've only used them to read. That could be something possibly.
[01:13:31] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[01:13:37] <romesrf> hallo
[01:13:47] <romesrf> is there a nice way to replicate a tuple?
[01:13:59] <sss> does running a preprocessor (that outputs valid standard haskell) with {-# OPTIONS_GHC -F -pgmF=mypreprocessor #-} work relatively well with tools like ghci/ghcid? (maybe except for line numbers?)
[01:14:03] <romesrf> replicate 3 "hi" --> (hi,hi,hi)
[01:14:10] *** Joins: alx741 (~alx741@157.100.197.240)
[01:15:29] <[exa]> romesrf: that introduces types that depend on values, which is what people usually choose to avoid
[01:15:44] <[exa]> (imagine the `3` would be received from the user or something)
[01:15:46] <romesrf> why avoid? hahaah
[01:15:54] <romesrf> but [exa] i'm wondering if there's a TH nicety
[01:16:15] <romesrf> i'm pretty sure i saw an example once
[01:16:15] <[exa]> ah yes for TH that could work easily, if you can remove the `3` before it hits typechecking :]
[01:16:24] <romesrf> yea :) hahaha
[01:16:43] <romesrf> i wonder if there's a TH "prelude" library
[01:17:15] *** Quits: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Read error: Connection reset by peer)
[01:18:32] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:19:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[01:19:40] <[exa]> romesrf: `tuple-th` looks pretty close
[01:19:47] <[exa]> there's `htuple`
[01:20:03] <romesrf> cool! thank you
[01:20:05] <[exa]> (the first is library, the second is TH function)
[01:20:42] *** Joins: sndr (~sander@user/sander)
[01:20:52] *** Quits: sss (~sss@2001:18e8:2:28b9:f000::562b) (Quit: Client closed)
[01:21:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:22:08] <[exa]> I don't see the exact function for actual values but customizing `htuple` should not be hard
[01:22:42] *** Quits: sander (~sander@user/sander) (Ping timeout: 252 seconds)
[01:22:42] *** sndr is now known as sander
[01:22:57] *** Quits: kilolympus (~kilolympu@vpn-fn-230.net.ed.ac.uk) (Ping timeout: 240 seconds)
[01:23:13] *** Joins: kilolympus (~kilolympu@vpn-fn-230.net.ed.ac.uk)
[01:23:17] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:23:33] <romesrf> yep, I'm going to write my own
[01:23:40] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:24:13] <romesrf> I've had more complicated fun with TH previously, this should be a bit simpler
[01:24:44] <[exa]> wild guess, literally `replituple n expr = tupE (replicate n expr)`
[01:24:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:24:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:24:49] *** Joins: wroathe (~wroathe@user/wroathe)
[01:25:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[01:26:11] *** Quits: k`` (~user@152.1.137.158) (Remote host closed the connection)
[01:27:40] <[exa]> ...replituplate, reptuplate... names.
[01:28:45] <romesrf> hahahaha that's what I was just about to do [exa] 
[01:28:48] <romesrf> it's close
[01:29:08] <Sqaure> geekosaur, man it looks like ApplicativeDo + RecordWildCards makes wonders here. Thanks
[01:29:09] <romesrf> i think it'll be TupE (replicate n $ Just expr)
[01:29:16] <romesrf> TupE [Maybe Exp]
[01:29:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:30:08] *** Joins: Midjak (~Midjak@91-169-30-149.subs.proxad.net)
[01:30:36] <[exa]> ah there's the maybe in there
[01:30:49] <[exa]> (that's for wildcards?)
[01:30:54] <romesrf> :) Your wild guess was wildly correct hahah
[01:30:59] <romesrf> [exa]: it's for tuple sections
[01:31:49] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 256 seconds)
[01:31:55] <romesrf> (1,) --> TupE [Just (LitE (IntegerL 1)),Nothing]
[01:33:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[01:33:23] *** Quits: rusty (~rustyboy@82.77.225.116) (Quit: Leaving)
[01:34:55] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[01:36:41] *** Joins: alx741 (~alx741@157.100.197.240)
[01:37:17] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Ping timeout: 240 seconds)
[01:38:23] <[exa]> wow, scary
[01:39:03] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[01:39:21] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[01:39:29] *** Quits: Midjak (~Midjak@91-169-30-149.subs.proxad.net) (Quit: Leaving)
[01:40:35] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[01:41:00] *** Joins: Midjak (~Midjak@91-169-30-149.subs.proxad.net)
[01:41:00] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[01:42:02] <romesrf> I'm going to look for tuples in HsExpr too brb
[01:42:50] <romesrf>   | ExplicitTuple
[01:42:52] <romesrf>         (XExplicitTuple p)
[01:42:54] <romesrf>         [HsTupArg p]
[01:42:56] <romesrf>         Boxity
[01:42:58] <romesrf> hehe
[01:43:00] <romesrf> Boxity
[01:43:07] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:43:10] <romesrf> trees that grow is indeed cool
[01:43:12] <romesrf> are*
[01:44:31] *** Quits: myme (~myme@2a01:799:d5a:cd00:9ae3:d451:a989:e1e9) (Ping timeout: 250 seconds)
[01:44:52] <romesrf> if TH used the same AST as GHC I wonder if we could get rid of the boxity for the template haskell: pattern synonyms would be the way probably
[01:45:39] <romesrf> nevermind: TH has both variants as well tupE, unboxedTupE
[01:46:40] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[01:47:02] *** Joins: myme (~myme@40.51-175-185.customer.lyse.net)
[01:52:22] *** Joins: cynomys (~cynomys@user/cynomys)
[01:53:58] *** Quits: cosimone (~user@93-47-231-171.ip115.fastwebnet.it) (Quit: stay out of trouble you crazy kids, and don't hop on the NICE BOAT)
[01:57:24] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[01:59:13] *** Joins: alx741 (~alx741@181.199.42.143)
[02:02:27] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[02:03:07] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[02:04:23] *** Quits: Midjak (~Midjak@91-169-30-149.subs.proxad.net) (Ping timeout: 256 seconds)
[02:05:11] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[02:08:55] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[02:08:56] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[02:13:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:16:17] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[02:16:22] <monochrom> Sob sob, join is not a method of Monad, this is getting inconvenient for my theoretical coding experiments.
[02:17:20] <monochrom> (I am studying free monads by analogy with free monoids. join :: M (M a) -> M a is much better for this purpose.)
[02:19:17] *** Joins: alphabeta (~kilolympu@vpn-fn-230.net.ed.ac.uk)
[02:19:25] *** Quits: kilolympus (~kilolympu@vpn-fn-230.net.ed.ac.uk) (Ping timeout: 256 seconds)
[02:22:15] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[02:22:53] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:22:57] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:24:55] *** Joins: Erutuon (~Erutuon@user/erutuon)
[02:25:07] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[02:25:38] *** Joins: alx741 (~alx741@181.199.42.143)
[02:26:38] *** Joins: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net)
[02:28:12] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[02:28:24] *** Joins: hud (~hud@uwyo-129-72-161-67.uwyo.edu)
[02:28:47] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[02:32:29] *** Joins: LiaoTao_ (~LiaoTao@gateway/tor-sasl/liaotao)
[02:32:35] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 240 seconds)
[02:34:06] *** Quits: sagax (~sagax_nb@user/sagax) (Excess Flood)
[02:34:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[02:36:58] <romesrf> is anyone feeling like helping me in an existential crisis?
[02:37:18] <romesrf> existential instanciation to be more precise :P
[02:37:24] <romesrf> instantiation*
[02:37:29] <geekosaur> best to just ask your question
[02:37:37] <romesrf> :)
[02:37:49] <monochrom> If TH is involved, I can't do it.
[02:38:10] <romesrf> monochrom: TH was an attempt to do this but I gave up on it
[02:38:13] <monochrom> But I'm up for both quantifiers, "for all" and "exist", I love them.
[02:38:20] <romesrf> that's just what I need
[02:38:23] <monochrom> "Good riddance" >:)
[02:38:23] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 256 seconds)
[02:38:25] <romesrf> i'm setting up the minimal example
[02:38:27] <romesrf> AHAH
[02:39:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:40:55] <dminuoso> monochrom: Re: join as a method of Monad, shouldn't that be possible with QuantifiedConstraints now?
[02:41:12] *** Quits: michalz (~michalz@185.246.204.57) (Remote host closed the connection)
[02:41:24] <monochrom> Let me take a look at that extension again...
[02:41:40] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[02:41:47] <geekosaur> it may enable it in some sense but it doesn'tcause join to become a method
[02:42:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[02:42:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk)
[02:44:18] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Remote host closed the connection)
[02:44:30] <monochrom> I think I don't see how to use it for join, heh.
[02:44:31] *** Quits: orcus (~orcus@user/brprice) (Ping timeout: 250 seconds)
[02:44:53] *** Quits: dispater (~dispater@user/brprice) (Read error: Connection reset by peer)
[02:44:58] <dminuoso> https://ryanglscott.github.io/2018/03/04/how-quantifiedconstraints-can-let-us-put-join-back-in-monad/
[02:45:43] <dminuoso> It's a subtle story why join isn't already part of Monad.
[02:45:52] *** Joins: alx741 (~alx741@181.199.42.143)
[02:45:59] <monochrom> For now I just have a top-level adaptor that converts join to bind. Then when I define a local join for my free monad definition, and give it to the adaptor to obtain >>=.
[02:46:02] <Inst[m]> okay, now i'm interested
[02:46:16] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Quit: Leaving)
[02:46:37] *** Quits: mniip (mniip@libera/staff/mniip) (Ping timeout: 606 seconds)
[02:49:03] <monochrom> No worries dminuoso, the incovenience to me is very very minor, and my current context is a fringe theoretical one. "This is fine." :)
[02:49:03] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 252 seconds)
[02:49:48] <monochrom> But thanks too, I can see how the type of join is very difficult for automatic deriving mechanisms.
[02:50:15] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[02:50:26] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[02:50:26] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[02:50:26] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[02:50:38] *** Joins: orcus (~orcus@user/brprice)
[02:52:31] <monochrom> Yeah you need to think at the level of "I have a natural transformation from Compose m m to m", which needs a "forall x".
[02:53:09] *** Joins: dispater (~dispater@user/brprice)
[02:54:25] *** Joins: mniip (mniip@libera/staff/mniip)
[02:55:23] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[02:55:35] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:55:42] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[02:57:10] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[02:57:23] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[03:03:02] <romesrf> hahah, i fixed the existential thing on my own
[03:03:25] *** Joins: cynomys (~cynomys@user/cynomys)
[03:03:41] <romesrf> woohoo! nothing beats the clarity of explaining your own problem in its minimal form
[03:05:28] <romesrf> If anyone's curious: https://paste.tomsmeding.com/Z4PXyu6K
[03:06:04] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[03:07:16] *** Joins: alx741 (~alx741@181.199.42.143)
[03:08:03] <monochrom> heh
[03:09:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[03:09:38] <ski> ok, rank-2
[03:10:39] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[03:11:35] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:11:44] <ski> romesrf : did you mean to only call `unThing thing2 x', but not `unThing thing1 x' ?
[03:12:12] <romesrf> ski: rank-2 :)
[03:12:23] <romesrf> i meant to call both unthings with the same x
[03:12:35] <ski> (or perhaps you don't have a pair there, in your real code)
[03:12:58] <romesrf> I do have a pair, unfortunately I could not do a heterogeneous list (i tried ahah)
[03:13:05] <ski> % forM_ (0,1) print
[03:13:06] <yahb> ski: 1
[03:13:10] <ski> % forM_ [0,1] print
[03:13:10] <romesrf> OOPS
[03:13:10] <yahb> ski: 0; 1
[03:13:15] <romesrf> well, that's a great bug
[03:13:51] <romesrf> ski: if somehow you can do a list instead of a pair in my example, by all means let me know :)
[03:14:18] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 272 seconds)
[03:14:22] <ski> you could pass `[exists i b. Thing (Thing i CommonThing) b]' ?
[03:14:53] <monochrom> existential crisis turned into universal crisis
[03:15:19] <ski> (btw, i have no idea at all what this code is supposed to do (or rather, the code it's some kind of condensed example from))
[03:15:32] <Sqaure> i was playing around a bit here. I had this simple record "Moo" that i extended with a type function like this : data Moo (a :: * -> *) = Moo { fld1 :: a Int, fld2 :: a Bool  } . Now can i write StandaloneDeriving Show instance for this? 
[03:15:55] <Sqaure> ...and Eq for that matter
[03:17:00] <ski>   deriving instance (forall a. Show a => Show (f a)) => Show (Moo f)  -- maybe ?
[03:17:34] <ski>   deriving instance (Show (f Int),Show (f Bool)) => Show (Moo f)  -- or ? (leaks more details)
[03:18:31] <Sqaure> ski, thanks. The first one worked great
[03:19:50] <ski> romesrf : hm, i guess you'd be looking for something `zip'py ..
[03:19:58] <ski> @yow
[03:19:58] <lambdabot> JAPAN is a WONDERFUL planet -- I wonder if we'll ever reach their level
[03:19:58] <lambdabot> of COMPARATIVE SHOPPING ...
[03:20:15] <Axman6> makes you think
[03:20:38] <ski> hm. the later versions didn't zip, though
[03:22:16] <romesrf> ski: but `exists` doesn't exist right? (oh, the irony) 
[03:22:22] <ski> so ?
[03:22:44] <Axman6> (forall exists. exists -> r)
[03:22:56] <ski> you'll just have to encode it, in the usual way
[03:23:12] <Inst[m]> what the fuck at lambdabot
[03:23:12] <romesrf> I haven't done it before, what's the path to enlightnment?
[03:23:18] <ski> (the CPS way doesn't really make sense here .. unless you'd want to CPS the list as well, which you presumably don't)
[03:23:45] <Inst[m]> what's the use of CPS? IIRC, CPS is a syntactical pattern where you design functions to take another function that takes the result
[03:23:53] <Inst[m]> bleh, i can always harass colin about it
[03:23:57] <ski> you want a type, say `SomeThing', which amounts to `exists i b. Thing (Thing i CommonThing) b'
[03:24:05] <ski> so, let's say you want a data constructor
[03:24:17] <ski>   MkSomeThing :: (exists i b. Thing (Thing i CommonThing) b) -> SomeThing
[03:24:25] <ski> bow, logically speaking, this is equivalent to
[03:24:34] <ski>   MkSomeThing :: forall i b. Thing (Thing i CommonThing) b -> SomeThing
[03:24:43] <ski> or, if you prefer being more explicit
[03:24:47] <ski>   MkSomeThing :: forall i b. (Thing (Thing i CommonThing) b -> SomeThing)
[03:25:01] <ski> so, using `GADTSyntax', you can now declare
[03:25:04] <ski>   data SomeThing
[03:25:06] <ski>     where
[03:25:13] <ski>     MkSomeThing :: forall i b. Thing (Thing i CommonThing) b -> SomeThing
[03:25:23] <ski> or you can elide the `forall' here, so just
[03:25:29] <ski>     MkSomeThing :: Thing (Thing i CommonThing) b -> SomeThing
[03:25:33] <romesrf> ski: that's really interesting, I'm going to play around with it
[03:25:40] <romesrf> thank you for the explanation
[03:25:43] <ski> or, you can use the `ExistentialQuantification' syntax, which looks like
[03:25:58] <ski>   data SomeThing = forall i b. MkSomeThing (Thing (Thing i CommonThing) b)
[03:26:25] <ski> (perhaps you'd like to make that `CommonThing' a parameter of `SomeThing' .. i dunno)
[03:26:51] <romesrf> ic ic
[03:27:14] <ski> Inst[m] : with CPS, if you want to encode
[03:27:45] <ski>   computeSomeThing :: Foo -> exists i b. Thing (Thing i CommonThing) b
[03:27:46] <romesrf> btw, ski, this example comes from my chat bots: a Bot is i -> m o, and a BotServer is just a Bot that takes a bot and produces a runnable application :P
[03:27:51] <ski> you'd do that as
[03:28:11] <ski>   withSomeThing :: Foo -> (forall i b. Thing (Thing i CommonThing) b -> o) -> o
[03:28:39] *** Joins: alx741 (~alx741@157.100.197.240)
[03:30:32] <ski> (seeing as `a' is equivalent to `forall o. (a -> o) -> o' (the `forall o.' was implicit in the type signature above), and so `exists x. ..x..' is equivalent to `forall o. ((exists x. ..x..) -> o) -> o', which is equivalent to `forall o. (forall x. ..x.. -> o) -> o', because `(exists x. ..x..) -> ...' is equivalent to `forall x. ..x.. -> ...' (which i used with `MkSomeThing' above))
[03:30:49] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:31:22] <romesrf> wow :-)
[03:32:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:32:49] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[03:32:55] <ski> the CPS way of encoding existentials tends to be more useful, when the caller wants to unpack the existential right away, while the "existential data constructor" way (using `ExistentialQuantification' (a misnomer) or `GADTs') tends to be more useful when you want to put the abstracted value(s) away in a data structure
[03:33:04] <ski> (in your case, you're putting them inside a list)
[03:33:24] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:33:35] <ski> @help yow
[03:33:35] <lambdabot> yow. The zippy man.
[03:33:37] <ski> Inst[m] ^
[03:34:32] <geekosaur> look up "zippy the pinhead"
[03:35:08] *** Quits: max22- (~maxime@2a01cb08833598003c62700c4284530c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:35:24] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[03:36:28] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[03:37:46] *** Joins: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se)
[03:39:21] *** Quits: acidjnk (~acidjnk@p200300d0c71a5a433051350517ca1eef.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:39:42] <romesrf> I've got an extension of my original problem: https://paste.tomsmeding.com/o1cdybzw
[03:40:26] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[03:40:54] <romesrf> now my higher order function is restricted by a runThings'' :: (forall a. Constr a => Thing a CommonThing) -> (Thing (Thing i CommonThing) b, Thing (Thing i' CommonThing) b') -> IO ()
[03:41:16] <romesrf> in the body I instantiate that `a` to both `i` and `i'`
[03:41:32] <ski> you forgot to mention  (Constr i,Constr i') =>
[03:41:37] <romesrf> so I added the constraints `(Constr i, Constr i') => `
[03:42:07] <romesrf> what's interesting is that it seems to solve the problem for `i'`, but it remains for `i`
[03:42:39] <ski> how do you mean ?
[03:42:44] <romesrf> try to compile the program
[03:42:57] <ski> you're only using the second component of the pair
[03:43:03] <romesrf> AH
[03:43:10] <romesrf> I'm sorry
[03:43:29] <ski>   forM_ ((thing1, x), (thing2, x)) (uncurry unThing)  =  unThing thing2 x
[03:43:31] <romesrf> Thank you one more time, I was still trying to fix the function type so I forgot about that
[03:45:33] *** Quits: waleee (~waleee@h-98-128-229-110.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[03:45:39] <ski>   forM_ things (\(MkSomeThing thing) -> unThing thing x)  -- you want something along these lines ?
[03:45:57] <romesrf> yes, I'm typing it out :-)
[03:46:22] <ski> (no need to muck about with pairing each of them with `x', prior to the `forM_')
[03:46:39] <romesrf> I'll even write it point-free ;)
[03:46:50] * ski glances around nervously
[03:47:41] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[03:50:02] *** Joins: alx741 (~alx741@181.199.42.143)
[03:50:39] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[03:52:21] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[03:52:56] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 272 seconds)
[03:53:50] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[03:54:31] *** Joins: alx741 (~alx741@157.100.197.240)
[03:54:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[03:57:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[03:57:40] *** Joins: cynomys (~cynomys@user/cynomys)
[03:58:14] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[03:58:37] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[03:58:54] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[03:59:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[04:03:38] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[04:04:28] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[04:05:10] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:05:57] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[04:07:17] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[04:09:37] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[04:10:52] *** Joins: alp_ (~alp@user/alp)
[04:11:38] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:15:04] *** Joins: alx741 (~alx741@157.100.197.240)
[04:16:11] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:16:11] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:16:11] *** Joins: wroathe (~wroathe@user/wroathe)
[04:16:42] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[04:19:46] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[04:19:47] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:27:46] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[04:28:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[04:33:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[04:34:36] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[04:35:45] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 252 seconds)
[04:36:00] *** Joins: alx741 (~alx741@157.100.197.240)
[04:37:23] *** Quits: slowtype- (~slowtyper@79.103.224.184.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[04:39:38] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[04:39:55] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994ec492efbaecdb145b6.dip0.t-ipconnect.de)
[04:39:56] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[04:40:19] *** Joins: mvk (~mvk@2607:fea8:5cdc:bf00::99e7)
[04:40:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[04:40:35] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:40:53] *** Quits: ubert (~Thunderbi@p200300ecdf09942db6b20453daa25e1f.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[04:40:53] *** ubert1 is now known as ubert
[04:42:49] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:44:00] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:45:21] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:45:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:46:42] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:58] *** Joins: lechner (~lechner@debian/lechner)
[04:50:03] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 252 seconds)
[04:50:09] *** Quits: fryguybob (~fryguybob@cpe-74-67-169-145.rochester.res.rr.com) (Quit: leaving)
[04:54:33] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[04:54:51] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:56:12] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[04:58:32] *** Joins: alx741 (~alx741@157.100.197.240)
[05:02:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:10:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-021.wadham.ox.ac.uk) (Remote host closed the connection)
[05:10:42] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[05:13:08] <alexfmpe[m]> are injective type families (TypeFamilyDependencies) on associated type families a thing?
[05:14:45] <edwardk> i've used injectivity annotations on class associated type families
[05:15:05] <edwardk> alexfmpe[m]: https://github.com/ekmett/linear-logic/blob/main/src/Linear/Logic/Internal.hs#L58
[05:15:18] <edwardk> alexfmpe[m]: does that help?
[05:15:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:16:21] <alexfmpe[m]> huh yeah that's exactly what I wanted
[05:16:31] <alexfmpe[m]> could have sworn I had tried this exact syntax and got told to take a hike by ghc
[05:16:51] <alexfmpe[m]> ah, think I had missed the `= c` bit
[05:18:31] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:21:03] *** Joins: alx741 (~alx741@157.100.197.240)
[05:25:53] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[05:25:58] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[05:26:47] *** Joins: cynomys (~cynomys@user/cynomys)
[05:28:18] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[05:29:54] *** Joins: zaquest (~notzaques@5.130.79.72)
[05:31:30] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222)
[05:31:44] *** Quits: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com) (Ping timeout: 272 seconds)
[05:34:28] <edwardk> the main thing that annoys me about them is that i really want type family dependencies to be able to refer to some of the parameters.
[05:34:38] <edwardk> type Foo a b = c | c a -> b
[05:35:04] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[05:35:17] <edwardk> this isn't just an academic ask, because when you start mucking around with polykinds, you often don't have a choice
[05:40:44] *** Quits: ubert (~Thunderbi@p200300ecdf0994ec492efbaecdb145b6.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:40:44] *** ub is now known as ubert
[05:41:03] *** Joins: ubert1 (~Thunderbi@p200300ecdf0994ec6d4ec32f6f41158b.dip0.t-ipconnect.de)
[05:43:35] *** Joins: alx741 (~alx741@181.199.42.143)
[05:47:23] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[05:48:07] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[06:02:03] *** hays is now known as h_
[06:03:48] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[06:04:04] *** Quits: justGhost (~justache@user/justache) (Read error: Connection reset by peer)
[06:04:59] *** Joins: alx741 (~alx741@157.100.197.240)
[06:05:03] *** Joins: justGhost (~justache@user/justache)
[06:06:22] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[06:07:36] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:10:36] *** Quits: jao (~jao@79.red-79-159-137.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[06:12:48] *** Joins: jao (~jao@68.235.43.100)
[06:15:06] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[06:15:40] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Killed (silver.libera.chat (Nickname regained by services)))
[06:15:40] *** [_] is now known as [itchyjunk]
[06:16:00] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb)
[06:21:48] *** Quits: xff0x (~xff0x@2001:1a81:5253:2500:44fe:2888:7933:5a26) (Ping timeout: 240 seconds)
[06:23:47] *** Joins: xff0x (~xff0x@2001:1a81:5290:8400:55c0:f8c1:431:6807)
[06:25:28] *** Joins: alx741 (~alx741@157.100.197.240)
[06:27:36] *** Joins: rusrushal13 (~rusrushal@103.85.18.34)
[06:33:48] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:41:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:48:21] *** Joins: adamcstephens (161730d29b@2604:bf00:561:2000::2d5)
[06:50:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:50:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:50:44] *** finn_elija is now known as FinnElija
[06:52:05] *** Joins: alx741 (~alx741@157.100.197.240)
[06:54:58] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[06:57:39] *** Quits: alp_ (~alp@user/alp) (Ping timeout: 252 seconds)
[06:57:55] *** Quits: td_ (~td@muedsl-82-207-238-135.citykom.de) (Ping timeout: 256 seconds)
[06:59:53] *** Joins: td_ (~td@94.134.91.32)
[07:08:17] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:09:27] *** Joins: Batzy (~quassel@user/batzy)
[07:11:26] *** Joins: alx741 (~alx741@157.100.197.240)
[07:13:31] *** Quits: rusrushal13 (~rusrushal@103.85.18.34) (Ping timeout: 256 seconds)
[07:14:55] *** Quits: jao (~jao@68.235.43.100) (Ping timeout: 256 seconds)
[07:17:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:20:19] *** Joins: Guest95 (~Guest95@206.251.209.195)
[07:20:45] *** Quits: Guest95 (~Guest95@206.251.209.195) (Client Quit)
[07:23:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:23:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:23:16] *** Joins: wroathe (~wroathe@user/wroathe)
[07:24:36] *** Quits: yaroot (~yaroot@57.48.30.125.dy.iij4u.or.jp) (Remote host closed the connection)
[07:25:01] *** Joins: Guest95 (~Guest95@206.251.209.195)
[07:26:19] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[07:27:38] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 272 seconds)
[07:27:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:30:50] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-4424-fc06-167e-bc32.res6.spectrum.com) (Read error: Connection reset by peer)
[07:32:24] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[07:33:05] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[07:36:03] *** Joins: alx741 (~alx741@157.100.197.240)
[07:37:48] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[07:37:48] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[07:37:51] *** allbery_b is now known as geekosaur
[07:38:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[07:41:08] *** Joins: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250)
[07:42:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:42:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:42:33] *** Joins: wroathe (~wroathe@user/wroathe)
[07:43:12] *** Quits: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:45:24] *** Joins: mbuf (~Shakthi@223.178.123.144)
[07:48:51] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[07:49:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[07:52:32] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[07:53:52] *** Joins: hololeap (~hololeap@user/hololeap)
[07:56:29] *** Joins: alx741 (~alx741@157.100.197.240)
[08:00:21] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:06:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[08:07:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:08:24] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[08:13:36] *** Joins: wroathe (~wroathe@user/wroathe)
[08:17:48] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:17:52] *** Joins: alx741 (~alx741@157.100.197.240)
[08:22:32] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:22:33] *** Quits: phma (~phma@2001:5b0:210d:a1c8:150f:54c0:3978:d9e2) (Read error: Connection reset by peer)
[08:22:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[08:23:34] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:24:50] *** Joins: phma (phma@2001:5b0:210b:91b8:23dc:49ad:cfaa:844c)
[08:27:17] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Ping timeout: 240 seconds)
[08:29:21] *** Joins: hueso (~root@user/hueso)
[08:30:04] *** Quits: hueso (~root@user/hueso) (Read error: Connection reset by peer)
[08:30:24] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[08:31:00] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[08:40:24] *** Joins: alx741 (~alx741@157.100.197.240)
[08:45:34] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[08:46:27] *** Quits: Guest95 (~Guest95@206.251.209.195) (Ping timeout: 256 seconds)
[08:53:36] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[08:56:46] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[08:57:43] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:59:06] *** Joins: hueso (~root@user/hueso)
[09:00:44] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[09:03:10] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Remote host closed the connection)
[09:03:29] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[09:03:49] *** Joins: alx741 (~alx741@181.199.42.143)
[09:07:25] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[09:16:38] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[09:17:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[09:18:26] *** Joins: dons (~dons@202-153-213-48.ca99d5.syd.static.aussiebb.net)
[09:18:35] <dons> @yow
[09:18:35] <lambdabot> Well, here I am in AMERICA..  I LIKE it.  I HATE it.  I LIKE it.  I
[09:18:35] <lambdabot> HATE it.  I LIKE it.  I HATE it.  I LIKE it.  I HATE it.  I LIKE ...
[09:18:35] <lambdabot> EMOTIONS are SWEEPING over me!!
[09:20:19] *** Quits: dons (~dons@202-153-213-48.ca99d5.syd.static.aussiebb.net) (Changing host)
[09:20:19] *** Joins: dons (~dons@user/dons)
[09:20:57] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[09:21:05] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:21:59] <sm> dons attack!
[09:22:06] <sm> tcard: hi! thanks for the great https://www.extrema.is/articles/haskell-books list. I think https://pragprog.com/titles/rshaskell/effective-haskell is one you don't have.
[09:24:06] *** Joins: alx741 (~alx741@157.100.197.240)
[09:24:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[09:26:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:28:13] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[09:28:36] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[09:30:39] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:33:40] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 272 seconds)
[09:34:15] <dons> back doing some open source haskell again, so thought best to pop in the chan.
[09:34:33] <glguy> neat, welcome back
[09:35:03] <dons> whehey glguy
[09:35:32] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:35:46] <glguy> What corner of the open source haskell world will be lucky enough to have your attention? :)
[09:38:14] <dons> i'm working on code search, code navigation things on top of glean. currently all in the fb/meta ecosystem  (in particular https://github.com/facebookincubator/Glean/tree/main/glean/glass/Glean/Glass ). most likely IDE things (LSPs, vs code plugins)
[09:38:32] <dons> "applied" open source
[09:38:44] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:39:16] <dons> so the main thing would be navigation and search support on top of glean for very large code bases that can't be navigated by normal LSPs
[09:39:32] <dons> poking around that sort of area. probably need to write some typescript
[09:39:43] <glguy> How big are the very-large code bases you're targetting?
[09:39:58] <dolio> Whoa.
[09:40:23] <Axman6> How exciting. I'd love to have glean working for DAML (which is basically just Haskell++) - our codebase is massive and navigating it sucks
[09:40:37] <dons> i guess anywhere 'find-refs' takes >5s or jump-to-definition takes >1s. depends a bit on the LSP. "large" (i.e. >10M loc?)
[09:40:59] <dons> its a bit dependent on the language/LSP support where performance breaks down + how many users. the obivous target is v. large C++ code base
[09:41:18] <dons> right, daml wouldn't be too hard. there's already a well used haskell schema in glean
[09:41:33] <Axman6> god if only it took 5s to jump to def for us!
[09:41:52] *** Quits: echoreply (~echoreply@2001:19f0:9002:1f3b:5400:ff:fe6f:8b8d) (Quit: WeeChat 2.8)
[09:41:54] <dons> so that's another angle -> just do basic IDE support for a language that doesn't have it already, or as a backend for editors without good stuff (imagine vim navigation backend)
[09:41:58] <Axman6> is the haskell schema open source? I feel like I couldn't find it when I went looking... or I'm just dumb
[09:42:08] *** Joins: texasmynsted_ (~texasmyns@99.96.221.112)
[09:42:18] <dons> all the schemas are. the indexers aren't (only flow/js and hack i think, c++ is in the works)
[09:42:43] <dons> https://github.com/facebookincubator/Glean/blob/main/glean/schema/source/hs.angle
[09:42:48] *** Joins: echoreply (~echoreply@45.32.163.16)
[09:43:02] <dons> the haskell indexer is basically a script to process .hie files
[09:43:13] <dons> similar in rust. you just dump compiler knowledge to json
[09:43:17] *** Quits: texasmynsted (~texasmyns@99.96.221.112) (Ping timeout: 240 seconds)
[09:43:17] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[09:43:19] <Axman6> pretty sure the DAML compiler can output .hie files too...
[09:43:24] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[09:43:28] <Axman6> hmm, would have to check that
[09:43:43] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[09:43:50] <Axman6> anyway, it's good to see you around dons, your blog was a huge inspiration to me when I was learning Haskell at ANU
[09:44:07] <dons> :)
[09:45:15] *** Joins: alx741 (~alx741@157.100.197.240)
[09:45:17] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:45:18] *** Joins: codolio (~dolio@130.44.130.54)
[09:46:13] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 256 seconds)
[09:46:17] <chronon> Which blog is that? I shold check it out for myself if it comes so highly reommended.
[09:50:52] *** Joins: hueso (~root@user/hueso)
[09:53:00] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:55:06] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:01:50] <Axman6> pretty sure this has all the archives still: https://donsbot.com 
[10:12:34] *** Joins: alx741 (~alx741@157.100.197.240)
[10:13:28] *** Quits: dons (~dons@user/dons) (Ping timeout: 250 seconds)
[10:14:28] *** Quits: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a) (Quit: Konversation terminated!)
[10:14:37] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Quit: All your buffer are belong to us!)
[10:17:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[10:21:31] *** Joins: mncheck (~mncheck@193.224.205.254)
[10:22:06] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[10:24:10] *** Joins: michalz (~michalz@185.246.204.61)
[10:24:46] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[10:24:46] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[10:24:49] *** allbery_b is now known as geekosaur
[10:25:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:25:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:25:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:25:51] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[10:25:59] *** Joins: chomwitt (~chomwitt@2a02:587:dc15:800:87d7:2f36:90bc:5b10)
[10:26:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:26:08] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:26:21] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:26:29] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:26:35] <sm> Axman6: how long does jump to reference take you  now ?
[10:26:44] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:26:51] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:27:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:27:09] <Axman6> references, or jump to definition?
[10:27:11] <sm> s/ref/def/
[10:27:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:27:24] <Axman6> it depends a lot on the file, can be like 10 seconds
[10:27:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:27:35] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:27:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:27:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:28:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:28:18] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:28:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:28:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:28:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:29:03] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:29:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:29:24] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:29:41] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:29:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:30:01] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:30:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:30:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[10:30:34] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[10:32:30] <Axman6> but I thnk a lot of that is because the daml ide, which has fed into haskell-ide-engine hasn't kept up with HIE, so some of the important performance improvements its had haven't been ported back across
[10:33:44] *** Joins: alx741 (~alx741@181.199.42.143)
[10:38:34] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:39:13] *** Joins: alx741 (~alx741@181.199.42.143)
[10:40:36] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[10:42:29] *** Joins: vicfred (~vicfred@user/vicfred)
[10:43:41] *** Joins: vicfred_ (~vicfred@user/vicfred)
[10:44:01] *** Quits: vicfred_ (~vicfred@user/vicfred) (Remote host closed the connection)
[10:46:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[10:47:09] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 256 seconds)
[10:47:27] *** Joins: off^ (~off@12.163.216.98)
[10:47:40] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[10:48:51] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[10:53:51] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[10:55:10] <tcard> sm: Thank you!
[10:55:16] <tcard> sm: The index only includes books that have been published (are complete).
[10:55:24] <tcard> sm: Effective Haskell is currently in beta, with the final version expected in October 2022.
[10:58:29] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[10:58:52] *** Joins: coot (~coot@213.134.190.95)
[11:01:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:01:06] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Read error: Connection reset by peer)
[11:02:20] *** Quits: codolio (~dolio@130.44.130.54) (Ping timeout: 272 seconds)
[11:04:57] *** Joins: cynomys (~cynomys@user/cynomys)
[11:04:58] *** Joins: max22- (~maxime@2a01cb088335980016b70819e9713c2c.ipv6.abo.wanadoo.fr)
[11:05:33] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[11:05:35] *** Joins: alx741 (~alx741@181.199.42.143)
[11:06:08] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Ping timeout: 272 seconds)
[11:08:42] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[11:10:11] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:13:22] *** Joins: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[11:13:35] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[11:13:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[11:16:03] *** Joins: cfricke (~cfricke@user/cfricke)
[11:16:44] *** Joins: acidjnk (~acidjnk@p200300d0c71a5a433051350517ca1eef.dip0.t-ipconnect.de)
[11:17:52] *** Joins: briandaed (~root@109.95.142.92.r.toneticgroup.pl)
[11:18:32] *** Joins: machinedgod (~machinedg@24.105.81.50)
[11:18:49] *** Joins: chele (~chele@user/chele)
[11:19:38] <ski> oh, a wild dons appeared !
[11:19:59] <ski> @quote dons
[11:19:59] <lambdabot> dons says: Haskell more popular than Lisp, Scheme, OCaml and SML put together!
[11:20:26] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:22:36] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:23:38] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[11:24:26] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[11:26:25] *** Quits: caimeo (uid540603@id-540603.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:26:58] *** Joins: alx741 (~alx741@181.199.42.143)
[11:35:37] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[11:37:28] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3279:5094:80d0:564b)
[11:39:30] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:42:27] *** Joins: Major_Biscuit (~MajorBisc@c-001-017-054.client.tudelft.eduvpn.nl)
[11:43:47] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[11:44:46] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[11:45:13] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[11:49:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:50:07] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[11:52:14] *** Joins: alx741 (~alx741@157.100.197.240)
[11:57:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[11:59:24] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[11:59:36] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[12:00:12] *** Joins: wonko (~wjc@user/wonko)
[12:04:20] *** Joins: alp_ (~alp@user/alp)
[12:12:59] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 256 seconds)
[12:14:46] *** Joins: alx741 (~alx741@181.199.42.143)
[12:15:02] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:15:45] *** Quits: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5) (Quit: Konversation terminated!)
[12:19:37] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[12:20:14] *** Joins: alx741 (~alx741@157.100.197.240)
[12:21:36] *** Quits: vglfr (~vglfr@coupling.penchant.volia.net) (Ping timeout: 252 seconds)
[12:22:37] *** Joins: vglfr (~vglfr@coupling.penchant.volia.net)
[12:24:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:25:05] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3279:5094:80d0:564b) (Quit: WeeChat 2.8)
[12:25:34] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:35:26] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[12:41:37] *** Joins: alx741 (~alx741@157.100.197.240)
[12:42:30] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 252 seconds)
[12:47:21] *** Quits: jespada (~jespada@90.254.246.194) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:50:01] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[12:51:20] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:fd00:8e82:1c4b:4222) (Remote host closed the connection)
[12:53:57] *** Quits: acidjnk (~acidjnk@p200300d0c71a5a433051350517ca1eef.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[13:01:42] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:9be7:a233:2613:fd84)
[13:03:21] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:03:24] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 240 seconds)
[13:03:48] *** Joins: cynomys (~cynomys@user/cynomys)
[13:06:31] *** Joins: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3)
[13:06:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[13:06:39] *** Joins: alx741 (~alx741@157.100.197.240)
[13:08:24] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[13:08:40] *** Joins: wonko (~wjc@user/wonko)
[13:08:53] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:3279:5094:80d0:564b)
[13:10:15] *** Joins: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net)
[13:16:35] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[13:17:10] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[13:17:30] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[13:19:29] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[13:25:23] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:27:32] *** Quits: alp_ (~alp@user/alp) (Remote host closed the connection)
[13:30:27] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:30:47] *** Joins: alp (~alp@user/alp)
[13:31:56] *** Joins: vpan (~0@212.117.1.172)
[13:32:45] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:38:01] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:40:06] *** Joins: wonko- (~wjc@user/wonko)
[13:41:31] <dminuoso> glguy: There's one missing feature about config-value: A suitable nix config generator. It turns out even with your most recent addition, some YAML formatters generate plain JSON, others feed JSON into yq which removes all double quotes..
[13:41:41] *** Joins: alx741 (~alx741@181.199.42.143)
[13:43:25] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: moats (~oats@user/oats) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: sm (~sm@plaintextaccounting/sm) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: jinsun_ (~jinsun@user/jinsun) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: Tisoxin (~ikosit@user/ikosit) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: ongy[m] (~ongymatri@2001:470:69fc:105::5018) (Quit: Bridge terminating on SIGTERM)
[13:43:25] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Deide (~deide@user/deide) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: cdsmith (~cdsmithma@2001:470:69fc:105::284) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: ericson2314 (~ericson23@2001:470:69fc:105::70c) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: jneira[m] (~jneiramat@2001:470:69fc:105::d729) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: maralorn (~maralorn@2001:470:69fc:105::251) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: zfnmxt (~zfnmxtzfn@user/zfnmxt) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: ac (~aloiscoch@2001:470:69fc:105::65) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: bitonic (~bitonic@2001:470:69fc:105::1812) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: fendor[m] (~fendormat@2001:470:69fc:105::fcbd) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: unrooted (~unrooted@2001:470:69fc:105::a4a) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: finalti[m] (~finaltima@2001:470:69fc:105::d909) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: bb010g (~bb010g@2001:470:69fc:105::9a5) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: reza[m] (~rezaphone@2001:470:69fc:105::3eda) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: aidy (~aidy@2001:470:69fc:105::c7b4) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: alex[m]123 (~alexchete@2001:470:69fc:105::1:1001) (Quit: Bridge terminating on SIGTERM)
[13:43:26] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: simmsb (~simmsb@2001:470:69fc:105::1:55c3) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: litharn[m] (~litharnma@2001:470:69fc:105::1:8336) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: jaror[m] (~jaror@2001:470:69fc:105::265) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: marijan (~marijanma@2001:470:69fc:105::1:6cce) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: soft (~soft@2001:470:69fc:105::c75) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756) (Quit: Bridge terminating on SIGTERM)
[13:43:27] *** Quits: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7) (Quit: Bridge terminating on SIGTERM)
[13:43:28] *** Quits: oberblastmeister (~oberblast@2001:470:69fc:105::3a60) (Quit: Bridge terminating on SIGTERM)
[13:43:28] *** Quits: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: siraben (~siraben@user/siraben) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Quit: Bridge terminating on SIGTERM)
[13:43:29] *** Quits: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: Joe[m] (~jsricemat@2001:470:69fc:105::1:b4ce) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: unclechu (~unclechu@2001:470:69fc:105::354) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: marinelli[m] (~marinelli@2001:470:69fc:105::2d8) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee) (Quit: Bridge terminating on SIGTERM)
[13:43:30] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Quit: Bridge terminating on SIGTERM)
[13:43:31] *** Quits: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250) (Quit: Bridge terminating on SIGTERM)
[13:43:31] *** Quits: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0) (Quit: Bridge terminating on SIGTERM)
[13:44:03] <dminuoso> One compromise Im thinking of is to introduce a new PrimValueSpec `SpecificTextSpec :: Text -> PrimValueSpec ()`, so we can do atoms but with strings instead. Then, we just need a YAML formatter that consistently puts out double quotes.
[13:44:14] <dminuoso> That would also seamingly fit into nix
[13:44:20] <dminuoso> *seamingless
[13:44:31] *** Quits: max22- (~maxime@2a01cb088335980016b70819e9713c2c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:45:19] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[13:45:23] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[13:45:36] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[13:46:12] *** Joins: alx741 (~alx741@181.199.42.143)
[13:46:30] *** Joins: juhp[m] (~juhpmatri@2001:470:69fc:105::6e9)
[13:46:59] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[13:47:53] *** Joins: max22- (~maxime@2a01cb08833598004895fc080e042dcf.ipv6.abo.wanadoo.fr)
[13:49:37] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[13:49:57] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[13:50:41] *** Joins: alx741 (~alx741@157.100.197.240)
[13:51:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[13:53:32] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:53:33] *** Quits: max22- (~maxime@2a01cb08833598004895fc080e042dcf.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[13:55:08] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[13:56:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 245 seconds)
[13:58:08] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[13:58:08] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[13:58:08] *** Joins: cdsmith (~cdsmithma@2001:470:69fc:105::284)
[13:58:08] *** Joins: thomasjm[m] (~thomasjmm@2001:470:69fc:105::c6d9)
[13:58:08] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[13:58:08] *** Joins: JoseC[m] (~jmcardonm@2001:470:69fc:105::1:7539)
[13:58:08] *** Joins: zfnmxt (~zfnmxtzfn@2001:470:69fc:105::2b32)
[13:58:08] *** Joins: kadoban (~kadoban@user/kadoban)
[13:58:08] *** Joins: moats (~oats@user/oats)
[13:58:08] *** Joins: unclechu (~unclechu@2001:470:69fc:105::354)
[13:58:08] *** Joins: maralorn (~maralorn@2001:470:69fc:105::251)
[13:58:08] *** Joins: reza[m] (~rezaphone@2001:470:69fc:105::3eda)
[13:58:08] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[13:58:08] *** Joins: marinelli[m] (~marinelli@2001:470:69fc:105::2d8)
[13:58:08] *** Joins: ericson2314 (~ericson23@2001:470:69fc:105::70c)
[13:58:08] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[13:58:08] *** Joins: finalti[m] (~finaltima@2001:470:69fc:105::d909)
[13:58:08] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[13:58:08] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[13:58:09] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[13:58:09] *** Joins: mahene[m] (~mahenemat@2001:470:69fc:105::1:6a93)
[13:58:09] *** Joins: sm (~sm@plaintextaccounting/sm)
[13:58:09] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[13:58:09] *** Joins: Deide (~deide@user/deide)
[13:58:09] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[13:58:09] *** Joins: Christoph[m] (~hpotsirhc@2001:470:69fc:105::2ff8)
[13:58:09] *** Joins: psydroid (~psydroid@user/psydroid)
[13:58:09] *** Joins: alexfmpe[m] (~alexfmpem@2001:470:69fc:105::38ba)
[13:58:09] *** Joins: ongy[m] (~ongymatri@2001:470:69fc:105::5018)
[13:58:09] *** Joins: siraben (~siraben@user/siraben)
[13:58:09] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[13:58:09] *** Joins: SawyerBergeron[m (~sawyerber@2001:470:69fc:105::3036)
[13:58:09] *** Joins: alex[m]12345 (~alexchete@2001:470:69fc:105::1:1001)
[13:58:09] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[13:58:09] *** Joins: Tisoxin (~ikosit@user/ikosit)
[13:58:09] *** Joins: aidy (~aidy@2001:470:69fc:105::c7b4)
[13:58:09] *** Joins: DemiMarieObenour (~alwayscur@2001:470:69fc:105::4886)
[13:58:09] *** Joins: fendor[m] (~fendormat@2001:470:69fc:105::fcbd)
[13:58:09] *** Joins: vaibhavsagar[m] (~vaibhavsa@2001:470:69fc:105::ffe)
[13:58:09] *** Joins: maerwald[m] (~maerwaldm@2001:470:69fc:105::1ee)
[13:58:09] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[13:58:10] *** Joins: wildsebastian (~wildsebas@2001:470:69fc:105::1:14b1)
[13:58:10] *** Joins: jinsun_ (~jinsun@user/jinsun)
[13:58:10] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[13:58:10] *** Joins: tripa[m] (~tripamatr@2001:470:69fc:105::1:4f7e)
[13:58:10] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[13:58:10] *** Joins: ac (~aloiscoch@2001:470:69fc:105::65)
[13:58:10] *** Joins: bitonic (~bitonic@2001:470:69fc:105::1812)
[13:58:10] *** Joins: SridharRatnakuma (~sridmatri@2001:470:69fc:105::1c2)
[13:58:10] *** Joins: unrooted (~unrooted@2001:470:69fc:105::a4a)
[13:58:10] *** Joins: Guillaum[m] (~guiboumat@2001:470:69fc:105::1:72ac)
[13:58:10] *** Joins: pfurla-matrix (~pedrofurl@2001:470:69fc:105::1:51d7)
[13:58:10] *** Joins: icrbow[m] (~icrbowmat@2001:470:69fc:105::ee3)
[13:58:10] *** Joins: reactormonk[m] (~reactormo@2001:470:69fc:105::3c24)
[13:58:10] *** Joins: kalxd[m] (~kalxdmatr@2001:470:69fc:105::1:576e)
[13:58:10] *** Joins: thejuan24f[m] (~thejuan2m@2001:470:69fc:105::1:6569)
[13:58:10] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[13:58:10] *** Joins: VanceIsM7[m] (~vanceism7@2001:470:69fc:105::3ad)
[13:58:11] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[13:58:11] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[13:58:11] *** Joins: mmos[m] (~mmosmatri@2001:470:69fc:105::1:8340)
[13:58:11] *** Joins: jneira[m] (~jneiramat@2001:470:69fc:105::d729)
[13:58:11] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[13:58:20] *** Joins: soft (~soft@2001:470:69fc:105::c75)
[13:58:20] *** Joins: sjanssen (~sjanssenm@2001:470:69fc:105::1:61d8)
[13:58:20] *** Joins: Michal[m] (~oomiguelm@2001:470:69fc:105::1:5ab0)
[13:58:20] *** Joins: sekun[m] (~hsekmatri@2001:470:69fc:105::d18f)
[13:58:21] *** Joins: Drew[m] (~drewefenw@2001:470:69fc:105::c8c4)
[13:58:21] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[13:58:21] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[13:58:22] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[13:58:22] *** Joins: sofviic[m] (~sofviicma@2001:470:69fc:105::1:51fd)
[13:58:22] *** Joins: marijan (~marijanma@2001:470:69fc:105::1:6cce)
[13:58:22] *** Joins: MosheTeutsch[m] (~moteutsch@2001:470:69fc:105::1:c250)
[13:58:22] *** Joins: Inst[m] (~instrmatr@2001:470:69fc:105::1:903e)
[13:58:22] *** Joins: bb010g (~bb010g@2001:470:69fc:105::9a5)
[13:58:22] *** Joins: RosarioPulella[m (~rosariopu@2001:470:69fc:105::a57)
[13:58:22] *** Joins: octeep[m] (~octeepoct@2001:470:69fc:105::1:3dbf)
[13:58:22] *** Joins: wysteriary[m] (~wysteriar@2001:470:69fc:105::a42e)
[13:58:22] *** Joins: afotgkmnzj7asv3r (~afotgkmnz@2001:470:69fc:105::c24b)
[13:58:22] *** Joins: cherryblossom[m] (~cherryblo@2001:470:69fc:105::b789)
[13:58:22] *** Joins: phuegrvs[m] (~phuegrvsm@2001:470:69fc:105::1:65e4)
[13:58:23] *** Joins: throwaaaa[m] (~throwaaaa@2001:470:69fc:105::1:6fe6)
[13:58:23] *** Joins: Sixto[m] (~provornyc@2001:470:69fc:105::1:74df)
[13:58:23] *** Joins: litharn[m] (~litharnma@2001:470:69fc:105::1:8336)
[13:58:24] *** Joins: james[m]123 (~jamesnina@2001:470:69fc:105::1:4203)
[13:58:24] *** Joins: EkaiZend[m] (~ekai-zend@2001:470:69fc:105::1:7756)
[13:58:24] *** Joins: simmsb (~simmsb@2001:470:69fc:105::1:55c3)
[13:58:24] *** Joins: FernandoChu[m] (~ryunaqmat@2001:470:69fc:105::1:4dc0)
[13:58:24] *** Joins: Joe[m]12 (~jsricemat@2001:470:69fc:105::1:b4ce)
[13:58:24] *** Joins: benjamin[m]123 (~benjaminm@2001:470:69fc:105::1:3f2f)
[13:58:25] *** Joins: oberblastmeister (~oberblast@2001:470:69fc:105::3a60)
[13:58:25] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[14:01:00] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:03:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[14:04:21] *** Joins: Erutuon (~Erutuon@user/erutuon)
[14:04:36] *** Quits: EvanR (~EvanR@user/evanr) (Ping timeout: 240 seconds)
[14:06:52] *** Joins: EvanR (~EvanR@user/evanr)
[14:11:57] *** Joins: alx741 (~alx741@157.100.197.240)
[14:13:39] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:252f:1c34:e1bf:7de2)
[14:13:48] *** Quits: chomwitt (~chomwitt@2a02:587:dc15:800:87d7:2f36:90bc:5b10) (Ping timeout: 252 seconds)
[14:16:11] <chronon> dminuoso, there's more than one yq. Which one are you referring to?
[14:16:25] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:19:38] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[14:25:00] <chronon> Wow, there are a *lot* of books on Haskell. Which books would people here recommend for an experienced programmer with little to no experience of functional programming?
[14:25:18] <chronon> You'll probably say that's an oxymoron, right? :-)
[14:29:58] <merijn> chronon: tbh, the same ones as for complete beginners :)
[14:31:12] <chronon> I often find books aimed at complete beginners spend too much time labouring the point on basic stuff, which is fine, but if boredom sets in then the book won't get read.
[14:31:36] <chronon> I like a fast paced and challenging read, because the very challenge of it keeps me motivated.
[14:31:59] <merijn> chronon: In many ways learning Haskell as exerpeinced feels the opposite to other languages. Where normally you get a "head start" where you get to reuse a lot you know, you can't really reuse anything you know at the start, but as you get further you get more use out of your experience (arrays, maps, etc. and advanced data structures are the same everywhere)
[14:32:27] <chronon> Right.
[14:32:43] <chronon> Does it count that I am pretty good at jq?
[14:32:46] <merijn> chronon: tbh, if you like it "fast and painful" and are somewhat used to like, browsing/scanning specs like the C spec, etc. you could try the tutorial + report way :p
[14:33:07] *** Joins: alx741 (~alx741@157.100.197.240)
[14:33:14] <merijn> But...
[14:33:17] <merijn> @quote Brend whoever
[14:33:17] <lambdabot> Brend says: Whoever chose the title "A Gentle Introduction to Haskell" is obviously accustomed to wrestling bears in piranha pits or something.
[14:33:25] <merijn> @where tutorial
[14:33:25] <lambdabot> http://www.haskell.org/tutorial/
[14:33:28] <merijn> @where report
[14:33:28] <lambdabot> http://www.haskell.org/onlinereport/haskell2010/ (more: http://www.haskell.org/haskellwiki/Definition)
[14:33:53] <merijn> As far as language specs go, the Haskell Report is one of the most readable ones ever written :p
[14:34:52] <chronon> Yes, I must say I often prefer leaning heavily on spec to get the nitty gritty that books tend to gloss over. But it is still valuable to have a book take you through the core concepts in the right order so you don't get lost during the botostepping phase.
[14:35:00] *** Quits: off^ (~off@12.163.216.98) (Ping timeout: 240 seconds)
[14:35:02] <chronon> boot strapping
[14:35:05] <[exa]> chronon: you might experience fast-paced and challenging removal of no-longer-valid habits from other programming languages
[14:35:07] <merijn> "Haskell from First Principles" is comprehensive, but, eh, rather verbose
[14:35:08] <maerwald> merijn: I think the Go "spec" is more readable
[14:35:14] <merijn> and slow
[14:35:31] <merijn> Possiblye the Bird and Hutton books are better, since I think they're fairly short in comparison?
[14:35:39] <merijn> @where books
[14:35:39] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[14:35:41] <chronon> Verbose is a kill, it should be tight and focussed, and demonstrate exciting things along the way.
[14:35:43] <merijn> @where tfwh
[14:35:43] <lambdabot> "Thinking Functionally with Haskell" by Richard Bird in Oct 2014 at <http://www.cs.ox.ac.uk/publications/books/functional/>
[14:35:52] <merijn> @where PIH
[14:35:52] <lambdabot> "Programming in Haskell" by Graham Hutton in 2007-01-15,2016-09-01 at <http://www.cs.nott.ac.uk/~pszgmh/pih.html>
[14:36:34] <merijn> chronon: Sadly, the things that are (long-term) exciting appear very boring in the short term :p
[14:36:42] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Quit: Leaving)
[14:36:56] <merijn> Except maybe recursive fibonacci, which stays exciting foreve :p
[14:36:56] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:37:03] *** Quits: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[14:37:04] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[14:37:22] *** Joins: jonathanx (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[14:37:23] <merijn> > let fibonacci = 0 : 1 : zipWith (+) fibonacci (drop 1 fibonacci) in fibonacci
[14:37:25] <lambdabot>  [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,10946,...
[14:37:26] <chronon> You mean doubly recursive Fibbonacci? I thought that was a known tarpit.
[14:37:30] *** Joins: off^ (~off@12.163.216.98)
[14:37:42] <merijn> chronon: Naah, double recursive fibonacci is boring and slow :)
[14:38:16] <chronon> Singly recursive fibbonacci is just a disguised loop though.
[14:38:18] <merijn> > let fibonacci = 0 : 1 : zipWith (+) fibonacci (drop 1 fibonacci) in drop 10000 fibonacci
[14:38:19] <lambdabot>  [336447648764317832666216120051075433103021484606800639065647699746800814421...
[14:38:24] <merijn> hmm
[14:38:34] <merijn> I seem to have underestimated how fast fibonacci numbers get big xD
[14:38:46] <merijn> Can't even fit a single result
[14:38:55] <merijn> Pleasantly fast, though!
[14:39:05] <chronon> Cool indeed.
[14:39:12] <byorgey> F(n) is approximately phi^n, where  phi = (1 + sqrt 5)/2
[14:39:38] <byorgey> phi^10000 is going to have... thousands of digits, I guess
[14:39:43] <chronon> Which of the two books you recommended do you think is the more motivational read, keeping the pace and excitement up?
[14:39:55] <[exa]> chronon: what languages do you know now?
[14:40:17] <merijn> chronon: tbh, I read neither of them. But both are written by people who've been teaching Haskell at uni for ages, so...
[14:40:18] <chronon> Well, jq is the only functional language and it's obviously nothing like Haskell.
[14:40:36] <[exa]> jq?
[14:40:42] <[exa]> oh the json query tool?
[14:40:53] <[exa]> I mean also non-functional languages :]
[14:41:20] <chronon> I know quite a wide range of different languages with different approaches, some quite esoteric by today's standards. I've done a smattering of all the common modern general purpose langauges.
[14:41:48] <chronon> Yes, jq the json based language.
[14:43:14] <chronon> Actualy I enjoy learning odd languages. I wrote a mini Turing maching language, and then wrote some programs in it, for example. I have high confidence that I can program in anything.
[14:43:37] <[exa]> I'd give a shot to LYAH, you can skip the first few sections and you should be able to make your own small exercises as well I guess, and it's a quick read with pictures
[14:44:07] <chronon> So yes, a book recommendation that never talks down to the reader, keeps the pace up, throws in a bit of humour and excitement, would all be good.
[14:44:19] <[exa]> oh yes it has funny pictures
[14:46:22] <chronon> So final recommendation for a fast fun read would be "Learn You a Haskell"????
[14:46:36] <[exa]> if you need examples/exercises for anything, it's useful to pick them from another book or typeclassopaedia or something. the point of LYAH is that it throws you over the initial learning shock quite quickly, and if you struggle you can always come here :D
[14:46:56] <chronon> Ok, sounds good.
[14:47:15] *** Joins: jalil (~jalil@2a01:e0a:277:4100:5321:349f:8c6a:80f8)
[14:47:36] <[exa]> just remember to try everything, lyah unfortunately doesn't come with many exercises that would make the stuff 'intuitive'
[14:47:43] <chronon> 290 pages. Nice.
[14:47:44] <merijn> LYAH is kinda bad, imo
[14:47:50] <[exa]> I expected this ^
[14:47:51] <[exa]> D
[14:47:53] <[exa]> :D
[14:48:01] <merijn> It's great at showing some fun things
[14:48:03] <chronon> Oh really, what is your view on it?
[14:48:17] <merijn> but bad at teaching you how to *do* something with those things
[14:48:20] <chronon> That's a good start. Showing off fun things creates motivation.
[14:48:48] <chronon> So if you had to choose one, other than LYAH, which would it be?
[14:49:21] <merijn> The Hutton or Bird books are probably a safe bet and should be fairly short too
[14:49:26] <merijn> But a bit more rigorous
[14:49:58] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 260 seconds)
[14:50:22] <chronon> Ok, I'll check out all three and see how I go. Thanks guys!
[14:51:12] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:53:08] *** Joins: alx741 (~alx741@157.100.197.240)
[14:54:22] <dminuoso> chronon: Okay, I skipped some gory details because they were not relevant to the discussion
[14:55:04] <dminuoso> chronon: Right now the best path I have is using json2yaml (the deprecated haskell package), and then into yq-go
[14:55:05] *** Joins: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de)
[14:55:30] <dminuoso> This is because yc-go with `.. style="double"` will keep double quots around the attribute names
[14:55:42] <dminuoso> If the input is just json
[14:56:26] <dminuoso> Or I guess I could use yq-go twice
[14:56:40] <dminuoso> Yes that would actually work out nicely
[14:56:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[14:57:16] <chronon> But isn't the point of YAML that is drops all such unnecessary verbosity? I would only wish to quote keys with spaces or other special chars in them, and who names their keys like that anyway?
[14:57:32] <dminuoso> chronon: So my target config language is not YAML but config-value
[14:57:53] <dminuoso> Which due to a recent request accepts one style that happens to be valid YAML.
[14:58:15] <chronon> Ah.
[14:58:43] <dminuoso> So if you can make your YAML formatter output that exact format, then you can use nix `builtins.toJSON`, feed it into jq-go first to get the "unacceptable" yaml with double quotes removed on both attr names and values, and then into yq-go again to put quotes on the values back
[14:58:54] *** Quits: ph88_ (~ph88@2a02:8109:9e00:71d0:885b:9523:dc87:45b3) (Ping timeout: 252 seconds)
[14:59:01] <dminuoso> chronon: THe thing is, in config-value `foo` and `"foo"` are separate things. the first is considered an atom, the latter a text.
[14:59:19] <dminuoso> So strictly speaking the casual YAML output is syntactically valid config-value, but most likely not what you want
[15:00:06] <chronon> I see.
[15:00:41] <chronon> I always liked what YAML was trying to achieve, but disliked the complexity that they came up with.
[15:00:44] <dminuoso> Are you familiar with nix/nixos?
[15:01:05] <chronon> Only in passing. I'm very curious about it though.
[15:01:37] <chronon> Perhpas once I am up to speed with Haskell I shall start to "get" what nixos is all about.
[15:02:07] <dminuoso> Skipping loads of information, but broadly you can define an nested attribute set comfortably by just saying `{ foo.bar.quux = [1 2]; foo.bar.baz = "foobar"; }`
[15:03:19] <dminuoso> And not only that, but in nixos modules you get merging semantics, so you can define dafault values, and simply "update" some nested config by just saying `{ foo.settings.my.config = "I want this instead"; }`. So if we could say `settings` is an arbitrary nix type that is just turned into the correct output format
[15:03:26] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[15:03:44] <chronon> Sounds nice.
[15:03:48] <dminuoso> So now I dont need to keep the nixos settings in sync with whatever my program accepts, and I can directly match my nix expressions in
[15:04:17] <dminuoso> config-schema/config-value gets me the benefit of applicatively parsing and automatically verifying it against a schema
[15:04:40] <dminuoso> so yeah.. Im just missing out on atoms right now
[15:04:59] <chronon> I am intrigued to see tha Bird's book Programming Haskell went from just 171 pages to 318 between 1st and 2nd edition. That's a lot to add that hadn't seemed essential first time round.
[15:05:11] <dminuoso> (their usecase is usually for enums where you know the possbile values beforehand, so the doc generator or error diagnostics can tell you about it)
[15:06:02] <dminuoso> i.e. `mode: sensitive` where mode might be any of `min`, `max`, `sensitive`, `interactive`, moderate`
[15:06:08] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[15:06:13] <chronon> Oh, time passed, I gotta go, sorry. Bye.
[15:06:32] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[15:07:40] <absence> occasionally i stumble across "fmap join . traverse f" or "fmap join . sequenceA", and i wonder if this is a structure/concept that has a name, or if it's just one of those coincidental patterns?
[15:08:03] <dminuoso> absence: in your own code?
[15:09:18] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:14:32] *** Joins: alx741 (~alx741@157.100.197.240)
[15:16:17] <absence> i haven't kept a tally, but mostly at work i guess
[15:18:49] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:23:58] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[15:26:05] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[15:28:34] *** Joins: polezaivsani (~polezaivs@orangeshoelaces.net)
[15:29:40] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[15:33:48] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 240 seconds)
[15:37:02] *** Joins: alx741 (~alx741@157.100.197.240)
[15:39:47] *** Joins: acidjnk (~acidjnk@p200300d0c71a5a004439604b3304a9e4.dip0.t-ipconnect.de)
[15:40:54] *** Joins: acidjnk_new (~acidjnk@p200300d0c71a5a0098935a5ed84a0ff1.dip0.t-ipconnect.de)
[15:40:55] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[15:42:57] *** Quits: OscarH (~OscarH@90.201.86.195) (Ping timeout: 240 seconds)
[15:44:20] *** Quits: acidjnk (~acidjnk@p200300d0c71a5a004439604b3304a9e4.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[15:47:28] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:49:36] *** Quits: phma (phma@2001:5b0:210b:91b8:23dc:49ad:cfaa:844c) (Read error: Connection reset by peer)
[15:50:59] *** Joins: phma (phma@2001:5b0:211c:8bf8:1555:98c1:2056:8534)
[15:53:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[15:57:12] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[15:57:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 240 seconds)
[15:58:27] *** Joins: alx741 (~alx741@157.100.197.240)
[15:58:50] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[15:59:27] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[16:02:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:04:29] *** Joins: raym (~raym@user/raym)
[16:09:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[16:15:06] *** Quits: acidjnk_new (~acidjnk@p200300d0c71a5a0098935a5ed84a0ff1.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:17:38] *** Joins: notzmv (~zmv@user/notzmv)
[16:19:50] *** Joins: alx741 (~alx741@157.100.197.240)
[16:20:17] *** Quits: idnar (sid12240@debian/mithrandi) (Ping timeout: 250 seconds)
[16:21:31] *** Joins: idnar (sid12240@debian/mithrandi)
[16:23:03] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Remote host closed the connection)
[16:23:50] *** Quits: ph88^ (~ph88@ip5f5af71f.dynamic.kabel-deutschland.de) (Quit: Leaving)
[16:24:14] <romesrf> o/
[16:25:16] <[exa]> \o
[16:27:12] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:32:51] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[16:35:56] *** Joins: w1n5t0n (~w1n5t0n@87.74.143.200)
[16:37:08] *** Quits: mbuf (~Shakthi@223.178.123.144) (Quit: Leaving)
[16:37:28] <w1n5t0n> Hello peeps, I have an issue getting Stack to build a project that, as far as I remember, used to build fine a year or two ago
[16:38:02] <w1n5t0n> There is a dependency on the package hsndfile, which in turn depends on the C library libsndfile, and during `stack build` I get this:
[16:38:03] <w1n5t0n> hsndfile > configure
[16:38:03] <w1n5t0n> hsndfile > Configuring hsndfile-0.8.0...
[16:38:04] <w1n5t0n> hsndfile > build
[16:38:04] <w1n5t0n> hsndfile > Preprocessing library for hsndfile-0.8.0..
[16:38:05] <w1n5t0n> hsndfile > c2hs: C header contains errors:
[16:38:05] <w1n5t0n> hsndfile >
[16:38:06] <w1n5t0n> hsndfile > .stack-work/dist/x86_64-linux-tinfo6/Cabal-2.4.0.1/build/Sound/File/Sndfile/Interface.i:1: (column 1) [ERROR]  >>> Lexical error !
[16:38:06] <w1n5t0n> hsndfile >   The character '#' does not fit here.
[16:38:07] <w1n5t0n> hsndfile >
[16:38:07] <w1n5t0n> Progress 1/2
[16:38:08] <w1n5t0n> --  While building package hsndfile-0.8.0 (scroll up to its section to see the error) using:
[16:38:08] <w1n5t0n>       /home/w1n5t0n/.stack/setup-exe-cache/x86_64-linux-tinfo6/Cabal-simple_mPHDZzAJ_2.4.0.1_ghc-8.6.5 --builddir=.stack-work/dist/x86_64-linux-tinfo6/Cabal-2.4.0.1 build --ghc-options " -fdiagnostics-color=always"
[16:38:09] <w1n5t0n>     Process exited with code: ExitFailure 1
[16:38:11] <[exa]> w1n5t0n: oh please do not paste code here
[16:38:21] <[exa]> there's pastebin in the /topic :]
[16:38:23] <merijn> technically that's an error, but yeah :p
[16:38:28] <w1n5t0n> There is a dependency on the package hsndfile, which in turn depends on the C library libsndfile, and during `stack build` I get this
[16:38:38] <w1n5t0n> Sorry, tried to edit the message but apparently that's not possible
[16:38:52] <[exa]> no, sent stuff is sent
[16:39:09] <w1n5t0n> https://pastebin.com/ZbbHwhHC
[16:39:37] <w1n5t0n> Sorry I'm a bit stressed at the moment and wasn't thinking straight :(
[16:39:45] <[exa]> no problem
[16:39:57] <w1n5t0n> My question is, how can this not work when everything else in the Stack package's configuration has remained the same?
[16:40:12] <w1n5t0n> Could it have something to do with my local version of the library?
[16:40:23] <[exa]> are you sure that both c2hs and libsndfile "source" is the same version?
[16:40:27] <merijn> ah, I see the problem
[16:40:34] <merijn> c2hs isn't robust
[16:40:40] <romesrf> (is there an Id for constraints? Id m => m would be the same as m)
[16:40:44] <merijn> It was never intended as automated translation
[16:40:54] <merijn> It was a "first pass you fix up manually" kinda tool
[16:40:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:41:06] <merijn> (or was that c2hsc?)
[16:41:13] <c_wraith> romesrf: there's the empty constraint, ()
[16:41:20] <merijn> Anyway, looks like it's barfing on the syntax of the libsndfile headers
[16:41:35] <merijn> So your system probably has a newer libsndfile with different headers
[16:42:06] <c_wraith> romesrf: if you need something with the kind  Type -> Constraint   you could write a type family that returns () for anything
[16:42:14] <romesrf> ty c_wraith :)
[16:42:58] <w1n5t0n> merijn Yes that's what I get from it too. If I were to get an older version of the library locally and add it to the `extra-lib-dirs`, would that take precedence over the system-installed version?
[16:43:20] <merijn> If you fiddle with all the flags, yes
[16:44:03] <w1n5t0n> what flags would those be?
[16:44:04] *** Joins: alx741 (~alx741@157.100.197.240)
[16:44:25] <merijn> It Depends (TM)
[16:44:29] *** Quits: erisco (~erisco@d24-57-249-233.home.cgocable.net) (Ping timeout: 256 seconds)
[16:45:08] <w1n5t0n> hehe
[16:45:39] *** Joins: erisco (~erisco@d24-57-249-233.home.cgocable.net)
[16:45:43] <w1n5t0n> oh god this is turning into a nightmare
[16:45:52] <w1n5t0n> all I wanted was to be able to write arbitrary floating numbers to a wav file :(
[16:46:18] <w1n5t0n> I tried using the WAVE library which is Haskell-only and it works well, but doesn't do floats
[16:46:35] <merijn> tbh, WAVE files are pretty simple
[16:46:53] <merijn> I recall writing my own implementation in C for a university project
[16:47:04] <merijn> took less than an afternoon, I think
[16:47:10] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[16:47:54] <w1n5t0n> Yes I've heard that, the problem is I haven't written anything like that before and I definitely don't have the time to try my hand at it now if I want to be able to deliver this workshop tomorrow morning
[16:52:47] <leah2> cant you prescale them?
[16:54:01] <w1n5t0n> how do you mean?
[16:54:05] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:54:08] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:54:11] <leah2> if the library old does, say, 16-bit WAV
[16:54:30] <leah2> just multiply the float with 65536 and truncate to integer?
[16:55:17] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[16:55:34] <w1n5t0n> What I basically want is to be able to take arbitrary Haskell lists, like [1..5000] or [5.1, 5.2..10.0] and write them into wav files in a way that another program (SuperCollider) can read them back and get those exact values
[16:56:12] <w1n5t0n> This used to work fine with hsndfile, but now with this solution not only will I have to set a fixed range and prescale them, but also change the SuperCollider code so that it knows how to interpret them
[16:57:40] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[16:58:10] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:3933:29:5fe1:cb6b) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:59:28] *** Joins: zeenk (~zeenk@2a02:2f04:a30d:1300:51a3:bcfc:6cda:9fc5)
[17:00:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:02:01] *** Joins: k8yun (~k8yun@user/k8yun)
[17:03:00] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Read error: Connection reset by peer)
[17:03:01] <[exa]> w1n5t0n: there might be other libraries for writing wavs, have a look at Codec.Wav, Codec.Audio.Wave (looks newer), and perhaps Sound.Sox.Format
[17:05:34] *** Joins: alx741 (~alx741@157.100.197.240)
[17:06:34] *** Joins: sheb (~sheb@31.223.228.71)
[17:07:07] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[17:07:18] *** Quits: sheb (~sheb@31.223.228.71) (Remote host closed the connection)
[17:07:43] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[17:08:41] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:09:37] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[17:11:26] *** Quits: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (Ping timeout: 252 seconds)
[17:15:57] <w1n5t0n> [exa] I can't find Codec.Wav or Codec.Audio.Wave - there's a codec package on hackage but it doesn't seem to have anything to do with wavs
[17:16:00] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (Ping timeout: 272 seconds)
[17:16:34] <w1n5t0n> It's quite likely that I just don't understand how hackage works
[17:16:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:3d23:94e0:3c0f:8df3)
[17:19:42] *** Quits: kritzefitz (~kritzefit@debian/kritzefitz) (Ping timeout: 252 seconds)
[17:19:48] <leah2> Data.WAVE has a doubleToSample, dont you think that will do the job
[17:20:18] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[17:20:33] <[exa]> w1n5t0n: I meant this pkg https://hackage.haskell.org/package/wave
[17:20:43] <[exa]> (use hoogle to match packages to modules)
[17:21:30] <w1n5t0n> leah2 I tried it, it assumes that the doubles are normalised bipolar waves in the range of -1 to 1
[17:21:48] *** Joins: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de)
[17:21:59] <w1n5t0n> which mine are most often not, so it just chops off everything else
[17:22:04] <leah2> tbh i dont see much sense in having full floats for a waveform oO
[17:23:20] <w1n5t0n> It's not for a waveform meant to represent audio, it's for a waveform meant to represent arbitrary signals
[17:23:31] <w1n5t0n> which are then used to control various arbitrary synthesis parameters
[17:23:34] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[17:23:47] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:23:48] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:24:04] <w1n5t0n> [exa] thanks, that seems like it should work
[17:24:59] *** Joins: xkuru (~xkuru@user/xkuru)
[17:26:58] *** Joins: alx741 (~alx741@157.100.197.240)
[17:29:36] <merijn> How's GHC 9.2 support? Should I have any hope of stuff compiling with 9.2 without too much pain yet?
[17:29:49] *** Joins: chomwitt (~chomwitt@2a02:587:dc15:800:4308:c5a2:39b7:2fb7)
[17:30:03] *** Quits: Ariakenom (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:30:46] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:32:17] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[17:33:31] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[17:34:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[17:36:34] *** Quits: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de) (Ping timeout: 250 seconds)
[17:36:49] *** Joins: Inoperable (~PLAYER_1@fancydata.science)
[17:37:18] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[17:38:54] <w1n5t0n> [exa] so apparently Codec.Audio.Wave.writeWaveFile needs me to provide a (Handle -> IO ()) to do the actual writing of the data
[17:39:29] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[17:39:52] <w1n5t0n> Assuming that all the info I passed in the header is correct, would that function just take a float array and write the raw bytes to the handle?
[17:39:58] <w1n5t0n> I'm just a bit confused as to how to use it
[17:41:12] *** Joins: Topsi (~Tobias@dyndsl-095-033-091-109.ewe-ip-backbone.de)
[17:43:59] <w1n5t0n> float list*, sorry
[17:44:13] <geekosaur> that doesn't look like a writing function. that type looks like all it could do is closethe Handle
[17:44:30] *** Joins: AkechiShiro (~licht@user/akechishiro)
[17:44:50] <w1n5t0n> Yes it's a bit confusing, I don't see another "proper" writing function though
[17:47:57] *** Quits: xff0x (~xff0x@2001:1a81:5290:8400:55c0:f8c1:431:6807) (Ping timeout: 240 seconds)
[17:48:35] *** Joins: alx741 (~alx741@157.100.197.240)
[17:48:59] <merijn> geekosaur: Yeah, I saw that API and was like "??"
[17:49:03] <merijn> I tried looking at the source
[17:49:08] <merijn> I am still very confused
[17:49:53] *** Joins: jgeerds (~jgeerds@55d4b9df.access.ecotel.net)
[17:49:53] *** Joins: xff0x (~xff0x@2001:1a81:5290:8400:55c0:f8c1:431:6807)
[17:51:54] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[17:54:17] <[exa]> ah looks like you're supposed to do the writing of the raw data yourself, presumably for efficiency
[17:55:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[17:55:31] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:59:13] *** Quits: ubert (~Thunderbi@86.107.21.10) (Ping timeout: 256 seconds)
[17:59:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 240 seconds)
[17:59:24] *** Quits: ubert1 (~Thunderbi@p200300ecdf0994ec6d4ec32f6f41158b.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:00:20] *** Joins: ubert (~Thunderbi@5.253.207.46)
[18:01:26] <w1n5t0n> Yes, but how does that work?
[18:01:41] <w1n5t0n> Do I just provide a function that takes the handle and dumps the raw bytes for all the floats in a list?
[18:01:56] *** Parts: coot (~coot@213.134.190.95) ()
[18:01:59] <w1n5t0n> I haven't done anything like that before so I'm not really sure how it's meant to work
[18:03:47] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[18:04:03] *** Joins: fef (~thedawn@user/thedawn)
[18:08:16] *** Joins: jtomas (~jtomas@210.red-88-24-179.staticip.rima-tde.net)
[18:09:43] <janus> merijn: there is one compiler crash that is fixed in 9.0.2 but not in 9.2.1, and it bit swagger2: https://github.com/GetShopTV/swagger2/pull/233#issuecomment-1029462730
[18:09:58] *** Joins: alx741 (~alx741@157.100.197.240)
[18:10:33] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[18:10:36] *** Quits: `2jt (~jtomas@130.red-88-22-46.staticip.rima-tde.net) (Ping timeout: 240 seconds)
[18:11:04] <janus> funny how that bug appeared just as GHC 9.2.1 enabled PolyKinds by default
[18:11:11] <maerwald[m]> merijn: i haven't even tried and have little interest in testing any of the 9.x series :o
[18:11:41] <maerwald[m]> I think only M1 users are excited about ghc 9
[18:12:22] <merijn> maerwald[m]: 9 has -XNoFieldSelectors!
[18:12:43] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (Ping timeout: 268 seconds)
[18:12:43] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:12:48] <merijn> And 9.0 had a bunch of performance improvements
[18:13:07] <yushyin> -XNoFieldSelectors is ♥
[18:13:09] <janus> anybody who hates a the giant list of language extensions should love GHC2021 and therefore GHC9.2.1
[18:13:17] <geekosaur> and gc improvements
[18:13:19] <merijn> janus:
[18:13:25] *** Quits: texasmynsted_ (~texasmyns@99.96.221.112) (Quit: ZNC - http://znc.in)
[18:13:28] <merijn> GHC2021 I find rather unappealing, tbh
[18:13:56] <merijn> geekosaur: For the normal one or just the new low-latency one?
[18:14:02] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Remote host closed the connection)
[18:14:16] <geekosaur> they fixed a shitton of performance issues witrh the parallel gc
[18:14:21] <janus> everybody disagrees with some part of GHC2021. but i choose to be an optimist ;)
[18:14:28] <merijn> I don't use the paralle GC anyway, tbh
[18:15:28] <maerwald[m]> This is why we need --std=haskell2020 flag, so you can update GHC to get platform support improvements, without buying into all the language breaking changes
[18:15:53] <merijn> maerwald[m]: cabal already does that for you?
[18:16:04] <maerwald[m]> Huh?
[18:16:16] <merijn> You can specify default language and just use Haskell2010
[18:16:33] <merijn> Just like Haskell98 (and now GHC2021) are options
[18:17:02] <maerwald[m]> I don't think that does what I meant
[18:17:10] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[18:17:11] <merijn> What did you mean, then?
[18:17:28] <maerwald[m]> E.g. in c compilers, compilation will fail if a source file doesn't adhere to the standard
[18:18:38] *** Joins: doyougnu (~doyougnu@cpe-67-249-83-190.twcny.res.rr.com)
[18:18:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:18:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:18:42] *** Joins: wroathe (~wroathe@user/wroathe)
[18:18:49] <maerwald[m]> I want to opt out of ALL language changes
[18:20:17] <maerwald[m]> E.g. simplified subsumption in ghc 9.0.1
[18:21:39] *** Quits: off^ (~off@12.163.216.98) (Remote host closed the connection)
[18:22:05] *** Joins: off^ (~off@12.163.216.98)
[18:22:22] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[18:23:33] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:24:11] <janus> is simplified subsumption something haskell98 users can encounter?
[18:24:57] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[18:24:58] <geekosaur> yes
[18:25:02] *** Quits: jgeerds (~jgeerds@55d4b9df.access.ecotel.net) (Ping timeout: 272 seconds)
[18:25:05] <maerwald[m]> I think it's just underspecified 
[18:25:07] *** Joins: Typedfern (~Typedfern@170.red-88-24-162.staticip.rima-tde.net)
[18:25:19] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[18:25:43] <janus> ooh, so with a sufficiently specified language, you'd get what you want, maerwald?
[18:25:58] *** Quits: chomwitt (~chomwitt@2a02:587:dc15:800:4308:c5a2:39b7:2fb7) (Ping timeout: 250 seconds)
[18:26:09] <janus> but nobody is interested in pinning down these aspects, i guess
[18:26:19] <maerwald[m]> Yes, I want to get bugfixes and platform improvements, but I don't care for any of the language changes
[18:26:39] <maerwald[m]> I thinl there is interest, it's just an insane amount of work
[18:27:22] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:27:37] <geekosaur> simplified subsumption and parsing changes are things that aren't hidden behind LANGUAGE pragmas
[18:27:57] <geekosaur> (spaces are significant in more places)
[18:29:29] <maerwald[m]> The alternative would be to do GHC LTS and burn out backporting things between GHC HEAD and 8.10.x
[18:30:27] *** Joins: alx741 (~alx741@181.199.42.143)
[18:31:55] <janus> maerwald[m]: which is the most haskell-like language that is totally specified as you wish for? you mentioned C but i wonder which others there are
[18:32:23] <maerwald[m]> C is not really well specified xD
[18:33:13] <merijn> maerwald[m]: It is "well specified", it's just not specified "well" :p
[18:33:30] <maerwald[m]> Afair even pointers are implementation defined
[18:33:46] <merijn> Ah...persistent doesn't support GHC 9.0, lemme nope the fuck out of supporting 9.x for this code...
[18:35:39] <maerwald[m]> merijn: https://github.com/yesodweb/persistent/pull/1265
[18:35:48] <maerwald[m]> Seems supported
[18:36:30] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[18:36:47] <maerwald[m]> janus: well, I don't care for specifications much, except that they are a proxy for stability 
[18:37:18] <merijn> maerwald[m]: No, because it doesn't support template-haskell 2.18, which ships with 9.2
[18:37:38] <merijn> oh, I typed 9.0 instead of 9.2
[18:37:43] <maerwald[m]> merijn: https://github.com/yesodweb/persistent/pull/1338
[18:38:14] <merijn> Yeah, but I spent 5 years babysitting persistent updates until things were fixed for me
[18:38:20] <hud> Hello, trying to create haddock docs according to https://github.com/coot/haddock-example - does anyone know where ghcup installs the haddock-api resource directory
[18:38:37] <merijn> I'll just deem GHC 8.10 the canonical only supported GHC version before archiving this stuff
[18:38:42] <maerwald[m]> hud: which ghc version?
[18:41:27] *** Quits: w1n5t0n (~w1n5t0n@87.74.143.200) (Ping timeout: 256 seconds)
[18:42:24] <hud> 8.10.7
[18:42:25] <maerwald[m]> hud: here is a list of installed files https://gitlab.haskell.org/haskell/ghcup-hs/-/blob/master/.gitlab/ghc-8.10.3-linux.files
[18:43:01] <maerwald[m]> So somewhere in ~/.ghcup/ghc/8.10.7
[18:44:00] *** Joins: hololeap (~hololeap@user/hololeap)
[18:44:33] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:47:10] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:47:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:48:04] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[18:51:43] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[18:51:49] <hud> cheers maerwald!
[18:52:52] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[18:53:15] *** Joins: k8yun (~k8yun@user/k8yun)
[18:53:24] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 240 seconds)
[18:53:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:53:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:53:26] *** Joins: wroathe (~wroathe@user/wroathe)
[18:53:36] *** Joins: jao (~jao@68.235.43.172)
[18:53:53] *** Joins: alx741 (~alx741@157.100.197.240)
[18:54:08] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Client Quit)
[18:54:17] *** Joins: etadifficult (~etadiffic@95.155.49.108)
[18:54:23] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[18:55:44] *** etadifficult is now known as exadifficult
[18:57:31] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[18:57:52] *** Quits: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6) (Client Quit)
[18:57:59] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[18:58:08] *** Joins: vorpuni (~pvorp@2001:861:3881:c690:d322:f659:136d:eef6)
[18:58:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[19:00:12] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 240 seconds)
[19:00:36] *** Quits: gmc (sid58314@id-58314.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[19:00:36] *** Quits: gregberns__ (sid315709@id-315709.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[19:01:03] *** Joins: gregberns__ (sid315709@id-315709.helmsley.irccloud.com)
[19:01:04] *** Joins: gmc (sid58314@id-58314.ilkley.irccloud.com)
[19:01:11] *** Quits: iphy (sid67735@id-67735.lymington.irccloud.com) (Ping timeout: 245 seconds)
[19:01:20] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[19:01:24] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[19:01:24] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[19:02:04] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[19:02:04] *** Joins: rtpg (sid443069@id-443069.ilkley.irccloud.com)
[19:03:40] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:04:09] *** Joins: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de)
[19:04:21] *** Joins: iphy (sid67735@id-67735.lymington.irccloud.com)
[19:06:13] *** Quits: alp (~alp@user/alp) (Remote host closed the connection)
[19:08:12] *** Joins: alp (~alp@user/alp)
[19:10:58] *** Joins: Guest89 (~Guest89@2a01:41e1:45f8:d600:cf73:c87f:80cc:d6bb)
[19:14:40] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[19:15:17] *** Joins: alx741 (~alx741@157.100.197.240)
[19:16:17] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 256 seconds)
[19:18:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:20:20] *** Quits: off^ (~off@12.163.216.98) (Remote host closed the connection)
[19:20:23] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[19:22:41] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:3279:5094:80d0:564b) (Quit: WeeChat 2.8)
[19:25:33] *** Joins: arcadiancomp (~anon626@96-91-245-193-static.hfc.comcastbusiness.net)
[19:25:47] *** Joins: jacobjacobjacob (~jacobjaco@207.38.150.86)
[19:27:07] *** Joins: Midjak (~Midjak@82.66.147.146)
[19:31:19] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[19:32:39] *** Joins: dolio (~dolio@130.44.130.54)
[19:35:18] *** Joins: alx741 (~alx741@157.100.197.240)
[19:38:30] *** Quits: jacobjacobjacob (~jacobjaco@207.38.150.86) (Quit: Client closed)
[19:38:44] *** Joins: jacobjacobjacob (~jacobjaco@207.38.150.86)
[19:38:57] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[19:39:12] *** Quits: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de) (Ping timeout: 250 seconds)
[19:40:12] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[19:40:27] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[19:40:46] *** Quits: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net) (Remote host closed the connection)
[19:41:00] *** Joins: Unicorn_Princess (~Unicorn_P@93-103-228-248.dynamic.t-2.net)
[19:44:10] *** Quits: jacobjacobjacob (~jacobjaco@207.38.150.86) (Quit: Client closed)
[19:44:11] *** Joins: arjun (~user@user/arjun)
[19:44:31] *** Joins: jcob (~jcob@207.38.150.86)
[19:45:10] *** Joins: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de)
[19:48:12] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (Ping timeout: 240 seconds)
[19:48:12] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 240 seconds)
[19:48:42] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[19:49:36] *** Joins: taktoa[c] (sid282096@id-282096.tinside.irccloud.com)
[19:51:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Remote host closed the connection)
[19:53:25] *** Quits: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net) (Ping timeout: 240 seconds)
[19:55:37] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[19:56:42] *** Joins: alx741 (~alx741@157.100.197.240)
[19:56:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[19:57:13] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[19:58:23] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[19:59:30] *** Joins: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:e8b6:fb9b:140c:6089)
[20:00:04] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[20:00:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Ping timeout: 240 seconds)
[20:01:07] *** Quits: teehemkay_ (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 256 seconds)
[20:01:23] *** Joins: teehemkay_ (sid14792@id-14792.lymington.irccloud.com)
[20:02:26] *** Quits: aeka (~aeka@user/hiruji) (Quit: ZNC 1.8.2 - https://znc.in)
[20:03:53] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 256 seconds)
[20:05:48] *** Joins: considerate[m] (~considera@2001:470:69fc:105::1:c2aa)
[20:06:33] *** Joins: tdammers (~tdammers@77.109.72.177.res.static.edpnet.net)
[20:07:14] *** Joins: aeka (~aeka@user/hiruji)
[20:09:37] *** Joins: Ariakenom_ (~Ariakenom@h-82-196-111-63.NA.cust.bahnhof.se)
[20:13:23] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:13:50] *** Quits: Ariakenom (~Ariakenom@2001:9b1:efe:9d00:e8b6:fb9b:140c:6089) (Ping timeout: 260 seconds)
[20:17:47] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[20:18:02] *** geekosaur is now known as sequell-clippy
[20:18:05] *** Joins: alx741 (~alx741@181.199.42.143)
[20:20:39] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[20:21:26] *** sequell-clippy is now known as geekosaur
[20:21:26] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:23:28] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 272 seconds)
[20:24:03] <justsomeguy> I couldn't figure out how to implement reverse without using (++), so I looked it up, and now I feel dumb for not coming up with it on my own.
[20:26:04] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[20:28:40] *** Joins: rusrushal13 (~rusrushal@103.85.18.43)
[20:29:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[20:30:46] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:3581:2989:c5ee:9353)
[20:31:04] *** Quits: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk) (Ping timeout: 272 seconds)
[20:31:57] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:33:26] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:34:16] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:35:41] <merijn> It happens :)
[20:35:51] <vaibhavsagar[m]> there are several things in Haskell that make me feel like this, such as implementing continuations and implementing `foldl` in terms of `foldr`
[20:35:51] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Remote host closed the connection)
[20:36:06] <merijn> vaibhavsagar[m]: "staring at ContT"?
[20:36:15] *** Quits: jcob (~jcob@207.38.150.86) (Quit: Client closed)
[20:36:48] <vaibhavsagar[m]> yeah, I mean rewriting it on my own without looking at the source beforehand
[20:37:14] <vaibhavsagar[m]> and then when I finally reference it it's like "oh, of course"
[20:37:21] <merijn> I will never not be confused by ContT :p
[20:37:43] <geekosaur> I worked it through once.I plan to not need to do so again
[20:38:28] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:60ac:5115:d501:c1e2)
[20:38:33] <merijn> geekosaur: For me it's just an infinite loop of "I don't understand this" -> "oh, this makes sense" -> '...wait' -> "????" -> repeat
[20:38:34] *** Joins: alx741 (~alx741@181.199.42.143)
[20:38:42] <vaibhavsagar[m]> https://www.haskellforall.com/2014/04/how-continuation-monad-works.html is my farouvite
[20:38:53] <vaibhavsagar[m]> typed holes are nice too for this https://vaibhavsagar.com/blog/2017/05/22/discovering-continuations/
[20:41:37] *** Joins: zebrag (~chris@user/zebrag)
[20:41:55] *** Quits: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[20:45:00] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[20:45:36] <sm> merijn: argh that's too familiar
[20:46:15] <sm> sounds like my week
[20:48:06] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[20:48:42] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:48:58] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[20:51:00] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 240 seconds)
[20:53:16] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[20:53:26] *** Quits: turlando (~turlando@user/turlando) (Quit: turlando)
[20:54:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[20:56:01] *** Quits: alphabeta (~kilolympu@vpn-fn-230.net.ed.ac.uk) (Ping timeout: 256 seconds)
[20:56:42] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[20:56:42] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[20:56:42] *** Joins: turlando (~turlando@user/turlando)
[20:58:12] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[20:58:33] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Remote host closed the connection)
[20:58:36] *** Joins: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de)
[20:58:37] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[20:59:41] *** Joins: kilolympus (~kilolympu@vpn-fn-230.net.ed.ac.uk)
[21:01:05] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[21:02:40] *** Joins: bjobjo (~bjobjo@user/bjobjo)
[21:03:05] <chronon> As I am just starting out on my Haskell learning adventure, I am wondering what I actually need to install to be able to try out tutorial examples.
[21:03:30] <chronon> On my Ubuntu system I see packages for ghc and also haskell-platform and similar.
[21:03:33] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[21:04:04] <chronon> What would be a good starting point for a hassle-free batteries included kind of experience.
[21:04:44] *** Joins: alx741 (~alx741@157.100.197.240)
[21:05:18] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[21:05:21] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Read error: Connection reset by peer)
[21:05:33] <geekosaur> there isn't really a batteries-included setup, but both stack and cabal manage the batteries for you so you usually don't need to care
[21:05:36] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[21:05:40] <vaibhavsagar[m]> chronon: `ghcup`
[21:06:13] <geekosaur> we usually start with ghcup. install a ghc version (typically 8.10.7 as the ecosystem is still adapting to 9.x) and either stack or cabal (which is up to personal taste)
[21:06:15] <vaibhavsagar[m]> it should install `ghc` and `cabal-install` (or `stack`) for you, and then you're off to the races
[21:06:26] <geekosaur> stack and cabal both manage libraries for ypu
[21:07:11] <geekosaur> personally I prefer cabal-install. others prefer stack. (it's about a 50-50 split)
[21:07:11] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:07:15] <chronon> Ok, I see a debian package called haskell-stack.
[21:07:30] *** Quits: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de) (Ping timeout: 260 seconds)
[21:07:36] <chronon> There is no package called ghcup
[21:07:55] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:08:01] <[exa]> chronon: ghcup is like a rustup, a small maintenance thingy that manages your local installation of the ghc and tooling around
[21:08:29] <geekosaur> and debian is as usualancient and won't have it
[21:08:49] <Clint> and doesn't need to because you can just `apt install ghc cabal-install `
[21:09:03] <geekosaur> https://www.haskell.org/ghcup/install/
[21:09:14] <[exa]> chronon: this way it dodges the concerns of debian packaging (that usually prefers to have an older ghc and a different management of packages)
[21:09:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a0be:91d2:ac63:61de)
[21:09:31] <chronon> I see. I'm folloing that link now..
[21:10:11] <[exa]> otoh honestly, ghc and cabal-install from debian could work at least for the first few days... at least until you hit the first packaging incompatibility with debian :D
[21:10:12] <chronon> I generally prefer to lean on my package manager for an easy life, but if it's all too out of date...
[21:10:38] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:10:42] <Clint> depends how you define "out of date"
[21:11:29] <chronon> Wait, is this ghcup thing going to create containers, and manage different versions of ghc in a way that prevents me from just maintaining a single version system-wide?
[21:11:53] <sclv> it installs ghc versions in ~/.ghcup
[21:12:01] <[exa]> chronon: it installs a single-user version into a single well-maintainable directory
[21:12:05] <sclv> and lets you manage which version is in your path
[21:12:09] <Clint> there's also https://launchpad.net/~hvr/+archive/ubuntu/ghc if you need "bleeding edge"
[21:13:03] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:13:06] <sclv> the hvr ppa used to be good, but it no longer gets bleeding edge updates
[21:13:18] <sclv> so its no longer a top choice pick, sadly
[21:13:32] <chronon> I've traditionally preferred to maintain a single stable version (of nearly everything) system wide rather than try to have special bleeding edge stuff in different environments. I'm not a bleeding edge kinda guy by nature.
[21:14:00] <Clint> i'm still on 8.8 since more than one of my dependencies doesn't work with newer ghc yet
[21:15:33] <chronon> What is the main difference between cabal and stack, and how does ghcup relate? (Sorry if these are dumb questions.)
[21:15:45] <geekosaur> ghcup is just an installer
[21:15:48] <sclv> ghcup is just a tool to ease installation and management of other tools
[21:15:54] <sclv> the core choice is cabal and stack
[21:16:03] <chronon> Ok
[21:16:18] <sclv> stack is designed to use only a fixed set of libraries at fixed versions (stackage)
[21:16:21] <chronon> And the difference? The reasons one might choose one over the other?
[21:16:36] <sclv> cabal is designed to let you use all libraries, at all versions, and runs a solver to figure out compatible plans.
[21:17:02] <chronon> Wow, you need a solver to make things compatible?
[21:17:14] <sclv> chronon: well that's no different than any os distro
[21:17:32] <sclv> all modern package managers run solvers under the ood
[21:17:56] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 272 seconds)
[21:18:22] <chronon> Typically, a Linux package manager is able to use the latest versions of packages, because typically people don't break backwards compatibility (or at least only do so temprarily)
[21:19:03] <sclv> "typically" is because the distro packages are all maintained by a huge team of volunteers.
[21:19:07] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[21:19:17] <sclv> and they still mainly use solvers because "typical" isn't always.
[21:19:31] <chronon> But if cabal is going to let this total newb get things done without having to fix complex module compatibility issues, I guess I should place my trust in it.
[21:19:35] *** Joins: trriplex (~trriplex@user/trriplex)
[21:19:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-022.wadham.ox.ac.uk)
[21:19:47] <geekosaur> and if you pay attention you''ll notice that for example a lot of distros took a lot of time to move to ncurses 6 because of all the breakage
[21:19:56] <sclv> cabal is the easiest way if you want to use any old (not bitrotted) package off the main package repository to experiment.
[21:20:43] <chronon> Ok, so do I apt install the package called cabal-install first?
[21:21:14] <sclv> chronon: if you want to stick to just what your system provides without newer versions, then just apt installing ghc and cabal-install will suffice.
[21:21:42] <chronon> It seems to have dpendencies on ghc v8.8.1 and libncurses5 amongst a few other things.
[21:21:46] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-37-106.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[21:21:59] <sclv> ok so then it'll pull in ghc for you too, which is fine.
[21:22:05] <geekosaur> that sounds very debian :)
[21:22:18] <sclv> note that 8.8 is at the tail end of "ghc that people still actively use and support"
[21:22:19] <chronon> Ok, I'll start there. Thanks.
[21:22:25] <sclv> but for learning it should be fine!
[21:22:42] *** Quits: Guest89 (~Guest89@2a01:41e1:45f8:d600:cf73:c87f:80cc:d6bb) (Quit: Client closed)
[21:23:11] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:24:29] *** Joins: econo (uid147250@user/econo)
[21:24:36] <chronon> It's installed. Do I need any further step, libraries, docs, etc?
[21:25:01] <sclv> nope.
[21:25:13] *** Joins: alx741 (~alx741@181.199.42.143)
[21:25:16] <sclv> if you have ghci in your path, try to launch it, and you'll have a repl
[21:25:30] <sclv> you can enter a new project directory and run `cabal init` to create a project, and start experimenting.
[21:26:03] <sclv> chronon: which version of cabal-install did you get by the way?
[21:26:41] <chronon> It says 2.4.0
[21:26:44] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:26:46] <chronon> Is that good enough?
[21:27:23] <sclv> errr... i'd recommend something in the 3.0 series
[21:27:33] <chronon> Yes, I have ghc and ghci in my path. What's the difference?
[21:27:51] <sclv> ghc is a compiler, ghci launches a python-style interactive repl
[21:28:03] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[21:28:25] <sclv> you can always just download a generic unix compat cabal-install binary from https://www.haskell.org/cabal/download.html
[21:28:42] *** Joins: alx741 (~alx741@157.100.197.240)
[21:28:53] <chronon> Is it possible to run Haskell as an interpreter, ie. using shebang lines #!/usr/bin/ghc or similar?
[21:29:02] <[exa]> yes, there's ghci
[21:29:11] <geekosaur> sounds more like runhaskell
[21:29:25] <chronon> So that would be #!/usr/bin/ghci at the top of the script?
[21:29:28] <geekosaur> cabal and stack also have "script mode"
[21:29:45] <sclv> (using cabal 2.4, the commands people describe as modern cabal commands are still going to need to be prefixed with `v2` so you'll need to run `v2-build` instead of `build` etc to get more modern behavior)
[21:30:01] <chronon> Oh.
[21:30:05] *** Quits: alp (~alp@user/alp) (Ping timeout: 256 seconds)
[21:30:25] <sclv> not ghci. ghci is an interactive setting where you type and it responds. you would put runhaskell at the top of the script, iirc.
[21:30:26] <chronon> Hmm, is there a PPA fr more up to date package versions maybe?
[21:30:33] <sclv> yes -- somebody linked above
[21:30:50] <sclv> https://launchpad.net/~hvr/+archive/ubuntu/ghc
[21:31:04] <chronon> Ah, ok. Then perhaps that's my best approach.
[21:31:05] <sclv> its not super up to date, but certainly more up to date than what you're going to get from debian directly
[21:33:52] <chronon> I notice there's a ghc-doc tool that was not brought in as a dependency. I assume that's a perldoc, pydoc kind of tool that I would likely need. Right?
[21:34:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:34:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:34:03] *** Joins: wroathe (~wroathe@user/wroathe)
[21:34:27] *** Quits: trriplex (~trriplex@user/trriplex) (Quit: Leaving)
[21:34:27] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:35:49] <sclv> i think that's just docs for ghc
[21:35:51] <sclv> you can find them online
[21:36:01] <sclv> the tool we use for documentation is called "haddock" and it should come with ghc?
[21:36:23] <sclv> or cabal should be able to pull it in for builds as needed
[21:36:43] <sclv> i think its much better at this point if you just start doing stuff and learning
[21:36:49] <sclv> and then discover what else you may want as you go.
[21:37:04] *** Joins: alp (~alp@user/alp)
[21:38:00] <sm> stack's shebang support is the most mature, see "stack script interpreter" in manual
[21:38:18] <sclv> at this point i think cabal's is just as nice as stacks's
[21:38:54] <sclv> the differences that exist are in philosophy not features
[21:38:54] <sm> does it avoid compiling each time, sclv ?
[21:39:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:39:09] <sclv> we have a pr merged that does that now.
[21:39:23] <sm> ok.. not released yet ?
[21:39:24] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:39:32] <sclv> released in HEAD :-P
[21:39:53] <sm> 👍🏻😎
[21:40:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b) (Remote host closed the connection)
[21:44:57] <chronon> I prefer having local docs. I don't like to be too dependent on an internet connection for getting work done. Also local docs can be grepped and scanned in ways that someone else's website can't.
[21:45:18] <monochrom> haddock comes with GHC, and you are really better off using the haddock that comes with GHC as a matter of pairing.
[21:47:11] <chronon> Ok, and I see that the PPA contains cabal-install various versions, then cabal-install-head which I presume to be latest. Is that the one I want?
[21:47:37] <sclv> no, just pick the latest actually numbered version.
[21:48:02] <sclv> head would, I believe, be the one from the github repo, last time the ppa actually was updated (which is not continously)
[21:48:07] <chronon> The PPA has various versions of GHC up to 9.0.1 what might be the problem with the latest?
[21:48:25] <sclv> on linux you're fine with the that
[21:48:43] *** Quits: Major_Biscuit (~MajorBisc@c-001-017-054.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[21:48:51] <sclv> a lot of production code is still stabilized on 8.10.7 too
[21:49:06] <geekosaur> the main feature of 9.2.1 is native support for Apple M1
[21:49:17] <chronon> And you would recommend cabal-install-3.4 rather than cabal-install-latest?
[21:49:26] <sclv> latest is fine, should be an alias
[21:49:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[21:50:16] <chronon> Right.
[21:50:46] <chronon> Actually I meant ..-head not ..-latest but same thing I presume.
[21:51:49] *** Joins: alphabeta (~kilolympu@31.205.200.235)
[21:51:52] <sclv> no, don't use head.
[21:52:04] *** Joins: alx741 (~alx741@157.100.197.240)
[21:52:06] <sclv> head is not a named release. it is built directly from the github development repo
[21:52:07] *** Quits: kilolympus (~kilolympu@vpn-fn-230.net.ed.ac.uk) (Ping timeout: 256 seconds)
[21:52:25] <sclv> use the latest numbered release
[21:52:30] *** Joins: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de)
[21:52:31] <chronon> Oh, I'll rollback...
[21:53:20] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:54:40] *** Quits: deadmarshal (~deadmarsh@95.38.231.188) (Ping timeout: 272 seconds)
[21:56:31] *** Joins: prolic (~prolic@181.122.131.227)
[21:56:32] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[21:57:26] *** Quits: acidjnk (~acidjnk@200116b8677273009c8f7d913250827a.dip.versatel-1u1.de) (Ping timeout: 260 seconds)
[21:58:05] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[21:58:05] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[21:58:56] <chronon> I now have /opt/cabal/bin containing cabal, and /opt/ghc/bin contining ghc AND cabal. Presumably it is sufficient to add only /opt/ghc/bin to my $PATH
[21:59:54] <sclv> yes, this is what the documentation describes on the ppa page.
[22:00:39] <chronon> Ah, so it does. :)
[22:00:55] <chronon> I should rtfm clearly.
[22:01:19] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:04:25] *** Joins: sammelweis (~quassel@2601:401:8200:2d4c:bd9:d04c:7f69:eb10)
[22:06:32] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[22:13:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[22:13:33] <chronon> All setup nicely now. Thanks all.
[22:13:54] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[22:14:36] *** Joins: alx741 (~alx741@157.100.197.240)
[22:15:16] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:16:17] *** Joins: Batzy (~quassel@user/batzy)
[22:17:24] *** Quits: jao (~jao@68.235.43.172) (Ping timeout: 240 seconds)
[22:19:55] *** Joins: notzmv (~zmv@user/notzmv)
[22:20:28] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:26:24] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[22:27:48] *** Quits: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[22:28:53] *** Joins: wonko_ (~wjc@2a0e:1c80:11::50)
[22:30:14] *** Quits: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909) (Remote host closed the connection)
[22:30:23] *** Quits: rusrushal13 (~rusrushal@103.85.18.43) (Ping timeout: 256 seconds)
[22:30:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[22:31:31] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 256 seconds)
[22:33:34] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:34:27] *** Joins: hololeap (~hololeap@user/hololeap)
[22:35:07] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:36:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:b580:ab83:1b56:af3b)
[22:38:02] *** Joins: alx741 (~alx741@157.100.197.240)
[22:40:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Remote host closed the connection)
[22:41:30] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Remote host closed the connection)
[22:41:45] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[22:42:20] *** Joins: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net)
[22:47:05] *** Quits: yauhsien (~yauhsien@61-231-37-106.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[22:55:19] *** Joins: c209e6dc-4d76-47 (~aditya@2601:249:4300:1296:195:dac6:592c:a55a)
[22:55:37] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[22:56:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f)
[22:59:24] *** Joins: alx741 (~alx741@181.199.42.143)
[23:01:00] *** Quits: Null_A (~null_a@2601:645:8700:2290:890f:d3a0:aab0:f3f) (Ping timeout: 240 seconds)
[23:01:27] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[23:02:55] *** Quits: alx741 (~alx741@181.199.42.143) (Read error: Connection reset by peer)
[23:04:35] *** Quits: prolic (~prolic@181.122.131.227) (Remote host closed the connection)
[23:05:16] *** Joins: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de)
[23:06:09] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:10:20] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[23:10:34] *** Quits: arjun (~user@user/arjun) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[23:11:31] *** Quits: acidjnk (~acidjnk@200116b86772730041d55f290efc04ff.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[23:12:32] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:13:51] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[23:15:16] *** Lord_of_Life_ is now known as Lord_of_Life
[23:16:06] *** Joins: shiraeeshi (~shiraeesh@109.166.56.8)
[23:20:07] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[23:20:27] <romesrf> hi
[23:20:29] *** Joins: alx741 (~alx741@157.100.197.240)
[23:20:47] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:20:51] <romesrf> i'm trying to make a Digest SHA256 out of a hash, but I always get "Nothing"
[23:21:06] <romesrf> digestFromByteString ("f9c5215545f1ab634bfed5e795815395840fac03848fb59d095ba32d12b061dca" :: ByteString) :: Maybe (Digest SHA256)
[23:21:22] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:25:02] <joel135> https://hackage.haskell.org/package/cryptonite-0.29/docs/Crypto-Hash.html ?
[23:25:36] <tomsmeding> romesrf: perhaps you need to hex decode first?
[23:26:00] <tomsmeding> the fact that it is a bytestring and not a String or Text makes it likely that it expects the digest in byte form
[23:26:37] *** Quits: shailangsa (~shailangs@host86-186-127-164.range86-186.btcentralplus.com) (Remote host closed the connection)
[23:29:01] <romesrf> ah! right, f9 should be f9 not ascii values for f9
[23:29:07] <romesrf> ty :)
[23:31:09] *** Joins: jao (~jao@static-68-235-44-54.cust.tzulo.com)
[23:31:46] <tomsmeding> sclv: is that https://github.com/haskell/cabal/pull/7851 ?
[23:32:12] * tomsmeding is excited for caching script support
[23:32:13] *** Quits: Topsi (~Tobias@dyndsl-095-033-091-109.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[23:32:36] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[23:33:34] *** Joins: Null_A (~null_a@2601:645:8700:2290:a4fb:481a:7fa9:b909)
[23:35:24] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 240 seconds)
[23:35:33] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:49] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:29] *** Joins: alx741 (~alx741@157.100.197.240)
[23:39:37] *** Joins: merijn (~merijn@c-001-001-027.client.esciencecenter.eduvpn.nl)
[23:40:35] *** Quits: alx741 (~alx741@157.100.197.240) (Read error: Connection reset by peer)
[23:46:09] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:47:48] *** Joins: deadmarshal (~deadmarsh@95.38.231.188)
[23:57:18] *** Joins: prolic (~prolic@181.122.131.227)
[23:58:25] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:59:06] *** Joins: alx741 (~alx741@157.100.197.240)
