[00:18:29] <Geth> ¬¶ doc: 8966a49f14 | (Alexander Hartmaier)++ | doc/Language/operators.pod6
[00:18:29] <Geth> ¬¶ doc: add Set operator character explanations
[00:18:29] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/8966a49f14
[00:18:29] <Geth> ¬¶ doc: 2d5418e10d | (Will Coleda)++ (committed using GitHub Web editor) | doc/Language/operators.pod6
[00:18:29] <Geth> ¬¶ doc: Merge pull request #3919 from abraxxa/master
[00:18:30] <Geth> ¬¶ doc: 
[00:18:30] <Geth> ¬¶ doc: add Set operator character explanations
[00:18:31] <Geth> ¬¶ doc: review: https://github.com/Raku/doc/commit/2d5418e10d
[00:18:32] <linkable6> Link: https://docs.raku.org/language/operators
[00:32:17] *** Joins: guifa (~guifa@static-host-66-18-47-4.epbinternet.com)
[00:33:28] <guifa> So my google fu failed me and I forgot to note it.  What do we do for testing out the new-disp branch?  Just build it or are there any flags we need to set?
[00:54:28] <guifa> ah here we go
[00:54:29] <guifa> --gen-nqp=new-disp
[00:56:16] <gfldex> perl Configure.pl --force-rebuild --gen-moar=new-disp --gen-nqp=new-disp --make-install
[00:56:22] <gfldex> guifa: ^^^ from the last weekly
[00:56:46] * guifa boos Google for requiring about two dozen different combination of search terms to find it haha
[01:07:04] <moon-child> m: 0x_5
[01:07:04] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´WARNINGS for <tmp>:‚ê§Useless use of constant integer 0x_5 in sink context (line 1)‚ê§¬ª
[01:07:09] <moon-child> m: 0_x5
[01:07:10] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´5===SORRY!5=== Error while compiling <tmp>‚ê§Confused‚ê§at <tmp>:1‚ê§------> 0307‚èè5_x5‚ê§    expecting any of:‚ê§        whitespace‚ê§¬ª
[01:07:14] <moon-child> :/
[01:08:03] *** Joins: ecocode__ (sid500572@id-500572.lymington.irccloud.com)
[01:09:29] *** Joins: ecocode_ (uid500572@id-500572.lymington.irccloud.com)
[01:12:11] *** Quits: ecocode__ (sid500572@id-500572.lymington.irccloud.com) (Client Quit)
[01:36:35] *** Joins: tejr (~tejr@user/tejr)
[01:52:28] <discord-raku-bot> <Rogue#2017> Is there a way to specify that a captured type needs to be a parameterizable role with one parameter?
[01:53:29] <discord-raku-bot> <Rogue#2017> For example in Scala one can say `trait Functor[F[_]]`
[01:54:18] <discord-raku-bot> <Rogue#2017> So the Raku equivalent would look something like `role Functor[::F ??? ]`
[01:55:56] <moon-child> I think you can use 'where'
[01:58:14] *** Joins: jess (~jess@libera/staff/jess)
[01:59:43] <discord-raku-bot> <Rogue#2017> I was thinking the same but I'm not sure how to check those things with the MOP
[02:01:26] <discord-raku-bot> <Rogue#2017> I guess part of it can be done with `where *.HOW ~~ Metamodel::ParametricRoleHOW`
[02:02:18] <moon-child> that will also match roles with multiple parameters though
[02:02:30] <discord-raku-bot> <Rogue#2017> yeah
[02:02:44] <moon-child> you could check whether  *.^parameterize(Any)  errors, but that's ugly
[02:02:59] <moon-child> err, no
[02:03:00] <discord-raku-bot> <Rogue#2017> It would be nice to have syntax for this that doesn't involve touching the metamodel
[02:03:06] <discord-raku-bot> <Rogue#2017> which is technically not part of the lang spec
[02:04:40] <moon-child> you want to look at the contents of metaobjects.  What tool could you wish for other than a metaobject protocol?
[02:05:44] <discord-raku-bot> <Rogue#2017> I mean yeah
[02:07:55] <discord-raku-bot> <Rogue#2017> But I could wish for some nice syntax for this particular case, like what Scala provides :)
[02:11:36] <moon-child> here we go!
[02:11:44] <moon-child> T.^candidates.map(*.^body_block.arity).any == 2
[02:12:37] <discord-raku-bot> <Rogue#2017> Wow, that's next-level
[02:14:00] <discord-raku-bot> <Rogue#2017> Hm, apparently we "Cannot do non-typename cases of type_constraint yet" according to my Rakudo
[02:16:03] <moon-child> hmm.  I was going to say, you should be able to work around that with a subset.  But it doesn't seem to work here
[02:17:46] <moon-child> oh, yes, you can
[02:18:19] <moon-child> subset OneParameter of Mu where *.^candidates.map(*.^body_block.arity).any == 2; role Functor[OneParameter ::T] { ... }
[02:18:24] <moon-child> should work, I think
[02:21:02] <moon-child> oh, you need to check  arity <= 2 <= count
[02:41:48] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[02:42:36] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[03:01:43] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[03:08:11] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[03:15:47] *** Joins: tejr (~tejr@user/tejr)
[03:19:41] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[03:22:20] <Xliff> m: DateTime.new(1).gist.say
[03:22:20] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1970-01-01T00:00:01Z‚ê§¬ª
[03:22:36] <Xliff> How can I get that to read properly in my TZ?
[03:22:58] <Xliff> So 1/1/70 00:00:01 -04:00
[03:23:16] <Xliff> Datetime should have a new-local, I think.
[03:23:50] <[Coke]> https://github.com/raku-community-modules/DateTime-TimeZone
[03:24:13] <gfldex> m: DateTime.new(1, :timezone(-4*3600)).say
[03:24:14] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1969-12-31T20:00:01-04:00‚ê§¬ª
[03:24:21] <Xliff> hehehe
[03:24:28] <[Coke]> perhaps https://github.com/alabamenhu/DateTimeTimezones
[03:24:57] <gfldex> m: DateTime.new(1).in-timezone(-4*3600).say
[03:24:57] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1969-12-31T20:00:01-04:00‚ê§¬ª
[03:25:32] <Xliff> [Coke]: Is that availble via zef?
[03:25:49] <Xliff> gfldex: Trust me, I've tried most of the variants of that and still get a value in 1969.
[03:27:07] <[Coke]> I found it on the modules site, so probably.
[03:27:18] <[Coke]> I didn't try either of them, let me try the latter.
[03:27:59] <[Coke]> .... as soon as MTGA is done launching, jeez.
[03:28:51] <Xliff> "zef install DateTimeTimezones" does not work.
[03:31:05] <[Coke]> ah. "(NYI) The formatter has been changed to indicate the timezone. This makes it incompatible with RFC 3339. The use option 'rfc3339' will restore the original formatter.
[03:31:38] <[Coke]> it's "DateTime::Timezones" - search for it on modules.raku.org, then use the name its listed under there.
[03:32:21] <Xliff> Aaand... "Passed bad arguments to DateTime somehow
[03:32:21] <Xliff>   in method <anon> at /home/cbwood/Projects/rakudobrew/versions/moar-blead/install/share/perl6/site/sources/BF8DC17C7D061DE407BA1FC82207D0F56C81DFEE (DateTime::Timezones) line 127"
[03:32:38] <Xliff> raku -e 'use DateTime::Timezones; my $dt = DateTime.new(DateTime.new(1).offset + 1, timezone => DateTime.now.offset); $dt.gist.say; $dt.is-dst.say'
[03:44:31] <[Coke]> sorry. :(
[03:44:44] <guifa> Ooops
[03:44:48] * guifa will take a look
[03:44:52] <guifa> (it's my module)
[03:45:01] <Xliff> guifa: No worries!
[03:45:34] <Xliff> So... the way I see it is that a .new-local for DateTime would need to set the TZ FIRST, and then assign the value.
[03:46:06] <Xliff> To set the TZ after the value is set will always resolve a value in the past for negative timezones.
[04:01:30] <guifa> Xliff: so you're wanting the timezone to print out with 00:00 if the timezone is GMT?
[04:01:56] <guifa> Z is one of the standard ways to indicate "timezone offset of 0"
[04:10:46] <Xliff> guifa: No. I want a way to create a DateTime value with .new that has the local timezone.
[04:11:00] <Xliff> So DateTime.new(1) == 1/1/70 00:01
[04:11:03] <Xliff> That's GMT
[04:11:11] <Xliff> Try and get that value with TZ = -04:00
[04:11:44] <guifa> Ah okay.
[04:13:31] <guifa> I'd probably use
[04:13:54] <guifa> m: say DateTime.new: 1, :timezone($*TZ)
[04:13:55] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1970-01-01T02:00:01+02:00‚ê§¬ª
[04:14:14] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[04:14:17] <melezhik> .
[04:14:28] <guifa> by definition Raku uses the variable $*TZ, so unless you've overridden it in some way, it's gonna line up with your timezone
[04:15:14] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Client Quit)
[04:33:04] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[04:34:18] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:45:36] <Xliff> guifa: It's not
[04:45:43] <Xliff> I haven't changed $*TZ at all.
[04:46:39] <Xliff> raku -e '$*TZ.say' # -14400
[04:48:26] <guifa> Sorry, I mean, it uses $*TZ for the local timezone value.  Not that it uses $*TZ for creating using .new (it does for .now, though)
[04:50:09] <guifa> dependingo n prefs, this may look cleaner in your code
[04:50:30] <guifa> m: say DateTime.new(1).in-timezone: $*TZ
[04:50:30] <camelia> rakudo-moar b451f89b6: OUTPUT: ¬´1970-01-01T02:00:01+02:00‚ê§¬ª
[04:56:19] <Xliff> raku -e '(my $dt = DateTime.new(1)).in-timezone($*TZ).gist.say' # 1969-12-31T20:00:01-04:00
[05:13:39] *** Joins: frost (~frost@59.71.242.61)
[05:39:51] *** Quits: lichtkind (~lichtkind@p200300d0a7115dafac072a13f09fa777.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:40:10] *** Joins: lichtkind (~lichtkind@p200300d0a7115dafac072a13f09fa777.dip0.t-ipconnect.de)
[06:40:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:40:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:42:00] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[07:14:45] *** Joins: monkey_ (~user@190.104.116.134)
[07:42:42] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:04:25] *** Quits: lichtkind (~lichtkind@p200300d0a7115dafac072a13f09fa777.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:12:40] *** Joins: tejr (~tejr@user/tejr)
[08:53:21] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:59:29] <guifa> Xliff++ for finding that "Passed bad arguments..." error.  I had somehow back in the day assumed someone would only use an Int, but actually any old Numeric is sufficient for creating a DateTime
[09:00:25] <guifa> and HALLELUJAH! new-dispatch FINALLY lets DateTime::Timezones work how I had previously intended it to!
[09:07:01] <guifa> (previously, precomp-smthng-smthng-i-forget-the-exact-details was causing Intl::Format::DateTIme to not be able to include DT:Timezones and the latter could never be used in a file that would be precompiled.  But on the new-dispatch, that's not the case!)
[09:08:35] *** Quits: unixcat64 (hyperreal@envs.net) (Changing host)
[09:08:35] *** Joins: unixcat64 (hyperreal@fedora/hyperreal)
[10:08:35] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:08:35] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:08:35] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:08:35] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:08:35] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[10:08:35] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[10:08:35] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[10:09:41] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[10:10:32] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[10:10:52] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:11:02] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[10:11:19] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[10:16:22] <japhb> CBOR::Simple 0.1.0 released/uploaded -- contains all the low-hanging fruit improvements I found while I read All The Specs looking to see if something like Capture is already supported.  Looks like no, which means I'll need to use a temporary tag number while I create a spec for it
[10:17:58] <japhb> xinming: CBOR work continues, but native support for Capture will require temporary tagging, plus a spec to get a permanent tag number
[10:21:09] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[10:32:45] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[10:34:24] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[10:45:25] *** Quits: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Read error: Connection reset by peer)
[10:45:42] *** Joins: Xliff (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[10:47:22] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[11:05:18] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:15:39] *** Joins: keutoi (~keutoi@157.47.108.34)
[11:20:58] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[11:26:50] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:45:09] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[11:49:41] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 265 seconds)
[11:50:51] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[12:08:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[12:11:25] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[13:06:01] <Kaiepi> releasable6, status
[13:06:02] <releasable6> Kaiepi, Next release in ‚âà8 days and ‚âà10 hours. There are no known blockers. Changelog for this release was not started yet
[13:06:03] <releasable6> Kaiepi, Details: https://gist.github.com/a1c6e571ece3996d212e691242e50c8f
[13:08:39] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Quit: Leaving)
[13:14:19] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[13:14:36] *** Joins: tejr (~tejr@user/tejr)
[13:21:10] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Read error: Connection reset by peer)
[13:34:16] *** Quits: keutoi (~keutoi@157.47.108.34) (Ping timeout: 252 seconds)
[13:49:31] *** Joins: keutoi (~keutoi@157.47.108.34)
[14:04:32] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Killed (copper.libera.chat (Nickname regained by services)))
[14:04:55] *** Joins: Guest1521 (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[14:09:51] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[14:31:38] *** Joins: tejr_ (~tejr@user/tejr)
[14:32:05] *** Quits: tejr (~tejr@user/tejr) (Killed (NickServ (GHOST command used by tejr_)))
[14:32:10] *** tejr_ is now known as tejr
[14:36:53] <xinming> japhb++
[14:37:04] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[14:37:31] <xinming> japhb: Thanks, I'll try it later, I haven't do heavy raku coding for a half year, will try later months. ;-)
[14:39:09] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Remote host closed the connection)
[14:41:03] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[14:47:17] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Remote host closed the connection)
[14:47:44] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[14:51:58] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 252 seconds)
[14:53:07] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[14:53:40] *** Joins: lichtkind (~lichtkind@p200300d0a7115d67ac072a13f09fa777.dip0.t-ipconnect.de)
[15:00:55] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:02:24] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[15:09:07] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:12:00] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[15:12:15] *** Joins: tejr (~tejr@user/tejr)
[15:53:54] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[15:55:44] *** Joins: tejr (~tejr@user/tejr)
[15:59:25] *** Joins: hankache (~hankache@user/hankache)
[16:06:13] *** Quits: hankache (~hankache@user/hankache) (Quit: Quit)
[16:13:26] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[16:30:41] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[16:32:34] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[16:34:22] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[16:36:40] <Geth> ¬¶ ecosystem: 7caab893c5 | (Elizabeth Mattijsen)++ | META.list
[16:36:40] <Geth> ¬¶ ecosystem: Remove IRC::Client from the old ecosystem
[16:36:40] <Geth> ¬¶ ecosystem: 
[16:36:40] <Geth> ¬¶ ecosystem: It now lives in the "zef" ecosystem, maintained by yours truly
[16:36:40] <Geth> ¬¶ ecosystem: review: https://github.com/Raku/ecosystem/commit/7caab893c5
[17:14:58] *** Quits: frost (~frost@59.71.242.61) (Quit: Connection closed)
[17:17:29] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[18:20:31] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:3593:e920:b3b6:f6a4)
[18:28:40] *** Quits: Guest1521 (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Read error: Connection reset by peer)
[18:54:33] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:03:04] *** Joins: black_knight (~black_kni@proxy-out.curie.fr)
[19:56:59] <Geth> ¬¶ CCR/main: c7741ccc35 | (Elizabeth Mattijsen)++ | 3 files
[19:56:59] <Geth> ¬¶ CCR/main: Robert Lemmen's blog post is in markdown, not html!
[19:56:59] <Geth> ¬¶ CCR/main: review: https://github.com/Raku/CCR/commit/c7741ccc35
[19:57:54] <Geth> ¬¶ CCR/main: db733a391c | (Elizabeth Mattijsen)++ | Remaster/Robert Lemmen/The Surprising Sanity of Using a Cache but Not Updating It.md
[19:57:54] <Geth> ¬¶ CCR/main: Fix reference to image
[19:57:54] <Geth> ¬¶ CCR/main: review: https://github.com/Raku/CCR/commit/db733a391c
[20:03:31] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[20:03:31] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:03:47] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[21:04:30] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[21:27:27] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:31:17] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[21:32:45] *** Quits: black_knight (~black_kni@proxy-out.curie.fr) (Ping timeout: 256 seconds)
[21:36:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[21:50:57] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 276 seconds)
[22:10:46] *** Quits: keutoi (~keutoi@157.47.108.34) (Ping timeout: 265 seconds)
[22:11:02] *** Joins: keutoi (~keutoi@157.47.108.34)
[22:19:06] *** Quits: leont (sid489095@id-489095.highgate.irccloud.com) (Read error: Connection reset by peer)
[22:19:35] *** Quits: rjbs (sid498898@id-498898.highgate.irccloud.com) (Read error: Connection reset by peer)
[22:20:55] *** Joins: leont (sid489095@highgate.irccloud.com)
[22:21:14] *** Joins: rjbs (sid498898@highgate.irccloud.com)
[22:24:11] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[22:32:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[22:32:42] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:34:15] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:35:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[22:40:22] *** Joins: ImmediateDecisio (~Immediate@94.235.199.20)
[22:46:20] *** Joins: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[22:49:41] *** Joins: melezhik36 (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net)
[22:49:49] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Client Quit)
[22:49:59] *** melezhik36 is now known as melezhik
[22:51:24] <melezhik> Hi! I am thinking about building a new service built on top of cro, one thing might stop me from using cro, is oath support, does cro have the one?
[22:51:52] <melezhik> I need oath authentication for GH users specifically ...
[22:52:36] <Xliff> melezhik - Couldn't you use another module to implement OAuth inside Cro?
[22:53:34] <melezhik> yeah, it's doable, I just think maybe there is exiting solution ... but probably will consider implementing myself
[22:53:46] <Xliff> Not finding a generic OAuth module in the ecosystem, however.
[22:54:37] <Xliff> There's plenty available for Perl. You might want to consider Inline::Perl5
[22:54:56] <melezhik> Xliff++
[23:00:10] *** Quits: melezhik (~melezhik@c-73-32-143-85.hsd1.tx.comcast.net) (Quit: Ping timeout (120 seconds))
[23:22:03] *** Joins: mike73 (~mike@c-73-203-220-40.hsd1.tn.comcast.net)
[23:22:31] *** Quits: mike73 (~mike@c-73-203-220-40.hsd1.tn.comcast.net) (Client Quit)
[23:23:19] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[23:45:25] *** Quits: xinming (~xinming@115.219.34.175) (Ping timeout: 260 seconds)
[23:58:07] *** Quits: keutoi (~keutoi@157.47.108.34) (Quit: leaving)
