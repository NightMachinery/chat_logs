[00:14:17] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[00:27:41] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[00:31:00] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[00:40:24] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[00:43:44] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[00:58:21] *** Quits: Brucio-61 (~Brucio-35@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 252 seconds)
[00:58:30] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 260 seconds)
[01:06:47] *** Inline is now known as UpTheButt
[01:07:13] *** UpTheButt is now known as Inline
[01:07:44] <hayley> https://youtu.be/ETJAuyspYFw?t=5250 "You cannot have composable libraries if you cannot have garbage collection!" wtf based
[01:07:45] -ixelp- Coffee Compiler Club, 2022_03_18 - YouTube
[01:29:56] <hayley> "you don't have to tune GC when you have no GC" Do people just selectively not see the horror storries of tuning malloc? I'm not making that up, different allocators do work differently for different applications.
[01:42:33] *** Joins: Brucio-61 (~Brucio-21@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:44:04] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:50:01] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[01:51:06] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[01:52:58] *** Joins: Catie (~user@user/catie)
[01:53:02] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[01:56:38] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[02:04:05] <aeth> hayley: forget GC, forget malloc()... use Ada
[02:05:07] <kakuhen> <hayley> ""you don't have to tune GC..." <- malloc good because glibc malloc seems fast :)
[02:05:24] <kakuhen> what? there's other libc implementations? you must be tripping
[02:05:32] <hayley> Except cause there's also...mimalloc, jemalloc, tcmalloc...
[02:05:52] <hayley> And I believe the story was that using jemalloc for Mastodon (on MRI Ruby) would save a fair amount of memory, compared to glibc.
[02:06:01] <moon-child> yeah glibc malloc is considered not that great by modern standards
[02:06:25] <kakuhen> i swore glibc evangelists claimed it was superior to at least the bsd and musl implementation s
[02:06:36] <moon-child> musl malloc is not great
[02:07:02] <kakuhen> "good mallocs are bloat" - musl guy, maybe
[02:07:13] <moon-child> I don't think there's 'a' bsd malloc.  Freebsd uses jemalloc which is, as mentioned the tits (or, at least, tits).  Openbsd uses something super-hardened
[02:07:43] <Catie> OpenBSD has its own malloc, looks like
[02:07:50] <moon-child> yes
[02:14:12] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 240 seconds)
[02:21:42] <hayley> https://www.youtube.com/watch?v=b-yBt2BC5ZY ü§î
[02:21:43] -ixelp- ÂàùÈü≥„Éü„ÇØ„Å´King Crimson „ÄåDiscipline„Äç„ÇíÊ≠å„Çè„Åõ„Å¶„Åø„Åü - YouTube
[02:23:28] <semz> moon-child: is the remark on musl about the old malloc or the new openbsd-like mallocng?
[02:24:10] <moon-child> I haven't looked at the new thing closely
[02:29:25] <kakuhen> i hate gradescope and online submissions in general
[02:29:33] <kakuhen> i was wondering why i was scoring so lowly on my geometry homeworks
[02:29:59] <kakuhen> well, you have vague descriptions like "problem 1, 2, 3" across an assignment with 15 exercises or so
[02:30:08] <kakuhen> I just spread problem 1, 2, and 3 equally across my pages 
[02:30:13] <kakuhen> well, the TA didn't see half the exercises I did in homeworks as a result
[02:30:17] <kakuhen> and that's why I kept consistently scoring low...
[02:30:32] <kakuhen> he was just not smart enough to, idk? check my entire fucking submission?
[02:30:37] <kakuhen> and blindly marked entire problems as not submitted
[02:30:57] <kakuhen> undergrad math classes are the worst, especially compared to grad math classes
[02:31:03] <kakuhen> i'm genuinely upset at this
[02:31:43] <kakuhen> i've graded for classes before (albeit not during a time where everything was forced online), so I understand the TA is likely just moving quickly and not trying to spend too much time on a single student, but still.
[02:32:23] <hayley> "Not sure [malicious build scripts] are worse than having malicious code in the binary?" idk, why are you giving code all your capabilities? C mindset imo
[02:33:26] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:42:57] <semz> reminds me of that one time I was correcting math submissions and it turned out that the webshit we used to correct would silently hide PDF annotations from display
[02:43:30] <semz> which was a bit of a problem because a somewhat popular handwriting program emitted annotations
[02:43:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:44:16] <kakuhen> and this is why I highly prefer physical submissions
[02:44:44] <kakuhen> normally when a printed paper lacks some information you want, it's because the writer did not include such information
[02:45:03] <hayley> https://twitter.com/giltene/status/1504959193165357062 if (fsync() == 0) printf(‚ÄúYou keep using that word. I do not think it means what you think it means./n‚Äù);
[02:48:24] <moon-child> lol
[02:48:45] <moon-child> https://danluu.com/deconstruct-files/  vibes
[02:48:46] -ixelp- Files are fraught with peril
[02:54:21] <sham1> hayley: the fact that the slash in the tweet is the wrong way around bothers me quite a bit. Aaaa
[03:18:21] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[03:22:40] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[03:23:30] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[03:25:29] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[03:31:42] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[03:42:55] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[03:45:23] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (Read error: Connection reset by peer)
[03:45:51] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[03:47:04] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 250 seconds)
[03:51:18] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[03:53:23] *** Joins: buoy49 (sid386684@id-386684.uxbridge.irccloud.com)
[04:01:29] <gilberth> Hmm, is %00 allowed in URLs?
[04:02:32] <moon-child> dunno.  But I bet some c code chokes on it
[04:02:53] <gilberth> This is why I ask. :-)
[04:03:59] <gilberth> moon-child: btw, thanks for the ASCII rendering firefox pointer. I have not yet looked into it, but wonder, if I could use it to turn HTML into plain text.
[04:06:08] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[04:06:27] <hayley> gilberth: See if you can crash a server with it.
[04:08:47] <gilberth> RFC 3986 doesn't say %00 would be forbidden. In fact it says: "Note, however, that the "%00" percent-encoding (NUL) may require special handling and should be rejected if the application is not expecting to receive raw data within a component."
[04:09:14] <gilberth> hayley: Yes, I am so proud of you that you found that NUL bug. Are you under stress?
[04:09:17] <hayley> I don't think anyone said I couldn't send a NUL to that server, but see how well that turned out.
[04:09:43] <hayley> gilberth: A bit, yes. We didn't really cover use-case diagrams in class, yet I have to make one for an assignment.
[04:11:09] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[04:14:01] <hayley> Seems people interpreted my "Yes, there are no tradeoffs whatsoever when using explicit memory allocators." statement to refer to cognitive overhead. A big deal, yes, but I was trying to reference the perils of designing an allocator, which is non-trivial.
[04:14:41] <kakuhen> i hate mac os i hate mac os 
[04:15:05] <kakuhen> 2022-03-19 09:42:27.055 dx86cl64[24071:2354395] GLUT Fatal Error: internal error: NSInternalInconsistencyException, reason: NSWindow drag regions should only be invalidated on the Main Thread!
[04:15:54] <kakuhen> this is all because apple devs decided "haha let's port UIKit over to OS X, and since it's not thread-safe, just invalidate 20 years worth of programs that updated UI in background threads"
[04:16:01] <hayley> Whoops.
[04:16:57] <hayley> https://www.reddit.com/r/Amd/comments/thcxnz/if_this_comes_true_i_want_an_award/ Zen Fibonacci sequence
[04:16:59] -ixelp- If this comes true I want an award. : Amd
[04:17:12] * moon-child wonders what _glut_, of all things, is doing talking to a ui kit
[04:18:53] <kakuhen> probably because to set up the window you need to call into Cocoa
[04:19:02] <kakuhen> then you make the only view of the window contain some OpenGL thingy
[04:19:29] <kakuhen> problem: apple decided to backport shitty iOS code into modern versions of mac os, and decided rather than fixing their shitty code, just break compatibility with old programs and introduce stupid rules
[04:19:50] <kakuhen> rather than "make UI calls all on the same thread," they decide "actually, we want only the main thread and we'll crash your program at run-time if you don't obey this"
[04:21:20] <kakuhen> I am 100% sure this change is due to UIKit backporting  because uh, AppKit never had this problem (in fact, plenty of old Mac software would NOT use the main thread for modifying the UI)
[04:22:13] <kakuhen> and in particular with UIKit, everything is handled by a specific subclass of UIResponder (UIApplication), which is instantiated on the main thread
[04:22:23] <kakuhen> the result: all UI has to be on the main thread since UIKit is not thread-safe
[04:25:25] <gilberth> Well, as getting internal versus external representation is so hard, once upon a time putting %2E%2E into URLs was a sport to look around outside of the WWW server's document root. This is why I don't like when (make-pathname :directory '(:relative "..")) does not throw an error, which usually isn't the case. In CL there is :UP and :BACK and you can't really name a directory "..". That there is a ".." directory entry is a hack.
[04:27:08] <gilberth> kakuhen: Indeed. Cocoa gets more and more nervous about multithreading. However it makes perfect sense, that only one thread does graphics to the backbuffer, anything else is insane. But I still ought to be able to talk to gadgets^WNSViews. Or do graphics to an off-screen bitmap.
[04:28:34] <gilberth> If this continues, I could for my CLIM as well implement a display server. I mean, what is the difference between queuing closures to the main thread to sending requests over some pipe?
[04:30:28] <kakuhen> trivial-main-thread is not helping x.x
[04:30:56] <kakuhen> maybe I should upgrade from my 2019 macbook pro to a 2014 macbook pro
[04:33:02] <gilberth> Perhaps. But with CCL there is ccl::call-in-event-process.
[04:33:52] <gilberth> Which of course is silly. Can't they just spend a few mutexes?
[04:34:56] <gilberth> I guess, I'll run into similar issues with GTK. Lucikly I do graphics only from within whatever a repaint handler is.
[04:35:44] <gilberth> But I expect that you can craft new gadgets from anywhere. I fear that this is not a save bet.
[04:37:09] * kakuhen uploaded an image: (187KiB) < https://libera.ems.host/_matrix/media/r0/download/kotoura.moe/jmvpzhVzndLaGHwXByOtPsln/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202022-03-18%2018.06.49.png >
[04:37:12] * hayley wonders if it's possible to nuke the obnoxious ad in the new Feed the Beat launcher. It's someone's shitty Minecraft animation for their server hosting company.
[04:37:14] <kakuhen> i wonder why mac os does this behavior...
[04:37:26] <kakuhen> resizing the window triggers cocoa to properly display
[04:37:35] <hayley> It does not look good, like most Minecraft animations, and it plays constantly.
[04:37:35] <kakuhen> but otherwise it makes things tiny and places into corner
[04:38:00] <hayley> There's an .asar file, which I guess is the Electron resources file?
[04:38:45] <hayley> Could unpack, replace the video with a video with just one solid colour, repack, and see if the launcher notices.
[04:38:56] <gilberth> kakuhen: Does this animation run from another thread or does it go through the GLUT loop proper?
[04:39:07] <kakuhen> goes through the glut loop
[04:39:33] <gilberth> Oops. And it still is broken? Nasty.
[04:41:19] <kakuhen> anyway, for best results with emacs+sly, it seems that I want the main-thread to block while the program is running
[04:41:33] <kakuhen> i can choose to not block, but then i run into a strange bug where cocoa refuses to let me close the window or destroy it
[04:41:53] <gilberth> kakuhen: Have you a size change callback, which remembers the width and height? Do you call glViewport with the correct size then?
[04:42:36] <gilberth> glutReshapeFunc IIRC
[04:42:51] <kakuhen> im not sure, since this is not my own example, but this seems to answer to your question
[04:42:55] <kakuhen> https://github.com/3b/cl-opengl/blob/master/examples/misc/glut-teapot.lisp#L34-L40
[04:42:56] -ixelp- cl-opengl/glut-teapot.lisp at master ¬∑ 3b/cl-opengl ¬∑ GitHub
[04:44:06] <moon-child> gilberth: regarding .., https://fuchsia.dev/fuchsia-src/concepts/filesystems/dotdot
[04:44:07] -ixelp- Dot Dot Considered Harmful | Fuchsia
[04:44:20] <gilberth> kakuhen: Try the following. First make sure that the reshape callback is called. And (2) remember the size and setup glViewport in the repaint handler always according¬† to the last known good size.
[04:45:51] <gilberth> And of course also the projection matrix. That is all that reshape does.
[05:10:12] *** Joins: razetime (~quassel@117.254.35.162)
[05:18:12] *** Quits: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net) (Remote host closed the connection)
[05:34:22] <kakuhen> damn, cl-png is not in quicklisp
[05:35:27] <kakuhen> oh, they call it just "png" nvm
[05:41:07] <hayley> What, are you expecting the Rust png library or something?
[05:44:23] <kakuhen> i found cl-png and it seemed useful for testing my idea for loading texture onto opengl window
[05:44:37] <kakuhen> before i begin work on my jpeg decoder i want at least to make sure i can properly output things to a window
[05:44:39] * hayley is reminded about that email to Mr DeVault
[05:45:08] <hayley> Any better ideas for a totally legit paper name than "Rule 34 of beta inflation"?
[05:45:34] <kakuhen> cl-png is able to decode entire png into a 3d matrix, which is good, and now i just need to learn enough OpenGL to make the entire window display a texture
[05:45:45] <kakuhen> presumably I want a rectangle at vertices (\pm 1, \pm 1)
[05:45:52] <kakuhen> then i see how glTextures actaully work
[06:02:05] <kakuhen> oh god, time to find out if :polygon and :polygon-mode are any different
[06:02:34] <kakuhen> a quick look at the auto-generated bindings tells me i should be using the latter
[06:04:19] *** Quits: razetime (~quassel@117.254.35.162) (Ping timeout: 256 seconds)
[06:05:18] <kakuhen> hmm... glVertex2D is a private function... or at least the % strongly suggests I should not use it myself
[06:05:45] <kakuhen> thankfully #'gl:rect is a thing, so I can avoid having to risk breaking things by using #'gl:%vertex2d
[06:07:57] *** Joins: Inline__ (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de)
[06:10:30] *** Quits: Inline (~Inline@p200300cd470af600c32f3b3744c2844b.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:11:40] *** Joins: drakonis1 (~drakonis@user/drakonis)
[06:12:56] *** Quits: drakonis1 (~drakonis@user/drakonis) (Client Quit)
[06:20:08] *** Joins: razetime (~quassel@117.254.35.162)
[06:24:12] <drakonis> https://gitlab.com/sasanidas/cedar
[06:24:13] -ixelp- Fermin / CEDAR ¬∑ GitLab
[06:24:14] <drakonis> neat.
[06:37:25] <hayley> https://www.youtube.com/watch?v=Z0Rh4OfWr7o
[06:37:26] -ixelp- Uncle Roger Work at Restaurant for a Day - YouTube
[06:38:51] <hayley> Hm, I can inline function calls while translating a few things if I maintain a virtual call stack, like a virtual data stack.
[06:51:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[06:51:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:52:25] <hayley> https://github.com/sbcl/sbcl/commit/d842db6cb6dca842de56f9a7ca4ae046622c884d RIP LRAs
[06:52:26] -ixelp- riscv: LRAs were harmed in the making of this change. ¬∑ sbcl/sbcl@d842db6 ¬∑ GitHub
[06:59:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[07:15:01] *** Joins: vats (~vats@103.216.143.232)
[07:20:30] <hayley> "lra is like the worst thing since unsliced bread"
[07:24:41] <kakuhen> ok so it seems opengl just broke on mac os when they decided to force their shitty metal api on everyone
[07:25:00] <kakuhen> i.e. in os x 10.14, they subtly changed how NSOpenGLView worked
[07:25:30] <kakuhen> and apparently this 1/4th resolution bug needs you to either manually update the glContext of the view (not possible from lisp lol)
[07:25:47] <kakuhen> or don't use a high dpi monitor (not possible on macbook or imac lol)
[07:25:47] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[07:26:08] <kakuhen> or set NSHighResolutionCapable in Info.plist (not possible within a lisp image lol)
[07:26:34] <kakuhen> if NSHighResolutionCapable is not set, then mac os will not give the canvas the proper coordinates for screen width/height, and I think that's what is causing the scaling issues on my end
[07:26:39] *** Quits: razetime (~quassel@117.254.35.162) (Ping timeout: 252 seconds)
[07:28:20] <kakuhen> going to test my same rectangle code on windows right now, and I will not be surprised if it works just fine on there
[07:34:25] *** Joins: aeth_ (~aeth@user/aeth)
[07:34:25] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[07:34:30] *** aeth_ is now known as aeth
[07:36:49] *** Joins: semz_ (~semz@user/semz)
[07:39:20] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:39:47] *** semz_ is now known as semz
[07:47:06] <kakuhen> Ok, this is indeed a high DPI display issue. I haven't tested Windows yet, but I created my own app bundle with NSHighResolutionCapable set to false. Turns out setting it to true is what causes the scaling problems.
[08:08:11] *** Joins: razetime (~quassel@117.254.35.162)
[08:22:55] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 256 seconds)
[08:44:22] <hayley> The Xtensa instruction set has LDB in one instruction (EXTUI).
[08:48:27] <moon-child> PEXT!
[08:49:25] <hayley> It also has fixed-width 24-bit instructions.
[08:49:32] <moon-child> why 24?
[08:50:32] <hayley> I don't know.
[08:50:36] <hayley> https://0x04.net/~mwk/doc/xtensa.pdf
[08:56:42] <pl> > The Xtensa instruction set is a 32-bit architecture with a compact 16- and 24-bit instruction set. 
[08:57:03] <pl> 24bit would be somewhat popular for DSPs, IIRC 
[08:58:39] <pl> (see motorola DSP56000) 
[08:58:51] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Quit: WeeChat 3.4)
[08:59:51] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[09:30:30] <gilberth> Perhaps, just because 24 is less than 32 and 16 is a bit tight.
[09:33:14] <gilberth> E.g. see the 16-bit Thumb instruction set. While otherwise nice, it suffers from only being able to address eight of the sixteen registers. And with PC, LR, and SP, this leaves you with five general purpose registers. And you don't have a frame pointer yet. OTOH I don't like frame pointers anyway.
[09:33:25] <hayley> https://www.youtube.com/watch?v=9ly11uQC6oQ
[09:33:26] -ixelp- Riddle Me This, Batman - YouTube
[09:33:35] <hayley> gcc -vomit-frame-pointer or smth
[09:34:08] <gilberth> Yep, I use that by default. With the correct spelling of course.
[10:13:29] <hayley> https://www.youtube.com/watch?v=ESJINXeBjhc
[10:13:30] -ixelp- Jones' Cheap Ass Prepaid Legal and Daycare Academy - YouTube
[10:43:38] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[10:56:09] *** Quits: razetime (~quassel@117.254.35.162) (Ping timeout: 256 seconds)
[11:02:15] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[11:04:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:06:27] <gilberth> moon-child: The article the posted about ".." completely misses the difference of what CL calls :BACK and :UP directory components. Accessing "foo/../bar" may not be the same as "foo/bar". And I don't believe that either :UP or :BACK are bad per se. What I said was that having actual directory entries for "." and ".." is a hack.
[11:10:44] *** Joins: razetime (~quassel@117.254.35.35)
[11:18:37] *** Quits: razetime (~quassel@117.254.35.35) (Ping timeout: 240 seconds)
[11:27:58] * hayley reads https://www.cl.cam.ac.uk/~tmj32/papers/docs/ainsworth20-ismm.pdf and wonders how hard it would be to automatically prefetch the list, when code looks like an inductive loop on the list.
[11:28:56] <hayley> We already have an "estimated distance to use" for lexical variables in register allocation. I wonder how good an estimated distance to use for slots would be, for prefetching at the right time.
[11:37:14] <hayley> OTOH that involves doing a prefetch like 6 cons cells ahead of time, which is a lot of loads and tests.
[11:37:55] *** Joins: razetime (~quassel@117.254.35.215)
[11:44:10] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[11:50:09] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[11:52:53] *** Joins: Oddity (~Oddity@user/oddity)
[12:00:27] *** Quits: vats (~vats@103.216.143.232) (Remote host closed the connection)
[12:01:39] <ck_> I'm looking at a product description for a bungee that says "can be stretched to 100% of its original length" and am now confused
[12:02:38] <hayley> What if they deliver it to you pre-stretched?
[12:03:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[12:04:05] <edgar-rft> tell them you can't find the length on google maps where the bungee origins from
[12:05:04] <edgar-rft> fight confusion with even worse confusion :-)
[12:13:38] <ck_> I'm about to accelerate this immovable object to 100% of its original speed, brb
[12:24:01] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[12:46:41] <hayley> gilberth: FWIW, w.r.t (fib #x20) I find the obligatory (declare (optimize speed) (fixnum x)) reduces the time to 9ms or so, which is 2x GCC, while still producing a bignum result if necessary.
[12:51:22] * hayley pens greedy prefetching for another SWCL project
[13:08:07] <gilberth> hayley: Have you tried with a non-fixnum argument to FIB? And, oh yes, I see they have not yet really fixed fixed fixnum arithmetic yet when that declaration makes a such a difference.
[13:10:35] <kakuhen> how slow is it to compute (expt -1 some-bit)
[13:10:44] <kakuhen> i decided to be clever and preventing having to write an IF in my code just now by doing that lol
[13:19:55] <moon-child> seems to generate not-terrible code under sbcl, given a declared type for some-bit
[13:22:08] *** Quits: Inline__ (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[13:23:05] *** Joins: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de)
[13:23:55] <kakuhen> yeah i decided to test it
[13:24:11] <kakuhen> http://pastie.org/p/3qVONuhrXM3AjFqJrhVyY0
[13:24:12] -ixelp- Pastie
[13:24:13] <kakuhen> this is results i get
[13:24:52] <kakuhen> first function is expt with type hints, second is a conditional running plusp with type hints
[13:25:00] <hayley> gilberth: Ahem, I'm supposed to wait for a non fixnum argument to finish a FIB call?
[13:25:29] <kakuhen> moon-child: I'll note ccl is much more "dumb" and fails to give code as small as sbcl's
[13:25:38] <kakuhen> it will prepare a function call for expt in the disassembly
[13:25:45] <moon-child> that's what you get for using ccl :)
[13:25:46] <hayley> I need to figure if prefetching could help with SBCL. Maybe I modify DOLIST to call a PREFETCH function (which gets inlined) first.
[13:28:50] <hayley> But: The SBCL GC is clever about rearranging lists already, and the most annoying data structures to prefetch are going to be trees or something.
[13:29:53] <kakuhen> moon-child: i originally chose ccl over sbcl due to the cocoa bridge
[13:30:08] <kakuhen> i remember spending an entire week reading ppl's arguments for why to choose one over the other
[13:30:32] <kakuhen> well, i learned the hard way that the cocoa bridge has been largely unmaintained and it isn't all that great
[13:30:53] <kakuhen> and now i just stick with ccl because it's fast enough for what i do, though it very easily loses against basically any other lisp implementation for number games
[13:31:08] <kakuhen> oh and fast start up times i guess -- sly starts up instantly but with sbcl it takes like 3 seconds
[13:31:19] <kakuhen> and the repl also takes longer to respond under sbcl, idk why since in the terminal it doesn't
[13:31:36] <kakuhen> but once you actually have sbcl loaded it definitely beats ccl on any measure of performance you can think of
[13:31:44] <kakuhen> except maybe compile times
[13:32:42] <aeth> huh
[13:32:49] <aeth> what's different about sly that it compiles every time or whatever?
[13:33:07] <aeth> slime takes a while on sbcl, but only after an update, and then it's cached
[13:33:17] <kakuhen> i'm not sure -- for some reason the repl takes just a little more to respond when i use sbcl
[13:33:23] <kakuhen> it's not a lot but it is noticeable increase in latency
[13:33:47] <kakuhen> in the end it's probably worth it, i recall comparing my DCT implementation on sbcl vs ccl
[13:33:52] <kakuhen> in short: sbcl ran nearly 3x as fast
[13:34:18] <kakuhen> granted, i was cheating by not using any fancy implementations, just the definition you can find in a math book
[13:34:41] <kakuhen> and letting both implementations run 10,000,000 or so iterations on a vector of 8 floats
[13:35:40] <hayley> Implementations won't change your algorithm, so it's fair game to me.
[13:36:16] <kakuhen> yeah, i guess it is fair, sbcl  definitely has a better(?) way of handling floats and doubles than ccl does
[13:36:26] <aeth> hayley: in theory, though, implementations could have different big-O characteristics
[13:39:14] <hayley> In theory, maybe, in practice, not really.
[13:41:19] <moon-child> would be cool if asymptotic time complexity were guaranteed
[13:41:27] <moon-child> space is harder, but
[13:41:50] <aeth> hayley: I just always keep this in mind although obviously no CL implementation behaves like this. https://accidentallyquadratic.tumblr.com/post/142387131042/nodejs-left-pad
[13:41:51] -ixelp- Accidentally Quadratic ‚Äî node.js left-pad
[13:42:27] <aeth> (I wonder if that site moved with the decline of Tumbler... no posts since 2019)
[13:42:44] <aeth> *Tumblr
[13:42:58] <kakuhen> i swore the gta story was posted on that blog
[13:45:01] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:45:26] <hayley> IIRC it wasn't.
[13:48:21] <moon-child> I don't think so either
[13:51:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:57:44] * hayley left wondering when to prefetch still. DOLIST is an okay example, but it's also possible that OoO can allow the processor to keep working before it actually needs the CDR for the next iteration.
[14:01:58] * dave0 busts out the brownies
[14:02:12] <dave0> there's enough for everyone
[14:02:19] * dave0 freshens everyone's coffee
[14:03:20] * dave0 gets crumbs on the keyboard
[14:04:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:05:03] * hayley decides to continue re-reading the paper until these answers are obvious.
[14:05:26] <kakuhen> im reading the tiff specification and i feel sorry for whoever had to implement this
[14:05:33] <kakuhen> about 60% of the spec is dedicated to extensions
[14:06:53] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 256 seconds)
[14:08:24] <gilberth> kakuhen: I recently noticed that SBCL has a semaphore implementation with Darwin which is not using an actual semaphore, but a busy loop with exponential back-off. Which is outright stupid. That introduces quite some latency for me. And the longer you sit there pondering what's next, the larger the latency.
[14:09:04] <kakuhen> is this related to the fact darwin lies to programmers about the unnamed semaphores it returns
[14:09:05] <gilberth> So I wonder what is it that everybody believes that latency is not important.
[14:09:46] <gilberth> kakuhen: Not directly. Even if Darwin is not in this lying-mode, it's just bad.
[14:10:20] <gilberth> Darwin will give you 10s latency. Not the extra dozen ms, that I have seen with SBCL.
[14:11:27] <gilberth> CCL can react on a signaled semaphore within 10us, while SBCL easily raises it's deliberate timeout to dozens of ms.
[14:11:46] <gilberth> Or rather polling interval. Not a timeout actually.
[14:13:35] <hayley> decentralise2 uses an exponential backoff with a limit (like 100us) where just spinning at the limit doesn't really hurt throughput.
[14:13:37] <gilberth> On Linux you don't see that with SBCL because there are futexes used, which like the Mach semaphores that CCL uses are blazing fast.
[14:15:31] <gilberth> hayley: Still. Why introduce latency? It's perhaps fine for a waiting on a lock you expect to be grabbed only very briefly. SBCL is caught by this waiting for something appearing in some queue. And that queue could be the SLIME REPL stream.
[14:16:07] <gilberth> Or in my case, the event queue and repaint queue. I have seen latency from key-stroke to buffer flip of 20ms with SBCL, while with CCL I am sub 1ms.
[14:16:39] <hayley> The lock implementation doesn't know that. Though, granted, it could take an average of lock held time.
[14:16:41] <gilberth> And with 20ms, I don't even make it to the next retrace.
[14:17:01] <gilberth> hayley: What do you use a condition variable for, again?
[14:17:02] <hayley> 20ms is below reaction time, I believe.
[14:17:33] <gilberth> hayley: 20ms i very noticable. Heck, my key repeat rate is 32ms. My frame rate is 16ms.
[14:17:34] <hayley> Internally in a queue of objects to schedule retrieval of.
[14:19:08] <gilberth> It's just outright silly, stupid, or lazy. Or a combination there of.
[14:20:10] <hayley> I will note that fiddling with the base for exponential backoff also helps improve latency. IIRC I used 1.5 rather than the "normal" looking 2 for that.
[14:20:33] <gilberth> .oO(Oh, we are too lazy to use OS primitives here. Oops, we poll. Perhaps that burns cycles. No, we don't believe in 1/HZ, let's do exponential back-off, right.)
[14:21:08] <gilberth> hayley: You just don't use back-off here. Period.
[14:21:30] <gilberth> It's not a contention situation, it's a blocking wait. Dammit.
[14:21:32] <dave0> it's a spin lock in userland?
[14:21:44] <gilberth> You back-off with contention.
[14:22:00] <gilberth> dave0: Nope, it's a condition variable or semaphore.
[14:22:40] <gilberth> I don't remember which is implement in terms of which. They are both kinda queues.
[14:23:03] <dave0> semaphores are my favorite :-)
[14:23:57] <gilberth> Yep, they are very easy. But conditions variables are very fine too as you need a lock anyway in most of the cases.
[14:24:53] <gilberth> Speaking of which the implementation for IIRC CCL of condition variables in BT aren't condition variables. You need to atomically release the lock and enter the blocking wait. The atomic part is the trick.
[14:25:33] <gilberth> Doesn't bother me. I use semaphores.
[14:29:46] * gilberth calms down.
[14:33:26] *** Joins: aeth_ (~aeth@user/aeth)
[14:33:26] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[14:33:31] *** aeth_ is now known as aeth
[14:43:13] <hayley> Well, some issues with prefetching. I don't know if SBCL IR has it all to do the analysis I want, to find loops like DOLIST which might go through some temporary variables. Now I miss the global value numbering in SICL really. Recursion is hard, because I do not know if a function called will bother loading anything. The paper I read guessed based on type information that I don't get.
[14:43:24] *** Quits: razetime (~quassel@117.254.35.215) (Ping timeout: 240 seconds)
[14:45:41] <hayley> Though self-recursion could be easy to analyse in theory.
[14:45:42] *** Joins: razetime (~quassel@117.254.35.215)
[14:46:01] * hayley wants more runtime feedback again.
[14:46:23] <dave0> i laughed at some kids in a car today and they waved at me lol
[14:47:01] <dave0> 5 teenagers packed into a car with P-plates haha
[14:59:42] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:09:54] <hayley> Seems I only come up with no end of weird optimisation hacks that I have nowhere to test them on.
[15:15:16] <dave0> hayley: do you know this song? https://youtu.be/k7in-9E3ImQ
[15:15:17] -ixelp- Dave Matthews Band - Crash Into Me - YouTube
[15:15:34] <hayley> Name doesn't ring a bell. And my family is mostly asleep now.
[15:16:32] <dave0> i know the song but i've never seen the video
[15:16:51] * hayley uploaded an image: (383KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VJVOyVuKZSyZmRDkJagBZlLB/fmubnzzvcaa9bzu.png >
[15:20:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:21:19] <hayley> Well, structural traversal has the effect where we actually destructure in the same function, so I almost have the information to prefetch. The rest is knowing if the next value is going to be a real pointer and not an immediate, and thus likely to be accessed further.
[15:24:20] <hayley> Would I have a JIT or something, I could have each optimisation pass propose some measurements to take on code, like what types variables are often going to be. Then I could do some optimisations which preserve semantics, but make the common case go faster, e.g. type splitting or inlining common paths or something.
[15:26:30] <hayley> Prefetching fixnums is still sound (on x86-64) but dumb prefetches make things much worse.
[15:58:57] *** Joins: vats (~vats@103.216.143.232)
[16:25:55] *** Joins: lisp123 (~lisp123@143.238.164.103)
[16:30:36] *** Quits: lisp123 (~lisp123@143.238.164.103) (Ping timeout: 252 seconds)
[16:37:17] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[16:37:26] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[16:38:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[16:49:13] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[16:52:58] *** Quits: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de) (Quit: Leaving)
[16:54:01] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[16:57:26] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[17:04:37] *** Quits: vats (~vats@103.216.143.232) (Ping timeout: 240 seconds)
[17:10:20] *** Joins: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de)
[17:13:06] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[17:23:35] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[17:27:02] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[17:31:37] *** Quits: razetime (~quassel@117.254.35.215) (Ping timeout: 240 seconds)
[17:41:55] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[17:42:12] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[17:44:17] *** Joins: razetime (~quassel@117.254.35.215)
[18:00:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:01:58] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[18:02:20] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[18:16:40] *** Joins: kevingal (~quassel@176.61.88.240)
[18:27:49] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[18:31:19] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:32:50] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[18:51:24] *** Quits: razetime (~quassel@117.254.35.215) (Ping timeout: 252 seconds)
[19:03:56] *** Joins: razetime (~quassel@117.254.35.162)
[19:10:11] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:10:22] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[19:10:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[19:12:00] *** Quits: X-Scale (~ARM@92.250.103.125) (Ping timeout: 272 seconds)
[19:12:01] *** X-Scale` is now known as X-Scale
[19:12:56] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:21:32] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[19:23:34] *** Joins: aeth (~aeth@user/aeth)
[19:32:55] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4.1)
[19:33:22] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:37:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[20:03:14] *** Quits: razetime (~quassel@117.254.35.162) (Ping timeout: 260 seconds)
[20:04:23] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:29:52] *** Joins: vats (~vats@103.216.143.232)
[20:32:26] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[20:50:03] *** Joins: Lycurgus (~juan@98.4.112.204)
[21:15:23] *** Joins: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com)
[21:19:51] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[21:49:13] *** Joins: McParen (~mcp@user/mcparen)
[21:55:25] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[21:56:18] *** Quits: kevingal (~quassel@176.61.88.240) (Remote host closed the connection)
[22:00:03] *** Joins: Oddity (~Oddity@user/oddity)
[22:02:32] *** Quits: vats (~vats@103.216.143.232) (Ping timeout: 240 seconds)
[22:34:27] *** Quits: tyson2 (~user@cpeac202e798f63-cmac202e798f60.cpe.net.cable.rogers.com) (Remote host closed the connection)
[22:48:27] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 252 seconds)
[22:50:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[22:51:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:54:57] *** Joins: Oddity (~Oddity@user/oddity)
[23:13:59] *** Parts: McParen (~mcp@user/mcparen) ()
[23:15:43] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[23:31:30] *** Quits: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de) (Quit: Leaving)
[23:33:43] *** Joins: Inline (~Inline@p200300cd472d40002c1b8381bd5618c5.dip0.t-ipconnect.de)
