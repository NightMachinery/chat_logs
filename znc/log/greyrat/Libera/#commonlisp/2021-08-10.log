[00:03:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:08:55] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[00:16:34] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[00:18:02] *** Joins: selwyn (~selwyn@user/selwyn)
[00:22:36] *** Joins: lisp123 (~lisp123@45.130.83.181)
[00:25:42] *** Joins: hafat (~hafat@95.70.167.173)
[00:27:08] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 256 seconds)
[00:27:54] *** Quits: lisp123 (~lisp123@45.130.83.181) (Ping timeout: 272 seconds)
[00:33:20] <jmercouris> is there a way to 'inherit' nicknames from a package as well?
[00:33:24] <jmercouris> so for example, let's say I have package tomato
[00:33:33] <jmercouris> and in package tomato I make a nickname for package pepper named "p"
[00:33:37] <jmercouris> then I :USE tomato
[00:33:51] <phoe> you mean package-local nicknames?
[00:33:59] <jmercouris> yes
[00:34:01] <phoe> I don't think it's possible to inherit PLNs
[00:34:01] <jmercouris> I mean those specifically
[00:34:04] <jmercouris> damnit
[00:34:10] <jmercouris> perhaps I shall make a macro for it then
[00:34:12] <phoe> might be a good idea for UIOP:DEFINE-PACKAGE though?...
[00:34:33] <jmercouris> perhaps
[00:34:39] <phoe> to grab all local nicknames from one package and copy them into another
[00:34:56] <jmercouris> I wasn't thinking of a generalized macro like that, but that could also work
[00:34:58] <White_Flame> package-local names should ideally be package interned symbols as well
[00:35:11] <White_Flame> but that's quite a significant change
[00:35:40] <jmercouris> phoe: is there a way to list all package local nicknames in a package?
[00:35:59] <phoe> jmercouris: yes, tpln:package-local-nicknames
[00:36:13] <jmercouris> I see
[00:36:18] *** Joins: karlosz (~karlosz@router.cloyne.org)
[00:36:20] <jmercouris> OK I will write such a macro then
[00:36:45] <jmercouris> ah, and it is nicely formatted to
[00:36:47] <jmercouris> s/to/too
[00:41:25] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:45:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[00:46:22] *** Joins: khrbt (~khrbt@user/khrbt)
[00:46:50] *** Joins: aeth (~aeth@user/aeth)
[00:49:00] *** Joins: lisp123 (~lisp123@45.130.83.181)
[00:50:28] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[00:50:38] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[00:52:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:55:07] <jmercouris> OK here is something a bit odd
[00:55:41] <jmercouris> http://dpaste.com/F3FYPZ94H
[00:55:53] <jmercouris> why does it remove the 'trivial-package-local-nicknames' in the expansion?
[00:56:06] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[00:56:21] <phoe> because the symbol is present in your current package
[00:56:25] <phoe> are you in CL-USER?
[00:56:26] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[00:56:29] <jmercouris> I don't recall
[00:56:33] <jmercouris> I just did C-c M-m
[00:56:43] <phoe> that's likely the case then
[00:56:46] <jmercouris> OK
[00:56:48] *** Joins: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com)
[00:56:54] <jmercouris> see any other problems with the macro?
[00:56:56] <jmercouris> does it look reasonable?
[00:58:23] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:58:40] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Ping timeout: 258 seconds)
[00:58:54] <phoe> it does not need to be a macro
[00:59:01] <jmercouris> OK, so a function, why not
[01:01:07] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Client Quit)
[01:01:26] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[01:05:40] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 256 seconds)
[01:20:55] *** Quits: lisp123 (~lisp123@45.130.83.181) (Quit: Leaving...)
[01:21:53] *** Joins: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu)
[01:24:49] *** Joins: Alfr (~Alfr@user/alfr)
[01:25:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:33:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:34:24] *** Quits: pve (~pve@188-67-190-189.bb.dnainternet.fi) (Quit: leaving)
[01:34:34] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:35:02] *** Joins: dsk (~dsk@user/dsk)
[01:38:32] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 258 seconds)
[01:38:33] *** Joins: karlosz (~karlosz@router.cloyne.org)
[01:44:17] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 258 seconds)
[01:46:52] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[01:46:54] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[01:51:30] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[01:55:23] *** Joins: khrbt (~khrbt@user/khrbt)
[01:57:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[01:58:45] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[01:59:41] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:d182:fd4:8496:53d5) (Remote host closed the connection)
[02:01:11] *** Joins: karlosz (~karlosz@router.cloyne.org)
[02:02:04] <phoe> if anything, remember to call it in EVAL-ALWAYS so it affects the compilation environment
[02:06:04] *** Quits: karlosz (~karlosz@router.cloyne.org) (Ping timeout: 272 seconds)
[02:09:40] *** Joins: pegaso (~reis-r@131.72.121.14)
[02:10:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:18:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:18:53] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[02:19:19] *** Parts: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Using Circe, the loveliest of all IRC clients)
[02:19:42] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[02:26:58] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 272 seconds)
[02:31:48] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 256 seconds)
[02:33:31] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[02:34:56] <pillton> mfiano: Yes. I am the author of specialization-store.
[02:42:26] *** Quits: cosimone (~user@93-34-133-32.ip49.fastwebnet.it) (Ping timeout: 268 seconds)
[02:44:05] *** Quits: gaqwas (~john@dynamic-077-007-118-176.77.7.pool.telefonica.de) (Ping timeout: 258 seconds)
[02:45:27] *** Joins: akoana (~ah@user/akoana)
[02:47:24] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[02:52:02] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:53:35] <mfiano> pillton: Hello.
[02:54:58] <mfiano> In the documentation I didn't find any mention of what is expected for the &body portion of defstore, and none of the examples use it. I was just curious, because it seems to be checking for a list with car being a keyword symbol and cadr being a function designator, or something along those lines.
[02:55:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[03:03:02] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[03:13:03] *** Quits: frgo (~frgo@p200300deef181d00e84cc64eee962050.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:13:31] *** Joins: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de)
[03:13:50] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Ping timeout: 272 seconds)
[03:14:31] *** Joins: cjb (~cjb@user/cjb)
[03:18:13] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 268 seconds)
[03:18:31] *** Joins: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de)
[03:19:14] *** Joins: khrbt (~khrbt@user/khrbt)
[03:19:14] *** Quits: attila_lendvai (~alendvai@1F2EFD02.unconfigured.pool.telekom.hu) (Read error: Connection reset by peer)
[03:19:46] *** Joins: attila_lendvai (~alendvai@1F2EFD02.nat.pool.telekom.hu)
[03:20:10] *** Joins: elderK (uid205007@id-205007.brockwell.irccloud.com)
[03:20:29] <pillton> mfiano: It is part of the MOP for specialization store. You can pass arguments to the class which instantiates the store object.
[03:20:53] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 258 seconds)
[03:21:09] <pillton> The default implementation has no options I think.
[03:21:16] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 258 seconds)
[03:22:12] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 245 seconds)
[03:22:53] *** Quits: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[03:23:02] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:23:41] <pillton> You can change the class of the specialization object used by the store by using the :specialization-class option.
[03:26:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[03:27:15] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[03:33:48] *** Quits: khrbt (~khrbt@user/khrbt) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:36:00] *** Joins: khrbt (~khrbt@user/khrbt)
[03:36:02] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[03:36:53] *** Joins: cjb (~cjb@user/cjb)
[03:37:25] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[03:37:50] *** Joins: srhm (~ascii@user/srhm)
[03:38:14] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[03:40:49] *** Quits: khrbt (~khrbt@user/khrbt) (Client Quit)
[03:41:48] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[03:46:57] *** Quits: taiju (~taiju@240b:253:ec40:2400:3cf8:2df8:a9c6:9f5a) (Ping timeout: 258 seconds)
[03:47:09] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[03:56:36] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[03:57:44] *** Quits: pegaso (~reis-r@131.72.121.14) (Quit: Leaving)
[03:59:32] *** Joins: dsk (~dsk@user/dsk)
[04:11:03] *** Quits: attila_lendvai (~alendvai@1F2EFD02.nat.pool.telekom.hu) (Ping timeout: 276 seconds)
[04:12:28] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 268 seconds)
[04:22:18] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[04:32:34] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Ping timeout: 260 seconds)
[05:08:18] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[05:13:52] *** Quits: random-nick (~random-ni@87.116.181.197) (Ping timeout: 256 seconds)
[05:14:10] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[05:14:50] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[05:15:20] *** Joins: anononon (~anononon@user-5-173-146-83.play-internet.pl)
[05:19:00] *** Joins: dsk (~dsk@user/dsk)
[05:21:17] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[05:22:09] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[05:24:52] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[05:34:31] *** Joins: cjb` (~cjb@user/cjb)
[05:35:16] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.2)
[05:35:29] *** cjb is now known as Guest8286
[05:35:29] *** cjb` is now known as cjb
[05:36:09] *** Quits: Guest8286 (~cjb@user/cjb) (Ping timeout: 260 seconds)
[05:36:35] <Xach> it's a mfianostorm on github
[05:47:53] *** Quits: anononon (~anononon@user-5-173-146-83.play-internet.pl) (Ping timeout: 248 seconds)
[05:51:00] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[05:51:05] *** Joins: iisi_ (sid19824@id-19824.stonehaven.irccloud.com)
[05:51:47] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[05:52:27] *** Joins: JoshYoshi (~user@37.25.47.130)
[05:52:32] *** Quits: JoshYoshi (~user@37.25.47.130) (Remote host closed the connection)
[05:54:53] *** Joins: tux0r- (~tux0r@rosaelefanten.org)
[05:55:08] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:55:08] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[05:55:08] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (Read error: Connection reset by peer)
[05:55:08] *** Quits: iisi (sid19824@stonehaven.irccloud.com) (Read error: Connection reset by peer)
[05:55:08] *** Quits: gpiero (~quassel@camale.rm-rf.it) (Read error: Connection reset by peer)
[05:55:08] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: tux0r (~tux0r@2a03:4000:34:5e:281e:e1ff:fe28:c3b5) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[05:55:08] *** Quits: nirnam (~nirnam@1.47.143.232) (Ping timeout: 272 seconds)
[05:55:09] *** iisi_ is now known as iisi
[05:55:20] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[05:55:54] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[05:58:48] *** Joins: nirnam (~nirnam@1.47.143.232)
[05:59:09] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 268 seconds)
[06:09:55] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[06:20:37] *** Quits: lad (~lad@user/lad) (Remote host closed the connection)
[06:21:01] *** Joins: lad (~lad@user/lad)
[06:25:20] *** Joins: Skyfire (~pyon@user/pyon)
[06:25:50] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:44:06] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[06:50:59] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[06:54:33] *** Joins: prxq_ (~quassel@x4dbd27dc.dyn.telefonica.de)
[06:55:30] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[06:58:02] *** Quits: prxq (~quassel@x4db937d5.dyn.telefonica.de) (Ping timeout: 245 seconds)
[06:59:18] *** Quits: lad (~lad@user/lad) (Ping timeout: 272 seconds)
[07:10:02] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (Ping timeout: 256 seconds)
[07:16:10] *** Parts: akoana (~ah@user/akoana) ()
[07:24:49] *** Joins: karlosz (~karlosz@router.cloyne.org)
[07:29:17] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 245 seconds)
[07:31:13] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[07:32:37] <beach> Good morning everyone!
[07:38:52] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 258 seconds)
[07:39:51] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[07:40:13] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[07:47:47] *** Joins: d4ryus1 (~d4ryus@ppp-188-174-25-176.dynamic.mnet-online.de)
[07:50:10] *** Quits: d4ryus (~d4ryus@ppp-188-174-95-171.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[07:50:17] *** Joins: dsk (~dsk@user/dsk)
[07:50:29] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[07:50:30] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Remote host closed the connection)
[07:50:48] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[07:51:19] *** Joins: karlosz (~karlosz@router.cloyne.org)
[07:59:46] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[08:04:18] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Remote host closed the connection)
[08:11:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:18:46] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[08:20:27] *** Joins: Fare (~fare@2601:184:4a7f:995c::871)
[08:37:01] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[08:42:28] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[08:44:57] *** Joins: d4ryus2 (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[08:48:14] *** Quits: d4ryus1 (~d4ryus@ppp-188-174-25-176.dynamic.mnet-online.de) (Ping timeout: 272 seconds)
[08:51:24] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[08:55:04] *** Joins: robert` (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net)
[08:57:02] *** Quits: robert` (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net) (Remote host closed the connection)
[09:00:51] *** Quits: nirnam (~nirnam@1.47.143.232) (Ping timeout: 268 seconds)
[09:01:10] *** Joins: igemnace (~ian@user/igemnace)
[09:09:33] *** Quits: Fare (~fare@2601:184:4a7f:995c::871) (Remote host closed the connection)
[09:12:13] *** Joins: ahlk (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net)
[09:22:55] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[09:26:05] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[09:27:40] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[09:29:33] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[09:41:36] *** Joins: sm2n (~sm2n@user/sm2n)
[09:44:22] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 28.0.50)
[09:44:30] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:51:36] *** Quits: derelict (~derelict@user/derelict) (Quit: WeeChat 3.2)
[09:59:48] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[10:08:40] *** Quits: ahlk (~user@162-231-38-94.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 272 seconds)
[10:17:57] *** Quits: hafat (~hafat@95.70.167.173) (Ping timeout: 268 seconds)
[10:45:06] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[10:48:15] *** Joins: selwyn (~selwyn@user/selwyn)
[10:50:00] *** Quits: ecraven (~ecraven@user/nex) (Quit: quit)
[10:54:18] *** Joins: shka (~herr@109.231.62.239)
[10:54:38] <shka> hi all
[10:55:29] <shka> i made a web server with the hunchentoot
[10:55:51] <shka> but after a while requests trigger fd_set size limit validation
[10:56:18] <shka> is there something in hunchentoot that i missed or should i search for problem elsewhere?
[10:58:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:59:54] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Read error: Connection reset by peer)
[10:59:58] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 272 seconds)
[11:00:09] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[11:00:15] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[11:01:18] *** Lord_of_Life_ is now known as Lord_of_Life
[11:01:43] *** Joins: ecraven (ecraven@user/nex)
[11:03:46] *** Quits: prxq_ (~quassel@x4dbd27dc.dyn.telefonica.de) (Ping timeout: 272 seconds)
[11:04:48] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[11:05:23] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[11:05:53] *** Joins: prxq (~quassel@x4dbedc88.dyn.telefonica.de)
[11:06:20] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 256 seconds)
[11:15:19] *** Joins: makomo (~makomo@user/makomo)
[11:15:20] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[11:17:03] *** Joins: amb007 (~a_bakic@87.116.175.4)
[11:19:40] *** Joins: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com)
[11:28:51] *** Quits: amb007 (~a_bakic@87.116.175.4) (Ping timeout: 268 seconds)
[11:29:09] *** Joins: pve (~pve@188-67-182-1.bb.dnainternet.fi)
[11:29:49] *** Joins: gaqwas (~john@dynamic-095-118-114-085.95.118.pool.telefonica.de)
[11:30:07] <shka> also
[11:30:11] *** Joins: amb007 (~a_bakic@93.87.81.66)
[11:30:44] <shka> is will calling bt:destroy-thread on linux sbcl will launch unwind-protect cleanup?
[11:31:24] <hayley> To my knowledge, no.
[11:31:38] <shka> oh shit
[11:31:43] <shka> oh no
[11:31:46] <shka> :(
[11:31:59] <shka> well, time to start programming
[11:32:12] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[11:33:18] <hayley> You could instead interrupt a thread with a function which signals an error.
[11:33:18] *** Joins: pve_ (~pve@176-93-74-209.bb.dnainternet.fi)
[11:33:29] *** Quits: pve (~pve@188-67-182-1.bb.dnainternet.fi) (Ping timeout: 248 seconds)
[11:34:35] <rain3> https://stackoverflow.com/questions/55638774/how-to-properly-terminate-a-thread-which-is-blocking-lparallel-common-lisp
[11:37:30] *** Quits: amb007 (~a_bakic@93.87.81.66) (Read error: Connection reset by peer)
[11:37:53] *** Joins: amb007 (~a_bakic@93.87.81.66)
[11:38:27] <shka> hayley: yeah, i could, but honestly, it is just a matter of closing FD in the right place
[11:38:45] <shka> so it would be easier to pass stream on the thread closure
[11:38:53] <shka> instead of file path
[11:41:42] *** pve_ is now known as pve
[11:45:34] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[12:00:34] *** Quits: elderK (uid205007@id-205007.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[12:03:34] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[12:04:44] *** Joins: Viking667 (viking@202.89.131.69)
[12:05:57] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 245 seconds)
[12:11:30] <Viking667> Good morftervening, wanted to ask a question about Clozure CL. Anyone up for it?
[12:11:51] <beach> Just ask an you will find out.
[12:14:58] *** Quits: victor (sid208353@user/victor) (Ping timeout: 240 seconds)
[12:15:00] *** Quits: amb007 (~a_bakic@93.87.81.66) (Read error: Connection reset by peer)
[12:15:10] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[12:15:57] *** Joins: victor (sid208353@user/victor)
[12:16:05] <Viking667> lol, right. I should have known that. Anyhow, I've just followed the instructions at the github, I was wanting to know what I need to put and where, now that I have lxcl64 and the image... do I need to copy just that to the final destination, or do I need to copy the sourcetree too?
[12:17:53] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[12:18:03] <beach> I guess pjb would know that, but he might be busy with his day job.
[12:18:39] <Viking667> lol, that's what was said over on #emacs
[12:18:57] <pve> Viking667: I think you can just run it from wherever
[12:19:06] <ck_> Viking667: are the instructions different from https://ccl.clozure.com/docs/ccl.html#installing-and-running-clozure-cl ? On there, it says binary and heap image are what make up the installation
[12:20:18] <Viking667> Ahhh, so that's the instructions there...
[12:20:23] <pve> Viking667: I have a ccl folder somewhere in my home directory, and symlink the lx86cl64 to ~/bin
[12:20:24] <Viking667> okay, cool. Thanks.
[12:20:55] <Viking667> I think I stuck a ccl64 script into my ${HOME}/bin suitably edited to point to my installation
[12:22:34] <Viking667> All right, I think that's all I needed to know at least for now.
[12:22:40] <pve> Viking667: A script will work too, but it is not necessary. A symlink to the binary is enough.
[12:22:45] <Viking667> I'll probably be running it from inside emacs anyhow
[12:23:34] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[12:23:54] <beach> Viking667: Yes, you should run it with SLIME.
[12:26:24] <Viking667> meh, SLIME. Haven't run into that much yet.
[12:27:10] <beach> It is pretty much needed for any level of productivity when you develop Common Lisp code.
[12:27:17] <shka> yes
[12:27:39] <shka> otherwise you would have a level productivity of non-interactive language without IDE
[12:27:58] <shka> so let's say editing python files in notepad
[12:32:04] <Viking667> hm, so not like Smalltalk at all, then.
[12:32:14] <Viking667> (or at least, not like most Smalltalks)
[12:34:31] <beach> Viking667: Smalltalk is mainly a "programming system", whereas Common Lisp is a "language" with several different implementations.  Most implementations define only a terminal-based text interface.  SLIME supplies many more interactive functions that will work with most Common Lisp implementations.
[12:34:47] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:35:03] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[12:35:03] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:35:19] *** Joins: amb007 (~a_bakic@79.101.103.198)
[12:35:29] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:05] *** Quits: gaqwas (~john@dynamic-095-118-114-085.95.118.pool.telefonica.de) (Ping timeout: 268 seconds)
[12:36:59] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[12:38:14] <shka> that being said, smalltalk and cl are both interactive by design
[12:38:25] <shka> just different routes to the same destination
[12:38:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:55:53] *** Joins: santiagopim (~user@90.166.59.254)
[12:58:17] *** Quits: amb007 (~a_bakic@79.101.103.198) (Read error: Connection reset by peer)
[12:59:36] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[13:05:13] *** Joins: nirnam (~nirnam@1.47.131.83)
[13:05:20] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 256 seconds)
[13:05:58] <kakuhen> Viking667: if you want to go really overboard with a launching script, here's what I have http://0x0.st/-JAI.sh
[13:06:06] <kakuhen> just make sure you change CCL_DEFAULT_DIRECTORY to the appropriate one for your machine.
[13:07:59] <Viking667> hm, doesn't look that different from the one I have.
[13:09:19] <pjb> Yes, if you don't put the ccl directory (with sources, etc) in a place where the ccl64 script expects it, you have to set the environment variable CCL_DEFAULT_DIRECTORY ; or, instead of symlinking ccl64, you can make a copy and edit it.
[13:13:21] *** Joins: lsip123_win10 (~user@80.227.170.170)
[13:14:01] <lsip123_win10> Hi - does anybody have any good guides or tips when it comes to logging (for now I am planning on using log4cl, and adding logging features via :before :after etc for generic functions)
[13:17:11] <shka> lsip123_win10: not a bad plan imho
[13:17:36] <shka> but sometimes you may want more fine grained control
[13:18:32] <lsip123_win10> shka: I was thinking of writing my own functions to do that control, but it seems like I might need to pass in variables (to track for example how many times a recursive function has been called) to do that
[13:18:54] <lsip123_win10> is that what you mean (having to append the available data to log with additional data from outside the functions)?
[13:19:25] <kakuhen> regarding counts: what's wrong with tracing functions again?
[13:19:53] <kakuhen> i was in a situation where i wanted to see if a specific method was being called exactly twice and a simple trace suffices
[13:20:19] <lsip123_win10> kakuhen: I have some very deep nesting, think 1000s of calls
[13:20:54] <shka> kakuhen: nothing is wrong with tracing
[13:21:13] <shka> it is nice and useful feature when you don't need debugger
[13:27:27] <flip214> lsip123_win10: you could also look at a stacktrace to find out how deep it's called
[13:28:34] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 256 seconds)
[13:28:42] <Viking667> pjb: ah, okay. (re: if you don't put the ccl directory (with sources, etc) ...) so you'd recommend putting the sources there too?
[13:29:00] <Viking667> (as in, not JUST the image and kernel)?
[13:31:32] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[13:31:33] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:32:09] *** Joins: amb007 (~a_bakic@93.87.81.34)
[13:32:11] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 268 seconds)
[13:44:00] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 272 seconds)
[13:46:00] *** Joins: lad (~lad@user/lad)
[13:57:09] *** Joins: selwyn_ (~selwyn@user/selwyn)
[13:57:55] <lsip123_win10> flip214: thanks for the suggestion
[13:59:19] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[13:59:47] <pjb> Viking667: you can use ccl without the sources (just [wdl]x{86,ppc,arm}cl{32,64}{,.image}) But it's nice to be able to M-. and jump to the sources of ccl.
[14:00:20] <pjb> Viking667: also, I guess you'd also have to package the .app when you are on macOS for (require :cocoa), etc.
[14:01:33] <pjb> Viking667: I just keep the whole ccl directory and have the ccl script reference it. Usually /usr/local/src/ccl (but I also have alternatives such as /usr/local/src/ccl-git and old versions such as /usr/local/src/ccl-1.11) with /usr/local/bin/ccl  /usr/local/bin/ccl-1.11 etc.
[14:02:19] <pjb> Viking667: sometimes you find bugs, so when you have the sources, you can easily correct them and generate a new image without the bug ;-)
[14:03:38] <pjb> Viking667: eg. https://github.com/Clozure/ccl/issues/364
[14:04:11] <pjb> Viking667: note: it's open since April, but still not integrated in ccl git. So if you encounter this bug, you better have a local patch!
[14:04:23] <pjb> (and there are older bugs with patches in issues…)
[14:06:10] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 272 seconds)
[14:09:34] <Viking667> mmm. I downloaded CCL today, so I think that one (at least) has been patched.
[14:14:09] <Viking667> nope.
[14:14:44] <kakuhen> i'm not sure who has commit access to the ccl git (besides rme himself), but i think there should be at least one more maintainer who isn't too busy to at least respond to issues within 3 months of their filing.
[14:15:45] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[14:16:46] <Viking667> yeah. The weird thing is that the issue (at the bottom at least) is showing that someone committed a fix back on 1 June
[14:16:48] <beach> kakuhen: And how do you plan to find such a person/
[14:16:59] <beach> ?
[14:18:16] <kakuhen> beach: the obvious way: you announce you're searching for such a person, or you ask people who have a well-recorded history of contributions and understanding of the project.
[14:18:21] <kakuhen> I'm not asking for a new maintainer to appear overnight.
[14:18:57] <beach> kakuhen: Do you have the qualifications for that screening process?
[14:19:13] <kakuhen> beach: I do not. Or else I would have done something about it.
[14:19:16] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[14:19:16] *** ChanServ sets mode: +o MichaelRaskin
[14:20:12] <beach> OK, so not only do we need a maintainer.  We also need someone highly qualified who is in charge and who can search for another maintainer.
[14:20:54] <Viking667> ugh. Now I see where I went wrong, forgot to check informatigo's fork.
[14:21:12] <kakuhen> beach: what stops the primary maintainer of the project from doing this themselves within the span of a few years?
[14:21:24] *** Joins: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a)
[14:22:18] <beach> kakuhen: I don't know.  I haven't talked to him lately.  But typical reasons are day job, change of interest, etc.
[14:23:51] <beach> Also, it is not going to be easy to find a qualified maintainer with the right knowledge, experience, and availability.
[14:25:12] <beach> I think jackdaniel did the right thing for ECL.  I don't think he had the right knowledge and experience when he started.  But he was determined to learn.  And nobody asked him as I recall; he just took over, so to speak.
[14:25:21] <beach> kakuhen: Nothing prevents you from doing the same.
[14:26:43] <beach> Now, if we could somehow cut down on the collective maintenance burden by factoring code so that it is then shared between different implementations, then the burden for each module would be smaller and more well defined.
[14:28:05] <scymtym> also, no maintainer at all can be better than an inexperienced maintainer who damages the codebase by "cleaning up", fixing problems only at the surface level, or removing things they don't understand
[14:28:26] <kakuhen> beach: Those typical reasons you gave are precisely why I think the time has been ripe to search for someone who may be willing to at least review an issue or PR and perhaps summarize information so that rme (or some other higher authority I'm not aware of) can decide to ultimately allow X change in the codebase. Sure, finding such a person is hard, but it's reasonable for people like myself to continue waiting anyway.
[14:29:12] <beach> scymtym: Good point.  At least the person would have to feel some kind of responsibility, and also ask for advice.
[14:29:13] *** Joins: random-nick (~random-ni@87.116.182.190)
[14:29:27] <kakuhen> Perhaps I can fork the project and add some patches, sure, but I'd expect myself to suffer the situation as scymtym described: I wouldn't probably understand the full consequences of my actions.
[14:30:06] <beach> That's when you ask for advice here, and as I recall, that's what jackdaniel has done.
[14:31:46] *** Joins: dsk (~dsk@user/dsk)
[14:32:23] <beach> kakuhen: I think what I am saying is that, if you don't do it yourself, then all that is happening right now is that you are asking one person (who apparently does not have enough time to take care of the maintenance) to do even more.
[14:33:11] <beach> jackdaniel: By the way, feel free to correct me about the statements regarding you and ECL.
[14:35:57] <Viking667> I think what I lack (though I have a passable amount of time) is experience in programming in general, though I've seen a whole boatload of languages from FORTRAN to smalltalk to C/C++/C# to java to lisp. Heck, I've even tinkered a little with scripting in bash.
[14:36:10] <kakuhen> beach: Yes. To some extent, I do find myself as a part of "the problem," so to speak, since nothing is really stopping me from forking CCL and patching whatever I want. And hopefully in the future I will know enough about Common Lisp and other relevant topics so that I can make a non-trivial change to CCL and thoroughly understand the consequences of my changes.
[14:36:20] <kakuhen> But that time is not now, unfortunately.
[14:36:46] <Viking667> so I wouldn't be a good maintainer. I'm getting my feet wet by going through Dolphin Smalltalk comments and picking out the mistakes and fixing those as I go. That's giving me a good look at the codebase while I'm at it
[14:37:03] <Viking667> but of course, Dolphin's not Lisp.
[14:37:30] <kakuhen> beach: And, as you pointed out, there are plenty of resources I can use to eventually get there. So expect a lot more dumb questions from me :)
[14:39:08] <beach> One thing that might help attract future maintainers is what is known as "preventive maintenance" is software engineering.  The activity consists of code factoring, documentation, writing comments, writing tests, etc. that don't really change what the code is doing.
[14:39:42] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 245 seconds)
[14:39:43] <beach> A potential maintainer is more likely to accept a clean code base than one that looks like a mess.
[14:40:17] <beach> So perhaps CCL has some low-hanging fruit in that department that doesn't require a whole lot of experience.
[14:42:07] <phoe> CCL has a lot of that
[14:42:34] <beach> I am not surprised.
[14:42:46] <kakuhen> Good idea, beach. I've always considered seeing the current test results on the latest release, but I've somehow never considered writing new tests myself, or seeing what is missing in terms of testing and documentation
[14:43:24] *** Joins: selwyn (~selwyn@user/selwyn)
[14:44:17] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 245 seconds)
[14:45:50] <beach> Yes, write one test, one documentation string, or one extracted function per day.  Submit your suggestion here before committing it.
[14:46:30] <beach> ... or one comment, or update one function with better variable names.
[14:49:28] <Viking667> one of the chief problems that I've found (as you alluded to earlier) is that even though we can come up with fixes, getting someone to action a pull request—even if our code is 'clean'—is obviously the pain point of the CCL project at the moment.
[14:52:59] <beach> So I just opened a file nx0.lisp at random, and the first thing i see is a struct with slots named VDECLS, FDECLS, and MDECLS.  How about changing those to function-declarations, variable-declarations, or whatever they are supposed to mean.
[14:53:27] <beach> That's a decent chunk of a "one thing per day" ativity.
[14:53:29] <beach> activity
[14:54:29] <beach> In the same file there are to-level comments with one or two semicolons, whereas the style recommended in the standard calls for three.  Another single task.
[14:54:32] <kakuhen> Viking667: the PR i made for the missing feature reported by phoe about 6 months ago is a good example of that, but I'm confident that it will get merged into the codebase, either as-is or with whatever modification rme finds appropriate. I just have to wait. The situation is vastly different for those who are proposing non-trivial changes to CCL, however.
[14:54:57] <Viking667> *nod*
[14:55:17] <Viking667> Well, i'm off for now, I'm starting to run out of steam here (22:24 here)
[14:55:30] <beach> The function %nx-t is badly indented.  One more thing to fix.
[14:55:46] <beach> This is just the first 25 lines of one file.
[14:55:52] <kakuhen> Viking667: heh, try 3:25 am
[14:56:09] <kakuhen> beach: You've made a good enough demonstration of your point.
[14:56:29] <kakuhen> I'll try finding some stuff myself tomorrow and attempt following a schedule for these little changes.
[14:56:36] <beach> And IF is used with no `else' branch.  Ether replace with WHEN or supply the `else' branch as NIL (depending on the value is used).
[14:57:36] <beach> kakuhen: Thanks.  To summarize, these improvements require very little experience.  Only a sense of respect for conventions.
[14:58:08] <beach> (let ((pair ())) ....)
[14:58:25] <beach> That's also explicitly contrary to a Common Lisp HyperSpec dictionary page.
[14:59:08] *** Quits: nirnam (~nirnam@1.47.131.83) (Ping timeout: 268 seconds)
[14:59:30] *** Joins: Alfr (~Alfr@user/alfr)
[14:59:58] <beach> Using UNLESS in a position where the return value is meaningful.
[15:00:23] <beach> Unwarranted number of blank lines, decreasing the number of visible lines of code.
[15:00:31] *** Joins: nirnam (~nirnam@1.46.28.192)
[15:00:46] <beach> I could go on all day with a single file, apparently.
[15:01:29] <kakuhen> Good to know. Hopefully that means I can find something to do daily.
[15:01:49] <MichaelRaskin> I would expect any kind of pushing upstream to be easier with good docstrings/extra tests/more readable names, than with piecemeal style fixes
[15:02:11] <beach> kakuhen: I think at this point I can promise you I could find enough stuff for a long time still.
[15:02:48] <kakuhen> You convinced me of this quite a while ago.
[15:02:57] <beach> Heh, OK.
[15:03:24] <kakuhen> With that said, I'm going to sleep. Good night, and thank you beach for the valuable input.
[15:03:38] *** Joins: scymtym (~user@2001:638:504:20e5:e269:db37:7338:d52)
[15:03:40] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[15:04:53] <beach> MichaelRaskin: So you are saying that we need to find a maintainer to improve docstrings, add more testes, improve names.  But that's what we just decided is not easy at this point, and that piecemeal fixes would make it easier to find someone when these simpler fixes are being worked on.
[15:06:04] <MichaelRaskin> Piecemeal _style_ fixes reduce internal codebase consistency, though
[15:06:22] *** Joins: anononon (~anononon@user-5-173-148-81.play-internet.pl)
[15:06:32] *** Parts: Viking667 (viking@202.89.131.69) (ERC (IRC client for Emacs 28.0.50))
[15:06:48] <MichaelRaskin> Your VDECLS example is convincing, of course
[15:06:49] <beach> Well, when I suggested using three semicolons uniformly for top-level comments, I don't think there is any risk for that.
[15:07:22] <beach> But, yes, care must be taken not to make consistency worse.
[15:07:37] <beach> My initial impression is that consistency is not that great.
[15:09:03] <beach> And I can't see how an arbitrary number of blank lines is a consistent style feature.  More like a mess.
[15:12:08] *** Quits: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:12:17] <scymtym> this is just a hypothetical example, but a tool for generating some kind of internal documentation could look for comments with a certain number of semicolons. assuming such a tool would not run as part of the default build process, breaking it could go unnoticed for a long time. not arguing against the suggested improvements, but illustrating how not knowing what you don't know can be tricky in complex code bases
[15:12:33] *** Joins: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de)
[15:14:34] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[15:14:39] <beach> I agree, of course.  And that's the same argument that i use for people who use keywords for things like package names.  Perhaps there is a tool that reads the source code, and if the package name is a keyword, it means something particular.
[15:15:11] <beach> So it must be determined that what looks like a mess, really is a mess, and nothing more sophisticated.
[15:16:54] <beach> Then, it would be very strange to create a tool that depends on some of the language conventions (even those explicitly mentioned in the standards document) being violated for the tool to work.
[15:18:35] <scymtym> sure, but code bases like ccl (or SBCL for that matter) seem like prime candidates for those things (which are undesirable, of course)
[15:18:35] *** Quits: amb007 (~a_bakic@93.87.81.34) (Read error: Connection reset by peer)
[15:19:20] <beach> Yes, that's true.  I am reminded of the C macros of GCC for this idea.
[15:24:21] *** Joins: amb007 (~a_bakic@93.87.81.34)
[15:24:42] *** Quits: Oddity (Oddity@user/oddity) (Ping timeout: 240 seconds)
[15:28:38] *** Joins: pve_ (~pve@176-93-71-25.bb.dnainternet.fi)
[15:28:52] *** Joins: notzmv (~zmv@user/notzmv)
[15:31:30] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:32:26] *** Quits: pve (~pve@176-93-74-209.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[15:32:42] <edgar-rft> Don't under-estimate pseudo-sophistical ideas. I lived several years from telling the job center sophistically-sounding shit, and they paid me a lot of money for it. I initially hadn't expected that to become a successful business.
[15:33:41] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[15:34:23] *** Joins: Oddity (Oddity@user/oddity)
[15:35:22] * hayley takes notes
[15:37:16] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[15:38:20] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Ping timeout: 256 seconds)
[15:38:43] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[15:39:21] *** Quits: amb007 (~a_bakic@93.87.81.34) (Ping timeout: 248 seconds)
[15:41:25] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[15:48:25] *** Quits: anononon (~anononon@user-5-173-148-81.play-internet.pl) (Ping timeout: 248 seconds)
[15:48:56] * rain3 taking notes too 
[15:49:43] <rain3> edgar-rft: can you elaborate on that?
[15:53:42] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[15:56:45] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[15:58:36] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[16:01:45] <edgar-rft> What's there to elaborate? As soon as they try to talk you into something you come up with an idea that sounds much better. Most of the people who work there are happy when you go and they have something to write down into their papers, no matter what. At the next date you tell them some completely different story. All you have to do is to make up new stories.
[16:15:53] *** Quits: ggoes (~gregf@fsf/staff/ggoes) (Ping timeout: 252 seconds)
[16:16:59] *** Quits: micro_ (~micro@user/micro) (Ping timeout: 252 seconds)
[16:21:56] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (*.net *.split)
[16:21:56] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (*.net *.split)
[16:21:56] *** Quits: selwyn_ (~selwyn@user/selwyn) (*.net *.split)
[16:21:56] *** Quits: pve_ (~pve@176-93-71-25.bb.dnainternet.fi) (*.net *.split)
[16:21:56] *** Quits: notzmv (~zmv@user/notzmv) (*.net *.split)
[16:21:56] *** Quits: random-nick (~random-ni@87.116.182.190) (*.net *.split)
[16:21:56] *** Quits: lad (~lad@user/lad) (*.net *.split)
[16:21:56] *** Quits: lsip123_win10 (~user@80.227.170.170) (*.net *.split)
[16:21:56] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[16:21:56] *** Quits: sm2n (~sm2n@user/sm2n) (*.net *.split)
[16:21:56] *** Quits: tux0r- (~tux0r@rosaelefanten.org) (*.net *.split)
[16:21:56] *** Quits: gpiero_ (~quassel@camale.rm-rf.it) (*.net *.split)
[16:21:56] *** Quits: aeth (~aeth@user/aeth) (*.net *.split)
[16:21:56] *** Quits: jans (~Thunderbi@193.138.218.211) (*.net *.split)
[16:21:56] *** Quits: ck_ (~ck@plskthx.org) (*.net *.split)
[16:21:56] *** Quits: sander (~sander@user/sander) (*.net *.split)
[16:21:56] *** Quits: _death (~death@adeht.org) (*.net *.split)
[16:21:57] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[16:21:57] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[16:21:57] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (*.net *.split)
[16:21:57] *** Quits: santiagopim (~user@90.166.59.254) (*.net *.split)
[16:21:57] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[16:21:57] *** Quits: prxq (~quassel@x4dbedc88.dyn.telefonica.de) (*.net *.split)
[16:21:57] *** Quits: d4ryus2 (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de) (*.net *.split)
[16:21:57] *** Quits: Skyfire (~pyon@user/pyon) (*.net *.split)
[16:21:57] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[16:21:58] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[16:21:58] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[16:21:58] *** Quits: fengshaun (~fengshaun@68.69.214.210) (*.net *.split)
[16:21:58] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[16:21:58] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[16:21:58] *** Quits: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7) (*.net *.split)
[16:21:59] *** Quits: theBlackDragon (~dragon@fvwm/admin) (*.net *.split)
[16:21:59] *** Quits: totoro (~totoro@user/totoro) (*.net *.split)
[16:21:59] *** Quits: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net) (*.net *.split)
[16:21:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[16:21:59] *** Quits: gendl (sid100083@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (*.net *.split)
[16:21:59] *** Quits: hugo (znc@verdigris.lysator.liu.se) (*.net *.split)
[16:21:59] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (*.net *.split)
[16:21:59] *** Quits: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a) (*.net *.split)
[16:21:59] *** Quits: ecraven (ecraven@user/nex) (*.net *.split)
[16:21:59] *** Quits: wheelsucker (~user@2600:8801:8c03:1f00::8165) (*.net *.split)
[16:21:59] *** Quits: Vultyre (~vultyre@user/vultyre) (*.net *.split)
[16:22:00] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[16:22:00] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (*.net *.split)
[16:22:00] *** Quits: SAL9000 (~SAL9000@shirakumo/sal9000) (*.net *.split)
[16:22:00] *** Quits: palter (sid27521@id-27521.brockwell.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: minion (~minion@common-lisp.net) (*.net *.split)
[16:22:00] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (*.net *.split)
[16:22:00] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[16:22:00] *** Quits: amk (~amk@176.61.106.150) (*.net *.split)
[16:22:00] *** Quits: susam (~susam@user/susam) (*.net *.split)
[16:22:00] *** Quits: fpc (~fpc@user/fpc) (*.net *.split)
[16:22:00] *** Quits: dale (dale@user/dale) (*.net *.split)
[16:22:00] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (*.net *.split)
[16:22:00] *** Quits: hhdave_ (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[16:22:00] *** Quits: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44) (*.net *.split)
[16:22:01] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[16:22:01] *** Quits: hayley (~theemacss@user/hayley) (*.net *.split)
[16:22:01] *** Quits: markasoftware (~quassel@107.161.26.124) (*.net *.split)
[16:22:01] *** Quits: z3t0 (~z3t0@107-159-10-134.on.dsl.ebox.net) (*.net *.split)
[16:22:01] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[16:22:01] *** Quits: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se) (*.net *.split)
[16:22:01] *** Quits: rdrg109 (~rdrg109@51.195.232.80) (*.net *.split)
[16:22:01] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[16:22:01] *** Quits: pl (sid98063@id-98063.brockwell.irccloud.com) (*.net *.split)
[16:22:01] *** Quits: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de) (*.net *.split)
[16:22:02] *** Quits: scymtym (~user@2001:638:504:20e5:e269:db37:7338:d52) (*.net *.split)
[16:22:02] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[16:22:02] *** Quits: retropikel (~retropike@2001:999:200:1f35:f194:c1b5:4044:270e) (*.net *.split)
[16:22:02] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (*.net *.split)
[16:22:02] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[16:22:02] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[16:22:02] *** Quits: moon-child (~moon-chil@cardinal.elronnd.net) (*.net *.split)
[16:22:02] *** Quits: jgkamat (~jay@user/jay) (*.net *.split)
[16:22:02] *** Quits: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68) (*.net *.split)
[16:22:02] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[16:22:02] *** Quits: easye (~user@2a01:4f8:200:8261::b0) (*.net *.split)
[16:22:03] *** Quits: Kabouik (~Kabouik@user/kabouik) (*.net *.split)
[16:22:03] *** Quits: spacebat1 (spacebat@spot.ubermonkey.net) (*.net *.split)
[16:22:03] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[16:22:03] *** Quits: les (znc@user/les) (*.net *.split)
[16:22:03] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[16:22:03] *** Quits: gko (~user@user/gko) (*.net *.split)
[16:22:03] *** Quits: jackdaniel (~jack@user/jackdaniel) (*.net *.split)
[16:22:03] *** Quits: nirnam (~nirnam@1.46.28.192) (*.net *.split)
[16:22:03] *** Quits: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de) (*.net *.split)
[16:22:03] *** Quits: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com) (*.net *.split)
[16:22:03] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[16:22:03] *** Quits: char (~charles@cpe-76-186-124-165.tx.res.rr.com) (*.net *.split)
[16:22:03] *** Quits: mingus (~jan-magnu@ti0135a400-2471.bb.online.no) (*.net *.split)
[16:22:03] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (*.net *.split)
[16:22:03] *** Quits: srhm (~ascii@user/srhm) (*.net *.split)
[16:22:03] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (*.net *.split)
[16:22:03] *** Quits: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com) (*.net *.split)
[16:22:03] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (*.net *.split)
[16:22:03] *** Quits: Oddity (Oddity@user/oddity) (*.net *.split)
[16:22:03] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (*.net *.split)
[16:22:03] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (*.net *.split)
[16:22:03] *** Quits: igemnace (~ian@user/igemnace) (*.net *.split)
[16:22:03] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[16:22:03] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[16:22:03] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[16:22:03] *** Quits: mgxm (~mgxm@user/mgxm) (*.net *.split)
[16:22:03] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (*.net *.split)
[16:22:03] *** Quits: Demosthenex (~Demosthen@user/demosthenex) (*.net *.split)
[16:22:03] *** Quits: dbotton (sid492350@id-492350.tooting.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: drmeister (sid45147@id-45147.charlton.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: conjunctive (sid433686@id-433686.brockwell.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[16:22:04] *** Quits: ullbeking (sid5364@id-5364.charlton.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[16:22:04] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[16:22:04] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[16:22:04] *** Quits: hubvu (sid495858@id-495858.tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca) (*.net *.split)
[16:22:04] *** Quits: djuber` (~user@65.79.128.64) (*.net *.split)
[16:22:04] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[16:22:04] *** Quits: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa) (*.net *.split)
[16:22:04] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[16:22:04] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[16:22:04] *** Quits: beach (~user@2a01:cb19:150:3400:bf91:f21a:87da:7f64) (*.net *.split)
[16:22:04] *** Quits: mason (~mason@redhat/mason) (*.net *.split)
[16:22:04] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[16:22:04] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[16:22:05] *** Quits: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23) (*.net *.split)
[16:22:05] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[16:22:05] *** Quits: leo_song (~leo_song@1.156.52.78) (*.net *.split)
[16:22:05] *** Quits: samebchase (~thelounge@51.15.68.182) (*.net *.split)
[16:22:05] *** Quits: mrcom (~msouth@99-73-215-70.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[16:22:05] *** Quits: deck4rd (~deckard@ec2-3-129-211-221.us-east-2.compute.amazonaws.com) (*.net *.split)
[16:22:05] *** Quits: hirez (~hirez@104.128.237.40) (*.net *.split)
[16:22:05] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (*.net *.split)
[16:22:05] *** Quits: sgithens (sid10659@id-10659.brockwell.irccloud.com) (*.net *.split)
[16:22:05] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[16:22:05] *** Quits: antoszka (~antoni@rozalia.antoszka.pl) (*.net *.split)
[16:22:05] *** Quits: skempf (~Kabriel@user/kabriel) (*.net *.split)
[16:22:06] *** Quits: dieggsy (~dieggsy@2001:470:69fc:105::91f) (*.net *.split)
[16:22:06] *** Quits: Xach (~xach@user/xach) (*.net *.split)
[16:22:06] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[16:22:06] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[16:22:06] *** Quits: hexology- (~hexology@user/hexology) (*.net *.split)
[16:22:06] *** Quits: jcowan (sid325434@id-325434.charlton.irccloud.com) (*.net *.split)
[16:22:06] *** Quits: loke (~loke@junk.nocrew.org) (*.net *.split)
[16:22:06] *** Quits: sukaeto (~sukaeto@sharona.moonpearltech.com) (*.net *.split)
[16:22:06] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[16:22:06] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[16:22:06] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[16:22:06] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (*.net *.split)
[16:22:07] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[16:22:07] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (*.net *.split)
[16:22:07] *** Quits: phadthai (mmondor@ginseng.pulsar-zone.net) (*.net *.split)
[16:22:07] *** Quits: spec (~mrSpec@user/spec) (*.net *.split)
[16:22:07] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[16:22:07] *** Quits: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) (*.net *.split)
[16:22:07] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (*.net *.split)
[16:22:07] *** Quits: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda) (*.net *.split)
[16:22:07] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[16:22:07] *** Quits: mariari (~mariari@user/mariari) (*.net *.split)
[16:22:07] *** Quits: andreyorst (~andreyors@2.92.124.61) (*.net *.split)
[16:22:07] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (*.net *.split)
[16:22:07] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[16:22:07] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[16:22:08] *** Quits: sterni (~lukas@user/sterni) (*.net *.split)
[16:22:08] *** Quits: remexre (~nathan@user/remexre) (*.net *.split)
[16:22:08] *** Quits: hendursa1 (~weechat@user/hendursaga) (*.net *.split)
[16:22:08] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[16:22:08] *** Quits: raeda (~raeda@72.49.219.33) (*.net *.split)
[16:22:08] *** Quits: IUSR (sid348938@stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: d_run (sid83858@id-83858.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: jmercouris (sid438340@stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[16:22:08] *** Quits: ^[ (~user@user//x-8473491) (*.net *.split)
[16:22:08] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (*.net *.split)
[16:22:08] *** Quits: jdz (~jdz@185.23.160.114) (*.net *.split)
[16:22:08] *** Quits: fishfinger_ (~fishfinge@178.62.22.133) (*.net *.split)
[16:22:08] *** Quits: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net) (*.net *.split)
[16:22:08] *** Quits: commandoline_ (~commandol@ubuntu/member/commandoline) (*.net *.split)
[16:22:08] *** Quits: gabc (~gabc@user/gabc) (*.net *.split)
[16:22:08] *** Quits: pok (~pok@user/pok) (*.net *.split)
[16:22:08] *** Quits: jemoka (~jemoka@user/jemoka) (*.net *.split)
[16:22:08] *** Quits: jhi (sid81469@id-81469.tooting.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[16:22:08] *** Quits: stylewarning (sid241636@id-241636.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[16:22:08] *** Quits: alanz (sid110616@id-110616.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39) (*.net *.split)
[16:22:08] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[16:22:08] *** Quits: cross (~cross@spitfire.i.gajendra.net) (*.net *.split)
[16:27:46] *** Joins: remexre (~nathan@user/remexre)
[16:27:46] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[16:27:46] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[16:27:46] *** Joins: sterni (~lukas@user/sterni)
[16:27:46] *** Joins: andreyorst (~andreyors@2.92.124.61)
[16:27:46] *** Joins: mariari (~mariari@user/mariari)
[16:27:46] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[16:27:46] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[16:27:46] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[16:27:46] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:27:46] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[16:27:46] *** Joins: gendl (sid100083@id-100083.stonehaven.irccloud.com)
[16:27:46] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[16:27:46] *** Joins: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576)
[16:27:46] *** Joins: totoro2021 (~totoro@173.82.187.126)
[16:27:46] *** Joins: Patternm1ster (~georg@li1192-118.members.linode.com)
[16:27:46] *** Joins: micro (~micro@user/micro)
[16:27:46] *** Joins: PinealGl1ndOptic (~PinealGla@37.115.210.35)
[16:27:46] *** Joins: danieli (~danieli@user/danieli)
[16:27:46] *** Joins: ggoes_ (~gregf@pool-72-69-95-105.nycmny.fios.verizon.net)
[16:27:46] *** Joins: childlikempress (~moon-chil@cardinal.elronnd.net)
[16:27:46] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:27:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:27:46] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[16:27:46] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[16:27:46] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[16:27:46] *** Joins: Oddity (Oddity@user/oddity)
[16:27:46] *** Joins: selwyn_ (~selwyn@user/selwyn)
[16:27:46] *** Joins: notzmv (~zmv@user/notzmv)
[16:27:46] *** Joins: pve_ (~pve@176-93-71-25.bb.dnainternet.fi)
[16:27:46] *** Joins: nirnam (~nirnam@1.46.28.192)
[16:27:46] *** Joins: random-nick (~random-ni@87.116.182.190)
[16:27:46] *** Joins: MichaelRaskin (~MichaelRa@ipb21b6221.dynamic.kabel-deutschland.de)
[16:27:46] *** Joins: lad (~lad@user/lad)
[16:27:46] *** Joins: lsip123_win10 (~user@80.227.170.170)
[16:27:46] *** Joins: santiagopim (~user@90.166.59.254)
[16:27:46] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:27:46] *** Joins: victor (sid208353@user/victor)
[16:27:46] *** Joins: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com)
[16:27:46] *** Joins: makomo (~makomo@user/makomo)
[16:27:46] *** Joins: prxq (~quassel@x4dbedc88.dyn.telefonica.de)
[16:27:46] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[16:27:46] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651)
[16:27:46] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[16:27:46] *** Joins: sm2n (~sm2n@user/sm2n)
[16:27:46] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[16:27:46] *** iridium.libera.chat sets mode: +o MichaelRaskin
[16:27:46] *** Joins: igemnace (~ian@user/igemnace)
[16:27:46] *** Joins: d4ryus2 (~d4ryus@ppp-188-174-54-240.dynamic.mnet-online.de)
[16:27:46] *** Joins: char (~charles@cpe-76-186-124-165.tx.res.rr.com)
[16:27:46] *** Joins: Skyfire (~pyon@user/pyon)
[16:27:46] *** Joins: mingus (~jan-magnu@ti0135a400-2471.bb.online.no)
[16:27:46] *** Joins: tux0r- (~tux0r@rosaelefanten.org)
[16:27:46] *** Joins: gpiero_ (~quassel@camale.rm-rf.it)
[16:27:46] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[16:27:46] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[16:27:46] *** Joins: srhm (~ascii@user/srhm)
[16:27:46] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[16:27:46] *** Joins: aeth (~aeth@user/aeth)
[16:27:46] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:27:46] *** Joins: zephyr (~alandiper@ec2-34-230-252-114.compute-1.amazonaws.com)
[16:27:46] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[16:27:46] *** Joins: jans (~Thunderbi@193.138.218.211)
[16:27:46] *** Joins: hhdave_ (~hhdave@ip212.ip-193-70-71.eu)
[16:27:46] *** Joins: ck_ (~ck@plskthx.org)
[16:27:46] *** Joins: sander (~sander@user/sander)
[16:27:46] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[16:27:46] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[16:27:46] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[16:27:46] *** Joins: hayley (~theemacss@user/hayley)
[16:27:46] *** Joins: jfb4 (~jfb4@178.62.2.68)
[16:27:46] *** Joins: _death (~death@adeht.org)
[16:27:46] *** Joins: leo_song (~leo_song@1.156.52.78)
[16:27:46] *** Joins: samebchase (~thelounge@51.15.68.182)
[16:27:46] *** Joins: zagura (~zagura@user/zagura)
[16:27:46] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[16:27:46] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[16:27:46] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[16:27:46] *** Joins: borodust (~irc@user/borodust)
[16:27:46] *** Joins: mgxm (~mgxm@user/mgxm)
[16:27:46] *** Joins: ryanbw (~ryanbw@mab.sdf.org)
[16:27:46] *** Joins: Demosthenex (~Demosthen@user/demosthenex)
[16:27:46] *** Joins: Xach (~xach@user/xach)
[16:27:46] *** Joins: fengshaun (~fengshaun@68.69.214.210)
[16:27:46] *** Joins: skyl4rk (~tlvb@user/tlvb)
[16:27:46] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:27:46] *** Joins: raeda (~raeda@72.49.219.33)
[16:27:46] *** Joins: mason (~mason@redhat/mason)
[16:27:46] *** Joins: IUSR (sid348938@stonehaven.irccloud.com)
[16:27:46] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[16:27:46] *** Joins: jmercouris (sid438340@stonehaven.irccloud.com)
[16:27:46] *** Joins: mrcom (~msouth@99-73-215-70.lightspeed.irvnca.sbcglobal.net)
[16:27:46] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[16:27:46] *** iridium.libera.chat sets mode: +o Xach
[16:27:46] *** Joins: dbotton (sid492350@id-492350.tooting.irccloud.com)
[16:27:46] *** Joins: drmeister (sid45147@id-45147.charlton.irccloud.com)
[16:27:46] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[16:27:46] *** Joins: conjunctive (sid433686@id-433686.brockwell.irccloud.com)
[16:27:46] *** Joins: markasoftware (~quassel@107.161.26.124)
[16:27:46] *** Joins: etiago (~etiago@user/etiago)
[16:27:46] *** Joins: ullbeking (sid5364@id-5364.charlton.irccloud.com)
[16:27:46] *** Joins: luis (~luis@lisp/luis)
[16:27:46] *** Joins: z3t0 (~z3t0@107-159-10-134.on.dsl.ebox.net)
[16:27:46] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[16:27:46] *** Joins: hubvu (sid495858@id-495858.tinside.irccloud.com)
[16:27:46] *** Joins: cpape` (~user@2a01:4f9:c010:632d::1)
[16:27:46] *** Joins: deck4rd (~deckard@ec2-3-129-211-221.us-east-2.compute.amazonaws.com)
[16:27:46] *** Joins: pieguy128 (~pieguy128@bas1-montreal02-65-92-163-194.dsl.bell.ca)
[16:27:46] *** Joins: djuber` (~user@65.79.128.64)
[16:27:46] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[16:27:46] *** Joins: pjb (~pjb@user/pjb)
[16:27:46] *** Joins: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113)
[16:27:46] *** Joins: jasom (~aidenn@2600:8802:7fa0:b00:69c9:7281:b072:31aa)
[16:27:46] *** Joins: ^[ (~user@user//x-8473491)
[16:27:46] *** Joins: robin (~robin@user/terpri)
[16:27:46] *** Joins: flip214 (~marek@user/flip214)
[16:27:46] *** Joins: beach (~user@2a01:cb19:150:3400:bf91:f21a:87da:7f64)
[16:27:46] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[16:27:46] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[16:27:46] *** Joins: hirez (~hirez@104.128.237.40)
[16:27:46] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[16:27:46] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[16:27:46] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[16:27:46] *** Joins: jdz (~jdz@185.23.160.114)
[16:27:46] *** Joins: phadthai (mmondor@ginseng.pulsar-zone.net)
[16:27:46] *** Joins: spec (~mrSpec@user/spec)
[16:27:46] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[16:27:46] *** Joins: sgithens (sid10659@id-10659.brockwell.irccloud.com)
[16:27:46] *** Joins: xantoz (~tewi_inab@c-c0bae255.013-124-73746f25.bbcust.telenor.se)
[16:27:46] *** Joins: fishfinger_ (~fishfinge@178.62.22.133)
[16:27:46] *** Joins: kagevf (~jfh@ip68-224-125-162.lv.lv.cox.net)
[16:27:46] *** Joins: gabc (~gabc@user/gabc)
[16:27:46] *** Joins: commandoline_ (~commandol@ubuntu/member/commandoline)
[16:27:46] *** Joins: pok (~pok@user/pok)
[16:27:46] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[16:27:46] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[16:27:46] *** Joins: lonjil (~quassel@user/lonjil)
[16:27:46] *** Joins: hexology- (~hexology@user/hexology)
[16:27:46] *** Joins: jcowan (sid325434@id-325434.charlton.irccloud.com)
[16:27:46] *** Joins: jhi (sid81469@id-81469.tooting.irccloud.com)
[16:27:46] *** iridium.libera.chat sets mode: +o luis
[16:27:46] *** Joins: ChanServ (ChanServ@services.libera.chat)
[16:27:46] *** Joins: jemoka (~jemoka@user/jemoka)
[16:27:46] *** Joins: fe[nl]ix (~quassel@2a01:4f8:200:2425::adda)
[16:27:46] *** Joins: cross (~cross@spitfire.i.gajendra.net)
[16:27:46] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[16:27:46] *** Joins: cheers (user@2600:3c00::f03c:91ff:fe1c:3c39)
[16:27:46] *** Joins: alanz (sid110616@id-110616.highgate.irccloud.com)
[16:27:46] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[16:27:46] *** Joins: skempf (~Kabriel@user/kabriel)
[16:27:46] *** Joins: antoszka (~antoni@rozalia.antoszka.pl)
[16:27:46] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[16:27:46] *** Joins: Fade (fade@outrider.deepsky.com)
[16:27:46] *** Joins: sukaeto (~sukaeto@sharona.moonpearltech.com)
[16:27:46] *** Joins: loke (~loke@junk.nocrew.org)
[16:27:46] *** Joins: phoe (~phoe@user/phoe)
[16:27:46] *** Joins: stylewarning (sid241636@id-241636.brockwell.irccloud.com)
[16:27:46] *** Joins: |3b| (bbb@user/3b/x-2324788)
[16:27:46] *** Joins: pl (sid98063@id-98063.brockwell.irccloud.com)
[16:27:46] *** Joins: travv0 (sid293381@user/travv0)
[16:27:46] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[16:27:46] *** iridium.libera.chat sets mode: +ooo ChanServ fe[nl]ix pl
[16:27:50] *** Joins: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4)
[16:27:50] *** Joins: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a)
[16:27:50] *** Joins: ecraven (ecraven@user/nex)
[16:27:50] *** Joins: wheelsucker (~user@2600:8801:8c03:1f00::8165)
[16:27:50] *** Joins: Vultyre (~vultyre@user/vultyre)
[16:27:50] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[16:27:50] *** Joins: SAL9000 (~SAL9000@shirakumo/sal9000)
[16:27:50] *** Joins: palter (sid27521@id-27521.brockwell.irccloud.com)
[16:27:50] *** Joins: minion (~minion@common-lisp.net)
[16:27:50] *** Joins: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net)
[16:27:50] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[16:27:50] *** Joins: amk (~amk@176.61.106.150)
[16:27:50] *** Joins: susam (~susam@user/susam)
[16:27:50] *** Joins: fpc (~fpc@user/fpc)
[16:27:50] *** Joins: dale (dale@user/dale)
[16:27:50] *** Quits: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a) (Remote host closed the connection)
[16:27:50] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Max SendQ exceeded)
[16:27:57] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[16:28:00] *** Joins: frgo (~frgo@p200300deef181d0098d569c215f9f88e.dip0.t-ipconnect.de)
[16:28:00] *** Joins: scymtym (~user@2001:638:504:20e5:e269:db37:7338:d52)
[16:28:00] *** Joins: Alfr (~Alfr@user/alfr)
[16:28:00] *** Joins: retropikel (~retropike@2001:999:200:1f35:f194:c1b5:4044:270e)
[16:28:00] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[16:28:00] *** Joins: energizer (~energizer@user/energizer)
[16:28:00] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[16:28:00] *** Joins: jgkamat (~jay@user/jay)
[16:28:00] *** Joins: easye (~user@2a01:4f8:200:8261::b0)
[16:28:00] *** Joins: froggey-1 (froggey@2a01:7e00::f03c:92ff:fe7c:ec68)
[16:28:00] *** Joins: Kabouik (~Kabouik@user/kabouik)
[16:28:00] *** Joins: spacebat1 (spacebat@spot.ubermonkey.net)
[16:28:00] *** Joins: dcx (~dcx@user/dac)
[16:28:00] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[16:28:00] *** Joins: les (znc@user/les)
[16:28:00] *** Joins: gko (~user@user/gko)
[16:28:00] *** Joins: jackdaniel (~jack@user/jackdaniel)
[16:28:00] *** iridium.libera.chat sets mode: +o jackdaniel
[16:28:11] *** Joins: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a)
[16:29:21] *** Joins: phantomics (~phantomic@71-218-228-208.hlrn.qwest.net)
[16:30:44] *** Quits: luis` (~luismboma@2001:470:69fc:105::cc7) (Ping timeout: 252 seconds)
[16:30:44] *** Quits: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad) (Ping timeout: 252 seconds)
[16:31:08] *** Quits: akater[m] (~akatermat@2001:470:69fc:105::ccef) (Ping timeout: 272 seconds)
[16:31:15] *** Quits: katco (~katco@2001:470:69fc:105::2b8) (Ping timeout: 268 seconds)
[16:31:24] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 276 seconds)
[16:31:25] *** Quits: hayley (~theemacss@user/hayley) (Ping timeout: 276 seconds)
[16:31:25] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Write error: Connection reset by peer)
[16:31:45] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[16:33:45] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Read error: Connection reset by peer)
[16:34:41] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[16:35:27] *** Quits: jimka (~user@2a01:e0a:26a:f400:dc7b:c899:c9ab:a576) (Remote host closed the connection)
[16:35:28] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:35:46] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[16:39:25] *** Joins: icepic1984[m] (~icepic198@2001:470:69fc:105::cd23)
[16:51:31] *** Joins: fizbin_ (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7)
[16:52:26] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[16:53:42] *** Quits: fizbin (~dtm@2601:82:c380:87a:4c5d:200c:15cb:80b4) (Ping timeout: 256 seconds)
[17:05:39] *** ggoes_ is now known as ggoes
[17:06:00] *** Quits: ggoes (~gregf@pool-72-69-95-105.nycmny.fios.verizon.net) (Changing host)
[17:06:00] *** Joins: ggoes (~gregf@fsf/staff/ggoes)
[17:06:26] *** Joins: akater[m] (~akatermat@2001:470:69fc:105::ccef)
[17:08:38] *** Joins: JooTvora[m] (~joaotavor@2001:470:69fc:105::b9ad)
[17:09:51] *** Joins: hayley (~theemacss@2001:470:69fc:105::234)
[17:15:28] *** Quits: hayley (~theemacss@2001:470:69fc:105::234) (Changing host)
[17:15:28] *** Joins: hayley (~theemacss@user/hayley)
[17:18:45] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[17:21:17] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[17:26:35] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[17:27:35] *** Joins: Bike (~Glossina@71.69.170.70)
[17:27:35] *** ChanServ sets mode: +o Bike
[17:33:57] *** Joins: Mrtn[m] (~mrtn@2001:470:69fc:105::1f44)
[17:45:48] *** Joins: alphapapa[m] (~alphapapa@2001:470:69fc:105::18b7)
[17:45:50] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[17:46:06] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[17:55:31] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[17:58:34] *** Joins: hafat (~hafat@95.70.167.173)
[18:00:50] *** Joins: luis` (~luismboma@2001:470:69fc:105::cc7)
[18:09:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:10:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:10:22] *** Quits: hafat (~hafat@95.70.167.173) (Quit: Leaving)
[18:17:37] *** Quits: fizbin_ (~dtm@2601:82:c380:87a:d8e5:78df:ef65:49a7) (Ping timeout: 245 seconds)
[18:35:13] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[18:46:32] <jackdaniel> oh, I'm late to the party. :)
[18:46:32] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[18:47:32] <jackdaniel> beach: basically correct. I don't consider my common lisp expierenced on par with other major implementations maintainers
[18:48:13] <jackdaniel> (and yes, asking here allowed me to avoid numerous pitfalls)
[18:50:20] *** Quits: sander (~sander@user/sander) (Remote host closed the connection)
[18:51:58] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[18:55:09] *** Joins: sander (~sander@user/sander)
[19:03:50] <beach> Thanks for confirming.
[19:05:01] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[19:05:25] <beach> Taking on something like that is a great way of learning.
[19:09:43] *** Joins: derelict (~derelict@user/derelict)
[19:09:45] *** Joins: Josh_2 (~user@37.25.47.130)
[19:10:30] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:24:53] *** Joins: dlowe (~dlowe@user/dlowe)
[19:26:30] *** Joins: copec (~copec@home.unaen.org)
[19:40:57] *** Quits: Cymew (~ante@host-90-235-68-191.mobileonline.telia.com) (Ping timeout: 268 seconds)
[20:00:32] <mfiano> Anyone know of a function that groups a sequence into chunks of length N? Like: (foo #(1 2 3 4 5 6) 3) ;=> #((1 2 3) (4 5 6)). Behavior when sequence isn't evenly divisible doesn't matter. Inner sequence type also doesn't matter.
[20:01:06] <mariari> group-by, I know the let over lambda book defines it and it's in the quicklisp package
[20:01:07] <mfiano> I see serapeum has #'batches, but I'd ideally not like to pull in 35 transitive deps for one use, and probably is too general anyway.
[20:01:59] <mariari> https://quickref.common-lisp.net/let-over-lambda.html#go-to-the-LET_002dOVER_002dLAMBDA_2236_2236GROUP-function
[20:02:06] <mfiano> Ah I might have it in my utility library if it's in LoL
[20:03:06] <mariari> yeah I tend to have a version in my own standard library for code which wants to play with ideas fast
[20:03:55] <mfiano> Thanks
[20:04:04] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:8186:40cc:d89:9651) (Ping timeout: 258 seconds)
[20:05:17] *** d4ryus2 is now known as d4ryus
[20:05:59] <mfiano> Ah it's #'group, and it's specific to lists
[20:06:06] <mfiano> bummer
[20:06:12] <mfiano> Guess I'll write my own
[20:06:27] <mariari> you could generalize it easily enough, but yeah
[20:06:48] <hexology-> is the name `:module` in asdf meant to signify something other than "a directory on the filesystem"? i'm curious about the choice of calling it `:module` as opposed to `:directory`
[20:06:57] *** hexology- is now known as hexology
[20:07:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:08:25] <mfiano> hexology: Yes, it takes a pathname designator
[20:08:41] <mfiano> Not that the asd itself is the root module
[20:08:44] <mfiano> Note*
[20:10:38] <mfiano> Technically a module is just a collection of components
[20:10:59] <hexology> i see
[20:11:02] <mfiano> A module of file components can be thought of as a directory
[20:11:25] <mfiano> Note that you don't need modules to represent directories
[20:11:26] <hexology> so what does the pathname designator signify then? is i a "prefix" for all components in the module?
[20:11:28] <hexology> is it*
[20:11:40] <mfiano> A file component can have a relative path containing the directory
[20:12:20] <mfiano> The difference is minor, and most of the differences are due to how asdf detects changes for recompiling the system
[20:12:49] <jcowan> beach: Note that Kyoto CL (which is an ancestor of both ECL and GCL) was written by people isolated from the CL community as it was at the time.  At least some style violations may descend from then.
[20:12:57] <mfiano> When a file's timestamp is modified, the next time that system is loaded, that file and files thereafter in the same module will be recompiled, assuming a serial load order
[20:13:48] <mfiano> hexology: (:module "foo" :components ((:file "bar))) is the similar to (:file "foo/bar")
[20:13:52] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[20:14:43] <hexology> i see, that helps clarify. is this documented somewhere?
[20:14:51] <mfiano> Except for change detection and some other things you may want to do that are only possible at the module level
[20:15:24] <mfiano> The asd system itself is the toplevel module by the way. You can think of DEFSYSTEM as being :MODULE
[20:15:35] <hexology> that makes sense now that you've explained it
[20:15:35] <beach> jcowan: I see.  But the implementation we were talking about was CCL.
[20:15:48] <jcowan> Oh, my bad
[20:16:04] <hexology> i see that several guides suggest putting source under "src/", and declaring src/ as a module. is that still considered best practice?
[20:16:04] <mfiano> hexology: I believe it's all in the manual. That's how I learned years ago anyway
[20:16:43] <hexology> i did a search for "component type", "module", etc. saw a bunch of "what" but not "why", although there might be another manual (i was searching in the reference manual)
[20:16:53] <mfiano> hexology: It depends really. I usually do that except make the root module's :pathname point to "src" instead of putting everything in another root module
[20:17:02] <mfiano> I'll give an example
[20:17:42] <mfiano> https://github.com/mfiano/cricket/blob/master/cricket.asd
[20:18:28] <mfiano> note line 15. That is as if the root files were in a module called "src". But since the asd itself is the root module, you can just point the pathname it starts at
[20:18:46] <hexology> ah, and you use a dotted name for the test system
[20:18:50] <hexology> i like this, thanks for sharing
[20:19:01] <mfiano> I tend to, yes
[20:19:03] <mfiano> Sure!
[20:20:01] *** Joins: selwyn (~selwyn@user/selwyn)
[20:22:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:22:33] *** Quits: selwyn_ (~selwyn@user/selwyn) (Ping timeout: 248 seconds)
[20:26:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:33:22] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:37:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:38:18] *** Quits: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:39:05] *** Joins: cognemo (~cognemo@cpe-46-164-31-76.dynamic.amis.net)
[20:48:18] *** Joins: selwyn_ (~selwyn@user/selwyn)
[20:51:16] *** Quits: selwyn (~selwyn@user/selwyn) (Ping timeout: 268 seconds)
[20:53:37] *** Quits: Patternm1ster (~georg@li1192-118.members.linode.com) (Quit: leaving)
[20:53:54] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 258 seconds)
[20:56:51] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[20:57:39] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[20:59:11] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[21:01:00] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 272 seconds)
[21:10:46] *** Joins: Guest5143 (~Guest51@72.92.132.99)
[21:15:21] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[21:19:52] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:26:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[21:27:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:32:45] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:35:08] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:39:35] *** Joins: Guest12 (~Guest12@72.92.132.99)
[21:40:11] <santiagopim> Hi! Any application that uses log4cl to show some log to the user ? I'd like to add some feedback to my users and need example code.
[21:44:06] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:46:18] *** Quits: d_run (sid83858@id-83858.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:47:30] *** Quits: IUSR (sid348938@stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:48:18] *** Quits: jmercouris (sid438340@stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:48:20] *** Quits: iisi (sid19824@id-19824.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[21:48:38] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[21:49:20] <Josh_2> When I want output to a stream other than whatever the log4cl uses I just write a new format and capture the output through lexical binding instead
[21:52:41] *** Quits: lad (~lad@user/lad) (Ping timeout: 248 seconds)
[21:54:46] <santiagopim> Thanks. I'm trying to use the log4cl hierarchy to show different feedback levels on demand.
[21:55:20] <santiagopim> May be too complicated ... Don't know.
[21:57:42] *** Joins: Shambles (~shambles@user/shambles)
[21:57:54] *** Joins: iisi (sid19824@stonehaven.irccloud.com)
[21:58:03] *** Parts: Shambles (~shambles@user/shambles) ()
[22:02:14] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:05:45] *** Joins: IUSR (sid348938@stonehaven.irccloud.com)
[22:09:51] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:11:14] *** Joins: jmercouris (sid438340@id-438340.stonehaven.irccloud.com)
[22:14:57] *** Joins: d_run (sid83858@id-83858.stonehaven.irccloud.com)
[22:15:16] *** childlikempress is now known as moon-child
[22:25:40] *** Quits: raeda (~raeda@72.49.219.33) (Quit: Leaving)
[22:33:52] *** Joins: notzmv (~zmv@user/notzmv)
[22:35:59] *** Joins: gaqwas (~john@dynamic-095-118-114-085.95.118.pool.telefonica.de)
[22:39:24] *** Joins: shka (~herr@109.231.62.239)
[22:40:44] *** Joins: karlosz (~karlosz@router.cloyne.org)
[22:44:01] *** Quits: dim (~dimlibera@212.85.154.178) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[22:46:10] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[22:47:05] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[22:47:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:47:39] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:51:53] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[22:52:44] *** Quits: karlosz (~karlosz@router.cloyne.org) (Ping timeout: 258 seconds)
[22:54:42] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:56:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:00:32] *** Quits: nirnam (~nirnam@1.46.28.192) (Remote host closed the connection)
[23:03:24] *** Quits: dlowe (~dlowe@user/dlowe) (Remote host closed the connection)
[23:03:24] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:04:06] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[23:05:08] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:05:08] *** Quits: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:05:35] *** Joins: amb007 (~a_bakic@87.116.175.36)
[23:10:01] *** Quits: amb007 (~a_bakic@87.116.175.36) (Ping timeout: 248 seconds)
[23:10:41] *** Quits: loke (~loke@junk.nocrew.org) (Ping timeout: 252 seconds)
[23:11:43] *** Joins: amb007 (~a_bakic@net233-35-245-109.mbb.telenor.rs)
[23:12:29] <lisp123> If a local variable exists with the same name as a global variable, a
[23:12:29] <lisp123> lexical closure will typically refer to the local variable.
[23:12:42] <lisp123> I got the above note somewhere
[23:12:48] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[23:13:39] <lisp123> Is that true?
[23:14:35] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 258 seconds)
[23:15:04] <Guest12> lexical scoping rules apply, so nearest binding wins
[23:15:26] <lisp123> defvar will define a special variable. This declaration is global and also has effect on let bindings. That's the reason that by convention these variables are written as *foo*. If you have ever defined x with defvar, it is declared special and there is no way to declare it lexical later.
[23:16:00] <lisp123> Guest12: That's what I thought. I guess what is so 'special' about special then?
[23:16:15] <shka> lisp123: special declaration
[23:16:17] <lisp123> (I used to know the answer but its been a while)
[23:17:01] <Bike> whether a variable is treated as dynamic (special) or lexical is a lexical property, confusingly enough. you can change it in a lexical scope with a SPECIAL declaration. global special proclamations (as defvar does) are extra special in that they make other bindings special too
[23:17:02] <shka> "special" variable binds value for everything under the stack
[23:17:22] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[23:17:45] <shka> special refers to the scope, not to the binding form
[23:17:49] <shka> that's how i think about it
[23:18:15] <lisp123> Bike & shka: so if we change the value of a special variable, does it affect the value of the global variable?
[23:18:28] <Alfr> lisp123, maybe.
[23:18:30] <lisp123> (if done within a let which binds to the same symbol)
[23:18:37] <Bike> in that case no.
[23:18:52] <shka> local vs special is false dichotomy
[23:19:09] <Bike> when a variable is special, operations on it (both reads and writes) use the closest enclosing binding.
[23:19:20] <Bike> if you really want to specifically mess with the global value you can use symbol-value.
[23:19:48] <jcowan> THe explanations in the CLtL chapter "Scope and Extent" are extremely helpful, I think
[23:19:59] <lisp123> jcowan: yeah they are, I should re-read them
[23:20:56] <lisp123> I guess I have to read the stuff carefully again, as there isn't a simple rule to apply (have to factor in both scope & extent)
[23:21:08] <lisp123> Thanks Bike & shka
[23:22:25] <shka> what is not false dichotomy is perhaps lexical scope vs the special scope
[23:22:33] <shka> it is all about the scope
[23:23:11] <jcowan> CL isn't entirely orthogonal, though; short of symbol-macro tricks, all global variables are dynamic.  In ISLisp, this isn't true: there are separate namespaces, define forms, and let forms for dynamic and lexical variables.
[23:24:24] <jcowan> defglobal/defdynamic, let/dynamic-let.
[23:24:53] <Guest12> The lexical scope works like you might expect in any langauge, it's the dynamic extent and associated binding stack that is new to non-lispers.
[23:27:37] *** Quits: iisi (sid19824@stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:28:09] *** Joins: iisi (sid19824@id-19824.stonehaven.irccloud.com)
[23:28:22] <Guest12> If you run this bit, *x* comes up 2 because of this principle.
[23:28:24] <Guest12> (defvar *x* 1)
[23:28:25] <Guest12> (defun y () (format t "*x* = ~s~%" *x*))
[23:28:25] <Guest12> (let ((*x* 2))
[23:28:26] <Guest12>   (y)
[23:28:26] <Guest12>   *x*)
[23:28:27] <Guest12> \
[23:28:40] <Guest12> (defvar *x* 1)
[23:28:41] <Guest12> (defun y () (format t "*x* = ~s~%" *x*))
[23:28:41] <Guest12> (let ((*x* 2))
[23:28:42] <Guest12>   (y)
[23:28:42] <Guest12>   *x*)
[23:28:43] <Josh_2> bruh
[23:28:47] <Guest12> Dang, can't get the emojis out.
[23:28:50] <Guest12> New to this.
[23:29:00] <Josh_2> can you use a paste if you are going to multiline
[23:29:13] *** Quits: IUSR (sid348938@stonehaven.irccloud.com) (Ping timeout: 248 seconds)
[23:29:26] <Guest12> Yeah, apologies, haven't used this web client before
[23:29:56] <Josh_2> Np
[23:31:10] *** Joins: tfeb (~tfb@109.249.185.60)
[23:32:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[23:36:20] <Alfr> Guest12, but your global variable *x* still have 1 for its value afterward.
[23:36:46] <Guest12> Yes, but that's because the '2' binding is no longer active.
[23:37:12] <Alfr> Yes.
[23:37:56] <Guest12> I don't know of a good tutorial for this, I'm out of practice.  I'm sure there is one, but it isn't the hyperspec ;-)
[23:38:44] <Guest12> Thought there is quite a bit of useful content on the subject in the hyperspec, it's hard to find.
[23:39:16] <Alfr> Guest12, maybe clhs 3.1.1 ?
[23:39:22] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:42:25] *** Joins: IUSR (sid348938@id-348938.stonehaven.irccloud.com)
[23:45:03] *** Quits: tfeb (~tfb@109.249.185.60) (Quit: died)
[23:46:42] *** Joins: tfeb (~tfb@109.249.185.60)
[23:47:09] *** Joins: hafat (~hafat@159.146.87.68)
[23:48:54] *** Quits: tfeb (~tfb@109.249.185.60) (Client Quit)
[23:49:15] *** Joins: dsk (~dsk@user/dsk)
[23:53:46] *** Quits: Guest12 (~Guest12@72.92.132.99) (Ping timeout: 246 seconds)
[23:57:21] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:58:36] *** Joins: Guest12 (~Guest12@72.92.132.99)
