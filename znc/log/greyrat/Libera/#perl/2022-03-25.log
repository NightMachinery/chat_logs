[00:01:42] * GumbyPAN CPAN Upload: GraphQL-0.54 by ETJ https://metacpan.org/release/ETJ/GraphQL-0.54
[00:02:03] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[00:04:52] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[00:06:07] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[00:06:11] *** Joins: damaya (~damaya@ip184-183-251-172.ri.ri.cox.net)
[00:07:20] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[00:13:13] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[00:13:51] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:1adc:3d2:276:f38c)
[00:17:27] *** Quits: ekathva (~ekathva@mobile-access-b04849-173.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:24:47] *** Quits: damaya (~damaya@ip184-183-251-172.ri.ri.cox.net) (Ping timeout: 256 seconds)
[00:27:37] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:1adc:3d2:276:f38c) (Ping timeout: 240 seconds)
[00:28:07] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[00:29:53] *** Quits: Su-Shee (~Susanne@32-109-142-46.pool.kielnet.net) (Ping timeout: 256 seconds)
[00:31:22] *** Joins: Su-Shee (~Susanne@i5E862DA6.versanet.de)
[00:31:45] * GumbyPAN CPAN Upload: Net-DNS-Resolver-Unbound-1.10 by RWF https://metacpan.org/release/RWF/Net-DNS-Resolver-Unbound-1.10
[00:36:06] *** Joins: ekathva (~ekathva@2001:999:409:7be:a7a9:6f90:81b8:5d9e)
[00:39:00] *** Joins: damaya (~damaya@ip184-183-251-172.ri.ri.cox.net)
[00:41:46] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:41:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:42:13] *** Quits: timlegge_ (~quassel@134.41.65.158) (Ping timeout: 250 seconds)
[00:42:29] *** Joins: timlegge (~quassel@134.41.65.158)
[00:44:06] *** Joins: tybalt89_ (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617)
[00:44:29] *** Joins: Trigon (~reuben@144.39.114.115)
[00:45:17] *** Joins: jpn (~jpn@user/jpn)
[00:50:38] *** Joins: Guest29 (~Guest29@103.43.112.97)
[00:50:48] *** Quits: tybalt89 (~rick@2600:8800:8d00:8100:2e0:4cff:fe68:617) (Ping timeout: 260 seconds)
[00:51:11] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Ping timeout: 256 seconds)
[00:51:48] * GumbyPAN CPAN Upload: Dpkg-1.21.3 by GUILLEM https://metacpan.org/release/GUILLEM/Dpkg-1.21.3
[00:54:04] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:54:24] *** Quits: timlegge (~quassel@134.41.65.158) (Quit: No Ping reply in 180 seconds.)
[00:54:33] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[00:55:02] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:55:09] <Guest29> Hi I had doubt
[00:55:11] <Guest29> Actually I have Active State perl installed in my system. I am running a shell script through Git bash . This shell script contains a perl command. I want to execute the perl command in shell script through active state perl (that I installed) but git bash which is running shell script is executing it through it's own perl ( which is installed at
[00:55:12] <Guest29> C:\Program Files\Git\usr\bin\perl.exe)
[00:55:39] *** Joins: timlegge (~quassel@134.41.65.158)
[00:57:03] *** Joins: Guest2918 (~Guest29@103.43.112.97)
[00:58:08] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Max SendQ exceeded)
[00:58:15] <Guest29> Anyone if can help
[00:58:17] <Guest29> ?
[00:58:37] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:59:14] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:3dd:a551:1de8:65bb)
[00:59:50] <Guest29> Actually I have Active State perl installed in my system. I am running a shell script through Git bash . This shell script contains a perl command. I want to execute the perl command in shell script through active state perl (that I installed) but git bash which is running shell script is executing it through it's own perl ( which is installed at
[00:59:51] <Guest29> C:\Program Files\Git\usr\bin\perl.exe)
[01:01:03] *** Quits: Guest2918 (~Guest29@103.43.112.97) (Client Quit)
[01:01:25] *** Quits: ekathva (~ekathva@2001:999:409:7be:a7a9:6f90:81b8:5d9e) (Ping timeout: 240 seconds)
[01:01:57] *** Joins: ekathva__ (~ekathva@mobile-access-b04811-83.dhcp.inet.fi)
[01:03:23] *** Quits: ekathva__ (~ekathva@mobile-access-b04811-83.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:03:42] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 272 seconds)
[01:04:47] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:3dd:a551:1de8:65bb) (Ping timeout: 256 seconds)
[01:04:49] *** Joins: ekathva__ (~ekathva@2001:999:409:7be:f8cc:6095:d7e0:c276)
[01:05:39] <gordonfish> Guest29: In your shell script, just add the path to the activestate perl to the head of PATH
[01:06:15] <Guest29> had done it in .bashrc file in home directory
[01:06:18] *** Quits: ekathva__ (~ekathva@2001:999:409:7be:f8cc:6095:d7e0:c276) (Client Quit)
[01:06:41] <Guest29> PATH=/C/Perl/bin:$PATH
[01:06:45] <Guest29> like this
[01:06:56] <Guest29> but still there is issue
[01:08:08] *** Quits: martinus__ (~martin@139.30.201.77.rev.sfr.net) (Ping timeout: 272 seconds)
[01:08:12] <tirnanog> in your interactive instance of bash, run "type -p perl". which path is shown?
[01:08:25] <tirnanog> oops. "type -a perl", I mean.
[01:09:59] <Guest29> perl is /C/Perl/bin/perl
[01:09:59] <Guest29> perl is /C/Perl/bin/perl
[01:10:00] <Guest29> perl is /C/Perl/bin/perl
[01:10:00] <Guest29> perl is /usr/bin/perl
[01:10:01] <Guest29> perl is /bin/perl
[01:10:01] <Guest29> perl is /usr/bin/perl
[01:10:02] <Guest29> perl is /c/Perl/bin/perl
[01:10:02] <Guest29> perl is /bin/perl
[01:10:12] <gordonfish> If the problem is with paths, in that environment, instead of writing just C:\path\to\foo write 'C:\path\to\foo' (or C:\\path\\to\\foo, but the single/double quoted is simpler.)
[01:11:02] <tirnanog> ok (use a pastebin next time though). anyway, that proves that C:/Perl/bin/perl is preferred.
[01:11:11] <Guest29> in .bashrc, I have written this
[01:11:13] <gordonfish> For me, testing in git perl on a windows vm, I only have /bin/perl and /usr/bin/perl, so it looks like you're setting PATH multiple times
[01:11:15] <tirnanog> but try the same thing in your script just before the point at which perl is supposed to execute.
[01:11:33] <Guest29> which thing
[01:11:51] <tirnanog> I would do: declare -p PATH; type perl
[01:11:55] <tirnanog> (in the script)
[01:11:57] <tirnanog> see what it says.
[01:12:20] <tirnanog> do that just before the point at which you try to run ActiveState perl.
[01:12:21] <Guest29> declare -p path?
[01:12:24] <tirnanog> no.
[01:12:31] <Guest29> I had to type this?
[01:12:41] <tirnanog> put it in your script.
[01:13:01] <tirnanog> the purpose is to determine what's actually happening in your script, just before you try to call perl.
[01:13:23] <Guest29> I tried where perl in sh script
[01:13:29] <Guest29> it gives git perl's path
[01:13:37] <tirnanog> ok. are you going to try what was suggested?
[01:14:01] <Guest29> Okay, please write what I had to write in script
[01:14:07] <tirnanog> declare -p PATH; type perl
[01:14:08] <Guest29> I will copy that exactly
[01:14:16] <tirnanog> (just before the invocation of perl itself)
[01:14:20] <Guest29> ok
[01:14:23] <Guest29> wait a min
[01:14:26] <tirnanog> sure.
[01:14:28] *** Quits: magla (~gelignite@55d40a33.access.ecotel.net) (Quit: Stay safe!)
[01:17:42] <Guest29> type perl is giving output as perl is /usr/bin/perl
[01:17:57] <tirnanog> that's one thing. what about the output of declare?
[01:18:41] *** Quits: veesh (~veesh@5.28.157.20) (Ping timeout: 245 seconds)
[01:18:52] <Guest29> declare -x PATH="/mingw64/bin:/usr/bin:(remaining path)
[01:19:05] <tirnanog> alright. so the PATH is being munged somewhere.
[01:19:31] <Guest29> in shell script it gives preference to active perl
[01:19:38] <tirnanog> or, perhaps, you are not launching the script as a child of the instance of bash where you change PATH in .bashrc (so the changes are not inherited).
[01:19:52] <Guest29> sorry in bash, it gives preference to active perl
[01:19:57] <tirnanog> yes.
[01:20:25] <Guest29> I write in .bashrc
[01:20:26] <tirnanog> so it's one of those two things. either PATH is being modified somewhere in the script or you're not running it as a child process of the process where your PATH changes are made.
[01:20:32] <tirnanog> yes, I know. there's no need to repeat it.
[01:21:01] <Guest29> it's different git bash where the script is executed
[01:21:13] <tirnanog> ok. that would explain it then.
[01:21:34] <tirnanog> maybe. how are you launching the script exactly?
[01:21:41] <tirnanog> I mean, let's say you want to run it now. what do you do?
[01:21:48] <Guest29> actually through jenkins job
[01:22:43] <tirnanog> .bashrc is normally only sourced for interactive shells. either figure out how to customize PATH in the parent process (maybe in jenkins itself) or just do the simple thing and set PATH inside the script.
[01:23:39] <Guest29> so, I had to write PATH=/C/Perl/bin:$PATH inside script?
[01:23:47] <tirnanog> there's nothing wrong with putting PATH=/C/Perl/bin:$PATH in the script itself for example. even if the path were to be duplicated, it is completely harmless.
[01:23:49] <tirnanog> yes.
[01:24:01] <Guest29> and remove the statement that you told before?
[01:24:04] <tirnanog> yep.
[01:24:10] <Guest29> ok let me try
[01:26:18] *** Joins: proller (~p@2a02:6b8:b081:b65d::1:15)
[01:27:30] <tirnanog> naturally, make sure you modify PATH before you first invoke perl in the script. (I would put a PATH modification at the top of the script, personally)
[01:27:51] <Guest29> thanks bro
[01:27:54] <Guest29> it worked
[01:27:57] <tirnanog> cool.
[01:28:19] <Guest29> thank you so much, it helped me save my lot of time
[01:28:32] <Guest29> one last thing will it be a reliable solution
[01:28:39] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[01:28:59] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[01:29:23] *** Joins: n1to (~n1to@user/n1to)
[01:29:30] <tirnanog> as long as activestate perl remains installed at /C/Perl, it will be.
[01:29:52] <tirnanog> otherwise, it would not find it there and fall back to the msys2 (git-bash) version again.
[01:31:08] *** Joins: veesh (~veesh@77.137.131.199)
[01:32:00] *** Joins: whynot (~whynot@88.155.37.163)
[01:32:36] *** Quits: veesh (~veesh@77.137.131.199) (Remote host closed the connection)
[01:34:04] *** Joins: veesh (~veesh@77.137.131.199)
[01:37:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:39:10] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[01:39:48] *** Quits: veesh (~veesh@77.137.131.199) (Ping timeout: 272 seconds)
[01:40:37] *** Quits: Guest29 (~Guest29@103.43.112.97) (Quit: Client closed)
[01:41:29] *** Joins: PapaChub (~PapaChub@vzw-54.parabon.com)
[01:43:33] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[01:43:50] <vms14> https://termbin.com/nmr9 I have a debug function
[01:44:38] <vms14> but idk if there's a better way, I look at a flag and one array to see if there's a need to debug and which functions would trigger it
[01:44:52] <vms14> I'm kind of 
[01:45:32] <vms14> kind of happy, but it annoys me the fact that even if $debug is 0, the arguments to the debug function will be passed anyways from all functions
[01:46:36] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:46:54] <vms14> a guy just recommended me the smart comments module, I like the idea as if you remove the 'use' line it will be no overhead more than what a comment adds
[01:47:19] <vms14> there's a way to lock the call of a function or something?
[01:48:07] <vms14> if I overwrite the function to a blank one, I suppose the arguments will be passed anyways even if the function does nothing
[01:49:53] <vms14> I mean 'every' function I have calls that debug function passing some arguments, and sometimes they call it twice, when they do some transformation
[01:50:31] <vms14> idk if there's a better approach
[01:52:53] *** Quits: bmeneg_ (~bmeneg@131.100.62.145) (Remote host closed the connection)
[02:01:14] *** Joins: veesh (~veesh@77.137.128.37)
[02:22:31] *** Joins: morte_ (~user@190.104.116.153)
[02:31:16] <xenu> there's no need for source filters
[02:31:31] <xenu> use constant DEBUG => 0; if (DEBUG) { foo() } # zero overhead
[02:31:59] * GumbyPAN CPAN Upload: PPIx-QuoteLike-0.020_02 by WYANT https://metacpan.org/release/WYANT/PPIx-QuoteLike-0.020_02
[02:32:15] <xenu> the whole if() will be optimized out
[02:33:03] <xenu> perlbot: deparse2: use constant DEBUG => 0; if (DEBUG) { say 123 }; say 456; 
[02:33:05] <perlbot> xenu: Output at: http://perl.bot/p/h4x5d2
[02:33:21] <xenu> perlbot: deparse2: use constant DEBUG => 0; if (DEBUG) { print 123 }; print 456; 
[02:33:23] <perlbot> xenu: Output at: http://perl.bot/p/flvf17
[02:33:37] <xenu> perlbot: deparse2: use constant DEBUG => 1; if (DEBUG) { print 123 }; print 456; 
[02:33:38] <perlbot> xenu: Output at: http://perl.bot/p/qgqe4h
[02:35:18] <gordonfish> perlbot: deparse2pb: use feature qw(say); use constant DEBUG => 0; if (DEBUG) { say 123 }; say 456;
[02:35:20] <perlbot> gordonfish: /tmp/XkWiXDsX0c syntax OK␤sub BEGIN {␤    (require feature);␤    do {␤        "feature"->import("say")␤    };␤}␤use feature 'say';␤use constant ("DEBUG", 0);␤'???';␤say(456);␤
[02:35:34] <gordonfish> \perlbot: deparse: use constant DEBUG => 0; if (DEBUG) { say 123 }; say 456;
[02:35:38] <gordonfish> perlbot: deparse: use constant DEBUG => 0; if (DEBUG) { say 123 }; say 456;
[02:35:40] <perlbot> gordonfish: 456 
[02:37:11] *** Joins: Fozzworth (~Fozzworth@user/fozzworth)
[02:41:52] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[02:42:14] *** Quits: xenu (~xenu@185.238.72.13) (Quit: leaving)
[02:43:19] <PapaChub> By what sorcery does `perl -wE 'say scalar <>' /dev/null` *NOT* give an "uninitialized" warning?
[02:43:19] <PapaChub> And can I do that myself?   perl -wE 'BEGIN { package x; *main::readline = sub { <> } }; say scalar <>' /dev/null
[02:44:42] <Grinnz> PapaChub: readline doesn't return undef except on errors, for an empty file it would return empty string or no lines (but you forced scalar context, so empty string)
[02:44:48] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[02:44:48] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (Client Quit)
[02:45:02] <Grinnz> er sorry, it returns undef on eof
[02:45:30] <PapaChub> Grinnz, But `defined scalar <>` is false
[02:45:39] <Grinnz> i have no idea what you're trying to do on the second one. <> and readline are synonyms
[02:46:27] <PapaChub> I'm trying to wrap readline
[02:47:07] <Grinnz> anyway, your original code gives an undef warning for me
[02:47:18] <Grinnz> well, that's not the correct way
[02:47:31] <PapaChub>   perl -wE 'say scalar <>' /dev/null   ?
[02:47:40] <Grinnz> also wrapping readline is a bit thorny, specifically because of how <> works
[02:48:12] <Grinnz> basheval: perl -wE 'say scalar <>' /dev/null
[02:48:15] <perlbot> Grinnz: Use of uninitialized value in say at -e line 1.␤␤
[02:48:18] <PapaChub> Ooh!  This must have changed since whatever non-latest perl I've got installed
[02:48:40] <PapaChub> (5.18)
[02:48:51] <PapaChub> Damn MacOS
[02:50:06] <Grinnz> https://perldoc.perl.org/CORE#OVERRIDING-CORE-FUNCTIONS if you want to override readline globally, this will also affect <> (so don't use <> in your override or you'll infinite loop)
[02:50:06] <Paperbot> Link title(s): [ CORE - Namespace for Perl's core routines - Perldoc Browser ]
[02:50:35] <Grinnz> also since it's global, you have to account for any way that readline could get called, such as with a filehandle
[02:51:20] *** Quits: n1to (~n1to@user/n1to) (Quit: Leaving)
[02:52:41] <PapaChub> Thorny indeed:  https://l.perl.bot/raw/rdwcom
[02:54:32] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 272 seconds)
[02:56:01] <vms14> xenu I don't have any if in the caller functions
[02:56:10] <vms14> but inside the debug function
[02:56:32] <vms14> the functions all call debug without worrying if there is a debug flag or not
[02:57:12] <vms14> but didn't knew perl was able to optimize out some ifs, it does only with constants?
[02:57:50] <vms14> this is the code, I've taken away only the debug function to show it
[02:58:03] <vms14> https://termbin.com/4wmr
[02:59:02] <vms14> as you see I call debug() in all functions, I choose if they'll be traced or not with a @debug array
[02:59:36] <vms14> idk if the "compiler" is able to get rid of the function calls somehow
[03:00:17] <vms14> but as you see even if I make a stub function to override debug() the arguments will be given anyways, even if the function is sub {;}
[03:01:11] *** Quits: morte_ (~user@190.104.116.153) (Read error: Connection reset by peer)
[03:01:58] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[03:02:01] <vms14> but is nice to know the compiler is able to take out those ifs, I just wonder if would only work with constants, I could change it for that, but it forces me to add an if for every function
[03:02:17] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[03:02:17] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 240 seconds)
[03:04:10] *** Joins: dansan (~daniel@75.81.148.51)
[03:05:00] *** Joins: Trigon (~reuben@144.39.114.115)
[03:05:07] <tirnanog> persumably, it can do so for constants because they're constant. there is no need to inspect the value during runtime, as would be the case for a scalar variable.
[03:05:16] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[03:07:08] *** Joins: deadmarshal_ (~deadmarsh@95.38.229.223)
[03:09:19] <vms14> ahah xenu wasn't there
[03:11:31] *** Quits: deadmarshal_ (~deadmarsh@95.38.229.223) (Ping timeout: 260 seconds)
[03:12:03] <vms14> https://termbin.com/4wmr xenu this is the code, the if is inside the debug() function, not the caller, all the functions call debug() and give it arguments to it. The only thing that annoys me is the fact I'm calling the function no matter what and giving it arguments even if the function won't use them
[03:12:07] *** Joins: willthechill (~willthech@2603-8080-ba00-e489-fd54-303b-3818-e573.res6.spectrum.com)
[03:12:21] <mst> vms14: it'll call it
[03:12:27] *** Joins: k8yun (~k8yun@user/k8yun)
[03:12:51] <vms14> mst: and there's no way to make the compile ignore a function?
[03:12:54] <mst> vms14: the peephole optimiser thing only happens when it can detect a constant value in an if/unless/etc.
[03:13:35] <mst> vms14: firstly, NYTProf your code to check this is actually the slow part
[03:13:43] <vms14> I suppose if it annoys me so much I can just write a script to s/debug//;
[03:13:54] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:13:57] <mst> vms14: secondly, you can have a DEBUG constant and write 'DEBUG and log_debug(...);'
[03:14:27] <vms14> the and can also get optimized away? nice
[03:14:57] <vms14> then I'll use the and I guess
[03:15:22] <vms14> thank you so much xenu mst and tirnanog 
[03:15:56] <vms14> well I think I'll end removing all the debug calls with a script or something
[03:16:20] <vms14> but wanted to know if the compiler was able to ignore a function or something alike
[03:17:13] <mst> vms14: 'if' and 'and' are actually the same opcode in the end
[03:17:13] <vms14> this debug function let's me find a lot of bugs so it's likely I won't remove it
[03:17:29] <tirnanog> there's probably some perlguts-savvy lunatic that could pull it off but I think that xenu's suggestion makes sense, in the end. it leverages a fathomable behaviour of the compilation phase.
[03:18:14] <mst> vms14: there are two extra options btw
[03:18:21] <vms14> :0
[03:18:34] <mst> firstly: using https://metacpan.org/pod/BEGIN::Lift to make a no-op debug() function 'run' at compile time and disappear
[03:18:36] <Paperbot> Link title(s): [ BEGIN::Lift - Lift subroutine calls into the BEGIN phase - metacpan.org ]
[03:19:07] <mst> secondly: using http://p3rl.org/Babble to rip out the debug() calls entirely for production builds
[03:19:09] <Paperbot> Link title(s): [ Babble - EXPERIMENTAL Babel-like for perl - metacpan.org <https://metacpan.org/pod/Babble> ]
[03:19:17] <PapaChub> Found it!  https://github.com/Perl/perl5/issues/13073
[03:19:18] <Paperbot> Link title(s): [ No warning for undef'd variables returned from XS  under -w · Issue #13073 · Perl/perl5 · GitHub ]
[03:20:12] <vms14> If this subroutine is called outside of the BEGIN phase, an error will be thrown. If there already exists a typeglob for $keyword_name then an error will be thrown.    the lift module
[03:21:13] <mst> vms14: yes, and?
[03:22:37] <vms14> ah it means that would be an error from part of the module, like is misbehaving?
[03:24:21] *** Quits: PapaChub (~PapaChub@vzw-54.parabon.com) (Quit: Leaving)
[03:24:27] <mst> vms14: the entire point is to have the thing run at compile time - so if it happens outside of compile time, it throws an error because clearly something went wrong
[03:26:13] <vms14> and for the babble one, I should make a plugin for it?
[03:27:49] <mst> vms14: or just write your own quick script
[03:28:23] <mst> vms14: look at the code for remove_use_statement here: https://metacpan.org/release/MSTROUT/Babble-0.090007/source/lib/Babble/Match.pm#L171
[03:28:24] <Paperbot> Link title(s): [ lib/Babble/Match.pm - metacpan.org ]
[03:28:44] <mst> vms14: and its use in Method::Signatures::PP here: https://metacpan.org/dist/Method-Signatures-PP/source/lib/Method/Signatures/PP.pm
[03:28:44] <Paperbot> Link title(s): [ lib/Method/Signatures/PP.pm - metacpan.org ]
[03:28:55] <mst> vms14: I apologise for not documenting Babble better
[03:28:58] <vms14> I suppose I'll end doing a script, at the end I just have to remove the /debug(/ lines
[03:29:19] <mst> vms14: a trivial script will probably work fine and I will not at all complain about you doing so
[03:29:19] <vms14> hahaha don't worry, I see the version it has
[03:29:53] <vms14> I was commenting my code and noticed all the comments were useless
[03:30:19] <vms14> not really, but for a user yes
[03:30:29] <mst> vms14: I wrote Babble because I could, it successfully impressed Larry Wall but then I never ended up finding reasons to properly use it, so I didn't get around to making it usable as well as powerful
[03:31:00] <vms14> source filters are fun, specially the first time you get into
[03:32:01] <vms14> but I'll just let it that way and if I get annoyed I'll remove all those calls
[03:32:02] <mst> Babble is only optionally a source filter, and isn't the line-based style that is why most source filters suck
[03:32:31] <vms14> would be nice to make the compiler able to ignore a function, but it's not a real problem anyways
[03:32:48] <mst> like I said, BEGIN::Lift will basically let you do that if you wanted
[03:32:56] <mst> perl is just a VM - CPAN is the language
[03:32:59] <vms14> mst: when I did a source filter I've read all the lines and just modified the last one with all the result
[03:33:18] <vms14> usually read from lines is not so useful in a source filter, at least for what I wanted
[03:34:05] *** Joins: jpn (~jpn@user/jpn)
[03:34:11] *** Joins: pizdets_ (~pizdets@183.182.111.160)
[03:34:57] *** Quits: pizdets (~pizdets@183.182.111.79) (Ping timeout: 256 seconds)
[03:35:07] <vms14> mst: what are you into currently?
[03:35:21] <mst> vms14: you know how 5.14 / 5.16 added the keyword API that lets competent people write actual custom keywords that integrate with the perl compiler
[03:35:25] <vms14> I bet some weird stuff
[03:35:41] <vms14> :0
[03:36:23] <mst> that entirely happened because I wrote the monstrosity that is Devel::Declare and the first time somebody who was actually a perl core contributor looked at the code it upset him so much he added the feature to core perl so he could kill my cpan module
[03:36:27] <vms14> perl has a lot of things I don't know and never stops surprising me
[03:36:39] <vms14> lol 
[03:37:05] <mst> the keyword API is why e.g. Future::AsyncAwait can add 'async' and 'await' keywords to perl for event driven programming
[03:37:30] <vms14> I think it opens a door for a lot of good (and also bad
[03:37:32] <mst> and why e.g. Function::Parameters can safely add 'fun' and 'method' keywords with signatures from CPAN before core signatures ever existed
[03:37:49] <mst> well, yes, this is perl, it gives you more than enough rope to hang yourself
[03:37:56] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[03:38:01] <mst> and if you ask perl for more rope, it always says "sure, how much would you like?"
[03:38:13] <vms14> I love that
[03:38:29] <mst> but what's really funny to me is
[03:38:52] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 272 seconds)
[03:38:53] <vms14> actually I like perl because it gives me the freedom I need and does not get in the way nor tries to force me to do it the way someone thought it should be
[03:38:54] <mst> three pumpkings (i.e. primary perl maintainers of their day) told me it was impossible to write Devel::Declare
[03:39:10] <mst> turned out it wasn't impossible, it was just really fucking horrible
[03:39:30] <vms14> I imagine you saying "I'll use perl to do it, so I can"
[03:39:37] <mst> but that wasn't actually a problem
[03:40:13] <mst> because the thing where after a bunch of people had used it to add stuff to perl, and then a core contributor looked at it, screamed, and then put a few months of effort into adding the feature to perl core so he could kill it
[03:40:27] <vms14> even if you say it's horrible I see Devel::Declare recommended a lot of times, so it's useful and people sees to use it
[03:40:32] <vms14> seems*
[03:40:32] <mst> was -precisely- the end result I intended
[03:41:15] <mst> the entire point was to prove the concept, let other people write code that proved it was a useful thing to have, and then for somebody who was better than me at the relevant implementation parts to replace it with something better
[03:41:48] <vms14> you added a module and triggered a contributor to add a related feature to it
[03:41:58] <vms14> to perl*
[03:42:02] <mst> exactly
[03:42:23] <vms14> actually you've contributed a lot to the perl community
[03:42:25] <mst> but that was always my plan
[03:42:37] <vms14> not only with that module
[03:42:52] <vms14> and not only with modules :D
[03:42:57] <mst> the people who were competent to add the keyword API to core perl didn't originally believe it was worth having
[03:43:02] <mst> fair enough
[03:43:04] *** Joins: monkey_ (~user@190.104.116.153)
[03:43:19] <mst> so I did something utterly horrific that people liked enough to prove it -was- worth having
[03:43:22] <mst> so then we got it
[03:43:51] <vms14> I imagine that guy having images of your code when adding that feature
[03:44:31] <mst> given I'm a mediocre C programmer on a good day and that code was inherently a giant hack, I do honestly feel sorry for what he must have gone through in the process
[03:44:35] <vms14> maybe he even had nightmares
[03:44:47] <mst> s/maybe/probably/
[03:44:48] <vms14> then what happens when I show my code?
[03:45:11] <mst> you can't scare me, I've seen -my- code :P
[03:46:05] <vms14> don't tempt me
[03:47:23] <mst> and yeah, I've done a bunch of useful shit
[03:47:44] <mst> I think my biggest non-social contributions to perl were DBIx::Class and local::lib
[03:48:18] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[03:49:25] <mst> I honestly find it kinda funny that the tradition of having your local libraries in a directory called ~/perl5 is purely because that's what I called mine nearly twenty years ago when I was doing it by hand, and then I kept it as the default when I got annoyed explaining how to set things up to newbies on the old freenode #perl and figured out how to automate it
[03:50:06] <vms14> local::lib isn't the most used module you wrote?
[03:50:20] <vms14> I mean people will blame me for not using it XD
[03:50:55] <mst> #oh, I think it is the most used module I wrote
[03:51:03] *** Quits: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br) (Ping timeout: 256 seconds)
[03:51:14] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[03:51:21] <mst> but perl people who've moved to other languages can generally tolerate their inferior versions of it
[03:51:50] <vms14> by other you mean raku?
[03:51:51] <mst> but get extremely annoyed that everybody else's SQL generation and ORM related stuff sucks
[03:53:11] <mst> I know ex-perl people using python, javascript, go, elixir, and rust who all have said they wish I'd get addicted to their current language of choice so I'd get pissed off and make working with databases in that language better
[03:53:50] *** Quits: Juerd (juerd@computervrede.nl) (Remote host closed the connection)
[03:54:07] <vms14> hahaha
[03:54:18] <vms14> they could hire you
[03:55:32] *** Joins: Juerd (juerd@computervrede.nl)
[03:55:48] <vms14> I think I've only used one module from you and it's likely to be the less used one
[03:56:25] <mst> I wrote a bunch of random shit, helped other people write a bunch of random shit, and don't honestly mind because I did all of it for the fun of it anyway
[03:56:27] <vms14> maybe I've used others without knowing they were yours, but the module I've used was eval with lexicals
[03:56:44] <mst> ah yes, that one was a beautiful piece of batshittery
[03:56:48] <vms14> I needed that some time ago to make some cheap slime copy for perl and emacs
[03:57:36] <mst> note that the sort-of version 2 of that was Lexical::Context which isn't documented but lives in PerlX::AsyncAwait until I need it for something else
[03:57:50] <mst> adding keywords via Babble/PPR is amusing
[03:58:05] <mst> (use Future::AsyncAwait for real code, this is to make that code fatpack)
[03:59:36] <vms14> I'm trying to make a forth-like language with perl
[03:59:45] <aquanight> 17:08:32/B6DA4 < mst> and if you ask perl for more rope, it always says "sure, how much would you like?" ## use more 'rope';
[03:59:52] <aquanight> why do we have less.pm but not more.pm
[03:59:57] <vms14> I'll try to use less modules as posible, but I'll need XS
[04:00:24] <vms14> I know there are some ffi modules that do magic, but I'd like to learn xs anyways and also to understand what's happening
[04:00:33] <aquanight> oh wait
[04:00:37] <aquanight> use more q~rope~;
[04:00:39] <mst> vms14: I already solved that btw
[04:00:52] <aquanight> there it even looks like ropes
[04:01:00] <vms14> mst: with what?
[04:01:13] <mst> vms14: I haven't cleaned it up and released it but I have absolutely made it so you can fatpack XS modules
[04:02:12] <vms14> actually I'll end needing some magic, I'd like magic ffi like gforth does
[04:02:49] <aquanight> mst: crazy thought: how useful would a 'your' declarator be (depending on what it would even do)
[04:02:50] <mst> vms14: FFI::Platypus is our version of that
[04:02:55] <vms14> https://rosettacode.org/wiki/Draw_a_pixel#Forth if you look at this example it uses sdl bindings by creating them on the fly with c-function and the stack notation
[04:02:58] <Paperbot> Link title(s): [ Draw a pixel - Rosetta Code ]
[04:03:10] <mst> vms14: plus there's also C::Blocks
[04:03:18] <vms14> mst: I guess I've looked at this module some time ago when I was looking about ffi
[04:03:26] <xenu> mst: which likely won't work in 5.36
[04:03:27] <aquanight> (my current crackpot idea is that it would import a global symbol from the first different package in the caller() stack)
[04:03:27] <vms14> the platypus module
[04:03:33] <xenu> also the whole idea of using 3rd party compiler is insane
[04:03:48] <vms14> hahah would work for me
[04:03:52] <vms14> This is perl 5, version 34, subversion 0 (v5.34.0) built for x86_64-netbsd-thread-multi
[04:03:53] <mst> xenu: somebody will figure it out
[04:04:05] <mst> vms14: hey, a fellow netbsd user!
[04:04:11] <vms14> :D 
[04:04:25] <vms14> I love netbsd and got used to it so much that I can't return to linux
[04:04:40] <mst> these days I run debian and freebsd
[04:04:47] <mst> but my first home *n?x was netbsd
[04:04:49] <mst> http://trout.me.uk/rc.conf
[04:04:57] <vms14> I should use debian + xen + netbsd
[04:05:12] <vms14> so I get drivers for everything but still have my system
[04:05:13] <xenu> my favourite thing about xen is its name
[04:05:17] <mst> when I needed to reinstall that machine I preserved the rc.conf as a memory
[04:05:18] <vms14> hahahah
[04:07:38] <vms14> didn't touch my rc.conf except to add savecore flags when trying the current kernel which panics in my machine
[04:08:06] <vms14> I have a gpd micropc, powerd does not get any message so the powerd scripts won't be called
[04:08:40] <vms14> but I've learned you can have several kernels and just boot them without touching nothing
[04:08:57] <mst> that was on a first generation AMD Athlon 850Mhz chip
[04:09:15] <vms14> I admire the netbsd team btw
[04:09:15] <mst> back in ... late 2000
[04:09:38] <vms14> so you won't use netbsd anymore? :/
[04:09:49] <vms14> well I can understand it
[04:10:14] *** Joins: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br)
[04:10:39] <vms14> for me it's fine as I can live without some stuff, but it's more the love I have to the system that makes me fight with those problems
[04:10:56] <vms14> and somehow using netbsd forced me to use perl as other languages have a lot of troubles
[04:11:06] *** Quits: proller (~p@2a02:6b8:b081:b65d::1:15) (Remote host closed the connection)
[04:11:20] <vms14> here in perl most of the cpan works
[04:11:40] <mst> my heaviest personal server runs freebsd so I have ports and jails and etc.
[04:11:58] <vms14> I was always interested in dragonfly
[04:12:03] <mst> pkgsrc fucking rocks though
[04:12:04] *** Joins: proller (~p@80.240.216.69)
[04:12:30] <vms14> I have to learn pkgsrc, I'd like to contribute to netbsd and pkgsrc looks like the best first step
[04:12:44] <mst> pkgsrc is my favourite thing about netbsd
[04:12:56] <mst> I've used it on slackware and solaris as well
[04:13:21] <vms14> but the .mk files are like wikipedia, I can't stop opening other mk files (wikipedia links) as a lot of them say "look at that mk file"
[04:13:47] <mst> yes. but it's worth it.
[04:14:17] <vms14> arch and slackware are my favourite linux distros and I see a lot of people using pkgsrc in slackware, always wanted to try
[04:14:40] <vms14> mst: I'd like to transform the mk to .pl files somehow
[04:15:00] <vms14> when I see some code there it triggers me a bit
[04:15:14] <vms14> like 13233 ifs or stuff like that
[04:16:12] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:18:32] <vms14> mst: btw a guy told me my forth would be slow because I'm writing it in perl, do you think it's right?
[04:19:01] <vms14> I'm not using objects, but some recursion and a lot of function calls
[04:20:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0874-3206-ce5b-fa50.res6.spectrum.com) (Quit: Leaving)
[04:20:07] <vms14> recursion won't be a primary thing btw, but I guess perl has no tco
[04:21:30] <mst> vms14: it'll be slower than it would've been in a faster language, sure, but, uh, I figure that's not a surprise to either of us
[04:22:23] <xenu> perl's stack is (in most cases) infinite, so recursion won't cause crashes but it will eat memory
[04:22:45] <xenu> you can use goto &sub to avoid adding to stack, but that's slower
[04:22:54] <xenu> (iirc)
[04:23:59] <vms14> I think it will be faster than python xD
[04:24:36] <vms14> and I want to provide c ffi, I need to use some C libraries, but also want to let the user add bindings
[04:25:55] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-25e7-2817-2baa-33e2.res6.spectrum.com)
[04:28:57] *** Quits: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[04:29:00] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[04:29:52] *** Joins: proller (~p@2a02:6b8:b081:6412::1:1f)
[04:30:02] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[04:34:37] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[04:38:23] *** Quits: haj1 (~haj@p200300eda707e00037ee28a75c268944.dip0.t-ipconnect.de) (Quit: Leaving.)
[04:43:27] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[04:43:51] *** Quits: Guest3qw47 (Awaru@gateway/vpn/airvpn/awaru) (Quit: Guest3qw47)
[04:44:22] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[04:50:32] *** Joins: bluray (~bluray@user/zapdos)
[04:50:56] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Quit: Awaru)
[04:53:01] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[04:53:27] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[04:53:33] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[04:57:52] *** Quits: whynot (~whynot@88.155.37.163) (Quit: leaving)
[05:04:24] *** Joins: cryptobug (~dashhsdah@2001:448a:1082:fe6f:1c48:28e4:5352:ce6)
[05:04:37] *** Quits: cryptobug (~dashhsdah@2001:448a:1082:fe6f:1c48:28e4:5352:ce6) (K-Lined)
[05:04:49] *** Joins: llh (~UPP@user/llh)
[05:09:46] <aquanight> 17:52:54/BEBD4 < xenu> perl's stack is (in most cases) infinite, so recursion won't cause crashes but it will eat memory ## wat
[05:10:03] <aquanight> sweval: sub foo { __SUB__->() } foo
[05:10:05] <perlbot> aquanight: Deep recursion on subroutine "main::foo" at (IRC) line 1. ERROR: Out of memory during "large" request for 268439552 bytes, total sbrk() is 368967680 bytes at (IRC) line 1. 
[05:10:33] <aquanight> sweval: sub foo; sub foo { foo; } foo
[05:10:35] <perlbot> aquanight: Deep recursion on subroutine "main::foo" at (IRC) line 1. ERROR: Out of memory during "large" request for 268439552 bytes, total sbrk() is 368965632 bytes at (IRC) line 1. 
[05:10:54] <aquanight> why the large request I wonder
[05:11:15] <aquanight> or is that for reallocating the PADLIST
[05:12:08] <aquanight> sweval: sub foo; sub foo { eval "foo;" } foo
[05:12:13] <perlbot> aquanight: Deep recursion on subroutine "main::foo" at (eval 105) line 1. Out of memory during request for 4088 bytes, total sbrk() is 476241920 bytes! Out of memory during request for 1051448 bytes, total sbrk() is 476241920 bytes! Out of memory during request for 1051456 bytes, total sbrk() is 476241920 bytes! Out of memory during request for 1051456 bytes,... [Output truncated. Use `more` to read more]
[05:17:32] <vms14> perlbot: more
[05:17:32] <perlbot> vms14: Sorry, no more output
[05:17:37] <vms14> how dare you
[05:22:41] *** Joins: monkey_ (~user@190.104.116.153)
[05:24:54] <vms14> I think tail cail optimization is important in a language, specially when it's fp friendly and I think perl is very fp friendly
[05:25:30] <mst> vms14: https://metacpan.org/pod/Sub::Call::Tail
[05:25:30] <Paperbot> Link title(s): [ Sub::Call::Tail - Tail calls for subroutines and methods - metacpan.org ]
[05:26:07] <mst> vms14: warning: may fail horribly on newer perls, but that should be fixable and it's a great thing in general
[05:26:32] <vms14> mst: xenu said goto was slower than recursion for some reason
[05:26:41] <vms14> or maybe I've understood it wrong
[05:26:41] <mst> vms14: yes, that's why that exists
[05:27:12] <vms14> When the tail modifier is compiled the inner subroutine call is transformed at compile time into a goto.
[05:27:27] <vms14> the compiler then optimizes it or what?
[05:28:06] <vms14> <B>WARNING! The author does not endorse using this module for anything real. It was written primarily to demonstrate that such quackery can be achieved. Use at your own risk! ahahahaha
[05:31:17] * GumbyPAN CPAN Upload: JSON-Validator-5.08 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/JSON-Validator-5.08
[05:32:49] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[05:33:15] <vms14> it's funny because perl has no tail cail optimization, but we have tail cail declination
[05:33:21] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[05:33:57] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 240 seconds)
[05:34:24] <vms14> actually the module would do some optimization if it converted to a loop instead
[05:34:31] <vms14> that's the easiest way to get tco
[05:35:22] <vms14> and I think the most common one, tail cail is known to be easy to transform to a loop 
[05:36:18] * GumbyPAN CPAN Upload: Mojolicious-Plugin-OpenAPI-5.05 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-OpenAPI-5.05
[05:36:32] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[05:36:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:38:54] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[05:40:02] <vms14> I should make 2 modules, one source filter to remove a function from all the source code, and another to convert a tail call into a loop
[05:40:23] <vms14> the source filter is easy, but I don't feel prepared to make the tco one
[05:40:45] <vms14> and shouldn't be a source filter, perl is hard to parse
[05:41:49] <vms14> the ignore one is easy and could be useful 'use ignore qw/some functions/;'
[05:42:13] <vms14> but I think it would add overhead anyways so meh
[05:45:31] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[05:45:36] *** Joins: Trigon (~reuben@144.39.114.115)
[05:47:27] *** Joins: Linux77 (~L30n4rd0@189-48-140-124.user3p.veloxzone.com.br)
[05:50:26] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[06:19:58] *** Quits: erts (~erts@user/erts) (Quit: .)
[06:23:27] *** Joins: microsoft (~0day@2001:448a:1082:fe6f:b089:a3db:47a7:bb36)
[06:24:15] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[06:26:58] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[06:33:18] *** microsoft is now known as AstaraOS
[06:33:32] *** AstaraOS is now known as Astara
[06:33:43] *** Astara is now known as cryptobug
[06:33:57] *** Quits: cryptobug (~0day@2001:448a:1082:fe6f:b089:a3db:47a7:bb36) (K-Lined)
[06:37:07] *** Joins: microsoft (~0day@2001:448a:1082:fe6f:ddb6:766:2f08:847)
[06:38:12] *** microsoft is now known as auwooo
[06:38:13] *** Quits: auwooo (~0day@2001:448a:1082:fe6f:ddb6:766:2f08:847) (Remote host closed the connection)
[06:38:37] *** Joins: microsoft (~0day@2001:448a:1082:fe6f:ddb6:766:2f08:847)
[06:38:47] *** microsoft is now known as auwooo
[06:38:57] *** auwooo is now known as ndut2
[06:39:14] *** ndut2 is now known as smecin
[06:39:21] *** smecin is now known as uhuhah
[06:40:10] *** uhuhah is now known as skraito
[06:40:10] *** Quits: skraito (~0day@2001:448a:1082:fe6f:ddb6:766:2f08:847) (K-Lined)
[06:40:36] *** Quits: Sleepy63 (~Sleepy63@user/sleepy63) (Quit: Sleepy63)
[06:42:37] *** Joins: cstls (~user@2603-7081-0800-4824-94cb-a6d3-0e22-aea1.res6.spectrum.com)
[06:43:09] *** Joins: microsoft (~0day@2001:448a:1082:fe6f:bd26:3353:32f0:d23)
[06:43:50] *** microsoft is now known as ndut2
[06:47:02] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:52:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[06:57:52] *** Quits: ndut2 (~0day@2001:448a:1082:fe6f:bd26:3353:32f0:d23) (K-Lined)
[07:01:58] *** Joins: Shells (~michelle@2407:8800:bc20:200a:8848:2a71:73cf:925b)
[07:02:11] *** Quits: pizdets_ (~pizdets@183.182.111.160) (Ping timeout: 265 seconds)
[07:03:25] *** Quits: Michelle (~michelle@203.206.128.220) (Ping timeout: 240 seconds)
[07:03:26] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[07:03:27] *** Joins: ndut2 (~ndut2@2001:448a:1082:fe6f:69f9:90b5:b2ea:5b95)
[07:03:34] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:10:03] <ndut2> microsoft official channel is open now ... . at channel #winos , and security issue channel #exploiter for 0day Exploit and DEV ... .
[07:15:52] <zgu> another one?
[07:16:08] <rewt> same one
[07:19:41] <ndut2> nah this the official one
[07:19:51] <ndut2> We are still dealing with governor
[07:20:08] <ndut2> how much for all support that they want to pay for us
[07:20:12] <ndut2> before we support them
[07:20:23] <ndut2> for public We will collect the money soon too
[07:20:26] <ndut2> already official
[07:20:49] <ndut2> windows 11 pro march 2022 ready in 10 minutes from now
[07:20:59] <ndut2> only firm ware and driver not ready
[07:21:09] *** Joins: Sleepy63 (~Sleepy63@user/sleepy63)
[07:23:04] *** Quits: Su-Shee (~Susanne@i5E862DA6.versanet.de) (Ping timeout: 272 seconds)
[07:24:06] *** Joins: Su-Shee (~Susanne@67-111-142-46.pool.kielnet.net)
[07:26:52] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[07:30:07] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[07:37:53] <ndut2> https://www.catalog.update.microsoft.com/ all update for windows is there , Even the one that We erased ... .
[07:37:53] <Paperbot> Link title(s): [ Microsoft Update Catalog ]
[07:38:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[07:39:34] *** Quits: ndut2 (~ndut2@2001:448a:1082:fe6f:69f9:90b5:b2ea:5b95) (K-Lined)
[07:41:41] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[07:41:59] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[08:01:06] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[08:01:06] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[08:01:07] *** finn_elija is now known as FinnElija
[08:11:18] *** Joins: initmjr (~initmjr@ool-182ce94c.dyn.optonline.net)
[08:13:00] *** Quits: cstls (~user@2603-7081-0800-4824-94cb-a6d3-0e22-aea1.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:16:46] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[08:23:57] *** Joins: cstls (~user@2603-7081-0800-4824-94cb-a6d3-0e22-aea1.res6.spectrum.com)
[08:26:18] *** Joins: polishdub (~polishdub@ip72-208-203-185.ph.ph.cox.net)
[08:27:02] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 272 seconds)
[08:27:57] *** Quits: cstls (~user@2603-7081-0800-4824-94cb-a6d3-0e22-aea1.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:29:10] <rindolf> hi all
[08:38:01] *** Joins: Trigon (~reuben@144.39.114.115)
[08:46:32] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.46)
[08:46:35] *** Joins: jpn (~jpn@user/jpn)
[08:47:44] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:51:41] *** Quits: jpn (~jpn@user/jpn) (Remote host closed the connection)
[08:52:06] *** Joins: jpn (~jpn@user/jpn)
[08:52:31] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[08:54:12] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[08:56:21] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[09:06:18] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 272 seconds)
[09:11:30] *** Quits: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com) (Quit: leaving)
[09:17:51] *** Joins: Martchus_ (~martchus@dynamic-095-115-120-157.95.115.pool.telefonica.de)
[09:18:48] *** Joins: monkey_ (~user@190.104.116.153)
[09:18:55] *** Quits: Martchus (~martchus@2a01:c23:b8d1:f000:d250:99ff:fe49:3cce) (Ping timeout: 256 seconds)
[09:19:01] *** Joins: monkey_` (~user@190.104.116.153)
[09:20:15] *** Quits: monkey_` (~user@190.104.116.153) (Client Quit)
[09:21:07] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[09:21:44] *** Joins: monkey_ (~user@190.104.116.153)
[09:21:50] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:22:01] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[09:35:58] <gamo> hi rindolf
[09:45:55] *** Joins: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da)
[09:47:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.116.46) (Ping timeout: 240 seconds)
[09:48:34] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[09:50:53] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[09:51:38] <rindolf> gamo: sup?
[10:00:31] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[10:09:05] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:13:24] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[10:16:51] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[10:20:52] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[10:21:52] *** Joins: diskin (~diskin@109.165.127.96)
[10:26:04] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:31:02] *** Joins: mattil (~mattil@87-95-37-225.bb.dnainternet.fi)
[10:31:47] *** Joins: mattil_ (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:33:46] *** Quits: mattil_ (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:34:14] *** Joins: mattil_ (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:35:39] *** Quits: mattil (~mattil@87-95-37-225.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[10:38:13] *** Quits: mattil_ (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:38:23] *** Joins: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:38:27] *** Quits: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:38:56] *** Joins: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:39:52] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[10:39:52] *** Quits: diskin (~diskin@109.165.127.96) (Killed (osmium.libera.chat (Nickname regained by services)))
[10:39:52] *** diskin_ is now known as diskin
[10:43:42] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[10:44:14] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[10:46:19] *** Quits: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:46:46] *** Joins: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:47:50] *** Quits: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:48:00] *** Joins: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi)
[10:48:58] *** Quits: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[10:50:12] *** Joins: R2robot (~R2robot@user/r2robot)
[10:54:06] *** Quits: mattil (~mattil@d1g-h77ydph86vy041t-4.rev.dnainternet.fi) (Remote host closed the connection)
[11:05:19] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:22:37] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[11:35:24] *** Joins: pizdets (~pizdets@183.182.111.82)
[11:37:41] *** Joins: xcombelle1 (~xcombelle@176-139-252-198.abo.bbox.fr)
[11:37:43] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:37:49] <xcombelle1> hi rindolf 
[11:39:31] <rindolf> xcombelle1: hey,sup?
[11:39:45] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[11:41:18] <xcombelle1> win a go game
[11:41:40] <xcombelle1> a go match
[11:42:00] * GumbyPAN CPAN Upload: Math-Pari-2.03052102 by ILYAZ https://metacpan.org/release/ILYAZ/Math-Pari-2.03052102
[11:42:59] *** Quits: randir (~randir@95-31-138-202.broadband.corbina.ru) (Remote host closed the connection)
[11:45:16] *** Quits: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da) (Remote host closed the connection)
[11:45:16] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 272 seconds)
[11:45:35] *** Joins: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da)
[11:59:36] *** Joins: discip (~discip@net-2-35-155-132.cust.vodafonedsl.it)
[11:59:41] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[12:02:28] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[12:09:48] *** Quits: csrf (~csrf@user/csrf) (Ping timeout: 240 seconds)
[12:14:48] <deadmarshal> sub powerset {@_ ? map { $_, [$_[0], @$_] } powerset(@_[1..$#_]) : [];}
[12:15:09] <deadmarshal> this is so cool :D. that : [] looks like Haskell's cons operator
[12:19:59] *** Joins: martinus__ (~martin@139.30.201.77.rev.sfr.net)
[12:20:20] *** Joins: gk_ (~irkk@debrecziner.extrawurst.systems)
[12:21:13] *** Joins: haj1 (~haj@p200300eda707e000bbeb5197f70bef7f.dip0.t-ipconnect.de)
[12:25:26] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[12:29:37] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Ping timeout: 240 seconds)
[12:31:04] *** Quits: bluray (~bluray@user/zapdos) (Remote host closed the connection)
[12:31:28] *** Joins: bluray (~bluray@177.32.119.241)
[12:31:29] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[12:31:46] *** Quits: bluray (~bluray@177.32.119.241) (Changing host)
[12:31:46] *** Joins: bluray (~bluray@user/zapdos)
[12:32:05] * GumbyPAN CPAN Upload: AWS-Lambda-0.0.35 by SHOGO https://metacpan.org/release/SHOGO/AWS-Lambda-0.0.35
[12:34:19] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 260 seconds)
[12:36:12] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:37:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:41:03] *** Joins: jplesnik (~jplesnik@83.240.62.151)
[12:42:54] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[12:44:42] *** Quits: Shells (~michelle@2407:8800:bc20:200a:8848:2a71:73cf:925b) (Read error: Connection reset by peer)
[12:46:26] *** Joins: Shells (~michelle@2407:8800:bc20:200a:8848:2a71:73cf:925b)
[13:08:45] *** Joins: lkw (~lkw@user/lkw)
[13:09:35] *** Joins: randir (~randir@93.159.239.42)
[13:13:18] *** Quits: gk_ (~irkk@debrecziner.extrawurst.systems) (Ping timeout: 272 seconds)
[13:16:54] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:22:00] *** Joins: Pali (~pali@user/pali)
[13:29:43] <rindolf> xcombelle1: s/win/won/
[13:30:48] *** Joins: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com)
[13:33:04] <rindolf> deadmarshal: nice...
[13:35:36] <rindolf> ghc is devils' work tho
[13:40:03] *** Joins: jpn (~jpn@user/jpn)
[13:45:09] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[13:45:44] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[13:45:46] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[13:46:09] *** Joins: csrf (~csrf@user/csrf)
[13:46:24] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[13:47:37] *** Quits: csrf (~csrf@user/csrf) (Read error: Connection reset by peer)
[13:48:20] *** Joins: csrf (~csrf@user/csrf)
[13:48:54] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 252 seconds)
[13:53:44] <deadmarshal> rindolf: I agree 
[13:56:22] *** Joins: xcombelle3 (~xavie@176-139-252-198.abo.bbox.fr)
[13:57:38] *** Joins: jpn (~jpn@user/jpn)
[13:58:47] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 252 seconds)
[14:02:19] <daxim> /r/perl mods ganging up on yuki kimoto?  https://old.reddit.com/comments/tnfdxy/_/i21mlsb?context=3
[14:02:20] <Paperbot> Link title(s): [ daxim comments on Please test DBD::Oracle v1.90_1 <https://old.reddit.com/r/perl/comments/tnfdxy/please_test_dbdoracle_v190_1/i21mlsb/?context=3> ]
[14:06:16] * GumbyPAN welcomes TRILLICH - Will Trillich to CPAN!
[14:13:25] *** Quits: xcombelle3 (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 240 seconds)
[14:13:39] *** Quits: xcombelle1 (~xcombelle@176-139-252-198.abo.bbox.fr) (Ping timeout: 252 seconds)
[14:14:05] *** Joins: jpn_ (~jpn@user/jpn)
[14:16:53] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 250 seconds)
[14:22:58] *** Quits: veesh (~veesh@77.137.128.37) (Ping timeout: 272 seconds)
[14:23:59] *** Quits: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da) (Ping timeout: 260 seconds)
[14:29:12] *** Joins: azed (~azed@197.19.177.23)
[14:30:35] *** Joins: gk_ (~irkk@debrecziner.extrawurst.systems)
[14:33:21] <Altreus> I dunno that name but I agree that shadowbanning (here, hellbanning) is not an appropriate practice for a community wanting to be respected in any way
[14:33:58] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[14:36:20] * GumbyPAN CPAN Upload: Promise-Me-v0.2.0 by JDEGUEST https://metacpan.org/release/JDEGUEST/Promise-Me-v0.2.0
[14:36:27] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[14:37:05] <Altreus> some mojo contributions too
[14:48:05] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[14:48:48] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:57:12] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[14:59:30] *** Joins: veesh (~veesh@77.137.128.37)
[15:00:58] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 272 seconds)
[15:13:00] *** Joins: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net)
[15:13:04] *** Quits: azed (~azed@197.19.177.23) (Quit: WeeChat 3.4)
[15:17:58] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:18:22] *** Joins: jpn (~jpn@user/jpn)
[15:21:15] *** Quits: jpn_ (~jpn@user/jpn) (Ping timeout: 250 seconds)
[15:23:47] *** Joins: randir_ (~randir@212.237.210.82)
[15:26:59] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 260 seconds)
[15:28:36] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[15:29:38] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[15:30:51] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[15:31:22] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 272 seconds)
[15:32:43] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:32:56] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:33:40] *** Joins: csrf (~csrf@user/csrf)
[15:34:45] *** Joins: randir (~randir@93.159.239.42)
[15:35:14] *** Joins: Urawa (Awaru@gateway/vpn/airvpn/awaru)
[15:38:15] *** Quits: randir_ (~randir@212.237.210.82) (Ping timeout: 256 seconds)
[15:38:58] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 272 seconds)
[15:42:46] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[15:44:27] *** Joins: kensanata (~user@user/kensanata)
[15:45:20] <discip> hello, I plan a new module but I wonder if Sub::Long::Arguments is an appropriate name
[15:45:29] <discip> see https://www.perlmonks.org/?node_id=11142311
[15:45:32] <Paperbot> Link title(s): [ RFC: nicer subs with GetOptionsFromArray from Getopt::Long ]
[15:45:57] <LeoNerd> What would this module do? Perhaps post an exmaple usage
[15:45:58] <discip> or perhaps Sub::Long::Args
[15:46:22] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[15:46:27] <LeoNerd> Hard to suggest a name without seeing any other detail :)
[15:46:34] <discip> my %opts = longargs( {len => 1, wid => 2}, [qw( len=i wid=i )], @_ );
[15:46:47] <kjetilho> discip: aren't these things called options and not arguments?
[15:47:04] <LeoNerd> Oh.. this from yesterday
[15:47:14] <discip> longars( defaults, template, arguments )
[15:47:15] <LeoNerd> Yeah; why not just pass args to a function in a hash? That's the usual mechanism
[15:47:46] <LeoNerd> sub func(%args) { my $len = $args{len} // 1; my $wid = $args{wid} // 2; ... }   then you can call it with  func(len => 15); # wid is default at 2
[15:47:58] <LeoNerd> That's already built into the language and verymuch what everyone already does
[15:48:26] <LeoNerd> Furthermore, once we start doing 5.37 development I plan to do some sort of support for named params within the signature itself
[15:48:41] <LeoNerd> sub func(:$len = 1, :$wid = 2) { ... }   perhaps looking like that. Undecided quite yet
[15:48:56] <discip> yes of course, but using GetOptionsFromArray you gain a minimal type checking and free alternative names for parameters
[15:48:58] <LeoNerd> So now you can call  func() for the defaults, or   func(wid => 10);  to override one of them
[15:49:09] <choroba> LeoNerd: Named params in signatures, yes please!
[15:49:17] <Altreus> isn't this just Params::Validate
[15:49:18] <discip> :)
[15:49:25] <LeoNerd> sub func(Numeric :$len = 1, Numeric :$wid = 2) { ... }  # Ahh look we have param types
[15:49:58] <LeoNerd> (or maybe they'd be notated   sub func(:$len is Numeric = 1) ... unsure yet)
[15:50:43] <Altreus> LeoNerd: looks raku-y :P
[15:50:57] <LeoNerd> Shocking!
[15:51:15] <discip> sub func(:$len is Numeric = 1) is nice to see imho
[15:51:59] <LeoNerd> Yeah I'm undecided about using the currently very-underused prefix position for that, or a new named `is` operator
[15:52:05] <LeoNerd> Both ideas have downsides :/
[15:53:20] <discip> isa cant be enhanced to accomplish the same?
[15:53:23] <choroba> not having any doesn't have upsides
[15:53:29] <LeoNerd> isa is all about object classes
[15:53:54] <LeoNerd> Only object refs are ever true for the `isa` operator. Any nonref, or any non-blessed plain data structure ref, are always false
[15:54:20] <LeoNerd> Whereas my idea with something like `Numeric` is that any plain scalar that "looks like a number" is Numeric, as is any object class with a numification overload
[15:54:20] <discip> aorry for my ignorance.. Numeric what will be?
[15:54:53] <discip> ok
[15:54:56] <LeoNerd> so `5 is Numeric`, `"15" is Numeric`, `Math::BigInt->new("1E1024") is Numeric` would all be true
[15:56:18] <LeoNerd> Watch my talk at GPW next week if you want to see more
[15:56:34] <discip> German in German?
[15:56:44] <LeoNerd> Talk is in ENglish
[15:56:49] <discip> ++
[15:57:37] <Botje> "this statement" is False
[15:58:03] <discip> kjetilho: in subs are args, no?
[15:58:25] <LeoNerd> "args", "params"... the two terms end up being quite interchangable
[15:58:56] <kjetilho> discip: so it is not handling program options?  no link to Getopt::Long?
[15:59:23] <Altreus> teknikly, parameters are what the sub accepts and arguments are when you pass things
[15:59:27] <discip> LeoNerd: 15 is Numeric and 15 is String will both be true?
[15:59:48] <LeoNerd> Yes, I would imagine any defined but non-reference scalar should be Stringy
[16:00:05] <Altreus> and objects that overload ""? :D
[16:00:11] <discip> kjetilho: see my post at perlmonks: I use Getopt::Long to handle sub arguments
[16:00:11] <LeoNerd> Yah them too
[16:01:04] <discip> this is the dual life of perl scalars
[16:01:49] <discip> "15 but true" will be not NUmeric
[16:02:51] <discip> my $str = q(15 but true); print ++$str
[16:03:25] <choroba> eval: my $str = q(15 but true); print ++$str
[16:03:27] <perlbot> choroba: Argument "15 but true" isn't numeric in preincrement (++) at (IRC) line 1. 16
[16:03:41] <discip> I get 16 :)
[16:04:23] <choroba> It's hidden behind the warning, but it's here, too.
[16:05:47] <discip> right
[16:09:27] *** Joins: tobybl (~tobybl@227.192.115.87.dyn.plus.net)
[16:11:30] * GumbyPAN CPAN Upload: Mojolicious-9.23 by SRI https://metacpan.org/release/SRI/Mojolicious-9.23
[16:20:16] *** Joins: deadmarshal_ (~deadmarsh@95.38.116.46)
[16:35:24] *** Quits: proller (~p@2a02:6b8:b081:6412::1:1f) (Ping timeout: 240 seconds)
[16:44:37] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 240 seconds)
[16:47:44] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:54:25] *** Joins: magla (~gelignite@d5367a39.access.ecotel.net)
[17:11:02] *** Joins: proller (~p@2a02:6b8:b081:b713::1:36)
[17:11:08] *** Joins: jpn (~jpn@user/jpn)
[17:12:23] *** Quits: proller (~p@2a02:6b8:b081:b713::1:36) (Remote host closed the connection)
[17:19:07] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 256 seconds)
[17:19:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:20:17] *** Joins: ekathva (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[17:22:21] *** Joins: hethw (~heth@46.238.32.56)
[17:22:36] <hethw> what are the chances rand to return the same 12digit number?
[17:22:44] <hethw> consequently
[17:24:06] <Botje> how do you construct the number?
[17:24:18] <Botje> rand(10**13) or somesuch?
[17:24:47] *** Quits: discip (~discip@net-2-35-155-132.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[17:25:20] <Botje> If so, the answer is logically 10**-13
[17:25:54] <Botje> hethw: ^
[17:26:01] <Botje> hethw: also, why are you asking this?
[17:26:23] <Botje> smells like an XY problem
[17:26:26] <LeoNerd> I'd construct it in stages, each digit individually perhaps. Or groups. Don't do the full number in one go because there aren't that many bits of precision to it
[17:27:03] <LeoNerd> eval: join "", map { int rand 10 } 1 .. 12
[17:27:04] <perlbot> LeoNerd: 358702883026
[17:27:15] <kjetilho> hethw: if you initialise srand with the same value, the chances are 100%
[17:28:18] <kjetilho> one fun thing was initialising with srand based on current time.  unfortunately it started out in January 1970 on boot, and got correct clock later.  so all devices had the same "random" key.
[17:28:37] <kjetilho> well, not all - but most of them, since boot process took approximately the same time
[17:28:47] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 260 seconds)
[17:29:14] <hethw> that's the case, srand should be initialized by default with different things every run of rand() or is it?
[17:29:19] <Botje> and to think the kernel goes through all this trouble to make sure /dev/random has enough entropy
[17:29:31] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Quit: Leaving)
[17:29:40] <hethw> at least that's what documentation says
[17:29:43] <Botje> hethw: don't call srand yourself unless you want to fix your RNG to a specific output (for testing)
[17:29:52] <hethw> I'm not
[17:29:53] <kjetilho> hethw: srand is initialized on first use of rand() in your script.
[17:31:41] <hethw> yes, but I would expect two consequent rand() calls after that to have different outputs "most" of the time
[17:32:00] <Botje> in 1/10**13 cases you will see the same number twice.
[17:32:02] <hethw> as Botje said in the beginning
[17:32:14] *** Joins: jpn (~jpn@user/jpn)
[17:32:15] <hethw> alright, everything's good then
[17:32:24] <simcop2387> kjetilho: those kind of clock issues have caused ssh host keys to get duplicated
[17:32:34] <Botje> that's why I asked about the Y to your x.
[17:32:41] *** Quits: XV8 (~XV8@2601:5cb:c001:50::4a2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:32:47] <Botje> Why do you want to avoid duplicates? Can't you do it by construction instead?
[17:34:02] <kjetilho> cue classic dilbert strip.
[17:34:06] <hethw> that's a smart way to solve it
[17:34:08] *** Joins: XV8 (~XV8@2601:5cb:c001:50::4a2c)
[17:34:23] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 252 seconds)
[17:34:33] <hethw> but I guess 10^13 is good enough
[17:34:39] *** Joins: Woodzy (~quassel@198.204.246.228)
[17:34:51] <kjetilho> https://dilbert.com/strip/2001-10-25
[17:34:51] <Paperbot> Link title(s): [ Dilbert Comic Strip on 2001-10-25 | Dilbert by Scott Adams ]
[17:35:33] <rindolf> hethw: i suggest using https://metacpan.org/dist/Math-Random-MT / etc
[17:35:34] <Paperbot> Link title(s): [ Math-Random-MT-1.17 - The Mersenne Twister PRNG - metacpan.org ]
[17:35:54] <simcop2387> hethw: if you need some more statements about the quality of the random number i'd use https://metacpan.org/pod/Crypt::Random and use larger identifiers, e.g. a uuid of some variety
[17:35:54] <Paperbot> Link title(s): [ Crypt::Random - Cryptographically Secure, True Random Number Generator. - metacpan.org ]
[17:36:39] <hethw> it would be easier to keep state and compare but it's not that crucial
[17:36:41] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:36:54] <hethw> thanks for the feedback
[17:37:11] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 260 seconds)
[17:37:29] <simcop2387> depends on how you have to scale things but yea sometimes just retrying is easier if you see a conflict.  the real issue is if you have a possibility of a race between the check and submission of the new id
[17:38:22] <simcop2387> with a DB a good way to deal with that is a unique constraint on that field and try the insert to do both the check and the insertion to prevent a race like that.  beyond that it'll be dependant on everything else
[17:41:31] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[17:42:26] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 245 seconds)
[17:42:49] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:47:21] *** Joins: jpn (~jpn@user/jpn)
[18:14:10] *** Quits: tobybl (~tobybl@227.192.115.87.dyn.plus.net) (Remote host closed the connection)
[18:15:26] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[18:20:53] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 256 seconds)
[18:36:05] *** Joins: ekathva_ (~ekathva@85-76-47-198-nat.elisa-mobile.fi)
[18:36:18] *** Quits: ekathva (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Remote host closed the connection)
[18:39:20] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[18:40:21] *** Quits: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:42:48] *** Joins: thrig (~thrig@207.108.197.156)
[18:46:51] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[18:49:19] *** Joins: mattil_ (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[18:53:43] *** Quits: mattil_ (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[18:55:52] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[18:55:55] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:57:16] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[18:58:00] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[18:58:17] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[19:00:31] *** Joins: ekathva__ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:01:06] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:15] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:01:42] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[19:02:32] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:02:44] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[19:03:03] *** Quits: ekathva_ (~ekathva@85-76-47-198-nat.elisa-mobile.fi) (Ping timeout: 260 seconds)
[19:07:38] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:08:04] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[19:08:24] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:08:31] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[19:11:21] *** Shells is now known as Michelle
[19:12:01] <v`> https://www.bbc.com/news/technology-60864283
[19:12:02] <Paperbot> Link title(s): [ Lapsus$: Oxford teen accused of being multi-millionaire cyber-criminal - BBC News ]
[19:12:05] *** Joins: randir_ (~randir@212.237.210.82)
[19:12:48] *** Joins: gast0n (~g4570n@user/gast0n)
[19:14:39] *** Michelle is now known as Shells
[19:14:41] *** Quits: jplesnik (~jplesnik@83.240.62.151) (Quit: Leaving)
[19:15:00] *** Shells is now known as Michelle
[19:15:17] *** Quits: randir (~randir@93.159.239.42) (Ping timeout: 256 seconds)
[19:18:57] *** Quits: subie (~subie@2601:4c0:4080:bc0::4) (Ping timeout: 240 seconds)
[19:21:34] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Remote host closed the connection)
[19:22:00] *** Joins: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi)
[19:22:08] *** Joins: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net)
[19:26:23] *** Quits: mattil (~mattil@dy56mlldzmdq9wh7k2xfy-4.rev.dnainternet.fi) (Ping timeout: 256 seconds)
[19:26:36] *** Quits: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[19:26:47] <vanfanel64> Another bit of a facepalm. Estonia wanted to give a cow to every refugee family with children a cow, but it turned out more than half that were sent were steers or bulls
[19:27:41] *** Quits: waitman_ (znc@irc.y0m4m4.com) (Ping timeout: 268 seconds)
[19:27:59] *** Joins: bmeneg (~bmeneg@2804:828:f232:ab0e:4abd:cfe6:e7ad:77d3)
[19:29:11] *** Joins: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net)
[19:29:56] <ilmari> steaks for everyone!
[19:31:47] <vanfanel64> ilmari, that would certainally be better than trying to milk one that cannot be milked, not sure if it can be liquified for small children though
[19:32:16] <ilmari> beef smoothie!
[19:32:36] <ilmari> and steak devrim
[19:32:46] <vanfanel64> It would not surprise me if that smoothie exists somewhere
[19:33:29] <vanfanel64> No sure what a devrim is
[19:33:35] <vanfanel64> not
[19:34:53] <fizzie> (Bovril is liquified beef, right?)
[19:35:23] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 252 seconds)
[19:37:00] *** Quits: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[19:39:47] *** Joins: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net)
[19:42:06] *** Joins: jpn (~jpn@user/jpn)
[19:45:18] *** Joins: mattil (~mattil@helsinki.portalify.com)
[19:45:52] *** Quits: ccntrq (~Thunderbi@exit-1.rz.nue.de.mhd.medondo.com) (Quit: ccntrq)
[19:46:52] <ilmari> steak devrim is a community in-joke originating when Devrim Gündüz, who usually has his steak well done, accidentally ordered steak tartare
[19:46:55] <ilmari> https://twitter.com/steakdevrim
[19:47:34] <thrig> safer than a prion smoothie
[19:50:24] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 272 seconds)
[19:57:11] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:57:31] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[20:02:26] <vanfanel64> thrig, for a second I thought that was prison smoothie
[20:06:41] <ilmari> sorry, I shuld specify, a postgres community in-joke (for a moment I thought I was on the postgres channeL)
[20:07:09] <thrig> that's the elephant in the room?
[20:07:59] <ilmari> elephant steak tartare?
[20:09:11] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:11:07] *** Joins: zln (~zln@c83-249-48-11.bredband.tele2.se)
[20:14:52] *** Joins: Trigon (~reuben@144.39.114.115)
[20:18:59] <pragma-> v`: yeah, ms posted an extensive report on their activities earlier this month. apparently the kids didn't care about covering their tracks that much. 99% of the "hacking" consisted of putting out ads to buy logins at the target site and then using script kiddie tools to exploit  outdated software and insecure configurations. i'd link it but i'm on my fablet.
[20:19:51] <vanfanel64> started reading that as microsoft posted an..
[20:20:04] <pragma-> yes
[20:21:02] <vanfanel64> Oh I was right? The kids part after made me think it was Ms.
[20:21:57] * GumbyPAN CPAN Upload: Net-DNS-Resolver-Unbound-1.10_01 by RWF https://metacpan.org/release/RWF/Net-DNS-Resolver-Unbound-1.10_01
[20:22:25] *** Quits: subie (~subie@c-68-35-254-134.hsd1.fl.comcast.net) (Remote host closed the connection)
[20:22:44] *** Joins: subie (~subie@2601:4c0:4080:bc0:ca0f:1d28:f742:47b5)
[20:24:38] *** Joins: on^ (~on@96-91-136-49-static.hfc.comcastbusiness.net)
[20:25:01] <pragma-> microsoft, yes. earlier this week, in fact.
[20:28:37] <pragma-> https://www.microsoft.com/security/blog/2022/03/22/dev-0537-criminal-actor-targeting-organizations-for-data-exfiltration-and-destruction/
[20:28:37] <Paperbot> Link title(s): [ DEV-0537 criminal actor targeting organizations for data exfiltration and destruction - Microsoft... ]
[20:29:20] <pragma-> there, i think that's the post. that was a chore on the tablet
[20:30:55] <pragma-> 7 inch tablet. mostly use it as a book reader
[20:31:02] <pragma-> nexus 7
[20:32:11] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[20:32:26] <simcop2387> i had a 7 for a while, finally gave it up because it couldn't keep a charge and couldn't get a battery for a reasonable price at the time.
[20:32:28] *** Joins: thrig (~thrig@207.108.197.156)
[20:32:43] <pragma-> its a fun star trek toy when i use it to scan for my neighbor's wifi networks or use it for maps
[20:33:29] <pragma-> knock wood, battery's still going strong
[20:34:27] <simcop2387> i've been really tempted to buy an onyx boox nova color.  it's an android color eink tablet.  for the use i want it for (books and comics) it seems like it'd be really nice.  based on reviews doing just about anything else on it is terrible though so it's hard to justify the cost though.  but something like that + a normal tablet for non book and comic stuff seems like it'd be a fun plan.
[20:34:34] <pragma-> my galaxy s3's battery is starting to get bloated a tad. time to take it to the recycling center
[20:35:19] <thrig> or hammer + video camera
[20:35:22] <simcop2387> yea the moment a lion battery puffs up you need to get rid of it asap
[20:35:33] <simcop2387> thrig: 22 cal nail driver + camera :)
[20:35:47] <simcop2387> explode the nail into the battery to explode the battery
[20:35:58] <pragma-> the s3 is still a capable device. shame there's no software updates for it or i wouldn't have gotten a pixel 5a
[20:36:08] <thrig> maybe some pexiglass shielding too
[20:37:02] * thrig goes back to ignoring the 'replace battery now!!' on the 2009 macbook
[20:47:24] *** Joins: kensanata (~user@user/kensanata)
[20:47:26] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[20:49:21] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[20:51:03] <zgu> replace the battery?
[20:51:09] <zgu> don't you have to replace the macbook?
[20:52:00] *** Quits: Urawa (Awaru@gateway/vpn/airvpn/awaru) (Quit: Urawa)
[20:54:13] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[20:54:47] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[20:54:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[20:55:09] *** Joins: yuesbeez (uid458354@id-458354.tinside.irccloud.com)
[20:55:28] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[20:56:27] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 260 seconds)
[20:57:52] <Kobaz> having a weeeeeeird mojo issue
[20:57:54] <Kobaz> Mojo::Reactor::Poll: I/O watcher failed: DBD::Pg::db pg_ready failed: connection not open at /usr/local/library/perl/lib/perl5/Mojo/Pg/Database.pm line 171.
[20:58:05] <Kobaz> i can't reproduce this on demand... it just 'randomly happens'
[20:58:20] <Kobaz> i've tested with restarting postgres while doing an operation, and that doesn
[20:58:24] <Kobaz> 't trigger it
[20:58:42] <Kobaz> auto-reconnect upon postgres restart seems to work just fine
[20:59:48] <rindolf> pragma-: hi, what's good?
[21:02:08] <rindolf> Kobaz: i hate https://en.wikipedia.org/wiki/Heisenbug s
[21:02:09] <Paperbot> Link title(s): [ Heisenbug - Wikipedia ]
[21:03:07] <simcop2387> Kobaz: only thing i can think of is to throw a $db->ping() in there at the start of requests to make it check for a valid connection but beyond that i'm not sure
[21:06:30] <Kobaz> hmm okay
[21:08:29] *** Joins: Ehsan (~Ehsan@144.162.48.129)
[21:08:37] <Ehsan> Hello
[21:09:01] <gordonfish> Kobaz: Yeah that sounds like a flakey server
[21:09:35] <Ehsan> I need to talk to customer service
[21:09:47] <Ehsan> is it right chat?
[21:09:59] *** Joins: Trigon (~reuben@144.39.114.115)
[21:09:59] <rindolf> Ehsan: hi,
[21:10:46] *** Quits: Ehsan (~Ehsan@144.162.48.129) (Client Quit)
[21:10:50] <gordonfish> Kobaz: What does your handling code look like?
[21:10:54] <Kobaz> gordonfish: well what happens is... that message repeats in the log infinitely until mojo is stopped
[21:11:05] <rindolf> Ehsan: hi, perl is foss
[21:11:05] <Kobaz> and everything grinds to a halt 
[21:11:19] <Kobaz> it can't handle new connections
[21:11:26] <Kobaz> gordonfish: lemme get
[21:12:02] <pragma-> https://pbs.twimg.com/media/FOpLtmiXoAIVhs-?format=png&name=small
[21:12:45] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:13:45] <gordonfish> Kobaz: (Just fyi, there is also a #mojo channel)
[21:13:53] <Kobaz> ah cool
[21:14:26] <Kobaz> https://dpaste.com/8PB3ARPYK
[21:14:28] <Paperbot> Link title(s): [ dpaste: 8PB3ARPYK ]
[21:14:28] <Kobaz> stuff like this
[21:14:56] *** Joins: R2robot (~R2robot@user/r2robot)
[21:16:05] <Kobaz> and then some db related stuff
[21:17:30] <Kobaz> https://dpaste.com/3X9NHXTPX
[21:17:32] <Paperbot> Link title(s): [ dpaste: 3X9NHXTPX ]
[21:17:42] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 252 seconds)
[21:17:43] <Kobaz> there's more to it than that, but that's the style
[21:18:30] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[21:18:41] <Kobaz> we either use query or query_p
[21:19:08] <Kobaz> so deep inside the db handling in mojo is where it seems to die
[21:21:43] <kensanata> Kobaz: Do you keep references somewhere, and Mojo maybe starts up new workers after a while, or has multiple workers and only the first one is fully connected, and thus once you get the new worker "at random intervals" you end up with a worker that no longer knows about the database connection?
[21:22:58] <thrig> maybe one of these workers is lacking the means of production
[21:23:35] <kensanata> haha
[21:27:15] <thrig> I am pretty close to Redmond, which might have been the DOS Capital of the world
[21:30:42] *** Quits: thrig (~thrig@207.108.197.156) (Read error: Connection reset by peer)
[21:31:34] <Altreus> was that a microsoft joke?
[21:31:39] <Altreus> I guess we'll never know
[21:34:55] *** Joins: n1to (~n1to@user/n1to)
[21:35:53] *** Quits: n1to (~n1to@user/n1to) (Client Quit)
[21:36:08] *** Joins: n1to (~n1to@user/n1to)
[21:36:09] *** Quits: n1to (~n1to@user/n1to) (Remote host closed the connection)
[21:36:49] *** Joins: n1to (~n1to@user/n1to)
[21:36:52] *** Quits: n1to (~n1to@user/n1to) (Remote host closed the connection)
[21:38:05] *** Joins: ekathva_ (~ekathva@mobile-access-5672c1-60.dhcp.inet.fi)
[21:38:33] <Kobaz> kensanata: mm maybe
[21:39:52] *** Joins: n1to (~n1to@user/n1to)
[21:40:22] *** Quits: n1to (~n1to@user/n1to) (Client Quit)
[21:40:54] *** Quits: ekathva__ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Ping timeout: 260 seconds)
[21:41:04] *** Joins: n1to (~n1to@user/n1to)
[21:43:37] *** Joins: Awaru (~Awaru@213.152.187.235)
[21:52:27] *** Quits: martinus__ (~martin@139.30.201.77.rev.sfr.net) (Ping timeout: 260 seconds)
[22:07:09] * GumbyPAN CPAN Upload: PPIx-Regexp-0.083_01 by WYANT https://metacpan.org/release/WYANT/PPIx-Regexp-0.083_01
[22:11:25] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[22:12:28] *** Quits: XV8 (~XV8@2601:5cb:c001:50::4a2c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:14:18] *** Quits: randir_ (~randir@212.237.210.82) (Remote host closed the connection)
[22:16:00] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 252 seconds)
[22:16:39] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[22:17:10] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Geolocation-MMDB-0.003 by VOEGELAS https://metacpan.org/release/VOEGELAS/Mojolicious-Plugin-Geolocation-MMDB-0.003
[22:17:50] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Excess Flood)
[22:18:22] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[22:18:57] *** Quits: acidsys (~LSD@2a03:4000:55:d20::3) (Client Quit)
[22:19:12] *** Joins: acidsys (~LSD@2a03:4000:55:d20::3)
[22:28:26] *** Joins: XV8 (~XV8@2601:5cb:c001:50::4a2c)
[22:28:48] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[22:35:12] <sokan> How can I get print keys %sequences to print keys or %sequences with \t between the keys?
[22:35:36] <ilmari> print join "\t", keys %sequences;
[22:36:18] <sokan> thanks ilmari :)
[22:38:15] *** Quits: lkw (~lkw@user/lkw) (Read error: Connection reset by peer)
[22:39:14] *** Quits: zln (~zln@c83-249-48-11.bredband.tele2.se) (Quit: WeeChat 3.4.1)
[22:41:47] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[22:43:14] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[22:43:15] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[22:47:52] *** Joins: randir (~randir@212.237.210.82)
[22:49:03] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Read error: Connection reset by peer)
[22:56:54] *** Joins: lkw (~lkw@user/lkw)
[22:58:33] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[23:07:42] <gordonfish> Re: <Kobaz> https://dpaste.com/3X9NHXTPX
[23:07:43] <Paperbot> Link title(s): [ dpaste: 3X9NHXTPX ]
[23:07:46] <gordonfish> Might not have anything to do with your problem, but I noticed that the first line in that paste has @sql_queries and the next line you use @queries.
[23:14:15] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[23:15:39] *** Quits: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:16:53] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[23:18:13] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[23:18:43] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 256 seconds)
[23:19:50] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[23:21:36] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:22:12] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:22:32] *** Joins: justOkay (~justache@user/justache)
[23:24:33] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[23:24:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[23:32:06] *** Quits: ekathva_ (~ekathva@mobile-access-5672c1-60.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:33:28] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[23:35:08] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Client Quit)
[23:40:36] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 240 seconds)
[23:50:45] *** Joins: kensanata (~user@user/kensanata)
[23:54:38] *** Joins: rgrinberg (~textual@fixed-186-96-26-198.totalplay.net)
[23:55:25] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[23:56:52] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
