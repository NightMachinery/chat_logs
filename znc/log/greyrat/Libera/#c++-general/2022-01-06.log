[00:01:17] <Alipha> Yeah, if the text `std::vector` appears in the cpp, I'd include <vector>, otherwise not
[00:10:41] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[00:11:24] *** Joins: letto (~letto@188.25.113.229)
[00:14:15] *** Joins: john99 (~john99@35.246.103.34.bc.googleusercontent.com)
[00:14:23] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:15:04] *** Parts: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) ()
[00:19:45] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[00:23:10] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[00:30:02] *** Joins: bobb_ (~bobb_@dslb-088-065-184-211.088.065.pools.vodafone-ip.de)
[00:33:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:35:34] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[00:35:54] *** Joins: Rayke (rayke@user/rayke)
[00:35:59] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57) (Quit: Client closed)
[00:36:49] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:41:56] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[00:42:02] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:44:09] *** Quits: john99 (~john99@35.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[00:47:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[00:47:37] *** Quits: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[01:02:26] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:03:17] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:03:20] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 252 seconds)
[01:03:36] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[01:07:55] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 256 seconds)
[01:11:39] *** Praise- is now known as Prase
[01:11:41] *** Prase is now known as Praise
[01:19:29] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (Quit: brb)
[01:20:42] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:34] *** Quits: magla (~gelignite@55d4ca9b.access.ecotel.net) (Quit: Stay safe!)
[01:23:05] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[01:29:52] <kalven> any good header only (small-ish) unit test frameworks out there?
[01:33:45] <OnlineCop> I'm a fan of the Google Test suite, although it's not a header-only framework.
[01:34:00] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f)
[01:34:29] *** Joins: Xardas (~Xardas@149.233.51.127)
[01:36:06] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:36:31] <kalven> gtest is nice, but doesn't fit my requirements
[01:40:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:42] *** ChanServ sets mode: +v npaperbot
[01:42:11] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[01:42:14] <johnny> kalven, you would need to specify smallness or other requirements right? i assume catch2 didn't fit your needs already for example
[01:42:36] <johnny> not that i have an answer tho, i pretty much stopped at catch2
[01:44:37] <kalven> I looked at catch2 and it seems to have grown pretty large (and also has a bunch of .cpp files, not sure if they're optional or not)
[01:45:59] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[01:46:37] *** Joins: Simplar (~Simplar@188.163.93.76)
[01:51:16] <OnlineCop> Depends on how thorough you want the testing suite to be.
[01:52:37] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 240 seconds)
[01:54:58] <xkoncek> another best practices may be obtained by becoming a package maintainer for some linux distro
[01:56:17] <xkoncek> and also you can g++ -fsyntax-only file.hpp to detect if your includes are self-contained
[02:01:23] *** Quits: Moult (~sevenstro@sevenstrokes.net) (Quit: WeeChat 2.8)
[02:03:23] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[02:06:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[02:06:27] *** Joins: x_kuru (~xkuru@user/xkuru)
[02:06:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075) (Ping timeout: 240 seconds)
[02:09:04] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:09:19] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[02:09:25] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 240 seconds)
[02:09:58] *** Joins: c4017w (~c4017@209.52.68.8)
[02:10:05] <MaddHatter> what should I replace std::allocator<T>::reference with? I could just typedef it to T&, but is there something more "correct" than that?
[02:11:23] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[02:11:49] <kalven> OnlineCop: what do you mean?
[02:13:12] <OnlineCop> gtest/gmock use some Python magic in addition to boilerplate C++ in order to allow you to mock out some of your structs/classes (especially which contain private methods). It's not a very lightweight package because of that.
[02:13:17] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[02:14:05] <OnlineCop> If you're using cmake, there's actually a built-in "install this from sources" kludge that I use at work so it will always install the google test suite into my Docker containers.
[02:14:21] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[02:18:22] <kalven> yeah I'm very familiar with gtest, been using it for years. It just doesn't fit the bill right now
[02:24:49] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:25:34] *** Joins: HvszrStykp (~X@81.171.62.86)
[02:32:42] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:40:25] *** Joins: nshire_ (~nshire@47.146.41.156)
[02:42:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:42:58] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075)
[02:43:07] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[02:43:25] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 240 seconds)
[02:43:49] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[02:49:32] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[02:49:35] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[02:50:02] <Led_Zeppelin2> does cmake download depedencies for you if you define it. is that a native feature?
[02:57:05] <Alipha> MaddHatter: T& is good
[02:59:49] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[02:59:56] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075) (Ping timeout: 252 seconds)
[03:05:37] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:07:35] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:08:40] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[03:11:03] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[03:11:35] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[03:11:54] *** Quits: bobb_ (~bobb_@dslb-088-065-184-211.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:11:57] <johnny> Led_Zeppelin2, define it how? with FetchContent or something?
[03:21:30] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[03:28:03] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f) (Quit: Quit)
[03:28:23] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f)
[03:33:28] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[03:40:56] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[03:52:54] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:01:17] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:08:06] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:09:06] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[04:10:11] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:10:43] *** Joins: Cyp (~cyp@213.237.85.9)
[04:12:29] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[04:17:30] *** Quits: TheSchaf (~TheSchaf@p54833485.dip0.t-ipconnect.de) ()
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:28:10] <RandomReader> MaddHatter - pretty much everything is going to be less correct than that, what context requires a replacement?
[04:29:07] <RandomReader> oh, nevermind, I see what you mean
[04:29:50] <RandomReader> sorry, I read that as something else entirely
[04:33:12] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:34:59] <gehn> kalven, boost test is (or can be) header only in my experience, but obvs that doesn't fit the criteria of "small-ish" and not sure if it fits any given person's criteria of "good"
[04:35:59] <kalven> yeah, it's a bit heavy set.. I'm more looking towards something that is a few headers and can be vendored into a repo easily
[04:36:16] <gehn> MaddHatter, isn't that the job of std::allocator_traits?
[04:36:40] <gehn> like it should set that all up for you unless you override with your own, but... do you need your own definition?
[04:37:05] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:37:33] *** Joins: Cyp (~cyp@213.237.85.9)
[04:39:43] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[04:43:04] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[04:43:52] *** Joins: Cyp (~cyp@213.237.85.9)
[04:51:24] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:52:17] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Ping timeout: 240 seconds)
[04:55:09] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[04:56:07] *** Joins: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de)
[04:56:16] *** Joins: zvijezda2 (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net)
[04:57:03] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:57:44] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:57:44] *** Quits: xcm (~xcm@user/xcm) (Read error: Connection reset by peer)
[04:58:09] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:58:13] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 240 seconds)
[04:59:24] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[04:59:25] *** Quits: zvijezda (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[04:59:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:02:13] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[05:02:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:03:52] <RandomReader> he's referring to the reference members being deprecated in '17 and removed in '20
[05:03:56] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[05:04:14] <RandomReader> they're not needed, they don't mean anything anymore, so there's no replacement members anywhere
[05:05:41] <RandomReader> https://wg21.link/p0174#2.2 has rationale
[05:06:03] <RandomReader> for everything else, yeah, allocator_traits is the way to go
[05:08:26] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6ebd:e967:bab2:d4bc:3c08) (Read error: Connection reset by peer)
[05:09:12] *** Joins: p-i- (~Ohmu@2403:6200:8978:b697:f055:7cf:11e1:f6f5)
[05:09:15] *** Joins: frost (~frost@user/frost)
[05:09:18] <RandomReader> (which is what I was also thinking of originally, I misread that it was about the reference cases)
[05:13:17] *** Quits: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[05:14:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:19:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:21:49] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[05:26:41] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[05:31:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:34:12] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:40:34] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:42] *** ChanServ sets mode: +v npaperbot
[05:43:19] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[05:45:22] <gehn> ah ok
[05:45:26] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:47:48] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[05:51:02] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:56:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:08:35] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[06:12:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:13:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:16:11] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[06:16:14] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[06:16:14] *** Joins: Roughy (~mdaw45ns@user/roughy)
[06:18:48] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Remote host closed the connection)
[06:23:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[06:26:43] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[06:29:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:30:01] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[06:34:27] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:37:25] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:41:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:42:23] *** Joins: smeso (~smeso@user/smeso)
[06:49:20] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[06:49:27] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:51:18] *** Joins: malloy (~jimery@116.30.220.175)
[07:00:06] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[07:09:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:14:51] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[07:15:50] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[07:21:17] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 240 seconds)
[07:21:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:26:18] *** Joins: adeliktas9 (~adeliktas@i59F5F686.versanet.de)
[07:28:35] *** Quits: adeliktas (~adeliktas@i59F5FB64.versanet.de) (Ping timeout: 256 seconds)
[07:28:35] *** adeliktas9 is now known as adeliktas
[07:31:32] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:40:13] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:80e0:7916:1f5b:8b55) (Ping timeout: 240 seconds)
[07:53:21] *** zvijezda2 is now known as zvijezda
[08:06:48] <yolo> tired of writing socket in c for c++, is there some good c++ wrapper for socket() API family
[08:11:29] <Stryyker> maybe one day we'll get somthing good in the standard
[08:13:15] <yolo> there are a few wrappers but nothing really standing out, or I have not yet find the one
[08:14:11] <yolo> it's interesting that c++ does not have a "strong" set of network library
[08:15:42] <yolo> https://quuxplusone.github.io/blog/2019/10/09/why-no-networking/
[08:17:40] *** Joins: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com)
[08:19:28] <Stryyker> sort of need a new network interface from the OS
[08:20:34] <yolo> to be realistic I am fine with a wrapper of c-socket()-api, even better if it can cover windows-socket
[08:21:19] <yolo> cpp-netlib, poco, asio are some options but I used none yet
[08:24:04] *** Quits: packet_lozenge (~packet_lo@cpe-107-15-195-50.nc.res.rr.com) (Changing host)
[08:24:04] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[08:33:45] <Stryyker> By c socket do you mean the BSD API?
[08:33:52] <yolo> yes
[08:34:19] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[08:34:23] <yolo> https://github.com/tglane/socketwrapper  https://github.com/fpagliughi/sockpp  are the two simple one I am looking into, asio seems an overkill for my small side project
[08:39:28] <yolo> those are not very solid to me, maybe I will still use asio(skip its advanced features)
[08:39:55] *** Quits: DSpider (~DSpider@82.79.237.61) (Quit: Leaving)
[08:45:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[08:46:19] <kalven> asio is mature
[08:52:32] *** Quits: skapate (~Skapata@user/skapata) (Remote host closed the connection)
[08:59:25] <yolo> yes, just build two demos, as long as I don't dig into the coroutine/etc advanced stuff, for simple use cases(a dual duplex server-client) it seems not hard to pick up
[09:00:46] <yolo> a stripped helloworld asio binary is 270KB, only dependency is pthread
[09:00:58] <MaddHatter> eesh. 6 versions later and Boost *still* hasn't sorted out their breaking asio changes? :-(
[09:01:31] <yolo> well for new users, i don't care as long as the new toy is shiny :)
[09:01:57] <yolo> use non-boost asio for now
[09:02:26] <MaddHatter> they changed executor to any_io_executor and their own stuff still hasn't converted
[09:02:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[09:02:47] <yolo> who's at fault, asio or boost?
[09:03:40] <MaddHatter> yolo: this is existing code that's already using boost::process (which uses boost::io_context and boost::asio, which has this issue). Boost's own basic_stream_handle still hasn't updated for the any_io_executor change, and so it doesn't compile on newish compilers.
[09:04:11] <MaddHatter> This was a breaking change in 1.71 or something, and here we are at 1.78 and it's still broken
[09:06:30] <MaddHatter> They have a #define (BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT) to basically revert the any_io_executor change that I was hoping not to use, but if their own crap is still broken, I don't have much choice, I guess. I'm just disappointed that Boost is so broken.
[09:07:11] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[09:11:43] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[09:12:51] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:12:55] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[09:13:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:15:54] *** Joins: Guest21 (~Guest21@2600:6c42:7c00:4e1:27d6:f456:d660:cc20)
[09:16:07] <Guest21> hello
[09:18:18] <yolo> too advanced for me for now, I am using asio alone(i.e. non-boost asio vesion) to avoid that
[09:19:40] <Guest21> would a custom TCP/IP stack be a good project to learn networking
[09:20:08] <Stryyker> to learn? maybe not
[09:20:27] <yolo> stack sounds like a kernel thing
[09:20:34] <Stryyker> normally is
[09:20:39] <yolo> of course you can do it in user space these days
[09:20:54] <Stryyker> sounds more like an implementation detail and less about how to use it
[09:21:15] <yolo> in fact for super high speed, it's preferred, though nowadays the super duper high speed is use hardware to accelerate
[09:21:20] <Guest21> yea i wanna know how computers communicate
[09:22:05] <kalven> writing a custom tcp/ip stack might be a good project if you really want to learn the ins and outs of tcp/ip.. but you don't really need to go that deep to do network programming
[09:22:14] <Guest21> i have an old wii with me and i was surprised it could still open sockets and connect to the internet still
[09:22:15] <yolo> write a stack in user space, then write a socket to use your own stack
[09:24:16] <MaddHatter> the basics of networking like tcp/ip haven't changed in 30+ years
[09:24:16] <Guest21> that sounds good and like it could keep me busy for a while
[09:24:26] <yolo> tap/tun will also be fun and easy to play with
[09:24:55] <Guest21> what is tap/tun
[09:25:17] <johnny> usually fake network interfaces
[09:25:31] <Guest21> so VPN
[09:26:14] <johnny> they are used with vpns indeed
[09:30:26] *** Sevalecan is now known as rmbeer
[09:32:36] *** Quits: Guest21 (~Guest21@2600:6c42:7c00:4e1:27d6:f456:d660:cc20) (Quit: Client closed)
[09:32:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:35:44] *** Quits: ville (~ville@user/ville) (Quit: ville)
[09:36:39] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:37:54] *** rmbeer is now known as Sevalecan
[09:38:03] *** Joins: ville (~ville@user/ville)
[09:40:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:44] *** ChanServ sets mode: +v npaperbot
[10:04:59] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 256 seconds)
[10:09:14] *** Joins: flooded (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[10:22:18] *** Quits: xcm_ (~xcm@static.90.45.69.159.clients.your-server.de) (Remote host closed the connection)
[10:22:35] *** Joins: xcm_ (~xcm@user/xcm)
[10:26:53] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[10:34:24] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Quit: WeeChat 2.8)
[10:39:01] *** Quits: chozorho (~chozorho@2601:146:300:c30::b973) (Quit: cya later allegro alligators!)
[10:41:39] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[10:42:19] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[10:45:00] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:59:54] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[11:02:47] *** Joins: namo (~nomo@95.87.208.95)
[11:04:41] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f) (Quit: Quit)
[11:10:41] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Quit: WeeChat 3.2)
[11:13:32] *** Joins: HvszrStykp (~X@81.171.62.86)
[11:14:30] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:cd8d:9b19:2534:65f0)
[11:19:52] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:21:03] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[11:21:38] *** Joins: ville (~ville@user/ville)
[11:23:56] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Quit: Leaving)
[11:24:47] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[11:29:26] *** Joins: andreasbuhr (~quassel@p5dcf913e.dip0.t-ipconnect.de)
[11:29:29] *** Quits: andreasbuhr (~quassel@p5dcf913e.dip0.t-ipconnect.de) (Client Quit)
[11:31:24] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Quit: WeeChat 3.2)
[11:32:43] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:41:54] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[11:44:11] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:44:51] *** packet_lozenge_ is now known as packetlozenge
[11:46:04] *** Quits: packetlozenge (~packet_lo@user/packet-lozenge/x-7125090) (Client Quit)
[11:54:47] *** Quits: ville (~ville@user/ville) (Quit: ville)
[11:55:05] *** Joins: ville (~ville@user/ville)
[12:12:20] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[12:25:11] *** Joins: robod34 (Username@79.113.195.239)
[12:25:33] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Quit: SureVoIP: http://www.surevoip.co.uk)
[12:25:39] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[12:27:14] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[12:35:36] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[12:50:40] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:54:32] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[12:55:08] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[12:56:50] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (Client Quit)
[12:57:28] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[13:03:13] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f)
[13:03:13] *** Joins: seninha (~seninha@user/seninha)
[13:03:56] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:07:53] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:08:08] *** Joins: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro)
[13:10:38] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:57] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:b697:cd3e:cdb2:bf35:7e26)
[13:17:12] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (Quit: Peace!)
[13:17:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:b697:f055:7cf:11e1:f6f5) (Ping timeout: 240 seconds)
[13:17:23] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:21:25] *** Joins: packet_lozenge_ (~packet_lo@cpe-107-15-195-50.nc.res.rr.com)
[13:22:07] *** Quits: packet_lozenge_ (~packet_lo@cpe-107-15-195-50.nc.res.rr.com) (Changing host)
[13:22:07] *** Joins: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090)
[13:25:02] *** Quits: packet_lozenge_ (~packet_lo@user/packet-lozenge/x-7125090) (Client Quit)
[13:25:49] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:25:51] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[13:32:26] *** Joins: HvszrStykp (~X@81.171.62.86)
[13:40:35] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:45] *** ChanServ sets mode: +v npaperbot
[13:45:56] <p-i-_> My code is creating multiple websockets, and each one requires a token fetch (HTTP GET). But there's a rate-limit of 100ms between fetches from the server.
[13:46:15] <p-i-_> so I need to record t_last_fetch, and wait until system > t_last_fetch+100
[13:46:21] <p-i-_> *system_time
[13:46:52] <p-i-_> Then I do the fetch and increment t_last_fetch by 100ms
[13:48:43] <p-i-_> How can I async-wait until a certain system time has been reached?
[13:49:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:51:05] *** Quits: HvszrStykp (~X@81.171.62.86) (Ping timeout: 256 seconds)
[13:52:13] <TinoDidriksen> p-i-_, https://en.cppreference.com/w/cpp/thread/sleep_for or https://en.cppreference.com/w/cpp/thread/sleep_until
[13:53:58] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:636a)
[14:02:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[14:03:18] <Haohmaru> sleep_until(smells_like<coffee>)
[14:09:06] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[14:12:28] *** Joins: zmt01 (~zmt00@user/zmt00)
[14:13:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[14:22:03] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3073:e411:23e7:f134)
[14:23:49] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:23:55] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:23:57] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[14:30:01] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:47:40] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:47:55] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[14:48:29] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:50:56] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[14:51:25] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[14:52:44] <LordKalma> hey hey
[14:52:46] <LordKalma> !rq
[14:52:46] <nolyc> LordKalma: <hnOsmium0001> I should've quotegrabbed that but anyways...
[14:55:35] <PJBoy> nyuh
[14:58:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[15:01:21] * Haohmaru shuffles nolyc
[15:01:23] <Haohmaru> !rq
[15:01:23] <nolyc> Haohmaru: <PJBoy> yeah you're stupid dumb
[15:03:04] <PJBoy> that was grabbed?!
[15:03:06] <PJBoy> shame one you
[15:07:59] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[15:17:42] <very_sneaky> heh. i didn't realise that you only need to specify the base method virtual, even when you want to override it in multiple levels of inheritence
[15:17:50] <very_sneaky> TIL
[15:20:26] <very_sneaky> i suppose that also applies to virtual destructors in multiple levels of inheritence?
[15:20:36] <very_sneaky> or does it not because they're not overriding?
[15:21:25] <PJBoy> it does apply
[15:21:39] <PJBoy> there's no way to declare a non virtual method with the same name as a virtual one
[15:22:54] <very_sneaky> do you mean and have it give different behaviour?
[15:24:11] <very_sneaky> so, i guess this means that a virtual dtor is only required in the base class, and all children can just implement the implicit dtor unless they manage any owned pointers
[15:24:15] <PJBoy> nah it's just impossible
[15:24:43] <very_sneaky> hm. I'm certainly declaring the same functions virtual in multiple levels of inheritence and it compiles fine - clang-tidy is just throwing me warnings
[15:24:48] <PJBoy> s/name/prototype
[15:25:07] <PJBoy> yeah you can redundantly specify virtual if you want
[15:25:19] <PJBoy> it has no effect
[15:25:24] <very_sneaky> yeah gotcha
[15:25:34] <very_sneaky> i feel like this is a topic i learn about every 6 months and can never remember
[15:25:43] <ville> PJBoy: same name? just shadow it with different overload in a derived
[15:25:50] <PJBoy> modern trend is writing virtual for the base class method and override xor final for all derived classes
[15:26:08] <PJBoy> ville, yeah I sed corrected that >_<;
[15:26:09] <very_sneaky> PJBoy: yeah, that's what clang-tidy wants from me
[15:26:25] <ville> ok
[15:26:47] <very_sneaky> from a dtor perspective, is my above statement correct? > "this means that a virtual dtor is only required in the base class, and all children can just implement the implicit dtor unless they manage any owned pointers"
[15:27:03] <RandomReader> implementing a virtual destructor can also be as simple as:    virtual ~Base() = default;
[15:27:27] <RandomReader> yes to implicit in derived
[15:27:38] <very_sneaky> okay cool
[15:28:43] <very_sneaky> when there are no cleanup considerations, are `virtual ~Base() = default;` and `virtual ~Base() = 0` identical from a behaviour perspective?
[15:28:55] <very_sneaky> noting that i realise one makes the class abstract and the other doesn't
[15:28:56] <RandomReader> no, = default has the compiler generate whatever its default would be
[15:29:19] <RandomReader> = 0 is abstract/missing
[15:29:29] <PJBoy> they're kinda non-mutually exclusive
[15:29:46] <very_sneaky> non-mutually exclusive? you can specify both?
[15:30:00] <RandomReader> an abstract destructor would not be useful, since a destructor is always required
[15:30:05] <PJBoy> {} struct B { virtual ~B() = 0; }; B::~B() = default;
[15:30:05] <geordi>  
[15:30:35] <PJBoy> B is still abstract, so B is unusable without being derived
[15:30:45] <very_sneaky> RandomReader: i've noticed that it's a common pattern to make the destructor pure virtual when nothing else in the class lends itself to that if one wants to make it abstract
[15:30:48] <PJBoy> but if you do derive from it, there's a default generated dtor
[15:31:01] <RandomReader> (there are some interesting corner cases that fall out of the language definitions, but in general, a pure virtual destructor is not normal)
[15:31:12] <RandomReader> but there'd be no reason to make it abstract in that case
[15:31:25] <very_sneaky> PJBoy: is that the desirable way to deal with a pure virtual destructor?
[15:31:30] <RandomReader> like, it's certainly an option, but the underlying question there is "why"
[15:31:39] <PJBoy> I'm with RR on this one
[15:31:40] <very_sneaky> RandomReader: well, unless you actually don't want that class to be instantiated
[15:31:56] <PJBoy> a base class shouldn't only have a dtor
[15:32:00] <PJBoy> what kind of crappy interface is that
[15:32:05] <RandomReader> no, if you don't want it to be instantiated, you make the constructor private
[15:32:17] <RandomReader> and again the underlying question is *why* do you want this behavior
[15:32:53] <PJBoy> however if there was somehow a use-case for pure virtual dtor, then defining that dtor is still needed
[15:33:03] <RandomReader> not saying it's technically wrong or anything .. I'm saying a pure virtual destructor is unusual specifically because any practical use case is also atypical
[15:33:15] <PJBoy> otherwise derived class destruction has no idea what to do with the base class subobject
[15:33:18] <very_sneaky> hm, fiar neough. I mean, that is essentially what I've done. But the answer to that would be to force objects to implement an interface, but not have that interface directly instantiable
[15:33:43] <RandomReader> but if you want them to implement an interface, that *interface* would be pure virtual :P
[15:34:14] <very_sneaky> sure, but only when you have a non-concrete interface
[15:34:23] <very_sneaky> if you have a concrete interface then it might not
[15:34:37] <very_sneaky> one instance of that might be CRTP
[15:34:39] <RandomReader> if it's entirely concrete, it's not an interface at all, and can just be contained
[15:34:49] <RandomReader> CTRP isn't an interface
[15:34:57] <very_sneaky> you _can_ use it that way, though
[15:35:06] <RandomReader> (it's a template, so no virtual behavior makes sense for that, since you can't handle it polymorphically without the template knowledge)
[15:35:19] <very_sneaky> i'm using it atm to provide a `::create()` method on all of my derived classes
[15:35:57] <RandomReader> you're using it to mix-in an implementation
[15:36:02] <PJBoy> does your CRTP base class template derive from some non-template base-base class?
[15:36:03] <RandomReader> which is not a use case for an abstract base
[15:36:54] <very_sneaky> PJBoy: yes
[15:37:17] <PJBoy> well then all the interface stuff should be there
[15:39:38] <very_sneaky> PJBoy: what do you mean when you say _should_?
[15:40:17] <very_sneaky> to be clear, there aren't any pure virtual destructors here, but i still wouldn't want an `ISubscriber` (which implements `create()`) to be instantiable
[15:41:04] <PJBoy> I think if you have some polymorphic interface, it should define whatever functions you want to expose via this interface
[15:41:39] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:42:02] <PJBoy> "should" rather than "must" because obviously you have free will and it's not a compiler error to writing a base class with useful virtual functions
[15:42:13] <PJBoy> *with no
[15:42:27] <very_sneaky> so, you prefer that from a design perspective to separate the concerns of the CRTP base and the functional interface
[15:42:51] <PJBoy> it's a design necessity right?
[15:43:05] <RandomReader> right, C++ is a pile of tools, I'm not arguing for "technically incorrect" here .. it's more about what language features "naturally" go with the intended use cases
[15:43:34] <very_sneaky> no worries, i'm just trying to clarify what you both mean :)
[15:43:47] <PJBoy> if I have some base template Base<typename Derived>, then I can't write `Base* p = new DerivedA;` where `class DerivedA : Base<DerivedA>`
[15:43:57] <RandomReader> CRTP is useless as a polymorphic interface because there is no "CRTP", only "CRTP<foo>" .. which embeds exactly the type information that polymorphism would erase
[15:44:52] <RandomReader> so the thing being designed is either a polymorphic interface (which would then have pure virtual functions, since that's its goal here), *or* CRTP, but not both
[15:44:53] <PJBoy> if you have `class Base<typename Derived> : BaseBase` though, then you could go ahead and write `BaseBase* p = new DerivedA;`
[15:45:06] <PJBoy> and then it's clear that BaseBase has to provide all the interface that gets used
[15:45:14] <RandomReader> (and neither case would require a pure virtual destructor)
[15:45:29] <very_sneaky> ah, i see what you're saying.
[15:46:49] <PJBoy> I have some experience writing CRTPs derived from base classes ^_^;
[15:49:59] <PJBoy> e.g. https://github.com/PJBoy/Metroid-level-editor/blob/master/os_windows_m.ixx#L136-L194
[15:52:20] *** flooded is now known as _flood
[15:53:48] <PJBoy> also wow
[15:54:07] <PJBoy> https://github.com/PJBoy/Metroid-level-editor/blob/master/os_windows_m.ixx#L694-L701
[15:54:25] <PJBoy> 8 lines to define a one-liner function
[15:54:38] <RandomReader> hehe
[15:54:56] *** Joins: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl)
[15:55:11] <very_sneaky> this is my _general_ structure atm: https://godbolt.org/z/oWrsa46xY
[15:55:28] <very_sneaky> doesn't compile, it's missing some detail, but that should be enough to describe the broad order of operations
[15:56:22] <very_sneaky> it also means i can create collections like std::vector's of `Subscriber` rather than being restricted to the CRTP type
[15:56:45] <PJBoy> I think the names of ISubscriber and Subscriber should be swapped
[15:57:10] *** Joins: HvszrStykp (~X@81.171.62.86)
[15:57:27] <paul424> Now I read the stroustrup book , the blue one with that mountain, in the paragraph on namespaces it tries to construct a simple lexer parser... and here is the question : why all the parser functions like terminal, experssion, operator etc. return a double ( that's fine for me ) AND take a "bool get" as a parameter. What inherited in parser construct that such flag is required ?
[15:57:29] <PJBoy> lines 4-9 there are a canonical interface
[15:57:36] <PJBoy> whereas the CRTP is more like a partial implementation
[15:57:39] <very_sneaky> yeah, i think i probably agree with you
[15:58:08] <very_sneaky> but i also like the look of std::vector<Subscriber> better than std::vector<ISubscriber> lol
[15:58:30] <PJBoy> fair, but I would certainly not call the CRTP `Ixxx`
[15:58:43] <PJBoy> Mixin perhaps
[15:58:57] <PJBoy> Crtp perhaps
[15:59:09] <very_sneaky> ah derp - one important thing that's missing is that `virtual void init() = 0` lives in the CRTP class, and is implemented in the `DerivedSubscriber`
[15:59:26] <very_sneaky> so each class can change how it initialises/what it subscribes to be default
[15:59:59] <PJBoy> would you ever use `init` polymorphically?
[16:00:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[16:00:18] <PJBoy> like via reference or pointer to ISubscriber<SomeType>
[16:00:25] <very_sneaky> yes, this does - init() is called in create()
[16:00:50] <PJBoy> the normal CRTP thing to do would be `Derived::Subscriber::init()`
[16:01:00] <PJBoy> non-polymophically
[16:01:10] <PJBoy> * DerivedSubscriber::init()
[16:01:13] *** Joins: xkuru (~xkuru@user/xkuru)
[16:01:41] <very_sneaky> does that work? what if init doesn't exist on the DerivedSubscriber interface?
[16:01:51] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f) (Quit: Quit)
[16:02:20] <PJBoy> if there's a base class impl, it'll use that
[16:02:28] <PJBoy> otherwise you'll get an error, which you probably want
[16:02:35] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:02:42] <PJBoy> though I should double check that it does call a base class impl
[16:04:24] *** Quits: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl) (Quit: ChatZilla 0.9.92-rdmsoft [XULRunner 35.0.1/20150122214805])
[16:04:39] *** Joins: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl)
[16:05:30] <PJBoy> { D().g(); } template<typename D> struct B { void f() { static_cast<D&>(*this).init(); } void init() { BARK; } }; struct D : B<D> { void g() { f(); } };
[16:05:31] <geordi> B<D>::init() [with D = D]
[16:05:33] <PJBoy> yeah there you go
[16:06:16] <PJBoy> I misremembered `DerivedSubscriber::init()`, it has to be `static_cast<DerivedSubscriber&>(*this).init()` or equivalent
[16:07:31] <very_sneaky> would it have to?
[16:07:39] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Read error: Connection reset by peer)
[16:07:40] <paul424> ... because the book doesn't explicitly mention  what is it for ....  ?
[16:08:12] <very_sneaky> in create() we have a handle to a pointer to the DerviedSubscriber, so presumably it would still be the same subscriber->init() call
[16:08:20] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[16:09:20] <PJBoy> right, that should be fine then
[16:10:08] <very_sneaky> paul424: i'm not sure anybody here is going to be able to answer a question like that without: a) a worked example that you can link someone to, or b) being much more explicit about exactly which book it is, and hope that someone has a copy handy to go and look at the examples you're talking about
[16:10:52] <PJBoy> https://godbolt.org/z/e3EPb7nso lot more straight forward in your example
[16:11:00] <very_sneaky> PJBoy: right, so, to clarify, you're suggesting moving the pure virtual declaration of `init()` to the `Subscriber` base, rather than having it in the CRTP base
[16:11:28] <PJBoy> my advice depends on if init is supposed to be used polymorphically via pointer/reference to base or not
[16:11:31] <paul424> oki ... I mean of course Stroustrup's The C++ Programming Language
[16:11:47] <PJBoy> it sounds like it's being used only when the concrete derived type is known
[16:12:09] <PJBoy> in which case I would keep init non-virtual and declared/defined in the CRTP class and its derived classes
[16:12:31] <very_sneaky> it still doesn't _force_ the derived classes to implement it though, right?
[16:12:44] <PJBoy> you can force derived classes to implement it if you want
[16:13:06] <PJBoy> depending on what you mean exactly
[16:13:20] <PJBoy> virtual functions aren't required to be defined in the "most derived" class
[16:13:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[16:13:33] <PJBoy> similarly `init` in that paste doesn't need to be defined in the "most derived" class
[16:13:48] <PJBoy> but you can add a static_assert for it
[16:14:33] <PJBoy> no such option is available to force virtual functions to be implemented in the most derived class
[16:14:36] <very_sneaky> so we're talking about the same thing, this is what I currently have: https://godbolt.org/z/cM33K3GMd
[16:14:48] *** Quits: mattgirv (quassel@apps.fossgalaxy.com) (Ping timeout: 268 seconds)
[16:15:04] <PJBoy> right
[16:15:36] <very_sneaky> i think not requiring it in the most derived thing is fine
[16:15:43] <PJBoy> I would go as far as to say the whole point of CRTP is to not need to define virtual functions
[16:15:53] <very_sneaky> as long as it's required by the thing that immediately inherits from the crtp base
[16:15:59] <PJBoy> you know exactly what the derived type is because of the template
[16:16:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:e050:482e:d5a8:4b1b)
[16:16:02] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:e050:482e:d5a8:4b1b) (Changing host)
[16:16:02] *** Joins: skapata (~Skapata@user/skapata)
[16:16:22] <PJBoy> so you don't need vtable shenanigans, you can just call the right function directly
[16:17:03] <PJBoy> if you remove your line 23, it all still works
[16:17:30] <PJBoy> if you remove the init definition from SomeOtherClass, it will then break correctly
[16:17:37] *** Joins: qqlq (41d9a4cfcf@2604:bf00:561:2000::2c0)
[16:18:18] <very_sneaky> heh, interesting
[16:18:38] <very_sneaky> with gcc the error message is actually better without the pure virtual definition in the crtp class
[16:18:44] <PJBoy> you can go one step further like I did in my github file and allow the derived class to optionally implement the function
[16:19:21] <PJBoy> which wouldn't matter for this use-case, but cool to note
[16:20:57] <very_sneaky> paul424: I should also say, you're much more likely to get a response by providing some code as an example :) odds are small someone will remember the book well enough or go out of their wya to find what you're talking about
[16:21:49] <PJBoy> oh yeah didn't mean to drown you out, paul424
[16:22:09] <PJBoy> but it's not clear to me what kind of code you're talking about either
[16:23:59] <very_sneaky> PJBoy: which function do you allow to be optionally implemented?
[16:24:28] <PJBoy> window precedure
[16:24:41] <PJBoy> it optionally gets registered as a callback when creating the window
[16:24:55] <PJBoy> if one isn't provided by the derived class, no callback needs registering
[16:25:35] <PJBoy> ctrl+f for hasWindowProcedure
[16:25:38] <very_sneaky> huh.
[16:25:57] <very_sneaky> yeah i'm looking at it, but it's beyond my comprehension
[16:26:01] <PJBoy> `wcex.lpfnWndProc = Derived::windowProcedure` is the key line
[16:26:09] <very_sneaky> i haven't seen this syntax before: `detail::template hasWindowProcedure<T>`
[16:26:31] <PJBoy> ah yeah that's annoying
[16:27:01] <PJBoy> tldr it's there for technical reasons
[16:27:33] <PJBoy> the Window class isn't complete yet, so it doesn't know that `detail` is a class that has a template called hasWindowProcedure yet
[16:27:50] <PJBoy> so I have to tell the compiler that it's a template, because it otherwise assumes it's a variable
[16:28:20] <very_sneaky> ah, makes sense
[16:28:26] <very_sneaky> i have a lot to learn, jesus
[16:29:03] <PJBoy> if you ever have to specify `template` like that, you're doing some obscure shit
[16:29:03] <very_sneaky> what is this btw? a level editor?
[16:29:21] <PJBoy> yeah
[16:29:32] <PJBoy> it's horrendously broken atm because I'm swapping out the graphics library
[16:29:45] <PJBoy> and I don't work on it too much now that I have a C++ day job
[16:29:51] <very_sneaky> for a particular game? or does it just psit out "level" files in some specific format?
[16:30:04] <very_sneaky> s/psit/spit/g
[16:30:13] <PJBoy> the aim is super metroid, metroid fusion and metroid zero mission
[16:30:14] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[16:30:21] <PJBoy> you'd edit the ROM files
[16:30:29] <very_sneaky> gotcha. cool
[16:30:52] <PJBoy> I know all the data structures for those games, so there's a fair amount of potential for sharing code
[16:31:04] <PJBoy> possibly even copying assets between those games
[16:31:13] <PJBoy> that's my ambition anyway
[16:31:14] <very_sneaky> i do like the idea of a project that requires the usage of graphics
[16:31:24] <very_sneaky> it's an area that is pretty black magic to me atm
[16:31:32] <PJBoy> it's the worst thing
[16:31:55] <very_sneaky> lol yeah i can imagine there are some pretty bad api's
[16:32:03] <PJBoy> and it's challenging my ability to design code
[16:32:27] <PJBoy> this whole project actually
[16:33:06] <PJBoy> like you have the UI, which more-or-less drives the program
[16:33:23] <PJBoy> menus, drawing, commands, any kind of interaction
[16:33:46] <very_sneaky> i'm right there with you. I'm trying to tackle distributed communication/messaging systems and i'm realising i just don't know enough about different software design patterns to understand how i can go about tackling some of these problems
[16:33:59] <PJBoy> but I want to keep all the UI stuff separated from all the actual ROM hacking code
[16:34:19] <PJBoy> it should be possible to swap out this terrible windows API for Qt down the line for example
[16:34:25] <very_sneaky> naive me - can't you just create a thread that listens for each of those actions?
[16:34:28] <PJBoy> or to reuse the ROM hacking stuff in another unrelated project
[16:34:53] <PJBoy> but then I need to call back to the UI to actually do visual things, or to make it drive other parts of the program
[16:35:10] <PJBoy> so I'm like "how do I manage this back and forth relationship without overly coupling"
[16:35:17] <very_sneaky> i mean it doesn't sound too dissimlar from my problem tbh
[16:35:20] *** Joins: supernova (~quassel@2405:9800:ba11:6207:c0e6:d65b:5b8c:aa30)
[16:35:22] <very_sneaky> mine is a simulation engine
[16:35:28] *** Joins: bobb_ (~bobb_@dslb-088-066-141-105.088.066.pools.vodafone-ip.de)
[16:35:56] <very_sneaky> so, yeah, gotta deal with synchronisation of disparate events - in yours you just have to then have some `render()` method at the end of the loop
[16:36:28] <very_sneaky> i've found the cherno's series on creating game engines pretty interesting
[16:38:24] <PJBoy> currently I've given the UI class a pointer to the ROM class where it can tell it to do whatever it needs to do
[16:38:59] <PJBoy> and the relationship is like "<UI> hey I need a list of rooms so I can make this list of rooms to select"
[16:39:18] <PJBoy> and all the technical work of processing the rooms from the game is done in the ROM class as it should be
[16:39:37] <PJBoy> all the UI work of taking a list and creating UI elements for it is done in the UI class
[16:39:50] <very_sneaky> yeah gotcha
[16:40:02] <PJBoy> it sounds fine, but I'm not completely convinced yet
[16:40:05] <very_sneaky> i guess the way i'm trying to handle that is with this pub/sub pattern
[16:40:34] <very_sneaky> so rather than having a handle to the object, a message is distributed and the concerned entity pops it off it's own internal message queue
[16:41:20] <PJBoy> hoping to avoid threads and message queues and all that
[16:41:31] <PJBoy> well, for now
[16:41:56] <PJBoy> that stuff makes debugging a nightmare
[16:42:08] <PJBoy> and I end up having to do a fair amount of that sometimes
[16:42:29] <very_sneaky> i don't have any threads yet, but hoping to get there
[16:42:36] <very_sneaky> one step at a time, lol
[16:42:57] <very_sneaky> but yeah - i'm sure it is a debugging nightmare
[16:44:34] <very_sneaky> PJBoy: how's your vaunt with conan going?
[16:44:49] <PJBoy> we've finished our proof of concept
[16:45:04] <PJBoy> waiting to see what some of the other engineers and managers think now
[16:45:13] <PJBoy> I'd say it was a resounding success
[16:45:23] <PJBoy> got MSVC and clang-cl to work
[16:45:49] <very_sneaky> awesome. any pain points?
[16:45:57] <PJBoy> getting MSVC and clang-cl to work
[16:45:59] <PJBoy> <_<
[16:46:34] <PJBoy> the conan profiles took some research and trial/error to write
[16:46:50] <PJBoy> and cmake ends up needing to be invoked in a particular way
[16:46:59] <PJBoy> it's fine now of course
[16:47:26] <very_sneaky> do you invoke cmake directly or through conan?
[16:47:39] <PJBoy> managed to stick to the txt conanfile, which I'm pretty happy with
[16:47:45] <PJBoy> the former
[16:47:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:47:55] <PJBoy> decoupling the build tool and package manager
[16:48:05] <very_sneaky> well yeah, that's all you do need unless you want to consume whatever you're developing from another project
[16:49:26] <very_sneaky> ah, no i just meant you can either execute `cmake -S build ...` or you can equivalently do `conan build . --build-folder=build`
[16:49:32] <very_sneaky> both do the same thing without any additional config
[16:49:43] <PJBoy> ah right
[16:49:52] <PJBoy> the former of those
[16:49:53] <very_sneaky> but thinking about it, if you don't have a conanfile.py maybe that isn't an option
[16:50:45] <PJBoy> not too interested in using conan beyond the initial build
[16:50:58] <PJBoy> all the tooling wants to use cmake
[16:51:06] <very_sneaky> i'm trying to work out what's _simpler_
[16:51:26] <very_sneaky> my challenge is that nobody is familiar with either conan or cmake at work, so it won't make a difference to them
[16:51:54] <PJBoy> I think cmake(?)
[16:52:05] <very_sneaky> so if conan is the only cli tool they engage with that might be positive, though also maybe just confusing - sounds like it might not even be possible for consumer only projects
[16:52:09] <PJBoy> but I'm kinda swayed towards cmake because I need to tell the tools how to use it anyway
[16:52:14] <very_sneaky> my thought was it's 1 tool vs 2
[16:52:53] <very_sneaky> actually, i think people will want to build directly from visual studio so it's probably a moot point
[16:53:14] <very_sneaky> PJBoy: how much config does your cmake command require?
[16:53:33] <PJBoy> a lot
[16:53:37] <PJBoy> oh the command
[16:54:09] <very_sneaky> yeah sorry, to be clear, the above conan command invokes cmake
[16:54:42] <PJBoy> cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE:STRING=Debug ../proj_src" on linux, which was straight forward
[16:54:47] <very_sneaky> `conan build` just calls `build()` in the conanfile.py, and if cmake is being used, that's what gets called
[16:55:06] <PJBoy> and the -G on windows was "Visual Studio 16 2019", which was less easy to figure out
[16:55:19] <very_sneaky> yeah i remember
[16:55:26] <PJBoy> linux gets a sensible default without the -G, windows doesn't
[16:55:31] <very_sneaky> gotcha, so that's the configure part - do you build from the ide or cli?
[16:55:53] <PJBoy> spent most of my time building via the cli for the prototyping
[16:56:11] <PJBoy> but the workflow in practice would be building via IDE
[16:56:18] <very_sneaky> yeah makes sense
[16:56:40] <very_sneaky> have you used the visual studio/cmake integration much?
[16:56:53] <LordKalma> Qt creator is probably the best cmake ide
[16:56:55] <LordKalma> honestly
[16:57:04] <LordKalma> I edit on VScode, and use Qt Creator for building/debugging
[16:57:13] <PJBoy> tried to use the visual studio SSH/rsync to linux with cmake workflow
[16:57:19] <PJBoy> but it was a colossal failure
[16:57:25] <LordKalma> automatic conan handling, for example, and some more nice things
[16:57:33] <PJBoy> and on the windows side we just settled for generating the project file
[16:57:57] <PJBoy> would have liked to try the first class cmake support on windows, but eh
[16:58:03] <PJBoy> windows is a secondary concern for our project
[16:58:08] <very_sneaky> we use .sln's to build almost exclusively atm, and that means everyone's familiar with visual studio so i can't imagine people will switch - wondering how different it's going to be using cmake instead
[16:58:40] <PJBoy> oh I'll tell you what though
[16:58:42] <very_sneaky> i'm just trying to get us to a point where people can choose their own dev tools in a meaningful way lol
[16:58:49] <PJBoy> we have a post build event to run the unit tests
[16:59:04] <PJBoy> and the VS project that cmake creates has the ugliest god damn post build script
[16:59:23] <very_sneaky> really? it doesn't just invoke ctest?
[16:59:23] <PJBoy> so unit test errors end up spewing this wrapped batch code
[16:59:36] <PJBoy> nah we have a uh
[16:59:43] <PJBoy> "bespoke" unit test framework
[16:59:44] <very_sneaky> or cmake --build test -- or whatever
[16:59:50] <very_sneaky> rah yes, i'm familiar :P
[17:00:19] <PJBoy> I'd like to move towards a proper framework, but we have an enormous number of tests
[17:00:40] <very_sneaky> what do you guys develop? library/executable..?
[17:01:18] <PJBoy> yes
[17:01:25] <very_sneaky> both?
[17:01:40] <PJBoy> we develop a lot of stuff
[17:01:44] <PJBoy> tldr a TV software stack
[17:01:56] <LordKalma> WebOS? :D
[17:02:19] <very_sneaky> yeah, large number of tests is a challenge. we have a library with >5500 unit teststhat mostly validate behaviour. it's an enormous pain because when we get new upstream library versions a lot of them fail and it's super hard to tell if they're failing meaningfully
[17:02:31] <very_sneaky> ah nice
[17:02:41] <PJBoy> we have like 100 subsystems with like 10,000 build options
[17:03:01] <PJBoy> some example programs to go with them
[17:03:08] <PJBoy> different archs
[17:03:22] <very_sneaky> why did you want to avoid conanfile.py in that case? I would have thought having conan manage your internal libs would be useful too
[17:03:46] <PJBoy> oh I'm not avoiding using a python script if it helps
[17:03:54] <PJBoy> I'm just happy that the text file has done so much
[17:04:03] <very_sneaky> ahh, cool.
[17:04:22] <very_sneaky> the text file is for consumer only projects, the python file is required to export a project as a package
[17:04:38] <very_sneaky> so, if you only want to bring in deps then the text file is fine
[17:04:44] <PJBoy> yeah we'll get there eventually I'm sure
[17:04:49] <LordKalma> the advantage of a conanfile.py is that you can control your cmake building with it as well
[17:05:00] <LordKalma> so like `conan install .` gives you a managed environment
[17:05:03] <LordKalma> but anyway
[17:05:06] <PJBoy> I'm hoping for as much simplicity as possible, for obvious reasons
[17:05:08] <LordKalma> you have to start good from the bottom
[17:05:13] <LordKalma> good cmake, proper cmake
[17:05:16] <LordKalma> and go from there
[17:05:17] <very_sneaky> LordKalma: do you use `conan build .` to manage your builds? or invoke cmake directly?
[17:05:27] <LordKalma> as I said, I use Qt Creator
[17:05:32] <very_sneaky> ah, of course
[17:05:36] <LordKalma> and in the last two months I've been working on a node project hahaha
[17:05:41] <very_sneaky> i feel like an alien, nobody else does what i do lmao
[17:05:49] <LordKalma> Qt Creator has an auto-conan/vcpkg handling system
[17:06:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:06:02] <LordKalma> which invokes them with the right arguments and feeds it to cmake transparently
[17:06:08] <LordKalma> so it's like heaven
[17:06:08] <very_sneaky> that is handy
[17:06:21] <LordKalma> and it's baked in
[17:06:27] <very_sneaky> i'm trying to learn gdb, so i'm sticking with vim for the moment :P
[17:06:34] <LordKalma> there's also a Conan plugin for Qt Creator for some reason, which is useless and shit
[17:07:13] <LordKalma> https://bugreports.qt.io/browse/QTCREATORBUG-25848
[17:07:26] <very_sneaky> yeah i'll need to really run the visual studio plugins through their paces
[17:07:34] <LordKalma> "So, I mostly care about CMake projects, and I noticed that with those, Qt Creator already handles conan and vcpkg" "So what's the Conan extension for? Qmake projects? Or something I'm missing?"
[17:07:39] <LordKalma> I still have that question
[17:08:50] <very_sneaky> isn't that just that it doesn't have a profile defined or something
[17:09:21] <LordKalma> well, the thing is, with Qt creator you deal with "kits"
[17:09:31] <very_sneaky> hm. i guess that is a weird one - it's not reading from the default profile location in that case
[17:09:36] <LordKalma> and the Qt Creator's own conan/vcpkg auto handler does everything
[17:09:40] <LordKalma> and the extension doesnt?!
[17:09:44] <LordKalma> the extension is useless and shit
[17:09:48] <LordKalma> and just confusing
[17:09:49] <very_sneaky> though, that does make sense because it should be trying to force qt to be the default build agent
[17:10:00] <LordKalma> because you see the plugin menu and think "oh I want that"
[17:10:02] <LordKalma> and no you don't
[17:10:17] <very_sneaky> lol
[17:10:22] <LordKalma> Qt Creator's bundled conan/vcpkg for cmake is great, amazing, "just works" (TM)
[17:10:28] <LordKalma> and the plugin is shit
[17:10:30] <very_sneaky> so, 7 months no reply
[17:10:53] <very_sneaky> i associate that kind of responsiveness with jira for some reason
[17:11:01] <very_sneaky> i think atlassian have scarrede me
[17:11:13] <LordKalma> 7 months? HAHAHAHAHA: https://bugreports.qt.io/browse/QTBUG-6864
[17:11:31] <very_sneaky> yes, this is what i mean :P
[17:11:53] <LordKalma> on the other hand, I've had them fix me bugs under 24h
[17:12:29] <LordKalma> https://bugreports.qt.io/browse/QTCREATORBUG-25847
[17:12:35] *** Joins: paulpaul1076 (~paulpaul1@95-29-4-72.broadband.corbina.ru)
[17:12:36] <LordKalma> few minutes short of 24h
[17:12:52] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:13:02] <very_sneaky> i can't believe bitbucket still doesn't support checkboxes
[17:13:48] <very_sneaky> https://jira.atlassian.com/browse/BCLOUD-8586
[17:13:56] <very_sneaky> LordKalma: that is pretty reasonable.
[17:14:04] <LordKalma> reasonable?!?! it's amazing
[17:14:16] <very_sneaky> well, lets not go too far :P
[17:14:22] <paul424> ehem how do I use such sophisticated tool as wandbox -- there are  options anywhere, but not a one to publish code and get a link to it ... >_>
[17:14:30] <very_sneaky> i had a pr merged into conan in under 6 hours i think
[17:14:40] <LordKalma> you clearly have unreasonable expectations
[17:14:52] <very_sneaky> i rate on a bell curve, that's all ;)
[17:14:55] <LordKalma> paul424, you have to click run before the link to share appears
[17:15:04] <LordKalma> I have that on wandbox as well
[17:15:24] <very_sneaky> paul424: and the share button is just above the terminal that appears
[17:15:57] <very_sneaky> also look at godbolt.org - might be easier to use
[17:22:34] <LordKalma> takes KDAB to add to Qt something other languages have since ages: https://www.kdab.com/signals-slots-properties-bindings/
[17:22:42] <LordKalma> (and takes Qt to put these things in C++)
[17:22:43] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[17:23:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:23:18] <LordKalma> there isn't a single JS framework without reactive bindings and ReactiveUI is a popular framework to build UI frameworks on C#
[17:23:54] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[17:26:08] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:26:30] *** Joins: rpav (~rpav@user/rpav)
[17:28:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:28:29] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:28:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:29:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[17:30:04] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:31:14] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:31:39] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:33:22] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:33:27] *** Joins: pulse (~pulse@user/pulse)
[17:33:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:34:13] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[17:34:15] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:34:55] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:36:14] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:36:25] <PJBoy> > brexit
[17:37:29] <PJBoy> so this is a system for writing setters outside the class
[17:37:42] <LordKalma> wut?
[17:38:02] <PJBoy> like you go to set `width` which is a Property<int>
[17:38:23] <PJBoy> and it calls the callback you register
[17:38:34] <PJBoy> which is a kind of setter
[17:39:00] <PJBoy> unless it doesn't allow you to customise the value written
[17:39:39] <PJBoy> in which case it's just an event callback thingy
[17:40:32] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:3073:e411:23e7:f134) (Ping timeout: 240 seconds)
[17:40:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:46] *** ChanServ sets mode: +v npaperbot
[17:43:51] <paul424> https://pastebin.com/WA9EyM5F how about this , what bool get is for ?
[17:50:56] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[17:52:05] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[17:53:27] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[17:53:41] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:57:09] *** Parts: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl) ()
[17:57:31] *** Joins: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl)
[18:02:10] <xkoncek> are there any commented examples on libevent?
[18:02:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[18:04:53] <xkoncek> this exists but... http://www.wangafu.net/~nickm/libevent-book/
[18:06:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f)
[18:10:19] *** Joins: kariosfox (~kariosfox@staticline-31-182-156-155.toya.net.pl)
[18:11:20] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[18:13:00] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:20:38] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[18:20:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[18:21:37] *** Quits: paulpaul1076 (~paulpaul1@95-29-4-72.broadband.corbina.ru) (Remote host closed the connection)
[18:23:34] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[18:23:56] <Led_Zeppelin2> How does one figure out the library name when linking with -l ?
[18:24:14] *** Joins: cpuid (~cpuid@user/cpuid)
[18:25:33] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c993:298f:5351:f526)
[18:26:33] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:27:55] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[18:30:30] <Haohmaru> -lOMG -> "libOMG.a"
[18:39:06] *** Joins: magla (~gelignite@55d42ff9.access.ecotel.net)
[18:42:53] <xkoncek> Led_Zeppelin2 `pkg-config --libs <start with the library name and then smash tab>`
[18:43:16] <xkoncek> no, that's something different
[18:46:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:46:37] <LordKalma> ooorrrrr you use a decent build system :p
[18:53:10] <LordKalma> PJBoy, vs 2022 update day
[18:54:12] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[18:56:51] *** Quits: kariosfox (~kariosfox@staticline-31-182-156-155.toya.net.pl) (Quit: Connection closed)
[18:57:56] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[18:59:31] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[18:59:52] *** Joins: pulse (~pulse@user/pulse)
[19:00:29] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[19:03:32] *** Joins: noarb (~noarb@user/noarb)
[19:06:51] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:08:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:08:24] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:10:12] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:6eac:a784:372a:6218)
[19:10:12] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:6eac:a784:372a:6218) (Changing host)
[19:10:12] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:13:21] *** Quits: paul424 (~chatzilla@apn-46-77-140-37.dynamic.gprs.plus.pl) (Remote host closed the connection)
[19:15:55] <Led_Zeppelin2> xkoncek, thanks mate.
[19:16:11] <Led_Zeppelin2> Haohmaru, thanks
[19:17:57] <Haohmaru> !fact
[19:17:58] <nolyc> Haohmaru: In a declaration T D the decl-specifier-seq T determines the type T.
[19:18:14] <PJBoy> LordKalma, I update every time I open VS >_>
[19:19:09] <LordKalma> 2022 preview 2 released couple hours ago, just that
[19:21:00] <Haohmaru> is your IDE being updated in realtime or what
[19:21:22] <PJBoy> if only
[19:22:07] <Haohmaru> soon they're gonna just provide it as a service you'd receive pictures of the IDE in realtime and you'd send mouse coordinates and key events to the server
[19:22:20] <LordKalma> Visual Studia :p
[19:22:35] *** Quits: bobb_ (~bobb_@dslb-088-066-141-105.088.066.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:22:44] <Haohmaru> Visual Cloudio
[19:23:57] *** Joins: Raziel (~Raziel@user/raziel)
[19:25:46] <PJBoy> clang 13 in the new VS
[19:26:09] <LordKalma> I noticed
[19:26:13] <Haohmaru> geordi, -v
[19:26:14] <geordi> GCC 12.0.0 20220101 (experimental)
[19:26:23] <PJBoy> the ability to commit lines of text
[19:26:26] <PJBoy> that's pretty cool
[19:26:35] <LordKalma> vscode has that since forever
[19:26:39] <LordKalma> commit selection is great
[19:26:52] <LordKalma> *stage selection, gotta have the terminology right
[19:27:11] <PJBoy> yo tab colours?
[19:27:15] <PJBoy> I like that
[19:27:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:884b:5596:b69:cf1f) (Quit: Quit)
[19:28:03] <PJBoy> damn it, they still haven't fixed my bugs
[19:30:42] <PJBoy> oh they actually have fixed the bug
[19:30:46] <PJBoy> I better test it
[19:31:46] <PJBoy> my other bug is still open though
[19:33:26] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:35:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[19:37:09] <Haohmaru> !fact
[19:37:10] <nolyc> Haohmaru: A default argument shall not be specified for a parameter pack.
[19:39:28] *** pah is now known as pa
[19:40:09] <Led_Zeppelin2> is there a CMake to Makefile generator? I have something simple in Cmake like this: https://pastebin.com/RYWf8Gv6 would like to convert it to makefile or shell.
[19:41:09] <imMute> cmake -G"Unix Makefiles"   ??
[19:41:29] *** Quits: AmR (~AmREiSa@156.199.28.131) (Ping timeout: 252 seconds)
[19:41:54] *** Joins: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de)
[19:43:35] <xkoncek> are the C elisis parameters handled by manipulating the stack?
[19:44:07] <imMute> va_args?
[19:45:10] <xkoncek> yes that
[19:45:45] <Led_Zeppelin2> Inline, cmake -G"Unix Makefiles" CMakeList.txt?
[19:46:39] <imMute> xkoncek: I think the caller pushes all the arguments on the stack and then the va_ stuff just pulls things off the stack based on what types you use (which would have to match the types actually pushed on or things aren't going to work, obviously)
[19:47:43] <xkoncek> that actually sounds quite useful for type-erasure and if you want to keep your header / impl separate
[19:47:56] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:47:57] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[19:47:59] <Led_Zeppelin2> nvm. I got it
[19:48:43] <xkoncek> maybe not any more than converting a parameter pack to a std::span
[19:48:56] <xkoncek> *template parameter pack
[19:49:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:49:44] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[19:50:23] *** Quits: supernova (~quassel@2405:9800:ba11:6207:c0e6:d65b:5b8c:aa30) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:51:15] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[19:53:18] <xkoncek> https://gcc.gnu.org/wiki/cxx-modules (last edited 2021-01-18 16:30:20
[19:55:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[20:00:06] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[20:03:23] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 256 seconds)
[20:04:40] *** Quits: zyzzyxdonta (~zyzzyxdon@ip5f5aa13a.dynamic.kabel-deutschland.de) (Quit: Leaving)
[20:07:38] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:10:31] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[20:11:43] *** Joins: AmR (~AmREiSa@156.199.28.131)
[20:14:03] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:17:51] *** Quits: magla (~gelignite@55d42ff9.access.ecotel.net) (Quit: Stay safe!)
[20:25:59] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[20:26:23] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:26:48] *** Joins: fundies (~fundies@047-014-230-095.res.spectrum.com)
[20:27:06] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[20:29:38] <fundies> Hi, I'm having a strange crash on exit in my program so I wanted to rebuild it with asan (-fsanitize=address -fno-omit-frame-pointer). However, after doing so it wont open and just hangs. Killing it in gdb shows it appears to be stuck on 0x00007ffff44d8849 in __futex_abstimed_wait_common64 () from /usr/lib/libpthread.so. Any ideas how I can fix this?
[20:31:11] <PJBoy> maybe try -fsanitize=thread instead
[20:33:25] *** Quits: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 240 seconds)
[20:33:36] <ville> fundies: -fsanitize=address,leak,undefined is a pretty good starter, but as PJBoy said you probably want thread in this case
[20:34:15] *** Joins: paul424 (~tom@ip-37-248-159-146.multi.internet.cyfrowypolsat.pl)
[20:34:25] <fundies> can you use all 3?
[20:34:30] <ville> yes
[20:34:52] <ville> there are handful that can't be used with each other, but those three should be fine
[20:35:10] <PJBoy> thread is the most picky one
[20:35:53] <fundies> sorry I meant all 4 then thread,address,leak,undefined is valid?
[20:36:02] *** Quits: DrMax (~DrMax@node-1w7jra94757fzqkincqfc6jpy.ipv6.telus.net) (Ping timeout: 240 seconds)
[20:36:21] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:36:49] <ville> no, address can't be used with thread
[20:37:15] <rpav> you can't use address and thread
[20:37:27] <ville> (or leak for that matter)
[20:37:29] <rpav> really i think you don't want to use anything but thread with thread
[20:37:38] <fundies> hmm ok
[20:37:50] <rpav> also i think leak is implicit with address now
[20:38:28] <fundies> https://gist.github.com/fundies/11afb20106d74362e5f397afc2dd4ba0 tsan seems to segault
[20:39:10] <ville> https://gcc.gnu.org/onlinedocs/gcc-11.2.0/gcc/Instrumentation-Options.html#index-fsanitize_003dthread
[20:39:29] <ville> ...another fine example of non-clickable anchors
[20:40:51] *** Joins: Figworm (FiggyWitIt@user/figworm)
[20:40:55] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[20:41:57] <ville> and the odds are they're using groff to create their html docs or something which of course lacks the capability
[20:44:51] <rpav> if only we had symbol literals we could have easy constexpr map / "named tuple"
[20:45:17] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:49:09] *** Joins: DrMax (~DrMax@node-1w7jra94757g29esa3u7gobxk.ipv6.telus.net)
[20:51:39] *** Joins: dextaa (~DV@user/dextaa)
[20:57:57] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:17] <Led_Zeppelin2> I've built an .so like this. g++ -fPIC -shared foo.cpp -o foo.so. That works. Now when I try to link it, g++ -L . -lfoo foo.cpp -o foo I keep getting cannot find -lfoo .
[21:01:11] <ville> libfoo.so
[21:01:27] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[21:01:34] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[21:02:35] <Led_Zeppelin2> should I rename example.so to libexample.so also?
[21:02:45] <ville> that is -lxxx looks for libxxx.so
[21:03:01] <ville> or libxxx.a
[21:03:27] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:10:46] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[21:10:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[21:12:09] <Led_Zeppelin2> thanks ville. having a hard time building some code.
[21:14:33] <ville> ...and that's for bsd-likes and linux. on windows -l there's no prefix and different suffix if i recall
[21:17:37] *** Joins: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[21:18:10] <rpav> on windows there is .lib and basically only .lib; you don't really link to a .dll
[21:18:36] <rpav> although a bit different with gcc/mingw i think, which can
[21:19:23] <fundies> any ideas what my segfault means?
[21:20:02] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[21:20:05] <rpav> probably don't gdb a tsan-linked binary
[21:20:28] <rpav> i think you can run asan built stuff in the debugger now but as i recall that was a problem for awhile too
[21:20:44] <fundies> well w/o it it just segfaults w/o info
[21:20:53] <fundies> sooo.. what else do I do lol?
[21:21:11] <rpav> err are you dynlinking something with asan
[21:21:20] <paul424> hello again I try to enter a fun call with gdb : RoomManager::buildRoomEditor(mDraggableTileContainer, room->getType(), auxPacket);
[21:21:31] <fundies> possibly?
[21:21:34] <rpav> don't build your shared libs with asan
[21:21:55] <paul424> I set a break on that line , but to no avail , I always screw something
[21:22:24] <paul424> I set a break on that line , and then what ? The step-in command is treacherus cause it leads me into getType() funcall
[21:23:17] <paul424> What to do if I have a break on that line ?
[21:26:45] <fundies> rpav, didnt seem to help
[21:32:45] <rpav> fundies: is it still crashing in something related to asan?
[21:33:29] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:37:47] *** Joins: MuhammedSabbagh (MuhammedSa@gateway/vpn/protonvpn/muhammedsabbagh)
[21:40:36] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:45] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:45] *** ChanServ sets mode: +v npaperbot
[21:41:21] <fundies> rpav, yep
[21:42:53] *** Joins: adeliktas72 (~adeliktas@i59F5F686.versanet.de)
[21:43:04] <MuhammedSabbagh> hello
[21:44:18] <rpav> fundies: keep looking for this built with asan?
[21:44:57] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[21:44:58] *** adeliktas72 is now known as adeliktas
[21:45:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[21:45:39] <fundies> nothings built w/ asan now afaict did clean
[21:46:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[21:50:18] *** Joins: epony (epony@user/epony)
[21:50:29] *** Quits: MuhammedSabbagh (MuhammedSa@gateway/vpn/protonvpn/muhammedsabbagh) (Ping timeout: 256 seconds)
[21:52:53] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[21:58:14] <ville> fundies: tried non-sanitizer build under valgrind. whilst the performance is going to suck doesn't hurt to try
[21:59:43] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[22:02:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[22:05:02] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-002-148.hsi8.kabel-badenwuerttemberg.de)
[22:09:37] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 240 seconds)
[22:10:18] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[22:18:08] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[22:25:15] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876)
[22:27:24] *** Joins: magla (~gelignite@55d42ff9.access.ecotel.net)
[22:33:48] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[22:34:41] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:46:25] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:48:53] *** Joins: adeliktas1 (~adeliktas@i59F5F686.versanet.de)
[22:49:39] <xkoncek> Often you will find yourself on a C system that missed out on the 21st century and therefore does not implement the standard C99 stdint.h header. For this situation, Libevent defines its own versions of the bit-width-specific integers from stdint.h
[22:50:00] <xkoncek> another C lib, another stdint.h custom replacement
[22:50:57] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 240 seconds)
[22:50:57] *** adeliktas1 is now known as adeliktas
[22:52:31] *** Joins: gehn (~gehn@user/gehn)
[22:53:16] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[22:56:15] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Remote host closed the connection)
[23:06:42] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[23:22:27] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Quit: like, subscribe, turn notifications on, buy my merch, write me an email and have a nice day.)
[23:26:23] <Alipha> very_sneaky: I would probably make my constructors protected in my CRTP class rather than make the destructor pure virtual, but a pure virtual destructor would be a valid approach. I just think people would be less confused by protected constructors
[23:28:28] *** Joins: adeliktas (~adeliktas@i59F5F686.versanet.de)
[23:29:16] <Alipha> paul424: without knowing more about this Parser code, it sounds like `get` means to fetch and process the next token. Whereas if `get` is false, prim processes the current token
[23:29:19] *** Joins: badone (~badone@209.132.189.152)
[23:30:09] <paul424> At the end of the day I get the answer :D , finally ! :D thank you :)
[23:30:38] <Alipha> PJBoy: I would totally have fun with a level designer for super metroid and then load the rom into my emulator. Btw, have you played Dread?? heh
[23:35:30] <PJBoy> well you're in luck
[23:35:37] <PJBoy> because we have two level editors already
[23:36:16] <PJBoy> and a website with over 400 hacks
[23:37:06] <PJBoy> I played about an hour of dread
[23:38:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[23:41:08] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[23:41:51] <Alipha> PJBoy: you... don't like it?
[23:42:05] <PJBoy> nope haha
[23:42:07] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 256 seconds)
[23:42:18] <PJBoy> I already knew I wasn't gonna like it from the very first trailer
[23:43:19] <Alipha> PJBoy: oh, the game opens up a lot more after the first like 1/3. and there's glitches and (intentionally-added) sequence breaks. the EMMIs continue to be annoying though
[23:43:47] <Alipha> playing the demo i was like, ugh, stop closing the paths behind me
[23:44:29] <PJBoy> eh
[23:44:35] <Alipha> you liked fusion though?
[23:44:47] <PJBoy> it does go pretty strong on that linear pathing, but that's kinda whatever
[23:44:49] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:44:52] <PJBoy> yeah I liked fusion
[23:45:06] <PJBoy> I have plenty of complaints about fusion too
[23:45:14] <Alipha> fusion i was like, stop hand holding me and telling me where to go
[23:45:14] <PJBoy> but the gameplay was solid
[23:45:21] <Alipha> what's your complaint about dread?
[23:45:32] <PJBoy> where do I begin
[23:45:59] <PJBoy> I don't like the counter mechanic
[23:46:21] <PJBoy> I don't like how half the screen is black at all times because they didn't bother with foreground textures
[23:46:51] <PJBoy> I think the animation and pacing of Samus looks fan-game esque
[23:47:06] <PJBoy> the bosses are grindy
[23:47:14] <PJBoy> the slide invalidates morph ball
[23:47:39] <PJBoy> the cutscenes are filled generic modern action film tropes
[23:48:07] <PJBoy> the level design doesn't hint towards breakable blocks, so you just have to shoot everything in every room
[23:48:43] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:48:54] *** Joins: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[23:49:04] <PJBoy> the environment being all metal and artificial, fair enough it's different than all the older metroid games that are more biological in environment, but it ends up being stale IMO
[23:49:05] *** Quits: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Client Quit)
[23:49:17] *** Joins: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[23:49:24] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[23:49:46] <PJBoy> the emmi are way too powerful / Samus looks like too much of a baby compared to them
[23:50:13] <PJBoy> they kill you if you go out of bounds or clip into a block, even by accident
[23:50:30] <PJBoy> the checkpoint system means death has virtually no consequence
[23:50:51] <kalven> agreed
[23:51:06] <Alipha> on all of the above?
[23:51:51] *** Quits: ashafq_ (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Client Quit)
[23:52:27] *** Quits: paul424 (~tom@ip-37-248-159-146.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:52:51] <kalven> most of it
[23:54:15] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876) (Remote host closed the connection)
[23:54:38] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:dc71:98a8:e8a4:d876)
[23:57:59] <PJBoy> https://media.discordapp.net/attachments/499397935444918293/889187293389266944/737347.png
[23:59:15] <PJBoy> (actual in-game shot https://media.discordapp.net/attachments/499397935444918293/889183292933415002/58358358.png )
[23:59:58] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
