[00:01:13] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[00:04:06] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 260 seconds)
[00:04:40] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Quit: No Ping reply in 180 seconds.)
[00:04:45] *** Quits: xff0x (~xff0x@2001:1a81:52ce:1300:b0c:6219:b31e:3167) (Ping timeout: 252 seconds)
[00:05:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:05:57] *** Quits: Digit (~user@user/digit) (Ping timeout: 256 seconds)
[00:06:24] <oats> https://github.com/oatberry/aoc2021-haskell/blob/main/src/Day10.hs yeet
[00:06:25] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:06:31] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[00:07:20] <oats> gotta `go` fast
[00:07:57] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[00:09:19] <d34df00d> There's a bunch of functors that only control some aspect of behaviour (think First or Last or QuickCheck's NonNegative, for instance).
[00:09:24] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[00:10:09] <d34df00d> There's a natural isomorphism (forgetting the behaviour part) between some type a and F a for these functors (witnessed by First and getFirst, etc).
[00:10:27] <d34df00d> Is there any library that abstracts that away and allows me to inject/extract the underlying value from such a control/behavioural functor?
[00:10:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[00:11:02] <Taneb> That sounds like lens's Control.Lens.Wrapped, which I think is inspired by something else
[00:11:03] <d34df00d> It's super straighforward to roll your own, it's just that I don't want to reinvent the type class if there's a common vocabulary one.
[00:11:17] <tomsmeding> do you know about 'coerce'?
[00:11:36] <d34df00d> Taneb: thanks, I'll take a look!
[00:12:10] <d34df00d> tomsmeding: well, it didn't occur to me it's useful in this context. Not sure if it communicates the intent well enough.
[00:12:12] *** Joins: alx741 (~alx741@157.100.93.160)
[00:12:19] <d34df00d> Dunno, something just feels not right about coerce.
[00:12:30] <tomsmeding> d34df00d: First and Last aren't quite isomorphic to the underlying type though, since newtype First a = First (Maybe a)
[00:12:31] <oats> why, it's safe :P
[00:12:45] <tomsmeding> sure, was just mentioning it in case you weren't aware :)
[00:12:49] <geekosaur> isn't the underlying conceopt Iso?
[00:13:02] <d34df00d> Oh lol, right. Well, let's think about something First-like for semigroups.
[00:13:06] <monochrom> coerce works, but it works much more broadly, and is an operational answer. I think Wrapped may be a mathematical answer.
[00:13:19] <monochrom> Or Iso, yeah.
[00:13:21] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:14:04] <monochrom> Sum and Product are good examples.
[00:14:26] *** Joins: xsperry (~xs@user/xsperry)
[00:14:40] <d34df00d> Sum indeed is a better example than First.
[00:15:29] *** Joins: xff0x (~xff0x@2001:1a81:52ce:1300:b0c:6219:b31e:3167)
[00:17:23] *** Joins: DNH (~DNH@8.43.122.49)
[00:17:50] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[00:19:27] <Guest6770> Something `First`-like for `Semigroup`s: `First`, from `Data.Semigroup`. 
[00:20:19] <d34df00d> Very efficient module organization, no room for surprise.
[00:20:22] <d34df00d> Haskell is a boring language.
[00:20:38] <Guest6770> Just remember to qualify your imports :-)
[00:20:45] <d34df00d> Alrighty, Wrapped it is. Thank you folks!
[00:22:41] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:28:10] *** Quits: xff0x (~xff0x@2001:1a81:52ce:1300:b0c:6219:b31e:3167) (Ping timeout: 265 seconds)
[00:28:48] *** Joins: xff0x (~xff0x@2001:1a81:52ce:1300:fb1:616f:b19a:8052)
[00:28:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:29:10] <int-e> dminuoso: It's not like I use GADTs everywhere, it's mostly ADTs for expressions (with result type) and existentials. I am attributing ExistentialQuantification to GADTs out of appreciation for the more intuitive (to me, at least) syntax (data HasShow where HS :: ShowA => a -> HasShow  doesn't involve an awkwardly placed forall). YMMV
[00:29:41] <EvanR> I'm doing this fold to find a minimum float value or Nothing on empty. But for some reason the use of infinity in the middle is alarming me https://paste.tomsmeding.com/seYenSws
[00:31:38] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:32:52] <EvanR> or maybe the noise from Maybe is alarming
[00:33:04] <EvanR> maybe I should embrace infinity 
[00:35:39] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9)
[00:37:48] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[00:37:50] *** Joins: Pdroman (~Android@197.red-79-156-174.staticip.rima-tde.net)
[00:38:52] *** Quits: DNH (~DNH@8.43.122.49) (Quit: Textual IRC Client: www.textualapp.com)
[00:40:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:42:52] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[00:43:18] *** Quits: Pdroman (~Android@197.red-79-156-174.staticip.rima-tde.net) (Quit: AndroidIrc Disconnecting)
[00:45:26] *** Joins: alx741 (~alx741@157.100.93.160)
[00:46:02] <Guest6770> > compare (1 :: Double) (1 / 0)
[00:46:03] <lambdabot>  LT
[00:46:21] <Guest6770> > compare (1 / 0) (1 :: Double)
[00:46:22] <lambdabot>  GT
[00:46:42] <Guest6770> Seems legit.
[00:47:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[00:47:34] *** Quits: Guest6770 (~user@152.1.137.158) (Quit: heading home)
[00:49:26] <tomsmeding> EvanR: wouldn't that return Nothing if the map containss only inf values?
[00:50:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:51:33] <Taneb> > compare (1 / 0) (1 / 0 :: Double)
[00:51:33] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:51:34] <lambdabot>  EQ
[00:51:41] <Taneb> > (1 / 0) == (1 / 0 :: Double)
[00:51:42] <lambdabot>  True
[00:51:55] <Taneb> Oh yeah, that's infinity, not nan
[00:52:09] <geekosaur> don't need a type ascription due to defaulting and that (/) is Fractional
[00:52:13] *** Joins: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de)
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de)
[00:52:30] *** Quits: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de) (Changing host)
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:53:03] <EvanR> tomsmeding, yep... so just leaving Maybes out of it is turning out simpler
[00:55:39] <tomsmeding> half-serious suggestion: newtype Min' a = Min' (Maybe a); instance Ord a => Semigroup (Min' a) where { Min' Nothing <> Min' Nothing = Min' Nothing ; Min' a <> Min' b = Min' (Just (minimum (catMaybes [a, b]))) }; instance Monoid (Min' a) where mempty = Min' Nothing
[00:55:56] <tomsmeding> and foldMap Min'
[00:56:07] <Taneb> geekosaur: in my particular usage there I thought it benifited from being explicit
[00:56:07] <tomsmeding> um, foldMap (Min' . Just)
[00:57:11] <tomsmeding> (the ' is because Min is already in Data.Semigroup but lacks the Maybe)
[00:57:15] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:59:08] * EvanR doing a double take at that
[00:59:12] <awpr> > Just (Min 5) <> Just (Min 6) -- didn't the Maybe instance get changed to be the same as the above?
[00:59:13] <lambdabot>  error:
[00:59:13] <lambdabot>      • Data constructor not in scope: Min :: t0 -> a
[00:59:13] <lambdabot>      • Perhaps you meant one of these:
[00:59:24] <tomsmeding> @let import Data.Semigroup
[00:59:24] <lambdabot>  <command line>: does not exist: .L.hs
[00:59:33] <tomsmeding> % import Data.Semigroup
[00:59:33] <yahb> tomsmeding: 
[00:59:39] <tomsmeding> % Just (Min 5) <> Just (Min 6)
[00:59:39] <yahb> tomsmeding: Just (Min {getMin = 5})
[00:59:49] <EvanR> that's a lot for foldl' min (1/0) foos
[01:00:04] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 265 seconds)
[01:00:32] <tomsmeding> awpr: thanks, that's indeed better
[01:00:33] <Taneb> awpr: Nothing sorts less than Just whatever, in this case we want it to sort greater
[01:00:41] <tomsmeding> EvanR: type Min' a = Maybe (Min a)
[01:00:46] <Taneb> % Nothing <> Just (Min 6)
[01:00:46] <yahb> Taneb: Just (Min {getMin = 6})
[01:00:52] <Taneb> Oh, am I wrong?
[01:01:03] <Taneb> Yeah, I'm being stupid
[01:01:06] <Taneb> Carry on :)
[01:01:06] <awpr> `min` is different from `<>` here
[01:01:09] <Artem[m]> Is ghcup supposed to install profiling version of base? A Reddit user claims that it doesn't do it but I thought it did actually. But I see no mention of it anywhere on the ghcup site. https://www.reddit.com/r/haskell/comments/rh4ase/getting_cabal_to_profile/hooz9qd
[01:01:24] <tomsmeding> Taneb: I think the Nothing is the mempty from the Maybe monoid
[01:01:50] <awpr> % compare Nothing (Just (Min 6))
[01:01:50] <yahb> awpr: LT
[01:01:53] <tomsmeding> Artem[m]: ghcup should install profiling versions of base for sure
[01:03:18] <tomsmeding> EvanR: though this produces some additional branching on the maybe values through the fold; if you want the nothing in case the map is empty, probably best to handle that case separately and do 'foldl1' min' otherwise :)
[01:03:49] *** Quits: burnsidesLlama (~burnsides@dhcp168-019.wadham.ox.ac.uk) (Remote host closed the connection)
[01:04:04] <Artem[m]> tomsmeding: thank you for confirming! I wonder if it may depend on the platform or something (e.g. aarch64 has been a curve ball I think).
[01:04:32] <EvanR> nah infinity turns out the better
[01:05:00] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Remote host closed the connection)
[01:05:13] <tomsmeding> Artem[m]: that perhaps, or maybe OP is using ghcup but forgot that they also have another installation (perhaps from the system package manager) lying around that happens to get precedence or something
[01:05:15] <EvanR> my eventual treatment of empty vs "too far in the future" ends up being the same
[01:05:33] <tomsmeding> wouldn't be the first person to make that mistake, but no idea if that's also happening here :)
[01:05:39] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[01:05:40] <tomsmeding> EvanR: awesome :)
[01:05:41] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[01:05:49] *** Joins: benin (~benin@183.82.204.250)
[01:08:06] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[01:08:52] *** Joins: alx741 (~alx741@181.199.42.79)
[01:08:54] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[01:08:57] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Read error: Connection reset by peer)
[01:10:15] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:12:26] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[01:16:19] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[01:20:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:80ee:faa6:7302:e610) (Ping timeout: 260 seconds)
[01:22:16] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:22:41] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:23:30] *** Quits: alx741 (~alx741@181.199.42.79) (Read error: Connection reset by peer)
[01:23:55] <monochrom> Yes, sometimes it's useful to equate "never" with "happens at time infinity".
[01:24:14] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:24:27] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[01:25:31] <monochrom> https://perl.plover.com/classes/OOPSLA/samples/slide067.html  (Be sure to keep clicking "next" for the subsequent slides to see what it is explaining!)
[01:26:02] *** Quits: lambdalove-sadvi (~user@2804:d51:47f5:ac00:9bf5:fb5f:29:c009) (Ping timeout: 240 seconds)
[01:27:07] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[01:27:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[01:29:47] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[01:34:44] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[01:34:57] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:36:34] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:36:48] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[01:37:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[01:38:03] *** Joins: pfurla[m] (uid345156@id-345156.tinside.irccloud.com)
[01:38:43] <Hecate> hohai
[01:39:13] <Hecate> I have put a path to a .so in extra-lib-dirs (in cabal.project)
[01:39:14] <geekosaur> œ
[01:39:21] <Hecate> but gcc is unable to find the library in question
[01:40:03] *** Joins: alx741 (~alx741@157.100.93.160)
[01:40:05] <Hecate> the path gives access to libpq.so and GCC gives me
[01:40:06] <Hecate> /usr/bin/ld.gold: error: cannot find -lpq
[01:40:08] <Hecate> :(
[01:41:42] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:41:53] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:43:27] <geekosaur> I think I'd want to see -v output to see if it gets passed on; in particular with configure-based Setup extra-lib-dirs can end up being ignored because configure thinks it knows better (perhaps especially if there's pkgconfig foo involved?)
[01:43:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[01:43:54] <Clint> Hecate: do you need libpq.so or libpq.a?
[01:45:50] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:47:02] <Hecate> Clint: oh that's a good question, I don't actually know the answer
[01:47:33] <Clint> how are you specifying the library?
[01:47:59] <Hecate> I am not, it's postgresql-libpq that does
[01:48:22] <Clint> oh, and you're able to build postgresql-libpq?
[01:48:22] <Hecate> that being said, let me purge my ldconfig cache
[01:48:31] *** Quits: Nolrai2 (~Nolrai2@73.240.1.39) (Quit: Client closed)
[01:48:41] <Hecate> Clint: the log stops at one of the direct dependencies
[01:48:50] <Hecate> let me try and build postgresql-libpq directly to see
[01:50:43] <Hecate> grmph, no apparent problem…
[01:51:20] <Hecate> also, weirdly, "/usr/pgsql-14/lib/" appears in /etc/ld.so.conf.d
[01:51:38] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 252 seconds)
[01:51:46] <Hecate> Clint: it would seem that postgresql-libpq uses pkg-config
[01:52:02] <Hecate> oh no.
[01:52:04] <Hecate> it doesn't 
[01:52:09] <Hecate> it uses… 
[01:52:13] <Hecate> ah, pg_config
[01:53:18] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f) (Ping timeout: 260 seconds)
[01:53:22] *** Quits: phma_ (phma@2001:5b0:2144:24c8:3448:3cec:586:a41) (Read error: Connection reset by peer)
[01:53:27] *** Quits: michalz (~michalz@185.246.204.121) (Remote host closed the connection)
[01:54:17] *** Joins: phma_ (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b)
[01:54:35] *** phma_ is now known as phma
[01:55:29] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:57:17] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[02:00:09] <Hecate> ugh
[02:00:22] <Hecate> I had to add -L /usr/pgsql-14/lib to cabal.project :( :( :(
[02:00:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[02:00:58] *** Quits: akegalj (~akegalj@141-136-187-255.dsl.iskon.hr) (Quit: leaving)
[02:02:07] *** Joins: alx741 (~alx741@157.100.93.160)
[02:02:32] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 240 seconds)
[02:05:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:05:43] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[02:06:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:09:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[02:15:00] *** Joins: avidela (~textual@88.98.244.170)
[02:15:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:1e71:dc8c:d2fa:3d7e)
[02:15:32] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[02:15:42] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[02:16:28] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[02:16:42] *** Joins: jakalx (~jakalx@base.jakalx.net)
[02:20:12] *** avidela is now known as zephyz
[02:21:58] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:28:13] *** Quits: zephyz (~textual@88.98.244.170) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:28:14] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[02:28:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:30:56] *** Joins: avidela (~textual@88.98.244.170)
[02:32:43] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[02:33:09] *** Quits: avidela (~textual@88.98.244.170) (Client Quit)
[02:36:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:38:41] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:40:40] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:40:57] *** hololeap_ is now known as hololeap
[02:46:44] *** Joins: alx741 (~alx741@157.100.93.160)
[02:46:53] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[02:49:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[02:50:12] *** Joins: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net)
[02:50:17] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:51:16] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:51:29] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[02:52:31] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:54:09] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:56:37] *** Quits: ubert (~Thunderbi@p200300ecdf1abb061518ea9ba8d342d1.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[02:56:37] *** ub is now known as ubert
[02:57:05] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[02:57:44] <Axman6> Hecate: isn't that soimething that pg_config can do for you? 
[02:58:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[02:59:22] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[03:01:06] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[03:01:27] *** Joins: pfurla (~pfurla@177.25.189.1)
[03:02:29] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:7939:82b5:8236:6c32) (Remote host closed the connection)
[03:02:46] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d)
[03:04:14] *** Quits: cosimone (~user@93-47-228-203.ip115.fastwebnet.it) (Ping timeout: 252 seconds)
[03:04:38] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:07:04] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d) (Remote host closed the connection)
[03:07:22] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d)
[03:07:39] *** Joins: alx741 (~alx741@157.100.93.160)
[03:10:46] *** Quits: Ainoretho (~ypw@huji-132-64-244-88.xt.huji.ac.il) (Ping timeout: 245 seconds)
[03:12:29] *** Quits: gentauro (~gentauro@user/gentauro) (Ping timeout: 252 seconds)
[03:12:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:12:46] *** Quits: gentauro_ (~gentauro@185.107.12.141) (Ping timeout: 268 seconds)
[03:13:30] *** Joins: notzmv (~zmv@user/notzmv)
[03:15:01] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (Quit: mikoto-chan)
[03:15:07] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d) (Read error: Connection reset by peer)
[03:15:25] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d)
[03:15:49] <janus> Axman6: how do you call pg_config from cabal.project? does it have shell interpolation :O ?
[03:17:01] *** Quits: Jing_ (~hedgehog@2604:a840:3::103e) (Remote host closed the connection)
[03:17:41] *** Joins: Jing (~hedgehog@2604:a840:3::103e)
[03:19:29] <geekosaur> ideally whatever it is that actually needs it would call it itself
[03:19:38] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d) (Ping timeout: 252 seconds)
[03:19:43] <geekosaur> then again that probably requires custom Setup
[03:22:46] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi)
[03:24:33] *** Joins: Guest27 (~Guest27@cpc148070-lewi21-2-0-cust347.2-4.cable.virginm.net)
[03:25:55] *** Quits: Guest27 (~Guest27@cpc148070-lewi21-2-0-cust347.2-4.cable.virginm.net) (Client Quit)
[03:30:03] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (*.net *.split)
[03:30:03] *** Quits: pfurla[m] (uid345156@id-345156.tinside.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: benin (~benin@183.82.204.250) (*.net *.split)
[03:30:03] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7bc1:436b:e88b:37f9) (*.net *.split)
[03:30:03] *** Quits: zmt01 (~zmt00@user/zmt00) (*.net *.split)
[03:30:03] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (*.net *.split)
[03:30:03] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[03:30:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[03:30:03] *** Quits: nfd (~nfd@user/nfd) (*.net *.split)
[03:30:03] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (*.net *.split)
[03:30:03] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[03:30:03] *** Quits: econo (uid147250@user/econo) (*.net *.split)
[03:30:03] *** Quits: srk (~sorki@user/srk) (*.net *.split)
[03:30:03] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (*.net *.split)
[03:30:03] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[03:30:03] *** Quits: jlamothe (~jlamothe@198.251.61.229) (*.net *.split)
[03:30:03] *** Quits: nvmd (~nvmd@user/nvmd) (*.net *.split)
[03:30:03] *** Quits: h_ (~rootveget@fsf/member/hays) (*.net *.split)
[03:30:03] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (*.net *.split)
[03:30:03] *** Quits: rembo10 (~rembo10@remulis.com) (*.net *.split)
[03:30:03] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (*.net *.split)
[03:30:03] *** Quits: tom_ (~tom@2a00:23c8:970c:4801:f5c6:93c3:2f5e:e0) (*.net *.split)
[03:30:03] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (*.net *.split)
[03:30:03] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (*.net *.split)
[03:30:03] *** Quits: pavonia (~user@user/siracusa) (*.net *.split)
[03:30:03] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (*.net *.split)
[03:30:03] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[03:30:03] *** Quits: emf_ (~emf@2620:10d:c091:480::1:305b) (*.net *.split)
[03:30:03] *** Quits: jespada (~jespada@87.74.33.157) (*.net *.split)
[03:30:03] *** Quits: arahael (~arahael@203.158.51.1) (*.net *.split)
[03:30:03] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[03:30:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[03:30:04] *** Quits: sander (~sander@user/sander) (*.net *.split)
[03:30:04] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[03:30:04] *** Quits: Taneb (~Taneb@2001:41c8:51:10d:aaaa:0:aaaa:0) (*.net *.split)
[03:30:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[03:30:04] *** Quits: mud (~mud@user/kadoban) (*.net *.split)
[03:30:04] *** Quits: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2) (*.net *.split)
[03:30:04] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[03:30:04] *** Quits: spoofer (~spoofer@64.185.111.205) (*.net *.split)
[03:30:04] *** Quits: LambdaDuck (~anka@ksit.fixme.fi) (*.net *.split)
[03:30:04] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (*.net *.split)
[03:30:04] *** Quits: ishutin (~ishutin@85-238-77-101.pool.digikabel.hu) (*.net *.split)
[03:30:04] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[03:30:04] *** Quits: gawen (~gawen@user/gawen) (*.net *.split)
[03:30:04] *** Quits: EvanR (~evan@user/evanr) (*.net *.split)
[03:30:04] *** Quits: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se) (*.net *.split)
[03:30:04] *** Quits: tv (~tv@user/tv) (*.net *.split)
[03:30:04] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[03:30:04] *** Quits: tired- (~tired@user/tired) (*.net *.split)
[03:30:04] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[03:30:04] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[03:30:04] *** Quits: jakzale (6291399afa@user/jakzale) (*.net *.split)
[03:30:04] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[03:30:04] *** Quits: jkoshy (99b9359beb@2604:bf00:561:2000::10f) (*.net *.split)
[03:30:04] *** Quits: evanrelf (3addc196af@2604:bf00:561:2000::f0) (*.net *.split)
[03:30:04] *** Quits: filwisher (2e6936c793@2604:bf00:561:2000::170) (*.net *.split)
[03:30:04] *** Quits: lukec (9dfd4d094e@2604:bf00:561:2000::10e) (*.net *.split)
[03:30:04] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[03:30:04] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (*.net *.split)
[03:30:04] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[03:30:04] *** Quits: Vq (~vq@90-227-195-41-no77.tbcn.telia.com) (*.net *.split)
[03:30:04] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (*.net *.split)
[03:30:04] *** Quits: Guest2359 (1000@gabilgathol.bandrate.org) (*.net *.split)
[03:30:04] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (*.net *.split)
[03:30:04] *** Quits: byorgey (~byorgey@155.138.238.211) (*.net *.split)
[03:30:04] *** Quits: carbolymer (~carbolyme@dropacid.net) (*.net *.split)
[03:30:04] *** Quits: hook54321 (sid149355@user/hook54321) (*.net *.split)
[03:30:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[03:30:05] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: taktoa[c] (sid282096@id-282096.tinside.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962) (*.net *.split)
[03:30:05] *** Quits: Jonno_FTW (~come@api.carswap.me) (*.net *.split)
[03:30:05] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[03:30:05] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[03:30:05] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: res0nat0r (~Fletch@dia.whatbox.ca) (*.net *.split)
[03:30:05] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[03:30:05] *** Quits: MasseR (~MasseR@51.15.143.128) (*.net *.split)
[03:30:05] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[03:30:05] *** Quits: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com) (*.net *.split)
[03:30:05] *** Quits: dibblego (~dibblego@haskell/developer/dibblego) (*.net *.split)
[03:30:05] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[03:30:05] *** Quits: stefan-_ (~cri@42dots.de) (*.net *.split)
[03:30:05] *** Quits: theproffesor (~theproffe@user/theproffesor) (*.net *.split)
[03:30:05] *** Quits: haasn (~nand@haasn.dev) (*.net *.split)
[03:30:05] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[03:30:05] *** Quits: phma (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b) (*.net *.split)
[03:30:05] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (*.net *.split)
[03:30:05] *** Quits: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de) (*.net *.split)
[03:30:05] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[03:30:05] *** Quits: max22- (~maxime@2a01cb0883359800cb0bc7c67be4bc8f.ipv6.abo.wanadoo.fr) (*.net *.split)
[03:30:05] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[03:30:05] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[03:30:05] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (*.net *.split)
[03:30:05] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[03:30:05] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[03:30:05] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (*.net *.split)
[03:30:05] *** Quits: xacktm (xacktm@user/xacktm) (*.net *.split)
[03:30:05] *** Quits: ikke (~kevin@alpine/developer/ikke) (*.net *.split)
[03:30:05] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[03:30:05] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[03:30:05] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[03:30:05] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[03:30:05] *** Quits: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b) (*.net *.split)
[03:30:05] *** Quits: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70) (*.net *.split)
[03:30:06] *** Quits: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918) (*.net *.split)
[03:30:06] *** Quits: YehoshuaPesachWa (~yehoshuap@2001:470:69fc:105::a5f) (*.net *.split)
[03:30:06] *** Quits: craige[m] (~craigemcw@2001:470:69fc:105::35f1) (*.net *.split)
[03:30:06] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (*.net *.split)
[03:30:06] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (*.net *.split)
[03:30:06] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (*.net *.split)
[03:30:06] *** Quits: feetwind (~mike@user/feetwind) (*.net *.split)
[03:30:06] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[03:30:06] *** Quits: root1 (root@2600:3c02::f03c:92ff:fe1a:c779) (*.net *.split)
[03:30:06] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[03:30:06] *** Quits: n3t (n3t@user/n3t) (*.net *.split)
[03:30:06] *** Quits: WhateverRabbit (~rabbit@206.81.18.26) (*.net *.split)
[03:30:06] *** Quits: davl (~davl@207.154.228.18) (*.net *.split)
[03:30:06] *** Quits: xstill- (xstill@fimu/xstill) (*.net *.split)
[03:30:06] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (*.net *.split)
[03:30:06] *** Quits: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com) (*.net *.split)
[03:30:06] *** Quits: acro (~acro@user/acro) (*.net *.split)
[03:30:06] *** Quits: alinab (sid468903@id-468903.helmsley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: systemfault (sid267009@id-267009.uxbridge.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: aria (sid380617@id-380617.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy) (*.net *.split)
[03:30:06] *** Quits: lyxia (~lyxia@poisson.chat) (*.net *.split)
[03:30:06] *** Quits: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd) (*.net *.split)
[03:30:06] *** Quits: JimL (~quassel@89-162-2-132.fiber.signal.no) (*.net *.split)
[03:30:06] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: AndreasK (sid320732@id-320732.uxbridge.irccloud.com) (*.net *.split)
[03:30:06] *** Quits: jrm (~jrm@156.34.249.199) (*.net *.split)
[03:30:06] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[03:30:06] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (*.net *.split)
[03:30:06] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[03:30:06] *** Quits: maerwald (~maerwald@user/maerwald) (*.net *.split)
[03:30:10] *** Joins: xdej (~xdej@quatramaran.salle-s.org)
[03:30:11] *** Joins: Jonno_FTW (~come@api.carswap.me)
[03:30:11] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[03:30:14] *** Joins: lukec (9dfd4d094e@2604:bf00:561:2000::10e)
[03:30:14] *** Joins: filwisher (2e6936c793@2604:bf00:561:2000::170)
[03:30:16] *** Joins: byorgey (~byorgey@155.138.238.211)
[03:30:16] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[03:30:17] *** Joins: spoofer (~spoofer@64.185.111.205)
[03:30:17] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[03:30:18] *** Joins: rembo10 (~rembo10@remulis.com)
[03:30:18] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[03:30:21] *** Joins: asm (~alexander@burner.asm89.io)
[03:30:21] *** Joins: max22- (~maxime@2a01cb0883359800cb0bc7c67be4bc8f.ipv6.abo.wanadoo.fr)
[03:30:22] *** Joins: pfurla[m] (uid345156@id-345156.tinside.irccloud.com)
[03:30:24] *** Joins: tom_ (~tom@2a00:23c8:970c:4801:f5c6:93c3:2f5e:e0)
[03:30:25] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[03:30:25] *** Joins: root1 (root@2600:3c02::f03c:92ff:fe1a:c779)
[03:30:26] *** Joins: jkoshy (99b9359beb@2604:bf00:561:2000::10f)
[03:30:26] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[03:30:26] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[03:30:27] *** Joins: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de)
[03:30:29] *** Joins: xsarnik (xsarnik@lounge.fi.muni.cz)
[03:30:33] *** Joins: res0nat0r (~Fletch@dia.whatbox.ca)
[03:30:33] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[03:30:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[03:30:34] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[03:30:35] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[03:30:35] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[03:30:37] *** Joins: zaquest (~notzaques@5.130.79.72)
[03:30:38] *** Joins: AndreasK (sid320732@2a03:5180:f:5::4:e4dc)
[03:30:38] *** Joins: opqdonut (~opqdonut@91.105.251.154)
[03:30:38] *** Joins: alinab (sid468903@helmsley.irccloud.com)
[03:30:38] *** Joins: unyu (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1)
[03:30:39] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[03:30:39] *** Joins: turlando (~turlando@user/turlando)
[03:30:40] *** Joins: Vq (~vq@90-227-195-41-no77.tbcn.telia.com)
[03:30:40] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[03:30:41] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[03:30:41] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[03:30:41] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[03:30:42] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[03:30:43] *** Joins: FragByte (~christian@p579d2134.dip0.t-ipconnect.de)
[03:30:44] *** Joins: sus (zero@user/zeromomentum)
[03:30:44] *** Joins: lyxia (~lyxia@poisson.chat)
[03:30:47] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[03:30:48] *** Joins: Akiva (~Akiva@d75-156-97-166.bchsia.telus.net)
[03:30:49] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[03:30:49] *** Joins: dsrt^ (~dsrt@98.188.240.142)
[03:30:51] *** Joins: dibblego (~dibblego@122-199-1-30.ip4.superloop.com)
[03:30:51] *** Joins: pepeiborra (sid443799@ilkley.irccloud.com)
[03:30:53] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[03:30:53] *** Joins: jakzale (6291399afa@user/jakzale)
[03:30:59] *** Joins: feetwind (~mike@2406:d500:6:1:216:3cff:fe36:651)
[03:31:03] *** Joins: ikke (~kevin@delta.ikke.info)
[03:31:03] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[03:31:05] *** Joins: n3t (~n3t@s45.mydevil.net)
[03:31:06] *** Joins: jonrh (sid5185@2a03:5180:f:3::1441)
[03:31:06] *** Joins: systemfault (sid267009@id-267009.uxbridge.irccloud.com)
[03:31:11] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[03:31:12] *** Joins: taktoa[c] (sid282096@2a03:5180:f::4:4df0)
[03:31:17] *** Joins: econo (uid147250@2a03:5180:f::2:3f32)
[03:31:21] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[03:31:21] *** Joins: alanz (sid110616@uxbridge.irccloud.com)
[03:31:23] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[03:31:26] *** Joins: aria (sid380617@2a03:5180:f:2::5:cec9)
[03:31:28] *** Joins: bsima1 (9d7e39c8ad@2604:bf00:561:2000::dd)
[03:31:30] *** Quits: FragByte (~christian@p579d2134.dip0.t-ipconnect.de) (Changing host)
[03:31:30] *** Joins: FragByte (~christian@user/fragbyte)
[03:31:37] *** Joins: theproffesor (~theproffe@2601:282:847f:8010::5fff)
[03:31:38] *** Joins: Guest2359 (1000@gabilgathol.bandrate.org)
[03:31:39] *** Joins: hook54321 (sid149355@user/hook54321)
[03:31:42] *** Joins: landonf (landonf@mac68k.info)
[03:31:48] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[03:31:49] *** Quits: dibblego (~dibblego@122-199-1-30.ip4.superloop.com) (Changing host)
[03:31:49] *** Joins: dibblego (~dibblego@haskell/developer/dibblego)
[03:31:49] *** unyu is now known as Guest6030
[03:32:01] *** Quits: econo (uid147250@2a03:5180:f::2:3f32) (Changing host)
[03:32:01] *** Joins: econo (uid147250@user/econo)
[03:32:13] *** Joins: leah2 (~leah@vuxu.org)
[03:32:16] *** Quits: theproffesor (~theproffe@2601:282:847f:8010::5fff) (Changing host)
[03:32:16] *** Joins: theproffesor (~theproffe@user/theproffesor)
[03:32:17] *** Joins: pavonia (~user@ip5f5bd527.dynamic.kabel-deutschland.de)
[03:32:21] *** feetwind is now known as Guest9348
[03:32:28] *** Quits: pavonia (~user@ip5f5bd527.dynamic.kabel-deutschland.de) (Changing host)
[03:32:28] *** Joins: pavonia (~user@user/siracusa)
[03:32:31] *** Joins: alx741 (~alx741@157.100.93.160)
[03:32:52] *** Joins: carbolymer (~carbolyme@dropacid.net)
[03:33:06] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[03:33:12] <Axman6> So I was asking yesterday about an efficient array of write once valyes (essentially Array (Maybe a) where something like a bitvector is used to record Nothingness). I wonder if edwardk's promises library would give me that. I'm working on something for the discrimination library as it is, so it's not a totally crazy idea...
[03:33:14] *** Joins: xstill- (xstill@fimu/xstill)
[03:33:15] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[03:33:24] *** Joins: jrm (~jrm@156.34.249.199)
[03:33:28] *** Joins: vgtw (~vgtw@c-2359205c.07-348-756d651.bbcust.telenor.se)
[03:33:36] *** Joins: sander (~sander@user/sander)
[03:33:38] *** Joins: tired (~tired@user/tired)
[03:33:40] *** Joins: noctux (~noctux@user/noctux)
[03:33:43] *** Joins: stefan-_ (~cri@42dots.de)
[03:33:44] *** Joins: srk (~sorki@user/srk)
[03:33:53] *** Joins: fluffyballoon (45ce440a48@2604:bf00:561:2000::e2)
[03:33:54] *** Joins: phma (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b)
[03:33:59] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[03:34:07] *** Joins: hays (rootvegeta@fsf/member/hays)
[03:34:08] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[03:34:10] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[03:34:17] *** Joins: exarkun (~exarkun@user/exarkun)
[03:34:18] *** Joins: sm2n (ae95cb1267@user/sm2n)
[03:34:20] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[03:34:28] *** Joins: Ankhers (~Ankhers@ec2-54-196-233-138.compute-1.amazonaws.com)
[03:34:29] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[03:34:31] *** Joins: haasn (~nand@haasn.dev)
[03:34:38] *** Joins: gawen (~gawen@user/gawen)
[03:34:39] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[03:34:40] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[03:34:43] *** Joins: flukiluke (~m-7humut@2603:c023:c000:6c7e:8945:ad24:9113:a962)
[03:34:44] *** Joins: davl (~davl@207.154.228.18)
[03:34:44] *** Joins: evanrelf (3addc196af@2604:bf00:561:2000::f0)
[03:35:09] *** Joins: LambdaDuck (~anka@ksit.fixme.fi)
[03:35:09] *** Joins: xacktm (xacktm@user/xacktm)
[03:35:10] *** Joins: ishutin (~ishutin@85-238-77-101.pool.digikabel.hu)
[03:35:15] *** Joins: acidsys (~LSD@2.lsd.systems)
[03:35:17] *** Joins: int-e (~noone@int-e.eu)
[03:35:19] *** Joins: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com)
[03:35:19] *** Joins: ozzymcduff (~mathieu@81-234-151-21-no94.tbcn.telia.com)
[03:35:21] *** Joins: Hawker (~pi@user/hawker)
[03:35:24] *** Joins: nfd (~nfd@user/nfd)
[03:35:30] *** Joins: mcglk (~mcglk@131.191.49.120)
[03:35:35] *** Joins: koolazer (~koo@user/koolazer)
[03:35:44] <Axman6> so far I have this (and oh my god was it painful to finally figure this out) https://paste.tomsmeding.com/nXqG4mDD
[03:35:50] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[03:35:53] *** Joins: jespada (~jespada@87.74.33.157)
[03:36:08] *** Joins: WhateverRabbit (~rabbit@206.81.18.26)
[03:36:28] *** Joins: w1gz (~do@159.89.11.133)
[03:36:31] *** Joins: tv (~tv@user/tv)
[03:36:39] *** Joins: acro (~acro@user/acro)
[03:36:41] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[03:36:47] *** Quits: max22- (~maxime@2a01cb0883359800cb0bc7c67be4bc8f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:36:57] *** Joins: rookie101 (~rookie@165.232.121.13)
[03:37:03] *** Joins: emf (~emf@2620:10d:c091:480::1:305b)
[03:37:07] *** Joins: cheater (~Username@user/cheater)
[03:37:45] *** Joins: amesgen[m] (~amesgenm]@2001:470:69fc:105::82b)
[03:37:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:37:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:37:49] *** Joins: wroathe (~wroathe@user/wroathe)
[03:38:34] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[03:39:11] *** Joins: YehoshuaPesachWa (~yehoshuap@2001:470:69fc:105::a5f)
[03:40:12] *** Joins: rednaZ[m] (~r3dnazmat@2001:470:69fc:105::ba70)
[03:40:17] *** Joins: craige[m] (~craigemcw@2001:470:69fc:105::35f1)
[03:41:23] *** Joins: TomWesterhout[m] (~twesterho@2001:470:69fc:105::1:2918)
[03:42:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:45:35] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[03:47:27] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[03:48:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[03:50:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[03:51:13] *** Quits: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[03:53:12] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:58:39] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:58:45] <koz> @pl \_ y -> f y
[03:58:45] <lambdabot> const f
[03:59:25] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[04:00:01] *** Joins: alx741 (~alx741@157.100.93.160)
[04:02:34] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 260 seconds)
[04:04:35] *** Joins: Erutuon_ (~Erutuon@user/erutuon)
[04:05:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:07:25] *** Quits: pfurla[m] (uid345156@id-345156.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[04:09:38] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:11:29] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:14:21] *** Joins: EvanR (~evan@2600:1700:ba69:10:48cf:5b3a:5b94:ba94)
[04:14:21] *** Quits: EvanR (~evan@2600:1700:ba69:10:48cf:5b3a:5b94:ba94) (Changing host)
[04:14:21] *** Joins: EvanR (~evan@user/evanr)
[04:14:27] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[04:14:36] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[04:18:07] *** Quits: Akiva (~Akiva@d75-156-97-166.bchsia.telus.net) (Ping timeout: 256 seconds)
[04:24:20] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:29:36] *** Joins: alx741 (~alx741@157.100.93.160)
[04:36:38] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-169.elisa-laajakaista.fi) (Quit: Leaving.)
[04:40:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:40:46] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:43:27] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[04:45:35] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[04:49:37] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[04:50:58] *** Erutuon_ is now known as Erutuon
[04:59:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:59:10] *** Joins: alx741 (~alx741@157.100.93.160)
[04:59:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[05:01:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:06:14] *** Joins: eys (~eys@87.196.72.73)
[05:06:14] *** Quits: eys (~eys@87.196.72.73) (Remote host closed the connection)
[05:06:33] *** Joins: eys (~eys@87-196-72-73.net.novis.pt)
[05:09:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:11:50] <hololeap> @pl _
[05:11:50] <lambdabot> (line 1, column 1):
[05:11:50] <lambdabot> unexpected "_"
[05:11:50] <lambdabot> expecting white space, "()", natural, identifier, lambda abstraction or expression
[05:13:12] <jackdk> @pl
[05:13:13] <lambdabot> (line 1, column 1):
[05:13:13] <lambdabot> unexpected end of input
[05:13:13] <lambdabot> expecting white space, "()", natural, identifier, lambda abstraction or expression
[05:13:23] <jackdk> @botsnack sorry lambdabot 
[05:13:24] <lambdabot> :)
[05:14:41] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[05:16:06] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[05:16:38] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[05:16:52] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Read error: Connection reset by peer)
[05:17:05] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[05:18:21] *** Parts: johnjay (~pi@154.6.152.74) (WeeChat 3.3)
[05:18:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[05:22:21] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[05:26:47] *** Quits: mmhat (~mmh@55d47819.access.ecotel.net) (Quit: WeeChat 3.3)
[05:26:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:27:30] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[05:28:42] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[05:31:13] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[05:31:56] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:36:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:36:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[05:42:36] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:42:36] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[05:42:54] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[05:44:41] *** Joins: alx741 (~alx741@157.100.93.160)
[05:47:39] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[05:48:27] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:48:40] *** Quits: eys (~eys@87-196-72-73.net.novis.pt) (Quit: Leaving)
[05:52:05] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[05:54:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:55:17] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:02:58] *** Quits: ubert (~Thunderbi@p200300ecdf1abb06cc2914e8ae945344.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:03:28] *** Joins: ubert (~Thunderbi@p200300ecdf1abb03cc2914e8ae945344.dip0.t-ipconnect.de)
[06:03:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:06:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:07:40] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:10:35] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[06:10:53] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:12:27] *** Joins: alx741 (~alx741@157.100.93.160)
[06:14:22] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[06:31:32] *** Quits: xff0x (~xff0x@2001:1a81:52ce:1300:fb1:616f:b19a:8052) (Ping timeout: 240 seconds)
[06:33:21] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[06:33:31] <zero> can we export "all except some" functions in a module?
[06:33:47] *** Joins: xff0x (~xff0x@2001:1a81:530f:c500:a508:6a68:a141:6a03)
[06:33:52] <zero> like `module X hiding ( some ) where`
[06:34:47] <monochrom> Unfortunately no.
[06:34:52] <zero> :(
[06:35:48] <mason0> hi. is there a way to display Data.Ratio.Ratio as a decimal number?
[06:36:23] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:36:28] <awpr> `module X.Internal where ...` `module X (module X.Internal) where; import X.Internal hiding (some)` if it's worth using extra files for
[06:36:43] <mason0> (without converting it to double first, as that would restrict me to precision of double)
[06:40:46] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[06:43:50] <monochrom> Perhaps use the "scientific" package, use its fromRationalRepetend to convert Rational to Scientific. You can tell it when to stop, or let it detect repetition and tell you.
[06:47:46] <glguy> > let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p
[06:47:47] <lambdabot>  <no location info>: error:
[06:47:47] <lambdabot>      not an expression: ‘let decimal x = case properFraction x of (w,p) -> sh...
[06:47:57] <glguy> @let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p
[06:47:57] <lambdabot>  <command line>: does not exist: .L.hs
[06:48:04] *** Joins: mbuf (~Shakthi@223.178.108.131)
[06:49:24] <mason0> @hoogle intToDigit
[06:49:25] <lambdabot> Data.Char intToDigit :: Int -> Char
[06:49:25] <lambdabot> GHC.Show intToDigit :: Int -> Char
[06:49:25] <lambdabot> Protolude intToDigit :: Int -> Char
[06:50:22] <mason0> glguy oh interesting. is that limited to precision of some floating point number, or not? I'm not quite how it works
[06:50:29] <mason0> +sure
[06:51:07] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[06:51:21] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[06:51:22] <glguy> it's as limited as storing things as a Rational
[06:51:56] <monochrom> > properFraction (10/3 :: Rational)
[06:51:57] <snake> is this right and why wasn't it said so simply to me before? injective means every output has at most one input. surjective means every output has at least one input. bijective means every output has exactly one input.
[06:51:58] <lambdabot>  (3,1 % 3)
[06:52:03] <monochrom> Lossless.
[06:53:09] <snake> nice i love fractions
[06:53:15] * snake pushes up his glasses
[06:53:20] <monochrom> snake: This is right. And very intuitive. And very hostile to equational reasoning.
[06:53:40] <snake> hostile?
[06:53:45] <monochrom> "if f x = f y then x = y" is very friendly to equational reasong i.e. doing algebra.
[06:53:57] *** Quits: td_ (~td@94.134.91.159) (Ping timeout: 256 seconds)
[06:53:58] <snake> ohhh i see
[06:54:00] <monochrom> "at most one" OK am I doing combinatorics or what
[06:54:14] <snake> so it's good to study the equations too
[06:54:18] <snake> err rules
[06:54:33] <snake> :ok_hand:
[06:54:41] <mason0> > 1%2 / 2
[06:54:43] <lambdabot>  1 % 4
[06:54:44] <monochrom> In general, intuitiveness is the anti-thesis to logic.
[06:55:28] *** Joins: td_ (~td@muedsl-82-207-238-051.citykom.de)
[06:55:43] <snake> yeah but i need to remember it for my discrete math final, most of the points i missed on the last exam were function and relation concepts :V
[06:55:53] <snake> i tyhink the intuitive definition at least grants me that
[06:57:27] <monochrom> For bijection, "f(g(x))=x and g(f(x))=x" is friendly to algebra, as said. Even better is double-down on algebra so you also do boolean algebra: "forall x,y: f(x)=y iff x=g(y)". (Note that "iff" is equality for booleans.)
[06:58:38] <monochrom> Oh I memorize all perspectives and narratives and bedtime stories.
[06:58:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:58:58] <snake> lol
[07:00:39] <monochrom> If the exam requires proofs, and the proofs requires the hard-to-remember, unintuitive narrative, then memorizing the easy-to-remember, intuitive narrative won't help. You will end up handwaving and "this is obvious to me why are you asking for proof".
[07:01:54] <monochrom> The right thing to do is to practice with the actually-needed-on-exam version a million times until it becomes intuitive. Intuition is trained not opined.
[07:02:11] <monochrom> Which also means now is too late to start that.
[07:02:18] <monochrom> As usual.
[07:03:03] <mason0> lol, decimal (1%3)  prints 0.333333 ad infinutum
[07:03:25] <glguy> of course
[07:03:36] <monochrom> I don't understand why programmers are so obsessed with "intuitive" esp. in the sense "if my first impression is unintuitive, I reject it".
[07:03:54] <mason0> glguy, yeah, I did get what I asked for!
[07:03:58] <monochrom> Actual professions can't afford that luxury.
[07:04:33] <monochrom> You don't hear medical school students complaining "seeing blood and gory organs is unintuitive to me so I refuse to learn surgery".
[07:04:47] <monochrom> or rather s/complaining/whining/
[07:05:13] <monochrom> That's exactly what programmers do. Whining about needing to be trained. Unprofessional.
[07:05:17] <snake> idk man the only person i see whining is you
[07:05:25] <snake> :p
[07:05:32] <monochrom> Yeah OK no problem I'll stop.
[07:05:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:06:27] *** Quits: featurebug (~featurebu@49.205.122.91) (Ping timeout: 250 seconds)
[07:10:24] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[07:10:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:11:46] <snake> monochrom, i appreciate your suggestion
[07:17:33] *** Joins: sleblanc (~sleblanc@user/sleblanc)
[07:19:35] <monochrom> Lately, I have been working closely with inverse images of functions. They are counterintuitive at first, but turn out to be beautiful. And your understanding can be directly expressed with inverse images, so maybe you're on to something, too.  (Pun intended or not, "on to", haha.)
[07:20:01] <snake> lol
[07:20:44] <maerwald[m]> <monochrom> "That's exactly what programmers..." <- Programmers don't need to be trained
[07:20:47] <monochrom> Let f:X->Y, S⊆Y. The inverse image of f of S, I'll write "invIm f S", other people write "f^(-1) (S)", is { x in X | f(x) in S }.
[07:20:47] <EvanR> formal topology, locales
[07:20:50] <maerwald[m]> They need to learn
[07:20:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac)
[07:22:00] <monochrom> So your understanding means using singleton sets for S, then asking what invIm f {y} looks like for each y.
[07:22:34] <monochrom> Injective is when for every y, invIm f {y} has size 0 or 1.
[07:22:59] <monochrom> Surjective is when size is 1 or more.  Bijective is when size is 1.
[07:23:11] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[07:23:54] *** Joins: alx741 (~alx741@157.100.93.160)
[07:24:19] <sprout> https://github.com/egel-lang/aoc-2021/blob/main/day15/task2.eg <- Advent of Code,  day 15,  task 2 - egel code
[07:24:22] <sprout> https://pasteboard.co/EN3DVD0kUahm.png <- with colors
[07:27:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[07:34:36] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[07:40:58] *** Joins: featurebug (~featurebu@49.205.122.91)
[07:43:36] <mason0> IIRC there was a function that takes a function and keeps applying it to base value, and the result of f baseValue, etc. does anyone know the name?
[07:44:09] <monochrom> iterate
[07:44:13] <xsperry> @hoogle (a -> a) -> a -> [a]
[07:44:14] <lambdabot> Prelude iterate :: (a -> a) -> a -> [a]
[07:44:14] <lambdabot> Data.List iterate :: (a -> a) -> a -> [a]
[07:44:14] <lambdabot> Data.List iterate' :: (a -> a) -> a -> [a]
[07:44:25] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:44:25] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:44:25] *** Joins: wroathe (~wroathe@user/wroathe)
[07:44:36] <monochrom> > iterate (* 2) 1
[07:44:38] <lambdabot>  [1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,2...
[07:44:46] <mason0> > iterate (/2) (1%2)
[07:44:47] <lambdabot>  [1 % 2,1 % 4,1 % 8,1 % 16,1 % 32,1 % 64,1 % 128,1 % 256,1 % 512,1 % 1024,1 %...
[07:44:52] <mason0> neat!
[07:45:41] <EvanR> > let factorial n = product [1..n] in iterate factorial 2
[07:45:42] <lambdabot>  [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2...
[07:45:46] <EvanR> shoot
[07:47:13] <EvanR> > let factorial n = product [1..n] in (iterate factorial 3) !! 5
[07:47:19] <lambdabot>  mueval-core: Time limit exceeded
[07:47:31] <monochrom> "fixed point detected"
[07:48:11] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[07:48:16] *** Quits: xff0x (~xff0x@2001:1a81:530f:c500:a508:6a68:a141:6a03) (Ping timeout: 245 seconds)
[07:48:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:49:08] *** Joins: xff0x (~xff0x@2001:1a81:530f:c500:fcf0:ff87:e783:c227)
[07:50:59] *** Joins: alx741 (~alx741@157.100.93.160)
[07:54:32] <mason0> > sum $ take 10 $ iterate (/2) (1%1)
[07:54:33] <lambdabot>  1023 % 512
[07:55:17] <mason0> > sum $ take 10 $ iterate (/2) 1
[07:55:19] <lambdabot>  1.998046875
[07:55:31] <EvanR> zenos paradox 2
[07:55:47] <mason0> hmm, I got 2.0 for the second line in ghci
[07:56:39] <mason0> no, my bad
[07:57:16] <EvanR> that would be sum $ take inf
[07:58:00] <EvanR> > sum (iterate (/2) 1)
[07:58:08] <lambdabot>  mueval.real: ExitFailure 1
[07:58:51] <EvanR> a real error
[08:07:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:11:35] *** Quits: curiousgay (~curiousga@77-120-141-90.kha.volia.net) (Ping timeout: 256 seconds)
[08:15:27] <Axman6> > scanl (+) 0 $ iterate (/2) 1 :: [Rational]
[08:15:28] <lambdabot>  [0 % 1,1 % 1,3 % 2,7 % 4,15 % 8,31 % 16,63 % 32,127 % 64,255 % 128,511 % 256...
[08:15:57] <Axman6> :t decimal
[08:15:58] <lambdabot> (Integral a, Choice p, Applicative f) => p a (f a) -> p String (f String)
[08:16:16] <Axman6> hmm, what's the best way to get a decimal string from a Rational?
[08:16:59] <glguy> Did someone leak that tonight's adventofcode is converting fractions to decimals?
[08:16:59] <Axman6> > map fromRational $ scanl (+) 0 $ iterate (/2) 1 :: [Double]
[08:17:01] <lambdabot>  [0.0,1.0,1.5,1.75,1.875,1.9375,1.96875,1.984375,1.9921875,1.99609375,1.99804...
[08:17:07] <xerox> haha
[08:17:24] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d)
[08:18:09] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d) (Read error: Connection reset by peer)
[08:18:17] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:18:27] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d)
[08:19:50] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[08:19:59] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:24:28] <Axman6> > drop 10 $ map fromRational $ scanl (+) 0 $ iterate (/2) 1 :: [Double]
[08:24:30] <lambdabot>  [1.998046875,1.9990234375,1.99951171875,1.999755859375,1.9998779296875,1.999...
[08:24:51] <Axman6> > drop 10 $ map (\n -> 2 - fromRational n) $ scanl (+) 0 $ iterate (/2) 1 :: [Double]
[08:24:53] <lambdabot>  [1.953125e-3,9.765625e-4,4.8828125e-4,2.44140625e-4,1.220703125e-4,6.1035156...
[08:25:16] <EvanR> eww doubles
[08:25:34] *** Joins: alx741 (~alx741@157.100.93.160)
[08:25:54] <EvanR> > map fromRational $ scanl (+) 0 $ iterate (/2) 1 :: [CReal]
[08:25:55] <lambdabot>  [0.0,1.0,1.5,1.75,1.875,1.9375,1.96875,1.984375,1.9921875,1.99609375,1.99804...
[08:25:59] <Axman6> > drop 10 $ map (\n -> 2 - fromRational n) $ scanl (+) 0 $ iterate (/2) 1 :: [Scientific]
[08:26:01] <lambdabot>  error:
[08:26:01] <lambdabot>      Not in scope: type constructor or class ‘Scientific’
[08:26:10] <Axman6> % drop 10 $ map (\n -> 2 - fromRational n) $ scanl (+) 0 $ iterate (/2) 1 :: [Scientific]
[08:26:10] <yahb> Axman6: ; <interactive>:154:77: error: Not in scope: type constructor or class `Scientific'
[08:26:15] <Axman6> :(
[08:26:25] <EvanR> the bots are unscientific
[08:27:53] <Axman6> > let factorials = scanl (*) 1 [1..]; factorial n = factorials !! n in iterate factorial 3
[08:27:54] <lambdabot>  [3,6,720,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1...
[08:28:05] <Axman6> o.O
[08:28:16] <EvanR> Int
[08:28:19] <Axman6> > let factorials = scanl (*) 1 [1..]; factorial n = factorials !! (n+1) in iterate factorial 3
[08:28:21] <mason0> Axman6, glguy posted a neat function above that does that.
[08:28:28] <lambdabot>  mueval.real: ExitFailure 1
[08:28:28] <EvanR> use genericIndex or something
[08:29:07] <mason0> > let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p in decimal (1%2)  
[08:29:08] <lambdabot>  "0.5"
[08:29:25] <mason0> > let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p in decimal (1%3)
[08:29:26] <lambdabot>  "0.3333333333333333333333333333333333333333333333333333333333333333333333333...
[08:29:37] *** Quits: featurebug (~featurebu@49.205.122.91) (Ping timeout: 240 seconds)
[08:29:57] <Axman6> that = decimal representation? yeah I saw that - feels inefficient but we're dealing with Strings... so...
[08:30:18] <mason0> :t unfoldr
[08:30:20] <lambdabot> (b -> Maybe (a, b)) -> b -> [a]
[08:30:51] <Axman6> > let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p in decimal (22%7)
[08:30:52] <lambdabot>  "3.1428571428571428571428571428571428571428571428571428571428571428571428571...
[08:32:15] <Axman6> > let decimal x = case properFraction x of (w,p) -> show w ++ "." ++ unfoldr (\x -> if x == 0 then Nothing else case properFraction (10*x) of (w,p) -> Just (intToDigit w, p)) p in decimal (355%113)
[08:32:17] <lambdabot>  "3.1415929203539823008849557522123893805309734513274336283185840707964601769...
[08:34:51] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[08:48:43] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[08:50:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[08:53:06] *** Joins: alx741 (~alx741@157.100.93.160)
[08:54:04] *** Joins: phma_ (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b)
[08:54:35] <Axman6> what's the right way to say I want to build my cabal project with -Wall these days? Is it something that goes in the cabal.project file?
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:55:50] <dibblego> I put it in the cabal file
[08:56:07] <dibblego> https://gitlab.com/tonymorris/aviation-navigation/-/blob/master/aviation-navigation.cabal#L57
[08:57:09] *** Quits: phma (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b) (Ping timeout: 250 seconds)
[08:58:26] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[08:58:27] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 250 seconds)
[08:58:33] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[08:59:23] *** Joins: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net)
[09:00:31] <Axman6> it feels like a cabal.project thing to me, since users of the library don't really need to know about -Wall from my package, but when building the project I'd like to have it
[09:04:16] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:06:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:07:37] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:d9b5:7230:29a1:ab4d) (Ping timeout: 240 seconds)
[09:10:02] <jackdk> Axman6: https://cabal.readthedocs.io/en/latest/cabal-project.html#package-configuration-options
[09:12:30] *** Quits: ikke (~kevin@delta.ikke.info) (Changing host)
[09:12:30] *** Joins: ikke (~kevin@alpine/developer/ikke)
[09:12:42] <Axman6> yeah I looked at that, and added a package my-package\n  flags: -Wall and it didn't work
[09:12:52] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:14:42] <Axman6> hmm, I may be an idiot...one sec
[09:15:40] *** Joins: iqubic (~user@2601:602:9502:c70:3682:5ffe:e458:d665)
[09:15:43] <Axman6> I am, all good. I needed ghc-options: not flags:, obviously
[09:17:21] *** jinsun__ is now known as jinsun
[09:17:34] <Axman6> "Unrecognized field 'optimisation' on line 3" <- I am not ok with this, whatever happened to our recognition of the correcting spellings of the English language 
[09:17:50] <iqubic> I have "Data Bit = Zero | One". Can I use megaparsec to parse a [Bit]?
[09:18:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:19:04] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:21:41] <dibblego> yes
[09:22:58] <iqubic> I see. How does it work?
[09:25:12] *** Quits: tom_ (~tom@2a00:23c8:970c:4801:f5c6:93c3:2f5e:e0) (Read error: Connection reset by peer)
[09:25:12] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Read error: Connection reset by peer)
[09:25:19] *** Joins: tom__ (~tom@host86-151-99-97.range86-151.btcentralplus.com)
[09:26:11] *** Joins: zincy (~tom@2a00:23c8:970c:4801:f5c6:93c3:2f5e:e0)
[09:36:34] *** Joins: alx741 (~alx741@157.100.93.160)
[09:40:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:42:37] *** Joins: bahamas (~lucian@84.232.140.13)
[09:43:13] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:48:10] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:48:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[09:49:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:558b:2015:9c55:ace3) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:49:46] *** Joins: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374)
[09:49:57] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[09:54:22] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[09:59:26] *** Joins: gentauro (~gentauro@user/gentauro)
[09:59:31] *** Joins: gentauro_ (~gentauro@185.107.12.141)
[10:02:18] <EvanR> "it works quite well actually"
[10:03:50] <int-e> > unwords $ map (\x -> printf "%.2f" (197-x/32)) [6208,6185,6132,6048,6012,5987,5980,5958,5906,5855]
[10:03:52] <lambdabot>  "3.00 3.72 5.38 8.00 9.12 9.91 10.12 10.81 12.44 14.03"
[10:04:47] <int-e> Apart from not being fluent at writing parsers... I really hated today's specification.
[10:05:11] <EvanR> iqubic, look at e.g. many :: Parsec a -> Parsec [a], or manyTill, or ...
[10:05:25] <iqubic> I see.
[10:05:55] <EvanR> apparently those were moved to parser-combinators
[10:06:09] *** Joins: alx741 (~alx741@157.100.93.160)
[10:06:24] <int-e> :t many
[10:06:25] <lambdabot> Alternative f => f a -> f [a]
[10:06:30] <int-e> shouldn't that one work?
[10:06:34] *** Quits: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net) (Ping timeout: 260 seconds)
[10:06:36] <int-e> (from Control.Applicative)
[10:06:53] <EvanR> yeah that might be the grand daddy of many
[10:07:24] <int-e> though that doesn't give you manyTill
[10:08:11] <EvanR> (you probably don't need manyTill today sir)
[10:10:35] *** Quits: bahamas (~lucian@84.232.140.13) (Ping timeout: 256 seconds)
[10:13:23] <int-e> (you need something else that's a bit awkward though)
[10:14:11] <EvanR> i cheated and forgot to use monads to parse the bits
[10:14:24] <EvanR> letting me do _whatever i want wahahaha_
[10:15:37] <int-e> EvanR: I also "forgot" but that didn't stop me from struggling a bit
[10:16:36] <int-e> it's not like you can save a whole lot of code anyway; there's no backtracking or other complicated choices to make
[10:16:58] <EvanR> parsers are apparently a lot easier when they can't fail xD
[10:17:51] *** Quits: xff0x (~xff0x@2001:1a81:530f:c500:fcf0:ff87:e783:c227) (Ping timeout: 245 seconds)
[10:18:16] <int-e> silly excerpt: https://paste.debian.net/1223675/
[10:18:38] <int-e> yes they are
[10:18:38] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[10:18:43] *** Joins: xff0x (~xff0x@port-92-195-102-89.dynamic.as20676.net)
[10:19:18] <EvanR> lol nice
[10:19:36] <EvanR> impostor monad
[10:20:07] <int-e> I know :)
[10:21:08] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[10:21:34] <EvanR> good one to show people who think haskell syntax is confusing
[10:21:49] <int-e> well, they're right.
[10:22:31] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[10:23:40] <int-e> This isn't a unique propert of Haskell. It's true for all programming languages until you've learned them, or at least another one that is similar.
[10:23:49] *** Quits: emf (~emf@2620:10d:c091:480::1:305b) (Ping timeout: 268 seconds)
[10:24:08] <int-e> Sadly we live in a world where everyone knows something-similar-to-C
[10:24:39] <EvanR> "what the hell does 10 print hello world 20 goto 10 do" said no one ever xD
[10:25:11] *** Parts: Minnozz (~minnozz@salix.minnozz.com) (WeeChat 2.8)
[10:25:39] <int-e> print "hello, world"  raises few questions (except maybe, does it work when there's no paper in the printer?). The "goto 10" takes a bit of understanding.
[10:25:58] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:26:08] <EvanR> yeah, if you leave off that critical first 10
[10:26:23] <EvanR> we're all screwed if you do that
[10:26:39] <int-e> Well the 10 is confusing at first, too.
[10:27:24] <int-e> The thing about learning programming as a teenager though is that it's just one of many confusing things in the world... it doesn't feel all that special.
[10:30:42] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:32:34] *** Joins: arahael (~arahael@203.158.51.1)
[10:33:26] *** Joins: chele (~chele@user/chele)
[10:34:40] <int-e> EvanR: I used to write this kind of thing with `let`, but then I couldn't shadow `xs`, so I'd have xs', xs'' and eventually mix some of these up. This abuse of guards is actually convenient.
[10:35:05] <EvanR> oh yeah
[10:35:17] <EvanR> i hate prime, prime prime, etc
[10:36:14] <int-e> the main downside is that the bindings become invisible to `where`
[10:36:21] <EvanR> someone should invent a language or entire paradigm based on just replacing variables on assignment
[10:36:53] <int-e> Rust kind of does that for things that can't be copied.
[10:37:06] *** Joins: alx741 (~alx741@157.100.93.160)
[10:38:05] *** Joins: img (~img@user/img)
[10:38:11] *** Joins: steven1 (~steven@172.92.136.203)
[10:38:51] <EvanR> what's an example of a thing that can't be copied
[10:41:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[10:41:55] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[10:42:51] <EvanR> the terminology must mean something specific in rust, maybe
[10:45:04] *** Joins: dcoutts_ (~duncan@ip-185-104-136-51.ptr.icomera.net)
[10:47:17] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Ping timeout: 240 seconds)
[10:48:38] <int-e> EvanR: Meh it's non-intuitive because Rust cares a lot about tracking ownership of in-memory objects. So for example, you can't have two references to the same object that allow mutation; that's the basic example of something that can't be copied.
[10:49:17] <int-e> It has a type-class-like system in the form of traits, and there's a Copy trait that only types that can be copied implement.
[10:49:21] <EvanR> ok the reference can't be copied
[10:49:28] <EvanR> not allowed
[10:49:31] *** Quits: phma_ (phma@2001:5b0:210f:4b78:b1e:6610:21b4:b15b) (Read error: Connection reset by peer)
[10:50:10] <int-e> Yeah, it's enforced by the compiler, part of the system that's responsible for Rust's advertised memory-safeness.
[10:50:14] * int-e shrugs.
[10:50:18] *** Joins: phma_ (~phma@host-67-44-208-226.hnremote.net)
[10:50:56] <EvanR> so you can copy that mutable object, you just have to have the pointer first
[10:51:10] <int-e> This isn't the right channel to discuss it (also I'm still learning this, so I'm not good at explaining it yet)
[10:51:27] <EvanR> fair
[11:01:37] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:02:23] *** Joins: featurebug108 (~featurebu@49.205.122.91)
[11:02:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[11:04:02] <featurebug108> Hi! I tried to do stack install on this project - https://github.com/grin-compiler/ghc-whole-program-compiler-project/tree/master/external-stg-interpreter but I am getting this error - https://pastebin.com/HVzUFLBw . Any idea what the error is and how to fix it?
[11:05:45] *** Quits: Ferdirand (~somebody@2001:4c78:2012:5000::2) (Ping timeout: 268 seconds)
[11:07:24] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[11:07:29] *** Joins: Ferdirand (~somebody@2001:4c78:2012:5000::2)
[11:08:59] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:f0a9:34f0:2c07:30d5)
[11:11:55] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[11:12:00] *** Quits: featurebug108 (~featurebu@49.205.122.91) (Quit: Leaving)
[11:13:55] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:18:00] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[11:18:55] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:26:46] *** Joins: cosimone (~user@93-47-229-223.ip115.fastwebnet.it)
[11:29:07] *** Joins: bahamas (~lucian@86.120.77.115)
[11:29:31] <Hecate> < Axman6> Hecate: isn't that soimething that pg_config can do for you? // I wish it did… :( :( :(
[11:29:53] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[11:30:21] *** Joins: alx741 (~alx741@157.100.93.160)
[11:31:50] *** Joins: michalz (~michalz@185.246.204.104)
[11:37:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:47:27] *** Joins: iqubic` (~user@2601:602:9502:c70:1ab:7e18:1540:e9a6)
[11:47:44] *** Quits: iqubic` (~user@2601:602:9502:c70:1ab:7e18:1540:e9a6) (Remote host closed the connection)
[11:47:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[11:50:07] *** Joins: Akiva (~Akiva@user/Akiva)
[11:51:17] *** Quits: iqubic (~user@2601:602:9502:c70:3682:5ffe:e458:d665) (Ping timeout: 240 seconds)
[11:52:22] *** Quits: cosimone (~user@93-47-229-223.ip115.fastwebnet.it) (Remote host closed the connection)
[11:52:44] *** Joins: iqubic (~user@2601:602:9502:c70:1ab:7e18:1540:e9a6)
[11:52:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[11:55:45] *** Joins: max22- (~maxime@2a01cb0883359800fd9f63ef34845b1d.ipv6.abo.wanadoo.fr)
[11:57:41] *** Quits: dcoutts_ (~duncan@ip-185-104-136-51.ptr.icomera.net) (Ping timeout: 256 seconds)
[11:59:14] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:00:05] <YoungFrog> I 
[12:05:51] *** Joins: alx741 (~alx741@157.100.93.160)
[12:09:31] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:10:09] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[12:11:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[12:11:56] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[12:14:32] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[12:15:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:17:26] *** Quits: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:17:44] *** Joins: dwt_ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[12:18:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:19:26] *** Joins: cfricke (~cfricke@user/cfricke)
[12:19:30] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:21:22] *** Joins: img (~img@user/img)
[12:22:08] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:22:35] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[12:23:39] *** Joins: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de)
[12:25:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[12:25:36] *** Joins: featurebug (~featurebu@49.205.122.91)
[12:27:28] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[12:27:57] *** phma_ is now known as phma
[12:28:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:30:35] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[12:36:19] *** Joins: jakalx (~jakalx@base.jakalx.net)
[12:36:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:158b:cfc1:e7b3:d4ac) (Remote host closed the connection)
[12:39:09] *** Quits: steven1 (~steven@172.92.136.203) (Quit: WeeChat 3.2)
[12:40:07] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 250 seconds)
[12:41:55] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[12:47:17] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:47:42] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:48:29] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[12:49:26] *** Quits: bahamas (~lucian@86.120.77.115) (Quit: Lost terminal)
[12:53:43] *** Quits: ubert (~Thunderbi@p200300ecdf1abb03cc2914e8ae945344.dip0.t-ipconnect.de) (Remote host closed the connection)
[12:56:00] *** Joins: Guest24 (~Guest24@2a02:c7f:f716:ac00:195c:86b6:8540:d1a5)
[12:57:59] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[12:59:12] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:02:30] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:08:44] *** Quits: raghavgururajan (9fd51d1ea8@user/raghavgururajan) (Remote host closed the connection)
[13:10:27] *** Quits: ishutin (~ishutin@85-238-77-101.pool.digikabel.hu) (Ping timeout: 250 seconds)
[13:11:56] *** Joins: RiverNotHere (~RiverNotH@cpe-104-172-51-133.socal.res.rr.com)
[13:12:19] *** Joins: ishutin (~ishutin@78-131-74-101.pool.digikabel.hu)
[13:13:03] *** Quits: RiverNotHere (~RiverNotH@cpe-104-172-51-133.socal.res.rr.com) (Client Quit)
[13:18:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[13:18:53] *** Joins: alx741 (~alx741@157.100.93.160)
[13:19:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 252 seconds)
[13:23:02] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::9788) (Ping timeout: 260 seconds)
[13:23:13] *** Joins: Ainoretho (~ypw@huji-132-64-244-111.xt.huji.ac.il)
[13:24:59] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:c4a4:d039:7d:7f7e)
[13:27:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:30:26] *** Quits: mason0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[13:33:26] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[13:36:57] *** Quits: tomku (~tomku@user/tomku) (Read error: Connection reset by peer)
[13:37:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[13:39:45] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[13:41:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Ping timeout: 240 seconds)
[13:43:58] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[13:45:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:47:03] *** Lord_of_Life_ is now known as Lord_of_Life
[13:48:45] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[13:50:40] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[13:51:26] *** Joins: alx741 (~alx741@157.100.93.160)
[13:53:07] *** Joins: tomku (~tomku@user/tomku)
[13:54:51] *** Quits: forell (~forell@user/forell) (Quit: ZNC - https://znc.in)
[13:55:38] *** Joins: forell (~forell@user/forell)
[13:57:27] *** Quits: andjjj23 (~irc@107.170.228.47) (Ping timeout: 250 seconds)
[13:57:45] *** Joins: andjjj23 (~irc@107.170.228.47)
[14:01:21] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[14:02:59] *** Quits: leah2 (~leah@vuxu.org) (Quit: trotz alledem!)
[14:03:09] *** Joins: leah2 (~leah@vuxu.org)
[14:03:09] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:03:11] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:03:30] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:07:53] <merijn> hmm, what's the way to go to run a megaparsec parser against a stream that's parsed by another megaparsec parser?
[14:08:31] <merijn> I see I can define my own stream class, but the only way that works is if I produce a list or something and then parse that, which seems inefficient
[14:17:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[14:20:06] *** Quits: Guest24 (~Guest24@2a02:c7f:f716:ac00:195c:86b6:8540:d1a5) (Quit: Client closed)
[14:20:19] <[exa]> merijn: it should be able to consume anything as long as it has the class instances
[14:20:47] *** Joins: cheater (~Username@user/cheater)
[14:21:01] *** Joins: alx741 (~alx741@157.100.93.160)
[14:21:37] <[exa]> anyway, why would the list be inefficient?
[14:25:38] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[14:26:20] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:c4a4:d039:7d:7f7e) (Remote host closed the connection)
[14:26:32] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:9285:9698:be15:2e15)
[14:27:03] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[14:27:22] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[14:28:25] <merijn> because it effectively ends up being two pass
[14:28:39] <merijn> You parse the entire input and force the list in memory before you can run the other parser
[14:29:02] <merijn> While I wanna use a megaparsec parser to lex the input into a stream of more usable stuff
[14:29:12] <merijn> then parse that stream
[14:29:38] <[exa]> (parse1 <$> parse2 input) doesn't fuse?
[14:29:40] <[exa]> ._.
[14:31:23] <merijn> [exa]: That case is to complex for me to make any predictions about whether it will or won't
[14:34:07] *** Joins: random (~random@46.254.129.95)
[14:34:11] <Profpatsch> Huh, I just noticed that Text.IO.readFile does not correctly handle UTF-8 Byte-Order marks?
[14:34:14] <[exa]> can you model `parse2` as something like `parseTokenAndReturnRest` then fold on it?
[14:34:16] *** random is now known as Guest2110
[14:34:27] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: Lost terminal)
[14:34:32] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[14:34:50] *** Joins: joo-_ (~joo-_@87-49-45-77-mobile.dk.customer.tdc.net)
[14:34:50] *** Quits: joo-_ (~joo-_@87-49-45-77-mobile.dk.customer.tdc.net) (Changing host)
[14:34:50] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[14:35:02] <[exa]> Profpatsch: utf8 needs BOM?
[14:35:45] <Profpatsch> [exa]: No, but Windows will prepend three bytes of BOM to their unicode files
[14:35:57] <Profpatsch> So I’d expect Text.IO to know about that
[14:35:58] <Guest2110> hey guys
[14:36:02] <Profpatsch> Maybe I’m wrong
[14:36:05] <Guest2110> can anyone lend a hand with Generics
[14:36:08] <Profpatsch> I’ll just strip them I guess
[14:36:09] <Guest2110> is this possible?
[14:36:10] <Guest2110> https://pastebin.com/7egxTXy0
[14:36:55] <[exa]> Profpatsch: check out GHC.IO.Encoding, but generally I wouldn't expect Text to really handle that
[14:36:56] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:38:25] <Profpatsch> I mean to be sure it’s a bit specific to Windows madness
[14:38:35] <Profpatsch>      & Text.dropWhile (== byteOrderMark)
[14:38:38] <Profpatsch> should fix it
[14:38:49] <Profpatsch>     let byteOrderMark = '\65279'
[14:39:39] <[exa]> yeah Windows doesn't really help there. :]
[14:40:17] <[exa]> Guest2110: you might be able to find `everywhere` function, which sounds like what you want
[14:41:14] <merijn> Profpatsch: UTF-8 BOM is an insane MS atrocity and the moron who came up with that should be shot
[14:41:58] <[exa]> Guest2110: highly suggest you have a look at SYB paper. The combination with classes should work out too, with a bit of care.
[14:42:25] <[exa]> merijn: thanks, I didn't want to say this first. :D
[14:42:45] <merijn> Profpatsch: Check if the new utf-8 based text RC supports it?
[14:43:21] <Guest2110> [exa]: I'll look into `everywhere`, thanks!
[14:43:26] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[14:44:18] <Guest2110> [exa]: ah, that's different from what I need, `everywhere` is `a -> a` and I don't have an `a` available, just need to extract some metadata from a type
[14:44:31] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[14:45:23] *** Joins: mmhat (~mmh@55d46fe9.access.ecotel.net)
[14:45:34] *** Joins: mason0 (~bc8147f2@cerf.good1.com)
[14:47:14] <[exa]> Guest2110: yes there are other functions for that, I just don't remember the precise names
[14:47:26] <Guest2110> [exa]: on it, thanks a lot again!
[14:49:01] <[exa]> Guest2110: you might like "everything", only the type is a bit obscure
[14:49:25] <[exa]> it's basically the one that works with `mkQ` or `makeQuery` from the SYB paper, not sure what was the precise name anymore
[14:49:39] <[exa]> but basically you can have stuff like `everything + (
[14:49:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[14:49:45] <[exa]> oh snap
[14:50:10] <Guest2110> [exa]: I need to get my reading glasses because there's some huge gaps to be filled haha
[14:50:17] <[exa]> `everything (+) (\MyDataPiece x -> intval x) myStruct`
[14:50:41] <[exa]> (very roughly)
[14:52:41] <[exa]> the paper here https://ldpreload.com/p/syb/hmap.pdf , getting roughly to sections ~3.3 to 4.1 should solve your problem
[14:53:24] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Quit: leaving)
[14:53:26] <[exa]> + Typeable and Data instances are generated by GHC (you just need to write the `deriving` for it
[14:53:33] <[exa]> )
[14:53:38] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[14:56:17] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[14:57:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[14:57:56] *** Quits: Guest6030 (~pyon@2800:200:e840:42c7:c75:c5f:d434:a5f1) (Quit: WeeChat 3.3)
[14:58:21] *** Joins: unyu (~pyon@user/pyon)
[15:00:38] <sprout> https://pasteboard.co/TJarPW9Gt0Zz.png <- AoC,  day 16,  task 2.  egel
[15:01:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:02:43] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[15:03:19] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[15:07:26] *** Joins: alx741 (~alx741@157.100.93.160)
[15:11:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[15:12:11] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:12:13] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[15:13:45] *** Quits: dsrt^ (~dsrt@98.188.240.142) (Ping timeout: 256 seconds)
[15:15:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:16:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:18:04] *** Quits: cheater (~Username@user/cheater) (Quit: BitchX: use it, it makes you bulletproof)
[15:21:58] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:22:13] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[15:24:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:25:48] *** Joins: cheater (~Username@user/cheater)
[15:28:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:29:08] *** Joins: earendel (uid498179@user/earendel)
[15:29:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:30:28] *** Quits: n3t (~n3t@s45.mydevil.net) (Changing host)
[15:30:28] *** Joins: n3t (~n3t@user/n3t)
[15:32:55] *** Joins: alx741 (~alx741@157.100.93.160)
[15:36:02] *** Joins: cosimone (~user@93-47-229-223.ip115.fastwebnet.it)
[15:40:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:40:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:54] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[15:41:54] *** Joins: asm (~alexander@user/asm)
[15:43:38] *** Joins: __monty__ (~toonn@user/toonn)
[15:43:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:44:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[15:44:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:45:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[15:46:02] *** Joins: jippiedoe (~david@145.107.128.124)
[15:46:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:46:31] *** Quits: acidjnk (~acidjnk@p200300d0c7271e9405040680e1e3c542.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[15:46:33] *** Joins: fef (~thedawn@user/thedawn)
[15:46:58] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[15:47:20] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[15:48:44] *** Joins: acidjnk (~acidjnk@p200300d0c7271e942878552e9699ebb2.dip0.t-ipconnect.de)
[15:49:33] *** Joins: kuribas (~user@ptr-25vy0i8a8smuqmxkytj.18120a2.ip6.access.telenet.be)
[15:53:01] *** Joins: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net)
[15:55:37] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[15:55:53] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[15:56:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:53] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[15:59:05] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[16:01:21] *** Joins: pavonia (~user@user/siracusa)
[16:01:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:02:30] *** Joins: alx741 (~alx741@157.100.93.160)
[16:02:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:04:16] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:07:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:08:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[16:08:23] *** Quits: Ainoretho (~ypw@huji-132-64-244-111.xt.huji.ac.il) (Quit: WeeChat 3.3)
[16:08:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:12:38] *** Joins: pfurla_ (~pfurla@2804:18:5827:38:71a1:6773:333f:330d)
[16:13:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:14:19] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:14:23] *** Quits: pfurla (~pfurla@177.25.189.1) (Ping timeout: 256 seconds)
[16:14:27] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:17:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[16:19:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:20:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:21:41] *** Joins: cadro (~cadro@65.0.broadband17.iol.cz)
[16:22:05] <dminuoso> sprout: Can you provide some meaningful example where eager combinator rewriting offers an advantage over say what Haskell has?
[16:22:44] <cadro> I'm working on a multi-threaded program, and one of the threads' computation halts unexpectedly. I suspect it's blocked on a blackhole (as I'm doing some knot tying and clearly getting it wrong). How can I figure out what it's waiting for?
[16:22:57] *** Quits: sleblanc (~sleblanc@user/sleblanc) (Ping timeout: 240 seconds)
[16:23:18] <cadro> "halts" as in "doesn't proceed" (but no error message)
[16:23:18] <sprout> it's more predictable.   sometimes haskell programs explode unexpectedy.  and the other is that I can abuse the predicatibility for say,  threads which hold on to a lock
[16:23:34] <sprout> when the lock goes out of scope the lock is released
[16:23:42] <dminuoso> cadro: If you reenter a black hole, the RTS should immediately exit and produce a diagnostic.
[16:24:03] <hpc> dminuoso: in the threaded runtime it doesn't, because another thread can potentially break the loop
[16:24:14] <dminuoso> hpc: Oh really?
[16:24:26] <hpc> also because it could just be two threads entering the same thunk
[16:24:57] <hpc> try compiling a loop normally and with -threaded
[16:25:09] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[16:25:10] *** Quits: puke (~puke@user/puke) (Remote host closed the connection)
[16:25:28] *** Joins: puke (~puke@user/puke)
[16:25:53] <dminuoso> cadro: You could run from GHCI, set -fbreak-on-error, and run using `:trace`. Then you can send SIGINT via C-c and then use GHCi to explore?
[16:26:07] <dminuoso> That might give you an indication of where you are and how you got to that
[16:26:13] <dminuoso> Just a thought
[16:26:23] <hpc> hmm, except when i try it now i can't get it to stop printing <<loop>>
[16:26:36] <hpc> maybe i am misrembering, or it's changed "recently"
[16:26:58] <cadro> dminuoso: hmm I might try that, although I'm not particularly fond of this because it'll take me a while to run this behemoth from GHCI...
[16:26:58] <geekosaur> behavior varies per release ime
[16:27:26] <hpc> i also just did print (let x = x +1 in x), so maybe that's too trivial
[16:27:26] <geekosaur> -fobject-code? although that might impact the information you get from breakpoints
[16:27:50] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[16:29:15] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:29:56] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:30:30] *** Joins: alx741 (~alx741@157.100.93.160)
[16:33:01] <dminuoso> hpc: But it seems to make sense now that I think about it.
[16:33:08] <dminuoso> A different thread should be blocked
[16:33:20] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:34:17] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[16:36:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:37:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:38:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[16:40:13] *** Quits: max22- (~maxime@2a01cb0883359800fd9f63ef34845b1d.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:42:27] *** Quits: iqubic (~user@2601:602:9502:c70:1ab:7e18:1540:e9a6) (Remote host closed the connection)
[16:43:15] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[16:45:25] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[16:45:41] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[16:48:23] *** Quits: featurebug (~featurebu@49.205.122.91) (Ping timeout: 256 seconds)
[16:49:57] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 240 seconds)
[16:50:11] *** Joins: vpan (~0@212.117.1.172)
[16:51:26] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:55:51] <merijn> There was no "strong" combinator in base, was there?
[16:56:55] *** Joins: iqubic (~user@2601:602:9502:c70:c1df:76dd:a2c3:7b85)
[16:59:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[16:59:37] *** Joins: alx741 (~alx741@157.100.93.160)
[17:05:11] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:07:04] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[17:09:27] *** Quits: cadro (~cadro@65.0.broadband17.iol.cz) (Quit: Client closed)
[17:12:36] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[17:12:45] *** Quits: jippiedoe (~david@145.107.128.124) (Ping timeout: 256 seconds)
[17:12:48] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[17:13:58] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:19:20] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:19:57] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[17:21:33] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:23:04] *** Joins: alx741 (~alx741@157.100.93.160)
[17:26:10] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:26:13] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:28:07] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:28:08] <dminuoso> merijn: What type signature would that have?
[17:28:35] <merijn> dminuoso: "Applicative f => (f a, b) -> f (a, b)"
[17:29:24] <dminuoso> merijn: Why does this need Applicative?
[17:29:39] *** Joins: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de)
[17:29:42] <dminuoso> It seems this would work for all Functor
[17:29:44] <merijn> oh, I guess Functor is enough
[17:30:56] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:31:39] <iqubic> f (fa, b) = fmap (\x -> (x, b)) fa, right?
[17:31:49] <dminuoso> Yes.
[17:32:32] <merijn> iqubic: Sure, but I need it so often that a convenient name would be nice
[17:32:49] <iqubic> I'm not sure what you should call it.
[17:32:49] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:33:06] <merijn> Well, strong, since that's the CT name I know for it :p
[17:34:42] *** Joins: curiousgay (~curiousga@77-120-141-90.kha.volia.net)
[17:35:14] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:35:21] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:35:25] <iqubic> Strong is good. If you have Sum types, you can use Choice.
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[17:35:52] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Remote host closed the connection)
[17:36:14] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:36:14] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Client Quit)
[17:36:29] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[17:37:26] <dminuoso> iqubic: The term strength is used because your `f` is the canonical categorical strength that all functors have.
[17:37:39] <dminuoso> or tensorials srength, rather
[17:37:42] <dminuoso> gah.
[17:37:44] <dminuoso> tensorial strength
[17:37:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 245 seconds)
[17:38:22] <iqubic> I see. All I know is that the profunctor package has Strong and Choice as things. And those can be used me make lenses and prims. jle` has a blog post on it.
[17:38:32] <dminuoso> yeah, the name of Strong is derived from this as well
[17:39:08] <iqubic> s/things/typeclasses with a Profuctor constraint/
[17:39:45] *** Joins: max22- (~maxime@2a01cb0883359800742a76b71025b974.ipv6.abo.wanadoo.fr)
[17:40:54] <raehik> I have a type that lets me decide on the inner type for a functor: data Apply a f = Apply (f a)
[17:41:11] <iqubic> Seems reasonable.
[17:41:15] <raehik> Is there something like that in a library or in base? I can't Hoogle it for some reason
[17:44:26] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:46:58] <dminuoso> raehik: Mmm, one variant of is is prominently found in lens
[17:47:10] <dminuoso> type Lens s t a b = forall f . Functor f => (a -> f b) -> s -> f t
[17:47:24] *** Joins: xsperry (~xs@user/xsperry)
[17:47:33] *** Quits: somkls^ (~somkls@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[17:47:41] <dminuoso> So this thing is polymorphic over any Functor, and in most instances the consumer would pick either Const or Identity
[17:48:43] *** Joins: jippiedoe (~david@145.89.5.239)
[17:48:57] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[17:50:37] *** Joins: alx741 (~alx741@157.100.93.160)
[17:50:57] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[17:51:58] <raehik> dminuoso: right, I think I see that. I'll look around the lens docs. probably will rename to be problem specific first (espec. if the thing it generalizes to is lenses)
[17:52:22] <dminuoso> raehik: Something like Apply I havent seen yet, and Im not sure this would yield much benefit.
[17:52:47] <raehik> indeed it was just a type that I needed (I think)
[17:52:55] <dminuoso> Mind my asking, what for?
[17:53:01] <raehik> I want a list of functors over a given type
[17:53:16] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 245 seconds)
[17:53:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:53:51] <dminuoso> Sure, but why do you think you need a separate data type for that?
[17:54:04] <raehik> this way lets me use `Apply a` with vinyl like `Rec (Apply String) '[Identity, Const ()]`
[17:54:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[17:54:16] <merijn> ok...I don't understand how to implement megaparsec's TraversableStream...
[17:54:19] <dminuoso> % f :: Functor f => [f a] -> Int; f = undefined
[17:54:19] <yahb> dminuoso: 
[17:54:51] <dminuoso> raehik: Okay I cant help any further then. Have no vinyl knowledge whatsoever.
[17:55:02] <merijn> Anyone got any clues?
[17:55:46] <raehik> dminuoso: I don't need vinyl! only picked it up because it seemed to fit. the best solution for me would be the simplest
[17:55:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[17:56:04] <dminuoso> raehik: What is the general problem you are trying to solve?
[17:56:28] <dminuoso> vinyl seems like quite an extreme hammer if you dont otherwise want it precisely because of what it can do..
[17:56:49] <raehik> I'd like to define a list of different functors over a given type, so I can strip them off one by one (and potentially change the concrete type)
[17:57:14] <dminuoso> "list of different functors over a given type"
[17:57:30] <dminuoso> As in '[[], Identity, IO] ?
[17:58:24] <raehik> yeah. though the usage is specifically for defining some "metadata" on `a`, so the functors will be mostly record types that may or may not use a
[17:58:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[17:59:04] <dminuoso> I see.
[17:59:18] <dminuoso> So roughly '[Tagged "foo", Tagged "bar", Tagged "quux"] ?
[17:59:19] <raehik> My original solution was to nest them. But that means ordering them in a certain way, made something a little awkward
[17:59:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[18:00:17] <raehik> perhaps? I need to check what Tagged is
[18:00:52] <dminuoso> % newtype Tagged (t :: k) a = Tagged { unTagged :: a }
[18:00:52] <yahb> dminuoso: 
[18:01:23] <dminuoso> Anyway, this is all too sketchy and not clear to me
[18:02:35] <raehik> thank you very much for the help, it is sketchy to me too hah
[18:03:34] <raehik> fundamentally I want to go from having to nest functors on a given type a to having a "flat" list of them instead
[18:04:29] <dminuoso> Oh.
[18:04:31] <raehik> nesting them was easy, I just wrote my "metadata" functors to have an "inner metadata" field. but it's not ideal
[18:04:44] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[18:05:10] <raehik> I figured with a list of functors over a, I could strip any one in any order (and it would do something to some type outside the list)
[18:05:16] <dminuoso> What kind of metadata functors are these?
[18:05:52] <raehik> hope you don't mind if I link code https://github.com/raehik/bytepatch/blob/main/src/BytePatch/Patch/Align.hs#L16-L21
[18:06:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:06:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:06:00] *** Joins: wroathe (~wroathe@user/wroathe)
[18:06:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:06:30] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[18:06:37] <raehik> I have a patch over some type `a` (ByteString, Text). I have some checks to perform before patching, they need to know `a`
[18:06:46] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[18:06:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:08:23] <dminuoso> raehik: My very first intution is: why not simply have a uniform metadata type, such that you can simply have `data D a = D { metadata :: [Metadata], payload :: a }`
[18:09:12] <dminuoso> But, I think Im beginning to understand the problem domain here
[18:09:25] *** Quits: max22- (~maxime@2a01cb0883359800742a76b71025b974.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:10:35] <dminuoso> Ah heh, you have that already.
[18:10:39] <dminuoso> That's your `Patch`
[18:10:59] <dminuoso> Or `Pos`
[18:11:07] <raehik> the code might be weird right now because I got halfway thru the meta rewrite xd
[18:11:26] <dminuoso> And I can also see why you're exploring vinyl.
[18:11:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 268 seconds)
[18:12:00] <dminuoso> You want to have these sort of anonyms sum types indexed by attached metadata, where you can slice out a piece of metadata, and everything should just work out
[18:12:01] <raehik> I liked being able to pick and mix metadatas. the intent is to have a patch with a bunch of metadata, strip them off, and end up with a patch with '[] meta
[18:12:02] <dminuoso> Right?
[18:12:16] <dminuoso> A kind of..
[18:12:28] <raehik> record!
[18:12:33] <raehik> maybe? :)
[18:12:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[18:13:34] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:13:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[18:14:17] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[18:14:42] <raehik> dminuoso: to your above msg I think so yes. I may want to tag them though if it makes sense with this design, so vinyl looked even nicer
[18:14:45] <dminuoso> align :: forall (mss :: [Meta], ms :: [Meta]). mss ~ ms `Sans` MetaPos => Pos 'RelSeek ms -> Either Error mss
[18:14:49] <dminuoso> raehik: ^- something along these lines?
[18:15:04] <dminuoso> I mean it's just something sketchy with no regard of implementability
[18:15:31] <dminuoso> Oops hold on
[18:15:34] <dminuoso> I missed something
[18:15:52] *** Joins: alx741 (~alx741@157.100.93.160)
[18:16:11] <dminuoso> align :: forall s (mss :: [Meta], ms :: [Meta]). (SeekRep s ~ Natural, mss ~ ms `Sans` MetaPos s) => Pos 'RelSeek ms -> Either Error (Pos s mss)
[18:16:14] <dminuoso> Simplified a bit
[18:16:27] <raehik> yesss that's exactly it. I want to have a big ol type-level record that I can rip types out of one by one
[18:16:53] <dminuoso> Can vinyl express this "ripping it out"?
[18:17:17] <raehik> I believe so, I'm playing with it & having more success than my tries with HList/type-level lists
[18:18:52] <raehik> there's RecSubset which only works when vinyl can see the record you're ripping out does exist in the argument
[18:18:54] *** Joins: jakalx (~jakalx@base.jakalx.net)
[18:19:22] <dminuoso> raehik: But yeah, I would simply have a uniform `Metadata` type
[18:19:46] <raehik> what do you mean by uniform?
[18:19:54] <dminuoso> That would greatly simplify the surroundings (and keep myself sane), at the cost of not proving correct metadata has been supplied or consumed.
[18:19:59] <raehik> right, yes
[18:20:17] <dminuoso> Well, a big honking `data Metadata = MetaPos ... | MetaThing ... | MetaOther ...`
[18:20:36] <dminuoso> And then just assume you have `[Metadata]` stateful operation
[18:20:59] <raehik> it's largely because this started as a JSON-friendly representation and some meta belonged with one type, other with another type
[18:21:24] <dminuoso> raehik: By the way, why do you want to *remove* metadata?
[18:21:34] <raehik> thanks awfully much dminuoso this is very helpful
[18:21:41] <dminuoso> Is that just to reduce memory residency? Or is there a different reason?
[18:22:17] <raehik> Just for clarity. It means I can prepare the patch before applying, and know that it's "safe" to apply (or it's been processed)
[18:22:58] <raehik> like one set of metadata tries to convert the patch into a binary representation (so Text goes to UTF-8 bytes with a null term)
[18:23:21] *** Quits: jespada (~jespada@87.74.33.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:23:22] <raehik> I could do that during the patch or I could prepare it before. it's all a big hobby thing that grew from an actually useful tool
[18:23:49] *** Joins: jespada (~jespada@87.74.33.157)
[18:24:01] <dminuoso> So this is just my personal experience. I think when you try to assert your program has been constructed correctly in the type system, you invest so much time in finding type level trickeries, end up with completely rubbish diagnostics on the slightest of typos, often to assert something simple as `Ensure I dont write `foo >> bar` instead of `bar >> foo`.
[18:24:02] <raehik> (metadata might not be the right word)
[18:24:03] *** Joins: max22- (~maxime@2a01cb0883359800e979b10b27a72e14.ipv6.abo.wanadoo.fr)
[18:24:19] <dminuoso> That it seems that people sometimes lose track of their goals.
[18:24:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:24:54] <dminuoso> For our programs, I ended up throwing most type level trickeries away, and simply reengineering the program structure, so that validating correct program construction is a matter of looking at say 3 lines
[18:25:11] <raehik> yeah I've certainly had that for some projects
[18:25:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:25:26] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:26:09] <raehik> I can see where the extra type safety could be discarded and everything would work otherwise the same now
[18:26:35] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:9285:9698:be15:2e15) (Ping timeout: 252 seconds)
[18:26:49] <raehik> perhaps I go back to that, *then* attempt to split everything up into layers again
[18:27:20] <dminuoso> Your choice, Im not trying to sway you
[18:27:34] <zero> is there a good reason we can't eta reduce one definition of a function on a specific pattern match and not on others?
[18:27:50] <dminuoso> But given the size or your project, I think engineering overkill is the right term here.
[18:28:41] <mason0> @hoogle (a, b, c) -> a
[18:28:42] <lambdabot> Data.Tuple.Utils fst3 :: (a, b, c) -> a
[18:28:42] <lambdabot> Data.Tuple.Extra fst3 :: (a, b, c) -> a
[18:28:42] <lambdabot> Extra fst3 :: (a, b, c) -> a
[18:28:50] <mason0> which one should I use?
[18:29:06] <dminuoso> mason0: Id just write mine on the spot.
[18:29:13] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:f0a9:34f0:2c07:30d5) (Quit: WeeChat 2.8)
[18:29:14] <dminuoso> Or rather, I do. :)
[18:29:19] <mason0> I did as well :P
[18:29:33] <mason0> named it the same too
[18:29:37] <mason0> @hoogle (a, b, c) -> c
[18:29:38] <lambdabot> Data.Tuple.Utils thd3 :: (a, b, c) -> c
[18:29:38] <lambdabot> Data.Tuple.Extra thd3 :: (a, b, c) -> c
[18:29:38] <lambdabot> Extra thd3 :: (a, b, c) -> c
[18:29:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 252 seconds)
[18:29:58] <kuribas> raehik: You could more simply use Maybe fields.
[18:30:09] <kuribas> Then instead of removing fields, just set them to Nothing.
[18:30:12] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:66c1:82a7:41b7:a81d)
[18:30:18] <dminuoso> zero: This is a good question.
[18:30:38] <dminuoso> And at times I've wondered myself
[18:30:50] <mason0> could we write generic fst, snd, etc functions, that would work on any tuple size? lens somehow manages to do it
[18:31:13] <mason0> but I'm not sure how
[18:31:16] <dminuoso> zero: The one thought that comes to mind, perhaps this has subtle implications on WHNF.
[18:31:17] <raehik> mason0: lens just has a ton of instances for large tuples xD
[18:31:37] <dminuoso> zero: Recall how `f pat pat = z` has a different meaning from `p pat = \pat -> z`
[18:31:39] <janus> mason0: i like 'extra' because it is made by Neil Mitchell which is super trustworthy
[18:31:40] <mason0> just manually writing typeclass instances up to supported tuple length?
[18:31:42] <janus> @package extra
[18:31:42] <lambdabot> https://hackage.haskell.org/package/extra
[18:31:56] <dminuoso> zero: So perhaps there's a connection here.
[18:32:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e942878552e9699ebb2.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:32:02] <janus> mason0: it has many other useful functions you're likely to need
[18:32:21] <raehik> kuribas: yep, thanks. it was convenient to structure it all in a layer-based approach but the same could be done with a bunch of Maybes
[18:32:23] <mason0> janus, okay!
[18:32:30] <dminuoso> mason0: Lens just wrote them out one by one.
[18:32:39] <dminuoso> And stuffed it into a typeclass.
[18:32:57] <dminuoso> https://hackage.haskell.org/package/lens-5.1/docs/Control-Lens-Combinators.html#t:Each
[18:33:10] <dminuoso> Note how they only support tuples up to 9 elements
[18:33:21] <raehik> oh that's baby tuples. I've seen instances for like 40 LOL
[18:33:24] <janus> some people will judge you for using lens. better avoid it and you won't have to fight them
[18:33:30] <mason0> a bit primitive, but maybe fst and snd should have been written like that as well
[18:33:50] <dminuoso> Perhaps, indeed.
[18:34:44] <dminuoso> mason0: sadly you'd have to have separate typeclasses. So you'd have one Fst, one Snd...
[18:35:00] <dminuoso> Because the lens-style implementation wouldn't work for actual `fst` or `snd`
[18:35:05] <dminuoso> At least not in a nice way
[18:35:24] <dminuoso> % (1,) ^? _3
[18:35:24] <yahb> dminuoso: ; <interactive>:157:1: error:; * Could not deduce (Num t0); from the context: (Num t, Field3 (t2 -> (t, t2)) (t2 -> (t, t2)) a a); bound by the inferred type for `it':; forall {t} {t2} {a}. (Num t, Field3 (t2 -> (t, t2)) (t2 -> (t, t2)) a a) => Maybe a; at <interactive>:157:1-10; The type variable `t0' is ambiguous; * In the ambiguity check for the in
[18:35:26] <dminuoso> % (1,2) ^? _3
[18:35:26] <yahb> dminuoso: ; <interactive>:158:1: error:; * Could not deduce (Num a0); from the context: (Num a, Num b, Field3 (a, b) (a, b) a1 a1); bound by the inferred type for `it':; forall {a} {b} {a1}. (Num a, Num b, Field3 (a, b) (a, b) a1 a1) => Maybe a1; at <interactive>:158:1-11; The type variable `a0' is ambiguous; * In the ambiguity check for the inferred type for `
[18:35:28] <dminuoso> Uh
[18:36:05] <dminuoso> ACtually even lens does this with Field1, Field2, Field3, Field4, Field5...
[18:41:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:41:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:41:14] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:42:16] *** Joins: notzmv (~zmv@user/notzmv)
[18:42:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[18:43:10] <mason0> hmm I actually don't have any idea how to write this typeclass. the types I wrote make no sense, and I can't figure out the right ones. https://paste.tomsmeding.com/7gNEGRcd
[18:43:24] *** Joins: alx741 (~alx741@157.100.93.160)
[18:44:10] <merijn> mason0: You can't write the right ones without extension voodoo
[18:44:47] <mason0> I should be able to write snd in standard haskell? I don't know how to do that either
[18:44:52] <mason0> for a pair
[18:45:05] <merijn> mason0: You don't need a class for that, though?
[18:45:28] <mason0> I know, but I'm just wondering how the types would look
[18:45:36] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:45:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:45:59] <merijn> "(a,b) -> a" and "(a,b) -> b"?
[18:46:26] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 260 seconds)
[18:46:36] <mason0> what do we put in instance definition? kind has to be * -> *
[18:46:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Ping timeout: 240 seconds)
[18:46:51] *** Joins: dcoutts_ (~duncan@ip-185-104-136-51.ptr.icomera.net)
[18:47:47] <merijn> mason0: Rewind: where does the class come in and why do you think you need a class?
[18:48:43] <dminuoso> % class Fst a where type FstTy a; fst :: a -> FstTy
[18:48:44] <yahb> dminuoso: ; <interactive>:165:45: error:; * Expecting one more argument to `FstTy'; Expected a type, but `FstTy' has kind `* -> *'; * In the type signature: fst :: a -> FstTy; In the class declaration for `Fst'
[18:48:48] <mason0> I wanted to try writing generic fst, snd, etc functions. and while trying, I figured out I don't know how to write any kind of instance for tuple
[18:48:48] <dminuoso> % class Fst a where type FstTy a; fst :: a -> FstTy a
[18:48:48] <yahb> dminuoso: 
[18:48:51] <dminuoso> % instance Fst (a, b) where type FstTy (a, b) = a; fst (a, b) = 
[18:48:51] <yahb> dminuoso: ; <interactive>:167:63: error: parse error (possibly incorrect indentation or mismatched brackets)
[18:48:53] <dminuoso> % instance Fst (a, b) where type FstTy (a, b) = a; fst (a, b) = a
[18:48:53] <yahb> dminuoso: 
[18:49:05] <dminuoso> % :t fst
[18:49:05] <yahb> dminuoso: Fst a => a -> FstTy a
[18:49:17] <dminuoso> % instance Fst (a, b, c) where type FstTy (a, b, c) = a; fst (a, b, c) = a
[18:49:17] <yahb> dminuoso: 
[18:49:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93)
[18:49:26] <dminuoso> % fst ('a', 'b')
[18:49:26] <yahb> dminuoso: 'a'
[18:49:28] <dminuoso> % fst ('a', 'b', 'c')
[18:49:28] <yahb> dminuoso: 'a'
[18:49:30] *** Joins: MiguelNegrao (~MiguelNeg@2001:818:dc71:d100:e682:f5cd:9590:d961)
[18:49:31] <mason0> dminuoso, do I need any extension for that?
[18:49:35] <dminuoso> Yes, TypeFamilies
[18:49:41] <dminuoso> Alternatively you can do it with FunctionalDependencies
[18:49:53] <mason0> which extension would be prefered for this?
[18:50:12] <dminuoso> TyFams are usually more ergonomic for this type of thing.
[18:50:32] <merijn> hmm, what's the right (mega)parsec combinator for parse "up to N times"?
[18:50:46] *** Joins: zebrag (~chris@user/zebrag)
[18:51:02] <dminuoso> merijn: With fundeps you also need MultiParamTypeClasses, FlexibleInstances, and I think you need FlexibleContexts in use sites?
[18:51:41] <dminuoso> Oh, mason0.
[18:52:52] <dminuoso> merijn: Mmm, can you use replicateM and just disable backtracking?
[18:52:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[18:52:57] <MiguelNegrao> Hi all, I'm working on a library with two different possible implementations (for two different situations), some core functions have the same type signature but a different implementation. I then have some other functions which use these core functions. I would like to avoid having to duplicate the code, having to write these extra functions
[18:52:58] <MiguelNegrao> twice, one for each implementation, as the code is exactly the same, they just use a different version of the one of the core functions. Something like  having functions core1 and core2 and then having extra = core1 1 or extra = core2 1 , depending on which module the user imports. Is there some tricks with modules do achieve this ?
[18:52:58] <merijn> dminuoso: Maybe?
[18:53:00] <mason0> dminuoso it works nicely. I have no idea how, but it works, and it is easy to add support for longer tuples
[18:53:34] <dminuoso> mason0: So a type family is just a type-level function that takes types as input, and produces types as output
[18:54:03] <merijn> MiguelNegrao: Not realy? But you can just have an internal implementation that takes the core function as argument
[18:54:11] <dminuoso> mason0: FstTy is furthermore associated to the typeclass, such that any instance must also provide a type family instance, which allows you to figure out the resulting type of 
[18:54:18] <mason0> dminuoso, just curious how far we could take this? could we make "at" function, that accepts int literal for the position of the element in the tuple? I guess not because it needs to be known at compile time? or maybe at could take _1, which is what lens does
[18:54:29] <MiguelNegrao> @merjin : that was also my plan if I didn't find anything else
[18:54:29] <lambdabot> Unknown command, try @list
[18:54:35] <dminuoso> mason0: Heh, well yes.. we sort of can.
[18:54:42] <merijn> MiguelNegrao: And then define "myCoreFunction = internalImplementation coreFunction1" and "myCoreFunction = internalImplementation coreFunction2" in separate modules
[18:54:55] <mason0> int literal or _1?
[18:54:58] <dminuoso> mason0: but this starts to get very dark in type trickery land.
[18:55:00] <merijn> MiguelNegrao: That's almost certainly going to be the easiest/most maintainable solution
[18:55:02] <lyxia> mason0: https://hackage.haskell.org/package/generic-lens-2.2.0.0/docs/Data-Generics-Product-Positions.html#v:position
[18:55:11] <mason0> dminuoso, yeah, I should probably understand this code first
[18:55:30] <dminuoso> mason0: this current piece of code is highly trivial, you can probably figure it out after 3 minutes of staring yourself.
[18:55:33] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Quit: WeeChat 3.3)
[18:55:33] <MiguelNegrao> merijn: ok, great, thanks. Just wanted to check I wasn't missing something.
[18:55:59] <merijn> MiguelNegrao: Defining a generic helper and partially applying it is a common design pattern
[18:56:48] <merijn> dminuoso: How would I disable backtracking? Simply 'replicateM_ 5 (try foo)' isn't sufficient
[18:57:03] <dminuoso> Mmm, doesnt `try` explicitly enable backtracking?
[18:57:19] <dminuoso> oh wait
[18:57:24] <dminuoso> No this is actually potentialy better
[18:57:26] <merijn> Well, without try it *definitely* doesn't work
[18:57:30] <dminuoso> Mmm
[18:57:41] <dminuoso> merijn: Do you need the output?
[18:57:46] <dminuoso> Or can it be thrown away
[18:57:48] <merijn> Unsure :p
[18:57:51] <dminuoso> heh :P
[18:58:00] <dminuoso> Honestly, just roll your replicateM_ variant using Alternative?
[18:58:15] <dminuoso> The time we talked here you could have written it 10 times over.
[18:58:22] <dminuoso> :p
[18:58:45] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 268 seconds)
[18:59:03] <merijn> dminuoso: I don't think it's that straightforward?
[18:59:19] <dminuoso> merijn: Mmm, count' from parser-combinators seems to fit
[18:59:28] *** Quits: MiguelNegrao (~MiguelNeg@2001:818:dc71:d100:e682:f5cd:9590:d961) (Quit: Client closed)
[18:59:31] <dminuoso> i.e. `count' 0 6 foo`
[18:59:51] <dminuoso> merijn: and yes, its very straight forward
[18:59:59] <dminuoso> Internally its almost identical to replicateM_
[19:00:21] <dminuoso> https://hackage.haskell.org/package/parser-combinators-1.3.0/docs/src/Control.Applicative.Combinators.html#count%27
[19:00:22] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[19:00:23] <dminuoso> https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Control.Monad.html#replicateM
[19:03:34] <byorgey> merijn: if this is for today's AoC, I don't see how that combinator is helpful ;-)
[19:03:53] <merijn> byorgey: Lack of imagination on your part :p
[19:04:03] <byorgey> hehe
[19:04:28] <byorgey> merijn: maybe you want https://hackage.haskell.org/package/megaparsec-9.2.0/docs/Text-Megaparsec.html#v:getOffset ?
[19:04:45] <xerox> . o O ( ... length type ids of 1 ... )
[19:05:01] <merijn> byorgey: No? Certainly no yet
[19:05:12] <byorgey> OK. carry on
[19:05:20] *** Joins: xkuru (~xkuru@user/xkuru)
[19:06:41] *** Joins: vpan (~0@212.117.1.172)
[19:06:49] *** Joins: Guest8273 (~Guest82@2001:8003:26ff:8c01:1417:7515:4ef4:e82d)
[19:07:14] <mason0> pretty neat! https://paste.tomsmeding.com/Qk3e76l3
[19:07:30] *** Joins: pta2002 (~pta2002@161.230.90.170)
[19:07:44] <pta2002> Hello, I'm trying to make a parser in parsec
[19:08:12] <xerox> nice choice
[19:08:21] <pta2002> And one of the steps I need to do to make the main parser is to run a subparser only on a specific bit
[19:08:26] *** Quits: Guest8273 (~Guest82@2001:8003:26ff:8c01:1417:7515:4ef4:e82d) (Client Quit)
[19:08:40] <sprout> hah!
[19:08:43] <pta2002> like, I have a string "abcdef" but I want to run a parser on string "abc"
[19:08:47] *** Joins: adam_b_dawg (~adam_b_da@2001:8003:26ff:8c01:1417:7515:4ef4:e82d)
[19:08:48] <pta2002> inside another parser
[19:08:52] <sprout> https://pasteboard.co/TJarPW9Gt0Zz.png <- AoC,  day 16,  task 2.  egel
[19:08:56] <pta2002> yes that's what I need :P
[19:09:34] <sprout> should be possible in haskell without problems too, right?
[19:09:42] <pta2002> what language is that?
[19:09:45] <xerox> sure, you just run the same parser you're defining
[19:09:49] *** Joins: alx741 (~alx741@157.100.93.160)
[19:10:00] <pta2002> oh egel got it, never heard of it
[19:10:07] <pta2002> xerox: but how can I limit it to those bits?
[19:10:25] <xerox> you write the parser such that it doesn't overrun, it'll consume only as much as it needs
[19:10:27] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[19:10:29] <pta2002> other than just doing some ugly thing like parse [parser] "" [message]
[19:10:52] <pta2002> oh yeah yeah ik but i need to run it with many
[19:11:00] *** Quits: adam_b_dawg (~adam_b_da@2001:8003:26ff:8c01:1417:7515:4ef4:e82d) (Client Quit)
[19:11:28] <pta2002> like I need parse (many1 [parser]) "" [message], the message to parse repeats
[19:11:50] <xerox> check out count to run it exactly n times
[19:11:53] <pta2002> but I so I want to get as many occorrences of it as possible but only until it ends
[19:12:06] <pta2002> xerox: I don't know how many times I need it
[19:12:11] <pta2002> Variable length messages
[19:12:22] <pta2002> I need to get all messages in n characters
[19:12:41] <g> Do get the n characters, then parse them
[19:12:46] <pta2002> but I don't know how many messages there are
[19:13:06] <xerox> what g says works or you can also use lookAhead
[19:13:15] <g> That's fine, just keep parsing till the bytes are gone
[19:14:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[19:14:11] <pta2002> g: yeah, I got the n characters
[19:14:17] <pta2002> but now how do I run the parser only on those characters?
[19:14:28] <merijn> It's been...0 days since megaparsec's lack of 'isolate' has screwedme!
[19:14:34] *** Quits: pfurla_ (~pfurla@2804:18:5827:38:71a1:6773:333f:330d) (Quit: gone to sleep. ZZZzzz…)
[19:14:48] <merijn> pta2002: Ah, I see you have the exact same problem annoying me :p
[19:14:55] <g> pta2002: the same way you ran your parser the first time
[19:14:58] <mason0> what is that guy's AoC page, he writes very terse haskell code?
[19:15:03] <pta2002> it seems I do
[19:15:09] <pta2002> no this is definitely not terse haskell
[19:15:10] <mason0> I had it a couple of days ago but I can't find it
[19:15:19] <pta2002> i have too many do's
[19:15:24] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[19:15:29] <mason0> merijn, I think it was posted by you? with your dislike for his style :)
[19:15:34] <merijn> oh
[19:15:40] <byorgey> pta2002: megaparsec has a combinator called 'getOffset' that tells you where you are in the input.  I don't know if parsec has something similar.
[19:15:45] <merijn> https://jhidding.github.io/aoc2021/#advent-of-code-2021 ?
[19:15:49] <pta2002> hm don't know if that's what I need
[19:15:54] <pta2002> i did get the message part I need
[19:16:01] <pta2002> just using count
[19:16:02] <byorgey> pta2002: I used that to just keep parsing sub-things until the offset reached the number it was supposed to
[19:16:08] <merijn> byorgey: What he (and I) want is: https://hackage.haskell.org/package/binary-0.8.9.0/docs/Data-Binary-Get.html#v:isolate :p
[19:16:09] <mason0> merijn, that's it!
[19:16:13] <pta2002> oh that's a nice idea
[19:16:29] <g> In ReadP I did this https://github.com/glguy/advent2021/blob/main/execs/Day16.hs#L93
[19:16:40] <pta2002> merijn: wait how can i use that? :o
[19:16:50] <pta2002> that's not parsec
[19:17:05] <pta2002> oh it's doing the clever thing of using actual binary values instead of a string of '0' and '1' lol
[19:17:13] <byorgey> merijn: kind of, but it looks like that only works if the decoder consumes exactly that many bytes.  In this case you want the number of available bytes to influence how the sub-parser works.
[19:17:14] <merijn> pta2002: You can't, sadly
[19:17:18] <pta2002> :c
[19:17:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:17:33] <merijn> that's why I was complaining :p
[19:17:35] <pta2002> guess i'll just do this the wrong way and run parse inside a parser
[19:17:39] <pta2002> yeah got it lol
[19:17:41] <merijn> byorgey: Well, I want isolate outside of AoC too :p
[19:17:57] <g> You use "many" to make a parser that parsers as many items as it can
[19:18:48] <g> And let that soak up the sub bytes
[19:18:58] <byorgey> merijn: you should be able to write it using getOffset
[19:19:11] <pta2002> i gave up on the smart way of doing things
[19:19:27] <pta2002> just running parse inside of the parser, if it's stupid and it works it ain't stupid lol
[19:19:30] <byorgey> hmmm, maybe
[19:20:34] <g> Some libraries the offset is related to the current chunk and not the whole input, so just check that ahead of time
[19:20:41] <byorgey> pta2002: actually that sounds like a decent idea to me =)
[19:20:51] <byorgey> g: ah, good point
[19:21:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[19:21:37] <byorgey> pretty sure getOffset is relative to the whole input in megaparsec
[19:22:45] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[19:22:57] <merijn> rats...I have to implement takeWhile_ now :\
[19:23:09] <merijn> I put it off so far, because that seemed annoying >.>
[19:23:24] <g> Then that would be a possible solution :) given how much time people spent pondering these two sub packet encodings I'd say today's problem was cleverly picked by the authors 
[19:26:34] <pta2002> my hacky solution works, here's one gold star :D
[19:28:09] <byorgey> pta2002: \o/
[19:28:36] <pta2002> oh damn this is intcode computer all over again
[19:29:05] <pta2002> 2019 me didn't know about State and suffered heavily with the intcode computer
[19:30:17] <g> I did my first version with a whole bunch of splitAt <_<
[19:30:23] <merijn> ugh, I hate it when it's clear my problem has an efficient solution, but it seems so tedious to figure out...
[19:30:55] <pta2002> hey, my day 15 poorly implemented dijkstra solution took like 2 minutes
[19:31:19] <merijn> mine was pretty fast, although I'm not sure I implemented Dijkstra or something else :p
[19:31:23] <pta2002> and it's absolutely horrible
[19:32:01] <pta2002> https://gist.github.com/pta2002/6b2febf1481654858a1216b658c3f668 look at this mess :(
[19:32:30] <pta2002> ignore mapDiff, doesn't work, was something I tried to do for debugging why mkPart2Map wasn't working
[19:33:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d672:a7f5:a798:3393)
[19:33:05] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:34:30] <g> pta2002: filtering your heap each step is probably killing you
[19:34:58] <pta2002> yeah probably
[19:35:03] <pta2002> i got that working at 3am
[19:35:07] <pta2002> i was too tired for my brain to function
[19:35:14] <pta2002> was just happy it compiled
[19:35:33] <pta2002> you can tell from my imports i actually tried to use a minheap
[19:35:49] <kuribas> is 2 minutes bad?
[19:35:52] <tomsmeding> I have a Dijkstra with a proper priority quue :) https://git.tomsmeding.com/AOC/tree/2021/15.hs
[19:36:02] <kuribas> tomsmeding: how fast is it?
[19:36:07] *** Quits: pavonia (~user@user/siracusa) (Ping timeout: 256 seconds)
[19:36:10] <pta2002> then gave up when i tried to reprioritize the heap
[19:36:11] <merijn> pta2002: https://github.com/merijn/AdventOfCode/blob/master/Day15.hs#L114-L164
[19:36:15] <tomsmeding> kuribas: 306ms on my input, both parts
[19:36:18] <g> kuribas: mine runs in about 700ms
[19:36:31] <pta2002> i mean dijkstra isn't that algorithm
[19:36:44] <kuribas> oh, that's a bit better than 2 minutes :)
[19:36:52] <merijn> kuribas: Mine finishes in 1.5s or so? And part of that is drawing the entire map :p
[19:36:57] <tomsmeding> (obviously machine-dependent, but certainly better than 2min)
[19:37:00] <pta2002> heh
[19:37:01] <kuribas> tomsmeding: maybe you should put it in a package?
[19:37:02] <merijn> Because I plot the final route to screen
[19:37:06] <tomsmeding> lol
[19:37:09] <pta2002> oh nice
[19:37:27] <tomsmeding> it's special-purposed to this problem where you have a 2D array where distance-to-cell is equal to the value in the cell
[19:37:29] <merijn> tomsmeding: It was trivial to implement with my representation and the rendering code I had from previous puzzles :p
[19:37:58] <kuribas> oh right
[19:38:13] <pta2002> I see two simple fixes to my slowness: 1. use a proper minheap, instead of filtering a huge list and 2. don't bother calculating costs to every node
[19:38:23] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[19:38:26] <merijn> tomsmeding: Ah, I think your version looks similar to mine
[19:38:29] <pta2002> mostly the minheap though
[19:38:35] <merijn> I didn't even use a heap, tbh
[19:38:36] <pta2002> just couldn't figure out how to reprioritize it
[19:38:42] <merijn> I just used Set + minView :p
[19:38:50] <kuribas> pta2002: is it dijkstra if you use a O(n^2) heap?
[19:39:14] <pta2002> kuribas: well it's dijkstra* where * stands for i didn't implement it properly
[19:39:14] <merijn> I think mine is more akin to A*?
[19:39:16] <tomsmeding> oh good point about the minView, merijn that functions as a priority queue, right?
[19:39:34] <pta2002> A* is dijkstra with a cost to end goal heuristic
[19:39:34] <merijn> tomsmeding: Effectively, if you ensure elements are sort by priority/cost :p
[19:39:51] <kuribas> merijn: isn't Set a heap though?
[19:40:00] <tomsmeding> right, you need some 'data Box a b = Box a b' where the Ord instance only looks at 'a'
[19:40:05] *** Quits: jippiedoe (~david@145.89.5.239) (Ping timeout: 256 seconds)
[19:40:09] <pta2002> i think i know this i just had a test on this yesterday
[19:40:15] <tomsmeding> nice, I was thinking that there wasn't a PQ implementation in base, but apparently there is :)
[19:40:18] <pta2002> which makes my dijkstra implementation even more shameful
[19:40:19] <pta2002> oh well
[19:40:33] <merijn> tomsmeding: Technically Set isn't in base :p
[19:40:44] <tomsmeding> my brain is still not functioning correctly
[19:40:50] <merijn> tomsmeding: I have a custom Estimate type that uses cost as primary key for comparison :p
[19:40:53] <merijn> kuribas: No?
[19:40:56] <merijn> kuribas: Set is a binary tree
[19:40:57] <tomsmeding> but boot package is close enough :p
[19:41:25] <tomsmeding> oh fair, and for the correct asymptotics you need a heap
[19:41:28] <merijn> kuribas: But that's only O(log n) to find the minimal
[19:41:31] <tomsmeding> though I wonder if it really matters in this case
[19:41:44] <tomsmeding> O(log n + log n) = O(1 + log n)
[19:41:53] <tomsmeding> (findMin + deleteMin)
[19:42:09] <kuribas> merijn: right, and in a heap, it's O(1).
[19:42:10] <merijn> tomsmeding: minView does it in on operation
[19:42:27] <merijn> tomsmeding: So you do find + delete in O(log n)
[19:42:42] <tomsmeding> which is also equal to the two terms I wrote, complexity-wise :p
[19:42:45] <kuribas> merijn: a heap is also a binary tree BTW.
[19:43:02] <tomsmeding> so a binary search tree suffices as a priority queue for dijkstra, you don't need a heap
[19:43:03] <tomsmeding> interesting
[19:43:37] * tomsmeding can never remember whether the increaseKey function is really necessary to get dijkstra to the right complexity
[19:43:52] <merijn> hmm
[19:43:55] <tomsmeding> kuribas: but not a binary search tree, which Set is
[19:44:07] <merijn> I'm confused whether I want foldl or foldr when lazily traversing a Text
[19:44:18] <merijn> Someone help me out here!
[19:44:21] <merijn> Does it even matter?
[19:44:25] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[19:44:27] <tomsmeding> define lazily traversing a text
[19:44:38] <merijn> A fold that only looks at a prefix of the Text
[19:44:56] <tomsmeding> that needs to be a foldr then, right?
[19:44:56] <[exa]> you want foldr because foldl is foldr
[19:45:23] <tomsmeding> a + (b + (c + (d + ...))) ignores the suffix if (+) at some point ignores its right argument; not so for foldl
[19:45:51] <tomsmeding> foldl can ignore a prefix if the combining function ignores its left argument at some point
[19:46:24] <merijn> tomsmeding: I know how it works on lists, but Text's folds go through the streaming abstraction of them
[19:46:30] <merijn> I dunno how that affects things
[19:46:49] <tomsmeding> ¯\_(ツ)_/¯
[19:46:51] <tomsmeding> try it :p
[19:50:19] <pta2002> maybe next year I'll actually know how to use haskell properly and will be able to stop using do everywhere
[19:50:43] <pta2002> and how to make a properi mplementation of dijkstra
[19:51:18] <tomsmeding> what's the problem with 'do'
[19:51:19] <glguy> Not running a sub parser appears to be the favored solution, so i've updated: https://github.com/glguy/advent2021/blob/main/execs/Day16.hs#L90-L97
[19:52:02] <pta2002> hm what's the difference between readp and parsec?
[19:52:03] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[19:52:05] <pta2002> only ever heard of parsec
[19:52:17] <merijn> ReadP is shite, is the difference ;)
[19:52:18] <pta2002> but it seems like it does the same thing
[19:52:46] <glguy> ReadP has unbiased choice, no parse errors, is in base, parses all the alternatives at once instead of the depth first algorithm parsec uses
[19:53:14] <glguy> for a real use case you'd probably use megaparsec these days
[19:53:56] <glguy> ReadP is good for AoC parsing because it doesn't require me to be as clever as one needs to be with parsec
[19:54:29] <glguy> (where just getting the input parsed quickly is the important thing)
[19:54:32] *** Joins: pavonia (~user@user/siracusa)
[19:54:51] <pta2002> https://github.com/pta2002/advent-of-code-2021/blob/main/16/solve.hs i wouldn't call my solution particularly clever
[19:54:51] *** Joins: alx741 (~alx741@157.100.93.160)
[19:55:15] <kuribas> Why does stack build, then stack test rebuilds the whole library?
[19:55:20] <glguy> parsec gives you a performance boost by pruning alternatives once the first alternative starts consuming inputs
[19:55:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[19:55:52] <kuribas> Because I have template haskell?
[19:57:15] *** Joins: featurebug (~featurebu@49.205.122.91)
[19:57:55] <kuribas> sq-loader-0.1.0.0: unregistering (dependencies changed)
[19:58:35] <tomsmeding> kuribas: are some flags different between the two targets?
[19:58:42] <tomsmeding> perhaps a ghc-options
[19:58:57] *** Quits: dcoutts_ (~duncan@ip-185-104-136-51.ptr.icomera.net) (Ping timeout: 240 seconds)
[20:00:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[20:00:14] <kuribas> I have extra test libraries...
[20:00:19] <kuribas> hspec, etc...
[20:00:52] <tomsmeding> perhaps those force a different flag configuration for other dependencies in the cabal solver?
[20:01:05] <tomsmeding> s/flag/flag or version/
[20:01:20] <kuribas> right!
[20:01:20] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:01:45] <kuribas> aren't they pinned by stack though?
[20:02:08] <tomsmeding> oh, right, stack; that should be pinned yes?
[20:02:25] <tomsmeding> well versions are, flags might not be
[20:02:37] <tomsmeding> but unlikely that flags are being affected by some test libraries
[20:04:30] *** Quits: pta2002 (~pta2002@161.230.90.170) (Quit: leaving)
[20:05:13] <kuribas> it's not even rebuilding any dependencies...
[20:05:17] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[20:07:13] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:07:14] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Remote host closed the connection)
[20:07:28] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[20:07:45] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:11:50] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:12:37] <kuribas> ok, I can bypass the problem with "stack build --test --no-run-tests"
[20:14:56] *** Quits: kuribas (~user@ptr-25vy0i8a8smuqmxkytj.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[20:17:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Remote host closed the connection)
[20:18:40] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: brb - upgrading)
[20:19:27] *** Joins: alx741 (~alx741@157.100.93.160)
[20:19:28] *** Joins: jippiedoe (~david@2a02-a44c-e14e-1-52a9-393a-90cb-edf9.fixed6.kpn.net)
[20:25:43] *** Quits: jippiedoe (~david@2a02-a44c-e14e-1-52a9-393a-90cb-edf9.fixed6.kpn.net) (Quit: Leaving)
[20:28:20] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:31:47] *** Joins: pfurla (~pfurla@2804:18:5827:38:71a1:6773:333f:330d)
[20:32:47] *** Quits: deadmarshal (~deadmarsh@95.38.231.95) (Ping timeout: 256 seconds)
[20:33:20] *** Joins: deadmarshal (~deadmarsh@95.38.228.81)
[20:36:09] *** Joins: econo (uid147250@user/econo)
[20:38:58] *** Joins: Akiva (~Akiva@user/Akiva)
[20:42:55] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[20:43:16] *** Joins: pta2002 (~pta2002@161.230.90.170)
[20:44:27] *** Joins: alx741 (~alx741@157.100.93.160)
[20:45:28] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[20:46:18] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[20:48:11] *** Joins: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303)
[20:49:57] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[20:51:36] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[20:55:11] *** Joins: jakalx (~jakalx@base.jakalx.net)
[20:55:44] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[20:59:53] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[21:03:35] <unclechu> Hey, can I somehow pass `:set` options (e.g. override `prompt`) to `ghci` before I start it? Without using `.ghci`.
[21:03:51] <unclechu> Or can I maybe pass custom absolute path to `.ghci`?
[21:04:24] <geekosaur> ---ghci-script
[21:04:26] <geekosaur> er
[21:04:30] <geekosaur> -ghci-script
[21:04:44] <tomsmeding> and if you're using cabal repl, prefix that with --repl-options=
[21:05:28] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[21:06:32] <unclechu> geekosaur thanks! That works
[21:08:35] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[21:09:50] *** Joins: emf (~emf@2620:10d:c091:480::1:7a0e)
[21:11:06] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[21:11:35] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[21:13:57] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[21:14:02] *** Joins: alx741 (~alx741@157.100.93.160)
[21:14:12] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[21:15:38] *** Joins: Guest21 (~Guest21@pool-98-115-178-221.phlapa.fios.verizon.net)
[21:17:48] <c_wraith> is there any parsing combinator library built to do things like today's AoC problem asks for? in particular, having the ability to isolate a fixed length portion of the future stream to run a sub-parser over?
[21:17:56] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[21:20:24] *** Quits: Guest21 (~Guest21@pool-98-115-178-221.phlapa.fios.verizon.net) (Client Quit)
[21:20:52] <EvanR> I've done literally that with attoparsec but I guess literally doing that ruins the incremental nature of the parser
[21:21:45] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:21:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Ping timeout: 240 seconds)
[21:22:18] *** Joins: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03)
[21:22:21] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[21:22:33] <c_wraith> like, you can do it with anything if you call whatever the entry function is again, but that breaks error chaining between the sub-parser and the outer parser
[21:23:07] <c_wraith> I'm wondering if anything supports it in a more integrated manner
[21:23:27] *** Quits: mikail (~mikail@2a02:c7f:bc1f:4a00:fc9:3da5:3e1e:8303) (Quit: Leaving)
[21:24:55] <glguy> Is there a trick to having haddock generate documentation for internal (not exported from the module) definitions? While these aren't part of the module's API it seems like it would be useful for someone working on the module
[21:24:58] <EvanR> the thing missing seemed to be a way to know how much input was just consumed so you can track it
[21:25:17] <monochrom> You can use parsec's getInput to get the future stream, splitAt, then use setInput to put back the suffix, and do whatever you want with the prefix. This is of course a clutch, I don't know of any parser library that has this in design.
[21:25:20] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:25:23] <xerox> I remember having to figure that out for myself once glguy but I forget how I did it
[21:26:03] <xerox> could this be it --show-all --ignore-all-exports
[21:29:01] <glguy> > Causes Haddock to behave as if every module has the ignore-exports attribute (Section 3.7, “Module Attributes”). This might be useful for generating implementation documentation rather than interface documentation, for example.
[21:29:02] <lambdabot>  <hint>:1:38: error: parse error on input ‘module’
[21:29:04] <glguy> sounds pretty good
[21:29:05] <EvanR> https://www.haskell.org/haddock/doc/html/module-attributes.html ignore-exports
[21:29:45] <glguy> xerox: good spot, that worked
[21:29:59] <xerox> glguy: I'm glad!
[21:30:07] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::745c)
[21:30:41] <monochrom> "ignore all exports" is a scary name. :)
[21:31:13] <monochrom> Fortunately it means pretending "module M(foo, bar)" to be "module M".
[21:31:36] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[21:31:37] <xerox> funny wording indeed
[21:31:49] <glguy> https://glguy.net/advent2021/ https://glguy.net/advent2021/Day16/Main.html
[21:32:24] <xerox> :)
[21:34:33] *** Quits: pta2002 (~pta2002@161.230.90.170) (Ping timeout: 256 seconds)
[21:36:28] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:36:57] <xerox> I guess the execs aren't easily linked from there by haddock itself
[21:37:03] <glguy> I haven't figure out how to do that yet
[21:37:09] <glguy> figured*
[21:37:53] *** Joins: dcoutts_ (~duncan@71.78.6.51.dyn.plus.net)
[21:38:50] <EvanR> ReadP pulling its weight around here
[21:39:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::745c) (Remote host closed the connection)
[21:40:49] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::745c)
[21:41:01] *** Quits: phma (~phma@host-67-44-208-226.hnremote.net) (Read error: Connection reset by peer)
[21:41:09] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:41:57] *** Joins: phma (phma@2001:5b0:210d:8c38:983f:1c01:826:33cd)
[21:45:38] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:49:37] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:66c1:82a7:41b7:a81d) (Remote host closed the connection)
[21:54:33] *** Joins: alx741 (~alx741@157.100.93.160)
[21:55:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:55:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:55:46] *** Joins: wroathe (~wroathe@user/wroathe)
[21:57:32] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[21:57:53] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[22:00:02] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[22:02:08] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[22:04:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:05:13] *** Quits: mrus (~mrus@149.28.224.172) (Quit: Surfing the great wave off Kanagawa)
[22:05:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[22:07:31] <sprout> https://pasteboard.co/ew4JaofWfuXW.png <- aoc,  16,  2 - beautified a bit
[22:07:40] <sprout> uh,  egel code
[22:09:35] <monochrom> Even more beautiful in comic sans font. :)
[22:11:12] *** Joins: shapr (~user@12.5.211.156)
[22:11:17] <glguy> sprout: for non-haskell AoC code there's also #adventofcode-spoilers
[22:11:37] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:11:54] <sprout> oh neat!
[22:12:16] *** Quits: mbuf (~Shakthi@223.178.108.131) (Quit: Leaving)
[22:16:12] <EvanR> glguy the haddock based solution post looks pretty good. I just ran into a readtodocs regarding haskell containers, and wish there was more nice looking web-based content for haskell
[22:16:20] <EvanR> readthedocs*
[22:17:39] <dsal> Is there a  better way in megaparsec to call a parser over a subset of data other than to just takeP and call `parse` again?
[22:17:39] *** Quits: Vajb (~Vajb@2001:999:62:f3d1:4390:fbed:1f9b:9d03) (Read error: Connection reset by peer)
[22:18:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[22:18:30] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[22:18:50] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:19:05] <glguy> dsal: the other way would be to track offsets with getOffset, another way is you can use getInput and setInput
[22:19:41] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[22:19:42] <glguy> take the input, split it, set the input parse, restore the tail
[22:19:48] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[22:20:42] <dsal> Hmm...  Yeah, I considered that as well.  Might give it a try.  I figured there'd be something `count` or whatever, but over bytes.
[22:22:05] *** Joins: alx741 (~alx741@157.100.93.160)
[22:22:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:22:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[22:22:19] *** Joins: wroathe (~wroathe@user/wroathe)
[22:22:38] *** Joins: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net)
[22:22:44] <tomsmeding> somehow everybody seems to ask the same question today :p
[22:23:13] <EvanR> I did something stupid: take the difference of "rest of input" between before and after running a parser to get how many bits were consumed
[22:23:15] <monochrom> EvanR: Rejoice, for cabal user guide has long been on readthedocs, and now GHC user guide, even though still hosted on downloads.haskell.org, has adopted readthedocs formatting.
[22:24:49] <EvanR> nice
[22:25:18] <dsal> Oh, sorry.  I've been partially offline since my laptop broke yesterday.  heh
[22:26:09] <dsal> I did gross stuff to solve last night's thing quickly.  And then I went back to do something less gross and it's still a bit more gross than I'd like.
[22:26:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[22:27:13] <Rembane> I tried to do a Best Friend Search but fell asleep in the middle.
[22:28:17] <dsal> There's someone out there.
[22:30:19] <glguy> I was hoping they'd do something like "there's an unknown amount of padding between packets, figure out how to parse this" :)
[22:30:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:30:56] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:32:15] <dsal> The zeros thing was a little confusing.  I tried eating them a few different ways before I figured out just ignoring them made things work.
[22:32:21] <aplainzetakind> When I give my parser to parseMaybe I get Nothing. I change it to parseTest and it parses fine. What is this?
[22:32:55] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[22:33:56] <monochrom> dsal: I watched an episode of MacGyver in which he rigged a motorcycle into a make-shift generator. Is that one of the gross things you did to power your router? >:)
[22:34:31] <dsal> Haha.  I used RC batteries for a while.
[22:34:33] <glguy> aplainzetakind: which library?
[22:34:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913) (Remote host closed the connection)
[22:34:55] <monochrom> OK that's more realisitc heh
[22:34:56] <glguy> aplainzetakind: > parseMaybe p input runs the parser p on input and returns the result inside Just on success and Nothing on failure. This function also parses eof, so if the parser doesn't consume all of its input, it will fail.
[22:35:10] <glguy> I bet that second sentence is tripping you up
[22:35:15] *** Joins: ubert (~Thunderbi@p200300ecdf1abb0334f3944fefcb567c.dip0.t-ipconnect.de)
[22:36:28] *** Quits: bollu (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:36:58] <c_wraith> I really would like a parser library that's designed to handle fields with lengths specified before them and internal structure that needs to be parsed.
[22:37:11] <aplainzetakind> Ah OK.
[22:37:28] <c_wraith> the AoC problem is hardly the only place that happens
[22:37:33] <dsal> c_wraith: I did mqtt with attoparsec.  It wasn't that bad
[22:37:34] <glguy> c_wraith: When we wanted that for parsing IP packets we made the cereal package (among some other reasons)
[22:38:17] <glguy> this happens more in parser combinators targetted at binary parsing than text parsing
[22:38:23] <aplainzetakind> But that's... bad. I mean, parseTest is supposed to give you information on why things fail. I'd expect it to succeed or fail exactly the same way as other parsers.
[22:38:25] <monochrom> Yeah, I would think cereal or binary is more geared for that. Then again, what if sufficiently complex CFG is also involved...
[22:39:50] <c_wraith> yes, it is mostly a binary format thing, but.. yeah, I want some greater ability to handle complex grammars along with it
[22:39:54] *** Quits: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se) (Remote host closed the connection)
[22:40:13] *** Joins: jonathanx_ (~jonathan@h-178-174-176-109.A357.priv.bahnhof.se)
[22:41:32] <glguy> any textual language ought to have already been lexed by the time the parser's running
[22:41:51] <glguy> and declaring how many lexemes you have sounds silly and declaring how many bytes sounds absurd
[22:43:00] *** Joins: HurdyGurdyBurdy (~HurdyGurd@user/hurdygurdyburdy)
[22:44:29] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[22:45:47] *** Joins: Pickchea (~private@user/pickchea)
[22:48:42] *** Joins: alx741 (~alx741@157.100.93.160)
[22:55:32] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 240 seconds)
[22:55:32] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:58:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:58:28] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[22:59:10] *** Joins: bollu (uid233390@id-233390.helmsley.irccloud.com)
[23:00:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:03:24] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:05:13] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:07:29] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[23:07:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[23:08:41] <sm> useful for good error messages, maybe ?
[23:09:17] <geekosaur> hate to have to rely on predeclared numbers of lexemes or bytes for that
[23:09:36] <geekosaur> sounds like more errors likely from letting that get out of sync than would be improved by it
[23:10:13] <sm> or.. performance ?
[23:12:36] <monochrom> I have some disagreement with that, based on the problems caused by C string (just keep consuming until you see 0), and concerns of data transmission (in which it really is better to predeclare how many bytes to expect).
[23:13:02] <monochrom> The C string way opens you to all kinds of DoS, first of all.
[23:13:15] <shapr> denial of sanity?
[23:13:17] *** Joins: alx741 (~alx741@157.100.93.160)
[23:13:19] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Quit: Leaving...)
[23:13:19] <geekosaur> but that's not parsing
[23:13:21] <monochrom> :)
[23:13:41] <geekosaur> you can still use the same source format for either C-style or counted strings in internal format
[23:14:10] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dc75:5436:188a:4913)
[23:14:22] <geekosaur> and data transmission we're back to parsing binary vs. text even though the "binary" happens to be a text (fragment?)
[23:14:37] <geekosaur> since the protocol is binary even if the content isn't
[23:15:02] <geekosaur> (ignoring for the moment the poriginal Internet protocols, which didn't even pretend to handle binary)
[23:15:29] <monochrom> OK, so next, if I design this data transmission format: how many expressions to expect, how many bytes in 1st expression, 1st expression, how many bytes in 2nd expression, 2nd expression, ...
[23:16:07] <monochrom> then you really want a parser that plays well with "parse an expression for n bytes".
[23:16:45] <geekosaur> again I'd claim that is a binary protocol even if the expressions are textual (bonus, easier to extend to ASTs :)
[23:16:49] <EvanR> a checksum for catching bad encoding
[23:17:57] *** Quits: koz (~koz@121.99.240.58) (Remote host closed the connection)
[23:18:08] <EvanR> if nothing at all can be wrong, then wrongness can't be detected
[23:18:15] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[23:18:16] *** Joins: koz (~koz@121.99.240.58)
[23:18:25] <EvanR> but multiple layers of things that must match don't help either
[23:19:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 268 seconds)
[23:20:21] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[23:24:41] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:26:03] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:30:14] <tomsmeding> you know, you're all going on about delimited subparsing and I dunno what; what about just some liberal use of splitAt :p https://git.tomsmeding.com/AOC/tree/2021/16.hs
[23:30:52] <monochrom> OK, splitAt is sufficient lazy so that if you use getInput, splitAt, setInput, it still does streaming.
[23:31:13] <monochrom> > case splitAt 5 (1 : 2 : undefined) of (x,_) -> take 1 x
[23:31:15] <lambdabot>  [1]
[23:32:14] <tomsmeding> also, this program worked the first time it compiled :)
[23:32:17] *** Quits: koz (~koz@121.99.240.58) (Ping timeout: 240 seconds)
[23:32:34] <tomsmeding> (well, the first time it compiled and I felt that it was time to test it)
[23:33:06] <monochrom> I was about to code up a delimited subparsing parser monad for all of you. :)
[23:33:15] <tomsmeding> :D
[23:33:25] <tomsmeding> not actually too hard if you don't need to support backtracking
[23:33:46] <monochrom> "newtype CP a = Maybe Int -> String -> Maybe (Int, String, a)"
[23:34:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[23:34:03] <tomsmeding> I was half-and-half thinking about writing one, but then I realised that just writing the code directly would be quicker
[23:34:19] <tomsmeding> monochrom: what does CP stand for? Cool Parser?
[23:34:27] <monochrom> 1st Int being how many characters are allowed, 2nd Int how many characters used.
[23:34:30] <EvanR> that's basically what I did
[23:34:34] <monochrom> Counted Parser
[23:34:37] <tomsmeding> looks decent
[23:34:48] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:34:59] <EvanR> @src splitAt
[23:34:59] <lambdabot> splitAt n xs = (take n xs, drop n xs)
[23:35:19] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:35:25] <monochrom> That is likely not the real code.
[23:35:34] <EvanR> you don't think?
[23:35:58] <tomsmeding> https://hackage.haskell.org/package/base-4.14.0.0/docs/src/GHC.List.html#splitAt
[23:36:06] <tomsmeding> if you set USE_REPORT_PRELUDE, that's the real code :)
[23:36:18] <tomsmeding> otherwise, no, it indeed saves iterating over the prefix twice
[23:37:21] <EvanR> are you sure
[23:38:23] <tomsmeding> well you never know, perhaps the machine that built my compiler was actually infected with a Thompson virus through a log4j injection vulnerability
[23:38:27] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:39:02] <EvanR> yeah I see it goes over the input in one pass, unfortunately it still builds a thunk if you consume the left or the right result
[23:39:10] <EvanR> of the original list
[23:39:17] <tomsmeding> and don't consume the other one?
[23:39:27] <EvanR> consume one then the other
[23:39:45] <tomsmeding> except if ghc infers that you're always going to use both and does strictness analysis
[23:40:00] <tomsmeding> though, like, how could it _not_ produce a thunk there
[23:40:11] <EvanR> that could ever result in building whole lists ahead of time?
[23:40:17] <EvanR> that's what I mean
[23:40:38] <tomsmeding> I'm not sure I understand your usage of "ever"
[23:40:54] <dolio> It means even.
[23:40:57] <monochrom> I am not scared by "build a thunk". It beats handcoding my own equivalent micromanagement, such as me having to track the Maybe Int and Int up there in my CP.
[23:41:40] <monochrom> I am only afraid of "build n thunks", and only when "there is an alternative, O(1)-space algorithm".
[23:41:55] <EvanR> it would be nice if you could consume the first part and it also consumes the first part of the second part
[23:42:13] <EvanR> so when you get to the second part you don't go back
[23:42:14] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[23:42:32] <EvanR> and no memory builds up
[23:42:43] *** Joins: koz (~koz@121.99.240.58)
[23:42:49] <tomsmeding> but you don't, right?
[23:43:07] <tomsmeding> if you use the complicated version of course, not the take/drop version, for that your complaint is valid
[23:43:31] <monochrom> "drop n xs" is a thunk, too.
[23:43:45] *** Joins: alx741 (~alx741@157.100.93.160)
[23:43:52] <EvanR> no I'm not saying the report version is different
[23:44:03] <tomsmeding> that xs'' that gets returned in the fallback case for splitAt' is already the suffix after the first n items
[23:44:21] <monochrom> And if you consume one node of "take n xs", you get "x : thunk(take (n-1) ...)"
[23:44:24] *** Joins: jakalx (~jakalx@base.jakalx.net)
[23:45:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:7c88:97e7:7c77:1c93) (Ping timeout: 240 seconds)
[23:46:01] <EvanR> oh, xs'' is forgotten at each step
[23:46:09] <EvanR> cool
[23:46:27] <tomsmeding> forgotten?
[23:47:01] <tomsmeding> it only gets produced after the n-long prefix has been traversed, and the value that is produced there is just passed along to the beginning
[23:47:44] <EvanR> ok yeah
[23:48:06] <EvanR> so snd you finally access is a chain of thunks n long
[23:48:51] <tomsmeding> what computation does the n/2'th thunk do?
[23:49:12] <EvanR> snd?
[23:49:21] <tomsmeding> isn't the last thunk, that actually returns remainder unchanged, just passed along?
[23:49:24] <EvanR> or grab that x'' from the split at
[23:49:36] <tomsmeding> oh right
[23:51:08] <tomsmeding> I would hope that ghc optimises that though, to a function with two return values
[23:51:40] *** Quits: shapr (~user@12.5.211.156) (Remote host closed the connection)
[23:51:53] *** Joins: shapr (~user@12.5.211.156)
[23:54:27] <EvanR> by returning the 2nd value, that would then create list 1 ahead of time?
[23:54:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:54:56] <EvanR> if you use 2nd value first, makes sense
[23:56:14] <EvanR> but "intuitively" (monochroms favorite!) you probably want to consume the first list lazily, then pick up where it left off from the original list
[23:56:28] <EvanR> in that order
