[00:06:53] *** Quits: kuribas (~user@ptr-25vy0ia1hzdpftx2lxu.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[01:14:03] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:26:08] *** Joins: biberu (~biberu@user/biberu)
[05:57:41] <ns12> biberu: Hopefully in the future there will be a fork of the .NET SDK that completely eliminates all of these Microsoft nonsense. Similar to what VSCodium did with Visual Studio Code.
[05:58:22] <ns12> biberu: Is the .NET SDK 100% open source?
[09:05:13] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:09:25] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 256 seconds)
[09:10:13] *** Joins: ns12 (~ns12@user/ns12)
[09:31:23] <xeno> hopefully there will be a release of .Net where I can actually write real stuff in F# :/
[09:38:22] <MatthiasVance> heh?
[09:59:08] <ns12> xeno: What does that mean? Is .NET currently unusable for F#?
[10:00:05] <xeno> ns12: I'm on a mac, and I can use F# as long as I don't plan to do any system calls
[10:01:07] <ns12> xeno: Are system calls are similarly problematic on Linux and BSDs?
[10:01:23] <xeno> I dunno, haven't checked
[10:07:45] <xeno> I guess the "I" in the sentence above might have been important
[10:30:54] <MatthiasVance> xeno: Why can't you do any system calls?
[10:32:07] <xeno> the API is only available for Xamarin apps, and for Xamarin apps, none of the relevant options for project types allows anything but C# 
[11:41:27] <xeno> basically, I'm on mac and there's two things I plan to implement in F# - a shell, and games
[14:49:01] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[14:58:39] *** Joins: stenno (~stenno@user/stenno)
[16:02:36] <MatthiasVance> Suppose I call some function that returns Task<T> and I need to keep calling that method (so it's basically a seq), how do I call it in an idiomatic way?
[16:02:54] <MatthiasVance> This is some kind of paging mechanism so I can request a page <from> something with a <size>
[16:03:08] <MatthiasVance> And now there's a while loop (in F#) that I really want to get rid of
[16:03:32] *** ChanServ sets mode: +o MatthiasVance
[16:03:36] *** ChanServ sets mode: -o MatthiasVance
[16:03:39] <MatthiasVance> Where is biberu!
[17:11:21] <MatthiasVance> So with task CE (from TaskBuilder.fs, not .NET 6) you can't do tailcalls, but with async you can
[17:11:51] <MatthiasVance> Now "our" question is, what happens when you wrap task in async? We no longer have a stack overflow, any other weird behaviors maybe?
[17:15:27] <MatthiasVance> https://sharplab.io/#v2:DYLgZgzgNAJiDUAfYBTALgAjBgdhgvALABQGGaAhhANYYDeJZGATugK7N46MYC+JJVJlYBjDAFsAngCUUYgJYSKADwIYeZKpJxiGpJmXnZFAHiWq0ACxTd9BskICEGVfiwZFiAHwYAghG0RADpfAHcKeTQAFSpqDXtWNA4cZylZMQAKVXgMAEYASnN4shRgCBRipkTkors+IA===
[17:22:43] <xeno> MatthiasVance: hard to understand what you need - do you need to call it e.g. 10 times?? 
[17:22:48] <xeno> s/??/?
[17:23:28] <xeno> if so, I'm a n00b, but what I did was {1..10} |> Seq.fold or Seq.map 
[17:23:47] <xeno> there are for loops in F# though
[17:28:45] <MatthiasVance> Noo
[17:28:59] <MatthiasVance> The problem is with tailcalls
[17:29:12] <MatthiasVance> (using recursion)
[17:29:50] <MatthiasVance> xeno: I don't know up front how many pages there are
[17:30:43] <xeno> ok, so you call a method m, that returns an Option<Task<T> or something? 
[17:31:27] <MatthiasVance> it returns Task<T>
[17:32:02] <xeno> ok, but how does it terminate? 
[17:32:33] <MatthiasVance> The T has an IsEnd
[17:34:34] <MatthiasVance> So you get a page starting at <from> of <size>
[17:35:03] <MatthiasVance> xeno: Does that make it clearer?
[18:01:35] *** Joins: kuribas (~user@ptr-25vy0i9q6berc613dpl.18120a2.ip6.access.telenet.be)
[18:34:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[18:43:23] *** Joins: stenno (~stenno@user/stenno)
[19:02:04] *** Joins: biberu (~biberu@user/biberu)
[19:07:20] <akronymus[m]> I tried to implement something like parsec on my own.
[19:07:36] <akronymus[m]> And realized: hkt would be damn useful
[19:16:07] <xeno> MatthiasVance: I'm too n00b at .Net to be of any help, sorry :/
[19:35:18] *** Joins: beepbeep (~beepbeep@78-23-136-231.access.telenet.be)
[19:47:05] <biberu> MatthiasVance: what was the question?
[20:34:58] <MatthiasVance> 13:32 <MatthiasVance> Suppose I call some function that returns Task<T> and I need to keep calling that method (so it's basically a seq), how do I call it in an idiomatic way?
[20:34:58] <MatthiasVance> 13:32 <MatthiasVance> This is some kind of paging mechanism so I can request a page <from> something with a <size>
[20:35:02] <MatthiasVance> biberu: ^
[20:35:26] <MatthiasVance> Apparently recursion does not work with task CE but the question is .. what happens if you use it with async CE but it still wraps a Task<T>
[20:35:32] <MatthiasVance> On the stack it goes well, what about others
[20:54:40] <biberu> MatthiasVance: maybe i'm misunderstanding, do you just need Task.Bind? foo.Bind(foo)
[20:55:06] <biberu> with a bind you can set up recursive task calls
[20:55:09] <MatthiasVance> I need to sequentially call a method that returns task and use the output of the first as input for the second
[20:55:32] <MatthiasVance> So it's a sequence because I need to lazily load it
[20:57:54] <biberu> you want to emit results to a sequence, while generating new ones based on the previous item?
[20:59:28] *** Quits: beepbeep (~beepbeep@78-23-136-231.access.telenet.be) (Ping timeout: 256 seconds)
[20:59:30] <MatthiasVance> Yes!
[21:00:58] <biberu> in c# i'd reach for IAsyncEnumerable, don't know what the f# equivalent is
[21:01:08] <biberu> have you tried to use that in f#?
[21:02:51] <MatthiasVance> biberu: https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/task-expressions#limitations-of-tasks-with-regard-to-tailcalls
[21:04:47] <MatthiasVance> The equivalent in F# now is looping until we get a page back that has IsEnd = true and upping the "from" parameter every call with pageSize
[21:05:12] <MatthiasVance> So the equivalent of the loop is recursion
[21:05:21] <MatthiasVance> Which you can't use with task CEs
[21:05:27] <MatthiasVance> But you can use that with async CEs
[21:05:36] <MatthiasVance> So I wondered what would happen if you wrapped the tasks in Async
[21:07:35] <biberu> hmm
[21:08:13] <biberu> now i want to play with this too, i wonder if i can get some computer time later ^^
[21:10:04] <biberu> i guess it doesn't have to be a seq? anything you can evaluate piece by piece would do?
[21:11:13] <biberu> if so, state monad?
[21:13:57] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[21:16:55] <MatthiasVance> Anything that's more idiomatic than while loop in a task CE
[21:16:56] <MatthiasVance> :D
[21:17:23] <MatthiasVance> This is the current "solution": https://sharplab.io/#v2:DYLgZgzgNAJiDUAfYBTALgAjBgdhgvALABQGGaAhhANYYDeJZGATugK7N46MYC+JJVJlYBjDAFsAngCUUYgJYSKADwIYeZKpJxiGpJmXnZFAHiWq0ACxTd9BskICEGVfiwZFiAHwYAghG0RADpfAHcKeTQAFSpqDXtWNA4cZylZMQAKVXgMAEYASnN4shRgCBRipkTkors+IA===
[21:18:04] <MatthiasVance> bit ugly but it's the minimal example I think
[21:31:08] *** Joins: beepbeep (~beepbeep@78-23-136-231.access.telenet.be)
[21:33:42] *** Quits: kuribas (~user@ptr-25vy0i9q6berc613dpl.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:34:28] <beepbeep> MatthiasVance,
[21:34:28] <beepbeep> ```
[21:34:29] <beepbeep> let keepRunning asyncFn initalInput = task {
[21:34:29] <beepbeep>   let mutable input = initialInput
[21:34:30] <beepbeep>   while true do
[21:34:30] <beepbeep>       let! result = asyncFn input
[21:34:31] <beepbeep>       input <- result
[21:34:31] <beepbeep> }
[21:34:32] <beepbeep> ```
[21:35:11] <beepbeep> \o/
[22:05:17] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (*.net *.split)
[22:05:17] *** Quits: dolch (~ftw@dolch.ca) (*.net *.split)
[22:05:18] *** Quits: travv0 (sid293381@user/travv0) (*.net *.split)
[22:05:21] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[22:05:24] *** Quits: xeno (~xeno@user/xeno) (*.net *.split)
[22:05:25] *** Quits: c17r_ (~c17r@c17r.com) (*.net *.split)
[22:05:26] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[22:05:28] *** Quits: _0x1d3 (sid43116@id-43116.tinside.irccloud.com) (*.net *.split)
[22:05:30] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[22:05:32] *** Quits: akronymus[m] (~akronymus@2001:470:69fc:105::f7be) (*.net *.split)
[22:05:33] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[22:05:35] *** Quits: pdz1[m] (~pdz1matri@2001:470:69fc:105::1:20f3) (*.net *.split)
[22:05:35] *** Quits: Yamazaki-kun (~bsa3@52.156.83.157) (*.net *.split)
[22:05:36] *** Quits: MatthiasVance (sid21828@about/csharp/matthiasvance) (*.net *.split)
[22:05:36] *** Quits: EdwardIII (~edwardiii@user/edwardiii) (*.net *.split)
[22:05:36] *** Quits: beepbeep (~beepbeep@78-23-136-231.access.telenet.be) (*.net *.split)
[22:05:39] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[22:10:03] *** Joins: travv0_ (sid293381@id-293381.helmsley.irccloud.com)
[22:10:03] *** Joins: dolch (~ftw@dolch.ca)
[22:10:03] *** Joins: cacheyou- (~cache@user/cacheyourdreams)
[22:10:03] *** Joins: beepbeep (~beepbeep@78-23-136-231.access.telenet.be)
[22:10:03] *** Joins: greenbagels (~gb@user/greenbagels)
[22:10:03] *** Joins: akronymus[m] (~akronymus@2001:470:69fc:105::f7be)
[22:10:03] *** Joins: pdz1[m] (~pdz1matri@2001:470:69fc:105::1:20f3)
[22:10:03] *** Joins: Deide (~deide@user/deide)
[22:10:03] *** Joins: jinsun_ (~jinsun@user/jinsun)
[22:10:03] *** Joins: xeno (~xeno@user/xeno)
[22:10:03] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[22:10:03] *** Joins: c17r_ (~c17r@c17r.com)
[22:10:03] *** Joins: _0x1d3 (sid43116@id-43116.tinside.irccloud.com)
[22:10:03] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[22:10:03] *** Joins: EdwardIII (~edwardiii@user/edwardiii)
[22:10:03] *** Joins: MatthiasVance (sid21828@about/csharp/matthiasvance)
[22:10:03] *** Joins: Yamazaki-kun (~bsa3@52.156.83.157)
[22:10:33] <MatthiasVance> beepbeep: Ohh I totally agree!
[22:10:34] <MatthiasVance> beepbeep: But the "challenge" was to do it another way
[22:10:34] <MatthiasVance> And by doing so, learning
[22:16:20] *** Joins: stenno (~stenno@user/stenno)
[22:48:32] *** Quits: beepbeep (~beepbeep@78-23-136-231.access.telenet.be) (Quit: Client closed)
