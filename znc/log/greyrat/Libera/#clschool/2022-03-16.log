[00:03:27] *** Joins: King_julian (~King_juli@41.1.142.79)
[00:31:20] *** Joins: lisp123 (~lisp123@120.154.103.52)
[00:34:33] *** Joins: Oladon (~olad@98.43.81.226)
[00:35:48] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[01:28:19] *** Joins: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[01:29:13] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[01:32:03] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 256 seconds)
[01:35:50] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[01:42:12] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 240 seconds)
[01:59:22] *** Joins: Oladon (~olad@98.43.81.226)
[02:17:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:19:38] *** Joins: lisp123 (~lisp123@120.154.103.52)
[02:23:57] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[03:10:50] *** Joins: beach` (~user@2a01:cb19:150:3400:9691:841f:4631:45ac)
[03:15:06] *** Quits: beach (~user@2a01:cb19:150:3400:25f5:58f7:d461:f8de) (Ping timeout: 250 seconds)
[03:37:03] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 252 seconds)
[03:48:07] *** Joins: lisp123 (~lisp123@120.154.103.52)
[03:52:12] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[04:02:55] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[05:45:45] *** Quits: beach` (~user@2a01:cb19:150:3400:9691:841f:4631:45ac) (Ping timeout: 252 seconds)
[06:06:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:08:31] *** Joins: aeth (~aeth@user/aeth)
[07:15:58] *** Joins: beach (~user@2a01:cb19:150:3400:91c8:17b3:d153:b444)
[07:20:28] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[07:27:54] *** Quits: seok- (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[07:30:37] <beach> Good morning everyone! 
[07:43:50] *** Joins: vats (~vats@103.216.143.225)
[07:46:36] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 245 seconds)
[08:19:26] *** Andrew is now known as LibreBot
[08:19:36] *** LibreBot is now known as Guest286
[08:20:01] *** Quits: Guest286 (Andrew@user/AndrewYu) (Changing host)
[08:20:01] *** Joins: Guest286 (Andrew@user/AndrewYu/bot/LibreBot)
[08:20:07] *** Guest286 is now known as LibreBot
[08:21:23] *** LibreBot is now known as Andrew
[08:21:43] *** Quits: Andrew (Andrew@user/AndrewYu/bot/LibreBot) (Changing host)
[08:21:43] *** Joins: Andrew (Andrew@user/AndrewYu)
[08:25:23] *** Quits: Andrew (Andrew@user/AndrewYu) (Changing host)
[08:25:23] *** Joins: Andrew (Andrew@user/AndrewYu/bot/LibreBot)
[08:25:54] *** Quits: Andrew (Andrew@user/AndrewYu/bot/LibreBot) (Changing host)
[08:25:54] *** Joins: Andrew (Andrew@user/AndrewYu)
[10:34:06] *** Joins: Josh_2 (~user@197.185.99.223)
[10:34:30] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[10:41:13] <st_iron> good morning
[10:41:25] <beach> Hello st_iron.
[10:42:36] <st_iron> hello beach hope you're doing well
[10:43:11] <beach> Yes, thank you.  I think I have all my ELS presentations prepared.  How about you?
[10:44:48] <st_iron> i'm good too, thank you, doing some CCNA and Ethical Hacking courses for refreshing my fading memories and weakened mind 
[10:45:13] <beach> minion: What does CCNA stand for?
[10:45:13] <minion> Cloudology Cotenancy Nabk Asseveratingly
[10:45:34] <st_iron> cisco certified network administrator :)
[10:45:41] <beach> Ah!
[10:46:31] <st_iron> i refresh my knowledge every 3-4 years
[10:46:41] <beach> That's good.
[10:46:50] <st_iron> and probably i can learn some new things too during the process
[10:47:02] <beach> Hopefully, yes.
[11:13:27] *** Joins: mfiano_ (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:14:48] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 250 seconds)
[11:14:48] *** mfiano_ is now known as mfiano
[11:23:05] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 256 seconds)
[11:23:52] *** Joins: shka (~herr@109.231.3.55)
[11:25:11] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[11:27:48] *** Quits: vats (~vats@103.216.143.225) (Ping timeout: 250 seconds)
[12:49:09] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:54:05] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[13:52:03] *** Joins: vats (~vats@103.216.143.225)
[14:37:27] *** Joins: lisp123 (~lisp123@120.154.103.52)
[14:38:01] *** Quits: vats (~vats@103.216.143.225) (Ping timeout: 256 seconds)
[14:42:02] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[15:11:02] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:13:22] *** Joins: random-nick (~random-ni@87.116.176.196)
[15:23:59] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[16:18:17] *** Joins: notzmv (~zmv@user/notzmv)
[16:46:52] <notzmv> so I've been doing lisp koans and something confused me. shouldn't (define-condition triangle-error (error) ((sides :initarg :sides :reader sides))) create a triangle-error-sides function? I had to do it with :reader triangle-error-sides to get the koan to work though.
[16:51:12] <beach> It should not.  The :READER initarg is given the name of the function to add a method to.
[16:51:39] <beach> But then, it is not a great idea to have the function names prefixed by the name of the class anyway.  
[16:51:53] <beach> You should use the package system for that kind of stuff.
[16:55:21] <notzmv> aha, ok. thanks beach :)
[16:55:32] <beach> Pleasure.
[18:03:14] <pjb> That said, are the sides of an error the same as the sides of a triangle?
[18:04:09] <beach> No, but ERRORS and TRIANGLES are different packages.
[18:04:58] <beach> Oh, I see.  In this case, they might be in the same package.
[18:05:04] <pjb> Perhaps a triangle-error should have a triangle, and the triangle those sides?  Unless the triangle-error has a set of triangle-sides ?  For example: package-error-package stream-error-stream
[18:05:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[18:05:54] <beach> I am sorry, I can't do this right now.  I am distracted by the incompetence of my bank, and that makes me too upset to concentrate. 
[18:05:57] <pjb> You may ned a triangle-error-triangle-sides if the triangle-error is signaled by a triangle constructor with sides, but no triangle yet.
[18:06:14] <pjb> Hmmâ€¦ banks!
[18:06:42] <beach> They seem incapable of doing even relatively simple arithmetic. 
[18:06:48] *** Joins: aeth (~aeth@user/aeth)
[18:08:42] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 268 seconds)
[18:10:20] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:19:35] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 256 seconds)
[18:20:59] <pjb> beach: What I mean here, is that <class>-<slot> or similar prefixed naming is often just a prudent way to avoid homonyms when the semantics may be or are different.
[18:21:41] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:30:02] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Ping timeout: 240 seconds)
[18:32:08] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:48:41] *** Joins: thrig (~thrig@207.108.197.156)
[18:58:31] <notzmv> pjb: in the koans (triangle a b c) is just a function the learner is supposed to write to return what kind of triangle it is as a symbol and throw appropriate errors when the sides don't make a valid triangle, be it because of mathy restrictions or just because one or more of the sides aren't of type (real (0)), for context
[19:26:36] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:33:18] <beach> pjb: Yes, I see.
[19:39:54] <pjb> notzmv: In this case, it's like a constructor. We could namem the values the arguments of the operator.  triangle-error-arguments  which, when the error is signaled, cannot be sides of a triangle at all.
[19:41:24] <pjb> So I would use:  (define-condition triangle-error (error) ((arguments :initarg :arguments :reader triangle-error-triangle-arguments) (reason :initarg reason :reader triangle-error-reason))
[19:42:28] <pjb> notzmv: the reason would be a string describing the problem. Or you could have subclasses of triangle-error for the different cases: triangle-argument-type-error, impossible-triangle-sides-error, etc.
[19:43:04] <thrig> naan-euclidean, etc
[19:44:21] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:46:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:48:31] *** Joins: lisp123 (~lisp123@120.154.103.52)
[19:50:34] <bremner> yum, naan
[19:53:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 268 seconds)
[20:13:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[20:15:04] *** Joins: aeth (~aeth@user/aeth)
[20:25:24] *** Quits: thrig (~thrig@207.108.197.156) (Read error: Connection reset by peer)
[20:26:23] *** Joins: thrig (~thrig@207.108.197.156)
[20:37:19] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[20:43:46] *** Joins: tyson2 (~user@24.114.49.225)
[21:04:43] <Demosthenex> so, can someone recommend reading material on typing in cl? i'm trying to enforce function parameters (ie:  parameter X is a list of integers)
[21:08:37] <beach> My recommendation is to avoid that.
[21:09:20] <beach> Plus, for a list of stuff, you can't really declare a type for it, unless the list is of fixed length.
[21:09:31] <beach> ... other than using SATISFIES of course. 
[21:10:57] <beach> It is common for people coming from statically typed languages to want to declare types for many things, but many such desires amount to premature decisions that are going to change later, so it is best to avoid them initially.
[21:13:02] <Demosthenex> hrm. i thought i could catch myself making stupid errors ;]
[21:13:46] <beach> Then just do (assert (every #'integerp list))
[21:14:42] <Demosthenex> ok, yeah i was sprinkling some asserts around
[21:14:48] <Demosthenex> glad i'm on the right track
[21:15:32] <Demosthenex> so, if i hit an error and wanted better reporting, should i try to do a handler to output key variables, or just rely on emacs/sly introspection?
[21:16:51] <beach> See, now things are getting complicated.  If this is an internal function, the assert is good enough and you will catch your errors easily without much additional complexity.
[21:17:11] <beach> If it is a protocol function, it should not be a list in the first place, but an abstract data type.
[21:17:32] <beach> In general, I mean.  There could be exceptions of course. 
[21:19:00] <Demosthenex> thinking about functions i'm calling with my data that aren't written by me, like calling a library function. would wrapping the call to help give me debugging data about waht my function was doing at the time be better than just introspection?
[21:20:32] <beach> Sure you can write a wrapper if the function you are calling is not doing any verification, which is strange for a protocol function.
[21:21:57] <beach> Sorry, I need to go.  My (admittedly small) family just announced that dinner is served.  I hope someone else can help out.
[21:26:15] <Demosthenex> have a good evening! thanks
[21:28:59] *** Joins: lisp123 (~lisp123@120.154.103.52)
[21:33:24] *** Quits: tyson2 (~user@24.114.49.225) (Read error: Connection reset by peer)
[21:33:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[21:34:19] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[21:40:00] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[21:42:18] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Read error: Connection reset by peer)
[22:08:45] <kagevf> I think coalton has strong typing?
[22:10:04] <bremner> itym static typing?
[22:10:40] <bremner> weak and strong is kindof orthogonal to dynamic and static
[22:10:53] <kagevf> hmmm not sure 
[22:12:03] <kagevf> I thought it was supposed to be a CL answer to Haskell typing ... (it's probably more than that) ... 
[22:12:34] <drakonis> its more of a ML family thing
[22:13:05] <kagevf> coalton page clearly says "static" not "strong" right at the top
[22:13:20] <kagevf> https://coalton-lang.github.io/20211010-introducing-coalton/
[22:13:51] <drakonis> it sure does, but then it later espouses more details about its approach to it
[22:15:07] <bremner> kind of amusing the coalton surface syntax looks a bit like Typed Racket / scheme
[22:15:52] <drakonis> it was indeed inspired by it
[22:15:53] <bremner> I already get confused and type (defun (foo args) ...) in CL
[22:16:11] <drakonis> it is cited as an inspiration
[22:16:12] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[22:16:34] <drakonis> i'll admit that i like to use define instead of defun
[22:18:13] *** Joins: aeth (~aeth@user/aeth)
[22:18:32] <kagevf> I like how the parameters in defun are referred to as a lambda list, separate from the procedure name
[22:18:55] <kagevf> I guess it's just semantics
[22:19:43] <drakonis> you can do that in most schemes though
[22:20:05] <bremner> pet peave: please don't use "semantics" to mean "crap that doesn't matter"
[22:20:48] <lagash> ah yes, your semantics pet peave :)
[22:20:50] <drakonis> the schemes allow you to define the procedure name followed by a lambda
[22:20:56] <drakonis> pet peeves, everyone!
[22:25:42] <kagevf> I actually meant it's just semantics ... it matters insomuch as the rest of the language needs to align with that usage ... unless you want to defmacro your own define I suppose
[22:26:25] <kagevf> and I guess I would say it's also kind of arbitrary ... that's probably the actual word I was looking for
[22:28:12] <kagevf> defun: let's define a procedure ... it has a name, and a list of parameters ... cool makes sense
[22:29:19] <kagevf> define: let's define a procedure ... everything including the name is a parameter to DEFINE ... aligns with how the first atom in an sexpr can be a procedure name ... hmmm, that makes sense too
[22:29:33] <bremner> Almost always the syntax we are used to is perceived as objectively better
[22:30:38] <kagevf> for sure
[22:31:35] <kagevf> but I like the lack of funcalls for working through sicp ... but! I think funcall adds some clarity that forces you to think a little more about what's going on ... 
[22:32:58] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[22:34:50] *** Joins: aeth (~aeth@user/aeth)
[22:56:59] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[23:17:21] *** Joins: lisp123 (~lisp123@120.154.103.52)
[23:21:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[23:47:40] *** Joins: notzmv (~zmv@user/notzmv)
