[00:01:06] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:01:36] *** Quits: mokulus (~mokulus@user/mokulus) (Read error: Connection reset by peer)
[00:05:31] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[00:05:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[00:06:43] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Quit: quit)
[00:06:48] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:07:48] *** Joins: mokulus (~mokulus@user/mokulus)
[00:09:04] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[00:10:03] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Ping timeout: 264 seconds)
[00:10:41] <TuckerBrandy1997> why not Wooble
[00:11:02] <TuckerBrandy1997> also how do I fix this: checking for if the database exist  return True if "Mydata" in dblist else return False
[00:11:26] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[00:11:27] *** Joins: Anom (~Anom@2804:d4b:8072:100:f840:5209:c37a:54dd)
[00:12:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[00:12:59] <Wooble> TuckerBrandy1997: it's ugly; what's wrong with elif userInput == 1: addDoc() else: displayDoc()? The conditional expression is fine if you actually want the result of the expression...
[00:13:21] <Wooble> TuckerBrandy1997: and for that one, `return "Mydata" in dblist`
[00:14:13] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:14:33] <Wooble> (it's already a bool; why have a conditional to check if it's true and convert that to true, and false to convert it to false?)
[00:14:45] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[00:15:34] <parv> TuckerBrandy1997, Wooble's objection is not mine re x() if ... else y() & assignment. Testing a variable in one style & using the same pattern in another is my grief
[00:17:09] <Wooble> my objection is also that if you start using conditional expressions like that, you start to think they're just a slick way of writing an if: else: suite and try to stack statements in there like return and it fails horribly because that's not what it is.
[00:17:49] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:18:51] *** Joins: Klinda (~superleag@user/klinda)
[00:19:42] <TuckerBrandy1997> You're right Wooble, I fixed it
[00:20:49] <TuckerBrandy1997> so I should priortize clarity over simplicity
[00:20:54] *** Quits: w1kl4s (~w1kl4s@user/w1kl4s) (Quit: Bye)
[00:21:56] <dav1d> TuckerBrandy1997,  python -c "__import__('this')"
[00:22:36] *** Joins: w1kl4s (~w1kl4s@user/w1kl4s)
[00:26:19] <parv> Don't forget (reasonable) consistency
[00:27:20] *** Quits: Anom (~Anom@2804:d4b:8072:100:f840:5209:c37a:54dd) (Ping timeout: 256 seconds)
[00:27:21] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[00:27:31] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[00:27:55] <Wooble> shorter and crammed onto one line isn't necessarily simpler anyway
[00:28:23] *** Joins: davef (~davef@user/davef)
[00:29:57] *** Quits: saltysoul (~sebmont@user/sebmont) (Read error: Connection reset by peer)
[00:30:11] *** Joins: saltysoul (~sebmont@user/sebmont)
[00:30:22] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[00:30:24] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[00:30:44] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Read error: Connection reset by peer)
[00:31:39] *** Quits: naan (~Naan@user/naan) (Ping timeout: 264 seconds)
[00:31:58] *** Quits: saltysoul (~sebmont@user/sebmont) (Client Quit)
[00:32:01] <TuckerBrandy1997> https://dpaste.org/AVqC
[00:32:06] <TuckerBrandy1997> is this acceptable?
[00:32:16] *** Joins: saltysoul (~saltysoul@user/sebmont)
[00:32:36] <KirkMcDonald> input() already returns a string, no need to call str() on it.
[00:32:48] *** Joins: Pickchea (~private@user/pickchea)
[00:32:58] <KirkMcDonald> I'm not sure why += is being used here.
[00:33:04] *** Joins: Celeo (~Celeo@user/celeo)
[00:33:07] <KirkMcDonald> Hard to say without additional contet.
[00:33:08] <Wooble> also that's not going to change car_input
[00:33:25] <KirkMcDonald> context*
[00:33:40] <TuckerBrandy1997> sry that was meant to be car_input
[00:33:45] <KirkMcDonald> Yeah, if that's the whole loop, then something's wrong.
[00:34:15] <TuckerBrandy1997> Any advice on accepting a series of string and assign it to an array then
[00:34:18] <Wooble> either way, adding "0" to the end of a bunch of car names isn't going to be equal to "0"
[00:35:07] <TuckerBrandy1997> What I wanna do is to accept a series of car manufacturer from user until he/she enter 0
[00:35:14] <TuckerBrandy1997> im not sure if it's the best way to do it tho
[00:35:15] *** Quits: TJ- (~root@about/linux/staff/tj-) (Ping timeout: 264 seconds)
[00:36:24] <Wooble> TuckerBrandy1997: something like https://bpa.st/2CUA
[00:36:49] <grym> TuckerBrandy1997: https://bpa.st/GNGQ
[00:36:52] <parv> TuckerBrandy1997, use a separate list variable to collect the entries; in the loop, append to it if input is not 0
[00:36:59] <grym> Wooble: hahah
[00:37:15] <deniska> `while True` is the best `while`
[00:37:29] <grym> while x:=input() >:)
[00:38:01] <Wooble> tbh walrus isn't bad here but I probably wouldn't use it. :)
[00:38:10] <KirkMcDonald> while (x := input("blah")) != "0":
[00:38:25] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Quit: Konversation terminated!)
[00:38:30] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 260 seconds)
[00:38:36] <TuckerBrandy1997> Thanks a lot
[00:38:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:38:43] <Wooble> this may literally be the one example even the haters thought was ok but not worth changing the syntax of the language to support. :)
[00:39:33] *** Quits: dntreou (~yakiza@cpc91196-cmbg18-2-0-cust129.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[00:39:39] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[00:40:01] <deniska> The only place I personally find it acceptable is `if m := re.match(..)` :)
[00:40:32] <grym> that's certainly the ur-case
[00:40:33] <Wooble> anyway := is old, this should use pattern matching unnecessarily instead.
[00:40:35] <deniska> or anything similar where the variable is only used inside the statement
[00:40:43] *** Quits: rannnn8888 (~rannnn888@bzq-79-183-157-9.red.bezeqint.net) (Quit: Client closed)
[00:41:14] <deniska> otherwise I just can't immediately see where the name is coming from
[00:41:19] <grym> Wooble: "and how many days of this year's AoC will i be able to wedge match into..."
[00:42:37] <deniska> `if not (thing := get_thing_but_maybe_none()):` annoys me
[00:43:16] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 245 seconds)
[00:43:20] <Wooble> Huh I don't have 3.10 on this machine to test if I'm allowed to match (car := input()): case "0": break
[00:43:35] <deniska> because the name `thing` will be used outside of that if statement, and its definition/assignment gets lost in visual noise
[00:44:19] *** Quits: Sario (uid356235@fosshost/cdo/Sario) (Quit: Connection closed for inactivity)
[00:44:40] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:44:45] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 268 seconds)
[00:46:46] <nedbat> Wooble: it works: https://gist.github.com/nedbat/e6e18cefd5d277ebc59aa4b09f87d3f9
[00:47:07] <dba> just curiously, what are the use cases of pyhton bytcode, where/how can it be useful ?
[00:47:15] <Wooble> nedbat: also pointless because really I just wanted case car: L.append(car)
[00:47:32] <nedbat> dba: it is how all of your programs get executed, so "everything"?
[00:47:44] *** Quits: saltysoul (~saltysoul@user/sebmont) (Quit: leaving)
[00:47:48] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[00:47:59] *** Joins: saltysoul (~saltysoul@user/sebmont)
[00:48:18] <dba> nedbat, but do we have to power of changing the execution without changing the code?
[00:48:47] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[00:48:54] <deniska> While you technically can, practically you shouldn't
[00:48:55] <nedbat> dba: i don't understand the question
[00:49:12] <nedbat> dba: there's pretty much no reason to manipulate bytecode directly
[00:49:16] <deniska> But hacks involving rewriting bytecode are a thing
[00:50:08] *** Joins: Deep3D (~Deep3D@user/deep3d)
[00:50:22] <deniska> You are probably better off poking at an AST level or even, well, source code level, it's sane(r), and is more stable across versions
[00:50:25] <Wooble> you can also happily make self-modifying python programs without knowing anything about bytecode (but probably don't do that either)
[00:50:51] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[00:51:11] <dba> nedbat, to me just seeing how code get executed with no ability to manipulate it without changing the code is a useless thing.
[00:51:28] <nedbat> dba: it can help to understand the execution to read the bytecode
[00:51:40] <nedbat> dba: one thing to remember: the bytecodes change from version to version
[00:53:19] <TuckerBrandy1997> in mongodb, does the database get created automatically when i insert?
[00:53:57] <TuckerBrandy1997> or I still have to go thru the step of MyDB = cluster[""], dbcollection = MyDB[""]
[00:53:58] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[00:55:24] *** Joins: TJ- (~root@about/linux/staff/tj-)
[00:55:50] <deniska> TuckerBrandy1997: I don't remember having to create a collection explicitly
[00:55:58] *** Quits: saltysoul (~saltysoul@user/sebmont) (Quit: leaving)
[00:57:50] <TuckerBrandy1997> u mean you didn't do something like this: https://dpaste.org/RP8h
[00:57:52] <TuckerBrandy1997> ?
[00:58:47] <tmart> change that password now?
[00:59:07] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[01:00:16] <deniska> TuckerBrandy1997: I used motor instead of pymongo, but there similar steps, you create a reference to a collection (but that reference is just an abstraction by a library, it doesn't do any IO upon creating a reference)
[01:00:35] <de-facto> "w = [-1]" <-- what does that mean?
[01:00:43] <deniska> TuckerBrandy1997: and if it's real password, yeah, time to change it :)
[01:00:54] <de-facto> or even "w[-1] += 1" what does that mean
[01:01:05] <deniska> these two mean quite different things
[01:01:19] <grym> de-facto: the first one is "the variable w is a list containing one thing, the number -1"
[01:01:21] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[01:01:27] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c8eb-bc7c-9a6e-e932.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:01:33] <deniska> `w[-1] += 1` increments the last element of a list by one
[01:01:35] <grym> de-facto: the second is "add one to the last element of the indexable thing named w"
[01:01:37] <TuckerBrandy1997> tmart i alrd changed the password before i paste it
[01:01:37] <deniska> (assuming w is a list)
[01:01:48] <de-facto> ok thank you :)
[01:02:46] *** Quits: guenhael (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr) (Quit: guenhael)
[01:02:47] *** Quits: zeden (~zeden@user/zeden) (Remote host closed the connection)
[01:03:03] *** Joins: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael)
[01:07:13] *** Joins: y1n (~y1n@178.115.71.254.wireless.dyn.drei.com)
[01:07:52] *** Joins: drogas (~drogas@jump2.jet.uk)
[01:08:26] *** Quits: kek_ (~kek_@ipr31.alvhaus.ch) (Ping timeout: 260 seconds)
[01:08:44] <TuckerBrandy1997> https://dpaste.org/KvDA <---is this how i auto increment the id field
[01:08:48] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:08:55] *** Quits: driib2 (~driib@185.65.135.232) (Quit: The Lounge - https://thelounge.chat)
[01:09:13] *** Joins: driib2 (~driib@185.65.135.232)
[01:09:32] <p-i-> Can someone help me with some pandas code? I can't get it to work, and I think the design's probably awful in the first place. https://bpa.st/56TA
[01:09:56] <p-i-> Even tho I feed multiple rows into this, self.df is always coming out with 1 element
[01:10:17] <p-i-> I'm trying to add a row each time feed is called
[01:10:43] <p-i-> Can't see a clean way to do it
[01:10:44] *** Quits: yaalon (~yaalon@cpe-70-121-160-255.satx.res.rr.com) ()
[01:10:53] <p-i-> Can't even see a WORKING way to do it
[01:11:56] *** Quits: michele (~eraser@user/michele) (Quit: restart)
[01:12:17] *** Joins: michele (~eraser@user/michele)
[01:12:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[01:13:21] <de-facto> what does "while w:" mean for w being a list?
[01:13:27] <de-facto> len(w) > 0 or such?
[01:13:51] <p-i-> yup
[01:13:55] <nedbat> de-facto: lists are false if they are empty, and are true otherwise
[01:14:24] <p-i-> falsey / truthy
[01:15:05] *** Joins: guenhael1 (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr)
[01:16:22] *** Quits: guenhael (Thunderbir@gateway/vpn/protonvpn/guenhael) (Ping timeout: 260 seconds)
[01:16:22] *** guenhael1 is now known as guenhael
[01:16:56] <nedbat> that too :)
[01:19:09] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[01:19:14] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[01:19:25] *** Joins: Enitin (~Enitin@82.102.22.85)
[01:20:44] <p-i-> oh gawwwwd, I need df = df.append(foo).  df.append doesn't operate in place.
[01:21:33] <grym> p-i-: it does if you pass inplace=True! >:(
[01:21:56] <grym> p-i-: oh, or no it can't
[01:22:01] <grym> heh heh heh pandas
[01:22:26] *** Quits: MikZyth (~MikZyth@host-211-157-66-217.spbmts.ru) (Quit: WeeChat 3.3)
[01:22:32] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[01:23:45] <theseb> What is the purpose of async? just to allow multiple stuff to happen "at same time" or appear to?
[01:23:51] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[01:24:21] <grym> yes
[01:24:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:24:32] <grym> it's another way to walk and chew bubblegum
[01:25:41] <p-i-> theseb: It circumnavigates a lot of pitfalls of using threads (well, one at least: reentrancy)
[01:26:06] <p-i-> It's also more lightweight in terms of resources usage (scheduler / ram / cpu)
[01:26:16] <p-i-> it's also a pain in the ass
[01:26:46] <p-i-> unless you use trio, in which case all the other libs that still use asyncio are a pain in the ass
[01:26:57] <p-i-> *which is pretty much all of them
[01:27:18] <parv> Pita is better with some stuffing
[01:27:48] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[01:28:02] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:28:18] <p-i-> yeah trio is the stuffing. surrounded by pita on all sides.
[01:28:21] <de-facto> i am trying to translate a simple algo form python to js but it does not work because i dont speak python
[01:28:52] <Yhg1s> nedbat: it certainly *was* a leak, because as far as I can tell the tracers were never deallocated.
[01:28:53] <grym> de-facto: translating from a language you don't speak is quite hard
[01:29:13] <p-i-> de-facto: maybe a job for bpaste
[01:29:30] <nedbat> Yhg1s: ok, but the two bound methods that show up in this delta list: is that definitely evidence of a leak?
[01:30:40] <xavierdarkness> I am having the weirdest error: /usr/local/bin/python3: can't find '__main__' module in ' when I am trying to spin up a k8s pod with my code running in it. I have the shebang set but I still get the error. Any ideas on how I can go about debugging this?
[01:31:21] <de-facto> this is what i got so far, bot the algo fails https://bpa.st/VEDA
[01:32:05] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:32:27] *** Quits: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu) (Quit: leaving)
[01:32:33] <ChrisWarrick> xavierdarkness: how do you build your container? where is your code?
[01:32:44] *** Joins: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu)
[01:33:10] *** Quits: grooverman (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[01:33:23] <p-i-> How do I print repeatedly on the same line (like a countdown timer) in a .ipynb cell output. \r fails. Is it even doable?
[01:33:32] <xavierdarkness> ChrisWarrick: I build it with docker build -t. What code are you wanting? The file that it is failing to find the __main__ from?
[01:33:43] <ChrisWarrick> xavierdarkness: Dockerfile?
[01:33:43] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:34:33] *** Joins: zebrag (~chris@user/zebrag)
[01:34:53] <grym> p-i-: print(..., end='')
[01:35:04] <grym> p-i-: but, you might want tqdm
[01:35:10] <xavierdarkness> ChrisWarrick: here is the dockerfile https://bpa.st/XVFA
[01:35:12] *** Quits: mokulus (~mokulus@user/mokulus) (Ping timeout: 260 seconds)
[01:35:15] <p-i-> I tried end=''
[01:35:23] <p-i-> can't get it to work
[01:35:50] <ChrisWarrick> xavierdarkness: okay, and full error you get when running?
[01:36:03] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.3)
[01:36:16] <p-i-> tried end='\r' too :/
[01:36:41] <xavierdarkness> ChrisWarrick: "/usr/local/bin/python3: can't find '__main__' module in '/app/bot.py'"
[01:36:47] <spiderman> python3 -m build fails to detect my setup.cfg, and whines about a missing setup.py?
[01:36:51] <SnoopJ> p-i-, are you trying to erase what you've previously printed?
[01:36:55] <p-i-> print('foo', end='\r') ; sleep(1); print('bar') just sleeps and prints 'bar'). must be an ipython quirk
[01:36:56] <SnoopJ> and print "over" it?
[01:36:59] <p-i-> SnoopJ: yup
[01:37:20] <de-facto> is there any auto translator for py -> js?
[01:37:24] <ChrisWarrick> xavierdarkness: are you sure you’re running the latest version of your container?
[01:37:44] *** Joins: grooverman (~grooverma@177.95.12.14)
[01:38:02] <ChrisWarrick> xavierdarkness: this error message sounds like your CMD had '-m' in it
[01:38:02] <SnoopJ> p-i-, I doubt IPython would handle the carriage return that way, but you might be able to take control of the output cell using the stuff in the IPython module.
[01:38:50] <SnoopJ> e.g. a quick search brings up: https://pypi.org/project/progressbar-ipython/#files
[01:39:31] <p-i-> I found https://stackoverflow.com/questions/38540395/overwrite-previous-output-in-jupyter-notebook which seems to suggest \r used to work in jupyter but now doesn't
[01:39:59] *** Joins: jarthur (~jarthur@205.220.129.19)
[01:40:14] <SnoopJ> Like I said, I doubt it
[01:40:33] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[01:40:40] <SnoopJ> but that library shows off how you can take more rich control of what's in the output cell (formally speaking, it creates a widget that has an update method)
[01:41:33] <de-facto> what does "w[-m]" mean? negative list index?
[01:41:35] <de-facto> what is that?
[01:41:36] <SnoopJ> you might try the IPython.display.clear_output() suggestion in that post, though, I would think that would be meaningful in Jupyter
[01:41:38] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:57f:99d1:5cdc:b71e) (Quit: Client closed)
[01:41:40] <SnoopJ> de-facto, "from the end" usually
[01:42:04] <xavierdarkness> ChrisWarrick: attempting to verify now
[01:42:10] <de-facto> ah
[01:42:41] *** Joins: Jong (~Jong@2620:10d:c090:400::5:ddb6)
[01:43:29] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[01:43:40] *** Quits: magla (~gelignite@55d416db.access.ecotel.net) (Quit: Stay safe!)
[01:43:51] <de-facto> ok i think this works now https://bpa.st/F2PA
[01:44:20] <mat001> Ay tips how I could consolidate these two simple functions into one? https://bpa.st/3BJA They are different in one parameter and one if statement
[01:44:55] <nedbat> mat001: instead of obj.x, use getattr(obj, "x")
[01:44:57] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[01:44:59] <mat001> (rest should be exactly identical)
[01:45:12] *** Joins: mickey81 (~user@user/mickey)
[01:45:47] <SnoopJ> mat001, make the target attribute a parameter too: `def func(flag_key, attr, targetval): # ...;; if getattr(variation, attr) == targetval: ...`
[01:46:06] <SnoopJ> where attr would be 'id' and 'key' for those two
[01:46:24] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Ping timeout: 276 seconds)
[01:46:27] <xavierdarkness> ChrisWarrick: verified that it has grabbed the up to date image when I go to deploy it inside minikube.
[01:46:55] *** Joins: junktext__ (~junktext@gateway/vpn/pia/junktext)
[01:46:59] <mat001> mmm, thx for the tips. let me try applying and see
[01:47:03] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[01:47:04] *** mickey81 is now known as mickey8
[01:47:17] <ChrisWarrick> xavierdarkness: docker image inspect?
[01:47:33] <TuckerBrandy1997> https://dpaste.org/A9p9 <--- what's wrong with this? I keep getting error
[01:47:37] <Jong> de-facto  you're coding using c89 habits.  The for loop could be replaced with a list comprehension
[01:47:43] <TuckerBrandy1997> "TypeError: 'Collection' object is not iterable"
[01:48:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[01:48:16] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:48:28] <Jong> Also, in def two, I see variable name self.  yet I don't see that as an input parameter to the function
[01:49:43] *** Quits: jcarl43 (~jcarl@node-1w7jr9pj6xbfpbvumr522w6fg.ipv6.telus.net) (Quit: WeeChat 3.3)
[01:50:07] *** Joins: fikran (~fikran@user/fikran)
[01:50:30] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[01:50:31] *** Joins: jcarl43 (~jcarl@node-1w7jr9pj6xbfpbvumr522w6fg.ipv6.telus.net)
[01:51:15] <Yhg1s> nedbat: well, _something_ is keeping them alive. If it's always growing, it is by definition a leak.
[01:51:21] *** Joins: withered_wolf (~withered_@2600:1008:b153:3d22:cd27:9f04:ed7a:ed76)
[01:51:21] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[01:51:25] <xavierdarkness> ChrisWarrick: https://bpa.st/42JA
[01:51:51] <nicode> howdy, is there a clean way to strip all the \x00 at the end of a string?
[01:51:53] <nedbat> Yhg1s: ok, that's what i thought, but i know these things can be subtle and non-obvious
[01:52:03] <nedbat> nicode: s = s.rstrip("\x00")
[01:52:29] <ChrisWarrick> xavierdarkness: could you try running this directly with docker?
[01:52:35] *** Quits: Lorthirk (~lorthirk@93-44-176-144.ip98.fastwebnet.it) (Quit: WeeChat 3.3)
[01:52:53] <nicode> I'm using struct('10s') and ending up w/ my string plus a bunch of '\x00' at the end (i.e. the balance of 10 characters after the string I'm sending).
[01:53:04] <nicode> nedbat: thx, I'll give that a try.
[01:53:20] <xavierdarkness> ChrisWarrick: same error with docker run
[01:53:26] *** Joins: jarthur_ (~jarthur@205.220.129.19)
[01:53:27] <Yhg1s> nedbat: that is, _if_ they're not meant to stick around :) If you're collecting them all in a list in coverage somewhere, that's different ;P
[01:53:30] <ChrisWarrick> xavierdarkness: then I’m out of ideas, sorry
[01:53:36] <nedbat> Yhg1s: right, sure.
[01:54:11] *** Quits: julia (~quassel@user/julia) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:54:19] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[01:54:56] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 245 seconds)
[01:55:00] <nedbat> nicode: why use struct if you don't want fixed-width fields?
[01:55:08] *** Joins: julia (~quassel@user/julia)
[01:55:38] <SnoopJ> Yhg1s, I would hope that they're getting collected somewhere, somehow, because otherwise the bug is pretty spooky :) (but I know you mean deliberately)
[01:55:38] <nicode> nedbat, I'm just getting into sockets and it was the direction I picked for sending data. I may just switch to json.
[01:55:43] *** Joins: rickybob (~rickybob@35.143.255.39)
[01:56:15] *** Quits: withered_wolf (~withered_@2600:1008:b153:3d22:cd27:9f04:ed7a:ed76) (Ping timeout: 264 seconds)
[01:56:36] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[01:56:40] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Client Quit)
[01:56:54] *** Quits: jarthur (~jarthur@205.220.129.19) (Ping timeout: 268 seconds)
[02:00:06] <Yhg1s> SnoopJ: no, I think it's just a refcount bug somewhere, to be honest.
[02:00:24] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[02:00:26] *** Quits: rinzewind (~rinzewind@user/rinzewind) (Quit: leaving)
[02:00:39] <SnoopJ> huh
[02:00:43] <SnoopJ> neat!
[02:00:47] <nicode> nedbat: that worked so thanks! do you have any suggestions besides switching to json for passing data in sockets?
[02:00:51] <Yhg1s> I miss my work tooling for this, so much more convenient to debug refcount issues when you can just edit the Python source and rerun your test :P
[02:01:08] <Yhg1s> (I mean the CPython source.)
[02:01:42] <SnoopJ> I considered it, but I wouldn't have enough of an idea of what I was doing to know where to begin.
[02:02:15] *** Quits: vit (~vit@chello085216193138.chello.sk) (Ping timeout: 264 seconds)
[02:02:40] <SnoopJ> I did sprinkle printf() all over tracer.c, though, which is how I saw that the deallocator was never being run full-stop.
[02:03:23] <SnoopJ> And admired the `CRASH` macro for causing a segfault /* Only for extreme machete-mode debugging! */
[02:04:41] *** Quits: daoudr_ (~daoudr@161.12.105.92.dynamic.wline.res.cust.swisscom.ch) (Quit: Leaving)
[02:05:04] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[02:05:21] <Yhg1s> nedbat: actually, yes, you *are* keeping things around. In the test. The test is keeping things around.
[02:06:12] <nedbat> Yhg1s: oh dang.
[02:06:51] <nedbat> Yhg1s: but i don't know which things? the tracers?
[02:07:06] *** Joins: mven2 (~mven@ip68-104-39-54.lv.lv.cox.net)
[02:08:21] <Yhg1s> nedbat: the test keeps the methods around in the 'meths' list, which keeps the Coverage object they're methods of around, which keeps the tracers around. So it's a bad test.
[02:08:33] <nedbat> Yhg1s: ah, i see.
[02:08:39] <SnoopJ> ...d'oh
[02:08:45] <nedbat> that's what i get for copying from someone else's test  :)
[02:08:45] <Yhg1s> It's identifying things that are still alive *while the test is running*, which is of course the case for the Coverage object, because you instantiate it *outside* of the test.
[02:08:47] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 256 seconds)
[02:08:48] *** mven2 is now known as mven
[02:09:26] <SnoopJ> does that mean the reporting test is also-bad, or is their issue not necessarily subject to the same flaw?
[02:09:43] <Yhg1s> I didn't look at the reporting test
[02:09:52] <nedbat> Yhg1s: hmm, i have to think harder about that.  the threads start and stop, so they each get their own CTracer
[02:10:23] <Yhg1s> nedbat: but they're linked from the main Coverage object, aren't they?
[02:10:28] <Yhg1s> I mean, the tracers are referenced by it
[02:10:32] <SnoopJ> There's just the one Collector instance, I believe
[02:10:35] <Yhg1s> or the Collector, rather.
[02:11:05] *** Quits: BillyZane (~BillyZane@91.196.220.172) (Ping timeout: 268 seconds)
[02:11:51] *** Quits: TuckerBrandy1997 (~TuckerBra@209.87.29.242) (Ping timeout: 264 seconds)
[02:11:58] <Yhg1s> In any case, I *do* think you have a leak, it's just that the test as you have it doesn't exhibit it, because you're keeping the Coverage/Collector/CTracers alive for the duration of the test, and the test assumes the tracer at least should go away.
[02:12:27] <nedbat> Yhg1s: i will take a harder look at the structure of the test.
[02:12:38] *** Joins: ianliu (~ianliu@200-232-249-142.dsl.telesp.net.br)
[02:13:20] *** Quits: lowfi (~lowfi@user/lowfi) (Read error: Connection reset by peer)
[02:13:29] <ianliu> I have a pandas dataframe which is already sorted by the index, but when I call "df.loc[(slice(0, 10), ), :]", I get
[02:13:30] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:57f:99d1:5cdc:b71e)
[02:13:46] <ianliu> "MultiIndex slice requires index to be lexsorted
[02:13:46] <nedbat> Yhg1s: this test was adapted from the psycopg test, which fails when run under coverage, but passes when not.
[02:14:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[02:14:44] <Yhg1s> nedbat: Are you in a position to run the psycopg test with your changes to tp_traverse/tp_clear? Because I think they should fix the leak.
[02:15:16] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:15:25] *** Joins: BillyZane (~BillyZane@152.89.204.151)
[02:16:46] <ianliu> oh, never mind, my mistake
[02:16:48] *** Quits: ianliu (~ianliu@200-232-249-142.dsl.telesp.net.br) (Client Quit)
[02:18:25] <xavierdarkness> ChrisWarrick: I have gotten closer; I just explicitly put things in a main() and it gives me a new error where it cannot communicate with the db container/pod. Thanks for your assistance!
[02:18:45] <nedbat> Yhg1s: i can yes, but not for a few hours
[02:19:56] *** Joins: jbox (~jbox@user/jbox)
[02:21:23] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[02:21:51] *** Joins: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[02:23:01] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:23:33] *** Quits: acegallagher (~Ace@174-16-184-4.hlrn.qwest.net) (Ping timeout: 250 seconds)
[02:23:56] <Yhg1s> nedbat: btw, you should check the return value of DataStack_clear() and propagate it if it's not 0 (see https://docs.python.org/3/c-api/gcsupport.html#c.traverseproc or https://github.com/python/cpython/blob/main/Include/objimpl.h#L197)
[02:24:20] <stewie925> just had another job interview on python and I froze when I was asked about threading and ASYNC and synchronous stuff   😳
[02:25:39] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[02:25:57] *** Joins: jinsun__ (~quassel@user/jinsun)
[02:26:01] *** Joins: sgn (~sgn@user/sgn)
[02:26:35] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[02:27:16] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:28:15] <nedbat> Yhg1s: i figured i should, but that's a clean-up phase.  thanks.
[02:28:42] *** Joins: Arw (~Arwalk@lfbn-dij-1-163-68.w109-215.abo.wanadoo.fr)
[02:29:10] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[02:29:44] <Yhg1s> nedbat: it doesn't actually matter because none of the existing visit functions do anything but return 0 or abort the whole process, but still :)
[02:29:50] <SnoopJ> Yhg1s, since this has snagged your attention, can you comment on what's going on with PyObject_GC_Track() ? I noticed that it's rarely used directly in the CPython source (mostly when creating an ancillary iterator, it seemed?), but it's also part of PyType_GenericAlloc(). Am I reading the docs right in saying that all containers need to call it?
[02:29:56] *** Quits: Arw- (~Arwalk@lfbn-dij-1-163-68.w109-215.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[02:30:04] <SnoopJ> (where "containers" has the meaning the GC docs gives it)
[02:30:15] <Yhg1s> SnoopJ: so, yes and no.
[02:30:50] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:01] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:31:05] <Yhg1s> SnoopJ: It *needs to be called* on objects that the GC module should consider a root, and "live". The GC module keeps a linked list of all tracked objects, and GC_Track/Untrack are what add and remove objects from that linked list.
[02:31:24] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:31:29] <Yhg1s> SnoopJ: however, a bunch of things call it for you, so you usually don't have to call it yourself, unless you're also, for example, using your own allocator
[02:31:49] <SnoopJ> but it does need to be called by *somebody*?
[02:32:00] *** Joins: Atlas667_ (~Atlas667@94.198.42.94)
[02:32:02] <SnoopJ> in order for the GC to be aware "hey there's this thingy over here that might refer to other thingies"
[02:32:05] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c8eb-bc7c-9a6e-e932.res6.spectrum.com)
[02:32:11] <Yhg1s> Yes.
[02:32:30] <SnoopJ> phew, okay thanks for shoring that up for me :)
[02:33:16] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 245 seconds)
[02:33:16] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[02:33:18] <Yhg1s> There's two separate mechanisms: the tp_traverse (and tp_clear) mechanism of object traversal, and the GC tracking of roots. Not everything needs to be a root, but everything that holds references to other Python objects should implement tp_traverse.
[02:34:18] <SnoopJ> and roots should do it so the GC knows "where to start?"
[02:34:33] <SnoopJ> err, should register themselves as such*
[02:34:58] <Yhg1s> Yes. It's important that any *potential* reference cycle contain at least one object that is tracked, otherwise the GC module won't even know about those objects.
[02:35:20] *** Joins: Betal (~Betal@user/betal)
[02:35:24] <SnoopJ> and the refcounting part wouldn't apply because of the cycle
[02:35:30] <SnoopJ> makes sense :)
[02:35:47] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[02:35:54] <Yhg1s> So, for example, tuples don't register themselves as roots, because you can't have a reference cycle of *just* tuples. There's always going to be something mutable involved, and mutable containers absolutely should be roots (because they could contain themselves directly and then it'd be an unfindable cycle if it wasn't tracked)
[02:37:08] <Yhg1s> but it's really rare to be able to prove that you don't have to be a root, and the cost is a few bytes at the head of the object, so for your own types, just track them :P
[02:37:33] <SnoopJ> yea, it seemed like the docs were heavily emphasizing "probably just write tp_clear"
[02:37:36] <Yhg1s> (you also have to use different allocation routines so that PyObject struct is preceded by a GC head, but the C API takes care for that for you)
[02:37:36] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[02:37:47] <Yhg1s> SnoopJ: that's similar, but different.
[02:38:07] <SnoopJ> oh, oops, you were talking about being a root
[02:38:17] *** Quits: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr) (Quit: Lost terminal)
[02:38:39] <SnoopJ> when you say the cost is those few bytes, that's part of PyVarObject_HEAD_INIT?
[02:38:41] *** Quits: delvian (~delvian@41.13.246.105) (Ping timeout: 245 seconds)
[02:39:00] <Yhg1s> tp_traverse is for "I can reach this object from a root (or it is a root itself), and now I want to find all objects it's keeping alive", and tp_clear is for "this object is part of a reference cycle, and we're going to break it, so I'm calling tp_clear on a random object and the cycle should be broken"
[02:39:16] *** Quits: Staunch (~Staunch@c-24-7-237-208.hsd1.mn.comcast.net) (Remote host closed the connection)
[02:39:25] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:39:36] <Yhg1s> SnoopJ: no, an extra header that's put before the PyObject struct altogether.
[02:39:42] <SnoopJ> oh, huh
[02:39:47] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[02:39:54] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Remote host closed the connection)
[02:40:01] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Remote host closed the connection)
[02:40:41] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[02:40:52] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:41:30] <Yhg1s> SnoopJ: https://github.com/python/cpython/blob/main/Include/internal/pycore_gc.h#L11 and https://github.com/python/cpython/blob/main/Modules/gcmodule.c#L71-L75
[02:41:41] *** Joins: djapo (~archangel@user/djapo)
[02:41:45] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[02:41:55] <SnoopJ> where "the list" is the GC's linked list?
[02:42:00] *** Joins: mallkrampus (~mallkramp@207.45.82.185)
[02:42:55] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:43:21] <Yhg1s> Yes. That header is the doubly-linked list of roots that the cyclic GC uses. (It actually re-uses one direction of the linked list as flags during the collection run.)
[02:44:01] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:46:10] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:46:39] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[02:46:41] <SnoopJ> the perks of getting nerd-sniped :)
[02:48:21] <Yhg1s> I don't mind, it was a welcome reprieve from dealing with the PSF Executive Director search, the hand-off from Ewa to me as interim manager, and pylint weirdness in our internal build of Python and specifically readline :P
[02:48:27] *** Quits: Matt343 (~Matt343@c-69-181-108-8.hsd1.ca.comcast.net) (Quit: Client closed)
[02:48:45] *** Joins: p-i-_ (~Ohmu@223.206.149.105)
[02:51:13] *** Quits: cruncher (~cruncher@90.68.118.49) (Quit: Leaving)
[02:51:48] <daex> Does anyone know if it's possible to use pyproject.toml to define an extra script?
[02:52:01] *** Quits: p-i- (~Ohmu@223.206.149.105) (Ping timeout: 245 seconds)
[02:52:04] <daex> As in, I want `pip install mypackage[somefeature]` to create a script `somefeature`.
[02:53:59] <SnoopJ> daex, looks like you add [myfeature] after the declaration of the console_script, see example at the bottom of this subsection: https://packaging.python.org/specifications/entry-points/#file-format
[02:54:31] *** Joins: marduk5 (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[02:54:50] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:54:52] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[02:55:03] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 264 seconds)
[02:55:03] *** marduk5 is now known as marduk
[02:55:06] *** Joins: jarthur (~jarthur@205.220.129.19)
[02:55:20] *** Joins: rickybob2 (rickybob@gateway/vpn/protonvpn/rickybob)
[02:56:09] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[02:57:45] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[02:57:57] *** Quits: jarthur_ (~jarthur@205.220.129.19) (Ping timeout: 268 seconds)
[02:58:04] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:58:16] *** Quits: twomoon (~twomoon@ip72-199-116-21.sd.sd.cox.net) (Ping timeout: 245 seconds)
[02:58:41] *** Quits: rickybob (~rickybob@35.143.255.39) (Ping timeout: 245 seconds)
[03:00:25] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[03:00:32] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[03:00:46] <daex> I think that's how you do it inside the actual package (which is useful, thanks, I hadn't come across it), but is there a way to have pip/flit/whoever read the pyproject.toml and then generate that when building?
[03:01:00] <daex> SnoopJ: ^
[03:01:14] <SnoopJ> daex, generate...the script?
[03:01:23] <daex> Yeah.
[03:01:50] <daex> Like in pyproject.toml you can have a [scripts] which will create an executable that's installed when you install the package.
[03:01:56] <SnoopJ> I'm not entirely sure what the semantics are about that field when performing an install
[03:01:56] <daex> I just want to do that but optionally.
[03:02:18] <SnoopJ> i.e. not sure if tools will just do it if the dependencies are satisfied, or...?
[03:04:10] <daex> About which field? You mean in the pyproject or in the entry_points.txt?
[03:04:14] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[03:05:02] *** Joins: thiras (~thiras@user/thiras)
[03:05:34] <SnoopJ> in pyproject.toml
[03:06:08] *** Quits: dhch (~dhch@185.213.154.168) (Quit: Ping timeout (120 seconds))
[03:06:20] *** Joins: dhch (~dhch@185.213.154.168)
[03:07:19] <daex> Is it possible to specify dependencies for specific scripts though?
[03:07:58] <SnoopJ> yes, using the thing I linked to. I just don't know under what circumstances (if any) the stubs for them are actually installed, and it doesn't seem to specify
[03:08:26] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:9b94:a761:1a80:bf1) (Ping timeout: 268 seconds)
[03:09:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:09:36] *** Joins: nat_of_cy (~Thunderbi@78.190.233.237)
[03:10:12] <daex> The thing you linked to is talking about the .dist-info inside package isn't it? Entirely separate from pyproject.toml.
[03:10:25] <SnoopJ> daex, look at the example at the bottom of the section
[03:10:53] <SnoopJ> oh, wait, I think I see what you're saying...ahh, maybe that's so
[03:11:34] *** Joins: TuckerBrandy1997 (~TuckerBra@S0106503955532332.vc.shawcable.net)
[03:11:38] <TuckerBrandy1997>  for pymongo/mongodb if i don't use createCollection() when the collection does not exist, does it auto create when I do mycollection.insert()?
[03:11:51] *** Joins: arinov (~arinov@213.194.126.155)
[03:12:14] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[03:12:32] <SnoopJ> daex, PEP 621 says the [project.scripts] table corresponds to that one for entry_points.txt so I think you use the same syntax?
[03:12:49] <SnoopJ> but hmm, that's...not how TOML works, is it
[03:12:56] *** Quits: jarthur (~jarthur@205.220.129.19) (Quit: jarthur)
[03:14:23] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[03:14:41] *** Joins: atknight (~someone@68.235.36.106)
[03:14:41] <SnoopJ> daex, the setuptools docs seem to allow exactly the same thing: https://setuptools.pypa.io/en/latest/userguide/entry_point.html#dependency-management
[03:15:03] <SnoopJ> although that's options.entry_points (and PEP 621 points out that flit and poetry do their own thing)
[03:15:03] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[03:15:03] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[03:15:37] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:15:41] <daex> Yeah I found the setuptool docs and I tried that syntax in the TOML, but it definitely didn't work.
[03:16:16] <daex> I've never actually used setuptools and I'm reluctant to switch from PEP517 if I can help it.
[03:16:17] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:17:23] <SnoopJ> well, the two aren't mutually exclusive (setuptools makes a dummy if it needs too, I think)
[03:17:39] <meejah> the fun part about setuptools is you probably _have_ used it ;)
[03:17:59] <SnoopJ> but if it didn't work, I guess that idea's no good. It might help to know in what way it not-worked, though. Did you get a script that always installed? No script?
[03:18:26] <TuckerBrandy1997> https://dpaste.org/3ebX <--- can someone give me advice please? Been trying to fix this for a while
[03:18:26] <daex> meejah: haha yes I thought of that as soon as I sent my last message, obviously I *have* but never explicitly :)
[03:19:23] <bjs> TuckerBrandy1997: advice with what?
[03:19:26] <daex> SnoopJ: Sorry could you elaborate on the not-mutually-exclusive thing?
[03:19:30] <SnoopJ> TuckerBrandy1997, what's broken?
[03:19:44] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[03:20:04] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[03:20:09] <SnoopJ> daex, setuptools is capable of acting as a build backend under PEP 517
[03:21:49] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:22:04] <TuckerBrandy1997> bjs: I keep getting error: TypeError: filter must be an instance of dict, bson.son.SON, or any other type that inherits from collections.Mapping
[03:22:06] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[03:22:12] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:22:30] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[03:22:44] <bjs> TuckerBrandy1997: which line gives you that error?
[03:23:35] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[03:24:08] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:57f:99d1:5cdc:b71e) (Ping timeout: 256 seconds)
[03:24:47] <daex> SnoopJ: Ah right, so currently I'm using flit. Switching to setuptools as a backend wouldn't help with being able to specify scripts in the pyproject.toml, but I maybe you can use a *setup.cfg* for just the one script and pyproject.toml for everything else...?
[03:25:10] *** Joins: arinov (~arinov@31.142.25.49)
[03:25:20] *** Quits: nat_of_cy (~Thunderbi@78.190.233.237) (Changing host)
[03:25:20] *** Joins: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112)
[03:25:23] <SnoopJ> daex, maybe? I would see if flit has any concept of this data, but I didn't see it in their docs so confirming if it's there might require reading their issues and/or source
[03:25:42] <TuckerBrandy1997> bjs:     if MyID.find({'id'}):
[03:25:50] <bjs> TuckerBrandy1997: what is MyID ?
[03:26:15] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 264 seconds)
[03:26:16] <TuckerBrandy1997> https://dpaste.org/5U7P
[03:26:19] <TuckerBrandy1997> rigth here
[03:26:22] <bjs> TuckerBrandy1997: oh,  what is that find supposed to do?
[03:26:26] <bjs> isn't find supposed to take a dictionary
[03:26:27] <bjs> of some kind
[03:26:35] <bjs> assumign this is mongo
[03:27:02] <TuckerBrandy1997> https://dpaste.org/bUi0 is this not a dict?
[03:27:12] <bjs> TuckerBrandy1997: that's not what you pass to find
[03:27:14] <daex> I don't think flit even supports it's own configuration file any more; they switched to pure pyproject.
[03:27:45] <bjs> TuckerBrandy1997: what is that find trying to do?
[03:27:55] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:27:56] <SnoopJ> daex, but they define their own semantics for their sections of it
[03:28:03] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 264 seconds)
[03:28:28] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[03:28:35] *** Quits: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112) (Quit: nat_of_cy)
[03:28:48] <SnoopJ> their docs say their project.scripts section works "like setuptools 'entry points'" but maybe this doesn't mean including this extra-dep feature?
[03:29:01] <SnoopJ> or maybe it does and nobody bothered to document that
[03:29:20] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c)
[03:29:35] <SnoopJ> since you tried it I would guess the former
[03:30:01] *** Quits: atknight (~someone@68.235.36.106) (Remote host closed the connection)
[03:31:16] *** Quits: Pixi (~Pixi@user/pixi) (Quit: Leaving)
[03:31:39] *** Quits: TuckerBrandy1997 (~TuckerBra@S0106503955532332.vc.shawcable.net) (Ping timeout: 264 seconds)
[03:34:02] *** Quits: strugee (~strugee@strugee.net) (Quit: ZNC - http://znc.in)
[03:35:13] <gcbirzan> I doubt such a thing exists, but: Does anyone know of a non annoying way of... bisecting, I guess (as you do with git) two sets of requirements? In particular, I have my venv where something doesn't work, but a coworker's where it does (something is putting breakpoints inside some parts of the code in pycharm, but it's not really relevant for my question) and I want to figure out what package broke it. I know it's not trivial, due to packages
[03:35:13] <gcbirzan> depending on each other, but still
[03:35:43] *** Joins: Pixi (~Pixi@user/pixi)
[03:35:47] <nedbat> gcbirzan: first use pip freeze on both machines and look at the differences.
[03:36:23] <gcbirzan> yeah, I have that. I'm staring at the output of compare-requirements :)
[03:36:53] <gcbirzan> however, I picked all the packages that MIGHT be related and it still doesn't work (starting fro mmy broken one and installing the versions from the working one
[03:37:07] <gcbirzan> and after doing like 15, I still have 54 left and I thought I might automate it
[03:37:11] *** Joins: iflema (~ian@user/iflema)
[03:37:24] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:37:45] *** Quits: mallkrampus (~mallkramp@207.45.82.185) (Ping timeout: 256 seconds)
[03:37:52] <gcbirzan> I know there's the bisect module (and, well, to be fair, it's not like the algorithm is hard)
[03:37:54] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[03:38:19] <gcbirzan> it's just that I'm pretty sure naively splitting the list in half and installing the first half will just break hilariously :)4
[03:38:57] *** Joins: strugee (~strugee@strugee.net)
[03:40:59] *** Joins: atknight (~someone@23.226.133.88)
[03:42:26] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 245 seconds)
[03:42:41] <daex> SnoopJ: Hmm well thanks for the help, I'll have a bit more of a poke around and hopefully work something out...
[03:43:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[03:46:39] *** Quits: dav1d (~dav1d@user/dav1d) (Ping timeout: 264 seconds)
[03:47:56] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[03:49:04] *** Quits: d00gy (~d00gy@user/d00gy) (Quit: WeeChat 2.3)
[03:49:09] *** Joins: jyu_s (~f0fz@122.11.212.232)
[03:49:36] *** Quits: superboot (~agentgasm@user/superboot) (Quit: leaving)
[03:50:43] *** Joins: mallkrampus (~mallkramp@148.72.164.202)
[03:52:15] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[03:52:47] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[03:54:42] *** Joins: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz)
[03:54:46] *** Joins: zeden (~zeden@user/zeden)
[03:55:24] <jamwil> If you're unit testing against a database, do y'all typically spin up a fresh test db for each test session or maintain a running test db and schema?
[03:55:44] *** Quits: parv (~quass@user/parv) (Quit: parv)
[03:57:01] <InPhase> jamwil: If you don't start fresh you do not have a guarantee of reproducible tests.
[03:57:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[03:57:40] <InPhase> jamwil: Although "fresh" could be some sort of archived prepared state that is regularly restored.
[03:57:44] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:57:53] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:58:39] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[03:58:44] <han-`> initialize, run migrations
[03:59:13] <InPhase> jamwil: Without doing this you risk inserting a bug and getting continued test failures after fixing it because you have corrupted your test's state dependency without noticing it, or theoretically worse, getting apparent successes which should be failures.
[03:59:27] *** Joins: fikran (~fikran@user/fikran)
[03:59:53] <jamwil> InPhase: Yea, all makes sense. I think I knew the answer I just was in a state of denial and/or bargaining
[04:00:42] <han-`> or imagine a test that created an object, if you preserved the state, the test might fail the next time because of a duplicate insert
[04:00:56] *** Joins: jyu_s (~f0fz@122.11.212.232)
[04:01:03] *** Quits: arinov (~arinov@31.142.25.49) (Ping timeout: 264 seconds)
[04:01:17] <han-`> so it's actually probably easier, or you'd have to write a teardown for each test
[04:01:32] <gcbirzan> Or because it's fetching an object that's not supposed to be there.
[04:01:33] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[04:01:49] <jamwil> han-`: Yea, I feel ya. Starting a new project and found myself tearing down all my inserts and realized that was not the way to go.
[04:02:04] <InPhase> jamwil: Note that for such systems you can simplify your life if you make a sufficiently good coverage integration test to replace a larger number of unit tests.  It simplifies the testing process, and can retain the same test robustness, while adding a little additional work tracking down which specific piece is failing when something is broken.  But potentially recent changes would minimize that anyway.
[04:02:37] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Remote host closed the connection)
[04:02:51] *** Quits: emf (~emf@2620:10d:c090:400::5:824c) (Ping timeout: 264 seconds)
[04:02:52] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:03:33] <gcbirzan> Generally, the conventional wisdom says you don't drop the db after every test, but, this is an interesting approach too, if you're using postgresql: https://github.com/allaboutapps/integresql
[04:03:45] <jamwil> Thank-you. I'll still try to keep them fairly elemental but can make good use of pytest session-scoped fixtures here. I'm not going to drop the dp after each little unit test.
[04:04:13] <gcbirzan> Granted, for a lot of things you an get away with running your tests in a transation and just rolling it back
[04:04:23] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[04:04:31] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[04:05:40] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:05:46] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 260 seconds)
[04:06:45] <jamwil> gcbirzan: There is something there. If you ever wanted to run a unit test against production (ducks and covers)
[04:07:01] *** Quits: Andrynet (~Andrynet@190.152.200.211) (Ping timeout: 268 seconds)
[04:07:01] *** Quits: Cl0udNinja (~Accidenta@user/cableninja) (Ping timeout: 268 seconds)
[04:07:08] *** Joins: Wulf (~Wulf@user/wulf)
[04:07:16] <gcbirzan> Who am I to judge :)
[04:07:55] *** Joins: jyu_s (~f0fz@122.11.212.232)
[04:08:34] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 260 seconds)
[04:08:56] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[04:09:02] *** Parts: Deep3D (~Deep3D@user/deep3d) ()
[04:09:07] <jamwil> I guess that's my next question, running the full suite of migrations is for each test session is definitely the right way to go, but each unit test should probably roll itself back so you could hypothetically test against different environments (QA, etc.) where dropping the DB isn't feasible.
[04:10:33] <gcbirzan> I mean, first of all, those aren't really unit tests. Secondly, yes, rolling back after each test is the way to go, if you can get away with it.
[04:11:06] *** Joins: luigibu (~luigibu@80.30.201.209)
[04:11:28] <whatsupdoc> Anyone wanna help with a leetcode puzzle?
[04:11:38] <gcbirzan> However, I'm not a huge fan of running this kind of tests against an environment. You should have tests that run on build or before deploying, then tests that try to interact with the system as a user would, to run against environments.
[04:12:11] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[04:12:15] <gcbirzan> It's not always possible, but I still find it weird.
[04:12:22] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[04:12:27] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[04:12:32] <jamwil> Gotcha, the latter being 'integration tests'?
[04:12:32] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:12:39] <whatsupdoc> https://leetcode.com/problems/maximal-square/
[04:13:00] *** Joins: emf (~emf@2620:10d:c090:400::5:824c)
[04:13:16] *** Quits: rickybob2 (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 245 seconds)
[04:13:23] <whatsupdoc> I think my solution is too slow: https://bpa.st/FS3A
[04:13:35] <whatsupdoc> Triple for loop
[04:13:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[04:13:47] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[04:14:00] *** Quits: LuKaRo_ (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de) (Quit: ZNC 1.8.2 - https://znc.in)
[04:14:19] *** Joins: LuKaRo (~LuKaRo@p5dedaa53.dip0.t-ipconnect.de)
[04:14:35] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[04:16:16] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[04:16:39] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 264 seconds)
[04:16:51] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 256 seconds)
[04:17:23] *** Quits: jcarl43 (~jcarl@node-1w7jr9pj6xbfpbvumr522w6fg.ipv6.telus.net) (Quit: WeeChat 3.3)
[04:18:59] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Quit: Client closed)
[04:19:09] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[04:19:15] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[04:20:23] *** Quits: grimvar (~grimvar@i5C75F574.versanet.de) (Read error: Connection reset by peer)
[04:20:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c8eb-bc7c-9a6e-e932.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[04:20:47] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:21:15] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:22:09] <gcbirzan> whatsupdoc: I think you can do something like calculating from the top left what's the biggest square that has the bottom right corner at the current square, and then you can reuse the previous calculations, so you'd only need to check, um., I think 3 previous positions
[04:22:59] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:23:12] <gcbirzan> all of them 1 smaller, to the left, above, and left up. they overlap, but that's fine, since you're just checking one value
[04:23:36] *** Joins: jyu_s (~f0fz@122.11.212.232)
[04:23:36] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[04:23:49] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[04:25:07] <whatsupdoc> Ugh I give up, I'm just gonna read the solution
[04:25:10] *** Joins: withered_wolf (~withered_@2600:1008:b153:3d22:cd27:9f04:ed7a:ed76)
[04:25:33] *** Joins: grimvar (~grimvar@i5C75F5D4.versanet.de)
[04:25:39] *** Quits: emf (~emf@2620:10d:c090:400::5:824c) (Ping timeout: 264 seconds)
[04:26:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[04:27:06] <gcbirzan> The trick to these (dynamic programming) is to try to see if you can split the problem into simpler problems, then combine the result.
[04:27:31] <whatsupdoc> I haven't seen dynamic programming in 3 years, like since undergrad lol
[04:27:46] <grym> "memoize and recurse"
[04:28:04] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[04:28:55] <ali1234> nobody uses DP in real life because any time you encounter a problem that is solved by it, there's a library that is better than anything you could come up with in under a month, that hasn't had a maintainer since 1997
[04:29:30] *** Quits: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net) (Quit: The Lounge - https://thelounge.chat)
[04:29:51] *** Quits: withered_wolf (~withered_@2600:1008:b153:3d22:cd27:9f04:ed7a:ed76) (Ping timeout: 264 seconds)
[04:30:02] *** Joins: marduk (~marduk@99-122-3-133.lightspeed.nsvltn.sbcglobal.net)
[04:30:50] <gcbirzan> It's quite useful to be able to reduce the problem to something that's been 'solved', though.
[04:31:20] <gcbirzan> However, nowadays you will rarely need to as you can just throw more hardware at the problem :P
[04:31:34] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[04:31:35] *** Quits: defjam (~eb0t@90.197.81.95) (Ping timeout: 256 seconds)
[04:32:23] *** Joins: brabrax (~brabrax@user/brabrax)
[04:32:33] <whatsupdoc> ali1234: somebody has to write it tho
[04:33:14] <grym> ali1234: comes up a lot in bioinformatics, which isn't terribly surprising
[04:33:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:33:40] <whatsupdoc> BLOSUM
[04:33:59] <whatsupdoc> I remember using dynamic programming with that
[04:34:27] <grym> yeah any sequence alignment algorithm is going to be a good fit
[04:34:56] <grym> because, well, you're doing a lot of repeat comparisons, but not many possible ones exist, might as well cache 'em
[04:35:29] <whatsupdoc> memoization makes more sense to me than dynamic programming
[04:35:43] <whatsupdoc> it's always challenging for me to think in the opposite direction
[04:35:45] *** Joins: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net)
[04:35:48] <whatsupdoc> top-down feels easier
[04:35:50] *** Joins: jyu_s (~f0fz@122.11.212.232)
[04:36:04] <ali1234> that's because memoization is clearly defined, where as DP is basically "write an algorithm, but good"
[04:36:08] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[04:36:21] <grym> "memoize and recurse" is how i learned it, anyway
[04:37:08] <whatsupdoc> i mean they both are basically doing the same thing, just dynamic programming slowly builds up the answer
[04:38:32] *** Parts: akk (~akk@75.161.146.115) (+++)
[04:40:05] *** Joins: defjam (~eb0t@90.199.243.141)
[04:40:58] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[04:41:20] *** Joins: cdown_ (~cdown@89.32.122.5)
[04:44:02] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 260 seconds)
[04:44:04] *** cdown_ is now known as cdown
[04:44:10] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5f3-cb73-b3d1-f2ab.res6.spectrum.com)
[04:45:23] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:46:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5f3-cb73-b3d1-f2ab.res6.spectrum.com) (Client Quit)
[04:49:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 264 seconds)
[04:49:10] *** Joins: cheater (~Username@user/cheater)
[04:50:18] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[04:51:19] *** Joins: jyu_s (~f0fz@122.11.212.232)
[04:51:22] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[04:52:51] *** Quits: padraigd (~Thunderbi@c-73-48-132-102.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[04:53:13] *** Joins: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net)
[04:53:49] *** Joins: jinsun (~quassel@user/jinsun)
[04:55:27] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[04:55:55] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:57:35] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[05:02:23] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:992d:a11c:78b:b202) (Ping timeout: 250 seconds)
[05:03:28] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:2920:4094:8818:7c51)
[05:04:03] *** Quits: e2m4n (~ezman@user/e2m4n) (Ping timeout: 264 seconds)
[05:04:04] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:05:47] *** Joins: junebug (~juno@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[05:06:32] *** Joins: jyu_s (~f0fz@122.11.212.232)
[05:06:37] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[05:06:46] *** Quits: junebug (~juno@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[05:08:14] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[05:11:06] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 260 seconds)
[05:11:51] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 265 seconds)
[05:12:57] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[05:15:13] *** Quits: flokuehn (~flokuehn@87.123.247.47) (Ping timeout: 256 seconds)
[05:15:29] *** Quits: cheater (~Username@user/cheater) (Read error: Connection reset by peer)
[05:15:58] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:57f:99d1:5cdc:b71e)
[05:16:53] *** Joins: flokuehn (~flokuehn@87.123.247.67)
[05:17:15] *** Quits: atknight (~someone@23.226.133.88) (Ping timeout: 264 seconds)
[05:17:59] *** Joins: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com)
[05:18:42] *** Quits: Trashlord (~trash@user/trashlord) (Remote host closed the connection)
[05:18:56] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Remote host closed the connection)
[05:19:01] *** Joins: Trashlord (~trash@user/trashlord)
[05:19:02] *** Joins: cheater (~Username@user/cheater)
[05:19:06] *** Joins: jdmark3 (~jdmark@097-102-095-007.res.spectrum.com)
[05:19:58] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 260 seconds)
[05:22:46] *** Quits: jdmark2 (~jdmark@097-102-095-007.res.spectrum.com) (Ping timeout: 260 seconds)
[05:24:15] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:28:39] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 264 seconds)
[05:29:02] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 268 seconds)
[05:30:16] *** Quits: junktext__ (~junktext@gateway/vpn/pia/junktext) (Ping timeout: 268 seconds)
[05:34:05] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:b4bd:ed21:7e07:d0e0)
[05:38:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5f3-cb73-b3d1-f2ab.res6.spectrum.com)
[05:38:34] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[05:39:18] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[05:39:35] *** Joins: rany (~rany@user/rany)
[05:39:58] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[05:39:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[05:44:31] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 245 seconds)
[05:44:56] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[05:45:14] *** Joins: gutt (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net)
[05:46:30] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:46:55] *** Joins: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[05:47:02] *** Parts: iflema (~ian@user/iflema) ()
[05:47:53] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:49:06] *** Quits: qpdb (~qpdb@user/qpdb) (Ping timeout: 245 seconds)
[05:50:40] *** Joins: iflema (~ian@user/iflema)
[05:50:46] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[05:50:51] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 264 seconds)
[05:51:11] *** jdmark3 is now known as jdmark
[05:51:14] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Quit: Leaving)
[05:51:52] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-5c87-20ba-1b06-e1c2.res6.spectrum.com) (Read error: Connection reset by peer)
[05:52:29] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[05:52:36] *** Joins: emf (~emf@2620:10d:c090:400::5:3efc)
[05:53:24] *** Joins: njhanley (~njhanley@static.15.210.217.95.clients.your-server.de)
[05:55:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 264 seconds)
[05:57:01] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:57:02] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[05:57:19] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[05:59:15] *** Quits: emf (~emf@2620:10d:c090:400::5:3efc) (Ping timeout: 264 seconds)
[05:59:44] *** Joins: bpalmer (~user@user/bpalmer)
[06:00:43] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:00:58] *** Joins: dre (~dre@2001:8003:c932:c301:6392:af25:80a5:9caa)
[06:01:05] *** Quits: ckdCreations (~ckdCreati@147.55.133.141) (Ping timeout: 250 seconds)
[06:01:41] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[06:02:16] *** Joins: ckdCreations (~ckdCreati@147.55.133.141)
[06:02:45] *** Joins: qpdb (~qpdb@user/qpdb)
[06:03:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:03:17] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[06:03:23] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[06:03:48] *** Joins: brabrax (~brabrax@user/brabrax)
[06:03:50] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[06:04:14] *** vinleod is now known as vdamewood
[06:04:16] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[06:06:38] *** Quits: mags (~mags@097-090-237-145.res.spectrum.com) (Ping timeout: 260 seconds)
[06:06:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:07:00] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:e81a:fa7:1342:3782)
[06:08:19] *** Joins: mags (~mags@097-090-237-145.res.spectrum.com)
[06:08:48] *** Joins: fikran (~fikran@user/fikran)
[06:08:51] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 264 seconds)
[06:09:06] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 245 seconds)
[06:09:27] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:b4bd:ed21:7e07:d0e0) (Ping timeout: 264 seconds)
[06:09:32] *** Quits: l4yer (~l4yer@195.181.170.210) (Ping timeout: 240 seconds)
[06:09:52] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:10:04] *** Joins: delvian (~delvian@41.13.228.246)
[06:10:30] *** Joins: l4yer (~l4yer@195.181.170.210)
[06:11:13] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[06:13:26] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Ping timeout: 268 seconds)
[06:13:38] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[06:14:24] *** Joins: frost (~frost@user/frost)
[06:15:06] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:15:46] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 245 seconds)
[06:17:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[06:17:33] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[06:17:51] *** Quits: toine (~antoine@2001:41d0:e:41f::1) (Ping timeout: 245 seconds)
[06:17:59] *** Quits: tonitch (~tonitch@user/tonitch) (Ping timeout: 246 seconds)
[06:18:41] *** Quits: j00n (~mario@user/j00n) (Ping timeout: 246 seconds)
[06:18:41] *** Quits: Yorick_ (znc@vps.freegamehosting.eu) (Ping timeout: 246 seconds)
[06:18:46] *** Joins: Yorick- (znc@vps.freegamehosting.eu)
[06:19:23] *** Quits: d3x (michal@bielaw.ski) (Ping timeout: 246 seconds)
[06:19:31] *** Quits: zmotaj (~zmotaj@user/zmotaj) (Ping timeout: 245 seconds)
[06:19:38] *** Joins: d3x (~d3x@bielaw.ski)
[06:19:59] *** Quits: jim (~jim@about/linux/staff/jim) (Remote host closed the connection)
[06:20:00] *** Quits: iwkse (~iwkse@iurit.com) (Ping timeout: 265 seconds)
[06:20:02] *** Joins: tonitch (~tonitch@user/tonitch)
[06:20:03] *** Joins: toine (~antoine@2001:41d0:e:41f::1)
[06:20:21] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:e81a:fa7:1342:3782) (Ping timeout: 245 seconds)
[06:20:43] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:57f:99d1:5cdc:b71e) (Quit: Client closed)
[06:21:15] *** Quits: thunfisch (~thunfisch@user/thunfisch) (Ping timeout: 250 seconds)
[06:21:32] *** Joins: iwkse (~iwkse@iurit.com)
[06:21:47] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[06:22:19] *** Joins: thunfisch (~thunfisch@user/thunfisch)
[06:22:21] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:50e8:62eb:be31:28d8)
[06:23:48] *** Quits: phantomotap (~phantomot@c-71-207-252-96.hsd1.al.comcast.net) (Quit: Leaving)
[06:23:56] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[06:24:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:25:17] *** Joins: zmotaj (~zmotaj@user/zmotaj)
[06:25:38] *** Joins: jim (~jim@about/linux/staff/jim)
[06:25:43] *** Quits: ExpiredKebab (~sgreadly@32.58.252.27.dyn.cust.vf.net.nz) (Quit: Textual IRC Client: www.textualapp.com)
[06:29:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-e5f3-cb73-b3d1-f2ab.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:29:43] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[06:29:52] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[06:30:01] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[06:30:26] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[06:31:47] *** Joins: rany (~rany@user/rany)
[06:33:59] *** Joins: black_13 (~jjosb@72.52.67.242)
[06:34:01] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[06:34:10] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[06:34:20] <black_13> is there a way to parse a dictionary string to a dictionary?
[06:35:05] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[06:37:33] <grym> err
[06:37:37] <grym> a what now?
[06:37:54] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:38:15] *** Quits: rany (~rany@user/rany) (Ping timeout: 276 seconds)
[06:38:56] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[06:39:06] <whatsupdoc> eval()
[06:39:23] <grym> in general, scary
[06:39:39] <grym> ast.literal_eval() is somewhat less scary, but i don't know what 'a dictionary string' is
[06:40:10] <velgin> Can you turn it into json by any chance? Parsing a json string to a dictionary's pretty ok
[06:41:45] <black_13> let me find it
[06:42:39] *** Quits: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net) (Remote host closed the connection)
[06:42:52] *** Joins: parv (~quass@user/parv)
[06:43:07] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[06:43:49] *** Quits: black_13 (~jjosb@72.52.67.242) (Quit: Leaving)
[06:46:45] *** Joins: cholby (~cholby@user/cholby)
[06:47:11] <cholby> i need some help with my python
[06:47:39] <cholby> it's leaking
[06:47:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:50e8:62eb:be31:28d8) (Ping timeout: 245 seconds)
[06:49:49] *** Joins: Vonter (~Vonter@user/vonter)
[06:49:54] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:fd83:28f5:d4ef:37d4)
[06:50:44] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:50:45] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:50:45] *** finn_elija is now known as FinnElija
[06:52:49] *** Joins: rany (~rany@user/rany)
[06:53:17] *** Joins: luva7 (~luva@45.141.152.36)
[06:53:18] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[06:53:23] <SnoopJ> daex, there's always the maybe-kludgey option of making your desired script a subcommand or just an always-available invocation that checks for the extra at runtime and issues an appropriate error if it isn't present
[06:54:19] *** Joins: moose (~moose@user/moose)
[06:56:16] *** Quits: luva (~luva@37.120.197.45) (Ping timeout: 260 seconds)
[06:56:16] *** luva7 is now known as luva
[06:56:34] *** Joins: ano (~ano@user/ano)
[06:56:37] *** Quits: kostkon (~kostkon@2a02:587:a108:5f73:9d4e:600e:327b:ee4a) (Ping timeout: 268 seconds)
[06:57:31] *** Joins: saribro (~swinnenb@user/swinnenb)
[06:58:03] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 264 seconds)
[06:58:24] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:59:32] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[07:00:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[07:00:25] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:da6:ed1e:9ca5:1d2)
[07:00:27] <cholby> then I'll get a sex change so i don't have a python
[07:00:55] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 268 seconds)
[07:01:43] *** Joins: arinov (~arinov@213.194.126.155)
[07:02:18] *** Joins: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net)
[07:02:28] <SnoopJ> cholby, this channel is for discussion around the Python programming language. You might be looking for a different channel.
[07:02:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:fd83:28f5:d4ef:37d4) (Ping timeout: 264 seconds)
[07:03:22] <cholby> i thought this channel was for both
[07:03:23] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[07:04:27] <AhmedAmerican> i do have a text file which include the following --> https://bpa.st/6OFA i believe this is an array by different programing language , is there a lib to read such data type?
[07:06:50] *** Quits: p-i-_ (~Ohmu@223.206.149.105) (Remote host closed the connection)
[07:07:49] <SnoopJ> AhmedAmerican, the format is not familiar to me, but you could parse this line-by-line relatively easily if this data is representative, partition()ing each line on '=>' and stripping away the []s
[07:10:12] *** Quits: pankid (~quassel@pankid.club) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:10:26] *** Joins: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2900:5624:d5f:15dc)
[07:10:29] *** Joins: pankid (~quassel@pankid.club)
[07:13:03] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:da6:ed1e:9ca5:1d2) (Ping timeout: 264 seconds)
[07:13:44] <bpalmer> That appears similar to php's print_r output ("print readable") on an array, so you might look there to see if there's meaningful specs or to get test cases.
[07:14:44] <cholby> ALLAAAAAH ACKBAR
[07:15:29] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[07:16:17] *** Joins: jinsun__ (~quassel@user/jinsun)
[07:16:52] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[07:17:01] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 245 seconds)
[07:17:51] *** Quits: y1n (~y1n@178.115.71.254.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[07:19:25] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[07:21:46] *** Joins: mimmy (~mimmy@2607:fea8:6e0:7f90:88c3:30a7:232e:140)
[07:22:57] *** Joins: jim (~jim@about/linux/staff/jim)
[07:23:51] *** Quits: mimmy_ (~mimmy@2607:fea8:6e0:7f90:2900:5624:d5f:15dc) (Ping timeout: 264 seconds)
[07:24:27] *** Quits: cholby (~cholby@user/cholby) (Ping timeout: 264 seconds)
[07:27:26] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[07:30:08] *** Quits: mimmy (~mimmy@2607:fea8:6e0:7f90:88c3:30a7:232e:140) (Quit: WeeChat 3.3)
[07:31:31] *** Joins: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net)
[07:31:33] *** Joins: rickygee (~ricky@236-53-74-65.gci.net)
[07:32:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[07:32:44] <maxtim> I sometimes open up a terminal and run $python3 to quickly test out some function ideas. Is there a way to quickly edit a function or a block of code without just mindlessly pushing up?
[07:32:47] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:35:15] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e58c:fb6a:2920:4094:8818:7c51) (Ping timeout: 264 seconds)
[07:35:38] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[07:35:40] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c) (Quit: smeeagle)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] <BrenBarn> you might want to check out alternative shells like ipython
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:40] <BrenBarn> or GUI tools
[07:37:13] *** Joins: nicholaus04 (~nicholaus@172.58.75.57)
[07:39:35] <maxtim> eh... I could just write a quick .py....
[07:39:40] *** Quits: dcaro_away (~dcaro@user/dcaro) (Ping timeout: 260 seconds)
[07:39:43] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:3039:a900:628d:f875) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:39:43] *** Quits: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 256 seconds)
[07:39:43] *** Quits: kurfen (~kurfen@45.152.181.20) (Ping timeout: 256 seconds)
[07:39:45] <maxtim> all that's too much effort
[07:40:23] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 268 seconds)
[07:41:34] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[07:42:13] *** Joins: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d)
[07:42:32] <parv> maxtim, Add an alias quippy='vim quick.py'?
[07:42:45] <SnoopJ> and/or perhaps running the sample *from* your editor
[07:42:48] <maxtim> word
[07:42:52] *** Quits: ckdCreations (~ckdCreati@147.55.133.141) (Read error: Connection reset by peer)
[07:43:05] <maxtim> i like that alias idea
[07:43:15] *** Joins: ckdCreations (~ckdCreati@147.55.133.133)
[07:43:20] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[07:43:36] <parv> ... wait make that a function: quippy() { vim /path/quick.py ; /path/quick.py; }
[07:46:33] *** Joins: Batzy (~quassel@user/batzy)
[07:47:04] <parv> ... once more: quippy() { quip="${1:-/tmp/quip.py}" ; vim $quip; /path/python $quip; }
[07:47:04] *** Parts: rickygee (~ricky@236-53-74-65.gci.net) ()
[07:47:26] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:48:32] *** Quits: Batzy_ (~quassel@user/batzy) (Ping timeout: 260 seconds)
[07:50:18] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[07:50:24] <maxtim> sold
[07:50:38] *** Joins: atknight (~someone@23.226.133.87)
[07:50:47] <SnoopJ> if you `:set makeprg=python3` then you can `:make %` to run the current buffer in python3 without leaving vim, too :)
[07:50:52] *** Joins: TuckerBrandy1997 (~TuckerBra@209.161.248.138)
[07:51:17] <SnoopJ> these are in the direction of "customize it until you're happy"
[07:51:22] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[07:51:39] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:51:53] <maxtim> oh that's cool
[07:51:54] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:52:05] <bpalmer> maxtim: if you're more of an emacs person, it's easy to pop open a REPL buffer
[07:52:11] <SnoopJ> or you could do `!python3 %` without setting it
[07:52:23] <SnoopJ> but % only works if the buffer has a name I think?
[07:52:27] <maxtim> i don't think i have the mental fortitude for emacs
[07:52:30] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:52:40] <bpalmer> e.g., M-x run-python RET or C-c C-p after you've opened a .py file
[07:53:11] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:53:18] * SnoopJ usually just edits a scratch file
[07:53:19] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:54:13] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:54:26] <maxtim> "or you could do `!python3 %` without setting it" Works
[07:55:25] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:55:51] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:56:14] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:56:22] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Client Quit)
[07:57:50] <parv> Vim regexen are atrocious to type (very-magic option has its own downsides) & to remember advanced syntax as I don't use them often during editing. So searching for text on terminal piped to less(1) is far more comfortable.
[07:57:53] <BrenBarn> you could also use the amazing Pydeal :-)
[07:57:57] <BrenBarn> that's a GUI though
[08:00:01] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[08:00:46] *** Quits: sreve (~quassel@p4ff44975.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[08:00:58] *** Joins: sreve (~quassel@p4ff44a93.dip0.t-ipconnect.de)
[08:01:03] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[08:01:42] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:02:15] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[08:04:58] *** Joins: jim (~jim@about/linux/staff/jim)
[08:06:55] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[08:07:39] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[08:08:37] <NeilRG> how do I debug a segmentation fault in my Python program?
[08:08:50] <NeilRG> is there a way to have Python spit out the last line before the segault?
[08:09:29] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[08:10:09] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:10:09] <NeilRG> ah nm
[08:10:18] <demsh> run under debugger
[08:11:49] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[08:12:59] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[08:14:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:15:38] *** Joins: Batzy_ (~quassel@user/batzy)
[08:16:20] *** Joins: jyu_s (~f0fz@122.11.212.232)
[08:16:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[08:17:51] *** Quits: Batzy (~quassel@user/batzy) (Ping timeout: 264 seconds)
[08:18:10] *** Joins: fikran (~fikran@user/fikran)
[08:18:27] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[08:18:47] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[08:18:57] <SnoopJ> yep, running the interpreter in a debugger is what you want, possibly with a debug build. gdb is handy
[08:20:06] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:21:36] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 276 seconds)
[08:22:49] *** Joins: teut (~teut@122.161.16.132)
[08:22:49] *** Joins: Atque (~Atque@user/atque)
[08:22:59] *** Joins: djapo (~archangel@user/djapo)
[08:23:54] *** Quits: greentree (~greentree@pool-108-46-153-220.nycmny.fios.verizon.net) (Quit: greentree)
[08:24:14] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:24:27] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 264 seconds)
[08:27:27] *** Quits: jbox (~jbox@user/jbox) (Ping timeout: 264 seconds)
[08:27:29] *** Joins: lukeaar (~lukeaar@45.132.224.31)
[08:29:24] *** Quits: atknight (~someone@23.226.133.87) (Quit: Leaving)
[08:30:39] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[08:30:45] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[08:31:03] *** Quits: ericlee (~ericlee@2601:647:4681:3420::3) (Ping timeout: 264 seconds)
[08:31:20] *** Joins: djhankb (~djhankb@208.113.164.68)
[08:31:23] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[08:32:01] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Client Quit)
[08:32:53] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[08:33:17] *** Joins: kdc (~kdc@196.211.197.159)
[08:33:19] *** Quits: sgn (~sgn@user/sgn) (Read error: Connection reset by peer)
[08:33:36] *** Joins: sgn (~sgn@user/sgn)
[08:33:58] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Client Quit)
[08:35:18] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[08:36:46] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[08:37:07] *** Joins: jyu_s (~f0fz@122.11.212.232)
[08:38:16] *** Joins: ano (~ano@user/ano)
[08:39:16] *** Quits: arinov (~arinov@213.194.126.155) (Read error: Connection reset by peer)
[08:39:37] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[08:39:40] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[08:39:54] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[08:41:26] *** Joins: ano (~ano@user/ano)
[08:43:52] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[08:43:53] *** Joins: white_pie (~white_sha@user/white-shadow/x-1132694)
[08:43:54] *** Joins: white_snack (~white_sha@user/white-shadow/x-1132694)
[08:43:59] *** Quits: white_snack (~white_sha@user/white-shadow/x-1132694) (Client Quit)
[08:44:04] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Client Quit)
[08:44:10] *** Quits: white_pie (~white_sha@user/white-shadow/x-1132694) (Client Quit)
[08:44:31] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[08:45:36] *** Joins: arinov (~arinov@213.194.126.155)
[08:48:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[08:49:58] *** Quits: lukeaar (~lukeaar@45.132.224.31) (Ping timeout: 260 seconds)
[08:50:55] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[08:53:08] *** Joins: jinsun (~quassel@user/jinsun)
[08:53:51] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 264 seconds)
[08:53:57] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Ping timeout: 256 seconds)
[08:56:51] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[08:58:43] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:59:04] *** Joins: zebrag (~chris@user/zebrag)
[09:01:42] *** Joins: KombuchaKip (~kip@192.252.230.5)
[09:01:50] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[09:03:42] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[09:04:54] *** Joins: shangxiao (~davids@124.187.230.212)
[09:04:56] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[09:05:43] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[09:05:48] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (Quit: WeeChat 3.3)
[09:08:44] *** Joins: maryo (~Maryo@user/maryo)
[09:09:00] <NeilRG> can someone suggest how I can use a context manager to allocate resources in a thread?
[09:09:09] <NeilRG> https://bpa.st/UZVQ
[09:09:16] <NeilRG> pylint seems to hate this
[09:10:12] <iNeedKoffee> No, Python will not throw a segfault, it will be C types or another lib that you are linking to
[09:13:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[09:13:29] *** Quits: nomic (~nomic@185.217.117.164) (Quit: Leaving)
[09:16:50] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[09:17:51] *** Quits: nicholaus04 (~nicholaus@172.58.75.57) (Ping timeout: 245 seconds)
[09:17:56] *** Joins: manti7 (~manti7@176.10.104.94)
[09:18:02] *** Joins: jyu_s (~f0fz@122.11.212.232)
[09:18:44] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:18:54] *** Joins: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[09:19:22] *** Joins: nicholaus04 (~nicholaus@172.58.75.57)
[09:23:02] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 240 seconds)
[09:25:03] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Ping timeout: 264 seconds)
[09:26:54] *** Joins: jbox (~jbox@user/jbox)
[09:27:05] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:b138:4c3b:22dc:57b) (Read error: Connection reset by peer)
[09:28:37] *** Quits: jyu_s (~f0fz@122.11.212.232) (Read error: Connection reset by peer)
[09:28:59] *** Joins: dcaro (~dcaro@user/dcaro)
[09:31:23] *** Quits: shangxiao (~davids@124.187.230.212) (Ping timeout: 268 seconds)
[09:31:51] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:31:55] *** Joins: stranac (~stranac@195.29.239.126)
[09:32:59] *** Joins: shangxiao (~davids@124.187.230.212)
[09:34:03] *** Quits: maxtim (~maxtim__@c-71-228-128-153.hsd1.ga.comcast.net) (Quit: Leaving)
[09:34:21] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:35:46] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 245 seconds)
[09:37:15] *** Joins: vit (~vit@chello085216193138.chello.sk)
[09:37:51] *** Joins: dcaro (~dcaro@user/dcaro)
[09:39:27] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[09:42:13] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[09:43:06] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:46:39] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 264 seconds)
[09:47:21] *** Joins: jim (~jim@about/linux/staff/jim)
[09:55:36] *** Joins: jyu_s (~f0fz@122.11.212.235)
[09:57:03] *** Joins: toolbox (~toolbox@h213-21-123-59.cust.a3fiber.se)
[09:59:04] *** Quits: NeilRG (~NeilRG@96-127-194-85.qc.cable.ebox.net) (Remote host closed the connection)
[09:59:20] *** Quits: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[10:02:05] *** Joins: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[10:02:52] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:03:04] <TuckerBrandy1997> if I want to assign a collection to a variable in pymongo
[10:03:22] <TuckerBrandy1997> must I do this? allRecords = db.find()
[10:03:42] <TuckerBrandy1997> or is there another way to do it?
[10:04:06] *** Quits: toolbox (~toolbox@h213-21-123-59.cust.a3fiber.se) (Ping timeout: 245 seconds)
[10:06:16] *** Quits: jyu_s (~f0fz@122.11.212.235) (Read error: Connection reset by peer)
[10:06:27] *** Joins: jyu_s (~f0fz@218.212.3.76)
[10:07:00] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:b659:bf1e:33ce:c2ee)
[10:07:25] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:07:46] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[10:08:36] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:11:45] *** Joins: mixfix41 (~homefame@user/mixfix41)
[10:12:03] *** Joins: jbox (~jbox@user/jbox)
[10:13:03] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 264 seconds)
[10:13:14] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:13:33] *** Quits: TuckerBrandy1997 (~TuckerBra@209.161.248.138) ()
[10:13:59] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:14:08] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[10:16:35] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:16:39] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 264 seconds)
[10:17:27] *** Joins: emf (~emf@163.114.132.7)
[10:18:05] *** Joins: Mulugruntz (~Mulugrunt@212.102.50.99)
[10:18:29] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:23:16] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[10:24:42] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 260 seconds)
[10:25:31] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[10:25:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[10:26:24] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 276 seconds)
[10:26:26] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[10:26:49] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c)
[10:27:31] *** Joins: fikran (~fikran@user/fikran)
[10:30:24] <dre> regarding short-circuiting in if statements, which order does it have to be in, left-to-right?
[10:30:44] <dre> like if I do "if not simple_bool_value and long_complicated_query: "
[10:32:02] *** Joins: mei (~mei@user/mei)
[10:32:09] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[10:32:40] *** Quits: mei (~mei@user/mei) (Client Quit)
[10:32:40] <hexnewbie> dre: *Expressions* generally evaluate left-to-right. There was (is?) some exceptions for some literals, but binary operators, especially the short-circuiting ones, do evaluate left-to-right in all non-esoteric languages
[10:32:40] <parv> Seemingly ambiguous; would rather see "(not A) and B" or "not ( A and B )".
[10:33:16] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:34:01] <dre> hexnewbie, ye cheers, I thought as much
[10:34:17] <hexnewbie> The power operator is evaluated right-to-left but it is not short-circuiting. There was something with dictionary key-values, but it's not to be relied on, so let's ignore it
[10:34:25] <dre> parv, ye kind-of. but I'll accept it.
[10:34:36] *** Joins: mei (~mei@user/mei)
[10:35:22] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[10:35:56] <dre> hexnewbie, "something with key-values"  --- I suppose if you were to do my_dict.get('somekey', big_query_to_do() )  -- it would probably eval the query first before checking for the dict.get right?
[10:37:02] <dre> makes sense to me anyway
[10:37:16] <hexnewbie> dre: No. That would be impossible. You cannot evaluate a part of an expression before you've evaluated its arguments
[10:37:20] <hexnewbie> operands?
[10:37:34] *** Joins: Vonter (~Vonter@user/vonter)
[10:37:46] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[10:37:46] <dre> yeah that's what I meant.
[10:37:50] <hexnewbie> In 5 + (3 * 4), you cannot compute the addition before you've computed the product
[10:37:58] <dre> yes
[10:38:26] <dre> so in my example, it will do the big query, and then discard it if the dict had 'somekey'
[10:38:57] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Quit: ZNC - https://znc.in)
[10:39:17] <dre> it would be better to do " dict.get('k', None) or big_query() " -- as long as the dict value isn't a False-y value.
[10:39:24] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[10:39:34] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[10:39:44] <leduyquang753> If `A` is `False`, `A and B` returns immediately as `False`.
[10:40:06] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 260 seconds)
[10:40:09] <hexnewbie> And no, I didn't mean that. I meant that in very old Python versions, in the {f(k): f(v)} literal, f(v) would be evaluated before f(k), but that has since changed
[10:40:40] <dre> oh ok
[10:40:59] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Remote host closed the connection)
[10:41:05] <hexnewbie> dre: That: https://bpa.st/MXWQ
[10:41:36] <dre> hexnewbie, neat, didn't know that.
[10:41:57] <dre> I'd say "good to know" but I'm on a mission to remove every py2 code I come across.
[10:43:16] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 245 seconds)
[10:43:32] *** Joins: logithack (~logithack@p200300cfbf3b2700f0d5250f219bed4b.dip0.t-ipconnect.de)
[10:44:26] *** Quits: teut (~teut@122.161.16.132) (Ping timeout: 256 seconds)
[10:44:31] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[10:45:13] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[10:45:20] *** Joins: dav1d (~dav1d@user/dav1d)
[10:46:53] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[10:47:12] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[10:47:42] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr)
[10:48:18] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[10:49:21] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[10:50:08] *** Joins: upsala (~zcb@185.213.155.232)
[10:50:23] *** Quits: logithack (~logithack@p200300cfbf3b2700f0d5250f219bed4b.dip0.t-ipconnect.de) (Quit: Leaving)
[10:51:11] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[10:52:01] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[10:53:39] <pystardust> I have a enum representing colors, In my editor (lsp: pyright), when I do Color "dot", I get various suggestions like mro register and then in the end I can see my colors GREEN BLUE etc, is there a way to make only the colors show up or atleast the colors show up in the top
[10:54:22] <pystardust> It seems to be alphabetic order I guess, and since the colors are caps they are show in the end
[10:56:09] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[10:56:10] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[10:56:27] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:57:16] *** Joins: seednode (~seednode@user/seednode)
[10:57:50] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 260 seconds)
[10:58:01] *** Joins: gusto (~Augustus@109.255.100.54)
[10:58:05] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[10:58:51] *** Quits: delvian (~delvian@41.13.228.246) (Read error: Connection reset by peer)
[10:59:15] *** Joins: delvian (~delvian@41.13.228.246)
[10:59:17] *** Joins: jyu_s (~f0fz@218.212.3.76)
[11:00:41] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[11:01:32] <jinsun> I just type G or B or R so it filters out the rest of them
[11:02:09] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr)
[11:02:13] <jinsun> at least in vscode it is not necessarily alphabetical, it is some random "AI" ordering, so the order changes as you use the class more in your code
[11:04:14] *** Joins: tobybl (~tobybl@213.31.134.21)
[11:04:14] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:05:35] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:05:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:09:32] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[11:09:33] <dre> pystardust, you can change the ordering afaik
[11:09:37] <dre> gimme a sec
[11:09:41] *** Joins: fuz (~fuz@user/fuz)
[11:10:24] <pystardust> sorry, this might not be a python question but a text editor thing
[11:10:50] <dre> oh wow I thought this was #neovim.
[11:11:01] <dre> nvim thetn
[11:11:50] *** Joins: imp (~imp@192-141-191-227.alternativaip.net.br)
[11:11:56] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:13:33] *** Joins: mrwick (~mrwick@user/mrwick)
[11:14:47] *** Joins: jim (~jim@about/linux/staff/jim)
[11:14:56] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[11:16:09] *** Joins: kosh (~kosh@user/kosh)
[11:17:25] *** Joins: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr)
[11:19:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[11:19:50] *** Joins: usr12368 (~usr123@125.62.119.248)
[11:20:00] *** usr12368 is now known as usr123
[11:20:27] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Remote host closed the connection)
[11:21:03] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[11:21:38] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 260 seconds)
[11:22:14] <usr123> Does anyone here have experience with Apache Thrift? This is the library we're using at work https://thriftrw.readthedocs.io/en/latest/api.html#module-thriftrw.spec and I can't seem to figure out this error : AttributeError: type object 'type' has no attribute 'type_spec' occurring in the library at
[11:22:15] <usr123> https://github.com/thriftrw/thriftrw-python/blob/master/thriftrw/spec/common.pyx#L74
[11:22:16] *** Joins: palasso (~palasso@user/palasso)
[11:25:03] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 264 seconds)
[11:25:34] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[11:26:15] *** Joins: jay-m126 (~jay-m@129.0.76.216)
[11:26:20] *** Joins: jay-m126_ (~jay-m@129.0.76.216)
[11:29:10] *** Quits: Mulugruntz (~Mulugrunt@212.102.50.99) (Ping timeout: 268 seconds)
[11:29:20] *** Joins: rendar (~rendar@user/rendar)
[11:31:39] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Ping timeout: 264 seconds)
[11:33:11] *** Joins: grooverman_ (~grooverma@177.102.117.95)
[11:34:13] *** Joins: dbristow_ (~dbristow@user/dbristow)
[11:34:19] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[11:34:35] *** Quits: renrelkha (~renrelkha@user/renrelkha) (Ping timeout: 264 seconds)
[11:34:59] *** Quits: Phase (~phase@user/phase) (Ping timeout: 250 seconds)
[11:34:59] *** Quits: ttys000 (~ttys000@user/ttys000) (Ping timeout: 250 seconds)
[11:35:10] *** Quits: grooverman (~grooverma@177.95.12.14) (Ping timeout: 260 seconds)
[11:35:15] *** Quits: jyu_s (~f0fz@218.212.3.76) (Remote host closed the connection)
[11:35:25] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[11:35:25] *** Quits: prime (~prime@user/prime) (Ping timeout: 250 seconds)
[11:35:31] *** Joins: jyu_s (~f0fz@218.212.3.76)
[11:35:47] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (Ping timeout: 264 seconds)
[11:35:47] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 264 seconds)
[11:35:47] *** Quits: vince (~vince@75.127.14.76) (Ping timeout: 264 seconds)
[11:35:48] *** Joins: llua` (~llua@zsh/developer/llua)
[11:35:51] *** Quits: apocalyptech (~apocalypt@wilug/apocalyptech) (Ping timeout: 250 seconds)
[11:35:51] *** Quits: InPhase (~InPhase@openscad/inphase) (Ping timeout: 250 seconds)
[11:36:07] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[11:36:17] *** Quits: KSaunderson (~user@142.93.152.208) (Ping timeout: 250 seconds)
[11:36:17] *** Quits: mastardet (~mastardet@user/mastardet) (Ping timeout: 250 seconds)
[11:36:17] *** Quits: mgocobachi (~m@ancrae.com) (Ping timeout: 250 seconds)
[11:36:23] *** Quits: rya (~ry@user/rya) (Ping timeout: 264 seconds)
[11:36:23] *** Quits: llua (~llua@zsh/developer/llua) (Ping timeout: 264 seconds)
[11:36:23] *** Quits: joshbaptiste (~josh@192.210.151.34) (Ping timeout: 264 seconds)
[11:36:23] *** Quits: Ara (~Ara@user/ara) (Ping timeout: 264 seconds)
[11:36:25] *** Joins: migui (~m@ancrae.com)
[11:36:43] *** Quits: dbristow (~dbristow@user/dbristow) (Ping timeout: 250 seconds)
[11:36:49] *** migui is now known as mgocobachi
[11:37:46] *** Joins: Ara (~Ara@user/ara)
[11:37:49] *** Joins: InPhase (~InPhase@openscad/inphase)
[11:37:52] *** Joins: apocalyptech (~apocalypt@wilug/apocalyptech)
[11:37:56] *** Joins: KSaunderson (~user@142.93.152.208)
[11:38:09] *** Joins: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5)
[11:38:13] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[11:39:00] *** Joins: Phase (~phase@user/phase)
[11:39:44] *** Joins: prime (~prime@user/prime)
[11:40:25] *** Joins: mastardet (~mastardet@user/mastardet)
[11:40:46] *** Joins: ExeciN (~ExeciN@user/nicexe)
[11:41:08] *** Quits: usr123 (~usr123@125.62.119.248) (Quit: Client closed)
[11:42:15] *** Quits: sgn (~sgn@user/sgn) (Ping timeout: 256 seconds)
[11:42:49] *** Quits: jay-m126_ (~jay-m@129.0.76.216) (Ping timeout: 256 seconds)
[11:42:49] *** Quits: jay-m126 (~jay-m@129.0.76.216) (Ping timeout: 256 seconds)
[11:43:37] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:43:41] *** Joins: brookesy66 (~will@61.68.172.13)
[11:44:24] *** Joins: sgn (~sgn@user/sgn)
[11:44:46] *** Joins: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126)
[11:45:00] *** Joins: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126)
[11:46:06] *** Joins: sazawal (~sazawal@122.161.81.235)
[11:46:32] *** Joins: chele (~chele@user/chele)
[11:46:43] *** Joins: ammarsalmi (~ammarsalm@154.121.67.164)
[11:46:53] *** Joins: luigibu (~luigi@80.30.201.209)
[11:47:26] *** Quits: nicholaus04 (~nicholaus@172.58.75.57) (Ping timeout: 245 seconds)
[11:48:15] *** Joins: jiffe (~jiffe@mail.nsab.us)
[11:48:23] *** Joins: nicholaus04 (~nicholaus@172.58.75.57)
[11:50:19] <whatsupdoc> Is there a python function that returns a modified list with a certain element removed from the list?
[11:50:45] <whatsupdoc> Kinda like remove()?
[11:50:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:50:53] *** Joins: vukky (~vukky@wikipedia/vukky)
[11:51:22] <rindolf> whatsupdoc: list comprehension?
[11:51:29] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[11:51:46] <whatsupdoc> oh ok
[11:51:50] <shangxiao> yeah was going to suggest just a comprehension
[11:51:51] <whatsupdoc> thanks galdalf
[11:52:14] <shangxiao> [el for el in some_list if el != thing]
[11:53:37] *** Joins: CyDefect (~troll@213.55.226.140)
[11:53:48] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c) (Quit: smeeagle)
[11:53:50] *** Quits: dre (~dre@2001:8003:c932:c301:6392:af25:80a5:9caa) (Ping timeout: 268 seconds)
[11:55:03] *** Quits: Atlas667_ (~Atlas667@94.198.42.94) (Ping timeout: 264 seconds)
[11:55:50] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[11:55:55] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[11:57:00] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:57:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:58:56] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[12:00:03] *** gitesh is now known as g1t3sh
[12:00:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:01:15] <rindolf> whatsupdoc: you're welcome
[12:01:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:01:57] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[12:02:05] *** Joins: kevr` (~kevr@user/kevr)
[12:02:12] *** g1t3sh is now known as gitesh
[12:02:40] <rindolf> there is https://docs.python.org/3/library/functions.html#enumerate too
[12:03:42] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 268 seconds)
[12:03:46] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:03:54] *** Quits: kevr (~kevr@user/kevr) (Ping timeout: 276 seconds)
[12:04:21] *** Quits: gitly (~gitly@85.255.235.212) (Ping timeout: 256 seconds)
[12:04:23] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[12:04:39] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[12:05:17] *** Joins: toolbox (~toolbox@h213-21-123-59.cust.a3fiber.se)
[12:05:33] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[12:05:43] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[12:06:22] *** Joins: gitly (~gitly@148.252.129.73)
[12:08:31] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:09:25] *** Joins: Enitin (~Enitin@82.102.22.86)
[12:13:23] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[12:13:33] *** Quits: jyu_s (~f0fz@218.212.3.76) (Remote host closed the connection)
[12:13:50] *** Joins: jyu_s (~f0fz@218.212.3.76)
[12:14:05] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[12:14:08] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:20:04] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:20:23] *** Joins: usr123 (~usr123@27.255.251.100)
[12:20:43] *** Quits: dcaro (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[12:21:11] *** Quits: bloody (~bloody@user/bloody) (Quit: Always focus on how far you've come, rather than how far you have left to go)
[12:21:39] <mrwick> there is also list.pop([i]), that is in place
[12:21:41] <mrwick> https://docs.python.org/3/tutorial/datastructures.html#more-on-lists
[12:22:35] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[12:23:26] *** Quits: nicholaus04 (~nicholaus@172.58.75.57) (Ping timeout: 268 seconds)
[12:23:43] *** Joins: dcaro (~dcaro@user/dcaro)
[12:23:46] *** Joins: BravoSlo (BravoSlo@gateway/vpn/airvpn/bravoslo)
[12:24:05] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:24:21] *** Joins: nicholaus04 (~nicholaus@172.58.75.57)
[12:25:02] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:25:39] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:25:45] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:26:24] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:27:26] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 260 seconds)
[12:28:55] *** Joins: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de)
[12:29:28] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[12:29:45] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[12:30:06] *** Quits: enick_741 (~dngray@user/dngray) (Quit: You have been kicked for being idle)
[12:31:09] *** Quits: naranja (~orange@user/orangeboxcutter) (Remote host closed the connection)
[12:31:28] *** Joins: naranja (~orange@user/orangeboxcutter)
[12:31:45] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[12:33:02] *** Joins: JaredCE (~JaredCE@93.115.192.243)
[12:33:04] *** Joins: Falc (~Falc@2a02:2788:1008:562:f43c:fefa:c621:89c4)
[12:34:07] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi)
[12:34:46] *** Quits: Falc (~Falc@2a02:2788:1008:562:f43c:fefa:c621:89c4) (Client Quit)
[12:34:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[12:35:23] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[12:35:50] *** Quits: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net) (Ping timeout: 260 seconds)
[12:36:11] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:36:36] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:36:43] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:36:48] *** Joins: fbiagent__ (~fbiagent@user/fbiagent)
[12:36:49] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Read error: Connection reset by peer)
[12:36:52] *** Joins: fikran (~fikran@user/fikran)
[12:39:34] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[12:40:03] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[12:41:11] *** Joins: jyu_s (~f0fz@218.212.3.76)
[12:41:54] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 260 seconds)
[12:42:01] *** Joins: raxor2k (~raxor2k@78.158.245.248)
[12:43:07] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[12:43:50] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[12:44:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[12:44:26] <raxor2k> could someone explain what i am doing wrong in line 59-60? i must me blind or something.. https://bpa.st/VR4A
[12:45:15] <supakeen> You can't await at the top level.
[12:45:39] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[12:46:23] <supakeen> There is also no reason to put such a coroutine in an executor (in fact I don't believe you can), you can 'just' use `asyncio.create_task`.
[12:47:05] <raxor2k> ok, the whole point is that it can ping the db without blocking other loops
[12:47:13] *** Joins: Lorthirk (~lorthirk@51.154.69.139)
[12:47:28] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:47:42] <supakeen> You have an await in there, it won't block during that await.
[12:47:45] <raxor2k> somebody here yesterday said "loop.run_in_executor" can prevent the blocking from happening
[12:48:31] <supakeen> It can, but you already have a coroutine that doesn't block.
[12:48:37] <supakeen> So there's absolutely no need for it.
[12:48:49] <raxor2k> ok so for you "asyncio.create_task" is the best option?
[12:49:24] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[12:49:45] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[12:50:02] <supakeen> Yes, you schedule the coroutine with that. As for *when* you schedule I don't know how that works in FastAPI.
[12:50:42] *** Quits: maryo (~Maryo@user/maryo) (Quit: Leaving)
[12:51:01] <raxor2k> ok because i tried your example, other loops/tasks still keeps hanging when i ping the the with "create_task" ..
[12:51:01] *** Joins: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7)
[12:51:21] <raxor2k> i might go to a fastAPI forum to ask
[12:52:19] <supakeen> Sure, they probably know more about the FastAPI-specifics but there should be no 'hanging' on lines that have 'await' on them.
[12:52:55] *** Joins: mavhq (~quassel@mapp-14-b2-v4wan-161519-cust401.vm15.cable.virginm.net)
[12:53:04] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:53:30] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[12:54:15] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[12:54:34] *** Joins: ExeciN (~ExeciN@user/nicexe)
[12:54:46] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[12:55:26] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 260 seconds)
[12:55:32] <raxor2k> supakeen: maybe it shouldnt,  but thats whats happening :(
[12:55:57] <supakeen> I'd like to see a bit cleaner example and to know how you are determining if things are 'hanging'.
[12:56:35] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[12:56:43] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:56:57] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[12:57:27] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[12:57:34] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:58:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:59:05] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:59:18] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[12:59:31] *** Quits: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 245 seconds)
[12:59:31] *** Quits: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 245 seconds)
[12:59:44] *** Quits: brookesy66 (~will@61.68.172.13) (Quit: WeeChat 3.3)
[12:59:53] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[13:00:08] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[13:00:50] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:00:55] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:01:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[13:01:01] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[13:01:41] *** Joins: onichomp (~onichomp@2806:264:4404:8309:f8d4:28e6:23ef:66aa)
[13:01:46] *** Quits: raxor2k (~raxor2k@78.158.245.248) (Remote host closed the connection)
[13:01:52] *** Joins: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126)
[13:02:04] *** Joins: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126)
[13:02:31] *** Joins: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[13:03:55] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[13:04:01] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[13:04:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[13:04:30] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:05:22] *** Joins: iflema (~ian@user/iflema)
[13:05:34] *** Joins: kosh_ (~kosh@user/kosh)
[13:06:00] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[13:06:18] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:06:27] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:06:47] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:07:01] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 245 seconds)
[13:07:10] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:07:34] *** kosh_ is now known as kosh
[13:08:11] *** Joins: drogas (~drogas@jump2.jet.uk)
[13:08:43] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:15:58] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[13:16:18] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[13:16:58] *** Joins: ExeciN (~ExeciN@user/nicexe)
[13:17:44] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[13:18:43] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Remote host closed the connection)
[13:19:44] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[13:19:59] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Read error: Connection reset by peer)
[13:20:35] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[13:21:24] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:23:59] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:24:00] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[13:24:13] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:3039:a900:628d:f875)
[13:26:23] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[13:27:07] *** Quits: usr123 (~usr123@27.255.251.100) (Quit: Client closed)
[13:27:10] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[13:27:23] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[13:29:19] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:29:50] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:30:04] *** Joins: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr)
[13:30:24] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:31:34] *** Joins: shad (~shad@user/shad)
[13:31:39] <p-i-> I'm hoping to deallocate a resource upon program termination. but MyClass __del__ doesn't fire.
[13:32:08] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:32:34] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:33:29] <jinsun> you should use context managers, and do the deallocation in the `__exit__`
[13:36:54] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Remote host closed the connection)
[13:37:23] *** Quits: delvian (~delvian@41.13.228.246) (Ping timeout: 250 seconds)
[13:37:26] *** Joins: jyu_s (~f0fz@218.212.3.76)
[13:37:27] *** Quits: jyu_s (~f0fz@218.212.3.76) (Read error: Connection reset by peer)
[13:37:27] *** Quits: onichomp (~onichomp@2806:264:4404:8309:f8d4:28e6:23ef:66aa) (Ping timeout: 268 seconds)
[13:37:53] *** Joins: delvian (~delvian@41.13.228.246)
[13:38:41] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[13:40:03] *** Quits: gitly (~gitly@148.252.129.73) (Ping timeout: 264 seconds)
[13:41:00] *** Joins: jyu_s (~f0fz@122.11.212.238)
[13:41:11] *** Quits: givemeyourpies (givemeyour@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:41:17] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 250 seconds)
[13:41:39] *** Joins: gitly (~gitly@148.252.129.73)
[13:42:40] *** Joins: Moyst (~moyst@user/moyst)
[13:43:19] *** Joins: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044)
[13:43:21] *** viaSanctus is now known as Guest7530
[13:43:21] *** Quits: Guest7530 (~viaSanctu@user/viasanctus) (Killed (silver.libera.chat (Nickname regained by services)))
[13:45:09] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[13:45:22] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[13:45:27] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 268 seconds)
[13:46:01] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[13:47:32] *** Joins: brookesy66 (~will@61.68.172.13)
[13:48:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[13:48:55] *** Quits: brookesy66 (~will@61.68.172.13) (Client Quit)
[13:49:39] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 264 seconds)
[13:49:45] *** Quits: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:50:18] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Ping timeout: 265 seconds)
[13:51:27] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 264 seconds)
[13:51:37] *** Quits: guenhael (~Thunderbi@2a01cb008c3d58005de474b32791218b.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[13:51:41] *** Joins: RiFo (~RiFo@user/rifo)
[13:52:11] *** Joins: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112)
[13:52:43] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[13:53:42] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[13:54:09] *** Joins: jyu_s (~f0fz@122.11.212.238)
[13:54:30] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[13:54:49] *** Joins: jyu_s (~f0fz@129.126.10.11)
[13:55:08] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:55:24] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[13:55:26] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[13:56:15] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 264 seconds)
[13:56:25] *** Quits: gutt (~gutt@76-208-47-155.lightspeed.knvltn.sbcglobal.net) (Quit: Leaving)
[13:56:30] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[13:56:48] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[13:56:49] *** Quits: kevr` (~kevr@user/kevr) (Remote host closed the connection)
[13:56:53] *** Quits: gitly (~gitly@148.252.129.73) (Ping timeout: 250 seconds)
[13:57:01] *** Quits: Jefren1 (~Jefren@70.35.67.211) (Ping timeout: 245 seconds)
[13:57:04] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[13:57:13] *** Joins: KeiraT (~k@lulzsec.co.uk)
[13:57:32] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Quit: Leaving)
[13:57:33] *** Joins: kevr (~kevr@user/kevr)
[13:57:47] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[13:58:15] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Remote host closed the connection)
[13:58:28] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[13:58:42] *** Quits: mcglk (~mcglk@131.191.49.120) (Remote host closed the connection)
[13:58:43] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[13:58:57] *** Joins: gitly (~gitly@85.255.233.103)
[13:59:02] *** Joins: Jefren1 (~Jefren@206.253.157.209)
[13:59:15] *** Quits: jyu_s (~f0fz@129.126.10.11) (Ping timeout: 264 seconds)
[13:59:39] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[13:59:59] *** Joins: mcglk (~mcglk@131.191.49.120)
[14:00:08] *** Joins: jyu_s (~f0fz@122.11.212.238)
[14:01:29] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[14:01:41] *** Joins: jyu_s (~f0fz@122.11.212.238)
[14:02:01] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[14:02:14] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:e6b3:18ff:fe83:8f33)
[14:05:03] *** Joins: zuQe8 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[14:06:22] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[14:06:45] *** Quits: vaio (~gary@user/ghost) (Ping timeout: 276 seconds)
[14:06:58] *** Quits: nyuszika7h (~nyuszika7@lykos/dev/nyuszika7h) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[14:07:53] *** Quits: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[14:11:26] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[14:11:47] *** Joins: vaio (~gary@user/ghost)
[14:12:07] *** Joins: jyu_s (~f0fz@122.11.212.238)
[14:12:26] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[14:14:59] <andi_> hello, can somebody help me: is there a way i can have an equivalent python command to? curl --location --header "PRIVATE-TOKEN: <your_access_token>" "https://mywebsite"
[14:16:11] *** Joins: ArtfulDodger (~ArtfulDod@2a02-8440-631d-1bde-78ba-13a3-5b05-4fb6.rev.sfr.net)
[14:16:20] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:16:45] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Client Quit)
[14:17:56] <grawity> andi_: use either the 'requests' and 'httpx' python module for HTTP; both of them accept a headers= parameter in .get()
[14:18:02] *** Quits: shangxiao (~davids@124.187.230.212) (Quit: WeeChat 3.3)
[14:19:46] <andi_> grawity: so i can do something like r=requests.get("http://www.example.com/", headers={"PRIVATE-TOKEN":"<your_access_token>"}) that's neat
[14:19:48] <andi_> thanks
[14:20:14] <grawity> yes
[14:20:26] <grawity> I think by default both of them also follow redirects like --location
[14:20:55] <psystemupdate> where should i place my technology HQ in america that isn't a coastal state?
[14:20:56] *** Quits: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7) (Remote host closed the connection)
[14:21:21] <psystemupdate> the campus will be shaped like a mantis
[14:21:57] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:22:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[14:22:10] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[14:22:29] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Client Quit)
[14:23:04] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[14:25:03] *** Joins: rsx (~dummy@ppp-188-174-133-225.dynamic.mnet-online.de)
[14:25:22] *** Joins: tobybl_ (~tobybl@213.31.134.21)
[14:26:40] *** Quits: luigibu (~luigi@80.30.201.209) (Quit: WeeChat 3.3)
[14:26:48] <andi_> grawity: sorry to interrupt, but requests is the pypi package right?
[14:26:59] *** Joins: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[14:27:33] <grawity> yes it's this one https://pypi.org/project/requests/
[14:27:39] <grawity> while httpx is also just httpx https://pypi.org/project/httpx/
[14:28:03] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 264 seconds)
[14:28:23] <andi_> yeah i just checked the request standard lib and didn't find a .get()
[14:28:32] <andi_> so i just wanted to be double sure :)
[14:28:56] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[14:29:50] <jinsun> stdlib has urllib.request and its docs just recommend requests in the beginning of the page
[14:30:15] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:3039:a900:628d:f875) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:31:43] <grawity> yeah urllib is sometimes handy when you don't want the script spend 50% of its runtime at the 'import requests' part >_>
[14:31:54] <grawity> but it's not the most convenient API for extended use
[14:32:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 256 seconds)
[14:35:15] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 264 seconds)
[14:35:16] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[14:35:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[14:37:39] *** Quits: gitly (~gitly@85.255.233.103) (Ping timeout: 264 seconds)
[14:37:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:37:57] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[14:39:06] *** Joins: the_lanetly_052 (~the_lanet@185.30.89.24)
[14:39:16] *** Joins: gitly (~gitly@185.69.145.153)
[14:39:48] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[14:39:56] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 245 seconds)
[14:40:07] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[14:42:55] *** Joins: e2m4n (~ezman@user/e2m4n)
[14:42:56] *** Joins: Moyst (~moyst@user/moyst)
[14:43:04] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Read error: Connection reset by peer)
[14:43:07] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Remote host closed the connection)
[14:43:20] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[14:43:32] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[14:44:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[14:46:13] *** Joins: fikran (~fikran@user/fikran)
[14:46:59] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[14:47:01] *** Quits: ammarsalmi (~ammarsalm@154.121.67.164) (Ping timeout: 245 seconds)
[14:47:12] *** Quits: Bronto22 (~mennoh@2a02:a46b:4db0:1:5604:a6ff:fe37:3044) (Quit: Konversation terminated!)
[14:47:30] *** Quits: jbox (~jbox@user/jbox) (Read error: Connection reset by peer)
[14:48:12] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[14:48:31] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:48:47] *** Joins: jyu_s (~f0fz@122.11.212.238)
[14:53:40] *** Joins: Klinda (~superleag@user/klinda)
[14:53:52] *** Quits: Cienisty (Cienisty@user/cienisty) (Quit: Error 606 | Demon not found)
[14:54:11] *** Joins: Cienisty (Cienisty@user/cienisty)
[14:55:40] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:56:01] *** Quits: michele (~eraser@user/michele) (Quit: restart)
[14:57:54] *** Quits: {HD} (~{HD}@86.106.121.213) (Read error: Connection reset by peer)
[14:58:56] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:00:25] *** Joins: luigibu (~luigibu@80.30.201.209)
[15:01:40] <koopman> Anyone know of a way to output print commands to a terminal web page with flask?
[15:04:27] <nedbat> koopman: you can redirect sys.stdout to a StringIO, and then include the text in your templated page
[15:07:09] *** Joins: y1n (~y1n@91.141.54.179.wireless.dyn.drei.com)
[15:08:50] <koopman> I was thinking more with something like Ajax so the page doesn’t have to load?
[15:09:47] *** Joins: legola (~legola@46.235.101.181)
[15:10:20] *** Quits: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112) (Quit: nat_of_cy)
[15:10:33] *** Joins: Batzy (~quassel@user/batzy)
[15:10:34] *** Joins: michele (~eraser@user/michele)
[15:11:00] *** Joins: thiras (~thiras@user/thiras)
[15:12:05] *** Quits: parv (~quass@user/parv) (Quit: parv)
[15:12:27] *** Quits: Batzy_ (~quassel@user/batzy) (Ping timeout: 264 seconds)
[15:13:35] <grawity> still the same thing from the python side, only you run the commands in a separate "ajax handler" view instead of the main page view
[15:14:42] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:14:49] *** dbristow_ is now known as dbristow
[15:15:12] <mgedmin> koopman: back in 2012 I used jquery.terminal.js for this
[15:15:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[15:16:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[15:16:17] <koopman> Would you still have a working example?
[15:16:19] <mgedmin> with pyramid in the backend: https://github.com/mgedmin/SnakeMUD
[15:16:32] <koopman> Was it any good @mgedmin ?
[15:16:36] <mgedmin> eh
[15:17:05] <mgedmin> there were some issues but I found workarounds: https://github.com/mgedmin/SnakeMUD/issues/2
[15:17:46] *** psystemupdate is now known as AuxillaryClinton
[15:17:49] <mgedmin> I would look for a different solution if I needed this today
[15:18:27] <grawity> what do you mean by "print commands" though
[15:18:37] <grawity> do you literally mean python print() or
[15:19:59] <p-i-> Is there any tooling for efficiently growing a pandas dataframe? I'm dynamically adding rows (websocket feed), and I don't like the idea of using .append as it reallocates for each row added.
[15:20:06] <koopman> Still curious @mgedmin
[15:20:51] *** Quits: CyDefect (~troll@213.55.226.140) (Ping timeout: 264 seconds)
[15:21:18] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[15:22:53] *** Quits: vukky (~vukky@wikipedia/vukky) (Quit: Vukky.exe is not responding.)
[15:24:53] *** dcaro is now known as dcaro_lunch
[15:25:50] *** Joins: Ergo^ (~ergo@91.238.59.144)
[15:26:36] *** Quits: ham5urg (~ham5urg@p200300d16738740067485cbb3560a6f5.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[15:26:47] *** Joins: blei (~blei@209.201.38.106)
[15:28:03] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 264 seconds)
[15:28:39] *** Joins: vukky (~vukky@wikipedia/vukky)
[15:30:15] *** Joins: Enitin (~Enitin@82.102.22.86)
[15:30:32] *** Joins: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net)
[15:30:52] <koopman> @mgedmin: I can only find a terminal emulator when researching jquery.terminal.js
[15:31:30] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[15:32:10] <mgedmin> I don't understand -- wasn't that what you wanted, when you asked how to "output print commands to a terminal web page"?
[15:33:38] *** Quits: AuxillaryClinton (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 260 seconds)
[15:33:56] *** Joins: nyah (~nyah@94.6.71.219)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:05] *** Joins: onichomp (~onichomp@2806:264:4404:8039:13c:1f90:3fd4:3639)
[15:36:05] *** Joins: ptalbert (~ptalbert@109.212.14.37.dynamic.jazztel.es)
[15:36:11] <koopman> Sorry I meant when I run my python script instead of the output of print going to the terminal I was wanting it to display on the webpage like a live window to the console?
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:01] *** Quits: BlessJah (~BlessJah@user/blessjah) (Ping timeout: 245 seconds)
[15:37:46] <mgedmin> you need javascript for that, to talk to the script over http (or websockets?) to collect pieces of the output and put them on the web page
[15:38:19] <mgedmin> in my example it was this bit: https://github.com/mgedmin/SnakeMUD/blob/master/snakemud/templates/index.mako#L12-L43
[15:39:23] *** Joins: jyu_s (~f0fz@122.11.212.238)
[15:40:09] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[15:40:57] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[15:41:06] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:41:23] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 268 seconds)
[15:41:34] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[15:42:11] *** Joins: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112)
[15:43:05] *** Joins: Moyst (~moyst@user/moyst)
[15:43:51] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[15:44:04] *** Joins: BlessJah (~BlessJah@user/blessjah)
[15:44:47] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Ping timeout: 256 seconds)
[15:45:16] *** llua` is now known as llua
[15:46:43] *** Joins: CyDefect (~troll@213.55.226.140)
[15:48:12] *** Joins: jyu_s (~f0fz@122.11.212.238)
[15:48:35] *** Joins: esv (~esv@216.237.228.11)
[15:48:45] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[15:50:17] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:51:23] <bookworm> p-i-_: use a different data structure. pandas DF aren't made to grow row by row, at least batch the operations but you might be better off with something else
[15:51:29] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[15:51:34] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:3039:a900:628d:f875)
[15:52:01] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Ping timeout: 245 seconds)
[15:53:06] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 268 seconds)
[15:53:50] *** Joins: jyu_s (~f0fz@122.11.212.238)
[15:54:23] <koopman> @mgedmin: thanks mate I’ll try emulate what you’ve done with a simple print command
[16:00:00] *** Joins: usr123 (~usr123@124.253.245.33)
[16:01:27] *** Joins: withered_wolf (~withered_@174.25.131.17)
[16:03:36] *** Quits: withered_wolf (~withered_@174.25.131.17) (Remote host closed the connection)
[16:03:52] *** Joins: withered_wolf (~withered_@174.25.131.17)
[16:03:54] <ptalbert> hi python. i thought that if a function param was a mutable object that it would point to the same object every time it is called. i am trying to take advantage of this to load a cache of data when a function is first called that will be available on subsequent calls but it is not working as expected...
[16:04:02] <ptalbert> a tiny example: https://bpa.st/GYMA
[16:04:13] <ptalbert> is my understanding of this just wrong?
[16:05:07] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[16:05:27] *** Quits: usr123 (~usr123@124.253.245.33) (Quit: Client closed)
[16:06:52] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[16:09:58] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi)
[16:10:09] <leduyquang753> You are creating a new dict every time.
[16:10:25] <leduyquang753> You need to keep only one instance of it and pass it to each call.
[16:10:41] <leduyquang753> Also you are reassigning the parameter.
[16:11:15] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 264 seconds)
[16:11:33] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[16:12:52] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[16:14:12] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Connection closed)
[16:14:17] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[16:14:17] *** Joins: jyu_s (~f0fz@122.11.212.238)
[16:14:35] *** Joins: Klinda (~superleag@user/klinda)
[16:14:41] <nedbat> ptalbert: change line 6 to be:  cache["hi"] = "there"
[16:14:49] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 256 seconds)
[16:15:10] <nedbat> ptalbert: though even after that change, the output will look the same
[16:15:21] <nedbat> oh, except it won't print the message again
[16:17:01] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 245 seconds)
[16:17:29] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[16:17:31] *** Joins: digilink (~digilink@user/digilink)
[16:17:52] <ptalbert> nedbat: 🤦 ah i was creating a new object, not updating the existing one
[16:17:54] <ptalbert> thank you
[16:19:11] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[16:19:51] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[16:20:00] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[16:21:18] *** Joins: Moopiz (~Moopiz@37.97.4.244)
[16:22:05] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[16:22:10] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 260 seconds)
[16:22:22] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:22:39] *** Quits: digilink (~digilink@user/digilink) (Ping timeout: 264 seconds)
[16:23:49] *** Joins: digilink (~digilink@user/digilink)
[16:24:19] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:24:47] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:25:08] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[16:27:32] *** Joins: shokohsc8618 (~shokohsc@161.88.195.77.rev.sfr.net)
[16:27:51] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[16:28:23] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c)
[16:30:54] *** Quits: blei (~blei@209.201.38.106) (Quit: Client closed)
[16:33:26] *** Joins: lbracher (~lucas@77.109.116.248)
[16:36:23] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:38:16] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 245 seconds)
[16:40:47] *** Quits: CyDefect (~troll@213.55.226.140) (Remote host closed the connection)
[16:41:02] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[16:42:08] *** Joins: nomic (~nomic@185.217.117.164)
[16:42:27] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 264 seconds)
[16:43:11] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:43:21] *** Joins: Moyst (~moyst@user/moyst)
[16:43:47] *** Joins: masterkorp (~masterkor@user/masterkorp)
[16:43:58] *** Joins: arinov (~arinov@77.67.129.200)
[16:44:12] *** Quits: withered_wolf (~withered_@174.25.131.17) (Remote host closed the connection)
[16:44:12] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[16:44:40] *** Joins: darksun (~darksun@user/darksun)
[16:48:16] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 245 seconds)
[16:48:45] *** Joins: drogas (~drogas@jump2.jet.uk)
[16:49:00] *** Joins: ammarsalmi (~ammarsalm@154.121.67.164)
[16:50:26] *** Joins: iomari891 (~iomari891@129.205.113.32)
[16:50:39] *** Joins: rinzewind (~rinzewind@user/rinzewind)
[16:51:50] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Quit: guenhael)
[16:52:05] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[16:53:51] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 264 seconds)
[16:53:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:54:17] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[16:55:03] *** Quits: Lorthirk (~lorthirk@51.154.69.139) (Ping timeout: 264 seconds)
[16:55:20] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[16:55:33] *** Joins: fikran (~fikran@user/fikran)
[16:55:53] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Client Quit)
[16:56:17] *** Quits: BravoSlo (BravoSlo@gateway/vpn/airvpn/bravoslo) (Quit: Leaving)
[16:56:33] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 265 seconds)
[16:57:16] *** Joins: cdown_ (~cdown@163.114.131.1)
[16:59:22] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:59:47] *** Joins: BravoSlo (BravoSlo@gateway/vpn/airvpn/bravoslo)
[16:59:57] *** Quits: Douwd (daniel@crux.bsdpro.net) (Quit: So long, and thanks for all the fish.)
[16:59:58] *** Joins: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul)
[17:00:09] *** Quits: cdown (~cdown@89.32.122.5) (Ping timeout: 256 seconds)
[17:00:20] *** cdown_ is now known as cdown
[17:00:25] *** Joins: han-solo (~hanish@user/han-solo)
[17:00:50] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[17:02:17] *** Joins: tsujp (~tsujp@sourcehut/user/tsujp)
[17:02:32] <ArtfulDodger> Do you think a single asyncio Stream suffices to have a full duplex chat between a client and a server? i.e. both run A and B coros: A. Wait for an input with the async ainput() then write on the socket AND B. Wait for an incoming message and print it to the terminal?
[17:02:52] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[17:02:56] *** Joins: sadstephen (~sadstephe@115.114.115.249)
[17:03:07] *** Joins: shad (~shad@user/shad)
[17:04:50] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:05:30] <ArtfulDodger> My issue is that with the TCP echo client/server from the doc https://docs.python.org/fr/3/library/asyncio-stream.html#examples the server would not be able to write anything to the client before the handler has been called once, because there is no writer
[17:06:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[17:07:14] *** Quits: rany (~rany@user/rany) (Remote host closed the connection)
[17:07:57] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[17:08:09] *** Quits: ammarsalmi (~ammarsalm@154.121.67.164) (Ping timeout: 265 seconds)
[17:08:39] *** Quits: ano (~ano@user/ano) (Remote host closed the connection)
[17:09:02] *** Joins: ano (~ano@user/ano)
[17:11:25] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 268 seconds)
[17:13:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:14:15] *** Quits: iomari891 (~iomari891@129.205.113.32) (Ping timeout: 264 seconds)
[17:14:27] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:15:03] *** Joins: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7)
[17:16:03] *** Quits: luigibu (~luigibu@80.30.201.209) (Ping timeout: 264 seconds)
[17:16:47] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[17:16:50] *** Joins: luigibu (~luigibu@80.30.201.209)
[17:17:27] *** Joins: iomari891 (~iomari891@105.112.138.38)
[17:17:39] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[17:18:28] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[17:18:56] *** Joins: jyu_s (~f0fz@122.11.212.238)
[17:19:07] *** Joins: NeoCore (~neocore@160.238.38.31)
[17:19:47] *** Joins: Elzington (~Elzington@68.235.43.172)
[17:20:15] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 264 seconds)
[17:20:27] *** Quits: sadstephen (~sadstephe@115.114.115.249) (Quit: Connection closed)
[17:21:44] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[17:26:33] *** Joins: ThePhilgrim (~ThePhilgr@151.41.185.44)
[17:26:33] *** Joins: withered_wolf (~withered_@174.25.131.17)
[17:26:35] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.3)
[17:26:53] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[17:27:20] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:28:07] <ThePhilgrim> Hi, I am using Python3 http.server to test my website locally. However, python's http server doesn't read POST requests. I found this server script (https://gist.github.com/mdonkers/63e115cc0c79b4f6b8b3a6b797e485c7) and downloaded it to my project folder. However, I cannot seem to render the html with this. Anybody know how to help me?
[17:28:24] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[17:28:31] *** Joins: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de)
[17:28:44] *** Joins: viSanctus (~viaSanctu@user/viasanctus)
[17:28:50] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[17:29:40] *** Joins: legola (~legola@46.235.101.181)
[17:30:45] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[17:30:45] *** Quits: withered_wolf (~withered_@174.25.131.17) (Ping timeout: 256 seconds)
[17:30:51] *** Quits: viSanctus (~viaSanctu@user/viasanctus) (Quit: Leaving)
[17:31:10] *** Joins: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com)
[17:31:30] *** Joins: mihaiadrian (~Thunderbi@82.76.223.244)
[17:33:34] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[17:33:35] *** Joins: bloody (~bloody@user/bloody)
[17:34:06] *** Quits: legola (~legola@46.235.101.181) (Ping timeout: 245 seconds)
[17:34:28] *** Joins: sadara (~sadara@user/sadara)
[17:35:19] *** Joins: jyu_s (~f0fz@122.11.212.238)
[17:35:33] *** Joins: alex11 (~alex11@user/alex11)
[17:35:51] *** Quits: gitly (~gitly@185.69.145.153) (Ping timeout: 264 seconds)
[17:36:27] *** Quits: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 264 seconds)
[17:36:27] *** Quits: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 264 seconds)
[17:36:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[17:37:03] *** Joins: Lorthirk (~lorthirk@51.154.69.139)
[17:37:18] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 260 seconds)
[17:37:36] *** Joins: gitly (~gitly@148.252.129.70)
[17:39:29] <sadara> I'm having some difficulty with python. I am trying to install PyQtWebEngine
[17:39:30] <sadara> .  I have a custom QT compiled and installed and working correctly, and I believe a working PyQt5. Does anyone have any pointers what I should try next? https://pastebin.com/fu3fqbpe
[17:39:48] *** Quits: Linux77 (~Linux_77@186.233.179.193) (Remote host closed the connection)
[17:39:52] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:39:56] *** Quits: grimvar (~grimvar@i5C75F5D4.versanet.de) (Ping timeout: 245 seconds)
[17:41:03] *** Joins: Enitin (~Enitin@82.102.22.86)
[17:41:05] <sadara> I think the issue is with SIP, a bash can't find a working version
[17:41:14] <sadara> *as
[17:41:32] <sadara> ~/temp/PyQtWebEngine-5.15.5 $ python3 configure.py
[17:41:38] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 268 seconds)
[17:41:43] <sadara> Error: Make sure you have a working sip on your PATH or use the --sip argument to explicitly specify a working sip.
[17:41:46] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[17:41:54] *** Joins: grimvar (~grimvar@i5C75F5D4.versanet.de)
[17:42:05] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 256 seconds)
[17:42:18] *** Quits: mihaiadrian (~Thunderbi@82.76.223.244) (Quit: mihaiadrian)
[17:42:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:43:23] *** Joins: Moyst (~moyst@user/moyst)
[17:43:28] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[17:44:29] *** Joins: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126)
[17:44:31] *** Joins: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126)
[17:44:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[17:45:43] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[17:45:49] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[17:46:55] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[17:48:49] *** Joins: greenbigfrog (~greenbigf@ip5f5ad852.dynamic.kabel-deutschland.de)
[17:49:24] *** Joins: CyDefect (~troll@213.55.226.140)
[17:50:01] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 250 seconds)
[17:50:06] <greenbigfrog> Hi. I'm struggling with some nested def's inside of a exec inside a class function. Anyone able to tell me why it's telling me test is not defined? Or where my train of thought is erroneous. I made a reproducible example here: https://www.online-python.com/7HhQCf65Wn
[17:50:32] *** Joins: arkanoid (~arkanoid@2-238-151-49.ip244.fastwebnet.it)
[17:50:52] <arkanoid> hello! How can I install a pip package excluding a single dep?
[17:51:09] *** Joins: Linux77 (~Linux_77@186.233.179.193)
[17:52:26] *** Joins: rany (~rany@user/rany)
[17:52:48] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:53:07] <jinsun> you can pip install --no-deps to install without any dep, then copy paste the dependencies from pip show, and pip install them after removing the one that you don't want
[17:53:21] *** Joins: rritoch (~kvirc@222.127.246.55)
[17:53:58] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[17:54:03] <arkanoid> booring! but thanks
[17:54:09] <arkanoid> I was on the same path
[17:58:31] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[17:58:32] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[17:59:26] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Remote host closed the connection)
[17:59:34] *** Quits: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112) (Quit: nat_of_cy)
[17:59:36] *** Joins: mathe8787 (~wellmathe@pericles.ifae.es)
[17:59:39] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[17:59:50] <mathe8787> Question on classes and inheritance:
[17:59:59] *** Joins: BUSY (~BUSY@user/busy)
[18:00:15] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[18:00:18] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:00:58] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[18:01:15] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:01:26] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[18:01:34] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:02:17] *** Joins: Atlas667 (~Atlas667@94.198.42.62)
[18:03:03] *** Quits: emf (~emf@163.114.132.7) (Ping timeout: 256 seconds)
[18:04:04] *** Joins: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f)
[18:04:22] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 260 seconds)
[18:05:27] <mathe8787> https://pastebin.com/Tv9kKb9k
[18:05:51] *** Quits: y1n (~y1n@91.141.54.179.wireless.dyn.drei.com) (Ping timeout: 264 seconds)
[18:06:00] <mathe8787> where is gui as argument from the initialization of ImageAnalyzer?
[18:06:13] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[18:06:29] <SnoopJ> mathe8787, `gui` is defined in the initializer of ImageAnalyzer
[18:06:37] <SnoopJ> and used on line 24 of that paste
[18:06:51] <mathe8787> So it is "self"?
[18:06:59] <SnoopJ> no, it's `gui`
[18:07:13] *** Joins: emf (~emf@2620:10d:c091:480::1:8be1)
[18:07:13] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Remote host closed the connection)
[18:07:38] <mathe8787> Yes but if __init__ needs the argument gui for the initialization, then self.image_analyzer = ImageAnalyzer(self) would need to pass this to gui
[18:07:56] <SnoopJ> oh, I misunderstood your question
[18:08:03] <mathe8787> so that means the self in ImageAnalyzer(self) is gui?
[18:08:07] <SnoopJ> mathe8787, yes, the instance of DesignerMainWindow will be passed as `gui`
[18:08:17] *** Quits: Barones (~Barones@2804:7f3:8987:f411:a5a5:30be:b120:e93f) (Remote host closed the connection)
[18:08:17] <mathe8787> how is that possible?
[18:08:35] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[18:08:38] <SnoopJ> mathe8787, instance methods always receive the instance as the first positional argument
[18:08:44] <mathe8787> there is no instance of DesignerMW in its own init()
[18:08:58] <SnoopJ> sure there is, it's `self`
[18:09:34] <mathe8787> So if I use
[18:09:35] <mathe8787> dmw = DesignerMainWindow()
[18:09:49] <mathe8787> then this instance is also the instance for ImageAnalyzer?
[18:10:23] *** Quits: CyDefect (~troll@213.55.226.140) (Ping timeout: 250 seconds)
[18:10:37] <SnoopJ> mathe8787, Line 11 will always pass the instance of DesignerMainWindow being initialized to the ImageAnalyzer initializer
[18:11:00] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (Remote host closed the connection)
[18:11:20] <mathe8787> so dmv then
[18:11:22] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[18:11:36] <mathe8787> dmv gets sent to ImageAnalyzer
[18:12:15] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[18:13:00] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[18:13:25] *** Joins: Klinda (~superleag@user/klinda)
[18:13:36] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:13:58] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:14:15] <SnoopJ> I don't know what `dmv` is, this identifier does not appear in your paste.
[18:14:22] *** Joins: jyu_s (~f0fz@122.11.212.238)
[18:14:45] <mathe8787> I mean dmw*
[18:14:47] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[18:15:02] <mathe8787> if I say dmw = DesignerMainWindow()
[18:15:15] *** dcaro_lunch is now known as dcaro
[18:15:21] <SnoopJ> then you will get an instance of that class whose image_analyzer attribute is created with `dmw` as its `gui`
[18:15:36] <mathe8787> yes! ok great now I understand thank you
[18:16:11] <SnoopJ> mathe8787, basically, when you're writing an instance method (and you always are inside a class unless you specifically ask for a different sort of method), you get `self` bound for free and won't need to pass it when you call that method
[18:16:13] <mathe8787> its kind of like inception haha do you know where I can read up more on that? Everything I find on google just gives me something different
[18:16:20] <s98259> I'm using AsyncSSH but I want to know how I handle "Connection closed by remote host"?
[18:16:21] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[18:16:23] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2b81)
[18:16:25] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[18:17:51] *** Quits: emf (~emf@2620:10d:c091:480::1:8be1) (Ping timeout: 264 seconds)
[18:18:01] <leonardo> using pip, is there any way to know if a package is already built or it needs to be downloaded and built on my architecture?
[18:18:13] *** Joins: jyu_s (~f0fz@122.11.212.238)
[18:18:39] <SnoopJ> mathe8787, there's some discussion of it here under the subsection titled "Instance methods": https://docs.python.org/3/reference/datamodel.html
[18:18:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[18:19:01] <mathe8787> Thank you!
[18:19:10] <mathe8787> Btw are you familiar with signals and threads?
[18:19:15] <SnoopJ> leonardo, are you asking about checking if the package is in your cache, or whether the thing pip would retrieve from the index(es) it knows about is already built?
[18:19:20] <SnoopJ> mathe8787, sure
[18:19:36] *** Joins: legola (~legola@46.235.101.181)
[18:20:15] <rritoch> mathe8787: in your example "=" is an operator that evaluates the statement on the right hand side before the left hand side. It doesn't all magically happen instantly. The objects get created before they are assigned as the value of the dmw variable. Not knowing the order of evaluation can lead ot bugs.
[18:20:16] <leonardo> SnoopJ: the latter
[18:20:26] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:20:37] *** Quits: Nselm (~Nselm@p200300d56f0dd27991c77759d1a6858b.dip0.t-ipconnect.de) (Quit: Client closed)
[18:21:09] <mathe8787> My code works, but when I close the gui and re-open the program, the connect() doesn't work anymore. In Pycharm I get the warning "Cannot find reference 'connect' in 'function | pyqtBoundSignal'"
[18:22:04] <mathe8787> rritoch ok that makese sense thank you
[18:24:05] <SnoopJ> leonardo, hmm, not sure. You might be able to use `pip index` with --only-binary ":all:" but I'm not really familiar with that subcommand
[18:24:27] *** Quits: xah377 (~xah37@user/xah37) (Quit: Leaving)
[18:24:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:25:16] <SnoopJ> leonardo, and you can specify --platform if you want something other than whatever you're running on
[18:25:34] <leonardo> yeah i was thinking to something that involved at least the --only-binary flag
[18:25:46] <SnoopJ> but you might be stuck with actually looking at the index yourself, the output from `pip index` doesn't really seem that helpful
[18:26:44] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Remote host closed the connection)
[18:27:01] *** Joins: zeden (~zeden@user/zeden)
[18:27:08] *** Joins: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[18:27:12] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:3569:bbfe:cdf9:36cf) (Quit: Textual IRC Client: www.textualapp.com)
[18:27:20] *** Joins: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th)
[18:27:20] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:27:56] <leonardo> what if i do something like pip install --only-binary :all: and take an eventual failuer as a hint that something needs to be built?
[18:28:05] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[18:28:06] <leonardo> (i just need this level of detail for now)
[18:28:48] <SnoopJ> leonardo, oh! Yes, that should work if install-or-fail is acceptable
[18:29:02] <jinsun> pip download --only-binary ad see if that fails maybe
[18:29:04] <leonardo> sweet
[18:29:21] *** Joins: CyDefect (~troll@213.55.226.140)
[18:29:41] *** Quits: Linux77 (~Linux_77@186.233.179.193) (Quit: Leaving)
[18:29:41] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 256 seconds)
[18:30:07] <leonardo> thanks
[18:30:19] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi)
[18:30:46] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Ping timeout: 245 seconds)
[18:31:21] *** Joins: akk (~akk@75.161.146.115)
[18:32:04] <rritoch> SnoopJ, there is currently a bug building some projects, like numpy, on mac in python 3.9 because of the version number of mac is for some reason being reported without enough decimal places. Is it possible to specify the platform version with --platform and bypass this bug?
[18:32:15] *** Quits: p-i- (~Ohmu@mx-ll-223.206.149-105.dynamic.3bb.co.th) (Ping timeout: 264 seconds)
[18:32:38] <SnoopJ> rritoch, I don't know, maybe? I'm not familiar with the bug
[18:33:08] *** Joins: Omega037 (~Omega037@047-233-057-109.res.spectrum.com)
[18:33:32] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 265 seconds)
[18:33:33] <rritoch> SnoopJ: I'll need to look into it, but thanks for the suggestion of --platform, I didn't know it existed and may solve the build problem. Its actually an assert thats failing because it doesn't recognize the Mac version :(
[18:33:54] <s98259> How do I catch "Connection closed by remote host"?
[18:33:59] <s98259> asyncssh
[18:33:59] *** Joins: weedmic (~weedmic@188.120.139.53)
[18:34:06] *** Joins: runelind (~runelind@user/runelind)
[18:34:36] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:36:18] *** Joins: shad (~shad@user/shad)
[18:36:44] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ccbf-b509-9dbf-5059.res6.spectrum.com)
[18:37:16] <rritoch> SnoopJ: This is a related bugreport, https://stackoverflow.com/questions/66003811/pipenv-locking-for-numpy-fails-on-python3-9-and-pip21-0-1 its that assert len(base_version) == 2 that is causing the build failure.
[18:38:30] <rritoch> I'm using Python 3.8 for all of my projects because of it, if I can find a work-around than I can probably start using 3.9.
[18:38:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:24d7:18e7:aec6:a72d) (Remote host closed the connection)
[18:39:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888)
[18:39:27] *** Quits: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 264 seconds)
[18:39:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[18:40:03] *** Quits: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 264 seconds)
[18:40:21] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:40:23] <Yhg1s> (a stackoverflow post is not a bugreport.)
[18:40:43] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 250 seconds)
[18:40:49] <Omega037> Yhg1s, I mean it is in a way
[18:40:57] <Omega037> Just not in the proper bug database
[18:40:58] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7363:e82d:2c27:f888) (Remote host closed the connection)
[18:41:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3)
[18:41:25] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[18:41:27] <SnoopJ> rritoch, looks like --only-binary=:all: alone might fix the problem? https://github.com/numpy/numpy/issues/17784
[18:41:42] <mathe8787> Ok so here is a better, though long-winded explanation to my problem: https://pastebin.com/N2TQpb6t
[18:41:45] <Yhg1s> Eh, no. It's a complaint, sure, but it's not a bug report if you're not actually reporting it to anyone who can fix it :)
[18:42:10] *** Quits: syrius (~syrius@titan.stormtek.net) (Ping timeout: 256 seconds)
[18:43:01] <rritoch> Hahahaha, as if reporting it to the people who can fix it would change anything! Pipenv developers will blame python developers and vice-versa, and neither will repair the bug... been down that road before. I just look or work-arounds.
[18:43:01] <SnoopJ> SO certainly doesn't favor legibility in this case
[18:43:07] *** Joins: Moyst (~moyst@user/moyst)
[18:43:24] <SnoopJ> rritoch, well, if the information in the official numpy issue (which, again, seems to suggest fixes?) isn't interesting to you, I guess there's nothing to be done about that.
[18:43:27] *** Joins: magla (~gelignite@55d4df7d.access.ecotel.net)
[18:43:38] <nedbat> Yhg1s: I changed the bound method references to WeakMethod's, and now instead of leaking 10 objects, it leaks 46!? :(
[18:43:39] * SnoopJ has had excellent experiences with official reporting channels in the scipy ecosystem
[18:44:07] <Yhg1s> nedbat: still according to the test that doesn't actually detect leaks, just new objects? :)
[18:44:20] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[18:45:13] <rritoch> SnoopJ: That wasn't directed at you, I'm looking into the solution you provided. I'm just saying that reporting bugs in python land isn't very productive.
[18:46:03] <Yhg1s> rritoch: well, certainly so if you consider SO posts bug reports.
[18:46:19] <nedbat> Yhg1s: i put this program in a standalone file: https://gist.github.com/nedbat/0a81c812866ca3a2cbba5da52a9cc438  and ran it with and without coverage.
[18:46:24] *** Quits: weedmic (~weedmic@188.120.139.53) (Quit: Konversation terminated!)
[18:46:30] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[18:46:34] <SnoopJ> rritoch, I can't say I've had that experience, personally, but I hope there are fewer people who feel that way about it than there are people who want to see issues fixed and have remaining faith in the process.
[18:46:45] <nedbat> Yhg1s: without coverage, it says objects leaked: 1, 1.   With coverage (with WeakMethod), it says 46, 46
[18:46:51] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Read error: Connection reset by peer)
[18:46:53] <rritoch> Yhg1s: I used the wrong terminology and I know the difference myself... Seriously are you the grammer police? Back off!
[18:46:54] <SnoopJ> nedbat, wow
[18:46:55] *** Joins: nyuszika7h_ (nyuszika7h@lykos/dev/nyuszika7h)
[18:47:00] <Yhg1s> nedbat: but you're still testing the whole thing with coverage. Coverage is running the whole time, and it's collecting data the whole time.
[18:47:01] *** Quits: Inline (~Inline@2a02:908:1252:7a80:3233:dedc:9ad8:36c3) (Ping timeout: 268 seconds)
[18:47:15] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[18:47:15] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:47:43] <nedbat> Yhg1s: ok, this gets back to the original bug report, which said, "we have a test of our extension to see if it leaks, and that test fails under coverage"
[18:47:50] *** Joins: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net)
[18:47:57] *** Joins: jyu_s (~f0fz@122.11.212.238)
[18:48:01] *** Joins: Linux77 (~Linux_77@186.233.179.193)
[18:48:07] <lbracher> Hello! I did this regular expression to detect diacritics in french: '[ -ÀÁÂÇÈÉÊËÎÏÔÖÛÜŸàáâçèéêëîïôöûüÿŒœ]' . However it was detecting every single character. I just changed the places of ' ' and '-' and it begun detecting correctly. Is there a technical explanation for that?
[18:48:14] <s98259> This is annoying, how is one supposed to maintain a list of clients if they can't just remove any from the list that have disconnected unexpectedly? :/
[18:48:32] *** Quits: grooverman_ (~grooverma@177.102.117.95) (Read error: Connection reset by peer)
[18:48:38] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 260 seconds)
[18:48:39] <nedbat> lbracher: in square brackets, - creates a range:  [a-z]  for example
[18:49:02] <nedbat> lbracher: only if it's the first or last character in the brackets does it mean an actual hyphen
[18:49:06] <lbracher> nedbat, oooooh, of course! D'oh! :)
[18:49:11] <lbracher> Thanks! :)
[18:49:23] <Yhg1s> nedbat: it thinks it's leaking because the Collector is still holding on to things. With tp_traverse and tp_clear, it *is* getting cleaned up, but not until the coverage data is all destroyed (usually at interpreter exit)
[18:49:39] <Yhg1s> nedbat: maybe what needs to happen is for the collector to destroy its data earlier, somehow?
[18:49:48] *** nyuszika7h_ is now known as nyuszika7h
[18:49:56] *** Joins: grooverman (~grooverma@177.95.12.14)
[18:50:00] <SnoopJ> lbracher, note that your set is not complete, it will fail for compositions, e.g. Á
[18:50:27] <SnoopJ> I'm not sure if there's a best-practice way to test for that, but running it through NFKD and looking for the accents you care about, maybe?
[18:50:53] <SnoopJ> (U+0301 in that case)
[18:51:59] <lbracher> SnoopJ, TIL NFKD! Thanks! :)
[18:52:16] <SnoopJ> lbracher, actually, nevermind what I was on about, run the candidate text through NFC normalization first :)
[18:52:32] <SnoopJ> which should collapse the compositions to their canonical single-codepoint form
[18:52:59] <SnoopJ> lbracher, the Unicode annex about normalization is good reading if you're into that kind of thing http://www.unicode.org/reports/tr15/
[18:53:02] *** Joins: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl)
[18:53:11] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:8054:dbbd:cb01:2aa3)
[18:54:02] <lbracher> SnoopJ, nice article! I'll read it and get an inspiration from it. Thanks! :)
[18:54:12] <SnoopJ> fun fact: Python identifiers are normalized :)
[18:54:46] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 260 seconds)
[18:55:32] <SnoopJ> https://bpa.st/PZBQ
[18:55:38] *** Quits: lericson (~lericson@user/lericson) (Ping timeout: 268 seconds)
[18:58:13] *** Joins: runelind_ (~runelind@user/runelind)
[18:58:36] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 256 seconds)
[18:58:51] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:00:35] *** Quits: psystemupdate (~AbraCadav@162-236-239-168.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 268 seconds)
[19:01:52] *** Joins: ham5urg (~ham5urg@p200300d167387400108b360ca9d5b7b2.dip0.t-ipconnect.de)
[19:02:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:02:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f)
[19:02:40] *** Joins: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112)
[19:03:02] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[19:03:11] *** Joins: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h)
[19:04:54] *** Joins: fikran (~fikran@user/fikran)
[19:07:14] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:07:56] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[19:10:23] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[19:10:33] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[19:10:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6bc:f00:4c2d:8074:ff8b:55dd)
[19:11:37] *** Quits: arinov (~arinov@77.67.129.200) (Ping timeout: 256 seconds)
[19:11:42] *** Joins: jyu_s (~f0fz@122.11.212.238)
[19:13:31] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 268 seconds)
[19:14:01] *** Joins: vimart (~vimart@62.60.60.193)
[19:15:03] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[19:18:47] *** Joins: krono (sid197855@user/krono)
[19:19:00] *** Joins: superboot (~agentgasm@user/superboot)
[19:19:41] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[19:19:51] <krono> hi, is there an idiomatic way to turn `(True, False, True, True)` or `(1,0,1,1)` into `0b1011`?
[19:20:51] *** Joins: portalrat_ (~portalrat@user/portalrat)
[19:21:32] *** Quits: f8e4 (~user@159.89.21.45) (Ping timeout: 268 seconds)
[19:22:51] *** Quits: portalrat (~portalrat@user/portalrat) (Ping timeout: 245 seconds)
[19:23:12] <SnoopJ> krono, you want the string "0b1011" or the integer 11?
[19:23:22] <krono> the integer
[19:23:35] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[19:24:12] <krono> I'm building a kind-of topological sorted list and want to index into it; the index being consturcted from true/false properties
[19:24:48] <krono> https://bpa.st/BHPA
[19:25:43] <Yhg1s> krono: i = 0; for v in your_tuple: i = (i << 1) | v
[19:26:30] <krono> Yhg1s: yes, now you say it…
[19:27:50] *** Joins: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de)
[19:28:49] *** Joins: arinov (~arinov@77.67.129.200)
[19:30:08] *** Quits: Inline (~Inline@2a02:908:1252:7a80:4ac:ef70:daee:408f) (Remote host closed the connection)
[19:30:29] *** Joins: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1)
[19:31:50] *** Joins: sudomann (~sudomann@2601:140:5:dba3:75db:36cb:d35d:ee71)
[19:33:02] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 260 seconds)
[19:33:39] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:34:37] <rritoch> krono: You could convert it to a boolean string first? I'm not sure of a cleaner way to do it:  int(''.join(("1" if x else "0" for x in (True,True,True,False))),2).to_bytes(1,'big')
[19:34:50] *** Joins: amoe (~amoe@visarend.solasistim.net)
[19:34:50] *** Joins: jimm (~jim@about/linux/staff/jim)
[19:34:51] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[19:35:18] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Quit: guenhael)
[19:35:27] <SnoopJ> rritoch, well, the repeated or-and-shift is pretty clear
[19:35:31] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[19:35:39] <amoe> If I gitignore a file in the repo for my project, then I run 'pip install .', the gitignored file won't be installed with the package.  Is this documented anywhere?
[19:35:40] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Client Quit)
[19:35:46] <rritoch> SnoopJ: Sorry I didn't see it :(
[19:35:48] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Read error: Connection reset by peer)
[19:35:51] *** Joins: guenhael (~Thunderbi@193.52.208.97)
[19:35:59] *** Quits: sudomann (~sudomann@2601:140:5:dba3:75db:36cb:d35d:ee71) (Ping timeout: 250 seconds)
[19:36:27] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[19:37:47] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[19:38:38] *** Quits: nomic (~nomic@185.217.117.164) (Quit: Leaving)
[19:38:41] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 245 seconds)
[19:38:53] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[19:39:36] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[19:39:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[19:41:51] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 265 seconds)
[19:42:11] <bookworm> amoe: https://pip.pypa.io/en/stable/reference/build-system/ and related docs of setuptools or whatever you're using
[19:42:47] *** Quits: rritoch (~kvirc@222.127.246.55) (Ping timeout: 256 seconds)
[19:43:02] *** Quits: ckdCreations (~ckdCreati@147.55.133.133) (Read error: Connection reset by peer)
[19:43:25] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[19:43:39] *** Joins: Moyst (~moyst@user/moyst)
[19:43:40] *** Joins: p-i- (~Ohmu@223.206.149.105)
[19:43:58] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[19:45:16] <amoe> bookworm: oh, it seems to be a poetry feature, interesting.  Didn't know that pip delegated stuff to poetry.
[19:45:25] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:45:53] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[19:46:06] *** Joins: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126)
[19:46:07] *** Joins: the_lanetly_052_ (~the_lanet@185.30.90.203)
[19:46:09] *** Quits: amoe (~amoe@visarend.solasistim.net) (Quit: leaving)
[19:46:11] *** Joins: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126)
[19:46:13] <SnoopJ> amoe, pip can act as a PEP 517 frontend, which will invoke whatever backend the project in question specifies
[19:46:17] <SnoopJ> oh, okay
[19:46:22] *** Joins: koo5_ (~quassel@51.140.155.227)
[19:47:13] *** Quits: Inline (~Inline@2a02:908:1252:7a80:17ed:d02:7ca7:bad1) (Quit: Leaving)
[19:49:03] *** Quits: the_lanetly_052 (~the_lanet@185.30.89.24) (Ping timeout: 264 seconds)
[19:49:06] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 265 seconds)
[19:49:06] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 245 seconds)
[19:49:24] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[19:49:54] *** Quits: doubletwist (~doubletwi@user/doubletwist) (Ping timeout: 268 seconds)
[19:50:50] *** Joins: lericson (~lericson@user/lericson)
[19:51:09] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[19:51:38] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Remote host closed the connection)
[19:52:00] *** Quits: nat_of_cy (~Thunderbi@user/nat-of-cy/x-1732112) (Quit: nat_of_cy)
[19:52:01] *** Quits: jay-m126 (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 250 seconds)
[19:52:01] *** Quits: jay-m126_ (jay-m@gateway/vpn/protonvpn/jay-m126) (Ping timeout: 250 seconds)
[19:52:33] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[19:53:33] *** Quits: RoyK (~roy@user/royk) (Ping timeout: 256 seconds)
[19:54:33] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[19:55:13] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[19:55:25] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:56:15] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 264 seconds)
[19:57:00] *** Quits: gitly (~gitly@148.252.129.70) (Ping timeout: 260 seconds)
[19:57:17] *** Parts: krono (sid197855@user/krono) ()
[19:57:29] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[19:58:31] *** Joins: jay-m126 (~jay-m@129.0.76.219)
[19:58:35] *** Joins: jay-m126_ (~jay-m@129.0.76.219)
[19:58:55] *** Joins: gitly (~gitly@185.69.145.151)
[19:58:58] *** Joins: dez (uid92154@user/dez)
[19:59:12] *** Quits: tsujp (~tsujp@sourcehut/user/tsujp) (Quit: Client closed)
[19:59:16] *** Joins: RoyK (~roy@user/royk)
[19:59:21] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:01:00] *** Quits: xiaguan (~parsley@2604:180:f1::173) (Ping timeout: 268 seconds)
[20:01:16] *** Joins: xiaguan (~parsley@2604:180:f1::173)
[20:02:46] *** Quits: jay-m126_ (~jay-m@129.0.76.219) (Read error: Connection reset by peer)
[20:02:47] *** Quits: smeeagle (~smeeagle@2a00:23c8:9611:e600:e825:d8ae:9f6e:237c) (Quit: smeeagle)
[20:02:54] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 260 seconds)
[20:03:16] *** Quits: guenhael (~Thunderbi@193.52.208.97) (Ping timeout: 245 seconds)
[20:03:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[20:03:59] *** Quits: magla (~gelignite@55d4df7d.access.ecotel.net) (Quit: Stay safe!)
[20:04:19] *** Quits: jay-m126 (~jay-m@129.0.76.219) (Ping timeout: 256 seconds)
[20:04:19] *** Quits: stoneware (~stoneware@user/stoneware) (Ping timeout: 256 seconds)
[20:04:29] *** Quits: ArtfulDodger (~ArtfulDod@2a02-8440-631d-1bde-78ba-13a3-5b05-4fb6.rev.sfr.net) (Read error: Connection reset by peer)
[20:04:42] *** jimm is now known as jim
[20:04:49] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[20:04:52] *** Joins: pigweed (~pigweed@97.119.229.83)
[20:05:12] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0074-2ca5-a34e-fe74.res6.spectrum.com)
[20:05:34] *** Joins: white_shadow (~white_sha@user/white-shadow/x-1132694)
[20:05:41] *** Joins: jay-m126 (~jay-m@129.0.76.210)
[20:05:46] *** Joins: jay-m126_ (~jay-m@129.0.76.210)
[20:05:48] *** Quits: puzzled (~puzzled@83-85-211-81.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[20:08:34] *** Joins: wovixo (~wovixo@128.104.205.49)
[20:08:57] *** Joins: stoneware (~stoneware@user/stoneware)
[20:09:33] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 250 seconds)
[20:11:07] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[20:13:34] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[20:13:45] *** Quits: mrwick (~mrwick@user/mrwick) (Quit: leaving)
[20:13:56] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[20:14:55] <sadara> which package is supposed to provide the sip command? sip 6.4.0 seems to only provide sip-install, sip-build etc.
[20:16:36] *** Quits: Lorthirk (~lorthirk@51.154.69.139) (Ping timeout: 260 seconds)
[20:16:53] *** Quits: trace987 (~trace@ip5b429941.dynamic.kabel-deutschland.de) (Quit: Leaving)
[20:17:12] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[20:17:27] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:18:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:21:39] *** Joins: vats (~vats@103.158.91.216)
[20:22:16] *** Quits: legola (~legola@46.235.101.181) (Remote host closed the connection)
[20:23:19] *** Joins: legola (~legola@46.235.101.181)
[20:23:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[20:24:22] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 260 seconds)
[20:24:39] *** Joins: upsala (~zcb@185.213.155.232)
[20:24:43] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 256 seconds)
[20:25:43] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:26:18] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:26:31] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[20:26:41] *** Joins: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net)
[20:27:19] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:27:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:27:51] *** Quits: arinov (~arinov@77.67.129.200) (Ping timeout: 245 seconds)
[20:28:03] *** Quits: legola (~legola@46.235.101.181) (Ping timeout: 264 seconds)
[20:28:26] *** Joins: ArtfulDodger (~ArtfulDod@2a04:cec0:113a:5359:72b8:2f08:5ff5:4acf)
[20:29:27] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:29:59] *** Quits: nyuszika7h (nyuszika7h@lykos/dev/nyuszika7h) (Ping timeout: 268 seconds)
[20:30:31] *** Quits: mallkrampus (~mallkramp@148.72.164.202) (Read error: Connection reset by peer)
[20:31:03] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[20:31:17] *** Joins: nyuszika7h (~nyuszika7@lykos/dev/nyuszika7h)
[20:32:01] *** Quits: ThothCastel (sid78195@tinside.irccloud.com) (Ping timeout: 245 seconds)
[20:32:06] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 256 seconds)
[20:32:51] *** Quits: WayToDoor (~WayToDoor@user/waytodoor) (Ping timeout: 245 seconds)
[20:33:11] *** Quits: et (~et@user/et) (Excess Flood)
[20:33:13] *** Joins: WayToDoor (~WayToDoor@user/waytodoor)
[20:33:51] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[20:33:53] *** Quits: binary01 (~binary01@192.110.171.216) (Read error: Connection reset by peer)
[20:34:04] *** Joins: binary01 (~binary01@192.110.171.216)
[20:34:05] *** Joins: ThothCastel (sid78195@id-78195.tinside.irccloud.com)
[20:34:11] *** Quits: Vonter (~Vonter@user/vonter) (Quit: WeeChat 3.3)
[20:34:33] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:3039:a900:628d:f875) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:34:52] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[20:34:55] *** Quits: gitly (~gitly@185.69.145.151) (Ping timeout: 256 seconds)
[20:35:03] *** Joins: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com)
[20:35:21] *** Quits: NiKaN (sid385034@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:36:10] *** Joins: NiKaN (sid385034@id-385034.helmsley.irccloud.com)
[20:36:20] *** Joins: ExeciN (~ExeciN@user/nicexe)
[20:36:39] *** Joins: gitly (~gitly@148.252.133.95)
[20:36:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (calcium.libera.chat (Nickname regained by services)))
[20:36:51] *** Joins: moose` (~moose@user/moose)
[20:36:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[20:37:04] *** Joins: tim__ (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net)
[20:37:13] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[20:37:14] *** Joins: vukkie (~vukky@wikipedia/vukky)
[20:37:14] *** Joins: mei8 (~mei@user/mei)
[20:37:29] *** Joins: kdc_ (~kdc@196.211.197.159)
[20:37:30] *** Joins: thiras_ (~thiras@user/thiras)
[20:37:40] *** Joins: daoudr_ (~daoudr@xdsl-31-164-222-159.adslplus.ch)
[20:37:42] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[20:37:43] *** Joins: [RiFo] (~RiFo@user/rifo)
[20:37:44] *** Joins: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[20:37:52] *** Joins: davef_ (~davef@user/davef)
[20:38:03] *** Joins: guenhael (~Thunderbi@2a01cb008c3d5800e04c7d30ec5d9da9.ipv6.abo.wanadoo.fr)
[20:38:04] *** Joins: LabMonkey (~LabMonkey@206.255.106.67)
[20:38:15] *** Joins: dalan623673 (~dalan@14-202-182-202.tpgi.com.au)
[20:38:16] *** Joins: pwnd_sfw5 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[20:38:21] *** Joins: kn1000 (~kn100@wireguard/tunneler/kn100)
[20:38:32] *** Joins: driib28 (~driib@185.65.135.232)
[20:38:36] *** Joins: Geronimo9 (~Geronimo@user/geronimo)
[20:38:41] *** Joins: lyr3 (~lyr@user/lyr)
[20:38:41] *** Joins: c10l2 (~c10l@user/c10l)
[20:38:43] *** Joins: greknod282 (~grek@120.88.171.98)
[20:38:46] *** Quits: vimart (~vimart@62.60.60.193) (Quit: WeeChat 2.8)
[20:38:49] *** Joins: SirScott9 (~SirScott@c-67-176-100-163.hsd1.co.comcast.net)
[20:38:49] *** Joins: the_lanetly_052 (~the_lanet@185.30.90.203)
[20:38:51] *** Joins: dv^_^2 (~dv@eclipse.oxfordfun.com)
[20:38:54] *** Joins: luva3 (~luva@45.141.152.36)
[20:39:10] *** Joins: ayusta (Thunderbir@gateway/vpn/protonvpn/ayustae)
[20:39:11] *** Joins: runelind (~runelind@user/runelind)
[20:39:13] *** Joins: Hax0r (~Hax0r@128.127.222.243)
[20:39:22] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Ping timeout: 265 seconds)
[20:39:24] *** Joins: a1paca_ (~a1paca@user/a1paca)
[20:39:25] *** Joins: henbruas_ (~henbruas@ti0003a400-4203.bb.online.no)
[20:39:59] *** Joins: llua` (~llua@zsh/developer/llua)
[20:40:03] *** Quits: [RiFo] (~RiFo@user/rifo) (Client Quit)
[20:40:15] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:40:24] *** Joins: coc0nut_ (~coc0nut@user/coc0nut)
[20:40:27] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[20:40:54] *** Joins: renrelkha_ (~renrelkha@user/renrelkha)
[20:41:00] *** Quits: drogas (~drogas@jump2.jet.uk) (Quit: Connection closed)
[20:41:06] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:41:12] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Read error: Connection reset by peer)
[20:41:18] *** Joins: Moyst_ (~moyst@user/moyst)
[20:41:22] *** Joins: foo_ (~foo@user/foo/x-8763512)
[20:41:23] *** Joins: baltazaar (~baltazar@91-82-172-24.pool.digikabel.hu)
[20:41:33] *** Joins: odrling_ (~odrling@korone.aidoru.agency)
[20:41:35] *** Joins: millido_ (~millido@84.210.150.128)
[20:41:40] *** Joins: m1dnight_ (~christoph@christophe.dev)
[20:41:47] *** Joins: rundown (~eb0t@90.199.243.141)
[20:41:48] *** Joins: tonitch_ (~tonitch@user/tonitch)
[20:41:52] *** Joins: DaNeenja1 (~jake@adsl-74-230-8-177.hsv.bellsouth.net)
[20:41:55] *** Joins: krisd_ (krisd@s0.mydevil.net)
[20:42:00] *** Joins: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[20:42:03] *** Joins: jpic_ (~jpic@82.142.20.182)
[20:42:03] *** Joins: sgn_ (~sgn@user/sgn)
[20:42:08] *** Joins: bparker_ (~nobody@user/bparker)
[20:42:09] *** Quits: nrg (~NRG@user/nrg) (Quit: ZNC - https://znc.in)
[20:42:10] *** Joins: flokuehn_ (~flokuehn@87.123.247.67)
[20:42:11] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[20:42:12] *** Joins: slowButP1esent (~slowButPr@user/slowbutpresent)
[20:42:13] *** Joins: KSaunder1on (~user@142.93.152.208)
[20:42:14] *** Joins: grym_ (~grym@user/grym)
[20:42:14] *** Joins: prime- (~prime@user/prime)
[20:42:18] *** Joins: Peng__ (~mnordhoff@flash.mattnordhoff.net)
[20:42:28] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-b06c-115f-7310-1d97.fixed6.kpn.net)
[20:42:36] *** Joins: Keira (~k@lulzsec.co.uk)
[20:42:39] *** Joins: pankid_ (~quassel@pankid.club)
[20:42:50] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[20:42:57] *** Joins: nuala2 (~nuala@user/nuala)
[20:43:02] *** Quits: JaredCE (~JaredCE@93.115.192.243) (Ping timeout: 260 seconds)
[20:43:54] *** Joins: raxor2k (~raxor2k@fwa5cd2-48.bb.online.no)
[20:44:12] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:e6b3:18ff:fe83:8f33) (Remote host closed the connection)
[20:44:20] *** Joins: Batzy_ (~quassel@user/batzy)
[20:44:28] <raxor2k> is there an way to generate random numbers with only 6 digits? ' for i in range(000000, 999999) '
[20:44:36] <raxor2k> so that all numbers generated have 6 digits
[20:44:43] *** Quits: toolbox (~toolbox@h213-21-123-59.cust.a3fiber.se) (Quit: Leaving)
[20:44:52] *** Quits: grym (~grym@user/grym) (Killed (zinc.libera.chat (Nickname regained by services)))
[20:44:52] *** grym_ is now known as grym
[20:44:56] *** Joins: Forkk_ (~forkk@li926-228.members.linode.com)
[20:45:26] <MacGyver> raxor2k: Why does it matter how many digits the number has?
[20:45:39] <MacGyver> 000000 == 0, until you print it.
[20:45:46] <mefistofeles> raxor2k: you can generate a number between 1 and 999999 and do zero padding, I guess... but I have the feeling your question points to an xyproblem, what is the original problem you are trying to solve with this?
[20:45:57] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[20:45:58] <mefistofeles> s/1/0
[20:46:00] <raxor2k> in case you wonder why i wanna do that: my brother has lost token to his snapchat account, so im gonna create a bot that runs in a loop and keep predicting right token so it can log in. Yes you heard right :)
[20:46:15] <MacGyver> So pad it when outputting.
[20:46:23] *** Joins: loworder1it (~dave@S0106e81cba1736ea.ss.shawcable.net)
[20:46:34] <raxor2k> if you dont believe i can do this, or think im delusional, thats fine, i believe i will make this :)
[20:46:38] *** Quits: Andrynet (~Andrynet@190.152.206.99) (Ping timeout: 268 seconds)
[20:46:43] *** Quits: ThothCastel (sid78195@id-78195.tinside.irccloud.com) (*.net *.split)
[20:46:43] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (*.net *.split)
[20:46:43] *** Quits: lericson (~lericson@user/lericson) (*.net *.split)
[20:46:43] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (*.net *.split)
[20:46:43] *** Quits: the_lanetly_052_ (~the_lanet@185.30.90.203) (*.net *.split)
[20:46:43] *** Quits: Moyst (~moyst@user/moyst) (*.net *.split)
[20:46:43] *** Quits: jyu_s (~f0fz@122.11.212.238) (*.net *.split)
[20:46:43] *** Quits: runelind_ (~runelind@user/runelind) (*.net *.split)
[20:46:43] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:8054:dbbd:cb01:2aa3) (*.net *.split)
[20:46:43] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ccbf-b509-9dbf-5059.res6.spectrum.com) (*.net *.split)
[20:46:43] *** Quits: akk (~akk@75.161.146.115) (*.net *.split)
[20:46:43] *** Quits: causaui1 (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (*.net *.split)
[20:46:43] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2b81) (*.net *.split)
[20:46:43] *** Quits: vinleod (~vdamewood@fedora/vdamewood) (*.net *.split)
[20:46:43] *** Quits: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef) (*.net *.split)
[20:46:43] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (*.net *.split)
[20:46:43] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[20:46:43] *** Quits: luigibu (~luigibu@80.30.201.209) (*.net *.split)
[20:46:43] *** Quits: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7) (*.net *.split)
[20:46:43] *** Quits: lbracher (~lucas@77.109.116.248) (*.net *.split)
[20:46:43] *** Quits: esv (~esv@216.237.228.11) (*.net *.split)
[20:46:43] *** Quits: mathe8787 (~wellmathe@pericles.ifae.es) (*.net *.split)
[20:46:43] *** Quits: onichomp (~onichomp@2806:264:4404:8039:13c:1f90:3fd4:3639) (*.net *.split)
[20:46:43] *** Quits: nyah (~nyah@94.6.71.219) (*.net *.split)
[20:46:43] *** Quits: DaNeenjah (~jake@adsl-74-230-8-177.hsv.bellsouth.net) (*.net *.split)
[20:46:43] *** Quits: vukky (~vukky@wikipedia/vukky) (*.net *.split)
[20:46:43] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[20:46:43] *** Quits: Batzy (~quassel@user/batzy) (*.net *.split)
[20:46:43] *** Quits: daoudr (~daoudr@xdsl-31-164-222-159.adslplus.ch) (*.net *.split)
[20:46:43] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[20:46:43] *** Quits: KeiraT (~k@lulzsec.co.uk) (*.net *.split)
[20:46:43] *** Quits: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (*.net *.split)
[20:46:43] *** Quits: RiFo (~RiFo@user/rifo) (*.net *.split)
[20:46:43] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (*.net *.split)
[20:46:43] *** Quits: tmart (~tmart@74-194-163-71.bcstcmtk01.res.dyn.suddenlink.net) (*.net *.split)
[20:46:43] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (*.net *.split)
[20:46:43] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[20:46:43] *** Quits: nicholaus04 (~nicholaus@172.58.75.57) (*.net *.split)
[20:46:43] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (*.net *.split)
[20:46:43] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[20:46:43] *** Quits: sazawal (~sazawal@122.161.81.235) (*.net *.split)
[20:46:43] *** Quits: sgn (~sgn@user/sgn) (*.net *.split)
[20:46:43] *** Quits: prime (~prime@user/prime) (*.net *.split)
[20:46:43] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (*.net *.split)
[20:46:43] *** Quits: KSaunderson (~user@142.93.152.208) (*.net *.split)
[20:46:43] *** Quits: llua (~llua@zsh/developer/llua) (*.net *.split)
[20:46:43] *** Quits: renrelkha (~renrelkha@user/renrelkha) (*.net *.split)
[20:46:43] *** Quits: lxer (~lx@ip5f5bf666.dynamic.kabel-deutschland.de) (*.net *.split)
[20:46:43] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (*.net *.split)
[20:46:43] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (*.net *.split)
[20:46:43] *** Quits: mei (~mei@user/mei) (*.net *.split)
[20:46:43] *** Quits: zaquest (~notzaques@5.130.79.72) (*.net *.split)
[20:46:43] *** Quits: gopar (~gopar@c-73-189-166-199.hsd1.ca.comcast.net) (*.net *.split)
[20:46:43] *** Quits: kdc (~kdc@196.211.197.159) (*.net *.split)
[20:46:43] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (*.net *.split)
[20:46:43] *** Quits: pankid (~quassel@pankid.club) (*.net *.split)
[20:46:43] *** Quits: moose (~moose@user/moose) (*.net *.split)
[20:46:43] *** Quits: luva (~luva@45.141.152.36) (*.net *.split)
[20:46:43] *** Quits: iwkse (~iwkse@iurit.com) (*.net *.split)
[20:46:43] *** Quits: toine (~antoine@2001:41d0:e:41f::1) (*.net *.split)
[20:46:43] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[20:46:44] *** Quits: qpdb (~qpdb@user/qpdb) (*.net *.split)
[20:46:44] *** Quits: flokuehn (~flokuehn@87.123.247.67) (*.net *.split)
[20:46:44] *** Quits: defjam (~eb0t@90.199.243.141) (*.net *.split)
[20:46:44] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[20:46:44] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (*.net *.split)
[20:46:44] *** Quits: SirScott (~SirScott@c-67-176-100-163.hsd1.co.comcast.net) (*.net *.split)
[20:46:44] *** Quits: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu) (*.net *.split)
[20:46:44] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (*.net *.split)
[20:46:44] *** Quits: driib2 (~driib@185.65.135.232) (*.net *.split)
[20:46:44] *** Quits: davef (~davef@user/davef) (*.net *.split)
[20:46:44] *** Quits: arcrin (~wbai@209.52.68.8) (*.net *.split)
[20:46:44] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (*.net *.split)
[20:46:44] *** Quits: HurricaneHarry_ (~quassel@84-85-122-182.fixed.kpn.net) (*.net *.split)
[20:46:44] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (*.net *.split)
[20:46:44] *** Quits: Mechanismus (~LabMonkey@206.255.106.67) (*.net *.split)
[20:46:44] *** Quits: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi) (*.net *.split)
[20:46:44] *** Quits: Evolver (sid32215@user/evolver) (*.net *.split)
[20:46:44] *** Quits: debnet (sid330295@python/afpy/debnet) (*.net *.split)
[20:46:44] *** Quits: hogarius (hogarius@id-222644.uxbridge.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: chromis (sid150893@id-150893.tinside.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: jpodivin (~jpodivin@cgnat44-pool3-69-58.poda.cz) (*.net *.split)
[20:46:44] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[20:46:44] *** Quits: hifi (hifi@m.vi.fi) (*.net *.split)
[20:46:44] *** Quits: m1dnight (~christoph@christophe.dev) (*.net *.split)
[20:46:44] *** Quits: greknod28 (~grek@120.88.171.98) (*.net *.split)
[20:46:44] *** Quits: Axy (~Axy@user/axy) (*.net *.split)
[20:46:44] *** Quits: loworderbit (~dave@S0106e81cba1736ea.ss.shawcable.net) (*.net *.split)
[20:46:44] *** Quits: dv^_^ (~dv@eclipse.oxfordfun.com) (*.net *.split)
[20:46:44] *** Quits: Geronimo (~Geronimo@user/geronimo) (*.net *.split)
[20:46:44] *** Quits: cyberpear (uid364019@fedora/cyberpear) (*.net *.split)
[20:46:44] *** Quits: shawwwn (uid6132@id-6132.helmsley.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: Rust\Chickatrice (aoei@nethackscoreboard/aoei) (*.net *.split)
[20:46:44] *** Quits: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (*.net *.split)
[20:46:44] *** Quits: a1paca (~a1paca@user/a1paca) (*.net *.split)
[20:46:44] *** Quits: dale (dale@user/dale) (*.net *.split)
[20:46:44] *** Quits: jpic (~jpic@82.142.20.182) (*.net *.split)
[20:46:44] *** Quits: dalan62367 (~dalan@14-202-182-202.tpgi.com.au) (*.net *.split)
[20:46:44] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[20:46:44] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[20:46:44] *** Quits: millido (~millido@84.210.150.128) (*.net *.split)
[20:46:44] *** Quits: iNeedKoffee (~ubuntu@public.sa-edbd-dsto-liva1.aarnet.net.au) (*.net *.split)
[20:46:44] *** Quits: henbruas (~henbruas@ti0003a400-4203.bb.online.no) (*.net *.split)
[20:46:44] *** Quits: Forkk (~forkk@li926-228.members.linode.com) (*.net *.split)
[20:46:44] *** Quits: dab21 (~dab21@pistis.amyanddavid.net) (*.net *.split)
[20:46:44] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[20:46:44] *** Quits: jab416171 (~jab416171@c-67-172-226-114.hsd1.ut.comcast.net) (*.net *.split)
[20:46:44] *** Quits: Strom (strom@fedora/strom) (*.net *.split)
[20:46:44] *** Quits: foo (~foo@user/foo/x-8763512) (*.net *.split)
[20:46:44] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (*.net *.split)
[20:46:44] *** Quits: bpalmer (~user@user/bpalmer) (*.net *.split)
[20:46:44] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:85bc:764e:7689:fb9f) (*.net *.split)
[20:46:44] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (*.net *.split)
[20:46:44] *** Quits: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5) (*.net *.split)
[20:46:44] *** Quits: nuala (~nuala@user/nuala) (*.net *.split)
[20:46:45] *** Quits: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::56df) (*.net *.split)
[20:46:45] *** Quits: odrling (~odrling@korone.aidoru.agency) (*.net *.split)
[20:46:45] *** Quits: lyr (~lyr@user/lyr) (*.net *.split)
[20:46:45] *** Quits: koopman (sid466269@id-466269.ilkley.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: eichin (sid27120@id-27120.tinside.irccloud.com) (*.net *.split)
[20:46:45] *** Quits: mdk (~mdk@python/psf/mdk) (*.net *.split)
[20:46:45] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[20:46:45] *** Quits: jessicara (~shirogits@user/jessicara) (*.net *.split)
[20:46:45] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[20:46:45] *** Quits: krisd (krisd@s0.mydevil.net) (*.net *.split)
[20:46:45] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[20:46:45] *** pwnd_sfw5 is now known as pwnd_sfw
[20:46:45] *** luva3 is now known as luva
[20:46:45] *** SirScott9 is now known as SirScott
[20:46:45] *** driib28 is now known as driib2
[20:46:45] *** Lord_of_Life_ is now known as Lord_of_Life
[20:46:45] *** Geronimo9 is now known as Geronimo
[20:46:45] *** dv^_^2 is now known as dv^_^
[20:46:45] *** greknod282 is now known as greknod28
[20:46:45] *** henbruas_ is now known as henbruas
[20:46:45] *** mei8 is now known as mei
[20:46:45] *** kn1000 is now known as kn100
[20:46:45] *** ayusta is now known as ayustae
[20:46:45] *** baltazaar is now known as baltazar
[20:46:45] *** c10l2 is now known as c10l
[20:46:45] *** dalan623673 is now known as dalan62367
[20:46:45] *** lyr3 is now known as lyr
[20:46:52] *** Joins: gopar_ (~gopar@c-73-189-166-199.hsd1.ca.comcast.net)
[20:46:58] <apocalyptech> raxor2k: Unless snapchat is dumb, that's only gonna get the account locked, fwiw.  But yeah, just pad with zeroes while printing
[20:47:15] <apocalyptech> f'{i:06d}'
[20:47:20] <MacGyver> I honestly don't care about the feasibility of this, I have no idea what kind of security snapchat uses, but you pad when outputting.
[20:47:32] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[20:47:39] *** Joins: mallkrampus (~mallkramp@148.72.164.200)
[20:47:51] *** Quits: fury (uid193779@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:48:03] <MacGyver> I'd contact snapchat support though
[20:48:07] *** Joins: Gerula_ (~Gerula@user/gerula)
[20:48:07] *** Gerula is now known as Guest199
[20:48:07] *** Quits: Guest199 (~Gerula@user/gerula) (Killed (lithium.libera.chat (Nickname regained by services)))
[20:48:07] *** Gerula_ is now known as Gerula
[20:48:07] *** Joins: tgamblin (~tgamblin@2607:fea8:c29d:d7c0::56df)
[20:48:13] <raxor2k> apocalyptech: f*ck snapchat, theyre fault for this, not my brother
[20:48:13] <MacGyver> But that's me.
[20:48:16] *** Quits: Darkfoe (sid402081@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[20:48:17] *** Joins: Andrynet (~Andrynet@190.152.206.99)
[20:48:20] *** Joins: mat001 (~mat001@c-71-202-208-251.hsd1.ca.comcast.net)
[20:48:21] *** Peng__ is now known as Peng
[20:48:24] *** Joins: qwert (~qwert@208.78.214.5)
[20:48:24] <raxor2k> but how do i pad ?
[20:48:28] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:48:46] <mefistofeles> raxor2k: apocalyptech just told you how
[20:48:47] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[20:49:06] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 245 seconds)
[20:49:08] <mefistofeles> raxor2k: https://pyformat.info/#number_padding fwiw (it doesn't have f-strings, but you can use the same with f-strings)
[20:49:27] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[20:49:32] *** Joins: fury (uid193779@id-193779.helmsley.irccloud.com)
[20:50:12] <qwert> Hi, what is the preferred way to set the instance attribute from outside of class? using property.setter or just change it directly (Class A:...   a = A()  a.name = "blabla")
[20:50:41] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[20:50:47] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[20:51:06] *** Joins: g0g0do (~doe@184-75-138-166.resi.cgocable.ca)
[20:51:26] *** Quits: gitly (~gitly@148.252.133.95) (Ping timeout: 260 seconds)
[20:51:26] <g0g0do> weird link.. radio frequencies in a human being https://www.youtube.com/watch?v=E1ZqRhe4lZE
[20:51:34] <jinsun> qwert: just set it directly
[20:51:34] *** Joins: white_pie (~white_sha@user/white-shadow/x-1132694)
[20:51:36] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 245 seconds)
[20:51:36] *** Parts: g0g0do (~doe@184-75-138-166.resi.cgocable.ca) ()
[20:51:38] *** Joins: nrg (~NRG@user/nrg)
[20:52:07] <jinsun> don't use propertly just to access a "private" field
[20:52:27] *** Joins: jiffe (~jiffe@mail.nsab.us)
[20:52:44] *** Quits: nrg (~NRG@user/nrg) (Remote host closed the connection)
[20:52:55] *** Joins: ThothCastel (sid78195@id-78195.tinside.irccloud.com)
[20:52:55] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[20:52:55] *** Joins: lericson (~lericson@user/lericson)
[20:52:55] *** Joins: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c)
[20:52:55] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:8054:dbbd:cb01:2aa3)
[20:52:55] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ccbf-b509-9dbf-5059.res6.spectrum.com)
[20:52:55] *** Joins: emf_ (~emf@2620:10d:c090:400::5:2b81)
[20:52:55] *** Joins: matdev (~matdev@2a01:6e60:10:793:666:feed:dead:beef)
[20:52:55] *** Joins: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7)
[20:52:55] *** Joins: onichomp (~onichomp@2806:264:4404:8039:13c:1f90:3fd4:3639)
[20:52:55] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[20:52:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:52:55] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[20:52:55] *** Joins: toine (~antoine@2001:41d0:e:41f::1)
[20:52:55] *** Joins: bpalmer (~user@user/bpalmer)
[20:52:55] *** Joins: Evolver (sid32215@user/evolver)
[20:52:55] *** Joins: debnet (sid330295@python/afpy/debnet)
[20:52:55] *** Joins: hogarius (hogarius@id-222644.uxbridge.irccloud.com)
[20:52:55] *** Joins: chromis (sid150893@id-150893.tinside.irccloud.com)
[20:52:55] *** Joins: bjs (sid190364@user/bjs)
[20:52:55] *** Joins: hifi (hifi@m.vi.fi)
[20:52:55] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[20:52:55] *** Joins: shawwwn (uid6132@id-6132.helmsley.irccloud.com)
[20:52:55] *** Joins: Rust\Chickatrice (aoei@nethackscoreboard/aoei)
[20:52:55] *** Joins: dale (dale@user/dale)
[20:52:55] *** Joins: dab21 (~dab21@pistis.amyanddavid.net)
[20:52:55] *** Joins: Strom (strom@fedora/strom)
[20:52:55] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[20:52:55] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:85bc:764e:7689:fb9f)
[20:52:55] *** Joins: gustik (~gustik@2a01:c844:240a:de20:3606:7339:bc88:b5f5)
[20:52:55] *** Joins: koopman (sid466269@id-466269.ilkley.irccloud.com)
[20:52:55] *** Joins: eichin (sid27120@id-27120.tinside.irccloud.com)
[20:52:55] *** Joins: jessicara (~shirogits@user/jessicara)
[20:53:09] <qwert> jinsun: thanks!
[20:53:15] *** Joins: akk (~akk@75.161.146.115)
[20:53:17] *** Joins: smeeagle (~smeeagle@2a00:23c8:9611:e600:e84c:31fa:24ac:a92f)
[20:53:25] *** Joins: nyah (~nyah@94.6.71.219)
[20:53:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:53:47] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[20:53:47] *** Joins: mdk (~mdk@python/psf/mdk)
[20:54:01] *** Joins: qpdb (~qpdb@user/qpdb)
[20:54:08] *** Joins: et (~et@user/et)
[20:54:12] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:54:35] *** davef_ is now known as davef
[20:54:45] *** Quits: white_shadow (~white_sha@user/white-shadow/x-1132694) (Ping timeout: 256 seconds)
[20:54:52] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:55:37] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:56:03] *** Joins: nrg (~NRG@user/nrg)
[20:57:08] *** Joins: gitly (~gitly@85.255.232.161)
[20:57:55] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:58:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:58:22] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[20:59:59] *** Quits: rickybob (rickybob@gateway/vpn/protonvpn/rickybob) (Remote host closed the connection)
[21:00:13] *** dcaro is now known as dcaro_away
[21:00:26] *** Quits: xdeadface (~xdeadface@gateway/tor-sasl/xdeadface) (Remote host closed the connection)
[21:00:31] *** Joins: xkuru (~xkuru@user/xkuru)
[21:00:34] *** Joins: xdeadface_ (~xdeadface@gateway/tor-sasl/xdeadface)
[21:00:45] *** Joins: greedom (~greedom@x59cc99a6.dyn.telefonica.de)
[21:00:47] *** Joins: rickybob (rickybob@gateway/vpn/protonvpn/rickybob)
[21:00:56] *** Joins: sazawal (~sazawal@122.161.81.235)
[21:02:37] *** Joins: AsenMx (~AsenMx@user/asenmx)
[21:02:41] *** Quits: vats (~vats@103.158.91.216) (Ping timeout: 256 seconds)
[21:02:45] *** Quits: falk689_ (~falk689-q@gateway/tor-sasl/falk689) (Ping timeout: 276 seconds)
[21:02:53] <white_pie> Hola!
[21:02:56] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[21:05:29] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[21:05:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:06:18] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:07:13] *** Quits: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net) (Remote host closed the connection)
[21:07:24] <sazawal> Hi all. If I have started a function in a thread using `await asyncio.to_thread()` (That is, high level api for starting a thread with ThreadPoolExecutor). Can I communicate with this thread using asyncio.Queue, since this was spawned from within an asyncio thread?
[21:07:56] *** Quits: xdeadface_ (~xdeadface@gateway/tor-sasl/xdeadface) (Remote host closed the connection)
[21:08:21] *** Joins: xdeadface_ (~xdeadface@gateway/tor-sasl/xdeadface)
[21:08:35] *** Joins: jyu_s (~f0fz@122.11.212.238)
[21:08:50] *** Quits: delvian (~delvian@41.13.228.246) (Ping timeout: 268 seconds)
[21:09:34] *** Joins: delvian (~delvian@41.13.192.102)
[21:09:48] *** Quits: gitly (~gitly@85.255.232.161) (Ping timeout: 260 seconds)
[21:09:48] *** Joins: XV8 (~XV8@199.192.138.251)
[21:10:50] *** Quits: jyu_s (~f0fz@122.11.212.238) (Read error: Connection reset by peer)
[21:11:30] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 260 seconds)
[21:11:55] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 268 seconds)
[21:12:01] *** Joins: arinov (~arinov@213.194.126.155)
[21:12:11] *** Joins: gitly (~gitly@185.69.145.151)
[21:12:32] *** Joins: jim (~jim@about/linux/staff/jim)
[21:12:32] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[21:14:02] *** Joins: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com)
[21:14:14] *** Joins: fikran (~fikran@user/fikran)
[21:14:25] *** llua` is now known as llua
[21:14:38] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[21:14:52] <bjs> sazawal: no, asyncio.Queue is not thread-safe
[21:15:25] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-56737b-238.dhcp.inet.fi) (Read error: Connection reset by peer)
[21:16:33] *** Quits: emf_ (~emf@2620:10d:c090:400::5:2b81) (Quit: emf_)
[21:18:02] *** Quits: shad (~shad@user/shad) (Ping timeout: 265 seconds)
[21:18:16] *** Quits: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com) (Ping timeout: 245 seconds)
[21:18:26] *** Joins: magla (~gelignite@55d4df7d.access.ecotel.net)
[21:18:46] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:18:47] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[21:19:50] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[21:20:21] *** Quits: gitly (~gitly@185.69.145.151) (Ping timeout: 245 seconds)
[21:21:10] *** Quits: sazawal (~sazawal@122.161.81.235) (Ping timeout: 268 seconds)
[21:21:18] *** Joins: shad (~shad@user/shad)
[21:22:39] *** Joins: gitly (~gitly@85.255.234.182)
[21:22:53] *** Quits: Moopiz (~Moopiz@37.97.4.244) (Quit: Client closed)
[21:23:09] *** Quits: codebam (~codebam@user/codebam) (Remote host closed the connection)
[21:23:41] *** Quits: junebug (~junebug@104-0-169-217.lightspeed.miamfl.sbcglobal.net) (Quit: Leaving)
[21:23:52] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[21:27:16] *** Joins: johnkeats6 (~johnkeats@2804:14c:32:a0cc:c531:2987:8b9a:7586)
[21:27:37] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[21:27:58] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[21:27:58] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:28:13] *** Joins: vince (~vince@75.127.14.76)
[21:28:23] *** Joins: imakestuff (~imakestuf@197.156.77.166)
[21:28:25] *** Joins: beli6147 (~Thunderbi@cpe-72-132-224-120.dc.res.rr.com)
[21:28:34] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 268 seconds)
[21:29:09] *** Quits: tar_xvf_ (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[21:29:18] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[21:29:43] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[21:29:53] *** Joins: codebam (~codebam@user/codebam)
[21:29:54] <johnkeats6> at work i'm coding this program that takes in client info from a hive db and applies a long-ish complicated-ish logic to it, a kind of 'game' they are playing where we check behavior to possibly increase their credit card limits. i'm doing it using pyspark and the code is getting pretty gross, it's about 1700 lines of udfs on top of udfs, i'm getting the distinct feeling that pyspark wasn't meant for this kind of stuff
[21:29:56] *** Joins: tar_xvf (~tar_xvf@ec2-3-136-243-174.us-east-2.compute.amazonaws.com)
[21:30:35] <johnkeats6> we're talking like 60 million entries or so, if you could redesign this from scratch what kind of solution do you think i should be using
[21:30:38] *** Quits: jay-m126_ (~jay-m@129.0.76.210) (Ping timeout: 260 seconds)
[21:30:39] *** Joins: sazawal (~sazawal@122.161.81.235)
[21:30:49] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[21:31:12] *** Quits: tobybl_ (~tobybl@213.31.134.21) (Remote host closed the connection)
[21:31:20] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[21:31:21] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[21:31:25] *** Quits: sazawal (~sazawal@122.161.81.235) (Remote host closed the connection)
[21:31:25] *** Joins: jay-m126_ (~jay-m@129.0.76.210)
[21:31:34] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 265 seconds)
[21:31:53] *** Joins: sazawal (~sazawal@122.161.81.235)
[21:32:02] *** Joins: sedeki (~textual@user/sedeki)
[21:32:13] *** Quits: SallyAhaj_ (~SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[21:32:42] *** Quits: sedeki (~textual@user/sedeki) (Client Quit)
[21:33:03] <sazawal> bjs, Sorry, got disconnected. How would I `await queue.get()` in the async thread then?
[21:34:06] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 245 seconds)
[21:34:36] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:35:02] *** Quits: s98259 (~s98259@user/helenah) (Read error: Connection reset by peer)
[21:35:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:36:04] <bjs> sazawal: okay well the thing is a bit nuanced, you can use a threading Queue so long as you're careful that you only use non-blocking methods on the asyncio side
[21:36:18] <bjs> sazawal: but an asyncio.Queue is totally thread-unsafe so you cannot use that
[21:36:19] *** Joins: arinov (~arinov@31.142.60.102)
[21:36:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[21:36:36] *** Quits: sleepingforest (~sleepingf@user/sleepingforest) (Ping timeout: 268 seconds)
[21:37:16] <sazawal> bjs, Hmm, so get_nowait function of threading queues
[21:37:45] *** Joins: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26)
[21:38:05] <bjs> sazawal: well,  yes get_nowait and put_nowait
[21:38:24] <sazawal> And this I would do irrespective of if the thread is spawned with Thread(target=...) or asyncio.to_thread(...)?
[21:38:34] <bjs> sazawal: it's threads either way
[21:38:37] <sazawal> bjs, Oh why put_nowait?
[21:38:49] <bjs> sazawal: well... it depends whether you're calling get or put in the async side
[21:38:51] <bjs> you didn't say ;)
[21:38:52] <sazawal> There is no waiting on the put side I guess
[21:38:57] *** Quits: ham5urg (~ham5urg@p200300d167387400108b360ca9d5b7b2.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:38:58] <bjs> well maybe you didn't say
[21:39:05] *** Joins: ham5urg (~ham5urg@p200300d1673874004d44d539a211dbdf.dip0.t-ipconnect.de)
[21:39:14] <sazawal> I am calling get on the async side
[21:39:24] <bjs> sazawal: this is probably the more awkward way around
[21:39:28] <sazawal> Yes, but does put block the thread?
[21:39:43] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[21:39:51] <bjs> sazawal: put() and get() both block, put_nowait() and get_nowait() do not block.
[21:40:17] *** Quits: white_pie (~white_sha@user/white-shadow/x-1132694) (Quit: Leaving)
[21:41:01] <sazawal> bjs, Strange! I don't see put() blocking the thread. Please tell my how does it happen, but before I have another question
[21:41:24] <bjs> sazawal: q = Queue(maxsize=1); q.put(1); q.put(2)
[21:41:33] <bjs> the second put() will block until there is space.
[21:41:36] *** Quits: jay-m126_ (~jay-m@129.0.76.210) (Ping timeout: 245 seconds)
[21:41:50] *** Quits: jay-m126 (~jay-m@129.0.76.210) (Ping timeout: 260 seconds)
[21:42:08] *** Quits: SpeakerToMeat (~Speaker@user/speakertomeat) (Read error: Connection reset by peer)
[21:42:14] <bjs> this is not a common usage (I think) but you didn't exactly say how you were using the queue :)
[21:42:28] <sazawal> If I am spawning two threads from within async thread, can I use create a threading queue at the async thread and pass it on to the two threads for inter-thread communication? (async is not involved in the way)
[21:42:37] <bjs> sazawal: yes
[21:42:41] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 265 seconds)
[21:43:06] *** foo_ is now known as foo
[21:43:10] <sazawal> bjs, I see. So if my queue size is unlimited, I can use put() on the async side?
[21:43:11] <CrtxReavr> I have had to explain to people who should really know better than difference between "queue" and "cue" way too many times.
[21:43:23] *** Quits: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[21:43:34] <bjs> sazawal: I'd still use put_nowait but yes you should be able to use put
[21:43:47] <sazawal> bjs, Alright
[21:43:52] <bjs> sazawal: you may also find https://docs.python.org/3/library/asyncio-future.html#asyncio.wrap_future interesting,  which is probably the way to the "nicest" solution
[21:43:57] *** Joins: Colt (~Colt@user/colt)
[21:44:03] *** Joins: Moyst_ (~moyst@user/moyst)
[21:44:04] <bjs> (to lift threading futures into async ones so you can `await` the event to read the queue)
[21:44:20] *** Quits: greedom (~greedom@x59cc99a6.dyn.telefonica.de) (Remote host closed the connection)
[21:44:52] *** Joins: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com)
[21:44:54] *** Joins: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[21:44:57] <sazawal> bjs, I see
[21:45:46] <sazawal> bjs, Is there a reason why I should use `await asyncio.to_thread(...)` instead of `threading.Thread(...)` in the async thread?
[21:46:27] <bjs> sazawal: well the `await` part makes sure that the thread work has finished before continuing the `async def` and ensures everything gets cleaned up properly
[21:46:34] *** Joins: dre (~dre@2001:8003:c932:c301:5609:7507:d2a0:8e2b)
[21:46:46] <sazawal> I have noticed that if I use threading.Thread(...) my join() function calls are not working properly (there could also be some issue with my code), but if I use .to_thread(), I don't have to worry about that.
[21:46:54] *** Joins: kostkon (~kostkon@2a02:587:a116:e46c:7814:108:8592:7c58)
[21:47:08] <bjs> sazawal: yes your join calls will block the async event loop
[21:47:20] <sazawal> bjs, Oohhh wow!
[21:47:30] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:47:33] <sazawal> So my suspicion was not entirely wrong
[21:47:39] <bjs> to_thread makes sure that you can `await` to wait for the threading event to finish
[21:47:53] <sazawal> I see
[21:47:55] <bjs> (infact the way to_thread makes that work is exactly by using the asyncio.wrap_future function I gave earlier)
[21:48:44] <sazawal> bjs, Okay
[21:48:46] <bjs> it takes the threading future awaiting the result from the thread pool and lifts into an asyncio future which to_thread returns.  So you can `await` it and it'll wait for the threading future to trigger.
[21:48:48] <leitz> If you're building a small python app, do the libraries go in "lib", "src", or "whatever", or what?
[21:49:23] *** Joins: luigibu1 (~luigibu@80.30.201.209)
[21:49:26] <CrtxReavr> That's a big, fat Depends(tm), sadly.
[21:50:06] <sazawal> bjs, Hmm, and I can also async.gather multiple asyncio.to_thread()
[21:51:02] *** Joins: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net)
[21:51:20] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:2d35:fa03:476d:9431)
[21:51:36] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[21:51:42] <HiccupJul> is it possible to interface with a program written in another programming language, without learning that language? or should i just use the program's command line interface + subprocess?
[21:52:14] <leitz> CrtxReavr, was that to me? If so, what are some of the things it depends on?
[21:52:14] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[21:52:49] <jealousmonk> is it possible to use numpy.savetxt() with different columns dtypes? what i'm doing wrong? https://bpa.st/PDUA
[21:53:01] <bjs> sazawal: yes to_thread returns an asyncio Future which is an awaitable
[21:53:11] <bjs> so it can be used anywhere that accepts any awaitable object
[21:53:26] *** Joins: jay-m126 (~jay-m@129.0.76.208)
[21:53:39] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[21:53:52] *** Joins: jay-m126_ (~jay-m@129.0.76.208)
[21:54:54] *** Quits: Tas-sos (~Tas-sos@78-203-151.adsl.cyta.gr) (Ping timeout: 260 seconds)
[21:55:03] *** Quits: frostschutz (~frostschu@2a01:c23:781b:fa00:1188:fa81:2726:60b7) (Ping timeout: 264 seconds)
[21:56:02] *** Quits: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc) (Ping timeout: 240 seconds)
[21:56:56] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[21:57:10] *** Joins: emf (~emf@2620:10d:c090:400::5:2b81)
[21:57:23] *** Joins: SpeakerToMeat (~Speaker@user/speakertomeat)
[21:57:29] <SnoopJ> jealousmonk, your list-of-lists as an array does not have different column dtypes, it has just one dtype, '<U3' (it's coercing the integers to strings). You probably should be making a structured array.
[21:57:53] <CrtxReavr> leitz, it's affected by how you developed it, how it's being deployed, and how it's being run.
[21:58:01] <CrtxReavr> It's also affectd by religious zealousy.
[21:58:09] *** Quits: imakestuff (~imakestuf@197.156.77.166) (Remote host closed the connection)
[21:58:22] *** Quits: daoudr_ (~daoudr@xdsl-31-164-222-159.adslplus.ch) (Quit: Leaving)
[21:58:36] <CrtxReavr> sys.path is a list of directories where a python instance will look for modules to import.
[21:58:47] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 256 seconds)
[21:58:51] <leitz> CrtxReavr, thanks! Not deployed, run on my local box, by me. Less about religion but hyped about doing good Python.
[21:59:05] *** Joins: lacrymology (~lacrymolo@181.167.210.254)
[21:59:12] <leitz> CrtxReavr, I'm re-doing me resume writer, sadly.  :(
[21:59:17] <CrtxReavr> There's debate on whether or not it's okay to manipulate sys.path and how it should be done.
[21:59:30] *** Quits: luigibu1 (~luigibu@80.30.201.209) (Ping timeout: 260 seconds)
[21:59:42] <CrtxReavr> Some people go to extememe measure to avoid directly manipulating it.
[22:00:05] <CrtxReavr> extreme
[22:00:27] *** Joins: Moyst_ (~moyst@user/moyst)
[22:00:31] <leitz> I'm going to run the command from the directory, and mainly want to put the classes into their own files for ease of reading.
[22:00:47] <CrtxReavr> Depends on if a venv or virtualenv is involved.
[22:01:03] *** Quits: the_lanetly_052 (~the_lanet@185.30.90.203) (Ping timeout: 265 seconds)
[22:01:08] <leitz> None at the moment, I tend to stick to the std lib.
[22:01:53] <jealousmonk> SnoopJ: hmm, I'll try that! thank you!
[22:01:55] <CrtxReavr> Lots of ways to do it. . . almost all will spark empassioned debate.
[22:02:08] *** Joins: vakera_pingveno (~dan@107-209-165-75.lightspeed.hstntx.sbcglobal.net)
[22:02:24] <leitz> Ah, one of those sorts of issues...
[22:03:16] *** Quits: ham5urg (~ham5urg@p200300d1673874004d44d539a211dbdf.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[22:04:07] <CrtxReavr> I think it's okay to judiciously add a directory or two to sys.path. .. you append sys.path, or you can affect with an environment variable (PYTHONPATH) at runtime.
[22:05:06] <HiccupJul> to elaborate on my earlier question, i mean - is there some python library that lets you interface with a c++ program, without having to think about the C++ data types - e.g. its all done automatically?
[22:05:10] <CrtxReavr> Thinks will run faster when each .py file has its corresponding .pyc (bytecode) file, so that's a factor.
[22:05:19] <leitz> In years gone by (I move into and out of Python as work needs demand) I've had issues testing things with directories on the import statement.
[22:05:29] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 250 seconds)
[22:05:47] <CrtxReavr> s/Thinks/Things
[22:06:54] <SnoopJ> jealousmonk, https://bpa.st/FQWA
[22:09:55] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[22:09:56] *** Joins: nomic (~nomic@185.217.117.164)
[22:09:58] *** Joins: velgin__ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[22:11:21] *** Joins: guenhael1 (~Thunderbi@aaubervilliers-652-1-290-168.w82-121.abo.wanadoo.fr)
[22:11:30] *** Joins: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net)
[22:12:10] *** Quits: thurs80601421 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[22:12:10] *** Quits: guenhael (~Thunderbi@2a01cb008c3d5800e04c7d30ec5d9da9.ipv6.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[22:12:10] *** guenhael1 is now known as guenhael
[22:13:33] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[22:13:37] *** Quits: causasui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[22:14:02] *** Joins: mven6 (~mven@ip68-104-39-54.lv.lv.cox.net)
[22:14:32] *** Joins: sandb0y (~pirate@user/sandb0y)
[22:14:40] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[22:15:08] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Ping timeout: 260 seconds)
[22:15:08] *** mven6 is now known as mven
[22:15:13] *** Quits: Atlas667 (~Atlas667@94.198.42.62) (Ping timeout: 256 seconds)
[22:15:54] *** Quits: velgin__ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Quit: Leaving)
[22:15:58] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Quit: Leaving)
[22:15:59] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:16:15] *** Joins: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net)
[22:16:42] *** Joins: Atque (~Atque@user/atque)
[22:16:46] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Quit: https://kn100.me :))
[22:17:03] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:17:16] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:17:20] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[22:17:28] *** Quits: lacrymology (~lacrymolo@181.167.210.254) (Ping timeout: 260 seconds)
[22:18:15] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Read error: Connection reset by peer)
[22:18:25] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[22:18:45] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[22:19:37] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[22:19:56] *** Quits: mallkrampus (~mallkramp@148.72.164.200) (Ping timeout: 245 seconds)
[22:20:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[22:20:41] *** Quits: ArtfulDodger (~ArtfulDod@2a04:cec0:113a:5359:72b8:2f08:5ff5:4acf) (Read error: Connection reset by peer)
[22:21:11] *** Quits: kdc_ (~kdc@196.211.197.159) (Quit: Leaving)
[22:21:15] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[22:21:57] *** Joins: parv (~quass@user/parv)
[22:22:58] *** Joins: MiraCat (~MiraCat@c-24-30-27-91.hsd1.ga.comcast.net)
[22:23:22] *** Joins: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225)
[22:24:21] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:24:31] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 245 seconds)
[22:25:00] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[22:25:19] *** Quits: velgin_ (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[22:25:48] <jealousmonk> SnoopJ: nice!
[22:26:06] <MiraCat> Let me ask you a question that is a logical extreme. Could a simple OS be made in python? Just had a wondering.
[22:26:25] <kenwoodfox> I was thinking it would be cool as a little project to use opencv and python to draw a censor-bar mask over detected faces in a webcam
[22:26:36] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[22:26:42] <kenwoodfox> maybe for piping into obs or something, would be nifty :3 anybody ever done something like that before?
[22:26:45] *** Quits: gitesh (uid423739@id-423739.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:27:09] *** Joins: syrius (syrius@titan.stormtek.net)
[22:27:14] *** Joins: Colt (~Colt@user/colt)
[22:27:29] *** Quits: raxor2k (~raxor2k@fwa5cd2-48.bb.online.no) (Remote host closed the connection)
[22:27:52] *** Joins: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[22:29:23] *** Quits: jay-m126 (~jay-m@129.0.76.208) (Ping timeout: 256 seconds)
[22:29:27] *** Quits: arinov (~arinov@31.142.60.102) (Read error: Connection reset by peer)
[22:29:58] *** Quits: jay-m126_ (~jay-m@129.0.76.208) (Ping timeout: 256 seconds)
[22:31:18] *** Joins: {HD} (~{HD}@86.106.121.200)
[22:31:51] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:32:04] *** Joins: ianliu (~ianliu@200-232-249-142.dsl.telesp.net.br)
[22:32:20] *** Joins: Colt (~Colt@user/colt)
[22:33:22] <ianliu> I have a virtual env and I installed jupyter lab inside it. When I launch jupyterlab, it isn't setting the sys.path correctly. Looks like my host's python. If I launch jupyter notebook instead, everything works correctly. Any hints?
[22:33:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[22:33:29] *** Joins: mallkrampus (~mallkramp@148.72.164.202)
[22:33:29] *** Joins: Colt1 (~Colt@user/colt)
[22:33:42] *** Quits: Colt1 (~Colt@user/colt) (Remote host closed the connection)
[22:34:13] *** Joins: lacrymology (~lacrymolo@181.167.210.254)
[22:34:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:35:30] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[22:35:38] *** Joins: vukkied (~vukky@wikipedia/vukky)
[22:36:37] *** Joins: Colt (~Colt@user/colt)
[22:37:09] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[22:37:22] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[22:38:00] <grym> ianliu: you probably have more than one jupyterlab installed
[22:38:12] <grym> (and you're calling the wrong one)
[22:38:29] *** Quits: mathe8787 (~wellmathe@85.251.70.233.dyn.user.ono.com) (Quit: Leaving)
[22:38:50] <powftw> https://www.irccloud.com/pastebin/3m3wu3C6
[22:39:19] *** Quits: rsx (~dummy@ppp-188-174-133-225.dynamic.mnet-online.de) (Quit: rsx)
[22:39:42] *** Quits: vukkie (~vukky@wikipedia/vukky) (Ping timeout: 260 seconds)
[22:39:51] <powftw> Hey guys, I'm behind on solving this problem for a while
[22:39:54] *** Joins: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net)
[22:40:05] <powftw> A day to be specific
[22:40:26] <nedbat> powftw: your expected output isn't valid Python. (the braces/brackets don't even match)
[22:40:38] <nedbat> (or the quotes)
[22:40:48] *** Quits: causa_sui (~causasui@c-68-60-125-136.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[22:41:41] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[22:41:50] <powftw> Sorry
[22:41:57] <powftw> ``{[('a', '1'):2 , ('b','4'):2', ('a', '1'):1, '('c','3'):2}`
[22:42:16] <powftw> This is the expected output. I missed a value of one key
[22:42:20] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[22:42:38] <nedbat> powftw: this isn't Python:  [('a', '1'):2]
[22:42:46] <bjs> powftw: this is familiar,  were you here with this problem (or a very similar one) some days ago?
[22:42:52] <nedbat> powftw: maybe you just have an extra [
[22:43:26] *** Quits: MiraCat (~MiraCat@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[22:43:26] <nedbat> powftw: actually, you have a few problems.  Please spend the time to double-check your desired output before people start puzzling over it.
[22:43:37] *** Quits: jim (~jim@about/linux/staff/jim) (Ping timeout: 250 seconds)
[22:43:47] <powftw> bjs: yes, somebody answered the solution. That's in that question. It's not giving intended output
[22:44:05] <bjs> powftw: well many people answered, I believe I gave a solution (using itertools)
[22:44:08] <powftw> nedbat: I'm really sorry.
[22:44:14] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[22:44:20] *** Joins: shad (~shad@user/shad)
[22:44:21] *** Joins: kosh_ (~kosh@user/kosh)
[22:44:25] *** Joins: ham5urg (~ham5urg@p200300d1673fa300186b888cea5915f4.dip0.t-ipconnect.de)
[22:44:25] <bjs> powftw: I think the solution here does not work, it just counts the number of times the pairs appear
[22:44:28] <bjs> which isn't quite what you asked about?
[22:44:31] <ianliu> grym: ah, maybe it is a hash issue
[22:44:37] <powftw> bjs: that was for the groupby
[22:44:42] <powftw> Another problem
[22:45:01] <bjs> powftw: isn't it a very similar problem?
[22:45:07] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:45:08] <bjs> you still have "groups" of pairs here?
[22:45:53] *** Joins: Nine_BAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net)
[22:46:15] <powftw> ```{[('a', '1'):2 , ('b','4'):2, ('a', '1'):1, '('c','3'):2}``` expected output
[22:46:33] <powftw> bjs: will grouping work here 🤔🤔
[22:46:42] *** Quits: Nine_BAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Client Quit)
[22:47:08] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[22:47:17] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:24] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[22:47:59] <nedbat> powftw: did you try pasting that into a python repl?
[22:48:07] *** Quits: NineBAR (~NineBAR@c-107-5-176-200.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[22:48:23] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[22:48:24] *** Joins: jim (~jim@about/linux/staff/jim)
[22:48:38] <bjs> powftw: that "expected output" isn't valid Python, so I'm confused
[22:48:56] <nedbat> powftw: remember, you can't have two equal keys.
[22:49:02] <bjs> powftw: but what changed since I gave my groupby solution, isn't it the same problem?
[22:49:04] *** Joins: BSaboia (~bsaboia@177.37.198.11)
[22:49:31] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 245 seconds)
[22:49:42] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[22:49:44] <nedbat> powftw: perhaps you want this output?   {('a', '1'):2 , ('b','4'):2, ('a', '1'):1, ('c','3'):2}     but that evaluates to  {('a', '1'): 1, ('b', '4'): 2, ('c', '3'): 2}
[22:50:22] *** Joins: AsenMx (~AsenMx@user/asenmx)
[22:52:25] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0074-2ca5-a34e-fe74.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:52:32] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[22:54:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:55:04] <powftw> Omg
[22:55:57] <powftw> I can't believe I choose a data structure which doesn't allow duplicate keys. So it was overwriting new key if that key:value already exists
[22:56:17] <powftw> nedbat: yes, that's helped
[22:56:42] <powftw> I'm such an as*
[22:57:38] *** Quits: jealousmonk (~user@2804:431:e7c5:a365:cf0:d781:d307:9a26) (Quit: ERC (IRC client for Emacs 27.1))
[22:59:29] <powftw> Is there a way for this list ```a= ['a' , '1' , 'a' , '1' , 'b', '4' , 'a' ,'1', 'b', '4', 'c' , '3' , 'c', '3']``` to represent duplicate adjacent values with count?
[22:59:40] <powftw> Which method should I choose?
[22:59:56] <bjs> powftw: if you mean "is there a built-in method to do this for me?" the answer is no.
[23:00:04] <nedbat> powftw: do you mind if we take a step back?
[23:00:32] *** Quits: Moyst_ (~moyst@user/moyst) (Ping timeout: 240 seconds)
[23:00:47] <nedbat> powftw: can you tell us where this data comes from, and why you want to count these repetitions, and what you will do with the result?
[23:00:51] <powftw> bjs: ohk. Can grouping help?
[23:01:10] <IceMichael> hi guys
[23:01:13] <bjs> powftw: I'm still unsure how this question is different to the one I already answered the other day
[23:01:24] <IceMichael> why can multiprocessing pool not spawn child processes when daemons are used? https://stackoverflow.com/questions/6974695/python-process-pool-non-daemonic
[23:01:43] <IceMichael> #linux says that it's NOT linux-specific, daemon processes can spawn child processes
[23:01:48] <IceMichael> so why not multiprocessing pool?
[23:01:56] *** Joins: Moyst_ (~moyst@user/moyst)
[23:01:59] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[23:02:01] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[23:02:07] *** Joins: chuck_ (~chuck@181.191.143.126)
[23:02:09] <powftw> bjs: where you literally grouped using groupby() and checked..
[23:02:17] <powftw> It should work right?
[23:02:35] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[23:02:41] <bjs> powftw: well that was my answer to the question then,  I don't see what's changed isn't this the same problem?
[23:02:49] <powftw> nedbat: it's a question given from my friend. He and myself trying to solve it
[23:03:18] <nedbat> powftw: what are the actual requirements? Are you allowed to design any result data structure you want?
[23:03:49] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[23:04:29] <powftw> bjs: that solution works. But when we groupby() , it either group by 2 which then what if the array is len(odd) , then -1 index can't be checked..
[23:05:28] *** Quits: vulpes_vulpes (~vulpes_vu@62-64-204-12.dynamic.dial.as9105.com) (Remote host closed the connection)
[23:06:13] <powftw> nedbat: yes, output in any data structure. But before you waste time on this, let me go through bjs: 's solution once again except the edge case of len(odd) with array, I think it helps
[23:07:04] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[23:07:39] <jinsun> do you have any example of odd case? from the example you gave above I thought you wil always have even number of items
[23:07:53] *** Quits: gitly (~gitly@85.255.234.182) (Ping timeout: 250 seconds)
[23:08:37] *** Joins: Arw- (~Arwalk@lfbn-dij-1-163-68.w109-215.abo.wanadoo.fr)
[23:08:59] *** Joins: henistein (~henistein@2001:8a0:fc9f:bc01:659f:ce4c:1d7:99b8)
[23:09:06] *** Quits: delvian (~delvian@41.13.192.102) (Ping timeout: 245 seconds)
[23:09:42] *** Quits: Arw (~Arwalk@lfbn-dij-1-163-68.w109-215.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[23:09:49] *** Joins: delvian (~delvian@41.13.192.102)
[23:09:52] <powftw> I'll ask once I try again..
[23:09:58] *** Joins: gitly (~gitly@85.255.232.171)
[23:09:58] <powftw> Thank you all
[23:11:22] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:13:04] *** Joins: vats (~vats@103.158.91.123)
[23:14:27] <leitz> How do you iterate over a sorted list?  So far "sort(my_list)" and "my_list.sort()" don't seem to work.
[23:14:54] <leitz> In this case, my_list is a list of strings.
[23:14:58] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:15:09] <bjs> leitz: did you mean sorted()?  my_list.sort() also works (it sorts the list) and then you can iterate over the list normally
[23:16:17] <leitz> Ah, bjs, I was using "for l in my_list.sort():", which didn't seem to work.
[23:16:39] <leitz> sorting the list first works, though.
[23:17:13] <bookworm> sorr returns None, it modifies in place
[23:17:14] *** Quits: HiccupJul (~HiccupJul@cpc122682-reig6-2-0-cust39.6-3.cable.virginm.net) (Remote host closed the connection)
[23:17:23] <bookworm> sorted gives you a new sorted list
[23:17:45] <bookworm> you need to pick if you want to edit or copy
[23:19:44] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:20:03] *** Joins: asa22 (~asa22@84.125.126.192.dyn.user.ono.com)
[23:20:23] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:20:48] <asa22> what does a good project on a self taught portfolio look like, like what kind of project would be impressive
[23:21:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[23:21:42] *** Quits: BSaboia (~bsaboia@177.37.198.11) (Quit: This computer has gone to sleep)
[23:21:51] <leitz> asa22, do a project that you want; the motivation will help you keep going. Make sure you have it in git, have tests, and documentation.
[23:22:11] <IceMichael> ok, multiprocessing uses the daemonic name wrongly
[23:22:14] <IceMichael> it should be called detached
[23:22:44] *** Joins: plastico (~plastico@neomutt/plastico)
[23:22:58] <leitz> asa22, Python, like most general purpose languages, has a very wide utilization path. Do what you want to do more of, and try to get a job doing that.
[23:23:11] <powftw> bjs: i was running the groupby() you have on ```a = ['a', 'a', 'b', 'b', ':', 'a', 'a', 'a', 'b']``` we got ```['a', 'b', ':', 'a', 'b']``` which is half of what i need. Can i also get HOW MANY TIMES ADJACENT VALUES HAVE REPEATED?
[23:23:27] <bjs> powftw: why the caps?
[23:23:35] *** Joins: fikran (~fikran@user/fikran)
[23:23:54] <powftw> bjs: idk, sorry if it bothers
[23:24:09] <bjs> powftw: I'm not sure what you mean by "the groupby() you have" (I dont have anything anymore);  but the groupby should give you each group
[23:24:18] <bjs> so you can just see how many things are in the group no?
[23:24:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0074-2ca5-a34e-fe74.res6.spectrum.com)
[23:24:49] *** vukkied is now known as vukky
[23:28:01] *** Quits: Arw- (~Arwalk@lfbn-dij-1-163-68.w109-215.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[23:28:16] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[23:28:19] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:28:58] *** Quits: asa22 (~asa22@84.125.126.192.dyn.user.ono.com) (Quit: Client closed)
[23:29:14] *** Joins: damxsa (~damx@2001:16a2:cc46:e600:cd17:6bf3:a5a4:8bdc)
[23:29:40] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[23:29:56] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[23:29:58] <bjs> powftw: see https://bpa.st/2SGA , you can see that there were the following groups: "aa" (once), then "bb" (once) then "cc") (twice) then "aa" (once).  Note the "d" got lost, but that's because the zip() dropped it, not because of groupby()
[23:30:04] *** Quits: velgin (~velgin@pool-96-237-105-119.bstnma.fios.verizon.net) (Quit: okbye)
[23:30:10] <powftw> https://www.irccloud.com/pastebin/WZ0LodcG/
[23:30:17] <powftw> ii'm getting closer!!!!
[23:30:24] <bjs> and of course zip() and groupby() are just fancy functions that you can do yourself in Python with for loops and lists and indexing and whatever else you need
[23:30:41] <bjs> powftw: why do you have an `else` there?
[23:31:02] <powftw> that's right
[23:31:06] <bjs> what's right?
[23:31:08] <powftw> i dont need it
[23:31:47] <powftw> i'm trying to append the count along with the charas
[23:31:50] <powftw> characters
[23:32:09] *** Joins: capnyesterday (uid528258@id-528258.lymington.irccloud.com)
[23:32:25] *** Joins: Arw (~Arwalk@lfbn-dij-1-1462-22.w109-221.abo.wanadoo.fr)
[23:34:53] *** Joins: ExeciN (~ExeciN@user/nicexe)
[23:34:54] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[23:36:31] *** Quits: chuck_ (~chuck@181.191.143.126) (Quit: leaving)
[23:38:24] <bjs> powftw: it was just that for/else is a weird mechanism and you didn't seem to be using it correctly
[23:38:29] <bjs> (you had no `break`s)
[23:39:14] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[23:39:21] <powftw> https://www.irccloud.com/pastebin/zSacuX9B/
[23:39:38] <powftw> it was me forgot to remove else after removing if
[23:41:01] *** Quits: nos0u1 (nosoul@gateway/vpn/protonvpn/nosoul) (Ping timeout: 250 seconds)
[23:42:44] *** Joins: Donitz (~Donitz@88-115-149-152.elisa-laajakaista.fi)
[23:43:25] <powftw> bjs:  in my solution, is it possible to append number of repeats along repeats?
[23:43:42] <bjs> powftw: like append((i,len(l)) ?
[23:45:01] <powftw> exactly
[23:45:27] <powftw> bjs: but append onl;y takes 1 argument
[23:45:35] <bjs> powftw: my line only passes 1 argument
[23:49:17] *** Joins: cosimone (~user@93-47-230-47.ip115.fastwebnet.it)
[23:49:25] <powftw> ```temp.append((i,len(l)))```
[23:49:30] <powftw> does the job
[23:49:41] <powftw> [('a', 2), ('b', 2), (':', 1), ('a', 3), ('b', 1)]
[23:49:55] <powftw> seems job is finally done
[23:50:27] <powftw> bjs: you have been with me , thank you very much man
[23:50:34] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[23:50:44] <powftw> for saving hours and hours/ energy
[23:50:58] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 256 seconds)
[23:51:01] <powftw> nedbat: thank you
[23:51:29] *** Joins: y1n (~y1n@178.115.43.136.wireless.dyn.drei.com)
[23:52:14] *** Quits: nomic (~nomic@185.217.117.164) (Quit: Leaving)
[23:52:26] *** Quits: causa-sui (~causasui@c-73-191-216-12.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[23:54:13] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[23:55:16] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[23:55:21] *** Quits: alphasierra (~alphasier@2405:201:e:4d:a21f:bc:3e70:2225) (Ping timeout: 245 seconds)
[23:56:54] *** Quits: Ranhir (~Ranhir@157.97.53.139) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[23:58:22] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Quit: SO LONG SUCKERS!)
[23:59:29] *** Joins: bomb-on (~bomb-on@194.144.47.113)
