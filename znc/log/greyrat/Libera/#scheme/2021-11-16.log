[00:12:16] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:717c:39d4:a2c5:b35a) (Ping timeout: 256 seconds)
[00:24:29] *** Joins: civodul (~user@guix/contributor/civodul)
[00:34:38] *** Joins: badkins (~badkins@136.56.92.199)
[00:48:23] *** Joins: mononote (~mononote@user/mononote)
[01:14:07] <jcowan> Historically I have treated "A depends on B, but B doesn't pass" as "votes for A imply votes for B"
[01:17:17] *** Quits: klovett (~klovett@166.205.90.177) (Quit: ZZZzzz…)
[01:20:22] *** Joins: elderK (uid205007@helmsley.irccloud.com)
[01:36:06] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Ping timeout: 256 seconds)
[01:39:23] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[01:47:15] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[01:58:03] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[02:00:50] *** Quits: zwr (~zwr@2804:d45:b966:fb00:f670:f79d:3e7d:a052) (Remote host closed the connection)
[02:01:00] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c972:cfd6:54b3:c83e)
[02:27:59] *** Joins: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net)
[02:32:35] <pi0> (define z '(clam starfish (squid octopus) mollusc)) # (car (rest (rest z))) # i am able to take out '(squid octopus)
[02:32:56] <pi0> but how can i get down to just squid
[02:40:57] <Zipheir> More cars.
[02:44:53] <pi0> in the front or end?
[02:46:22] <Zipheir> If (car (rest (rest z))) is (squid octopus) and (car '(squid octopus)) is squid, then ...?
[02:46:26] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:f999:7dbf:ab48:5803) (Ping timeout: 265 seconds)
[02:46:46] <Zipheir> It's just a matter of substitution.
[02:51:45] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 265 seconds)
[02:52:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:59:09] *** Quits: cjb (~cjbayliss@user/cjb) (Remote host closed the connection)
[03:02:23] *** Joins: cjb (~cjbayliss@user/cjb)
[03:19:57] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:23:36] <fizzie> On another note, though... car + rest? You'd expect car + cdr, head + tail or first + rest, but not a mixture of any of the pairs.
[03:24:20] *** Quits: seepel (~seepel@c-24-4-200-111.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[03:24:20] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[03:24:59] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[03:27:07] *** Joins: badkins (~badkins@136.56.92.199)
[03:47:41] <Zipheir> True.  It was clear enough in context, though.
[03:54:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:7c12:e31e:34fb:c517) (Ping timeout: 265 seconds)
[03:55:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:06:50] *** Joins: klovett (~klovett@166.205.90.177)
[04:13:19] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[04:47:46] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Ping timeout: 268 seconds)
[05:00:40] *** Quits: X-Scale (~ARM@31.22.167.45) (Ping timeout: 256 seconds)
[05:01:52] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[05:02:29] *** X-Scale` is now known as X-Scale
[05:27:11] *** Joins: TCZ (~jan@91.150.165.88)
[05:28:07] *** Parts: TCZ (~jan@91.150.165.88) ()
[05:29:23] *** Joins: TCZ (~tcz@91.150.165.88)
[05:32:25] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[05:40:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[05:48:15] *** Joins: s-liao (~s-liao@101.86.101.64)
[05:51:52] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[05:52:28] *** Joins: badkins (~badkins@136.56.92.199)
[05:52:40] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[05:59:02] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Ping timeout: 256 seconds)
[05:59:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[06:03:26] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:10:03] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[06:12:46] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Remote host closed the connection)
[06:16:11] *** Joins: seninha (~seninha@user/seninha)
[06:23:12] *** Joins: badkins (~badkins@136.56.92.199)
[06:28:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[06:29:29] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[06:30:54] *** Joins: badkins (~badkins@136.56.92.199)
[06:30:56] *** Quits: TCZ (~tcz@91.150.165.88) (Quit: Leaving)
[06:36:18] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[06:41:03] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[06:42:23] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[06:50:27] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:00:29] <pi0> Define a recursive function sum to find the sum of the numbers in a list.
[07:34:56] *** Joins: badkins (~badkins@136.56.92.199)
[07:39:20] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:43:16] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Client closed)
[07:51:18] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:52:21] *** Joins: livoreno (~livoreno@user/notzmv)
[07:53:09] *** Joins: shawnw (~shawn_w@152.44.212.188)
[07:54:57] *** Quits: s-liao (~s-liao@101.86.101.64) (Client Quit)
[08:44:54] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[08:46:29] <pi0> anyone awake
[08:46:44] <light> yes
[08:46:52] <pi0> can you help with something
[08:47:06] <light> sure
[08:48:28] <pi0> **Try to Define a tail recursive version of sum. (Define an auxiliary function if needed.)
[08:48:38] <pi0> i need to covert my previous function
[08:48:45] <pi0> to tail recursion
[08:49:03] <light> ok, what have you come up with so far?
[08:49:10] <pi0> let me show you
[08:49:50] <pi0> https://i.imgur.com/EM9iQU0.png
[08:52:21] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:52:33] <light> and where are you struggling?
[08:52:58] <pi0> creating the exact same thing using tail recursion
[08:53:02] <pi0> not even sure were to start
[08:55:33] <light> you would write a helper procedure for this that takes a list of numbers to be summed and another parameter which is the total so far
[08:57:05] <light> does that make sense?
[08:57:11] <pi0> hmm
[08:57:28] <pi0> i dont suppose you can assist with this one
[08:57:33] <light> sure
[08:57:34] <pi0> :/ i am in the dark
[08:58:48] <light> lets start by defining your procedure, it should take two arguments a list of numbers and a total
[08:58:54] <light> can you do this?
[09:00:01] <pi0> (define (recSum list total)
[09:00:10] <pi0> or better yet
[09:00:20] <pi0> (define (recSum myList total)
[09:00:27] <light> good
[09:00:46] <light> now when writing a recursive procedure we need to have a terminating condition, what should our terminating condition be?
[09:01:20] <pi0> total == 0
[09:01:26] <light> no
[09:01:29] <pi0> or myList == 0
[09:01:33] <pi0> right since that is the count
[09:01:37] <light> we stop when we've run out of numbers to count
[09:01:59] <light> if our we have a list of numbers, how do we know when we've run out?
[09:02:00] <pi0> which would be myList?
[09:02:04] <light> yes
[09:02:15] <light> what should our test condition be?
[09:02:22] <pi0> if null?
[09:02:28] <light> correct
[09:02:48] <light> so if we have nothing left to count, what should we return?
[09:03:04] <pi0> (if (null? myList) 0
[09:03:09] <light> no
[09:03:19] <light> we're adding up our numbers and storing them in total
[09:04:03] <light> what should we return?
[09:04:26] <pi0> total
[09:04:30] <light> sounds good to me
[09:04:51] <pi0> (if (null? myList)  ; test if list is null
[09:05:30] <light> yes
[09:05:47] <pi0> but we are adding my list or just total?
[09:05:56] <light> pardon?
[09:06:23] <light> we're now onto the final line of your procedure the one that actually does the summation
[09:06:38] <light> so if we still have numbers left to sum, how do we do it with our new helper function?
[09:07:41] <pi0> that is the tricky part
[09:07:43] <pi0> i am not sure
[09:07:45] <light> ok
[09:07:48] <pi0> sorry just a few days in scheme
[09:07:53] <light> that's alright :)
[09:08:02] <light> well our procedure takes two parameters, a list of numbers and a sum thus far
[09:08:59] <pi0> i see that
[09:08:59] <light> we need to add the next number on the list to the total
[09:09:05] <light> how can we get the next number?
[09:09:43] <pi0> (+ total (car mylist )
[09:09:49] <light> very good
[09:10:01] <light> and how do we say "the rest of the numbers"
[09:10:34] <pi0> add rest in the front?
[09:11:01] <light> if we have a list of numbers (1 2 3) and (car (1 2 3)) is 1, how do we get the rest of them: (2 3)
[09:13:04] <pi0> (car (rest 1 2 3))
[09:13:14] <pi0> wait min
[09:13:16] <pi0> car again
[09:13:18] <pi0> to get the next
[09:13:39] <pi0> can we keep using car to get the next first one?
[09:13:56] <light> no not car
[09:14:05] <light> in this case we use cdr
[09:14:40] <light> car gets you the next item in the list, cdr gets you the rest of the list
[09:14:52] <light> does that make sense?
[09:15:38] <light> you can try it out with a list
[09:15:42] <pi0> (cdr myList)
[09:15:45] <light> correct
[09:16:03] <light> so we know how to get the rest of the list, and we know how to get the sum of the total plus the next item in the list
[09:16:07] <pi0> ~paste
[09:16:09] <light> so how do we recursively call our helper function?
[09:16:51] <pi0> which one is my helper function
[09:17:01] <light> the procedure that we've just written together
[09:17:02] <pi0> its not recSum is it
[09:17:12] <pi0> i thought we wrote recSum
[09:17:22] <pi0> (define (recSum myList total)
[09:17:22] <pi0>   (if (null? myList)
[09:17:22] <pi0>       (+ total (car myList)
[09:17:23] <pi0>          (cdr myList)
[09:17:35] <light> this is not correct
[09:17:53] <light> if we have no more items in mylist we are returning the total
[09:18:13] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:18:30] <light> if we do have more items in mylist we are returning the recursive procedure call on "the rest of the list" and the total plus the first item on the list
[09:19:07] <pi0> hmm the way i wrote it is not correct
[09:19:13] <pi0> sorry i am not sure in which order it does
[09:19:16] <pi0> i mean goes
[09:20:10] <light> the way if works is that you have a test condition, then what happens if it's true, then what happens if it's false
[09:20:20] <light> so if the list is null, we just return what?
[09:20:29] <pi0> 0
[09:20:31] <light> no
[09:20:39] <pi0> false
[09:20:41] <light> no
[09:20:59] <light> we're summing each item into the total parameter
[09:21:19] <light> would it make sense to return total if there was nothing else to add?
[09:22:28] <pi0> hmm
[09:23:02] <pi0> well we could right, if there is nothing else to add
[09:23:11] <light> i agree
[09:23:35] <light> so then we just have to write the line for if the "if" condition is false and we still have things to add
[09:24:14] <light> we would make a recursive call to our helper procedure
[09:24:25] <light> taking the first item off the list and adding it to total
[09:24:45] <light> and the remainder of the list as the other parameter
[09:25:07] <pi0> (if (null? helper_function)
[09:25:12] <light> no
[09:26:06] <light> we're writing the helper procedure
[09:26:26] <light> it's the procedure that takes two parameters, a list of numbers, and a total of the sum so far
[09:26:31] <pi0> (if (null? recSum)
[09:26:34] <light> no
[09:26:45] <light> let's write it down together
[09:27:01] <light> let's start by defining the procedure that takes two parameters, a list of numbers and a total
[09:27:18] <light> we'll call our procedure sum-helper
[09:27:27] <light> can you write this?
[09:27:35] <pi0> let me write it
[09:28:14] <pi0> i wrote it
[09:28:22] <light> show me
[09:28:39] <pi0> well on paper
[09:28:48] <pi0> let me paste it here again
[09:28:56] <light> it's one line
[09:29:18] <pi0> (define (sum-helper myList total)
[09:29:22] <pi0> that one 
[09:29:24] <light> excellent
[09:29:32] <light> now we need to test for termination of recursion
[09:29:36] <light> what do we test?
[09:29:44] <pi0> (if (null? myList)
[09:29:50] <light> perfect!
[09:29:57] <light> and if there are no more numbers in the list, what do we return?
[09:30:19] <pi0> (+ total (car myList)
[09:30:23] <light> no
[09:30:32] <pi0> (cdr myList)
[09:30:34] <light> if there are no more numbers in the list, the list is empty, we can't take car of the empty list
[09:30:41] <light> we can't take cdr of an empty list either
[09:30:47] <light> there's nothing left to add to the total
[09:30:54] <light> what should we return?
[09:31:32] <pi0> total
[09:31:37] <light> yes, that's right
[09:31:45] <light> so now you have the first three lines there is only one left
[09:31:53] <pi0> wait
[09:31:56] <pi0> how do i return total
[09:32:01] <pi0> tho
[09:32:10] <light> the same way you returned 0 in your original procedure
[09:32:13] <light> just type total
[09:32:37] <pi0> (total
[09:32:42] <pi0> like that
[09:32:43] <light> no parenthesis
[09:33:06] <pi0> total
[09:33:09] <light> yes
[09:33:16] <pi0> ok good that is the 3rd line
[09:33:22] <light> correct
[09:34:02] <light> now let's call our helper function with the rest of the list and add the first item on the list to the total
[09:34:26] <pi0> now (+ total (car myList)
[09:34:50] <pi0> without the now
[09:34:54] <light> (+ total (car myList)) would give us the value of adding the first item on mylist to the total, very good
[09:35:02] <light> how do we get "the rest of mylist"
[09:35:23] <pi0> (cdr myList)
[09:35:29] <light> very good
[09:35:39] <light> so now that we have these two values, how do we call sum-helper with them?
[09:35:58] *** Joins: badkins (~badkins@136.56.92.199)
[09:36:22] <pi0> (sum-helper myList total)
[09:36:28] <light> no
[09:36:38] <light> instead of mylist we want "the rest of my list"
[09:36:46] <light> and instead of total we want the total plus the first item on mylist
[09:36:57] <light> how would we write this?
[09:37:15] <light> can we subsitute the values we have above?
[09:37:54] <pi0> well shoot hmm
[09:38:56] <light> (sum-helper rest-of-mylist newtotal) what do we put for rest-of-mylist and newtotal?
[09:39:15] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:ad56:b236:43bf:104b)
[09:39:15] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:ad56:b236:43bf:104b) (Changing host)
[09:39:15] *** Joins: skapata (~Skapata@user/skapata)
[09:40:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[09:40:46] <pi0> we need 2 more functions
[09:40:49] <light> no
[09:40:51] <pi0>  or what exactly are those?
[09:40:56] <Zipheir> light, pi0: Is the goal to write a recursive sum function, or a tail-recursive function?
[09:41:07] <light> Zipheir: he's writing a tail recursive sum procedure
[09:41:20] <Zipheir> Ah, I figured, but I wasn't sure.
[09:41:36] <light> pi0: how do we say "the rest of the list" again?
[09:41:37] <pi0> were did you get those new variable names
[09:41:47] <light> i just made them up so that you can fill in the blank
[09:41:48] <pi0> cdr mylist?
[09:41:49] <light> i could have said ...
[09:41:51] <light> yes!
[09:41:54] <light> good job
[09:42:11] <pi0> (define (sum-helper myList total)
[09:42:11] <pi0>   (if (null? myList)
[09:42:11] <pi0>       total
[09:42:11] <pi0>       (+ total (car myList)
[09:42:12] <light> and how do we add the first item on the list to the total?
[09:42:12] <pi0>          (cdr myList)
[09:42:17] <pi0> i have that so far
[09:42:28] <light> the last line is not correct
[09:43:16] <light> we should call sum-helper in the last line with the remainder of the list and the new total that we got by adding the first item on the list to the current total
[09:43:42] <light> you've already written these bits above, you just need to slot them in
[09:43:46] <light> (sum-helper ... ...)
[09:44:25] <light> the first ... is the rest of mylist, how can we write that?
[09:46:29] *** Quits: cjb (~cjbayliss@user/cjb) ()
[09:46:45] <light> i have to go now but will be back in 20 minutes to check on your progress
[09:46:51] <pi0> wait :D
[09:46:53] <pi0> one sec
[09:46:58] <pi0> what should the last line be?
[09:47:00] <Zipheir> I can jump in if light has to go.
[09:47:06] <pi0> thank you
[09:47:17] <Zipheir> pi0: It should be a call to sum-helper, not +.
[09:47:42] <pi0> but what do i pass to it
[09:47:49] <pi0> or just call it without arguments
[09:47:59] <Zipheir> You wrote sum-helper; what arguments does it expect?
[09:48:47] <pi0> (define (sum-helper myList total)
[09:48:47] <pi0>   (if (null? myList)
[09:48:47] <pi0>       total
[09:48:47] <pi0>       (+ total (car myList)
[09:48:48] <pi0>          (sum-helper myList total)
[09:49:16] <Zipheir> sum-helper eventually returns `total`; so, each time it's called, you need to give a total that's one step closer to the final result.
[09:50:41] <pi0> oh man i am not gonna meet the deadline :/
[09:50:53] <Zipheir> That's a weird mix of recursion and tail-recursion.
[09:51:35] <pi0> sorry just under a little time pressure its due in a 38 mins along with another one
[09:51:48] <pi0> i cannot believe i missed the alert
[09:52:26] <Zipheir> pi0: sum-helper should *only* return when myList is empty; otherwise, it calls itself.
[09:54:07] <pi0> (define (sum-helper myList total)
[09:54:07] <pi0>   (if (null? myList)
[09:54:07] <pi0>       total
[09:54:07] <pi0>       (+ total (car myList)
[09:54:10] <pi0>          (sum-helper))))
[09:54:16] <Zipheir> It might help to think of this as a loop, where the call to sum-helper updates the loop variables.
[09:54:21] <pi0> how do i test it in racket 
[09:54:36] <Zipheir> That's not a valid procedure call.
[09:55:14] <Zipheir> I think you're a little lost.
[09:55:26] <pi0> a lot actually
[09:55:30] <pi0> and under time pressure
[09:55:39] <pi0> not thinking clearly at all
[09:55:40] <pi0> sorry
[09:55:45] <Zipheir> It's OK.
[09:57:44] <pi0> idk what to do
[09:58:07] <Zipheir> Here's a related example.  (define (add-x-to-y x y) (if (zero? x) res (add-iter (- x 1) (+ res 1))))
[09:58:17] <Zipheir> This is the same basic pattern.
[09:58:24] <pi0> oh boy
[09:58:29] <pi0> 2 days in to scheme
[09:58:34] *** Quits: robin (~robin@user/terpri) (Ping timeout: 268 seconds)
[09:58:50] <pi0> i mean that looks so far from my understanding 
[09:58:52] <Zipheir> Oops, (define (add-x-to-y x y) (if (zero? x) y (add-iter (- x 1) (+ y 1))))
[09:59:03] <Zipheir> Changed identifiers mid example.
[09:59:15] <Zipheir> It's easier than what you're writing.
[09:59:24] <pi0> am i just missing something at the end?
[09:59:41] <Zipheir> I think you're missing how tail-recursion works.
[10:00:30] <pi0> correct first time doin it
[10:00:38] <pi0> and with a lange i will only use for 2 months
[10:01:01] <pi0> i may learn it in java next semester
[10:01:09] <Zipheir> It's one of the best languages for learning it, I think.
[10:01:17] <pi0> java
[10:01:18] <pi0> yes
[10:01:24] <Zipheir> No, Scheme. :)
[10:01:39] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[10:01:53] <pi0> sorry about this i dont normally ask for a spoon
[10:01:57] <pi0> but i think i might need one 
[10:02:08] *** Quits: elderK (uid205007@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[10:02:18] <Zipheir> *sigh*, another typo.  In case this is actually helpful, here's the example, corrected.  (define (add-iter x y) (if (zero? x) y (add-iter (- x 1) (+ y 1))))
[10:02:42] <Zipheir> pi0: Can you see how that works?
[10:03:07] <pi0> not at all
[10:04:12] <Zipheir> It's just adding a natural number x to y.  If x is zero, it returns y, because y + 0 = y.  Otherwise, it adds x - 1 to y + 1.
[10:04:34] <Zipheir> This is the same iterative pattern that sum-helper uses.
[10:05:12] <Zipheir> Both variables get "stepped": x gets closer to zero, and y gets closer to the sum.
[10:05:35] <Zipheir> When you sum a list, the recursive call needs to get the total closer to the list-sum, and the list closer to ().
[10:05:43] <pi0> is the only issue the last line?
[10:06:09] <Zipheir> The last line doesn't make sense.
[10:06:26] <pi0> i am not sure on what you mean so its more than the last line
[10:06:32] <Zipheir> It is.
[10:06:52] <pi0> ah last  line and more?
[10:09:09] <Zipheir> I suggest first understanding how the algorithm works.
[10:09:23] <Zipheir> Without understanding, it's not going to help to tweak one line or another.
[10:09:25] *** Joins: robin (~robin@user/terpri)
[10:09:27] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:09:44] *** Joins: robin (~robin@user/terpri)
[10:10:04] <pi0> i get it bud, but i will never se this lang again
[10:10:13] <pi0> i appreciate the help
[10:10:15] <pi0> tho
[10:10:30] <pi0> light said he will return shortly right 
[10:10:35] <Zipheir> It really has very little to do with Scheme.
[10:10:51] <pi0> i know but its due in a few mins now
[10:11:00] <pi0> and most like i will miss the deadline 
[10:11:55] <Zipheir> That's unfortunate, but it seems like you'll have to spend more time on this if you want to solve it without someone pasting the answer for you.
[10:12:04] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[10:12:13] *** Quits: klovett (~klovett@166.205.90.177) (Quit: ZZZzzz…)
[10:12:35] <pi0> i usually do, i just happen to miss the alert this time
[10:13:22] <light> back
[10:13:30] <pi0> hey light not sure what to do
[10:13:36] <pi0> nearing the deadline 
[10:13:48] <light> where are you stuck?
[10:13:53] <pi0> same place
[10:13:57] <pi0> last line 
[10:14:25] <light> ok, so you were just about to call your sum-helper function recursively
[10:14:38] <pi0> not yet
[10:14:39] <Zipheir> You aren't stuck at the last line.  You're stuck at not understanding the algorithm.
[10:14:53] <pi0> correct
[10:15:02] <pi0> (define (sum-helper myList total)
[10:15:02] <pi0>   (if (null? myList)
[10:15:02] <pi0>       total
[10:15:02] <pi0>       (+ total (car myList)
[10:15:02] <pi0>          (sum-helper))))
[10:15:30] <pi0> its hard to understand or think when under a little time pressure
[10:16:16] <light> we're recursively solving this problem by operating on each item in a list
[10:16:24] <pi0> so when i call it pass the same arugments 
[10:16:40] <light> so we take one off for some processing, and we resurse with the rest of the list
[10:16:55] <pi0> subtract it by 1
[10:17:15] <light> no substraction here, we're summing numbers
[10:17:16] <pi0> subtract myList -1
[10:17:34] <light> if you call (sum-helper 
[10:18:00] <light> if you call (sum-helper mylist total) with a list of (1 2 3) and a total of 0, what would happen?
[10:18:00] <pi0> hhmmm
[10:18:29] <light> what do we always do first when writing recursive procedures?
[10:18:46] <pi0> (sum-helper (cdr myList) (+ (car myList ) total))))
[10:18:50] <light> correct
[10:19:05] <light> do you understand why?
[10:19:31] <pi0> first plus add the rest to tatoal
[10:19:41] *** Joins: gproto23 (~gproto23@user/gproto23)
[10:20:17] <light> you have one last thing to do which is to define your procedure sum in terms of this helper procedure
[10:21:16] <pi0> but how do i pass the arugment in racket
[10:21:40] <light> (procedure arg1 arg2)
[10:22:16] <pi0> mylist and total?
[10:22:43] <light> those are the arguments to sum-helper
[10:22:52] <light> now you need to define sum, which only takes one parameter, a list of numbers
[10:22:59] <light> how can you define sum in terms of sum-helper?
[10:23:46] <pi0> define (sum (sum-helper myList total))
[10:24:17] <light> no
[10:24:22] <light> but you're on the right track
[10:24:34] <light> how do you define a procedure sum that takes one parameter, a list of numbers?
[10:25:03] <pi0> (define (sum num))
[10:25:28] <light> ok
[10:25:50] <light> and this procedure should call sum-helper with that list of numbers and some kind of total right?
[10:26:05] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:26:38] <pi0> (define (recSum myList total)
[10:26:38] <pi0>   (if (null? myList)
[10:26:38] <pi0>       total
[10:26:38] <pi0>       (+ total (car myList)
[10:26:38] <pi0>          (recSum (rest myList) (+ (first myList) total)))))
[10:26:40] <pi0> (define (sum num)
[10:26:43] <pi0>   (recSum num 0))
[10:27:09] <pi0> but that gives me 30
[10:27:16] <light> that's because it's wrong
[10:27:17] <Zipheir> Because it's not correct.
[10:27:36] <pi0> my def of sum
[10:27:43] <light> no that's fine
[10:27:47] <light> it's the line where you do the recursion
[10:27:59] <Zipheir> Why is the list called 'num'?
[10:28:01] <pi0> (sum (list 1 2 3 4))
[10:28:15] <pi0> (recSum (rest myList) (+ (first myList) total)))))
[10:28:18] <pi0> that line
[10:28:56] <light> that part is correct, but why do you have: (+ total (car myList) above it?
[10:29:09] <light> think about the algorithm
[10:29:28] <light> you take the first item off the list, add it to the total, and recursively call your helper function with the rest of the list and the new total
[10:30:03] <Zipheir> pi0: You might try writing in English what sum-helper does.
[10:30:47] <pi0> removing my car gives me 20
[10:34:35] <pi0> ;(+ total (car myList)
[10:34:40] <pi0> removing this line completly
[10:34:44] <pi0> makes it work
[10:35:07] <light> good, do you understand why?
[10:35:21] <pi0> adding it twice
[10:35:41] <pi0> oh man
[10:35:44] <pi0> missed it
[10:36:47] <pi0> https://i.imgur.com/bOBsFX5.png
[10:36:55] <pi0> well it is what it is
[10:37:07] <pi0> i didnt get to  finish this one
[10:37:22] <pi0> Redefine your mylength to find the length of a list recursively (include sublists).
[10:37:28] <pi0> i had to redo it using that 
[10:37:35] <pi0> not sure what they meant b sublists
[10:37:36] <mdhughes> I would suggest starting with the SICP lectures and book: https://www.youtube.com/watch?v=-J_xL4IGhJA&list=PLE18841CABEA24090
[10:37:41] <mdhughes> https://mitpress.mit.edu/sites/default/files/sicp/index.html
[10:37:50] <Zipheir> light: Thanks for your heroic efforts.
[10:37:51] <mdhughes> They get you up to this point in the first chapter.
[10:38:02] <light> Zipheir :)
[10:38:55] <pi0> :) appreciate it
[10:40:07] <pi0> youtube lectures look great 
[10:40:27] <pi0> lang seems cool but in a few weeks we will use prolog or prolong or something
[10:40:37] <pi0> just seems to fast for us to do this
[10:40:54] <Zipheir> That's quite a leap for a few weeks.
[10:42:09] <light> what course are you taking?
[10:42:14] <mdhughes> Yeah, that's way too brief a tour, IMO.
[10:42:22] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 256 seconds)
[10:43:42] <pi0> i made a mistake and ask for pre-req clerenace
[10:43:45] <pi0> its called program langs
[10:43:54] <pi0> worst mistake 
[10:44:00] <pi0> especially since i am still in java ii
[10:44:07] <pi0> i am actually enjoying java
[10:44:14] <pi0> but i gotta say tho
[10:44:17] <light> what institution is this?
[10:44:24] <pi0> i have never recv as much help as you guys
[10:44:31] <light> you're welcome
[10:44:35] <Zipheir> I've never heard of a programming languages course that taught the topic by jumping from Scheme to Prolog to ...
[10:44:39] <pi0> java channel ppl are rude 
[10:44:43] *** Joins: sm2n_ (~sm2n@user/sm2n)
[10:44:56] *** Quits: sm2n (~sm2n@user/sm2n) (Read error: Connection reset by peer)
[10:44:59] <pi0> i know its awful
[10:45:10] <Zipheir> Did they cover automata or lambda calculus yet?
[10:45:56] <pi0> they call it compiler thoery over here and i will be able to take it after the spring
[10:46:05] <pi0> after i finish data structures
[10:46:12] <pi0> (define (mylength s)
[10:46:12] <pi0> (if (null? s)
[10:46:12] <pi0>     0
[10:46:12] <pi0>     (if(list? (rest s))
[10:46:12] <pi0>               (+ (mylength (rest s)))
[10:46:14] <pi0> (if(list? (first s))
[10:46:17] <pi0>     (+ 1(mylength (first s)))))))
[10:46:26] <pi0> well my little cheap attempt at number 10.
[10:47:09] <light> are you trying to count the number of items in a list?
[10:47:13] <light> recursively
[10:48:19] <pi0> yes
[10:50:24] <Zipheir> You seem to be on the right track, although there's something wrong.
[10:50:36] <pi0> missing an else
[10:51:07] <light> can you tell me how your procedure should work in english?
[10:58:53] <pi0> wow that video course is amazing
[10:58:59] <pi0> compared to professors now
[10:59:04] <pi0> sorry light i will explain
[10:59:10] <pi0> see i want prof's like that
[11:02:43] <mdhughes> Well, it is literally the most famous comp sci course ever! If you read the chapter and do the exercises after each lecture, so you stay caught up, it's a good comp sci course. Takes a year-ish, well worth it.
[11:06:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:06:59] *** Quits: robin (~robin@user/terpri) (Ping timeout: 264 seconds)
[11:13:34] <pi0> Zipheir: thank you bud, sorry if i got impatient 
[11:13:42] <pi0> light: also thank you so much 
[11:14:09] <light> you're welcome
[11:15:27] <pi0> besides scheme do you know other languages
[11:15:44] <pi0> my prof told me about an article how yahoo store was written on lisp
[11:17:31] <pi0> are you guys also famliar with java
[11:17:59] <mdhughes> Tons of them; I started back in the late '70s with BASIC and 6502 ASM, then Pascal & C, Perl, Java for many years, Python, Objective-C for 15 years. But these days I mostly do Scheme or JS.
[11:18:59] <pi0> do you still use asm?
[11:19:02] <pi0> x86?
[11:19:51] <mdhughes> Java's a very disappointing language. It's not actually terrible, but they take forever to add features it needs to be a more useful language, and it's loaded down with decades of bad libraries and needs an IDE.
[11:19:52] <pi0> i feel like my programming skills are like broken english at best 
[11:20:01] <pi0> almost cave man talk to be honest 
[11:20:29] <mdhughes> I don't do any x86 ASM, but I'm relearning Z80 ASM so I can code on the SpecNext when it arrives (hopefully before xmas? Probably next year.)
[11:20:58] <Zipheir> That reminds me, A Little Java is a fascinating entry in the small Scheme-Java Fusion genre.
[11:21:03] <mdhughes> But likely I'll just switch it over to a CP/M core and write Pascal on it, because that's more fun.
[11:21:42] *** Joins: civodul (~user@guix/contributor/civodul)
[11:21:51] <mdhughes> Beanshell, RhinoJS, Groovy, Kawa, and Clojure(script) are nicer ways to work on the JVM.
[11:22:23] <groovy> ?
[11:22:24] <Zipheir> The Algol-Pascal-Ada family is my favorite group of imperative languages.
[11:22:25] <groovy> o
[11:22:30] <mdhughes> Yes, you!
[11:22:38] <Zipheir> Heh.
[11:22:45] <pi0> i am getting closer to graduation but left most of my programming langs till the end
[11:22:53] <pi0> i should of spread it out more evenly 
[11:23:24] <mdhughes> You get better at coding by coding. Just keep picking problems to solve, tools you want for yourself, and write them every day.
[11:23:49] <mdhughes> https://adventofcode.com is coming up in 2 weeks!
[11:24:10] <mdhughes> And https://projecteuler.net is up every day.
[11:24:18] <Zipheir> And read SICP, the Dragon Book, etc.
[11:25:21] <pi0> only thing is i will never use scheme
[11:25:28] <pi0> after my course 
[11:25:38] <pi0> what is this used for anyhow 
[11:25:44] <mdhughes> Nobody can tell you what to use for your own code.
[11:26:27] <pi0> that is true
[11:26:28] <mdhughes> I mostly write games and utilities. Gonna write a gopher server soon.
[11:26:40] <Zipheir> pi0: Wait 'til you get to Prolog...
[11:26:41] <pi0> with scheme?
[11:26:51] <pi0> is there a channel for that
[11:27:00] <mdhughes> Sure, I use Chez scheme for almost everything.
[11:27:21] <mdhughes> Sometimes Gauche because it runs well on my little RasPi.
[11:29:08] <pi0> that is my next project getting openbsd on my pi 4 8gb ram
[11:30:47] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[11:30:51] *** Joins: Everything (~Everythin@37.115.210.35)
[11:31:09] <amazigh> heya :)
[11:31:20] <amazigh> pi0: my english is caveman english :p
[11:31:41] <Zipheir> Hi amazigh.
[11:32:53] <pi0> we will get along just fine :D
[11:33:50] <pi0> wait a min do you guys remember BNF grammar
[11:35:30] <amazigh> I read a quote along the line, paraphrasing: "Not knowing is a pity; stopping to learn is dangerous"
[11:36:47] <Zipheir> "stopping to learn" as in "giving up learning" or "taking a break to learn something"?
[11:37:34] <amazigh> the first "giving up learning" as in "the person thinks they know everything"
[11:38:26] <Zipheir> Yes.
[11:39:51] <Zipheir> "There is no wealth like knowledge, no poverty like ignorance." --Ali
[11:41:56] <pi0> gnite fellas 
[11:42:05] <amazigh> pi0: this is one is for you “The journey of a thousand miles begins with a single step.” programming is a very "profitable" for oneself, you should approach it more like a sport, even the physical aspects, it requires training, and sometime it gives back
[11:42:24] <amazigh> gives back = yields
[11:42:50] <pi0> i like that! with all the course i have been taking i gotta remember to have fun
[11:43:00] <amazigh> I discovered chess is considered a sport, it makes sense to me.
[11:43:05] <pi0> after all i will only be doing this for the rest of my life 
[11:43:18] <pi0> i gotta enjoy 
[11:43:34] <amazigh> that is the point of sport analogy, sometime it hurts..
[11:43:38] <pi0> chess you say
[11:43:48] <pi0> is there any online place we can play a match
[11:44:05] <pi0> if i win you do my hw ;p lol jk
[11:44:10] <Zipheir> Life can be pretty long, and there's more than programming.
[11:44:21] <amazigh> I do not play chess, I discovered two weeks ago, one should plan a scheme two step ahead ^^'
[11:44:23] <amazigh> +1 Zipheir 
[11:44:51] <pi0> that is true, i gotta set limits to my hw
[11:45:11] <pi0> this whole corona time i have been more indoors learning and i still feel like i dont know enough 
[11:45:25] <Zipheir> amazigh: I've heard great things about this https://en.wikipedia.org/wiki/Chess960
[11:45:45] <Zipheir> Ars longa and all that.  Anyway, time for sleep.  Good night, all.
[11:45:48] <pi0> my class mate was not able to pass calc and switched majors to IT
[11:46:11] <pi0> seems like calc and physics weed out ppl from getting started with comp sci
[11:48:48] <amazigh> Programming is like sport, you need to train and requires physical exercise to stay healthy.
[11:49:12] <pi0> very true!!! that is it i am going to bed
[11:49:31] <amazigh> Zipheir: I looking forward doing games with my father, on lichess
[11:51:49] <amazigh> And sometime resting bring somekind of knowledge push, I noticed that I playing the guitar for one or two hours... I made more and more mistakes, then the day after it became painless.
[11:52:43] <amazigh> fwiw, I hurt myself more than once with the folk guitar (with metal strings)
[11:53:09] <amazigh> I heard similar stories by piano players.
[11:53:48] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:53:48] <amazigh> my point is that the physical vs. intellectual dichotomy is not good.
[12:10:32] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 268 seconds)
[12:12:34] *** Joins: johnjay (~pi@192.142.100.50)
[12:13:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[12:15:20] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:45:46] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 265 seconds)
[12:48:16] *** Joins: mononote (~mononote@user/mononote)
[12:48:34] *** Joins: shawnw (~shawn_w@152.44.212.188)
[12:53:30] *** Quits: shawnw (~shawn_w@152.44.212.188) (Ping timeout: 265 seconds)
[12:54:28] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 265 seconds)
[13:04:58] *** Joins: shawnw (~shawn_w@152.44.212.188)
[13:32:33] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 268 seconds)
[13:33:43] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a)
[13:37:10] *** Joins: badkins (~badkins@136.56.92.199)
[13:37:35] *** Joins: s-liao (~s-liao@101.86.101.64)
[13:42:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[13:54:27] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[13:56:28] *** Quits: s-liao (~s-liao@101.86.101.64) (Quit: Ping timeout (120 seconds))
[13:56:38] *** Joins: s-liao (~s-liao@101.86.101.64)
[14:03:57] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[14:05:25] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:8336:a695:1b83:1cb6)
[14:12:07] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 250 seconds)
[14:15:12] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:32:35] *** Quits: m1dnight (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[14:33:59] *** Joins: m1dnight (~christoph@christophe.dev)
[14:36:08] *** Joins: s-liao84 (~s-liao@101.86.101.64)
[14:37:34] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[15:06:00] *** Quits: s-liao84 (~s-liao@101.86.101.64) (Quit: Client closed)
[15:25:24] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 268 seconds)
[15:26:18] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:8336:a695:1b83:1cb6) (Ping timeout: 256 seconds)
[16:10:37] *** Joins: seninha (~seninha@user/seninha)
[16:12:35] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 250 seconds)
[16:14:58] *** Joins: X-Scale` (~ARM@46.50.0.92)
[16:15:32] *** X-Scale` is now known as X-Scale
[16:18:04] *** Joins: badkins (~badkins@136.56.92.199)
[16:22:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 264 seconds)
[16:32:50] *** Joins: s-liao (~s-liao@101.86.101.64)
[16:41:32] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[16:45:19] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[16:56:01] *** Joins: civodul (~user@guix/contributor/civodul)
[17:13:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[17:15:50] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[17:20:28] <wasamasa> let's get intellectual
[17:22:03] *** Joins: badkins (~badkins@136.56.92.199)
[17:22:42] *** Joins: livoreno (~livoreno@user/notzmv)
[17:26:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[17:58:38] *** Joins: klovett (~klovett@166.205.90.177)
[17:59:27] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 265 seconds)
[18:21:38] <sham1> I thought that we would have to get jiggy with it
[18:22:43] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[18:27:32] *** Joins: s-liao95 (~s-liao@101.86.101.64)
[18:28:06] *** Joins: badkins (~badkins@136.56.92.199)
[18:31:02] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[18:33:09] *** Quits: s-liao95 (~s-liao@101.86.101.64) (Quit: Client closed)
[18:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[18:42:00] *** Quits: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net) (Remote host closed the connection)
[18:42:24] *** Joins: richbridger (~richbridg@089144202142.atnat0011.highway.a1.net)
[18:43:23] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:00:48] *** Joins: aportnoy (~aportnoy@user/aportnoy)
[19:02:04] *** Quits: aportnoy (~aportnoy@user/aportnoy) (Client Quit)
[19:26:51] * amazigh execute the plan
[19:26:53] <amazigh> (o(
[19:27:34] <amazigh> it may not be clear, but I am doing push-up, while standing still and the lower part of my body dance
[19:27:47] <amazigh> ok, it is not good to explain joke ->[]
[19:41:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:00] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[19:50:09] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[19:50:39] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:57:05] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:15:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:16:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:37:11] *** Joins: u0_a185 (~u0_a185@2001:ce8:131:5f61:240b:ff95:9fa1:6caa)
[20:43:36] *** Quits: u0_a185 (~u0_a185@2001:ce8:131:5f61:240b:ff95:9fa1:6caa) (Quit: WeeChat 3.0.1)
[20:52:57] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 250 seconds)
[21:02:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[21:12:12] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[21:16:47] *** Quits: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10) (Ping timeout: 250 seconds)
[21:20:12] *** Joins: taiju (~taiju@240b:253:ec40:2400:2cdc:1f32:d88a:fa10)
[21:23:39] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[21:27:41] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:28:17] *** Joins: badkins (~badkins@136.56.92.199)
[21:34:02] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[21:48:59] *** Joins: hackeryarn (~hackeryar@2600:1700:139c:1410:ccc4:80c6:92c6:6927)
[22:12:23] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[22:13:20] *** Joins: badkins (~badkins@136.56.92.199)
[22:17:40] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:19:00] *** Quits: saltrocklamp[m] (~elementio@2001:470:69fc:105::5065) (Changing host)
[22:19:00] *** Joins: saltrocklamp[m] (~elementio@user/hexology)
[22:21:01] *** Quits: saltrocklamp[m] (~elementio@user/hexology) (Quit: Reconnecting)
[22:21:15] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[22:40:51] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[22:48:04] *** Joins: badkins (~badkins@136.56.92.199)
[23:14:45] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Quit: Leaving)
[23:25:03] *** Quits: hackeryarn (~hackeryar@2600:1700:139c:1410:ccc4:80c6:92c6:6927) (Ping timeout: 250 seconds)
[23:39:51] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0)
[23:56:15] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c0ad:80c4:dd74:5cc0) (Quit: Leaving)
[23:58:05] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f53c:4bb1:7324:d639)
[23:58:05] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f53c:4bb1:7324:d639) (Changing host)
[23:58:05] *** Joins: skapata (~Skapata@user/skapata)
