[00:16:48] *** Quits: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:30:06] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[00:34:19] *** Quits: heisig (~heisig@p508b541c.dip0.t-ipconnect.de) (Quit: Leaving)
[01:02:50] *** Quits: nitrowheels (~nitrowhee@151.95.83.100) (Quit: Leaving)
[01:06:00] *** Joins: lemondev (~lemondev@134.35.95.214)
[01:07:05] *** Quits: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:08:43] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[01:13:04] *** Joins: asarch (~asarch@189.250.251.32)
[01:14:29] <asarch> I have: (defclass foo () ((beer :initform 3))) and then (defclass bar (foo) ()) and I would like to have 6 as the default value of beer in bar. How can I do this?
[01:17:05] <asarch> Should I (defclass bar (foo) ((beer :initform 6))) or should I (defmethod initialize-instance :after ((instance foo)) (setf (slot-value instance 'beer) 6))?
[01:18:08] <rotateq> asarch: add an initform
[01:18:15] <rotateq> oh sorry
[01:18:26] <rotateq> I'm often typing when not have read all. :D
[01:18:41] <rotateq> hmm good question
[01:19:02] <rotateq> I'm also still not so sure when to use this default-initargs
[01:28:02] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[01:29:03] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a58f:5716:d675:156a)
[01:30:05] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:d457:f92d:cdbc:33f4)
[01:32:33] *** Quits: lemondev (~lemondev@134.35.95.214) (Quit: leaving)
[01:32:37] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:33:32] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:a58f:5716:d675:156a) (Ping timeout: 240 seconds)
[01:41:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:41:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:46:55] <asarch> I see
[01:47:10] <asarch> Anyway, I will use initialize-instance then
[01:47:17] <asarch> Have a nice day :-)
[01:47:19] *** Quits: asarch (~asarch@189.250.251.32) (Quit: leaving)
[01:50:42] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:00:02] <rotateq> oh noez
[02:00:35] *** Joins: asarch (~asarch@189.250.251.32)
[02:00:43] <asarch> Tadaima! I'm back!
[02:00:50] <rotateq> good!
[02:01:46] <asarch> How is better (in terms of efficiency)? (setf buffer (concatenate 'string buffer "…")) or just (setf buffer (format nil "~s …" buffer))?
[02:02:07] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[02:02:18] <rotateq> SETQ :P
[02:02:45] <rotateq> may be implementation dependent again
[02:03:18] <sm2n> they should be equivalent modulo format string parsing
[02:03:50] <Alfr> asarch, vector with fill pointer and using vector push.
[02:04:12] <Alfr> asarch, recall that stings are vectors of characters.
[02:04:12] <hayley> Many Lisp implementations generate formatter functions at runtime, if the format string is constant.
[02:04:23] <Alfr> *vector-push
[02:05:01] <sm2n> hayley: I think you mean s/runtime/compile time/
[02:05:02] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 240 seconds)
[02:05:11] <hayley> Right.
[02:08:25] <sm2n> also to the earlier question asarch, you should prefer :initform
[02:08:41] <sm2n> if you use initialize-instance it's not a default value anymore
[02:09:17] <sm2n> even if you pass a value to make-instance it will be overriden by your method in that case
[02:10:30] <asarch> I see
[02:10:50] <sm2n> initialize-instance is more for doing things on new objects in general, for example putting them in a pool etc
[02:10:57] <asarch> Then you have to override the former beer declaration, right?
[02:11:13] <asarch> (defclass bar (foo) ((beer :initform 6)))
[02:11:28] <sm2n> yes, that should work?
[02:12:35] <asarch> So, in this case, there is no point to use foo as the super class of bar, right?
[02:13:04] <sm2n> well, absent of any context sure
[02:13:25] <sm2n> if you add slots to foo those will trickle down
[02:13:43] <sm2n> and you still get dynamic dispatch
[02:13:46] <pjb> There could be a (defmethod drink ((bock foo)) (swallow (slot-value bock 'beer)))-
[02:13:55] <pjb> and you would want it to work for bars too.
[02:14:03] <sm2n> ^
[02:16:13] <asarch> Or even better (set spam (make-instance 'bar :beer 6)) by doing "manually"
[02:16:40] <sm2n> ...then it's not a /default/ value
[02:16:50] <asarch> Bingo!
[02:17:50] <sm2n> if you haven't looked at it already, you should read sonya keene's book on CLOS
[02:17:54] <sm2n> it's an invaluable resource
[02:20:12] <asarch> I wonder how she…
[02:22:10] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 260 seconds)
[02:29:47] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[02:29:51] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) ()
[02:31:20] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:d457:f92d:cdbc:33f4) (Ping timeout: 252 seconds)
[02:33:10] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[02:33:21] <asarch> You have (let ((food '(beer taco pizza))) …) and then (loop for element in food do …). Is there a way to know what element (n-th) you are currently in every loop?
[02:34:16] <hayley> (loop for element in food for n from 0 ...)
[02:34:17] <asarch> Something roughly a la (if (eq (first food) element)) …)
[02:34:55] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[02:35:18] <alcaeus> Merry xmas everyone, is the channel active rn?
[02:37:33] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (ERC (IRC client for Emacs 27.2))
[02:38:54] <rotateq> seriously?
[02:39:19] <asarch> Actually, this space is for rent
[02:39:32] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[02:39:40] <rotateq> "Get of my lawn!"
[02:40:12] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Read error: Connection reset by peer)
[02:40:18] *** Joins: dra (~dra@2a04:4540:6420:3a00:b16a:478f:ee9c:ecfa)
[02:40:37] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[02:43:44] *** Joins: dre_ (~dre@2001:8003:c932:c301:d3de:95f8:8fd3:f662)
[02:45:06] <dre_> if I'm going to be stuck without internet for a while, what's the best way to have a reference to common lisp ?
[02:45:52] *** Joins: Lycurgus (~juan@98.4.112.204)
[02:46:05] <dre_> I suppose I have PCL and LOL and I could just flick through that to find something I want to do, but if I could have a thing like 'how do I do x' -- offline, while I'm away, that would be helpful
[02:47:14] <rotateq> offline CLHS
[02:48:04] <rotateq> i have it linked in the browser (the symbol index A-Z) for fast lookup
[02:48:19] <rotateq> or of course symbol lookup via slime which opens it
[02:50:10] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[02:51:41] <dre_> yeah I was thinking slime might have something worthwhile for me, but I (as a lowly vim user) will keep clutching at my pearls
[02:51:59] <dre_> does emacs / slime have CLHS inbuilt ?
[02:52:21] <dre_> I might have to just bite the bullet and jot down some common keybindings
[02:54:00] <rotateq> i use spacemacs
[02:54:25] <rotateq> have learnt vim before and it's kind of integrated for the editing part. much fun
[02:55:33] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[03:03:39] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[03:07:26] *** Quits: dre_ (~dre@2001:8003:c932:c301:d3de:95f8:8fd3:f662) (Ping timeout: 245 seconds)
[03:08:01] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 256 seconds)
[03:13:31] <asarch> How can you make Emacs to "unlearn" a word for word suggestions? E.g. when you type 'indxe' instead of 'index'?
[03:14:32] <rotateq> oh i still don't know much emacs magic, sry
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[03:17:39] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[03:22:57] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[03:25:30] *** Joins: splatt9990 (~splatt999@dsl-208-102-94-26.fuse.net)
[03:25:46] *** Quits: splatt9990 (~splatt999@dsl-208-102-94-26.fuse.net) (Client Quit)
[03:28:16] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:d472:ac88:c89:150f) (Remote host closed the connection)
[03:34:17] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 240 seconds)
[03:44:57] *** Joins: dra_ (~dra@2a04:4540:6407:f800:b16a:478f:ee9c:ecfa)
[03:45:45] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[03:46:03] *** Joins: ns12 (~ns12@user/ns12)
[03:47:17] *** Quits: dra (~dra@2a04:4540:6420:3a00:b16a:478f:ee9c:ecfa) (Ping timeout: 240 seconds)
[03:53:37] *** Quits: phantomics (~phantomic@97-118-135-6.hlrn.qwest.net) (Ping timeout: 240 seconds)
[04:00:02] *** Quits: unyu (~pyon@user/pyon) (Ping timeout: 268 seconds)
[04:01:17] *** Joins: miique (~miique@181.46.139.166)
[04:02:15] <asarch> Up to how many handlers can Hunchentoot work with?
[04:02:55] <Xach> asarch: it uses a hash table to store them, so i suppose it is limited by available memory.
[04:03:24] <asarch> Thank you! Thank you very much! :-)
[04:05:26] <Xach> asarch: how many do you think you will use?
[04:06:17] <asarch> My small home-made web application has 89 so far
[04:06:54] <asarch> I remember having some issues when I used Flask for Python
[04:07:41] <asarch> I don't rember if it was Python 2 or Python 3
[04:09:35] <Xach> I bet you could have at least 1000x that many
[04:10:58] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[04:12:25] <asarch> That's great!
[04:12:56] <asarch> I wonder what web server Amazon uses
[04:14:12] *** Joins: dre_ (~dre@2001:8003:c932:c301:4b55:68b7:565f:5e8e)
[04:14:37] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[04:15:28] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[04:15:29] <hayley> Probably a fair few, assuming they use approximately too many languages, which probably is the case.
[04:19:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:22:51] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 268 seconds)
[04:23:26] *** Joins: robin (~robin@user/terpri)
[04:26:29] <rotateq> asarch: many things and many technologies i would say
[04:28:08] <rotateq> maybe also Clojure (which states it's good for concurrency) or Elixir. the second maybe used in twitch too (I don't know), but surely amazon just bought it in 2014
[04:28:54] <rotateq> hayley: it's easier to list the few powerful things they and others manage to go around :P
[04:34:45] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[04:34:49] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Read error: Connection reset by peer)
[04:34:51] *** Joins: unyu (~pyon@user/pyon)
[04:35:12] *** Joins: Alfr (~Alfr@user/alfr)
[04:36:06] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[04:47:26] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[04:52:01] *** Quits: dra_ (~dra@2a04:4540:6407:f800:b16a:478f:ee9c:ecfa) (Remote host closed the connection)
[04:58:14] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[04:58:52] *** Parts: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de) (ERC (IRC client for Emacs 27.2))
[04:58:57] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 240 seconds)
[04:59:45] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[04:59:57] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 240 seconds)
[05:00:19] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[05:06:05] *** Quits: asarch (~asarch@189.250.251.32) (Quit: leaving)
[05:12:31] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[05:17:44] <sm2n> last I heard they were mainly a c++ shop
[05:17:53] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[05:21:26] *** Quits: dre_ (~dre@2001:8003:c932:c301:4b55:68b7:565f:5e8e) (Ping timeout: 268 seconds)
[05:22:17] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[05:22:45] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[05:28:02] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[05:28:22] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[05:28:53] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:29:23] *** Joins: dre_ (~dre@2001:8003:c932:c301:4ac5:c2f4:60c3:ddf6)
[05:39:13] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[05:40:16] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[05:41:00] *** Joins: Algernon91 (~Algernon6@i19-lef01-t2-89-85-249-102.ft.lns.abo.bbox.fr)
[05:46:07] *** Quits: Algernon91 (~Algernon6@i19-lef01-t2-89-85-249-102.ft.lns.abo.bbox.fr) (Ping timeout: 268 seconds)
[05:47:11] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[05:47:48] *** Joins: Alfr (~Alfr@user/alfr)
[05:53:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[05:53:41] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[06:14:22] *** Joins: asarch (~asarch@2806:10ae:7:6161:cb33:8b53:8c16:c1b2)
[06:33:23] *** Quits: asarch (~asarch@2806:10ae:7:6161:cb33:8b53:8c16:c1b2) (Quit: Leaving)
[06:33:35] *** Quits: dre_ (~dre@2001:8003:c932:c301:4ac5:c2f4:60c3:ddf6) (Ping timeout: 268 seconds)
[06:37:17] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:38:19] *** Joins: Alfr (~Alfr@user/alfr)
[06:40:21] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[06:41:08] *** Joins: dre_ (~dre@2001:8003:c932:c301:5789:64a6:ecde:50e0)
[06:41:15] *** Joins: Alfr (~Alfr@user/alfr)
[06:52:59] *** Joins: myrrh (~markus@172.58.196.91)
[07:10:52] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:15:00] *** Quits: dre_ (~dre@2001:8003:c932:c301:5789:64a6:ecde:50e0) (Remote host closed the connection)
[07:15:04] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:16:08] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:26:25] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 256 seconds)
[07:30:08] <beach> Good morning everyone!
[07:32:46] *** Joins: Colt_ (~Colt@user/colt)
[07:34:39] *** Quits: Colt (~Colt@user/colt) (Ping timeout: 268 seconds)
[07:37:40] <s-liao> Hello
[07:41:25] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[07:51:32] *** Quits: semz (~none@user/semz) (Ping timeout: 240 seconds)
[08:04:22] *** Joins: semz (~none@user/semz)
[08:05:57] *** Quits: Krystof (~user@81.174.155.115) (Ping timeout: 240 seconds)
[08:08:00] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:42:01] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:44:18] *** Joins: Oladon (~olad@98.43.81.226)
[09:03:07] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:08:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:13:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:24:51] *** Quits: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723) (Quit: ERC (IRC client for Emacs 27.1))
[09:28:14] *** Joins: alvaro121_ (~aa@201.230.126.66)
[09:29:17] *** Quits: alvaro121 (~aa@201.230.126.66) (Ping timeout: 240 seconds)
[09:31:01] <beach> If anyone is ever tempted to improve performance by profiling and low-level optimizations, I recommend you watch this video by Emery Berger "Performance Matters": https://www.youtube.com/watch?v=r-TLSBdHe1A
[09:31:02] <beach> It should tell you that such attempts are pretty futile and that for low-level optimizations to be worthwhile, you need some way more sophisticated tools than a profiles.
[09:31:25] <beach> So unless you have such tools, you might just forget it altogether.
[09:33:36] <beach> For me as a person creating a Common Lisp implementation, I conclude that it would be a huge waste of time for me to guess what would improve overall performance, implement an improvement, and perhaps see some minor performance improvement.
[09:36:16] <hayley> .oO(Yes, a video on performance by the man who famously ruined discussing garbage collection by "quantifying" the effects of garbage collection over explicit memory management. The video is actually useful, but I'm still annoyed.)
[09:36:38] <hayley> Did someone mention performance here? I might have missed something.
[09:37:24] <beach> It happens regularly as I recall, but I may have dreamed that.  I seem to remember relative newbies asking whether to do this or that.
[09:39:36] <susam> Good morning, beach!
[09:39:39] <susam> Good morning, everyone!
[09:41:57] <beach> hayley: I can see why you are annoyed.  But there are often several different possible conclusions of some work.  In this one, you may conclude that you should always write C code and use his tools.  But my conclusion is that you should be careful with how to attempt to optimize the performance of your code.
[09:43:08] <hayley> I think "Performance Matters" is a good presentation.
[09:43:14] <beach> It is.
[09:43:39] <beach> And Emery is a smart guy.  I met him during my year with Paul Wilson at UT Austin.
[09:44:07] <beach> I frequently cite the paper by Hudak and Jones, too.  You may conclude from that paper that you should always use Haskell, but I conclude that choosing the right programming language for a particular task can make a factor 20 difference in development time.
[09:45:52] <hayley> But, much like how people point to benchmarks like the language shootout to make a point, without actually reading the benchmarks (e.g. anything to do with regular expressions usually involves FFI to PCRE2), the paper by Berger and Hertz I am thinking of is "read" in a way that allows one to present shocking results about the performance of garbage collection.
[09:46:59] <beach> Oh, I see.
[09:47:13] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[09:47:19] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:47:27] <beach> I haven't read the paper, and perhaps I should.  Are you saying that this is not what one should conclude from it?
[09:47:44] <hayley> The more careful reader would note that the baseline for explicit memory management is generated (as they want to test using Java programs) using an undecidable algorithm. So any explicit memory management technique the programmer uses, or any memory management generated by a compiler (using e.g. regions or linear types) is going to be strictly worse performing than the algorithm presented.
[09:48:05] <beach> It would be surprising since Emery was working in a group that was definitely in favor of automatic memory management.
[09:48:31] <beach> Interesting.
[09:48:54] *** Joins: aeth (~aeth@user/aeth)
[09:49:36] <hayley> The conclusion isn't wrong, and I shouldn't blame any interpretation on the authors. But they do overstate the usefulness of their results, in my opinion, since they did not show how their algorithm is representative of what any programmer does.
[09:50:56] <beach> I see.  Well, that could be the effect of the need for funding and/or publications for the career.
[09:51:23] <hayley> Sure, I can't blame that on them either.
[09:51:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:52:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[09:53:07] <hayley> I don't want to distract anyone from the presentation you mentioned though. I tried to make a causal profiler for Common Lisp, but managed to crash SBCL in a way I didn't understand, so I gave up. Someone else should definitely have another try at it.
[09:53:41] <beach> Hmm.  Yes, I see.
[09:59:11] <hayley> (Though, I recall Steve Blackburn et al published a similar paper about a week ago, comparing real Java collectors to an "ideal collector", as determined by removing time spent in the collector. But this produces a neither-fish-nor-foul result where you get all the benefits of such collectors, like compacting, but none of the drawbacks. Someone already tried to use the results to dismiss other publications as "idiotic bragging".)
[10:00:15] <hayley> (Again, not the fault of Blackburn or anyone else, but it makes discussing performance harder.)
[10:00:26] <beach> Sure.
[10:02:38] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 268 seconds)
[10:03:57] *** Joins: notzmv (~zmv@user/notzmv)
[10:04:38] <hayley> I only bring it up since there was an online programming community I would have liked to participate in, but the participants had already fallen for such noise. It made me feel more uncertain about what I'll do in the future than usual.
[10:06:44] <hayley> Probably overreacting though.
[10:14:41] *** Colt_ is now known as Colt
[10:15:07] *** Joins: Lycurgus (~juan@98.4.112.204)
[10:15:53] *** Quits: Jing (~hedgehog@2604:a840:3::1061) (Remote host closed the connection)
[10:16:11] <beach> I understand.
[10:16:29] *** Joins: Jing (~hedgehog@125.105.141.97)
[10:20:28] *** Joins: s-liao49 (~s-liao@101.86.96.21)
[10:23:39] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[10:25:55] <Lycurgus> false conclusion from the fact of undecidability of a class of algorithms
[10:26:19] <Lycurgus> and a generally callow view of how things actually work
[10:27:08] <Lycurgus> gc is very old, very tried and tested and really today mostly uninteresting
[10:28:23] <Lycurgus> i.e. unless you want to obsess on it for some reason
[10:29:28] <hayley> It is more that the algorithm uses more information than any static analysis could gather (and also is more accurate than any dynamic feedback scheme, since it knows exactly where an object is no longer reachable). You're right that undecidability is not the most crucial part of the results, but it is necessary and shows that the algorithm can only be an upper bounds on performance.
[10:29:45] <Lycurgus> a judicious expediture of effort would be enabling cheney (in sbcl) and also sbcl is a problematic implementation in general compared to others that are less so
[10:29:58] <Lycurgus> for example
[10:30:17] <hayley> Eh, nowadays one has to handle caching and the so-called "allocation wall" when you want to allocate faster than primary memory allows you to.
[10:30:46] <Lycurgus> i never heard of that issue sounds spurious
[10:31:15] <Lycurgus> of course heaps have configured limits
[10:31:19] <hayley> On the other hand, caches aren't a new invention, and they've always been annoying (though probably more now than ever before).
[10:31:26] <Lycurgus> but allocation rate is new to me
[10:31:40] <hayley> https://dl.acm.org/doi/10.1145/1640089.1640116
[10:32:24] <hayley> "Because the write bandwidth is so limited, we propose the following hypothesis: the scalability and performance is limited by the object allocation on emerging multi-core platforms for those objects-allocation intensive Java applications, as if these applications are running into an "allocation wall"."
[10:32:27] <Lycurgus> ah OK jave i was thinking common lisp
[10:32:39] *** Joins: treflip (~user@user/treflip)
[10:32:52] <Lycurgus> but still it's just java has a much wider compass that opens up for that to make sense
[10:33:07] <Lycurgus> it's still at some level a make work issue even there
[10:33:08] <hayley> It applies to Common Lisp just as much as any language (something similar happens in Haskell too). Perhaps even in any language with dynamic allocation.
[10:33:29] <Lycurgus> k
[10:33:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:35:28] <hayley> Here is a paper on the same phenomenon in Haskell: https://www.cs.tufts.edu/~nr/cs257/archive/simon-marlow/local-gc.pdf
[10:35:42] <semz> That Emery Berger talk is really good. Great case of a solution that seems obvious in retrospect.
[10:37:39] *** Quits: dave-from-the-k (~user@80.227.170.170) (Remote host closed the connection)
[10:39:36] <Lycurgus> *java
[10:39:53] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[10:41:46] <hayley> beach: For what it's worth, I am aware that Hertz and Berger also designed a "bookmarking" garbage collector, which allows for performing conservative collections without thrashing, when some of the heap is paged out. It might be useful for collection in CLOSOS.
[10:42:28] <beach> Yes, maybe so.
[10:55:37] *** Quits: stacksmith (~stack@ctrl-c.club) (Ping timeout: 240 seconds)
[11:00:18] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:06:32] *** Quits: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no) (Ping timeout: 240 seconds)
[11:10:57] *** Joins: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[11:18:30] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[11:25:23] <fe[nl]ix> semz: which talk ?
[11:25:49] <beach> fe[nl]ix: https://www.youtube.com/watch?v=r-TLSBdHe1A
[11:25:59] <beach> "performance matters"
[11:26:07] <semz> I'm too slow lol
[11:30:07] <fe[nl]ix> thanks
[11:31:45] <beach> Sure.
[11:33:26] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[11:47:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:52:44] *** Joins: shka (~herr@109.231.0.226)
[12:02:15] *** Quits: s-liao49 (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:05:13] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[12:06:05] *** Joins: rotateq (~user@p200300e787097300818cd04b4ea1a4f3.dip0.t-ipconnect.de)
[12:13:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:19:36] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:24:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:30:27] *** Joins: Algernon69 (~Algernon6@2a04:cec0:10ef:581c:2d02:74a3:f1b4:3aac)
[12:37:10] *** Joins: nature (~nature@45.32.235.173)
[12:42:21] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[12:43:05] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[13:02:50] *** Joins: s-liao (~s-liao@101.86.96.21)
[13:06:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:10:19] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[13:17:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[13:19:26] *** Joins: pve (~pve@178-55-147-163.bb.dnainternet.fi)
[13:29:18] *** Joins: notzmv (~zmv@user/notzmv)
[13:30:29] *** Quits: Algernon69 (~Algernon6@2a04:cec0:10ef:581c:2d02:74a3:f1b4:3aac) (Read error: Connection reset by peer)
[13:30:33] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:550f:8384:370b:6f3d)
[13:32:06] *** Joins: cage (~cage@dynamic-adsl-84-220-217-231.clienti.tiscali.it)
[13:53:11] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:54:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[13:56:02] *** Lord_of_Life_ is now known as Lord_of_Life
[14:10:43] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:30fe:eea7:a0bb:e650)
[14:23:48] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[14:26:03] *** Joins: jujumambo (~user@95.79.32.99)
[14:26:11] *** Quits: jujumambo (~user@95.79.32.99) (Remote host closed the connection)
[14:34:07] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:34:47] *** Joins: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no)
[14:37:21] *** Joins: lisp123mobile (~lisp123mo@5.31.187.87)
[14:38:27] <lisp123mobile> Does anybody know what is meant the the words “symbol bloat” and “trampoline methods” in the following extract from the Google CL Style guide?
[14:38:31] <lisp123mobile> By default, an abstract base class name is used as the notional protocol name, so accessor names default to <class-name>-<slot-name>; while such names are thus quite prevalent, this form is neither required nor even preferred. In general, it contributes to "symbol bloat", and in many cases has led to a proliferation of "trampoline" methods.
[14:39:14] <hayley> Maybe the author thinks that style leads to symbols that are too long for them?
[14:39:38] <hayley> I don't get the trampoline method part though.
[14:39:53] <semz> A trampoline method is probably a method that just redirects its arguments to a method of a different name
[14:40:11] <lisp123mobile> Yep, I had the same view as you, that kinda makes sense for symbol bloat but I didn’t get the second part
[14:40:12] <_death> I guess the alternative they think about is using the same name as the slot's
[14:40:50] <rotateq> oh lisp123mobile now you advanced to mobile level :D
[14:41:50] <semz> My guess is that they had problems where what should have really been one generic function ended up split into several GFs of different names because of this convention
[14:41:56] <rotateq> hm i read that style guide around 2 years ago but can't remember those
[14:42:04] <lisp123mobile> _death: I was thinking that. Perhaps there are other similarly named slots (e.g. “slot-a”) so if one uses class-name-slot-name then one needs a redirection to (slot-a …)
[14:42:22] <semz> and so the "symbol bloat" would be having lots of symbols and the "trampoline method" would redirect from one GF to the other. All of this is guesswork though.
[14:42:28] <_death> there may be a single generic function FOO that has methods calling THIS-FOO and THAT-FOO according to specialization
[14:43:10] <lisp123mobile> semz: that seems to make sense
[14:43:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:43:26] <rotateq> after i've looked at some SICL code i see also the possible preferation for prefixing slot-names with #\%
[14:43:46] <lisp123mobile> rotateq: next up, lisp on the phone ;) but this connection may die out at any point
[14:44:46] <rotateq> yes yes, like in apps and webz, the fuuuture. often it sounds like people (who are in business) really think those things are the only ones *weird*
[14:44:51] <lisp123mobile> _death: hmm that makes sense actually
[14:45:33] <rotateq> lisp123mobile: but you can the CL-REPL app, it's fun, with ecl and qml
[14:47:04] <_death> anyway these seem like silly arguments to me.. the conclusion may be a good idea but it's just aesthetics and in my opinion requires a case by case analysis
[14:47:57] *** Quits: mingus (~jan-magnu@auth-146-189.anyconnect.uib.no) (Ping timeout: 240 seconds)
[14:49:28] <lisp123mobile> Agree, just wanted to see if I was missing something
[14:52:29] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[14:54:50] *** Quits: lisp123mobile (~lisp123mo@5.31.187.87) (Remote host closed the connection)
[14:56:31] *** Joins: lisp123mobile (~lisp123mo@5.31.187.87)
[14:58:00] *** Quits: lisp123mobile (~lisp123mo@5.31.187.87) (Remote host closed the connection)
[14:59:00] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[15:02:27] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:17:38] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[15:30:48] *** Joins: random-nick (~random-ni@87.116.180.98)
[15:45:52] *** Quits: Inline__ (~Inline@2a02:908:1252:7a80::4f) (Quit: Leaving)
[15:52:36] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:550f:8384:370b:6f3d) (Ping timeout: 240 seconds)
[16:01:31] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:01:52] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:08:15] *** Joins: casionaut (~casionaut@user/casionaut)
[16:10:29] *** Joins: rain3 (~rain3___@2a02:2f09:d003:cb00:928d:3338:a339:f956)
[16:11:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[16:18:36] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:18:56] *** Joins: Inline__ (~Inline@2a02:908:1252:7a80::4f)
[16:24:45] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[16:25:39] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[16:29:17] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:30:19] *** Joins: amb007 (~a_bakic@87.116.160.200)
[16:40:06] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[16:41:56] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[16:52:57] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[17:13:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:24:18] *** Joins: igemnace (~ian@user/igemnace)
[17:24:21] *** Quits: Alfr (~Alfr@user/alfr) (Killed (mercury.libera.chat (Nickname regained by services)))
[17:24:25] *** Joins: Alfr (~Alfr@user/alfr)
[17:27:14] *** Quits: amb007 (~a_bakic@87.116.160.200) (Read error: Connection reset by peer)
[17:27:57] *** Joins: amb007 (~a_bakic@87.116.160.200)
[17:32:17] *** Quits: amb007 (~a_bakic@87.116.160.200) (Ping timeout: 250 seconds)
[17:32:47] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[17:33:19] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 256 seconds)
[17:46:21] *** Quits: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs) (Ping timeout: 256 seconds)
[17:47:10] *** Joins: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs)
[17:56:03] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[18:00:01] *** Quits: Alfr (~Alfr@user/alfr) (Killed (erbium.libera.chat (Nickname regained by services)))
[18:00:05] *** Joins: Alfr (~Alfr@user/alfr)
[18:03:45] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[18:11:41] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net)
[18:26:04] *** Joins: treflip (~user@user/treflip)
[18:26:22] *** Joins: igemnace (~ian@user/igemnace)
[18:32:47] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[18:34:45] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c062:85c6:a962:7f68)
[18:46:28] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:46:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[18:46:54] *** Joins: Colt (~Colt@user/colt)
[18:48:52] *** Joins: aeth (~aeth@user/aeth)
[18:49:53] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:50:19] *** Joins: Colt (~Colt@user/colt)
[18:51:40] *** Joins: jealousmonk (~user@2804:431:e7c5:c99:3fd5:26ae:534:3723)
[18:53:04] *** Joins: Lycurgus (~juan@98.4.112.204)
[18:53:10] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[18:56:04] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[18:56:30] *** Joins: Colt (~Colt@user/colt)
[18:56:51] *** Alfr is now known as Guest5008
[18:56:51] *** Quits: Guest5008 (~Alfr@user/alfr) (Killed (osmium.libera.chat (Nickname regained by services)))
[18:56:55] *** Joins: Alfr (~Alfr@user/alfr)
[18:59:02] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-D58E-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:03:07] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[19:03:33] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[19:04:26] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[19:05:06] *** Joins: Colt (~Colt@user/colt)
[19:05:56] *** Quits: Colt (~Colt@user/colt) (Read error: Connection reset by peer)
[19:09:20] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:6b:282a:db46:982e)
[19:13:20] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:c062:85c6:a962:7f68) (Ping timeout: 268 seconds)
[19:23:40] *** Joins: Everything (~Everythin@37.115.210.35)
[19:29:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:46:15] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[19:58:20] *** Joins: dra (~dra@2a04:4540:6407:f800:ddd1:8fac:a809:c56e)
[19:59:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 268 seconds)
[20:01:11] *** Joins: aeth (~aeth@user/aeth)
[20:07:55] *** Joins: Colt (~Colt@user/colt)
[20:10:14] *** Joins: rogersm (~rogersm@90.166.180.250)
[20:20:11] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[20:25:03] *** nckxmas is now known as nckx
[20:27:43] *** Quits: treflip (~user@user/treflip) (Quit: ERC (IRC client for Emacs 27.2))
[20:30:34] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:32:26] *** Quits: miique (~miique@181.46.139.166) (Read error: Connection reset by peer)
[20:34:53] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f8:96e1:6b:282a:db46:982e)
[20:38:02] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10ef:581c:6b:282a:db46:982e) (Ping timeout: 240 seconds)
[20:40:27] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[20:43:09] *** Quits: attila_lendvai (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Ping timeout: 250 seconds)
[20:43:50] *** Quits: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu) (Read error: Connection reset by peer)
[20:43:57] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Error from remote client)
[20:44:44] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[20:45:27] *** Joins: attila_lendvai_ (~alendvai@catv-80-99-178-127.catv.broadband.hu)
[20:47:07] *** Quits: amb007 (~a_bakic@net203-34-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[20:47:33] *** Joins: amb007 (~a_bakic@cable-94-189-188-222.dynamic.sbb.rs)
[20:52:12] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[20:55:42] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) ()
[20:58:55] *** Joins: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net)
[21:08:36] *** Quits: dra (~dra@2a04:4540:6407:f800:ddd1:8fac:a809:c56e) (Quit: Leaving)
[21:17:36] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[21:28:17] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Ping timeout: 240 seconds)
[21:30:32] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[21:37:00] *** Joins: Bike (~Glossina@71.69.170.70)
[21:37:00] *** ChanServ sets mode: +o Bike
[21:38:57] *** Quits: varjag (~user@ti0040a400-5479.bb.online.no) (Ping timeout: 240 seconds)
[21:43:31] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[21:46:49] *** Joins: VincentVega (~user@212.97.4.164)
[21:48:22] *** Joins: dra (~dra@2a04:4540:6407:f800:2d34:8e98:9953:8f90)
[21:50:33] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[21:56:39] *** Joins: nitrowheels (~nitrowhee@151.95.83.100)
[22:02:29] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Ping timeout: 256 seconds)
[22:05:53] *** Quits: Jing (~hedgehog@125.105.141.97) (Ping timeout: 256 seconds)
[22:29:56] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[22:38:08] *** Quits: gaqwas (~john@215.76.133.37.dynamic.jazztel.es) (Remote host closed the connection)
[22:41:02] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f8:96e1:6b:282a:db46:982e) (Ping timeout: 240 seconds)
[22:47:55] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 268 seconds)
[23:06:37] *** Joins: VincentV` (~user@212.97.4.164)
[23:08:13] *** Quits: VincentVega (~user@212.97.4.164) (Ping timeout: 256 seconds)
[23:10:38] *** Joins: gaqwas (~john@215.76.133.37.dynamic.jazztel.es)
[23:16:12] *** Quits: Alfr (~Alfr@user/alfr) (Remote host closed the connection)
[23:17:12] *** Parts: alcaeus (~user@ip24-251-241-74.ph.ph.cox.net) (ERC (IRC client for Emacs 27.2))
[23:19:37] *** Joins: Alfr (~Alfr@user/alfr)
[23:25:26] *** Joins: nature (~nature@45.32.235.173)
[23:25:47] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[23:26:03] *** Joins: cosimone (~user@93-47-231-248.ip115.fastwebnet.it)
[23:27:44] *** Joins: aeth (~aeth@user/aeth)
