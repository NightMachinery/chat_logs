[00:00:14] <RandomReader> so that's why my question, I don't understand how this would be simultaneously generic and specifically care about stdout
[00:00:45] <RandomReader> (and whatever that use case is might help scope the problem here)
[00:00:50] <lumberluch0> wouldn't necessarily have to "care", but I think for example of what happens when teaching C++
[00:02:12] <lumberluch0> we're taught that cout is for printing. Then someone tries to cout<< "Ñandú Añil de Mal Agüero" and all goes to hell. We have to either explain wcout / u(nn)cout and have the user change their entire printing scheme or... dunno, deal on why the language sucks (which for streams, it does)
[00:02:41] <RandomReader> that isn't specifically a streams issue though, it's a full-on language encoding issue
[00:02:51] <RandomReader> changing the stream isn't going to solve it, in a general sense
[00:03:01] <RandomReader> ("language" in the human sense here)
[00:03:21] <RandomReader> e.g. that works fine on systems that prefer UTF-8 with UTF-8 source input
[00:03:44] <RandomReader> (so UTF-8 console and streams, compiler taking UTF-8 input files)
[00:03:58] <RandomReader> change one of those things, as different platforms do, and it doesn't work
[00:04:33] <RandomReader> that's what the u8 etc strings are leading to in terms of expressing the encoding, but that's obviously incomplete as a full i/o flow
[00:05:39] <lumberluch0> Yeah, I can imagine. But from what I have seen, committee work on u8 has been almost worse than not having it at all. I18n should have been solved in like the 90's, it's not like C++ is used only in the US
[00:05:44] <RandomReader> (I think that line would also work fine on an ISO-8859-1 encoding system)
[00:06:05] <lumberluch0> (It would work, yes)
[00:07:58] <lumberluch0> TBH I'm from the school of "just assume cout will respect your source file encoding, that's what the compiler is there for". But I'd love to see that school codified in the Standard (before I die of old age)
[00:09:23] <RandomReader> the teaching material I've see usually focuses on char-based flows though, usually omitting wchar_t entirely .. that also means e.g. the operator overloading chapter that tells you to make a stream insertion operator with std::ostream& wouldn't mesh with trying to use std::wcout
[00:10:26] *** Joins: badone (~badone@209.132.189.136)
[00:10:36] <RandomReader> it also runs contrary to the streams design in general in that the cout/wcout pair are a bit unusual in that they're synchronized (by default) under the hood .. most streams aren't like that, and the synchronization can be turned off
[00:11:18] <RandomReader> so I'm not sure introducing wcout would be doing much good, at least in the early days
[00:12:25] <RandomReader> I do agree with the sense that something better needs to be here, hopefully the Unicode-based flows will eventually catch up
[00:13:24] <RandomReader> but tying cout to source file encoding would make cross-compilation pretty awkward (I can do without the c64 charset as my primary interface), so I don't agree with that as a trait :P
[00:13:54] <RandomReader> maybe as a compiler default, but they tend to do the right thing anyway, so
[00:16:10] <RandomReader> hm, maybe that's how your original question could be handled, test for stream insertion operators against ostream vs wostream
[00:16:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:e4ea:1e88:cb3a:f1c4) (Ping timeout: 258 seconds)
[00:16:35] <lumberluch0> ooooh
[00:16:50] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6d6d:6dab:cb75:e8d0)
[00:17:35] <lumberluch0> testing for the stream operators would be a good call. Maybe wrapping that into a sort of "generic intent" stream object, something like "anyout"
[00:17:56] <RandomReader> yeah I was just thinking that might work as a simple overload set
[00:17:56] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:18:25] <RandomReader> oh, no, it could still be ambiguous so you'd need to prioritize one
[00:20:57] <lumberluch0> in theory priority would go towards the higher ones, higher in the sense of "handling the largest character type"? because if wcout or u32cout can't handle your text, it'd be likely worse if cout or u16cout would make it work, perhaps at a much higher expense
[00:21:55] <lumberluch0> ofc then Unicode introduces 48-bit codepoints and everyone has to recompile to re-prio for u48cout, but at that point people would already have switched to PHP in despair
[00:23:14] <RandomReader> ...oh, this is flawed anyway, I forgot about the underlying streams
[00:23:22] <RandomReader> cout and wcout can't be (reasonably) mixed
[00:24:00] <RandomReader> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=27569
[00:24:11] *** Quits: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00) (Ping timeout: 258 seconds)
[00:24:46] <lumberluch0> hmmmm
[00:25:20] <lumberluch0> would it be legal to provide an alternate streams implementation where cout just redirects to wcout? Of course it'd likely have to go in as eg.: a separate dynamic library.
[00:25:44] <RandomReader> https://eel.is/c++draft/iostream.objects.overview#6  and  http://port70.net/~nsz/c/c11/n1570.html#7.21.2p4
[00:25:55] <RandomReader> it's up to whatever makes the first call
[00:27:16] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:27:48] *** Joins: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00)
[00:29:49] <lumberluch0> all this flat out makes me feel my strategy of "just assume cout works" is the best
[00:30:11] <AmR> In CMake if I include( FetchContent ) in if that's work ?
[00:31:36] <cbreak> yes. but why?
[00:32:59] <AmR> I use FetchContent_Declare but not working at cmake startup config
[00:33:07] *** Quits: RoKenn_ (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:33:12] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[00:35:21] <cbreak> AmR: are you overcomplicating things again?
[00:35:21] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:37:22] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[00:37:33] <Fairy> when I compile a static library archive (.lib) with a static runtime library (/MT), the runtime library isn't actually introduced until the linking stage, correct? (Windows, MSVC centric question)
[00:38:38] <AmR> cbreak: I finish that https://github.com/amreisa/SOCI_TEST thanks for obiwahn he help me a lot.
[00:39:27] *** Quits: magla (~gelignite@55d4df94.access.ecotel.net) (Quit: Stay safe!)
[00:41:38] <cbreak> AmR: I gave you the whole solution :P
[00:42:47] <AmR> cbreak: Thanks for you and obiwahn too. I'm only starting cmake.
[00:43:51] <cbreak> you don't even use ExternalProject_Add...
[00:44:20] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:44:40] <AmR> Yes obiwahn Show me other way.
[00:44:52] <AmR> I start reading cmake book now
[00:45:08] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[00:45:56] <cbreak> I did wonder why you wanted to use it
[00:46:00] <cbreak> since it's not the normal way
[00:46:05] *** Quits: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00) (Ping timeout: 260 seconds)
[00:47:11] *** Quits: chozorho (~chozorho@2601:146:300:c30::8489) (Ping timeout: 245 seconds)
[00:47:12] *** Joins: pah_ (~pah@host-79-55-69-93.retail.telecomitalia.it)
[00:47:30] <AmR> I want build all the project form one command in target system
[00:47:38] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[00:48:24] *** Joins: chozorho (~chozorho@2601:146:300:c30::6f8c)
[00:50:11] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[00:51:14] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[00:53:12] <cbreak> yeah, but externalproject_add isn't intended for that
[00:53:22] <cbreak> it is intended to build projects Externally
[00:54:34] *** Joins: pah (~pah@user/pah)
[00:54:50] *** Quits: pah_ (~pah@host-79-55-69-93.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[00:56:57] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:01:05] *** Joins: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00)
[01:01:47] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[01:02:37] <LOOL123> RandomReader: not found in the text bar
[01:05:45] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:09:13] *** Joins: JeffH (~JeffH@184-96-219-220.hlrn.qwest.net)
[01:16:49] *** Quits: JeffH (~JeffH@184-96-219-220.hlrn.qwest.net) (Remote host closed the connection)
[01:17:55] *** Joins: JeffH (~harrisja@184-96-219-220.hlrn.qwest.net)
[01:19:11] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[01:19:34] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:19:52] <JeffH> I implemented a post increment operator as { Iterator tmp = *this; ++(*this); return tmp; }.  The static analyzer I'm using (cppcheck) is flagging that. Is there a better way to implement it?
[01:22:45] <RandomReader> LOOL123 - for me it's here: C:\Program Files (x86)\Windows Kits\10\Debuggers\x64
[01:24:02] <RandomReader> JeffH - flagging it for what?
[01:24:38] <JeffH> RandomReader: 'Reference to local variable returned. CppCheck(returnReference)'
[01:25:01] <RandomReader> so it's not talking about the guts, it's complaining that you made the return type T& instead of T :)
[01:25:43] <RandomReader> post increment should return by value, since the point is that you're returning a copy (of the old value)
[01:25:43] <LOOL123> RandomReader: LOOL123 - for me it's here: C:\Program Files (x86)\Windows Kits\10\Debuggers\x64 => GG I found it!
[01:26:06] <JeffH> clearly there's no problem here as *this is a valid reference.
[01:26:21] <RandomReader> *this is an object, not a reference
[01:26:42] <RandomReader> but *this doesn't have anything to do with the issue
[01:27:24] <JeffH> right, *this is an object..  returning *this is a valid reference.
[01:27:38] <RandomReader> how would you describe what each line of that implementation does?
[01:29:56] <RandomReader> not a trick question, just what it's doing conceptually
[01:30:20] <JeffH> first line saves a reference to this, second line increments this, 3rd line returns the saved reference.
[01:30:39] <RandomReader> ah, then no to the first line: there is no reference
[01:31:15] <RandomReader> declaring a reference in C++ means attaching a name to an existing object, and that always looks like T&
[01:31:49] <RandomReader> so the first line is in fact making a new object entirely, named "tmp"
[01:32:52] <RandomReader> (it's also not possible to "save a reference" since a reference isn't a "thing" to be manipulated: it is declared (to attach a name) and then it's gone/invisible in terms of actions, the reference name acts like any other name)
[01:34:15] <JeffH> ah.  I changed the implementation to 'Iterator* tmp = this; ++(*this); return *tmp;' but I think this is essentially a pre increment.  Not sure how I'd do a pre-increment operator.
[01:34:22] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[01:35:11] <RandomReader> how would you describe the post increment expression "obj++"
[01:35:29] <RandomReader> like in terms of  foo = obj++   what's important about it as far as foo is concerned
[01:37:02] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:10] *** ChanServ sets mode: +v npaperbot
[01:37:16] <JeffH> foo contains the pre-incremented value.
[01:38:01] <RandomReader> right, and to put this in language terms, where an object is a conceptual container around a value, it is a copy of the object before it was incremented
[01:38:31] <RandomReader> so back to implementing this: if you could, you'd write  { return *this; ++(*this); }    but of course that makes no logical sense
[01:38:31] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[01:39:13] <RandomReader> but we already know that foo is going to get a copy, so that helps describe what we need to do here: make a copy of the original object, and return that
[01:39:26] <RandomReader> so the original implementation you had was correct: tmp is a copy of *this, and we want to return that
[01:39:40] <RandomReader> but that last part is the important one: return the object, not a reference to it
[01:39:56] <RandomReader> the caller no longer cares about the updated object, it needs a copy of the old one, so we want to return that value
[01:40:04] <RandomReader> sorry: return that object by-value
[01:40:22] <RandomReader> so it's the return type you need to change here, not the guts
[01:41:54] <RandomReader> (and the underlying complaint from the analyzer is that "tmp" is an object that only lives within the scope of this operator function, so once it returns the object is no more, which means a reference to it would be invalid)
[01:42:13] <JeffH> hmm..  I thought operators returned a reference.
[01:42:30] <RandomReader> different operators have different return types depending on their purpose
[01:43:07] <RandomReader> at a base level they're just functions that can technically return anything, but by convention they return different things to behave a lot like the built-in types
[01:44:21] <JeffH> I'm going to have to find the tutorial I was following and see if I mistyped or they had it wrong.
[01:45:14] <JeffH> Ah.. I did indeed mistype it.
[01:45:15] <RandomReader> this page shows the common forms with a little discussion, although it's brief: https://en.cppreference.com/w/cpp/language/operators#Canonical_implementations
[01:47:56] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[01:51:49] *** Quits: JeffH (~harrisja@184-96-219-220.hlrn.qwest.net) (Ping timeout: 252 seconds)
[01:52:20] *** Joins: JeffH (~harrisja@78.sub-174-198-149.myvzw.com)
[01:52:37] <JeffH> RandomReader: thanks for the help.
[01:52:43] <RandomReader> welcome!
[01:54:16] <JeffH> I've only done c programming in my career.. so c++ throws me for a loop from time to time.
[01:55:19] <RandomReader> yeah I had a few catches making the same shift .. references took me a while, since I kept trying to think of them like pointers .. and then bigger picture, getting used to C++ expressing "abstractions" in general
[01:56:04] <RandomReader> like operator overloads always seemed like this special unique thing separate from everything else: no, they're really just functions like any other, they simply have special names because the compiler translates operator expressions into function calls
[01:56:19] <RandomReader> (I mean there are *some* special cases in there, but in general...)
[01:56:43] <JeffH> what trips me up is things like when the compiler can use a constructor in place of the operator=()
[01:57:50] <JeffH> I would DIG it if they'd let us write in c++ for our main products.
[01:57:56] <RandomReader> yeah, C's object model is quite loose in comparison, so understanding that C++'s was tight and what that means for its type system took a while too
[01:58:22] <RandomReader> e.g. in C you (mostly) declare an object, but it doesn't really exist until the first assignment, which is considered initialization
[01:59:06] <RandomReader> C++ says an object is initialized when it is created, there is no delay or "later" .. and then unlike C, it allows you to create custom types with the same level of support as the built-in types
[01:59:35] <RandomReader> so then a class being the way you specify a custom type makes more sense: a constructor is your customization point for when the object is created, you define the operators it supports, etc
[01:59:50] <JeffH> there's a module we have in our system that is RIPE for a template implementation.. but that'll never happen.
[01:59:58] <RandomReader> but originally I had "class" associated with "OOP style", which really didn't help for C++
[02:00:33] <JeffH> I've been in the group since 2003 and the module hasn't been touched except for a few minor bug fixes in that time.
[02:01:18] <JeffH> I had a c++ class in college. but that was back in the stone age and it was very basic.
[02:01:18] <RandomReader> ahh, no fun
[02:02:34] <JeffH> I need to come up with some project for home.
[02:02:39] <JeffH> just for fun.
[02:04:31] <RandomReader> most of my programming has been personal-exploratory, it's certainly been helpful
[02:05:31] *** Quits: bobb_ (~bobb_@dslb-092-074-254-082.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:06:17] <JeffH> that's what today's session was about.  I was at work earlier this week struggling with implementing an operator=().  During my searchingg I came across the copy swap idiom.  Today I implemented that to understand it.  Then I decided to make my simple container a template, then an iterable.
[02:09:27] <RandomReader> gotcha, yeah quite a few concepts and idioms in that path
[02:10:07] *** Quits: pah (~pah@user/pah) (Ping timeout: 265 seconds)
[02:10:58] <RandomReader> I've found Scott Meyers' style of explaining things to be particularly helpful, since he focuses on boiling complexity down to "default to this pattern because it's (almost always) the right thing .. now here's why and where it fails"
[02:11:02] *** Joins: pah (~pah@user/pah)
[02:11:49] <JeffH> I'll search his name.
[02:11:52] <RandomReader> which usually leaves me comfortable about the pattern, and the little hint of what I can look up when I actually run into a special case
[02:12:00] <RandomReader> he has a few books in the list
[02:12:01] <RandomReader> !books
[02:12:03] <nolyc> A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[02:12:18] <RandomReader> but also some blog posts and conference talks scattered around the web
[02:13:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[02:13:40] <JeffH> Thanks.  I asked about a book recommendation the other day and someone gave me the URL you just posted.. I forgot to write it down.
[02:14:37] <JeffH> wonder if there's any good c++ books for embedded systems.
[02:15:35] <RandomReader> I'm not sure .. I remember coming across some interesting talks, but one of the underlying themes seemed to be lack of industry support
[02:15:54] <RandomReader> I think this is one of the ones I'm thinking of: https://www.youtube.com/watch?v=c9Xt6Me3mJ4
[02:16:10] <RandomReader> IIRC it boiled down to "here's what you can do, but you have to go a little rogue because the toolchain vendors haven't caught up yet"
[02:16:25] <RandomReader> which I imagine would also affect books
[02:16:30] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[02:16:56] <JeffH> From my (limited) experience, embedded systems folks seem to be warry of some of the c++ capabilities.  Mostly exception handling and templates.
[02:17:24] *** Joins: pah (~pah@user/pah)
[02:18:09] <JeffH> I gotta head out.  Thanks again for the help and converation.
[02:18:12] <RandomReader> yeah .. I think a lot of is the impression of loss of control: when your tool is abstraction but your target is all the concrete details, it's hard to reconcile the two
[02:18:18] <RandomReader> ok cool, welcome
[02:19:07] *** Quits: JeffH (~harrisja@78.sub-174-198-149.myvzw.com) (Quit: Konversation terminated!)
[02:20:26] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[02:29:43] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[02:29:55] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[02:39:00] *** Joins: lkor (~lionkor@i577BC4B4.versanet.de)
[02:39:16] *** Quits: lionkor (~lionkor@200116b80f0aa8007285c2fffea63d72.dip.versatel-1u1.de) (Ping timeout: 265 seconds)
[02:44:24] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[02:48:21] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[02:48:29] *** Joins: pah (~pah@user/pah)
[02:50:43] *** Joins: ferdna (~ferdna@user/ferdna)
[02:55:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[02:57:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6d6d:6dab:cb75:e8d0) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:02:04] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:05:33] *** night_wulfe_ is now known as night_wulfe
[03:15:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[03:16:27] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[03:19:05] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[03:28:32] *** lkor is now known as lionkor
[03:47:04] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:98d1:6a2c:b26:f083)
[03:51:43] *** Quits: AmR (~AmREiSa@156.199.106.121) (Ping timeout: 252 seconds)
[03:57:13] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[04:01:30] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[04:01:45] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[04:04:53] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[04:07:11] *** Joins: teepee (~teepee@openscad/teepee)
[04:10:12] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:40] *** Quits: chozorho (~chozorho@2601:146:300:c30::6f8c) (Ping timeout: 260 seconds)
[04:17:02] *** Joins: chozorho (~chozorho@2601:146:300:c30::6f8c)
[04:20:20] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[04:20:44] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[04:39:51] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:49:30] *** Quits: DSpider (DSpider@2a02:2f00:2ff:ffff::646c:635d) (Quit: Leaving)
[05:00:42] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[05:01:09] *** Joins: The_Jag (~The_Jag@host-79-13-46-237.retail.telecomitalia.it)
[05:03:23] *** Quits: The_Jag_ (~The_Jag@host-87-15-17-212.retail.telecomitalia.it) (Ping timeout: 264 seconds)
[05:10:53] *** Quits: lionkor (~lionkor@i577BC4B4.versanet.de) (Ping timeout: 265 seconds)
[05:37:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:10] *** ChanServ sets mode: +v npaperbot
[05:39:44] *** Joins: malloy (~jimery@116.30.221.89)
[05:40:04] *** Quits: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00) (Ping timeout: 252 seconds)
[05:47:15] *** Joins: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00)
[05:52:56] *** Quits: ethrl (uid524335@user/doforlove33) (Read error: Connection reset by peer)
[05:53:54] *** Quits: Leone (~Leo@216.154.21.17) ()
[05:54:34] *** Joins: ethrl (uid524335@user/doforlove33)
[06:02:13] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdc6:f088:1acd:1c4a)
[06:04:55] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:05:41] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 244 seconds)
[06:07:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[06:10:08] *** Parts: LOOL123 (~LOOL123@2a01:e0a:95e:7ca0:f573:9e5c:3eb:2f00) ()
[06:17:33] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[06:17:55] *** Joins: pah_ (~pah@host-79-56-124-175.retail.telecomitalia.it)
[06:47:31] *** Quits: pah_ (~pah@host-79-56-124-175.retail.telecomitalia.it) (Ping timeout: 244 seconds)
[06:53:47] *** Quits: jkaye (~jkaye@2601:281:8300:7530:bdc6:f088:1acd:1c4a) (Ping timeout: 264 seconds)
[06:58:04] *** Joins: pah (~pah@user/pah)
[06:59:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:2d95:292:531:6545)
[07:02:59] *** Joins: pah_ (~pah@host-82-51-7-240.retail.telecomitalia.it)
[07:03:01] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[07:04:40] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:2d95:292:531:6545) (Ping timeout: 260 seconds)
[07:18:50] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[07:21:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[07:26:48] *** Quits: pah_ (~pah@host-82-51-7-240.retail.telecomitalia.it) (Ping timeout: 244 seconds)
[07:27:23] *** Joins: pah (~pah@user/pah)
[07:36:02] *** Joins: ambasta (~ambasta@89.46.62.147)
[07:37:11] *** Joins: pah_ (~pah@host-87-6-113-93.retail.telecomitalia.it)
[07:37:22] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[07:43:27] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:44:52] *** Quits: lumberluch0 (~lumbermb@191.114.114.152) (Ping timeout: 244 seconds)
[07:53:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:01:28] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:08:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:37] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:14:47] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:5872:8a70:85c4:9bd4) (Ping timeout: 264 seconds)
[08:23:43] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Ping timeout (120 seconds))
[08:26:13] <ambasta> Why is the form std::forward<Args>(args)... used instead of simply std::forward(args)... ?
[08:27:39] <hnOsmium0001[m]> std::forward is designed to be unable to infer template arguments
[08:28:13] <ambasta> Got it, thanks
[08:30:25] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (*.net *.split)
[08:30:25] *** Quits: prime (~prime@user/prime) (*.net *.split)
[08:30:25] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[08:30:25] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[08:30:25] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[08:30:25] *** Quits: DrinkyBird (~drinkybir@sprawl.drinkybird.net) (*.net *.split)
[08:30:34] *** Joins: DrinkyBird (~drinkybir@sprawl.drinkybird.net)
[08:30:37] *** Joins: chris123123 (~bnc123@streuwerte.de)
[08:30:49] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[08:31:10] *** Joins: undeclared (nullx@user/undeclared)
[08:31:30] *** Joins: prime (~prime@user/prime)
[08:34:52] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[08:48:01] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Remote host closed the connection)
[08:48:36] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[08:51:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[09:28:18] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[09:30:36] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:37:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:12] *** ChanServ sets mode: +v npaperbot
[09:40:13] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:41:10] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[09:49:18] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Quit: leaving)
[09:49:30] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[09:49:37] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Client Quit)
[09:50:06] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[10:23:25] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[10:40:30] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 260 seconds)
[10:54:25] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:284e:1b2b:d5a4:76ff)
[10:58:59] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 258 seconds)
[11:05:19] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:08:40] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[11:12:16] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:17:14] *** Joins: meator (~meator@user/meator)
[11:18:30] *** Joins: mfc (~mfc@user/mfc)
[11:18:41] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:22:12] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:31:43] *** Quits: mfc (~mfc@user/mfc) (Remote host closed the connection)
[11:45:38] *** Joins: mfc (~mfc@user/mfc)
[11:50:41] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:50:41] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:50:55] *** Quits: ivan (~ivan@user/ivan) (Quit: lp0 on fire)
[11:50:55] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (Quit: Leaving)
[11:53:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 244 seconds)
[11:56:47] *** Quits: mfc (~mfc@user/mfc) (Ping timeout: 264 seconds)
[11:56:53] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[11:59:10] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[12:04:27] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[12:05:08] *** Quits: ac_slater (~ac_slater@c-73-221-75-91.hsd1.wa.comcast.net) (Quit: WeeChat 3.2)
[12:09:45] *** Joins: mfc (~mfc@user/mfc)
[12:10:03] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[12:10:38] *** Joins: plastico (~plastico@neomutt/plastico)
[12:12:58] <onizu> Hi. If I have some string value in the form of "1,000,000.0"  how can I convert it to a float of value 1000000.00 ?
[12:13:11] *** Joins: ivan (~ivan@user/ivan)
[12:13:31] <onizu> If I do std::stof(stringVal); it doesn't give the right value due to the commas
[12:14:09] <onizu> is there a built-in command to work around that, or I'll have to manually remove out the commas from the string?
[12:18:09] <LordKalma> that sounds like you need a library that knows how to parse localized number formats ;)
[12:18:10] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:22:30] <TinoDidriksen> << stof("1,000,000.0");
[12:22:30] <geordi> 1
[12:23:00] <TinoDidriksen> { setlocale("C"); cout << stof("1,000,000.0"); }
[12:23:00] <geordi> error: invalid conversion from 'const char*' to 'int'
[12:23:09] <TinoDidriksen> { setlocale(LC_ALL, "C"); cout << stof("1,000,000.0"); }
[12:23:10] <geordi> 1
[12:23:12] <TinoDidriksen> Hm
[12:26:35] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:27:30] <zen_coder> where can we report that wandbox is down?
[12:27:37] <zen_coder> I cannot compile there anymore
[12:27:52] <TinoDidriksen> Works for me
[12:28:22] <zen_coder> ohh damn, they must have fixed is some minutes ago
[12:28:26] <zen_coder> but good
[12:31:01] <zen_coder> I have an issue with boost::asio, working test case here: https://wandbox.org/permlink/VZWKE1J7nTOIjKRx
[12:32:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:34:03] <johnny> hmm.. i see that this QXlsx thing lets you write to arbitrary rows and columns without manually creating the fields. i wonder what the best way is to achieve that myself
[12:34:27] <johnny> it seems to be implemented with a QMap . i didn't expect that
[12:35:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[12:35:39] <johnny> that's deep in qobject magic land
[12:36:59] *** Quits: UmarJ (~username@user/umarj) (Ping timeout: 264 seconds)
[12:40:22] <johnny> one of the generated documents is over 5000 rows, and up to 36 columns
[12:41:56] <LiaoTao> zen_coder, The signal handler may be called with an error if it is cancelled
[12:42:03] <LiaoTao> You need to check against the error code that you are ignoring
[12:42:44] <johnny> like can just do do write(row, column) to any row or column..
[12:43:11] <johnny> i've not yet needed to do someting like this before. there must be some C++ specific term for this sort of container i bet..
[12:43:44] <LiaoTao> zen_coder, https://wandbox.org/permlink/Q8cZ0JaOJ4dCeDkY
[12:50:34] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[13:01:37] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[13:05:08] *** Quits: mfc (~mfc@user/mfc) (Remote host closed the connection)
[13:08:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:08:56] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[13:09:57] *** Joins: lionkor (~lionkor@200116b80ff518007285c2fffea63d72.dip.versatel-1u1.de)
[13:10:19] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:21:29] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:21:52] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:31:03] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[13:32:17] *** Joins: mike18 (~geri@217-149-167-230.nat.highway.telekom.at)
[13:32:17] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:32:19] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:32:37] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[13:32:55] <mike18> hi does python thread pool work similar work in c++ ?
[13:37:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:37:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:11] *** ChanServ sets mode: +v npaperbot
[13:37:21] <sonOfRa> Kinda sorta, but an important note is that in most python runtimes, the GIL prevents more than one thread from actually running code at the same time
[13:40:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:42:24] *** pah_ is now known as pa
[13:42:24] *** Quits: pa (~pah@host-87-6-113-93.retail.telecomitalia.it) (Changing host)
[13:42:24] *** Joins: pa (~pah@user/pah)
[13:44:35] <zen_coder> LiaoTao: thx. Why do I need to check the error code?
[13:45:28] <zen_coder> I also saw that you changed from `boost::asio::steady_timer timer2(io);` to ` boost::asio::steady_timer timer2(io.get_executor());` what does this do?
[13:45:30] *** Joins: cursey (~cursey@user/cursey)
[13:45:55] <mike18> sonOfRa: question to: https://ideone.com/am1KQo
[13:46:23] <mike18> lets say i want to port that code to c++ - will i need blocking or none blocking queue here?
[13:46:32] <mike18> see line 7
[13:46:56] <mike18> and i wonder what happens if exception rises in the worker
[13:52:38] *** Joins: UmarJ (~username@user/umarj)
[13:56:24] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:34d9:c297:fec0:5e7)
[13:56:37] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-003-214.hsi8.kabel-badenwuerttemberg.de)
[13:57:59] *** Quits: UmarJ (~username@user/umarj) (Ping timeout: 264 seconds)
[13:57:59] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:59:15] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 260 seconds)
[14:02:10] <cbreak> mike18: no queue
[14:02:17] <cbreak> that thing seems to use futures. C++ has futures too.
[14:02:28] <cbreak> they're convenient, but not neccessarily optimal for performance.
[14:02:48] <cbreak> https://en.cppreference.com/w/cpp/thread/packaged_task
[14:04:02] <cbreak> you can also use https://en.cppreference.com/w/cpp/thread/async if you don't have an executor you want to use. It might work.
[14:04:04] <johnny> hmm.. i thought it there was some sort of deduction guide such that i could have std::map<int, std::map<int, whatever>> data; and do data[1] = {1, whatever};
[14:04:50] <cbreak> johnny: deduction guides work on initialization
[14:04:51] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 260 seconds)
[14:04:58] <cbreak> you don't initialize anything there
[14:05:07] <johnny> i coulda swore i've seen something like that before
[14:05:24] <johnny> hmm.. well let's see if matters.. i'm not sure yet
[14:05:50] <cbreak> you will have to decide on what the type whatever is, at compile time, at the time you initialize data
[14:06:44] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:07:10] <johnny> sure
[14:08:17] <johnny> the types are known though, so i'm not sure what you mean
[14:08:42] <johnny> i just wrote whatever because the subtype doen' matter
[14:09:01] *** Joins: mfc (~mfc@user/mfc)
[14:09:14] <cbreak> if it is known, then there's no deduction guide needed
[14:09:29] <johnny> then that's nto the term i'm looking for the
[14:10:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 264 seconds)
[14:10:40] <johnny> i just didn' wanna type  myMap[row] = std::map<size_t, whaever>{ mapinitializedata}
[14:10:51] <cbreak> { std::map<int, std::map<int, char const *>> m; m[1] = {{1, "pizza"}, {2, "curry"}}; }
[14:10:52] <geordi>  
[14:10:54] <cbreak> works.
[14:11:13] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:11:23] <cbreak> { std::map<int, std::map<int, std::string>> m; m[1] = {{1, "pizza"}, {2, "curry"}}; }
[14:11:24] <geordi>  
[14:11:36] <cbreak> still works, even with not exactly matching types
[14:12:40] <johnny> ah, silly me.. i did something else in the meantime that broke it. so it was different long errors and i missed it
[14:12:58] <johnny> i tried the way you showed first, but i had a problem, then i tried the wrong way
[14:13:06] <johnny> got it. thanks
[14:13:40] <johnny> so far i've not needed to deal with maps in C++
[14:13:50] <johnny> or any of the associative containers actually
[14:14:48] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:15:44] <cbreak> consider whether the ordered or unordered ones are better for your usecase.
[14:17:07] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[14:18:45] <johnny> ordered are
[14:19:06] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[14:19:21] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:19:38] <johnny> it's a set of rows and columns. i'm just mapping what this xmlsx library did
[14:19:55] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[14:20:19] <johnny> write(int row, int column, QString data) basicaly
[14:20:59] <johnny> i dunno if i should be using the std::map vs some other implemntations out there
[14:21:30] <johnny> but iirc they share the same api for the most part, so i should be able to switch them out of it becomes a concern
[14:22:03] <johnny> i was trying to do it with a vector of vectors, but that doesn't match how the api works :)
[14:22:32] <johnny> it's just way easier to do with a map
[14:24:04] <cbreak> you want a sparse representation?
[14:24:27] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[14:24:30] <cbreak> why not have struct Pos { unsigned row; unsigned column; }; as key?
[14:24:39] <cbreak> instead of wasting memory and processing time on nested maps?
[14:24:59] <johnny> how do you insert at random positions with that?
[14:25:26] <cbreak> m.insert({{r,c}, data})
[14:25:26] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:25:32] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[14:25:42] <cbreak> or m[{r,c}] = data;
[14:26:24] <johnny> so there's still a map
[14:27:05] <johnny> oh.. sorry.. i see you said as key
[14:27:24] <johnny> i don't think that will work
[14:27:58] *** Joins: UmarJ (~username@user/umarj)
[14:28:06] <johnny> maybe after i refactor it it might
[14:28:56] <johnny> well it'll be easy enought to try if i just map write, and then i can change the internals and see if it still works
[14:29:31] <johnny> i think though, that there are multiple calls to write for different values in the same row
[14:29:43] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[14:29:47] <johnny> it's not just write all the column data once
[14:30:08] <johnny> oh.. i guess that doensn't mtter
[14:31:15] <johnny> i suppose it'd be worth really embedding that pattern in my mind though, because none of the languages i'd worked with in the past actually allowed one to use keys that weren't primitives , at least when i learned them
[14:31:48] <johnny> and performance has never been enough of a concern that i needed to change my approach when it did become possibe
[14:31:57] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[14:32:31] *** Quits: UmarJ (~username@user/umarj) (Ping timeout: 265 seconds)
[14:34:17] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:34:25] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Ping timeout: 260 seconds)
[14:34:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:36:30] <cbreak> there's performance, and then there's efficiency
[14:36:38] <cbreak> this is more a question of efficiency
[14:36:47] <ville> there's also icecream. i know which i prefer out of the three
[14:37:12] <cbreak> it's already october.
[14:38:08] <ville> free your mind. don't let the Big Winter tell you what to eat
[14:38:30] <johnny> i've totally gotten milkshakes in the winter
[14:38:54] <johnny> it's not northern US winter, but it does go down to below freezing temp
[14:39:23] *** Quits: dld (~davidlowr@2601:197:600:1210:5db6:6f5a:3b6e:25f9) (Ping timeout: 264 seconds)
[14:41:08] <johnny> now i wonder if i really need a variant, or just convert callers to strings
[14:41:41] <johnny> i guess i won't know until i find out how many there are...
[14:42:22] *** Joins: meator (~meator@user/meator)
[14:49:22] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[14:49:48] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[14:49:49] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[15:00:19] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[15:00:54] <mike18> cbreak: what is an executor? you can also use https://en.cppreference.com/w/cpp/thread/async if you don't have an executor you want to use. It might work.
[15:02:45] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:48be:c24:133a:8962)
[15:02:45] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:48be:c24:133a:8962) (Changing host)
[15:02:45] *** Joins: skapata (~Skapata@user/skapata)
[15:04:40] *** Joins: Guest85 (~Guest85@wificampus-098233.grenet.fr)
[15:05:05] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[15:05:06] <Guest85> Hello! so the last time I wrote a C++ project I was really doing C-style C++ and I was writing Makefiles etc .. I'm wondering what is the "modern" way of doing C++ developement ?
[15:05:54] <Guest85> most existing projects I know of are using (or have been using for a while) CMake, what about the package managers?
[15:07:24] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[15:07:56] <LiaoTao> zen_coder, Continuations may want to know why they were canceled and this is facilitated by the error code. As for the get_executor part, it is the updated design of the ASIO library. The old overload taking a reference to an io_context is probably still there so as to not break old code.
[15:09:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[15:10:37] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[15:11:01] <LiaoTao> Guest85, CMake is some sort of de-facto standard. Package managers are comparatively new and haven't necessarily become ubiquitous. CMake itself does provide some rudimentary package fetching functionality for simple projects, and that's what I use for the most part.
[15:12:06] <Guest85> So when using CMake I shouldn't expect access to much 3rd party code, right?
[15:13:44] <cbreak> mike18: something that executes things
[15:13:45] <LiaoTao> For smaller, bundled libs I've found the CMake functionality completely sufficient. Otherwise I tend to use my own distro's package manager (or respect the end user enough to let him use his). The situation on Windows is probably more favorable to external package management.
[15:13:49] <cbreak> a thread pool for example
[15:14:23] <m_ben> Guest85: https://github.com/cpm-cmake/CPM.cmake
[15:14:56] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[15:19:38] <johnny> Guest85, there's also conan, which is somewhat popular
[15:20:14] <johnny> also build systems like xmake, and build2 have their own, while meson has something above cmake's, but nowhere near conan
[15:20:22] <m_ben> another cmake-only package manager is "hunter"
[15:20:33] <johnny> i just can barely stand to look at cmake
[15:20:44] <johnny> although of course it's btter than plain makefiles and autotools
[15:21:28] <johnny> LiaoTao, the distro almost never has the package versions i want. the only thing i rely on it for is icu..  plus of course for cross compiling it's often useless
[15:21:32] <Guest85> Well my options are simply cmake or conan then
[15:21:42] <johnny> conan works with camke and other build systems
[15:21:53] <johnny> i do'nt know what other than meson or cmake it works with though
[15:21:57] <LiaoTao> johnny, Sounds like you need a better distro :)
[15:22:05] <Guest85> it generates CMake definitions?
[15:22:14] <johnny> LiaoTao, it has the packages i want, but not the versions
[15:22:16] <johnny> well sometimes
[15:22:24] <Guest85> *cough* debian *cough* *cough*
[15:22:33] <johnny> debian's are waay too old
[15:22:40] <johnny> and fedora's are too new sometimes
[15:23:11] <johnny> ubuntu lts plus ppas seems like the only way to have hte most appropriate verisons, but i don't use ubuntu
[15:23:13] <Guest85> arch's packages are *way* too new
[15:23:39] <johnny> the only thing i rely on my distro packages for is icu and iconv i guess
[15:24:11] <johnny> and an unnececesary qt dep that's being removed
[15:24:35] <Guest85> I'm just gonna use conan since what I want to write is a far simpler endeavour than learning CMake
[15:24:36] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:24:45] <johnny> you still need cmake don't you?
[15:24:49] <johnny> or a makefile.. or somethi
[15:25:09] <johnny> i chose meson just so i could avoid having to deal with cmake shenanigans
[15:25:15] <johnny> i still have cmake for this embedded project
[15:25:33] <johnny> LiaoTao, icertainly can't rely on my distro for cross compiling to little arm cortex-m0
[15:26:03] <johnny> or a lot of cross compiling for windows outside of some of the mingw packages avaiable
[15:26:14] <johnny> and then there's musl..
[15:27:00] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:27:36] <LiaoTao> johnny, Sounds like you in particular benefit from a package manager. I still think your distro sounds pretty bad for your use case, though.
[15:27:48] <johnny> what distro would be better?
[15:27:52] <johnny> not that i'm gonna switch tho
[15:28:08] <johnny> but seriously, debian has themost packages, but it's also too old
[15:28:15] <LiaoTao> I don't expect you to switch to anything, but I've done all that you speak of on Gentoo without even wincing.
[15:28:24] <johnny> ah i used to use gentoo
[15:28:31] <johnny> i used it for 7 years
[15:28:36] <johnny> it was fun
[15:28:42] <johnny> it got super boring though
[15:28:57] <johnny> and i realized i was spending too much time maintaining it for the enjoyment i was getting out of tweaking my system
[15:29:03] <johnny> but even so
[15:29:36] <johnny> i just fundamentally don't believe that what the current state of my OS should have anything to do with my development
[15:29:45] <LiaoTao> I barely do anything to my system. It's just there to facilitate whatever I need to do - e.g. lots of cross-compiling and convenient C++ development.
[15:30:10] <johnny> i don't want my system to have dev libraries on it at all  in the install
[15:30:14] <johnny> it does, buti don't want it to
[15:30:31] <johnny> i want those via a language specific pacakge manager, so it's decoupled from whatever version of stuff my distro has
[15:31:00] <johnny> at least until distros start keepign every version of every library that is
[15:31:02] <johnny> but they won't
[15:31:36] <johnny> hmm.. std::quoted is weird
[15:31:39] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 260 seconds)
[15:31:54] <johnny> the return value is unspecified
[15:32:13] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[15:32:28] <johnny> i want what it does, but it does'nt seem like i can really easily use outside of streams
[15:33:25] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:33:43] <johnny> guess i'm gonna have to do that one myself :(
[15:33:46] *** Joins: UmarJ (~username@user/umarj)
[15:33:59] <johnny> why did they tie that up with the io manipulator stuff?
[15:34:09] *** Quits: Guest85 (~Guest85@wificampus-098233.grenet.fr) (Ping timeout: 256 seconds)
[15:36:05] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:36:35] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[15:37:03] <PJBoy> what good would the return value of quoted be to you?
[15:37:44] <johnny> the same way it'd be good for me i was using streams?
[15:37:49] <johnny> except.. i'm not using streams
[15:38:10] <PJBoy> so it wouldn't be any good?
[15:38:25] <johnny> hmm?
[15:38:43] <PJBoy> I'm assuming it would be no good to use if you were using strings except not using streams
[15:38:48] <PJBoy> *streams
[15:38:51] <johnny> iit would be fine if i was using streams
[15:39:00] <PJBoy> what, the return value?
[15:39:01] <johnny> or at least i would assume so based on the examples
[15:39:16] <johnny> i guess? i don't use streams enough to know if that matters
[15:39:35] <PJBoy> it returns an object that tells the stream to do the right thing to output the string
[15:40:18] <johnny> but why do they only make them available to that stuff rather than also returning a stringof some kind
[15:40:35] <johnny> i'm not saying don't do the strema stuff, i'm saying, it'd be nice if that value would also return a string
[15:41:21] <PJBoy> it would be cool if there was a separate function for quoting strings
[15:41:24] <PJBoy> yeah
[15:41:38] <johnny> it took until fmtlib for me to get a hex conversion without streams
[15:42:04] <johnny> or at least visible streams anyways
[15:42:10] <PJBoy> it does also suck that to_string doesn't take a numeric base
[15:42:12] <johnny> i'm not gonna preten to know how it's implemented internally
[15:42:17] <johnny> yes indeed
[15:42:31] <PJBoy> to_chars does take a base though
[15:42:40] <johnny> that's funny
[15:42:48] <PJBoy> and it's roughly as awkward to use as sprintf
[15:42:57] <johnny> fmtlib ftw
[15:42:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:43:00] <PJBoy> 100%
[15:43:09] <PJBoy> I don't suppose fmtlib can do quoting
[15:43:29] <johnny> not that i've seen. it has a nice way to do joining.. which i might use
[15:43:47] <johnny> wait.. that reminds me
[15:44:10] <johnny> is there any reason not to use fmtlib's output_file or whatever of plain ofstream?
[15:44:12] <johnny> over*
[15:44:37] <PJBoy> I doubt it
[15:44:40] <johnny> and how about fmtlib's print in general over std::cout ?
[15:44:56] <PJBoy> cout has some synchronisation details that you might want
[15:45:06] <PJBoy> I dunno about fmtlib's print
[15:45:10] <johnny> for example?
[15:45:31] <PJBoy> getting input from cin flushes cout
[15:45:42] <PJBoy> and outputting to cerr also flushes cout
[15:45:48] <johnny> aha!
[15:45:55] <johnny> that second one is more relevant to me
[15:46:40] <PJBoy> cout is also related to stdout via sync_with_stdio
[15:46:53] <PJBoy> so output via stdin and cout is synchronised
[15:47:14] <PJBoy> cout has its locale stuff of course
[15:47:18] <johnny> uggh
[15:47:21] <johnny> don't remind me
[15:47:24] <johnny> i mean.. actually ti's fine there
[15:47:42] <johnny> sorry.. i was just thinking about how the base stream classes have those locale methos and it made me sad
[15:47:48] <PJBoy> and there's osyncstream, which works with cout and presumably not with fmtlib's stuff
[15:47:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[15:48:02] <johnny> well fmtib can take any stream with some of the methods
[15:48:06] <johnny> i mean functions
[15:48:22] <johnny> i'm guessing any o* stream
[15:48:25] <PJBoy> fair
[15:48:52] <johnny> they need to make a stream class that's just a bag of bytes.. no locale stuff
[15:49:39] <johnny> DO NOT TOUCH WHAT I PUT IN YOU
[15:50:05] <johnny> or take out of you
[15:50:11] <PJBoy> vector<byte>?
[15:50:26] <johnny> i think ti's fine if it's char, because std::byte is too limited
[15:50:40] <johnny> or or int8_t.. whatever
[15:50:58] <johnny> just don't try to encode or decode my bytes unless i as
[15:51:00] <johnny> ask*
[15:51:07] <PJBoy> I think there was a proposal for adding a modern strstream
[15:51:23] <PJBoy> [p0448]
[15:51:23] <npaperbot> P0448R4: [Library] A strstream replacement using span as buffer <https://wg21.link/p0448r4> (by Peter Sommerlad) (2021-03-01) (Related: https://wg21.link/lewg242, https://wg21.link/p0448r4/github)
[15:51:27] <johnny> doesn't that exist?
[15:51:46] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[15:51:57] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:51:57] <johnny> https://en.cppreference.com/w/cpp/io/basic_spanbuf
[15:52:15] <PJBoy> it got merged!
[15:52:19] <PJBoy> holy shit
[15:52:22] <johnny> but that still has tose locale methods..
[15:52:24] <johnny> why??
[15:52:50] <johnny> it literally only talks about characters
[15:53:03] <johnny> i don't care about characters, i care about bytes
[15:53:07] <PJBoy> beamcause streambuf
[15:53:12] <PJBoy> because streambuf
[15:53:42] <johnny> there's no reasonale way to add a parent to stremabuf is ther
[15:54:17] <johnny> "reads characters from the associated input sequence to the get area" tfw when you read to the get area
[15:54:43] <PJBoy> I think it's for dealing with multibyte character sequences?
[15:55:00] <johnny> let's hope so
[15:55:02] <PJBoy> which seekoff/seekpos care about
[15:55:27] <johnny> i never wanna invoke imbue
[15:55:54] <johnny> sorry dude.. this is my seond most hated thing about C++
[15:57:10] <PJBoy> actually my brain wasn't switched on
[15:57:17] <johnny> the first is just the the weird missing stuff when i wanna do things that it implies i i should be able to do.. particuarlly when it comes to working in a more functional style
[15:57:22] <PJBoy> it's for spanstream
[15:57:31] <PJBoy> which does all the usual formatted input and output stuff
[15:58:02] <johnny> the pieces are all there, especially with ranges, but it doesn't fit yet
[15:58:36] <johnny> so it gives me kind of a cognitive dissonance
[15:58:50] <johnny> if this was C.. i'd just like.. well that's that.. that's the way it is :)
[15:59:03] <PJBoy> what's missing functionally?
[15:59:40] *** Joins: DSpider (DSpider@86.127.146.140)
[15:59:50] <johnny> stuff like enumerate and zip as far as ranges go.. and the ability to turm them into containers
[16:00:16] <rpav> ranges doesn't have enumerate or zip? surely it does
[16:00:22] <johnny> it does not
[16:00:27] <johnny> rangse-v3 does
[16:00:28] <rpav> wow, it's even shittier than i thought
[16:00:36] <johnny> it will probably make it into C++23
[16:00:47] <rpav> i'll stick with my https://rpav.github.io/cpp-pipedream/
[16:00:49] <johnny> and some dude implemented rangesnext to some ranges
[16:01:01] * rpav isn't a fan of ranges conceptually anyway
[16:01:03] <johnny> way to toot your own horn, but seriously, thanks for showing me something new
[16:01:11] <PJBoy> zip is in C++23
[16:01:18] <PJBoy> enumerate will likely be in there later
[16:01:31] <rpav> johnny: i'd say shameless promo but no one really uses anyone else's shit in C++ anyway so
[16:01:35] <johnny> where the heck have you been
[16:01:44] <rpav> so i'm just saying "ha ha i have nicer toys"
[16:01:55] <johnny> dude.. i only wanna use everybody else's shit
[16:02:09] <johnny> i mean.. uness it's too small to bother
[16:02:13] <rpav> dunno i think it would be nice if there was a better community effort to build cool stuff
[16:02:30] <johnny> the are tons of thse "awesome-cpp" github thingies out there
[16:02:33] <rpav> well even then, a fine-grained library space is constantly a problem in languages
[16:02:39] <johnny> i've found a ton of header only libraries like that, for example a freakin glob!
[16:02:57] <johnny> like glob("/path/to/**/*.jpg")
[16:03:05] <rpav> like, node solves it by packaging single functions, which is dumb; other things solve it by everyone rewriting single functions in their own libraries, which is also dumb ;/
[16:03:10] <rpav> yea
[16:03:31] <johnny> man.. hook me up man.. i'm gonna browse your repos when i wake up
[16:04:04] <rpav> i don't really have that many C++ ones, and some of the cooler ones aren't released ;/
[16:04:28] *** Quits: mfc (~mfc@user/mfc) (Remote host closed the connection)
[16:04:54] <rpav> but pipedream i wrote primarily as a way to understand why ranges was convoluted, and it more just made me dislike ranges
[16:05:10] <rpav> also for all the missing useful day-to-day stuff
[16:05:10] <johnny> so did you write a conclusion?
[16:05:58] <johnny> yeah it's ridiculous how many little missing pieces there are that just make the language feel worse than it is
[16:06:05] <rpav> i think the real conclusion is "ranges is focused on fixing iterators, and focusing on begin()/end() 'ranges', which limits its usefulness and novelty"
[16:06:06] <johnny> because all of these things are achievable
[16:06:23] <rpav> yeah definitely
[16:06:47] <johnny> and unlike the node situation you mentioned, it's way harder to rely on third parties to solve it
[16:07:27] <rpav> a bit .. c++ is harder to write for one .. and while there can be simple (or non-simple) header-only libraries, dealing with deps is more painful
[16:07:34] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:08:27] <johnny> yeah that's why  said it was way harder to rely on third parties to smooth out the rough edges
[16:08:29] <rpav> also the biggest C++ use is like, big internal systems and a lot of stuff doesn't tend to filter out from that stuff
[16:08:40] <rpav> sure
[16:08:53] <johnny> well that's a consequence of the way the language evolved by staying so cathedral like i guess
[16:09:23] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:09:28] <johnny> so instead, folks who anna do this end up with rust or zig..
[16:09:41] <johnny> zig is kinda neat .. not something you'd do something big in
[16:09:49] <johnny> but something you might want C++ for that's small
[16:10:04] <rpav> actually to some degree it's the opposite problem, or a different variation .. you have everyone sortof doing their own thing everywhere and the culture is opposed to enforcing a single unified _anything_
[16:10:06] <johnny> and i think that really steals the future from languages
[16:10:16] *** Joins: horribleprogram (~user@2607:fea8:7040:830:c8e3:c56b:f48c:87dd)
[16:10:33] <johnny> rpav, ah. i saw that as a consequence of the cathedral nature.. thus leading to entire separate ecosystems like Qt and what have you
[16:11:14] *** Joins: proller (~p@2a02:6b8:0:40c:118b:b037:e31d:344a)
[16:11:25] <rpav> it's a bazaar of cathedrals ;) i think of it more as an "archipelago problem"
[16:11:27] <johnny> oh man.. it got late. thanks for showing me your library.. i was looking fo something like that
[16:11:46] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 245 seconds)
[16:11:48] <rpav> later o/
[16:12:11] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:12:14] <johnny> let me know if you decide to release anything else cool
[16:14:56] *** Quits: horribleprogram (~user@2607:fea8:7040:830:c8e3:c56b:f48c:87dd) (Changing host)
[16:14:56] *** Joins: horribleprogram (~user@user/horribleprogram)
[16:15:56] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[16:17:31] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:19:12] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[16:24:37] <LordKalma> !rq
[16:24:37] <nolyc> LordKalma: <PJBoy> pull it, pull harder, keep pulling
[16:30:41] <PJBoy> wow I forgot the context for that one already
[16:33:15] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[16:33:18] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:34:27] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:34:28] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:36:16] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:37:49] <Haohmaru> sounds like git
[16:38:31] <Haohmaru> git constipation
[16:43:20] *** Joins: AmR (~AmREiSa@156.199.244.83)
[16:43:33] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:46:10] *** Quits: UmarJ (~username@user/umarj) (Ping timeout: 260 seconds)
[16:48:43] *** Joins: UmarJ (~username@user/umarj)
[16:49:13] *** Joins: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:50:42] <Guest81> I want to write a relatively small C++ program and I thought I would use the opportunity to check out C++20, problem is: https://en.cppreference.com/w/cpp/compiler_support/20
[16:51:28] <Guest81> it was really modules and concepts that caught my eye, but the compilers are very shaky in that regard
[16:51:29] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:51:58] <Guest81> or are they? could I expect, say, the examples on cppreference to work at least?
[16:52:54] <rpav> 20 is not very well-implemented yet sadly, unless you're using VS
[16:53:03] <Guest81> it seems that MSVC is far ahead of gcc/clang, which I found very suprising
[16:53:16] <rpav> MS has been putting in effort recently
[16:53:54] <Guest81> rpav: but how bad is the situation, in your experience?
[16:54:24] <Haohmaru> M$ got money and people ;P~
[16:54:25] *** Joins: lumbermb (~lumbermb@190.13.136.234)
[16:54:49] <Haohmaru> the other two compilers.. aren't they basically "volunteer" based
[16:54:51] <rpav> you can definitely use bitfields and designated initializers; you might be able to use concepts; you can _maybe_ tinker with coroutines if you write all the setup code yourself (i almost had this working at some point), and err .. a lot of other stuff is missing
[16:55:10] <rpav> i haven't really taken full inventory, i'm sure cppreference is pretty accurate .. or you could check individual compilers' support pages
[16:55:30] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[16:58:18] <Guest81> also, what's with c++20 vs gnu++20 ?
[16:59:03] <Haohmaru> this is a GCC-specific thing
[16:59:22] <Haohmaru> there's always the "gnu" flavored version of C/C++
[16:59:25] <Guest81> rpav: alright that sounds good enough for me to mess with, well ... until I get mad and quit haha
[17:00:36] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:00:49] *** Quits: UmarJ (~username@user/umarj) (Ping timeout: 244 seconds)
[17:02:59] *** Quits: lionkor (~lionkor@200116b80ff518007285c2fffea63d72.dip.versatel-1u1.de) (Remote host closed the connection)
[17:03:22] *** Joins: lionkor (~lionkor@200116b80ff518009ef0135c65608c7d.dip.versatel-1u1.de)
[17:04:12] <rpav> dunno, i tend to mostly migrate versions when it really has something that addresses an annoying problem
[17:04:29] <rpav> e.g. i switched to 20 entirely because of bitfield initializers ;)
[17:07:14] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[17:08:29] <cbreak> overkill
[17:08:39] <rpav> it was becoming a problem
[17:08:52] <cbreak> you actually using bitfields in a first place is quite impressive.
[17:08:58] <cbreak> I've not found any purpose for them so far
[17:09:23] *** Quits: X-Scale (~ARM@92.250.96.217) (Ping timeout: 264 seconds)
[17:09:23] *** X-Scale` is now known as X-Scale
[17:09:26] <rpav> the only pre-20 way was something like `struct foo { bool b : 1; ... } foos{0,0,1,0,0,0...};`
[17:09:51] <rpav> they're handy when you have a bunch of flags; this doesn't pop up a lot but in some things it can
[17:11:15] <rond_> Maybe I won't need to provide a full reproducible example:  template<typename MyClass>void foo(const A& a){ MyClass{a}; // works    MyClass(a); // doesn't work }   why is that a casE?
[17:12:10] <lumbermb> so far I've found nothing in c++17 or c++20 worth switching. Anything that's really important is lib level and can be backported (eg.: invoke)
[17:12:37] <rpav> lumbermb: a lot of lib-level things can't due to range-based for and/or the immense annoyance of writing template code for some things pre-folding
[17:12:44] <rpav> also destructuring making the resulting APIs nicer
[17:12:45] *** Quits: Guest81 (~Guest81@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[17:12:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[17:13:18] <rpav> rond_: why are you writing either one?
[17:13:39] <rpav> like, what is your intention with the statement `MyClass(a);`
[17:14:36] <PJBoy> { int(x) = 0; cout << x; }
[17:14:37] <geordi> warning: unnecessary parentheses in declaration of 'x' (fix known)
[17:14:41] <PJBoy> geordi, use -w
[17:14:41] <geordi> 0
[17:14:43] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:14:44] <rpav> ^
[17:14:51] <rond_> rpav constructing an object, obviousl
[17:14:51] <rond_> y
[17:15:04] <rpav> rond_: it's not obvious if you know the language
[17:15:06] <PJBoy> MyClass(a) constructs an object called a
[17:15:10] <PJBoy> default constructs
[17:15:12] <rpav> e.g. are you intending to make an `a` of type MyClass
[17:15:21] * Haohmaru claps cbreak with embedded
[17:15:26] <PJBoy> (the parentheses are redundant)
[17:15:41] <rond_> `a` is a parameter to the constructor
[17:16:00] <Haohmaru> hm, "claps"
[17:16:12] <rond_> `Myclass mycls(a);`
[17:16:15] <rpav> it's non-idiomatic and as previously demonstrated, warned at by the compiler, and usually someone means something more like `struct S : MyClass { S(const A& a) : MyClass(a) { ... } };`
[17:16:48] <rpav> or that
[17:16:57] <lumbermb> so far I've had no problem with that kid of stuff rpav ; tho I'm itching for a decent ranges library where at least the basics work pre-C++11.
[17:17:03] <rpav> RAII does _not work_ in the form of `MyRaii(someobj);`
[17:17:15] <rpav> (as a statement)
[17:17:56] <rond_> well, I was wondering why `MyClass(someobj);` didn't work buy `MyClass{someboj}` did. The latter is better for calling constructors anyway, right
[17:17:57] <rond_> ?
[17:17:58] <rpav> lumbermb: sure, but only because you haven't tried to write or use the stuff in question
[17:18:29] <PJBoy> `MyClass{a}`  spawns a temporary MyClass object that immediately gets destroyed
[17:18:37] <rond_> sure
[17:18:41] <PJBoy> and `MyClass(a);` is a different spelling of `MyClass a;`
[17:18:47] <rpav> rond_: these days, favor right-hand type, e.g. `auto x = MyClass(a);` which (since it's an expression, not a statement), is right
[17:18:53] <lumbermb> because I know it'd be a PITA. I use a simpler ranges library instead. Besides, most of the time that kind of code is write-once.
[17:18:55] <rpav> and won't lead to confusion such as the above
[17:19:11] <rond_> "and `MyClass(a);` is a different spelling of `MyClass a;`"   - that's a surprise
[17:19:18] <PJBoy> you can use `(MyClass)(a)` or `static_cast<MyClass>(a)` to spawn a temporary like the braces expression
[17:19:27] <rond_> should I always stick to `{}` when calling a constructor then?
[17:19:31] <PJBoy> nah
[17:19:31] <rpav> lumbermb: right but you can't do nice things like `for(auto&& [i,v] : zip(from(0), myvector)) { ... }` and have nice enumerated values
[17:19:42] <PJBoy> use static_cast when you want to do casts
[17:19:52] <rond_> NO CASTS, I want to call a constructor
[17:19:58] <PJBoy> calling the ctor is a cast
[17:20:04] <rpav> lumbermb: or any other number of zips/compositions/etc without some rather ugly multi-line syntax
[17:20:16] <PJBoy> any call to a ctor taking a single argument is a cast
[17:20:24] <lumbermb> I can perfectly, just not with that exact syntax. That something is multiline is not bad; if anything, it makes it harder to miss when you have to correct stuff
[17:20:37] <rpav> it's fugly if you want to deal with it ¯\_(ツ)_/¯
[17:20:40] <PJBoy> `auto vec = vector<int>(4);` <-- casts 4 to a vector<int>
[17:20:43] <rpav> writing zip is a _lot_ more painful pre-17
[17:21:04] <rond_> PJBoy you _can_ view it like this, but it's hardly useful
[17:21:10] <rpav> i _think_ it's possible
[17:21:13] <PJBoy> why not?
[17:21:17] <lumbermb> well yeah, it is. But if someone does it, then you can extend usage of C++11 etc, which sometimes is needed.
[17:21:22] <rond_> anyway, why "NAH" for calling all constructors with `{}`?
[17:21:29] <rpav> the main big thing with 17 is also for's implicit __begin/__end don't have to be the same, which makes writing a lot of things nicer too
[17:21:37] <PJBoy> we have static_cast for a reason
[17:21:41] <lumbermb> I write library code, also for work, so I can't assume that clients have Tomorrow's Version of C++, let alone force them to download the latest commit of the compiler
[17:21:56] <rpav> 17 is 4-years-ago's version of code
[17:21:56] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:22:30] <rpav> writing 20 today is pretty dubious unless it's for an internal project with a known compiler, but 17 is pretty across the board even multiple compiler revs ago
[17:22:39] <PJBoy> rond_, because you can't create a vector of 4 elements like in my snippet just above using braces
[17:23:05] <PJBoy> initializer_list ctor overloads take precedence
[17:23:07] <lumbermb> Yet it's not well supported where I need it to. And last I tested in the compiler testbed we have at work (which uses Debian Stretch), c++17 was not well supported (some features made it in, others incompletely)
[17:23:17] <PJBoy> so generally speaking you should default to parentheses
[17:23:30] <rpav> it sucks to use outdated stuff ;/
[17:23:33] <Haohmaru> lumbermb debian stretch is debian 9, while 11 came out
[17:23:50] <rpav> these days i wouldn't even bother with anything that doesn't support m7
[17:23:52] <rond_> PJBoy parentheses for 2-and-more arguments and {} for 1 argument ctors?
[17:23:52] <rpav> 17
[17:24:15] <PJBoy> rond_, check the vector<int>(4) example again
[17:24:29] <PJBoy> it has one argument, and it was the case I provided as an example of where braces are unacceptable
[17:24:41] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:34d9:c297:fec0:5e7) (Ping timeout: 245 seconds)
[17:25:42] <ville> use {} everywhere, refuse to use types that have std::initializer_list ctors
[17:25:54] <PJBoy> you can only use braces sanely when either there are *no arguments* or when you know the class you're initialising well enough to know the difference between braces and parens
[17:26:30] <rond_> that's madness
[17:26:32] <PJBoy> in generic code, you can't use braces at all except for the former case
[17:26:41] <PJBoy> yeah braces suck
[17:26:49] <rond_> just when I started to like C++
[17:26:52] <rpav> it's C++, everything is madness and terror
[17:26:52] <lumbermb> having both braces and initializer_list in C++11 was a mistake
[17:27:00] <rond_> somethings like this comes up
[17:27:07] <ville> PJBoy: of course you can. just don't  use types with std::initializer_list ctor and refuse to support such nonsense
[17:27:10] <rond_> who in their sanity could agree to such a thing
[17:27:17] <lumbermb> the C++ Committee
[17:27:20] <rond_> that even calling a constructor is ambiguous in certain cases
[17:27:20] <rond_> WTF
[17:27:26] <rpav> committee-driven design
[17:27:30] <ville> on a more serious note, as is apparent you can't* pick one or the other. you just have to remember all kinds of bullshit rules because c++ initialization rules are nonsense
[17:27:44] <PJBoy> parentheses are completely usable in every context
[17:27:47] <rpav> you can almost always `auto x = T(...)`
[17:27:50] <lumbermb> insert obligatory Forrest Gump c++ gif
[17:27:52] <rond_> I got so angry and upset I need to take a walk...
[17:27:54] <rpav> annoyingly except in structs
[17:27:55] <ville> PJBoy: no they are not
[17:27:59] <PJBoy> well
[17:28:08] <PJBoy> except default member initialisers
[17:28:12] <PJBoy> for no reason
[17:28:20] <lumbermb> parentheses for constructors have always functioned well and will always function well
[17:28:32] <ville> PJBoy: also if you want to assign x.y = ();
[17:28:39] <lumbermb> it's just you have to sometimes adds more of them
[17:28:40] <rpav> not really, or they wouldn't have added {} in the first place for all the places they weren't
[17:28:45] <PJBoy> oh yeah value init too
[17:28:46] <rond_> lumbermb unless you do MyClass(arg);
[17:28:50] <PJBoy> and obviously aggregate init
[17:28:58] <ville> PJBoy: well aggregate was fixed in 20
[17:28:59] <PJBoy> bah
[17:29:04] <PJBoy> aggregate was somewhat fixed
[17:29:09] <PJBoy> you still can't do like
[17:29:22] <PJBoy> { array<int, 2> x(1, 2); }
[17:29:22] <geordi> error: array must be initialized with a brace-enclosed initializer
[17:29:26] <PJBoy> even though array is an aggregate
[17:29:26] <ville> i evaluated the new 20 initialization rules and concluded i'll stick to {}
[17:30:28] <PJBoy> so my policy is {} for value init, aggregate init, and sometimes default member init; and () absolutely everywhere else
[17:30:35] <lumbermb> I wish C++ had incorporated some kind of "let" syntax. it would have helped with some of the madness
[17:30:47] <rpav> no it wouldn't
[17:30:58] <Haohmaru> #define let
[17:30:59] *** Quits: meator (~meator@user/meator) (Ping timeout: 264 seconds)
[17:31:10] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:31:12] <rpav> let is also a terrible name for anything that's not actual-let
[17:31:15] <PJBoy> if it weren't for the initializer_list bullshit, I'd be one of those people that vouches for {} everywhere
[17:31:38] <rpav> what _would_ help is some definitive/universal value/content initialization
[17:31:42] <ville> PJBoy: like i said never write, use or support types that have std::initializer_list ctors
[17:31:56] <lumbermb> I wonder why wasn't [...] used for initializer_list. Since it basically denotes an array-like sequence.
[17:32:01] <PJBoy> ville, fair play to you then
[17:32:16] <lumbermb> This in theory should be completely unambiguous? Type foo { a, b, [c, d, e], f };
[17:32:19] <rpav> [] is array dereference, it doesn't designate any array-like sequence
[17:32:42] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:33:24] <lumbermb> rpav, " what _would_ help is some definitive/universal value/content initialization"  → insert xkcd comic about standards
[17:33:36] <PJBoy> the idea of all the braces stuff was for uniform initialisation
[17:33:40] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c90e:2355:f46b:5a5f)
[17:33:45] <PJBoy> so that's why initializer_list uses it too
[17:34:11] <lumbermb> but that's (paradoxically enough) not uniform
[17:34:13] <PJBoy> and of course braces support more than just making initialiser_lists, so that's why they're braces and not square brackets
[17:34:24] <rpav> lumbermb: kinda, that's what got us to today, but in reality it was more the C++ committee always shooting around solving a problem
[17:34:33] <lumbermb> as per usual
[17:34:48] <lumbermb> maybe we could overthrow the Committee and put the Python people in its place?
[17:35:07] <rpav> it's sortof the design equivalent of the XY problem, i.e. "we _want_ to solve problem X, so we're going to do Y thing which is in the vicinity of solving X" .. except it's not X, and thus we end up with carp
[17:35:12] <lumbermb> ...no wait, we'd have the P2-P3 fiasco again
[17:35:13] <PJBoy> compiler vendors already struggle to keep up to date with the standard
[17:35:13] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 265 seconds)
[17:35:19] <rpav> haha no
[17:35:21] <PJBoy> imagine having python's idea of a language
[17:35:27] <PJBoy>  / standard library
[17:35:40] <rpav> python is simply "we want to solve problem X; let's evaluate all the possibilities and pick the wrongest one"
[17:35:44] <lumbermb> I hear good things about R, does it have a committee and is it any good?
[17:36:26] <PJBoy> the committee is fine
[17:36:26] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:36:36] <PJBoy> it's just that we never praise all the stuff they do right
[17:36:43] <PJBoy> so you end up getting a skewed perception of them
[17:36:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[17:37:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:11] <PJBoy> but man
[17:37:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:18] *** ChanServ sets mode: +v npaperbot
[17:37:21] <PJBoy> the initializer_list resolution of braces init
[17:37:24] <lumbermb> yeah but that's true of everything. "Good by default" is good, and thus goes, well, ignored by default.
[17:37:28] <rpav> the committee is kinda crap, but it's the least bad option
[17:37:37] <lumbermb> which is why we don't give people medals for basic human decenty
[17:37:51] <rpav> they sortof mean well, it's mostly a bad-laziness problem
[17:37:55] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[17:38:23] <lumbermb> bad-laziness — better then that I don't join, I'm an exemplary model of laziness
[17:39:09] <rpav> well, there's good-lazy and bad-lazy; good-lazy is "i shouldn't have to do this when i can devise a better way for the computer to do it for me"
[17:39:23] <rpav> bad laziness is "we can't be bothered and/or that sounds hard so let's just half-ass it"
[17:39:29] <lumbermb> rpav, see the xkcd on Automation
[17:40:02] <lumbermb> but yeah I'm the lazy kind of lazy
[17:40:27] <rpav> wrt the former, one can trivially make `make_array<T>(...)`
[17:40:47] <rpav> actually hm
[17:41:02] <PJBoy> there's std::to_array(!)
[17:41:11] <lumbermb> wait there is? since when?
[17:41:12] <rpav> we could probably have a `make<T,...>(...)` that was a proper value-initialization of any thing
[17:41:18] <PJBoy> since C++20
[17:41:18] <rpav> probably 20
[17:41:22] <lumbermb> aha
[17:41:40] <PJBoy> it's pretty useful sometimes
[17:41:57] <rpav> sounds ruby-ish
[17:42:09] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 244 seconds)
[17:42:14] <lumbermb> make<T,...> goes back to my idea for a "let"-like syntax. C++ but you can literally write "let there be Light(...);"
[17:42:15] <PJBoy> namely it lets you specify the type of the array elements without specifying the number
[17:42:25] <rpav> that's trivial
[17:42:36] <PJBoy> to_array is a very trivial function
[17:42:38] <lumbermb> yeah
[17:42:44] <rpav> though it looks like basically the way i'd write make_array
[17:42:45] <PJBoy> but it's useful for that
[17:43:03] <rond_> I have a bunch of tests that use <A, B, C>
[17:43:11] <rond_> is there a way to name it and just use this name?
[17:43:13] <rond_> macro?
[17:43:28] *** Joins: magla (~gelignite@55d4378c.access.ecotel.net)
[17:43:29] <rpav> i'm thinking a general `make()` ought to be more of a thing now
[17:43:34] <lumbermb> ^
[17:43:48] <PJBoy> a general make thing sounds pretty redundant to me
[17:43:50] <rpav> make<unique_ptr>(...)
[17:43:59] <rpav> make<array, int>(1, 2, 3)
[17:44:08] <rond_> (I'm asking because <A, B, C> might get extended to <A, B, C, D> in the future and it'd be cool to jsut alter one line and get it propagateed to multiple tests
[17:44:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:c90e:2355:f46b:5a5f) (Ping timeout: 264 seconds)
[17:44:14] <rpav> etc .. some single point of specialization that would properly value-initialize any given type
[17:44:17] <lumbermb> huh, as it turns out I do have make_array in my codebase. Might need to add to_array to backports as a synonym?
[17:44:18] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[17:44:42] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:44:49] <PJBoy> depends if you take variadic arguments like in rpav's example just now
[17:44:51] <rpav> plus likely it would default to the correct thing in many cases
[17:44:57] <PJBoy> or if you take an array like the std::to_array
[17:45:13] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:45:15] <PJBoy> (which can be provided as a braced list)
[17:45:17] <lumbermb> so make<C, T...>(a...) would basically do return C<T...>(a...); ?
[17:45:17] <rpav> (if you don't take variadic arguments what are you even doing!)
[17:45:42] <Alipha> rond_: regarding `MyClass{a};`, why do you want to construct a temporary object that's immediately destroyed anyway?
[17:45:43] <rpav> lumbermb: probably by default, though i'd have to think about it a bit
[17:46:03] <rond_> Alipha EXPECT_THROW(MyClass{a}, std::invalid_argument) in a test
[17:46:03] <PJBoy> << to_array<int>({1, 4, 9, 0x10}) // e.g.
[17:46:04] <geordi> {1, 4, 9, 16}
[17:46:13] <Alipha> rond_: ah
[17:46:20] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[17:46:38] <rpav> if MyClass(a) doesn't work there then your test macro is bad
[17:46:48] <rond_> it's google_test
[17:46:53] <rond_> and well, it doesn't work
[17:46:56] <rond_> because it's ambiguous
[17:47:01] <rpav> then google test is shit
[17:47:11] <PJBoy> you can't expect that much from macros
[17:47:14] <rond_> it doesn't work outside of macro either
[17:47:15] <rpav> (is this surprising)
[17:47:28] <PJBoy> how could it possibly make `MyClass(a)` work like `(MyClass)(a)`?
[17:47:54] <rond_> C++ is shit for allowing MyClass(a) mean "make a an instance of MyClass"
[17:47:58] <rond_> not google test
[17:48:12] <rond_> such casts should be deprecated
[17:48:22] <PJBoy> it's the cast that you want
[17:48:25] <rpav> `auto __test_var_1__ = ...`
[17:48:32] <PJBoy> it's the declaration that you're annoyed about
[17:48:40] <PJBoy> and there's *some* justification for it
[17:48:42] <rond_> such declarations*
[17:48:43] <rond_> right
[17:48:52] <rond_> PJBoy there is none. it's confusing and annoying, sorry
[17:48:52] <rpav> if you have a function-like macro, parameters should behave as in a function-like context
[17:49:16] <PJBoy> `T (&a)[3];` needs to be a declaration that you can make
[17:49:23] <PJBoy> hence parentheses need to be allowed in declarations
[17:49:54] <PJBoy> or `T (*func)(void*);`
[17:50:24] <rond_> I have a bunch of tests that use <A, B, C>   is there a way to name it and just use this name? or do I have to create a macro?
[17:50:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:50:28] <PJBoy> like I say, this is where static_cast is useful
[17:50:43] <PJBoy> `static_cast<MyClass>(a)` is clear both grammatically and semantically
[17:53:19] <PJBoy> what is <A, B, C> anyway?
[17:53:24] <PJBoy> template arguments?
[17:53:49] <PJBoy> you can resolve whatever template with those arguments in some form
[17:54:16] <rond_> I have a bunch of class myFoo<A,B,C>();
[17:54:26] <rond_> I'd like something like myFoo<macroname>();
[17:54:35] <rpav> well you can
[17:54:39] <rond_> a bunch of functions foo<A,B,C>();
[17:54:42] <rond_> *
[17:54:44] <rpav> you shuold almost certainly using
[17:54:55] <rpav> `using MyMyFoo = myFoo<A,B,C>;`
[17:55:25] <PJBoy> as for the functions
[17:55:27] <rpav> you could also do some template parameter pack store and apply but that seems like overkill and the syntax isn't amazing
[17:55:47] <PJBoy> I don't think there's anything great
[17:55:50] <rond_> sorry, I mispelled. I don't mean classes, just function calls
[17:56:29] <PJBoy> like you can make `auto& specialFunc = func<A, B, C>;` and use that
[17:56:37] <PJBoy> but you'd have to do it for all funcs
[17:56:43] <rond_> sure
[17:56:57] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[17:56:59] <rond_> I'd like to not repeat <A,B,C>, but to define this list once and reuse it
[17:57:03] *** Joins: mfc (~mfc@user/mfc)
[17:57:16] <PJBoy> I think you'd want a macro there, yeah
[17:57:39] <rond_> okay, thanks
[17:58:17] <PJBoy> if you wanted to be super purist
[17:58:21] <rpav> hmm i have some apply_pack stuff, i wonder if it could be used for functiouns
[17:58:56] <PJBoy> you could make a `using Ts = tuple<A, B, C>;` and make all your function reference like `auto& specialFunc = func<tuple_element<Ts, 0>, tuple_element<Ts, 1>, tuple_element<Ts, 2>>;`
[17:58:59] <rpav> probably apply_pack::call(f, ...); would be pretty easy
[17:59:10] <rpav> yea
[17:59:14] <rpav> basically
[17:59:16] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:59:24] <PJBoy> (except spelled correctly)
[17:59:38] <rpav> i have a parameter_pack<Ts...> which is not a tuple / does not store values, but you can store/iterate/etc
[17:59:41] <rond_> is there a way to create a macro using other macro value?
[17:59:54] <PJBoy> to a degree
[18:00:10] <rpav> apply_pack_t<SomeType, Pack>
[18:00:11] <rond_> #define macro1 A, B      #define macro2 $macro1, C
[18:00:15] <rond_> something like this I'd like
[18:00:21] *** Joins: UmarJ (~username@user/umarj)
[18:00:43] <PJBoy> this is where it's useful to define an apply macro
[18:00:47] <rpav> apply_pack_call<Pack>(func, ...);
[18:00:53] <PJBoy> #define APPLY(f, x) f(x)
[18:01:01] <rpav> actually probably nicer than macro shenanigans
[18:01:03] <PJBoy> or with varargs
[18:01:16] *** Quits: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi) (Ping timeout: 244 seconds)
[18:01:29] <rond_> hmm I'm not sure I know how to do it
[18:01:36] <PJBoy> #define APPLY(f, ...) f(__VA_ARGS__)
[18:01:57] <PJBoy> and then your macro2 can look like `#define macro2 APPLY(macro1, C)`
[18:02:29] <PJBoy> actually did I misread
[18:02:32] <PJBoy> I think I misread
[18:03:24] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[18:04:09] <PJBoy> well whatever
[18:04:13] <PJBoy> what you wrote is basically fine
[18:04:13] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:04:29] <PJBoy> https://wandbox.org/permlink/BLwHCsfou3cAj3Cm
[18:05:08] <rond_> I see what you did here with declarations LOL
[18:05:16] <rond_> that was hillarious
[18:05:31] <InPhase> rond_: Behold, the variadic template parameter to a template:  https://wandbox.org/permlink/NDMwfh7umH5j0bBw
[18:05:58] <PJBoy> I'm not sure what I did
[18:06:58] <InPhase> rond_: You can do other variations, such as putting that as a member instead of a base class.  Whatever fits your needs.
[18:07:02] <rond_> InPhase I like to make my life more difficult, but that's even beyond me (and my template skills I guess. Also, readability suffers, I think)
[18:07:29] <rond_> I think I'll stick to macros this time
[18:07:34] <PJBoy> doesn't help call a function
[18:07:51] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c4ab:4275:2f29:1458)
[18:08:28] <InPhase> rond_: TMP can get messy, but that's actually not so complex when you break it down.  The key is simply that you can put "template<class... Args> T" right in there as the thing inside the template, rather than just "class T".  Then you can pass in a template rather than a class selected from a template.
[18:09:17] <InPhase> "template<class... Args> class T" I mean.
[18:09:42] <rond_> #define MACRO1 A, B
[18:09:42] <rond_> #define MACRO2 MACRO1, C
[18:09:43] <rond_> I'll stick to this as for now, I think.
[18:09:46] <rond_> more readable
[18:10:08] <rond_> + I'm worried that my code will be rejected anyway because of lack of straight-forwardness
[18:11:25] <InPhase> rond_: People reflexively rejecting macros outnumber people reflexively rejecting templates right now, although I personally think they both have a place.  Good luck with it though.  :)
[18:13:02] <rpav> hm
[18:13:18] <rpav> i'm not sure you _can_ "destructure" a function call template in any way
[18:13:21] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:13:39] *** Joins: meator (~meator@user/meator)
[18:13:55] <rond_> rpav I ended up with foo<MACRO2>(); bar<MACRO2>();  zee<MACRO1>();
[18:15:02] <rpav> oh i suppose you can wrap it in like a template_function<> class ;P
[18:15:14] <rpav> or std::function might be sufficient
[18:17:43] <PJBoy> if you could pass a function template as a template template parameter, then you could make it work
[18:17:46] <rpav> or can you
[18:18:09] *** Quits: mfc (~mfc@user/mfc) (Remote host closed the connection)
[18:18:15] <rpav> right i don't think you can, and i'm not sure you can _generally_ work around it
[18:18:35] <rpav> maybe in 20
[18:18:35] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:18:38] <PJBoy> you can probably get a generic lambda to work around it ish
[18:18:48] <rpav> does 20 have auto template parameters?
[18:18:48] <rond_> macros work just fine
[18:19:32] <PJBoy> template<auto> has been around since C++17
[18:19:45] <rpav> you need like .. template values as parameters
[18:19:55] <InPhase> rpav: What do you mean by destructure?
[18:20:53] <rpav> InPhase: some template<template ... F, typename...Ts> struct template_function { ... }; such that you can for example represent any template of `template<typename...Ts> void foo(...) {}`
[18:21:15] <rpav> i think template-template parameters only support types
[18:21:19] <PJBoy> indeed
[18:21:32] <PJBoy> specifically class templates
[18:21:54] <rpav> in the _specific_ case you can obviously wrap some _specific_ function, but the point here is _any_ template function through one class
[18:22:21] <InPhase> But a template function has a type.
[18:22:27] <rpav> i'm not entirely convinced it's impossible but it's likely a bit arcane at this point
[18:22:37] <PJBoy> the type of a function isn't very helpful for calling it
[18:22:59] <rpav> InPhase: an _instantiated_ template function has a type, a function template would be a template-template function
[18:23:16] *** Joins: jkaye (~jkaye@2601:281:8300:7530:b96c:a192:af21:58d1)
[18:23:32] <InPhase> rpav: Right...  I see what you're saying now by "destructure".
[18:23:37] <rpav> e.g. what we need for to make it trivial is `template<template<typename...> auto F, typename...Ts>`
[18:24:17] <rpav> i'm not sure you can otherwise "smuggle" an uninstantiated function template across any border so to speak
[18:24:31] <PJBoy> well you can wrap up the function in a lambda
[18:24:39] <PJBoy> which is eh
[18:24:54] <rpav> that's the same case as wrapping a specific function in a specific struct
[18:25:05] <PJBoy> yeah
[18:25:09] <rpav> just less typing, which is a clear gain, but
[18:25:50] <PJBoy> and you'd need to write a load of code for giving that lambda the template arguments
[18:26:08] <rpav> ;/ the struct might be less work then
[18:26:22] <rpav> #define func_struct(...) ... ;)
[18:26:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[18:26:39] <PJBoy> and that's where I lose interest
[18:26:42] <PJBoy> and use a macro
[18:27:22] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:27:24] <rpav> my interest is only whether there's the possibility of doing such or not, and it looks like not ;/
[18:27:25] <PJBoy> for reference https://wandbox.org/permlink/G5KzOn4QdlGGQkot
[18:27:46] <rpav> er
[18:28:05] <rpav> then it must be possible
[18:28:11] <rpav> well in 20 i guess
[18:28:44] <rpav> oooh look
[18:29:08] <rpav> the first template argument to call in that case is still a template-template typename, and it accepts `f`
[18:29:23] <PJBoy> if you had read the error messages, you'd see you're mistaken
[18:29:41] <rpav> oh, bah, i thought this worked, my browser window is short :(
[18:30:01] <PJBoy> that's what would be "nice" if it worked
[18:30:11] <rpav> yeah what we need is `template<typename...> auto F`
[18:30:24] <rpav> and template values are more than just functions
[18:32:03] <PJBoy> you can get at least this far with the lambda https://wandbox.org/permlink/0piGhRTOowJzyegS
[18:32:10] <PJBoy> but you have to write the lambda
[18:32:10] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:33:58] <rpav> someone should write a proposal; this is of highly limited use and it fixes a mostly theoretical bug, it should be an easy accept ;P
[18:34:24] <PJBoy> which now that I think about it, simplifies to https://wandbox.org/permlink/1HeqJPapzmqydOOL
[18:34:28] <rpav> or not bug, so much as missing bridge
[18:35:15] <rpav> sure
[18:35:38] <PJBoy> I kinda agree
[18:35:57] <PJBoy> function template template parameters would be almost cool
[18:36:16] <rpav> it should encompass any "template value", e.g. template constexpr
[18:36:21] <PJBoy> you'd still need a template template mechanism that allows you to pass type parameter *or* non-type parameters
[18:36:24] <InPhase> rond_: Go it.  You just need a using indirection:  https://wandbox.org/permlink/zDJCFlz967gvZec5
[18:36:30] <InPhase> s/Go it/Got it/
[18:36:53] <rpav> PJBoy: template-template already works for types though of course, you would just use `auto` instead of `typename` after the >
[18:37:11] <PJBoy> yeah
[18:37:14] <PJBoy> but also like
[18:37:27] <PJBoy> maybe I wanna pass std::array as the template template argument of something
[18:37:37] <rpav> well you can already
[18:37:42] <PJBoy> and std::array does fit into a `template<typename...> typename`
[18:37:44] <rond_> InPhase Thanks. I like the macro solution more though
[18:37:44] <PJBoy> *doesn't
[18:38:01] <InPhase> rpav: That was supposed to be to you.  :)
[18:38:09] <PJBoy> so it'd be pretty ideal to have a `template<typename-or-auto...> typename` to accept things like std::array
[18:38:24] <InPhase> rpav: It works all the way back to C++11 that way.
[18:38:28] <rpav> InPhase: no :p heh
[18:38:46] <rpav> PJBoy: i thought hte typename... was just a placeholder and not really only-typenames
[18:38:49] <rond_> I like the fact that I sparked an interesting and live discussion :D
[18:38:56] <PJBoy> maybe I should actually check
[18:39:21] <PJBoy> { f<array>(); } template<template<typename...> typename T> void f() { BARK; }
[18:39:22] <geordi> error: no matching function for call to 'f<template<class _Tp, long unsigned int _Nm> struct array>()'
[18:39:27] <PJBoy> yeah not surprised
[18:39:49] <rpav> lame
[18:40:16] <PJBoy> "template<template<typename...> typename" will never get tiring to read
[18:41:21] <rpav> yeah it's pretty shit, and yeah this definitely needs fixed rather than the other, though
[18:41:25] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:42:10] <rpav> yeah .. if you could specify "either typename or auto" then you could also iterate them either way
[18:42:42] <zen_coder> LiaoTao: why does my elapsed time is not getting greater with every run? https://wandbox.org/permlink/soxJAQJVSVYcXSrL
[18:42:52] <rpav> since e.g. `<auto A,any...> struct proc { .. };` vs `<typename T, any...> struct proc { ... };`
[18:43:15] <rpav> `struct proc<A,As..>` that is
[18:43:41] <rpav> i suppose you can't do this with a 20 concept
[18:44:12] <PJBoy> nope
[18:44:19] <rpav> `<type_or_value...>` is a gap too far to bridge yet
[18:44:45] <rpav> ooh .. but you can't probably deduce template template parameters
[18:45:01] <PJBoy> any value can be turned into a type, so for non template template parameters, life's no so bad
[18:45:04] <rpav> or you can't deduce template template parameters' template parameters D;
[18:45:30] <rpav> but! we can turn types into values too
[18:46:06] <rpav> like just the instantiation of `<T> struct type {};` .. i do this for other things actually
[18:46:36] *** Joins: ShiftyLo_ (~shiftylog@208.78.41.80)
[18:46:36] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:46:44] <rpav> i'll have to screw with this later
[18:47:06] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[18:47:42] <rond_> I've got A.cpp where there are clauses like "#ifdef MY_FLAG". I want to use code from A.cpp with this flag ON from within B.cpp. is it possible?
[18:48:03] <PJBoy> zen_coder, why would it get greater?
[18:48:16] <rond_> or "the flag is either set everywhere or nowhere" in such a case?
[18:48:50] <rpav> rond_: err .. you need a dynamic value if you want to "turn it on 'from B.cpp'"
[18:49:00] <CarloWood> rond_: are you doing #include "A.cpp"  inside B.cpp?
[18:49:10] <rond_> yes
[18:49:22] <rpav> smells like an ODR violation
[18:49:29] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[18:49:30] <CarloWood> Then you can just put #define MY_FLAG  before the #include.
[18:49:41] <rond_> CarloWood I was thiknig about something like this
[18:50:00] <rond_> CarloWood Oh, actually, I'm doing "#include "A.hpp", not ".cpp"....
[18:50:00] <rpav> if A.cpp and B.cpp produce different binaries then that should work
[18:50:13] <rpav> then that won't work
[18:50:23] <rond_> okay
[18:50:26] <rond_> that's only for tests
[18:50:35] <rond_> so I'll pass approppriate flag for tests compilation
[18:50:39] <CarloWood> rond_: Do you ever want to use code from A.cpp without MY_FLAG defined?
[18:51:04] <PJBoy> zen_coder, I do notice you're racing data on that `elapsed` variable
[18:51:16] <PJBoy> and the count one
[18:51:24] <rond_> CarloWood usecase:   MY_FLAG is "ADDITIONAL_CHECKS"  that I wouldn't want to have in a library, but are useful for testing/debugging purpose
[18:51:40] <zen_coder> PJBoy: how should be there any data racing?
[18:51:42] *** Quits: ShiftyLo_ (~shiftylog@208.78.41.80) (Ping timeout: 260 seconds)
[18:52:03] <zen_coder> its a single threaded program
[18:52:23] <CarloWood> rond_: I use a global macro for debugging code; with that macro set I'm compiling in "debug mode".
[18:52:27] <PJBoy> uh
[18:52:45] <PJBoy> never mind me :(
[18:53:16] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[18:53:21] <rond_> CarloWood how do you set it up?
[18:53:27] <CarloWood> rond_: in those cases that I have very specific test in just one .cpp that I don't ALWAYS want when in debug mode - I usually just add a #define at the top of that .cpp and toggle it manually before recompiling.
[18:53:31] <PJBoy> zen_coder, anyways why would the elapsed increase?
[18:53:43] <PJBoy> are you expecting it to wait for that 1500ms timer on every iteration?
[18:53:58] <CarloWood> But, if you are using -say- cmake, then it isn't that hard to add a configure option to set or not set some macro.
[18:54:19] <CarloWood> You can even get it to only define that macro for just that source file if you want.
[18:54:28] <PJBoy> zen_coder, because it only does that if you set the timer in the function too
[18:54:36] <rond_> CarloWood I'd like to have a global macro debug flag for the whole project. I'm using CMake
[18:55:03] <rond_> CarloWood could you help mi with getting this right?
[18:55:13] <PJBoy> zen_coder, https://wandbox.org/permlink/iVA64LUvNyfZ1oVs
[18:55:27] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:55:32] <CarloWood> rond_: I am bad with simple solutions, I can only point you to the full-blown solution that I use :P.
[18:55:56] <rond_> that'd be a starting point
[18:56:09] *** Joins: teepee (~teepee@openscad/teepee)
[18:56:34] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:56:40] <CarloWood> rond_: https://stackoverflow.com/questions/48754619/what-are-cmake-build-type-debug-release-relwithdebinfo-and-minsizerel/59314670#59314670
[18:56:48] <zen_coder> PJBoy: I found the issue: https://wandbox.org/permlink/ibQec8bZJ7Zjn9fP
[18:56:58] <zen_coder> i forgot setting the begin variable
[18:57:19] <zen_coder> and the "timer.expires_after(std::chrono::milliseconds(1500));    " needs to set inside the function
[18:57:27] <CarloWood> That's my most upvoted SO answer ;).  It contains a link to https://github.com/CarloWood/cwm4/blob/master/cmake/CW_OPTIONS.cmake that defines a cmake function CW_OPTIONS
[18:57:34] <PJBoy> zen_coder, good good
[18:57:53] <rond_> CarloWood that'll take a while!
[18:59:12] <CarloWood> rond_: Usage example: https://github.com/CarloWood/ai-utils/blob/master/CMakeLists.txt#L29
[19:01:06] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:01:06] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:03:19] *** Quits: UmarJ (~username@user/umarj) (Quit: UmarJ)
[19:08:47] *** Quits: eck (~root@user/eck) (Quit: PIRCH98:WIN 95/98/WIN NT:1.0 (build 1.0.1.1190))
[19:09:14] *** Joins: eck (~root@user/eck)
[19:09:29] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:09:52] *** Joins: UmarJ (~username@user/umarj)
[19:14:57] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[19:14:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:18:00] <rond_> CarloWood I need to log off for now; I'll look it up and ask for some explainers if necessary. Thanks for help!
[19:18:20] <CarloWood> rond_: note that you still need to define CMAKE_CXX_FLAGS_BETATEST / CMAKE_CXX_FLAGS_RELWITHDEBUG etc as mentioned at the bottom on the SO answer, before including CW_OPTIONS.  What I do is include AICxxProject at the top of my projects.
[19:18:42] <CarloWood> which contains: https://github.com/CarloWood/cwm4/blob/master/cmake/AICxxProject#L20  and then include CW_OPTIONS on line 42.
[19:19:07] <CarloWood> ok
[19:20:02] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[19:23:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:28:27] <rpav> what would be incredibly useful is being able to like clang-format but preserve blame, e.g. tag every committed hunk with as close to the original user as possible
[19:29:18] <rpav> there might be cases where you can't perfectly preserve it but "a lot" is better than "none"
[19:29:18] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:29:32] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:30:42] <rpav> oh huh maybe blame can just detect original authors through whitespace/moves
[19:34:27] *** Joins: X-Scale` (~ARM@31.22.144.14)
[19:34:27] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:35:15] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 260 seconds)
[19:36:15] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[19:36:28] *** X-Scale` is now known as X-Scale
[19:43:35] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:43:55] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[19:48:23] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Ping timeout: 264 seconds)
[19:52:41] <CarloWood> rpav: The whole white-space / style doesn't matter of C++ (and most other languages) doesn't play well with revision tools like git.  In the ideal case git should store the code with a standard format (to be used by diffs), but always the same - and then have coders apply their own style every checkout.
[19:52:57] <CarloWood> Unfortunately that is pretty hard to implement because of comments :/
[19:54:46] *** Joins: andreasbuhr (~quassel@p549db02e.dip0.t-ipconnect.de)
[19:55:29] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[19:56:57] <lumbermb> simple solution: remove comments /s
[19:56:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:57:03] <jkaye> What about comments makes it difficult? We have that implemented for our codebase/repo and it's quite simple
[19:57:07] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:02:30] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[20:02:30] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:05:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[20:06:40] *** Quits: ShiftyLogic (~shiftylog@66.115.146.16) ()
[20:07:08] *** Joins: ShiftyLogic (~shiftylog@66.115.146.16)
[20:10:24] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:11:15] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:13:32] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 244 seconds)
[20:14:25] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:16:35] *** Quits: c4017w (~c4017@209.52.68.8) (Quit: Leaving)
[20:16:35] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:17:19] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[20:21:38] <cart_man> Is there a stoi or stol that will support a string to num like -> -2209154400000 ?
[20:24:20] <PJBoy> << stoll("-2209154400000");
[20:24:21] <geordi> -2209154400000
[20:25:17] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:25:24] <PJBoy> stol happens to work on geordi too
[20:25:32] <PJBoy> but stoll for 64-bit
[20:27:03] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[20:29:24] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:29:29] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:29:43] <cart_man> PJBoy:  I am not sure why buy my Linux versio of exactly the same function seems to work fine
[20:29:50] <zen_coder> I capture a std::chonor::milliseconds by reference from a function https://wandbox.org/permlink/Cq7aDsEUDzsAvHnF
[20:29:50] <cart_man> But I will try stoll
[20:29:59] <zen_coder> why do I not get a compile error doing this?
[20:30:20] <PJBoy> cart_man, function seems to work fine?
[20:30:20] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:30:26] <zen_coder> you see that "timer139844079141913" has strange values
[20:30:31] <PJBoy> or typo?
[20:30:58] <TinoDidriksen> It's your responsibility to ensure references don't outlive their referenent.
[20:31:01] <Alipha> cart_man: stol will fail on systems with 32-bit longs
[20:31:54] <cart_man> Alipha: Hmm this is windows 10 ?And 64 bit im sure
[20:32:00] <TinoDidriksen> zen_coder, https://en.cppreference.com/w/cpp/language/lambda#Dangling_references
[20:32:03] <cart_man> Alipha: Does that use a 32bit long?
[20:32:54] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:33:02] <PJBoy> long is 32 bit in windows
[20:33:23] <PJBoy> windows 64 bit just increases pointer size
[20:36:08] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:36:46] <Alipha> zen_coder: I recommend never using [&] because it's far too easy to accidentally have dangling references. If you explicitly specify each capture, then hopefully you will think about the lifetime of any variables you capture by reference
[20:38:22] *** Quits: onizu (uid373383@id-373383.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:39:21] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:39:30] <TinoDidriksen> When the lambda is kept for later, agreed. For lambdas that don't live longer than the creating function anyway, [&] is fine.
[20:41:49] <LordKalma> I've been bit by [&]
[20:44:43] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 258 seconds)
[20:44:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:45:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:284e:1b2b:d5a4:76ff) (Ping timeout: 245 seconds)
[20:46:45] *** Quits: andreasbuhr (~quassel@p549db02e.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:47:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:54c3:e244:32a2:7d7b)
[20:47:43] *** Joins: andreasbuhr (~quassel@p549db02e.dip0.t-ipconnect.de)
[20:52:24] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:53:24] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:55:31] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:54c3:e244:32a2:7d7b) (Ping timeout: 245 seconds)
[20:58:13] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[21:03:44] <rpav> CarloWood: typically you'd have a pre-commit hook that reformats whatever's being committed
[21:03:59] <rpav> and you could have a post-checkout hook that formats it to your style if you really wanted, but
[21:07:09] <LordKalma> or you just use a .clang-format and suck it up
[21:07:21] <rpav> well that's what you'd use
[21:07:37] <rpav> or whatever similar thing
[21:07:58] <rpav> i meant to look for something and/or saw some alterantive recently but i haven't gotten around to checking out anything specific
[21:17:17] *** Joins: great_taste (~great_tas@190.32.235.20)
[21:22:02] <CarloWood> I have this code:
[21:22:05] <CarloWood>   //FIXME: use std::contiguous_iterator<InputIt> once we use C++20.
[21:22:05] <CarloWood>   template <typename InputIt>
[21:22:05] <CarloWood>   Message& append(InputIt first, InputIt last)
[21:22:21] <CarloWood> I can't remember what that comment means :(.
[21:23:59] <rpav> template<std::contiguous_iterator InputIt> probably
[21:24:07] <rpav> as it appears to be a concept
[21:24:19] <CarloWood> Does it mean I should use: template<typename T> Message& append(std::contiguous_iterator<T> ... oh
[21:24:34] <rpav> cppreference is one click away ;)
[21:24:44] <CarloWood> I was looking at that... but
[21:25:10] <rpav> (note this is just a reasonable guess as i haven't really dealt with that specifically or concepts in general, but ..)
[21:25:41] <PJBoy> what rpav wrote
[21:25:46] <CarloWood> It compiles :)
[21:25:53] <CarloWood> /me ships it
[21:26:50] *** Quits: proller (~p@2a02:6b8:0:40c:118b:b037:e31d:344a) (Ping timeout: 260 seconds)
[21:26:50] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:28:59] <rpav> we should adopt compileshipping .. like dropshipping but for code; if there are no wavy red lines, we ship it, and compile on the way .. if it doesn't work or doesn't actually build we'll just fix it the next time
[21:29:03] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6ccf:bc6:7bec:d17c)
[21:29:17] <LordKalma> that's CI/CD with extra words?
[21:29:53] <rpav> only if the customer did the CI
[21:30:32] <rpav> i'm talking literally ship source that gets built on the customer end if it passes basic linting ;)
[21:30:37] <rpav> everytime you hit "Save"
[21:32:23] *** Joins: meator (~meator@user/meator)
[21:32:40] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:33:49] *** Joins: pulse (~pulse@user/pulse)
[21:35:16] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[21:35:58] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:37:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:37:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:12] *** ChanServ sets mode: +v npaperbot
[21:37:40] *** Joins: Leone (~Leo@216.154.21.17)
[21:38:34] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[21:38:47] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[21:48:14] *** Quits: mike18 (~geri@217-149-167-230.nat.highway.telekom.at) (Remote host closed the connection)
[21:53:28] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[21:55:58] <KombuchaKip> Is there an elegant C++ wrapper or library for something like this? https://man7.org/linux/man-pages/man7/inotify.7.html  I would like to monitor a file changed on disk.
[21:55:58] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:57:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:b96c:a192:af21:58d1) (Ping timeout: 264 seconds)
[21:58:35] <imMute> KombuchaKip: the actual reading of events is just reading from a FD, so something like ASIO could be used for that part.  it's not going to be as good as a modern-C++ implementation though.
[21:58:51] * KombuchaKip nods
[22:00:21] <KombuchaKip> imMute: I just found this: https://github.com/erikzenker/inotify-cpp
[22:01:10] <rpav> it's boggling there isn't a prominent cross-platform notification event thing for that stuff
[22:01:20] <imMute> KombuchaKip: for a synchronous API that doesn't seem too bad.
[22:01:41] <imMute> rpav: because different plantforms do it in wildly different ways?  even Linux has changed a couple times over the years.
[22:01:50] <rpav> https://github.com/emcrisostomo/fswatch
[22:01:57] <KombuchaKip> imMute: My only issue is it needs to be Debianized so my package can depend on it as a runtime dependency rather than having to maintain and ship it with it.
[22:02:02] <rpav> imMute: so? this is what libraries are _for_
[22:02:07] <rpav> e.g. see the above
[22:02:52] <rpav> wait is that just a utility .. f'n lame
[22:02:59] <rpav> this is why i use node.js for utility stuff ;P
[22:03:08] <KombuchaKip> rpav: Yeah, it's just a utility unfortunately. But it is debianized at least.
[22:03:25] <imMute> KombuchaKip: making a debian package for it shouldn't be too hard (once you get past the giant learning curve that is debian packaging)
[22:03:47] <imMute> KombuchaKip: and if Debian doesn't ship the library, having it debianized doesn't gain you much.
[22:03:48] <KombuchaKip> imMute: Yeah, and I can handle that no problem. But then I have to maintain it which I'd rather not too.
[22:03:56] * KombuchaKip nods
[22:04:08] <KombuchaKip> imMute: I can ship it via a PPA with my application, but it's more work.
[22:04:30] <imMute> why not compile it in to your application (either as a static lib or a shared lib) ?
[22:04:40] <imMute> then you have better control over which version you use.
[22:05:03] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:05:41] <artok> then it's not liked by distribution people, but who cares?
[22:06:10] <imMute> if you're not planning on getting it shipped with Debian, then that doesn't matter.
[22:09:30] *** Joins: luizfrds (~Luiz@152.250.243.147)
[22:12:10] *** Quits: pa (~pah@user/pah) (Ping timeout: 265 seconds)
[22:13:38] <lumbermb> Q: is cppreference.com correct in stating that users can add overloads to std::size()?
[22:14:25] *** Joins: pah (~pah@user/pah)
[22:14:38] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[22:15:16] <rpav> i've only once see cppreference be wrong about something
[22:15:50] <rpav> (and pretty sure it wasn't that, and that's probably the point of std::size)
[22:16:29] <rpav> now if only there were a std::byte_size() to provide total memory consumption estimates
[22:16:34] <lumbermb> if so, any particular reason why then the same is not stated of std::empty() (or std::data())
[22:16:44] <lumbermb> +?
[22:18:06] <lumbermb> rpav, wouldn't that have to also deal with alignment? Or do you want true size? because that one is simply template <typename C> auto byte_size(C&& c) { return c.size() * sizeof(decltype(C::value_type)); }
[22:18:09] <rpav> it appears to just assume C::empty()
[22:18:37] <lumbermb> (barring forwards, special casing for arrays, and all that)
[22:18:50] <rpav> lumbermb: it's not simple; e.g. std::byte_size(some_vec) ought to return the memory consumption of some_vec plus the byte_size() of all of its elements
[22:18:51] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:19:06] <lumbermb> Ah. So definitively not a generic version
[22:19:18] <rpav> similarly for other containers, which would include any internal structures / nodes / etc allocation
[22:19:38] <rpav> a generic default would be probably ok, but it also ought to be implemented for std containers
[22:19:55] <rpav> sizeof() already includes alignment concerns
[22:20:30] <lumbermb> personally I always separate data vs code, and for me the stuff like nodes, allocation tracking etc is "code", or at least it's not "data"
[22:20:50] <rpav> nodes are definitely data heh
[22:20:52] <lumbermb> so I'd expect a byte_size to return sizeof(Elems) * amount_of_elems, since that's the actual amount of data passed to the container that is stored
[22:21:38] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Remote host closed the connection)
[22:21:39] <lumbermb> anything else is stuff that the container had to come up with on its own, and even then it doesn't consider eg.: the allocator used keeping track of its own data, do you include that too, and how?
[22:22:10] <rpav> "any instance data", if an allocator is instanced, then that gets included; if not, not
[22:22:24] <rpav> thus not vtables, but vtable pointers are already part of sizeof()
[22:22:46] *** Joins: proller (~p@80.240.216.69)
[22:23:11] <lumbermb> what happens if an instance data includes mmapping a file into memory, do you want to add that to the track or not?
[22:23:24] <rpav> the real problem is that lacking reflection, one can't trivially write a recursive variation for structs ;/
[22:23:32] <rpav> lumbermb: is it instance data or not
[22:23:44] <rpav> like this is all very clear-cut, there is no "well maybe it's allocated or not"
[22:24:15] <rpav> if it got allocated .. stack or heap .. as part of the instance data, recursively .. it's included
[22:24:23] <lumbermb> I see
[22:24:36] <lumbermb> so you want a OS resource reporter facility, more or less
[22:25:00] <rpav> it doesn't need to touch the OS, especially since that's unlikely to be fine-grained enough to capture a single data structure
[22:25:39] <lumbermb> yeah, I was meaning more like the kind of task it needs to do ("there's a thing called RAM that exists, here's how we're using it")
[22:27:00] <lumbermb> personally I'm fine with lot less specific reports; when I want the size of bytes occupied by a container it's usually to dump its data somewhere, so there's no point in creating a 14 MB file to track nodes and stuff when the actual data of the container (the elements pointed to from begin() to end()) is 10 MB
[22:27:39] <lumbermb> but something that tells more about the container's internals and what it's doing would be pretty good for eg.: profilinh
[22:28:06] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:32:01] <PJBoy> I'm confused about that std::size thing now
[22:32:26] <PJBoy> standard says all these functions are customisation points http://eel.is/c++draft/iterator.range#1.sentence-2
[22:32:50] <PJBoy> and then over in the linked customisation point section it says "Other than in namespace std or in a namespace within namespace std, a program may provide an overload for any library function template designated as a customization point"
[22:33:18] <PJBoy> well I thought you were allowed to make whatever the fuck you want outside of namespace std, why's there a note?
[22:33:18] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:36:01] <lumbermb> note that it says "[other than in] a namespace *within* namespace std"
[22:36:09] <lumbermb> you can still do wtf you want outside of std
[22:36:59] <PJBoy> my point is that customisation point means absolutely nothing
[22:37:16] <PJBoy> I already can't add random overloads to namespace std
[22:37:44] <PJBoy> or any other kind of declaration other than the few exceptions
[22:37:46] <lumbermb> so the meaning of customization point has always been nothing? Always has been (shoots you with an auto noexcept IILE template niebloid)
[22:39:14] <lumbermb> I wonder if there's any proposal to add cdata(Seq), to supplement data(Seq) as per begin(Seq) -> cbegin(Seq)
[22:41:56] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:42:09] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:42:10] <KombuchaKip> imMute: Because it's not '95 anymore and we have apt. ;)
[22:42:26] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[22:42:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[22:42:59] <imMute> KombuchaKip: yeah, the last product I worked on used apt for software management too.  I just stuck all our libraries and applications in a single package though.  /shrug
[22:43:43] <KombuchaKip> imMute: Next time let dh_shlibdeps do its work. It will calculate all of them for you automatically by examining the binary image.
[22:43:45] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:44:20] <KombuchaKip> imMute: The Debian Policy Manual is like reading the King James, no doubt. It's huge. But it's worth spending a day on it and you will end up saving months later.
[22:44:41] <imMute> KombuchaKip: I'm aware of shlibdeps too, used that as well for 3rd party deps that Debian shipped.
[22:44:56] <imMute> you're preaching to the choir here ;)
[22:46:18] * KombuchaKip and imMute slap hands
[22:54:09] *** Quits: andreasbuhr (~quassel@p549db02e.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:00:55] *** Quits: pah (~pah@user/pah) (Ping timeout: 244 seconds)
[23:01:06] *** Joins: c4017w (~c4017@209.52.68.8)
[23:01:38] *** Joins: pah_ (~pah@host-95-251-40-214.retail.telecomitalia.it)
[23:05:45] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[23:08:33] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[23:10:13] <LordKalma> https://twitter.com/lefticus/status/1452671056825634817/photo/1
[23:10:19] <LordKalma> looking at that slide...
[23:11:32] <KombuchaKip> rpav & imMute: It looks like fswatch is dependent on libfswatch, which is this: https://emcrisostomo.github.io/fswatch/doc/1.8.0/libfswatch.html/
[23:12:09] <rpav> KombuchaKip: ah there we go, nice
[23:12:55] <lumbermb> A shame I couldn't make it in, I wanted to raise a proposal that '$' is added to the identifier character set so that in the future we can avoid co_await issues by differentiating 'await' (keyword) vs '$await' (variable) like PHP does
[23:12:55] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:13:42] <rpav> let's avoid doing anything similar to php
[23:13:49] * KombuchaKip nods
[23:14:05] <lumbermb> but PHP has one (1) good idea and that's it!
[23:14:15] <rpav> it really doesn't
[23:14:18] <LordKalma> nah fuck that
[23:14:33] <rpav> though ? and ! at the end of identifiers might be nice
[23:14:41] <rpav> actually i wonder if any unicode characters would work there ;)
[23:14:51] <LordKalma> what? like macros! ?
[23:14:52] <lumbermb> ...come to think of, why is '$' not used? I thought C++ loved America and pretended all other countries did not exist
[23:15:35] <LordKalma> mind you that Microsoft will block any proposal involving symbols they use in C++/CLI
[23:15:42] <lumbermb> I can understand why '`' is not used, no one wants to be like the French, but come on! '$' is in the US dollar!
[23:16:00] <lumbermb> > implying that aberration called C++/CLI matters
[23:16:08] <rpav> because it's terrible and this isn't shell script
[23:16:13] <LordKalma> doesn't matter what you think matters
[23:16:18] <LordKalma> Microsoft is big on the c++ standard
[23:16:32] <LordKalma> welcome to politics
[23:16:37] <lumbermb> doesn't look like it, looking at VC
[23:18:23] <KombuchaKip> rpav & imMute: Also found libinotifytools-dev https://sources.debian.org/src/inotify-tools/3.21.9.6-1/libinotifytools/src/example.c/
[23:18:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:19:14] <rpav> {} bool foo🤔(); // question mark doesn't work (foo?), but emoji does!
[23:19:15] <geordi>  
[23:19:31] <rpav> just need to figure out what emoji for bang/set
[23:19:54] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:20:18] <rpav> bool foo🔫(bool);
[23:20:47] <LordKalma> why setFoo when you can foo🔨?
[23:20:56] <lumbermb> ...whoa
[23:21:02] <rpav> this is an idiom that _works today_; we should promote it heavily to get the committee to include ? and ! post haste
[23:21:11] <rpav> LordKalma: sold
[23:21:36] <LordKalma> flushBuffer? buffer🚽() :D
[23:21:41] <InPhase> lol
[23:21:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:21:53] <pulse> Please tell me that doesn't compile.
[23:21:54] <rpav> check a value? void foo👁()
[23:22:10] <rpav> {} void buffer🚽();
[23:22:11] <geordi>  
[23:22:27] <pulse> There goes my last emoji-free safe space.
[23:22:28] <InPhase> C++ has gone to the toilet.  Confirmed.
[23:22:32] *** Quits: magla (~gelignite@55d4378c.access.ecotel.net) (Quit: Stay safe!)
[23:23:00] <LordKalma> pulse, you mean 😂😂😂😂😂😂😂😂?
[23:23:28] <rpav> what we really need is "unicode frame"
[23:23:35] <pulse> That looks like a guy with mustache in the shape of a batman logo on my client.
[23:23:52] <lumbermb> > yfw we'll have emojis in C++ before we have unicode math operators like x⊕y
[23:24:05] <rpav> i.e. A|B|C|D where | is "frame delay 30ms" animates through A,B,C,D
[23:24:09] <LordKalma> pfft, jusdt make c++ support latex operation
[23:24:13] <pulse> lumbermb, I'm still waiting for string::split.
[23:24:21] <LordKalma> x \times y
[23:24:22] <rpav> then you can type C++ functions but you have to enter the right sequence
[23:24:32] <pulse> Or even string::trim.
[23:24:34] <rpav> LordKalma: x *times* y!
[23:24:47] <lumbermb> ...you know, latex operations in C++ unironically doesn't sound like a bad idea
[23:24:50] <InPhase> { cout << "test"; _🚽(cout); } template<class T> void _🚽(T& t) { t.flush(); }
[23:24:51] <geordi> test
[23:25:23] <LordKalma> { cout << "test"; 🚽(cout); } template<class T> void 🚽(T& t) { t.flush(); } // doesn't compile like this? :(
[23:25:24] <geordi> test
[23:25:28] <LordKalma> ah it does :D
[23:25:50] <InPhase> Oh, I didn't expect you could start with that.
[23:25:58] <InPhase> Well, ok...
[23:26:21] <rpav> { Buffer b; b.🚽(); } struct Buffer { void 🚽() { cout << "flush!" << endl; } };
[23:26:21] <geordi> flush!
[23:26:23] <lumbermb> do you think God stays in heaven because Lisp is safer?
[23:26:36] <LordKalma> Now we only need some Tom Scott to be able to code like this: https://www.youtube.com/watch?v=lIFE7h3m40U
[23:26:36] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:31:25] <rpav> i definitely had no issue making lisp crash, and there was no shortage of issues
[23:32:01] <rpav> the main reason i use C++ today is the general dependability of the major compilers
[23:32:40] <rpav> if i write buggy code, that's fine .. i own it, i can fix it; if the _compiler_ is buggy and won't produce a working binary, _considerably_ fewer people can address that problem
[23:33:15] *** Quits: UmarJ (~username@user/umarj) (Quit: UmarJ)
[23:33:29] <rpav> but gcc/clang/vs get hammered by a zillion people so bugs tend to be known and fixed or at least worked around
[23:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[23:34:58] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[23:35:46] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:36:41] *** Joins: UmarJ (~username@user/umarj)
[23:39:59] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6ccf:bc6:7bec:d17c) (Ping timeout: 264 seconds)
[23:44:28] *** Joins: jkaye (~jkaye@2601:281:8300:7530:289e:28f2:97ea:9bd4)
[23:46:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6ccf:bc6:7bec:d17c)
[23:49:29] *** Quits: lumbermb (~lumbermb@190.13.136.234) (Ping timeout: 244 seconds)
[23:50:37] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:50:47] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
