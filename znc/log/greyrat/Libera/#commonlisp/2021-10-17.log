[00:00:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:02:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[00:06:07] <Michal> Does anybody have any recommendations for machine learning libraries in Common Lisp?
[00:08:39] *** Quits: cosimone (~user@93-34-133-215.ip49.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[00:09:15] *** Quits: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net) (Read error: Connection reset by peer)
[00:09:27] *** Quits: frgo (~frgo@p200300deef0cee0080d96904929b238c.dip0.t-ipconnect.de) ()
[00:10:47] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:41b6:17cb:e636:5883) (Quit: Konversation terminated!)
[00:10:57] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:7041:850a:7545:550e)
[00:11:18] <Qwnavery> Michal: take your pick https://common-lisp.net/libraries#header1-332
[00:11:45] <Qwnavery> clml is probably your best bet
[00:12:21] *** Joins: akoana (~ah@user/akoana)
[00:12:41] <Michal> Cool thanks man
[00:12:52] <Michal> What about Numcl?
[00:13:12] <Qwnavery> not sure
[00:13:24] <Michal> No problems
[00:13:37] <Michal> I'll check out clml
[00:14:03] <Qwnavery> It's a hard one because I'm unaware of any ML projects that have GPU accellerated support
[00:14:55] <Qwnavery> Michal: mgl might be better because of the documentation.
[00:16:04] <Michal> Ah. So I can't rely on Common Lisp's speed necessarily?
[00:16:18] <Qwnavery> Michal: ah actually, would you look at that, mgl has CUDA
[00:16:28] <Michal> I thought it was much faster than Python, but I heard Python had an optimised library via numphy
[00:16:51] <Qwnavery> use mgl and mat-mgl
[00:16:55] <Michal> What's CUDA? I'm very new to all of this. I just finished Andrew Ngs course and wanted to try stuff out
[00:17:44] <Qwnavery> Have you done any lisp programming before?
[00:18:43] <Bike> cuda is the nvidia api for gpu programming https://en.wikipedia.org/wiki/CUDA
[00:18:58] <Qwnavery> ^
[00:19:38] <Michal> Thanks man
[00:19:56] <Michal> I have done some basic stuff. This channel was helpful on that
[00:23:00] <Qwnavery> Michal: cool, to get started with CUDA you'll need the Proprietary Nvidia CUDA drivers https://developer.nvidia.com/cuda-downloads
[00:23:38] <Qwnavery> This also assumes you have the Proprietary Nvidia drivers installed an not noveau
[00:26:00] <Qwnavery> after that It's just following the guide in mlg-mat/README.md
[00:26:27] <Qwnavery> s/-mat/ /
[00:26:46] <Michal> Qwnavery: Thanks, I really appreciate it. I'm gonna check it out now!
[00:39:16] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[00:44:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:47:26] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[00:48:01] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[00:49:33] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[00:54:21] *** Parts: Michal (~user@5.30.23.247) (ERC (IRC client for Emacs 27.1))
[01:01:51] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[01:20:47] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:7041:850a:7545:550e) (Ping timeout: 264 seconds)
[01:22:26] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[01:24:16] *** Quits: dra (~dra@2a04:4540:641a:ef00:f09a:5895:b098:1e62) (Remote host closed the connection)
[01:37:42] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[01:42:02] *** Quits: Psybur (~Psybur@mobile-166-170-34-168.mycingular.net) (Remote host closed the connection)
[01:59:01] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:33c9:fbf4:957e:10d4)
[02:02:11] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[02:04:23] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Remote host closed the connection)
[02:19:35] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:33c9:fbf4:957e:10d4) (Ping timeout: 264 seconds)
[02:29:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[02:33:16] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[02:34:02] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 265 seconds)
[02:34:25] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[02:37:13] *** Joins: Bike (~Bike@71.69.170.70)
[02:37:13] *** ChanServ sets mode: +o Bike
[02:44:28] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:48:50] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[02:51:23] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[02:54:21] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[03:05:11] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[03:08:50] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[03:12:39] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[03:19:56] *** Quits: random-nick (~random-ni@87.116.165.220) (Quit: quit)
[03:20:55] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 265 seconds)
[03:37:21] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[03:39:08] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[03:49:35] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[03:50:07] *** Joins: rogersm (~rogersm@90.166.177.48)
[03:50:54] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[03:55:50] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:16:40] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[04:17:17] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:21:23] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[04:23:49] *** Quits: taiju (~taiju@m014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[04:24:25] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[04:25:24] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:34:08] *** Joins: Bike (~Bike@71.69.170.70)
[04:34:08] *** ChanServ sets mode: +o Bike
[04:40:33] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[04:46:04] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[04:46:22] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[04:49:30] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[04:57:22] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[04:58:02] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102A-static.midco.net)
[04:58:59] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[05:01:53] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[05:03:28] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[05:03:41] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:06:36] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[05:06:43] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[05:09:48] *** Parts: akoana (~ah@user/akoana) ()
[05:11:11] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Ping timeout: 264 seconds)
[05:12:16] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 252 seconds)
[05:14:08] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[05:21:07] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[05:30:43] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:4926:ef7c:f7af:592)
[05:37:24] *** Joins: Bike (~Bike@71.69.170.70)
[05:37:24] *** ChanServ sets mode: +o Bike
[05:44:29] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[05:45:45] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[05:48:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 265 seconds)
[05:50:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[06:04:43] <sukaeto> late to the conversations, but I (think I) understand what beach is saying re: binding
[06:04:57] <sukaeto> the spec overloads the term
[06:06:03] <sukaeto> they sometimes use it the way a compiler writer would - as in "this variable is bound to this value"
[06:06:28] <sukaeto> they also use it in the logical sense - as in "this variable is not free in this form.  It is bound."
[06:09:20] <sukaeto> in the second sense, you're saying the variable is bound by the *context*. (progv '(*x*) () (boundp '*x*)) <- *x* is bound in the sense that it won't be susceptible to variable capture, no matter where that progv is put
[06:09:28] <sukaeto> but not in the sense that it has a value associated with it
[06:14:50] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[06:18:09] *** Quits: gaqwas (~john@dynamic-077-004-112-217.77.4.pool.telefonica.de) (Ping timeout: 268 seconds)
[06:19:15] *** Joins: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de)
[06:19:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[06:32:04] <beach> Good morning everyone!
[06:32:11] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 264 seconds)
[06:32:37] <beach> sukaeto: Thank you.  Good to see that someone understood what I was trying to say.
[06:32:40] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[06:41:59] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 265 seconds)
[06:44:08] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[06:49:10] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[06:52:35] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:4926:ef7c:f7af:592) (Ping timeout: 264 seconds)
[06:53:11] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[06:54:16] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 245 seconds)
[06:54:35] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[07:18:33] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[07:20:19] *** Quits: robin (~robin@user/terpri) (Ping timeout: 265 seconds)
[07:24:55] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[07:25:14] *** Joins: robin (~robin@user/terpri)
[07:27:34] *** Quits: Patternmaster (~georg@li1192-118.members.linode.com) (Remote host closed the connection)
[07:29:11] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 264 seconds)
[07:31:16] *** Joins: johnjay (~pi@192.142.100.50)
[07:31:25] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:33:42] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 265 seconds)
[07:34:16] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[07:36:21] *** Quits: robin (~robin@user/terpri) (Ping timeout: 245 seconds)
[07:36:33] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[07:42:36] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 245 seconds)
[07:45:01] *** Joins: semz (~none@user/semz)
[07:52:20] *** Joins: Patternmaster (~georg@li1192-118.members.linode.com)
[07:56:32] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[08:02:47] *** Joins: robin (~robin@user/terpri)
[08:10:05] *** Quits: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df) (Quit: sleep)
[08:16:21] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[08:17:11] *** Quits: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354) (Ping timeout: 264 seconds)
[08:22:51] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:27:54] <lisp123> Are :before, :after :around method qualifiers used a lot in practice?
[08:28:24] <hayley> Yes.
[08:28:29] <hayley> You almost always use :AFTER methods on INITIALIZE-INSTANCE, for example.
[08:28:59] <lisp123> I see, thanks
[08:30:05] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[08:30:56] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[08:35:52] <beach> lisp123: You can figure out the answer by checking for those in existing code.  So if I take SICL for instance, we seem to have 25 :before, 31 :after, and 53 :around.
[08:36:25] <beach> That's in 130kLOC or so.
[08:37:05] <beach> So that's what?  One per 1kLOC or so?
[08:37:41] <lisp123> Interesting statistics, thanks. 1 per 1k sounds reasonably frequent
[08:38:01] <beach> What is the reason for your question?
[08:40:08] <beach> Cluffer has less than 3kLOC and there are 12 :before and 7 :after.  No :around.
[08:40:11] <lisp123> I was wondering how useful they were since you could also bundle some of that code into the primary methods. In Sonja Keene's book, they note it as useful for code reuse (this was for :before and :after at least), where more specific classes can do some additional side effects on top of the primary method, either before or after
[08:40:20] <beach> So that's 1 per 100LOC.
[08:42:14] <beach> lisp123: When I taught a small class at the university of Auckland, I showed the students how, if you don't have auxiliary methods, then you might sometimes have to change the interface to obtain certain optimizations, so that's a no-no for stable APIs.  They were totally convinced.
[08:42:36] <beach> lisp123: So you can obtain the same effect with only primary methods, but you can't then also have your software modular.
[08:43:11] <beach> You probably haven't seen that issue, since I bet your code is fairly small, and you write mainly for yourself.
[08:43:47] <lisp123> Yes, I don't use much state at all or have large code at all, hence wanted to ask what was used in bigger projects.
[08:44:29] <lisp123> So basically, the primary method gives the primary interface which clients use, and then you add some stuff before/after/around it?
[08:44:35] <beach> Then you just have to take my word for it, that auxiliary methods are a must for larger projects, and especially for stable libraries.
[08:44:59] <lisp123> Thanks!
[08:45:25] <beach> Yes, one common thing to do is to have the library define an :around method that can intercept the client call, and do special things then.
[08:45:36] <beach> Like return a cached value for instance
[08:46:50] <lisp123> Ah very cool
[08:47:43] <beach> Common Lisp has a lot of that kind of stuff, i.e., features that are almost never used, but when you need them, you really can't do without them.  Since other languages often don't have these features, they have to sacrifice modularity, maintainability, performance, etc.
[08:48:49] <beach> For instance: custom metaclasses, custom method combinations, custom function types, reader macros, macros, etc., etc.
[08:49:07] <lisp123> Yes, its very well thought through. I basically assume anything in CL is there for a very good reason
[08:49:40] <beach> So the incorrect conclusion made by people who don't like Common Lisp is that, since these features are rarely used, they aren't really useful.  Very wrong!
[08:50:09] <lisp123> Yes, and also sometimes, if they don't understand it, it becomes bad automatically
[08:50:20] <beach> Indeed.
[08:58:26] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 245 seconds)
[09:00:14] <jeosol> beach: I do agree that for large projects, those auxilliary methods are a must. I application have non-trivial hierarchy and those :before, :after methods do help to implements things clearly.
[09:00:37] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[09:01:05] <jeosol> beach: these CLOS features are something I rely on
[09:01:44] <jeosol> I am you mention maintainability and modularity of the codebase, these are important for nontrival programs, otherwise, you get a mess that no one wants to deal with or maintain
[09:07:09] <hayley> I once used a lot of :after methods for a "reactive" programming style, but then hurt my head on concurrency. But I suppose that's orthogonal to the utility of auxiliary methods (though having behaviour in one place makes modelling marginally easier).
[09:16:44] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[09:29:40] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 252 seconds)
[09:31:47] <beach> jeosol: Exactly!
[09:32:32] <beach> Also, Common Lisp is designed to make these features easy to implement.  There is no need to have a committee that votes on new syntax.  It can all be done in the form of library code.
[09:32:59] <beach> Once the FUNCALLABLE-STANDARD-OBJECT was invented, the rest is straightforward.
[09:33:16] <beach> Not "easy" perhaps, but straightforward.
[09:33:55] <jeosol> beach: yes. I have coded in C++, not a huge program, but it was a pain. The CL project I have been working for a while, is way larger, but the logical and physical design is much easier to manager.
[09:34:14] <beach> I can very well see that.
[09:34:27] <jeosol> it's hard to make other see, the fact you don't have to fight the language and it does help you all the way
[09:35:01] <jeosol> not worrying about excessive compile/link-time issues with C++ header files otherwise, your build takes forever
[09:35:04] <beach> Right, people are so used to "fighting the language" and they think it's normal.
[09:35:29] <jeosol> beach: you are so right - this is something I have tried to explain to others why I use CL
[09:36:08] <jeosol> I am like the language is a joy to work in. I am only concerned about the concepts I am trying to implement, i have uniform syntax and don't have to worry about a specific, different language to use a given point
[09:36:12] <beach> My experience is that it doesn't work to explain.  So I quit doing that.
[09:36:40] <jeosol> beach: very true, unfortunately, I still have to do that in the next few months while I discuss with others
[09:36:49] <jeosol> regarding the project.
[09:37:12] <beach> I wish you good luck.  Perhaps you will find a better way than I have been able to come up with.
[09:37:35] <jeosol> reading large-scale C++ software design, the author mention a project that was taking the order of weeks to build - large software indeed, but with our incremental development, we get our changes integrated right there
[09:38:11] <jeosol> beach: I don't think so beach, I have tried the last few weeks and evening compiling some tidbits here and there to show how things are easier in CL
[09:38:21] <beach> While not discussing large-scale, the paper by Hudak and Jones is great.
[09:38:33] <lisp123> jeosol: Although "uniform syntax" sometimes can be a misnomer. Its true the basic syntax of lisp languages are relatively simple, But then, with special forms or certain macros, complexity creeps in
[09:39:05] <beach> lisp123: But it is nothing like the complexity of the surface syntax of most languages.
[09:39:13] <jeosol> I haven't even talked about macros with them because I use that to generate a lot of functions at compile-time so I don't have to code them by hand - a lot of my functions are generated this way (still have to estimate the amout, not sure how to do that)
[09:39:13] <lisp123> beach: Yes agree
[09:40:35] <jeosol> lisp123: good point, I was simplifying things by "uniform syntax". What I mean is that there are way fewer language syntax things I have to worry about - but it kind of goes to the fighting with the language do what you want, or just focus on the concepts you want to implement
[09:40:41] <jeosol> for me, it's been mostly the latter
[09:41:00] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Quit: leaving)
[09:41:05] <jeosol> beach: I should really look at the paper by Hudak and Jones
[09:41:07] <lisp123> Honestly, one of the issues for me initially was 'how can lisp be so simple and yet do what I want it to' -> especially with english-named variables and functions, it feels like reading pseudocode at times, but it actually works and works well
[09:41:34] <jeosol> lisp123: indeed, this simplicity is what got me to using lisp.
[09:42:17] <lisp123> jeosol: Yep agree. Just wanted to point it out since its worth mentioning to non-lispers that there is some syntax down the track that requires memorisation (but its more to do with having forms in certain places vs. punctuation etc)
[09:42:55] <jeosol> I work with optimization, and at the time (grad school) working with matlab (memory and speed issues) and C++ (moved because of speed), I saw a CL implementat of genetic algorithm - wow, it was so succint, the guy had my whole C++  header files and CPP files in a few pages of his theses
[09:43:18] <jeosol> I was sold, because of time, I used C++ to finish, but started looking into to CL then.
[09:43:58] <lisp123> jeosol: I still feel a bit uncomfortable reading what appears to be very simple code and it works. It feels like its _meant_ to be more complicated. Hopefully that misperception finally goes to rest as I use Lisp more and more.
[09:44:15] <lisp123> Now my biggest problem is I have no desire to program in other languages :-/
[09:44:45] <hayley> Is it a problem?
[09:45:17] <jeosol> beach: the finding better way is what I am trying to do - I don't have same background/expertise with CL but gotten more CL related books to read over the years.
[09:45:37] <jeosol> hayley: The problem is people don't like to use it or complain, it's an old language etc
[09:45:44] <beach> lisp123: Paul Wilson describes Lisp as having a 2-level syntax.  One is the syntax defined by sequences of characters, and the other is the syntax at the S-expression level.
[09:46:05] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[09:46:12] <jeosol> In a previous shop mostly using python, I got complaints for using CL ( for personal tasks) and for even using emacs editor when most people used vscode
[09:46:31] <jeosol> beach: good point. Thanks for that
[09:46:32] <lisp123> hayley: Work wise it can be off putting to others who don't use Lisp, so I need to bite my lip sometimes. Also I'm demotivated on some of their projects, if they are using python or something else, I don't feel the desire to improve their code (why not just do it in Lisp)
[09:46:54] <jeosol> lisp123: haha
[09:46:57] <lisp123> beach: That's a good way to put it. Hadn't heard of it before
[09:47:44] *** Joins: kakuhen_ (~kakuhen@user/kakuhen)
[09:47:57] <jeosol> well it was an ML/AI shop, so the use of python is sort of needed. But some of the older symbolic logic AI code, were CL (using SBCL and lispworks) but no one except a programmer from the 80s and myself knew lisp.
[09:48:20] *** Joins: kakuhen__ (~kakuhen@user/kakuhen)
[09:50:00] <jeosol> some good points on the thread regarding CL vs other languages. I know PG has this whole CL superiority thing, and once told me (when I was starting) to use clojure instead, that it's a modern lisp, but after I mentioned I need/was using CLOS, he then conceded that I should stick with CL
[09:50:17] <lisp123> jeosol: Yeah, my biggest gripe is when people say why are using Emacs over VSCode. Of all editors, VSCode might be the worst. I rather use notepad at this point (at least I assume there is no telemetry there)
[09:51:02] <jeosol> like beach, having language fights is not something I am interested in, but I have often needed to explain why CL was chosen for a project ...
[09:51:07] <jeosol> lisp123: haha, notepad
[09:51:23] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Ping timeout: 264 seconds)
[09:51:41] <lisp123> There was someone here a while back programming CL in notepad, it was inspirational
[09:52:11] <jeosol> my OS and tools are: Linux (OS), Emacs + Slime + Paredit. I know there is sly and other emacs variant that my improve my workflow, but I just stuck with these
[09:52:35] *** Quits: kakuhen_ (~kakuhen@user/kakuhen) (Ping timeout: 264 seconds)
[09:55:13] *** Joins: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49)
[09:56:02] <jeosol> beach: is the Paul Winston comment from his and Horn's book or paper . It is ok, if you don't remember
[09:57:48] <jeosol> beach: is this the Hudak and Jones paper you referred to above: https://www.cs.yale.edu/publications/techreports/tr1049.pdf
[09:59:37] <hayley> "For those who object to this use of functional languages, we suggest reading the rest of this paper as if it were about a video game."
[10:00:06] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:00:28] <beach> Wilson, not Winston.
[10:00:40] *** kakuhen__ is now known as kakuhen
[10:00:57] <beach> ... of "Allocator survey" fame.
[10:01:20] <beach> Yes, that's the paper.
[10:02:21] <beach> I spent a year with Paul Wilson and his research group at the University of Texas at Austin.  I am not sure whether he published anything about the 2-level syntax.  He may just have told me.
[10:02:40] <jeosol> beach: Apologies, I mixed up the names and went to pick up the Winston book from the shell
[10:02:44] <jeosol> *shelf
[10:04:20] <jeosol> beach: I will be interested in a collection of relevant references like the Hudak ones, references that talk about building programs, nontrivial ones in CL. I know this task is not specific, but I am just trying to study these more
[10:04:46] <jeosol> if only to help me put a name to the "syntax simplicity" issue as discussed above
[10:05:13] <jeosol> beach: You were at UT, during the summer months?
[10:05:23] <beach> An entire year.
[10:06:56] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 268 seconds)
[10:08:55] <jeosol> beach: interesting. You witnesed the Texas summer heat
[10:09:40] <jeosol> beach: skimmed the Hudak and Jones paper - very interesting. Thanks for suggesting this
[10:16:02] <beach> Sure.
[10:16:17] <beach> Austin buses are air conditioned, and so are all the buildings.
[10:16:28] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[10:30:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:31:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:33:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:33:28] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:38:52] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[10:38:55] *** Joins: pve (~pve@37-136-6-84.rev.dnainternet.fi)
[10:43:12] *** Joins: selwyn_ (~selwyn@user/selwyn)
[10:51:34] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:53:13] *** Quits: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se) (Ping timeout: 252 seconds)
[10:55:40] *** Joins: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se)
[10:56:09] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[10:59:37] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[11:00:25] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 252 seconds)
[11:02:22] *** Quits: selwyn_ (~selwyn@user/selwyn) (Quit: Leaving)
[11:05:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:08:20] *** Joins: ski (~ski@remote12.chalmers.se)
[11:12:25] <beach> UT Austin is also where J Moore (ACL2) and Gordon Novak (AKCL) work.  And it was where Dijkstra had a chair position while I was there.
[11:13:06] <beach> I can't think of a better and Lispier way to spend a sabbatical year.
[11:14:10] <beach> Paul Wilson and Donovan Kolbly implemented a Dylan variant called RScheme.
[11:17:15] <lisp123> beach: Do you talk to J Moore sometimes?
[11:17:25] <lisp123> Seems like ACL is one of the biggest lisp projects out there
[11:21:26] *** Joins: rain3 (~rain3___@86.127.200.187)
[11:27:08] <beach> Not anymore no.
[11:27:09] *** Quits: rain3 (~rain3___@86.127.200.187) (Ping timeout: 265 seconds)
[11:35:57] <beach> But I remember that his office was as large as a small Paris apartment.
[11:36:12] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:37:07] <lisp123> Wow, thats nice
[11:39:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:41] <beach> lisp123: So the Common Lisp code you write is for your dayjob?
[11:41:31] <lisp123> beach: No, I use org mode at work for knowledge management (quite useful as a database). I experimented with Common Lisp at work, but the problem is if I leave, what the next person will do
[11:42:07] <lisp123> The other staff use python (we are not a tech company, in investment management, but cannot afford full time developers, so do a bit here and there).
[11:42:21] <beach> Learn Common Lisp?  If they are serious developers they should have learned it already.
[11:42:34] <beach> I see.
[11:43:10] <lisp123> I just interviewed for a role at my old firm, which is much larger and has a dedicated tech team. It will be partly project management of their work...however again, Python and Java are the languages of choice there
[11:43:53] <beach> Choices are made by people, often ill-informed people.  So choices can change.
[11:45:20] <lisp123> I will definitely try to do that! I think we will see more usage of CL going forward, many other languages already seem to be using similar concepts, so its just a question of jumping across
[11:45:36] <beach> To me, the main thing that the Hudak and Jones paper shows, is that the cost of teaching the developers a new language is ridiculously small compared to the waste of time that an inappropriate language creates.
[11:46:01] *** Quits: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se) (Ping timeout: 252 seconds)
[11:46:08] <lisp123> That seems to make sense
[11:46:25] <beach> Well "shows" is a bit strong, so "suggests" may be more appropriate.
[11:46:29] <lisp123> However, some people are hard in their ways. That's the bigger issue sometimes
[11:46:47] <beach> Such people have no place in software development.
[11:47:07] <lisp123> I agree. And that's why there's a lot of suboptimal software flying around
[11:47:25] <beach> Carol Dweck calls it "closed mindset" and it is very dangerous for software development.
[11:47:56] <lisp123> Agree 100%
[11:48:30] <lisp123> Bad decisions compounded onto other bad decisions to justify them, can take away millions very quickly
[11:50:12] <lisp123> I'd be very curious to have insight into how big tech firms work (FAANGS). From all accounts, there are a lot of closed mindsets there, and a lot of wasteful development
[11:50:21] <pve> Is the "Relational Lisp" mentioned in the Hudak and Jones paper based on CL? Some searching suggests it might be the case..
[11:50:53] <lisp123> From what I have read online, they have become quite political. Which is interesting, because they also have some cutting edge technologies & software (partly now due to the massive R&D budget they have)
[11:51:21] <Nilby> I'm afraid I've developed a closed mindset about non-Lisp software.
[11:51:40] <beach> pve: I don't know.  When I discuss this paper with students (for instance) I don't mention particular languages.  I concentrate on what I think is the main lesson of the paper, namely that there can be a factor 20 difference in productivity depending on the language, and that's huge so should be taken into account in projects.
[11:54:04] <pve> beach: hmm, ok I see.. that is pretty significant
[11:54:42] <beach> pve: The way I put it is that a 5-year project could be completed in 3 months instead.
[11:57:40] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:57:41] <pve> beach: That's an interesting way to put it.
[11:58:55] <beach> So you can spend 4 years and 6 months training the staff on the new language.  Of course, the paper shows that productivity can be obtained after two weeks.
[11:59:23] <beach> Er, 4 and 9
[12:00:33] <Nilby> But given all that time saved, who can resist doing something more ambitious? I can't.
[12:01:30] <pve> beach: 3 months vs. 5 years is so incredible that, when first hearing it, people's first thought (and response) must be something along the lines of "There's no way that's possible".
[12:01:48] <beach> Nilby: So you are saying we should try to be as little productive as possible to limit our level of ambition?
[12:02:27] <mfiano> I can confirm the 2 week figure
[12:03:13] <beach> pve: Right, so in the next phrase (to my students), I say that even if they don't believe a factor 20, even a factor 2 or a factor 1.2 is big enough to justify taking it into account.
[12:03:31] <mfiano> I came from several years of Python experience, which is known to boast "rapid application development". I read a Lisp book for a week, got dirty with some code for another week, and at that point I was already faster and writing better code.
[12:03:42] <beach> But that right now, decisions about languages are based on what existing programmers know.
[12:04:08] <beach> mfiano: There you go.  That is consistent with the paper.
[12:04:27] <Nilby> beach: I don't know what to do about it, but nearly every time I do something in CL vs some blub-lang, I do it with 10x more features or more ambitious design.
[12:06:08] <mfiano> I used to do the same thing.
[12:06:30] <mfiano> What helped was to take a week, month, or even longer to write a complete design document before a line of code is even written.
[12:07:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:08:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:08:04] <Nilby> Except when I used to do boring stuff for work, then I would just put it off until the last hour before it's due, or do it in the first few hours then goof off for a week. Doing it in CL vs C++ allowed me to do that for years.
[12:09:10] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[12:10:05] <Nilby> beach: But, I know non-lazy people, e.g. like you and Shinmera actually use that time to be more productive.
[12:10:51] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[12:12:44] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[12:12:44] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Remote host closed the connection)
[12:14:52] *** Joins: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de)
[12:15:05] <pve> My first task related to CL was porting an NLP application (between 50-100 kloc) from Allegro CL to CMUCL during a summer job. I remember it took me about a month to get comfortable with slime (already knew emacs) and complete the port, even though I didn't really know what I was doing at the time. It was mostly mechanical work.
[12:15:38] <hayley> There have been similar results with TLA+ (which also relates to having a good design process). "Engineers from entry level to principal have been able to learn TLA+ from scratch and get useful results in two to three weeks, in some cases in their personal time on weekends and evenings, without further help or training."
[12:24:44] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[12:24:57] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[12:27:33] <pve> I should also mention that I was quite open to the idea of learning CL. Later, I saw other people join (to work on components written in Java) who were effectively unable to learn CL because they weren't open to the idea (i.e. they resisted).
[12:29:27] <pve> I used to joke that they had been corrupted by Java :)
[12:29:48] <pjb> lisp123: In general, I try to leave :before :after and :around methods to client code, but they can be very useful to implement some mechanisms.  For example using an :around method to implement a mutex that will be automatically applied to the primary methods even if overridene.
[12:30:28] <pve> (to their faces, not behind their backs)
[12:38:15] <beach> pve: The "closed mindset" is a very powerful psychological force, so incredibly hard to combat.
[12:40:55] <Nilby> Sometimes I've cured people of the "closed midset", but some people are incurable.
[12:41:35] <beach> Yes, it is possible to change, but very hard.
[12:42:31] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:43:32] <pve> beach: Yeah, no kidding! I (not an expert) spent a great deal of time showing CL, slime and interactive development to people there, but it just didn't stick. One guy did get it though, so there's that.
[12:44:02] <beach> Right, one has to settle for a modest success rate.
[12:44:40] <beach> I estimate that, during our 15 years of using Common Lisp in our teaching , on the average around 5 our of 125 annual students understood the message.
[12:45:24] <beach> But hey, that's 75 students already!
[12:47:15] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:47:41] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:47:56] <Shinmera> Nilby: I  object to being called a non-lazy person
[12:48:56] <beach> Right.  Laziness is a virtue in software development.
[12:48:58] <Nilby> Shinmera: Sorry. I know laziness is efficiency.
[12:49:24] <Nilby> Shinmera: How about non-un-productive ?
[12:49:50] <Shinmera> I'd say I'm a person that somehow ends up making things sometimes :)
[12:50:21] <Shinmera> Not sure if there's a snappy moniker for that though.
[12:51:12] <hayley> Conscious laziness?
[12:51:56] <Shinmera> Anyway, back to Lisp
[12:53:07] <Nilby> ^ that's probably why
[12:53:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[12:54:42] <hayley> Similar is that Max Stirner once wrote that everyone is an egoist, but few are "conscious" of it and make use of it. So I'd say "conscious laziness".
[12:55:26] *** Joins: kdlv (~kdlv@c83-251-237-81.bredband.tele2.se)
[12:59:11] <pjb> Sometimes the message is understood later.  So the success count may be higher than you think (eventually).
[13:00:12] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:00:38] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:01:48] <madnificent> Gnuxie: Adding that to the list things to check out.  Thanks :D
[13:04:11] *** Quits: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de) (Read error: Connection reset by peer)
[13:04:28] *** Joins: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de)
[13:07:23] <madnificent> Shinmera: I'll check out Luckless.  I'm looking for/at benchmarks and info now but may not find the benchmarks you mention.  If you have a direct link, that'd be rad.  I'm not sure what I'll learn exactly but I hope it will give me a rough idea on what to test for.
[13:08:50] <Shinmera> I do not have links, sorry
[13:09:01] <mfiano> madnificent: https://github.com/telekons/42nd-at-threadmill
[13:17:11] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:17:35] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:20:07] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[13:23:30] <madnificent> thank you!
[13:26:19] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[13:26:54] <madnificent> So, 42nd-at-threadmill would be an improved version of what is in luckless?
[13:27:38] <mfiano> I mean, they're both hash tables if that's what you're asking
[13:28:44] <madnificent> The readme states that the implementation is based off NonBlockingHashMap and its Common Lisp port in Luckless.  But perhaps that's more "we read it".
[13:29:16] <mfiano> It's based off more than that
[13:30:51] <madnificent> understood
[13:31:10] <mfiano> "Improved" I suppose would depend on usage patterns, machine, and operating environment.
[13:31:15] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[13:32:33] <mfiano> hayley says it may have a bug and not recommended for use yet, but I still don't see that mentioned in the readme
[13:34:29] <madnificent> I should care about safety first, so by the time we're at the element of speed, this may be better known.
[13:47:47] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[13:48:14] *** Joins: hendursa1 (~weechat@user/hendursaga)
[13:50:38] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[13:50:47] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[13:50:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:52:36] *** Joins: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de)
[13:53:14] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[14:04:06] *** Quits: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:04:35] *** Joins: frgo (~frgo@p200300deef0cee00a5f2a706fd1ca151.dip0.t-ipconnect.de)
[14:05:48] *** Quits: voltron (~voltrin_@ip5f599415.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:06:09] *** Joins: igemnace (~ian@user/igemnace)
[14:22:01] *** Joins: random-nick (~random-ni@87.116.183.117)
[14:41:18] *** Joins: rusua (uid124537@id-124537.uxbridge.irccloud.com)
[14:41:55] *** Quits: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de) (Remote host closed the connection)
[14:42:34] *** Joins: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de)
[14:47:48] *** Joins: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my)
[15:07:08] *** Joins: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it)
[15:12:17] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Ping timeout: 256 seconds)
[15:19:51] <madnificent> mfiano: I should have asked this way earlier.  mu-cl-resources has a lot of multithreading going on in suboptimal ways too.  These hash-tables might make a difference for the caches it uses.
[15:20:07] * madnificent should spend time cleaning up multithreading in there too
[15:37:56] *** Joins: selwyn_ (~selwyn@user/selwyn)
[15:38:09] *** Quits: selwyn_ (~selwyn@user/selwyn) (Remote host closed the connection)
[15:45:17] *** Quits: winning-luser (~winning-l@2601:8c1:181:1340::e50f) (Quit: zzz)
[15:54:21] *** Quits: theBlackDragon (~dragon@fvwm/admin) (Remote host closed the connection)
[15:59:17] *** Joins: tfb (~tfb@88.98.95.237)
[16:00:58] <hayley> madnificent: Another difference is that resizing in Threadmill is not lock free, whereas it is in Luckless.
[16:02:24] <hayley> I basically made up the resize logic on the spot, so I'm not so sure it's correct...but it should be, based on what I watched about NonBlockingHashMap.
[16:03:10] <hayley> I think there might be a bug because decentralise2 sometimes drops like 1 in 10 million messages when using Threadmill, but not any other table. I'll test again tomorrow.
[16:03:25] *** Joins: Bike (~Bike@71.69.170.70)
[16:03:25] *** ChanServ sets mode: +o Bike
[16:06:24] *** Joins: Guest-liao (~Guest-lia@101.86.103.113)
[16:10:30] <hayley> Really, I do need to get my shit together w.r.t Telekons projects. There is also the concurrent-hash-tables portability library (which is portable in that it handles Luckless, Threadmill, and a table with sharded locks), but I haven't thought of a way to specify which table implementation to use at system load time.
[16:31:41] <madnificent> hayley: for mu-cl-resources the drops wouldn't be the worst.  this is about caching so if a cache isn't stored it'll be calculated again at another time.  not clearing would be more challenging.
[16:31:58] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:32:09] <hayley> Sure. It's a bug to me though.
[16:32:21] <madnificent> and a hard to debug one at that
[16:32:42] <hayley> And FWIW I don't exactly know that "it drops values randomly"; I only know that decentralise2 drops messages, which might or might not have to do with the table dropping values.
[16:33:08] <madnificent> i kind-of feel sorry you'll have to hunt for that
[16:33:11] <hayley> It might not even have to do with the table at all - just going faster with concurrent programs might lead to more opportunities to expose a bug.
[16:34:05] <hayley> Oh, well, such is life. And I intend to simplify the code around the table, so we'll get to find out where the bug lays.
[16:35:05] <hayley> But, as Knuth said, "I have only proven [some of my code] correct, not tested it."
[16:35:46] <madnificent> also, i failed to find the time to further check out your work, but we're running a company around distributed web tech.  mostly knowledge sharing with linked data, which is what ActivityPub is built on.  we also co-run ipfs-search.  if these 90's buzzwords or hipster-tech ring a bell and relate to your work do ping.
[16:37:07] *** Joins: theBlackDragon (~dragon@fvwm/admin)
[16:37:33] <hayley> I guess so - Netfarm is what you'd get if you gave IPFS schemas and some methods, and I've written a few (not very nice) things about the Fediverse.
[16:47:18] <hayley> But it's not going anywhere, so don't rush. I don't work on it these days.
[16:47:38] <madnificent> so we do a lot in terms of letting people define knowledge in a distributed fashion and sharing that.  for instance, adding data to legislation.  we have no clue what they'll add, but we can make sure they'll understand each other after the fact.  that seems an important piece for distributed knowledge.  would love to read about your negs as it helps me see faster where you want to go to :D
[16:49:13] <hayley> Okay, I wrote something about protocol translation (rather than schema translation, which looked hyped at one time), but it's not very good.
[16:49:39] <mfiano> hayley: If it's the table it shouldn't be difficult to produce an isolated test for that
[16:50:14] <hayley> mfiano: Yeah, probably. Wouldn't hurt to port the Luckless tests to my portability library.
[16:50:36] <mfiano> it might also be worthwhile to add options to disable avx2 etc
[16:50:49] <mfiano> basically, get the minimal code that exhibits the error
[16:51:07] <hayley> http://lettingthedaysgoby.altervista.org/translate-what-data/ and http://lettingthedaysgoby.altervista.org/translate-what-data/the-drive-to-2021.html
[16:51:55] <hayley> Right. I only use one AVX2 instruction (VPBROADCASTB) with 128 bit code, and I hope that's not buggy :)
[16:53:05] <mfiano> Also i would read conditionalize that library. Having something SBCL specific isn't much use, as its a moving target as it is lately
[16:53:39] * mfiano notices truly-the etc expected to exist at read time
[16:53:46] <hayley> Yes, I am planning to do that somehow.
[16:54:36] <hayley> It's SBCL-specific for the foreseeable future (no SIMD anywhere else?) so I would advise using Luckless instead.
[16:58:24] <hayley> The only thing going for Threadmill, now that Luckless is catching up in performance, is that I find Threadmill to work better with a lot of "churn" in adding and removing new mappings.
[17:00:06] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 245 seconds)
[17:17:05] <hayley> The SIMD probing lets you skip over a lot of dead entries (which I can't reuse sadly - tried it, proof doesn't hold up), so you can run with a larger load factor and probe length with no problems.
[17:19:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:24:16] *** Quits: tfb (~tfb@88.98.95.237) (Quit: died)
[17:24:40] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:30:51] *** Quits: rusua (uid124537@id-124537.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:37:31] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[17:39:14] <lisp123> pjb: Thanks, that makes sense (leaving it client code) and definitely some advanced use cases, I guess not for daily use otherwise
[17:48:00] *** Joins: makomo_ (~makomo@user/makomo)
[17:52:31] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[17:54:16] *** Joins: amb007 (~a_bakic@6.198.204.77.rev.sfr.net)
[18:05:47] *** Quits: amb007 (~a_bakic@6.198.204.77.rev.sfr.net) (Ping timeout: 264 seconds)
[18:10:33] *** Joins: amb007 (~a_bakic@186.105.204.77.rev.sfr.net)
[18:26:21] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 265 seconds)
[18:39:44] *** Joins: notzmv (~zmv@user/notzmv)
[18:39:54] <stacksmith> Good morning
[18:51:18] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[18:51:57] *** Joins: makomo_ (~makomo@user/makomo)
[18:57:30] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:57:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[19:00:20] *** Quits: zacque (~zacque@5.102.49.60.klj04-home.tm.net.my) (Quit: Goodbye :D)
[19:02:52] *** Quits: Guest-liao (~Guest-lia@101.86.103.113) (Quit: Client closed)
[19:04:59] <beach> Hello stacksmith.
[19:18:37] *** Joins: Psybur (~Psybur@mobile-166-170-34-168.mycingular.net)
[19:22:12] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[19:34:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:37:24] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 265 seconds)
[19:38:12] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:38:54] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:41:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[19:43:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[19:44:04] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[19:46:13] *** Quits: makomo_ (~makomo@user/makomo) (Ping timeout: 252 seconds)
[19:50:52] *** Joins: igemnace (~ian@user/igemnace)
[19:55:45] *** Joins: nature (~nature@45.32.235.173)
[19:55:50] *** Quits: Psybur (~Psybur@mobile-166-170-34-168.mycingular.net) (Remote host closed the connection)
[20:18:36] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:20:00] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[20:27:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[20:28:15] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[20:30:10] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8d5f:78c6:cd1:4a9b) (Quit: WeeChat 3.2)
[20:34:40] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ed38:680c:308b:2321)
[20:34:55] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:ed38:680c:308b:2321) (Client Quit)
[20:35:19] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:ed38:680c:308b:2321)
[20:35:56] *** Quits: Nilby (~Nilby@2601:603:1481:30a0:82fa:5bff:fe66:4b49) (Ping timeout: 245 seconds)
[20:39:56] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[20:41:22] *** Quits: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de) (Read error: Connection reset by peer)
[20:42:26] *** Joins: gaqwas (~john@dynamic-095-115-020-193.95.115.pool.telefonica.de)
[20:55:43] *** Joins: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net)
[20:58:00] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[21:02:46] *** Joins: Bike (~Bike@71.69.170.70)
[21:02:46] *** ChanServ sets mode: +o Bike
[21:15:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:19:24] *** Quits: lisp123 (~lisp123@5.30.23.247) (Client Quit)
[21:33:26] *** Quits: amb007 (~a_bakic@186.105.204.77.rev.sfr.net) (Read error: Connection reset by peer)
[21:33:51] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[21:38:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[21:49:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:50:06] <lisp123> Is there a way to get the compiler notes from SLIME (that pop up when one C-c C-k's a file) during the ASDF load-file process?
[21:55:15] *** Joins: jealousmonk (~user@2804:431:e7c5:3f2:5f6e:d4b3:6e97:d2df)
[22:02:56] <scymtym> the *slime-compilation* buffer generally contains printed representations of these conditions (and can visit the corresponding source locations)
[22:03:01] <jackdaniel> I think that there is slime-asdf contrib
[22:03:04] <jackdaniel> perhaps that helps
[22:03:07] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[22:06:19] <lisp123> jackdaniel: Thanks
[22:06:27] <lisp123> scymtym: Will check that out too
[22:17:28] *** Joins: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc)
[22:18:38] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:e9fe:72f5:e93b:115a)
[22:18:40] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[22:19:16] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 245 seconds)
[22:19:54] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:30:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[22:33:09] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[22:38:55] *** Quits: rain3 (~rain3___@2a02:2f09:d003:5800:b41c:c37:1705:91bc) (Ping timeout: 260 seconds)
[22:42:53] *** Quits: cage (~cage@dynamic-adsl-84-220-249-98.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[22:54:31] *** Joins: winning-luser (~winning-l@2601:8c1:181:1340::e50f)
[23:08:18] *** Joins: notzmv (~zmv@user/notzmv)
[23:08:43] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[23:09:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:14:30] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 260 seconds)
[23:16:03] *** Joins: varjag (~user@ti0040a400-5479.bb.online.no)
[23:18:44] <varjag> let's say i have a list of pairs in some container P, and these individual pairs can also be referenced elsewhere
[23:19:33] <varjag> i then have some 'child' container C, that can shadow some of these pairs (because its car or cdr are changed)
[23:20:58] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[23:21:11] <varjag> and i want the code referencing pairs in P use the values that are shadowed by C if C is supplied
[23:22:50] <varjag> rn am thinking to do shadowing in C via alist (keyed by original pairs of P) but it's not very pretty
[23:23:59] *** Quits: pve (~pve@37-136-6-84.rev.dnainternet.fi) (Quit: leaving)
[23:27:02] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[23:28:06] <Alfr> varjag, if P doesn't change while C is relevant, you could equip C with the same interface as P but with modifications only stored in C and reads backed by P if there's nothing appropriate in C.
[23:32:14] <varjag> Alfr: sounds good!
[23:32:38] <varjag> trying to figure out now how to do the read backed by P part now
[23:33:04] <varjag> problem is container family tree can be arbitrarily deep
[23:33:54] <varjag> and you're right P basically becomes immutable
[23:34:07] *** Quits: mortemeur (~mortemeur@pool-173-76-107-201.bstnma.fios.verizon.net) (Quit: Leaving)
[23:36:04] <Alfr> varjag, you might want to look up persistent data structures; maybe there's something suitable out there already?
[23:37:22] <varjag> well i can surely graft something but would really love some memory efficient solution
[23:37:39] <varjag> (the key-value shadowing i mentioned doesn't strike me as one)
[23:46:21] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[23:46:59] *** Joins: srhm (~srhm@user/srhm)
[23:52:12] <varjag> ok think i have an idea..
[23:55:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:55:53] *** Joins: hendursaga (~weechat@user/hendursaga)
