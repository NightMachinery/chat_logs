[00:00:49] *** Joins: mud (~mud@user/kadoban)
[00:02:58] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[00:04:46] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[00:04:49] *** Joins: alx741 (~alx741@157.100.93.160)
[00:05:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[00:06:54] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:06:59] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Ping timeout: 256 seconds)
[00:08:33] *** Joins: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net)
[00:09:33] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[00:10:32] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[00:11:24] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[00:11:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:11:33] <polyphem> latest addition to haskell guis : https://github.com/fjvallarino/monomer
[00:11:48] *** Joins: cheater (~Username@user/cheater)
[00:16:55] <jackdk> polyphem: cool, I like that it has an explicit statement of objectives/non-objectives as well as design decisions. We could do with more active development in the GUI space (I'm a backend guy, mostly)
[00:17:45] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Ping timeout: 256 seconds)
[00:17:50] <polyphem> jackdk: have never tried it though, but it looks reasonable and nice
[00:18:42] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:19:27] *** Joins: Hildegunst (~luc@80.248.12.109.rev.sfr.net)
[00:20:02] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:24:09] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[00:25:17] *** Joins: alx741 (~alx741@157.100.93.160)
[00:28:06] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[00:28:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:28:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:28:29] *** Joins: wroathe (~wroathe@user/wroathe)
[00:29:04] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:29:44] <EvanR> monomer, nice
[00:31:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[00:32:06] *** Joins: burnsidesLlama (~burnsides@client-8-70.eduroam.oxuni.org.uk)
[00:32:22] *** Joins: root____ (~root@185.234.208.208.r.toneticgroup.pl)
[00:32:24] *** root____ is now known as briandaed
[00:33:15] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:33:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:34:11] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Ping timeout: 256 seconds)
[00:35:07] *** Quits: Hildegunst (~luc@80.248.12.109.rev.sfr.net) (Quit: leaving)
[00:36:20] *** Quits: burnsidesLlama (~burnsides@client-8-70.eduroam.oxuni.org.uk) (Ping timeout: 250 seconds)
[00:36:25] *** Quits: _ht (~quassel@2a02:a468:b619:1:b63a:bf2b:8ee:fbf2) (Remote host closed the connection)
[00:37:13] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[00:38:54] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:39:39] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:41:42] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:41:42] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:41:42] *** Joins: wroathe (~wroathe@user/wroathe)
[00:45:19] *** Joins: alx741 (~alx741@157.100.93.160)
[00:45:31] *** Joins: spaceseller (~spacesell@31.147.205.13)
[00:46:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:48:19] *** Quits: spaceseller (~spacesell@31.147.205.13) (Client Quit)
[00:48:42] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[00:52:22] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:6113:2671:c33c:ef4a) (Ping timeout: 250 seconds)
[00:52:57] *** Joins: kn07_ (~kn07_@86.121.166.134)
[00:55:30] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:55:59] <oak-> Isn't Qt quite well supported in Haskell? Or at least it was couple of years ago
[00:58:05] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de)
[00:58:12] <oak-> GTK and cross-platform development was pain, I never got Gtk compiled on macOs
[00:58:53] <oak-> qtah on the contrary was quite easy to set up
[01:02:20] <EvanR> cocoa is cool
[01:02:52] <EvanR> but I guess rats ass chance that will work on e.g. windows
[01:06:42] *** Joins: alx741 (~alx741@157.100.93.160)
[01:07:37] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:07:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:07:38] *** Joins: wroathe (~wroathe@user/wroathe)
[01:09:40] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:10:45] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[01:10:49] <ephemient> cocotron supposedly works on windows
[01:15:02] *** Quits: ubert (~Thunderbi@p200300ecdf0994cfb11256a527c2b165.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:16:38] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[01:18:48] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:21:21] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[01:23:34] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[01:27:01] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:27:24] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[01:28:06] *** Joins: alx741 (~alx741@157.100.93.160)
[01:28:20] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:29:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:29:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:29:39] *** Joins: wroathe (~wroathe@user/wroathe)
[01:32:48] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[01:34:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[01:34:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:39:28] *** Joins: Pickchea (~private@user/pickchea)
[01:40:00] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b)
[01:40:58] *** Parts: bsima (~bsima@2604:a880:400:d0::19f1:7001) (WeeChat 3.3)
[01:42:00] *** Joins: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c)
[01:42:12] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Ping timeout: 250 seconds)
[01:43:23] *** Quits: gustik (~gustik@2a01:c844:2436:6920:9e9:f97c:41d1:634c) (Remote host closed the connection)
[01:43:39] *** Joins: zebrag (~chris@user/zebrag)
[01:46:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:51:15] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[01:52:31] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:52:40] *** Joins: alx741 (~alx741@157.100.93.160)
[01:55:28] <EvanR> what is the difference between a DSL, and Embedded DSL, and a "Deeply Embedded" DSL
[01:55:46] <EvanR> and how deep does this rabbit hole go
[01:55:57] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[01:56:00] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[01:56:00] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[01:56:00] *** finn_elija is now known as FinnElija
[01:56:17] <Cale> DSL means domain-specific language. You can imagine having a domain specific language which has its own concrete syntax that gets parsed and either compiled or interpreted separately
[01:56:18] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[01:56:23] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[01:56:42] <monochrom> "embedded" sticks to the host language. Without "embedded", it can mean your own syntax, your own parser.
[01:56:49] <geekosaur> I think that's not quite the question. more "why are there three different kinds?
[01:57:04] <Cale> An embedded domain specific language is essentially a library for a more general purpose programming language, where you use the host language's syntax, and usually many of its means of abstraction.
[01:57:41] <monochrom> And then "shallow embedding" vs "deep embedding" is about how much features of the host language you reuse (as opposed to reinvent). I forgot which end is deep.
[01:57:57] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[01:58:15] <monochrom> For example suppose your DSL is untyped lambda calculus again! :D
[01:58:20] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[01:58:20] <Cale> Yeah, shallow embeddings are closer to the sort where you're parsing concrete syntax, instead, you just have an abstract syntax tree as a data structure in your host language and use that
[01:58:41] <Cale> While deep embeddings are harder to distinguish from straightforward libraries in the host language.
[01:59:11] *** Quits: opticblast (~june@secure-165.caltech.edu) (Ping timeout: 256 seconds)
[01:59:20] <monochrom> You may choose "data L = ... | Function{argument::String, body::L}" or "data L = ... | Function (L -> L)".  That would be one way "shallow" and "deep" differ.
[01:59:36] <Cale> At least, if *I'm* remembering which way around that goes :D
[02:00:28] <Cale> Oh, it seems like some people use shallow embedding to mean something rather different from what I suggested
[02:00:42] <Cale> https://wiki.haskell.org/Embedded_domain_specific_language
[02:01:37] *** Quits: neverwas (jpneverwas@swissbox.unperson.link) (Ping timeout: 240 seconds)
[02:01:45] <Cale> That seems to indicate that shallow embeddings are ones where Haskell (or host language) expressions construct concrete syntax of the domain specific language, and then that gets interpreted.
[02:02:20] <Cale> While deep embeddings only build the abstract syntax tree. So that's a different split point than I was thinking of :)
[02:02:33] <Cale> Maybe depth of embedding is relative :D
[02:02:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[02:02:48] <Cale> As their deep embedding was my shallow one
[02:02:52] <EvanR> I'm going to partition monochrom Cale msgs and read them as separate streams now
[02:02:57] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[02:03:18] <EvanR> oh wouldn't that be a cool irc client feature
[02:03:24] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[02:03:26] <Cale> (and their shallow embedding was even shallower than I was thinking)
[02:03:43] *** Quits: random__ (~random@185.219.68.251) (Remote host closed the connection)
[02:04:06] *** Joins: random__ (~random@185.219.68.251)
[02:04:17] <Cale> Yeah, for a long time I've wished I could e.g. ctrl-click on a bunch of people's nicks in the message log and then have the view restricted to those people.
[02:04:56] <EvanR> alright so...
[02:05:09] <monochrom> Well, "bus factor" suffers from the same problem.  Half of the people define a formula that says a higher number means more single-person failures, and the other half does the opposite.
[02:05:23] <EvanR> a DSL could be implemented as data structure interpreter, or... 
[02:05:33] <EvanR> I think that's 1 kind
[02:05:44] <monochrom> And now, which direction is reify, which direction is reflect? >:)
[02:06:19] <EvanR> so what does deep mean again
[02:06:32] <EvanR> it sounds good
[02:07:45] <EvanR> I'd say haskell is making it hard to figure this out, but I've only heard of these terms in haskell
[02:07:51] * geekosaur wonders where xmonad lies on this axis, since it's clearly a DSL but is not related to an interpreter really
[02:07:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[02:08:21] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[02:09:36] <monochrom> I learned deep vs shallow from using a theorem prover to prove Gödel incompleteness so you begin by embedding your own FOL in the host FOL...
[02:10:00] <EvanR> in that case, what's the diff between deep and shallow
[02:10:16] <Cale> EvanR: Well, let's be a little more general, I think the idea of "deep" vs. "shallow" is that one embedding is "deeper" than another if it feels more like a native use of the host language, rather than an entirely separate construction.
[02:10:36] <monochrom> Like I said, how much of the host language features you just reuse.  And I forgot whether "deep" means more or it means less.
[02:10:46] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:10:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[02:10:57] <monochrom> For example do you use the host languages "and" or do you roll your own.
[02:11:23] <EvanR> this is funny, now I get what you mean
[02:11:23] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[02:11:40] <EvanR> but am more confused about the direction of deep and shallow
[02:11:42] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[02:11:58] <Cale> Another important one: do you use the host language's functions, or do you manage variable bindings and function evaluation yourself
[02:12:17] <EvanR> if you implement variables and functions yourself... is that deep or shallow
[02:12:30] <Cale> After looking at some things, I'm pretty sure "deeper" means "closer to just using the host language"
[02:12:42] *** Joins: alx741 (~alx741@157.100.93.160)
[02:12:47] <EvanR> so deeply embedded is easier
[02:12:50] <monochrom> Yeah I vaguely remember the direction is like that.
[02:13:03] <EvanR> that's counterintuitive
[02:13:06] <Cale> i.e. a shallow embedding is one which is closer to being not embedded
[02:13:13] <sm> there's this: https://wiki.haskell.org/Embedded_domain_specific_language#Degree_of_embedding
[02:13:29] <Cale> Yeah, that's the thing I linked before :)
[02:13:41] <sm> oops, carry on :)
[02:14:02] <Cale> Their notion of shallow embedding is really quite shallow indeed, but you're likely to see it when it comes to SQL
[02:14:11] <monochrom> Well, "you use Haskell in a shallow way" can mean "you don't use many Haskell features" -> "you don't let Haskell do the heavy lifting" -> "you code up your own heavy lifting".
[02:14:27] <Cale> since the end goal there is usually not to run SQL statements in Haskell, but to send them over to a database server to be executed
[02:15:10] <monochrom> Also, "embed deep" can mean "the semantics of your EDSL is tightly tied to the semantics of Haskell because you just let Haskell do it"
[02:15:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:16:15] <monochrom> Shallow Query Language </roast>
[02:16:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:17:11] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:17:26] <EvanR> if i'm not mistaken you usually don't see stuff advertising itself as shallow 
[02:17:32] <EvanR> making it seem worse
[02:18:11] <monochrom> Fortunately I read academic works for these things, where people don't have that marketing burden.
[02:19:12] <jackdk> @src for_
[02:19:12] <lambdabot> Source not found. Have you considered trying to match wits with a rutabaga?
[02:19:19] <monochrom> Well, academia has a different marketing burden, but it is more interesting and justified than just avoiding some words.
[02:20:13] <ephemient> @src forM_
[02:20:14] <lambdabot> forM_ = flip mapM_
[02:20:52] <EvanR> :t for_
[02:20:53] <lambdabot> (Foldable t, Applicative f) => t a -> (a -> f b) -> f ()
[02:21:01] <monochrom> yeah, for_ is an alias of forM_, and traces back to mapM_.  Don't worry, mapM_ has been improved to use just Applicative.
[02:21:28] <EvanR> wow that is cool I thought for_ needed Traversable
[02:21:51] <sm> perhaps some concrete examples are in order. Cabal file: DSL; Hamlet template: DSL with EDSL elements ? blaze-html or lucid or Shake or Hakyll script: deep EDSL ?
[02:22:17] <Cale> Attoparsec: even deeper EDSL?
[02:23:48] *** Quits: ouestbillie (~gallup@142.169.82.16) (Ping timeout: 250 seconds)
[02:28:33] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:29:04] <sm> I guess when it just looks like function calls we call it code, and what makes it an EDSL is when it aims to give a visual/cognitive impression of being a different language from the host language
[02:31:07] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[02:31:49] *** Joins: alx741 (~alx741@157.100.93.160)
[02:31:51] <jackdk> > :t flip $ \f -> foldr ((*>) . f) (pure ()) -- EvanR 
[02:31:53] <lambdabot>  <hint>:1:1: error: parse error on input ‘:’
[02:32:03] <jackdk> % :t flip $ \f -> foldr ((*>) . f) (pure ()) -- EvanR 
[02:32:03] <yahb> jackdk: ; <interactive>:1:26: error:; Ambiguous occurrence `.'; It could refer to; either `Control.Category..', imported from `Control.Category'; or `Prelude..', imported from `Prelude' (and originally defined in `GHC.Base')
[02:32:13] <jackdk> ahh you know what I mena
[02:32:16] <jackdk> mean*
[02:32:42] <geekosaur> % :m - Control.Category
[02:32:42] <yahb> geekosaur: 
[02:32:43] * sm plays with smalltalk
[02:32:48] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[02:34:01] <EvanR> who left prelude and category imported in conflict xD
[02:34:04] <sm> flipping between smalltalk and haskell windows is quite mind-stretching
[02:34:19] <EvanR> just think of smalltalk as a DSL
[02:34:34] <EvanR> smalltalk monad
[02:37:14] <monochrom> I like Smalltalk blocks. It shows that lambda, not objects, is how you achieve compositionality, component reuse, all that good stuff.
[02:38:00] <EvanR> once you write a single class, you can reuse that single class as many times as you like
[02:38:07] <EvanR> code reuse
[02:38:11] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:38:16] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[02:39:06] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:40:43] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:42:39] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[02:43:00] * sm stumbled into https://gtoolkit.com , a clean modern layer on top of pharo, which is a fork of squeak, which is the OSS descendant of smaltalk-80
[02:43:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[02:43:50] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[02:43:51] <sm> I always wanted to see smalltalk (good OO) and haskell (good FP) combined. 
[02:43:54] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[02:44:23] <sm> just now I'm wondering what image-based Haskell dev could look like
[02:44:25] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:44:49] <Inst> do you know how to override cabal version checks?
[02:45:09] <geekosaur> --allow-{newer,older}[=package,...]
[02:45:11] <Inst> Warning: readline.cabal:27:32: version operators used. To use version
[02:45:11] <Inst> operators the package needs to specify at least 'cabal-version: >= 1.8'.
[02:45:11] <Inst> Warning: readline.cabal:9:3: Tabs used as indentation at 9:3, 10:3, 12:3,
[02:45:11] <Inst> 13:3, 15:3, 16:3
[02:45:11] <Inst> Configuring readline-1.0.3.0...
[02:45:11] <Inst> cabal-3.6.2.0.exe: The package has a './configure' script. If you are on
[02:45:13] <Inst> Windows, This requires a Unix compatibility toolchain such as MinGW+MSYS or
[02:45:16] <Inst> Cygwin. If you are not on Windows, ensure that an 'sh' command is discoverable
[02:45:18] <Inst> in your path.
[02:45:20] <Inst> cabal-3.6.2.0.exe: Failed to build readline-1.0.3.0. See the build log above
[02:45:22] <Inst> for details.
[02:45:24] <Inst> whoops, sorry
[02:45:26] <Inst> didn't know it'd be that long
[02:45:42] <geekosaur> anyway that does not show any errors, just warnings
[02:46:05] <geekosaur> if you don't have mingw, it won't build, it tells you this
[02:46:24] <geekosaur> you can't "override" that
[02:46:41] *** Joins: jgeerds_ (~jgeerds@55d4af63.access.ecotel.net)
[02:47:18] <Inst> i should have mingw
[02:47:22] <Inst> should that be added to path?
[02:48:16] <geekosaur> actually you should run the install from a mingw sh window
[02:49:33] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 250 seconds)
[02:51:09] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[02:52:09] <Nate[m]1> can I ask agda related question here?
[02:55:09] <Nate[m]1> can someone tell me how to call agda standard library?
[02:56:04] *** Quits: cosimone (~user@93-44-186-159.ip98.fastwebnet.it) (Remote host closed the connection)
[02:56:51] *** Joins: alx741 (~alx741@157.100.93.160)
[02:59:39] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[02:59:55] <EvanR> hrm to make monad an instance of mtl classes like MonadReader and MonadRWS the type variables need to line up exactly...
[03:00:14] <EvanR> which might be a different order from other convenience
[03:01:04] <EvanR> or I'm trippin
[03:01:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:91a1:7dca:589a:aaae) (Ping timeout: 240 seconds)
[03:02:13] <Inst> https://media.discordapp.net/attachments/528863657363505159/931692175132090398/unknown.png
[03:02:28] <Inst> added mingw to path
[03:03:04] <geekosaur> you will need to use pacman to install the mingw readline package
[03:03:05] <Inst> bash in mingw64 doesn't recognize cabal
[03:03:14] *** Quits: aliosablack (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 250 seconds)
[03:03:25] <Inst> just ran pacman, mingw stopped responding
[03:03:50] <Inst> okay, should be able to take care of myself, ex-Arch user
[03:05:19] <Inst> is mingw literally using arch pacman?
[03:06:17] <geekosaur> a port of it
[03:06:25] <geekosaur> with its own packages though, not from arch
[03:07:52] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:08:29] <ephemient> like almost all other development tools, Haskell is much less painful on Linux or WSL than on Windows natively </opinion>
[03:09:03] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[03:09:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[03:10:50] <Inst> also, that feel when you realize you have to learn monad transformers to get readkey support on Haskell
[03:10:55] *** Joins: slack1256 (~slack1256@191.126.99.209)
[03:12:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:12:38] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:12:38] *** Joins: wroathe (~wroathe@user/wroathe)
[03:13:09] *** Quits: slac97765 (~slack1256@191.126.99.72) (Read error: Connection reset by peer)
[03:13:09] <EvanR> you think you need transformers to use Maybe and IO again
[03:13:15] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[03:13:26] <Inst> Haskeline uses InputT datatype
[03:13:45] <EvanR> groovy
[03:14:13] <ephemient> did none of the other terminal manipulation suggestions from earlier work?
[03:14:44] <Inst> tbh i have no idea how to pacman readline
[03:15:24] <Inst> i'll try compile and seeing if it works, but GHCi and GHC generated executables having different behavior -> baaaaad
[03:15:45] *** Joins: neverwas (jpneverwas@swissbox.unperson.link)
[03:16:45] <hpc> differences between interpreted and compiled code are very very rare, and iirc all have to do with ffi
[03:16:58] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:17:13] <Inst> okay, somehow runhaskell died?
[03:17:30] *** Quits: shriekingnoise (~shrieking@156-16-231-201.fibertel.com.ar) (Quit: Quit)
[03:17:33] *** Joins: alx741 (~alx741@157.100.93.160)
[03:17:36] *** Quits: max22- (~maxime@2a01cb0883359800ad92d79b8ec75caf.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:18:30] <Inst> also did hutton during a dental cleaning
[03:18:50] <Inst> contrary to the insistence of the hygienist, it is in fact possible to read a haskell textbook during routine dental care
[03:19:21] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[03:19:23] <Inst> so getting into state monad, although it's still hard, not completely getting the syntax (or the notion that functions can be typeconstructed or type-synonymed types)
[03:19:37] <Inst> ::smug::
[03:20:10] *** Quits: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org) (Quit: WeeChat 3.3)
[03:20:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:21:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:21:58] <EvanR> hmm funny MonadRWS class has no 
[03:22:00] <EvanR> methods
[03:22:44] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:22:44] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-73.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[03:23:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:24:02] *** Quits: red-snail (~snail@static.151.210.203.116.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[03:24:23] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:24:25] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:24:51] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[03:25:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:25:39] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[03:25:42] <Athas> Is it right that stackage nightly still isn't on aeson 2?
[03:25:50] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:28:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:28:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:28:36] *** Joins: wroathe (~wroathe@user/wroathe)
[03:28:37] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[03:28:40] <geekosaur> EvanR, it doesn't need them, the "superclasses" provide them
[03:29:17] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[03:29:51] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[03:30:49] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[03:31:33] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 256 seconds)
[03:31:33] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:32:19] <EvanR> so it's just like a shorthand class
[03:32:46] <monochrom> MonadRWS is one of those "aliases" so you don't have to spell out "(MonadState ..., MonadWriter..., MonadReader...)
[03:32:50] <monochrom> Yeah
[03:33:33] *** Joins: jespada (~jespada@87.74.36.188)
[03:33:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:33:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:34:20] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:34:23] <Inst> oh, so that's how you do typeclass aliases in Haskell
[03:34:37] *** Joins: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de)
[03:34:37] *** Quits: neurocyte091709 (~neurocyte@IP-212232084012.dynamic.medianet-world.de) (Changing host)
[03:34:37] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[03:34:37] <monochrom> When the constraint takes 70 columns, people start asking tough questions like "how do I indent a multi-line type sig" and have style guide wars :)
[03:35:20] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[03:35:45] <Inst> class Monad m => Join m where
[03:36:36] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[03:37:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:38:20] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:38:38] <hpc> that's why i make it 30 columns
[03:39:04] <hpc> when the question is "how do i break a meaningful identifier across two lines" programming becomes much more fun
[03:39:14] <monochrom> hahaha
[03:39:47] <hpc> someone should make a programming language that has end-of-line hyphenation
[03:40:18] <geekosaur> long since done. there was a continuation column on old keypunch cards
[03:40:23] <hpc> also make it not whitespace-sensitive
[03:40:29] <hpc> then you don't have to worry about formatting your code in latex
[03:40:34] <geekosaur> now you're talking fortran
[03:41:22] <geekosaur> where "DO 10 I = 1. 10" does something you did not intend
[03:41:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:41:57] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:42:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:43:27] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:44:26] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[03:44:53] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[03:45:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:877b:86ff:8e37:7e9b) (Ping timeout: 240 seconds)
[03:49:38] *** Joins: alx741 (~alx741@157.100.93.160)
[03:50:36] <hpc> there's an ID 10 T joke in there somewhere
[03:53:16] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:54:52] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:58:30] *** Joins: Erutuon (~Erutuon@user/erutuon)
[03:59:17] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[04:00:27] <EvanR> > sort "DO 10 I = 1. 10"
[04:00:29] <lambdabot>  "     .00111=DIO"
[04:00:49] <EvanR> or a bad dick joke
[04:02:26] <geekosaur> why did I initially misread that as "bad dad joke"?
[04:02:53] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[04:03:06] <EvanR> a bat dad joke would be better
[04:03:23] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[04:11:42] *** Joins: alx741 (~alx741@157.100.93.160)
[04:12:36] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[04:14:05] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:14:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[04:15:45] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[04:16:54] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[04:17:56] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[04:18:21] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[04:19:37] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[04:19:56] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::55f8)
[04:20:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:20:55] *** Joins: mud (~mud@user/kadoban)
[04:23:37] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[04:23:48] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[04:29:47] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[04:30:37] *** Quits: jgeerds_ (~jgeerds@55d4af63.access.ecotel.net) (Ping timeout: 240 seconds)
[04:33:07] *** Quits: simpleauthority (~simpleaut@user/simpleauthority) (Quit: ZNC 1.8.2 - https://znc.in)
[04:33:39] *** Joins: notzmv (~zmv@user/notzmv)
[04:33:55] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:34:37] *** Joins: simpleauthority (~simpleaut@user/simpleauthority)
[04:35:27] *** Joins: khumba (~khumba@user/khumba)
[04:37:09] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:f860:6cdd:6a70:803a)
[04:38:07] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Quit: Leaving)
[04:38:18] *** Quits: slack1256 (~slack1256@191.126.99.209) (Remote host closed the connection)
[04:39:14] *** Joins: alx741 (~alx741@157.100.93.160)
[04:40:22] *** Joins: xsperry (~xs@user/xsperry)
[04:42:23] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3)
[04:45:31] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:45:32] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:45:32] *** Joins: wroathe (~wroathe@user/wroathe)
[04:47:56] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[04:51:08] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[04:52:20] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:52:20] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[04:54:41] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 256 seconds)
[04:57:13] <EvanR> so if I have a big expr whose type has 1 type variable in ghci
[04:57:43] <EvanR> and I can't evaluate it until I choose a type that has a Monoid instance
[04:57:54] <EvanR> and I have type applications enabled
[04:58:51] *** Joins: xsperry (~xs@user/xsperry)
[04:59:02] <EvanR> nvm I'll just look up the type applications cyclopedia
[04:59:43] <EvanR> k it only works on functions
[05:00:23] *** Joins: teehemkay__ (sid14792@id-14792.lymington.irccloud.com)
[05:00:25] *** Joins: b20n_ (sid115913@id-115913.uxbridge.irccloud.com)
[05:00:25] *** Joins: rtpg_ (sid443069@id-443069.ilkley.irccloud.com)
[05:00:25] *** Joins: caasih_ (sid13241@id-13241.ilkley.irccloud.com)
[05:00:25] *** Joins: FragByte_ (~christian@user/fragbyte)
[05:00:26] *** Joins: wallymathieu_ (uid533252@id-533252.uxbridge.irccloud.com)
[05:00:26] *** Joins: davetapley_ (sid666@id-666.uxbridge.irccloud.com)
[05:00:26] *** Joins: pjlsergeant_ (sid143467@id-143467.hampstead.irccloud.com)
[05:00:26] *** Joins: degraafk_ (sid71464@id-71464.lymington.irccloud.com)
[05:00:26] *** Joins: tnks_ (sid412124@id-412124.helmsley.irccloud.com)
[05:00:28] *** Joins: ehamberg_ (sid18208@id-18208.hampstead.irccloud.com)
[05:00:28] *** Joins: mcfilib_ (sid302703@user/mcfilib)
[05:00:28] *** Joins: pepeiborra_ (sid443799@id-443799.ilkley.irccloud.com)
[05:00:29] *** Joins: lightandlight_ (sid135476@id-135476.helmsley.irccloud.com)
[05:00:29] *** Joins: edmundnoble_ (sid229620@id-229620.helmsley.irccloud.com)
[05:00:31] *** Joins: _0x47__ (sid508683@id-508683.tinside.irccloud.com)
[05:00:59] *** Joins: mncheckm (~mncheck@193.224.205.254)
[05:01:49] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[05:02:01] *** Joins: lisq_ (~quassel@lis.moe)
[05:02:16] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[05:02:42] *** Joins: ajb (~ajb@cupid.whatbox.ca)
[05:02:44] *** Joins: loonycyborg_ (~loonycybo@chantal.wesnoth.org)
[05:02:47] *** Joins: haskl[error] (~haskl@user/haskl)
[05:02:49] *** Joins: vjok1 (~vjoki@2a00:d880:3:1::fea1:9ae)
[05:02:50] *** Joins: codedmart (codedmart@2600:3c01::f03c:92ff:fefe:8511)
[05:02:52] *** Joins: dragestil_ (~znc@user/dragestil)
[05:03:18] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[05:03:20] *** Joins: nonzen_ (~nonzen@user/nonzen)
[05:04:06] *** Joins: Arsen_ (arsen@managarm/dev/Arsen)
[05:04:30] *** Joins: riatre (~quassel@2001:310:6000:f::5198:1)
[05:04:40] *** Joins: bah_ (~bah@l1.tel)
[05:04:53] *** Joins: Guest4269 (~mal@ns2.wyrd.be)
[05:05:02] *** Joins: AWizzArd_ (~code@gehrels.uberspace.de)
[05:05:03] *** Joins: hpc_ (~juzz@ip98-169-35-13.dc.dc.cox.net)
[05:05:24] *** Joins: kronicma1 (user73386@neotame.csclub.uwaterloo.ca)
[05:05:30] *** Joins: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[05:06:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 256 seconds)
[05:06:55] *** Joins: uroboros (~ouroboros@user/ouroboros)
[05:07:51] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[05:07:53] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:08:52] *** Joins: PHO`_ (~pho@akari.cielonegro.org)
[05:09:04] *** Quits: caasih (sid13241@id-13241.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: teehemkay (sid14792@id-14792.lymington.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: mcfilib (sid302703@user/mcfilib) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** pjlsergeant_ is now known as pjlsergeant
[05:09:04] *** teehemkay__ is now known as teehemkay
[05:09:04] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** b20n_ is now known as b20n
[05:09:04] *** Quits: pepeiborra (sid443799@id-443799.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: PHO` (~pho@akari.cielonegro.org) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: vjoki (~vjoki@2a00:d880:3:1::fea1:9ae) (Ping timeout: 240 seconds)
[05:09:04] *** Quits: _0x47_ (sid508683@id-508683.tinside.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: codedmart_ (codedmart@2600:3c01::f03c:92ff:fefe:8511) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: degraafk (sid71464@id-71464.lymington.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: edmundnoble (sid229620@id-229620.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: tnks (sid412124@id-412124.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: rtpg (sid443069@id-443069.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** vjok1 is now known as vjoki
[05:09:05] *** Quits: wallymathieu (uid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: APic (apic@apic.name) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: lisq (~quassel@lis.moe) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: loonycyborg (~loonycybo@wesnoth/developer/loonycyborg) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: jakalx (~jakalx@base.jakalx.net) (Ping timeout: 240 seconds)
[05:09:05] *** degraafk_ is now known as degraafk
[05:09:05] *** Quits: haskl (~haskl@user/haskl) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: ajb_ (~ajb@cupid.whatbox.ca) (Ping timeout: 240 seconds)
[05:09:05] *** Quits: bah (~bah@l1.tel) (Ping timeout: 240 seconds)
[05:09:06] *** tnks_ is now known as tnks
[05:09:06] *** Quits: domcornloan (~mike@user/feetwind) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: cpape` (~user@2a01:4f9:c010:632d::1) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: FragByte (~christian@user/fragbyte) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: Deide (~deide@user/deide) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: jesser[m] (~jessermat@2001:470:69fc:105::d5ae) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: smichel17[m] (~smichel17@2001:470:69fc:105::2d32) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: fcortesi (~fcortesi@2001:470:69fc:105::f3a9) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: justosophy[m] (~justosoph@2001:470:69fc:105::572f) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: fgaz (~fgaz@2001:470:69fc:105::842) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: Artem[m] (~artemtype@2001:470:69fc:105::75b) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: Arathorn (~arathorn@2001:470:69fc:105::1f) (Ping timeout: 240 seconds)
[05:09:06] *** davetapley_ is now known as davetapley
[05:09:06] *** rtpg_ is now known as rtpg
[05:09:06] *** wallymathieu_ is now known as wallymathieu
[05:09:06] *** Quits: |beowulf| (1000@sourcemage/mage/beowulf) (Ping timeout: 240 seconds)
[05:09:06] *** Quits: ouroboros (~ouroboros@user/ouroboros) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: smunix (~smunix@static.26.70.12.49.clients.your-server.de) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: tureba (~tureba@tureba.org) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: guibou (~guibou@mail.fmap.fr) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: kronicmage (user75299@neotame.csclub.uwaterloo.ca) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Arsen (arsen@managarm/dev/Arsen) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: riatre_ (~quassel@2001:310:6000:f::5198:1) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: dragestil (~znc@user/dragestil) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: MasseR (~MasseR@51.15.143.128) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: martin02 (~silas@2001:4ca0:0:fe00:0:5efe:a96:1bc1) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: nonzen (~nonzen@user/nonzen) (Ping timeout: 240 seconds)
[05:09:07] *** uroboros is now known as ouroboros
[05:09:07] *** Quits: sudden (~cat@user/sudden) (Ping timeout: 240 seconds)
[05:09:07] *** Quits: alp (~alp@mail.fmap.fr) (Ping timeout: 240 seconds)
[05:09:07] *** MasseR4 is now known as MasseR
[05:09:07] *** caasih_ is now known as caasih
[05:09:07] *** lightandlight_ is now known as lightandlight
[05:09:07] *** ehamberg_ is now known as ehamberg
[05:09:07] *** pepeiborra_ is now known as pepeiborra
[05:09:07] *** mcfilib_ is now known as mcfilib
[05:09:07] *** FragByte_ is now known as FragByte
[05:09:07] *** _0x47__ is now known as _0x47_
[05:09:07] *** edmundnoble_ is now known as edmundnoble
[05:09:07] *** dragestil_ is now known as dragestil
[05:09:17] *** Quits: lisq_ (~quassel@lis.moe) (Quit: lisq_)
[05:09:30] *** Joins: lisq (~quassel@lis.moe)
[05:10:52] *** Joins: alx741 (~alx741@157.100.93.160)
[05:12:15] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Ping timeout: 256 seconds)
[05:12:49] *** Quits: hpc_ (~juzz@ip98-169-35-13.dc.dc.cox.net) (Ping timeout: 256 seconds)
[05:13:31] *** Joins: APic (apic@apic.name)
[05:14:20] *** Joins: hpc (~juzz@ip98-169-35-13.dc.dc.cox.net)
[05:14:42] *** AWizzArd_ is now known as AWizzArd
[05:15:00] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[05:15:19] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (Changing host)
[05:15:19] *** Joins: AWizzArd (~code@user/awizzard)
[05:15:21] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[05:15:46] *** Quits: xsperry (~xs@user/xsperry) ()
[05:15:58] *** Joins: martin02 (~silas@141.84.69.76)
[05:16:00] *** Joins: xcmw (~textual@2603-6011-2200-f103-41a9-a2d8-3ebe-048b.res6.spectrum.com)
[05:16:02] *** Joins: |beowulf| (1000@gabilgathol.bandrate.org)
[05:16:14] *** Joins: domcornloan (~mike@user/feetwind)
[05:16:18] *** Joins: cocreature (~moritz@2a03:b0c0:3:d0::c8:f001)
[05:16:22] *** Joins: xsperry (~xs@user/xsperry)
[05:16:26] *** |beowulf| is now known as Guest8449
[05:16:54] *** Joins: tureba (~tureba@tureba.org)
[05:17:03] *** Joins: Flow (~none@gentoo/developer/flow)
[05:17:31] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[05:17:35] *** Joins: jesser[m] (~jessermat@2001:470:69fc:105::d5ae)
[05:17:55] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[05:18:50] *** Joins: justosophy[m] (~justosoph@2001:470:69fc:105::572f)
[05:19:09] *** Joins: Deide (~deide@user/deide)
[05:19:16] *** Joins: smichel17[m] (~smichel17@2001:470:69fc:105::2d32)
[05:19:21] *** Joins: Artem[m] (~artemtype@2001:470:69fc:105::75b)
[05:19:24] *** Joins: Arathorn (~arathorn@2001:470:69fc:105::1f)
[05:19:29] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[05:19:31] *** Joins: Jing (~hedgehog@115.207.57.60)
[05:19:40] *** Joins: fcortesi (~fcortesi@2001:470:69fc:105::f3a9)
[05:20:07] *** Quits: Jing (~hedgehog@115.207.57.60) (Client Quit)
[05:20:35] *** Joins: ParsaAlizadeh[m] (~lizadehma@2001:470:69fc:105::1:65a4)
[05:20:56] *** Joins: fgaz (~fgaz@2001:470:69fc:105::842)
[05:22:05] *** Joins: vysn (~vysn@user/vysn)
[05:25:33] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[05:26:01] <xcmw> Is there a comprehensive explanation of how HLS works?
[05:26:27] <xcmw> Not how to use HLS, but how it is designed.
[05:26:38] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:30:30] <ephemient> % ([] @(), [] @Char) -- EvanR: TypeApplications isn't just for functions
[05:30:30] <yahb> ephemient: ([],"")
[05:30:52] <EvanR> :t ('c', []) 
[05:30:53] <lambdabot> (Char, [a])
[05:31:00] <EvanR> % :t ('c', []) 
[05:31:00] <yahb> EvanR: (Char, [a])
[05:31:15] <EvanR> % :t ('c', []) @Int
[05:31:15] <yahb> EvanR: ; <interactive>:1:1: error:; * Cannot apply expression of type `(Char, [a0])'; to a visible type argument `Int'; * In the expression: ('c', []) @Int
[05:31:29] <EvanR> was my problem
[05:32:11] <EvanR> however, [] *is* a function right? xD
[05:32:23] <EvanR> oh, no
[05:33:37] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:dbd9:529d:8dc9:86b3) (Ping timeout: 240 seconds)
[05:34:02] <ephemient> > (('c',[]) :: forall a. (Char, [a])) @Int
[05:34:03] <lambdabot>  <hint>:1:37: error: parse error on input ‘@’
[05:34:10] <ephemient> % (('c',[]) :: forall a. (Char, [a])) @Int
[05:34:11] <yahb> ephemient: ('c',[])
[05:34:34] <EvanR> oh dang... so there is a difference between
[05:34:43] <EvanR> (Char,[a]) and forall a . (Char, [a])
[05:35:02] <ephemient> the bad thing about typeapplications is it's sensitive to how the type is spelled
[05:36:03] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:38:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:39:20] *** Joins: califax- (~califax@user/califx)
[05:43:00] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:43:01] *** califax- is now known as califax
[05:44:04] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[05:44:18] *** Joins: califax (~califax@user/califx)
[05:44:22] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[05:44:33] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:48:03] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77)
[05:48:14] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:48:34] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[05:49:41] *** Quits: mmhat (~mmh@55d4708c.access.ecotel.net) (Quit: WeeChat 3.4)
[05:51:09] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[05:51:41] *** Joins: burnsidesLlama (~burnsides@client-8-70.eduroam.oxuni.org.uk)
[05:52:40] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[05:52:40] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 250 seconds)
[05:55:43] *** Joins: neurocyte0917099 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[05:55:44] *** Quits: neurocyte0917099 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[05:55:44] *** Joins: neurocyte0917099 (~neurocyte@user/neurocyte)
[05:56:02] *** Quits: burnsidesLlama (~burnsides@client-8-70.eduroam.oxuni.org.uk) (Ping timeout: 240 seconds)
[05:56:08] *** Quits: xff0x (~xff0x@2001:1a81:5253:5900:d5e3:e4eb:c9c5:42b2) (Ping timeout: 250 seconds)
[05:56:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:56:57] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:f860:6cdd:6a70:803a) (Ping timeout: 240 seconds)
[05:57:37] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[05:57:37] *** neurocyte0917099 is now known as neurocyte091709
[05:58:05] *** Joins: xff0x (~xff0x@2001:1a81:5294:3100:2847:70a9:c956:fedc)
[05:58:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:58:32] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[05:59:12] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:6950:167e:fc87:eed1)
[06:01:04] *** Joins: vonfry (~user@113.74.134.52)
[06:02:59] *** Quits: Topsi (~Tobias@dyndsl-095-033-018-101.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[06:06:13] *** Quits: kn07_ (~kn07_@86.121.166.134) (Quit: Leaving)
[06:19:59] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[06:20:38] <Inst> wow, activating no implicit prelude is fun
[06:21:06] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Quit: ZZZzzz…)
[06:22:43] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[06:23:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[06:26:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[06:27:32] *** Quits: biog (~user1@static.39.160.132.142.clients.your-server.de) (Ping timeout: 240 seconds)
[06:27:47] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[06:27:57] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:28:58] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:32:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:37:25] *** Quits: wagle (~wagle@quassel.wagle.io) (Ping timeout: 240 seconds)
[06:37:47] *** Joins: wagle (~wagle@quassel.wagle.io)
[06:38:26] <EvanR> without Prelude how can you write Haskell Poetry
[06:39:33] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[06:42:48] *** Quits: Kaipi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[06:42:50] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[06:44:27] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[06:46:26] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[06:46:34] *** Joins: stiell_ (~stiell@gateway/tor-sasl/stiell)
[06:46:55] *** Joins: Merfont (~Kaiepi@156.34.47.253)
[06:50:36] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[06:52:56] *** Joins: jeremyn (~jeremyn@098-147-212-046.res.spectrum.com)
[06:53:45] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:59:45] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[07:01:12] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[07:02:11] *** Quits: khumba (~khumba@user/khumba) ()
[07:02:34] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:02:53] *** Quits: mud (~mud@user/kadoban) (Remote host closed the connection)
[07:06:46] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[07:08:30] *** Quits: td_ (~td@94.134.91.30) (Ping timeout: 250 seconds)
[07:10:25] *** Joins: td_ (~td@muedsl-82-207-238-062.citykom.de)
[07:19:54] *** Joins: pavonia (~user@user/siracusa)
[07:20:34] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.3)
[07:21:16] *** Joins: vysn (~vysn@user/vysn)
[07:21:49] *** Quits: vysn (~vysn@user/vysn) (Client Quit)
[07:25:54] *** Joins: mud (~mud@user/kadoban)
[07:28:16] *** Quits: xcmw (~textual@2603-6011-2200-f103-41a9-a2d8-3ebe-048b.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:30:44] *** Joins: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[07:30:44] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:35:06] *** Joins: vysn (~vysn@user/vysn)
[07:37:09] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[07:38:50] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:40:52] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:42:30] *** Quits: vonfry (~user@113.74.134.52) (Remote host closed the connection)
[07:43:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:43:10] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Quit: Leaving)
[07:43:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[07:49:57] *** Quits: vglfr (~vglfr@46.96.174.100) (Ping timeout: 256 seconds)
[07:58:50] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:e879:d91e:f7ac:a5c4)
[07:58:55] *** Quits: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b) (Remote host closed the connection)
[07:59:08] *** Joins: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b)
[08:08:25] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[08:14:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[08:26:36] *** Quits: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b) (Remote host closed the connection)
[08:26:49] *** Joins: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b)
[08:30:07] *** Joins: random_ (~random@185.219.68.251)
[08:30:22] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[08:33:01] *** Quits: random__ (~random@185.219.68.251) (Ping timeout: 256 seconds)
[08:33:55] *** Joins: spaceseller (~spacesell@31.147.205.13)
[08:35:15] *** Quits: spaceseller (~spacesell@31.147.205.13) (Remote host closed the connection)
[08:36:32] *** Joins: ksqsf (~user@2001:da8:d800:611:4986:699c:1eb2:95ac)
[08:49:02] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 250 seconds)
[08:49:14] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[08:55:17] *** Quits: jrm (~jrm@156.34.249.199) (Ping timeout: 240 seconds)
[08:55:38] *** Joins: random__ (~random@185.219.68.251)
[08:58:31] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 256 seconds)
[08:58:49] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:01:07] *** Joins: swistak (~swistak@185.21.216.141)
[09:03:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:09:24] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 250 seconds)
[09:12:54] *** Joins: cheater (~Username@user/cheater)
[09:14:40] *** Quits: yauhsien_ (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:15:13] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[09:15:58] *** Joins: fef (~thedawn@user/thedawn)
[09:17:47] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[09:24:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[09:25:10] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:25:14] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[09:25:43] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[09:30:12] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[09:30:45] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[09:33:17] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[09:35:37] *** Joins: random_ (~random@185.219.68.251)
[09:38:02] *** Quits: random__ (~random@185.219.68.251) (Ping timeout: 240 seconds)
[09:43:57] *** Joins: antony (~The_viole@203.77.49.232)
[09:45:01] *** Quits: antony (~The_viole@203.77.49.232) (Client Quit)
[09:47:32] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[09:48:49] *** Quits: drdo (~drdo@144.172.69.89) (Quit: Ping timeout (120 seconds))
[09:49:06] *** Joins: drdo (~drdo@roach0.drdo.eu)
[09:50:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[09:51:20] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:56:20] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[09:56:52] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[10:02:51] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:e879:d91e:f7ac:a5c4) (Remote host closed the connection)
[10:03:41] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:8996:1172:d4fe:5f94)
[10:04:37] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[10:05:24] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[10:09:38] *** Quits: ksqsf (~user@2001:da8:d800:611:4986:699c:1eb2:95ac) (Ping timeout: 250 seconds)
[10:16:29] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[10:31:33] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:32:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[10:34:57] *** Quits: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953) (Ping timeout: 240 seconds)
[10:35:32] *** Joins: yaroot (~yaroot@2409:12:ac0:2300:680e:dbff:fe1e:4953)
[10:41:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[10:41:10] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[10:41:10] *** Joins: wroathe (~wroathe@user/wroathe)
[10:42:08] *** Joins: random__ (~random@185.219.68.251)
[10:44:19] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[10:44:44] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 250 seconds)
[10:45:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[10:45:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[10:45:46] *** Quits: bollu (~bollu@159.65.151.13) (Quit: Ping timeout (120 seconds))
[10:46:07] *** Joins: bollu (~bollu@159.65.151.13)
[10:48:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[10:49:05] *** Quits: raym (~raym@user/raym) (Remote host closed the connection)
[10:49:24] *** Joins: raym (~raym@user/raym)
[10:55:52] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[10:57:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:58:29] *** Quits: akurilin_ (uid322841@id-322841.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[10:58:32] *** Joins: jeremyn_ (~jeremyn@098-147-212-046.res.spectrum.com)
[10:59:25] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[10:59:54] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:01:07] *** Joins: random_ (~random@185.219.68.251)
[11:01:29] *** Quits: jeremyn (~jeremyn@098-147-212-046.res.spectrum.com) (Ping timeout: 256 seconds)
[11:02:47] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-145.dynamic.mnet-online.de)
[11:03:45] *** Quits: random__ (~random@185.219.68.251) (Ping timeout: 256 seconds)
[11:03:57] *** Quits: shapr (~user@2601:7c0:c37c:46d0:c5e9:5422:b6fa:e10b) (Ping timeout: 240 seconds)
[11:05:27] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[11:08:28] *** Joins: img (~img@user/img)
[11:08:54] *** Joins: vglfr (~vglfr@88.155.50.55)
[11:13:31] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca)
[11:16:53] *** Quits: jeremyn_ (~jeremyn@098-147-212-046.res.spectrum.com) (Quit: Leaving)
[11:17:42] *** Joins: Deep-Thought (~quantum@2001:8003:7937:cf01:485e:bf6c:57df:1e44)
[11:18:19] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[11:19:36] *** Parts: Deep-Thought (~quantum@2001:8003:7937:cf01:485e:bf6c:57df:1e44) (Leaving)
[11:25:39] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[11:27:30] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[11:28:19] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:29:31] *** Quits: phma (~phma@host-67-44-209-85.hnremote.net) (Read error: Connection reset by peer)
[11:31:00] *** Joins: phma (phma@2001:5b0:215a:8eb8:a1f:83c7:e862:533e)
[11:31:42] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:8996:1172:d4fe:5f94) (Remote host closed the connection)
[11:32:32] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[11:34:38] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[11:38:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[11:41:52] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[11:50:12] *** Joins: bastelfreak (~bastelfre@basteles-bastelknecht.bastelfreak.org)
[11:54:49] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[11:59:21] *** Joins: Techcable (~Techcable@168.235.93.147)
[12:04:19] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[12:05:25] *** Arsen_ is now known as Arsen
[12:08:42] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:16:57] *** Joins: notzmv (~zmv@user/notzmv)
[12:18:43] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[12:23:55] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[12:26:53] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 256 seconds)
[12:30:17] *** Quits: AlainJourez[m] (~sherekahn@2001:470:69fc:105::1:4a71) (Quit: You have been kicked for being idle)
[12:30:17] *** Quits: Ollie[m] (~ollieocha@2001:470:69fc:105::41a5) (Quit: You have been kicked for being idle)
[12:30:19] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:31:45] *** Joins: ouestbillie (~gallup@80.194.85.249)
[12:31:45] *** Quits: ouestbillie (~gallup@80.194.85.249) (Client Quit)
[12:32:29] *** Joins: ksqsf (~user@134.209.106.31)
[12:35:26] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:37:02] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[12:37:14] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[12:38:16] *** Joins: mastarija (~mastarija@2a05:4f46:e0e:5000:9df5:6d4:ee5d:cc89)
[12:41:27] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:9df5:6d4:ee5d:cc89) (Client Quit)
[12:41:47] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[12:42:25] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[12:44:51] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[12:45:02] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-204.dsl.bell.ca) (Ping timeout: 240 seconds)
[12:45:40] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Remote host closed the connection)
[12:46:21] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[12:47:39] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:39] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:42] *** allbery_b is now known as geekosaur
[12:47:56] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[12:48:37] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[12:48:39] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:49:09] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[12:50:52] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[12:52:04] *** Joins: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th)
[12:53:04] *** Quits: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th) (Client Quit)
[12:55:27] *** Joins: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th)
[12:57:11] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca)
[13:00:48] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 250 seconds)
[13:01:30] *** Quits: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:01:53] *** Joins: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th)
[13:03:06] *** Joins: atwm__ (~andrew@19-193-28-81.ftth.cust.kwaoo.net)
[13:04:11] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[13:04:33] *** Quits: atwm__ (~andrew@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[13:05:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-218.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:05:49] *** Joins: atwm49 (~atwm@2606:54c0:2780:c0::40:16)
[13:06:25] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Quit: Palaver https://palaverapp.com)
[13:06:42] *** atwm49 is now known as atwm
[13:07:18] *** Quits: da39a3ee5e6b4b0d (~textual@mx-ll-171.5.160-10.dynamic.3bb.co.th) (Ping timeout: 250 seconds)
[13:07:27] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca)
[13:07:28] *** Quits: atwm (~atwm@2606:54c0:2780:c0::40:16) (Client Quit)
[13:07:49] *** Joins: atwm (~atwm@2606:54c0:2780:c0::40:16)
[13:08:25] *** Quits: emad (~emad@102.42.146.250) (Ping timeout: 256 seconds)
[13:08:43] *** Quits: atwm (~atwm@2606:54c0:2780:c0::40:16) (Client Quit)
[13:09:58] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[13:12:17] *** Quits: monochrom (trebla@216.138.220.146) (Ping timeout: 252 seconds)
[13:19:24] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:20:58] *** Joins: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374)
[13:22:00] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[13:25:31] *** dunj3_ is now known as dunj3
[13:26:48] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-130.dsl.bell.ca) (Ping timeout: 250 seconds)
[13:27:16] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:30:42] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc)
[13:33:55] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:34:32] *** Joins: mmhat (~mmh@55d4d469.access.ecotel.net)
[13:34:36] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 250 seconds)
[13:35:23] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[13:36:00] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[13:47:37] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[13:49:48] *** Joins: euouae (~euouae@user/euouae)
[13:50:22] <euouae> tomsmeding that was an interesting video explaining finger trees! (https://www.youtube.com/watch?v=ip92VMpf_-A) the only part I didn't understand was the explanation of O(1) amortization
[13:51:07] <euouae> the only example of amortization I understand (from wikipedia) is of dynamic arrays that double their size when needed; it's an O(n) operation required every n steps and thus an average of O(1) (amortized)
[13:51:51] <euouae> perhaps the paper explains that part better, I should look into it
[13:52:49] <tomsmeding> euouae: I didn't watch the video, only read the paper at some point; I'm not sure I got the amortisation argument either, but I don't remember well. The paper is well-written though, so perhaps worth a look.
[13:55:56] <euouae> got it, thanks
[14:00:32] *** Quits: vglfr (~vglfr@88.155.50.55) (Ping timeout: 240 seconds)
[14:00:54] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:8153:e826:3459:f646) (Read error: Connection reset by peer)
[14:05:48] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[14:09:45] *** Quits: zeikuzeta (~zeta@2a01cb0c04a54500f006e2422b3c8b06.ipv6.abo.wanadoo.fr) (Quit: WeeChat 3.4)
[14:10:08] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[14:10:33] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[14:11:12] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:12:02] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[14:20:34] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[14:21:35] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:22:54] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[14:23:34] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[14:24:11] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[14:25:01] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[14:25:10] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:25:19] *** Joins: vglfr (~vglfr@88.155.50.55)
[14:25:29] *** Quits: phma (phma@2001:5b0:215a:8eb8:a1f:83c7:e862:533e) (Read error: Connection reset by peer)
[14:26:54] *** Joins: phma (phma@2001:5b0:2172:f858:cd4e:e80c:6117:de1e)
[14:27:27] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[14:31:24] *** Joins: alx741 (~alx741@157.100.93.160)
[14:32:00] *** Joins: kuribas (~user@ptr-25vy0i98u111h07lsuf.18120a2.ip6.access.telenet.be)
[14:33:52] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:34:32] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[14:40:24] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[14:41:19] *** Joins: cosimone (~user@93-44-186-112.ip98.fastwebnet.it)
[14:41:34] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:46:53] *** Joins: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net)
[14:47:53] *** Joins: toastloop (~toastloop@user/toastloop)
[14:51:36] <kuribas> I made a parser combinator in clojure, but without limiting backtracking.
[14:51:51] <kuribas> Wouldn't that be only a problem if the language is ambiguous?
[14:52:37] *** Quits: teddyc (theodorc@cassarossa.samfundet.no) (Quit: WeeChat 2.3)
[14:53:39] <tomsmeding> isn't the reason backtracking is avoided at all, usually just performance?
[14:53:53] <tomsmeding> not having to keep track of where to backtrack to lowers the constant factor
[14:54:09] <kuribas> well, combinatory explosion is a performance problem.
[14:54:18] <tomsmeding> assuming the semantics of the parser doesn't change :p
[14:54:36] <tomsmeding> like, if you parser actually _uses_ backtracking, then you can't just remove support for backtracking from your parser framework
[14:55:09] <tomsmeding> my first statement was about parser framework implementations, not parsers
[14:55:55] <kuribas> to get backtracking you need to explicitly enable it with the "try" combinator.
[14:56:03] <tomsmeding> so, parsec style?
[14:56:08] <tomsmeding> sounds good
[14:57:06] <kuribas> no, my parser doesn't need try...
[14:57:12] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[14:57:21] <kuribas> it will backtrack on "choice".
[14:57:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[14:58:21] *** Joins: emad (~emad@156.214.182.157)
[14:58:25] *** Quits: toastloop (~toastloop@user/toastloop) (Quit: Leaving)
[14:58:54] <kuribas> tomsmeding: right, I made a framework for parsers in clojure.
[14:59:01] <kuribas> then implemented a parser on top of it.
[14:59:14] <kuribas> as I found the existing parsers in clojure quite poor.
[14:59:27] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[14:59:35] <kuribas> dispite multiple sources claiming "instaparse is the best parser library of any language". :-P
[14:59:44] <euouae> nice 
[14:59:54] <kuribas> makes me wonder what clojure guys smoke :-P
[15:02:51] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[15:03:26] *** Joins: teddyc (theodorc@cassarossa.samfundet.no)
[15:05:37] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[15:05:53] <tomsmeding> kuribas: re your original question about ambiguous languages: there are non-ambiguous languages where you nevertheless need unlimited lookahead (i.e. backtracking) in order to parse them correctly
[15:06:23] <kuribas> are they pathological?
[15:06:28] <geekosaur> isn't haskell one of them these days?
[15:07:03] <tomsmeding> kuribas: haskell, c++ :p
[15:07:16] <tomsmeding> some might call c++ pathological
[15:07:35] <kuribas> I would definitely call c++ pathological :)
[15:07:35] <tomsmeding> also English
[15:09:02] *** Joins: echoreply (~echoreply@45.32.163.16)
[15:09:22] <tomsmeding> wouldn't those clojure people just be monolingual
[15:09:24] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[15:09:46] <tomsmeding> if you don't know better, then what you know is by definition the best
[15:10:54] <kuribas> maybe they worked with some complicated parser generator in another language.
[15:11:17] <euouae> or just marketing
[15:11:24] <euouae> no.1 ... no.1 what?
[15:11:41] <tomsmeding> "Improved design!"
[15:12:27] *** Joins: toastloop (~toastloop@user/toastloop)
[15:12:28] *** Quits: toastloop (~toastloop@user/toastloop) (Excess Flood)
[15:12:31] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:15:04] <Swahili> Q: Getting started, trying to install Brittany code formatter and it complains about dependency versions. For example "ghc-8.10.7 from stack configuration does not match >=9.0.1 && <9.1". How to install an older version of Brittany so that is compatible to my stack? I've just installed everything through the recommended "ghcup". Thank you!
[15:15:41] <tomsmeding> Swahili: how area you trying to install brittany?
[15:15:47] <tomsmeding> s/area/are/
[15:16:02] <Swahili> tomsmeding: thanks for looking! Via the cli, on macOS as in> stack install brittany
[15:16:30] <Swahili> https://paste.sh/Tj9CrCkD#kebgByX4GxDlXCDe8FpPUGBf
[15:17:28] <tomsmeding> seems brittany is not in the stackage repositories, so stack pulls it from hackage directly, and doesn't make an effort to select a working version or something
[15:17:35] <Swahili> I'd like to stay in ghc version 8.x, as that's what I got by default; and based in my experience, I rather have something stable when learning.
[15:17:37] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[15:18:14] <tomsmeding> Swahili: what is the resolver in your ~/.stack/global-project/stack.yaml ?
[15:18:21] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[15:18:28] <geekosaur> 9.0.2 is stable at this point, but yes, 8.10.7 is still the recommended version
[15:18:35] <Swahili> tomsmeding: resolver: lts-18.21
[15:19:08] <Swahili> geekosaur: thanks for mentioning! For a beginner, I'll stick with 8.x, to avoid having to troubleshoot, just in case.
[15:19:26] <gentauro> finally got the `HLS` + `emacs` combo to work once again (Y) -> https://imgur.com/a/FidqNbA (Apparently it's no longer enough to just to install: `lsp-mode`, `lsp-ui` and `lsp-haskell`)
[15:20:13] <geekosaur> stack install brittany-0.13.1.2 ?
[15:20:22] <Swahili> geekosaur: I'll try ;)
[15:20:23] * tomsmeding was typing the same as geekosaur
[15:20:25] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[15:20:26] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[15:20:26] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[15:20:29] <geekosaur> (later versions dropped support for ghc < 9.0)
[15:21:15] <gentauro> geekosaur: I had issues with `brittany` (not found on `stackage`). What's the deal with that package?
[15:21:17] <Swahili> @geekosaur @tomsmeding got an error https://paste.sh/l2UrUoa3#Gl7vuRdePjGKbzTKY_j2LdbF 
[15:21:17] <lambdabot> Unknown command, try @list
[15:21:33] <euouae> gentauro I think for me it works out of the box using doom-emacs
[15:21:46] <euouae> I could be wrong
[15:21:46] <Swahili> I'll add the suggested line to the stack.yaml
[15:21:50] <gentauro> euouae: hmmmm
[15:21:51] <tomsmeding> Swahili: try adding two lines to that .stack/global-project/stack.yaml file: 'extra-deps:' and '- data-tree-print-0.1.0.2@sha256:d845e99f322df70e0c06d6743bf80336f5918d5423498528beb0593a2afc1703,1620'
[15:22:15] <tomsmeding> gentauro: what issues? :p
[15:22:31] <gentauro> tomsmeding: like "not existing" :P
[15:22:31] <tomsmeding> it's indeed not on stackage, so stack just pulls the newest version from hackage, which predictably fails
[15:22:40] <gentauro> xD
[15:22:40] <tomsmeding> that's an issue with stackage, not brittany
[15:22:42] <tomsmeding> use cabal :p
[15:23:03] <geekosaur> gentauro,  the onkly issues I know of with brittany are (a) not in stackage (b) dropped support got ghc < 9 in recent versions (0.14 +)
[15:23:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[15:23:30] <Swahili> tomsmeding: geekosaur going to run it again, here's my stack.yaml https://paste.sh/VdNbhWBP#nAH_9tnqgbeKeTCCHvviSqsM 
[15:23:51] <Swahili> By the way, ghcup installed cabal, if this is solved by using cabal package manager I can do that?
[15:23:57] <tomsmeding> Swahili: don't need the indent before the - ; if it breaks, try removing the indent
[15:24:13] <geekosaur> this is part of why I don't like stack, as soon as something isn't in stackage you get to jump through hoops
[15:24:22] <gentauro> geekosaur: that could be. I'm still on `version 8.10.7`
[15:24:39] <tomsmeding> Swahili: well 'cabal install brittany' will work, but will build it using your ghcup-installed ghc, not your stack-installed ghc
[15:24:53] <geekosaur> cabal should automatically pick an older version after seeing the base constraint
[15:25:16] <tomsmeding> also cabal and stack both cache already-built libraries, but separately, so from a disk usage (and compile time) standpoint, you might want to choose one and stick with that
[15:25:23] <tomsmeding> otherwise, should work
[15:26:15] <Swahili> tomsmeding: Ok :) The command is running, seems to be compiling> stack install brittany-0.13.1.2
[15:26:26] <tomsmeding> cool
[15:27:21] <Swahili> I kept the version that I've been recommended. I'd like to understand why and how, so I'm installing the 0.13.1.2 because that's the version that supports ghc 8.x?
[15:27:28] <geekosaur> yes
[15:27:42] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 250 seconds)
[15:27:44] <geekosaur> they just dropped support for everything else in 0.14 and later
[15:27:50] <geekosaur> ghc9 only
[15:28:06] <geekosaur> I thought that was pretty abrupt but I'm not the brittany maintainer
[15:29:06] <Swahili> geekosaur: Ok :) Where did you people get the 0.13.1.2 version from? The repo https://github.com/lspitzner/brittany/releases ? Or a better place to check dependencies?
[15:29:16] <tomsmeding> @hackage brittany
[15:29:16] <lambdabot> https://hackage.haskell.org/package/brittany
[15:29:32] <geekosaur> then click back in the version list at the upper right
[15:29:34] <Swahili> Thank you very much! 
[15:29:57] <geekosaur> escepot I knew already to look at the last in the 0.13 series because I saw the announcement for 0.14 that support for ghc < 9 had been dropped
[15:29:57] <tomsmeding> (per version you see the 'base' version range, which is the relevant thing here)
[15:30:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:30:36] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[15:30:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:31:17] <Swahili> The installation process went well it seems, I'll now test. I'm also helping a friend, who's a math teacher to learn haskell, my worries is the troubleshooting around the dev experience. He never coded before but he is into math, so I think he has way more advantages then I do when learning haskell. Hope it goes well!
[15:34:01] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:34:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[15:35:07] *** Quits: wre^ (~wre@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[15:38:11] *** Joins: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net)
[15:38:34] *** Quits: atwm (~atwm@19-193-28-81.ftth.cust.kwaoo.net) (Client Quit)
[15:38:58] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[15:39:40] <kuribas> the dev environment is the least pleasant part of haskell.
[15:40:16] <kuribas> off any language actually, but there is just much less $$$ in tooling in haskell.
[15:41:00] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[15:41:00] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[15:41:00] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[15:41:13] <euouae> Myself I found it very nice
[15:41:24] <kuribas> the tooling?
[15:41:39] <euouae> Haddock is awesome, great unit testing, cabal and stack work nice, of course unstable abi is scary
[15:41:54] <euouae> I don't know, yeah I thought it's nice
[15:41:57] <kuribas> euouae: those are fine.
[15:42:07] <Swahili> kuribas: that makes sense, it's a pity though.
[15:42:16] <euouae> OK I don't know what you mean then kuribas 
[15:42:30] <geekosaur> yeh, my biggest issue with haskell is how fast the language changes
[15:42:35] <kuribas> euouae: until you get into a problem.
[15:42:40] <geekosaur> tolling is okay but then I don';t ask much of it
[15:42:57] <geekosaur> don't much like IDEs tossing bling in my face all the time, so
[15:43:03] <kuribas> geekosaur: you mean extensions?
[15:43:33] <geekosaur> more than just extensions. TypeApplications even when turned off changes parsing a bit (look up how it interacts with as-patterns)
[15:44:12] <geekosaur> and in 9.x there's a wholesale change in parsing that more or less requires spaces between tokens, because every extension had had its own way of dealing with conflicts like that as-pattern one
[15:44:21] <geekosaur> or bang patterns or negation or …
[15:44:41] <Swahili> My first impression is that Hlint, doesn't seem to catch everything; For example, I created a hello-world.hs file and wrote some gibberish like> 34hdsjhj43hjewds..+44 and it's fine, no hints. Is that valid syntax?
[15:45:11] <geekosaur> hlint is not a syntax engine, it is a semantic engine
[15:45:32] <geekosaur> if it doesn';t understand it, it just assumes an extension it doesn;t know is in play and goes silent
[15:45:35] <maerwald[m]> geekosaur: well, we probably going to break base for less interesting reasons than GHC extensions :p
[15:45:55] <maerwald[m]> Stability seems of low concern in general 
[15:48:18] <Swahili> geekosaur: thought linters did a bit more work and checked the syntax too.
[15:48:58] <euouae> what's the point of checking haskell syntax though?
[15:49:00] <Swahili> geekosaur: guess that's more of a language server job
[15:49:00] <geekosaur> Swahili, linters do check some syntax since they need to know what they're looking at. but syntax is sometimes a wobbly thing, especially in Haskell
[15:49:17] <geekosaur> we have so many extensions that change syntax
[15:49:26] <Swahili> Yeh, seems to be better just integrated the language servia in vscode, via an addon
[15:54:19] <xerox> anybody knows what's :: in this context? https://i.imgur.com/fDDJ9R0.png
[15:55:04] <xerox> if Γ entails M:A, then what
[15:55:18] <euouae> why not give more context?
[15:58:17] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[15:58:51] <tomsmeding> xerox: probably list cons
[15:58:59] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[15:59:06] <tomsmeding> hm, that makes no sense with the types
[15:59:17] <tomsmeding> oh, a type ascription
[15:59:19] <xerox> oh I get it, it's part of the simply typed lambda calculus they have defined
[15:59:23] <Swahili> Q: What's the most popular code formatter for Haskell? I've assumed Brittany because of google, but I have not investigated yet. Looking at the Haskell language server document, there are others such as the default ormolu (not sure if I have it installed). Is there a convention in the haskell community?
[15:59:24] <xerox> indeed
[15:59:27] <tomsmeding> % :t 4 :: Int  -- xerox 
[15:59:27] <yahb> tomsmeding: Int
[15:59:36] <xerox> 'M :: A' is the thing of type A
[15:59:40] <xerox> well spotted
[15:59:49] <euouae> Swahili some don't like to format their code with a formatter
[15:59:52] <tomsmeding> Swahili: there is no most popular
[15:59:53] <maerwald[m]> Swahili: no
[16:00:02] <tomsmeding> and some have this opinion https://twitter.com/comerijn/status/1257804634833420292
[16:00:17] <Swahili> Lol :)
[16:00:31] <xerox> tab key and space key are extremely popular
[16:00:49] <tomsmeding> tab key mostly used to insert a bunch of spaces
[16:01:06] * xerox nods
[16:01:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:6950:167e:fc87:eed1) (Ping timeout: 240 seconds)
[16:01:27] <Swahili> The tweet makes sense, I must say. But when working with other people, is a bit complicated. It's ok to have a convention. Thanks for the suggestions!
[16:01:51] <euouae> In big projects there should be some document outlining the style, e.g. like the linux kernel
[16:02:33] <maerwald[m]> Swahili: consistency in formatting helping reading speed of code is a nonsense tale
[16:02:42] <euouae> but even there they're not strict about it, as the ideas involved are complicated and presentation is more important than consistency 
[16:03:39] <Swahili> indeed
[16:03:40] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[16:04:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[16:05:14] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:05:47] *** Quits: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[16:10:26] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[16:11:08] *** Guest4269 is now known as mal
[16:11:13] *** mal is now known as Guest2660
[16:13:52] <Swahili> Sorry about the tabs vs space, but quickly... change my editor to turn tabs to spaces, is that ok? just found this http://urchin.earth.li/~ian/style/haskell.html
[16:15:18] *** Guest2660 is now known as lieven
[16:15:39] *** Joins: jrm (~jrm@156.34.173.250)
[16:15:41] <yushyin> Swahili: spaces are preferred in haskell source code, so it's ok
[16:15:47] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[16:15:56] <Swahili> yushyin: awesome!
[16:18:31] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[16:19:50] *** Joins: rusrushal13 (~rusrushal@2409:4056:2005:3f65:c712:45d0:4f32:57a0)
[16:21:32] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-145.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[16:22:05] *** Joins: max22- (~maxime@2a01cb0883359800f2c7b6135c65b0c9.ipv6.abo.wanadoo.fr)
[16:29:56] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:32:53] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Quit: Leaving)
[16:34:38] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[16:36:32] *** Quits: max22- (~maxime@2a01cb0883359800f2c7b6135c65b0c9.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:39:13] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:39:23] *** Joins: LimeGolem (~LimeGolem@82.40.121.143)
[16:40:12] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:42:08] <Swahili> Q: What's the workflow like when writing Haskell, I'm thinking about how to get output by watching the source files, compiling and running automatically. Are there tools around this or is this something I need to do own my own? Or in other words, how do you people do?
[16:42:40] <polyphem> Swahili: ghcid
[16:42:53] <Swahili> polyphem: nice! thanks for suggesting, I'll check now!
[16:44:10] <Swahili> Doing this without much thought, so I did> stack install ghcid
[16:44:44] <Swahili> the reason is that I've done so, for other packages. Which then means, that if I want to use ghcid, I can only do so, if I execute my code by running the stack command?!
[16:45:44] <Swahili> Interesting, its added into my PATH. So, I run the ghcid locally.
[16:46:14] <Swahili> So, what exactly is stack tooling for? Thought is a sort of sandbox.
[16:47:08] <geekosaur> it's moe than a sandbox. the real point of stack is integration with stackage, which is a curated collection of packages known to work together with a specific ghc version
[16:47:13] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:47:28] <geekosaur> so if you stick to stackage for everything then it all Just Works™
[16:48:10] <geekosaur> but things start to fall apart as soon as you need something outside of stackage (not counting your own local packages, which presumably you will write to work with the same stackage snapshot)
[16:48:30] <Swahili> geekosaur: thank you! So, effectively, I should then run ghcid in stack, even though I have it in my local environment. From what I can tell, that'd be> stack exec ghcid foobar.hs
[16:48:40] <geekosaur> stack exec ghcid ...
[16:49:01] <polyphem> if you stack install a executable (ghcid) it gets added to your users path and you can use it 
[16:49:09] <Swahili> Althougy, I could do so by running locally> ghcid foobar.hs, but this could fail if theres need for some weird dependency chain etc. In Stack everything should just work!
[16:49:27] <Swahili> Is this correct, did I get it right?
[16:50:47] <geekosaur> stack holds all its builds inside itslef, so if you just run ghcid it probably won't be able to build your package. that's what "stack exec" is for, it'll expose the package database stack uses to build your program(s)
[16:51:06] <Swahili> Thank you :)
[16:51:31] <geekosaur> part of the sandboxing aspect of stack (and cabal)
[16:52:16] <geekosaur> stack and cabal take roughly opposite approaches to what and how they sandbox, but both do sandbooxing so you don;t run into problems with multiple projects that have different dependency requirements
[16:53:22] <Swahili> Why does stack maintainers decide to add to the user path, the stack installs, if the stack sandboxing would avoid common issues?
[16:53:32] <Swahili> As a nice to have?
[16:54:01] <Swahili> Suppose that things such as a code formatter, can be useful not just inside the stack environment. Is that it?
[16:55:12] <geekosaur> yes. plus if all you need is an executable (like ghcid or brittany) then it's pretty silly to add its whole build plan to yours
[16:55:31] <Swahili> geekosaur: thank you!
[16:55:35] <geekosaur> so "export" the executable and then you can use it wherever
[16:59:08] *** Joins: __monty__ (~toonn@user/toonn)
[17:02:41] *** Joins: thcp (~thadeu_de@189.34.167.124)
[17:03:07] *** Quits: LimeGolem (~LimeGolem@82.40.121.143) (Quit: Client closed)
[17:03:37] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[17:08:48] *** Quits: thcp (~thadeu_de@189.34.167.124) (Quit: leaving)
[17:10:34] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[17:11:49] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[17:21:05] *** Joins: thcp (~thadeu_de@189.34.167.124)
[17:22:18] *** Quits: thcp (~thadeu_de@189.34.167.124) (Quit: leaving)
[17:22:43] *** Joins: thcp (~thadeu_de@189.34.167.124)
[17:22:47] *** Joins: LimeGolem (~LimeGolem@82.40.121.143)
[17:29:38] *** Quits: thcp (~thadeu_de@189.34.167.124) (Quit: leaving)
[17:30:37] *** Joins: thcp (~thadeu_de@189.34.167.124)
[17:32:32] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[17:35:02] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[17:35:54] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d87e:60ce:1d28:e735:a5fe)
[17:36:12] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[17:36:50] *** Quits: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67) (Quit: Leaving)
[17:41:00] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[17:41:24] *** Quits: rusrushal13 (~rusrushal@2409:4056:2005:3f65:c712:45d0:4f32:57a0) (Ping timeout: 256 seconds)
[17:43:28] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:d87e:60ce:1d28:e735:a5fe) (Quit: Textual IRC Client: www.textualapp.com)
[17:43:34] *** Joins: biog (~user1@static.39.160.132.142.clients.your-server.de)
[17:44:38] *** Quits: neurocyte091709 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[17:47:21] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:49:20] *** Joins: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de)
[17:49:21] *** Quits: neurocyte091709 (~neurocyte@IP-185189140032.dynamic.medianet-world.de) (Changing host)
[17:49:21] *** Joins: neurocyte091709 (~neurocyte@user/neurocyte)
[17:49:26] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[17:53:33] <lechner> Hi, is ScottyT here a type or a type class, please?    https://hackage.haskell.org/package/scotty-0.12/docs/Web-Scotty-Trans.html#v:scottyT
[17:53:59] <geekosaur> a type
[17:54:25] <geekosaur> typeclasses are declared with "class", not with "::"
[17:55:01] <geekosaur> (more correctly with "data" but you'd have to click the "Source" link to see that)
[17:55:36] <lechner> Is this part of it a type class? (before the =>)     (Monad m, MonadIO n)
[17:55:47] <geekosaur> yes
[17:57:05] <hpc> and for completeness, scottyT (what was linked) is a function
[17:57:14] <hpc> click on ScottyT in the type to get its definition
[17:57:31] <hpc> :P
[17:59:06] <lechner> what about this scottyT?   https://hackage.haskell.org/package/scotty-0.12/docs/Web-Scotty-Internal-Types.html#t:ScottyT
[17:59:28] <hpc> yep, that's the type
[17:59:39] <hpc> identifiers in haskell are case-sensitive, so scottyT and ScottyT are very different things
[17:59:47] <lechner> whoops
[18:00:34] <lechner> is the lower-case scottyT an "instance"?
[18:00:52] <geekosaur> it's just a function
[18:01:28] <geekosaur> instances are declared with "instance" and don't have names;p they have types
[18:01:40] <geekosaur> s/p//
[18:01:53] <lechner> can the scottyT function name be reused for other type classes?
[18:02:00] <geekosaur> no
[18:02:13] <hpc> scottyT or ScottyT?
[18:02:23] <lechner> what is the point of the constraint?
[18:02:29] <lechner> scottyT
[18:02:32] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[18:02:53] <geekosaur> it's not even a method, just an ordinary funxtion (see https://hackage.haskell.org/package/scotty-0.12/docs/src/Web.Scotty.Trans.html#scottyT)
[18:03:02] <hpc> (Monad m, MonadIO n) lets m and n be polymorphic, but you can still use (>>=) and liftIO and such in that function
[18:03:04] <geekosaur> s/x/c/
[18:03:27] <hpc> like if i wrote foo :: Num a => a -> a
[18:03:33] <hpc> a could be Int, Double, whatever
[18:03:38] <hpc> as long as it's number-y
[18:03:44] <lechner> no worries about typos please. i have bigger issues
[18:03:53] <hpc> and in the definition of foo i get to use addition and such
[18:04:18] <hpc> but i can't use something like floor, which would be valid if it was Double but not if it was Int
[18:04:21] <hpc> :t floor
[18:04:22] <lambdabot> (RealFrac a, Integral b) => a -> b
[18:04:25] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:04:44] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:05:05] <hpc> so you can use whatever m you want, as long as there's "instance Monad ThatParticularM" somewhere else
[18:06:20] <geekosaur> "i have bigger issues" perhaps explain your issue instead of trying to work up to it form the bottom?
[18:06:27] <geekosaur> *from
[18:07:51] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:09:45] <lechner> well, aside from my struggles of nomenclature, I would like to add hasql database operations to this scotty router (line 39)          https://paste.tomsmeding.com/jaEOaCLj     
[18:11:10] <lechner> i'm staring at this     https://bendyworks.com/blog/authentication-via-haskell
[18:11:31] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[18:13:44] <lechner> i think i have to pass in an (open?) connection via scottyT
[18:14:41] <lechner> this is for my open-source website   lintian.debian.org
[18:14:42] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:5143:664b:aeb1:9527)
[18:15:05] *** Quits: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Client Quit)
[18:17:32] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[18:23:32] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Remote host closed the connection)
[18:24:51] <euouae> lechner e.g. you can go here, https://hackage.haskell.org/package/scotty-0.12 and type `s` followed by `scottyT` to see what it is
[18:27:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:27:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:27:59] *** Joins: wroathe (~wroathe@user/wroathe)
[18:28:26] <euouae> lechner, and maybe this example will help you, https://github.com/err0r500/realworld-app-simple-haskell 
[18:29:04] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[18:29:39] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[18:29:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:32:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:34:40] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[18:35:00] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Changing host)
[18:35:00] *** Joins: some02 (~cat@user/sudden)
[18:35:12] *** some02 is now known as sudden
[18:35:27] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:36:37] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:37:07] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[18:37:54] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[18:39:44] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:39:53] *** Joins: mbuf (~Shakthi@122.178.176.76)
[18:41:51] *** Joins: fef (~thedawn@user/thedawn)
[18:44:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:44:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:44:26] *** Joins: wroathe (~wroathe@user/wroathe)
[18:45:32] *** Quits: cosimone (~user@93-44-186-112.ip98.fastwebnet.it) (Remote host closed the connection)
[18:46:42] <polyphem> i am writing this library, and have some typeclasses wich capture interfaces of components that should work together, now i want to add logging with co-log, that is written in final-tagless style , so i think i will "convert" my classes also to final-tagless style to use co-log. In final-taglass libraries should one provide a "default Monad/MonadT to that takes default config environment" ?
[18:49:48] <polyphem> i guess so 
[18:51:00] <geekosaur> lechner, re passing in a datanbase connection, note that "n" is different from "m", and it's part of the "result". "scottyT" effectively runs within some other monad "n" which is presumably your database's monad
[18:51:17] *** Quits: LimeGolem (~LimeGolem@82.40.121.143) (Quit: Client closed)
[18:51:57] <geekosaur> and the only constraint it places on that monad is "MonadIO" so that it can do web I/O
[18:52:11] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[18:53:35] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:54:38] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[18:59:45] *** Quits: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[19:00:12] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:00:30] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:05:16] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[19:06:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:07:04] *** Joins: yauhsien (~yauhsien@61-231-24-192.dynamic-ip.hinet.net)
[19:08:37] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[19:09:32] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 240 seconds)
[19:10:27] *** Joins: FragByte (~christian@user/fragbyte)
[19:12:31] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:19:01] <lechner> yeah, i'm slowy starting to understand those monad connections. what is it called please when the contexts intersect (which is presumably different from the simpler liftIO)?
[19:21:03] <lechner> or does liftIO also operate on a generic IO monad that was passed in?
[19:21:22] <EvanR> :t liftIO
[19:21:23] <lambdabot> MonadIO m => IO a -> m a
[19:21:41] <EvanR> it lifts an io action into m
[19:21:43] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:22:38] <EvanR> MonadIO monads use IO at some level so it's possible, but may be inconvenient to do manually
[19:22:51] <geekosaur> the class MonadIO denotes a monad that can lift I/O actions through a monad stack if IO is the base monad, using the "liftIO" function
[19:23:22] <geekosaur> you would otherwise need to chain "lift" functions together to reach it
[19:24:19] <janus> how do i search my codebase for ToJSON/FromJSON instances that would have been derivable (without relying on Generic)?
[19:24:44] *** Quits: FragByte (~christian@user/fragbyte) (Quit: Quit)
[19:26:34] <lechner> Once someone said to me derisively that in Haskell everything is a monad but, pure parts aside, that's not even correct, is it? Isn't all effectfull programming based on IO (or MonadIO)?
[19:28:09] <geekosaur> correct, most things are not monads. IO is a monad and thereby mo9st things that use IO are monads or related to monads in some sense, but it's worth keeping in mind that monads are not special. IO is special because it is IO, not because it is a monad
[19:28:37] <geekosaur> the sole point of IO being a monad is that the monad makes it easier to keep IO actions in the order you wrote them
[19:28:58] <lechner> yeah i'd like to read that paper
[19:28:59] <geekosaur> that is, the IO monad instanceenforces sequencing
[19:29:18] <lechner> was that wadler?
[19:29:20] *** Joins: FragByte (~christian@user/fragbyte)
[19:29:30] *** Joins: xkuru (~xkuru@user/xkuru)
[19:29:55] <geekosaur> not sure which paper you're talking about
[19:30:25] <lechner> nvm, i think they are from the 1960s
[19:30:35] <geekosaur> if it's related to monads in Haskell it's probably Wadler; if it's related to monads in programming it may be Møggi
[19:31:41] <lechner> is there a paper that originally proposed monads as a theoretically sound way to separate effects from pure programming?
[19:32:13] <geekosaur> that would probably be Møggi
[19:32:31] <geekosaur> but I couldn't point you to a specific paper
[19:33:24] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[19:33:45] <geekosaur> hm, might be wadler after all. there's only 3 monads with "non-pure" effects in Haskell: IO, ST, STM. all other monads are pure
[19:33:45] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:33:58] <geekosaur> and can be done with pure code, just less conveniently
[19:35:45] <lechner> are they called pure merely because they cause no effects? imposing an order on execution is still pure?
[19:35:59] <lechner> or can be?
[19:36:26] <lechner> ST is for state?
[19:37:57] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[19:38:11] <EvanR> a pure function corresponds to a function from math, is always gives the same answers and doesn't depend on invisible context like the clock
[19:38:29] <EvanR> the word pure has leaked out and all kinds of stuff i haskell is called pure by analogy
[19:38:41] <lechner> maybe i should read this   https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.52.3656&rep=rep1&type=pdf
[19:38:50] <lechner> state in haskell
[19:39:23] <geekosaur> ST is a "state thread", it can hide mutability from other pure computations as long as the final result is pure
[19:39:55] <geekosaur> states are independent of each other, pure code, and mutable code (i.e. IO)
[19:39:55] <lechner> the amount of thought that went into haskell is simply remarkable
[19:41:00] <EvanR> yeah secretly using mutable variables in a pure function was not new, but ST uses the type system to make that sound and have it safely fit into haskell
[19:41:57] *** Joins: shapr (~user@2601:7c0:c37c:46d0:fdf3:f0cd:30b3:4860)
[19:43:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:44:13] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:46:30] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:47:54] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:48:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[19:50:43] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[19:51:50] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[19:52:13] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[19:53:43] *** Joins: hololeap (~hololeap@user/hololeap)
[19:53:47] <thcp> \help
[19:54:11] <thcp> this.quit
[19:54:19] <thcp> \HELP
[19:54:27] <geekosaur> "/quit"
[19:54:33] *** Quits: thcp (~thadeu_de@189.34.167.124) (Quit: leaving)
[19:54:43] <lagash> Someone's new to IRC..
[19:59:18] <EvanR> IRC: still a classic
[20:04:56] <maerwald> windows IRC
[20:06:06] <EvanR> C:λProgram Files
[20:07:25] *** Joins: max22- (~maxime@2a01cb08833598008919a79e2385461f.ipv6.abo.wanadoo.fr)
[20:07:58] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[20:08:35] *** Joins: cosimone` (~user@93-44-186-112.ip98.fastwebnet.it)
[20:09:48] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[20:12:12] <hololeap> does anyone here have any experience using sodium and reflex in a pure haskell context (not ghcjs)? how do they compare?
[20:13:39] <briandaed> isn't sodium dead?
[20:14:13] <hololeap> oh, yeah I guess it is
[20:14:20] <briandaed> :)
[20:15:03] <EvanR> is it?
[20:15:26] <hololeap> well, last commit was almost two years ago
[20:15:54] <geekosaur> lechner, re imposing an order on execution vs. purity, all you need to do is establish a data dependency: "this function depends on the output from that function"
[20:15:58] <geekosaur> which is 100% pure
[20:16:07] <hololeap> last commit in the haskell subdirectory is 7 years ago
[20:16:09] <briandaed> not sure which sodium we are talking about, in reflex context assumed https://hackage.haskell.org/package/sodium
[20:16:23] <hololeap> right, https://github.com/SodiumFRP/sodium
[20:17:05] <briandaed> not sure if it was rebranded or incorporated in some other project, assumed dead, maybe too fast
[20:17:33] <EvanR> there's a forum here where they discuss C# and Scala and I'm confuse
[20:18:10] <`2jt> Hi, when learning the very basics on 3d, which haskell package for practicing purpose would you suggest? Opengl seems to be the most popular on hackage, but it was last updated in 2019.
[20:18:22] <hololeap> I was told there was some kind of limitation with reflex in respect to concurrency/parallelism, and that a different style of FRP would overcome this limitation. another library was mentioned, but I don't remember what it was
[20:18:59] <EvanR> wires?
[20:19:08] <geekosaur> `2jt, when was the last change to the opengl standard?
[20:19:27] <briandaed> `2jt you have two options, opengl - crossplatform industry standard or directx tightl bound to ms platforms to which I believe Haskell has no bindings
[20:20:17] <hololeap> that doesn't ring a bell
[20:20:20] <geekosaur> the opengl package just wraps the standard opengl primitives, and I am pretty sure those have not changed. and the wrapping is automated and the bugs have been worked out long since, so the only time the package changes is when a new opengl standard has been released
[20:20:32] *** Quits: smorgasbord (buggy@user/smorgasbord) (Quit: WeeChat 3.3)
[20:20:43] <briandaed> geekosaur is right https://www.khronos.org/opengl/wiki/History_of_OpenGL it's 2017
[20:21:15] <`2jt> What is the difference then between OpenGl and OpenGLRaw, binding vs raw binding?
[20:21:42] <hololeap> maybe it was dunai
[20:21:54] <EvanR> OpenGL came first, then ed made `gl' which was just the API directly binded, then OpenGLRaw caught up with their own
[20:22:04] *** Joins: Topsi (~Tobias@dyndsl-095-033-090-163.ewe-ip-backbone.de)
[20:22:14] <EvanR> I only used `gl' and it's great
[20:23:02] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 240 seconds)
[20:23:27] <hololeap> there's also gpipe-glfw. I haven't used any of these, but I did look at that one. it seemed advanced
[20:23:42] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[20:23:59] <geekosaur> OpenGLRaw is the lowest level binding, it just wraps stuff directly and doesn't pretend to be Haskell. OpenGL is a mroe Haskelly interface
[20:24:18] <EvanR> as haskell as it could attempt to be I guess...
[20:24:24] <geekosaur> well, yes
[20:24:48] *** Joins: mud (~mud@user/kadoban)
[20:25:03] *** Joins: zaquest (~notzaques@5.130.79.72)
[20:25:25] <`2jt> :) thank you
[20:29:42] <EvanR> >Haskell - deprecated in favour of Heinrich Apfelmus's Reactive Banana (sodium README)
[20:29:53] <EvanR> R.I.P.
[20:30:10] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[20:30:19] <EvanR> reactive banana still holding the championship after all this time
[20:31:06] <briandaed> hats off
[20:31:37] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (Ping timeout: 240 seconds)
[20:31:49] <EvanR> haha "deprecated in favor of"
[20:32:13] <EvanR> like, egyptian president stepping down or something
[20:32:29] <hololeap> Haskell: deprecated in favor of javascript
[20:32:52] <hololeap> move along, folks
[20:33:33] <briandaed> no way, ..., but when I started my "career" it was only browser language, then node happened... who knows
[20:34:03] <hololeap> we know when to admit defeat
[20:35:14] *** Joins: thcp_ (~thadeu_de@189.34.167.124)
[20:36:04] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:36:41] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:38:09] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[20:40:20] *** Joins: zebrag (~chris@user/zebrag)
[20:41:01] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:46:49] *** Quits: random_ (~random@185.219.68.251) (Remote host closed the connection)
[20:47:07] *** Joins: random_ (~random@185.219.68.251)
[20:50:35] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[20:50:40] <polyphem> how can i use bracket in a function of type: MonadIO m => m () ?
[20:51:55] <peutri> there's got to be an adjusted prelude for that somewhere
[20:52:12] <geekosaur> sounds like MonadBaseControl to me
[20:52:25] <geekosaur> needs more than just a MonadIO Prelude
[20:52:32] <briandaed> wouldn't liftIO be enough?
[20:53:09] <peutri> no, base.bracket expects IO arguments, which liftIO doesn't give you
[20:53:57] <geekosaur> and you can't just "copy" the contents of the other monads (what do you do with State, for a simple example? and it's worse if it's something like a database connection)
[20:54:37] <geekosaur> MonadBaseControl deals with this, at the price of complexity (there being no simple ways to deal with this)
[20:54:54] <polyphem> its actually mor complicatetd, function is really : MonadIO m => a -> (a -> m ()) -> m ()
[20:55:19] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[20:55:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[20:55:36] <polyphem> hmm
[20:57:06] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-145.dynamic.mnet-online.de)
[20:57:20] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[20:57:42] <polyphem> i tired to mess around with UnliftIO.Exception's bracket but cant get it to work , and its strange because i previously generalized the function from IO to m , sprinkling liftIOs around 
[21:00:43] *** Joins: yehoshua[m] (~yehoshuay@2001:470:69fc:105::1:593f)
[21:01:48] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[21:02:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:02:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:02:39] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:03:27] <EvanR> is there a MonadFoo class for doing brackets that your thing should be implementing
[21:03:27] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:03:37] <EvanR> like, MonadCatch ?
[21:04:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[21:04:28] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[21:05:10] <polyphem> EvanR: dont think so
[21:05:42] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[21:05:53] <EvanR> MonadError doesn't have it, but this thing MonadMask in `exceptions' package does
[21:06:01] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[21:06:10] *** Joins: fef (~thedawn@user/thedawn)
[21:06:55] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:09:09] <polyphem> MonadBaseControl/MonadMask/MonadUnliftIO all have a suitable bracket ... hmm
[21:09:45] <EvanR> the doc for MonadBaseControl claims that it can save and restore the state of the base monad
[21:10:12] <EvanR> paraphrasing, but, how does that work with IO xD
[21:10:33] <maerwald> backup your hard drive to amazon S3
[21:10:52] <maerwald> and make a snapshot of the internet
[21:10:58] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[21:11:08] *** Joins: random__ (~random@185.219.68.251)
[21:11:14] <EvanR> ah no... it's the state of the not-base that it saves
[21:11:41] <geekosaur> right, it;s bracket that i ssupposed to deal with the base
[21:11:50] <geekosaur> MBC has to deal with the stuff bracket can't
[21:13:30] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 250 seconds)
[21:13:49] <polyphem> i get that moving from IO to MonadIO m as monad i can have the user pass in arbitrary monad stacks that introduce state wich i dont know nothing about and i need to preserve 
[21:15:32] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:15:52] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:39] <EvanR> preserve in an intermediate broken state due to error, reset back to what it was before bracket, something else?
[21:16:57] <geekosaur> whatever the instance determines
[21:17:28] <geekosaur> a database monad might fr example rollback a transaction
[21:19:32] <polyphem> its a cacheing system written by me the function is "withCache" and i use bracket to initialize and shut down the Cache and 
[21:20:09] <maerwald> MonadBaseControl is where functional programming started to suck
[21:21:02] <polyphem> i dont even know if i need to generalize it to a m monad instead of letting it run in IO cause ultimatly its run from main to provide a cache for the inner user IO
[21:21:26] <EvanR> I was going to say, it's starting to look complicated enough to make haskell appealing to IT, and the barns & noble tech section
[21:21:55] *** Joins: alx741 (~alx741@157.100.93.160)
[21:21:56] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:23:18] <EvanR> polyphem, https://pbs.twimg.com/media/C8QejJ1VoAAQgDE.jpg
[21:24:04] <polyphem> hahaha, thats me , there, right now .... nice one
[21:24:18] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:b0c0:5871:210d:15db)
[21:25:10] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:dc72:6181:1705:c2cc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:25:10] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:25:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:26:21] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[21:29:23] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[21:30:03] *** Quits: dhil (~dhil@cpc103052-sgyl39-2-0-cust260.18-2.cable.virginm.net) (Quit: Leaving)
[21:31:12] *** Quits: dolio (~dolio@130.44.130.54) (Quit: ZNC 1.8.2 - https://znc.in)
[21:32:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:34:44] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[21:35:43] <thcp_> https://pbs.twimg.com/media/C8QejJ1VoAAQgDE.jpg
[21:36:43] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[21:37:33] <geekosaur> yes?
[21:37:50] *** Quits: kuribas (~user@ptr-25vy0i98u111h07lsuf.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:38:03] <hpc> not shown: unsafePerformIO . newIORef
[21:38:15] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[21:39:56] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[21:40:02] *** Joins: dolio (~dolio@130.44.130.54)
[21:40:54] *** Joins: econo (uid147250@user/econo)
[21:42:20] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[21:43:17] *** Ruit is now known as ShmoSeph
[21:43:18] *** Joins: alx741 (~alx741@157.100.93.160)
[21:43:57] <zero> i destilled a recurrent annoyance of mine and am curious about good ways to avoid it. say i have something like the function `f` but i want to avoid all that code duplication, doing something like `g`. how can i make it work (or work around it) ? https://paste.jrvieira.com/1642270216022
[21:44:46] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:44:58] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[21:46:11] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[21:47:51] *** Joins: meer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[21:48:25] *** Joins: jgeerds_ (~jgeerds@55d4af63.access.ecotel.net)
[21:48:30] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:48:39] *** Quits: mbuf (~Shakthi@122.178.176.76) (Quit: Leaving)
[21:50:25] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:50:47] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[21:51:51] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:52:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[21:53:29] <zero> a and b need to be [Int] and [I] depending on x < 3. would RankNTypes be of any help?
[21:53:47] <dolio> zero: There are multiple ways, depending on the details.
[21:54:18] <dolio> Oh wait. Your example is more complicated than I thought.
[21:54:31] <dsal> Is the difference just `f` vs. `id`/
[21:54:58] <dsal> Oh, no, I see.
[21:55:03] <geekosaur> if the type is changing that sounds awfully dependent to me
[21:55:04] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[21:55:12] <d34df00d> Nothing awful about that!
[21:56:01] <dsal> It might be awful.  It depends.
[21:57:32] <zero> hmm :/
[21:57:37] *** Joins: random_ (~random@185.219.68.251)
[21:57:54] <dsal> You might be best off leaving the code clear.
[21:58:08] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:e9b8:ca94:422e:6f77) (Ping timeout: 250 seconds)
[21:58:47] <zero> well this is the simplest i could express it, in a real world scenario f gets very messy
[21:59:00] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 250 seconds)
[22:00:02] *** Quits: random__ (~random@185.219.68.251) (Ping timeout: 240 seconds)
[22:01:08] <dsal> You could do something like    `(fx,fxs) = if x < 3 then (f,id) else (id,f)` 
[22:01:27] <dolio> zero: You can do it with an existential type.
[22:02:39] <dolio> I think the duplication is kind of illusory, though.
[22:03:26] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[22:04:40] *** Quits: jgeerds_ (~jgeerds@55d4af63.access.ecotel.net) (Remote host closed the connection)
[22:05:28] <dolio> Basically you need `data T = forall e. T [e] ([e] -> [I])`. Then you define a value of T based on x<3.
[22:05:52] <dolio> When x<3 you use `T (f xs) id` and otherwise `T xs f`.
[22:08:03] <zero> i see. i agree that's messy
[22:08:40] <zero> dsal: how exaclty would that work?
[22:08:55] <dolio> You could avoid the additional type by defining an auxiliary polymorphic function.
[22:09:15] *** Joins: alx741 (~alx741@157.100.93.160)
[22:09:42] <dsal> zero: I'm not actually trying it, but your two branches seem to differ by where the function is applied.  So that would let you define which function applies in each branch at once.
[22:09:44] <dolio> `g (f xs) id` when x<3, and `g xs f` otherwise.
[22:13:08] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:13:22] *** Quits: defanor (~defanor@tart.uberspace.net) (Quit: .)
[22:13:47] <zero> i see. thanks
[22:14:01] *** Joins: defanor (~defanor@tart.uberspace.net)
[22:14:25] *** Joins: Sgeo (~Sgeo@user/sgeo)
[22:15:25] <zero> i prefer to keep it simple then
[22:17:13] *** Joins: arctor (~arctor@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net)
[22:18:13] <arctor> whats the theorem (i cant remember) about where the monad and the applicative dont commute?
[22:19:17] <arctor> so then you have to specialise the applicative in traverse to just be state for lazyness to work...
[22:19:27] *** Quits: thcp_ (~thadeu_de@189.34.167.124) (Quit: Lost terminal)
[22:19:47] <arctor> i think it was something to do with when the tail is wrapped in a monad
[22:21:14] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:21:18] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:23:05] <arctor> the bit i have trouble remembering is how you have to pass the constructor into the applicative, and if this has the monad which doesnt commute with the arbitrary applicative, then you have to get to the end of the traversal to reconstruct everything, but if you can commute the applicative (like when its just state) through the monad, then you can
[22:23:05] <arctor> kind of reconstruct it in a way that allows lazyness to work
[22:23:46] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:24:38] *** Joins: LukeHoersten (~LukeHoers@user/lukehoersten)
[22:25:30] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[22:25:46] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:26:12] <arctor> i think i saw a derivation of it somewhere, but without being able to see the code its difficult to understand
[22:26:31] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[22:28:19] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:28:39] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:28:45] <arctor> maybe someone knows how to write a traversable instance for ListT (done right) without the superclass constraint that gives a function over its instances to commute the applicative with the monad
[22:29:15] <arctor> which guarantees lazyness, such as for infinite streams, or when the monad is IO and its a blocking request
[22:30:23] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 256 seconds)
[22:30:38] *** Joins: alx741 (~alx741@157.100.93.160)
[22:31:25] *** Quits: max22- (~maxime@2a01cb08833598008919a79e2385461f.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:31:51] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[22:33:10] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:33:14] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[22:33:52] *** Quits: arctor (~arctor@cpc101088-sgyl37-2-0-cust22.18-2.cable.virginm.net) (Quit: Client closed)
[22:34:56] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[22:39:34] *** Joins: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net)
[22:39:34] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[22:41:25] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[22:45:11] *** Quits: LukeHoersten (~LukeHoers@user/lukehoersten) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:08] *** Joins: random__ (~random@185.219.68.251)
[22:49:42] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 250 seconds)
[22:56:35] *** Joins: alx741 (~alx741@157.100.93.160)
[22:57:23] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:58:48] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:00:40] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-43-67-70-144-105.dsl.bell.ca)
[23:01:44] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:02:34] <lechner> Hi, which module exports the "session" in this line, please?      https://github.com/nikita-volkov/hasql-tutorial1/blob/master/library/HasqlTutorial1/Transaction.hs#L14
[23:08:18] *** Joins: max22- (~maxime@2a01cb0883359800fd5419c5ccb7ba8b.ipv6.abo.wanadoo.fr)
[23:10:22] <EvanR> one of those 4, perhaps the one called Session xD
[23:10:51] <EvanR> if you don't see it, note modules can re-export entire other modules
[23:11:10] <pavonia> But it's a qualified import
[23:11:29] <EvanR> SO IT IS
[23:12:28] <pavonia> Can you use non-qualified identifiers from qualified imports?
[23:12:58] <geekosaur> no
[23:13:07] <EvanR> no it must be from one of the other 2
[23:13:08] <geekosaur> you'd have to import separately unqualified
[23:13:33] <geekosaur> they use a different Prelude nbut I'd be surprised if it's there
[23:14:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731)
[23:15:29] <pavonia> And the 4th one seems to be this module https://hackage.haskell.org/package/hasql-transaction-1.0.1.1/docs/Hasql-Transaction.html
[23:17:03] *** Joins: alx741 (~alx741@157.100.93.160)
[23:17:21] <pavonia> lechner: Have you tried loading this example into GHCi and asking it about that function?
[23:18:41] <byorgey> looks to me like 'session' comes from an older version of the hasql-transaction library: https://hackage.haskell.org/package/hasql-transaction-0.10.0.3/docs/Hasql-Transaction.html#v:session
[23:18:50] *** Joins: ville (~ville@user/ville)
[23:19:00] <byorgey> but it's not there in hasql-transaction >= 1
[23:19:13] * geekosaur was wondering if it was bitrot
[23:20:02] <byorgey> that tutorial was last changed in 2019 with a commit that says "move to version 0.10"
[23:20:42] <byorgey> strangely, that commit was made on the exact same day that version 1 of hasql-transaction was uploaded
[23:20:59] <ville> howdy. any recommendations for project-based haskell books for some half-hearted learning? the result should be some sort of functional program in the end which might keep me more motivated than a more theoretical one
[23:21:13] <geekosaur> real world haskell?
[23:21:13] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:21:46] <geekosaur> available online; a little dated but if you use the online version and read the comments you'll get the necessary updates
[23:22:20] <geekosaur> @where rwh
[23:22:20] <lambdabot> http://www.realworldhaskell.org/blog/ http://book.realworldhaskell.org/read/
[23:23:16] <ville> thanks. that seems like a potential book. any others?
[23:23:55] <geekosaur> I can't think of any off the top of my headm although I think these's some that have you write a calculator as the "final project"
[23:24:10] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:24:13] <geekosaur> @where books
[23:24:13] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[23:24:26] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 252 seconds)
[23:24:30] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:25:06] <geekosaur> hm, DOE is also a little dated I think but you get to use and extend a library that makes music
[23:25:12] <geekosaur> er, SOE
[23:25:24] <geekosaur> I think that';s the one at least
[23:25:29] <geekosaur> @where SOE
[23:25:29] <lambdabot> "The Haskell School of Expression: Learning Functional Programming through Multimedia" by Paul Hudak in 2000 at <http://www.cs.yale.edu/homes/hudak/SOE/>,<http://haskell.org/soe/> [broken]
[23:25:34] <geekosaur> yep
[23:26:34] <geekosaur> no online version though unles there are illicit copies floating around somewhere
[23:26:51] <briandaed> ville take look at this list also https://www.extrema.is/articles/haskell-books
[23:28:16] *** Quits: Merfont (~Kaiepi@156.34.47.253) (Remote host closed the connection)
[23:28:43] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[23:28:55] <ville> ok that's a big list. going to take a moment to see what kind of book each is
[23:29:14] *** Joins: Pickchea (~private@user/pickchea)
[23:30:01] *** Joins: vicfred (~vicfred@user/vicfred)
[23:30:09] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[23:30:28] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[23:31:07] <ville> for haskell how relevant is a book from say before-2010 these days?
[23:32:14] <geekosaur> the language itself has changed only a little. libraries have changed a lot but I think you can still get ghc 6.6 and libraries for it, which would insulate you from most of it
[23:33:32] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:33:33] <briandaed> ville can you provide more details on what you are going to implement?
[23:33:39] <geekosaur> (sadly ghcup won't help you there, it doesn't go back far enough to avoid the biggest changes)
[23:33:52] *** Quits: ph88 (~ph88@2a02:8109:9e00:71d0::7e04) (Quit: Leaving)
[23:34:01] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[23:34:12] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[23:34:18] <maerwald> ghc 6.6 will likely not work on a modern linux distro anyway
[23:34:24] <maerwald> even 7.10 stopped working on latest ubuntu
[23:34:34] <EvanR> a time machine can only travel back to the time of the first time machines principle
[23:34:59] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[23:35:12] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 250 seconds)
[23:35:28] <ville> briandaed: oh i am not going to implement anything really. just looking at haskell as something to waste some evenings on. hence "half-hearted learning"
[23:37:01] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:37:37] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:58] <briandaed> ville then I think Hutton may be best, concise and good for learning althought I wouldn't say it's project-based
[23:38:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:39:35] *** Joins: alx741 (~alx741@157.100.93.160)
[23:39:38] <ville> programming in haskell?
[23:39:45] <briandaed> ville yeah
[23:40:15] <EvanR> what about write yourself a scheme in 24 hours or whatsitcalled
[23:41:06] <briandaed> unfortunately didn't read any of theses but read good reviews about 1st of them
[23:42:57] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[23:43:30] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[23:43:39] *** Quits: fresheyeball (~fresheyeb@c-76-25-93-164.hsd1.co.comcast.net) (Quit: WeeChat 2.9)
[23:43:45] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[23:45:01] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:46:00] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:46:11] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:46:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:46:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:46:35] *** Joins: wroathe (~wroathe@user/wroathe)
[23:47:02] *** Quits: vglfr (~vglfr@88.155.50.55) (Ping timeout: 240 seconds)
[23:49:20] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:50:29] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[23:51:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:52:21] *** Quits: Kaiepi (~Kaiepi@156.34.47.253) (Read error: Connection reset by peer)
[23:52:23] <ville> well i'll got some previewing to do. thanks
[23:52:25] *** Parts: ville (~ville@user/ville) ()
[23:52:30] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[23:58:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:58:54] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:59:41] *** Joins: alx741 (~alx741@157.100.93.160)
