[00:00:01] <lisp123> Yes, it seems like there is so much more to IT now than programming. For example, all the VC money to bankroll apps like Uber which lose money for many years subsidising costs until they get a monopoly
[00:00:28] <White_Flame> the startup ecosystem is just financial and user exploitation
[00:00:31] <pjb> This goes beyond the domain of programming.
[00:00:34] <White_Flame> has nothing to do with actual tech
[00:00:50] <lisp123> Thats true
[00:15:48] *** Joins: tyson2 (~user@72.142.96.152)
[00:41:35] *** Quits: tyson2 (~user@72.142.96.152) (Quit: ERC (IRC client for Emacs 27.2))
[00:48:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[01:35:46] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 260 seconds)
[01:52:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:53:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:54:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[02:35:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:10:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:48:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:08:06] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[05:08:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:18:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[05:24:16] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[05:42:03] *** Joins: Oladon (~olad@98.43.81.226)
[06:03:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[06:05:56] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[06:52:03] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:54:58] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[07:11:29] *** Quits: sts-q (~sts-q@91.200.108.250) (Ping timeout: 252 seconds)
[07:19:34] *** Joins: sts-q (~sts-q@91.200.108.249)
[07:50:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:54:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[07:56:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[09:31:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:15:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:59:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:59:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:36:05] *** Joins: shka (~herr@109.231.62.239)
[12:36:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[13:33:54] *** Joins: kstuart (~kstuart@85.203.46.113)
[13:34:13] *** Joins: ln43 (~ln43@user/ln43)
[13:34:52] <ln43> Hi all CL coomunity !!!
[13:35:53] <ln43> *community
[13:36:08] <ln43> i was trying to read the good AIMA book, just started really
[13:36:23] <beach> Hello ln43.
[13:36:24] <ln43> but code works smootly even if was written decades ago
[13:36:42] <ln43> now it's fun try to understand how it works
[13:36:45] <beach> Is that code Common Lisp?
[13:36:50] <ln43> yes
[13:37:31] <ln43> the original code was in CL written around 1995
[13:37:42] <ln43> then rewritten in java, python and so on
[13:37:53] <ln43> but i'm looking at the CL version
[13:38:03] <beach> I see.
[13:38:45] <ln43> ok to be honest i should understand the theory and in the meantime try to understand how all works without asdf or anything ...
[13:39:03] <ln43> it's a bit strange but it loads a lot of dependencies authomatically 
[13:39:23] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[13:39:31] <seok> helloo
[13:39:32] <ln43> i mean i don't see any .asd file but maybe asdf is hidden
[13:39:51] <beach> Hello seok.
[13:40:03] <beach> ln43: ASDF probably didn't exist when the book was first written.
[13:40:09] <seok> How do I check if a string is able to be parsed into an integer ?
[13:40:13] <seok> hello beach !
[13:40:42] <beach> seok: There is a function PARSE-INTEGER.
[13:41:28] <seok> can it check whether the string is invalid ?
[13:41:43] <seok> oh there is junk-allowed option
[13:41:44] <beach> It signals an error if it can't parse it.
[13:42:13] <seok> so I can put handler-case around it
[13:42:17] <beach> Yes.
[13:42:32] <seok> yes thank you !
[13:42:37] <beach> Sure.
[13:43:42] <ln43> seok try (funcall  '+  (eval '1) (eval '2))   
[13:43:58] <seok> hm? why?
[13:44:20] <beach> ln43: What on earth is that?
[13:44:40] <ln43> a test
[13:44:53] <beach> (eval '1)????
[13:44:59] <beach> ln43: What does it test?
[13:45:01] <ln43> yes, why not
[13:45:13] <beach> ln43: It doesn't test anything seok was looking for.
[13:45:28] <ln43> ah ok, it works even without eval
[13:45:36] <seok> ??
[13:45:37] <beach> And without '
[13:45:37] <seok> xD
[13:45:47] <beach> And without funcall.
[13:45:49] <seok> and without funcall ?
[13:46:09] <ln43> yes but funcall is used diffusely 
[13:46:29] <beach> "diffusely"? 
[13:46:40] <ln43> a lot of times
[13:47:02] <beach> That form is entirely equivalent to (+ 1 2) and has nothing to do with strings or parsing integers.
[13:47:29] <seok> why is '1 eq 1
[13:47:36] <ln43> yes parsing a string '1 to an integer is done by the reader, or not?
[13:47:43] <seok> '1 is not a string
[13:47:56] <beach> ln43: Yes, in both cases.
[13:48:00] <ln43> no it's a quoted expression
[13:48:36] <ln43> the type of 1 is a bit in SBCL
[13:48:43] <ln43> of '1
[13:48:47] <ln43> using type-of
[13:49:03] <beach> '1 is a form that evaluates to 1, and 1 is a form that evaluates to 1 because 1 is a number and it is self evaluating. 
[13:49:11] <ln43> yes, right
[13:49:20] <beach> And calling EVAL on a self-evaluating object returns that object.
[13:49:22] <ln43> any number evaluates to itself
[13:49:31] <seok> ok
[13:49:35] <ln43> basically that is done during parsing
[13:49:43] <beach> WHAT?
[13:49:51] <beach> What is done during parsing?
[13:49:56] <ln43> that conversion
[13:50:03] <beach> What conversion?
[13:50:37] <seok> beach what about (eq '1 1)
[13:50:39] <seok> why is that t
[13:50:44] *** Quits: kstuart (~kstuart@85.203.46.113) (Quit: rcirc on GNU Emacs 28.0.50)
[13:50:56] <beach> seok: It is not guaranteed to be, but (eql '1 1) is.
[13:51:08] <seok> ok got it
[13:51:17] <beach> seok: So EQ and EQL are both functions.
[13:51:36] <beach> So the arguments are recursively evaluated before the function is called.
[13:51:50] <beach> So '1 is evaluated, and it is the same as (quote 1).
[13:52:08] <beach> QUOTE is a special operator that returns its argument unevaluated, so the value of '1 is 1.
[13:52:17] <ln43> yes ok, i was thinking '1 was a string
[13:52:28] <beach> 1 is a number, so it is self evaluating so the value is 1.
[13:52:30] <seok> ah
[13:52:38] <beach> So EQ and EQL are called with the values 1 and 1.
[13:52:40] *** Joins: kstuart (~kstuart@85.203.46.113)
[13:52:52] <ln43> but how to generate the string with 1<' ... something like "1" or not ?
[13:53:01] <seok> then why is (eq '1 1) not guaranteed to be t?
[13:53:46] <beach> seok: Because EQ tests for identity, and two equal numbers are not required to be identical.  Identity has to do with the same pointer representation. 
[13:54:22] <seok> oh. is there any implementation which returns (eq 2 2) as nil ?
[13:55:11] <beach> Not that I know of.  But try something bigger, (eq (1+ most-positive-fixnum) (1+ most-positive-fixnum))
[13:55:45] <beach> Or (eq 1/2 1/2)
[13:55:48] <seok> that returns nil
[13:55:58] <seok> thats nil too
[13:56:04] <beach> Exactly. 
[13:56:22] <beach> So don't use EQ to test for equality between numbers.
[13:56:23] <ln43> so eq is more stringent than simply eql...
[13:56:23] <seok> then I've been using eq wrongly
[13:56:39] <ln43> ql only to test if the pointers are the same
[13:57:04] <ln43> EQ OPS
[13:57:09] <ln43> eq
[13:57:36] <ln43> (eql 0.5 1/2) -> nil
[13:58:33] <beach> I recommend you read the Common Lisp HyperSpec pages on EQ and EQL.
[13:58:39] <ln43> yes
[14:09:13] *** Quits: ln43 (~ln43@user/ln43) (Quit: ln43)
[14:27:34] *** Joins: pjb (~pjb@user/pjb)
[14:57:37] *** Joins: lisp123_ (~lisp123@45.130.83.218)
[15:01:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[15:12:07] <edgar-rft> If I know that right then EQL was introduced because FIXNUMs can also be stored in CPU registers, in which case the memory pointer comparison fails. But please don't ask me howto store a FIXNUM in a CPU register with Common Lisp, maybe beach knows something better.
[15:18:16] <pjb> Is it not the opposite? Because bignums can be copied, and therefore EQ fails?
[15:18:24] <pjb> and fixnums can be implemented as bignums.
[15:28:40] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:30:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:33:47] *** Quits: lisp123_ (~lisp123@45.130.83.218) (Ping timeout: 245 seconds)
[15:50:01] *** Quits: kstuart (~kstuart@85.203.46.113) (Ping timeout: 252 seconds)
[16:12:11] <beach> edgar-rft: pjb is right.  Fixnums are encoded in the pointer itself, so a fixnum fits in a CPU register.  Since two fixnums with the same value have the exact same pointer encoding, they are EQ in addition to being EQL.
[16:13:44] <beach> edgar-rft: And the reasons other numbers might fail the EQ test is that might need to be heap allocated, so two such numbers with the same value could be created at two different times, so they each have a different heap chunk allocated.  Then the pointers are different. 
[16:22:46] <beach> Interestingly, for the version of BOCL that I started, but then abandoned, FIXNUMS have no special encoding, and are allocated on the heap, so they might fail the EQ test as well.
[16:23:36] <beach> Encoding fixnums in the pointer itself is an efficiency hack, and BOCL doesn't need those.  It needs maintainability hacks instead. :)
[16:54:59] <pjb> but we cheat a little in bocl, since characters and small fixnums are interned :-0
[16:55:01] <pjb> :-)
[16:56:21] <beach> Yes. :)
[17:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:42:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:19:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[18:31:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:43:29] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[19:08:47] *** Joins: thrig (~thrig@70.97.65.251)
[19:19:14] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[20:28:14] *** Quits: thrig (~thrig@70.97.65.251) (Remote host closed the connection)
[20:35:52] *** Joins: thrig (~thrig@65.113.153.50)
[20:44:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[21:59:52] *** Joins: ln43 (~ln43@user/ln43)
[22:41:27] *** Joins: Oladon (~olad@98.43.81.226)
[22:51:14] *** Joins: vats (~vats@103.70.83.191)
[22:58:44] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[23:28:10] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
