[00:00:54] *** Joins: ouestbillie (~gallup@193.138.218.160)
[00:02:57] <dpk> there is, of course, a marvellous chapter on curses in the UNIX-HATERS handbook
[00:04:23] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:05:11] <mdhughes> It's a well-named library.
[00:05:39] <mdhughes> In practice when I write console programs, I just use raw ANSI commands, with a little wrapper library.
[00:06:40] <mdhughes> 99.9% of the terminals I'll ever deal with support most of VT-100. blink rarely works, alas, windowing controls are hit or miss so it's better to just draw carefully wherever you want.
[00:07:51] * mdhughes quaffs a sleeping potion and curls up in the corner.
[00:10:39] <dTal> it makes me angry that ijkl movement is still in any way a thing
[00:11:23] <gwatt> ijkl or hjkl?
[00:11:31] <dTal> yes
[00:11:59] * gwatt shrugs
[00:12:29] <gwatt> I've read that the keyboard bill joy used to write vi had the arrow keys as alternate functions of hjkl.
[00:12:36] <dTal> well alright, not *angry*. My blood pressure doesn't rise or anything
[00:12:54] <dTal> but it makes me shake my head, on the rare occasion I think about it
[00:14:25] <dTal> How could obviously poor human factors survive, even in a world where arrow keys exist?
[00:14:51] <dTal> *such obviously poor
[00:18:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:23:50] <Zipheir> They're in a nice position compared to most keyboards' arrow keys.
[00:25:19] <sham1> Also tradition. People are nowadays used to hjkl
[00:36:09] <sm2n> dTal: what if I put arrow labels on my hjkl keys (I don't, but hypothetically)
[00:36:49] <dTal> no, "people" are not used to it
[00:37:17] <dTal> sm2n: then your keyboard would be mislabeled
[00:37:37] <sm2n> dTal: how so?
[00:37:59] <dTal> well your keyboard would presumably still have actual arrow keys
[00:38:30] <dTal> and hjkl would still produce letters
[00:38:33] <sm2n> my keyboard also has two ctrl keys and two alt keys
[00:38:52] <sm2n> and keyboard labels can be mode aware (see Fn)
[00:39:02] <sm2n> Could just stick a little arrow under each letter
[00:39:24] <dTal> Fn is a *keyboard* mode, not an application mode.
[00:39:47] <dTal> If Fn+hjkl sent arrow keys, then that would be correct.
[00:40:15] <dTal> In fact some laptop keyboards do have a numpad implemented that way, though I've never seen anyone use it.
[00:40:27] <sm2n> sure, so if I hooked up vim to send an event to my keyboard firmware to change state on mode change would that be fine with you?
[00:40:41] <sm2n> yeah, my laptop does
[00:42:24] <dTal> The thing that I object to is ignoring the perfectly good dedicated arrow keys, which are specifically for this purpose, in favor of introducing some awful application-specific complex system of overloading some letter keys that don't even have a natural spatial mapping to the movements they describe, like WASD does. It's an obscenity against human factors and also basic elegance.
[00:42:30] <dTal> Like indenting with spaces.
[00:45:10] <sm2n> I don't think people ident any lisp-like language with tabs...
[00:45:16] <sm2n> s/ident/indent/
[00:45:30] *** Joins: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d)
[00:45:54] <dTal> yah well exceptions to every rule :p
[00:53:15] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[01:09:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:11:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:12:22] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:40:35] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[01:48:48] *** Joins: lispy (~lispy4@84.69.59.93)
[02:33:02] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[02:41:10] <Zipheir> I thought tab-indents had pretty much been abandoned outside of C.
[02:43:46] <LeoNerd> and Makefiles
[02:43:49] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[02:44:06] <Zipheir> YES.
[02:46:05] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Client Quit)
[02:46:21] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[02:49:02] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 240 seconds)
[02:52:09] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: BRB)
[02:52:53] *** Quits: klimnbrk (~barakvoid@2a02:14f:4:90c3:5267:c24a:c393:429d) (Ping timeout: 268 seconds)
[02:59:01] *** Joins: deltab (~deltab@user/deltab)
[03:01:12] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[03:01:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[03:03:57] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[03:03:57] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:05:21] *** Joins: notzmv (~zmv@user/notzmv)
[03:06:32] *** Joins: jao (~jao@68.235.43.93)
[03:09:09] *** Quits: neceve (~quassel@2.26.93.228) (Ping timeout: 256 seconds)
[03:15:45] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 256 seconds)
[03:19:38] *** Joins: seninha (~seninha@user/seninha)
[04:17:36] <gwatt> golang defaults to tabs. go fmt will indent with tabs and align with spaces
[04:19:13] <aeth> tabs are just an awful way to do code and there's no excuse other than a desire to microoptimize and save 3 characters
[04:19:53] <aeth> the problem: tabs give you the sales pitch that you can perfectly configure your code to have exactly the amount of indentation that you expect, but that's not true in the modern era when you can easily read 10x more code in the web browser than in your editor of choice
[04:20:26] <aeth> and websites usually default to something ridiculous like 8-width tabs, which are bordering on unreadable
[04:21:06] <aeth> So don't use tabs in your formatting if you want anyone to read your code from inside of a web browser, I guess.
[04:21:08] *** Quits: shawn (~shawn_w@152.44.212.188) (Quit: Leaving)
[04:25:00] *** Joins: frost (~frost@user/frost)
[04:33:43] *** Joins: Zipheir (~wcm@98.4.178.27)
[04:49:27] <mdhughes> dTal: We still use WASD because it leaves your right hand free for a mouse, and many other keys reachable. Arrow keys are in a terrible location, I rarely use them.
[04:50:01] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[04:50:04] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[04:51:44] *** Joins: johnjaye (~pi@173.209.65.233)
[04:52:39] <mdhughes> I use tabs of course for all indentation. 1 physical char = 1 logical indent level.
[04:52:44] <mdhughes> (in the technical sense: http://www.catb.org/esr/jargon/html/L/logical.html )
[04:54:05] <mdhughes> I of course don't read code in a browser typically; I'll download the raw source and open it in an editor, where my tabstops are usually 4 (but not always, some languages I discourage indentation in by using tabstop 8)
[04:54:50] *** Joins: Lumia (~Lumia@208.64.158.255)
[04:54:51] <dTal> mdhughes, even Scheme code? I'm a tab zealot but I make an exception for lisp.
[04:54:51] <mdhughes> https://www.youtube.com/watch?v=SsoOG6ZeyUI
[04:55:46] *** Joins: livoreno (~livoreno@user/notzmv)
[04:56:00] <mdhughes> Sure. I definitely don't want to over-indent my Scheme, so I break up functions. Might be over 4 or 6 levels, and then I go "hm, that should be refactored back to the margin".
[04:56:39] <dTal> In lisp, the most legible indent style is to have parentheses lined up with the parentheses of the same depth on the previous line, which are probably inside a form somewhere
[04:57:01] <mdhughes> Oh, I never do that nonsense. You'd be constantly reindenting when you rethink some phrase!
[04:57:23] <dTal> Well, most people would say "use EMACS".
[04:57:29] <mdhughes> Fuck those people.
[04:57:54] <dTal> I don't use EMACS myself, it's another human factors abomination. But I see the value in autoformatting code.
[04:58:16] <dTal> I use Kate, which does the correct thing as long as it's set to "spaces".
[04:58:21] <mdhughes> Not in a nice way, either! Life's too short. I could use a format filter, but ugh. I'll just type by consistent rules and not need it.
[04:58:25] <lispy> as a member of the church of Emacs I am very offended
[04:58:32] <gwatt> aeth: I've also heard people with vision disabilities say that tabs are superior because different vision impairments apparently require slightly different appearance. With tabs, that's customizable but with spaces it is not
[05:00:08] <mdhughes> One of the many complaints I have against Go is gofmt requires, what, 2-space tabs? UUUUUGH.
[05:00:19] <mdhughes> s/tabs/indents/
[05:04:06] <gwatt> what do you mean?
[05:08:05] <mdhughes> Go ships with a tool that formats code to an official standard. You literally can't commit to a repo with indentation you prefer.
[05:14:00] <gwatt> I'm aware of go fmt and what the favored indendation is. But I'm not sure what you mean that go requires 2-space indents.
[05:19:14] *** Joins: ZombieChicken (~weechat@user/zombiechicken)
[05:19:46] <mdhughes> So I looked it up, and I'm incorrect: It's tabs + spaces (an abomination). But everything else in Google uses 2-space indent, so… what?
[05:20:18] <mdhughes> The one time I saw Go used in anger, it was emitting 2-space indents, so that must've been a local policy?
[05:20:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[05:24:35] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[05:25:27] <mdhughes> Also also on keyboard layouts, emacs using ^B ^F ^N ^P for cursor keys is just awful. I got used to them during years of microemacs on Atari ST before STeVIe came out, but ick.
[05:31:25] <gwatt> go uses tabs for indentation and spaces for alignment. https://play.golang.com/p/gpeO5N0O0k4
[05:34:00] *** Quits: Menchers (Menchers@user/menchers) (Quit: Into the Void…)
[05:47:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[05:49:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:51:48] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:54:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[06:03:43] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:04:03] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:05:42] *** Joins: skapata (~Skapata@user/skapata)
[06:07:26] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[06:13:37] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:15:34] *** Joins: Menchers_ (Menchers@user/menchers)
[06:17:29] *** Menchers_ is now known as Menchers
[06:42:42] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[06:43:54] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[06:44:05] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[06:44:12] *** Joins: Lumia (~Lumia@208.64.158.255)
[06:48:17] *** Quits: Lumia (~Lumia@208.64.158.255) (Ping timeout: 240 seconds)
[06:49:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:50:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[07:03:37] *** Joins: Lumia (~Lumia@208.64.158.255)
[07:24:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[07:25:54] *** Quits: Lumia (~Lumia@208.64.158.255) (Quit: ,-)
[07:33:57] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[07:42:38] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:57:02] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[08:00:02] *** Quits: flatwhatson (~flatwhats@118-208-220-160.tpgi.com.au) (Ping timeout: 240 seconds)
[08:01:03] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:01:30] *** Joins: flatwhatson (~flatwhats@220.253.110.95)
[08:17:24] *** Quits: ZombieChicken (~weechat@user/zombiechicken) (Ping timeout: 276 seconds)
[08:25:34] *** Joins: webshinra_ (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr)
[08:26:30] *** Quits: webshinra (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[08:27:57] *** Quits: jao (~jao@68.235.43.93) (Ping timeout: 240 seconds)
[08:30:15] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:32:02] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[08:33:32] *** Quits: webshinra_ (~shinra@2a01cb080779fc003f6926a195b6d607.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[08:36:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[08:38:05] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:50:16] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[08:50:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:52:31] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:56:51] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[09:04:20] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 250 seconds)
[09:06:16] *** Joins: johnjaye (~pi@173.209.65.233)
[09:07:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:08:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:09:57] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[09:12:05] *** Joins: Darkcoal (~user@130.164.162.247)
[09:36:45] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:38:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:05:52] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[10:07:16] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[10:33:32] *** Quits: klovett (~klovett@166.205.90.179) (Quit: ZZZzzz…)
[11:10:32] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:17:43] *** Joins: civodul (~user@guix/contributor/civodul)
[11:28:27] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Read error: Connection reset by peer)
[11:33:06] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[11:42:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:43:05] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:43:09] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[11:58:25] *** Quits: ouestbillie (~gallup@193.138.218.160) (Ping timeout: 256 seconds)
[12:00:06] *** Joins: ouestbillie (~gallup@bl16-179-173.dsl.telepac.pt)
[12:17:05] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:21:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:23:42] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:32:15] *** Quits: xaltsc (~xaltsc@user/xaltsc) (Remote host closed the connection)
[12:32:27] <wasamasa> mdhughes: Nils Holm has a reformatter example for one of those tiny lisps he wrote
[12:36:33] <wasamasa> https://github.com/ska80/klisp/blob/master/src/grind
[12:37:43] <wasamasa> could probably be simplified by having working arithmetic
[13:08:17] *** Quits: Wezl (Wezl@grape.ircnow.org) (Ping timeout: 240 seconds)
[13:35:28] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[13:47:29] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[13:48:19] *** Joins: seninha (~seninha@user/seninha)
[13:51:21] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[13:53:01] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[13:53:21] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[13:57:12] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[13:57:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[13:59:12] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[13:59:32] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[14:03:25] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[14:17:06] *** Joins: lloda (~user@11-206-127-185.static.world-connect.ch)
[14:22:47] *** Joins: Wezl (Wezl@shell.oddprotocol.org)
[14:38:46] *** Joins: vats (~vats@103.158.91.71)
[14:55:20] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[15:26:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[15:26:57] *** Quits: vats (~vats@103.158.91.71) (Ping timeout: 240 seconds)
[15:27:06] <ns12> mdhughes: "It's tabs + spaces (an abomination)" - If not mistaken, your favorite operating systems (BSDs) use a mix of tabs and spaces in their kernel source code.
[15:34:07] *** Quits: johnjaye (~pi@173.209.65.233) (Ping timeout: 256 seconds)
[15:40:52] *** Joins: frost (~frost@user/frost)
[15:49:04] *** Joins: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[15:54:10] <wasamasa> seems indeed to be the case for OpenBSD at least
[15:54:17] <wasamasa> https://cvsweb.openbsd.org/cgi-bin/cvsweb/~checkout~/src/bin/cat/cat.c?rev=1.32&content-type=text/plain
[15:54:48] <wasamasa> see the getprogname line
[15:55:43] <sham1> Tabs for indentation, spaces for alignment
[15:57:47] <wasamasa> same for XNU sources
[15:59:29] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[16:03:27] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[16:07:07] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[16:09:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:11:40] *** Joins: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr)
[16:14:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:16:40] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:17:06] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[16:17:41] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[16:20:47] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[16:33:08] *** Joins: frost (~frost@user/frost)
[16:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[16:35:08] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:37:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:44:05] <mdhughes> But *I* don't mix tab & space. I don't work on kernel sources!
[16:46:03] <wasamasa> you could reduce the cognitive dissonance by writing code the same way your OS does, lol
[16:46:14] <wasamasa> mind you, bin/cat isn't kernel source
[16:49:29] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[16:51:22] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:52:27] <ns12> By default, Emacs seems to format Lisp code using a mix of tabs and spaces.
[16:54:04] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 250 seconds)
[16:54:27] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:59:17] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:59:34] <wasamasa> yes, but in a very stupid way
[16:59:43] <wasamasa> it's not about alignment or continuation lines at all
[17:00:37] <sham1> Emacs indents things weirdly anyway
[17:01:27] <sham1> One needs stuff like clang-format for C or SLIME with common lisp or whatever just to get good indentation. No need to rely on Emacs' weird indent logic
[17:08:15] <webshinra> I disagree strongly
[17:08:53] <webshinra> but that's just a side effect of indentation practice being a social phenomena
[17:10:15] <sham1> Well that's because it is
[17:11:20] <sjamaan> sham1: Emacs can be configured to indent differently (more sanely) for C
[17:11:23] <sham1> There's no technical reason why one needs to indent except in weird languages like Python that make it mandatory, but even then it arises from the social context of wanting to enforce readability (mileage may vary)
[17:11:37] <sjamaan> I found (setq c-default-style "bsd") useful
[17:12:47] <sham1> I'm not a fan of the Allman style
[17:12:59] <sham1> But that's a bit of a religious war so let's not
[17:13:52] <sjamaan> Point being you can customize it
[17:15:39] <sham1> Sure. But the advantage of clang-format for example is that it works for everyone. Which leads me to a more on-topic point of that I'd probably need to build an opinionated indenter for Scheme at some point
[17:27:39] *** Joins: cren (cren@tilde.team)
[17:28:56] <cren> hey, I'm new to scheme. Is there such a thing as a byte array in scheme?
[17:29:12] <sham1> Yes. bytevector
[17:29:27] <sham1> #u8(#xFF #x80)
[17:30:40] <sham1> There's also an alternative notation as an SRFI, #u8"hello", which produces a byte vector of length 5 with the characters converted to bytes
[17:37:45] <cren> I'm guessing that strings are utf-8 encoded or something by default?
[17:38:48] <sham1> At least in R7, strings don't have a specified encoding by the standard but yes, a string tends to be Unicode codepoints or UTF-8 encoded code units nowadays
[17:39:55] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:40:29] <sham1> I think strings can't also contain NULL characters since that means one could use C-style strings
[17:41:31] <sham1> Like, not allowing NULL characters means that the NULL character can be used as a sentinel
[17:42:10] *** Joins: frost (~frost@user/frost)
[17:44:44] <sham1> Or maybe it's just that an implementation *can* forbid NULL-characters. But nothing else in ASCII
[17:44:53] <sham1> That much I know
[17:58:38] *** Joins: klovett (~klovett@166.205.90.179)
[18:13:49] <ns12> sham1: "I think strings can't also contain NULL characters" - Where in R7RS-small is this mentioned?
[18:14:11] <sham1> Nowhere, I misremembered it
[18:14:52] <sham1> The actual text I was thinking of was: "Implementations may forbid certain characters from appearing in strings. However, with the exception of #\null, ASCII characters must not be forbidden."
[18:15:10] <sham1> That's from 6.7. Strings
[18:15:25] <sham1> 6th paragraph if I counted properly
[18:15:32] <ns12> Does this mean that the result of (make-string 10 #\null) is implementation dependent?
[18:15:37] <sham1> Yes
[18:17:01] <ns12> sham1: Are implementations required to warn me when I do (make-string 100 #\null), or is the program allowed to behave erratically?
[18:17:36] <sham1> No, it's not required to warn you
[18:18:02] <ns12> Can I include emojis in strings?
[18:18:16] <wasamasa> depends on the implementation what happens, lol
[18:18:26] <sham1> If the implementation supports that part of Unicode
[18:18:33] <wasamasa> the only safe stuff is ASCII, NUL aside
[18:18:47] <sham1> "It is an error to pass such a forbidden character to make-string, string, string-set!, or string-fill!, as part of the list passed to list->string, or as part of the vector passed to vector->string (see section 6.8), or in UTF-8 encoded form within a bytevector passed to utf8->string (see section 6.9)."
[18:18:50] <ns12> To be portable, I must use bytevectors for emojis?
[18:21:08] <sham1> Well I'd still question the "portability" in that case because you'd need to somehow know the encoding
[18:23:07] * edgar-rft screws handles on his emojis to make them portable
[18:24:03] <ns12> I guess the best way is to use cond-expand to check for the "full-unicode" feature before using emojis in strings.
[18:24:26] <sham1> Yeah
[18:24:36] <sham1> Or just not use emoji
[18:28:00] <ns12> Is there a way to add my own feature identifier that cond-expand can then check for? Something similar to Common Lisp's (push :foo *features*).
[18:28:33] <sham1> Can't really do that
[18:28:46] <sham1> No standard way at least
[18:28:55] <ns12> That's too bad :(
[18:28:56] <sham1> Since `features` is a procedure
[18:29:46] <ns12> Looking forward to (add-feature! 'foo)
[18:30:21] <dpk> that's issue nr 1 on my list: Declaring supported features to ~cond-expand~ in libraries
[18:30:55] <wasamasa> portable scheme code is an illusion anyway
[18:31:16] <ecraven> wow, the paho mqtt c library api is ... rather bad :-/
[18:31:17] <dpk> you can hack around it by creating a dummy library my-feature.sld and testing for (library (my-foo my-feature)), but that can't provide a feature conditional on other features
[18:31:36] <wasamasa> as soon as your code is split into several files, you need to figure out all the implementation-specific ways library file names and load paths work
[18:32:27] <sham1> I think the only constant is that nowadays implementations look for .sld files in the load paths
[18:32:33] <wasamasa> nope
[18:32:51] <sham1> Which implementations don't look for .sld if they're R7
[18:33:00] <ns12> There will hopefully be a portable build tool for Scheme, similar to Common Lisp's ASDF.
[18:33:10] <sham1> It'd be nice yeah
[18:33:16] <wasamasa> CHICKEN at the very least
[18:33:24] <sham1> Ah
[18:33:27] <sham1> Damn
[18:33:33] <wasamasa> https://github.com/kanaka/mal/blob/master/impls/scheme/Makefile
[18:33:39] <wasamasa> https://github.com/kanaka/mal/blob/master/impls/scheme/run
[18:33:57] <ns12> Is Chicken even compliant with R7RS-small?
[18:34:08] <wasamasa> there's a r7rs egg
[18:34:30] <sham1> I don't think we need ASDF as such, but some kind of standardisation for libraries would be nice
[18:34:35] <sham1> Even if informal
[18:35:03] <wasamasa> https://www.mail-archive.com/chicken-hackers@nongnu.org/msg08004.html
[18:35:07] <sham1> Well, libraries in the sense of load paths and such instead of define-library which of course exists already. Like whether to look for .sld and where
[18:35:13] <Franciman> will r7rs large contain anything about FFI?
[18:35:37] <wasamasa> jokes on you, that presumes file systems are a thing, lol
[18:36:10] <sham1> Well where would you load your stuff then?
[18:36:24] <wasamasa> think of highly embedded systems
[18:36:35] <wasamasa> where the base libraries all live in the same place
[18:36:53] <sham1> Yeah, and those usually don't need libraries either. Even if you have a bunch of files concatenated together that still counts in a sense
[18:36:54] <wasamasa> there doesn't need to be a direct correspondence between the library identifier and underlying path
[18:37:23] <sham1> Clearly that kind of load-path spec would only make sense for implementations that actually can have a notion of a filesystem
[18:37:29] <wasamasa> so you'd think, but there's an implementation doing a half-assed job of libraries
[18:37:40] *** Joins: sp1ff (~user@c-73-189-25-64.hsd1.ca.comcast.net)
[18:37:44] <wasamasa> aiming to be embedded
[18:37:47] <wasamasa> what was its name again
[18:38:11] <sham1> Franciman: I don't think there's even any sort of an SRFI for FFI so probably not
[18:38:19] <wasamasa> picrin
[18:38:24] <sham1> At least any SRFI that is relevant
[18:38:24] <Franciman> very well
[18:38:29] <wasamasa> it only supports built-in libraries
[18:38:33] <wasamasa> no user-defined libraries
[18:38:51] <wasamasa> the kernel module scheme would be a better example
[18:39:03] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[18:39:18] <wasamasa> there are C implementations where #include "system-header.h" doesn't correspond to a file system location
[18:39:32] <wasamasa> another complication is having to think about directories and paths
[18:39:58] *** Joins: seninha (~seninha@user/seninha)
[18:40:17] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 240 seconds)
[18:40:18] <wasamasa> for example, suppose you want truly portable code working both on windows and non-windows platforms
[18:41:01] <ecraven> just do as CL does, and add PATHNAMES! :P
[18:41:01] <ns12> Shatter the obsolete windows!
[18:41:20] <wasamasa> gambit is very forward-thinking and supports URLs and relative references
[18:41:23] <ecraven> then you can access anything, VAXEN, Lisp Machines, at caters to every need :D
[18:41:37] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[18:41:55] <sham1> Ah yes, the #p""
[18:42:01] <ecraven> indeed ;)
[18:42:23] <wasamasa> (define-library (github.com/gambit/hello test)
[18:42:28] <wasamasa> (import (.. hello))
[18:42:31] <ecraven> in the end, portable pathnames are *hard*, but people want simple interfaces (which just doesn't work)
[18:42:38] <ecraven> for example, file names are *not* utf-8 on linux
[18:42:42] <ecraven> well, UTF in any form
[18:42:49] <wasamasa> yeah, I discovered that when writing a git thing
[18:42:52] <ecraven> but people *want* them to be ;)
[18:42:55] <wasamasa> I ended up having to not do utf8
[18:42:57] <sham1> They're just bytes that don't contain #\null or #\/
[18:43:11] <sham1> Well, the path contains #\/ but not the filename
[18:43:14] <ecraven> yea, but when writing my application, I don't *want* to treat them as anything but strings
[18:43:21] *** Joins: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com)
[18:43:31] <Franciman> how are they encoded, ecraven ?
[18:43:41] <sham1> And neither do users unless they're nigh psychopaths
[18:43:47] <ecraven> Franciman: they are not, they are just bytes. you can write utf-8 into it, but you can also write anything else
[18:43:53] <Franciman> ahh i see
[18:43:57] <ecraven> well, just saying, if you think
[18:43:58] <sham1> #u8"/path/to/foo"
[18:44:02] <Franciman> it's not enforced to be utf8
[18:44:07] <ecraven> "pathnames are utf-8 on linux", that's just not true... nothing enforces it
[18:44:18] <Franciman> it's just customary
[18:44:19] <ecraven> you *can* get non-utf-8 bytes from the filesystem
[18:44:26] <ecraven> probably something like that for utf-16le on windows
[18:44:29] <Franciman> custumary*
[18:44:33] <ns12> For the Scheme programmer, pathname differences will hopefully not matter if there are portability libraries. (e.g. cl-fad and uiop for Common Lisp).
[18:44:33] <sham1> Same way how on Windows a path probably isn't UTF-16LE yeah
[18:44:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:44:55] <sham1> A lot of these problems would go away if one didn't need to worry about Windows
[18:44:59] *** Joins: seninha (~seninha@user/seninha)
[18:45:15] <sham1> Then at least the paths would *look* like /foo/bar/baz (also usable on Windows but good luck doing drives)
[18:45:25] <ecraven> ns12: but there are none, I think, and you can't write one that your Scheme Implementation will use without any work on their part
[18:45:34] <sham1> Like there's file:/// but who wants to deal with that
[18:45:51] <ecraven> sham1: that's a rather narrow view ;) lots of systems have different pathname schemes, just most of them are not widely known
[18:46:06] <ecraven> as I said, lisp machines (different for the different flavours), vaxen/vms, and so on
[18:46:18] <ecraven> of course, you can just ignore those, but then, you could just ignore windows too
[18:46:29] <ecraven> that's how CL's PATHNAME came to life, I guess ;)
[18:46:30] <sham1> Didn't lisp machines tend to use more database-y file stuff?
[18:46:49] <ecraven> no the ones I know, they mostly just also had a server component in the pathname
[18:46:54] <ecraven> (and other components at the end, versions and so on)
[18:47:02] <sham1> Ah
[18:47:09] <sham1> So… again, file URLs
[18:47:24] <ecraven> well, on a lisp machine, there were no URLs, only pathnames
[18:47:26] <sham1> file://host/path?version=whatever
[18:47:31] <sham1> Yeah but for the future
[18:47:44] <dpk> oh, news from jcowan: ‘pls tell schemers i had emerg foot surg fri, followup surg on tues, prospects good, tx.’
[18:47:49] <sham1> Nice
[18:48:06] <sham1> Let's hope all goes well
[18:48:14] <ecraven> https://tumbleweed.nu/r/lm-3/uv/chinual.html#specific_002dhost_002dsyntax
[18:49:07] <wasamasa> hohum
[18:49:31] <wasamasa> so the reason why #p"..." is a thing is to automatically create path objects with all these fields filled in?
[18:49:45] <sham1> I think so
[18:49:51] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[18:50:11] <sham1> I've had to deal with it when I've been doing some random CL programming and wanted to containerize my toolchain. It's fun to translate between paths on the container vs real machine
[18:54:01] <ecraven> wasamasa: that's my understanding, it is a string representation that is parsed into a pathname object
[18:54:43] <wasamasa> I always wondered why it would need to be a read macro
[18:54:51] <wasamasa> but yeah, that makes sense
[18:56:10] <sham1> Speaking of me blabbering on about URLs, I feel like something such as #url"" might be an interesting SRFI
[18:56:27] <sham1> Like new reader syntax and corresponding objects and such
[18:57:02] <ecraven> I never checked, but maybe its:// and vax:// and so on would work to actually use URL like PATHNAME works in CL
[18:57:25] <sham1> Yeah, just having a custom schema
[18:57:53] <sham1> Or maybe file+vax://<VAX path here>
[18:58:12] <sham1> Or file+vax:///<path>
[18:59:54] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:01:43] <gwatt> how many vaxen or its's are still running around?
[19:02:20] *** Quits: frost (~frost@user/frost) (Ping timeout: 250 seconds)
[19:03:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:04:01] <ecraven> it's getting easier all the time to have old machines run virtually ;)
[19:04:23] <ecraven> it all depends on the goals, but treating filesystems as only utf-8 + / separators is .. shortsighted, maybe ;)
[19:08:59] <Oxyd> But practical. So long as you have the ability to use a different library for path handling it's fine, since that one user who still cares about weird path formats can just use that.
[19:18:25] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:8f2a:6c48:c345:6afd)
[19:42:56] <edgar-rft> do old machines running virtually still take more than 30 minutes to load a program?
[19:44:59] <mdhughes> You should have to go into VR and load tape reels.
[19:45:38] <mdhughes> I use Atari800MacX all the time, and it has fast-load settings, which is immersion-breaking quite often.
[19:46:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[19:47:08] <edgar-rft> I once had a tape-wheel machine emulator running on a gigahertz machine that simulated the tape-loading cycle very exactly :-)
[19:48:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[19:49:37] <edgar-rft> and if I remember right then some MAME games from the 1970s still start with a a one-minute loading gap before you can start playing :-)
[19:55:30] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:55:38] *** Joins: lispy (~lispy4@84.69.59.93)
[19:58:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:08:29] <mdhughes> The ones on archive.org usually take about 30s to start up.
[20:08:54] <mdhughes> Meanwhile modern games take even longer, and a login or two, because technology is regressing.
[20:09:49] <dpk> software gets slower faster than hardware gets faster, as several people have observed
[20:14:05] <tokie> i'm implementing define-syntax and i started writing some code that puts a transform in the heap, but i don't think that's what any scheme implementations really do
[20:14:26] <tokie> in particular you can't refer to a transform by its symbol like you could anything else 
[20:18:39] *** Joins: seninha (~seninha@user/seninha)
[20:18:44] <dpk> i don't really understand what you mean by 'putting a transform in the heap'
[20:18:53] <dpk> nor 'referring to a transform by its symbol'
[20:20:40] <sham1> dpk: ah yes, Wirth's law
[20:22:43] <tokie> dpk: if i define-syntax foo, foo is not a first class procedure and attempting to evaluate the symbol foo usually fails in implementations i believe
[20:22:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:24:14] <dpk> foo will be a first-class procedure somewhere in the basement, usually
[20:25:27] <dpk> Chibi and Guile at least both let you poke around and get the original procedure back, probably other implementations do too
[20:25:37] <dpk> but you're right that evaluating foo as an identifier is usually an error. and it doesn't make a huge amount of sense for evaluating it outside of operator position to be the way to get the procedure back
[20:25:58] <dpk> consider implementing identifier macros instead ;-)
[20:26:08] <tokie> well, it's not just an error on some implementations as much as they return "symbol foo not bound"
[20:26:11] <tokie> which is definitely confusing
[20:26:27] <tokie> i mean, i could fake that error i guess :)
[20:26:35] <dpk> it is confusing and tends to make people think that Scheme has two namespaces, which it doesn't
[20:27:06] <tokie> the easiest thing for me to do would be to print #<syntax-rules> or something like that
[20:27:13] <tokie> and then error if it's used incorrectly
[20:28:29] <tokie> what are identifier macros ?:)
[20:28:32] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0)
[20:28:32] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:7565:d4ee:7344:b4a0) (Changing host)
[20:28:32] *** Joins: skapata (~Skapata@user/skapata)
[20:29:28] <dpk> identifier macros mean that foo can expand as a macro if evaluated on its own, or in a context like (+ foo 1) or whatever
[20:30:04] <dpk> Guile's manual explains succinctly https://www.gnu.org/software/guile/manual/html_node/Identifier-Macros.html
[20:30:06] <tokie> oh, that's really interesting
[20:30:21] <dpk> they're part of R6RS and will be part of R7RS Large, by the looks of the current ballot
[20:35:10] *** Quits: lispy (~lispy4@84.69.59.93) (Quit: Leaving)
[20:35:38] *** Joins: lispy (~lispy4@84.69.59.93)
[20:38:08] <sham1> dpk: then again, what isn't
[20:38:19] <sham1> Aside from that one proposal about optional infix notation
[20:44:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:53d8:218c:4a2e:e687) (Ping timeout: 268 seconds)
[20:44:25] *** Joins: zwr (~zwr@2804:d45:b966:fb00:5d44:edfe:270d:6900)
[20:48:14] <drakonis> dpk: how do you get the original procedure back in guile?
[20:50:13] <dpk> https://www.gnu.org/software/guile/manual/html_node/Internal-Macros.html
[20:53:23] <ecraven> tokie: I seem to remember that some implementations did exactly that, printed some form of "this is syntax"
[20:53:55] <tokie> yeah, that's what i'm doing. anything else is really a pain
[20:54:48] <ecraven> however, this leads to problems... what does the following mean? (define-syntax foo ...) (let ((x foo)) (x 1 2 3))
[20:55:13] <ecraven> (it's clear what it means in RnRS Scheme, but does it mean the same in your implementation?)
[20:56:17] <tokie> that would be a runtime error for me
[20:56:45] <ecraven> in ((x foo)) or in (x 1 2 3)?
[20:56:56] <tokie> in (x 1 2 3)
[20:57:09] <tokie> > (bind-zero 1 2 3)
[20:57:11] <tokie> error: call of non-procedure: #<macro>
[20:57:27] <tokie> ^^ this is because i don't have macros .. working yet :)
[20:57:37] <tokie> so this is precisely what would happen if the runtime tried to apply a macro
[20:59:05] <tokie> it's sorta like if you tried to use the result of a define, which is #<void> in my implementation
[21:01:02] <tokie> if i put macros in their own namespace it feels like it could be more error prone in cases where the macro is shadowed or redefined. it's just a weird type of object
[21:02:11] <dpk> you need a compile time flag on each binding for whether it’s a macro or a runtime value
[21:02:51] <tokie> i have that
[21:03:00] <dpk> and that needs to be updated as you proceed through macro expansion, so that let-syntax gives it the macro flag and lambda gives it the runtime flag
[21:03:44] <dpk> or not updated per se but maintained correctly within each scope
[21:04:20] <dpk> even if let-syntax or lambda come from expanding another macro like let
[21:09:54] <tokie> ecraven: ehh, going back to your question. it's a little interesting. i guess if the compiler stage that checks if x is a macro is looking at the global binding X and it's a macro, then it could attempt to do macro expansion at compile time using the macro x is bound to
[21:10:08] <tokie> which i think is not normally allowed? i don't think you can alias macros?
[21:11:02] <tokie> yeah, i think you have to error at runtime for any attempt at evaluating the macro
[21:18:34] *** Quits: yewscion (~yewscion@ec2-34-234-185-163.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[21:23:13] *** Joins: prussianblue (~ghostpant@101.128.64.26)
[21:23:29] *** Parts: prussianblue (~ghostpant@101.128.64.26) ()
[21:26:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:26:43] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[21:35:55] <ecraven> if you want to conform to RnRS, then yes ;)
[21:36:18] *** Joins: jao (~jao@66.63.167.121)
[21:39:04] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:40:41] <tokie> ecraven: yeah, that's what i love about implementing schemes, lol
[21:42:21] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[21:44:21] *** Joins: prussianblue (~ghostpant@101.128.64.26)
[21:46:51] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[21:47:36] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[21:49:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[21:50:41] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[21:51:01] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[21:51:06] *** Quits: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) (Remote host closed the connection)
[21:51:24] *** Joins: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca)
[21:52:37] *** Joins: neceve (~quassel@2.26.93.228)
[21:53:31] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:54:32] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[21:56:07] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:02:02] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 240 seconds)
[22:02:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:03:55] *** Parts: prussianblue (~ghostpant@101.128.64.26) ()
[22:04:16] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:10:59] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:12:27] *** Joins: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d)
[22:18:23] *** Quits: Darkcoal (~user@2001:16a2:766a:3200:4088:250b:429e:6e9d) (Ping timeout: 268 seconds)
[22:19:43] *** Joins: Darkcoal (~user@130.164.162.247)
[22:24:53] <Zipheir> Thinking about bytestrings as a string alternative for the future, it's a bit odd that the procedures for working with them are split between SRFIs 160 (with u8vector- prefixes) and 207 (with bytestring- prefixes).  It's especially odd since there's nothing "stringier" about the 207 procedures.
[22:25:10] *** Quits: evdubs_ (~evdubs@user/evdubs) (Quit: Leaving)
[22:25:33] <Zipheir> And, of course, the *rest* are in R7RS-small and (r7rs bytevectors) with bytevector- prefixes.
[22:25:46] <Zipheir> That's three different families of procedures to keep track of.
[22:26:20] <Zipheir> I wonder if re-exporting them as a single "bytestring" family would make life easier.
[22:27:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:28:01] *** Joins: evdubs (~evdubs@user/evdubs)
[22:30:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:31:32] <dpk> Zipheir: as the coauthor of SRFI 207 with you, i'd like to point out that the naming convention for the procedures was not my decision 😛
[22:32:10] <dpk> in fact, i still regret agreeing to incorporate the procedure library into what i intended as a SRFI proposing only the notation
[22:32:34] <dpk> (coauthor with you and jcowan, i should note also)
[22:38:28] <sham1> IMO 207 should only be for #u8""
[22:39:00] <sham1> I'm not that big into this whole "bytestring" manipulation. I would have hoped for it to be more general bytevector stuff
[22:39:21] <sham1> Like why is there a bytestring-join, and why isn't it just a bytevector-join
[22:41:25] <Zipheir> dpk: Yes, I remember that now. :-/
[22:43:50] <Zipheir> sham1: Yes.  On top of that, we have u8vector-map, u8vector-for-each, etc. which *should* work on bytevectors (but don't, in Guile, at least.)
[22:44:27] <sham1> Damn it Guile
[22:44:37] <sham1> There's no reason for u8vector and bytevector to be disjoint
[22:46:32] <Zipheir> Well, wasamasa pointed out to me that an effective way to work with "raw" strings is an important counterpart of full Unicode strings, so I'm thinking some notion of "bytestrings" is a good thing.
[22:47:01] <Zipheir> The #u8"" notation goes a long way toward that, in terms of "stringy feel", at least.
[22:47:02] <sham1> I suppose, but I'd still rather see bytestrings being just a semantic thing on top of bytevectors
[22:47:08] <Zipheir> They are.
[22:47:11] <sham1> Like with the reader syntax
[22:47:23] <sham1> Yeah, they are. Still a bit weird with the suddenly different procedure names
[22:48:35] <Zipheir> I'm not sure how we can fix that, especially with SRFI 160 and the R6RS bytevector libraries both being in r7rs-large.
[22:48:43] <Zipheir> *shrug*
[22:49:07] <sham1> Eugh, why the R6 bytevectors
[22:49:16] <sham1> Isn't that just u8vector
[22:50:04] <Zipheir> http://www.r6rs.org/final/html/r6rs-lib/r6rs-lib-Z-H-3.html#node_chap_2
[22:50:25] <sham1> Ah
[22:50:49] <Zipheir> The biggest thing not in other libraries is the endianness stuff.
[22:51:20] <sham1> Having endianness is good
[22:52:24] <Zipheir> Also, the arbitrary-size ref procedures.  Kind of a weird fit with SRFI 160, that.
[22:52:32] <Zipheir> But, anyway.
[22:53:29] <Zipheir> There are some string procedures that have no byte{vector, string} analog, also: string-prefix?, string-contains, etc.
[22:53:50] <Zipheir> *analogue ?
[22:54:51] <Zipheir> Oh yes, and they aren't consistent with the string libraries in allowing optional start/end arguments.
[22:55:22] <Zipheir> Lots of work to be done.  I'm just not sure how it's all supposed to fit together.
[23:00:46] *** Parts: sonny (~sonny@bras-base-london1483w-grc-28-70-48-35-151.dsl.bell.ca) ()
[23:04:38] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[23:06:26] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:08:31] *** Joins: vats (~vats@180.149.226.25)
[23:09:10] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:16:18] <dpk> "I'm just not sure how it's all supposed to fit together." could well be the motto of R7RS Large, the way things are going …
[23:20:10] <sham1> We'll find a way
[23:25:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:25:47] *** Quits: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
[23:27:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:35:52] *** Joins: seninha (~seninha@user/seninha)
[23:40:37] *** Quits: Darkcoal (~user@130.164.162.247) (Quit: Darkcoal)
[23:41:16] *** Joins: gnomon (~gnomon@cpe1c872c7063d0-cm00fc8d8fbe70.cpe.net.cable.rogers.com)
