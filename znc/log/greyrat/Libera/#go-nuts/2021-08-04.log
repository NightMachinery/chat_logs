[00:00:48] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:51b6:6a2e:632b:2685) (Client Quit)
[00:03:21] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:51b6:6a2e:632b:2685)
[00:10:39] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[00:11:22] *** Joins: CoolerX (~CoolerX@user/coolerx)
[00:11:45] *** Joins: Kaivo (~Kaivo@user/kaivo)
[00:20:29] *** Joins: jsrnop (~mark@user/jsrnop)
[00:21:09] *** Joins: Guest39 (~Guest39@p200300c8cf22760046d0b83c644df6d8.dip0.t-ipconnect.de)
[00:23:19] *** Quits: Guest39 (~Guest39@p200300c8cf22760046d0b83c644df6d8.dip0.t-ipconnect.de) (Client Quit)
[00:30:08] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[00:31:42] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[00:32:32] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1009) (Quit: ZNC 1.8.2 - https://znc.in)
[00:33:36] *** Joins: menace (~someone@2001:a61:34ed:d601:8c69:28e9:2ede:a3d3)
[00:33:36] *** Quits: menace (~someone@2001:a61:34ed:d601:8c69:28e9:2ede:a3d3) (Changing host)
[00:33:36] *** Joins: menace (~someone@user/menace)
[00:33:51] *** menace is now known as Deknos
[00:35:33] *** imm__ is now known as imm_
[00:37:09] *** Quits: independent56 (~independe@95.148.245.54) (Ping timeout: 268 seconds)
[00:37:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:42:11] *** Joins: independent56 (~independe@95.148.245.54)
[00:54:49] *** Joins: vitejose (~vitejose@2600:6c40:5b00:6875:76e1:e3e:e31b:c6a2)
[00:55:19] <quippy> hey does anybody know where gopls stores its config?
[00:56:11] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[00:56:46] <quippy> there's supposedly a settings.json somewhere
[00:56:54] <quippy> but nobody online says where it is
[00:57:05] <quippy> they just say "I set this in my settings.json, thanks!"
[00:57:08] <b0nn> I think that that is editor dependant
[00:57:17] <quippy> crap
[00:57:19] <b0nn> VSCode uses settings.json
[00:57:33] <quippy> oh I see, that's specifically a VSCode thing
[00:57:37] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Ping timeout: 245 seconds)
[00:57:44] <quippy> that explains why #emacs is so confused by my (same) question
[00:58:03] <b0nn> Your *best* place to ask is #gopls on slack
[00:58:09] <quippy> yeah but then I have to use Slack
[00:58:16] <b0nn> I hear ya :)
[00:58:29] <quippy> I think you solved my riddle actually
[00:58:40] <quippy> now that I know that it's a VSCode snippet, I think it's just telling me to set a environment variable
[00:58:46] <quippy> which is frankly ridiculous, these kids and their VSCode
[00:58:51] <quippy> if I need to set an env var just tell me that
[00:59:18] <b0nn> Windows users would be ... huh
[00:59:33] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:59:35] <b0nn> It is weird, though, that they're relying on the editor config
[00:59:39] <quippy> they have env vars too don't they?
[00:59:45] * b0nn shrugs
[00:59:55] <quippy> yeah I'm just trying to add a build flag so that LSP will work for a specific package in my project
[01:00:06] <quippy> because it uses a build flag and it's not getting built by LSP
[01:00:16] <b0nn> um
[01:00:30] <b0nn> The lsp is a server that is run by your editor
[01:00:34] <quippy> right
[01:00:43] <b0nn> and your editor passes it json blobs of info
[01:00:45] <quippy> but it must store config somewhere, to know what arguments to pass to gopls
[01:01:08] <b0nn> hrm, we're at my limit of understanding to be honest
[01:01:16] <quippy> that's fair
[01:01:22] <quippy> I appreciate your help anyway
[01:01:37] <b0nn> np, blind leading the blind is my specialty :)
[01:01:44] <quippy> lmao
[01:04:09] <quippy> ah I figured it out, it is editor-dependent
[01:04:18] <quippy> but the first part of the json is a keyword I can search for in Emacs
[01:04:47] <b0nn> oh nice
[01:06:30] <quippy> well thanks for your help, I literally couldn't have done it without you
[01:06:39] <quippy> I thought the JSON example I kept finding was a gopls config
[01:06:46] <quippy> just knowing it was VSCode was immensely helpful
[01:06:58] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Ping timeout: 240 seconds)
[01:07:09] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Remote host closed the connection)
[01:13:31] *** Joins: prophet60091_ (~prophet60@87.123.153.195)
[01:28:12] *** Quits: tane (~tane@dslb-002-201-234-072.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[01:31:44] *** Quits: sidy (~sidy@user/sidy) (Read error: Connection reset by peer)
[01:34:15] <mikoto-chan> https://dpaste.com/7HJ7LKW5U
[01:34:41] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[01:34:55] <Tv_> programming in comments?
[01:34:58] <mikoto-chan> hey, I have this struct that I use to map data from an sqlite db to my website but I noticed that sqlite doesn't allow you to have a list of strings
[01:35:58] <mikoto-chan> what would the solution for this be? I also can't create a table for the Agenda type because it contains the type Schedule
[01:36:11] <Tv_> sql tends to have opinions like that, in general. either split the data into more relational form, or kludge it with e.g. https://www.sqlite.org/json1.html
[01:37:22] *** Quits: nolesswrong (~nolesswro@45.32.1.17) (Remote host closed the connection)
[01:37:44] *** Joins: nolesswrong (~nolesswro@45.32.1.17)
[01:38:47] <Tv_> maybe that's 3 tables, agendas schedules objectives, with the appropriate foreign keys
[01:42:02] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[01:42:26] <mikoto-chan> thanks, I was thinking of foreign keys yeah
[01:45:06] *** Quits: revolve (~u0_a227@82-132-247-62.dab.02.net) (Ping timeout: 240 seconds)
[01:46:34] *** Joins: revolve (~u0_a227@82-132-244-73.dab.02.net)
[01:46:42] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 240 seconds)
[01:49:54] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:51b6:6a2e:632b:2685) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[01:52:13] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:53:37] *** Quits: Giedrius (~giedrius@5.133.65.65) (Remote host closed the connection)
[01:55:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[01:56:08] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[01:57:45] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[01:58:19] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:04:43] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 268 seconds)
[02:05:56] *** Joins: Guest67 (~guest67@2620:10d:c090:400::5:c228)
[02:06:57] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 258 seconds)
[02:07:06] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 240 seconds)
[02:07:17] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[02:07:33] *** Quits: Guest67 (~guest67@2620:10d:c090:400::5:c228) (Client Quit)
[02:13:27] *** Quits: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be) (Ping timeout: 252 seconds)
[02:22:53] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:23:23] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[02:23:55] *** Joins: flynn (~mcbloch@user/flynn)
[02:28:51] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[02:29:11] *** Joins: holgersson (~quassel@user/holgersson)
[02:35:46] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:45:24] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 272 seconds)
[02:47:02] *** Quits: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[02:50:15] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: dalan6)
[02:50:41] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[02:51:35] *** Joins: schmillin_ (~schmillin@user/schmillin)
[02:51:46] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 240 seconds)
[02:54:54] *** Quits: schmillin (~schmillin@user/schmillin) (Ping timeout: 272 seconds)
[02:57:03] *** Joins: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net)
[02:58:53] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:01:41] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (Remote host closed the connection)
[03:02:02] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[03:07:02] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:13:33] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:17:49] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:22:28] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 258 seconds)
[03:29:44] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 272 seconds)
[03:31:21] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:31:43] *** Joins: jsrnop (~mark@user/jsrnop)
[03:32:20] *** Joins: f8l122 (~f8l12@154.3.40.85)
[03:34:08] *** Quits: f8l122 (~f8l12@154.3.40.85) (Read error: Connection reset by peer)
[03:36:16] *** Quits: f8l12 (~f8l12@d24-36-156-191.home1.cgocable.net) (Ping timeout: 258 seconds)
[03:48:18] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[03:48:27] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[03:48:27] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[03:54:07] *** Quits: sgarciapdx (~serge@irc.shork.io) (Quit: The Lounge - https://thelounge.chat)
[03:59:59] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:01:20] *** Joins: sgarciapdx (~serge@irc.shork.io)
[04:05:24] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[04:06:59] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[04:12:31] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 250 seconds)
[04:15:22] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[04:27:15] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 250 seconds)
[04:28:01] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1) (Ping timeout: 258 seconds)
[04:39:56] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[04:40:06] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[04:40:06] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[04:44:09] *** Quits: prophet60091_ (~prophet60@87.123.153.195) (Ping timeout: 252 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:35] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:52] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 258 seconds)
[04:55:14] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 272 seconds)
[04:58:24] *** Quits: independent56 (~independe@95.148.245.54) (Ping timeout: 272 seconds)
[05:00:06] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 252 seconds)
[05:01:08] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:02:29] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[05:02:42] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[05:02:42] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[05:03:36] *** belak51 is now known as belak
[05:04:56] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:09:44] *** Joins: Torr (~Torr@user/torr)
[05:10:26] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 272 seconds)
[05:15:34] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:17:47] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[05:17:59] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[05:17:59] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[05:18:29] *** Joins: pepee (~user@user/pepee)
[05:19:23] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 258 seconds)
[05:20:11] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[05:24:22] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 258 seconds)
[05:29:44] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[05:34:31] *** Joins: moog (~moog@107.77.244.158)
[05:35:12] *** Quits: vitejose (~vitejose@2600:6c40:5b00:6875:76e1:e3e:e31b:c6a2) (Quit: vitejose)
[05:37:12] *** Joins: orbyt_v10 (~orbyt_v10@172.92.4.78)
[05:37:39] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[05:37:47] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[05:37:47] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[05:38:03] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[05:40:26] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:50:24] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[05:53:29] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-9422-5b43-2e0d-b19e.inf6.spectrum.com) (Ping timeout: 250 seconds)
[05:53:30] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 258 seconds)
[05:55:07] *** Joins: darkapex (~darkapex@user/darkapex)
[05:59:53] *** Joins: frost (~frost@59.71.241.179)
[06:10:41] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[06:11:23] *** Joins: kiril (~kiril@85.91.153.163)
[06:13:39] *** Quits: moog (~moog@107.77.244.158) (Quit: Leaving)
[06:14:18] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 240 seconds)
[06:16:14] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[06:21:01] *** Joins: freakazoid333 (~matt@35.136.210.185)
[06:22:37] *** Joins: daesu (~oriain@112.171.3.4)
[06:26:49] *** Joins: dr0n (~dr0n@94.11.23.235)
[06:31:11] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 250 seconds)
[06:38:34] *** Joins: freakazoid343 (~matt@35.136.210.185)
[06:39:28] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 256 seconds)
[06:41:22] *** Quits: freakazoid333 (~matt@35.136.210.185) (Ping timeout: 240 seconds)
[06:49:52] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[06:50:10] *** Joins: novns (~novns@user/novns)
[06:50:39] *** Quits: novns (~novns@user/novns) (Remote host closed the connection)
[06:51:08] *** Joins: novns (~novns@user/novns)
[07:01:42] *** Joins: f8l12 (~f8l12@37.19.198.98)
[07:05:09] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[07:05:22] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[07:05:22] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[07:13:56] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:16:21] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[07:19:30] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:23:27] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Ping timeout: 245 seconds)
[07:24:36] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[07:30:24] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 272 seconds)
[07:38:27] *** Joins: mud (~mud@user/kadoban)
[07:42:21] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 252 seconds)
[07:43:32] *** Joins: oxum (~oxum@122.172.39.197)
[07:50:30] *** Joins: otherchirps (~otherchir@119-18-3-187.771203.syd.nbn.aussiebb.net)
[07:51:41] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[07:53:06] *** Joins: oxum (~oxum@122.172.39.197)
[07:53:06] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[07:53:18] *** Joins: oxum (~oxum@122.172.39.197)
[07:53:58] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[07:54:10] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[07:54:10] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[07:55:45] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[07:56:01] *** Quits: otherchirps (~otherchir@119-18-3-187.771203.syd.nbn.aussiebb.net) (Quit: Leaving...)
[07:56:31] *** Joins: oxum (~oxum@122.172.39.197)
[07:57:23] *** Joins: gzj (~GZJ0X@192.243.120.171.16clouds.com)
[07:58:01] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[08:14:42] *** Quits: revolve (~u0_a227@82-132-244-73.dab.02.net) (Ping timeout: 245 seconds)
[08:17:37] *** Joins: revolve (~u0_a227@82-132-244-187.dab.02.net)
[08:20:58] *** Joins: oxum (~oxum@122.172.39.197)
[08:23:46] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[08:25:22] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 240 seconds)
[08:25:28] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[08:31:06] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[08:34:30] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 276 seconds)
[08:39:29] *** Joins: moonface (~moonface@45.133.4.32)
[08:41:47] *** Quits: moonface (~moonface@45.133.4.32) (Client Quit)
[08:46:46] *** Quits: gzj (~GZJ0X@192.243.120.171.16clouds.com) (Ping timeout: 258 seconds)
[08:51:30] *** Quits: jespada (~jespada@90.254.247.46) (Ping timeout: 240 seconds)
[08:53:02] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 245 seconds)
[08:53:52] *** Joins: jespada (~jespada@90.254.247.46)
[09:06:58] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[09:07:17] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[09:07:17] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[09:07:32] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[09:10:27] *** Joins: califax (~califax@user/califx)
[09:17:03] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Ping timeout: 258 seconds)
[09:17:22] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[09:23:47] *** Joins: hikhvar79607380 (~thelounge@x4db39c71.dyn.telefonica.de)
[09:33:05] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[09:39:36] *** Quits: normen (~normen@p200300d7173dc9003107d8b45696e155.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[09:40:04] *** Quits: fub (uid190747@id-190747.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[09:40:32] *** Quits: LiftLeft (~LiftLeft@138.199.10.79) (Ping timeout: 245 seconds)
[09:45:27] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[09:50:35] *** Joins: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66)
[09:52:15] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:53:15] *** Joins: arcatech (~arcatech@user/arcatech)
[09:54:04] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[09:55:46] *** Quits: bkircher (~bkircher@2001:a61:2531:2001:f3d0:f987:58d6:6d66) (Ping timeout: 240 seconds)
[09:56:13] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[09:58:58] *** Joins: zunk (~zunk@h-81-170-245-11.A240.priv.bahnhof.se)
[10:03:12] *** Joins: rgl (~rgl@bl12-47-147.dsl.telepac.pt)
[10:03:41] *** Joins: LiftLeft (~LiftLeft@191.96.150.49)
[10:07:21] *** Joins: oxum (~oxum@122.172.39.197)
[10:08:48] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[10:10:51] *** Joins: bkircher (~bkircher@2001:a61:24d6:2901:4d0a:964f:94a0:dc42)
[10:13:39] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[10:13:55] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[10:13:58] *** Joins: oxum (~oxum@122.172.39.197)
[10:15:58] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[10:17:34] *** Joins: oxum (~oxum@122.172.39.197)
[10:17:49] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:18:08] *** Joins: gggp__ (~gggp@60.10.194.46)
[10:18:12] *** Quits: LiftLeft (~LiftLeft@191.96.150.49) (Ping timeout: 256 seconds)
[10:19:55] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[10:20:02] *** gggp__ is now known as gggp
[10:21:36] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:22:08] *** Quits: pepee (~user@user/pepee) (Quit: bye $IRC)
[10:32:57] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[10:33:02] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[10:33:38] *** Joins: oxum (~oxum@122.172.39.197)
[10:34:42] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[10:38:16] *** Joins: prophet60091_ (~prophet60@87.123.153.195)
[10:38:19] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 258 seconds)
[10:38:49] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[10:57:44] *** Joins: oxum (~oxum@122.172.39.197)
[11:02:51] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 258 seconds)
[11:03:55] *** Joins: independent56 (~independe@95.148.245.54)
[11:04:33] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Remote host closed the connection)
[11:05:28] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:10:44] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:13:23] *** Joins: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net)
[11:13:49] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[11:13:56] *** Joins: dr0n (~dr0n@94.11.23.235)
[11:14:05] *** Joins: xsteadfastx (~marv@94.31.100.46)
[11:18:10] *** Joins: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it)
[11:20:51] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[11:23:07] *** Joins: zwr (~zwr@2804:d45:b966:fb00:12dd:3fbf:c15b:46e6)
[11:26:36] <eyJhb> One of the strengths with having struct tags in a struct, is the single source of information. But I guess it is also possible to overload such structs? With too many tags.
[11:27:02] *** Joins: fub (uid190747@id-190747.charlton.irccloud.com)
[11:27:42] *** Joins: gggp_ (~gggp@60.10.194.46)
[11:29:28] *** Joins: chripell (~chripell@109.255.230.3)
[11:30:34] *** Quits: f8l12 (~f8l12@37.19.198.98) (Ping timeout: 240 seconds)
[11:30:50] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[11:31:09] *** Joins: mrig (~mrig@user/mrig)
[11:33:35] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:34:12] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[11:35:05] *** Joins: saschagrunert (~saschagru@46.128.124.113)
[11:38:49] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f)
[11:39:58] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f) (Client Quit)
[11:40:24] *** Quits: qzio (~qzio@198.167.223.200) (Ping timeout: 276 seconds)
[11:41:32] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[11:45:37] *** Joins: qzio (~qzio@198.167.223.200)
[11:49:35] *** Parts: cheets (sid201914@user/daftmonk) ()
[11:52:18] *** Joins: CoolerX (~CoolerX@user/coolerx)
[11:55:54] *** Quits: zwr (~zwr@2804:d45:b966:fb00:12dd:3fbf:c15b:46e6) (Ping timeout: 252 seconds)
[11:55:55] *** Joins: Ergo^ (~ergo@91.238.59.144)
[11:58:51] *** Joins: frost (~frost@59.71.241.179)
[11:59:25] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[12:01:37] *** Joins: Xjs (~jannis@user/xjs)
[12:02:54] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[12:05:19] *** Quits: mhorn (~textual@134.134.137.82) (Read error: Connection reset by peer)
[12:08:03] *** Joins: mickey (~user@user/mickey)
[12:10:51] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:11:36] *** Quits: Schoentoon (~Schoentoo@schoentoon.com) (Ping timeout: 276 seconds)
[12:14:08] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 272 seconds)
[12:14:49] *** Quits: src (~src@user/src) (Ping timeout: 250 seconds)
[12:16:16] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:17:35] *** Quits: CoolerX (~CoolerX@user/coolerx) (Client Quit)
[12:17:59] *** Quits: dr0n (~dr0n@94.11.23.235) (Ping timeout: 258 seconds)
[12:18:48] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[12:29:37] <fub> Using sqlite here to save a few hundred thousand of rows. Im using a single goroutine which reads from a chan so I have a sync write to the db. Its a simple range over this channel with err=db.Exec("INSERT...").
[12:29:51] <fub> Im also using an atomic counter to see how many items I have sent to the channel.
[12:30:10] <fub> I can see the number increasing, but after some time the sqlite db does not grow and a count(*) shows there is now change
[12:30:21] <fub> however my db.Exec call does not give me an error
[12:30:34] <fub> is there some cache here I need to flush?
[12:30:43] *** Joins: gggp__ (~gggp@60.10.23.170)
[12:30:47] <fub> I thought the db.Exec() will auto commit it
[12:31:04] <fub> I use https://github.com/mattn/go-sqlite3
[12:33:10] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[12:33:52] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 245 seconds)
[12:37:59] *** Joins: oxum (~oxum@122.172.39.197)
[12:40:29] *** Quits: finnb (~finnb@51.15.63.237) (Quit: Ping timeout (120 seconds))
[12:40:40] *** Joins: finnb (~finnb@51.15.63.237)
[12:40:59] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 258 seconds)
[12:41:00] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 252 seconds)
[12:42:08] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 258 seconds)
[12:43:27] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 276 seconds)
[12:43:58] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[12:47:45] *** Joins: sysh (~sysh@212.237.182.120)
[12:52:02] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[12:52:51] *** Joins: zwr (~zwr@2804:d45:b966:fb00:11aa:62a6:6c3b:c774)
[13:09:09] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[13:11:44] <snappy> how does go env -w persist variables?
[13:21:07] <snappy> nevermind, i see it stores it in a env file (on macos)
[13:21:24] <bookworm> os.UserConfigDir()/go/env yes
[13:22:13] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[13:22:18] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[13:22:18] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[13:26:47] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 245 seconds)
[13:28:56] *** Joins: Xjs (~jannis@user/xjs)
[13:34:54] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[13:38:41] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[13:40:56] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:41:14] *** Joins: califax (~califax@user/califx)
[13:42:37] *** Quits: moto (~moto@user/moto) (Ping timeout: 245 seconds)
[13:43:44] *** Joins: moto (~moto@user/moto)
[13:44:28] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[13:50:24] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 276 seconds)
[13:53:17] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[13:57:00] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[13:57:23] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 244 seconds)
[14:01:26] *** Quits: darkapex (~darkapex@user/darkapex) (Read error: Connection reset by peer)
[14:05:36] *** Joins: darkapex (~darkapex@user/darkapex)
[14:15:50] *** Joins: nabromov (~nabromov@94.11.23.235)
[14:16:40] *** Quits: gggp__ (~gggp@60.10.23.170) (Read error: Connection reset by peer)
[14:19:07] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 258 seconds)
[14:21:17] *** Quits: daesu (~oriain@112.171.3.4) (Quit: Leaving)
[14:22:36] *** Joins: gggpkm (~gggpkm@123.116.95.154)
[14:32:37] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[14:32:59] *** Joins: califax (~califax@user/califx)
[14:45:22] *** Quits: revolve (~u0_a227@82-132-244-187.dab.02.net) (Ping timeout: 240 seconds)
[14:46:30] *** Joins: revolve (~u0_a227@82.132.186.244)
[14:51:50] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[14:53:14] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[14:57:04] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 258 seconds)
[15:06:25] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:8ded:befc:bf12:b752) (Quit: WeeChat 3.2)
[15:06:59] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[15:12:50] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:3d66:98fa:2b38:7415)
[15:22:53] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[15:29:03] *** Quits: gggpkm (~gggpkm@123.116.95.154) (Remote host closed the connection)
[15:32:03] *** Quits: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d) (Quit: ZNC - http://znc.in)
[15:32:24] *** Joins: lithammer (~lithammer@arch-vps.cloud.tilaa.com)
[15:48:54] *** Joins: gggp (~gggp@60.10.194.46)
[15:50:35] *** Joins: gggp_ (~gggp@60.10.23.170)
[15:54:11] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[15:55:06] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 240 seconds)
[16:05:18] *** Quits: qzio (~qzio@198.167.223.200) (Ping timeout: 258 seconds)
[16:05:28] *** Joins: gggp__ (~gggp@111.63.14.121)
[16:08:02] *** Quits: independent56 (~independe@95.148.245.54) (Ping timeout: 245 seconds)
[16:08:54] *** Quits: gggp_ (~gggp@60.10.23.170) (Ping timeout: 252 seconds)
[16:10:48] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 276 seconds)
[16:11:02] *** Joins: qzio (~qzio@198.167.223.200)
[16:13:19] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[16:13:24] *** Joins: gggp_ (~gggp@60.10.194.46)
[16:16:00] *** Quits: gueorgui (~gueorgui@user/gueorgui) (Remote host closed the connection)
[16:16:34] *** Quits: gggp__ (~gggp@111.63.14.121) (Ping timeout: 240 seconds)
[16:21:59] <j416> snappy: go env GOENV
[16:23:14] <snappy> ah thanks, makes sense now
[16:23:33] *** Joins: independent56 (~independe@95.148.245.54)
[16:23:44] *** Joins: bloony (~bloony@2a02:2121:10a:9a7a:1c13:86d4:5401:3)
[16:25:19] *** Joins: arahael1 (~arahael@124.170.238.106)
[16:25:53] *** Quits: Arahael (~arahael@124-150-74-227.tpgi.com.au) (Ping timeout: 265 seconds)
[16:35:46] *** Joins: mikoto-chan (~mikoto-ch@ip-193-121-10-50.dsl.scarlet.be)
[16:40:47] *** Joins: gueorgui (~gueorgui@2.30.136.31)
[16:40:52] *** Quits: gueorgui (~gueorgui@2.30.136.31) (Changing host)
[16:40:52] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[16:49:36] *** Joins: yoonkn (~user@175.197.208.79)
[16:50:29] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[16:51:42] *** Joins: Torr (~Torr@user/torr)
[16:52:02] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[16:52:34] *** Quits: independent56 (~independe@95.148.245.54) (Ping timeout: 240 seconds)
[16:55:52] *** Joins: gggp__ (~gggp@60.10.194.46)
[16:56:45] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1009)
[16:59:44] *** Quits: gggp_ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[17:00:20] *** Joins: independent56 (~independe@95.148.245.54)
[17:00:49] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[17:01:06] *** Quits: xsteadfastx (~marv@94.31.100.46) (Ping timeout: 256 seconds)
[17:01:34] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1009) (Client Quit)
[17:02:27] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[17:02:54] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[17:08:26] *** Quits: PinealGlandOptic (~PinealGla@37.115.210.35) (Quit: leaving)
[17:13:43] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[17:13:54] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[17:15:26] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Client Quit)
[17:16:48] *** Quits: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[17:17:01] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[17:17:05] *** Joins: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de)
[17:24:37] *** Joins: oxum (~oxum@122.172.39.197)
[17:25:10] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[17:26:02] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 256 seconds)
[17:26:25] *** Joins: oxum (~oxum@122.172.39.197)
[17:29:11] *** Quits: Xjs (~jannis@user/xjs) (Quit: Bye.)
[17:29:24] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:31:34] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 268 seconds)
[17:35:23] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 258 seconds)
[17:36:38] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[17:38:22] *** Quits: eau (~chat@user/eau) (Quit: bleh!)
[17:38:38] *** Joins: eau (~chat@user/eau)
[17:40:08] *** Quits: moto (~moto@user/moto) (Read error: Connection reset by peer)
[17:40:20] *** Joins: moto (~moto@user/moto)
[17:48:48] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[17:49:18] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[17:49:59] *** Quits: Ruxnor (kevin@user/kddlb) (Ping timeout: 265 seconds)
[17:56:19] *** Quits: samhza (~sam@samhza.com) (Remote host closed the connection)
[17:56:45] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[17:58:28] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[17:58:41] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[18:03:48] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[18:11:58] *** Quits: hikhvar79607380 (~thelounge@x4db39c71.dyn.telefonica.de) (Ping timeout: 272 seconds)
[18:16:23] *** Joins: gggp_ (~gggp@111.63.14.121)
[18:18:56] *** Joins: f8l12 (~f8l12@191.96.227.65)
[18:19:51] *** Quits: gggp__ (~gggp@60.10.194.46) (Ping timeout: 258 seconds)
[18:21:06] *** Quits: schmillin_ (~schmillin@user/schmillin) (Quit: Leaving)
[18:22:53] *** Quits: independent56 (~independe@95.148.245.54) (Remote host closed the connection)
[18:23:16] *** Joins: independent56 (~independe@95.148.245.54)
[18:28:15] <mikoto-chan> Tv_: https://github.com/jmoiron/sqlx
[18:28:24] <mikoto-chan> >Marshal rows into structs (with embedded struct support), maps, and slices
[18:28:37] <mikoto-chan> this sounds like a better solution for yesterday's problem
[18:29:30] *** Quits: independent56 (~independe@95.148.245.54) (Ping timeout: 240 seconds)
[18:39:58] <eric_hill> +1 for sqlx. Does a solid job without trying to be a full ORM.
[18:40:47] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Read error: Connection reset by peer)
[18:43:01] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[18:44:48] *** Quits: gggp_ (~gggp@111.63.14.121) (Ping timeout: 256 seconds)
[18:46:45] *** Joins: monoxane6 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:48:57] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Ping timeout: 265 seconds)
[18:48:57] *** monoxane6 is now known as monoxane
[18:49:46] *** Joins: oxum (~oxum@122.172.39.197)
[18:52:21] *** Joins: Ruxnor (kevin@user/kddlb)
[18:53:09] *** Joins: cmj (~cmj@68.207.254.124)
[18:53:49] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[18:56:33] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[18:58:50] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:59:46] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 240 seconds)
[18:59:59] *** Parts: nabromov (~nabromov@94.11.23.235) ()
[19:00:27] *** Joins: dr0n (~nabromov@94.11.23.235)
[19:01:02] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:01:08] *** Quits: frost (~frost@59.71.241.179) (Quit: Connection closed)
[19:01:15] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[19:03:14] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[19:04:13] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[19:09:09] *** Joins: mhorn (~textual@134.134.139.84)
[19:10:18] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[19:11:42] *** Joins: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net)
[19:13:58] *** Quits: saschagrunert (~saschagru@46.128.124.113) (Remote host closed the connection)
[19:17:25] *** Joins: arcatech (~arcatech@user/arcatech)
[19:25:42] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:30:23] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 258 seconds)
[19:32:13] *** Joins: LiftLeft (~LiftLeft@191.96.150.113)
[19:32:23] *** Joins: oxum (~oxum@122.172.39.197)
[19:37:11] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[19:37:17] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Ping timeout: 258 seconds)
[19:37:22] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 268 seconds)
[19:37:44] *** Joins: jinie (~jimmy@188.114.173.37)
[19:38:01] *** Joins: freakazoid343 (~matt@35.136.210.185)
[19:38:07] *** Joins: gggp (~gggp@60.10.194.46)
[19:41:12] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 252 seconds)
[19:42:02] *** Joins: freakazoid333 (~matt@35.136.210.185)
[19:43:41] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[19:43:44] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 256 seconds)
[19:46:41] *** Quits: bkircher (~bkircher@2001:a61:24d6:2901:4d0a:964f:94a0:dc42) (Quit: WeeChat 3.2)
[19:51:27] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[19:51:30] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:52:51] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[19:55:01] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[19:57:42] *** Joins: lilgopher (~textual@c-73-51-174-246.hsd1.il.comcast.net)
[19:59:24] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[20:09:46] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[20:10:54] <Tv_> mikoto-chan: different thing though. sqlx will read the result of `SELECT a,b,c FROM ...` into a `type T struct { A int, B string, C string }`, or multiple rows into a []T
[20:11:16] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[20:11:54] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[20:12:06] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[20:12:17] <Tv_> mikoto-chan: that doesn't help with field `C []string`; you need to somewhere, somehow, describe how that should stored in SQL tables, or punt and shove JSON into the database
[20:14:57] *** Joins: oxum (~oxum@122.172.39.197)
[20:15:56] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[20:17:01] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[20:19:49] *** Joins: oxum (~oxum@122.172.39.197)
[20:21:22] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 258 seconds)
[20:23:24] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[20:24:04] *** Joins: oxum (~oxum@122.172.39.197)
[20:24:40] *** Quits: fikran (~fikran@pool-108-31-11-131.washdc.fios.verizon.net) (Quit: leaving)
[20:27:16] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[20:29:40] *** Joins: bkircher (~bkircher@2001:a61:24d6:2901:4d0a:964f:94a0:dc42)
[20:31:21] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:31:50] <bookworm> shoving json into a sql DB is very suboptimal in my opinion then you might as well use nosql
[20:32:50] <ikke> psql seems to be of a different opinion
[20:33:09] *** Joins: oxum (~oxum@122.172.39.197)
[20:34:02] <shadowchaser> ikke because it allows it doesn't mean it's good decision to do that, i believe
[20:36:38] *** Quits: V (~v@anomalous.eu) (Ping timeout: 252 seconds)
[20:36:55] *** Joins: arcatech (~arcatech@user/arcatech)
[20:40:04] *** Quits: fub (uid190747@id-190747.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[20:45:22] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[20:45:49] *** Joins: V (~v@anomalous.eu)
[20:46:33] *** Joins: oxum (~oxum@122.172.39.197)
[20:47:29] <Tv_> postgres allows all kinds of things, many of which you most likely should not do
[20:47:29] <saml> how can I add social networking to IRC? if I follow few people in this channel, and I join, I want to notify those people. Or when they join, I want to be notified.. etc
[20:47:42] <Tv_> including programming the application logic inside the database, with a weird one-off language
[20:48:04] <Tv_> saml: your client should be able to show join/parts already
[20:48:39] <ikke> (most people go out of their way to filter these out even)
[20:49:03] <eric_hill> yea, I like irc because it's NOT tied to all my social
[20:49:10] <saml> SELECT * FROM followers WHERE followee = 'saml' AND follower IN (SELECT user_id FROM channels WHERE channel_id = 'go-nuts');
[20:49:49] <saml> i need to build something like this.. and not sure if relational db is the right way
[20:50:50] <saml> out of 616 people, i need to see who are my friends.  If I only have 5 people, it might be easier to check out of 5 people, who are in #go-nuts
[20:51:22] *** Quits: V (~v@anomalous.eu) (Ping timeout: 268 seconds)
[20:51:30] <saml> imagine all of 616 people are making such queries to detect who are their friends
[20:52:20] <saml> since V has quit. it's now 615 people. But if someone joins,  all of existing 615 people need to see if the new comer is a friend or not. And vice versa
[20:54:19] <saml> no wonder google dropped google plus. it's hard to implement
[20:54:22] *** Joins: src (~src@user/src)
[20:55:22] <Tv_> "need" -- no we don't
[20:55:29] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[20:55:36] <ikke> that involves indexing, caching, and a lot of bugs
[20:56:14] <Tv_> also every client already receives every part/join, all you need to do is highlight the ones that are your friends
[20:56:22] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 245 seconds)
[20:57:04] *** Quits: samhza (sam@2600:3c03::f03c:92ff:fe40:814c) (Remote host closed the connection)
[20:57:18] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[20:57:45] <saml> hrm so each client fetches friends list and caches.  and client detects if part/join-ed user is its friend
[20:58:24] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[20:58:32] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[21:00:06] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[21:00:58] *** Quits: mhorn (~textual@134.134.139.84) (Remote host closed the connection)
[21:01:16] *** Quits: absc (~absc@dynamic-adsl-94-34-194-170.clienti.tiscali.it) (Quit: Leaving.)
[21:01:20] *** Joins: arcatech (~arcatech@user/arcatech)
[21:01:26] *** Joins: mhorn (~textual@134.134.139.84)
[21:02:00] *** Joins: darkapex_ (~darkapex@user/darkapex)
[21:03:02] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 245 seconds)
[21:03:19] *** Joins: darkapex- (~darkapex@user/darkapex)
[21:03:32] *** Joins: oxum (~oxum@122.172.39.197)
[21:03:54] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[21:04:15] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[21:04:18] <saml> that makes sense. smart client
[21:04:27] *** Joins: oxum (~oxum@122.172.39.197)
[21:06:36] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 258 seconds)
[21:07:51] *** Joins: prophet60091__ (~prophet60@87.123.156.26)
[21:09:46] *** Quits: sysh (~sysh@212.237.182.120) (Read error: Connection reset by peer)
[21:09:54] *** Joins: tane (~tane@dslb-002-201-234-072.002.201.pools.vodafone-ip.de)
[21:10:41] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:10:58] *** Quits: prophet60091_ (~prophet60@87.123.153.195) (Ping timeout: 240 seconds)
[21:12:48] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[21:13:26] *** Joins: V (~v@anomalous.eu)
[21:14:49] *** Quits: revolve (~u0_a227@82.132.186.244) (Read error: Connection reset by peer)
[21:14:54] *** Joins: arcatech (~arcatech@user/arcatech)
[21:14:56] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:16:58] *** Joins: revolve (~u0_a227@82-132-245-56.dab.02.net)
[21:17:45] *** Quits: samf (~root@159.65.228.88) (Quit: WeeChat 1.9.1)
[21:18:33] *** Joins: samf (~root@159.65.228.88)
[21:21:41] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:22:35] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[21:23:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[21:23:33] *** Joins: oxum (~oxum@122.172.39.197)
[21:23:53] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[21:24:05] *** Joins: oxum (~oxum@122.172.39.197)
[21:24:37] *** Quits: theoceaniscool_ (~theoceani@93.177.120.45) (Ping timeout: 258 seconds)
[21:26:42] *** Quits: karhunkynsii (~karhunkyn@user/karhunkynsi) (Ping timeout: 240 seconds)
[21:27:15] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:27:54] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 252 seconds)
[21:28:20] *** Joins: arcatech (~arcatech@user/arcatech)
[21:28:27] *** Joins: theoceaniscool_ (~theoceani@93.177.120.45)
[21:30:50] *** Joins: c10l (~c10l@89.34.167.207)
[21:30:52] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[21:31:05] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:31:08] *** Joins: oxum (~oxum@122.172.39.197)
[21:31:29] *** Quits: oxum (~oxum@122.172.39.197) (Remote host closed the connection)
[21:31:30] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:32:06] *** Joins: oxum (~oxum@122.172.39.197)
[21:34:10] *** Joins: yelnah (~felix@2001:44b8:3086:9f:6f0:21ff:fe3c:d4d7)
[21:35:03] *** Joins: neurocyte (~neurocyte@45.14.189.79)
[21:35:04] *** Quits: neurocyte (~neurocyte@45.14.189.79) (Changing host)
[21:35:04] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[21:35:09] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[21:35:12] *** Quits: ofh (~felix@110-174-253-90.static.tpgi.com.au) (Ping timeout: 272 seconds)
[21:37:04] *** Quits: oxum (~oxum@122.172.39.197) (Ping timeout: 256 seconds)
[21:39:03] *** Joins: arcatech (~arcatech@user/arcatech)
[21:39:07] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[21:41:47] <lungaro_> anyone know if go was forked? https://vlang.io/ -- I should read into this a bit more but i can't tell how they did what they did
[21:42:14] *** Joins: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec)
[21:44:17] <A_Dragon> saml: hexchat already supports a friends list.
[21:44:35] <A_Dragon> and hexchat already supports plugins
[21:45:08] <seebs> i sort of disrecommend v at this point
[21:45:25] <A_Dragon> and if you dare, hexchat supports go plugins too: https://github.com/A-UNDERSCORE-D/go-hexchat
[21:45:27] <A_Dragon> but uh
[21:45:30] <seebs> https://christine.website/blog/vlang-update-2020-06-17
[21:45:31] <A_Dragon> be very afraid.
[21:45:48] <eyJhb> the `if err := r.ParseForm(); err != nil { % do stuff % }` is a subtle annoyance at this point... It is a user error (I guess), but could as well be a server error
[21:45:49] <seebs> wait, if *go* was forked?
[21:46:00] *** Joins: codebam (~codebam@user/codebam)
[21:46:00] <seebs> what would go being forked have to do with vlang?
[21:46:14] <lungaro_> yeah, v lang is like 80% of go and looks the same
[21:46:19] <seebs> ...
[21:46:20] <codebam> `if !strings.HasPrefix(update.Message.Text, "/test")` how would I do this for an array of valid strings?
[21:46:27] <A_Dragon> eyJhb: if you're sure an error cant happen then ignore it
[21:46:33] <A_Dragon> codebam: with a for loop
[21:46:41] <seebs> it doesn't look even similar to go to me
[21:46:45] <codebam> A_Dragon: oh okay. sounds good
[21:46:49] <A_Dragon> but also ignore errors at your peril
[21:46:55] <seebs> i mean, except for the {}
[21:46:59] <A_Dragon> and dont just do r.ParseForm()
[21:47:06] <A_Dragon> do _ = r.ParseForm()
[21:47:07] <A_Dragon> be explicit
[21:48:17] <A_Dragon> ...on second thought maybe dont touch that go hexchat stuff, it'll work but thats terrifyig
[21:48:26] <A_Dragon> and thats the author saying that x.x
[21:48:33] <A_Dragon> ` void* callback_id_ptr = (void *) (uintptr_t) callback_id;`
[21:48:40] *** Joins: gggp_ (~gggp@123.113.184.133)
[21:49:19] <eyJhb> I have never really encountered that error, but unsure if I can ignore it. I am very close at just doing a middleware, that will run on anything, and then do a parseform.
[21:49:51] <codebam> am I doing this right? commands := [2]string{"/test", "/hello"}
[21:49:59] <codebam> I want to declare an array of strings
[21:50:06] <eyJhb> Seems right yes
[21:50:19] <A_Dragon> codebam: do you want an array or a slice?
[21:50:22] <codebam> it's telling me that it's an int when I for loop over it like `for command := range commands {}`
[21:50:33] <A_Dragon> is this constant at compiletime?
[21:50:33] <codebam> A_Dragon: I'm not sure. I just want to loop over it
[21:50:37] <codebam> yeah it should be
[21:51:19] <A_Dragon> you can do [...]string{a,b,c} in that case, but I'd suggest a slice most of the time ([]string{})
[21:51:38] <A_Dragon> and no that for is not quite right, in that format `command` is an int, and the index in commands
[21:51:48] <A_Dragon> if you want the string itself you want `for _, command := range commands`
[21:52:07] <A_Dragon> you may want to give the tour of go a readthrough
[21:52:22] *** Quits: gggp (~gggp@60.10.194.46) (Ping timeout: 272 seconds)
[21:52:31] <codebam> oh I see okay, thank you. what are the differences between a slice and an array?
[21:52:40] <codebam> is a slice a linked list?
[21:52:46] <A_Dragon> thats explained in the tour, buuut
[21:52:50] <A_Dragon> no, it is not
[21:52:54] <A_Dragon> slices are variable size arrays
[21:53:00] <A_Dragon> dont think too hard about their implementation
[21:53:12] <codebam> oh okay, cool
[21:53:33] <A_Dragon> if you _must_ know: slices are slightly bigger than arrays, and when they're expanded over the size of their backing array, a new array of twice the size is created, and the data is copied from old to new
[21:53:42] <A_Dragon> this is all done by the `append()` builtin
[21:53:52] <A_Dragon> but check out https://tour.golang.org
[21:54:05] <A_Dragon> it's far better at explaining this than I could ever be
[21:54:26] <codebam> okay I'll check that out. I already found the page on slices
[21:54:28] <seebs> a slice is a reference-to a chunk of something that's shaped roughly like a slice or array
[21:54:29] <codebam> thanks for the help!
[21:54:36] *** Quits: dalan6 (~dalan@27-32-30-220.tpgi.com.au) (Quit: Ping timeout (120 seconds))
[21:54:40] <A_Dragon> codebam: notedf
[21:54:47] <A_Dragon> whoops, sorry that is the wrong chat
[21:54:52] <codebam> all good :)
[21:54:53] *** Joins: dalan6 (~dalan@27-32-30-220.tpgi.com.au)
[21:54:58] <A_Dragon> codebam: no problem! feel free to ask more questions
[21:55:07] <A_Dragon> seebs: slices contain exactly arrays :P
[21:55:15] <A_Dragon> see reflect.SliceHeader or runtime.SliceHeader
[21:55:48] <A_Dragon> its basically a struct { length int; data *[...]data }
[21:55:53] <A_Dragon> but with a dash of magic
[21:56:05] <A_Dragon> I think reflect has it as an *interface{}
[21:56:18] *** Joins: arcatech (~arcatech@user/arcatech)
[21:56:42] <A_Dragon> https://pkg.go.dev/reflect#SliceHeader data is a uintptr
[21:56:58] <A_Dragon> which makes sense, slightly less safe than interface{} but there be dragons anyway so $shrug
[21:57:48] <seebs> i would argue that it's not exactly an array. if you do make([]int, 8), there is not an actual thing anywhere with the type `[8]int`, there's just a region of storage suitable for that.
[21:58:05] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[21:58:26] <A_Dragon> ([8]int).sliceHeader.Data will work in that case
[21:58:34] <A_Dragon> theres just no promise that it isnt swiped out from under you
[21:58:45] <A_Dragon> I think, anyway, for the assert
[21:58:58] <A_Dragon> either that or you get to have looots of fun with pointer math
[21:58:59] <seebs> sure. but you could also treat it as a pointer to [7]int.
[21:59:03] <A_Dragon> yes!
[21:59:17] <A_Dragon> sizing is not checked at runtime for array types
[21:59:22] <seebs> and [8]int and [7]int are incompatible types, so the storage isn't actually both of them. so i would argue that the slice's storage is not necessarily part of any array.
[21:59:54] <seebs> like, if you take a slice out of an array, then its backing store is part of an array. but if you make a slice, or expand it with append, there's no actual "the array" that it's a slice of.
[22:00:15] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f)
[22:00:16] <A_Dragon> (walking into Im unsure, but can check), the representation in-memory is the same for both, sizeof() chunks of data, of which there are n, where n is the number of arrays
[22:00:23] <A_Dragon> append doesnt expand, it recreates and copies
[22:00:59] <A_Dragon> and you can definitely get chunks of the array that are shared with two slices, its a nice footgun, in fact, to modify a slice of a slice
[22:01:14] <A_Dragon> s/number of arrays/size of the array/
[22:01:16] <ikke> Because the space after the array can already be allocated
[22:01:26] <A_Dragon> ^
[22:01:40] <A_Dragon> arrays (both for slices and just in general) are contiguous memory
[22:02:00] *** Quits: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Ping timeout: 256 seconds)
[22:02:23] <seebs> i would argue that an "array" in Go is actually a datatype, too.
[22:02:30] <A_Dragon> its.... fuzzy
[22:02:38] <A_Dragon> there is the data type, and the memory representation
[22:02:51] <seebs> the spec only talks about "array" as a data type.
[22:03:04] <A_Dragon> yes, because slices are implementation details
[22:03:18] <A_Dragon> see the giant warning on top of reflect.SliceHeader
[22:03:56] <A_Dragon> the CURRENT method for storing arrays is very C like, ie, for [n]T, n consecutive sizeof(T) chunks of memory
[22:04:34] <A_Dragon> where access like arr[n] is *(arr+(n*sizeof(T)))
[22:04:59] <A_Dragon> the storage for the backing array slices use is the same, and could be converted
[22:05:09] <A_Dragon> this is all behind the scenes and behind the type system
[22:05:11] <A_Dragon> thus here be dragons
[22:05:32] <A_Dragon> check https://blog.golang.org/slices-intro for more info
[22:05:37] <Tv_> seebs: specific arrays are. [32]byte is a type.
[22:05:53] <codebam> how do I get the numbers in this string? it's saying that word is a rune? https://x0.at/DDRc.txt
[22:05:54] <Tv_> seebs: "array" isn't a type, like the concept of "map" isn't a type, as such
[22:06:08] <codebam> oh wait
[22:06:14] <Tv_> seebs: or `[] ` by itself, or just `chan`, etc etc
[22:06:24] <codebam> well I removed the [0] but that didn't fix it
[22:07:17] <A_Dragon> codebam: what are you trying to do?
[22:07:21] <ikke> Tv_: Are they 'Kinds' (like how reflect calls it)
[22:07:32] <A_Dragon> ikke: the concept of an array? yes
[22:07:35] <Tv_> ikke: sure, that's what's often been used in that sort of general role
[22:07:45] <codebam> A_Dragon: trying to pass a string like "1 2 3 4" and get an int slice of {1, 2, 3, 4}
[22:08:07] <A_Dragon> codebam: is the number of ints known ahead of time?
[22:08:17] <codebam> no it's not
[22:08:33] <codebam> I'm just writing a simple multiplication bot to get the hang of go
[22:08:37] <A_Dragon> dont use [0] there
[22:08:41] <A_Dragon> sec
[22:08:41] <codebam> yeah I fixed that
[22:08:50] <Tv_> codebam: if you still have trouble, put it on play.golang.org and make it runnable
[22:09:00] <codebam> Tv_: okay will do
[22:09:06] <A_Dragon> isnt there a strings.Ints?
[22:09:18] <A_Dragon> there is not
[22:09:51] *** Joins: prophet60091____ (~prophet60@83.97.23.20)
[22:10:00] <codebam> here it is https://play.golang.org/p/VwTHwaGoKT2
[22:10:11] <codebam> you won't be able to run it without that environment var for the bot key
[22:10:17] <Tv_> codebam: a lot of noise unrelated to the string parsing question
[22:10:19] <codebam> but I can uh modify it so it's not a bot
[22:11:25] <Tv_> codebam: looks like you need to handle errors from ParseInt
[22:12:07] <codebam> https://play.golang.org/p/Y5ekCa6IHEB
[22:12:18] <codebam> yeah it says it's a rune not a string
[22:12:31] <A_Dragon> https://play.golang.org/p/nqI0T1DiLvM thats how I'd do it
[22:12:36] <Tv_> codebam: that's not the error message you get
[22:12:53] <A_Dragon> I think their IDE is complaining and needs a refresh
[22:12:57] <A_Dragon> what IDE are you using codebam ?
[22:13:04] <Tv_> codebam: click run on your example and fix *that* compilation error
[22:13:50] <codebam> `multiple-value strconv.ParseInt() in single-value context` what does that mean?
[22:14:04] *** Quits: prophet60091__ (~prophet60@87.123.156.26) (Ping timeout: 258 seconds)
[22:14:07] <Tv_> codebam: what does ParseInt return?
[22:14:14] <Tv_> look it up in the docs
[22:14:15] <codebam> an int?
[22:14:17] <codebam> okay
[22:14:18] <Tv_> don't guess
[22:14:20] <A_Dragon> check the docs!
[22:14:26] <A_Dragon> godoc is your friend, always
[22:14:34] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:14:46] <A_Dragon> https://pkg.go.dev/strconv#ParseInt
[22:14:55] <A_Dragon> that dark mode is wonderful
[22:15:18] <codebam> oh it's because it returns int64?
[22:15:48] *** Quits: Vukan (~drazen@2a02:587:d420:c37f:8160:aa0b:cd38:47ec) (Ping timeout: 272 seconds)
[22:16:32] <Tv_> it doesn't just return an int64
[22:16:54] <codebam> oh it's because it returns an err!
[22:16:58] <codebam> that makes sense
[22:17:06] <A_Dragon> it returns both an int64 and an err
[22:17:09] <A_Dragon> s/err/error
[22:18:03] <codebam> there fixed :)
[22:18:27] <A_Dragon> re-share?
[22:18:38] <codebam> sure just a sec
[22:18:54] <A_Dragon> pkill deadbeef
[22:18:57] <A_Dragon> whoops
[22:19:40] <codebam> https://play.golang.org/p/xs4Y-Nch9dr
[22:19:47] <codebam> well I don't know how to log it, but it's working at least
[22:19:56] <A_Dragon> check the docs for fmt
[22:19:59] <A_Dragon> and fmt.Println
[22:20:20] <codebam> okay will do, thanks
[22:20:33] <A_Dragon> you can compare yours to mine if you'd like, and ask questions as to the decisions I made
[22:21:00] <codebam> oh okay let me check yours out
[22:21:11] <A_Dragon> https://play.golang.org/p/nqI0T1DiLvM if you want another copy of the link
[22:22:34] <codebam> oh I see you wrote another function
[22:22:37] <codebam> that's a good idea
[22:24:00] <A_Dragon> oh and theres one helper that I forgot
[22:24:48] <A_Dragon> https://play.golang.org/p/qlyQUJSD27d there we go
[22:25:09] <codebam> is there a reduce function in golang? I want to reduce with multiply
[22:25:16] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[22:25:34] *** Quits: gggp_ (~gggp@123.113.184.133) (Ping timeout: 258 seconds)
[22:25:38] <codebam> oh well... there's a package
[22:25:56] <A_Dragon> go doesnt have much functional stuff, no
[22:25:57] <f8l12> you probably lose type safety though
[22:26:01] <A_Dragon> ^
[22:26:02] <A_Dragon> this is why
[22:26:10] <A_Dragon> because until we have generics its unsafe and slow
[22:26:12] <codebam> this package seems like it's meant for a server that's doing a lot of data processing. you have to run a server binary
[22:26:19] <A_Dragon> uh
[22:26:22] <A_Dragon> link?
[22:26:28] <codebam> https://blog.gopheracademy.com/advent-2015/glow-map-reduce-for-golang/
[22:26:32] *** Joins: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f)
[22:26:43] <Tv_> yeah don't do that
[22:26:47] <A_Dragon> ^
[22:26:54] <A_Dragon> thats like
[22:26:56] <A_Dragon> way overkill
[22:26:58] <ikke> map/reduce is an algorithm / pattern
[22:27:20] <codebam> I'm just gonna write a for loop
[22:27:27] <codebam> that seems like the typical solution in golang
[22:27:31] <ikke> yes
[22:27:34] <A_Dragon> if you _need_ / _want_ a reduce for a given type, eg for multiply, why not a `func Multiply(a int, b int...)`?
[22:27:35] <codebam> it works. I'm not complaining
[22:28:00] <A_Dragon> or I guess you'd want a, b int, c int...
[22:28:07] <A_Dragon> and just return a*b if len(c) == 0
[22:29:11] <codebam> A_Dragon: well I don't know how large the array is
[22:29:24] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[22:29:27] <A_Dragon> for which, the number of things you want to multiply?
[22:29:31] <codebam> I could use recursion instead I guess
[22:29:36] <A_Dragon> I wouldnt
[22:29:43] <A_Dragon> check the tour on function definitons
[22:29:49] <codebam> I don't like using recursion unless it's neccessary
[22:29:55] <codebam> okay will do
[22:29:58] <recursion> :(
[22:30:00] <A_Dragon> I highly suggest reading though the entire go tour
[22:30:03] * A_Dragon hugs recursion
[22:30:17] <A_Dragon> its not super long and covers most of the things you want to do
[22:30:32] <A_Dragon> and covers language concepts that will help you solve most issues
[22:30:40] <Tv_> is recursion the new context, being mentioned out of context all the time?
[22:31:06] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 240 seconds)
[22:31:09] <A_Dragon> lol
[22:31:18] <A_Dragon> I still am awful at using contexts
[22:31:33] <A_Dragon> I honestly just dont like the `check if I should stop` pattern etc
[22:31:33] *** Joins: toretto (~0xe3b7@user/toretto)
[22:31:45] <Tv_> A_Dragon: ain't no real nice alternative for that though
[22:31:50] <A_Dragon> unfortunately not
[22:31:52] <Tv_> killing threads is a nasty nasty thing
[22:31:55] <recursion> Most use cases of context I see either way tend to be attempts to turn it into a global variable of some form either way
[22:31:59] <toretto> when i compile a hello world of go, it's 148215 lines of ASM. why is that the case?
[22:32:07] <CommunistWolf> go has a runtime
[22:32:09] <CommunistWolf> it's pretty big
[22:32:13] <A_Dragon> ^
[22:32:14] <toretto> hmm
[22:32:16] <A_Dragon> and what hello world
[22:32:18] <Tv_> toretto: are you also measuring the garbage collector etc?
[22:32:20] <A_Dragon> and how are you extracting asm?
[22:32:54] <toretto> Tv_: I guess so, I did `go build hw.go; objdump -d hw > file; wc -l file;` and I get 148215
[22:33:04] <A_Dragon> https://godbolt.org/z/5zK9ed83e check here
[22:33:22] <A_Dragon> toretto: yes that will be quite giant
[22:33:24] <Tv_> toretto: sure, that's all of it, including reflection for fmt.Printf to work etc
[22:33:53] <toretto> hmmm...
[22:34:07] <toretto> so, i guess i've live with it.
[22:34:23] <Tv_> toretto: more like, if you want to read asm read asm for the function you're interested in
[22:34:47] <CommunistWolf> best I can do you is 101943 lines of assembly
[22:34:48] <toretto> is there any optimization flags i can use with go build command?
[22:34:52] <toretto>  or it's automatic?
[22:35:01] <A_Dragon> go optimises as much as it can by default
[22:35:07] <toretto> i see.
[22:35:07] <A_Dragon> check go help build
[22:35:21] <toretto> i'm from a C and C++ background.
[22:35:33] <A_Dragon> oh yes it will be a lot bigger than you expect
[22:35:41] <A_Dragon> and a bit slower, not much
[22:35:44] <A_Dragon> godbolt can help with asm
[22:36:08] <A_Dragon> but generally its decent, if you're having perf issues you can do some stuff to help but best to come here rather than trying on your own
[22:36:18] <A_Dragon> go *technically* also lets you write your own asm, if you really want to*
[22:36:39] <toretto> ah, ok.
[22:36:42] <A_Dragon> but Ive never had to as of yet, I can always make code faster without that
[22:36:48] <A_Dragon> and go asm isnt documented well afaik
[22:37:18] <toretto> i'm writing bunch of networking applications, and go have a really rich standard librarires to deal with networking stuff, http and such.
[22:37:33] <A_Dragon> you will likely find the performance plenty
[22:37:43] <A_Dragon> as well as scalability easy with goroutines
[22:38:01] <toretto> ya
[22:38:46] <CommunistWolf> tinygo will do you a hello world in <16K, it seems. fun fun
[22:39:01] <A_Dragon> yes, tinygo can and will make things very small
[22:39:06] <A_Dragon> as is its intent, MCs and such
[22:39:25] <toretto> i'm reading the "The Go Programming Language"
[22:39:27] <Tv_> tinygo is a much-less-useful subset of Go though
[22:39:37] <CommunistWolf> aye, i've never played with it before is all, this conversation reminded me
[22:39:38] <A_Dragon> toretto: have you read the go tour first?
[22:39:41] <toretto> i just bougth it today.
[22:39:46] <A_Dragon> Tv_: its got most of the stdlib now IIRC
[22:39:47] <toretto> A_Dragon: nope
[22:39:52] <A_Dragon> toretto: please start with the go tour
[22:39:56] <toretto> ok
[22:40:05] <A_Dragon> https://tour.golang.org
[22:40:21] <foobaz> i started by reading the spec, it's a bit dry but very information dense https://golang.org/ref/spec
[22:41:00] <A_Dragon> thats like starting to learn how to work on desktop computers by looking at current CPU lithography
[22:41:04] *** Joins: thing (~thing@user/thing)
[22:41:10] <A_Dragon> okay maybe not quite that silly
[22:41:15] <A_Dragon> uh, go one abstraction up
[22:41:35] <Tv_> A_Dragon: "Interfaces are quite stable and should work well in almost all cases." are scary words
[22:41:46] <A_Dragon> Tv_: :D
[22:42:06] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 276 seconds)
[22:53:02] *** Quits: trufas (~trufas@177.240.218.218) (Ping timeout: 252 seconds)
[22:53:10] *** Quits: MrByte (~textual@2a02:8108:463f:b2c8:890a:9494:8fdb:2a2f) (Ping timeout: 258 seconds)
[22:53:54] *** Joins: trufas (~trufas@177.240.218.218)
[23:24:00] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[23:29:16] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 272 seconds)
[23:30:26] *** Joins: c10l (~c10l@89.34.167.207)
[23:33:51] *** Joins: karhunkynsi (~karhunkyn@user/karhunkynsi)
[23:38:24] *** Joins: dr0n (~dr0n@94.11.23.235)
[23:43:25] *** Joins: andlabs_ (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[23:44:34] *** Quits: andlabs (~andlabs@pool-72-69-74-168.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[23:48:53] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[23:57:43] *** Joins: prophet60091__ (~prophet60@87.123.156.26)
