[00:05:24] *** Joins: Martchus (~martchus@dynamic-077-009-054-189.77.9.pool.telefonica.de)
[00:06:30] *** Quits: Martchus_ (~martchus@2a01:c22:761e:bc00:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[00:08:52] *** Joins: Martchus_ (~martchus@dynamic-095-118-056-043.95.118.pool.telefonica.de)
[00:09:31] *** Joins: rorx (~rorx@cpe-65-24-160-111.columbus.res.rr.com)
[00:09:32] *** Quits: finsternis (~X@23.226.237.192) (Remote host closed the connection)
[00:10:30] *** Quits: Martchus (~martchus@dynamic-077-009-054-189.77.9.pool.telefonica.de) (Ping timeout: 255 seconds)
[00:18:45] *** Joins: deadmarshal (~deadmarsh@95.38.112.73)
[00:21:32] * GumbyPAN CPAN Upload: Regexp-Pattern-License-v3.7.0 by JONASS https://metacpan.org/release/JONASS/Regexp-Pattern-License-v3.7.0
[00:24:54] *** Quits: deadmarshal (~deadmarsh@95.38.112.73) (Ping timeout: 255 seconds)
[00:25:06] *** Joins: finsternis (~X@23.226.237.192)
[00:27:48] *** Quits: nirnam (~nirnam@1.47.137.138) (Ping timeout: 268 seconds)
[00:29:01] *** Joins: nirnam (~nirnam@1.47.25.62)
[00:38:46] *** blinky43 is now known as blinky42
[00:38:50] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[00:38:50] *** Joins: blinky42 (~quassel@user/blinky42)
[00:41:17] *** Joins: kensanata (~user@user/kensanata)
[00:44:45] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[00:47:54] *** Quits: schelcj (~schelcj@096-035-119-047.res.spectrum.com) (Ping timeout: 240 seconds)
[00:49:49] *** Joins: schelcj (~schelcj@096-035-119-047.res.spectrum.com)
[00:50:33] *** Quits: Guest9 (~Guest9@43.242.116.127) (Quit: Connection closed)
[00:51:35] * GumbyPAN CPAN Upload: Object-Pad-0.45 by PEVANS https://metacpan.org/release/PEVANS/Object-Pad-0.45
[00:59:37] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[00:59:49] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[01:01:17] *** Quits: kaitlyn (~kaitlyn@user/kaitlyn) (Client Quit)
[01:01:29] *** Joins: kaitlyn (~kaitlyn@user/kaitlyn)
[01:06:16] <v`> https://i.imgur.com/GzKYjqr.mp4
[01:07:14] <ehuelsmann[m]> Am I correct to say that if a module requires v5.10.1 and solely uses IO-Stringy because of IO::Scalar, then this can be replaced by using `open` with a scalar reference?
[01:07:16] <simcop2387> v`: M$ $h1ll
[01:08:12] <simcop2387> ehuelsmann[m]: i'd have to examine them myself but that sounds about right.  i'd still require 5.8.1 or above (ideally 5.8.9) because of unicode stuff, do not even attempt to support 5.6.
[01:08:58] <ehuelsmann[m]> Grinnz: you said scalar references opened for output can only produce byte sequences. what when a "unicode string" is supplied as a scalar ref to `open`? what happens to the unicode characters that may be in that string?
[01:09:18] <Grinnz> likely a fatal error when read
[01:09:39] <ehuelsmann[m]> ok. so I'll have to encode the string before using it. that's fine. thanks.
[01:16:53] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[01:18:22] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[01:18:57] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[01:19:34] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[01:31:40] * GumbyPAN CPAN Upload: Dist-Zilla-PluginBundle-Author-Plicease-2.67 by PLICEASE https://metacpan.org/release/PLICEASE/Dist-Zilla-PluginBundle-Author-Plicease-2.67
[01:36:52] *** Quits: gast0n (~g4570n@user/gast0n) (Ping timeout: 268 seconds)
[01:44:53] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 268 seconds)
[01:51:42] * GumbyPAN CPAN Upload: Device-AVR-UPDI-0.09 by PEVANS https://metacpan.org/release/PEVANS/Device-AVR-UPDI-0.09
[01:59:00] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[02:18:43] *** Quits: silverwhitefish (~hidden@47.202.102.10) (Ping timeout: 258 seconds)
[02:24:58] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 268 seconds)
[02:27:15] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[02:34:51] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[02:36:46] * GumbyPAN CPAN Upload: App-Licensecheck-v3.2.4 by JONASS https://metacpan.org/release/JONASS/App-Licensecheck-v3.2.4
[02:41:47] * GumbyPAN CPAN Upload: Win32-SqlServer-2.013 by SOMMAR https://metacpan.org/release/SOMMAR/Win32-SqlServer-2.013
[02:42:14] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 268 seconds)
[02:45:26] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 256 seconds)
[02:48:30] *** Joins: whynot (~whynot@37.73.54.237)
[03:02:37] *** Quits: magla (~gelignite@55d4b6dc.access.ecotel.net) (Quit: Stay safe!)
[03:03:12] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[03:10:03] *** Joins: zgu|skaro (~zgu@2600:6c4e:1a7f:f190::ae7)
[03:11:40] *** Joins: monkey_ (~user@190.104.116.134)
[03:14:22] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[03:29:24] *** Quits: Martchus_ (~martchus@dynamic-095-118-056-043.95.118.pool.telefonica.de) (Ping timeout: 255 seconds)
[03:29:29] *** Joins: Martchus (~martchus@2a01:c22:6e81:4000:d250:99ff:fe49:3cce)
[03:30:16] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 265 seconds)
[03:30:26] *** Joins: djerius_ (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:32:49] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 246 seconds)
[03:33:42] *** Joins: Martchus_ (~martchus@2a01:c22:7767:3600:d250:99ff:fe49:3cce)
[03:34:32] *** Quits: Martchus (~martchus@2a01:c22:6e81:4000:d250:99ff:fe49:3cce) (Ping timeout: 255 seconds)
[03:37:23] <v`> a thread: https://imgur.com/gallery/WenYICV
[03:37:24] <Paperbot> Link title(s): [ A dump of replies of increasingly worsening road conditions - Album on Imgur ]
[03:47:42] *** Joins: jgaz (~jgaz@2600:8805:d800:b3e::2a2)
[03:49:37] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[03:52:59] *** Joins: silverwhitefish (~hidden@47.202.102.10)
[04:15:17] <genio> xenu: Were Python's socket functions with Windows of any help to you?
[04:15:42] *** Quits: whynot (~whynot@37.73.54.237) (Ping timeout: 265 seconds)
[04:15:50] *** Joins: whynot (~whynot@37.73.66.147)
[04:16:57] * GumbyPAN CPAN Upload: LinkEmbedder-1.20 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/LinkEmbedder-1.20
[04:18:26] *** Quits: haj (~haj@ip5f5beb42.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[04:20:25] *** Joins: Adura (~Adura@user/adura)
[04:26:03] *** Joins: entonian[m] (~entonianm@2001:470:69fc:105::7ac0)
[04:44:57] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[04:45:09] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[04:46:24] *** Joins: akaWolf (~akaWolf@akawolf.org)
[04:54:14] *** Quits: jgaz (~jgaz@2600:8805:d800:b3e::2a2) (Quit: Leaving)
[04:56:47] <xenu> genio: not really, i'm well aware how wsaduplicatesocket() is supposed to work in theory, in practice it's a bit more complicated :P
[04:56:57] <xenu> also dup2 requires abusing CRT internals :<
[04:57:10] *** Quits: zgu|skaro (~zgu@2600:6c4e:1a7f:f190::ae7) (Ping timeout: 246 seconds)
[05:00:31] *** Joins: ominionx (~ominionx@38.135.235.14)
[05:21:10] *** Quits: whynot (~whynot@37.73.66.147) (Quit: leaving)
[05:22:21] *** Quits: curdlesnoot (~curdlesno@2a03:1b20:1:f410:40::a04d) (Ping timeout: 255 seconds)
[05:22:22] <rindolf> gotta love winsock's function names. they are easy to search the web for though...
[05:28:05] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 258 seconds)
[05:28:56] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[05:31:09] *** Quits: brtastic (~bartosz@185.24.91.138) (Ping timeout: 258 seconds)
[05:38:23] *** Joins: jetchisel (jetchisel@user/jetchisel)
[05:58:20] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 268 seconds)
[06:01:40] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[06:01:40] *** Quits: batman (~batman@50.31.137.146) (Remote host closed the connection)
[06:02:03] *** Joins: batman (~batman@50.31.137.146)
[06:02:06] *** Joins: marcus (~marcus@mojo/viking/marcus)
[06:09:16] *** Quits: Pali (~pali@user/pali) (Ping timeout: 246 seconds)
[06:18:33] *** Joins: Su-Shee (~Susanne@p4ff49814.dip0.t-ipconnect.de)
[06:21:45] *** Quits: Su-Shee_ (~Susanne@p4ffc7aaf.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:25:35] *** Joins: k-man (~jason@user/k-man)
[06:29:47] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Remote host closed the connection)
[06:40:35] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[06:45:44] *** FinnElija is now known as Guest7485
[06:45:44] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:45:44] *** Quits: Guest7485 (~finn_elij@user/finn-elija/x-0085643) (Killed (sodium.libera.chat (Nickname regained by services)))
[06:45:44] *** finn_elija is now known as FinnElija
[06:51:16] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 258 seconds)
[06:55:45] *** Joins: toretto (~0xe3b7@user/toretto)
[06:56:43] *** Joins: pizdets (~pizdets@183.182.111.100)
[06:56:55] *** Quits: pizdets_ (~pizdets@183.182.110.194) (Ping timeout: 268 seconds)
[06:57:39] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[07:00:00] *** Joins: thunder (~thunder@185.163.110.68)
[07:00:09] *** Quits: thunder (~thunder@185.163.110.68) (Changing host)
[07:00:09] *** Joins: thunder (~thunder@user/thunder)
[07:02:33] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[07:03:17] <genio> Why does it seem that damn near everything on Windows is a ball of razor blades
[07:09:13] <nirnam> dunno what ball of razor blades is, but I get how you feels
[07:09:39] <nirnam> making thing for windows has been rather tormenting
[07:10:10] <genio> sharp edges everywhere
[07:10:16] <genio> ball of razor blades
[07:10:27] <genio> handle with care
[07:11:06] <nirnam> that explained my suffering
[07:23:08] *** Quits: aman (~aman@user/aman) (Ping timeout: 255 seconds)
[07:24:46] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 252 seconds)
[07:25:30] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[07:32:15] *** Joins: YaoNai (~YaoNai@user/yaonai)
[07:33:18] *** Quits: Martchus_ (~martchus@2a01:c22:7767:3600:d250:99ff:fe49:3cce) (Ping timeout: 255 seconds)
[07:33:26] *** Joins: Martchus (~martchus@2a01:c23:c5d3:7300:d250:99ff:fe49:3cce)
[07:36:24] <rindolf> genio: windows is likely gonna be replaced by linux: https://www.shlomifish.org/philosophy/culture/case-for-commercial-fan-fiction/indiv-nodes/starved_of_employees.xhtml
[07:36:24] <Paperbot> Link title(s): [ Commercial Real Person Fan Fiction (RPFs), crossovers and parodies as 2021 geek/hacker imperative... ]
[07:36:58] <rindolf> genio: thankfully
[07:41:23] *** Joins: redghost (~igloo@pool-173-48-82-26.bstnma.fios.verizon.net)
[07:43:42] *** redghost is now known as samir
[07:49:50] *** Joins: monkey_ (~user@190.104.116.134)
[07:57:39] *** Joins: Martchus_ (~martchus@dynamic-095-118-185-114.95.118.pool.telefonica.de)
[07:58:41] *** Quits: Martchus (~martchus@2a01:c23:c5d3:7300:d250:99ff:fe49:3cce) (Ping timeout: 255 seconds)
[08:02:09] *** Parts: samir (~igloo@pool-173-48-82-26.bstnma.fios.verizon.net) (Igloo IRC: https://iglooirc.com)
[08:04:18] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[08:08:43] *** Joins: autopsy (~autopsy@172.58.19.7)
[08:23:40] *** Parts: YaoNai (~YaoNai@user/yaonai) ()
[08:31:28] *** Joins: Dorward (~dorward@daviddorward.plus.com)
[08:34:30] *** Quits: Dorward_ (~dorward@daviddorward.plus.com) (Ping timeout: 255 seconds)
[08:38:06] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 252 seconds)
[08:44:15] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[09:10:16] *** gordonfish- is now known as gordonfish
[09:28:57] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Quit: Time to reboot FreeBSD)
[09:35:57] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[09:37:05] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Client Quit)
[09:38:27] *** Quits: yaya (~yaya@user/yaya) (Quit: yaya)
[09:38:55] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[09:40:18] *** Joins: yaya (~yaya@user/yaya)
[09:40:41] *** Parts: yaya (~yaya@user/yaya) ()
[09:47:13] *** Joins: yaya (~yaya@user/yaya)
[09:52:03] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[09:52:56] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[09:53:44] *** Joins: zgu|skaro (~zgu@096-038-138-129.res.spectrum.com)
[10:03:06] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[10:04:54] *** Joins: jmcgnh (~jmcgnh@wikipedia/jmcgnh)
[10:31:57] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 255 seconds)
[10:40:01] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[11:08:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[11:12:46] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:20:58] *** Joins: curdlesnoot (~curdlesno@2a03:1b20:1:f410:40::a04d)
[11:22:07] *** Joins: Guest9 (~Guest9@103.250.137.213)
[11:28:55] *** Joins: furrymcgee (~devuan@31.179.186.66)
[11:36:22] *** Joins: brtastic (~bartosz@185.24.91.138)
[11:54:52] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 265 seconds)
[11:54:54] *** Quits: brtastic (~bartosz@185.24.91.138) (Quit: Reconnecting)
[11:55:06] *** Joins: brtastic (~bartosz@185.24.91.138)
[11:57:34] *** Quits: brtastic (~bartosz@185.24.91.138) (Client Quit)
[11:57:49] *** Joins: brtastic (~bartosz@185.24.91.138)
[11:58:00] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[11:58:25] *** Joins: thunder (~thunder@185.163.110.68)
[11:58:36] *** Quits: thunder (~thunder@185.163.110.68) (Changing host)
[11:58:36] *** Joins: thunder (~thunder@user/thunder)
[12:00:39] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[12:01:45] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Remote host closed the connection)
[12:23:56] *** Quits: Guest9 (~Guest9@103.250.137.213) (Quit: Connection closed)
[12:28:00] *** Quits: ominionx (~ominionx@38.135.235.14) (Ping timeout: 252 seconds)
[12:35:30] *** Joins: horsepatat (~horsepata@212.3.196.84)
[12:38:55] <ehuelsmann[m]> morning. Is there a way to test for a string to contain any 'utf8' characters that are not 'UTF-8'? I mean: Perl has this way of compensating for coming across "unclean UTF-8 data" which is called "utf8", right. I'd like to test a string for "characters" that were created to compensate that.
[12:41:22] *** Joins: ominionx (~ominionx@204.98.224.67)
[12:48:32] *** Quits: autopsy (~autopsy@172.58.19.7) (Ping timeout: 258 seconds)
[12:48:37] <thunder> ehuelsmann[m]: maybe use Encoding::FixLatin?
[12:51:30] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[12:52:44] *** Quits: horsepatat (~horsepata@212.3.196.84) (Ping timeout: 268 seconds)
[12:54:57] *** Joins: akaWolf (~akaWolf@akawolf.org)
[12:55:23] <ehuelsmann[m]> thunder: thanks, I didn't know that module. I was more thinking of a regex which allows me to detect that these compensating characters are in a Perl string (or some other mechanism). I mean: I think I have a string in memory which already *is* utf8. I want to see if that's true.
[12:57:25] *** Joins: autopsy (~autopsy@172.58.19.154)
[12:57:53] <thunder> ehuelsmann[m]: honestly understanding the underlying encoding scheme of perl is a bit beyond my depth. so help I can offer in that respect is a bit limited. however another mod to try is Encode::Guess which might be better for your use-case.
[12:59:01] <ehuelsmann[m]> thunder: for more context: I'm working on a PR with the PR submitter here: https://github.com/pherkin/test-bdd-cucumber-perl/pull/191/files
[12:59:02] <Paperbot> Link title(s): [ fix utf8 handeling in test name by DragosTrif · Pull Request #191 · pherkin/test-bdd-cucumber-per... ]
[12:59:17] <ehuelsmann[m]> the test in the PR is - I think - wrong, but the test doesn't detect that.
[13:00:08] <thunder> ah. I guess you could probably get a boolean by checking if $data eq fix_latin($data).
[13:00:23] *** Joins: biopsy (~autopsy@ip70-190-125-84.ph.ph.cox.net)
[13:00:52] <ehuelsmann[m]> ah. that sounds like it might work indeed.
[13:01:07] <ehuelsmann[m]> I'll give that some more thought. Thanks!
[13:02:18] <Botje-> ehuelsmann[m]: by compensating characters you mean U+FFFD "i gave up on this character" ?
[13:02:50] *** Quits: autopsy (~autopsy@172.58.19.154) (Ping timeout: 252 seconds)
[13:03:53] <ehuelsmann[m]> Botje-: is that what ":utf8" (as the io layer) does? I mean, :utf8 does something that makes it possible to roundtrip non-UTF-8 data is what I understood from various sources, right?
[13:03:57] <thunder> something else to consider is to set "binmode $fh, q{:utf8};" for STDIN/STDOUT as needed
[13:08:02] <ehuelsmann[m]> yes. I have the binmode in place. the reporter of that issue says that double-encoding of utf8 is going on.
[13:09:22] <Botje-> as i understand it, decoding with :utf8 replaces garbage with U+FFFD characters. those do not roundtrip to the original input.
[13:10:38] <Botje-> eval: use Encode qw(decode_utf8); printf "%vx", decode_utf8("abc\xc3XYZ")
[13:10:40] <perlbot> Botje-: 61.62.63.fffd.58.59.5a
[13:11:05] <ehuelsmann[m]> oh. wow.
[13:11:06] <Botje-> note the invalid c3 57 pair.
[13:11:07] <ehuelsmann[m]> thanks.
[13:11:59] <ehuelsmann[m]> yes. it simply gets replaced.
[13:19:09] <huf> eval: no utf8; my $s = "abc\xc3XYZ"; open my $f, '<:encoding(UTF-8)', \$s; <$f>.''
[13:19:11] <perlbot> huf: abc\xC3XYZ
[13:19:15] <huf> what the devil is this doing?
[13:20:28] <huf> eval: no utf8; my $s = "abc\xc3XYZ"; open my $f, '<:utf8', \$s; <$f>.''
[13:20:29] <perlbot> huf: abc\xFFFDXYZ
[13:20:31] <huf> and this
[13:22:21] <ehuelsmann[m]> huf: how can the first result be explained?
[13:22:31] <huf> i have no idea what's happening
[13:23:15] <thunder> me neither
[13:23:24] <thunder> out of my depth
[13:24:01] <huf> oh this is some kind of extra layer of perlbot doing stuff
[13:24:02] <huf> i think
[13:25:50] *** Joins: metasintactic (~thunder@185.163.110.90)
[13:25:58] *** Quits: metasintactic (~thunder@185.163.110.90) (Changing host)
[13:25:58] *** Joins: metasintactic (~thunder@user/thunder)
[13:26:00] *** thunder is now known as Guest6725
[13:26:00] *** metasintactic is now known as thunder
[13:27:51] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[13:28:09] *** Quits: Guest6725 (~thunder@user/thunder) (Ping timeout: 265 seconds)
[13:29:54] *** Joins: LSD (~LSD@2.lsd.systems)
[13:31:39] *** Quits: thunder (~thunder@user/thunder) (Remote host closed the connection)
[13:31:52] <huf> http://sprunge.us/bAwdcs
[13:31:59] <huf> O_o
[13:32:04] *** Joins: thunder (~thunder@185.163.110.90)
[13:32:14] *** Quits: thunder (~thunder@185.163.110.90) (Changing host)
[13:32:14] *** Joins: thunder (~thunder@user/thunder)
[13:33:12] <huf> the input file i ran it on is just those malformed bytes of Botje- 
[13:35:09] <Botje-> huf: the last behavior maps to the FB_PERLQQ flag in perldoc Encode
[13:35:37] <huf> ah, so decode_utf8's defaults are not the same as :encoding(UTF-8)?
[13:35:53] <huf> and :utf8 just does some crazy shit because it doesnt error check properly, right?
[13:38:31] <Botje-> i have no idea where :utf8 is documented
[13:38:39] <curdlesnoot> huf: yes. https://www.effectiveperlprogramming.com/2011/08/know-the-difference-between-utf8-and-utf-8/
[13:38:39] <Paperbot> Link title(s): [ Know the difference between utf8 and UTF-8 | The Effective Perler ]
[13:38:51] <curdlesnoot> the implementation of decode_utf8 is unfortunate, to say the least.
[13:40:02] <Botje-> why is replacing with U+FFFD "unfortunate"? it is the least incorrect
[13:40:21] <huf> yeah, it's by far the least surprising output from these 3 :)
[13:41:56] * GumbyPAN CPAN Upload: Travel-Status-DE-IRIS-1.57 by DERF https://metacpan.org/release/DERF/Travel-Status-DE-IRIS-1.57
[13:42:04] <Botje-> :utf8" just marks the data as UTF-8 without further checking, hile ":encoding(UTF-8)" checks the data for actually being valid UTF-8.
[13:42:15] <Botje-> from binmode
[13:48:51] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[13:49:04] <curdlesnoot> if that's the behavior you want, then decode('UTF-8', FB_DEFAULT | LEAVE_SRC) is appropriate. these days, I usually just use Encode::Simple to paper over the deficiencies of Encode's API.
[13:49:08] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[13:50:37] <rindolf> curdlesnoot: thanks for the tip
[13:54:26] <rindolf> curdlesnoot++ # free karma for a free world
[13:54:39] <curdlesnoot> in fact, decode_utf8() isn't even the same as decode('utf8', ...), the last time I checked. I found its behaviour to vary based on whether the utf8 flag is set for the given input, doing nothing if it is. it's a dangerous function, in my opinion.
[13:55:12] <curdlesnoot> rindolf: thanks
[13:55:28] <rindolf> curdlesnoot: you're welcome 
[13:55:47] <ehuelsmann[m]> thanks for all theinformation on this topic! I had no idea there are this many variations.
[13:56:24] <curdlesnoot> as a bonus, Encode::Simple uses the faster Unicode::UTF8 to handle that particular encoding, if available.
[13:58:42] <huf> you can apparently change how :encoding(UTF-8) handles malformed utf8, but it's not pretty
[13:59:09] <curdlesnoot> yeah, the API just weird overall.
[13:59:11] <curdlesnoot> is*
[13:59:18] <huf> $PerlIO::encoding::fallback &= ~FB_PERLQQ; #  works. = FB_DEFAULT causes perl to ... not sure. i straced it and it just kept asking for more memory in a loop
[13:59:21] <huf> then i ctrl-c'd it
[13:59:33] <curdlesnoot> Unicode::UTF8 is really nice by comparison, notwithstanding its obviously more limited scope.
[14:01:48] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[14:02:37] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[14:08:22] *** Joins: Guest77 (~Guest77@2402:e280:2117:297:ecf8:f374:8704:f843)
[14:10:40] *** Quits: Martchus_ (~martchus@dynamic-095-118-185-114.95.118.pool.telefonica.de) (Ping timeout: 252 seconds)
[14:10:47] *** Joins: Martchus (~martchus@2a01:c22:72f6:6f00:d250:99ff:fe49:3cce)
[14:17:31] *** Joins: Dorward_ (~dorward@daviddorward.plus.com)
[14:18:00] *** Quits: Dorward (~dorward@daviddorward.plus.com) (Ping timeout: 252 seconds)
[14:20:17] <curdlesnoot> ehuelsmann[m]: yeah. a general rule of thumb is to write off utf8 as an artefact of how strings (may) internally be encoded and to not be concerned with it, unless writing XS code, as I understand it. if you have data crossing an encoding boundary and it's expected to be in the form of UTF-8 'bytes', decode it as UTF-8, strictly or otherwise.
[14:22:43] <ehuelsmann[m]> thanks. I'm now (after the discussion of today) trying to think of strings as "bytes" versus "characters"
[14:23:17] <ehuelsmann[m]> where "characters" need to be encoded to bytes to make them UTF-8 encoded characters.
[14:23:41] <curdlesnoot> yeah. a reasonable description might be characters whose ordinals don't go above 0xFF and which represent an encoding of some kind.
[14:26:19] <curdlesnoot> and we shouldn't even think about the internal encoding used. for example, a string that contains nothing above chr(0xFF) could have been 'upgraded' to utf8 internally.
[14:26:40] *** Quits: Martchus (~martchus@2a01:c22:72f6:6f00:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[14:27:18] <curdlesnoot> so, anything that's sensitive to the state of the utf8-ness, to to speak, is already a big red flag.
[14:27:37] <curdlesnoot> Grinnz could explain it more effectively, I suspect.
[14:29:24] *** Joins: Martchus (~martchus@2a01:c23:c15f:5100:d250:99ff:fe49:3cce)
[14:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:01] *** Joins: csrf (~csrf@user/csrf)
[14:32:01] * GumbyPAN CPAN Upload: Math-BigRat-0.2617 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-BigRat-0.2617
[14:32:39] *** Joins: Martchus_ (~martchus@dynamic-095-114-117-071.95.114.pool.telefonica.de)
[14:34:03] *** Quits: Martchus (~martchus@2a01:c23:c15f:5100:d250:99ff:fe49:3cce) (Ping timeout: 255 seconds)
[14:38:48] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[14:39:04] *** biopsy is now known as autopsy
[14:53:55] *** Joins: Pali (~pali@user/pali)
[15:10:43] *** Joins: Martchus (~martchus@dynamic-077-009-003-070.77.9.pool.telefonica.de)
[15:11:06] *** Quits: Martchus_ (~martchus@dynamic-095-114-117-071.95.114.pool.telefonica.de) (Ping timeout: 265 seconds)
[15:11:36] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[15:13:25] *** Joins: diskin (~diskin@109.165.74.102)
[15:27:05] *** Joins: Guest9 (~Guest9@103.250.137.212)
[15:34:05] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:39:46] *** Quits: autopsy (~autopsy@ip70-190-125-84.ph.ph.cox.net) (Quit: Leaving)
[15:52:16] *** Quits: Guest9 (~Guest9@103.250.137.212) (Quit: Connection closed)
[15:53:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Quit: Bye)
[15:55:04] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:56:34] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[15:56:54] *** Server sets mode: +nt 
[15:58:17] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 258 seconds)
[16:02:44] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[16:02:52] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Quit: ZNC 1.8.2 - https://znc.in)
[16:03:58] *** Quits: nirnam (~nirnam@1.47.25.62) (Ping timeout: 252 seconds)
[16:04:03] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[16:09:46] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[16:10:33] *** Quits: thunder (~thunder@user/thunder) (Ping timeout: 265 seconds)
[16:10:47] *** Joins: thunder (~thunder@37.120.152.156)
[16:10:50] *** Joins: nirnam (~nirnam@1.47.137.138)
[16:11:01] *** Quits: thunder (~thunder@37.120.152.156) (Changing host)
[16:11:01] *** Joins: thunder (~thunder@user/thunder)
[16:26:37] *** Joins: Martchus_ (~martchus@2a01:c22:6f52:9e00:d250:99ff:fe49:3cce)
[16:26:40] *** Quits: Martchus (~martchus@dynamic-077-009-003-070.77.9.pool.telefonica.de) (Ping timeout: 246 seconds)
[16:38:26] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[16:38:50] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[16:39:45] *** Quits: WinterStar (~IceLight@user/icelight) (Quit: WeeChat 3.2)
[16:50:30] *** Quits: Adura (~Adura@user/adura) (Killed (NickServ (GHOST command used by Adurah!~Adura@142.126.126.224)))
[16:50:43] *** Joins: Adura (~Adura@user/adura)
[16:52:16] * GumbyPAN CPAN Upload: CryptX-0.073 by MIK https://metacpan.org/release/MIK/CryptX-0.073
[16:53:14] *** Quits: starz (starz@ns378512.ip-37-59-36.eu) (Ping timeout: 268 seconds)
[17:01:30] *** Joins: jetchisel (jetchisel@user/jetchisel)
[17:02:42] *** Joins: starz (starz@ns378512.ip-37-59-36.eu)
[17:13:55] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 246 seconds)
[17:14:50] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[17:15:27] <ehuelsmann[m]> Can I instruct the indexer and metacpan to ignore certain paths in my distribution? Context: I have a dist which has test data in `testdata/` due to the ecosystem it's coming from. Currently all the test data files and directories are shown on the dist info page on MetaCPAN. I think this is just confusing and I'd like to suppress that.
[17:16:53] <ehuelsmann[m]> (re: https://metacpan.org/dist/Gherkin )
[17:16:53] <Paperbot> Link title(s): [ Gherkin-20.0.0 - A parser and compiler for the Gherkin language - metacpan.org ]
[17:22:21] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 255 seconds)
[17:31:05] *** Quits: diskin (~diskin@109.165.74.102) (Remote host closed the connection)
[17:39:05] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[17:44:18] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[17:45:08] *** Joins: monkey_ (~user@190.104.116.134)
[17:49:54] <ology> rename the directory to xt ?
[17:50:33] *** Joins: Su-Shee_ (~Susanne@p4ffc7cfa.dip0.t-ipconnect.de)
[17:50:41] <ology> That may trigger other testing processes though I guess maybe.
[17:51:13] <ehuelsmann[m]> ology: I'm afraid renaming the directory isn't an available option; that's what I meant by "it's named `testdata/` due to the ecosystem it's coming from".
[17:51:35] <ehuelsmann[m]> the parent project expects to be able to copy updated testdata into that specific path. 
[17:52:30] *** Quits: Su-Shee (~Susanne@p4ff49814.dip0.t-ipconnect.de) (Ping timeout: 255 seconds)
[17:54:17] <ology> Then I'd not worry about it. The testdata files happen at the bottom of the Gherkin distro. So no biggie. :)
[17:54:45] <ology> Maybe document what they are doing there?
[17:55:08] <ehuelsmann[m]> Yea. I can add that to the readme.
[17:59:17] <ehuelsmann[m]> hmm. could the "no_index" CPAN::Meta::Spec key be of help here?
[18:00:31] <ology> Sounds like that's the one.
[18:02:49] <ehuelsmann[m]> hmm. I see that the dist doesn't create "provides".
[18:02:57] <ehuelsmann[m]> checking how to add that to dist::zilla.
[18:06:11] <ology> https://metacpan.org/pod/Dist::Zilla::Plugin::MetaNoIndex ?
[18:06:12] <Paperbot> Link title(s): [ Dist::Zilla::Plugin::MetaNoIndex - Stop CPAN from indexing stuff - metacpan.org ]
[18:09:40] <ehuelsmann[m]> thanks!
[18:14:01] <ehuelsmann[m]> hmm. if I understand the MetaCPAN issues correctly, it's ignoring "no_index".
[18:14:02] <ehuelsmann[m]> that's unfortunate.
[18:22:30] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 265 seconds)
[18:25:15] *** Joins: habamax (~habamax@user/habamax)
[18:31:27] * GumbyPAN CPAN Upload: Test-Mojo-Plack-0.12 by NICOMEN https://metacpan.org/release/NICOMEN/Test-Mojo-Plack-0.12
[18:34:10] <Mandevil> Hm, this author avoids the exponentiation operator ** and always uses $a*$a instead of $a**2.
[18:34:14] <Mandevil> Any reason for that?
[18:36:01] <ology> Uh. For what? ** instead of ?
[18:36:41] *** Joins: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net)
[18:36:41] <ehuelsmann[m]> ology: repeated multiplication
[18:36:55] <Mandevil> To square things
[18:37:02] <ology> Guess I don't know what is being asked.
[18:37:03] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 255 seconds)
[18:37:16] <Mandevil> Why would you not use **2 to square expressions.
[18:37:21] <ology> I would
[18:37:28] <ology> why not? :)
[18:37:54] <aquanight> what else would you even use?
[18:37:55] <Mandevil> But this code avoids it. Even for nontrivial expressions. https://metacpan.org/dist/GIS-Distance/source/lib/GIS/Distance/Vincenty.pm
[18:37:55] <Paperbot> Link title(s): [ lib/GIS/Distance/Vincenty.pm - metacpan.org ]
[18:38:09] <curdlesnoot> it was literally in the initial question
[18:38:25] <curdlesnoot> or, rather, in the preceding statement.
[18:38:35] <Mandevil> aquanight: You'd just use multiplication.
[18:39:15] <ology> curdlesnoot: Possibly I need more coffee? It's no biggie really...
[18:39:33] <curdlesnoot> ology: perhaps. just slugged down an aeropress-produced espress now. lovely.
[18:40:08] <ology> My French press is waiting... 
[18:40:13] <curdlesnoot> anyway, my guess is that the author just likes it that way.
[18:40:28] <aquanight> Mandevil: well yes. To be fair, I'm often used to just doing it with $x * $x.
[18:41:55] <Mandevil> Yes, but what if you have long expression?
[18:42:04] <aquanight> my $x = <expr>;
[18:42:27] <Mandevil> Like this line: https://metacpan.org/dist/GIS-Distance/source/lib/GIS/Distance/Vincenty.pm#L33
[18:42:28] <Paperbot> Link title(s): [ lib/GIS/Distance/Vincenty.pm - metacpan.org ]
[18:42:34] <Mandevil> He repeats a long expression
[18:42:37] <Mandevil> Anyway...
[18:42:51] <aquanight> I mean yeah
[18:42:55] <aquanight> THAT you could've done ** 2
[18:42:58] <Mandevil> What I'm trying to do is to find fault with this.... https://f.perl.bot/p/2jzbtx
[18:42:58] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[18:43:11] <Mandevil> It's freaking not working and I am out of ideas why.
[18:43:14] <aquanight> the typical reason I would do $x * $x over ** 2 is if I'm trying to keep $x as an integer
[18:44:04] <ology> Where does it fail? That's a bit of code.
[18:44:13] <aquanight> ** 2 will force to float, even under 'use integer'
[18:44:34] *** Joins: gast0n (~g4570n@user/gast0n)
[18:44:34] <Mandevil> The result is incorrect. It should return ~74000 as distance
[18:44:47] <Mandevil> It returns something like 90000000
[18:46:32] <Mandevil> Lolwut?
[18:46:46] <Mandevil> I switched the order of arguments in atan2()
[18:46:54] <Mandevil> But only in one!
[18:46:59] <Mandevil> What the hell is that?
[18:47:26] <aquanight> that makes a pretty big difference
[18:47:44] <Mandevil> Yeah, but what gives? Is the Wikipedia article wrong?
[18:47:44] <aquanight> sweval: [ atan2(2, 3), atan2(3, 2) ]
[18:47:46] <perlbot> aquanight: ["0.588002603547568","0.982793723247329"]
[18:47:57] <aquanight> hmm
[18:48:08] <Mandevil> Or is arctan2(x,y) but atan2(y,x)?
[18:48:12] <Mandevil> Or what?
[18:48:53] <Grinnz> ehuelsmann[m]: generally, trying to detect whether a string is bytes or characters is a flag that you need to be more careful earlier in the pipeline. any byte string is a valid character string, so while you can *guess* based on whether it's valid UTF-8 (which you can test with Unicode::UTF8 or attempting to decode it) there will be false positives
[18:49:36] <aquanight> I'm not sure if I'm seeing what you are. Which arctan did they reverse?
[18:49:51] <Mandevil> Sigma calculation.
[18:50:11] <Mandevil> It's (cos, sin), but what actually works is (sin, cos)
[18:50:32] <Grinnz> ehuelsmann[m]: and there's the complication of the internal state of the string, which is what the utf8 bit is involved in. generally, that should be ignored and just confuses matters. use sprintf '%vX' to find what codepoints the string consists of
[18:51:18] <Grinnz> curdlesnoot++
[18:51:54] <ehuelsmann[m]> Grinnz: I'm with you there. It's just that I wanted to assert that the test isn't round-tripping the wrong things. But: we solved the problem by not roundtripping anything, but checking that the result of the new test fails on the old implementation (which it did).
[18:52:10] <ehuelsmann[m]> So the new implementation does fix an encoding regression.
[18:52:17] <aquanight> I'm not sure I know the answer to that. I was wondering if maybe Wikipedia puts the X parameter first (unlike literally everything else)
[18:52:18] <ehuelsmann[m]> thanks!
[18:52:21] <aquanight> but that doesn't appear to be the case
[18:52:45] <ehuelsmann[m]> I'm now no longer trying to understand the internals in order to assert the roundtrip is testing what I want.
[18:52:51] <Grinnz> cool :)
[18:53:23] <gordonfish> sweval: use Math::BigFloat; [ Math::BigFloat->new(2)->batan2(3)->bstr, Math::BigFloat->new(3)->batan2(2)->bstr ];
[18:53:25] <perlbot> gordonfish: ["0.58800260354756755124561108062508542760170725","0.98279372324732906798571061101466601449687745"]
[18:53:27] <Mandevil> aquanight: I did the direct problem with no argument switching in atan2
[18:53:31] <Mandevil> aquanight: And it works fine.
[18:53:59] <Mandevil> But... what comes out of the alpha1, alpha2 is wrong.
[18:54:07] <Mandevil> So there might be another issue as well.
[18:56:00] <gordonfish> Re: <Mandevil> Yeah, but what gives? Is the Wikipedia article wrong?
[18:56:06] <gordonfish> Do you have a link to the article?
[18:56:21] <aquanight> https://en.wikipedia.org/wiki/Vincenty%27s_formulae
[18:56:22] <Paperbot> Link title(s): [ Vincenty's formulae - Wikipedia ]
[18:56:29] * GumbyPAN CPAN Upload: Test-Mojo-Plack-0.13 by NICOMEN https://metacpan.org/release/NICOMEN/Test-Mojo-Plack-0.13
[18:58:16] <gordonfish> And what exactly there isn't matching up?
[18:58:30] <Mandevil> Inverse problem, computation of sigma.
[18:58:57] <Mandevil> Wiki says sigma = actan2(cos sigma, sin sigma)
[18:59:06] <Mandevil> But it doesn't work unless you switch the arguments
[19:03:50] <gordonfish> sweval: use Math::BigFloat; my $sigma = Math::BigFloat->new(5);  [ Math::BigFloat->new($sigma->copy->bcos)->batan2($sigma->copy->bsin)->bstr, Math::BigFloat->new($sigma->copy->bsin)->batan2($sigma->copy->bcos)->bstr ];
[19:03:51] <perlbot> gordonfish: ["2.8539816339744830961566084581987572104929561","-1.2831853071795864769252867665590057683943714"]
[19:04:17] <aquanight> even the original paper has it as "tan sigma = sin sigma/cos sigma" which is basically equivalent to sigma = arctan(sin, cos)
[19:04:30] <aquanight> arctan2*
[19:04:45] <gordonfish> YEah I definitely remember "tan sigma = sin sigma/cos sigma" from highschool trig
[19:04:58] <Mandevil> So that looks like a mistake?
[19:06:03] <aquanight> I think so
[19:06:20] <aquanight> I mean, as a trig identity, it really does need to be atan2(sin, cos)
[19:06:36] <Mandevil> Hm, good.
[19:06:55] <ology> Wikipedia: sigma = arctan2(cos sigma, sin sigma) But https://www.movable-type.co.uk/scripts/latlong-vincenty.html has σ = atan(sin σ / cos σ)
[19:06:56] <Paperbot> Link title(s): [ Vincenty solutions of geodesics on the ellipsoid in JavaScript | Movable Type Scripts ]
[19:07:18] <Mandevil> I need to check that.
[19:07:27] <gordonfish> sweval: use Math::Trig; [ tan(5), sin(5)/cos(5) ];
[19:07:28] <Mandevil> The azimuth angles come out completely bogus too
[19:07:29] <perlbot> gordonfish: ["-3.38051500624659","-3.38051500624659"]
[19:08:20] <Mandevil> Haha.
[19:08:26] <Mandevil> The angles are borked in wiki too
[19:09:13] <aquanight> honestly
[19:09:14] *** Joins: thrig (~thrig@70.97.65.230)
[19:09:34] <aquanight> I would almost suggest diving into the original paper
[19:10:43] *** Joins: Martchus (~martchus@2a01:c22:73aa:9800:d250:99ff:fe49:3cce)
[19:10:48] *** Quits: Martchus_ (~martchus@2a01:c22:6f52:9e00:d250:99ff:fe49:3cce) (Ping timeout: 255 seconds)
[19:11:20] <thrig> possibly wearing some sort of armour to reduce the risk of paper cuts
[19:12:57] <gordonfish> Just keep scissors handly. It had to know you can hurt it a lot more than it can harm you. That'll learn 'em.
[19:13:08] <gordonfish> has*
[19:13:15] <Mandevil> Nah, the azimuth angles are OK in Wikipedia.
[19:13:20] <Mandevil> No idea what goes wrong there.
[19:15:30] <gordonfish> sweval: use Math::Trig; [ atan( cos(5)/sin(5) ), atan( sin(5)/cos(5) ), atan2( cos(5), sin(5) ), atan2( sin(5), cos(5) ) ];
[19:15:31] <perlbot> gordonfish: ["-0.28761101961531","-1.28318530717959","2.85398163397448","-1.28318530717959"]
[19:15:49] <Mandevil> No, angles are OK, case solved.
[19:16:01] <Mandevil> They just come out negative, for some reason.
[19:16:06] <gordonfish> What I missing above?
[19:16:09] <Mandevil> Needs to be subtracted from full circle.
[19:16:28] <gordonfish> Oh, radians
[19:17:32] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 268 seconds)
[19:17:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:19:31] <Mandevil> Love how if you go in straight line on Earthe the bearing actually changes!
[19:20:06] <thrig> that's due to plate tectonics changing the bearing sea
[19:20:40] <Mandevil> Not going to wrangel with you about that.
[19:20:56] <ology> alaska humor ++
[19:21:06] <thrig> don't pan the handle
[19:21:18] <gordonfish> sweval: use Math::Trig; [ rad2deg(atan cos(deg2rad 5)/sin(deg2rad 5)), rad2deg(atan sin(deg2rad 5)/cos(deg2rad 5)) ];
[19:21:20] <perlbot> gordonfish: [85,5]
[19:21:41] <gordonfish> sweval: use Math::Trig; [ rad2deg(atan2 cos(deg2rad 5), sin(deg2rad 5)), rad2deg(atan2 sin(deg2rad 5), cos(deg2rad 5)) ];
[19:21:42] <perlbot> gordonfish: [85,5]
[19:22:08] <ology> Aha
[19:22:28] <gordonfish> So it's atan(sin/cos) or atan2(sin, cos) here too.
[19:24:16] <gordonfish> The wiki article uses Φ which, iirc, is degrees, so the calculation needs to be in degrees.
[19:24:30] <gordonfish> (Or am I remember that wrong?)
[19:24:51] <gordonfish> s/remember\b\K/ing/
[19:26:33] <Mandevil> Why is there atan2 anyway?
[19:26:45] <Grinnz> integers are easier in C
[19:27:22] <gordonfish> I'll C your integers and raise you a float
[19:27:24] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[19:27:40] <thrig> if you want Gandhi nuking first, sure, integers are easier
[19:27:59] <gordonfish> Confirmed, Gandhi shot first
[19:28:00] <aquanight> Mandevil: atan2 is so you can have x == 0 and still get a valid result
[19:28:07] <aquanight> perlbot: sweval atan2(4, 0)
[19:28:08] <perlbot> aquanight: 1.5707963267949
[19:28:09] <Mandevil> Oh
[19:28:15] <aquanight> perlbot: sweval atan(4/0)
[19:28:16] <perlbot> aquanight: ERROR: Illegal division by zero at (IRC) line 1. 
[19:28:21] <thrig> atan2 gets you the quadrant
[19:28:38] *** Quits: dg (dgl@dg.wtf) (Ping timeout: 268 seconds)
[19:28:39] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[19:28:39] <gordonfish> Yeah div by zero sucks when the universe finally implodes
[19:28:57] <aquanight> perlbot: sweval atan2(-4, 0)
[19:28:58] <perlbot> aquanight: -1.5707963267949
[19:29:49] <aquanight> an argument could be made that it's possible to mathematically define the result of atan X when X is N/0 (even though N/0 itself is normally undefined), but computers aren't so nice about such things
[19:30:05] <aquanight> thus, atan2
[19:31:36] <xenu> in pony n/0==0
[19:32:39] <ology> blasphemy
[19:32:49] *** Joins: monkey_ (~user@190.104.116.134)
[19:33:34] <gordonfish> sweval: use Math::Trig; [ atan2(-4, 0), atan(-4/0.000000000000001) ] # HAH
[19:33:36] <perlbot> gordonfish: ["-1.5707963267949","-1.5707963267949"]
[19:34:22] <Mandevil> Now... how do I report a factual error in a wiki article? Apart from posting on the article's talk page.
[19:34:43] <Grinnz> usually you can just fix wikis
[19:34:51] <thrig> you could try editing it, but my last edit to wikipedia (a spelling fix) got reverted
[19:35:01] <Mandevil> Usuallu, but the formulae are actually a picture I can't edit.
[19:35:09] <Grinnz> then yes, talk page
[19:36:59] <aquanight> Mandevil: check the page source
[19:37:06] <aquanight> they're probably MathML or something like that
[19:37:28] <aquanight> yup they are
[19:38:17] <aquanight> Mandevil: if you just hit the [edit] near the Inverse problem you can see the math ml and can edit them
[19:38:23] *** Joins: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-20-76-65-4-119.dsl.bell.ca)
[19:38:27] <Mandevil> I am looking at it right now.
[19:39:44] *** Quits: Su-Shee_ (~Susanne@p4ffc7cfa.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[19:39:50] <gordonfish> sweval: use Math::BigFloat; use Math::Trig; [ Math::BigFloat->batan2(-4, 0)->bstr, Math::BigFloat->new(-4)->bdiv(0)->batan->bstr ];
[19:39:51] <perlbot> gordonfish: ["-1.5707963267948966192313216916397514420985847","-1.570796326794896619231321691639751442098"]
[19:39:58] <gordonfish> Curious
[19:40:26] <Mandevil> OK, fixed.
[19:40:55] <gordonfish> Same value, though batan2 gives four extra decimal places: 5847
[19:41:25] *** Joins: Su-Shee (~Susanne@p4ffc7e9f.dip0.t-ipconnect.de)
[19:41:55] <gordonfish> Even more interesting, when ->batan is ommited after the ->bdiv:
[19:42:00] <gordonfish> sweval: use Math::BigFloat; use Math::Trig; [ Math::BigFloat->batan2(-4, 0)->bstr, Math::BigFloat->new(-4)->bdiv(0)->bstr ];
[19:42:02] <perlbot> gordonfish: ["-1.5707963267948966192313216916397514420985847","-inf"]
[19:42:10] <gordonfish> So it's ->batan on -inf
[19:42:32] <gordonfish> Impossible number force?
[19:43:49] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (Quit: because)
[19:48:30] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[19:51:18] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 252 seconds)
[19:56:41] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[20:06:06] <gordonfish> I believe, aside from the div by zero issue, atan2 also exists for better precision too.
[20:06:19] *** Joins: Guest9 (~Guest9@103.240.169.111)
[20:07:14] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 255 seconds)
[20:11:36] * GumbyPAN CPAN Upload: Test-BDD-Cucumber-0.80 by EHUELS https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.80
[20:11:36] * GumbyPAN CPAN Upload: Math-String-1.30 by PJACKLAM https://metacpan.org/release/PJACKLAM/Math-String-1.30
[20:12:50] <ehuelsmann[m]> ow. crap.
[20:14:16] <ehuelsmann[m]> the combination of plx and dist::zilla and a new laptop, uploaded the entire local devel/ tree...
[20:14:25] <gordonfish> basheval: c -i=math.h 'printf("[%f] [%f]\n", atan2(4, 3), atan(4/3));'
[20:14:26] <ology> oof
[20:14:26] <perlbot> gordonfish: [0.927295] [0.785398]␤
[20:14:43] <gordonfish> ehuelsmann[m]: And what happened?
[20:15:23] <gordonfish> sweval: use Math::Trig; [ atan2(4, 3), atan(4/3) ];
[20:15:24] <perlbot> gordonfish: ["0.927295218001612","0.927295218001612"]
[20:15:35] <ehuelsmann[m]> gordonfish: dist::zilla didn't prune the devel/ tree that plx generated, because, well, I hadn't added it to .gitignore yet.
[20:16:46] <gordonfish> basheval: c -i=math.h 'printf("[%f] [%f]\n", atan2(-4, 3), atan(-4.0/3.0));' # Damn int literals, need the .0 on those for the div to carried out as a fp calculation.
[20:16:47] <perlbot> gordonfish: [-0.927295] [-0.927295]␤
[20:17:05] <gordonfish> ehuelsmann[m]: Oh, ouch
[20:17:55] <ology> ehuelsmann[m]: The distro is only 6.71megs haha
[20:18:33] <ehuelsmann[m]> ology: yes :-) I fortunately, have as few dependencies as possible.
[20:18:57] <ehuelsmann[m]> I pay attention to the dependencies of my dependencies and try to choose the same, if at all possible.
[20:21:37] * GumbyPAN CPAN Upload: Device-BusPirate-0.23 by PEVANS https://metacpan.org/release/PEVANS/Device-BusPirate-0.23
[20:21:54] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:22:01] <LeoNerd> ^-- another Object::Pad conversion
[20:22:20] <LeoNerd> I think I've done enough of these for now to consider writing a blog post about the process
[20:22:58] <ehuelsmann[m]> LeoNerd: would you say that Object::Pad is stable enough for that? I mean, the version numbers are still low...
[20:23:38] <thrig> dog fooding
[20:25:45] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (Ping timeout: 265 seconds)
[20:25:53] <ehuelsmann[m]> (and I got the impression from Ovid's presentation that much of Cor is under discussion based on iterations to be done on Object::Pad?)
[20:25:57] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[20:26:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[20:26:38] * GumbyPAN CPAN Upload: Test-BDD-Cucumber-0.81 by EHUELS https://metacpan.org/release/EHUELS/Test-BDD-Cucumber-0.81
[20:27:34] *** Joins: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net)
[20:30:51] <LeoNerd> ehuelsmann[m]: The version number of Object::Pad (0.45) represents the fact it's had 45 revisions. That's all
[20:31:01] <LeoNerd> Would you like a larger number? I can easily change that to 45. Or 45000 if that helps
[20:31:31] <ehuelsmann[m]> LeoNerd: well, usually, low numbers mean "still very much in the process of learning what the API should be".
[20:31:43] <LeoNerd> What is a low number?
[20:31:49] <ehuelsmann[m]> If that's not what it means, all the better.
[20:31:56] <LeoNerd> I have CPAN modules that are at 0.01, or 0.02... have been stable for years
[20:32:09] <LeoNerd> I have modules that are into the hundreds or thousands, that I keep changing
[20:32:26] <LeoNerd> The absolute value of a version number isn't interesting. It's just an opaque but monotonic sequence
[20:32:39] <ehuelsmann[m]> Yes, I noticed the 0.01 which hadn't changed for some time.
[20:32:45] <ehuelsmann[m]> I never know what to do with those.
[20:32:56] <ehuelsmann[m]> because (a) were they good the first time around?
[20:33:11] <ehuelsmann[m]> or (b) did the author decide to abandon the effort completely?
[20:33:36] <LeoNerd> Would 1.000 give a different signal?
[20:33:45] <ehuelsmann[m]> to me? yes.
[20:33:48] <LeoNerd> 1.000 last updated 7 years ago
[20:33:54] *** Quits: Guest9 (~Guest9@103.240.169.111) (Ping timeout: 258 seconds)
[20:33:55] <thrig> 1) look at the docs 2) look at the tests 3) look at the test coverage
[20:33:55] <LeoNerd> Is that abandoned? Or stable?
[20:34:08] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:34:13] <LeoNerd> Many of my Test:: modules haven't been changed in -ages-. I use them all the time, they work fine
[20:35:25] <ehuelsmann[m]> I understand that this may not be a correct conclusion in all cases, but 1.0 and unchanged for long "looks" less problematic (to me), than 0.01 and unchanged for very long.
[20:35:54] <LeoNerd> OK. Then I suspect you are reading more into the absolute value of a version number, than most authors bother to convey
[20:36:01] <ehuelsmann[m]> 0.01 is what I call my modules when I start with them. 1.0 is what I call them when I think they're in a state where I want to commit to the API.
[20:36:31] <thrig> (for some of my modules I roll dice to pick the next number)
[20:37:30] <LeoNerd> thrig: for App:: style modules I have sometimes used date-based numbering
[20:37:38] <LeoNerd> in the YYYYdddN form
[20:38:27] <LeoNerd> That way the version number literally just encodes the release date and nothing else of any interest
[20:38:51] <thrig> but bigger number means progress... right? right?
[20:39:44] <Adura> Chrome versioning.
[20:39:55] <LeoNerd> I mean... 0.01 is a large number as compared, e.g, Plank's constant
[20:40:36] <thrig> bloatbrowsers would be my go-to example of bigger number, worse code
[20:41:21] <Adura> Linux caught up to Perl, wonder if it'll beat it.
[20:42:07] <ehuelsmann[m]> hence the question: how stabie is Object::Pad's API taking into account the discussion during the perl conference and the presentation that Ovid and yourself gave with respect to a new object system for Perl?
[20:43:08] <LeoNerd> Fairly stable
[20:44:01] <ehuelsmann[m]> ok. that is more important than the version number.
[20:44:47] <LeoNerd> I mean,... I'm still adding lots of things but I doubt very much of what is there is going to be changed much or removed
[20:45:03] <LeoNerd> The more well-used things are the less likely I am to change them
[20:45:08] <ehuelsmann[m]> the POD has an experimental warning on it. when would you consider Object::Pad to stop being experimental?
[20:45:25] <ehuelsmann[m]> or what does "experimental" mean to you?
[20:45:25] <LeoNerd> no idea
[20:45:39] <LeoNerd> I'll probably remove the wording sometime
[20:45:53] <Adura> If something breaks, just use the version that works.
[20:46:14] <LeoNerd> I don't think I have ever, nor will ever, written anything I[d ever call "stable"
[20:46:25] <LeoNerd> stable means dead. unchanging
[20:46:29] <thrig> Game::AugeanStable
[20:46:41] *** Quits: ominionx (~ominionx@204.98.224.67) (Quit: Leaving)
[20:47:01] <LeoNerd> I have no guarantee that in order to add the next big idea, I won't have to change anything
[20:47:03] <ether> if people don't use my modules because they are versioned < 1.0, that just means I don't have to listen to their feature requests \o/
[20:47:11] <ehuelsmann[m]> ok. but experimental sounds (to me) like "we'll rip the carpet from under you any time that suits us best".
[20:47:13] <ether> . o O ( now I can code in peace! )
[20:47:27] <LeoNerd> I think you are lookingn at the world backwards
[20:47:48] <LeoNerd> You are being afraid to use it in case it changes. That's wrong
[20:47:57] <ether> if, on the other hand, they were to ask me "hey how stable do you think this is? can I use it in production?" I'd be happy to help. but people prefer to leap to their own conclusions
[20:48:19] <LeoNerd> It is me who should be afraid to change it because people are using it
[20:48:46] <ehuelsmann[m]> no, you should not be afraid to change it because people use it.
[20:49:08] <LeoNerd> I *want* people to use it. The more use it gets, the more feedback we get to suggest if it is about right
[20:49:31] <LeoNerd> But I can't get that feedback if you don't use it
[20:50:03] <ehuelsmann[m]> however, there's a difference between "carefully considered change" (which might very well be your case!) and "we've just changed every api this week, last week and each week before that, just because that suited our project better than to consider we're implementing a library". The latter is what happens in the Cucumber/Gherkin project.
[20:50:11] <Adura> Today's feedback: More people will use it at version 1 or higher.
[20:50:40] <LeoNerd> Well I'm not cucumber. I'm a perl developrt
[20:50:58] <LeoNerd> I actually understand the concept of back-compat
[20:51:04] <ehuelsmann[m]> I'm happy to use it at its current version, unless the update strategy looks like what Gherkin's change policy looks like.
[20:51:28] <ehuelsmann[m]> They use semver, but ran through versions 6-20 in 3 years.
[20:51:49] <LeoNerd> I would suggest that historic rate-of-change is a reasonable proxy for future. So maybe read the changelog
[20:52:09] <LeoNerd> See how often I -actually- changed something that would break back compat
[20:52:26] *** Joins: Guest9 (~Guest9@103.250.139.40)
[20:56:41] * GumbyPAN CPAN Upload: Git-MoreHooks-0.010 by MIKKOI https://metacpan.org/release/MIKKOI/Git-MoreHooks-0.010
[20:58:36] *** Quits: thrig (~thrig@70.97.65.230) (Remote host closed the connection)
[21:01:24] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[21:17:06] *** Joins: magla (~gelignite@55d4e6f7.access.ecotel.net)
[21:22:45] <ehuelsmann[m]> Sorry, was called away to dinner. Back now.
[21:23:38] <ehuelsmann[m]> LeoNerd: I hope my question didn't offend you. I think you write great software and never meant to imply you don't understand semver or backward compat. 
[21:24:07] *** LSD is now known as acidsys
[21:29:24] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 255 seconds)
[21:34:14] *** Joins: AndyTurner (~andyt@alligin.plus.com)
[21:47:35] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[21:54:05] *** Joins: deadmarshal (~deadmarsh@95.38.117.236)
[21:57:07] *** Joins: P1RATEZ (piratez@user/p1ratez)
[22:01:14] *** Joins: kensanata (~user@user/kensanata)
[22:04:24] <LeoNerd> ehuelsmann[m]: Oh, it's fine :)
[22:05:41] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[22:09:48] *** Quits: FozzWorth__ (~FozzWorth@68-123-12-205.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 272 seconds)
[22:10:33] <ehuelsmann[m]> good :) wanted to clear out any possible misunderstanding that could have arisen there.
[22:14:32] *** Quits: vyv (~vyv@bras-vprn-nrbaon0452w-lp130-20-76-65-4-119.dsl.bell.ca) (Quit: Konversation terminated!)
[22:21:09] <Mandevil> Can I have multiple constructors in a Moo class?
[22:21:18] <Mandevil> Like e.g. Time::Moment has?
[22:24:59] <choroba> You can call $self->new from any class method you like. Sometimes BUILDARGS is enough. In more complex cases, it's cleaner to have a Builder class
[22:26:13] <gordonfish> Beat me to it :)
[22:27:21] <gordonfish> sub new_foo($invokant) { ....: $invokant->new(...); }
[22:27:56] <Mandevil> Sounds workable.
[22:28:32] *** Quits: nirnam (~nirnam@1.47.137.138) (Ping timeout: 255 seconds)
[22:28:34] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[22:30:44] <gordonfish> Mandevil: Writing sepatate subs is good when you're doing something like Time::Moment and really need that separation, otherwise, as choroba mentioned, BUILDARGS can be used to checking when it given to new and change the behavior as needed.
[22:30:52] <gordonfish> separate*
[22:31:01] <Mandevil> I know about BUILDARGS
[22:31:20] <Mandevil> My use case is really similar to T::M.
[22:31:33] <Mandevil> Creating instance from differently expressed data.
[22:31:43] <gordonfish> Then use something like I gave above.
[22:31:51] <gordonfish> Speaking of subs, time to BUILDLUNCH :)
[22:31:52] <Mandevil> Yeah, doing it, works.
[22:33:00] <choroba> But if the subs become too complex and call many different subs, separating them into Builder subclasses helps. I.e. MyClass::Builder::FromPlainText, MyClass::Builder::FromCSV etc. 
[22:33:54] <gordonfish> Yeah that can work well when when things scale up
[22:36:22] *** Quits: Guest77 (~Guest77@2402:e280:2117:297:ecf8:f374:8704:f843) (Quit: Client closed)
[22:36:43] *** Joins: WinterStar (~IceLight@user/icelight)
[22:39:48] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[22:40:07] *** Quits: furrymcgee (~devuan@31.179.186.66) (Quit: leaving)
[22:40:20] *** Quits: curdlesnoot (~curdlesno@2a03:1b20:1:f410:40::a04d) (Quit: = "")
[22:40:28] *** Joins: nirnam (~nirnam@1.47.25.62)
[22:48:28] *** Joins: jgaz (~jgaz@2600:8805:d800:b3e::2a2)
[22:51:31] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 258 seconds)
[22:54:05] *** Joins: akaWolf (~akaWolf@akawolf.org)
[22:57:21] *** Joins: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net)
[23:03:47] *** Quits: splatt9990 (~chris@134.252.117.66.ded-dsl.fuse.net) (Ping timeout: 265 seconds)
[23:06:40] *** Quits: jgaz (~jgaz@2600:8805:d800:b3e::2a2) (Quit: Leaving)
[23:19:15] *** Quits: deadmarshal (~deadmarsh@95.38.117.236) (Ping timeout: 265 seconds)
[23:28:42] *** Joins: Martchus_ (~martchus@dynamic-095-114-099-023.95.114.pool.telefonica.de)
[23:28:46] *** Quits: Martchus (~martchus@2a01:c22:73aa:9800:d250:99ff:fe49:3cce) (Ping timeout: 250 seconds)
[23:29:58] *** Joins: monkey_ (~user@190.104.116.134)
[23:32:50] *** Quits: fuzzix (~fuzzix@46.7.53.110) (Ping timeout: 268 seconds)
[23:33:48] <ehuelsmann[m]> my current work on Gherkin inherited the use of `Class::XSAccessor`. I'm wondering if I should convert that to Moo or Object::Pad.
[23:33:53] <ehuelsmann[m]> any advice?
[23:39:54] *** Quits: habamax (~habamax@user/habamax) (Ping timeout: 255 seconds)
[23:43:07] *** Quits: Guest9 (~Guest9@103.250.139.40) (Quit: Connection closed)
[23:46:31] <LeoNerd> I'm intending to write a "classical perl" migration guide.. I might consider doing some from other systems too
[23:49:08] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 268 seconds)
[23:51:36] *** Quits: subie (~subie@2601:4c0:4080:bc0:5d87:37ce:c03c:ff89) (Ping timeout: 255 seconds)
[23:51:59] * GumbyPAN CPAN Upload: Dancer2-Plugin-JWT-0.020 by AMBS https://metacpan.org/release/AMBS/Dancer2-Plugin-JWT-0.020
[23:54:10] *** Joins: subie (~subie@2601:4c0:4080:bc0:9855:5895:1d29:8cb4)
[23:57:38] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 255 seconds)
[23:59:42] *** Quits: monkey_ (~user@190.104.116.134) (Ping timeout: 255 seconds)
