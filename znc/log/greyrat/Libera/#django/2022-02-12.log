[00:00:32] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[00:03:27] *** Quits: Xof (~Xof@50-76-33-78-ip-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[00:10:42] *** Joins: Xof (~Xof@108-226-20-160.lightspeed.sntcca.sbcglobal.net)
[00:14:55] *** Joins: stdout (~stdout@2605:ab80:b000:7202:3e12:af82:936c:2ff6)
[00:21:53] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Quit: Ping timeout (120 seconds))
[00:22:17] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[00:26:31] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Client Quit)
[00:27:04] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[00:36:00] *** Joins: slav0nic (slav0nic@python.su)
[00:36:32] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Quit: The Lounge - https://thelounge.chat)
[00:37:06] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[00:37:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[00:37:14] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Client Quit)
[00:38:54] *** Joins: fikran (~fikran@user/fikran)
[00:39:07] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[01:02:09] *** Quits: lithammer (~lithammer@arch-vps.cloud.tilaa.com) (Quit: ZNC - http://znc.in)
[01:04:26] *** Joins: Skyz (~Skyz@user/skyz)
[01:04:30] *** Joins: lithammer (~lithammer@2a02:2770::21a:4aff:fe88:c18d)
[01:33:43] *** Quits: Gudddu (~Guddu@59.95.233.73) (Read error: Connection reset by peer)
[01:52:33] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[01:53:41] *** Joins: epony (epony@user/epony)
[02:18:33] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[02:40:02] *** Joins: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d)
[02:41:45] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[02:42:51] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:45:37] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[02:46:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[02:48:15] *** Joins: fikran (~fikran@user/fikran)
[02:54:02] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:54:38] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[02:56:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:58:36] *** Joins: fikran (~fikran@user/fikran)
[03:18:31] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[03:21:48] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 250 seconds)
[03:21:48] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 250 seconds)
[03:22:59] *** Quits: Xof (~Xof@108-226-20-160.lightspeed.sntcca.sbcglobal.net) (Quit: Bye.)
[03:55:40] *** Quits: serafeim (serafeim@thunix.net) (Quit: WeeChat 3.3)
[03:56:40] *** Joins: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net)
[04:06:44] *** Joins: khausTO (~khausTO@72.15.61.107)
[04:12:37] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[04:14:38] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[04:19:37] *** Quits: kostkon (~kostkon@2a02:587:a101:711a:74ff:7d65:3f72:693a) (Remote host closed the connection)
[04:19:57] *** Joins: kostkon (~kostkon@2a02:587:a101:711a:74ff:7d65:3f72:693a)
[04:21:16] *** Joins: sliss (~sliss@109.136.165.60)
[04:28:46] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[04:42:48] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[04:54:40] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:06:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[05:07:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:07:57] *** Joins: fikran (~fikran@user/fikran)
[05:12:12] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:30:39] *** Joins: kostkon_ (~androirc@2a02:587:a101:711a:b1a9:e0ab:2766:b2d2)
[05:38:01] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:38:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[05:43:19] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:52:25] *** Quits: sliss (~sliss@109.136.165.60) (Quit: sliss)
[06:05:09] *** Quits: kostkon_ (~androirc@2a02:587:a101:711a:b1a9:e0ab:2766:b2d2) (Read error: Connection reset by peer)
[06:06:05] *** Joins: kostkon_ (~androirc@2a02:587:a101:711a:b1a9:e0ab:2766:b2d2)
[06:07:01] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 256 seconds)
[06:07:39] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[06:08:11] *** Quits: dre (~dre@2001:8003:c932:c301:880:1cdd:3f72:271d) (Ping timeout: 250 seconds)
[06:12:17] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 240 seconds)
[06:24:36] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[06:33:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[06:33:47] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:35:21] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[06:45:14] *** Joins: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:954e:b3ac:32f4:edb4)
[06:45:25] <Shoukrun> I have a city_list I pass from the first view to the second view through the url. When I pass that list to the second view and iterate through it, it iterates through every character rather than the strings in the list. I'm not sure why this is and was wondering how to have the full list passed with the strings it contains.
[06:45:26] <Shoukrun> https://dpaste.org/UFqb
[06:49:39] <vdamewood> Shoukrun: What's in the urls.py file for view2?
[06:50:09] <Shoukrun> path('get_price/<id>/<user_city>/<city_list>/<number>', views.get_price, name='get_price'),
[06:51:55] <vdamewood> If you don't give it a type there, it defaults to string.
[06:52:10] <vdamewood> for example <int:number> instead of <number>
[06:52:25] <Shoukrun> ah interesting
[06:52:35] <Shoukrun> what type would i give a list as I'm new to the syntax
[06:53:34] <vdamewood> TBH, No clue. I've never used anything other than a string, a slug, or an int.
[06:54:07] <Shoukrun> hm maybe i can pass it as a string in the url and then change it to a list in the view
[06:56:06] <sheepman[m]> huh? so you're trying to get a list from GET params?
[06:56:12] <sheepman[m]> or am I totally off the mark
[06:56:29] <Shoukrun> Yes that's correct
[06:56:38] <vdamewood> Shoukrun: https://docs.djangoproject.com/en/4.0/topics/http/urls/#registering-custom-path-converters
[06:58:15] <sheepman[m]> yeah that seems the best idea but I have to feel like there's a cleaner way to do it than building an entire list in the URL
[06:58:28] <sheepman[m]> that seems ripe for usage errors to me
[06:58:34] <sheepman[m]> but I suppose if there's no other way :D
[06:59:36] <vdamewood> Yeah, I only ever use scalar values in my own URLs.
[07:00:17] <vdamewood> Actually, no. Now that I think of it. I use the query string if I want to pass something complex.
[07:03:29] *** Quits: Shoukrun (~Shoukrun@2607:fea8:5b5c:2300:954e:b3ac:32f4:edb4) (Quit: Client closed)
[07:15:15] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[07:17:19] *** Joins: fikran (~fikran@user/fikran)
[07:25:17] *** Joins: audiobirb (~audio@user/audio)
[07:28:13] *** Quits: kostkon (~kostkon@2a02:587:a101:711a:74ff:7d65:3f72:693a) (Ping timeout: 240 seconds)
[07:28:17] *** Quits: kostkon_ (~androirc@2a02:587:a101:711a:b1a9:e0ab:2766:b2d2) (Ping timeout: 240 seconds)
[07:29:28] *** Joins: kostkon (~kostkon@2a02:587:a10c:ab13:166c:4076:2353:549e)
[07:35:37] *** Quits: kostkon (~kostkon@2a02:587:a10c:ab13:166c:4076:2353:549e) (Ping timeout: 240 seconds)
[07:38:33] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[07:43:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[07:44:55] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Quit: Kalov)
[07:47:13] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[07:52:39] *** Quits: sreve (~quassel@p549d746f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:52:58] *** Joins: sreve (~quassel@p4ff44b91.dip0.t-ipconnect.de)
[08:15:23] *** Joins: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[08:16:28] *** Joins: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt)
[08:16:28] *** Joins: kristijonas (~kristijon@78-56-32-39.static.zebra.lt)
[08:29:58] *** Joins: cowsay-moo (~cowsay-mo@2a0d:5600:24:1400:1016:46b8:1338:6825)
[08:40:55] <cowsay-moo> question about rest framework.. I have a one-to-many relationship, let's say Chapter and Book.  My Chapter model takes a Book field e.g.: book = models.ForeignKey(Book, related_name="chapters" ...)  - everything is working fine and I can add chapters to a book from the admin panel (selecting the book from a dropdown box), but how do I write this Book object in curl or postman?  as a json object?  if so, how do I define what
[08:40:55] <cowsay-moo> needs to be contained in that object?
[08:41:44] <cowsay-moo> I'm having trouble finding the right search terms to answer my question
[08:43:48] <cowsay-moo> I wish the admin panel would give the option to display the raw request when you insert items with the the GUI
[08:47:37] <cowsay-moo> oh duh.. nevermind.  I just inspected the request with browser dev tools.  all it takes is the Book's id
[09:06:37] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 240 seconds)
[09:08:16] *** Joins: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b)
[09:12:43] *** Joins: ubernost1um (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net)
[09:15:23] *** Quits: ubernostrum (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Ping timeout: 256 seconds)
[09:18:47] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[09:20:36] *** Quits: dre (~dre@2001:8003:c932:c301:1c5e:3f1c:f7a4:be5b) (Ping timeout: 250 seconds)
[09:24:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[09:26:40] *** Joins: fikran (~fikran@user/fikran)
[09:33:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[09:48:15] *** Quits: beanzilla (~beanzilla@user/beanzilla) (Ping timeout: 256 seconds)
[09:48:28] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[09:48:46] *** Joins: kostkon (~kostkon@2a02:587:a116:5dfb:3344:4e2a:bfc7:6d2d)
[09:53:21] *** Quits: khausTO (~khausTO@72.15.61.107) (Ping timeout: 256 seconds)
[09:54:55] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:03:02] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[10:03:46] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[10:09:00] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Quit: Ping timeout (120 seconds))
[10:20:24] *** Quits: kristijonas (~kristijon@78-56-32-39.static.zebra.lt) (Ping timeout: 250 seconds)
[10:20:33] *** Quits: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt) (Ping timeout: 256 seconds)
[10:21:12] *** Joins: kristijonas (~kristijon@78-56-32-39.static.zebra.lt)
[10:21:18] *** Joins: kristijonas_ (~kristijon@78-56-32-39.static.zebra.lt)
[10:23:02] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[10:29:45] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[10:34:13] *** Joins: pro_z (~pro_z@37.214.50.160)
[11:00:12] *** Joins: djapo (~archangel@user/djapo)
[11:17:35] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 250 seconds)
[11:30:37] *** Quits: jgee6 (~jgee@186.80.49.20) (Ping timeout: 240 seconds)
[11:34:13] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:36:01] *** Joins: fikran (~fikran@user/fikran)
[11:38:26] *** Joins: audiobirb (~audio@user/audio)
[12:06:16] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.4)
[12:06:17] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[12:13:17] *** Joins: jug (~jug@user/jug)
[12:43:13] *** Quits: rob4226 (~Thunderbi@45.131.195.71) (Quit: rob4226)
[12:43:41] *** Joins: rob4226 (~Thunderbi@45.131.195.71)
[13:01:36] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[13:08:45] *** Quits: oddish (~oddish@2a01:4f8:1c1c:a9da::1) (Quit: nyaa~)
[13:09:00] *** Joins: oddish (~oddish@2a01:4f8:1c1c:a9da::1)
[13:35:43] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[13:40:18] *** Joins: audiobirb (~audio@user/audio)
[13:43:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:45:22] *** Joins: fikran (~fikran@user/fikran)
[13:57:53] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[14:02:57] *** Quits: audiobirb (~audio@user/audio) (Ping timeout: 240 seconds)
[14:15:56] *** Joins: kostkon_ (~androirc@2.142.66.94.static.otenet.gr)
[14:31:27] *** Joins: sliss (~sliss@109.136.165.60)
[14:33:53] *** Joins: pycode (~pycode3@2001:b07:5d28:551:9832:721:1f16:5f2b)
[14:36:06] *** Quits: sliss (~sliss@109.136.165.60) (Ping timeout: 260 seconds)
[14:42:27] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[14:57:29] <pycode> hello everybody i have a CORE app where i have custom User model then i have different apps to handle specific control panel, like: recruiter, sales_agent, etc... so each app add more info to the user because it has the foreignkey is pointing to the main User (in CORE app), no i would like to understand how can i manage the "ROLE" in the User
[14:57:45] <pycode> i mean the User model should have a field like user_type (the role basically)
[14:57:58] <pycode> to understand where to "redirect" the user after the login etc
[14:58:17] <pycode> should i manually create a list of ROLES in the main User model
[14:58:23] <pycode> or are there different approaches ?
[15:00:31] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[15:05:06] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[15:14:12] *** Joins: Kalov (~Thunderbi@181.226.96.240)
[15:17:05] *** Quits: Kalov (~Thunderbi@181.226.96.240) (Client Quit)
[15:19:23] *** Quits: ubernost1um (~jbennett@75-37-202-116.lightspeed.snmtca.sbcglobal.net) (Quit: leaving)
[15:23:21] *** Joins: kostkon__ (~kostkon@2a02:587:a117:4dd9:f27:3dab:c3c0:af1a)
[15:25:01] *** Quits: kostkon (~kostkon@2a02:587:a116:5dfb:3344:4e2a:bfc7:6d2d) (Ping timeout: 250 seconds)
[15:29:47] *** Joins: kostkon (~kostkon@2a02:587:a112:e692:b0ac:44d2:b98f:5c6f)
[15:31:23] *** Quits: kostkon__ (~kostkon@2a02:587:a117:4dd9:f27:3dab:c3c0:af1a) (Ping timeout: 252 seconds)
[15:32:39] <GinFuyou> pycode, so User has Recruiter, Agent, etc pointing to it?
[15:33:07] <pycode> "an User" could be a recruiter OR agent OR other type
[15:33:23] <pycode> so i am moving the Recruiter model inside the recruiters app because then i have custom things related to recruiters
[15:33:30] <pycode> same things for other types
[15:34:08] <pycode> so the recruiter model has onetoone to User
[15:34:17] <pycode> same others types
[15:34:24] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[15:34:35] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[15:34:58] <pycode> basically the Recruiter model the Agent model etc....are an "extension" of the base User model
[15:35:03] <pycode> with their fields etc
[15:35:48] <GinFuyou> Well, I'd probably have a list of roles on User. It mixes boundaries somewhat but probably most convinient
[15:35:52] <pycode> so i wonder if i need a king of Role table or just add a type inside the main User model when i "install" a new user app)
[15:36:01] <pycode> in a filed like user_type = integer...
[15:36:13] <pycode> yes as i was writing... ok
[15:37:09] <GinFuyou> Technically you'd could test each related model... but you still need to know what to test
[15:38:02] <pycode> GinFuyou, OK so i kind of https://bpa.st/XWTQ
[15:38:15] <pycode> found that here: https://simpleisbetterthancomplex.com/tutorial/2018/01/18/how-to-implement-multiple-user-types-with-django.html
[15:38:47] *** Quits: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k) (Read error: Connection reset by peer)
[15:38:50] <pycode> that code inside User model of course
[15:38:58] *** Joins: daniel-k3 (~daniel-k@fsf/emeritus/daniel-k)
[15:39:36] <GinFuyou> Yeah, that
[15:39:52] <pycode> ok thanks!
[15:39:58] *** Quits: tubogram4 (~tubogram@user/tubogram) (*.net *.split)
[15:39:58] *** Quits: Spr0cket (sprocket@user/Spr0cket) (*.net *.split)
[15:40:32] <pycode> have lunch, bye!
[15:44:04] *** Joins: dez (uid92154@user/dez)
[15:44:56] *** Quits: pycode (~pycode3@2001:b07:5d28:551:9832:721:1f16:5f2b) (Ping timeout: 245 seconds)
[15:52:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[15:54:42] *** Joins: dor (~erg@78.11.12.207)
[15:54:43] *** Joins: fikran (~fikran@user/fikran)
[15:56:02] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Quit: Leaving)
[15:56:32] *** Quits: dor (~erg@78.11.12.207) (Remote host closed the connection)
[15:57:09] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[15:58:08] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Remote host closed the connection)
[16:05:04] *** Joins: ekathva (~ekathva@2001:999:50:cab1:50ea:c175:d5c5:72f3)
[16:16:13] *** Quits: merrinx (~merrinx@ti0028a400-1685.bb.online.no) (Quit: WeeChat 3.3)
[16:19:47] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[16:28:42] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[16:29:40] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[16:32:08] *** Joins: merrinx (~merrinx@ti0028a400-1685.bb.online.no)
[16:32:10] *** Joins: xkuru (~xkuru@user/xkuru)
[16:47:57] *** Joins: thiras (~thiras@user/thiras)
[17:01:18] *** Joins: tubogram4 (~tubogram@user/tubogram)
[17:01:18] *** Joins: Spr0cket (sprocket@user/Spr0cket)
[17:01:20] *** Quits: Spr0cket (sprocket@user/Spr0cket) (Max SendQ exceeded)
[17:01:32] *** Joins: Spr0cket- (sprocket@user/Spr0cket)
[17:02:26] *** Spr0cket- is now known as Spr0cket
[17:02:52] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[17:07:25] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[17:14:02] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[17:14:20] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[17:32:41] *** Joins: magga (magga@ti0036a400-3577.bb.online.no)
[17:39:25] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 240 seconds)
[17:51:08] *** Joins: pepper (~pepper@user/pepper)
[18:01:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[18:04:04] *** Joins: fikran (~fikran@user/fikran)
[18:33:31] *** Quits: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net) (Quit: Leaving)
[18:37:58] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:42:52] *** Joins: Siecje (~Siecje@97.111.200.32)
[18:43:15] <Siecje> I have a test that checks the response is the same as two objects JSON in a list.  https://dpaste.org/poE3
[18:43:23] <Siecje> They appear the same but the test is failing.
[18:45:16] *** Joins: Safa_[A_Boy] (~Safa@89.148.48.91)
[18:46:38] <dodo> " != '
[18:47:11] <Safa_[A_Boy]> Hi all. Let's say I have two fields in ModelA: name and description. Then I wrap the fields with a translation class (to provide name_en, name_fr and description_en, description_fr for example).
[18:47:44] <Safa_[A_Boy]> My question is regarding migrations. If I run the migration with this change, the previous fields will be deleted, and new fields will be created. Is there a way to customise this?
[18:48:04] <dodo> Siecje: fwiw, there's also some mechanism to show the full diff for the test, but i don't recall how
[18:48:08] <Safa_[A_Boy]> I can manually fix the migrations, but say I'm doing 20+ of those.
[18:48:38] <Siecje> dodo: I'm print the arguments above.
[18:49:05] <dodo> Safa_[A_Boy]: the normal approach imo would be 1. add fields 2. deploy and migrate data 3. other deploy and delete old fields
[18:49:53] <dodo> Siecje: the assertion error shows you something else. actually, one looks like a binary string, the other a json object
[18:50:23] <Siecje> dodo: I agree. I just did print( == ) and it is equal
[18:50:57] <dodo> Siecje: __str__ probably looks the same for both
[18:51:04] <Siecje> dodo: right
[18:51:18] <dodo> try to output the type
[18:51:25] <Siecje> How is self.assertEqual(a, b) different than print(a==b)?
[18:51:57] <dodo> you have assertJSONEqual
[18:52:09] <Siecje> assertEqual also fails.
[18:52:16] <dodo> well, one is a string, the other not
[18:52:24] <Siecje> They are both <class 'bytes'>
[18:52:29] <dodo> they are?
[18:52:41] <Siecje> Which is what the print shows
[18:52:56] <dodo> no
[18:53:11] <dodo> try to print repr() or type()
[18:53:42] <Siecje> dodo: https://dpaste.org/Vav1
[18:53:52] <Siecje> I'll try repr() now
[18:54:25] <dodo> interesting
[18:54:30] <Siecje> repr() is the same as print()
[18:54:52] <Siecje> Since the output starts with b'', that's why I said the print shows bytes.
[18:55:23] <dodo> like i said, in your assertion you have something that's string-like and something that's not
[18:55:51] <dodo> maybe the json assertion is smart and detects some special kind of json object, dunno
[18:56:05] <dodo> JSONRenderer().render() might not return a normal string
[18:56:34] <Siecje> bytes for the wire.
[18:57:02] <Siecje> assertEqual() is also False
[18:57:24] <dodo> what happens when you assert that str() and str() are equal?
[18:59:09] <Siecje> actually assertEqual() is True
[18:59:17] <dodo> there you go
[18:59:30] <Siecje> but assertJSONEqual() calls assertEqual() so I was reading the traceback incorrectly.
[18:59:40] <dodo> if you have a response content you probably want to json.loads that anway?
[19:00:15] <Siecje> When should you use JSONRenderer()?
[19:01:04] <dodo> in a test? no idea what you're doing anyway :)
[19:03:02] <Siecje> I'm reviving a project from 7 years ago, must have been from some book or tutorial.
[19:28:07] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 250 seconds)
[19:29:42] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[19:30:48] *** Joins: yang (~yang@fsf/member/yang)
[19:33:21] *** Quits: kostkon_ (~androirc@2.142.66.94.static.otenet.gr) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[19:38:57] <yang> Hello, I would like to create a dpaste pastebin website ( a copy ), I am using apache2 web server, the github code is there, but I couldn't find any information how to proceed with installation? I am also not familiar with django.
[19:51:44] <GinFuyou> yang, it seem to have an installation docs though?
[19:53:40] <GinFuyou> Or do you mean production deployment, since it seem only mention "native" pip install only for development
[19:53:59] <GinFuyou> You could use a generic django deployment guide from that
[19:54:53] <yang> GinFuyou: where did you see installation manual ?
[19:55:33] <yang> I was looking here https://github.com/DarrenOfficial/dpaste
[19:59:36] <GinFuyou> https://docs.dpaste.org/installation/
[20:00:22] <yang> hm, I am not familiar with docker neither
[20:00:36] <yang> can it be installed on apache2 ?
[20:02:21] <GinFuyou> Then go with section using virtualenv
[20:03:28] <GinFuyou> later you can integrate it with apache, but you'll need an aditional wsgi server like gunicorn of uwsgi (mod_wsgi works too but less recomended)
[20:03:49] <GinFuyou> *or
[20:05:30] <cowsay-moo> REST question.. I want a GET that can take an optional query param (e.g. /api/stuff?blah=1).  I've gotten this working with request.query_param['blah'], but it's kind of messy because I have to check if the queryset keys even exists before I can do something with them.  Is there a cleaner way to do this, or a way to gracefully fall back to a default value if the key doesn't exist?
[20:06:08] <doismellburning> cowsay-moo: consider Forms - they're unfortunately slightly misleadingly named, they can be a great way to work with query params generally
[20:06:33] <cowsay-moo> doismellburning, thanks I'll look into it :)
[20:06:57] <GinFuyou> or request.GET.get(<key>, <default>). But forms are always a good idea
[20:07:04] <GinFuyou> ^ that
[20:07:20] <GinFuyou> plain django but DRF probably works the same
[20:07:37] <doismellburning> Ah yeah sorry good call, that actually addresses the specific issue
[20:07:37] <cowsay-moo> thanks!  using DRF
[20:07:42] <doismellburning> I just get a bit enthusiastic about Forms
[20:10:23] <GinFuyou> forms can do more, like validating and converting values, so form are cool even for GET
[20:10:34] <yang> I got this error https://paste.debian.net/1230660/
[20:11:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:11:50] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 256 seconds)
[20:13:12] *** Joins: Harlin (~DonQixote@75-163-202-34.clsp.qwest.net)
[20:13:26] *** Joins: fikran (~fikran@user/fikran)
[20:14:34] *** Quits: Safa_[A_Boy] (~Safa@89.148.48.91) (Quit: Leaving)
[20:20:03] <GinFuyou> yang, looks like it needs some python-dev packages perhaps?
[20:20:07] <yang> ok
[20:20:20] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[20:20:47] <GinFuyou> not sure what it tries to compile here
[20:21:27] <cowsay-moo> ok.. secondary question. I'd like for my query param to trigger an action in the background.. e.g. /api/stuff?dosomething=1 .. if dosomething is true, a background process begins which may take upwards of 30 seconds to finish.  question1) is this bad practice? question2) can i send back status/progress responses?  Note that this is not production software, it's a tool for me to use. in my case, dosomething=1 would trigger a
[20:21:27] <cowsay-moo> web scraper to scrape and refresh the database
[20:22:35] <GinFuyou> You need additional machinery to start background processes
[20:23:01] <GinFuyou> Live updates on it without polling might be not trivial
[20:25:58] <cowsay-moo> background process may be a bad term, it's just some more python code utilizing selenium and whatnot.  essentially, /api/stuff returns whatever has already been scraped, and /api/stuff?dosomething=1 would tell it to rescrape, refresh the DB and return the fresh data
[20:27:44] <GinFuyou> cowsay-moo, background process sounds like a very good term in this context, given it runs dozens of seconds which is too long for usual request cycle
[20:28:13] <cowsay-moo> Ok cool.  I'll look into it a bit more and see what I can figure out
[20:29:34] <GinFuyou> Usually servers set to timeout after 20-30 seconds. You can increse it ofc, but typically long running tasks like that are offloaded to a task manager or something
[20:29:53] <yang> another error https://paste.debian.net/1230663/
[20:32:03] <cowsay-moo> I'm thinking instead of GET /api/stuff?dosomething=1 .. I should probably use a POST /api/refresh/stuff or something
[20:34:09] <GinFuyou> yang, strange, it's installing too recent django version, as I understand it wants 3.2 as newest
[20:34:20] <GinFuyou> 3.1 even
[20:35:27] <GinFuyou> since you got through installation already, try `pip install -U "django==3.1"`
[20:35:29] *** Joins: dor (~erg@78.11.12.207)
[20:36:06] <hylje> cowsay-moo: i would probably look into celery because managing background stuff is kinda core competency for celery
[20:36:32] <hylje> while i usually use it for fire and forget tasks, i do think you can get progress updates from running tasks
[20:37:02] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Read error: Connection reset by peer)
[20:37:38] <GinFuyou> Celery is a robust solution but apparently there are alternatives to it, supposedly easier to use to
[20:38:00] <GinFuyou> Personally I've just been using celery since I'm more or less used to it
[20:38:45] *** Joins: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net)
[20:39:23] <cowsay-moo> hylje, GinFuyou, thanks I'll check into celery and its alternatives
[20:40:17] <cowsay-moo> i saw a discussion about something similar, but in the context of .net core... someone recommended a .net lib called SignalR.  I assume celery et al do something similar
[20:40:47] <hylje> the problems are the same, the names are different
[20:43:06] <yang> GinFuyou: it's binding to 127.0.0.1:8000 I cannot find the setting to bind it to 0.0.0.0
[20:44:10] <GinFuyou> 0.0.0.0:8000
[20:45:01] <GinFuyou>  ./manage.py runserver 0.0.0.0:8000 I mean
[20:45:05] <yang> thanks
[20:45:50] <GinFuyou> But anyway for deployment you can't use runserver, so it will be replaced by your wsgi server config
[20:51:57] *** Quits: znpy (~znpy@user/znpy) (Quit: The Lounge - https://thelounge.chat)
[20:52:12] *** Quits: Throgkt (~Throgkt@user/throgkt) (Ping timeout: 250 seconds)
[20:52:41] *** Joins: znpy (~znpy@user/znpy)
[20:58:14] *** Joins: Throgkt (~Throgkt@user/throgkt)
[20:58:22] <yang> GinFuyou: oops installing "npm" requires 250 extra packages....
[21:02:41] <ChrisWarrick> 250 packages is a tiny amount in js land
[21:03:19] <hylje> good times
[21:03:25] <cowsay-moo> hylje, GinFuyou I think I found what I needed to do this right. https://github.com/rq/django-rq  .. there's another project (django-rq-rest) intended specifically for DRF but unfortunately hasn't been updated in 4 years, but I think I can manage with this.  thanks for all your help
[21:03:36] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:05:00] <GinFuyou> yang, that for development purposes I think? But yeah, it's how it with npm
[21:06:17] <GinFuyou> cowsay-moo, yes, I think I've seen RQ mentioned here a few times. Not sure what specifics it may have for DRF, might be highly optional lib to begin with
[21:10:23] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[21:11:17] <cowsay-moo> it looks easy enough.  I guess the only hard part is going to figure out how to send the completion notice back to the client, but I can probably just store the job statuses in the database and periodically poll for status if I need to
[21:12:25] <GinFuyou> Yes, polling is an easy solution and might be fine enough for your case. Others might be not trivial
[21:14:05] <cowsay-moo> ya, it's not production software, just a utility I'm building for myself so I don't care if I hammer the server with poll requests
[21:27:54] *** Joins: sliss (~sliss@109.136.165.60)
[21:30:46] *** Quits: ekathva (~ekathva@2001:999:50:cab1:50ea:c175:d5c5:72f3) (Ping timeout: 250 seconds)
[21:30:56] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[21:33:41] *** Quits: pepper (~pepper@user/pepper) (Ping timeout: 245 seconds)
[21:37:09] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (Ping timeout: 256 seconds)
[21:40:19] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[21:40:27] *** Joins: pepper (~pepper@user/pepper)
[21:44:53] *** Joins: pycode (~pycode3@2001:b07:5d28:551:b75e:46d2:75ef:52b4)
[21:47:45] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[21:50:09] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[22:00:12] *** Quits: Siecje (~Siecje@97.111.200.32) (Remote host closed the connection)
[22:20:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[22:22:47] *** Joins: fikran (~fikran@user/fikran)
[22:23:17] *** Quits: pro_z (~pro_z@37.214.50.160) (Ping timeout: 240 seconds)
[22:25:36] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:25:44] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[22:27:42] *** Joins: Thanatos (~Thanatos@105.112.16.41)
[22:30:46] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:31:04] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[22:34:02] *** Quits: pycode (~pycode3@2001:b07:5d28:551:b75e:46d2:75ef:52b4) (Ping timeout: 250 seconds)
[22:42:58] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[22:52:11] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[23:07:30] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:09:53] *** Joins: cliluw (~cliluw@47.147.73.223)
[23:11:00] *** Joins: koolazer (~koo@user/koolazer)
[23:14:42] *** Quits: Thanatos (~Thanatos@105.112.16.41) (Remote host closed the connection)
[23:16:34] *** Quits: cliluw (~cliluw@47.147.73.223) (Ping timeout: 256 seconds)
[23:16:43] *** Joins: cliluw (~cliluw@47.147.73.223)
[23:41:20] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
