[00:03:18] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[00:12:08] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[00:13:02] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[00:13:26] *** Joins: hendursaga (~weechat@user/hendursaga)
[00:17:00] *** Joins: dra (~dra@2a04:4540:6422:500:5d1b:3b80:f61:f61a)
[00:39:53] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[00:48:18] <copec> This is my own toy I've been working on, is this considered okay style? https://gist.github.com/copecog/f3fb69009a283a3b6d5e356479cbd3a1#file-lexer-lisp-L26
[01:04:15] *** Joins: Oladon (~olad@98.43.81.226)
[01:06:33] *** Quits: dra (~dra@2a04:4540:6422:500:5d1b:3b80:f61:f61a) (Quit: Leaving)
[01:15:31] *** Joins: Guest93 (~Guest93@2601:c9:8000:14b8:cd23:1377:dd3b:fefc)
[01:32:08] *** Quits: Guest93 (~Guest93@2601:c9:8000:14b8:cd23:1377:dd3b:fefc) (Quit: Client closed)
[01:40:19] *** Joins: tyson2` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:40:49] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:41:10] *** Quits: tyson2` (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[01:43:10] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 244 seconds)
[01:43:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Ping timeout: 244 seconds)
[01:46:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[02:32:02] *** Joins: pjb (~pjb@user/pjb)
[02:38:27] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 244 seconds)
[02:39:14] *** Quits: Psybur (~Psybur@mobile-166-170-29-12.mycingular.net) (Remote host closed the connection)
[03:15:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:31:37] <mfiano> it's better than the usual styles I review in this channel. I'm tired at the moment, but my only comment is the overuse of whitespace. It makes the shape weird and hard to follow for an experienced Lisper (at least for me)
[03:48:28] <copec> mfiano: the space in lining up arguments?
[03:50:33] <copec> I sort of OCD do that, and am used to looking along columns for arguments for each function. Do you have an example of style you like?
[04:27:43] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 260 seconds)
[04:42:02] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:52:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:36:31] <White_Flame> copec: (loop for <1> and <2> ...) means you have 2 FOR clauses.  for n = x will iterate & set N every iteration
[05:37:03] <White_Flame> if you have a separate "with x = n" clause, then that will only be run once in the loop's prolog, and not on every iteration
[05:37:19] <White_Flame> *prologue
[05:37:47] <White_Flame> although I'm not sure if it's hoisted up and if the value of N exists at the time of the WITH clause
[05:37:58] <White_Flame> since it's an iteration variable
[05:39:10] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[05:41:27] *** Joins: johnjay (~pi@192.142.100.50)
[05:58:45] <copec> What I was observing was this: (loop for n in `(1 2 3 4 5 6 7 8 9) and x = n collect `(,x ,n)) => ((NIL 1) (1 2) (2 3) (3 4) (4 5) (5 6) (6 7) (7 8) (8 9))
[05:59:20] <copec> That x gets set to the same initial value as n, but then when the loop starts n is stepped after x is set
[05:59:46] *** Quits: sts-q (~sts-q@212.53.219.190) (Ping timeout: 252 seconds)
[05:59:59] <copec> errr wait, nevermind
[06:00:36] * copec looks in repl scrollback
[06:11:25] <copec> (loop for n from 1 to 10 and x = n collect `(,n ,x)) => ((1 1) (2 1) (3 2) (4 3) (5 4) (6 5) (7 6) (8 7) (9 8) (10 9))
[06:11:55] <White_Flame> oh, so it's happening in parallel, with some difference on the first iteration
[06:14:01] <copec> https://gist.github.com/copecog/6d4124df375bafd8d7a041e13ae94b1c
[06:17:37] <beach> For information, SICL LOOP does not behave that way.
[06:17:59] <beach> (loop for n from 1 to 10 and x = n collect x) => (1 2 3 4 5 6 7 8 9)
[06:18:48] <copec> It was thinking it was on purpose for keeping a var of the last iteration to do something with, or something
[06:18:56] <copec> Sounds like I shouldn't depend on that
[06:19:04] <beach> (loop for n in '(1 2 3 4 5 6 7 8 9) and x = n collect `(,x ,n)) => ((1 1) (2 2) (3 3) (4 4) (5 5) 6 6) (7 7) (8 8) (9 9))
[06:21:10] <beach> I know, for instance, that MIT LOOP increments the increments the iteration variable beyond the last value, so that in (loop for n from 1 to 10...) you can't say (loop for n of-type (integer 1 10) from 1 to 10...) because n takes on the value 11 in the end.
[06:21:16] <beach> SICL LOOP doesn't do that.
[06:22:55] <White_Flame> yeah, I remember a huge subjective discussion on LOOP correctness a year or two ago.  Those edge behaviors are either unspecified, or the descriptions of 2 features read contrary to each other regarding the final iteration value
[06:25:15] <White_Flame> I haven't used ITERATE.  Do you know if it's actually more well specified in cases such as these?
[06:26:04] <beach> Me?  I don't use ITERATE.  I use SICL LOOP! :)
[06:26:40] <White_Flame> heh, so you rely on your own unspecified behavior? ;-)
[06:27:18] <White_Flame> (un-CLHS-specified)
[06:27:30] <beach> That's one way of putting it, I guess.  I guess I shall have to specify it unless it is already in the SICL specification. 
[06:28:22] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[06:28:35] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 260 seconds)
[06:31:29] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[06:34:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:01:46] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 245 seconds)
[07:16:24] *** Quits: vats (~vats@103.158.91.167) (Ping timeout: 265 seconds)
[07:17:28] *** Joins: vats (~vats@42.111.14.36)
[07:28:12] *** Joins: johnjay (~pi@192.142.100.50)
[08:16:26] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[08:30:59] *** Quits: vats (~vats@42.111.14.36) (Ping timeout: 264 seconds)
[08:32:47] *** Joins: vats (~vats@103.158.91.167)
[08:46:37] *** Quits: vats (~vats@103.158.91.167) (Read error: Connection reset by peer)
[08:47:19] *** Joins: vats (~vats@103.158.91.167)
[08:56:11] <CodeBitCookie[m]> Good Morning Everyone!
[08:56:12] *** Joins: silasfox (~sbv@p200300fb27055f598afb1d001f710e59.dip0.t-ipconnect.de)
[08:57:06] <CodeBitCookie[m]> Someone suggested Radical Utils/RUtils to me a while back. How many people actually like it, and use it?
[09:00:16] *** Quits: silasfox (~sbv@p200300fb27055f598afb1d001f710e59.dip0.t-ipconnect.de) (Client Quit)
[09:09:13] <beach> Not many.
[09:19:48] <CodeBitCookie[m]> okay, another thing, how do I download the images which I have extracted the links to. I am webscraping and followed most of the tutorials on it including cl-cookbook's web-scraping one. I don't know if I am being stupid but using dexador, lquery, etc. can't download as far as I know. Maybe Common Lisp has it built in or I am glossing over something? Thanks.
[09:21:43] <CodeBitCookie[m]> What about usocket? 
[09:21:44] <beach> Luckily, Common Lisp (the language) has nothing built-in for downloading anything at all, or for connecting to the web.  
[09:22:06] <beach> But this is not my domain, so I'll let others answer.
[09:22:25] <CodeBitCookie[m]> Yeah, I would hate if it were built in.
[09:30:54] *** Quits: vats (~vats@103.158.91.167) (Ping timeout: 260 seconds)
[09:31:42] *** Joins: vats (~vats@42.111.21.185)
[09:41:13] *** Quits: vats (~vats@42.111.21.185) (Remote host closed the connection)
[09:56:11] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[09:57:16] *** Joins: shka (~herr@83.175.151.96)
[10:06:24] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[10:07:44] *** Joins: makomo (~makomo@user/makomo)
[10:08:39] *** Joins: mala (~mala@user/malaclyps)
[10:13:59] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[10:19:03] <CodeBitCookie[m]> beach: Maybe I should ask this question in #commonlisp:libera.chat ?
[10:21:05] <White_Flame> there's a number of web utilities on cliki.net.  However, in my usage I haven't seen one "good for everything" lib yet, so they'll all have different strengths.  There's probably a simple downloader, but that's a reasonable place to look for libs (besides just system-apropos searching in quicklisp, which doesn't always work because names can be anything)
[10:22:00] <White_Flame> oh, and I guess with scraping that'd be more html than web, but I know I've seen a number of html/xml -> sexpr converters & processors
[10:22:39] <CodeBitCookie[m]> White_Flame: oooh, nice. I forgot to look into cliki.net. 
[10:22:40] <White_Flame> (but yeah, answer #1 is search cliki, and maybe also ql:system-apropos)
[10:38:24] <CodeBitCookie[m]> I coudn't find anything there but I am looking at the source code for NYXT which is the FLOSS browser made in CL. Here is one of the files which handles downloads but I don't see where the actual downloading happens: https://github.com/atlas-engineer/nyxt/blob/master/libraries/download-manager/engine.lisp
[10:40:49] <CodeBitCookie[m]> Its eithere dexador or https://github.com/hawkir/calispel
[10:41:20] <CodeBitCookie[m]> Yayyyyyyyyyy it's Dexador, it has the fetch function!!!
[10:48:08] *** Joins: silasfox (~sbv@p200300fb27055fc99d3f76e47cb96727.dip0.t-ipconnect.de)
[10:57:13] *** Joins: makomo (~makomo@user/makomo)
[11:23:10] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[11:35:49] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:39] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:50:35] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[12:41:37] *** Joins: paule32 (~paule32@user/paule32)
[12:48:31] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:52:56] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:57:19] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[13:03:41] <CodeBitCookie[m]> Another newbie question is, why does portability (the implementation type) matter? Like using UIOP or Alexandria for portability, when alternatives run on every OS already and the difference is between implementations. I don't need portability if I am only going to be using SBCL or CLISP.  Why should I care about portability?
[13:04:53] <White_Flame> libraries care about portability
[13:05:43] <White_Flame> and generally speaking, SBCL isn't best supported on some platforms.  If you need to run code elsewhere, you might have to use a non-SBCL implementation and any SBCL-specifics will break if not wrapped
[13:06:34] <White_Flame> also, you can't really discuss CL in these chats unless you're using the same implementation as the one you're talking to.  Even if you're both using SBCL, the other person might be on a different OS with different options there
[13:06:53] <White_Flame> following just standard CL allows basic interchange & the ability to test examples and such
[13:07:08] <White_Flame> standard cl + widely suported portability libraries, that is
[13:08:06] <CodeBitCookie[m]> White_Flame: Ah, I understand the 2nd and 3rd point but I don't get what you mean by libraries caring about portability. If they use it and we use the library, how does it effect us?
[13:08:08] <CodeBitCookie[m]> Oh, you mean making a library?
[13:08:24] <White_Flame> right, any code published for other people to use needs to be portable
[13:09:27] <CodeBitCookie[m]> Ahh, thanks White_Flame .
[13:10:30] *** Joins: makomo (~makomo@user/makomo)
[13:11:56] <White_Flame> np
[13:52:31] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:07:55] *** Joins: sts-q (~sts-q@212.53.219.185)
[15:10:58] <pjb> CodeBitCookie[m]: if you publish your code, people may want to use it with other implementations than the one you used.  So it's better to publish conforming Cl code, or second to that, CL code that can run on several implementations, rather than implementation specific code.
[15:11:46] <pjb> CodeBitCookie[m]: it's even more important when your published code is a library. A library is intended to be used widely. So it should run on the widest range of target platforms possible.
[15:12:28] <pjb> CodeBitCookie[m]: it is understandable that a given application or system may have dependencies and constraints that restrict the number of targets it can run on.  Even if it's regretable.
[15:13:08] <pjb> CodeBitCookie[m]: note: even portable CL code, will be better if modularized into pure conforming CL modules, and "backend" implementation specific modules.
[15:13:50] <pjb> CodeBitCookie[m]: even if you have to write implementation specific code, you can save it, by keeping the implementation specific part in specific modules, and having the core of your core in conforming modules (or portable modules).  
[15:14:27] <pjb> CodeBitCookie[m]: Then even if the user cannot run your whole application on his implementation or target, at least he can run the conforming and portable code, and he can implement on his implementation the missing parts that must be implementation specific.
[16:01:46] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:31:05] <CodeBitCookie[m]> pjb: Nice.
[16:39:08] <CodeBitCookie[m]> Also, I am using lparallel for parallel programming. It wants you to make a "kernel" with the number of "jobs"/threads that you want to give your program to run your tasks. Through multiple sources and some research it is clear that the best performance is when the # Threads = # CPU Cores. How do I get the number of CPU Cores or general hardware information with common lisp. I don't thing it is included by default unless I want to
[16:39:08] <CodeBitCookie[m]> extract the info from the (machine-version) environment variable which is non-sense. I could make a small C program and link it with CFFI like this guy: https://z0ltan.wordpress.com/2016/09/09/basic-concurrency-and-parallelism-in-common-lisp-part-4a-parallelism-using-lparallel-fundamentals/#demos . Although there is a library which does this with more portability ;) called cl-cpus
[16:39:59] <CodeBitCookie[m]> TDLR; How do I detect hardware with ease (must include # of CPU Cores!)
[16:40:11] <CodeBitCookie[m]> *with common lisp of course
[16:58:00] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:05:14] <Kabriel> beach: I was surprised by this from your comment earlier (using SICL loop) -- (loop for n from 1 to 10 and x = n collect x) => (1 2 3 4 5 6 7 8 9)
[17:07:54] <beach> I must have mistyped.
[17:07:59] <beach> It gives the right answer
[17:08:20] <beach> I typed it in manually, because I ran it on a different computer
[17:08:20] <Kabriel> I thought combining clauses by the /and/ construct was for the case when sequential binding was not necessary; as the spec says, "analogous to the behavior of the macro do with respect to do*".
[17:09:08] <beach> Oh, so you are saying it's wrong.
[17:09:20] <beach> That's entirely possible.  I should re-read that phrase.
[17:09:25] <Kabriel> No, I'm a novice. I'm saying that I'm surprised and don't understand.
[17:09:43] <Kabriel> What is the difference between the /and/ and /as/ constructs?
[17:09:55] <beach> I actually haven't read up on LOOP for years, so it's not fresh in my memory.
[17:10:29] <beach> Do you mean AND vs FOR?
[17:11:29] <Kabriel> No, in the loop macro the constrcuts "and" vs "as". In the above code, I would have expected that answer if I had written (loop for n from 1 to 10 AS x = n collect x) (emphasis added).
[17:11:51] <beach> OK, AS and FOR are the same here.
[17:12:06] <Kabriel> I actually use this a lot, which is why I'm really asking; I may be inadvertently using some kind of non-confroming behavior.
[17:12:16] <beach> I see.
[17:12:27] <Kabriel> Yes, sorry, you are correct. I could replace /as/ with /for/.
[17:12:39] <Kabriel> So yes, difference between AND and FOR
[17:12:50] <beach> Seriously, I don't remember.  But if you think SICL LOOP is doing something wrong, I would like to know.
[17:21:13] <Kabriel> Paragraph 5 of 6.1.2.1 says two things; (1) variable initialization and stepping using multple iteration clauses are by default sequential and (2) the /and/ construct can be used if sequential binding and stepping is not necessary.
[17:21:36] <Kabriel> My take on this is that in fact /and/ means the binding is *not* sequential and I rely on this in some of my loops.
[17:22:29] <Kabriel> I suppose a lawyer could argue that "... when sequential binding and stepping are not neccessary." could mean that an implementation is free to always use sequential binding if they wanted, but they don't have to if /and/ is used.
[17:23:22] <Kabriel> ^ shouldn't have said "a lawyer"; I only mean that one could argue the language means that.
[17:24:15] <Kabriel> But is that also true for the difference between do and do*?
[17:25:39] <beach> I think I understand.  I'll try to investigate.  Thanks for pointing it out.
[17:26:13] <Kabriel> Please send me a note when you finish thinking about it. I may have some changes to make!
[17:26:52] <beach> Actually, don't hold your breath.  I am adding an issue, but I am deep into bootstrapping at this point.
[17:29:34] <Kabriel> Understood.
[17:56:27] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[17:56:54] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce)
[18:08:51] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:24:57] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:25:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:33:35] *** Joins: Psybur (~Psybur@mobile-166-170-34-121.mycingular.net)
[18:39:43] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[19:20:02] *** Joins: Oladon (~olad@98.43.81.226)
[19:41:07] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce) (Ping timeout: 256 seconds)
[19:43:24] <pjb> CodeBitCookie[m]: Common Lisp doesn't specify any hardware access operator.  The best you can get, is (list (machine-type) (machine-version) (machine-instance)) #| --> ("x86_64" "iMac17,1" "despina") |# 
[19:43:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:44:07] <pjb> CodeBitCookie[m]: now, with implementation specific extensions, including portability layers such as uiop:run-program, or FFI (CFFI) you can use the OS API and utilities to get that information.
[19:44:57] <pjb> (values (parse-integer (uiop:run-program "/opt/local/libexec/gnubin/nproc" :output :string))) #| --> 8 |# 
[19:48:27] *** Quits: Psybur (~Psybur@mobile-166-170-34-121.mycingular.net) (Ping timeout: 260 seconds)
[19:50:20] <pjb> CodeBitCookie[m]: if you're running on linux you can often gather a lot of hardware information in /proc and /sys.  Otherwise, running the sysctl -a command, or posix getconf/sysconf.
[20:45:22] *** Joins: tyson2 (~user@cpe18b169b14ff9-cmf0f2490de5d0.sdns.net.rogers.com)
[21:05:07] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce)
[21:06:50] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:17:07] *** Quits: st_iron (uid370243@id-370243.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[21:36:43] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce) (Ping timeout: 256 seconds)
[21:44:20] <CodeBitCookie[m]> pjb: Oh, I get it now. I think I will go with cl-cpus since it is just some really small files for Linux, BSD, Windows, and MacOS using cl-cffi calling some programs. Maybe later I will create a library for detecting hardware. Thanks. :)
[21:45:07] <CodeBitCookie[m]> For clarity they do use sysctl and the other programs you mentioned
[21:48:03] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce)
[21:48:31] *** Quits: tyson2 (~user@cpe18b169b14ff9-cmf0f2490de5d0.sdns.net.rogers.com) (Remote host closed the connection)
[21:52:51] <copec> beach: What does (loop for n in '(1 2 3 4 5 6 7 8 9) and x = n and y = x collect `(,n ,x ,y)) do?
[21:53:00] <copec> under SICL
[22:19:47] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce) (Ping timeout: 256 seconds)
[22:48:42] *** Joins: Oladon (~olad@98.43.81.226)
[22:51:52] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[23:04:28] <Kabriel> copec: current master branch: (loop for n in '(1 2 3 4 5 6 7 8 9) and x = n and y = x collect `(,n ,x ,y)) => ((1 1 1) (2 2 2) (3 3 3) (4 4 4) (5 5 5) (6 6 6) (7 7 7) (8 8 8) (9 9 9))
[23:11:17] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce)
[23:34:16] *** Quits: silasfox (~sbv@p200300fb27055fc99d3f76e47cb96727.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[23:35:43] *** Quits: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce) (Ping timeout: 256 seconds)
[23:38:15] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[23:40:44] *** Kabriel is now known as skempf
[23:40:51] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[23:42:06] *** skempf is now known as Kabriel
[23:42:31] *** Joins: Yehowshua (~Yehowshua@2601:c9:8000:14b8:20a4:26b7:bc46:55ce)
[23:51:22] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:54:12] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[23:54:45] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
