[00:01:09] <FromDiscord> <enthus1ast> I've done some work on an windows service in nim, maybe you can build on this code\: https://github.com/enthus1ast/nimWindowsService
[00:01:12] <nrds> <12R2D299> 4GitHub: 7"[WIP] a simple windows service in nim-lang"
[00:01:40] <FromDiscord> <Cark> oh i think i indeed di have a look at it !
[00:01:44] <FromDiscord> <Cark> (edit) "di" => "did"
[00:01:53] <FromDiscord> <enthus1ast> and if you make it better please PR ;)
[00:05:09] <FromDiscord> <enthus1ast> oh windows service should use threads
[00:05:40] <FromDiscord> <Cark> well i'm no authority on the subject, that was my understanding
[00:06:04] *** Joins: neurocyte830 (~neurocyte@user/neurocyte)
[00:06:20] *** neurocyte830 is now known as neurocyte
[00:10:34] <FromDiscord> <s_tmux> sent a code paste, see https://play.nim-lang.org/#ix=3x3h
[00:13:13] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[00:32:01] <FromDiscord> <ajusa> Anyone know why↵`  output = socket.recv(3, timeout = 5000)` returns data inside of output but↵`  output = socket.recv(1000, timeout = 5000)` doesn't? I was expecting that the second would read up to 1000 bytes, and if there aren't that many, after the timeout it would return all it read
[00:32:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:41:08] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:41:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[00:42:14] *** Joins: flynn (~mcbloch@user/flynn)
[00:46:28] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3x3x
[00:49:17] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:56:36] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 250 seconds)
[01:13:11] <FromDiscord> <dom96> In reply to @ajusa "Anyone know why `": I believe those are the semantics but check the docs
[01:20:52] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3x3F
[01:22:06] <FromDiscord> <Cark> you could wrap it in an object variant
[01:22:28] <FromDiscord> <Cark> https://nim-lang.org/docs/manual.html#types-object-variants
[01:25:26] <FromDiscord> <Ayy Lmao> In reply to @Cark "you could wrap it": I will have to experiment with that.
[01:26:55] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[01:27:07] <FromDiscord> <Zachary Carter> @Cark you need to understand quite a bit about Nim's memory model before diving into multithreaded code IMHO
[01:27:18] <FromDiscord> <Zachary Carter> hint: ARC/ORC will get you a long way
[01:27:31] <FromDiscord> <Cark> @Zachary Carter that's the thing exactly
[01:27:52] <FromDiscord> <Cark> and my first question is all about that... but i'd like to find an authoritative resource
[01:27:54] <FromDiscord> <Zachary Carter> thread local heaps aren't too much of an issue, unless you're loading symbols from shared library or doing stuff where you have multiple Nim GC's
[01:28:03] <FromDiscord> <Zachary Carter> I mean I write quite a bit of multithreaded Nim code
[01:28:08] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:28:20] <FromDiscord> <Zachary Carter> I don't know if I qualify as an authoritative source
[01:28:28] <FromDiscord> <Zachary Carter> but what specific question(s) do you have?
[01:29:07] *** Joins: mal``` (~mal``@static.38.6.217.95.clients.your-server.de)
[01:29:17] <FromDiscord> <Cark> so i don't need to worry when using a seq (inside a lock), it won't allocate memory from a thread specific heap ?
[01:29:30] <FromDiscord> <treeform> also if you use arc no more thread local heaps
[01:29:32] <FromDiscord> <Zachary Carter> it depends on what garbage collector you're using
[01:29:43] <FromDiscord> <Cark> i'm ready to use arc or orc
[01:30:01] <FromDiscord> <treeform> then you should be able to use locks and stuff like in C/C++
[01:30:12] <FromDiscord> <Zachary Carter> with ARC/ORC there are still thread local heaps
[01:30:20] <FromDiscord> <Cark> allright that's some pretty good news
[01:30:24] <FromDiscord> <Zachary Carter> it's just by default Nim will allocate ref objects on the shared heap
[01:30:38] <FromDiscord> <Zachary Carter> if you're manually allocating memory, you still need to call `createShared/allocShared`
[01:30:52] <FromDiscord> <Cark> ah so i need to have everything that's croos thread a ref ?
[01:31:03] <FromDiscord> <Zachary Carter> no
[01:31:05] <FromDiscord> <Cark> (edit) "croos" => "cross"
[01:31:27] <FromDiscord> <Zachary Carter> you need to allocate memory you want to share between threads on the shared heap
[01:31:29] *** Joins: happycorsair[m]1 (~happycors@2001:470:69fc:105::205)
[01:31:32] <FromDiscord> <Zachary Carter> and pass pointers to it
[01:31:36] <FromDiscord> <Zachary Carter> or you can use refs
[01:31:43] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (Read error: Connection reset by peer)
[01:31:43] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 276 seconds)
[01:31:52] <FromDiscord> <Cark> allright, so ptr and ref does it
[01:31:57] <FromDiscord> <Zachary Carter> it's pretty much the same as with the normal GC
[01:32:18] <FromDiscord> <Zachary Carter> it's just the GC isn't going to be operating only on the thread local heap
[01:32:30] <FromDiscord> <Zachary Carter> there is no GC really, it's reference counting with move semantics, which you can consider a form of GC
[01:32:54] <FromDiscord> <Zachary Carter> the shared heap is only available when you compile with `threads:on`
[01:33:04] <FromDiscord> <Zachary Carter> which is kind of a duh thing
[01:33:15] <FromDiscord> <Cark> yes that part at least i got right =)
[01:33:31] <FromDiscord> <Zachary Carter> but yes you still need to use locks
[01:33:36] <FromDiscord> <Zachary Carter> if you want to access shared memory
[01:33:42] <FromDiscord> <Zachary Carter> or atomics or whatever concurrency primitive you want to employ
[01:33:56] <FromDiscord> <Zachary Carter> or you can try to write your program in a way where you don't have any shared memory
[01:34:13] <FromDiscord> <Zachary Carter> but this often times requires some careful planning and thinking ahead of time and isn't always possible
[01:34:53] <FromDiscord> <Cark> ok then, now let's say i have an object that is a ref, and it has a field that is a non ref object. will i have some copying going on behind the scene when passing it through a channel ?
[01:35:01] <FromDiscord> <ajusa> In reply to @dom96 "I believe those are": I did check the docs, but is there any way to get as much as a socket can read before it times out using net?
[01:35:04] <FromDiscord> <Zachary Carter> well objects aren't refs you have refs to objects
[01:35:09] <FromDiscord> <Cark> right
[01:35:24] <FromDiscord> <treeform> threading is hard its best to avoid, low performance threading (locks/polling) is easier then high performance threading...
[01:35:26] <FromDiscord> <Zachary Carter> I don't use channels with ARC/ORC
[01:35:36] <FromDiscord> <Zachary Carter> so I can't really comment
[01:35:46] <FromDiscord> <Cark> ok i can live without those
[01:36:05] <FromDiscord> <Zachary Carter> if you have a non-ref object that was allocated on the stack, my guess is that yes it would be copied
[01:36:07] <FromDiscord> <Cark> performance (to me) isn't an issue if the calls a coarse
[01:36:28] <FromDiscord> <Cark> ok that makes sense
[01:36:35] <FromDiscord> <Zachary Carter> it should be easy enough to test
[01:37:00] <FromDiscord> <Cark> ah but i worry about leaving heisenbugs due to my poor understanding
[01:37:11] <FromDiscord> <Zachary Carter> start simple
[01:37:42] <FromDiscord> <Zachary Carter> just write a program that starts a thread and write a thread proc that echos something you pass into it
[01:37:49] <FromDiscord> <Zachary Carter> go from there and experiment / play around
[01:38:00] <FromDiscord> <Zachary Carter> make sure you're setting the GC to ARC/ORC, and compiling with `threads:on`
[01:38:05] <FromDiscord> <Zachary Carter> what OS are you using?
[01:38:12] <FromDiscord> <Cark> i'm stricktly on windows =)
[01:38:16] <FromDiscord> <Cark> (edit) "stricktly" => "stricctly"
[01:38:19] <FromDiscord> <Cark> (edit) "stricctly" => "strictly"
[01:38:34] <FromDiscord> <Zachary Carter> Okay nevermind then, there is some thread local storage emulation that is enabled by default for macOS which can mess things up
[01:38:43] <FromDiscord> <Zachary Carter> for Windows everything should be fine
[01:38:58] <FromDiscord> <Zachary Carter> I have a bunch of multithreaded code you can stare at if you want to
[01:39:01] <FromDiscord> <Zachary Carter> I'm not sure if it will help at all
[01:39:07] <FromDiscord> <Cark> allright you aleviated my fear about using refs cross thread, and that was my main issue
[01:39:12] <FromDiscord> <Zachary Carter> it's for a fiber based job system
[01:39:15] <FromDiscord> <Zachary Carter> also I don't really use refs
[01:39:20] <FromDiscord> <Zachary Carter> I use `ptr`
[01:39:32] <FromDiscord> <Zachary Carter> I don't really like mixing threads with Nim's GC tbh
[01:39:42] <FromDiscord> <Cark> but aren't there issues having refs inside ptrs ?
[01:39:45] <FromDiscord> <Zachary Carter> and with custom destructors, it's easy enough not to have to
[01:39:52] <FromDiscord> <Zachary Carter> I just don't use refs...
[01:40:04] <FromDiscord> <Zachary Carter> if I'm passing things around between threads anyway
[01:40:06] <FromDiscord> <Cark> allright, but then what about strings and seqs ?
[01:40:10] <FromDiscord> <Zachary Carter> cstring
[01:40:17] <FromDiscord> <Zachary Carter> unchecked array
[01:40:17] <FromDiscord> <Cark> eeek
[01:40:26] <FromDiscord> <Zachary Carter> I also interop with a lot of C code too
[01:40:39] <FromDiscord> <Zachary Carter> I write games / game tech with Nim so...
[01:40:51] <FromDiscord> <Zachary Carter> memory safety isn't really a big concern of mine
[01:40:59] <FromDiscord> <Cark> can i search your name and find your stuff on github ?
[01:41:07] <FromDiscord> <Zachary Carter> yes my name is the same as my github profile
[01:41:18] <FromDiscord> <Cark> i can live without memory safety, but i like the nim facilities =)
[01:41:45] <FromDiscord> <RattleyCooper> In reply to @ajusa "I did check the": What are you trying to do?  Are you able to send a header with the length of the message first, then recv that amount of data?
[01:41:48] <FromDiscord> <Zachary Carter> I feel you - but I don't really miss Nim's GC all that much. I still use it for stuff that stays in Nim land
[01:42:31] <FromDiscord> <Zachary Carter> but so much of the time I'm crossing the Nim/C|C++ boundary that I don't end up using the GC as much as I'm sure most Nim users do
[01:42:49] <FromDiscord> <Cark> allright, so your advice is use ptr cross thread, and i guess there is nothing bad about using strings and seqs in a contained manner
[01:42:56] <FromDiscord> <Zachary Carter> you can try refs
[01:43:01] <FromDiscord> <Zachary Carter> I just don't have much experience using them across threads
[01:43:11] <FromDiscord> <Zachary Carter> the problem with using refs across threads is this
[01:43:31] <FromDiscord> <ajusa> In reply to @RattleyCooper "What are you trying": This is exactly what I'm trying to do, and no I am not able to send a header. This is for generic internet scanning, I just want to open a random tcp connection and recv as much data in 10 seconds as I can
[01:44:49] <FromDiscord> <Zachary Carter> if you pass a managed ref to an object across a thread boundary, I'm not sure how the GC is going to behave
[01:44:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:45:26] <FromDiscord> <Zachary Carter> I'm not sure if the ref counting is going to work correctly and if the object pointed to will be collected at the right time
[01:45:46] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:46:04] <FromDiscord> <Cark> from what i read, ref counting isn't atomic, but that's no issue with locks so i guess it all good
[01:46:11] <FromDiscord> <Zachary Carter> When I did this across DLL boundaries in Nim it was hugely problematic for me because each Nim DLL had its own GC
[01:46:29] <FromDiscord> <Zachary Carter> and they aren't aware of one another - so passing GC'd memory across DLL boundaries caused big issues
[01:46:35] <FromDiscord> <Zachary Carter> with threads - maybe with ARC/ORC it's been figured out
[01:46:49] <FromDiscord> <Cark> but isn't arc a program transformation rather than an actual garbage collector ?
[01:46:52] *** Joins: flynn (~mcbloch@user/flynn)
[01:47:12] <FromDiscord> <Zachary Carter> it is - when I say collected I really mean destroyed
[01:47:38] <FromDiscord> <Cark> allright, you gave me confidence to keep experimenting
[01:47:47] <FromDiscord> <Cark> thanks a bunch !
[01:47:51] <FromDiscord> <Zachary Carter> yeah, no problem!
[01:48:07] <FromDiscord> <Cark> i'll be sure to plunder your code too =D
[01:48:10] <FromDiscord> <Zachary Carter> sorry I can't be more helpful on the ref situation, I just don't have much experience using them
[01:48:28] <FromDiscord> <Zachary Carter> yeah - feel free! if you have any specific questions about anything related to threading just lmk
[01:48:42] <FromDiscord> <Cark> i will
[01:49:35] *** Joins: Guest38 (~Guest38@NE3608lan17.rev.em-net.ne.jp)
[01:50:41] <FromDiscord> <RattleyCooper> In reply to @ajusa "This is exactly what": If it's TCP can't you loop and do multiple `recv`s? (since packets should be ordered, etc)
[01:51:04] <FromDiscord> <RattleyCooper> (edit) "`recv`s?" => "`recv`s with smaller packet size?"
[01:51:16] <FromDiscord> <RattleyCooper> (edit) "etc)" => "etc you should be able to put things back together)"
[01:51:24] <FromDiscord> <enthus1ast> you read from a stream, not packages
[01:52:47] <FromDiscord> <enthus1ast> so yes, you can do multiple recv in smaller chunks
[01:55:22] *** Quits: Guest38 (~Guest38@NE3608lan17.rev.em-net.ne.jp) (Ping timeout: 246 seconds)
[01:55:54] <FromDiscord> <dom96> In reply to @ajusa "I did check the": that's usually an anti-pattern, what are you trying to do?
[01:56:16] <FromDiscord> <dom96> oh, I see above
[01:56:57] <FromDiscord> <enthus1ast> sure if you know the size of your entity before the read, you can read everything
[01:56:57] <FromDiscord> <dom96> I think you just want to recv 1 char at a time, the socket is buffered so you can do this efficiently
[01:57:17] <FromDiscord> <RattleyCooper> What does `<//>` do in nim?
[01:57:40] <FromDiscord> <RattleyCooper> sent a code paste, see https://play.nim-lang.org/#ix=3x3O
[01:59:45] <FromDiscord> <enthus1ast> https://github.com/nim-lang/Nim/blob/version-1-4/lib/system.nim#L873
[01:59:58] <FromDiscord> <enthus1ast> "  # This is only required to make 0.20 compile with the 0.19 line."
[02:00:22] <FromDiscord> <dom96> sounds like we should get rid of it
[02:00:45] <FromDiscord> <dom96> (honestly this should have been called `legacyV019` or something instead of the cryptic `<//>`
[02:00:48] <FromDiscord> <dom96> (edit) "`<//>`" => "`<//>`)"
[02:01:23] <FromDiscord> <RattleyCooper> Ahhh, thanks!
[02:03:24] <FromDiscord> <ajusa> In reply to @dom96 "I think you just": ah, I think I get what you mean. Keep reading a single byte with the 10 second timeout - the only (minor) issue is that this could technically last longer than 10 seconds, as if a server gives me a byte every 9 seconds the timeout will reset
[02:04:14] <FromDiscord> <RattleyCooper> In reply to @ajusa "ah, I think I": If you want a minimum amount of bytes you could timeout if the minimum bytes you require have been received, else keep receiving
[02:04:38] <FromDiscord> <dom96> @ajusa I don't think you need the timeout, are you using async?
[02:04:51] <FromDiscord> <ajusa> nope, just normal sync `net`
[02:05:09] <FromDiscord> <dom96> it would be much easier with async 🙂
[02:05:43] <FromDiscord> <enthus1ast> then you could eg, peek on the socket
[02:05:49] <FromDiscord> <ajusa> async doesn't run everywhere IIRC - for example I heard it doesn't work on AWS lambda so I'd like to avoid it a bit. A `net` only solution should be a lot less work
[02:05:57] <FromDiscord> <enthus1ast> and to other stuff when not enough data is there
[02:06:41] <FromDiscord> <dom96> well, here is a secret: the timeouts are implemented using select() IIRC
[02:06:51] <FromDiscord> <dom96> so you're using a poor man's async already 🙂
[02:07:09] <FromDiscord> <dom96> I don't see why async specifically wouldn't work on lambda
[02:07:59] <FromDiscord> <ajusa> No clue, I'm basing it off of this reddit post (couple of years old though, maybe something has changed): https://www.reddit.com/r/nim/comments/9kgqwl/use_nim_on_aws_lambda/
[02:09:05] <FromDiscord> <ajusa> I think what I'll do is the following - ↵1. Read a byte in a loop with a 10 second timeout↵2. Keep track of the time elapsed outside of the loop and ensure that if it is longer than 10 seconds, I exit and return. ↵That should solve all of my problems. Thanks everyone for the help!
[02:09:14] <FromDiscord> <dom96> can't you write up a quick test and see if it works?
[02:09:25] <FromDiscord> <dom96> async doesn't use a threadpool so that person's theory is at least invalid
[02:09:51] <FromDiscord> <ajusa> In reply to @dom96 "can't you write up": Yeah, I will do that eventually ™️
[02:30:25] <FromDiscord> <RattleyCooper> Anybody know `osproc` well enough to give me some guidance on how I might convert my taskkillable ffmpeg launcher to be pure nim?  Right now I'm relying on a python dll to handle launching the process and sending the "q" to the ffmpeg process to shut it down cleanly...
[02:31:20] <FromDiscord> <RattleyCooper> Last time I attempted it I failed miserably, but maybe this time it'll be different... Figure I'd check to see if anybody had any advice before I try again.
[02:35:05] *** Quits: byanka (~byanka@78.137.43.40) (Read error: Connection reset by peer)
[02:35:48] *** Joins: byanka (~byanka@78.137.43.40)
[02:40:31] <FromDiscord> <dom96> where did you fail?
[02:41:22] <madprops> is it possible to modify the index in an interator loop?
[02:41:26] <madprops> like var i
[02:42:42] <FromDiscord> <treeform> In reply to @RattleyCooper "Anybody know `osproc` well": I find that I can do nearly everything with osproc. You probably need to start a process and poll it.
[02:42:48] <FromDiscord> <RattleyCooper> In reply to @dom96 "where did you fail?": Communicating with the process
[02:42:50] <FromDiscord> <treeform> And send it keyboard inputs at right times.
[02:42:59] <FromDiscord> <RattleyCooper> I need to send "q" to the processes's stdin
[02:43:52] <FromDiscord> <treeform> startProcess(..) then send q to its stdin?
[02:44:24] <FromDiscord> <treeform> p.inputHandle().write("q")
[02:45:37] <FromDiscord> <treeform> if you need to "talk" it to more you can outputHandle().read in while p.running:
[02:47:37] <FromDiscord> <RattleyCooper> Oh wow, yeah.  I had first tried this I was writing basically nothing but python but now that's flipped lol.  I was reading through the docs and it seems a lot more obvious now.  Feel kinda silly asking.  I'm gonna give the `inputHandle().write("q"` a shot, looks like it's exactly what I need.  Thanks for the help everyone!
[02:48:01] <FromDiscord> <RattleyCooper> (edit) "`inputHandle().write("q"`" => "`inputHandle().write("q")`"
[03:01:05] <madprops> how can I "return" to an if result here? https://play.nim-lang.org/#ix=3x42
[03:07:04] <madprops> guess i need an intermediary variable instead of returning from an if/else
[03:08:51] <FromDiscord> <RattleyCooper> In reply to @madprops "guess i need an": Yeah, the code I've seen usually has some kind of `var res` that gets assigned to and returned at the end
[03:08:57] <FromDiscord> <RattleyCooper> (edit) "returned" => ""returned""
[03:12:34] <madprops> is ther an `else` after loops?
[03:12:51] <madprops> I found an old discussion
[03:12:57] <madprops> but don't know if it was implemented
[03:15:33] *** Quits: byanka (~byanka@78.137.43.40) (Read error: Connection reset by peer)
[03:15:55] *** Joins: byanka (~byanka@78.137.43.40)
[03:17:55] <FromDiscord> <RattleyCooper> In reply to @treeform "p.inputHandle().write("q")": How do I get the `File` from the `FileHandle` returned by `inputHandle`?  Come to think of it, I think this is actually where I got stuck last time
[03:19:11] *** Quits: max22- (~maxime@2a01cb088335980015a0e8b6aa4a8809.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:19:36] <FromDiscord> <RattleyCooper> Should I use `inputStream`?
[03:24:13] <FromDiscord> <RattleyCooper> Very confusing
[03:24:57] <FromDiscord> <RattleyCooper> `inputHandle` docs say "Returns p's input file handle for writing to.".  In `io` there doesn't appear to be any `write` method for `FileHandle`s
[03:26:13] <FromDiscord> <RattleyCooper> in `io` there is an `open` proc that takes a `var File` but can't figure out how to create that `File`
[03:26:25] <FromDiscord> <Recruit_main707> is there any symbol for `and` (like `|` for `or`)
[03:27:04] <FromDiscord> <ynfle (ynfle)> In what context? `&`?
[03:27:15] <FromDiscord> <ynfle (ynfle)> @RattlyCooper, var f\: File
[03:27:19] <FromDiscord> <RattleyCooper> (edit) "File`" => "File`(says "Creates a File from a filehandle with given mode")" | "File`(says "Creates a File from a filehandle with given mode")but ... can'tto" 03added "I" | "butIcan't figure out how to create that `File` ... " 03added "to give to the `open` proc"
[03:27:29] <FromDiscord> <Recruit_main707> `[T: int and float]` for example
[03:27:44] <FromDiscord> <ynfle (ynfle)> Does that make sense?
[03:27:50] <FromDiscord> <ynfle (ynfle)> How could it be both types?
[03:28:00] <FromDiscord> <Recruit_main707> its a generic
[03:29:02] <FromDiscord> <ynfle (ynfle)> How could `T` be both?
[03:29:03] <FromDiscord> <Ayy Lmao> a generic in that case still uses either a float or an int, not both at the same time
[03:29:47] <FromDiscord> <Ayy Lmao> `or` does what you think `and` should do I think
[03:29:54] <FromDiscord> <Recruit_main707> uhhh, forget me, my brain is shutting down
[03:30:12] <FromDiscord> <Recruit_main707> thanks xd
[03:31:21] <FromDiscord> <Ayy Lmao> don't worry, generics can be hard on the brain sometimes
[03:31:48] <FromDiscord> <Recruit_main707> actually, im not that dumb, i do want that, because im doing:↵`not SomeFloat and not string`
[03:33:16] <FromDiscord> <Ayy Lmao> I'm not sure if generics can be done with exclusive logic like that. Maybe someone who knows more about it can say.
[03:33:30] <FromDiscord> <ynfle (ynfle)> Have you tried it?
[03:34:02] <FromDiscord> <Recruit_main707> that does compile yeah
[03:34:46] <FromDiscord> <ynfle (ynfle)> Great
[03:34:58] <FromDiscord> <Recruit_main707> but i am wondering if there is a symbol to do express and, i could swear there was
[03:35:40] <FromDiscord> <ynfle (ynfle)> ?
[03:35:53] <FromDiscord> <ynfle (ynfle)> This https://play.nim-lang.org/#ix=3x4d shouldn't compile though
[03:36:07] <FromDiscord> <Rika> In reply to @madprops "how can I "return"": You can “force return” if you use result with return result
[03:36:14] <FromDiscord> <Rika> It’s kinda funky though
[03:36:22] <FromDiscord> <Ayy Lmao> In reply to @Recruit_main707 "but i am wondering": I would think that it would be `&` but I haven't tried
[03:36:31] <FromDiscord> <Rika> In reply to @madprops "is ther an `else`": No
[03:37:28] <FromDiscord> <treeform> In reply to @RattleyCooper "How do I get": this works for me: https://gist.github.com/treeform/6697b0bba77fb111a3b32fb127ecadf2
[03:37:34] <FromDiscord> <Recruit_main707> In reply to @ynfle (ynfle) "This https://play.nim-lang.org/#ix=3x4d shouldn't c": i handle the arguments diferently depending on T
[03:37:49] <FromDiscord> <Ayy Lmao> In reply to @ynfle (ynfle) "This https://play.nim-lang.org/#ix=3x4d shouldn't c": It doesn't compile if you try to use it with anything
[03:37:54] <FromDiscord> <Recruit_main707> when T is X:↵...↵else:↵...
[03:37:56] <FromDiscord> <Rika> In reply to @RattleyCooper "How do I get": Why can’t you use the stream version
[03:38:19] <FromDiscord> <Recruit_main707> In reply to @Ayy Lmao "I would think that": thats what i thought but it isnt apparently
[03:38:50] <FromDiscord> <Rika> In reply to @Recruit_main707 "thats what i thought": Not implemented for type descriptions
[03:38:54] <FromDiscord> <Rika> Use “and”
[03:39:15] <FromDiscord> <Rika> I’m not even sure if “and” is implemented
[03:39:34] <FromDiscord> <Recruit_main707> yes it is apparently
[03:40:33] <FromDiscord> <Ayy Lmao> In reply to @Recruit_main707 "yes it is apparently": Have you looked into concepts? Maybe they suit your use case.
[03:40:34] <FromDiscord> <RattleyCooper> In reply to @Rika "Why can’t you use": I probably can (it compiles).  I'm just curious if there is a way to write to `inputHandle` (docs in osproc make is sound like you can).
[03:41:36] <FromDiscord> <Ayy Lmao> (edit) "In reply to @Recruit_main707 "yes it is apparently": Have you looked into concepts? Maybe they suit your use case. ... " 03added "https://nim-lang.org/docs/manual_experimental.html#concepts"
[03:41:53] <FromDiscord> <ynfle (ynfle)> you open
[03:42:16] <FromDiscord> <ynfle (ynfle)> https://nim-lang.org/docs/io.html#open%2Cstring%2CFileMode%2Cint
[03:42:18] <FromDiscord> <ynfle (ynfle)> \use open
[03:43:02] <FromDiscord> <RattleyCooper> In reply to @ynfle (ynfle) "you open": Yeah, I saw that but am not sure which `File` to give as the first parameter, or how to create that `File`
[03:43:17] <FromDiscord> <ynfle (ynfle)> var f\: File
[03:43:30] <FromDiscord> <RattleyCooper> Oml, wow
[03:43:48] <FromDiscord> <RattleyCooper> I didn't even think of that.  So obvious XD.  Thanks
[03:44:12] <FromDiscord> <ynfle (ynfle)> \:thumbsup\:
[03:44:17] <FromDiscord> <ynfle (ynfle)> Can be confusing sometimes
[03:44:35] <FromDiscord> <RattleyCooper> Yeah, I feel like I should know that by now but it's ok.
[03:48:50] <madprops> Rika when you say `result` wouldnt' tha mean the global proc result and not the if/else ?
[03:49:24] <FromDiscord> <Rika> oh you only want to create a result for either?
[03:49:30] <FromDiscord> <Rika> then sure use a variable
[03:49:51] <FromDiscord> <Rika> wait let me read the code again
[03:50:14] <FromDiscord> <Rika> eh thats not possible
[03:50:23] <FromDiscord> <Rika> missing the values on else
[03:50:51] <FromDiscord> <Rika> provide a value on else because its needed
[03:54:19] <madprops> the problem is if  there are many else values to default to
[03:54:31] <madprops> including repetitions
[03:54:38] <madprops> so yeah a variable is better
[03:55:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[03:56:45] *** Joins: flynn (~mcbloch@user/flynn)
[04:16:16] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:27:27] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 240 seconds)
[04:27:39] <FromDiscord> <rb3.nim> sent a code paste, see https://play.nim-lang.org/#ix=3x4i
[04:28:58] <FromDiscord> <rb3.nim> (edit) "https://play.nim-lang.org/#ix=3x4i" => "https://play.nim-lang.org/#ix=3x4j"
[04:45:49] <FromDiscord> <timotheecour> look at treeRepr and it should become clear
[04:47:12] <FromDiscord> <timotheecour> (edit) "look at treeRepr and it should become clear" => "sent a code paste, see https://paste.rs/L0Q"
[05:00:13] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[05:01:09] <FromDiscord> <rb3.nim> Thanks @timotheecour. I did take a look at the treeRepr, but couldn't see an indicator in the AST to check if a variable was declared with `let` or `var`. That macro you posted seems to work with types, not variables, unless Im missing something
[05:02:40] <FromDiscord> <timotheecour> yes, i see.
[05:05:29] <FromDiscord> <timotheecour> sent a code paste, see https://paste.rs/HVn
[05:10:13] *** Quits: def- (~def-@static.238.114.9.176.clients.your-server.de) (Quit: -)
[05:11:05] *** Joins: def- (~def-@static.238.114.9.176.clients.your-server.de)
[05:12:21] <FromDiscord> <rb3.nim> Seems like what I need, but I can't seem to get it to work in a macro: https://play.nim-lang.org/#ix=3x4q. Doesn't seem like the overload resolution thing works inside the `test2` macro
[05:12:34] <FromDiscord> <rb3.nim> (edit) 04removed "seem to"
[05:13:57] <FromDiscord> <Rika> Does it have to be in a macro
[05:15:07] <FromDiscord> <rb3.nim> Ya, I intend to use it as a utility to write a bunch of macros
[05:15:54] <FromDiscord> <rb3.nim> This seems to work, but in my real code it's not working: https://play.nim-lang.org/#ix=3x4r. Gonna try to repo...
[05:16:09] <FromDiscord> <rb3.nim> (edit) "repo..." => "repro..."
[05:18:49] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any uint128 library?
[05:21:02] <FromDiscord> <timotheecour> https://github.com/nim-lang/RFCs/issues/399
[05:43:14] *** Joins: neurocyte8 (~neurocyte@185.117.69.230)
[05:43:14] *** Quits: neurocyte8 (~neurocyte@185.117.69.230) (Changing host)
[05:43:14] *** Joins: neurocyte8 (~neurocyte@user/neurocyte)
[05:45:19] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:45:19] *** neurocyte8 is now known as neurocyte
[05:53:35] <FromDiscord> <gogolxdong (liuxiaodong)> Nice, is there any way to get pow(2, 67)?
[06:00:53] <FromDiscord> <gogolxdong (liuxiaodong)> I mean the precise integer result rather than  scientific notation which loses tailing digits.
[06:02:26] <FromDiscord> <gogolxdong (liuxiaodong)> handy like 2\\67 in python.
[06:06:19] <mst> that would require bigints, a quick poke around suggests the 'stint' nimble package has an implementation
[06:07:00] <mst> there's also one called just 'bigints'
[06:08:44] <FromDiscord> <Rika> well he asked before that about uint128
[06:08:53] <FromDiscord> <Rika> (gives more perf)
[06:09:06] <FromDiscord> <Rika> i assume you can import compiler for the int128 lib there?
[06:55:16] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[07:28:29] <FromDiscord> <HAT> Hey folks! I'm playing around with Win32 in Nim, if a function returns a type that is not yet defined in winim could I get a rough point in the direction of going about implementing it?
[07:29:08] <FromDiscord> <HAT> (edit) "type" => "structure" | "it?" => "it?↵↵Specifically I'm interested in implementing a PROCESS32ENTRY"
[07:29:32] <FromDiscord> <HAT> (edit) "returns" => "takes" | "takesa structure ... that" 03added "to populate it"
[07:30:28] <FromDiscord> <HAT> (edit) "Hey folks! I'm playing around with Win32 in Nim, if" => "sent" | "function takes a structure to populate it that is not yet defined in winim could I get a rough point in the direction of going about implementing it?↵↵Specifically I'm interested in implementing a PROCESS32ENTRY" => "code paste, see https://play.nim-lang.org/#ix=3x4N"
[07:33:04] <FromDiscord> <HAT> The Process32First() function that I'm using doesn't exist either, I guess I'm going to have to learn the FFI? I'm finding it quite confusing, I guess I'll just keep researching.
[07:37:59] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:38:04] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:42:59] <FromDiscord> <ajusa> Anyone here used Nimx? I'm trying to center align the text in a Label but haven't been able to figure it out
[07:56:05] <FromDiscord> <ajusa> Well I got that working, but I can't get it to work within the Nimx DSL
[08:06:06] <FromDiscord> <Varriount> In reply to @HAT "The Process32First() function that": Pretty much. You redefine the structure in Nim, ensuring that the order of the fields are the same, and that each Nim field's type is the same size as its corresponding C field.
[08:07:03] <FromDiscord> <Varriount> Just keep in mind that a C integer is not the same size as a Nim integer
[08:07:50] <FromDiscord> <Varriount> Nim has `cint`, `cfloat`, etc. for that.
[08:08:27] <FromDiscord> <Rika> winim probably has the proper types for dword etc
[08:11:00] <FromDiscord> <HAT> @Varriount Thank you!
[08:33:29] <FromDiscord> <Varriount> In reply to @HAT "<@!169336940846514176> Thank you!": Don't be afraid to look at Winim, or the C bindings for various things in the standard library.
[08:33:41] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[08:34:48] *** Joins: flynn (~mcbloch@user/flynn)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:36:31] <FromDiscord> <HAT> I find the prospect of taking a peak under the hood a bit intimidating, but I'll give it a crack.
[10:03:30] <NimEventer> New thread by Treeform: Is there no way to pass a specific overload to a macro?, see https://forum.nim-lang.org/t/8369
[10:43:22] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[10:54:21] <madprops> how to I filter out empty chars from a seq? https://play.nim-lang.org/#ix=3x5h
[10:55:46] <PMunch> A char can't be empty
[10:56:55] <madprops> oh wait it's filling it with ' '
[10:56:59] <madprops> (a space0
[10:57:12] <PMunch> Yup
[10:57:26] <PMunch> There are a couple ways you can do it, depending on what you need
[10:57:52] <PMunch> a myStr.splitWhitespace.join might do the trick
[11:17:33] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3x5m
[11:17:40] <FromDiscord> <retkid> i needed a quick stresstest to see if my code was running native or in jvm
[11:17:47] <FromDiscord> <retkid> rate my prime number checker
[11:18:08] <FromDiscord> <retkid> i thought it was cleaver
[11:18:10] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3x5n
[11:21:48] <FromDiscord> <impbox [ftsf]> `wholeNumber = floor(check)` ?
[11:22:35] <FromDiscord> <impbox [ftsf]> why doubly linked list?
[11:22:37] <FromDiscord> <Elegantbeef> Or just `int.float` if you're truncating \:D
[11:23:03] <FromDiscord> <impbox [ftsf]> foo.int.float i wonder if the two type conversions is faster than floor?
[11:23:59] <FromDiscord> <impbox [ftsf]> aww nim doesn't have `frac`
[11:24:10] <FromDiscord> <Elegantbeef> It does indirectly
[11:24:22] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/math.html#splitDecimal%2CT
[11:24:59] <FromDiscord> <impbox [ftsf]> yeah, but less useful if you only want the fractional part
[11:30:07] <madprops> do you think specifying let vs var, helps in the long run?
[11:30:20] <FromDiscord> <Rika> Yes
[11:30:34] <FromDiscord> <Rika> Well, define “helps” first actually
[11:30:37] <FromDiscord> <impbox [ftsf]> when it helps it helps, sometimes it helps
[11:30:42] <madprops> avoids lots of accidents
[11:30:46] <FromDiscord> <Rika> Yes
[11:30:48] <FromDiscord> <impbox [ftsf]> by catching you doing things you don't want to do
[11:30:57] <FromDiscord> <Elegantbeef> It reduces the amount of mutable code reducing side effects
[11:31:06] <FromDiscord> <impbox [ftsf]> but sometimes you realise you actually wanted a var
[11:31:09] *** Joins: max22- (~maxime@2a01cb08833598001ec8a1d2eb1d2f5c.ipv6.abo.wanadoo.fr)
[11:36:46] <madprops> yeah I often have to turn lets into vars
[11:37:22] <madprops> but I guess it's worth it
[11:37:26] <madprops> plus it has the added information to it
[11:38:12] <madprops> like you also know, like the compiler, if it changes or not
[11:39:13] <FromDiscord> <retkid> In reply to @impbox "why doubly linked list?": had problems with arrays, got that to work
[11:39:20] <FromDiscord> <retkid> i couldn't find the floor function
[11:39:28] <FromDiscord> <retkid> (edit) "i couldn't find the floor function ... " 03added "either, so i made up for that with brains"
[11:39:31] <FromDiscord> <retkid> but now i know
[11:40:37] <FromDiscord> <retkid> i was afraid of using let and not var because these vars get wiped every loop so what if the memory space cant be overwritten or worse, what if it makes a new entry for every int
[11:40:53] <FromDiscord> <retkid> so i kinda just thought "eh, i'll figure out var vs let later"
[11:41:59] <FromDiscord> <Rika> In reply to @retkid "i was afraid of": What?
[11:42:25] <FromDiscord> <Elegantbeef> var/let is purely a compile time thing
[11:42:36] <FromDiscord> <Rika> If you aren’t that well versed in how memory works then don’t worry about it until it actually happens
[11:42:41] <FromDiscord> <impbox [ftsf]> you should use a seq[int]
[11:42:52] <FromDiscord> <Rika> Don’t preemptively work around a problem that you think exists
[11:42:52] <FromDiscord> <impbox [ftsf]> var primenumbers: seq[int]
[11:43:18] <FromDiscord> <impbox [ftsf]> also returning a which is never touched?
[11:43:37] <FromDiscord> <impbox [ftsf]> how does someone get the output?
[11:46:49] <FromDiscord> <Rika> I also just noticed that you’re using three periods for the for loop?
[11:47:02] <FromDiscord> <impbox [ftsf]> makes it go faster
[11:47:09] <FromDiscord> <Rika> Lol
[11:52:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[12:28:36] <PMunch> Is there any convention for renaming C functions starting with underscores/double underscores?
[12:28:53] <FromDiscord> <impbox [ftsf]> `function_name` ?
[12:28:57] <PMunch> Just removing them is the obvious choice, but then they might suddenly collide with something
[12:29:05] <FromDiscord> <impbox [ftsf]> (edit) "`function_name` ?" => "sent a code paste, see https://play.nim-lang.org/#ix="
[12:29:18] <PMunch> Hmm, I think something is going on with formatting..
[12:29:22] <FromDiscord> <impbox [ftsf]> yeah
[12:29:26] <FromDiscord> <impbox [ftsf]> add backticks
[12:29:36] <FromDiscord> <impbox [ftsf]> and preserve the original name with underscores
[12:29:52] <PMunch> Ah, yeah that works
[12:46:51] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/LvS
[12:47:33] <FromDiscord> <impbox [ftsf]> oh, i guess not?
[12:48:20] *** Joins: byanka_ (~byanka@78.137.43.40)
[12:48:54] <FromDiscord> <impbox [ftsf]> strangely it works with spaces but not underscores
[12:50:47] *** Quits: byanka (~byanka@78.137.43.40) (Ping timeout: 240 seconds)
[12:51:44] <FromDiscord> <Rika> I believe there is no case where you can preserve underscore at the start or end of an identifier
[12:52:46] <FromDiscord> <impbox [ftsf]> maybe just add a prefix in that case
[12:53:44] <PMunch> Ah, bummer. Yeah I guess a prefix would be possible
[12:54:06] <PMunch> So there is no consensus on how to do this?
[12:54:23] <FromDiscord> <impbox [ftsf]> what's the function for? why is it ?
[12:54:27] <FromDiscord> <impbox [ftsf]> should it even be exposed?
[12:54:35] <FromDiscord> <impbox [ftsf]> if it's a  function it means "magic" right?
[12:55:10] <FromDiscord> <impbox [ftsf]> or reserved for compiler stuff
[12:57:47] <PMunch> Eh, it means more something like "private"
[12:58:25] <PMunch> Essentially I'm wrapping C code, and I need to match type definitions exactly
[13:13:10] <FromDiscord> <haxscramper> I think consensus is to use `importc: "thing"`
[13:13:16] <FromDiscord> <haxscramper> Or you can use unicode underscore
[13:13:25] <FromDiscord> <haxscramper> I bet there are a few dozens to pick from
[13:14:04] <FromDiscord> <haxscramper> !eval let ＿＿＿＿＿test = "123"; echo ＿＿＿＿＿test
[13:14:08] <NimBot> 123
[13:14:16] <FromDiscord> <haxscramper> here you go
[13:14:28] <PMunch> But how would you even type those..
[13:14:37] <FromDiscord> <haxscramper> \:)
[13:15:42] <FromDiscord> <haxscramper> Well, on a more serious note - I think stroppping should support this, but I heavily change proc names anyway, and don't like rely on the implicit `importc` without specifying `"procname"` so
[13:16:05] <FromDiscord> <haxscramper> And everyone seems to be doing the same, to some extent
[13:17:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:20:56] <PMunch> Well my goal is to write something similar to Zigs automatic C header file importer. To be able to just specify a C header file in my code and have it automatically be available to me
[13:21:13] <PMunch> And for that I need some robust scheme for renaming illegal variables
[13:24:00] <FromDiscord> <Elegantbeef> `strutils.nimIdentNormalize`?
[13:26:02] <FromDiscord> <haxscramper> for hcparse I just went with hard renaming everything to nep1
[13:26:03] <FromDiscord> <haxscramper> that does not work with `cName` and `cName_`
[13:26:09] <FromDiscord> <haxscramper> Those two have identical normalized values, but different inC
[13:26:19] <FromDiscord> <Elegantbeef> Ah right forgot stupidity existed
[13:26:21] <FromDiscord> <haxscramper> I keep cache of all renames across whole project I'm wrapping
[13:26:53] <FromDiscord> <haxscramper> PMunch\: do you want to make it semi-automatic like nimterop?
[13:27:29] <FromDiscord> <haxscramper> Automatic file importer must first parse whole project at once to deal with forward declaration graph cycles
[13:27:37] <FromDiscord> <haxscramper> Etc.
[13:27:57] <FromDiscord> <haxscramper> I mean it would only wrap what's imported in `<header>`?
[13:28:22] *** Joins: Vladar (~Vladar@46.162.2.53)
[13:31:16] *** Quits: ozzz (~oz@46.49.41.80) (Ping timeout: 252 seconds)
[13:31:51] *** Quits: idf (~idf@198.23.223.146) (Quit: ZNC 1.8.2 - https://znc.in)
[13:32:00] *** Joins: idf (~idf@198.23.223.146)
[13:32:34] *** Joins: ozzz (~oz@46.49.41.80)
[13:33:03] <PMunch> @ElegantBeef, the goal is to be fully automatic
[13:36:39] <FromDiscord> <haxscramper> You can keep cache of all identifiers, do per-character diff and replace things like `cName` and `cname` with `cName` and `c[Lower]Name`, where `[Lower]` is determined to be necessary because diff between `cName` and `cname` is `c[N-n]ame`
[13:37:06] <FromDiscord> <haxscramper> I do this ... somewhere, I think it was for XML parsing that defined 240 similarlty named enum values
[13:37:38] <PMunch> Hmm, not sure if I totally understand how this works
[13:39:47] *** Joins: pro (~pro@user/pro)
[13:42:11] <FromDiscord> <haxscramper> You just store list of all known identifiers, and when new one comes in you check whether it (normalized) form is already known
[13:42:30] <FromDiscord> <haxscramper> Then you repeatedly "fix" it, untils there is no known rename like this
[13:42:43] <FromDiscord> <haxscramper> Simplest one would be to just add number increments
[13:43:06] <FromDiscord> <haxscramper> `cName` is `cName`, `cname` is `cname1`, `cname_` is `cname2` etc.
[13:43:46] <PMunch> Hmm, given an array of cstring, how can I get a cstringArray type? It's ptr UncheckedArray[cstring], but I can't seem to cast ptr array[0..0, cstring] to a cstringArray..
[13:43:48] <FromDiscord> <haxscramper> https://github.com/haxscramper/hmisc/blob/master/src/hmisc/algo/namegen.nim
[13:44:45] <PMunch> Aha, just a cast :P
[13:45:00] <FromDiscord> <haxscramper> you can probably cast it via `cast[ptr UncheckedArray[cstring](addr ptrToNimArray[][0])`
[13:45:03] <PMunch> Ah I see
[13:45:09] <PMunch> Yeah I guess that works
[14:37:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[14:40:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Client Quit)
[15:03:00] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[15:04:08] *** Joins: flynn (~mcbloch@user/flynn)
[15:21:10] <FromDiscord> <gogolxdong (liuxiaodong)> Is there any way to parse integer from sha256 result?
[15:22:40] <FromDiscord> <rb3.nim> what's the correct equivalent of `sym is converter` (check if a symbol is a converter)?
[15:23:41] <PMunch> Hmm, this error message should be a bit more specific about what type it is expecting: http://ix.io/3x6R
[15:23:55] <PMunch> gogolxdong, what do you mean?
[15:25:41] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:32:29] <PMunch> @rb3.nim you can use getImpl.kind to check if it is a nnkConverterDef
[15:34:27] <FromDiscord> <gogolxdong (liuxiaodong)> like `int.from_bytes(sp_quality_string, "big", signed=False)` in python
[15:35:24] <FromDiscord> <gogolxdong (liuxiaodong)> which sp\_quality\_string is the result of sha256
[15:36:25] <FromDiscord> <rb3.nim> Thanks @PMunch. What I want to do is take an `untyped` symbol and check if it's callable, without resorting to `compiles`. The first step I thought of is to check `declared(sym)`, and then try `sym is proc`. Ill try `getImpl` to check for converter
[15:38:45] <PMunch> Ah, untyped doesn't have type information
[15:38:47] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 240 seconds)
[15:38:52] <PMunch> Which is the entire point of it
[15:39:14] <PMunch> It's before the type checking pass, so Nim doesn't know anything about what type it might be
[15:40:11] <PMunch> What I typically do is output a statement that accepts a `typed` argument and handles it accordingly
[15:41:03] <PMunch> gogolxdong, seems like you might want parseHex
[15:41:05] <FromDiscord> <rb3.nim> Ya, so I'll have to convert it to an `nnkSym` right? so will try passing it to a macro with `typed` arg like you say
[15:41:16] <PMunch> Correct
[15:49:08] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:52:05] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Client Quit)
[15:52:33] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[16:01:58] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 252 seconds)
[16:19:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[16:27:51] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[16:29:18] *** Joins: xet7 (~xet7@user/xet7)
[16:35:03] <PMunch> Hmm, is there a way to check if two types are binary compatible?
[16:35:45] <PMunch> Ie. if I want to add overrides so that a C int might become an enum or a void * might be a specific type in Nim land?
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:16] <PMunch> But ensure that the enum is actually the same underlying int type and that the specific type is actually a pointer of some kind
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:00] <FromDiscord> <haxscramper> That has to be solved on case-by-case basis I think. I mean, `void` is a `pointer`, but for enums this is different
[16:37:11] <FromDiscord> <haxscramper> What are your exact use cases?
[16:37:44] <FromDiscord> <haxscramper> int-as-bitset, int-as-enum and `void`-as-actually-pretty-concrete-pointer?
[16:39:18] <PMunch> Well I have already wrapped this library by hand, but now I want to transition to using my libclang based binding generator. But I have added some more type information to make it a bit safer, combined a bunch of constants into an enum for example. I want to add the possibility to create manual overrides of type signatures, but these would be checked to make sure they are actually compatible
[16:41:43] <FromDiscord> <haxscramper> I create a "Raw" wrappers for a procedure using original C signature and then allow to automatically declare wrapper one that does type conversion using nim code. This also allows me to introduce semi-automatic checks for exit codes, wrap things into return-via-pointer-to-argument and other things
[16:41:45] <FromDiscord> <haxscramper> Also
[16:42:03] <FromDiscord> <TimApple> Can someone point me to a tutorial for Nim that would be at complete newb level? Thanks
[16:42:06] <FromDiscord> <haxscramper> Because wrapper logic is implemented in nim I don't have to worry about potential unsafety on the wrapper edge
[16:42:18] <PMunch> Hmm, that is a good point
[16:42:53] <FromDiscord> <haxscramper> Any sort of let's wrap `int` as nim `enum` might lead to silent bugs due to reliance on implementaiton details and such
[16:42:57] <PMunch> @TimApple: https://narimiran.github.io/nim-basics/
[16:43:04] <FromDiscord> <TimApple> Thanks
[16:44:34] <FromDiscord> <haxscramper> I simply allow wrapper generator users to provide their own callback that can invoke arbitrary logic like https://github.com/haxscramper/hcparse/blob/master/src/hcparse/hc_impls.nim#L78
[16:44:49] <FromDiscord> <haxscramper> But in the end it is impossible to do without some sort of manual work
[16:45:08] <FromDiscord> <haxscramper> You can write `yaml/S-expression` file with signature patterns
[16:45:26] <FromDiscord> <haxscramper> For example you can do something like nim `lispRepr()` ast, but
[16:46:30] <FromDiscord> <haxscramper> Well, we have S-expression parser in the stdlib, and this is the best way to specify AST patterns. If C procedure declarations unifies with any of the matchers you invoke custom logic and provide two-level wrappers for it
[16:48:07] <FromDiscord> <haxscramper> Something like that
[16:48:12] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3x7h
[16:59:51] <FromDiscord> <TimApple> I'm installing nim for the first time. Windows 11 thinks nimble is a trojan.
[17:03:32] <PMunch> Yeah, it's a false positive
[17:04:47] <PMunch> Basically Nim has been used to write some malware, this meant that these malware samples where fingerprinted and added to various malware databases. Only problem is that they didn't add enough counter-examples in their fingerprinting so now legitimate Nim programs are sometimes fingerprinted as malware
[17:05:47] <PMunch> There is an ongoing effort to report false positives to the malware vendors, hopefully this will help, but in the meantime we get false positives for Nim and Nimble..
[17:06:03] <FromDiscord> <TimApple> Thanks for the info
[17:08:14] <PMunch> Please report the files here as false positives: https://www.microsoft.com/en-us/wdsi/filesubmission/. The more people who report them the greater the chance is that Microsoft will improve the fingerprinting
[17:11:49] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[17:17:45] <FromDiscord> <dom96> Yeah, this really shows how ridiculous av software is
[17:33:07] <FromDiscord> <smartlyweird> Hey everyone. Im trying to find any solution to embed lua scripts into nim just the way how its done with c# or any other language.
[17:33:54] <FromDiscord> <smartlyweird> I saw examples where there's a lib to call lua in nim flavour. But i dont think it'd be compatible with my project
[17:34:48] <FromDiscord> <smartlyweird> I want to make a independent dll which i can load in my program and it could load lua scripts arbitrarily
[17:36:22] <FromDiscord> <haxscramper> The library also provides direct wrappers for the LUA API, so you can use these directly https://github.com/jangko/nimLUA/blob/master/nimLUA/lua.nim#L149
[17:36:35] <arkanoid> Pmu
[17:36:38] <arkanoid> Ups
[17:36:44] <FromDiscord> <haxscramper> And take any C tutorial for it
[17:38:22] <arkanoid> PMunch: I read that you were trying to use libclang to parse C headers. I'm dealing with a header file that requires double or triple preprocessor passes and both c2nim and nimterop are failing to parse without a lot of manual edits. Do you know if libclang does that?
[17:38:57] <PMunch> That is kinda the problem I'm trying to solve here
[17:39:23] <PMunch> Use an actual C compiler to do all the heavy lifting, and just extract the information it reads
[17:39:33] <PMunch> Seems to work fairly well so far
[17:40:18] *** Joins: arkurious (~arkurious@user/arkurious)
[17:41:27] <arkanoid> If you want a testcase, I'm dealing with data binding wsdl files. In particular, I've been trying to generate nim wrapper of the C interface generated by gSOAP given a wsdl
[17:42:21] <arkanoid> In general, this would enable the automatic generation of API from a wsdl, just like Microsoft or Oracle does
[17:45:52] <PMunch> My current test-case is Unbound
[17:45:54] <arkanoid> I gave up that path due to the fact that I'm not a C/C++ programmer and I had some difficulties in handling all the things required to make c2nim happy. I'm writing a pure nim converted based on xmltree but it's a very difficult job there too
[17:47:04] <arkanoid> If you have a prototype to test, I'd be happy to run it on the headers I'm talking about
[17:47:11] <PMunch> I'm writing dynamic libraries for it and need to know about all its data-structures and such, so I'm trying to have automatic generation of those
[17:47:26] <PMunch> Currently it's super hacky and just outputs text :P
[17:47:54] <arkanoid> Yeah, my XML converted is at that stage too
[17:48:11] <arkanoid> But please don't give up! You've a fanbase here
[17:49:05] <FromDiscord> <haxscramper> btw, PMunch, if you are interested in examples on using libclang (and getting data from it) you can see anything in https://github.com/haxscramper/hcparse/tree/master/src/hcparse or ask me
[17:49:46] <FromDiscord> <haxscramper> I added `[]`/`.kind`-based API on top of clang visitors
[17:50:00] <FromDiscord> <haxscramper> But otherwise it is pretty close to the wrappers you are using
[17:50:03] <PMunch> arkanoid, if you want to give it a go you can copy this: http://ix.io/3x7N/nim
[17:51:29] <PMunch> Then write a test.h file that #includes the stuff you would need from C and potentially add some -I things in line 95
[17:51:48] <FromDiscord> <smartlyweird> In reply to @haxscramper "The library also provides": Nice! Btw came across this link https://www.mail-archive.com/nim-general@lists.nim-lang.org/msg00742.html
[17:51:52] <PMunch> But keep in mind that this is pre-PoC code :P
[17:52:26] <FromDiscord> <smartlyweird> But not sure if i can call any lua script arbitrarily instead of one which is embedded
[17:53:41] <PMunch> Wait, have you already written something like this haxscramper?
[17:55:51] <FromDiscord> <haxscramper> I've been on this for the last year
[17:56:07] <FromDiscord> <haxscramper> But it is not ready yet
[17:56:08] <FromDiscord> <haxscramper> And I don't have any concrete timeline
[17:56:34] <FromDiscord> <haxscramper> Because I had some redesign considerations etc.
[17:57:02] <FromDiscord> <haxscramper> After arkanoid's struggles with c2nim and another discussion in the telegram
[17:57:30] <PMunch> Hmm, and here I was hoping that I'd have something I could use for real-life production code over the weekend :P
[17:57:53] <FromDiscord> <haxscramper> I also wrap c++
[17:58:06] <FromDiscord> <haxscramper> Which is an absolutely astonishing levels of grossness
[17:58:21] <PMunch> Haha, yeah I'm focusing on C for now :P
[17:58:37] <FromDiscord> <haxscramper> std\:\:string is just
[17:58:58] <arkanoid> PMunch: where I can get the clang module?
[17:59:27] <PMunch> nimble install clang
[17:59:33] <arkanoid> oh!
[17:59:56] <PMunch> I think it's that one, but it might be the one called libclang :P
[18:00:03] <PMunch> It's the most recent one
[18:01:31] <arkanoid> this is the most recent one https://github.com/samdmarshall/libclang-nim
[18:05:07] <arkanoid> do you know why c2nim didn't follow a similar path since the beginning?
[18:05:21] <arkanoid> parsing C from scratch, isn't this reinventing the wheel?
[18:06:09] <FromDiscord> <haxscramper> libclang cant'
[18:06:10] <FromDiscord> <haxscramper> well
[18:06:50] <FromDiscord> <haxscramper> there must be three ways of wrapping total - manually (or using helper macro) via `importcpp`, using dumb tool like c2nim or nimterop that barely understands C/C++
[18:06:59] <FromDiscord> <haxscramper> And using libclang or libtooling
[18:07:13] <FromDiscord> <haxscramper> libtooling is an ultimate solution, but it has severe chicked-egg problem
[18:07:28] <arkanoid> nimterop uses tree-sitter, that's not at "barely" level afaik
[18:07:38] <FromDiscord> <haxscramper> That is barely
[18:07:46] <FromDiscord> <haxscramper> trust me, if you can parse C syntax it means
[18:07:49] <FromDiscord> <haxscramper> it means nothing
[18:08:36] <FromDiscord> <haxscramper> oh, btw, nimterop does not understand preprocessor, instead just degates things to `gcc -CPE`, which means no processing of the platform-specific things
[18:08:49] <FromDiscord> <haxscramper> anyway
[18:08:54] <arkanoid> I trust you
[18:09:05] <arkanoid> yeah I know that nimterop skips the preprocessing
[18:09:16] <arkanoid> problem is that it makes code explode, in my context
[18:09:25] <arkanoid> as I'm dealing with generated .h
[18:09:27] <FromDiscord> <haxscramper> this is a viable solution because it a dumb solution
[18:09:57] <FromDiscord> <haxscramper> if you try to get smart with C and especially C++ wrapping you get into almost infinite sinkhole of "fixing" things
[18:10:13] <FromDiscord> <haxscramper> But ideal pipeline for c2nim is
[18:10:17] <FromDiscord> <haxscramper> "ideal" my ass
[18:10:26] <FromDiscord> <haxscramper> use boost wave to deal with preprocessor
[18:10:37] <FromDiscord> <haxscramper> use tree-sitter to deal with C syntax
[18:10:51] <FromDiscord> <haxscramper> provide user-defined hooks on every stage
[18:11:01] <FromDiscord> <haxscramper> preprocessor, ast convesion etc.
[18:11:09] <arkanoid> I won't touch c++ even with very long branch
[18:11:46] <FromDiscord> <haxscramper> But this still leaves a lot of problems such as forward declarations cycles, C library dependencies (yes, believe or not C(++) libraries do depend on each other)
[18:12:17] <FromDiscord> <haxscramper> Latter is especially complicated problem, because nim thinks of two `importcpp: "std::string"` as two different types
[18:12:28] <FromDiscord> <haxscramper> btw we have three incomplete C++ stdlib wrappers in the nimble
[18:12:33] <FromDiscord> <haxscramper> they all define string
[18:12:40] <FromDiscord> <haxscramper> these strings are not interoperable with each other
[18:12:55] <FromDiscord> <haxscramper> nim won't allow this
[18:13:57] <FromDiscord> <haxscramper> libclang has full understanding of the code, but it is also a problem
[18:14:05] <FromDiscord> <haxscramper> Because it is not a feature, it is a requirement
[18:14:17] <PMunch> I'm basically just doing libclang because that's how Zig does it
[18:14:26] <PMunch> And the Zig way apparently works really well
[18:14:46] <arkanoid> does Zig convert C to Zig successfully?
[18:15:21] <FromDiscord> <haxscramper> For example, a while back someone asked me if my tool could help them wrap a library, and I tested it (with what I had at the moment). In the end I realized that it can't be wrapped directly, because it uses a configure script and insanely convoluted build system, where I would have to basically integrate hcparse into
[18:15:33] <FromDiscord> <haxscramper> But c2nim-like would handle it almost perfectly well
[18:15:41] <FromDiscord> <haxscramper> but reimplementing C parser
[18:15:42] <PMunch> @arkanoid, how it works in Zig: https://ziglang.org/documentation/0.8.0/#Import-from-C-Header-File
[18:15:47] <FromDiscord> <haxscramper> ...
[18:17:25] <FromDiscord> <haxscramper> Although I don't understand why c2nim didn't use gcc's parsers, IIRC it was implemented in bison
[18:17:25] <arkanoid> PMunch: whoa! That's a real FFI. Beats nim without even playing
[18:17:49] <PMunch> Exactly, and there really isn't a good reason why Nim couldn't do the same thing
[18:18:10] <FromDiscord> <haxscramper> I think that having intermediate wrapper files is better in the long run
[18:18:21] <PMunch> I mean we're invoking a C compiler at some point, so half the work is just getting all the definitions for stuff
[18:18:22] <arkanoid> nim deserves a similar thing. Why don't just grab Zig code that does that and convert to nim?
[18:18:51] <PMunch> I did have a look at the Zig code, not quite sure what it was doing though
[18:19:02] <PMunch> Uses a completely different way of parsing than I do..
[18:19:13] <PMunch> Maybe I'll rewrite it if down the line my way doesn't work
[18:20:09] <arkanoid> haxscramper, why do you think that manual wrapping would work on the long run?
[18:20:12] <FromDiscord> <haxscramper> do you have a link to that part of compiler, or I should go search myself?
[18:20:21] <PMunch> The plan is basically to just get all the type definitions and procedure signatures converted to Nim, then the rest is just a matter of linking it together with the original C sources and it should work fine
[18:20:24] * PMunch crosses fingers
[18:20:58] <arkanoid> it would be a game changer
[18:22:39] <PMunch> @haxscramper, this seems to be the main entry point of the parsing: https://github.com/ziglang/zig/blob/master/src/translate_c.zig#L355
[18:22:41] <FromDiscord> <haxscramper> Not manual wrapping↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[18:22:54] <FromDiscord> <haxscramper> Explicit `.nim` with wrappersr written down
[18:22:57] <FromDiscord> <haxscramper> That you can document
[18:23:11] <FromDiscord> <haxscramper> Also you can rename things to nep1 compliant style
[18:23:25] <FromDiscord> <haxscramper> Also provide wrappers that turn error codes to exceptions
[18:23:47] <FromDiscord> <haxscramper> Also write examples that don't operate on "magically" created types, but instead use things that are written in the code
[18:24:03] <FromDiscord> <haxscramper> Also there is no middlemen between you writing things and nim compiler
[18:24:52] <FromDiscord> <haxscramper> But I don't mean "manual" I mean that you can have `import wrapper/somefile`, but how exactly it is generated is not my problem
[18:25:12] <FromDiscord> <haxscramper> Also I don't have to drag wrapper system alongside compiler implementation
[18:25:22] <FromDiscord> <haxscramper> IIRC nimterop runs `toast` binary each time I compile code
[18:25:25] <FromDiscord> <Rika> makes sense
[18:25:35] <arkanoid> make sense, yeah
[18:25:51] <FromDiscord> <Rika> its easier to debug things when things arent "autogen"ed on cct
[18:25:52] <FromDiscord> <Rika> (edit) "cct" => "ct"
[18:25:56] <arkanoid> I do agree that nimifing interface is good
[18:26:02] <FromDiscord> <haxscramper> Exactly
[18:26:28] <FromDiscord> <haxscramper> Too much magic
[18:26:28] <FromDiscord> <haxscramper> Too complicated interface
[18:26:29] <FromDiscord> <haxscramper> My main issue with nimterop basically↵(@Rika)
[18:26:33] <FromDiscord> <haxscramper> If I don't like something in the `.nim` wrapper I can just open and edit
[18:26:38] <FromDiscord> <Rika> also no reason to run the gen every time you compile no
[18:26:39] <arkanoid> zig translate-c is the command line tool that does the same thing of compile-time @cImport, apparently
[18:27:17] <arkanoid> maybe c2nim is the nearest point to equilibrium before diving into madness
[18:27:36] <arkanoid> but if someone else is already maintaining that madness, why not
[18:28:22] <FromDiscord> <haxscramper> idea of c2nim is the closes you can go to the "average library" yes
[18:28:37] <FromDiscord> <haxscramper> Automate 95% of work
[18:28:52] <FromDiscord> <dom96> Anybody ever used this? https://cxx.rs
[18:28:54] <FromDiscord> <haxscramper> But sometimes you need 100%, and that's where things start to get super fun
[18:29:00] <FromDiscord> <haxscramper> Like wrapping Qt
[18:29:02] <FromDiscord> <Rika> if only 100% was automatable
[18:29:11] <FromDiscord> <haxscramper> 5% of qt is probably full-time work for a month
[18:29:21] <FromDiscord> <haxscramper> It is, but that's hard to do↵(@Rika)
[18:29:30] <FromDiscord> <Rika> i meant practically in this case
[18:29:31] <FromDiscord> <Rika> so yeah
[18:29:45] <FromDiscord> <haxscramper> NO, I mean it is practically possible as well
[18:29:57] <FromDiscord> <Rika> really?
[18:30:01] <FromDiscord> <Rika> what is holding us back then
[18:30:26] <FromDiscord> <haxscramper> It just requires an order of magnitude more work from both person wrapping a library and person implementing wrapper generator
[18:31:07] *** Joins: pro (~pro@user/pro)
[18:31:17] <FromDiscord> <haxscramper> Nothing, I'm already working on this↵(@Rika)
[18:31:21] <FromDiscord> <Rika> i see
[18:31:24] <FromDiscord> <Rika> GL
[18:31:26] <arkanoid> is the typing that's more difficult, or the functions
[18:31:27] <FromDiscord> <haxscramper> Right now I can safely say that I'm
[18:31:36] <FromDiscord> <haxscramper> closer to the end than to the start
[18:31:42] <FromDiscord> <haxscramper> that's all I can safely say
[18:31:48] <FromDiscord> <haxscramper> which is a lot btw
[18:32:31] <FromDiscord> <haxscramper> No, the most difficult part is considering the library as a whole, at once↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[18:32:31] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:32:40] <arkanoid> shouldn't this be a join effort of nim experts like you? seems important, and now that I know that another nim competitor is doing that successfully, why not?
[18:32:56] <FromDiscord> <Rika> "nim experts" are very scarce 🙂
[18:33:01] <FromDiscord> <haxscramper> yeah
[18:33:31] <FromDiscord> <Rika> im pretty sure theyre all booked too
[18:33:51] <FromDiscord> <Rika> so yeah arkanoid you better become one sooner or later 😛
[18:34:03] <arkanoid> if only I used nim instead of python for scientific computing years ago!
[18:34:33] <FromDiscord> <Rika> it probably would have taken you a lot more work to make (years ago)\
[18:34:44] <FromDiscord> <Rika> not a lot of libraries back then after all
[18:34:46] <arkanoid> I've converted one of my old algorithms just for fun and it goes three times faster
[18:35:04] <FromDiscord> <Rika> damn thats pretty huge
[18:35:34] <arkanoid> yeah but I was already using numpy, thats a C library with python interface
[18:36:12] <FromDiscord> <Rika> thats even more huge isnt it since that means for 2/3rds of the time it's just python being python....
[18:37:10] <arkanoid> exactly. Basically doing IPC to avoid GIL. With nim I used async mixed with multithreading and is smoooth
[18:37:19] *** Joins: rockcavera (~rc@192.12.112.204)
[18:37:19] *** Quits: rockcavera (~rc@192.12.112.204) (Changing host)
[18:37:19] *** Joins: rockcavera (~rc@user/rockcavera)
[18:38:47] <arkanoid> Btw, I want to learn how to parse. I realizes that I lack basic knowledge of this topic.
[18:39:00] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3x7X
[18:40:16] <arkanoid> I nave this piece of code that walks all over a directory of XML schema files, and reaches all nodes in order according to dependencies. Now I think I would need a grammar but I lack this knowledge
[18:40:18] <FromDiscord> <haxscramper> Having to do this requires to have graph library with graph algorithms, which I have to write from scratch, because nim did not really have anything of that sort, and closes alternative `disruptek/gram` used `static` for graph properties, but due to some implementation details I had to temporarity turn directed graph into undirected
[18:41:16] <FromDiscord> <haxscramper> Also C can do `struct A; struct B { a A;}` in one header, and `struct B; struct A { b B; }` in another header
[18:41:42] <FromDiscord> <haxscramper> It is easy to fix with c2nim - just copy things into one header
[18:43:01] <FromDiscord> <haxscramper> An maybe fix some imports. But if I must automate 100% then I have to keep track of all movements (or make things work as if there were no movements at all, which is easier due to `export` in nim - I can pretend that all files expose both `A` and `B`, while having them saved in a third file).
[18:43:03] <FromDiscord> <haxscramper> And so on
[18:44:33] <FromDiscord> <haxscramper> But I don't thin c2nim will ever switch to boost+tree-sitter implementation, nor does it have to, because this can be done using external tool
[18:46:52] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.2)
[18:47:11] <arkanoid> I fear there's quite a lot of different opinions on this topic
[18:47:25] <FromDiscord> <haxscramper> parsing?
[18:47:35] <FromDiscord> <haxscramper> or the wall of text I just dumped?
[18:49:08] <arkanoid> from the point of view of a nim user who doesn't like C++, but it's quite ok with C, the current FFI nim offers hard to use when header is quite convoluted, so welcome to project where complexity is on the other side
[18:49:10] <arkanoid> the wall of text
[18:49:57] <FromDiscord> <cabboose> Hey I’m a bit confused with HashSets; I assumed the `[]` proc would just use the hash of the object and give you whatever element in the set had that same hash value but that doesn’t seem to be the case for me
[18:50:37] <FromDiscord> <haxscramper> No, hashset does not simply reuse the hash, it also compares object for equality in case of collisions
[18:50:45] <FromDiscord> <cabboose> ah
[18:50:53] <FromDiscord> <cabboose> that sucks
[18:50:55] <FromDiscord> <haxscramper> So object must be `hash(X) == hash(Y) and X == Y` to be considered equal IIRC
[18:51:01] <FromDiscord> <haxscramper> you can overload `==`
[18:51:09] <FromDiscord> <cabboose> I thought I had though
[18:51:25] <FromDiscord> <Rika> can you make a playground example?
[18:51:31] <FromDiscord> <cabboose> I have; maybe it’s not using it though, I’ll have another tinker in the morning
[18:51:40] <FromDiscord> <haxscramper> Yes, usually having complexity on the other side is preferrable↵(<@709044657232936960_arkanoid=5b=49=52=43=5d>)
[18:51:58] <FromDiscord> <cabboose> Unfortunately the mrs is forcing me off which is why i asked here instead of madly throwing things at it to fix it
[18:52:07] <FromDiscord> <cabboose> i’ll check in on the forum tomorrow if i cant figure it
[18:52:09] <FromDiscord> <cabboose> thanks
[19:08:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:09:44] <arkanoid> I'm giving c2nim another try, just to test again after some time the same thing I've been struggling months ago
[19:10:00] <arkanoid> but I'd like to ask now, instead of guessing
[19:10:15] <arkanoid> what does this C define means? #define SOAP_STRINGIFY(s) #s
[19:11:10] <arkanoid> what that second hash means?
[19:12:22] <FromDiscord> <haxscramper> `#s` converts `s` token to string
[19:12:47] <FromDiscord> <haxscramper> nim version is a `template soap(s: untyped): untyped = astToStr(s)`
[19:12:55] <FromDiscord> <dom96> @haxscramper what is the approach your taking for FFI? are you building a better c2nim?
[19:13:01] <FromDiscord> <dom96> (edit) "your" => "you're"
[19:13:33] <FromDiscord> <haxscramper> including that, yes
[19:13:38] <FromDiscord> <haxscramper> But not the only part
[19:13:49] <FromDiscord> <haxscramper> Well, I think better c2nim is a one-week project at most
[19:14:40] <arkanoid> haxscramper, so in #ifdef C2NIM that would become "def SOAP_STRINGIFY(s) template SOAP_STRINGIFY(s: untyped): untyped = astToStr(s)" ?
[19:16:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[19:16:58] <FromDiscord> <haxscramper> No, I don't think so. From the documentation of `#def` in c2nim I think there is no way to have `#s`
[19:17:14] <FromDiscord> <haxscramper> Maybe you can try to
[19:17:36] <FromDiscord> <haxscramper> `#def SOAP_STRINGIFY(s) #s`? At least that's how I understand `#def`
[19:17:47] <FromDiscord> <haxscramper> > ↵> #def is very similar to C's #define, so in general the macro definition can be copied and pasted into a #def directive.↵>
[19:18:23] <arkanoid> yeah I've already tried "def SOAP_STRINGIFY(s) #s", but I get Error: identifier expected, but got: s
[19:19:54] <FromDiscord> <dom96> In reply to @haxscramper "But not the only": what's the other part?
[19:20:35] <FromDiscord> <haxscramper> Remaining 5% for full automation
[19:20:45] <FromDiscord> <haxscramper> c2nim approach is not automatic, it is about first 95%
[19:20:58] <FromDiscord> <haxscramper> It is relatively easy to do, you just push decision to the end users
[19:21:28] <FromDiscord> <haxscramper> But if you need to squeeze the last 5%, it becomes exponentially more difficult to implement
[19:21:55] <FromDiscord> <haxscramper> But this is equally important in the long run
[19:23:11] <FromDiscord> <dom96> how are you getting that last 5%?
[19:23:40] <FromDiscord> <haxscramper> using libclang instead of boost-wave+tree-sitter
[19:28:26] <FromDiscord> <dom96> Nice, likely the best approach. I've considered doing the same after writing an obfuscator using libclang
[19:33:53] <FromDiscord> <haxscramper> For full automation yes, but average use case requires 95%
[19:34:52] <FromDiscord> <enthus1ast> 🤣 to avoid this annoying antivirus false positive?↵(@dom96)
[19:36:27] <FromDiscord> <dom96> hah
[19:36:46] <FromDiscord> <dom96> nah, it was my BSc project
[19:37:38] <FromDiscord> <enthus1ast> \:)
[19:38:05] <FromDiscord> <dom96> you can try it here: https://picheta.me/obfuscator
[19:43:55] <FromDiscord> <ajusa> Does Nimx require laying out all the elements by hand? There's no automatic layout system similar to flexbox?
[19:45:15] <FromDiscord> <ajusa> Also, it seems like there aren't many cross platform options for GUI interfaces that work on Android as well - Nimx and Qt seem to be the only ones that can be used
[19:53:35] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:54:43] *** Joins: flynn (~mcbloch@user/flynn)
[19:59:06] <FromDiscord> <whisperdev> required type for fd: SocketHandle↵  but expression 'fd' is of type: SocketHandle
[20:24:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:37:32] <NimEventer> New thread by Kalbhairab: How to reverse string in nim, see https://forum.nim-lang.org/t/8370
[20:59:44] <FromDiscord> <enthus1ast> @ajusa\:  maybe fidget, at least this is the plan I think
[21:00:07] <FromDiscord> <enthus1ast> https://github.com/treeform/fidget
[21:00:14] <FromDiscord> <ajusa> Yeah, but Fidget 2 is months away so I don't want to spend too much time working with normal Fidget
[21:00:48] <FromDiscord> <ajusa> Treeform's mentioned that it'll be very different, plus it will support stuff like touch events and scrolling I think
[21:01:21] <FromDiscord> <enthus1ast> Then you're better informed than me 😁
[21:02:20] <FromDiscord> <enthus1ast> Currently building guis is terrible, only html is crossplatform
[21:02:31] <arkanoid> haxscramper, do you know what's the name of "#define SOAP_STRINGIFY(s) #s" thing? I'm trying to google it, but I lack the right keyword
[21:02:56] <FromDiscord> <ajusa> Ah okay 😅. ↵Yeah I think I'll just write this using Jester and opening a link to the local server in the user's browser, that seems like the easiest way of doing things...
[21:03:15] <FromDiscord> <haxscramper> https://gcc.gnu.org/onlinedocs/gcc-4.8.5/cpp/Stringification.html#:~:text=When%20a%20macro%20parameter%20is,This%20is%20called%20stringification%20.
[21:04:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[21:07:40] <NimEventer> New Nimble package! kombinator - Kombinator is a tool to generate commands line from parameters combination from a config file., see https://gitlab.com/ArMour85/kombinator.git
[21:09:26] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:27:26] <FromDiscord> <gogolxdong (liuxiaodong)> `/home/lingx/.nimble/pkgs/websock-0.1.0/websock/extensions/compression/deflate.nim(384, 8) Error: cannot bind another '=destroy' to: DeflateExt:ObjectType; previous declaration was constructed here implicitly: /home/lingx/.nimble/pkgs/chronos-3.0.6/chronos/asyncmacro2.nim(321, 33)`
[21:27:39] <FromDiscord> <Yardanico> that's a known issue with arc
[21:27:42] <FromDiscord> <Yardanico> lemme show you
[21:27:58] <FromDiscord> <Yardanico> https://github.com/nim-lang/Nim/issues/14226
[21:34:16] <arkanoid> haxscramper, thanks! Gonna ask in the forum for a solution
[21:39:49] <NimEventer> New thread by Giaco: C2nim and Stringification, see https://forum.nim-lang.org/t/8372
[21:52:20] <FromDiscord> <dom96> happy Friday!
[21:53:15] <FromDiscord> <dom96> oooh nimforum on HN front page
[22:03:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:64af:236c:94c0:6372)
[22:17:00] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[22:32:40] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[22:34:04] *** Quits: byanka_ (~byanka@78.137.43.40) (Read error: Connection reset by peer)
[22:34:48] *** Joins: byanka_ (~byanka@78.137.43.40)
[22:43:10] <nrds> <06Prestige99> seems like people are complaining that it's "mobile first" and uses javascript, lol
[22:44:08] *** Quits: nrds (~NimBot@ns501209.ip-142-4-210.net) (Remote host closed the connection)
[22:44:31] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[22:53:40] <FromDiscord> <retkid> hey
[22:53:49] <FromDiscord> <retkid> is there any nim header i can generate
[22:54:00] <FromDiscord> <retkid> i just need a function name and an output
[22:54:11] <FromDiscord> <retkid> i could read the source but i feel like thats gonna be annoying
[23:10:01] <NimEventer> New thread by Alexeypetrushin: Any plans for better optional arguments?, see https://forum.nim-lang.org/t/8373
[23:14:58] <FromDiscord> <retkid> can functions be used in the parameters for  other functions?
[23:15:17] <FromDiscord> <retkid> or do you have to pass them to vars before?
[23:22:11] <FromDiscord> <haxscramper> Yes, nim has first-order functions `proc a(cb: proc())`
[23:22:40] <FromDiscord> <haxscramper> What exactly do you mean by "nim header"? Header file?↵(@retkid)
[23:22:58] <FromDiscord> <haxscramper> https://nim-lang.org/docs/manual.html#types-procedural-type
[23:23:32] <FromDiscord> <retkid> i want a list of functions with return types
[23:23:46] <FromDiscord> <retkid> im writing some python to parse it now
[23:25:23] <FromDiscord> <haxscramper> There is a `--header` option, but it is deprecated
[23:25:53] <FromDiscord> <haxscramper> "official" way is to write some external tool, or generate wrappers manually based on `exportc` procs
[23:26:22] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/880888483634380851/unknown.png
[23:26:34] <FromDiscord> <retkid> now all i need to do is get the paramater types
[23:26:37] <FromDiscord> <retkid> (edit) "paramater" => "parameter"
[23:26:38] <FromDiscord> <retkid> but
[23:26:57] <FromDiscord> <retkid> the putting functions in the function is kinda hard
[23:27:28] <FromDiscord> <retkid> i suppose it wont be difficult if the function is in the file
[23:27:37] <FromDiscord> <retkid> if the function is somewhere else that might be impossible
[23:27:57] <FromDiscord> <haxscramper> you are parsing nim code?
[23:28:25] <FromDiscord> <retkid> yes
[23:28:37] <FromDiscord> <Recruit_main707> for what?
[23:28:54] <FromDiscord> <retkid> just need a list of functions, param, and return type
[23:29:02] <FromDiscord> <retkid> so i can automatically generate classes for ffi
[23:29:54] <FromDiscord> <retkid> (edit) "param," => "param types,"
[23:29:55] <FromDiscord> <Recruit_main707> id say macro as pragma would probably be more useful but alright
[23:30:14] <FromDiscord> <Recruit_main707> i actually did something similar but ive lost the code probably
[23:31:01] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3x9v
[23:31:15] <FromDiscord> <retkid> all i need is the params which are really dicey
[23:33:06] <FromDiscord> <haxscramper> `import compiler`?
[23:33:27] <FromDiscord> <retkid> ?
[23:33:38] <FromDiscord> <Recruit_main707> you can use the compiler as a module
[23:33:45] <FromDiscord> <haxscramper> https://github.com/haxscramper/hnimast/blob/master/src/hnimast/pnode_parse.nim#L13
[23:34:10] <FromDiscord> <haxscramper> yes, parsing nim using naive string handling is not the best idea
[23:34:25] <FromDiscord> <retkid> yea thats why im using py
[23:34:32] <FromDiscord> <haxscramper> That is, if you need somewhat robust solution
[23:34:45] <FromDiscord> <retkid> parsing a language with that language can cause weird unexpected issues
[23:34:55] <FromDiscord> <retkid> or maybe i underthought it
[23:35:12] <FromDiscord> <Recruit_main707> that sentence definetly doesnt make sense xd
[23:35:36] <FromDiscord> <retkid> lol idk lemme be im running on half steam and cheese cake
[23:35:41] <FromDiscord> <Recruit_main707> specially in nim because you can use the actual compiler
[23:36:29] <FromDiscord> <Recruit_main707> yeah yeah, no worries, whatever you are comfortable man, checking the nim way could also be useful to learn tho
[23:37:10] <FromDiscord> <retkid> well, this stuff is pretty simple so i would really only be learning how to split strings in nim
[23:37:17] <FromDiscord> <retkid> unless im doing the compiler which might be overkill
[23:38:50] <FromDiscord> <retkid> ooh i have an idea
[23:42:00] <FromDiscord> <Recruit_main707> https://stackoverflow.com/questions/32487507/nim-code-parser
[23:48:35] <FromDiscord> <haxscramper> This answer is ancient and all API has changed since
[23:48:37] <FromDiscord> <haxscramper> Also `import compiler.modules, compiler.ast, compiler.astalgo, compiler.passes, compiler.llstream`
[23:48:37] <FromDiscord> <haxscramper> First time seeing it like thsi
