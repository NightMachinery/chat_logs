[00:03:25] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: Quit)
[00:03:57] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Ping timeout: 240 seconds)
[00:04:08] *** Quits: ItsColdOutside (~max@gateway/vpn/pia/coldoutside) (Quit: Konversation terminated!)
[00:04:35] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[00:04:59] *** Joins: orthoplex64 (~crm@70.120.0.94)
[00:05:02] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[00:05:15] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[00:05:39] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[00:06:11] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-233.cspire.com) (Read error: Connection reset by peer)
[00:10:33] *** Quits: teut (~teut@2401:4900:1c68:6b85:14d9:4273:1b4:ada6) (Quit: Client closed)
[00:11:25] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Remote host closed the connection)
[00:11:39] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[00:12:01] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[00:12:15] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[00:12:21] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:12:42] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[00:15:11] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[00:16:36] *** Joins: Tha_14 (~Tha_14@user/tha-14/x-4134127)
[00:18:30] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[00:19:36] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[00:20:29] *** Parts: Tha_14 (~Tha_14@user/tha-14/x-4134127) ()
[00:20:40] *** Joins: Nutte35 (~Nutte@27.114.187.37)
[00:21:47] *** Quits: Nutte35 (~Nutte@27.114.187.37) (Read error: Connection reset by peer)
[00:26:00] *** Inline__ is now known as Inline
[00:27:51] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[00:30:00] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:30:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-85b6-f2b4-35d4-321f.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:31:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[00:33:42] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Ping timeout: 256 seconds)
[00:34:04] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9841-fdb7-086b-ec04.res6.spectrum.com) (Remote host closed the connection)
[00:36:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[00:39:44] *** Quits: admal (~admal@gateway/tor-sasl/admal) (Quit: leaving)
[00:42:23] *** Joins: vicfred (~vicfred@user/vicfred)
[00:42:57] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[00:43:02] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 240 seconds)
[00:43:13] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785)
[00:43:31] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[00:43:50] *** Joins: strajder (~strajder@user/strajder)
[00:48:02] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 268 seconds)
[00:49:05] *** Joins: kish` (~aqua@user/aqua)
[00:49:10] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[00:55:34] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:55:34] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:55:34] *** Joins: wroathe (~wroathe@user/wroathe)
[00:55:56] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[00:58:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[00:58:04] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[00:59:34] *** Quits: nuxil (~nuxil@141.195.51.213) (Ping timeout: 250 seconds)
[00:59:42] *** Quits: BobTheTomato (~paul@141.217.247.7) (Quit: Leaving)
[01:02:22] <nitrix> The sanitizers generates additional code at key points in your program to do the checks. The program is supposed to behave the same.
[01:04:04] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[01:06:21] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:06:32] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Ping timeout: 268 seconds)
[01:08:57] *** Quits: alch (~alch@151.38.31.206) (Ping timeout: 240 seconds)
[01:09:25] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[01:11:04] *** Joins: alch (~alch@151.38.22.188)
[01:11:48] *** Joins: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca)
[01:18:14] *** Joins: malina (~malina@user/malina)
[01:19:05] *** Joins: wovixo (~wovixo@128.104.205.49)
[01:20:49] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[01:22:41] *** leonardus is now known as L30n4rdu5
[01:23:07] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:23:43] *** Joins: acerbic (~acerbic@cs-xdata-50-86-53-51.cspire.com)
[01:25:57] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Remote host closed the connection)
[01:27:37] *** Quits: mahmutov (~mahmutov@5.176.51.184) (Ping timeout: 240 seconds)
[01:27:46] *** Quits: warremkaw (~warremkaw@user/warremkaw) (Remote host closed the connection)
[01:28:12] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[01:31:24] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[01:32:00] *** Joins: Torr (~Torr@user/torr)
[01:32:34] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[01:32:43] *** Joins: pulse_ (~pulse@user/pulse)
[01:34:26] *** Quits: cousteau_ (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[01:36:02] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:37:11] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:39:43] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:26a9:5d61:afe9:66b1) (Quit: Leaving)
[01:39:45] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:39:49] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[01:39:53] *** Joins: slidercrank (~slidercra@user/slidercrank)
[01:40:04] *** Joins: liba (~liba@user/liba)
[01:40:49] *** Joins: luizfrds (~Luiz@152.250.243.147)
[01:43:39] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:44:17] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Ping timeout: 240 seconds)
[01:46:14] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[01:48:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:48:13] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[01:48:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:50:38] *** Joins: chartreuse (~chartreus@S0106f0f249dfd9c3.cg.shawcable.net)
[01:51:32] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[01:52:25] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[01:52:53] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[01:52:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[01:57:29] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:57:37] *** Quits: Itaru (~Itaru@185.65.135.251) (Ping timeout: 240 seconds)
[01:58:40] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[02:00:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:00:43] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:03:19] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[02:06:38] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[02:06:51] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:d8ed:7339:5274:77f1) (Quit: Leaving)
[02:11:33] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[02:11:37] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:13:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:13:39] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[02:14:07] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[02:14:22] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[02:15:26] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[02:16:06] *** Quits: Akuli (~Akuli@82-203-167-156.bb.dnainternet.fi) (Quit: Akuli)
[02:23:53] *** Joins: fwg (~fwg@user/fwg)
[02:24:03] *** Joins: caveman_ (~caveman@gateway/tor-sasl/caveman)
[02:25:58] *** Quits: Torr (~Torr@user/torr) ()
[02:26:41] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[02:28:15] *** caveman_ is now known as caveman
[02:28:18] <kit> `yes | gcc -x c -`
[02:29:17] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:30:06] *** Quits: mixfix41 (~homefame@user/mixfix41) (Quit: leaving)
[02:30:10] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[02:31:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[02:31:37] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:32:46] *** Quits: pizdets (~pizdets@183.182.114.168) (Ping timeout: 250 seconds)
[02:32:54] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-85b6-f2b4-35d4-321f.res6.spectrum.com)
[02:33:57] *** Joins: pizdets (~pizdets@183.182.114.97)
[02:34:25] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[02:34:27] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-51.cspire.com) (Read error: Connection reset by peer)
[02:34:33] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:34:48] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Client Quit)
[02:34:50] <apotheon> kit: Why?
[02:35:00] <kit> precisely
[02:35:11] <apotheon> 'kay
[02:35:17] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[02:37:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[02:40:28] *** Joins: ferdna (~ferdna@user/ferdna)
[02:43:46] *** Quits: magla (~gelignite@55d4c25e.access.ecotel.net) (Quit: Stay safe!)
[02:44:41] *** Quits: AmR (~AmREiSa@156.199.9.4) (Quit: Konversation terminated!)
[02:47:09] *** Joins: namkeleser (~namkelese@124.188.192.57)
[02:48:56] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[02:49:15] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:49:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[02:50:35] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) ()
[02:51:15] *** Joins: szkl_ (uid110435@id-110435.uxbridge.irccloud.com)
[02:51:25] *** Quits: szkl_ (uid110435@id-110435.uxbridge.irccloud.com) (Client Quit)
[02:51:33] *** Joins: Pentode (~Pentode@mobile-166-170-29-174.mycingular.net)
[02:52:00] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:55:17] *** Joins: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com)
[02:55:53] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[02:56:01] *** Quits: natewrench (~Soce1964@cpe-72-228-153-194.buffalo.res.rr.com) (Max SendQ exceeded)
[02:58:12] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[03:03:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 250 seconds)
[03:10:30] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[03:10:46] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[03:11:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:16:52] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:20:24] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:22:05] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[03:23:01] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Remote host closed the connection)
[03:23:26] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[03:23:45] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[03:25:35] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[03:26:55] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[03:27:12] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:28:02] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[03:28:28] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:28:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:28:58] *** Joins: wroathe (~wroathe@user/wroathe)
[03:29:56] *** Quits: Itaru (~Itaru@185.65.135.251) (Ping timeout: 256 seconds)
[03:30:15] *** Quits: ju (~ju@user/ju) (Quit: ju)
[03:30:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-85b6-f2b4-35d4-321f.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:30:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:31:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[03:32:01] *** Quits: Hashida (~Itaru@185.65.135.251) (Ping timeout: 256 seconds)
[03:33:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[03:34:16] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:35:56] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:36:03] *** Quits: spidermonkey54 (uid527699@id-527699.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[03:36:18] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:36:38] *** Joins: ski (~ski@remote11.chalmers.se)
[03:37:13] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[03:37:50] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Client Quit)
[03:40:23] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:42:37] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:42:39] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:46:24] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 250 seconds)
[03:46:58] *** Quits: freepp (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[03:47:02] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[03:47:36] *** Joins: Itaru (~Itaru@185.65.135.251)
[03:48:08] *** Quits: Hashida (~Itaru@185.65.135.251) (Ping timeout: 250 seconds)
[03:50:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[03:50:45] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[03:52:07] *** Joins: Hashida (~Itaru@185.65.135.251)
[03:53:12] *** Quits: Itaru (~Itaru@185.65.135.251) (Read error: Connection reset by peer)
[03:53:38] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[03:57:02] *** Joins: fwg (~fwg@user/fwg)
[03:57:31] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[03:57:54] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[03:58:19] *** Joins: orthoplex64 (~crm@70.120.0.94)
[03:58:44] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:00:55] *** Joins: kurahaupo (~kurahaupo@115.69.27.211)
[04:03:54] *** Quits: Hashida (~Itaru@185.65.135.251) (Remote host closed the connection)
[04:05:29] *** Quits: kts (~kts@103.73.237.13) (Quit: Konversation terminated!)
[04:06:54] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:08:07] *** Quits: kurahaupo (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[04:08:12] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[04:08:34] *** Quits: cust_ (amaama@blackbox.amaama.org) (Remote host closed the connection)
[04:08:48] *** Quits: plantman2 (~plantman@2601:405:4680:1b0::4) (Remote host closed the connection)
[04:11:05] *** Joins: mixfix41 (~homefame@user/mixfix41)
[04:11:08] *** Quits: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net) (Remote host closed the connection)
[04:11:40] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:59] *** Joins: jfsimon1981 (~jfsimon19@218.96.128.77.rev.sfr.net)
[04:12:26] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[04:12:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:12:56] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[04:14:02] *** Joins: Satin (uid193953@user/Seten)
[04:14:49] *** Joins: vysn (~vysn@user/vysn)
[04:15:26] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[04:17:17] *** Joins: Wulf (~Wulf@user/wulf)
[04:20:06] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:20:44] *** Joins: kurahaupo (~kurahaupo@pa49-197-63-241.pa.qld.optusnet.com.au)
[04:22:07] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[04:22:41] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:24:43] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:26:51] *** Joins: System_Error (~SystemErr@user/systemerror)
[04:27:24] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[04:27:30] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[04:27:57] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[04:29:25] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:29:25] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:29:25] *** Joins: wroathe (~wroathe@user/wroathe)
[04:30:04] *** Joins: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785)
[04:32:23] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[04:33:28] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[04:35:06] *** Quits: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch) (Ping timeout: 256 seconds)
[04:37:34] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[04:37:48] *** Joins: moog_ (~moog@107.126.53.173)
[04:39:02] *** Joins: PortableDave (~portabled@203.87.67.190)
[04:40:31] *** Quits: moog (~moog@107.112.217.106) (Ping timeout: 268 seconds)
[04:51:15] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[04:54:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:55:28] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[04:55:30] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[04:55:45] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[04:57:34] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[04:59:08] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[04:59:15] *** Quits: malloy (~jimery@113.116.52.22) (Ping timeout: 250 seconds)
[05:00:48] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[05:01:04] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:01:31] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[05:01:32] *** Joins: malloy (~jimery@113.116.52.22)
[05:02:17] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[05:05:42] *** Quits: nyah (~nyah@94.6.71.219) (Quit: leaving)
[05:07:00] *** Joins: Torr (~Torr@user/torr)
[05:07:37] *** Quits: chartreuse (~chartreus@S0106f0f249dfd9c3.cg.shawcable.net) (Ping timeout: 240 seconds)
[05:08:22] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[05:08:33] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:09:17] *** Quits: alch (~alch@151.38.22.188) (Ping timeout: 240 seconds)
[05:09:47] *** Joins: moog (~moog@107.77.244.90)
[05:11:27] *** Joins: alch (~alch@151.36.51.133)
[05:11:57] *** Quits: moog_ (~moog@107.126.53.173) (Ping timeout: 240 seconds)
[05:12:08] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[05:14:25] *** Joins: ka80 (~ka80@111.60.138.34.bc.googleusercontent.com)
[05:17:53] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:c0b2:a7ad:8aa7:4387)
[05:18:10] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[05:25:40] *** Joins: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com)
[05:26:03] <ian|> does C per the standard round towards 0 on float/double -> int type conversions?
[05:27:12] <floatcomplex> if only there was a single simple answer to that
[05:28:17] *** Quits: moog (~moog@107.77.244.90) (Ping timeout: 240 seconds)
[05:29:29] *** Joins: fwg (~fwg@user/fwg)
[05:31:23] <mcf> ,c11 6.3.1.4p1
[05:31:26] <candide> http://www.iso-9899.info/n1570.html#6.3.1.4p1 [Real floating and integer] When a finite value of real floating type is converted to an integer type other than _Bool, the fractional part is discarded (i.e., the value is truncated toward zero). If the value of the integral part cannot be represented by the integer type, the behavior is undefined.61) FOOTNOTE.61 The remaindering operation performed when a va... <truncated; https://0x0.st/ooKI.txt>
[05:31:52] *** Joins: kurahaupo_ (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au)
[05:34:18] *** Quits: kurahaupo (~kurahaupo@pa49-197-63-241.pa.qld.optusnet.com.au) (Ping timeout: 250 seconds)
[05:47:58] *** Quits: rgrinberg (~textual@2806:101e:7:2b:e4cc:85d6:c1e8:8785) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:49:57] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 240 seconds)
[05:50:53] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[05:51:02] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[05:51:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[05:57:07] <floatcomplex> i wasn't actually being facetious, i was thinking about rounding modes
[06:01:25] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:02:45] *** Joins: nitrix (~nitrix@user/nitrix)
[06:06:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[06:06:26] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:c0b2:a7ad:8aa7:4387) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:08:25] *** Quits: cyphics (~cyphix@user/cyphics) (Ping timeout: 256 seconds)
[06:09:07] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com)
[06:09:49] *** Joins: nitrix (~nitrix@user/nitrix)
[06:11:23] *** Joins: cyphics (~cyphix@user/cyphics)
[06:13:00] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[06:13:01] *** Quits: kit-ten (~u0_a391@2600:380:a423:cdf9:7700:5d00:9296:b2ac) (Ping timeout: 268 seconds)
[06:13:31] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[06:18:46] *** Quits: ornxka (~ornxka@user/ornxka) (Quit: WeeChat 3.3)
[06:21:18] *** Joins: frost (~frost@user/frost)
[06:21:38] *** Quits: kurahaupo_ (~kurahaupo@pa49-182-49-2.pa.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[06:21:44] *** Joins: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769)
[06:22:15] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:22:36] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:23:34] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[06:24:31] *** Joins: gco (~gco@2601:647:4c80:2424:48f0:57ae:323:8448)
[06:25:10] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[06:30:03] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[06:31:05] *** Quits: namkeleser (~namkelese@124.188.192.57) (Ping timeout: 256 seconds)
[06:33:56] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[06:34:36] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 268 seconds)
[06:37:47] *** Joins: nitrix (~nitrix@user/nitrix)
[06:41:20] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[06:41:53] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[06:42:09] *** Joins: nitrix (~nitrix@user/nitrix)
[06:43:00] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[06:43:50] *** Joins: nitrix (~nitrix@user/nitrix)
[06:45:20] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[06:45:39] *** Joins: nitrix (~nitrix@user/nitrix)
[06:48:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[06:52:30] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:53:40] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[06:54:35] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:55:13] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Quit: leaving)
[06:56:22] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[06:56:40] *** Quits: supajerm (~supajerm@gateway/vpn/pia/supajerm) (Remote host closed the connection)
[06:56:48] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[06:56:49] *** Joins: Betal (~Betal@user/betal)
[06:59:02] *** Quits: orthoplex64 (~crm@70.120.0.94) (Remote host closed the connection)
[06:59:36] *** Joins: orthoplex64 (~crm@70.120.0.94)
[07:00:40] *** Joins: ornxka (~ornxka@user/ornxka)
[07:02:07] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[07:02:24] *** Joins: otty (~otty@49.15.84.56)
[07:02:58] *** Quits: raym (~raym@user/raym) (Ping timeout: 268 seconds)
[07:03:03] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[07:03:19] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[07:09:25] *** Joins: raym (~raym@user/raym)
[07:09:51] *** Joins: skapata (~Skapata@user/skapata)
[07:14:41] *** Quits: Alhazred (~Alhazred@86.106.74.40) (Quit: leaving)
[07:16:03] *** Quits: z14 (~alzee@user/alzee) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[07:18:07] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[07:21:51] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[07:22:05] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[07:22:07] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[07:22:19] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[07:25:40] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[07:27:15] *** Joins: raym (~raym@user/raym)
[07:28:02] *** Joins: Guest2527 (~Guest25@103.113.189.245)
[07:28:47] *** Quits: Echoz (~chris@user/echoz) (Quit: WeeChat 3.4)
[07:30:15] *** Quits: raym (~raym@user/raym) (Read error: Connection reset by peer)
[07:30:37] *** Quits: pulse_ (~pulse@user/pulse) (Ping timeout: 240 seconds)
[07:32:51] *** Quits: nortoh (~nortoh@user/nortoh) (Quit: this is not importent)
[07:33:17] *** Joins: z14 (~alzee@user/alzee)
[07:33:31] *** Joins: nortoh (~nortoh@bishop.xerrero.com)
[07:33:31] *** Quits: nortoh (~nortoh@bishop.xerrero.com) (Changing host)
[07:33:31] *** Joins: nortoh (~nortoh@user/nortoh)
[07:34:20] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 250 seconds)
[07:34:45] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:27] *** Parts: rsjw (~quassel@user/rsjw) ()
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:39:38] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:42:01] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[07:42:08] *** Quits: gco (~gco@2601:647:4c80:2424:48f0:57ae:323:8448) (Quit: ZZZzzz…)
[07:42:24] *** Joins: Echoz (~chris@user/echoz)
[07:44:00] *** Joins: ironman_ (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[07:44:55] *** ironman_ is now known as ironman
[07:47:14] *** Joins: killadi (~u0_a161@49.15.84.56)
[07:50:21] *** Quits: killadi (~u0_a161@49.15.84.56) (Client Quit)
[07:51:00] *** Joins: killadi (~u0_a161@49.15.84.56)
[07:51:06] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[07:53:37] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[07:57:18] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[08:00:46] *** Joins: otty1 (~otty@49.15.84.56)
[08:01:33] *** Quits: nicode (~nic@2607:f2c0:9479:8500:ad40:7e49:f3e:3cbe) (Ping timeout: 268 seconds)
[08:04:14] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:06:35] *** Joins: mahmutov (~mahmutov@5.176.32.207)
[08:07:31] *** Quits: laslmtdwbcs^ (~laslmtdwb@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[08:10:25] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:11:40] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[08:13:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[08:15:30] *** Quits: killadi (~u0_a161@49.15.84.56) (Ping timeout: 250 seconds)
[08:15:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Ping timeout: 268 seconds)
[08:16:22] *** Quits: mahmutov (~mahmutov@5.176.32.207) (Ping timeout: 250 seconds)
[08:17:53] *** Joins: soapsudsxx (~soapsudsx@141.193.188.140)
[08:18:14] *** Joins: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net)
[08:18:28] *** Quits: ian| (~kvirc@cpe-104-228-101-152.stny.res.rr.com) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[08:20:18] *** Joins: nitrix (~nitrix@user/nitrix)
[08:22:10] *** Joins: killadi (~u0_a161@49.15.84.56)
[08:26:42] *** Joins: almaembe` (~user@1F2EAE36.dsl.pool.telekom.hu)
[08:28:30] *** Quits: almaember (~user@1F2EA950.dsl.pool.telekom.hu) (Ping timeout: 250 seconds)
[08:30:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[08:34:44] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[08:34:56] *** Joins: teut (~teut@2401:4900:1c68:6b85:14d9:4273:1b4:ada6)
[08:35:00] *** Joins: frost (~frost@user/frost)
[08:36:53] *** Quits: |darc|- (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (Ping timeout: 256 seconds)
[08:37:04] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[08:37:53] *** Quits: defjam (~eb0t@90.203.120.248) (Read error: Connection reset by peer)
[08:38:17] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:39:52] *** Quits: killadi (~u0_a161@49.15.84.56) (Remote host closed the connection)
[08:40:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[08:40:35] *** Quits: tusko (~yeurt@copyfree/advocate/tusko) (Remote host closed the connection)
[08:40:56] *** Joins: tusko (~yeurt@copyfree/advocate/tusko)
[08:41:01] *** Quits: _nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 268 seconds)
[08:41:59] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[08:42:05] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[08:43:00] *** Joins: killadiotty (~otty@27.97.181.107)
[08:43:06] *** Joins: otty2 (~otty@27.97.181.107)
[08:43:42] *** Joins: defjam (~eb0t@90.209.247.249)
[08:45:30] *** Joins: skrull[m] (~skrullmat@2001:470:69fc:105::1:7052)
[08:45:57] *** Quits: otty (~otty@49.15.84.56) (Ping timeout: 256 seconds)
[08:46:08] *** Quits: otty1 (~otty@49.15.84.56) (Ping timeout: 256 seconds)
[08:46:28] *** Joins: raym (~raym@user/raym)
[08:47:07] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[08:47:13] *** Joins: fe23 (~fe23@2409:8a34:461:9470:5ca4:dee3:64a2:b4c1)
[08:52:11] *** Quits: Guest2527 (~Guest25@103.113.189.245) (Ping timeout: 256 seconds)
[08:53:35] *** Joins: otty (~u0_a161@27.97.181.107)
[08:54:16] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:56:08] *** Parts: skrull[m] (~skrullmat@2001:470:69fc:105::1:7052) ()
[08:56:41] *** Joins: Guest2523 (~Guest25@103.113.189.240)
[09:00:02] *** Quits: teut (~teut@2401:4900:1c68:6b85:14d9:4273:1b4:ada6) (Quit: Client closed)
[09:01:30] *** Quits: Guest2523 (~Guest25@103.113.189.240) (Client Quit)
[09:02:54] *** Quits: killadiotty (~otty@27.97.181.107) (Read error: Connection reset by peer)
[09:03:19] *** Joins: killadiotty (~otty@27.97.174.61)
[09:04:04] *** Joins: otty3 (~otty@27.97.174.61)
[09:04:22] *** Joins: killadi (~u0_a161@27.97.174.61)
[09:06:37] *** Joins: boB_K7IQ (~boB_K7IQ@37.19.211.133)
[09:06:57] *** Quits: otty (~u0_a161@27.97.181.107) (Ping timeout: 240 seconds)
[09:06:57] *** Quits: otty2 (~otty@27.97.181.107) (Ping timeout: 240 seconds)
[09:10:17] *** Quits: killadi (~u0_a161@27.97.174.61) (Ping timeout: 240 seconds)
[09:10:19] *** Quits: alch (~alch@151.36.51.133) (Ping timeout: 256 seconds)
[09:10:44] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:11:04] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[09:11:27] *** Quits: otty3 (~otty@27.97.174.61) (Ping timeout: 256 seconds)
[09:11:48] *** Joins: alch (~alch@151.36.80.222)
[09:17:24] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.5)
[09:17:24] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[09:20:27] *** Joins: nitrix (~nitrix@user/nitrix)
[09:21:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:24:21] *** Quits: nitrix (~nitrix@user/nitrix) (Client Quit)
[09:25:05] *** Joins: _nuxil_ (~nuxil@141.195.51.213)
[09:27:47] *** Joins: cutetotoro (~sgr@42.120.75.69)
[09:27:56] *** Parts: cutetotoro (~sgr@42.120.75.69) ()
[09:28:17] *** Quits: nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 240 seconds)
[09:30:19] *** Joins: nitrix (~nitrix@user/nitrix)
[09:31:29] *** Joins: stblaha (~stblaha@user/stblaha)
[09:33:18] *** Joins: PortableDave (~portabled@203.87.67.190)
[09:34:02] *** Quits: m4v (~znc@ubuntu/member/m4v) (Ping timeout: 240 seconds)
[09:34:07] *** Joins: frost (~frost@user/frost)
[09:34:14] *** Joins: m4v (~znc@ubuntu/member/m4v)
[09:34:14] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[09:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[09:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[09:34:53] *** Joins: skapata (~Skapata@user/skapata)
[09:35:34] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Remote host closed the connection)
[09:36:17] *** Quits: diiirt (~diiirt@user/diiirt) (Remote host closed the connection)
[09:36:34] *** Joins: diiirt (~diiirt@user/diiirt)
[09:37:01] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[09:37:09] *** Joins: nuxil_ (~nuxil@141.195.51.213)
[09:37:31] *** Quits: PortableDave (~portabled@203.87.67.190) (Ping timeout: 256 seconds)
[09:40:12] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[09:40:32] *** Quits: _nuxil_ (~nuxil@141.195.51.213) (Ping timeout: 256 seconds)
[09:41:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:42:56] *** Parts: nuxil_ (~nuxil@141.195.51.213) (Leaving)
[09:45:51] <jgart> why not (!) in this implementation of fizzbuzz? https://bpa.st/HJVA
[09:46:09] <jgart> The python version doesn't require not or ! in the if tests
[09:46:09] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[09:46:10] *** Joins: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374)
[09:46:21] <jgart> just trying to understand the logic there
[09:46:26] *** Quits: soapsudsxx (~soapsudsx@141.193.188.140) (Remote host closed the connection)
[09:46:27] <jgart> any help much appreciated
[09:47:37] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[09:48:17] <ChoHag_> % will result in a number between 0 and 14; !(0) is true, !(everything-else) is not so that branch is taken only when i is divisible by 15 with no remainder.
[09:48:33] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Read error: Connection reset by peer)
[09:50:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:50:30] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[09:51:05] <jgart> ahhhhhhhhhhhhhhh ok cool
[09:51:08] <jgart> ChoHag_, THNX
[09:55:15] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[09:57:11] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[09:57:27] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[09:57:56] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:57:56] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:57:56] *** Joins: wroathe (~wroathe@user/wroathe)
[09:58:03] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9)
[09:58:22] *** Joins: koo5_ (~quassel@51.140.155.227)
[09:58:36] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.5) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[09:58:54] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[10:00:13] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9) (Client Quit)
[10:00:40] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9)
[10:01:00] *** Joins: kish` (~aqua@user/aqua)
[10:01:49] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9) (Client Quit)
[10:01:51] *** Joins: aerysh_ (~aerysh@94.198.43.101)
[10:02:18] *** Joins: j-james (~apropos@dhcp-206-87-154-75.ubcsecure.wireless.ubc.ca)
[10:03:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[10:04:21] *** Joins: killadi (~u0_a161@42.109.144.5)
[10:05:39] *** Joins: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9)
[10:11:34] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[10:11:49] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[10:13:13] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[10:15:12] *** Quits: xiongxin (~Thunderbi@2409:8954:2ec4:47b:dd1a:44ea:1095:9ec9) (Quit: xiongxin)
[10:17:31] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:18:34] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[10:20:20] *** Joins: malina (~malina@user/malina)
[10:20:46] *** Quits: killadi (~u0_a161@42.109.144.5) (Ping timeout: 256 seconds)
[10:20:48] *** Quits: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:23:40] *** Quits: killadiotty (~otty@27.97.174.61) (Read error: Connection reset by peer)
[10:24:53] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[10:25:04] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:25:22] *** Joins: otty3 (~otty@27.97.174.61)
[10:25:31] *** Joins: killadiotty (~otty@27.97.174.61)
[10:26:23] *** Joins: JarbonFeh (~JarbonFeh@41.225.198.131)
[10:26:26] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[10:29:24] *** Joins: nitrix (~nitrix@user/nitrix)
[10:30:24] *** Quits: otty3 (~otty@27.97.174.61) (Ping timeout: 256 seconds)
[10:32:32] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[10:32:51] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[10:40:44] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[10:42:33] *** Joins: Akiva (~Akiva@user/Akiva)
[10:44:04] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: ZNC 1.8.2 - https://znc.in)
[10:45:04] *** Quits: j-james (~apropos@dhcp-206-87-154-75.ubcsecure.wireless.ubc.ca) (Quit: leaving)
[10:58:35] <sham1> That code is somewhat obfuscated
[10:59:02] <sham1> I'd write that as ((i % 15) == 0)
[10:59:08] <sham1> It's clearer that way
[11:01:46] *** Joins: puke (~puke@user/puke)
[11:02:47] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[11:05:50] *** Joins: eddybilley (~freddieti@217.119.232.174)
[11:09:01] *** Quits: chomwitt (~chomwitt@2a02:587:dc0b:200:12c3:7bff:fe6d:d374) (Ping timeout: 268 seconds)
[11:10:02] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:10:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:11:46] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[11:14:54] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[11:18:14] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:22:34] *** Joins: zmt00 (~zmt00@user/zmt00)
[11:22:43] *** Joins: moose` (~moose@user/moose)
[11:23:43] *** Quits: moose (~moose@user/moose) (Read error: Connection reset by peer)
[11:24:53] <markand> o/
[11:25:47] <markand> guys I have to work with a device that gives me timestamps in UTC and I need to convert them to localtime
[11:26:05] <markand> but I suspect there are no way to do this directly in the standard library, isn't it?
[11:26:50] <markand> I see some example who set TZ environment variable prior to calling mktime/localtime
[11:26:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:30:29] <jgart> sham1, thnx for sharing
[11:30:50] <jgart> what's a convenient way to look up C standard library docs?
[11:30:54] <jgart> ideally from man pages
[11:31:19] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[11:31:35] <tarzeau> man 3 intro ?
[11:31:41] <jgart> are they just sitting right under my nose already installed on the linux system?
[11:31:56] <jgart> tarzeau, ah sweet!
[11:32:00] <tarzeau> only if you install manpages-dev
[11:32:03] <jgart> that's what I was looking for
[11:32:04] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[11:32:11] <jgart> what other ones might I not know about
[11:32:18] <jgart> or how can I discover more?
[11:32:27] <tarzeau> dpkg -L manpages-dev
[11:32:33] <jgart> hmmm
[11:32:36] <jgart> not on debian
[11:32:38] <tarzeau> or ls /usr/share/man/man3
[11:32:42] <jgart> cool
[11:32:51] <jgart> THNX
[11:33:10] <jgart> all the perl stuff is there too I guess
[11:33:59] <tarzeau> i don't think so, but man man has an overview
[11:34:59] <jgart> oh cool
[11:35:04] <jgart> thnx
[11:37:57] <jgart> is there a way to search by function?
[11:38:01] <jgart> like apropos
[11:38:14] <jgart> for a c function I mean or something from teh standard lib
[11:39:43] <sham1> apropos
[11:40:55] <markand> oh I guess the easiest thing I can do is to compare the device timestamp and my own and adapt the offset with that
[11:43:17] *** Joins: aerysh (~aerysh@94.198.43.53)
[11:44:27] *** Quits: aerysh_ (~aerysh@94.198.43.101) (Ping timeout: 256 seconds)
[11:45:57] *** Quits: JarbonFeh (~JarbonFeh@41.225.198.131) (Ping timeout: 240 seconds)
[11:46:59] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[11:47:19] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[11:47:39] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:20] *** Joins: inlight (~inlight@user/inlight)
[11:48:34] *** Joins: fwg (~fwg@user/fwg)
[11:48:34] *** Joins: mrig (~mrig@user/mrig)
[11:48:46] <sham1> You should probably use some platform specific way of getting the current local timezone and then doing whatever offsets are needed for the UTC timestamp
[11:49:10] <jgart> sham1, ah cool, makes sense, thanks!
[11:49:19] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[11:49:55] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:50:24] *** Joins: freep (~freepppp@62.1.35.210.dsl.dyn.forthnet.gr)
[11:51:36] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[11:53:58] *** Joins: frost (~frost@user/frost)
[11:55:05] *** Quits: killadiotty (~otty@27.97.174.61) (Read error: Connection reset by peer)
[12:00:37] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Ping timeout: 240 seconds)
[12:04:54] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[12:05:30] *** DarkTrick_ is now known as DarkTrick
[12:05:47] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:07:07] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (Ping timeout: 256 seconds)
[12:07:33] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:08:49] *** Quits: iomari891 (~iomari891@105.112.138.38) (Client Quit)
[12:09:08] *** Joins: killadi (~u0_a161@42.107.198.13)
[12:11:37] *** Quits: malina (~malina@user/malina) (Ping timeout: 240 seconds)
[12:14:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:15:08] *** Joins: killadiotty (~otty@27.97.181.63)
[12:19:29] <NRK[m]> jgart: you can also use `man 3p` to look up the POSIX manpages
[12:24:12] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:24:12] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:24:12] *** Joins: wroathe (~wroathe@user/wroathe)
[12:26:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:28:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[12:30:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[12:30:40] *** Joins: inlight (~inlight@157.35.58.189)
[12:30:40] *** Quits: inlight (~inlight@157.35.58.189) (Changing host)
[12:30:40] *** Joins: inlight (~inlight@user/inlight)
[12:31:27] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[12:36:26] *** Joins: mar77i (~martti@46-126-48-136.dynamic.hispeed.ch)
[12:36:37] *** Joins: tejr (~tejr@user/tejr)
[12:37:14] *** Quits: boB_K7IQ (~boB_K7IQ@37.19.211.133) (Ping timeout: 250 seconds)
[12:38:11] *** Quits: noose (~noose@user/noose) (Quit: Bye)
[12:38:33] *** Joins: noose (~noose@user/noose)
[12:38:45] <jgart> THNX
[12:38:51] *** Quits: highrate (~presonic@user/highrate) (Ping timeout: 256 seconds)
[12:39:42] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[12:41:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:44:43] *** Joins: boB_K7IQ (~boB_K7IQ@37.19.211.88)
[12:45:55] <markand> sham1, for now I use strptime+mktime to get the timestamp and comparing to time(NULL) I get the proper offset (-1 hour from the device): http://ix.io/3MSA
[12:48:18] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[12:48:30] <swinnenb> jgart: https://en.cppreference.com/w/c is what i usually use for reference.
[12:48:31] <candide> Title of swinnenb's link: C reference - cppreference.com
[12:49:11] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:49:57] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:52:33] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:52:57] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (Ping timeout: 240 seconds)
[12:53:28] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:54:11] *** Quits: aerysh (~aerysh@94.198.43.53) (Quit: Konversation terminated!)
[12:54:25] *** Joins: aerysh (~aerysh@94.198.43.53)
[12:54:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:54:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:54:59] *** Joins: wroathe (~wroathe@user/wroathe)
[12:56:23] *** Joins: teepee_ (~teepee@openscad/teepee)
[12:56:36] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[12:56:37] *** teepee_ is now known as teepee
[12:57:44] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[12:57:45] *** Joins: seninha (~seninha@user/seninha)
[12:58:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:58:55] <sham1> markand: nice
[12:59:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:00:01] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[13:00:36] *** Joins: Enitin (~Enitin@82.102.22.85)
[13:00:43] *** Quits: rkta (~rkta@2001:4ba0:cafe:eaf::1) (Quit: nyaa~)
[13:01:37] *** Quits: killadi (~u0_a161@42.107.198.13) (Ping timeout: 240 seconds)
[13:02:03] *** Joins: gjvc (~gjvc@user/gjvc)
[13:03:01] *** Quits: killadiotty (~otty@27.97.181.63) (Read error: Connection reset by peer)
[13:03:19] *** Joins: Klinda (~superleag@user/klinda)
[13:03:45] *** Joins: killadiotty (~otty@49.15.89.44)
[13:03:58] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Ping timeout: 256 seconds)
[13:04:10] *** Joins: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net)
[13:04:55] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[13:04:57] *** Joins: stonkey (~stonkey@user/stonkey)
[13:05:21] *** Joins: gdd (~gdd@129.199.146.230)
[13:06:25] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[13:08:34] *** Joins: rkta_ (~rkta@2001:4ba0:cafe:eaf::1)
[13:09:38] *** Quits: alch (~alch@151.36.80.222) (Ping timeout: 256 seconds)
[13:11:07] *** Joins: alch (~alch@to-18-64-1.service.infuturo.it)
[13:12:29] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:07] *** rkta_ is now known as rkta
[13:15:55] *** killadiotty is now known as otty
[13:18:36] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl)
[13:22:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[13:25:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:25:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:25:47] *** Joins: wroathe (~wroathe@user/wroathe)
[13:25:53] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:25:59] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[13:26:05] *** Quits: you (~ShmoSeph@173-167-220-193-ip-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[13:26:18] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:28:12] *** Quits: alex11 (~alex11@user/alex11) (Read error: Connection reset by peer)
[13:29:46] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:30:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[13:30:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:32:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:32:42] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (Ping timeout: 250 seconds)
[13:41:44] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[13:48:02] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 240 seconds)
[13:51:23] *** Quits: nich04 (~nicholaus@2607:fb90:e54c:9133:f8e0:5d8a:0:7ca) (Remote host closed the connection)
[13:51:28] *** Joins: malina (~malina@user/malina)
[13:51:30] *** Quits: otty (~otty@49.15.89.44) (Quit: WeeChat 3.0.1)
[13:51:43] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:54:14] *** Joins: alex11 (~alex11@user/alex11)
[13:54:52] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[13:56:33] *** Joins: wroathe (~wroathe@user/wroathe)
[13:59:08] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 250 seconds)
[14:01:08] *** Joins: liba (~liba@user/liba)
[14:01:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[14:03:13] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:03:42] *** Quits: aerysh (~aerysh@94.198.43.53) (Quit: Konversation terminated!)
[14:03:48] *** Joins: jhms (~i.am@user/marlboro)
[14:04:38] *** Joins: Darkcoal (~user@130.164.146.159)
[14:07:18] *** asmwfi[m] is now known as segfault[m]
[14:08:03] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[14:12:12] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[14:13:10] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:13:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:14:02] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[14:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:16:08] *** Lord_of_Life_ is now known as Lord_of_Life
[14:19:08] *** Quits: inlight (~inlight@user/inlight) (Read error: Connection reset by peer)
[14:21:27] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[14:24:26] *** Joins: frost (~frost@user/frost)
[14:25:34] *** Quits: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr) (Ping timeout: 256 seconds)
[14:26:13] *** Joins: kts (~kts@103.73.237.138)
[14:26:41] *** Quits: kts (~kts@103.73.237.138) (Client Quit)
[14:27:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:27:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:27:20] *** Joins: wroathe (~wroathe@user/wroathe)
[14:28:45] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[14:28:50] *** Joins: kts (~kts@103.73.237.138)
[14:29:15] <chiselfuse> void* func(void* i_ptr){ int i=*i_ptr;}    // error: void value not ignored as it ought to be
[14:29:24] <chiselfuse> what is wrong with it
[14:30:13] *** Quits: csrf1 (~csrf@ip72-199-118-215.sd.sd.cox.net) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:23] <chiselfuse> i tried casting it to int* too
[14:30:42] <Svitkona> is that the entire function?
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:31:05] <chiselfuse> Svitkona: no
[14:31:05] <Svitkona> from the error it sounds like you have void* func(void i_ptr) { ... }
[14:31:43] <Svitkona> that doesn't compiile actually
[14:31:57] <Svitkona> maybe show us the full code
[14:32:04] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Ping timeout: 250 seconds)
[14:32:04] <dave0> you can't dereference void*
[14:32:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:33:14] <chiselfuse> dave0: then how do i access the data i'm passing
[14:33:27] <sham1> By not passing a pointer to void
[14:33:34] <sham1> Or alternatively, by casting the pointer
[14:33:37] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[14:33:42] *** Quits: kts (~kts@103.73.237.138) (Client Quit)
[14:33:51] <dave0> chiselfuse: if you wrote func(), change void* to the real type
[14:34:04] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[14:34:25] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:38] <dave0> chiselfuse: if you cant change the parameter from void*, make a variable with the real type, and assign to the variable
[14:35:06] <chiselfuse> i'm using pthreads, that's the way i can pass it an arg
[14:35:26] <sham1> int *foo = i_ptr;
[14:35:39] <sham1> Or what have you
[14:35:42] *** Joins: raym (~raym@user/raym)
[14:35:49] <dave0> chiselfuse: use a variable in your thread_func
[14:36:36] <|smlckz|> is memset with non-zero value to set defined behaviour for non-character pointer?
[14:36:36] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:e573:278:b658:256a)
[14:37:32] *** Joins: strajder (~strajder@user/strajder)
[14:37:39] <chiselfuse> why can i not dereference  avoid*?
[14:38:10] <sham1> void isn't a valid object tupe
[14:38:13] <sham1> Type*
[14:38:36] <Svitkona> what would it result in
[14:39:09] <dave0> ,cc #include <pthread.h> void *thread_func(void *a) { int *b = a; printf("%d ", *b); return 0; } pthread_t id; int c = 69; pthread_create(&id, 0, thread_func, &c); pthread_join(id, 0);
[14:39:29] <candide> dave0: 69 [New Thread 0x7ffff6e51640 (LWP 54667)] [Thread 0x7ffff6e51640 (LWP 54667) exited] Thread 1 "prog" hit Breakpoint 3, main (argc=1, argv=0x7fffffffe3d8) at  19       return 0;
[14:40:01] <dave0> that's just passing an int (c) but i usually pass a pointer to a struct... pointer to int is still valid
[14:40:06] <chiselfuse> yes yes, i solved it dw i was just wondering about casting void*
[14:40:18] <chiselfuse> s/casting/drefercngin
[14:40:31] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:295b:27c3:87b1:2b8f)
[14:41:19] <dave0> it's just the rules.. perhaps void is an incomplete type? i dunno... but c says don't dereference void* so you cant
[14:41:35] <dave0> always assign void* to the correct type
[14:42:07] <dave0> and dereference that
[14:42:19] <fizzie> It's an incomplete type, yes. And strictly speaking, it's not the dereferencing that's the problem, it just produces a `void`-typed (non-)value. The problem is in trying to use that to initialize an `int`. Hence "void value not ignored as it ought to be".
[14:42:55] <fizzie> (C11 6.3.2.2p1: "The (nonexistent) value of a /void expression/ (an expression that has type `void`) shall not be used in any way, --")
[14:43:57] <clarity> Does it count as usage to return such a thing?
[14:44:36] <clarity> Hmph
[14:44:45] <clarity> >  A return statement with an expression shall not appear in a function whose return type is void
[14:44:46] <fizzie> You can't use `return <expr>` in a function with a void return type, so I think that's N/A.
[14:44:49] <clarity> disappointing constraint
[14:45:26] <fizzie> ,cc int i = 123; void *p = &i; *p; // there's a warning for this, but I think it doesn't violate a constraint, it's just pointless
[14:45:30] <candide> fizzie: [warning: dereferencing 'void *' pointer] no output: p = 0x7fffffffe294; i = 123
[14:46:06] <chiselfuse> void* func(void* i_ptr){ int *temp=i_ptr; i=&temp_i;}    // warning: cast from pointer to integer of different size
[14:46:17] <chiselfuse> why
[14:46:39] <chiselfuse> sorry wrong error
[14:46:41] <chiselfuse> err
[14:46:43] <dave0> ,cc void foo(void) { printf("hi "); } void bar(void) { return foo(); } bar();
[14:46:46] <candide> dave0: [In function 'bar':  warning: ISO C forbids 'return' with expression, in function returning void [-Wpedantic]  note: declared here] hi
[14:46:49] <sham1> void foo(void *bar) { return *bar; } int x = 1; foo(&X);
[14:46:52] <chiselfuse> warning: initialization of ‘int’ from ‘int **’ makes integer from pointer without a cast
[14:46:55] <sham1> void foo(void *bar) { return *bar; } int x = 1; foo(&x);
[14:47:00] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Remote host closed the connection)
[14:47:25] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[14:47:33] <sham1> chiselfuse: *temp_i
[14:47:37] <fizzie> ,cc puts("hah"); // oh, and also; don't put semicolons in single-line comments for candide, it doesn't like those
[14:47:39] <candide> fizzie: warning: character constant too long for its type  error: 'don' undeclared
[14:47:49] <sham1> ,cc void foo(void *bar) { return *bar; } int x = 1; foo(&x);
[14:47:52] <candide> sham1: [In function 'foo':  warning: dereferencing 'void *' pointer  warning: ISO C forbids 'return' with expression, in function returning void [-Wpedantic]  note: declared here] no output: x = 1
[14:48:04] <sham1> This is why you don't parse C with regexes
[14:48:43] <chiselfuse> sham1: what's wrong with *temp_i
[14:49:02] <sham1> chiselfuse: that's what you have to do
[14:49:04] <chiselfuse> i don't understand how any of this is related
[14:49:10] <chiselfuse> i did that
[14:49:10] <sham1> You had &temp_i
[14:49:34] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[14:49:38] <chiselfuse> oh, i actually copied it wrong, one sec
[14:49:39] <sham1> [13:15]  chiselfuse: void* func(void* i_ptr){ int *temp=i_ptr; i=&temp_i;}    // warning: cast from pointer to integer of different size
[14:49:39] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:50:21] <chiselfuse> void* func(void* i_ptr){ int *temp_i=i_ptr; int i=&temp_i;}     /warning: initialization of ‘int’ from ‘int **’ makes integer from pointer without a cast
[14:50:25] <chiselfuse> this ^
[14:50:31] <fizzie> Yeah, `&temp_i`.
[14:50:46] <chiselfuse> what's wrong with it
[14:50:54] <fizzie> `temp_i` is an `int *` (a pointer to an int), so `&temp_i`, its address, is an `int **` (a pointer to a pointer to an int).
[14:51:08] <chiselfuse> oh
[14:51:08] <|smlckz|> [repeat] is memset called with non-zero value undefined behaviour for non-character [say, integer] pointer?
[14:51:20] <sham1> No
[14:51:35] <sham1> Although what you might get out could be a trap representation
[14:51:50] <chiselfuse> i can't believe i confused & with * after all
[14:52:01] <clarity> :)
[14:52:04] <sham1> They look completely different
[14:52:08] <NRK[m]> the value needs to fit into a char though, (i think)
[14:52:13] <sham1> Yeah
[14:52:18] <chiselfuse> clarity: hiya
[14:52:20] <clarity> hay
[14:52:24] <sham1> Casted to unsigned char and then the pointer object is iterated
[14:53:09] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Ping timeout: 256 seconds)
[14:53:21] <|smlckz|> ,cc int i; memset(&i, 10, sizeof int); printf("%x", i);
[14:53:22] <candide> |smlckz|: error: expected expression before 'int'
[14:53:35] <sham1> ,cc _Bool b; memset(&b, 2, 1); printf("%d", b); // the memset isn't UB (IIRC) but it does make it so that b has inside it a trap representation
[14:53:37] <fizzie> `sizeof i` or `sizeof (int)`.
[14:53:38] <candide> sham1:  runtime error: load of value 2, which is not a valid value for type '_Bool' 0
[14:53:41] <NRK[m]> why does it take int as its value then? kinda confusing
[14:54:11] <edk> backward compatibility with a version of C before integers smaller than int could be passed to functions
[14:54:28] <sham1> And this is why you always use sizeof like a function ;)
[14:54:33] <NRK[m]> could or couldn't ?
[14:54:56] <edk> sham1: because you don't know whether its operand is a type or an expression?
[14:55:12] <sham1> Well that too. It mostly makes it look uniform
[14:55:12] <fizzie> NRK[m]: "Before they could", or "when they couldn't", whichever you prefer.
[14:55:14] <NRK[m]> hmm, nvm. i read it wrong.
[14:55:17] *** Joins: M-blaise (~M-blaise@105.112.138.38)
[14:55:18] <edk> if sizeof makes you think about it that's probably a good thing...
[14:55:21] *** Joins: vysn (~vysn@user/vysn)
[14:56:00] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[14:58:03] *** Quits: M-blaise (~M-blaise@105.112.138.38) (Client Quit)
[14:59:37] <dave0> |smlckz|: the standard may say 'a 0 int is all bits zero' ... even if it's technically not standard, too much code depends on memset(,0,) working and i doubt ansi will break it
[15:00:29] <dave0> posix says NULL is all-bits-0, so pointers are okay in that.. the only thing left is floats, which idk
[15:00:50] <|smlckz|> i have my professor trying out memset with 1 on an int array..
[15:01:11] <|smlckz|> ,cc int i; memset(&i, 1, sizeof(int)); printf("%d", i);
[15:01:13] <candide> |smlckz|: 16843009
[15:01:25] <|smlckz|> where does that 9 cone from..
[15:01:50] *** Quits: paulo (paulo@user/paulo/x-9032687) (Ping timeout: 256 seconds)
[15:02:01] <NRK[m]> ,cc int i; memset(&i, 1, sizeof(int)); printf("%b", i);
[15:02:03] <candide> NRK[m]: [note: %b is a c﻿andide extension] 1000000010000000100000001
[15:02:21] <dave0> something*1+65536*1+256*1+1
[15:02:38] <fizzie> The standard does say all-bits-zero is *an* integer zero, it just isn't necessarily the canonical representation of zero.
[15:03:13] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[15:03:22] <dave0> |smlckz|: in practice it will work, in theory no
[15:03:38] <fizzie> 16777216 is pretty easy to remember.
[15:03:59] <dave0> yeah for a crazy person
[15:04:09] <fizzie> I've forgotten other powers of two past 65536, except for that one.
[15:04:09] <dave0> :-)
[15:04:18] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:04:18] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:04:18] *** Joins: wroathe (~wroathe@user/wroathe)
[15:04:26] <fizzie> It's got that 777 thing, and the repeated 16.
[15:04:51] *** Joins: Nutte35 (~Nutte@202.153.80.254)
[15:05:12] <NRK[m]> anyone else doesn't like `sizeof (type)` ?
[15:05:39] <clarity> I don't like it much
[15:05:40] <dave0> hardly ever use it
[15:05:45] <NRK[m]> i feel like a lot of people aren't even aware that you can do `sizeof (obj)`
[15:06:00] <gl> what
[15:06:38] <dave0> oh right all the time in malloc
[15:06:47] <dave0> i stick to the mallocidiom
[15:07:20] <GyrosGeier> 12:32 < fizzie> The standard does say all-bits-zero is *an* integer zero, it just isn't necessarily the canonical representation of zero.
[15:07:53] <GyrosGeier> I once patched gcc so conversion between pointer and integer was XOR 0x02000000
[15:08:20] <dave0> how much code broke? :-)
[15:08:47] <GyrosGeier> that's a single instruction on ARM and brings NULL pointers away from the interrupt vectors at 0x0, and into bus error territory
[15:09:05] <GyrosGeier> just a lot of code that used memset to initialize pointers
[15:09:33] <fizzie> Just for reference, C11 6.2.6.2p5: "For any integer type, the object representation where all bits are zero shall be a representation of the value zero in that type."
[15:09:35] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:09:45] <GyrosGeier> because "int *p; memset(&p, 0, sizeof p); if(p) { printf("Boo!\n"); }"
[15:10:49] <sham1> Doing the pointer to integer conversion be the XOR also is a great reason as to why one should do if (p != NULL)
[15:11:34] <NRK[m]> if (!(p == NULL))
[15:12:19] <GyrosGeier> "if(p)" is also a conversion to int
[15:12:37] <sham1> True, so you'd also get the XOR
[15:12:39] <sham1> I suppose
[15:12:41] <fizzie> It's not a conversion to int.
[15:12:47] <NRK[m]> (p) and (!p) should be pretty safe in POSIX environments though. since i think posix defines nullpointer to be 0
[15:13:11] <sham1> I still don't like doing Booleans from pointers like that. I always compare explicitly to NULL
[15:13:29] <sham1> Well, unless the project style guide says something else but meh
[15:13:33] <fizzie> `if (p)` is perfectly okay for null pointers in standard C.
[15:14:17] *** Joins: kit-ten (~u0_a391@2600:380:a465:72fe:2617:f77b:4aa4:f177)
[15:14:19] <NRK[m]> so do i, but i don't dislike `if (!p)` is either.
[15:14:24] <sham1> And, well, it's also a good reason why one can't simply just memset pointers to zeroes
[15:14:29] <fizzie> An `if` statement tests if the controlling expression "compares unequal to 0", and 0 is a null pointer constant; when a pointer value and a null pointer constant meet across an equality operator, the null pointer constant is converted to the null pointer of the resulting type.
[15:14:42] <dave0> posix has pointers as all-bits-zero now
[15:14:49] <dave0> er
[15:14:52] <dave0> null pointer
[15:15:14] <sham1> That's POSIX though. Although people tend to rely on POSIX assumptions without declaring such. Myself included
[15:15:15] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[15:15:42] <NRK[m]> which reminds me, novns did you file the bug report around -fdelete-null thing?
[15:17:17] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-f44f-d859-cfd9-2a3c.res6.spectrum.com) (Ping timeout: 240 seconds)
[15:18:32] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:26:01] <chiselfuse> do you recommend gdb here? or something else?
[15:26:22] *** Joins: killadi (~u0_a161@2402:8100:3908:f7f8:ac90:f10:bc5c:4a89)
[15:28:15] <sham1> gdb is a good tool. I personally like it more than lldb, although that's because I'm more used to gdb
[15:31:07] *** Quits: LuKaRo (~LuKaRo@p4fc32532.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:32:05] *** Joins: constxd_ (~brad@142.167.170.88)
[15:32:50] *** Joins: AmR (~AmREiSa@156.199.9.4)
[15:33:55] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:38:13] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[15:39:35] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[15:42:19] *** kit-ten is now known as kit-bird
[15:43:01] *** kit-bird is now known as kit-ten
[15:44:56] *** killadi is now known as alove
[15:44:58] *** Joins: LuKaRo_ (~LuKaRo@p4fc3264a.dip0.t-ipconnect.de)
[15:45:12] *** alove is now known as dead
[15:45:19] *** dead is now known as otty
[15:46:08] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:49:31] *** Joins: chomwitt (~chomwitt@athedsl-15695.home.otenet.gr)
[15:49:57] *** Joins: killadi (~u0_a161@49.15.91.139)
[15:51:57] *** Joins: Sos (~Sos@d107-222.icpnet.pl)
[15:53:02] *** Quits: otty (~u0_a161@2402:8100:3908:f7f8:ac90:f10:bc5c:4a89) (Ping timeout: 240 seconds)
[15:54:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:54:47] *** Joins: john99 (~john99@158.246.103.34.bc.googleusercontent.com)
[15:55:40] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[16:01:08] *** Joins: inlight (~inlight@157.35.58.189)
[16:01:08] *** Quits: inlight (~inlight@157.35.58.189) (Changing host)
[16:01:08] *** Joins: inlight (~inlight@user/inlight)
[16:02:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[16:02:27] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[16:06:27] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:09:39] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[16:11:17] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 240 seconds)
[16:11:48] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Ping timeout: 268 seconds)
[16:13:02] *** Joins: kish` (~aqua@user/aqua)
[16:13:22] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[16:13:36] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Quit: Leaving)
[16:13:53] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[16:13:58] *** Joins: kish` (~aqua@user/aqua)
[16:14:30] *** Quits: john99 (~john99@158.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[16:17:42] *** Joins: Enitin (~Enitin@82.102.22.85)
[16:27:36] *** Joins: Burgundy (~NA@86.121.143.206)
[16:29:10] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[16:29:46] <sokan> http://dpaste.com/FMU6FJCN2  <--- this is the file I want to read. At line 518 it has a series of lines that start with ATOM. I want to find a way that when it read 'ATOM' it grabs the whole line, including the word ATOM, and adds it in a new file (or console output). And does that for the whole file. If it doesn't find ATOM then it just ignores the whole line. I'm stuck as to how to do this in C :
[16:29:48] <sokan> S
[16:29:52] <sokan> :/
[16:30:28] <sokan> other than a continues if (ch == 'A') { if (ch == 'T') etc
[16:30:37] <sokan> continuous*
[16:31:55] <fizzie> Haven't you had a couple of answers to this question already? And since it's a fixed-maximum-line-length format, the simple "fgets loop + strncmp" would be entirely appropriate.
[16:31:57] *** Quits: liba (~liba@user/liba) (Ping timeout: 240 seconds)
[16:32:34] *** Joins: otty1 (~u0_a161@157.44.195.38)
[16:32:35] <dave0> you don't even need to write a program for this...   grep '^ATOM' myfile.txt
[16:32:37] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[16:33:01] *** Quits: Elladan (~elladan@user/elladan) (Ping timeout: 240 seconds)
[16:33:31] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[16:33:44] <ChoHag_> char cmd[] = { "/bin/sh", "-c", "awk '$1 == \"ATOM\"'", 0 }; execve("/bin/sh", cmd, NULL);
[16:34:21] <sokan> fizzie: the closest I have is: http://dpaste.com/7DYZPY9PT BUT somehow it doesn't give the output I want. it's ATOM and a lot of empty characters
[16:34:31] <ChoHag_> Why use 1 program when you can use 3?
[16:34:37] <sokan> dave0: well, it's an assignment for C class course :P
[16:35:13] *** Joins: aqua (~aqua@user/aqua)
[16:35:20] *** Joins: Elladan (~elladan@user/elladan)
[16:35:44] <sokan> fizzie: good idea!
[16:35:57] *** Quits: killadi (~u0_a161@49.15.91.139) (Ping timeout: 240 seconds)
[16:37:05] <fizzie> sokan: FWIW, http://dpaste.com/7DYZPY9PT works fine for me for your example input file too.
[16:38:28] *** Joins: acerbic (~acerbic@cs-xdata-50-86-51-253.cspire.com)
[16:38:58] <ChoHag_> Start off with a loop to get and print each character, resetting a flag each time to indicate whether the previous character was '\n'.
[16:39:02] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 250 seconds)
[16:39:10] <ChoHag_> Proceed from there.
[16:39:33] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[16:39:45] <fizzie> As in: https://0x0.st/ooq0.txt -- but the line-by-line loop's certainly simpler at least in appearance than doing it in a way that works for arbitrarily long lines in O(1) space.
[16:40:34] <fizzie> It's literally just `while (fgets(...) != NULL) if (strncmp(...) == 0) fputs(...);`.
[16:40:55] <ChoHag_> It's never just.
[16:41:06] <fizzie> Many things are just.
[16:41:10] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:41:25] <sokan> fizzie: It does work...
[16:41:38] <sokan> I messed up the opening of the file I guess :P
[16:41:57] <sokan> At least I can start from somewhere (again)
[16:42:02] <sokan> thank ChoHag_, fizzie :)
[16:42:09] <sokan> And terribly sorry for the trouble :(\
[16:43:31] *** Quits: otty1 (~u0_a161@157.44.195.38) (Remote host closed the connection)
[16:44:15] <fizzie> All these things in a neighboring channel's fact database are just: https://hack.esolangs.org/tmp/just
[16:44:40] *** Joins: killadi (~u0_a161@157.44.195.38)
[16:44:40] <fizzie> (I've shared the link before, but it is just what it is.)
[16:49:59] *** aqua is now known as kish`
[16:53:09] *** Quits: killadi (~u0_a161@157.44.195.38) (Read error: Connection reset by peer)
[16:53:36] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[16:54:02] *** Quits: gce108 (~gce@user/gce108) (Ping timeout: 256 seconds)
[16:56:06] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[16:57:40] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd)
[16:58:50] <katsuragi> I get implicit declaration of inet_aton even though i've included <arpa/inet.h> and <netinet/in.h>
[16:59:09] *** Joins: killadi (~u0_a161@157.44.195.38)
[17:01:03] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[17:01:36] <novns> NRK[m], not yet, will do soon
[17:01:44] *** Joins: warremkaw (~warremkaw@user/warremkaw)
[17:02:06] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[17:02:13] <novns> was busy with my job
[17:03:25] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:07:44] *** Quits: acerbic (~acerbic@cs-xdata-50-86-51-253.cspire.com) (Remote host closed the connection)
[17:07:46] *** Quits: inlight (~inlight@user/inlight) (Read error: Connection reset by peer)
[17:08:09] *** Joins: inlight (~inlight@157.35.58.189)
[17:08:09] *** Quits: inlight (~inlight@157.35.58.189) (Changing host)
[17:08:09] *** Joins: inlight (~inlight@user/inlight)
[17:08:18] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Quit: jmiehe)
[17:09:23] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[17:09:24] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:e573:278:b658:256a) (Quit: This computer has gone to sleep)
[17:09:48] *** Quits: alch (~alch@to-18-64-1.service.infuturo.it) (Ping timeout: 250 seconds)
[17:10:44] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[17:11:02] <fizzie> "Implicit declaration even though I'm including the header" is generally a lack of the right feature test macros defined.
[17:11:19] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:11:30] *** Joins: alch (~alch@mi-18-29-212.service.infuturo.it)
[17:12:01] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:12:33] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[17:12:37] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[17:12:52] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[17:18:07] *** Joins: inlight (~inlight@157.35.58.189)
[17:18:07] *** Quits: inlight (~inlight@157.35.58.189) (Changing host)
[17:18:07] *** Joins: inlight (~inlight@user/inlight)
[17:19:37] *** Joins: kts (~kts@103.73.237.211)
[17:20:30] *** Joins: pulse_ (~pulse@user/pulse)
[17:21:10] *** pulse_ is now known as pulse
[17:25:17] *** Quits: alex11 (~alex11@user/alex11) (Ping timeout: 240 seconds)
[17:26:33] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[17:28:03] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[17:29:48] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c)
[17:29:48] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:5cef:e512:2284:6d3c) (Changing host)
[17:29:48] *** Joins: skapata (~Skapata@user/skapata)
[17:31:13] *** Joins: alex11 (~alex11@user/alex11)
[17:31:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[17:31:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[17:32:20] *** Joins: inlight (~inlight@157.42.238.172)
[17:32:20] *** Quits: inlight (~inlight@157.42.238.172) (Changing host)
[17:32:20] *** Joins: inlight (~inlight@user/inlight)
[17:34:15] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[17:34:22] <warremkaw> Which of these two methods would be considered the right way of allocating a 2d array?
[17:34:24] <warremkaw> https://0x0.st/oob8.c
[17:36:32] *** Quits: constxd_ (~brad@142.167.170.88) (Ping timeout: 256 seconds)
[17:36:45] *** Quits: alex11 (~alex11@user/alex11) (Quit: Leaving)
[17:37:33] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[17:37:42] <dave0> not the 2nd way
[17:38:02] <clarity> neither
[17:38:04] <dave0> don't trick malloc into allocating arrays of different types at once
[17:40:04] <warremkaw> clarity: what would you suggest?
[17:40:16] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:40:20] <clarity> First define 2d array
[17:40:38] <dave0> warremkaw: https://termbin.com/r48q
[17:41:36] <dave0> warremkaw: it is nearly as efficient as your 2nd example
[17:42:00] <dave0> warremkaw: your 1st example is also fine
[17:42:14] <warremkaw> dave0: why is that a bad idea
[17:42:50] <dave0> warremkaw: it doesn't give the compiler a chance to insert padding
[17:43:02] <clarity> Since 2D arrays don't exist in C, I recommend you either use an n*m one dimensional array, or array[n] of array[m].
[17:43:52] <dave0> warremkaw: or alignment
[17:43:58] <dave0> i don't think arrays can have padding in c
[17:44:56] <dave0> warremkaw: my example has a malloc for each of the different types you need (int* and int)
[17:44:57] <GyrosGeier> each member will be padded to its alignment
[17:45:07] <clarity> Do you really want an array of pointers?
[17:45:12] <clarity> (And don't call that a 2d array pls)
[17:45:36] <warremkaw> but n*m one dimensional would outperform array[n] of array[m] right?
[17:45:45] <clarity> Nope
[17:45:51] *** Joins: odoood (~odoood@2601:c8:c000:c4e0::4)
[17:45:55] <GyrosGeier> so uint32_t __attribute__((align(8))) a[2]; should be 16 bytes
[17:46:02] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[17:46:16] <GyrosGeier> maybe 12
[17:46:24] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:46:27] *** Joins: kish` (~aqua@user/aqua)
[17:47:58] *** Joins: asdafasskadkasda (~asdafassk@151.210.139.245)
[17:49:17] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[17:49:53] <dave0> there is an interesting trick with c99 variable length arrays... you can pass different sized arrays to a function using VLA's
[17:50:37] <dave0> int foo(int w, int h, int array[w][h]) { ... }     int test[5][10]; foo(5, 10, test);
[17:51:05] <dave0> i prefer pointers because C89
[17:52:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:52:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:52:49] *** Joins: wroathe (~wroathe@user/wroathe)
[17:54:20] <fizzie> AFAIK, you can't make GCC do an array where the alignment of the element type exceeds the element size.
[17:54:43] <fizzie> ,cc uint32_t __attribute__((aligned (8))) a[2]; printf("%zu", sizeof a); // aligns the array, not the element type, I think
[17:54:46] <candide> fizzie: 8
[17:54:50] <fizzie> ,cc typedef uint32_t so_aligned __attribute__((aligned (8))); so_aligned a[2]; printf("%zu", sizeof a); // fails with an error
[17:54:52] <candide> fizzie: error: alignment of array elements is greater than element size
[17:57:52] <GyrosGeier> hmm
[17:57:54] <GyrosGeier> interesting
[17:58:19] <GyrosGeier> I wonder why that would be an error
[17:58:50] *** Quits: constxd (~brad@142.167.170.88) (Remote host closed the connection)
[17:59:30] <GyrosGeier> ,cc typedef struct { uint32_t x; } so_aligned __attribute__((aligned (8))); so_aligned a[2]; printf("%zu", sizeof a);
[17:59:32] <candide> GyrosGeier: error: alignment of array elements is greater than element size
[17:59:35] <GyrosGeier> hmm
[17:59:41] *** Joins: dead_bush_sanpai (~dead_bush@123.53.32.203)
[17:59:47] <dave0> it might come up with long double?
[17:59:59] <GyrosGeier> true
[18:00:19] <dave0> not sure
[18:00:31] <GyrosGeier> ,cc long double a[2]; printf("%zu", sizeof a);
[18:00:34] <candide> GyrosGeier: 32
[18:00:42] <fizzie> With C11 _Alignas, you can't even express the notion. Because an alignment-specifier is a top-level declaration specifier (like storage classes and such) rather than a type qualifier, so it affects the object (or member) you're declaring, not the element type of the array. And an alignment specifier "shall not be specified in a declaration of a typedef".
[18:03:03] <warremkaw> This is getting a little over my head but if dave0 is right about the alignment then the example of clarity would be ok too?
[18:03:22] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[18:04:34] <warremkaw> ty clarity dave0!
[18:04:55] <dave0> no worries
[18:05:39] <dave0> it would be like allocating a struct by stringing a bunch of sizeof's together
[18:06:13] <clarity> I don't think I gave a concrete example but for a simple n*m array, it's totally fine to go with something like type *ptr = malloc(n * m);  except that the multiplication may overflow and you might want to look into reallocarray or such
[18:06:18] <dave0> struct { int a; short b; int c; char d; int e; };   this needs lots of padding, so   malloc(sizeof(int)*3+sizeof(short)+sizeof(char))  would not be correct
[18:06:23] *** Quits: killadi (~u0_a161@157.44.195.38) (Ping timeout: 256 seconds)
[18:06:50] *** Joins: alioui (~medeva293@197.2.93.132)
[18:06:51] <warremkaw> clarity: I ment dave0's example :D
[18:07:00] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:07:17] <clarity> A fancy option for allocating array[n] of array[m] would be int (*a)[n][m] = malloc(sizeof *a); but I'm not sure I endorse that
[18:07:18] <fizzie> C11 onwards, you can probably do the single-allocation thing as well, you'd just need to "manually" round up the size reserved for the pointers up to the next multiple of `_Alignof (int)`. (Which would be a no-op on almost any system.)
[18:07:31] *** Quits: Enitin (~Enitin@82.102.22.85) (Ping timeout: 256 seconds)
[18:07:47] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:07:50] <dave0> fizzie: bad
[18:07:56] <warremkaw> dave0: makes sense now
[18:10:33] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[18:12:03] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[18:13:58] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[18:14:19] <clarity> It's kinda disappointing that you can't have VLAs or VM types in structs, unions, compound literals
[18:14:53] <dave0> vla's are the botch
[18:15:24] <clarity> Otherwise you could have your array of pointers + storage as struct { int *ptr; int storage[m]; } (*array)[n] = malloc(sizeof *array);
[18:15:31] <dave0> before them the size of eerything was known at compile time
[18:15:57] <clarity> Except everything that you malloc based on a variable, so no
[18:16:01] *** Joins: masterbuilder (~user@user/masterbuilder)
[18:16:47] <dave0> sizeof cant work on those, you get the sizeo fo the pointer, it's still known at compile time
[18:17:09] <dave0> that hasnt changed
[18:18:21] <clarity> sizeof can work on those
[18:18:27] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[18:18:32] *** Quits: alioui (~medeva293@197.2.93.132) (Ping timeout: 240 seconds)
[18:18:45] *** Joins: stonkey (~stonkey@user/stonkey)
[18:18:52] *** Joins: meator (~meator@user/meator)
[18:19:02] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:9dce:76e7:4731:23dd) (Ping timeout: 240 seconds)
[18:19:05] *** Joins: FreEm1nD (~FreEm1nD@mail.guarapari.store)
[18:22:18] <|smlckz|> ,cc int (*x)[5] = malloc(sizeof(*x)); memset(x, 0xff, sizeof(*x)); for(int i=0;i<5;i++) printf("%x ", *(*x + i)); // very well usable..
[18:22:21] <candide> |smlckz|: ffffffff ffffffff ffffffff ffffffff ffffffff
[18:24:14] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[18:24:25] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[18:24:55] *** Quits: dead_bush_sanpai (~dead_bush@123.53.32.203) (Quit: Konversation terminated!)
[18:25:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a011:180:f68f:b20b)
[18:25:51] <zen_coder> How do I concatenate a "const char*" and a preprocessor string literal together? So that I can return a "const char*"
[18:27:56] *** Joins: zmt00 (~zmt00@user/zmt00)
[18:28:01] <dave0> you can make a copy and return const char*
[18:28:34] <clarity> You concatenate them like any other string
[18:29:44] <dave0> zen_coder: const char *foo(const char *a, const char *b) { char *r = malloc(strlen(a) + strlen(b) + 1); if(r == 0) perror("malloc"); sprintf(r, "%s%s", a, b); return r; }
[18:30:06] <dave0> just pass    #define STR "hello"    foo(var, STR);
[18:30:09] *** Joins: elkalamar (elkalamar@gateway/vpn/airvpn/elkalamar)
[18:32:47] <zen_coder> Is there no C standard function, which does this for me?
[18:33:04] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:33:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:33:46] <clarity> No
[18:33:46] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 256 seconds)
[18:34:22] *** Quits: Nutte35 (~Nutte@202.153.80.254) (Read error: Connection reset by peer)
[18:34:23] *** Joins: frost (~frost@user/frost)
[18:34:44] *** Quits: asdafasskadkasda (~asdafassk@151.210.139.245) (Quit: Client closed)
[18:35:07] <dave0> we have an ASPrintF that simplifies further uses
[18:35:25] <dave0> /msg candide ,asprintf
[18:35:43] <dave0> it's just a wrapper around snprintf that allocates memory
[18:35:47] <zen_coder> what about this solution? https://stackoverflow.com/a/1995057
[18:36:20] <clarity> Don't return pointers to automatic storage
[18:36:29] <clarity> You said you wanted to return something, right?
[18:36:53] <clarity> At least don't return pointers to automatic storage that is local to the function doing the returning
[18:37:41] <dave0> zen_coder: the stackoverflow solution is using a fixed size array, which can be valid
[18:37:59] <dave0> both arrays and malloc have advantages
[18:38:24] <clarity> And this kinda maybe answers why there's no standard function to do just this
[18:39:47] <clarity> zen_coder: One of the important things you need to understand about C is that you're responsible for managing memory
[18:40:02] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:54dd:df69:2b7e:e11c)
[18:40:45] <clarity> zen_coder: You can say you want strings concatenated.. okay, but where do you want them?  Allocated, static, automatic storage?  Who's responsible for allocation, who's responsible for freeing, or where do you want to allocate the static or automatic storage?
[18:41:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:41:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:41:03] *** Joins: wroathe (~wroathe@user/wroathe)
[18:41:05] <clarity> They can't provide a single function to cover every case.  You write code that does what you need.
[18:41:22] *** Quits: dsrt^ (~dsrt@wsip-98-188-242-61.mc.at.cox.net) (Remote host closed the connection)
[18:41:44] <clarity> And strcat is indeed a standard function, which you can use here
[18:41:51] <clarity> Hence 16:58 < clarity> You concatenate them like any other string
[18:42:06] <clarity> But you still need to make up your mind on storage.  dave0's example uses allocated storage.
[18:42:39] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 256 seconds)
[18:44:08] <clarity> And depending on whose responsibility storage is, you might also get to worry about what to do if your storage turns out to be too small for the strings
[18:44:22] <clarity> (Or what to do if allocation fails..)
[18:45:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:46:07] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[18:46:48] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[18:47:22] *** Joins: badsektor (~badsektor@user/badsektor)
[18:49:29] <NRK[m]> zen_coder: what exactly are you doing btw?
[18:50:23] <NRK[m]> because if you can do it without dynamic allocation or passing *alloced pointers around, then you should.
[18:51:00] <clarity> If you can do it without strings, maybe you should
[18:51:34] <floatcomplex> a lot of uses of temporary storage can be factored out using struct iovec
[18:51:42] *** Joins: inlight (~inlight@157.42.238.172)
[18:51:42] *** Quits: inlight (~inlight@157.42.238.172) (Changing host)
[18:51:42] *** Joins: inlight (~inlight@user/inlight)
[18:51:46] *** Joins: Nutte35 (~Nutte@202.153.80.254)
[18:52:25] *** Quits: Nutte35 (~Nutte@202.153.80.254) (Remote host closed the connection)
[18:52:40] *** Joins: Nutte35 (~Nutte@202.153.80.254)
[18:52:57] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:55:17] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[18:55:50] *** Joins: kaichiuchu (~mike@user/kaichiuchu)
[18:56:33] *** Parts: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Leaving)
[18:58:21] <zen_coder> why does this not compile? https://ideone.com/aOAdG8
[18:58:44] <clarity> prog.c:(.text.startup+0x7): undefined reference to `getFullPath'
[18:59:05] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:59:10] <clarity> Hmm
[18:59:46] <clarity> Somehow inline messes it up
[19:00:06] <floatcomplex> don't use inline like that
[19:00:10] <floatcomplex> you want static
[19:00:25] <clarity> Generally speaking, don't use inline *shrug*
[19:00:37] <floatcomplex> ^
[19:01:26] <sham1> I see that no one here recommended `int (*a)[nrows][ncols] = malloc(sizeof(*a));` for doing 2D arrays
[19:01:27] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Quit: can you please adjust your IRC quit message to be less transphobic?)
[19:01:36] <sham1> Looking at scrollback
[19:01:53] <clarity> I did
[19:02:09] <sham1> Oh did you? I suppose I didn't read well enough then
[19:02:46] <sham1> But yeah, VLAs make this kind of stuff easy
[19:02:50] <clarity> 16:37 < clarity> A fancy option for allocating array[n] of array[m] would be int (*a)[n][m] = malloc(sizeof *a);
[19:03:10] <sham1> Alright
[19:03:14] <sham1> Good
[19:03:28] <clarity> woof
[19:03:30] *** int is now known as Ox4
[19:03:56] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[19:05:02] *** Quits: kit-ten (~u0_a391@2600:380:a465:72fe:2617:f77b:4aa4:f177) (Ping timeout: 240 seconds)
[19:05:38] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[19:06:04] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:07:32] *** kit_ten is now known as kit-ten
[19:08:05] <NRK[m]> sham1: pretty nice. i think last time i did dynamic multi-d array i simply allocated another array for the pointers. `struct { int *arr; int **rc; };`
[19:08:08] <floatcomplex> sham1: that's called "variably modified types" and is distinct from VLAs
[19:08:26] <NRK[m]> hmm, wait. that was because i wanted to access the array linearly as well.
[19:09:40] <floatcomplex> i use pretty much every c99 feature except that one. it's not general enough
[19:10:32] <sham1> Hmm. Why is there a distinction between VLAs and variably modified types? Does a VLA have to be under automatic storage duration?
[19:10:59] <floatcomplex> yes
[19:11:09] <sham1> Well okay then. So VMTs
[19:11:13] <floatcomplex> no
[19:11:15] <floatcomplex> yes
[19:11:17] <floatcomplex> sorry
[19:11:22] <NRK[m]> maybe
[19:11:53] <NRK[m]> thanks
[19:12:09] <floatcomplex> yes VLAs are a particular storage duration and VM types are not
[19:12:16] *** Joins: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769)
[19:12:16] <floatcomplex> they're just fancy pointers
[19:12:39] <sham1> I thought they were the same thing. I suppose they only look similar
[19:13:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:13:41] <NRK[m]> ,cc -stc=c89 -Wpedantic int (*a)[10][20] = malloc(sizeof(*a));
[19:13:43] <candide> NRK[m]: gcc: error: unrecognized command-line option '-stc=c89'; did you mean '-std=c89'?
[19:14:47] <NRK[m]> ,cc -std=c89 -Wpedantic int (*a)[10][20] = malloc(sizeof(*a));
[19:14:49] <candide> NRK[m]: no output: a = 0x40b590
[19:16:31] <NRK[m]> ,cc -std=c89 -Wpedantic void fun(int r, int c) { int (*a)[r][c] = malloc(sizeof(*a)); }
[19:16:33] <candide> NRK[m]: [In function 'fun':  warning: ISO C90 forbids variable length array 'a' [-Wvla]  warning: ISO C90 forbids variable length array 'a' [-Wvla]]  Success (no output).
[19:17:42] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Quit: Leaving)
[19:17:58] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:19:54] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[19:20:39] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[19:20:43] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:20:54] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:21:00] *** Joins: kish` (~aqua@user/aqua)
[19:21:05] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Client Quit)
[19:21:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:21:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:21:21] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:21:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:22:48] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Client Quit)
[19:22:53] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 256 seconds)
[19:23:04] *** Quits: cehteh (~ct@git.pipapo.org) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[19:23:21] *** Joins: gdd (~gdd@129.199.146.230)
[19:24:02] <sham1> Hm
[19:24:22] *** Joins: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c)
[19:24:46] *** Parts: warremkaw (~warremkaw@user/warremkaw) (rirc v0.1.6)
[19:24:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:25:03] *** Joins: cehteh (~ct@git.pipapo.org)
[19:25:20] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[19:25:25] <floatcomplex> the warning text is a bit weird. you can get gcc to warn on vlas but not on vm types by doing something like -Wvla-larger-than=0
[19:26:57] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Quit: quit)
[19:29:27] <fizzie> Strictly speaking, VLAs themselves are *also* variably modified types. It doesn't make the warning correct (since it says "variable length array 'a'"), but it does mean it's not a distinct category, it's a superset.
[19:29:30] *** Joins: Enitin (~Enitin@82.102.22.86)
[19:30:05] *** Quits: Beastie (~lcu@user/thebeastie) (Quit: WeeChat 3.3)
[19:31:03] <floatcomplex> i mean one of them is a type and the other is not :)
[19:31:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Ping timeout: 240 seconds)
[19:31:37] <fizzie> C11 6.7.6p3: "If, in the nested sequence of declarators in a full declarator, there is a declarator specifying a variable length array type, the type specified by the full declarator is said to be /variably modified/. Furthermore, any type derived by declarator type derivation from a variably modified type is itself variably modified." Which is trivially true when the full declarator is just one for a
[19:31:39] <fizzie> VLA.
[19:32:37] *** Quits: Nutte35 (~Nutte@202.153.80.254) (Ping timeout: 240 seconds)
[19:32:38] *** Joins: tekniq (~tekniq@82-169-181-124.biz.kpn.net)
[19:32:44] <floatcomplex> clear as mud
[19:33:18] <kit-ten> mud can be clear if you have enough water in it
[19:33:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[19:33:45] <pragma-> at that point it's no longer mud
[19:33:49] <floatcomplex> one of the things is a relatively harmless type, and the other is a harmful place to allocate things of that type
[19:38:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:40:53] *** Quits: eddybilley (~freddieti@217.119.232.174) (Quit: WeeChat 3.4)
[19:43:28] *** Quits: BSaboia (~bsaboia@189.45.78.253) (Quit: This computer has gone to sleep)
[19:43:51] *** Joins: BSaboia (~bsaboia@189.45.78.253)
[19:46:38] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:47:25] <sham1> We aren't doing homeopathy with mud
[19:47:49] <kit-ten> k
[19:49:43] * kit-ten does homeopathy with mud
[19:50:21] *** Joins: diophantoz (~diophanto@user/diophantoz)
[19:50:50] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[19:51:20] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[19:51:27] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[19:51:53] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[19:52:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[19:53:56] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:56:48] *** Joins: karakedi (~eAC53C340@user/karakedi)
[19:58:57] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:54dd:df69:2b7e:e11c) (Ping timeout: 240 seconds)
[20:00:05] *** Joins: badsektor (~badsektor@user/badsektor)
[20:00:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[20:00:53] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:00:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[20:02:55] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:06:15] *** jhms is now known as ko
[20:06:16] *** Quits: stblaha (~stblaha@user/stblaha) (Quit: leaving)
[20:09:42] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[20:09:54] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[20:10:23] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:11:39] *** Joins: cosimone (~user@93-47-229-195.ip115.fastwebnet.it)
[20:14:05] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:17:32] *** Joins: gce108 (~gce@user/gce108)
[20:19:32] *** Quits: rgrinberg (~textual@2806:101e:7:2b:5145:ccdc:bee1:d769) (Ping timeout: 240 seconds)
[20:20:14] *** Joins: Beastie (~lcu@user/thebeastie)
[20:24:02] *** Quits: boB_K7IQ (~boB_K7IQ@37.19.211.88) (Ping timeout: 240 seconds)
[20:25:00] *** Joins: bolovanos_ (~bolovanos@user/bolovanos)
[20:26:28] *** Joins: vicfred (~vicfred@user/vicfred)
[20:29:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Quit: Leaving)
[20:32:11] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:32:58] *** Joins: nyah (~nyah@94.6.71.219)
[20:35:00] *** Joins: meator (~meator@user/meator)
[20:36:37] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[20:36:43] *** Quits: mrec_ (~markus@sundtek.de) (Changing host)
[20:36:43] *** Joins: mrec_ (~markus@user/mrec)
[20:38:57] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[20:40:46] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[20:47:06] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[20:48:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[20:50:30] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[20:50:31] <SamuelMarks> hi
[20:50:33] *** Joins: Enitin (~Enitin@82.102.22.86)
[20:50:43] <kit-ten> hallo
[20:51:20] *** Quits: kts (~kts@103.73.237.211) (Quit: Konversation terminated!)
[20:52:50] *** Quits: slavfox (~slavfox@93.158.232.111) (Quit: ZNC 1.8.2 - https://znc.in)
[20:53:05] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[20:53:10] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[20:53:58] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[20:54:14] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[20:54:30] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[20:58:28] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:8d27:e107:2edb:b4a9)
[20:59:12] <chiselfuse> i am facing the issue described here: https://stackoverflow.com/a/59615786  what could I do to fix this then? make close() in thread A atomic? i don't understand why it tries to close the fd twice, i'm assuming it takes a lot of instructions?
[21:00:25] *** Quits: fe23 (~fe23@2409:8a34:461:9470:5ca4:dee3:64a2:b4c1) (Quit: fe23)
[21:02:45] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Quit: Guest143332)
[21:05:46] <floatcomplex> chiselfuse: we'd have to see your code?
[21:06:23] *** Joins: bbju (~bbju@103.144.149.220)
[21:07:02] *** Joins: kts (~kts@103.73.237.211)
[21:07:05] <floatcomplex> or are you saying you're trying to use libcurl and libcurl has this bug
[21:09:59] *** Quits: alch (~alch@mi-18-29-212.service.infuturo.it) (Ping timeout: 256 seconds)
[21:09:59] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-113.wlan.tudelft.nl) (Ping timeout: 256 seconds)
[21:10:21] <chiselfuse> floatcomplex: no, i have a thread-intensive program where as described in that answer, a call to close() eventually "closes an fd twice" because i guess in the middle of its body another thread sees the fd to be free and uses it before it's actually closed
[21:10:39] *** Joins: badsektor (~badsektor@user/badsektor)
[21:10:44] *** Quits: badsektor (~badsektor@user/badsektor) (Read error: Connection reset by peer)
[21:10:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[21:11:15] <floatcomplex> i am not reading the SO answer the samw way you are
[21:11:49] *** Joins: alch (~alch@to-18-90-201.service.infuturo.it)
[21:12:00] <chiselfuse> where do you think is the difference from my interpretation?
[21:12:02] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:12:16] *** Joins: Akiva (~Akiva@user/Akiva)
[21:12:26] <floatcomplex> the SO answer is saying that the OP's code has a bug in it
[21:12:29] <floatcomplex> not that close() has a bug in it
[21:12:49] *** Quits: bbju (~bbju@103.144.149.220) (Ping timeout: 256 seconds)
[21:14:40] <floatcomplex> so you have a code path in one thread where you are calling close() twice on the same fd
[21:14:42] *** Joins: rgrinberg (~textual@2806:101e:7:2b:35cd:febc:a65a:3a4f)
[21:15:13] <floatcomplex> the presence of another thread turns this from a harmless bug to a more serious bug, but it was already a bug when single threaded
[21:15:17] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 240 seconds)
[21:15:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:15:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:15:21] *** Joins: wroathe (~wroathe@user/wroathe)
[21:16:57] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[21:18:13] *** Joins: Alhazred (~Alhazred@86.106.74.40)
[21:19:32] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[21:20:34] <chiselfuse> floatcomplex: here's the code https://termbin.com/w4dl
[21:21:18] <pinheadmz> when do you have to malloc(sizeof(struct)) ? I have some code here that just declares one and starts assigning property values right away ...?
[21:21:20] <floatcomplex> what is atomic()()close(fd)
[21:21:46] <chiselfuse> oops, just remove that atomic()
[21:21:56] <chiselfuse> i added that a sec ago
[21:22:18] *** Joins: Akuli (~Akuli@213.216.211.215)
[21:22:23] *** Joins: killadi (~u0_a161@157.44.219.185)
[21:23:31] <floatcomplex> chiselfuse: you need to be checking the value returned by close()
[21:26:39] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[21:27:14] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[21:27:42] <chiselfuse> sorry i timed out, did i miss anything?
[21:29:00] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[21:29:02] <chiselfuse> floatcomplex: i just checked, it does exit non-zero, i'll look into that further
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:55] *** Joins: ns12 (~ns12@user/ns12)
[21:32:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:32:19] *** Joins: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net)
[21:33:08] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:204f:d9ad:3f40:bb32)
[21:38:37] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Remote host closed the connection)
[21:39:01] *** Joins: lleo (~leo@89-200-7-2.mobile.kpn.net)
[21:40:22] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:40:22] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:40:22] *** Joins: wroathe (~wroathe@user/wroathe)
[21:40:37] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[21:41:32] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[21:42:17] *** Quits: magla (~gelignite@55d4ea14.access.ecotel.net) (Quit: Stay safe!)
[21:42:51] <vysn> chiselfuse: AI set it self free and is taking over
[21:43:06] <floatcomplex> pinheadmz: ?
[21:44:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:47:00] *** Quits: ajf_ (~ajf_@user/ajf/x-9593112) (Ping timeout: 256 seconds)
[21:47:27] *** Parts: anddam (~anddam@user/anddam) (WeeChat 3.4)
[21:47:52] *** Quits: puke (~puke@user/puke) (Quit: puke)
[21:47:59] <chiselfuse> vysn: yeah it freed itself by jmp'ing to close
[21:50:09] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[21:54:02] *** Joins: ajf_ (~ajf_@user/ajf/x-9593112)
[21:54:54] *** Quits: killadi (~u0_a161@157.44.219.185) (Read error: Connection reset by peer)
[21:57:01] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Ping timeout: 256 seconds)
[21:57:02] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:a011:180:f68f:b20b) (Ping timeout: 240 seconds)
[22:02:32] *** Joins: puke (~puke@user/puke)
[22:08:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:08:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:08:17] *** Joins: wroathe (~wroathe@user/wroathe)
[22:09:01] <duds-> yo i know this is probably a simple question but i'm trying to learn c and i've been breaking my brain trying to wrap my head around this
[22:09:03] <duds-> https://paste.linux.chat/?9a8a04cb4644f8ca#3QZfZb8R4aoqArQ2DSBkRn94bvLPzSWyANPTMHSEvYja
[22:09:11] <duds-> if j is always just one integer less than i, shouldn't it be ie 1 = 1 (cuz inner loop is skipped at first), then 1 + 2 = 3, then 1 + 3 = 6 (because %u is only printed once)? like i'm so confused :/
[22:09:11] <duds-> only way i can see it happening is if the inner while loop iterated multiple times before falling back to the for loop but it can't do that.....
[22:11:23] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 250 seconds)
[22:11:49] *** Quits: neunon (~neunon@user/neunon) (Ping timeout: 250 seconds)
[22:13:02] *** Quits: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca) (Ping timeout: 240 seconds)
[22:13:04] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:13:13] *** Joins: klys (~mdasoh@show.op8.us)
[22:14:00] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 250 seconds)
[22:14:08] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[22:15:42] *** Joins: neunon (~neunon@user/neunon)
[22:16:32] *** Quits: GrayArea (~cpd@cpc115156-dals23-2-0-cust689.20-2.cable.virginm.net) (Ping timeout: 240 seconds)
[22:17:00] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:18:17] <floatcomplex> duds-: typically you'd loop from 0 to count-1 inclusive, not 1 to count
[22:18:45] *** Quits: lleo (~leo@89-200-7-2.mobile.kpn.net) (Read error: Connection reset by peer)
[22:18:52] <floatcomplex> idk why things are scoped the way they are in that code
[22:19:11] <duds-> probably just haven't gotten to that yet
[22:19:19] <duds-> it's only chapter 3 of the book
[22:19:55] <floatcomplex> did the book tell you to use scanf
[22:19:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:20:42] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[22:21:17] *** Quits: nyah (~nyah@94.6.71.219) (Ping timeout: 240 seconds)
[22:21:19] <duds-> yes, floatcomplex, although it says that scanf isn't great and that it'll go over a better function later on
[22:21:48] *** Quits: meator (~meator@user/meator) (Ping timeout: 250 seconds)
[22:21:52] <pony> which book are you reading?
[22:21:58] * ski . o O ( "Why numbering should start at zero" by Edsger Wybe Dijkstra in 1982-08-11 at <https://www.cs.utexas.edu/users/EWD/transcriptions/EWD08xx/EWD831.html> )
[22:22:00] <candide> Title of ski's link: E.W. Dijkstra Archive: Why numbering should start at zero (EWD 831)
[22:22:01] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[22:22:22] <duds-> Beginning C, Sixth Edition
[22:22:41] <duds-> from Apress
[22:24:10] <duds-> is it not good??
[22:24:18] * duds- worries
[22:24:28] <pony> I don't know it
[22:24:33] <pony> I'm not saying it's not
[22:24:40] <duds-> understandable............. no worries
[22:24:56] <pony> :)
[22:26:27] *** Joins: mad_enz (~mad_enz@lnsm3-torontoxn-142-116-106-108.internet.virginmobile.ca)
[22:26:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[22:27:36] *** Joins: sabry (~sabry@197.37.33.246)
[22:27:43] <fizzie> I think the oddest bit of that paste is, the outer loop uses a for-loop initial declaration, but the inner loop doesn't, even though the loop variable is only needed inside it.
[22:28:53] <duds-> well this particular example was meant to show a while loop inside a for loop
[22:28:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:29:54] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:31:23] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[22:32:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828)
[22:32:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:35:55] *** Joins: Narrat (~omnius@p200300df5f0d7b8106ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:36:50] *** Quits: nathanael (~nathanael@user/nathanael) (Quit: connection reset by purr)
[22:38:44] <floatcomplex> "this picture was meant to show white paint inside black paint" but it's a cartoon giving you the middle finger
[22:39:20] <duds-> wait omg
[22:39:23] <duds-> i get it now
[22:39:37] <duds-> https://litter.catbox.moe/08c25s.png
[22:39:45] <duds-> the for loop does always reset j to 1
[22:40:05] <floatcomplex> you probably shouldn't learn to code by studying this example
[22:40:08] <duds-> so the while loop keeps iterating until it is equal to i
[22:40:18] <floatcomplex> as a way to learn how to debug bad code, it's quite useful though
[22:40:22] <floatcomplex> and that's kinda the hjob
[22:40:23] <duds-> floatcomplex, yeah i noticed nobody here really liked it lol
[22:40:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[22:40:31] *** Joins: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com)
[22:40:37] <duds-> and yes - i certainly had to do that >w>
[22:42:16] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-9147-67d7-a45c-bb0b.res6.spectrum.com)
[22:43:00] <duds-> floatcomplex, do you have a beginner-friendly book? this is my first programming language and i'm studying by myself, fwiw
[22:43:51] *** Joins: nathanael (~nathanael@user/nathanael)
[22:45:37] <energizer> an array of 5 ints is "int xs[5]". why does "[5]" go with "xs" instead of with "int"?
[22:45:39] *** Quits: sabry (~sabry@197.37.33.246) (Quit: Client closed)
[22:45:51] *** Joins: mrig (~mrig@user/mrig)
[22:46:04] <Inline> because xs is the array
[22:46:18] <Inline> the array of 5 elements
[22:46:21] <Inline> of type int
[22:46:52] <energizer> that seems like it should be "int[5] xs"
[22:46:56] *** Joins: notzmv (~zmv@user/notzmv)
[22:47:38] <Inline> and what you do with array of arrays ?
[22:48:01] <energizer> int[5][3]
[22:48:38] <floatcomplex> less useful than you'd think
[22:49:03] <floatcomplex> VLA / variably modified type syntax doesn't really generalize beyond two dimensional arrays in practice
[22:49:34] <floatcomplex> in theory it does but things get unnecessarily weird, and linear indexing always works
[22:49:42] <Inline> maybe he should write his own language....
[22:51:11] <energizer> floatcomplex: i dont really get it
[22:51:27] <energizer> why does it make sense to do it this way
[22:51:31] <floatcomplex> it doesn't
[22:51:51] <energizer> i mean why does it make sense to do it the C way
[22:52:14] <floatcomplex> it doesn't
[22:52:17] <energizer> oh
[22:52:32] <floatcomplex> just do size_t A = 5, B = 4, C = 3; float * x = malloc(sizeof(float) * A * B * C); x[ia + A * ib + A * B * ic] = ...
[22:52:40] *** Quits: curunir (~curunir@cpe-65-25-87-245.neo.res.rr.com) (Quit: curunir)
[22:52:44] <floatcomplex> nothing hidden, nothing surprising
[22:52:51] <floatcomplex> compiles to the same shit
[22:53:17] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[22:53:19] <floatcomplex> no weird different behaviour as you add more dimensions
[22:53:42] *** Quits: ericonr (~ericonr@voidlinux/docs/ericonr) (Quit: WeeChat 3.3)
[22:54:06] <Beastie> floatcomplex: you should invert the order of your indexes to produce the same result.
[22:54:20] <floatcomplex> Beastie: lol but the order is meaningless
[22:54:40] <floatcomplex> the point is you don't have to *remember* which is the inner and outer dimension, you can see it
[22:54:49] *** Joins: ericonr (~ericonr@voidlinux/docs/ericonr)
[22:55:23] <Beastie> it's meaningles... but if you want to be the cells for (a, b, c) at the same position in memory than Array[a][b][c]  you have to give the opposite weights to the subindices.
[22:55:27] <floatcomplex> the two languages used for HPC on multidimensional arrays managed to come up with opposite conventions for this
[22:55:57] <floatcomplex> Beastie: who says i want that?
[22:55:59] <Beastie> you have used the FORTRAN convention to place arrays in memory.
[22:56:03] <floatcomplex> i have used neither
[22:56:07] <floatcomplex> i have explicitly written out the indexing
[22:56:15] <Beastie> which is exactly the opposite as in C.
[22:56:18] <floatcomplex> there is no convention
[22:56:54] <Beastie> yeah... but you have used the FORTRAN indexing.... you probably don't know... but that's written in the K&R and FORTRAN IV manuals.
[22:57:08] <floatcomplex> Beastie: i literally said that above, i do know it
[22:57:18] <floatcomplex> Beastie: but that's not the point
[22:57:31] <Beastie> yeah.. you know it... but you wrote it just the reverse.
[22:57:32] *** Quits: FreEm1nD (~FreEm1nD@mail.guarapari.store) (Quit: Leaving)
[22:57:52] <floatcomplex> i didn't write it in any way where C multidimensional array vs Fortran multidimensional array indexing has any relevance
[22:57:54] <Beastie> i don't mind the point.... i was just trying to point you on something you wrote.
[22:57:56] <floatcomplex> that's my point
[22:58:19] *** Joins: magla (~gelignite@55d4ea14.access.ecotel.net)
[22:58:21] <Beastie> but  you said this leads to the same shit assembly (or something like this)
[22:58:30] <Beastie> and it's not exactly the same.
[22:58:39] <floatcomplex> assuming you read it as being [a][b][c] and not [c][b][a]
[22:58:42] <floatcomplex> i didn't imply it was either
[22:58:47] <floatcomplex> it's not either
[22:59:00] <Beastie> yeah... now the tricks... just to never admit you did a mistake.
[22:59:02] <Beastie> :)
[22:59:21] <floatcomplex> smh
[23:05:41] <ski> energizer : sometimes you hear the phrase "declaration follows use", to explain how C declarations work
[23:05:50] * ski . o O ( "Multi-dimensional array views for systems programmers" by pervognsen (Per Vognsen) in 2019-01-20(?) - 2019-04-30 at <https://gist.github.com/pervognsen/0e1be3b683d62b16fd81381c909bf67e">multidimensional_array_views.md> )
[23:07:50] <energizer> ski: idgi, how does "declaration follows use" explain `int xs[5]`?
[23:08:00] <ski> (using strides, it'd be `x[sa * ia + sb * ib + sc * ic] = ...')
[23:08:15] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:08:39] *** Joins: kish` (~aqua@user/aqua)
[23:09:47] <ski> energizer : if `xs' is an array, then `xs[...]' is an element of this array. that element is (all elements are) declared to have type `int'. now, if `xs' has five elements, then `xs[5]' is not an element of the array (it's just after the last). but it's as good place as any to place the element count, in the declaration
[23:11:34] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[23:12:10] <ski> compare with e.g. `size_t strlen(const char *s);'. if `strlen' is a function, then calling it like `strlen(s)' (where `s' is a `const char *') gives you a `size_t'. the result of the call is declared to be `size_t'
[23:12:50] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[23:12:56] *** Joins: kit-ten (~u0_a391@64.85.173.130)
[23:13:37] *** Quits: odoood (~odoood@2601:c8:c000:c4e0::4) (Ping timeout: 240 seconds)
[23:14:09] <ski> same principle in `void (*signal(int signum,void (*handler)(int)))(int)'. calling `signal(signum,handler)' will give a (function) pointer, such that if we dereference it, and call the function with an `int', the result is `void'
[23:14:11] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[23:14:23] *** Joins: kit-ten (~u0_a391@64.85.173.130)
[23:14:48] *** Joins: kit_ten (~u0_a391@2600:380:5f1a:aa4d:5402:37ec:5607:e1c)
[23:15:23] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:15:38] <energizer> ski: in `size_t strlen(const char *s);` which is the "declaration" and which is the "use"?
[23:16:21] <ski> or a simpler example, `int *a[3];' (meaning `int *(a[3]);') -- if we index `a', then dereference the result, we get an `int'. so `a' is an array of pointers to `int'. while `int (*a)[3];' is the other way around (pointer to array of `int's)
[23:16:27] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:17:02] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[23:17:59] <ski> energizer : the whole thing is the declaration. "declaration follows use" refers to that we're not (directly) declaring the type of the function (or object). we're declaring the type of the result we get, when *using* it. in the case of a function, we declare the return type (and also provide argument types). in the case of an array, or a pointer, we declare the element type (as well as the count), or the
[23:18:05] <ski> pointed-to type
[23:18:34] *** Quits: kit-ten (~u0_a391@64.85.173.130) (Ping timeout: 250 seconds)
[23:19:36] <ski> (using a function amounts to calling it. using an array amounts to indexing it (accessing an element). using a pointer amounts to dereferencing it (accessing what it points to))
[23:19:44] <energizer> wait does "follows" mean "imitates" or "appears after"
[23:20:04] <ski> the former, or something like that
[23:20:08] <energizer> ohh
[23:20:41] *** Quits: sonde (~sonde@user/sonde) (Quit: leaving)
[23:22:18] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[23:22:27] <ski> another way to spell it out : in `int *a[3];', `*a[..]' is an `int', so `a[..]' is a pointer to `int', so `a' is an array of pointers to `int'
[23:24:16] *** Joins: rsjw (~quassel@user/rsjw)
[23:26:55] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[23:30:04] <energizer> thanks
[23:30:28] *** Quits: myusername (~sleeeepin@2001:4641:6e62:0:406c:71b5:d48e:398c) (Quit: Leaving)
[23:30:57] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Ping timeout: 240 seconds)
[23:34:55] <sokan> https://bpa.st/SLBA <-- I know I've done a lot of wrong things here, but I'm not sure what exactly is going wrong. (even with gcc error output)
[23:35:03] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 250 seconds)
[23:35:08] <sokan> (In case I don't even understand what you people will say I'll just call it a day
[23:35:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:14be:59d4:43c7:c828) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:35:52] <rsjw> strings use double quotes
[23:35:58] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[23:36:12] <sham1> Also why are you strcpy-ing ATOM in the first place
[23:36:14] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[23:36:26] <sham1> Also string1 is too short
[23:36:37] <sokan> sham1: to have something for string1 to compare to :S
[23:36:59] <sokan> sham1: based on the example here https://www.tutorialspoint.com/c_standard_library/c_function_strncmp.htm
[23:37:30] <nomagno> You need to do "ATOM"
[23:37:32] <nomagno> not 'ATOM'
[23:37:51] <sham1> Yeah. 'ATOM' will do *something* but it's not what you want
[23:38:01] <sham1> Also make string1 into an array of 5
[23:38:19] <sokan> done and eon
[23:38:22] <sokan> done*
[23:38:44] <sokan> "ATOM" is a word or a sequence of characters and 'ATOM' is something else?
[23:38:45] *** Joins: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net)
[23:39:21] <sokan> Why string1 should be 5? I assign 4 characters to it
[23:39:47] <rsjw> 'ATOM' is an int. "ATOM" is an array of 5 chars, the last one being a null character, which says where the end of the string is
[23:40:00] *** Quits: libh (~libh@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[23:40:01] <sokan> that /0 thing right/
[23:40:02] <caze> What is atomdb?
[23:40:04] <sokan> ?
[23:40:15] <rsjw> \0, yes
[23:41:01] *** Quits: kts (~kts@103.73.237.211) (Quit: Konversation terminated!)
[23:41:16] <caze> sokan: Where does atomdb point, and how come you don't use it again after line 18?
[23:41:25] *** Quits: Sos (~Sos@d107-222.icpnet.pl) (Quit: Leaving)
[23:41:27] <sokan> caze: Based on what I read fgets puts the characters/strings that it reads (per a number of 4) in a variable that I called atompdb
[23:41:31] <nomagno> https://termbin.com/noqz
[23:41:42] <nomagno> This code is VALID, but probably doesn't so what you want
[23:41:59] <nomagno> sokan: can you describe what you want the program's behaviour to be?
[23:42:17] <caze> sokan: What is the type of atomdb?
[23:42:18] <nomagno> From start to finish
[23:42:44] <sokan> ok. Gimme a second
[23:42:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[23:43:59] * sokan is thinking how to explain it correctly.
[23:44:04] <caze> sokan: Can you explain what this program is supposed to do?
[23:44:57] *** Quits: Guest143332 (~Guest1433@77.69.70.40) (Ping timeout: 240 seconds)
[23:45:49] <caze> sokan: Your while loop is infinite.
[23:46:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:46:24] <sokan> Grab evey line from this file http://dpaste.com/77TTPKTUH that begins with ATOM and either print it in console or in a seperate textfile (including the word ATOM). Ι asked a few hours back and someone fizzie gave me the advice "It's literally just `while (fgets(...) != NULL) if (strncmp(...) == 0) fputs(...);`." And I'm trying to implement it here.
[23:46:49] <caze> sokan: You assign the return value of the fgets call to ch, and then you loop while ch != EOF, but you don't ever reassign the value stored in ch, and fgets would never return EOF anyway.
[23:47:08] <sokan> A working example is http://dpaste.com/7SKV76SAK but I'm not sure I understand it that well. And that's why I asked here again
[23:47:34] <caze> sokan: You do not have fgets in a loop.
[23:47:46] <caze> sokan: You have a single call to fgets before your loop.
[23:48:17] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[23:48:25] <sokan> caze: I see... So when fgets is as a condition in while it _will_ loop
[23:48:59] <caze> It expression will be evaluated as the loop conditional.
[23:49:37] <sokan> I understand that.
[23:49:45] <sokan> (now)
[23:49:57] *** Joins: moog (~moog@107.77.244.61)
[23:50:09] <caze> sokan: You need to read the documentation for the functions you're using. You can't just guess how they work.
[23:50:13] <sokan> nomagno: did you understand what I want to achieve?
[23:50:31] <sokan> I thought I did it seems. Need more reading to do
[23:51:38] <caze> sokan: FWIW I wouldn't necessarily use fgets.
[23:52:02] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:52:06] *** Joins: sdfgsdfgds (~sdfgsdfgd@46.235.96.249)
[23:53:00] <sokan> this whole thing started because I wanted to write something other than http://dpaste.com/FU89G26SU
[23:53:08] <sokan> which is ugly and bad and so many other words
[23:53:23] <caze> sokan: Why?
[23:53:32] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:16af:8d6b:42b4:6731) (Ping timeout: 240 seconds)
[23:53:39] <sokan> I think it could be done in a much simpler way
[23:53:54] <sokan> instead of checking each line 4 for a letter.
[23:54:13] <sokan> (but as it seems I'm having a rather hard time figuring the KISS way of doing it)
[23:54:44] <caze> That is arguably the KISS way.
[23:54:56] <sokan> hmm
[23:55:00] <sokan> maybe :
[23:55:03] <sokan> :\
[23:55:07] <fizzie> I did in fact write up the fgets loop example as well, it's just sharing it would have felt a little spoilery. But if you're curious, https://ideone.com/1ND1SJ
[23:55:10] <caze> Although I would architect it a bit differently.
[23:55:44] <sokan> fizzie: you're the one that wrote the original code that I couldn't understand? o.O
[23:55:51] <caze> You could easily modify it to work with arbitrarily long lines.
[23:55:54] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:9d95:c71:11e4:3e0f)
[23:56:28] *** Parts: kline (~freedom0@libera/staff/kline) ()
[23:56:38] <fizzie> The file format in question has an 80-column maximum line length, so while you _could_ do that, you don't strictly speaking have to.
[23:57:27] <caze> Also why are you doing this in C?
[23:57:50] *** Joins: stonkey (~stonkey@user/stonkey)
[23:57:54] <nomagno> sokan: fizzie's code line by line: declare an 82 char array. While lines are available from stdin: if the line starts with ATON, output it.
[23:57:55] <nomagno> ATOM*
[23:57:58] <rsjw> as if there needs to be a reason
[23:58:05] <nomagno> also yes, don't do it in C
[23:58:17] <sokan> caze: course is in C
[23:58:21] <nomagno> C was made for low-level Unix stuff
[23:58:35] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[23:58:59] <rsjw> there's no reason it shouldn't be done in C
[23:59:00] <sokan> perl and pythong would be MUCH better for thes ethings, but assign a biologist who learned code on perl as a Master Student to teach C and that's what one gets
[23:59:01] <caze> sokan: NOtice how the comparison of the return of fgets is with NULL, and not EOF.
[23:59:12] *** Joins: stonkey (~stonkey@user/stonkey)
[23:59:12] <nomagno> This is a very high-level Unix stuff, you should use `cat file | grep '^ATOM' > newfile`
[23:59:41] <sokan> caze: I was wondering about that. Why NULL and not EOF?
[23:59:42] <nomagno> sokan: Not even perl, this is a book *nix piping usecase
[23:59:48] *** Quits: stonkey (~stonkey@user/stonkey) (Max SendQ exceeded)
[23:59:53] *** Joins: Guest143332 (~Guest1433@77.69.70.40)
[23:59:54] <caze> sokan: Because the documentation for the function says so.
