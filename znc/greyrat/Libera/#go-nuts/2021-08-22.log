[00:02:43] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:03:42] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Remote host closed the connection)
[00:05:52] *** Joins: thing (~thing@user/thing)
[00:08:46] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[00:09:47] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[00:18:49] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 248 seconds)
[00:20:06] *** Joins: cation (cation@user/cation)
[00:22:05] *** Joins: jasper_ (~user@styria.daemonized.org)
[00:24:00] *** Quits: tedwing (~anon@lfbn-idf3-1-1409-99.w109-221.abo.wanadoo.fr) (Quit: leaving)
[00:25:32] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[00:31:39] *** Joins: fikran (~fikran@user/fikran)
[00:35:44] *** Joins: independent_ (~independe@185.50.0.80)
[00:40:18] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 250 seconds)
[00:44:19] *** Joins: independent_ (~independe@185.50.0.80)
[00:48:29] *** Quits: independent_ (~independe@185.50.0.80) (Remote host closed the connection)
[00:48:47] *** Joins: independent_ (~independe@185.50.0.80)
[00:49:55] *** Joins: compufreak (~compufrea@2603-6010-4903-d184-0218-d705-fa62-f556.res6.spectrum.com)
[00:50:45] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[00:54:05] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[00:55:36] <compufreak> Are there any high-level REST api client libraries out there that handle things like network errors, retries, etc where I don't need to implement the entire json schema when I just want a few fields? (e.g. "just enough" validation)
[00:55:41] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:58:56] *** Quits: revolve (~u0_a227@82-132-246-184.dab.02.net) (Ping timeout: 250 seconds)
[01:00:42] *** Joins: revolve (~u0_a227@82-132-247-25.dab.02.net)
[01:03:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Read error: Connection reset by peer)
[01:04:14] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[01:06:02] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[01:06:50] <nitrix> You can serialize/deserialize into a map and use only the fields you care about if that's simpler.
[01:07:48] <nitrix> I never believed in middleman retries. Cascade the entire failure all the way up and let the user perform the operation again.
[01:08:14] <nitrix> Otherwise you have all sorts of synchronicity, timeouts, rollbacks and other transactional causality problems.
[01:16:32] <nitrix> You can monitor the failure rates and work to bring the number down to zero in areas that don't meet the expectations. It's going to be a lot more productive work than designing for some two-phase commit machinery, carefully integrating it everywhere without incidents and/or troubleshooting during emergencies.
[01:17:13] <nitrix> Anyhow, no I don't know of any. Good luck.
[01:23:54] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:37:56] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 250 seconds)
[01:39:26] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[01:41:10] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[01:41:15] *** Joins: arcatech (~arcatech@user/arcatech)
[01:41:57] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:45:51] *** Joins: zwr (~zwr@191.47.94.157)
[01:52:02] <compufreak> Yeah, I mean this is pretty simple--there's not really "transactions" involved. They're idempotent requests
[01:52:14] *** Quits: goldfish_ (~goldfish@user/goldfish) (Ping timeout: 250 seconds)
[01:52:39] *** Quits: thing (~thing@user/thing) (Quit: WeeChat 3.2)
[01:52:40] <compufreak> Yeah, the problem is it's not a simple map. It's a structure with nested lists and maps and I only care about a couple fields. It looked like the common DIY way was a recursive parser with case/switch and type casting
[01:52:49] <oliv3> Can i assume fmt.Print* flushes stdout ?
[01:54:07] <compufreak> & in this case there's not really a user. One side is an HTTP API and the other side is k8s and this is just connector code (e.g. both are "3rd" party)
[01:56:48] <foobaz> compufreak: i recommend using the HTTP and JSON functionality in go's standard library
[01:57:12] <compufreak> foobaz: that's what I started out with but it feels like I'm ending up implementing a lot that someone else has probably done already
[01:57:14] <foobaz> it will work better for you than an aftermarket library
[01:57:29] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 248 seconds)
[01:57:57] <foobaz> maybe you're not using the standard library effectively because you don't know what it offers
[01:58:18] <foobaz> the JSON decoding functionality is very good but it's not easy to learn
[01:58:38] <foobaz> you need to define a bunch of structs with struct tags to express the format of the data you get from k8s
[01:58:47] <compufreak> yeah, it's the other way around
[01:58:57] <compufreak> I'd need to make a crap load of structs for opnsense API
[01:59:07] <foobaz> once you do that, there are very simple functions in the standard library to parse and emit the data
[01:59:12] <compufreak> Which imo seems brittle when I only need like 6 of the 270 fields
[01:59:24] <foobaz> then only put your 6 fields in the struct
[01:59:53] <compufreak> Then I have to deserialize the struct twice since JSON Unmarshal expects it to match?
[02:00:00] <ikke> no
[02:00:07] <foobaz> are the other 264 fields required on the server? how will it respond if you pass it a json object with only the 6 you're interested in?
[02:00:26] <compufreak> opnsense returns 270 lines of JSON, the receiving side needs 6 attributes
[02:00:34] <foobaz> ok gotcha
[02:00:42] <foobaz> then you should make a struct with 6 fields, and deserialize the JSON into that
[02:00:50] <foobaz> it will skip everything else
[02:03:10] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 252 seconds)
[02:03:36] <foobaz> if the 6 attributes you want are not all in the root, you will need to make multiple struct types to express the structure of the data
[02:03:54] <foobaz> with the appropriate json struct tags
[02:04:22] <foobaz> but that should be easy, only a couple dozen lines of code
[02:09:30] <compufreak> ahh yeah that works--I found the correct docs. Not sure why so many other sites seem to imply the structures need to match *shrug*
[02:10:06] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[02:16:58] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:18:40] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:19:52] *** Joins: sagax (~sagax@213.138.71.146)
[02:19:58] <compufreak> For something like this https://pkg.go.dev/net/http#NewRequestWithContext it returns an error but it's not clear what types of errors or why. How would you normally go about handling something like that? (I assume it's probably just code errors and not runtime-specific errors but not really sure how you confirm that) i.e. there's nothing to handle, programatically
[02:20:25] *** Quits: Vigdis (~danj@ns4.chown.me) (Ping timeout: 248 seconds)
[02:24:47] <KirkMcDonald> compufreak: There isn't really a way to confirm that other than reading the source.
[02:24:50] *** Joins: Vigdis (~danj@ns4.chown.me)
[02:25:37] <KirkMcDonald> But, certainly don't *ignore* the error.
[02:25:42] <compufreak> hmm that's what I was afraid of, ok
[02:26:51] <KirkMcDonald> Looking at the source, it only gives an error if the context, method, or URL are invalid.
[02:27:54] <KirkMcDonald> Which could easily be the result of runtime behavior (especially the URL).
[02:29:29] <foobaz> if http.NewRequestWithContext returns an error, you should log the error and fail the entire operation
[02:30:00] <foobaz> the first time you run the code it will probably fail due to a bug, and you can read the log message and fix it
[02:30:16] <b0nn> compufreak: Don't couple your code to undocumented errors, they're subject to change
[02:31:13] <foobaz> eventually, it will work, and you can leave in the log message so if some unexpected failure happens in the future you will have some information about the problem
[02:31:20] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 258 seconds)
[02:32:27] <foobaz> it's not worth it to try and handle every possible error, any error means the entire operation fails, the correct thing to do is to bail immediately
[02:32:55] <foobaz> sometimes you may need to special case one type of error to handle differently but these situations are rare
[02:34:38] <seebs> there's no promise that it will not return different kinds of error in the future, unless it specifically says something about kinds of errors it can return.
[02:36:25] <b0nn> This is why you never couple to undocumented behaviour
[02:36:38] <b0nn> Unless that undocumented behaviour is causing you problems
[02:37:03] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[02:38:01] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[02:38:41] *** Quits: marlinc (~marlinc@user/marlinc) (Quit: ZNC 1.8.2+deb1+focal2 - https://znc.in)
[02:38:42] <b0nn> And, even still, in the case of problems being caused, you write code to handle it, and submit an issue/PR to the provider to deal with the issue themselves (either by fixing or documenting)
[02:38:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:40:08] *** Quits: deafpiano (~tomlazar@cpe-65-26-56-76.wi.res.rr.com) (Ping timeout: 252 seconds)
[02:40:22] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:40:31] <compufreak> In this case, I was trying to separate out network-related errors (broken tcp connections, timeouts) from other things but it doesn't really seem there's an easy way besides "just run it til it breaks"
[02:41:03] *** Joins: fikran (~fikran@user/fikran)
[02:42:18] <compufreak> i.e. socket errors vs http errors
[02:42:33] <seebs> I see the appeal, but it's potentially-messy. You might look at errors.Cause or whatever it got called, but there's still a lot of room for those to be contextually misleading, so...
[02:42:51] <b0nn> They should be documenting the different sets of errors
[02:43:11] <b0nn> If not  - submit an issue for documentation
[02:43:23] <foobaz> it doesn't matter whether it's a socket error or an http error, you should treat them the same, and that means you don't need to know which it is
[02:43:55] <b0nn> http errors are well documented
[02:46:05] <foobaz> "worse is better" has relevant ancient wisdom regarding error handling: https://dreamsongs.com/RiseOfWorseIsBetter.html
[02:47:23] *** Joins: bjornkpu (~bjornkpu@ti0005q162-5749.bb.online.no)
[02:48:38] *** Quits: Cyrus1 (~Cyrus@144.202.93.237) (Ping timeout: 268 seconds)
[02:49:19] *** Joins: marlinc (~marlinc@user/marlinc)
[02:49:38] <compufreak> foobaz: sure it does, my code can easily recover and perform corrective action with a socket error (re-open the socket) but not necessarily an http error
[02:51:06] <foobaz> a socket error is not necessarily re-try-able and an http error is not necessarily fatal
[02:51:36] <foobaz> i advise against adding this kind of complexity, it will hurt you more than it helps
[02:53:12] <b0nn> compufreak: What's the lib you are using
[02:54:58] <foobaz> modern web browsers automatically retry on http errors, and sometimes it works (e.g. 503 unavailable)
[02:55:32] <foobaz> if never retrying will work, it's the right thing to do
[02:55:46] <compufreak> b0nn: net/http in stdlib
[02:56:02] <foobaz> whereas if it is important to retry sometimes, it's probably worth it to retry always, no matter what the error is
[02:56:51] <b0nn> IDGI that's well documented
[03:00:24] <b0nn> An error is returned if caused by client policy (such as CheckRedirect), or failure to speak HTTP (such as a network connectivity problem). A non-2xx status code doesn't cause an error.
[03:00:46] <b0nn> That says to me that HTTP errors aren't returned as errors, they're in the response
[03:01:45] <bookworm> which makes sense from an api perspective, after all you might want to handle the various error codes
[03:02:23] <b0nn> Yeah, 5xx errors would be cause for.. looking for another provider, or waiting before trying again
[03:03:05] <b0nn> But it's clear that the service spoke HTTP (if it spoke FTP or something else, then you have a config problem)
[03:03:18] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:05:48] <compufreak> foobaz: https://aws.amazon.com/builders-library/timeouts-retries-and-backoff-with-jitter/ tldr; retry vs not retry is a little more nuanced than "always" or "never"
[03:07:01] <compufreak> b0nn: even a 5xx doesn't tell you much. The client could have sent some ridiculous request the server operators never considered receiving or maybe the client has sent so many requests it's overloading the server and it can't respond or maybe the server operator just wrote crappy software
[03:07:33] <b0nn> um, in the first case that's a 4xx error
[03:08:05] <compufreak> b0nn: that assumes the server operator has caught the error and repackaged it--many frameworks will just have a generic error handler that returns a server error for otherwise unhanlded errors
[03:08:11] <b0nn> In the second case - circuit breakers, retries, time outs, and fallback strategies ensure robust behaviour by your client
[03:08:41] <compufreak> sure, but the point being, 5xx (or 500) is a very black-box error that doesn't tell you much
[03:08:52] <b0nn> It's not supposed to
[03:09:12] <b0nn> 5xx is "I have fallen over and cannot get up"
[03:09:28] <b0nn> 4xx is "You have sent bad stuff, deal with it"
[03:10:04] <bookworm> 3xx go somewhere else
[03:10:11] <bookworm> 2xx success
[03:10:14] <compufreak> anyway, we've come full circle. So the prescribed way to create a robust client is to just bubble errors up and wait til it breaks?
[03:11:18] <b0nn> You're asking if a well documented and heavily travelled pathway is the right way to go?https://blog.codecentric.de/en/2019/06/resilience-design-patterns-retry-fallback-timeout-circuit-breaker/
[03:12:03] <compufreak> So, I was asking how to achieve that in go--by initially asking about 3rd party libraries
[03:12:23] *** Quits: jinn (~jinn@d.jinn.army) (Killed (NickServ (GHOST command used by jinn_)))
[03:12:45] <b0nn> I'm going to put you on ignore because my patience is wearing a lot thin
[03:12:49] *** Joins: jinn (~jinn@d.jinn.army)
[03:19:03] <compufreak> I think there are quite a few people here saying different things causing confusion. I'm trying to reconcile how one goes from "don't worry about reacting to specific errors" to building a resilient client
[03:19:52] <compufreak> anyway, I think it's become unproductive so I digress
[03:23:01] *** Quits: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[03:23:04] <foobaz> right now you are writing the initial version of your software so you should focus on core functionality
[03:23:35] <foobaz> if retrying is not necessary, you shouldn't waste time on it, because it doesn't move you closer to your goal of having functional software
[03:24:12] <foobaz> once you have functional software, you will have much greater ability to see how it can be improved
[03:24:30] <foobaz> right now, you think retry might be valuable, but you might be wrong, and if so it's wasted time
[03:25:45] *** Joins: lazyreader (~lazyreade@ec2-34-222-196-228.us-west-2.compute.amazonaws.com)
[03:25:50] <foobaz> perhaps once you observe the software actually operating you will see that it works fine without retries, or that it has another issue that is more important to work on
[03:26:36] <foobaz> by following this practice you can develop high quality software over multiple passes, by observing and iterating
[03:27:04] <foobaz> right now you are trying to get it right on the first pass, but that methology is ineffective
[03:27:50] <foobaz> you will waste too much time on rabbit holes and wild goose chases trying to make everything perfect the way you imagine it
[03:31:09] <foobaz> http://c2.com/xp/DoTheSimplestThingThatCouldPossiblyWork.html
[03:31:14] <foobaz> http://c2.com/xp/YouArentGonnaNeedIt.html
[03:32:04] *** Quits: jsrnop1 (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:27] *** Joins: jsrnop1 (~mark@user/jsrnop)
[03:34:08] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com)
[03:35:34] <seebs> That's pretty good advice. Start by getting a client that is working at all. If you want to aim for resilience, it's not obvious how often it'll matter *which* errors you're seeing, but it might? But like, start with sane retry logic for "I don't know what went wrong but something did".
[03:36:11] <seebs> But also, quite frequently, the right choice is to bubble errors up because the thing *using* the client will have information that the client library doesn't, like "do we expect this to fail" or "is there any point in retrying this if it doesn't work".
[03:42:44] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1008.inf6.spectrum.com) (Ping timeout: 250 seconds)
[03:43:24] *** Quits: fputs (~fputs@137.220.33.212) (Ping timeout: 258 seconds)
[03:52:30] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[03:56:07] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[04:00:10] *** Quits: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) (Ping timeout: 268 seconds)
[04:01:02] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[04:16:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[04:17:26] *** Joins: flynn (~mcbloch@user/flynn)
[04:18:57] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[04:19:46] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[04:21:13] *** Joins: c10l (~c10l@89.34.167.207)
[04:40:26] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[04:41:07] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Client Quit)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:34] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[04:50:27] *** Joins: fikran (~fikran@user/fikran)
[04:55:17] *** A_Dragon is now known as gay_dragon
[04:58:08] *** Quits: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:14:46] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:19:02] <Compy> So, curious. What would be the "right" way to 1) Check if an interface exists in a given package given its name inside of a string variable? and 2) Instantiate that interface given its arbitrary string name?
[05:19:34] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[05:23:24] *** Joins: sevla (~platen@user/sevla)
[05:25:21] *** Joins: independent_ (~independe@185.50.0.80)
[05:29:07] *** Joins: Lutin (~Lutin@user/lutin)
[05:46:35] *** Joins: neurocyte830 (~neurocyte@213.188.112.242)
[05:46:35] *** Quits: neurocyte830 (~neurocyte@213.188.112.242) (Changing host)
[05:46:35] *** Joins: neurocyte830 (~neurocyte@user/neurocyte)
[05:48:40] *** Quits: neurocyte83 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:48:40] *** neurocyte830 is now known as neurocyte83
[05:55:44] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Quit: ZNC - https://znc.in)
[05:55:54] <b0nn> Compy: I'm curious what you are trying to do
[05:56:24] <Compy> Yeah, just got done chatting with some gophers in the slack. Turns out I was overcomplicating things.
[06:03:30] *** Quits: independent_ (~independe@185.50.0.80) (Ping timeout: 268 seconds)
[06:03:39] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[06:04:30] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[06:06:50] *** Joins: oxum (~oxum@122.172.205.112)
[06:11:13] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[06:12:37] *** Joins: oxum (~oxum@122.172.205.112)
[06:14:08] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[06:14:24] *** Joins: mickey (~user@user/mickey)
[06:15:10] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[06:23:17] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[06:24:01] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Remote host closed the connection)
[06:24:34] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[06:25:18] *** Quits: Jigsy (~Jigsy@user/jigsy) (Remote host closed the connection)
[06:25:42] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:28:34] *** Joins: oxum (~oxum@122.172.205.112)
[06:32:37] *** Joins: alicebudda (~alicebudd@cold.passenger.volia.net)
[06:33:13] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[06:35:25] *** Quits: alicebudda (~alicebudd@cold.passenger.volia.net) (Client Quit)
[06:35:54] *** Joins: Guest93 (~Guest93@60.209.14.62)
[06:36:19] *** Quits: Guest93 (~Guest93@60.209.14.62) (Client Quit)
[06:37:37] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:37:37] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[06:42:57] *** Joins: gggp (~textual@60.10.194.48)
[06:47:24] *** Quits: pztrn (~pztrn@user/pztrn) (Read error: Connection reset by peer)
[06:47:31] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[06:47:44] *** Joins: pztrn (~pztrn@user/pztrn)
[06:48:30] *** Joins: sweb (~sweb@static.187.181.76.144.clients.your-server.de)
[06:48:40] <sweb> why embed.fs not working? https://paste.ubuntu.com/p/gzbsQkSnF5/
[06:49:03] <sweb> it's just embed empty directory not it's files.
[06:51:43] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Quit: ZNC - https://znc.in)
[06:51:43] <fizzie> ReadDir isn't recursive, so your test case would not ever print the *contents* of a directory, if it prints the directory name.
[06:53:08] <fizzie> If you change the call to `templates.ReadDir("templates")` it will print "index.html".
[06:55:23] <sweb> fizzie: yeah, u'r right. seems `templates.ReadDir("./templates")` also not work
[06:55:57] *** Joins: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net)
[06:57:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[06:59:49] *** Joins: fikran (~fikran@user/fikran)
[07:00:45] <fizzie> Apparently, though that was a surprise to me. https://play.golang.org/p/8VoaYjl7uNM
[07:00:57] *** Quits: sevla (~platen@user/sevla) (Ping timeout: 248 seconds)
[07:03:00] <fizzie> Seems like it's an io/fs rule, though. https://pkg.go.dev/io/fs#ValidPath "Path names must not contain an element that is “.” or “..” or the empty string, except for the special case that the root directory is named “.”."
[07:05:16] *** Joins: oxum (~oxum@122.172.205.112)
[07:08:30] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[07:09:28] *** Joins: thing (~thing@user/thing)
[07:10:15] *** Quits: Xe (~cadey@tailscale/xe) (Quit: WeeChat 3.1)
[07:10:30] *** Joins: Xe (~cadey@tailscale/xe)
[07:22:43] *** Quits: gggp (~textual@60.10.194.48) (Ping timeout: 252 seconds)
[07:26:24] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[07:29:00] *** Joins: thing (~thing@user/thing)
[07:29:52] *** Quits: revolve (~u0_a227@82-132-247-25.dab.02.net) (Ping timeout: 252 seconds)
[07:30:47] *** Joins: revolve (~u0_a227@82-132-246-231.dab.02.net)
[07:36:29] <seebs> i'm honestly very confused by the "if an interface exists in a given package" question myself, I don't understand what you'd be trying to check for, or why. I also don't quite get what it would mean to "instantiate an interface" since instantiation requires a concrete type, usually.
[07:41:59] *** Joins: gggp_ (~textual@123.113.186.169)
[07:44:17] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[07:48:20] *** Quits: alyx (alyx@atheme/alyx) (Remote host closed the connection)
[07:53:12] *** Joins: gggp (~textual@60.10.23.160)
[07:56:16] *** Quits: gggp_ (~textual@123.113.186.169) (Ping timeout: 252 seconds)
[07:57:20] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:57:52] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[08:04:43] <gay_dragon> well technically you could someInterface(nil) but thats just silly
[08:07:07] *** Joins: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net)
[08:16:09] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:17:28] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[08:20:32] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:21:48] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[08:31:09] *** Joins: oxum (~oxum@122.172.205.112)
[08:35:21] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[08:35:52] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[09:07:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[09:07:40] *** Quits: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:09:11] *** Joins: fikran (~fikran@user/fikran)
[09:15:29] *** Joins: jpw (~jpw@user/jpw)
[09:24:59] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[09:34:11] *** Joins: kupi (uid212005@id-212005.stonehaven.irccloud.com)
[09:36:20] *** Joins: mei (~mei@user/mei)
[09:52:31] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[09:56:30] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:01:26] *** Quits: mei (~mei@user/mei) (Quit: mei)
[10:02:02] *** Joins: mei (~mei@user/mei)
[10:03:25] *** Joins: darkapex (~darkapex@user/darkapex)
[10:07:31] *** Joins: darkapex_ (~darkapex@user/darkapex)
[10:11:01] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[10:11:19] *** Quits: mei (~mei@user/mei) (Quit: mei)
[10:11:58] *** Joins: mei (~mei@user/mei)
[10:21:10] *** Joins: adlternative (~adl@117.32.216.71)
[10:24:30] *** Joins: kodah (~kodah@user/kodah)
[10:30:57] *** Quits: adlternative (~adl@117.32.216.71) (Quit: Konversation terminated!)
[10:33:32] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[10:38:25] *** Joins: frost (~frost@59.71.240.119)
[10:46:39] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[10:50:49] *** Quits: src (~src@user/src) (Quit: Leaving)
[10:55:34] *** Quits: zwr (~zwr@191.47.94.157) (Remote host closed the connection)
[10:58:52] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 252 seconds)
[11:05:15] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[11:06:29] *** Joins: shka (~herr@109.231.62.239)
[11:06:34] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[11:08:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[11:09:56] *** Quits: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[11:15:23] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:16:11] *** Quits: iluxa (~iliaf@user/iluxa) (Ping timeout: 256 seconds)
[11:16:32] *** Joins: iliaf (~iliaf@user/iluxa)
[11:16:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:17:56] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Client Quit)
[11:18:48] *** Joins: fikran (~fikran@user/fikran)
[11:26:47] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547)
[11:27:18] *** gay_dragon is now known as A_Dragon
[11:29:14] *** Joins: oxum (~oxum@122.172.205.112)
[11:32:02] *** Joins: bkircher (~bkircher@2001:a61:2479:d01:f90e:ec5f:5022:f6f2)
[11:33:46] *** Joins: gggp (~textual@114.245.111.238)
[11:37:25] *** Joins: fef (~thedawn@user/thedawn)
[11:37:55] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[11:39:41] *** Joins: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs)
[11:41:37] *** Quits: gggp (~textual@114.245.111.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:09] *** Joins: gggp (~textual@60.10.23.160)
[11:42:38] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:44:04] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[11:44:57] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[11:47:58] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:53:10] *** Quits: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[11:57:46] *** Quits: kupi (uid212005@id-212005.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:58:28] *** Joins: ForeverAnApple (~aaaa@154.3.250.80)
[11:59:28] *** Joins: theoceaniscool (~theoceani@93.177.120.45)
[12:02:17] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:08:01] *** Joins: gggp (~textual@60.10.23.160)
[12:10:50] *** Joins: carlavilla (~carlavill@2a0c:5a84:3106:5100:221:6bff:fe3b:cee4)
[12:14:41] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:15:30] *** Quits: kayprish (~kayprish@cable-188-2-229-172.dynamic.sbb.rs) (Read error: Connection reset by peer)
[12:17:30] *** Joins: gggp (~textual@60.10.23.160)
[12:19:31] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[12:20:01] *** Joins: cim (~cim@205.185.117.110)
[12:22:55] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[12:26:12] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:26:59] *** Joins: Lutin (~Lutin@user/lutin)
[12:28:32] *** Joins: gggp (~textual@221.219.72.60)
[12:29:38] *** Joins: mrig (~mrig@user/mrig)
[12:34:52] *** Quits: gggp (~textual@221.219.72.60) (Ping timeout: 250 seconds)
[12:38:32] *** Joins: gggp (~textual@60.10.23.160)
[13:01:24] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:94f3:a79f:8eb9:c547) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:02:10] *** Quits: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[13:04:00] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:09:45] *** Quits: bkircher (~bkircher@2001:a61:2479:d01:f90e:ec5f:5022:f6f2) (Quit: WeeChat 3.2)
[13:14:04] *** Joins: gggp (~textual@221.219.78.247)
[13:15:36] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 250 seconds)
[13:16:30] *** Joins: normen (~normen@p200300d7173dc9006c49509d697f699d.dip0.t-ipconnect.de)
[13:17:34] *** Joins: mrig (~mrig@user/mrig)
[13:18:40] *** Quits: gggp (~textual@221.219.78.247) (Ping timeout: 240 seconds)
[13:26:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:28:11] *** Joins: fikran (~fikran@user/fikran)
[13:29:12] *** Quits: pztrn (~pztrn@user/pztrn) (Remote host closed the connection)
[13:29:49] *** Joins: pztrn (~pztrn@user/pztrn)
[13:35:10] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[13:35:37] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[13:40:34] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[13:40:42] *** Quits: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:44:36] *** Joins: gggp (~textual@123.113.190.24)
[13:49:15] *** Joins: j0be (~j0be@user/j0be)
[14:00:05] *** Quits: martin_ (nobody@188.113.85.137) (Quit: WeeChat 3.0)
[14:00:14] *** Quits: revolve (~u0_a227@82-132-246-231.dab.02.net) (Ping timeout: 250 seconds)
[14:00:47] *** Quits: gggp (~textual@123.113.190.24) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:00:50] *** Joins: revolve (~u0_a227@82-132-247-129.dab.02.net)
[14:06:41] *** Joins: gggp (~textual@60.10.23.160)
[14:08:46] *** Quits: gggp (~textual@60.10.23.160) (Client Quit)
[14:12:01] *** Joins: gggp (~textual@221.219.72.60)
[14:18:41] *** Joins: kissofdeath (~fedorafan@user/fedorafan)
[14:19:14] <kissofdeath> hey nuts
[14:28:19] *** Joins: NCS_One (~NCS_One@2001:8a0:7fcc:7100:1da7:7b3c:1b17:c1af)
[14:35:37] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:36:36] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[14:37:13] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Ping timeout: 252 seconds)
[14:40:00] *** Joins: martin_ (nobody@188.113.85.137)
[14:40:58] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:41:19] *** Joins: mickey (~user@user/mickey)
[14:41:59] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:42:28] *** Joins: kcrk (~kcrk@user/kcrk)
[14:43:56] *** Joins: gggp (~textual@60.10.23.160)
[14:56:24] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:11:26] <kissofdeath> hows doing go
[15:11:30] <kissofdeath> duckduckgo
[15:11:34] <kissofdeath> !duckhunt
[15:17:12] *** Joins: Atque (~Atque@user/atque)
[15:24:05] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[15:26:21] *** Joins: khrbt (~znc@user/khrbt)
[15:29:31] *** Quits: carlavilla (~carlavill@2a0c:5a84:3106:5100:221:6bff:fe3b:cee4) (Remote host closed the connection)
[15:35:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[15:36:12] *** Quits: thing (~thing@user/thing) (Ping timeout: 244 seconds)
[15:37:34] *** Joins: fikran (~fikran@user/fikran)
[15:37:40] <toretto> I'm curious what's the thing that comes after a type inside the struct: `type Foo struct { one string SOME_THING_HERE }`? What's that SOME_THING_HERE? I've seen that for a XML parsing example, using '``' (tilde) sign, but not sure what that means.
[15:38:02] <ikke> It's a tag for that field
[15:38:09] <toretto> tag?
[15:38:13] <ikke> metadata that can be read programatically
[15:38:23] <toretto> hmm, i see.
[15:38:37] <ikke> It's often used to map fields for (de)serialization
[15:40:54] *** Quits: gggp (~textual@60.10.23.160) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:45:33] *** Joins: gggp (~textual@123.113.180.13)
[15:45:45] *** Quits: dalan62 (~dalan@14-203-203-26.tpgi.com.au) (Ping timeout: 248 seconds)
[15:46:49] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[15:48:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[15:55:20] *** Quits: gggp (~textual@123.113.180.13) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:05:03] *** Joins: gggp (~textual@60.10.23.160)
[16:07:58] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Ping timeout: 252 seconds)
[16:09:40] *** Quits: gggp (~textual@60.10.23.160) (Ping timeout: 268 seconds)
[16:09:57] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[16:15:42] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[16:18:56] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[16:21:03] *** Joins: c10l (~c10l@89.34.167.207)
[16:26:39] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:31:42] *** Quits: dsrt^ (~dsrt@209.65.131.194) (Remote host closed the connection)
[16:32:02] *** Joins: dsrt^ (~dsrt@209.65.131.194)
[16:32:09] *** Parts: dsrt^ (~dsrt@209.65.131.194) ()
[16:39:23] *** Joins: gggp (~textual@221.219.72.60)
[16:40:36] *** Quits: gggp (~textual@221.219.72.60) (Client Quit)
[16:46:00] *** Joins: gggp (~textual@221.219.72.60)
[16:48:35] *** Parts: Yukkuri_ (~user@mayoinochikurin.eientei.org) ()
[16:49:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[16:50:26] *** Joins: flynn (~mcbloch@user/flynn)
[16:58:41] <kissofdeath> do you still live
[17:04:27] <j416> toretto: you'll find them under the term "struct tag"
[17:14:30] <kissofdeath> ahhhhhhhh
[17:29:21] *** Joins: nrl^ (~nrl@209.65.131.194)
[17:30:52] *** Joins: andlabs (~andlabs@pool-72-69-43-115.nycmny.fios.verizon.net)
[17:32:12] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:35:52] *** Joins: alyx (alyx@atheme/alyx)
[17:44:38] *** Joins: thing (~thing@user/thing)
[17:45:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:47:11] *** Joins: src (~src@user/src)
[17:47:26] *** Joins: fikran (~fikran@user/fikran)
[17:53:07] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 244 seconds)
[17:54:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:56:14] *** Joins: sevla (~platen@user/sevla)
[18:05:19] *** Joins: fef (~thedawn@user/thedawn)
[18:16:16] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:17:56] *** Joins: independent56 (~independe@148.122.187.2)
[18:18:17] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 248 seconds)
[18:19:40] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:21:40] *** Joins: independent56 (~independe@148.122.187.2)
[18:22:36] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:23:21] *** Joins: independent56 (~independe@148.122.187.2)
[18:28:08] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:29:30] *** Quits: CoolerX (~CoolerX@user/coolerx) (Remote host closed the connection)
[18:29:58] *** Joins: CoolerX (~CoolerX@user/coolerx)
[18:30:16] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[18:31:13] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:33:55] *** Joins: gggp (~textual@221.219.72.60)
[18:36:36] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:37:31] *** Joins: independent56 (~independe@148.122.187.2)
[18:38:33] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:39:24] *** Joins: independent56 (~independe@148.122.187.2)
[18:40:38] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[18:40:54] *** Joins: independent56 (~independe@148.122.187.2)
[18:44:43] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[18:52:08] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[18:55:34] *** Quits: gggp (~textual@221.219.72.60) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:55] *** Joins: jpw (~jpw@user/jpw)
[18:57:57] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[18:58:44] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:00:08] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:00:32] *** Joins: independent56 (~independe@148.122.187.2)
[19:08:41] *** Joins: CoolerX (~CoolerX@user/coolerx)
[19:19:09] *** Joins: sheldon (~sheldon@user/sheldon)
[19:19:50] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[19:20:16] *** Quits: qrpnxz (~qrpnxz@user/qrpnxz) (Ping timeout: 258 seconds)
[19:24:40] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[19:27:04] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[19:27:32] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 245 seconds)
[19:34:13] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[19:40:04] *** Quits: sheldon (~sheldon@user/sheldon) (Quit: WeeChat 3.2)
[19:40:59] *** residue_ is now known as couture
[19:43:35] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:44:10] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[19:44:15] *** Joins: independent56 (~independe@148.122.187.2)
[19:45:09] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[19:55:08] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[19:55:35] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[19:55:59] *** Joins: independent56 (~independe@148.122.187.2)
[19:57:08] *** Joins: fikran (~fikran@user/fikran)
[20:00:35] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[20:09:43] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 258 seconds)
[20:09:58] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Quit: ZNC 1.8.2 - https://znc.in)
[20:10:06] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 258 seconds)
[20:11:51] *** Joins: CoolerX (~CoolerX@user/coolerx)
[20:13:22] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[20:15:22] <kissofdeath> ciao ciao
[20:15:26] *** Parts: kissofdeath (~fedorafan@user/fedorafan) (Textual IRC Client: www.textualapp.com)
[20:18:00] *** Joins: ugjka (~ugjka@ugjka.net)
[20:20:25] *** Joins: milosz_ (~milosz@user/milosz)
[20:25:04] *** Joins: averell (~averell@user/averell)
[20:25:54] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[20:28:49] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[20:28:53] *** Quits: revolve (~u0_a227@82-132-247-129.dab.02.net) (Read error: Connection reset by peer)
[20:29:11] *** Joins: mickey (~user@user/mickey)
[20:29:56] *** Joins: alicebudda (~alicebudd@cold.passenger.volia.net)
[20:30:55] *** Joins: revolve (~u0_a227@82-132-244-99.dab.02.net)
[20:31:26] *** Joins: codebam (~codebam@user/codebam)
[20:40:40] *** Joins: oxum (~oxum@122.172.205.112)
[20:46:22] *** Joins: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru)
[20:48:06] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Segmentation fault)
[20:49:11] *** Joins: independent56 (~independe@148.122.187.2)
[20:58:49] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 248 seconds)
[21:02:16] *** Joins: independent56 (~independe@148.122.187.2)
[21:03:55] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:04:37] *** Joins: independent56 (~independe@148.122.187.2)
[21:05:23] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:05:51] *** Joins: independent56 (~independe@148.122.187.2)
[21:08:28] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[21:08:48] *** Joins: independent56 (~independe@148.122.187.2)
[21:13:50] *** Joins: Torr (~Torr@user/torr)
[21:15:59] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:17:06] *** Quits: sizeof_void34 (~Thunderbi@109-252-75-112.nat.spd-mgts.ru) (Quit: sizeof_void34)
[21:17:26] *** Joins: oxum (~oxum@122.172.205.112)
[21:17:37] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 252 seconds)
[21:18:47] *** Joins: crm (~crm@70.120.0.94)
[21:19:50] *** Joins: Lorra (~Lorra@2001:a61:3ae0:8401:6154:47aa:9ecc:175c)
[21:19:50] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[21:21:28] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:21:30] *** Joins: independent56 (~independe@148.122.187.2)
[21:21:48] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 250 seconds)
[21:21:55] *** Joins: oxum (~oxum@122.172.205.112)
[21:22:12] *** Quits: Lorra (~Lorra@2001:a61:3ae0:8401:6154:47aa:9ecc:175c) (Client Quit)
[21:28:46] *** Quits: alicebudda (~alicebudd@cold.passenger.volia.net) (Quit: Client closed)
[21:32:25] *** Quits: independent56 (~independe@148.122.187.2) (Ping timeout: 248 seconds)
[21:36:39] *** Joins: freakazoid343 (~matt@35.136.210.185)
[21:39:12] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 245 seconds)
[21:47:44] *** Joins: arcatech (~arcatech@user/arcatech)
[21:54:44] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[21:57:42] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[21:58:25] *** Joins: oxum (~oxum@122.172.205.112)
[21:59:17] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:59:58] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[22:00:27] *** Quits: aead (~aead@user/aead) (Quit: aead)
[22:02:45] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[22:03:43] *** Joins: oxum (~oxum@122.172.205.112)
[22:04:10] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Ping timeout: 240 seconds)
[22:04:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 258 seconds)
[22:06:16] *** Joins: aead (~aead@user/aead)
[22:06:30] *** Joins: fikran (~fikran@user/fikran)
[22:07:26] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:7d6b:cd6e:2c5b:359f)
[22:08:03] *** Quits: znpy (~znpy@user/znpy) (Remote host closed the connection)
[22:08:13] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[22:08:15] *** Joins: znpy (~znpy@user/znpy)
[22:14:15] *** Joins: oxum (~oxum@122.172.205.112)
[22:16:20] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[22:17:41] *** Quits: nrl^ (~nrl@209.65.131.194) (Remote host closed the connection)
[22:19:44] *** Joins: independent56 (~independe@148.122.187.2)
[22:23:56] *** Quits: aead (~aead@user/aead) (Quit: aead)
[22:24:18] *** Joins: aead (~aead@user/aead)
[22:30:48] *** Quits: aead (~aead@user/aead) (Quit: aead)
[22:31:14] *** Joins: aead (~aead@user/aead)
[22:31:19] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[22:35:14] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[22:46:47] *** Joins: fub (uid190747@id-190747.charlton.irccloud.com)
[22:47:12] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:7c8c:4b88:b1b8:70e1)
[22:47:40] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1008)
[22:49:11] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:51:41] <fub> I'm using the https://github.com/CaliDog/certstream-go lib to subscribe to cert transparency logs. Because the backend subscribes to a few sources and some of them return the same results, I do get a few duplicate certs back in a short timeframe. For example I receive a cert for the domain "foo.com" 4 times in a few seconds.
[22:51:58] <fub> Im not looking for a simple in memory cache how I can preven this duplicates in my app
[22:52:52] <fub> I thought of using a [100]string, then myCache[count++ % 100] = newDomain so I can see if a new domain is contained in this "cache".
[22:52:56] <fub> Is there a better way?
[22:54:29] *** Joins: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de)
[22:54:39] *** Quits: menace (~someone@ppp-93-104-160-204.dynamic.mnet-online.de) (Changing host)
[22:54:39] *** Joins: menace (~someone@user/menace)
[22:54:43] *** menace is now known as Deknos
[23:02:40] *** Quits: oxum (~oxum@122.172.205.112) (Remote host closed the connection)
[23:02:46] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 250 seconds)
[23:08:36] *** Joins: oxum (~oxum@122.172.205.112)
[23:09:45] *** Joins: hexfive (~eric@50.35.83.177)
[23:13:07] *** Quits: oxum (~oxum@122.172.205.112) (Ping timeout: 252 seconds)
[23:13:39] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[23:14:34] *** Joins: preyalone (uid21561@id-21561.highgate.irccloud.com)
[23:15:05] <preyalone> Help, I want to update my go.mod file to v1.17 format. However, that breaks cgo?
[23:15:08] <preyalone> https://github.com/mcandre/octane
[23:27:07] *** Quits: Lutin (~Lutin@user/lutin) (Quit: Lutin)
[23:27:18] <A_Dragon> You're gonna need to provide some more information than just "It doesnt work"
[23:30:53] <preyalone> cgo complains that it can no longer find the native C/C++ headers. The only thing that changes is the version of Go specified in the go.mod file.
[23:31:28] *** Quits: independent56 (~independe@148.122.187.2) (Remote host closed the connection)
[23:33:13] <preyalone> it breaks as soon as "1.13" changes to "1.14", and is not fixed with "1.15", "1.16", or "1.17"
[23:33:44] <preyalone> somehow, the 1.14 go mod file format causes go install to fail
[23:33:50] <A_Dragon> Please provide a complete error message
[23:34:04] <A_Dragon> and how exactly are you invoking cgo
[23:35:18] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:37:22] <preyalone> https://www.irccloud.com/pastebin/bSYaLBLl/
[23:37:57] *** Quits: DM4307842 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[23:38:17] *** Joins: DM43078421 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[23:39:13] <Tv_> preyalone: that's a broken vendoring setup, in a go modules world
[23:39:35] <Tv_> get rid of the submodule stuff
[23:40:00] *** Joins: arcatech (~arcatech@user/arcatech)
[23:40:46] <preyalone> you are referring to a broken go module setup in the gomidi dependency tree, or in octane?
[23:42:14] <preyalone> What Go release section in v1.14 documents this difference in path resolution for cgo?
[23:43:10] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:7d6b:cd6e:2c5b:359f) (Ping timeout: 240 seconds)
[23:45:13] <Tv_> octane is the one in charge
[23:45:20] <Tv_> it's not about cgo
[23:45:33] <Tv_> it's that the vendored version does something different than the one found without vendoring
[23:45:47] <Tv_> and as far as go-with-modules is concerned, the submodules don't count as vendoring
[23:46:29] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:47:13] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[23:48:58] *** Joins: Torr (~Torr@user/torr)
[23:51:01] <preyalone> So I recently migrated my former git submodules completely to go mod. The vendor directory is entirely managed by go mod.
[23:51:10] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1008) (Ping timeout: 240 seconds)
[23:51:40] <preyalone> I still don't understand why changing the file format from 1.13 to 1.14/15/16/17 results in compilation breaking.
[23:52:31] <preyalone> Can you prove that git submodules are still lingering? As far as I know, the new vendor directory is entirely go mod vendor.
[23:52:34] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:6842:2561:4bd0:74d)
[23:52:38] <Tv_> look at the github repo?
[23:53:36] *** Quits: Torr (~Torr@user/torr) (Client Quit)
[23:55:01] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:57:11] *** Joins: arcatech (~arcatech@user/arcatech)
[23:58:00] <preyalone> Alright, I have updated the master branch, removing all old submodule files and ensuring go mod vendor.
[23:58:07] *** Quits: mei (~mei@user/mei) (Quit: mei)
[23:58:19] <preyalone> Submitted a new update-go-mod-format branch with the file format changed to 1.14. Same error.
[23:59:26] <Tv_> so you had two alternates, A and B, that behaved different. you've made a new alternate, C, that is like B but with files vendored instead of fetched as modules. that still doesn't make it A.
