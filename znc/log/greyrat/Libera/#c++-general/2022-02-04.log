[00:01:08] <rpav> err, actually can't you just auto& here
[00:03:07] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[00:06:09] <PJBoy> you could absolutely use auto& there
[00:06:40] <rpav> or auto&& .. the problem i think is more an issue with the C<T> form when you need to care about T
[00:06:47] <rpav> and not as a simple return
[00:06:52] *** Quits: adder` (~adder@user/adder) (Read error: Connection reset by peer)
[00:07:07] *** Joins: joilerv_ (~joilerv@135.129.250.144)
[00:07:12] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[00:08:21] *** Joins: adder` (~adder@user/adder)
[00:08:34] *** Joins: jkl (~jkl@user/jkl)
[00:10:29] *** Quits: joilerv (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:11:35] *** Quits: jkl (~jkl@user/jkl) (Client Quit)
[00:13:01] *** Joins: jkl (~jkl@user/jkl)
[00:14:13] <OnlineCop> If I've got `for (auto single_struct : collection_of_struct) {}` where `single_struct` is only being read from, not written to, does the compiler treat it the same as `for (const auto& single_struct : collection_of_struct) {}` ?
[00:14:29] <rpav> no
[00:14:31] <OnlineCop> (collection_of_struct is not a const)
[00:14:44] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[00:14:45] <rpav> it makes a copy
[00:14:56] <OnlineCop> Alright; thanks. I'll revise my code.
[00:15:06] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:15:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[00:15:12] <rpav> generally always `for(auto&& ...` for range-based for
[00:18:16] <OnlineCop> If I have `for (auto foo : const_foos) { foo.abc = 123; some_other_collection.push_back(foo); }` then would `for (auto&& foo : const_foos) {...}` still allow 'foo' to be a non-const copy?
[00:18:35] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[00:18:52] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[00:19:21] <PJBoy> nah
[00:19:30] <PJBoy> `auto&&` would resolve to `const T&` for some T
[00:19:54] <OnlineCop> Okay, so for those, `auto` would be better than `auto&&`?
[00:20:10] <PJBoy> better as in necessary, yeah
[00:20:41] <PJBoy> this is commonly the case with const_foos being an std::initializer_list
[00:21:15] *** Quits: joilerv_ (~joilerv@135.129.250.144) (Ping timeout: 256 seconds)
[00:21:23] <PJBoy> { for (auto&& t : {3}) cout << TYPE<decltype(t)>; }
[00:21:24] <geordi> const int&
[00:21:28] <rpav> yeah if you _want_ a non-const copy, then `auto` all the way
[00:21:38] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:22:27] <pulse> auto&&&
[00:22:57] <c4017w_> Is there anyway around a problem like this, short of removing the #define or renaming the enum key? https://wandbox.org/permlink/rbtlIAVYYNBa5lmr
[00:24:05] <CarloWood> Why can't you use #undef OK ?
[00:24:42] <BurumaSerafuku> macros :(
[00:25:30] <c4017w_> CarloWood, does that only undefine it in the current file?
[00:25:46] <CarloWood> sure
[00:26:01] <PJBoy> sure?!
[00:26:04] <PJBoy> I dunno about that
[00:26:23] <CarloWood> If it's a .cpp file.
[00:26:45] <PJBoy> ok yeah
[00:26:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:27:07] <c4017w__> well, it compiles. Good enough for me
[00:27:11] <PJBoy> would affect headers that you include after the undef ofc
[00:27:22] <c4017w__> yeah, I put it after all the includes
[00:27:30] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[00:27:34] *** Joins: galik (galik@gateway/vpn/airvpn/galik)
[00:27:48] <pulse> !compiles
[00:27:50] <nolyc> It compiles?! SHIP IT!!
[00:27:52] <CarloWood> If you'd need the macro and the enum at the same time - then it is more complex.
[00:28:31] *** Quits: Deneb (~johnch@23.143.9.51.dyn.plus.net) (Quit: Leaving)
[00:28:32] <CarloWood> I am not sure you can save the contents of the macro and then undef it...
[00:28:57] <CarloWood> You could use a different TU though :P
[00:28:59] *** Joins: RabidToaster1 (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[00:29:15] <CarloWood> But if you need it to be inlined... Hmm.
[00:29:32] <c4017w__> Luckily I don't. Some third party code just defined it in a header that gets included everywhere...
[00:29:42] *** Quits: paul424 (~tom@ip-5-172-232-177.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:30:13] <CarloWood> That is pretty stupid of them.
[00:30:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[00:31:11] <CarloWood> That is SUCH bad practise that I am wonder why you'd want to use their code :/
[00:31:19] <CarloWood> wondering*
[00:31:47] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[00:31:47] *** RabidToaster1 is now known as RabidToaster
[00:33:57] <c4017w__> I was contracted to build a utility around part of their 20 year old code base, fun times
[00:38:07] <CarloWood> c4017w__: I can imagine the actually use the macro then?
[00:38:10] <CarloWood> they*
[00:38:28] <CarloWood> Like... somewhere they have:   if (button == OK) ...
[00:38:55] <CarloWood> Hmm, nevermind - you use an enum class
[00:40:58] <c4017w__> They use it internally of course, but I wanted to create by own ERR enum just for this utility. The fact that `OK` was exposed in common headers that I need to include is what caused the problem
[00:43:55] <Alipha> OnlineCop: you probably want `some_other_collection.push_back(std::move(foo));` also
[00:48:56] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[00:55:54] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[00:57:09] <CarloWood> Does an initializer list take arbitrary arguments and preserve their type?
[00:57:45] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:58:21] <CarloWood> It sounds like it can only take one type :/
[00:58:35] <kalven> well.. yeah, it's initializer_list<T>, not T...
[00:58:40] <Alipha> it only takes one type
[00:59:11] <CarloWood> I have this `create` function that also already has default arguments:
[00:59:19] <CarloWood> application.create_root_window<WindowEvents, SingleButtonWindow>({150, 50}, LogicalDevice::root_window_cookie1, *logical_device, "Button");
[00:59:47] <CarloWood> That creates an instance of type `SingleButtonWindow`, which is a user class (derived from a known class).
[01:00:14] <CarloWood> Now I wish I could pas arbitrary arguments for the constructor of `SingleButtonWindow` (or whatever the type is)
[01:00:28] <CarloWood> I thought, it would be cool if one could do:
[01:00:46] <CarloWood> application.create_root_window<WindowEvents, SingleButtonWindow>({150, 50}, {arg1, arg2, arg3}, ...
[01:01:06] <CarloWood> Aka - pass a list of arguments as a single argument to this function.
[01:01:07] <Alipha> std::make_tuple :-)
[01:03:10] <Alipha> that's hard to read code though. you're basically passing a crap ton of parameters to a function without any indication of what they are
[01:03:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[01:04:51] <CarloWood> You can always look at the function declaration for that. Doesn't need to be visible where you call it?
[01:06:35] <kalven> having stuff be obvious at the call site makes it easier to understand
[01:11:19] <Alipha> look at the function declaration and then look at the constructors for each of the parameters?
[01:13:09] *** Joins: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr)
[01:13:09] *** Quits: Uswald (~leandre@2a01cb040075f900c9d271e7359ac219.ipv6.abo.wanadoo.fr) (Changing host)
[01:13:09] *** Joins: Uswald (~leandre@user/Uswald)
[01:14:19] <Alipha> but yes, what kalven said. i don't want to have to hover over each function call when reading code to understand what it does.
[01:15:31] *** Quits: robod34 (~Username@79.113.227.62) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:16:56] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[01:17:20] <Alipha> bool parameters is another thing that i dislike. you end up having function calls that look like: `create_user("bob@email.com", false, true, true);` instead of `create_user("bob@email.com", admin::yes, status::active, send_invite::yes);`
[01:17:33] <Alipha> named parameters would help
[01:17:38] <kalven> yep
[01:17:44] *** Quits: magla (~gelignite@d536277f.access.ecotel.net) (Quit: Stay safe!)
[01:18:15] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[01:18:56] <CarloWood> I suppose there isn't an easy back from tuple to actually calling the constructor?
[01:19:05] <CarloWood> { foo(make_tuple(3.14, 42)); } void bar(double d, int i) { cout << d << ' ' << i; } template<class... Types> void foo(std::tuple<Types...> args) { bar(std::get<0>(args), std::get<1>(args)); }
[01:19:06] <geordi> 3.14 42
[01:19:24] <CarloWood> This works, but now I had to hardcode get<0> and get<1> in.
[01:19:44] <PJBoy> yeah there's make_from_tuple
[01:19:48] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:20:08] <PJBoy> only caveat being that you need to know the concrete type you want to make
[01:20:12] <kalven> what's the point of this little maneuver?
[01:20:22] <PJBoy> otherwise you gotta use std::apply and parameter pack expansion
[01:21:45] <CarloWood> PJBoy: I need to create it on the heap
[01:22:03] <CarloWood> I suppose I can move it
[01:22:03] <PJBoy> makes no difference to me
[01:22:41] <CarloWood> new Foo(make_from_tuple(std::move(t)));  and have a Foo(Foo&&)
[01:23:11] <CarloWood> That's going to end up as a copy, but ok :P.
[01:23:44] <kalven> and why are we constructing from a tuple again?
[01:24:07] <PJBoy> oh you meant like that
[01:24:44] <PJBoy> well you can roll your own make_from_tuple_new
[01:25:29] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:26:35] <PJBoy> something like `template<typename T> auto make(auto arg_tuple) { return apply([](auto&&... args) { return T(forward<decltype<args>>(args)...); }, move(arg_tuple)); }`
[01:26:40] <PJBoy> except I forgot to write `new`
[01:27:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:28:01] <yolo> any blog on "common methods to deal with errors inside dtor as you really don't have other options"
[01:28:42] <CarloWood> It should be impossible that there are errors inside a dtor.
[01:28:57] <CarloWood> It takes down the object in whatever state it is.
[01:29:38] <PJBoy> https://isocpp.org/wiki/faq/exceptions#dtors-shouldnt-throw if that counts
[01:29:53] <yolo> so far: 1. at least log them.   2. dtor errors for resource deallocation is bad but in practice might not be fatal enough to abort()/exit(1), so let it be and cross your fingers one week later(e.g. memleak)
[01:30:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:30:43] <PJBoy> std::thread is a notable example of a dtor that can fail
[01:30:52] <PJBoy> and it takes down the whole program
[01:30:53] <yolo> PJBoy: that explains you should never throw, but nowhere on books/internet provide some 'common approach' on how to deal with dtor-errors
[01:31:03] <PJBoy> true
[01:31:34] <CarloWood> I can't think of a single class that I ever wrote that can fail in its dtor :/
[01:31:42] *** Joins: markong (~kvirc@213.146.188.203)
[01:31:49] <yolo> yes thread join could fail dtor, but i saw no 'workaround' other than bail-out/abort it
[01:31:50] <CarloWood> So there is no 'common approach' :P
[01:32:05] <PJBoy> I agree with what you already wrote
[01:32:08] <PJBoy> log and forget
[01:32:16] <PJBoy> but I don't know of any blog posts on the subject
[01:32:25] <yolo> ok thanks. just to make sure i did not miss anything basic
[01:32:51] <Alipha> yolo: what are you doing in a dtor that might throw?
[01:33:15] *** Joins: badone (~badone@209.132.189.152)
[01:33:44] <PJBoy> maybe reddit's discussed it
[01:34:04] <PJBoy> although reddit discussions :/
[01:34:17] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:34:52] <CarloWood> I still think that it is per definition impossible to fail.
[01:34:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:35:00] <PJBoy> https://www.reddit.com/r/cpp_questions/comments/ih67kl/how_to_handle_failing_destructors_if_i_cant_throw/ for example
[01:35:16] <PJBoy> well std::thread's dtor can fail
[01:35:25] <PJBoy> in spectacular fashion
[01:35:44] <PJBoy> hey you posted in that thread Carlo
[01:35:48] <PJBoy> good for you
[01:35:49] <CarloWood> If it would fail, then the object and/or program is in an inconsistent state, which is just a bug - so crashing or asserting is completely ok and should never happen.
[01:35:56] <Alipha> This is probably a horrible idea, but what about a language feature where you can have multiple exceptions being handled at the same time? Like, if Foo and Bar are thrown, unwind until either catch(Foo) or catch(Bar) is reached. Execute the catch block, and then automatically throw the other exception that hasn't been handled yet
[01:36:49] <kalven> I feel you are going in the wrong direction
[01:36:54] <Alipha> Lol
[01:37:09] <rpav> how would multiple exceptions _occur_
[01:37:24] <rpav> like you can already handy <Ts...> exceptions
[01:37:40] <Alipha> rpav: when a dtor throws an exception while another exception is already being handled
[01:37:45] <rpav> Alipha: ahh right
[01:38:06] <rpav> Alipha: probalby the better way to handle it is top-of-stack handling rather than unwind-handling
[01:38:56] <yolo> i will live with log/forget or log/assert-abort based on how serious the errors are for now
[01:39:00] <rpav> if "error occurs" doesn't unwind it, and error_handler(T) runs and has its _own_ error, then you still have error_handler(T1) bound and it will occur on top of that, without unwinding or losing anything or having to just give up and die
[01:39:03] <Alipha> And if a catch can handle both Foo and Bar, eg, catch(std::exception), then first run the catch block with Foo and then rerun it with Bar :-)
[01:39:04] <kalven> you know they changed `bool uncaught_exception()` to `int uncaught_exceptions()`
[01:39:30] <PJBoy> yolo sensibly noping out of the discussion before his brain's dtor executes
[01:39:41] <rpav> (this works; it's how CL conditions work, and they work _very_ well)
[01:39:57] *** Quits: proller (~p@2a02:6b8:b081:a405::1:19) (Ping timeout: 240 seconds)
[01:40:12] <Alipha> yolo: if you're doing abort, you might as well just throw an exception. Then it'll only abort some of the time ;-)
[01:40:21] <yolo> actually i'm in another question but don't want to distract the new invention of dtor-exception here
[01:40:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:41:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:42:04] <yolo> checking stdlib methods(e.g map::insert, string::getline,etc), like manpages they have a "return" section, plus an "Exceptions" of c++, question is, seems many methods are only throwing exceptions for errors and the returns are not a  guarantee to check errors, so is it still sane to avoid exceptions
[01:42:07] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:42:07] *** ChanServ sets mode: +v npaperbot
[01:42:32] <rpav> actually i wonder if you could "reuse" exceptions for _recovery_ / post-error-flow-control and implement top-of-stack handling with nothing special
[01:43:19] * yolo wants to figure out exceptions and error-checking in c++ once for all
[01:43:30] <PJBoy> exceptions still a hot topic
[01:43:34] <rpav> e.g. you have register<SomeError>(fn...); and register<OtherError>(fn2...); .. and error<T>(); calls the appropriate registered function
[01:43:43] <PJBoy> but yeah you'd be insane to avoid exceptions from stdlib
[01:43:56] <rpav> then `throw recover<T>();` if appropriate and catch() where you want to pick up and continue
[01:43:57] <PJBoy> within your own code, it's much more debatable
[01:44:07] <yolo> then how does many projects(google,llvm,etc) can do without exceptions?
[01:44:15] <CarloWood> What I do is throw an exception when something fails. I don't are where I am. Then when I start running into those (uncaught) exceptions in the further I'd add code to recover :P.
[01:44:19] <PJBoy> they assume errors don't exist
[01:44:30] <PJBoy> and they're fine with their program crashing if they do
[01:44:32] <CarloWood> The "problem" is - they never throw... so I never add recovery.
[01:44:56] * yolo wish all stdlib methods have a nothrow version, e.g. support both throw and return-error
[01:44:58] <CarloWood> don't care* where
[01:44:58] <PJBoy> more or less the opposite approach that I have
[01:45:57] *** Quits: jsbach (~jsbach@2a01:c22:a40c:d700:4679:1947:b982:eeb8) (Ping timeout: 240 seconds)
[01:46:14] <PJBoy> you always have to consider the case of constructors and operators failing too
[01:46:27] <PJBoy> unless you avoid constructors and operators
[01:46:35] <yolo> i will use a flag to check ctor errors
[01:46:42] <PJBoy> the trifecta of things to ignore in C++
[01:46:43] <yolo> dtor will log or abort
[01:46:47] <rpav> the flag thing is so terribl eheh
[01:46:53] <yolo> but the stdlibs do not provide error-returns bother me
[01:46:59] <CarloWood> Sounds like my approach though: I consider ANY error to be unacceptable to the point that the correct assumption is that they don't exist; because if they do exist they have to be fixed immediately so that they don't exist.  Hence, I encounter every error (if they exist) once and then fix them. That means that recovery code is bullshit. Let it crash.
[01:47:02] <PJBoy> and operators?
[01:47:22] <rpav> if you _really_ want to check, use some kind of factory and return optional<T> or something
[01:47:28] <PJBoy> suppose I do `string concat(string x, string y) { return x + y; }`
[01:47:36] <PJBoy> and string::operator+ fails
[01:47:39] <PJBoy> which it can do
[01:48:47] <rpav> presumably calling that function could fail before it enters the function
[01:49:00] <PJBoy> it could
[01:49:06] <PJBoy> the string ctors can fail
[01:51:31] <PJBoy> so in yolo's world I'd have to write something like `string concat(string x, string y) { if (x.failed() || y.failed()) { string ret; ret.setfail(); return ret; } return x + y; }` or some such
[01:51:45] <PJBoy> or maybe use an error return code?
[01:51:53] <PJBoy> but that would be inconsistent, because string already has a fail state
[01:52:32] * yolo refuses to board any aircraft that runs any c++ code from now on
[01:52:41] <PJBoy> man that's a lot of error checking you'll have to do
[01:52:49] <PJBoy> and no static analysis will tell you do to it
[01:57:38] <Alipha> Not really feasible in c++, but another such language could have objects with a fail state where any operations performed on objects in a fail state are just not done. Like how ostream/istream works
[01:58:21] <Alipha> So you could attempt to do a bunch of operations and then only check at the end whether those operations succeeded
[01:59:19] *** Joins: proller (~p@2a02:6b8:b081:a403::1:35)
[02:01:19] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[02:04:11] <CarloWood> How is this working? https://wandbox.org/permlink/xuzh2GlVfbvzn80F
[02:04:29] <CarloWood> Shouldn't new T(make_from_tuple<T>(std::move(args))); use the copy or move constructor of T?
[02:06:16] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[02:06:26] *** Joins: joilerv (~joilerv@135.129.250.144)
[02:06:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:07:31] *** Quits: joilerv (~joilerv@135.129.250.144) (Client Quit)
[02:15:27] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77)
[02:21:49] <Alipha> CarloWood: interesting. No, it doesn't, actually. A new expression performs direct initialization, like `T x = T(args);` is really the same as `T x(args);`
[02:22:52] <Alipha> https://en.cppreference.com/w/cpp/language/direct_initialization The first bullet under "If T is a class type,"
[02:23:30] <Alipha> And note `new T(args,...)` is (5) at the top
[02:25:52] *** Joins: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com)
[02:27:53] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:28:11] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:28:13] <BurumaSerafuku> my eyes +__+
[02:28:26] <BurumaSerafuku> why they love to overcomplicate C++?
[02:29:04] <yolo> because it's designed by Phd and professors?
[02:29:15] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:30:47] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:31:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[02:31:21] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Read error: Connection reset by peer)
[02:31:35] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:32:46] <BurumaSerafuku> yolo: I was talking about the users. especially that code snippet pasted by CarloWood
[02:33:46] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[02:35:17] <PJBoy> new T(makeT()) does call the move ctor though
[02:35:36] <PJBoy> or does it get copy elided
[02:36:10] <yolo> trying to understand error-handling in c++ for a few days now, final conclusion: it's a mess, people split on exception yes/no is like 50:50, many just ignore errors and let it crash, my hope in the end: adding Result support to all stdlib methods, make it exception/result ready so you can pick.
[02:36:44] <PJBoy> it does get copy elided
[02:36:47] <PJBoy> nice
[02:39:20] <BurumaSerafuku> yolo: it will get better when they finally realize that herb sutter was right
[02:39:26] <BurumaSerafuku> with his value-based exceptions
[02:40:49] <yolo> try-catch also is not easy to do for async/promise/future erro-catching i feel, but i don't do async code much
[02:41:03] <BurumaSerafuku> async is fine with exceptions
[02:41:18] <BurumaSerafuku> they go into the shared state
[02:45:45] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Ping timeout: 276 seconds)
[02:46:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[02:49:52] <c4017w__> What's the rule about argument parsing order called that causes this to fail? https://wandbox.org/permlink/MzCZpmjvALbueE35
[02:52:47] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 256 seconds)
[02:54:25] *** Quits: joilerv (~joilerv@host86-191-117-90.range86-191.btcentralplus.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:56:53] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:02:37] *** Joins: ferdna (~ferdna@user/ferdna)
[03:04:33] <PJBoy> the arguments can be evaluated in any order
[03:04:41] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[03:04:51] <PJBoy> as per rule 15 of https://en.cppreference.com/w/cpp/language/eval_order
[03:08:05] *** Quits: ivii (~ivan@user/ivii) (Quit: Konversation terminated!)
[03:09:30] *** Joins: ivii (~ivan@user/ivii)
[03:13:02] <c4017w__> PJBoy, thanks, exactly what I was looking for
[03:13:28] <PJBoy> :)
[03:14:52] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:17:24] *** Joins: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b)
[03:20:31] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4ce:a69e:9f8:9f77) (Quit: Konversation terminated!)
[03:20:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:21:06] *** Joins: c4017w (~c4017@209.52.68.8)
[03:24:37] *** Quits: c4017w_ (~c4017@2605:8d80:4c0:3dca:59b7:9ca3:e0f:776b) (Ping timeout: 240 seconds)
[03:47:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:53:11] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[03:54:39] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[03:59:39] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:07:11] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:11:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:21:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[04:23:35] *** Quits: proller (~p@2a02:6b8:b081:a403::1:35) (Ping timeout: 250 seconds)
[04:24:55] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:32:53] <smallville7123> rpav: 00:04:54 PJBoy: `vec[vec.begin()]` hopefully doesn't compile
[04:40:21] <norias> i'm discovering that surprising things compile in C++ that i would not have considered
[04:48:56] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326)
[04:48:56] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:98cc:a9d4:b3c7:1326) (Changing host)
[04:48:56] *** Joins: skapata (~Skapata@user/skapata)
[04:49:27] <smallville7123> norias: o.o
[04:49:46] <smallville7123> welp so far i have this :)    https://gist.github.com/mgood7123/755354561ea87a43ffdea4fa0909cfbe
[04:49:56] <rpav> norias: if you weren't, you wouldn't be c++-ing enough
[04:50:22] <norias> rpav: that's fair.
[04:50:40] <norias> i'm reading about the C++ object model and poking at things as i go
[04:50:58] <norias> the relationship between structs and classes in C++ has been a bit surprising for me
[04:51:23] <norias> i had a couple, "nuh uh... well, shit. that works." moments
[04:52:04] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:52:19] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:55:05] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[04:55:15] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:55:23] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[04:57:27] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[04:57:38] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[05:00:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:02:08] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[05:02:30] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[05:08:59] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:09:02] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:11:42] <smallville7123> and function arguments now expand correctly :)    (updated gist)
[05:13:37] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[05:14:21] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[05:16:35] <kalven> amazing
[05:16:53] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[05:17:30] <Alipha> !struct
[05:17:32] <nolyc> The only difference between classes and structs is that the former default to private members and bases, while the latter default to public members and bases.
[05:17:46] <Alipha> norias: ^
[05:21:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[05:22:44] <norias> i'm not certain that's 100% accurate
[05:22:56] <norias> a struct has no private members
[05:25:33] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:26:05] <Alipha> {} struct foo { private: int x; }; // norias, legal
[05:26:05] <geordi>  
[05:28:00] <norias> well, i'll be damned
[05:28:41] <norias> it certainly compiled for g++ ( not that it's the official test)
[05:30:07] <Alipha> norias: structs can have member functions, virtual member functions, inherit from other structs/classes or be inherited from
[05:31:17] <norias> huh
[05:31:27] <norias> that seems to defeat the purpose
[05:31:54] <norias> what then is the difference between a struct and a class?
[05:33:29] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:41:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:42:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:42:06] *** ChanServ sets mode: +v npaperbot
[05:45:46] <Alipha> norias: structs default to public access. classes default to private
[05:51:17] <norias> hmpf
[05:58:57] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:00:36] <smallville7123> a C++ struct is not the same as a C struct
[06:02:05] <Alipha> Really, c++ never should have added the class keyword and just use struct instead :-)
[06:02:20] <smallville7123> norias: a struct CAN have private members if you explicitly state private: just like you need to explicitly state public: in a class
[06:05:02] <smallville7123> if an unordered_set of copied does its contents stay the same but in a different order?
[06:06:12] <smallville7123> eg        auto a = b; // the order of A and B contents are likely to be different
[06:07:39] <smallville7123> eg    auto * V = &a.find(key)->second;      auto b = a;    a = b;     // V has likely now changed from its original value
[06:12:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:22:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[06:25:27] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46)
[06:26:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[06:29:04] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a151:152f:1fb7:8c9f) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:32:51] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6)
[06:32:51] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:d5bc:cd42:61f6:70c6) (Changing host)
[06:32:51] *** Joins: skapata (~Skapata@user/skapata)
[06:33:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:34:26] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:40:23] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[06:41:41] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:44:01] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:59:40] *** Joins: adeliktas4 (~adeliktas@i59F52850.versanet.de)
[07:01:17] *** Quits: adeliktas (~adeliktas@i59F4A09F.versanet.de) (Ping timeout: 240 seconds)
[07:01:17] *** adeliktas4 is now known as adeliktas
[07:05:24] *** Quits: ville (~ville@user/ville) (Quit: ville)
[07:06:52] *** Joins: Emet-Selch (~haise01@user/haise01)
[07:07:57] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[07:08:33] *** Joins: ville (~ville@user/ville)
[07:08:37] *** Joins: Donno (~donno@58.84.206.182)
[07:09:37] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[07:11:16] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:11:35] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:19:20] <hnOsmium0001[m]> today I leraned std::vector value initializes its elements
[07:19:20] <hnOsmium0001[m]> > https://en.cppreference.com/w/cpp/named_req/DefaultInsertable (that is, value-initialize the object pointed to by p)
[07:19:42] <hnOsmium0001[m]> I've always thought it default initalizes the elements, so getting a zeroed vector would require passing 0 to the constructor
[07:22:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[07:23:38] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[07:24:30] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:24:30] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[07:25:22] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Client Quit)
[07:26:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[07:37:20] <smallville7123> ok, now i have this https://gist.github.com/mgood7123/9e87109738a0500b6e70e2dc45a0b089 :)
[07:38:29] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dd48:37e7:aeeb:3a31) (Quit: Quit)
[07:43:14] <johnny> i'd rathe they added class and then not allow you to use a struct like a class (beyond what you could do in C)
[07:44:05] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:49:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[08:12:30] <yolo> a bit down for me today after a few months into c++,i'm disappointed with error handling, that I'm forced to use exceptions, but embedded c++ does not really like that. i'm back to checking at some of my old ood-in-c code now :(, at least libcurl and linux kernel do ood-in-c and they're "fun"
[08:13:12] <yolo> s/fun/fine
[08:13:35] <smallville7123> https://gist.github.com/mgood7123/4925156426e3250c3d5f384d17de15b1 :)
[08:17:32] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:21:50] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[08:23:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[08:26:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[08:27:59] <ville> yolo: you are not forced to use exceptions. of course choosing to exclude some aspect of a language ecosystem comes at a cost
[08:30:01] <ville> so perhpas a good time try to estimate what the cost is and based on it 0) not use exceptions 1) accepted and use exceptions 2) opt for different language as options come to mind
[08:31:30] <ville> err accept
[08:31:55] *** Joins: emerent_ (~quassel@p200300cd57044366ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:55] *** Quits: emerent (~quassel@p200300cd5704437cba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (mercury.libera.chat (Nickname regained by services)))
[08:31:55] *** emerent_ is now known as emerent
[08:36:00] <yolo> i will use c++ for exception-ok projects, but back to c for embedded stuff, was thinking using c++ do both(embedded and non-embedded). in my case, systemc project will still be c++/exceptions.  nothing lost, just not as ideal as i expected.
[08:36:45] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:36:47] <yolo> was not aware stdlib is exception-only
[08:38:05] <Alipha> ville: a lot of your code uses a Result type, right?
[08:38:47] <InPhase> You can certainly use exceptions on embedded systems.
[08:39:43] <InPhase> Now not all embedded systems.  There are still tiny pocket calculators.  But the capabilities of low cost embedded systems has crept upward the same as all other computing hardware.
[08:39:56] <ville> Alipha: all of it
[08:40:22] <yolo> ville: but you still can not do -fno-exceptions due to the fact you need libstdc++ anyways
[08:40:39] <yolo> but for non-stdlib code yes Result is great
[08:40:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:41:00] <Alipha> ville: do you have some pattern for constructing objects? Like factory functions that construct an object and then calls an init function which may return an error code?
[08:42:22] <ville> Alipha: i've brought up it before, it's just functions of course since can't have return types on ctors. they look like: struct aa {/* stuff */}; result<aa, err> aa_new(/*param list*/);
[08:43:41] <ville> and the last parameter is an alloator if the type does allocations or its construction needs allocations. not c++ standard library allocator, more like standard library memory resource
[08:45:25] <ville> if i need a copy then it's result<aa, err> aa_new_copy(aa const& r); and so on. turns out you don't want to be copying things that often anyway. move-only gets you pretty far and who writes types with move operations that can fail?
[08:46:06] <ville> err copying things that can fail during copying
[08:47:39] <ville> yolo: no need to adandon the language to not to use its standard library. write your own containers. you'll get away with just a dynamic array and hash table 93.883% of the way anyway
[08:48:12] <ville> that's <500 lines of code
[08:55:03] <ville> switching to c and missing out dtors is just too big of a cost for me. i suppose if you opt to use some kind of defer mechamism in c you can be alright, but that's an experiment i've not tried
[08:56:07] <yolo> that's just the STL part(container), what about other non-STL APIs, the io, strings, thread...i think they're also exception "only"
[08:56:40] <ville> you can still use the c headers either the .h or the non-.h ones
[08:57:12] <yolo> c_func(&my_struct,myargs) can do dtor manually, not as good as automatic dtor, but at least you can have the manual one
[08:57:37] <ville> it's the automatic part that is the killer feature
[08:58:42] <yolo> so, for embedded, c++ + cstdlib + contains-of-your-own? this way you have a c with ctor/dtor?
[08:59:41] <yolo> wish there is a STL that is Result/error-code returned, EASTL can't do that either
[09:01:01] <ville> oh yeah anything i do probably doesnt apply to embedded. i program for the "desktop" most of the time, i don't do any kind of truly restricted emdedded. i guess something like atmega32u4 would be the "smallest" embedded i've tried
[09:01:45] <ville> but that's big enough that you can have an operating system and your "application" running on it
[09:02:32] <yolo> (c with ctor|dtor) = c++ + c-headers + nothrow-functions(new,delete) + your-own-container
[09:03:29] <yolo> not that bad actually, libstdc++ is about 4MB on embedded device and automatic-dtor make that extra library space worthy
[09:03:48] <ville> well i don't end up calling delete really. placement new.
[09:05:44] <ville> also if you go this route i would suggest that you make your containers to always require an allocator passed to them. don't default to anything. that'll set you up for the future where you want/need to care about the allocator as all your functions are already setup taking in an allocator
[09:06:31] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[09:06:39] <ville> so you can then fairly easily experiement on a "subsystem" how it performs with different kind of allocator, just by switching the kind of allocator you hand off to it
[09:07:01] <yolo> that makes sense for sure, custom allocator is important indeed
[09:07:07] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[09:08:50] <ville> have a "default" allocator available, so it's easy to get up and running using the system allocator. mine is just one that passes the calls to std::aligned_alloc() and free(). handful of lines implementing the allocator class
[09:09:13] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:09:34] <yolo> do you have a github repo, would like to learn if it exists, if not, no worries
[09:09:45] *** Quits: Tokamak (~Tokamak@172.58.188.214) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:09:58] <ville> no. i've been meaning to put some of it up on gitlab
[09:10:17] <ville> but it would mean writing docs. yuk! right?
[09:10:46] <yolo> not really, but if you want to make it popular then yes, at least doxygen some
[09:16:25] <ville> also don't even default the allocator parameter for any of the functions. i've found if i do that i then do poorly passing along the correct allocator. there's then always that one call where i forgot to pass in the allocator passed to this function and ended up making using the default argument allocator which was the system allocator pass-through
[09:18:10] <ville> so no: result<aa, err> ff(allocator& a = default_allocator);
[09:21:42] <yolo> http://ix.io/3OB1  there are close to 400 functions in libstdc++ that has nothrow, means they actually return error-code, filesystem seems doing it all
[09:21:59] <yolo> i mean noexcept these days
[09:23:05] <ville> filesystem is deceptive. even if you use an overload that has error_code out parameter doesn't necessarily mean the function won't throw
[09:23:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[09:24:05] <ville> ...and they were planning to use similar deceptive interface for network, which hopefully doesn't come to pass now that they are fighting over other issues with regards to networking
[09:26:41] <yolo> a grep 'noexcept' showed for c++17 and newer apis more are having noexcept
[09:26:48] <yolo> http://ix.io/3OB6
[09:27:23] <yolo> bitset, string_view, mutex, atomic...etc
[09:27:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[09:27:45] <yolo> first link is grep in the src/, second long(5000+ lines) is grepping the include/
[09:29:04] <yolo> most are operator overload though, will clean up and get a list of real api that does noexcept, for fun, and may use them safely in non-exception mode
[09:29:34] <yolo> well assuming your 'deceptive' is not that unsafe, that is
[09:31:34] <ville> sometimes the problem to get to use the noexcept function may be having to had constructed somthing that can throw in its ctor though
[09:32:59] <yolo> time for bed, thanks for the insights, very helpful and pull me back from ood-in-c
[09:33:21] <ville> but i've not really bothered to look into that: what part of c++'s standard library is noexcept
[09:34:44] <yolo> it seems all bitset, chrone, future, atomic, mutex, string. coroutine,span,... are doing that, one day might be: other than containers all can be noexcept
[09:39:54] <yolo> one day someone add a Result-STL, c++ will beat golang handly as you don't need read 1000-page on how to do exception handling correctly in c++
[09:41:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:42:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:42:08] *** ChanServ sets mode: +v npaperbot
[09:42:17] <kalven> I just -fno-exceptions and yolo
[09:45:10] <InPhase> lol
[09:45:13] *** Joins: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309)
[09:45:59] <InPhase> yolo: It's not a 1000 page problem.  Use RAII, and be ready for stack unwinding with proper destructors.  The end.
[09:46:53] <InPhase> yolo: Also, have a plan for a mix of local and mid level recovery as needed, and top level exception handling.
[09:49:37] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::46) (Ping timeout: 240 seconds)
[10:01:09] *** Quits: letto (~letto@86.120.81.105) (Quit: Konversation terminated!)
[10:03:25] *** Joins: letto (~letto@86.120.81.105)
[10:07:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:13:57] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[10:19:34] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:23:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:b910:cb62:dbba:4511) (Ping timeout: 240 seconds)
[10:24:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:26:29] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:27:55] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:33:01] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:33:27] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:36:16] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:46:57] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[10:47:18] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[10:48:29] *** Joins: Donno (~donno@58.84.206.182)
[10:53:56] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[10:59:42] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:01:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:05:57] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:07:18] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:b5d5:d73c:495d:54e2)
[11:11:01] *** Joins: hexingb (~hexingb@2409:8902:78c4:f9d2:30aa:acf9:751f:cc3d)
[11:18:56] *** Quits: Donno (~donno@58.84.206.182) (Read error: Connection reset by peer)
[11:19:35] *** Joins: Donno (~donno@58.84.206.182)
[11:24:50] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[11:24:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[11:28:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[11:29:55] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[11:39:59] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:51:24] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:58:11] *** Emet-Selch is now known as haise01
[11:58:17] *** haise01 is now known as Azem
[12:01:37] *** Quits: hexingb (~hexingb@2409:8902:78c4:f9d2:30aa:acf9:751f:cc3d) (Ping timeout: 240 seconds)
[12:02:19] *** Joins: hexingb (~hexingb@36.155.28.147)
[12:05:27] *** Joins: andreasbuhr (~quassel@p5dcf991b.dip0.t-ipconnect.de)
[12:06:38] *** Joins: p-i- (~Ohmu@mx-ll-183.89.36-208.dynamic.3bb.co.th)
[12:07:34] <xkoncek> in 30 years, did noone come up with a way to convert a string to enum without dispatching tables?
[12:08:34] <Haohmaru> i want that, and also in the opposite direction
[12:08:43] <Haohmaru> pls Santa
[12:09:19] <Haohmaru> xkoncek i was told "reflection" is gonna allow such things
[12:09:21] <Haohmaru> supposedly
[12:10:54] <xkoncek> if c++ had better handling of constexpr strings and then if there was a consteval function mapping enum -> string, then i can imagine having a reusable solution
[12:11:44] <xkoncek> reflection... if it provided that last function
[12:11:50] <xkoncek> getting identifier name
[12:12:36] <Haohmaru> very often i have some enum and something sets it, and i just wanna print it to see what it's set to.. but it gets printed as an integer
[12:12:53] <Haohmaru> this is since.. forever
[12:13:40] <Haohmaru> and i don't even think i've heard of like a gcc extension to do it.. "pls make me an array of strings for this enum"
[12:13:46] <Haohmaru> or a map or something
[12:22:28] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:25:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[12:26:59] *** Joins: robod34 (~Username@79.113.227.62)
[12:27:05] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[12:28:37] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[12:33:09] <AliceMeows> How could you give access to some internal variable to some function without breaking encapsulation?
[12:33:58] <veverak> Haohmaru: xkoncek: it does exists
[12:34:00] <veverak> https://github.com/Neargye/magic_enum
[12:34:07] <veverak> but it hase quite a nice bag of hacks to work
[12:35:26] <Haohmaru> veverak i know there are ways to make it work.. but this should've been a language feature, it's so obvious
[12:35:30] <Haohmaru> (IMO)
[12:36:15] <veverak> oh, definetly :D
[12:36:28] <veverak> but "there exists library for it" is the best we got I think
[12:36:53] <veverak> (and I do use it frequently, as on embedded enums are frequent a lot and I like to actually know the name of the value)
[12:37:21] <Haohmaru> yes, it's full of enums on MCUs
[12:37:37] <Haohmaru> so many, usually small-ish ones
[12:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[12:53:15] *** Joins: xkuru (~xkuru@user/xkuru)
[12:59:32] <ville> xkoncek: what do you propose a compiler would do internally, or emit as the runtime capability?
[13:00:00] <ville> xkoncek: so for now use macros
[13:00:02] <ville> xkoncek: of course reflection would give you the ability to automate this for the user
[13:00:18] <xkoncek> std::get_name<ENUM_VALUE> -> "ENUM_VALUE"
[13:00:26] <xkoncek> something like this
[13:00:37] <xkoncek> the returned type is more questionable
[13:00:38] <ville> xkoncek: and... it would internally use what mechanism?
[13:00:53] <xkoncek> compiler vendor's problem, not mine
[13:00:57] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:01:08] <AliceMeows> That is asking for troubles and portability issues
[13:01:12] <xkoncek> i guess the same one as it uses for comparing variable names
[13:01:20] <ville> if the enum values are contiguous, it can use lut, if it's not then it sortofkindof starts to look like it has to use a hash table
[13:01:36] <AliceMeows> Technically GCC as some extension for this
[13:01:39] <AliceMeows> has*
[13:02:10] <xkoncek> ville yes except there is a runtime difference between using a hash map [string -> object] and [enum -> object]
[13:02:10] <ville> xkoncek: would it offer a runtime lookup or just build time? sometimes it's entirely reasonable to make a runtime lookup. say you want to serialize an enum value into  afile as  string
[13:03:12] <ville> xkoncek: at any rate the solution in c++ right now is you are responsible for it. generate the code with a separate compiler or the preprocessor
[13:03:22] <xkoncek> ville what i was getting at was this use case: you read a csv. table at runtime (start of application), you have your corresponding enums and now you just want to associated the read values with that enum
[13:04:10] <ville> xkoncek: so not what you proposed: std::get_name<> template which would be compiletime only
[13:04:20] <xkoncek> you read a row, you read a string and want to assign the enum the corresponding value
[13:04:30] <ville> xkoncek: the answer is still macros
[13:04:34] <xkoncek> get_name was just a possible way to create a helper function
[13:04:39] <AliceMeows> If those values are constant then you're good but otherwise you could store pairs of values with a string in some container
[13:04:43] <Haohmaru> nooooo, no macros pls
[13:05:53] <xkoncek> at any rate there dafinitely has to be compiler support for mapping at least enums -> $enum_name
[13:06:19] <xkoncek> could return a string view or a const char*, idk
[13:06:23] <AliceMeows> If you're using gcc you could develop a plugin to help you do it
[13:06:27] <ville> of course there is. the language designers were just complete idiots and didn't think reflection was a useful thing
[13:06:45] <ville> the idea was either you use the preprocessor or a separate pre-compiler
[13:06:55] <Haohmaru> bleh
[13:07:08] <Haohmaru> or you.. manually make a LUT or $whatever
[13:07:10] <xkoncek> ville you know about the reflection proposal, is there anything like this?
[13:07:19] <ville> yes and yes*
[13:07:37] <xkoncek> now lemme see if it is accepted into c++23
[13:08:27] <AliceMeows> xkoncek: we can only hope
[13:08:40] <xkoncek> idk where to look, but found this: https://en.cppreference.com/w/cpp/experimental/reflect
[13:09:08] <ville> http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1240r2.pdf
[13:09:10] <xkoncek> by the time C++ is aged 50 it would actually make a good programming language
[13:09:50] <ville> c++ could have dropped half the crap it added on top of c and just had reflection and c++ woud have still been wildly more useful than c
[13:09:53] <AliceMeows> If it wasn't for the committee dragging their feet we would've had a lot more done by now
[13:10:02] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d142:9ff8:db64:1336)
[13:10:13] <AliceMeows> ville: I wish c++ did drop half the crap it has from C
[13:10:32] <AliceMeows> C++ needs to divorce C
[13:11:06] <ville> AliceMeows: i don't think that wouldn't have been a realistic choice to get wide adoption
[13:11:25] <AliceMeows> Unfortunately so :(
[13:11:28] <xkoncek> to the very least, it needs to be compabile with C header files
[13:11:37] *** Joins: plastico (~plastico@neomutt/plastico)
[13:11:39] <ville> xkoncek: no, not really
[13:12:58] <ville> some other languages in the works right now are working on approaches where they aren't. there're tools that will translate a c header to their language "header", but don't think the compiler eats c headers directly
[13:14:00] <ville> the tools generate the "native" langauge's version of the declarations possibly marked as "comes from c library" or something like that
[13:14:03] <xkoncek> that's another way to look at it, you are really only interested about data layout and symbol names, i believe
[13:14:44] <AliceMeows> And ABI
[13:15:16] <xkoncek> the call convention thing?
[13:15:26] <AliceMeows> Yes
[13:17:08] <TinoDidriksen> Swift is working on direct C++ interoperability, so it certainly is possible to not go via C.
[13:17:31] <AliceMeows> That sound like pain
[13:17:46] <TinoDidriksen> https://forums.swift.org/t/swift-and-c-interoperability-workgroup-announcement/54998
[13:17:53] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:19:28] <ville> https://www.twitch.tv/raphael_luba this guy is right now working in c/c++ interoperability or the jai language
[13:19:52] <ville> err for the
[13:20:25] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:22:10] *** Quits: sbrothy (~sbrothy@213.83.133.231) (Read error: Connection reset by peer)
[13:22:41] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 256 seconds)
[13:25:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:27:56] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:29:17] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[13:29:42] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:34:48] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Ping timeout: 250 seconds)
[13:40:10] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: No route to host)
[13:40:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:41:25] *** Quits: callq (~callq@2409:4062:2e9e:2081:9830:efc1:e4d2:4309) (Quit: callq)
[13:41:59] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:42:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:42:06] *** ChanServ sets mode: +v npaperbot
[13:47:17] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:54:35] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[13:55:12] <LordKalma> there isn't a language that can't load load a C dll
[13:55:19] <LordKalma> we're stuck with C
[13:55:41] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:55:48] <LordKalma> SWIG makes you a C dll that calls your crap and then wraps that on whatever target language
[13:56:05] <LordKalma> it's hilarious even, when you wrap a class from C++ to C#
[13:56:19] *** Joins: callq (~callq@49.37.43.70)
[13:56:27] *** gentooclimax is now known as climax
[13:56:37] <LordKalma> it has a C layer that deconstructs the C++ black into myclass_mymethod(myclass*) and then the C# code back into myclass.mymethod()
[13:56:38] <LordKalma> so funny
[13:56:40] <AliceMeows> In theory if C++'s abi was defined by standard then interop would've been possible
[13:57:51] <LordKalma> maybe, but C++ has difficult constructs
[13:58:07] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Read error: Connection reset by peer)
[13:58:17] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:58:20] <LordKalma> like templates and etc.. you have to compile those for some T
[13:58:27] *** Quits: callq (~callq@49.37.43.70) (Read error: Connection reset by peer)
[13:58:46] <LordKalma> I haven't looked at what shibokeh does (Qt)
[13:59:27] <LordKalma> *shiboken
[13:59:57] <LordKalma> https://doc.qt.io/qtforpython/shiboken6/ Extract information from C or C++ headers and generate CPython code that allow to bring C or C++ projects to Python. This process uses a library called ApiExtractor which internally uses Clang.
[14:00:21] <LordKalma> speaking of generation, Qt really does love generation. yesterday I learned all their class headers are generated
[14:00:26] *** climax is now known as gentooclimax
[14:00:42] <AliceMeows> Which makes it a real pain when you have to inherit from more than one class
[14:01:03] <LordKalma> QObject multiple inheritance has other problems
[14:01:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[14:01:37] <LordKalma> you can work around it when defining interfaces with signals and slots. I've done that. YOu can not use QObject on the IFoos, and just use it on the implementation
[14:01:48] <LordKalma> and then use string-bases signal connections that work thanks to the meta-info
[14:02:06] <LordKalma> but yeah, QObject being single inheritance only is a pain sometimes
[14:02:07] <AliceMeows> I've never used the string based signals because they're too slow
[14:02:20] <AliceMeows> You could always use CopperSpice instead
[14:02:42] <LordKalma> string-based signals are an extra lookup on the moc table
[14:02:45] <LordKalma> are they thaaat slower?
[14:02:50] *** Joins: joilerv (~joilerv@80.169.238.242)
[14:03:16] <AliceMeows> It will never be as fast as regular pointers
[14:03:45] <LordKalma> sure
[14:04:03] <LordKalma> but you have an event loop anyway
[14:04:32] <AliceMeows> It doesn't matter, those string based signals were just too slow for my taste
[14:04:49] <AliceMeows> I like my software fast not slow, if I wanted that I'd write it in java or c#
[14:05:10] <LordKalma> but my point is
[14:05:23] <LordKalma> I never looked into how the event loop works, perhaps you can explain it to me
[14:05:29] <LordKalma> but doesn't it have an inherent refresh rate?
[14:05:41] <AliceMeows> It depends on the host
[14:05:56] <AliceMeows> I have no idea how its implemented on linux but I do know how it works on windows
[14:06:14] <LordKalma> want to share? I'm honestly curious
[14:06:39] <AliceMeows> On windows it utilizes regular event loop the whole GetMessage thing
[14:06:48] <AliceMeows> So the rate is entirely controlled by windows itself
[14:07:12] <AliceMeows> You can however trigger it if you want to via timers for example
[14:07:12] <ville> AliceMeows: may come as a surprise to you that quake, game from 96, does string-based dispatch for its input
[14:07:17] *** Joins: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34)
[14:07:29] <AliceMeows> That is surprising
[14:07:38] <AliceMeows> How did it perform?
[14:07:49] <xkoncek> for a closed set of actions?
[14:07:58] <LordKalma> interesting, I wonder how windows handles the message loop haha
[14:08:00] <ville> AliceMeows: great?
[14:08:14] <AliceMeows> That's impressive
[14:08:18] <LordKalma> since GoldSrc comes from the Quake engine, I wonder how much legacy of that is in Half Life
[14:08:22] <LordKalma> of even in Source or Source 2
[14:09:06] *** Quits: joilerv (~joilerv@80.169.238.242) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:09:07] <ville> user-input happens so infrequently doing some hash table lookups does not even register for a cpu
[14:09:35] <xkoncek> tell that to pro starcraft players
[14:09:38] <LordKalma> wait, does Quake also have a server-side tick rate?
[14:09:50] <ville> yes
[14:09:55] <LordKalma> because in GoldSrc, whatever your FPS, the "server"/backend has a fixed tick rate
[14:10:11] <xkoncek> that makes sense
[14:10:14] <ville> xkoncek: it's still infrequent as far as a cpu is concerned
[14:10:33] <LordKalma> xkoncek, I think Quake engine devs were afraid of multiplying by delta_t hahah
[14:10:47] <ville> LordKalma: huh?
[14:10:58] <LordKalma> ville, because of the fixed tick rate, just a joke :)
[14:11:33] <ville> LordKalma: you'll multiply by delta just the delta is fixed. having non-fixed delta is a source of whole slew of issues
[14:12:23] <LordKalma> yes, I don't consider multiplying by a fixed value an operation per se. You can just of it as "ajusted values"
[14:12:30] <LordKalma> but yeah, you're right, I was only joking
[14:13:33] <LordKalma> console devs have it easy
[14:13:34] * LordKalma ducks
[14:14:00] <LordKalma> (well, they are the only knows who know the *exact* hardware the game will run on)
[14:15:29] <LordKalma> xkoncek, good think starcraft doesn't run on GldSrc or Source. 60 ticks per second is too long for their input rate
[14:15:37] <LordKalma> it's insane the stuff they do
[14:16:02] <AliceMeows> For best performance specialized code is needed built up to some spec
[14:16:48] <PJBoy> for best performance, remove all your code and write `int main(){}`
[14:17:03] <AliceMeows> Why stop there?
[14:17:13] <LordKalma> Ars Technica has a series on youtube called "war stories" with interviews with game devs from last century
[14:17:17] <LordKalma> it's amazing the stuff they do
[14:17:27] <PJBoy> maybe a call to abort would be faster
[14:17:28] <LordKalma> the one about Crash Badicoot is just amazing
[14:17:35] <LordKalma> https://www.youtube.com/watch?v=izxXGuVL21o
[14:17:47] <LordKalma> even has an extended 3h version of that
[14:18:02] <AliceMeows> You could get rid of the entire C initialization code and just have void _start() {}
[14:18:23] <LordKalma> I really recommend watching that
[14:18:24] <LordKalma> it's amazing
[14:18:48] <PJBoy> that video gets recommended to me by youtube a lot
[14:19:05] <LordKalma> Andy is a virtuoso of computer science
[14:19:18] <LordKalma> PJBoy, you have to watch it, it's so good.
[14:19:20] <PJBoy> I remember watching some of it and thinking the guy was a smug asshole
[14:20:12] <LordKalma> he's not smug, he's a virtuoso that can talk from above cause that's where he is
[14:20:41] <LordKalma> the one from the Myst devs and Thief are also pretty good
[14:20:41] <LordKalma> https://www.youtube.com/playlist?list=PLKBPwuu3eCYkScmqpD9xE7UZsszweVO0n
[14:21:17] *** Joins: hexingb (~hexingb@36.155.28.147)
[14:21:38] <PJBoy> saying it hacked the playstation is some clickbait clicky baity shit too
[14:22:54] <LordKalma> hahah he destroyed half of Sony's runtime to make room for the game haha
[14:23:11] <AliceMeows> Sound like BS
[14:23:17] <LordKalma> watch it
[14:25:05] <AliceMeows> I've got better stuff to do
[14:26:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[14:26:40] <PJBoy> I guess the sad part is that crash bandicoot wasn't even very good
[14:27:39] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[14:28:18] <Haohmaru> did someone say crash bandicoot
[14:28:39] *** Quits: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se) (Ping timeout: 256 seconds)
[14:28:46] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:615c)
[14:28:57] <PJBoy> yeah
[14:29:03] <PJBoy> that was what Kalma linked
[14:29:53] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[14:31:38] *** Joins: Modulo5k (~Modulo5k@user/modulo5k)
[14:32:04] <Modulo5k> anyone interested in collaborating in game development?
[14:32:21] <Modulo5k> I do it as a full time hobby
[14:32:57] <Modulo5k> should I ben on #c++-social ?
[14:33:00] <Modulo5k> *be on
[14:35:54] <Haohmaru> allegro?
[14:36:26] <Modulo5k> I use Allegro 5 currently, but am not dependent on it
[14:38:40] <xkoncek> std::move_only_function < great c++ naming conventions in practive
[14:38:43] <xkoncek> practice
[14:39:23] <xkoncek> tbh, still shorter than most of Java classes
[14:40:15] <LordKalma> ClassFactoryAbstractFactorySingleton
[14:41:22] <PJBoy> move_only_function is a fine name
[14:44:11] <xkoncek> i belive at some point in time, C symbol names were limited to 8 character?
[14:44:27] <PJBoy> can see why you'd think that
[14:44:32] <xkoncek> *guaranteed
[14:45:26] <xkoncek> i think i read something like that as an explanation to the weird shortened names in stdlib and unistd
[14:45:55] <PJBoy> however https://en.cppreference.com/w/c/locale/localeconv
[14:46:04] <PJBoy> 10 characters
[14:46:08] <PJBoy> checkmate
[14:46:24] <PJBoy> nah C programmers were just terrible
[14:46:35] <LordKalma> *are
[14:46:48] <PJBoy> they liked writing either `struct` or `typedef` for no reason
[14:47:04] <PJBoy> and require `void` for nullary functions
[14:47:14] <PJBoy> so many unnecessary characters
[14:47:17] <PJBoy> horrible
[14:47:17] <LordKalma> typedef bananas struct bananas; ?
[14:47:41] <PJBoy> more like typedef struct bananas bananas
[14:47:46] <LordKalma> that, sorry
[14:48:23] <PJBoy> alteratively `struct bananas typedef bananas;`
[14:49:00] <PJBoy> man I need to throw that one into the work codebase at some point
[14:50:09] <PJBoy> this one's 11 chars https://en.cppreference.com/w/c/program/sig_atomic_t
[14:50:59] <PJBoy> and I think that's longest one in C89
[14:51:32] <PJBoy> C11 has atomic_compare_exchange_strong_explicit, so all bets off the table there
[14:52:01] <PJBoy> that name genuinely sounds like 5 unrelated words strung together
[14:54:29] *** Joins: markong (~kvirc@213.146.188.203)
[15:06:26] <xkoncek> i am using that one somewhere
[15:06:39] <xkoncek> no, i am using the c++ version
[15:24:46] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Quit: arf)
[15:25:09] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[15:25:17] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 240 seconds)
[15:26:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[15:27:25] *** Quits: Modulo5k (~Modulo5k@user/modulo5k) (Quit: ChatZilla 0.10 [SeaMonkey 2.53.10.2/20211221193415])
[15:30:25] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[15:36:14] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[15:40:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[15:41:37] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:b5d5:d73c:495d:54e2) (Ping timeout: 240 seconds)
[15:42:57] *** Joins: unyu (~pyon@user/pyon)
[15:49:27] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 256 seconds)
[15:49:27] *** Joins: seninha (~seninha@user/seninha)
[15:51:31] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:51:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:52:33] *** Joins: hexingb (~hexingb@36.155.28.147)
[15:58:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[16:03:13] *** Joins: proller (~p@2a02:6b8:0:40c:bd04:d6e:3a0d:3cab)
[16:09:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[16:10:17] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:10:55] *** Joins: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de)
[16:11:12] *** Joins: Uswald (~leandre@37.35.6.200)
[16:11:12] *** Quits: Uswald (~leandre@37.35.6.200) (Changing host)
[16:11:12] *** Joins: Uswald (~leandre@user/Uswald)
[16:17:59] *** Joins: pulse (~pulse@user/pulse)
[16:24:43] *** Joins: Leone (~Leo@108.175.224.215)
[16:27:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[16:30:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[16:38:12] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[16:39:30] *** Quits: bb_eof (~bb_eof@ipservice-092-218-249-079.092.218.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:45:43] <MaddHatter> class Foo { static const void getDir(); }
[16:45:55] <MaddHatter> make sure you don't mutate that void return there
[16:46:16] <MaddHatter> (paraphrased from code I'm looking at right now)
[16:50:36] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[16:55:08] *** Joins: jsbach (~jsbach@p57bc9344.dip0.t-ipconnect.de)
[17:01:54] <leonardus> is there any case where you would want to take something like a number as a reference in a function, e.g. a double& as an argument?
[17:02:00] <rpav> MaddHatter: const void even parses?
[17:02:12] <rpav> maybe someone typo'd constexpr
[17:02:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[17:02:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[17:03:45] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[17:06:53] <ville> leonardus: out parameter
[17:07:14] <rpav> struct Const { Const *_const{}; constexpr const Const * const foo() const { return _const; } };
[17:07:25] <leonardus> ville: ah, yeah that makes sense. the concept of out parameters is still a bit new to me.
[17:07:34] <MaddHatter> common older idiom: bool GetResult(const inputarg&, double& output)
[17:07:35] <rpav> oops, foo() ought to have been const_()
[17:07:55] <MaddHatter> returns false if there is no result to get, returns true and writes to output if there is
[17:14:02] <MaddHatter> okay, apparently there was a std::experimental::expected. Whatever happened to that?
[17:27:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[17:29:31] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 256 seconds)
[17:31:27] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:31:37] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 240 seconds)
[17:31:53] *** Joins: Simplar (~Simplar@188.163.93.241)
[17:38:18] *** Joins: hexingb (~hexingb@180.212.210.25)
[17:41:06] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c)
[17:41:06] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a4f0:bded:922:563c) (Changing host)
[17:41:06] *** Joins: skapata (~Skapata@user/skapata)
[17:42:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:42:09] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:42:09] *** ChanServ sets mode: +v npaperbot
[17:43:01] *** Quits: hexingb (~hexingb@180.212.210.25) (Ping timeout: 256 seconds)
[17:43:21] *** Joins: hexingb (~hexingb@36.155.28.147)
[17:46:01] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[17:49:28] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[18:03:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:05:16] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:06:36] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:08:09] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[18:08:17] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[18:10:38] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[18:11:04] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:11:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:12:09] *** Quits: Simplar (~Simplar@188.163.93.241) (Quit: Going offline, see ya! (www.adiirc.com))
[18:18:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4) (Ping timeout: 250 seconds)
[18:27:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:fc0d:abca:2520:17e4)
[18:28:13] <PJBoy> expected is still hanging around
[18:28:31] <PJBoy> but it's bad, so hopefully it doesn't move forward too much
[18:29:42] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[18:30:27] <ville> as a person who uses a result-like i looked at it and thought: "well that's bit excessive"
[18:31:55] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:34:33] *** Joins: seninha (~seninha@user/seninha)
[18:34:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[18:35:14] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[18:37:34] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[18:40:54] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[18:51:54] *** Joins: seninha (~seninha@user/seninha)
[18:55:59] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:56:53] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:59:09] <yolo> https://basepath.com/aup/ex/uxposixipc_8cpp-source.html  this professor just wrap all posix with exceptions, it's like "i'm teaching c but I dislike it and we really should do it in the c++ way"
[18:59:37] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[19:00:11] <yolo> kalven: for -fno-exceptions do you mean rebuild stdc++ with that, or just your apps with that flag
[19:00:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:00:49] <yolo> i'm done with exceptions stuff and move on, it's what it is
[19:04:16] *** Quits: callq (~callq@2409:4062:2e9e:2081:598e:77bd:9a69:ff34) (Quit: callq)
[19:06:05] *** Quits: jsbach (~jsbach@p57bc9344.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[19:16:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[19:16:37] *** Joins: Simplar (~Simplar@188.163.93.241)
[19:22:54] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[19:25:41] <PJBoy> I wrap up posix errors with exceptions too
[19:25:57] <PJBoy> wrapping up C API using C++ stuff is a big part of C++
[19:26:02] * AliceMeows avoids exceptions like the plague
[19:26:09] <ville> PJBoy: nonsense
[19:26:17] <PJBoy> AliceMeows, are you antivax? :p
[19:26:34] <AliceMeows> Not really but how is that related? lol
[19:26:42] <PJBoy> antivaxers welcome the plague
[19:26:52] <ville> c++ wrapper functions over c functions are pretty much a waste of time
[19:27:12] <AliceMeows> That is their choice and none of my business or concern
[19:27:26] <PJBoy> it should be of your concern
[19:27:28] <ville> what you should have instead are types that help you work with any of the common kinds of c api
[19:27:37] <PJBoy> the propagation of covid affects everyone
[19:27:49] <AliceMeows> unique_ptr comes to mind and possible unique_resource
[19:27:56] <AliceMeows> possibly*
[19:28:02] <PJBoy> C APIs suck to use
[19:28:11] <PJBoy> so it makes sense to wrap them up a lot of the time
[19:28:20] <PJBoy> especially for RAII
[19:29:05] <ville> if you're not getting that out of a code generator then it's waste of time
[19:29:17] <PJBoy> and RAII is essential for exception safe code ofc
[19:29:26] <PJBoy> also for value type semantics
[19:29:43] <AliceMeows> Managing resources yourself is pain
[19:29:51] <PJBoy> yeah
[19:29:58] <AliceMeows> Also tends to be error prone
[19:30:11] <PJBoy> hurts readability
[19:30:15] <AliceMeows> Especially with early exists from functions
[19:31:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[19:32:38] *** Joins: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[19:35:25] *** Joins: amit_ (~amit@2607:ea00:117::1aa)
[19:37:37] *** Quits: temp_user_2022 (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf) (Ping timeout: 240 seconds)
[19:44:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[19:45:41] <ville> AliceMeows: write parsers very often?
[19:45:59] <AliceMeows> I've written a few, why?
[19:46:42] <ville> oh i guess that was all just a single sentence murdered by automatic enter fire
[19:46:56] *** Joins: Emet-Selch (~haise01@user/haise01)
[19:47:25] <AliceMeows> Bad habit
[19:50:17] *** Quits: Azem (~haise01@user/haise01) (Ping timeout: 240 seconds)
[19:50:38] *** Quits: p-i- (~Ohmu@mx-ll-183.89.36-208.dynamic.3bb.co.th) (Remote host closed the connection)
[19:57:09] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[20:03:34] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:03:45] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:05:00] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[20:07:25] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[20:17:04] *** Joins: sbrothy (~sbrothy@213.83.133.231)
[20:25:49] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:26:24] *** Joins: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd)
[20:26:40] *** Quits: magla (~gelignite@d5361383.access.ecotel.net) (Quit: Stay safe!)
[20:26:42] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[20:35:00] *** Quits: Uswald (~leandre@user/Uswald) (Quit: WeeChat 2.8)
[20:35:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[20:37:04] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[20:38:18] *** Quits: amit_ (~amit@2607:ea00:117::1aa) (Read error: Connection reset by peer)
[20:39:54] *** Joins: amit_ (~amit@2601:445:447f:a2f6:8bf3:cc4c:919d:bcbf)
[20:49:50] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:54:39] *** Quits: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[20:55:02] *** Joins: Munnu (~timo@81-197-122-250.elisa-laajakaista.fi)
[20:55:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:55:48] *** Joins: magla (~gelignite@d5361383.access.ecotel.net)
[20:59:59] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 256 seconds)
[21:01:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:05:05] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:05:21] *** Joins: AmR (~AmREiSa@156.207.136.200)
[21:06:57] *** Quits: proller (~p@2a02:6b8:0:40c:bd04:d6e:3a0d:3cab) (Ping timeout: 240 seconds)
[21:07:03] <computerquip> Anyone know if there's a way to build with nothing but a compile_commands.json file or is there not enough data there?
[21:08:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[21:10:13] <LordKalma> it's not enough because you'd be missing linker steps
[21:10:24] <LordKalma> among other things I guess
[21:11:01] <computerquip> Yeah, seems like that's the case now that I look. Probably a bad idea anyways...
[21:11:57] <LordKalma> yes, and since compile_commands.json is usually generated from an actual build system, it would be weird
[21:15:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:17:51] <LordKalma> https://doc-snapshots.qt.io/qt6-6.3/whatsnew63.html#qt-webengine
[21:18:01] <LordKalma> "Qt WebEngine Now builds with Python 3 instead of Python 2"
[21:18:23] <LordKalma> Finally. Does chromium finally build with py3?
[21:21:11] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[21:21:17] *** Joins: Tokamak (~Tokamak@172.58.188.214)
[21:30:20] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:31:19] <yolo> PJBoy: https://github.com/evidence/linux-onposix c++ wrapper around posix api
[21:31:44] <PJBoy> > GPL
[21:31:49] <PJBoy> I'll pass
[21:32:00] <rpav> PJBoy: maybe one slightly better way to think of it is, if the "code" is `open_all_bad_doors(); if(user's door is now open) close_it_again();`
[21:32:28] <yolo> LGPL that is
[21:32:42] <PJBoy> oh right yeah, that's not so bad
[21:32:43] <rpav> LGPL is still pretty annoying due to hosting
[21:33:22] <PJBoy> that "code" might have sparked something
[21:33:48] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:34:03] <rpav> the "secret" is the host is basically making a comment on the _entire_ state, because they know what all the doors hold
[21:34:30] <PJBoy> nah it didn't spark anything
[21:35:27] <Friithian> bah, I dont like LGPG
[21:36:11] <PJBoy> my door gets closed with a 1/n chance
[21:36:39] <PJBoy> the remaining closed door is a pick from 1/n too
[21:36:48] <PJBoy> or 1/(n-1) I guess
[21:37:27] <PJBoy> but I dunno what to make of that possible fact
[21:37:49] <Alipha> oh, apparently we moved the discussion here
[21:38:06] <PJBoy> I saw your paste though
[21:38:17] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:40:30] <Friithian> btw I don't like LGPG not because of PJ's reasons, but because it is giving ground and is not strict enough
[21:41:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[21:42:00] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:42:08] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:42:08] *** ChanServ sets mode: +v npaperbot
[21:43:11] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:43:38] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:44:54] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:45:15] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[21:45:23] <PJBoy> I didn't give any reasons >_>
[21:45:40] <PJBoy> (you are correct though)
[21:45:50] <Friithian> I assumed your reasons lol
[21:46:08] <PJBoy> yeah solid assumption
[21:46:48] <Friithian> actually, there's a non=zero chance we've already talked about thisâ€¦ I vaugely remember discussing GPL vs LGPL with someone, although that could've been literally anyone anywhere
[21:47:05] <Friithian> ss=s-s
[21:48:57] *** Quits: Fairy (~Fairy@ti0004a400-5385.bb.online.no) (Ping timeout: 240 seconds)
[21:49:57] *** Quits: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi) (Ping timeout: 240 seconds)
[21:50:56] *** Joins: seninha (~seninha@user/seninha)
[21:50:58] <AmR> Any one Know How I can get driver later for partition In WinAPI ?
[21:51:32] *** Quits: galik (galik@gateway/vpn/airvpn/galik) (Quit: Leaving)
[21:56:50] <pulse> probably this https://docs.microsoft.com/en-us/windows/win32/api/winioctl/ni-winioctl-ioctl_disk_get_drive_layout_ex?redirectedfrom=MSDN
[21:59:17] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:00:39] <AmR> I need some help about https://pastebin.com/UCg9sABR , That is my try as I can go for now. Any one Can help ?
[22:01:54] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:03:32] <Alipha> AmR: what's wrong with it?
[22:04:56] *** Joins: p-i- (~Ohmu@2403:6200:8978:7ad7:d1c7:ded6:188d:580e)
[22:05:23] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:05:43] *** Quits: hexingb (~hexingb@36.155.28.147) (Ping timeout: 256 seconds)
[22:06:37] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[22:10:10] <AmR> Alipha: I will try update it right now I finsh download wdk now.
[22:10:22] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64)
[22:10:22] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:617d:c879:3bd7:1b64) (Changing host)
[22:10:22] *** Joins: skapata (~Skapata@user/skapata)
[22:11:13] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:11:54] *** Joins: TheSchaf (~TheSchaf@pd95f17ef.dip0.t-ipconnect.de)
[22:16:21] *** Joins: seninha (~seninha@user/seninha)
[22:17:52] *** Joins: Guest36 (~Guest36@res388d-128-61-91-234.res.gatech.edu)
[22:18:48] *** Joins: Uswald (~leandre@lfbn-idf2-1-243-131.w83-202.abo.wanadoo.fr)
[22:18:48] *** Quits: Uswald (~leandre@lfbn-idf2-1-243-131.w83-202.abo.wanadoo.fr) (Changing host)
[22:18:48] *** Joins: Uswald (~leandre@user/Uswald)
[22:19:02] *** Joins: hexingb (~hexingb@36.155.28.147)
[22:20:54] <OnlineCop> I have a Doxygen formatting question. https://wandbox.org/permlink/EtYDZUYd1N3l7SDC I've got a macro that takes parameters. The macro defines a template which takes its own parameters. Where should the @param (or \param) and other comments go? (Disclaimer: not my code, but I want to document it. Also a mostly-contrived example; the actual macros are far more complex.)
[22:26:05] *** Joins: artok (~azo@mobile-access-b04849-185.dhcp.inet.fi)
[22:33:15] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[22:35:53] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[22:37:16] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[22:37:22] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:38:05] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:41:01] <yolo> https://rurban.github.io/ctl/  STL for C, looks very neat
[22:41:18] <yolo> due to generics from C11 I guess
[22:42:16] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:42:40] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:42:53] <ville> looks like xmacros to me
[22:44:14] <ville> yes that's "all" macros
[22:45:15] <ville> pretty unfortunate they've chosen not to prefix their macros either, not that it's something you can't work with but surely leads to one or two moments of confusion when funny compiler errors pops up
[22:46:28] <ville> you do #define T int and then forget to undef it and later on something breaks elsewhere
[22:48:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[22:57:54] *** gentooclimax is now known as climax
[23:02:23] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:04:16] <hnOsmium0001[m]> what happens if you have vec_Foo but with different options (e.g. POD vs no POD) in different translation units?
[23:04:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:05:28] <Alipha> hnOsmium0001[m]: if i'm understanding your question, that's UB because it's a violation of the One Definition Rule (ODR) because vec_Foo has different definitions
[23:05:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[23:05:56] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[23:07:48] <TinoDidriksen> I really wish there was a non-destructive Unicode normalization.
[23:09:03] *** climax is now known as gentooclimax
[23:09:23] <PJBoy> pair<grapheme_t, grapheme_normalised_t>?
[23:09:41] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[23:09:56] <hnOsmium0001[m]> C11 _Generic is more like std::is_same_v than the usual "generic programming", i.e. type constructors
[23:11:49] <rpav> haha oops
[23:12:11] <rpav> beware signed-unsigned-% ;)
[23:13:18] <rpav> { ssize_t i = -1; size_t x = 38; cout << i % x, i % ssize_t(x); }
[23:13:18] <geordi> 35, -1
[23:13:18] <hnOsmium0001[m]> Alipha: thanks, I was asking about CTL in particular, and that was my guess too
[23:17:49] <PJBoy> I wish more and more that operations between integers of different type were just errors
[23:18:30] *** Joins: seninha (~seninha@user/seninha)
[23:21:53] *** Quits: Uswald (~leandre@user/Uswald) (Ping timeout: 256 seconds)
[23:23:21] <rpav> i wish operations were signed or unsigned and not types
[23:23:30] <rpav> like they actually are
[23:24:15] <rpav> (though to be fair that's the harder and probably more error-prone option, so probably not)
[23:24:51] *** Quits: sonic (~sonic@user/sonic) (Read error: Connection reset by peer)
[23:31:58] *** Joins: Uswald (~leandre@2a01cb040075f900d52579b4cac4dfe6.ipv6.abo.wanadoo.fr)
[23:31:58] *** Quits: Uswald (~leandre@2a01cb040075f900d52579b4cac4dfe6.ipv6.abo.wanadoo.fr) (Changing host)
[23:31:58] *** Joins: Uswald (~leandre@user/Uswald)
[23:39:29] *** Quits: hackkitten (~hackkitte@94.31.104.136) (Ping timeout: 268 seconds)
[23:41:09] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[23:42:16] *** Joins: hackkitten (~hackkitte@94.31.104.136)
[23:44:57] <rpav> enumerate and zip make RBF so, so much nicer
[23:45:24] <rpav> even zip and from would be sufficient
[23:45:49] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-12-50-100-212-202.dsl.bell.ca)
[23:46:27] *** Joins: Fairy (~Fairy@ti0004a400-5385.bb.online.no)
[23:47:19] <Alipha> https://github.com/alipha/cpp/tree/master/enumerate and https://github.com/alipha/cpp/tree/master/zip_iterator ? :-)
[23:47:54] <rpav> yeah they're easy to write .. i have both and a few more
[23:48:20] <rpav> it's more of a crime that you _have_ to, even as of 17
[23:48:29] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[23:48:53] <rpav> (zip is a pretty good exercise though and a great demo of folding making life vastly nicer)
[23:49:30] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[23:55:59] *** Quits: jsbach (~jsbach@2a01:c23:6469:4c00:a24a:db6c:c9a:28fd) (Ping timeout: 252 seconds)
[23:59:58] *** Joins: pepperoni (~pepperoni@172.58.99.50)
