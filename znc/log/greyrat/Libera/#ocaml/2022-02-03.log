[00:02:14] *** Quits: mro (~mro@port-92-195-233-163.dynamic.as20676.net) (Quit: Leaving...)
[00:09:30] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[00:12:51] *** Quits: gravicappa (~gravicapp@145.255.1.142) (Ping timeout: 256 seconds)
[00:41:32] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: Fardale (~Fardale@fuyukaidesu.fardale.eu) (*.net *.split)
[00:41:32] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[00:41:32] *** Quits: olle (~olle@i5E866D87.versanet.de) (*.net *.split)
[00:41:32] *** Quits: Anarchos (~Anarchos@88.168.112.216) (*.net *.split)
[00:41:32] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[00:41:32] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[00:41:32] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (*.net *.split)
[00:41:32] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[00:41:33] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[00:41:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[00:41:33] *** Quits: towel (~towel@user/towel) (*.net *.split)
[00:41:33] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[00:41:33] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[00:41:33] *** Quits: andreypopp (~andreypop@94.188.42.16) (*.net *.split)
[00:41:33] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[00:41:33] *** Quits: williewillus (~williewil@user/williewillus) (*.net *.split)
[00:41:34] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[00:41:34] *** Quits: Geekingfrog (~geekingfr@li2156-64.members.linode.com) (*.net *.split)
[00:41:34] *** Quits: afrosenpai (~afrosenpa@li642-224.members.linode.com) (*.net *.split)
[00:41:34] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (*.net *.split)
[00:41:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (*.net *.split)
[00:41:34] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (*.net *.split)
[00:41:35] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[00:41:35] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[00:41:35] *** Quits: ado (sid462155@id-462155.uxbridge.irccloud.com) (*.net *.split)
[00:41:35] *** Quits: haesbaert (~haesbaert@195.95.187.184) (*.net *.split)
[00:41:35] *** Quits: gentauro (~gentauro@user/gentauro) (*.net *.split)
[00:41:35] *** Quits: motherfsck (~motherfsc@user/motherfsck) (*.net *.split)
[00:41:36] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[00:41:36] *** Quits: nfc_ (nfc@tilde.institute) (*.net *.split)
[00:41:36] *** Quits: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf) (*.net *.split)
[00:41:36] *** Quits: reynir (root@user/reynir) (*.net *.split)
[00:41:36] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[00:41:36] *** Quits: jyc (sid40911@id-40911.ilkley.irccloud.com) (*.net *.split)
[00:41:36] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[00:41:36] *** Quits: LACampbell (~lewis@granite-phrase.bnr.la) (*.net *.split)
[00:41:36] *** Quits: riverdc (~river@li1196-30.members.linode.com) (*.net *.split)
[00:41:36] *** Quits: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net) (*.net *.split)
[00:41:37] *** Quits: landonf (landonf@mac68k.info) (*.net *.split)
[00:41:37] *** Quits: Armael (~Armael@macaron.isomorphis.me) (*.net *.split)
[00:41:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[00:41:37] *** Quits: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net) (*.net *.split)
[00:41:37] *** Quits: mal`` (~mal``@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[00:41:37] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (*.net *.split)
[00:41:37] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[00:41:37] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (*.net *.split)
[00:41:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (*.net *.split)
[00:41:37] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (*.net *.split)
[00:41:37] *** Quits: romildo (~Romildo@191.5.84.202) (*.net *.split)
[00:41:37] *** Quits: chrisz (ctgsfjujn6@55d43e0c.access.ecotel.net) (*.net *.split)
[00:41:37] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (*.net *.split)
[00:41:38] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[00:41:38] *** Quits: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d) (*.net *.split)
[00:41:38] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[00:41:38] *** Quits: d_bot_ (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027) (*.net *.split)
[00:41:38] *** Quits: pgiarrusso (sid258222@id-258222.hampstead.irccloud.com) (*.net *.split)
[00:41:38] *** Quits: thizanne (~thibault@2001:41d0:a:f682::1) (*.net *.split)
[00:41:38] *** Quits: Techcable (~Techcable@168.235.93.147) (*.net *.split)
[00:41:38] *** Quits: theblatte (~theblatte@82-71-49-100.dsl.in-addr.zen.co.uk) (*.net *.split)
[00:41:38] *** Quits: Putonlalla (~sapekiis@it-cyan.it.jyu.fi) (*.net *.split)
[00:41:38] *** Quits: Enjolras (~enjolras@139.99.101.27) (*.net *.split)
[00:41:39] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (*.net *.split)
[00:41:39] *** Quits: dmbaturin (~dmbaturin@vyos/developer/dmbaturin) (*.net *.split)
[00:41:39] *** Quits: energizer (~energizer@user/energizer) (*.net *.split)
[00:41:39] *** Quits: nore (~nore@217.69.13.67) (*.net *.split)
[00:41:40] *** Quits: copy (~copy@2604:a880:800:10::1e0a:8001) (*.net *.split)
[00:41:40] *** Quits: klu (~klu@user/klu) (*.net *.split)
[00:41:40] *** Quits: vicfred (~vicfred@user/vicfred) (*.net *.split)
[00:41:40] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (*.net *.split)
[00:41:40] *** Quits: caasih (sid13241@ilkley.irccloud.com) (*.net *.split)
[00:41:40] *** Quits: m5zs7k (aquares@web10.mydevil.net) (*.net *.split)
[00:41:40] *** Quits: wagle (~wagle@quassel.wagle.io) (*.net *.split)
[00:41:40] *** Quits: rak (~rak@debian/rak) (*.net *.split)
[00:41:40] *** Quits: ansiwen (~sanders@vm1.a6n.de) (*.net *.split)
[00:41:40] *** Quits: Ekho (~Ekho@user/ekho) (*.net *.split)
[00:41:40] *** Quits: micro (~micro@user/micro) (*.net *.split)
[00:41:40] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[00:41:40] *** Quits: ski (~ski@remote12.chalmers.se) (*.net *.split)
[00:41:40] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[00:41:40] *** Quits: adrien (~adrien@nautica.notk.org) (*.net *.split)
[00:41:40] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[00:41:41] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (*.net *.split)
[00:41:41] *** Quits: octachron_ (~octachron@2a01:4f8:1c1c:69ae::1) (*.net *.split)
[00:41:41] *** Quits: grobe0ba (~grobe0ba@mars.pulpie.xyz) (*.net *.split)
[00:41:41] *** Quits: gahr (~gahr@user/gahr) (*.net *.split)
[00:41:41] *** Quits: companion_cube (~simon@user/companion-cube) (*.net *.split)
[00:41:41] *** Quits: daimrod2 (~daimrod@loire.omecha.info) (*.net *.split)
[00:41:41] *** Quits: tristanC (~tristanC@user/tristanc) (*.net *.split)
[00:41:41] *** Quits: qwr (~qwr@173-97-46-176.dyn.estpak.ee) (*.net *.split)
[00:41:42] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[00:41:42] *** Quits: bronsen (~bronsen@2a04:d480:0:1::3) (*.net *.split)
[00:41:42] *** Quits: zozozo (~zozozo@gbury.eu) (*.net *.split)
[00:41:42] *** Quits: fds (franki@triton.blinkenshell.org) (*.net *.split)
[00:41:42] *** Quits: ejones (~jones@167.88.120.129) (*.net *.split)
[00:41:42] *** Quits: hornhack (~hackingho@user/hackinghorn) (*.net *.split)
[00:41:42] *** Quits: tizoc (~user@li296-221.members.linode.com) (*.net *.split)
[00:41:42] *** Quits: Cypi (~Cypi@cypi.fr) (*.net *.split)
[00:41:42] *** Quits: bacam (~bacam@dhondt.z273.org.uk) (*.net *.split)
[00:41:42] *** Quits: ccx (~ccx@82.142.125.46) (*.net *.split)
[00:41:42] *** Quits: dh` (~dholland@netbsd/developer/dholland) (*.net *.split)
[00:41:42] *** Quits: mclovin (~zapashcan@2001:470:69fc:105::43) (*.net *.split)
[00:41:42] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (*.net *.split)
[00:41:43] *** Quits: Sofi (~sofi@2001:470:69fc:105::1:44cc) (*.net *.split)
[00:41:43] *** Quits: noddy (~user@user/noddy) (*.net *.split)
[00:41:43] *** Quits: chiastre (~chiastre@user/chiastre) (*.net *.split)
[00:41:43] *** Quits: remexre (~remexre@user/remexre) (*.net *.split)
[00:41:43] *** Quits: sparogy (~sparogy@afontaine.dev) (*.net *.split)
[00:41:43] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (*.net *.split)
[00:41:43] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (*.net *.split)
[00:41:43] *** Quits: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net) (*.net *.split)
[00:41:43] *** Quits: hannes (~hannes@193.30.40.133) (*.net *.split)
[00:41:43] *** Quits: v0idpwn (sid483136@helmsley.irccloud.com) (*.net *.split)
[00:41:43] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[00:41:43] *** Quits: np (~nerdypepp@user/nerdypepper) (*.net *.split)
[00:41:43] *** Quits: kandu (~kandu@138.68.48.10) (*.net *.split)
[00:41:43] *** Quits: ocabot (~coucoubot@134.209.175.17) (*.net *.split)
[00:41:43] *** Quits: brettgilio (~brettgili@x-node.gq) (*.net *.split)
[00:41:43] *** Quits: johnel (~johnel@185.157.234.34) (*.net *.split)
[00:41:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (*.net *.split)
[00:41:43] *** Quits: vsiles (~vsiles@topinambour.cristau.org) (*.net *.split)
[00:41:43] *** Quits: quernd (~quernd@boethin.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: mjacob (~mjacob@adrastea.uberspace.de) (*.net *.split)
[00:41:43] *** Quits: Johann (~johann@user/johann) (*.net *.split)
[00:41:43] *** Quits: sagax (~sagax_nb@user/sagax) (*.net *.split)
[00:41:43] *** Quits: bobo_ (~bobo@37.170.37.174) (*.net *.split)
[00:41:43] *** Quits: Absalom (kax@envs.net) (*.net *.split)
[00:41:44] *** Quits: habnabit_ (habnabit@python/site-packages/habnabit) (*.net *.split)
[00:41:44] *** Quits: Chouhartem (~fmoumou@epheme.re) (*.net *.split)
[00:41:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[00:41:44] *** Quits: Leonidas (~Leonidas@user/leonidas) (*.net *.split)
[00:41:44] *** Quits: dy (~dy@user/dy) (*.net *.split)
[00:41:44] *** Quits: sim642 (~simmo@europium.sim642.eu) (*.net *.split)
[00:41:44] *** Quits: OCamlPro[m] (~ocamlprom@2001:470:69fc:105::1:70d1) (*.net *.split)
[00:41:45] *** Quits: lisq (~quassel@lis.moe) (*.net *.split)
[00:41:45] *** Quits: kronicma1 (user73386@neotame.csclub.uwaterloo.ca) (*.net *.split)
[00:41:45] *** Quits: ts3 (~ts@46.101.20.9) (*.net *.split)
[00:41:45] *** Quits: welterde (welterde@thinkbase.srv.welterde.de) (*.net *.split)
[00:41:45] *** Quits: p4bl0 (~p4bl0@berthold.uzy.me) (*.net *.split)
[00:41:45] *** Quits: berberman_ (~berberman@user/berberman) (*.net *.split)
[00:41:45] *** Quits: xand0_ (sid6178@id-6178.ilkley.irccloud.com) (*.net *.split)
[00:41:45] *** Quits: rwmjones (~rwmjones@2001:8b0:9ad:8729:96c6:91ff:fea1:4b25) (*.net *.split)
[00:41:45] *** Quits: oisota (~oisota@user/oisota) (*.net *.split)
[00:41:45] *** Quits: rom1504 (rom1504@rom1504.fr) (*.net *.split)
[00:41:45] *** Quits: rks` (~trefis@ns366843.ip-37-59-60.eu) (*.net *.split)
[00:41:45] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[00:41:45] *** Quits: notnotdan (~notd@v22019068545391262.megasrv.de) (*.net *.split)
[00:41:45] *** Quits: sadiq (~sadiq@toao.com) (*.net *.split)
[00:41:46] *** Quits: _tjr_ (~tjr@233.ip-144-217-92.net) (*.net *.split)
[00:41:46] *** Quits: jsoo (~znc@irc.refl.club) (*.net *.split)
[00:41:46] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[00:41:46] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (*.net *.split)
[00:44:06] *** Joins: afrosenpai (~afrosenpa@li642-224.members.linode.com)
[00:44:06] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[00:44:06] *** Joins: williewillus (~williewil@user/williewillus)
[00:44:06] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[00:44:06] *** Joins: andreypopp (~andreypop@94.188.42.16)
[00:44:06] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[00:44:06] *** Joins: mmalter (~mmalter@88.126.10.237)
[00:44:06] *** Joins: towel (~towel@user/towel)
[00:44:06] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:44:06] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:44:06] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[00:44:06] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[00:44:06] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[00:44:06] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[00:44:06] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[00:44:06] *** Joins: olle (~olle@i5E866D87.versanet.de)
[00:44:06] *** Joins: Enjolras (~enjolras@139.99.101.27)
[00:44:06] *** Joins: Putonlalla (~sapekiis@it-cyan.it.jyu.fi)
[00:44:06] *** Joins: theblatte (~theblatte@82-71-49-100.dsl.in-addr.zen.co.uk)
[00:44:06] *** Joins: Techcable (~Techcable@168.235.93.147)
[00:44:06] *** Joins: thizanne (~thibault@2001:41d0:a:f682::1)
[00:44:06] *** Joins: pgiarrusso (sid258222@id-258222.hampstead.irccloud.com)
[00:44:06] *** Joins: Soni (~quassel@autistic.space)
[00:44:06] *** Joins: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d)
[00:44:06] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[00:44:06] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[00:44:06] *** Joins: chrisz (ctgsfjujn6@55d43e0c.access.ecotel.net)
[00:44:06] *** Joins: romildo (~Romildo@191.5.84.202)
[00:44:06] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[00:44:06] *** Joins: leah2 (~leah@vuxu.org)
[00:44:06] *** Joins: jsoo (~znc@irc.refl.club)
[00:44:06] *** Joins: _tjr_ (~tjr@233.ip-144-217-92.net)
[00:44:06] *** Joins: sadiq (~sadiq@toao.com)
[00:44:06] *** Joins: notnotdan (~notd@v22019068545391262.megasrv.de)
[00:44:06] *** Joins: greenbagels (~gb@user/greenbagels)
[00:44:06] *** Joins: rks` (~trefis@ns366843.ip-37-59-60.eu)
[00:44:06] *** Joins: rom1504 (rom1504@rom1504.fr)
[00:44:06] *** Joins: oisota (~oisota@user/oisota)
[00:44:06] *** Joins: rwmjones (~rwmjones@2001:8b0:9ad:8729:96c6:91ff:fea1:4b25)
[00:44:06] *** Joins: xand0_ (sid6178@id-6178.ilkley.irccloud.com)
[00:44:06] *** Joins: berberman_ (~berberman@user/berberman)
[00:44:06] *** Joins: p4bl0 (~p4bl0@berthold.uzy.me)
[00:44:06] *** Joins: welterde (welterde@thinkbase.srv.welterde.de)
[00:44:06] *** Joins: ts3 (~ts@46.101.20.9)
[00:44:06] *** Joins: kronicma1 (user73386@neotame.csclub.uwaterloo.ca)
[00:44:06] *** Joins: lisq (~quassel@lis.moe)
[00:44:06] *** Joins: OCamlPro[m] (~ocamlprom@2001:470:69fc:105::1:70d1)
[00:44:06] *** Joins: ejones (~jones@167.88.120.129)
[00:44:06] *** Joins: zozozo (~zozozo@gbury.eu)
[00:44:06] *** Joins: bronsen (~bronsen@2a04:d480:0:1::3)
[00:44:06] *** Joins: Exa (exa@irc.moe)
[00:44:06] *** Joins: fds (franki@triton.blinkenshell.org)
[00:44:06] *** Joins: qwr (~qwr@173-97-46-176.dyn.estpak.ee)
[00:44:06] *** Joins: tristanC (~tristanC@user/tristanc)
[00:44:06] *** Joins: daimrod2 (~daimrod@loire.omecha.info)
[00:44:06] *** Joins: companion_cube (~simon@user/companion-cube)
[00:44:06] *** Joins: gahr (~gahr@user/gahr)
[00:44:06] *** Joins: grobe0ba (~grobe0ba@mars.pulpie.xyz)
[00:44:06] *** Joins: octachron_ (~octachron@2a01:4f8:1c1c:69ae::1)
[00:44:06] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[00:44:06] *** Joins: ns12 (~ns12@user/ns12)
[00:44:06] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[00:44:06] *** Joins: mal`` (~mal``@static.38.6.217.95.clients.your-server.de)
[00:44:06] *** Joins: sleepydog (~sleepydog@pool-100-33-241-236.nycmny.fios.verizon.net)
[00:44:06] *** Joins: dstein64 (~dstein64@dannyadam.com)
[00:44:06] *** Joins: Armael (~Armael@macaron.isomorphis.me)
[00:44:06] *** Joins: landonf (landonf@mac68k.info)
[00:44:06] *** Joins: sim642 (~simmo@europium.sim642.eu)
[00:44:06] *** Joins: dy (~dy@user/dy)
[00:44:06] *** Joins: Leonidas (~Leonidas@user/leonidas)
[00:44:06] *** Joins: asm (~alexander@user/asm)
[00:44:06] *** Joins: Chouhartem (~fmoumou@epheme.re)
[00:44:06] *** Joins: habnabit_ (habnabit@python/site-packages/habnabit)
[00:44:07] *** Joins: Absalom (kax@envs.net)
[00:44:07] *** Joins: bobo_ (~bobo@37.170.37.174)
[00:44:07] *** Joins: sagax (~sagax_nb@user/sagax)
[00:44:07] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:44:07] *** Joins: bacam (~bacam@dhondt.z273.org.uk)
[00:44:07] *** Joins: Cypi (~Cypi@cypi.fr)
[00:44:07] *** Joins: tizoc (~user@li296-221.members.linode.com)
[00:44:07] *** Joins: hornhack (~hackingho@user/hackinghorn)
[00:44:07] *** Joins: d_bot (~d_bot@2001:4802:7800:1:be76:4eff:fe20:3027)
[00:44:07] *** Joins: ebb (ebb@user/ebb)
[00:44:07] *** Joins: adrien (~adrien@nautica.notk.org)
[00:44:07] *** Joins: tomku (~tomku@user/tomku)
[00:44:07] *** Joins: ski (~ski@remote12.chalmers.se)
[00:44:07] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[00:44:07] *** Joins: micro (~micro@user/micro)
[00:44:07] *** Joins: Ekho (~Ekho@user/ekho)
[00:44:07] *** Joins: ansiwen (~sanders@vm1.a6n.de)
[00:44:07] *** Joins: rak (~rak@debian/rak)
[00:44:07] *** Joins: wagle (~wagle@quassel.wagle.io)
[00:44:07] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[00:44:07] *** Joins: caasih (sid13241@ilkley.irccloud.com)
[00:44:07] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:44:07] *** Joins: vicfred (~vicfred@user/vicfred)
[00:44:14] *** Quits: epony (epony@user/epony) (Max SendQ exceeded)
[00:44:29] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[00:44:29] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[00:44:29] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[00:44:29] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[00:44:29] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[00:44:29] *** Joins: ado (sid462155@id-462155.uxbridge.irccloud.com)
[00:44:29] *** Joins: haesbaert (~haesbaert@195.95.187.184)
[00:44:29] *** Joins: gentauro (~gentauro@user/gentauro)
[00:44:29] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[00:44:29] *** Joins: unyu (~pyon@user/pyon)
[00:44:29] *** Joins: nfc_ (nfc@tilde.institute)
[00:44:29] *** Joins: b0o (0e4a0bf4c9@2604:bf00:561:2000::1bf)
[00:44:29] *** Joins: reynir (root@user/reynir)
[00:44:29] *** Joins: slothby (~JoshAshby@irc.isin.space)
[00:44:29] *** Joins: jyc (sid40911@id-40911.ilkley.irccloud.com)
[00:44:29] *** Joins: drewolson (~drewolson@user/drewolson)
[00:44:29] *** Joins: LACampbell (~lewis@granite-phrase.bnr.la)
[00:44:29] *** Joins: riverdc (~river@li1196-30.members.linode.com)
[00:44:29] *** Joins: dwt__ (~dwt_@c-98-198-103-176.hsd1.tx.comcast.net)
[00:44:50] *** Joins: dmbaturin (~dmbaturin@vyos/developer/dmbaturin)
[00:44:50] *** Joins: energizer (~energizer@user/energizer)
[00:44:50] *** Joins: nore (~nore@217.69.13.67)
[00:44:50] *** Joins: copy (~copy@2604:a880:800:10::1e0a:8001)
[00:44:50] *** Joins: klu (~klu@user/klu)
[00:44:53] *** Joins: epony (epony@lz2.eu)
[00:45:01] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[00:45:01] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:45:01] *** Joins: adanwan_ (~adanwan@gateway/tor-sasl/adanwan)
[00:45:01] *** Joins: ccx (~ccx@82.142.125.46)
[00:45:01] *** Joins: dh` (~dholland@netbsd/developer/dholland)
[00:45:01] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[00:45:01] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[00:45:01] *** Joins: Fardale (~Fardale@fuyukaidesu.fardale.eu)
[00:45:01] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[00:45:02] *** Quits: OCamlPro[m] (~ocamlprom@2001:470:69fc:105::1:70d1) (Ping timeout: 240 seconds)
[00:45:10] *** Quits: smondet[m] (~smondetma@2001:470:69fc:105::b33) (Ping timeout: 260 seconds)
[00:45:10] *** Quits: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d) (Ping timeout: 260 seconds)
[00:45:18] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[00:45:18] *** Joins: mclovin (~zapashcan@2001:470:69fc:105::43)
[00:45:18] *** Joins: Sofi (~sofi@2001:470:69fc:105::1:44cc)
[00:45:18] *** Joins: noddy (~user@user/noddy)
[00:45:18] *** Joins: chiastre (~chiastre@user/chiastre)
[00:45:18] *** Joins: remexre (~remexre@user/remexre)
[00:45:18] *** Joins: sparogy (~sparogy@afontaine.dev)
[00:45:18] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[00:45:18] *** Joins: infinity0 (~infinity0@occupy.ecodis.net)
[00:45:18] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[00:45:18] *** Joins: Corbin (~Corbin@c-73-67-140-116.hsd1.or.comcast.net)
[00:45:18] *** Joins: hannes (~hannes@193.30.40.133)
[00:45:18] *** Joins: v0idpwn (sid483136@helmsley.irccloud.com)
[00:45:18] *** Joins: np (~nerdypepp@user/nerdypepper)
[00:45:18] *** Joins: gdd (~gdd@129.199.146.230)
[00:45:18] *** Joins: kandu (~kandu@138.68.48.10)
[00:45:18] *** Joins: ocabot (~coucoubot@134.209.175.17)
[00:45:18] *** Joins: brettgilio (~brettgili@x-node.gq)
[00:45:18] *** Joins: johnel (~johnel@185.157.234.34)
[00:45:18] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[00:45:18] *** Joins: vsiles (~vsiles@topinambour.cristau.org)
[00:45:18] *** Joins: quernd (~quernd@boethin.uberspace.de)
[00:45:18] *** Joins: mjacob (~mjacob@adrastea.uberspace.de)
[00:45:18] *** Joins: Johann (~johann@user/johann)
[00:45:18] *** Quits: gdd (~gdd@129.199.146.230) (Max SendQ exceeded)
[00:45:18] *** Quits: mclovin (~zapashcan@2001:470:69fc:105::43) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: saltrocklamp[m] (~hexology@user/hexology) (Ping timeout: 245 seconds)
[00:45:19] *** Quits: Sofi (~sofi@2001:470:69fc:105::1:44cc) (Ping timeout: 245 seconds)
[00:46:06] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (Ping timeout: 260 seconds)
[00:46:15] *** Quits: szkl (uid110435@uxbridge.irccloud.com) (Client Quit)
[00:47:58] *** Joins: szkl (uid110435@uxbridge.irccloud.com)
[00:53:33] *** Quits: szkl (uid110435@uxbridge.irccloud.com) ()
[00:55:44] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[01:01:49] *** epony is now known as Guest3959
[01:02:21] *** Joins: Geekingfrog (~geekingfr@li2156-64.members.linode.com)
[01:02:58] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[01:06:47] *** Joins: gdd (~gdd@129.199.146.230)
[01:12:59] *** Joins: Geekingfrog_ (geekingfro@2a01:7e01::f03c:92ff:fe48:8bdf)
[01:13:35] *** Quits: Geekingfrog (~geekingfr@li2156-64.members.linode.com) (Ping timeout: 250 seconds)
[01:22:50] *** Joins: JosEduardo[m] (~joseemdsm@2001:470:69fc:105::ce1d)
[01:31:02] *** Joins: smondet[m] (~smondetma@2001:470:69fc:105::b33)
[01:31:46] *** Quits: romildo (~Romildo@191.5.84.202) (Quit: Leaving)
[01:41:54] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:45:33] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:51:26] *** Joins: Sofi (~sofi@2001:470:69fc:105::1:44cc)
[01:57:50] *** Joins: mclovin (~zapashcan@2001:470:69fc:105::43)
[02:01:34] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[02:19:00] *** Joins: OCamlPro[m] (~ocamlprom@2001:470:69fc:105::1:70d1)
[02:26:26] *** Joins: saltrocklamp[m] (~hexology@user/hexology)
[02:31:03] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[02:35:59] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 256 seconds)
[02:46:45] *** Quits: bobo_ (~bobo@37.170.37.174) (Ping timeout: 250 seconds)
[02:46:55] *** Joins: bobo_ (~bobo@37.165.163.232)
[03:15:50] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:51:48] *** Quits: olle (~olle@i5E866D87.versanet.de) (Ping timeout: 256 seconds)
[04:06:16] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:19:21] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[04:24:03] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[04:44:35] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[04:50:16] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[04:59:03] *** Quits: hornhack (~hackingho@user/hackinghorn) (Quit: Leaving)
[05:08:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:10:13] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:59:05] *** Quits: Guest3959 (epony@lz2.eu) (Quit: QUIT)
[06:04:45] *** Joins: epony (epony@user/epony)
[06:43:54] *** Joins: mbuf (~Shakthi@122.162.66.95)
[06:48:04] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:50:55] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:57:01] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:03:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:13:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:16:28] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:41:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:42:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:48:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 250 seconds)
[07:55:55] *** Joins: gravicappa (~gravicapp@145.255.1.142)
[08:02:02] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[08:02:47] *** Quits: sparogy (~sparogy@afontaine.dev) (Remote host closed the connection)
[08:04:05] *** Joins: sparogy (~sparogy@2604:a880:cad:d0::648:8001)
[08:26:57] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[08:56:32] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[09:02:13] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:04:34] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6)
[09:43:44] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[09:44:47] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[09:49:26] *** Joins: gentauro (~gentauro@user/gentauro)
[09:58:46] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Quit: Leaving)
[09:59:53] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[10:34:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:43:48] *** Geekingfrog_ is now known as Geekingfrog
[10:53:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:e15c:b936:df3f:82e6) (Ping timeout: 240 seconds)
[10:55:52] *** Quits: Boarders_ (sid425905@id-425905.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: JSharp (sid4580@id-4580.lymington.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: Fardale (~Fardale@fuyukaidesu.fardale.eu) (*.net *.split)
[10:55:52] *** Quits: cbarrett (sid192934@id-192934.helmsley.irccloud.com) (*.net *.split)
[10:55:52] *** Quits: kurfen_ (~kurfen@213.152.188.7) (*.net *.split)
[10:55:52] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[10:55:52] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (*.net *.split)
[10:55:52] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (*.net *.split)
[10:55:52] *** Quits: towel (~towel@user/towel) (*.net *.split)
[10:55:52] *** Quits: mmalter (~mmalter@88.126.10.237) (*.net *.split)
[10:55:52] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (*.net *.split)
[10:55:52] *** Quits: andreypopp (~andreypop@94.188.42.16) (*.net *.split)
[10:55:52] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[10:55:52] *** Quits: williewillus (~williewil@user/williewillus) (*.net *.split)
[10:55:52] *** Quits: xenu (~xenu@carychium-tridentatum.xenu.pl) (*.net *.split)
[10:55:53] *** Quits: afrosenpai (~afrosenpa@li642-224.members.linode.com) (*.net *.split)
[10:58:05] *** Joins: kurfen_ (~kurfen@213.152.188.7)
[10:58:05] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[10:58:05] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[10:58:05] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[10:58:05] *** Joins: towel (~towel@user/towel)
[10:58:05] *** Joins: mmalter (~mmalter@88.126.10.237)
[10:58:05] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[10:58:05] *** Joins: andreypopp (~andreypop@94.188.42.16)
[10:58:05] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[10:58:05] *** Joins: williewillus (~williewil@user/williewillus)
[10:58:05] *** Joins: xenu (~xenu@carychium-tridentatum.xenu.pl)
[10:58:05] *** Joins: afrosenpai (~afrosenpa@li642-224.members.linode.com)
[10:58:05] *** Joins: Boarders_ (sid425905@id-425905.lymington.irccloud.com)
[10:58:05] *** Joins: JSharp (sid4580@id-4580.lymington.irccloud.com)
[10:58:05] *** Joins: Fardale (~Fardale@fuyukaidesu.fardale.eu)
[10:58:05] *** Joins: cbarrett (sid192934@id-192934.helmsley.irccloud.com)
[11:05:34] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[11:38:32] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[11:50:44] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[11:52:58] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[11:53:49] *** Joins: mro (~mro@2002:5cc3:9b27:0:7050:833a:730b:20b4)
[12:41:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:42:49] *** Quits: mro (~mro@2002:5cc3:9b27:0:7050:833a:730b:20b4) (Remote host closed the connection)
[12:50:06] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[12:57:13] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[13:00:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[13:01:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[13:07:55] *** Joins: bartholin (~bartholin@158.110.70.210)
[13:12:28] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:9d5c:62a8:fd4f:5327)
[13:20:23] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[13:24:26] <dmbaturin> How do I create a compiler switch with spacetime enabled? `opam switch create 4.13.1+spacetime ocaml-variants.4.13.1+options ocaml-option-spacetime` doesn't do the trick, I get a "no solution found" error.
[13:27:31] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[13:32:13] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Ping timeout: 250 seconds)
[13:35:47] <d_bot> <undu> Didn't spacetime got dropped in favour of memprof?
[13:38:13] <dmbaturin> Oh, hhm.
[13:38:26] <dmbaturin> undu: Got a link to the memprof instructions?
[13:41:20] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[13:41:57] <d_bot> <undu> I'm using this right now: https://blog.janestreet.com/finding-memory-leaks-with-memtrace/
[13:42:53] *** Joins: Techcable (~Techcable@168.235.93.147)
[13:43:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:58:01] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[13:58:19] <d_bot> <Butanium (@me on answer)> https://cdn.discordapp.com/attachments/436568060288172044/938742692446355486/unknown.png
[13:58:27] <d_bot> <Butanium (@me on answer)> .native is .exe if I use dune right ?
[14:00:02] *** Joins: olle (~olle@i5E866D84.versanet.de)
[14:00:44] <d_bot> <bnguyenv> Yeah, `_build/default/foo.exe` even
[14:05:11] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[14:05:54] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[14:07:16] <d_bot> <Butanium (@me on answer)> ok thanks
[14:42:26] <d_bot> <Boby> Should auxiliar function be declared inside the main function which call it or outside this main function ?
[14:46:54] <d_bot> <Boby> I mean I understand the visibility of aux function will be inside the main function, but what is the more readable ?
[14:47:14] <d_bot> <octachron> Yes. More seriously, it depends of the size of the auxiliary function and how much the auxiliary is really specific to the main function. Also I would avoid nesting recursive functions.
[14:47:23] *** Joins: spip (~bobo@37.164.93.43)
[14:47:47] *** Quits: bobo_ (~bobo@37.165.163.232) (Ping timeout: 256 seconds)
[14:47:48] <d_bot> <octachron> A small and specific auxiliary function should be defined inside the main function body.
[14:48:47] <d_bot> <octachron> A not-so-small function that is kind of reusable in theory should be defined outside of the main function.
[14:49:05] <d_bot> <Boby> Ok, I see
[14:49:08] <d_bot> <Boby> Thanks
[14:55:28] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[14:57:00] <d_bot> <Boby> And is there a way to remove these parenthesis ?
[14:57:00] <d_bot> <Boby> https://cdn.discordapp.com/attachments/436568060288172044/938757462729838612/unknown.png
[14:59:21] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[15:00:34] *** Joins: salkin (~salkin@84.212.156.62)
[15:07:49] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[15:09:57] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[15:12:17] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[15:13:51] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[15:26:43] *** Joins: bartholin (~bartholin@158.110.70.210)
[15:28:37] <humasect> Boby: flip the last 2 args and use curry ?
[15:29:51] <d_bot> <octachron> Why do you want to remove these parentheses, they seem perfectly fine to me?
[15:41:57] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Ping timeout: 240 seconds)
[15:43:44] <d_bot> <Boby> I thought we could reduce the use of all parentheses in ocaml
[15:46:50] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[15:47:03] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[15:47:08] <d_bot> <bnguyenv> Well nested parentheses are visual noise and are hard to parse for the eye, but one or two levels are readable.
[15:51:07] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[15:56:07] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[15:56:24] *** Joins: bartholin (~bartholin@158.110.70.210)
[15:59:20] <d_bot> <octachron> You can define `let k_m_1 = k - 1 in ... ` but having some parentheses is not that bad.
[15:59:37] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:01:21] <d_bot> <VPhantom> I tend to do that (extract an expression into a binding to avoid nesting) only when it becomes unsightly. I personally don't see `(k-1)` as unsightly in that simple line.
[16:11:17] *** Quits: olle (~olle@i5E866D84.versanet.de) (Ping timeout: 240 seconds)
[16:14:36] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[16:18:59] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[16:26:34] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[16:29:13] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[16:30:44] *** Joins: bartholin (~bartholin@158.110.70.210)
[16:31:27] *** Quits: mg- (mg@user/mg) (Quit: WeeChat 3.2.1)
[16:31:36] *** Joins: mg (mg@user/mg)
[16:36:01] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[16:36:19] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[16:37:33] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Client Quit)
[16:39:05] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[16:40:08] *** Quits: qwr (~qwr@173-97-46-176.dyn.estpak.ee) (Remote host closed the connection)
[16:57:56] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[17:29:34] <ns12> Hello, how do I use SysV and POSIX semaphores and message queues from OCaml?
[17:29:40] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[17:34:57] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[17:46:53] *** Joins: olle (~olle@p5784fa92.dip0.t-ipconnect.de)
[17:48:30] *** Joins: bartholin (~bartholin@158.110.70.210)
[18:03:25] *** Joins: Haudegen (~quassel@91.114.49.10)
[18:10:06] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[18:24:05] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:24:36] <companion_cube> maybe extunix has them? not sure
[18:24:42] <companion_cube> Unix in the stdlib certainly doesn't
[18:37:06] <ns12> companion_cube: I guess I would have to use Unix domain datagram sockets instead of message queues then.
[18:37:24] <companion_cube> that should work
[18:37:31] <ns12> But what about semaphores? What could I use instead of SysV and POSIX semaphores
[18:37:32] <companion_cube> I'm not familiar with datagram though
[18:39:01] <d_bot> <darrenldl> ns12: what are you doing?
[18:39:44] <ns12> Mostly experimenting with IPC. To see what's available in OCaml. Nothing practical.
[18:40:02] <d_bot> <darrenldl> just use socket as synchronisation primitive ( : D
[18:40:21] <ns12> How? That's new to me.
[18:40:51] <d_bot> <darrenldl> i mean you can always change shared memory schemes to message passing schemes (with possibly worse performance)
[18:41:19] <d_bot> <darrenldl> (let me double check if unix socket can do that - thought it'd be weird to not be able to do that...
[18:41:42] <ns12> What about this? https://ocaml.org/api/Semaphore.html
[18:42:03] <companion_cube> that's not multiprocess I think
[18:42:33] <d_bot> <darrenldl> also semaphore is...error prone to use...and lower level than most people's needs
[18:43:23] <ns12> I should probably read APUE before trying more systems programming with OCaml ...
[18:43:56] <d_bot> <darrenldl> i don't know if unix primitives are what you want in practice : D
[18:45:35] <ns12> It'll mostly be for educational purposes.
[18:45:52] <companion_cube> unix sockets should be enough then
[18:47:35] <d_bot> <darrenldl> yeah, pretend it's channel (except i don't know how they segment data into datagram in unix socket)
[18:47:43] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[18:47:57] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 240 seconds)
[18:54:04] <olle> What's a "smallest composable part" in software design?
[18:55:27] <humasect> i would like to say, a Word. or term; as it is linguistic
[19:00:36] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:00:51] *** Joins: bartholin (~bartholin@158.110.70.210)
[19:00:54] <olle> So a function? :) That was easy. ^^
[19:05:02] <humasect> mathemtical :)
[19:08:35] <olle> A pure dito, at least. But that's known.
[19:08:51] <olle> A need a composability metric...
[19:10:32] <humasect> depth/complexity
[19:13:40] <olle> Wonder if "smallest composable part" would imply that monad thing Haskell does, what's it called again...
[19:13:45] <olle> They make a DSL
[19:14:23] <humasect> they functions tho really
[19:16:07] <olle> ?
[19:16:30] <humasect> bind, >>=, lift, etc
[19:17:21] <Corbin> The smallest part of syntax is letters of the alphabet. The smallest part of semantics is functions (or whatever morphisms you're working with)
[19:19:09] <olle> Corbin: Yeah, but only using functions leaves out nice OOP for code reuse
[19:19:43] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:19:49] <humasect> can be done with functions/closures, no problem
[19:19:51] <Corbin> olle: Objects are just functions equipped with closures. But, also, functions are only one type of category; there are many other sorts of transformations between types.
[19:20:05] <humasect> eg. modules
[19:20:52] <olle> humasect: Not inheritance, you need the vtable and dynamic dispatch
[19:21:34] <humasect> prototypes can do regular flat OO but regular cant do proto
[19:26:01] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[19:26:03] <d_bot> <mseri> @EduardoRFS do you know what could have caused this error: https://zerobin.net/?738a05d7b55833d7#FUJK3Iyryh3b5IfDwnM6ORDIWbanLOeSfh/RxCYykqA= ?
[19:26:15] <Corbin> olle: Inheritance is just a special case of letrec. With functions, we can do something like `fun self super -> ...` and this lets us model (strict) objects with a self-reference and super-reference. Modelling lazy cooperative inheritance is a little trickier but should also be possible.
[19:31:07] <olle> Corbin: Nothing is "just" something else :)
[19:31:36] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[19:31:39] <olle> Still, side-effect DSL is the tricky part, I think
[19:33:24] <olle> Don't monads destroy composability, btw?
[19:33:47] <Corbin> olle: Sure; "just" means "I believe it", and it's an old unhelpful part of English. Nonetheless, inheritance in e.g. C++ was originally modeled as explicit code in C; there's no reason why vtables and dynamic dispatch have to somehow be so builtin that they can't be accessed from user-level code.
[19:34:07] <Corbin> No, each monad comes with its own category, and composition works fine within those categories.
[19:34:19] <olle> Hm
[19:34:45] <Corbin> We need functors if we want to cross from one category to another, but many languages have an implicit monad whose effects are spread throughout each program.
[19:34:57] <olle> What other alternatives are there? I did command objects and yield/generator in PHP for this, worked pretty well in a small experiment.
[19:35:28] <olle> "We adopt and argue the position of factoring an effectful program into a first-order effectful DSL with a rich, higher-order `macro' system."
[19:35:31] <olle> https://okmij.org/ftp/tagless-final/nondet-effect.html
[19:36:17] <Corbin> I think that there's no alternative. Suppose we have an identity transformation and the ability to compose transformations associatively; then, we *definitionally* have a category of transformations. Studying composition naturally leads to category theory.
[19:37:43] *** Joins: bartholin (~bartholin@158.110.70.210)
[19:37:50] *** Joins: gwizon (~gwizon@ool-45798eff.dyn.optonline.net)
[19:37:53] *** Quits: gwizon (~gwizon@ool-45798eff.dyn.optonline.net) (Client Quit)
[19:41:05] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[19:42:28] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[19:42:51] <olle> Oh noe
[19:43:13] <olle> I don't have time to learn that, I have to learn physiology -.-
[19:44:16] <Corbin> olle: In Oleg's paper, look carefully at section 6. They're saying that the *syntax* of monadic expressions, particularly do-notation, is misleading in its scoping of effects. They're not talking about the underlying system of composition.
[19:45:07] <Corbin> Similarly, when they talk about tagless-final encodings, it's worth remembering that "final" is the same as in "final object", or "terminal object" as we usually say in English. The corresponding monad typically provides the initial encoding, and there's an entire category of legal encodings!
[19:45:37] <Corbin> And from basic abstract nonsense, we can always convert the initial encoding to the final encoding; we can always take a monadic tree of actions and run it on an evaluator.
[19:45:54] <olle> Hm hm
[19:46:34] <olle> So anyway, the human cell and its organells... ^^
[19:50:12] <d_bot> <EduardoRFS> actually that's a weird one, maybe something got updated and now have a weird reference?
[19:52:20] <d_bot> <EduardoRFS> can you send me a github?
[19:55:22] <olle> Corbin: You know of any good effect DSL for traditional OOP langs? Or just list of command objects?
[19:55:31] <olle> Traditional = Java, C#, ...
[19:55:45] <olle> Maybe this is a better discussion in proglangdesign
[19:57:13] <Corbin> olle: Look at the design of the Ruby language, I guess. There's a lot of possibilities beyond what's been mentioned so far.
[19:58:21] <olle> Corbin: What to google for tho?
[19:59:15] <olle> Wait, there's also "Free monad"
[19:59:19] <olle> Ugh
[19:59:26] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[19:59:28] <Corbin> I asked for "ruby dsl design" and got a half-dozen decent tutorials and posts.
[19:59:31] <olle> So three alternatives? Classic monad, tagless-final, and free monad?
[19:59:47] <olle> Corbin: kk, checking, thanks
[19:59:53] <olle> https://medium.com/@johnmcclean/powerful-extensible-code-with-tagless-final-in-java-4094f923cdea
[20:00:23] <Corbin> Those are all the same thing to me. I'm not sure how to explain it though.
[20:03:03] <olle> ^^
[20:04:23] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 250 seconds)
[20:12:54] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[20:13:48] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:14:43] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[20:15:03] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[20:17:32] *** Joins: bartholin (~bartholin@158.110.70.210)
[20:23:46] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[20:23:46] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:26:22] *** Quits: mbuf (~Shakthi@122.162.66.95) (Quit: Leaving)
[20:26:37] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[20:27:56] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[20:36:06] *** Quits: mro (~mro@port-92-195-155-39.dynamic.as20676.net) (Remote host closed the connection)
[20:49:17] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:51:11] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[21:10:00] <companion_cube> @Vphantom whyyyyyyy
[21:10:17] *** Quits: bartholin (~bartholin@158.110.70.210) (Ping timeout: 256 seconds)
[21:18:44] <d_bot> <VPhantom> @companion_cube Sorry I wasn't here this morning. What's going on? 🤨
[21:18:57] <companion_cube> why do you upvote the wrong arguments on github :p
[21:19:35] <d_bot> <VPhantom> Most of the ones I upvoted were yours, but one suggesting adding the missing reading functions in `Buffer` really appealed to me.
[21:20:26] <d_bot> <VPhantom> I rolled my own buffer modules just like you so I feel your pain. Choosing between `byte` and `Buffer.t` has been a growing pain in my introduction to OCaml.
[21:20:38] *** Quits: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:21:41] <d_bot> <VPhantom> If we could read from buffers as easily as from bytes, we could easily make ourselves "slices" (like subs of bigarrays) and stop copying things around so much.
[21:22:16] <companion_cube> you cannot add the missing functions
[21:22:19] <companion_cube> it's not a fucking finite set
[21:22:43] <d_bot> <VPhantom> Reading functions present in `Bytes` but not in `Buffer`.
[21:22:47] <d_bot> <VPhantom> That is a finite list.
[21:22:53] <d_bot> <orbitz> Passion over buffers runs deep
[21:25:23] <d_bot> <VPhantom> I'm new to the OCaml community. I see it this way: if we're going to either get nothing because the stdlib is extremely conservative (which is fine), or at least get those "missing functions", then I vote for the missing functions.
[21:25:58] <companion_cube> aynway, wrote another piece on that.
[21:26:01] <companion_cube> it's not a finite list.
[21:27:29] <d_bot> <VPhantom> Right now for example when I read a 32-bit integer from a buffer, I `Bytes.create 4`, then `Buffer.blit` to it, then `Butes.get_int32_be`.
[21:28:06] <companion_cube> yes
[21:28:23] <companion_cube> but if you use camlzip, and you want to read usign `bytes -> int ->  bytes -> int -> int`
[21:28:25] <companion_cube> you are fucked
[21:28:39] <companion_cube> because that ain't going to be in the stdlib
[21:28:57] <companion_cube> it's just like proposing to remove iter/fold and instead hardcode your uses for them
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:02] <d_bot> <VPhantom> Oh for sure, lots of APIs use `bytes`.
[21:30:17] <companion_cube> bytes slice, actually, but in 3 separate arguments
[21:30:22] <companion_cube> byte slices&
[21:30:36] <companion_cube> and why can't we get byte slices from Buffer.t? hmm?
[21:30:40] <d_bot> <VPhantom> If there was a `Buffer.unsafe_to_bytes` for specific uses, just like there is in `Bytes` and `String`, things could get interesting.
[21:31:02] *** Joins: ns12 (~ns12@user/ns12)
[21:31:06] <companion_cube> like, my PR?
[21:31:15] <d_bot> <VPhantom> Yeah we'd need a guarantee that the underlying storage would be compatible with `bytes` in order to offer that.
[21:31:20] <d_bot> <VPhantom> +forever
[21:31:39] <d_bot> <VPhantom> Personally I have no problem with that, but apparently there's a future where it might change?
[21:31:46] *** Joins: rgrinberg (~textual@2806:101e:7:6bed:3054:7040:b02f:2be9)
[21:32:24] <companion_cube> I think it's illusory
[21:32:27] <d_bot> <VPhantom> (Oh crap I hadn't seen the signature in your PR. Yeah, _that_. 😛 )
[21:33:10] <d_bot> <VPhantom> I'd still need to manage the notion of "reading position" on my own, but at least we could read any sections of buffers without blitting to bytes first.
[21:33:16] <companion_cube> yep
[21:33:45] <d_bot> <VPhantom> Yeah that… that needs to happen. Until then I use my own `bytes` based buffers instead of `Buffer`.
[21:34:13] <companion_cube> yes
[21:34:19] <d_bot> <VPhantom> My realloc strategy is certainly not as optimized as `Buffer`'s since it's pure OCaml.
[21:34:20] <companion_cube> you could comment to say that :-°
[21:34:34] <companion_cube> hmm isn't Buffer pure OCaml as well?
[21:34:40] <d_bot> <VPhantom> Kinda feels like a superfluous `+1` but sure if it can help. 😃
[21:34:53] <d_bot> <VPhantom> I thought it had C parts. Let me check again…
[21:35:03] <companion_cube> ah, for fixed-size integer
[21:35:27] <d_bot> <VPhantom> Oh you're right, it only has externals for setting ints.
[21:36:07] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:37:39] <d_bot> <VPhantom> (Nice, their `resize` isn't that different from mine… Except that since I use windows (slices?), when I realloc I also remove the useless bytes at the head. That way my buffers can be used for concurrent reading and writing without growing indefinitely.)
[21:42:57] *** Quits: salkin (~salkin@84.212.156.62) (Quit: salkin)
[21:43:12] *** Joins: salkin (~salkin@84.212.156.62)
[21:45:39] *** Quits: olle (~olle@p5784fa92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[21:50:33] <d_bot> <VPhantom> Alright I abstracted away my impostor syndrome for a few minutes and commented.
[21:53:30] <companion_cube> lol good mention of ocaml-protoc, since, well, it uses Buffer.t :D
[21:53:35] <companion_cube> (have you seen my PR btw? :))
[21:55:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[22:01:58] <d_bot> <VPhantom> Actually `ocaml-protoc` uses `Buffer.t` for writing but `bytes` for reading, AFAIK.
[22:02:26] <companion_cube> yes
[22:02:51] <d_bot> <VPhantom> And yes I finally looked at the actual diffs before submitting. 😉 Running on low sleep today so I'm not uhh… my concentration is abysmal. 😬
[22:02:53] <companion_cube> ahah, there's a limit, I forgot
[22:02:57] <companion_cube> it could be a buffer…
[22:03:22] <d_bot> <VPhantom> It can read buffers? I didn't realize. (I haven't touched it in a month or so.)
[22:06:06] <companion_cube> no, it can't
[22:06:16] <companion_cube> but if we had access to a buffer's internals, then we could
[22:09:31] <d_bot> <VPhantom> Yeah that's what I was trying to convey.
[22:19:57] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[22:28:38] *** Joins: vicfred (~vicfred@user/vicfred)
[22:38:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Remote host closed the connection)
[22:49:08] <d_bot> <RegularSpatula> Yeah zero copy access to the buffer's bytes would be sweet...I was wanting something like this a little while back
[22:50:33] *** Joins: jackhill (~jackhill@kalessin.dragonsnail.net)
[22:56:04] <companion_cube> don't hesitate to comment with your use case…
[22:56:24] <companion_cube> I think long time users have learnt not to rely on Buffer.t for complex stuff, precisely because it's so limited
[22:56:29] <companion_cube> so it's self reinforcing
[22:58:39] <d_bot> <RegularSpatula> yeah I wish i still had a concrete example to give ...it was a little while back now and i ended up abandoning it fairly quickly as i couldn't get the bytes without copying
[22:59:48] <d_bot> <RegularSpatula> some bioinformatics stuff...i like trying to get ocaml as a competitive choice for bioinfomatics
[23:01:28] <d_bot> <RegularSpatula> when i read through the comments on the PR you did...i was expecting like, all sorts of changes to the Buffer module or something, but then looked at the actual changes and its literally just, "oh heres the underlying bytes"
[23:02:28] <d_bot> <RegularSpatula> what's the likelihood that the underlying implementation of Buffer changes after all these years?  i guess that's the argument some in that thread are making for not giving direct access?
[23:04:59] <companion_cube> yeah, the likelihood is precisely 0.000
[23:05:58] <d_bot> <RegularSpatula> lol i see
[23:06:58] <companion_cube> (in my opinion — but really I can't imagine what it could change to)
[23:13:18] *** Joins: olle (~olle@i5E866D84.versanet.de)
[23:39:45] *** Joins: mro (~mro@port-92-195-155-39.dynamic.as20676.net)
[23:41:50] <d_bot> <VPhantom> Since this function is tagged `unsafe`, would it be unreasonable to go for it now and potentially make it actually blit into fresh `bytes` if in some distant future the underlying implementation changes? Sounds like a win-win to me.
[23:49:53] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[23:49:57] <companion_cube> going to end up being CCBytevec or whatever
[23:51:16] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[23:53:49] <d_bot> <VPhantom> I called mine `Buf_bytes` 😉
[23:54:30] <d_bot> <Butanium (@me on answer)> I just made a perf analysis for my program I didn't know `Sys.time()` call were that costly
[23:54:31] <d_bot> <Butanium (@me on answer)> https://cdn.discordapp.com/attachments/436568060288172044/938892728455028856/unknown.png
[23:56:17] <d_bot> <VPhantom> I just checked Core briefly and they seem to copy out of buffers.🤔 I'm surprised since this is kind of performance low-hanging fruit. Maybe they mostly use `bytes` directly in their own stuff.
[23:57:29] <companion_cube> they probably use Async and bigstring stuff for their IOs
[23:59:09] <d_bot> <VPhantom> True, but I remember reading recently about yminsky talking to someone about how `bytes` is better for the GC and to only use `bigstring` for I/O which truly needs it.
