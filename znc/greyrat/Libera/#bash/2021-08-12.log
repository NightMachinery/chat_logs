[00:00:23] *** Quits: wwallace (~afernande@63.240.73.102) (Changing host)
[00:00:23] *** Joins: wwallace (~afernande@user/wwilliam)
[00:00:23] *** wwallace is now known as wwilliam
[00:03:54] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:07:47] *** Joins: zeden (~zeden@user/zeden)
[00:08:06] *** Joins: lavaball (felix@31.204.155.215)
[00:08:07] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[00:10:22] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 268 seconds)
[00:11:33] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[00:14:58] *** Quits: kurahaupo (~kurahaupo@pa49-181-167-238.pa.nsw.optusnet.com.au) (Remote host closed the connection)
[00:14:58] *** Joins: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net)
[00:15:15] *** Quits: arinov (~arinov@212.156.215.30) (Quit: WeeChat 3.1)
[00:15:18] *** Joins: kurahaupo (~kurahaupo@pa49-181-167-238.pa.nsw.optusnet.com.au)
[00:19:00] *** Quits: ninjabuffet (~ninjabuff@user/ninjabuffet) (Ping timeout: 268 seconds)
[00:19:55] *** Joins: arinov (~arinov@212.156.215.30)
[00:20:42] *** Quits: ircseeker3 (~nodebot@108.62.52.153) (Ping timeout: 256 seconds)
[00:22:01] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 248 seconds)
[00:24:20] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:24:35] *** Quits: arinov (~arinov@212.156.215.30) (Client Quit)
[00:25:52] <drew`> thanks Soliton 
[00:27:05] *** Joins: arinov (~arinov@212.156.215.30)
[00:27:09] *** Joins: absc (~absc@dynamic-adsl-94-34-201-166.clienti.tiscali.it)
[00:27:57] *** Quits: magla (~gelignite@55d48471.access.ecotel.net) (Quit: Stay safe!)
[00:32:20] *** Joins: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net)
[00:36:46] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[00:37:37] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 245 seconds)
[00:38:13] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[00:38:32] *** Quits: drew` (~drew@user/drew) (Read error: Connection reset by peer)
[00:38:37] *** Joins: drewa (~drew@user/drew)
[00:39:35] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[00:39:38] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 272 seconds)
[00:39:58] *** Joins: smlavine_ (smlavine@sourcehut/user/smlavine)
[00:39:58] *** smlavine is now known as Guest126
[00:39:58] *** smlavine_ is now known as smlavine
[00:39:59] *** Joins: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net)
[00:40:50] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[00:43:03] *** Quits: Guest126 (smlavine@sourcehut/user/smlavine) (Ping timeout: 268 seconds)
[00:44:04] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 272 seconds)
[00:46:15] *** Joins: strive (~strive@user/strive)
[00:48:40] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:48:54] *** Quits: TomyWork (~TomyLobo@p200300e80f06af00c00d5f5320b62de4.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:49:12] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 268 seconds)
[00:49:48] *** Joins: Crescendo (~Crescendo@user/crescendo)
[00:50:06] *** Quits: n4dir (~user@i5E8666BE.versanet.de) (Remote host closed the connection)
[00:52:20] *** Joins: kj- (~kj@69.70.169.78)
[00:52:57] *** Quits: kj (~kj@beta.aerisnetwork.net) (Read error: No route to host)
[00:52:58] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[00:52:58] *** Quits: strive (~strive@user/strive) (Quit: WeeChat 3.2)
[00:53:06] *** Joins: kj_ (~kj@beta.aerisnetwork.net)
[00:53:12] *** Quits: totenkoph (~scythe@user/totenkoph) (Ping timeout: 244 seconds)
[00:55:18] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:55:57] *** Quits: absc (~absc@dynamic-adsl-94-34-201-166.clienti.tiscali.it) (Quit: Leaving.)
[00:57:14] *** Quits: kj- (~kj@69.70.169.78) (Ping timeout: 268 seconds)
[00:58:14] *** Joins: vysn (~vysn@user/vysn)
[00:58:27] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[00:59:27] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[01:00:37] *** Quits: humky (~humky@user/humky) (Quit: Leaving)
[01:01:29] *** Parts: hypoon (~hypoon@pool-108-31-49-4.washdc.fios.verizon.net) ()
[01:03:41] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:06:01] *** Joins: besnn (~besnn@user/besnn)
[01:07:06] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[01:14:20] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[01:15:32] *** Quits: makara (~sol@196.61.111.63) (Ping timeout: 245 seconds)
[01:21:42] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[01:22:49] *** Joins: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net)
[01:23:03] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[01:23:18] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:23:26] *** Joins: jinsun (~quassel@user/jinsun)
[01:26:26] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[01:26:33] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[01:26:52] *** Joins: et (~et@user/et)
[01:29:39] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:29:50] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 256 seconds)
[01:32:23] *** Quits: rendar (~rendar@user/rendar) ()
[01:32:56] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[01:36:04] *** Quits: yuckey2d (~yuckey2d@195.246.120.52) (Ping timeout: 256 seconds)
[01:38:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:44:01] *** Joins: kurahaupo_ (~kurahaupo@124-171-138-127.tpgi.com.au)
[01:46:08] *** Quits: kurahaupo (~kurahaupo@pa49-181-167-238.pa.nsw.optusnet.com.au) (Ping timeout: 272 seconds)
[01:46:32] *** Joins: howdoi (uid224@id-224.tooting.irccloud.com)
[01:49:06] *** Quits: smlavine (smlavine@sourcehut/user/smlavine) (Quit: nyaa~)
[01:51:01] <Liblx> hi, when running several commands in a bash file, is there a possibility to run 'echo' with just this command to see in a logfile exactly which line began at which point?
[01:51:19] <Liblx> I mean automatically. Not an ech before every line.
[01:52:33] <phy1729> Could probably put a timestamp in PS4 and set -x
[01:54:24] <Liblx> good idea but PS4 is not shown while a list of command runs each after anotehr?
[01:54:27] *** kurahaupo_ is now known as kurahaupo
[01:54:42] *** Joins: yuckey2d (~yuckey2d@195.246.120.52)
[01:55:44] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:56:57] *** Quits: thebombzen (~thebombze@64-233-244-163.static.clv.wideopenwest.com) (Ping timeout: 248 seconds)
[01:58:08] <geirha> # PS4='+ [\t]:' ; set -x ; : one mississippi ; : two missippippi
[01:58:10] <shbot> geirha: + [21:28:09]:: one mississippi
[01:58:10] <shbot> geirha: + [21:28:09]:: two missippippi
[01:58:27] <earnestly> EPOCHSECONDS perhaps
[01:58:44] <earnestly> (If more resolution is needed)
[01:58:55] *** Joins: wender (~wender@191.54.95.27)
[01:59:30] <Liblx> and interesting geirha. and earnestly.
[01:59:46] <Liblx> i'll play with it
[01:59:51] <Liblx> thankls
[02:00:05] <earnestly> ls gets all the thanks
[02:00:06] <tirnanog> it wouldn't offer a greater resolution. EPOCHREALTIME would.
[02:00:34] <earnestly> I don't remember these bash anythings but yeah, that one
[02:00:35] <Liblx> earnestly: ;)
[02:02:04] *** Joins: ninjabuffet (~ninjabuff@user/ninjabuffet)
[02:03:03] *** Quits: wender (~wender@191.54.95.27) (Quit: Leaving)
[02:07:07] <Liblx> sorry, but what are the ':' for, geirha?
[02:07:29] <earnestly> !:
[02:07:29] <greybot> : is a builtin identical to the 'true' builtin; they do nothing and have an exit status of 0
[02:07:50] *** Joins: fuzzybear3965 (~fuzzybear@2a03:7380:2102:6c35:904:59e0:45d7:7fa7)
[02:08:09] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 268 seconds)
[02:08:16] <fuzzybear3965> I have a command that generates text to STDOUT, call it foo.
[02:08:30] <fuzzybear3965> I also have a command that accepts text on STDIN (only).
[02:08:32] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:08:32] <fuzzybear3965> Call it bar.
[02:08:48] <fuzzybear3965> I'm supposed to use the two like     foo | bar
[02:08:56] <fuzzybear3965> But, I want to see the output of foo, also.
[02:09:02] <fuzzybear3965> So, I think I should use tee.
[02:09:09] <fuzzybear3965> But, I'm having a tough time using tee.
[02:09:18] <fuzzybear3965> foo | tee bar doesn't work.
[02:09:25] <phy1729> foo | tee /dev/tty | bar
[02:09:48] <fuzzybear3965> ............. trying...
[02:10:01] <fuzzybear3965> Oh, yeah!
[02:10:05] <phy1729> Of course if bar has anyoutput that'll get jumbled in too
[02:10:07] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[02:10:08] <geirha> # PS4='+ [\t]:' ; set -x ; sleep 1; true
[02:10:10] <fuzzybear3965> Okay, phy1729I have a followup question.
[02:10:11] <shbot> geirha: + [21:40:09]:sleep 1
[02:10:11] <shbot> geirha: + [21:40:10]:true
[02:10:12] <Liblx> greybot:thanks
[02:10:17] <fuzzybear3965> bar has no output 
[02:10:21] *** Joins: GNUHacker (~foobar@fsf/member/GNUHacker)
[02:10:24] <fuzzybear3965> I'm going to change the question slightly.
[02:10:38] <fuzzybear3965> Imagine that foo puts out to STDERR *and* STDOUT.
[02:10:48] <fuzzybear3965> I want the STDERR routed to bar
[02:10:57] <fuzzybear3965> I want the STDOUT routed to the screen (normal STDOUT).
[02:11:14] <Liblx> geirha and earnestly: thanks!!
[02:11:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[02:11:23] <fuzzybear3965> I tried foo 2> tee >(bar) and a bunch of permutations but I have no idea what I'm doing.
[02:11:32] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[02:11:38] *** Joins: L3 (~L3@user/l3)
[02:11:55] <phy1729> foo 2>&1 >/dev/tty | tee /dev/tty | bar    but stdout and stderr will no longer be sync'd
[02:11:56] <geirha> foo 2> >(tee >(bar) >&2)
[02:12:17] <earnestly> !logging > fuzzybear3965 
[02:12:17] <greybot> fuzzybear3965: To log all subsequent output (+ stderr): exec >>somefile 2>&1 ## To log all your actions, plus stdout+stderr, add set -x after that. ## To log *and also pass through* see http://mywiki.wooledge.org/BashFAQ/106
[02:12:39] <fuzzybear3965> phy1729 What do you mean they won't be synced? They flush at different times, you mean?
[02:13:15] <phy1729> yeah once the streams are split they can hit the terminal at different times and will be seen out of order with each other
[02:13:16] <geirha> stderr will have a longer route to the tty than stdout
[02:13:26] <fuzzybear3965> geirha I don't understand yours, but I understand phy1729's solution. Can you spell it out a bit for me?
[02:13:28] <phy1729> geirha: I like that; it's clever
[02:13:43] *** Quits: arinov (~arinov@212.156.215.30) (Quit: WeeChat 3.1)
[02:13:45] <fuzzybear3965> phy1729 Ah, okay. Yeah, I assumed they wouldn't be synced.
[02:14:03] <geirha> it's what you attempted, you just forgot >() around the tee
[02:14:05] <fuzzybear3965> geirha [regarding longer route] thanks!
[02:14:07] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Remote host closed the connection)
[02:14:30] *** Joins: mnrmnaugh (~mnrmnaugh@68.162.206.56)
[02:14:42] <fuzzybear3965> geirha I don't understand >(tee >(bar) >&2) at all, really.
[02:15:10] <fuzzybear3965> >( ... ) defines a fifo?
[02:15:25] <geirha> A > >(B)  is equivalent to  B < fifo & A > fifo
[02:15:52] <fuzzybear3965> Mmmmm. So, B is reading from the FIFO and A is inserting.. Right?
[02:15:54] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Remote host closed the connection)
[02:16:07] <geirha> yes
[02:16:15] <geirha> A > >(B >(C))  is equivalent to B fifo2 < fifo1 & A > fifo1
[02:16:18] * earnestly luv me fifos
[02:16:35] <geirha> err  A > >(B >(C))  is equivalent to C < fifo2 & B fifo2 < fifo1 & A > fifo1
[02:17:08] *** Joins: mnrmnaugh (~mnrmnaugh@68.162.206.56)
[02:17:10] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 272 seconds)
[02:17:39] <fuzzybear3965> Oh, so fifo1 is pumped into fifo2 and B is taking fifo2 as an argument?
[02:17:43] <fuzzybear3965> C is reading from fifo2?
[02:18:34] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Remote host closed the connection)
[02:18:43] <geirha> yes, >() is replaced with a filename to a fifo or equivalent
[02:18:48] <geirha> # echo >(:)
[02:18:49] <shbot> geirha: /dev/fd/63
[02:18:57] <fuzzybear3965> Mmmmmm
[02:19:08] <fuzzybear3965> geirha Okay, I'm pretty settled. Just one outstanding question.
[02:19:23] *** Joins: mnrmnaugh (~mnrmnaugh@68.162.206.56)
[02:19:35] <fuzzybear3965> What does the last >&2 do in >( tee >(bar) >&2) ?
[02:19:57] <geirha> just sends the original stderr output back to stderr
[02:20:12] <geirha> might not be necessary
[02:20:12] <fuzzybear3965> What's the effect of that in this context, though? Why is it needed?
[02:20:33] <fuzzybear3965> Ohhh, in case I want my /dev/stderr to still receive the original STDERR.
[02:20:36] <geirha> in case you want to still have stderr and stdout separate
[02:20:39] <fuzzybear3965> Got it.
[02:20:40] <fuzzybear3965> Thanks!
[02:20:54] <fuzzybear3965> Man, I would never have gotten that on my own.
[02:21:08] <fuzzybear3965> Will this work in any POSIX-compliant shell (zsh, bash, etc.)?
[02:21:31] <phy1729> bash and zsh yes, but >( ) isn't POSIX
[02:21:49] <fuzzybear3965> Oh, is it specified by any standard?
[02:21:52] <llua> and how >() works differs between shells
[02:21:54] *** Joins: besnn (~besnn@user/besnn)
[02:22:16] <fuzzybear3965> Basically, can I say that the above statement will work in an X-compliant shell for some X?
[02:22:29] <phy1729> no
[02:22:38] <fuzzybear3965> Got it. Thanks a lot.
[02:22:39] *** Quits: darkxploit (~jay@32.209.19.50) (Quit: darkxploit)
[02:23:47] <geirha> if you replace the >() with some tedious mkfifo(1) action, plus some cleanup, it'll be posix 
[02:24:03] <phy1729> The pipeline I had was POSIX iirc
[02:25:13] <fuzzybear3965> I think I prefer foo 2>&1 >/dev/tty | tee /dev/tty | bar 
[02:25:23] <fuzzybear3965> It's more legible imo
[02:26:40] <fuzzybear3965> Oh, weird.
[02:26:55] <fuzzybear3965> So, `foo` in my case is actually something like `make foo`
[02:27:30] *** Joins: finsternis (~X@23.226.237.192)
[02:27:33] <fuzzybear3965> When I do make foo 2>&1 >/dev/tty | tee /dev/tty | bar   the command fails.
[02:27:51] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:28:05] <fuzzybear3965> bar exits immediately claiming it couldn't process the input....
[02:28:06] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:28:34] <fuzzybear3965> Oh, wait. This might be because STDERR is outputting data that bar can't parse... let me check3.
[02:30:11] <fuzzybear3965> Oh, phy1729 I think your solution doesn't do what I want.
[02:30:40] <fuzzybear3965> Does foo 2>&1 >/dev/tty | tee /dev/tty | bar    combine STDERR and STDOUT before it's fed to bar?
[02:31:05] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:31:26] <phy1729> No I didn't think you asked for that
[02:31:32] <fuzzybear3965> Yeah, I don't want that.
[02:31:43] <fuzzybear3965> STDERR needs to go to bar and STDOUT needs to go to the screen.
[02:32:04] *** Quits: mnrmnaugh (~mnrmnaugh@68.162.206.56) (Quit: Leaving)
[02:32:12] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 245 seconds)
[02:32:25] *** Joins: mnrmnaugh (~mnrmnaugh@68.162.206.56)
[02:32:28] <fuzzybear3965> But, with your solution STDERR is still printed to the screen.
[02:32:33] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:32:35] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:32:45] <fuzzybear3965> And foo's STDOUT looks to be printed twice.
[02:33:50] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[02:34:28] <phy1729> Ok so foo's stdout goes to the screen and stderr goes just to bar not to bar and the screen?
[02:34:42] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 245 seconds)
[02:35:32] <earnestly> (I like POSIX sh precisely because you look at doing this and the answer becomes evidence: "nope")
[02:35:39] <earnestly> evident*
[02:35:54] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[02:36:00] <fuzzybear3965> phy1729 exactly
[02:36:16] <phy1729> kill the tee
[02:36:22] <fuzzybear3965> In the middle?
[02:36:36] <earnestly> There is only one tee
[02:36:37] <fuzzybear3965> Oh.
[02:36:38] <fuzzybear3965> Duh.
[02:36:43] <fuzzybear3965> earnestly thanks.
[02:36:55] <earnestly> Lots of tty though
[02:36:57] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:37:07] *** Quits: alzgh (~alzgh@216.155.158.214) (Ping timeout: 246 seconds)
[02:37:46] *** Quits: L3 (~L3@user/l3) (Quit: o/)
[02:38:04] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[02:38:53] <earnestly> fuzzybear3965: Keep in mind that if you use dev/tty like this that you won't be able to capture the output elsewhere using pipes and such
[02:39:32] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 256 seconds)
[02:39:44] *** Joins: Crescendo (~Crescendo@user/crescendo)
[02:39:50] <earnestly> # echo foo > /dev/tty | { read -r input; printf '[%s]' "$input"; }
[02:39:51] <shbot> earnestly: foo
[02:39:51] <shbot> earnestly: []
[02:40:15] <fuzzybear3965> Fair enough earnestly
[02:40:49] <earnestly> Which is extremely annoying when you encounter an install script that takes user input, which reads from /dev/tty, making simple automation impossible
[02:40:57] <fuzzybear3965> Anyone know why `(make int-test) 2>&1 >/dev/null | ~/go/bin/go-test-report` fails when `( (make int-test) 2>&1 >/dev/tty ) | ~/go/bin/go-test-report` succeeds?
[02:41:14] *** Quits: fedenix_ (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:41:21] <fuzzybear3965> Why do I need the parentheses around the first "block"?
[02:41:31] <earnestly> I don't know
[02:41:40] <phy1729> Are you in zsh by chance?
[02:41:41] <earnestly> Why did you add them?
[02:41:47] <fuzzybear3965> phy1729 Yeah.
[02:41:48] <earnestly> Oh, is this multiio
[02:41:55] <phy1729> It's multios
[02:41:59] <fuzzybear3965> ???
[02:42:01] <earnestly> That shit is evil
[02:42:03] <earnestly> lol
[02:42:10] <earnestly> To be enabled by default
[02:42:19] <fuzzybear3965> It seemed like `bar` was picking up /dev/tty ...
[02:42:27] <earnestly> fuzzybear3965: unsetopt multios
[02:42:27] <phy1729> { make int-test 2>&1 >/dev/null; } | ...
[02:42:39] <fuzzybear3965> Curly brackets are better?
[02:42:48] <phy1729> It kills multios here
[02:42:51] <fuzzybear3965> earnestly What is this thing I'm unsetting?
[02:42:59] <earnestly> fuzzybear3965: You can read about it in your zsh manual
[02:43:14] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:43:15] <earnestly> #   % { print stdout; print stderr >&2; } 2>&1 > /dev/null | xargs
[02:43:16] <shbot> earnestly: bash: syntax error near unexpected token `}'
[02:43:17] <earnestly> #   stderr stdout
[02:43:19] <shbot> earnestly: bash: stderr: command not found
[02:43:21] <fuzzybear3965> Ah, sorry. I'm in #bash . I should have mentioned earlier.
[02:43:30] <earnestly> fuzzybear3965: There is #zsh as well
[02:43:55] <earnestly> But that's what it does
[02:43:56] <fuzzybear3965> I'll go there next time I have a scripting question. I didn't even think to check. Sorry, everyone.
[02:44:02] <earnestly> If enabled (which it is by default)
[02:44:47] <emanuele6> fuzzybear3965: () run what's inside in a subshell; {;} run what's inside in the current shell and just groups the commands 
[02:44:52] <fuzzybear3965> Found it: https://zsh.sourceforge.io/Doc/Release/Redirection.html .
[02:45:04] <fuzzybear3965> emanuele6 Ah, thank you!
[02:45:05] <earnestly> fuzzybear3965: `man zshall' typically
[02:45:10] <earnestly> Then /multios
[02:45:21] <fuzzybear3965> Woah. `zshall`?
[02:45:24] <fuzzybear3965> I would never have known.
[02:45:47] <phy1729> zshmisc in this case, but that's #zsh information
[02:45:54] <fuzzybear3965> :)  earnestly I found it :)  
[02:45:55] <earnestly> Their manuals are a bit messy but generally good information if you find the right section
[02:45:59] <fuzzybear3965> It was `man zshall`.
[02:46:01] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:46:22] <fuzzybear3965> `man zshmisc` works too.
[02:46:38] <earnestly> Yeah, they're broken up.  zshall is just more searchable
[02:46:46] <fuzzybear3965> Because it's everything?
[02:46:47] <earnestly> Like ffmpeg-all
[02:46:49] <earnestly> Yep
[02:46:54] <fuzzybear3965> Thanks a lot!
[02:47:12] <earnestly> ffmpeg-all is 35k lines
[02:47:15] <dre> # man 
[02:47:16] <shbot> dre: bash: man: command not found
[02:48:57] <emanuele6> # find / -name '*.h'
[02:48:58] <shbot> emanuele6: no output
[02:49:37] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[02:50:38] *** Joins: teawhydee[m] (~teawhydee@2001:470:69fc:105::d6ee)
[02:51:27] *** Joins: mci64 (~mci64@185.242.190.95)
[02:52:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:55:00] *** Joins: shaggysi0 (~shaggysi0@46.69.95.119)
[02:58:29] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Remote host closed the connection)
[02:58:35] <fuzzybear3965> Where can I read about how to understand the mechanics of this? err  A > >(B >(C))  is equivalent to C < fifo2 & B fifo2 < fifo1 & A > fifo1 
[02:58:43] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[02:58:53] <fuzzybear3965> Is this redirection? It seems like it's a few concepts.
[02:59:59] <earnestly> !>() > fuzzybear3965 
[02:59:59] <greybot> fuzzybear3965: Process Substitution: <(command) or >(command) is replaced by a FIFO or /dev/fd/* entry. Basically shorthand for setting up a named pipe. See <http://mywiki.wooledge.org/ProcessSubstitution>. Example: diff -u <(sort file1) <(sort file2)
[03:00:07] <fuzzybear3965> Substitution.
[03:00:08] <fuzzybear3965> Thanks!
[03:00:27] <earnestly> fuzzybear3965: Command substitution isn't the same
[03:00:48] <fuzzybear3965> !command substitution
[03:00:54] <earnestly> !$()
[03:00:54] <greybot> Command Substitution: "$(cmd "foo bar")" causes the command 'cmd' to be executed with the argument 'foo bar' and "$(..)" will be replaced by the *output*. See http://mywiki.wooledge.org/BashFAQ/002 and http://mywiki.wooledge.org/CommandSubstitution
[03:01:04] <fuzzybear3965> Oh, I've done that!
[03:01:10] <fuzzybear3965> I didn't know that's what it was called.
[03:02:46] *** Quits: m0viefreak (~asdf@user/m0viefreak) (Remote host closed the connection)
[03:03:52] *** Quits: jess (~jess@libera/staff/jess) (Ping timeout: 600 seconds)
[03:06:53] *** Quits: drewa (~drew@user/drew) (Quit: WeeChat 3.2)
[03:09:42] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 245 seconds)
[03:10:01] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Ping timeout: 248 seconds)
[03:10:57] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[03:15:03] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[03:16:50] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[03:17:25] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 258 seconds)
[03:18:44] *** Quits: fuzzybear3965 (~fuzzybear@2a03:7380:2102:6c35:904:59e0:45d7:7fa7) (Quit: Client closed)
[03:19:00] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[03:19:44] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[03:21:07] *** Joins: YaoNai (~YaoNai@user/yaonai)
[03:21:12] <Liblx> geirha: works awesome. didn't know about PS4, only about PS1!
[03:21:30] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Remote host closed the connection)
[03:22:22] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[03:26:46] *** Joins: Sabinno (~Sabinno@75.26.52.152)
[03:27:18] *** Joins: fuzzybear3965 (~fuzzybear@2a03:7380:2102:6c35:904:59e0:45d7:7fa7)
[03:31:25] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[03:31:49] *** Quits: chomwitt (~chomwitt@ppp-2-85-147-24.home.otenet.gr) (Remote host closed the connection)
[03:32:02] *** Quits: YaoNai (~YaoNai@user/yaonai) (Quit: leaving)
[03:32:09] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:32:33] *** Joins: jsrnop (~mark@user/jsrnop)
[03:33:24] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:34:26] *** Joins: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net)
[03:34:29] <sudomann> current_context=("$(kubectl config current-context | tr '_' ' ')")
[03:34:35] <sudomann> does that produce an array?
[03:34:53] <sudomann> kubectl config current-context spits out a single line
[03:35:19] <emanuele6> sudomann: it produces an array with one element, the output of the command
[03:35:35] <sudomann> oh dammit
[03:35:56] <emanuele6> if you want word splitting to occur remove the quotes (AND USE set -m)
[03:36:53] <emanuele6> not set-m, set-f
[03:37:14] <emanuele6> i always think it's set-m for some reason
[03:37:21] <emanuele6> !-m > sudomann 
[03:37:30] <emanuele6> !set-f > sudomann 
[03:37:30] <greybot> sudomann: ''set -f'' disables glob expansion. You may need this in constructs like ''for w in $words'' or ''array=($words)'' just in case one of the words contains a * or ?.
[03:37:44] <sudomann> mmm unsure whether thatll bungle other parts of the script
[03:38:28] <emanuele6> how does the output of `kubectl config current-context` look like and what do you want to have in current_context?
[03:39:28] <sudomann> gke_our-project_us-east1_clustername
[03:39:46] <sudomann> I wanted to split by _, put in an array and grab the last element with [-1]
[03:40:07] <emanuele6> IFS=_ read -a current_context < <(kubectl config current-context)
[03:40:10] <emanuele6> !next
[03:40:10] <greybot> Another satisfied customer! Next please!
[03:40:21] <emanuele6> read -ra, sorry
[03:41:07] <sudomann> I've been getting this stupid message for the last half hour trying to use read as per SO
[03:41:10] <sudomann> read: bad option: -a
[03:41:19] <emanuele6> what shell are you using?
[03:41:25] <emanuele6> clearly not bash
[03:42:37] <sudomann> aahh zsh
[03:42:40] <sudomann> damn mac
[03:42:58] <emanuele6> i think zsh has -A
[03:43:02] <emanuele6> but i'm not sure
[03:43:19] <sudomann> No worries, its running in a bash shell in docker
[03:43:35] <sudomann> I just need to remember to switch to bash when testing things on the host
[03:43:44] <emanuele6> and i'm not even sure if process substitution and IFS work as you would expect them to work in bash so eh
[03:43:46] *** Joins: sublim20 (~sublim20@user/sublim20)
[03:44:36] <sudomann> I dont understand why `IFS=_ read -a current_context < <(kubectl config current-context)` 
[03:44:43] <sudomann> it only contains the last item
[03:44:43] <emanuele6> -ra is better
[03:44:49] <sudomann> without me using [-1]
[03:45:44] <emanuele6> # IFS=_ read -ra current_context <<< gke_our-project_us-east1_clustername; declare -p current_context
[03:45:45] <shbot> emanuele6: declare -a current_context=([0]="gke" [1]="our-project" [2]="us-east1" [3]="clustername")
[03:46:19] <sudomann> ugh sorry I said last when i meant first
[03:46:46] <greycat> you probably tried something like  echo $array  which is not what you think
[03:47:06] <sudomann> jesus all these quirks I find every time
[03:47:47] <fuzzybear3965> How can I create a fifo and pass it to a shell script?
[03:47:58] <greycat> !xy
[03:47:58] <greybot> http://mywiki.wooledge.org/XyProblem -- "I want to do X, but I'm asking how to do Y..."
[03:48:04] *** Joins: irrgit (~ch33se@194.59.250.202)
[03:48:07] <emanuele6> mkfifo, idk
[03:48:40] <fuzzybear3965> Yep, that worked!
[03:49:52] <dre> hey guys
[03:49:59] <sudomann> welp this doesnt work:
[03:50:00] <sudomann> echo ${current_context[-1]}
[03:50:00] <sudomann> bash: current_context: bad array subscript
[03:50:10] <greycat> !faq 5
[03:50:10] <greybot> https://mywiki.wooledge.org/BashFAQ/005 -- How can I use array variables?
[03:51:48] <emanuele6> !quote > also this
[03:51:48] <greybot> also this: https://mywiki.wooledge.org/Quotes
[03:52:02] *** Joins: john1_ (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[03:53:18] *** Quits: luvalon1 (~luva@178.239.167.170) (Read error: Connection reset by peer)
[03:53:40] *** Joins: luvalon1 (~luva@178.239.167.170)
[03:54:13] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Ping timeout: 268 seconds)
[03:55:47] <dre> if I'm writing a completion script, where I write something like "progname somestring::someotherstring<TAB>" - I can get the completions I want, but selecting one of them only replaces from the last "::" onwards. 
[03:56:00] <dre> rather than replacing the whole line 
[03:57:09] <dre> I do have the "somestring::someotherstring" in a variable though, so I could get the tab-completion i want, and then remove the original completion string, right? ( and thus just return the tab completed bit.
[03:57:23] <dre> !strings
[03:57:23] <greybot> Bash parameter expansion does lots of string operations. See !faq 100 for info on string operations in bash.
[03:57:30] <dre> !faq 100
[03:57:30] <greybot> https://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
[03:57:37] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[04:00:16] <dre> # echo "${'this is a string'/'this is a'}"
[04:00:17] <shbot> dre: bash: ${'this is a string'/'this is a'}: bad substitution
[04:00:28] <dre> # echo "${'this is a string'/'this is a'/}"
[04:00:29] <shbot> dre: bash: ${'this is a string'/'this is a'/}: bad substitution
[04:00:31] <dre> ree
[04:00:35] <greycat> parameter expansions are called that because they expand a parameter.  you can't use a constant string.
[04:01:10] <dre> ok thanks
[04:01:48] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[04:03:08] <dre> ok cool, so now my script is working but it somehow seems to stuff up how it's presented. 
[04:04:05] <dre> greycat, does the ${//} do anything funky with stdout? 
[04:04:20] <Sabinno> Just to double check input from other channels: Can anyone here think of any reason why `dnf upgrade` commands don't work in my script? #centos says that it's because `dnf` is not meant to be scripted, but I find that odd. https://paste.centos.org/view/60aadb52
[04:04:22] <greycat> It does not manipulate file descriptors in any way.
[04:04:38] <greycat> ${parameter//search/replace}  is simply an expansion that results in a strnig.
[04:07:11] *** Joins: be1m0nt (~be1m0nt@pool-100-37-244-180.nycmny.fios.verizon.net)
[04:07:53] <dre> ok, so when I use my compreply it for some reason puts it on a new line.
[04:08:47] <dre> renders on a new line. 
[04:09:13] <dre> if I press <enter> to run the command. ^C out, and then press up to go back in history, the command looks correct. 
[04:09:37] <dre> this is really annoying; i was 99% done :c
[04:10:04] *** Parts: be1m0nt (~be1m0nt@pool-100-37-244-180.nycmny.fios.verizon.net) ()
[04:12:09] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[04:12:55] *** Quits: nosolls (~nosolls@user/nosolls) (Quit: leaving)
[04:13:02] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[04:13:15] <dre> found it
[04:15:02] *** Quits: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[04:15:38] *** Joins: pasteban (~pasteban@157.146.251.23.bc.googleusercontent.com)
[04:17:18] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[04:17:36] *** Joins: totenkoph (~scythe@user/totenkoph)
[04:18:26] <dre> greycat, is there any bits I should know about the search and replace? 
[04:18:52] <greycat> I have no idea what you're doing or why you're doing it.  I know nothing about completion crap.
[04:19:16] <greycat> does the thing you're replacing appear at a random location anywhere in the input string?
[04:19:20] <emanuele6> !completion
[04:19:20] <greybot> The "elders" in this channel mostly don't use tab completion, so can't help you, but a few of us do, so you may need to wait a while for help. See also !completion2 !completion3 and !completion4
[04:19:24] *** Joins: smlavine (smlavine@sourcehut/user/smlavine)
[04:19:34] <greycat> or is it always at the beginning, or always at the end...
[04:19:40] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[04:19:55] <dre> because I have $var1="filename.py::something::else" and $var2="filename.py::somet" --- I want to get a string that is just "hing::else" 
[04:20:01] *** Quits: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com) (Remote host closed the connection)
[04:20:15] <emanuele6> do you actually have $var= ?
[04:20:20] <greycat> so you want to remove var2's content from the beginning of var1
[04:20:37] *** Joins: checkbot (~checkbot@157.146.251.23.bc.googleusercontent.com)
[04:20:37] <dre> actually, maybe not. I think I want "something::else" because the compreply replaces the whole word. -- but I digress for now. 
[04:20:38] <greycat> that would be ${var1#"$var2"}
[04:20:43] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:20:45] <dre> yes
[04:20:49] <dre> oh ok cool 
[04:20:57] <dre> would ${var1/var2/} not work? 
[04:21:11] <greycat> *sigh*
[04:22:26] <dre> hey don't get mad at me cause bash is a confusing heap of shit; why wouldn't ${var1/var2/} logically work? 
[04:22:39] <greycat> It might work.  It's a dumb choice.
[04:22:48] <emanuele6> because ${var/search} searches the whole string, not from the beginning
[04:22:51] <dre> ok thats fine 
[04:23:15] <dre> that works wonderfully
[04:23:16] <dre> thanks
[04:23:35] <emanuele6> ${var1/#$var2} searches from the beginning, but then if you have to hope that you don't have magic characters in var2
[04:23:49] <dre> yeah I figured the "" was to escape it out? 
[04:24:14] <emanuele6> tbf, you have to hope that also with ${var1#$var2}
[04:24:16] <greycat> When you know you want to remove from the beginning, you should just use the # operator which was built to do that exact thing.
[04:24:24] *** Joins: downunder (~downunder@110.151.122.76)
[04:24:32] <emanuele6> i agree with greycat
[04:24:39] <dre> ye ok
[04:25:03] <dre> !completion3
[04:25:04] <greybot> Then again, many of us *DO* use tab completion, and some of us have written our own completion functions.
[04:25:15] <dre> !completion3
[04:25:15] <greybot> Then again, many of us *DO* use tab completion, and some of us have written our own completion functions.
[04:25:20] <dre> oh right
[04:25:21] <dre> lol
[04:26:49] *** Quits: downunder (~downunder@110.151.122.76) (Client Quit)
[04:27:54] <dre> damn, so my guestimate was right, tab-complete will actually replace that word rather than just appending to it; -- would I then, first, ${var2%%::} to remove everything after the last ::, and then do the ${var1#"$var2"}? so then it's the whole "something::else" rather than "hing::else"
[04:28:39] *** Joins: w0ng (~w0ng@103.1.212.148)
[04:28:57] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 248 seconds)
[04:31:10] <emanuele6> i don't think i understood that
[04:31:46] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[04:32:02] <greycat> I understand nothing he's saying.  Maybe someone who does completion functions will check in.
[04:32:28] <emanuele6> dre: ${var2%%::} is the same as ${var2%::} and what it does is "remove '::' from the end of var2 if var2 ends in '::'"
[04:32:29] <dre> don't worry about the completion. I'm just talking about string substitutions
[04:32:49] *** Quits: TomyLobo (~TomyLobo@p200300e80f06af002c8192c8d5d1289f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[04:32:56] <greycat> But you are NOT.
[04:32:58] <dre> yep, I think i meant ::* 
[04:33:13] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[04:33:22] <dre> lol yes greycat I am, you can ignore compreply altogether. 
[04:33:25] <greycat> You are talking about how some completion thing mdoes some mysterious thing involving replacing words instead of appending to words.
[04:33:58] <dre> yes, it replaces with whatever information I put in "$VAR" -- I'm trying to get the write value to put in that var. 
[04:34:01] <emanuele6> dre: still doesn't make sense
[04:34:02] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[04:34:09] <emanuele6> # var2="filename.py::somet"; echo "${var2%%::*}"
[04:34:11] <shbot> emanuele6: filename.py
[04:34:21] <greycat> So you simply want var1=${var1#"$var2"}  ?
[04:34:35] <emanuele6> you say you want ${var2%::*}, but you write ${var2%%::} and ${var2%%::*}
[04:34:55] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[04:34:55] *** Quits: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca) (Ping timeout: 268 seconds)
[04:34:57] <dre> is % just the last occurrence? 
[04:35:12] <greycat> !faq 100
[04:35:12] <greybot> https://mywiki.wooledge.org/BashFAQ/100 -- How do I do string manipulations in bash?
[04:35:26] <emanuele6> yeah, just read the faqs tbh
[04:35:29] <dre> because I could have "filename.py::something::else::half-a-string"  and I want to remove the half-a-string
[04:35:33] <dre> yeah cheers
[04:35:50] <dre> i just keep forgetting 
[04:36:55] <dre> yeah that works a treat, thanks 
[04:40:03] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:40:20] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[04:41:47] <dre> thanks guys this is great, this is my hot garbage, i hope you like: https://dpaste.org/V5Y1#L
[04:42:23] *** Quits: Sabinno (~Sabinno@75.26.52.152) (Quit: Client closed)
[04:42:24] <dre> i realise now that the "ends_with" functions and whatnot could be changed but cbf
[04:43:27] <emanuele6> yeah, you also have to hope that $2 doesn't have special characters with ends_with
[04:43:57] <emanuele6> [[ $1 == *"$2" ]] would do the same without special character non-sense
[04:44:05] <dre> I thought bash scripting relied on nothing but hope :)
[04:44:11] <dre> neat
[04:44:37] <emanuele6> same for contains string: [[ $1 == *"$2"* ]]
[04:45:25] <dre> thanks
[04:46:14] *** Joins: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca)
[04:50:07] *** Quits: fuzzybear3965 (~fuzzybear@2a03:7380:2102:6c35:904:59e0:45d7:7fa7) (Ping timeout: 246 seconds)
[04:50:10] *** Joins: ferdna (~ferdna@user/ferdna)
[04:51:06] *** Quits: djph (~dpurgert@104-57-151-177.lightspeed.bcvloh.sbcglobal.net) (Quit: leaving)
[04:55:37] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Remote host closed the connection)
[04:56:15] *** Joins: sublim20 (~sublim20@user/sublim20)
[04:57:06] *** Joins: Bhavuk (~BTaneja@122.173.26.212)
[04:59:05] *** Joins: djph (~dpurgert@68.sub-174-248-110.myvzw.com)
[05:02:01] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 248 seconds)
[05:05:04] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 272 seconds)
[05:06:45] *** Quits: reset (~reset@user/reset) (Quit: reset)
[05:07:33] *** Quits: irrgit (~ch33se@194.59.250.202) (Quit: Leaving)
[05:08:43] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:10:33] *** Quits: sudomann (~sudomann@c-73-133-131-19.hsd1.md.comcast.net) (Quit: leaving)
[05:11:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[05:13:07] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:15:37] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[05:15:45] *** Joins: cark (~cark@91.110.54.120)
[05:16:13] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[05:18:41] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[05:19:20] *** Quits: Administratorte (~sq@tempest.math.colostate.edu) (Quit: WeeChat 3.1)
[05:23:27] *** Joins: zebrag (~chris@user/zebrag)
[05:24:00] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[05:26:02] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[05:26:47] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[05:27:18] *** Joins: jinsun (~quassel@user/jinsun)
[05:28:21] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[05:30:20] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[05:30:24] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[05:33:30] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[05:34:29] *** Joins: vlm (~vlm@user/vlm)
[05:34:34] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[05:34:43] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:37:18] *** Quits: killown (~killown@user/killown) (Quit: Leaving)
[05:45:12] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[05:45:23] *** Quits: greycat (~greg@209.142.155.49) (Quit: Bye)
[05:47:42] *** Joins: earendel (uid498179@user/earendel)
[05:48:18] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[05:48:41] *** Joins: Crescendo (~Crescendo@user/crescendo)
[05:49:03] *** Quits: tejr (~tejr@user/tejr) (Quit: leaving)
[05:50:33] *** Quits: kurahaupo (~kurahaupo@124-171-138-127.tpgi.com.au) (Ping timeout: 248 seconds)
[05:57:23] *** Joins: kurahaupo (~kurahaupo@124-171-138-127.tpgi.com.au)
[05:57:56] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[05:59:00] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Quit: Leaving...)
[06:00:18] *** Quits: shaggysi0 (~shaggysi0@46.69.95.119) (Remote host closed the connection)
[06:02:06] *** Joins: ChmEarl (~chmearl@user/chmearl)
[06:04:30] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:04:41] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[06:04:42] *** Quits: przemoc86 (~przemoc@89-72-24-4.dynamic.chello.pl) (Ping timeout: 245 seconds)
[06:06:30] *** Joins: przemoc (~przemoc@user/przemoc)
[06:08:13] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:09:24] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[06:10:57] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 245 seconds)
[06:11:11] *** Joins: keypushe- (keypusher@user/keypusher)
[06:11:30] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 272 seconds)
[06:14:22] *** Quits: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[06:14:24] *** keypushe- is now known as keypusher
[06:17:33] *** Quits: djph (~dpurgert@68.sub-174-248-110.myvzw.com) (Quit: leaving)
[06:17:37] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:18:16] *** Quits: zouhair7 (~zouhair@lnsm1-montreal02-142-118-47-137.internet.virginmobile.ca) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[06:18:52] *** Joins: akoana (~ah@user/akoana)
[06:20:13] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[06:20:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[06:21:52] *** Quits: kapad (~kapad@46.246.193.116.dsl.dyn.forthnet.gr) (Quit: Leaving)
[06:24:44] *** Joins: zhangxiaofei (~fzhan@111.203.234.210)
[06:24:59] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:25:27] *** Quits: kj_ (~kj@beta.aerisnetwork.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[06:27:53] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[06:36:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:37:50] *** Quits: garoto (~garoto@linux.is.not.uni.cx) (Quit: Leaving)
[06:39:36] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[06:40:51] *** Quits: zhangxiaofei (~fzhan@111.203.234.210) (Quit: Leaving.)
[06:41:30] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:41:53] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[06:42:24] *** Joins: zhangxiaofei (~fzhan@111.203.234.210)
[06:43:22] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[06:43:43] <xx> is there anything special about functions that start with and underscore, like _myFunction() { ...
[06:43:52] <xx> s/and/an
[06:44:16] <phy1729> Nothing special to bash about them
[06:44:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[06:44:45] <xx> oh, does it have some special meaning in posix shell, or dash, or something like zsh?
[06:46:16] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[06:46:24] <phy1729> Well for zsh they're commonly completers, but it's just humans trying to say don't use this nothing special to the shell.
[06:47:57] <neshpion> afaict in languages with no encapsulation, leading underscores indicate mock "private" fields/methods
[06:48:08] <neshpion> by convention
[06:48:41] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[06:50:01] *** Joins: Superstars111 (~jared@li227-215.members.linode.com)
[06:51:49] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[06:53:12] <xx> thank you
[06:55:02] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[06:58:22] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[06:58:30] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[06:59:36] *** Joins: jess (~jess@libera/staff/jess)
[07:01:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[07:03:42] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[07:04:59] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[07:06:17] *** Joins: jos1 (~jos3@dyndsl-091-248-054-003.ewe-ip-backbone.de)
[07:07:14] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[07:08:25] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[07:08:57] *** Quits: jos2 (~jos3@dyndsl-091-096-044-167.ewe-ip-backbone.de) (Ping timeout: 248 seconds)
[07:11:21] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[07:12:41] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[07:13:08] *** Joins: jmcantre2 (~weechat@user/jmcantrell)
[07:14:22] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[07:16:28] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[07:16:29] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[07:17:14] *** Joins: pystardust (~pystardus@117.96.229.96)
[07:17:34] *** Joins: aakashi2001 (~aakashi20@103.61.255.35)
[07:17:42] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[07:19:37] *** Quits: jmcantre2 (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[07:24:50] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[07:26:57] *** Joins: aakashi2009 (~aakashi20@103.61.255.3)
[07:27:10] <xx> if 'typeset' and 'declare' are really synonyms, which one should I use?
[07:27:48] *** Joins: sublim20 (~sublim20@user/sublim20)
[07:28:12] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[07:29:06] *** Quits: aakashi2001 (~aakashi20@103.61.255.35) (Ping timeout: 256 seconds)
[07:30:45] *** Joins: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys)
[07:33:52] *** Quits: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys) (Ping timeout: 258 seconds)
[07:37:00] <llua> declare is commonly used in bash
[07:40:02] *** Quits: jonakeys_ (jonathan@gateway/vpn/airvpn/jonakeys) (Quit: WeeChat 3.2)
[07:40:18] *** Joins: jonakeys (jonathan@gateway/vpn/airvpn/jonakeys)
[07:42:52] *** Quits: ChmEarl (~chmearl@user/chmearl) (Quit: Leaving)
[07:43:00] *** Quits: greknod (~grek@203-33-161-235.dyn.iinet.net.au) (Ping timeout: 268 seconds)
[07:43:12] *** Joins: greknod (~grek@203-33-166-232.dyn.iinet.net.au)
[07:53:48] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[07:58:25] *** Quits: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca) (Read error: Connection reset by peer)
[07:59:40] *** Joins: vmeson (~rmacleod@198-48-226-187.cpe.pppoe.ca)
[08:03:22] *** Joins: gnoo (~gnoo@user/gnoo)
[08:04:34] *** Joins: Wafficus (~user@70.126.240.148)
[08:08:16] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[08:08:17] *** Quits: smlavine (smlavine@sourcehut/user/smlavine) (Ping timeout: 268 seconds)
[08:09:59] *** Joins: Xanabella (~Xanabella@user/xanabella)
[08:10:45] *** Quits: aakashi2009 (~aakashi20@103.61.255.3) (Ping timeout: 268 seconds)
[08:11:25] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[08:14:02] *** Parts: akoana (~ah@user/akoana) ()
[08:21:41] *** Joins: kj (~kj@kj.aerisnetwork.net)
[08:26:55] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[08:30:33] *** Joins: aakashi2009 (~aakashi20@103.61.255.3)
[08:32:58] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[08:33:27] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[08:33:29] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[08:33:52] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[08:39:20] *** Quits: vishal (~vishal@fedora/vishal) (Quit: ZNC 1.8.2 - https://znc.in)
[08:40:39] <xx> # printf "a\n"
[08:40:41] <shbot> xx: a
[08:40:44] <xx> # printf "a\\n"
[08:40:45] <shbot> xx: a
[08:40:51] <xx> why does this give the same result?
[08:41:05] *** Joins: vishal (~vishal@fedora/vishal)
[08:41:12] <xx> I'd expect the 2nd one to give a\n
[08:41:43] *** Quits: alnr (~alnr@38.125.204.99) (Ping timeout: 258 seconds)
[08:44:16] <neshpion> # printf 'a\\n'
[08:44:17] <shbot> neshpion: a\n
[08:45:31] <neshpion> \ inside double-quotes escapes the next char, feeding printf a literal \, which is followed by a literal n, which printf subsequently formats into a newline.  in single-quotes, both backslashes are literal, which printf formats into a literal \ and a literal n
[08:46:02] <neshpion> # printf "a\\\\n"
[08:46:04] <shbot> neshpion: a\n
[08:47:42] <neshpion> # [[ "a\\\\n" = 'a\\n' ]] && echo yis
[08:47:43] <shbot> neshpion: yis
[08:48:37] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 258 seconds)
[08:49:35] *** Joins: maledict1um (~crux@81.193.73.156)
[08:50:32] *** Quits: maledictium (~crux@bl11-90-181.dsl.telepac.pt) (Ping timeout: 272 seconds)
[08:51:04] <pystardust> whats the difference between == and = in [[ ?
[08:52:03] <izabera> none
[08:52:09] *** Joins: mci64 (~mci64@185.242.190.95)
[08:54:09] <phy1729> but == is invalid in POSIX [
[08:54:26] <neshpion> [ is for nerds
[08:54:44] <neshpion> (except i needed it for path expansion in my script T_T)
[08:55:16] <izabera> no you don't
[08:55:19] <izabera> !next
[08:55:19] <greybot> Another satisfied customer! Next please!
[08:55:41] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[08:57:48] <neshpion> # touch ab.c; val=ab; [ -e "$val"* ] && echo yis; [[ -e "$val"* ]] && echo double yis
[08:57:49] <shbot> neshpion: yis
[08:58:25] <izabera> now try with more than one file
[08:59:04] <xx> neshpion: I think I get it, thanks
[09:00:01] <izabera> alternative: found=0; for _ in "$val"*; do found=1; done
[09:00:22] <izabera> no need for that broken [
[09:02:16] <izabera> one can also do     ! for _ in "$val"*; do false; done && echo yis    but it looks weird
[09:02:27] <phy1729> izabera: but bull glob
[09:02:35] <phy1729> null
[09:02:53] <izabera> yeah right you need that too
[09:06:13] <e36freak> !exists
[09:06:13] <greybot> Check if any file matches a given pattern: exists() { [[ -e $1 ]]; }; shopt -s nullglob; if exists *.txt; then ...
[09:06:32] <e36freak> don't even technically need the nullglob there...
[09:06:45] <izabera> yes you do
[09:07:37] <izabera> # broken() [[ -e $1 ]]; touch 'a[b]'; broken a[b] && echo i think it exists
[09:07:38] <phy1729> # touch '[ab]';  exists() { [[ -e $1 ]]; }; exists [ab]
[09:07:39] <shbot> izabera: i think it exists
[09:07:39] <shbot> phy1729: no output
[09:07:48] <phy1729> # exists() { [[ -e $1 ]]; }; exists [ab]
[09:07:48] *** Joins: nattiestnate (~nate@180.243.1.7)
[09:07:50] <shbot> phy1729: no output
[09:07:55] <phy1729> # exists() { [[ -e $1 ]]; }; exists [ab]; echo $?
[09:07:56] <shbot> phy1729: 1
[09:08:01] <phy1729> # touch '[ab]';  exists() { [[ -e $1 ]]; }; exists [ab]; echo $?
[09:08:03] <shbot> phy1729: 0
[09:08:17] *** Quits: Lunaris (~Lunaris@gateway/tor-sasl/lunaris) (Remote host closed the connection)
[09:09:10] <e36freak> ah
[09:09:29] *** Joins: sublim20 (~sublim20@user/sublim20)
[09:17:36] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[09:18:18] *** Joins: smlavine (smlavine@sourcehut/user/smlavine)
[09:21:02] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[09:22:16] *** Quits: nattiestnate (~nate@180.243.1.7) (Ping timeout: 268 seconds)
[09:23:09] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[09:27:28] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:27:51] *** Joins: timj1 (~timj@user/timj)
[09:28:52] <xx> myvar=$anothervar
[09:28:57] <xx> it never needs quoting, right?
[09:30:00] *** thurstylark is now known as thursdaylark
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:30] *** Quits: timj (~timj@user/timj) (Ping timeout: 268 seconds)
[09:30:46] <neshpion> no
[09:31:22] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[09:32:46] <izabera> (no = you're right, it never needs quoting)
[09:34:01] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 248 seconds)
[09:34:50] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[09:35:05] <xx> wrapping my head around where quotes are necessary is quite the journey
[09:35:52] <phy1729> !qefs
[09:35:52] <greybot> "$Quote" "$Every" "$Fucking" "$Substitution"
[09:36:02] <phy1729> Just quote em all and you rarely go wrong
[09:37:51] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[09:38:20] *** Joins: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr)
[09:42:20] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[09:45:13] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[09:46:36] *** Joins: dhrv (~dhrv@user/dhrv)
[09:48:51] <dhrv> hello, i need to pass a TOKEN in an Curl request, what is the best way to, you know, store the token safely?
[09:49:02] *** Joins: kurahaupo_ (~kurahaupo@pa49-179-220-179.pa.nsw.optusnet.com.au)
[09:50:57] *** Quits: kurahaupo (~kurahaupo@124-171-138-127.tpgi.com.au) (Ping timeout: 245 seconds)
[09:52:35] <Gamma> dhrv: there are tons of ways to do secret management, no best way imo
[09:52:44] <Gamma> Depends on your threat model
[10:01:26] <dhrv> Umm, I am not sure what threat means, I am having like an API Token, it doesn't have much of harm in case of like breach or something, I can remove it's access, but still it's better to be careful
[10:01:41] <dhrv> can you share some basic secret management?
[10:03:58] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:04:01] <Gamma> If the secret is part of a public repository, then git-crypt is common
[10:04:43] <Gamma> If you have a password manager with a cli client, you could store the token in there and script around it
[10:05:16] <Gamma> Or you could just put it in a file which youw know you'll never share
[10:05:24] <Gamma> (I've done all three of these)
[10:06:16] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[10:06:24] <dhrv> Okay, I will looking more into it
[10:07:03] <Gamma> A "threat model" is basically what you think could happen to cause that token to be leaked
[10:07:05] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[10:07:31] <dhrv> Oh, sort of had that thought in mind
[10:09:23] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[10:09:23] <dhrv> Also, I used this way before to make a secret work for a simple bash project
[10:09:34] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[10:09:45] <dhrv> I choose a long password (say 12 characters long)
[10:09:50] <dhrv> echo $password | openssl enc -pbkdf2 -a -salt -pass pass:$password
[10:10:08] *** Joins: kurahaupo (~kurahaupo@d211-31-139-121.bla1.nsw.optusnet.com.au)
[10:10:18] <dhrv> ^ this gave me the encrypted $password with key $password
[10:10:29] <dhrv> is this a safe way?
[10:10:50] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[10:12:25] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[10:13:27] *** Quits: kurahaupo_ (~kurahaupo@pa49-179-220-179.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[10:14:00] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 256 seconds)
[10:14:08] *** Joins: jmcantre1 (~weechat@user/jmcantrell)
[10:15:19] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 268 seconds)
[10:15:20] <Gamma> I don't know much about openssl, but
[10:15:37] <Gamma> That command seems to just base64-encode its input
[10:16:28] *** Quits: Wafficus (~user@70.126.240.148) (Quit: ERC (IRC client for Emacs 27.2))
[10:17:46] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[10:18:57] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:24:22] <Gamma> dhrv: yeah, that's just base64-encoding your input. pbdk2 is a key derivation alg, you also need to specify an ecryption method
[10:26:56] <Gamma> But with that method, you're encrypting it with $password as the password, which means you'd need to provide $password again to decrypt it
[10:27:00] *** Quits: edlou (uid413273@id-413273.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[10:27:39] <dhrv> exactly, I just saw, it decrypts with any key
[10:28:06] <Gamma> or just  `base64 -d`
[10:30:00] *** Joins: sublim20 (~sublim20@user/sublim20)
[10:31:13] <dhrv> yes, I guess I need to pass an encryption alg
[10:31:23] <dhrv> but looking on how to do it
[10:32:15] <Gamma> s/openssl/openssl -aes256/
[10:34:06] *** Joins: rendar (~rendar@user/rendar)
[10:34:29] *** Joins: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net)
[10:34:53] *** Parts: Gamma (~Gamma@zsh/user/Gamma) ()
[10:37:02] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[10:39:11] *** Quits: fling (~fling@user/fling) (Ping timeout: 252 seconds)
[10:39:24] *** Parts: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr) ()
[10:40:59] *** Joins: makara (~sol@196.61.111.63)
[10:41:13] *** Quits: csm3105 (~csm3105@static-137-236-61-95.ipcom.comunitel.net) (Ping timeout: 248 seconds)
[10:43:28] <geirha> use printf %s "$password" instead of echo
[10:44:05] *** Joins: lq (~lq@210.72.8.213)
[10:44:30] *** Quits: lq820105 (~lq@116.228.78.178) (Read error: Connection reset by peer)
[10:48:27] *** Quits: LiftLeft (~LiftLeft@154.21.23.18) (Ping timeout: 245 seconds)
[10:48:50] *** Quits: obiwahn (~heini@obiwahn.org) (Quit: WeeChat 3.2-dev)
[10:48:53] <jaggz> while read f <wl; do echo $f; done
[10:49:01] <jaggz> why's that stay on one line of that file forever?
[10:49:30] *** Joins: zouhair (~zouhair@lnsm1-montreal02-142-118-47-137.internet.virginmobile.ca)
[10:50:29] *** Joins: alzgh (~alzgh@216.155.158.214)
[10:52:52] <geirha> because you open the file each time you run read, read one line, then close it again. Rince and repeat to infinity
[10:53:10] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[10:53:11] <geirha> while read -r f; do printf '%s\n' "$f"; done < wl
[10:54:44] *** Joins: obiwahn (~heini@obiwahn.org)
[10:55:56] *** Joins: jinsun (~quassel@user/jinsun)
[10:58:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:58:44] *** Quits: sublim20 (~sublim20@user/sublim20) (Quit: Leaving)
[10:59:20] *** Quits: kurahaupo (~kurahaupo@d211-31-139-121.bla1.nsw.optusnet.com.au) (Ping timeout: 256 seconds)
[10:59:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:59:43] *** Lord_of_Life_ is now known as Lord_of_Life
[11:00:18] *** Quits: ash_worksi (~ash_m@user/ash-m/x-3292451) (Ping timeout: 272 seconds)
[11:01:25] <dhrv> Gamma: okay
[11:01:52] *** Joins: kurahaupo (~kurahaupo@pa49-179-220-179.pa.nsw.optusnet.com.au)
[11:02:28] <dhrv> speaking of the second option you mentioned Gamma: using the local password manager sounds great, I guess, pass would be used right?
[11:03:58] *** Quits: obiwahn (~heini@obiwahn.org) (Remote host closed the connection)
[11:04:11] *** Joins: obiwahn (~heini@obiwahn.org)
[11:04:29] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[11:06:42] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 272 seconds)
[11:10:48] *** Quits: aakashi2009 (~aakashi20@103.61.255.3) (Ping timeout: 268 seconds)
[11:11:16] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:13:15] *** Quits: obiwahn (~heini@obiwahn.org) (Quit: WeeChat 3.2-dev)
[11:13:23] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[11:13:56] *** Joins: Hercules (~Hercules@user/hercules)
[11:17:27] *** Joins: obiwahn (~heini@obiwahn.org)
[11:21:06] <xx> I have this part in a script https://0x0.st/-JJx.txt and don't understand the meaning of the '''
[11:24:43] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:25:15] <geirha> they are meaningless
[11:25:36] <geirha> the first two ''  is just an empty string, concatenated with 'multiple lines'
[11:25:53] <geirha> lastly concatenated with an empty string.
[11:26:03] <pystardust> xx: it acts as a single ', reasoning: the first 2 act as null string, then there another single quote that continues the string (not a new argument since there is no space separating them)
[11:26:37] <pystardust> looks cool ig (thats the only reason I can think about using it)
[11:26:43] <geirha> those empty strings are pointless. It might be a style thing by someone coming from python, or just ignorance, assuming '''...''' is somehow different from '...'
[11:27:24] <xx> so I can just replace the ''' with ' then?
[11:27:29] <geirha> yes
[11:27:30] <pystardust> yes
[11:27:43] <xx> cool, thank you
[11:28:30] <xx> what does "looks cool ig" mean?
[11:29:22] <pystardust> xx: nothing functional, maybe they want to show that that string spans multiple lines
[11:29:25] <geirha> ig is "I guess" I guess
[11:29:37] <pystardust> oh yes ^
[11:29:47] <xx> ah ok
[11:34:01] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[11:36:06] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1462:2fe6:d152:1e30)
[11:36:06] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1462:2fe6:d152:1e30) (Changing host)
[11:36:06] *** Joins: skapata (~Skapata@user/skapata)
[11:36:49] *** Joins: michigan (uid507982@id-507982.charlton.irccloud.com)
[11:39:58] <alzgh> Hello, I'm trying to run this line `wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo gpg --dearmor > /etc/apt/trusted.gpg.d/microsoft.gpg` but get a permission denied error. If I use `tee` it is also written to the terminal which is ugly and inconvenient. What are my options? 
[11:40:28] *** Joins: TomyWork (~TomyLobo@p200300e80f06af00e0f307a568755ca0.dip0.t-ipconnect.de)
[11:43:03] *** Joins: travisghansen3 (~travisgha@192.74.130.86)
[11:44:02] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[11:44:39] *** Quits: travisghansen (~travisgha@192.74.130.86) (Read error: Connection reset by peer)
[11:44:39] *** travisghansen3 is now known as travisghansen
[11:44:55] *** Joins: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133)
[11:45:02] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[11:45:24] *** Joins: chrish136 (~chrish@149.167.205.148)
[11:45:45] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[11:50:24] *** Quits: zhangxiaofei (~fzhan@111.203.234.210) (Quit: Leaving.)
[11:53:51] <Soliton> >/dev/null
[11:54:04] <Soliton> !sudo>
[11:54:04] <greybot> sudo echo > file -- bash operations such as redirections & glob expansions are performed by the USER's bash, not by sudo. Consider: echo | sudo tee [-a] file, or sudo bash -c 'echo > file'
[11:54:52] <Soliton> is the sudo on gpg even useful?
[11:55:04] <alzgh> yeah
[11:55:09] <joo-_> date=$(echo -n $(date +%Y-%m-%dT%H:00 --date="+ $seq hours")) - is the echo -n part even nescessary here ?
[11:55:22] *** Quits: dhrv (~dhrv@user/dhrv) (Ping timeout: 246 seconds)
[11:55:23] <Soliton> !echo$(
[11:55:23] <greybot> $(echo ...) and echo $(...) are both pointless. Drop the echo and $(), just write ...: rm "$(echo myfile)" -> rm myfile --- echo "$(df -h)" -> df -h; http://www.iki.fi/era/unix/award.html#echo
[11:55:24] <joo-_> if i dont do it, there will be a newline right ?
[11:55:32] <alzgh> I just learned gpg has an option `--output` where I can give filename for writing
[11:55:56] <joo-_> thx
[11:56:58] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:58:51] <pj> # date=$(date); printf '<%s>' "$date"
[11:58:52] <shbot> pj: <Thu Aug 12 07:28:51 UTC 2021>
[11:58:57] <pj> joo-_: ^^^^^
[11:59:18] <alzgh> Soliton I didn't get how I'm supposed to send `tee` s output to `/dev/null`. Say, I have something like this `| sudo tee /etc/somefile.txt` and don't want to write anything to terminal.
[11:59:20] <pj> trailing newliens get dropped anyways.
[11:59:24] <pj> *newlines
[11:59:46] <Soliton> alzgh: just append >/dev/null
[12:00:17] <alzgh> Thanks :)
[12:02:34] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:03:03] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[12:04:10] *** Joins: lq820105 (~lq@210.72.8.208)
[12:06:22] *** Quits: lq (~lq@210.72.8.213) (Ping timeout: 245 seconds)
[12:07:12] *** Joins: earnestly (~earnest@user/earnestly)
[12:07:58] *** Joins: reset (~reset@user/reset)
[12:08:10] *** Joins: sublim20 (~sublim20@user/sublim20)
[12:08:41] *** Quits: Kvothe (~weechat@user/elodin) (Ping timeout: 248 seconds)
[12:09:03] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[12:09:50] *** Joins: simplicity (~yti@user/simplicity)
[12:10:00] *** Quits: mci64 (~mci64@185.242.190.95) (Ping timeout: 268 seconds)
[12:10:20] *** Quits: sublim20 (~sublim20@user/sublim20) (Client Quit)
[12:10:33] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[12:13:18] *** Joins: simplicity (~yti@user/simplicity)
[12:13:27] *** Joins: sublim20 (~sublim20@user/sublim20)
[12:18:15] *** Joins: Hax0r (~TP1@93.168.116.37)
[12:18:23] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[12:20:59] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[12:23:20] *** Joins: lavaball (felix@31.204.155.215)
[12:29:35] *** Joins: Mudkip875 (~blackred@173.208.202.60)
[12:30:12] *** Joins: Lope (~lope@user/lope)
[12:30:26] <Lope> What's the correct way to do this? [[ -f /dev/ashmmem ]] && echo yes
[12:31:04] <Lope> Oops, had a typo: [[ -f /dev/ashmem ]] && echo yes
[12:31:12] <gnoo> # [ -f /dev/ashmmem ] && echo yes
[12:31:13] <shbot> gnoo: no output
[12:31:23] <Lope> basically I'm interested in the -f
[12:31:27] <gnoo> # [ -f /dev/ashmmem ] || echo no
[12:31:29] <shbot> gnoo: no
[12:31:29] *** Joins: dhrv (~dhrv@user/dhrv)
[12:31:29] <Lope> how do you check if a device file exists?
[12:31:46] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (Read error: Connection reset by peer)
[12:31:47] <Lope> not really interested in whether the module is loaded on your system :p
[12:31:51] <gnoo> check for block special file
[12:31:56] <Lope> I tried -b
[12:31:58] <Lope> doesn't work
[12:32:03] <dhrv> Gamma: you have any example of using secrets in an open Git repo?
[12:32:09] *** Joins: tccki (~tccki@box.webslate.co.nz)
[12:32:13] <gnoo> Lope: what does `file /dev/ashmmem' say?
[12:32:32] <Lope> gnoo, /dev/ashmem: character special (10/61)
[12:32:55] <gnoo> then use -c. see man test(1)
[12:33:00] <Soliton> !man
[12:33:01] <greybot> bash builtins and keywords do not have separate man-pages, read bash's manual instead or use the help builtin. Rule of thumb: If ''type foo'' says foo is a builtin or keyword, run ''help foo'' or ''man bash'', otherwise try man and/or info.
[12:33:02] <Lope> ok this works [[ -e /dev/ashmem ]] && echo yes
[12:33:17] <Lope> -c also works, thanks.
[12:34:11] <dhrv> how to manage secrets / tokens and stuff in a bash project?
[12:35:05] <Soliton> put them in a file with the appropriate permissions.
[12:35:41] *** Joins: shad (~shad@user/shad)
[12:37:56] *** Quits: ano (~weechat@user/ano) (Ping timeout: 244 seconds)
[12:38:28] *** Joins: ano (~weechat@user/ano)
[12:38:31] *** Joins: mci64 (~mci64@194.25.223.4)
[12:39:06] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:39:09] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:9a00:12c3:7bff:fe6d:d374)
[12:41:49] <dhrv> it is basically a TOKEN for a curl based POST request 
[12:42:17] <dhrv> which needs to be passed in Headers / Authorization as Bearer Token
[12:42:47] *** Quits: Gerula (~Gerula@user/gerula) (Quit: Leaving)
[12:44:52] *** Joins: op0x0f05 (~op0x0f05@5.29.10.223)
[12:45:10] <dhrv> I was thinking of an encryption / decryption logic for it
[12:46:09] <Soliton> for what purpose?
[12:47:19] <dhrv> I am using public repo for this
[12:47:48] <dhrv> and the script would be synced across different devices, so encryption
[12:47:50] *** Joins: sharperguy_ (~sharpergu@78.47.72.154)
[12:47:53] <geirha> then perhaps look at ansible vault
[12:48:22] *** Joins: tccki_ (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[12:48:26] <Soliton> so the user has to give a password instead of the token?
[12:49:09] <dhrv> Yes, the user enter password if it's right then only it will make a post request
[12:49:19] <dhrv> enters**
[12:49:42] *** Quits: tccki (~tccki@box.webslate.co.nz) (Ping timeout: 245 seconds)
[12:49:43] *** Joins: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c)
[12:49:47] <dhrv> geirha: not familar with anisble, will have a look tho
[12:49:49] <Soliton> because the password is easier to enter than the token?
[12:49:56] *** tccki_ is now known as tccki
[12:50:03] <dhrv> yes, 
[12:50:17] *** Quits: Zauberfisch (~Zauberfis@cm83-180.liwest.at) (Quit: Zauberfisch)
[12:50:32] *** Quits: sharperguy (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 252 seconds)
[12:50:46] <dhrv> that password could be used to decrypt the token and then use it in curl
[12:50:57] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[12:51:37] <dhrv> 1. I would use a password to encrypt my TOKEN and store that encrypted value in any file: say token
[12:51:43] *** Joins: frostwork (~frostwork@user/frostwork)
[12:52:11] <gnoo> dhrv: if you can use gpg, have you looked at gpg --symmetric and gpg --decrypt?
[12:52:47] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[12:53:07] <dhrv> 2. in my script, in the beginning it will ask user for the password to enter, if it's right/wrong then it will make request with the output, and if token it right the request would be successful, otherwise not
[12:53:29] *** Quits: sharperguy_ (~sharpergu@78.47.72.154) (Ping timeout: 248 seconds)
[12:54:19] <dhrv> gnoo: i was using openssl for this, cause all of the devices on which the script is going to run don't have gpg keys imported, including a my work pC
[12:54:42] <gnoo> -c works with password and not keys
[12:54:43] *** Quits: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c) (Quit: Leaving)
[12:55:02] *** Joins: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c)
[12:55:05] <dhrv> you mean gpg -c ?
[12:55:12] <gnoo> yeah
[12:55:19] <gnoo> gpg --symmetric 
[12:55:24] *** Joins: sazawal (~sazawal@122.161.170.192)
[12:56:39] <shad> dhrv: you intend on storing your encrypted jwt in a file in a public git repository ? Why not just log in to the API that gives you that token ?
[12:57:39] <shad> APIs should all have a `POST /login +Â { email, password } => { jwt }` endpoint 
[12:58:04] <dhrv> yes, but this API does't have that way 
[12:58:05] <shad> Also, your encrypted stored token might expire, will you commit a new one each time it happes ?
[12:58:37] *** Joins: Zauberfisch (~Zauberfis@cm83-180.liwest.at)
[12:59:07] <shad> How is your API providing you with said token ?
[13:00:05] <dhrv> it gives me an API Token which is used as/passed as Bearer Token in requests, I had to generate it based on the permissions of the operation it is going to perform, it won't be refreshing/expiring
[13:00:09] *** Trieste_ is now known as Trieste
[13:00:22] <dhrv> Also, I guess it's not a jwt
[13:01:24] <shad> Is it some variant of `eyjXXXX.yyyyyy.ZZZZZ` ? Can you base64 decode it ?
[13:01:52] <dhrv> it is sort of this xxxx-xxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxxxxxxxxxxxxxx
[13:02:04] <dhrv> let me try base64 decode
[13:02:12] <shad> nah, looks like a uuid to me
[13:02:18] <shad> won't decode to anything
[13:02:47] <dhrv> yeah, exactly
[13:02:57] *** Joins: lq (~lq@210.72.8.213)
[13:03:04] <dhrv> it doesn't expire, unless i manually revoke it
[13:03:06] <shad> But how do you generate it though, it should still be some form of POST request with a payload explaining what its going to perform
[13:03:38] <shad> I feel like your idea of storing the token in a VCS is a serious anti-pattern. You shouldnt ever need to do that
[13:04:26] *** Quits: lq820105 (~lq@210.72.8.208) (Ping timeout: 272 seconds)
[13:04:54] <dhrv> the token is meant to be used in different way tho, sort of production environment, but I am using it in differentway
[13:04:54] <shad> now it might work for your use case at the moment, but seriously think the whole system over, there has to be a better way to achieve what you want
[13:05:22] *** Joins: sharperguy_ (~sharpergu@78.47.72.153)
[13:06:21] <shad> If your token gets compromised, how do you know which client was ? What's the payload you provide to generate the token ? Cause if there's some label where you can name the client to track whats done with said token, you'll 100% be better off generating 1 token per client, and have that client store that somehow
[13:07:27] <dhrv> the way it's meant to be used, the token won't get compromised and would be used only by one client, always, but i am using it in a very weird way, that it should be used
[13:07:58] *** Quits: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 256 seconds)
[13:08:28] <dhrv> I tried making a web app for the same, but there the CORS policy of the server of that API states no User-Agent header, which sort of eliminates the Web App ideology
[13:08:31] *** Quits: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c) (Quit: Leaving)
[13:08:37] <dhrv> so, i turned to curl
[13:08:50] *** Joins: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c)
[13:09:01] <dhrv> it works like a charm on curl, but the security is major concern here
[13:09:13] <shad> well i'm not your boss, and you do your thing, but keep in mind: 1/ There's no such thing as a "temporary fix" 2/ Think about the people that might have to maintain your solution once you're gone
[13:09:17] <dhrv> I can use pass for passing it 
[13:09:19] *** Joins: nobody_ (~nobody@87.13.30.222)
[13:10:03] *** Quits: mjbatty (~mjbatty@2a01:4c8:41e:636b:a02a:9ffa:3be8:892c) (Client Quit)
[13:10:25] <dhrv> i am gonna star those 2 point XD
[13:11:11] <dhrv> also, it's only for me, so I have to maintain it
[13:12:10] <shad> See 1/
[13:12:22] <dhrv> yes :/
[13:15:31] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:16:33] <shad> dhrv: maybe dig some more on your API docs, but i'm 100% sure a modern API shouldn't let you do that kind of token encryption to put it in a VCS
[13:17:32] <shad> If you intend on deploying that project on several servers, write some ansible playbook that makes the request to generate new tokens for each clients, and provide Ansible with the secrets needed from your host
[13:18:25] <alzgh> This line adds cloudeflare's pub key to apt's keyring `curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo apt-key add -`. I want to add it as a separate file under `/etc/apt/trusted.gpg.d`. But however I tried, apt said that the file type is not recognize.
[13:18:29] *** Joins: Gerula (~Gerula@user/gerula)
[13:18:31] <alzgh> Any ideas how I can do that?
[13:18:55] <dhrv> yes let me look into it shad
[13:19:05] *** Quits: dermato (~dermatobr@154.21.23.75) (Ping timeout: 248 seconds)
[13:20:42] <shad> dhrv: something like that in ansible, https://paste.mozilla.org/TobgnYno
[13:20:50] <shad> you have to fill in the gaps tho
[13:25:30] <dhrv> okay i got the idea what you mean shad:
[13:25:30] <Soliton> alzgh: you're not providing apt-key with a file. it reads stdin.
[13:28:29] <dhrv> shad: i went through the docs but the token would be constant, no regeneration unless manually regenerating it
[13:29:00] <alzgh> I know that this line doesn't provide a file. apt-key read from stdin and writes to /etc/apt/trusted.gpg. I have tried other lines to write that pub key under /etc/apt/trusted.gpg.d/ but every time apt didn't recognized the keys. Lines like these `sudo curl -s https://pkg.cloudflareclient.com/pubkey.gpg --output
[13:29:01] <alzgh> /etc/apt/trusted.gpg.d/cloudflare-pubkey.gpg` or `curl -s https://pkg.cloudflareclient.com/pubkey.gpg | sudo tee /etc/apt/trusted.gpg.d/cloudflare-pubkey.gpg >/dev/null`
[13:29:03] *** Quits: mci64 (~mci64@194.25.223.4) (Quit: Connection closed)
[13:29:05] <alzgh> Soliton
[13:30:01] <shad> dhrv: you're allowed only 1 token ? You cannot have multiple ones ?
[13:31:41] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:31:49] <dhrv> shad: no 
[13:31:59] <dhrv> i saw it is an OAuth Token
[13:32:26] <shad> dhrv: also, the original idea was to use a VCS (git) to deploy your application, but if you use ansible to do that, you won't need to encrypt the token. Just set the token as an Ansible env var, then write it to a file at deployment time on the target host, then use said file
[13:32:42] <shad> Just don't write the token to a public VCS, keep it to your host or the target hosts
[13:32:57] <dhrv> I think so too
[13:33:12] <geirha> alzgh: you can't just dump a public key in /etc/apt/trusted.gpg.d/  you have to wrap it in a keyring
[13:33:17] <Soliton> alzgh: why do you think the data saved under /etc is the same as what curl outputs? what do you need apt-key for then?
[13:33:55] <dhrv> i think i am going to go with ansible, and as you said
[13:34:01] *** Quits: kurahaupo (~kurahaupo@pa49-179-220-179.pa.nsw.optusnet.com.au) (Ping timeout: 248 seconds)
[13:34:30] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Remote host closed the connection)
[13:35:01] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[13:36:25] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[13:36:57] *** Joins: Hercules` (~Hercules@user/hercules)
[13:37:04] <shad> dhrv: https://paste.mozilla.org/PGsoUGmW
[13:37:09] <shad> fill in the gaps
[13:37:12] *** Joins: Kvothe (~weechat@user/elodin)
[13:37:12] <dhrv> someone I think Gamma: suggested 3-4 methods for doing the same, one of them was using git-cypt
[13:37:16] *** Joins: kurahaupo (~kurahaupo@pa49-195-39-191.pa.nsw.optusnet.com.au)
[13:37:55] <dhrv> crypt**
[13:37:59] <shad> You can version the Ansible playbook in git, just .gitignore the environment file. No creds ever in a vcs, even encrypted
[13:38:55] *** Joins: besnn (~besnn@user/besnn)
[13:39:22] <alzgh> Soliton I did the same with Microsoft's pub key both in gpg and asc form and it worked. I took this line `wget -q https://packages.microsoft.com/keys/microsoft.asc -O- | sudo apt-key add -` and changed it to `wget -q https://packages.microsoft.com/keys/microsoft.asc -O /etc/apt/trusted.gpg.d/microsoft.asc`  and it worked perfectly. Also dearmored
[13:39:22] <alzgh> it once and it worked. I thought those are just the pub key files.
[13:40:25] *** Quits: Hercules (~Hercules@user/hercules) (Ping timeout: 248 seconds)
[13:40:42] <geirha> run the file(1) command on them.  file /etc/apt/trusted.gpg.d/*
[13:41:41] <dhrv> yes i got it
[13:41:52] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 272 seconds)
[13:44:03] *** Quits: jmcantre1 (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[13:46:16] *** Joins: djph (~dpurgert@cpe-107-10-244-220.neo.res.rr.com)
[13:49:51] *** Quits: Bhavuk (~BTaneja@122.173.26.212) (Quit: Leaving)
[13:51:24] *** Joins: dermato (~dermatobr@154.21.23.75)
[13:53:46] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[14:00:08] *** Joins: GuiToris (~GuiToris@user/guitoris)
[14:00:55] <GuiToris> hello, I'd like to do some basic calculation. Should I just insert the values inside $(())?
[14:01:26] <GuiToris> I'd like to divide variables by 25
[14:01:43] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aÐ»Ð»Ð¸Ð»Ñ¹Ñ–Ð°!)
[14:01:57] <geirha> result=$(( number / 25 ))  or   (( result = number / 25 ))
[14:02:01] <geirha> !math
[14:02:01] <greybot> Add 7 to a variable: ((a+=7)) OR a=$((a+7)) OR let 'a+=7' # See http://mywiki.wooledge.org/ArithmeticExpression
[14:04:35] *** Joins: Ad1Tech (~Ad1Tech@h104101.man.tk-internet.pl)
[14:06:03] <GuiToris> how can I set the number of decimals?
[14:06:21] <GuiToris> variable=28; echo $(( $variable / 25 ))  resulted 1
[14:06:53] <emanuele6> !float > GuiToris
[14:06:53] <greybot> GuiToris: http://mywiki.wooledge.org/BashFAQ/022 -- How can I calculate with floating point numbers instead of just integers?
[14:07:18] <GuiToris> thanks!
[14:08:26] *** Quits: kwilczynski (sid379192@user/kwilczynski) ()
[14:11:35] *** Joins: andril (~andril@c-66-229-99-96.hsd1.fl.comcast.net)
[14:12:44] *** Joins: Mo (~Mo@dynamic-077-008-045-142.77.8.pool.telefonica.de)
[14:14:39] *** Quits: op0x0f05 (~op0x0f05@5.29.10.223) (Quit: Client closed)
[14:14:49] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[14:15:33] <GuiToris> I'm surely missing something in line #2, but what is that? https://bpa.st/raw/Y4QQ
[14:16:42] *** Quits: chrish136 (~chrish@149.167.205.148) (Quit: WeeChat 3.2)
[14:16:48] <GuiToris> shellcheck doesn't help here
[14:17:34] <GuiToris> I got '28/25: No such file or directory'
[14:17:57] <GuiToris> $()    ??
[14:18:26] <GuiToris> unfortunately not :(
[14:20:49] *** Joins: mjbatty (~mjbatty@82.2.17.205)
[14:23:28] *** Joins: roadie (~user@2a02:8108:ec0:1427:18e7:81ad:13e4:ecf1)
[14:24:15] <GuiToris> what do you think of this? https://bpa.st/raw/WAZA
[14:24:28] <GuiToris> this seems to be working
[14:31:00] *** Joins: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4)
[14:31:00] *** Quits: dhrv (~dhrv@user/dhrv) (Remote host closed the connection)
[14:33:24] *** Joins: Utente (~Username@mob-5-90-203-191.net.vodafone.it)
[14:33:31] *** Quits: Hercules` (~Hercules@user/hercules) (Quit: Leaving)
[14:33:35] *** Parts: Utente (~Username@mob-5-90-203-191.net.vodafone.it) ()
[14:33:41] <geirha> you need to write output to pass to bc's stdin
[14:34:18] <geirha> result=$(bc <<< "scale=3; $variable / 25")
[14:34:53] <geirha> or result=$(printf 'scale=3; %s / 25\n' "$variable" | bc)
[14:35:54] <pystardust> first one better, no pipe "no extra subshell"
[14:36:28] <geirha> there may be a pipe, but at least fewer subshells
[14:37:12] <GuiToris> thanks a lot! :)
[14:41:22] *** Quits: smlavine (smlavine@sourcehut/user/smlavine) (Ping timeout: 245 seconds)
[14:48:56] <depesz> hi. i think i saw it somewhere, but can't find - how can I *add* something to trap?
[14:49:09] <depesz> I have trap 'rm -rf "${work_dir}"' EXIT
[14:49:22] <depesz> and later I'd like to add one more thing to happen on EXIT. how could I do it?
[14:49:42] *** Quits: chomwitt (~chomwitt@2a02:587:dc04:9a00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[14:52:24] <xx> is [ "$myvar" = "" ] equivalent in all cases to [ -z "$myvar" ]
[14:52:37] <izabera> yeah
[14:52:55] <xx> and presumably using [[ -z $myvar ]] is exactly the same as well
[14:52:58] <izabera> yep
[14:53:04] <xx> great, thanks again
[14:53:46] <xx> I've been tasked with rewriting a several thousand line long script, and am currently writing tests before I restructure it completely
[14:53:57] <xx> that script is very very old, with zero tests
[14:54:19] *** Joins: lq820105 (~lq@116.228.78.178)
[14:54:42] *** Quits: lq (~lq@210.72.8.213) (Ping timeout: 245 seconds)
[14:55:22] <geirha> depesz: I guess set up a trap that evals an array, then you can just append to that array. E.g.   trap 'eval "$(printf '%s\n' "${atexit[@]}")"' EXIT;  atexit+=( 'rm -rf "$work_dir"' )
[14:55:57] <depesz> that is interesting idea. thanks.
[14:56:01] <pystardust> geirha: also you could use trap -p EXIT to get whats in the trap and add stuff to it
[14:58:26] *** Quits: nobody_ (~nobody@87.13.30.222) (Ping timeout: 272 seconds)
[14:59:35] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:01:33] <pystardust> geirha, depesz: Suppose u wanna add to the previous trap then this could be one possible way http://0x0.st/-Jy3.sh
[15:03:06] *** Joins: darkbit (~db@152.32.99.67)
[15:03:46] <geirha> not sure why you put eval there. trap "$prev_cmd; func2" EXIT
[15:05:06] <pystardust> geirha: this is what happends if u don't: ` abc='echo "hello4spaces    hi"'; $abc` output `"hello4spaces hi"`
[15:05:37] <pystardust> # abc='echo "hello4spaces    hi"'; $abc
[15:05:38] <shbot> pystardust: "hello4spaces hi"
[15:05:52] <geirha> it's double quoted...
[15:06:59] <pystardust> as in? how would u embed `echo "4spaces->    -<"` in a variable and execute it?
[15:08:37] <geirha> double quotes prevents word splitting
[15:09:14] *** Quits: Lope (~lope@user/lope) (Quit: Leaving)
[15:09:49] <pystardust> geirha: if your trap had that command, then it the only solution is to use eval
[15:10:06] <geirha> nope
[15:10:09] <Soliton> trap takes shell code to begin with.
[15:11:02] <Soliton> you can nest evals as well. there is just no point in it.
[15:11:03] <pystardust> geirha: quote removal happends before variable expansion. So you can't make sense of quotes in a variable
[15:11:31] <geirha> but trap already accepts shell syntax; it evals the argument
[15:13:00] <pystardust> take a loot at this, it doesn't behave as it should http://0x0.st/-JyI.sh
[15:13:16] <geirha> # trap 'echo "->    <-"' EXIT; p=$(trap -p EXIT) p=${p#*\'} p=${p%\'*}; trap "$p;"'echo "->        <-"' EXIT; trap -p EXIT
[15:13:17] <Soliton> you used single quotes.
[15:13:17] <shbot> geirha: trap -- 'echo "->    <-";echo "->        <-"' EXIT
[15:13:21] <pystardust> but if u had put : `trap 'eval "${prev_cmd}"; func2' EXIT`, it workis
[15:13:30] <geirha> you messed up the quotes
[15:13:44] <geirha> trap "$prev_cmd; func2" EXIT
[15:13:50] <geirha> double quotes, not single
[15:14:11] *** Quits: Hax0r (~TP1@93.168.116.37) (Quit: I'll be back..)
[15:14:40] <pystardust> geirha: oh so, not i get what ur telling. Thanks
[15:14:51] <Masklin> Is there a faster way to remove terabytes of files and dirs than rm -rf ?
[15:14:54] <pystardust> now*
[15:15:34] <geirha> Masklin: do you have some dynamite nearby?
[15:15:42] <pystardust> XD
[15:15:43] <Soliton> trash compactor
[15:15:44] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Quit: Leaving)
[15:15:59] <Masklin> -_-
[15:16:37] <Masklin> I was thinking you might suggest dd or some such
[15:17:03] <Masklin> Tell dd to replace all sectors corresponding to the files and dirs in $somepath with zeroes?
[15:17:09] <Soliton> sounds much slower to overwrite all the data.
[15:17:12] <Masklin> Seems legit to me ^-^
[15:17:16] <Masklin> Oh
[15:17:28] <Masklin> Fine then
[15:17:33] <pystardust> Masklin: yeah but I think dd would write stuff, which takes way more time than rm
[15:17:39] <geirha> you could mkfs if the entire filesystem is to be deleted
[15:17:47] <Masklin> It is not, sadly
[15:18:00] <geirha> then I don't see how anything can do it faster than rm
[15:18:11] <Masklin> That is sad
[15:18:35] <pystardust> :(
[15:18:36] <Masklin> Waiting times of several minutes in 2021...
[15:18:40] <Masklin> Disgusting.
[15:19:36] <pystardust> how many terabytes are u erasing?
[15:19:37] *** Quits: mozgalom (~mozgalom@194.144.47.113) (Ping timeout: 248 seconds)
[15:20:12] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[15:21:19] *** Joins: ztx (~ztx@user/ztx)
[15:21:56] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[15:21:57] <earnestly> This is where encryption helps
[15:22:05] <earnestly> To delete the file, forget the password.  Instant
[15:22:10] <earnestly> (Or delete the key)
[15:22:50] <earnestly> (And if it's an SSD, overwrite with zero doesn't help)
[15:23:23] <pj> if it's partitioned out then you can simply do a quick format on the partition that contains the stuff you want to erase.
[15:23:29] <pj> but that involves planning ahead.
[15:23:39] <earnestly> wipefs -a, remove superblocks
[15:24:13] <earnestly> Surely rm shouldn't need to take long?  If all it needs to do is tell the filesystem those blocks aren't in use
[15:24:26] <earnestly> Things like debugfs (ext*) might expose lower level things like that
[15:24:49] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[15:24:57] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[15:24:59] <pj> it has to walk the directory tree and remove the files and directories as well.
[15:26:03] <earnestly> For sure but that shouldn't take long, just walking the tree.  I assume this is large files, not many small ones
[15:26:18] <pj> so it's not so much a matter of the amount of space taken by the files as it is the number of files and directories needing to be removed that takes the time.
[15:26:18] <pj> You could have a single 3TB file and rm would delete it instantly, or a million smaller files and rm would take a long time.
[15:26:32] <pj> I'm assuming the opposite since he's asking how to do it faster.
[15:27:05] <earnestly> Yeah, you may be right
[15:27:11] *** Quits: dre (~dre@2001:8003:c932:c301:8028:ecc5:f3df:cd14) (Remote host closed the connection)
[15:27:35] *** atmx_ is now known as atmx
[15:27:57] *** Quits: sharperguy_ (~sharpergu@78.47.72.153) (Ping timeout: 268 seconds)
[15:28:38] <earnestly> GNU find's -delete may be better than rm(1), assuming -delete basically just calls unlink without any of the additional checks rm does
[15:28:39] *** Joins: earendel (uid498179@user/earendel)
[15:29:11] <earnestly> People seem to suggest it can help
[15:29:59] <pj> hrmmmmm, could be, I had assumed it would be the same.
[15:30:00] <earnestly> Also apparently rm -rf directory is faster than having rm deal with arguments
[15:30:17] <earnestly> (globbing)
[15:30:26] *** Quits: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133) (Read error: Connection reset by peer)
[15:30:39] *** Joins: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133)
[15:31:25] <earnestly> SO suggests using perl and calling unlink directly
[15:31:58] <earnestly> pj: This has some benches for -delete: https://www.slashroot.in/which-is-the-fastest-method-to-delete-files-in-linux
[15:31:58] <pj> hrmmmm
[15:32:01] *** Joins: sinaowolabi (~SinaOwola@102.134.114.1)
[15:32:17] <earnestly> They use -exec rm {} ; though
[15:33:04] *** Quits: gnoo (~gnoo@user/gnoo) (Remote host closed the connection)
[15:33:09] <pj> yeah, I can't think that would be faster by any stretch
[15:33:19] <pj> it's forking bash for every single file.
[15:33:42] *** Joins: gnoo (~gnoo@user/gnoo)
[15:33:58] <earnestly> Yeah it's pretty stupid
[15:34:01] <earnestly> (And rm)
[15:34:32] <pj> $(seq...) ... yuk
[15:34:52] <geirha> well no, it's not forking a shell, only rm
[15:35:51] *** Joins: lavaball (felix@31.204.155.215)
[15:36:23] <pj> oh, yeah, my mistake on that
[15:36:30] <pj> interesting use of rsync
[15:36:36] <geirha> but they should've tested with -exec rm {} +
[15:36:46] <pj> yeah, they should have.
[15:36:48] *** Joins: seninha (~seninha@user/seninha)
[15:37:11] <pj> the thing is that all their tests assume one giant directory of files, not a multi-level directory structure.
[15:37:15] <earnestly> gnu find basically does stat() + unlinkat()
[15:37:57] *** Quits: et (~et@user/et) (Quit: ZNC 1.8.0 - https://znc.in)
[15:38:06] <pj> and they gave up on rm -f * because it crapped out expanding the wildcard, but there's way faster ways to use rm.
[15:38:07] <earnestly> (And not much else testing wise)
[15:38:24] *** Joins: et (~et@user/et)
[15:39:35] <earnestly> lol https://0ver.org/
[15:40:09] *** Joins: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr)
[15:40:10] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:40:32] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Remote host closed the connection)
[15:40:50] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[15:41:08] <geirha> heh, 0verview
[15:43:19] <pj> heh, they imply that the reason that openssl started having all their vulnerability issues is because they strayed beyond 0.
[15:44:39] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[15:45:14] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[15:47:04] <geirha> they do have a point
[15:47:21] *** Quits: Mo (~Mo@dynamic-077-008-045-142.77.8.pool.telefonica.de) (Ping timeout: 248 seconds)
[15:49:20] *** Joins: xiao (~xiao@37.164.59.1)
[15:49:28] *** Joins: xiao_ (~xiao@37.164.59.1)
[15:49:36] *** Quits: xiao_ (~xiao@37.164.59.1) (Remote host closed the connection)
[15:49:37] <pystardust> what about gnu parallel and rm?
[15:49:57] <geirha> then you first have to remember to cite
[15:50:00] <pystardust> especially for small files, does this help
[15:50:58] <earnestly> In theory but filesystem IO is spooky
[15:56:16] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[15:57:49] *** Joins: speckz (~speckz@2600:1700:ce0:bf00:7d7d:56ee:3a9e:86b8)
[15:59:44] *** Quits: roadie (~user@2a02:8108:ec0:1427:18e7:81ad:13e4:ecf1) (Ping timeout: 252 seconds)
[16:02:00] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:7d7d:56ee:3a9e:86b8) (Client Quit)
[16:06:43] *** Joins: me-sudoer-dentne (~me-sudoer@45.112.144.181)
[16:17:15] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[16:19:46] *** Joins: fuzzybear3965 (~fuzzybear@37.57.0.215)
[16:19:53] *** Quits: me-sudoer-dentne (~me-sudoer@45.112.144.181) (Ping timeout: 248 seconds)
[16:20:00] <fuzzybear3965> I have a multi-line for loop that I want to terminate with <ctrl-c>
[16:20:15] <fuzzybear3965> So, I'm unsure how to use this advice: https://stackoverflow.com/questions/20165591/how-to-write-loop-in-bash-that-will-break-on-ctrlc .
[16:20:24] <fuzzybear3965> Because it's written for a single line loop.
[16:20:31] *** Joins: LSD (~LSD@2.lsd.systems)
[16:20:37] <Soliton> what is the issue?
[16:21:04] <fuzzybear3965> I don't know where to put || break
[16:21:22] <fuzzybear3965> What's the recommended syntax for enclosing a statement in #bash ?
[16:21:31] <Soliton> what does that have to do with ctrl-c?
[16:21:32] <fuzzybear3965> I've been chastised for using back ticks.
[16:21:33] <geirha> so apparently another command that mishandles SIGINT; mpg123
[16:21:47] <fuzzybear3965> geirha Yeah, I was reading about that.
[16:21:47] *** Quits: drd (~drd@2001:b07:a70:9f1f:1562:34de:f50f:77d4) (Ping timeout: 245 seconds)
[16:22:09] <fuzzybear3965> Soliton I have a bash script that runs a function which loops a bunch.
[16:22:30] <fuzzybear3965> I want to kill the entire script if it receives a <ctrl-c> (performing some cleanup if it's detected).
[16:22:51] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[16:23:01] <fuzzybear3965> But, if the code is running the for loop when the script receives the SIGINT then it just iterates the loop (like a forced continue).
[16:23:15] *** Joins: thiras (~thiras@user/thiras)
[16:23:33] <Soliton> that's not normal.
[16:23:34] <fuzzybear3965> So, I'm trying to figure out how to tell the script that it should exit, performing that recommended cleanup, if it receives a SIGINT.
[16:23:44] <fuzzybear3965> Oh, really?
[16:24:02] <Soliton> !int
[16:24:02] <greybot> How the shell handles ^C (SIGINT) and why: http://www.cons.org/cracauer/sigint.html
[16:24:03] <geirha> if mpg123 had handled SIGINT properly, the loop would've ended when you hit ctrl+c
[16:24:07] <fuzzybear3965> Oh, you know. Maybe it's like geirha was saying. The command that's running in the loop isn't processing the SIGINT.
[16:24:20] <fuzzybear3965> It's not mgp123. It's gotestsum.
[16:24:24] <Soliton> the problem is rather that it is.
[16:24:24] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 258 seconds)
[16:24:30] <fuzzybear3965> But, it's probably mishandling it the same way.
[16:24:36] <fuzzybear3965> Soliton Right...
[16:24:54] <fuzzybear3965> How can I capture the SIGINT instead of passing it down to gotestsum?
[16:25:14] *** Joins: shad (~shad@user/shad)
[16:25:21] <Soliton> there is no passing down.
[16:25:42] <fuzzybear3965> How can I exit the script given the situation I'm in?
[16:25:46] *** Joins: roadie (~user@2a02:8108:ec0:1427:c527:2031:de36:1c1f)
[16:26:06] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[16:26:14] <Soliton> perhaps  trap exit INT  is enough.
[16:26:26] *** Joins: thiras (~thiras@user/thiras)
[16:26:29] <fuzzybear3965> Let me try. Thanks!
[16:26:55] <fuzzybear3965> Yep!
[16:27:33] <geirha> but now your script will be misbehaving
[16:28:00] <Soliton> read the link above to see how to do it properly.
[16:28:25] *** Quits: AquaL1te_ (~AquaL1te@user/aqual1te) (Ping timeout: 248 seconds)
[16:28:35] <Soliton> and perhaps file a bug against gotestsum.
[16:28:52] <fuzzybear3965> I'm reading.
[16:29:04] <fuzzybear3965> Soliton What's the bad behavior that gotestsum is implementing?
[16:30:06] <geirha> it catches the signal and exits instead of resetting the signal handler and resending the signal
[16:30:14] <Soliton> not dying from SIGINT.
[16:30:48] <fuzzybear3965> But, if you're running gotestsum from the shell (not in a loop, one-off command) it should die with <ctrl-c>.
[16:31:02] <Soliton> but not in the right way.
[16:31:07] *** Joins: pj (~pj@ghettoforge/pj)
[16:31:21] <Soliton> just terminating is not the same as dying from a signal.
[16:31:26] <fuzzybear3965> So, it should kill itself and re-send the SIGINT signal.
[16:31:37] <geirha> yes
[16:31:56] <fuzzybear3965> Hmmm, I never knew this!
[16:32:04] <fuzzybear3965> Soliton This ref is great. Thanks!
[16:32:29] <geirha> then when bash does wait(2) on it, it will see that it died of signal SIGINT, and act differently than if it died of another signal or no signal at all
[16:32:54] <GuiToris> audio_$file_rxed.wav   $file variable won't work this way, what should I do differently?
[16:32:58] <fuzzybear3965> Ahhhh, because when bash runs the foreground process there's a wait(2) on it?
[16:33:14] <GuiToris> I actually did "audio_$file_rxed.wav"
[16:33:45] <Soliton> # file=foo; echo "audio_${file}_rxed.wav"
[16:33:47] <shbot> Soliton: audio_foo_rxed.wav
[16:33:50] <pj> "audio_${file}_rxed.wav"
[16:33:55] <GuiToris> thank you :)
[16:34:06] <pj> !{ > GuiToris 
[16:34:06] <greybot> GuiToris: Command grouping. Like (), but doesn't spawn a subshell. See http://mywiki.wooledge.org/BashGuide/CompoundCommands#Command_grouping
[16:34:16] <Soliton> !${
[16:34:16] <greybot> Without curly braces parameter expansions refer to the longest valid variable name or shortest positional parameter. "${var}bar" expands the parameter named "var" while "$varbar" expands "varbar". "$123" references argv[1] and "${123}" references argv[123]. Braces are requried for parameters > 9, special PEs, and array expansions: ${10}, ${var##pat}, ${arr[5]}. BRACES AREN'T A SUBSTITUTE FOR QUOTES!
[16:34:47] *** Joins: Atque (~Atque@user/atque)
[16:34:55] <geirha> yes. When you hit Ctrl+C, both bash and gotestsum will receive SIGINT. bash registers that it got the signal, but waits to see what the foreground process does with the signal. If it dies from SIGINT, bash does the same. If it doesn't die from SIGINT, bash ignores the signal
[16:35:35] <fuzzybear3965> geirha https://github.com/gotestyourself/gotestsum/blob/73868edd232e5a2c571769ca402712a14ae58afe/cmd/internal/signalhandlerdriver/main.go#L25-L43
[16:35:35] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[16:36:03] <fuzzybear3965> When gotestsum receives the SIGINT then it call os.Exit with a non-zero code.
[16:36:24] *** Quits: fuzzybear3965 (~fuzzybear@37.57.0.215) (Quit: Client closed)
[16:36:37] *** Joins: fuzzybear3965 (~fuzzybear@37.57.0.215)
[16:36:44] <fuzzybear3965> But, I'm not sure what "dies" means.
[16:37:03] <fuzzybear3965> I just got disconnected for ~30s so I may have missed a message.
[16:37:04] <fuzzybear3965> !logs
[16:37:08] <fuzzybear3965> !log
[16:37:08] <greybot> To log all subsequent output (+ stderr): exec >>somefile 2>&1 ## To log all your actions, plus stdout+stderr, add set -x after that. ## To log *and also pass through* see http://mywiki.wooledge.org/BashFAQ/106
[16:37:16] <Soliton> it's all explained in the link.
[16:37:24] <geirha> fuzzybear3965: right, that's why bash ignores SIGINT there and just continues on
[16:37:31] <fuzzybear3965> Yeah, I'm working my way through it.
[16:37:48] <fuzzybear3965> geirha so it doesn't resend the signal, just like we thought.
[16:37:55] <Soliton> yes.
[16:38:15] <fuzzybear3965> Okay, I understand. I'll issue a PR against gotestsum . I'm reading the reference.
[16:38:33] *** Quits: roadt (~roadt@114.97.241.40) (Ping timeout: 248 seconds)
[16:39:30] *** Joins: roadt (~roadt@114.100.129.141)
[16:39:31] *** Joins: Camilo (~hugh@host-92-20-143-244.as13285.net)
[16:42:49] *** Quits: sinaowolabi (~SinaOwola@102.134.114.1) (Ping timeout: 248 seconds)
[16:43:03] *** Joins: vysn (~vysn@user/vysn)
[16:49:49] *** Joins: riff_IRC (~riff-IRC@user/riff-irc)
[16:52:25] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Ping timeout: 248 seconds)
[16:54:18] <fuzzybear3965> How can I trap (printf "%s" "${VAR}" && bar) EXIT
[16:54:24] <fuzzybear3965> I'm getting parser errors.
[16:54:30] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[16:55:10] <pystardust> # trap '(printf "%s" "${VAR}" && bar)' EXIT
[16:55:11] <shbot> pystardust: no output
[16:56:04] <geirha> pystardust: it never exits. It sends o to /proc/sysrq-trigger which immediately halts the VM
[16:56:09] *** Quits: lq820105 (~lq@116.228.78.178) (Ping timeout: 268 seconds)
[16:56:17] *** Joins: vysn (~vysn@user/vysn)
[16:56:26] <pystardust> Oo
[16:56:28] *** Joins: lq (~lq@180.167.42.2)
[16:56:33] <geirha> printf %s "$PS1"
[16:56:37] <geirha> # printf %s "$PS1"
[16:56:38] <shbot> geirha: $({ echo ${_x+o}>|/proc/sysrq-trigger;set +x; } 2>/dev/null)${_x=}
[16:57:11] <geirha> if you explicitly call exit, it should trigger the trap though
[16:58:05] <geirha> fuzzybear3965: you forgot quotes  trap 'shell code in here' SIGSPEC...
[16:58:22] <fuzzybear3965> Thanks, the quotes fixed me.
[16:59:21] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 248 seconds)
[16:59:33] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[17:02:21] * jaggz hides
[17:02:22] *** Parts: jaggz (~jaggz@user/jaggz) (Leaving)
[17:03:31] *** Joins: carlos (~pum@user/carlos)
[17:04:49] *** Joins: darkxploit (~jay@32.209.19.50)
[17:06:16] *** Joins: zeden (~zeden@user/zeden)
[17:07:38] *** Joins: fling (~fling@user/fling)
[17:10:18] <xx> can '[ -z $var ] || something' always be replaced with '[ -n $var ] && something' ? I wonder if my logic is right.
[17:10:52] <darkxploit> how do i improve my grep to get only 1 2 3 from this command â€” tail | grep file\.[123] â€¦ i do not want to get 11 or 10 or 22
[17:10:57] *** Quits: roadie (~user@2a02:8108:ec0:1427:c527:2031:de36:1c1f) (Ping timeout: 245 seconds)
[17:11:26] *** Quits: sharperguy__ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 272 seconds)
[17:11:46] <darkxploit> tail xxx.log | grep file\.[123]
[17:14:01] <geirha> xx: only if you add proper quoting
[17:14:15] <geirha> [ -z "$var" ] || ...   [ -n "$var" ] && something ...
[17:14:27] <xx> right, I keep forgetting
[17:15:21] *** Quits: jsrnop (~mark@user/jsrnop) (Ping timeout: 248 seconds)
[17:15:27] <geirha> # var=; if [ -z $var ]; then echo var is empty; fi; if [ -n $var ]; then echo var is not empty; fi
[17:15:29] <shbot> geirha: var is empty
[17:15:29] <shbot> geirha: var is not empty
[17:15:36] *** Quits: ninjabuffet (~ninjabuff@user/ninjabuffet) (Ping timeout: 256 seconds)
[17:15:38] <geirha> # var=; if [ -z "$var" ]; then echo var is empty; fi; if [ -n "$var" ]; then echo var is not empty; fi
[17:15:39] <shbot> geirha: var is empty
[17:15:43] *** Joins: alnr (~alnr@38.125.204.99)
[17:17:11] <Soliton> darkxploit: match what comes after.
[17:19:28] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:19:37] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 248 seconds)
[17:21:30] *** Quits: blaklistd (~blaklistd@user/blaklistd) (Quit: bye)
[17:21:56] *** Joins: blaklistd (~blaklistd@user/blaklistd)
[17:22:03] *** Quits: shad (~shad@user/shad) (Ping timeout: 268 seconds)
[17:23:09] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[17:23:31] *** Joins: shad (~shad@user/shad)
[17:23:50] *** Xanabella is now known as Desiree
[17:25:27] *** Joins: edlou (uid413273@id-413273.brockwell.irccloud.com)
[17:26:35] *** Joins: ChmEarl (~chmearl@user/chmearl)
[17:27:20] *** Joins: Guest32 (~Guest32@2601:19b:800:e50::9492)
[17:27:23] *** Parts: Desiree (~Xanabella@user/xanabella) (bye bye)
[17:34:51] *** Joins: smlavine (smlavine@sourcehut/user/smlavine)
[17:36:33] *** Quits: besnn (~besnn@user/besnn) (Quit: Leaving)
[17:39:41] *** Quits: Guest32 (~Guest32@2601:19b:800:e50::9492) (Quit: Client closed)
[17:41:29] *** Joins: jsrnop (~mark@user/jsrnop)
[17:44:50] *** Quits: gnoo (~gnoo@user/gnoo) (Ping timeout: 244 seconds)
[17:46:12] *** Quits: john1_ (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[17:46:35] *** Joins: nobody_ (~nobody@87.13.30.222)
[17:48:40] *** Quits: fuzzybear3965 (~fuzzybear@37.57.0.215) (Quit: Client closed)
[17:52:18] *** Joins: sn1tch3r (~sn1tch3r@user/sn1tch3r)
[17:52:49] *** Quits: frostwork (~frostwork@user/frostwork) (Quit: Leaving)
[17:54:49] *** Quits: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr) (Ping timeout: 248 seconds)
[17:56:41] *** Joins: samir (~azureuser@user/samir)
[17:58:52] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[17:59:32] *** Joins: gnoo (~gnoo@user/gnoo)
[18:01:08] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[18:02:17] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 248 seconds)
[18:03:08] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[18:03:45] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:03:53] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[18:03:56] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[18:04:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:10:43] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[18:10:56] *** Joins: greycat (~greg@209.142.155.49)
[18:11:16] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[18:13:48] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[18:15:41] *** Quits: nvmd (~nvmd@user/nvmd) (Ping timeout: 268 seconds)
[18:22:08] *** Joins: alzgh (~alzgh@216.155.158.214)
[18:24:34] <alzgh> On ubuntu focal, my umask shows `0002`. The folder I'm in has no acl set. When I create test file with touch it has this access permissions: `-rw-rw-r--`. I'm confused how that comes. According to umask the permission should be `-rwxrwxr-x` . What am I missing?
[18:25:37] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Remote host closed the connection)
[18:26:10] *** LSD is now known as acidsys
[18:26:13] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[18:26:47] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[18:26:47] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Ping timeout: 268 seconds)
[18:26:53] <Soliton> !umask
[18:26:53] <greybot> The umask is the set of permissions bits you do NOT want on newly created files. See http://mywiki.wooledge.org/Permissions
[18:29:06] <alzgh> I know, unless I'm interpreting it wrong. my umask is `0002` . This means that all basic permissions are set except for w on others. But what I get is `-rw-rw-r--`. This corresponds to a umask of `0446` . Soliton
[18:30:05] <llua> the starting point is 666
[18:31:32] <Soliton> # strace touch newfile 2>&1 | grep newfile
[18:31:34] <shbot> Soliton: execve("/bin/touch", ["touch", "newfile"], 0x7ffee17d0508 /* 13 vars */) = 0
[18:31:34] <shbot> Soliton: openat(AT_FDCWD, "newfile", O_WRONLY|O_CREAT|O_NOCTTY|O_NONBLOCK, 0666) = 3
[18:32:50] *** Quits: kj (~kj@kj.aerisnetwork.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:34:00] <greycat> Umask is the bits you DON'T get.  If your umask is 000 then your newly created file ends up 666 (rw-rw-rw-).  If your umask is 002, your newly created file ends up 664 (rw-rw-r--).  And so on.
[18:35:30] <llua> for directories said starting point is 777
[18:36:56] <greycat> # umask 000; touch file; mkdir dir; ls -ld file dir
[18:36:57] <shbot> greycat: drwxrwxrwx 2 root root 0 Aug 12 14:06 99,9902,03dir99,99
[18:36:57] <shbot> greycat: -rw-rw-rw- 1 root root 0 Aug 12 14:06 file
[18:38:38] <alzgh> OK, guys, thank you all. I had a few things mixed up. First I was assuming that the starting point is 777. In addition I was thinking r=1, w=2, x=5 and not x=1, w=2, r=1. Sorry.
[18:39:03] <alzgh> *x=4
[18:39:21] <greycat> In real life, r=4 w=2 x=1
[18:39:24] <alzgh> x=1, w=2, r=4
[18:40:08] <greycat> The permissions shown by ls -l are a binary number where - is 0 and anything else is 1.
[18:40:18] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[18:40:59] <greycat> rw-rw-r-- = 110110100 = 0664 octal
[18:41:11] *** Joins: magla (~gelignite@55d4ac4e.access.ecotel.net)
[18:44:01] <greycat> Reading it as "r=4 w=2 x=1" is just a side effect of how binary numbers can be converted into octal numbers.
[18:45:15] <greycat> (And I'm ignoring the setuid, setgid and sticky bits for the moment.  Those require special treatment to be rendered correctly as a binary number.)
[18:48:41] <alzgh> thanks @greyca
[18:51:24] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[18:52:43] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[18:54:09] *** Joins: mattil (~mattilinn@87-92-39-170.bb.dnainternet.fi)
[18:55:14] *** Quits: mattil (~mattilinn@87-92-39-170.bb.dnainternet.fi) (Remote host closed the connection)
[18:55:37] *** Joins: mattil (~mattilinn@87-92-39-170.bb.dnainternet.fi)
[18:56:57] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[18:59:54] *** Joins: joo (~joo@87-49-44-190-mobile.dk.customer.tdc.net)
[18:59:54] *** Quits: joo (~joo@87-49-44-190-mobile.dk.customer.tdc.net) (Changing host)
[18:59:54] *** Joins: joo (~joo@fsf/member/joo--)
[18:59:59] *** Joins: roadie (~user@2a02:8108:ec0:1427:c0ce:4dac:74cc:6f8f)
[19:00:05] *** Joins: nagualcode (~nagualcod@181.221.147.75)
[19:00:46] <nagualcode> happy to find this channel on libera, greycat I will follow you whatever you are
[19:01:10] *** Quits: roadie (~user@2a02:8108:ec0:1427:c0ce:4dac:74cc:6f8f) (Client Quit)
[19:01:59] <llua> stalker vibes
[19:03:40] *** Joins: keypusher (keypusher@user/keypusher)
[19:03:46] *** Quits: earendel (uid498179@user/earendel) (Quit: Connection closed for inactivity)
[19:06:44] *** Quits: Crescendo (~Crescendo@user/crescendo) (Ping timeout: 252 seconds)
[19:07:42] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[19:07:47] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[19:08:18] *** Quits: nagualcode (~nagualcod@181.221.147.75) (Quit: Client closed)
[19:09:37] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[19:09:39] *** Joins: Crescendo (~Crescendo@user/crescendo)
[19:09:46] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[19:10:01] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 248 seconds)
[19:10:21] *** Joins: nagualcode (~nagualcod@181.221.147.75)
[19:10:34] *** Parts: nagualcode (~nagualcod@181.221.147.75) ()
[19:10:40] *** Joins: nagualcode (~nagualcod@181.221.147.75)
[19:12:32] *** Quits: xheimlich (~xheimlich@179.218.1.150) (Killed (NickServ (GHOST command used by xheimlic1)))
[19:12:40] *** Quits: AnAverageHuman (~AnAverage@user/anaveragehuman) (Ping timeout: 244 seconds)
[19:18:55] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[19:20:39] *** Parts: nagualcode (~nagualcod@181.221.147.75) ()
[19:21:59] *** Quits: axisys_ (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com) (Remote host closed the connection)
[19:23:41] *** Joins: nvmd (~nvmd@user/nvmd)
[19:26:22] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[19:26:26] *** Joins: frostwork (~frostwork@user/frostwork)
[19:27:29] <alzgh> # foo=bar; echo "$foo"; bash -c "echo $foo"
[19:27:30] <shbot> alzgh: bar
[19:27:31] <shbot> alzgh: bar
[19:27:45] *** Joins: LiftLeft (~LiftLeft@212.102.58.168)
[19:27:50] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[19:28:07] *** Joins: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr)
[19:28:11] <Soliton> bash -c 'echo "$1"' bash "$foo"
[19:28:31] <alzgh> bash -c, creates a sub shell. I thought it's only a sub process.
[19:28:37] <greycat> alzgh: in your bash -c command, the double quotes mean that $foo is expanded before bash -c is run
[19:28:38] *** Joins: AnAverageHuman (~AnAverage@user/anaveragehuman)
[19:28:42] <Soliton> it's not a subshell.
[19:28:44] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:28:52] <alzgh> O, damn
[19:28:52] <greycat> bash -c does not create a subshell.  "subshell" is a technical term and this isn't it.
[19:29:01] *** Parts: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr) ()
[19:29:08] *** Joins: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr)
[19:29:22] <alzgh> yeah, I thought it is just a subprocess and was confused by this example
[19:29:39] <greycat> # foo=bar; bash -c 'echo "foo is <$foo>"'
[19:29:40] <shbot> greycat: foo is <>
[19:29:51] <greycat> single quotes.
[19:30:03] <alzgh> I haven't this quote thing down yet
[19:30:39] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[19:31:13] <Soliton> if you write code as an argument to a command use single quotes so you don't accidentally do code injection.
[19:31:19] *** Quits: ztx (~ztx@user/ztx) (Quit: ztx)
[19:31:36] <alzgh> OK, will keep that in mind
[19:34:38] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[19:35:53] *** Joins: sharperguy (~sharpergu@78.47.72.153)
[19:35:53] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[19:36:17] *** Joins: axisys (~axisys@ec2-34-225-151-46.compute-1.amazonaws.com)
[19:36:41] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[19:38:19] *** Joins: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133)
[19:39:18] *** Joins: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr)
[19:41:25] *** Quits: sharperguy (~sharpergu@78.47.72.153) (Ping timeout: 268 seconds)
[19:41:25] *** Quits: makara (~sol@196.61.111.63) (Ping timeout: 268 seconds)
[19:45:52] *** Joins: Guest41 (~Guest41@156.219.12.114)
[19:46:02] <Guest41> hello
[19:46:11] *** Joins: thyriaen (~thyriaen@dynamic-078-055-014-077.78.55.pool.telefonica.de)
[19:46:15] <Guest41> hey
[19:46:33] *** Quits: Guest41 (~Guest41@156.219.12.114) (Client Quit)
[19:46:46] <llua> rip
[19:47:20] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[19:48:25] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 248 seconds)
[19:48:33] *** Joins: setuid (sid191390@id-191390.stonehaven.irccloud.com)
[19:49:07] *** Joins: kj (~kj@beta.aerisnetwork.net)
[19:49:47] <setuid> Got a weird one... working around a gap in 'dot(1)' parsing, which can't handle hyphens in package names. Is there an easy way to parse a list of packages, some of which include 1-or-more hyphens in the name, to quote the entire package name? IOW, foo-bar becomes "foo-bar", and bar-foo-1-2-3 becomes "bar-foo-1-2-3"? I tried some perl one-liner trickery, but the backtracing regex was failing me. 
[19:50:20] *** Quits: totenkoph (~scythe@user/totenkoph) (Quit: totenkoph)
[19:51:02] <greycat> Are the package names in an array?  new=(); for p in "${pkgs[@]}"; do if [[ $p = *-* ]]; then new+=("\"$p\""); else new+=("$p"); fi; done
[19:51:57] <greycat> or if they're in the positional parameters...   pkgs=(); for p; do ...
[19:52:02] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Remote host closed the connection)
[19:52:05] *** Joins: ninjabuffet (~ninjabuff@user/ninjabuffet)
[19:53:07] *** Joins: roadie (~user@2a02:8108:ec0:1427:c0ce:4dac:74cc:6f8f)
[19:53:37] <setuid> Hrm, let me see... using `apt-cache depends <foo>` or `apt-rdepends <package>`, for example. I'll pastebin some exemplars: https://paste.debian.net/hidden/f8567d78/
[19:54:03] *** Parts: sokle_68 (~sokle_68@ppp046177047088.access.hol.gr) ()
[19:58:53] *** Joins: jim (~jim@about/linux/staff/jim)
[19:59:09] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:03:38] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[20:04:01] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[20:07:26] *** Quits: ano (~weechat@user/ano) (Ping timeout: 244 seconds)
[20:08:43] *** Quits: thyriaen (~thyriaen@dynamic-078-055-014-077.78.55.pool.telefonica.de) (Quit: Leaving)
[20:11:05] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[20:14:16] *** Joins: Ad1Tech_IT (~Ad1Tech@193.218.151.167.static.telsat.wroc.pl)
[20:14:20] *** Joins: ano (~weechat@user/ano)
[20:14:35] *** Joins: randomuser (~randomuse@user/randomuser)
[20:14:56] *** Quits: darkbit (~db@152.32.99.67) (Ping timeout: 252 seconds)
[20:15:46] *** Joins: aakashi2001 (~aakashi20@103.61.255.3)
[20:16:41] *** Quits: Ad1Tech (~Ad1Tech@h104101.man.tk-internet.pl) (Ping timeout: 248 seconds)
[20:17:15] *** Joins: docmax__ (~docmax@dynamic-077-006-236-079.77.6.pool.telefonica.de)
[20:18:12] *** Quits: aakashi2001 (~aakashi20@103.61.255.3) (Remote host closed the connection)
[20:18:21] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:18:33] *** Joins: aakashi2001 (~aakashi20@103.61.255.59)
[20:18:38] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Ping timeout (120 seconds))
[20:19:20] *** Quits: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr) (Ping timeout: 252 seconds)
[20:19:37] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Remote host closed the connection)
[20:20:25] <depesz> is there a way to do this: `echo "$@" | sed 's/./=/g'` without sed ?
[20:20:41] <depesz> I tried "${@//?/=}" but it doesn't fully work
[20:20:54] *** Quits: docmax_ (~docmax@dynamic-077-006-109-247.77.6.pool.telefonica.de) (Ping timeout: 256 seconds)
[20:21:12] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[20:21:50] *** Joins: alzgh (~alzgh@216.155.158.214)
[20:21:54] <greycat> you want to turn EVERY character into an equals sign?
[20:22:10] <Soliton> how does it not work?
[20:22:50] <depesz> Soliton: let's call the script with: ./z.sh "ab" "aa  bb"
[20:23:05] <greycat> and you want the output to be  == =====  ?
[20:23:12] <depesz> sed wil print single line with 9 = characters. the "${@..." returns == ======
[20:23:19] <depesz> and I want 9 = characters
[20:23:20] <phy1729> Probably "${*//?/=}"
[20:23:27] <depesz> still has space in it
[20:23:28] <Soliton> and set IFS==
[20:23:33] <greycat> oh, there are two spaces in the middle, not one.  so there should be 8 = signs.
[20:24:21] <depesz> greycat: 9. 2 for "ab", 6 for "aa  bb", and one "in between"
[20:24:38] <greycat> You never SHOWED the output that you want.   So you want ========= ?
[20:24:52] *** Quits: sharperguy_ (~sharpergu@2001:1438:4010:3101:10a::3133) (Ping timeout: 256 seconds)
[20:24:55] <depesz> the idea is. i call the script and it prints given words, and then prints line with = characters that is as long as the output from echo "$@"
[20:25:01] <depesz> greycat: yes, I want =========
[20:25:03] <greycat> The problem is so weird that we can't guess what you want.
[20:25:03] <Soliton> # set -- foo bar baz; IFS==; echo "${*//?/=}"
[20:25:06] <shbot> Soliton: ===========
[20:25:27] <greycat> # set -- aa "bb  cc"; tmp="$*"; echo "${tmp//?/=}"
[20:25:28] <shbot> greycat: =========
[20:25:48] <emanuele6> # set ab 'aa  bb'; IFS== eval 'echo "${*//?/=}"'
[20:25:49] <shbot> emanuele6: =========
[20:25:55] <depesz> yeah. i can do it with temp varaialb.e sure. but I cna't without.
[20:26:09] <emanuele6> depesz: IFS== eval 'echo "${*//?/=}"'
[20:26:11] <greycat> you've been given multiple solutions now; pick one
[20:26:31] <depesz> Soliton: ok. it works. I forgot about ;, btu I'mnot sure about changing IFS for whole script :/
[20:26:46] <Soliton> so don't change it for the whole script.
[20:26:53] <greycat> !xy
[20:26:53] <greybot> http://mywiki.wooledge.org/XyProblem -- "I want to do X, but I'm asking how to do Y..."
[20:26:56] <emanuele6> `IFS== eval 'echo "${*//?/=}"'` does not change IFS for the whole script :/
[20:27:18] *** Parts: jim (~jim@about/linux/staff/jim) (Leaving)
[20:27:18] <emanuele6> only for the echo; eval "localises" the change
[20:27:45] <greycat> you can also do it inside a function with local IFS
[20:27:57] <Soliton> # f() { local IFS==; echo "${*//?/=}"; }; f foo bar baz
[20:27:59] <shbot> Soliton: ===========
[20:28:15] <greycat> you can also get the total length of the argument list and print out that many = chars in a loop, and so on, ad nauseam
[20:28:47] <greycat> !hr
[20:28:47] <greybot> http://wiki.bash-hackers.org/snipplets/print_horizontal_line
[20:28:52] <greycat> it's just a variant of that
[20:29:12] <depesz> thanks all. we decided to go with temp variable gettint $*, and then changing it with //?/=
[20:30:29] <depesz> emanuele6:  yeah, but then eval... for such a simple thing :(
[20:30:47] <emanuele6> depesz: that's the only good use of eval...
[20:30:56] <depesz> greycat: 
[20:30:56] <emanuele6> localising variables
[20:31:00] <depesz> sorry, misclick
[20:31:51] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[20:31:57] *** Quits: obiwahn (~heini@obiwahn.org) (Quit: WeeChat 3.3-dev)
[20:32:10] *** Joins: obiwahn (~heini@obiwahn.org)
[20:37:53] <randomuser> Hello. I'd like to simulate user input in a terminal program. The user should be able to input their data after the simulated user data ends. I wanted to use a here document, but it doesn't forward stdin to the user after it ends. Is it possible to do this?
[20:38:05] *** Quits: obiwahn (~heini@obiwahn.org) (Quit: WeeChat 3.3-dev)
[20:38:19] *** Joins: obiwahn (~heini@obiwahn.org)
[20:40:38] <greycat> randomuser: sounds like a job for expect.  Which is off topic here.
[20:40:44] *** Quits: shad (~shad@user/shad) (Quit: WeeChat 3.0)
[20:41:12] <greycat> But your description is vague enough that some possible questions might be answerable without expect.  What is this "input" you describe?  Is it shell commands?
[20:41:28] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[20:41:55] <emanuele6> randomuser: i'm not sure i understand, but maybe you want `cat <(cat << 'EOF'` some lines `EOF` `) -`
[20:42:43] <darkxploit> @Soliton how do i match exactly 1 2 3 in  file.\[123]
[20:43:12] <Soliton> "match what comes after."
[20:43:15] *** Quits: obiwahn (~heini@obiwahn.org) (Quit: WeeChat 3.3-dev)
[20:43:28] *** Joins: obiwahn (~heini@obiwahn.org)
[20:43:37] <randomuser> I want to simulate commands to gdb.
[20:45:14] *** Joins: Lunatrius` (~Lunatrius@77.38.22.128)
[20:45:14] <Soliton> perhaps you can tell gdb some initial commands to execute.
[20:45:29] *** Quits: Lunatrius (~Lunatrius@77.38.22.128) (Ping timeout: 248 seconds)
[20:45:29] *** Lunatrius` is now known as Lunatrius
[20:46:00] <emanuele6> gdb -ex cmd1 -ex cmd2 /path/to/your/binary
[20:46:12] <emanuele6> !xy
[20:46:12] <greybot> http://mywiki.wooledge.org/XyProblem -- "I want to do X, but I'm asking how to do Y..."
[20:46:40] <Soliton> does that drop you into interactive mode afterwards?
[20:46:46] *** Quits: dermato (~dermatobr@154.21.23.75) (Ping timeout: 272 seconds)
[20:47:08] *** Joins: kill (~killown@user/killown)
[20:47:24] <emanuele6> Soliton: yes, try: gdb -ex help -ex run /bin/ls
[20:47:57] <Soliton> ah, even simpler than i expected.
[20:48:04] <xx> test "$myvar" != "" || ...
[20:48:12] <xx> [ -z "$myvar" ] && ...
[20:48:17] <xx> are equivalent, correct?
[20:48:40] <Soliton> maybe
[20:49:04] <xx> maybe?
[20:49:52] <randomuser> Ok ok, I'll RTFM next time. Thanks!
[20:51:07] <emanuele6> xx: the first one set $_ to "", the second one sets $_ to "]"; so they are completely different I guess 
[20:51:36] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[20:52:19] <xx> # a=''; test "$a" != "" || echo 'empty'
[20:52:21] <shbot> xx: empty
[20:52:21] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[20:52:35] <xx> # a=''; [ -z "$a" ] && echo 'empty'
[20:52:36] <shbot> xx: empty
[20:52:54] <xx> but I'm not sure about it
[20:52:57] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 248 seconds)
[20:53:09] <emanuele6> # a=''; test "$a" != "" || declare -p _
[20:53:11] <shbot> emanuele6: declare -- _=""
[20:53:21] <emanuele6> # a=''; [ -z "$a" ] || declare -p _
[20:53:22] <shbot> emanuele6: no output
[20:53:28] <emanuele6> # a=''; [ -z "$a" ] && declare -p _
[20:53:29] <shbot> emanuele6: declare -- _="]"
[20:54:01] *** Quits: aakashi2001 (~aakashi20@103.61.255.59) (Ping timeout: 248 seconds)
[20:55:08] <xx> hmm
[20:55:41] <Soliton> if the question is whether those two tests check the exact opposite of each other then yes.
[20:55:42] <emanuele6> they both check if $a though..
[20:56:06] <xx> I don't really know what this $_ thing is
[20:56:13] <xx> and whether it affects me
[20:56:15] <Soliton> !$_
[20:56:15] <greybot> "$_" expands to the last argument to the previous command, after expansion (man bash, Special Parameters)
[20:56:47] <xx> sounds like it doesn't
[20:57:23] <emanuele6> if it did, then they would not have been equivalent
[20:58:27] <greycat> xx: the question is what you actually do in the ... section.  If it's a simple command that does not reference $_ then the two tests are nominally the same.  Also, if you don't care about the final value of $?.
[20:58:33] *** Joins: dermato (~dermatobr@154.21.23.75)
[20:58:54] *** Joins: aakashi2001 (~aakashi20@103.61.255.3)
[20:58:54] *** Quits: aakashi2001 (~aakashi20@103.61.255.3) (Read error: Connection reset by peer)
[21:01:16] <xx> I've never used $_ so I guess I don't care about it.
[21:01:33] <xx> how would this affect the final value of $? though?
[21:01:34] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:02:12] *** Joins: aakashi2001 (~aakashi20@103.61.255.3)
[21:04:02] <emanuele6> # test "$a" != "" || { (( "$?" == 1 )) && echo hi ;}
[21:04:03] <shbot> emanuele6: hi
[21:04:10] <emanuele6> # [ -z "$a" ] && { (( "$?" == 1 )) && echo hi ;}
[21:04:11] <shbot> emanuele6: no output
[21:04:50] <greycat> # myvar=x; [[ -z $myvar ]] && echo foo; echo "\$? is $?" ; test "$myvar" != "" || echo bar; echo "\$? is $?"
[21:04:52] <shbot> greycat: $? is 1
[21:04:52] <shbot> greycat: $? is 0
[21:05:31] <emanuele6> [[ is also different, [[ does not change the value of $_
[21:06:20] <xx> this is so crazy
[21:07:53] <greycat> You reversed the test and reversed the && || operator, so it should not be a surprise.
[21:09:07] *** Joins: ano (~weechat@user/ano)
[21:09:47] <xx> I don't know if I care about the final value of $?, it takes a lot of untangling. But looks like I should use [[ ... ]] anyway to avoid this.
[21:13:19] *** Joins: n4dir (~user@mue-88-130-56-247.dsl.tropolys.de)
[21:13:43] <greycat> The really important thing is that ... is a simple command, not another string of A && B || C commands.
[21:14:15] *** Quits: kj (~kj@beta.aerisnetwork.net) (Quit: Textual IRC Client: www.textualapp.com)
[21:15:13] <xx> oh it is definitely just a simple command with no further tests
[21:15:24] <darkxploit> Soliton: is that okay file.\[^1$]
[21:15:29] <greycat> then either check is fine
[21:15:49] <darkxploit> sorry
[21:16:11] <darkxploit> fle\.[^1$]
[21:16:29] <greycat> I don't know whether you think that's a regex or a glob, or what you think it will do, but if you think the $ is special here, you're wrong.  In either case.
[21:16:55] <greycat> Whether the ^ is special will depend on which one it is, and which shell you're in if it's a glob.
[21:17:00] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 256 seconds)
[21:17:36] *** Quits: aakashi2001 (~aakashi20@103.61.255.3) (Ping timeout: 268 seconds)
[21:18:27] *** Quits: roadt (~roadt@114.100.129.141) (Ping timeout: 245 seconds)
[21:19:05] <greycat> The second one makes me think that you think it's a regex (otherwise escaping the . is pointless), so the ^ is special, and the $ is not.  I still don't know what you think it does.
[21:20:41] *** Joins: roadt (~roadt@114.100.129.141)
[21:23:47] *** Joins: lordrishav (~lordrisha@157.35.87.183)
[21:24:04] *** Quits: gnoo (~gnoo@user/gnoo) (Quit: gnoo)
[21:27:37] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Ping timeout: 600 seconds)
[21:27:48] *** Joins: seninha (~seninha@user/seninha)
[21:30:01] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.170.3) (Remote host closed the connection)
[21:31:30] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[21:33:42] *** Joins: wolfgang (~wolfgang@101.174.170.3)
[21:35:32] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[21:36:38] *** Joins: Betal (~Betal@user/betal)
[21:36:39] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Client Quit)
[21:39:12] *** Quits: seninha (~seninha@user/seninha) (Read error: Connection reset by peer)
[21:39:23] *** Joins: seninha (~seninha@user/seninha)
[21:40:01] *** Joins: ircseeker3 (~nodebot@185.187.243.123)
[21:41:44] *** Quits: frostwork (~frostwork@user/frostwork) (Quit: Leaving)
[21:43:57] *** Joins: zebrag (~chris@user/zebrag)
[21:44:10] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[21:45:49] *** Parts: ash_worksi (~ash_m@user/ash-m/x-3292451) ()
[21:48:44] *** Joins: kj (~kj@beta.aerisnetwork.net)
[21:49:37] *** Joins: Betal (~Betal@user/betal)
[21:50:16] *** Joins: anddam (~anddam@user/anddam)
[21:50:32] *** Joins: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com)
[21:50:49] <anddam> while assigning a default using ${1:-foo} how do I put a variable in the default value?
[21:51:16] <anddam> ah nvm
[21:51:24] <phy1729> Don't forget to quote
[21:51:25] *** Quits: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com) (Write error: Broken pipe)
[21:51:30] <anddam> for whatever reason I thought ${1:-$HOME} was giving an error
[21:51:35] <anddam> that it is not
[21:51:43] *** Joins: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com)
[21:51:44] <anddam> phy1729: sure thing, thanks
[21:52:57] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[21:53:37] <emanuele6> phy1729: he said he's using it in an assignment; you don't need quotes in assignments
[21:54:37] <phy1729> I meant in the PE, I swear there was a way that could bite one
[21:54:51] <greycat> not in :- I think
[21:55:06] <Soliton> only in PEs were patterns are expected.
[21:55:07] <greycat> but in e.g. ${foo#"$bar"} the quotes are significant
[21:55:39] <phy1729> That may have been it. I'm a strict observer of qefs in any case.
[21:55:40] <emanuele6> anddam: ${1-$HOME} should work; are you sure you are using bash or a POSIX compliant shell?
[21:57:14] <greycat> ${1:-$HOME} should be the same in POSIX sh or bash
[21:57:56] <emanuele6> yes, i was asking if he's using a non-posix compliant shell instead of bash or another posix compliant shell
[21:58:24] <greycat> if they're using a Bourne shell, then :- won't work but - will
[22:02:21] *** Joins: H3dn1ng (~H3dn1ng@2-248-149-85-no172.tbcn.telia.com)
[22:02:44] <emanuele6> also eshell and fish don't support parameter substitution or expansion with ${}
[22:03:13] <greycat> fish is off topic here, and I've never heard of eshell
[22:03:27] <emanuele6> greycat: the emacs shell
[22:03:47] <emanuele6> emacs -nw -f eshell
[22:03:49] * greycat backs away slowly
[22:04:02] *** Quits: nobody_ (~nobody@87.13.30.222) (Ping timeout: 272 seconds)
[22:04:42] <llua> so like, powershell...
[22:05:15] * emanuele6 also backs away slowly
[22:05:20] <greycat> We only concern ourselves with bash, POSIX sh, and to a *much* smaller extent, Bourne sh.  Maybe ksh a tiny bit if someone's feeling like it.
[22:05:34] <greycat> All other shells (including zsh) are off topic here.
[22:06:12] <emanuele6> especially zsh
[22:09:09] <phy1729> What do you have against line noise?
[22:09:33] <greycat> sed is marginally supported here
[22:11:11] <twkm> i.e., #sed exists.
[22:11:22] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Ping timeout: 600 seconds)
[22:11:37] *** Quits: TomyWork (~TomyLobo@p200300e80f06af00e0f307a568755ca0.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:12:09] <greycat> all the line-noises have their own channels (#perl #zsh #sed)
[22:12:16] *** Joins: makara (~sol@196.61.111.63)
[22:12:28] <phy1729> I always assume #sed is just izabera slowly making ever more complex games
[22:13:38] *** Joins: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr)
[22:15:15] *** Quits: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com) (Quit: Client closed)
[22:15:29] *** Joins: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com)
[22:17:03] *** Parts: Guest20 (~Guest20@7.sub-174-255-5.myvzw.com) ()
[22:18:24] *** Quits: MenschZwoNull (~MenschZwo@p200300c8571e370094ab5ecbac584ac2.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:18:55] *** Joins: goose (goose@bucket.goose.ws)
[22:19:42] *** Quits: crabbedhaloablut (~crabbedha@user/crabbedhaloablut) (Ping timeout: 244 seconds)
[22:20:05] *** Joins: crabbedhaloablut (~crabbedha@user/crabbedhaloablut)
[22:21:40] *** Joins: itu (~wp@wikipedia/itu)
[22:22:39] <djph> phy1729: it's not?
[22:27:38] <emanuele6> !learn $((" Quotes expanding in math contexts is a bash-specific feature. If you must use substitutions in a math context (e.g. you need to do maths on $?, $# or ${#var}) and you are targeting POSIX sh, you should not quote those substitutions since the quotes are not guaranteed to expand: e.g. `echo "$(( "$#" + 1 ))"' causes a syntax error in dash and zsh; use `echo "$(( $# + 1 ))"' instead.
[22:27:38] <greybot> OK, emanuele6
[22:27:47] <emanuele6> !learn ((" #redirect $(("
[22:27:47] <greybot> OK, emanuele6
[22:29:13] <greycat> Probably because of the way POSIX worded their spec.  Something about "treating it as double quoted".
[22:29:31] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[22:30:10] <greycat> Exact wording: "The expression shall be treated as if it were in double-quotes, except that a double-quote inside the expression is not treated specially."
[22:30:27] <greycat> Good luck figuring out what that last clause means.
[22:30:33] <earnestly> d# f() { printf 'wait what: %s\n' "$(("$#" + 1))"; }; f a b c
[22:30:35] <shbot> earnestly: dash: 1: arithmetic expression: expecting primary: ""3" + 1"
[22:32:07] <earnestly> d# a=10/2; echo "$((a * 5))" "$(($a * 5))"
[22:32:09] <shbot> earnestly: dash: 1: Illegal number: 10/2
[22:32:09] <greycat> dash is probably trying to interpret the POSIX wording as literally as possible, and passing along the double-quotes as literal characters
[22:32:42] <earnestly> Sometimes it can be literal but then it adds local and other things
[22:32:49] <earnestly> # a=10/2; echo "$((a * 5))" "$(($a * 5))"
[22:32:50] <shbot> earnestly: 25 25
[22:32:58] <earnestly> # a=10/2; echo "$((a * 5))" "$(("$a" * 5))"
[22:32:59] <shbot> earnestly: 25 25
[22:33:02] <earnestly> Hm
[22:33:17] <greycat> you need operations where the precedence matters, like + and *
[22:33:18] <earnestly> Oh I should reverse that
[22:33:41] <earnestly> # a=2*10; echo "$((a / 5))" "$(("$a" / 5))"
[22:33:42] <shbot> earnestly: 4 4
[22:33:50] <earnestly> # a=2*10; echo "$((a / 5))" "$(($a / 5))"
[22:33:52] <shbot> earnestly: 4 4
[22:33:56] <earnestly> I can't remember now
[22:33:58] <greycat> *sigh*
[22:34:02] <greycat> Pick + and * not / and *
[22:34:34] <greycat> # a=1+2; echo $((a * 3)) $(($a * 3))
[22:34:36] <shbot> greycat: 9 7
[22:34:42] <earnestly> 20/5 would be 4 so that doesn't help me
[22:35:49] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[22:35:54] *** sixwheel- is now known as sixwheeledbeast
[22:36:44] <earnestly> Well, at least this wouldn't work at all in posix (apparently) as it would exclude numbers like '1+2'
[22:37:05] <greycat> POSIX doesn't require bash's recursive arithmetic evaluation
[22:37:55] <alzgh> what is the backtick character called in bash manual?
[22:38:17] <greycat> `
[22:38:42] <greycat> but you won't find it by searching for that, because Chet loves "emacs quoting".
[22:38:56] <greycat> might be better to search for command substitution
[22:38:57] *** Joins: vysn (~vysn@user/vysn)
[22:38:57] *** Quits: H3dn1ng (~H3dn1ng@2-248-149-85-no172.tbcn.telia.com) (Quit: leaving)
[22:39:06] <greycat> or just ask your actual question
[22:39:38] <alzgh> I wanted to read up the part that tells me how backticks help me put the output of one command in a variable
[22:39:44] <earnestly> That's also latex quoting
[22:39:48] <alzgh> I'm reading this book and it is shit
[22:39:50] <greycat> Backticks are DEPRECATED.  Stop using them.
[22:40:02] <greycat> !`
[22:40:02] <greybot> The backquote (`) is used in the old-style command substitution, e.g. foo=`command`. The foo=$(command) syntax is recommended instead. Backslash handling inside $() is less surprising, and $() is easier to nest. See http://mywiki.wooledge.org/BashFAQ/082
[22:40:14] <earnestly> alzgh: Of course it's shit, everything that isn't wooledge (or bash-hackers.org) is shit
[22:40:21] <alzgh> see, I told you this book I'm reading is shit
[22:40:24] <emanuele6> and m4 quoting
[22:40:31] <earnestly> alzgh: You can save yourself a *lot* of time by just excluding everything but those two places
[22:40:31] <alzgh> that's why I wanted to read up in the manual
[22:40:40] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[22:40:45] <e36freak> alzgh: "command substitution"
[22:40:55] <greycat> Command Substitution   with the capitals
[22:41:07] <djph> emanuele6: 'm4 quoting' ?
[22:41:17] <greycat> `thing'
[22:41:30] <earnestly> Fortunately m4 lets you change the quoting characters
[22:41:37] <greycat> because on old commercial unix workstations, the default font have ` and ' as mirror images of each other
[22:41:43] <djph> ah
[22:42:43] *** Quits: GuiToris (~GuiToris@user/guitoris) (Ping timeout: 268 seconds)
[22:42:55] <hwrd> I inherited some code that I guess used to work but now doesn't... if a function returns a value, is it possible for another function to call that function and assign a `$?` to  a variable?  This code is written this way, but the assignment is never reach, code exits.
[22:43:42] *** Quits: lordrishav (~lordrisha@157.35.87.183) (Ping timeout: 256 seconds)
[22:43:45] *** Joins: lordrishav_ (~lordrisha@157.35.87.183)
[22:43:46] <greycat> # f1() { (exit 17); f2; );  f2() { local var=$?; echo "var is $var"; };  f1
[22:43:48] <shbot> greycat: bash: syntax error near unexpected token `)'
[22:43:48] <emanuele6> !set-e > hwrd: maybe this is the reason
[22:43:48] <greybot> hwrd: maybe this is the reason: "set -e" is an inheritance of the old bourne shell, and doesn't really work well with modern shell features. You'll really have less buggy scripts if you do the error handling manually instead of relying on the unreliable "set -e"; see http://mywiki.wooledge.org/BashFAQ/105
[22:43:49] *** lordrishav_ is now known as LordRishav
[22:44:00] <greycat> # f1() { (exit 17); f2; };  f2() { local var=$?; echo "var is $var"; };  f1
[22:44:03] <shbot> greycat: var is 17
[22:44:14] <greycat> But yes, set -e is evil and you should stab it in the face.
[22:44:36] <greycat> "code exits" is a strong indicator that set -e is indeed in the picture
[22:44:55] <hwrd> emanuele6 hmm lemme try
[22:45:29] <hwrd> emanuele6 yeah that was it, thank you
[22:46:08] *** Joins: kspalaiologos (~kspalaiol@user/kspalaiologos)
[22:46:09] <emanuele6> someone has added `set -e' just for the sake of adding it without checking if the script was still working smh 
[22:46:22] <xx> [[ $? -gt 0 && $? -le 64 ]] || [[ $? -gt 128 ]]
[22:46:36] <xx> why can't I use <= in there? they are all integer comparisons
[22:46:52] <greycat> because inside [[ ]], <= does string comparison, not integer
[22:46:56] <greycat> you want (( )) instead, probably
[22:47:01] <hwrd> emanuele6 very weird, the git blame on that line was 2 years 8 months ago... we do a trial run of this code every year... it's our disaster recovery plan... not sure why it's been working.
[22:47:10] <xx> hmm I see, thanks
[22:47:23] *** Quits: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de) (Remote host closed the connection)
[22:48:26] *** Joins: JohnML (~JohnML@ip-37-201-129-30.hsi13.unitymediagroup.de)
[22:48:52] <twkm> shitty errexit.
[22:50:18] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[22:51:12] *** Joins: lordrishav_ (~lordrisha@157.42.103.251)
[22:51:48] *** Quits: Fozzworth_ (~Fozzworth@user/fozzworth) (Ping timeout: 276 seconds)
[22:52:22] *** Quits: LordRishav (~lordrisha@157.35.87.183) (Killed (NickServ (GHOST command used by lordrishav_!~lordrisha@157.42.103.251)))
[22:52:29] *** lordrishav_ is now known as LordRishav
[22:59:00] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Ping timeout: 606 seconds)
[22:59:06] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[22:59:23] *** Joins: seninha (~seninha@user/seninha)
[22:59:30] *** Quits: sazawal (~sazawal@122.161.170.192) (Read error: Connection reset by peer)
[23:00:40] *** Joins: bakerst (~bakerst@libera/staff/bakerst)
[23:01:48] *** Quits: alzgh (~alzgh@216.155.158.214) (Quit: Client closed)
[23:07:05] *** Joins: rememberYou (~someone@user/rememberyou)
[23:07:29] *** Parts: setuid (sid191390@id-191390.stonehaven.irccloud.com) (thanks for the help earlier! )
[23:07:32] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[23:10:35] *** Quits: n4dir (~user@mue-88-130-56-247.dsl.tropolys.de) (Remote host closed the connection)
[23:13:13] *** Joins: sinaowolabi (~SinaOwola@102.134.114.19)
[23:14:36] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[23:14:55] *** Joins: Crescendo (~Crescendo@user/crescendo)
[23:15:27] *** Quits: xiao (~xiao@37.164.59.1) (Remote host closed the connection)
[23:15:47] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[23:18:28] *** Quits: lsrtl_ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[23:19:35] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[23:23:38] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[23:24:41] *** Joins: bakerst_ (~bakerst@libera/staff/bakerst)
[23:28:02] *** Quits: bakerst (~bakerst@libera/staff/bakerst) (Ping timeout: 600 seconds)
[23:32:57] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[23:33:00] *** bakerst_ is now known as bakerst
[23:33:13] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[23:33:17] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[23:33:27] *** Quits: kspalaiologos (~kspalaiol@user/kspalaiologos) (Quit: Leaving)
[23:33:34] *** Quits: LordRishav (~lordrisha@157.42.103.251) (Quit: Konversation terminated!)
[23:34:25] *** Quits: trekkie1701c (~trekkie17@user/trekkie1701c) (Quit: :P)
[23:35:43] *** Joins: trekkie1701c (~trekkie17@user/trekkie1701c)
[23:36:26] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[23:36:33] *** Joins: zeden (~zeden@user/zeden)
[23:37:10] *** Quits: pystardust (~pystardus@117.96.229.96) (Quit: sleep time)
[23:45:17] *** Quits: auri (~admin@static.46.108.40.188.clients.your-server.de) (Changing host)
[23:45:17] *** Joins: auri (~admin@fsf/member/auri)
[23:50:19] *** Quits: mattil (~mattilinn@87-92-39-170.bb.dnainternet.fi) (Quit: Leaving)
[23:50:35] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[23:51:41] *** Joins: m0viefreak (~asdf@user/m0viefreak)
[23:52:09] *** Joins: n4dir (~user@mue-88-130-56-247.dsl.tropolys.de)
[23:52:31] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Ping timeout: 258 seconds)
[23:54:48] *** Joins: howdoi (uid224@id-224.tooting.irccloud.com)
[23:55:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:59:36] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
