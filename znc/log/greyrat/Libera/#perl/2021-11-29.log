[00:02:22] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[00:08:34] *** Quits: vigumnov (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:10:57] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[00:11:16] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[00:16:38] *** magla is now known as geli
[00:23:05] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[00:26:14] *** Quits: geli (~gelignite@55d4f645.access.ecotel.net) (Quit: Stay safe!)
[00:26:34] *** f3ew1 is now known as f3ew
[00:26:58] <Mandevil> Hm, how to make return 1 if $l1 ne $l2 not warn on undefined $l1/$l2?
[00:27:22] <Mandevil> All I can think of is $l1 // '' ne $l2 // ''
[00:29:12] <zgu|skaro> do something like return 1 unless (defined $l1 && defined $l2) first?
[00:30:06] <choroba> ($l1 // '') ne ($l2 // '') Parentheses are needed for precedence
[00:30:25] <Mandevil> // lower precedence than ne?
[00:30:42] <choroba> yes because it's the same precedence as ||
[00:30:48] <choroba> unfortunately
[00:32:02] <daemon> eval: my ($l1,$l2) = (undef,1);$l1||'' eq $l2||'' ? 1 : 0
[00:32:04] <perlbot> daemon: 0
[00:32:19] <daemon> eval: my ($l1,$l2) = (1,1);$l1||'' eq $l2||'' ? 1 : 0
[00:32:20] <perlbot> daemon: 1
[00:32:33] <daemon> eval: my ($l1,$l2) = (undef,undef);$l1||'' eq $l2||'' ? 1 : 0
[00:32:34] <perlbot> daemon: 1
[00:33:16] <rewt> Mandevil, what if both are undef?
[00:33:37] <choroba> also, what if one is undef at the other is empty?
[00:34:25] <rewt> return 1 if not defined $l1 or not defined $l2 or $l1 ne $l2;
[00:34:29] <daemon> eval: my ($l1,$l2) = ('',undef);$l1||'' eq $l2||'' ? 1 : 0
[00:34:31] <perlbot> daemon: 1
[00:34:57] <choroba> perl -MO=Deparse,-p -e '$l1||"" eq $l2||"" ? 1 : 0'
[00:34:58] <choroba> ((($l1 || ('' eq $l2)) || '') ? '???' : '???');
[00:35:24] <Mandevil> rewt: both undef is the same as one of them undef.
[00:35:39] <Mandevil> Anyway, my solution is just reordering the tests... https://l.perl.bot/p/em8zdp
[00:35:40] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:37:04] <daemon> 20:56:58, <Mandevil> Hm, how to make return 1 if $l1 ne $l2 not warn on undefined $l1/$l2?
[00:37:06] <daemon> well ...
[00:37:10] <daemon> || does that for you
[00:37:20] <daemon> assuming undef and '' are the same in your situation
[00:37:34] <daemon> elsewhere you need 'defined'
[00:37:39] <Mandevil> daemon: No, they are not.
[00:39:16] <daemon> ok so undef and '' are different
[00:39:20] <daemon> one mo
[00:39:21] <Mandevil> Yes.
[00:39:28] <Mandevil> It's a text file comparison.
[00:39:30] <rewt> return undef unless $l1 && $l2;  will return if either $l1 or $l2 are false;  could either of them ever be empty strings?  or contain just a "0"?
[00:39:37] <Mandevil> Where I only want to know if they are the same or not.
[00:39:47] <Mandevil> And files can contain valid but empty lines, right?
[00:40:04] <rewt> depends on your definition of "valid"
[00:40:09] <rewt> empty strings are valid but false
[00:40:29] <Mandevil> Text file can have 0 length lines just fine.
[00:40:43] <Mandevil> It's not something that should break the comparison.
[00:41:22] <daemon> eval: my ($l1,$l2) = (0,0); (defined($l1) && defined($l2) && $l1 eq $l2) ? 1 : 0
[00:41:24] <perlbot> daemon: 1
[00:41:26] <daemon> eval: my ($l1,$l2) = (undef,0); (defined($l1) && defined($l2) && $l1 eq $l2) ? 1 : 0
[00:41:28] <perlbot> daemon: 0
[00:41:38] <daemon> eval: my ($l1,$l2) = (1,1); (defined($l1) && defined($l2) && $l1 eq $l2) ? 1 : 0
[00:41:39] <perlbot> daemon: 1
[00:42:16] <daemon> though that won't match a double undef
[00:42:35] <Mandevil> Oh right, I need "defined" in my code.
[00:42:37] <daemon> do you need to do that?
[00:43:16] <Mandevil> Yes.
[00:43:20] <Mandevil> Line 17 would break
[00:43:29] <Mandevil> In case of empty lines.
[00:43:37] <rewt> yes, if you need to checkf or undef, you need to check for undef
[00:43:57] <Mandevil> (it's not really an issue here since I don't chomp... but I could change my mind and then it would break).
[00:44:33] <rewt> and what if the last line doesn't have a newline?
[00:44:34] <daemon> eval: my ($l1,$l2) = (undef,undef); (defined($l1) && defined($l2) && $l1 eq $l2) || (!defined($l1) ^^ !defined($l2)) ? 1 : 0
[00:44:35] <perlbot> daemon: ERROR: syntax error at (IRC) line 1, near "^^" 
[00:44:38] *** Quits: dsrt^ (~dsrt@68.101.58.90) (Remote host closed the connection)
[00:44:40] <daemon> eval: my ($l1,$l2) = (undef,undef); (defined($l1) && defined($l2) && $l1 eq $l2) || (!defined($l1) && !defined($l2)) ? 1 : 0
[00:44:42] <perlbot> daemon: 1
[00:44:45] <daemon> there we go
[00:45:23] <rewt> so... <rewt> return 1 if not defined $l1 or not defined $l2 or $l1 ne $l2;
[00:45:30] <Mandevil> Final version hopefully: https://l.perl.bot/p/dac85p
[00:45:30] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[00:47:21] <daemon> you should really sanitise your inputs though
[00:47:22] <daemon> null is evil
[00:47:41] <Mandevil> Null what?
[00:47:45] <daemon> 'undef'
[00:47:54] <daemon> kill it at the ingress
[00:47:58] <rewt> daemon, did you check his link?
[00:48:08] <daemon> nope im watching youtube
[00:48:10] <daemon> lets take a peak
[00:48:32] <daemon> wtf
[00:48:53] <rewt> heh
[00:49:25] <daemon> this is some weird C fetishism based with ancient google searches and kink all built into one
[00:49:47] <daemon> Mandevil, this code is shit
[00:49:47] <Mandevil> Suggestions welcome.
[00:50:27] <daemon> would you be up for grabbing a book?
[00:50:52] <Mandevil> Depends on the book
[00:50:57] <daemon> perbot books
[00:51:00] <daemon> perlbot books
[00:51:00] <perlbot> daemon: For Perl books see http://books.perl.org/ and http://perl-begin.org/books/ . Especially see the Modern Perl factoid and perl-tutorial.org
[00:51:10] <daemon> was more thinking modern perl but there might be better
[00:51:14] <daemon> its kind of old now
[00:51:25] <daemon> but perl can do what you are doing far far better and clearer
[00:51:40] <daemon> the problem is for me or rewt to explain the problems in that code snippet would quite literally take hours
[00:51:56] <rewt> heh, yeah, seem more like java to me
[00:52:19] <daemon> I do not even know what that is, my brain is just looking for a safe space :D
[00:52:58] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[00:53:15] <Mandevil> Saying my code is shit is not particularly useful to me.
[00:54:41] <daemon> Mandevil, I am trying to be constructive, perl is a lot more useful than you think it is; that code must have taken hours to figure out
[00:54:47] <daemon> you can write it way easier and better
[00:54:54] <daemon> I really recommend you checkout one of the books
[00:55:05] <daemon> if you are not a reading type, just check out the examples
[00:55:10] <daemon> you do not need to write perl like that
[00:55:21] <rewt> yep, the perl way of doing this is to just do it; don't get too fancy with callbacks, and factories, and iterators... just loop through the file contents and compare them
[00:55:43] <Mandevil> I can try to do better tomorrow.
[00:56:06] <Mandevil> It's 10pm here.
[00:56:13] <daemon> Mandevil, we will always be here to help, just that snippet is so wrong it is hard to start from, you might want to ask tomorrow on how you would start out on <what its meant to do>
[00:56:35] <Mandevil> It's comparing two text files.
[00:56:44] <Mandevil> And saying DIFFERENT / NOT DIFFERENT
[00:56:59] <rewt> and it seems like you read in the full content of each file;  if the only reason to read them in is to compare them, it may be better to read, compare, and discard line by line
[00:57:06] <daemon> you could do that with two calls to Digest::SHA and just compare the hashes
[00:57:26] <daemon> no need to worry about spaces and undef then
[00:57:30] <Mandevil> daemon: I need to be able to ignore certain things during the comparison.
[00:57:40] <Mandevil> User-defined ignore regex is right there.
[00:57:52] *** Joins: deadmarshal (~deadmarsh@95.38.228.7)
[00:58:35] <Mandevil> And this is just one step out of many what's done with the files, so having them in memory is better than constantly re-reading them and re-writing them.
[00:58:48] <daemon> as long as you have the memory for them, that is fine
[00:59:07] <daemon> though if it is statistical information like line counts, you can do that by simply opening them and seeking them
[00:59:23] <daemon> I would bet there is a module that can do that for you
[00:59:26] <Mandevil> https://l.perl.bot/p/hpvuwx this is the whole module
[00:59:27] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[01:00:55] *** Quits: EGD (~egd@user/egd) ()
[01:01:02] <daemon> yeah it realy reads like you are making things hard on yourself
[01:02:31] *** Quits: deadmarshal (~deadmarsh@95.38.228.7) (Ping timeout: 256 seconds)
[01:03:43] *** Joins: kensanata (~user@user/kensanata)
[01:03:58] <Mandevil> It would still be useful to articulat what's the main issue.
[01:04:10] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[01:04:46] <daemon> general design
[01:04:49] <daemon> its very well 90s
[01:05:01] <daemon> nice commenting though
[01:05:22] <daemon> also appears you have stuck to 80 cols :)
[01:05:46] <Mandevil> What? You're suggesting me to go WIDE?
[01:05:57] <daemon> haha I stick to 80-120 as well :)
[01:06:05] <daemon> some SQL statements need the extra width
[01:08:45] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[01:12:35] *** Quits: Doraemon (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[01:12:56] *** Joins: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de)
[01:14:21] * gordonfish wonders if anyone else sometimes finds themselves writting something like $foo->abc( blah => ); # instead of ... ( 'blah' )
[01:15:14] *** Quits: xenial-user5 (~androirc@20014C4C17E1D200E9F458418DE1ABEC.catv.pool.telekom.hu) (Ping timeout: 265 seconds)
[01:15:21] <Mandevil> THe first option is one char longer :)
[01:15:24] * daemon does crap like that all the time from habbit
[01:15:33] <Mandevil> But maybe the latter is too 90s.
[01:15:47] * daemon has not used @array or %hash over $stuff and @{ } %{ } for years
[01:16:44] <gordonfish> You never use simple arrays or hashes?
[01:16:55] <daemon> nope
[01:17:11] <daemon> I have no idea why, its just become a thing
[01:18:32] <gordonfish> Mandevil: It's one char long but you don't have to bother with quotes and it's quicker to modify if you need to later add an arg.
[01:19:33] <Mandevil> Using => in place of , used to confuse the hell out of me.
[01:20:01] <gordonfish> daemon: Kind of reminds me of someone I once knew who insisted on making everything, even simple one-time-use chars/ints/longs/floats/etc in his C/C++ code pointers (putting every bloody thing on the heap.)
[01:20:23] <daemon> gordonfish, I once wrote hello world in a POE session as a project template :P
[01:20:23] <gordonfish> (Even for loop vars)
[01:20:47] <gordonfish> Cool
[01:20:57] <Mandevil> Like malloc()ing each one?
[01:21:06] <daemon> I am slowly moving away from POE, but I think people do get into 'styles'
[01:21:16] <daemon> like the $everything over @array/%hash thing
[01:21:23] <gordonfish> (I always like seeing creative hello-world-esque code for tests/examples.)
[01:21:47] <daemon> I also refuse to use while/if in suffix as well as refusing to use 'unless' at all
[01:21:48] <daemon> >.>
[01:22:09] <gordonfish> daemon: That be useful, though it's easy to fall into god-vars that way
[01:23:26] <daemon> yep
[01:23:36] <gordonfish> daemon: I use if more than unless but the latter does have it's uses, like: do_this unless $flag;
[01:24:33] <daemon> I tend to write in the negative, that is if (this DOES NOT EQUAL THAT), so if I need a helper function that would use this modern 'unless' stuff can easily be shoved in a sub function
[01:24:51] <daemon> that follows the same logic and naming as every other language in common tongue
[01:26:13] <aquanight> "write in the negative" but that's literally what 'unless' is
[01:26:21] <daemon> its not though is it
[01:26:40] <daemon> if I write 'unless' into csharp or rust they both will scream about it
[01:26:52] <daemon> its not a common or normal operative
[01:26:53] <Adura> What about elsif?
[01:26:58] <daemon> elsif~else if
[01:27:43] <daemon> I do wonder how we got elsif though rather than the C standard else if
[01:28:32] *** dngor_ is now known as dngor
[01:28:36] <aquanight> 'else if' isn't anything special to C
[01:28:55] <aquanight> it's just an else with a single statement that happens to be another if
[01:29:26] <aquanight> but perl doesn't do 'unblocked single statements' like that so it needed elsif to cover that gap
[01:30:13] <daemon> well yeah but it could have be structured to follow the standard
[01:30:29] <daemon> it is kind of weird
[01:30:43] <aquanight> could have. wasn't. no use crying over spilt semicolosn.
[01:31:01] <Adura> I guess if ! is less characters, hah.
[01:31:04] <daemon> oh yeah its way beyond worrying about now, but I still wonder why
[01:31:26] <daemon> :-)
[01:31:41] <aquanight> there are some people who straight up crusade against any kind of if (x) y; single-statement constructs in C
[01:32:05] <aquanight> I don't know if larry was like that but there are certainly people who will religiously {} even single statements
[01:32:24] <daemon> I actually do but its from a habbit of my browser
[01:32:33] <daemon> if (1==0) {\n\n}
[01:32:58] <aquanight> but then again, larry does the '{ on same line' nonsense that I don't like at all.
[01:33:07] <Mandevil> OK, good night, I'm going to stay up all night wondering what's wrong with my code...
[01:33:26] <daemon> Mandevil, go grab some sleep, as long as it works its a first prototype :)
[01:33:32] <daemon> worry about it later
[01:33:49] <daemon> as hateful as everyone finds it, prototyping is an awesome development path
[01:34:11] <aquanight> I pretty much only do { on same line in perl (and in the unlikely case I ever need to deal with JS I guess, because JS will actually wreck your shit if you try to stick to newline-{). But C, C++, C#, java, etc I stick to newline-{
[01:34:37] <gordonfish> Re: <daemon> I do wonder how we got elsif though rather than the C standard else if
[01:34:43] <aquanight> I don't know if there's any situation in perl that newline-{ will wreck you
[01:34:48] <gordonfish> Might have been influenced by bourne's elif
[01:35:06] <daemon> c modified the way I wrote perl, csharp modified the way I write perl and rust modified that further - I try to make all languages bend to the same style
[01:35:23] <daemon> gordonfish, oooh indeed perl was meant to be a console tool replacement and all
[01:35:52] <aquanight> it'd be nice to do that, but too often I find that despite the superficial similarities, some langauges will actually stab you in the kidneys if you try to use a style derived from another language
[01:35:52] <gordonfish> A swiss army knife, yeah
[01:36:35] <daemon> also with the age of it it, with command line limits on input and all yeah I can see that
[01:36:37] <gordonfish> aquanight: *cough*python*coughhackurgle*
[01:36:52] <aquanight> gordonfish: I don't count python in the C family
[01:37:01] <gordonfish> Nor would I
[01:37:02] <aquanight> but that's probably a good example
[01:37:24] <aquanight> not a fan of being forced to a specific indenting style
[01:37:27] <daemon> pythong is a functional language with a lot of tinsel on it; is it not?
[01:37:28] <gordonfish> aquanight: Well python flat out kicks you in the balls with a football/soccer cleat
[01:37:32] *** Joins: michelle_ (~michelle@203.206.128.220)
[01:38:01] <aquanight> gordonfish: ... I think I'd rather be kicked by a football cleat than stabbed in the kidneys.
[01:38:19] <gordonfish> Hmm, good point
[01:38:43] <gordonfish> (especially if the underside doesn't actually make contact)
[01:38:57] <aquanight> even if
[01:39:28] <aquanight> like yes it'll hurt and probably that awful torsion thing and all that but you can't live without kidneys :)
[01:39:58] * gordonfish . o O ( swears he once saw a lang that had an 'even if' statement, but can't remember what it was to save his life )
[01:40:03] *** Quits: Shells (~michelle@2407:8800:bc20:200a:4865:cf2d:d977:d9f6) (Ping timeout: 250 seconds)
[01:40:13] <aquanight> wtf would that even do
[01:40:37] <aquanight> even if (COND) { BLOCK }; # evaluates condition then runs the block. Does not actually care what the condition is.
[01:41:08] <ether> Mandevil: Syntax::Keyword::Equ
[01:42:12] * GumbyPAN CPAN Upload: Crypt-JWT-0.034 by MIK https://metacpan.org/release/MIK/Crypt-JWT-0.034
[01:42:12] * GumbyPAN CPAN Upload: JSON-Schema-Modern-Document-OpenAPI-0.004 by ETHER https://metacpan.org/release/ETHER/JSON-Schema-Modern-Document-OpenAPI-0.004
[01:42:45] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi) (Ping timeout: 256 seconds)
[01:43:47] <gordonfish> I can't remember exactly, but I think it was something like (psuedo code using C-ish since I don't know what it looked like) if (foo) { ... do_this even if !foo; ... } like it would still run that line in the if block even if (heh) the main condition fails.
[01:44:51] <gordonfish> Or maybe it was more like do_this even if cond_failed (some special built-in thing)
[01:44:59] <gordonfish> Something likely very obscure
[01:45:59] <gordonfish> I kind of want to think it was from some calculator or one off simple computers or something.
[01:49:32] *** Quits: GeekRuthie (GeekRuthie@2600:3c00::f03c:92ff:fee2:9bf3) (Remote host closed the connection)
[01:50:43] <gordonfish> aquanight: I think it lingered in the back of my mind largely due to how it was essentailly a postfix type statement, something that wasn't common outside of perl.
[01:51:10] <gordonfish> (And hell on ice skates, I thought postfix if was a perl5 thing, but apparently it goes back to perl 1.x even!)
[01:51:14] <gordonfish> eval1: $x = 4; print (123) if $x == 4;
[01:51:15] <perlbot> gordonfish: 123
[01:51:18] <gordonfish> eval1: $x = 3; print (123) if $x == 4;
[01:51:19] <perlbot> gordonfish: No output.
[01:51:54] *** Joins: GeekRuthie (GeekRuthie@2600:3c00::f03c:92ff:fee2:9bf3)
[01:55:40] *** Quits: kensanata (~user@user/kensanata) (Ping timeout: 265 seconds)
[01:56:57] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[02:06:13] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:06:52] <pragma-> what does eval1 do compared to eval?
[02:07:19] <daemon> mhmm
[02:07:27] <daemon> well normally eval is suffixed with a version
[02:07:34] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Quit: leaving)
[02:07:41] <daemon> eval5.28: $^V
[02:07:46] <perlbot> daemon: bless( {version => [5,28,2],original => "v5.28.2",qv => 1}, 'version' )
[02:07:46] <pragma-> normally i've seen eval suffixed with sw
[02:07:51] <pragma-> and for the longest time i thought sw meant "software"
[02:07:58] <daemon> sw is strict+warnings
[02:08:02] <daemon> not sure what '1' does though
[02:08:03] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:08:06] <daemon> perhaps -CURRENT>
[02:08:08] <daemon> i.e. latest perl
[02:08:15] <daemon> eval1: $^V
[02:08:16] <perlbot> daemon: syntax error in file /tmp/perl-ee1aaeh at line 2, next token "EOF" Execution aborted due to compilation errors. [Exited 1]
[02:08:22] <daemon> or not
[02:08:23] <pragma-> shouldn't that just be `eval`?
[02:08:33] <pragma-> (for current)
[02:08:41] <daemon> eval: $^V
[02:08:43] <perlbot> daemon: bless( {version => [5,35,5],qv => 1,original => "v5.35.5"}, 'version' )
[02:08:47] <daemon> yep
[02:09:00] <daemon> no idea whateval1 is
[02:09:10] <daemon> gordonfish, ?^
[02:09:34] *** Joins: proller (~p@80.240.216.69)
[02:09:35] <daemon> perbot help eval1
[02:09:43] <daemon> perlbot help eval1
[02:09:43] <perlbot> daemon: The eval plugin. Syntax, «eval: code». Prefixes: w=>warnings, s=>strict, m=>use Ojo. Suffixes: t=>threaded, pb=>pastebin it, nl=>turn \n to ␤. languages: 
[02:10:02] <daemon> simcop2387, ^?
[02:10:32] <simcop2387> eval1: print "Hi I'm perl 1.  I'm not very useful or work the way you expect";
[02:10:33] <perlbot> simcop2387: Hi I'm perl 1.  I'm not very useful or work the way you expect
[02:10:43] <daemon> miniperl?
[02:10:48] <daemon> what is it
[02:10:49] <simcop2387> nope, perl version 1
[02:10:58] <daemon> oh so the versioning is legit
[02:11:08] <simcop2387> it predates even $] really
[02:11:17] <simcop2387> eval1: print "--- $] ---";
[02:11:18] <perlbot> simcop2387: ---  ---
[02:11:27] <daemon> bet that was fun to compile
[02:11:42] <daemon> or was it a single .cc :D
[02:12:27] <simcop2387> not as bad as perl3 actually.  because it was so simple it doesn't do as much so it was easier to patch up.  it was mostly places where it wasn't including the right .h files, or doing stuff like assuming int's were fine for arguments to functions when they really aren't.  basicaly old unixisms
[02:12:39] <LeoNerd> perlbot: swmevaltpbnl print "hi\n"
[02:12:39] <perlbot> LeoNerd: No factoid found. Did you mean one of these: [[sno]: eval] [simple] [seen f00li5h]
[02:12:49] <LeoNerd> awww
[02:13:12] <simcop2387> LeoNerd: the m doesn't stack as much.  and the pb bits are broken due to a routing issue that i still haven't taken the time to fix up properly
[02:13:21] <LeoNerd> ah
[02:13:29] <daemon> simcop2387, seems to be the thing, compiling nextstep is the same .. it works fine but bad header paths
[02:13:33] <simcop2387> i should fix that though
[02:13:44] <LeoNerd> perlbot: swevaltnl print "hi\n"
[02:13:47] <perlbot> LeoNerd: hi␤
[02:13:51] <LeoNerd> :)
[02:17:13] *** Quits: NeoCron (~NeoCron@p200300c4cf07d8007d174ac0d3b51364.dip0.t-ipconnect.de) (Quit: Leaving)
[02:21:36] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[02:23:08] *** Joins: JayC_ (~JayC@gateway/tor-sasl/jayc)
[02:23:30] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Ping timeout: 276 seconds)
[02:23:32] *** JayC_ is now known as JayC
[02:32:46] *** Quits: pizdets (~pizdets@183.182.110.66) (Ping timeout: 250 seconds)
[02:34:08] *** Joins: pizdets (~pizdets@183.182.110.253)
[02:39:07] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:40:27] *** Joins: nuh^ (~nuh@68.101.58.90)
[02:53:32] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 240 seconds)
[02:54:58] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:56:05] *** Joins: emanuele6 (~emanuele6@net-2-36-148-173.cust.vodafonedsl.it)
[02:56:11] *** Quits: emanuele6 (~emanuele6@net-2-36-148-173.cust.vodafonedsl.it) (Changing host)
[02:56:11] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[02:56:45] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 250 seconds)
[02:59:31] *** Joins: whynot (~whynot@37.73.7.124)
[03:00:17] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[03:05:29] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[03:09:25] *** Quits: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[03:10:00] *** Joins: pj (~pj@ghettoforge/pj)
[03:20:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[03:27:00] *** Joins: monkey_ (~user@190.104.116.153)
[03:30:00] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[03:30:10] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[03:32:17] *** Joins: rgrinberg (~textual@200.5.63.76)
[03:58:06] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[04:00:10] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[04:00:26] <gordonfish> Re: <+perlbot> daemon: The eval plugin. Syntax, «eval: code». Prefixes: w=>warnings, s=>strict, m=>use Ojo. Suffixes: t=>threaded, pb=>pastebin it, nl=>turn \n to ␤.
[04:00:34] *** Joins: troller (~p@80.240.216.69)
[04:00:45] <gordonfish> simcop2387: 'm=>use Ojo' should be 'm=>use ojo'
[04:00:55] *** Quits: proller (~p@80.240.216.69) (Read error: Connection reset by peer)
[04:04:11] <gordonfish> Re: { <daemon> no idea whateval1 is }, { <daemon> gordonfish, ?^ } => You can do pre-5 versions of Perl via perlbot. eval{1,2,3,4} for perls 1-4, respectively.
[04:07:35] <gordonfish> Similar to how you can do eval5.0, sweval5.8, seval5.12, weval5.20, wseval5.34, though there doesn't appear to be a eval5 like there is eval4 and lower.
[04:12:35] <gordonfish> And speaking of ojo. Just took a look at its pod and interestingly, among all the lower-cased-single-letter named functions, they used one named 'x'. My initial thought was 'I have a bad feeling about this...' but it appears to work rather well, as long as it's not used as foo x bar;
[04:12:38] <gordonfish> sweval: use ojo; x '<foo><bar>baz</bar></foo>';
[04:12:40] <perlbot> gordonfish: bless( do{\(my $o = bless( {tree => ["root",["tag","foo",{},${$VAR1}->{tree},["tag","bar",{},${$VAR1}->{tree}->[1],["text","baz",${$VAR1}->{tree}->[1]->[4]]]]]}, 'Mojo::DOM::HTML' ))}, 'Mojo::DOM' )
[04:13:25] <gordonfish> sweval: use ojo; 'blah' x '<foo><bar>baz</bar></foo>';
[04:13:27] <perlbot> gordonfish: Argument "<foo><bar>baz</bar></foo>" isn't numeric in repeat (x) at (IRC) line 1. 
[04:17:42] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:38:40] *** Quits: Pali (~pali@user/pali) (Ping timeout: 268 seconds)
[04:46:24] *** Quits: rgrinberg (~textual@200.5.63.76) (Ping timeout: 256 seconds)
[04:58:57] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 250 seconds)
[05:31:36] * GumbyPAN CPAN Upload: SDL2-FFI-0.08 by SANKO https://metacpan.org/release/SANKO/SDL2-FFI-0.08
[05:41:37] * GumbyPAN CPAN Upload: Crypt-Perl-0.37_04 by FELIPE https://metacpan.org/release/FELIPE/Crypt-Perl-0.37_04
[06:05:07] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 256 seconds)
[06:09:07] *** Quits: vrurg (~vrurg@45.74.95.181) (Quit: Leaving...)
[06:11:07] *** Joins: vrurg (~vrurg@45.74.95.181)
[06:14:45] *** Quits: Su-Shee (~Susanne@p5089417b.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:14:50] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[06:16:07] *** Joins: Su-Shee (~Susanne@p5089427f.dip0.t-ipconnect.de)
[06:17:36] *** Joins: zakame (~zakame@user/zakame)
[06:19:17] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[06:24:44] *** JoelJoel is now known as Joel
[06:30:52] *** Quits: whynot (~whynot@37.73.7.124) (Quit: leaving)
[06:40:34] *** Joins: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201)
[06:41:21] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[06:45:27] *** Quits: jgaz (~jgaz@2600:8805:d982:4233:2e0:4cff:fe00:e201) (Client Quit)
[06:48:58] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:11:31] *** Joins: tbcr- (~tbcr@107.13.189.161)
[07:12:36] *** Quits: tbcr_ (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[07:13:50] *** Joins: clscott_ (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-68.dsl.bell.ca)
[07:14:18] *** Quits: clscott (~clscott@bras-base-otwaon0150w-grc-07-184-147-147-55.dsl.bell.ca) (Ping timeout: 256 seconds)
[07:14:18] *** clscott_ is now known as clscott
[07:19:59] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[07:22:47] <aquanight> hmm
[07:23:22] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 256 seconds)
[07:23:25] <aquanight> perlbot: swnleval use ojo; use O 'Concise'; sub foo { } foo x '<meh/>';
[07:23:25] <perlbot> aquanight: No factoid found. Did you mean one of these: [sgml] [simcop] [sandbox] [schmorp] [sdl perl] [unlawful] [sound off] [spellbook] [saying bit] [schmorperl]
[07:23:30] <aquanight> perlbot: nleval use ojo; use O 'Concise'; sub foo { } foo x '<meh/>';
[07:23:31] <perlbot> aquanight: No factoid found. Did you mean one of these: [nlp] [nambla] [no help] [help alias] [poly.poly] [nhlbirthday] [sql::builder] [notevil's cat] [global warming] [.nl]
[07:23:41] <aquanight> perlbot: swevalnl use ojo; use O 'Concise'; sub foo { } foo x '<meh/>';
[07:23:43] <perlbot> aquanight: No output.
[07:23:57] <aquanight> perlbot: swevalnl use ojo; use O 'Deparse'; sub foo { } foo x '<meh/>';
[07:23:59] <perlbot> aquanight: No output.
[07:24:15] <aquanight> is that not a thing that works
[07:24:33] <aquanight> perlbot: basheval perl -MO=Concise -Mojo -e 'sub foo {} foo x "<meh/>"';
[07:24:35] <perlbot> aquanight: -e syntax OK␤a  <@> leave[1 ref] vKP/REFC ->(end)␤1     <0> enter v ->2␤2     <;> nextstate(main 28933 -e:1) v:U,%,us,*,&,{,x*,x&,x$,$,fea=15 ->3␤9     <1> entersub vKS/STRICT ->a␤-        <1> ex-list K ->9␤3           <0> pushmark s ->4␤7           <1> entersub lKMS/LVINTRO,STRICT,INARGS ->8␤-              <1> ex-list lK ->7␤4                 <0> ... [Output truncated. Use `more` to read more]
[07:25:20] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"'; | perl -ne '/[A-Z]+/ and print $&'
[07:25:21] <perlbot> aquanight: /tmp/PXHf9uD5hF: line 1: syntax error near unexpected token `|'␤/tmp/PXHf9uD5hF: line 1: `perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"'; | perl -ne '/[A-Z]+/ and print $&''␤[Exited 2]
[07:25:34] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -ne '/[A-Z]+/ and print $&'
[07:25:36] <perlbot> aquanight: -e syntax OK␤LISTOPOPCOPUNOPUNOPOPUNOPUNOPOPSVOPUNOPSVOPUNOPSVOP
[07:26:10] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -ne '/[A-Z]+/ and say $&'
[07:26:12] <perlbot> aquanight: -e syntax OK␤Can't locate object method "say" via package "LISTOP" (perhaps you forgot to load "LISTOP"?) at -e line 1, <> line 1.␤[Exited 255]
[07:26:15] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -nE '/[A-Z]+/ and say $&'
[07:26:17] <perlbot> aquanight: -e syntax OK␤LISTOP␤OP␤COP␤UNOP␤UNOP␤OP␤UNOP␤UNOP␤OP␤SVOP␤UNOP␤SVOP␤UNOP␤SVOP␤
[07:26:39] <aquanight> oh
[07:26:43] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -nE '/[a-z]+/ and say $&'
[07:26:45] <perlbot> aquanight: -e syntax OK␤x␤x␤x␤x␤x␤x␤x␤x␤x␤x␤x␤x␤x␤x␤
[07:26:51] <aquanight> dammit all
[07:27:13] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -pe 's/\(0x[[:xdigit:]]+\)//'
[07:27:15] <perlbot> aquanight: -e syntax OK␤LISTOP  leave [1] ␤    OP  enter ␤    COP  nextstate ␤    UNOP  entersub ␤        UNOP  null [158] ␤            OP  pushmark ␤            UNOP  entersub ␤                UNOP  null [158] ␤                    OP  pushmark ␤                    SVOP  const  PV (0x55f08c4f35f0) "<meh/>" ␤                    UNOP  null [16] ␤               ... [Output truncated. Use `more` to read m
[07:27:22] <aquanight> still awful
[07:27:29] <aquanight> perlbot: basheval perl -MO=Terse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -pe 's/\(0x[[:xdigit:]]+\)//; s/^\s+//'
[07:27:31] <perlbot> aquanight: -e syntax OK␤LISTOP  leave [1] ␤OP  enter ␤COP  nextstate ␤UNOP  entersub ␤UNOP  null [158] ␤OP  pushmark ␤UNOP  entersub ␤UNOP  null [158] ␤OP  pushmark ␤SVOP  const  PV (0x558d105705f0) "<meh/>" ␤UNOP  null [16] ␤SVOP  gv  GV (0x558d0dfad540) *x ␤UNOP  null [16] ␤SVOP  gv  IV (0x558d10570b60) \&main::foo ␤
[07:27:35] <aquanight> THERE.
[07:27:58] <aquanight> but really I should've just done
[07:28:07] <aquanight> perlbot: basheval perl -MO=Deparse -Mojo -e 'sub foo {} foo x "<meh/>"'
[07:28:09] <perlbot> aquanight: -e syntax OK␤sub Digest::base::digest;␤sub Digest::base::clone;␤sub Digest::base::add;␤sub Digest::base::new;␤use ojo;␤BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x54\x55\x55\x55\x55"}␤use strict;␤use feature 'current_sub', 'evalbytes', 'fc', 'postderef_qq', 'say', 'signatures', 'state', 'switch', 'unicode_st... [Output truncated. Use `more` to read more]
[07:28:18] <aquanight> .......seriously?
[07:35:44] <Grinnz> deparse2pb: use ojo; sub foo {} foo x "<meh/>"
[07:35:52] <perlbot> Grinnz: /tmp/veRd94n54c syntax OK␤sub Digest::base::add;␤sub Digest::base::clone;␤sub Digest::base::new;␤sub Digest::base::digest;␤use ojo;␤BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x54\x55\x55\x55\x55"}␤use strict;␤use feature 'current_sub', 'evalbytes', 'fc', 'postderef_qq', 'say', 'signatures', 'state', 'switch'... [Output truncated. Use `more` to read more]
[07:36:11] <Grinnz> oh cause ojo does all that
[07:39:56] *** Quits: Martchus (~martchus@2a01:c22:7369:4500:d250:99ff:fe49:3cce) (Ping timeout: 245 seconds)
[07:40:09] *** Joins: Martchus_ (~martchus@2a01:c23:b9c3:da00:d250:99ff:fe49:3cce)
[07:56:48] *** Quits: tbcr- (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[07:58:04] <aquanight> perlbot: basheval perl -MO=Deparse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -ne 'print unless /^\s*(sub|use)/'
[07:58:05] <perlbot> aquanight: -e syntax OK␤BEGIN {${^WARNING_BITS} = "\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x55\x15\x54\x55\x55\x55\x55"}␤    ␤}␤foo x('<meh/>');␤
[07:58:16] <aquanight> perlbot: basheval perl -MO=Deparse -Mojo -e 'sub foo {} foo x "<meh/>"' | perl -ne 'print unless /^\s*(sub|use|BEGIN)/'
[07:58:17] <perlbot> aquanight: -e syntax OK␤    ␤}␤foo x('<meh/>');␤
[07:58:24] <aquanight> there take that
[07:58:37] <aquanight> anyway. long channel-spammy story short
[07:59:36] <aquanight> gordonfish: looks like you absolutely could do foo x blah, so long as foo is actually a recognizable sub (and not a method call) and you actually meant foo(x(blah))
[07:59:37] <ether> gah!
[08:00:00] <ether> my screen looked prettier after the cat walked all over the keyboard
[08:00:19] <aquanight> if, instead, you wanted (foo) x (blah) I imagine that could happen provided both are constants
[08:07:16] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[08:15:08] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:18:16] *** Quits: kiwiroy (sid374179@id-374179.lymington.irccloud.com) (Ping timeout: 245 seconds)
[08:18:16] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 245 seconds)
[08:20:48] *** Joins: BlueShark (sid10311@user/blueshark)
[08:21:28] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[08:22:13] *** Joins: kiwiroy (sid374179@id-374179.lymington.irccloud.com)
[08:24:20] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Read error: Connection reset by peer)
[08:24:23] *** Joins: mattil_ (~mattil@87-92-46-202.bb.dnainternet.fi)
[08:29:06] *** Quits: mattil_ (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 265 seconds)
[08:30:22] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[08:35:15] *** Joins: rgrinberg (~textual@200.5.63.76)
[08:56:15] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[08:57:57] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[08:59:45] *** Joins: R2robot (~R2robot@user/r2robot)
[09:08:39] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:22:37] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[09:24:54] *** Joins: diskin (~diskin@185.49.242.49)
[09:30:25] *** Joins: diskin_ (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[09:30:25] *** Quits: diskin (~diskin@185.49.242.49) (Killed (strontium.libera.chat (Nickname regained by services)))
[09:30:25] *** diskin_ is now known as diskin
[09:32:02] *** Quits: ether (~ether@perl/cpan-druid/ether) (*.net *.split)
[09:32:02] *** Quits: atta (~sgrs@185.112.146.78) (*.net *.split)
[09:32:02] *** Quits: chronon (~chronon@user/chronon) (*.net *.split)
[09:32:02] *** Quits: merpaderp (~ircuser@89.111.36.243) (*.net *.split)
[09:32:02] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (*.net *.split)
[09:32:02] *** Quits: Altreus (~altreus@2a03:b0c0:1:e0::439:5001) (*.net *.split)
[09:32:02] *** Quits: summerisle (~eof@tty3.dev) (*.net *.split)
[09:32:02] *** Quits: tkr (tkr@pi.ip.fi) (*.net *.split)
[09:32:02] *** Quits: shadowpaste (~shadowpas@kitty.scsys.co.uk) (*.net *.split)
[09:32:02] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (*.net *.split)
[09:32:02] *** Quits: tyldis (~vidar@2a03:b0c0:2:d0::80c:c001) (*.net *.split)
[09:32:02] *** Quits: starz (starz@2001:41d0:8:4bd3::1) (*.net *.split)
[09:32:02] *** Quits: angryfrosku (~frosku@user/frosku) (*.net *.split)
[09:32:02] *** Quits: rbraun (nnycux8j@user/rbraun) (*.net *.split)
[09:32:03] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[09:32:03] *** Quits: pekster (~rewt@user/pekster) (*.net *.split)
[09:32:03] *** Quits: cjac (~cjac@li1196-20.members.linode.com) (*.net *.split)
[09:32:03] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[09:32:03] *** Quits: noctux (~noctux@user/noctux) (*.net *.split)
[09:32:03] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (*.net *.split)
[09:32:03] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[09:32:03] *** Quits: HiSPeed (znc@mail.holics.at) (*.net *.split)
[09:32:03] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (*.net *.split)
[09:32:03] *** Quits: Maff (maff@user/maff) (*.net *.split)
[09:32:03] *** Quits: jjatria (~jjatria@68.183.32.235) (*.net *.split)
[09:32:03] *** Quits: sjn (sjn@sprocket.nvg.ntnu.no) (*.net *.split)
[09:32:03] *** Quits: Te[u]K` (~teuk@2001:41d0:2:eb60::1) (*.net *.split)
[09:32:03] *** Quits: haarg (haarg@haarg.org) (*.net *.split)
[09:32:03] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[09:32:03] *** Quits: Spiney_ (~Spiney@2604:a880:400:d0::1d82:b001) (*.net *.split)
[09:32:03] *** Quits: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb) (*.net *.split)
[09:32:09] *** Joins: cjac (~cjac@li1196-20.members.linode.com)
[09:32:09] *** Joins: DrHyde (~david@bytemark.barnyard.co.uk)
[09:32:10] *** Joins: tkr (tkr@pi.ip.fi)
[09:32:10] *** Joins: ether_ (~ether@vps-6c71e929.vps.ovh.net)
[09:32:10] *** Joins: plicease (quassel@2600:3c00::f03c:91ff:feea:c7bb)
[09:32:11] *** Joins: sjn (sjn@sprocket.nvg.ntnu.no)
[09:32:11] *** Joins: Spiney (~Spiney@2604:a880:400:d0::1d82:b001)
[09:32:12] *** Joins: sivoais (~zaki@199.19.225.239)
[09:32:12] *** Joins: starz (starz@2001:41d0:8:4bd3::1)
[09:32:12] *** Joins: tobs (~tobs@taboege.de)
[09:32:12] *** Joins: summerisle (~eof@tty3.dev)
[09:32:13] *** Joins: HiSPeed (znc@mail.holics.at)
[09:32:15] *** Joins: atta (~sgrs@185.112.146.78)
[09:32:15] *** Joins: Te[u]K (teuk@teuk.org)
[09:32:17] *** Quits: ether_ (~ether@vps-6c71e929.vps.ovh.net) (Changing host)
[09:32:17] *** Joins: ether_ (~ether@perl/cpan-druid/ether)
[09:32:20] *** Joins: pekster (~rewt@user/pekster)
[09:32:22] *** Joins: jjatria (~jjatria@68.183.32.235)
[09:32:25] *** Joins: merpaderp (~ircuser@89.111.36.243)
[09:32:26] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[09:32:40] *** Joins: noctux (~noctux@user/noctux)
[09:32:52] *** Joins: haarg (haarg@haarg.org)
[09:33:08] *** Joins: shadowpaste (~shadowpas@kitty.scsys.co.uk)
[09:33:31] *** Joins: Maff (maff@user/maff)
[09:33:31] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[09:33:34] *** Joins: quesker (~idnet@mail.89vx.net)
[09:33:36] *** Joins: tyldis (~vidar@tyldum.com)
[09:33:43] *** Joins: Frosku (~frosku@user/frosku)
[09:33:51] *** Joins: Altreus (~altreus@2a03:b0c0:1:e0::439:5001)
[09:34:12] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[09:36:24] *** Quits: mtj (quasselcor@2400:8902::f03c:91ff:fe93:b7f1) (*.net *.split)
[09:36:24] *** Quits: keir (~keir@user/keir) (*.net *.split)
[09:36:24] *** Quits: p71- (~p71@096-042-034-230.res.spectrum.com) (*.net *.split)
[09:36:24] *** Quits: thowe (~thowe@66.39.169.133) (*.net *.split)
[09:36:24] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (*.net *.split)
[09:36:24] *** Quits: Somni (~insomnia@77-88-237-24.gci.net) (*.net *.split)
[09:36:24] *** Quits: MDingas- (~MDingas@static.155.53.55.162.clients.your-server.de) (*.net *.split)
[09:36:24] *** Quits: DaTa (~DaTa@user/data) (*.net *.split)
[09:36:24] *** Quits: Nei (~ailin@user/nemui) (*.net *.split)
[09:36:25] *** Quits: tm604 (~tm604@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[09:36:25] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[09:36:25] *** Quits: saorge (~saorge@ns378138.ip-5-196-67.eu) (*.net *.split)
[09:36:25] *** Quits: vinnix (~vinnix@user/vinnix) (*.net *.split)
[09:36:25] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[09:36:25] *** Quits: buZz (~buzz@sky.thebigblue.tk) (*.net *.split)
[09:36:31] *** Joins: buZz (~buzz@sky.thebigblue.tk)
[09:36:32] *** Joins: Somni (insomnia@77-88-237-24.gci.net)
[09:36:36] *** Joins: thowe (~thowe@66.39.169.133)
[09:36:39] *** Joins: MDingas (~MDingas@static.155.53.55.162.clients.your-server.de)
[09:36:41] *** Joins: Nei (~ailin@yoshi.flupps.net)
[09:36:43] *** Joins: vinnix (~vinnix@user/vinnix)
[09:36:43] *** Quits: Nei (~ailin@yoshi.flupps.net) (Changing host)
[09:36:43] *** Joins: Nei (~ailin@user/nemui)
[09:36:46] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[09:36:46] *** Joins: mweckbecker (~matthias@weckbecker.name)
[09:36:55] *** Joins: mtj (~mtj@2400:8902::f03c:91ff:fe93:b7f1)
[09:36:57] *** buZz is now known as Guest859
[09:37:01] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:37:02] * GumbyPAN CPAN Upload: Task-BeLike-SHLOMIF-0.0.8 by SHLOMIF https://metacpan.org/release/SHLOMIF/Task-BeLike-SHLOMIF-0.0.8
[09:37:02] *** Joins: Xe (~cadey@tailscale/xe)
[09:37:04] *** Joins: saorge (~saorge@ns378138.ip-5-196-67.eu)
[09:37:05] *** Joins: DaTa (~DaTa@user/data)
[09:37:05] *** Joins: keir (~keir@user/keir)
[09:37:13] *** Joins: chronon (~chronon@user/chronon)
[09:37:29] *** Joins: rbraun (lov7zBCj@user/rbraun)
[09:38:11] *** Joins: p71 (~p71@096-042-034-230.res.spectrum.com)
[09:41:01] *** Quits: DrHyde (~david@bytemark.barnyard.co.uk) (Ping timeout: 256 seconds)
[09:42:22] *** Joins: DrHyde (~david@bytemark.barnyard.co.uk)
[09:43:35] *** Joins: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi)
[09:51:47] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 256 seconds)
[09:54:05] *** Joins: zakame (~zakame@user/zakame)
[09:55:50] *** Quits: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi) (Remote host closed the connection)
[09:57:34] *** Joins: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi)
[09:59:27] *** Quits: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:00:13] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:02:33] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 256 seconds)
[10:03:30] *** Quits: rgrinberg (~textual@200.5.63.76) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:03:46] *** Joins: mattil (~mattil@37-219-44-10.nat.bb.dnainternet.fi)
[10:04:25] *** Joins: zakame (~zakame@user/zakame)
[10:04:50] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[10:08:11] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 265 seconds)
[10:08:20] *** Quits: mattil (~mattil@37-219-44-10.nat.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[10:11:08] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[10:13:19] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 256 seconds)
[10:14:26] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[10:17:04] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 264 seconds)
[10:18:44] *** Joins: zakame (~zakame@user/zakame)
[10:19:29] *** Joins: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi)
[10:19:32] *** Quits: mattil (~mattil@drpy9tfn01tn-mzhkqt-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[10:20:18] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:26:04] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 264 seconds)
[10:28:03] *** Joins: zakame (~zakame@user/zakame)
[10:36:58] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:8995:e642:1d93:f3c2) (Ping timeout: 260 seconds)
[10:38:49] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[10:38:59] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[10:42:29] *** Joins: deadmarshal (~deadmarsh@95.38.231.110)
[10:50:15] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.69)
[10:51:51] *** Quits: deadmarshal (~deadmarsh@95.38.231.110) (Ping timeout: 256 seconds)
[10:51:54] *** Joins: disconnect_me (~marcin@gl237-41.master.pl)
[11:14:04] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[11:22:05] *** Joins: lin3net (~lin3net@5ec31bed.skybroadband.com)
[11:27:26] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[11:32:45] *** Parts: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) ()
[11:33:55] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[11:34:28] *** Joins: tobybl (~tobybl@213.31.134.21)
[11:36:02] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:36:32] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[11:41:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[11:43:03] *** Quits: hethw (~heth@46.238.32.56) (Quit: Leaving)
[11:45:53] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[11:46:17] *** Parts: lin3net (~lin3net@5ec31bed.skybroadband.com) (See you later)
[11:59:51] *** Joins: Pali (~pali@user/pali)
[12:06:33] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[12:06:33] *** Quits: SergeiZhmylev (~zhmylove@178.252.127.211) (Read error: Connection reset by peer)
[12:08:21] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[12:09:47] *** Quits: randir (~randir@95-25-138-85.broadband.corbina.ru) (Remote host closed the connection)
[12:14:25] *** Joins: art1 (~romeyke@p200300ccdf0b0a00fa136e267de6df21.dip0.t-ipconnect.de)
[12:17:10] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (Quit: Leaving)
[12:17:36] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[12:25:38] *** Joins: BSaboia (~bsaboia@177.37.198.59)
[12:29:31] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:34:57] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[12:41:21] * GumbyPAN CPAN Upload: MojoX-HTTP-Async-0.07 by CDN https://metacpan.org/release/CDN/MojoX-HTTP-Async-0.07
[12:47:31] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[12:53:06] *** Quits: disconnect_me (~marcin@gl237-41.master.pl) (Quit: Leaving.)
[12:56:08] *** Joins: disconnect_me (~marcin@gl237-41.master.pl)
[13:07:52] *** Joins: ztx (~ztx@user/ztx)
[13:09:02] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[13:26:36] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 256 seconds)
[13:32:47] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[13:33:02] *** Joins: akaWolf (~akaWolf@akawolf.org)
[13:35:41] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[13:41:09] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[13:41:29] *** Joins: hethw (~heth@46.238.32.56)
[13:41:39] <hethw> can I sort an unnamed array?
[13:41:55] <LeoNerd> ?
[13:42:03] <hethw> like sort [3,1,2]
[13:42:25] <LeoNerd> sort takes a list of things to be sorted
[13:42:26] <Altreus> sure, but then you can just remove the brackets
[13:42:33] <LeoNerd> You'll have to give it the list of things from inside the array
[13:42:43] <hethw> ahhа
[13:42:48] <Altreus> s/but then// # those words don't help
[13:44:52] <hethw> sweval: my @sorted = sort 3,1,2; [@sorted]
[13:44:53] <perlbot> hethw: [1,2,3]
[13:45:31] <huf> about that...
[13:45:41] <huf> eval: [sort 13,2,1]
[13:45:42] <perlbot> huf: [1,13,2]
[13:45:45] <huf> thingie.
[13:46:37] <hethw> I'm confused now
[13:47:24] <huf> the default is string sort
[13:47:31] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 256 seconds)
[13:48:00] <hethw> aha. that's fine
[13:49:22] *** Joins: zakame (~zakame@user/zakame)
[13:49:51] <hethw> ty
[13:52:11] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[13:55:49] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[14:11:01] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[14:14:58] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[14:17:20] *** Quits: nuh^ (~nuh@68.101.58.90) (Remote host closed the connection)
[14:29:21] *** Joins: Colt (~Colt@user/colt)
[14:30:25] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:31:10] *** Joins: csrf (~csrf@user/csrf)
[14:35:38] *** Quits: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[14:52:23] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[14:55:02] *** Quits: Penguin666x (~Penguin66@217.138.205.135) (Ping timeout: 240 seconds)
[15:05:53] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[15:06:37] * GumbyPAN CPAN Upload: App-Rakubrew-23 by PATRICKB https://metacpan.org/release/PATRICKB/App-Rakubrew-23
[15:07:03] *** Joins: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de)
[15:13:39] *** Quits: zakame (~zakame@user/zakame) (Quit: WeeChat 2.9)
[15:16:38] * GumbyPAN CPAN Upload: Math-Ryu-0.01 by SISYPHUS https://metacpan.org/release/SISYPHUS/Math-Ryu-0.01
[15:29:36] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 265 seconds)
[15:38:46] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[15:43:28] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[15:45:55] *** Quits: justache (~justache@user/justache) (Ping timeout: 268 seconds)
[15:46:09] *** Guest859 is now known as buZz
[15:47:33] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[15:48:36] *** Joins: justache (~justache@user/justache)
[15:53:19] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[16:02:22] *** Joins: justache (~justache@user/justache)
[16:03:49] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[16:05:18] *** Joins: bmeneg (~bmeneg@2001:1284:f016:cc00:1fb2:d2e:cfa2:b5a8)
[16:06:56] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[16:09:04] *** Joins: justache (~justache@user/justache)
[16:09:04] *** Quits: justache (~justache@user/justache) (Excess Flood)
[16:12:33] *** Joins: justache (~justache@user/justache)
[16:17:07] *** Quits: justache (~justache@user/justache) (Ping timeout: 256 seconds)
[16:22:12] *** Joins: justache (~justache@user/justache)
[16:22:57] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[16:23:39] *** Joins: kaitlyn03 (~kaitlyn@user/kaitlyn)
[16:24:08] *** Quits: kaitlyn03 (~kaitlyn@user/kaitlyn) (Client Quit)
[16:24:30] *** Joins: kaitlyn03 (~kaitlyn@user/kaitlyn)
[16:25:43] *** Joins: diskin (~diskin@ec2-3-124-171-230.eu-central-1.compute.amazonaws.com)
[16:26:15] *** Joins: troller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:26:40] *** Quits: justache (~justache@user/justache) (Ping timeout: 264 seconds)
[16:27:05] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[16:32:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[16:32:45] *** Joins: justache (~justache@user/justache)
[16:37:11] *** Quits: justache (~justache@user/justache) (Ping timeout: 252 seconds)
[16:38:43] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[16:40:39] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[16:41:46] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:41:47] * GumbyPAN CPAN Upload: App-Rakubrew-24 by PATRICKB https://metacpan.org/release/PATRICKB/App-Rakubrew-24
[16:46:31] *** Joins: justache (~justache@user/justache)
[16:50:04] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[16:53:11] *** Quits: rewt (~default@user/rewt) (Killed (NickServ (GHOST command used by rewt__)))
[16:53:27] *** Joins: rewt (~default@user/rewt)
[16:58:57] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:02:45] *** Joins: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de)
[17:03:35] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[17:04:07] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:23:14] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[17:23:29] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[17:28:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:29:11] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:30:53] *** Quits: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net) (Quit: Lost terminal)
[17:31:53] * GumbyPAN CPAN Upload: PPIx-Regexp-0.082 by WYANT https://metacpan.org/release/WYANT/PPIx-Regexp-0.082
[17:33:50] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 252 seconds)
[17:35:53] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 256 seconds)
[17:37:04] *** Joins: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi)
[17:41:51] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[17:42:22] *** Quits: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:42:49] *** Joins: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi)
[17:43:48] *** Quits: troller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Remote host closed the connection)
[17:45:32] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:47:02] *** Joins: proller (~p@2a02:6b8:0:40c:bc0:572f:2e9f:7817)
[17:47:23] *** Quits: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi) (Ping timeout: 268 seconds)
[17:49:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[17:53:40] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:56:32] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Client Quit)
[17:59:42] *** Joins: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi)
[18:03:12] *** Quits: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:03:38] *** Joins: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi)
[18:07:40] *** Quits: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net) (Ping timeout: 256 seconds)
[18:07:56] *** Quits: mattil (~mattil@drpy9vkfvcwmc9ht2vt-4.rev.dnainternet.fi) (Ping timeout: 252 seconds)
[18:09:02] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[18:10:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[18:20:03] *** Joins: Smedles (~quassel@61-245-148-167.3df594.adl.nbn.aussiebb.net)
[18:22:07] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fabc-15.dhcp.inet.fi)
[18:22:33] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:22:53] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[18:27:27] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[18:28:54] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:31:59] * GumbyPAN CPAN Upload: App-Rakubrew-25 by PATRICKB https://metacpan.org/release/PATRICKB/App-Rakubrew-25
[18:34:02] *** Quits: Kimmono (~Kimmono@195-159-198-100.customer.powertech.no) (Quit: Leaving)
[18:39:55] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[18:40:40] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:40:52] *** Parts: disconnect_me (~marcin@gl237-41.master.pl) ()
[18:44:47] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[18:47:57] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[18:53:07] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[18:54:08] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 252 seconds)
[18:59:35] *** Parts: taeaad (~taeaad@user/taeaad) (ERC (IRC client for Emacs 28.0.50))
[19:05:51] *** Joins: tbcr (~tbcr@user/tbcr)
[19:07:56] *** Joins: zkrd (~xdg@2a02:587:de0f:1200:7098:d6ff:22a3:9205)
[19:11:41] <zkrd> I have an issue, while I can visit a site using chrome, when I use WWW::Mechanize with chrome's headers and useragent, I get 403
[19:11:49] <zkrd> I mean, the request is identical
[19:15:13] <Darxus> zkrd: Are you sure all the headers and stuff are identical?
[19:15:18] <Altreus> bet it's not :)
[19:15:24] <Darxus> I bet something... yeah.
[19:15:35] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[19:15:42] <Altreus> Chrome's network tab has "copy as curl" - see if you can get it to work with curl
[19:15:51] <Altreus> then you can see *everything* chrome did
[19:15:56] <Darxus> Neat.
[19:16:44] <Altreus> It might be something cookie-related, for example, so the site knows you are using it
[19:16:55] <zkrd> I already tried that with curl
[19:17:00] <zkrd> also got 403
[19:17:24] <zkrd> and yes, I added each header using $mech->add_header()
[19:17:32] <Darxus> One of the fun, but I bet unlikely, possibilities is tcp fingerprinting the sending machine, and noticing the OS doesn't match.
[19:17:37] <huf> the cookies would be in the header
[19:17:56] <Darxus> IRC servers used to do that.
[19:18:22] <zkrd> tcp fingerprinting? I am using the same machine for both chrome and WWW::Mechanize 
[19:18:38] <Darxus> Oh, that wouldn't apply then, you're right.
[19:18:52] <huf> proxy settings (if there were any) would be included in the curl commandline chrome produces, right?
[19:19:03] <zkrd> not using proxies 
[19:19:35] <zkrd> just trying to learn web scrapping the simplest way possible =P
[19:19:42] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:19:57] <huf> ah, crime
[19:19:59] <huf> lovely stuff
[19:20:47] <Altreus> CSRF, for example, ensures that you are sending a request after receiving a response
[19:21:13] <Altreus> Each request will have a different header to prevent you from making the request without being given a token to validate it
[19:21:49] <Altreus> To circumvent /that/ you'd have to start from the first request in the chain and keep updating the header from whatever it's doing to set it
[19:22:09] <huf> there could be even worse things
[19:22:14] <huf> javascript, for example
[19:22:58] <zkrd> I have disabled js in chrome
[19:23:06] <rewt> you could use tcpdump/wireshark to see the actual requests being sent and compare the 2
[19:23:12] <zkrd> can you tell me if whatismyipaddress.com has CSRF?
[19:23:37] <zkrd> rewt, it is https, unfortunately I can see the content
[19:23:42] <zkrd> cant*
[19:23:47] <huf> $ curl https://ifconfig.io/
[19:23:47] <Paperbot> Link title(s): [ ifconfig.io ]
[19:24:42] * Altreus found an excuse to use a parameter called dried_frog_pills
[19:24:48] <huf> heh
[19:25:39] <zkrd> but that doesn't explain the 403 =|
[19:26:01] <zkrd> I am really confused
[19:27:49] <Altreus> I get error code 1020 from curling that
[19:28:25] <Altreus> oh that means it's blocking curl
[19:28:33] <Altreus> makes sense
[19:28:51] <Altreus> I wonder why you are trying so hard to get around restrictions on a site when you could just use a site without restrictions
[19:30:12] <zkrd> I know, its for educational purposes
[19:30:35] <Altreus> well you educationaled yourself that they really don't want you to do this
[19:31:24] <Altreus> at this point it's probably easier to just save the HTML from the browser and work against that
[19:32:03] <zkrd> The question is why the WWW::Mechanize client is not working while its sending an identical request (headers at least)
[19:32:13] <huf> same reason curl isnt either
[19:32:45] <Altreus> it is an interesting question, though, because the browser doesn't do anything to identify itself
[19:33:21] <alh> Are you sure the request is identical (both http1.1 or http2), extra headers added by either agent
[19:33:24] <alh> Is the 403 from cloudflare or similar?
[19:33:31] <alh> They do a lot of checking to block scripts some times 
[19:37:05] * GumbyPAN CPAN Upload: CallBackery-0.40.0 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.40.0
[19:56:21] *** ether_ is now known as ether
[19:58:47] *** Joins: krismatrix (~krismatri@38.80.149.51)
[19:59:02] <gordonfish> zkrd, alh, Altreus, huf: Interestingly, I find curl works for https://whatismyipaddress.com if --compressed is used:
[19:59:03] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[19:59:05] <gordonfish> curl 'https://whatismyipaddress.com/' --compressed | grep -i 'Your IP'
[19:59:05] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[19:59:34] <Altreus> yes
[19:59:38] <Altreus> interesting
[20:00:18] <alh> That 'Your ip address:
[20:00:23] <alh> is from cloudflare
[20:00:26] <alh> Saying "Piss off"
[20:00:32] <gordonfish> (Grinnz: Suggestion for paperbot, check if the same link was processed/printed within the last, say, 30 or 60 or whatever seconds or so, before showing it again.)
[20:00:46] <gordonfish> alh: What do you mean?
[20:01:06] <gordonfish> I see my own ip (or that of any server/ssh I tried it from)
[20:01:12] <alh> Remove the grep
[20:01:15] <alh> What does the full response look like?
[20:01:21] <alh> I get a cloudflare error that happens to include my ip address
[20:02:01] <gordonfish> I hadn't tried it grep less as I didn't want to wade through there html spam until I needed to, and I was looking for my IP so I was grepping for that at first.
[20:02:14] <alh> "Your IP" doesn't appear on the real web page, it's "My IP address is:"
[20:02:26] <alh> What I'm saying is "--compressed" isn't actually working like you think it is
[20:02:27] <gordonfish> alh: It does if you disable JS
[20:02:47] <alh> (Or I'm getting a different response than you.)
[20:02:55] <gordonfish> That is, in firefox if I disable JS and load the page, I see the 'Your IP' bit at the bottom
[20:03:08] <alh> Anyway, easily told if you view the curl without grep
[20:03:11] <gordonfish> I did that to simulate what curl would get
[20:04:07] <gordonfish> Ok looked without grep, kind of ironic that the protector give the info most people would be looking for, heh.
[20:04:16] <gordonfish> gives*
[20:05:07] <Altreus> alh: that's fun because that's what we wanted the site to tell us anyway!
[20:05:21] <Altreus> "Here's your damn fish" - Cloudflare
[20:05:25] <BinGOs> IP freely
[20:05:57] <gordonfish> I guess the server requires compression (--compression appears to set Accept-Encoding: deflate, gzip) otherwise I get that "error code: 1020" mentioned above.
[20:08:16] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:08:22] <alh> I always use canhazip.com
[20:08:23] <gordonfish> If I add --http2 to curl, I get the full page (same as view source in FF)
[20:08:37] *** Joins: tobybl_ (~tobybl@213.31.134.21)
[20:08:55] <gordonfish> So it responds differently depending on protocol version... that's more unusual than it is actually protecting anything if that's all it takes.
[20:09:17] <BinGOs> funnily enough google solicits a similar you do not have permission then tells you your IP address
[20:09:28] <alh> I think it does a bunch of heuristics 
[20:09:31] <BinGOs> curl -s https://www.google.com/search?q=what+is+my+ip | grep 'Client IP address'
[20:09:32] <Paperbot> Link title(s): [ what is my ip - Google Search ]
[20:09:46] <Altreus> perlbot seems ok with it
[20:09:46] <perlbot> Altreus: No factoid found. Did you mean one of these: [seems] [sknox] [smaug] [snack] [simcop] [(syntax)] [sarcasm] [science] [7 stages] [cms wiki]
[20:09:52] <alh> But it can only do so much since most clients can pretend to be anything they want
[20:10:07] <Altreus> Isn't ? a magic shell thing?
[20:10:19] <Altreus> mine escapes it when I paste it
[20:11:00] <BinGOs> Get the same quoted or unquoted.
[20:11:04] <choroba> ? matches a single character
[20:11:09] *** Quits: tobybl (~tobybl@213.31.134.21) (Ping timeout: 256 seconds)
[20:11:10] <BinGOs> bored now.
[20:11:51] <gordonfish> curl "https://whatismyipaddress.com/" --http2 -H "User-Agent: Mozilla/5.0 Firefox/80.0"  --compressed | grep 'Your IP'
[20:11:51] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[20:12:12] <gordonfish> ^ That gives the <span> tag to the IP (what is seen at the bottom in browser when JS is turned off)
[20:12:24] <gordonfish> And --compression is optional
[20:12:32] <gordonfish> (when --http2 is used.)
[20:12:54] <Altreus> again I note that perlbot was able to get enough HTML to read the <title>
[20:13:11] <Altreus> maybe it looks human
[20:13:16] <Altreus> Maybe it's a mechanical turk
[20:14:16] <pragma-> gordonfish: my url title plugin takes it one step further. I actually do a fuzzy match of the title and various parts of the url to see if the title is similar enough to the url. if so, I don't show the title.
[20:14:31] <pragma-> if you can udnerstand the url, you don't need its title.
[20:14:37] * pragma- taps brain.
[20:14:53] <Altreus> I've been corrupted enough to see that action in meme format
[20:15:34] <zkrd> so what is the --compressed WWW::Mechanize equivalent or http2 workaround?
[20:15:43] <pragma-> I've actually almost ignored paperbot in here a couple of tiems because it keeps spamming titles in the middle of conversations
[20:16:00] *** Joins: Guest145 (~Guest145@58.red-79-152-232.dynamicip.rima-tde.net)
[20:16:08] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:b530:29d4:c20c:e161)
[20:16:16] *** Parts: Guest145 (~Guest145@58.red-79-152-232.dynamicip.rima-tde.net) ()
[20:24:49] *** Joins: Pixi_ (~Pixi@user/pixi)
[20:27:02] *** Quits: krismatrix (~krismatri@38.80.149.51) (Quit: Leaving)
[20:27:51] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 245 seconds)
[20:38:17] *** Quits: tobybl_ (~tobybl@213.31.134.21) (Remote host closed the connection)
[20:42:55] <gordonfish> perl -Mojo -E ' say g( q{https://whatismyipaddress.com} => { q{Accept-Encoding} => q{deflate, gzip} } )->dom->find( q{span} )->grep( sub {$_->text =~ q{Your IP}} )->first->parent->text; '
[20:42:55] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[20:45:44] <gordonfish> perl -Mojo -E 'my ($ip) = g( q{https://whatismyipaddress.com} => { q{Accept-Encoding} => q{deflate, gzip} } )->dom->find( q{span} )->grep( sub {$_->text =~ q{Your IP}} )->first->parent->text =~ /(\S+)$/; say qq{[$ip]};'
[20:45:45] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[20:46:56] <gordonfish> pragma-, zkrd, Altreus, etc: ^
[20:47:10] <gordonfish> Not WWW::Mechanize, but should be doable there too.
[20:53:13] <Adura> https://requestbin.net/ip
[20:53:20] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[20:53:24] <Adura> Well, not that it's a title.
[20:59:27] *** Quits: Manderson (~manderson@047-028-019-189.res.spectrum.com) (Read error: Connection reset by peer)
[20:59:33] <gordonfish> You can modify the above easily to get the title
[21:00:21] *** Joins: e1f (~user@141.117.1.162)
[21:00:25] <Adura> Well, yeah. I was just providing an easier service to use, one that Paperbot ignores, heh.
[21:00:28] <gordonfish> perl -Mojo -E 'my $t = g( q{https://whatismyipaddress.com} => { q{Accept-Encoding} => q{deflate, gzip} } )->dom->at( q{title} )->text; say qq{[$t]};'
[21:00:29] <Paperbot> Link title(s): [ What Is My IP Address - See Your Public Address - IPv4 & IPv6 ]
[21:01:06] <gordonfish> Yeah there are much better sites then sodding whatismyipaddress
[21:02:37] *** Quits: BSaboia (~bsaboia@177.37.198.59) (Quit: This computer has gone to sleep)
[21:05:14] <gordonfish> Adura: Yeah https://requestbin.net/ip looks decent (along with https://ifconfig.io/ip and http://icanhazip.com/ )
[21:07:14] <gordonfish> All three of those seem to be very curl-friendly.
[21:10:24] <Altreus> can I get perl -ple to not print a line? Since it's so rare I don't want to restructure the program if I don't have to
[21:10:52] <gordonfish> Take out the -l
[21:11:00] <gordonfish> -l is what makes print append a \n
[21:11:10] <ilmari> Altreus: -n and explicitly print
[21:11:31] <gordonfish> Oh I totally missed the -p in that
[21:11:31] <Altreus> I guess it handles blank lines
[21:11:40] *** Quits: KnoP (~KnoP@p57b19817.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[21:11:53] <Altreus> yeah, explicitly print is the bit I'm bound to screw ip
[21:11:55] <Altreus> up
[21:12:25] <Grinnz> next;
[21:12:36] <Grinnz> oh, that will still trigger continue 
[21:13:18] <ilmari> defined($_ = <>) or last; redo;
[21:13:19] <Altreus> Yeah, it's suddenly way more complex if I don't get the continue
[21:13:24] <gordonfish> basheval: printf 'abc\ndef\nghi\n' | perl -nle 'chomp; print'
[21:13:25] <perlbot> gordonfish: abc␤def␤ghi␤
[21:13:27] <gordonfish> basheval: printf 'abc\ndef\nghi\n' | perl -nle 'print'
[21:13:28] <perlbot> gordonfish: abc␤def␤ghi␤
[21:13:36] <gordonfish> basheval: printf 'abc\ndef\nghi\n' | perl -ne 'chomp; print'
[21:13:37] <perlbot> gordonfish: abcdefghi
[21:13:45] <Altreus> I could do } continue { print if defined
[21:13:58] <Altreus> with -n
[21:13:59] <Grinnz> lol
[21:14:10] <gordonfish> So -l only adds a -l if there isn't an EOL already.
[21:14:11] *** Joins: randir (~randir@95-25-138-85.broadband.corbina.ru)
[21:14:17] <gordonfish> add -l only add a \n
[21:14:20] <gordonfish> ug
[21:14:34] <gordonfish> Trying that again: So -l only adds a EOL if there isn't an EOL already.
[21:14:54] <ilmari> -l chomps and adds a newline
[21:15:09] <Altreus> setting $_ to the empty string leaves blank lines, which isn't ideal but is not a problem
[21:15:36] <ilmari> that's becaues of -l
[21:15:42] <gordonfish> ilmari: Yeah that
[21:15:48] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[21:16:12] <gordonfish> basheval: printf 'abc\ndef\nghi\n' | perl -MO=Deparse -nle 'chomp; print'
[21:16:14] <perlbot> gordonfish: -e syntax OK␤BEGIN { $/ = "\n"; $\ = "\n"; }␤LINE: while (defined($_ = readline ARGV)) {␤    chomp $_;␤    chomp $_;␤    print $_;␤}␤
[21:16:22] <ilmari> specifically it sets $\ to $/ (or the specified octal character)
[21:17:15] <gordonfish> Yep. Deparse shows it nicely.
[21:17:32] *** choroba is now known as choroba_
[21:17:42] <gordonfish> That explicitly chomp; is indeed redundant when -l is used :)
[21:18:05] <gordonfish> s/ly\b//
[21:18:10] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
[21:18:21] *** Quits: choroba_ (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[21:21:17] <Altreus> I guess I could skip -l instead and replace it in a worse way instead :P
[21:21:24] <Altreus> oh I said instead twice
[21:22:23] <v`> https://twitter.com/campuscodi/status/1465362517539106820
[21:22:24] <Paperbot> Catalin Cimpanu (@campuscodi) 1h2m ago: In news you never expect to read: Hackers have hijacked the website of the Principality of Sealand, a fake nation in the North Sea, and planted a web skimmer on its online store to steal card details for people buying nobility titles (baron, count, etc)  https://therecord.media/hackers-plant-card-stealing-malware-on-website-that-sells-baron-and-duke-titles/
[21:27:54] <Altreus> nobility :D
[21:28:00] <Altreus> opposite of ability
[21:29:54] *** Parts: art1 (~romeyke@p200300ccdf0b0a00fa136e267de6df21.dip0.t-ipconnect.de) ()
[21:48:40] *** Joins: EGD (~egd@user/egd)
[21:49:01] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 265 seconds)
[21:57:20] *** Quits: FastJack (~fastjack@b2b-78-94-22-14.unitymedia.biz) (Remote host closed the connection)
[22:00:45] <zkrd> can you please tell me what is this function? my ($ip) = g( q{http... ?
[22:00:48] <zkrd> q() ?
[22:01:21] <zgu> q(...) is another way to say '...'
[22:01:28] <zgu> and qq(...) is "..."
[22:01:47] <zkrd> sorry, g()
[22:02:03] <zgu> no idea
[22:02:30] <zgu> pretty sure that's not something built in
[22:02:35] <zgu> eval: g()
[22:02:37] <perlbot> zgu: ERROR: Undefined subroutine &main::g called at (IRC) line 1. 
[22:05:04] *** Quits: proller (~p@2a02:6b8:0:40c:bc0:572f:2e9f:7817) (Ping timeout: 264 seconds)
[22:05:57] <ilmari> zgu: something from your program or a module you're using
[22:06:35] <ilmari> https://metacpan.org/pod/ojo#g looks likely
[22:06:35] <Paperbot> Link title(s): [ ojo - Fun one-liners with Mojo - metacpan.org ]
[22:08:40] *** Joins: linnet (~linnet@149.155.223.155)
[22:09:31] <zkrd> I can't believe it, I thought it was Mojo module 
[22:09:33] <zkrd> :X
[22:10:49] <ilmari> ojo is a Mojo module …
[22:11:12] <ilmari> because you use it like perl -Mojo -E '...'
[22:11:23] <zkrd> yep
[22:11:25] <ilmari> a bit like oose and oo
[22:12:14] <zgu> like libiberty (ld -liberty)
[22:12:16] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 264 seconds)
[22:14:09] <ilmari> and libowfat
[22:15:04] <Grinnz> v`: hope that happens with the freenode guy
[22:16:22] * GumbyPAN CPAN Upload: Config-Model-2.147 by DDUMONT https://metacpan.org/release/DDUMONT/Config-Model-2.147
[22:19:09] <pragma-> that's so last year
[22:20:47] <gordonfish> ilmari: Read that as liblowfat as first glance
[22:22:02] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 240 seconds)
[22:22:20] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[22:22:48] <karjala> When a job post asks for experience with Plack/PSGI, do they mean experience with that module? Will experience with Mojolicious do?
[22:23:13] *** Joins: justache (~justache@user/justache)
[22:23:45] <Botje> it is very rare that you directly interact with either. 
[22:24:15] * gordonfish was outside while doing something, and thinking about the HTTP stuff above, it made me wonder what really is the point of HTTP/2? I've seen some docs and some docs some time ago, but for the most part, it seems to do the same thing. Seems odd that any server would want to force it or act differencely like whatismyipaddres.com (or cloudflare rather) does.
[22:24:32] <Botje> It can't hurt to know about PSGI the concept and take a look at the Plack documentation, but I would expect that said job post actually uses a framework on top
[22:24:49] <Botje> gordonfish: you save a crapton of bandwidth on binary headers
[22:25:13] <Botje> gordonfish: and you can have multiple requests in parallel over a single connection, which saves another crapton on networking hardware
[22:25:50] <gordonfish> Botje: I could see that, but every time I see HTTP/2 in action, it's using the same headers. In fact every request I've observed could just have HTTP/2 replaced with HTTP/1.1 and it'd work just the same.
[22:26:03] <Botje> gordonfish: as a client, you have a) less stuff to pull in b) better chance at receiving stuff in parallel instead of sequentially c) fewer dodgy domains used to counteract browser sharding
[22:26:12] <gordonfish> Oh I didn't know about the multiple parallel requests thing.
[22:26:15] <Botje> gordonfish: well, yes. conceptually they're the same headers.
[22:27:19] <gordonfish> I could see that useful for fetch resources (images, .css, .js, ajax, etc) that an html page calls for.
[22:27:24] <gordonfish> for fetching
[22:28:14] <Botje> but the protocol maps eg "Host: perl.org" to "\x39perl.org"
[22:28:23] <gordonfish> (though browsers have been doing that sort of thing more manually in the past already, multiple requests at once, non-blocking wise)
[22:28:27] <Botje> (i'm simplifying, but you get the gist)
[22:28:36] <Botje> gordonfish: up until a point
[22:28:47] <gordonfish> yeah
[22:28:50] <Botje> gordonfish: you will find that browsers don't open more than 6 HTTP/1.1 connections to the same host
[22:29:11] <gordonfish> Yeah I'd imagine it'd get too spammy if it went much more than that
[22:31:01] <Botje> oh, final reason: HTTP/2 *mandates* encryption
[22:31:14] <Botje> which finally stops those annoying middleboxes from fucking with your HTTP conversations
[22:31:54] <zgu> no more captive portals?
[22:32:31] <El_Che> that does not seem related
[22:35:17] <Botje> zgu: those can still MitM any HTTPS and present you with a fake certificate
[22:35:35] <Botje> zgu: that's why browsers do a HTTP/1.1 request do a dummy page first
[22:43:35] <ilmari> gordonfish: thatsthejoke.gif. libowfat.so leads to -lowfat on the linker command line
[22:44:32] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[22:44:38] *** Joins: tobybl (~tobybl@213.31.134.21)
[22:51:47] *** Joins: mattil (~mattil@87-92-46-202.bb.dnainternet.fi)
[22:53:16] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 245 seconds)
[22:54:02] *** Quits: tobybl (~tobybl@213.31.134.21) (Remote host closed the connection)
[22:56:41] *** Quits: mattil (~mattil@87-92-46-202.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[22:57:42] *** Joins: Linux_77 (~7Linux7@186.233.182.193)
[22:58:43] *** Joins: proller (~p@2a02:6b8:b081:8813::1:21)
[23:01:53] *** Quits: Linux77 (~7Linux7@186.233.182.193) (Ping timeout: 268 seconds)
[23:07:45] <gordonfish> ilmari: Ah, heh, right
[23:08:27] <gordonfish> ilmari: Just like perl -Mojo
[23:08:41] <ilmari> gordonfish: yes, that's where we started …
[23:09:34] <gordonfish> Ah, should have scrolled up some then
[23:10:07] <ilmari> literally five lines before I mentioned libowfat
[23:10:11] *** Joins: rgrinberg (~textual@201.191.195.218)
[23:14:13] *** Quits: zkrd (~xdg@2a02:587:de0f:1200:7098:d6ff:22a3:9205) (Ping timeout: 268 seconds)
[23:17:44] *** Joins: deadmarshal (~deadmarsh@95.38.113.69)
[23:18:00] <gordonfish> ilmari: Yeah, was just a quick glance. Should've looked back. Also phone rang.
[23:19:30] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:21:59] *** Quits: deadmarshal (~deadmarsh@95.38.113.69) (Ping timeout: 252 seconds)
[23:22:56] *** Joins: Manderson (~manderson@173.241.174.143)
[23:23:27] *** Joins: sbodin (~Android@185.12.224.209)
[23:27:47] *** Quits: rgrinberg (~textual@201.191.195.218) (Ping timeout: 256 seconds)
[23:30:56] *** Quits: kiwiroy (sid374179@id-374179.lymington.irccloud.com) (Read error: Connection reset by peer)
[23:31:05] *** Joins: kiwiroy (sid374179@id-374179.lymington.irccloud.com)
[23:31:07] *** Quits: Martchus_ (~martchus@2a01:c23:b9c3:da00:d250:99ff:fe49:3cce) (Quit: ZNC 1.6.3 - http://znc.in)
[23:31:19] *** Joins: Martchus (~martchus@2a01:c23:b9c3:da00:d250:99ff:fe49:3cce)
[23:32:56] *** Quits: proller (~p@2a02:6b8:b081:8813::1:21) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: starz (starz@2001:41d0:8:4bd3::1) (Ping timeout: 265 seconds)
[23:32:56] *** Quits: gordonfish[m] (~gordonfis@user/gordonfish) (Ping timeout: 265 seconds)
[23:33:25] *** Quits: xq (~xq@user/xq) (Ping timeout: 265 seconds)
[23:34:29] *** Quits: JayC (~JayC@gateway/tor-sasl/jayc) (Remote host closed the connection)
[23:34:35] *** Quits: superkuh (~superkuh@user/superkuh) (Ping timeout: 250 seconds)
[23:34:50] *** Joins: JayC (~JayC@gateway/tor-sasl/jayc)
[23:38:03] *** Joins: superkuh (~superkuh@user/superkuh)
[23:41:12] *** Joins: starz (starz@2001:41d0:8:4bd3::1)
[23:41:53] *** Quits: subie (~subie@2601:4c0:4080:bc0:688f:217c:a659:fcc9) (Remote host closed the connection)
[23:42:12] *** Joins: subie (~subie@2601:4c0:4080:bc0:7949:e3f5:fd1a:5963)
[23:44:37] *** Joins: gordonfish[m] (~gordonfis@user/gordonfish)
[23:44:49] *** Joins: proller (~p@2a02:6b8:b081:8813::1:21)
[23:48:25] *** Joins: x5c30 (~x5c30@user/x5c30)
[23:53:52] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:55:23] *** Joins: xse (~xse@user/xse)
[23:56:04] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:b530:29d4:c20c:e161) (Ping timeout: 264 seconds)
[23:57:59] <xse> Hello, i might have a stupid question it's my first time using perl, i use sprintf with %d to parse lots of numbers that may or may not be  in scientific notation which don't have decimals (they're bytes)
[23:58:43] <xse> i ended up having an issue with one of them: 1.8446744073709552e+19 which gives me -1
