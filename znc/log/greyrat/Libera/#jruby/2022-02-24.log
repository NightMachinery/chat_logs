[00:43:47] *** Quits: dangerousdave (~dangerous@host-92-10-124-125.as13285.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:03:06] *** Joins: subbu (~subbu@user/subbu)
[02:36:40] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 256 seconds)
[03:04:59] <byteit101[m]> is `@Annotaiton("foo")` supposed to parse in java_signature? or just with a keyword?
[07:06:15] <headius> Not sure but I thought so, enebo will know
[07:49:19] *** Joins: subbu (~subbu@user/subbu)
[09:21:34] *** Quits: subbu (~subbu@user/subbu) (Ping timeout: 272 seconds)
[12:29:22] *** Joins: dangerousdave (~dangerous@host-92-10-124-125.as13285.net)
[12:41:54] *** Quits: dangerousdave (~dangerous@host-92-10-124-125.as13285.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:46:10] *** Joins: dangerousdave (~dangerous@host-92-10-124-125.as13285.net)
[13:42:32] *** Quits: dangerousdave (~dangerous@host-92-10-124-125.as13285.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:54:26] <enebo[m]> byteit101: do you mean parse or once it is parsed we will define an annotation?
[17:57:03] <byteit101[m]> ruby/stdlib/jruby/compiler/java_signature.rb:135)... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/5ab36d231c6ef75a59e8d628737a95f8939dea1c)
[17:57:04] <enebo[m]> byteit101: I can see we parser @Something( .lots of complicated parsing) into an Annotation in the signature parser so we definitely make something we can then use to see whatever is using an annotation
[17:57:22] *** Joins: subbu (~subbu@user/subbu)
[17:57:41] <byteit101[m]>  class AnnotatedClass; java_signature '@com.fasterxml.jackson.annotation.JsonSetter("phantom") void setPhantom(boolean)'; def setPhantom(p); puts "phantom set: #{p}"; end; end
[17:57:51] <byteit101[m]> but add a value= and it works
[17:58:25] <byteit101[m]> (adjust to a loaded annotation as necessary)
[17:58:58] <enebo[m]> ok I would think that would generate the AST in the signature but it is possible we do not use it?  It has been like a decade so I will have to look
[17:59:19] <byteit101[m]> I can file an issue if you'd like once you have a look
[17:59:55] <enebo[m]> yeah I can spend a few minutes this morning for sure make an issue. we should not be throwing
[18:04:17] <enebo[m]> byteit101: what is the actual error at 135?
[18:04:56] <enebo[m]> lol this is a backawards backtrace
[18:05:00] <enebo[m]> err I am never used to this
[18:05:05] <byteit101[m]> NPE
[18:05:17] <byteit101[m]> full trace coming up in a moment, about to submit issue
[18:05:49] <enebo[m]> How hard will this be to repro on my env?
[18:06:12] <byteit101[m]> 1. find an annotation that's loaded
[18:06:14] <byteit101[m]> 2. replace name
[18:06:20] <byteit101[m]> 3. profit
[18:06:28] <byteit101[m]> I always forget the included annotations and end up searching
[18:06:39] <byteit101[m]> Oh, the annotation attachment? no, that's only class?
[18:07:05] <byteit101[m]> I often use resource I think
[18:07:19] <byteit101[m]> look at, oh. there is an all-annotation class in the tests somewhere
[18:07:25] <byteit101[m]> "everyannotation"
[18:07:59] <byteit101[m]> https://github.com/jruby/jruby/issues/7117
[18:08:40] <enebo[m]> oh so the name = version works?
[18:08:53] <byteit101[m]> import javax.annotation.Resource;
[18:08:53] <byteit101[m]> may be loaded
[18:08:54] <enebo[m]> err value
[18:09:09] <byteit101[m]> correct, this is just the non-named syntax
[18:09:41] <enebo[m]> byteit101: whew...this should be simpler to fix since I will not need to know more than how to massage the annotation AST in this file
[18:10:36] <enebo[m]> Since I have not looked at this or really done anything more than consume annotations in a long time...are all bare values inside the parens just implicitly "value = " 
[18:12:28] <byteit101[m]> umm...
[18:12:48] <enebo[m]> LOL...this is really simple
[18:13:09] <enebo[m]> byteit101: can you quickly try this?
[18:13:36] <enebo[m]> Change line 7 of DefaultAnnotationParameter super(null, expr) to super("value", expr)
[18:13:54] <byteit101[m]> "If there is just one element named value, then the name can be omitted"
[18:14:30] <enebo[m]> It is pretty clear our code calls getName() and default anno parm will return null which is why we are crashing (without actually looking)
[18:15:11] <enebo[m]> If this is wrong then we need to do something wherever we call getName
[18:15:42] <enebo[m]> but your sentence you quoted implies this is the solution
[18:16:04] <headius> Good morning!
[18:16:28] <byteit101[m]> which file?
[18:16:57] <enebo[m]> org.jruby.ast.java_signature.DefaultAnnotationParameter
[18:17:13] <byteit101[m]> Ah java code.. not really quickly
[18:18:36] <byteit101[m]> (recompiling)
[18:20:01] <byteit101[m]> headius: oh while I have jruby on the brain, did you get a chance to review the direction of the post so far as per the email?
[18:20:19] <byteit101[m]> no rush, planning oh finishing it this weekend
[18:23:36] <byteit101[m]> compiled. let me find how I made this irb session
[18:25:24] <byteit101[m]> maven_require 'com.fasterxml.jackson.core:jackson-databind:RELEASE'
[18:25:32] <byteit101[m]> oops, wrong spot to paste :-)
[18:25:46] <byteit101[m]> No detonation!
[18:26:24] <enebo[m]> well that's something
[18:26:46] <enebo[m]> but when it is a plain value we make this java object and default anno extends anno in the tree
[18:27:09] <enebo[m]> So "value" is right based on the definition you pasted above
[18:27:34] <enebo[m]> If it still is not right it likely is no longer the signature parser but our JI internals but if you say the explicit value = works then this should too
[18:27:50] <byteit101[m]>  => :setPhantom 
[18:27:50] <byteit101[m]> jruby-9.3.0.0 :006 > 
[18:27:56] <byteit101[m]> Yup works fine now
[18:30:16] <byteit101[m]> a test may be ideal, but you can't use the ./spec/java_integration/fixtures/EveryTypeAnnotations.java
[18:30:28] <byteit101[m]> as much as I love that annotation
[18:30:38] <enebo[m]> cool. I will commit to jruby-9.3 and I will see if I can easily use one of them and just make a default version
[18:31:25] <byteit101[m]> Wait, is it possible to create an annotation class from ruby code now?
[18:52:45] *** Quits: subbu (~subbu@user/subbu) (Quit: Leaving)
[18:53:19] <enebo[m]> byteit101: I think so but it is mostly just annotating a class. 
[18:54:10] <byteit101[m]> well annotation are implemented as interfaces, I don't think there is a way to generate interfaces, only reified classes, no?
[19:09:45] <enebo[m]> err yeah @interface
[19:23:17] <headius> byteit101: I did read through the post and it looks good so far
[19:23:53] <headius> decompiled output might be nice using javap, just dump the class to a file and use the basic javap output (maybe -private) to show the generated structure
[19:24:08] <byteit101[m]> That's the direction you were hoping for?
[19:24:34] <byteit101[m]> Ah yes, I can do that
[19:24:57] <headius> yeah I will reply and copy enebo so he can have a look too
[19:26:36] <byteit101[m]> cool, any thoughts on the maven_require gem I made for the samples? I talked here this past weekend about maybe including it in jar-dependencies, but that sounded tricker than a quick gem at least for onw
[19:26:39] <byteit101[m]> *now
[19:26:59] <byteit101[m]> (I've wanted something like it for AGES...)
[19:27:25] <byteit101[m]> I'll finish it up this weekend
[19:27:48] <byteit101[m]> (the post I'll finish this weekend, that is)
[19:28:02] <headius> right, I also like the idea of just getting it into jar-dependencies
[19:28:17] <headius> quick gem for trying it out would be good but we can consider merging it in later
[19:28:35] <byteit101[m]> It seems very nice, but not quite core-jruby functionality, with maven deps and all
[19:28:45] <byteit101[m]> yes, that was my plan
[19:29:01] <headius> ok cool
[19:30:10] *** Quits: katafrakt[m] (~katafrakt@2001:470:69fc:105::1:41ff) (Quit: You have been kicked for being idle)
[19:51:28] <headius> enebo: gonna pivot to issues and default gems today
[19:51:44] <headius> the frame thing seems to be working but we need to be able to do it even for methods that have gone to full or jit
[19:52:50] <enebo[m]> ok
[19:53:08] <enebo[m]> I am trying to figure out the Dir.glob thing
[19:53:16] <headius> ok
[21:04:21] *** Joins: subbu (~subbu@user/subbu)
[22:31:37] <headius> https://github.com/jruby/jruby/pull/7119
[22:31:41] <headius> another brick in the wall
[22:32:05] <headius> still a few failures in the CRuby tests I am working through
[22:32:19] <headius> securerandom gem's rake test goes down to 1 failure with this though
