[00:01:55] <ChrisWarrick> why would it need to?
[00:03:05] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net)
[00:03:28] *** Joins: antoine_ (~antoine@pluton.galexy.me)
[00:04:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[00:06:30] <Batzy> ChrisWarrick it doesn't need it, i want it to
[00:13:05] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[00:13:37] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[00:17:44] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[00:17:58] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[00:24:05] *** Joins: elena (~elena@202-153-212-80.ca99d4.syd.static.aussiebb.net)
[00:28:22] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[00:28:35] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[00:30:12] *** Quits: serghei (~egrep@user/serghei) (Ping timeout: 265 seconds)
[00:36:02] <jrabbit> Batzy: no but you do have control of the network config when you run docker or configure compose
[00:36:18] *** Quits: ianthrive (~ianthrive@166.70.94.161) (Quit: Textual IRC Client: www.textualapp.com)
[00:36:38] <jrabbit> so you can open arbitrary ports on one end and map them inside, what you've described isn't very common why do you want that?
[00:37:01] <jrabbit> you should forward the ports local on the machine then open them in compose if you *must* do it
[00:37:35] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[00:37:49] *** Joins: Skyz (~Skyz@user/skyz)
[00:38:08] <jrabbit> defeats the d-c up/down ergonomics unfortunately
[00:38:32] *** Quits: Skyz (~Skyz@user/skyz) (Client Quit)
[00:41:22] *** Joins: Skyz (~Skyz@user/skyz)
[00:57:23] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[01:02:40] *** Joins: normic (~normic@p4fc3009e.dip0.t-ipconnect.de)
[01:10:51] *** Joins: serghei (~egrep@user/serghei)
[01:11:53] <nedbat> am i misremembering that in the far distant past (0.97?) the django docs had on-page commenting enabled?
[01:11:56] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[01:14:05] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[01:15:04] <nedbat> looks like it had commenting at the bottoms of pages: https://web.archive.org/web/20050719235946/http://www.djangoproject.com/documentation/install/
[01:21:37] *** Quits: tkimnguyen (uid123436@id-123436.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[01:23:18] <LuxuryMode> I am a bit confused here. I had thought that in order to create a migration which adds a non-null field to a model, one has to modify the migration a bit to 1) add the field as nullable 2) use RunPython to set the value of that field for existing rows and then finally 3) add an AlterField which adds the not null constraint.
[01:23:21] <LuxuryMode> But I have a migration that simply adds the field and then updates existing rows with a value and it seems to work just fine.
[01:23:52] <hylje> it does work just fine to simply add a field
[01:24:33] <hylje> the hard way just avoids a full table rewrite that locks the entire table for the duration of the migration, which can take a while with large tables full of production data
[01:24:43] <LuxuryMode> Shouldn't it fail if you don't provide a default if you are adding a not null field?
[01:24:54] <LuxuryMode> The hard way?
[01:25:22] <LuxuryMode> You're saying the migration I have just locks the entire table and runs atomically/in a transaction or something like that?
[01:25:39] <hylje> if you are using postgres all migrations are atomic
[01:25:47] <hylje> it even rolls back the ALTER TABLEs
[01:25:51] <Batzy> jrabbit pythonanywhere is my host (it's also hosting my db), I want docker to link to a dev db i have hosted there
[01:25:52] <LuxuryMode> Right ok
[01:26:14] <LuxuryMode> Am I just misremembering in the past where such migrations wouldn't work and it had to be done the way I described?
[01:26:41] <hylje> (well, to be more specific, the hard way is spread over three migrations, or two migrations and one manual data migration to fill in the values)
[01:27:04] <LuxuryMode> I see
[01:27:04] <jrabbit> Batzy: if the db is internet accessible you should be able to configure django to access it
[01:27:12] <LuxuryMode> So I had been doing it the hard way in the past
[01:27:43] <Batzy> jrabbit only accessible through an ssh tunnel
[01:27:47] <hylje> it's not a bad practice, it becomes mandatory when you have a decent amount of data and/or a desire to avoid random downtime when you modify big tables
[01:27:50] <Batzy> so django thinks it's "local"
[01:28:18] <jrabbit> Batzy: yeah I'd do it on the host then tell docker to forward that port
[01:28:46] <jrabbit> keep ssh out of the docker equation if you can is good advice from docker world
[01:28:59] <Batzy> why
[01:29:07] <Batzy> it would just be another step
[01:29:15] <Batzy> that i have to do to get it running
[01:29:51] <jrabbit> mounting ssh keys and stuff gets gnary very quickly
[01:29:58] <Batzy> "tell docker to forward that port" wdym? so if I tunnel and it's using port 3306 I tell docker to map 3306 to something?
[01:29:59] <jrabbit> gnarly*
[01:30:02] <Batzy> i see
[01:30:30] <jrabbit> read the docker network stuff about ports but it should work in the most basic case perfectly if you configure ssh right
[01:30:48] <Batzy> configure ssh right? Im currently tunneling so it shouldnt be a problem i guess
[01:30:53] <jrabbit> docker run -p 3306 ...
[01:31:11] <jrabbit> well -p 3306:3306 specficially
[01:31:19] <Batzy> yep
[01:31:25] <Batzy> well
[01:31:29] <Batzy> i need to forward multiple ports
[01:31:32] <Batzy> but i guess thats not a problem
[01:31:47] <Batzy> oh wait i dont...nginx and django will run on different containers i think
[01:32:44] *** Joins: Skyz (~Skyz@user/skyz)
[01:34:15] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[01:45:47] *** Quits: Skyz (~Skyz@user/skyz) (Quit: Client closed)
[01:50:26] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 250 seconds)
[01:51:17] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[01:57:30] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 240 seconds)
[02:10:55] *** Joins: orzel (~orzel@2a01:e0a:df:6ba0:1cfe:b463:3789:a442)
[02:11:51] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[02:12:29] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[02:16:43] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[02:24:17] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[02:24:25] *** Quits: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl) (Ping timeout: 246 seconds)
[02:25:26] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[02:26:50] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 250 seconds)
[02:39:26] *** Joins: anas (~anas@196.224.51.199)
[02:40:26] *** Quits: brownan (~brownan@136.56.137.143) (Ping timeout: 252 seconds)
[02:41:59] *** Joins: diek (~diek@187.36.4.113)
[02:45:21] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[02:46:52] *** Joins: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48)
[02:50:52] *** Joins: diek (~diek@187.36.4.113)
[02:56:32] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[03:05:22] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 246 seconds)
[03:06:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:07:13] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:07:13] *** ChanServ sets mode: +v EvilDMP
[03:07:14] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:07:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:07:40] *** ChanServ sets mode: +v EvilDMP
[03:07:46] *** Joins: diek (~diek@187.36.4.113)
[03:08:01] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:08:27] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[03:08:27] *** ChanServ sets mode: +v EvilDMP
[03:08:49] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[03:13:46] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[03:14:27] *** Joins: diek (~diek@187.36.4.113)
[03:26:58] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[03:27:04] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 250 seconds)
[03:28:10] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[03:30:08] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[03:30:54] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:38:19] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[03:40:14] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[03:42:56] *** Joins: diek (~diek@187.36.4.113)
[03:50:07] <zamba> how can i create a .filter() so that this will return all if a list is empty?
[03:50:47] <zamba> i want to do field__in=list.. but if the list is empty, then all objects should be returned
[03:51:10] <zamba> but if there are some entries in the list, then the filter should be applied
[03:51:49] <orzel> you can't, but you can do that in python results = ...filter()... ; if len(result)==0: results = ....all()
[03:52:56] <zamba> https://dpaste.org/muHR
[03:53:00] <zamba> this is how my query looks
[03:53:50] <zamba> and i want to add "run__in=valid" to that filter
[03:54:39] <zamba> but it's possible to modify the queryset afterwards?
[04:00:07] <orzel> Yes, read about it in the (excellent) documentation. you can reuse/modify a queryset, and evaluate it each time
[04:01:14] <orzel> Run.objects.filter(event=self.event).order_by(...) -> is usually written as self.event.run_set.order_by(...)
[04:04:38] <rannnn8888> hi if i want return multiple here how i need make this ?  https://dpaste.org/41cd
[04:12:30] <rannnn8888> https://dpaste.org/9eM4 this way k ?
[04:22:54] *** Joins: ispaceloveyou (~spacelove@162-201-87-4.lightspeed.fyvlar.sbcglobal.net)
[04:26:29] <ispaceloveyou> What's up djudes
[04:27:29] <bparker> avoiding wallbroke n
[04:31:34] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[04:32:27] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[04:33:23] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:34:33] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:36:32] *** Joins: frat3rius6 (~frat3rius@host-85.14.84.172.static.3s.pl)
[04:37:46] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 246 seconds)
[04:37:56] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Ping timeout: 252 seconds)
[04:37:56] *** frat3rius6 is now known as frat3rius
[04:42:09] *** Quits: ispaceloveyou (~spacelove@162-201-87-4.lightspeed.fyvlar.sbcglobal.net) (Remote host closed the connection)
[04:46:54] *** Quits: MarkusH (MarkusH@django/moderator/MarkusH) (Remote host closed the connection)
[04:47:12] *** Joins: MarkusH (MarkusH@django/moderator/MarkusH)
[04:47:12] *** ChanServ sets mode: +v MarkusH
[04:52:49] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[04:54:34] <tm007> lol
[04:54:45] <tm007> what's wallbroken done?
[04:55:36] *** Quits: clawh (~clawh@185.244.214.60) (Read error: Connection reset by peer)
[04:55:50] *** Joins: diek (~diek@187.36.4.113)
[04:56:17] *** Joins: clawh (~clawh@185.244.214.60)
[04:57:11] *** Quits: clawh (~clawh@185.244.214.60) (Max SendQ exceeded)
[04:57:46] *** Joins: clawh (~clawh@185.244.214.60)
[04:59:00] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[04:59:41] *** Joins: clawh (~clawh@185.244.214.60)
[05:00:28] *** vinleod is now known as vdamewood
[05:00:30] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[05:00:54] *** Joins: clawh (~clawh@185.244.214.60)
[05:03:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:04:02] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[05:04:08] *** Quits: LuxuryMode (uid91005@id-91005.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[05:04:40] *** Joins: clawh (~clawh@185.244.214.60)
[05:05:30] *** Quits: clawh (~clawh@185.244.214.60) (Remote host closed the connection)
[05:05:51] *** Joins: clawh (~clawh@185.244.214.60)
[05:06:26] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[05:06:58] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[05:11:22] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[05:11:30] *** Quits: Xof (~Xof@157-131-136-66.dedicated.static.sonic.net) (Quit: Bye.)
[05:12:53] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:13:00] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:13:41] <Batzy> jrabbit that didnt work
[05:13:45] <Batzy> simply mapping the ports i mean
[05:14:02] <Batzy> not even close
[05:23:21] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Read error: Connection reset by peer)
[05:24:33] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[05:46:54] *** Joins: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net)
[05:48:36] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Remote host closed the connection)
[05:51:38] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[05:55:46] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[06:05:08] *** Quits: orzel (~orzel@2a01:e0a:df:6ba0:1cfe:b463:3789:a442) (Quit: Konversation terminated!)
[06:05:51] *** Quits: cliluw (~cliluw@47.147.80.149) (Ping timeout: 258 seconds)
[06:10:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:19:30] *** Quits: mayhew (~jm@hlfxns017vw-47-55-124-51.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: Konversation terminated!)
[06:31:19] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[06:32:05] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Client Quit)
[06:32:13] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Ping timeout: 246 seconds)
[06:32:40] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[06:32:57] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[06:40:20] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 268 seconds)
[06:48:06] *** Joins: diek (~diek@187.36.4.113)
[06:58:42] *** Quits: skeld_ (~skeld@2601:148:200:ac70:b9c7:c76a:3a4f:34f2) (Read error: Connection reset by peer)
[07:02:01] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[07:02:48] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:15:56] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[07:19:19] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[07:21:21] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:25:50] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 250 seconds)
[07:27:25] *** Joins: diek (~diek@187.36.4.113)
[07:33:18] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[07:34:01] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:34:05] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[07:34:53] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:35:09] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:36:53] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[07:40:00] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[07:43:22] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[07:47:49] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[08:10:10] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[08:12:43] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[08:17:41] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:37:47] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[08:45:29] *** Joins: doev (~doev@p549d709f.dip0.t-ipconnect.de)
[08:47:33] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[08:49:12] *** Joins: amvara (~amvara@57.red-83-40-223.dynamicip.rima-tde.net)
[08:52:26] *** Joins: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[08:54:32] *** Quits: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Quit: leaving)
[08:54:48] *** Joins: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[09:04:45] *** Quits: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Quit: leaving)
[09:05:01] *** Joins: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net)
[09:16:43] *** Quits: sed (~sed@pool-100-7-53-231.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[09:17:36] *** Quits: djapo (~archangel@99-149-186-203.lightspeed.hstntx.sbcglobal.net) (Quit: leaving)
[09:23:42] *** Quits: killjoy (~nameless@user/killjoy) (Ping timeout: 264 seconds)
[09:24:01] *** Joins: killjoy (~nameless@user/killjoy)
[09:46:52] *** Quits: Kalov (~Thunderbi@179.56.117.154) (Quit: Kalov)
[09:59:41] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[10:00:01] *** Joins: chronon (~chronon@user/chronon)
[10:00:06] <amvara> Good morning from Barcelona ... we have a 1:n relationship and use prefetch_related. Fetching 25 rows is 300ms, fetching 300 rows is 3s. The serializer is called 300 times. We would like to understand options to speed this up. What information would you need to help me understand/resolve the issue?
[10:02:17] <schinckel> amvara: What is the code that is calling the serializer? Is this using DRF?
[10:09:03] <amvara> Yes, it's DRF ... in views.py ...
[10:09:15] <amvara> feature_runs = Feature_Runs.objects.filter(feature=feature_id, archived=archived, ).order_by('-date_time', '-run_id' ).prefetch_related("feature_results")
[10:09:44] <amvara> page = self.paginate_queryset(feature_runs)
[10:10:08] <amvara> serialized_data = FeatureRunsSerializer(page, many=True, read_only=True).data
[10:10:09] <schinckel> I wonder what code DRF uses to traverse items during serialisation.
[10:11:39] <amvara> this is in class FeatureRunsSerializer
[10:11:47] <amvara>     def get_feature_results(self, instance):
[10:11:47] <amvara>         # logger.debug("-------------------------Entering the get_feature_results function of the Feature Runs Serializer Class-------------------------")
[10:11:50] <amvara>         ret = FeatureResultSerializer(instance.feature_results, many=True, read_only=True).data
[10:11:53] <amvara>         return ret
[10:13:12] <amvara> the logger logs the output string as many times as the page-size is set. Setting it to 300, it logs 300 "Entering .... " ... and the time spend in iterating is about 3s
[10:13:38] <amvara> Where setting the page size to 25 it is 300ms
[10:14:26] <amvara> Setting the page size to 5000 ... logs 5000 "Entering ... " but still returns in 3s.
[10:33:33] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[10:42:09] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[10:48:38] *** Joins: audio (~audio@2603-8081-1800-0062-edd3-118e-4a86-1943.res6.spectrum.com)
[10:48:52] *** Joins: explore (uid233125@id-233125.stonehaven.irccloud.com)
[10:48:55] *** Quits: audio (~audio@2603-8081-1800-0062-edd3-118e-4a86-1943.res6.spectrum.com) (Remote host closed the connection)
[10:49:08] *** Joins: audio (~audio@2603-8081-1800-0062-edd3-118e-4a86-1943.res6.spectrum.com)
[11:02:19] <PaulWay[w]> amvara: you may find it's doing a lot of look-ups of related data - try using a select_related and prefetch_related on that query.
[11:02:50] <PaulWay[w]> There are ways to convince Django to emit the SQL used while in `runserver` - search the internet for them :-)
[11:11:04] *** Joins: pycode1 (~pycode@2001:b07:5d28:551:e65a:97da:9e:dda9)
[11:12:11] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[11:13:54] *** Joins: doc (~doc@user/doc)
[11:16:29] *** Joins: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi)
[11:17:51] <amvara> @paulway[w]: I have the SQL in the logs.
[11:18:41] <amvara> django_1    | [2021-06-24 00:53:27,015] DEBUG - (0.150) SELECT "backend_feature_runs"."run_id", "backend_feature_runs"."feature_id", "backend_feature_runs"."date_time", "backend_feature_runs"."archived", "backend_feature_runs"."status" FROM "backend_feature_runs" WHERE (NOT "backend_feature_runs"."archived" AND "backend_feature_runs"."feature_id" = 240) ORDER BY "backend_feature_runs"."date_time" DESC,
[11:18:47] <amvara> "backend_feature_runs"."run_id" DESC LIMIT 500 OFFSET 2500; args=(240,)
[11:18:53] <PaulWay[w]> Are you seeing a lot of selecting of related rows?
[11:19:03] <PaulWay[w]> Please don't paste in here.  Please paste in a pastebin somewhere.
[11:19:15] <PaulWay[w]> Just in case you're going to paste a dozen more lines... :-)
[11:19:16] <amvara> Sorry.
[11:19:32] <PaulWay[w]> That bit is fine, but just wanted to head off the spam :-)
[11:19:39] <amvara> Which is the pastebin of your choice?
[11:20:08] <PaulWay[w]> *shrugs* me personally, I use https://paste.centos.org/
[11:21:23] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[11:21:34] <PaulWay[w]> You can also do things like `print(this_queryset.explain(analyze=True))` to see how your database engine plans to execute the query.
[11:21:46] <PaulWay[w]> Some engines might not support all of that.  See how you go.
[11:24:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:24:43] *** ChanServ sets mode: +v EvilDMP
[11:25:52] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[11:28:37] <amvara> Just grabed the SQL and ... there we go. We are loosing the time in the database.
[11:29:05] <amvara> talking the problems sometimes helps to understand where to dig deeper.
[11:29:37] <amvara> 1.7s on pure database execution
[11:32:29] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[11:37:36] *** Quits: PaulWay[w] (~PaulWay@2001:44b8:1110:f800:5642:78c3:490c:d48) (Ping timeout: 250 seconds)
[11:42:48] *** Quits: audio (~audio@2603-8081-1800-0062-edd3-118e-4a86-1943.res6.spectrum.com) (Ping timeout: 250 seconds)
[11:44:34] *** Joins: gcbirzan (~gcbirzan@user/gcbirzan)
[11:47:37] *** Quits: tbcr (~tbcr@user/tbcr) (Read error: Connection reset by peer)
[11:50:41] <amvara> getting closer. https://paste.centos.org/view/3bb32fbf <- analyzing the statements - the second statement Django generates is not performing well. Also put a view there delivering the same data in 3ms.
[11:51:30] * amvara wondering how to trick django to create a statement like the view.
[11:55:35] *** Joins: jgee1 (~jgee@186.80.49.20)
[11:57:45] *** Quits: jgee (~jgee@186.80.49.20) (Ping timeout: 258 seconds)
[11:57:45] *** jgee1 is now known as jgee
[11:59:19] <pycode1> hello
[12:00:03] <pycode1> without going too deep i have this code: https://bpa.st/E77Q as you can see there is the queryset and the sql, everything is working well, but i wounder how can i add "backtest" fields into the result too
[12:02:00] <pycode1> i have that inner join i just would like to get the fields of that table too
[12:03:21] *** Joins: lbracher (~lbr@94.105.104.226.dyn.edpnet.net)
[12:09:08] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi)
[12:12:09] <pycode1> is that possible somehow without doing prefetch_related('backtests') and do a similar query again ?
[12:19:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:27:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:27:28] *** ChanServ sets mode: +v EvilDMP
[12:29:00] <jor> pycode1: select_related ?
[12:29:05] <pycode1> hi jor
[12:29:31] <pycode1> Invalid field name(s) given in select_related: 'backtests'.
[12:29:34] <pycode1> there is not backtests
[12:29:39] <pycode1> after the filter?
[12:29:43] <pycode1> did you see the queryset?
[12:34:17] *** Joins: zBeeble (~zBeeble@repeat.dclg.ca)
[12:34:37] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Read error: Connection reset by peer)
[12:35:14] <jor> yeah, but that doesn't show the relation. But if it's m2m, why don't you want to use prefetch_related?
[12:35:39] <jor> only other option I see is using values() and dealing with the result yourself
[12:36:12] <pycode1> jor, in Backtest model i have
[12:36:21] <pycode1> strategy = models.ForeignKey('Strategy', on_delete=models.CASCADE, related_name='backtests')
[12:36:24] <pycode1> but...
[12:36:56] <pycode1> a unique constraints on fields=['strategy', 'period']
[12:37:07] <pycode1> on my query i always filter by period too
[12:37:18] <pycode1> so for that reason i suppose django correctly do the INNER JOIN
[12:37:27] <pycode1> but yes now i should get backtest fields too
[12:37:27] <pycode1> :)
[12:37:57] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:39:53] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[12:41:18] *** Quits: brylie (~Thunderbi@88-114-218-116.elisa-laajakaista.fi) (Quit: brylie)
[12:42:33] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[12:45:05] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[12:49:43] <pycode1> with values() i have problem with django_tables2..
[12:49:44] <pycode1> hmm
[12:54:35] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[12:58:56] *** Joins: GinFuyou (~GinFuyou@reya.cloud.tilaa.com)
[12:59:07] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:59:07] *** ChanServ sets mode: +v EvilDMP
[13:01:43] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[13:02:36] *** Joins: zBeeble42 (~zBeeble@2001:1928:1::35)
[13:02:42] *** Joins: Polarkac (~Polarkac@ip-78-45-47-132.net.upcbroadband.cz)
[13:02:49] *** Quits: zBeeble (~zBeeble@repeat.dclg.ca) (Read error: Connection reset by peer)
[13:09:23] *** Quits: rje_ (~rje@50.54.137.153) (Quit: My computer has gone to sleep. ZZZzzz…)
[13:09:50] *** Joins: rje (~rje@50.54.137.153)
[13:15:11] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Quit: ZNC 1.8.2 - https://znc.in)
[13:15:21] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[13:17:01] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[13:20:14] *** Joins: GiLgAmEzH (~gilgamezh@186.19.69.139)
[13:21:33] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi)
[13:22:10] <pycode1> anyone?
[13:22:10] *** Quits: enkrypt (~enkrypt@user/enkrypt) (Quit: WeeChat 2.8)
[13:25:20] <pycode1> i mean...ok i can use prefetch_related...but seems "stupid" in this case...i already join that table with an INNER JOIN so i suppose there is a way to retrieve ALL the fields of the joined table
[13:27:09] <jor> well, first of all I doubt that one extra query will have much impact :/
[13:27:47] <pycode1> jor no no you are 100% right..i am not saying it is "wrong"... i am saying that it is pointless because i already have all the fields i need with that inner join.
[13:27:58] <jor> but what I think you are basically want here, is returning two different model instance from a QuerySet, that's just not something django orm does
[13:28:35] <pycode1> jor i need strategy and backtest fields something like strategy.* and backtest.*
[13:28:35] <jor> either values and do it your self, or annotate the primary object with extra fields :/
[13:28:42] <pycode1> i do not think it is not supported no?
[13:28:56] <pycode1> maybe with annotate()
[13:29:33] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:30:25] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[13:30:31] <pycode1> jor, yeah i need to write the fields i need into annotate()
[13:30:57] <pycode1> it is some sort of repetition but ok..
[13:34:00] <pycode1> jor, sounds strange to me because when we do, for example, select_related('model') django creates an inner join and put the fields of that model into SELECT... in this case, django creates the inner join but i must annotate()
[13:34:15] <pycode1> it is not a big problem, ok, but sounds a bit strange
[13:37:46] *** Joins: zBeeble (~zBeeble@repeat.dclg.ca)
[13:38:17] *** Quits: zBeeble42 (~zBeeble@2001:1928:1::35) (Read error: Connection reset by peer)
[13:40:32] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[13:43:33] <jor> well, to me this database model sounds a bit strange :)
[13:44:34] <jor> but these workarounds just give you more complex code, harder to maintain, etc etc. Just use prefetch_related, passin a custom Prefetch with filtered query set. And then just use normal django code
[13:46:36] <pycode1> jor, i cant
[13:46:55] <pycode1> because i need to filter the strategies that have backtests with a specific period..
[13:47:04] <pycode1> so i must filter backtest to get the strategy
[13:47:08] <pycode1> the query is perfect
[13:47:27] <pycode1> i do not need extra code...just a way to "call" the fields of the backtest model
[13:47:31] <pycode1> but annotate() works
[13:47:43] <pycode1> maybe someone has an alternative
[13:48:04] <pycode1> why do i need another query if i already have everything on the first
[13:50:22] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[13:55:26] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 258 seconds)
[13:56:21] <jor> or why not query from the Backtest model then, select_related the strategy object
[13:56:33] *** Quits: enkrypt (~enkrypt@user/enkrypt) (Quit: WeeChat 3.0)
[13:56:53] *** Joins: enkrypt (~enkrypt@user/enkrypt)
[14:05:27] *** Joins: koo6 (~koo6@89-24-13-235.customers.tmcz.cz)
[14:07:43] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:08:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:12:12] <pycode1> jor, yes it could be better
[14:12:14] <pycode1> i try
[14:14:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[14:14:18] *** ChanServ sets mode: +v EvilDMP
[14:17:33] *** Quits: tm007 (uid287041@id-287041.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[14:22:46] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi)
[14:27:46] <pycode1> jor, much better!
[14:31:00] *** Joins: anas (~anas@196.224.51.199)
[14:41:46] *** Joins: knbk (~quassel@84-24-92-123.cable.dynamic.v4.ziggo.nl)
[14:51:32] *** Joins: wattux (~wattux@212.51.23.106)
[14:52:56] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[14:57:15] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[15:07:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:07:59] *** Joins: Crassus (~Crassus@user/crassus)
[15:08:29] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[15:46:31] *** Quits: withered_wolf (~withered_@1437135-v103.1561-static.stchilaa.metronetinc.net) (Quit: If dreams are like movies, then memories are films about ghosts.)
[15:48:52] <pycode1> i am building a page where i need to load many points to draw charts, with many i mean MAX 200K points, so a big chart, now... i have those points in PG so i need to do a SELECT * FROM points_table and then put them into a script variable to let javascript draw charts etc. Now, is there a way to automatically create a json from a queryset? without looping on every record?
[15:49:14] <pycode1> ok i can cache that task, the user does this thing one time and then i can store the json in redis
[15:49:23] <pycode1> but how can i handle such thing?
[15:59:00] <jor> well, before chaching and stuff like that, my first question with these thing is usually: why send 200k points? A user can't see that. Make it a low resultion, resample in the database, have zoom-in capability in the graph UI
[15:59:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:05:48] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[16:06:20] <mihael> Anyone tried implementing different User Types via proxy model? https://dev.to/danielfeldroy/multiple-user-types-with-custom-data-fields-for-django-4iie What do you think about it?
[16:10:19] <GinFuyou> Looks just like a wrapper around usual one-to-one profile, if you have to query each separately here and there I guess it could make code somewhat cleaner
[16:11:01] <pycode1> jor you are right but i have to create statistics too so i need all the points to calculate them.
[16:11:18] <pycode1> charts+statistics
[16:11:33] *** Joins: xkuru (~xkuru@user/xkuru)
[16:15:52] *** Joins: x_kuru (~xkuru@user/xkuru)
[16:16:38] <jor> pycode1: yeah, i'd do that in the database as much as possible (probably fallback to numpy/pandas for more complex stuff). Altleast reducing the points avoids some potential bottlenecks with looping/generating results
[16:17:14] <pycode1> ok
[16:17:17] <jor> but with large queryset, usually the first simple step is implementing basic django paging, and have the client javasript use that
[16:17:57] <pycode1> jor, yes for data(chart) is ok... i can load N points everytime but for statistics i need to undertsand if i can do that in PG
[16:18:08] <pycode1> to avoid looping on data with js to create statistics
[16:18:11] *** Joins: brownan (~brownan@136.56.137.143)
[16:19:57] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 258 seconds)
[16:20:32] *** Joins: kyzaodro (~kyzaodro@217.138.252.249)
[16:20:45] <jor> well, pg already has a lot of builtin statistics aggregation functions, all implemented in nice fast C ;)
[16:20:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[16:20:55] *** ChanServ sets mode: +v EvilDMP
[16:27:14] <pycode1> jor, ok
[16:33:16] *** Quits: doev (~doev@p549d709f.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[16:34:51] <Knyght> is qs1 | qs2 | qs3 not the same as qs1.union(qs2, qs3)? They give very different queries, and with the first one it's much slower
[16:36:58] *** Quits: kyzaodro (~kyzaodro@217.138.252.249) (Quit: Leaving)
[16:40:42] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:46:24] <deniska> Knyght: the former does SQL OR, the latter does SQL UNION
[16:46:42] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[16:47:40] <Knyght> ah, well, goes to show what I know then :)
[16:51:01] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[16:55:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:56:10] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[16:59:46] <wallbroken> GinFuyou: here?
[17:01:59] *** Joins: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac)
[17:04:09] *** Joins: BlackSalmon (~BlackSalm@user-94-254-229-1.play-internet.pl)
[17:07:12] <BlackSalmon> https://dpaste.org/LuAf I am trying to upload image with http protocol. I have written the script that catch auth token and check for user id - it works. But idk where should i put it so it saves as author of uploaded file
[17:15:39] <BlackSalmon> anybody?
[17:16:59] <jor> BlackSalmon: what do you mean with 'author of the file'?
[17:17:02] <pathos> pycode1: There's the `json_script` template tag in Django that might be useful for you: https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#json-script . So you put a python object that contains the data you want (you could use `values` or `values_list` for that) in the context, and use that template tag to add it as JSON into the HTML.
[17:17:19] <mihael> jor I think he meant the uploader, right BlackSalmon?
[17:18:06] <mihael> If that is correct, I think you'll have to redesign your model
[17:18:39] <pycode1> pathos, yes i also have found that
[17:19:21] <jor> well, I guess in the context/meaning of saving. You need a database field, or maybe you mean the underlying OS file ownership... which is a whole other can of worms :/
[17:19:59] <pycode1> pathos, the problem here as jor was correectly saying that i have a lot of data, i should do statistics on PG and than share small amount of data just for charts.
[17:20:02] <pycode1> i am thinking about that
[17:20:12] <pycode1> loading a queryset with 200k records sounds heavy ahah
[17:20:27] <BlackSalmon> mihael, jor: i use cURL to upload file. I provide auth token that is assigned to the user. As i upload the file it throws error that author_id field can't be empty, so i assume he doesn't deduce author id from auth token
[17:21:01] <pycode1> javascript is very fast for that, i mean a loop on 200k takes nothing...but yes maybe is bit complicated on django
[17:21:36] <BlackSalmon> So i'm trying to pull that auth token from META and assign author id, but idk where to put that so it would work in proper way
[17:23:16] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 265 seconds)
[17:23:17] <jor> pycode1: hmm, it's the same in django (or rather python). To loop can be fast if you don't do anything heavy in it :/ I'd be more worried about the javasvript part, looping can be quick, but _rendering_ 200k points....
[17:24:31] <pycode1> jor, not in that case...i mean i can hold the point in a list...but i can render 1000 points at time..
[17:24:43] <pycode1> so when the user move the curson i can load more from the json i already have loaded
[17:24:52] <pycode1> without adding ajax requests etc
[17:25:59] <pycode1> however doing stats with PG Is better, of course i just need to understand how...because i have to manipulate the data a little bit before calculating stats...
[17:26:07] <pycode1> it is not just max() min() avg() or similar..
[17:26:15] <moldy> BlackSalmon: if the user is authenticated, you can get the user with request.user
[17:26:17] <pycode1> at the moment i do that in pandas but sounds heavy too
[17:26:35] <pycode1> because i have... 1. user send the request... 2. load data on pandas... 3. do stats .... 4. returns
[17:26:46] <pycode1> it takes more time i do not know i need to test
[17:26:54] <mihael> BlackSalmon would this help https://stackoverflow.com/questions/44448878/how-can-i-return-user-id-with-token-in-django?
[17:27:11] <moldy> BlackSalmon: show us the full traceback
[17:27:31] <mihael> I'm trying to define multiple user types, what should I call a normal user?
[17:27:38] <moldy> mihael: User?
[17:29:00] <jor> pycode1: I'd suggest to start with what you know, if you got pandas to return the correct calculations, use that... then meansure/profile and go from there :)
[17:29:17] *** Joins: BlackSalmon98 (~BlackSalm@user-5-173-148-6.play-internet.pl)
[17:29:51] <jor> pandas is also my usual goto solution, just because I use it far more often then SQL nowadays :)
[17:30:05] <mihael> moldy just felt a little redundant; also wondering if there is any other term I'm not aware of :D  https://dpaste.org/ZTWG
[17:31:01] *** Quits: BlackSalmon (~BlackSalm@user-94-254-229-1.play-internet.pl) (Ping timeout: 246 seconds)
[17:31:09] <hylje> typically you might want one kind of user with several possible roles they can act on behalf of
[17:31:33] *** Quits: BlackSalmon98 (~BlackSalm@user-5-173-148-6.play-internet.pl) (Client Quit)
[17:32:07] <pycode1> jor me too be here the problem is that i need to wait the period the user select. and then do stats over that period... so i receive start_date and end_date exrtract data and do stats...so the things are: ... 1) load a very big pandas dataframe that do the filter and then run stats  or convert everything into pg but as i write i have to manipulate the data a bit before doing stats
[17:32:21] <pycode1> so a ginat in memory dataframe could work but i do not know
[17:32:32] <mihael> hylje what do you mean?
[17:32:35] <pycode1> i do not think i can have a dataframe like a database to do similar operation
[17:32:39] <pycode1> operations :)
[17:32:42] <pycode1> idk
[17:33:37] *** Quits: serghei (~egrep@user/serghei) (Quit: serghei)
[17:34:00] *** Joins: serghei (~serghei@user/serghei)
[17:36:10] *** Joins: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net)
[17:36:42] *** Joins: BlackSalmon (~BlackSalm@user-5-173-148-6.play-internet.pl)
[17:44:33] *** Joins: doev (~doev@p54a71872.dip0.t-ipconnect.de)
[17:47:30] <pathos> pycode1: I would always benchmark first and test. Load a bunch of test data in your local db, see how long it takes to render and load the page, check memory usage, see if that meets your performance targets. If it does, great, if it doesn't, then look to optimise.
[17:47:50] <pycode1> pathos, yes i am doing that
[17:48:16] <pycode1> pathos, json_script
[17:48:19] <pycode1> has some problem
[17:48:29] <pycode1> i get ..QuerySet is not JSON serializable
[17:48:39] <pycode1> i did Strategy.objects.values()
[17:48:40] <pycode1> nothing else
[17:48:45] <pycode1> wrong?
[17:51:14] <pycode1> ok i need list()
[17:51:16] <pycode1> nvermind
[17:52:15] *** Joins: serghei1 (~serghei@user/serghei)
[17:53:35] <BlackSalmon> mihael: It still doesn't fix the problem. User provides only token, but code still doesn't deduce his profile id from that
[17:53:52] *** Joins: serghei2 (~serghei@user/serghei)
[17:54:32] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 252 seconds)
[17:56:44] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 252 seconds)
[17:56:59] <mihael> like moldy said, BlackSalmon you should paste the full traceback here
[17:57:53] *** Joins: serghei (~serghei@user/serghei)
[17:57:56] *** Quits: serghei2 (~serghei@user/serghei) (Read error: Connection reset by peer)
[17:58:16] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[17:58:40] *** Quits: explore (uid233125@id-233125.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[17:59:51] *** Quits: Polarkac (~Polarkac@ip-78-45-47-132.net.upcbroadband.cz) (Quit: Client closed)
[18:00:27] <BlackSalmon> https://dpaste.org/iPQz
[18:05:51] <mihael> BlackSalmon I haven't really scrutinized the code, but isn't the value you're assigning to the author the token? https://dpaste.org/LuAf#L12,33
[18:07:16] *** Joins: mattil (~mattil@airio.portalify.com)
[18:08:02] <mihael> also, you can retrieve the user from the request: https://www.django-rest-framework.org/api-guide/requests/#user
[18:08:03] <BlackSalmon> I take all tokens form DB, filter by the given token and then select author id from that token
[18:09:07] <BlackSalmon> I can't retrieve by request user cause if user is using only auth token by http protocol it looks like he wouldn't be logged in
[18:09:29] <BlackSalmon> At least when i'm trying to upload the file...
[18:09:34] <moldy> BlackSalmon: as far as i see, your custom save() method is not being called
[18:10:07] <moldy> BlackSalmon: your other snippet expired, it might help to post it again and set the expiration time a bit longer
[18:10:48] <BlackSalmon> Oh, i probably missclick the expire date
[18:10:48] <BlackSalmon> https://dpaste.org/MAiU
[18:11:18] *** Quits: mattil (~mattil@airio.portalify.com) (Remote host closed the connection)
[18:12:03] <moldy> BlackSalmon: i would get rid of the custom save() method and instead assign the user in the serializer or in the view
[18:12:31] <moldy> models don't have access to the request, this is by design. you can use models when there is no request.
[18:12:53] <BlackSalmon> Okay, we can try with view then
[18:14:06] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:14:22] <BlackSalmon> moldy: https://dpaste.org/SU3Y sth like this?
[18:15:13] <moldy> BlackSalmon: roughly. but this now looks like you want to filter, not assign the user
[18:15:30] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:15:46] <moldy> BlackSalmon: also, i don't know how your auth setup looks like, but in most cases, you can use ``request.user``. there is usually no need to manually inspect the token
[18:16:08] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:18:23] <moldy> BlackSalmon: https://dpaste.org/uggJ
[18:19:08] <Kim^J> Apart from the tutorial and just bruteforcing with trial and error, are there any other recommended "full" guides/resources/books to learn Django?
[18:19:14] *** Joins: mattil (~mattil@d4p2-xxhbz1vm4tsvhy-4.rev.dnainternet.fi)
[18:19:33] <moldy> Kim^J: the rest of the official documentation
[18:19:47] <moldy> if you're new, i recommend to actually go through it all once
[18:19:56] <moldy> (except for the API reference)
[18:20:00] <Kim^J> moldy: Well ofc, but I want to follow something that takes from A to Z
[18:20:01] *** Quits: mattil (~mattil@d4p2-xxhbz1vm4tsvhy-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:20:24] <moldy> Kim^J: that would be the tutorial
[18:20:33] *** Joins: mattil (~mattil@airio.portalify.com)
[18:20:37] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[18:20:53] <moldy> the problem is that your A and Z differ from other people's A and Z
[18:20:54] <Kim^J> Right now I'm in the state where I know sort of how I want to do something, but I need the django specific way of doing it, so lots of Googling
[18:21:10] <moldy> Kim^J: can you give an example?
[18:23:23] <Kim^J> moldy: Well, I have a form right now, where I want to persist some fields in client side cookies, which I have working for a single view/form combination, works great. Now I want to extend this into more forms/views, which lead me into reading about middleware
[18:23:48] <Kim^J> Which I think can solve my problem
[18:23:58] <moldy> Kim^J: middleware is one possibility. you can also factor the code out into a function that you call from the views where you need it.
[18:24:09] <moldy> Kim^J: also, consider using the session framework instead of storing data in cookies
[18:24:18] <Kim^J> The thing is, I want to "know" that middleware should be able to solve this
[18:24:40] <Kim^J> Sessions won't really do since I want to persist across multiple browser settings.
[18:24:55] <Kim^J> (It's information about the author of the form, so they won't have to fill that in all thbe time)
[18:28:53] <moldy> Kim^J: and the cookies persist across multiple browser settings?
[18:29:30] <moldy> what kind of browser settings are these?
[18:29:34] <moldy> anyway, yes, middleware works
[18:30:17] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:31:25] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:31:47] <fleabag> seems to me like you should just save that data in a model somewhere and then put it in the view content, or use that data as initial values for your form in those views
[18:31:54] <fleabag> *view context
[18:32:02] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:32:30] <moldy> +1
[18:34:19] *** Quits: mattil (~mattil@airio.portalify.com) (Ping timeout: 265 seconds)
[18:35:02] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:35:15] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:36:32] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:37:18] *** Joins: diek (~diek@187.36.4.113)
[18:39:56] *** Joins: serghei1 (~serghei@user/serghei)
[18:40:24] <Kim^J> fleabag: That would require a login or authentication of some sort.
[18:40:45] <Kim^J> This is just a "temporary" thing until I have SSO for this, since then I can grab the info from AD
[18:42:09] <Kim^J> Anyway, this is just one of many things I've solved, the issue isn't that I can't solve them, the issue is I want to have a better understanding on what solutions Django provides, without having to make up every single scenario before they occurr just to understand what Django can do for me.
[18:42:10] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 258 seconds)
[18:42:14] <fleabag> seems like he does intend a login or auth of some sort, since "I want to persist across multiple browser settings"
[18:42:34] <fleabag> oh wait that's you
[18:42:34] <moldy> i'm wondering why you expect those cookies to persist across browser settings but not the session cookie
[18:42:35] <Kim^J> The tutorial is great, it's just that it's a bit shallow
[18:42:52] <moldy> but if you are 100% sure you want cookies here, sure, go ahead
[18:43:06] <fleabag> so how do you intend for a client to go on a new computer and then have access to their old session from somewhere else?
[18:43:19] <moldy> drawback of cookies is you cannot trust them, so you have to validate the data each time it comes in
[18:43:34] *** Joins: mattil (~mattil@helsinki.portalify.com)
[18:43:53] <Kim^J> fleabag: That's not a scenario I cover. People rarely use this site from other computers than their own work computer.
[18:44:01] <Kim^J> And in which case they just have to fill it in again
[18:44:26] <Kim^J> moldy: I don't, the cookie data just "prefills" that part of the form.
[18:44:38] <Kim^J> Name, phone number and email.
[18:44:41] <fleabag> oh, okay, so you mean just for if they come back another day
[18:44:52] <Kim^J> fleabag: Yeah
[18:45:01] <fleabag> I would do this with cookies then
[18:45:15] <moldy> Kim^J: ok, but still: what are those browser settings that prevent you from using the session framework?
[18:45:23] <Kim^J> Well, yeah xD
[18:45:53] <Kim^J> moldy: Afaik the session uses session cookies to store the id.
[18:45:57] <mihael> What would be the advantage of the proxy model: https://dev.to/danielfeldroy/multiple-user-types-with-custom-data-fields-for-django-4iie? Why not just user OneToOne Field directly?
[18:46:01] <fleabag> but I guess, what's the issue with having the views that handle the form pull that information out of the cookies?
[18:46:12] <fleabag> your views have access to them
[18:46:22] <Kim^J> fleabag: That's what I'm doing now.
[18:46:51] <fleabag> I'd only use middleware for things you want across (most of) your whole site, or things that need to happen before your views are called
[18:47:20] <Kim^J> fleabag: I haven't decided that middleware is the right choice, I just started reading about them
[18:47:37] <fleabag> in some situations of tests, your middleware won't be active
[18:47:50] <Kim^J> You assume I have tests xD
[18:48:56] <Kim^J> (Yes yes, I should)
[18:49:25] <fleabag> so like, csrf is implemented in middleware
[18:51:20] *** Quits: serghei1 (~serghei@user/serghei) (Read error: Connection reset by peer)
[18:52:32] *** Joins: serghei1 (~serghei@user/serghei)
[18:53:33] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[18:55:35] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 258 seconds)
[18:56:58] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[18:57:43] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi)
[18:58:02] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[18:58:05] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[18:58:59] *** Joins: anas (~anas@196.224.51.199)
[19:16:59] *** Quits: serghei1 (~serghei@user/serghei) (Ping timeout: 268 seconds)
[19:19:01] <mihael> What's the best approach in implementing different user types?
[19:19:43] <GinFuyou> One that works best for your case
[19:20:16] <BlackSalmon> moldy: It raises that error that user is not authenticated. I have added null=True to model to see what will happen and there's another error :/
[19:21:04] <mihael> GinFuyou Given the case I need a user with their own profile for: Athlete, Coach, Agent, Admin, and Normal User. How would you implement it?
[19:21:18] <BlackSalmon> https://dpaste.org/Q8N1
[19:21:43] <moldy> BlackSalmon: you're calling .save() on the wrong object
[19:21:54] <moldy> AttributeError: 'Response' object has no attribute 'save'
[19:22:45] <BlackSalmon> https://dpaste.org/AemN
[19:23:17] <moldy> BlackSalmon: ah, i gave you the wrong code
[19:23:26] <GinFuyou> mihael, listing names of classes doesn't tell me much? How user profiles are different? Can user be of several roles at same time? What views are specific for different types?
[19:24:01] <BlackSalmon> moldy: You gave me this https://dpaste.org/uggJ i changed it a little bit
[19:24:33] *** Quits: bambanxx (~bambanx@pc-223-49-214-201.cm.vtr.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:24:52] <mihael> GinFuyou Each type of user will have their own unique profile. A user, can only have one role. It's more of an API, so views will be just for CRUD operations
[19:25:39] <GinFuyou> so, each model has different data?
[19:25:53] <GinFuyou> *fields
[19:26:15] <moldy> BlackSalmon: yeah sorry, my bad
[19:26:31] *** Quits: wattux (~wattux@212.51.23.106) (Ping timeout: 246 seconds)
[19:26:58] *** Joins: wattux (~wattux@212.51.23.106)
[19:30:16] *** Joins: diek (~diek@187.36.4.113)
[19:31:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:31:34] *** Quits: diek (~diek@187.36.4.113) (Remote host closed the connection)
[19:31:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:31:39] *** ChanServ sets mode: +v EvilDMP
[19:31:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:32:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:32:23] *** ChanServ sets mode: +v EvilDMP
[19:32:45] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:33:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:33:11] *** ChanServ sets mode: +v EvilDMP
[19:33:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:33:58] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:33:58] *** ChanServ sets mode: +v EvilDMP
[19:34:09] <mihael> GinFuyou yes
[19:34:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:34:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:34:47] *** ChanServ sets mode: +v EvilDMP
[19:35:08] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:35:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:35:34] *** ChanServ sets mode: +v EvilDMP
[19:35:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:36:21] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:36:21] *** ChanServ sets mode: +v EvilDMP
[19:36:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[19:38:11] <moldy> BlackSalmon: i think it's probably easier to actually override create() on the serializer, and get the request from the serializer context
[19:39:08] <mihael> I wonder if this would be the best approach: https://dpaste.org/k01w
[19:39:31] <moldy> BlackSalmon: https://dpaste.org/ZkCm
[19:39:51] <moldy> BlackSalmon: and then i think you can probably delete the whole create() method on your view
[19:40:16] <GinFuyou> mihael, well, if fields are considerably different separate model for each is probably best. If role is single, it's one-to-one relation
[19:40:55] <mihael> GinFuyou What do you mean by if role is single, it's one-to-one relation?
[19:41:11] <GinFuyou> 1 user == 1 profile
[19:41:30] <mihael> Although for now, I don't have unique fields for Coach and Agent, but they will somewhere down the road so better to separate them right?
[19:41:59] <mihael> I'm wondering how would I handle the registration though, so like provide a different url for different type of user?
[19:43:09] <GinFuyou> I had similar case, but with Tutor, Admin, Student, Manager, where any combinations aside of Student could mix
[19:44:26] <GinFuyou> mihael, well, do they need different urls? If so, shouldn't be a much of a problem
[19:45:20] <mihael> GinFuyou do you still have your model codebase for that? can you share it to me?
[19:45:46] <mihael> GinFuyou So how would I handle their registration? how would I differentiate if the user is trying to register as a specific user?
[19:47:11] <GinFuyou> mmm, I don't think so, client took over code and support now.
[19:48:15] <mihael> ah, too bad for me :)
[19:48:44] <GinFuyou> mihael, that's question for you. In my all users registered themselves or by Admin, Admin could promote Managers and Tutoes
[19:48:53] <GinFuyou> Tutors *
[19:49:07] <GinFuyou> Students on other hand didn't even have to register
[19:50:35] <mihael> Users, except for admin, register themselves
[19:50:37] <GinFuyou> Tutors fill Students, if Student wishes, they can register and link with Student profile (well it was a plan but I think we didn't implement it after all)
[19:52:41] <mihael> So how would I handle if all users, except admin, register themselves?
[19:52:57] *** Joins: serghei1 (~serghei@user/serghei)
[19:53:01] *** Quits: serghei1 (~serghei@user/serghei) (Remote host closed the connection)
[19:53:17] *** Joins: serghei (~serghei@user/serghei)
[19:53:53] <amvara> Have found a solution for my problem I mentioned today: https://paste.centos.org/view/eff6a8a1
[19:54:52] <mihael> GinFuyou my current user model so far: https://dpaste.org/wFBf
[19:54:58] <GinFuyou> mihael, I don't know? May they pick a role themselves? Should be some roles confirmed by admin?
[19:56:11] <mihael> Yep, they can pick a role themselves
[19:56:38] <mihael> I guess I'll have to create a different serializer for each type
[19:56:39] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[19:56:39] *** ChanServ sets mode: +v EvilDMP
[19:57:13] <GinFuyou> Can't you have 2 serializers?
[19:57:37] <GinFuyou> based on role in first, select class of second
[19:57:44] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:58:05] <mihael> can you give me a sample code, I'm a bit confused
[19:58:28] <mihael> Ah, so I'll have a role field that I would check then create the corresponding class from that
[19:58:57] <GinFuyou> init a serializer of corresponding class, but yeah
[19:59:18] <GinFuyou> I don't have much experience with API\serializers
[19:59:28] <GinFuyou> But that's how I'd do it with forms
[19:59:57] <mihael> But how did you get 2 serializers? I was thinking creating a serializer for each type
[20:00:42] <GinFuyou> Well each profile model get's own model serializer
[20:03:20] <mihael> Yeah, hmmm, this project is becoming more complicated that I though. Thanks GinFuyou
[20:05:27] *** Quits: dez (uid92154@user/dez) (*.net *.split)
[20:05:28] *** Quits: theorangeone (~quassel@host86-191-183-30.range86-191.btcentralplus.com) (*.net *.split)
[20:05:28] *** Quits: mxp (~mxp@82.98.30.69) (*.net *.split)
[20:05:28] *** Quits: schinckel (uid38120@id-38120.charlton.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: cusco_ (~tralala@neptune.tretas.eu) (*.net *.split)
[20:05:28] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[20:05:28] *** Quits: daniel2 (daniel@user/daniel2) (*.net *.split)
[20:05:28] *** Quits: jug (~jug@user/jug) (*.net *.split)
[20:05:28] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[20:05:28] *** Quits: st3fan (sid43079@id-43079.tooting.irccloud.com) (*.net *.split)
[20:05:28] *** Quits: mjh4386 (~mjh4386@165.22.53.231) (*.net *.split)
[20:05:29] *** Quits: kiska (~kiska@user/kiska) (*.net *.split)
[20:05:29] *** Quits: bjs (sid190364@user/bjs) (*.net *.split)
[20:05:29] *** Quits: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001) (*.net *.split)
[20:05:29] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[20:05:29] *** Quits: pucko (~pucko@static.244.198.216.95.clients.your-server.de) (*.net *.split)
[20:05:29] *** Quits: flying_sausages (~flying_sa@user/flying-sausages/x-2113186) (*.net *.split)
[20:05:29] *** Quits: Alan (~alan@user/alan) (*.net *.split)
[20:05:29] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[20:05:38] *** Joins: schinckel_ (uid38120@id-38120.charlton.irccloud.com)
[20:05:40] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 265 seconds)
[20:05:49] *** Joins: daniel2 (daniel@user/daniel2)
[20:05:54] *** Joins: deniska_ (~denis@user/deniska)
[20:05:56] *** Joins: mxp (~mxp@82.98.30.69)
[20:05:58] *** Joins: theorangeone (~quassel@host86-191-183-30.range86-191.btcentralplus.com)
[20:06:07] *** Joins: flynn (~mcbloch@user/flynn)
[20:06:21] <doev> I try to use static files in debug mode. All files are 404. were should I create the static directory?
[20:06:53] <doev> https://docs.djangoproject.com/en/3.2/howto/static-files/ I used this manual.
[20:07:03] *** Joins: dez (uid92154@user/dez)
[20:07:15] *** Joins: jug (~jug@user/jug)
[20:07:16] *** Joins: bjs (sid190364@user/bjs)
[20:07:36] *** Joins: wallbroken (wallbroken@user/wallbroken)
[20:07:38] *** Joins: flying_sausages (~flying_sa@user/flying-sausages/x-2113186)
[20:07:44] *** deniska_ is now known as deniska
[20:07:44] *** Joins: Snorlax (~Snorlax@2a03:b0c0:2:f0::363:a001)
[20:07:49] *** Joins: mjh4386 (~mjh4386@165.22.53.231)
[20:08:45] <GinFuyou> doev, no, you don't need to
[20:08:58] <GinFuyou> if you mean static root
[20:09:20] <GinFuyou> static src dirs go into apps
[20:10:16] <doev> "Store your static files in a folder called static in your app. For example my_app/static/my_app/example.jpg."
[20:11:08] <BlackSalmon> moldy: That works, thank you
[20:15:24] <doev> hmm
[20:15:26] * amvara would love to hear your 5cents on my solution to the 1 to many issue mentioned here: https://paste.centos.org/view/eff6a8a1 <- is this good?
[20:19:02] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:21:38] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[20:21:54] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[20:34:24] *** Joins: szymon (~ugh@staticline-31-183-187-232.toya.net.pl)
[20:38:59] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bd-162.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:39:15] *** Joins: Alan (~alan@user/alan)
[20:41:42] *** Quits: mihael (~mihael@2001:4454:2ac:7100:b581:df8c:9254:aaac) (Quit: Client closed)
[20:47:04] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Ping timeout: 250 seconds)
[20:47:28] *** Quits: wattux (~wattux@212.51.23.106) (Quit: Client closed)
[20:47:56] *** Joins: pathos (~pathos@169-1-247-122.ip.afrihost.co.za)
[20:54:48] *** Joins: especial (~especial@cm-84.214.207.74.getinternet.no)
[20:54:58] *** Quits: GinFuyou (~GinFuyou@reya.cloud.tilaa.com) (Ping timeout: 246 seconds)
[20:56:54] *** Quits: lbracher (~lbr@94.105.104.226.dyn.edpnet.net) (Ping timeout: 265 seconds)
[21:15:22] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[21:15:54] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:20:10] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Ping timeout: 246 seconds)
[21:21:20] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[21:35:52] *** Joins: bambanxx (~bambanx@191.125.160.91)
[21:36:17] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:40:41] *** Joins: tbcr (~tbcr@user/tbcr)
[21:42:00] *** Joins: spat (uid23050@id-23050.tooting.irccloud.com)
[21:42:59] *** Joins: diek (~diek@187.36.4.113)
[21:43:17] <spat> is there a place to post job listings?  don't want to spam the channel.  can i say message me if interested?
[21:44:05] <moldy> spat: there is https://djangojobs.net
[21:44:33] <spat> thank you
[21:44:51] <moldy> saying it once is probably tolerated, you basically did this now ;)
[21:45:02] <spat> :)
[21:45:07] <hylje> the first one is free
[21:48:42] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[21:49:19] *** Quits: himcesjf (uid409730@id-409730.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[21:49:19] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[21:49:44] *** Quits: bambanxx (~bambanx@191.125.160.91) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:51:12] <moldy> TIL there also is https://www.djangoproject.com/community/jobs/
[21:51:28] <moldy> which seems to aggregate djangojobs.net plus others
[21:52:37] *** Joins: pycode (~pycode@2001:b07:5d28:551:12c4:2df1:94d2:d99d)
[21:54:14] *** Quits: pycode1 (~pycode@2001:b07:5d28:551:e65a:97da:9e:dda9) (Ping timeout: 250 seconds)
[21:59:50] *** Joins: Kalov (~Thunderbi@179.56.117.154)
[22:06:18] *** Joins: rdrg109 (~rdrg109@51.195.232.80)
[22:14:08] *** Quits: GiLgAmEzH (~gilgamezh@186.19.69.139) (Ping timeout: 252 seconds)
[22:15:43] <BlackSalmon> moldy: if i would wanted to add option that resizes oryginal image to a thumbnail in that serializer, how should it look like?
[22:16:01] <moldy> BlackSalmon: hmm, not sure
[22:16:08] <moldy> but there are some thumbnail apps for django
[22:16:12] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[22:16:14] <moldy> sorl-thumbnail, easy-thumbnails
[22:20:07] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:29:12] *** Joins: himcesjf (uid409730@id-409730.tinside.irccloud.com)
[22:31:22] <rdrg109> Let's suppose I ve defined a model with 20 attributes and I need to document those attributes. Does django offers a way to do that? I'm currently thinking of describing the attributes in the docstring of the class.
[22:32:43] <dodo> rdrg109: you could look into sphinx
[22:32:58] <dodo> it takes comments like #: blah that are above the attribute
[22:33:26] <dodo> (with some autodoc plugin loaded, most likely)
[22:33:48] *** Quits: especial (~especial@cm-84.214.207.74.getinternet.no) (Remote host closed the connection)
[22:35:19] <moldy> rdrg109: yeah, docstrings plus sphinx, probably
[22:35:24] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 252 seconds)
[22:37:38] *** Joins: clawh_ (~clawh@185.244.214.60)
[22:37:39] *** Quits: clawh (~clawh@185.244.214.60) (Quit: Leaving)
[22:39:24] <rdrg109> Thanks for the help!
[22:41:32] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[22:43:36] *** Quits: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net) (Client Quit)
[22:43:58] *** Joins: Diemuzi (~Diemuzi@ip68-106-203-17.pn.at.cox.net)
[22:51:13] *** Quits: pycode (~pycode@2001:b07:5d28:551:12c4:2df1:94d2:d99d) (Ping timeout: 256 seconds)
[22:53:58] *** Joins: pycode (~pycode@2001:b07:5d28:551:4f1d:b3ff:349:2031)
[22:54:54] <captain_morgan> I'm kinda going through setting up docs right now too and I dnot think you even need any plugins. sphinx provides `sphinx-apidoc` which can bootstrap rst files from your django project
[22:56:18] <captain_morgan> this guide provided a quick start I found helpful, mostly the second on the conf.py changes you need. https://www.freecodecamp.org/news/sphinx-for-django-documentation-2454e924b3bc/
[22:56:27] <captain_morgan> s/second/section/
[22:57:16] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[22:57:17] *** ChanServ sets mode: +v EvilDMP
[22:59:47] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:02:22] *** Quits: pycode (~pycode@2001:b07:5d28:551:4f1d:b3ff:349:2031) (Ping timeout: 246 seconds)
[23:03:04] *** Joins: pycode (~pycode@2001:b07:5d28:551:88f0:615f:6154:12f)
[23:03:14] *** Joins: serghei (~serghei@user/serghei)
[23:08:47] *** Quits: serghei (~serghei@user/serghei) (Ping timeout: 256 seconds)
[23:09:28] *** Quits: anas (~anas@196.224.51.199) (Ping timeout: 268 seconds)
[23:10:48] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:12:40] *** Quits: pycode (~pycode@2001:b07:5d28:551:88f0:615f:6154:12f) (Ping timeout: 250 seconds)
[23:18:34] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-123-214.red.bezeqint.net) (Ping timeout: 246 seconds)
[23:19:32] *** Joins: diek (~diek@187.36.4.113)
[23:26:25] *** Joins: thiras (~thiras@user/thiras)
[23:29:01] *** Joins: anas (~anas@196.224.51.199)
[23:32:26] *** Joins: pycode (~pycode@2001:b07:5d28:551:1918:5a1d:f8ce:1754)
[23:32:44] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Remote host closed the connection)
[23:32:54] *** Quits: ajb (~ajb@cupid.whatbox.ca) (Quit: bye)
[23:33:49] *** Joins: tm007 (uid287041@id-287041.highgate.irccloud.com)
[23:35:24] *** Quits: diek (~diek@187.36.4.113) (Read error: Connection reset by peer)
[23:35:57] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:43:39] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:45:12] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:45:12] *** Quits: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57) (Remote host closed the connection)
[23:45:14] *** Quits: django-ticketbot (~django-ti@django/ops/ticketbot) (Remote host closed the connection)
[23:45:25] *** Joins: diek (~diek@2804:14d:7681:82bd:e84f:20c9:c5ab:ee57)
[23:45:32] *** Joins: django-ticketbot (~django-ti@django/ops/ticketbot)
[23:46:33] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[23:46:34] *** Joins: doc|work (~doc@user/doc)
[23:47:10] *** Quits: pycode (~pycode@2001:b07:5d28:551:1918:5a1d:f8ce:1754) (Ping timeout: 246 seconds)
[23:49:43] <doc|work> looking for best practices advice here I guess, how do you decide between using a custom manager or adding a method on a model?
[23:50:21] <doc|work> strictly methods for row based vs custom manager for model based selections?
[23:52:10] *** Quits: doev (~doev@p54a71872.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[23:55:51] *** Joins: pycode (~pycode@2001:b07:5d28:551:55a8:758a:ed3c:7d94)
