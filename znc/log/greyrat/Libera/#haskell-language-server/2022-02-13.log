[00:04:03] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[00:09:07] <pepeiborra> sooch_: re 9.4 why do you think that you wouldn't be eligible? In any case, the project is up: https://github.com/haskell-org/summer-of-haskell/pull/149
[00:27:59] *** Joins: coot (~coot@213.134.190.95)
[01:31:59] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[01:37:40] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Ping timeout: 272 seconds)
[02:49:33] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[05:22:24] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[05:23:31] *** Joins: hololeap (~hololeap@user/hololeap)
[05:27:46] *** Quits: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net) (Remote host closed the connection)
[05:27:59] *** Joins: shapr (~user@pool-173-73-44-186.washdc.fios.verizon.net)
[05:40:10] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[05:44:56] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Quit: ERC 5.4 (IRC client for GNU Emacs 28.0.91))
[05:45:20] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[07:17:45] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Ping timeout: 256 seconds)
[07:18:46] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[07:23:17] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:27:20] *** Joins: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com)
[07:28:13] *** Quits: leungbk (~user@2603-8000-1201-2dd2-1067-ad14-f206-2522.res6.spectrum.com) (Remote host closed the connection)
[13:30:12] *** Joins: fendor (~fendor@178.165.165.136.wireless.dyn.drei.com)
[15:36:02] *** Joins: coot (~coot@213.134.190.95)
[16:50:18] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[17:08:53] *** Joins: fendor_ (~fendor@91.141.33.218.wireless.dyn.drei.com)
[17:11:50] *** Quits: fendor (~fendor@178.165.165.136.wireless.dyn.drei.com) (Ping timeout: 272 seconds)
[17:35:01] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[17:41:07] *** Joins: coot (~coot@213.134.190.95)
[17:42:44] <maerwald> jneira[m]: https://github.com/haskell/haskell-language-server/pull/2707
[17:56:51] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[18:20:54] *** Quits: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at) (Remote host closed the connection)
[18:21:17] *** Joins: cptwunderlich (~Benjamin@212-186-57-158.cable.dynamic.surfer.at)
[19:34:21] *** Joins: lucas96 (~lucas96@177.70.94.186)
[19:40:41] *** Joins: lucasmsoares96[m (~lucasmsoa@2001:470:69fc:105::1:7793)
[19:41:42] *** Quits: lucas96 (~lucas96@177.70.94.186) (Quit: Client closed)
[19:47:44] <lucasmsoares96[m> Hey guys. I'm new to Haskell and I'm having problems with HLS. I'm trying to make a simple program to test the Aeson library. I installed Aeson by stack install and cabal install, but HLS doesn't recognize it and shows the following error:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/1642e57c385a599507892aecce35a01a1788d78f)
[19:57:59] <fendor[m]> lucasmsoares96: Single Haskell file support is kind of flimsy, it generally doesnt really work once you have external dependencies
[19:59:28] *** Quits: fendor_ (~fendor@91.141.33.218.wireless.dyn.drei.com) (Remote host closed the connection)
[20:11:48] <lucasmsoares96[m> fendor: I added aeson in the stack project's package.yaml file dependencies and it worked. Is this the right way?
[20:12:25] <fendor[m]> yes!
[20:12:29] <fendor[m]> path of least resistance
[20:26:42] <lucasmsoares96[m> OK! Thank you very much
[20:28:57] <fendor[m]> you're welcome!
[20:38:21] *** Joins: coot (~coot@213.134.190.95)
[21:32:13] <maerwald> so is it possible to emit json from the wrapper shell script in case of error and the LSP client will understand it?
[21:32:28] <maerwald> michaelpj[m] indicated something like that here https://github.com/haskell/haskell-language-server/issues/2589
[21:32:35] <maerwald> this might be useful for the dynamic bindists
[21:32:55] <maerwald> I don't really know how server and client communicate
[21:36:22] <fendor[m]> maerwald, yes it is possible, I tried it. You can send ShowMessage requests from the server before responding to the initialize request
[21:36:48] <maerwald> how do they communicate? stdout?
[21:36:54] <fendor[m]> yeah
[21:36:59] <maerwald> oh, that's simple
[21:39:04] <fendor[m]> it is
[21:39:25] <fendor[m]> I am rather afk now, but what is your use-case?
[21:40:11] <maerwald> fendor[m]: the wrapper bindist
[21:40:24] <maerwald> https://github.com/haskell/haskell-language-server/blob/master/bindist/wrapper.in
[21:40:29] <fendor[m]> to achieve better UX?
[21:40:35] <maerwald> yeah, when we don't find a GHC
[21:40:46] <maerwald> I don't think user will see anything useful in their IDE otherwise
[21:40:47] <fendor[m]> you want to tell the user? 
[21:40:52] <maerwald> sure
[21:40:59] <fendor[m]> I have a PR to turn the wrapper into an lsp server
[21:41:15] <maerwald> yeah
[21:41:50] <maerwald> but the wrapper won't run at this point
[21:42:07] <maerwald> https://github.com/haskell/haskell-language-server/blob/ec5f2354a51f3d4c0e94bbab34aa7457c7f0ff62/exe/Wrapper.hs#L121
[21:42:13] <maerwald> we exec to the script
[21:42:52] <maerwald> static wrapper binary -> wrapper shell script -> dynamically linked HLS binary
[21:43:00] <maerwald> that's the callstack
[21:45:47] <fendor[m]> right
[21:45:57] <fendor[m]> can't we catch the error in the wrapper shell script?
[21:46:09] <wz1000> maerwald: I'm thinking it would be nicer to move much of this logic into the wrapper script, so that it integrates with ghcup and can offer to download the toolchain or HLS in the editor UI
[21:46:30] <maerwald> I'm confused now, which wrapper :D
[21:46:36] <maerwald> there are so many
[21:46:38] <wz1000> Wrapper.hs
[21:46:42] <maerwald> which logic
[21:46:51] <wz1000> the ABI hash and installation stuff
[21:47:02] <wz1000> as well as fetching artifacts and toolchain stuff
[21:47:05] <maerwald> well... but what if someone invokes the HLS exe itself
[21:47:22] <maerwald> that was specifically noted here that it's done for debugging purposes
[21:47:23] <wz1000> That is on them then
[21:48:09] <maerwald> then we shouldn't expose those in PATH, honestly
[21:48:29] <wz1000> Sure
[21:49:21] <maerwald> yeah, I mean there's nothing in the shell script that can't be done in the wrapper binary
[21:49:35] <wz1000> Basically I'm thinking of a flow where the user runs Wrapper.hs (which itself is an LSP server), which offers to download GHCup, then GHC, then cabal or stack and then HLS via the UI itself
[21:49:56] <wz1000> And that will mean that we don't need to maintain all of these editor extensions with their own complicated logic for downloading HLS
[21:50:49] <maerwald> HLS could link against ghcup...
[21:50:58] <wz1000> yeah, the wrapper could
[21:51:28] <maerwald> https://hackage.haskell.org/package/ghcup-0.1.17.4/docs/GHCup.html#v:installGHCBindist
[21:52:18] <maerwald> yeah, not sure
[21:52:41] <wz1000> why is that?
[21:53:22] <maerwald> well, would complicate GHCup development, if there's a downstream user
[21:53:26] <maerwald> for the API
[21:53:59] <wz1000> we could call the binary then, if we can rely on it to provide a stable CLI
[21:54:17] <wz1000> But the API would really be better because we would get typechecker failures :)
[21:54:43] <maerwald> good luck dealing with my Excepts open sum type :D
[21:55:07] <maerwald> cli is rather stable
[21:55:23] <wz1000> I imagine it would be pinned to specific ghcup API versions. And why have an API if you don't want anyone to use it :)
[21:55:59] <maerwald> lots  of open questions there
[21:57:09] <maerwald> maybe open a bikeshed ticket?
[21:57:30] <wz1000> yeah
[22:19:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[22:20:44] *** Joins: hololeap (~hololeap@user/hololeap)
[23:34:57] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:56] *** Joins: juhp (~juhp@128.106.188.82)
