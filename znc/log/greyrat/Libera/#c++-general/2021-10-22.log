[00:03:31] <rond_> c++ world is full of possibilities, but it's daunting... there are no definite answers, even for as simlpe things as build systems, package managers... eh
[00:05:36] <ashafq> rond_: You have to be a Ninja (pun intended) with C++ ;)
[00:06:02] <rond_> :(
[00:07:08] <ashafq> Build systems are pretty hard to master, IMO.
[00:07:08] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:07:35] <ashafq> Also, it's the least studied "field"
[00:08:41] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 258 seconds)
[00:09:45] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[00:14:46] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:16:17] <cbreak> CMake is the best option for cross-platform c++ build systems in my opinion.
[00:16:28] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:16:32] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:17:58] <rond_> cbreak any 'cpp-project-template' you'd recommend?
[00:19:36] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[00:20:53] *** Quits: magla (~gelignite@55d47f25.access.ecotel.net) (Quit: Stay safe!)
[00:20:57] *** Joins: jkl (~jkl@user/jkl)
[00:21:43] *** Quits: andreasbuhr (~quassel@p548ddff3.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:22:38] <c4017w> Is it OK to use std::string_view like this on line 27? https://wandbox.org/permlink/krq23nthEqxZXIv8
[00:23:47] <c4017w> I'm not sure what happens to Command after I erase the first element of Args
[00:25:08] <urdh> line 27 is empty there but I don't see anything obviously wrong
[00:25:31] <urdh> nothing happens to `Command`; the string_view has been copied already
[00:25:46] <c4017w> Uh I mean 28
[00:26:02] <c4017w> so it continues to point to a section of Line right?
[00:26:59] <c4017w> vs if Args was a std::vector<std::string>, it would point to memory which had been freed already (by erasing the first element)
[00:27:05] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Ping timeout: 258 seconds)
[00:27:24] <urdh> yes, it still points at a section of Line
[00:27:42] <c4017w> ok thanks
[00:27:50] <urdh> and no, an std::string would still have made a copy on line 24
[00:28:19] <c4017w> really? Command is a string_view though
[00:28:43] <urdh> oh, I was assuming you'd also change Command to an std::string
[00:29:00] <urdh> otherwise yes you would be referencing an invalid string
[00:29:02] <c4017w> Ah no, I meant only change Args to std::string
[00:29:07] <c4017w> ok perfect
[00:31:27] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[00:33:54] <c4017w> hmm, how can I #include <string_view> without bringing std::string along?
[00:34:23] <c4017w> Or how can I make sure no code uses std::string
[00:34:38] <cbreak> if string_view includes string, then you have no choice
[00:34:39] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[00:34:49] <c4017w> I don't think it does
[00:35:23] <cart_man> So I take it std::maps do not hold the order in which the first to last was "Inserted" into it?
[00:35:29] <cart_man> Is there a way to maintain the order?
[00:35:42] <c4017w> although actually it must somewhere for conversions between the two to work
[00:35:48] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[00:36:07] <cbreak> either string includes string_view or vice versa
[00:36:09] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[00:36:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[00:36:31] <cart_man> PJBoy: ^^
[00:36:39] <cbreak> cart_man: map is ordered with the chosen order, not insertion order
[00:36:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[00:36:48] <cbreak> if you want to preserve insertion order, use a vector.
[00:37:15] <cbreak> if you want both insertion order and a sorted order, maybe a more powerful container like the weirdo boost::multi_index is more to your liking
[00:37:26] <cart_man> OMG I am never using maps again
[00:37:36] <cart_man> cbreak: No I just want it to keep the order I pushed it in as
[00:37:36] <cbreak> why?
[00:37:48] <cbreak> maps need to keep their data ordered
[00:37:48] <cart_man> but damn I have been jumping through hoops entire night trying to do simple shit with a map
[00:37:53] <cbreak> otherwise they can't find it again
[00:37:57] <cart_man> I think Ill probably just use two vectors next time
[00:38:14] <cbreak> why two?
[00:38:36] <cart_man> cbreak: One for the name and one for the whatever value
[00:38:40] <cbreak> the reason to use map is because you want the data to be ordered, and searchable by key
[00:38:58] <cbreak> why not a vector containing key value pairs?
[00:39:25] <cart_man> cbreak: I am guessing you can't do myVector["hello
[00:39:31] <cart_man> cbreak: I am guessing you can't do myVector["hello"] = 6 ?
[00:39:43] <cart_man> usiung a std::vector<std::pair> ?
[00:39:48] <cbreak> of course not.
[00:40:15] <cbreak> you'd do myVector.push_back({"hello", 6})
[00:40:41] <cbreak> or myVector.emplace_back("hello", 6), might also work in some versions of C++
[00:40:41] <cart_man> cbreak: I had this idea in mind that worked really well being able to do myMap["serial_nuim"] = amount ... BUT there are some things about Maps that just does not fit the bill and to make it fit you just through hoops like crazy. I will share my code in a bit and you will see
[00:40:59] <johnny> well there's unordered_maps too. not that it matters here tho
[00:41:15] <cbreak> as I said above: map really is an associative data structure implemented via a binary search tree
[00:41:29] <cbreak> it's not intended to preserve any order other than the one imposed by the total-order it is configured for
[00:41:34] <cart_man> cbreak: Yea I get that now.
[00:42:01] <cbreak> if you don't care about performance, a single vector, or a pair of vectors will work fine too I guess
[00:42:23] <cart_man> cbreak: Yea I am thinking that that should have probably been my initial route
[00:42:37] <cart_man> But its a bit late now since I almost have to give in
[00:43:01] <johnny> has anybody played around with ztd.text? what do folks think about it?
[00:43:29] <cbreak> why does insertion order matter?
[00:43:48] <cbreak> if it does matter, you could just add a time stamp, or a serial number to the data
[00:43:53] <johnny> or is it really a stack?
[00:44:02] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[00:44:40] <johnny> (or queue)
[00:45:09] *** Joins: proller (~p@80.240.216.69)
[00:47:23] <pakcjo> what's the point of declaring a static const variable inside a method?
[00:49:41] <RandomReader> it's initialized the first time the function is called, and then persists for the duration of the program
[00:49:56] <RandomReader> depending on the context, it might care about the persistence, the delayed initialization, or both
[00:51:24] <pakcjo> RandomReader: hmmm it's one char... And the function is called once only
[00:52:11] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:7fe4:4b4a:851b:ca4d) (Quit: Client closed)
[00:53:56] <RandomReader> dunno then, maybe it's just someone being silly
[00:55:07] <pakcjo> looks like that
[00:58:46] <cart_man> cbreak: Btw ... why if you use *next() on a map does it seem like it still holds order? Does that just follow the branch top down then?
[00:59:17] <cart_man> cbreak: Because this seems to hold sequence -> *next(prod.begin(), 1)
[00:59:29] <cart_man> like.. I dont know if I am just being lucky with the output just being in the right place though
[01:02:19] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:06:54] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[01:07:23] <Alipha> cart_man: maps are in sorted order
[01:08:42] <RandomReader> std::map is always sorted by key
[01:08:59] <RandomReader> std::unordered_map is not sorted at all
[01:10:19] <RandomReader> both are intended for finding an entry by key, and don't particularly care about other traits, like insertion order
[01:11:19] <RandomReader> https://en.cppreference.com/w/cpp/container has a summary of the stdlib containers, if you haven't seen it
[01:14:06] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:14:16] *** Quits: AmR (~AmREiSa@156.199.106.121) (Quit: Konversation terminated!)
[01:15:00] <Alipha> if you want to search by both key and insertion order, then if the performance hit is not an issue, i'd use a std::vector<std::pair<std::string, int>> and then linearly search for the std::string as needed (actually, I wouldn't use std::pair at all, but instead, create a class/struct which properly represents the data)
[01:15:06] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:16:02] <Alipha> if key lookup performance is important, then use boost::multi_index as mentioned, or use both a std::map<std::string, int> and std::vector<std::pair<std::string, int>>, inserting/updating both as needed, keeping them in sync
[01:17:08] <Alipha> alternatively, it may be better to store a std::map<std::string, int>::iterator in the std::vector, so you're not duplicating the (potentially lengthy) std::string data
[01:20:56] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[01:22:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:26:07] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 258 seconds)
[01:29:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:29:47] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:32:38] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[01:35:45] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[01:36:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:37:01] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:37:01] *** ChanServ sets mode: +v npaperbot
[01:47:13] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[01:48:25] *** Quits: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz) (Remote host closed the connection)
[01:55:43] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[02:05:15] *** Quits: shad0w (~shad0w@user/xshadow) (Ping timeout: 260 seconds)
[02:08:17] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:09:41] *** Joins: manuels (~manuel@80.211.205.88)
[02:16:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[02:19:54] *** Joins: gggpkm (~gggpkm@114.245.104.31)
[02:20:10] *** Quits: DrMax (~DrMax@node-1w7jra94757g0qm6ux0eknpcd.ipv6.telus.net) (Ping timeout: 258 seconds)
[02:20:32] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[02:20:40] *** Quits: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de) ()
[02:22:29] <cart_man> Is there a way to temporarily refere a string when passing it into a function but also instantiating it in the parameters... Like   void func( std::string &x  ){};   func( "AWDAD"  );   ... Basically I have to pass a reference but I am creating the string in the parameters which is an obvious problem
[02:23:13] <cart_man> I wonder if there isnt something in std:: so that I dont have to instantiate the string right above the calling function
[02:24:46] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[02:26:11] *** Quits: emerent (~quassel@p200300cd5748559aba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[02:26:13] *** Joins: emerent_ (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de)
[02:26:13] *** emerent_ is now known as emerent
[02:27:08] <kalven> uh, what is the behavior you want?
[02:31:57] <cart_man> kalven: I want it to make a tmp reference somewhere and destroy ut at the end of the function so I dont have to instantiate it right before calling the function purely because the function needs a reference
[02:35:22] <kalven> and just doing func("blah");  isn't what you want?
[02:36:13] *** Joins: DrMax (~DrMax@node-1w7jra94757g01zbrtbsw2pn9.ipv6.telus.net)
[02:39:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[02:41:16] <cart_man> kalven: Well not if func takes a reference to std::string
[02:41:22] <cart_man> It wont compile
[02:43:07] <TinoDidriksen> Just take string_view instead?
[02:45:51] *** Quits: DrMax (~DrMax@node-1w7jra94757g01zbrtbsw2pn9.ipv6.telus.net) (Ping timeout: 258 seconds)
[02:48:53] <RandomReader> why do you need a std::string& ?
[02:49:38] <RandomReader> (or rather, why does the function)
[02:51:16] <kalven> cart_man: oh, sorry - didn't see that it was non-const.. why is it not a const ref?
[02:54:03] <cart_man> kalven: will the const make a difference in that scenario though?
[02:54:39] <cart_man> RandomReader: I have a function that just pads a string with some spaces before I print it. soo it takes std::string PAD(std::string &x) {}
[02:55:01] <RandomReader> it would make a difference, that's why all of us have been asking "why" about behavior :)
[02:55:14] <RandomReader> so it modifies the string?
[02:55:17] <cart_man> Ohhh ok ok
[02:55:27] <cart_man> RandomReader: It builds a new one from the given reference rather
[02:55:49] <RandomReader> ok, then since it doesn't need to modify the original, it should be taking a const reference
[02:56:05] <kalven> and then func("blah") will work
[02:56:10] <c4017w> wandbox is down?
[02:56:10] <RandomReader> (or a string_view value as TinoDidriksen mentioned)
[02:56:22] <cart_man> RandomReader: Ok I already changed that :)
[02:56:28] *** Quits: The_Jag_ (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[02:56:42] <cart_man> kalven: You serious? If that is const then going PAD(std::string("HELLO")); will work?
[02:56:51] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[02:57:10] <RandomReader> the reason the const is special is because if it did modify it, you wouldn't be able to use the function reasonably .. there would be a temporary std::string created, this function would modify it, and then nobody could use the result since it's already gone
[02:57:12] <kalven> cart_man: yes, but this would also work: PAD("HELLO");
[02:57:48] <RandomReader> and way back in the early days of C++ references, they discovered this was confusing in a bad way, so they made sure that couldn't happen
[02:58:02] <RandomReader> but it's ok for functions that observe, so it works for const references
[02:58:33] <RandomReader> since nobody cares about a temporary that isn't going to be changed
[02:59:58] *** Quits: DSpider (~DSpider@79.115.58.9) (Quit: Leaving)
[03:06:41] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Read error: Connection reset by peer)
[03:07:22] *** Joins: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it)
[03:09:16] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d573:53b:f618:a5a1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:09:39] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d573:53b:f618:a5a1)
[03:09:53] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:d573:53b:f618:a5a1) (Client Quit)
[03:12:50] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[03:14:22] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[03:16:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[03:22:50] *** Quits: The_Jag (~The_Jag@host-82-55-23-104.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[03:26:21] *** Joins: proller (~p@2a02:6b8:b081:8813::1:9)
[03:32:20] <cart_man> Anybody want to kick the shit out of my code quickly?
[03:32:31] <cart_man> Judge it hard
[03:32:33] <cart_man> ?
[03:33:14] <cart_man> RandomReader: ? kalven ?PJBoy ?
[03:33:47] *** Joins: gggpkm__ (~gggpkm@114.245.104.31)
[03:35:02] *** Joins: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it)
[03:35:11] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[03:36:51] <cart_man> Anybody :*(
[03:37:05] <cart_man> Jjust to give me some pointers?
[03:37:06] *** Quits: gggpkm_ (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[03:40:20] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[03:41:44] <Alipha> cart_man: just paste a link to your code?
[03:42:43] <cart_man> Alipha:  -> https://wandbox.org/permlink/iGwaBXYpI2oahwvT
[03:42:54] <cart_man> it seems like wandbox can not run stuff that waits for input
[03:44:19] <cart_man> That second lambda function is an absolute shit show of a map mess
[03:47:34] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Ping timeout: 258 seconds)
[03:48:24] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:81f5:7671:f4b1:847d)
[03:50:58] <Alipha> cart_man: use constexpr, not #define, for constants
[03:53:02] <Alipha> cart_man: define variables where you need them. That is, get rid of lines 68 and 83
[03:55:35] <Alipha> `prod.size() > in` instead of `(prod.size()-1) >= in`?
[03:59:45] <Alipha> size_t is a more appropriate type than uint32_t for indexes
[04:00:26] <Alipha> The for loops in add_spaces can be replaced with std::string member functions
[04:02:45] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[04:03:49] <Alipha> Line 179 can be a ranged-for
[04:04:15] *** Joins: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net)
[04:05:46] <cart_man> Alipha: So how do I make a similar constexpr to work like that define though?
[04:08:27] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:11] <Alipha> constexpr uint32_t EVERY_X_FREE = 3;
[04:09:35] <Alipha> 281 can be a ranged-for
[04:12:21] <cart_man> Alipha: How will a ranged for look like though in that way? Is that the same as an iterator?
[04:15:36] <Alipha> well, 281 is easy: for(auto &tmp : specials_templates) { tmp();}
[04:16:57] <cart_man> Alipha: So ranges are basically just shorthand notation that looks allot like Javascript syntax?
[04:18:01] <Alipha> Yeah
[04:19:00] <cart_man> Alipha: Othat than that you think I can send it?
[04:19:06] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:19:53] <cart_man> I did change the ranges though and constexpr. The signdess was cause I either needed Signed or unsigned and size_t is I think unsigned
[04:21:27] <Alipha> cart_man: this is a class assignment?
[04:21:50] <cart_man> Alipha: Code test. Although it was so vague I have no idea what they are really aiming for
[04:21:55] *** Joins: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net)
[04:22:26] <cart_man> Like is it knowledge on new standards or practices or performance based or simply get it done etc
[04:22:28] <cart_man> who knows
[04:24:30] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[04:26:59] <Alipha> They want to see code that you'll write on the job. So readable, lots of comments, good variable names. Add unit tests for bonus points
[04:27:57] <RandomReader> small syntax notes: the "const" in the params of one_out_of_x_things is inconsistent .. the map inserts on 166-173 can be shorter:  .insert({"Pears", 2.0})
[04:28:45] <Alipha> key and value aren't meaningful variable names
[04:28:51] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[04:28:54] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:29:04] <RandomReader> the comments are great for something like this, since they provide a lot of your thought process without you walking them through it live
[04:30:28] <Alipha> Don't overdo comments though. That is, don't make them pointless. `int x = 3; // assigns 3 to x`. Yes, thank you, I know how to code
[04:30:38] <Alipha> I would perhaps add a few more comments though
[04:31:05] *** Quits: radu242407 (~radu242@pool-141-157-204-247.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[04:31:44] *** Gustavo6046_ is now known as Gustavo6046
[04:35:47] <cart_man> Alipha: Where though.... lol I feel commented out
[04:35:57] <cart_man> RandomReader: Ok I have shortened all the inserts
[04:36:31] <cart_man> also added the const. Realized that I can make it const since the value of it will never change. I am quite tired so I am messing up more than I am coding really
[04:37:03] <cart_man> Alipha: I changed thet key and value names also
[04:38:46] <cart_man> I hope its not too hard to read. The Map part in the end of the second and third Lambda became really taxing... It will probably be seen as hard to read
[04:39:05] <cart_man> There is quite allot going on between all the lists and maps
[04:39:55] *** gggpkm__ is now known as gggpkm
[04:40:19] <RandomReader> what I would want to do is isolate/encapsulate functionality .. whether that's functions, or classes that contain the data, etc
[04:40:41] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:40:46] <RandomReader> now that you've implemented this, you probably have an idea of where those boundaries might be .. so you could add a comment to that effect, a "what you might do with more time" kind of thing
[04:40:51] <RandomReader> and be prepared to discuss that more if they ask
[04:41:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:41:42] <RandomReader> before implementing this, you wouldn't necessarily know that (kinda have to get a feel for the problem first), so it's completely reasonable that you would evolve the code
[04:42:25] <cart_man> RandomReader: That is very true and almost always happens
[04:42:39] <RandomReader> or not necessarily a comment, could be in the submission email or whatever
[04:43:02] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:43:06] <cart_man> Well I would perhaps think of implementing a pattern but I wouldnt know which one will work best if they asked
[04:43:38] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:56] <Alipha> Yeah, I would create more functions over adding comments. Function names end up being "self documenting"
[04:43:57] <RandomReader> just that you thought of this as potentially unreadable, and have a sense that it can be improved, is a good thing .. that's all you need to communicate here
[04:44:43] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Quit: Please hold for network changes)
[04:45:47] <RandomReader> and that you didn't due to time, which they also know is bounded here
[04:47:09] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[04:55:23] *** Joins: ferdna (~ferdna@user/ferdna)
[04:55:26] <RandomReader> (I mean it's always a guessing game as to what your particular reviewers/interviewers are going to pick up on, but practically speaking, folks who do this for a living know how it goes and will evaluate accordingly)
[04:56:01] <RandomReader> (and of course if you do want to spend the time, go nuts)
[04:56:59] <cart_man> RandomReader: I wont mind spending the time and generally I dont but sometimes it gets very frustrating if you spend 5 hours a night for a week on stuff that bears no fruits
[04:57:35] <cart_man> I was stuck in another country for 2 years and I lost so many hours due to not being able to work remotely or get to the country. I spend weeks on tests and prep
[04:59:39] <RandomReader> oh yeah, it's exhausting
[05:00:54] <RandomReader> but that's also why I suggest framing this as "here's an overview/description of what I would do with more time", since it manages to acknowledge both sides of that: there's opportunity for improvement, and this is a sample not a work for hire so you've got other demands on your time too
[05:01:53] <RandomReader> that annoying communication dance
[05:03:25] *** Joins: The_Jag_ (~The_Jag@host-80-182-37-74.retail.telecomitalia.it)
[05:06:26] <cart_man> RandomReader: I also noted that maps was perhaps not the best approach
[05:06:30] <cart_man> to the problem
[05:06:40] *** Quits: The_Jag (~The_Jag@host-87-16-43-28.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[05:06:48] *** Joins: DrMax (~DrMax@node-1w7jra94757fz3yjk67sb2lm1.ipv6.telus.net)
[05:08:33] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[05:09:53] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 265 seconds)
[05:11:27] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:11:41] <cart_man> RandomReader: Alipha Thanks allot for the help!
[05:11:44] <cart_man> Im going to bed.
[05:11:56] <RandomReader> welcome! and good luck
[05:12:13] <cart_man> RandomReader: Thanks ... I have 4 more of these
[05:12:15] <cart_man> haha
[05:12:18] *** Quits: cart_man (~rynot@cpc100914-uddi26-2-0-cust18.20-3.cable.virginm.net) (Quit: Konversation terminated!)
[05:12:30] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[05:13:19] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Read error: Connection reset by peer)
[05:14:44] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:14:55] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[05:15:04] <RandomReader> lol hang in there
[05:30:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[05:36:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:37:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:37:02] *** ChanServ sets mode: +v npaperbot
[05:41:23] *** Joins: smeso (~smeso@user/smeso)
[05:56:52] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 252 seconds)
[05:57:23] *** Quits: headline_ (sid102736@id-102736.tinside.irccloud.com) (Ping timeout: 264 seconds)
[05:57:25] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Ping timeout: 260 seconds)
[05:58:35] *** Quits: buhman (sid411355@user/buhman) (Ping timeout: 260 seconds)
[05:59:41] *** Joins: buhman (sid411355@user/buhman)
[05:59:43] *** Joins: kristjansson_ (sid126207@tinside.irccloud.com)
[05:59:54] *** Joins: nojhan (uid443807@lymington.irccloud.com)
[06:00:46] *** Quits: Leone (~Leo@216.154.21.17) (Read error: Connection reset by peer)
[06:11:45] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[06:11:49] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[06:13:00] *** Joins: headline_ (sid102736@tinside.irccloud.com)
[06:13:43] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[06:16:17] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[06:17:10] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[06:20:08] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 258 seconds)
[06:27:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[06:28:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[06:28:39] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[06:29:05] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101)
[06:29:09] <Inst> lol
[06:29:21] <Inst> I gave up on learning C++ for now because I'm a weird unicorn that finds Haskell easier than C++
[06:29:38] <Inst> i'll be back to C++ once I figure out what these Monad thingamajigs are
[06:38:50] *** Quits: proller (~p@2a02:6b8:b081:8813::1:9) (Ping timeout: 260 seconds)
[06:39:59] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Remote host closed the connection)
[06:40:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:44:51] *** Joins: lumbermb (~lumbermb@191.114.121.99)
[06:50:48] *** Quits: c4017__ (~c4017@S0106c0943583f893.vf.shawcable.net) (Read error: No route to host)
[07:04:47] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[07:08:00] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[07:10:44] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 258 seconds)
[07:11:19] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[07:12:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[07:14:34] *** Gustavo6046_ is now known as Gustavo6046
[07:25:01] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Remote host closed the connection)
[07:25:18] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[07:26:34] *** gggpkm_ is now known as gggpkm
[07:30:24] <lumbermb> Q: why in the new bit operation functions in C++20 stuff like popcount(), countl_one() etc has return type int instead of unsigned int?
[07:31:00] <lumbermb> I at least can't make much sense of an integer having -5 bits set
[07:37:45] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[07:47:32] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[07:50:35] *** Joins: manic_laughter (~manic_lau@2409:4072:1f:8b9d:a2af:296a:bdd8:827c)
[07:53:53] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[08:04:20] *** Joins: reumeth (~reumeth@user/reumeth)
[08:10:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[08:14:53] *** Joins: great_taste (~great_tas@190.32.235.20)
[08:22:36] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[08:25:50] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:30:00] *** Quits: emerent (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:30:21] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[08:31:45] *** Joins: emerent (~quassel@p200300cd574855c8ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:32:02] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 260 seconds)
[08:35:46] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) (Ping timeout: 260 seconds)
[08:36:16] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[08:42:10] <ville> lumbermb: http://www.eelis.net/c++draft/bit.count#10
[08:43:19] <ville> lumbermb: anyways there aren't known unsigned integral types out there that are so wide that int can't represent the bits
[08:43:26] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[08:43:58] <ville> err bit counts
[08:44:17] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[08:46:02] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[08:48:00] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:58:28] <ville> can't find a paper though that might have further rationale
[09:03:44] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[09:03:44] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[09:06:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 276 seconds)
[09:06:32] *** Gustavo6046_ is now known as Gustavo6046
[09:07:35] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 264 seconds)
[09:08:14] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:27:58] <lumbermb> there might be a good rationale, it's just I expected them to be unsigned int (there's not really much sense in making them anything other than signed or unsigned *int*, anyway; tho a decent argument could be made that they should return size_t)
[09:33:36] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[09:34:25] *** Quits: lumbermb (~lumbermb@191.114.121.99) (Ping timeout: 260 seconds)
[09:36:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:37:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:37:02] *** ChanServ sets mode: +v npaperbot
[09:57:17] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Quit: leaving)
[09:58:20] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[10:03:37] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 258 seconds)
[10:04:07] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:04:16] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[10:04:22] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[10:06:30] *** Joins: malloy (~jimery@116.30.223.211)
[10:07:23] <LordKalma> !rq
[10:07:23] <nolyc> LordKalma: <PJBoy> aka 0DR violatio :D
[10:07:33] <LordKalma> I always get the same stuff, bah
[10:07:39] <LordKalma> morning
[10:22:07] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 265 seconds)
[10:38:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:e12b:5f61:be92:9101) (Ping timeout: 264 seconds)
[10:43:27] *** Joins: andreasbuhr (~quassel@p549db086.dip0.t-ipconnect.de)
[10:43:27] *** Quits: andreasbuhr (~quassel@p549db086.dip0.t-ipconnect.de) (Client Quit)
[10:49:35] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[10:52:30] *** Quits: gggpkm (~gggpkm@114.245.104.31) (Ping timeout: 260 seconds)
[10:55:22] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:15:36] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104)
[11:21:45] *** Quits: gggpkm_ (~gggpkm@60.10.23.170) (Read error: Connection reset by peer)
[11:21:55] *** Joins: gggpkm_ (~gggpkm@60.10.194.46)
[11:25:27] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.76.104) (Quit: Connection closed)
[12:05:06] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:709e:32b8:8140:3ed0)
[12:05:39] *** Joins: plastico (~plastico@neomutt/plastico)
[12:09:52] *** Joins: cactus (~shawn@103.206.188.183)
[12:12:13] <Haohmaru> !fact
[12:12:14] <nolyc> Haohmaru: The functions strerror and strtok are not required to avoid data races.
[12:14:34] *** Quits: baltazar (~baltazar@178-164-254-238.pool.digikabel.hu) (Ping timeout: 268 seconds)
[12:14:44] *** Quits: mitch0 (~mitch@178-164-254-238.pool.digikabel.hu) (Ping timeout: 265 seconds)
[12:16:06] *** Joins: mitch0 (~mitch@84-236-16-46.pool.digikabel.hu)
[12:16:06] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:16:16] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:16:19] *** Joins: baltazar (~baltazar@84-236-16-46.pool.digikabel.hu)
[12:18:46] *** Joins: DSpider (DSpider@86.127.147.218)
[12:25:12] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:25:28] *** Joins: gggpkm__ (~gggpkm@60.10.23.170)
[12:28:45] *** Quits: gggpkm_ (~gggpkm@60.10.194.46) (Ping timeout: 265 seconds)
[12:29:47] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Ping timeout: 264 seconds)
[12:34:42] <LordKalma> can an enum class be used as template argument?
[12:34:50] <LordKalma> specifically enum class, not just an int
[12:35:08] <Haohmaru> probably, why not?
[12:35:51] <Haohmaru> do you mean non-type template argument?
[12:36:00] <Haohmaru> or however it was called
[12:36:07] <LordKalma> yes
[12:36:12] <Haohmaru> well, structs work
[12:37:22] <LordKalma> hahah googling for it I found this: https://stackoverflow.com/a/47484461
[12:37:23] <LordKalma> hilarious
[12:37:28] <Haohmaru> { S sss; wub(sss); cout << sss.blah; } struct S { int blah; }; template <S &s> void wub() { s.blah = 5; }
[12:37:28] <geordi> error: no matching function for call to 'wub(S&)'
[12:38:03] <Haohmaru> { S sss; wub<sss>(); cout << sss.blah; } struct S { int blah; }; template <S &s> void wub() { s.blah = 5; }
[12:38:03] <geordi> error: no matching function for call to 'wub<sss>()'
[12:38:16] <Haohmaru> uh
[12:38:53] <Haohmaru> coffee levels below critically-low level
[12:38:55] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[12:40:38] <LordKalma> can you make template "overloads", some with one template argument, some with two?
[12:40:38] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[12:40:41] <LordKalma> like,
[12:41:20] <Haohmaru> you can have default values on the template params..
[12:41:24] <LordKalma> {} template<typename T, typename U> void foo(){BARK;}; template<typename K> void foo(){BARK; BARK;};
[12:41:24] <geordi>  
[12:41:36] <LordKalma> Haohmaru, no, I don't want a default parameter
[12:41:54] <LordKalma> because some template overloads will need a second parameter, but some the second parameter wouldn't make sense
[12:42:15] <Haohmaru> well i'd think it should work
[12:43:16] <PJBoy> yeah
[12:43:30] <PJBoy> templates are matched before function overloads are considered
[12:43:53] <LordKalma> the idea is like,
[12:44:22] <LordKalma> I want to write a modem class. some modems are "standard" like BPSK, QPSK, 4-QAM, 16-QAM, etc
[12:44:33] <LordKalma> but you can also have arbitraty constellations
[12:44:46] <LordKalma> but the standard ones may have gray coding or regular coding
[12:44:54] <LordKalma> thus the standard ones will need a second param
[12:45:16] <LordKalma> but I don't want to make 500 modem_#### classes
[12:45:28] <LordKalma> I think it'll look far neater to especialize the template
[12:45:43] <LordKalma> that said, templates do have a problem
[12:45:50] <LordKalma> can't do runtime polymorphism with them
[12:47:09] <LordKalma> I'll certainly be facing the scenario where interface will always be the same...
[12:47:34] <LordKalma> the library could provide both a template version and an ABC-based version
[12:47:35] <LordKalma> idk
[12:47:39] <LordKalma> have to think about it
[12:47:48] <LordKalma> is this something you have thought about and can share comments?
[12:48:45] <PJBoy> I feel like I'd just make a basic modem class
[12:48:51] <PJBoy> that loads details from a config file
[12:48:59] <PJBoy> >_>
[12:49:28] <LordKalma> the thing is that you can do very different optimizations depending on the modem
[12:49:41] <LordKalma> a QPSK modem is very different from some arbitrary crap
[12:49:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[12:49:50] <LordKalma> you really want to specialize for it
[12:50:15] <PJBoy> I'd probably opt for the ABC then
[12:50:31] <LordKalma> https://liquidsdr.org/doc/modem/
[12:50:34] <PJBoy> and determine if the virtual function call overhead is remotely troubling
[12:50:34] <LordKalma> something like this
[12:50:38] <LordKalma> but C++ and good
[12:51:10] <PJBoy> should be a good chance for devirtualisation if a client only uses a hardcoded modem or whatever
[12:51:17] <LordKalma> well, if you create the child object directly and use it as such, not trough the interface, there's no virtual overhead
[12:51:22] <LordKalma> so it's the same as the template version
[12:51:36] <PJBoy> yeah, if the classes are final'd
[12:51:52] <LordKalma> only then? really?
[12:51:57] <PJBoy> well
[12:52:02] <PJBoy> when does an object stop being polymorphic?
[12:52:18] <LordKalma> I was thinking maybe I could have templated classes inherit from the interface
[12:52:26] <LordKalma> which would make both work
[12:52:43] <PJBoy> any class you derive from a polymorphic class is gonna be polymorphic too
[12:52:53] <PJBoy> the compiler doesn't know nothing has derived any further
[12:52:58] <LordKalma> IModem and Modem<T,U>: public IModem
[12:52:58] <PJBoy> unless you tell it with final
[12:53:22] <LordKalma> PJBoy, but when you like, create a class in the stack, and not use it via pointers, does the lookup happen?
[12:53:33] <PJBoy> so what happens when a runtime BPSK and a template BPSK collide?
[12:53:45] <PJBoy> oh right yeah
[12:53:56] <LordKalma> they wouldn't collide: IModem and Modem<T,U>: public IModem // this pattern
[12:54:36] <Haohmaru> seems i've forgotten how to template ;P~
[12:54:36] *** Joins: txtsd (~txtsd@user/txtsd)
[12:54:44] <PJBoy> oh right uh
[12:54:58] <PJBoy> then you templates don't have any value, right?
[12:55:04] <PJBoy> *your
[12:55:22] <PJBoy> 'cause they'll be doing all that runtime polymorphic stuff anyway
[12:55:39] <LordKalma> well, template arguments are an easier way to swap implementations
[12:56:20] <LordKalma> Modem<modems::qpsk, codings::gray>() or Modem(modems::qpsk, codings::gray)
[12:56:34] <LordKalma> the first might be easier to swap the internals
[12:56:45] <PJBoy> yeah
[12:57:05] *** Joins: sysctl (~sysctl@88.215.77.255)
[12:57:13] <johnny> more like nodem
[12:57:50] <LordKalma> I don't want to finalize the classes
[12:57:59] <LordKalma> it's such a bummer that you *have* to pay for the polimorphism
[12:58:01] <LordKalma> urgh
[12:58:12] <PJBoy> why not finalise them?
[12:58:26] <LordKalma> it's library code, it's evil to finalise classes, no?
[12:58:46] <PJBoy> only if the user would like to derive from them
[12:59:13] <LordKalma> oh well, thanks for the discussion anyway
[12:59:21] <LordKalma> this is something that for sure wil evolve if I even decide to do it
[12:59:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 258 seconds)
[12:59:37] <PJBoy> if the alternative is to not use polymorphism then final classes are no worse for users
[12:59:46] <LordKalma> true
[12:59:56] <LordKalma> ebcause like, I imagine the use case (for myself, even)
[13:00:09] <LordKalma> I'll totally want an IModem * inside my classes
[13:00:25] <PJBoy> yeah
[13:00:30] <LordKalma> unless I std::variant all the options I want to use and std::visit every time :D
[13:00:37] <PJBoy> which you could do
[13:00:57] <LordKalma> does std::visit depend on RTTI? how does it even work?
[13:01:14] <PJBoy> it depends on the variant index
[13:01:35] <LordKalma> so it's a template generated huge switch case?
[13:01:39] <PJBoy> yeah
[13:01:59] <PJBoy> if you can make your visit functor do the exact same operation on all its variants, it's not that bad to do variant+visit
[13:02:06] <LordKalma> std::variant'ing what can be like 50 options... it's hell
[13:02:29] <LordKalma> I would have to provide the typedef for that, for sure :D
[13:02:44] <PJBoy> yeah that's a big flaw
[13:03:02] <LordKalma> the number of combinations is finite, at least
[13:03:08] <LordKalma> since the template parameters are enums...
[13:03:32] <LordKalma> but it's definitely a less ergonomic API
[13:03:37] <LordKalma> and a vtable lookup vs a switch case?
[13:03:39] <LordKalma> whatever
[13:04:23] <LordKalma> "if you can make your visit functor do the exact same operation on all its variants, it's not that bad to do variant+visit" What do you mean?
[13:04:55] <PJBoy> like if I have a variant<int, float, string>
[13:05:32] <PJBoy> I can do an addition visit like `visit([](auto x) { return x + x; }`
[13:05:40] <PJBoy> and that's great, it works for all three types
[13:05:48] <LordKalma> in this case the interface would be the same by contract. We're talking std::visit versus IModem
[13:05:54] <PJBoy> *`visit([](auto x) { return x + x; }, the_variant)`
[13:05:59] <LordKalma> so that's literally the point
[13:06:33] <LordKalma> the less ergonomic bit would be needing to write
[13:06:41] <PJBoy> variant does end up making your objects all have the size of the largest one
[13:06:52] <LordKalma> `visit([](auto x) { x.op(); }, the_variant)`
[13:07:00] <LordKalma> you can't just put a function pointer in there
[13:07:04] <LordKalma> you have the wrapper lambda
[13:07:16] <PJBoy> yeah
[13:07:25] <PJBoy> you can provide all the helper functions I guess
[13:07:35] <LordKalma> fuck it
[13:07:37] <LordKalma> IModem it is
[13:07:38] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:07:52] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:07:54] <PJBoy> :)
[13:08:05] <LordKalma> but on the "variant does end up making your objects all have the size of the largest one" comment
[13:08:13] <RandomReader> what's the purpose of the interface if you're dealing with the derived forms directly?
[13:08:19] <LordKalma> guess what the programmer of liquid did:
[13:08:20] <LordKalma> https://github.com/jgaeddert/liquid-dsp/blob/master/src/modem/src/modem_common.c#L69
[13:08:33] * PJBoy throws up
[13:08:56] <LordKalma> PJBoy, now you get why i want to specialize templates of the WHOLE class?
[13:08:57] <PJBoy> bro look at that apsk modem
[13:09:20] <LordKalma> hahah quite larger than the rest
[13:09:32] <LordKalma> and you have to carry that shit around even on a PSK modem
[13:09:46] <LordKalma> RandomReader, the envisaged use cases would be both like, imagine a program with a dropdown menu, you'd want an IModem for that
[13:09:57] <LordKalma> but for some specific usage you might want to deal with concrete instances directly
[13:10:00] <RandomReader> why?
[13:10:04] <LordKalma> but you can't have the cake and eat it too
[13:10:13] <PJBoy> the main drawback of polymorphism is the pseudo-requirement to place those objects on the heap
[13:10:21] <LordKalma> yeah :/
[13:10:25] <RandomReader> I don't need an interface to list a canned set of names
[13:10:45] <LordKalma> it's not to list, it's to use
[13:10:49] <RandomReader> like I don't get the need for polymorphism at all, in terms of what you described
[13:10:54] <RandomReader> the menu isn't using these things at all
[13:10:57] <LordKalma> you select QPSK on the dropdown menu, for FSK
[13:11:03] <LordKalma> and then internally you want to change the modem
[13:11:07] <ville> PJBoy: the main-absolutely-the-worst drawback is the inversion of control that happens with virtual functions
[13:11:19] <LordKalma> so, either you have class parameters (blegh)
[13:11:30] <LordKalma> or different types, and in that case you need an interface
[13:11:33] <PJBoy> like I go to call a virtual function, and the virtual function ends up calling me?
[13:11:49] <RandomReader> (QPSK is not FSK, bad example?)
[13:11:54] <ville> PJBoy: because what happens in many systems is that you have runtime number of "things" anyway, so the dynamic allocation thing you mentioned above is sort of something you have to deal with anyway
[13:12:04] <LordKalma> it's not, no, RandomReader  :)
[13:12:15] <ville> PJBoy: well that's one way to invert it back to what it should be
[13:12:18] <LordKalma> the point is, imagine a class with currentModem_ member
[13:12:26] <LordKalma> it's about how you'd set that up
[13:12:31] <LordKalma> a variant? an interface?
[13:12:35] <LordKalma> no good answer, it seems
[13:12:35] <RandomReader> I'm asking why you'd have that in the first place
[13:12:39] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:12:52] <RandomReader> it's certainly not necessary for a menu
[13:12:56] <LordKalma> RandomReader, if your application can be using one modem now, and another later, what do you suggest instead?
[13:13:03] <RandomReader> the menu is literally a list of labels, it has absolutely nothing to do with the implementation
[13:13:05] <LordKalma> the meny was the example of usage, common
[13:13:09] <LordKalma> you're missing the point
[13:13:17] <LordKalma> forget the meny
[13:13:17] <RandomReader> which means it doesn't need any interface to that implementation
[13:13:20] <RandomReader> no, this *is* the point
[13:13:21] <LordKalma> *menu
[13:13:31] <RandomReader> I'm asking what use case genuinely needs an interface to the implementation
[13:13:40] <RandomReader> because if there isn't a specific use case with that need, this isn't necessary :)
[13:13:49] <ville> PJBoy: let's say i've a database, and a queue sits in front of it. you've made your requests as a class hierarchy. so the database when it pulls off a request from the queue does effectively: request = queue.get(); request.execute(database);
[13:14:00] <LordKalma> forget everything. new challenge: now the modem is QPSK, but by random change it'll be FSK in 5 hours. Solve the code for that
[13:14:14] <LordKalma> the menu was me trying to explain a use case where the *backend* would have to be switched
[13:14:27] <LordKalma> of course the modem class has NOTHIGN to do with a string list for a meny
[13:14:29] <RandomReader> that's too vague to solve for, I'd want to know specific use cases
[13:14:30] <LordKalma> menu* ffs
[13:14:48] <RandomReader> if this is at the stage where you don't know the use cases yet, I'd say it's too early to pick this part of the design
[13:14:54] <ville> PJBoy: if that request.execute() does not immediately call back to database.dispatch(*this); to do invert the first invert it puts the database request logic code in the wrong place for me
[13:14:58] <RandomReader> need more "what if" sketches to figure this out
[13:15:56] <RandomReader> for example, these particular modem details might be relevant, say, to configure DSP for a software radio
[13:16:14] <LordKalma> yes, that's exactly what it0s going to be for
[13:16:20] <RandomReader> but I'm not sure I'd abstract these at all, as opposed to just making them concrete, since the DSP patterns are so very different
[13:16:26] <LordKalma> reconfiguring the DSP chain of a software radio
[13:16:31] <RandomReader> like I don't need an interface to the modems here
[13:16:38] <LordKalma> where one of the piecees might be a modem
[13:16:43] <RandomReader> I need I/O of the end result, which is not even relevant to these bits
[13:17:04] <LordKalma> RandomReader, you need a place to store the modem, and that place must be able to switch the modem, so it's either a variant or an itnerface
[13:17:08] <LordKalma> you're not making much sense
[13:17:15] <LordKalma> these things don't exist in a vacuum
[13:17:21] <RandomReader> and by concrete, I mean I might just throw all the implementation into a namespace in a single .cpp
[13:17:22] <PJBoy> ville, ok took me some head scratching, but I see what you mean now
[13:17:36] <RandomReader> and then build my switch as a map of names to function pointers
[13:17:53] <RandomReader> I wouldn't need an *instance* interface to this, see what I mean?
[13:17:57] <LordKalma> if nothing else, a DSP chain could be a vector of IDspNode*
[13:18:01] <RandomReader> it's about the use cases, and that needs to be figured out first
[13:18:01] <PJBoy> I have worked on code where virtual functions have an expected "sequence of operations it should do" because of this kind of situation
[13:18:04] <RandomReader> not afterward
[13:18:34] <LordKalma> a switch to a map is a variant, thanks, we circled back
[13:18:39] <RandomReader> no
[13:19:13] <RandomReader> variant, IFoo, etc is all instance-based, the idea being you need to map all of this stuff dynamically to the type of some object
[13:19:13] <LordKalma> PJBoy, ville, can you explain what the problem is? Too green to understand just by that
[13:19:31] <RandomReader> what I just mentioned is the complete opposite: all it does is select which functions are doing the I/O, there is no instance involved
[13:19:58] <RandomReader> and my point is not that one of these things is generically better, my point is that you can't tell them apart until you have specific needs
[13:20:12] <ville> LordKalma: there is no "the problem" really. it's more of a "things i whine about" level
[13:20:27] <RandomReader> one of them will be much simpler for the use cases, but you have to know what those use cases are in order to tell that
[13:20:43] <RandomReader> picking one in advance means risk of complex code that doesn't actually accomplish anything
[13:21:00] <LordKalma> Curiously, when you look at like, all the patterns ever, they are almost always based on vtable lookup
[13:21:07] <LordKalma> dependency inversion/injection for example
[13:21:13] <LordKalma> "always use IFoos"
[13:21:28] <RandomReader> those are all OOP instance patterns
[13:21:36] <RandomReader> you do realize that what I mentioned is not that, right?
[13:21:45] <LordKalma> yes, you mentioned a functor based pattern
[13:21:54] <LordKalma> I was just making a general statement that you made me think about
[13:21:57] <RandomReader> ah
[13:22:07] <RandomReader> yeah, that's fair
[13:22:40] <RandomReader> I think that's just because the "patterns" that people talk about tend to get applied to OOP, since that seems to be the arena that started using it as a term
[13:22:59] <ville> LordKalma: in the above scenario: database+queue+requests the way i want to lay out my code is where the requests are dumb. if you think about what do you need to do a database operation in that scenario is the type of the request plus all the values you need to bind. that's it. the request class does not need to know anything about the database really.
[13:23:04] <RandomReader> which is a bit weird to me, taking something generic and then making it a proper-noun Pattern, but anyway
[13:24:33] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:24:35] <ville> LordKalma: but that sort of thing repeats anywhere where you try to squeeze specialized things through a "queue"
[13:25:35] <ville> (base* is a very short queue. hah)
[13:26:20] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[13:28:01] <PJBoy> if you have some code that calls a virtual function like `shoot(weapon_t&& weapon) { weapon.shoot_at(are_enemies_near(), get_enemies()); }` for example
[13:28:29] <PJBoy> then that code sucks, because all those weapons have to implement the same kind of sequence of operations
[13:28:45] <LordKalma> yeah, like, it's either a vector<variant<read<sql>,read<postgrest>,read<file>,...> queue; queue.push(read<sql>(...)); or vector<IDbOperation*> queue; queue.push(new read<sql>(...));
[13:28:47] <PJBoy> and that shoot_at function carries too much responsibility to do everything
[13:29:27] <PJBoy> it would be better to "keep control" by using virtual functions that do smaller jobs, and factoring out much of the shooting logic into shoot()
[13:30:11] <LordKalma> ville, does what I wrote comprise your rant? is that it?
[13:30:26] <RandomReader> I think the "behavior" is what I was getting at with those modem pieces actually: those look like configuration, not behavior
[13:30:51] <RandomReader> meaning they don't need to ever exist in an abstract sense, because they can't be "used"
[13:30:56] <ville> LordKalma: yes in as much as that qualifies as a rant
[13:31:13] <LordKalma> well, you could do it the C way, and have a struct that has the modem configuration and pass that around to free functions
[13:31:22] <LordKalma> but lemme show again this line: https://github.com/jgaeddert/liquid-dsp/blob/master/src/modem/src/modem_common.c#L69
[13:31:23] <LordKalma> :D
[13:31:36] <PJBoy> you can't scare ville with C
[13:31:42] <LordKalma> and in fact, this one, curiously: https://github.com/jgaeddert/liquid-dsp/blob/master/src/modem/src/modem_common.c#L118
[13:31:47] <LordKalma> PJBoy, It was trying to scare RandomReader :D
[13:31:54] <PJBoy> oh right haha
[13:31:58] <RandomReader> although I guess in liquid's case those are the beginning of an internal abstraction for the specific configurations
[13:32:15] <RandomReader> lol nah, I've dealt with way worse
[13:32:20] <RandomReader> pre-ANSI C, now that shit is scary
[13:32:32] <PJBoy> pre-ANSI C didn't exist
[13:32:35] <PJBoy> it's just a myth
[13:32:40] <RandomReader> I wish :(
[13:32:42] <ville> LordKalma: sure that's fine. it's what you would do in c. or sometimes in c++
[13:32:46] <LordKalma> this is C99, with macros trying to pass as template and mangling engines
[13:34:02] <ville> LordKalma: for me the predicate is whether i've a closed set or an open set of types. if it's an open set then at that point inheritance starts to look good.
[13:34:02] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[13:34:24] <ville> think of a plugin system where you load a user-provided dso
[13:34:41] <LordKalma> yeah, I'm using inheritance a lot for exactly THAT
[13:34:44] <LordKalma> :D
[13:34:50] <RandomReader> it's a little weird to me that liquid instances it that way, but I've also had my head in C++ so much recently I'm not clear what the alternative is at the moment
[13:35:07] <RandomReader> I might land on something vaguely similar if I went back to C
[13:36:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:36:56] <LordKalma> thanks for the discussion
[13:37:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:37:02] *** ChanServ sets mode: +v npaperbot
[13:37:54] *** Quits: malloy (~jimery@116.30.223.211) (Ping timeout: 250 seconds)
[13:39:21] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:40:51] *** Joins: malloy (~jimery@116.30.223.211)
[13:40:58] <RandomReader> I see why you landed on the mix of templates and interfaces though, since that's what liquid seems to be modeling
[13:41:08] <LordKalma> yap
[13:41:22] <LordKalma> hard to get out of what you already saw
[13:42:29] *** Joins: markong (~kvirc@dynamic-adsl-78-12-31-140.clienti.tiscali.it)
[13:42:55] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[13:47:05] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:05:00] *** Joins: segnior (~segnior@user/segnior)
[14:05:00] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[14:05:05] *** Quits: markong (~kvirc@dynamic-adsl-78-12-31-140.clienti.tiscali.it) (Ping timeout: 260 seconds)
[14:05:25] *** Joins: markong (~kvirc@213.146.188.203)
[14:09:45] *** Quits: segnior (~segnior@user/segnior) (Ping timeout: 260 seconds)
[14:09:48] <Haohmaru> !fact
[14:09:49] <nolyc> Haohmaru: There may be more than one inline member function definition in a program.
[14:10:19] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[14:11:15] *** Quits: X-Scale (~ARM@46.50.2.19) (Ping timeout: 258 seconds)
[14:12:22] *** X-Scale` is now known as X-Scale
[14:13:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[14:15:17] *** Joins: gggpkm_ (~gggpkm@60.10.23.170)
[14:18:30] *** Quits: gggpkm__ (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[14:26:56] *** Quits: malloy (~jimery@116.30.223.211) (Quit: WeeChat 3.0)
[14:30:12] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Read error: Connection reset by peer)
[14:33:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[14:37:28] *** Quits: ac_slater (~ac_slater@c-73-221-75-91.hsd1.wa.comcast.net) (Ping timeout: 265 seconds)
[14:38:48] *** Joins: X-Scale` (~ARM@83.223.233.104)
[14:39:38] *** Joins: ac_slater (~ac_slater@c-73-221-75-91.hsd1.wa.comcast.net)
[14:40:13] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[14:41:23] *** X-Scale` is now known as X-Scale
[14:44:59] *** Quits: dld (~davidlowr@2601:197:600:1210:5c78:4bcc:82fe:593c) (Ping timeout: 258 seconds)
[14:47:49] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[14:50:25] *** Joins: pulse (~pulse@user/pulse)
[14:58:10] *** Quits: pah (~pah@user/pah) (Ping timeout: 260 seconds)
[14:58:47] *** Joins: pah_ (~pah@host-79-27-65-19.retail.telecomitalia.it)
[15:00:04] *** gggpkm_ is now known as gggpkm
[15:04:05] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[15:06:58] *** Quits: manic_laughter (~manic_lau@2409:4072:1f:8b9d:a2af:296a:bdd8:827c) (Quit: Leaving)
[15:09:39] *** Quits: manuels (~manuel@80.211.205.88) (Remote host closed the connection)
[15:10:01] *** Joins: manuels (~manuel@80.211.205.88)
[15:10:03] *** Quits: manuels (~manuel@80.211.205.88) (Read error: Connection reset by peer)
[15:11:53] *** Joins: manuels (~manuel@80.211.205.88)
[15:16:57] *** Quits: manuels (~manuel@80.211.205.88) (Quit: The Lounge - https://thelounge.chat)
[15:28:20] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:55df:fbfa:f55f:9ac3)
[15:28:20] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:55df:fbfa:f55f:9ac3) (Changing host)
[15:28:20] *** Joins: skapata (~Skapata@user/skapata)
[15:30:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[15:36:59] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[15:46:27] *** Joins: Leone (~Leo@216.154.21.17)
[15:46:27] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[15:46:38] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[15:49:30] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[15:50:47] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[15:51:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[15:54:58] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[15:55:20] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[15:56:04] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:01:12] *** Joins: manuels (~manuel@80.211.205.88)
[16:02:00] *** Quits: manuels (~manuel@80.211.205.88) (Client Quit)
[16:02:44] *** Joins: manuels (~manuel@80.211.205.88)
[16:02:50] <rpav> class C { inline void a() {}, inline void b() {}, ... }; // ;)
[16:02:58] <rpav> -,
[16:03:15] <Haohmaru> fascinating
[16:03:42] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[16:03:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:03:58] <rpav> "An inline member function may have more than one definition in a program" .. fewer characters _and_ more on point!
[16:04:12] <LordKalma> "as long as they are the same" ;)
[16:04:23] <rpav> sshhh ;)
[16:05:01] *** Joins: andreasbuhr (~quassel@p549db086.dip0.t-ipconnect.de)
[16:05:08] <rpav> "An inline member function's definition may appear more than once in a program" .. slightly longer but covers ODR?
[16:05:46] <LordKalma> yeah, I like that one better
[16:05:46] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 265 seconds)
[16:06:15] <rpav> and you could say "repeatedly" instead of "more than once in a program" and save but
[16:06:20] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[16:06:58] *** Joins: lumbermb (~lumbermb@191.114.121.99)
[16:07:51] <LordKalma> do pure abstract classes aka interfaces, need a declspec(export)?
[16:08:15] *** Joins: whup_dup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:10:19] *** Joins: manjaro-user (~manjaro-u@199.119.235.250)
[16:10:30] *** Quits: manjaro-user (~manjaro-u@199.119.235.250) (Client Quit)
[16:11:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[16:11:23] *** whup_dup is now known as whupdup
[16:12:30] *** Joins: dld (~davidlowr@2620:6e:6000:2900:5db6:6f5a:3b6e:25f9)
[16:12:42] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:15:18] <rpav> sounds like one for google
[16:16:10] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:16:52] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:17:06] <Haohmaru> yeah, google will deffinately show you a few abstract ads
[16:17:09] <rpav> i'm under the impression that declspec is entirely for making functions that will be called available in a DLL, and for a pure-abstract class that seems unnecessary, but .. windows
[16:17:47] <rpav> Haohmaru: it can try
[16:17:47] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:19:08] <rpav> although i'm not against _ads_ .. just the horrible incarnation that you find on the internet that tend to act like small irrelevant children constantly screaming "me! me! look at me!"
[16:20:07] <Haohmaru> how about the in-your-face head collisions
[16:20:13] <Haohmaru> like on pootube videos
[16:20:21] <rpav> not sure what you mean
[16:20:33] <Haohmaru> watched youtube recently?
[16:21:55] <rpav> "content creators" aka "self-motivated advertisement slaves" can be ok in the same vein that old video game magazines are ok .. reasonably entertaining and informative
[16:21:58] <rpav> yeah
[16:22:02] <rpav> my adblockers work for that too
[16:22:21] <rpav> like i haven't seen an interstitial in .. i don't remember
[16:22:39] <Haohmaru> you cheater
[16:22:41] <rpav> they pop up on twitch but i just switch tabs anyway
[16:23:16] <lumbermb> ...wait there are ads in youtube videos?
[16:23:24] <lumbermb> I thought that had died in... like, 2013
[16:23:24] <rpav> i know right
[16:23:44] <LordKalma> uBlockPlus ftw
[16:23:45] <rpav> about when you installed ublock origin or whatnot? ;)
[16:23:47] <Haohmaru> how about you turn off your cheats and have a look at the real sh*t
[16:23:53] <LordKalma> origin* that
[16:23:53] <lumbermb> rpav, good point :p
[16:24:12] <rpav> Haohmaru: nah
[16:24:19] <Haohmaru> do it!
[16:24:34] *** Joins: reumeth (~reumeth@user/reumeth)
[16:24:36] <rpav> https://play.google.com/store/apps/details?id=com.kiwibrowser.browser&hl=en_US&gl=US <- if you use android and want a browser that can also run ublock
[16:24:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[16:25:00] <rpav> (want a chrome-based one that is)
[16:25:03] <LordKalma> I use firefox on android hahaha
[16:25:14] <lumbermb> fennec ftw
[16:25:14] <Haohmaru> i hate google, why would i be using their OS
[16:25:23] <rpav> i gave up on that again at some point when the new version failed to support extensions
[16:26:44] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:27:30] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:27:40] <rpav> (my problem with firefox (or forks) is mostly that its performance is crap)
[16:27:41] <PJBoy> I used to use kiwi
[16:28:02] <PJBoy> but it ended up being way slower than chrome
[16:28:07] <PJBoy> even with adblock
[16:28:11] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:28:25] <rpav> ;/
[16:28:45] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:28:48] <PJBoy> firefox is good
[16:28:58] <PJBoy> but my main browser is vivaldi now
[16:29:40] <PJBoy> which comes builtin with a dark mode thing
[16:29:44] <rpav> i don't trust the closed ones .. i don't even trust most of the forks
[16:29:45] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 260 seconds)
[16:30:09] <PJBoy> but the android permission system is so clear and secure
[16:30:25] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:30:25] <rpav> like not because they're scams (e.g. Brave) or malicious, just probable incompetence when it comes to keeping up on vulnerabilities/patches
[16:30:55] <rpav> PJBoy: yeah, [X] You agree we can do anything and see everything you own and sell all your data / [ ] Uninstall app
[16:31:06] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:31:08] <PJBoy> I thought you were a linux user
[16:31:15] <PJBoy> you guys love out of date software
[16:31:43] <rpav> i use arch 🕶
[16:32:18] <PJBoy> damn it
[16:32:39] <PJBoy> but the new android permissions are good
[16:32:49] <PJBoy> where you need to enable permissions on demand
[16:33:09] <rpav> that's ok and it's cute how it removes them on idle, but .. it mostly needs more fine-grained permissions
[16:33:22] <PJBoy> yes
[16:33:27] <Haohmaru> it needs less google
[16:33:27] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:33:29] <PJBoy> they lump so much stuff together, it sucks
[16:33:55] <rpav> and a lot of the stuff you can't get at, and apps can see a lot of shit, but i think XPrivacyLua can do a lot of that if you're rooted
[16:34:10] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:34:15] *** Joins: luizfrds (~Luiz@152.250.243.147)
[16:34:32] <rpav> (i haven't really explored it though)
[16:34:39] <lumbermb> all that is one reason why I use firefox/fennec on android. I get extensions and I don't need to use the absolutest newest commit
[16:35:07] <lumbermb> it's known that in big projects like firefox etc, the people who use the latest versions (nighties etc) are basically unpaid betaers
[16:35:39] <rpav> yeah but the stuff that falls behind on updates falls behind on security ;/
[16:36:24] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:36:24] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:37:06] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:39:25] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:40:11] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:42:34] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:43:19] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:43:56] *** Joins: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8)
[16:43:57] <lumbermb> rpav, security is a process, not an absolute. The newest, bestest most securest software is useless if the user can't or won't use it (because it eg.: no longer supports an extension that is important for the workflow)
[16:45:17] <rpav> "security is a process" is not an excuse and it doesn't make using outdated/unpatched software more secure
[16:45:18] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[16:45:35] <lumbermb> people who push the updates forget there's several other security measures that can help using an old version (ideally no more than one major behind). AV, firewall, extensions themselves (UBO)
[16:45:42] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:45:58] <rpav> though perhaps consider "security is a process, new software is useless if users won't use it, therefore i'm fine with older software"
[16:46:21] *** Joins: meator (~meator@user/meator)
[16:46:24] <lumbermb> that's what I said
[16:46:28] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:46:44] <rpav> yeah .. read it until you see the irony and/or self-contradiction there
[16:46:52] <lumbermb> but ideally that "older software" shouldn't be too old. It's def not an excuse to use Firefox 35 (as if that's gonna load anything nowadays)
[16:47:21] <rpav> (also "new software is useless if users won't use it" is not really true; the software is perfectly _useful_, it doesn't become _less_ useful or _less_ secure because it's unused)
[16:47:46] <lumbermb> there's no self-contradiction. If I need an extension for my work and FF 98 supports it but FF 99 doesn't, I *have* to use FF 98
[16:47:59] <rpav> missing the point
[16:48:25] <rpav> also not really a user issue in the first place; it's an upstream issue
[16:48:50] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:49:35] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:52:07] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:52:53] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:55:18] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Read error: Connection reset by peer)
[16:56:05] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[16:57:56] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[16:58:51] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:59:00] <Haohmaru> !fact
[16:59:01] <nolyc> Haohmaru: An array satisfies some of the requirements of a sequence container.
[17:00:59] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Ping timeout: 264 seconds)
[17:06:50] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:07:13] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[17:12:43] *** Joins: Inst_ (~Inst@2601:6c4:4080:3f80:e9cf:d82f:5daa:fcc1)
[17:12:43] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:12:51] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:16:04] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) ()
[17:17:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:709e:32b8:8140:3ed0) (Ping timeout: 264 seconds)
[17:18:40] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:18:45] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[17:18:53] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:24:00] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[17:24:00] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:26:53] *** Joins: pulse (~pulse@user/pulse)
[17:32:25] *** Joins: gggpkm_ (~gggpkm@114.245.104.31)
[17:32:55] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:33:31] *** Quits: gggpkm_ (~gggpkm@114.245.104.31) (Remote host closed the connection)
[17:36:15] *** Quits: gggpkm (~gggpkm@60.10.23.170) (Ping timeout: 260 seconds)
[17:36:55] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:37:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:37:06] *** ChanServ sets mode: +v npaperbot
[17:38:24] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[17:38:25] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[17:38:48] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[17:39:39] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Read error: Connection reset by peer)
[17:46:45] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[17:46:58] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[17:59:32] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:03:42] <rpav> so many std things only taking const string& >:(
[18:06:25] *** Quits: paule32 (~paule32@user/paule32) (Read error: Connection reset by peer)
[18:06:59] <TinoDidriksen> Pretty sure there are proposals to add string_view overloads, or change them to string_view.
[18:08:30] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:09:50] <rpav> it would be excellent .. really should have been done more in 20 ;/
[18:11:54] <TinoDidriksen> npaperbot, search string_view library
[18:11:55] <npaperbot> P2302R0: [Library Evolution] Prefer std::ranges::contains over std::basic_string_view::contains <https://wg21.link/p2302r0> (by Christopher Di Bella) (2021-02-11) (Related: https://wg21.link/p2302r0/github)
[18:11:55] <npaperbot> Also: P2251R1, P2166R1, P2166R0, P2007R0, P1989R2, P1989R1, P1989R0, P1402R0, P1391R4, P1391R3, P1391R2, P1391R1, P1391R0, P1043R0, P0903R2, P0903R1, P0903R0, P0555R0, P0540R1, P0540R0, P0506R2, P0506R1, P0506R0, P0403R1, ... (37 in total)
[18:12:10] <TinoDidriksen> Ah, a bit too many on that search...
[18:15:47] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:17:27] <oj> If I want to provide a c foreign function interface in my api, how safe is it to define member functions #ifdef __cplusplus? e.g. like this: https://bpa.st/BW4Q
[18:17:57] <oj> I've tested it and it compiles, but is it well-behaved?
[18:18:28] *** Quits: mitch0 (~mitch@84-236-16-46.pool.digikabel.hu) (Quit: leaving)
[18:18:45] *** Joins: mitch0 (~mitch@84-236-16-46.pool.digikabel.hu)
[18:18:53] <oj> and if I link a C-program that includes the header, is the struct itself guaranteed to have the same layout as the C++ version with member functions?
[18:19:04] <ville> oj: probably want to pass a pointer-to rather than copy for the non-member functions
[18:19:28] <oj> maybe, but I would be allocating the member pointer
[18:20:01] <ville> "void free_Thing(Thing t);" you make a copy of the object there
[18:20:03] <oj> oh right, if I call new on the constructor, sure
[18:20:05] <rpav> oj: don't do that heh
[18:20:23] <oj> sure, but in this case I just copy a pointer
[18:20:35] <LordKalma> the best way if probably to not do this and instead have a header for C
[18:20:36] <rpav> _maybe_ define a separate C .h header that mimics structs that are standard layout, but you can write extern "C" functions that are C++
[18:20:39] <LordKalma> where you just declare the struct
[18:20:42] <rpav> ^
[18:20:54] <oj> so I define the struct twice?
[18:20:55] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[18:20:57] <rpav> yeah
[18:21:09] <LordKalma> typedef struct Thing
[18:21:12] <oj> I was thinking about that too, neither solution seems perfect
[18:21:13] <LordKalma> no, don't define, declare
[18:21:17] <LordKalma> and just use pointers
[18:21:28] <oj> right
[18:21:36] <rpav> but then have a C++ function `extern "C" int foo_mymethod(Foo* f, ...) { return f->mymethod(...); }` (not in the header of course
[18:21:36] <rpav> )
[18:21:38] <oj> what if I want to access the struct though
[18:21:59] <oj> if I don't want an opaque pointer-style interface
[18:22:02] <rpav> have a C header with the C struct definition and a purely C function prototype
[18:22:18] <LordKalma> rpav, that's probably not ODR compliant
[18:22:27] <rpav> LordKalma: ODR never comes into play, because this never touches C++
[18:22:38] <LordKalma> fair
[18:22:50] <oj> well, the free functions would be written in C++
[18:22:56] <rpav> it's purely for your FFI stuff .. though if your FFI isn't smart enough to parse .h, then you don't even need that
[18:22:57] <LordKalma> and the layout would be the same, yeah
[18:23:06] <LordKalma> oj, it doesn't matter what your build code is
[18:23:14] <LordKalma> as long as the layout is the same, C will eat it and it'll work
[18:23:32] <oj> yeah, I was mostly worried about if the layout can get messed up in any way
[18:23:38] <LordKalma> I've used typdef float[2] to feed code that I know for a fact was built with float _Complex on C
[18:23:58] <rpav> i'm not sure what C guarantees you there or not
[18:24:38] <LordKalma> you can always assert for standard layout in the C++ version
[18:24:49] <oj> LordKalma: good point
[18:25:19] <oj> ok, thanks, I feel more certain about this now
[18:25:30] <LordKalma> C is a relaxed language
[18:25:33] <LordKalma> you can fuck all with it
[18:25:44] <rpav> it's gotten a bit more uptight recently apparently, but
[18:29:03] <rpav> i think a better language would do exactly as you say, and give you hints about what you _could_ explicitly specify to allow it to optimize
[18:29:12] <rpav> or at least, a better system for optimization
[18:29:53] <rpav> (other languages do, but i wouldn't qualify such as definitively "better")
[18:30:04] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[18:32:57] *** Joins: ShiftyLogic (~shiftylog@104.200.132.10)
[18:48:04] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:51:30] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[18:59:38] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:02:43] *** Quits: ShiftyLogic (~shiftylog@104.200.132.10) ()
[19:04:17] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:04:17] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:04:28] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[19:07:09] *** Gustavo6046_ is now known as Gustavo6046
[19:08:38] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[19:09:36] *** Joins: paulmcquad (~gamer@78.17.229.141)
[19:12:00] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:12:38] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:19:34] <ashafq> LordKalma: I just saw the most amazing thing in this YT video
[19:20:07] <ashafq> LordKalma: It's a tutorial about "graphics" using conio.h, graphics.h, dos.h... and IT WORKED on Windows 10
[19:20:54] <ashafq> LordKalma: I guess I should be more amazed that Turbo C works in 2020
[19:24:39] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[19:25:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[19:32:58] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:34:00] *** Joins: ShiftyLogic (~shiftylog@104.200.132.217)
[19:36:47] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[19:37:42] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:43:03] <pakcjo> Hi, noob question, about function-try-block in the constructor, the purpose of it is just to be able to log exception or throw another one if an exception occurs in the initialization list, right? but does the state of the class varies between having it and not? (possible memory leaks or resources?)
[19:45:58] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[19:46:12] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[19:51:22] <PJBoy> the ctor never finishes, so the dtor is never run
[19:51:22] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[19:51:30] <PJBoy> so there's some potential leakage like you say
[19:52:48] <pakcjo> PJBoy: thanks, but that's independet of function-try-block right?
[19:53:15] *** Joins: manjaro-user (~manjaro-u@199.119.235.250)
[19:54:00] <manjaro-user> What would you name an exception when you request a card, but its not there?
[19:54:03] <PJBoy> { try { S s; } catch (...) {} } using tracked::B; struct S { B* b; S() : b(new B) { throw 0; } ~S() { BARK; } }; // e.g.
[19:54:04] <geordi> new(B) B0* leaked: B0. Aborted
[19:54:12] <PJBoy> yeah the function-try can't save the ctor
[19:54:31] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 252 seconds)
[19:54:34] <PJBoy> all it can do is log or whatever, like you said
[19:55:31] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[19:55:33] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:55:53] <pakcjo> PJBoy: thanks!, and well in the catch you could free whatever was allocated in the previous entries in the initilization list
[19:56:36] <PJBoy> true
[19:56:45] <pakcjo> thanks!
[19:56:59] <PJBoy> even better it to not have any class members that can leak
[19:57:05] <PJBoy> s/it/is/
[19:57:09] *** Joins: JeffH (~JeffH@85.sub-174-198-138.myvzw.com)
[19:57:21] <PJBoy> like that B* member in my snippet should be a unique_ptr<B>
[19:57:46] <pakcjo> true
[19:57:48] <PJBoy> { try { S s; } catch (...) {} } using tracked::B; struct S { unique_ptr<B> b; S() : b(new B) { throw 0; } ~S() { BARK; } };
[19:57:48] <geordi> new(B) B0* B0~ delete(B0)
[19:57:55] <PJBoy> no catch required
[19:58:20] *** Gustavo6046_ is now known as Gustavo6046
[19:58:57] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:00:14] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:01:05] <JeffH> If I want to do this “classAObjs = cassBObjs;” it looks like I have two options, create classA::operator=(const classB&) or classA(const classB&) which one is the “right” way?
[20:03:01] <PJBoy> those are in fact two different operations'
[20:03:03] *** Joins: chris64 (~chris@user/chris64)
[20:03:03] *** Quits: chris64 (~chris@user/chris64) (Client Quit)
[20:03:18] <PJBoy> operator= handles assignment, where the constructor handles initialisation
[20:03:34] <PJBoy> only objects that have been initialised can be assigned
[20:04:00] <PJBoy> so you actually only have one option
[20:05:00] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 260 seconds)
[20:05:02] <PJBoy> `ClassA obj = some_other_obj;` calls the constructor (to initialise obj)
[20:05:17] <PJBoy> `obj = some_other_obj;` calls the assignment operator
[20:05:17] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:05:38] *** Joins: Terminus (~null@user/terminus)
[20:06:15] <JeffH> In my case both are already initialized. Without operator= defined the code compiles/runs fine using the copy constructor
[20:07:04] <PJBoy> classes do come with a default copy constructor
[20:07:18] <PJBoy> if you define an operator= though, the default copy constructor is not generated
[20:08:02] <PJBoy> the logic being that you probably had to do something special in that operator=, so you probably need to do something special in the ctor too
[20:08:47] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:09:03] <JeffH> Since both of the objects are initialized it sounds like I should delete the constructor I created and create the operator=?
[20:09:37] <PJBoy> seems a bit near sighted
[20:09:46] <PJBoy> you're saying you would never want that ctor?
[20:10:04] <Alipha> pakcjo: as PJBoy said, use classes like unique_ptr which will manage resources for you. If you're making your own class to manage a resource, then make sure the class manages A SINGLE resource. Otherwise, it ends up being hell to be checking two or more resources to see if they need to be released, as one might have been allocated but the other hasn't, etc
[20:10:41] <JeffH> Are you saying just create the operator and the compiler will use that?
[20:10:54] <pakcjo> Thanks Alipha, yes, fully agree
[20:10:54] <PJBoy> nah
[20:11:06] <PJBoy> my suggestion to you is to make both the ctor and operator=
[20:11:28] <PJBoy> it's extremely rare to get class that only does one or the other
[20:12:20] <PJBoy> although actually
[20:12:22] * PJBoy rereads
[20:12:44] <PJBoy> oh it's uh
[20:12:49] <PJBoy> not the copy operations you're doing
[20:12:55] <PJBoy> in that case
[20:13:11] <PJBoy> I would personally only write the ctor
[20:13:38] <PJBoy> but it doesn't matter as much as when I thought we were talking about the copy ctor and copy assignment
[20:14:16] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:15:21] <PJBoy> I should go back to telling everyone to make testcases :D
[20:15:46] <Alipha> If you write only a constructor, then `A_obj = B_obj;` effectively becomes `A_obj = ClassA(B_obj);` because the compiler will use the constructor to convert ClassB to ClassA. Which will then call ClassA's copy assignment operator
[20:16:13] <PJBoy> ideally its move assignment
[20:16:16] <JeffH> Is there a practical difference between operator=() and the constructor?
[20:17:05] <PJBoy> well if you only define operator= and not the ctor, then `ClassA objA = objB;` doesn't work
[20:17:18] <PJBoy> you'd have to write `Class objA; objA = objB;`
[20:17:23] <PJBoy> which is just silly
[20:18:09] <PJBoy> with only the ctor, you can write `objA = ClassA(objB);`
[20:18:19] <PJBoy> and that's less of a drawback
[20:18:40] <Alipha> ... With only the constructor, you can write `objA = objB;`
[20:18:49] <PJBoy> if you allow the ctor to be non-explicit, then you can even write `objA = objB;`, where the compiler will add the cast in for you
[20:19:28] <JeffH> Ah. Got it. So the constructor approach is more versatile.
[20:19:28] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[20:19:45] <PJBoy> yeah it's a tidbit more general
[20:20:29] <JeffH> Thanks. My whole career has been c programming so I’m trying to learn the subtleties of c++
[20:20:49] <PJBoy> usually operator= can't find a better to make a ClassA out of a ClassB than what the ctor + move assignment would do
[20:21:02] <PJBoy> so I'd argue it's a maintenance burden
[20:21:36] *** Joins: ravan (~ravan@user/ravan)
[20:21:40] <PJBoy> but then again, the standard library generally likes to match up their ctors and assignment operators
[20:24:39] <Alipha> JeffH: you should probably get a book, as C and C++ are very different languages
[20:27:06] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:27:17] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[20:28:18] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[20:28:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[20:36:37] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[20:36:47] <JeffH> Alipha: is there a book you’d recommend?
[20:37:44] *** Quits: letto (~letto@86.120.85.133) (Quit: Konversation terminated!)
[20:38:40] <Alipha> !give JeffH books
[20:38:41] <nolyc> JeffH: A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[20:38:54] <JeffH> Thanks
[20:39:44] *** Joins: letto (~letto@86.120.85.133)
[20:39:58] <Alipha> JeffH: I'd recommend one of the beginner books, even though you have experience with c, and just skim over the stuff you already know. The issue with non-beginner books is that the author has to make assumptions on what you already know, which is never accurate
[20:40:56] <comrad> To me C++ is a unique programming language with good C integration, like Go also has C integration and Java via JNI. But fundamentally different languages
[20:41:57] *** Quits: JeffH (~JeffH@85.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[20:42:11] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:44:37] *** Joins: magla (~gelignite@55d4ee8d.access.ecotel.net)
[20:48:02] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 265 seconds)
[20:51:02] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:6d0a:7e74:2713:4a40)
[20:51:29] *** Joins: chris64 (~chris@user/chris64)
[20:55:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[20:59:59] <NyB> hi! does anyone have any pointers on the subject of std::pow vs x*x*... in terms of precision for integer exponents? Some of my own tests suggest that std::pow can be more precise, but I've not found any relevant posts yet - everybody seems to be comparing performance.
[21:00:12] *** Joins: JeffH (~JeffH@85.sub-174-198-138.myvzw.com)
[21:00:12] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:03:50] *** Quits: sysctl (~sysctl@88.215.77.255) (Ping timeout: 260 seconds)
[21:03:54] <cq-work> Little cringey that none of those posts on SO seem to look into *why* -ffast-math causes faster times or why x*x*x is faster.
[21:04:16] *** Joins: sysctl (~sysctl@88.215.77.255)
[21:04:17] *** Quits: JeffH (~JeffH@85.sub-174-198-138.myvzw.com) (Remote host closed the connection)
[21:04:32] <cq-work> If they end up with different results, then they're not equivalent solutions, so a benchmark may not even matter.
[21:05:22] <NyB> yup... I would not use -ffast-math without some pretty extensive testing, which I'm not about to do since I doubt I know enough to get sufficient coverage...
[21:09:23] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:10:36] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[21:18:50] <rpav> how many general optimizations haven't already been folded into -O2 or -O3
[21:18:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:81f5:7671:f4b1:847d) (Quit: Quit)
[21:19:13] <rpav> like is -ffast-math even that useful anymore
[21:19:36] *** Joins: RoKenn (~RoKenn@2001:a61:3505:d101:d17f:2eee:ee8e:9f1c)
[21:19:36] *** Quits: RoKenn (~RoKenn@2001:a61:3505:d101:d17f:2eee:ee8e:9f1c) (Changing host)
[21:19:36] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:20:10] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 260 seconds)
[21:21:33] <cq-work> I doubt fast-math is included with those, it does change results of floating point math.
[21:22:25] <cq-work> Usually in a way that breaks the IEEE standard.
[21:22:25] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:30:55] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:36:41] *** Quits: manjaro-user (~manjaro-u@199.119.235.250) (Ping timeout: 258 seconds)
[21:36:41] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:36:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:36:56] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:37:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:37:04] *** ChanServ sets mode: +v npaperbot
[21:37:14] <rpav> hm
[21:38:51] <paulmcquad> I'm stuck on this problem . Please Help. -> https://wandbox.org/permlink/uQREZH9S63oKH2qw
[21:39:30] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55) (Ping timeout: 260 seconds)
[21:39:33] <paulmcquad> The error is -> error: passing 'const IPrintable' as 'this' argument discards qualifiers
[21:39:57] <cq-work> You're passing a const reference to a function that requires a mutable reference.
[21:40:01] <rpav> p.s. `void foo() override;` is more useful than `void foo(); // override`
[21:40:37] <cq-work> You can either get print_me to work with a const reference (by declaring the member function const) or by taking a mutable reference instead.
[21:40:44] <rpav> what you probably really want is `virtual void print_me(ostream&) const;` in the base
[21:41:29] <rpav> (there's little good reason to have printers non-const .. also make sure to update the overrides; having an actual `override` will help catch them)
[21:42:00] *** Quits: andreasbuhr (~quassel@p549db086.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:43:53] *** Joins: spaceangel (~spaceange@ip-89-176-181-220.net.upcbroadband.cz)
[21:44:25] *** Joins: artok (~azo@mobile-access-bcee2b-18.dhcp.inet.fi)
[21:46:23] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:47:20] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[21:48:59] *** Joins: meator (~meator@user/meator)
[21:48:59] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[21:50:04] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[21:50:10] <c4017w> Anyone having issues with wandbox? It won't load on Chrome, Firefox, or Edge. Works fine on Brave
[21:51:27] <vinleod> seems to work in safari
[21:52:01] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (tungsten.libera.chat (Nickname regained by services)))
[21:52:01] *** vinleod is now known as vdamewood
[21:52:17] <paulmcquad> rpav: I can't figure out what to do. I tried what u said. I'm getting linker errors now.
[21:53:55] <rpav> paulmcquad: url?
[21:54:15] <paulmcquad> rpav: -> https://wandbox.org/permlink/x8bnABH8x20zBG3E
[21:54:31] <rpav> c4017w: yeah, i have issues with wandbox, the best fix afaict is to go to https://godbolt.org/
[21:55:14] <c4017w> rpav, Can you actually run the code with godbolt though?
[21:55:24] <rpav> paulmcquad: "also make sure to update the overrides" "p.s. `void foo() override;` is more useful than `void foo(); // override`"
[21:55:38] <cq-work> c4017w: yes
[21:55:43] <rpav> c4017w: click the gear and check "execute code"
[21:55:49] <cq-work> Although, not with all compilers. MSVC for example can't run.
[21:55:58] <rpav> then choose guillotine, firing squad, etc
[21:56:17] *** Quits: nojhan (uid443807@lymington.irccloud.com) (Quit: Connection closed for inactivity)
[21:56:27] <rpav> oh yeah anything that's not like x86_64 won't run
[21:56:33] <rpav> on linux
[21:56:53] <rpav> but i mean that's no worse than the other and you can test varying clang/gcc versions .. not sure you can use libc++
[21:56:59] <c4017w> ah ok. didn't realize that
[21:57:29] <cq-work> It's probably off by default since most people are there for assembly output and running is expensive.
[21:57:31] <rpav> it's not a super new feature, but wasn't there for awhile, and the site doesn't really advertise its changes too hard
[21:57:34] <cq-work> That site runs on donations after all.
[21:57:59] <paulmcquad> rpav: -> https://wandbox.org/permlink/YaesKJi99hMd6BDC
[21:58:15] <rpav> c4017w: probably the more relevant recent change to godbolt that makes it a win over wandbox is it supports multiple files _finally_
[21:58:29] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[21:58:48] <rpav> paulmcquad: did you read the ensuing errors
[22:00:51] <rpav> paulmcquad: hint, consider whether `void foo() override;` is a valid override for `virtual void foo() const;`
[22:03:57] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[22:03:57] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:08:44] <paulmcquad> rpav: I Don't know. I'm just learning as i go.
[22:09:50] <paulmcquad> I'm reading a book called "C++ Without Fear A Beginners Guide That Makes You Feel Smart by Brian Overland"
[22:10:07] <paulmcquad> I'm on Ch 16 pg 406.
[22:10:09] <cq-work> paulmcquad, when override gives such a warning, it means that it can't find a function that matches for it to override.
[22:10:16] <cq-work> So check signatures.
[22:10:56] <rpav> paulmcquad: ok so `struct S { void foo() const; };` specifies that `foo()` can be called on a `const S` .. you're familiar with const yet?
[22:11:03] <cq-work> That's actually the primary reason to *use* override, is because it catches these issues.
[22:11:09] <rpav> cq-work: exactly
[22:11:27] <rpav> _but_, if you're not familiar with const and const member functions, this is probably like ?? "ok so what"
[22:11:46] <rpav> `struct S { void foo(); void foo() const; /* different functions */ };`
[22:12:16] <rpav> and likewise if you try to override one or the other (if we made them virtual)
[22:12:31] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:17:02] *** Joins: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de)
[22:21:46] *** Quits: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[22:21:57] *** Joins: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de)
[22:22:15] <paulmcquad> rpav: Thanks 4 ur help.
[22:22:58] <rpav> np
[22:32:16] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[22:33:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[22:33:04] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[22:41:12] *** Joins: jkaye (~jkaye@2601:281:8300:7530:8275:c2bd:871b:678c)
[22:41:37] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[22:57:40] *** Quits: proller (~p@2a02:6b8:0:408:eef4:bbff:fe62:69c8) (Ping timeout: 260 seconds)
[23:01:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[23:02:06] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[23:02:27] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[23:04:45] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[23:04:56] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[23:10:55] <rond_> https://godbolt.org/z/5MWaT3o3r    I've got 2 questions.   1) godbolt doesn't compile it...?   2) which one - foo1() or foo2()  - is preferred?
[23:11:44] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[23:12:26] *** Joins: great_taste (~great_tas@190.32.235.20)
[23:12:48] <rpav> you don't have a definition for VeryHeavyStruct() and a lot of unnecessary = default
[23:13:35] <rpav> foo2() is an error afaik
[23:13:38] <rond_> =default; is to paint a picture; obviously it's not the real case
[23:14:05] <rpav> i mean, double-free, UB
[23:14:33] <rpav> and, don't do either one, unless you have a really good reason for passing ownership
[23:15:08] <rpav> void bar(VeryHeavyStruct&); // modify, const if not
[23:15:50] <rond_> bar should return a new VeryHeaveyStruct - why do you suggest `void`?
[23:16:55] <rond_> I don't see double-free in foo2...?
[23:19:07] <rpav> err maybe not, i'm misreading what you're doing with the vhs.get()
[23:19:46] <rpav> rond_: why would you return the value you're passing only to reassign it to the same thing?
[23:20:09] <rpav> the entire thing smacks of java style design or something
[23:20:47] <rond_> what?
[23:21:15] <jkaye> This feels like an XY Problem to me
[23:21:19] <rpav> and/or that
[23:21:22] <jkaye> What's your actual goal rond_?
[23:21:29] <rond_> with each iteration I want to work on a different VeryHeavyObject, where bar() creates a new one based on the old one.
[23:21:38] <rpav> why can't you reuse the old one?
[23:21:42] <rond_> https://godbolt.org/z/3nMaqTaqh   is the third version better?
[23:21:51] <rond_> rpav it doesn't make sense anymore
[23:22:12] <rond_> it gets outdated an irrelevant
[23:22:19] <rpav> none of this really makes sense since it lacks context; there's no good way to say "yes, generally always do this!" especially for something that would generally be poorly designed
[23:22:53] <rond_> I don't understand what's lacking here
[23:22:54] <rpav> like if you have a bunch of heavy structs to manage, you don't want to make new ones if you can help it
[23:23:04] <rpav> context and an explanation of the actual problem, not this hypothetical
[23:23:49] <rpav> because _lacking_ context, doing any of that is basically terrible, and there's not really a good way to say "yes, this terrible thing over that terrible thing"
[23:23:49] <rond_> I think the question is clear: it's the question about how to pass/return objects;
[23:24:02] <rond_> in a given scenario
[23:24:14] <rpav> in a given scenario i would never write code that looks like or behaves like this
[23:24:35] <rond_> show me a better way then...?
[23:25:10] <rpav> lacking context, there's not really any way to say
[23:25:21] <rpav> thus jkaye's question, what's the _actual problem_
[23:27:38] <rond_> foo is in fact an EvenHeavierStruct constructor and I need to run an iterative algorithm on a sequence of VeryHeavyStructs in order to be able to compute the final value. bar() gets the old VeryHeavyStruct, does a bunch of computations based on that and DISCARDS the VeryHeavyStruct and returns the new one.
[23:27:46] <rond_> I'm not sure how it helps though...?
[23:28:16] <jkaye> So, the essence of an XY Problem is that you're focused on your attempted solution and not your actual problem
[23:28:26] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f56e:630b:ae2e:6e55)
[23:28:30] <jkaye> There is nothing requiring your solution to have the form that you've presented
[23:28:34] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[23:28:41] <jkaye> So it's difficult to give advice without understanding what we're talking about
[23:29:06] <rond_> I don't see how my approach is flawed (obviously)
[23:29:08] <jkaye> More detail here: https://xyproblem.info/
[23:29:27] <jkaye> I'm not saying it's flawed, I'm saying I don't understand the _problem_ well enough to comment on the proposed solutions
[23:29:35] <rpav> it's impossible to discuss the solution lacking details of the actual problem
[23:29:43] <Alipha> rond_: "where bar() creates a new one based on the old one." -- what do you mean "based on"? are you going to stealing/reusing resources from vhs? or is "based on" purley from an "observational" standpoint?
[23:29:44] <rpav> yes
[23:30:49] <Alipha> *purely
[23:31:06] <rond_> Alipha observational, but the old one will never be used after being passed to bar(), hence reassignment
[23:31:36] <Alipha> rond_: regardless, the use of pointers and unique_ptr saves you nothing.
[23:31:51] <Alipha> rond_: then VeryHeavyStruct bar3(const VeryHeavyStruct& vhs);
[23:32:28] <rond_> it's even lighter then 1st version with (VeryHeavyStruct&&), right? Because I don't need to create a new object at all...?
[23:32:29] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:32:43] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:32:54] <rond_> and thanks to RVO my VeryHeavyStruct will be returned nicely...?
[23:33:22] <Alipha> rond_: where is bar1 creating a new object, other than newVhs, which bar3 is also creating?
[23:34:09] <rond_> it's not
[23:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[23:34:53] <Alipha> rond_: by "VeryHeavyStruct", do you mean that sizeof(VeryHeavyStruct) is large, and so moving is expensive? (perhaps equally as expensive as copying?)
[23:35:03] <Alipha> bar1 and bar3 have the same performance
[23:35:31] <rond_> for now let's say that moving is considerably cheaper than copying
[23:35:52] <rond_> well, no
[23:35:54] <rond_> in fact
[23:35:58] <rond_> it's a bunch of huge vectors
[23:35:59] *** Joins: evocatus (~evocatus@84.51.113.13)
[23:36:18] <rond_> so, well, moving is cheap but copying is expensive
[23:38:40] *** Quits: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[23:39:03] <rond_> Ohh, right. bar1 and bar3 are basically the same - the only difference is that the argument passed to bar1 (the one with &&) should never be used after the call (which happens to be the case, but...)
[23:39:04] <rpav> moving is just copying less; not copying anything can be a very good solution
[23:39:28] <rond_> I think I got it
[23:39:35] <rond_> rpav there is no moving in this snippet at all
[23:39:36] <Alipha> rond_: so, with `vhs = bar3(vhs);`, you will be constructing newVhs, then move constructing the temporary return value, and then calling operator=(VeryHeavyStruct&&). if NRVO happens (which isn't guaranteed), then the move construction may not happen. that is, with NRVO, newVhs is constructed and then the move operator= is called
[23:39:42] *** Joins: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de)
[23:40:30] <Alipha> rond_: and what i just said also applies to `vhs = bar1(std::move(vhs));`
[23:40:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:6d0a:7e74:2713:4a40) (Ping timeout: 260 seconds)
[23:41:17] <rond_> "then move constructing the temporary return value," - I don't get this part
[23:44:07] *** Joins: DepthDeluxe (~DepthDelu@2601:647:4700:d39:9569:26bf:ee64:8153)
[23:44:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[23:45:12] <Alipha> rond_: `return newVhs;` needs to move newVhs into foo3's scope. i.e., look at my changes to foo3: https://godbolt.org/z/3M86MWvsf
[23:45:32] *** Quits: DepthDeluxe (~DepthDelu@2601:647:4700:d39:9569:26bf:ee64:8153) (Client Quit)
[23:45:38] <rond_> "the move operator= is called" <- this happend in `foo`, due to assignment, right? (so after returning from bar)
[23:46:16] <Alipha> yes
[23:46:25] *** Quits: kd5678__ (~kd5678@p200300fe5f00de00e3831398c27d7a5b.dip0.t-ipconnect.de) (Remote host closed the connection)
[23:47:02] *** Joins: markong (~kvirc@213.146.188.203)
[23:47:09] <rond_> VeryHeavyStruct tmp(bar3(vhs));     is tmp created with (&&) (move) constructor?
[23:47:55] <Alipha> "then move constructing the temporary return value," is what NRVO avoids. instead of creating newVhs in bar3 and then move it into a temporary object inside foo3, instead, newVhs is created in foo3's scope. that is, bar3's newVhs and foo3's temporary object sare the same object
[23:48:12] * Alipha wonders if that explains anything or just confuses it more, heh
[23:50:05] <rond_> will we avoid any move constructing with NRVO?
[23:50:05] *** Quits: Kebianizao (~Kebianiza@188.127.161.90) (Read error: Connection reset by peer)
[23:50:28] <rond_> hmm, I don't thins ko
[23:50:32] <rond_> think so*
[23:50:54] <Alipha> yes, the move construction of the return value will be avoided
[23:51:28] <rond_> but move assignment will persist?
[23:51:33] <Alipha> yes
[23:52:24] <Alipha> without NRVO, we have: default construction of newVhs. move construction of the return value using newVhs. move assignment of return value to vhs.
[23:52:42] <Alipha> with NRVO, we have: default construction of newVhs. move assignment of newVhs to vhs.
[23:53:21] <rpav> i still want named return object :P
[23:53:51] <rpav> `auto foo() -> int r { r = 42; }`
[23:54:52] <rond_>  "move construction of the return value using newVhs" is it the default way of returning object from any function that returns object? to move construct it?
[23:55:37] <rond_> (and the reason is, correct me if I'm wrong, because newVhs is in bar's scope and we want an object in foo's scope, so there's no better way than to just use move constructor)
[23:56:57] <rond_> so would void bar(const VeryHeavyStruct& vhs, VeryHeavyStruct& newVhs);  be quicker?
[23:57:34] *** pah_ is now known as pa
[23:57:45] *** Quits: pa (~pah@host-79-27-65-19.retail.telecomitalia.it) (Changing host)
[23:57:45] *** Joins: pa (~pah@user/pah)
[23:58:06] <rond_> hmm, no, because assigning `newVhs = VeryHeavyStruct{}` inside bar() would result in a dangling reference, hmmm
[23:58:49] *** Joins: Kebianizao (~Kebianiza@188.127.161.90)
[23:59:20] <rond_> with pointer we would avoid unnecessary moves of VeryHeavyStruct, but would gain the necessity of dereferencing, right?   so, my question is: why did you say, Alipha, that we don't gain anything from introducing pointers?
[23:59:55] <Alipha> rond_: that's what return values are at the assembly level. if you're returning a struct, the assembly code that is generated is the equivalent of the caller passing in a pointer to where it wants the return object to be constructed at
