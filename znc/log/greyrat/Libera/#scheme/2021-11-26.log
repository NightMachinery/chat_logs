[00:01:36] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 245 seconds)
[00:30:09] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[00:40:24] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:48:02] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 240 seconds)
[00:52:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:57:06] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:d3fa:8b33:5cc3:1e1e)
[00:58:20] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[01:01:31] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[01:01:35] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[01:04:58] *** Joins: badkins (~badkins@136.56.92.199)
[01:10:06] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[01:13:04] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 256 seconds)
[01:24:14] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:33:33] *** Joins: seninha (~seninha@user/seninha)
[01:39:18] *** Joins: badkins (~badkins@136.56.92.199)
[01:42:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:42:53] *** Joins: seninha (~seninha@user/seninha)
[01:42:58] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[01:50:50] *** Joins: livoreno (~livoreno@user/notzmv)
[01:50:50] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[01:51:06] *** Joins: livoreno (~livoreno@user/notzmv)
[01:51:37] *** Joins: seninha (~seninha@user/seninha)
[02:01:03] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[02:02:23] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[02:08:06] *** Joins: mononote (~mononote@user/mononote)
[02:29:33] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[02:30:08] *** Joins: badkins (~badkins@136.56.92.199)
[02:38:03] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[02:53:48] *** Joins: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au)
[02:55:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 268 seconds)
[02:58:32] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[02:59:00] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:d3fa:8b33:5cc3:1e1e) (Ping timeout: 256 seconds)
[03:00:10] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[03:20:56] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 260 seconds)
[03:23:10] *** Joins: X-Scale` (~ARM@31.22.203.240)
[03:23:31] *** X-Scale` is now known as X-Scale
[03:28:38] *** Joins: s-liao (~s-liao@101.86.101.64)
[03:32:06] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[03:49:17] *** Joins: badkins (~badkins@136.56.92.199)
[03:54:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[04:00:30] *** Quits: sm2n (~sm2n@user/sm2n) (Ping timeout: 265 seconds)
[04:00:47] *** Joins: sm2n (~sm2n@user/sm2n)
[04:15:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[04:26:56] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:bf:e3eb:91c1:3d71)
[04:31:02] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:b451:65f7:f961:6c1a) (Ping timeout: 240 seconds)
[04:37:50] *** Joins: badkins (~badkins@136.56.92.199)
[04:42:37] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[04:42:53] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[04:43:22] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[05:06:10] *** Joins: s-liao (~s-liao@101.86.101.64)
[05:17:43] *** Joins: badkins (~badkins@136.56.92.199)
[05:19:14] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[05:22:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[05:31:33] *** Joins: skapata (~Skapata@user/skapata)
[05:36:44] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 260 seconds)
[05:45:44] *** Joins: johnjay (~pi@192.142.100.50)
[05:47:40] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[05:54:37] *** Joins: badkins (~badkins@136.56.92.199)
[05:58:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[06:00:38] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:07:10] *** Quits: daviid (~user@179.210.52.91) (Ping timeout: 256 seconds)
[06:09:01] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[06:18:17] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[06:19:27] *** Quits: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:19:32] *** Joins: robin (~robin@user/terpri)
[06:27:51] *** Joins: daviid (~user@177.79.125.61)
[06:30:30] *** Joins: badkins (~badkins@136.56.92.199)
[06:34:17] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[06:35:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[06:44:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[06:46:38] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[06:49:09] *** Joins: badkins (~badkins@136.56.92.199)
[06:49:39] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 268 seconds)
[06:55:21] *** Joins: guest (~user@c-73-77-216-3.hsd1.tx.comcast.net)
[06:55:26] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[06:56:04] *** Quits: guest (~user@c-73-77-216-3.hsd1.tx.comcast.net) (Remote host closed the connection)
[07:10:57] *** Quits: akarle (~akarle@user/akarle) (Remote host closed the connection)
[07:12:03] *** Joins: akarle (~akarle@user/akarle)
[07:14:19] *** Quits: ns12 (~ns12@user/ns12) (Quit: Ping timeout (120 seconds))
[07:14:41] *** Joins: ns12 (~ns12@user/ns12)
[07:27:35] *** Quits: ns12 (~ns12@user/ns12) (Quit: The Lounge - https://thelounge.chat)
[07:28:26] *** Joins: ns12 (~ns12@user/ns12)
[07:32:42] *** Quits: ns12 (~ns12@user/ns12) (Client Quit)
[07:33:43] *** Joins: ns12 (~ns12@user/ns12)
[07:34:31] *** Joins: badkins (~badkins@136.56.92.199)
[07:38:58] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[07:44:36] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[07:46:23] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[07:49:30] *** Joins: s-liao (~s-liao@101.86.101.64)
[07:50:46] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 245 seconds)
[08:03:39] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[08:03:52] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[08:09:52] *** Joins: s-liao (~s-liao@101.86.101.64)
[08:15:23] *** Quits: siiky (~siiky@2001:8a0:ff58:400:2548:4e50:2f92:e5cb) (Ping timeout: 264 seconds)
[08:17:02] *** Joins: siiky (~siiky@2001:8a0:ff7d:dd00:1f5d:a8bd:3bdc:60a8)
[08:18:01] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9)
[08:18:01] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:39a3:7ca3:e6e3:c6e9) (Changing host)
[08:18:01] *** Joins: skapata (~Skapata@user/skapata)
[08:28:50] *** Quits: daviid (~user@177.79.125.61) (Ping timeout: 256 seconds)
[08:31:44] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 260 seconds)
[08:32:39] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[08:34:27] *** Joins: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net)
[08:40:48] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[09:18:32] *** Quits: cchristiansen (~user@n122-106-221-66.sbr1.nsw.optusnet.com.au) (Remote host closed the connection)
[09:35:06] *** Joins: shawnw (~shawn_w@c-73-83-220-73.hsd1.wa.comcast.net)
[09:35:22] *** Joins: badkins (~badkins@136.56.92.199)
[09:40:10] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[09:43:02] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 240 seconds)
[09:45:12] *** Quits: m1dnight_ (~christoph@christophe.dev) (Quit: WeeChat 3.1)
[09:46:44] *** Joins: m1dnight (~christoph@christophe.dev)
[09:53:34] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[09:56:04] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[10:12:38] *** Joins: ManDay (~manday@user/manday)
[10:13:31] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[10:16:44] *** Joins: Doraemon (~NeoCron@p200300c4cf1c0a00df145b32079df496.dip0.t-ipconnect.de)
[10:19:18] *** Quits: NeoCron (~NeoCron@p200300c4cf1ab200146a93e8f94739c9.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[10:42:59] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[10:47:17] *** Joins: s-liao (~s-liao@101.86.101.64)
[10:48:26] *** Quits: Inline (~Inline@2a02:908:1252:7a80:6450:3e1f:fbe5:993b) (Quit: Leaving)
[11:03:30] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:05:27] *** Quits: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864) (Ping timeout: 250 seconds)
[11:09:43] *** Joins: s-liao (~s-liao@101.86.101.64)
[11:12:14] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[11:36:23] *** Joins: badkins (~badkins@136.56.92.199)
[11:36:48] <dpk> should Chez Scheme be forked? thoughts:
[11:37:12] <dpk> Dybvig and/or Cisco seems to have lost interest in it, to at least some extent
[11:37:33] <dpk> support for anything other than R6RS seems, in part because of that, unlikely
[11:38:59] <dpk> the Racket team have a fork with many improvements, which i think can still be built independently of Racket itself, but Dybvig is incorporating comparatively few of them. (i would suggest starting a general-purpose, non-Racket-focussed fork either based on Racket's version, or by incorporating a large number of their patches)
[11:40:35] <dpk> SRFI support is also so bad that part of me wonders if Dybvig has some kind of hostility to the SRFI process itself, and not just to R7RS (which has focussed on adopting SRFIs wherever reasonable, even in the small language). if there's a SRFI for something, you can guarantee Chez ignores that and does things its own way
[11:40:56] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[11:42:08] <dpk> but nonetheless it's still probably the best Scheme implementation out there, considering both speed and core language features
[11:43:32] <amazigh> (maybe presuming hostily is a self-fullfilling prohefecy)
[11:43:38] <dpk> (i'm aware Gambit may technically have the edge in benchmarks, but Gambit's core has some weaknesses like lack of hygienic macros and symbol GC. Gerbil has hygienic macros with its own implementation of syntax-case, but with bizarre strict phasing where you can't usually access the macro system at runtime, and no documentation, for like, anything)
[11:46:45] <sham1> Doesn't R6RS in general have some phasing stuff?
[11:48:34] *** Joins: civodul (~user@guix/contributor/civodul)
[11:50:07] <dpk> it does, but it appears to me (not an expert in R6RS nor in Gerbil, but a comparatively casual user of both) that in R6RS, phasing only applies ‘forwards’, as it were. you need to explicitly declare if you need to access things that would only be available in a future phase. so you get syntax-case etc at macro expand time and run time, but if you need your own run-time procedures at macro expand time, you need to declare that. but 
[11:50:07] <dpk> Gerbil’s works forwards and backwards, so all the identifiers related to syntax-case are available at macro expand time, but not at run time
[11:50:52] <sham1> Now that's odd
[11:51:31] <dpk> (also note one of Chez's improvements over R6RS: the 'meta' keyword, so you don't need to move things to another module just to be able to use them at compile time. i believe Racket has something similar with a slightly different name)
[11:52:17] <sham1> BTW, I was meaning to ask yesterday but I didn't for whatever reason. R7RS is different from R6RS in that regard, where an (import) will grab both syntax keywords and "normal" stuff from the relevant library, and both are available when expanding and when running?
[11:52:25] <sham1> Is that correct
[11:53:01] <dpk> R7RS small, so far, only has syntax-rules, where phasing doesn't apply, because you can't call arbitrary procedures during macro expansion
[11:53:36] <sham1> Hmm, that's a fair point. I wonder how Large would handle it if (when) syntax-case gets added
[11:53:50] <dpk> it's looking like R7RS Large will adopt syntax-case, where phasing like that becomes an issue, but the current ballot also doesn't have any questions about phasing
[11:53:56] *** Quits: s-liao (~s-liao@101.86.101.64) (Ping timeout: 256 seconds)
[11:54:07] <dpk> jcowan: assuming syntax-case passes, when/how will phasing be considered?
[11:55:13] <dpk> also, a question that occurred to me the other day: how does Common Lisp handle phasing? its macros can call arbitrary user-defined procedures too, no? or does it only become an issue because of hygiene?
[11:56:12] <sham1> Also I assume that the syntax-violation stuff in some form. 
[11:56:21] <sham1> Will be part of it
[11:56:38] <amazigh> CL does not have procedural macros?
[11:56:51] <sham1> defmacro
[11:56:58] <sham1> That's very procedural
[11:57:15] <dpk> i believe jcowan has said that if 'R6RS syntax-case' macros pass, we adopt the whole of the R6RS chapter on syntax-case
[11:57:39] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[11:57:42] <dpk> including syntax-violation, although it's less than clear to me how that will work in the absence of the complete R6RS condition system
[11:57:53] <sham1> Yeah, figures. So one would get syntax-violation for reporting, well, syntax violations. I just wonder how one would deal with the fact that it deals with the conditions yeah
[11:58:56] <dpk> (minor peeve: i wish syntax-error and syntax-violation had been named the other way around, as i think of -error names as being procedures)
[11:59:06] <dpk> (too late for that now though)
[11:59:09] <sham1> I mean, nothing stops us from adapting it like an object which satisfies both (error-object?) and (syntax-violation?)
[11:59:43] <amazigh> fwiw, several have tried to include R7RS-small features in Chez, some succeed (self-evaluation vector, #false, #true), some failed (partial support for R7RS define-library)
[12:00:02] <amazigh> where partial means no support for cond-expand.
[12:01:01] <dpk> (cond-expand: another SRFI Chez ignores for no apparent good reason)
[12:01:28] <amazigh> re cond-expand is part of Chez-SRFI by arcfide, but I am not happy with chez-srfi.
[12:01:31] <sham1> Even though it's literally the first SRFI and very useful even outside of that
[12:02:08] <amazigh> but cond-expand SRFI is different from R7RS cond-expand implementation wise
[12:02:19] <sham1> Is it now
[12:02:30] <amazigh> how so?
[12:02:40] <sham1> I'm asking is it
[12:02:46] <sham1> I don't know
[12:02:50] <amazigh> dpk: the goal of the fork of Chez would be to support R7RS-small and R7RS-large?
[12:03:19] <amazigh> SRFI cond-expand is a macro, where R7RS is special form inside the library machinery
[12:03:41] <dpk> well, hopefully to rally the Chez community
[12:03:46] <dpk> including Racket
[12:03:52] <amazigh> Maybe, I do not remember, you can use R7RS anywhere a define can be used, but that is different from the define-library cond-expand.
[12:03:57] *** Quits: apg (~apg@71-34-106-187.ptld.qwest.net) (Ping timeout: 250 seconds)
[12:04:28] <sham1> Can still be made into a macro, if you form it form lower-level primitives, although it probably makes more sense to have as a distinct thing within the compiler itself
[12:04:45] <sham1> Lower-level compiler primitives
[12:04:49] <dpk> i'm pretty sure the Racket people would like it if they didn't have to maintain their own fork of Chez because the real Chez's maintainers are apparently asleep at the wheel
[12:05:13] <amazigh> sure, I agree with that.
[12:05:14] <sham1> Maybe Cisco no longer cares for Scheme
[12:05:14] <dpk> but yes, improving SRFI support and supporting R7RS would be a secondary goal
[12:05:53] <dpk> we still have very little idea why Cisco bought Chez in the first place, afaik
[12:06:05] <dpk> that they even use it in their products is mere speculation
[12:06:30] <sham1> Could very well just be some R&D stuff even if not totally related to their products
[12:06:32] <amazigh> Last time, I asked and tried, Dybvig, told me that R7RS should support the inspector, debugger, and condition system, and more importantly they want it to be built outside the ChezScheme
[12:06:52] <amazigh> dpk: I think I read they merge in ChezScheme some internal stuff.
[12:07:14] <amazigh> ie. they merged changed in cisco's fork inside oss fork
[12:08:17] <amazigh> Dybvig said, paraphrasing: what ChezScheme is missing to build R7RS without changing ChezScheme.
[12:09:07] <amazigh> so, according to Dybvig, they prefer to have a ChezScheme R7RS as another project.
[12:09:19] <amazigh> does it make sense?
[12:10:02] *** Joins: s-liao (~s-liao@101.86.101.83)
[12:11:15] <sjamaan> amazigh: Similar to CHICKEN, then
[12:12:40] <amazigh> Sorry, my paraphrase is innacurate: they want to do the smallest change in ChezScheme to make it possible, for someone else to build a R7RS implementation reusing ChezScheme.
[12:13:53] <sjamaan> yeah that's a slightly different approach
[12:14:50] <amazigh> The goal of the Fork-ChezScheme project idea, is to make it easier to use portable R7RS libraries (and possibly programs)
[12:16:05] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[12:16:35] <amazigh> AFAIK, the only problem is the define-library form, which you can workaround with my-lib.chezscheme.ss
[12:17:14] <amazigh> and use an in the body something like: include(my-portable-r7rs.scm)
[12:17:39] <amazigh> s/my-lib.chezscheme.ss/my-lib.chezscheme.sls/
[12:18:37] <amazigh> Similarly, Guile prefer to have R7RS-large in another repository, which is a similar stance.
[12:18:52] <amazigh> (I know because I did the work, and told be that)
[12:20:31] <sjamaan> Speaking for myself, I find R7RS to be out of control. It's going way too fast for anyone to keep up with (especially compared to the glacial pace of earlier standards and SRFIs)
[12:20:58] <amazigh> That is becauseof MNW :D
[12:20:59] <sjamaan> I would not be comfortable with adopting it wholesale, and it's just too damn much to sift through to find the good bits
[12:21:00] <amazigh> no?
[12:21:24] <amazigh> sjamaan: thanks for recommending spock :)
[12:21:32] <sjamaan> I have no idea, I don't have the energy to even keep up with it so at this point I'm basically just completely ignoring it
[12:22:02] <sjamaan> R7RS-small is a different story though - I'd be okay with moving more into CHICKEN core, but seeing that it works as an egg means we don't *have* to
[12:22:18] <amazigh> sjamaan: did you follow R6RS process?
[12:22:29] <sjamaan> Somewhat
[12:22:32] <amazigh> do you have point of comparison?
[12:22:34] <amazigh> I don't
[12:22:57] <sjamaan> The R6RS process was more like R5RS or R7RS-small
[12:23:07] <amazigh> how so?
[12:23:07] <sjamaan> (although I wasn't there for the R5RS process)
[12:23:24] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[12:23:26] <amazigh> small team working regularly on the same topics?
[12:23:34] <sjamaan> A focused committee developing a small standard with limited scope
[12:23:39] <amazigh> hmm
[12:25:51] <dpk> well, you say a 'small standard', but R6RS was both too big to be considered a small, simple language for teaching, research, and embedding (in many of its senses), and too small to provide a lingua franca for Scheme application development. setting aside the fact that it couldn't easily be adopted by R5RS-based Schemes, as i'm sure you're aware ;-)
[12:26:45] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[12:27:04] <sjamaan> Yeah, that's true
[12:27:20] <sjamaan> But the process from which that standard resulted was more similar to R7RS-small
[12:27:33] <sjamaan> I didn't like R6RS either ;)
[12:27:45] <sjamaan> But at least it was possible to understand and follow it
[12:27:47] <dpk> that is true, and M N-W and I have both criticized the R7RS Large process heavily recently
[12:27:52] <amazigh> like I noted earlier, the small committe had high stakes to deliver the R6RS (and they were directly and indirectly paid); R7RS-large does not go fast [citation need], what is overhelming is the many SRFI that require careful thoughts
[12:28:26] <amazigh> What would be a better process for R7RS Large/
[12:28:28] <amazigh> What would be a better process for R7RS Large?
[12:28:37] <sham1> Well according to the community there need not be any thought. Just vote everything into the ballot
[12:28:51] <sham1> in the ballot*
[12:28:54] <amazigh> sarcasm?
[12:29:27] <sham1> Well it's sarcastic in the sense that yes, there needs to be a process. But it does seem that a lot of people just vote all the things
[12:29:43] <sham1> Although I'm also guilty of that, so yeah
[12:30:15] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[12:30:33] <amazigh> I have my own grief with R7RS Large, but most of them are geared toward SRFI process.
[12:30:46] *** Joins: s-liao (~s-liao@101.86.101.83)
[12:31:11] <amazigh> It seems to me we should make it mandatory to have tests, and those tests should run on at least 3 scheme implementations
[12:31:39] <amazigh> R7RS-small is missing a test suite that does require an existing large implementation to run
[12:32:21] <amazigh> I disagree with the fact that both generators and accumulators are the same lib.
[12:32:27] <dpk> the SRFI process is fine. as implied earlier, i think very positively of R7RS small's decision to largely adopt things existing SRFIs where possible, and one of the better changes made in the revised WG2 charter was to say that proposals have to be SRFIs xor chapters from previous RnRSes (where n usually = 6, but we have at least one proposal from n = 4)
[12:32:35] <ecraven> I've started a very rudimentary thing on https://ecraven.github.io/r7rs-coverage, but it's not exactly a test suite.. 
[12:33:13] <dpk> but allowing everyone and their dog to vote, and considering all votes equal, was a mistake
[12:33:38] <amazigh> ah we got to it
[12:34:05] <amazigh> Instead, who would be allowed to ve?
[12:34:08] <amazigh> Instead, who would be allowed to vote?
[12:34:31] <ecraven> we obviously need a BDFL... I nominate wasamasa!
[12:34:40] <dpk> and amazigh raises another point, which is not technically in the charter, but a policy decision of the chair: once things go into R7RS Large, they apparently aren't coming out again. so things which were badly designed in the Red Edition apparently have to stay in, all the way up to the final R7RS?
[12:35:11] <dpk> amazigh: either a small committee, as sjamaan says (this was the original intention of the WG2 charter before the revision), or i've suggested a bicameral or two-class voting system
[12:35:13] <sham1> Oh, so we'd even get the redundant text library? Oh good
[12:35:54] <dpk> where implementation maintainers' votes are weighted either more significantly, or counted separately, from everyone else's
[12:36:36] <amazigh> sham1: what redundant text library?
[12:36:53] <amazigh> another text/string library? 
[12:36:54] <dpk> not only to help guarantee implementor support, and to encourage them to actually vote (implementor participation in ballots so far has been … disappointing), but also because those implementing Scheme are also the most experienced Scheme programmers we have
[12:36:56] <amazigh> :')
[12:38:01] <amazigh> Maybe what falls into R7RS large, should follow something akin to scheme live by Lassi
[12:38:24] <amazigh> And again, I want to emphasize the importance of test passing on several implementations
[12:38:43] <dpk> ecraven: if it's not a test suite, what are the numbers?
[12:38:44] <sham1> Tests would indeed be nice, since that would ensure compliance to the standard
[12:38:46] <amazigh> and do yearly release.
[12:40:04] <ecraven> dpk: it just tries to decide whether the given function or feature is present and supported. but it doesn't do that very well, some tests depend on others, for example
[12:40:10] <dpk> ah, okay
[12:40:19] <ecraven> it just tries to run very short snippets, and decides whether they work
[12:40:26] <ecraven> however, it does mostly work ok ;)
[12:40:29] <dpk> yeah, i was going to say … giving Chicken a 100% score is, uhm, interesting
[12:40:37] <ecraven> that's chicken with the r5rs egg
[12:40:43] <dpk> (see the syntax-rules bugs recently discussed here)
[12:41:01] <ecraven> also, it doesn't test everything, especially for the more complex parts of R7RS
[12:41:04] <ecraven> sorry, r7rs egg, of course
[12:41:15] <ecraven> yea, the tests are not very extensive
[12:41:30] <ecraven> Some Day™ I'll work on this some more ;)
[12:41:43] <amazigh> The Day Will Come™
[12:42:35] <amazigh> Do we agree on the fact that R7RS-Large process is not a good solution toward building a large set of libraries useful for solving (real world) problems?
[12:43:07] <sjamaan> dpk: Are you talking about https://bugs.call-cc.org/ticket/1793?
[12:43:16] <ecraven> amazigh: I agree in theory, but I don't know of any *better* way to do it
[12:44:14] <dpk> that was one of them, but Zipheir found another one recently to do with pattern matching, which doesn't seem to support at least some of the new patterns allowed in R7RS …
[12:44:56] <sjamaan> Would be nice if those things would be reported to us so we can actually fix them
[12:45:27] <dpk> who maintains the logs of this channel? could they possibly be made available in a format more convenient than 'one big file with everything that's happened since May?'
[12:46:57] <dpk> okay, yes, Chicken doesn't like patterns of the form (<pattern> ... <pattern> <ellipsis> <pattern> ... . <pattern>)
[12:47:09] <dpk> this was discovered here on 2021-11-09
[12:47:31] <dpk> not sure if it was formally reported
[12:48:26] <amazigh> An alternative process, can be scheme live (with some adjustements), where people discuss and work on libraries, and stable release include libraries that works on at least three R7RS small scheme
[12:49:23] <sjamaan> dpk: I'm not sure I understand
[12:49:33] <sjamaan> ... *is* ellipsis
[12:49:59] <dpk> "the syntax-rules pattern (a a* ... . rest) to try to match "polyvariadic" formals lists like (x y z . args)." — Zipheir
[12:50:40] <dpk> <ellipsis> is ellipsis in the sense of literal ... in source code (or whatever it's been renamed to)
[12:50:53] <dpk> <pattern> ... means any number of patterns
[12:50:54] *** Joins: daviid (~user@179.210.52.91)
[12:51:30] <dpk> described thus in R{6,7}RS: "More formally, an input form F matches a pattern P if and only if one of the following holds: […] P is of the form (P1 ... Pn . Px) and F is a list or improper list of n or more elements whose first n elements match P1 through Pn and whose nth cdr matches Px."
[12:52:59] <dpk> the pattern given by Zipheir fails with: "Error: during expansion of (syntax-rules ...) - Cannot combine dotted tail and ellipsis: (a* ... . rest)"
[12:53:01] <sjamaan> Ah, so you have a rest pattern which differs from the repeated pattern with ellipses?
[12:53:48] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:53:48] <sjamaan> Or, if it's the same, it would always match the empty list, I suppose
[12:54:28] <dpk> yes, (x ... . y) should match any number of things, and fill y with () if it's a proper list and with the final cdr if not
[12:55:08] <amazigh> like in (lambda (a b c . d) body ...)
[12:55:10] <amazigh> ?
[12:55:48] <amazigh> x will match a b c, and y will match d?
[12:56:52] <sham1> I'd think so
[13:03:08] <sjamaan> hmm, shouldn't this work then as well? (define-syntax match-ellipsis-and-dotted-tail2 (syntax-rules () ((_ (a) ... . b) '(a ... b)))) (match-ellipsis-and-dotted-tail2 (x) (y) z)
[13:03:13] <sjamaan> This errors in chibi
[13:06:32] <dpk> i think that should work, yes
[13:07:02] <sjamaan> It doesn't work in Gauche either
[13:07:34] <dpk> hmm, Chez doesn't like it either
[13:07:51] <sjamaan> https://bugs.call-cc.org/ticket/1794
[13:07:57] <sjamaan> Thanks for letting me know
[13:11:34] <amazigh> An alternative process, can be scheme live (with some adjustements), where people discuss and work on libraries, and stable release include libraries that works on at least three R7RS small scheme
[13:12:12] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[13:14:38] <dpk> "<amazigh> Do we agree on the fact that R7RS-Large process is not a good solution toward building a large set of libraries useful for solving (real world) problems?" — i think R7RS will produce a large set of libraries useful for solving real world problems. i think it will also include a number of libraries that are poorly-designed (like generators, which claim to be sequences of arbitrary objects but are not) and inconsistent (someone 
[13:14:38] <dpk> pointed out that cut/cute and … the binary operators SRFI, i think? … on the current ballot use different identifiers for essentially the same purpose)
[13:15:14] <dpk> (apologies for the slow answer while i was digging up the Chicken pattern matching bug)
[13:16:13] <dpk> amazigh: it seems the goal of Scheme Live is to be *faster* than SRFIs, whereas sjamaan is complaining that there's too much happening too quickly in the R7RS SRFI process ;-)
[13:16:59] <sjamaan> dpk: Having some real world implementations fast is fine, if then given some time to mature and standardized
[13:17:09] <sjamaan> That would prevent issues like you mention with things being inconsistent
[13:17:29] <sjamaan> OTOH the problem might be that it's tough to fix things in widespread libraries
[13:25:53] <sham1> Could just make this all a living standard
[13:26:01] <dpk> oh god no
[13:26:10] * sjamaan shudders
[13:27:07] <wasamasa> lol
[13:29:14] <amazigh> what is the definition of "living standard"?
[13:29:14] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 260 seconds)
[13:29:22] <wasamasa> it's alive
[13:30:42] <dpk> like the HTML spec. the only version number is the date (or, in fact, the commit id) and there will never be a final version
[13:31:05] <sham1> Yeah. It's basically what the WHATWG does
[13:32:17] <dpk> and the spec is just as often changed to reflect the failures of implementations, than implementations are changed because they don't comply with the spec
[13:32:53] <dpk> RnRS has almost never standardized anything that nobody adopted, to my knowledge
[13:33:17] *** Joins: mononote (~mononote@user/mononote)
[13:33:24] <dpk> the only thing that comes to mind is the 'explicit' phasing system of R6RS, which implementations chose to (compatibly, i believe) replace with implicit phasing
[13:33:34] <sham1> Except for the absolute uproar from R6 at the time which lead to splintering and stuff not getting approved 100%
[13:33:58] <dpk> well, sure, but we still got 100% compliant R6 implementations
[13:34:05] <sham1> That's true
[13:35:28] <dpk> although that points to another reason why the Living Standard approach maybe works for the web (although in practice it's completely fucked for a number of reasons) but is wrong for Scheme: the web needs all implementations to support the same things and as many things as possible to work 100% the same across all implementations
[13:35:40] <dpk> Scheme is okay with more implementation diversity
[13:36:30] *** Joins: taiju (~taiju@240b:253:ec40:2400:20e3:d321:f9f8:1864)
[13:36:40] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[13:37:00] *** Quits: mononote (~mononote@user/mononote) (Remote host closed the connection)
[13:38:57] *** Joins: mononote (~mononote@user/mononote)
[13:40:47] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[14:00:43] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Ping timeout (120 seconds))
[14:00:54] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:11:19] <ecraven> this looks interesting: https://dl.acm.org/doi/10.1145/3486606.3486783
[14:15:10] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[14:16:58] <sjamaan> I see the ACM paywall is alive and well
[14:17:23] <sjamaan> Paper is free, but only for members
[14:18:21] <wasamasa> time to send a prayer to Alexandra Elbakyan
[14:18:31] <ecraven> I need to ask some former colleagues to extract it from there
[14:18:32] <sjamaan> :)
[14:21:36] *** Joins: solrize (~solrize@user/solrize)
[14:22:15] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:27:09] *** Joins: seninha (~seninha@user/seninha)
[14:29:43] <solrize> does anyone know if there is a debian package for gambit?  i installed gambc but gambit is not there
[14:31:44] <dpk> what do you mean, it's not there?
[14:31:59] <sjamaan> solrize: gsi and gsc are the binaries
[14:33:57] <solrize> i tried to build github.com/udem-dlteam/ribbit and it tried to run "gambit" which is absent from the gambc package.  i will modify the script to use gsc if that's the compiler, maybe that's all that's needed
[14:34:12] <solrize> i thought maybe there was another package
[14:37:42] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[14:38:34] *** Joins: s-liao (~s-liao@101.86.101.83)
[14:42:42] <solrize> *** WARNING -- Unknown or improperly placed option: "-target"
[14:42:42] <solrize>    any idea what compiler/interpreter that script is likely to want?  those options are not mentioned in gambit web doc
[14:43:01] <solrize> web search doesn't help
[14:48:48] <solrize> ah well i think the ribbit repo is pretty broken
[14:49:25] <sjamaan> research code...
[14:49:34] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Remote host closed the connection)
[14:49:51] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[14:50:58] <solrize> yeah i may mess with it more later but it is late here now
[14:53:00] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[14:53:23] <wasamasa> lol: https://github.com/udem-dlteam/ribbit/blob/main/src/host/c/rvm.c#L33-L63
[14:53:28] <wasamasa> I can guess what's going on here
[14:55:08] <ecraven> why is it reversed? put on the stack?
[15:03:56] <sham1> That looks like soemthing a fuzzer might produce
[15:04:26] <wasamasa> probably bytecode and symbols spelled reverse
[15:09:21] <solrize> yeah, that's bytecode produced by rsc.scm or something
[15:11:16] <solrize> https://github.com/nineties/planckforth/blob/main/bootstrap.fs  this is cool too
[15:18:28] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[15:18:48] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[15:19:09] *** Joins: brettgilio3 (~brettgili@x-node.gq)
[15:19:25] *** Joins: X-Scale` (~ARM@31.22.203.240)
[15:20:59] *** Joins: Zipheir_ (~wcm@98.4.178.27)
[15:21:06] *** Joins: m1dnight_ (~christoph@christophe.dev)
[15:22:53] *** Server sets mode: +ntz 
[15:22:59] *** Joins: seninha_ (~seninha@user/seninha)
[15:24:32] *** Joins: weinholt` (weinholt@h-37-123-132-162.A785.priv.bahnhof.se)
[15:25:59] *** Quits: wigust (~wigust@130.61.95.6) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: pranavats (3fba1d1b34@jabberfr.org) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: Lulu (~meow@vyos/developer/Lulu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: mala (~mala@user/malaclyps) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: m1dnight (~christoph@christophe.dev) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Ping timeout: 260 seconds)
[15:25:59] *** Quits: X-Scale (~ARM@31.22.203.240) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: Zipheir (~wcm@98.4.178.27) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: aoh (~aki@haltp.org) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: brettgilio (~brettgili@x-node.gq) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: mario-goulart (~user@chicken/developer/mario-goulart) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[15:26:00] *** Quits: lockywolf (~lockywolf@vultr-seoul-openbsd.lockywolf.net) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: weinholt (weinholt@h-37-123-132-162.A785.priv.bahnhof.se) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: lavaflow (~lavaflow@c-76-104-248-66.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: micro (~micro@user/micro) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: wingo (~wingo@li270-233.members.linode.com) (Ping timeout: 260 seconds)
[15:26:01] *** Quits: scribe (~scribe@gmw.xen.prgmr.com) (Ping timeout: 260 seconds)
[15:26:01] *** brettgilio3 is now known as brettgilio
[15:26:06] *** X-Scale` is now known as X-Scale
[15:26:17] *** Joins: micro (~micro@user/micro)
[15:26:21] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[15:27:26] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 245 seconds)
[15:27:58] *** Joins: aoh (~aki@haltp.org)
[15:32:43] *** Joins: lavaflow (~lavaflow@c-76-104-248-66.hsd1.wa.comcast.net)
[15:38:04] *** Joins: badkins (~badkins@136.56.92.199)
[15:43:04] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[15:48:50] *** Joins: notzmv (~zmv@user/notzmv)
[15:50:36] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[16:31:56] *** Joins: stanrifkin (~stanrifki@p200300dbcf1eb4001417b93feb21adba.dip0.t-ipconnect.de)
[16:34:02] <stanrifkin> in scala there is an annotation @tailrec which instructs the compiler to check if it is a tail recursion. Is there something similiar in chezscheme or do i have to manually "trace" and see if its really a tail recursive function?
[16:36:26] <wasamasa> there's a racket paper on the language guiding users towards missed optimization opportunities
[16:36:41] <wasamasa> https://www2.ccs.neu.edu/racket/pubs/oopsla12-stf.pdf
[16:37:06] <wasamasa> doesn't mention TCO though
[16:48:11] *** Joins: s-liao (~s-liao@101.86.101.83)
[16:53:29] <sham1> Well, just calling the procedure at tail position should be enough
[16:54:06] <wasamasa> yeah, but depending on the code that's not always clear
[16:54:18] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 256 seconds)
[16:56:22] <wasamasa> you need to prove that under every circumstance, it's going to evaluate to a call of itself
[16:56:52] <wasamasa> or some plain value
[16:58:31] <amazigh> R6RS has a paragraph about what is tail call
[16:59:42] <amazigh> Also, I never or very rarely use grow the stack recurrence without noticing.
[17:00:36] <amazigh> Usually, if there is one instead of the other, you notice very quickly
[17:01:05] <amazigh> instead of 42
[17:01:07] <amazigh> use 4242
[17:01:19] <amazigh> and be ready to kill the process, with the OS does not figure it out
[17:02:05] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Ping timeout (120 seconds))
[17:02:16] *** Joins: s-liao (~s-liao@101.86.101.83)
[17:06:36] *** Joins: civodul (~user@guix/contributor/civodul)
[17:38:58] *** Joins: badkins (~badkins@136.56.92.199)
[17:40:30] <stanrifkin> amazigh: chezscheme somehow bypass the OS limits and crashs everything
[17:42:52] *** Quits: libfud (~libfud@108-93-119-35.lightspeed.hstntx.sbcglobal.net) (Quit: WeeChat 3.3)
[17:43:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[17:45:07] *** Joins: libfud (~libfud@2600:1700:48e8:d1cf:aaa1:59ff:fe53:95b8)
[17:49:13] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[17:54:24] <amazigh> rudybot: uh ha ho
[17:54:26] <rudybot> amazigh: he ho ha
[17:55:55] <amazigh> stanrifkin: http://www.r6rs.org/final/html/r6rs/r6rs-Z-H-14.html#node_sec_11.20
[17:56:38] *** Quits: flatwhatson (~flatwhats@115-64-234-110.tpgi.com.au) (Ping timeout: 256 seconds)
[17:57:17] <amazigh> I take the risk to go against scheme orthodoxy and claim: stack should be managed by the compiler and runtime, and not the user.
[17:57:37] <amazigh> an immediate consequence is that they would be no such thing as tail call or no tail calls.
[17:58:08] <amazigh> rudybot: is that a good machination?
[17:58:44] <rudybot> amazigh: Machination would be a good impl name.
[17:58:52] *** Quits: s-liao (~s-liao@101.86.101.83) (Ping timeout: 256 seconds)
[17:59:38] <amazigh> programs should never stackoverflow.
[17:59:55] <amazigh> also, where is memory error?
[18:00:45] <amazigh> any way, changing subject.
[18:01:02] <amazigh> Is there prior art with scheme and literate programming?
[18:01:41] *** Joins: flatwhatson (~flatwhats@115-64-234-110.tpgi.com.au)
[18:04:46] *** Joins: s-liao (~s-liao@101.86.101.83)
[18:07:17] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[18:17:42] *** Quits: s-liao (~s-liao@101.86.101.83) (Quit: Client closed)
[18:31:28] <amazigh> nvm, I will bricole something with pandoc
[18:32:01] <amazigh> s/bricole/bricoler/ grammar ftw
[18:39:01] *** Joins: [deleted] (~livoreno@user/notzmv)
[18:43:09] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[18:44:27] *** Quits: mdhughes (~mdhughes@user/mdhughes) (Quit: Returning to Simulacron-1)
[18:46:44] *** Joins: mdhughes (~mdhughes@user/mdhughes)
[19:22:36] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 268 seconds)
[19:27:29] *** Parts: Plazma (~Plazma@user/plazma) ()
[19:30:52] *** Joins: badkins (~badkins@136.56.92.199)
[19:38:42] *** Joins: ManDay (~manday@user/manday)
[19:49:10] *** Quits: [deleted] (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[20:12:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce)
[20:12:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:cd5:9ac7:cfa0:7cce) (Changing host)
[20:12:26] *** Joins: skapata (~Skapata@user/skapata)
[20:16:43] *** Quits: stanrifkin (~stanrifki@p200300dbcf1eb4001417b93feb21adba.dip0.t-ipconnect.de) (Quit: Leaving)
[20:18:41] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 245 seconds)
[20:22:29] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Ping timeout: 250 seconds)
[20:27:41] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[20:27:52] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[20:31:50] *** Quits: ManDay (~manday@user/manday) (Quit: TURBOquit (tm) - the fastest way to get out of an awkward situation)
[20:42:06] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[20:46:20] *** Joins: livoreno (~livoreno@user/notzmv)
[20:49:18] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[20:52:53] *** Quits: xgqt (~user@gentoo/developer/xgqt) (Remote host closed the connection)
[20:53:07] *** Joins: xgqt (~user@static62133140007.ostnet.pl)
[20:54:46] <Zipheir_> amazigh: What do you mean?  I thought Scheme already managed procedure calls.
[20:58:17] *** Zipheir_ is now known as Zipheir
[20:59:00] <Zipheir> amazigh: I agree that I'd like to see automatic detection of TCO opportunities.
[21:06:56] <amazigh> yes
[21:29:02] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 268 seconds)
[21:29:27] *** Joins: livoreno (~livoreno@user/notzmv)
[21:47:23] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[22:01:02] *** rgherdt_ is now known as rgherdt
[22:03:49] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:04:15] *** Parts: mario-go` (~user@static.172.139.76.144.clients.your-server.de) ()
[22:04:25] *** Joins: badkins (~badkins@136.56.92.199)
[22:05:38] *** Joins: mario-goulart (~user@chicken/developer/mario-goulart)
[22:09:22] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 256 seconds)
[22:17:01] *** Joins: badkins (~badkins@136.56.92.199)
[22:18:38] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 265 seconds)
[22:21:25] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Remote host closed the connection)
[22:22:03] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 268 seconds)
[22:22:39] *** Joins: xgqt (~user@static62133140007.ostnet.pl)
[22:23:22] *** Quits: xgqt (~user@static62133140007.ostnet.pl) (Changing host)
[22:23:22] *** Joins: xgqt (~user@gentoo/developer/xgqt)
[22:33:35] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[22:36:16] *** Joins: badkins (~badkins@136.56.92.199)
[22:37:08] *** Quits: torbjornsd (~torbjorns@213.158.35.13) (Read error: Connection reset by peer)
[22:37:25] *** Joins: torbjornsd (~torbjorns@213.158.35.13)
[22:40:33] *** Quits: xsperry (~xs@user/xsperry) ()
[22:41:21] *** {Franciman} is now known as Franciman
[22:46:21] *** Joins: xsperry (~xs@user/xsperry)
[22:46:33] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[22:52:36] *** Joins: livoreno (~livoreno@user/notzmv)
[22:55:09] *** Quits: seninha_ (~seninha@user/seninha) (Quit: Leaving)
[22:56:12] *** Joins: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net)
[22:56:45] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 250 seconds)
[23:08:22] *** Quits: hiruji` (~hiruji@pool-100-4-208-71.albyny.fios.verizon.net) (Ping timeout: 260 seconds)
[23:08:43] *** Quits: xsperry (~xs@user/xsperry) ()
[23:10:33] *** Joins: grettke (~grettke@cpe-65-29-228-30.wi.res.rr.com)
[23:20:34] *** Joins: hiruji (~hiruji@user/hiruji)
[23:22:22] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[23:23:21] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Remote host closed the connection)
[23:23:54] *** Joins: poselyqualityles (poselyqual@user/poselyqualityles)
[23:24:52] *** Joins: hiruji` (~hiruji@2606:6080:1001:10:3c5b:63ff:df18:8486)
[23:25:02] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 240 seconds)
[23:30:27] <jcowan> from #commonlisp: "I used to be cursed by Lisp until I learned to recurse."
[23:38:33] <sham1> Recursion and (mathematically) inductive reasoning in general are very powerful things
[23:45:59] <Franciman> our hope to tame the infinite
[23:55:46] *** Quits: poselyqualityles (poselyqual@user/poselyqualityles) (Ping timeout: 245 seconds)
[23:56:33] *** Quits: mononote (~mononote@user/mononote) (Ping timeout: 250 seconds)
[23:59:39] <Zipheir> "Inductive definitions and recursion are two sides of the same coin, and, to mix the metaphor, they fit together like hand and glove." --Bird & Wadler
