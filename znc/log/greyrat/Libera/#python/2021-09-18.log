[00:03:19] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:03:44] *** Joins: wyclif (~wyclif@user/wyclif)
[00:05:32] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:06:22] *** Joins: trace987 (~trace@dynamic-002-247-249-044.2.247.pool.telefonica.de)
[00:08:02] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:c9ad:1872:b127:9bac) (Quit: Textual IRC Client: www.textualapp.com)
[00:08:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:09:15] *** Joins: wyclif (~wyclif@user/wyclif)
[00:09:53] *** Joins: kmh (~kmh@p200300df5f138a0021639dd591b39146.dip0.t-ipconnect.de)
[00:13:22] *** Quits: Strom (strom@fedora/strom) ()
[00:13:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 252 seconds)
[00:14:10] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 240 seconds)
[00:14:12] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[00:14:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:14:45] *** Joins: wyclif (~wyclif@user/wyclif)
[00:14:59] *** Joins: Strom (strom@fedora/strom)
[00:17:02] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:17:58] <rendar> thac0?
[00:18:46] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[00:19:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[00:20:15] *** Joins: wyclif (~wyclif@user/wyclif)
[00:21:01] *** Quits: njt (~njt@zaph.org) (Quit: bye)
[00:21:28] *** Joins: njt (~njt@zaph.org)
[00:21:57] *** Quits: njt (~njt@zaph.org) (Remote host closed the connection)
[00:22:00] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[00:23:07] <grym> is there a well established "i'd like some color in my logs please" library for stdlib logging
[00:23:22] <grym> or am i going to do some war crimes with ansi codes
[00:23:40] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 252 seconds)
[00:23:40] *** Joins: hyperknot (~hyperknot@2a02:3033:408:5a87:9804:a8dc:6921:8861)
[00:27:05] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Remote host closed the connection)
[00:27:21] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[00:27:32] *** Joins: UselessCourage__ (~UselessCo@gateway/tor-sasl/uselesscourage)
[00:28:40] <Staunch> grym: i remember someone recommending https://github.com/xolox/python-coloredlogs
[00:29:04] <Staunch> i haven't used it personally though
[00:29:57] *** Joins: whoever (~trevor@cpe-70-112-235-224.austin.res.rr.com)
[00:30:05] <whoever> hi all
[00:30:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:30:37] <whoever> I am tring to wite hello word and its simply print("hello ")
[00:30:49] <Staunch> whoever: almost, you need "world" in there too
[00:31:02] <Staunch> :P
[00:31:04] <whoever> \and when I got to run it I geet error
[00:31:04] <thm> the "hello" word
[00:31:12] <Staunch> oh haha
[00:31:17] *** Joins: wyclif (~wyclif@user/wyclif)
[00:31:19] <Staunch> whoever: what is the error you get?
[00:31:19] <whoever> on the firt (
[00:31:35] <Staunch> whoever: ah. You might be using Python2. That is no longer supported, make sure you have Python3 installed.
[00:31:42] *** Quits: UselessCourage_ (~UselessCo@gateway/tor-sasl/uselesscourage) (Ping timeout: 276 seconds)
[00:31:59] <whoever> print("Goodbye, World!")
[00:32:30] <whoever> ok, I an using a difernt literal , thats probably it :-)
[00:33:04] <whoever> does python2 realy matter when it is simply print("sr")
[00:33:07] *** Quits: NatalieTheTiny (~nfearnley@host-63-135-16-62.public.eastlink.ca) (Remote host closed the connection)
[00:33:25] <pluri> if i'm using a ratelimiter decorator in a flask app, will it restrict the number of times the function is invoked across all client sessions? or within each individual session only? what about when using it as a context manager for just one instruction within a function? this is the package I use: https://pypi.org/project/ratelimiter/
[00:33:32] <InPhase> whoever: It used to be print "hello"
[00:33:57] <thm> from __future__ import print_function  helps
[00:33:57] <whoever> 3.9.7
[00:34:18] <InPhase> whoever: If print("hello") fails on 3.9.7 you are not typing what you think you're typing.
[00:34:34] *** Joins: njt (~njt@zaph.org)
[00:34:37] <InPhase> whoever: Make sure you're not on a mac using TextEdit.  That silly thing likes to use smart quotes by default...
[00:34:47] <Staunch> ugh the worst
[00:35:03] <whoever> InPhase: vim
[00:35:06] <Staunch> phew
[00:35:15] <InPhase> whoever: Pastebin your hello world?  ;)
[00:35:26] <InPhase> whoever: And the full error?
[00:35:34] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[00:36:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:36:40] *** Joins: besnn (~besnn@user/besnn)
[00:36:44] <InPhase> whoever: And by "pastebin" I mean bpa.st
[00:36:46] *** Joins: wyclif (~wyclif@user/wyclif)
[00:38:12] <whoever> ok it may a few im proctoring
[00:38:18] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[00:38:59] <InPhase> I'm glad I don't have to do that anymore.
[00:40:18] <thm> "protcoring"?
[00:40:34] <Staunch> probably watching over students taking exams?
[00:40:35] <InPhase> thm: Watching over students taking a quiz or exam.
[00:40:46] <thm> ah.
[00:42:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[00:42:47] <whoever> https://bpa.st/JTGQ
[00:42:57] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Remote host closed the connection)
[00:43:09] <thm> missing shebang
[00:43:15] *** Joins: wyclif (~wyclif@user/wyclif)
[00:43:41] <whoever> damn
[00:43:44] <thm> put a #!/usr/bin/python in the first line
[00:43:44] *** Quits: metaace (~metaace@user/metaace) (Quit: Goodbye!)
[00:44:02] *** Joins: metaace (~metaace@user/metaace)
[00:44:43] *** Quits: NIXKnight (~NIXKnight@198.98.57.76) (Ping timeout: 250 seconds)
[00:45:50] <whoever> forgot about that thanaks
[00:45:54] <whoever> *thanks
[00:45:57] <grym> Staunch: using coloredlog seems to nuke my TimedRotatingLogFileHandler
[00:45:58] <grym> :/
[00:46:04] <grym> (as in, it doesn't get written)
[00:46:08] <Staunch> ick
[00:47:23] <Staunch> grym: what if you pass a specific logger to the `install` method? Specifically not that logger, i mean
[00:47:28] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[00:47:37] <Staunch> grym: or is that what you did already?
[00:47:52] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 252 seconds)
[00:48:04] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[00:48:11] *** Joins: pycode (~pycode@2001:b07:5d28:551:aa29:efa:686f:3018)
[00:48:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:48:29] *** Joins: c10l (~c10l@user/c10l)
[00:48:46] *** Joins: wyclif (~wyclif@user/wyclif)
[00:49:39] <grym> Staunch: https://bpa.st/M6PA  if i replace  `logging.basicConfig` with `coloredlog.install(`, stdout still works, but the file doesn't get hit
[00:50:04] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 252 seconds)
[00:50:21] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Remote host closed the connection)
[00:51:00] *** Joins: NIXKnight (~NIXKnight@198.98.57.76)
[00:51:14] <Staunch> grym: that's annoying. The only suggestions i can find are all using separate logger instances
[00:51:31] <grym> how would that even work
[00:52:05] <Staunch> yeah... i don't think it would for your case
[00:52:11] <InPhase> whoever: Had you tried print "hello" the error would have been more clearly absurd, as 'Error: no such file "hello"'.  Random bash errors.
[00:52:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[00:53:58] *** Joins: kr0nk (~kr0nk@user/kr0nk)
[00:54:36] *** Quits: magla (~gelignite@55d4cb04.access.ecotel.net) (Quit: Stay safe!)
[00:54:39] *** Joins: fikran (~fikran@user/fikran)
[00:54:44] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[00:54:58] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[00:55:21] <InPhase> whoever: What will really throw you for a mental loop is the first day that you start a python script with something like:  import sys   and you forget the shebang.  Bash's import command will wait indefinitely for you to click on a window, so you will stare at the screen for a while wondering why the program is so slow...  It happens.  A lot...
[00:56:11] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[00:56:39] <jamwil> staunch: It's been a while since I've dug into logging, but you may be able to skip the `coloredlog.install` magic and add a separate logging handler with the `coloredlogs.ColoredFormatter` formatter: https://coloredlogs.readthedocs.io/en/latest/api.html#coloredlogs.ColoredFormatter
[00:56:46] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[00:56:54] <grym> jamwil: ooOOo
[00:57:04] <Staunch> oh nice, thanks jamwil
[00:57:26] <grym> ok, how do i make that replace logging.StreamHandler
[00:57:47] <grym> (i am not very well versed in stdlib logging)
[00:57:57] <grym> or, how do i apply that formatter to the streamhandler
[00:58:03] <grym> (but obviously not the filehandler)
[00:58:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[00:59:04] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[00:59:18] <ramblebamble> Hi there! I was wondering if someone can give me some pointers on how I can design an AI model effectively in pytorch? Wanna try my hand on rolling one myself
[00:59:38] <supakeen> grym, probably something akin to `handler = logging.StreamHandler(...); handler.setFormatter(...)` and then your `handlers = [..., handler]`
[00:59:46] *** Joins: wyclif (~wyclif@user/wyclif)
[01:00:00] <grym> ramblebamble: https://cs231n.github.io/  is a good wheel reinvention tutorial
[01:00:11] <grym> supakeen: that sounds right, let's have a go
[01:00:21] <ramblebamble> grym, thanks
[01:01:04] *** Quits: tlaxkit (~hexchat@170.253.35.150) (Ping timeout: 252 seconds)
[01:01:17] <jamwil> supakeen: Yep, that should do the trick.
[01:01:29] <grym> pycharm doesn't think handlers have such a method, but, let's see
[01:02:16] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.2)
[01:02:18] <grym> ok, no i'm just braindead today
[01:02:27] <grym> this is the second time this week i've tupled myself
[01:02:33] *** Quits: trace987 (~trace@dynamic-002-247-249-044.2.247.pool.telefonica.de) (Ping timeout: 268 seconds)
[01:02:38] <grym> `handler  = logging.StreamHandler(),` :(
[01:02:38] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 260 seconds)
[01:04:24] *** Quits: Vonter_ (~Vonter@user/vonter) (Ping timeout: 268 seconds)
[01:04:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:05:16] *** Joins: wyclif (~wyclif@user/wyclif)
[01:06:19] *** Quits: jeho (~jehoshaph@user/jehoshaphat) (Quit: Leaving)
[01:08:31] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[01:08:32] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[01:08:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[01:09:09] *** Joins: Betal (~Betal@user/betal)
[01:09:18] <grym> Staunch: supakeen jamwil looks like that did it, cheers
[01:09:57] <grym> https://bpa.st/TKTA
[01:10:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:10:46] <jamwil> grym: Awesome!
[01:10:47] *** Joins: wyclif (~wyclif@user/wyclif)
[01:11:05] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[01:11:37] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[01:11:52] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[01:11:59] <grym> so shiny
[01:12:25] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 268 seconds)
[01:12:54] *** Quits: carl-- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 260 seconds)
[01:14:53] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[01:14:58] *** Joins: System12_ (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com)
[01:15:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:15:14] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 260 seconds)
[01:15:32] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[01:15:32] *** Quits: fr_sleepy (~fr_sleepy@209.94.138.128) (Quit: WeeChat 3.2)
[01:15:40] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[01:15:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[01:16:18] *** Joins: wyclif (~wyclif@user/wyclif)
[01:17:04] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[01:17:45] *** Quits: gimzmoe (~gimzmoe@user/gimzmoe) (Ping timeout: 268 seconds)
[01:18:40] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[01:18:43] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[01:18:53] <Staunch> grym: nice! And an easy slot-in
[01:20:10] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 265 seconds)
[01:20:50] *** Joins: r3m (~launch@user/r3m)
[01:21:04] *** Joins: qlixed (~qlixed@181.44.129.13)
[01:22:17] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 268 seconds)
[01:23:49] *** Quits: manti7 (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:24:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:24:40] <grym> Staunch: quite
[01:24:54] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[01:24:59] <grym> this will probably incentivize the team to use it more, for better or worse :)
[01:26:08] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
[01:26:22] *** Joins: Elzington_ (~Elzington@66.63.167.103)
[01:27:38] <grym> Staunch: you'll like this as my next move: `rg --type py "print\("`
[01:28:01] <Staunch> haha i do like that
[01:28:08] <Staunch> gettem outta there
[01:28:22] *** Joins: rannnn8888 (~rannnn888@bzq-79-183-158-130.red.bezeqint.net)
[01:28:28] <grym> to flex a bit: i'm doing that in emacs, so i can _live-edit the results_
[01:28:33] <grym> https://github.com/dajva/rg.el  <3
[01:28:46] *** Quits: Elzington_ (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:29:10] *** Quits: Elzington (~Elzington@68.235.43.22) (Ping timeout: 240 seconds)
[01:29:30] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:31:00] *** Joins: wyclif (~wyclif@user/wyclif)
[01:31:11] <Staunch> that is a flex, dang. Sometimes i regret not forcing myself to use emacs more
[01:31:17] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:31:33] *** Quits: hyperknot (~hyperknot@2a02:3033:408:5a87:9804:a8dc:6921:8861) (Quit: Textual IRC Client: www.textualapp.com)
[01:31:45] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:32:56] *** Quits: Elzington (~Elzington@66.63.167.103) (Max SendQ exceeded)
[01:33:41] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:34:00] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[01:34:04] *** Quits: junktext (~junktext@109.201.152.164) (Ping timeout: 252 seconds)
[01:34:32] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:35:35] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[01:35:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:36:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:36:28] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[01:36:29] *** Joins: wyclif (~wyclif@user/wyclif)
[01:36:39] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:37:41] *** Quits: Elzington (~Elzington@66.63.167.103) (Max SendQ exceeded)
[01:38:10] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[01:38:35] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:39:10] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[01:41:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:41:17] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:41:28] *** Joins: keir (~keir@user/keir)
[01:41:44] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:41:50] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:42:02] *** Joins: wyclif (~wyclif@user/wyclif)
[01:43:05] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[01:43:05] <grym> i do most of my python in pycharm
[01:43:09] <grym> and most of everything else in emacs
[01:43:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:44:31] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:44:42] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:45:04] *** Quits: szymon (~ugh@staticline-31-183-187-232.toya.net.pl) (Remote host closed the connection)
[01:45:06] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 260 seconds)
[01:45:18] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[01:46:33] *** Joins: mcint (mcint@user/mcint)
[01:47:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[01:47:16] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:47:30] *** Joins: wyclif (~wyclif@user/wyclif)
[01:47:37] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:49:06] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:49:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:49:59] *** Joins: martums3 (~martums@user/martums)
[01:50:11] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:51:22] *** Quits: pacbard (~pacbard@user/pacbard) (Ping timeout: 245 seconds)
[01:51:40] *** Quits: jootoi (~jootoi@130.61.158.197) (Ping timeout: 268 seconds)
[01:51:42] *** Joins: pacbard (~pacbard@user/pacbard)
[01:51:59] *** Joins: jootoi (~jootoi@130.61.158.197)
[01:52:16] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:52:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:52:41] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:52:54] *** Quits: dhch (~dhch@185.213.154.168) (Ping timeout: 268 seconds)
[01:52:54] *** Quits: martums (~martums@user/martums) (Ping timeout: 268 seconds)
[01:52:54] *** martums3 is now known as martums
[01:53:02] *** Joins: wyclif (~wyclif@user/wyclif)
[01:53:09] *** Joins: dhch (~dhch@185.213.154.168)
[01:53:20] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:53:28] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Excess Flood)
[01:53:37] *** Joins: sudomann (~sudomann@131.118.76.3)
[01:53:46] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[01:53:54] *** Quits: sirn (~sirn@user/sirn) (Ping timeout: 256 seconds)
[01:53:54] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[01:54:13] *** Joins: sirn (~sirn@user/sirn)
[01:54:17] *** Quits: gerard (~gerard@user/gerard) (Ping timeout: 245 seconds)
[01:54:24] *** Joins: gerard (~gerard@user/gerard)
[01:54:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:55:02] <rannnn8888> Hey i can save my login in selenium by coocks ?
[01:55:06] *** Quits: bninja (~bloodninj@user/bloodninja) (Quit: So long king bowser!)
[01:55:14] <rannnn8888> cookies
[01:55:32] *** Quits: daniel-k (~daniel-k@fsf/emeritus/daniel-k) (Ping timeout: 245 seconds)
[01:55:34] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:55:51] *** Joins: daniel-k (~daniel-k@fsf/emeritus/daniel-k)
[01:56:36] *** Quits: dulanic (~dulanic@47.187.144.163) (Ping timeout: 268 seconds)
[01:56:42] *** Joins: blackout69 (~blackout6@mob-5-91-255-231.net.vodafone.it)
[01:56:52] *** Joins: dulanic (~dulanic@47.187.144.163)
[01:57:23] <CRUNK-b0t> cocks?
[01:57:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[01:57:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:58:08] <rannnn8888> CRUNK-b0t cookies
[01:58:31] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[01:58:33] *** Joins: wyclif (~wyclif@user/wyclif)
[01:59:30] *** Joins: Elzington (~Elzington@66.63.167.103)
[01:59:32] *** Joins: blackskye (~blackskye@user/blackskye)
[01:59:41] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 268 seconds)
[02:00:32] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.2.1)
[02:01:46] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[02:02:23] *** Joins: Elzington (~Elzington@66.63.167.103)
[02:02:42] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[02:02:51] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[02:02:51] *** Quits: raxor2k (~raxor2k@78.158.228.175) ()
[02:03:16] *** Joins: supakeen (~user@python/site-packages/supakeen)
[02:03:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[02:04:03] *** Joins: wyclif (~wyclif@user/wyclif)
[02:04:16] *** Quits: netrunner (~netrunner@user/netrunner) (Quit: leaving)
[02:04:17] *** Quits: Elzington (~Elzington@66.63.167.103) (Remote host closed the connection)
[02:04:20] *** Quits: sn1tch3r (~sn1tch3r@user/sn1tch3r) (Quit: Leaving)
[02:04:35] *** Quits: njt (~njt@zaph.org) (Quit: bye)
[02:04:37] *** Joins: Elzington (~Elzington@66.63.167.103)
[02:05:22] *** Joins: iflema (~ian@user/iflema)
[02:06:15] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[02:07:22] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[02:08:32] *** Quits: System12_ (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[02:08:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:09:34] *** Joins: wyclif (~wyclif@user/wyclif)
[02:10:14] *** Joins: System123 (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com)
[02:11:00] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 268 seconds)
[02:11:45] *** Quits: blackout69 (~blackout6@mob-5-91-255-231.net.vodafone.it) (Quit: Leaving.)
[02:12:19] *** Joins: System12_ (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[02:13:04] *** Joins: Julian (~tos9@python/site-packages/Julian)
[02:13:27] *** Joins: blackout69 (~blackout6@mob-5-91-255-231.net.vodafone.it)
[02:13:56] *** Quits: blackskye (~blackskye@user/blackskye) (Quit: leaving)
[02:15:45] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[02:15:54] *** Quits: System123 (~System123@ec2-52-61-197-79.us-gov-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[02:16:20] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[02:16:29] *** Quits: blackout69 (~blackout6@mob-5-91-255-231.net.vodafone.it) (Client Quit)
[02:19:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:19:59] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[02:20:29] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[02:20:36] *** Joins: wyclif (~wyclif@user/wyclif)
[02:20:52] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 268 seconds)
[02:21:18] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[02:21:56] *** Joins: njt (~njt@zaph.org)
[02:23:40] <hexology> https://bpa.st/H7BA is this a mypy bug? i'd expect `Path` to be a valid callable here...
[02:23:44] *** Joins: gimzmoe (~gimzmoe@user/gimzmoe)
[02:25:12] *** Joins: jeho (~jehoshaph@user/jehoshaphat)
[02:25:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:26:06] *** Joins: wyclif (~wyclif@user/wyclif)
[02:26:22] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:30] *** ChanServ sets mode: +o nedbat
[02:27:50] *** nedbat changes topic to 'Anything Python is on-topic. | Don't paste, use https://bpa.st/+python | Questions about this channel? https://www.pound-python.org | CoC: https://j.mp/psf-coc | Tutorial: https://j.mp/PyTut | New programmer? https://j.mp/23X7emF | Ops: #python-ops'
[02:28:01] *** ChanServ sets mode: -o nedbat
[02:28:27] *** Quits: nomic (~nomic@185.217.117.156) (Quit: Leaving)
[02:29:14] *** Joins: Naan (~naan@user/naan)
[02:29:50] <zln> anyone who knows sqlite here?
[02:30:10] <zln> I have a question about empty foreign keys in second table
[02:30:11] <zln> >D
[02:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[02:30:53] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[02:31:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:31:28] <rannnn8888> print(driver.find_element(By.XPATH, '/html/body/section/section/action-bar/nav/section/div[1]/a').text)
[02:31:36] *** Joins: wyclif (~wyclif@user/wyclif)
[02:31:42] <rannnn8888> where i wrong
[02:32:11] *** Quits: palasso (~palasso@user/palasso) (Remote host closed the connection)
[02:33:32] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Client Quit)
[02:34:21] <jamwil> hexology: I've had issues with type checkers not recognizing class constructors as valid callables. You could try `lambda x: Path(x)` to wrap it.
[02:34:49] <hexology> jamwil: yeah that's frustrating. i'll have to see if there's an open mypy issue for it. i've had to write wrapper functions like that before
[02:34:51] *** Quits: jess (~jess@libera/staff/jess) ()
[02:35:27] <jamwil> hexology: Agreed. Shouldn't need to re-write valid typed code to make mypy happy.
[02:35:40] <hexology> zln: just ask your question, don't "ask to ask"
[02:35:59] <zln> hexology: :D True!
[02:36:01] <hexology> zln: you might want to consider asking in #sql if it's not python-specific
[02:36:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[02:36:40] <zln> I tried askin in ##sqlite but that channel is sleeping, I'll try with #sql
[02:37:03] <jamwil> hexology: fwiw, I think pycharm does the same thing, so there may be some idiom here that I'm naive to.
[02:37:07] *** Joins: wyclif (~wyclif@user/wyclif)
[02:37:22] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Ping timeout: 260 seconds)
[02:37:28] <hexology> jamwil: i think pycharm either uses mypy internally, or something based on it
[02:37:48] *** Quits: Akuli (~Akuli@82-203-160-13.bb.dnainternet.fi) (Quit: Leaving)
[02:38:25] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 252 seconds)
[02:38:36] *** Joins: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net)
[02:40:54] *** Joins: georgios (~georgios@user/georgios)
[02:42:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:42:38] *** Joins: wyclif (~wyclif@user/wyclif)
[02:42:58] *** Joins: Skyfire (~pyon@user/pyon)
[02:43:11] *** Quits: shibboleth (~shibbolet@user/shibboleth) (Quit: shibboleth)
[02:43:43] <rannnn8888> print(driver.find_element(By.XPATH, '/html/body/section/section/action-bar/nav/section/div[1]/a').text) where i wrong
[02:44:56] *** Quits: n00b101 (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:45:56] *** Quits: pycode (~pycode@2001:b07:5d28:551:aa29:efa:686f:3018) (Ping timeout: 268 seconds)
[02:46:40] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:1eea:2d6c:3bd1:5b37)
[02:47:46] *** Quits: ferz (~ferz@93-39-142-33.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[02:48:26] *** Quits: whoever (~trevor@cpe-70-112-235-224.austin.res.rr.com) (Remote host closed the connection)
[02:49:52] *** Joins: odoood (~odoood@2601:c8:c003:a550::1)
[02:50:26] *** Joins: Celeo (~Celeo@user/celeo)
[02:50:44] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[02:51:40] *** Quits: ST47 (~ST47@wikimedia/st47) (Ping timeout: 240 seconds)
[02:51:41] *** Quits: mbrndtgn (~mbrndtgn@undecidable.de) (Quit: The Lounge - https://thelounge.chat)
[02:52:25] *** Joins: mbrndtgn (~mbrndtgn@undecidable.de)
[02:52:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:53:15] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[02:53:39] *** Joins: wyclif (~wyclif@user/wyclif)
[02:54:18] <jmcantrell> How can i make argparse handle multiple optional arguments? e.g. -a 1 -a 2 -a 3 => args.a == [1,2,3]
[02:55:46] <jmcantrell> ah, action='append'
[02:56:08] <jmcantrell> 🦆
[02:57:46] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:58:43] *** Quits: dmr (~rdumitru@user/dmr) (Quit: WeeChat 3.2.1)
[02:58:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[02:59:12] *** Joins: wyclif (~wyclif@user/wyclif)
[02:59:27] *** Quits: ubert (~Thunderbi@178.115.57.167.wireless.dyn.drei.com) (Remote host closed the connection)
[02:59:44] *** Quits: deltab (~deltab@user/deltab) (Ping timeout: 265 seconds)
[02:59:50] <jamwil> jmcantrell: Might also need to specify `nargs` argument. Either '*' to gather all into a list or '+' to do the same but throw an error if there isn't at least one argument used.
[03:00:18] <jmcantrell> jamwil: thanks for the heads up
[03:01:08] *** Joins: deltab (~deltab@user/deltab)
[03:01:41] <jmcantrell> jamwil: looks like, in this case, nargs defaults to "*"? seems to behave that way in the docs example when it's omitted
[03:02:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:02:48] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[03:02:53] <jamwil> jmcantrell: Ah, good to know
[03:02:59] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[03:03:16] *** Joins: ferz (~ferz@93-39-142-33.ip76.fastwebnet.it)
[03:04:01] *** Joins: fikran (~fikran@user/fikran)
[03:04:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:04:40] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:40] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Ping timeout: 240 seconds)
[03:04:49] *** Quits: mat001_ (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:05:14] *** Joins: ST47 (~ST47@wikimedia/st47)
[03:08:27] *** Quits: System12_ (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Remote host closed the connection)
[03:08:55] *** Quits: flokuehn (~flokuehn@i5E86B360.versanet.de) (Ping timeout: 265 seconds)
[03:09:20] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[03:09:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[03:10:11] *** Joins: wyclif (~wyclif@user/wyclif)
[03:11:59] *** Joins: dmr (~rdumitru@user/dmr)
[03:12:12] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[03:13:08] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:13:08] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[03:13:38] *** Quits: Narrat (~omnius@p200300df5f0ee16206ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:13:40] *** Quits: TranquilEcho (~grom@user/tranquilecho) (Quit: WeeChat 2.8)
[03:14:14] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 265 seconds)
[03:15:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:15:42] *** Joins: wyclif (~wyclif@user/wyclif)
[03:15:52] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:15:53] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:16:22] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:17:06] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[03:17:24] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[03:17:53] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:1eea:2d6c:3bd1:5b37) (Quit: Konversation terminated!)
[03:18:00] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[03:18:45] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[03:18:59] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:19:07] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[03:19:36] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:19:51] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[03:20:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:20:42] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[03:20:44] *** Joins: brabrax (~brabrax@user/brabrax)
[03:20:52] *** Joins: califax (~califax@user/califx)
[03:21:14] *** Joins: wyclif (~wyclif@user/wyclif)
[03:21:16] *** Joins: tracey (~trace@95.90.106.112)
[03:22:32] *** Quits: sudomann (~sudomann@131.118.76.3) (Ping timeout: 268 seconds)
[03:24:23] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[03:27:05] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 260 seconds)
[03:28:25] *** Joins: cuz (~user@2601:182:cc02:8b0:e50a:ab1e:19b4:1aaf)
[03:29:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:30:04] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[03:30:06] *** Joins: PamiPetteri (leet@user/pamipetteri)
[03:30:12] <PamiPetteri> http://paste.dy.fi/OHo
[03:30:36] *** Joins: wyclif (~wyclif@user/wyclif)
[03:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[03:31:03] *** Quits: cul8_r (~cul8r@76.113.95.199) (Quit: Leaving)
[03:31:11] <Repiphany> PamiPetteri: Input gives strings which you have to convert to numbers if you want to compare properly
[03:31:42] <space-ghost> yeah so you'll need to handle exceptions or validate your user input
[03:31:58] <space-ghost> and/or :-p
[03:32:10] <Repiphany> `("21" < "311") == True`
[03:32:11] *** Quits: cdown (~cdown@194.207.141.245) (Ping timeout: 268 seconds)
[03:32:18] <Repiphany> oops
[03:32:33] <space-ghost> wrong console :p
[03:32:53] <Repiphany> `"14" < "122" == False`
[03:35:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:36:13] *** Joins: wyclif (~wyclif@user/wyclif)
[03:39:51] *** Quits: miker985 (~miker985@50.125.87.171) (Ping timeout: 265 seconds)
[03:39:54] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 260 seconds)
[03:40:59] *** Joins: nomic (~nomic@185.217.117.156)
[03:41:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[03:41:26] *** Joins: Atque (~Atque@user/atque)
[03:41:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:43:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 260 seconds)
[03:45:21] *** Quits: tracey (~trace@95.90.106.112) (Ping timeout: 268 seconds)
[03:46:40] <PamiPetteri> https://bpa.st/7U5Q
[03:46:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[03:47:13] *** Joins: wyclif (~wyclif@user/wyclif)
[03:47:21] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[03:48:09] <PamiPetteri> it seems I added a ; to the code by mistake. I learned to do that in C and C++, and Pascal. But Python accepts it, even though it is not required.
[03:48:13] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[03:52:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:52:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:53:13] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[03:55:00] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[03:55:13] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[03:56:50] *** Joins: Wulf (~Wulf@user/wulf)
[03:57:51] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:58:14] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[03:59:02] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 260 seconds)
[04:01:46] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[04:02:19] *** Quits: int3l (~int3l@78-83-124-208.spectrumnet.bg) (Quit: Fuck you world)
[04:03:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:03:14] *** Quits: bilb_ono (~alexmarsh@ip68-6-90-72.sb.sd.cox.net) (Quit: bilb_ono)
[04:03:46] *** Joins: wyclif (~wyclif@user/wyclif)
[04:04:49] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[04:05:34] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 260 seconds)
[04:08:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:09:16] *** Joins: wyclif (~wyclif@user/wyclif)
[04:09:20] *** Quits: SuperLag (~akulbe@user/superlag) (Ping timeout: 265 seconds)
[04:10:45] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[04:11:11] <harpia> I have followed the packaging guide here (https://docs.python.org/3/distributing/index.html#distributing-index) and published my python package to PyPI. Thanks to the setup.cfg options the dependencies are all pulled in when you install my package. Now the requirements.txt just sits there, unused. What should I do with it now? What is the purpose of this file, after all? I heard it's about build reproducibility, like a Docker
[04:11:11] <harpia> setup. I just don't know at which point should I run pip freeze.
[04:12:39] *** Joins: Macuser (~Macuser@216.30.159.201)
[04:14:12] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[04:14:54] *** Quits: odoood (~odoood@2601:c8:c003:a550::1) (Ping timeout: 260 seconds)
[04:19:18] <jamwil> harpia: requirements.txt is still handy for maintaining a reproducable development environment where you might not be pip installing your package.
[04:22:36] <harpia> I see. I noticed pip freeze adds my package to the requirements list when it is installed in editable mode. I should remove it from that list, right?
[04:24:47] <harpia> it adds a line that starts with "-e"
[04:25:12] <jamwil> harpia: I have never kept my own package in requirements.txt, although it's probably just a matter of preference. Leaving it in is probably not an issue.
[04:27:59] <harpia> Ah, I see there's an option --exclude-editable for pip freeze.
[04:28:12] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[04:28:36] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:28:59] *** Joins: califax (~califax@user/califx)
[04:29:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[04:30:10] <jamwil> harpia: Leaving it in saves you a step. I'm just anal with my requirements.txt and maintain it by hand. I can't think of any good reason to exclude it, so maybe just ignore my rambling nonsense.
[04:30:15] *** Joins: wyclif (~wyclif@user/wyclif)
[04:30:16] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[04:31:15] *** Joins: elkclone (~elkclone@user/elkclone)
[04:31:57] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[04:32:00] <harpia> Keeping it on the list means I won't need to run "pip install -e .". Interesting...
[04:32:49] <jamwil> harpia: Yea, literally no downside to keeping it in. I may actually add it to my own. Didn't ever think to specify the -e flag in requirements.txt.
[04:33:12] *** Joins: sudomannn (~sudomann@2601:543:100:2e3:89c9:3adb:11b2:5dfb)
[04:33:34] <PamiPetteri> https://pastebin.com/XtbVUe5v
[04:36:25] *** Quits: runelind (~runelind@user/runelind) (Quit: ZNC 1.8.2 - https://znc.in)
[04:36:32] <harpia> jamwil, it outputs it like "-e git+ssh://...#egg=myproject". I'm not so sure... it is installing from that auto-generated "egg" directory?
[04:36:40] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[04:36:56] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[04:37:06] <jamwil> harpia: Oh, I don't love that.
[04:37:17] <harpia> I'm currently excluding the .egg from version control.
[04:37:29] <harpia> but maybe it's useful to keep it?
[04:37:49] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[04:38:03] <jamwil> harpia: I assumed it would use the path to the local directory.
[04:38:27] *** Parts: akk (~akk@75.161.146.115) (+++)
[04:38:30] <jamwil> harpia: I'd just take it out then and keep things simple. Use requirements.txt for external dependencies.
[04:39:35] *** Joins: runelind (~runelind@user/runelind)
[04:40:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:41:10] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 260 seconds)
[04:41:16] *** Joins: wyclif (~wyclif@user/wyclif)
[04:42:15] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[04:42:25] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[04:42:43] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 252 seconds)
[04:43:10] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[04:43:40] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[04:46:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[04:46:04] *** Quits: CRUNK-b0t (~Lando@user/lando-spacepimp) (Ping timeout: 252 seconds)
[04:46:17] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 245 seconds)
[04:46:37] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[04:46:48] *** Joins: wyclif (~wyclif@user/wyclif)
[04:47:05] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[04:47:10] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:47:53] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[04:50:14] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[04:50:25] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[04:51:16] *** Joins: cheater (~Username@user/cheater)
[04:51:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:52:16] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[04:52:19] *** Joins: wyclif (~wyclif@user/wyclif)
[04:55:30] *** Joins: semeion (~semeion@user/semeion)
[04:57:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[04:57:49] *** Joins: wyclif (~wyclif@user/wyclif)
[04:58:28] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[05:01:03] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[05:01:40] *** Quits: gitly (~gitly@148.252.132.147) (Ping timeout: 240 seconds)
[05:03:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[05:03:19] *** Joins: wyclif (~wyclif@user/wyclif)
[05:03:44] *** Joins: gitly (~gitly@85.255.235.157)
[05:05:25] *** Joins: ghosteightsix (~sysadmin@2601:602:9e00:368:8f44:e09:ad07:d285)
[05:05:59] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[05:07:38] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:08:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[05:08:49] *** Joins: wyclif (~wyclif@user/wyclif)
[05:09:45] *** Quits: Balzy (~Balzy@host-79-45-149-51.retail.telecomitalia.it) (Ping timeout: 265 seconds)
[05:09:53] *** Quits: damonlynch (~ngaio@2601:245:c700:2c06:7912:3d2c:ae10:8f8b) (Read error: Connection reset by peer)
[05:11:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[05:11:34] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:12:49] <rannnn8888> Hey how i can make def when triger on staert this in new Thread ? its example but here i can start this only one time :X  https://bpa.st/322A
[05:13:23] *** Joins: fikran (~fikran@user/fikran)
[05:13:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[05:14:21] *** Joins: wyclif (~wyclif@user/wyclif)
[05:14:26] *** Joins: Balzy (~Balzy@host-79-45-149-51.retail.telecomitalia.it)
[05:14:26] *** Parts: ghosteightsix (~sysadmin@2601:602:9e00:368:8f44:e09:ad07:d285) ()
[05:14:27] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 276 seconds)
[05:14:43] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[05:16:41] *** Quits: zepolen (~zepolen@2a02:587:8611:f562:d100:78de:5594:56fb) (Remote host closed the connection)
[05:17:06] *** Joins: zepolen (~zepolen@2a02:587:8611:f562:36bc:1936:4156:998a)
[05:17:46] <Repiphany> Make more than one thread
[05:19:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[05:19:34] <rannnn8888> Repiphan but my script make all the time the same def when the triger on
[05:19:50] *** Joins: wyclif (~wyclif@user/wyclif)
[05:20:54] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[05:21:22] <Repiphany> rannnn8888: https://bpa.st/N2TA
[05:23:35] <Repiphany> Didn't fix the joins but whatever
[05:24:59] *** Quits: Strom (strom@fedora/strom) ()
[05:26:17] <rannnn8888> Repiphany its not help me i want use thread here when the triger on and not wait the def end keep listen my database https://bpa.st/ZJ2A
[05:26:38] *** Joins: Strom (strom@fedora/strom)
[05:27:43] *** Quits: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[05:30:26] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:34:42] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 260 seconds)
[05:35:10] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:35:23] *** Joins: vlm (~vlm@user/vlm)
[05:38:01] *** Joins: Macuser (~Macuser@216.30.159.201)
[05:38:13] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[05:40:23] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[05:40:35] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[05:44:37] *** Quits: portalrat (~portalrat@user/portalrat) (Quit: Leaving)
[05:45:59] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:b404:bc48:4027:46f5)
[05:46:41] *** Joins: nergar (~Nergar@177.225.152.61)
[05:50:34] *** Quits: zepolen (~zepolen@2a02:587:8611:f562:36bc:1936:4156:998a) (Ping timeout: 260 seconds)
[05:56:20] <aphysically> oh huh, deque is nice
[05:57:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[05:58:00] *** Joins: wyclif (~wyclif@user/wyclif)
[05:58:45] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[05:59:04] *** Quits: sejow (~sejow@193.29.106.102) (Remote host closed the connection)
[06:05:28] *** Joins: jazzy (~jaziz@2600:380:c03c:c2e6:bd81:c730:db73:37a)
[06:09:41] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:09:54] *** Joins: califax- (~califax@user/califx)
[06:12:16] <grym> must resist the urge to go completely OCD on the log formatting
[06:12:31] *** Joins: brabrax_ (~brabrax@user/brabrax)
[06:13:21] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 268 seconds)
[06:13:21] *** brabrax_ is now known as brabrax
[06:13:36] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[06:13:37] *** califax- is now known as califax
[06:15:16] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 252 seconds)
[06:16:26] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[06:16:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[06:18:59] *** Joins: korg815 (~korg815@user/korg815)
[06:20:48] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 265 seconds)
[06:21:21] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[06:22:02] *** Quits: sudomannn (~sudomann@2601:543:100:2e3:89c9:3adb:11b2:5dfb) (Quit: Leaving)
[06:22:46] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 260 seconds)
[06:28:18] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[06:29:44] *** Quits: Elzington (~Elzington@66.63.167.103) (Quit: Leaving)
[06:29:47] *** Quits: cuz (~user@2601:182:cc02:8b0:e50a:ab1e:19b4:1aaf) (Ping timeout: 268 seconds)
[06:31:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[06:34:31] *** Joins: zepolen (~zepolen@2a02:587:8611:f562:3143:d2eb:f2a7:fd9c)
[06:38:49] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[06:38:57] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[06:39:11] <jamwil> grym: Share it if you come up with a rad format string!
[06:39:49] <jamwil> My simple one with tabular formatting: "%(asctime)s %(name)-30s %(lineno)-4d %(levelname)-8s %(message)s"
[06:41:20] <grym> jamwil: best i got was "%(asctime)s [%(levelname)-8s] %(module)s.%(funcName)s: %(message)s"
[06:42:01] <grym> i wanted `date [INFO    ] foo.bar        : the message` and the colons all to line up
[06:42:05] <grym> but, not quite
[06:44:16] *** Quits: gitly (~gitly@85.255.235.157) (Ping timeout: 252 seconds)
[06:45:49] *** Quits: kmh (~kmh@p200300df5f138a0021639dd591b39146.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[06:46:03] *** Joins: gitly (~gitly@185.69.145.0)
[06:49:07] <pycurious> when a threadpoolexecutor goes out of scope - is it garbage collected?
[06:49:31] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:50:14] *** Quits: ElPresidente (~ElPreside@2600:1700:3d10:4870:7430:afe7:3692:332) (Read error: Connection reset by peer)
[06:55:08] *** Joins: MrBungle (~MrBungle@2604:3d08:1788:dc00:61c4:f819:716b:e549)
[06:55:26] *** JacobFrost is now known as MistressFrost
[06:57:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2.1)
[06:58:50] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[07:01:46] *** MistressFrost is now known as JacobFrost
[07:02:19] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2)
[07:05:09] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 268 seconds)
[07:05:42] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[07:10:20] *** Quits: wallace_mu200 (~wallace_m@pool-108-18-159-186.washdc.fios.verizon.net) (Quit: Client closed)
[07:11:47] *** Joins: jinsun (~quassel@user/jinsun)
[07:13:42] *** Joins: NeilRG (~NeilRG@192.222.196.111)
[07:13:50] *** Quits: NeilRG (~NeilRG@192.222.196.111) (Remote host closed the connection)
[07:14:13] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[07:17:19] *** Quits: gitly (~gitly@185.69.145.0) (Ping timeout: 252 seconds)
[07:17:27] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[07:18:16] *** Quits: Naan (~naan@user/naan) (Quit: Leaving)
[07:19:19] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[07:19:22] *** Joins: gitly (~gitly@85.255.232.64)
[07:20:44] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[07:22:45] *** Joins: fikran (~fikran@user/fikran)
[07:22:53] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[07:23:28] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[07:24:45] *** Quits: jamwil (~jamwil@user/jamwil) (Quit: leaving)
[07:27:21] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 268 seconds)
[07:28:52] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[07:34:34] <Axy> Hey channel, what's the opposite of int(str,32) -- so I can now convert from base32 to integer with this, but I'm trying to convert an integer to base32 instead
[07:34:39] *** Joins: frost (~frost@59.71.243.104)
[07:37:35] <KirkMcDonald> Axy: There isn't one. Not in the standard library, at least.
[07:38:05] <Axy> Thank you KirkMcDonald
[07:38:10] <KirkMcDonald> Axy: It's not so hard to write, though.
[07:38:31] <KirkMcDonald> Oh, hold on.
[07:38:35] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[07:38:42] * Axy holds on
[07:39:42] *** Joins: rindolf (~shlomif@87.68.240.100.adsl.012.net.il)
[07:39:50] <KirkMcDonald> Well, the base64 module does have some base32 stuff, but it is not exactly what you're looking for.
[07:40:23] <Axy> it's not, correct.
[07:40:33] <Axy> I've also checked that but they all end with "====="
[07:40:41] <Axy> I believe it's more like web encoding of some sort
[07:41:08] <KirkMcDonald> It's a thing.
[07:41:39] <rannnn8888> when i use selenium have way to save the specipic header when i open site
[07:43:07] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[07:43:39] *** Joins: gusto (~Augustus@109.255.100.54)
[07:48:01] *** Joins: diamondbond (~diamondbo@175.157.224.60)
[07:51:46] *** Quits: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) (Quit: leaving)
[07:53:53] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[07:56:28] *** Joins: qlixed (~qlixed@181.44.129.13)
[07:59:31] <Axy> KirkMcDonald, I'm unable to solve the above problem - I'm still pretty new with python
[07:59:40] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[07:59:43] <Axy> what kind of a path should I follow
[07:59:44] *** Quits: ColdKeyboard (~ColdKeybo@user/coldkeyboard) (Ping timeout: 252 seconds)
[07:59:49] *** Quits: gitly (~gitly@85.255.232.64) (Ping timeout: 268 seconds)
[08:00:10] <Axy> Actually I want to define my own based 32 array and convert any decimal to a base 32 that way
[08:01:41] *** Joins: gitly (~gitly@148.252.128.37)
[08:01:43] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[08:02:04] <KirkMcDonald> Axy: I'm not sure what you mean.
[08:03:02] *** Joins: maum (~maum@1.245.147.30)
[08:03:05] <maum> hello
[08:03:13] <maum> Is there a way to merge different size dfs? for example df_A has a b c column df_B a b c d and I want to get only df_A and df_B's d to df_A's c
[08:03:26] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:03:28] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:05:13] *** Joins: greyhash (~greyhash@2601:2c6:c100:1f00::af26)
[08:05:28] *** Joins: Hash (~weechat@thestonedapes.com)
[08:05:40] *** Quits: diamondbond (~diamondbo@175.157.224.60) (Ping timeout: 252 seconds)
[08:05:55] <Hash> Hello I'm trying to run a python script and I installed pycryptodome but the script still fails with no module named Cryptodome
[08:06:11] <Hash> instructions say: The libraries required are PyCryptodome. They can be had by running pip3 install pycryptodomex in an admin command prompt; please make sure you're using Python 3's pip.
[08:06:17] <Hash> I instaleld that one via pip
[08:06:21] <Hash> $  pip install pycryptodome
[08:06:38] <Hash> oh missed an x
[08:07:28] *** Joins: diamondbond (~diamondbo@175.157.224.60)
[08:07:36] *** Quits: diamondbond (~diamondbo@175.157.224.60) (Read error: Connection reset by peer)
[08:09:05] <energizer> maum: i don't really understand the question, but fwiw i usually ask my pandas questions on stackoverflow.com
[08:09:43] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[08:10:02] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[08:12:08] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[08:12:52] *** Quits: Skyfire (~pyon@user/pyon) (Quit: brb)
[08:13:17] *** Joins: Skyfire (~pyon@user/pyon)
[08:13:27] <maum> energizer: https://bpa.st/KQQA
[08:14:26] <maum> https://bpa.st/OIZQ
[08:14:52] *** Joins: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at)
[08:15:50] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 265 seconds)
[08:15:53] *** Quits: UselessCourage__ (~UselessCo@gateway/tor-sasl/uselesscourage) (Remote host closed the connection)
[08:17:05] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 268 seconds)
[08:17:11] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Quit: water tribe)
[08:17:23] <energizer> maum: what is the problem with pd.merge?
[08:17:40] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[08:17:56] *** Joins: UselessCourage__ (~UselessCo@gateway/tor-sasl/uselesscourage)
[08:18:31] <maum> test = pd.merge(df_A, df_B, how='left', on=[a,b]) gives duplicated rows each
[08:19:12] *** Joins: KeiraT (~k@lulzsec.co.uk)
[08:20:01] *** Quits: gitly (~gitly@148.252.128.37) (Ping timeout: 252 seconds)
[08:20:08] <energizer> maum: can you show the result
[08:21:18] *** Quits: tnez (~el@user/tnez) (Quit: %bye%)
[08:21:48] *** Joins: dba (uid502594@id-502594.hampstead.irccloud.com)
[08:22:00] *** Joins: gitly (~gitly@148.252.129.191)
[08:24:07] <energizer> maum: heads up i gotta go in 5 minutes
[08:25:37] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[08:27:10] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 268 seconds)
[08:28:12] *** Quits: maum (~maum@1.245.147.30) (Quit: Client closed)
[08:29:49] *** Joins: tnez_ (~el@user/tnez)
[08:31:04] *** Joins: maum (~maum@1.245.147.30)
[08:32:02] <KirkMcDonald> Axy: Anyway, the key thing to implementing this: The divmod() function.
[08:33:25] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-2c88-3fbc-a273-9e1b.res6.spectrum.com) (Read error: Connection reset by peer)
[08:33:46] *** Quits: Nahra (~user@static.161.95.99.88.clients.your-server.de) (Ping timeout: 252 seconds)
[08:34:16] *** Quits: tnez_ (~el@user/tnez) (Ping timeout: 252 seconds)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:40:14] <dba> Can somebody explain or provide a use case of using a none public variable or instance in python? I dont see the point of declaring a a non public variable __x and access it the same way print(__x)
[08:41:50] <KirkMcDonald> dba: They are largely pointless.
[08:42:42] *** Joins: tnez (~el@user/tnez)
[08:42:52] <KirkMcDonald> dba: They exist because private stuff seemed like the sort of thing that object-oriented languages should have. But the implementation is somewhat half-baked and I do not think I would ever use them.
[08:43:17] <KirkMcDonald> dba: If you want to indicate that something is internal to a class, you can just use one underscore, and people will get the message.
[08:44:49] <dba> KirkMcDonald: Thanks, using them within a class seems a solid use case :)
[08:48:46] *** Joins: Vonter (~Vonter@user/vonter)
[08:48:48] *** Joins: ColdKeyboard (~ColdKeybo@user/coldkeyboard)
[08:51:40] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[08:56:18] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:56:33] *** Joins: dre (~dre@2001:8003:c932:c301:4db3:5aed:63c6:cc67)
[08:56:38] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[08:56:47] *** Joins: shangxiao (~davids@124.187.193.187)
[08:58:51] *** Quits: tnez (~el@user/tnez) (Quit: %bye%)
[08:59:06] *** Joins: kib (~kib@user/kib)
[08:59:31] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Remote host closed the connection)
[09:00:53] *** Joins: Maikel (~Maikel@130.61.63.136)
[09:04:53] *** Joins: tnez (~el@user/tnez)
[09:06:35] *** Quits: y1n (~y1n@84-115-65-189.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[09:07:57] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 245 seconds)
[09:13:45] *** Joins: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it)
[09:17:53] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[09:18:16] *** Quits: System123 (~System123@net-37-179-171-3.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[09:20:03] *** Quits: greyhash (~greyhash@2601:2c6:c100:1f00::af26) (Quit: WeeChat 3.2)
[09:21:04] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca)
[09:21:32] *** Joins: upsala (~zcb@185.213.155.160)
[09:26:01] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 252 seconds)
[09:27:31] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[09:27:54] *** Joins: kib (~kib@user/kib)
[09:29:26] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[09:30:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[09:30:45] *** Quits: Lando-HoloNet (~Lando@user/lando-spacepimp) (Ping timeout: 265 seconds)
[09:31:49] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[09:32:09] *** Joins: fikran (~fikran@user/fikran)
[09:32:12] *** Quits: drew (~drew@user/drew) (Ping timeout: 265 seconds)
[09:32:58] *** Joins: emerent_ (~quassel@p200300cd5701a1ceba27ebfffed28a59.dip0.t-ipconnect.de)
[09:32:58] *** emerent is now known as Guest6295
[09:32:58] *** Quits: Guest6295 (~quassel@p200300cd5701a13cba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (calcium.libera.chat (Nickname regained by services)))
[09:32:58] *** emerent_ is now known as emerent
[09:33:14] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[09:35:26] *** Quits: Belxjander (~Belxjande@p1575007-ipoe.ipoe.ocn.ne.jp) (Ping timeout: 252 seconds)
[09:38:19] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[09:40:05] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[09:40:41] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[09:43:34] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[09:44:46] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 265 seconds)
[09:45:46] *** Joins: Roey (~Roey@user/Roey)
[09:46:42] *** Quits: AlanMD (~AlanMD@193.105.140.131) (Ping timeout: 265 seconds)
[09:48:32] *** Quits: nergar (~Nergar@177.225.152.61) (Read error: Connection reset by peer)
[09:48:54] *** Joins: AlanMD (~AlanMD@86.121.179.183)
[09:52:01] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[09:53:45] *** Quits: doc (~doc@user/doc) (Read error: Connection reset by peer)
[09:54:35] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[09:55:49] *** Quits: doko (~doko@2a02:8106:1a:7600:6594:c1f0:aa50:3cbc) (Remote host closed the connection)
[09:57:48] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[09:58:24] *** Joins: srhm (~srhm@user/srhm)
[09:59:22] *** Joins: resmo (~resmo@2a00:d420:9:8a00:176c:2ff:54a0:f9b7)
[10:00:23] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[10:03:46] *** Quits: resmo (~resmo@2a00:d420:9:8a00:176c:2ff:54a0:f9b7) (Ping timeout: 268 seconds)
[10:05:58] *** Quits: maum (~maum@1.245.147.30) (Quit: Client closed)
[10:08:54] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[10:10:59] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[10:11:06] *** Quits: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net) (Client Quit)
[10:11:38] *** Joins: akmod (~akmod@c-24-10-154-68.hsd1.ut.comcast.net)
[10:13:41] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:15:28] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Ping timeout: 252 seconds)
[10:15:42] *** Quits: DaPinkOne (~Dap@user/dap) (Ping timeout: 268 seconds)
[10:16:28] *** Quits: Samian (~Sami@user/samian) (Killed (NickServ (GHOST command used by Samian_!~Sami@174.27.107.153)))
[10:17:12] *** Joins: Samian (~Sami@user/samian)
[10:20:33] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[10:20:53] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[10:21:14] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 260 seconds)
[10:23:34] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 260 seconds)
[10:23:35] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[10:23:56] *** vinleod is now known as vdamewood
[10:27:09] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[10:29:30] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[10:33:33] *** Joins: DaPinkOne (~Dap@user/dap)
[10:35:01] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[10:35:21] *** Joins: zaquest (~notzaques@5.128.210.178)
[10:36:12] *** Quits: MrBungle (~MrBungle@2604:3d08:1788:dc00:61c4:f819:716b:e549) (Read error: Connection reset by peer)
[10:40:50] *** Quits: ska (~ska@user/ska) (Ping timeout: 260 seconds)
[10:42:12] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[10:46:24] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:27] *** Joins: eson123 (~eson123@118.69.128.37)
[10:47:04] *** Joins: seednode (~seednode@user/seednode)
[10:47:51] <eson123> is there any library in python can help me create sufficient testcases ? like i currently have a lot of testcases results for each testcase and they are really huge on their size, even if i am slightly wrong at one character, it's still counted as failed, but looking through each character and compare could be a pain, wondering if there is any library that if i fail, it will give me a bit details at which character that i got wrong ?
[10:47:55] *** Quits: ferz (~ferz@93-39-142-33.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[10:48:52] <aphysically> I'm too stupid to be too stupid for AsyncIO
[10:52:11] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[10:52:31] <aphysically> classes are nice I should make more classes
[10:52:42] *** Quits: davor_ (~davor@user/davor) (Ping timeout: 268 seconds)
[10:52:55] *** Joins: davor (~davor@user/davor)
[10:53:03] *** Joins: rendar (~rendar@user/rendar)
[10:53:45] *** Joins: ska (~ska@user/ska)
[10:56:43] <deniska> eson123: pytest displays some additional info on how asserts failed
[10:57:08] <eson123> awh ok got it
[10:58:41] <Jimmy2027> hi, what is the best way to declare dependencies for a python package? in setup.cfg, requirements.txt, setup.py, pyproject.toml? I'm a bit confused with the many options
[10:58:55] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 252 seconds)
[11:00:43] *** Joins: az (az@user/azz)
[11:00:54] *** Joins: palasso (~palasso@user/palasso)
[11:01:59] <az> hi, could someone please look at my script here, I've created ti with help from this channel. However now with decoration I'm passing functions inside the decorator function to make connection to the Grpc provider https://gitlab.com/uak/bchd-grpc-python-lib/-/blob/main/bchd_grpc_lib.py
[11:03:35] <az> like x = HitGrpc() then x.call_channel(x.get_data)()
[11:05:24] <energizer> Jimmy2027: https://python-poetry.org/
[11:08:03] *** Joins: manti7 (~manti7@176.10.104.94)
[11:11:00] *** Quits: nomic (~nomic@185.217.117.156) (Quit: Leaving)
[11:13:34] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[11:15:01] <aphysically> hmmmmm
[11:21:03] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:21:31] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[11:21:50] *** Joins: gggp (~textual@60.10.194.42)
[11:23:05] <aphysically> what sends a keyboardinterrupt in windows cmd/powershell? my friend says ctl c isn't working in cmd
[11:23:26] <Jimmy2027> hi energizer, thanks for the reference, this looks pretty cool! However using an whole new environment like this seems a bit limiting, people will need to have poetry to install my paykage?
[11:23:54] *** Joins: Wubull (~Thunderbi@user/wuniu)
[11:24:13] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[11:24:13] *** Wubull is now known as Wuniu
[11:26:28] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 252 seconds)
[11:28:37] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 252 seconds)
[11:29:05] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[11:29:58] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[11:30:06] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:30:33] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[11:31:03] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[11:34:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[11:34:32] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[11:38:03] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.2)
[11:39:10] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Ping timeout: 260 seconds)
[11:39:48] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[11:40:23] *** Joins: flokuehn (~flokuehn@muedsl-82-207-236-117.citykom.de)
[11:41:12] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[11:41:31] *** Joins: fikran (~fikran@user/fikran)
[11:41:33] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:42:50] *** Joins: saschi (~saschi@user/saschi)
[11:43:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[11:43:27] *** Joins: jug (~jug@user/jug)
[11:45:21] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[11:46:03] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[11:47:39] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[11:49:58] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[11:51:08] *** Joins: paul424 (~tom@ip-31-0-127-47.multi.internet.cyfrowypolsat.pl)
[11:53:22] *** Joins: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de)
[11:53:49] <paul424> IS there any chance that there is a POLISH version of GVR python's tutorial somwhere on the web ?
[11:53:58] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.2.1)
[11:55:32] *** Joins: gggp (~textual@60.10.194.42)
[11:55:36] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[11:56:08] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[11:57:15] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[12:00:54] *** Joins: pycode (~pycode@2001:b07:5d28:551:463a:8ccb:a71:902b)
[12:01:09] *** Joins: kosh (~kosh@user/kosh)
[12:01:10] *** Joins: frost (~frost@59.71.243.104)
[12:03:03] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2.1)
[12:04:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:05:13] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[12:08:00] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:12:42] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[12:12:55] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[12:14:01] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[12:14:38] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Quit: Leaving)
[12:15:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:15:20] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[12:16:22] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[12:16:58] *** Quits: gggp (~textual@60.10.194.42) (Ping timeout: 268 seconds)
[12:18:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:18:30] *** Joins: gggp (~textual@60.10.23.159)
[12:19:17] <The-Compiler> paul424: What GVR tutorial?
[12:21:21] <diverdude> I have  A = np.arange(12).reshape((3,4)) and X=[0,3];Y=[1,2] and I want to get the result [4,11]. How do I do that in a single expression? (no loops) NB. np is numpy
[12:22:50] *** Joins: devcpu (~rusty@d50-92-229-34.bchsia.telus.net)
[12:24:02] <Repiphany> diverdude: What's the relationship betweein A, X, Y and [4,11] supposed to be
[12:24:37] <diverdude> Repiphany: you know what the output of A = np.arange(12).reshape((3,4)) is right?
[12:24:58] <Repiphany> [[0,1,2,3],[4,5,6,7],[8,9,10,11]]
[12:25:23] <diverdude> yeah, so X and Y are indexes for values 4 and 11
[12:25:44] <diverdude> 4 is at position 0,1 and 11 is at position 3,2
[12:25:58] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 252 seconds)
[12:26:13] <Repiphany> No, A[X] = 3 and A[Y] = 6
[12:26:18] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[12:26:23] <Repiphany> A[3,2] is out of bounds
[12:27:02] <diverdude> yeah but A[2,3] is not
[12:27:06] <diverdude> and thats 11
[12:27:15] <Repiphany> You didn't mention [2,3] anywhere
[12:27:27] <diverdude> ok
[12:29:22] *** Joins: dericku7 (~dericku7@user/dericku7)
[12:30:24] <Repiphany> Ok, I sillied
[12:30:27] <Repiphany> A[Y, X]
[12:30:57] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:31:29] <diverdude> oh
[12:31:34] <diverdude> doh....its that easy
[12:31:34] <ssbr`> By any chance has anyone used pyoxidizer before / know how to get a basic config working? I tried running the examples in the docs and got a series of errors, the last of which I don't know how to fix: https://github.com/indygreg/PyOxidizer/pull/447
[12:31:38] <diverdude> thanks
[12:32:41] *** Quits: dericku7 (~dericku7@user/dericku7) (Quit: Leaving)
[12:33:41] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[12:34:28] *** Joins: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net)
[12:34:28] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[12:34:42] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:35:10] *** Quits: dba (uid502594@id-502594.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:35:30] <aphysically> there's so many ways to loop over lines in stderr good lord
[12:35:30] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:08] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Read error: Connection reset by peer)
[12:37:22] <aphysically> I guess there's nothing wrong with for line in result.stderr as long as I'm consuming
[12:37:53] <aphysically> I was doing stuff check result.poll() and messing with readline()
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:21] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[12:42:52] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 268 seconds)
[12:45:58] *** Joins: Samian (~Sami@user/samian)
[12:46:11] <Samian> what do you guys think about using a generator for consistency testing? I have a cpu code path, and a gpu code path, a tensorflow code path, and a pytorch code path.  I want to make sure the calculations are identical regardless of what's used, cpu, gpu, tensorflow or pytorch. It shouldn't matter.
[12:46:20] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:46:50] <Samian> a generator with a bunch of yield statements would let me check values at different points of the code path
[12:49:43] *** Joins: freeworld (~vit@chello085216193138.chello.sk)
[12:49:44] *** Quits: gggp (~textual@60.10.23.159) (Quit: Textual IRC Client: www.textualapp.com)
[12:53:05] *** Joins: dcaro_ (~dcaro@user/dcaro)
[12:53:59] <aphysically> I guess people want to protect against an EOF occurring before the process exits?
[12:54:05] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 260 seconds)
[12:54:08] *** dcaro_ is now known as dcaro
[12:56:05] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[12:58:23] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[12:58:39] <Wulf> Samian: and you would run all code paths in turns and compare the values? sounds good.
[12:59:15] <Wulf> Samian: zip may come in very handy here.
[12:59:44] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 268 seconds)
[13:00:35] <Samian> zip ?
[13:00:41] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:00:45] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[13:01:45] *** Joins: brabrax (~brabrax@user/brabrax)
[13:01:52] <Wulf> Samian: for cpu, gpu, tensor, torch in zip(gen_cpu(), gen_gpu(), gen_tensor(), gen_torch()): ...
[13:01:56] *** Joins: califax (~califax@user/califx)
[13:02:16] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[13:02:44] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[13:03:38] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 260 seconds)
[13:05:21] *** Quits: AlanMD (~AlanMD@86.121.179.183) (Ping timeout: 265 seconds)
[13:05:36] <Samian> is the point of zipping generators that I'll be able to call __next__() and that's called for all the generators in the zip? something like that?
[13:05:52] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:06:07] *** Quits: rwb (~augh@theguntretort.com) (Ping timeout: 252 seconds)
[13:07:02] *** Joins: rwb (~augh@theguntretort.com)
[13:07:02] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:07:20] *** Joins: AlanMD (~AlanMD@193.105.140.131)
[13:07:50] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[13:08:03] *** Joins: TranquilEcho (~grom@user/tranquilecho)
[13:08:34] *** Joins: dcaro_ (~dcaro@user/dcaro)
[13:08:44] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 265 seconds)
[13:08:44] *** dcaro_ is now known as dcaro
[13:09:02] *** Joins: eson123 (~eson123@118.69.128.37)
[13:11:16] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[13:11:46] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2.1)
[13:12:22] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:12:40] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 240 seconds)
[13:13:13] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[13:14:04] *** Quits: lethu (~lethu@user/lethu) (Remote host closed the connection)
[13:14:15] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:14:22] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Quit: ZNC - http://znc.in)
[13:14:41] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (iridium.libera.chat (Nickname regained by services)))
[13:14:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:11] *** Joins: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net)
[13:16:15] *** Quits: eson123 (~eson123@118.69.128.37) (Quit: Leaving)
[13:17:17] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[13:17:40] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:17:42] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[13:18:34] *** Quits: Harlin (~DonQixote@2603:300b:663:e800:ed29:6f25:3c3f:341e) (Ping timeout: 260 seconds)
[13:18:43] *** Joins: brabrax (~brabrax@user/brabrax)
[13:18:59] *** Joins: califax (~califax@user/califx)
[13:19:40] *** Quits: rama (~rama@c-24-130-92-222.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[13:19:45] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 260 seconds)
[13:20:09] <PamiPetteri> https://pastebin.com/EhK7LbJr
[13:20:49] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[13:20:51] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:22:32] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[13:26:37] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Ping timeout: 265 seconds)
[13:26:58] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[13:27:09] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[13:29:24] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[13:29:30] *** Joins: gggp (~textual@60.10.194.42)
[13:29:40] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[13:29:41] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[13:30:07] *** Quits: syphar (~syphar@2001:470:69fc:105::2ad6) (Quit: You have been kicked for being idle)
[13:30:49] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[13:31:24] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Client Quit)
[13:32:19] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[13:32:37] *** Quits: gggp (~textual@60.10.194.42) (Client Quit)
[13:34:48] *** Joins: eson123 (~eson123@118.69.128.37)
[13:34:54] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 260 seconds)
[13:35:35] <eson123> little help please, i was messing with pytest and i tried to create a class with two methods, each method has an assertion within it, i tried to run pytest with "pytest file.py" but it just keep on showing "no tests ran", is there anything else i can do with it ?
[13:36:30] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:36:31] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[13:36:50] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:37:28] *** Quits: pycode (~pycode@2001:b07:5d28:551:463a:8ccb:a71:902b) (Ping timeout: 252 seconds)
[13:37:45] *** Joins: califax (~califax@user/califx)
[13:37:58] *** Joins: brabrax (~brabrax@user/brabrax)
[13:38:24] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:38:30] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:38:36] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Read error: Connection reset by peer)
[13:38:57] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:39:42] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Read error: Connection reset by peer)
[13:40:06] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:40:21] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Remote host closed the connection)
[13:41:14] <deniska> eson123: pytest autodiscovers unittest style tests (classes inhereting from unittest.TestCase) or its own style of tests, top level functions with names starting with test_
[13:42:41] <eson123> deniska: well according to what you said, this should work https://hatebin.com/avzttualjq, but it doesn't seem to work
[13:42:58] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:43:11] <deniska> eson123: I don't think `Test_` should be capitalized
[13:43:21] <eson123> oh oops
[13:43:29] <eson123> yea it's not :P
[13:44:10] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Read error: Connection reset by peer)
[13:44:58] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:44:59] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[13:45:32] <Samian> any reason to have if foo is not None:  instead of merely if foo: ?
[13:45:55] *** Joins: brabrax (~brabrax@user/brabrax)
[13:46:11] *** Joins: califax (~califax@user/califx)
[13:47:09] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[13:48:26] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[13:48:54] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[13:48:57] <deniska> to distinguish between None and an otherwise falsy object
[13:49:18] <deniska> sometimes it's an important difference, sometimes it's not, but even when it's not, sometimes the intent is more clear if you spell it out
[13:50:33] *** Joins: int3l (~int3l@78-83-124-208.spectrumnet.bg)
[13:50:53] *** Joins: fikran (~fikran@user/fikran)
[13:51:09] <supakeen> Shouldn't `marshall.loads(...)` return code objects?
[13:51:12] *** Parts: eson123 (~eson123@118.69.128.37) (Leaving)
[13:51:41] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:51:44] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[13:52:48] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:52:49] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[13:53:23] <deniska> supakeen: I think it can return any kind of python object?
[13:53:50] *** Joins: brabrax (~brabrax@user/brabrax)
[13:53:57] <supakeen> mrm
[13:54:00] <supakeen> yep
[13:54:02] *** Joins: califax (~califax@user/califx)
[13:54:04] <deniska> https://docs.python.org/3/library/marshal.html lists types it supports
[13:56:33] <supakeen> needed more coffe ty deniska
[13:59:06] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[13:59:07] *** Quits: brabrax (~brabrax@user/brabrax) (Quit: ZNC 1.8.2 - https://znc.in)
[14:00:06] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:00:12] *** Joins: brabrax (~brabrax@user/brabrax)
[14:00:19] *** Joins: califax (~califax@user/califx)
[14:01:03] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:01:50] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:02:07] *** Joins: thiras (~thiras@user/thiras)
[14:03:11] *** Joins: Wuniu (~Thunderbi@user/wuniu)
[14:03:43] *** Quits: KeiraT (~k@lulzsec.co.uk) (Ping timeout: 252 seconds)
[14:04:47] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[14:05:02] *** Quits: bomb-on (~bomb-on@213.220.122.129) (Read error: Connection reset by peer)
[14:05:43] *** Joins: sandb0y (~pirate@user/sandb0y)
[14:06:40] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[14:07:18] *** Joins: Wubull (~Thunderbi@user/wuniu)
[14:07:23] *** Joins: KeiraT (~k@lulzsec.co.uk)
[14:07:35] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Ping timeout: 260 seconds)
[14:07:36] *** Wubull is now known as Wuniu
[14:07:46] *** Quits: Wuniu (~Thunderbi@user/wuniu) (Client Quit)
[14:08:58] <Samian> Which do you like better? first or second way in this link: https://bpa.st/6P2Q
[14:09:34] <Samian> Does it boil down to aesthetic taste?
[14:09:55] *** Joins: upsala (~zcb@185.213.155.160)
[14:10:19] <deniska> Samian: they're not strictly equivalent, if threads are involved, the former is, uhm, atomic
[14:14:47] *** Quits: henbruas (~henbruas@ti0003a400-3211.bb.online.no) (Quit: ZNC 1.8.2 - https://znc.in)
[14:14:48] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:15:06] *** Joins: henbruas (~henbruas@ti0003a400-3211.bb.online.no)
[14:15:21] <paul424> The-Compiler, https://docs.python.org/3/tutorial/
[14:17:38] *** Joins: y1n (~y1n@84-115-64-129.wifi.dynamic.surfer.at)
[14:18:48] <Samian> thanks deniska that makes sense.
[14:19:10] <The-Compiler> paul424: I doubt that's been written by GVR, but I'm not aware of a Polish translation
[14:24:40] *** Quits: dxrt (~dxrt@user/dxrt) (Ping timeout: 240 seconds)
[14:24:50] *** Quits: steam (~steam@user/steam) (Ping timeout: 260 seconds)
[14:27:16] *** Quits: paul424 (~tom@ip-31-0-127-47.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:29:24] *** Joins: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se)
[14:34:46] *** Quits: y1n (~y1n@84-115-64-129.wifi.dynamic.surfer.at) (Ping timeout: 265 seconds)
[14:40:05] *** Joins: georgios (~georgios@user/georgios)
[14:42:49] *** Quits: zepolen (~zepolen@2a02:587:8611:f562:3143:d2eb:f2a7:fd9c) (Ping timeout: 252 seconds)
[14:46:13] <hexnewbie> Hmm, what are the gotchas of appending to a list that's being iterated over? I want to implement an extensible iterator, and L=[it]; return chain.from_iterable(L) in CPython gives me the exact behaviour I need, so I'm wondering if I need to bother writing complex code that keeps tracks of iterables and which has completed, etc.
[14:47:34] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::4433)
[14:47:39] *** Joins: y1n (~y1n@84-115-64-129.wifi.dynamic.surfer.at)
[14:48:52] *** Quits: carl- (~carl-@c-138ee555.02-180-73746f39.bbcust.telenor.se) (Ping timeout: 252 seconds)
[14:50:24] <ssbr`> hexnewbie: I don't know what you mean "gotchas". It iteration during mutation works about as you'd expect, maybe a little better. It's not a great idea and is very confusing.
[14:51:11] <betelgeuse> is it possible to add midfix operators
[14:51:26] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[14:52:19] <ssbr`> betelgeuse: Python doesn't allow defining new operators, only overriding existing ones.
[14:52:32] *** Joins: dxrt (~dxrt@user/dxrt)
[14:52:37] <Samian> is there a way to avoid redundancy when having many list comprehensions with identical for loops?  like, a = [k for k in range(4)]; b = [k*2 for k in range (4)]; c = ["hi" for k in range(4)]
[14:53:32] *** Joins: steam (~steam@user/steam)
[14:54:07] <ssbr`> Samian: none that would surprise you. You can share the iterable between them, migrate them all to one big loop, etc.
[14:54:45] <Repiphany> a, b, c = zip(*[(k, k*2, "hi") for k in range(4)])
[14:55:02] <Samian> ah yes that *
[14:55:32] <Samian> thanks Repiphany
[14:55:37] <Samian> thanks ssbr`
[14:58:00] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2.1)
[15:03:16] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[15:04:42] *** Quits: grawity (grawity@star.nullroute.eu.org) (Remote host closed the connection)
[15:04:55] *** Quits: y1n (~y1n@84-115-64-129.wifi.dynamic.surfer.at) (Ping timeout: 252 seconds)
[15:05:07] *** Joins: grawity (grawity@star.nullroute.eu.org)
[15:06:14] *** Joins: zepolen (~zepolen@2a02:587:8608:c7cb:baf8:945:fb18:1cfa)
[15:13:04] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[15:13:25] *** Joins: Naan (~naan@user/naan)
[15:14:30] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[15:15:32] <hexnewbie> I want to have an iterator that provides peek(), empty(), append() and extend() - https://bpa.st/2T6A - and that works, but I was just wondering if I were to abuse this .append() a lot, wouldn't it be saner to (ab)use two lists to which append *while* chain.from_iterable is iterating over both?
[15:16:48] <hexnewbie> so .append() justs appends to the last list that chain would eventually iterate from, and .extend() would append to the list of iterables chain is iterating over (without introducing code into __next__(), etc.)
[15:17:28] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[15:18:03] *** Joins: y1n (~y1n@213162073040.public.t-mobile.at)
[15:22:30] <nedbat> hexnewbie: saner in what way?
[15:24:16] <hexnewbie> nedbat: There wouldn't be a deep nested chain() possibly exceeding the recursion limit, for one. Appending an item by it = chain(it, [item]) is sane once, but a 1000 times would be problematic (I'm not going to do that a 1000 times myself, but should someone else use that code)
[15:25:36] <hexnewbie> chain() objects don't directly allow you to add iterables to them, but L=[]; chain.from_iterable(L) allows to append to the underlying list that feeds the chain() object
[15:27:00] <hexnewbie> But I'm not sure if that's a CPython implementation detail, or actually how it's supposed to be
[15:28:13] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:28:24] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:28:38] *** Joins: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi)
[15:28:38] <nedbat> hexnewbie: i see: the very last line is the recursion you are worried about?
[15:29:11] <nedbat> hexnewbie: does that cause recursion?
[15:30:37] <hexnewbie> Well, yeah, my current code does chain(chain(chain(chain(it, [x]), [y]), [z]),  to add three items, which would make the next() for the last three elements cause 3-level nested __next__() calls. With 1000 items, that would 1000 levels
[15:31:19] <hexnewbie> And potentially make iteration over a resulting iterator of length n to be O(n**2), which is kind of insane.
[15:32:42] *** Joins: gggp (~textual@60.10.194.42)
[15:32:46] *** Quits: gggp (~textual@60.10.194.42) (Client Quit)
[15:33:49] *** Joins: Auron (Auron956@user/auron)
[15:34:28] *** Quits: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it) (Ping timeout: 252 seconds)
[15:34:50] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Read error: Connection reset by peer)
[15:36:09] *** Quits: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[15:37:13] *** Quits: brylie (~Thunderbi@81-197-199-179.elisa-laajakaista.fi) (Quit: brylie)
[15:42:21] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[15:44:30] <hexnewbie> I have three versions I can't choose from - https://bpa.st/T3UA#1L78 :)
[15:49:32] *** Joins: besnn (~besnn@user/besnn)
[15:49:43] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[15:52:53] *** Joins: Abrax- (~Abrax@user/abrax)
[15:53:21] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:53:21] *** Quits: Omega037 (~Omega037@047-024-168-024.res.spectrum.com) (Killed (NickServ (GHOST command used by Omega037-B)))
[15:55:55] *** Quits: Abrax (~Abrax@user/abrax) (Ping timeout: 252 seconds)
[15:57:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[15:57:42] *** Joins: wyclif (~wyclif@user/wyclif)
[15:58:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[15:58:26] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.2.1)
[16:00:16] *** Joins: fikran (~fikran@user/fikran)
[16:00:30] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[16:01:18] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:02:07] *** Joins: plastico (~plastico@neomutt/plastico)
[16:02:22] *** Quits: audio (~audio@2603-8081-1800-6a6f-01cb-ecb6-e5c5-d0dc.res6.spectrum.com) (Ping timeout: 260 seconds)
[16:02:24] *** Joins: rsx (~dummy@ppp-188-174-135-127.dynamic.mnet-online.de)
[16:02:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[16:03:33] *** Joins: wyclif (~wyclif@user/wyclif)
[16:08:02] *** Abrax- is now known as Abrax
[16:10:54] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 268 seconds)
[16:12:24] <aphysically> I can't believe I didn't find deque last time I looked for something like it
[16:13:04] <aphysically> (usecase: storing most recent n lines of subprocess output to dump in case of unexpected error even if loglevel wasn't high)
[16:13:31] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 252 seconds)
[16:14:55] *** Joins: Payam (~Payam@c83-250-236-236.bredband.tele2.se)
[16:16:21] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[16:19:15] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[16:22:02] *** Joins: besnn (~besnn@user/besnn)
[16:27:58] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[16:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[16:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:09] *** Joins: fdan (~fdan@103.215.168.1)
[16:32:28] *** Joins: gggp (~textual@60.10.194.42)
[16:33:09] <fdan> in programming what would be the fast big(o)
[16:33:22] <fdan> is it O(1) or O(nlogn)
[16:35:13] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Remote host closed the connection)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:37:52] *** Quits: derpadmin (~Anonymous@69-165-203-228.cable.teksavvy.com) (Ping timeout: 252 seconds)
[16:38:37] *** Quits: frost (~frost@59.71.243.104) (Quit: Connection closed)
[16:39:55] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 252 seconds)
[16:40:06] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:41:03] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[16:42:08] *** Quits: dre (~dre@2001:8003:c932:c301:4db3:5aed:63c6:cc67) (Ping timeout: 268 seconds)
[16:45:50] *** Quits: y1n (~y1n@213162073040.public.t-mobile.at) (Ping timeout: 268 seconds)
[16:49:23] <nedbat> fdan: O(1) is the best, though it might not be the fastest
[16:51:05] *** Joins: Polyinsecure (~Polyinsec@180.244.128.179)
[16:51:43] <fdan> nedbat which one would be the fastest
[16:52:40] <nedbat> fdan: it depends.
[16:52:53] <nedbat> fdan: probably O(1)
[16:52:58] <Repiphany> Big O notation doesn't tell you anything about the actual speed, only how it changes with the size of the input
[16:53:24] <nedbat> "how code slows as data grows"
[16:58:01] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[17:02:47] <The-Compiler> and of course nedbat has a blog post on that :)
[17:02:50] <The-Compiler> https://nedbatchelder.com/text/bigo.html
[17:03:00] <The-Compiler> sorry, a talk actually!
[17:03:45] <ssbr`> I do not feel smart today: https://github.com/gristlabs/asttokens/pull/74/files
[17:04:01] *** Quits: gggp (~textual@60.10.194.42) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:04:23] <ssbr`> The AST changes in 3.9 are really nice, every single one I've encountered so far. They're doing good work, huh.
[17:13:25] *** Joins: pycurious (~Adium@user/pycurious)
[17:13:59] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[17:16:44] *** Quits: Polyinsecure (~Polyinsec@180.244.128.179) (Quit: Leaving)
[17:17:12] <control> hello, ive installed conda and rapids on ubuntu. while trying to run python script with import cudaf, python says 'no module named cudf'. what im doing wrong?
[17:17:24] *** Joins: Macuser (~Macuser@216.30.159.201)
[17:18:08] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[17:20:50] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[17:21:23] <grym> control: well, have you installed cudf
[17:21:29] *** Joins: srhm (~srhm@user/srhm)
[17:21:47] <grym> https://github.com/rapidsai/cudf#conda
[17:22:08] <grym> control: and, is the python you're calling the python you installed it into
[17:22:11] <control> conda create -n rapids-21.08 -c rapidsai -c nvidia -c conda-forge \ blazingsql=21.08 cudf=21.08 python=3.8 cudatoolkit=11.2
[17:22:21] <control> i ran this command and its installed
[17:22:34] <grym> control: ok.  are you running the python from that environment?
[17:22:39] <grym> (you may not be)
[17:23:01] <control> how can i check that?
[17:23:28] <control> its freshly installed using conda
[17:23:58] <grym> iirc there's a conda env activate or conda env workon command
[17:24:12] <grym> i don't use conda much, but i know that creating an environment and using it are not the same step
[17:24:34] <grym> (a conda env is a separate copy of python + dependencies, like a virtual environment is)
[17:24:56] <grym> (and deps you install in it aren't visible to other envs or the base conda env)
[17:25:37] <control> trying to figure it out. thanks
[17:27:14] <grym> conda likes to take over your shell, so you'll generally know when your environment is activated because $PS1 will change
[17:27:25] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[17:28:12] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 250 seconds)
[17:30:55] <sveinse> Does anyone know if there is an itertools variant of itertools.combinations() where it returns all combinations of less than equal to r? E.g. comb("ABC",3) would return "A", "B", "C", "AB", "AC" ... "ABC".
[17:31:15] <sveinse> I've made my own implementation of it: def all_combinations(iterable, r): return itertools.chain(*[itertools.combinations(iterable, n) for n in range(1, r+1)])
[17:31:55] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:37:32] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[17:37:34] <no_gravity> Good Afternoon
[17:37:56] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[17:38:07] *** Joins: ravan (~ravan@user/ravan)
[17:38:10] <no_gravity> What could be a good name for a variable that is true when for a given product it is unclear which exact product it is? (This usually happens when a product listing does not include a part number. Or the part number is unknown in the manufacturers database.)
[17:39:02] <The-Compiler> no_gravity: product_unknown?
[17:39:12] <The-Compiler> no_gravity: or perhaps product_incomplete
[17:39:22] <The-Compiler> no_gravity: or "degraded"
[17:39:46] <no_gravity> The-Compiler: Hmm.. the product is not really unknown. But we don't know exactly which one it is.
[17:39:57] <The-Compiler> schroedingers_product
[17:39:59] <The-Compiler> :D
[17:40:05] <sveinse> hahaha
[17:40:09] <deniska> no_gravity: so it's… unidentified
[17:40:15] <The-Compiler> that's nice actually
[17:41:21] <The-Compiler> orphan(ed) or stray would be some more ideas
[17:42:10] <no_gravity> deniska: Hmm.. that is not bad.
[17:42:15] <no_gravity> The-Compiler: lol
[17:42:31] *** Quits: PaddyF (~PaddyF@user/paddyf) (Quit: bye)
[17:43:01] <phy1729> indeterminate
[17:43:27] <PamiPetteri> would you say I should rather program via Python with my small mathematical programs than C or C++?
[17:44:01] <The-Compiler> PamiPetteri: probably! There's a great ecosystem around scientific computing with Python.
[17:44:31] <The-Compiler> no_gravity: "There are two hard problems in computer science: Naming things, cache invalidation, and off-by-one errors"
[17:45:11] <no_gravity> The-Compiler: That's why I am here.
[17:45:22] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[17:45:36] <sveinse> PamiPetteri: Python and maths go very well together. Pythons also has lots of packages that can offload heavy algorithms to optimized libraries and HW
[17:45:41] <no_gravity> I tend to call it "unidentified". As suggested by deniska.
[17:45:53] *** Joins: minip (~minip@user/minip)
[17:47:30] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[17:47:37] *** Quits: ssbr` (~ssbr@python/site-packages/ssbr) (Ping timeout: 265 seconds)
[17:48:06] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[17:50:26] *** Quits: Madda (~Madda@150.249.9.51.dyn.plus.net) (Remote host closed the connection)
[17:50:36] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[17:50:58] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[17:52:01] *** Joins: Madda (~Madda@150.249.9.51.dyn.plus.net)
[17:53:43] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[17:54:39] *** Joins: Roey (~Roey@user/Roey)
[17:55:12] <jinsun> sveinse: `["".join(x) for x in itertools.chain.from_iterable(itertools.combinations("ABC", x) for x in range(1, 4))]`
[17:55:25] <gitesh> a, b, c = [1, 2, 3] this is working
[17:55:36] <gitesh> I thought kind of this thing only works with tuple because tuple packing and unpacking thing
[17:55:50] <jinsun> it is iterable unpacking actually
[17:55:53] <The-Compiler> gitesh: unpacking works with anything that's iterable
[17:56:01] <gitesh> oh
[17:56:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[17:56:11] <The-Compiler> gitesh: e.g.   zero, one, two = range(3)
[17:56:28] <gitesh> cool i had thought on only tuple does it. thanks
[17:57:19] *** Joins: wyclif (~wyclif@user/wyclif)
[17:57:55] *** Parts: no_gravity (~no_gravit@user/no-gravity/x-5639427) ()
[17:58:08] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[17:59:17] <sveinse> jinsun: yeah, rewriting it into `itertools.chain.from_iterable(itertools.combinations(iterable, n) for n in range(1, r+1))` saved med the list comp in there.Thanks
[18:00:49] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:02:13] <rannnn8888> Hey someone know after i login to my user i want get specipic request  headers (get token from here) but for request in driver.requests:
[18:02:13] <rannnn8888>   print(request.headers) # <----------- Request headers but dont get here this
[18:04:02] *** Joins: ssbr` (~ssbr@python/site-packages/ssbr)
[18:05:20] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[18:07:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:08:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:08:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[18:08:15] *** Joins: wyclif (~wyclif@user/wyclif)
[18:09:57] *** Joins: fikran (~fikran@user/fikran)
[18:12:25] *** Quits: shangxiao (~davids@124.187.193.187) (Quit: WeeChat 3.2.1)
[18:12:46] <gitesh> Can you look at this --> https://bpa.st/DPKQ
[18:12:46] <grym> PamiPetteri: if i wanted a more performant / lower level / older language for numerics than python, i'd reach for fortran, not C
[18:13:01] <gitesh> I want float values on line 9 output
[18:13:02] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[18:13:09] *** Joins: ubert (~Thunderbi@91.141.74.182.wireless.dyn.drei.com)
[18:13:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[18:13:46] *** Joins: wyclif (~wyclif@user/wyclif)
[18:13:56] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e075:fc2f:468:25fc)
[18:15:52] *** Joins: junktext (~junktext@109.201.152.165)
[18:17:09] *** Joins: blackout69 (~blackout6@mob-2-43-214-4.net.vodafone.it)
[18:17:54] *** Joins: Klinda (~klinda@2.227.251.209)
[18:19:07] <grym> gitesh: print((a/b).astype(float)), probably
[18:19:26] *** Joins: Rififi (~Thunderbi@Vikidia/Rififi)
[18:19:29] <Klinda> what ide is commonly used for python in linux? is kate enough?
[18:20:16] <grym> Klinda: in no particularly order, vscode, pycharm, vim, emacs are all very common choices
[18:20:38] <grym> Klinda: kate will work, so will things like thonny or spyder, if you're used to matlab/R
[18:20:38] <carlio> you can get atom to work too
[18:20:47] *** Parts: Rififi (~Thunderbi@Vikidia/Rififi) (Au-revoir le canal !)
[18:20:51] <grym> sublime was once very common and is now i think less so, but still a good editor
[18:21:57] <Macuser> So I'm supposed to create a time vector named time that is as long as the vector X that has time between samples equal to 1/Y. I feel like that just means 0:1/Y:length(X)
[18:22:00] <Macuser> but that's wayyy too long
[18:22:09] <Macuser> what other interpretation is ther
[18:22:27] <Klinda> thanks carlio, grym I will roll a dice to see what use :D
[18:22:32] *** Quits: iflema (~ian@user/iflema) (Quit: iflema)
[18:23:21] *** Joins: heco (~redrum@user/redrum88)
[18:23:50] <deniska> before going with vim, I used gedit for a while
[18:24:48] *** Quits: minip (~minip@user/minip) (Remote host closed the connection)
[18:25:02] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:26:47] *** Joins: bomb-on (~bomb-on@213.220.122.129)
[18:27:58] *** Quits: Samian (~Sami@user/samian) (Ping timeout: 260 seconds)
[18:28:43] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:29:22] *** Quits: jazzy (~jaziz@2600:380:c03c:c2e6:bd81:c730:db73:37a) (Ping timeout: 260 seconds)
[18:29:27] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[18:31:00] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[18:31:21] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[18:31:21] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:31:52] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:32:17] *** Joins: ub (~Thunderbi@178.165.161.213.wireless.dyn.drei.com)
[18:32:32] *** Joins: pycurious (~Adium@user/pycurious)
[18:32:40] *** Quits: ubert (~Thunderbi@91.141.74.182.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[18:32:40] *** ub is now known as ubert
[18:33:42] *** Joins: worker57 (~worker57@user/worker57)
[18:34:17] *** Joins: Atque (~Atque@user/atque)
[18:36:40] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 240 seconds)
[18:37:29] *** Quits: Axy (~Axy@user/axy) (Read error: Connection reset by peer)
[18:37:43] *** Joins: LabMonkey (~LabMonkey@2602:306:cf62:e270:d168:2fc:f772:3f66)
[18:38:59] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[18:40:11] *** Joins: jamer05 (~jamer05@user/jamer05)
[18:40:57] <jamer05> hi
[18:40:57] *** Joins: Axy (~Axy@user/axy)
[18:41:02] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:4450:4ddd:1389:48d6) (Ping timeout: 260 seconds)
[18:41:36] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-75b6-b217-124b-0862.res6.spectrum.com)
[18:43:32] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[18:43:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[18:44:34] *** Joins: leighbb (~leighbb@user/leighbb)
[18:45:42] *** Quits: ubert (~Thunderbi@178.165.161.213.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[18:46:02] *** Quits: leighbb (~leighbb@user/leighbb) (Client Quit)
[18:48:40] *** Quits: tachoknight (~tachoknig@2600:1700:3060:3ee0:3475:50b1:8fcd:e401) (Ping timeout: 240 seconds)
[18:48:46] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:14de:bbb5:b3c1:e78b)
[18:50:15] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[18:51:25] *** Joins: tachoknight (~tachoknig@2600:1700:3060:3ee0:a484:fed4:af15:fa66)
[18:52:45] *** Parts: blackout69 (~blackout6@mob-2-43-214-4.net.vodafone.it) ()
[18:52:57] *** Quits: jamer05 (~jamer05@user/jamer05) (Quit: WeeChat 2.8)
[18:54:20] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[18:58:25] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 268 seconds)
[18:58:28] *** Joins: Gurkenglas (~Gurkengla@dslb-002-207-014-195.002.207.pools.vodafone-ip.de)
[18:59:58] <grym> Macuser: np.linspace
[19:00:08] <Macuser> i got it grym
[19:00:09] <Macuser> thanks
[19:01:09] *** Joins: SincereFox (uid337158@user/sincerefox)
[19:02:09] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:02:12] *** Joins: akk (~akk@75.161.146.115)
[19:02:33] <SincereFox> Hey, is it a bad practice to use * for imports. As in from tkinter import *
[19:03:15] <carlio> it's not ideal, as it can shadow other imports or variables
[19:03:15] *** Quits: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[19:03:19] <jinsun> SincereFox: yes it is bad
[19:05:13] <jinsun> import only what you need and make it easy for the linters and IDEs to figure out where stuff came from
[19:05:38] *** Joins: demophoon (~demophoon@c-24-21-106-28.hsd1.or.comcast.net)
[19:06:12] <jinsun> if you use any linter (you should), it would complain about it anyway
[19:07:48] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[19:09:47] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[19:10:03] *** Quits: rany (~rany@user/rany) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[19:10:13] *** Quits: worker57 (~worker57@user/worker57) (Quit: Lost terminal)
[19:10:15] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[19:11:10] <elkclone> :D
[19:11:13] *** Joins: rany (~rany@user/rany)
[19:11:50] *** Quits: Auron (Auron956@user/auron) (Remote host closed the connection)
[19:12:41] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 265 seconds)
[19:12:52] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[19:14:01] *** Joins: Omega037 (~Omega037@047-024-168-024.res.spectrum.com)
[19:15:04] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 268 seconds)
[19:15:41] <SincereFox> Thank you carlio; that makes sense.
[19:15:41] <SincereFox> Thank you too jinsun
[19:16:52] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[19:18:22] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 260 seconds)
[19:18:26] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[19:19:14] *** Joins: ham5urg (~ham5urg@2a04:4540:680f:4000:ae67:5dff:fe1e:ec6d)
[19:19:29] <ham5urg> I try to match a user input with [^\"\p{L}\p[N]]{0,128} . I would like to match anything except " and control characters (don't want to be injected with weird stuff)
[19:19:49] <ham5urg> I use pyparsing with anything = pyparsing.Regex("[^\"\p{L}\p[N]]{0,128}")
[19:20:00] <ham5urg> But the interpreter breaks with re.error: bad escape \p at position 5
[19:20:12] <ham5urg> What am I doing wrong?
[19:20:36] <The-Compiler> ham5urg: you'll need to use a raw string, i.e. pyparsing.Regex(r"...")
[19:20:55] <The-Compiler> ham5urg: otherwise, escapes (like \n and such) are interpreted by Python rather than being part of the regex syntax
[19:21:18] <ham5urg> The-Compiler, I see. Will try
[19:22:28] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 268 seconds)
[19:23:19] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 265 seconds)
[19:23:20] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[19:23:46] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[19:24:06] *** Joins: blackout69 (~blackout6@mob-2-43-214-4.net.vodafone.it)
[19:25:00] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:25:24] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[19:26:15] *** Joins: andrewSC (~andrewSC@archlinux/trusteduser/andrewSC)
[19:27:40] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[19:28:08] *** Joins: georgios (~georgios@user/georgios)
[19:28:26] *** Quits: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com) (Quit: GoodBye)
[19:32:04] *** Joins: kosh (~kosh@user/kosh)
[19:32:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[19:33:15] <ham5urg> I'm using debian and its packages are a bit outdated sometimes. Is there a way to see which regex version implemented \p support?
[19:34:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:34:46] <ham5urg> My version is 3.7.3
[19:35:37] <foo> Is there a way to get the class name from within a class? Such as __name__ ?
[19:36:24] <Yhg1s> foo: from within a method in the class, or from within the class body?
[19:36:56] <grym> i'm not familiar with \p
[19:37:07] <grym> what's it supposed to do
[19:37:12] *** Joins: m1n10n (~r41d1n@cpe-76-184-204-251.tx.res.rr.com)
[19:37:18] <Yhg1s> ham5urg: I don't think that version of Python exists.
[19:37:22] <jinsun> yeah I don't see any \p even in the latest docs, https://docs.python.org/3/library/re.html
[19:37:48] <carlio> foo: instances of a class have a __class__ attribute, which has a __name__ attribute
[19:38:01] <foo> Yhg1s: hmm, I'm using SQLAlchemy and DB tables are within a class. And I'm asking for __repr__ so I can copy/paste things... so within a method
[19:38:03] <Yhg1s> ham5urg: there is the third-party 'regex' module that does support \p, though.
[19:38:11] <Yhg1s> foo: __class__.__name__.
[19:38:19] <foo> Yhg1s: thank you
[19:38:22] <Yhg1s> foo: however, for __repr__, you almost certainly want self.__class__.__name__ instead.
[19:38:23] <grym> looks like codePoint
[19:38:24] <grym> ?
[19:38:31] <foo> Yhg1s: yup, thank you!
[19:38:36] <ham5urg> Ok, I will change to \w instead of \p. I hope this is safe not to get ctrl-chars injected.
[19:38:48] <grym> ham5urg: that'll be fine, yeah
[19:42:19] *** Joins: naterlater (~Nathan22@199.249.111.186)
[19:42:48] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[19:43:10] *** abc_ is now known as zwindl
[19:43:16] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:43:56] *** Joins: Atque (~Atque@user/atque)
[19:49:04] *** Joins: c10l8 (~c10l@user/c10l)
[19:49:25] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 260 seconds)
[19:51:52] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 252 seconds)
[19:51:52] *** c10l8 is now known as c10l
[19:54:26] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[19:55:17] <gitesh> are Exceptions non-sequential?
[19:59:26] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 260 seconds)
[20:01:14] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:03:53] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[20:04:10] *** Joins: dez (uid92154@user/dez)
[20:04:15] <grawity> not sure what "non-sequential" even means in this context
[20:06:08] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Quit: ayustae)
[20:07:07] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:08:37] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[20:10:06] *** Quits: Plyht (uid433484@id-433484.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:12:44] *** Quits: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net) (Quit: Bye)
[20:13:04] *** Joins: Dantali0n (~Dantali0n@251-228-138-45.connected.by.freedominter.net)
[20:13:46] <rannnn8888> when i use sesoion request its keep my connect to the site ?
[20:15:57] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[20:16:00] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[20:17:18] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[20:17:34] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:18:15] *** Quits: Payam (~Payam@c83-250-236-236.bredband.tele2.se) (Quit: Leaving)
[20:18:17] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:18:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:18:49] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Ping timeout: 252 seconds)
[20:19:08] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[20:19:18] *** Joins: fikran (~fikran@user/fikran)
[20:19:46] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Quit: Leaving)
[20:19:57] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[20:19:59] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Quit: WeeChat 3.2.1)
[20:20:28] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[20:22:34] *** Joins: mindraj (~crispr@217.138.254.60)
[20:22:53] <fdan> hi there, i have an input "3[a]2[bc]"
[20:23:02] <fdan> i want to print aaabcbc
[20:23:04] <fdan> how can i do this
[20:23:31] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[20:23:46] *** Quits: mkoskar (~mkoskar@user/mkoskar) (Ping timeout: 252 seconds)
[20:23:53] *** Joins: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu)
[20:24:04] *** Joins: thurs806 (~thurs@ip72-217-111-183.ph.ph.cox.net)
[20:24:50] *** Joins: cheater1__ (~Username@user/cheater)
[20:24:58] *** Quits: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 268 seconds)
[20:24:58] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 268 seconds)
[20:25:07] *** cheater1__ is now known as cheater
[20:26:41] *** Joins: imakestuff (~imakestuf@197.156.95.31)
[20:28:15] <KirkMcDonald> fdan: A regular expression could do a lot of the heavy lifting here. Though e.g. what happens if there are square brackets inside of those square brackets?
[20:28:36] *** Quits: ZedHedTed (~ZedHedTed@user/zedhedted) (Remote host closed the connection)
[20:28:46] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:14de:bbb5:b3c1:e78b) (Quit: Ping timeout (120 seconds))
[20:28:57] <control> there are any alternatives like rapids cudaf on windows?
[20:28:59] *** Joins: ZedHedTed (~ZedHedTed@user/zedhedted)
[20:28:59] <fdan> no thats alright as of now. lets consider that we dont have any nested square braches
[20:29:03] *** Quits: justm3 (~Username@82-171-42-20.fixed.kpn.net) (Ping timeout: 265 seconds)
[20:29:07] *** Joins: justm3 (~Username@82-171-42-20.fixed.kpn.net)
[20:30:16] *** Joins: hexed (~k@xolan.net)
[20:30:25] <KirkMcDonald> fdan: Well, r"(\d+)\[([^]]*)\]" will do a thing. Pass that to re.findall() and you're most of the way there.
[20:30:36] <KirkMcDonald> (Or re.finditer().)
[20:30:37] <fdan> without the regex, how can we do
[20:31:14] <nedbat> fdan: tell us the big picture here: why not use regex?
[20:32:24] <fdan> because i dont know how to use.. i am thinking to do it procedurally. hence the ask
[20:32:53] <KirkMcDonald> fdan: Search for the first '['. Slice. Search for the ']' after that. Slice. Repeat.
[20:35:36] <KirkMcDonald> fdan: But a regex makes it easy: https://bpa.st/DGSA
[20:37:08] *** Quits: rsx (~dummy@ppp-188-174-135-127.dynamic.mnet-online.de) (Quit: rsx)
[20:39:29] *** Quits: MercilessDeth (~brad@136.49.61.2) (Quit: Konversation terminated!)
[20:39:51] <fdan> a non regex snippet please
[20:40:14] <KirkMcDonald> Doing it more manually is more tedious.
[20:40:29] *** Quits: imakestuff (~imakestuf@197.156.95.31) (Remote host closed the connection)
[20:40:35] *** Joins: sniperwolf (~sniperwol@91.230.98.1)
[20:41:35] *** Quits: zln (~zln@c80-217-230-193.bredband.tele2.se) (Quit: WeeChat 3.2)
[20:42:28] *** Joins: Auron (~Auron956@user/auron)
[20:43:05] *** Joins: mkoskar (~mkoskar@user/mkoskar)
[20:44:03] <KirkMcDonald> fdan: https://bpa.st/PHWQ
[20:44:44] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[20:45:41] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[20:50:12] * foo is surprised to find quickbooks online API returns a string for their Id of expense items *shrug*
[20:50:52] *** Joins: Julian (~tos9@python/site-packages/Julian)
[20:51:25] <KirkMcDonald> Using a string for an ID doesn't seem so absurd, if it's just a thing that needs to be unique, rather than a thing you need to do math to.
[20:51:41] *** Joins: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2)
[20:51:58] <foo> KirkMcDonald: true, thanks. I partly expected an int.
[20:52:28] <KirkMcDonald> Also if this is JSON, then it seems like a reasonable way to avoid issues in which numbers implicitly become doubles, and an ID might be an integer outside the valid range of a double.
[20:55:04] <foo> KirkMcDonald: It is JSON. I really appreciate you elaborating, I partly shared so someone might chime in - grateful for your thoughts here. What do you mean by this? "numbers implicitly become doubles"
[20:56:18] <KirkMcDonald> foo: For instance, in JavaScript, all numbers are doubles.
[20:56:45] <KirkMcDonald> foo: So when you decode a JSON string in JS, if that JSON contains a number, that number becomes a JS number--which is to say, a double.
[20:57:16] <KirkMcDonald> foo: And doubles can only represent all integers up to 2**53.
[20:57:35] <foo> KirkMcDonald: aha, so if I understand, a double is a larger int.
[20:57:50] <KirkMcDonald> No. A double is a float. An IEEE 754 double-precision floating-point number.
[20:58:10] <KirkMcDonald> float64
[20:58:25] <Fieldy> the power of IEEE compels you! *makes finger cross*
[20:59:45] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[21:00:19] *** Joins: Endermen1094 (~dusty@user/endermen1094)
[21:00:21] *** Joins: bittin (~bittin@fedora/bittin)
[21:00:22] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[21:00:28] *** Parts: bittin (~bittin@fedora/bittin) (Leaving)
[21:00:35] *** Quits: dulanic (~dulanic@47.187.144.163) (Quit: The Lounge - https://thelounge.chat)
[21:00:55] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2.1)
[21:00:57] *** Quits: Linux77 (~Linux7_7@186.233.182.237) (Ping timeout: 265 seconds)
[21:01:00] <foo> KirkMcDonald: oh, then I need to look into this further. Thank you.
[21:01:04] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[21:01:06] <energizer> Jimmy2027: no, users won't need to have poetry to install your package
[21:01:15] *** Joins: DocMors (~DocMors@web.crypticity.net)
[21:01:25] *** Joins: paul424 (~tom@ip-31-0-121-199.multi.internet.cyfrowypolsat.pl)
[21:01:56] <Jimmy2027> oh okay, thats nice
[21:02:01] <Jimmy2027> will try it out :)
[21:02:50] <Fieldy> hello, i'm on 3.7.11... I'm trying to access the contents of the variable events at line 509, which is defined at line 496 / 499. At line 509 I get "NameError: name 'events' is not defined". how can i access 'events' outside of that def?
[21:04:00] *** Joins: defiant (~defiant@user/defiant)
[21:04:47] *** Joins: Deknos (~someone@user/menace)
[21:05:10] *** Quits: greedom (~greedom@2001:16b8:2e54:b800:dc79:176e:ba98:73c2) (Remote host closed the connection)
[21:05:44] *** Quits: paul424 (~tom@ip-31-0-121-199.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[21:06:31] *** Parts: SincereFox (uid337158@user/sincerefox) ()
[21:06:36] <bjs> Fieldy: did you paste the code somewhere?  the line numbers and saying "that def" are a little useless without the code to see
[21:06:48] <bjs> gitesh: hi,  what do you mean by "non-sequential"?
[21:06:59] *** Joins: paul424 (~tom@ip-31-0-121-199.multi.internet.cyfrowypolsat.pl)
[21:07:10] <Fieldy> ooh! it's early.   https://bpa.st/IJZA
[21:07:35] *** Joins: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com)
[21:07:43] *** Quits: LuksNuke (~LuksNuke@ip-146-0-191-111.dyn.luxfibre.pt.lu) (Ping timeout: 265 seconds)
[21:07:46] *** Joins: dulanic (~dulanic@47.187.144.163)
[21:07:49] <bjs> Fieldy: why have the `def` at all?
[21:08:03] <auri> can be done with nonlocal
[21:08:06] <Fieldy> bjs: i'm going by an inotify example, my skill level is pretty noob
[21:08:09] <auri> but yeah I'd avoid the def myself
[21:08:29] <KirkMcDonald> Not nonlocal. global
[21:09:01] <Fieldy> okay. so just dump that stuff out of the def and leave it on its own?
[21:09:02] <auri> oh, damn, I didn't look at the surrounding code
[21:09:09] <Fieldy> yeah it's probably a mess
[21:09:10] <auri> thought it was within a function
[21:09:10] <bjs> Fieldy: ah, well there's not really much a reason to make a _main function here. There's not much need for the def
[21:09:27] <bjs> Fieldy: what's messy is subjective
[21:09:32] <bjs> (but yes)
[21:09:37] <Fieldy> my confidence is just low till i know more
[21:09:44] <Fieldy> kind of a cruddy feeling
[21:10:23] *** Joins: Samnzdat (~ambassado@075-141-230-217.res.spectrum.com)
[21:11:26] *** Quits: Endermen1094 (~dusty@user/endermen1094) (Remote host closed the connection)
[21:11:37] <Fieldy> ok i will try this
[21:12:27] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 268 seconds)
[21:12:28] *** Quits: gitly (~gitly@148.252.129.191) (Read error: Connection reset by peer)
[21:13:16] *** Quits: clarkk (~clarkk@host86-164-233-103.range86-164.btcentralplus.com) (Ping timeout: 252 seconds)
[21:13:19] <hexology> Fieldy: another option is to write a small class with an 'event' attribute that you can mutate
[21:13:53] <hexology> for that matter, you could encapsulate some of the inotify logic therein and turn this _main() into an instance method on that class
[21:14:07] <Fieldy> hexology: okay, i don't really understand what this means at this point, however, i'm keeping extensive notes :) really appreciate this
[21:14:22] <hexology> i'd also strongly encourage using `with open` instead of just `open`
[21:14:28] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[21:14:59] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[21:15:03] <Fieldy> oh yeah, i actually knew that one oops. this segment is from an example, i shoulda caught that
[21:15:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[21:15:16] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:15:20] *** Quits: Amadiro (~Amadiro@84.209.11.12) (Remote host closed the connection)
[21:15:31] <Fieldy> oh no that's all me i'm missing that all over. thanks
[21:15:32] <foo> I
[21:16:05] *** Joins: gitly (~gitly@148.252.129.191)
[21:16:24] *** Quits: r3m (~launch@user/r3m) (Quit: WeeChat 3.3-dev)
[21:16:29] <foo> I'm capturing an API response in my table. I have a few specific columns for specific fields in the API response (JSON) that I want to store, and the rest I stick in an "other" column (JSON) field. Is there a more appropriate/generic/widely used name other than "other" ? It works, mostly curious from a naming perspective. Thanks!
[21:16:37] <Fieldy> man my comments in there are getting beastly
[21:17:15] <hexology> i have to say, this `__main__` usage looks confused
[21:17:19] <hexology> did you copy this from somewhere?
[21:17:22] *** Joins: defiant (~defiant@user/defiant)
[21:17:27] <hexology> that means "don't run this code unless you're running this module as a script"
[21:17:44] <hexology> you're already doing a ton of file i/o here -- why would you protect only this one little section?
[21:18:17] <Fieldy> hexology: yeah, it's from an example for inotify usage from https://pypi.org/project/inotify/
[21:18:30] <hexology> looks like a case of copying and pasting code without understanding :)
[21:18:32] <Fieldy> hexology: wasn't by my intention, just going by that
[21:18:43] <hexology> https://stackoverflow.com/q/419163/2954547
[21:18:49] <Fieldy> yep i'm struggling :) but learning. went from never used python 3 weeks ago to this
[21:18:57] <hexology> fair enough
[21:19:04] <Fieldy> ok, i will look at that
[21:19:07] <hexology> i think there's a point when you just make a new .py file and leave the old one aside as a backup/reference
[21:19:14] <hexology> this is quite a messy script, i would have difficulty working with this
[21:19:17] <Fieldy> yeah. already did that once lol
[21:19:23] <hexology> i also recommend by starting _on paper_
[21:19:32] <Fieldy> oh yeah? block diagarm like?
[21:19:35] <hexology> write, in plain language, with a pen or pencil, what steps your program needs to go through
[21:19:41] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[21:19:56] <hexology> then take each step and think about what pieces of data need to flow from one step to the next
[21:20:10] <Fieldy> that makes sense. i am a visual thinker
[21:20:12] <hexology> and use that to structure your program
[21:20:17] <hexology> yes, drawing diagrams would work well too
[21:20:25] *** Joins: Plyht (uid433484@id-433484.hampstead.irccloud.com)
[21:20:31] *** Joins: r3m (~launch@user/r3m)
[21:20:41] <hexology> i tend to use a hybrid approach, where i write out bullet points and then end up drawing arrows and ad-hoc flowcharts in the margins
[21:20:53] <xaltsc> Hey, is there a default location for $PYTHONSTARTUP or am I supposed to define it myself ?
[21:21:26] <hexology> once you've broken down your big task into sub-tasks, _then_ you can focus on each sub-task in some amount of isolation
[21:21:34] <Fieldy> yea i think that would work well for me too. i read the stackoverflow item, good to understand that now
[21:21:36] <hexology> and that is when you can start learning python idioms and how things work, one piece at a time
[21:23:58] <hexology> i see a few high-level "sections" in your code: 1) gathering some configuration points, like "output_detail" and "model", 2) loading a model and its associated data pipeline, 3) generating some stuff from an input file using that model and saving it to some output location 4) setting up a loop to repeat (3) whenever the input file changes
[21:23:59] <hexology> is that right?
[21:25:16] <hexology> once you've identified logical "sections" of your app, you can start to figure out which pieces of data are "local" to each section and which pieces of data need to be shared across the application
[21:25:23] <hexology> and that will help inform when to write classes, functions, etc.
[21:25:32] <Fieldy> yeah that's a good breakdown of it
[21:25:35] <hexology> *when and how
[21:25:42] <Fieldy> had to step away sorry
[21:26:28] *** Quits: Samnzdat (~ambassado@075-141-230-217.res.spectrum.com) (Ping timeout: 252 seconds)
[21:26:29] <Fieldy> in any case i do intend to rewrite it at some point, i have already done so once :)
[21:27:09] *** Lando-HoloNet is now known as Lando-SpacePimp
[21:27:11] <Fieldy> the last piece of this version really is the taking an action when the input file changes, been working on that for days
[21:27:59] <hexology> you don't have to throw away all your code, but i suggest taking a step back and working "top-down". for example, you could write a main() function like this, and work backwards from there: https://bpa.st/QE2A
[21:28:06] *** Quits: HurricaneHarry (~quassel@2a02-a455-9d06-1-3034-34ba-9e09-f533.fixed6.kpn.net) (Ping timeout: 260 seconds)
[21:28:19] *** Joins: gareppa (~gareppa@user/gareppa)
[21:28:24] -hexology- note: in this hypothetical example, generate_data_watching_input() should probably call generate_data_once()
[21:28:55] * foo wonders how hexology's message became purple
[21:29:01] <Fieldy> wow... that matches up with the overview, very cool
[21:29:03] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:29:07] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[21:29:18] * hexology wonders as well
[21:29:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[21:29:34] <hexology> i wonder if irc clients like to handle that "note:" thing specially
[21:29:41] <hexology> that or i accidentally put in a color code somehow
[21:29:47] <foo> hexology: how did you do a note?
[21:29:49] *** Joins: wyclif (~wyclif@user/wyclif)
[21:29:54] <foo> note: this is a test
[21:29:57] <hexology> note: i just typed "note:" at the start of my message
[21:30:06] <hexology> huh, i must have mashed a keyboard shortcut by accident
[21:30:11] <Fieldy> hexology: great input thank you!! gonna see if i can knock this last feature out. exciting times
[21:30:35] -foo- did hexology do this?
[21:30:41] <hexology> Fieldy: good luck. one other thing, is that you seem to already have this `while True` loop - you might want to remove that
[21:30:45] <foo> hexology: haha, no idea what you did.
[21:30:50] <hexology> foo: well how did you do that?
[21:30:51] <Fieldy> it was such a nice moment seeing inotify output
[21:30:54] *** Quits: ham5urg (~ham5urg@2a04:4540:680f:4000:ae67:5dff:fe1e:ec6d) (Ping timeout: 260 seconds)
[21:31:02] <Fieldy> hexology: lol yeah it's grown into a monster. it had been quite tiny before
[21:31:06] *** Joins: tos9_ (~tos9@python/site-packages/Julian)
[21:31:08] <foo> hexology: /notice #python did hexology do this? (but that was red for me.. also hope it didn't do anything annoying in this channel)
[21:31:11] *** Quits: wolfgang (~wolfgang@101.174.6.197) (Remote host closed the connection)
[21:31:16] <foo> hexology: irssi
[21:31:16] *** Joins: litharge` (litharge@libera/bot/litharge)
[21:31:18] <hexology> over-looping is a common newbie trap. "it's not working... i guess i need another loop"
[21:31:24] <Fieldy> nod
[21:31:48] <Fieldy> next think you know i need a second monitor just to deal with all the indentation
[21:32:01] *** ChanServ sets mode: +o litharge`
[21:32:06] <hexology> that's a sign that you might have too much indentation :) or you need a smaller font
[21:32:32] <Fieldy> nod. yeah my vision is kind of questionable, so big monitors AND big fonts.
[21:33:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[21:34:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[21:35:17] *** Joins: wyclif (~wyclif@user/wyclif)
[21:36:24] *** Joins: FluffyMask (~masque@user/fluffymask)
[21:36:59] *** Quits: litharge (litharge@libera/bot/litharge) (Ping timeout: 610 seconds)
[21:37:43] <foo> I can't seem to import StringIO for this:  output = StringIO.StringIO() ... I think it's something else?
[21:37:48] <foo> Trying to write a file in memory
[21:38:18] *** Joins: HurricaneHarry (~quassel@2a02-a455-9d06-1-b1bf-39dc-abae-faaf.fixed6.kpn.net)
[21:38:55] *** Joins: semeion (~semeion@user/semeion)
[21:39:36] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:40:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:40:46] *** Joins: wyclif (~wyclif@user/wyclif)
[21:41:53] <jinsun> StringIO.StringIO is python2
[21:42:16] <foo> jinsun: thought so, what's python 3 equivalent?
[21:42:18] *** Joins: heco_ (~redrum@user/redrum88)
[21:42:21] <grym> io.
[21:42:31] <foo> grym: thank you.
[21:42:40] <jinsun> in python3 is it io.BytesIO or io.StringIO deepending on whether you want to deal with strings or binary
[21:42:53] *** Joins: Atque (~Atque@user/atque)
[21:42:58] *** Joins: computeiro (~Wender@189.37.68.112)
[21:43:52] <aphysically> okay, so ffmpeg can output -progress (machine-readable design) separately to a file..right now I'm sending it to stderr and just being smart with my regex processing but I should really be using that capability
[21:44:05] <aphysically> so I guess it's time to learn how to do named (or numbered I guess) pipes in python
[21:44:35] * space-ghost strokes his beard and nods sagely
[21:45:32] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 268 seconds)
[21:45:35] *** heco_ is now known as heco
[21:45:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[21:46:16] *** Quits: runelind (~runelind@user/runelind) (Ping timeout: 252 seconds)
[21:46:17] *** Joins: wyclif (~wyclif@user/wyclif)
[21:47:54] *** Joins: heco_ (~redrum@user/redrum88)
[21:49:01] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[21:49:37] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[21:49:48] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:56] *** Joins: vali (~vali@84-115-216-199.cable.dynamic.surfer.at)
[21:51:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[21:51:23] *** Quits: litharge` (litharge@libera/bot/litharge) (Remote host closed the connection)
[21:51:44] *** Joins: litharge (litharge@libera/bot/litharge)
[21:51:46] *** Quits: heco (~redrum@user/redrum88) (Ping timeout: 252 seconds)
[21:51:49] *** Joins: wyclif (~wyclif@user/wyclif)
[21:51:51] *** heco_ is now known as heco
[21:52:05] *** Quits: litharge (litharge@libera/bot/litharge) (Client Quit)
[21:52:15] *** Quits: vali (~vali@84-115-216-199.cable.dynamic.surfer.at) (Client Quit)
[21:52:15] *** Joins: litharge (litharge@libera/bot/litharge)
[21:52:15] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[21:52:31] *** ChanServ sets mode: +o litharge
[21:53:34] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: Textual IRC Client: www.textualapp.com)
[21:53:39] *** Joins: wender (~Wender@189.37.68.112)
[21:54:24] *** Joins: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks)
[21:54:35] *** tos9_ is now known as Julian
[21:54:42] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[21:54:44] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[21:55:24] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 268 seconds)
[21:55:25] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[21:55:37] *** Quits: eblip (~eb0t@90.199.241.57) (Ping timeout: 268 seconds)
[21:56:06] *** Quits: computeiro (~Wender@189.37.68.112) (Ping timeout: 260 seconds)
[21:56:32] *** Joins: eblip (~eb0t@90.199.241.57)
[21:56:46] *** Quits: kib (~kib@user/kib) (Ping timeout: 252 seconds)
[21:57:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[21:57:19] *** Joins: wyclif (~wyclif@user/wyclif)
[21:57:45] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[21:57:59] *** Quits: rindolf (~shlomif@87.68.240.100.adsl.012.net.il) (Ping timeout: 265 seconds)
[22:01:46] <Fieldy> alright... source: https://bpa.st/WZAQ version: 3.7.11  issue: On line 505, I expect events to be "[]" if there have been no modifications to the watched file, and thus, i want it to sleep for 5 seconds then look again. Line 501 shows me output that confirms events is indeed "[]", but line 505 is never true (I also tried ""), thus... well i'm lost
[22:02:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:02:24] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 268 seconds)
[22:03:10] *** Joins: wyclif (~wyclif@user/wyclif)
[22:03:36] *** Joins: pluri (~pluri@user/pluri)
[22:03:53] *** Joins: MercilessDeth (~brad@136.49.61.2)
[22:03:59] <xb0o2> Fieldy: you're comparing a list to a string here so it'll return False.
[22:04:22] <pluri> in sublime text you can "paste and indent". is there an equivalent way to paste in pycharm? i've tried the default and plain text options, as well as cycling between the "paste" options in the Smart Keys preference section
[22:04:32] <xb0o2> Fieldy: you can rely on empty lists being falsy and use `not events`
[22:04:53] <Fieldy> xb0o2: hmm... interesting! okay, I'll give that a try
[22:04:58] *** Joins: kib (~kib@user/kib)
[22:06:43] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[22:07:46] *** Quits: emerent (~quassel@p200300cd5701a1ceba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:07:57] <Fieldy> xb0o2: that was it :) now: i just need to slip in "import time" because i used sleep()  *sheepish groan*
[22:08:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:08:40] *** Joins: wyclif (~wyclif@user/wyclif)
[22:09:10] <Fieldy> or not. off to fix my silly stuff.
[22:10:58] *** Parts: blackout69 (~blackout6@mob-2-43-214-4.net.vodafone.it) ()
[22:11:38] *** Joins: emerent (~quassel@p200300cd57485502ba27ebfffed28a59.dip0.t-ipconnect.de)
[22:12:11] <foo> I'm using a library that's an API wrapper that uses asyncio. This is the only part of my code that uses async, though. I am calling this from non-async code, is this doable? *double checks a few docs
[22:12:37] *** Joins: Betal (~Betal@user/betal)
[22:13:11] *** Joins: hanaan (~naan@user/naan)
[22:13:33] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[22:13:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:14:05] *** Quits: pathos (~pathos@169-1-247-122.ip.afrihost.co.za) (Quit: Lost terminal)
[22:14:10] <puff> foo: offhand, my guess is you're not likely to have problems, but there's a lot of detail missing in your question.
[22:14:10] *** Joins: wyclif (~wyclif@user/wyclif)
[22:14:58] <foo> puff: I'm open to that. :) What may I elaborate on?
[22:15:13] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[22:15:22] *** Joins: runelind (~runelind@user/runelind)
[22:15:35] <puff> foo: Well, everything :-).
[22:15:50] *** Quits: Naan (~naan@user/naan) (Ping timeout: 260 seconds)
[22:16:12] <puff> foo: So what asyncio does is basically provide a syntax to easily and reliably create a stateful object that can be easily managed by threads.
[22:16:21] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 265 seconds)
[22:16:43] *** Joins: cheater (~Username@user/cheater)
[22:17:15] <foo> puff: I'm using this library: https://github.com/W1ndst0rm/Treillage#using-built-in-endpoints -> calling it via python Flask.
[22:17:25] <foo> ... flask doesn't use asyncio
[22:17:44] <puff> Flask almost certainly uses threads or some other concurrency, otherwise it'd only be able to answer one request at a time.
[22:18:15] <foo> puff: well, right, but... uh. Are you saying I should import the flask equivalent of asyncio to run the asyncio code? Doubtful
[22:18:20] *** Parts: dstein64 (~dstein64@dannyadam.com) ()
[22:18:40] <puff> No.
[22:18:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:18:48] <puff> How much do you know about concurrency?
[22:18:48] <xb0o2> Flask 2.0 will run async code.
[22:19:17] <puff> It's all about slicing up the work... from a very brief look at the readme for that library it looks like it *could* be okay.
[22:19:22] <foo> puff: little, I'm still wrapping my head around it. I read the trio quickstart and have done a tiny bit with that. Then I realized I couldn't use it with this project
[22:19:34] <foo> puff: thanks for taking a look at the library
[22:19:40] *** Joins: wyclif (~wyclif@user/wyclif)
[22:20:33] <foo> puff: for example, I can't call update_form() from within a flask endpoint if I have this: https://bpa.st/CZRA
[22:20:47] <puff> So basically parallellism and concurrency... bear in mind that these words as used in programming are relatively "young", like the rest of programming is.  It's all about slicing up the work and coordinating that.
[22:21:27] <foo> puff: appreciate you explaining, I think I can wrap my head around that. My specific issue is when "the two worlds collide" :) Unless... hmm... *checks docs
[22:21:32] <puff> The question is really how much/how well the library hides the concurrency aspects.
[22:22:05] <xb0o2> You might be able to get away with calling `asyncio.run(update_form(...))` but you'd then be paying the cost of creating a new event loop for every call.
[22:22:10] <foo> puff: do I need to use something like return_data = asyncio.run(main()) if I'm calling from sync code?
[22:22:25] <foo> xb0o2: thank you, that's what I was just thinking. Is there any other way, though?
[22:22:51] <foo> xb0o2: also, this is only getting called once within a specific HTTP request that doesn't happen ofetn
[22:22:53] <puff> foo: what xb0o2 said.  In fact I'll just shut up now and let xb0o2 talk :-).
[22:22:54] <foo> often
[22:23:09] <xb0o2> If it's infrequently called you'll probably get away with it.
[22:23:12] <foo> puff: Thank you for your willingness to help. :)
[22:23:15] <foo> Yes, it's infrequently called.
[22:23:24] <foo> xb0o2: and to "not get away with it" means I'm taking a performance hit, right?
[22:23:42] *** Joins: Akuli (~Akuli@82-203-165-143.bb.dnainternet.fi)
[22:25:13] <foo> Well, that worked.
[22:25:36] <xb0o2> foo: you'll run into issues if you attempt to instantiate two event loops in the same thread.
[22:26:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:26:47] <xb0o2> That may or may not be a situation you can find yourself in.
[22:26:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[22:27:03] *** Joins: zln (~zln@c80-217-230-193.bredband.tele2.se)
[22:27:15] <foo> xb0o2: meaning, if two pages concurrently accessed an endpoint that called asyncio.run() that could cause problems - correct?
[22:27:29] <foo> xb0o2: or rather, two flask requests
[22:27:34] *** Joins: wyclif (~wyclif@user/wyclif)
[22:27:43] <xb0o2> Depends on how that concurrency is done.
[22:28:38] <xb0o2> I don't think Flask 1.0 actually handles requests concurrently?
[22:28:40] *** Joins: fikran (~fikran@user/fikran)
[22:29:39] <foo> xb0o2: I'm on flask 2.0.1. Maybe to back up, "you'll run into issues if you attempt to instantiate two event loops in the same thread." -> what kind of issues?
[22:30:15] <xb0o2> You'll get an error :)
[22:30:24] <foo> xb0o2: aha, ok, thanks :)
[22:30:49] <puff> xb0o2: I haven't looked at flask but I would be very surprised if it doesn't handle requests concurrently.
[22:30:53] *** Joins: pgib (~pgib@99-148-134-85.lightspeed.knvltn.sbcglobal.net)
[22:31:11] <xb0o2> If you're on 2.0.1 you can just await the lib call in an async method. See https://flask.palletsprojects.com/en/2.0.x/async-await/
[22:31:15] *** Joins: pro_z (~pro_z@37.214.34.140)
[22:31:49] <puff> xb0o2: Well, I looked into flask briefly, about 4-5 years ago, and for a web server microframework to *not* handle concurrent requests would be so unusual that I would find it very surprising that I didn't see mention of that limitation.
[22:31:53] <zln> Hi! is it valid to concat two str methods on a str var in try? Like: try: name.strip().isalpha()
[22:32:07] <foo> xb0o2: ah, nice find.
[22:32:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:33:04] *** Joins: wyclif (~wyclif@user/wyclif)
[22:34:01] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[22:34:16] <xb0o2> puff: You may well be right, the last time I actually used Flask was a long time ago. Looks like it got threading support after that.
[22:34:45] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[22:35:19] <xb0o2> In which case if each thread is only handling a single request at a time, asyncio.run probably would have been fine.
[22:36:10] <puff> xb0o2: What you just said was my reasoning for saying it might work out okay.
[22:36:31] <deniska> zln: strip() method on a str returns a str, on which you can call isalpha(), sure
[22:37:00] <zln> deniska: than it's as logical as I understand it :) Thanks
[22:37:09] <zln> *then*
[22:37:14] <deniska> zln: I don't think either strip() or isalpha() can throw an exception unless name is either not a str, or not assigned to
[22:37:27] <xb0o2> Looks like they actually recommend running it via WSGI in which case whether you're dealing with thread or process concurrency is up to you.
[22:37:36] <puff> xb0o2: My main worry was if the backend requests take long enough for multiple threads to be hitting the same method calls and tripping things up because they (the threads hitting them) don't understand async.  I'm very familiar with concurrency and threading in java, less so with the nuances of Python's implementations.
[22:37:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:38:12] <zln> deniska: ah, that's right! I should is it in an if statement
[22:38:13] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Read error: Connection reset by peer)
[22:38:14] <zln> thanks
[22:38:23] <puff> That is, if the backend requests take long enough that they could be still-in-process across multiple requests and hence get invoked by multiple threads during the processing, etc.
[22:38:34] *** Joins: wyclif (~wyclif@user/wyclif)
[22:39:06] <puff> Anyone have advice on a python script for downloading your content from Quora?  I'm not finding any clear winners.
[22:39:16] *** Quits: kib (~kib@user/kib) (Quit: WeeChat 3.2.1)
[22:43:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:43:42] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:43:53] *** Joins: ErkiS (~opera@85.253.103.121.cable.starman.ee)
[22:44:05] *** Joins: wyclif (~wyclif@user/wyclif)
[22:44:59] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[22:46:17] <ErkiS> how to use unittest to mock opening a specific file only? So that open("mine") would use a mock, but open("whatever") would use the real builtin?
[22:48:35] *** Quits: mindraj (~crispr@217.138.254.60) (Changing host)
[22:48:35] *** Joins: mindraj (~crispr@user/mindraj)
[22:48:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:49:35] *** Joins: wyclif (~wyclif@user/wyclif)
[22:49:43] <puff> God I hate dealing with these javascript-heavy front-ends.
[22:53:46] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Quit: Leaving)
[22:53:59] <paul424> Is print(f'My hovercraft is full of {animals}.') a pun intended for C function printf ? ;)
[22:54:10] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[22:55:00] <ErkiS> paul424: it's a Monty Python reference, "My hovercraft is full of eels"
[22:55:06] *** Joins: wyclif (~wyclif@user/wyclif)
[22:55:22] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[22:56:18] <paul424> ErkiS, I know :D but print(f' is pun intendetion of C function printf, right ?
[22:56:24] *** Joins: Samnzdat (~ambassado@075-141-230-217.res.spectrum.com)
[22:56:32] *** Joins: white_magic (~white_mag@2600:1700:6ae2:a20:f517:19d5:c05b:fe02)
[22:57:36] *** Quits: Samnzdat (~ambassado@075-141-230-217.res.spectrum.com) (Quit: Ambassador 1.3.0 [Mypal 28.9.1/20200412153336])
[22:58:10] <paul424> also when I do work from cmd line under bash, how do I enter a new line ?
[22:58:17] <paul424> without Enter ?
[22:58:26] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Remote host closed the connection)
[22:59:33] *** Joins: wolfgang (~wolfgang@101.174.6.197)
[22:59:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 240 seconds)
[23:00:37] *** Joins: wyclif (~wyclif@user/wyclif)
[23:02:16] <KirkMcDonald> paul424: f"" isn't related to printf(), except in the indirect way that "f" means "format" in both cases.
[23:02:24] <paul424> oki
[23:02:30] *** Joins: upsala (~zcb@185.213.155.160)
[23:03:06] <KirkMcDonald> paul424: As for newlines in bash, it depends. If you quote things in some ways, you can literally just put in newlines.
[23:03:12] <KirkMcDonald> But this isn't really a Python question.
[23:03:18] <paul424> I see
[23:03:23] <nedbat> ErkiS: the way to do your mock is to provide a fake implementation of open() as the mock
[23:04:47] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:05:11] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[23:05:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:05:46] <rendar> let's say i have an async computation, then i pass the result of this computation to an asyncio.Queue(), where another coroutine will process these results with another coroutine.. now: to not block the queue,is better to create a new task here instead of awaiting the final process coroutine?
[23:06:07] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[23:06:07] *** Joins: wyclif (~wyclif@user/wyclif)
[23:06:07] <ErkiS> nedbat: just seems wrong to mock all files. code being tested might open any number of files, but what I need to mock is the result from one specific file.
[23:06:26] <nedbat> ErkiS: your fake implementation can really open every other file.
[23:07:17] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[23:07:32] *** Joins: dstein64 (~dstein64@dannyadam.com)
[23:08:41] <ErkiS> nedbat: well, that's what I'm asking - how to do this? surely there's a better way than providing the whole IOBase API.
[23:09:15] <nedbat> ErkiS: def my_open(fname): if fname == "the_file": return fake_file_object;; else: return open(fname)
[23:09:29] <nedbat> ErkiS: fake_file_object could be an io.StringIO
[23:11:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[23:11:39] *** Joins: wyclif (~wyclif@user/wyclif)
[23:12:56] <ErkiS> nedbat: thank you, that got me solved
[23:13:11] <rendar> any ideas?
[23:13:23] *** Joins: bxsx (~x@238.red-81-35-190.dynamicip.rima-tde.net)
[23:14:18] *** Quits: Brocker (~NoBody@user/brocker) (Quit: ZNC 1.8.2 - https://znc.in)
[23:16:18] <Gustavo6046> ooo
[23:16:31] <Gustavo6046> what if a language compiled to S-exprs (semantic expressions, like Lisp)
[23:16:40] <Gustavo6046> and from there into a string of stack based instructions
[23:17:26] *** Joins: Brocker (~NoBody@user/brocker)
[23:20:02] *** Quits: defiant (~defiant@user/defiant) (Quit: defiant)
[23:20:03] *** Joins: computeiro (~Wender@189.37.68.112)
[23:20:49] <bxsx> can i use alernative logic with PEP 508? I want to do something like `python_version == "2.7" or python_version >= "3.5"`
[23:21:40] *** Quits: wender (~Wender@189.37.68.112) (Ping timeout: 240 seconds)
[23:21:52] <nedbat> bxsx: you cannot specify it like that.
[23:22:05] *** Parts: akk (~akk@75.161.146.115) (+++)
[23:22:16] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:22:16] <nedbat> bxsx: this is why you see things like:   Python >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4
[23:23:40] *** Joins: wender (~Wender@189.37.68.112)
[23:23:49] <bxsx> nedbat: can i use the same package twice? first entry with == "2.7" and second with >= "3.5" ?
[23:24:10] *** Joins: Narrat (~omnius@p200300df5f0ee19006ea56fffe2e7cdc.dip0.t-ipconnect.de)
[23:24:23] <stealth_> bxsx, the problem is `'2.4' > '2.12'  # True`
[23:24:42] <bxsx> right
[23:26:18] <bxsx> hm, i tried `python_vesion != "3.0", != "3.1"` and got error
[23:26:27] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[23:26:31] <nedbat> bxsx: tried where? What error?
[23:26:40] *** Quits: computeiro (~Wender@189.37.68.112) (Ping timeout: 268 seconds)
[23:26:48] <nedbat> stealth_: these are version numbers, being compared correctly.
[23:27:29] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[23:28:13] <bxsx> nedbat: setup.py, weird it says "'install_requires' must be a string or list of strings containing valid project/version requirement specifiers; Parse error at "', != "3.'": Expected stringEnd"
[23:28:31] <stealth_> nedbat, i see, they would have accounted for it then!
[23:28:55] <bxsx> nedbat: I see `requests [security,tests] >= 2.8.1, == 2.8.* ; python_version < "2.7"` in the PEP but probably the AND is not supported by python_version?
[23:29:34] *** Joins: diamondbond (~diamondbo@175.157.224.60)
[23:29:44] <ssbr`> Gustavo6046: most languages do parse to an intermediate AST before compilation, which is close enough.
[23:29:57] *** Joins: obiwahn (~heini@obiwahn.org)
[23:30:06] *** Joins: computeiro (~Wender@189.37.68.112)
[23:30:15] <Gustavo6046> That is true, but muh car and cbr
[23:30:17] <obiwahn> hi, is there a way to hand a predicate to `list.sort()`?
[23:30:34] <KirkMcDonald> obiwahn: You can give it a key function, if that's what you mean.
[23:30:34] <nedbat> bxsx: can you link us to your setup.py file?
[23:30:35] <Gustavo6046> (Dad, can I honk the horn? *pointing at steering wheel*)
[23:31:13] <obiwahn> I found a `key` but I want to sort tuples. And i am not sure if composing a key out of the tuples will suffice?
[23:31:14] <ssbr`> Gustavo6046: for example, the AST for `x = y` is Assign([Name('x', Store())], Name('y', Load())) -- in lisp, that'd be (Assign (list (Name ('x (Store))) (Name 'y (Load)))
[23:31:24] <KirkMcDonald> obiwahn: Sort them how?
[23:31:25] <ssbr`> it's really just moving parentheses around
[23:31:39] <obiwahn> names with scores
[23:31:49] *** Quits: wender (~Wender@189.37.68.112) (Ping timeout: 268 seconds)
[23:32:04] <KirkMcDonald> obiwahn: Do you have an example?
[23:32:11] <obiwahn> And in case of equal score the name should define the order.
[23:32:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:32:20] <control> hello, im trying to use numba for speed up this code https://bpa.st/FX4A . but it seems its the same speed as without using numba for speeding up the code. what im doing wrong?
[23:32:32] <KirkMcDonald> obiwahn: I will say that tuples already compare lexicographically; it might already work in the way you want without needing to do anything.
[23:32:40] *** Joins: wyclif (~wyclif@user/wyclif)
[23:32:44] <obiwahn> i could try to pad the score.
[23:32:52] *** Quits: diamondbond (~diamondbo@175.157.224.60) (Client Quit)
[23:33:00] <KirkMcDonald> obiwahn: Could the score be a number?
[23:33:10] <obiwahn> yes
[23:33:39] *** Joins: wender (~Wender@189.37.68.112)
[23:33:41] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 265 seconds)
[23:33:46] <obiwahn> probably i'll just to it with loops
[23:33:48] <KirkMcDonald> obiwahn: If the tuple is (score, name), then it'll sort like you want. Otherwise, you could define a function that takes a tuple like what you have, and returns a tuple (score, name).
[23:34:04] <obiwahn> i was just wondering if there is some clever way with a predicate or itertools
[23:34:04] <KirkMcDonald> obiwahn: And use that as the key function.
[23:34:04] *** Jefren1 is now known as Jefren
[23:34:15] <white_magic> anyone here use Sqlite for prototyping purposes? I've been using json to store data (for small enough amounts of data) but I'd like something a *bit* more scalable - even for my basic purposes. However, I'm wondering what would be the best way to use Sqlite for prototyping type of purposes? Any ORM that is QUICK to get going with? I don't recall
[23:34:16] <white_magic> what approach I used in the past with Sqlite and Python but I do recall writing a lot of SQL and I'm not sure that it was overall a more productive choice for prototyping purposes than the simple jsons-in-fileystem "db" I've been using lately
[23:34:26] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:34:30] <KirkMcDonald> obiwahn: If you have an example of the data you have, I can give you an example of how to use a key function.
[23:34:54] *** Quits: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[23:34:55] <deniska> white_magic: sqlite is quite capable for projects beyond what you'd call "a prototype"
[23:34:56] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:35:12] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:35:43] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:35:46] *** Joins: rslopes (~user@2804:431:c7dd:afcb:4d26:9795:b527:92ed)
[23:35:51] <deniska> white_magic: but there's this… peculiar library based on sqlalchemy which can use any sqla supported backend, including sqlite: https://dataset.readthedocs.io/en/latest/
[23:35:56] *** Joins: mokulus (~mokulus@user/mokulus)
[23:35:59] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:36:24] <control> if someone had any experience with numba - please help. thank you
[23:36:29] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:36:35] *** Quits: computeiro (~Wender@189.37.68.112) (Ping timeout: 265 seconds)
[23:36:46] *** Quits: mindraj (~crispr@user/mindraj) (Quit: Goodbye, have a great day/evening!)
[23:36:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:37:11] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:37:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:37:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:37:40] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Ping timeout: 240 seconds)
[23:37:45] <obiwahn> `[['Harry', 37.21], ['Berry', 37.21], ['Tina', 37.2], ['Akriti', 41], ['Harsh', 39]]` -- it is form a hackerrank task i explore some tasks that i can give to my apprentices, but i do not want to teach them c++ :) I can code enough python to teach them but I would like to provide them always with an almost optimal solution.
[23:37:59] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:38:10] *** Joins: wyclif (~wyclif@user/wyclif)
[23:38:20] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:38:42] <obiwahn> But to flip positions is a nice idea. I got that right?
[23:38:46] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:38:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Read error: Connection reset by peer)
[23:39:26] <KirkMcDonald> obiwahn: For example: https://bpa.st/QJQA
[23:39:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:39:55] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:40:03] *** Joins: Macuser (~Macuser@216.30.159.201)
[23:40:15] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:40:31] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[23:40:36] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[23:40:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:40:43] <bxsx> nedbat: https://bpa.st/U7YA
[23:40:50] *** Quits: mokulus (~mokulus@user/mokulus) (Quit: WeeChat 3.2.1)
[23:41:01] <white_magic> deniska: 'dataset' looks super neat.. I'll definitely give it a try
[23:41:04] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:41:12] <obiwahn> That is pretty awesome:)
[23:41:25] <deniska> white_magic: https://dataset.readthedocs.io/en/latest/quickstart.html#limitations-of-dataset paragraph worth reading :)
[23:41:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:42:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:42:18] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:42:19] *** Joins: sed (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[23:42:38] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:42:54] *** Quits: Klinda (~klinda@2.227.251.209) (Quit: Leaving)
[23:43:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:43:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 265 seconds)
[23:43:34] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:43:39] *** Joins: wyclif (~wyclif@user/wyclif)
[23:43:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:44:12] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:44:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:45:23] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:45:28] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:45:37] *** Quits: MrAwesomeRocks (~MrAwesome@user/mrawesomerocks) (Quit: Leaving)
[23:45:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:46:15] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:46:45] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:46:58] <white_magic> deniska: on a somewhat related note, do you have any experience with backing up sqlite data?
[23:47:03] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:47:32] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:47:50] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:47:57] <white_magic> I've done backing up to a file but I wonder what's a good practical approach to backing up regularly
[23:48:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:48:15] <deniska> white_magic: if the process is offline, it's safe to just copy a file, if a process is online, you can use this: https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.backup
[23:48:35] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[23:48:36] <deniska> white_magic: (or .backup command in sqlite3 command tool)
[23:48:37] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:48:54] <aphysically> I could use enums to do something like provide a readable way to define status codes?
[23:48:55] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:49:11] *** Joins: wyclif (~wyclif@user/wyclif)
[23:49:24] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:49:48] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:49:57] *** Joins: ferz (~ferz@93-39-142-224.ip76.fastwebnet.it)
[23:49:57] <white_magic> deniska: thanks again! One more question.. way different this time.. do you have any experience with NoSQL DBs? I was thinking of maybe using MongoDB bc it's a nice upgrade from storing json blobs on disk. But I've never used a NoSQL db so I don't know how involving it is to set one up.
[23:50:11] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:50:45] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:50:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:50:56] <deniska> white_magic: the only one I sorta used is redis
[23:50:58] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:51:28] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:51:28] <deniska> white_magic: practically speaking the best nosql databases are still often sql databases :)
[23:51:46] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:51:47] <energizer> white_magic: i dont recommend mongo
[23:51:52] <white_magic> deniska: you mean something like Postgress (because iirc it supports json blob storage)?
[23:52:00] <deniska> nothing prohibits you to put json in a column, if it's only going to be queried as a single entity
[23:52:09] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:52:14] <white_magic> energizer: yea I don't mean necessarily mongo, but i think it has the best name recognition.. what's the better choice in your view? I know redis is also popular
[23:52:31] <deniska> white_magic: no, I mean, even just putting json in a column of a type like TEXT may make sense depending on the circumstances
[23:52:33] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:52:39] <nedbat> bxsx: hmm, i haven't used that syntax.  can you say more about why you need to specify these versions like this?
[23:52:55] <nedbat> bxsx: btw, why support things like Python 3.0 at all?
[23:53:17] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:53:23] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:53:34] <bxsx> nedbat: what do you mean "like this"? it's based on https://www.python.org/dev/peps/pep-0508/
[23:53:35] <deniska> 3.0 is really old, older than 2.7
[23:53:37] <white_magic> deniska: it feels like using a relational db in that purpose *may* go against what makes the nosql/json store type of DBs appealing in the first place - the fact that you can access them like a Python dictionary
[23:53:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:54:00] <nedbat> bxsx: i mean, why specify versions of requests individually for each version of python?
[23:54:06] <nedbat> bxsx: and why support python 3.0?
[23:54:08] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:54:11] <bxsx> yeah, we have plans to remove the support but not at the moment
[23:54:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[23:54:40] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:54:41] *** Joins: wyclif (~wyclif@user/wyclif)
[23:54:49] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[23:54:52] <bxsx> nedbat: when i only have `requests>=0.12.1` it installas 2.26 for Python 3.5
[23:54:56] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:55:03] <Julian> 3.0 also isn't a usable version of Python :)
[23:55:12] <deniska> white_magic: nothing prohibits you to invent a thing to access an sql database like a dict, that's what dataset essentially is :)
[23:55:15] <nedbat> bxsx: and that version of requests doesn't work?
[23:55:25] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:55:43] <bxsx> Julian: yeah, and i don't think we have anyone (customers) using it as the moment but it has to take some process to remove the support
[23:55:43] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:55:46] <bxsx> nedbat: yeah
[23:56:02] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:56:10] <deniska> white_magic: while sql shines on relational data, the storage layer in a typical sql implementation is still really nice even for key-value kind of data
[23:56:14] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[23:56:29] <energizer> white_magic: i understand the problem you're talking about. i don't know all the options. there are a handful of big-name databases, but in fact there are hundreds of other well-engineered ones for various use cases
[23:56:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:56:31] <nedbat> bxsx: requests 2.26.0 says it doesn't support 3.5.  Are you sure you are using a recent pip to install it?
[23:56:46] <white_magic> deniska: I refuse to use relational DBs in that manner :D
[23:56:50] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:57:06] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[23:57:07] <nedbat> bxsx: i would put in the effort to remove those old Python versions.  it will save you some headaches immediately.
[23:57:18] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:57:18] <white_magic> But I really like that 'dataset' library so I'll definitely give it a try. Syntactically it looks a bit similar to using a k:v store
[23:57:25] <bxsx> oh, this is interesting point, nedbat !
[23:57:26] <deniska> white_magic: just saying it's still often a better tool for a job, even if it's technically a wrong one
[23:57:41] <bxsx> nedbat: i know, it should be done by the end of the year, it's already on the list
[23:57:47] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:58:04] <bxsx> nedbat: I think you are very correct here
[23:58:05] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:58:11] <nedbat> bxsx: you are struggling now to get this syntax to work. if you removed those old versions of python you could side-step the whole problem.
[23:58:33] <bxsx> nedbat: it's ok with 3.5, the problem is with 3.4 and it uses pip 19.1.1
[23:58:35] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:58:53] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:58:56] <bxsx> nedbat: yeah, but i'm not the owner
[23:59:37] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[23:59:40] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Client Quit)
[23:59:59] <bxsx> hm, interesting
