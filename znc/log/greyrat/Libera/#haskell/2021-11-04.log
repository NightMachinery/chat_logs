[00:00:06] <dminuoso> Yes, and in fact GHCi already does hide some of it
[00:00:18] <awpr> yeah, good point.  it sort of goes in the direction of duplicating all the libraries, though
[00:00:21] <boxscape_> right, I'm calling it that because the flag is called -fprint-explicit-runtime-reps
[00:00:52] <dminuoso> Neat, I should probably enable that one by default here.
[00:00:52] <awpr> maybe a suitable JS-side Haddock feature could address this sort of thing: a checkbox or something equivalent to prune out the multiplicity stuff
[00:01:01] <AWizzArd> dminuoso: do you have an example of a high increase in complexity? To me LT seem to be not deeply complex. They will provide documentation for the reader, about arguments being consumed exactly once. They can help to manage a sequence of steps with DataKinds. Later on they can take load away from the GC.
[00:02:43] <dminuoso> AWizzArd: Im a newcomer, I want to write sockets stuff. Apparently awizz-sockets is the new hot library to use. Oh whats that % or Multiciplity. (Assuming I havent ran away screaming...) Oh linear types. Let me google that...
[00:03:00] <maerwald> lol
[00:03:05] <dminuoso> And here the journey ends in yet another customer saying "Haskell is a research language" or "You need to be a mathematician to understand Haskell"
[00:03:17] <AWizzArd> dminuoso: What Morpheus said: welcome to the real world :)
[00:03:36] <boxscape_> dminuoso okay actually the "something else" I had in mind was also levity polymorphism.
[00:03:45] <boxscape_> I just misremembered
[00:03:56] <AWizzArd> I don't care much about newcomers. Paul Graham wanted a language for experts. You are newbie for a short time, the rest of your career you’ll be an expert.
[00:04:27] <boxscape_> it has to be at least accommodating enough to newcomers that they don't quit before becoming experts
[00:04:35] <dminuoso> AWizzArd: Without an influx of new developers, the language will over time die out. There's going to be less people maintaining packages and writing new ones.
[00:04:38] <boxscape_> (well, a reasonable fraction of them, anyway)
[00:04:40] <dsal> I've been a newbie for decades.  I don't expect to ever be an expert in anything.
[00:04:40] <AWizzArd> dminuoso: newcomer uses my hyped lib, accidentally makes a mistake by forgetting to close the socket. This thing doesn't compile.
[00:04:42] <dminuoso> I for one want my dependencies maintained.
[00:04:50] <dminuoso> So yes, I want a constant influx of new developers in Haskell
[00:05:04] <dminuoso> I can do some work on my dependencies, but there's just far too much to do it alone.
[00:05:05] * dsal used += in a haskell program for the first time today
[00:05:18] <AWizzArd> dminuoso: sure, new people need to join and they will study Haskell *because* it has Linear Types.
[00:05:32] <AWizzArd> dminuoso: Rust seems to be very popular and is way more complex than the LT in Haskell.
[00:05:39] <dminuoso> AWizzArd: Is GHC going to tell you. "Here, you forgot to close your socket. Look at line XYZ to see why"?
[00:05:49] <dminuoso> Or what is GHC going to tell you *realistically*?
[00:06:09] * dsal imagines hoards of python programmers waiting for linear types before jumping to Haskell
[00:06:11] <dminuoso> Besides, I dont buy this problem to be such a big problem.
[00:06:12] <AWizzArd> dminuoso: I hope yes, it will tell me such things in the future. It will even generate the code for me from the signature, or give me support.
[00:06:21] <boxscape_> * Couldn't match type 'Many with 'One; Expected: a %1 -> a  Actual: a -> a
[00:06:31] <dminuoso> ^-
[00:06:34] <dminuoso> Yes. And now what?
[00:06:35] <AWizzArd> dminuoso: the socket thing is not big, but you want to first read from a CSV file and only then dump it into MongoDB.
[00:07:05] <dminuoso> AWizzArd: Yes. I can do that without linear types.
[00:07:17] <dminuoso> Reading from a file and stuffing it into the database seems trivial enough.
[00:07:38] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[00:07:50] <AWizzArd> dminuoso: how will you protect your code against changing it so that you write to the DB *before* reading the file? Unit tests, but those are more complex than the LT.
[00:07:59] <dsal> readCSV >>= withDBConnection storeCSVStuff
[00:08:29] <boxscape_> you might be able to write a custom type error to tell users when they forgot to close the socket
[00:08:39] <boxscape_> at least if the custom type error machinery gets improved further
[00:08:40] <AWizzArd> dsal:  withDB storeNonsense >> readCSV >>= withDB storeCSVStuff
[00:08:59] <dminuoso> boxscape_: Fun fact, while I love optics type errors, at time inference has a way of backtracking so much, I get the most illegible type unification errors before optics type error helpers can resolve.
[00:09:00] <dolio> AWizzArd: Is this a real problem?
[00:09:09] <dolio> It seems like not a real problem.
[00:09:17] <dminuoso> boxscape_: So realistically while it improves the situation in 90%, it drastically reduces diagnostic quality in the other 10%
[00:09:21] <dminuoso> Numbers based on feelings.
[00:09:23] <boxscape_> hm, interesting
[00:09:51] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:10:02] <AWizzArd> dolio: yes it may happen rarely. But tell me: where is the problem with LT here? It is trivial to make this sequence of steps work. An implementation will only be correct if you read the csv and write to the db.
[00:10:11] *** Joins: alzgh (~alzgh@user/alzgh)
[00:10:23] <AWizzArd> dolio: also why should we use Haskell in the first place if we now suddenly begin to argue that our code starts getting too correct? (:
[00:10:26] <dminuoso> AWizzArd: And why do you conjure up a complex type system to solve what's a trivial non-issue?
[00:11:01] <AWizzArd> dminuoso: where is the complexity? We have a few simple steps with DataKinds and throwing a %1 into the mix.
[00:11:08] <awpr> I also don't see how linear types would address that use-case
[00:11:09] <dminuoso> I mean yes, I can encode a lot of invariants into my type system too. For example, I can express making a modification first before writing to a database in my type system. But why do I actually need this protection?
[00:11:11] <dsal> AWizzArd: Can you provide a more concrete example?  I read about LT a while back and barely remember how it's useful.  I don't exactly understand your CSV/DB situation.
[00:11:40] <dolio> The problem is how much extra effort it costs and how much additional correctness is ensured, and how likely it is to be incorrect in the first place.
[00:11:47] <dminuoso> AWizzArd: First off, DataKind promoted types are invisible on Hackage. 
[00:12:02] <dolio> Just saying that maximal correctness is desirable without taking any other context into account is not a good argument.
[00:12:10] <dminuoso> Indeed.
[00:12:30] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[00:12:36] <AWizzArd> dolio: the extra effort seems to be a couple of minutes. And I don't see here how it made things really complex. Yes, it will take a couple of days to get trained in LT. Monads were possibly harder.
[00:12:56] <dolio> How did you come up with that?
[00:13:19] <dolio> Did you implement a complete CSV library with linear types?
[00:13:21] <dminuoso> AWizzArd: I have yet to find someone give me a *real* world problem that frequently produces bugs that end up in production, that linear types would have solved.
[00:13:23] <AWizzArd> dolio: so far the examples I saw seem to indicate that. How did you come up with the idea that it would add "much" complexity.
[00:13:31] <dminuoso> The commonly cited sockets example is quite poor for several reasons.
[00:13:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b)
[00:14:08] <AWizzArd> dminuoso: I see the use in areas where a sequence of resources need to be accessed, in a specific order.
[00:14:50] <awpr> is the suggestion that you'd have a token that must be used in order to access DBs or read files, and the type of the token would encode the order they must be accessed in?
[00:14:56] <AWizzArd> I have a lot of code where I access a file once. Why not show this in the type sig?
[00:14:59] <dminuoso> AWizzArd: Okay. And consider those cases, imagine an actual implementation, what are the odds of someone changing the order down the line incorrectly in the first place?
[00:15:05] *** Quits: jushur (~human@user/jushur) (Quit:  ¯\_(ツ)_/¯)
[00:15:08] <dminuoso> Im not saying I dont see what it can do
[00:15:37] <AWizzArd> dminuoso: rare bugs when it is a single function. I just see that C coders all the time say that they free memory twice, or use it after freeing it.
[00:15:40] <awpr> this is also not a fundamentally new capability of linear types; you can do the same type-state sort of thing with an indexed state monad
[00:15:51] <dminuoso> I know that you can encode invariants in linear types or the type system in general. But more often than not that is trying to guard against scenarios you very well can imagine already. In my experience, bugs tend to be things you couldn't imagine before hand.
[00:15:55] <AWizzArd> This is not because of their three-liners. It seems to happen when code is distributed.
[00:16:09] <awpr> but nobody does, because it doesn't really carry its weight in this instance
[00:16:26] <dminuoso> AWizzArd: See, with memory management I can absolutely see the value of such type systems.
[00:16:31] <AWizzArd> My point is that the Haskell variant looks simpler than what Rust has. Rust enforces the use everywhere. How many users does Rust have? 5x more than Haskell? Dunno.
[00:16:54] <AWizzArd> dminuoso: in Rust everything is a resource, you can't opt out (if I understand it correctly).
[00:16:56] <awpr> Rust doesn't encode the order of interacting with databases and files in types
[00:17:14] <awpr> at least, not in any code I've seen
[00:17:19] <AWizzArd> awpr: Rust is not doing anything. But you can do this in your API.
[00:17:25] <dminuoso> In Rust?
[00:17:27] <awpr> can you?
[00:17:38] <AWizzArd> I would assume it. No?
[00:17:42] <maerwald> dminuoso: streams that consume resources on draining. After you drain a stream, the stream is still there and can be passed around. Trying to drain it again will cause an IO exception
[00:17:57] <awpr> I don't know how to do that in Rust presently.  not willing to claim it's impossible, but it's not clear to me
[00:18:00] <maerwald> that would be a use case for streamly
[00:18:27] <dminuoso> maerwald: Okay, now the real question is: This type of bug would most easily be caught by your test suite anyhow. Why do we want a linear type system instead?
[00:18:28] <maerwald> because once a stream is drained, the resources is cleaned up
[00:18:40] *** Quits: wonko (~wjc@user/wonko) (Ping timeout: 268 seconds)
[00:18:59] <awpr> I suppose you could have a struct that manufactures restricted mutable references to itself, and is only willing to exchange them in a particular order
[00:19:03] <maerwald> dminuoso: I don't think so. If you have a large codebase and store streams in several places, you can never be sure which stream is safe to consume.
[00:19:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[00:19:34] <dminuoso> maerwald: Fair enough. Ill have to ponder about it, but it does sound like a viable use case perhaps.
[00:19:40] <maerwald> of course you can avoid it... but it requires discipline
[00:19:52] <maerwald> and people are not disciplined
[00:20:09] <kuribas> I am getting: Couldn't match type ‘ann’ with ‘()’
[00:20:14] <maerwald> but if I imagine more widespread use of streams in APIs...
[00:20:19] <maerwald> I def. will run into such issues I think
[00:20:24] <kuribas> No place where the "()" comes from.  Instead a +- 100 line do block.
[00:20:34] <dolio> Anyhow, I'm not saying linear types aren't useful. I'm saying the 40 character hypotheticals I'm seeing are not compelling.
[00:20:34] <dminuoso> maerwald: Are such undisciplined people disciplined enough to write multiplicity polymorphic code?
[00:20:41] <dolio> Show me a real, substantial example.
[00:20:43] <maerwald> well...
[00:20:43] <dminuoso> Also how does linear types fare in the presence of exceptions? :)
[00:21:02] <AWizzArd> As a sketch (please let me know if this is nonsense): we want to implement   readCSVandDumpIntoMongo :: UnreadCSV %1 -> UnusedDBConn %1 -> IOL UsedDBConn          And we have a   readCSV :: UsreadCSV -> IOL ReadCSV    and a  dumpToMongo :: ReadCSV -> UnusedDBConn -> IOL UsedDBConn
[00:21:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:21:31] <dminuoso> AWizzArd: The example simply does not sound convincing, it's too artificial. You're trying to show what linear types can do, not show a real world problem it would help to solve.
[00:22:07] <awpr> kuribas: probably something declares a pretty-printer doc with a () annotation type unnecessarily?
[00:22:09] <dminuoso> Start with something some people might do, and then introduce the frequent interaction that can cause a bug down the road. And then conjure up linear types as the hero on the field
[00:22:10] <AWizzArd> dminuoso: this example shows what many web handlers in the backend do. A series of steps.
[00:22:50] <kuribas> awpr: no, it comes from "my" code.  I just don't know which one.
[00:22:55] <AWizzArd> dminuoso: Well, we just have to play around with them to see if it works. But to me it seems that I would regularily be able to use them to improve documentation and have implicit test cases.
[00:23:00] <dminuoso> AWizzArd: So the reality is going to be. I have `readCSV :: FilePath -> IO MyCSV` `saveToMongo :: Conn -> MyCSV -> IO ()`
[00:23:20] <kuribas> awpr: I which ghc would pinpoint don't the "thing" that has the type, being it a literal, or a some function with explicit type signature.
[00:23:45] <awpr> it's surprising if it doesn't
[00:23:46] <dminuoso> kuribas: No, because of how inference works.
[00:23:48] <AWizzArd> dminuoso: in this example you could call saveToMongo multiple times. And you can't prove that you did call it?
[00:24:06] <dminuoso> kuribas: I encountered this problem frequently today when reworking prettyprinter annotations just today! :)
[00:24:12] <kuribas> dminuoso: even with inference, it comes from "somewhere".
[00:24:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[00:24:20] <dminuoso> AWizzArd: Yeah, but given your example that's more than unlikely to actually happen
[00:24:21] <dolio> AWizzArd: GHC can already tell if you don't use a variable.
[00:24:25] <AWizzArd> If save2Mongo was the only way to retrieve a UsedMongoConn and when you return it then there is no way around calling it.
[00:24:34] <kuribas> dminuoso: unless it's a type variable...
[00:24:51] *** Quits: pgib (~textual@99-148-134-85.lightspeed.knvltn.sbcglobal.net) (Ping timeout: 268 seconds)
[00:24:54] <dminuoso> I generally dont accidentally "copy paste a linear 3 times". It would be caught a) during writing, b) during `git add -p`, c) during the code review, and possible d) by our general test suites (perhaps)
[00:25:04] <AWizzArd> dolio: yes, good point, we can get a reminder here. Still we could call it too early.
[00:25:10] <dminuoso> kuribas: it doesnt have to tell you where it comes from
[00:25:21] <dolio> How are you going to call it without the data?
[00:25:22] <dminuoso> kuribas: What you're asking for is type error slices, something GHC doesnt have
[00:25:24] <dminuoso>  but should have
[00:25:37] <AWizzArd> dolio: with bad data.
[00:25:54] <AWizzArd> dolio: literals in the code
[00:26:11] <dolio> I don't believe this is a serious, common problem.
[00:26:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:26:40] <AWizzArd> dolio: it will be rare, yet adding a %1 seems not to be a true time sink.
[00:26:49] <dolio> I don't believe that claim, either.
[00:26:52] <dminuoso> AWizzArd: Look, I have experimented plenty with encoding invariants in the type system. At the end I started to learn, that what I did was add unnecessary safety to guard against non-realistic scenarios. And more than that, they tend to be scenarios you already know, think of. Bugs tend to be things you *dont* think about.
[00:27:07] <dminuoso> That last bit is something Ive had to learn over and over again over many years
[00:27:33] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[00:27:58] <AWizzArd> dminuoso: I guess in two years we’ll see if the LT will be used or not and if they turn out to be beneficial or not. I am very optimistic.
[00:28:32] <dminuoso> And often a simple architectural change can accomplish the same thing. You want to ensure data is used? Abstract, write a simple `a = f =<< x`. There it's incredibly trivial to validate that `a` is going to use `x` only once, and feed it precisely into `f`.
[00:28:33] <AWizzArd> dminuoso: put a reminder into Todoist and let's chat about this in 2 years again. Maybe I’ll have changed my view by then :)
[00:29:44] <boxscape_> reading a commit message in linear-base and wow, what a sentence "Any multiplicity involving multiplicity multiplication will hit the limitations of the type checker currently"
[00:30:23] <boxscape_> (I read it in https://github.com/tweag/linear-base/commit/f3aff2f9242d05295294a7999a21bcf183bc5ea9 )
[00:31:31] <dminuoso> AWizzArd: To me what would be convincing is this: We have a client XYZ and they tasked us to write some software. Because this software handles financial transactions, we want guarantees that the state machine driving this software is correct. So this is the place where I might look at formal methods of any kind.
[00:32:07] <dminuoso> And that's when you start comparing costs of various formal methods, weighing them against risks of bugs/violations.
[00:32:48] <AWizzArd> dminuoso: would be an interesting case. I see besides those more mundane examples a potential use in tracking stateful backend services, which give us worse than C manual memory management: distributed memory management.
[00:32:49] <boxscape_> It does seem neat that you could get some performance benefits from using linear types (since it allows you to mutate instead of copying), though I'm not aware of any GHC-related work on that
[00:32:53] <maerwald> formal methods ultimately verify your binaries :p
[00:32:59] <dminuoso> boxscape_: You mean like Clean?
[00:33:05] <boxscape_> probably
[00:33:07] <dolio> dminuoso: You're wrong on one account. I still make plenty of mistakes that I know to look for. :þ
[00:33:21] <dminuoso> dolio: heh! :)
[00:33:21] <AWizzArd> boxscape_: so far I think LT make the code run slower, unfortunately ;)
[00:33:22] *** Quits: kuribas (~user@ptr-25vy0i9fcjh581tavd9.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[00:33:41] <AWizzArd> boxscape_: but maybe in 2-3 years it can take load away from the GC. Sounds at least plausible.
[00:33:49] * geekosaur remains unconvinced by LT
[00:33:53] <boxscape_> AWizzArd compilation, but I imagine it doesn't make code slower at runtime, since the multiplicities are probably erased?
[00:34:02] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 265 seconds)
[00:34:10] <boxscape_> or are there some optimizations it prevents?
[00:34:15] <dminuoso> boxscape_: The linear types GHC introduces is separate from what Clean does.
[00:34:43] <AWizzArd> boxscape_: I don't know too much about the implementation details, but their new IO variant possibly needs to do some runtime checking. Not sure.
[00:34:55] <geekosaur> also taking load away form the GC apparently only applies to a very limited set of vector operations, not to most things that can be garbage collected
[00:34:57] <boxscape_> dminuoso I vaguely remember reading this article which talks about Haskell's linear types, but also mentions "This is still future work" https://www.tweag.io/blog/2017-03-13-linear-types/
[00:35:12] <boxscape_> (and it's about performance)
[00:35:25] <dolio> Yeah, deallocating things as soon as they're not live is not even an optimization all the time.
[00:35:34] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:35:38] <AWizzArd> geekosaur: would that require a borrow system as in Rust?
[00:35:46] <dminuoso> boxscape_: If I remember correctly, they were on about *manual* memory management.
[00:35:54] *** Joins: alzgh (~alzgh@user/alzgh)
[00:36:02] <dminuoso> boxscape_: What Clean does, is introduce these mutations in the graph reduction transparently
[00:36:08] <boxscape_> hm okay
[00:36:16] <AWizzArd> geekosaur: the linear type only says that a value must be consumed exactly once, but it could still be shared, so we still need a GC?
[00:36:53] <geekosaur> right, lnear types do not change how a value is shared because it may only be linearly used in a few places
[00:37:00] <dminuoso> boxscape_: So this is the beauty of Clean. You just write code as usual, and if the compiler can prove something is no longer referenceable beyond, then it will introduce mutation operations instead.
[00:37:11] <boxscape_> I see, that is nice
[00:37:16] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:37:19] <dolio> Not sure about that. Is it possible for a linear value to end up in two closures, but for there to be a proof that only one of them actually uses it?
[00:37:21] <geekosaur> (linearity would have to be part of the type and not the fuunction arrow otherwise)
[00:37:59] <AWizzArd> geekosaur: what I had in mind was: if it is known that a value is not shared and we know it is used exactly once then the compiler could add our malloc/free calls and this value stays completly out of gc.
[00:38:09] <dminuoso> There's some really cool optimizations out there. A personal favourite is speculative optimizations in HotSpot
[00:38:16] <dminuoso> Especially how they are implemented
[00:38:26] <geekosaur> ghc really doesn't know hhow to deal with that currently, AWizzArd 
[00:38:53] <geekosaur> except in the case where memory is directly allocated with malloc or alloca
[00:38:59] <dminuoso> AWizzArd: Yes, and you couldnt do that with linear types in Haskell. Clean does this by the way.
[00:39:05] <awpr> malloc and free are probably slower than allocating a GC'd value and immediately letting it become garbage
[00:39:10] <geekosaur> but then you're subscribing to entirely manual memory management
[00:39:33] <awpr> long-lived values are where the cost comes from in Haskell's GC
[00:39:38] *** Joins: acidjnk_new (~acidjnk@p200300d0c726702918431f3aede9e057.dip0.t-ipconnect.de)
[00:40:19] <dminuoso> Arguably, short-lived objects can be cheaper in our GC.
[00:40:22] <geekosaur> right, values allocated and immediately freed never leave the nursery and deallocation is basically a pointer adjustment. if's when they get moved to a igher level of the heap that things become expensive
[00:40:26] <dminuoso> Since they dont need to be freed 
[00:40:42] <awpr> right, that's what I was trying to say
[00:41:45] <dsamperi> Linear types sound very interesting and related to crypto (can only spend once). Lambda Man (Wadler) suggests this is studied at IOHK.
[00:41:53] <dminuoso> And even long lived is not that big of a problem if you have a generational garbage collector
[00:41:59] <dminuoso> So you can dampen the impact of it
[00:42:23] <maerwald> dsamperi: yet, IOHK doesn't employ formal methods on *binaries* (the things that actually run the blockchain) :p
[00:43:25] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:43:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:43:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:44:07] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:44:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:44:30] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:44:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:44:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:44:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:45:15] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:45:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[00:45:59] <AWizzArd> geekosaur: is this so far mostly a suspicion that LT could add complexity that is not worth the benefits? Or are there already concrete examples where this can be demonstrated?
[00:47:01] <maerwald> AWizzArd: all of the existing type level hackery in current haskell? :D
[00:47:22] <geekosaur> currently LT slows things down noticeably even when it's not in use (because it might be used) while adding relatively little (because nothing really tries to take advantage of it)
[00:48:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[00:48:23] <boxscape_> % data R a where R :: a %1 -> R a deriving Show
[00:48:23] <yahb> boxscape_: 
[00:48:25] <boxscape_> % :t R
[00:48:25] <yahb> boxscape_: a -> R a
[00:48:31] <boxscape_> do linearity annotations get ignored in constructors?
[00:48:38] <monochrom> I think we already know that the LinearType extension specifically is not delivering on any of the theoretical safety promises right now, and unlikely to within the next 5 years, hell probably never will.
[00:48:59] <monochrom> This is due to "what if you're in IO and you throw an IO exception".
[00:49:21] <maerwald> hide under the table
[00:50:10] <monochrom> So my bet is that the only hopeful bet is on LinearType opening opportunities for code optimization. And note that even this one is in the future.
[00:51:03] <monochrom> I mean, I am not even talking about using unsafePerformIO to violate purity, or unsafeCoerce to lie about types. I'm just throwing an honest-to-God-legal exception.
[00:51:56] <monochrom> If no one has even written a GHC proposal to fix this, then all your "linear types express an invariant" talks are vapourware.
[00:51:58] <tomjaguarpaw> geekosaur: Why does "might be used" mean it has to slow things down?
[00:52:16] <awpr> hmm, that's a tough issue.  seems to me a monad that can throw exceptions is just not a linear monad (i.e. does not have a multiplicity of 1 on its >>=)
[00:52:26] *** Joins: safinaskar (~safinaska@109-252-90-153.nat.spd-mgts.ru)
[00:52:26] <awpr> which... is a bit of an issue for IO
[00:52:34] <safinaskar> > 2 + 2
[00:52:36] <lambdabot>  4
[00:53:34] <dsamperi> > sqrt 2
[00:53:35] <lambdabot>  1.4142135623730951
[00:53:37] <geekosaur> tomjaguarpaw, the way ghc deals with extensions, they're actually always active. so you have all this machinery that is being invoked to at least some extent, to no point. if only as "is this active?" checks in the hot path (function application)
[00:53:48] <safinaskar> jackdk: thanks for answer! (on curl)
[00:54:36] <geekosaur> and they *are* active during parsing, they just throw an exception if actually used. which may slow parsing
[00:54:53] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[00:54:58] *** Quits: fendor_ (~fendor@178.115.63.67.wireless.dyn.drei.com) (Remote host closed the connection)
[00:55:26] <boxscape_> this should be quantifiable, ghc has performance tests in CI IIRC
[00:56:12] <geekosaur> right, and last I heard (not that I have heard recently, nor can I test this myself on underpowered hardware that can't even build ghc) the slowdown is noticeable
[00:56:58] <geekosaur> alos quantifying it would require finding and removing the linear types patches without disturbing anything else, but they're quite invasive
[00:57:43] <boxscape_> you think looking at the LT merge request isn't enough?
[00:58:14] <geekosaur> it might be
[00:58:26] <geekosaur> hm, presumably there are perf notes on the commit
[00:58:39] <geekosaur> wonder if it can be brougt up on the perf dashboard
[00:59:12] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:59:16] <geekosaur> sadly I don't even remember the url of the perf dashboard
[00:59:19] <boxscape_> https://gitlab.haskell.org/ghc/ghc/-/merge_requests/852/pipelines this is the CI pipelines in the MR, but I'm not well versed enough to have found if the data we're interested in exists so far
[01:02:09] *** Parts: safinaskar (~safinaska@109-252-90-153.nat.spd-mgts.ru) ()
[01:02:22] <boxscape_> geekosaur ah, there's a comment on the MR. "~1% more allocation; ~5% slowdown (though, with time measurement, a large pinch of salt should be taken. I've sometimes had better results, @AndreasK also reported worse times to us)"
[01:02:34] <boxscape_> ( https://gitlab.haskell.org/ghc/ghc/-/merge_requests/852#note_280407 )
[01:02:35] *** Joins: safinaskar (~safinaska@109-252-90-153.nat.spd-mgts.ru)
[01:03:02] *** Parts: safinaskar (~safinaska@109-252-90-153.nat.spd-mgts.ru) ()
[01:04:08] <boxscape_> "Our estimate, based on old benchmarks, is that overall the time slowdown should be half that of [this test], but we haven't been able to confirm at all."
[01:04:27] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:08:21] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c)
[01:12:01] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com) (Quit: Konversation terminated!)
[01:12:51] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.3)
[01:13:35] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-90.home.otenet.gr) (Remote host closed the connection)
[01:15:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:17:33] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[01:18:10] *** Joins: pop3 (~pop3@user/pop3)
[01:18:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:20:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[01:23:49] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:24:00] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[01:32:00] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:34:05] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[01:35:13] *** Joins: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it)
[01:37:32] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[01:38:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[01:42:22] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:44:48] *** Joins: favonia (~favonia@user/favonia)
[01:45:13] *** Quits: michalz (~michalz@185.246.204.109) (Remote host closed the connection)
[01:45:26] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[01:46:59] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:8d15:54ac:ed5f:296c) (Remote host closed the connection)
[01:48:09] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:49:22] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[01:50:32] *** Joins: lavaman (~lavaman@98.38.249.169)
[01:50:36] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:52:51] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:55:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[01:58:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:59:26] *** Quits: mei (~mei@user/mei) (Ping timeout: 260 seconds)
[02:04:00] *** Joins: soft-warm (~soft-warm@ip70-179-31-26.sd.sd.cox.net)
[02:05:54] *** Quits: soft-warm (~soft-warm@ip70-179-31-26.sd.sd.cox.net) (Client Quit)
[02:13:34] <mjrosenb> Is there a shorthand for do {expr; return Nothing}
[02:13:54] *** Joins: dumptruckman (~dumptruck@45-79-175-133.ip.linodeusercontent.com)
[02:14:03] <dumptruckman> Yay, I found it
[02:14:08] <monochrom> expr *> return Nothing
[02:14:15] <mjrosenb> like, I could clearly use >>=, and a lambda (or const, I guess) but those seem ugly
[02:14:19] <mjrosenb> monochrom: danke.
[02:14:42] <mjrosenb> Is that in Control.Monad, or someplace fancier?
[02:14:44] <hpc> expr *> pure Nothing
[02:14:50] <monochrom> Control.Applicative
[02:15:05] <monochrom> You can also use >>, it's already in Prelude
[02:15:13] *** Quits: acidjnk_new (~acidjnk@p200300d0c726702918431f3aede9e057.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[02:15:15] <Axman6> expr $> Nothing
[02:15:25] <Axman6> @hoogle ($>)
[02:15:26] <lambdabot> Data.Functor ($>) :: Functor f => f a -> b -> f b
[02:15:26] <lambdabot> Data.Functor.Compat ($>) :: Functor f => f a -> b -> f b
[02:15:26] <lambdabot> Data.Functor.Apply ($>) :: Functor f => f a -> b -> f b
[02:15:37] <Axman6> there's also...
[02:15:43] <Axman6> @hoogle (<$)
[02:15:43] <lambdabot> Prelude (<$) :: Functor f => a -> f b -> f a
[02:15:43] <lambdabot> Control.Monad (<$) :: Functor f => a -> f b -> f a
[02:15:43] <lambdabot> Control.Applicative (<$) :: Functor f => a -> f b -> f a
[02:15:58] <Axman6> > "Hello!" <$ Just True
[02:15:59] <lambdabot>  Just "Hello!"
[02:16:02] <[exa]> fmap to the left!
[02:16:05] <[exa]> fmap to the right!
[02:16:06] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[02:16:07] <[exa]> party!
[02:16:13] <Axman6> \o\
[02:16:29] <Axman6> \/o/
[02:16:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[02:16:51] <[exa]> <$  <*   $>   *>   bottom   top!
[02:16:51] <Axman6> glguy: how do I escape / at the beginning of a line D:
[02:17:03] <hpc> / /like this
[02:17:12] <Axman6> I tried that
[02:17:14] <[exa]> Axman6: I just put a space there
[02:17:17] <[exa]> no one notices
[02:17:20] <hpc> / /o/
[02:17:21] <dsal> @pl . undo do { expr ; return Nothing }
[02:17:21] <lambdabot> (line 1, column 1):
[02:17:22] <lambdabot> unexpected "."
[02:17:22] <lambdabot> expecting white space, "()", natural, identifier, lambda abstraction or expression
[02:17:23] <hpc> /o/
[02:17:24] <mjrosenb> \say / with say
[02:17:32] <Axman6> /o/
[02:17:39] <monochrom> I think lambdabot's . is @
[02:17:41] <mjrosenb> / with /say?
[02:17:42] <Axman6> /say ftw
[02:18:00] <mjrosenb> wrong slash.  I may have written too much tex recently
[02:18:10] <dsal> I thought . worked...
[02:18:35] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[02:18:36] <geekosaur> @. pl undo do { expr ; return Nothing }
[02:18:38] <Axman6> @. undo pl f g h x = (f x) (g x)
[02:18:38] <lambdabot> expr >> return Nothing
[02:18:40] <lambdabot> f = fix ((const .) . ap)
[02:18:52] <Axman6> thanks for the better example
[02:18:58] <dsal> pl doesn't do anything fancy anyway.
[02:19:19] <hpc> pl is anti-fancy - if you give it a poorly typed expression it still comes up with an answer
[02:19:23] <geekosaur> and doesn't know the Applicative-basee combinators
[02:19:36] <hpc> @pl \x -> x x
[02:19:36] <lambdabot> join id
[02:19:54] <[exa]> -.-
[02:20:06] <boxscape_> @pl (\x -> x x) (\x -> x x)
[02:20:09] <lambdabot> ap id id (ap id id)
[02:20:09] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:20:20] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:20:24] <hpc> @pl-resume
[02:20:29] <boxscape_> @pl 
[02:20:30] <lambdabot> ap id id (ap id id)
[02:20:30] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:20:30] <lambdabot> (line 1, column 1):
[02:20:30] <lambdabot> unexpected end of input
[02:20:30] <lambdabot> expecting white space, "()", natural, identifier, lambda abstraction or expression
[02:20:34] <boxscape_> whoops
[02:20:39] <hpc> hahaha
[02:20:49] <hpc> it can't figure out that's the shortest representation
[02:20:55] <hpc> someone needs to teach it SK
[02:20:55] <monochrom> Ugh that's a very deep infinite loop :)
[02:20:58] <Axman6> keep optimising, lambdabot!
[02:21:09] <Axman6> nah it'll figure it out eventually
[02:21:32] <hpc> i was really hoping for it to optimize to something longer
[02:21:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:21:44] <boxscape_> @unpl ap id id (ap id id)
[02:21:44] <lambdabot> (\ b0 -> return (b0 b0) b0) (\ b0 -> return (b0 b0) b0)
[02:22:09] *** Joins: Cajun (~Cajun@user/cajun)
[02:22:28] <monochrom> I'm surprised this one doesn't say "pessimization suspended" :)
[02:22:35] <boxscape_> haha
[02:22:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Remote host closed the connection)
[02:23:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk)
[02:23:22] <hpc> there's always more to pessimize
[02:23:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:23:47] <boxscape_> applying @pl and @unpl repeatedly seems to make this ever longer, so that's nice
[02:24:06] <hpc> on april 1, @pl should instead translate its input into perl
[02:24:15] <monochrom> haha
[02:24:21] <dsal> See if anyone notices.
[02:24:28] <monochrom> hahaha
[02:24:32] <hpc> bahahaha
[02:24:35] *** Joins: thblt (~thblt@user/thblt)
[02:24:38] <Axman6> @. pl unpl ap id id (ap id id) 
[02:24:41] <lambdabot> ap (return . ap id id) id (ap (return . ap id id) id)
[02:24:41] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:24:53] <Axman6> @. pl unpl ap (return . ap id id) id (ap (return . ap id id) id)
[02:24:56] <lambdabot> ap (return . ap (return . ap (return . ap id id) id) id) id (ap (return . ap (return . ap (return . ap id id) id) id) id)
[02:24:56] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:25:00] <Axman6> :o
[02:25:04] <hpc> that's amazing
[02:25:07] <Axman6> need a @iterate
[02:25:16] <Axman6> Dare I do it again?
[02:25:35] <Axman6> @.pl unpl ap (return . ap (return . ap (return . ap id id) id) id) id (ap (return . ap (return . ap (return . ap id id) id) id) id) -- I dare
[02:25:35] <lambdabot> unpl ap (return . join id) id (join id)
[02:25:42] <Axman6> @. pl unpl ap (return . ap (return . ap (return . ap id id) id) id) id (ap (return . ap (return . ap (return . ap id id) id) id) id) -- I dare
[02:25:45] <lambdabot> ap (return . ap (return . ap (return . ap (return . ap (return . ap (return . ap (return . ap id id) id) id) id) id) id) id) id (ap (return . ap (return . ap (return . ap (return . ap (return . ap (
[02:25:45] <lambdabot> return . ap (return . ap id id) id) id) id) id) id) id) id)
[02:25:45] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:25:52] <Axman6> oh my
[02:26:08] <Axman6> you know you're having fun when lambdabot splits responses over multiple lines
[02:26:21] <hpc> you're not having real fun until it tells you to @more
[02:26:46] <hpc> @pl \a s d f -> a s f d s f a s d f a f a s d f d s a
[02:26:49] <lambdabot> ap (flip . (flip .) . ((flip .) .) . flip ap id . (flip .) . ((flip .) .) . flip flip id . (ap .) . ((flip .) .) . flip flip id . (flip .) . ((ap .) .) . flip flip id . (ap .) . ((flip .) .) . flip
[02:26:49] <lambdabot> ap id . (flip .) . ((flip .) .) . ap (flip . (flip .) . ((flip .) .) . flip flip id . (flip .) . ((ap .) .) . ap (flip . (flip .) . ((flip .) .) . flip flip id . (flip .) . ((ap .) .) . flip flip id
[02:26:49] <lambdabot> . (ap .) . ((flip .) .) . flip ap id . (flip .) . ((flip .) .) . ap (flip . (flip .) . ((flip .) .) . flip flip id . (flip .) . ((ap .) .) . flip ap id . (flip .) . ((flip .) .) . (flip .)) id) id)
[02:26:49] <lambdabot> id) id
[02:26:49] <lambdabot> optimization suspended, use @pl-resume to continue.
[02:27:11] <Axman6> flip!
[02:27:15] <[exa]> now that's a program!
[02:27:17] <hpc> huh, that wasn't supposed to be so spammy
[02:27:18] <boxscape_> I 
[02:27:25] <boxscape_> accidentally pressed my enter key
[02:27:50] *** Quits: burnsidesLlama (~burnsides@dhcp168-012.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[02:28:01] <hpc> i wonder what the cutoff actually is now for @more
[02:28:44] <boxscape_> > let f = _ in f
[02:28:48] <lambdabot>  error:
[02:28:48] <lambdabot>      • Found hole: _ :: t1
[02:28:48] <lambdabot>        Where: ‘t1’ is a rigid type variable bound by
[02:28:54] <boxscape_> oh
[02:28:59] <boxscape_> it says @more for this in a private message
[02:29:19] <Axman6> :t let f x=(x,x,x,x) in f.f.f.f.f
[02:29:20] <lambdabot> d -> (((((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (
[02:29:20] <lambdabot> d, d, d, d), (d, d, d, d), (d, d, d, d))), (((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d,
[02:29:20] <lambdabot> d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d))), (((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d,
[02:29:20] <lambdabot>  d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d))), (((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d)
[02:29:20] <lambdabot> , (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)), ((d, d, d, d), (d, d, d, d), (d, d, d, d), (d, d, d, d)))), ((((d, d, d, d), (d, d, d, d), (d, d, d, d), (d,
[02:29:22] <lambdabot> [14 @more lines]
[02:29:29] <boxscape_> I use that function everyday!
[02:29:34] <Axman6> 14! jesus, sorry
[02:30:15] <boxscape_> definitely seems like the cutoff was increased though
[02:30:16] * Axman6 will stop abusing lambdabot
[02:30:23] <boxscape_> @botsnack
[02:30:23] <lambdabot> :)
[02:32:40] <Cajun> i wonder if it would be possible to force the tuple'd `d` type variables in that monster to be unique so it can give the entire alphabet. i dont know enough about type level stuff to tell if its possible off the bat :P
[02:34:08] <monochrom> GHC may prefer to enumerate d0, d1, d2... instead of running through the alphabet.
[02:36:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[02:36:50] <mjrosenb> does anything seem off about {value ^? _Ctor . to (==OtherCtor)}
[02:40:05] <hpc> Cajun: some rank-2 stuff can probably force it
[02:40:22] <hpc> with reasonably short code
[02:43:41] <Cajun> i figured it would require some foralls but i dont know how to use them to force types to be unique. will require some tinkering
[02:44:10] <mjrosenb> well, in that code, they're all explicitly the same.  You can set it up such that they're naturally different
[02:44:41] * mjrosenb attempts to remember how
[02:44:46] <hpc> :t \x -> (runST x, runST x)
[02:44:47] <lambdabot> error:
[02:44:47] <lambdabot>     • Couldn't match expected type ‘ST s a’ with actual type ‘p’
[02:44:47] <lambdabot>         because type variable ‘s’ would escape its scope
[02:45:41] <glguy> Axman6: Use /say
[02:46:33] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.3)
[02:47:00] <monochrom> Normally "\x" is monomorphizing.  You will need some handwritten type annotations.
[02:49:29] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:49:46] <Cajun> https://paste.tomsmeding.com/jcf3L2oX sadly this didnt work either, ghc is too smart 
[02:49:49] <hpc> :t let f = \x -> (Const x, Const x) in f.f.f.f
[02:49:50] <lambdabot> forall k1 k2 k3 k4 k5 k6 k7 k8 a (b1 :: k1) (b2 :: k2) (b3 :: k3) (b4 :: k4) (b5 :: k5) (b6 :: k6) (b7 :: k7) (b8 :: k8). a -> (Const (Const (Const (Const a b1, Const a b2) b3, Const (Const a b1,
[02:49:50] <lambdabot> Const a b2) b4) b5, Const (Const (Const a b1, Const a b2) b3, Const (Const a b1, Const a b2) b4) b6) b7, Const (Const (Const (Const a b1, Const a b2) b3, Const (Const a b1, Const a b2) b4) b5, Const
[02:49:50] <lambdabot> (Const (Const a b1, Const a b2) b3, Const (Const a b1, Const a b2) b4) b6) b8)
[02:50:02] <hpc> there we go
[02:50:32] <hpc> oh man, it even does the kind polymorphism
[02:51:55] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:52:47] <Cajun> wouldnt `Const x` be only partially applied?
[02:53:17] <hpc> :t Const
[02:53:18] <lambdabot> forall k a (b :: k). a -> Const a b
[02:53:35] <Cajun> ah well that makes sense
[02:53:53] <Cajun> the type has the `b` but the term doesnt. fun
[02:54:15] <hpc> yep
[02:54:28] <hpc> or another way to look at it
[02:54:36] <hpc> that data constructor makes Const a b = a
[02:54:37] <hpc> :k Const
[02:54:38] <lambdabot> * -> k -> *
[02:54:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:54:45] <hpc> and that's the type parameters
[02:54:50] <hpc> so you sort of get Const a b = a
[02:55:12] <hpc> b is ignored and can be anything
[02:55:37] <hpc> and a is constrained to Type by being involved in the data constructor
[02:56:11] <Cajun> in the source for Data.Functor.Const, it doesnt explicitly state the kind polymorphism. can GHC just assume polymorphic kinds instead of Type?
[02:56:24] <boxscape_> with -XPolyKinds it does
[02:56:32] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:57:47] *** Quits: morphism (~ret@static.247.176.55.162.clients.your-server.de) (Ping timeout: 268 seconds)
[02:59:13] *** Joins: morphism (~ret@86.57.6.225)
[03:03:44] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:03:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:03:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:13:19] <mjrosenb> I'm guessing there isn't a built in function equivalent to Data.Set.fromList . Data.Map.elems
[03:14:48] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[03:15:06] <Axman6> type Set a = Map a (); then it's just void :P
[03:15:12] <sclv> no reason there would be. there's keysSet for the keys, fwiw
[03:15:25] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[03:17:21] *** Quits: aegon (~mike@174.127.249.180) (Quit: leaving)
[03:18:09] <mjrosenb> the best argument that I can think of for why it would exist is that the values of a map have no inherent order, so why return them in a structure that has an inherent order.
[03:18:33] <sclv> well they can have multiplicity
[03:18:42] <sclv> which this loses. so arguably you'd want a multiset
[03:18:45] <mjrosenb> then again, the inherent order of the keys of a map is why keysSet exists, so *shrug*
[03:18:50] <Axman6> :t Data.Set.fromList . Data.Map.elems
[03:18:50] <mjrosenb> agreed.
[03:18:51] <lambdabot> Ord a => M.Map k a -> S.Set a
[03:19:05] *** Quits: danso (~danso@23-233-111-52.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[03:19:12] <Axman6> oh my bad, thought it was the keys, not the values, yeah that's a bit of an odd operation
[03:19:20] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:19:32] <boxscape_> they kind of have an inherent order in the sense that the keys require an Ord constraint
[03:19:40] *** Joins: alzgh (~alzgh@user/alzgh)
[03:19:56] <boxscape_> but that argument wouldn't work for HashMap
[03:19:59] <boxscape_> which also returns a list
[03:20:31] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[03:21:07] *** Joins: pop3 (~pop3@user/pop3)
[03:21:10] <boxscape_> just found about recover-rtti and it's "anythingToString :: a -> String" function, and I'm amazed that all this information is available on the heap
[03:21:18] <monochrom> I think all of you forgot that library function existence is a result of the tug war between user demand and author mood, not a result of "rational" arguments.
[03:22:00] <shapr> Any bad points to list comprehensions?
[03:22:10] <shapr> like, for usability or anything else?
[03:22:14] <geekosaur> not to standard list comprehensions
[03:22:33] <geekosaur> TransformListComps is disliked by some, also MonadComprehensions
[03:22:59] <shapr> what's the bad side(s) of MonadComprehensions?
[03:23:13] <monochrom> Indeed even "rational" "arguments" are just cosmetics for "I have a use case".
[03:23:14] <shapr> geekosaur: do you happen to remember any of the reasons for dislike?
[03:23:30] <geekosaur> all list comprehensions are rewritten as monad comprehensions instead of a more optimal form using filter and map
[03:23:33] <shapr> I'm just trying to think about pros and cons of various features
[03:24:17] <geekosaur> that is they're rewritten to operations in the list monad
[03:25:10] <geekosaur> TransformListCompl is barely used and I'm not sure anyone actually understands it except monochrom, who has a batty example lying around somewhere
[03:26:31] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[03:27:48] *** Joins: Cajun (~Cajun@user/cajun)
[03:29:09] <boxscape_> at some point it was suggested to remove it but some people said they use it
[03:31:39] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[03:32:43] <shapr> geekosaur: https://github.com/shapr/tmuxmarta/blob/master/src/Lib.hs#L65
[03:32:59] <shapr> make that TWO examples!
[03:33:10] <shapr> boxscape_: do you remember where/when that was suggested?
[03:33:33] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[03:33:39] <boxscape_> unfortunately not really :-/ I remember reading it maybe one or two years ago and I think spj was involved in the discussion, but that's it
[03:34:38] *** Quits: cosimone` (~user@93-34-133-207.ip49.fastwebnet.it) (Ping timeout: 260 seconds)
[03:36:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 268 seconds)
[03:37:00] *** Joins: zebrag (~chris@user/zebrag)
[03:38:10] *** Quits: kilolympus (~kilolympu@185.65.135.177) (Ping timeout: 252 seconds)
[03:40:30] *** Quits: max22- (~maxime@2a01cb0883359800dcf2cfbbabba90b8.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:40:58] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[03:42:06] *** Quits: catman (~catman@user/catman) (Ping timeout: 260 seconds)
[03:52:03] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 268 seconds)
[03:52:25] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[03:53:11] *** Quits: forell (~forell@user/forell) (Ping timeout: 264 seconds)
[03:53:16] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[03:54:15] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[03:57:40] *** Joins: forell (~forell@user/forell)
[03:58:20] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[03:59:24] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[04:00:18] *** Joins: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a)
[04:01:15] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[04:02:27] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[04:03:22] *** Joins: Khelben (~Khelben@2001:818:e316:e700:85c9:6d4e:a6d0:2b03)
[04:04:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:09:12] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[04:13:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[04:14:14] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[04:17:01] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[04:17:12] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8) (Read error: Connection reset by peer)
[04:17:34] *** Joins: pop3 (~pop3@user/pop3)
[04:18:39] *** Joins: Inst (~Inst@c-98-208-218-119.hsd1.fl.comcast.net)
[04:19:25] *** Quits: haritz (~hrtz@user/haritz) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[04:20:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:20:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:20:57] *** Joins: wroathe (~wroathe@user/wroathe)
[04:24:11] <hippoid> Bifunctor https://hackage.haskell.org/package/base-4.16.0.0/docs/src/Data.Bifunctor.html#Bifunctor has a default implementation for first, second, and bimap.  first uses bimap, and bimap uses first, and I don't know how to think about this
[04:24:41] <hippoid> My naive thought is that this results in a kind of infinite loop, but that can't be right
[04:25:01] <geekosaur> there will also be a MINIMAL pragma
[04:25:33] <geekosaur> the idea is, if you implement either one you get the other for free. the MINIMAL pragma ensures that at least one of them must be defined
[04:25:48] *** Quits: cigsender (~cigsender@74.124.58.162) (Quit: Lost terminal)
[04:25:52] <hippoid> geekosaur: ahh, interesting
[04:25:53] <geekosaur> implement in an instance, that is
[04:25:58] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[04:25:58] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Ping timeout: 260 seconds)
[04:26:13] <geekosaur> the ones provided in the class declaration are only used if an instance doesn't define that method
[04:26:45] <hippoid> so any instance must provide at least bimap, or first and second?
[04:26:57] <geekosaur> yes
[04:27:14] <hippoid> thanks, i dont think i would have ever figured that out!
[04:29:37] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com)
[04:31:51] *** Quits: juhp (~juhp@128.106.188.220) (Quit: juhp)
[04:31:58] *** Joins: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220)
[04:31:58] *** Quits: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220) (Changing host)
[04:31:58] *** Joins: haritz (~hrtz@user/haritz)
[04:32:05] *** Joins: juhp (~juhp@128.106.188.220)
[04:32:55] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[04:33:23] *** Joins: pop3 (~pop3@user/pop3)
[04:34:55] *** Quits: lbseale_ (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[04:36:06] *** Quits: juhp (~juhp@128.106.188.220) (Client Quit)
[04:36:21] *** Joins: juhp (~juhp@128.106.188.220)
[04:36:26] <boxscape_> hippoid: simpler example: Eq has (==) = not (/=) as well as (/=) = not (==)
[04:36:30] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Ping timeout: 276 seconds)
[04:37:02] *** Joins: danso (~danso@23-233-111-52.cpe.pppoe.ca)
[04:37:13] <geekosaur> and a MINIMAL pragma specifying that at least one of those must be defined by an instance
[04:37:16] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[04:37:32] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 256 seconds)
[04:38:08] <mjrosenb> Data.Set.mapMonotonic, fst is monotonic as long as (x,a) and (x,b) aren't in the set, right?
[04:42:10] *** Quits: hippoid (~idris@184.105.6.88) (Quit: leaving)
[04:42:11] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:42:34] *** Joins: hippoid (~idris@184.105.6.88)
[04:42:40] <boxscape_> mjrosenb that sounds right to me
[04:44:32] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:44:53] *** Quits: nehsou^ (~nehsou@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[04:44:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[04:46:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[04:47:13] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:51:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:54:03] *** Quits: Khelben (~Khelben@2001:818:e316:e700:85c9:6d4e:a6d0:2b03) (Remote host closed the connection)
[04:54:47] *** Joins: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net)
[04:55:26] *** Quits: Inst (~Inst@c-98-208-218-119.hsd1.fl.comcast.net) (Quit: Leaving)
[04:56:43] *** Joins: Inst (~Inst@c-98-208-218-119.hsd1.fl.comcast.net)
[04:57:19] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[05:02:58] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 268 seconds)
[05:07:13] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[05:08:44] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-ad06-78d6-67f9-46d9.res6.spectrum.com) (Quit: Konversation terminated!)
[05:11:17] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[05:13:56] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:25:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[05:26:53] *** Quits: mmhat (~mmh@55d4baf7.access.ecotel.net) (Quit: WeeChat 3.3)
[05:30:55] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[05:35:29] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Client Quit)
[05:38:51] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[05:40:15] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[05:41:27] *** Joins: pop3 (~pop3@user/pop3)
[05:42:42] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[05:43:14] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[05:43:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:43:33] *** Joins: biberu (~biberu@user/biberu)
[05:46:19] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[05:46:31] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:49:49] *** Joins: slaydr (~slaydr@45.131.194.34)
[05:50:01] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[05:50:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[05:56:01] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[05:57:00] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[05:58:06] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[06:01:53] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[06:02:10] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[06:02:20] *** Joins: hololeap_ (~hololeap@user/hololeap)
[06:03:36] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[06:03:50] *** Quits: kronicmage (user28253@neotame.csclub.uwaterloo.ca) (Quit: WeeChat 3.0.1)
[06:04:01] *** Joins: kronicmage (user72429@neotame.csclub.uwaterloo.ca)
[06:05:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[06:05:43] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:06:39] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[06:13:46] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[06:18:12] *** Quits: xff0x (~xff0x@port-92-193-245-245.dynamic.as20676.net) (Ping timeout: 268 seconds)
[06:19:29] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:a124:ca01:b87f:741d)
[06:25:46] *** Joins: juri_ (~juri@178.63.35.222)
[06:29:18] <dsal> What's that gross hack for exposing a constructor without allowing pattern matching on it?  i.e., I want to be able to make things, but not take them apart.
[06:29:54] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:31:22] <dsal> I guess I'm thinking of the one where you expose the record accessor functions without the constructor.  Right now, I've just `something = Something`.  I guess that'll do.
[06:33:45] *** Joins: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62)
[06:34:54] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:42:51] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[06:47:46] *** Quits: alx741 (~alx741@186.178.109.189) (Quit: alx741)
[06:50:02] <sm> https://www.reddit.com/r/haskell/comments/qm9lra/stack_dependency_hell/hj8lbdh/ - GHC doesn't allow linking with multiple versions of a package because it does whole-program compilation, which is where much of the speed comes from - am I right ?
[06:50:51] <sm> and if so, does rust not do whole-program compilation (doesn't need to ?)
[06:51:39] <monochrom> No, actually GHC allows it as much as possible. (There are still very understandable limits.)  cabal-install is the one that plays it very safe and insists on uniqueness.
[06:51:58] <boxscape_> sm: that seems hard to believe considering there's a project to make GHC become a whole-project compiler https://github.com/grin-compiler/ghc-whole-program-compiler-project
[06:52:09] <boxscape_> s/whole-project/whole-program
[06:52:13] <monochrom> And stack, stack doesn't even want you to use hackage.
[06:52:26] <sm> ohh.. better edit my answer
[06:52:43] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:3a97:eaba:c01a:d700) (Ping timeout: 268 seconds)
[06:53:36] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:25ae:baa7:4680:70ca)
[06:53:50] * sm was wrong on the internet for a sec
[06:54:07] <sm> stack has no problem using hackage
[06:54:30] * sm saves monochrom from being wrong on the internet
[06:54:50] <monochrom> I said "want" not "problem".
[06:56:40] <monochrom> The intention of a program's authors can be mostly gleaned from defaults, the design of the config files, how easy it is to do certain things and how hard to do certain other "no problem in theory" things.
[06:56:45] <sm> and cabal doesn't allow linking with multiple versions of a package because... ? it is something optimisation related isn't it ?
[06:57:35] <monochrom> Even the language Haskell itself, you can feel it doesn't want you to use IO for everything, even though "there is no problem".  My saying "doesn't want" is justifiable, very right, not wrong at all.
[06:57:36] <sclv> its because its extremely hard to express
[06:58:04] <monochrom> It plays it very safe. That's all.
[06:58:05] *** Joins: bhrgunatha (~bhrgunath@2001-b011-8005-cec6-1c67-2ef9-44d3-785b.dynamic-ip6.hinet.net)
[06:58:24] *** Quits: bhrgunatha (~bhrgunath@2001-b011-8005-cec6-1c67-2ef9-44d3-785b.dynamic-ip6.hinet.net) (Remote host closed the connection)
[06:59:01] *** Joins: shriekingnoise_ (~shrieking@186.137.144.80)
[06:59:02] <remexre> what's the technique called where you treat ([a] -> [a]) as a "chunk" of a linked list for concatenating using composition?
[06:59:11] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 264 seconds)
[06:59:23] * sm installs things from hackage with stack all the time, per docs (https://docs.haskellstack.org/en/stable/build_command/#target-syntax), but YMMV :)
[06:59:38] <dsal> remexre: Like a DList?
[06:59:52] <remexre> ah, yep, that's it!
[07:00:08] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 268 seconds)
[07:00:09] <monochrom> I even know a blog that says Haskell beginners should stay in IO all the time.
[07:00:32] <monochrom> Again, I'm talking about "want" not "legal".
[07:02:11] <monochrom> I know this because I write programs that are biased, too.
[07:02:30] <dolio> Someone should come up with a different name for DList.
[07:02:48] <dolio> Like Cayley list or something.
[07:03:30] <monochrom> My https://github.com/treblacy/hasdoc chooses to make it easier to look up by package name, harder to look up by module name (you have to add a non-default -m switch).
[07:04:28] <monochrom> One can make the case of "but I add -m all the time". That still doesn't contradict the author's bias that the author thinks that package name is more common.
[07:06:30] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[07:08:47] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Read error: Connection reset by peer)
[07:10:40] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[07:12:17] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:12:17] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:12:17] *** finn_elija is now known as FinnElija
[07:12:48] <jollygood2> monochrom, what does stackage want you to use, then? I thought it is 100% dependent on libraries on hackage. or maybe I misunderstand what you mean
[07:13:09] <dolio> Stack wants you to use stackage.
[07:14:03] <jollygood2> stackage is a curated collection of hackage libraries
[07:14:04] <monochrom> One of those times when "white horse is not horse" makes sense.
[07:14:05] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[07:14:54] <monochrom> hackage is not curated.
[07:15:32] *** Quits: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 268 seconds)
[07:17:07] *** Quits: boxscape_ (~boxscape_@i59F67A7D.versanet.de) (Quit: Connection closed)
[07:17:28] <monochrom> There is also a forgetful functor from Hask to Set. This still does not contradict "Hask is not Set" or even "Haskell semantists don't want you to think of sets".
[07:19:59] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[07:21:11] <dolio> Well, that may or may not be true, depending on what you're doing.
[07:21:22] <monochrom> heh
[07:21:31] <dolio> Hask might be too awesome to be contained in sets.
[07:21:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:22:22] <monochrom> I'm sure my students think of "the Int type is a set" all the time. And my course doesn't go deep enough, so I let them, it works fine in the context of my pretty introductory course.
[07:24:54] <monochrom> Well, I guess Int is not a very illustrative example, it's almost a set.  When you get to [Int]->[Int] it begins to break more.
[07:25:30] <dolio> The big problems are stuff like `data T = C ((T -> Bool) -> Bool)`
[07:25:41] <monochrom> Yeah.
[07:30:42] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[07:35:53] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[07:39:36] <sm> jollygood2: stack wants your build/install commands to be repeatable, so it requires you to to either use packages in the specified stackage snapshot, or if you use hackage packages not in the snapshot, to explicitly name them and their versions
[07:40:07] <sm> (in an extra-deps list in package.yaml or on the command line)
[07:55:08] *** Joins: mbuf (~Shakthi@122.174.233.21)
[07:56:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[07:59:20] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 268 seconds)
[08:11:41] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[08:17:15] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Read error: Connection reset by peer)
[08:17:48] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:23:59] *** Quits: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a) (Read error: Connection reset by peer)
[08:24:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[08:36:21] *** Joins: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[08:39:48] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[08:40:37] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[08:52:03] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[08:54:50] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:01:26] *** Joins: wei2912 (~wei2912@138.75.71.147)
[09:06:33] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 268 seconds)
[09:07:17] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[09:09:37] *** Joins: mei (~mei@user/mei)
[09:09:59] *** Quits: emf_ (~emf@2620:10d:c090:400::5:5f62) (Ping timeout: 264 seconds)
[09:11:51] *** Joins: Jing (~textual@2604:a840:3::10f2)
[09:15:52] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[09:23:14] *** Quits: shailangsa (~shailangs@host217-39-45-200.range217-39.btcentralplus.com) (Ping timeout: 260 seconds)
[09:26:53] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 268 seconds)
[09:27:21] *** Joins: alzgh (~alzgh@user/alzgh)
[09:28:08] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Ping timeout: 268 seconds)
[09:30:03] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:31:02] <energizer> what is the implementation of fmap for List?
[09:31:51] <energizer> (or does the question not make sense)
[09:32:50] <Axman6> @ :t fmap @[]
[09:32:56] <Axman6> % :t fmap @[]
[09:32:56] <yahb> Axman6: (a -> b) -> [a] -> [b]
[09:33:05] <Axman6> does that type look familliar to you?
[09:34:13] <Axman6> That definitewly sounds like a homework question to me, so sorry for not giving you the answer outright
[09:34:44] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[09:35:00] <energizer> not homework, i'm trying to understand a blog post that uses `deriving Functor`
[09:36:15] <Axman6> well, fmap :: (a -> b) -> f a -> f b, we can replace f with [] if we think it _can_ be a functor and see if we can write that function. doing that, we get fmap :: (a -> b) -> [a] -> [b] 
[09:36:46] <Axman6> what behaviour do you expect fmap to have when used on a list? what would fmap show [1,2,3] return?
[09:37:58] <energizer> [show 1, show 2, show 3]
[09:38:16] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[09:38:47] <Axman6> which would be ["1","2","3"] yeah?
[09:38:56] <Axman6> > fmap show [1,2,3] -- It is!
[09:38:58] <lambdabot>  ["1","2","3"]
[09:39:55] <Axman6> so, what do you expect fmap show [] to return?
[09:40:08] <energizer> []
[09:40:15] <Axman6> or, even better, that do you expect fmap f [] = ?
[09:40:18] <Axman6> great
[09:40:37] <Axman6> so, fmap f [] = [], we're half way there, since lists only have two constructors
[09:40:58] <energizer> fmap f x:xs = f x : fmap f xs
[09:40:59] <Axman6> what about the other constructor, (:)? fmap f (x : xs) = ???
[09:41:16] <Axman6> close enough, needs brackets around (x:xs), but that's it
[09:41:56] <energizer> alright cool
[09:42:16] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[09:42:59] <Axman6> to be sure, you should also check the Functor laws hold: fmap id xs = xs, and fmap f (fmap g xs) = fmap (f . g) xs
[09:45:49] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[09:46:02] *** Joins: Vajb (~Vajb@85-76-35-250-nat.elisa-mobile.fi)
[09:47:35] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[09:49:01] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[09:52:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:54:02] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[09:59:21] *** Quits: Vajb (~Vajb@85-76-35-250-nat.elisa-mobile.fi) (Read error: Connection reset by peer)
[09:59:36] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[10:00:01] *** Quits: bilegeek (~bilegeek@2600:1008:b00f:bd9f:b35d:f157:9cec:ab62) (Quit: Leaving)
[10:02:20] <awpr> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-Type-Ord.html#t:-60- interesting definition, that
[10:03:32] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[10:03:56] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[10:05:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[10:07:16] *** Joins: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se)
[10:12:58] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[10:13:11] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[10:20:10] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 260 seconds)
[10:23:03] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:26:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:32:37] <Axman6> that... doesn't look right
[10:33:21] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Quit: ERC (IRC client for Emacs 27.1))
[10:33:41] <awpr> nbd for me, I can just leave it behind while turning https://hackage.haskell.org/package/numeric-kinds-0.1.0.0/docs/Kinds-Num.html into a compatibility shim
[10:33:48] <awpr> and seems to be already fixed in git
[10:34:03] *** Joins: cosimone (~user@93-44-187-173.ip98.fastwebnet.it)
[10:34:37] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:35:35] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:41:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[10:42:45] *** Joins: michalz (~michalz@185.246.204.109)
[10:44:48] *** Quits: morphism (~ret@86.57.6.225) (Quit: WeeChat 3.3)
[10:46:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[10:54:10] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[10:54:17] <whatsupdoc> <hint>:1:3: parse error on input ‘=’
[10:58:24] *** Joins: acidjnk_new (~acidjnk@p200300d0c726702918431f3aede9e057.dip0.t-ipconnect.de)
[11:06:16] <Inst> oh yeah, awpr, this is the "blowhard" i was talking about
[11:09:31] *** Joins: fendor (~fendor@178.115.63.67.wireless.dyn.drei.com)
[11:17:13] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[11:30:11] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[11:30:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:33:21] *** Joins: trcc_ (~trcc@users-1190.st.net.au.dk)
[11:34:32] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Ping timeout: 260 seconds)
[11:35:19] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[11:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:25] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:37:41] *** Quits: niko (~niko@libera/staff/niko) (Remote host closed the connection)
[11:37:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:40:05] *** Joins: shidima (~shidima@83.232.63.181)
[11:41:38] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[11:46:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[11:47:27] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:50:23] *** Joins: chele (~chele@user/chele)
[11:53:22] *** Joins: nschoe (~quassel@178.251.84.79)
[11:55:12] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:ac85:493a:6db9:7a0f)
[11:57:11] *** Joins: o (~niko@libera/staff/niko)
[12:02:16] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[12:05:04] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[12:06:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:08:54] *** Quits: Inst (~Inst@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[12:13:48] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:14:03] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:14:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[12:14:24] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[12:16:26] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8)
[12:23:20] *** Quits: gdown (~gavin@h69-11-248-109.kndrid.broadband.dynamic.tds.net) (Remote host closed the connection)
[12:25:00] *** Joins: __monty__ (~toonn@user/toonn)
[12:32:37] *** Quits: fendor (~fendor@178.115.63.67.wireless.dyn.drei.com) (Remote host closed the connection)
[12:33:19] *** Quits: cads (~cads@ip-64-72-99-234.lasvegas.net) (Quit: Leaving)
[12:36:39] *** Joins: fendor (~fendor@178.115.63.67.wireless.dyn.drei.com)
[12:37:18] *** Joins: wonko (~wjc@user/wonko)
[12:41:51] *** Joins: kadir (~kadir@95.7.9.203)
[12:49:45] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:50:56] <mc47> geekosaur: the #xmonad-unlogged message is also displayed here
[12:53:05] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:53:17] *** Quits: azeem (~azeem@2a00:801:3cb:bcc0:53ee:32be:de18:8352) (Read error: Connection reset by peer)
[12:54:11] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[12:55:09] <mc47> And not displayed in #xmonad
[12:55:44] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[12:56:14] *** Joins: kuribas (~user@ptr-25vy0i85hqqtidw9mko.18120a2.ip6.access.telenet.be)
[13:00:16] *** Quits: shriekingnoise_ (~shrieking@186.137.144.80) (Quit: Quit)
[13:01:50] *** Joins: fendor_ (~fendor@178.115.63.67.wireless.dyn.drei.com)
[13:02:07] *** Quits: fendor (~fendor@178.115.63.67.wireless.dyn.drei.com) (Ping timeout: 268 seconds)
[13:05:17] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Quit: Quit.)
[13:05:40] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:06:19] *** Joins: cfricke (~cfricke@user/cfricke)
[13:06:25] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:a124:ca01:b87f:741d) (Remote host closed the connection)
[13:06:41] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:ed13:7d8f:8a23:addd)
[13:06:59] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[13:09:34] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:09:35] *** Joins: aleator (~aleator@176-93-61-167.bb.dnainternet.fi)
[13:09:51] *** Quits: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de) (Quit: ubert)
[13:11:21] <aleator> Hi! I'm seeking help with haskell.nix. I get "anonymous function at ... called without required argument '<one of my dependencies>' at .. make-package-set.nix:87:27" Would anyone happen to know what this could be about?
[13:12:43] <dminuoso> aleator: As with nix, it's hard to say in general
[13:13:02] <dminuoso> Your best luck is using --show-trace, look at the source/line/column of various points in the stack trace
[13:13:05] <dminuoso> and determine what's going on
[13:13:24] <dminuoso> Could be anything ranging from "mismatching arguments", forgot an argument, an argument too much, you stuff the wrong thing in the wrong place
[13:15:15] <aleator> dminuoso: Yeah. I had hoped this to be something familiar to someone. All the related bits seem to be generated by haskell.nix infrastructure. And everything works until I add a that specific dependency, after which it doesn't.
[13:15:37] <aleator> Builds with stack though.
[13:16:31] <dminuoso> aleator: Can you show the diff from the smallest portion that introduces that error?
[13:18:24] <aleator> dminuoso: With some work, yeah. I'll need to do bit of work to get there though.
[13:20:05] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Quit: Quit.)
[13:20:20] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:21:38] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Client Quit)
[13:21:53] *** Joins: Arsen (~arsen@managarm/dev/Arsen)
[13:23:38] *** Quits: tcard_ (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[13:26:39] *** Quits: Arsen (~arsen@managarm/dev/Arsen) (Client Quit)
[13:27:53] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[13:28:35] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:ed13:7d8f:8a23:addd) (Ping timeout: 264 seconds)
[13:28:53] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:8d66:5d08:1338:5e80)
[13:29:06] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 260 seconds)
[13:33:54] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:34:59] *** Joins: Arsen (arsen@managarm/dev/Arsen)
[13:35:01] *** Joins: shidima_ (~shidima@46.44.183.25)
[13:37:51] *** Quits: shidima (~shidima@83.232.63.181) (Read error: Connection reset by peer)
[13:38:20] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[13:38:55] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[13:40:26] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[13:42:36] *** Joins: Unhammer (~Unhammer@user/unhammer)
[13:43:42] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:45:27] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:48:17] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[14:09:32] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (Remote host closed the connection)
[14:09:49] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[14:11:44] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[14:11:44] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:13:46] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[14:15:39] *** Joins: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[14:16:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:17:22] *** Joins: gentauro (~gentauro@user/gentauro)
[14:18:40] *** Joins: Everything (~Everythin@37.115.210.35)
[14:18:51] *** Joins: fusion86 (~fusion@2a02-a44c-e6e5-1-768d-77d5-1db4-35ae.fixed6.kpn.net)
[14:20:55] *** Joins: Cajun (~Cajun@user/cajun)
[14:21:20] *** Joins: mmhat (~mmh@55d4a8dc.access.ecotel.net)
[14:21:41] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[14:24:38] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[14:24:49] <geekosaur> mc47, that's odd, I set it in #xmonad and glguy set the message here because I don't have perms
[14:27:41] <geekosaur> hrm, may be your client. hexchat decided to display the notices in my chanserv tab, and otherwise displays them somewhat randomly
[14:27:56] <geekosaur> (notices are poorly handled by hexchat, I've noticed)
[14:28:59] *** Joins: Lycurgus (~juan@98.4.112.204)
[14:29:39] *** Joins: boxscape_ (~boxscape_@vpn-44-229.hq.eso.org)
[14:30:54] *** Joins: alx741 (~alx741@186.178.109.189)
[14:35:17] *** hololeap_ is now known as hololeap
[14:38:38] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:ac85:493a:6db9:7a0f) (Ping timeout: 260 seconds)
[14:40:50] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[14:42:48] *** Joins: AlexNoo_ (~AlexNoo@94.233.241.187)
[14:43:25] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:45:43] *** Quits: AlexZenon (~alzenon@94.233.241.118) (Ping timeout: 268 seconds)
[14:46:20] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:46:35] *** Quits: AlexNoo (~AlexNoo@94.233.241.118) (Ping timeout: 264 seconds)
[14:46:57] *** Quits: Alex_test (~al_test@94.233.241.118) (Ping timeout: 268 seconds)
[14:47:36] *** Quits: hippoid (~idris@184.105.6.88) (Quit: Lost terminal)
[14:49:02] *** Joins: gentauro (~gentauro@user/gentauro)
[14:49:24] *** Joins: AlexZenon (~alzenon@94.233.241.187)
[14:51:00] *** Joins: Alex_test (~al_test@94.233.241.187)
[14:51:00] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[14:51:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[14:51:13] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[14:54:03] *** Joins: gentauro (~gentauro@user/gentauro)
[14:59:19] *** Quits: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf) (Remote host closed the connection)
[15:05:07] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:07:36] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:10:22] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[15:10:54] *** Quits: forell (~forell@user/forell) (Ping timeout: 260 seconds)
[15:12:50] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:12:59] *** Joins: forell (~forell@user/forell)
[15:13:30] *** Joins: gentauro (~gentauro@user/gentauro)
[15:16:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:17:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:17:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:20:51] *** Quits: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com) (Ping timeout: 268 seconds)
[15:20:51] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:21:26] *** Joins: jle` (~jle`@2603-8001-3b02-84d4-0000-0000-0000-025d.res6.spectrum.com)
[15:26:48] *** Joins: vysn (~vysn@user/vysn)
[15:26:52] *** Joins: gentauro (~gentauro@user/gentauro)
[15:27:22] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d501:c9ea:33ea:39c7)
[15:28:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:28:11] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:31:57] *** Quits: Jing (~textual@2604:a840:3::10f2) (Remote host closed the connection)
[15:32:01] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:32:26] *** Joins: Jing (~textual@2604:a840:3::10f2)
[15:34:25] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[15:35:24] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:36:17] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[15:36:34] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:37:39] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:38:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:38:50] *** Quits: koz (~koz@2404:4408:430f:a900:ca69:658c:ba89:aa9f) (Ping timeout: 260 seconds)
[15:39:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:41:14] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 260 seconds)
[15:41:38] *** Quits: Jing (~textual@2604:a840:3::10f2) (Remote host closed the connection)
[15:41:53] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[15:42:12] *** Joins: Jing (~textual@125.105.142.242)
[15:42:16] *** Joins: gentauro (~gentauro@user/gentauro)
[15:42:52] *** Joins: koz (~koz@121.99.240.58)
[15:45:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:45:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:50:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:51:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:51:13] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:51:42] *** Quits: fusion86 (~fusion@2a02-a44c-e6e5-1-768d-77d5-1db4-35ae.fixed6.kpn.net) (Ping timeout: 268 seconds)
[15:52:02] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[15:52:38] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[15:55:02] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:56:00] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 268 seconds)
[15:56:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[15:56:40] *** Joins: gentauro (~gentauro@user/gentauro)
[15:57:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:57:28] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[15:57:45] *** Joins: cfricke (~cfricke@user/cfricke)
[15:58:26] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[15:59:53] *** Joins: MQ-17J (~MQ-17J@8.6.144.203)
[16:03:24] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:03:56] *** Joins: gentauro (~gentauro@user/gentauro)
[16:03:58] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[16:05:27] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:06:23] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[16:06:54] *** Quits: MQ-17J (~MQ-17J@8.6.144.203) (Ping timeout: 260 seconds)
[16:07:44] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[16:08:32] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:08:49] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:08:50] <fendor_> a rather abstruse question, can I dispatch somehow on a type? E.g. when it is a list, then do this, otherwise this? Can I use Dynamic for that somehow?
[16:09:50] <lortabac> fendor_: that's what type classes are for
[16:10:25] <lortabac> unless you mean dispatching at runtime
[16:10:57] <fendor_> hm, I think typeclasses work just enough in this case
[16:10:57] <Hecate> (which is also what typeclasses are for :P)
[16:11:21] <Hecate> fendor_: Display does this https://hackage.haskell.org/package/text-display-0.0.1.0/docs/Data-Text-Display.html#v:displayList
[16:11:39] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:11:52] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[16:12:56] <maerwald> generics, but that's just typeclasses as well
[16:13:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[16:14:06] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:14:28] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[16:15:30] <merijn> fendor_: You can dispatch on TypeRep, sure
[16:15:45] *** Quits: jonathanclarke (~jonathanc@202.51.76.91) (Ping timeout: 268 seconds)
[16:16:22] <fendor_> I think I didn't see the forest because of all the trees, typeclasses sound find in this situation
[16:18:58] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:20:10] <boxscape_> but typerep is also just a (magical) class
[16:20:22] <boxscape_> err
[16:20:24] <boxscape_> Typeable
[16:24:12] <fendor_> and magic is heresy
[16:25:16] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[16:25:23] <merijn> I mean, typeable isn't really magic
[16:26:31] <boxscape_> "magical" as in "the compiler gives it special treatment"
[16:27:20] <merijn> I don't agree with that assessment, Typeable isn't given special treatment at all
[16:27:39] <merijn> The only special bit is that Typeable (nowadays) disallows user implemenetations, only compiler derived ones
[16:27:51] <merijn> But that's not due to being magic, that's to prevent users from fucking up
[16:28:01] <boxscape_> I suppose it depends on how we define magic
[16:28:06] <merijn> Typeable the class behaves just like any other typeclass
[16:28:35] <merijn> The only special bit is "*must* be derived" and that's only fairly recently
[16:28:45] <tomjaguarpaw> Two derived Foldable instances of "representationally equivalent" types will be "representationally equivalent".  Two derived Typeable instances won't.
[16:29:00] <tomjaguarpaw> So the class is not magic, but the deriving is.
[16:29:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 276 seconds)
[16:30:22] *** Joins: _xor (~xor@72.49.199.147)
[16:31:17] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[16:31:59] <tomjaguarpaw> Having said that, Show is possibly a counterexample to my argument.
[16:33:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[16:38:13] *** Joins: yin (~z@user/zero)
[16:39:33] <zwro[m]> `let y = f x in seq y (y,x)` is the same as `let !y = f x in (y,x)` right?
[16:39:44] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:40:54] <yin> ghci
[16:41:02] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[16:41:11] <boxscape_> zwro[m]: sounds right
[16:42:25] *** Joins: kilolympus (~kilolympu@185.65.135.177)
[16:44:18] <tomsmeding> yes, that's what bang patterns do
[16:44:28] <tomsmeding> (in the case of let bindings)
[16:45:27] *** Joins: trcc (~trcc@eduroam09.au.dk)
[16:45:42] *** Quits: trcc (~trcc@eduroam09.au.dk) (Read error: Connection reset by peer)
[16:46:03] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:47:20] *** Joins: fusion86 (~fusion@2a02-a44c-e6e5-1-77df-2fce-b355-5feb.fixed6.kpn.net)
[16:49:03] *** Quits: trcc_ (~trcc@users-1190.st.net.au.dk) (Ping timeout: 268 seconds)
[16:49:27] *** Joins: werner98 (~werner@2601:2c2:400:4440:ecf2:897:10c1:3ea6)
[16:50:37] <yin> @def bindl f x = let y = f x in (y,x)
[16:50:37] <lambdabot>  .L.hs:153:1: error: [-Woverlapping-patterns, -Werror=overlapping-patterns]
[16:50:38] <lambdabot>      Pattern match is redundant
[16:50:38] <lambdabot>      In an equation for ‘bindl’: bindl f x = ...
[16:50:46] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 260 seconds)
[16:51:01] <yin> :3
[16:51:31] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Ping timeout: 268 seconds)
[16:51:31] *** Quits: xff0x (~xff0x@2001:1a81:5236:1e00:8d66:5d08:1338:5e80) (Ping timeout: 268 seconds)
[16:51:49] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[16:52:04] *** Joins: xff0x (~xff0x@2001:1a81:5236:1e00:2c63:dc9c:df4d:2374)
[16:53:39] *** Joins: cigsender (~cigsender@74.124.58.162)
[16:53:53] <yin> @undef
[16:53:53] <lambdabot> Undefined.
[16:54:24] *** Joins: trcc (~trcc@eduroam09.au.dk)
[16:54:25] <yin> @undefine
[16:54:25] <lambdabot> Undefined.
[16:54:26] *** Quits: boxscape_ (~boxscape_@vpn-44-229.hq.eso.org) (Quit: Connection closed)
[16:54:55] <yin> @def bindl f x = let y = f x in (y,x)
[16:54:56] <lambdabot>  Defined.
[16:55:12] <werner98> take 5 [1..10]
[16:55:13] *** Quits: shidima_ (~shidima@46.44.183.25) (Ping timeout: 268 seconds)
[16:55:18] <yin> @def binds f x = let !y = f x in (y,x)
[16:55:19] <lambdabot>  Defined.
[16:55:37] <werner98> >take 5 [1..10]
[16:55:51] <yin> > snd $ bindl (const umdefined) 7
[16:55:52] <lambdabot>  error:
[16:55:52] <lambdabot>      • Variable not in scope: umdefined
[16:55:52] <lambdabot>      • Perhaps you meant ‘undefined’ (imported from Prelude)
[16:56:00] <yin> > snd $ bindl (const undefined) 7
[16:56:02] <lambdabot>  7
[16:56:25] *** AlexNoo_ is now known as AlexNoo
[16:56:34] <yin> > snd $ binds (const undefined) 7
[16:56:36] <lambdabot>  *Exception: Prelude.undefined
[16:56:54] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:57:04] *** Quits: aleator (~aleator@176-93-61-167.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[16:57:27] <werner98> typedfern_ map
[16:58:04] <yin> there you go
[16:58:11] <maerwald> I feel like I'm following someone elses ghci session
[16:58:35] <yin> sorry about that
[16:58:53] <werner98> @help
[16:58:53] <lambdabot> help <command>. Ask for help for <command>. Try 'list' for all commands
[16:59:12] <maerwald> you can try command by PMing lambdabot and then share the thing that actually works here
[16:59:23] <yin> what was supposed to be 3 simple lines turned into this mess
[16:59:35] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[17:00:11] <yin> that's what i did but i forgot to @undefine and all hell broke loose
[17:01:18] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:02:44] *** Parts: thblt (~thblt@user/thblt) (ERC (IRC client for Emacs 28.0.50))
[17:03:00] *** Joins: Guest68 (~Guest68@202.164.137.68)
[17:03:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[17:03:04] *** Parts: yin (~z@user/zero) ()
[17:03:26] *** Joins: boxscape_ (~boxscape_@134.171.73.76)
[17:04:04] *** Quits: fusion86 (~fusion@2a02-a44c-e6e5-1-77df-2fce-b355-5feb.fixed6.kpn.net) (Quit: Leaving)
[17:04:07] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:07:24] *** Quits: sayola (~vekto@dslb-002-201-085-156.002.201.pools.vodafone-ip.de) (Quit: Leaving.)
[17:09:24] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[17:12:03] *** Joins: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net)
[17:15:10] *** Quits: werner98 (~werner@2601:2c2:400:4440:ecf2:897:10c1:3ea6) (Ping timeout: 256 seconds)
[17:17:24] *** Quits: yauhsien (~yauhsien@118-167-41-229.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[17:20:52] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[17:26:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:26:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:26:14] *** Joins: wroathe (~wroathe@user/wroathe)
[17:26:32] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:29:45] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[17:30:05] *** Joins: alzgh (~alzgh@user/alzgh)
[17:31:10] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:31:47] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[17:34:01] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[17:34:41] *** Quits: gg (~gg@2a01:e0a:819:1510:9c2f:617b:a3fa:cf0d) (Ping timeout: 268 seconds)
[17:36:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[17:37:08] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[17:39:14] *** Quits: michalz (~michalz@185.246.204.109) (Ping timeout: 260 seconds)
[17:41:59] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8) (Remote host closed the connection)
[17:42:18] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:cd36:4dbb:1af8:be8)
[17:42:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[17:44:32] *** Joins: gg (~gg@88.160.100.84)
[17:45:38] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[17:48:01] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[17:50:34] *** Quits: fendor_ (~fendor@178.115.63.67.wireless.dyn.drei.com) (Remote host closed the connection)
[17:53:23] *** Joins: trcc (~trcc@eduroam09.au.dk)
[17:54:37] *** Joins: michalz (~michalz@185.246.204.58)
[17:55:31] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[17:56:11] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[17:56:32] *** Joins: alzgh (~alzgh@user/alzgh)
[17:56:35] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[17:57:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[17:58:13] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:59:52] *** Joins: Achylles (~Achylles_@2804:431:d725:bb1e:5dd8:3b02:6cc3:2744)
[18:01:47] *** Quits: nrl^ (~nrl@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[18:03:40] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Read error: Connection reset by peer)
[18:07:52] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[18:09:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[18:12:50] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:14:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:14:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:14:11] *** Joins: wroathe (~wroathe@user/wroathe)
[18:19:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:21:39] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[18:21:43] *** Joins: werner58 (~werner@2601:2c2:400:4440:dc41:dccb:7773:558f)
[18:21:53] *** Quits: werner58 (~werner@2601:2c2:400:4440:dc41:dccb:7773:558f) (Client Quit)
[18:22:44] *** Joins: werner100 (~werner100@2601:2c2:400:4440:dc41:dccb:7773:558f)
[18:23:22] *** Quits: Achylles (~Achylles_@2804:431:d725:bb1e:5dd8:3b02:6cc3:2744) (Remote host closed the connection)
[18:25:05] *** Joins: trcc (~trcc@eduroam09.au.dk)
[18:25:07] *** Quits: trcc (~trcc@eduroam09.au.dk) (Remote host closed the connection)
[18:25:08] *** Quits: Guest68 (~Guest68@202.164.137.68) (Quit: Client closed)
[18:25:39] *** Joins: trcc (~trcc@users-1190.st.net.au.dk)
[18:26:24] *** Joins: k` (~user@152.1.137.158)
[18:27:38] *** Joins: dsamperi (~dsamperi@2603-7000-3b42-5400-0c2e-16c3-2bfb-81aa.res6.spectrum.com)
[18:28:14] <k`> What are your thoughts on indexing functions that index from the left given a nonnegative argument and the right given a negative one, vs functions that only index in one direction and throw an error when given a negative argument?
[18:29:31] <geekosaur> they only make sense for structures that support such indexing. for lists, for example, you can't really index from the right
[18:30:05] <geekosaur> and then there's Data.Array where negative indexes are directly supported via Data.Ix, so you can't repurpose them to index from the right
[18:30:16] *** Joins: caef^ (~caef@wsip-98-188-242-6.mc.at.cox.net)
[18:30:39] <boxscape_> Data.Vector could if it wanted to, I imagine
[18:30:59] <k`> geekosaur: In principle I agree, but I have seen real Haskell packages that intentionally access lists the 'wrong' way because they want to avoid depending on more complicated packages and they only use small lists.
[18:31:37] *** Joins: max22- (~maxime@2a01cb088335980044786ab87c2c3d64.ipv6.abo.wanadoo.fr)
[18:32:03] <boxscape_> I think if you have O(1) access and use Int as index, it's probably a decent idea
[18:32:15] <k`> And I'm talking about strictly using zero-based Int indices, which won't necessarily match the 'official' indices of a structure (for example a Map from `String` to function).
[18:33:04] <k`> OK. To me it seems slightly more error-prone, but on the other hand the smaller API surface seems like a win.
[18:33:24] <boxscape_> what kind of error is it prone to?
[18:33:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[18:34:04] <geekosaur> smaller but more complicated, seems to me, unless you go all the way and use modulus arithmetic for indexing
[18:34:27] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:34:34] <geekosaur> hm, no, I guess that doesn't quite fit either
[18:34:40] <k`> If you unintentionally give a function that requires a positive index a negative one, it can throw an error. But if negative indexes have a special meaning, you instead get a seemingly valid value.
[18:35:11] <geekosaur> no, it does. I'm confusing myself
[18:35:49] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[18:35:50] * geekosaur should just go off and do laundry, that can be done while insufficiently caffeinated :)
[18:36:45] *** Joins: pop3 (~pop3@user/pop3)
[18:37:23] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[18:37:36] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[18:38:10] <k`> I'm phrasing this all hypothetically, but you could in fact define it all in terms of `Foldable`.
[18:39:22] <k`> > let foldrState' s0 f z0 mx = foldr f' (\_-> z0) mx s0 where f' x k s = let (s', z') = f s x (s' `seq` k s') in z'
[18:39:24] <lambdabot>  <no location info>: error:
[18:39:24] <lambdabot>      not an expression: ‘let foldrState' s0 f z0 mx = foldr f' (\_-> z0) mx s...
[18:39:30] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:40:35] <k`> > foldrState' s0 f z0 mx = foldr f' (const z0) mx s0 where f' x k s = let (s', z') = f s x (s' `seq` k s') in z'
[18:40:37] <lambdabot>  <hint>:1:24: error: parse error on input ‘=’
[18:40:52] <k`> Eh, I don't know how to use Lambdabot.
[18:41:22] <geekosaur> use @let for definitions
[18:41:31] <geekosaur> "> " only accepts expressions
[18:41:43] <k`> Oh, thanks.
[18:42:49] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[18:43:40] <k`> @let foldrState' s0 f z0 mx = foldr f' (const z0) mx s0 where f' x k s = let (s', z') = f s x (s' `seq` k s') in z' 
[18:43:42] <lambdabot>  Defined.
[18:45:10] <k`> @let foldlState' s0 f z0 mx = foldl f' (const z0) mx s0 where f' k x s = let (s', z') = f s (s' `seq` k s') x in z'
[18:45:11] <lambdabot>  Defined.
[18:46:15] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[18:48:26] <k`> @let nthR i = foldrState' 0 (\ i' x mx -> (i' + 1, if i' == i then Just x else mx))
[18:48:27] <lambdabot>  Defined.
[18:48:44] <k`> > nthR 5 [1..]
[18:48:46] <lambdabot>  error:
[18:48:46] <lambdabot>      • Couldn't match expected type ‘Maybe a2’ with actual type ‘[a0]’
[18:48:46] <lambdabot>      • In the second argument of ‘nthR’, namely ‘[1 .. ]’
[18:48:56] *** Joins: trcc_ (~trcc@eduroam09.au.dk)
[18:49:26] <k`> Forgot my accumulator.
[18:50:11] <k`> @let nthR i = foldrState' 0 (\ i' x mx -> (i' + 1, if i' == i then Just x else mx)) Nothing
[18:50:12] <lambdabot>  .L.hs:162:5: error:
[18:50:12] <lambdabot>      • Couldn't match type ‘Maybe a1’ with ‘t a1 -> Maybe a1’
[18:50:12] <lambdabot>        Expected type: Maybe a1 -> t a1 -> Maybe a1
[18:50:34] <k`> Sorry, sorry.
[18:50:56] <geekosaur> you might do this in pm with lambdabot and show the result once it's working
[18:51:07] <k`> Oh man, totally forgot I could pm.
[18:51:22] <geekosaur> also you'll run into that these definitons actually go into a file so it'll give you conflicting types in the end, I suspect
[18:51:35] <geekosaur> so you'll have to @undefine first and start over :(
[18:51:39] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[18:51:46] *** Joins: burnside_ (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[18:52:02] *** Quits: trcc (~trcc@users-1190.st.net.au.dk) (Ping timeout: 260 seconds)
[18:52:14] <geekosaur> yahb is an actual ghci so you might find it easier to experiment in. uses % as prefix, also accepts pm
[18:52:37] <k`> geekosaur: Thanks!
[18:53:25] <k`> /msg yahb let foldrState' s0 f z0 mx = foldr f' (\_-> z0) mx s0 where f' x k s = let (s', z') = f s x (s' `seq` k s') in z'
[18:53:25] <k`>  
[18:53:37] *** Quits: trcc_ (~trcc@eduroam09.au.dk) (Ping timeout: 268 seconds)
[18:53:52] <boxscape_> k` remember to prepend the %
[18:54:09] <k`> boxscape_: :)
[18:57:24] *** Quits: werner100 (~werner100@2601:2c2:400:4440:dc41:dccb:7773:558f) (Quit: Ping timeout (120 seconds))
[18:57:38] *** Quits: acidjnk_new (~acidjnk@p200300d0c726702918431f3aede9e057.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[18:58:25] *** Quits: haskl (~haskl@user/haskl) (Read error: Connection reset by peer)
[19:01:49] *** Joins: slack1256 (~slack1256@191.126.227.206)
[19:03:20] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:06:23] *** Quits: burnside_ (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Remote host closed the connection)
[19:06:57] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[19:07:22] *** Quits: canxiu (uid524910@id-524910.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:10:31] <k`> > nth 3 [1..]
[19:10:33] <lambdabot>  Just 4
[19:10:44] <k`> > nth (-1) [1..7]
[19:10:45] <lambdabot>  Just 7
[19:11:14] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[19:11:45] <geekosaur> come to think of it, that's another reason against negative indexing: negative literals :(
[19:11:46] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:12:02] <k`> @type nth
[19:12:03] <lambdabot> (Ord t1, Num t1, Foldable t2) => t1 -> t2 a -> Maybe a
[19:12:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:12:07] <geekosaur> we now have something like 4 different extensions to try to fix negative literals, all of which suck in one way or another
[19:13:38] <k`> Here's my pet wish for some day: `- 1` is `subtract 1` ; `-1` is `negate 1` ; in general infix operators must be surrounded by whitespace (or parentheses).
[19:13:58] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[19:14:04] <geekosaur> I think that's one of the extensions
[19:14:16] <k`> Oh, cool. How obscure is it?
[19:14:17] <geekosaur> but it means some othyer idioms don't work because now they need spaces
[19:14:30] *** Quits: cigsender (~cigsender@74.124.58.162) (Ping timeout: 260 seconds)
[19:15:02] *** Joins: pop3 (~pop3@user/pop3)
[19:15:03] <k`> What idioms have ever required infix operators be unspaced?
[19:15:41] <geekosaur> sections
[19:15:43] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/lexical_negation.html
[19:15:50] <geekosaur> doesn't require it but is convenient
[19:15:57] <merijn> Allowing infix operators without spaces was a mistake
[19:16:00] <geekosaur> now you can't say (+1) it has to be (+ 1)
[19:16:11] <merijn> geekosaur: Acceptable sacrifice
[19:16:26] <k`> geekosaur: For me that's 100% always an improvement.
[19:16:27] <merijn> Fuck the entire mess we're in now
[19:16:32] <monochrom> I like writing like "m=n-1"
[19:16:32] <geekosaur> but it breaks a shitload of code
[19:16:44] <merijn> geekosaur: Sure, we can't fix it now
[19:16:46] <k`> Honestly, for me `+1` looks like positive 1.
[19:17:09] <monochrom> I mean I like having that option. I don't do it all the time, but once in a while I would like to do it when it doesn't hurt.
[19:17:15] <merijn> geekosaur: But Haskell would be a better and less edge-casy language if we'd banned it from the start
[19:17:16] <k`> Yeah, that's why I said 'pet wish for some day' rather than 'shrill immediate demand'.
[19:17:55] <k`> I would shrilly and immediately demand spaces if that were a nonbreaking change...
[19:18:01] <merijn> monochrom: Sure, but do you like it more than you would like getting rid off: negate, ambiguity of -, and the ability to use . for record syntax without 15 billion ambiguous interpretation
[19:18:14] <geekosaur> hm, actually if I'm reading the manual right they removed some of the earlier attempts at negative literals when they added this one. good
[19:18:17] <merijn> monochrom: eh, I guess I meant subtract, not negate
[19:18:18] <monochrom> But seriously the real mess is the obsession with plain text files.
[19:18:26] <merijn> monochrom: Also true, but harder to fix
[19:18:27] <geekosaur> we were kinda piling up bad attempts there
[19:18:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:19:31] <monochrom> Allow me to ramble a bit more. The following is not your fault. Just my pet peeve.
[19:19:48] <monochrom> Programmer obsession with plain text files runs really deep.
[19:19:54] <merijn> monochrom: Requiring spaces around infix operators means that '-x', '(-x)', and '(- x)' each have a single unambiguous meaning and parse. It also removes the ambiguity whether "Foo.x" is a qualified name of composition of a constructor and a function
[19:20:20] *** Joins: haskl (~haskl@user/haskl)
[19:20:27] <monochrom> Once I went to a conference and there was an exhibition section for researchers to show posters and demos, as usual.
[19:20:37] <merijn> monochrom: It's also means that "record.x" can be given its own unambiguous interpretation as record indexing (since qualified names have a capital as first character)
[19:20:59] <merijn> (and composition would be forced to be "record . x")
[19:21:06] <merijn> Imagine the utopia we could've had!
[19:21:20] <monochrom> One booth talked about modeling a certain thing by graphs (the graph theory kind).
[19:21:22] <k`> Hear hear
[19:21:34] <yushyin> that's how i write it anyway
[19:21:35] <merijn> Instead we're stucking with subtract, 15 billion record syntax extensions, NegativeLiterals and 10 types of ambiguous parses
[19:21:43] <geekosaur> oh wow, someone got that right
[19:22:02] *** Quits: Lycurgus (~juan@98.4.112.204) (Ping timeout: 256 seconds)
[19:22:21] <monochrom> The researcher went on to show displaying or inputting (I forgot which) a graph by a textual language he invented.
[19:22:41] <merijn> monochrom: Because UI code is hard :p
[19:23:07] <monochrom> Yeah there was a parser freak right there.
[19:23:33] <monochrom> Inventing the nth syntax for adjacency lists.
[19:24:14] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[19:24:26] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[19:25:19] * geekosaur wonders if this researcher otherwise only knew matlab
[19:26:25] <monochrom> This was a software engineering conference. I think even though he would know matlab from common CS education he would not think much of it.
[19:27:12] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[19:27:57] * k` got through college using only Matlab (except in computer architecture)
[19:28:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[19:28:38] <boxscape_> I was about to say that it wouldn't be unambiguous since in `data Rec = A { a :: Bool } | B`, writing `B.a` should be an attempt at field selection rather than a qualified name, but no, that's already interpreted as a qualified name now
[19:28:39] *** Parts: kadir (~kadir@95.7.9.203) (WeeChat 3.3)
[19:29:02] <boxscape_> (you can do `let b = B in b.a` though)
[19:29:58] <boxscape_> does that mean b is not referentially transparent
[19:30:20] <monochrom> (B).a
[19:30:29] <boxscape_> ah, you're right, okay
[19:30:47] <monochrom> For the same reason "let x=2+2 in 3*x" does not equal 3*2+2
[19:30:48] <k`> Am I the only one who basically gave up on using record syntax, period, except with lenses?
[19:30:54] <boxscape_> hm, fair
[19:31:07] <monochrom> Once again the mess is obsession with plain text files.
[19:31:11] <boxscape_> yeah
[19:31:45] <boxscape_> k` I think I'll be using -XOverloadedRecordDot if and only if I don't have lens as a dependency for something else
[19:31:55] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[19:32:02] <monochrom> I still use record syntax, and without lenses. In fact, I go as far as to use RecordWildCards once in a while.
[19:32:14] <dsamperi> What does :p at end of line mean?
[19:32:29] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[19:32:32] <monochrom> It's an emoticon.
[19:32:47] <monochrom> Like :) but with an extra tongue.
[19:32:55] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[19:32:56] *** Quits: boxscape_ (~boxscape_@134.171.73.76) (Quit: see you)
[19:33:20] <yushyin> k`: the combination of NoFieldSelectors, NamedFieldPuns and RecordWildCards can be quite useful for simple stuff
[19:33:24] <k`> It's consing the preceeding expression to `p` .
[19:33:28] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:34:30] <dsamperi> :;
[19:35:42] <k`> yushyin: Guess I'm just extension-shy and record-shy...
[19:37:01] <k`> yushyin: Haven't looked at the uses of `NoFieldSelectors` . That's pretty neat. Thanks.
[19:38:15] <yushyin> afair with GHC2021 you would only need to -XNoFieldSelectors
[19:41:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:43:18] *** Joins: fendor (~fendor@178.115.33.172.wireless.dyn.drei.com)
[19:47:54] *** Joins: shidima_ (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl)
[19:47:57] *** shidima_ is now known as shidima
[19:48:28] *** Joins: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[19:48:33] *** Joins: nschoe (~quassel@178.251.84.79)
[19:55:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:58:01] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:58:12] <dsal> Does ghc do anything fancy to turn $ into . or similar?  I'm looking at code with a lot of $ and it seems expensive.
[20:00:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:01:03] <geekosaur> I don't think so. but $ is cheap since it's just function application with a weird precedence
[20:01:40] <Profpatsch> dsal: You can safely assume GHC is smart enough to optimize those away
[20:01:49] <c_wraith> unless you're using it partially applied, ($) doesn't even exist in compiled code
[20:01:52] *** Joins: favonia (~favonia@user/favonia)
[20:02:08] <dsal> Yeah, I assume it's not something worth worrying about.
[20:02:31] <dsal> Just seeing $ everywhere looks less elegant.  Like new money.  Programmers trying to bling out their code.
[20:02:48] <Profpatsch> dsal: you can also use &
[20:02:57] <Profpatsch> for better community effect of your code
[20:03:25] *** Joins: fizzsegfaultbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[20:03:30] <Profpatsch> you want your code to say “-yes, and” to your manager after all
[20:06:42] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[20:06:59] *** Joins: thelounge2191 (7aa71341@67.205.143.82)
[20:07:18] <dsal> haha
[20:07:37] *** Quits: poljar (~poljar@78-3-31-140.adsl.net.t-com.hr) (Quit: WeeChat 3.2)
[20:07:39] <kuribas> In dependend haskell, will you be able to use a value level function on types?
[20:07:55] <geekosaur> nobody knows yet
[20:08:07] <geekosaur> dependent haskell is a *long* way off
[20:08:23] <dsal> Dependent haskell solves all of everyone's problems.
[20:08:52] <geekosaur> and mostly unspecced as yet
[20:09:12] <Profpatsch> will it still be Haskell tho
[20:09:42] <kuribas> Profpatsch: I suppose it will be backwards compatible.
[20:09:56] <kuribas> Profpatsch: so, yes.
[20:10:02] *** Joins: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca)
[20:10:06] <kuribas> as far as you consider any extension "Haskell"
[20:10:25] <kuribas> You might say that GADTs, Datakinds, type families, etc... aren't "Haskell".
[20:11:12] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:11:20] <kuribas> ah " To put it another way, any term whatsoever will be acceptable as an argument to f :: foreach a -> blah; and any term whatsoever would be acceptable in a type or kind signature. (NB: Richard and Stephanie definitely want this. Simon is not yet convinced that the pain will be worth the gain.)"
[20:12:25] *** Joins: boxscape_ (~boxscape_@i577BCB60.versanet.de)
[20:12:39] * geekosaur is glad someone is thinking about the pain part, at least
[20:13:15] <kuribas> geekosaur: who's pain, the compiler writer, or developers?
[20:13:26] <geekosaur> "yes"
[20:13:36] *** Quits: boxscape_ (~boxscape_@i577BCB60.versanet.de) (Client Quit)
[20:13:47] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 268 seconds)
[20:13:52] *** Joins: boxscape_ (~boxscape_@i577BCB60.versanet.de)
[20:15:24] <c_wraith> I don't really care about full dependent types.  I just want to be able to promote and demote values without using reflection or singletons
[20:15:28] <kuribas> but will it be worse than "singletons"?
[20:15:52] <Profpatsch> If I have a ConduitT a b m r and want to transform it into a ConduitT (c, a) (c, b) m r how would I do that?
[20:16:13] <Profpatsch> I’m not strong enough
[20:16:59] <c_wraith> that seems like...  it's ambiguous
[20:17:21] <boxscape_> kuribas it would be somewhat surprising if fully dependent types were worse than singletons considering the idea is to make everything better that singletons has to bend over backwards to achieve
[20:17:49] <Profpatsch> c_wraith: yeah, if more than one stream element is produced, it should just copy the c
[20:17:52] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:17:59] <Profpatsch> As in then multiple elements get the same c
[20:18:05] <c_wraith> Profpatsch:  what if it never got a c at all?
[20:18:20] <Profpatsch> c_wraith: Hm
[20:18:22] <Profpatsch> Good point
[20:18:33] <Profpatsch> I have a ConduitT () c m r
[20:18:45] <Profpatsch> And I Zipped it with a ConduitT () a mr
[20:19:02] <Profpatsch> Hm maybe what I want to do is zip later
[20:19:13] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:19:39] *** Quits: thelounge2191 (7aa71341@67.205.143.82) (Quit: The Lounge - https://thelounge.chat)
[20:19:43] <kuribas> dsal: maybe we should just migrate to idris?
[20:19:44] *** Quits: boxscape_ (~boxscape_@i577BCB60.versanet.de) (Quit: Connection closed)
[20:19:58] <kuribas> it's haskell-like with dependent types.
[20:20:04] <kuribas> Which is what we want right?
[20:21:20] <dolio> If that's what you want, it's not a bad idea.
[20:24:33] <Profpatsch> c_wraith: lol I just had to move brackets around my pipeline a bit
[20:24:35] *** Quits: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com) (Remote host closed the connection)
[20:24:57] <dsal> kuribas: does it have linear types?
[20:25:04] <dolio> I think it'd be cool if the people who wanted to do all kinds of type level stuff went and used idris instead, because it would mean idris has more people working with it, and the type level stuff would be better.
[20:25:28] <c_wraith> Profpatsch: hah. way better than forcing some ambiguous type conversion!
[20:25:32] <dolio> Idris 2 has linear types.
[20:25:43] <kuribas> dolio: I agree wholehartedly :)
[20:26:03] <kuribas> idris looks pretty nice, but has barely any libraries.
[20:26:04] <Profpatsch> c_wraith: I’m trying to get an intuition for streams, so I guess it wasn’t super obvious to me :)
[20:26:14] <Profpatsch> But the types don’t lie!
[20:26:18] <Profpatsch> (except when they do)
[20:26:33] <dsal> Can you write software in idris?  I should try it out someday.
[20:26:40] <kuribas> Profpatsch: they don't lie.  They may not mean what you think though...
[20:26:48] <kuribas> dsal: sure you can.
[20:26:51] <Profpatsch> kuribas: oh I just had that today
[20:26:52] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[20:27:04] *** Joins: Skyfire (~pyon@user/pyon)
[20:27:06] <Profpatsch> The type matched up perfectly, but the function didn’t do what I thought it would
[20:27:23] <kuribas> dsal: you'll need write pretty any library yourself, or write bindings to scheme/C/java
[20:27:24] <Profpatsch> Which in this case I’d say is a fault of the types not having enough information
[20:27:38] *** Joins: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a)
[20:28:45] *** Quits: ubert (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[20:28:54] <kuribas> Profpatsch: putting more stuff on type level means your program becomes safer, but also harder to write.
[20:29:28] <kuribas> dsal: I'd even say idris is made for writing software, not for proving stuff.
[20:29:52] <dsal> Oh cool.  I've never touched it.  I've only played around in agda which didn't seem like it'd be useful for writing software.
[20:30:12] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:30:16] <dolio> You can write software in Agda, but Idris is going to be way better on that front.
[20:32:35] *** Joins: emf (~emf@2620:10d:c090:400::5:ba1c)
[20:32:45] <kuribas> stuff like anonymous records or providing a specification in types is way easier in idris.
[20:33:06] <Cale> As much as I love dependent types and being able to prove theorems in the type system, I do worry about the sorts of corners people will paint themselves into with them. I've seen cases where people managed to create bureaucratic nightmares that guarantee very little using the dependent-type-ish features already in Haskell.
[20:33:36] *** Joins: hightower2 (~hightower@213.147.110.20)
[20:34:56] <dolio> Well, part of the problem is that because it has 'verly little,' things that are pretty trivial in real dependently typed languages become very tedious in GHC.
[20:35:32] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d501:c9ea:33ea:39c7) (Quit: WeeChat 2.8)
[20:35:39] <kuribas> unlifting a DataKind into a value.
[20:35:40] <Cale> That's not only it though -- in some ways, things get worse in proper dependently typed languages, because you're often breaking the functional abstraction
[20:36:39] <kuribas> Cale: do you have an example?
[20:36:43] <Cale> Like, it matters the precise ways that functions are defined, not just what their results are, because it affects what you're able to evaluate at the type level.
[20:37:40] <Cale> A very simple example is like how when you define addition on naturals, it matters which argument you're pattern matching on, and 0 + n might evaluate to n on its own, but n + 0 = n will require a proof
[20:38:21] <Cale> In a more complicated setting, having lots of types around that involve the functions in your program can make it really hard to refactor or change the implementations of those functions.
[20:39:10] <Cale> You can end up in situations where in order to get everything to type check, everything has to be *just so*.
[20:39:21] <kuribas> Cale: but couldn't you separate functions used on type level, and those on value level?
[20:39:27] <dsal> I can see how it's easy to go from "I just need a little proof here" to "I should do this everywhere!" to "WHAT HAVE I DONE?"
[20:39:46] <Cale> dsal: Yeah, it's very hard to know exactly when you've crossed the invisible line
[20:40:36] <Cale> You might be saving yourself a bunch of effort debugging runtime failures, but then if you spend more time than that trying to get your program to compile, or unable to refactor something that needs a performance improvement...
[20:40:56] *** Parts: Jing (~textual@125.105.142.242) (Textual IRC Client: www.textualapp.com)
[20:41:15] <Cale> I do think there are plenty of cases where the line is farther over than what Haskell presently allows
[20:41:43] <Cale> But there's also lots of dumb things you can try to guarantee at compile time and end up wasting lots of effort preventing bugs that were never going to happen.
[20:41:48] <maerwald> "but... I need this feature for my PhD thesis"
[20:41:52] <maerwald> :D
[20:42:09] <kuribas> runtime errors are fine, if they don't happen obscurely.
[20:42:13] <dsal> The same tools that prevent bugs can prevent necessary features.
[20:43:03] <kuribas> It's about knowing where it's useful to track something in the type system.
[20:43:17] *** Joins: zebrag (~chris@user/zebrag)
[20:43:36] <kuribas> I found tracking the type of SQL columns and return types in types is incredibly useful.
[20:43:46] <kuribas> And doesn't make it much harder to write.
[20:44:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[20:44:12] *** Quits: Vajb (~Vajb@2001:999:66:281c:27a0:1549:39e5:8b1a) (Read error: Connection reset by peer)
[20:44:39] <kuribas> But trying to proof that the SQL is correct in general is very hard.
[20:45:02] <kuribas> And likely requires you to only use a subset of SQL.
[20:45:08] <dolio> Well, the rules for correct SQL are extremely arbitrary.
[20:45:11] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:45:55] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 256 seconds)
[20:46:33] <geekosaur> one way to view dependent types is that compile time becomes the new run time
[20:47:07] <dsal> That's how I use TH sometimes.
[20:47:54] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:48:06] <kuribas> dolio: well, a lot of libraries make their own system on top of SQL, but that's an extra complexity the programmer has to learn, and also limits the usecases, possibilities for optimization, etc...
[20:48:19] <kuribas> dolio: while everyone knows SQL.
[20:48:52] <dolio> I guess. I mean, I wrote something like that. The problem with SQL is that it's very hard to generate from a library, because of the arbitrary rules.
[20:49:14] <kuribas> dolio: yeah, I am just generating strings.
[20:49:32] <kuribas> dolio: I mean, it's not much more than a fancy string builder.
[20:49:34] <dolio> Like, certain trivial cases that an optimizer could probably find and omit are instead syntax errors, because syntax is the only thing the standards committee has control over.
[20:50:10] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[20:50:22] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: Leaving)
[20:52:58] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[20:54:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:54:46] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Read error: Connection reset by peer)
[20:54:50] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 260 seconds)
[20:55:02] *** Joins: azeem (~azeem@emp-89-199.eduroam.uu.se)
[20:55:18] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[20:55:29] <dsal> I had this issue when people were wanting to use persistent and then esqueleto and then like, I'll try to to learn that language, but I can already see things I know how to do in SQL that are either open bugs or just not on the radar.
[20:55:39] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Client Quit)
[20:56:00] <dsal> That one didn't go very far because there are too many things I can do easily in sql that I couldn't figure out how to do at all in fancy libs.
[20:56:09] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Quit: "Rebooting new kernel")
[20:56:54] <kuribas> dsal: yeah, in my library, some things are easy to add, and other's require backwards incompatible change.
[20:57:03] <dolio> Yeah, getting all the things you can do in SQL wrapped into a library is also a challenge.
[20:57:13] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[20:57:34] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:57:35] <kuribas> dsal: or I could make a new combinator, but then the library will be littered with combinators.
[20:57:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:58:08] <kuribas> for example, recently I found out MySQL supports tuples in a `in` statement.
[20:58:52] *** Quits: max22- (~maxime@2a01cb088335980044786ab87c2c3d64.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[20:59:30] *** Quits: azeem (~azeem@emp-89-199.eduroam.uu.se) (Ping timeout: 256 seconds)
[20:59:42] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[21:00:10] <kuribas> WHERE (firstname, lastname) IN (`Bart`, `Simpson`), (`Barney`, `Gumbles`)
[21:00:38] <dsal> The impedance is unfortunate, but `postgresql-simple` isn't too bad.  I'm using stuff like enums (bugs for support in persistent) and PostGIS and just trying to figure out how to make a normal 4-byte key and `insert into ... returning` kinds of things.  I can't remember all the things that I had trouble with on day 1.
[21:01:45] *** Quits: wei2912 (~wei2912@138.75.71.147) (Quit: Lost terminal)
[21:01:53] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[21:02:29] *** Joins: azeem (~azeem@2a00:801:238:f0f3:c4db:a6a8:71e6:c28)
[21:02:33] <kuribas> dsal: it also doesn't allow you to compose queries, matching parameters with the data can be error prone, etc...
[21:03:25] <dsal> Yeah.  That gap is unfortunate.  Best I can do is provide transactionally composable functions that take known types that we have `FromRow` and `ToRow` tested for.
[21:04:12] <dsal> This is similar to the "where do you draw the line" thing above.  It's a bit loose, but easy to understand and flexible.  Proper use makes it a bit harder to get wrong.
[21:04:21] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 268 seconds)
[21:04:37] *** Joins: shailangsa (~shailangs@host86-185-98-19.range86-185.btcentralplus.com)
[21:04:41] *** Quits: mmhat (~mmh@55d4a8dc.access.ecotel.net) (Quit: WeeChat 3.3)
[21:05:25] *** Joins: yinghua (~yinghua@2800:2121:1400:900:c56e:96f4:75cd:50ac)
[21:08:21] <kuribas> I have to luxury to be able to change the library when I need to add some syntax.
[21:11:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:11:32] *** Joins: favonia (~favonia@user/favonia)
[21:12:20] <kuribas> But I should take sometime to implement the whole MySQL BNF syntax, document the library, and announce it.
[21:14:55] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[21:17:16] *** Quits: mbuf (~Shakthi@122.174.233.21) (Quit: Leaving)
[21:17:48] <dsal> I'd be pretty happy if MySQL just went missing one day and nobody had to think about it again.  :)
[21:20:35] <dolio> Incidentally, there are techniques for getting `n + 0` to work just as well as `0 + n` and such. They're just not commonly implemented. Agda has preliminary work toward that, though.
[21:20:43] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[21:21:03] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[21:21:40] <dolio> Right now you just have to tell it which additional equations it should use, I think. But it's possible for some amount of that to happen automatically by giving redundant cases in definitions and stuff.
[21:21:44] <Cale> There's the really easy one which is just to handicap n + 0 ;)
[21:23:23] *** Joins: hightower2 (~hightower@213.147.110.20)
[21:23:56] <Cale> I think I might've heard that's what Zombie was about?
[21:24:45] <Cale> Get rid of the automatic use of beta-equivalence, but perhaps make it easier to use the equalities you've proven
[21:24:58] <dolio> I don't know. Zombie is more about being able to have a general recursive fragment of the language that doesn't cause problems when you're proving stuff, I think.
[21:25:10] <dminuoso> Cale: Regarding your dependent types earlier. To quote someone from -ot from yesterday:
[21:25:30] <dminuoso> "when I write idris, I just write my bugs at the type level instead"
[21:25:48] *** Joins: Bleant (~Bleant@2804:7f7:d68c:6ec3:ba71:4b18:997c:9fc1)
[21:26:48] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:26:48] <Bleant> Good afternoon! (if it's afternoon where you live :D). I'm new to this channel, would it be appropriate to ask questions regarding a particular problem I am having?
[21:26:51] <kuribas> dminuoso: where I think idris (and dependent types) are useful, is not to proof the program correct, but to specify a specification at type level, and to prove the implementation compliant.
[21:27:04] <geekosaur> Bleant, sure!
[21:27:07] <Cale> Bleant: yeah, as long as it's Haskell-related :)
[21:27:18] *** Quits: slaydr (~slaydr@45.131.194.34) (Quit: leaving)
[21:29:33] *** Quits: nschoe (~quassel@178.251.84.79) (Ping timeout: 256 seconds)
[21:30:05] <Bleant> Thanks! I've implemented (though I've yet to confirm the correctness of the merge step) mergesort in Haskell using the ST Monad with unboxed arrays. I want to deepseq the resulting UArrays for benchmarking purposes, as merely printing would slow down the program, but I get an error stating that no instance for NFData has been declared for UArray. Since its constructors are hidden, I'm not sure what I could do. What could I do?
[21:30:07] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 256 seconds)
[21:30:10] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:30:36] <Cale> You can just seq in that case
[21:30:54] <Cale> UArrays don't have the facility for lazy evaluation, that's the unboxed part
[21:31:04] <Cale> So if any part of a UArray is evaluated, the whole thing is
[21:33:17] *** Quits: yinghua (~yinghua@2800:2121:1400:900:c56e:96f4:75cd:50ac) (Read error: Connection reset by peer)
[21:33:35] *** Joins: yinghua (~yinghua@2800:2121:1400:900:9d55:2c9d:5a16:a12)
[21:34:09] *** Joins: vicfred (~vicfred@user/vicfred)
[21:35:35] <Bleant> Thank you! I will try and report back :)
[21:35:46] *** Quits: slack1256 (~slack1256@191.126.227.206) (Ping timeout: 256 seconds)
[21:36:03] *** Joins: slack1256 (~slack1256@191.125.227.82)
[21:36:39] <monochrom> Even the normal Array doesn't need deepseqing for sorting.
[21:37:18] <Cale> True, since you have to look at all the elements anyway, there's no worry that they might be unevaluated
[21:37:31] *** Joins: aleator (~aleator@188-67-216-232.bb.dnainternet.fi)
[21:38:00] <monochrom> If you say "I set the 3rd element to fib 5000", that would need deepseqing, yes.
[21:38:16] <monochrom> But in sorting, you're just saying, "I set the 3rd element to a!7".
[21:38:24] <maerwald> who's good with windows here? What type of path is `\??\C:\foo`? Doesn't appear to be an extended-length path, yet the directory package treats it specially: https://git.io/JPbcY
[21:38:45] *** Joins: hightower2 (~hightower@213.147.110.20)
[21:39:36] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[21:40:24] <geekosaur> iirc it's just a way to hide the drive letter inside the path instead of in front of it. but double check that
[21:41:21] <maerwald> cmd.exe doesn't even accept this path
[21:41:23] <monochrom> simplifyWindows is a great name :)
[21:41:44] <maerwald> normalise "\\??????????????\\D:\lol" -> "D:\lol", which is even more confusing
[21:41:51] <maerwald> since that is definitely rejected on windows
[21:42:29] <Cale> Maybe you can git blame and figure out where this feature got added?
[21:42:55] <Bleant> If, in repeatedly calling the mergesort function, I get a list of thunks, will calling foldr (\x y -> x 'seq` y) () listOfThunks force the call to each individual sort, essentially evaluating every UArray? It's what I'm trying, but it's executing so fast for a million elements that I suspect I'm doing something wrong
[21:43:41] <geekosaur> (\x y -> x `seq` y) is the same as plain seq
[21:43:48] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[21:44:11] <monochrom> > foldr seq () [undefined, 3]
[21:44:12] <lambdabot>  *Exception: Prelude.undefined
[21:44:21] <monochrom> > foldr seq () [3, undefined]
[21:44:22] <lambdabot>  *Exception: Prelude.undefined
[21:44:28] <monochrom> > foldr seq () [3, 3]
[21:44:29] <lambdabot>  ()
[21:44:45] <monochrom> It seqs all elements. "Proved by a few test cases"
[21:45:03] <geekosaur> but as mentioned earlier the contents of the UArray are already evaluated, because they are unboxed
[21:45:20] *** Parts: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de) (WeeChat 3.3)
[21:45:32] <geekosaur> I think it is only the UArray itself that can be a thunk
[21:45:46] <Bleant> What I'm trying to prevent is getting a list of thunks, but in not using them, not having the individual functions to mergesort called
[21:46:24] <Bleant> Something's weird, though. I'm running a million element ten thousand times, and it's going faster than my C implementation. I'll quadruple check
[21:46:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:46:40] <monochrom> Now, this is what you should watch out for:
[21:46:53] <monochrom> > const 42 (foldr seq () [undefined, 3])
[21:46:54] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[21:46:54] <lambdabot>  42
[21:48:08] *** Quits: aleator (~aleator@188-67-216-232.bb.dnainternet.fi) (Ping timeout: 268 seconds)
[21:48:36] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:48:49] <Bleant> I'm not familiar with const, unfortunately. I'll check it. What I'm doing currently is return $! foldr seq () [...]
[21:48:57] <Cale> const x y = x
[21:49:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[21:49:07] <monochrom> I can do that too.
[21:49:13] <monochrom> > const 42 (return $! foldr seq () [undefined, 3])
[21:49:15] <lambdabot>  error:
[21:49:15] <lambdabot>      • Could not deduce (Monad m0) arising from a use of ‘return’
[21:49:15] <lambdabot>        from the context: Num a
[21:49:30] <monochrom> Dammit.
[21:49:38] <Cale> Bleant: are you doing something like printing the () at the end?
[21:49:38] <monochrom> > const 42 (return $! foldr seq () [undefined, 3] :: Maybe ())
[21:49:40] <lambdabot>  42
[21:49:50] <Bleant> Wait, there is a GHCI bot? That's the coolest thing ever
[21:50:08] <Bleant> Cale: No, it's just the last statement in my main :: IO ()
[21:50:28] <Bleant> How do I reply properly?
[21:50:33] <monochrom> Here is another strategy. You can print just one element of the sorted array. That will be quite enough to cause a lot of evaluations.
[21:50:42] <monochrom> or rather s/cause/ensure/
[21:50:42] *** Joins: econo (uid147250@user/econo)
[21:50:49] <Cale> Actually, what you have is probably fine, but it would be better to use Control.Exception.evaluate to force the evaluation to happen in sequence with IO
[21:51:13] *** Quits: shidima (~shidima@84-104-108-90.cable.dynamic.v4.ziggo.nl) (Ping timeout: 268 seconds)
[21:51:13] <int-e> Bleant: Prefixing with nicks is as proper as it gets on IRC.
[21:51:16] <geekosaur> Bleant, lambdabot is not a ghci bot although it can evaluate expressions. but there is also yahb which is a ghci bot
[21:51:16] <Cale> Or yeah, just print one element of the array, which would guarantee that you've evaluated them all
[21:51:50] <Bleant> Gotta go, guys! Thanks for all the help. Looking forward to talking to you again :D
[21:51:54] <int-e> There's yahb which is actually a ghci frontend.
[21:52:02] <Bleant> I'll still take a look to see what's going on, of course
[21:52:02] <int-e> % foo = 1+1
[21:52:02] <yahb> int-e: 
[21:52:05] <int-e> % foo
[21:52:05] <yahb> int-e: 2
[21:52:09] *** Quits: Bleant (~Bleant@2804:7f7:d68c:6ec3:ba71:4b18:997c:9fc1) (Remote host closed the connection)
[21:54:55] *** Quits: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[22:01:36] *** Joins: desantra (~skykanin@user/skykanin)
[22:04:03] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[22:08:59] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:12:08] *** Quits: dsamperi (~dsamperi@2603-7000-3b42-5400-0c2e-16c3-2bfb-81aa.res6.spectrum.com) (Quit: Konversation terminated!)
[22:12:56] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[22:14:38] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[22:20:35] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[22:20:35] *** Joins: Lycurgus (~juan@98.4.112.204)
[22:23:57] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 256 seconds)
[22:26:04] *** Quits: azeem (~azeem@2a00:801:238:f0f3:c4db:a6a8:71e6:c28) (Quit: Quit)
[22:27:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:29:44] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[22:31:00] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Remote host closed the connection)
[22:32:29] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[22:34:29] *** Joins: aegon (~mike@174.127.249.180)
[22:36:05] *** Joins: yinghua_ (~yinghua@2800:2121:1400:900:c56e:96f4:75cd:50ac)
[22:36:17] *** Joins: sciencentistguy (~sciencent@hacksoc/ordinary-member)
[22:37:34] *** Joins: favonia (~favonia@user/favonia)
[22:38:42] *** Quits: yinghua (~yinghua@2800:2121:1400:900:9d55:2c9d:5a16:a12) (Ping timeout: 268 seconds)
[22:41:14] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[22:46:22] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[22:48:18] *** Quits: favonia (~favonia@user/favonia) (Ping timeout: 256 seconds)
[22:49:28] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:49:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:50:33] *** Joins: cads (~cads@ip-64-72-99-234.lasvegas.net)
[22:50:39] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:53:29] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 268 seconds)
[22:55:17] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:55:20] *** Joins: ubert (~Thunderbi@p200300ecdf4fca7ce019fddc82d0353e.dip0.t-ipconnect.de)
[22:55:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[23:00:50] *** Quits: sonny (~sonny@bras-base-london1483w-grc-30-74-12-157-200.dsl.bell.ca) (Ping timeout: 256 seconds)
[23:03:21] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[23:05:47] *** Quits: ent (entgod@kapsi.fi) (Ping timeout: 264 seconds)
[23:06:20] *** Joins: ent (entgod@kapsi.fi)
[23:06:52] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:07:28] *** Quits: kuribas (~user@ptr-25vy0i85hqqtidw9mko.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[23:07:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:09:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 268 seconds)
[23:12:07] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:14:28] <aegon> i'm using derive generic on MessagePack instances of data. I dug in and saw that encoding / decoding was using from and to from Generics to order things. How can i look up how that is ordering objects? (i need to parse these from a different language and order matters for the encoding / decoding)
[23:14:55] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[23:15:32] <aegon> i'm also using it on a UUID and i'm not sure if its using show on it or whatnot to encode, learniung how to poke around at generic derivations today it seems
[23:17:41] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[23:18:17] *** eldritch__ is now known as eldritch
[23:19:30] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:f161:c9c3:b403:49f6)
[23:19:38] <aegon> hmm, i guess i could use from and to manually on an instance and just look
[23:19:39] <dsal> If order matters in such a way that isn't clearly defined by spec, I wouldn't expect derived values to do exactly what you need.
[23:20:24] <aegon> the order within a field matters but the spec doesnt state which value comes first and there are no unique ids or names thrown into the packed representation, just type identifiers
[23:21:20] <aegon> is the order of GHC.Generics (form, to) unreliable?
[23:21:45] <aegon> er, unreliable / undetermined
[23:22:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:58cd:ccc2:f66c:e3b) (Ping timeout: 268 seconds)
[23:23:21] <aegon> i think manually instancing is fine i'm just trying to understand Generics more
[23:23:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-032.wadham.ox.ac.uk)
[23:24:10] <aegon> this is a wierd case to me because it accepted / auto derived UUID, which doesn't have an instance of the target for derivation, but i can't see anything in the lib that determines or defines the needed class by Show or Storable or StorableFixed so :?
[23:24:18] *** Joins: mmhat (~mmh@55d4a8dc.access.ecotel.net)
[23:24:32] <aegon> it might be doing it by constructor and data fields?
[23:24:43] <dsal> If the spec doesn't say an order matters, but an order matters to your application, then it sounds like you're going beyond the specification so a generic implementation shouldn't help.
[23:25:05] <dsal> I'm not familiar with the specific things you're talking about, though.
[23:25:50] <aegon> its messge pack, the spec just doen't choose to restrict a sequencing
[23:26:04] <dsal> Understood.  I just barely know what message pack is.  :)
[23:26:09] <aegon> you could say thats a bad spec but it also mostly doesn't matter, the use case is apps that know data ahead of time
[23:26:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:26:46] <aegon> its a json like format specializing in fast, small, in place parsing / encoding with good memory management controls
[23:26:50] <dsal> Just at the point where there's no canonical ordering by spec, but you need an ordering, I'd expect to have to write some code.
[23:27:22] <aegon> yeah, it looks like there is a instance based of Storable but also Unbox, does a class have to explicitly instance Unbox or is it a side effect possibly of Bang syntax
[23:27:48] <aegon> the class in question doesn't have an Unbox written but afaik is written "unboxed" `data UUID = UUID !Word64 !Word64`
[23:28:44] *** Quits: desantra (~skykanin@user/skykanin) (Quit: WeeChat 3.3)
[23:30:23] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 246 seconds)
[23:31:07] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[23:31:28] *** Joins: hightower2 (~hightower@213.147.110.20)
[23:31:42] <aegon> wellll, manual it is, i don't want the Storable derived version of this, but the Binary version and hwo knows what these generics are doing
[23:31:57] *** Joins: pop3 (~pop3@user/pop3)
[23:33:53] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[23:34:38] *** Joins: pop3 (~pop3@user/pop3)
[23:35:25] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 268 seconds)
[23:35:39] <dsal> Sometimes, I spend so much of my day trying to figure out how to avoid writing code that I don't even write any code.
[23:36:40] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 268 seconds)
[23:37:03] *** Quits: hightower2 (~hightower@213.147.110.20) (Ping timeout: 256 seconds)
[23:37:35] *** Joins: juhp (~juhp@128.106.188.220)
[23:39:34] <aegon> lol, i live with another coder and she's doing the same today. Afaik the whole morning has been spent trying to figure out how to use the infer keyword in typescript to remove the need for a switch statement... in all liklihood this would end up in javascript with the same runtime. but we both get sucked down typing rabbit holes
[23:40:18] <aegon> i'm manually instancing now though
[23:40:36] <dsal> I was working with interns doing typescript and it proxied a lot of pain back to me.
[23:40:48] <shapr> I shall change my title to explorer of rabbit holes.
[23:41:08] <geekosaur> <-- human fuzzer
[23:43:55] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[23:44:42] *** Quits: mjs2600 (~mjs2600@c-24-91-3-49.hsd1.vt.comcast.net) (Ping timeout: 260 seconds)
[23:45:53] *** Quits: Guest41 (~Guest41@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:47:15] *** Quits: alx741 (~alx741@186.178.109.189) (Ping timeout: 256 seconds)
[23:50:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[23:51:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[23:54:21] *** Quits: caef^ (~caef@wsip-98-188-242-6.mc.at.cox.net) (Remote host closed the connection)
[23:59:43] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
