[00:06:36] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[00:07:03] <NimEventer> New Nimble package! scraper - Scraping tools, see https://gitlab.com/lurlo/scraper
[00:11:53] <FromDiscord> <retkid>  https://media.discordapp.net/attachments/371759389889003532/909543682892505108/unknown.png
[00:11:56] <FromDiscord> <retkid> so yea
[00:12:03] <FromDiscord> <retkid> something in .close()
[00:33:04] *** Joins: xet7 (~xet7@user/xet7)
[00:47:49] <FromDiscord> <retkid> at around 9000 requests .close() stops working
[00:47:57] <FromDiscord> <retkid> maybe its 90008
[00:49:06] <NimEventer> New Nimble package! duckduckgo - Duckduckgo search, see https://gitlab.com/lurlo/duckduckgo
[01:03:52] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[01:14:30] *** greaser|q is now known as GreaseMonkey
[01:50:49] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:25:36] *** Joins: hmmmmm (~fgh564erd@host-82-49-252-16.retail.telecomitalia.it)
[02:57:08] *** Quits: hmmmmm (~fgh564erd@host-82-49-252-16.retail.telecomitalia.it) ()
[03:04:32] <FromDiscord> <andi-> Earlier someone said that arrays are always stack allocated. So the correct way to allocate big chunks of memory is using `newSeq[T](...)`?
[03:05:39] <FromDiscord> <Elegantbeef> Correct is subjective and depending on the structure nim would be passing the array by reference anyway
[03:07:07] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F1s for instance
[03:07:18] <FromDiscord> <andi-> Yeah, but I am looking at allocating perhaps a few hundred megabyte. That wouldn't fit the stack and would be a dynamic stack allocation (ugh!)
[03:08:34] <FromDiscord> <Elegantbeef> I dont know if it's true that "always stack allocated"
[03:10:40] <FromDiscord> <Elegantbeef> The manual doesnt mention it so it could just be something always repeated and never checked 😀
[03:10:49] <FromDiscord> <andi-> hah
[03:11:07] <FromDiscord> <andi-> I just produced my first segfault with Nim \:D
[03:11:08] <FromDiscord> <Elegantbeef> Generally speaking if you need fixed length use array, if you need dynamic use seq
[03:11:17] <FromDiscord> <andi-> yeah, I thought as much
[03:11:28] <FromDiscord> <impbox [ftsf]> https://forum.nim-lang.org/t/5826 related
[03:11:43] <FromDiscord> <Elegantbeef> You also might want to look at a memory file or using a file in general if it's big and dont need it all in memory at once
[03:12:12] <FromDiscord> <Elegantbeef> Yea seems it might be a certainty then
[03:12:19] <FromDiscord> <impbox [ftsf]> but it'll be implementation specific, it won't be stack allocated on the js backend for example
[03:12:26] <FromDiscord> <andi-> I am writing a parser for a file format so not passing it through memory isn't gonna happen
[03:12:48] <FromDiscord> <impbox [ftsf]> well you don't necessarily have to have the whole file in memory at the same time
[03:12:56] <FromDiscord> <Elegantbeef> A file stream would be perfect here
[03:13:24] <FromDiscord> <Elegantbeef> Depending on what you have you read only what you need into memory manage it then continue
[03:13:42] <FromDiscord> <Elegantbeef> The parsed data might get large i suppose
[03:13:44] <FromDiscord> <andi-> That is what I am doing right now. I might have a few megabytes in memory at a time anyway
[03:13:59] <FromDiscord> <Elegantbeef> Ah ok misunderstanding then
[03:14:06] <FromDiscord> <andi-> I've written the same parser in Rust and Go before. It is my goto project for learning a new language.
[03:14:19] <FromDiscord> <Elegantbeef> I see
[03:16:51] <FromDiscord> <impbox [ftsf]> i hope you use lots of goto
[03:17:02] <FromDiscord> <Elegantbeef> I hope i can ban impbox eventually
[03:20:26] <FromDiscord> <andi-> sent a code paste, see https://play.nim-lang.org/#ix=3F1w
[03:21:42] <FromDiscord> <andi-> It works fine in the playground
[03:21:58] <FromDiscord> <Elegantbeef> You sure your stream has data?
[03:22:42] <FromDiscord> <andi-> Yeah, if it wouldn't I would get an IOError
[03:22:51] <FromDiscord> <andi-> and I've put like 30 bytes in there
[03:22:58] <FromDiscord> <Elegantbeef> Lol yea it fucks the sequence up
[03:23:17] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F1x
[03:23:52] <FromDiscord> <Elegantbeef> Ah i see why
[03:24:05] <FromDiscord> <Elegantbeef> It writes the data to the ptr not the internal collection 😀
[03:24:22] <FromDiscord> <andi-> I was fearing as much \:\|
[03:24:47] <FromDiscord> <Elegantbeef> `readStr` is probably the best
[03:25:06] <FromDiscord> <andi-> and String is really a synonym for arbitrary "strings" of bytes in Nim?
[03:25:56] <FromDiscord> <Elegantbeef> a `seq[uint8]` is presently internally identical to a `string` except it doesnt have the `\0` element always at the end
[03:26:02] <FromDiscord> <andi-> ok
[03:26:44] <FromDiscord> <Elegantbeef> You can also do↵`stream.readData(b[0].addr, b.len)`
[03:27:16] <FromDiscord> <andi-> readData sounds better. readStr means I'll have to deal with a stray trailing zero byte when converting it to a seq again
[03:27:28] <FromDiscord> <Elegantbeef> Nah
[03:27:46] <FromDiscord> <Elegantbeef> You can cast string -\> seq[byte] without that `\0` appearing
[03:27:50] <FromDiscord> <Elegantbeef> It's purely for C interop
[03:28:24] <FromDiscord> <andi-> ok
[03:28:49] <FromDiscord> <Elegantbeef> Really though there needs to be support for `read`/`write` sequences
[03:29:10] <FromDiscord> <Elegantbeef> writing a sequence writes just the address and reading it returns it, quite pointless
[03:30:12] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:19] <FromDiscord> <andi-> Ok, with readData my tests pass.
[03:30:37] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:38:39] <FromDiscord> <evoalg> In reply to @Elegantbeef "https://play.nim-lang.org/#ix=3F1s for instance": noob question time again ... I was looking at your https://play.nim-lang.org/#ix=3F1s and I'm wondering why unsafeaddr is used ... and what's Idx?
[03:39:32] <FromDiscord> <Elegantbeef> Unsafeaddr is used since `a` is passed as immutable, `Idx` is the index generic, and `T` the type generic
[03:40:06] <FromDiscord> <Elegantbeef> Remember in Nim unlike other languages arrays have a size type attached to them so `var a: array[10,int] = default(array[3, int])` is an error
[03:41:18] <FromDiscord> <Elegantbeef> `unsafeaddr` is just a way to be slightly more clear about overcoming immutable references, but there is an RFC to remove it since it implies `addr` is safe
[03:41:46] <FromDiscord> <evoalg> lol true it does!
[03:42:33] <FromDiscord> <evoalg> `addr` is a pointer? ... and not a safe pointer like a ref?
[03:43:01] <FromDiscord> <Elegantbeef> Yep `addr` can be a pointer to any addressable value
[03:43:19] <FromDiscord> <Elegantbeef> For it to be safe you need to know a few things about what you're doing
[03:44:11] <FromDiscord> <Elegantbeef> If the object is on the stack and you keep the address the address should not outlive the object. If it's a ptr to a managed type you should not mutate that type.
[03:46:05] <FromDiscord> <evoalg> and with a ref I can mutate and it'll handle it fine?
[03:59:10] <FromDiscord> <Elegantbeef> Yea cause the object will not be destroyed whilst you hold onto a reference
[03:59:15] <FromDiscord> <Elegantbeef> Example time!
[04:03:56] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3F1F
[04:04:01] <FromDiscord> <Elegantbeef> Not a great example but meh
[04:11:58] <FromDiscord> <Elegantbeef> It atleast shows the issue with a pointer to a sequences value, the latter part is pretty pointless i guess
[04:12:09] <FromDiscord> <Elegantbeef> Since if they were `ptr int` it'd be the same
[04:17:42] <FromDiscord> <evoalg> I'm trying to understand the 2nd part ... lemme stare at it for a bit longer
[04:18:20] <FromDiscord> <Elegantbeef> It's just using reference ints instead of normal ints which means there are nim managed pointers instead of integers stored in the sequence
[04:18:55] <FromDiscord> <Elegantbeef> do `echo c.repr` after it was added and you'll see what it's doing
[04:25:20] <FromDiscord> <evoalg> I went back to look at the first part ... you take the address of a[0] because a.address is a pointer to a pointer by the looks, yea I seem to remember that containers names are pointers
[04:26:04] <FromDiscord> <Elegantbeef> Not always the case but close enough
[04:26:56] <FromDiscord> <evoalg> hehehe
[04:28:20] <FromDiscord> <evoalg> btw I really like how you can explain things at my level, it makes for a great teacher
[04:29:50] <FromDiscord> <Elegantbeef> Excuse me whilst i find a textbook and tell you "If you havent read this, i cannot help you" to get the full teacher experience
[04:31:57] <FromDiscord> <evoalg> lol exactly 😉
[04:33:39] <FromDiscord> <evoalg> That `c.add:` you do with the multi lines, I didn't know you could do that ... it looks similar syntax to a `collect:` ... here's me thinking it was a collect thing and not actual nim syntax
[04:33:51] <FromDiscord> <Elegantbeef> Yep it's for all calls
[04:33:58] <FromDiscord> <Elegantbeef> It's quite nifty
[04:34:18] <FromDiscord> <impbox [ftsf]> what?
[04:34:20] <FromDiscord> <impbox [ftsf]> i never knew this
[04:34:56] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F1J
[04:35:00] <FromDiscord> <Elegantbeef> forgot to call `invokeProcs()` 😛
[04:38:59] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F1K
[04:47:09] <FromDiscord> <evoalg> I finally understand your addr code snippet after starting at it for 45 mins (and playing with lots of repr's) ... I'm so slow .. thank you ElegantBeef. I'm not going to try and understand that obfuscation you just posted though 😉
[04:47:42] <FromDiscord> <Elegantbeef> That above code is just a odd syntax for anonymous procedures 😀
[04:48:02] <FromDiscord> <Elegantbeef> it's the same as `addProc proc (a, b: int) = echo a  b`
[05:07:36] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:00:22] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[06:00:52] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[06:26:53] <FromDiscord> <evoalg> I can't seem to use `var` or `let` in collect ... https://play.nim-lang.org/#ix=3F1Z
[06:28:32] <FromDiscord> <Elegantbeef> Why even use collect here?
[06:29:05] <FromDiscord> <evoalg> I was doing something more complicated with a for loop, but I just wanted a simple example to show
[06:29:15] <FromDiscord> <Elegantbeef> Ah
[06:29:32] <FromDiscord> <evoalg> I can put a more realistic one
[06:30:50] *** Joins: Guest9 (~Guest9@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[06:32:32] <FromDiscord> <Elegantbeef> Ah the issue is the way the collect macro works
[06:33:11] <FromDiscord> <Elegantbeef> It redeclares the variables in the expression, which causes an issue
[06:34:51] <FromDiscord> <evoalg> ok ... it could be argued that if it get's complicated enough to declare vars, use a proc ... that makes sense to me
[06:35:42] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F26
[06:36:05] <FromDiscord> <Elegantbeef> Using a template instead of a variable declaration cause we're barbarians 😀
[06:37:56] <FromDiscord> <evoalg> whoa ... but seriously should I use that way or a proc?
[06:38:07] <FromDiscord> <Elegantbeef> Probably a proc
[06:38:24] <FromDiscord> <Elegantbeef> You could also write collect manually
[06:38:30] <FromDiscord> <evoalg> I guess you were hinting that using a templet there is barbaric
[06:38:35] <FromDiscord> <evoalg> oh?
[06:38:41] <FromDiscord> <evoalg> oh right yes
[06:38:42] *** Quits: Guest9 (~Guest9@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) (Quit: Client closed)
[06:39:17] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F27
[06:39:24] <FromDiscord> <Elegantbeef> Not as nice as collect but it's what collect does internally
[06:39:32] <FromDiscord> <evoalg> oh!
[06:40:36] <FromDiscord> <evoalg> my more "realistic" eg: https://play.nim-lang.org/#ix=3F24
[06:40:49] <FromDiscord> <evoalg> I can put that in a proc instead
[06:40:54] <FromDiscord> <Elegantbeef> Yep
[06:41:00] <FromDiscord> <Elegantbeef> I love me some scanf 😀
[06:41:21] <FromDiscord> <evoalg> that's because you haven't fallen in love with regex's yet
[06:41:30] <FromDiscord> <Elegantbeef> Never!
[06:41:47] <FromDiscord> <Elegantbeef> I really love scanf since it captures variables, and the tuple variant i wrote is even nicer
[06:42:08] <FromDiscord> <evoalg> hehe ... oh tuple variant?
[06:42:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3F29
[06:43:20] <FromDiscord> <Elegantbeef> Yea there is a scantuple which does the same thing as scanf but returns a tuple
[06:44:05] <FromDiscord> <evoalg> that is nicer!
[06:46:08] <FromDiscord> <evoalg> regex's were so easy in Perl, but the symbols aren't user-friendly, Python's regex are just "ok", but nim's are more painful
[06:47:06] <FromDiscord> <evoalg> several completing regex modules, each incomplete, each difficult to use
[06:47:50] <FromDiscord> <evoalg> but I do like scanf 🙂
[06:48:52] <FromDiscord> <Elegantbeef> I dont generally deal with arbitrary text, it's generally text that follows a simple pattern and i want the values from it in a specific format, so regex makes me do more work than scanf/PEGs
[06:54:02] <FromDiscord> <evoalg> PEGs ?
[07:00:10] <FromDiscord> <Elegantbeef> Patterns and grammars for instance https://github.com/zevv/npeg
[07:21:35] *** Quits: Yardanico (~quassel@2a01:4f8:c2c:df22::2) (Changing host)
[07:21:35] *** Joins: Yardanico (~quassel@user/yardanico)
[07:22:13] *** Quits: Yardanico (~quassel@user/yardanico) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:22:28] *** Joins: Yardanico (~quassel@user/yardanico)
[07:23:27] <FromDiscord> <Yardanico> restarting the discord-irc bridge because of some stuff
[07:23:33] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (Remote host closed the connection)
[07:23:47] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[07:23:58] <Yardanico> 123
[07:24:01] <FromDiscord> <Yardanico> done
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:43:03] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:07:33] <FromDiscord> <huantian> In reply to @Elegantbeef "Patterns and grammars for": looking at the first code snippet reminds me of haskell shivers 😛
[08:08:40] <FromDiscord> <Rika> Haskell was fun
[08:08:51] <FromDiscord> <Rika> The speed deficits I get from using it is not lol
[08:10:58] <FromDiscord> <impbox [ftsf]> your speed or the code's speed?
[08:11:50] <FromDiscord> <impbox [ftsf]> I've never tried haskell, a lot of my old coworkers loved it
[08:18:34] <FromDiscord> <Rika> The code speed
[08:18:42] <FromDiscord> <Rika> I was fine coding in it
[08:19:01] <FromDiscord> <Rika> Speed dies if you don’t do some things specifically
[08:19:15] <FromDiscord> <Rika> Because the optimiser can’t catch some stuff
[08:19:19] <FromDiscord> <impbox [ftsf]> ahh ok
[08:37:37] *** Joins: sagax (~sagax_nb@user/sagax)
[10:28:39] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[10:28:50] *** Joins: ozzz (~oz@46.49.41.80)
[10:34:23] *** Quits: averell (~averell@user/averell) (*.net *.split)
[10:34:38] *** Joins: averell (~averell@user/averell)
[10:41:27] *** Joins: PMunch (~PMunch@user/pmunch)
[10:48:26] *** Quits: sagax (~sagax_nb@user/sagax) (Read error: Connection reset by peer)
[11:04:43] *** Joins: sagax (~sagax_nb@user/sagax)
[11:39:47] *** Joins: pro (~pro@user/pro)
[12:13:41] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:13:42] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:13:42] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:26:07] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[12:26:47] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[12:26:47] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:48:19] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[14:11:26] *** Joins: u0_a185 (~u0_a185@2001:ce8:131:5f61:cd4d:9df4:22a5:efd5)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:20:19] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:20:19] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:22:49] *** Joins: stephane (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[14:24:09] *** stephane is now known as Gintru
[14:24:23] * Gintru feel lonely
[14:24:30] <Gintru> *feels
[14:26:05] *** Quits: Gintru (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) (Client Quit)
[14:39:12] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[14:42:02] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[14:42:02] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[14:44:45] *** Joins: Gintru (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[14:45:13] * Gintru test
[14:46:28] <FromDiscord> <Rika> We didn’t receive your test message can you send it again
[14:49:31] <Gintru> a
[14:49:51] <Gintru> Rika / No. nn, sorry it is a test for me
[14:50:17] <Gintru> Rika / I evaluate an IRC client
[14:51:42] <Gintru> I should go elswhere, I didn't figure out it could be such a mess (server, user list…) I leave
[14:51:59] <Gintru> ByE / OuT O o .
[14:52:03] *** Quits: Gintru (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) (Quit: That's it for today)
[14:53:39] <FromDiscord> <Rika> I was making a joke
[15:02:34] *** Joins: stephane (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[15:16:13] *** Quits: u0_a185 (~u0_a185@2001:ce8:131:5f61:cd4d:9df4:22a5:efd5) (Read error: Connection reset by peer)
[15:16:30] *** Joins: u0_a185 (~u0_a185@180-145-29-56f1.kyt1.eonet.ne.jp)
[15:23:04] *** Quits: stephane (~stephane@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) (Quit: stephane)
[15:35:41] *** Joins: Gintru (~Gintru@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:00] * Gintru /knock
[15:38:55] * Gintru thinking pidgin power but absconsness
[15:39:26] <Gintru> systemdsucks: o really ?
[15:39:44] <PMunch> Am I missing a lot of chat here?
[15:39:58] <Gintru> PMunch: I don't think so 
[15:40:04] <PMunch> Ah right :P
[15:40:13] <PMunch> I thought you replied to systemdsucks
[15:40:19] <Gintru> PMunch: maybe at 4pm it is more talkative
[15:40:31] <PMunch> It's usually quite a bit more active than this
[15:40:43] <PMunch> I guess Monday is taking it's toll on people :P
[15:41:05] <PMunch> This community is fairly heavily Europe-based, so a lot of people are also at work/school
[15:41:40] <Gintru> PMunch: I didn't think about that
[15:42:30] <FromDiscord> <dom96> I'm off work today o/
[15:42:42] <PMunch> Hooray!
[15:42:47] <PMunch> Well, unless you're sick..
[15:42:58] <Gintru> dom96: /smile/
[15:43:11] <Gintru> dom96: congrat
[15:43:30] *** Parts: Gintru (~Gintru@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) ()
[15:43:54] *** Joins: Gintru (~Gintru@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d)
[15:44:09] * Gintru reconnected
[15:45:34] <FromDiscord> <dom96> Nah, not sick, just decided to take this Monday off to rest
[15:47:51] <Gintru> ByE / OuT O o .
[15:47:58] *** Quits: Gintru (~Gintru@2a01:e0a:3f4:9630:9b18:e1c5:bf4:e93d) (Quit: Leaving.)
[16:11:46] <FromDiscord> <evoalg> @dom96 as new nim versions keep rolling out, do you think your book will need updating at some stage? I have nothing specific in mind, I'm just curious as to your thoughts about it?
[16:12:28] <FromDiscord> <dom96> sure, could always use an update. Question is when will be the right time. Probably after 2.0 tbh
[16:12:45] <FromDiscord> <evoalg> that makes sense, yep
[16:12:48] <FromDiscord> <dom96> (also who knows if Manning is even interested in a 2nd edition)
[16:12:53] <FromDiscord> <dom96> so no guarantees
[16:12:58] <FromDiscord> <evoalg> true
[16:13:10] <FromDiscord> <evoalg> I don't know much about that side of things
[16:13:17] <FromDiscord> <dom96> that said, it repayed the book advance so afaik that's considered a success in the book world 🙂
[16:13:41] <FromDiscord> <evoalg> Nice!
[16:14:20] <FromDiscord> <dom96> (edit) "repayed" => "repaid"
[16:15:13] <PMunch> That is indeed a good sign
[16:15:22] <FromDiscord> <Rika> congrats
[16:19:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@94.16.67.223)
[16:20:04] *** Quits: neurocyte0132889 (~neurocyte@94.16.67.223) (Changing host)
[16:20:04] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:21:25] <FromDiscord> <dom96> thanks 🙂
[16:22:34] <FromDiscord> <dom96> Speaking of which, Manning books are on sale now in case you want to take advantage of the deal (not just for my book): https://www.manning.com/?utm_source=niminaction&utm_medium=affiliate&utm_campaign=ebook&pbook_sale_11_15_21&a_aid=niminaction&a_bid=417b1389
[16:28:33] <NimEventer> New thread by Dom96: Evolving the moderation of the Nim communities, see https://forum.nim-lang.org/t/8629
[16:32:07] *** Joins: kayabaNerve_ (~kayabaNer@user/kayabanerve)
[16:33:19] <FromDiscord> <evoalg> @dom96 cheers - I bought your book just now
[16:33:39] <FromDiscord> <dom96> Ooh, amazing, thank you!
[16:35:11] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 264 seconds)
[17:12:13] <NimEventer> New post on r/nim by SamLovesNotion: How to compile to modern JS?, see https://reddit.com/r/nim/comments/qugoik/how_to_compile_to_modern_js/
[17:16:52] *** Quits: pro (~pro@user/pro) (Read error: Connection reset by peer)
[18:00:04] *** Joins: arkurious (~arkurious@user/arkurious)
[18:08:46] <NimEventer> New thread by Miran: Zen of Nim, see https://forum.nim-lang.org/t/8630
[18:14:49] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[18:15:33] *** Joins: xet7 (~xet7@user/xet7)
[18:38:52] <FromDiscord> <pietroppeter> I might have posted about Zen of Nim on the orange site, but you are not hearing it from me 😉
[18:40:29] <PMunch> Wink wink nudge nudge ay, say no more, say no more
[18:41:31] <PMunch> Oh hey everyone, look at this cool article I found about Nim: https://news.ycombinator.com/item?id=29228230
[18:41:53] <FromDiscord> <pietroppeter> oh noooo! 😛
[18:42:07] <PMunch> Wait, does that trigger the ban as well?
[18:43:12] <FromDiscord> <pietroppeter> I think so. As far as I know, the suggestion would be not to upvote after reaching from that link, do an organic search in HN
[18:55:56] <PMunch> Ah, damn it..
[18:57:15] <FromDiscord> <pietroppeter> no worries, I have very low expectations on HN success anyway. let's see how it goes... 🙂
[19:00:39] <FromDiscord> <Rika> hn would probably just bash it again
[19:00:48] <FromDiscord> <Rika> repetitive argument #128946?
[19:15:07] <FromDiscord> <Zoom> It's only natural for the critics to be vocal. If you like something, telling about that each time there's a chance can be a bit off-putting. Answering to a constructive critique in a civilized and honest manner is paramount, though.↵(@Rika)
[19:17:16] <FromDiscord> <ajusa> In reply to @Zoom "It's only natural for": iirc every time Nim comes up on HN folks bash two things:↵1. whitespace sensitive↵2. case/underscore/style insensitivity
[19:17:50] <FromDiscord> <ajusa> and those are core to the language, so it's pretty difficult to answer to that criticism. All folks can provide are anecdotes of how those make the language better
[19:21:41] <FromDiscord> <Zoom> You can't really do anything with it besides repeating your points over and over again as it's really the core distinction of the language. It's the same with Rust always getting bashed for being "hard" by people who never saw a proper type in their lives.
[19:22:03] <FromDiscord> <Rika> the core issue for 2. is that they think too much choice would be bad because "the junior is gonna fuck up the uniformity of the codebase" which isnt an issue of the design but an issue of tooling
[19:22:32] <FromDiscord> <Rika> isnt rust properly difficult not for the typing but for the lifetimes?
[19:23:06] <FromDiscord> <ajusa> Yeah man Rust is the least productive language I've ever used just because of how much it yells at me for borrow/lifetimes
[19:23:19] <FromDiscord> <ajusa> (edit) "Yeah man" => "Yeah,"
[19:24:01] <FromDiscord> <Zoom> Lifetimes are kind of a natural extension to the type system.↵Dunno, I like it very much and I liked being shouted at by a compiler. Though, my experience is limited of course.↵(@Rika)
[19:24:06] <FromDiscord> <Rika> imo: choice is always better than no choice because you can always restrict choice but you cant unrestrict no choice
[19:24:30] <FromDiscord> <Rika> i like being shouted at for fucking up a type (literally unsafe)
[19:24:47] <FromDiscord> <Rika> i dont like it when its lifetimes (just fucking copy or whatever, and warn instead)
[19:25:00] <FromDiscord> <Zoom> I tend to think the same way, but you can't really argue that maintaining order and following standards in the presence of multitude of choices requires resources.↵(@Rika)
[19:25:13] <FromDiscord> <Rika> that is true
[19:25:30] <FromDiscord> <Rika> its not something to argue about because there is nothing dubious
[19:26:47] <FromDiscord> <Zoom> I mean this (economy or resources) is obviously a priority in the industry, over both the user experience and dev experience.
[20:03:15] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3F4R
[20:03:20] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 265 seconds)
[20:03:25] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Quit: The Lounge - https://thelounge.chat)
[20:03:44] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[21:07:41] <NimEventer> New thread by Exelotl: Forbidden-by-default effects?, see https://forum.nim-lang.org/t/8631
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:08:55] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:08:55] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:13:22] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@94.46.69.238)
[21:13:59] *** Quits: neurocyte0132889 (~neurocyte@94.46.69.238) (Changing host)
[21:13:59] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:40:27] *** Quits: u0_a185 (~u0_a185@180-145-29-56f1.kyt1.eonet.ne.jp) (Quit: WeeChat 3.0.1)
[21:44:19] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[22:09:51] <NimEventer> New thread by Mantielero: Question about memory management with bindings, see https://forum.nim-lang.org/t/8632
[22:13:34] <FromDiscord> <hmmm> yo nimbros, is moveFile("dest") the official way to move a file to a subdir? (if it seems like a stupid question it's because it probably is)
[22:25:09] *** Joins: krux02_ (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[22:38:09] <FromDiscord> <IsaacPaul> It's part of the standard library so I would say yes.. However, be sure to handle OSError because its not uncommon for it to raised
[22:40:11] <FromDiscord> <IsaacPaul> dest can be anything including a subdir
[22:40:26] <FromDiscord> <hmmm> hmm I'd like to get an OSError, the current situation is that the program happily compiles and then the file gets moved to the void I guess because I'm pretty sure it's not going to "dest" lol 🤔
[22:41:17] <FromDiscord> <IsaacPaul> does dest include the file name?
[22:42:24] <FromDiscord> <hmmm> nope it's like moveFile("thingy.json", "/subdir")
[22:43:16] <FromDiscord> <hmmm> I tried checking the current working directory but it seems correct, so I have no idea where my good old friend thingy.json goes to
[22:43:20] <FromDiscord> <IsaacPaul> yea you need full paths
[22:43:27] <FromDiscord> <hmmm> oh noes
[22:43:29] <FromDiscord> <hmmm> I hate them
[22:43:48] <FromDiscord> <hmmm> why do I need them
[22:44:08] <FromDiscord> <IsaacPaul> there is no context as where the file is
[22:44:33] <FromDiscord> <hmmm> I mean there is! We are working in the current working directory so the programs knows where subdir is
[22:44:38] <FromDiscord> <Rika> cwd isnt used "automatically" in nim afaik
[22:45:32] <FromDiscord> <hmmm> I'm lazy it should work without full paths
[22:45:49] <FromDiscord> <hmmm> I bet python works with relative paths 🧐
[22:45:56] <FromDiscord> <IsaacPaul> you can always write the way you like it
[22:45:59] <FromDiscord> <IsaacPaul> lol
[23:01:08] <FromDiscord> <hmmm> hmmm
[23:13:28] <FromDiscord> <hmmm> it worked with this monstrosity: moveFile("thingy.json", getCurrentDir() & "\\subdir\\thingy.json")
[23:14:33] <FromDiscord> <Yardanico> you can use / from os btw
[23:14:41] <FromDiscord> <hmmm> oh?
[23:14:50] <FromDiscord> <hmmm> what is /from os
[23:15:04] <FromDiscord> <Yardanico> it will concat components of the path  with the OS's dir separator
[23:15:21] <FromDiscord> <Yardanico> getCurrentDir() / "subdir" / "thingy.json"
[23:15:47] <FromDiscord> <hmmm> oh
[23:15:50] <FromDiscord> <hmmm> I'll try
[23:16:03] <FromDiscord> <Yardanico> In reply to @hmmm "what is /from os": It's literally `/` from the `os` module, not `/from` :)
[23:17:08] <FromDiscord> <hmmm> it worked
[23:18:35] <FromDiscord> <hmmm> it's still pretty ugly, is there a reason our std/os doesn't do the heavy lifting and leave us with a pretty synthax?
[23:22:33] <tk> are sequences lazy?
[23:23:06] <tk> when you do things like toSeq(1..10).map(x => x * w).filter(x => x mod 6 != 0)
[23:26:52] <tk> like if I do toSeq(file.lines).map(x => parseInt(x)).foldl(a + b) will it read the entire file in first?
[23:27:43] <tk> (well, except parseInt doesn't work like that but you get the picture)
[23:28:57] <FromDiscord> <IsaacPaul> In reply to @hmmm "it worked with this": oh I guess it does use cwd lol
[23:29:13] <FromDiscord> <hmmm> really?
[23:29:30] <FromDiscord> <IsaacPaul> your first parameter is "thingy.json" without specifying the cwd
[23:29:44] <FromDiscord> <hmmm> YEA
[23:30:11] <FromDiscord> <hmmm> the reason you are called isaac is because you are genius like newton :nim1:
[23:30:28] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3F5v
[23:30:29] <FromDiscord> <hmmm> I'll try
[23:30:36] <FromDiscord> <IsaacPaul> (edit) "https://play.nim-lang.org/#ix=3F5v" => "https://play.nim-lang.org/#ix=3F5w"
[23:30:47] <FromDiscord> <IsaacPaul> (edit) "https://play.nim-lang.org/#ix=3F5w" => "https://play.nim-lang.org/#ix=3F5x"
[23:32:24] <FromDiscord> <hmmm> oi it worked
[23:32:28] <FromDiscord> <IsaacPaul> oh cool
[23:32:28] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3F5y
[23:33:04] <FromDiscord> <hmmm> damn now I should rewind and go back to what I was doing wrong to why it didn't work before
[23:33:20] <FromDiscord> <IsaacPaul> You used / in the beginning of the dest name
[23:33:21] <FromDiscord> <hmmm> I'm happy our trusty std/os knows about rel paths 🥳
[23:33:30] <FromDiscord> <IsaacPaul> which means you're starting from the root of the filesystem
[23:33:39] <FromDiscord> <hmmm> oh ok
[23:34:42] <FromDiscord> <hmmm> isaac saved the day, that's why he was crowned king of england :nim1:
[23:39:03] <FromDiscord> <Schelz> Hi, I try to compile a file as 32bit dll but I get error at compiling (only when try to compile with  --cpu:i386), what do I do wrong ?
[23:39:42] <FromDiscord> <IsaacPaul> show us the parameters used to compile and the error
[23:39:46] <FromDiscord> <Yardanico> In reply to @Schelz "Hi, I try to": can you show the full error as shown by the compiler?
[23:39:52] <FromDiscord> <Yardanico> and what's your OS/C compiler?
[23:40:10] <FromDiscord> <Schelz> I use this to compile https://media.discordapp.net/attachments/371759389889003532/909898092785074266/unknown.png
[23:40:18] <FromDiscord> <Yardanico> yes, I mean the full error
[23:40:28] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/909898164570583070/unknown.png
[23:40:44] <FromDiscord> <Yardanico> oh, this means that your C compiler is in "64-bit" mode but you're feeding it 32-bit code
[23:40:47] <FromDiscord> <Yardanico> what's your C compiler?
[23:40:57] <FromDiscord> <Yardanico> also update to nim 1.6 :)
[23:41:18] <FromDiscord> <Yardanico> if it's mingw, you can fix that error (usually) by passing `--passC:-m32 --passL:-m32` in addition to the flags you've already passed
[23:42:01] <FromDiscord> <Schelz> In reply to @Yardanico "what's your C compiler?": mingw yes
[23:42:08] <FromDiscord> <IsaacPaul> In reply to @tk "when you do things": If takes an iterator as an input and outputs an iterator then you can assume its lazy
[23:42:17] <FromDiscord> <IsaacPaul> pretty safely assume its lazy
[23:42:38] <FromDiscord> <Schelz> And if I add --passC:-m32 --passL:-m3 I still need to add --cpu:i386 ?
[23:42:39] <tk> and what about functions taking iterators, does the lazyness persist there?
[23:42:41] <FromDiscord> <Yardanico> yes
[23:42:43] <FromDiscord> <Yardanico> @Schelz
[23:43:16] <FromDiscord> <Yardanico> @Schelz basically --cpu:i386 tells Nim to compile Nim code to C in 32-bit mode, so `int`, `uint` and some other types are 32bit
[23:43:25] <tk> or rather, is it possible to make it work through a function somehow
[23:43:28] <FromDiscord> <Yardanico> and -m32 is needed for mignw to understand that you want to make a 32-bit binary, not a 64-bit one
[23:43:32] <FromDiscord> <Schelz> now I get this https://media.discordapp.net/attachments/371759389889003532/909898934661570630/unknown.png
[23:43:33] <FromDiscord> <Yardanico> because it supports both 32-bit and 64-bit usually
[23:43:33] <tk> or only with templates?
[23:44:27] <FromDiscord> <Yardanico> In reply to @Schelz "now I get this": try removing the passL argument
[23:44:36] <FromDiscord> <Yardanico> not sure if the mingw bundled with nim has 32-bit support, but it should
[23:44:37] <FromDiscord> <IsaacPaul> yea template vs proc makes no difference in this case.
[23:44:59] <FromDiscord> <Schelz>  https://media.discordapp.net/attachments/371759389889003532/909899301126303764/unknown.png
[23:45:14] <FromDiscord> <Schelz> without --passL
[23:45:59] <FromDiscord> <Solitude> In reply to @tk "like if I do": it will read entire file. thats what toSeq does. eagerly collects result of an iterator.
[23:46:47] <FromDiscord> <Yardanico> In reply to @tk "like if I do": you might be interested in https://github.com/zero-functional/zero-functional if you want to use functional style chaining for seqs and stuff with more performance than sequtils :)
[23:47:00] <tk> FromDiscord: is there any way to make that thing work without first reading the entire file into ram?
[23:47:33] <FromDiscord> <IsaacPaul> In reply to @Solitude "it will read entire": Oh whoops, I looked at the docs and thought I saw a iterator return value 😂  I need my coffee. I'mma stop answering questions today
[23:47:33] <FromDiscord> <Solitude> yes, write a for-loop
[23:47:39] <FromDiscord> <Yardanico> @tk btw, FromDiscord is a bridge bot , you should reply like "@Nickname" where nickname is what's in the brackets
[23:47:54] <Yardanico> ^ so here FromDiscord is a bot and @Yardanico is my discord account
[23:48:00] <Yardanico> if you ping with @ users on discord will see your ping
[23:48:10] <tk> That would be very difficult since that's not what IRC uses and I have a lot of muscle memory built up.
[23:48:41] <Yardanico> well, it has to work that way because to ping on discord you must "resolve" the username into an actual user :)
[23:48:53] <Yardanico> no problems though, but keep it in mind if you want to ping someone who might not be online
[23:50:29] <FromDiscord> <Yardanico> In reply to @tk "FromDiscord: is there any": there's also https://nim-lang.org/docs/sugar.html#collect.m%2Cuntyped%2Cuntyped although it allows you to write in an imperative style with loops, not in a functional one
[23:50:49] <FromDiscord> <Yardanico> ah, it won't really work for stuff like foldl though
[23:51:40] <tk> So the zero-functional thing looks neat, does it follow semver?
[23:51:51] <FromDiscord> <Yardanico> don't know about that one, sorry
[23:51:55] <FromDiscord> <IsaacPaul> In reply to @Yardanico "you might be interested": 😮 I didn't realize seqUtils was so inefficient
[23:52:09] <FromDiscord> <Yardanico> In reply to @IsaacPaul "😮 I didn't realize": well that's quite obvious because it's implemented as simple templates
[23:52:19] <FromDiscord> <Yardanico> so if you chain multiple of them you'll have multiple temporary sequences
[23:53:19] <FromDiscord> <Yardanico> anyone posted zen of nim to HN yet?
[23:53:35] <FromDiscord> <IsaacPaul> Yea it's been there for a little bit
[23:53:42] <FromDiscord> <Yardanico> ah right found it
[23:53:57] <FromDiscord> <IsaacPaul> In reply to @PMunch "Oh hey everyone, look": ^
[23:54:07] <FromDiscord> <Yardanico> yeah, it won't get into top though
[23:54:16] <FromDiscord> <Yardanico> also upvotes from direct links are not counted by HN :)
[23:54:31] <FromDiscord> <Yardanico> so that's why you usually search the post yourself on the website and upvote
[23:58:08] <FromDiscord> <Rika> In reply to @tk "are sequences lazy?": no
[23:58:16] <FromDiscord> <Rika> In reply to @tk "like if I do": yes
[23:58:55] <FromDiscord> <Rika> In reply to @IsaacPaul "If takes an iterator": toSeq reads the whole iterator
