[00:14:46] <FromDiscord> <Elegantbeef> Hmm recruit i cannot reason my way around it right now
[00:14:47] <FromDiscord> <Elegantbeef> You can make a type class of any type you define
[00:14:47] <FromDiscord> <pedroos (Pedro Sobota)> @haxscramper\:matrix.org  as for defining a typeclass myself... is it just defining a 'either type', like done at the compiler? And is this done only with structures found at the compiler, or is it a language construct?
[00:14:48] <FromDiscord> <Elegantbeef> That's an implict generic typeclass of all YourType instantiations
[00:14:50] <FromDiscord> <Elegantbeef> But you can also do `string or float` if you want or whatever types you have at your disposal
[00:14:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yuJ
[00:18:24] <FromDiscord> <pedroos (Pedro Sobota)> Let me see.. this is like defining a method for any instance of YourType?
[00:19:20] <FromDiscord> <Elegantbeef> Yea
[00:19:26] <FromDiscord> <pedroos (Pedro Sobota)> I don't know if you mean the typeclass is in the T generic parameter
[00:19:44] <FromDiscord> <Elegantbeef> Well the typeclass here is that you can pass all instantiations of the YourType
[00:21:27] <FromDiscord> <Elegantbeef> Dont think this was linked so here https://nim-lang.org/docs/manual.html#generics-type-classes
[00:24:24] <FromDiscord> <pedroos (Pedro Sobota)> Oh I get it so it's like this A for A[T...], A[T] for A[T[T2...]]
[00:24:57] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[00:25:54] <FromDiscord> <Elegantbeef> Quite possibly if `...` means "any type" 😀
[00:28:13] <FromDiscord> <pedroos (Pedro Sobota)> Yes exactly that's what it means. Very fun...
[00:28:28] <FromDiscord> <Elegantbeef> To elaborate for fun https://play.nim-lang.org/#ix=3yuR
[00:30:51] <FromDiscord> <Elegantbeef> Generally speaking though `doStuff` should be `doStuff[T](yourtype: YourType[T])` if you actually use `T` since it's more ergonomic
[00:31:18] <FromDiscord> <pedroos (Pedro Sobota)> I see, the T is optional in this case...
[00:36:08] <FromDiscord> <pedroos (Pedro Sobota)> So typeclass is in the language but the tuple typeclass is in the compiler...
[00:36:45] <FromDiscord> <Elegantbeef> Yes, since tuples do not have a generic instantiation, they encompass a variety of tuples
[00:36:54] <FromDiscord> <Elegantbeef> same with `object`
[00:39:41] <FromDiscord> <pedroos (Pedro Sobota)> I don't get about 'generic instantiation'. Do you have any doc that explains this? Does this mean there is no specific Tuple[T] defined anywhere like in the base library?
[00:42:08] <FromDiscord> <Elegantbeef> A generic instantiation is like `YourType[float]` since tuples can be literally any size or types joined there needs to be compiler magic for a build in typeclass
[00:42:50] <FromDiscord> <Elegantbeef> There are no varadic generics(aside from tuples) in nim so you cannot do `YourType[int, int, float]` and `YourType[int]`
[00:42:51] <FromDiscord> <pedroos (Pedro Sobota)> I get if you have Tuple that can act as Tuple[T] then you basically don't need to define Tuple[T] (unless you want to make one type out of it). But then you don't need to define any generic type, right? Confusion for me as c# all generic types are exact\: A\<T\> != A != A\<T\<T2\>\> etc..
[00:43:37] <FromDiscord> <Gumber aka Zachary Carter> @enthus1ast sorry I forgot to thank you earlier when you made your suggestion - checking them out now
[00:43:57] <FromDiscord> <Elegantbeef> there is no `tuple[T]` since tuples can be any size/types
[00:44:13] <FromDiscord> <Elegantbeef> And as such there is not a single type that can represent `[T]` in the tuple
[00:44:54] <FromDiscord> <Elegantbeef> `proc something(t: tuple)` accepts any tuple, if you want to limit it to specific tuples you could do `(int, int) or (int, float)` instead of `tuple`
[00:49:02] <FromDiscord> <Elegantbeef> To clarify if it's an implicit type class no you do not need to specify a generic parameters unless you need those types
[00:50:08] <FromDiscord> <Elegantbeef> `assert @[10] is seq`  `assert @[10] is seq[int]` both pass for instance
[00:50:50] <FromDiscord> <Elegantbeef> the first is checking if it's of the seq typeclass, the second checks if it's of a specific instantiation
[00:52:01] <FromDiscord> <pedroos (Pedro Sobota)> Yes I didn't mean A[T, T2...] I meant A[T[T2...]] . So in Nim\: A works with 'is' operator for A[T], A[T] works for A[T[T2]], etc... and that's when you'd want/need to define A[T] for example (since A does not work for A[T[T]])
[00:54:11] <FromDiscord> <pedroos (Pedro Sobota)> Oh I get it so a type of a type class is an instantiation of it. I have a question, are all types instantiations of one of the typeclasses?
[01:10:47] <FromDiscord> <Elegantbeef> I dont quite get the question [pedroos (Pedro Sobota)](https://matrix.to/#/@pedroos-5d669684d73408ce4fc97911:gitter.im)
[01:15:57] <FromDiscord> <pedroos (Pedro Sobota)> I think I'll read up more @elegantbeef\:matrix.org , thanks for the links
[01:15:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:17:11] <FromDiscord> <aleclarson> is `{.inline.}` better than `template` in any way, or is it just less flexible?
[01:18:20] <FromDiscord> <Recruit_main707> there was a forum thread that explained the differences afaik
[01:21:18] <FromDiscord> <Recruit_main707> a template is literally placing its body wherever you call it basically, at nim compile time https://forum.nim-lang.org/t/3948
[01:21:53] <FromDiscord> <Recruit_main707> `{.iniline.}` is left for the c/c++ compiler to inline if it considers it optimal
[01:26:02] <FromDiscord> <aleclarson> interesting. good to know that `template` does not cache its arguments in the sense that `a + b` will run every time the template references it as an argument
[01:26:57] <FromDiscord> <aleclarson> now the question is, what's a situation where `template` is the better choice? seems like never
[01:27:14] <FromDiscord> <aleclarson> (edit) "now the question is, what's a situation where `template` is the better choice? seems like ... never" 03added "basically"
[01:28:32] <FromDiscord> <Recruit_main707> usually only when metaprogramming
[01:28:51] <FromDiscord> <Recruit_main707> they allow certain stuff inline procs wouldnt
[01:29:37] <FromDiscord> <Recruit_main707> basically, for inlining code, usually {.inline.} is the way to go
[01:33:59] <FromDiscord> <Gumber aka Zachary Carter> templates are akin to preprocessor macros in C/C++
[01:34:10] <FromDiscord> <Gumber aka Zachary Carter> I wouldn't use inline tbh
[01:34:17] <FromDiscord> <Gumber aka Zachary Carter> the C compiler might not respect it
[01:34:32] <FromDiscord> <Gumber aka Zachary Carter> I'd just invoke the C compiler with whatever optimization options you want
[01:34:37] <FromDiscord> <Gumber aka Zachary Carter> and let it do its thing
[01:34:48] <FromDiscord> <Recruit_main707> it usually does afaik
[01:34:49] <FromDiscord> <Gumber aka Zachary Carter> it's probably smarter than you regarding what needs to be inlined anyway
[01:35:01] <FromDiscord> <Recruit_main707> thats true
[01:35:19] <FromDiscord> <Recruit_main707> so its useful to use inline to let it choose then? :P
[01:35:30] <FromDiscord> <Gumber aka Zachary Carter> I just omit the inline pragma period
[01:35:47] <FromDiscord> <Gumber aka Zachary Carter> unless I'm really trying to hunt down some optimization issue
[01:36:01] <FromDiscord> <Gumber aka Zachary Carter> it's otherwise premature and might do more damage than good
[01:36:23] <FromDiscord> <Gumber aka Zachary Carter> unless you wrote the compiler and know what it's going to do
[01:36:38] <FromDiscord> <Gumber aka Zachary Carter> in this case both compilers 😄 since both perform optimization pases
[01:36:44] <FromDiscord> <Gumber aka Zachary Carter> (edit) "in this case both compilers 😄 since both ... performpasses" 03added "can" | "pases" => "passes"
[01:37:08] <FromDiscord> <aleclarson> hmm, i'm getting this when using `{.inline.}` after `not nil`↵> Invalid syntax. When used with a type, 'not' can be followed only by 'nil'
[01:37:33] <FromDiscord> <Gumber aka Zachary Carter> can you share your code
[01:38:06] <FromDiscord> <Gumber aka Zachary Carter> sounds like you're not using the pragma correctly
[01:38:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[01:38:56] <FromDiscord> <aleclarson> https://play.nim-lang.org/#ix=3yvg
[01:39:12] *** Joins: tiorock (~rc@192.12.112.227)
[01:39:12] *** Quits: tiorock (~rc@192.12.112.227) (Changing host)
[01:39:12] *** Joins: tiorock (~rc@user/rockcavera)
[01:39:12] *** rockcavera is now known as Guest4051
[01:39:12] *** Quits: Guest4051 (~rc@user/rockcavera) (Killed (cadmium.libera.chat (Nickname regained by services)))
[01:39:12] *** tiorock is now known as rockcavera
[01:39:26] <FromDiscord> <Gumber aka Zachary Carter> oh I dunno wtf this not nil thing is
[01:39:33] <FromDiscord> <Recruit_main707> that not nil is wrong
[01:39:35] <FromDiscord> <Gumber aka Zachary Carter> play with experimental features and expect broken stuff
[01:39:42] <FromDiscord> <Recruit_main707> what do you expect it to do?
[01:40:10] <FromDiscord> <aleclarson> In reply to @Recruit_main707 "that not nil is": ??
[01:40:32] <FromDiscord> <aleclarson> it's an inline proc that evaluates to a non-nil ref
[01:41:11] <FromDiscord> <Gumber aka Zachary Carter> you're not supposed to apply not nil to anything but types
[01:41:11] <FromDiscord> <Gumber aka Zachary Carter> sent a code paste, see https://play.nim-lang.org/#ix=3yvh
[01:41:18] <FromDiscord> <Gumber aka Zachary Carter> you're trying to apply it to a proc
[01:41:26] <FromDiscord> <Recruit_main707> well i was right, just for the wrong reason :p
[01:41:27] <FromDiscord> <aleclarson> no its being applied to the return type
[01:41:33] <FromDiscord> <Gumber aka Zachary Carter> no it's not
[01:41:39] <FromDiscord> <Gumber aka Zachary Carter> go read the documentation
[01:41:41] <FromDiscord> <Gumber aka Zachary Carter> you're doing it wrong
[01:41:42] <FromDiscord> <aleclarson> the fook
[01:41:43] <FromDiscord> <Recruit_main707> you need to do it in the type declaration
[01:42:03] <FromDiscord> <Recruit_main707> bruh
[01:42:06] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yvj
[01:42:18] <FromDiscord> <aleclarson> that's wacky af, but ok
[01:42:25] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yvk
[01:42:33] <FromDiscord> <fowl> Hey guys I have a buddy that does devops and he mentioned Nim to me, he really likes it. Finds it easy to use, he usually writes python. I tried to talk to him about the meta programming but unfortunately he didn’t know what that was. Everybody loves Nim 🙂 Thank you all
[01:42:54] <FromDiscord> <Gumber aka Zachary Carter> Weird
[01:42:55] <FromDiscord> <Recruit_main707> glad to hear :)
[01:42:56] <FromDiscord> <Gumber aka Zachary Carter> but okay
[01:43:04] <FromDiscord> <fowl> He’s going to lose his mind when I show him macros
[01:43:23] <FromDiscord> <Gumber aka Zachary Carter> macros aren't unique to Nim
[01:43:32] <FromDiscord> <Gumber aka Zachary Carter> but cool nonetheless
[01:43:41] <FromDiscord> <Gumber aka Zachary Carter> (edit) "nonetheless" => "none the less"
[01:45:06] <FromDiscord> <fowl> I’ve not seen them how they are in Nim, a compile time function you return ast from, and you have access to type info too. It’s bananas
[01:45:20] <FromDiscord> <Recruit_main707> sent a code paste, see https://play.nim-lang.org/#ix=3yvl
[01:45:29] <FromDiscord> <aleclarson> In reply to @Gumber "you're doing it wrong": i call baloney, then why does it work when i remove `{.inline.}`
[01:45:41] <FromDiscord> <Recruit_main707> should work
[01:45:52] <FromDiscord> <Gumber aka Zachary Carter> I don't know - I've never used `notnil` before
[01:45:57] <FromDiscord> <Gumber aka Zachary Carter> it's an experimental feature
[01:46:00] <FromDiscord> <aleclarson> lols
[01:46:04] <FromDiscord> <Skaruts> is there some way to create a type that is equivalent to every kind of `int` except `cint`?
[01:46:05] <FromDiscord> <Gumber aka Zachary Carter> and it sounds like it got that treatment because it was being deprecated
[01:46:09] <FromDiscord> <Gumber aka Zachary Carter> so why would I use it?
[01:46:28] <FromDiscord> <aleclarson> they better not deprecate it \:(
[01:46:29] <FromDiscord> <Recruit_main707> Skaruts, cint == int32
[01:46:39] <FromDiscord> <Gumber aka Zachary Carter> and why would you put it on the proc signature?
[01:46:46] <FromDiscord> <Gumber aka Zachary Carter> it doesn't even make logical sense to put it there
[01:46:54] <FromDiscord> <Gumber aka Zachary Carter> you're enforcing it on the type
[01:46:56] <FromDiscord> <aleclarson> it's saying the proc will never return nil
[01:47:00] <FromDiscord> <Gumber aka Zachary Carter> no it's not
[01:47:04] <FromDiscord> <Gumber aka Zachary Carter> read the docs lol
[01:47:18] <FromDiscord> <aleclarson> u don't even use it, that's exactly what it says xD
[01:47:34] <FromDiscord> <Gumber aka Zachary Carter> I know how to read documentation
[01:47:38] <FromDiscord> <Gumber aka Zachary Carter> apparently better than you...
[01:47:45] <FromDiscord> <Recruit_main707> calm down you two
[01:47:57] <FromDiscord> <Gumber aka Zachary Carter> I'm calm 🙂
[01:48:09] <FromDiscord> <aleclarson> you just assaulted me with words!
[01:48:11] <FromDiscord> <aleclarson> lol
[01:48:14] <FromDiscord> <Gumber aka Zachary Carter> happens
[01:48:23] <FromDiscord> <aleclarson> tru
[01:48:35] <FromDiscord> <Gumber aka Zachary Carter> sent a code paste, see https://play.nim-lang.org/#ix=
[01:48:36] <FromDiscord> <Gumber aka Zachary Carter> again
[01:48:42] <FromDiscord> <Gumber aka Zachary Carter> I'll leave it at that
[01:48:50] <FromDiscord> <Gumber aka Zachary Carter> types, not procedures
[01:49:10] <FromDiscord> <Skaruts> @Recruit_main707 thing is, I'm having to cast to cint a lot when using libraries, and I just need a template that takes any int and abstracts the casts. But if it's a cint I don't need the template
[01:49:10] <FromDiscord> <aleclarson> that doesn't prove your point. in my example, `not nil` is applied to the return type. it works when you remove `{.inline.}`
[01:49:16] <FromDiscord> <Gumber aka Zachary Carter> omg
[01:49:26] <FromDiscord> <Gumber aka Zachary Carter> the return type of a procedure is not a type
[01:49:37] <FromDiscord> <aleclarson> how?
[01:49:44] <FromDiscord> <Gumber aka Zachary Carter> none of the example code shows it being applied to a procedure
[01:49:51] <FromDiscord> <Gumber aka Zachary Carter> you can't just will the semantics of something to change because you think it should
[01:50:04] <FromDiscord> <aleclarson> then explain why it works without `{.inline.}`
[01:50:04] <FromDiscord> <Gumber aka Zachary Carter> it's designed to be applied to the type definition as it shows in the docs
[01:50:06] <FromDiscord> <Gumber aka Zachary Carter> and clearly states
[01:50:11] <FromDiscord> <Gumber aka Zachary Carter> it might compile
[01:50:13] <FromDiscord> <Gumber aka Zachary Carter> that doesn't mean it works
[01:50:21] <FromDiscord> <Gumber aka Zachary Carter> and regardless
[01:50:24] <FromDiscord> <Gumber aka Zachary Carter> what does that even mean?
[01:50:30] <FromDiscord> <Gumber aka Zachary Carter> that it only applies to the type when that one procedure is invoked?
[01:50:36] <FromDiscord> <aleclarson> yes
[01:50:38] <FromDiscord> <Gumber aka Zachary Carter> yeah, no
[01:50:58] <FromDiscord> <aleclarson> in some cases, the type can be nil, in others not
[01:50:59] <FromDiscord> <Gumber aka Zachary Carter> go look at the source if you want to know how it works
[01:51:08] <FromDiscord> <Gumber aka Zachary Carter> you obviously think I'm incorrect
[01:51:14] <FromDiscord> <Gumber aka Zachary Carter> and clearly you know it should work the way it should
[01:51:22] <FromDiscord> <aleclarson> i've used the feature \:)
[01:51:26] <FromDiscord> <Gumber aka Zachary Carter> cool
[01:51:44] <FromDiscord> <Gumber aka Zachary Carter> like what do you expect out of this - you're using an experimental feature in an undocumented way
[01:51:58] <FromDiscord> <Gumber aka Zachary Carter> and then complaining when it's combined with a pragma
[01:52:09] <FromDiscord> <Gumber aka Zachary Carter> that I already explained was probably not wise to use
[01:52:21] <FromDiscord> <aleclarson> i already said screw it, and took off the `{.inline.}` part \:P
[01:52:26] <FromDiscord> <Gumber aka Zachary Carter> okay then
[01:52:29] <FromDiscord> <Recruit_main707> In reply to @Skaruts "<@!386230567571554305> thing is, I'm": inothing will happen if you cast a cint to cint so you could ignore it.
[01:52:36] <FromDiscord> <aleclarson> i'm just trying to correct you, and it's not working D\:
[01:52:47] <FromDiscord> <Gumber aka Zachary Carter> yeah because I'm not convinced you know what you're talking about
[01:52:49] <FromDiscord> <Skaruts> the compiler ignore the cast?
[01:52:58] <FromDiscord> <Skaruts> ignores
[01:53:01] <FromDiscord> <aleclarson> where's elegantbeef when you need him
[01:53:34] <FromDiscord> <Recruit_main707> you are doint `cast[cint](number)`?
[01:53:35] <FromDiscord> <aleclarson> anyway, i'll let this go now \:P
[01:53:37] <FromDiscord> <Gumber aka Zachary Carter> the docs don't even specify how the thing works lol
[01:53:41] <FromDiscord> <Gumber aka Zachary Carter> not sure how you can be sure
[01:53:41] <FromDiscord> <aleclarson> true
[01:53:48] <FromDiscord> <Skaruts> no just `n.cint`
[01:54:04] <FromDiscord> <Recruit_main707> yes
[01:54:25] <FromDiscord> <Gumber aka Zachary Carter> you can use a converter
[01:54:52] <FromDiscord> <Gumber aka Zachary Carter> `converter toCint(x: int): cint = x.cint`
[01:54:53] <FromDiscord> <Recruit_main707> oh yeah thats very fitting for your usecase probably
[01:55:09] <FromDiscord> <Gumber aka Zachary Carter> you could even get rid of `int` and go with like `someinteger` or whatever the type is
[01:55:22] <FromDiscord> <Gumber aka Zachary Carter> but I'm not really sure why you need it - if you have the C signature as taking a cint
[01:55:34] <FromDiscord> <Gumber aka Zachary Carter> Nim I feel like is usually smart enough to generate code to coerce it to one
[01:55:40] <FromDiscord> <Skaruts> hmm, might be a good idea, I'll give it a try, it might be better than creating a template for every fnction that takes cint
[01:55:45] <FromDiscord> <Gumber aka Zachary Carter> you usually don't need an explicit coercion or cast
[01:55:52] <FromDiscord> <Gumber aka Zachary Carter> yeah definitely don't do that
[01:55:56] <FromDiscord> <Gumber aka Zachary Carter> that sounds ridiculous
[01:55:58] <FromDiscord> <Recruit_main707> i was trying to see if `SomeInteger and not cint` worked but the converter is better yes
[01:56:01] <FromDiscord> <Skaruts> yea I'm using SomeInterger in my templates
[01:56:11] <FromDiscord> <Gumber aka Zachary Carter> yeah you could use it in the converter tmk
[01:56:45] <FromDiscord> <Gumber aka Zachary Carter> but honestly I don't understand the need for any of it
[01:56:49] <FromDiscord> <Skaruts> I tried `type NotCint = SomeInteger and not cint` and it compiled, but then the compiler complained that cint != NotCint
[01:56:59] <FromDiscord> <Skaruts> anyway gonna try the converter
[01:57:35] <FromDiscord> <Skaruts> no, sorry, it complained that int literal != NotCint
[01:57:45] <FromDiscord> <Gumber aka Zachary Carter> I don't really use `int` that much unless I really need a hardware independent integer
[01:57:55] <FromDiscord> <Gumber aka Zachary Carter> and 64 bits is usually more than I need
[01:57:56] <FromDiscord> <Recruit_main707> it maybe gets confused because SomeInteger includes cint
[01:58:02] <FromDiscord> <Gumber aka Zachary Carter> oh
[01:58:05] <FromDiscord> <Gumber aka Zachary Carter> that could be it
[01:58:36] <FromDiscord> <Skaruts> I don't know any better, so I just use ints and floats almost everywhere
[01:58:43] <FromDiscord> <Gumber aka Zachary Carter> 😄
[01:58:53] <FromDiscord> <Gumber aka Zachary Carter> I mean that's most people
[01:58:59] <FromDiscord> <Gumber aka Zachary Carter> it doesn't matter most of the time
[01:59:16] *** Quits: max22- (~maxime@2a01cb08833598002b7e84d0aaf65199.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:59:24] <FromDiscord> <Skaruts> also because otherwise Nim complains and my brain explodes
[01:59:25] <FromDiscord> <Gumber aka Zachary Carter> only if you're working on resource constrained devices or in games or other software that needs to perform
[01:59:44] <FromDiscord> <Recruit_main707> then this worked for me so idk:↵`not SomeFloat and not string`
[01:59:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[02:00:20] <FromDiscord> <Recruit_main707> so i suggest you to use the converter and ignore the no-issue :p
[02:00:42] <FromDiscord> <Elegantbeef> I'm back bitches!
[02:00:54] <FromDiscord> <Recruit_main707> welcome back :)
[02:01:15] <FromDiscord> <Gumber aka Zachary Carter> wb
[02:01:23] <FromDiscord> <Elegantbeef> What was i needed for though?!
[02:01:25] <FromDiscord> <Gumber aka Zachary Carter> I'm about to go take an afternoon covid nap
[02:01:29] <FromDiscord> <Skaruts> right thanks guys
[02:01:38] <FromDiscord> <Recruit_main707> np
[02:01:45] <FromDiscord> <Gumber aka Zachary Carter> There was a discussion around the notnil experimental annotation
[02:01:54] <FromDiscord> <Gumber aka Zachary Carter> and whether it could be applied to a proc signature
[02:02:15] <FromDiscord> <Gumber aka Zachary Carter> can scroll up a bit if you care to read
[02:02:38] <FromDiscord> <aleclarson> specifically the return type of a proc
[02:02:50] <FromDiscord> <Gumber aka Zachary Carter> no not the return type of a proc
[02:02:53] <FromDiscord> <Gumber aka Zachary Carter> in the proc signature
[02:02:57] <FromDiscord> <Gumber aka Zachary Carter> next to the return type
[02:03:05] <FromDiscord> <Gumber aka Zachary Carter> not on the type definition, on the proc signature
[02:03:08] <FromDiscord> <Recruit_main707> it does seem to work as aleclarson expects without the pragma, but the docs do say what you say
[02:03:12] <FromDiscord> <aleclarson> being after the return type makes it part of the return type
[02:03:18] <FromDiscord> <Gumber aka Zachary Carter> that's not where the type is defined lol
[02:03:26] <FromDiscord> <aleclarson> it's where the return type is defined
[02:03:32] <FromDiscord> <Gumber aka Zachary Carter> sure for the procedure yes
[02:03:36] <FromDiscord> <aleclarson> right
[02:03:42] <FromDiscord> <Gumber aka Zachary Carter> yeah saying it's defined next to the return type
[02:03:51] <FromDiscord> <Gumber aka Zachary Carter> makes it sound to me, like it's defined on the type
[02:03:59] <FromDiscord> <Elegantbeef> Well i do think it makes sense it cannot be used with inline
[02:03:59] <FromDiscord> <Gumber aka Zachary Carter> if you omit the word procedure
[02:04:18] <FromDiscord> <Recruit_main707> enlighten us please
[02:04:20] <FromDiscord> <Gumber aka Zachary Carter> yes because it's code flow analssis which you're potentially changing
[02:04:23] <FromDiscord> <Gumber aka Zachary Carter> with the inline pragma
[02:04:28] <FromDiscord> <Gumber aka Zachary Carter> but regardless
[02:04:47] <FromDiscord> <Gumber aka Zachary Carter> still questioning whether it even works the way alec is trying to make it work
[02:04:51] <FromDiscord> <Gumber aka Zachary Carter> or whether it just compiles
[02:04:57] <FromDiscord> <Elegantbeef> Give me one second to see
[02:05:24] <FromDiscord> <Recruit_main707> In reply to @Gumber "still questioning whether it": it does
[02:05:25] <FromDiscord> <Gumber aka Zachary Carter> the docs don't say or give that as an example
[02:05:37] <FromDiscord> <Elegantbeef> It works with the concrete type,  with the `Type not nil` it doesnt since that's not how it's supposed to be used and also cause it is fucky logic
[02:05:51] <FromDiscord> <Gumber aka Zachary Carter> yeah exactly
[02:05:53] <FromDiscord> <aleclarson> not fucky at all
[02:06:03] <FromDiscord> <Jasmina Kiwi> Hello
[02:06:07] <FromDiscord> <Gumber aka Zachary Carter> oh concrete type
[02:06:10] <FromDiscord> <Elegantbeef> Well it's pretty fucky since you're type definition happens where the procedure is pasted in
[02:06:21] <FromDiscord> <Jasmina Kiwi> Umm
[02:06:30] <FromDiscord> <Elegantbeef> IE `type TestNoNil = Test not nil` gumber
[02:06:30] <FromDiscord> <Jasmina Kiwi> Whats this server
[02:06:40] <FromDiscord> <Elegantbeef> A server for the nim programming language
[02:07:01] <FromDiscord> <Jasmina Kiwi> .....
[02:07:03] <FromDiscord> <Jasmina Kiwi> Ok
[02:07:07] <FromDiscord> <Recruit_main707> its not easy to find by accident, is that why you are here?
[02:07:24] <FromDiscord> <Jasmina Kiwi> I honestly dk
[02:07:34] <FromDiscord> <Elegantbeef> I'd argue that you dont want to have to annotate `not nil` everywhere as such should just use the concrete type
[02:07:42] <FromDiscord> <Elegantbeef> Well now that you're here time to learn Nim 😛
[02:07:56] <FromDiscord> <aleclarson> a proc can guarantee a ref type is nil, even if the ref type can be nil in other unrelated procs
[02:08:11] <FromDiscord> <Jasmina Kiwi> Aha...
[02:08:14] <FromDiscord> <aleclarson> it would be weird to have `CollectionNotNil` when i can just do `Collection not nil`
[02:08:14] <FromDiscord> <Jasmina Kiwi> Well
[02:09:02] <FromDiscord> <Elegantbeef> I'd argue that `T not nil` should need to be converted to `T` explictly
[02:09:12] <FromDiscord> <Jasmina Kiwi> Idk whats umm language thingy ur  talking
[02:09:14] <FromDiscord> <Elegantbeef> And vice versa
[02:09:18] <FromDiscord> <Jasmina Kiwi> Im a medical student
[02:09:25] <FromDiscord> <Recruit_main707> programming language
[02:09:33] <FromDiscord> <Recruit_main707> how did you get here xD
[02:09:37] <FromDiscord> <Jasmina Kiwi> Idk
[02:09:48] <FromDiscord> <Elegantbeef> The thing that makes computers beep boop
[02:09:55] <FromDiscord> <Recruit_main707> lol
[02:09:56] <FromDiscord> <Jasmina Kiwi> I've been on this server for a while but didn't really talk
[02:10:07] <FromDiscord> <Jasmina Kiwi> It was on my servers
[02:10:11] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[02:10:17] <FromDiscord> <Jasmina Kiwi> I don't remember joining
[02:10:21] <FromDiscord> <Elegantbeef> The crown logo brings in everyone
[02:10:22] <FromDiscord> <Gumber aka Zachary Carter> https://nim-lang.org/
[02:10:26] <FromDiscord> <Gumber aka Zachary Carter> if this sounds exciting to you
[02:10:29] <FromDiscord> <Gumber aka Zachary Carter> you might be in the right place
[02:10:37] <FromDiscord> <Jasmina Kiwi> Only explanation is that bot
[02:10:37] <FromDiscord> <Recruit_main707> yeah i dont think she is into coding
[02:10:41] <FromDiscord> <aleclarson> @Jasmina Kiwi ur boyfriend probably playing a trick on you
[02:10:49] <FromDiscord> <Jasmina Kiwi> ......
[02:10:55] <FromDiscord> <Recruit_main707> bot?
[02:10:58] <FromDiscord> <Jasmina Kiwi> Ugh
[02:11:09] <FromDiscord> <Jasmina Kiwi> Well he's my ex
[02:11:10] <FromDiscord> <Elegantbeef> Me i am bot
[02:11:15] <FromDiscord> <Elegantbeef> Beep boop beep
[02:11:16] <FromDiscord> <Gumber aka Zachary Carter> Your ex  is a robot?
[02:11:20] <FromDiscord> <Jasmina Kiwi> What
[02:11:21] <FromDiscord> <Jasmina Kiwi> No
[02:11:31] <FromDiscord> <Jasmina Kiwi> U said my bf or something
[02:11:35] <FromDiscord> <Gumber aka Zachary Carter> nah that wasn't me
[02:11:40] <FromDiscord> <aleclarson> he probably hacked ur account
[02:11:42] <FromDiscord> <Gumber aka Zachary Carter> I don't assume things about people like that
[02:11:42] <FromDiscord> <Jasmina Kiwi> Wr broke up last month
[02:11:47] <FromDiscord> <Gumber aka Zachary Carter> okay let's not have this haha
[02:11:50] <FromDiscord> <Jasmina Kiwi> Anyways
[02:11:53] <FromDiscord> <Jasmina Kiwi> No
[02:11:54] <FromDiscord> <Gumber aka Zachary Carter> there's an #offtopic channel if you all want to discuss that
[02:11:55] <FromDiscord> <Recruit_main707> lets go back to the point
[02:12:06] <FromDiscord> <Jasmina Kiwi> A bot called epic giveaways
[02:12:15] <FromDiscord> <Jasmina Kiwi> It adds you to servers
[02:12:19] <FromDiscord> <Jasmina Kiwi> Automatically
[02:12:23] <FromDiscord> <Gumber aka Zachary Carter> oh yes, we've had spam bots
[02:12:27] <FromDiscord> <Jasmina Kiwi> Im assuming thats what happened
[02:12:30] <FromDiscord> <Gumber aka Zachary Carter> probably
[02:12:41] <FromDiscord> <Gumber aka Zachary Carter> yeah I mean it's a programming language / software development discord server
[02:12:50] <FromDiscord> <Gumber aka Zachary Carter> so people make apps, games, web applications, etc... using this language
[02:12:53] <FromDiscord> <Gumber aka Zachary Carter> among other things
[02:13:19] <FromDiscord> <Jasmina Kiwi> Hmm my job is to open up people and fix them
[02:13:30] <FromDiscord> <Gumber aka Zachary Carter> yeah, quite a different set of skills required there
[02:13:39] <FromDiscord> <Jasmina Kiwi> Ahahah.....
[02:13:44] <FromDiscord> <Gumber aka Zachary Carter> you maybe could make a new surgeon simulator with Nim if you wanted to
[02:13:48] <FromDiscord> <Gumber aka Zachary Carter> and practice
[02:13:57] <FromDiscord> <Gumber aka Zachary Carter> but uh, beyond that I'm not sure it would be of much use to someone in your profession
[02:14:01] <FromDiscord> <Jasmina Kiwi> That would take years
[02:14:03] <FromDiscord> <Recruit_main707> leave the poor frogs alone
[02:14:07] <FromDiscord> <Gumber aka Zachary Carter> 😄
[02:14:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:14:14] <FromDiscord> <Jasmina Kiwi> I Don't know anything about coding
[02:14:21] <FromDiscord> <Gumber aka Zachary Carter> it's okay, I don't know anything about surgery
[02:14:25] <FromDiscord> <reilly> Well there's one way to find out ;)
[02:14:29] <FromDiscord> <Elegantbeef> Anywho alec the issue is the pragma is getting attached to some part of the `not nil` part
[02:14:40] <FromDiscord> <Elegantbeef> Programming isnt brain surgery so that's a plus
[02:14:57] <FromDiscord> <Jasmina Kiwi> Well
[02:15:08] <FromDiscord> <Recruit_main707> yeah, @Jasmina Kiwi if you want to keep talking lets move to #offtopic, but if you are gonna leave, then bye :)
[02:15:21] <FromDiscord> <Jasmina Kiwi> Tell me something interesting about your feild
[02:15:40] <FromDiscord> <Jasmina Kiwi> If you'd like i can tell u interesting facts about yourself or your body
[02:15:52] <FromDiscord> <Gumber aka Zachary Carter> prob better a topic suited for #offtopic
[02:15:59] <FromDiscord> <Jasmina Kiwi> Ok
[02:16:02] <FromDiscord> <Gumber aka Zachary Carter> we like to keep this focused on questions / discussions of the language
[02:16:07] <FromDiscord> <Gumber aka Zachary Carter> and software development in general
[02:16:10] <FromDiscord> <Gumber aka Zachary Carter> if possible
[02:16:15] <FromDiscord> <Gumber aka Zachary Carter> (edit) "if ... possible" 03added "and when"
[02:16:16] <FromDiscord> <Jasmina Kiwi> But first tell me interesting stuff about software things
[02:16:19] <FromDiscord> <aleclarson> In reply to @Elegantbeef "Anywho alec the issue": seems like a bug then
[02:17:44] <FromDiscord> <Elegantbeef> Well i dont think notnil is meant for anywhere but type defs so it's just luck that it works for a parameter
[02:17:59] <FromDiscord> <Elegantbeef> I personally dont see the point of only partially using it
[02:18:50] <FromDiscord> <Skaruts> is there a `SomeString` type in nim?
[02:19:11] <FromDiscord> <Elegantbeef> What's that supposed to mean?
[02:19:17] <FromDiscord> <Skaruts> string or cstring
[02:19:27] <FromDiscord> <Elegantbeef> Well you just wrote it
[02:19:37] <FromDiscord> <Elegantbeef> `type SomeString = cstring or string` 😛
[02:19:49] <FromDiscord> <Skaruts> yup, but was just wondering if it existed with some other name
[02:20:21] <FromDiscord> <Elegantbeef> So alec since 1.6 is soonTM i'd just suggest using strict not nil as it has better features and you can do `--warningAsError:strictNotNil`
[02:20:24] <FromDiscord> <Elegantbeef> https://nim-lang.github.io/Nim/manual_experimental_strictnotnil.html look at the features 😜
[02:23:07] <FromDiscord> <aleclarson> i don't really need that level of type safety. will that be the default behavior at some point?
[02:23:21] <FromDiscord> <Elegantbeef> It's desired eventually
[02:23:30] <FromDiscord> <aleclarson> that's one thing i like about Objective-C. how nilability is implicit
[02:23:59] <FromDiscord> <aleclarson> u can even send messages to nil and it won't crash \:)
[02:25:16] <FromDiscord> <Elegantbeef> Well you can always use wrapnils to make some easy nim management
[02:26:06] <FromDiscord> <aleclarson> interesting
[02:27:25] <FromDiscord> <Elegantbeef> I meant nil but wrote nim, so that's my life
[02:29:13] <FromDiscord> <aleclarson> tomato tomato
[02:30:02] *** Joins: marek (~marek@213.57.103.186)
[02:33:58] *** Quits: marek (~marek@213.57.103.186) (Client Quit)
[02:36:58] <FromDiscord> <Recruit_main707> can you predeclare a type?
[02:38:30] <FromDiscord> <Elegantbeef> In what way?
[02:41:00] <FromDiscord> <Recruit_main707> well, i have a bunch of types i need to export↵then some emitted c++ code that uses those types↵then another type that needs the emitted c++ code but its also needed by the first bunch of types
[02:47:52] *** Quits: mdbauman__ (~mdbauman@2600:1700:7e60:f7c0:588:7c66:49fc:718a) (Read error: Connection reset by peer)
[02:49:23] <FromDiscord> <JSONBash> should https://nim-lang.github.io/Nim/channels_builtin.html have a code example at the top?
[02:53:01] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[02:53:46] <FromDiscord> <Elegantbeef> @JSONBash\: yes https://github.com/nim-lang/Nim/blob/devel/lib/system/channels_builtin.nim#L29
[02:58:20] *** Joins: vicfred (~vicfred@user/vicfred)
[03:12:12] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[03:46:52] *** Joins: audiophile_ (~audiophil@user/audiophile)
[03:49:24] <FromDiscord> <JSONBash> In reply to @Elegantbeef "<@245741179721744395>\: yes https://github.com/nim-": That works, thanks!
[03:59:45] *** Quits: audiophile_ (~audiophil@user/audiophile) (Ping timeout: 260 seconds)
[04:43:16] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:46:15] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[04:48:22] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Excess Flood)
[04:50:06] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[04:54:00] <FromDiscord> <Varriount> Zevv: How difficult would it be to add an extendable optimizer to NPeg?
[04:54:53] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[04:55:40] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[04:57:09] *** Gustavo6046_ is now known as Gustavo6046
[04:57:11] <FromDiscord> <Varriount> In particular, an optimizer for deduplicating alternations with choices that share common starting/ending patterns.
[04:58:37] <FromDiscord> <Varriount> For example, `(start_one  start_two  middle_ONE  end_one  end_two) | (start_one  start_two  middle_TWO  end_one  end_two)`
[05:00:13] <FromDiscord> <Varriount> While I can hand-optimize rules like these, I do have to admit that the unoptimized form is more readable. And it's how the PostgreSQL grammar is structured.
[05:02:47] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:10:55] *** Joins: neurocyte (~neurocyte@195.80.55.123)
[05:10:55] *** Quits: neurocyte (~neurocyte@195.80.55.123) (Changing host)
[05:10:55] *** Joins: neurocyte (~neurocyte@user/neurocyte)
[05:26:34] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[05:27:29] *** Joins: xet7 (~xet7@user/xet7)
[05:39:22] <FromDiscord> <cabboose> In reply to @Jasmina Kiwi "If you'd like i": You must be a first year student to be cocky enough to throw around being a med student to people who are probably a lot “smarter” than you lol
[05:42:21] <FromDiscord> <cabboose> Also thanks leno for the heads up on the devel break of cps; I’ll keep an eye on it 🙂
[05:42:51] <FromDiscord> <Elegantbeef> I mean they were talking to me so dont overstate it↵(@cabboose)
[05:45:28] <FromDiscord> <cabboose> Well medical students will never be as cocky as beef
[05:46:55] <FromDiscord> <cabboose> Wait you are self deprecating
[05:46:56] <FromDiscord> <cabboose> awwww
[05:46:57] <FromDiscord> <Elegantbeef> Hey i was saying the exact opposite
[05:47:00] <FromDiscord> <cabboose> cute
[05:47:03] <FromDiscord> <Elegantbeef> Indeed
[05:47:09] <FromDiscord> <cabboose> i dont buy it
[06:00:49] <FromDiscord> <xflywind> In reply to @JSONBash "should https://nim-lang.github.io/Nim/channels_buil": It seems that docs gen becomes more strict. https://github.com/nim-lang/Nim/commit/6c2f041368e36bb7a6b217c7ac0c5de94c7b4a7a
[06:02:01] *** Joins: neurocyte1 (~neurocyte@94.46.86.84)
[06:02:01] *** Quits: neurocyte1 (~neurocyte@94.46.86.84) (Changing host)
[06:02:01] *** Joins: neurocyte1 (~neurocyte@user/neurocyte)
[06:04:34] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[06:04:34] *** neurocyte1 is now known as neurocyte
[06:19:49] <FromDiscord> <cabboose> ok this might be a dumb question but with the new nimble what is the equivalent to previously just running `nimble develop` to create a link to a module
[06:20:28] <FromDiscord> <cabboose> because running that with devel nim doesn't function the same as it did before as far as i can see
[06:20:53] <FromDiscord> <cabboose> at least not with the most recent cps repo
[06:21:19] <FromDiscord> <Elegantbeef> https://forum.nim-lang.org/t/8404#54212
[06:21:35] <FromDiscord> <cabboose> cheers big ears
[06:25:23] <FromDiscord> <cabboose> aw shit how did I miss all this 1.6 chatter
[06:25:27] <FromDiscord> <cabboose> golden
[06:26:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[06:44:55] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:46:41] <FromDiscord> <cabboose> so although nim --version on devel still shows 1.5.1 this would be the 1.6 branch no?
[06:47:06] <FromDiscord> <cabboose> or do i need to explicitly use `choosenim '#version-1-6'` (which would fail with koch build error)
[06:47:37] <FromDiscord> <Elegantbeef> Devel is ahead of 1.6's RC afaik
[06:47:48] <FromDiscord> <cabboose> that's fine
[06:47:48] <FromDiscord> <cabboose> cool
[06:47:52] <FromDiscord> <cabboose> cheerio
[06:48:51] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:48:14] <FromDiscord> <aleclarson> do you guys always add `()` when using `options.get`? it looks kinda weird without them, like i'm referencing a proc property or smth
[07:48:52] <FromDiscord> <aleclarson> `foo.get` vs `foo.get()`
[07:49:13] <FromDiscord> <aleclarson> i suppose there's `get foo` too
[07:49:44] <nrds> <06Prestige99> I add `()`
[07:49:50] <nrds> <06Prestige99> but it's a choice
[07:51:07] <FromDiscord> <aleclarson> i think `get foo` reads best
[07:51:24] <FromDiscord> <cabboose> Yeah but if using method syntax adding the () is best
[07:58:18] <FromDiscord> <aleclarson> i thought `seq` was copy on assign. is this not true for parameters?
[07:59:16] <FromDiscord> <cabboose> I think the compiler chucks in sinks where it can
[07:59:43] <FromDiscord> <cabboose> I'm not sure how good it as at it though
[08:00:19] <FromDiscord> <aleclarson> how do i force a copy of a `seq`?
[08:00:31] <FromDiscord> <cabboose> deepcopy?
[08:01:27] <FromDiscord> <cabboose> oh for a proc though
[08:01:41] <FromDiscord> <Elegantbeef> Well you can not mutate parameters that are not passed as `var`
[08:01:59] <FromDiscord> <Elegantbeef> to copy a seq you just do `var a = yourSeq`
[08:04:19] <FromDiscord> <aleclarson> In reply to @Elegantbeef "to copy a seq": didn't seem to work
[08:04:44] <FromDiscord> <aleclarson> strange thing is, i can't reproduce in playground
[08:05:13] <FromDiscord> <aleclarson> does nim do strange things with tail calls?
[08:05:30] <FromDiscord> <aleclarson> oh, maybe `finally` runs before `except`?
[08:05:52] <FromDiscord> <Elegantbeef> No finally runs after except
[08:05:58] <FromDiscord> <cabboose> Link play dawg
[08:06:35] <FromDiscord> <aleclarson> In reply to @cabboose "Link play dawg": i would if i could reproduce the issue
[08:06:37] <FromDiscord> <cabboose> Except what?
[08:06:54] <FromDiscord> <Elegantbeef> Lol
[08:06:58] <FromDiscord> <cabboose> Ah yeah sorry didn’t see that
[08:09:08] <FromDiscord> <cabboose> I’m too used to using objects I didn’t consider seqs as just being GCd not refs
[08:09:17] <FromDiscord> <cabboose> I’m a monkey anyway
[08:09:26] <FromDiscord> <cabboose> I’m just here to spite beef
[08:24:40] <FromDiscord> <JSONBash> In reply to @flywind "It seems that docs": Cool you got it going so fast!
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[08:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:42:13] <FromDiscord> <aleclarson> kinda bummed that `defer` runs at end of `if` block so i can't deduplicate the condition \:(
[08:42:25] <FromDiscord> <Elegantbeef> What?
[08:43:01] <FromDiscord> <aleclarson> sent a code paste, see https://play.nim-lang.org/#ix=3ywF
[08:43:35] <FromDiscord> <Elegantbeef> That's what one would expect
[08:44:19] <FromDiscord> <Elegantbeef> I dont get what "Deduplicate" means in this context though
[08:45:09] <FromDiscord> <aleclarson> sent a code paste, see https://paste.rs/C7U
[08:45:15] <FromDiscord> <aleclarson> assuming there's more stuff after the `if` block that i want done before `undoStuff` runs
[08:47:16] <FromDiscord> <cabboose> Yeah that's what defer should do though
[08:49:03] <FromDiscord> <cabboose> I see what you are lookin for tho
[08:49:51] <FromDiscord> <cabboose> I just started playing with cps
[08:50:07] <FromDiscord> <cabboose> and that can literally provide that functionality lol
[08:50:16] <FromDiscord> <Elegantbeef> Yea i was going to say CPS could do it
[08:50:23] <FromDiscord> <Elegantbeef> Otherwise you can just use a bool
[08:52:26] <FromDiscord> <cabboose> if you look into cps though you'll need to use arc/orc
[08:52:29] <FromDiscord> <cabboose> which is not a bad thing at all
[08:52:55] <FromDiscord> <cabboose> but some libraries are not up to date with being compatible with arc/orc
[08:54:03] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ywG
[08:54:20] <FromDiscord> <Elegantbeef> maybe without the message inside the code block 😀
[08:59:54] <FromDiscord> <cabboose> sent a code paste, see https://play.nim-lang.org/#ix=3ywI
[08:59:54] <FromDiscord> <Elegantbeef> Maybe if it was formatted properly
[08:59:54] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3ywH this would though
[08:59:54] <FromDiscord> <Elegantbeef> Not that it's any more readable
[08:59:54] <FromDiscord> <Elegantbeef> Actually we can do this better
[08:59:56] <FromDiscord> <cabboose> you're about to get beefd @aleclarson
[09:00:20] <FromDiscord> <Elegantbeef> Well not that much better 😀
[09:00:33] <FromDiscord> <cabboose> `raise Defect(nil)`
[09:01:22] <FromDiscord> <Elegantbeef> Metaprogramming not even once https://play.nim-lang.org/#ix=3ywK
[09:02:01] <FromDiscord> <aleclarson> what's that, i think the playground is saying something... "kill... me... please"
[09:02:26] <FromDiscord> <Elegantbeef> Big code block 😀
[09:02:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ywL
[09:02:53] <FromDiscord> <cabboose> now matrix want to die
[09:03:15] <FromDiscord> <Elegantbeef> Now in hindsight i think you were just joking about the code 😀
[09:04:06] <FromDiscord> <Elegantbeef> But hey it's like your desired defer so take that
[09:04:15] <FromDiscord> <aleclarson> think i'll just fork nim instead, thx
[09:04:18] <FromDiscord> <aleclarson> \:)
[09:04:29] <FromDiscord> <Elegantbeef> Have fun
[09:04:36] <FromDiscord> <cabboose> I don't even think the resetCond is necessary
[09:04:59] <FromDiscord> <Elegantbeef> It's not if you want to call `doReset` and `dontReset` often
[09:05:12] <FromDiscord> <aleclarson> im jk, i'll just do it the ol fashioned way
[09:05:14] <FromDiscord> <aleclarson> as god intended
[09:05:17] <FromDiscord> <cabboose> just make it DNR() instead
[09:05:21] <FromDiscord> <cabboose> (do not resuscitate)
[09:05:36] <FromDiscord> <Elegantbeef> the old fashioned way is what?
[09:05:47] <FromDiscord> <cabboose> `raise Defect(nil)`
[09:05:57] <FromDiscord> <Elegantbeef> Having a comment that says  `#dont move this code`?
[09:06:36] <FromDiscord> <aleclarson> duplicate the `if` condition, and add a test case (jk i don't write tests)
[09:08:05] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:08:46] <FromDiscord> <aleclarson> i made a deal with the devil that he'll test my spaghetti and i'll `raise Defect(nil)` in return
[09:10:51] <FromDiscord> <cabboose> why metaprogram when you can metajoke
[09:14:52] <FromDiscord> <aleclarson> that or metaphysics, and im not really in the mood for an existential crisis. maybe in them orning
[09:14:56] <FromDiscord> <aleclarson> (edit) "them orning" => "the morning"
[09:16:50] <FromDiscord> <aleclarson> what's the difference between `name` and `msg` in Exception type?
[09:18:21] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#Exception
[09:19:30] <FromDiscord> <cabboose> Recommond the DevDocs extension on vscode if you use vscode, quick access to docs that can be cached for offline use too
[09:19:54] <FromDiscord> <aleclarson> so `name` equals `"Defect"` if i `raise newException(Defect, "blah")`?
[09:21:17] <FromDiscord> <cabboose> so you can just highlight Exception and run the command to see the documentation for it
[09:21:30] <FromDiscord> <cabboose> From my understanding yes
[09:21:32] <FromDiscord> <Elegantbeef> It should
[09:51:13] *** Joins: neocron (~NeoCron@p200300c4cf3ba70012c3036b63257be6.dip0.t-ipconnect.de)
[09:53:46] *** Quits: Doraemon (~NeoCron@p200300c4cf1c7e009d03f50373ebe753.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:32:02] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yx7
[10:32:36] <FromDiscord> <Elegantbeef> That does compile
[10:33:33] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3yx8
[10:33:44] <FromDiscord> <impbox [ftsf]> uhh, hold on, just realised my nim version is 1.0 on this laptop
[10:34:09] <FromDiscord> <Elegantbeef> Ah that's before typedef macros were added
[10:36:59] <FromDiscord> <impbox [ftsf]> \o/
[10:37:52] <FromDiscord> <Elegantbeef> Assuming you looked at my code the benefit of `static` is you dont get an AST you get the value as is
[10:42:17] <FromDiscord> <treeform> In reply to @cabboose "not unless you specifically": its not a `jsony` bug right?
[10:44:00] <FromDiscord> <treeform> In reply to @arkanoid "yeah! thanks treeform": you welcome
[10:49:44] <FromDiscord> <impbox [ftsf]> ahh dang, i can only edit the typedef, i can't add extra stuff after it like procs using that type
[10:51:15] <FromDiscord> <Elegantbeef> Nah there is a RFC for typesection macros though but yea nothing presently implemented to do as such you need to make your own typedef macro
[10:51:17] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yxi
[11:01:46] <FromDiscord> <impbox [ftsf]> gotcha
[11:01:50] <FromDiscord> <impbox [ftsf]> that rfc sounds nice
[11:02:05] <FromDiscord> <impbox [ftsf]> though i'm not sure if it would allow this
[11:04:46] <FromDiscord> <Elegantbeef> Ah not a RFC i guess it's a issue https://github.com/nim-lang/Nim/issues/13830
[11:05:29] <FromDiscord> <impbox [ftsf]> ayup that's what i was looking at
[11:06:59] <FromDiscord> <Elegantbeef> The best way to do what you want to do is to make a template(I seen the forum post)
[11:07:38] <FromDiscord> <impbox [ftsf]> yeah, the template was easy
[11:07:45] <FromDiscord> <impbox [ftsf]> but making it look nice >_>
[11:07:53] <FromDiscord> <Hamid Bluri> https://github.com/alaviss/union↵↵i cant get it
[11:08:51] <FromDiscord> <Hamid Bluri> what does this package do ?
[11:09:14] <FromDiscord> <Elegantbeef> It creates anonymous union values
[11:09:57] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3yxo what's wrong with this imp
[11:10:38] <FromDiscord> <impbox [ftsf]> yeah pretty much what i was doing
[11:10:59] <FromDiscord> <impbox [ftsf]> was just hoping i could keep it tied to the type
[11:11:04] <FromDiscord> <Elegantbeef> Ah
[11:11:07] <FromDiscord> <impbox [ftsf]> rather than having to add it as an extra thing afterwards
[11:11:14] <FromDiscord> <Hamid Bluri> In reply to @Elegantbeef "It creates anonymous union": use case?
[11:11:34] <FromDiscord> <Elegantbeef> Having a variable that can hold a specified variety of types without making a tagged union
[11:12:16] <FromDiscord> <Hamid Bluri> ok, thanks
[11:13:16] <FromDiscord> <Elegantbeef> Yea aside from your own typesection operating macro you cannot do that sadly imp
[11:15:21] <FromDiscord> <Elegantbeef> Still thinking if there is some way one can abuse other features to get it
[11:17:06] <FromDiscord> <impbox [ftsf]> time to learn how to break nim internally!
[11:17:50] <FromDiscord> <impbox [ftsf]> sounds like a fun challenge during post-vax delirium
[11:48:22] <FromDiscord> <Elegantbeef> I've got half of it done with a term rewriting macro, the fun part is trying to make it call the emitted code ;D
[11:49:33] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yxu
[11:50:04] <FromDiscord> <haxscramper> sent a code paste, see https://paste.rs/xGV
[11:50:24] <FromDiscord> <haxscramper> This is a bug, that is supposed to work
[11:56:09] <FromDiscord> <impbox [ftsf]> is there a way to make quote do not add gensym?
[11:56:30] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=
[11:56:32] <FromDiscord> <Elegantbeef> think genast from devel solves issues like that iirc
[12:09:27] <FromDiscord> <Elegantbeef> @impbox [ftsf]\: doesnt work with stable but works on devel https://play.nim-lang.org/#ix=3yxA
[12:09:50] <FromDiscord> <Elegantbeef> image.png https://media.discordapp.net/attachments/371759389889003532/886154049911676928/image.png
[12:09:51] <FromDiscord> <Elegantbeef> Lovely output
[12:09:58] <FromDiscord> <impbox [ftsf]> wow magic
[12:10:14] <FromDiscord> <Elegantbeef> term rewriting macros are magic indeed
[12:10:48] <FromDiscord> <Elegantbeef> You can basically do your own post semantic passes if you can use your noggin, though it can be rather confusing
[12:11:04] <FromDiscord> <impbox [ftsf]> _reads up on them_
[12:11:16] <FromDiscord> <Elegantbeef> Heavily abusing them here, they're typically for making optimizations not for making a whole new variety of macros
[12:11:22] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/manual_experimental.html#term-rewriting-macros well read up
[12:11:37] <FromDiscord> <Elegantbeef> They're basically macros that apply after semantic passing and have a pattern
[12:14:49] <FromDiscord> <Elegantbeef> The biggest issue with that impl is that any`serialize(x)` call gets converted to `doSerialize(x)`
[12:17:06] <FromDiscord> <impbox [ftsf]> pretty impressive you can do such crazy stuff though, kinda hard to follow
[12:18:38] <FromDiscord> <Elegantbeef> I'm surprised it actually sorta works
[12:20:44] *** Joins: max22- (~maxime@2a01cb088335980070405fe723f8a657.ipv6.abo.wanadoo.fr)
[12:48:45] <FromDiscord> <Jasmina Kiwi> In reply to @cabboose "You must be a": I never said im smarter than anyone nor was i cocky and no im a 3rd year med student and i just asked for info and i suggested i can say a few things in return if they wanted
[12:52:42] <FromDiscord> <cabboose> I can smell the elitism from here; I do apologise for my lash out, my meds hadn't kicked in yet and I was a grumpy man
[12:52:50] <FromDiscord> <cabboose> I have a massive aversion to medical students and drs
[12:52:59] <FromDiscord> <cabboose> arrogant until proven otherwise
[12:53:55] <FromDiscord> <cabboose> However trust me when I say the things that these people do is way beyond the scope of difficulty compared to medicine
[12:54:22] <FromDiscord> <impbox [ftsf]> #offtopic pls if you must
[12:54:33] <FromDiscord> <cabboose> fair
[12:54:36] <FromDiscord> <impbox [ftsf]> or better yet not at all
[12:55:09] <FromDiscord> <cabboose> yis I am sorry
[12:55:13] <FromDiscord> <cabboose> that is all
[12:55:25] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[13:00:37] <FromDiscord> <Rika> Woah hella drama
[13:04:59] <FromDiscord> <cabboose> image.png https://media.discordapp.net/attachments/371759389889003532/886167927890513940/image.png
[13:22:46] <FromDiscord> <gogolxdong (liuxiaodong)> What's the max length allocation of an array , like array[1 shl 32, uint32]?
[13:24:11] <FromDiscord> <Elegantbeef> I feel like the max size is more of "How big and fast is your swap"
[13:25:08] <FromDiscord> <Rika> No it’s limited by stack size I would believe
[13:47:17] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:55:33] <FromDiscord> <Varriount> Anyone know how I would begin to debug a Nim program that makes the C compiler use up all my computer's memory?
[13:55:54] <FromDiscord> <Varriount> (16 GiB)
[13:57:20] <FromDiscord> <impbox [ftsf]> cut it in half and test both halves
[13:58:22] <FromDiscord> <impbox [ftsf]> try a different c compiler
[14:06:26] <FromDiscord> <impbox [ftsf]> whoa. super odd behaviour... generating a proc but the output tree is rearranged =\
[14:07:01] <FromDiscord> <impbox [ftsf]> https://play.nim-lang.org/#ix=3yy0 swaps the order of the last two statements, puts the return before the call to deserialize
[14:16:37] <FromDiscord> <impbox [ftsf]> seems to be caused by using `&` in `newIdentNode`
[14:18:18] *** Quits: max22- (~maxime@2a01cb088335980070405fe723f8a657.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[14:19:03] *** Joins: max22- (~maxime@2a01cb0883359800e9777d123123e3c6.ipv6.abo.wanadoo.fr)
[14:24:44] <FromDiscord> <impbox [ftsf]> woo got it working, can now serialize and deserialize a seq of objects with a common base type
[14:35:02] <FromDiscord> <levovix> is there a way to store a `proc() {.closure.}` in `seq[byte]`?
[14:38:04] <FromDiscord> <impbox [ftsf]> pretty sure that's possible, it's just a pointer
[14:38:23] <FromDiscord> <impbox [ftsf]> so you'd be storing the address of the proc as bytes
[14:49:16] *** Joins: Zevv (~Zevvvvv@185.238.131.12)
[14:51:00] <FromDiscord> <impbox [ftsf]> (probably not a great idea though) why?
[14:55:55] <FromDiscord> <levovix> I need to make a universal dynamic type, I wanted to store a nim function there
[14:56:36] <FromDiscord> <impbox [ftsf]> why not use a `seq[proc() {.closure.}]` ?
[14:57:46] <FromDiscord> <levovix> because i also need to store other types
[14:58:20] <FromDiscord> <demotomohiro> https://nim-lang.org/docs/system.html#rawEnv%2CT↵https://nim-lang.org/docs/system.html#rawProc%2CT
[14:58:50] <FromDiscord> <demotomohiro> I think such idea would make your program less type safe.
[15:02:03] <FromDiscord> <demotomohiro> You might accidentally read bytes as float that you wrote as int.↵And there is no safety guards to prevent such error.
[15:50:27] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[15:50:51] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:31:40] *** Quits: max22- (~maxime@2a01cb0883359800e9777d123123e3c6.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2.1)
[16:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:45:04] <FromDiscord> <auxym> so, nested macros/templates: the inner one is expanded first, and the resulting AST is passed to the outer one, right?
[16:45:10] <FromDiscord> <haxscramper> In reply to @levovix "is there a way": https://nim-lang.org/docs/system.html#rawProc%2CT
[16:46:29] <FromDiscord> <haxscramper> In reply to @levovix "is there a way": https://github.com/haxscramper/hmisc/blob/master/src/hmisc/algo/procbox.nim
[16:51:05] *** Joins: arkurious (~arkurious@user/arkurious)
[16:51:59] <FromDiscord> <auxym> I'm trying to create a macro that creates a whole bunch of `... == ...` expressions, to be called inside unittest's `check` macro, but I get a compile time error: `Error: expression 'cast[int](PORT.DIRCLR0.p) == 1090536452' is of type 'bool' and has to be used (or discarded)`
[16:52:25] <FromDiscord> <haxscramper> In reply to @auxym "so, nested macros/templates: the": https://forum.nim-lang.org/t/8357#53872
[16:53:55] <FromDiscord> <haxscramper> In reply to @auxym "I'm trying to create": 'check' is an untyped macro, it does some transformations of the passed arguments
[16:54:12] <FromDiscord> <auxym> I see, thanks, so I might have to roll my own "check" that takes `typed`, or just fall back to plain `doAssert`s
[16:54:13] <FromDiscord> <haxscramper> Your macro is evaluated after checks is executed, not before
[16:54:28] <FromDiscord> <auxym> got it
[16:54:46] <FromDiscord> <auxym> so asserts it is for now
[17:26:25] *** Joins: max22- (~maxime@2a01cb08833598008c4acb2145aa7027.ipv6.abo.wanadoo.fr)
[17:57:30] <NimEventer> New thread by Alexeypetrushin: Is it possible to tell `import` to not create const with same name as imported module?, see https://forum.nim-lang.org/t/8413
[18:04:05] *** Quits: max22- (~maxime@2a01cb08833598008c4acb2145aa7027.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:04:34] *** Joins: max22- (~maxime@2a01cb08833598008c4acb2145aa7027.ipv6.abo.wanadoo.fr)
[18:05:27] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[18:14:20] *** Quits: max22- (~maxime@2a01cb08833598008c4acb2145aa7027.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[18:15:02] <FromDiscord> <Kiloneie> When having a huge object that needs to be passed around, the best way to do it would be to make it a reference object right ?↵↵And if one has loads of tiny objects to be passed around, one would make the normal/plain objects ? Say a sequence to store a game's bullets ?
[18:15:35] <FromDiscord> <Yardanico> In reply to @Kiloneie "When having a huge": > the best way to do it would be to make it a reference object right ?↵no, nim passes big objects by reference by itself
[18:15:44] <FromDiscord> <Rika> yard too quick 4 me
[18:15:56] <FromDiscord> <Yardanico> ideally you should only use ref objects when you need shared ownership
[18:16:12] <FromDiscord> <Yardanico> or when you can't use `var` arguments, e.g. for async procedures since they get converted to closures
[18:16:14] <FromDiscord> <Rika> many tiny objects passed around are best passed in a contiguous chunk of memory
[18:16:53] <FromDiscord> <Rika> In reply to @Rika "many tiny objects passed": rather a pointer to a contiguous chunk of memory containing such objects
[18:17:25] <FromDiscord> <Yardanico> why would you need to pass that bullet sequence around though? 🤔 won't it be like a part of the scene object?
[18:18:55] <FromDiscord> <Kiloneie> okay wrong question then xD...↵↵I assume that using a sequence with reference object bullets would be better than using plain objects because the memory would never be freed while if bullets are ref objects GC will keep cleaning them up over the course of the game
[18:19:09] <FromDiscord> <Yardanico> wat
[18:19:11] <FromDiscord> <Rika> wat
[18:19:23] <FromDiscord> <Yardanico> as long as the bullet objects are in the seq they won't get deallocated by the GC
[18:19:28] <FromDiscord> <Yardanico> doesn't matter if they're ref objects
[18:20:02] <FromDiscord> <Yardanico> in most cases you really don't need ref objects :P
[18:20:03] <FromDiscord> <Kiloneie> no but when i say bullets, i mean, you shoot 100 , they hit enemies and get destroyed, get off screen get destroyed, then you shoot some more
[18:20:17] <FromDiscord> <Rika> when something is deleted on the seq then (object) it will just plainly be deleted, no freeing necessary (ref) it will be freed by the GC if no other things reference it
[18:20:39] <FromDiscord> <Yardanico> In reply to @Kiloneie "no but when i": it's better to have a seq with non-ref objects and pre-allocate it with some big enough number
[18:20:47] <FromDiscord> <Yardanico> so when you delete/add bullets there are no reallocations needed at all
[18:20:52] <FromDiscord> <Rika> In reply to @Rika "when something is deleted": no freeing necessary if the object has no refs in it as well
[18:21:04] <FromDiscord> <Rika> In reply to @Yardanico "it's better to have": aka newSeqOfCap
[18:21:32] <FromDiscord> <Rika> or maybe just newSeq if you're fine with dealing with empty (and potentially invalid) Bullet objects
[18:22:39] <FromDiscord> <Yardanico> well, another issue is that it's not really efficient to store bullet objects like that, is it?
[18:23:00] <FromDiscord> <Yardanico> since if you e.g. shoot 500 bullets, and first 100 of them get deleted, then you have to delete them from the start of the seq since they were added earlier
[18:23:07] <FromDiscord> <Yardanico> and that's not really fast
[18:23:31] <FromDiscord> <Yardanico> removing from the end is really easy though - just setLen and you're done
[18:23:57] <FromDiscord> <Yardanico> but yes @Kiloneie , in any way, most of the time ref objects are only needed when you want shared ownership
[18:24:05] <FromDiscord> <Yardanico> e.g. store references to the same object in two different places
[18:24:28] <FromDiscord> <Rika> maybe a ring buffer then
[18:24:33] <FromDiscord> <Yardanico> or for specific cases like async where you can't have "var ObjType" in async procs so you are forced to use ref objects
[18:24:59] <FromDiscord> <Yardanico> or maybe I'm wrong and it works now, lemme check
[18:25:44] <FromDiscord> <ant1fact> sent a long message, see http://ix.io/3yzb
[18:25:45] <FromDiscord> <Kiloneie> i hate this subject D:
[18:26:12] <FromDiscord> <Kiloneie> no wonder i quit making the video on it about a year ago
[18:27:51] <FromDiscord> <impbox [ftsf]> hmm trying to use `hasCustomPragma` but apparently it is an undeclared routine despite importing macros
[18:28:23] *** Joins: max22- (~maxime@2a01cb0883359800283199c6bbbc014c.ipv6.abo.wanadoo.fr)
[18:28:39] <FromDiscord> <impbox [ftsf]> sent a code paste, see https://play.nim-lang.org/#ix=3yzc
[18:29:32] <FromDiscord> <Kiloneie> So to double check, any container that has a dynamic size that gets an element removed from it will have that part of the memory cleared, deallocated right...?
[18:29:52] <FromDiscord> <impbox [ftsf]> unlikely
[18:30:10] <FromDiscord> <Yardanico> In reply to @Kiloneie "So to double check,": no, in most cases it won't
[18:30:11] <FromDiscord> <Rika> not deallocated
[18:30:20] <FromDiscord> <Rika> most of the time not cleared either
[18:30:26] <FromDiscord> <Yardanico> and specifically for Nim sequences - they don't get reallocated to the smaller size
[18:30:39] <FromDiscord> <Rika> though if you're using a security focused container it will definitely be cleared
[18:30:59] <FromDiscord> <Yardanico> so if you create a seq and add 1000 objects then remove all of them except 1 - the seq will still have at least sizeof(objectType)  1000 bytes allocated (actually a bit more because of the seq header)
[18:31:31] <FromDiscord> <Kiloneie> Oh okay
[18:31:39] <FromDiscord> <Rika> In reply to @Yardanico "so if you create": and also because of the growth factor not being exactly a mutliple of 10
[18:31:40] <FromDiscord> <Rika> lol
[18:32:03] <FromDiscord> <Yardanico> yes :)
[18:33:28] <FromDiscord> <impbox [ftsf]> `mySeq = @[]` will give you a fresh start thoguh
[18:33:31] <FromDiscord> <impbox [ftsf]> (edit) "thoguh" => "though"
[18:33:38] <FromDiscord> <impbox [ftsf]> and the old mem will get GCed
[18:33:53] <FromDiscord> <impbox [ftsf]> i'm not sure about setLen
[18:34:00] <FromDiscord> <Rika> setLen prolly wont
[18:34:18] <FromDiscord> <Yardanico> yeah if you shrink the seq by setLen it's not reallocated
[18:37:26] <FromDiscord> <Kiloneie> I think i get it now, use normal struct objects, got a big one? You can make a pointer or ref? (im not done learning all on nim's pointers). For optimization reasons, essess(whats the word...) the aprox mem needed and pre allocate. For modifying a plain object there is "var" keyword. Ownership... Ref objects owned = unique, i think "let ownedRefObject = smthing"
[18:38:05] <FromDiscord> <Yardanico> arghhh, why didn't you read my message :(
[18:38:27] <FromDiscord> <Yardanico> as I said above, Nim passes big objects by reference itself, you don't have to make big objects `ref`s
[18:38:59] <FromDiscord> <Yardanico> and the part about ref objects - as I said, they should be used when you need _shared_ ownership, not _unique_ ownership
[18:39:00] <FromDiscord> <Kiloneie> Okay but how does it know? There a size cap it checks for?
[18:39:19] <FromDiscord> <Yardanico> In reply to @Kiloneie "Okay but how does": yes, but you shouldn't mention that in a video since it's implementation-dependent :)
[18:40:13] <FromDiscord> <Yardanico> but if you really want to know the limit for pass-by-copy vs pass-by-ref is sizeof(int)  3
[18:40:31] <FromDiscord> <Yardanico> ah right sortry, it's sizeof(float64)  3
[18:40:35] <FromDiscord> <Yardanico> (edit) "sortry," => "sorry,"
[18:40:40] <FromDiscord> <Kiloneie> Okay i will write this down and butcher my script...
[18:40:59] <FromDiscord> <Kiloneie> For the third time...
[18:41:19] <FromDiscord> <Yardanico> i think it might be better to actually ask all your questions on the forum so you don't post a video with some info that's not right :)
[18:41:37] <FromDiscord> <Rika> In reply to @Yardanico "ah right sorry, it's": dont put this on the script though
[18:41:38] <FromDiscord> <Yardanico> about this sensitive topic about memory
[18:41:39] <FromDiscord> <Kiloneie> The video will go first up as private
[18:41:47] <FromDiscord> <Kiloneie> Im taking no risks with this one
[18:42:55] <FromDiscord> <Kiloneie> Probably gonna be standard procedure from now on, a day in advance as private.
[18:43:16] <FromDiscord> <Kiloneie> Some of these topics are just... Hell...
[18:43:24] <FromDiscord> <Yardanico> do you send the private one to araq or to the forum in general?
[18:43:52] <FromDiscord> <Kiloneie> Probably both?
[18:44:04] <FromDiscord> <Yardanico> sounds good enough
[18:45:26] <FromDiscord> <Rika> private? you mean unlisted right?
[18:45:26] <FromDiscord> <Kiloneie> i should call these videos "preview" right ?
[18:45:29] <FromDiscord> <Kiloneie> no
[18:45:40] <FromDiscord> <Rika> whats the point then?
[18:45:57] <FromDiscord> <Kiloneie> isn't private on YT being if you share link they can see it
[18:46:00] <FromDiscord> <Rika> no
[18:46:01] <FromDiscord> <Kiloneie> unlisted is NONE can
[18:46:02] <FromDiscord> <Rika> thats unlisted
[18:46:07] <FromDiscord> <Rika> private is none
[18:46:17] <FromDiscord> <Yardanico> :D
[18:46:25] <FromDiscord> <Yardanico> yeah, @Kiloneie , unlisted = link only, private = you only
[18:46:31] <FromDiscord> <Rika> i mean its in the name 😛
[18:46:35] <FromDiscord> <Kiloneie> ohhh okay
[18:46:55] <FromDiscord> <Kiloneie> remembered it wrong
[18:47:07] <FromDiscord> <Yardanico> well actually you can share private videos to other people by their google email addresses
[18:47:56] <FromDiscord> <Rika> yeah but he said forum too so i was suspicious
[18:48:15] <FromDiscord> <Yardanico> well obv it'll be unlisted for the forunm
[18:48:16] <FromDiscord> <Yardanico> (edit) "forunm" => "forum"
[18:48:36] <FromDiscord> <Kiloneie> well if the forum will turn out to be useless i will stop sharing it there, will see how that goes
[18:49:22] <FromDiscord> <Yardanico> well, just name your thread appropriately, like "asking for feedback"
[18:49:33] <FromDiscord> <Yardanico> <video title> - asking for feedback or something like that
[18:53:10] <FromDiscord> <Kiloneie> or PREVIEW OF VIDEO SERIES - VIDEO/EPISODE
[18:53:19] <FromDiscord> <Kiloneie> not all caps of course
[18:53:32] <FromDiscord> <Yardanico> i think preview might be a bit more confusing
[18:53:53] <FromDiscord> <Kiloneie> okay PROTOTYPE then ?
[18:54:04] <FromDiscord> <Yardanico> asking for feedback conveys the fact that you want people to check the video contents more than prototype/preview
[18:54:16] <FromDiscord> <Yardanico> iMO prototype/preview just sounds like you want to share
[18:54:24] <FromDiscord> <Yardanico> and not ask for corrections or something like that
[18:54:30] <FromDiscord> <Kiloneie> okay then
[18:55:55] <FromDiscord> <Rika> maybe "new episode of <name of series> - requesting for feedback" or something
[18:56:26] <FromDiscord> <Yardanico> then "asking for feedback" and "requesting feedback" is almost the same thing though, isn't it? :)
[18:57:18] <FromDiscord> <Rika> o i didnt realise you said that already
[18:59:05] <FromDiscord> <Yardanico> also @Kiloneie you might want to read http://zevv.nl/nim-memory/ if you haven't seen it already
[19:00:05] <FromDiscord> <Kiloneie> no i have not, will look into it
[19:01:33] <FromDiscord> <Yardanico> although some parts are a bit different with ARC/ORC, namely the way seqs and strings are represented in memory
[19:02:15] <FromDiscord> <Kiloneie> okay i will keep that in mind
[19:45:28] *** Quits: supakeen (~user@python/site-packages/supakeen) (Remote host closed the connection)
[19:45:53] *** Joins: supakeen (~user@python/site-packages/supakeen)
[19:48:49] <Zevv> Someone should extend that doc to talk about arc one day
[19:55:07] <FromDiscord> <deech> Is there a way to generate a C header with `exportc` modules?
[19:58:04] <FromDiscord> <Rika> i can predict the future and im expecting hax to answer
[19:58:05] <FromDiscord> <Yardanico> In reply to @deech "Is there a way": Don't think so, you'll have to write one yourself
[19:59:16] <FromDiscord> <deech> Thanks!
[19:59:26] <FromDiscord> <Yardanico> but maybe there's some lib that does this that I'm not aware of/forgot
[19:59:36] <FromDiscord> <Yardanico> just like there's https://github.com/treeform/genny for node/python
[19:59:39] <nrds> <12R2D299> 4GitHub: 7"Generate a shared library and bindings for many languages."
[20:11:02] <FromDiscord> <treeform> In reply to @Yardanico "just like there's https://github.com/treeform/genny": @deech @Yardanico I have a WIP C header generator in a branch: https://github.com/treeform/genny/pull/18
[20:13:02] <FromDiscord> <Yardanico> oh cool
[20:14:02] <FromDiscord> <deech> In reply to @treeform "<@!271498588981297157> <@!177365113899057152> I hav": This is really cool! Can't help thinking this would be so much easier if there was direct support in the compiler. I can see the `extern "C" N_LIB_PRIVATE N_NIMCALL ...` line in the generated C/C++, unless I'm missing something it shouldn't be hard to toss that into a header file.
[20:17:29] <FromDiscord> <xflywind> --header:FILE (already deprecated)
[20:18:56] <FromDiscord> <xflywind> https://nim-lang.org/docs/backends.html#interfacing-backend-code-calling-nim
[20:18:57] *** Joins: rockcavera (~rc@192.12.112.227)
[20:18:57] *** Quits: rockcavera (~rc@192.12.112.227) (Changing host)
[20:18:57] *** Joins: rockcavera (~rc@user/rockcavera)
[20:22:20] <FromDiscord> <deech> Wait, what? This seems like exactly what I want! `nim --fullhelp` doesn't even show the `--header` option which is why I didn't know about it!
[20:23:21] <FromDiscord> <deech> Oh wow that adding `--header` worked!
[20:23:44] <FromDiscord> <haxscramper> header is DePreCaTeD
[20:24:38] <FromDiscord> <deech> Why? Seems pretty useful, was it buggy or something?
[20:25:05] <FromDiscord> <deech> I'll ask in `internals`.
[20:25:56] <FromDiscord> <xflywind> it is buggy, so it was removed from --fullhelp
[20:26:03] <FromDiscord> <xflywind> https://github.com/nim-lang/Nim/commit/279df834bae8b6972af6cbcbdd57c1d53e1df9c7
[20:26:09] <FromDiscord> <xflywind> https://github.com/nim-lang/Nim/issues/4723
[20:27:31] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[20:28:19] <FromDiscord> <xflywind> maybe someone can deprecate it properly(add a warning and add it back to --fullhelp).
[20:29:35] <FromDiscord> <treeform> In reply to @deech "This is really cool!": I disagree about having C header generator in compiler for exportc. Exportc just does the name mangling, how do you do ref objects? How does GC work? how do you do seq? How do you do overloads? Enums, constants... Many things can't just be exported to C plainly and require opinions and problems to solve. That is why we made genny there is enough to think about.
[20:31:31] <FromDiscord> <Rika> i told you guys hax was gonna answer
[20:32:25] <FromDiscord> <haxscramper> Well, deprecating `--header` without having any suitable alternative (it happened two years ago), because of some random bug seems
[20:33:29] <FromDiscord> <haxscramper> Quite questionable. genny is available now, and it does make sense to have an external tool, but for large APIs etc. it still might be useful
[20:34:10] <FromDiscord> <Rika> i dont think it was just because of some random bug
[20:34:11] <FromDiscord> <haxscramper> Also it might as well be a separate program that uses compiler API
[20:34:19] <FromDiscord> <Rika> i think no one was just willing to maintain it
[20:34:26] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 265 seconds)
[20:40:13] <FromDiscord> <haxscramper> It does not seem to be an overly complicated - after all, what it really needs to to is to copy cgen of every `.exportc.` symbol into separate file
[20:40:40] <FromDiscord> <haxscramper> And that's it, at least that's what I would really expect from it.
[20:41:26] <FromDiscord> <haxscramper> And compiler does already generate all the C code, and all procs are foward-declared in generated C headers as well
[20:56:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[21:17:40] <FromDiscord> <deech> In reply to @treeform "I disagree about having": I agree with your points, but with orc/arc isn't GC a non issue? TMK there's no need to explicitly spin up/down a Nim runtime to use exported procs.
[21:19:20] <FromDiscord> <treeform> well you still need to export unref for each object for C if you are going to use ref objects in C land.
[21:19:38] <FromDiscord> <treeform> is it simpler yes? do you still have to think about it, also yes.
[21:19:49] <FromDiscord> <Gumber aka Zachary Carter> using ref objects in C land is not simpler I'd argue
[21:20:00] <FromDiscord> <Gumber aka Zachary Carter> and is way less explicit
[21:20:04] <FromDiscord> <Gumber aka Zachary Carter> than custom destructors and pointers
[21:20:11] <FromDiscord> <Gumber aka Zachary Carter> but to each their own...
[21:20:15] <FromDiscord> <treeform> yeah you just need to free them
[21:20:28] <FromDiscord> <Gumber aka Zachary Carter> and ref / unref them
[21:20:33] <FromDiscord> <Gumber aka Zachary Carter> oh you mean pointers
[21:20:38] <FromDiscord> <Gumber aka Zachary Carter> or...
[21:21:24] <FromDiscord> <Gumber aka Zachary Carter> it's say that automatic memory management looses much of its benefit when you have to manually ref and unref objects
[21:22:12] <FromDiscord> <Gumber aka Zachary Carter> and it actually makes things more complicated, because now you have to think about when you need to perform these actions
[21:22:23] <FromDiscord> <Gumber aka Zachary Carter> whereas if you just wrote custom destructors
[21:22:32] <FromDiscord> <Gumber aka Zachary Carter> it makes reasoning about things much simpler
[21:23:19] <FromDiscord> <Gumber aka Zachary Carter> (edit) "it's" => "i'd"
[21:32:35] <FromDiscord> <treeform> C does not have custom destructors
[21:32:45] <FromDiscord> <treeform> I would argue the C api can be made simple
[21:32:51] <FromDiscord> <treeform> when you `new` a ref object you get it
[21:32:59] <FromDiscord> <treeform> then you `unref` when you are done with it.
[21:33:35] <FromDiscord> <treeform> in see you already have to free everything
[21:33:42] <FromDiscord> <treeform> (edit) "see" => "C"
[21:36:36] <FromDiscord> <Gumber aka Zachary Carter> no I'm talking about Nim custom destructors
[21:36:58] <FromDiscord> <Gumber aka Zachary Carter> and passing GC ref'd objects to C code from Nim
[21:37:22] <FromDiscord> <Gumber aka Zachary Carter> basically the opposite of what you're describing
[21:37:47] <FromDiscord> <Gumber aka Zachary Carter> I know C doesn't have destructors or RAII semantics
[21:37:51] <FromDiscord> <Gumber aka Zachary Carter> but Nim does now
[21:38:28] <FromDiscord> <Gumber aka Zachary Carter> (if you use ARC/ORC)
[21:44:02] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3yAn
[21:44:11] <FromDiscord> <treeform> all exported to C
[22:10:08] <FromDiscord> <Gumber aka Zachary Carter> sure
[22:10:20] <FromDiscord> <Gumber aka Zachary Carter> but if you want to pass them around and store references to them
[22:10:40] <FromDiscord> <Gumber aka Zachary Carter> by around - I mean between C and Nim code
[22:10:51] <FromDiscord> <Gumber aka Zachary Carter> you still need to ref and unref them appropriately
[22:11:26] *** Joins: mdbauman (~mdbauman@2600:1700:7e60:f7c0:c196:23e6:3650:f34f)
[22:16:56] <FromDiscord> <treeform> nim can handle that
[22:17:04] <FromDiscord> <treeform> in C you just need to unref it once you are done
[22:22:37] <FromDiscord> <Gumber aka Zachary Carter> hmm?
[22:22:49] <FromDiscord> <Gumber aka Zachary Carter> if you pass a gc ref'd object to some C code and the C code makes a reference to it
[22:22:55] <FromDiscord> <Gumber aka Zachary Carter> Nim is not going to know that
[22:23:12] <FromDiscord> <Gumber aka Zachary Carter> (edit) "makes" => "stores"
[22:23:35] <FromDiscord> <Gumber aka Zachary Carter> you'd need to GCRef it on the Nim side first
[22:23:41] <FromDiscord> <Rika> ...unless C tells Nim about it
[22:23:44] <FromDiscord> <Gumber aka Zachary Carter> right
[22:23:45] <FromDiscord> <Rika> which is what treeform means i believe
[22:23:51] <FromDiscord> <Gumber aka Zachary Carter> yeah but I'm saying this is a lot of work
[22:23:54] <FromDiscord> <Gumber aka Zachary Carter> and just as dangerous IMO
[22:24:00] <FromDiscord> <Gumber aka Zachary Carter> as just using pointers
[22:24:19] <FromDiscord> <Gumber aka Zachary Carter> in fact I'd say it's more dangerous - but... I guess if you're working on some way to do this automatically
[22:24:27] <FromDiscord> <haxscramper> Can't this be solved by `T copied = copy_T(base value)`
[22:24:29] <FromDiscord> <Gumber aka Zachary Carter> without any overhead from the user - then yeah that'd be really swell
[22:26:25] <FromDiscord> <haxscramper> It gets more problematic when you store refs in the C structs, but overall having ref does not seem more dangerous and cumbersome than free pointer
[22:26:41] <FromDiscord> <haxscramper> At worst you are left with the same bugs as regular pointer
[22:28:29] <FromDiscord> <Gumber aka Zachary Carter> I mean a lot of time you don't have control over the C code you're calling into
[22:29:23] <FromDiscord> <Gumber aka Zachary Carter> but I'm not sure if that factors into this discussion or not
[22:31:43] <FromDiscord> <haxscramper> I'm not sure what C not under my control you refer to. I want to make my nim ref type available to  C side, so I expose RefT, and provide memory management functions for it
[22:33:28] <FromDiscord> <haxscramper> These memory management functions allow to create, copy and delete and object, and if copy is correctly used then RefT needs to be freed (unrefed) multiple times. If copy is not used at all I simply need to call unref once
[22:33:46] <FromDiscord> <haxscramper> So it works like a regular pointer, or as poor man's shared\_ptr
[22:35:55] <FromDiscord> <haxscramper> C++ bindigs can just use destructors etc. and do all the ref-unref things internally.
[22:37:22] <FromDiscord> <ant1fact> In reply to @ant1fact "I am planning to": Sorry to bump this, can anyone chime in? ❤️
[22:38:52] <FromDiscord> <haxscramper> In reply to @ant1fact "Sorry to bump this,": You cant codegen C++ class from nim . The best solution would be to exportc nim procs, then call it on the C++ side
[22:39:15] <FromDiscord> <haxscramper> In reply to @haxscramper "https://github.com/haxscramper/hnimast/blob/master/": This
[22:39:27] <FromDiscord> <haxscramper> Actually next message, with code example
[22:39:52] <FromDiscord> <haxscramper> And I already managed to break and deprecate macro example I linked to so, just follow general idea
[22:40:31] <FromDiscord> <haxscramper> Also if you accept/return any nim types in your proc implementation you would have to put them to header as well
[22:41:21] <FromDiscord> <haxscramper> Actually it is another reason why --header might be useful ...
[22:42:22] <FromDiscord> <ant1fact> wow
[22:42:28] <FromDiscord> <ant1fact> not sure if you just save me days or weeks
[22:42:35] <FromDiscord> <ant1fact> of banging my head against the wall
[22:42:51] <FromDiscord> <haxscramper> @treeform do you plan to support C++ class generation in genny?
[22:43:00] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:6c2e:992:b9a3:7ffa)
[22:43:09] <FromDiscord> <haxscramper> For this specific kind of problem
[22:44:06] <FromDiscord> <haxscramper> And also for things like general interop with libraries that rely on OOP features. Like qt etc. considering you already would need to implement mapping of the Nim types to C/C++
[22:45:13] <FromDiscord> <haxscramper> Or would you be interested in me adding support for this?
[22:46:44] <FromDiscord> <haxscramper> I need to (re) implement it either way for qt wrappers, bit having related code on one place would be beneficial in the long run, since this stuff is really general and needed in fair number of places.
[22:47:34] <FromDiscord> <Gumber aka Zachary Carter> In reply to @haxscramper "I'm not sure what": Yeah I guess the use case you're describing differs quite a bit from what I had in mind
[22:47:59] <FromDiscord> <Gumber aka Zachary Carter> Because normally when I interop with C/C++ code I'm consuming C or C++ code from a static or shared library
[22:48:13] <FromDiscord> <Gumber aka Zachary Carter> and I normally don't write that code
[22:48:30] <FromDiscord> <Gumber aka Zachary Carter> I don't have too many situations where I'm writing some code in Nim and then calling it from C or C++
[22:48:52] <FromDiscord> <Gumber aka Zachary Carter> but I guess in the case of stuff like Qt this is very much necessary
[22:48:57] <FromDiscord> <Gumber aka Zachary Carter> since it's probably like all C++ virtual interfaces
[22:49:04] <FromDiscord> <Gumber aka Zachary Carter> that you have to provide implementations for
[22:49:26] <FromDiscord> <Gumber aka Zachary Carter> sorry - I just guess the context of the discussion went completely over my head initially heh
[22:49:52] <FromDiscord> <haxscramper> yes, those are two separate problems
[22:50:16] <FromDiscord> <Gumber aka Zachary Carter> agreed
[22:53:45] *** Quits: max22- (~maxime@2a01cb0883359800283199c6bbbc014c.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[22:54:19] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3yAI
[22:54:41] <FromDiscord> <Gumber aka Zachary Carter> ugh
[22:54:43] <FromDiscord> <haxscramper> Generating C++ classes requires `#include` of all things that were used in public API for that class
[22:55:15] <FromDiscord> <haxscramper> Which naturally brings us back to genny, since I need to `exportc` all things that were used, in order to be able to include them in C++ again
[22:55:22] <FromDiscord> <Gumber aka Zachary Carter> right
[22:55:29] <FromDiscord> <Gumber aka Zachary Carter> all this for Qt huh?
[22:55:33] <FromDiscord> <haxscramper> yes
[22:55:34] <FromDiscord> <Gumber aka Zachary Carter> jesus...
[22:56:14] <FromDiscord> <haxscramper> And I also need to make sure that generated classes are placed somewhere qt moc can see, because I don't want to reimplement it from scratch
[22:56:40] <FromDiscord> <treeform> In reply to @haxscramper "<@107140179025735680> do you plan": Yes I eventually would like to support C++, and generate the proper OOP features like we do for python/node.
[22:57:12] <FromDiscord> <treeform> In reply to @haxscramper "I need to (re)": I think genny works the other way, you have nim library and what you want to export it to C++ people.
[22:57:34] <FromDiscord> <haxscramper> Qt use case is like both things at once
[22:57:34] <FromDiscord> <treeform> its nim -> X language, not X language -> nim.
[22:57:44] <FromDiscord> <haxscramper> I need to export nim to C++ and then import C++ back to nim
[22:57:58] <FromDiscord> <haxscramper> But nim to C++ comes first
[22:58:10] <FromDiscord> <treeform> ok
[23:06:12] <FromDiscord> <ant1fact> @haxscramper any good alternatives to Qt ? I would like to avoid the troubles you described earlier
[23:06:51] <FromDiscord> <haxscramper> Any other nim gui framework
[23:07:17] <FromDiscord> <haxscramper> I don't do gui, I do qt for the sake of doing qt
[23:07:33] <FromDiscord> <haxscramper> Torture test for hcparse basically
[23:07:46] <FromDiscord> <haxscramper> And for nim interop capabilities
[23:07:52] <FromDiscord> <haxscramper> And for haxdoc as well
[23:07:53] <FromDiscord> <ant1fact> I see
[23:22:45] *** Joins: max22- (~maxime@2a01cb0883359800e16e499d0efbd347.ipv6.abo.wanadoo.fr)
[23:29:53] <FromDiscord> <treeform> do you have an example of what hexdoc generated output looks like?
[23:31:14] <FromDiscord> <haxscramper> the question is whether I have haxdoc in the first place ...
[23:32:32] <FromDiscord> <haxscramper> And so far the answer is no, I don't. The best I can give you right now is raw data, like json (via jsony), or sql database, or XML.
[23:32:44] <FromDiscord> <treeform> ok not ready yet, got it
[23:47:33] <FromDiscord> <enthus1ast> @ant1fact\: the gtk wrapper is capable (gintro)
[23:48:14] <FromDiscord> <enthus1ast> https://github.com/StefanSalewski/gintro
[23:48:17] <nrds> <12R2D299> 4GitHub: 7"High level GObject-Introspection based GTK3/GTK4 bindings for Nim language"
[23:48:48] <FromDiscord> <ant1fact> Many thanks, I will take a look
[23:49:04] <FromDiscord> <enthus1ast> also https://github.com/Dankr4d/BF2142Unlocker
[23:49:07] <nrds> <12R2D299> 4GitHub: 7"This project aims to unlock all weapons in BF2142 (coop/lan mode). You can equip/customize your soldier ingame."
[23:49:14] <FromDiscord> <enthus1ast> this is a big application in gintro
[23:50:04] <FromDiscord> <ant1fact> looks pretty good tbh
[23:50:41] <FromDiscord> <QueenFuckingAdrielle> Hiii, quick question.... are generics completely resolved during compilation or is there a runtime cost to performance?
[23:50:59] <NimEventer> New thread by Ggibson: Weave+ARC WIP or my bug?, see https://forum.nim-lang.org/t/8414
[23:57:54] <FromDiscord> <Rika> In reply to @QueenFuckingAdrielle "Hiii, quick question.... are": Compile time only
[23:58:00] <FromDiscord> <Rika> No runtime cost I believe
[23:58:40] <FromDiscord> <Elegantbeef> Indeed it's all expanded at CT to be a procedure that takes all the args
[23:59:31] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3yAW
[23:59:39] <FromDiscord> <QueenFuckingAdrielle> okay cool, its my understanding that some languages will end up type casting at runtime, didnt think that was the case with nim though
[23:59:57] <FromDiscord> <Yardanico> usually it's the case with languages that have a VM/bytecode interpreter
