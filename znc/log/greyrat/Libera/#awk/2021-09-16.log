[02:00:42] *** Quits: waldo323 (~waldo323@d14-69-96-170.try.wideopenwest.com) (Remote host closed the connection)
[02:03:49] *** Joins: waldo323 (~waldo323@d14-69-96-170.try.wideopenwest.com)
[02:12:49] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[02:17:20] *** Quits: adip (~adip@dih227.neoplus.adsl.tpnet.pl) (Ping timeout: 268 seconds)
[02:24:45] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (Ping timeout: 265 seconds)
[02:38:15] *** Joins: roarde (~roarde@user/roarde)
[03:00:29] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[03:27:29] *** Joins: patanga (~demo@212095005012.public.telering.at)
[04:27:27] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 268 seconds)
[04:40:54] *** Parts: patanga (~demo@212095005012.public.telering.at) ()
[04:48:12] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 268 seconds)
[05:22:09] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[05:30:25] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:35:15] *** Joins: vlm (~vlm@user/vlm)
[05:40:58] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[05:57:52] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[06:48:49] *** Joins: earnestly (~earnest@user/earnestly)
[07:01:39] *** Joins: lgc (~lgc@user/lgc)
[09:21:42] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 260 seconds)
[09:42:14] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[09:51:36] *** Joins: sagax (~sagax_nb@user/sagax)
[10:13:27] <zacts> hi
[10:14:48] <zacts> how can I set awk to split matches into fields versus what's in between chunks of data?
[10:14:52] <zacts> (if that makes any sense)
[10:15:20] <zacts> I want each of these matches to be a field /ka/ /shi/ /ku/ /ke/ /ko for example
[10:16:24] <zacts> or how could I reliably insert ":" in between each of those matches before splitting a string into an array?
[10:19:23] <yitz> How about a sample input/output?
[10:22:07] <zacts> yitz: I type in a line aiueo
[10:22:21] <zacts> and it splits $0 from that into an array of a i u e o
[10:22:34] <zacts> or I type, kashikukekoshi
[10:22:42] <zacts> and it splits that line into the above regex fields
[10:22:57] <zacts> kashikukekoshi -> ka shi ku ke ko shi
[10:30:25] <roarde> You would expect the input 'kushikakeko' to produce 'ku shi ka ke ko', and 'shishushashi' to produce 'shi shi'; correct?
[10:31:47] <zacts> yes
[10:35:23] <zacts> maybe via match()
[10:35:24] <zacts> ?
[10:35:57] <zacts> I want it to keep the same order though
[10:44:41] <zacts> or is there a regex I can pass to split() to do this?
[10:48:07] <yitz> Is the pattern you want basically   [^aeiou]*[aeiou]    ?
[10:49:40] <zacts> ah yeah, let me try that
[10:52:10] <zacts> ah, the problem is that whatever it matches it doesn't include in my split string
[10:52:44] <zacts> I have an idea though. I forgot about *
[11:11:44] *** Joins: adip (~adip@dih227.neoplus.adsl.tpnet.pl)
[11:16:41] <Patsie> # gawk 'BEGIN { RS="[aiueo]" } (RT) { printf("%s:", $0 RT) } (!RT) { printf("\n") } ' <<< $'kashikukekoshi\nshishushashi'
[11:16:43] <shbot> Patsie: ka:shi:ku:ke:ko:shi:
[11:16:43] <shbot> Patsie: shi:shu:sha:shi:
[11:17:08] <Patsie> requires gawk for the use of the RT variable though
[11:22:03] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:22:56] <nmz> # echo kashikukekoshi | gawk '{print patsplit($0,a,/[^aoeuiAOEUI]+[aoeuiAOEUI]/);for (i in a) print a[i] }'))
[11:22:58] <shbot> nmz: bash: syntax error near unexpected token `)'
[11:23:05] <nmz> # echo kashikukekoshi | gawk '{print patsplit($0,a,/[^aoeuiAOEUI]+[aoeuiAOEUI]/);for (i in a) print a[i] }'
[11:23:11] <shbot> nmz: 6
[11:23:11] <shbot> nmz: ka
[11:23:11] <shbot> nmz: etc... ( http://ix.io/3z1V )
[11:23:14] <nmz> I WILL KILL YOU shbot 
[11:23:49] <nmz> you may need to use ? or * or w\e
[11:23:51] <nmz> sleep time
[11:24:09] <nmz> you can also handmake a string.gmatch using match and while
[11:24:13] <nmz> if you want portability
[11:24:23] * nmz waves
[11:26:28] <nmz> # echo kashikukekoshi | gawk '{NF=patsplit($0,a,/[^aoeuiAOEUI]+[aoeuiAOEUI]/);$0="";for (i in a) $i=a[i] } {print $3}'
[11:26:30] <shbot> nmz: ku
[11:30:15] <zacts> I got it to work
[11:30:18] <zacts> let me paste my solution
[11:30:30] <zacts> my is using FreeBSD's nawk not gawk
[11:30:33] <zacts> mine*
[11:31:22] <zacts> oh how should I do the #! line for an awk script?
[11:36:06] <zacts> I see #!/usr/bin/awk -f
[11:37:28] <roarde> Shebang must die!
[11:37:37] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (Ping timeout: 252 seconds)
[11:48:15] <zacts> roarde: what should I do?
[11:58:12] <roarde> `#!/usr/bin/env awk -f file.awk [input_file]' is the consensus, but a plain sh file, no shebang, with 'command awk ...' is the way.
[11:58:54] <jetchisel> awk -f my_awk_script file1 ...
[11:59:19] <roarde> er 'command awk -f file.awk [input_file]'
[12:04:09] <zacts> ok here's what I've got: https://github.com/lydianchromatic/kana.awk
[12:24:07] *** Quits: roarde (~roarde@user/roarde) (Quit: Leaving)
[12:25:09] <zacts> any critique or comments are welcome
[12:46:38] *** Joins: earnestly (~earnest@user/earnestly)
[13:19:03] <OMGOMG> $ ./kana.sh <<<'kanban'
[13:19:04] <OMGOMG> かんん
[13:19:04] <OMGOMG> カンン
[13:20:52] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[13:23:30] <Patsie> it has no notion of diacritics to modify 'ha' (は) to 'ba' (ば)
[13:24:07] <Patsie> so it doesn't recognize 'ba' in ka.n.ba.n and only prints ka.n.n
[13:25:36] <Patsie> nor does it know about digraphs
[13:25:55] *** Joins: jetchisel (jetchisel@user/jetchisel)
[13:26:06] <Patsie> (small ya, yu, yo to change the main monograph)
[13:26:34] *** Joins: lavaball (felix@31.204.155.215)
[13:27:06] *** Quits: jetchisel (jetchisel@user/jetchisel) (Read error: Connection reset by peer)
[13:28:15] <Patsie> nor sokuonfu (shorteren) or choonpu (longer)
[13:29:01] <Patsie> so, yeah, nice and basic style kana/romaaji thingy
[13:30:08] <zacts> yeah, it's just a start of it
[13:30:13] <zacts> I do want to add more soon
[13:30:53] <Patsie> diacritics should be your next goal and fairly easy
[13:31:04] <Patsie> just extending your csv table
[13:31:45] <Patsie> digraphs should also be fairly easy to implement
[13:32:07] <earnestly> Everything can be solved with more lookup tables
[13:32:22] <earnestly> Including the problem of too many lookup tables
[13:35:45] * Patsie replaces earnestly with a lookup table
[13:36:00] <Patsie> now I have to lookup where earnestly has gone
[13:36:10] <Patsie> maybe I will create a lookup table for that too
[13:36:18] <Patsie> and bury earnestly in lookup tables
[13:36:40] <earnestly> Patsie: http://libraryofbabel.info/
[13:46:09] <Patsie> zacts: but uhm, feedback/critique -> printf hiragana[romaji[i]] -> printf("%s", hiragana[romaji[i]])
[13:46:33] <Patsie> or %c, test which modifier you need
[13:47:13] <Patsie> but you don't want your variable to contain any %s/%c/%d strings and then underlfow on the arguments of printf
[13:47:30] <Patsie>   while (getline < ARGV[1] > 0) { FS=":"
[13:47:40] <Patsie> you only need to set FS once, not on every getline
[13:48:45] <Patsie> while (getline < "-" > 0) {
[13:49:44] <Patsie> awk reads from stdin by default, so no need for that, just '{' is enough to process each line of stdin
[13:50:06] <Patsie> outside of the BEGIN block that is
[14:29:16] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:39:16] *** Joins: seninha (~seninha@user/seninha)
[15:47:28] *** Quits: adip (~adip@dih227.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[15:59:20] *** Joins: adip (~adip@dih227.neoplus.adsl.tpnet.pl)
[16:04:05] *** Quits: lavaball (felix@31.204.155.215) (Remote host closed the connection)
[16:14:51] *** Joins: X-Scale` (~ARM@50.77.166.178.rev.vodafone.pt)
[16:16:31] *** Quits: X-Scale (~ARM@92.250.99.192) (Ping timeout: 252 seconds)
[16:16:49] *** X-Scale` is now known as X-Scale
[16:31:13] *** Joins: X-Scale` (~ARM@83.223.226.16)
[16:32:31] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 265 seconds)
[16:33:25] *** X-Scale` is now known as X-Scale
[16:50:30] *** Joins: ychaouche (~ychaouche@user/ychaouche)
[16:53:07] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[16:54:26] *** Joins: Torr (~Torr@user/torr)
[16:54:55] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:00:25] <ychaouche> hello #awk
[17:00:36] <ychaouche> What ressource do you recommend to learn awk ?
[17:01:18] <ychaouche> should I start with http://www.gnu.org/software/gawk/manual/ ? 
[17:11:01] *** Joins: src (~src@user/src)
[17:14:16] *** Joins: lavaball (felix@31.204.155.215)
[17:35:50] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[17:38:38] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[17:40:59] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:01:30] *** Quits: src (~src@user/src) (Quit: Leaving)
[18:04:56] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:13:41] <zacts> Patsie: my version of FreeBSD nawk doesn't seem to process STDIN for {} by default after I've done getline < ARGV[1]
[18:22:15] <drwasabi> ychaouche: any thing from Brian Kernighan is a great read.. and since he's the K in awk. he knows his stuff https://en.wikipedia.org/wiki/LaTeX
[18:41:40] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[18:44:22] <zacts> how can I put my regex into an external file?
[18:44:24] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[18:45:13] *** Joins: jetchisel (jetchisel@user/jetchisel)
[18:54:57] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[19:02:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[19:08:10] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:08:30] *** Quits: jess (~jess@libera/staff/jess) ()
[19:24:42] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[19:25:29] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:28:19] <nmz> for {} ?
[19:28:38] <nmz> put your regex in an external file?
[19:28:48] *** Quits: jetchisel (jetchisel@user/jetchisel) (Max SendQ exceeded)
[19:29:56] *** Joins: jetchisel (jetchisel@user/jetchisel)
[19:32:27] <zacts> nmz: sorry. those were two different unrelated questions
[19:33:09] <nmz> i understood neither
[19:35:40] <zacts> https://github.com/lydianchromatic/kana.awk/blob/main/kana.awk -- I want to store the regex that's in the gsub on line 16 into a file.
[19:35:59] <zacts> that way I can load the regex into a variable to use in there or something
[19:36:19] <zacts> then I can comment and modify the regex in the file instead of hard coding it into my awk script
[19:36:55] <zacts> the first reply to Patsie is something you wouldn't understand without context of our previous discussion
[19:37:35] <nmz> so do it
[19:38:28] <zacts> nmz: how do I include the regex into my awk script if it's located in an external file?
[19:38:41] <zacts> do I just store it via getline into a variable or something?
[19:38:54] <nmz> if you're gonna go with that method, you should load the regex in BEGIN then use gsub as normal
[19:39:03] <nmz> however, awk strings vs // is janky
[19:39:08] <nmz> so good luck with that
[19:40:02] <zacts> my current regex is a string
[19:40:06] *** Joins: seninha (~seninha@user/seninha)
[19:40:07] <zacts> and it works
[19:40:30] <zacts> but I'd like to do this as clean as possible
[19:42:54] *** Parts: ychaouche (~ychaouche@user/ychaouche) (Konversation terminated!)
[19:43:48] <nmz> I'd say using : for splitting is already not clean
[19:44:23] <zacts> nmz: what should I use?
[19:44:25] <nmz> you could ugly fix it by using \r or some weird character
[19:44:36] <nmz> not gsub
[19:44:58] <nmz> but atm, gsub works great so
[19:45:16] <nmz> that isn't in normal ascii text
[19:45:48] <nmz> you could also handbuild your gsub
[19:57:01] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: WeeChat 3.2)
[19:57:38] <nmz> # echo ka:shikukekoshi | awk '{ for (i=1+NF;i--;) { s=$i; while( match(s,/ka|shi|ku|ke|ko|./) ){ print substr(s,RSTART,RLENGTH); s=substr(s,RSTART+RLENGTH) }; $i=s } }'
[19:57:45] <shbot> nmz: ka
[19:57:45] <shbot> nmz: :
[19:57:45] <shbot> nmz: etc... ( http://ix.io/3z48 )
[19:58:44] <nmz> so you build your regex from a table, you add a |. so you can handle any character that isn't in the table and not transform it, and $i=s will transform each field into that character
[19:58:47] <nmz> if you care about fields
[19:59:49] <nmz> but gsub is better
[20:00:01] <nmz> faster
[20:06:15] <nmz> zacts: awk '{ s=$0; while( match(s,/ka|shi|ku|ke|ko|./) ){ x=substr(s,RSTART,RLENGTH) newstr = newstr convert[x] ? convert[x] : x; s=substr(s,RSTART+RLENGTH) }; $0=newstr } }'
[20:06:48] <nmz> all you have to do is put all the conversion characters you want in the match(), and put the conversion characters in conver[]
[20:06:51] *** Quits: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512) (Quit: I have to return some videotapes)
[20:08:34] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[20:11:26] *** Joins: AJ_Z0 (~AJ_Z0@user/aj-z0/x-3780512)
[20:11:26] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:16:58] <nmz> zacts: how do you differ if you want to use hiragana or katakana?
[21:03:45] <nmz> zacts: need to convert back to romaji too
[22:05:47] *** Joins: roarde (~roarde@user/roarde)
[22:11:36] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[22:12:19] *** Joins: jetchisel (jetchisel@user/jetchisel)
[22:29:23] *** Quits: lavaball (felix@31.204.155.215) (Quit: lavaball)
[22:29:59] *** Joins: lavaball (felix@31.204.155.215)
[22:39:12] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 245 seconds)
[22:39:40] *** Quits: lgc (~lgc@user/lgc) (Quit: WeeChat 3.2-dev)
[22:58:36] *** Joins: seninha (~seninha@user/seninha)
[23:24:42] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[23:25:26] *** Joins: Torr (~Torr@user/torr)
[23:29:11] *** Quits: nvmd (~nvmd@user/nvmd) (Read error: Connection reset by peer)
[23:33:25] *** Joins: nvmd (~nvmd@user/nvmd)
[23:47:47] *** Joins: jle (~jle@user/jle)
[23:48:58] <jle> e36freak?
