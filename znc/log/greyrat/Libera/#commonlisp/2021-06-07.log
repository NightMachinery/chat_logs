[17:59:09] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[17:59:09] *** Server sets mode: +nrtz 
[18:01:06] *** Quits: silasfox (~sbv@2001-4dd5-1981-0-1d4e-a915-3158-66f5.ipv6dyn.netcologne.de) (Ping timeout: 272 seconds)
[18:05:55] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[18:07:45] *** Joins: rudi (~rudi@cm-84.209.2.46.getinternet.no)
[18:20:41] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:21:19] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:30:46] *** Joins: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com)
[18:36:55] *** Quits: Cymew (~ante@c-b985225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 264 seconds)
[18:41:36] <nick3000> Does lisp have anything like C++ const variables? I'd like to declare a global constant object that would cause an error if an attempt was made to modify it.
[18:41:50] <Bike> clhs defconstant
[18:41:51] <nick3000> I find if I use defconstant I can still modify the object using incf/decf for example.
[18:41:55] <Bike> ...
[18:42:11] <nick3000> (defconstant y (make-instance 'machine-word :bytes #(0 0 0 0 0)))
[18:42:11] <nick3000> Y
[18:42:11] <nick3000> MIX-EMU> y
[18:42:11] <nick3000> #<MACHINE-WORD 1 #(0 0 0 0 0)>
[18:42:14] <Bike> well, the clhs bot is down, i guess. super
[18:42:14] <nick3000> MIX-EMU> (incf (word-nth-byte y 0))
[18:42:16] <beach> Bike: You would need to use Colleen
[18:42:17] <nick3000> 1
[18:42:21] <nick3000> MIX-EMU> y
[18:42:24] <nick3000> #<MACHINE-WORD 1 #(1 0 0 0 0)>
[18:42:27] <nick3000> MIX-EMU> 
[18:42:35] <_death> so don't do that
[18:42:37] <beach> nick3000: Please use a paste service.
[18:42:40] <nick3000> That's an example, MACHINE-WORD is a sequence of bytes in a VM, I'd like to not be able to incf/decf.
[18:42:43] <Bike> mm, it's undefined behavior to modify constant data, not an error
[18:42:44] <nick3000> Okay.
[18:43:22] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[18:43:49] <Bike> there's no operator that makes it an actual error. since in lisp we don't have everything compiled at once like in C, there would have to be a runtime tag of some kind on constant objects, and every modifying operation would have to check it
[18:44:16] <nick3000> Right
[18:44:44] <beach> I have always wondered how static languages do things like that.  Do they put the object in read-only memory?
[18:44:49] <nick3000> Yes
[18:44:57] <Bike> that said, implementations tend to warn when you compile code that modifies constant
[18:45:00] <Bike> s
[18:45:03] <nick3000> A section of memory is declared to the kernel to not be modifiable.
[18:45:08] <nick3000> And in addition there are compile-time checks.
[18:45:10] <beach> Right.
[18:45:54] <beach> Maybe I should do something like that in SICL.  There is nothing preventing me from having a separate read-only global heap.
[18:46:08] <Bike> the C and C++ standards mandate the compiler output a diagnostic message if you have code that could modify a constant. i don't know if t here's any requirement on the runtime
[18:46:31] <Bike> and of course you can do const_cast and stuff
[18:46:37] <beach> Bike: That's precisely the reason for my asking.
[18:46:39] <Bike> oh yeah, here we go. "Modifying a const object through a non-const access path and referring to a volatile object through a non-volatile glvalue results in undefined behavior. "
[18:46:49] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[18:47:03] <beach> Bike: That's C++?
[18:47:34] <Bike> yes. i don't know about C. i don't think C has anything like const_cast, so it may be impossible to construct code that modifies a const object unless you do other standard violating things like out of bounds pointer arithmetic
[18:47:37] <beach> I thought so.  So it's not guaranteed in those languages either. 
[18:49:02] <beach> So the answer to nick3000 is that C++ doesn't have such a thing either.
[18:49:18] <nick3000> Well practically speaking as a day-to-day C++ programmer, you get a segfault.
[18:49:22] <nick3000> Not sure what the spec says.
[18:49:33] <beach> But that was what I am interested in.
[18:49:36] <Bike> it says undefined behavior, at least according to cppreference, which is usually alright
[18:49:38] <nick3000> But I have many many times done stuff like that in C/C++ and you will get a segfault.
[18:49:45] <beach> What the spec says, that is.
[18:49:46] <_death> Bike: you shouldn't modify const objects in either case.. there is a distinction between const objects and const references/pointers
[18:49:50] <Bike> i suppose the difference is that I think the C++ standard mandates a warning of some kind
[18:50:12] <Bike> in the compiler, i mean
[18:50:41] <beach> Bike: Right, but that has to be undecidable in general.
[18:50:48] <Bike> sure
[18:51:16] <_death> Bike: so if you have a const reference to a nonconst object, you can use const_cast in C++ and an ordinary cast in C
[18:51:28] <Bike> ordinary cast, i see
[19:14:52] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[19:15:43] *** Server sets mode: +nrtz 
[19:16:26] *** Quits: lucerne- (~lucerne@ip202.ip-51-178-215.eu) (Client Quit)
[19:17:49] <jcowan> Indeed.
[19:18:27] <jcowan> But they are typically available as text files (or, Ghu help us, SQL Server databases you can download).
[19:21:27] <_death> https://www.iso.org/publication/PUB500001.html :/
[19:24:53] <hirez> thanks for the link pjb 
[19:24:56] <hirez> also good morning everyone
[19:25:06] <Josh_2> Mornin'
[19:39:56] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[19:42:46] *** Joins: blizzard (~winter@2603-6011-f901-9e5b-78b5-8b2f-cdb2-4171.res6.spectrum.com)
[19:43:24] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[19:44:37] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[19:44:37] *** Joins: katco (~katco@2001:470:69fc:105::2b8)
[19:44:37] *** Joins: dieggsy (~dieggsy@2001:470:69fc:105::91f)
[19:44:38] *** Joins: akanouras (~akanouras@user/akanouras)
[19:58:31] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[20:03:00] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[20:05:27] *** Quits: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it) (Remote host closed the connection)
[20:06:45] *** Joins: shka (~herr@109.231.62.239)
[20:22:33] *** Joins: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net)
[20:28:26] <jmercouris> Given a form, a way to tell what a symbol points to?
[20:28:40] <jmercouris> For example, can I see that a symbol is a macro, or whatever
[20:28:55] <jmercouris> I’m trying to implement syntax highlighting by leveraging the CL reader
[20:29:31] <beach> What does it mean for a symbol to "point to" something?
[20:29:34] <beach> Its value?
[20:29:40] <beach> ::clhs symbol-value
[20:29:41] <Colleen> Clhs: accessor symbol-value http://www.lispworks.com/documentation/HyperSpec/Body/f_symb_5.htm
[20:32:15] *** Joins: zacts (~zak@user/zacts)
[20:32:49] <beach> jmercouris: And what is the "form" you mention?  How is it related to the symbol?
[20:33:19] <jmercouris> Given an arbitrary lisp form, how can I correctly highlight it?
[20:33:38] <jmercouris> Eg function definitions are blue, macros are red, strings are gray, etc
[20:33:54] <beach> That depends on your definition of "correctly".  With my definition, you need a code walker.
[20:34:05] <jmercouris> And yes, I meant it’s value, just too much of my headspace consumed by C
[20:34:17] <yitzi> jmercouris: Some introspection is trivial-cltl2
[20:34:22] <yitzi> https://github.com/Zulu-Inuoe/trivial-cltl2
[20:34:22] <jmercouris> Can I not use lisp itself to tell me?
[20:34:43] <jmercouris> Can the compiler not give me some information? beach ?
[20:35:02] <beach> jmercouris: The standard doesn't cover everything you need, but every implementation obviously has what it takes.
[20:35:35] <jmercouris> beach: I thought you worked on a similar problem some time ago for climacs
[20:35:48] <beach> jmercouris: That's why yitzi suggests a "compatibility library" that abstracts out what each implementation does.
[20:35:48] <jmercouris> I can’t remember exactly what you said though, it was a few years ago
[20:35:55] <jmercouris> I see
[20:36:09] <jmercouris> I’ll take a look at that then, thanks yitzi
[20:36:25] <yitzi> I do some it myself it here without trivial-cltl2 https://github.com/yitzchak/common-lisp-jupyter/blob/master/src/cl-jupyter/utils.lisp
[20:36:26] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[20:37:25] <jmercouris> I’ve done similar things as well
[20:37:33] <jmercouris> Just not sure how to make the leap to highlighting
[20:37:48] <jmercouris> How do I associate a found symbol to something in the form to highlight
[20:37:59] <jmercouris> I would need to look through the form and find the same symbol
[20:38:16] <beach> You mean, you need to find the source location of it?
[20:38:27] <jmercouris> Almost
[20:38:34] <jmercouris> Just the location within the form
[20:39:05] <jmercouris> Maybe I’ll give up and just do a dumb regex for now
[20:39:11] <yitzi> I suggest the excellent Eclector.
[20:39:39] <jmercouris> Aha
[20:40:09] <beach> That's why we plan to use Eclector's capability of producing CSTs (which contain source information).
[20:40:31] <yitzi> I don't syntax highlighting in common-lisp-jupyter, but I do use eclector for symbol completion and inspection.
[20:40:55] <jmercouris> I see
[20:40:56] <beach> That's great!  
[20:41:01] <jmercouris> For that it could be quite useful
[20:41:04] <beach> Eclector is a very fine library.
[20:41:15] <jmercouris> beach: how long until you can produce a CST?
[20:41:26] <jmercouris> Also what does CST stand for?
[20:41:43] <beach> Concrete Syntax Tree.  Eclector can do that out of the box.
[20:41:47] <jmercouris> I see
[20:41:48] <beach> But it's not enough.
[20:41:54] <beach> You also need a code walker.
[20:41:59] <jmercouris> Hm
[20:42:09] <jmercouris> The plot thickens
[20:42:19] <beach> My plan was to use Cleavir for that, but it looks like scymtym is going to do some work, and I don't know his plans.
[20:42:21] <jmercouris> I’ll look around the source
[20:42:36] <jmercouris> And see if I can figure something out
[20:42:39] <jmercouris> Thanks for the tips
[20:42:43] <beach> Sure.
[20:43:00] <beach> There is other stuff you need to think about though...
[20:43:10] <beach> If you use the reader, you may encounter errors.
[20:43:28] <beach> Like non-existing packages, premature end-of-file, etc.
[20:43:47] <beach> Then if you use a code walker, you may get errors from it with respect to special forms.
[20:44:25] <beach> And if someone writes cl::hello, you may want to prevent the symbol from being created in the Common Lisp package.
[20:45:34] <beach> So the plan is to configure Eclector to not intern symbols in the normal host packages, and to have Eclector recover from various reader errors.
[20:45:47] <jmercouris> Right
[20:45:55] <jmercouris> Sounds incredibly challenging
[20:45:55] *** Joins: srhm (~ascii@user/srhm)
[20:46:05] <beach> It is.  That's why it's taking time. :)
[20:46:53] <beach> Plus, a paper we wrote documents the use of the reader incrementally, so that you don't have to re-read the entire buffer after each keystroke. 
[20:47:00] <beach> That's another challenge. 
[20:47:14] <beach> Luckily, that one is taken care of.
[20:47:44] *** Parts: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (Leaving)
[20:49:57] <beach> jmercouris: I did start using Nyxt today.  Not yet exclusively, though.  Still learning.
[20:51:55] <scymtym> here is a prototype with some of the properties beach mentioned (using Eclector for the character-level syntax, not interning anything, code-walking for semantic highlighting): https://techfak.de/~jmoringe/semantic-highlighting-1.png https://techfak.de/~jmoringe/semantic-highlighting-2.png
[20:51:59] <scymtym> also related: https://techfak.de/~jmoringe/second-climacs-1.ogv
[20:52:26] <blihp> beach: are you able to use it from your default setup (I assume lisp/slime)?  It was giving me all kinds of problems until I just started a sbcl instance just for it from the command line
[20:52:45] <blihp> (err, I meant to say emacs/slime)
[20:52:57] *** Joins: domovod (~domovod@176.196.122.197)
[20:53:04] <beach> Thanks scymtym.
[20:53:14] <scymtym> sure
[20:53:36] <beach> blihp: "it"?
[20:54:40] <beach> scymtym: Wow, nice demo!
[20:55:31] <beach> blihp: Nyxt you mean?  I just started it from the command line.
[20:56:19] <Josh_2> beach: https://imgur.com/k7fq6yl.png (nyxt theme)
[20:58:04] <beach> Josh_2: Yes, I see.  I'll start by learning to use it I think.
[20:58:14] <beach> scymtym: What code walker are you using?
[20:59:13] <scymtym> beach: mostly just the expression syntax library. combined with code to track the current package and other state in a chain of environment objects
[20:59:20] <Josh_2> beach: https://plaster.tymoon.eu/view/2483#2483 thats the code, taken from aartaka and modified ofcourse, for future reference :P 
[20:59:26] <blihp> beach: yes, I was referring to nyxt
[20:59:33] <jcowan> Symbols and especially packages are the things that make `read` hard.
[21:00:07] <beach> scymtym: Will that be enough, or do you plan to improve it later?
[21:00:39] <beach> jcowan: We solved that problem.  Or rather, scymtym did.
[21:01:29] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (Quit: leaving)
[21:01:36] <jcowan> is that inherent to Eclector, or is it separable?
[21:01:45] <beach> It's part of Eclector.
[21:02:35] <jcowan> Is there a writeup somewhere of how it works?
[21:02:48] <beach> Solving the problem requires an implementation of the reader algorithm that allows client code to configure what happens when a token is about to be processed.  And that's what Eclector is.
[21:02:57] *** Joins: srji (~user@p200300ca1f1aeb00d857e43768ab2e21.dip0.t-ipconnect.de)
[21:03:04] <scymtym> beach: i hope it will work for my purposes
[21:03:10] <beach> Great!
[21:03:21] <scymtym> jcowan: let me find the presentation-ish explanation i made
[21:04:12] <scymtym> jcowan: https://techfak.de/~jmoringe/file-reader-1.ogv
[21:05:00] <beach> scymtym: jcowan doesn't have time to watch movies. :)
[21:05:34] <srji> i just found webjump :D
[21:08:23] <scymtym> beach: i see
[21:08:29] <beach> jmercouris: You should watch that movie to get an idea of the complexity of the problem. :)
[21:08:56] <beach> jcowan: But I believe Eclector itself has extensive documentation that you can read.
[21:09:32] <jcowan> 18 minutes is tolerable, I just have to move to the bedroom
[21:09:55] <jcowan> are the slides themselves available?
[21:10:19] <beach> It is not a slide presentation.
[21:10:33] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[21:10:54] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[21:12:32] <beach> scymtym: I am very impressed by the demo.  It seems you are getting close.
[21:16:27] <scymtym> beach: thanks. i have a plan at least. i ultimately want to combine the incremental parsing of Second Climacs with the s-expression parsing and environment stuff
[21:19:38] *** Quits: amk (~amk@176.61.106.150) (Read error: Connection reset by peer)
[21:20:16] *** Joins: amk (~amk@176.61.106.150)
[21:21:04] *** Quits: zacts (~zak@user/zacts) (Quit: bbl)
[21:22:05] *** Quits: srji (~user@p200300ca1f1aeb00d857e43768ab2e21.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:29:47] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[21:31:44] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[21:34:21] <jmercouris> beach: nice! That’s cool! Hopefully you won’t cringe too hard when you look at our code :-D
[21:34:58] *** Joins: v88m (~Xiro@109-252-61-50.nat.spd-mgts.ru)
[21:43:32] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[21:47:38] * shka opens the source code of nyxt
[21:47:42] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 244 seconds)
[21:47:53] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[21:48:06] * shka proceeds to screech *UNACCEPTABLE*
[21:48:13] <shka> jmercouris: it is not that bad
[21:48:34] <shka> but master was broken yesterday
[21:48:41] <shka> and that guix package crashes
[21:50:57] <shka> but I've seen worse lisp code
[21:50:59] <shka> much worse
[21:54:09] *** Quits: yewscion (~yewscion@2601:547:a01:2900::cc51) (Remote host closed the connection)
[21:54:34] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[21:54:56] <jcowan> I once saw code in which a 100 element array was initialized to 0 with 100 assignment statements.  Written by a consultant.
[21:55:02] <jcowan> We fired his ass
[21:58:26] <aeth> at least he knew what an array was
[21:58:42] <aeth> a0 = 0; a1 = 0; a2 = 0; ...
[21:59:39] *** Quits: yewscion (~yewscion@2601:547:a01:2900::b46f) (Ping timeout: 245 seconds)
[22:03:24] <_death> unrolling in his grave
[22:05:27] <yitzi> Did you ask him where he learned how to do that? I would just die if said he copy-pasted it.
[22:05:45] <beach> scymtym: Excellent!
[22:16:17] * jcowan smh
[22:16:27] <jcowan> I don't think anyone asked him anything
[22:18:16] *** Quits: andreyorst (~andreyors@2.92.124.205) (Ping timeout: 245 seconds)
[22:20:30] <pjb> jcowan: /*  (dotimes (i 10) (insert (format "a%d = 0; " i))) */  a0 = 0; a1 = 0; a2 = 0; a3 = 0; a4 = 0; a5 = 0; a6 = 0; a7 = 0; a8 = 0; a9 = 0; 
[22:20:45] <pjb> (He just tried to ensure job security?)
[22:20:50] <pjb> and failed lamentably :-)
[22:33:30] *** Quits: akanouras (~akanouras@user/akanouras) (Ping timeout: 272 seconds)
[22:33:30] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (Ping timeout: 272 seconds)
[22:42:38] *** Joins: mindCrime (~prhodes@cpe-98-27-55-10.nc.res.rr.com)
[22:54:03] *** Quits: domovod (~domovod@176.196.122.197) (Quit: WeeChat 3.1)
[22:56:52] *** Quits: v88m (~Xiro@109-252-61-50.nat.spd-mgts.ru) (Ping timeout: 272 seconds)
[22:58:24] *** Quits: silasfox (~sbv@xdsl-81-173-179-88.nc.de) (Ping timeout: 245 seconds)
[23:00:08] *** Joins: v88m (~Xiro@109-252-61-50.nat.spd-mgts.ru)
[23:00:20] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:02:45] *** Joins: jans (~jans@119.51-174-216.customer.lyse.net)
[23:06:09] *** Quits: pve (~pve@87-93-173-186.bb.dnainternet.fi) (Ping timeout: 252 seconds)
[23:09:33] *** Quits: blihp (~blihp@c-68-43-233-92.hsd1.mi.comcast.net) (Quit: Leaving)
[23:11:46] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[23:12:47] *** Joins: pve (~pve@37-33-17-144.bb.dnainternet.fi)
[23:13:05] *** Joins: knusbaum (~kjn@2601:240:8480:9990:c885:acce:87f7:c872)
[23:14:51] *** Quits: esb (~esb@2804:14c:1ad:8bd2::1000) (Ping timeout: 272 seconds)
[23:15:14] *** Joins: esb (~esb@2804:14c:1ad:8bd2::1000)
[23:18:28] *** Joins: yewscion (~yewscion@2601:547:a01:2900::b46f)
[23:19:39] *** Quits: esb (~esb@2804:14c:1ad:8bd2::1000) (Ping timeout: 245 seconds)
[23:35:50] <knusbaum> Hi, everyone. I'm playing with implementing a very simple swank server, but I'm having trouble finding good documentation about the various RPC calls.
[23:36:05] *** Joins: dbotton (sid492350@id-492350.tooting.irccloud.com)
[23:36:05] <phoe> knusbaum: curious question, which language are you writing for?
[23:36:10] <knusbaum> My current issue is that SLIME seems to call swank:autodoc with a bunch of previous buffer contents including prompts. I'm not sure how to tell emacs that the previous buffer contents should be ignored.
[23:36:22] <knusbaum> phoe: I'm writing this for my own lisp.
[23:36:29] <phoe> knusbaum: OK
[23:36:41] <phoe> how to tell *emacs* though?
[23:36:52] <phoe> that's slime, the elisp side
[23:36:57] <knusbaum> Whichever SWANK client. I'm currently using emacs to test.
[23:37:03] <phoe> if you want to write a swank server, ideally you should not need to modify slime
[23:37:06] <phoe> oh, I see
[23:37:32] <knusbaum> No, Emacs/SLIME is issuing an RPC call I consider "weird", and I assume that's because I'm doing something wrong on the server side.
[23:38:50] <phoe> how is slime configured? slime-fancy?
[23:39:00] <phoe> maybe the client loads a bunch of contribs that the server does not support
[23:39:54] <knusbaum> That could be. From (swank:connection-info) I return :modules ("SWANK-ARGLISTS" "SWANK-REPL" "SWANK-PRESENTATIONS")
[23:40:13] <knusbaum> And I'm not receiving any relevant RPC calls to the server that are unhandled.
[23:40:45] <phoe> still, regarding all the various rpc calls, I don't know of any good documentation that isn't "ask a person knowledgeable in the topic"
[23:40:48] <knusbaum> That's why I'm wondering if I need to be sending other requests to the client like (:clear-prompt) or something.
[23:41:09] <knusbaum> Yeah, haha. 
[23:41:13] <phoe> and the latter would be, I guess, asking luis and/or Joao who is knowledgeable in the ways of slynk/sly
[23:41:40] <knusbaum> Is SLIME/SWANK active anymore, or is slynk/sly the way to go now?
[23:41:59] <phoe> yes it is
[23:42:19] *** Joins: cage (~cage@dynamic-adsl-78-15-34-62.clienti.tiscali.it)
[23:42:19] <phoe> slynk has simply diverged too much functionally to be merged back into slime
[23:42:25] <phoe> both are active and maintained
[23:42:29] <knusbaum> Cool.
[23:43:47] <phoe> I guess that, as a last resort, you could try to make a forum post at https://github.com/joaotavora/sly/discussions
[23:44:35] <phoe> (since that's where joao asked me to point people to if they have any kind of sly questions, and I guess that questions about the rpc protocol are borderline on-topic there)
[23:44:57] <knusbaum> Thanks very much, phoe.
[23:48:49] *** Quits: pve (~pve@37-33-17-144.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[23:51:00] *** Joins: pve (~pve@82-203-230-130.bb.dnainternet.fi)
[23:52:10] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:55:13] *** Joins: srhm (~ascii@user/srhm)
[23:55:29] *** Quits: pve (~pve@82-203-230-130.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[23:56:00] *** Joins: pve (~pve@213-216-226-151.bb.dnainternet.fi)
