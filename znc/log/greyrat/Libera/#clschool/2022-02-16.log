[00:10:29] *** Joins: ilmu3 (~ilmu@176.76.242.178)
[00:13:36] *** Quits: ilmu2 (~ilmu@176.76.240.89) (Ping timeout: 252 seconds)
[00:38:20] *** Joins: Oladon (~olad@98.43.81.226)
[00:47:55] *** Parts: dmgk (~dmgk@user/dmgk) ()
[01:13:11] *** Joins: eugercek (~user@user/eugercek)
[01:19:31] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[01:20:32] *** Joins: eugercek (~user@user/eugercek)
[01:55:00] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:55:24] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 240 seconds)
[01:56:00] *** Quits: tewi (~tewi@apn-31-2-67-91.dynamic.gprs.plus.pl) (Ping timeout: 272 seconds)
[01:57:09] *** Joins: aeth (~aeth@user/aeth)
[02:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 272 seconds)
[02:02:55] *** Joins: aeth (~aeth@user/aeth)
[02:03:29] <opcode> is it possible to specify arguments to a sharp-quoted function?  i.e. (let ((fn #'foobar)) ... ) where foobar takes some number of arguments?
[02:04:39] <Bike> specify arguments how? by calling it?
[02:04:55] <opcode> well, i'm trying to set up an sbcl timer and I want the function that it calls to take arguments
[02:05:55] <Bike> do you want a closure? if you want the timer to call (write-line x), you can just pass the timer (lambda () (write-line x))
[02:06:11] <Bike> the timer code isn't going to pass the function any arguments itself
[02:06:54] <opcode> ah yeah that'd work, thanks
[02:14:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[02:24:58] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[02:39:12] *** Quits: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com) (Ping timeout: 250 seconds)
[02:39:32] *** Joins: fwoaroof (~fwoaroof@172.56.30.14)
[02:46:49] *** Joins: fwoaroof_ (~fwoaroof@172.56.30.252)
[02:46:58] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[02:49:12] *** Quits: fwoaroof (~fwoaroof@172.56.30.14) (Ping timeout: 272 seconds)
[02:49:18] *** Joins: Bike (~Bike@71.69.170.70)
[02:51:28] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[02:51:28] *** Quits: bandali (~bandali@gnu/bandali) (*.net *.split)
[02:51:28] *** Quits: zagura (~zagura@user/zagura) (*.net *.split)
[02:51:28] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[02:53:46] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[02:53:46] *** Joins: bandali (~bandali@gnu/bandali)
[02:53:46] *** Joins: zagura (~zagura@user/zagura)
[02:53:46] *** Joins: Kabriel (~Kabriel@user/kabriel)
[02:53:47] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (Max SendQ exceeded)
[02:54:05] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[03:12:41] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[03:22:08] *** Quits: fwoaroof_ (~fwoaroof@172.56.30.252) (Ping timeout: 272 seconds)
[03:23:27] *** Joins: fwoaroof (~fwoaroof@cpe-108-185-194-90.socal.res.rr.com)
[03:41:35] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:41:52] *** Joins: eugercek (~user@user/eugercek)
[03:42:06] *** Quits: eugercek (~user@user/eugercek) (Read error: Connection reset by peer)
[04:12:08] *** ilmu3 is now known as ilmu
[04:13:44] <ilmu> does coalton have an irc channel?
[04:25:15] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[04:25:16] <drakonis> i don't think so
[04:25:20] <drakonis> it has a discord server though
[04:29:47] <bremner> uhoh. What is it?
[04:29:57] <bremner> (coalton. alas, I know discord)
[04:36:46] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:42:33] <drakonis> https://github.com/coalton-lang/coalton
[04:42:55] <drakonis> its a functional language built on top of cl
[04:43:47] <drakonis> it is quite impressive
[04:44:12] <drakonis> https://coalton-lang.github.io/20211010-introducing-coalton/
[04:44:26] <drakonis> "Coalton is a statically typed functional programming language built with Common Lisp. This is Coalton computing Fibonacci numbers by exponentiating functions (not numbers!)."
[04:44:36] <drakonis> it also makes cl into a lisp-1
[04:45:00] <drakonis> not that it matters, but it is very nice
[04:45:37] <drakonis> i can write scheme-ish code with it@
[04:45:39] <drakonis> !
[04:46:01] <drakonis> since it has type inference and a single namespace for functions and variables.
[04:46:03] <drakonis> what a time to be alive.
[04:46:23] <drakonis> still has macros and has cl interop
[04:46:33] <drakonis> both ways
[04:47:05] <drakonis> it also has monads (?!?!?!?!)
[04:48:53] <White_Flame> according to haskellers, everything is a monad anyway :)
[04:49:46] <drakonis> ah haskellers
[04:50:41] <bremner> huh. I wonder how the performance is.
[04:51:10] <bremner> there are Issues with interop between statically and dynamically typed code...
[04:51:48] <drakonis> they talked about that
[04:53:03] <drakonis> doesnt look like there's a hit
[04:53:57] <drakonis> check the blog post introducing coalton
[04:54:02] <drakonis> it should go over any questions you have
[05:02:42] <Bike> monads happen pretty naturally in that programming paradigm. they might not be as important in coalton as they are in haskell, though, since coalton is eager.
[05:14:53] <aeth> nothing's wrong with making code that's both dynamic and static typed. It's just that it'll double check in places and static-only could be more memory optimal
[05:35:53] *** Joins: aeth_ (~aeth@user/aeth)
[05:36:04] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[05:36:09] *** aeth_ is now known as aeth
[05:41:48] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 240 seconds)
[06:23:03] *** Joins: beach` (~user@2a01:cb19:150:3400:8e1d:10b7:9cda:4c33)
[06:26:57] *** Quits: beach (~user@2a01:cb19:150:3400:f284:cdc3:9afa:22f8) (Ping timeout: 240 seconds)
[06:55:06] *** Quits: silasfox (~sbv@p4fe8dbf5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:57:11] *** Joins: silasfox (~sbv@p200300cec7165400792cbb9734838e19.dip0.t-ipconnect.de)
[07:10:54] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[07:19:02] *** beach` is now known as beach
[07:24:21] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:30:30] <beach> Good morning everyone! 
[07:47:26] *** Joins: lisp123 (~lisp123@94.201.199.103)
[07:52:36] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[08:00:06] *** Quits: lisp123 (~lisp123@94.201.199.103) (Remote host closed the connection)
[08:15:00] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 240 seconds)
[09:33:00] *** Quits: silasfox (~sbv@p200300cec7165400792cbb9734838e19.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[09:33:18] *** Joins: silasfox (~sbv@p548d1123.dip0.t-ipconnect.de)
[09:58:49] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:04:02] *** Quits: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1) (Ping timeout: 240 seconds)
[10:50:08] *** Joins: shka (~herr@109.231.0.226)
[10:55:50] *** Joins: Josh_2 (~user@197.184.173.1)
[11:00:22] *** Quits: Josh_2 (~user@197.184.173.1) (Remote host closed the connection)
[11:00:44] *** Joins: Josh_2 (~user@197.184.173.1)
[11:12:56] *** Joins: tewi (~tewi@apn-95-41-56-223.dynamic.gprs.plus.pl)
[11:17:47] *** Joins: mzan (~quassel@mail.asterisell.com)
[11:35:38] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[11:37:05] *** Joins: lagash (lagash@lagash.shelltalk.net)
[11:53:32] *** Quits: silasfox (~sbv@p548d1123.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[12:09:29] *** Joins: JoshYoshi (~user@197.184.170.239)
[12:09:45] *** Joins: ilmu1 (~ilmu@176.76.241.149)
[12:11:00] *** Quits: Josh_2 (~user@197.184.173.1) (Ping timeout: 240 seconds)
[12:11:27] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:13:00] *** Quits: ilmu (~ilmu@176.76.242.178) (Ping timeout: 252 seconds)
[12:15:05] *** Joins: mzan (~quassel@mail.asterisell.com)
[12:26:03] *** JoshYoshi is now known as Josh_2
[12:32:12] *** Quits: Josh_2 (~user@197.184.170.239) (Ping timeout: 240 seconds)
[13:21:40] <ns12> Hello, is () and '() the same in the same way that () and NIL is the same? Or is there some complication introduced by read-time vs evaluation-time?
[13:21:57] <beach> The latter.
[13:22:33] <beach> The quote is a reader macro, so '() is turned into (QUOTE NIL) by the reader, i.e., a list of two elements. 
[13:22:55] <ns12> I see. That answers my question.
[13:22:59] <ns12> Thank you.
[13:23:07] <beach> Pleasure.
[15:56:19] *** Joins: eugercek (~user@user/eugercek)
[16:14:42] *** Joins: treflip (~user@user/treflip)
[16:24:48] *** Joins: dmgk (~dmgk@user/dmgk)
[16:47:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:30:17] *** Joins: lisp123 (~lisp123@94.201.199.103)
[17:48:47] *** Quits: lisp123 (~lisp123@94.201.199.103) (Read error: Connection reset by peer)
[17:49:31] *** Joins: lisp123 (~lisp123@80.227.200.125)
[18:07:48] *** Quits: drakonis (drakonis@user/drakonis) (Ping timeout: 240 seconds)
[18:08:12] *** Quits: lottaquestions (~nick@2607:fa49:5041:a200:b555:2e8f:fe4f:2e3d) (Ping timeout: 240 seconds)
[18:08:29] *** Joins: lottaquestions (~nick@2607:fa49:5041:a200:c52d:7d43:3699:c92e)
[18:11:16] *** Joins: drakonis (~drakonis@user/drakonis)
[18:11:57] *** Joins: lisp123_ (~lisp123@94.203.159.21)
[18:14:43] *** Quits: lisp123 (~lisp123@80.227.200.125) (Ping timeout: 256 seconds)
[18:28:27] *** Joins: random-nick (~random-ni@87.116.181.150)
[18:32:51] *** Quits: lisp123_ (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[18:32:56] *** Joins: lisp123 (~lisp123@94.203.159.21)
[18:35:38] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[18:46:54] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[19:43:23] *** Joins: aeth_ (~aeth@user/aeth)
[19:43:37] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[19:43:39] *** aeth_ is now known as aeth
[19:48:18] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[19:52:58] *** Joins: lisp123 (~lisp123@94.203.159.21)
[19:53:39] *** Joins: Bike (~Glossina@71.69.170.70)
[19:59:26] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[20:05:24] *** Joins: Oladon (~olad@98.43.81.226)
[20:15:41] *** Joins: lisp123_ (~lisp123@94.203.159.21)
[20:15:42] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[20:20:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[20:30:13] <White_Flame> ns12: () is interesting to me in that it isn't evaluated as an s-expression, even though it's a list.  I use '() when I want a literal empty list as a value in an evaluated location, even if () would technically work.
[20:40:12] <beach> The Common Lisp HyperSpec says that too.
[20:42:12] <beach> But it is always hard to find the relevant section.
[20:42:29] <mfiano> It's in the introduction IIRC
[20:43:56] <mfiano> Yes Chapter 1 (Introduction). Specifically 1.4.1.4.4
[20:45:01] <mfiano> Having transcribed most of the dpANS3 by hand, you sort of remember these things :)
[20:45:11] <beach> Indeed, that's it.
[20:55:55] *** Joins: lisp123 (~lisp123@94.203.159.21)
[20:55:56] *** Quits: lisp123_ (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[20:58:55] *** Joins: eugercek (~user@user/eugercek)
[21:14:56] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[21:15:16] *** Joins: lisp123 (~lisp123@94.203.159.21)
[21:16:31] *** Joins: lisp123_ (~lisp123@94.203.159.21)
[21:16:31] *** Quits: lisp123 (~lisp123@94.203.159.21) (Read error: Connection reset by peer)
[21:17:15] *** Joins: lisp123 (~lisp123@94.203.159.21)
[21:21:27] *** Quits: lisp123_ (~lisp123@94.203.159.21) (Ping timeout: 256 seconds)
[21:25:05] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[21:32:31] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[21:44:27] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 252 seconds)
[21:57:21] *** Quits: lisp123w (~user@80.227.170.170) (Ping timeout: 268 seconds)
[22:04:55] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[22:09:52] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:11:01] *** Quits: lisp123 (~lisp123@94.203.159.21) (Remote host closed the connection)
[22:29:26] *** Joins: lisp123 (~lisp123@94.203.159.21)
[22:46:12] *** Quits: eugercek (~user@user/eugercek) (Ping timeout: 272 seconds)
[23:07:42] *** Quits: lisp123 (~lisp123@94.203.159.21) (Remote host closed the connection)
[23:10:00] *** Joins: lisp123 (~lisp123@94.203.159.21)
[23:14:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:18:17] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[23:18:39] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:35:36] *** Quits: lisp123 (~lisp123@94.203.159.21) (Remote host closed the connection)
[23:37:18] *** Joins: lisp123 (~lisp123@94.203.159.21)
[23:40:32] *** Quits: lisp123 (~lisp123@94.203.159.21) (Remote host closed the connection)
[23:56:35] *** Joins: Oladon (~olad@98.43.81.226)
