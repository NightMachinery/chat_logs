[00:17:11] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[00:20:32] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 240 seconds)
[00:26:19] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[01:02:27] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: No Ping reply in 180 seconds.)
[01:03:52] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[01:08:27] *** Quits: jlrnick (~josephler@2a01cb040a15940038cd600d7ff48e33.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:19:44] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:36] *** Joins: sagax (~sagax_nb@user/sagax)
[01:24:57] *** Joins: favonia (~favonia@user/favonia)
[01:27:16] *** Quits: favonia (~favonia@user/favonia) (Client Quit)
[01:36:39] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 256 seconds)
[01:45:26] *** Joins: Everything (~Everythin@37.115.210.35)
[01:46:26] <d_bot> <AZAH> ```ml
[01:46:27] <d_bot> <AZAH> val concat_map : ('a -> 'b list) -> 'a list -> 'b list
[01:46:28] <d_bot> <AZAH> ```
[01:46:29] <d_bot> <AZAH> concat_map f l gives the same result as List.concat (List.map f l). Tail-recursive.
[01:46:31] <d_bot> <AZAH>
[01:46:32] <d_bot> <AZAH> ```ml
[01:46:33] <d_bot> <AZAH> val concat : 'a list list -> 'a list
[01:46:35] <d_bot> <AZAH> ```
[01:46:36] <d_bot> <AZAH>
[01:46:37] <d_bot> <AZAH> How can concat_map give the same result as concat (map) when it expects 'a list list
[02:09:50] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:24:39] *** Quits: cedric (~cedric@2a01:cb11:821:7c00:2241:6d94:7716:4be7) (Quit: Konversation terminated!)
[02:52:10] <pgiarrusso> AZAH: since `f : 'a -> 'b list`, `map f xs: 'a list list` (for the right `xs`), and `concat` gets back to `'a list`.
[02:54:22] <d_bot> <NULL> Are you answering the question from # beginners ?
[03:22:03] *** Quits: andreypopp (~andreypop@94.188.42.16) (Ping timeout: 256 seconds)
[03:23:54] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 252 seconds)
[03:34:06] *** Quits: SoniEx2 (~quassel@autistic.space) (Ping timeout: 245 seconds)
[03:39:55] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[03:42:05] *** Quits: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net) (Remote host closed the connection)
[04:04:39] *** Joins: Soni (~quassel@autistic.space)
[04:06:41] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 250 seconds)
[05:08:46] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[05:14:40] *** Quits: oriba (~oriba@dynamic-077-183-072-090.77.183.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:39:26] *** Joins: mbuf (~Shakthi@122.174.226.171)
[06:07:52] *** Joins: shebang (~qynn@ip-96-43-235-154.dsl.netrevolution.com)
[06:57:13] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[07:03:50] *** Joins: tizoc (~user@li296-221.members.linode.com)
[07:15:22] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:15:37] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:27:33] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[07:56:13] *** Joins: bobo (~bobo@37.166.76.237)
[07:56:54] *** Quits: spip (~bobo@37.169.21.14) (Ping timeout: 260 seconds)
[08:12:54] *** Joins: gravicappa (~gravicapp@46.191.232.8)
[08:25:27] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:38:19] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:36:14] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:36:34] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:57:56] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[10:19:39] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[10:27:20] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[10:47:17] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[10:57:06] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[10:57:33] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[11:07:37] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[11:10:27] *** Joins: andreypopp (~andreypop@94.188.42.16)
[11:21:18] *** Quits: andreypopp (~andreypop@94.188.42.16) (Ping timeout: 252 seconds)
[11:30:53] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[11:32:07] *** Joins: andreypopp (~andreypop@94.188.42.16)
[11:35:30] *** Joins: andreypopp_ (~andreypop@94.188.42.16)
[11:36:31] *** Quits: andreypopp (~andreypop@94.188.42.16) (Ping timeout: 256 seconds)
[11:42:15] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[11:42:46] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[11:57:51] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 245 seconds)
[12:02:45] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[12:07:30] *** Joins: dextaa_ (~dextaa@user/dextaa)
[12:18:07] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[12:18:41] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[12:29:50] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[12:31:54] *** Joins: olle (~olle@90-231-175-36-no206.tbcn.telia.com)
[12:39:14] *** Quits: sparogy (~sparogy@2604:a880:cad:d0::648:8001) (Ping timeout: 260 seconds)
[12:39:29] *** Joins: sparogy (~sparogy@2604:a880:cad:d0::648:8001)
[12:59:35] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[13:01:01] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:11:45] *** Joins: kakadu (~kakadu@195.19.236.234)
[13:15:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[13:16:56] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[13:33:22] *** Joins: bgs (~bgs@cpe-212-85-160-171.cable.telemach.net)
[13:54:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[13:55:34] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:09:33] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4.1)
[14:11:26] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[14:16:51] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[14:33:07] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[14:40:17] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[14:51:43] *** Joins: bartholin (~bartholin@158.110.71.61)
[15:16:22] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Read error: Connection reset by peer)
[15:16:44] *** Joins: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5)
[15:17:03] *** Quits: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5) (Remote host closed the connection)
[15:34:46] *** Joins: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5)
[15:39:37] *** Quits: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5) (Ping timeout: 256 seconds)
[15:53:31] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[15:55:36] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[15:55:45] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[15:56:45] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[15:59:34] *** Joins: emp (~emp@blaubaer.tilab.tuwien.ac.at)
[16:08:53] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[16:12:21] <d_bot> <reynir> Seems the question was deleted on discord (but you can't delete messages on irc)
[17:15:57] *** Quits: bartholin (~bartholin@158.110.71.61) (Ping timeout: 256 seconds)
[17:23:51] *** Quits: gahr (~gahr@user/gahr) (Quit: leaving)
[17:24:34] *** Joins: gahr (~gahr@user/gahr)
[17:28:50] *** Joins: bartholin (~bartholin@158.110.71.61)
[17:30:10] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[17:40:15] *** Quits: gravicappa (~gravicapp@46.191.232.8) (Ping timeout: 252 seconds)
[17:46:04] *** Joins: troydm1 (~troydm@host-176-37-124-197.b025.la.net.ua)
[17:48:05] *** Quits: troydm (~troydm@host-176-37-124-197.b025.la.net.ua) (Ping timeout: 250 seconds)
[18:10:25] *** Quits: gahr (~gahr@user/gahr) (Quit: Reconnecting)
[18:10:39] *** Joins: gahr (~gahr@user/gahr)
[18:19:40] *** Quits: troydm1 (~troydm@host-176-37-124-197.b025.la.net.ua) (Quit: What is Hope? That all of your wishes and all of your dreams come true? To turn back time because things were not supposed to happen like that (C) Rau Le Creuset)
[18:19:57] *** Joins: troydm (~troydm@host-176-37-124-197.b025.la.net.ua)
[18:23:19] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[18:27:00] *** Joins: neilthereildeil (~neilthere@pool-71-191-164-234.washdc.fios.verizon.net)
[18:28:21] <neilthereildeil> hey all
[18:28:47] <neilthereildeil> im looking at ocaml documentation for Unix.select and the linux man page for select, and they appear different
[18:29:27] <neilthereildeil> Unix.select (https://ocaml.org/api/Unix.html) says "a negative fourth argument means no timeout (unbounded wait)"
[18:30:34] <neilthereildeil> but man select says "If timeout is specified as NULL, select() blocks indefinitely waiting for a file descriptor to become ready."
[18:31:09] <neilthereildeil> how can i use ocaml's Unix.select to wait indefinately?
[18:32:33] <octachron> By giving it a negative value as specified in the documentation?
[18:32:38] <d_bot> <orbitz> neilthereildeil: what is unclear?
[18:34:44] <neilthereildeil> ocaml says to pass a negative number, but Unix.select says to pass null
[18:35:29] <d_bot> <orbitz> You cannot pass null to `Unix.select`
[18:36:06] <octachron> The C documentation for the C version od select says to send null to the C version of `select`.
[18:36:48] <octachron> The behavior (and even the existence) of this C version of select is mostly irrelevant for using OCaml's Unix.select.
[18:37:36] <neilthereildeil> ok, then ill pass a negative number
[18:37:51] <neilthereildeil> also what does the "!left" in this line do?
[18:37:52] <neilthereildeil> let r, _, _ = Unix.select [ fd ] [] [] (min max_blocking_time !left) in
[18:37:58] <neilthereildeil> and what is that min?
[18:38:15] <d_bot> <orbitz> `min` is a function, and you should look up the documentation on references
[18:40:05] <neilthereildeil> min function on max_blocking_time and 0 (if left is nonzero)?
[18:40:30] <d_bot> <orbitz> Nope
[18:43:50] <octachron> `!` is the unary operator for reference access
[18:45:36] <octachron> https://ocaml.org/manual/coreexamples.html#s%3Aimperative-features
[18:46:59] *** Quits: SquidDev (~SquidDev@autoclave.squiddev.cc) (Quit: Ping timeout (120 seconds))
[18:47:18] *** Joins: SquidDev (~SquidDev@autoclave.squiddev.cc)
[18:51:37] *** Joins: gravicappa (~gravicapp@46.191.232.8)
[18:54:21] *** Joins: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5)
[19:01:18] <neilthereildeil> oik, so it looks like !left is dereferencing the left variable
[19:01:45] <neilthereildeil> so whats are the semantics of "min max_blocking_time !left"?
[19:02:06] <neilthereildeil> is it finding the min of max_blocking_time and left?
[19:02:09] *** Quits: mro (~mro@2002:5cc3:b5a7:0:45f8:6367:a63b:44f5) (Remote host closed the connection)
[19:02:31] <d_bot> <NULL> It's basically OCaml for `min(max_blocking_time, *left)` in C
[19:02:55] <d_bot> <NULL> left is a reference, not an ine
[19:02:57] <d_bot> <NULL> int*
[19:03:21] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[19:03:51] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[19:05:36] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:05:47] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[19:17:03] *** Quits: chrisz (r5vkwyn2f7@55d40718.access.ecotel.net) (Ping timeout: 252 seconds)
[19:17:30] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[19:18:40] *** Joins: chrisz (vb2m136bq8@55d46462.access.ecotel.net)
[19:19:43] *** Quits: neilthereildeil (~neilthere@pool-71-191-164-234.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[19:21:15] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Remote host closed the connection)
[19:34:19] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[19:53:03] *** Joins: spip (~bobo@37.170.7.231)
[19:53:28] *** Quits: bobo (~bobo@37.166.76.237) (Read error: Connection reset by peer)
[20:02:18] *** Joins: mro (~mro@port-92-195-181-167.dynamic.as20676.net)
[20:06:09] *** Joins: zebrag (~chris@user/zebrag)
[20:08:24] *** Joins: neilthereildeil (~neilthere@pool-71-191-164-234.washdc.fios.verizon.net)
[20:09:07] *** Quits: mro (~mro@port-92-195-181-167.dynamic.as20676.net) (Quit: Leaving...)
[20:25:02] *** Joins: vicfred (~vicfred@user/vicfred)
[21:05:01] *** Quits: bartholin (~bartholin@158.110.71.61) (Quit: Leaving)
[21:19:54] *** Quits: mbuf (~Shakthi@122.174.226.171) (Quit: Leaving)
[21:48:38] <neilthereildeil> is ther a way to attach to an existing ocaml program and dump the callstack?
[21:50:56] <companion_cube> maybe ptrace? not sure
[21:53:18] <qwr> i don't think that ptrace gives call stack - maybe gdb gives something
[21:53:44] <companion_cube> ugh, yeah, sorry. I think gdb uses ptrace though :D
[21:54:19] <neilthereildeil> isnt that only for syscalls?
[21:54:40] <neilthereildeil> i need t oattach to an ocaml process to understand where it is executing during this error condition
[21:54:49] <neilthereildeil> will ocamldebug help me?
[22:00:43] *** Quits: olle (~olle@90-231-175-36-no206.tbcn.telia.com) (Ping timeout: 250 seconds)
[22:05:31] <octachron> Possibly, before that did you also run with "OCAMLRUNPARAM=b" to enable the backtrace?
[22:06:15] <neilthereildeil> since this is a nondeterministically reproducable bug, is there any way to avoid perturbing any of the process timings or code or execution paths?
[22:06:47] <neilthereildeil> i dont wanna introduce another variable where other parameters can change how the process executes
[22:06:57] <neilthereildeil> i didnt run with that parameter
[22:07:13] <neilthereildeil> i just wanna see the process exactly as it is in the current state
[22:07:18] <neilthereildeil> and get the stacktrace
[22:25:10] <sleepydog> are you on linux? do you get something useful from /proc/$pid/stack ?
[22:27:27] <neilthereildeil> sleepydog: its empty
[22:27:34] *** Joins: dextaa_ (~dextaa@user/dextaa)
[22:28:12] <neilthereildeil> does ocaml have some kind of runtime that causes ends up in an unreadable callstack for native tools like the kernel's proc/pid/stack or gdb's bt?
[22:28:42] <sleepydog> unsure. i know perf at least can understand the stack for native binaries
[22:29:10] <neilthereildeil> ocamlc compiles to a native binary, right?
[22:30:05] <octachron> No ocamlc is the bytecode compiler. The native compiler is ocamlopt
[22:32:16] <neilthereildeil> but if its compiled to an ELF like in this case, i wouldnt see the stack structure corresponding to the ocaml code, would I?
[22:32:33] <neilthereildeil> because theres a bytecode layer between the ocaml code and the machine code?
[22:33:22] <octachron> There is no bytecode layer with ocamlopt.
[22:34:03] <neilthereildeil> but i woldnt see ocaml functions in the proc/pid/stack or gdb callstacks, would I?
[22:35:21] <sleepydog> it works for me; `gdb path/to/binary -p $(pgrep my-process.exe)` then running `bt` shows the ocaml functions
[22:36:47] <neilthereildeil> did u build with -g?
[22:37:03] <sleepydog> i built with dune, which I think includes -g by default
[22:59:03] <neilthereildeil> also, i need help with ocaml code please
[22:59:21] <neilthereildeil> i see a function that doesnt appear to be called anywhere
[22:59:33] <neilthereildeil> https://github.com/xen-project/xen/blob/95d9ab46143685f169f636cfdd7997e2fc630e86/tools/ocaml/libs/xs/xs.ml#L139
[22:59:58] <neilthereildeil> is this function exported in a special way such that i wouldnt see it in the code?
[23:00:36] <neilthereildeil> the only other reference i see of it is in an mli file
[23:09:35] <sleepydog> neilthereildeil: i'm not familiar with this library, but that function is in the .mli file, so it's part of the library's public API. any codebase importing this library can call it.
[23:10:02] <neilthereildeil> sleepydog: thanks so much
[23:11:02] <neilthereildeil> so does this mean this ocaml code would be compiled to a linux .so or something and this function would be part of the exported functions in that .so?
[23:12:57] <sleepydog> I don't think you usually work with .so files, though i think you might be able to generate them with the right tools. you might want to read https://ocaml.org/manual/native.html
[23:20:02] *** Quits: neilthereildeil (~neilthere@pool-71-191-164-234.washdc.fios.verizon.net) (Quit: Client closed)
[23:20:15] *** Joins: neilthereildeil (~neilthere@pool-71-191-164-234.washdc.fios.verizon.net)
[23:20:18] <neilthereildeil> sleepydog: if read_watchevent_timeout is exposed as a library, i should see this text where other programs call into this library, right?
[23:22:51] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Ping timeout: 245 seconds)
[23:22:53] <sleepydog> yes. although it could be assigned to a local variable or passed as an argument, too
[23:23:19] <neilthereildeil> but it would have to be referenced by name, right? or can they reference by ordinal or something else?
[23:23:34] <neilthereildeil> a grep -R didnt show any other text that matched it...
[23:24:54] <sleepydog> it would have to be named, AFAIK. you cant get a function by address, AFAIK
[23:25:43] *** Joins: oriba (~oriba@dynamic-089-014-152-127.89.14.pool.telefonica.de)
[23:26:38] *** Joins: cedric (~cedric@2a01:cb11:821:7c00:687b:b58d:cf7d:aae5)
[23:37:20] *** Quits: dextaa_ (~dextaa@user/dextaa) (Read error: Connection reset by peer)
[23:39:17] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[23:39:34] *** Joins: dextaa_ (~dextaa@user/dextaa)
[23:43:56] <octachron> neilthereildeil, since it is a public library, any client code can use the function. "grep -R" is not meaningful since you don't have all access to all OCaml that has been written or will ever be written
[23:44:25] <neilthereildeil> no, im just looking for the library consumers in this repo
[23:44:34] <neilthereildeil> this is the xen hypervisor source tree
[23:44:43] <octachron> And why would it be in this repo?
[23:48:48] <neilthereildeil> this oxenstored if a program written in ocaml that implements a part of the hypervisor's database to track VMs
