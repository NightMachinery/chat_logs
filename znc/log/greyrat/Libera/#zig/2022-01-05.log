[00:05:45] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9pliwyyyi5w6hmu17es7.ipv6.telus.net)
[00:05:46] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[00:09:40] <andrewrk> luuk, did you forget to prefix with ZIG_EXTERN_C ?
[00:10:06] <andrewrk> otherwise c++ will mangle the symbol 
[00:10:39] <Franciman> andrewrk: I wanted to ask you about what you think about sentinels of union types
[00:10:44] <Franciman> in sentinel terminated arrays
[00:11:31] <Franciman> is a sentinel terminated array able to be of any type?
[00:11:35] <Franciman> or just struct and builtins?
[00:11:54] <luuk> andrewrk: I did prefix with ZIG_EXTERN_C
[00:13:39] *** rwb is now known as rb
[00:15:52] <andrewrk> luuk, hmm I'm not sure why that would happen
[00:16:53] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Ping timeout: 256 seconds)
[00:17:20] <luuk> Alright, no worries. I'll also give the opposite direction a try.
[00:21:06] *** Quits: ofelas (~ofelas@ti0071a400-7012.bb.online.no) (Remote host closed the connection)
[00:21:19] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[00:22:07] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[00:25:50] *** Tekk_ is now known as Tekk
[00:27:39] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Quit: Quit)
[00:27:51] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[00:29:56] *** Joins: ofelas (~ofelas@ti0071a400-7012.bb.online.no)
[00:29:59] <luuk> Great, in the other direction it all builds successfully. I think I can manage from here :) Time to make some users happy
[00:30:48] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[00:38:52] <andrewrk> ðŸ¥°
[00:40:33] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[00:41:09] *** Joins: biog (~user1@159.224.42.85)
[00:58:31] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:00:54] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[01:02:09] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[01:05:30] *** Parts: xiamx (~xiamx@2001:470:69fc:105::1:5692) ()
[01:09:41] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b)
[01:17:37] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[01:17:55] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[01:19:54] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (Read error: Connection reset by peer)
[01:37:32] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[01:52:10] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Ping timeout: 268 seconds)
[01:53:50] *** Joins: xackus_ (~xackus@185.15.0.3)
[01:57:11] *** Quits: xackus (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[02:09:23] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9pliwyyyi5w6hmu17es7.ipv6.telus.net) ()
[02:12:37] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 256 seconds)
[02:14:25] *** Quits: ofelas (~ofelas@ti0071a400-7012.bb.online.no) (Remote host closed the connection)
[02:16:16] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[02:17:30] *** Joins: ofelas (~ofelas@ti0071a400-7012.bb.online.no)
[02:17:43] *** Quits: xackus_ (~xackus@185.15.0.3) (Ping timeout: 256 seconds)
[02:24:40] *** Joins: Stalevar (~stalevar@user/stalevar)
[02:24:51] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[02:26:33] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[02:39:42] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[02:46:14] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b) (Read error: Connection reset by peer)
[02:46:51] *** Joins: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b)
[02:49:49] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[02:50:17] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[02:56:21] *** Joins: tiehuis (~tiehuis@user/tiehuis)
[03:00:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[03:06:57] *** Quits: rgrinberg (~textual@2806:101e:7:78bb:a849:360e:ff7:6a7b) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[03:12:57] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[03:13:49] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[03:14:26] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[03:21:07] *** Joins: rgrinberg (~textual@177.246.218.103)
[03:25:54] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Ping timeout: 268 seconds)
[03:26:13] *** Joins: Gehenna (~Gehenna@84-80-55-51.fixed.kpn.net)
[03:27:49] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[03:34:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[03:35:01] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[03:38:31] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7)
[03:44:49] *** Quits: Gehenna (~Gehenna@84-80-55-51.fixed.kpn.net) (Read error: Connection reset by peer)
[03:44:57] *** Joins: Gehenna (~Gehenna@84-80-55-51.fixed.kpn.net)
[03:46:21] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[03:49:31] *** Quits: Gehenna (~Gehenna@84-80-55-51.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:58:35] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:11:31] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:27:25] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:47:17] *** Quits: biog (~user1@159.224.42.85) (Quit: ZZZzzzâ€¦)
[04:47:32] *** Quits: rgrinberg (~textual@177.246.218.103) (Read error: Connection reset by peer)
[04:48:20] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:49:49] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[05:11:41] *** Quits: keyehzh_ (~keyehzh@user/keyehzh) (Ping timeout: 256 seconds)
[05:12:36] *** Joins: constxd (~brad@142.134.38.68)
[05:14:35] <constxd> hey kings
[05:14:49] *** Joins: livoreno (~livoreno@user/notzmv)
[05:15:49] <constxd> taking a look at zig for the first time and i am a bit confused about all this allocator stuff
[05:17:50] <constxd> what is the rationale behind requiring explicit references to allocators all over the place
[05:18:23] <constxd> it's not very often i want to use something other than malloc()
[05:18:56] <constxd> now every arraylist has to store an extra pointer in it?
[05:21:21] <freshcoffee> there is ArrayListUnmanaged with the tradeoff to note store allocator in a list instance, but you do need to supply allocator during method calls
[05:21:36] <freshcoffee> s/note/not/
[05:25:47] <Tekk> constxd, Because a lot of the time you do :)
[05:26:56] <constxd> why?
[05:27:22] <Tekk> So you could do what C does, where if you want to, say, use a fixed buffer for this because you know the maximum size of the input you're the one in charge of maintaining all the memory.
[05:27:37] <constxd> c++ seems to be pretty providing opt-in custom allocators without making you specify them all over the place
[05:27:45] <Tekk> Vs having an "allocator" interface you just pass around.
[05:27:48] <constxd> pretty good at*
[05:28:31] <Tekk> Can't say I'm an expert in that. How do I make "new" use my custom arena-based allocator for all objects?
[05:29:19] <Tekk> (or the STL at large)
[05:30:17] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[05:30:39] <constxd> well for the STL, the classes take allocator as an optional template parameter
[05:30:49] <constxd> std::vector<int, my_allocator> v;
[05:31:39] <Tekk> That's fair enough.
[05:33:05] <constxd> i feel like in most applications, you tend to create a lot of objects and most of the time you either don't know precisely how much memory they'll need or don't care enough to calculate it because the performance benefit of using a custom fixed buffer allocator for it is inconsequential
[05:33:54] <constxd> maybe you benchmark your program and it turns out this one part of it is doing a ton of allocation and it's a bottleneck
[05:34:14] <constxd> then you maybe want a custom allocator there but everywhere else you don't care
[05:35:14] <Tekk> A custom fixed buffer allocator for it might be inconsequential (unless you wanna intentionally limit how much memory it can use for example,) but it might make sense to use an arena allocator if you have a really cyclic usage pattern or something.
[05:35:42] <Tekk> Or just at the top of your program do var alloc = std.mem.GeneralPurposeAllocator and suddenly get valgrind on your app for free.
[05:35:49] <Tekk> For the price of some performance
[05:36:43] <constxd> this website im reading says you can use std.heap.c_allocator for performance
[05:36:48] <constxd> but then you depend on libc
[05:36:55] <Tekk> That'd be equivalent to malloc basically, yeah.
[05:37:04] <constxd> why isn't there just a zig implementation of malloc() in the std lib
[05:37:13] <constxd> i feel like that's what you'd want in release builds
[05:37:19] <constxd> and then the generalpurpose one in debug
[05:37:29] <constxd> like what do most people default to
[05:38:10] <Tekk> Honestly the overhead of GPA isn't bad. A lot of people just use that as far as I know.
[05:38:49] <constxd> hmm ok
[05:38:53] <constxd> thank you
[05:40:40] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:343c:13e1:2b48:94a4) (Remote host closed the connection)
[05:42:16] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:343c:13e1:2b48:94a4)
[05:43:25] <tsmanner> constxd: I'm coming from a lot of C++ programming, one side-effect of zig allocators has been that I've been a lot more considerate of my heap usage to begin with.  I'm using GPA mostly, though nothing I'm doing is performance sensitive, and then paying more attention to how I move data around so that I need allocators in fewer places in my programs.
[05:44:23] <tsmanner> That's not related to the rationale behind it, just a little self-reflection
[05:47:59] <squeek502> constxd, "why isn't there just a zig implementation of malloc() in the std lib": because it hasn't been written yet, see https://github.com/ziglang/zig/blob/master/lib/std/heap/general_purpose_allocator.zig#L36-L42
[06:02:01] *** Joins: Kingsquee (~Kingsquee@node-1w7jr9pliwyyxved185uxu6en.ipv6.telus.net)
[06:03:12] *** Joins: neurocyte09 (~neurocyte@user/neurocyte)
[06:05:01] *** Quits: neurocyte0 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:05:01] *** neurocyte09 is now known as neurocyte0
[06:09:57] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 240 seconds)
[06:11:54] *** Joins: outfox (~outfox@213.144.147.16)
[06:11:55] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[06:11:55] *** Joins: outfox (~outfox@user/outfox)
[06:12:13] *** Quits: earnest (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[06:17:26] *** Joins: tomku (~tomku@user/tomku)
[06:29:11] *** Quits: nurbl (~jofo@c83-252-92-24.bredband.tele2.se) (Ping timeout: 256 seconds)
[06:42:13] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 240 seconds)
[06:43:42] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[06:44:18] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Quit: WeeChat 3.0.1)
[06:47:23] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[06:51:59] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[06:52:11] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[06:52:57] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[06:53:09] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[06:57:25] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[06:58:42] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:58:47] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 256 seconds)
[07:02:58] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Ping timeout: 268 seconds)
[07:05:01] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[07:10:19] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[07:23:02] *** Joins: constxd (~brad@142.134.38.68)
[07:48:57] *** Quits: ur5us (~ur5us@2406:e002:6c7b:2301:f812:b76c:617f:99d7) (Ping timeout: 240 seconds)
[07:53:53] *** Joins: freshcoffee (~fresh@user/freshcoffee)
[08:05:49] *** Quits: moog (~moog@107.126.53.244) (Remote host closed the connection)
[08:09:37] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[08:58:10] *** Quits: livoreno (~livoreno@user/notzmv) (Read error: Connection reset by peer)
[09:03:07] *** Joins: landon (~landon@97-113-17-162.tukw.qwest.net)
[09:19:07] <da_lorax> I'm pretty confused as to the semantics of ArrayList.replaceRange
[09:19:51] <da_lorax> it seems like there's a bug in that it panics if I try to replace a range that goes off the end of the list rather than extending (which the doc comment seems to say it should)
[09:20:33] <da_lorax> but also it takes a len argument that determines behavior, which seems weird given that the new_range also includes its own len
[09:23:37] *** Joins: cheeze42 (~cheeze42@2601:146:380:4220:d86a:34f5:646f:ed45)
[09:24:08] <da_lorax> so I thought I'd try to fix it, and I'm finding I'm not actually sure what the intent of this API is in the first place
[09:30:10] *** Joins: aKriJcz (~jirka@mail.tcz.cz)
[09:33:12] *** Joins: k0r10n (~k0r10n@95.179.129.166)
[09:33:33] <Arnavion> `start` and `len` together define what part of itself is replaced. `len` doesn't have to be equal to `new_range.len`
[09:34:58] <da_lorax> yeah, that makes sense (sort of), the comment also says 'Grows list if len < new_items.len' which doesn't look like what it actually does, and why switch behavior based on if you're using the whole range or not?
[09:35:08] <Arnavion> It seems to be doing that to me
[09:35:19] <Arnavion> That's the self.insertSlice call
[09:35:30] <da_lorax> Also when would the len parameter be preferable to making a subslice of new_items?
[09:35:50] *** Quits: cheeze42 (~cheeze42@2601:146:380:4220:d86a:34f5:646f:ed45) (Quit: Client closed)
[09:35:51] <Arnavion> Say you're replacing five elements with seven elements. The first five will directly overwrite the existing five. The remaining two will be given to insertSlice
[09:36:32] <da_lorax> Well, if you have safety off. If you don't, creating the range on the first line of the function panics cause after_range is outside items
[09:36:41] <da_lorax> at least that's what's happening to me
[09:36:54] <Arnavion> Only if you give it an incorrect `len`
[09:37:02] <da_lorax> also, the insetSlice key is based on range.len, not 'len' the parameter
[09:37:09] <Arnavion> Both start and after_range will be in bounds
[09:37:38] <da_lorax> uhhhh... that's not what's happening? What pastebin do we use here?
[09:38:08] <da_lorax> granted I started writing this language like 5 days ago so I'm probably confused, but this ... definitely isn't doing what I'd expect
[09:38:37] <Arnavion> <da_lorax> also, the insetSlice key is based on range.len, not 'len' the parameter   < It's using the correct parameters.
[09:39:03] <Arnavion> As I said, if you replace five elements with seven elements, the first five of those seven directly overwrite the existing five elements. The remaining two are given to insertSlice
[09:39:06] <da_lorax> Where should I paste the test case that I am confused by?
[09:39:15] <da_lorax> yes, that's what I expected, but that's not what I'm seeing
[09:39:48] <Arnavion> Nobody cares what website you use to paste things
[09:40:15] <da_lorax> sweet. Some channels do. Sec
[09:41:47] <da_lorax> https://pastebin.com/42deHrth << This panics
[09:42:07] <Arnavion> Yes, because you told it to replace 0..2 in an empty list
[09:42:21] <Arnavion> `0, 0, &...` is what you want
[09:42:46] <Arnavion> "Start at element zero, and replace the next zero elements with the slice I gave"
[09:43:36] <Arnavion> What you have is "Start at element zero, and replace the next two elements with the slice I gave", but since your list doesn't have "the next two elements" of course it's going to be out-of-bounds
[09:44:30] <Arnavion> The existing tests already test this btw
[09:45:02] <da_lorax> oh, that's... not the function I need
[09:45:20] <Arnavion> (And for reference, this function is often called "splice" in other languages, and works exactly the same way"
[09:48:47] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[09:49:58] <da_lorax> Javascript Array.splice() will extend off the end if you ask it to, I don't know of any other languages with this construct
[09:50:23] *** Joins: outfox (~outfox@213.144.147.16)
[09:50:24] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[09:50:24] *** Joins: outfox (~outfox@user/outfox)
[09:50:51] <Arnavion> JS, Rust, and Zig of course
[09:50:59] <Arnavion> are the ones I can immediately think of
[09:51:10] <da_lorax> JS doesn't do this, A.splice(0, 2, 1, 2) turns A into [1,2]
[09:51:33] <da_lorax> (A was [] initially)
[09:52:21] <Arnavion> Presumably it's "helpfully" clamping the second parameter for you
[09:52:30] <Arnavion> 0, 0, 1, 2 will give you [1, 2] as well, which is how it's supposed to work
[09:52:39] <da_lorax> 'rust splice' on google is returning a struct, I don't see a function with that name and I'm not aware of one with that semantics but I can never find anything in rustdoc
[09:52:54] <da_lorax> "supposed to work" is ... subjective
[09:52:56] <Arnavion> It returns a struct that's an iterator of the elements you replaced
[09:53:14] <Arnavion> It doesn't affect the operation itself, for which the parameters are essentially the same
[09:53:45] <Arnavion> The part to be replaced is specified as a single range type instead of two integers, and the new elements are specified as an iterator instead of a slice. The point is the same
[09:54:51] <Arnavion> <da_lorax> "supposed to work" is ... subjective   < https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice   It's called "deleteCount" which is exactly how zig treats it. The only difference is that it clamps, as I said
[09:55:59] <Arnavion> (It clamps negative values to zero too. Presumably you're not hoping zig should copy that behavior too.)
[09:56:49] <da_lorax> yeah, I need the clamping version, I've through of JS splice as "Mogrify the array such that start..len is the remaining args list"
[09:57:13] <Arnavion> Well, now you know that's not how the JS version works either
[09:57:21] <da_lorax> It is though
[09:57:34] <Arnavion> For one, your interpretation doesn't work for any start > 0
[09:57:35] <da_lorax> but it's... not important, I'll just write the one I want
[09:57:47] <da_lorax> *start+len
[09:58:18] <Arnavion> And for another, your interpretation doesn't work for deleteCount != N (the N of itemN)
[10:00:33] <da_lorax> true
[10:01:54] <da_lorax> Apparently I've never used it that way lol
[10:03:18] <da_lorax> I do kinda think the clamping version is helpful, but thinking of it as "number of items to remove and replace with new_range" makes it make a lot more sense
[10:04:07] <da_lorax> and I didn't make the connection between replaceRange and splice
[10:08:06] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[10:13:06] <da_lorax> There's not a function to do that, is there? I want to stick a range into a list starting at some offset, clobbering existing values, and possibly extending
[10:15:54] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Read error: Connection reset by peer)
[10:16:25] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[10:23:47] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[10:27:45] <da_lorax> Is there supposed to be more info after "memory address ... leaked:" when using testing.allocator? There's a colon and two blank lines in the output, I feel like it's trying to tell me something
[10:28:59] <da_lorax> but alas, I cannot hear
[10:43:39] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[10:46:13] *** Joins: jonas_ (~textual@55867b35.cust.multi.fi)
[10:51:21] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:06:10] *** Quits: d0p1 (~d0p1@gateway/tor-sasl/d0p1) (Remote host closed the connection)
[11:07:54] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[11:32:07] <Arnavion> On the lines after that i'll print a stack trace in the same way that it does for panics in safe mode
[11:32:10] <Arnavion> it'll*
[11:32:50] <Arnavion> eg   https://paste.rs/Zom
[11:46:41] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[11:55:20] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:58:27] <da_lorax> Do I have to do something to make that happen beyond `zig build test`?
[11:59:08] *** Quits: danderson (~dave@63.81.90.235) (Quit: WeeChat 3.3)
[11:59:53] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Client Quit)
[11:59:53] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[12:00:08] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[12:01:11] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[12:01:57] <da_lorax> cause mine is not doing that, there's just 2 blank lines instead of the stack
[12:02:33] <da_lorax> (I'm on windows if that matters)
[12:03:25] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[12:03:41] <da_lorax> Is there an idiomatic way to initialize an array on the stack without listing every member?
[12:03:42] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[12:03:53] <da_lorax> i.e. https://paste.rs/nY7
[12:04:19] <da_lorax> ideally I'd like them all to start out zeroed and then I can just set the relevant ones in the loop
[12:05:02] <da_lorax> but I'm not sure how to do it without explicitly writing .{.red=0, .green=0, .blue=0} 8 times
[12:21:43] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[12:22:26] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:26:22] <jcmoyer> da_lorax: you can use the ** operator, e.g. var pixels = [_]Color{.{.red = 0, .green = 0, .blue = 0}} ** 8;
[12:31:32] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[12:31:55] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[12:31:55] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[12:32:12] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[12:32:13] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[12:34:08] <da_lorax> much nicer, thanks
[12:36:26] <da_lorax> ok one more noob question before bed, where does std.log.info() output go in tests? Can I make it show up on stdout?
[12:43:40] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[12:47:49] <luuk> da_lorax: test output is being overwritten by the test runner, so if you want to see some output you'll have to prepend a linebreak in your log message.
[12:54:11] <da_lorax> doesn't seem to work... Could this be related to why I'm not seeing stack traces for memory leaks?
[12:54:28] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[12:55:11] <da_lorax>     I made a test that's just std.log.info("\n\n\nTEST\n\n\n", .{});
[12:56:36] <da_lorax> and got nothing
[12:57:45] <luuk> What build mode are you using?
[13:01:13] *** Joins: biog (~user1@159.224.42.85)
[13:02:28] <da_lorax> `zig build test`
[13:04:11] <ikskuh> da_lorax: what's the mode that is passed to the build step in your build.zig?
[13:05:11] <luuk> Also, are you sure the test in question is being ran at all? Zig is lazy, so only tests in files that are referenced will be ran. Meaning that if the test is in another file, and that file is not referenced, the test will not be ran.
[13:05:53] <da_lorax> this is in a folder I just ran `zig init-exe` in, it has one file and one test and a main that says the usual line and no other changes
[13:06:14] *** Quits: Kingsquee (~Kingsquee@node-1w7jr9pliwyyxved185uxu6en.ipv6.telus.net) ()
[13:08:03] <da_lorax> It's not getting overwritten by a \r cause I can `2> file; xxd file` and there's nothing other than what I see
[13:08:04] <luuk> da_lorax: Can you try a higher log-level, such as using std.log.err?
[13:08:04] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[13:08:39] <luuk> The log levels were recently changed, so maybe that means `info` isn't high enough to output during tests.
[13:08:43] <da_lorax> Oh hey, there it is
[13:08:58] <da_lorax> that seems to be the case... how do i change the level? I'd like to see info()s from things being called in tests
[13:09:11] <da_lorax> without having to change all the infos in my program to err
[13:11:41] <ikskuh> in tests, you can only use .err
[13:11:57] <ikskuh> if you want to have some debug printing (for printf debugging), use std.debug.print()
[13:12:10] <ikskuh> logs are semantically different and if a test logs an error, that is considered an error afaik
[13:12:43] *** Joins: koollman (samson_t@user/koollman)
[13:12:54] <luuk> Actually, you can overwrite `std.testing.log_level = .debug` and it will work.
[13:13:01] <luuk> Within your test case that is
[13:13:07] <ikskuh> oh! nice
[13:13:16] <ikskuh> can we also expect logs? :thinking: 
[13:13:43] *** Joins: badsektor (~badsektor@user/badsektor)
[13:14:01] *** Quits: badsektor (~badsektor@user/badsektor) (Remote host closed the connection)
[13:15:58] <luuk> ikskuh: Don't think you can. Looking at the test runner in stdlib it will count the test as failed when you use log.err(), and will simply call out to debug.print for lower levels.
[13:16:19] <ikskuh> hmm
[13:16:46] <ikskuh> i think i'll PR that. std.testing.expectedLogs(5, .info);
[13:20:37] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Ping timeout: 240 seconds)
[13:21:18] <da_lorax> oh std.debug.print sounds like what I actually want. Still need to wrap them in \n for it to show up right though
[13:21:26] <da_lorax> which makes non-test output long
[13:24:09] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[13:24:30] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[13:26:27] <da_lorax> Whelp, I now have a program that runs, prints output, and is totally wrong. Progress!
[13:26:40] <da_lorax> Thanks for the help, it's bedtime on the west coast :)
[13:27:39] <comrad> i thought the west coast never sleeps!!
[13:34:00] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[13:34:51] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[13:36:06] <hiljusti> we take shifts on the west coast
[13:39:01] *** Quits: Stalevar (~stalevar@user/stalevar) (Ping timeout: 240 seconds)
[13:39:10] <Franciman> 24/7
[13:39:27] <Franciman> the mediterrean hitting back
[13:41:37] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[13:43:10] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[13:44:17] *** Quits: koakuma (~koakuma@user/koakuma) (Ping timeout: 240 seconds)
[13:45:21] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:48:58] *** Joins: LanceThepants (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[13:49:04] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[13:49:18] *** Joins: tsmanner_ (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net)
[13:49:27] *** Joins: squeek502_ (~squeek502@user/squeek502)
[13:49:58] *** Joins: hspak7 (~hspak@user/hspak)
[13:49:58] *** Quits: hspak (~hspak@user/hspak) (Read error: Connection reset by peer)
[13:49:58] *** hspak7 is now known as hspak
[13:50:04] *** Quits: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[13:50:16] *** Quits: squeek502 (~squeek502@user/squeek502) (Read error: Connection reset by peer)
[13:50:17] *** Quits: biog (~user1@159.224.42.85) (Ping timeout: 240 seconds)
[13:50:37] *** Quits: tsmanner (~tsmanner@pool-100-40-199-193.pghkny.fios.verizon.net) (Ping timeout: 240 seconds)
[13:50:41] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[13:51:09] *** Joins: Sawzall (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net)
[13:52:04] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Read error: Connection reset by peer)
[13:52:23] *** Joins: Gehenna (~Gehenna@84.241.198.203)
[13:52:31] *** Quits: LanceThepants (~Sawzall@96-82-249-149-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[13:52:33] *** Joins: freshcoffee1 (~fresh@user/freshcoffee)
[13:52:41] *** Quits: Gehenna (~Gehenna@84.241.198.203) (Read error: Connection reset by peer)
[13:52:59] *** Joins: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net)
[13:53:01] *** Joins: Stalevar (~stalevar@user/stalevar)
[13:55:09] *** Quits: freshcoffee (~fresh@user/freshcoffee) (Ping timeout: 256 seconds)
[13:59:37] *** Joins: koakuma (~koakuma@user/koakuma)
[14:14:05] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[14:18:26] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:21:09] *** Joins: Vexu (~Thunderbi@188.117.20.105)
[14:21:27] *** Joins: chgr (~ek@nat-91-137-16-17.net.encoline.de)
[14:24:20] *** Joins: breavyn (~breavyn@user/breavyn)
[14:25:53] *** Quits: breavyn_ (~breavyn@user/breavyn) (Ping timeout: 256 seconds)
[14:26:21] *** Joins: Major_Biscuit (~MajorBisc@c-001-005-014.client.tudelft.eduvpn.nl)
[14:29:25] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[14:35:19] *** Joins: pkap (~pkap@193.32.127.213)
[14:35:32] *** Joins: nurbl (~jofo@c83-252-92-24.bredband.tele2.se)
[14:37:49] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[14:40:29] *** Quits: simontime (~simontime@irc.simonti.me) (Ping timeout: 256 seconds)
[14:40:35] *** Joins: earnest (~earnest@user/earnestly)
[14:42:54] *** Joins: simontime (~simontime@irc.simonti.me)
[14:49:37] *** Quits: simontime (~simontime@irc.simonti.me) (Quit: ZNC 1.8.0 - https://znc.in)
[14:50:13] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[14:50:16] *** Joins: simontime (~simontime@irc.simonti.me)
[15:06:41] *** Quits: outfox (~outfox@user/outfox) (Ping timeout: 256 seconds)
[15:07:47] *** Joins: notzmv (~zmv@user/notzmv)
[15:08:32] *** Joins: outfox (~outfox@213.144.147.16)
[15:08:32] *** Quits: outfox (~outfox@213.144.147.16) (Changing host)
[15:08:32] *** Joins: outfox (~outfox@user/outfox)
[15:14:17] *** Quits: simontime (~simontime@irc.simonti.me) (Ping timeout: 240 seconds)
[15:14:29] *** Joins: simontime (~simontime@irc.simonti.me)
[15:17:16] *** Joins: C2H5OH (~C2H5OH@54.239.6.185)
[15:21:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[15:31:23] *** Joins: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777)
[15:33:49] *** Joins: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net)
[15:33:53] *** Parts: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net) ()
[15:34:48] *** Joins: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net)
[15:36:51] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[15:37:17] *** Quits: Stalevar (~stalevar@user/stalevar) (Read error: Connection reset by peer)
[15:37:49] *** Joins: Stalevar (~stalevar@user/stalevar)
[15:39:06] *** Quits: notapenguin (~ryu@2804:14d:5685:96c7:8b7a:60f:54fc:4777) (Quit: WeeChat 3.4)
[15:40:00] *** Quits: Gehenna (~Gehenna@2a02-a445-a8d7-1-3419-2919-702c-95.fixed6.kpn.net) (Quit: Quit)
[15:43:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:45:00] *** Quits: C2H5OH (~C2H5OH@54.239.6.185) (Quit: Client closed)
[15:47:58] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[15:48:52] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[16:00:27] *** Quits: tiehuis (~tiehuis@user/tiehuis) (Remote host closed the connection)
[16:24:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[16:27:30] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[16:27:52] *** Joins: bindu (~bindu@user/bindu)
[16:32:09] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 268 seconds)
[16:33:05] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[16:33:42] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[16:38:57] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 240 seconds)
[16:41:44] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[16:51:06] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[17:01:57] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (Ping timeout: 240 seconds)
[17:03:43] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[17:18:39] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[17:25:39] *** Joins: constxo (~brad@142.134.38.68)
[17:30:42] *** Joins: arkurious (~arkurious@user/arkurious)
[17:40:19] *** Quits: Vexu (~Thunderbi@188.117.20.105) (Quit: Vexu)
[17:45:06] *** Quits: aKriJcz (~jirka@mail.tcz.cz) (Remote host closed the connection)
[17:46:31] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:47:05] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[18:05:32] *** Joins: badsektor (~badsektor@user/badsektor)
[18:11:51] *** Quits: k0r10n (~k0r10n@95.179.129.166) (Ping timeout: 256 seconds)
[18:34:06] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[18:35:05] *** Quits: mischief (~mischief@wopr.sciops.net) (Ping timeout: 256 seconds)
[18:40:32] *** Joins: mischief (~mischief@wopr.sciops.net)
[18:47:37] *** Quits: mischief (~mischief@wopr.sciops.net) (Ping timeout: 240 seconds)
[19:00:13] *** Quits: arkurious (~arkurious@user/arkurious) (*.net *.split)
[19:00:13] *** Quits: lanodan (~lanodan@2a01:e0a:d6:9930::35) (*.net *.split)
[19:00:14] *** Quits: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net) (*.net *.split)
[19:00:14] *** Quits: nurbl (~jofo@c83-252-92-24.bredband.tele2.se) (*.net *.split)
[19:00:14] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[19:00:14] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (*.net *.split)
[19:00:14] *** Quits: koakuma (~koakuma@user/koakuma) (*.net *.split)
[19:00:14] *** Quits: hspak (~hspak@user/hspak) (*.net *.split)
[19:00:14] *** Quits: squeek502_ (~squeek502@user/squeek502) (*.net *.split)
[19:00:14] *** Quits: jonas_ (~textual@55867b35.cust.multi.fi) (*.net *.split)
[19:00:14] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[19:00:14] *** Quits: neurocyte0 (~neurocyte@user/neurocyte) (*.net *.split)
[19:00:14] *** Quits: ofelas (~ofelas@ti0071a400-7012.bb.online.no) (*.net *.split)
[19:00:14] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[19:00:14] *** Quits: Tekk (~tekk@static-198-54-133-121.cust.tzulo.com) (*.net *.split)
[19:00:14] *** Quits: rom1504 (rom1504@rom1504.fr) (*.net *.split)
[19:00:14] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[19:00:14] *** Quits: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001) (*.net *.split)
[19:00:14] *** Quits: Piraty (~irc@user/piraty) (*.net *.split)
[19:00:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[19:00:14] *** Quits: Arnavion (arnavion@user/arnavion) (*.net *.split)
[19:00:14] *** Quits: tianruiwei[m] (~tianruiwe@2001:470:69fc:105::1:601a) (*.net *.split)
[19:00:14] *** Quits: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521) (*.net *.split)
[19:00:15] *** Quits: midi[m] (~justmidim@2001:470:69fc:105::c739) (*.net *.split)
[19:00:15] *** Quits: josias (~mottmatri@2001:470:69fc:105::b6c) (*.net *.split)
[19:00:15] *** Quits: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4) (*.net *.split)
[19:00:15] *** Quits: slind_ (e19c209508@2604:bf00:561:2000::17a) (*.net *.split)
[19:00:15] *** Quits: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (*.net *.split)
[19:00:15] *** Quits: bw (sid2730@user/betawaffle) (*.net *.split)
[19:00:15] *** Quits: kron (~weechat@user/qaph) (*.net *.split)
[19:00:15] *** Quits: Arw- (~Arwalk@lfbn-dij-1-1321-197.w92-141.abo.wanadoo.fr) (*.net *.split)
[19:00:15] *** Quits: km (znc@user/km) (*.net *.split)
[19:00:15] *** Quits: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001) (*.net *.split)
[19:00:15] *** Quits: de1b39 (~de1b39@50.39.101.17) (*.net *.split)
[19:00:15] *** Quits: koollman (samson_t@user/koollman) (*.net *.split)
[19:00:15] *** Quits: lucus (~lucus@relto.u16.nl) (*.net *.split)
[19:00:15] *** Quits: losinggeneration (~quassel@64.225.54.254) (*.net *.split)
[19:00:15] *** Quits: Ristovski (~Ristovski@hellomouse/perf/ristovski) (*.net *.split)
[19:00:15] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (*.net *.split)
[19:00:16] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[19:00:16] *** Quits: outfox (~outfox@user/outfox) (*.net *.split)
[19:00:16] *** Quits: earnest (~earnest@user/earnestly) (*.net *.split)
[19:00:16] *** Quits: breavyn (~breavyn@user/breavyn) (*.net *.split)
[19:00:16] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[19:00:16] *** Quits: mountaingoat (~mountaing@user/mountaingoat) (*.net *.split)
[19:00:16] *** Quits: jcmoyer (~jcmoyer@user/jcmoyer) (*.net *.split)
[19:00:16] *** Quits: semarie (~semarie@user/semarie) (*.net *.split)
[19:00:16] *** Quits: McKael (~mikael@82-64-95-224.subs.proxad.net) (*.net *.split)
[19:00:16] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[19:00:16] *** Quits: flux_control (~flux@sourcemage/wizard/flux) (*.net *.split)
[19:00:16] *** Quits: bblack (~bblack@wikimedia/bblack-WMF) (*.net *.split)
[19:00:16] *** Quits: dottedmag (~dottedmag@tea.dottedmag.net) (*.net *.split)
[19:00:16] *** Quits: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net) (*.net *.split)
[19:00:16] *** Quits: amine (~aminechik@user/aminechikhaoui) (*.net *.split)
[19:00:16] *** Quits: seroquel (~console@c6a7ca38.vpn.njalla.net) (*.net *.split)
[19:00:16] *** Quits: marwan (~marwan@90.247.112.9) (*.net *.split)
[19:00:16] *** Quits: factor (~factor@c-66-30-67-217.hsd1.ma.comcast.net) (*.net *.split)
[19:00:17] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[19:00:17] *** Quits: davidfet1er (~davidfett@xvm-110-146.dc2.ghst.net) (*.net *.split)
[19:00:17] *** Quits: companion_cube (~simon@user/companion-cube) (*.net *.split)
[19:00:17] *** Quits: rtb (~calmdownb@li749-143.members.linode.com) (*.net *.split)
[19:00:17] *** Quits: phroa (~phroa@user/phroa) (*.net *.split)
[19:00:17] *** Quits: ane (ane@nikita.tnnet.fi) (*.net *.split)
[19:00:17] *** Quits: da_lorax (~daloraxye@2001:470:69fc:105::1:5e15) (*.net *.split)
[19:00:17] *** Quits: polykernel (~polykerne@user/polykernel) (*.net *.split)
[19:00:17] *** Quits: s-ol (~s-ol@s-ol.nu) (*.net *.split)
[19:00:17] *** Quits: zkanda (~zkanda@box.makean.art) (*.net *.split)
[19:00:17] *** Quits: philtor (~philtom@50.53.105.83) (*.net *.split)
[19:00:17] *** Quits: torque (~tachyon@user/torque) (*.net *.split)
[19:00:17] *** Quits: gonz_____ (sid304396@id-304396.lymington.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: nore (~nore@217.69.13.67) (*.net *.split)
[19:00:17] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[19:00:17] *** Quits: nikki93 (sid200244@id-200244.tinside.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: stilbruch (~stilbruch@157.245.122.124) (*.net *.split)
[19:00:17] *** Quits: Tharro (~Tharro@2001:bc8:1824:1623::1) (*.net *.split)
[19:00:18] *** Quits: ovf (sid19068@id-19068.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: anathema (~anathema@40.91.229.57) (*.net *.split)
[19:00:18] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: jaredmm (~jaredmm@user/jaredmm) (*.net *.split)
[19:00:18] *** Quits: andrewrk (~andrewrk@mail.ziglang.org) (*.net *.split)
[19:00:18] *** Quits: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728) (*.net *.split)
[19:00:18] *** Quits: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c) (*.net *.split)
[19:00:18] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (*.net *.split)
[19:00:18] *** Quits: siraben (~siraben@user/siraben) (*.net *.split)
[19:00:18] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[19:00:18] *** Quits: daex_ (~daex@user/daex) (*.net *.split)
[19:00:18] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[19:00:18] *** Quits: letoram (~bjorn@user/letoram) (*.net *.split)
[19:00:18] *** Quits: Bonstra (~Bonstra@val.bonstra.fr.eu.org) (*.net *.split)
[19:00:19] *** Quits: rektide (~rektide@eldergods.com) (*.net *.split)
[19:00:19] *** Quits: coder_kalyan (2c72974719@user/coderkalyan) (*.net *.split)
[19:00:19] *** Quits: ManDeJan (3da94070ba@user/mandejan) (*.net *.split)
[19:00:19] *** Quits: ebb (ebb@user/ebb) (*.net *.split)
[19:00:19] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[19:00:19] *** Quits: hendi (sid489601@2a03:5180:f:2::7:7881) (*.net *.split)
[19:00:19] *** Quits: luuk (~luuk@user/luuk) (*.net *.split)
[19:00:19] *** Quits: pusewic|away_ (sid2036@id-2036.lymington.irccloud.com) (*.net *.split)
[19:00:19] *** Quits: fleg (dfbb34cb39@user/fleg) (*.net *.split)
[19:00:19] *** Quits: gjnoonan (cb73e0a324@2604:bf00:561:2000::e) (*.net *.split)
[19:00:19] *** Quits: leon-p (1b22ab9492@2604:bf00:561:2000::18c) (*.net *.split)
[19:00:19] *** Quits: rslabbert (91146de1f6@2604:bf00:561:2000::240) (*.net *.split)
[19:00:19] *** Quits: oats (~thomas@user/oats) (*.net *.split)
[19:00:19] *** Quits: johnLate (~johnlate@lexington.scnr.net) (*.net *.split)
[19:00:20] *** Quits: ep (~erik@user/ep) (*.net *.split)
[19:00:20] *** Quits: Flaminator (~Flaminato@ns323457.ip-5-39-76.eu) (*.net *.split)
[19:00:20] *** Quits: dom96 (~dom@mail.nim-lang.org) (*.net *.split)
[19:00:20] *** Quits: q66 (~q66@q66.moe) (*.net *.split)
[19:00:20] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[19:00:20] *** Quits: gpanders (~gpanders@user/gpanders) (*.net *.split)
[19:00:20] *** Quits: bfredl (~bfredl@2001:470:69fc:105::183) (*.net *.split)
[19:00:21] *** Quits: patwid (3da977342f@user/patwid) (*.net *.split)
[19:00:21] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (*.net *.split)
[19:00:21] *** Quits: daurn (~daurnimat@vultr.daurnimator.com) (*.net *.split)
[19:00:21] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca) (*.net *.split)
[19:00:21] *** Quits: tdeo (~tdeo@user/tdeo) (*.net *.split)
[19:00:21] *** Quits: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net) (*.net *.split)
[19:00:21] *** Quits: mla (~mla@162.253.176.229) (*.net *.split)
[19:00:21] *** Quits: novakane (ca74a093b3@user/novakane) (*.net *.split)
[19:00:21] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[19:00:21] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[19:00:21] *** Quits: lqd (uid15826@id-15826.helmsley.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[19:00:22] *** Quits: ncon (~ncon@wireguard/developer/ncon) (*.net *.split)
[19:00:22] *** Quits: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3) (*.net *.split)
[19:00:22] *** Quits: motiejus (~motiejus@2001:470:69fc:105::38fb) (*.net *.split)
[19:00:22] *** Quits: royo (~royo@user/royo) (*.net *.split)
[19:00:22] *** Quits: vrischmann (25460b476c@2604:bf00:561:2000::16c) (*.net *.split)
[19:00:22] *** Quits: copygirl (~koppeh@copy.mcft.net) (*.net *.split)
[19:00:22] *** Quits: dbohdan3 (~dbohdan@user/dbohdan) (*.net *.split)
[19:00:23] *** Quits: Nulo (~Nulo@user/nulo) (*.net *.split)
[19:00:23] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (*.net *.split)
[19:00:23] *** Quits: rycwo (dbdb4a3e7b@sourcehut/user/rycwo) (*.net *.split)
[19:00:23] *** Quits: powerofzero (c2b6947721@user/powerofzero) (*.net *.split)
[19:00:23] *** Quits: psnszsn (7fe6b73f65@user/psnsn) (*.net *.split)
[19:00:23] *** Quits: shurane (sid132556@id-132556.helmsley.irccloud.com) (*.net *.split)
[19:00:23] *** Quits: andrea (3f138254b4@2604:bf00:561:2000::38) (*.net *.split)
[19:00:23] *** Quits: philipwhite (062636b2b0@2604:bf00:561:2000::227) (*.net *.split)
[19:00:23] *** Quits: patrick (224fa09e8b@fsf/member/patrick) (*.net *.split)
[19:00:23] *** Quits: ikskuh (~xq@v43666.php-friends.de) (*.net *.split)
[19:00:23] *** Quits: aliasless (quassel@2001:19f0:6001:490f:9436:fd2d:3fc6:cfde) (*.net *.split)
[19:00:23] *** Quits: tanami_ (~q@irc.expert) (*.net *.split)
[19:00:23] *** Quits: slowjo (~slowjo@sourcehut/user/slowjo) (*.net *.split)
[19:00:24] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[19:00:24] *** Quits: barath (~barath@2001:470:69fc:105::21a) (*.net *.split)
[19:00:24] *** Quits: AtomToast (~atomtoast@2001:470:69fc:105::8a5) (*.net *.split)
[19:00:24] *** Quits: Snetry (~snetry@ipservice-092-209-148-073.092.209.pools.vodafone-ip.de) (*.net *.split)
[19:00:24] *** Quits: toms (~foobar@pogostick.net) (*.net *.split)
[19:00:25] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[19:00:25] *** Quits: yeti (~username@user/yeti) (*.net *.split)
[19:00:25] *** Quits: mercenary (~mercenary@user/mercenary) (*.net *.split)
[19:00:25] *** Quits: slothby (~JoshAshby@irc.isin.space) (*.net *.split)
[19:00:25] *** Quits: b_jonas (~x@catv-176-63-3-122.catv.broadband.hu) (*.net *.split)
[19:00:25] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[19:00:25] *** Quits: rbino (~rbino@rbino.com) (*.net *.split)
[19:00:25] *** Quits: bens (~bens@www.typius.com) (*.net *.split)
[19:00:25] *** Quits: bfiedler (~bfiedler@2a0d:d740:107::3) (*.net *.split)
[19:00:25] *** Quits: doublej41 (~doublej47@osuosl/alumni/doublej472) (*.net *.split)
[19:00:25] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (*.net *.split)
[19:00:25] *** Quits: mixi (~mixi@exherbo/developer/mixi) (*.net *.split)
[19:00:25] *** Quits: nickster (~nickster@67.207.91.6) (*.net *.split)
[19:00:26] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[19:00:26] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[19:00:26] *** Quits: Seng (~nick@hurtig.ninja) (*.net *.split)
[19:00:26] *** Quits: inr (~a@c-5817e555.040-159-73746f16.bbcust.telenor.se) (*.net *.split)
[19:00:26] *** Quits: Snektron[m] (~snektron@2001:470:69fc:105::f0a3) (*.net *.split)
[19:00:26] *** Quits: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e) (*.net *.split)
[19:00:26] *** Quits: _javyre (~javyre@2001:470:69fc:105::2162) (*.net *.split)
[19:00:26] *** Quits: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b) (*.net *.split)
[19:00:26] *** Quits: ugla (~ugla@2001:470:69fc:105::2b5) (*.net *.split)
[19:00:26] *** Quits: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011) (*.net *.split)
[19:00:26] *** Quits: moats (~oats@user/oats) (*.net *.split)
[19:00:26] *** Quits: voroskoi[m] (~voroskoif@2001:470:69fc:105::e17) (*.net *.split)
[19:00:26] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (*.net *.split)
[19:00:26] *** Quits: devast8a (~devast8a@2001:470:69fc:105::3f46) (*.net *.split)
[19:00:26] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[19:00:26] *** Quits: lizog (75b54f24ba@2604:bf00:561:2000::14d) (*.net *.split)
[19:00:27] *** Quits: boardwalk (~boardwalk@2605:a601:aac3:100:bdab:1cda:6a42:ae24) (*.net *.split)
[19:00:27] *** Quits: viric (~viric@static-74-45-229-77.ipcom.comunitel.net) (*.net *.split)
[19:00:27] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[19:00:27] *** Quits: crest_ (~quassel@user/crest) (*.net *.split)
[19:00:27] *** Quits: isolier39874 (~isolier@174.31.22.17) (*.net *.split)
[19:00:27] *** Quits: yrashk_ (sid1568@id-1568.lymington.irccloud.com) (*.net *.split)
[19:00:27] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[19:00:27] *** Quits: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2) (*.net *.split)
[19:00:27] *** Quits: skipwich (~skipwich@user/skipwich) (*.net *.split)
[19:00:27] *** Quits: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de) (*.net *.split)
[19:00:27] *** Quits: bgiannan (giann@2a01:4f8:141:1272::2) (*.net *.split)
[19:00:27] *** Quits: mattikus (sid161707@user/mattikus) (*.net *.split)
[19:00:27] *** Quits: duck2 (~duck2@146.185.156.161) (*.net *.split)
[19:00:27] *** Quits: wozeparrot (~wozeparro@user/wozeparrot) (*.net *.split)
[19:00:27] *** Quits: yelnah (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7) (*.net *.split)
[19:00:27] *** Quits: haze (~haze@cpe-68-174-143-88.nyc.res.rr.com) (*.net *.split)
[19:00:28] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[19:00:28] *** Quits: Xe (~cadey@tailscale/xe) (*.net *.split)
[19:00:28] *** Quits: v0idpwn (sid483136@id-483136.helmsley.irccloud.com) (*.net *.split)
[19:00:28] *** Quits: dutchie (~dutchie@user/dutchie) (*.net *.split)
[19:00:28] *** Quits: zups (~meow@2a01:4f9:c010:6036::1) (*.net *.split)
[19:00:28] *** Quits: occivink (~occivink@2001:41d0:8:bbf::1) (*.net *.split)
[19:00:28] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[19:00:28] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (*.net *.split)
[19:00:28] *** Quits: pkap (~pkap@193.32.127.213) (*.net *.split)
[19:00:28] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (*.net *.split)
[19:00:28] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[19:00:28] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (*.net *.split)
[19:00:28] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[19:00:30] *** Joins: mischief (~mischief@wopr.sciops.net)
[19:01:13] *** Joins: phaleth (~user@193.165.189.6)
[19:01:13] *** Joins: arkurious (~arkurious@user/arkurious)
[19:01:13] *** Joins: lanodan (~lanodan@2a01:e0a:d6:9930::35)
[19:01:13] *** Joins: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net)
[19:01:13] *** Joins: nurbl (~jofo@c83-252-92-24.bredband.tele2.se)
[19:01:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:01:13] *** Joins: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[19:01:13] *** Joins: koakuma (~koakuma@user/koakuma)
[19:01:13] *** Joins: hspak (~hspak@user/hspak)
[19:01:13] *** Joins: squeek502_ (~squeek502@user/squeek502)
[19:01:13] *** Joins: jonas_ (~textual@55867b35.cust.multi.fi)
[19:01:13] *** Joins: tomku (~tomku@user/tomku)
[19:01:13] *** Joins: neurocyte0 (~neurocyte@user/neurocyte)
[19:01:13] *** Joins: ofelas (~ofelas@ti0071a400-7012.bb.online.no)
[19:01:13] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[19:01:13] *** Joins: Tekk (~tekk@static-198-54-133-121.cust.tzulo.com)
[19:01:13] *** Joins: rom1504 (rom1504@rom1504.fr)
[19:01:13] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[19:01:13] *** Joins: terinjokes (~terinjoke@2604:a880:2:d0::227b:f001)
[19:01:13] *** Joins: Piraty (~irc@user/piraty)
[19:01:13] *** Joins: leah2 (~leah@vuxu.org)
[19:01:13] *** Joins: Arnavion (arnavion@user/arnavion)
[19:01:47] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[19:01:47] *** Joins: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu)
[19:01:52] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60)
[19:01:58] *** Joins: motiejus (~motiejus@2001:470:69fc:105::38fb)
[19:01:58] *** Joins: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3)
[19:01:58] *** Joins: royo (~royo@user/royo)
[19:01:58] *** Joins: vrischmann (25460b476c@2604:bf00:561:2000::16c)
[19:01:58] *** Joins: copygirl (~koppeh@copy.mcft.net)
[19:01:58] *** Joins: dbohdan3 (~dbohdan@user/dbohdan)
[19:01:58] *** Joins: Nulo (~Nulo@user/nulo)
[19:01:58] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[19:01:58] *** Joins: powerofzero (c2b6947721@user/powerofzero)
[19:01:58] *** Joins: rycwo (dbdb4a3e7b@sourcehut/user/rycwo)
[19:01:58] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[19:01:58] *** Joins: psnszsn (7fe6b73f65@user/psnsn)
[19:01:58] *** Joins: patrick (224fa09e8b@fsf/member/patrick)
[19:01:58] *** Joins: philipwhite (062636b2b0@2604:bf00:561:2000::227)
[19:01:58] *** Joins: andrea (3f138254b4@2604:bf00:561:2000::38)
[19:01:58] *** Joins: ikskuh (~xq@v43666.php-friends.de)
[19:01:58] *** Joins: aliasless (quassel@2001:19f0:6001:490f:9436:fd2d:3fc6:cfde)
[19:01:58] *** Joins: tanami_ (~q@irc.expert)
[19:01:58] *** Joins: slowjo (~slowjo@sourcehut/user/slowjo)
[19:01:58] *** Joins: shachaf (~shachaf@user/shachaf)
[19:02:02] *** Joins: q66 (~q66@q66.moe)
[19:02:02] *** Joins: voldial (~user@user/voldial)
[19:02:02] *** Joins: dom96 (~dom@mail.nim-lang.org)
[19:02:07] *** Joins: gpanders (~gpanders@user/gpanders)
[19:02:07] *** Joins: bfredl (~bfredl@2001:470:69fc:105::183)
[19:02:07] *** Joins: patwid (3da977342f@user/patwid)
[19:02:07] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[19:02:07] *** Joins: daurn (~daurnimat@vultr.daurnimator.com)
[19:02:07] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-11-74-15-230-188.dsl.bell.ca)
[19:02:07] *** Joins: tdeo (~tdeo@user/tdeo)
[19:02:07] *** Joins: wilsonk (~wilsonk@S0106001b11030a94.cg.shawcable.net)
[19:02:07] *** Joins: mla (~mla@162.253.176.229)
[19:02:07] *** Joins: novakane (ca74a093b3@user/novakane)
[19:02:07] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[19:02:07] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[19:02:07] *** Joins: lqd (uid15826@id-15826.helmsley.irccloud.com)
[19:02:07] *** Joins: shodan45 (~quassel@107.161.22.155)
[19:02:07] *** Joins: ncon (~ncon@wireguard/developer/ncon)
[19:02:15] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[19:02:15] *** Joins: AtomToast (~atomtoast@2001:470:69fc:105::8a5)
[19:02:15] *** Joins: Snetry (~snetry@ipservice-092-209-148-073.092.209.pools.vodafone-ip.de)
[19:02:15] *** Joins: toms (~foobar@pogostick.net)
[19:02:15] *** Joins: finsternis (~X@23.226.237.192)
[19:02:15] *** Joins: yeti (~username@user/yeti)
[19:02:15] *** Joins: Seng (~nick@hurtig.ninja)
[19:02:15] *** Joins: mercenary (~mercenary@user/mercenary)
[19:02:15] *** Joins: slothby (~JoshAshby@irc.isin.space)
[19:02:15] *** Joins: b_jonas (~x@catv-176-63-3-122.catv.broadband.hu)
[19:02:15] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[19:02:15] *** Joins: bens (~bens@www.typius.com)
[19:02:15] *** Joins: rbino (~rbino@rbino.com)
[19:02:15] *** Joins: bfiedler (~bfiedler@2a0d:d740:107::3)
[19:02:15] *** Joins: doublej41 (~doublej47@osuosl/alumni/doublej472)
[19:02:15] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[19:02:15] *** Joins: mixi (~mixi@exherbo/developer/mixi)
[19:02:15] *** Joins: nickster (~nickster@67.207.91.6)
[19:02:15] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[19:02:15] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[19:02:15] *** Joins: inr (~a@c-5817e555.040-159-73746f16.bbcust.telenor.se)
[19:02:21] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[19:02:21] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[19:02:21] *** Joins: siraben (~siraben@user/siraben)
[19:02:21] *** Joins: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c)
[19:02:21] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[19:02:21] *** Joins: daex_ (~daex@user/daex)
[19:02:21] *** Joins: letoram (~bjorn@user/letoram)
[19:02:21] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[19:02:21] *** Joins: Bonstra (~Bonstra@val.bonstra.fr.eu.org)
[19:02:21] *** Joins: ebb (ebb@user/ebb)
[19:02:21] *** Joins: rektide (~rektide@eldergods.com)
[19:02:21] *** Joins: coder_kalyan (2c72974719@user/coderkalyan)
[19:02:21] *** Joins: ManDeJan (3da94070ba@user/mandejan)
[19:02:21] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:02:21] *** Joins: hendi (sid489601@2a03:5180:f:2::7:7881)
[19:02:21] *** Joins: luuk (~luuk@user/luuk)
[19:02:21] *** Joins: pusewic|away_ (sid2036@id-2036.lymington.irccloud.com)
[19:02:21] *** Joins: gjnoonan (cb73e0a324@2604:bf00:561:2000::e)
[19:02:21] *** Joins: fleg (dfbb34cb39@user/fleg)
[19:02:21] *** Joins: rslabbert (91146de1f6@2604:bf00:561:2000::240)
[19:02:21] *** Joins: leon-p (1b22ab9492@2604:bf00:561:2000::18c)
[19:02:21] *** Joins: oats (~thomas@user/oats)
[19:02:21] *** Joins: johnLate (~johnlate@lexington.scnr.net)
[19:02:21] *** Joins: ep (~erik@user/ep)
[19:02:21] *** Joins: Flaminator (~Flaminato@ns323457.ip-5-39-76.eu)
[19:02:27] *** Joins: koollman (samson_t@user/koollman)
[19:02:27] *** Joins: tianruiwei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[19:02:27] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[19:02:27] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[19:02:27] *** Joins: midi[m] (~justmidim@2001:470:69fc:105::c739)
[19:02:27] *** Joins: josias (~mottmatri@2001:470:69fc:105::b6c)
[19:02:27] *** Joins: slind_ (e19c209508@2604:bf00:561:2000::17a)
[19:02:27] *** Joins: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[19:02:27] *** Joins: bw (sid2730@user/betawaffle)
[19:02:27] *** Joins: kron (~weechat@user/qaph)
[19:02:27] *** Joins: Arw- (~Arwalk@lfbn-dij-1-1321-197.w92-141.abo.wanadoo.fr)
[19:02:27] *** Joins: km (znc@user/km)
[19:02:27] *** Joins: mht-wtf (~mht@2a03:b0c0:3:e0::1e2:c001)
[19:02:27] *** Joins: de1b39 (~de1b39@50.39.101.17)
[19:02:27] *** Joins: lucus (~lucus@relto.u16.nl)
[19:02:27] *** Joins: losinggeneration (~quassel@64.225.54.254)
[19:02:27] *** Joins: Ristovski (~Ristovski@hellomouse/perf/ristovski)
[19:02:27] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[19:02:28] *** Quits: siraben (~siraben@user/siraben) (Max SendQ exceeded)
[19:02:43] *** Joins: bindu (~bindu@user/bindu)
[19:02:43] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:02:43] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[19:02:43] *** Quits: motiejus (~motiejus@2001:470:69fc:105::38fb) (Ping timeout: 250 seconds)
[19:02:46] *** Quits: bindu (~bindu@user/bindu) (Max SendQ exceeded)
[19:02:49] *** Joins: da_lorax (~daloraxye@2001:470:69fc:105::1:5e15)
[19:02:49] *** Joins: polykernel (~polykerne@user/polykernel)
[19:02:49] *** Joins: s-ol (~s-ol@s-ol.nu)
[19:02:49] *** Joins: zkanda (~zkanda@box.makean.art)
[19:02:49] *** Joins: philtor (~philtom@50.53.105.83)
[19:02:49] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:02:49] *** Joins: anathema (~anathema@40.91.229.57)
[19:02:49] *** Joins: nore (~nore@217.69.13.67)
[19:02:49] *** Joins: torque (~tachyon@user/torque)
[19:02:49] *** Joins: gonz_____ (sid304396@id-304396.lymington.irccloud.com)
[19:02:49] *** Joins: buhman (sid411355@user/buhman)
[19:02:49] *** Joins: nikki93 (sid200244@id-200244.tinside.irccloud.com)
[19:02:49] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[19:02:49] *** Joins: Tharro (~Tharro@2001:bc8:1824:1623::1)
[19:02:49] *** Joins: ovf (sid19068@id-19068.hampstead.irccloud.com)
[19:02:49] *** Joins: jaredmm (~jaredmm@user/jaredmm)
[19:02:49] *** Joins: andrewrk (~andrewrk@mail.ziglang.org)
[19:02:51] *** Quits: da_lorax (~daloraxye@2001:470:69fc:105::1:5e15) (Ping timeout: 245 seconds)
[19:02:51] *** Quits: polykernel (~polykerne@user/polykernel) (Ping timeout: 245 seconds)
[19:02:57] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (Ping timeout: 250 seconds)
[19:03:02] *** Quits: bfredl (~bfredl@2001:470:69fc:105::183) (Ping timeout: 240 seconds)
[19:03:05] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[19:03:05] *** Joins: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e)
[19:03:05] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[19:03:05] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[19:03:05] *** Joins: _javyre (~javyre@2001:470:69fc:105::2162)
[19:03:05] *** Joins: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b)
[19:03:05] *** Joins: ugla (~ugla@2001:470:69fc:105::2b5)
[19:03:05] *** Joins: moats (~oats@user/oats)
[19:03:05] *** Joins: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011)
[19:03:05] *** Joins: voroskoi[m] (~voroskoif@2001:470:69fc:105::e17)
[19:03:05] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[19:03:05] *** Joins: lizog (75b54f24ba@2604:bf00:561:2000::14d)
[19:03:05] *** Joins: boardwalk (~boardwalk@2605:a601:aac3:100:bdab:1cda:6a42:ae24)
[19:03:05] *** Joins: viric (~viric@static-74-45-229-77.ipcom.comunitel.net)
[19:03:05] *** Joins: dcx (~dcx@user/dac)
[19:03:05] *** Joins: crest_ (~quassel@user/crest)
[19:03:05] *** Joins: isolier39874 (~isolier@174.31.22.17)
[19:03:05] *** Joins: yrashk_ (sid1568@id-1568.lymington.irccloud.com)
[19:03:05] *** Joins: amk (~amk@109.255.169.126)
[19:03:05] *** Joins: Ankhers (e99e97ef8e@2604:bf00:561:2000::2a2)
[19:03:05] *** Joins: skipwich (~skipwich@user/skipwich)
[19:03:05] *** Joins: anthon (~Thunderbi@p2e52aa21.dip0.t-ipconnect.de)
[19:03:05] *** Joins: bgiannan (giann@2a01:4f8:141:1272::2)
[19:03:05] *** Joins: mattikus (sid161707@user/mattikus)
[19:03:05] *** Joins: duck2 (~duck2@146.185.156.161)
[19:03:05] *** Joins: wozeparrot (~wozeparro@user/wozeparrot)
[19:03:05] *** Joins: yelnah (~felix@2001:44b8:3080:a5:6f0:21ff:fe3c:d4d7)
[19:03:05] *** Joins: haze (~haze@cpe-68-174-143-88.nyc.res.rr.com)
[19:03:05] *** Joins: [R] (~rs@genoce.org)
[19:03:05] *** Joins: Xe (~cadey@tailscale/xe)
[19:03:05] *** Joins: v0idpwn (sid483136@id-483136.helmsley.irccloud.com)
[19:03:05] *** Joins: dutchie (~dutchie@user/dutchie)
[19:03:05] *** Joins: zups (~meow@2a01:4f9:c010:6036::1)
[19:03:05] *** Joins: occivink (~occivink@2001:41d0:8:bbf::1)
[19:03:05] *** Joins: lonjil (~quassel@user/lonjil)
[19:03:05] *** Quits: tianruiwei[m] (~tianruiwe@2001:470:69fc:105::1:601a) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521) (Ping timeout: 252 seconds)
[19:03:06] *** Quits: midi[m] (~justmidim@2001:470:69fc:105::c739) (Ping timeout: 252 seconds)
[19:03:06] *** Joins: bindu (~bindu@user/bindu)
[19:03:07] *** Quits: Snektron[m] (~snektron@2001:470:69fc:105::f0a3) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: voroskoi[m] (~voroskoif@2001:470:69fc:105::e17) (Ping timeout: 260 seconds)
[19:03:07] *** Quits: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b) (Ping timeout: 260 seconds)
[19:03:17] *** Joins: simontime (~simontime@irc.simonti.me)
[19:03:17] *** Joins: outfox (~outfox@user/outfox)
[19:03:17] *** Joins: earnest (~earnest@user/earnestly)
[19:03:17] *** Joins: breavyn (~breavyn@user/breavyn)
[19:03:17] *** Joins: rb (~augh@theguntretort.com)
[19:03:17] *** Joins: semarie (~semarie@user/semarie)
[19:03:17] *** Joins: mountaingoat (~mountaing@user/mountaingoat)
[19:03:17] *** Joins: jcmoyer (~jcmoyer@user/jcmoyer)
[19:03:17] *** Joins: McKael (~mikael@82-64-95-224.subs.proxad.net)
[19:03:17] *** Joins: koolazer (~koo@user/koolazer)
[19:03:17] *** Joins: flux_control (~flux@sourcemage/wizard/flux)
[19:03:17] *** Joins: bblack (~bblack@wikimedia/bblack-WMF)
[19:03:17] *** Joins: dottedmag (~dottedmag@tea.dottedmag.net)
[19:03:17] *** Joins: marler8997 (~marler899@96-19-96-19-162-162.cpe.sparklight.net)
[19:03:17] *** Joins: amine (~aminechik@user/aminechikhaoui)
[19:03:17] *** Joins: marwan (~marwan@90.247.112.9)
[19:03:17] *** Joins: seroquel (~console@c6a7ca38.vpn.njalla.net)
[19:03:17] *** Joins: factor (~factor@c-66-30-67-217.hsd1.ma.comcast.net)
[19:03:17] *** Joins: jkl1337 (~jkl@user/jkl)
[19:03:17] *** Joins: davidfet1er (~davidfett@xvm-110-146.dc2.ghst.net)
[19:03:17] *** Joins: companion_cube (~simon@user/companion-cube)
[19:03:17] *** Joins: rtb (~calmdownb@li749-143.members.linode.com)
[19:03:17] *** Joins: phroa (~phroa@user/phroa)
[19:03:17] *** Joins: ane (ane@nikita.tnnet.fi)
[19:03:23] *** Quits: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c) (Ping timeout: 250 seconds)
[19:03:23] *** Quits: mikolajw (~mikolajtc@2001:470:69fc:105::3b02) (Ping timeout: 250 seconds)
[19:03:32] *** Quits: gpanders (~gpanders@user/gpanders) (Ping timeout: 240 seconds)
[19:03:34] *** Quits: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: moats (~oats@user/oats) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: devast8a (~devast8a@2001:470:69fc:105::3f46) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (Ping timeout: 260 seconds)
[19:03:35] *** Quits: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3) (Ping timeout: 250 seconds)
[19:03:38] *** Quits: josias (~mottmatri@2001:470:69fc:105::b6c) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4) (Ping timeout: 252 seconds)
[19:03:52] *** Quits: barath (~barath@2001:470:69fc:105::21a) (Ping timeout: 268 seconds)
[19:03:52] *** Quits: AtomToast (~atomtoast@2001:470:69fc:105::8a5) (Ping timeout: 268 seconds)
[19:04:02] *** Quits: _javyre (~javyre@2001:470:69fc:105::2162) (Ping timeout: 260 seconds)
[19:04:02] *** Quits: ugla (~ugla@2001:470:69fc:105::2b5) (Ping timeout: 260 seconds)
[19:04:07] *** Quits: phaleth (~user@193.165.189.6) (Client Quit)
[19:04:32] *** Quits: ebb (ebb@user/ebb) (Max SendQ exceeded)
[19:05:21] *** Quits: rubin55 (sid175221@id-175221.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[19:05:49] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[19:05:59] *** Joins: phaleth (~user@user/phaleth)
[19:07:57] *** Quits: koolazer (~koo@user/koolazer) (Ping timeout: 256 seconds)
[19:11:40] *** Joins: ebb (ebb@user/ebb)
[19:13:11] *** Quits: mischief (~mischief@wopr.sciops.net) (Ping timeout: 256 seconds)
[19:15:47] *** Joins: aspe[m] (~dimitrisa@2001:470:69fc:105::d93e)
[19:15:49] *** Joins: Snektron[m] (~snektron@2001:470:69fc:105::f0a3)
[19:16:03] *** Joins: xiamx[m] (~xiamxmatr@2001:470:69fc:105::1:567b)
[19:16:32] *** Joins: devast8a (~devast8a@2001:470:69fc:105::3f46)
[19:17:53] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[19:20:28] *** Joins: koolazer (~koo@user/koolazer)
[19:26:13] *** Joins: mischief (~mischief@wopr.sciops.net)
[19:29:08] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 268 seconds)
[19:37:29] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[19:38:55] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[19:39:08] *** Joins: Levytauoverpitch (~tauoverpi@2001:470:69fc:105::728)
[19:44:57] *** Joins: ugla (~ugla@2001:470:69fc:105::2b5)
[19:51:31] *** Joins: motiejus (~motiejus@2001:470:69fc:105::38fb)
[19:53:33] *** Joins: moats (~oats@user/oats)
[19:56:41] *** Joins: treeshateorcs[m] (~treeshate@2001:470:69fc:105::1:41c4)
[19:58:29] *** Joins: mikolajw (~mikolajtc@2001:470:69fc:105::3b02)
[19:59:56] *** Joins: Swahili_ (~Swahili@a95-94-208-187.cpe.netcabo.pt)
[20:00:15] *** Joins: barath (~barath@2001:470:69fc:105::21a)
[20:00:26] *** Joins: siraben (~siraben@user/siraben)
[20:03:01] *** Quits: Swahili (~Swahili@a95-94-208-187.cpe.netcabo.pt) (Ping timeout: 240 seconds)
[20:03:57] *** Joins: _javyre (~javyre@2001:470:69fc:105::2162)
[20:10:32] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:3054:7338:1492:2c60) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:12:24] *** Joins: tianruiwei[m] (~tianruiwe@2001:470:69fc:105::1:601a)
[20:12:32] *** Joins: bfredl (~bfredl@2001:470:69fc:105::183)
[20:12:44] *** Joins: polykernel (~polykerne@user/polykernel)
[20:17:23] *** Quits: wib_jonas (~wib_jonas@business-37-191-60-209.business.broadband.hu) (Quit: Client closed)
[20:19:16] *** Joins: blackcatter[m] (~blackcatt@2001:470:69fc:105::e10c)
[20:19:37] *** Joins: gpanders (~gpanders@user/gpanders)
[20:29:47] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[20:31:12] *** Joins: AtomToast (~atomtoast@2001:470:69fc:105::8a5)
[20:33:01] *** Quits: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:38:30] *** Joins: da_lorax (~daloraxye@2001:470:69fc:105::1:5e15)
[20:48:14] *** Joins: midi[m] (~justmidim@2001:470:69fc:105::c739)
[20:49:13] *** Joins: LorisCro[m] (~kristoff-@2001:470:69fc:105::1:2521)
[20:51:22] *** Joins: darkbit[m] (~darkbitst@2001:470:69fc:105::3ae3)
[20:51:29] *** Joins: josias (~mottmatri@2001:470:69fc:105::b6c)
[20:53:49] *** Joins: HenrikHenriksson (~hxctrl-cl@2001:470:69fc:105::e37b)
[20:54:27] *** Joins: voroskoi[m] (~voroskoif@2001:470:69fc:105::e17)
[20:55:56] *** Quits: jonas_ (~textual@55867b35.cust.multi.fi) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:56:18] *** Joins: CrystalGamma[m] (~crystalga@2001:470:69fc:105::1011)
[21:07:37] *** Quits: Major_Biscuit (~MajorBisc@c-001-005-014.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:11:57] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:25:32] *** Quits: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b) (Ping timeout: 240 seconds)
[21:28:07] *** Joins: rgrinberg (~textual@187.223.134.131)
[21:29:52] *** Joins: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[21:32:11] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[21:34:38] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[21:39:45] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:40:03] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[21:43:21] *** Quits: Major_Biscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 256 seconds)
[21:59:24] *** Joins: k0r10n (~k0r10n@95.179.129.166)
[21:59:49] *** Joins: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net)
[22:02:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[22:03:39] *** pretty_dumm_guy is now known as pretty_dumm_guy_
[22:04:08] *** pretty_dumm_guy_ is now known as pdg_afk
[22:04:25] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[22:05:54] *** Quits: k0r10n (~k0r10n@95.179.129.166) (Ping timeout: 256 seconds)
[22:08:09] *** pdg_afk is now known as pretty_dumm_guy
[22:19:29] *** Quits: phaleth (~user@user/phaleth) (Ping timeout: 256 seconds)
[22:29:43] *** Joins: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net)
[22:34:17] *** Quits: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net) (Ping timeout: 252 seconds)
[22:35:26] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[22:35:43] *** Quits: rgrinberg (~textual@187.223.134.131) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:37:35] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[22:40:15] *** Quits: Gustavo6046_ (~Gustavo60@user/gustavo6046) (Client Quit)
[22:40:29] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:40:40] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[22:40:40] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[22:40:40] *** Joins: tane (~tane@user/tane)
[22:43:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[22:46:54] *** Joins: hiljusti (~hiljusti@2601:600:c681:23b0:960b:7cc3:3849:e69b)
[22:55:15] *** Joins: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net)
[22:59:10] *** Quits: cr1901 (~cr1901@2601:8d:8600:911:343c:13e1:2b48:94a4) (Remote host closed the connection)
[22:59:17] *** Quits: stefan1 (~stefan@2a02-a445-a8d7-1-c871-aa67-8f89-b16d.fixed6.kpn.net) (Ping timeout: 240 seconds)
[22:59:28] *** Joins: cr1901 (~cr1901@2601:8d:8600:911:752f:54cf:7047:abf1)
[23:19:11] *** Quits: m4r35n357 (~m4r35n357@host-78-151-108-203.as13285.net) (Quit: Leaving)
[23:28:34] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[23:28:58] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[23:30:13] *** Joins: moog (~moog@107.126.53.20)
[23:31:45] *** Quits: chgr (~ek@nat-91-137-16-17.net.encoline.de) (Quit: WeeChat 3.3)
[23:33:03] <Seng> like with `try func()` is there a pretty way to unwrap an optional?
[23:33:36] <ifreund> Seng: func() orelse return null; would be the direct equivalent of try 
[23:33:41] <Seng> I have a case where I know the optional indeed has a value, and I think `myOpt orelse @panic("omg");` is too verbose.
[23:33:56] <ifreund> oh, you're looking for foo.?;
[23:34:12] <ifreund> which is sugar for `foo orelse unreachable`
[23:34:33] <Seng> you magnificent human being, ifreund !
[23:34:54] <ifreund> who told you I was a human :P
[23:35:12] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[23:35:41] <Seng> ~wHaT iS 8 + 5?~
[23:38:37] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[23:38:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:cdd1:fb1a:1d51:220e)
[23:42:18] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:53:58] *** Joins: tomku (~tomku@user/tomku)
[23:56:41] *** Joins: ur5us (~ur5us@2406:e002:6c7b:2301:1b18:b746:eaa9:fad6)
[23:58:13] *** Quits: rgrinberg (~textual@187.223.248.37) (Ping timeout: 256 seconds)
