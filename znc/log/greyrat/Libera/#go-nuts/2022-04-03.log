[00:03:17] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[00:05:11] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:09:29] *** Joins: dk86 (~dk86@2804:14d:2ca0:8031:da5f:eef2:e238:60bf)
[00:12:16] <dostoyevsky2> > flappy-nmage$ go build # -> /home/go/go/pkg/mod/github.com/bloeys/nmage@v0.0.10/asserts/asserts.go:4:2: //go:build comment without // +build comment
[00:12:26] <dostoyevsky2> Any idea what go build is complaining about?
[00:12:31] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[00:15:51] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 260 seconds)
[00:18:19] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:19:31] <fizzie> `//go:build` is the new syntax for build constraints, `// +build` the old one, versions near the transition insist on seeing both.
[00:20:45] <fizzie> The "Transition" section of the proposal at https://go.googlesource.com/proposal/+/master/design/draft-gobuild.md describes the details, and the version "1.N" in there is... 1.17? Not 100% sure on that.
[00:23:22] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[00:30:19] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[00:32:43] *** Joins: treeford (~charleste@user/treeford)
[00:33:33] *** Joins: rogersm (~rogersm@90.166.180.250)
[00:33:45] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[00:37:18] *** Joins: kakysha_ (~kakysha@user/kakysha)
[00:37:29] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[00:41:32] *** Quits: dk86 (~dk86@2804:14d:2ca0:8031:da5f:eef2:e238:60bf) (Ping timeout: 260 seconds)
[00:42:55] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[00:43:51] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[00:44:47] *** Joins: koo5_ (~quassel@51.140.155.227)
[00:58:37] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:59:16] *** Joins: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de)
[01:01:10] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[01:01:30] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:03:11] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[01:07:10] <b0nn> dostoyevsky2: My guess: You have a file with a comment at the head that is confusing go build
[01:14:53] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Remote host closed the connection)
[01:17:25] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[01:18:54] <andlabs> the named file has no tags ofa ny sort https://github.com/bloeys/nmage/blob/v0.0.10/asserts/asserts.go
[01:20:13] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 260 seconds)
[01:20:19] *** Joins: b0nn (~shane@user/b0nn)
[01:21:54] <andlabs> also yes github that totally is an executable file, indeed
[01:22:01] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:22:01] <fizzie> No, but the quoted line has an import of a package that _does_ have //go:build lines.
[01:22:11] <andlabs> huh
[01:22:16] <andlabs> why does the error message not point to that instead
[01:29:58] <fizzie> No idea. I would have expected it to. But I don't think the current version of Go can output that message (the error is still present but there are no references to it), so can't exactly test.
[01:31:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:33:30] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[01:33:53] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[01:34:07] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[01:39:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[01:44:32] *** Joins: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2)
[01:48:13] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[01:50:54] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:58:35] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Quit: Leaving)
[01:59:42] <b0nn> The error message is because the assert file imports (the line that imports the consts package, which has the build tags is where the compiler dies)
[02:00:02] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:00:36] <b0nn> So, the problem with the build directives is that there should be a SPACE between the // and go (eg // go:build... NOT //go:build)
[02:01:04] <b0nn> if you put a space in there, and the go build you will be flying
[02:02:07] <fizzie> No, there should *not* be a space between "//" and "go:build", if you want it to be a build constraint.
[02:02:08] <b0nn> https://bpa.st/SKCA
[02:02:39] <fizzie> It might _fix_ the error, but only because then it's just a regular comment.
[02:03:02] <b0nn> yes - builkd directives can DIAF
[02:05:02] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:06:10] <b0nn> ok, take 2
[02:06:21] <b0nn> dostoyevsky2: what's your `go version`
[02:06:35] <b0nn> I got the exact error you have - but I'm on go1.16
[02:06:55] <b0nn>  go version
[02:06:56] <b0nn> go version go1.16.2 linux/amd64
[02:08:10] <fizzie> Yeah, that would make 1.16 the "1.(N-1)" version of the build constraints transition. "In Go 1.(N−1): Builds will fail when a Go source file contains //go:build lines without // +build lines."
[02:09:15] <b0nn> Honestly that comment looks like gobbledegook
[02:09:32] <b0nn> It means the user has to know what 1.(N-1) refers to
[02:09:50] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[02:13:18] <fizzie> It was a quote from the draft design (which I linked earlier), when they didn't yet know in which version the changes would land, so it uses "1.(N-1)", "1.N" and "1.(N+1)" to refer to them. It'd be nice if they had made a document that contains the actual version numbers, but if they have, I haven't found one.
[02:13:43] <b0nn> Yes. I know the origin of the comment
[02:16:01] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[02:16:04] <b0nn> I was thinking clarity would be found in something along the lines of "Different versions of Go will interpret the build constraints in different ways, older versions will not be compatible with newer build constraint styles"
[02:17:39] *** Quits: adip (~adip@aedz200.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[02:18:15] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[02:19:34] *** Joins: adip (~adip@deu228.neoplus.adsl.tpnet.pl)
[02:19:40] <b0nn> Honestly it bugs me that the build process is treated as "no need to be backward compatible"
[02:20:43] <b0nn> And, WRT build constraints, there's no way to mark "Build with Go version X or greater"
[02:21:21] *** Joins: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88)
[02:21:22] *** Quits: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88) (Changing host)
[02:21:22] *** Joins: resamvi (~resamvi@user/resamvi)
[02:25:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:26:03] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[02:26:21] *** Joins: trikonasana[m] (~trikonasa@2001:470:69fc:105::1:60cf)
[02:29:06] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[02:31:57] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[02:36:36] *** Quits: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2) (Ping timeout: 245 seconds)
[02:37:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:37:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[02:40:34] *** Joins: resamvi (~resamvi@2a02:8071:91cc:200:21d2:9d7:52b5:d332)
[02:40:34] *** Quits: resamvi (~resamvi@2a02:8071:91cc:200:21d2:9d7:52b5:d332) (Changing host)
[02:40:34] *** Joins: resamvi (~resamvi@user/resamvi)
[02:45:17] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:45:35] *** Joins: rek2 (~ReK2@user/rek2)
[02:46:13] *** Joins: koo5_ (~quassel@51.140.155.227)
[02:49:58] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[02:50:59] *** Quits: qilx (~quassel@62.201.21.8) (Ping timeout: 246 seconds)
[02:52:15] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:53:25] *** Joins: qilx (~quassel@62.201.21.8)
[03:01:09] *** Quits: mpldr (~mpldr@user/mpldr) (Quit: WeeChat 3.5)
[03:01:31] *** Quits: adip (~adip@deu228.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[03:03:23] *** Quits: qilx (~quassel@62.201.21.8) (Ping timeout: 260 seconds)
[03:04:28] *** Joins: qilx (~quassel@62.201.21.8)
[03:05:23] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:09:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[03:14:27] *** Joins: orthoplex64 (~crm@70.120.0.94)
[03:15:08] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[03:18:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:21:36] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[03:21:51] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[03:24:16] <dostoyevsky2> b0nn: I also have 1.16 ... I guess I should create another docker container where I have more recent go versions...
[03:25:06] <b0nn> heh, I hadn't realised the go on this box was so out of date and have updated it to 1.18 :-)
[03:25:19] <dostoyevsky2> go.mod states `go 1.17' not sure why I can compile that code at all
[03:26:32] <b0nn> I ignore that, because there was a go version that forced go.mod to update to its version when you built, and it broke builds for older stuff
[03:27:21] <b0nn> The go modules journey has been... interesting
[03:27:22] *** Quits: aead (~aead@user/aead) (Ping timeout: 272 seconds)
[03:31:40] <dostoyevsky2> I didn't know that the version in go mod is optional... I expected the compiler to stop
[03:32:54] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Remote host closed the connection)
[03:33:36] <fizzie> Yeah, that's always confused me a little, that versions newer than the one you have don't have any effect. I guess the thinking might be, people will set it to the version they want to "target", but in a lot of cases the code might still work on older versions, so there's no harm in letting you try. ...other than highly confusing errors when it fails, of course.
[03:33:56] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[03:34:27] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[03:37:03] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[03:38:01] *** Joins: koo5_ (~quassel@51.140.155.227)
[03:39:25] *** Quits: antranigv (~antranigv@37.252.78.252) (Ping timeout: 240 seconds)
[03:39:57] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 256 seconds)
[03:40:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:45:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[03:46:57] *** Joins: antranigv (~antranigv@37.252.78.252)
[03:47:08] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[03:47:13] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[03:51:26] *** Joins: treeford (~charleste@user/treeford)
[03:56:26] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[03:58:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:01:38] *** Joins: resamvi (~resamvi@user/resamvi)
[04:21:42] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:26:44] *** Quits: AriESQ (~user@user/AriESQ) (Remote host closed the connection)
[04:31:56] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: WeeChat 3.5)
[04:36:56] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[04:37:52] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:44:41] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:38] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[05:03:14] *** Quits: lindsay (~lindsay@user/LindsayZhou) (Quit: WeeChat 3.4.1)
[05:05:11] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[05:16:59] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:17:28] *** Joins: resamvi (~resamvi@user/resamvi)
[05:20:49] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 256 seconds)
[05:21:48] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[05:30:23] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[05:39:43] *** Quits: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:41:04] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[05:42:57] *** Joins: treeford (~charleste@user/treeford)
[05:43:11] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[05:44:31] *** Joins: pepee (~pepee@user/pepee)
[05:47:27] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[05:48:30] *** Joins: neurocyte86141 (~neurocyte@IP-094046079092.dynamic.medianet-world.de)
[05:48:30] *** Quits: neurocyte86141 (~neurocyte@IP-094046079092.dynamic.medianet-world.de) (Changing host)
[05:48:30] *** Joins: neurocyte86141 (~neurocyte@user/neurocyte)
[05:48:50] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[05:50:53] *** Joins: resamvi (~resamvi@user/resamvi)
[05:50:55] *** Quits: neurocyte8614 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:50:55] *** neurocyte86141 is now known as neurocyte8614
[05:52:59] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[05:56:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:01:21] *** Joins: aead (~aead@user/aead)
[06:02:33] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[06:04:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[06:33:55] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[06:34:03] *** Joins: Snyp (~Snyp@49.207.197.152)
[06:38:42] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Client Quit)
[06:39:07] *** Joins: favadi (~favadi@2001:ee0:4081:6914:f0a0:8a5a:3250:c05d)
[06:40:03] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[06:42:35] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[06:43:42] *** Quits: favadi (~favadi@2001:ee0:4081:6914:f0a0:8a5a:3250:c05d) (Client Quit)
[06:46:52] *** Quits: FiskFan1999 (~FiskFan19@wvlist.net) (Ping timeout: 272 seconds)
[06:47:00] *** Joins: FiskFan2000 (~FiskFan19@wvlist.net)
[06:48:12] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:48:37] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[06:55:00] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 240 seconds)
[07:08:38] *** Joins: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88)
[07:08:38] *** Quits: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88) (Changing host)
[07:08:38] *** Joins: resamvi (~resamvi@user/resamvi)
[07:12:27] *** Quits: sevenever (~seven@user/sevenever) (Ping timeout: 265 seconds)
[07:13:06] *** Joins: sevenever (~seven@user/sevenever)
[07:18:14] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:16] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[07:20:20] *** Joins: irontom (~user@69.174.103.168)
[07:26:30] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[07:33:47] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:40:05] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Ping timeout: 246 seconds)
[07:55:54] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[08:07:50] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:08:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:09:50] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 272 seconds)
[08:10:59] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:13:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[08:19:46] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[08:21:23] *** Quits: KekSi (~KekSi@dynamic-077-012-063-248.77.12.pool.telefonica.de) (Ping timeout: 246 seconds)
[08:25:52] *** Joins: KekSi (~KekSi@77.189.144.30)
[08:27:14] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:37:55] *** Quits: jnewt (~jnewt@136.33.234.96) (Read error: Connection reset by peer)
[08:38:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[08:46:48] *** Joins: adip (~adip@deu228.neoplus.adsl.tpnet.pl)
[08:54:36] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[08:57:05] *** Quits: adip (~adip@deu228.neoplus.adsl.tpnet.pl) (Ping timeout: 246 seconds)
[08:59:57] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:18:13] *** Joins: adip (~adip@deu228.neoplus.adsl.tpnet.pl)
[09:19:13] *** Joins: treeford (~charleste@user/treeford)
[09:23:47] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[09:26:18] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[09:26:40] *** Quits: Compy (~compy@user/compy) (Remote host closed the connection)
[09:38:39] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[09:44:38] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[09:45:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[10:01:49] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[10:07:18] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[10:13:21] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:16:16] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Read error: Connection reset by peer)
[10:16:45] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[10:18:19] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[10:18:37] *** Joins: wolfdale83 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[10:20:13] *** Quits: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 240 seconds)
[10:20:13] *** wolfdale83 is now known as wolfdale8
[10:26:01] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[10:31:26] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:32:51] *** Joins: favadi (~favadi@2001:ee0:4081:6914:cd1f:b863:1ee0:5ec0)
[10:39:42] *** Joins: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88)
[10:39:43] *** Quits: resamvi (~resamvi@2a02:8071:91cc:200:e8cf:e8f1:3a2d:6d88) (Changing host)
[10:39:43] *** Joins: resamvi (~resamvi@user/resamvi)
[10:40:07] *** Joins: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2)
[10:43:29] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[10:46:03] *** Joins: rcernin (~rcernin@101.189.129.123)
[10:49:13] *** Quits: ventic (ircbouncer@3v.fi) (Quit: ZNC - http://znc.in)
[10:49:27] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:49:47] *** Joins: han-solo (~han-solo@user/han-solo)
[10:50:19] *** Joins: ventic (ircbouncer@3v.fi)
[10:50:33] *** Quits: ventic (ircbouncer@3v.fi) (Client Quit)
[10:57:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:01:43] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[11:02:44] *** Joins: treeford (~charleste@user/treeford)
[11:09:11] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[11:09:40] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[11:14:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:18:50] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[11:25:31] *** Quits: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2) (Ping timeout: 260 seconds)
[11:27:51] *** Quits: favadi (~favadi@2001:ee0:4081:6914:cd1f:b863:1ee0:5ec0) (Ping timeout: 260 seconds)
[11:41:20] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:42:05] *** Joins: Snyp (~Snyp@49.207.197.152)
[11:59:27] *** Quits: zanshin (~zanshin@user/zanshin) (Read error: Connection reset by peer)
[12:02:31] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:03:44] *** Joins: zanshin (~zanshin@user/zanshin)
[12:07:31] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[12:09:42] *** Joins: habamax (~habamax@user/habamax)
[12:15:11] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[12:16:29] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[12:19:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:23:56] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[12:25:22] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Quit: ZNC - https://znc.in)
[12:25:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[12:27:04] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:27:31] *** Joins: clarjon1 (~clarjon1@user/clarjon1)
[12:27:56] *** Joins: fling (~fling@user/fling)
[12:28:19] *** Joins: rcernin (~rcernin@101.189.129.123)
[12:33:31] *** Joins: treeford (~charleste@user/treeford)
[12:37:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:38:02] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[12:41:14] *** Joins: shtirlic_ (~shtirlic@184.22.157.64)
[12:42:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[12:42:36] *** Joins: mpldr (~mpldr@user/mpldr)
[12:44:42] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 272 seconds)
[12:52:04] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[12:54:13] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:59:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[13:01:33] *** Joins: shka (~herr@109.231.3.55)
[13:02:57] *** Quits: Atque (~Atque@user/atque) (Remote host closed the connection)
[13:09:49] *** Joins: favadi (~favadi@2001:ee0:4081:6914:d88a:4c53:9c43:b2f2)
[13:10:04] *** Quits: favadi (~favadi@2001:ee0:4081:6914:d88a:4c53:9c43:b2f2) (Client Quit)
[13:12:34] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:15:22] *** Joins: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2)
[13:15:52] <be3uykpy> you probably can't run this as is but is there a better way to do this? https://go.dev/play/p/q6X-f0i4EMt
[13:16:20] <be3uykpy> it's not working right now due to the interface{} used in the map
[13:16:47] <be3uykpy> just trying to load a .txt file (example in the comment) into a struct
[13:17:42] *** Joins: Snyp (~Snyp@49.207.197.152)
[13:18:22] <bpalmer> I mean, you'd have to parse the int into an int64, but sure, that seems like it would work. Might not be the way I'd do it, though
[13:18:45] <bpalmer> if the keys are fixed, I'd use a struct and set the field based on what the left hand side of = was, probably.
[13:18:52] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[13:22:30] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[13:22:42] *** Quits: Snyp (~Snyp@49.207.197.152) (Ping timeout: 272 seconds)
[13:25:26] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[13:25:27] *** Quits: amk_ (~amk@109.255.169.126) (Remote host closed the connection)
[13:25:36] *** Joins: amk (~amk@109.255.169.126)
[13:28:38] *** Joins: treeford (~charleste@user/treeford)
[13:29:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[13:30:28] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:30:45] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[13:32:04] *** Joins: fling (~fling@user/fling)
[13:32:27] *** Quits: nj (nicholas@stop.disconnecting.me) (Ping timeout: 256 seconds)
[13:32:34] *** Joins: lindsay (~lindsay@user/LindsayZhou)
[13:32:57] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.2 - https://znc.in)
[13:33:12] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[13:33:12] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[13:33:12] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[13:33:28] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[13:35:41] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[13:36:26] <be3uykpy> they are fixed yes
[13:36:37] <be3uykpy> um, care to give short example? not sure i understood
[13:36:52] *** Joins: favadi (~favadi@2001:ee0:4081:6914:3862:6163:82e5:5f7a)
[13:36:53] <be3uykpy> i keep the same struct with mixed fields types?
[13:37:17] <_rgn> in application code that is not published as a library, is the best practice to use private or public function and struct field naming style?
[13:37:35] <be3uykpy> i know there's a simple way to marshal a json into a struct, also i am familiar with using struct tags, but i believe my case is a bit different
[13:40:50] <bpalmer> type config struct { Name string; Length int64 };   func parse() { var c config; ... switch (match[0]) { case "name": c.Name = match[2] ; case "length": c.Length = strconv.Atoi(match[2]); .. }
[13:43:11] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[13:49:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:51:50] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[13:52:21] <acagastya> Is there a way to list out all the methods which implement `Writer` interface?
[13:52:47] <bpalmer> you mean all the types which implement it? No, not directly.
[13:54:44] *** Joins: nj (nicholas@stop.disconnecting.me)
[13:55:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:56:03] <bpalmer> godoc has some ability to do so
[13:57:31] <bpalmer> e.g., see https://github.com/golang/go/issues/11251
[13:59:26] <b0nn> Or grep the standard lib + your repo + all the repo of the imported code for the following functiondefinition "Write(p []byte) (n int, err error)"
[14:00:55] <b0nn> p, of course can be anything except an empty string, and n and err can also be anything, including an empty string
[14:04:49] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[14:19:23] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[14:23:38] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:25:21] *** Quits: hifi (hifi@heisenbridge/hifi) (Remote host closed the connection)
[14:25:48] *** Joins: hifi (hifi@heisenbridge/hifi)
[14:28:11] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[14:33:13] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[14:33:27] *** Joins: treeford (~charleste@user/treeford)
[14:34:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[14:36:01] *** Joins: fling (~fling@user/fling)
[14:37:38] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[14:37:42] *** Joins: ricci (~ricci@31.187.110.131)
[14:38:05] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:38:28] *** Joins: bindu (~bindu@user/bindu)
[14:38:36] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[14:40:06] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[14:40:32] *** Joins: kcrk (~kcrk@user/kcrk)
[14:55:36] *** Joins: kakysha_ (~kakysha@user/kakysha)
[14:57:23] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:57:47] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[15:03:31] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:08:03] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[15:11:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:12:00] <mikoto-chan> http://dpaste.com/4MVAZFU4Q
[15:12:03] *** Quits: shtirlic_ (~shtirlic@184.22.157.64) (Ping timeout: 260 seconds)
[15:12:13] <mikoto-chan> is it just me or is my web app doing something wrong here?
[15:13:15] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 260 seconds)
[15:15:14] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[15:15:40] <mpldr> mikoto-chan: it looks interesting at least… are you trying to run http.Get("password:pa55word") or similar?
[15:16:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[15:16:32] <mikoto-chan> mpldr: I missed the status code 429
[15:16:53] <mikoto-chan> seems like I didn't hook up my configuration properly :p
[15:23:18] *** Parts: x[m]12 (~bn4t@2001:470:69fc:105::1:e848) ()
[15:24:14] *** Joins: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7)
[15:24:31] <bn4t> Hi,
[15:25:00] <bn4t> I'm struggling with using generics in combination with receiver functions. Are there any docs which explain how to use these things together?
[15:25:27] <ikke> receiver functions? Do you mean methods?
[15:25:31] <bn4t> yeah
[15:26:14] <ikke> It's a known limitation that methods cannot introduce new generic parameters itself
[15:26:51] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:1c8b:1b42:a058:2b8b)
[15:30:07] <bn4t> ikke: okay, how do I declare generics for methods then? What I'm trying to do is https://go.dev/play/p/MqGP7p7WBaP but with h2() being a method.
[15:32:28] <ikke> Via the struct
[15:32:29] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[15:33:12] *** Joins: toulene (~toulene@user/toulene)
[15:33:52] <ikke> you'd need to extend the struct
[15:33:53] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[15:34:41] <bn4t> ikke: yeah, I've also read that, but I can't seem to figure out how to do it so the first return value for the passed function f() can be anything. What would be the way to do that?
[15:34:49] <fizzie> The only type parameters a method can have are those that the receiver type has. If you need others, you'll just have to do a regular function (that likely takes what you'd want to be the receiver as its first argument).
[15:35:31] <fizzie> To quote from the design doc: "Where it would be useful to add type arguments to a method, people will have to write a suitably parameterized top-level function."
[15:36:53] *** Joins: toulene (~toulene@user/toulene)
[15:37:40] <fizzie> (There's also a lot more on the reasons why in the issues section, https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md#No-parameterized-methods )
[15:37:53] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[15:38:30] *** Joins: fling (~fling@user/fling)
[15:39:42] <bn4t> fizzie: yes, that's probably what I'll do, if I can't figure out how to get it to work using a method. So, I'm guessing something like https://go.dev/play/p/3NCaZDwj_k8 won't work?
[15:41:10] <fizzie> No, with that you could only call `b.h2` with a handler function that returns `any` (aka interface{}).
[15:41:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[15:41:43] *** Quits: favadi (~favadi@2001:ee0:4081:6914:3862:6163:82e5:5f7a) (Ping timeout: 260 seconds)
[15:42:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:42:38] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:42:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:42:56] <bn4t> okay, this unfortunately isn't what I want. My goal is that handler() explicitly returns a type other than `any`.
[15:43:21] <bn4t> So, I guess there's no way other than a top level function?
[15:43:48] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[15:44:35] <fizzie> Guessed as much. Not really, as far as I know. Only if you can arrange for b to be a bar[T] everywhere you would want to call b.h2(...) on a function returning a T can it be a method.
[15:46:06] <bn4t> okay, I guess then I'll have to settle with a top level function. Thanks a lot for your help fizzie and ikke!
[15:47:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[15:50:20] *** Quits: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7) (Remote host closed the connection)
[15:50:38] *** Joins: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7)
[15:54:20] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:55:20] <fizzie> bn4t: Well, I guess with one sorta-exception -- if you don't actually need the return value, or are okay with getting it as `any` rather than as `T` in h2, what you could do is a wrapper generic type that adapts the `func(context.Context) (T, error)` into something that implements an interface that doesn't involve a T. In terms of your example: https://go.dev/play/p/aYN4FiIYz8f
[15:55:47] <fizzie> But that's really far too much frippery.
[15:57:14] *** Quits: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Ping timeout: 272 seconds)
[15:57:42] <bn4t> fizzie: hmm, yeah, might work. I'll keep it in mind, thanks for the input.
[15:57:44] *** Joins: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[15:58:31] *** Quits: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2) (Ping timeout: 260 seconds)
[15:59:53] <fizzie> bn4t: Actually, I guess that interface was kind of unnecessary there, it could just have been: https://go.dev/play/p/aoHjpSPpLye
[16:00:06] <fizzie> Which maybe doesn't look quite as offensive.
[16:02:06] <bn4t> Ah, yeah that looks a lot nicer. I'll probably end up trying out top level funcs and your solution and will pick the one that ends up looking cleaner in the implementation. Thx!
[16:08:16] <bn4t> fizzie: Okay, I'm pretty sure I'll be using your solution. Thanks a lot again, saved me tons of time!
[16:09:48] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Quit: ZNC 1.8.2 - https://znc.in)
[16:10:53] <fizzie> No problem. Any excuse to get to play with generics is good for me. ;) Haven't really had that much call for them personally.
[16:11:50] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[16:14:44] *** Joins: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2)
[16:15:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:18:42] *** Quits: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7) (Remote host closed the connection)
[16:19:01] *** Joins: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7)
[16:20:40] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[16:24:46] *** Quits: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7) (Remote host closed the connection)
[16:25:05] *** Joins: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7)
[16:32:24] <ikke> I think it's not possible but just wanted to confirm: it's not possible to use go:embed for struct fields, right? (Filling a struct with the contents of a file on build)
[16:36:45] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:37:15] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[16:37:51] *** Quits: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2) (Ping timeout: 245 seconds)
[16:38:23] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[16:42:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[16:44:11] *** Joins: fling (~fling@user/fling)
[16:49:52] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[16:50:13] *** Joins: holgersson (~quassel@user/holgersson)
[16:50:51] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:55:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[16:59:07] *** Joins: Snyp (~Snyp@49.207.197.152)
[17:00:39] *** Quits: sevenever (~seven@user/sevenever) (Ping timeout: 265 seconds)
[17:00:56] *** Joins: sevenever (~seven@user/sevenever)
[17:03:31] *** Quits: Snyp (~Snyp@49.207.197.152) (Client Quit)
[17:04:31] <rendar> can go code be compiled into binaries like C/C++/Rust?
[17:04:32] *** Joins: Snyp (~Snyp@49.207.197.152)
[17:05:02] <ikke> yes
[17:05:11] <ikke> go build does that
[17:05:23] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[17:05:24] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[17:05:24] *** Joins: resamvi (~resamvi@user/resamvi)
[17:07:40] *** Quits: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7) (Remote host closed the connection)
[17:07:59] *** Joins: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7)
[17:09:43] *** Joins: treeford (~charleste@user/treeford)
[17:12:14] <rendar> i see
[17:12:36] <rendar> what about the performance between C/C++?
[17:14:32] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[17:15:37] <ikke> Not as performant, but still competitive
[17:16:31] <rendar> i see, i guess Rust would be faster
[17:17:51] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:18:25] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[17:19:48] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[17:20:03] *** Joins: Compy (~compy@user/compy)
[17:20:57] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[17:24:09] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:25:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:30:55] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[17:32:55] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[17:33:55] *** Joins: irontom (~user@69.174.103.168)
[17:36:32] <bn4t> ikke: regarding go:embed and struct fields: No I don't think that's possible
[17:36:40] <ikke> right
[17:38:27] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:40:08] *** Quits: bn4t (~bn4t@2a02:168:7c08:0:c0a6:706f:eb33:cbf7) (Remote host closed the connection)
[17:46:22] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[17:46:51] *** Joins: fling (~fling@user/fling)
[17:49:33] *** Joins: treeford (~charleste@user/treeford)
[17:51:05] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:55:35] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Quit: ZNC 1.8.2 - https://znc.in)
[17:56:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:00:25] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[18:01:23] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[18:05:40] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:05:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[18:06:36] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[18:06:37] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[18:06:37] *** Joins: resamvi (~resamvi@user/resamvi)
[18:09:38] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[18:11:08] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[18:17:33] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 260 seconds)
[18:30:39] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d90e:8b62:fe9d:3118) (Ping timeout: 260 seconds)
[18:33:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:33:18] *** Joins: arkurious (~arkurious@user/arkurious)
[18:33:56] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:d960:d98a:f624:8ef)
[18:37:44] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[18:38:47] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 246 seconds)
[18:51:22] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[18:53:35] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 240 seconds)
[18:57:55] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[18:57:55] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[18:57:55] *** Joins: resamvi (~resamvi@user/resamvi)
[18:59:47] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[19:01:21] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:02:15] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 256 seconds)
[19:03:36] *** Quits: Vigdis (~danj@ns4.chown.me) (Quit: WeeChat 3.3)
[19:08:43] *** Quits: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum) (Ping timeout: 256 seconds)
[19:09:06] *** Joins: llorllale (~llorllale@198.98.119.85)
[19:10:22] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[19:17:19] *** Joins: Vigdis (~danj@ns4.chown.me)
[19:24:58] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:31:13] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:33:50] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[19:36:17] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[19:37:26] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[19:42:44] *** Joins: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2)
[19:44:01] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[19:45:03] *** Joins: califax (~califax@user/califx)
[19:46:35] *** Joins: irontom (~user@69.174.103.168)
[19:47:57] *** Joins: resamvi (~resamvi@user/resamvi)
[19:48:05] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Ping timeout: 250 seconds)
[19:52:19] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[19:58:45] <be3uykpy> i have a []int64 slice, with say 3 values, is there a nice way to unpack it to a,b,c := ?
[19:59:04] <be3uykpy> it doesn't have to be dynamic
[19:59:22] <be3uykpy> in terms of how many exists, the number is fixed
[20:01:55] <ikke> No, go does not have a construct for that.
[20:03:15] <be3uykpy> got it
[20:03:17] <be3uykpy> thx
[20:03:27] <fizzie> func unpack(s []int64) (a, b, c int64) { return s[0], s[1], s[2] } /* ... */ a, b, c := unpack(s) // nothing a little function can't solve ;)
[20:07:10] <han-solo> `a, b, c := s[0], s[1], s[2]` ?
[20:07:25] *** Joins: Midjak (~Midjak@82.66.147.146)
[20:16:30] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:17:43] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 260 seconds)
[20:18:40] *** Joins: kermit4 (sid393220@id-393220.helmsley.irccloud.com)
[20:21:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[20:27:39] <since_> func (s slice) unpack(v *int64...) { for i, v := range v { *v = s[i] }}
[20:27:52] <since_> slice.unpack(&a, &b, &c)
[20:28:12] *** Quits: c10l (~c10l@user/c10l) (Quit: See ya! o/)
[20:29:22] *** Joins: c10l (~c10l@user/c10l)
[20:29:46] <since_> I pfrefer han-solo s solution :D
[20:31:10] *** Quits: bkircher (~bkircher@2001:a61:2461:1701:53d2:d57e:b7b9:80b2) (Quit: Leaving)
[20:32:01] *** Joins: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2)
[20:33:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Quit: The Lounge - https://thelounge.chat)
[20:33:43] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[20:34:01] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[20:37:11] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[20:37:11] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[20:37:11] *** Joins: resamvi (~resamvi@user/resamvi)
[20:38:53] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[20:38:56] *** Joins: rolo (~error@ip1f12fb7c.dynamic.kabel-deutschland.de)
[20:41:23] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[20:50:42] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[20:51:01] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:53:48] *** Joins: shtirlic_ (~shtirlic@167.71.15.181)
[20:56:10] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[20:57:31] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 256 seconds)
[20:58:39] *** Quits: shtirlic_ (~shtirlic@167.71.15.181) (Ping timeout: 256 seconds)
[20:58:46] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[21:03:11] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 256 seconds)
[21:03:47] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[21:11:53] *** Quits: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2) (Quit: WeeChat 3.4)
[21:13:07] *** Joins: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2)
[21:14:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:15:43] <ikke> since_: if only it worked :)
[21:18:52] <hifi> I've tried to figure out how "go get" works but I couldn't get a good reading, is there a canonical repository it would try fetching a module from and how it ends up using git if you're using a repo directly as your source?
[21:24:33] <hifi> ah, found the remorse import paths doc, built-in magic for certain code hosting domains
[21:24:40] <hifi> * remote
[21:26:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:26:15] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[21:26:16] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[21:26:16] *** Joins: resamvi (~resamvi@user/resamvi)
[21:26:47] *** Quits: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2) (Quit: WeeChat 3.4)
[21:26:57] *** Joins: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2)
[21:27:22] *** Quits: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2) (Client Quit)
[21:27:50] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 272 seconds)
[21:28:02] *** Joins: Snyp (~Snyp@49.207.197.152)
[21:28:19] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[21:28:21] *** Joins: bkircher (~bk@2001:a61:2461:1701:8aae:ddff:fe01:5bb2)
[21:30:38] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 260 seconds)
[21:31:38] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[21:33:09] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[21:33:47] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 246 seconds)
[21:43:27] *** Joins: treeford (~charleste@user/treeford)
[21:48:07] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[21:51:29] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:55:39] *** Quits: novns (~novns@user/novns) (Quit: ZNC - https://znc.in)
[21:57:33] *** Joins: novns (~novns@user/novns)
[22:01:25] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:06:04] *** Joins: mizzunet (~mizzunet@2001:470:69fc:105::1:5d39)
[22:06:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[22:06:31] <mizzunet> Hello there
[22:06:32] <mizzunet> A noob question, how do change module downloading path, ~/go,  to somewhere else?
[22:07:24] <ikke> export GOMODCACHE
[22:11:42] *** Joins: rvalue- (~rvalue@user/rvalue)
[22:11:56] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 265 seconds)
[22:11:57] <mizzunet> Thanks (:
[22:15:34] *** rvalue- is now known as rvalue
[22:17:27] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[22:17:27] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[22:17:27] *** Joins: resamvi (~resamvi@user/resamvi)
[22:21:43] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 250 seconds)
[22:25:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[22:27:07] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Read error: Connection reset by peer)
[22:27:31] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[22:27:35] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[22:29:25] *** Joins: dagle (dagle@user/dagle)
[22:32:47] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[22:34:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:39:01] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:39:28] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[22:40:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[22:40:43] *** Quits: Snyp (~Snyp@49.207.197.152) (Quit: Textual IRC Client: www.textualapp.com)
[22:40:51] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[22:44:33] *** Joins: entbsagtc^ (~entbsagtc@c-24-99-107-170.hsd1.ga.comcast.net)
[22:44:50] *** Joins: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com)
[22:45:38] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[22:48:15] *** Quits: ekathva (~ekathva@2001:999:250:8f1f:1c8b:1b42:a058:2b8b) (Ping timeout: 260 seconds)
[22:51:51] *** Quits: jackneill (~jackneill@20014C4E180280009BFE7083D02C75A8.dsl.pool.telekom.hu) (Quit: Leaving)
[22:53:34] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:53:37] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:55:04] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[22:55:16] *** Quits: cstls (~ruiner@cpe-67-240-187-167.rochester.res.rr.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[22:55:19] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:d889:d0af:4f1e:f976)
[22:58:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[22:58:37] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Quit: %bye mirc%)
[22:58:46] *** Joins: greyfoxit (~greyfoxit@217.15.63.249)
[22:59:45] *** Joins: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com)
[23:02:05] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[23:04:08] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:07:05] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[23:07:05] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[23:07:05] *** Joins: resamvi (~resamvi@user/resamvi)
[23:09:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:11:11] *** Quits: resamvi (~resamvi@user/resamvi) (Ping timeout: 245 seconds)
[23:12:01] *** Joins: treeford (~charleste@user/treeford)
[23:12:08] *** Quits: ekathva (~ekathva@2001:999:250:8f1f:d889:d0af:4f1e:f976) (Quit: Leaving)
[23:13:51] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[23:14:28] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[23:15:50] <pvalenta> hello, can anyone explain me, what does this:     var _ Querier = (*Queries)(nil)       in https://susepaste.org/11475414 ?
[23:16:25] <ikke> It's a compile time assertion that Queries implements Querier
[23:16:46] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[23:17:40] <pvalenta> ikke, oh, thanks ....i will look at golang spec if I find anything about that
[23:17:41] <bpalmer> Well, *Queries
[23:17:48] <ikke> bpalmer: right
[23:18:27] <bpalmer> pvalenta: it's just like  var a Querier = new(Queries)     <-- that will compile if *Queries satisfies the Querier interface
[23:18:52] <bpalmer> pvalenta: but _ on the left hand side of assignment means it doesn't need to actually use a variable to store it anywhere.
[23:19:31] <bpalmer> pvalenta: and (*Queries)(nil)  is an expression that just evalutates to the nil of *Queries
[23:19:45] <bpalmer> so it doesn't need to actually allocate memory, either.
[23:19:58] <pvalenta> bpalmer, thanks, I get it now, it's smart.
[23:20:07] <ikke> There is some page showing thing pattern, but cannot recall where anymore
[23:20:58] <mizzunet> How to print rune as the character?... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/65982f2d4f591f56e1e0671b819d1204be512124)
[23:21:31] <mizzunet> I need it to print
[23:21:31] <mizzunet> a
[23:22:25] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[23:22:30] <mpldr> convert it to string
[23:22:42] *** Quits: yonson (~yonson@2600:8801:d900:0:529a:4cff:fe65:a337) (Remote host closed the connection)
[23:22:56] *** Quits: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[23:23:33] <mpldr> easiest way would probably be to change it to fmt.Sprintf("%s",rune)
[23:23:50] <mizzunet> Cool :)
[23:24:19] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[23:25:23] *** Joins: yonson (~yonson@2600:8801:d900::1962)
[23:25:55] <mizzunet>  Why am I getting this,
[23:25:55] <mizzunet> 󰅖 go build
[23:25:55] <mizzunet> error obtaining VCS status: exit status 128
[23:25:55] <mizzunet> 	Use -buildvcs=false to disable VCS stamping.
[23:26:16] <mizzunet> Though I can build by, go build main.go
[23:26:54] <mizzunet> I don't know what VCS is. Anyway, it built with -buildvcs=false
[23:27:18] <mpldr> VCS = version control system (git, svn, mercurial, bazaar, whatever)
[23:27:35] <mpldr> never had the issue though, so no idea on that
[23:28:31] <mizzunet> Oh
[23:28:35] <ikke> if you build a project that is in a git repository, but git is not available, you'll get that error
[23:30:55] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[23:31:04] <mizzunet> Right. It wasn't on a git directory. I tried again on one, it built 👍️
[23:31:30] <ikke> huh
[23:31:47] <ikke> That does not make sense (but 2nd time I heard abot it)
[23:32:37] <ikke> I think there is some heuristic that makes go think it's in a git repo when it's not
[23:33:38] <ikke> touch .git && go build
[23:33:52] <ikke> error obtaining VCS status: exit status 128
[23:34:19] <ikke> so I suspect go just checks if .git exists
[23:41:20] <dagle> I get: reference to undefined builtin "runtime.racereadrange" from package "net/http" , trying to build a project.
[23:44:43] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:47:07] *** Joins: fef (~thedawn@user/thedawn)
[23:49:17] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[23:49:28] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[23:49:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[23:54:44] *** Quits: cstls (~ruiner@2603-7081-0800-4824-6cda-ab7c-915d-5943.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:57:27] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:58:03] *** Joins: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de)
[23:58:03] *** Quits: resamvi (~resamvi@p200300f617179a00841ef03f3fd184f0.dip0.t-ipconnect.de) (Changing host)
[23:58:03] *** Joins: resamvi (~resamvi@user/resamvi)
