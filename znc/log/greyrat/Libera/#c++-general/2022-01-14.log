[00:02:55] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:05:46] *** Joins: gehn (~gehn@user/gehn)
[00:05:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:06:31] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:06:45] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[00:07:44] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[00:13:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[00:13:19] *** Quits: ville (~ville@user/ville) (Quit: ville)
[00:15:56] *** Joins: ville (~ville@user/ville)
[00:16:57] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[00:19:06] *** Quits: proller (~p@2a02:6b8:b081:9::1:2b) (Ping timeout: 245 seconds)
[00:19:57] *** flooded is now known as _flood
[00:26:45] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:27:24] *** jkaye_ is now known as jkaye
[00:27:29] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[00:31:49] *** Joins: proller (~p@2a02:6b8:b081:7212::1:5)
[00:32:40] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:34:54] *** Quits: BurumaSerafuku (~sjw@69.206.48.64) (Remote host closed the connection)
[00:35:35] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e4d3:da3f:1ac5:d2c6) (Ping timeout: 252 seconds)
[00:36:06] *** Joins: BurumaSerafuku (~sjw@69.206.48.64)
[00:36:15] *** Quits: jokoon (~eio@2a01:e0a:542:e160:3593:d827:e797:b7d9) (Read error: Connection reset by peer)
[00:36:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[00:38:37] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:dd90:3cd1:7391:6edb) (Ping timeout: 240 seconds)
[00:38:47] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[00:38:50] *** Joins: rajkohaxor (~rajkosto@178.220.243.118)
[00:45:06] *** Joins: martinrame (~leonardo@186.13.48.64)
[00:45:10] <martinrame> Hi, could you take a look at this: https://pastebin.com/cxP6rsRB
[00:45:41] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Quit: Leaving)
[00:46:06] <martinrame> it looks like when calling page["idx"] from withing the "if" it uses the page instance created outside, and not the one created a couple of lines in above.
[00:46:39] <PJBoy> what json library is that?
[00:47:08] <martinrame> PJBoy: https://github.com/nlohmann/json
[00:47:47] <ville> martinrame: page vs pages?
[00:48:20] <martinrame> ville: pages is an array of page
[00:48:33] <martinrame> each page is a json instance
[00:49:10] <ville> martinrame: you've also made a variable called line 10, which shadows the one from 2. line 9 uses the one from line 2
[00:49:23] <ville> err variable called page on line 10
[00:49:40] *** Joins: etolier_ (~somewhere@122-199-44-127.ip4.superloop.com)
[00:49:56] <PJBoy> here's your test case https://godbolt.org/z/jcYK87r85
[00:50:16] <martinrame> exactly, I think the one created on line 10 should be a new instance, then, when the condition (n==0) happens, that last instane should be appended to pages.
[00:50:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[00:50:49] <ville> martinrame: you do the push_back() on line 9, it uses the variable from line 2
[00:51:18] <ville> martinrame: the variable from line 2 is never changed
[00:51:33] <martinrame> ville: yes, the 1nst time, but after that it should use the one created on line 10.
[00:51:41] *** Quits: etolier (~somewhere@202-65-84-142.ip4.superloop.com) (Ping timeout: 256 seconds)
[00:51:56] <martinrame> PJBoy: thanks!
[00:52:09] <PJBoy> deleting the suspect line 10 does work out
[00:52:32] <martinrame> PJBoy: mmm, but I want a new instance.
[00:52:49] <PJBoy> probably you want `page = json();` instead
[00:53:03] <martinrame> PJBoy: let's see
[00:53:48] <ville> the page variable from line 2 is superfluous
[00:55:04] <PJBoy> actually yeah, good point
[00:55:09] <martinrame> ville: I see. How can I create a new instance, to be added to the pages array?
[00:55:28] <martinrame> PJBoy: page = json(); did the trick!
[00:56:07] <PJBoy> that would be the general form of resetting something in C++ fyi
[00:56:20] <PJBoy> but yeah, creating the page in the loop would be more straight forward, right?
[00:56:26] *** Joins: Shell (~shell@user/shell)
[00:56:40] <martinrame> PJBoy: thanks, for the tip
[00:56:53] <PJBoy> then you wouldn't need to reset it or anything
[00:58:32] <martinrame> PJBoy: you are right, as I'm in a rush I didn't thought this carefully.
[01:00:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:01:06] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:04:35] <rpav> huh, you can't have a function that returns a fixed-sized array?
[01:05:55] <PJBoy> not a native array, nope
[01:12:01] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[01:12:08] <rpav> and, sanity check, if you _pass_ an array T[N], e.g. `struct S { int[5] i; }; S s; foo(s.i, 5);`, this is going to behave properly right; it decays or whatever to a pointer to the first element
[01:12:24] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:12:34] <rpav> alternatively pass `const T (&v)[N]`
[01:14:00] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:15:09] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:15:32] <PJBoy> indeed
[01:15:51] <PJBoy> `T(&&v)[N]` also an option
[01:16:09] <rpav> something fucky is going on and i just want it to be me doing something stupid, and not some subtle weird issue
[01:17:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:18:24] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c4b8:6209:10f:d3e4)
[01:20:04] <PJBoy> { map<float, int> m; for (int i{}; i < 5; ++i) m[1. / i] = i;  cout << m[0], m[1], m[2], m[3], m[4];  }
[01:20:05] <geordi> 0, 1, 0, 0, 0
[01:20:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:20:37] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:21:10] <PJBoy> man I love this language
[01:21:50] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:22:21] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[01:23:17] <imMute> what was that supposed to be?
[01:23:59] <PJBoy> code that looks like it should map reciprocals
[01:24:18] <rpav> it does?
[01:24:24] <PJBoy> except I god damn wrote it wrong hahaha
[01:24:47] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:24:47] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:24:59] <rpav> just seeing float used as a key is like cringing
[01:25:12] <PJBoy> nvm eh
[01:25:53] <PJBoy> { map<float, int> m; for (int i{}; i < 5; ++i) m[1. / i] = i;  cout << m[0], m[1./1], m[1./2], m[1./3], m[1./4];  } // would be the correct usage
[01:25:53] <geordi> 0, 1, 2, 3, 4
[01:26:19] <Shell> PJBoy: floats are inherently inaccurate and this is a bad use for them.
[01:26:24] <rpav> yeah but the odds of getting a correct value outside that code are slim
[01:26:25] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f)
[01:26:37] <PJBoy> toy example and all that
[01:26:57] <PJBoy> use of lower_bound et al would make that map reasonable
[01:27:22] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:28:21] *** Parts: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) ()
[01:29:01] *** Joins: jsbach (~jsbach@2a01:c23:6442:c300:9b5f:f3b9:5c34:fa84)
[01:31:44] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:32:11] *** Quits: martinrame (~leonardo@186.13.48.64) (Quit: leaving)
[01:32:16] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:33:39] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[01:36:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:8562:e54a:2c02:c94f) (Ping timeout: 240 seconds)
[01:37:54] *** Quits: spaceangel_ (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:38:07] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5)
[01:38:42] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[01:38:50] *** Joins: Tokamak_ (~Tokamak@172.58.188.35)
[01:40:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:03] *** ChanServ sets mode: +v npaperbot
[01:42:56] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:47:44] <rpav> buh
[01:47:57] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5) (Ping timeout: 240 seconds)
[01:53:23] <rpav> oh fuck me, std::copy takes a past-the-end index, sigh
[01:54:05] <rpav> like it makes sense, but a[N-1] is such habit
[01:56:16] *** Joins: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5)
[02:08:40] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 250 seconds)
[02:09:40] <jancoow> So.. our code has a macro to generate a class with fields based on a number of tuples with a type(uint8_t etc) and name. This works, however I need some functionality to also return the total size of all those fields and a function which can concat all those fields in a uint8_t array.. I'm totally not familiar with macros so I've no clue how to do
[02:09:40] <jancoow> this. Can I simply loop through those fields with BOOST_PPREPEAT and so something like size_t = 0+BOOST_PP_REPEAT(BOOST_PP_SEQ_SIZE(fields), size of(data), (sensor, fields));
[02:10:02] <jancoow> Seems so weird and not sure if this is okay
[02:10:27] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (Ping timeout: 256 seconds)
[02:10:45] <imMute> sounds like it's time to switch to a code generator instead of trying to make macros work for you
[02:11:25] *** Joins: bdt (~bdt@2a01:799:39c:7600:e65f:1ff:fe08:8a88)
[02:12:22] *** Quits: p-i- (~Ohmu@2403:6200:8978:e2c5:bc44:6258:a303:9cc5) (Read error: Connection reset by peer)
[02:12:43] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:13:11] *** Joins: pulse (~pulse@user/pulse)
[02:18:26] *** Quits: Tokamak_ (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:20:48] <jancoow> Because?
[02:20:50] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[02:23:00] *** Joins: manjaro-user (~manjaro-u@199-7-158-54.eng.wind.ca)
[02:23:04] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:27:57] <imMute> because you're using BOOST_PP?   I'd always go for a source code generator over using that.
[02:29:19] <jancoow> I'm not familiar with both of them haha
[02:29:38] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[02:30:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[02:31:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[02:31:12] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[02:31:54] *** Joins: Fairy (~Fairy@2001:464a:4992:0:e4d3:da3f:1ac5:d2c6)
[02:34:05] *** Quits: causative_ (~halberd@98.118.7.200) (Changing host)
[02:34:05] *** Joins: causative_ (~halberd@user/causative)
[02:36:03] *** Joins: pulse (~pulse@user/pulse)
[02:40:37] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:cf7:e488:baea:da58) (Ping timeout: 240 seconds)
[02:43:01] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:43:20] *** Joins: evocatus (~evocatus@62.182.77.224)
[02:48:07] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[02:54:10] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[02:57:06] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[02:57:21] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:f4df:e19a:2cc0:748a)
[02:59:41] *** Quits: jsbach (~jsbach@2a01:c23:6442:c300:9b5f:f3b9:5c34:fa84) (Ping timeout: 252 seconds)
[03:02:30] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:04] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:10:53] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[03:20:43] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 256 seconds)
[03:25:25] *** Quits: manjaro-user (~manjaro-u@199-7-158-54.eng.wind.ca) (Ping timeout: 256 seconds)
[03:27:59] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[03:28:12] *** Joins: ferdna (~ferdna@user/ferdna)
[03:30:21] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[03:36:47] *** Joins: AmR (~AmREiSa@41.36.185.103)
[03:47:52] *** Quits: magla (~gelignite@55d4b5f5.access.ecotel.net) (Quit: Stay safe!)
[03:53:26] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:63ed) (Quit: Leaving)
[03:56:01] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[04:00:10] *** Joins: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:00:10] *** Quits: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3) (Client Quit)
[04:00:14] *** Joins: jkaye__ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:00:14] *** Quits: jkaye__ (~qicruser@2605:ef80:c:803f::60:fe3) (Client Quit)
[04:00:25] *** Joins: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3)
[04:02:28] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:03:18] *** Quits: jkaye_ (~qicruser@2605:ef80:c:803f::60:fe3) (Read error: Connection reset by peer)
[04:07:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[04:08:10] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:12:30] *** Joins: chozorho (~chozorho@2601:146:300:c30::f5f4)
[04:17:47] *** Quits: proller (~p@2a02:6b8:b081:7212::1:5) (Ping timeout: 252 seconds)
[04:19:14] *** Joins: gehn1 (~gehn@user/gehn)
[04:19:25] *** Joins: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[04:20:13] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 256 seconds)
[04:21:37] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:30:51] *** Joins: proller (~p@80.240.216.69)
[04:34:16] *** Quits: Fairy (~Fairy@2001:464a:4992:0:e4d3:da3f:1ac5:d2c6) (Ping timeout: 250 seconds)
[04:34:57] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:36:43] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[04:37:14] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[04:38:43] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[04:38:57] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:f4df:e19a:2cc0:748a) (Ping timeout: 240 seconds)
[04:39:25] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c4b8:6209:10f:d3e4) (Ping timeout: 240 seconds)
[04:47:25] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 256 seconds)
[04:48:52] *** Joins: LangerJan (~jan@user/langerjan)
[05:04:23] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:522:b004:a579:c68a)
[05:08:17] *** Quits: jkaye (~jkaye@2601:281:8300:7530:8293:8dc5:8087:f321) (Ping timeout: 240 seconds)
[05:08:37] *** Quits: blackhole (~blackhole@2601:600:9f80:2aa0:522:b004:a579:c68a) (Ping timeout: 240 seconds)
[05:10:02] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[05:16:53] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[05:23:13] *** Joins: jkaye_ (~qicruser@2601:281:8300:7530:ad17:6976:1a41:d704)
[05:27:44] *** gehn1 is now known as gehn
[05:30:40] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[05:36:12] *** Quits: kaichiuc1u (~kaichiuch@144.202.8.127) (Remote host closed the connection)
[05:37:51] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:40:56] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:04] *** ChanServ sets mode: +v npaperbot
[05:43:36] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[05:51:33] *** Quits: jkaye_ (~qicruser@2601:281:8300:7530:ad17:6976:1a41:d704) (Read error: Connection reset by peer)
[05:59:25] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[06:00:06] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[06:03:39] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[06:05:01] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 250 seconds)
[06:05:45] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:07:28] *** Joins: pulse_ (~pulse@user/pulse)
[06:10:19] *** Quits: LangerJan (~jan@user/langerjan) (Ping timeout: 256 seconds)
[06:10:19] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[06:10:28] *** Joins: LangerJan (~jan@user/langerjan)
[06:10:53] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Ping timeout: 256 seconds)
[06:11:37] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[06:16:06] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Ping timeout: 250 seconds)
[06:17:52] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[06:21:32] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[06:29:02] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (Remote host closed the connection)
[06:32:26] *** Joins: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011)
[06:34:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[06:36:51] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Read error: Connection reset by peer)
[06:37:11] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[06:43:57] <thad_the_man> Whast is the latest techinque for doing the equivalent of tags?
[06:47:48] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[06:48:05] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[06:57:25] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[06:58:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:04:37] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 240 seconds)
[07:05:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:07:10] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[07:18:42] *** Joins: adeliktas5 (~adeliktas@i59F5F0DE.versanet.de)
[07:20:35] *** Quits: adeliktas (~adeliktas@i59F52CD4.versanet.de) (Ping timeout: 256 seconds)
[07:20:35] *** adeliktas5 is now known as adeliktas
[07:27:26] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Ping timeout: 245 seconds)
[07:31:46] *** Quits: kurfen (~kurfen@176.119.195.10) (Ping timeout: 260 seconds)
[07:31:55] *** Joins: kurfen_ (~kurfen@176.119.195.10)
[07:44:21] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[07:46:54] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:52:32] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[07:52:32] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[07:52:32] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[08:01:23] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 256 seconds)
[08:02:41] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:08:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[08:08:22] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[08:12:26] *** Quits: taiyu (~taiyu@user/taiyu) (Ping timeout: 245 seconds)
[08:14:12] *** Joins: taiyu (~taiyu@user/taiyu)
[08:16:24] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[08:16:27] *** Quits: rajkohaxor (~rajkosto@178.220.243.118) (Quit: Leaving)
[08:16:37] *** Joins: rajkosto (~rajkosto@178.220.243.118)
[08:18:31] <Alipha> thad_the_man: what do you mean by tags?
[08:20:56] <thad_the_man> Alipha: I mean indexing C++ like ctags or etags.
[08:22:07] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Quit: Quit)
[08:24:46] <thad_the_man> For example run a program (etags) against a code base, then use another program to tell you where a certain class, member function, variable ... is defined.
[08:38:16] *** Joins: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by)
[08:42:50] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[08:45:37] *** Joins: teepee (~teepee@openscad/teepee)
[08:55:37] *** Joins: Burgundy (~yomon@82.76.72.88)
[08:59:11] *** Quits: rajkosto (~rajkosto@178.220.243.118) (Read error: Connection reset by peer)
[09:00:13] *** Quits: r6ix (~r6ix@2607:fea8:5e0:82a0:42:1918:7b45:f3f3) (Read error: Connection reset by peer)
[09:04:42] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[09:06:49] *** Joins: malloy (~jimery@113.116.52.211)
[09:14:33] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:21:08] <hnOsmium0001[m]> something like ccls or clangd I guess?
[09:21:23] <hnOsmium0001[m]> AFIAK people still use tags for the lower memory usage (apparently) on large projects
[09:29:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[09:34:21] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[09:35:26] *** Quits: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011) (Ping timeout: 250 seconds)
[09:40:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:04] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:04] *** ChanServ sets mode: +v npaperbot
[09:47:39] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[09:47:44] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Remote host closed the connection)
[09:49:39] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[09:55:36] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[09:56:04] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[10:05:12] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Ping timeout: 276 seconds)
[10:08:10] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:19:12] *** Quits: pulse_ (~pulse@user/pulse) (Ping timeout: 250 seconds)
[10:22:46] *** Joins: manjaro-user (~manjaro-u@199-7-158-54.eng.wind.ca)
[10:26:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[10:31:26] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:32:01] *** Quits: chozorho (~chozorho@2601:146:300:c30::f5f4) (Ping timeout: 245 seconds)
[10:32:27] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:32:58] *** Joins: chozorho (~chozorho@2601:146:300:c30::7a99)
[10:38:38] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[10:53:52] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[10:56:44] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:01:40] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:02:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[11:10:25] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[11:11:27] *** Joins: wyre (~wyre@user/wyre)
[11:13:30] *** Joins: namo (~nomo@95.87.208.95)
[11:14:30] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[11:19:03] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[11:19:46] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:20:59] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:22:07] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:26:39] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[11:28:22] *** Joins: Xardas (~Xardas@149.233.51.127)
[11:28:47] *** Quits: chozorho (~chozorho@2601:146:300:c30::7a99) (Quit: WeeChat 3.0)
[11:32:43] *** Joins: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011)
[11:42:59] *** Joins: jsbach (~jsbach@2a01:c22:b0ac:9600:1cd7:52ec:6b1a:4d40)
[11:46:44] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[11:47:29] *** Joins: teepee (~teepee@openscad/teepee)
[11:49:11] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:49:44] *** Quits: Karyon (~Karyon@user/karyon) (Quit: Good bye)
[11:49:47] *** Quits: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (Read error: Connection reset by peer)
[11:49:57] *** Joins: jbalint (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[11:49:58] *** Joins: Karyon_ (~Karyon@user/karyon)
[12:00:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:01:37] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 240 seconds)
[12:04:05] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:04:06] *** Joins: dextaa (~DV@user/dextaa)
[12:10:14] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[12:18:22] <ville> thad_the_man: look for an lsp for your editor?
[12:20:08] *** Joins: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net)
[12:21:18] <ac_slater> hey guys. I realize I've never known how to destroy an object that owns a mutex. If some other thread is holding the lock, does my object dtor grab the lock?
[12:21:37] <ac_slater> I guess I've been destroying objects without ensuring no one else is using my lock
[12:22:05] <ville> std::mutex or?
[12:23:30] <ac_slater> ville: really pthread_mutex in this exact case I'm staring out but I'm curious to hear if std::mutex has semantics to not make me think about this problem
[12:23:57] *** Joins: robod34 (~Username@79.113.195.239)
[12:24:28] <ac_slater> my example is a queue object that owns a lock. Other threads call q.push() that grabs a lock. If I just destroy my queue instance while some other thread is holding the lock, what happens?
[12:25:15] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:26:36] *** Quits: bdt (~bdt@2a01:799:39c:7600:e65f:1ff:fe08:8a88) (Ping timeout: 250 seconds)
[12:28:03] <ville> for std::mutex it's ub to destroy the object, or terminate the thread, when it's locked
[12:29:05] <ville> same for posix but let me dig the web link...
[12:30:28] <ville> for std::mutex: http://www.eelis.net/c++draft/thread.mutex.class#5.sentence-1
[12:30:52] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[12:31:06] <ac_slater> damn
[12:31:12] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[12:31:37] <ac_slater> well... how do people handle this? Just lock/block on the mutex in the dtor to make sure no one else is using it, then unlock it quickly?
[12:31:56] <ville> https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_destroy.html 3rd chapter
[12:32:06] <ac_slater> heck yea, thanks ville
[12:32:16] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (Quit: leaving)
[12:32:33] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[12:32:37] <ac_slater> (I've been ignoring this UB for years)
[12:32:39] <ville> why is your mutex ownership so vague?
[12:33:22] <ville> or why are your object lifetimes so vague?
[12:33:41] <ac_slater> I think that's why I haven't ran into this issue, is because my lifetimes are pretty strict
[12:34:24] <ac_slater> in situations where a class owns a mutex, is there some general safety one should do in the dtor?
[12:34:57] *** Cyp_ is now known as Cyp
[12:35:07] <fiesh> "then unlock it quickly" -- famous last words of a race condition
[12:35:12] <ac_slater> ;0
[12:35:14] <ac_slater> exactly
[12:35:25] <ville> i wouldn't bother really. rather don't call .lock()/.unlock() manually?
[12:36:12] <fiesh> it sounds very much wonky that somehow can have a lock on your mutex while it goes out of scope.  like wonky in terms of design.  this isn't something to be fixed locally, since your ownership seems broken
[12:37:05] <ville> and if you are able to then stick the mutex as a member of a class, and them expose functions which lock/unlock it appropriately as part of their operation, rather than the expecting the user of the class to lock, call function, unlock
[12:37:13] <ville> s/them/then/
[12:37:29] <ac_slater> that's what I mean though
[12:37:47] <ac_slater> if we stick to the queue example, push() and pop() will manage the lock internally
[12:38:16] <ac_slater> so I have to do anything in the dtor to make sure no other thread "is in the middle of" a pop()/push() and holding the lock?
[12:38:41] <ville> if the queue owns the mutex then anyone calling those member functions would have to have a pointer/reference to the queue...
[12:38:57] <ac_slater> right
[12:39:09] <ville> if you are destroying the object in one thread while other threads are calling member functions you've bigger problem than just the mutex
[12:39:11] <fiesh> I think you should rather ensure that anybody who holds the lock also owns the object through shared ownership like shared_ptr
[12:39:15] <ac_slater> right, lifetimes
[12:39:28] <ville> err destroying the queue object
[12:39:39] <ac_slater> ville: I know what you mean.
[12:39:41] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[12:39:49] <ac_slater> fiesh: good point
[12:39:58] <ville> so if these are message queues you use to communicate between threads then it's pretty simple to get right
[12:40:12] <ac_slater> ville: that's likely why I've never hit UB
[12:40:43] <ac_slater> I just saw std::notify_all_at_thread_exit() and I really think I under use condvars
[12:40:56] <ville> auto q0 = queue{}; auto q1 = queue{}; auto t = std::thread{&f, &q0, &1}; t.join();
[12:40:58] <xkoncek> destryoing shared objectss is always problematic, you really want to ensure that noone else is accessing it at the point of destroying the object
[12:41:03] <ville> you are now "correct" by construction
[12:41:19] <ac_slater> ville: right. I see what you mean. I'm OK there. Thanks
[12:42:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[12:42:10] <ac_slater> thanks guys. I think I'm ok.
[12:42:56] <xkoncek> but... i don't think having an internal lock is the gratest idea, because you may end up in a hidden deadlock
[12:43:36] <ville> for a message queue, if you are using mutex, it's pretty bomb proof
[12:43:45] <xkoncek> yes
[12:44:44] <ac_slater> I think I need to hit up the Anthony Williams book again and see what condvars do lol
[12:44:57] <ac_slater> I can't help but using mutex+condvar is smart sometimes
[12:45:09] <ac_slater> or maybe a semaphore? idk man
[12:45:12] <ac_slater> thanks guys
[12:45:51] <ville> that book contains a really simple queue implementation that should serve as a reasonable default for a inter-thread message queue
[12:46:29] <ac_slater> it doesn't use condvars, so maybe that's my clue
[12:46:40] <ville> if you then determine it's what's slowing you down, try a better implementation, but it's a good starting point to get a functioning system up
[12:46:45] <ac_slater> thanks the exact queue implementation I stole and am trying to reason about
[12:47:01] <ac_slater> thats *
[12:47:39] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:47:59] <ac_slater> do you guys think there is a generic set of things to do in dtors for objects that internally own a lock?
[12:48:12] <ville> no
[12:48:33] <ville> the best dtor is the one you don't write. if you're writing one then you should look for a reason not to
[12:49:07] <ac_slater> roger that
[12:49:15] <ac_slater> this is interesting: https://wiki.sei.cmu.edu/confluence/display/cplusplus/CON50-CPP.+Do+not+destroy+a+mutex+while+it+is+locked
[12:50:16] <ac_slater> but this we all knew anyway
[12:50:20] <ac_slater> thanks guys, I'll drop it for nw
[12:50:22] <ac_slater> now *
[12:51:13] <ville> that is you'll write dtors for utility types, std::unique_ptr-like types, and then can use such types so you don't have to write dtors for other types
[12:52:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c57b:af89:b9b2:8139)
[12:52:54] <ac_slater> complete understand
[12:53:01] <ac_slater> good to keep that as a goal
[12:53:17] <ac_slater> I always use lock_guard and such. Just wondering if I'm doing it wrong
[12:53:20] <ac_slater> sounds like it's ok
[12:59:38] <ac_slater> ville: and fiesh: , thanks!
[13:01:03] <ville> ac_slater: williams chapter 6.2.2 is specifically one that uses condition variables
[13:02:59] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[13:03:39] <ac_slater> you the man
[13:06:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[13:07:02] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[13:13:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:15:05] *** Joins: plastico (~plastico@neomutt/plastico)
[13:24:56] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Client Quit)
[13:33:16] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:36:59] *** Quits: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011) (Ping timeout: 250 seconds)
[13:40:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:05] *** ChanServ sets mode: +v npaperbot
[13:47:20] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[13:47:24] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:49:01] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[13:49:52] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[13:50:13] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[13:52:18] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:52:50] *** Quits: manjaro-user (~manjaro-u@199-7-158-54.eng.wind.ca) (Ping timeout: 250 seconds)
[13:53:43] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[13:58:16] *** Joins: magla (~gelignite@55d475f4.access.ecotel.net)
[14:01:59] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Read error: Connection reset by peer)
[14:04:51] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[14:04:56] *** Joins: DSpider (~DSpider@82.79.237.88)
[14:06:53] *** Quits: romik (~romik@mm-135-105-125-178.mfilial.dynamic.pppoe.byfly.by) (Ping timeout: 256 seconds)
[14:15:43] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[14:23:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[14:24:08] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:25:05] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[14:25:17] *** Quits: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by) (Max SendQ exceeded)
[14:26:12] *** Joins: romik (~romik@mm-47-72-125-178.mfilial.dynamic.pppoe.byfly.by)
[14:27:13] *** Joins: proller (~p@80.240.216.69)
[14:30:58] *** Quits: malloy (~jimery@113.116.52.211) (Quit: WeeChat 3.0)
[14:42:29] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:43:59] *** Joins: marius_ (~Username@79.113.195.239)
[14:46:57] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[14:46:57] *** Quits: robod34 (~Username@79.113.195.239) (Ping timeout: 256 seconds)
[14:46:57] *** marius_ is now known as robod34
[14:47:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:47:05] *** ChanServ sets mode: +v npaperbot
[14:52:22] *** Joins: sigma_ (~sigma@164.215.255.32)
[15:00:09] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[15:03:02] *** Joins: paul424 (~tom@ip-5-172-235-55.multi.internet.cyfrowypolsat.pl)
[15:05:49] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[15:06:56] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[15:24:20] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[15:30:34] *** Joins: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:32:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[15:33:00] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[15:33:11] *** Joins: Fairy (~Fairy@2001:464a:4992:0:d4db:bb59:ac7:e011)
[15:33:36] *** Quits: kaph_ (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[15:34:50] *** Joins: johnny (~johnny@user/johnny)
[15:35:15] *** Quits: johnny (~johnny@user/johnny) (Client Quit)
[15:39:09] *** Joins: johnny (~johnny@user/johnny)
[15:41:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Remote host closed the connection)
[15:41:35] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[15:46:01] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:47:33] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:52:38] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[15:56:50] *** Joins: Leone (~Leo@157.52.18.77)
[16:01:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[16:04:14] <PJBoy> I wish clang-tidy had a way to report the actual number of warnings ina  file
[16:05:32] <PJBoy> this file I'm clang-tidying reports: "7077 warnings generated. 14174 warnings generated." lists about 20-30 warnings, and then says "Suppressed 14087 warnings (14087 in non-user code)."
[16:05:55] <PJBoy> none of those numbers are useful to me
[16:06:39] *** Quits: noarb (~noarb@user/noarb) (Read error: Connection reset by peer)
[16:08:10] <PJBoy> I guess `clang-tidy -p . some_file_idk.cpp | grep warning: | wc -l` is what I'm looking for
[16:09:50] *** Joins: noarb (~noarb@user/noarb)
[16:12:12] *** Joins: johnny (~johnny@user/johnny)
[16:16:54] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:18:54] *** Joins: proller (~p@2a02:6b8:0:40c:9cb6:f42d:a833:9f8c)
[16:21:02] <PJBoy> hm
[16:21:16] <PJBoy> clang-tidy and VS code's invocation of clang-tidy seem to disagree
[16:21:18] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[16:22:09] *** Quits: JohnMS_AWAY (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 256 seconds)
[16:23:34] <PJBoy> oh it's probably clangd vs clang-tidy
[16:27:46] <PJBoy> direct clang-tidy doesn't seem to understand that our asserts are are enabled in this build, and is giving unused argument warnings :/
[16:28:13] <LordKalma> it's not finding the compile_commands?
[16:28:37] <PJBoy> I'd be surprised
[16:28:45] <PJBoy> it's in the current directory
[16:28:50] <PJBoy> so my `-p .` should fine it
[16:29:23] <PJBoy> hm
[16:29:47] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[16:29:56] <PJBoy> tried pointing -p at my build directory, no avail there either
[16:29:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[16:30:29] <PJBoy> if I point -p at someone random like /opt it immediately fails
[16:30:41] <PJBoy> so it must be finding compile_commands.json correctly
[16:31:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[16:36:40] <PJBoy> clangd might actually just not support unused parameter warnings?
[16:37:59] <PJBoy> nope, not that
[16:38:23] <PJBoy> adding an unused parameter actually provides a hilarious number of somewhat contradictory warnings
[16:39:53] <PJBoy> "Parameter 'x' is unused. The parameter 'x' is copied for each invocation but only used as a const reference; consider making it a const reference. Constructing string from nullptr is undefined behaviour. Use nullptr"
[16:41:24] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[16:41:25] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[16:41:25] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[16:43:18] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:45:05] <PJBoy> I might have to just disable that check
[16:45:21] <PJBoy> bah but it works in VS Code
[16:45:55] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[16:46:38] *** Joins: irrenhaus3 (~xenon@HSI-KBW-046-005-003-085.hsi8.kabel-badenwuerttemberg.de)
[16:54:22] <PJBoy> if I manually define the assert enabling define via --extra-arg then clang-tidy works as it should
[16:54:37] <PJBoy> so there's definitely a sense that it's failing to read the compile commands correctly
[16:54:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:55:28] <LordKalma> and the compile_commands has the correct flag in the commands=?
[16:55:53] <LordKalma> also, can you clang-tidy -v on a terminal and on vscode to to the extensions tab and check clangd version?
[16:56:07] <LordKalma> because the clangd extension can download/update clangd independently
[17:02:17] <PJBoy> yeah it has the flag in compile_commands
[17:02:48] <PJBoy> the file in question has two commands in there actually
[17:02:58] <PJBoy> but they both define the thing
[17:04:13] <PJBoy> god damn it
[17:04:40] <PJBoy> I deleted the cmake cache and rebuilt it
[17:04:48] <PJBoy> and now clang-tidy is acting correctly
[17:04:49] <rpav> i'd still check the compile_commands.json thing and see if it's the right one too
[17:04:53] <rpav> yeah it was probably that then
[17:06:43] <PJBoy> wow clang-tidy doesn't have -v, you gotta spell out --version
[17:07:35] <rpav> yeah i hate the new trend toward no -v or -h
[17:07:38] <rpav> well
[17:07:43] <rpav> -v can often be verbose, but
[17:08:11] <rpav> (i understand it, and it's probably good, but i still hate it ;)
[17:08:23] <LordKalma> be like cl.exe : cl.exe -v : Microsoft compiler V16, option -v doesn't exist
[17:08:27] <PJBoy> I don't think VS Code will report the clangd version if I ask it
[17:08:28] <LordKalma> but I got the info anyway :D
[17:08:47] <LordKalma> PJBoy, output tab in the terminal panel, clangd on the dropdown
[17:08:49] <rpav> there's M_PI for double pi, and M_PIl for long double pi, but there's no M_PIi for int pi
[17:08:51] * rpav runs
[17:10:01] <rpav> PJBoy: i think you can find the path it uses, and ask yourself
[17:10:09] <rpav> but i may be thinking of other editors
[17:10:24] <LordKalma> that's also possible yeah
[17:10:28] <PJBoy> I don't see the output I'm looking for in where you said
[17:10:37] <PJBoy> the path is just clangd
[17:10:54] *** Quits: paul424 (~tom@ip-5-172-235-55.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[17:10:55] <LordKalma> then it's just using $path
[17:11:01] <PJBoy> and my clangd --version and clang-tidy --version are both 10.0.0
[17:11:06] <LordKalma> so old?
[17:11:10] <rpav> old D:
[17:11:15] <PJBoy> about as new as you get on linux
[17:11:17] <PJBoy> :p
[17:11:24] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[17:11:36] <PJBoy> *on ubuntu 20.04
[17:11:37] <rpav> you mean "i don't know how to use a dist that has newer ones"
[17:11:54] <LordKalma> I[13:41:00.341] clangd version 13.0.0
[17:11:56] <rpav> generally avoid ubuntu or any deb-based
[17:12:21] <rpav> (or rpm-based, but i assume you'd avoid rpm-based because no dist worth using still uses that anyway)
[17:12:33] <LordKalma> cries in OpenSuse
[17:12:43] <rpav> you use opensuse?! that's still around? ;)
[17:12:56] <LordKalma> opensuse was the favorite linux distro i've tried
[17:12:59] <rpav> dman i guess so
[17:13:13] <LordKalma> it's genuinely a good distro
[17:13:19] <LordKalma> better than that shady manjaro crap
[17:13:22] <rpav> do they do rolling release and/or keep up on stuff?
[17:13:37] <LordKalma> opensuse tumbleweed is a rooling bleeding-edge
[17:13:38] <rpav> yeah i avoid the arch knockoffs and just use arch .. i'd use nix but i think it lacks in the package department
[17:13:56] <rpav> interesting, so there is an rpm dist that does it right i guess
[17:14:20] <LordKalma> yeah, tumbleweed is great
[17:14:23] <rpav> (obviously there's nothing inherent in the format, but there's a high correlation between rpm/deb and "way behind" ;/)
[17:14:52] <LordKalma> and opensuse is the only distro I've used that's on par with ubuntu regarding for example hybrid graphics support and etc out of the box
[17:15:15] <LordKalma> well, the most notable rpm distro is RHEL and that is old af shit
[17:15:24] <LordKalma> red hat is even maintaining python 2.7 now
[17:16:01] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[17:16:29] <rpav> dunno .. if you want out of the box "it just works" then probably .. ubuntu sortof gets that right, but only for a very slim "common" setup
[17:16:53] <LordKalma> manjaro is like extremely popular, dunno why
[17:17:08] <PJBoy> 'cause it sounds cool
[17:17:11] <LordKalma> despite is sometimes shady af, and I'm not even talking about the finance stuff
[17:17:25] <rpav> dunno i think i tried it and it didn't do what i wanted either
[17:18:37] <rpav> (e.g. try installing linux with a root on a partitionless raid drive using <dist> .. this is actually not even close to hard as long as the installers don't hard-code some boneheaded assumptions .. linux mint can do it last i tried with its graphical installer iirc)
[17:21:57] *** Joins: jkaye (~jkaye@2601:281:8300:7530:91a1:7dca:589a:aaae)
[17:25:45] <cbreak> I just saw a nice survey result this morning
[17:25:56] <cbreak> https://drive.google.com/file/d/15b-4GMTSEE9tyqeQdBfy_LZnxQIdp38Y/view
[17:26:31] <cbreak> it seems CentOS is by far the most popular linux distro, by a massive margin, in the VFX space
[17:26:58] <cbreak> rpav: ubuntu can now install itself on zfs :D
[17:27:22] <cbreak> I usually recommend ubuntu when ever anyone asks me.
[17:27:26] <rpav> cbreak: but it'd still be ubuntu ;/
[17:27:57] <rpav> yeah i don't get the centos thing
[17:28:00] <cbreak> rpav: yeah. With ubuntu, you at least get somewhat modern software
[17:28:07] <rpav> cbreak: you really don't
[17:28:11] <cbreak> and you get new LTS releases every two years
[17:28:14] <cbreak> unlike CentOS
[17:28:20] <cbreak> which is still stuck on GCC 4.x
[17:28:22] <rpav> well ok it's better than centos, sure
[17:28:28] <cbreak> yes.
[17:28:41] <cbreak> it's obvious that anything that updates faster than ubuntu is unusable
[17:28:44] <cbreak> (for the studios)
[17:28:57] <rpav> nah they're newer than that but still
[17:29:00] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[17:29:00] <cbreak> they seem to already complain about the updates you get on ubuntu :/
[17:29:03] *** Karyon_ is now known as Karyon
[17:40:11] <PJBoy> "clang-tidy applied 0 of 7 suggested fixes" >:(
[17:40:53] <PJBoy> oh they might have been for system headers or something
[17:40:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:05] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:05] *** ChanServ sets mode: +v npaperbot
[17:42:52] * PJBoy tries -fixing everything in the project
[17:47:54] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 250 seconds)
[17:53:53] <very_sneaky> LordKalma: I think manjaro is/was popular because it has aur access and had the perception of being "ez-mode arch", and a graphical installer for one
[17:59:20] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:59:39] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[18:00:55] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[18:03:20] <rpav> *uses markdown* .. *has wysiwyg-only editor* ðŸ¤¦
[18:15:54] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Read error: Connection reset by peer)
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:22:24] *** Joins: pulse_ (~pulse@user/pulse)
[18:24:58] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:27:56] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:28:10] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:32:41] *** Joins: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu)
[18:34:09] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[18:34:15] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:34:46] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:38:36] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[18:39:50] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[18:44:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce)
[18:44:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:749d:daa8:d51c:47ce) (Changing host)
[18:44:55] *** Joins: skapata (~Skapata@user/skapata)
[18:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:47:20] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[18:48:16] <PJBoy> wtf clang-tidy -fix modifies the header file as well as the source file
[18:48:23] <PJBoy> presumably provided they have the same name
[18:48:42] <PJBoy> fair enough I guess, but it took me a while to work that out
[18:50:40] <rpav> it should also know the source file that includes the header file
[18:50:45] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[18:50:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:51:05] <rpav> not sure what it's fixing, but you could possibly try a fix where multiple files include the same header
[18:51:38] <rpav> alternatively if the fix is a refactor .. rename of a symbol or rewrite of a definition .. it certainly knows where both live, regardless of filename
[18:51:39] <ville> PJBoy: you give it a compile_commands.json. it can build a representation of what references what from that
[18:52:09] <PJBoy> these source files included a whole bunch of headers
[18:52:22] <ville> umm why does that matter? it's a compiler
[18:52:30] <PJBoy> it must be assuming the header is more strongly related if it's named the same
[18:52:32] <ville> well "compiler"
[18:52:39] <rpav> PJBoy: what is it actually changing?
[18:53:11] <ville> PJBoy: why do you think it cares about headers? it cares about them if they are included by one of the translation units listen in your compile_commands.json
[18:53:36] <PJBoy> well it doesn't fix other headers
[18:54:34] <PJBoy> it's doing stuff that makes sense though
[18:54:59] <PJBoy> like downgrading a member function to a static function
[18:55:16] <PJBoy> but it doesn't fix the tests that call these functions
[18:55:23] <ville> that's pretty weak then. it should go through the compile_commands.json and parse the include dependencies of each translation unit in a pre-pass
[18:55:25] <PJBoy> so it's a partial fix that ends up breaking the build
[18:55:40] <ville> PJBoy: are those tests in your compile_commands.json?
[18:55:53] <rpav> probably it's the fix that's broken, rather than the comprehension
[18:56:01] <rpav> though let's see
[18:56:58] <rpav> wait, _how_ does "downgrading" a function to static break the build .. calling a static function via an object is just as valid
[18:57:36] <PJBoy> hm
[18:59:15] * PJBoy scratches head
[18:59:26] <PJBoy> yeah it's definitely not that that's breaking the build
[18:59:27] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:59:42] <PJBoy> this is weird
[19:00:24] <PJBoy> I assumed calling a static function like a non-static one didn't work
[19:00:33] <PJBoy> but I guess it does
[19:02:00] <PJBoy> initialising this member variable to zero in the header is causing a unit test to fail
[19:04:22] <PJBoy> might be because it stops the class from being trivial
[19:04:57] <PJBoy> nah it has a ctor anyway
[19:06:20] <rpav> if that was the failure it ought to be a compilation failure
[19:06:25] <PJBoy> wtf, this code is some god damn trash
[19:06:34] <rpav> hehe
[19:07:00] <PJBoy> it was seriously checking if this member was less than 10 in the ctor
[19:07:04] <PJBoy> without having initialised it anywhere
[19:07:38] <PJBoy> hmmm
[19:07:50] <PJBoy> actually no
[19:08:00] <PJBoy> it is set by this function call that's used to initialise one of the other members
[19:08:23] <PJBoy> huh, what even happens in this case
[19:10:20] <PJBoy> << S().y; int f(int& y) { y = 1; return 0; } struct S { int x, y{}; S() : x(f(y)) {} };
[19:10:20] <geordi> 0
[19:10:25] <PJBoy> that's what I'm dealing with
[19:11:03] <PJBoy> this function f does correctly set y, but then the default member initialiser kicks in and sets it back to zero
[19:11:07] <rpav> seems valid?
[19:11:18] <rpav> er
[19:11:23] <PJBoy> if y isn't given the in-class initialiser
[19:11:24] <rpav> no it doesn't!
[19:11:28] <rpav> order of init
[19:11:28] <PJBoy> << S().y; int f(int& y) { y = 1; return 0; } struct S { int x, y; S() : x(f(y)) {} };
[19:11:29] <geordi> 1
[19:11:34] <PJBoy> that's a yikes from me
[19:11:51] <rpav> that is, f doesn't _correctly_ set y, it incorrectly sets y, i think
[19:11:55] <PJBoy> strictly speaking f is assigning to an uninitialised y
[19:11:57] <PJBoy> so it's UB
[19:11:59] <rpav> yea
[19:12:21] <rpav> the kind of UB that actually has a surprising result, not "well it still works," in this case
[19:13:14] <rpav> like probably the better solution there is `int y{}, x;` but i dunno
[19:17:59] <PJBoy> reordering the declarations seems reasonable
[19:18:07] <PJBoy> but also feels a bit fragile
[19:18:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[19:18:22] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[19:18:23] <rpav> well, doing-it-that-way is sortof fragile
[19:18:34] <PJBoy> yeah that f function is stupid
[19:18:35] <rpav> ideally i think if you want to cross-initialize values it's best to do so in the body
[19:18:43] <PJBoy> but I might just bring it into the body, exactly
[19:19:06] <rpav> i mean _probably_ if it's visible the optimizer will produce the same code, and it's safe, so it's like, be clear and safe
[19:19:24] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (Quit: leaving)
[19:22:25] <rpav> actually i think it should be also surprising that that's not flagged as "use before intialization"
[19:25:19] *** Joins: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu)
[19:26:03] <PJBoy> yeah it really isn't
[19:26:09] *** Joins: NiD27 (~nid27@49.205.146.21)
[19:32:00] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[19:35:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:36:11] *** Quits: Youmu (uid129469@user/condy) (Quit: Connection closed for inactivity)
[19:39:43] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[19:48:08] <rpav> struct S { int x{foo(y)}, y{}; }; _also_ "works" (i.e. compiles) and also isn't warned about
[19:49:04] <rpav> though is possibly more evidently-wrong, which is more reason to avoid the ctor initialization list
[19:49:17] <rpav> or whatever it's called
[19:52:23] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[19:59:00] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[20:00:08] <PJBoy> :/
[20:00:47] <PJBoy> clang-tidy's fixes are changing some of our ctors into `S(const S&) = delete = delete;`
[20:01:12] <PJBoy> presumably because it has both hicpp-use-equals-delete and modernize-use-equals-delete
[20:03:44] <PJBoy> that's the trouble with aliases you see
[20:09:42] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[20:10:25] <PJBoy> hrm here we go
[20:10:53] <PJBoy> this time clang-tidy added const qualification to a member function definition that it decided didn't modify *this in any way
[20:10:57] <PJBoy> but didn't change the declaration
[20:11:06] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:15:22] <PJBoy> oh no, it's the other way around
[20:15:41] <PJBoy> it made the member function that was const qualified static and didn't change the definition
[20:25:45] <Alipha> ac_slater: you should never have to worry about locks in a destructor because you should never be destroying an object that other parts of the code can still access. you have lifetime issues, not threading issues.
[20:30:38] *** Quits: sigma_ (~sigma@164.215.255.32) (Ping timeout: 250 seconds)
[20:30:38] *** Joins: sigma__ (~sigma@164.215.234.46)
[20:31:25] *** Joins: AmR (~AmREiSa@41.36.185.103)
[20:34:44] <rpav> and/or ownership issues
[20:35:50] *** Quits: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[20:40:44] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[20:45:15] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[20:47:10] <InPhase> Alipha: I can recall many times many years ago where I found myself trying to put locks in destructors for various reasons.  But I don't think any ever ended up staying there, as it was always an architectural flaw motivating me to want to try it.  I think "never" is probably a fair assessment, and I would challenge anyone to present a counterexample where it actually makes sense to do for some
[20:47:16] <InPhase> reason.
[20:47:42] *** Joins: c4017w (~c4017@209.52.68.8)
[20:48:27] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[20:48:48] <rpav> hardware locks ;) bending the rules
[20:48:48] *** Quits: magla (~gelignite@55d475f4.access.ecotel.net) (Quit: Stay safe!)
[20:49:14] <rpav> or the implicit assumption that "lock" = "one of the things in std / thread related / ..."
[20:50:25] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[20:52:39] <rpav> i suppose also potentially, and related, is the assumption that locking is always "internal," i.e. part of some code you own or control, rather than your class being an ownership wrapper for a 3rd party thread/function/etc where additional external locking is required
[20:52:51] <rpav> "external" similarly covers hardware locks
[21:01:05] *** pulse_ is now known as pulse
[21:02:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[21:02:45] *** Joins: plastico (~plastico@neomutt/plastico)
[21:03:06] *** Joins: paul424 (~tom@ip-5-172-234-134.multi.internet.cyfrowypolsat.pl)
[21:07:22] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:27:14] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[21:31:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:38:12] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[21:39:26] *** Joins: Cyp_ (~cyp@213.237.88.120)
[21:40:58] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:06] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:06] *** ChanServ sets mode: +v npaperbot
[21:42:29] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[21:43:16] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:c57b:af89:b9b2:8139) (Ping timeout: 245 seconds)
[21:43:37] *** Quits: Cyp (~cyp@213.237.85.9) (Ping timeout: 256 seconds)
[21:45:51] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:15f6:fe0e:3dfb:7d89)
[21:46:13] *** Joins: p-i-_ (~Ohmu@mx-ll-183.89.28-22.dynamic.3bb.co.th)
[21:47:09] *** Quits: p-i-_ (~Ohmu@mx-ll-183.89.28-22.dynamic.3bb.co.th) (Remote host closed the connection)
[21:47:31] *** Joins: chozorho (~chozorho@2601:146:300:c30::6b8f)
[21:47:46] *** Joins: p-i-_ (Ohmu@gateway/vpn/protonvpn/ohmu)
[21:47:55] *** Joins: markong (~kvirc@213.146.188.203)
[21:48:47] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[21:49:54] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:50:07] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[21:50:15] *** Quits: p-i- (Ohmu@gateway/vpn/protonvpn/ohmu) (Ping timeout: 256 seconds)
[21:52:25] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:09:22] *** Quits: sigma__ (~sigma@164.215.234.46) (Quit: Konversation terminated!)
[22:16:22] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 250 seconds)
[22:17:58] *** Joins: magla (~gelignite@55d475f4.access.ecotel.net)
[22:18:53] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:15f6:fe0e:3dfb:7d89) (Quit: Konversation terminated!)
[22:23:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9f5:eb51:8b61:96ab)
[22:27:47] <rpav> grumble, int typing
[22:31:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[22:32:01] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[22:33:45] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[22:38:17] *** Quits: proller (~p@2a02:6b8:0:40c:9cb6:f42d:a833:9f8c) (Ping timeout: 240 seconds)
[22:55:51] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[22:57:43] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Remote host closed the connection)
[22:58:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Client Quit)
[23:00:05] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[23:05:47] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:07:46] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:10:13] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[23:10:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536)
[23:13:43] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:19:12] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:22:17] *** Quits: baltazar (~baltazar@193-226-249-203.pool.digikabel.hu) (Ping timeout: 240 seconds)
[23:22:37] *** Quits: mitch0 (~mitch@193-226-249-203.pool.digikabel.hu) (Ping timeout: 256 seconds)
[23:22:50] *** Quits: NiD27 (~nid27@49.205.146.21) (Remote host closed the connection)
[23:24:22] *** Joins: mitch0 (~mitch@84-236-20-10.pool.digikabel.hu)
[23:24:29] *** Joins: baltazar (~baltazar@84-236-20-10.pool.digikabel.hu)
[23:25:37] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[23:29:30] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:30:54] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 250 seconds)
[23:31:20] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:32:38] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[23:33:59] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Remote host closed the connection)
[23:44:08] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[23:58:02] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
