[00:00:56] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[00:02:07] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[00:02:52] *** Joins: Unit193 (ukikie@libera/staff/unit193)
[00:04:59] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[00:07:23] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[00:14:33] *** Quits: byteskep1ical (~amnesia@user/byteskeptical) (Ping timeout: 248 seconds)
[00:18:37] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[00:39:04] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[00:48:30] *** Quits: rndm1 (~rndm@143.59.164.79) (Ping timeout: 268 seconds)
[00:52:44] *** Quits: ChoHag (~mking@81.187.183.71) (Read error: No route to host)
[01:03:08] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[01:05:20] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[01:05:30] *** Quits: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr) (Quit: Leaving)
[01:08:43] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[01:21:54] *** Quits: em (~em@li247-180.members.linode.com) (Ping timeout: 240 seconds)
[01:23:02] *** Joins: em (~em@li247-180.members.linode.com)
[01:25:08] *** Joins: tradar (~tradar@user/tradar)
[01:29:38] *** Joins: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c)
[01:35:35] *** Quits: vicash (~vicash@pool-72-76-239-6.nwrknj.fios.verizon.net) (Ping timeout: 268 seconds)
[01:36:21] *** Joins: mz` (~mz`@user/mz/x-8532539)
[01:36:37] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[01:38:00] <ms7821> ^-^hi: have a look at DHKE
[01:42:27] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[01:43:49] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[01:47:12] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Remote host closed the connection)
[01:47:28] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:48:05] *** Quits: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c) (Read error: Connection reset by peer)
[01:49:18] *** Joins: vicash (~vicash@pool-72-76-239-6.nwrknj.fios.verizon.net)
[01:49:54] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[02:03:06] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 240 seconds)
[02:05:10] *** Joins: mz` (~mz`@user/mz/x-8532539)
[02:06:07] *** Joins: bsdbandit01 (~bsdbandit@172.58.190.232)
[02:12:37] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[02:12:51] *** Quits: mouseghost (~draco@user/mouseghost) (Quit: mew wew)
[02:16:06] *** Quits: bsdbandit01 (~bsdbandit@172.58.190.232) (Read error: Connection reset by peer)
[02:31:30] *** Joins: mz` (~mz`@user/mz/x-8532539)
[02:34:31] *** Joins: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c)
[02:34:34] *** Quits: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c) (Read error: Connection reset by peer)
[02:38:45] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[02:39:58] *** Joins: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c)
[02:40:06] *** Quits: bsdbandit01 (~bsdbandit@2607:fb90:a940:5ed5:a090:44e5:261b:253c) (Read error: Connection reset by peer)
[02:40:27] *** Quits: ircseeker3 (~nodebot@185.187.243.123) (Remote host closed the connection)
[02:41:27] *** Joins: onelegend (onelegend@wireguard/tunneler/onelegend)
[02:46:28] *** Joins: Fluxx (~Fluxx@user/fluxx)
[02:58:13] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:05:42] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[03:07:49] *** Joins: bsdbandit01 (~bsdbandit@172.58.190.232)
[03:11:37] *** Quits: bsdbandit01 (~bsdbandit@172.58.190.232) (Read error: Connection reset by peer)
[03:13:11] *** Quits: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr) (Remote host closed the connection)
[03:14:29] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[03:15:20] *** Quits: Narrat (~omnius@p200300df5f0ae5c606ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:16:17] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[03:26:41] *** Joins: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck)
[03:29:09] *** Joins: gggpkm_ (~gggpkm@123.113.188.221)
[03:30:01] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[03:35:53] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[03:35:53] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[03:38:53] *** Joins: mz` (~mz`@user/mz/x-8532539)
[03:45:56] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[03:47:10] *** Joins: igemnace (~ian@user/igemnace)
[03:53:55] *** Joins: kbdlnx123 (~kbdlnx123@72.252.198.165)
[04:00:51] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:01:06] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[04:01:43] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[04:04:37] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 268 seconds)
[04:04:37] *** Wulf4 is now known as Wulf
[04:07:05] *** Quits: asalor (~asalor@user/asalor) (Ping timeout: 268 seconds)
[04:10:53] *** Joins: LTCD (~LTCD@176.24.74.72)
[04:11:48] <LTCD> Hey, could someone explain this to me? Solving 2^(−n) < n(−5) we get n > 5 log n. The smallest integer value of n
[04:11:49] <LTCD>  for which this holds is n = 23. It is about negligible probabilities.
[04:13:17] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[04:15:35] *** Joins: asalor (~asalor@2a00:1028:8d1c:8c9e:feaa:14ff:fe7f:9be2)
[04:16:40] <maroon> LTCD, less than "n multiplied by negative five" ?
[04:17:41] <LTCD> maroon I am unsure what it is trying to explain.
[04:17:52] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:17:56] <maroon> you have a link for "it"?
[04:18:19] <ms7821> it's n^-5
[04:18:47] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[04:18:59] <LTCD> Sorry, yes, n^(-5) sorry.
[04:19:30] <LTCD> Introduction to Modern Cryptography 2nd edition by Katz and Lindell. 70/598 PDF.
[04:19:47] <maroon> and this is log base 'e' or '10'?
[04:20:34] <danieldg> base 2, of course
[04:20:37] <ms7821> well, 2 in this case
[04:21:01] <ms7821> the point I'm guessing LTCD isn't aware of is you can take a log of both sides of an equality
[04:21:11] <ms7821> and then then flip the signs, which reverses the equality
[04:22:11] <LTCD> But what is this trying to explain at a high level?
[04:23:05] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[04:24:26] <ms7821> it's just about getting some numbers that solve the equation
[04:24:28] *** Quits: Sofia (~sofia@gateway/tor-sasl/sofia) (Ping timeout: 244 seconds)
[04:24:54] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:25:06] *** Quits: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76) (Ping timeout: 252 seconds)
[04:25:11] *** Quits: lockna (~lockna@2001:470:69fc:105::d697) (Ping timeout: 268 seconds)
[04:25:14] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[04:25:15] *** Quits: cacu[m] (~cacuconve@2001:470:69fc:105::b9df) (Ping timeout: 276 seconds)
[04:25:30] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 244 seconds)
[04:25:30] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[04:25:38] <LTCD> But like what are they teaching me this for?
[04:25:39] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Ping timeout: 252 seconds)
[04:25:39] *** Quits: duck[m] (~duckmatri@2001:470:69fc:105::ca77) (Ping timeout: 252 seconds)
[04:26:00] *** Quits: jc_denton[m] (~raiichika@2001:470:69fc:105::ce06) (Ping timeout: 272 seconds)
[04:26:02] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[04:26:54] <ms7821> a flex? I dunno
[04:27:02] *** Quits: FireFly (firefly@glowbum/gluehwuermchen/firefly) (Ping timeout: 267 seconds)
[04:27:16] <ms7821> I guess it's a way to get a more thorough/intuitive understanding of the values
[04:27:36] <LTCD> Like I was learning about negligible functions...
[04:27:37] <ms7821> like when 3b1b goes "but another way to look at it is this..."
[04:27:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[04:28:41] *** Joins: FireFly (firefly@glowbum/gluehwuermchen/firefly)
[04:29:09] <^-^hi> Alipha: was that block cipher i was describing as secure as otp, but fit for sharing new otps?
[04:30:52] *** Joins: Sofia (~sofia@gateway/tor-sasl/sofia)
[04:31:03] <LTCD> I thought nothing was perfectly secure, with the exception of the OTP?
[04:31:04] *** Quits: d1cor (~diego@179.63.242.114) (Ping timeout: 256 seconds)
[04:31:18] <^-^hi> the first part is safe to assume i think, since you can add and permute anything based on an equal sized chunk of random data, and get anything at the end
[04:31:19] <LTCD> Perhaps ideal ciphers are perfectly secure but they do not exist.
[04:32:16] *** Quits: gggpkm_ (~gggpkm@123.113.188.221) (Read error: Connection reset by peer)
[04:34:10] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[04:34:16] <^-^hi> so the only way they would know the plaintext, is that they would know the key.
[04:34:16] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:34:59] *** aqua is now known as kish`
[04:35:52] <^-^hi> ms7812?
[04:36:04] <^-^hi> ms7821?
[04:37:03] <ms7821> sorry, I'm not sure what the question is
[04:37:30] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[04:38:25] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[04:40:13] <^-^hi> I said "can I share new OTPs, by reusing the first OTP?" the answer is no, because if they can guess any part correctly, they will be able to decrypt the corresponding parts in the next iterations
[04:40:44] <ms7821> as I said before, it all depends on what properties you want your cryptosystem to have
[04:41:30] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[04:41:54] <ms7821> if you only want to protect against passive deciphering and trust that both operators will use the system perfectly, then OTP should work
[04:42:04] <ms7821> but those are very strong requirements
[04:42:17] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 248 seconds)
[04:42:51] <^-^hi> then i asked "what about if i obfuscate the message based on the corresponding part of the OTP first, in a way that it will be indistinguishable from random data?"
[04:43:14] *** Joins: hendursaga (~weechat@user/hendursaga)
[04:43:17] <ms7821> I dunno what that means
[04:44:25] <^-^hi> https://termbin.com/dhkqi
[04:44:34] <^-^hi> something like this
[04:44:56] <^-^hi> <^-^hi> tmp_key is orig_key at first, result is msg at first. each key character in result gets added to each character at tmp_key. then it gets looped over, and every character in result gets swapped with another character of result whose index is determined by the corresponding character in tmp_key. 
[04:44:57] <^-^hi> <^-^hi> gets added to the corresponding character*
[04:45:05] <^-^hi> <^-^hi> so that should be indistinguishable from random data at the end. 
[04:45:58] <LTCD> For values of n in
[04:45:59] <LTCD>  the hundreds or thousands, an adversarial success probability of n^(− log n) is preferable to an adversarial success probability of 2(−√n). 
[04:46:09] <LTCD> Why is this the case?
[04:47:43] <^-^hi> LTCD: because n^(-log n) would be less than 2(−√n)?
[04:47:53] <^-^hi> and less probable is better
[04:47:56] <Alipha> ^-^hi: I realize this is an "appeal to authority" argument, but honestly, you should assume that any "encryption algorithm" that you come up with yourself is not secure. It takes decades of education and experience for a cryptographer to become competent enough to devise a secure encryption algorithm, and even then, they often get broken
[04:48:32] <Alipha> And I don't have the knowledge to say one way or another if your idea is secure
[04:48:34] *** Quits: ua_ (~ua@public-gprs233424.centertel.pl) (Excess Flood)
[04:49:40] <ms7821> that said, by all means, feel free to ask about the properties your code gives and try to find ways to improve them
[04:49:49] <LTCD> ^-^hi But I just got told that 2(−√n) approaches zero faster... I thought approaching zero faster meant the adversary had a lower probability...
[04:49:59] *** Joins: ua_ (~ua@public-gprs233424.centertel.pl)
[04:50:58] <LTCD> If I made sense.
[04:51:05] <^-^hi> LTCD: my math no good, but it did say "for values of n in hundreds or thousands"
[04:51:20] <Alipha> LTCD: btw, you were asking about determining the key length of a vigenere cipher the other day, correct? And you were doing so by looking for repeats of 3-character sequences and measuring the difference between them?
[04:51:37] <LTCD> I was told one was better earlier because it approaches zero faster, but now I am being told the reverse.
[04:52:06] <LTCD> Alipha Correct, but that was chapter 2, now I am onto chapter 3 which is private key crypto.
[04:52:19] <LTCD> Well, I guess both are private key in a manner of speaking.
[04:53:51] <ms7821> LTCD, what they say is the point where 2^-√n crosses n^-5 is n=~3500
[04:54:18] <ms7821> and that n^-log n crosses n^-5 where n=~33
[04:54:47] <ms7821> which might suggest to you that the line for n^-log n is going down faster, which it is initially
[04:54:59] <ms7821> but unfortunately exponentials
[04:55:28] <Alipha> LTCD: there's another way to determine key length in vigenere. You shift the ciphertext by 1 character, and look for the frequency of single-letter collisions. Then shift by 2 characters. Then 3, etc. And if the amount you shift is the key length (or a factor thereof), then you should see a large increase in the frequency of single-letter collisions
[04:57:49] *** Joins: mz` (~mz`@user/mz/x-8532539)
[04:58:53] <LTCD> ms7821 Yeah I understand that much, because for all n > 65536 2^-√n goes faster. I am stuck on this next part: Nevertheless, this does show that for values of n in
[04:58:54] <LTCD>  the hundreds or thousands, an adversarial success probability of n− log n is
[04:58:54] <LTCD> preferable to an adversarial success probability of 2^(-√n).
[04:59:21] <ms7821> that's just another way of saying the same thing
[04:59:31] <LTCD> ms7821 How?
[05:00:09] <LTCD> Alipha By shift you mean leftwards? 
[05:00:28] <Alipha> Yes
[05:00:37] <LTCD> Alipha That is a smart idea, not covered in my book. What are collisions though?
[05:01:16] <Alipha> I'll probably have to create a paste to explain
[05:02:00] <Alipha> LTCD: do you have sample ciphertext I can use?
[05:02:57] <LTCD> Alipha Sadly not, but since it is not coming up in my exam perhaps do not let it concern you. Just a quick explanation of a collision would help - I assume you mean the frequency of letters then collide with what is expected in normal English paragraphs, like 12.7% for letter e?
[05:03:57] <LTCD> ms7821 Oh, I understand it now. For values on n in the *hundreds or thousands* <--- this means less than the earlier example where n > 65536.
[05:04:04] <ms7821> yeah
[05:04:58] <LTCD> So it means when dealing with smaller values of n, it is better to have n^(-log n) because in this short term it goes to zero faster than 2^(-ROOTn)
[05:06:02] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[05:06:03] <LTCD> Sorry if my explanation sucked ms7821
[05:07:09] <ms7821> yeah exactly
[05:07:29] <ms7821> they're not saying it goes faster for all n > 65536, they're saying the lines cross over at that point
[05:08:59] <LTCD> Yeah, just before the cross and after the cross requires changes.
[05:09:00] <ms7821> because 2^-√65536 = 2^-256, and 65536^-log(65536) = 65536^-16 = (2^16)^-16 = 2^-256
[05:09:39] <LTCD> Little bit too indepth, but I got the point.
[05:09:48] <ms7821> heh yep
[05:10:29] <LTCD> Before the cross point n^(-log n) is best, after cross point where n > 65536 n^(-√n) is best
[05:10:44] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-cd06-376d-051c-caa6.res6.spectrum.com) (Ping timeout: 256 seconds)
[05:10:46] <LTCD> ms7821 Correct?
[05:10:48] <ms7821> yep
[05:11:08] <LTCD> Thanks so much, like usual IRC fairies.
[05:11:43] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-e57d-786f-86d2-d59d.res6.spectrum.com)
[05:12:11] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[05:12:11] <Alipha> LTCD: so i marked an x where the same letter occurs vertically between the original and shifted ciphertexts. note that when the shift does not match the key length, on average, there is one x. when the shift DOES match the key length, there's 4 x's: https://pastebin.com/BSDy0vXV
[05:13:45] <Alipha> LTCD: if the key length was not a prime number, say, 21, then you would see an increase in "collisions" at 3 and 7, but the most collisions would be at 21 (and 42, 63, etc)
[05:14:10] <Alipha> ... i think. now i'm second guessing myself
[05:14:48] <LTCD> No rush, I am not going anywhere.
[05:17:18] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-e57d-786f-86d2-d59d.res6.spectrum.com) (Ping timeout: 272 seconds)
[05:17:36] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-7803-acee-bc65-5a59.res6.spectrum.com)
[05:18:19] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[05:18:56] <Alipha> actually, scratch what i said about 3 and 7. that doesn't make sense to me. but there would be an incease at 42, 63, etc. ...  um, what would give an increase in collisions which would be a false positive would be if there were collisions in the key itself. for instance, the word "banana". you shift banana by 2 and the n's and a's collide. so then when you shift the ciphertext by 2, it would have an increase
[05:18:59] <Alipha> in collisions and it would look like the key length was 2. 
[05:20:43] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[05:20:56] <LTCD> I see, but also a nifty trick to realise the password likely has repeating letters.
[05:21:40] <LTCD> Oh, I see what you mean by shift now I clicked link.
[05:22:26] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[05:22:44] <LTCD> Alipha So just chop of letters which hang over the end? Whatever is left, check for collisions between upper and lower lin?
[05:22:46] <LTCD> line*
[05:22:54] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[05:23:29] <LTCD> I just noticed the x haha: ---------------x---------------------------
[05:23:59] <Alipha> i looked for collisions by hand, so i might have missed some, heh
[05:26:19] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[05:27:35] <LTCD> Did you discover this yourself Alipha?! Honestly, genius idea, I love it because I understand it haha.
[05:27:41] <Alipha> LTCD: if you took two random letters from english text, i believe there's about a 6.5% chance that they'll match. and so, if the shift amount equals the key length, then you can expect the collision frequency to be around 6.5%. if the shift amount doesn't equal the key length, then the frequency will be around 3.8% (1/26)
[05:28:15] <Alipha> LTCD: no. i learned to solve vigenere cipher using this method from some website or something
[05:28:34] <LTCD> I'll hold off asking you to sign my shirt then haha.
[05:28:51] <Alipha> :-P
[05:28:52] <LTCD> The question is, why do people here not apply for jobs at GCHQ, NSA etc...? You all have the skills.
[05:29:21] <Alipha> maybe we do work for the NSA ;-)
[05:29:37] <^-^hi> LTCD: How do you know they don't, and would they tell you if they did?
[05:29:39] <LTCD> Sad thing is, I know some stuff I should not know.
[05:30:07] <LTCD> Snowden is fake as an example, although even my police friends realised that.
[05:30:16] <Alipha> i don't think i'd want a government job. too much red tape
[05:30:22] <^-^hi> ms7821: look we have block of plain-text A and equally sized block of random data B (corresponding part of the pseudo-OTP), we scramble A using B (like by swapping A[i] with A[B[i]%half_the_length] for each character) then we XOR A with B, and do all this again. lets say for 20 rounds.
[05:30:25] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[05:30:58] *** Joins: lockna (~lockna@2001:470:69fc:105::d697)
[05:31:30] *** onelegend is now known as legend
[05:32:57] *** Joins: mz` (~mz`@user/mz/x-8532539)
[05:33:46] <^-^hi> ms7821: this way if they guess part of the block of plaintext (or all of it?) and have access to the resulting cryptotext they can't deduce the corresponding part of B from it.
[05:35:58] <LTCD> Snowden did a political trick when discussing mobile phone tracking/surveillance. Yes, make sure your phone is really off not pretending to be with malware, yes old Nokia phones are good because you can remove the battery which he goes on to explain is any electronic device's weakness (no power no party). But... he circled around the fact that any
[05:35:58] <LTCD> small police station in UK can track your phone, even when the battery is removed -_-. Police only do it for terrorism and kidnapping cases.
[05:36:18] <ms7821> uhhh
[05:36:28] <ms7821> your police buddy is pulling your leg
[05:36:41] <LTCD> No, I am certain. 
[05:36:51] <ms7821> lol ok
[05:37:05] <LTCD> They only do it for serious things, it costs them like £1,000 per ping.
[05:37:22] <ms7821> ahh the old "it's really rare you never hear about it" gambit
[05:37:37] <LTCD> Nope.
[05:37:42] <LTCD> I guarantee it.
[05:37:54] <legend> and how exactly would you ping a phone that's has no power source?
[05:37:57] * ^-^hi has a dead piece of metal and people locate it by sending radio messages at it
[05:38:13] <^-^hi> absolute logic
[05:38:14] <LTCD> I guess internal batteries, but I am not sure.
[05:38:27] <LTCD> Maybe some safety feature gone wrong.
[05:38:37] <ms7821> but you guarantee it
[05:38:59] <LTCD> Also, Android phones can have an invisible app uploaded onto them by the police, whilst it is not possible with Apple the police can still access your cloud stuff.
[05:39:08] <LTCD> I guarantee it, but do not know the inner workings, sorry.
[05:39:30] <^-^hi> LTCD: what position of authority is your police friend in?
[05:39:51] <^-^hi> of course android security sucks
[05:39:52] <LTCD> Just an ordinary beat cop. Something happened to me recently, I cannot discuss, where I learnt a lot of shit.
[05:40:10] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[05:40:33] <^-^hi> yeah and he is revealing top secret breaking edge technology no one knows of, to you
[05:41:25] <LTCD> This is the problem with cross disciplinary research - it is hard enough to mix academic subjects, let alone when you mix real life street stuff with your isolated existence on IRC.
[05:41:38] <^-^hi> imagine the number of ordinary beat cop who would know as well, if it was real and he knew of it.
[05:41:49] <LTCD> Ask your police friends then.
[05:42:22] <^-^hi> let's imagine each of them has a 10% chance revealing it to a journalist or some friend like you.
[05:43:23] <^-^hi> wouldn't it be instantly leaked and the entire mechanism come under scrutiny in no time?
[05:43:23] <LTCD> Look, if you have police friends just ask them, please do drama on this otherwise friendly channel. 
[05:43:34] <ms7821> m8 your friend is lying to you
[05:44:11] <LTCD> No, he is not. Please do not make me go into detail.s
[05:44:19] *** Quits: kbdlnx123 (~kbdlnx123@72.252.198.165) (Read error: Connection reset by peer)
[05:44:24] <^-^hi> ok, nvm.
[05:45:36] <ms7821> when I was at uni a friend of mine was convinced a shared acquaintance worked for GCHQ and became completely drawn in by him
[05:46:39] <ms7821> he'd carry knives with him "to perform clean-up operations" and would have to disappear to make secretive calls that he couldn't explain
[05:46:48] <ms7821> turns out he was a chef between jobs and a compulsive liar
[05:47:35] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[05:48:09] <ericonr> that's a good grift lol
[05:49:26] <ericonr> if you say you talk about your clean-up ops, is that good or bad for your job? since people won't really suspect you, it might be advantageous :p:p
[05:51:07] <ms7821> heh
[05:52:01] <^-^hi> ms7821: what about the algorithm
[05:54:52] <^-^hi> s/half_the_length/length
[05:54:56] <ms7821> so I'm not seeing anything in here about multiple blocks or key stretching
[05:56:25] <^-^hi> Those are for block ciphers with small keys, this one is using a similar sized block of random data for every block
[05:56:29] <ms7821> I also don't see any xor and I think AL_LEN should be ('z' - 'a' + 1)
[05:57:12] <^-^hi> ms7821: ah that was why it became capital letters, but nvm.
[05:57:38] <^-^hi> you get the idea i said in the irc message?
[05:58:55] <^-^hi> ms7821: look we have block of plain-text A and equally sized block of random data B (corresponding part of the pseudo-OTP), we scramble A using B (like by swapping A[i] with A[B[i]%length] for each character) then we XOR A with B, and do all this again. lets say for 20 rounds.
[05:58:57] <ms7821> but generally I'm not sure your approach is going to make much difference. It looks like you're offsetting the key by the plaintext, and then permuting the result
[06:00:15] <ms7821> that means a bitflip in the ciphertext is going to affect more than one bit in the deciphered plaintext, but it doesn't prevent someone who intercepts two messages using an overlapping key from working out what the key was. It just makes it a bit harder
[06:00:53] <^-^hi> they can't deduce the key from guessing parts of plain text.
[06:01:17] <ms7821> perhaps, but what would they do in the basic OTP XOR case then?
[06:01:34] <ms7821> they'd deduce a tiny part of the keystream, but it's thrown away so it's useless
[06:02:02] <ms7821> it becomes interesting if you start including multiple blocks and including the next key in the message as you originally were planning
[06:02:05] <ms7821> but this code doesn't do that
[06:02:44] <^-^hi> don't worry about bitflip right now, let's imagine it gets across perfectly
[06:03:01] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Quit: -a- Connection Timed Out)
[06:03:51] <ms7821> obfuscated OTP is still OTP, it's got basically all the same properties
[06:03:57] <^-^hi> yeah
[06:04:27] <^-^hi> the entire reason is to enable it to be used twice
[06:05:40] <^-^hi> so ok let's now imagine alice sends to bob two blocks each time. one is encrypted in otp this way, the next contains the key for further correspondence.
[06:06:24] <^-^hi> how would one break this. 
[06:06:41] <ms7821> I gotta sleep, sorry! but are both blocks using the same key?
[06:07:07] <^-^hi> yes, but they are obfuscated the way I said
[06:07:19] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[06:08:06] <^-^hi> lets imagine they guess the entire first plain-text block correctly. would that be of any use?
[06:09:27] <ms7821> if they could do that they could recover the key and use that to recover the second block
[06:10:39] <ms7821> if they could only guess some of the plaintext they probably would only get some of the next block, but they might be able to fill in the gaps based on the next message after that
[06:12:11] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[06:12:22] <^-^hi> how would they recover the key? 
[06:13:31] <^-^hi> the text is gonna be scrambled 20 times based on the key, then get XORed to key and scrambled over and over
[06:13:45] <^-^hi> and XORED
[06:17:03] <ms7821> I could probably brute-force a 6-char key
[06:17:46] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:17:55] <ms7821> but generally you can probably run this scrambling backwards until you eliminate various keys, or use a sat solver
[06:18:04] <^-^hi> (maybe the 20 times is over complicating it, let's make it 2 times)
[06:18:29] <^-^hi> ms7821: that was for showcasing. the block could be in megabytes.
[06:18:31] <ms7821> if you want to irreversibly scramble something, that's why you use a cryptographic hash
[06:19:06] <ms7821> (which keystretching algorithms tend to do)
[06:19:15] <^-^hi> ms7821:just as much you could brute-force the otp, and get a correct result even
[06:19:27] <^-^hi> but how would you know if it's correct
[06:20:09] <ms7821> cuz it works with the known plaintext to create the matching ciphertext
[06:20:49] <^-^hi> the problem is that there could be more than one possible plaintext
[06:21:08] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[06:22:27] <^-^hi> you could also match known plaintext to otp ciphertext
[06:24:58] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:25:51] <^-^hi> and alice and bob could negotiate in the plaintext on the size of the next block, or interleave the next key and the message in one block
[06:26:00] *** Quits: LTCD (~LTCD@176.24.74.72) (Quit: Client closed)
[06:26:56] <^-^hi> oh yes, what an idea. each of the two blocks is half plaintext, half the next key.
[06:29:31] <^-^hi> they would be mixed beyond recognition, acting as padding as well. 
[06:29:32] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[06:30:05] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[06:31:05] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[06:32:07] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[06:33:02] *** Joins: cacu[m] (~cacuconve@2001:470:69fc:105::b9df)
[06:35:14] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[06:36:23] <^-^hi> so the only way to break it would be eavesdropping the entire blockchain, then trying every possible key ( 2^8^100000 for the initial block size being one MB) to see if it would make sense
[06:36:49] <^-^hi> and I know one megabyte isn't exactly one million bytes, but you get the idea
[06:38:10] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 268 seconds)
[06:38:36] <^-^hi> Am I wrong? (ms7821 is probably asleep)
[06:39:10] *** Joins: Xeago (~Xeago@user/xeago)
[06:40:12] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 272 seconds)
[06:40:35] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[06:40:43] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[06:44:38] *** Quits: Xeago (~Xeago@user/xeago) (Ping timeout: 272 seconds)
[06:46:08] <^-^hi> (I was probably wrong about "eavesropping the entire blockchain" part, because they could as well begin in the middle of it)
[06:48:08] *** Joins: mz` (~mz`@user/mz/x-8532539)
[06:55:58] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[06:59:03] *** Joins: Xeago (~Xeago@user/xeago)
[07:02:14] *** Joins: patience[m]1 (~hypokeim_@2001:470:69fc:105::ca76)
[07:03:01] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[07:06:05] *** Joins: jc_denton[m] (~raiichika@2001:470:69fc:105::ce06)
[07:08:32] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-f81d-c689-242f-5b5b.res6.spectrum.com)
[07:10:40] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-7803-acee-bc65-5a59.res6.spectrum.com) (Ping timeout: 272 seconds)
[07:15:22] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[07:21:06] *** Joins: duck[m] (~duckmatri@2001:470:69fc:105::ca77)
[07:22:34] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:29:21] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[07:30:42] *** Quits: rtypo (~alex@user/rtypo) (Ping timeout: 256 seconds)
[07:33:12] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[07:38:17] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 248 seconds)
[07:48:25] *** Joins: mz` (~mz`@user/mz/x-8532539)
[07:54:10] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[07:56:54] *** Joins: igemnace (~ian@user/igemnace)
[07:57:07] *** Joins: kbdlnx123 (~kbdlnx123@72.252.198.165)
[08:00:40] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-f81d-c689-242f-5b5b.res6.spectrum.com) (Quit: jarthur_)
[08:06:15] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 258 seconds)
[08:10:49] *** Quits: fltrz_ (~fltrz@109.236.129.20) (Ping timeout: 248 seconds)
[08:11:41] *** Joins: fltrz_ (~fltrz@213.219.147.109.adsl.dyn.edpnet.net)
[08:21:49] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[08:21:55] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:32:45] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[08:38:05] *** Quits: Fluxx (~Fluxx@user/fluxx) (Read error: Connection reset by peer)
[08:38:24] *** Joins: Fluxx (~Fluxx@user/fluxx)
[08:38:25] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 268 seconds)
[08:45:21] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[08:47:00] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4508-4e06-3829-096f.res6.spectrum.com)
[08:52:54] *** Joins: mz` (~mz`@user/mz/x-8532539)
[08:57:10] *** Quits: Elzington (~Elzington@66.115.189.145) (Quit: Leaving)
[09:04:46] *** kulernil is now known as kuler
[09:10:53] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[09:11:05] *** Quits: mz` (~mz`@user/mz/x-8532539) (Ping timeout: 248 seconds)
[09:28:49] *** Joins: kish` (~aqua@user/aqua)
[09:28:50] *** Joins: mz` (~mz`@user/mz/x-8532539)
[09:34:26] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Ping timeout: 272 seconds)
[09:36:11] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[09:37:49] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[09:41:04] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[09:41:09] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[09:43:55] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[09:44:14] *** Joins: kish` (~aqua@user/aqua)
[09:52:09] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[09:53:35] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 244 seconds)
[09:54:17] *** Joins: kish` (~aqua@user/aqua)
[09:59:43] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 258 seconds)
[10:01:45] *** Quits: ua_ (~ua@public-gprs233424.centertel.pl) (Ping timeout: 248 seconds)
[10:02:30] *** Joins: ua_ (~ua@public-gprs233424.centertel.pl)
[10:13:40] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[10:16:43] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Remote host closed the connection)
[10:19:47] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:26:01] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:30:32] *** Quits: ua_ (~ua@public-gprs233424.centertel.pl) (Quit: Leaving)
[10:32:09] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 248 seconds)
[10:42:07] *** Joins: CryptoDavid (uid14990@id-14990.highgate.irccloud.com)
[10:43:47] *** Joins: mz` (~mz`@user/mz/x-8532539)
[10:48:31] *** Joins: Wulf (~Wulf@user/wulf)
[10:49:52] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[10:58:54] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:00:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[11:00:22] *** Lord_of_Life_ is now known as Lord_of_Life
[11:15:14] *** Joins: vernaz (~vernaz@148.63.127.167)
[11:17:10] *** Joins: mz` (~mz`@user/mz/x-8532539)
[11:19:54] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:20:41] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[11:21:25] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[11:23:06] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:26:28] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4508-4e06-3829-096f.res6.spectrum.com) (Ping timeout: 272 seconds)
[11:27:38] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c5e2-38fc-6a00-4acf.res6.spectrum.com)
[11:37:13] *** Joins: mz` (~mz`@user/mz/x-8532539)
[11:42:47] *** Joins: gggpkm (~gggpkm@114.245.111.216)
[11:43:10] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[11:43:22] <nevivurn> ^-^hi: huh, so would do (multiple rounds of) permutation (by swapping A[i] and A[B[i]%len]) and A[i] xor B[i]. You would also reuse this key by sending the "next block key" that is encrypted in the same manner?
[11:46:18] <^-^hi> nevivurn: yes, I also got another idea to dedicate half of each block to a piece of the next key.
[11:47:35] <^-^hi> it would double as padding and would make known plaintext attacks very difficult
[11:52:34] <^-^hi> each block's content will be like thisafeijowijrfowejrogijwoeirjgoiwjroegijs
[11:56:44] <^-^hi> (also i forgot one obvious thing that the number of rounds shouldn't be even)
[12:01:02] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[12:01:31] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:03:08] *** Quits: tent406 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net) (Ping timeout: 268 seconds)
[12:05:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:11:04] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[12:11:06] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[12:11:42] *** Joins: vernaz (~vernaz@148.63.127.167)
[12:12:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c5e2-38fc-6a00-4acf.res6.spectrum.com) (Ping timeout: 245 seconds)
[12:15:27] *** Joins: gggpkm_ (~gggpkm@221.219.68.199)
[12:16:09] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 248 seconds)
[12:18:33] *** Quits: gggpkm (~gggpkm@114.245.111.216) (Ping timeout: 268 seconds)
[12:21:02] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-689a-ca8a-2763-8a94.res6.spectrum.com)
[12:24:34] *** Quits: asalor (~asalor@2a00:1028:8d1c:8c9e:feaa:14ff:fe7f:9be2) (Changing host)
[12:24:34] *** Joins: asalor (~asalor@user/asalor)
[12:27:35] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[12:28:30] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[12:30:33] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Remote host closed the connection)
[12:30:56] *** Joins: gggpkm (~gggpkm@123.113.182.84)
[12:31:08] *** Quits: gggpkm_ (~gggpkm@221.219.68.199) (Ping timeout: 258 seconds)
[12:31:22] *** Joins: mz` (~mz`@user/mz/x-8532539)
[12:35:58] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:10] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[12:37:56] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[12:38:24] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:41:23] *** Quits: gggpkm (~gggpkm@123.113.182.84) (Ping timeout: 268 seconds)
[12:43:53] *** Joins: mikeliuk (~mikeliuk@109.249.187.96)
[12:46:06] *** Joins: vernaz (~vernaz@148.63.127.167)
[12:58:30] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:04:18] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:17:31] *** Joins: chomwitt (~chomwitt@2a02:587:dc04:9a00:12c3:7bff:fe6d:d374)
[13:20:37] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[13:26:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:27:11] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[13:28:41] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Ping timeout: 248 seconds)
[13:30:48] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[13:31:46] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[13:39:27] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[13:42:01] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Ping timeout: 248 seconds)
[13:43:26] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Remote host closed the connection)
[13:44:30] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:47:47] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[13:49:40] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[13:50:36] *** Joins: mz` (~mz`@user/mz/x-8532539)
[13:52:01] *** Quits: lazzurs (~lazzurs@user/lazzurs) (Ping timeout: 258 seconds)
[13:56:32] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:09:58] *** Joins: gggp (~gggp@60.10.194.45)
[14:11:59] *** Joins: gggp_ (~gggp@60.10.23.162)
[14:14:49] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:16:12] *** Quits: gggp (~gggp@60.10.194.45) (Ping timeout: 272 seconds)
[14:16:58] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[14:21:34] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:24:52] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[14:27:31] *** Joins: gggp__ (~gggp@60.10.23.162)
[14:30:50] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 272 seconds)
[14:30:54] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[14:37:22] *** Joins: gggp_ (~gggp@114.245.111.216)
[14:39:59] *** Quits: human_g33k (~HumanG33k@2a01:e0a:95:5d90:215:c5ff:fe68:fb04) (Ping timeout: 268 seconds)
[14:40:09] *** Quits: gggp__ (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[14:40:23] *** Joins: human_g33k (~HumanG33k@dau94-2-82-66-65-160.fbx.proxad.net)
[14:41:00] *** Joins: cwebber (~user@user/cwebber)
[14:45:32] *** Joins: mz` (~mz`@user/mz/x-8532539)
[14:45:58] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:46:38] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[14:46:58] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:47:53] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[14:48:05] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[14:49:39] *** Joins: node1 (~node1@user/node1)
[14:49:46] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 272 seconds)
[14:49:55] <node1> Hi
[14:50:19] <node1> Any good books to learn cryptography?
[14:51:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[14:51:18] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[14:51:38] <snappy> katz and lindell introduction to modern cryptography
[14:52:24] <node1> snappy, Do you know any example where i can make my own 5 bit combination
[14:55:11] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[14:59:31] *** Quits: gggp_ (~gggp@114.245.111.216) (Ping timeout: 268 seconds)
[15:00:04] *** Quits: ^-^hi (~hi^-^@user/-hi/x-1729478) (Ping timeout: 256 seconds)
[15:02:04] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:05:38] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[15:06:14] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:07:31] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 268 seconds)
[15:08:06] *** Joins: node1 (~node1@user/node1)
[15:08:07] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:10:43] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[15:10:58] *** Joins: vernaz (~vernaz@148.63.127.167)
[15:12:22] *** Joins: ^-^hi (~hi^-^@user/-hi/x-1729478)
[15:13:14] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:15:11] *** Joins: Soni (~quassel@autistic.space)
[15:24:55] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:28:30] *** Quits: mikeliuk (~mikeliuk@109.249.187.96) (Quit: Connection closed)
[15:30:33] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:33:10] *** Joins: gggp_ (~gggp@114.245.111.216)
[15:35:22] *** Quits: chomwitt (~chomwitt@2a02:587:dc04:9a00:12c3:7bff:fe6d:d374) (Ping timeout: 272 seconds)
[15:37:32] *** Joins: gggp__ (~gggp@221.219.67.34)
[15:39:22] *** Joins: elf_fortrez (~elf_fortr@adsl-72-50-7-29.prtc.net)
[15:40:49] *** Quits: gggp_ (~gggp@114.245.111.216) (Ping timeout: 268 seconds)
[15:41:59] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[15:44:46] *** Joins: gggp_ (~gggp@60.10.194.45)
[15:44:53] *** Joins: mz` (~mz`@user/mz/x-8532539)
[15:45:44] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[15:45:55] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[15:47:56] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[15:48:56] *** Quits: gggp__ (~gggp@221.219.67.34) (Ping timeout: 258 seconds)
[15:49:16] *** Joins: gggp (~gggp@123.113.188.221)
[15:50:25] *** Joins: gggp__ (~gggp@60.10.23.162)
[15:51:09] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[15:51:50] *** Quits: gggp_ (~gggp@60.10.194.45) (Ping timeout: 272 seconds)
[15:52:24] *** Joins: gggp_ (~gggp@60.10.23.162)
[15:53:54] *** Quits: gggp (~gggp@123.113.188.221) (Ping timeout: 256 seconds)
[15:55:53] *** Quits: gggp__ (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[16:07:10] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[16:11:52] *** Joins: gggp (~gggp@125.33.224.44)
[16:12:44] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:12:56] *** Quits: gggp (~gggp@125.33.224.44) (Read error: Connection reset by peer)
[16:13:19] *** Joins: gggp (~gggp@60.10.23.162)
[16:13:27] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 245 seconds)
[16:14:20] *** Joins: gggp_ (~gggp@125.33.224.44)
[16:16:42] *** Quits: gggp_ (~gggp@125.33.224.44) (Read error: Connection reset by peer)
[16:17:45] *** Quits: gggp (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[16:18:25] *** Quits: mz` (~mz`@user/mz/x-8532539) (Max SendQ exceeded)
[16:24:27] *** Joins: bsdbandit01 (~bsdbandit@172.58.187.107)
[16:28:43] *** Joins: dez (uid92154@user/dez)
[16:30:52] *** Quits: bsdbandit01 (~bsdbandit@172.58.187.107) (Read error: Connection reset by peer)
[16:31:56] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[16:37:43] *** Joins: vernaz (~vernaz@148.63.127.167)
[16:38:43] *** Joins: mz` (~mz`@user/mz/x-8532539)
[16:40:20] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[16:41:34] *** Joins: rtypo (~alex@user/rtypo)
[16:42:00] <ldm> does anyone know of a python library where I can use rijndael with a 256-bit (32 byte) block size? PyCrypto only implements AES (fixed to 128-bit)
[16:42:01] *** Joins: gggpkm (~gggpkm@60.10.23.162)
[16:42:06] *** Quits: elf_fortrez (~elf_fortr@adsl-72-50-7-29.prtc.net) (Quit: Client closed)
[16:42:29] *** Quits: vernaz (~vernaz@148.63.127.167) (Ping timeout: 268 seconds)
[16:43:28] <MacGyver> The only implementation I know of *at all* is mcrypt.
[16:43:42] <MacGyver> Because it was notorious for fucking up precisely that in PHP.
[16:44:44] <MacGyver> Though knowing openssl, there might be an implementation lurking in there.
[16:44:44] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[16:45:39] <Peng> A Stack Overflow answer points to https://pypi.org/project/pprp/ , but I can't vouch for it
[16:45:48] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[16:47:05] <MacGyver> https://github.com/openssl/openssl/issues/9855 implies it's not in openssl.
[16:47:22] <MacGyver> I'd try my luck with pprp.
[16:48:02] <MacGyver> ldm: I assume this is to decrypt some stuff that's encrypted with Rijndael 256, not (re-)encrypt securely?
[16:48:09] *** Quits: gggpkm (~gggpkm@60.10.23.162) (Ping timeout: 248 seconds)
[16:49:29] <ldm> MacGyver: this is only block at a time (no MoO) and is just offline for my research, so I don't know which bit of mcrypt is flawed
[16:49:48] <ldm> I've found py3rijndael which I might try, otherwise I'll give pprp a go
[16:50:05] <MacGyver> ldm: libmcrypt is a dead project.
[16:50:12] <MacGyver> ldm: I doubt there are python3 bindings.
[16:50:16] <ldm> ah right
[16:50:31] <MacGyver> Hence trying with pprp.
[16:51:26] *** Quits: DefiantN (~DefiantN@user/defiantn) (Ping timeout: 272 seconds)
[16:52:54] <MacGyver> ldm: Dead as in, when it was abandoned python 3 had not had a single release.
[16:53:01] <ldm> heh
[16:53:08] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[16:53:30] <MacGyver> The *flaw* was that PHP used it.
[16:54:40] <MacGyver> Until quite recently, and it took quite a bit of effort on the part of Scott Arciszewsky to get PHP to give it a Viking funeral.
[16:54:49] <MacGyver> Literally: https://wiki.php.net/rfc/mcrypt-viking-funeral
[16:55:12] <MacGyver> And therefore lots and lots of PHP code that *thought* it was using AES-256, was actually usign Rijndael 256.
[16:55:22] <MacGyver> I.e. it got the block size wrong.
[16:59:46] <MacGyver> (Also there's plenty of *actual* flaws in mcrypt, but that's to be expected with a crypto library from the late 90s / early 2000s that hasn't had an update in 14 years.)
[17:01:22] <ldm> AES-256 is 128 block size, 256 key size, right?
[17:01:30] <Peng> Yes
[17:01:30] <ldm> ah yeah
[17:02:18] <TimMc> MacGyver: I don't see any burning ships.
[17:04:44] <MacGyver> TimMc: I think they were mentioned in the first draft.
[17:08:13] *** Joins: Guyver2 (Guyver@guyver2.xs4all.nl)
[17:08:19] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Remote host closed the connection)
[17:08:51] *** Joins: vernaz (~vernaz@148.63.127.167)
[17:09:15] *** Joins: gggpkm (~gggpkm@114.245.111.216)
[17:12:10] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[17:12:37] *** Joins: BOKALDO (~BOKALDO@46.109.203.51)
[17:15:11] *** Quits: gggpkm (~gggpkm@114.245.111.216) (Ping timeout: 268 seconds)
[17:20:29] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[17:21:06] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Remote host closed the connection)
[17:21:29] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[17:24:32] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[17:26:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:27:03] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:28:24] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[17:28:30] *** Joins: aleck1 (~aleck@user/aleck)
[17:28:55] *** Quits: vernaz (~vernaz@148.63.127.167) (Remote host closed the connection)
[17:30:10] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[17:30:48] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 256 seconds)
[17:31:52] *** Joins: gggpkm (~gggpkm@123.113.182.84)
[17:33:29] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Ping timeout: 248 seconds)
[17:38:45] *** Joins: vernaz (~vernaz@148.63.127.167)
[17:45:35] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[17:51:05] *** Joins: lazzurs (~lazzurs@user/lazzurs)
[17:58:12] *** Quits: kbdlnx123 (~kbdlnx123@72.252.198.165) (Remote host closed the connection)
[18:07:27] *** Joins: kbdlnx123 (~kbdlnx123@72.252.198.165)
[18:09:48] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[18:16:09] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 248 seconds)
[18:17:04] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:20:11] *** Joins: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr)
[18:26:21] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[18:27:43] *** Joins: gggpkm_ (~gggpkm@60.10.23.162)
[18:28:05] *** Quits: gggpkm_ (~gggpkm@60.10.23.162) (Remote host closed the connection)
[18:29:34] *** Joins: gggpkm_ (~gggpkm@125.33.84.211)
[18:29:48] *** Quits: gggpkm (~gggpkm@123.113.182.84) (Ping timeout: 268 seconds)
[18:30:09] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[18:30:36] *** Quits: gggpkm_ (~gggpkm@125.33.84.211) (Remote host closed the connection)
[18:41:59] *** Joins: Elzington (~Elzington@68.235.43.172)
[18:43:13] *** Joins: d1cor (~diego@179.63.242.114)
[18:48:41] *** Quits: Peng (~mnordhoff@flash.mattnordhoff.net) (Quit: Peng timeout)
[18:49:15] *** Joins: Peng (~mnordhoff@flash.mattnordhoff.net)
[18:55:08] <TimMc> 🔥⛵🤘
[18:57:15] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[19:07:51] *** Joins: DefiantN (~DefiantN@user/defiantn)
[19:11:04] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Ping timeout: 244 seconds)
[19:11:49] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[19:21:23] *** Quits: kbdlnx123 (~kbdlnx123@72.252.198.165) (Remote host closed the connection)
[19:25:19] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[19:26:18] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[19:27:53] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Read error: Connection reset by peer)
[19:44:43] *** Joins: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net)
[19:45:03] *** Quits: bsdbandit01 (~bsdbandit@wsip-70-164-45-56.dc.dc.cox.net) (Client Quit)
[20:04:44] *** Quits: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net) (Read error: Connection reset by peer)
[20:08:21] *** Joins: CryptoClub (~fafs@static-182-3-7-89.ipcom.comunitel.net)
[20:08:25] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[20:08:47] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[20:09:23] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[20:09:29] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[20:10:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[20:10:29] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[20:11:14] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:12:27] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:14:11] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:15:37] *** Quits: Fluxx (~Fluxx@user/fluxx) (Ping timeout: 248 seconds)
[20:26:30] *** Quits: rustycl0ck (~ircuser@gateway/tor-sasl/rustycl0ck) (Ping timeout: 244 seconds)
[20:39:18] *** Quits: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr) (Ping timeout: 268 seconds)
[21:00:38] <ldm> I'm trying to find a weakness in a simple given hash function. I've tried everything I can think of but I can't produce a collision. (This is for an assessment so I cannot ask for help with the problem here). Does anyone have any good resources studying the basics of implementing hash functions (on a fixed block, rather than modes of operation)?
[21:02:47] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[21:03:20] *** Joins: kish` (~aqua@user/aqua)
[21:13:45] *** Quits: d1cor (~diego@179.63.242.114) (Ping timeout: 248 seconds)
[21:16:40] *** Quits: vernaz (~vernaz@148.63.127.167) (Quit: Leaving...)
[21:16:59] <mats1> https://insanecoding.blogspot.com/2019/02/is-sha-3-keccak-already-broken.html?showComment=1551027215534#c5708731316916812536
[21:18:49] *** Joins: tent406 (~tent405@107-214-50-180.lightspeed.bcvloh.sbcglobal.net)
[21:21:46] *** Joins: replayer (~replayer@2600:1f18:4380:1700:7b64:93d7:1301:235)
[21:23:06] <replayer> is it normal that a server  sends different certificates and different chains (to root or just intermediate) depending on os, client application ... ?
[21:23:43] <yawkat> sure why not.
[21:23:49] <yawkat> in doubt, blame load balancing
[21:24:23] <nevivurn> replayer: I guess that might make sense if the issuer isn't trusted by all clients, but not sure how you would pull that off, assuming regular old HTTPS.
[21:25:55] <replayer> nevivurn: the server could in theory fingerprint the client and serve different certificates, but i never heard of servers doing that before
[21:27:05] <replayer> also the server started serving different certificates for the same client
[21:28:18] <Peng_> I think Cloudflare or Facebook or Google has done that kind of fingerprinting.
[21:28:23] <ms7821> yeah, cloudflare do that
[21:28:44] <replayer> Peng_:yeah for bot detection afaik
[21:28:52] <replayer> but serving different certificates?
[21:28:56] <ms7821> to support legacy devices
[21:29:31] <ms7821> I think they might just send a different result if the client doesn't send SNI
[21:29:59] <Peng_> replayer: Maybe you're hittings more than one server?
[21:30:12] <Peng_> s/s//
[21:30:19] <replayer> yeah also thought about that
[21:31:07] <ms7821> can you share the URL? misconfigured LB sounds pretty likely
[21:31:23] <replayer> https://101.101.101.101
[21:32:12] <replayer> it seems to be a bit fragile (or it is due to my evil network)
[21:33:00] <replayer> maybe because they only allow few requests from the same ip in a certain amount of time
[21:33:22] <replayer> but even when i change the ip i immediately get a RST from the server
[21:33:34] <ms7821> I'm only seeing one cert
[21:33:44] <replayer> so  maybe the problem is not on my end
[21:33:57] <replayer> depending on the os or client i also only see one
[21:34:33] <ms7821> what's actually different? you're not seeing the root in some cases?
[21:34:33] <replayer> ah no, i mean the same chain
[21:35:50] <replayer> in some cases the server sends not the root ca, for one client it started to send different certs (i think the intermediate was different),
[21:37:47] <replayer> what kind of certificates does the server need to send in general? leaf of course, but beyond that ?
[21:38:02] <Peng_> Leaf and intermediate(s)
[21:38:20] <ms7821> it might just be your clients showing the chain differently
[21:38:49] <ms7821> my root has a friendly name of Sectigo for instance
[21:38:59] <replayer> not if i see the certs in the packet dump
[21:39:31] <replayer> Peng_: can/must the server also send the root ?
[21:39:42] <woggle> The server can send the root, but it's not useful to do so.
[21:39:51] <replayer> i need to check,  maybe i just got send multiple intermediates
[21:40:06] <ms7821> I really can't reproduce anything different
[21:42:57] <replayer> well, things changed just in the last 24h or so, one cert (chain) which was previously accepted by the client now fails, but if you have the right certs in your ca store it might work for you consistently
[21:43:31] <ms7821> if you can share pcaps or client info that might help
[21:43:43] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:43:48] <ms7821> mobile devices don't download intermediates but desktop ones tend to
[21:45:29] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 268 seconds)
[21:48:24] <woggle> replayer: Based on https://crt.sh/?graph=2900208996&opt=nometadata , I think you should only need to send the one intermediate, which it looks like you're doing (assuming I'm reading openssl s_client output right).
[21:50:56] *** Joins: chomwitt (~chomwitt@athedsl-32301.home.otenet.gr)
[21:51:56] <ms7821> it's sending the root too for me
[21:52:38] <ms7821> oh hang on no it's not, whoops
[22:11:37] *** Joins: akaWolf (~akaWolf@akawolf.org)
[22:18:14] *** Joins: Narrat (~omnius@p200300df5f13268f06ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:18:34] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:19:20] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[22:21:29] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:22:15] <replayer> when i search on crt.sh for a root ca like https://crt.sh/?caid=9323 why does this still have a parent ca (which again seems to have multiple parent CAs) ?
[22:23:46] <yawkat> cross-signing maybe
[22:24:34] <replayer> wouldn't that show up in the cert served by the website ?
[22:25:22] <yawkat> not if you dont send it
[22:30:56] *** Joins: aleck (~aleck@user/aleck)
[22:34:00] *** Quits: aleck1 (~aleck@user/aleck) (Ping timeout: 268 seconds)
[22:35:53] *** Quits: lenish (~Rodya@205.185.115.119) (Ping timeout: 248 seconds)
[22:36:10] *** Joins: lenish (~Rodya@205.185.115.119)
[22:41:13] *** Quits: lenish (~Rodya@205.185.115.119) (Ping timeout: 248 seconds)
[22:41:29] *** Joins: lenish (~Rodya@205.185.115.119)
[22:52:29] <TimMc> mats1: Is there anything to that comment?
[22:53:56] <TimMc> It seems like all it says is that Keccak can be run backwards, and this is the preimage to the zero state, but... so what?
[22:56:45] <mats1> did you read the post?
[22:57:29] <TimMc> I skimmed it, yeah. The thing about not having a block counter does seem like a problem.
[22:57:45] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 248 seconds)
[22:57:46] <TimMc> but the comment you linked to doesn't seem to add much
[22:58:11] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:58:14] <yawkat> it's from 2019
[22:59:32] <Alipha> Any kind of preimage don't bode well for the security of the hash
[23:00:44] <wasamasa> would be funny if people ended up using sha2, but not sha1 or sha3
[23:00:46] <yawkat> it's not a preimage of the hash
[23:00:57] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:03:37] *** Joins: kbdlnx123 (~kbdlnx123@72.252.198.165)
[23:17:56] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:20:39] *** Quits: BOKALDO (~BOKALDO@46.109.203.51) (Quit: Leaving)
[23:21:13] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:32:51] *** Quits: kish` (~aqua@user/aqua) (Remote host closed the connection)
[23:32:54] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[23:33:07] *** Joins: kish` (~aqua@user/aqua)
[23:36:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:38:12] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[23:39:22] *** Quits: zro (~zro@user/zro) (Quit: WeeChat 3.2)
[23:39:43] *** Joins: zro (~zro@user/zro)
[23:40:35] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[23:44:48] *** Joins: d1cor (~diego@179.63.242.114)
[23:48:28] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:51:37] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[23:53:41] *** Joins: Populus (~emil.a.jo@c-afbbe455.021-17-6b6c6d1.bbcust.telenor.se)
[23:55:52] <replayer> is there some naming convention like: you can't use "root" in the ca name when you are just an intermediate ca ?
[23:57:43] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[23:58:52] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[23:59:32] <woggle> replayer: There's essentially no rules around CA (root or intermediate) names.
