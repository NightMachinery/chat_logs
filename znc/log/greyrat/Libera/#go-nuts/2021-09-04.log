[00:11:40] *** Quits: Spydar007 (~spydar007@user/spydar007) (Ping timeout: 240 seconds)
[00:12:48] *** Joins: Spydar007 (~spydar007@user/spydar007)
[00:19:01] <Kyros> mertyildiran: this link has some good examples https://www.devdungeon.com/content/packet-capture-injection-and-analysis-gopacket
[00:19:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:21:29] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[00:21:40] *** Joins: fikran (~fikran@user/fikran)
[00:22:30] *** Joins: flynn (~mcbloch@user/flynn)
[00:27:43] *** Joins: kodah (~kodah@user/kodah)
[00:27:47] *** Quits: jpw_ (~jpw@user/jpw) (Remote host closed the connection)
[00:29:17] <mertyildiran> Kyros: My problem is I'm using this method https://pkg.go.dev/github.com/google/gopacket/reassembly#Assembler.AssembleWithContext The problem is `New` is called but `ReassemblyComplete` not.
[00:29:57] <mertyildiran> There the channel does not close and my dissectors hang.
[00:30:02] <mertyildiran> I'm following this example https://github.com/google/gopacket/blob/master/examples/reassemblydump/main.go
[00:35:23] <Kyros> my bad i thought you were just trying to get going with it
[00:36:31] *** Joins: toretto_ (~ryan@103.81.180.10)
[00:37:50] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[00:38:51] *** Quits: toretto_ (~ryan@103.81.180.10) (Read error: Connection reset by peer)
[00:38:52] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[00:38:52] *** Quits: toretto (~ryan@user/toretto) (Ping timeout: 245 seconds)
[00:45:26] *** Joins: a09p4bl0 (~rrami@160.178.176.204)
[00:49:24] *** Quits: a09p4bl0 (~rrami@160.178.176.204) (Quit: leaving)
[00:50:22] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Ping timeout: 252 seconds)
[00:50:41] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[00:51:45] *** Quits: ninjin (~ninjin@user/ninjin) (Remote host closed the connection)
[00:52:00] *** Joins: ninjin (~ninjin@user/ninjin)
[01:00:49] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:01:50] *** Joins: flynn (~mcbloch@user/flynn)
[01:11:25] *** Joins: khyr0n (~khyr0n@189.232.28.229)
[01:17:55] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Ping timeout: 252 seconds)
[01:20:58] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[01:21:51] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[01:22:17] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:23:31] *** Joins: rbn (~rbn@sferic.eu)
[01:25:19] *** Quits: juvenalmuniz (~Juvenal@189-74-58-125.user3p.brasiltelecom.net.br) (Quit: leaving)
[01:26:43] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[01:33:20] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Quit: Quit)
[01:33:42] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[01:36:31] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[01:37:18] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[01:43:15] *** Joins: supercom32 (~supercom3@198-84-216-125.cpe.teksavvy.com)
[01:43:46] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[01:47:00] *** Quits: rbn (~rbn@sferic.eu) (Quit: Lost terminal)
[01:47:22] <supercom32> Hey all.
[01:48:34] <supercom32> So I was trying to rename a directory in Windows by doing `os.Rename("dir1", "dir2")`, but I noted that if the source directory contains any file or folders, it returns an error saying "access denied". If it is empty it renames as expected.
[01:48:57] <supercom32> Is anyone else getting this strange issue? It's pretty basic functionality, so I'm hoping this isn't a legit bug and something to do with on my end.
[01:50:14] *** Quits: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 244 seconds)
[01:50:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[01:51:25] *** Joins: flynn (~mcbloch@user/flynn)
[01:52:20] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[01:52:36] <supercom32> I should also note that Linux works just fine. Has no no.Rename issues or unexpected behaviour.
[01:53:02] *** Quits: flommi (~flommi@puck942.startdedicated.de) (Ping timeout: 245 seconds)
[01:53:04] *** Joins: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35)
[01:53:14] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:54:47] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[01:55:11] *** Quits: Walter_S (~WalterS@85.186.96.126) (Quit: Konversation terminated!)
[01:55:15] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[01:59:24] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[02:00:25] *** Joins: flynn (~mcbloch@user/flynn)
[02:00:38] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[02:00:41] <kubblai> supercom32: what makes you think windows and linux filesystems and kernels are the same? im not that au fait with go but theres probably a different way of doing it
[02:01:25] <supercom32> @kubblai: Well, I expected that the os package for golang would keep things generic. That is, I don't need to worry about what OS it runs on, just that it behaves predictably?
[02:01:51] <supercom32> "Rename renames (moves) oldpath to newpath. If newpath already exists and is not a directory, Rename replaces it. OS-specific restrictions may apply when oldpath and newpath are in different directories. If there is an error, it will be of type *LinkError."
[02:02:48] <kubblai> yeah those docs do seem to make sense - i would be surprised if something so fundamental had a bug though
[02:04:07] *** Quits: greypw2 (~greypw2@grey.pw) (Quit: Ping timeout (120 seconds))
[02:04:15] <supercom32> @kubblai: That's why I'm thinking I'm at fault. I can't believe such as basic thing would be broken! :-D  But I suppose I could just be very unlucky (or lucky) depending on how you look at it.
[02:04:30] *** Joins: greypw2 (~greypw2@grey.pw)
[02:05:12] <fizzie> On Windows it should be a call to the MoveFile system call, through https://cs.opensource.google/go/go/+/refs/tags/go1.17:src/syscall/syscall_windows.go;l=537;drc=021444007590da4c1f6e504904e2871a1012c0bf -- that's what fundamentally should define the semantics of it. (No idea about Windows specifics though.)
[02:05:19] <foobaz> supercom32: https://stackoverflow.com/questions/56075774/golang-os-renamefromdir-todir-not-working-in-windows
[02:05:44] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 244 seconds)
[02:05:51] <kubblai> ah yes foobaz that would explain it
[02:06:04] <supercom32> @foobaz: Yep, I already saw this. The solution is not accurate however. It does not resolve the issue for me.
[02:06:47] <supercom32> I can have absolutely everything closed down (Fresh reboot), so there should be no open file / directories to be locked. Still happens.
[02:06:58] *** Quits: mertyildiran (~mertyildi@88.248.149.182) (Quit: WeeChat 2.8)
[02:07:21] <supercom32> If the folder is empty, rename works just fine though.
[02:07:26] *** Joins: arcatech_ (~arcatech@user/arcatech)
[02:07:29] <fizzie> (Your own program doesn't open any files in the directory by any chance?)
[02:08:35] <supercom32> Nope! If someone else has windows handy, I invite them to take a look. `err := os.Rename("dir1", "dir2")` And if "dir1" has contents in it, it fails. Even when running cmd as administrator.
[02:10:13] <supercom32> I even tried updating to the latest version of golang just in case this was something that was already addressed. No dice unfortunately :(
[02:10:40] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 240 seconds)
[02:12:45] *** Quits: arcatech_ (~arcatech@user/arcatech) (Quit: Bye.)
[02:14:39] <dostoyevsky2> Any ideas how go-fuse handles threads?  https://github.com/hanwen/go-fuse  <- the last time I wrote a fuse filesystem in C++ the main problem was to make it thread-safe, as the kernel would spawn a new thread for each process accessing fs at the same time
[02:15:39] *** Joins: k0ta (~k0ta@103.108.94.37)
[02:17:26] *** Joins: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net)
[02:18:41] <foobaz> dostoyevsky2: i don't have experience with go-fuse, but it's very likely to be the same situation as in C++, you will have to handle synchronization yourself
[02:18:41] <dostoyevsky2> Ah, there are actually lots of mutexes in the code...
[02:19:35] <dostoyevsky2> foobaz: Yeah...  So the code would crash randomly until I figured out where I have to use mutexes...
[02:19:54] <foobaz> for go-fuse to handle synchronization for you, it would need very coarse-grained scheduling, which when combined with slow IO would lead to very poor performance
[02:20:56] <foobaz> you can use go's race detector to find those issues instead of waiting for it to crash
[02:22:40] <foobaz> the race detector is much more reliable, it has a much lower false negative rate than waiting for it to crash
[02:22:53] <dostoyevsky2> ok, thanks!
[02:23:11] <foobaz> many synchronization errors are rare and will only crash 1 in a billion times
[02:23:24] <foobaz> in general you need to acquire a mutex whenever you use a global variable
[02:23:46] <foobaz> local variables that other threads have no access to are safe to use without a mutex
[02:24:17] *** Quits: kindablue (znc@2001:19f0:6001:175a:dedb:79f4:38d:5b35) (Quit: System Rebooting..)
[02:24:58] <dostoyevsky2> Could I also create a special write-channel and that way do all write operations in just one thread?   I have written code in C++ where I could avoid any mutexes that way, good for read performance
[02:25:08] *** Joins: kindablue (znc@2001:19f0:6001:175a:5400:3ff:fe51:d77f)
[02:25:19] <foobaz> yes
[02:26:10] <dostoyevsky2> But requires certain atomicity in pointer operations... so I'd fully build a datastructure and set the pointer to it as the last thing... that pointer set operation needs to be atomic, though, so a reading-thread will not crash
[02:26:19] <foobaz> why can't write operations run concurrently? what shared state do two write operations share?
[02:27:07] <foobaz> actually it's not safe to perform reads concurrently with writes, so it's not sufficient to use the channel for writes only
[02:27:15] <foobaz> you would need to serialize reads too
[02:27:29] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:27:49] <dostoyevsky2> foobaz: There is always the chance that you would change the same resource at the same time... and if you have just one thread those changes are serialized
[02:28:02] <foobaz> yes but which resource specifically
[02:28:04] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[02:28:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:29:39] <foobaz> it's not your responsibility to prevent synchonization errors in programs accessing the filesystem, it's okay to allow concurrent access because it's the responsibility of the caller to synchronize filesystem access
[02:29:39] <dostoyevsky2> in a filesystem?  Writing the same file at the same time...  I want to create a bundlefs-like filesysem so this will be often the case
[02:30:16] <foobaz> your filesystem should not attempt to prevent multiple writes to the same file
[02:30:33] <foobaz> for one, it has a negative effect on performance and complexity
[02:30:43] <foobaz> and also, it's not sufficient to prevent bugs in the calling program
[02:30:54] <foobaz> this is because thread-safety is not composable
[02:31:01] *** Joins: fikran (~fikran@user/fikran)
[02:32:02] <foobaz> if two things write to the same file at the same time, it's not the job of the filesystem to prevent that
[02:32:30] <foobaz> because even if you serialize the writes, the programs are still unaware of the other one's writes, and will still fail
[02:32:43] <foobaz> so you've caused a huge performance hit for no gain
[02:33:52] <foobaz> consider regular filesystems like ext4 or zfs, they make no attempt to serialize writes or to prevent concurrent access to the same files, because they understand this is the program's responsibility
[02:34:15] <foobaz> they provide mechanisms for programs to use, like file locking and flushing
[02:35:26] <foobaz> i'm sure FUSE has these functions too
[02:38:42] *** Quits: prologic (~prologic@mail.mills.io) (Quit: ZNC - https://znc.in)
[02:39:23] *** Joins: prologic (~prologic@mail.mills.io)
[02:39:38] <dostoyevsky2> foobaz: alas, this is not how bundlefs works... you put your fs inside 8m blobs essentially..  you need to prevent updating the internal data structures of the fs at the same time... in a normal fs you'd implement fine-grained locking to prevent that... but if you can just serialize all the writes and parallelize all the reads at the same time, it's a cheap first step
[02:40:36] <dostoyevsky2> and generally on a cpu level you can assume 32bit atomicity...
[02:40:38] <foobaz> you need to serialize access to blobs, but that's not the same as serializing access to the filesystem
[02:40:47] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[02:42:07] <foobaz> it's not safe to perform a read concurrently with a write
[02:42:31] <foobaz> your idea of a write channel will not make it thread safe
[02:42:40] <dostoyevsky2> foobaz: the linux kernel does not serialize accesses to a fuse filesystem, nor any other filesystem
[02:43:11] <foobaz> if i were you, i'd start with one mutex to protect all of the blobs, just remember to use it with both reads and writes
[02:43:26] <dostoyevsky2> yeah, I guess I can go from there
[02:43:38] <foobaz> to get parallel reads, you can use a sync.RWMutex, which allows multiple readers
[02:43:57] <foobaz> but there is a cost, it's made of two regular mutexes internally, so locking and unlocking are 2x slower
[02:44:08] <dostoyevsky2> RWMutex is a spinlock?
[02:44:17] <foobaz> no
[02:45:06] <foobaz> to get the best performance, try to lock as late as possible, and unlock as early as possible, while still keeping all critical code in between
[02:45:57] <foobaz> like if you have some setup to do that doesn't require access to the blobs, like calculating exactly what it is you will write, you can do that before locking, and allow that part to run concurrently
[02:46:44] <foobaz> and if you want an even higher performance solution, you could use many mutexes to protect different sections of the storage
[02:46:57] <foobaz> for example 8 mutexes that each protect a 1m blob section
[02:47:20] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:47:41] <foobaz> that would allow writes to run concurrently as long as they are accessing different parts of the storage
[02:48:54] <foobaz> the downside is, you need to calculate which blobs will be accessed before locking a mutex, and you might need access before you can calculate where to put it
[02:48:58] <foobaz> so it might not be feasible
[02:49:31] <foobaz> also if there's some shared header/metadata area that always gets updated, splitting it up might not increase concurrency anyway
[02:50:03] <foobaz> but for a first pass i suggest using 1 sync.Mutex or 1 sync.RWMutex and then optimize from there
[02:51:24] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[02:52:49] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[02:59:51] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[03:00:57] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[03:09:00] *** Quits: Pies (~Pies@314es.pl) (Remote host closed the connection)
[03:10:27] *** Joins: rbn (~rbn@sferic.eu)
[03:11:33] *** Quits: rbn (~rbn@sferic.eu) (Client Quit)
[03:12:27] *** Joins: darkapex (~darkapex@user/darkapex)
[03:12:58] *** Joins: rbn (~rbn@sferic.eu)
[03:13:56] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 244 seconds)
[03:18:50] <b0nn> The concept of "plugins" in Go comes up here a lot, and this article in the Go magazine is on that topic https://eli.thegreenplace.net/2021/plugins-in-go/
[03:21:43] *** Quits: absc (~absc@dynamic-adsl-94-34-168-146.clienti.tiscali.it) (Remote host closed the connection)
[03:27:19] *** Joins: arcatech (~arcatech@user/arcatech)
[03:29:10] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[03:32:59] *** Joins: rx0n7 (~pi@177.223.162.6)
[03:33:37] *** Quits: jsrnop (~mark@user/jsrnop) (Quit: The Lounge - https://thelounge.chat)
[03:34:03] *** Joins: jsrnop (~mark@user/jsrnop)
[03:36:40] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 244 seconds)
[03:37:23] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Quit: ZNC 1.8.2 - https://znc.in)
[03:37:38] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:51:02] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:52:10] *** Quits: jespada (~jespada@90.254.245.194) (Ping timeout: 244 seconds)
[03:54:51] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[03:55:29] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[03:55:43] *** Joins: jespada (~jespada@90.254.245.194)
[04:05:13] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:06:07] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 244 seconds)
[04:11:32] <seebs> yeah, go just really isn't likely to support plugins well for some purposes, i think -- it's not like Java, which expects to be loading and overwriting lots of stuff.
[04:11:45] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (Quit: What's that?)
[04:12:01] <seebs> also, dostoyevsky2: DO NOT "assume 32bit atomicity". do not assume ANY atomicity, at all, even if the CPU theoretically provides that in some ways at an architecture level, because it won't in other ways.
[04:12:17] *** Quits: supercom32 (~supercom3@198-84-216-125.cpe.teksavvy.com) (Quit: Leaving)
[04:12:32] <seebs> because "atomic" can mean "you never see a partial write to this word", for instance, but may not actually imply "you definitely see these writes in a predictable order" or "you definitely consistently see-or-don't-see these writes on other CPUs"
[04:12:47] <seebs> so if you have written to a word, and then you have multiple cores reading it, they might get different answers.
[04:13:26] <seebs> you *must* use actual synchronization things (sync and sync/atomic, for instance), or happens-before things like channels, if you are doing concurrency. if you try to rely on "oh we know this is atomic on x86" you will experience HORRIBLE TRAGEDIES.
[04:15:25] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[04:15:34] *** Quits: khyr0n (~khyr0n@189.232.28.229) (Ping timeout: 252 seconds)
[04:18:19] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[04:20:03] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[04:20:58] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[04:21:05] *** Joins: flynn (~mcbloch@user/flynn)
[04:23:16] <dostoyevsky2> seebs: if there are no guarantees on atomicity, how are mutexes implemented?  The ones I know all rely on some form of guarantee on cpu level
[04:23:40] <seebs> yes, such as locking instructions or cmpxchg or whatever.
[04:23:49] <seebs> but not just on "we know 32-bit writes are atomic"
[04:24:06] <seebs> because you need to tell the CPU that you need the write to be seen by all other cores and to participate in ordering guarantees
[04:24:59] <dostoyevsky2> you mean via the lock prefixes?
[04:25:13] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:26:15] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:71b7:bdff:34f7:41d7)
[04:27:45] <CommunistWolf> eyyyy got there: https://cs.opensource.google/go/go/+/refs/tags/go1.17:src/runtime/internal/atomic/atomic_amd64.s;l=34
[04:27:46] <seebs> yeah, or whatever else is floating around, varies by CPU architecture.
[04:28:06] <seebs> if you don't have the lock prefixes and such, the "atomicity" of x86-64 is not strong enough to safely implement mutexes, in general.
[04:29:49] <CommunistWolf> aye, I'm having fun with the arm ones at the moment
[04:29:56] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-3861-b031-6b93-c510.inf6.spectrum.com) (Ping timeout: 252 seconds)
[04:29:58] <Aye> i'm glad for you
[04:30:03] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (*.net *.split)
[04:30:03] *** Quits: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se) (*.net *.split)
[04:30:03] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (*.net *.split)
[04:30:03] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (*.net *.split)
[04:30:03] *** Quits: jsrnop (~mark@user/jsrnop) (*.net *.split)
[04:30:03] *** Quits: rbn (~rbn@sferic.eu) (*.net *.split)
[04:30:03] *** Quits: darkapex (~darkapex@user/darkapex) (*.net *.split)
[04:30:03] *** Quits: flommi (~flommi@puck942.startdedicated.de) (*.net *.split)
[04:30:03] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (*.net *.split)
[04:30:03] *** Quits: faceonkeyboard (~faceonkey@anquietas.harting.hosting) (*.net *.split)
[04:30:03] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (*.net *.split)
[04:30:03] *** Quits: LiftLeft (~LiftLeft@172.98.92.15) (*.net *.split)
[04:30:03] *** Quits: realies (~realies@user/realies) (*.net *.split)
[04:30:03] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (*.net *.split)
[04:30:03] *** Quits: Thedarkb1-Work (~Thedarkb@62.232.253.82) (*.net *.split)
[04:30:03] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (*.net *.split)
[04:30:03] *** Quits: aead (~aead@user/aead) (*.net *.split)
[04:30:03] *** Quits: purpleidea (~james@user/purpleidea) (*.net *.split)
[04:30:03] *** Quits: predmijat (~predmijat@mail.strogopro.com) (*.net *.split)
[04:30:03] *** Quits: chasmo77 (~chas77@71.63.241.168) (*.net *.split)
[04:30:03] *** Quits: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de) (*.net *.split)
[04:30:03] *** Quits: menace (~someone@user/menace) (*.net *.split)
[04:30:03] *** Quits: endigma (~endigma@134.41.124.82) (*.net *.split)
[04:30:03] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (*.net *.split)
[04:30:03] *** Quits: Kyros (~kyros@user/kyros) (*.net *.split)
[04:30:03] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[04:30:03] *** Quits: sus (zero@user/zeromomentum) (*.net *.split)
[04:30:04] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (*.net *.split)
[04:30:04] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[04:30:04] *** Quits: albertito (~nil@37.228.204.251) (*.net *.split)
[04:30:04] *** Quits: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de) (*.net *.split)
[04:30:04] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (*.net *.split)
[04:30:04] *** Quits: penguwin (~penguwin@fribbledom.com) (*.net *.split)
[04:30:04] *** Quits: gbmor (ben@gbmor.dev) (*.net *.split)
[04:30:04] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[04:30:04] *** Quits: msk (~msk@49.207.201.57) (*.net *.split)
[04:30:04] *** Quits: dfch (~dfch@user/dfch) (*.net *.split)
[04:30:04] *** Quits: Kaivo (~Kaivo@user/kaivo) (*.net *.split)
[04:30:04] *** Quits: novns (~novns@user/novns) (*.net *.split)
[04:30:04] *** Quits: DM43078421 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net) (*.net *.split)
[04:30:04] *** Quits: j00n (~mario@user/j00n) (*.net *.split)
[04:30:04] *** Quits: seebs (~seebs@24.196.59.174) (*.net *.split)
[04:30:04] *** Quits: alrs (alrs@tilde.team) (*.net *.split)
[04:30:09] *** Joins: alrs_ (alrs@tilde.team)
[04:30:10] <CommunistWolf> lol
[04:30:11] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[04:30:11] <Aye> 💥
[04:30:13] *** Joins: faceonkeyboard (~faceonkey@anquietas.harting.hosting)
[04:30:14] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:30:16] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[04:30:19] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[04:30:20] *** Joins: menace (~someone@ppp-93-104-165-2.dynamic.mnet-online.de)
[04:30:22] *** Joins: rschmied (~huh@HSI-KBW-109-193-238-226.hsi7.kabel-badenwuerttemberg.de)
[04:30:22] *** Joins: flommi (~flommi@puck942.startdedicated.de)
[04:30:22] *** Joins: sus (zero@user/zeromomentum)
[04:30:26] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[04:30:28] *** Joins: chasmo77 (~chas77@71.63.241.168)
[04:30:28] *** Joins: Jigsy (~Jigsy@88-111-2-172.dynamic.dsl.as9105.com)
[04:30:34] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[04:30:34] *** Joins: purpleidea (~james@user/purpleidea)
[04:30:40] *** Joins: Kyros (~kyros@c-73-113-162-18.hsd1.tn.comcast.net)
[04:30:44] *** Joins: novns (~novns@188.120.225.53)
[04:30:47] *** Joins: ajfriesen (~ajfriesen@cable-89-1-117-98.nc.de)
[04:30:49] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:30:52] *** Quits: Jigsy (~Jigsy@88-111-2-172.dynamic.dsl.as9105.com) (Changing host)
[04:30:52] *** Joins: Jigsy (~Jigsy@user/jigsy)
[04:30:59] *** Joins: seebs (~seebs@24.196.59.174)
[04:30:59] *** Joins: DM43078421 (~DM4307@c-73-15-244-129.hsd1.ca.comcast.net)
[04:31:10] *** Joins: Kaivo (~Kaivo@170.249.39.160)
[04:31:12] *** Quits: novns (~novns@188.120.225.53) (Changing host)
[04:31:12] *** Joins: novns (~novns@user/novns)
[04:31:21] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[04:31:53] *** Joins: LiftLeft (~LiftLeft@172.98.92.15)
[04:31:56] *** Joins: Thedarkb-Work (~Thedarkb@62.232.253.82)
[04:32:02] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[04:32:03] *** Joins: darkapex (~darkapex@user/darkapex)
[04:32:06] *** Joins: realies (~realies@user/realies)
[04:32:16] *** Joins: aead (~aead@user/aead)
[04:32:19] *** Joins: Gaffel (~gaffel@h-178-174-170-170.A1405.priv.bahnhof.se)
[04:32:19] *** Joins: dfch (~dfch@user/dfch)
[04:32:48] *** Joins: jsrnop (~mark@user/jsrnop)
[04:32:52] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[04:33:12] *** Joins: gbmor (ben@gbmor.dev)
[04:33:51] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[04:35:11] *** Joins: rbn (~rbn@sferic.eu)
[04:35:16] *** Joins: albertito (~nil@37.228.204.251)
[04:38:05] *** Joins: emg (~emg@cpe-70-93-247-186.natsow.res.rr.com)
[04:39:03] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[04:39:39] *** Joins: LSD (~LSD@2.lsd.systems)
[04:41:27] *** Joins: arcatech (~arcatech@user/arcatech)
[04:43:43] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[04:44:17] <b0nn> dostoyevsky2: Mutexes use TSL instructions which are (normally) spinlocks implemented within the silicon
[04:44:38] <b0nn> The LOCK prefixes are just intruction groups that make use of the TSLs
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:30] <b0nn> er, TSL == Test and Set Lock
[04:46:42] <seebs> It's fancier than that, I think.
[04:46:50] <seebs> Because they're also doing something to ensure coherency across other cores and caches.
[04:47:25] *** Joins: arcatech (~arcatech@user/arcatech)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:07] <seebs> hmm. according to at least one source, it's basically ensuring that the core executing a locked instruction has exclusive ownership of the relevant cache line during that instruction, so, no other core can have it.
[04:48:11] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[04:50:32] <seebs> hmm. looks like sync/mutex is using atomic.CompareAndSwapInt32 to try to get it, and if that *fails*, then it goes to the slow lock case.
[04:52:00] <b0nn> CompareAndSwap drops to whatever the CPU arch call is
[04:53:02] <b0nn> https://www.amd.com/system/files/TechDocs/24594.pdf bottom of page 11 is AMDs (far too brief) explanation
[04:53:23] <b0nn> They speak of bus or packet messaging between processors
[04:53:57] *** Joins: vptr (~vptr@user/vptr)
[04:54:02] *** Joins: k0ta (~k0ta@103.108.94.37)
[04:54:02] <seebs> yeah. it's lock cmpxchgl for x86, apparently. so, cmpxchgl is just a swap, and the lock prefix is necessary to make the swap correctly atomic with respect to other processors.
[04:54:32] <seebs> so if the first try fails, then we go into the slow case which potentially-spins but eventually goes into a queue to wait to be woken up.
[04:55:06] <b0nn> 10:16 < b0nn> er, TSL == Test and Set Lock
[04:55:21] *** Joins: BUSY (~BUSY@user/busy)
[04:58:33] <seebs> yeah, but i don't think that's a spinlock, it's just a try-once-and-possibly-fail?
[04:59:20] <b0nn> yeah, I know you don't know
[05:00:55] <b0nn> There is no magic, a CPU cannot just issue an instruction that a process has exclusive rights, it has to check if another process already holds that and wait
[05:01:23] <seebs> ohhhhh.
[05:01:24] <seebs> i see.
[05:01:39] <seebs> there's two layers of "lock" here, one is the cache access, one is the mutex.
[05:02:09] <dostoyevsky2> the problem with lock is it can be very slow, especially on older intel systems so lots of cas implementations try to work around it...  e.g. with biased locking on Java VMs back in the days
[05:02:19] <seebs> so the lock prefix is doing some kind of magic that probably at some point involves a spinlock or something similar, in order to get control of the cache line holding the mutex... but that isn't the same thing as the spinlocking that might then get done on the mutex value itself.
[05:02:38] <seebs> i am now really curious how locking actually works on x86
[05:03:05] <dostoyevsky2> https://github.com/openjdk/jdk/blob/739769c8fc4b496f08a92225a12d07414537b6c0/src/hotspot/os_cpu/linux_x86/atomic_linux_x86.hpp
[05:03:27] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[05:03:36] <dostoyevsky2> https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-instruction-set-reference-manual-325383.pdf
[05:05:40] *** Joins: penguwin (~penguwin@fribbledom.com)
[05:05:40] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 240 seconds)
[05:05:44] <seebs> oh neat
[05:06:24] <seebs> huh, and xchg apparently asserts the lock signal even without the prefix.
[05:08:29] <dostoyevsky2> In the intel manual they list for every instruction whether it may need a lock prefix... mov doesn't need one, so in C one can check the compiler output and then assume that what's defined as "undefined behavior" in the standard would always have atomic guarantees on your architecture, as long as the compiler generates similar instructions :)
[05:08:35] *** Joins: gggp_ (~gggp@111-251-124-128.dynamic-ip.hinet.net)
[05:12:18] *** Quits: vptr (~vptr@user/vptr) (Quit: leaving)
[05:12:20] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[05:13:12] <seebs> it doesn't need one, but if it doesn't have one, it can produce Surprising Results.
[05:13:40] <seebs> see 8.2.3.5. you're allowed to have different cores see operations in different orders.
[05:14:14] <seebs> and usually when people say they want "atomic" operations, they also actually want some kind of guarantee that they won't see things in different orders on different CPUs.
[05:14:25] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Ping timeout: 252 seconds)
[05:15:40] <seebs> https://research.swtch.com/gomm <-- see also this and the two previous articles on memory models
[05:20:47] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:22:19] *** Joins: yoonkn (~user@175.197.208.79)
[05:22:20] *** Joins: oxum (~oxum@106.203.195.217)
[05:26:25] *** Quits: Kyros (~kyros@c-73-113-162-18.hsd1.tn.comcast.net) (Quit: WeeChat 2.8)
[05:26:39] *** Joins: Kyros (~kyros@user/kyros)
[05:27:34] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[05:27:35] <dostoyevsky2> https://gcc.godbolt.org/z/PxjzzPq3n <- in actual compiler output you can see that std::atomic<long> only will make the lock prefix necessary when adding, not for assignment... across compilers
[05:28:00] *** Quits: lauraaah (uid156848@id-156848.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[05:29:29] *** Joins: oxum (~oxum@106.203.195.217)
[05:33:09] <dostoyevsky2> oh, but xchg has an implicit lock :)
[05:35:36] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::100c)
[05:36:30] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[05:38:41] *** Quits: elgraz (~elgraz@151.65.9.160) (Quit: Leaving)
[05:41:30] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[05:42:53] *** Joins: oxum (~oxum@106.203.195.217)
[05:43:05] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Ping timeout: 252 seconds)
[05:43:57] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[05:44:20] *** Joins: Everything (~Everythin@37.115.210.35)
[05:44:44] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 252 seconds)
[05:44:44] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[05:44:58] *** Joins: neurocyte3 (~neurocyte@212.232.84.61)
[05:44:58] *** Quits: neurocyte3 (~neurocyte@212.232.84.61) (Changing host)
[05:44:58] *** Joins: neurocyte3 (~neurocyte@user/neurocyte)
[05:47:25] *** Quits: neurocyte (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:47:25] *** neurocyte3 is now known as neurocyte
[05:50:36] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[05:53:21] *** Joins: sagax (~sagax_nb@user/sagax)
[05:54:07] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[05:54:44] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[05:55:54] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[05:59:41] <gggp_> Is there list of golang fundamental framework and libs
[06:01:12] *** Joins: justsomeguy (~justsomeg@24.96.241.90)
[06:02:00] <foobaz> gggp_: https://pkg.go.dev/std
[06:03:42] <gggp_> std is good
[06:03:51] <gggp_> why gin is not std
[06:04:04] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 256 seconds)
[06:04:33] *** Parts: justsomeguy (~justsomeg@24.96.241.90) ()
[06:06:22] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[06:07:38] *** Joins: k0ta (~k0ta@103.108.94.37)
[06:08:27] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 240 seconds)
[06:08:46] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[06:09:26] *** Joins: Nex8192_ (~Nex8192@user/nex8192)
[06:09:27] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Ping timeout: 240 seconds)
[06:09:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 245 seconds)
[06:10:07] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Ping timeout: 240 seconds)
[06:10:07] *** Quits: comrad (~quassel@holarse/comrad) (Ping timeout: 240 seconds)
[06:10:27] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[06:10:57] *** Joins: comrad (~quassel@holarse/comrad)
[06:11:57] *** Joins: amk (~amk@109.255.169.126)
[06:14:44] *** Joins: gggp (~textual@60.10.194.45)
[06:16:10] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[06:18:07] *** Joins: gggp (~textual@60.10.194.45)
[06:19:01] *** Parts: Everything (~Everythin@37.115.210.35) ()
[06:19:37] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[06:21:04] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[06:22:08] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100c) (Ping timeout: 252 seconds)
[06:23:16] *** Joins: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com)
[06:23:40] <foobaz> gggp_: because it's not maintained by the go language team
[06:24:39] <gggp_> what is the diff between crypto/elliptic and  crypto/ecdsa ?
[06:24:44] *** Joins: yoonkn (~user@175.197.208.79)
[06:31:27] *** Quits: kubblai (sid478659@fedora/kubblai) (Ping timeout: 240 seconds)
[06:31:38] *** Joins: kubblai (sid478659@fedora/kubblai)
[06:31:47] *** Quits: nescafe1001 (sid211018@id-211018.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:31:59] *** Joins: nescafe1001 (sid211018@id-211018.tinside.irccloud.com)
[06:32:27] *** Quits: Anderson-D (sid146635@id-146635.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:32:27] *** Quits: tylerchambers (sid511381@id-511381.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:32:27] *** Quits: telemachus (sid2004@id-2004.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:32:47] *** Quits: beeza (sid53872@id-53872.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:32:47] *** Quits: pombreda (sid227801@id-227801.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:32:56] *** Joins: Anderson-D (sid146635@id-146635.tinside.irccloud.com)
[06:33:07] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 240 seconds)
[06:33:27] *** Quits: pl (sid98063@id-98063.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[06:34:12] *** Joins: tylerchambers (sid511381@id-511381.helmsley.irccloud.com)
[06:34:53] *** Joins: pombreda (sid227801@id-227801.tinside.irccloud.com)
[06:34:55] *** Joins: telemachus (sid2004@id-2004.helmsley.irccloud.com)
[06:35:23] <rewt> gggp_, a look at their docs answers that question... "elliptic implements several standard elliptic curves over prime fields" / "ecdsa implements the Elliptic Curve Digital Signature Algorithm, as defined in FIPS 186-3"
[06:35:39] *** Joins: beeza (sid53872@id-53872.tinside.irccloud.com)
[06:35:41] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[06:35:47] <rewt> the first sentence in each of their docs
[06:36:00] *** Joins: oxum (~oxum@106.203.195.217)
[06:36:15] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[06:36:32] <gggp_> they are all symmetric ?
[06:36:44] <gggp_> or non symmetric
[06:38:40] <rewt> https://pkg.go.dev/crypto/elliptic & https://pkg.go.dev/crypto/ecdsa
[06:40:11] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[06:44:59] *** Joins: oxum (~oxum@106.203.195.217)
[06:46:34] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 256 seconds)
[06:48:38] *** Joins: hexfive (~eric@50.35.83.177)
[06:51:59] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[06:52:43] *** Joins: oxum (~oxum@106.203.195.217)
[06:53:04] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[06:55:23] <lazyreader> Asymmetric.
[06:58:33] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[06:58:38] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[07:00:26] *** Joins: oxum (~oxum@106.203.195.217)
[07:01:25] *** Quits: andlabs (~andlabs@ool-ad034a4d.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:02:07] <gggp_> what is the next step after parser outputing ast file
[07:02:39] <gggp_> what stuff will process the outputted ast file
[07:08:20] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[07:08:25] *** Joins: gggp (~textual@111.63.14.116)
[07:10:32] *** Quits: yoonkn (~user@175.197.208.79) (Ping timeout: 252 seconds)
[07:10:42] *** Quits: gggp (~textual@111.63.14.116) (Client Quit)
[07:15:09] *** Quits: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de) (Read error: Connection reset by peer)
[07:15:15] *** Joins: oxum (~oxum@106.203.195.217)
[07:16:27] *** Joins: andlabs (~andlabs@172.58.227.74)
[07:16:55] *** Joins: strubbl8919419 (~strubbl@ipbcc107ea.dynamic.kabel-deutschland.de)
[07:17:24] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[07:21:46] *** Quits: vs^ (~vs@wsip-98-188-244-188.mc.at.cox.net) (Remote host closed the connection)
[07:23:02] *** Quits: andlabs (~andlabs@172.58.227.74) (Ping timeout: 245 seconds)
[07:24:42] *** Joins: andlabs (~andlabs@172.58.227.224)
[07:28:53] *** Joins: gggp (~textual@60.10.23.169)
[07:31:26] *** Quits: andlabs (~andlabs@172.58.227.224) (Ping timeout: 252 seconds)
[07:32:22] *** Joins: andlabs (~andlabs@172.58.230.140)
[07:33:42] *** Joins: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net)
[07:33:46] *** Joins: yoonkn (~user@175.197.208.79)
[07:35:20] *** Joins: andlabs_ (~andlabs@2607:fb90:f80f:8a6e:ac1c:2cf2:482e:a15a)
[07:37:00] *** Quits: andlabs (~andlabs@172.58.230.140) (Ping timeout: 256 seconds)
[07:39:42] *** Quits: andlabs_ (~andlabs@2607:fb90:f80f:8a6e:ac1c:2cf2:482e:a15a) (Ping timeout: 245 seconds)
[07:42:12] *** Quits: gggp (~textual@60.10.23.169) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:53:50] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:54:44] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[07:54:56] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[07:59:29] *** Joins: lalitmee__ (~lalitmee@180.94.32.196)
[08:01:37] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[08:08:47] *** Joins: oxum (~oxum@106.203.195.217)
[08:14:49] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[08:18:23] *** Joins: oxum (~oxum@106.203.195.217)
[08:23:04] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[08:25:23] *** Joins: oxum (~oxum@106.203.195.217)
[08:29:05] *** Quits: burningserenity (~burningse@2603-9001-0f01-ad99-0000-0000-0000-1000.inf6.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[08:37:51] *** Joins: gggp (~textual@60.10.194.45)
[08:46:37] *** Quits: gggp (~textual@60.10.194.45) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:50:32] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 245 seconds)
[09:02:12] *** Joins: jpw (~jpw@user/jpw)
[09:10:30] *** Joins: lalitmee_ (~lalitmee@180.94.33.3)
[09:13:11] *** Joins: adlternative (~adl@117.32.216.79)
[09:13:20] *** Quits: lalitmee__ (~lalitmee@180.94.32.196) (Ping timeout: 256 seconds)
[09:14:07] *** Joins: oxum (~oxum@106.203.195.217)
[09:18:37] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[09:24:37] *** Joins: jpw_ (~jpw@user/jpw)
[09:26:56] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 256 seconds)
[09:27:31] *** Joins: jpw (~jpw@user/jpw)
[09:29:04] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 252 seconds)
[09:29:29] *** Joins: jpw_ (~jpw@user/jpw)
[09:30:54] *** Quits: rx0n7 (~pi@177.223.162.6) (Ping timeout: 256 seconds)
[09:31:53] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 252 seconds)
[09:37:36] *** Joins: rx0n7 (~pi@177.223.162.6)
[09:41:47] *** Quits: k0ta (~k0ta@103.108.94.37) (Quit: leaving)
[09:44:38] *** Joins: Atque (~Atque@user/atque)
[09:47:24] *** Joins: oxum (~oxum@106.203.195.217)
[09:52:10] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[09:53:52] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:54:45] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[09:55:06] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[09:57:07] *** Quits: rx0n7 (~pi@177.223.162.6) (Ping timeout: 252 seconds)
[09:58:00] *** Joins: rx0n7 (~pi@177.223.162.6)
[10:00:10] *** Quits: emg (~emg@cpe-70-93-247-186.natsow.res.rr.com) (Ping timeout: 240 seconds)
[10:00:12] *** Joins: mei (~mei@user/mei)
[10:02:22] *** Joins: gggp (~textual@60.10.23.169)
[10:09:42] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 245 seconds)
[10:10:35] *** Quits: gggp (~textual@60.10.23.169) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:12:32] *** Joins: fikran (~fikran@user/fikran)
[10:15:16] *** Quits: LiftLeft (~LiftLeft@172.98.92.15) (Ping timeout: 252 seconds)
[10:18:11] *** Joins: gggp (~textual@60.10.194.45)
[10:19:04] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[10:19:11] *** Quits: rx0n7 (~pi@177.223.162.6) (Ping timeout: 252 seconds)
[10:20:20] *** Joins: rx0n7 (~pi@177.223.162.6)
[10:21:20] *** Joins: oxum (~oxum@106.203.195.217)
[10:29:06] *** Quits: blinux (~blinux@pool-108-51-228-58.washdc.fios.verizon.net) (Quit: WeeChat 3.2)
[10:29:38] *** Quits: rx0n7 (~pi@177.223.162.6) (Ping timeout: 252 seconds)
[10:30:35] *** Joins: rx0n7 (~pi@177.223.162.6)
[10:30:55] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[10:34:11] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[10:34:56] *** Quits: gggp_ (~gggp@111-251-124-128.dynamic-ip.hinet.net) (Quit: Leaving)
[10:35:09] *** Joins: gggp (~gggp@111-251-124-128.dynamic-ip.hinet.net)
[10:35:11] *** Joins: flynn (~mcbloch@user/flynn)
[10:35:37] *** Quits: gggp (~gggp@111-251-124-128.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:35:40] *** Joins: gggpkm (~gggpkm@111-251-124-128.dynamic-ip.hinet.net)
[10:38:20] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:40:25] *** Joins: LiftLeft (~LiftLeft@172.83.47.113)
[11:02:26] <novns> I wonder are there faster time to string (or to []byte better) converters available
[11:02:50] <novns> without slow parsing of format string each time
[11:07:20] *** Joins: jpw (~jpw@user/jpw)
[11:07:49] *** Quits: rx0n7 (~pi@177.223.162.6) (Quit: WeeChat 2.8)
[11:08:59] *** Joins: normen (~normen@p54b3452e.dip0.t-ipconnect.de)
[11:09:42] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 245 seconds)
[11:12:45] *** Joins: shka (~herr@109.231.62.239)
[11:35:01] *** Joins: lalitmee__ (~lalitmee@180.94.33.214)
[11:37:12] *** Quits: lalitmee_ (~lalitmee@180.94.33.3) (Ping timeout: 245 seconds)
[11:46:29] *** Joins: gggp (~textual@60.10.194.45)
[11:47:21] *** Quits: gggp (~textual@60.10.194.45) (Client Quit)
[11:53:45] *** Quits: nevivurn (~nevivurn@user/nevivurn) (Read error: Connection reset by peer)
[11:54:00] *** Joins: lalitmee_ (~lalitmee@180.94.33.33)
[11:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[11:55:12] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[11:56:10] *** Quits: lalitmee__ (~lalitmee@180.94.33.214) (Ping timeout: 240 seconds)
[12:01:47] *** Joins: nevivurn (~nevivurn@user/nevivurn)
[12:01:59] *** Joins: frost (~frost@59.71.240.119)
[12:03:30] *** Joins: ninjin- (~ninjin@user/ninjin)
[12:06:09] *** Quits: ninjin (~ninjin@user/ninjin) (Ping timeout: 276 seconds)
[12:06:40] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[12:07:29] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[12:07:41] *** Joins: flynn (~mcbloch@user/flynn)
[12:08:32] *** Joins: mrig (~mrig@user/mrig)
[12:16:10] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:20:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:21:53] *** Joins: fikran (~fikran@user/fikran)
[12:24:06] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[12:25:05] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[12:28:04] *** Joins: CoolerX (~CoolerX@user/coolerx)
[12:29:21] *** Quits: theoceaniscool (~theoceani@119.12.232.133) (Quit: Leaving)
[12:29:34] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[12:32:59] *** Joins: theoceaniscool_ (~theoceani@119.12.232.133)
[12:33:03] *** Quits: theoceaniscool_ (~theoceani@119.12.232.133) (Remote host closed the connection)
[12:33:23] *** Quits: normen (~normen@p54b3452e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:45:31] *** Joins: lalitmee__ (~lalitmee@180.94.33.37)
[12:48:02] *** Quits: lalitmee_ (~lalitmee@180.94.33.33) (Ping timeout: 245 seconds)
[12:51:16] <A_Dragon> novns: you want string -> []byte directly?
[12:51:37] <A_Dragon> oh time as in time.Time
[12:53:12] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[12:54:20] *** Joins: jpw (~jpw@user/jpw)
[12:55:23] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[12:59:57] *** Andrew is now known as AhkilKumar
[13:00:26] *** AhkilKumar is now known as Andrew
[13:06:48] *** Joins: CoolerX (~CoolerX@user/coolerx)
[13:08:00] *** Joins: lalitmee_ (~lalitmee@180.94.32.14)
[13:10:32] *** Quits: lalitmee__ (~lalitmee@180.94.33.37) (Ping timeout: 245 seconds)
[13:12:16] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[13:13:24] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[13:15:16] <novns> A_Dragon, I want []byte without any conversions
[13:15:43] <novns> like AppendFormat does
[13:16:08] <A_Dragon> novns: eh the conversion from string to byte isnt slow
[13:16:13] <A_Dragon> its a straight memcpy
[13:16:32] <novns> Format calls AppendFormat inside, and then converts []byte to string
[13:16:39] <A_Dragon> mhmm
[13:16:53] <novns> A_Dragon, and I want no allocations and no GC
[13:17:49] <novns> one preallocated array of bytes to reuse
[13:23:19] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[13:25:15] *** Joins: lauraaah (uid156848@id-156848.ilkley.irccloud.com)
[13:26:29] <A_Dragon> mmm dont know of anything off the top of my head for that, I guess if you alloced a []byte, then sliced it such that you're SURE there wont be allocation in an append call, that could work?
[13:26:37] <A_Dragon> and then reslice afterwards to make the len 0
[13:29:28] *** Joins: thing_ (~thing@user/thing)
[13:30:37] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[13:30:39] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[13:31:08] *** thing_ is now known as thing
[13:34:26] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[13:34:57] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[13:37:49] <novns> A_Dragon, the problem is slow parsing of format strings
[13:38:03] <novns> will write my own conversion function
[13:38:22] <A_Dragon> yep, you'll need to if you want to, time.Time is... a float64 I think
[13:38:24] <A_Dragon> or a int64
[13:38:37] <A_Dragon> just need to slowly divide your way up or use the helper methods
[13:38:45] <novns> I will
[13:39:23] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[13:42:05] *** Joins: j00n (~mario@user/j00n)
[13:54:52] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[13:55:21] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:10:44] <sztanpet> its not an int64, https://cs.opensource.google/go/go/+/refs/tags/go1.17:src/time/time.go;l=127
[14:13:56] <A_Dragon> oh Im thinking of Duration then
[14:15:19] *** Joins: Atque (~Atque@user/atque)
[14:16:47] *** Quits: dsrt^ (~dsrt@wsip-98-188-244-188.mc.at.cox.net) (Ping timeout: 252 seconds)
[14:24:42] *** Quits: lalitmee_ (~lalitmee@180.94.32.14) (Ping timeout: 245 seconds)
[14:25:20] *** Joins: jpw (~jpw@user/jpw)
[14:26:13] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:27:14] *** Joins: flynn (~mcbloch@user/flynn)
[14:29:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[14:30:07] *** Joins: normen (~normen@p200300d7173dc90064a111b23d131bea.dip0.t-ipconnect.de)
[14:31:15] *** Joins: fikran (~fikran@user/fikran)
[14:31:46] *** Joins: lalitmee (~lalitmee@180.94.32.213)
[14:33:14] *** Joins: djo (~djo@91-173-41-2.subs.proxad.net)
[14:36:07] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[14:37:37] *** Quits: djo (~djo@91-173-41-2.subs.proxad.net) (Ping timeout: 252 seconds)
[14:49:36] *** Quits: mickey (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:50:01] *** Joins: mickey (~user@user/mickey)
[14:58:36] *** Quits: frost (~frost@59.71.240.119) (Quit: Connection closed)
[15:03:01] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[15:03:28] *** Quits: normen (~normen@p200300d7173dc90064a111b23d131bea.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:08:16] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[15:12:30] *** Joins: lalitmee_ (~lalitmee@180.94.33.117)
[15:15:01] *** Quits: lalitmee (~lalitmee@180.94.32.213) (Ping timeout: 252 seconds)
[15:18:10] *** Joins: normen (~normen@p200300d7173dc90064a111b23d131bea.dip0.t-ipconnect.de)
[15:22:14] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.2)
[15:22:44] *** Joins: mohan43u (~mohan@user/mohan43u)
[15:24:00] *** Quits: mohan43u (~mohan@user/mohan43u) (Client Quit)
[15:24:20] *** Joins: mohan43u (~mohan@user/mohan43u)
[15:29:37] *** Quits: menace (~someone@ppp-93-104-165-2.dynamic.mnet-online.de) (Quit: menace)
[15:51:14] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[15:52:38] *** Joins: oxum (~oxum@106.203.195.217)
[15:54:09] *** Quits: oxum (~oxum@106.203.195.217) (Read error: Connection reset by peer)
[15:54:34] *** Joins: oxum (~oxum@106.203.195.217)
[15:54:41] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[15:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[15:59:03] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[16:05:01] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[16:10:04] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:15:16] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[16:17:03] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:19:24] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[16:20:36] *** Joins: lalitmee__ (~lalitmee@180.94.33.231)
[16:23:13] *** Quits: lalitmee_ (~lalitmee@180.94.33.117) (Ping timeout: 252 seconds)
[16:31:32] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[16:31:33] *** Joins: xiongxin8802 (~manjaro-u@119.123.100.23)
[16:32:55] *** Quits: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:7471:ec74:8d2f:dc1) (Remote host closed the connection)
[16:33:00] *** Joins: pi1 (~pi@177.223.162.6)
[16:33:17] *** Joins: be3uykpy_ (~be3uykpy@2a00:a040:19a:b060:7471:ec74:8d2f:dc1)
[16:38:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[16:39:33] *** Joins: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de)
[16:39:38] *** Joins: oxum (~oxum@106.203.195.217)
[16:40:37] *** Joins: fikran (~fikran@user/fikran)
[16:45:49] *** Quits: xiongxin8802 (~manjaro-u@119.123.100.23) (Quit: Konversation terminated!)
[16:46:37] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[16:47:51] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[16:48:33] *** Joins: oxum (~oxum@106.203.195.217)
[16:51:21] *** Joins: dbr^ (~dbr@wsip-98-188-244-188.mc.at.cox.net)
[16:51:21] *** Quits: mort (~mort@188.166.114.29) (Quit: The Lounge - https://thelounge.chat)
[16:58:43] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:04:47] *** Joins: Atque (~Atque@user/atque)
[17:04:55] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.2)
[17:05:18] *** Joins: mohan43u (~mohan@user/mohan43u)
[17:10:45] *** Joins: oxum (~oxum@106.203.195.217)
[17:19:12] *** Parts: pi1 (~pi@177.223.162.6) ()
[17:19:12] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[17:20:17] <acagastya> Hi, I am trying to use the fs.ReadDir function (https://pkg.go.dev/io/fs#ReadDir), but I can't seem to figure out the first parameter for this function.  What is `fsys FS` supposed to mean?
[17:21:06] *** Joins: V (~v@anomalous.eu)
[17:22:35] *** Joins: lalitmee_ (~lalitmee@180.94.32.182)
[17:23:41] <NCS_One> acagastya: https://pkg.go.dev/io/fs#example-WalkDir
[17:23:47] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[17:23:48] *** Joins: gggp (~textual@60.10.23.169)
[17:24:04] <NCS_One> WalkDir also accepts a fsys FS
[17:24:42] *** Quits: lalitmee__ (~lalitmee@180.94.33.231) (Ping timeout: 245 seconds)
[17:25:43] <acagastya> okay, then what is name supposed to mean?
[17:26:40] <acagastya> If I am already specifying the path to the folder, name is going to mean something else.
[17:26:54] *** Quits: gggpkm (~gggpkm@111-251-124-128.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:32:36] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[17:37:49] *** Joins: weird_error (~textual@ool-4579fedc.dyn.optonline.net)
[17:38:49] *** Joins: oxum (~oxum@106.203.195.217)
[17:40:10] *** Quits: lvlinux (~ruel@150.136.4.160) (Ping timeout: 252 seconds)
[17:40:33] *** Joins: ruel (~ruel@150.136.4.160)
[17:42:51] *** Quits: gggp (~textual@60.10.23.169) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:47:26] *** Quits: cooper (~mitchell@user/cooper) (Ping timeout: 252 seconds)
[17:50:33] *** Joins: lemmi (~lemmi@user/lemmi)
[17:54:48] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[17:55:06] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[17:59:12] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:59:17] *** Quits: adlternative (~adl@117.32.216.79) (Ping timeout: 245 seconds)
[18:01:01] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:04:15] *** Quits: normen (~normen@p200300d7173dc90064a111b23d131bea.dip0.t-ipconnect.de) (Quit: WeeChat 3.2)
[18:05:40] *** Quits: andlabs (~andlabs@70.107.171.168) (Client Quit)
[18:08:16] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[18:09:38] *** Joins: andlabs (~andlabs@70.107.171.168)
[18:14:11] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[18:16:45] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[18:20:02] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:21:04] *** Joins: flynn (~mcbloch@user/flynn)
[18:22:12] *** Quits: jjonah (~jjonah@p200300d5d71aad00dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:24:22] *** Joins: oxum (~oxum@106.203.195.217)
[18:31:18] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[18:31:28] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:32:29] *** Joins: flynn (~mcbloch@user/flynn)
[18:32:40] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 240 seconds)
[18:33:23] <fizzie> acagastya: It's just a consequence of the way the filesystem abstraction works. If you have a "non-physical" fs.FS (such as from //go:embed or a "testing/testfs"), you pass that as the first argument, and the name "inside" the FS as the second. When you're using a "real" directory via an os.DirFS, you get to choose how much of the path you want to "wrap" inside the FS definition, and how much to
[18:33:25] <fizzie> pass to fs.ReadDir as the name argument. That WalkDir example puts it all in the os.DirFS, and uses "." as the name to denote the FS's root directory. What makes sense probably depends on the context.
[18:34:49] *** Joins: oxum (~oxum@106.203.195.217)
[18:37:26] *** Joins: gun1x (~gunix@cyberghost-baratiei.mediasat.ro)
[18:37:31] <gun1x> hello
[18:38:02] <gun1x> how do I turn off GoLint for go-vim? By default, vim-go keeps warning me about exportet stuff that does not have comments
[18:38:55] <fizzie> acagastya: Of course if you're in a context where you'd be writing something like `fs.ReadDir(os.DirFS("/some/path"), ".")` literally, there's really no particular reason not to just write `os.ReadDir("/some/path")` directly: you're not abstracting anything in there. `fs.ReadDir` makes sense if you're in a function that itself accepts an fs.FS argument.
[18:39:05] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[18:39:24] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[18:39:41] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[18:39:53] *** Joins: oxum (~oxum@106.203.195.217)
[18:40:02] <acagastya> Indeed, I do feel reading that, fs.ReadDir is prolly an overkill in this situation.  Thanks for that, fizzie!
[18:40:34] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[18:42:09] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[18:43:59] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[18:47:56] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[18:49:16] <gun1x> nevermind, it was vim-ale
[18:49:57] *** Joins: fikran (~fikran@user/fikran)
[18:59:15] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:02:05] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:02:10] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:05:14] *** Quits: oxum (~oxum@106.203.195.217) (Remote host closed the connection)
[19:08:36] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:10:33] *** Joins: andlabs (~andlabs@70.107.171.168)
[19:14:03] *** Joins: mort5 (~mort@188.166.114.29)
[19:18:40] *** Quits: mort5 (~mort@188.166.114.29) (Ping timeout: 240 seconds)
[19:23:00] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[19:27:32] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[19:29:13] *** Joins: toretto (~ryan@user/toretto)
[19:40:45] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-58c384-213.dhcp.inet.fi)
[19:45:43] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:46:14] *** Joins: oxum (~oxum@106.203.195.217)
[19:49:36] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:50:23] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[19:51:06] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:51:07] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
[19:51:08] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[19:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[19:55:13] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[19:56:04] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[19:56:20] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[19:56:38] *** Joins: thing (~thing@user/thing)
[19:57:07] *** Joins: c10l (~c10l@89.34.167.207)
[19:58:37] *** Joins: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net)
[19:58:47] *** Joins: enkeyz (~enkeyz@user/enkeyz)
[20:01:34] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Ping timeout: 252 seconds)
[20:03:01] *** Quits: enkeyz (~enkeyz@user/enkeyz) (Client Quit)
[20:04:12] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[20:04:50] *** Joins: burningserenity (~burningse@143.244.34.25)
[20:06:30] *** Joins: mrig (~mrig@user/mrig)
[20:15:35] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:18:31] *** Joins: andlabs (~andlabs@70.107.171.168)
[20:20:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[20:37:40] *** Quits: l2dy (~l2dy@user/l2dy) ()
[20:39:45] *** Joins: l2dy (~l2dy@user/l2dy)
[20:44:28] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[20:50:11] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[20:51:12] *** Joins: flynn (~mcbloch@user/flynn)
[20:52:52] *** Joins: arcatech (~arcatech@user/arcatech)
[20:54:11] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[20:54:55] *** Quits: tealecloud (~tealeclou@cpc1-farn9-2-0-cust495.6-2.cable.virginm.net) (Ping timeout: 252 seconds)
[20:57:12] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:57:22] *** Joins: c10l (~c10l@89.34.167.207)
[20:58:49] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Quit: WeeChat 3.2)
[20:59:18] *** Joins: fikran (~fikran@user/fikran)
[21:01:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:02:39] *** Joins: flynn (~mcbloch@user/flynn)
[21:13:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:14:48] *** Joins: flynn (~mcbloch@user/flynn)
[21:18:34] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[21:23:55] *** Joins: mort (~mort@188.166.114.29)
[21:34:04] *** Joins: mrig (~mrig@user/mrig)
[21:34:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:35:00] *** Joins: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com)
[21:35:08] *** Quits: burningserenity (~burningse@143.244.34.25) (Ping timeout: 252 seconds)
[21:36:44] *** Quits: burningserenity_ (~burningse@142-196-178-216.res.spectrum.com) (Client Quit)
[21:39:42] *** Quits: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247) (Ping timeout: 245 seconds)
[21:44:05] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:45:05] *** Joins: flynn (~mcbloch@user/flynn)
[21:45:27] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 245 seconds)
[21:47:41] *** Joins: hendry (~hendry@210.23.22.2)
[21:48:27] *** Quits: lalitmee_ (~lalitmee@180.94.32.182) (Ping timeout: 245 seconds)
[21:52:10] *** Joins: bkircher (~bkircher@2001:a61:245a:8201:c518:484f:1750:7247)
[21:53:06] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[21:54:01] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[21:54:42] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[21:55:01] *** Joins: mrig (~mrig@user/mrig)
[21:55:02] *** Joins: flynn (~mcbloch@user/flynn)
[21:55:18] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[21:59:02] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:59:41] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[22:03:40] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[22:11:26] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:12:03] <gun1x> how should I unit test this: http://ix.io/3xWo ?
[22:12:33] *** Joins: flynn (~mcbloch@user/flynn)
[22:18:02] *** Joins: khrbt (~znc@user/khrbt)
[22:21:07] *** Quits: weird_error (~textual@ool-4579fedc.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:25:53] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[22:26:55] *** Joins: flynn (~mcbloch@user/flynn)
[22:32:50] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[22:42:35] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:47:59] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[22:49:30] *** Joins: mrig (~mrig@user/mrig)
[22:51:45] *** LSD is now known as acidsys
[22:52:45] *** Joins: andlabs (~andlabs@70.107.171.168)
[22:56:31] <zsnes> gun1x: you could take io.ReadCloser and io.WriteCloser instead of net.TCPConn and then you could easily make a test type to debug every piece
[22:56:42] <zsnes> s/debug/unit test
[22:57:26] *** Joins: Guest82_ (~textual@ool-4579fedc.dyn.optonline.net)
[23:06:22] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[23:07:07] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:08:38] *** Joins: fikran (~fikran@user/fikran)
[23:13:16] <zsnes> gun1x: i would also look at https://github.com/stretchr/testify package as it has a bounty of helpful testing tools
[23:14:50] <gun1x> zsnes: I need net.TCPConn
[23:17:55] <zsnes> you can use net.Pipe() to get two ends of a TCP connection and what you want with it
[23:20:39] *** Joins: burningserenity (~burningse@102.129.152.83)
[23:20:43] *** Quits: Guest82_ (~textual@ool-4579fedc.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:07] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:29:17] <gun1x> zsnes: i didn't try that. Thank you! I will try it
[23:29:55] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:4d09:4215:a798:93d6)
[23:31:05] *** Joins: andlabs (~andlabs@70.107.171.168)
[23:38:36] *** Quits: sebito91 (~sborza@45.55.74.66) (Quit: laterz, coffee...)
[23:39:55] *** Joins: sebito91 (~sborza@45.55.74.66)
[23:44:03] <dostoyevsky2> I saw that one can write linux kernel modules in Rust.  Would it be also possible to use go these days?  I guess one just needs to be able to generate the symbol names the kernel expects for a .ko file, and then provide mappings of the linux kernel data structures for go... and disabling the garbage collector.  The latter might be impossible, though
[23:44:54] <foobaz> it's not just the GC, the rest of the runtime is also a major issue, like goroutine scheduling
[23:45:14] <foobaz> it will likely never be possible to write kernel modules in go
[23:45:35] <dostoyevsky2> yeah, the libc part in the kernel is also very very different
[23:48:33] *** Joins: oxum (~oxum@106.203.195.217)
[23:49:37] <dostoyevsky2> but the GC can be disabled for accessing structs in shared memory, no?
[23:50:59] <foobaz> yes
[23:53:40] *** Quits: oxum (~oxum@106.203.195.217) (Ping timeout: 252 seconds)
