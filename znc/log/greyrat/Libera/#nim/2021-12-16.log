[00:00:09] <FromDiscord> <Recruit_main707> i felt the same, but then got used to it
[00:00:15] <FromDiscord> <spazzy> or at least inconsistent
[00:00:32] <FromDiscord> <Recruit_main707> what was that other lib that everyone was using for wrapping c now?
[00:00:33] <FromDiscord> <Elegantbeef> The wrapping isnt that weird
[00:00:53] <FromDiscord> <Elegantbeef> Are you talking about futhark?
[00:00:59] <FromDiscord> <Recruit_main707> yeah
[00:01:06] <FromDiscord> <Recruit_main707> it used c2nim too didnt it?
[00:01:15] <FromDiscord> <Elegantbeef> I think it's kinda expected to be this way since Nim is a language that really uses the type system atleast imo
[00:01:29] <FromDiscord> <spazzy> doesnt futhark just import the header to be used with incline c?
[00:01:39] <FromDiscord> <spazzy> kind of?
[00:01:55] <FromDiscord> <Elegantbeef> Atleast when i wrap stuff i try to make it the best Nim experience which means it doesnt align with C's implementation
[00:02:02] <FromDiscord> <Elegantbeef> Futhark uses clang
[00:02:59] <FromDiscord> <spazzy> i mean its not the same as what im trying to do
[00:03:10] <FromDiscord> <spazzy> since im trying to make a header file a nimble package
[00:03:27] <FromDiscord> <Elegantbeef> It does automatic bindings, so not idiomatic but if you need/want a library you can get it done
[00:03:29] <FromDiscord> <spazzy> its more to use in projects iirc
[00:04:03] <FromDiscord> <Recruit_main707> In reply to @Elegantbeef "It does automatic bindings,": no tool does that and probably wont ever
[00:04:18] <FromDiscord> <Elegantbeef> Hey i just popped in here answering questions! 😛
[00:04:45] <FromDiscord> <Elegantbeef> I didnt imply otherwise, but it doesnt emit source so making it idiomatic is more tedious
[00:05:51] <FromDiscord> <Recruit_main707> ah, fair enough↵i surely prefer that to messing with c headers until c2nim likes it tho
[00:06:13] <FromDiscord> <Elegantbeef> Yea i'm daft so i prefer wrapping stuff myself, but it's tedious
[00:06:37] <FromDiscord> <hmmm> In reply to @geekrelief "yeah I have it": woa this looks so cool, and the nim code seems very readable
[00:06:48] <FromDiscord> <spazzy> so i should just use futhark for the time being and deal with wrapping it later?
[00:07:05] <FromDiscord> <Recruit_main707> its worth a try
[00:07:32] <FromDiscord> <Recruit_main707> check how it works in practice here https://github.com/arkanoid87/nimarrowglib
[00:08:16] <FromDiscord> <geekrelief> In reply to @hmmm "woa this looks so": yeah a little more concise than C at least 😄
[00:08:34] <FromDiscord> <spazzy> In reply to @Recruit_main707 "check how it works": OH
[00:08:37] <FromDiscord> <spazzy> okay
[00:08:37] <FromDiscord> <Elegantbeef> No dumb namespacesless namespaces 😛
[00:10:35] <FromDiscord> <bananahead> Quick one all. I have 2 hashSets which I am using to find a diff. How do I extract the diffed values. The docs suggest using the [], but this does not work for me, and causes an error.
[00:10:36] <Amun-Ra> Elegantbeef: same here, I always wrap stuff myself, and I always hide raw C stuff
[00:10:57] <FromDiscord> <spazzy> so realistically it would probably be faster to futhark the macros and c2nim the rest of it that c2nim actually likes than just messing with the header until it wraps itself?
[00:12:58] <FromDiscord> <bananahead> Oh maybe I should use a set insted of a hashset
[00:17:28] <Amun-Ra> bananahead: s1 -+- s2 (hashsets); otherwise (s1 - s2) + (s2 - s1)
[00:19:30] <Amun-Ra> hmm, -+- doesn't work the way I thought it works
[00:19:46] <FromDiscord> <bananahead> In reply to @Amun-Ra "<@451387344109568011>: s1 -+- s2": So the diff isn't so much the issue. if I echo it I'm left with `{'d'}` which is a new hashset. I want to get `'d'` as a string
[00:20:51] <FromDiscord> <Elegantbeef> you can do `for x in yourSet`
[00:20:52] <FromDiscord> <Elegantbeef> or do `yourSet.toSeq` with `import std/sequtils`
[00:24:32] <FromDiscord> <bananahead> Thanks as always @ElegantBeef
[00:25:07] <FromDiscord> <Elegantbeef> and yes if you're doing `HashSet[char]` stop playing games and do `set[char]` 😀
[00:25:30] <FromDiscord> <kevin> does nim have something to convert from a char array to a string and vice versa?
[00:26:08] <FromDiscord> <Elegantbeef> Are we talking about `array[10, char]` or a cstring?
[00:26:12] <FromDiscord> <kevin> c2nim formatted all of the c char array struct members into Nim char arrays
[00:26:24] <FromDiscord> <Elegantbeef> Ah those should be `cstring`
[00:26:42] <FromDiscord> <bananahead> In reply to @Elegantbeef "and yes if you're": Im having trouble getting string into a set format, without nim complaining with me
[00:27:00] <FromDiscord> <Elegantbeef> cstring is a `ptr UncheckedArray[char]` and there are easy conversions to/from
[00:27:14] <FromDiscord> <Elegantbeef> Nim's built in set only works with ordinals
[00:27:33] <FromDiscord> <Elegantbeef> So a string will not work, i assumed you had a bitset of chars which is why i mentioned it
[00:27:37] <FromDiscord> <Elegantbeef> hashset of chars\
[00:27:45] <Amun-Ra> kevin: join from strutils
[00:28:20] <FromDiscord> <Elegantbeef> I should clarify that Nim's bitsets work for ordinals in the range of `0..uin16.high`
[00:28:36] <FromDiscord> <bananahead> Nope, Im attempting the AOC day 8 part 2. So and creating and diffing sets made up from strings.
[00:28:56] <FromDiscord> <Elegantbeef> Then yea disregard the set comment by me
[00:29:02] <FromDiscord> <Elegantbeef> I just seen `{'d'}` and assumed it was a char set
[00:29:11] <FromDiscord> <Elegantbeef> Cause that is not a string 😛
[00:29:21] <FromDiscord> <bananahead> Haha fair point!
[00:30:14] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Ping timeout: 252 seconds)
[00:33:15] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3IwN
[00:33:44] <FromDiscord> <Elegantbeef> Those are global char arrays? If so the Nim type is right imo
[00:33:47] <FromDiscord> <kevin> I'm pretty sure I'm missing something simple
[00:34:24] <FromDiscord> <kevin> It's a C type originally: `typedef struct _S_CONFIG {`
[00:34:45] <FromDiscord> <kevin> lots more members in the struct but basically the same all the way thru.
[00:35:04] <FromDiscord> <Elegantbeef> Then yes those should be cstrings
[00:35:07] <FromDiscord> <Elegantbeef> afaik atleast
[00:35:23] <FromDiscord> <Elegantbeef> Can i see the C struct and c2nim output?
[00:36:03] <FromDiscord> <kevin> https://github.com/TheWover/donut/blob/master/lib/donut.h
[00:36:30] <FromDiscord> <kevin>  https://media.discordapp.net/attachments/371759389889003532/920783902405165096/donut.nim
[00:36:55] <FromDiscord> <kevin> slightly tweaked output since some things broke
[00:37:19] <FromDiscord> <Elegantbeef> Ok so yea the original type is right imo
[00:38:22] <FromDiscord> <kevin> So then if I use a Nim array[char], it's:  `Error: type mismatch: got 'string' for '"asdf"' but expected 'array[0..255, char]'`
[00:38:31] <FromDiscord> <Elegantbeef> Yep one second
[00:41:08] <nrds> <06Prestige99> duds: there are tutorials on the nim website that are good to read
[00:41:33] <nrds> <06Prestige99> https://nim-lang.org/documentation.html
[00:41:39] <nrds> <04duds99> NOT YET omg omg
[00:41:49] <nrds> <04duds99> thank u but i have to wait........
[00:41:49] <nrds> <06Prestige99> Haha
[00:42:00] <nrds> <04duds99> do not tempt me or i will be all over the place lol
[00:42:14] <nrds> <04duds99> too much picking up and dropping langs and stuff already
[00:42:22] <nrds> <04duds99> adhd impulses u know
[00:43:05] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3IwP\
[00:43:05] <FromDiscord> <Elegantbeef> You probably need something like taht
[00:43:10] <FromDiscord> <Elegantbeef> Since afaik the char arrays in C are fixed size regardless what you put in them
[00:45:03] <Amun-Ra> or something as generic as https://play.nim-lang.org/#ix=3IwR
[00:48:44] <Amun-Ra> hmm
[00:50:16] <Amun-Ra> that wouldn't work es expected if there's junk after null terminator
[00:51:22] <FromDiscord> <kevin> So i guess Nim does not have a stdlib converter from c char array to cstring?
[00:51:33] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Read error: Connection reset by peer)
[00:51:47] <FromDiscord> <kevin> if not that's ok but i would have thought there would be
[00:52:27] <FromDiscord> <Elegantbeef> Well the issue there Amun is that in their example there are a bunch of char arrays that are 256 characters so going to/from is going to be tedious still
[00:52:28] <FromDiscord> <Elegantbeef> For safety i think using a distinct there is the best
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de)
[00:52:30] *** Quits: neurocyte0132889 (~neurocyte@IP-212232092128.dynamic.medianet-world.de) (Changing host)
[00:52:30] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:54:38] <FromDiscord> <Elegantbeef> Well we have `cstring` but those arent cstrings afaik
[00:54:39] <FromDiscord> <Elegantbeef> Those are fixed size char arrays, but pretend to be cstrings cause C "has a type system"
[00:54:39] <FromDiscord> <Elegantbeef> That's kinda the point amun, these are max 256 characters, and you probably(didnt look at the actual impl, just assumed) use nul termination for ending these early
[00:54:57] <FromDiscord> <Elegantbeef> That's my assumption at least, i could be wrong
[00:59:05] <Amun-Ra> pretty much
[01:07:29] <FromDiscord> <spazzy> for anyone that cares: the openbsd port of nim is still on 1.2
[01:08:48] <FromDiscord> <spazzy> for some reason
[01:09:42] <FromDiscord> <Elegantbeef> Generally it's suggested to use choosenime or gitnim to install Nim regardless where you are, though no clue if it plays well with BSD(i'd assume so)
[01:09:54] <FromDiscord> <Elegantbeef> choosenim even
[01:15:59] <FromDiscord> <spazzy> it doesnt
[01:16:21] <FromDiscord> <spazzy> it assumes the os flag is linux
[02:04:11] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:32:43] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[02:46:02] <FromDiscord> <pyautogui> Hi - I am wondering, why is "ansi_c.nim" not importable from my code? "https://github.com/nim-lang/Nim/blob/69aabdab800077e9aaa08344494c83138a02f57c/lib/system/ansi_c.nim". There are a lot of situations in which it would be useful.
[02:49:54] <FromDiscord> <VideoCarp> I'm having an error with types while creating a Fibonacci series program. https://play.nim-lang.org/#ix=3Ixj↵It says it expects int32 but got string, and when I add `int32(nterms)` at the end of the variable block, it says it expects string but got int32. I am stuck.
[02:51:59] *** Joins: sagax (~sagax_nb@user/sagax)
[02:52:08] <FromDiscord> <Elegantbeef> `readLine(stdin)` returns a string
[02:53:04] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Ixk
[02:53:27] <FromDiscord> <Elegantbeef> Though worth noting this will error if you give a value outside of int32 range
[02:54:51] <FromDiscord> <VideoCarp> how do I fix it though?
[02:57:37] <FromDiscord> <VideoCarp> oh I found something. thanks
[02:58:22] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Ixn something like this is nice, but better to just use a procedure for the parsing logic/checks
[03:01:20] <FromDiscord> <VideoCarp> what is wrong with https://play.nim-lang.org/#ix=3Ixp
[03:01:50] <FromDiscord> <Elegantbeef> If you give a non parsable string to `parseInt` it'll crash the program
[03:02:01] <FromDiscord> <VideoCarp> will put in try
[03:02:04] <FromDiscord> <Elegantbeef> For instance if you do `hfjdjkafhda` in tesponse
[03:02:15] <FromDiscord> <VideoCarp> but it's telling me it expects string now but got int
[03:02:34] <FromDiscord> <Elegantbeef> Well type mismatches are generally helpful so read the line and the expression
[03:04:08] <FromDiscord> <Elegantbeef> You can even compile with `--hint[source]:on` to get exactly where the issue is if that helps you
[03:04:17] <FromDiscord> <VideoCarp> sent a code paste, see https://play.nim-lang.org/#ix=3Ixq
[03:04:28] <FromDiscord> <VideoCarp> oh wait
[03:04:30] <FromDiscord> <VideoCarp> that is right
[03:04:41] <FromDiscord> <Elegantbeef> You're parsing an int so that's what you expect
[03:04:44] <FromDiscord> <VideoCarp> I had another `readLine`
[03:23:07] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[03:30:03] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (*.net *.split)
[03:30:03] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (*.net *.split)
[03:30:04] *** Quits: dv2 (~dv2@eclipse.oxfordfun.com) (*.net *.split)
[03:30:04] *** Quits: Schnouki (e7aa4cfb39@user/schnouki) (*.net *.split)
[03:30:04] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[03:30:05] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (*.net *.split)
[03:30:05] *** Quits: notchris (sid181145@id-181145.hampstead.irccloud.com) (*.net *.split)
[03:30:05] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (*.net *.split)
[03:30:05] *** Quits: FromDiscord (~FromDisco@mail.nim-lang.org) (*.net *.split)
[03:30:05] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (*.net *.split)
[03:30:05] *** Quits: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1) (*.net *.split)
[03:30:06] *** Quits: NimBot (~NimBot@mail.nim-lang.org) (*.net *.split)
[03:30:16] *** Joins: Schnouki (e7aa4cfb39@user/schnouki)
[03:30:24] *** Joins: notchris (sid181145@id-181145.hampstead.irccloud.com)
[03:30:24] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[03:30:30] *** Joins: FromDiscord (~FromDisco@mail.nim-lang.org)
[03:30:38] *** Joins: NimBot (~NimBot@mail.nim-lang.org)
[03:30:45] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[03:31:27] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[03:31:50] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[03:32:11] *** Joins: greaser|q (greaser@antihype.space)
[03:33:28] *** Joins: Colt (~Colt@user/colt)
[03:33:56] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[03:33:56] *** Joins: greaser|q (greaser@user/greasemonkey)
[03:33:59] *** greaser|q is now known as GreaseMonkey
[03:34:54] *** Joins: nixfreaknim[m] (~reversem3@2001:470:69fc:105::33d1)
[03:36:48] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[03:37:12] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[03:46:56] *** Joins: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com)
[03:51:18] <FromDiscord> <huantian> is there a way to make a seq of `n` length of default vals
[03:54:11] <FromDiscord> <Rosen> In reply to @huantian "is there a way": setLen on an initialized empty seq?
[03:54:24] <FromDiscord> <Rosen> Or it needs to be in one step
[03:55:14] <FromDiscord> <impbox [ftsf]> `newSeq[type](size)`
[03:55:59] *** Quits: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com) (Read error: Connection reset by peer)
[03:56:15] <FromDiscord> <Rosen> You know I always had an idea that would be the way to do it but I just never tried
[04:03:23] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 256 seconds)
[04:06:35] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[04:13:53] *** Joins: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com)
[04:14:33] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/sequtils.html#newSeqWith.t%2Cint%2Cuntyped
[04:14:37] <FromDiscord> <Elegantbeef> For if you want custom default value
[04:25:38] <FromDiscord> <huantian> oh neat
[04:26:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[04:29:01] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:33:18] <FromDiscord> <Yardanico> Oh, nice, https://plugins.jetbrains.com/plugin/15128-nim/versions new minor version out, so it's in development and wasn't abandoned :)
[04:53:09] *** Joins: dv2 (~dv2@eclipse.oxfordfun.com)
[04:58:24] *** Quits: bigmanbird (~Thrawn@119-12-221-1.dynamic.ipstaraus.com) (Quit: Leaving)
[05:03:40] *** Quits: arkurious (~arkurious@user/arkurious) (Read error: Connection reset by peer)
[05:04:07] *** Joins: arkurious (~arkurious@user/arkurious)
[05:09:26] <nrds> <06Prestige99> What is the `likelyProc` in system? The docs don't really explain much
[05:09:44] <nrds> <06Prestige99> The definition is just `proc likelyProc(val: bool): bool {.importc: "NIM_LIKELY", nodecl, noSideEffect.}`
[05:21:36] <FromDiscord> <exelotl> I don't think `likelyProc` is to be used directly, but system defines `likely` and `unlikely`
[05:21:43] <FromDiscord> <Yardanico> yeah I think so too
[05:22:15] <FromDiscord> <exelotl> Those allow you to hint that an expression is more likely to evaluate to true than false, and the C compiler can use that information to produce better optimized assembly
[05:23:01] <FromDiscord> <Yardanico> Yeah, although it's not a good idea to use it everywhere but rather find hot paths in your code if you really want to use it
[05:23:08] <FromDiscord> <Yardanico> IMO compilers are already good at this
[05:23:26] <FromDiscord> <Yardanico> And PGO will be much better than manually adding likely/unlikely
[05:25:44] <FromDiscord> <Yardanico> And it's not that hard to do with clang, although does require a few commands currently
[05:25:45] <FromDiscord> <Yardanico> https://forum.nim-lang.org/t/6295
[05:27:28] <FromDiscord> <exelotl> I wish that likely/unlikely were pragmas though, they feel like the more appropriate construct for the job since they affect codegen
[05:29:26] <FromDiscord> <Marisol> What's nim's equivalent of map<string, dynamic>?
[05:30:32] <FromDiscord> <Yardanico> In reply to @Marisol "What's nim's equivalent of": the closest you can get is by using an object variant
[05:30:59] <FromDiscord> <Yardanico> nim is a statically compiled language, it can't have a fully "dynamic" type without considerable changes to the runtime and the language itself
[05:31:22] <FromDiscord> <Yardanico> See for example https://nim-lang.org/docs/json.html, you can use JsonNode from here or define your own
[05:31:44] <FromDiscord> <Yardanico> (if you just use JsonNode you won't deal with json at all, it's just the type)
[05:33:02] <FromDiscord> <Marisol> sent a code paste, see https://play.nim-lang.org/#ix=3Iy1
[05:33:09] <FromDiscord> <Marisol> Hmm I'll look at JsonNode
[05:33:16] <FromDiscord> <Yardanico> as I said, you can use object variants
[05:33:35] <FromDiscord> <Yardanico> JsonNode is an object variant too, it's just a little handy so that you don't have to define your own type
[05:34:10] <FromDiscord> <Marisol> Ah you're right
[05:34:20] <FromDiscord> <Marisol> Thanks, I'll look on it
[05:48:27] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[06:02:05] <FromDiscord> <Roundlay> Wondering if anyone can point me in the direction of any of native macOS (Metal) projects written primarily in Nim? I'd kind of like to avoid Swift/C++/Zig etc. if I can, and enjoy using Nim, but am not sure if it's up to the task yet.
[06:03:39] <FromDiscord> <fenrave> In reply to @Yardanico "Oh, nice, https://plugins.jetbrains.com/plugin/1512": This plugin is alright but it has a hard time actually just finding `nim` in the system path for whatever reason, so you have to manually configure everything sometimes
[06:03:50] <FromDiscord> <Yardanico> yeah I'm not saying it's the best
[06:03:55] <FromDiscord> <fenrave> kind of defeats the point of using something like intellij
[06:03:56] <FromDiscord> <Yardanico> I still use VSCode because it actually uses nimsuggest :)
[06:04:18] <FromDiscord> <fenrave> I wonder if fleet will have better nim integration
[06:04:30] <FromDiscord> <Yardanico> well it supports LSP
[06:04:33] <FromDiscord> <Yardanico> so you can just use nimlsp with it
[06:04:51] <FromDiscord> <Yardanico> but yeah, someone will have to write a syntax highlighting plugin if fleet can't use existing definitions from other editors
[06:05:36] <FromDiscord> <fenrave> I would hope it least supports vscodes definitions given that it's supposed to be a paid(not clear on this yet) competitor
[06:05:59] <FromDiscord> <fenrave> Now all I need is a reason to use nim and to learn it further 😎
[06:07:42] <FromDiscord> <fenrave> :cryingsunglasses:
[06:11:17] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:17:44] <FromDiscord> <huantian> I have a few random complaints with vscode nim like not being able to see the type of something in it's declaration
[06:18:03] <FromDiscord> <Yardanico> that's related to nimsuggest actually
[06:18:06] <FromDiscord> <huantian> ah
[06:18:11] <FromDiscord> <Yardanico> it doesn'
[06:18:21] <FromDiscord> <Yardanico> (edit) "doesn'" => "doesn't give the type info in the declaration"
[06:19:02] <FromDiscord> <huantian> that's mildly annoying
[06:19:44] <FromDiscord> <gogolxdong (liuxiaodong)> How to serve large file downloading with Jester?
[06:28:23] <FromDiscord> <Marisol> If it's static file just serve it via nginx
[06:30:34] <FromDiscord> <Marisol> Or if you really want to use jester for it try to put them to ./public dir
[06:39:44] <FromDiscord> <gogolxdong (liuxiaodong)> sent a code paste, see https://play.nim-lang.org/#ix=3Iyc
[06:40:01] <FromDiscord> <gogolxdong (liuxiaodong)> Is this possible with staticDir set to getCurrentDir()
[06:40:59] <FromDiscord> <gogolxdong (liuxiaodong)> file is about 7GB
[06:56:43] <FromDiscord> <XeroOl> I've got a feature / change suggest for nim
[06:57:17] <FromDiscord> <XeroOl> I just pulled a repo from the internet, and they had a config.nims file that would check for an error condition and abort
[06:58:02] <FromDiscord> <XeroOl> and it called `quit("helpful error message here")`
[06:58:24] <FromDiscord> <XeroOl> in the output of nimble, I actually missed the error message because the stack trace was in bold and the message wasn't
[06:58:40] <FromDiscord> <XeroOl> would it be possible to make that message be highlighted or bold or more emphasized in some way?
[07:00:12] <FromDiscord> <Sabena Sema> In reply to @Marisol "What's nim's equivalent of": it should be possible to write a type like C++'
[07:00:15] <FromDiscord> <XeroOl> Here's an image of the output (on discord, might not send) https://media.discordapp.net/attachments/371759389889003532/920880478159011870/unknown.png
[07:00:17] <FromDiscord> <Sabena Sema> (edit) "C++'" => "C++'s `std::any`"
[07:00:32] <FromDiscord> <XeroOl> notice how easy it is to miss the "helpful error message" for the rest of the stack trace
[07:00:46] <FromDiscord> <XeroOl> (edit) "send)" => "send to libera / gitter)"
[07:00:53] <FromDiscord> <XeroOl> (edit) "Here's an image of the output (on discord, ... might" 03added "it"
[07:01:19] <FromDiscord> <Sabena Sema> but, ultimately, object variants are usually used, even map<any, dynamic> in most dynamic langs are such because most dynamic langs have "any" types that have special branches for small primitive types
[07:04:12] <FromDiscord> <Sabena Sema> In reply to @XeroOl "Here's an image of": you can use the terminal package to get style codes to make that bold
[07:05:03] <FromDiscord> <Sabena Sema> something like `quit(ansiStyleCode(styleBright) & "text")`
[07:05:11] <FromDiscord> <huantian> It wouldn't be good to force boldness on all `quit()`s
[07:05:23] <FromDiscord> <Sabena Sema> oh, you'd need to reset the style too or else everything will be bold after running your program
[07:05:30] <FromDiscord> <huantian> so that wouldn't be an option, you'd have to do it manually like above
[07:06:00] <FromDiscord> <Sabena Sema> quit(string,...) is just a shortcut for echo(string); quit
[07:06:00] <FromDiscord> <XeroOl> is there a way to not print the stack trace at all?
[07:06:09] <FromDiscord> <Sabena Sema> you can write your own function that calls writeStyled then quits
[07:06:55] <FromDiscord> <XeroOl> from what I can tell there's no way to return an error code but supress the stack trace
[07:08:09] <FromDiscord> <XeroOl> it just seems strange that a message that's meant to go to the user is supressed by the noise of the stack trace in one instance
[07:08:13] <FromDiscord> <XeroOl> anyway thank you very much
[07:08:36] <FromDiscord> <XeroOl> (edit) "one" => "this"
[07:15:39] <FromDiscord> <Marisol> @Yardanico @Sabena Sema I haven't understand object variants yet but I found `std/tables`, I can do map<string, string> for now! 😆
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:55:29] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:03:46] <FromDiscord> <Sabena Sema> what's the name of that lib where you supply like patch files and it runs c2nim for you on import?
[08:05:02] *** Joins: xet7 (~xet7@user/xet7)
[08:09:34] <FromDiscord> <huantian> Man why does dimscord have to use snake case for attributes
[08:10:07] <FromDiscord> <huantian> there's probably some reason that I don't know but still↵kind of a pain
[08:12:17] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:12:37] *** Quits: jmdaemon (~jmdaemon@142.207.63.60) (Ping timeout: 240 seconds)
[08:13:31] <FromDiscord> <Elegantbeef> How is it a pain?
[08:17:34] <FromDiscord> <Sabena Sema> you don't need to use snake case to refer to them if you don't want to
[08:18:10] <FromDiscord> <Sabena Sema> `m.channel_id` is the same as `m.channelId` in nim
[08:18:56] <FromDiscord> <Elegantbeef> Odd that feature is one of the most complained about, but also often unknown
[08:19:07] <FromDiscord> <Sabena Sema> heh yeah
[08:19:11] <FromDiscord> <Sabena Sema> I like it
[08:19:28] <FromDiscord> <Sabena Sema> although I also liked the old fully insensitive `TFoo`, `RFoo` thing
[08:19:45] <FromDiscord> <Sabena Sema> esp because it discouraged writing ref objects needlessly
[08:19:51] <FromDiscord> <Sabena Sema> (edit) "needlessly" => "needlessly, sorta"
[08:20:12] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:20:26] <FromDiscord> <Sabena Sema> idk if vscode-nim has an option to pick which one you like
[08:20:47] <FromDiscord> <Elegantbeef> It doesnt, i did have a start of it which seemed to work
[08:21:52] <FromDiscord> <Elegantbeef> Though i think there is the view it should be configurable for your nimsuggest/compiler
[08:22:10] <FromDiscord> <Sabena Sema> I thought whitespace sensitive precedence was cool too
[08:22:25] <FromDiscord> <Sabena Sema> nim's was less out there than what Fortress did
[08:22:28] <FromDiscord> <Elegantbeef> What's that in english?
[08:23:35] <FromDiscord> <Sabena Sema> there used to be an option to make `a+b  c` parse as `(a+b)c`
[08:23:48] <FromDiscord> <Elegantbeef> Ah
[08:23:51] <FromDiscord> <Sabena Sema> each power of two spaces would increase precedence by 1
[08:24:04] <FromDiscord> <Elegantbeef> Odd but interesting
[08:24:32] *** Quits: GnuYawk (~GnuYawk@user/gnuyawk) (Quit: GnuYawk)
[08:24:44] <FromDiscord> <Rika> In reply to @Sabena Sema "there used to be": That's almost totally crazy lmao
[08:24:46] <FromDiscord> <Sabena Sema> Fortress was a sun research project (designed by Guy Steele!) and let you overload whitespace
[08:24:50] *** Joins: GnuYawk (~GnuYawk@user/gnuyawk)
[08:24:58] <FromDiscord> <Rika> That sounds like too much I don’t know
[08:25:02] <FromDiscord> <Sabena Sema> so you could have f(a, b) and f a, b etc do different things
[08:25:11] <FromDiscord> <Sabena Sema> and also you could have ab multiply a and b
[08:25:18] <FromDiscord> <Elegantbeef> That's crazy
[08:25:22] <FromDiscord> <Sabena Sema> yeah, the thing fortress did was pretty out there
[08:25:28] <FromDiscord> <Elegantbeef> Noob traps left/right 😀
[08:25:37] <FromDiscord> <Sabena Sema> but the rules weren't that bad
[08:26:00] <FromDiscord> <Elegantbeef> It makes sense, but it's pretty wacky
[08:26:04] <FromDiscord> <Sabena Sema> I mean, it's designed to allow APL style programming, but also allow you do write more structured library code
[08:26:38] <FromDiscord> <Sabena Sema> yeah, it's wacky and provokes a very strong negative reaction in most programmers
[08:26:42] <FromDiscord> <Sabena Sema> but I think it was a neat idea
[08:27:19] <FromDiscord> <Rika> It's a neat idea but it's doubtful it would be useful in reality
[08:27:29] <FromDiscord> <Sabena Sema> the idea behind nim's whitespace thing was to simplify precedence rules esp w.r.t. user defined operators
[08:28:23] <FromDiscord> <Sabena Sema> fortress had a bunch of cool stuff
[08:29:23] <FromDiscord> <huantian> In reply to @Elegantbeef "How is it a": It's a pain because I keep changing vscode's autocomplete ↵though --styleCheck:hint is helpful for when I forget
[08:30:29] <FromDiscord> <huantian> I meant to try to see if I could finish the case converter but then I died (mentally)
[08:32:48] *** Joins: jmdaemon (~jmdaemon@142.207.76.239)
[08:32:56] *** Quits: jmdaemon (~jmdaemon@142.207.76.239) (Remote host closed the connection)
[08:33:12] *** Joins: jmdaemon (~jmdaemon@142.207.76.239)
[08:42:13] *** Quits: jmdaemon (~jmdaemon@142.207.76.239) (Quit: ZNC 1.8.2 - https://znc.in)
[08:48:02] *** Joins: jmdaemon (~jmdaemon@142.207.76.239)
[08:49:30] <FromDiscord> <gogolxdong (liuxiaodong)> Jester sendFile is different from how nginx does.
[08:50:53] <FromDiscord> <gogolxdong (liuxiaodong)> It seems cannot serve such large file.
[08:54:06] *** Quits: jmdaemon (~jmdaemon@142.207.76.239) (Quit: ZNC 1.8.2 - https://znc.in)
[08:54:54] *** Joins: vicfred (~vicfred@user/vicfred)
[08:57:22] *** Joins: jmdaemon (~jmdaemon@142.207.76.239)
[08:59:10] *** Quits: jmdaemon (~jmdaemon@142.207.76.239) (Client Quit)
[09:01:18] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:30:32] <FromDiscord> <Marisol> Yeah and probably no resume support. Definitely use nginx for static files, use jester to send dynamic data
[09:31:12] <FromDiscord> <spazzy> so i found another C library i could try to translate that does the same thing but its a full program instead of a single header file
[09:31:30] <FromDiscord> <spazzy> which do you think would package better
[09:39:06] *** Joins: gshumway (~gshumway@user/gshumway)
[09:40:11] <FromDiscord> <Rika> You can always convert full programs into libraries
[09:43:46] <FromDiscord> <Sabena Sema> both should be fine, c2nim isn't really designed to handle translating full programs (although it can, sorta)
[09:45:06] <FromDiscord> <spazzy> i already need to do it with futhark anyway since c2nim really doesnt like variadic macros
[09:59:39] <FromDiscord> <Sabena Sema> what's futhark?
[10:01:54] <FromDiscord> <Elegantbeef> https://github.com/pmunch/futhark a C importer
[10:02:50] <FromDiscord> <Sabena Sema> ah that's cool
[10:04:02] <FromDiscord> <spazzy> unless theres a nim equivalent i dont know about
[10:04:22] <FromDiscord> <spazzy> then i could just c2nim the header file after changing literally 3 lines and it would work fine
[10:04:37] <FromDiscord> <Sabena Sema> it's typical to have to modify headers a bit before using c2nim
[10:04:52] <FromDiscord> <spazzy> i just dont know the nim equivalent of this
[10:05:13] <FromDiscord> <spazzy> https://gcc.gnu.org/onlinedocs/cpp/Variadic-Macros.html
[10:05:58] <FromDiscord> <impbox [ftsf]> nim templates are similar to macros, and they can take varargs
[10:07:30] <FromDiscord> <impbox [ftsf]> (edit) "nim templates are similar to ... macros," 03added "C"
[10:07:43] <FromDiscord> <impbox [ftsf]> nim macros are much more powerful
[10:07:56] <FromDiscord> <spazzy> so i could probably just change
[10:08:16] <FromDiscord> <spazzy> '''#define whatever(...)'''
[10:09:02] <FromDiscord> <spazzy> (edit) "'''#define whatever(...)'''" => "sent a code paste, see https://play.nim-lang.org/#ix="
[10:09:04] <FromDiscord> <spazzy> to
[10:10:01] <FromDiscord> <spazzy> sent a code paste, see https://play.nim-lang.org/#ix=3IyM
[10:10:16] <FromDiscord> <impbox [ftsf]> no.... what is the C macro you're trying to convert to nim?
[10:10:44] <FromDiscord> <impbox [ftsf]> you'll need to use nim's template syntax https://nim-lang.org/docs/manual.html#templates
[10:11:06] <FromDiscord> <spazzy> yeah i know i just glanced at it without copying the syntax right tbh
[10:12:18] <FromDiscord> <spazzy> sent a code paste, see https://play.nim-lang.org/#ix=3IyN
[10:12:34] <FromDiscord> <spazzy> (edit) "https://play.nim-lang.org/#ix=3IyN" => "https://play.nim-lang.org/#ix=3IyO"
[10:14:40] <FromDiscord> <spazzy> or something close to that
[10:14:41] <FromDiscord> <spazzy> sent a code paste, see https://play.nim-lang.org/#ix=3IyP
[10:14:49] <FromDiscord> <Yardanico> we have `varargs` in Nim but that's mainly for C interop
[10:15:00] <FromDiscord> <Yardanico> well, actually not only for them, but yeah, it's not used often
[10:15:05] <FromDiscord> <Yardanico> but you can use them of course
[10:15:15] <FromDiscord> <spazzy> i mean im translating a c header file
[10:15:25] <FromDiscord> <impbox [ftsf]> for what purpose?
[10:15:29] <FromDiscord> <impbox [ftsf]> to wrap a c library?
[10:15:33] <FromDiscord> <spazzy> yeah
[10:15:48] <FromDiscord> <impbox [ftsf]> well you probably don't need that macro in the wrapper
[10:16:02] <FromDiscord> <spazzy> https://github.com/krychu/wfc
[10:16:06] <FromDiscord> <spazzy> it kinda relies on it
[10:16:59] <FromDiscord> <impbox [ftsf]> see that header file is not just a header
[10:17:08] <FromDiscord> <impbox [ftsf]> it's also an implementation file
[10:17:14] <FromDiscord> <spazzy> yeah
[10:17:37] <FromDiscord> <impbox [ftsf]> you only wrap the header bits
[10:17:41] <FromDiscord> <impbox [ftsf]> not the implementation bits
[10:18:06] <FromDiscord> <spazzy> which is why i was using futhark
[10:18:12] <FromDiscord> <impbox [ftsf]> all the bits inside #ifdef WFC_IMPLEMENTATION you can ignore
[10:18:25] <FromDiscord> <impbox [ftsf]> just wrap the few bits outside it
[10:19:03] <FromDiscord> <impbox [ftsf]> if you're going to wrap the implementation you may as well just reimplement it in nim
[10:20:15] <FromDiscord> <impbox [ftsf]> you only need to wrap lines 147..167
[10:22:08] <FromDiscord> <impbox [ftsf]> https://github.com/define-private-public/stb_image-Nim example of a header only c library wrapped in nim
[10:22:31] <FromDiscord> <spazzy> thats actually really convenient if i wanted to wrap the whole thing
[10:22:53] <FromDiscord> <impbox [ftsf]> though it goes a fair bit further than the minimum by making nice nimmy functions
[10:23:06] <FromDiscord> <spazzy> since the wfctool.c relies on stb_image
[10:23:43] <FromDiscord> <impbox [ftsf]> but wfctool isn't a library, so you don't need to wrap it
[10:23:59] <FromDiscord> <spazzy> yeah i know, i mean if i wanted to just rewrite the thing
[11:18:27] *** Joins: PMunch (~PMunch@user/pmunch)
[11:24:57] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[11:31:33] *** Joins: PMunch (~PMunch@user/pmunch)
[12:26:06] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Ping timeout: 260 seconds)
[12:40:01] <FromDiscord> <Michal58> In reply to @Elegantbeef "https://github.com/pmunch/futhark a C importer": Huh I thought you people are talking about the programming language and was rather confused.
[12:47:53] <PMunch> A lot more people have heard of Futhark the programming language than I first anticipated..
[12:48:25] <FromDiscord> <Elegantbeef> rename it to "No not that Futhark"
[12:50:20] <FromDiscord> <Rika> PMunch more likely that a search yields the language first
[12:50:22] <madprops> never heard of it
[12:51:21] <madprops> that's a nice looking readme PMunch 
[12:51:47] <PMunch> @Rika, yeah that makes sense. Just have to make Futhark more popular I guess :P
[12:51:52] <PMunch> madprops, thank you :)
[12:56:47] <FromDiscord> <Michal58> In reply to @Rika "PMunch more likely that": I wasn't googling but might be the case in general
[12:59:18] <FromDiscord> <Michal58> I have futhark - the lang only as the last link on the 3rd page on Google
[13:01:15] <PMunch> What are you first three pages filled with? Info about the real Futhark stuff?
[13:05:43] <madprops> i get an elder, runes, and the lang, on first page
[13:06:22] <PMunch> The elder Futhark is just the old runic alphabet, so both those first ones are about runes
[13:07:49] <madprops> last commit on github 2 hours ago, the lang
[13:08:06] <PMunch> Oh yeah, it is an actively developed language
[13:08:13] <PMunch> Just didn't think it was that well known
[13:08:40] <FromDiscord> <Michal58> In reply to @PMunch "What are you first": Yeah basically
[13:09:02] <FromDiscord> <Michal58> In reply to @PMunch "Just didn't think it": I know it from the context free YT channel
[14:01:23] <FromDiscord> <Tanguy> Is there a way to read a file from nimscript?
[14:02:28] <PMunch> readFile doesn't work?
[14:02:44] <FromDiscord> <Tanguy> `Error: undeclared identifier: 'copyMem'`
[14:03:14] <FromDiscord> <Tanguy> Ah, it works on devel but not on 1.2
[14:03:44] <PMunch> Works for me on 1.2 as well..
[14:04:31] <PMunch> But it appears to be a special `readFile` and not the one from the `os` module as I get `/tmp/test.nims(1, 8) Warning: imported and not used: 'os' [UnusedImport]` on 1.2 but not on 1.6
[14:05:13] <FromDiscord> <Tanguy> Mhh, it's broken on my script because of  `import json`
[14:05:13] <FromDiscord> <Elegantbeef> Readfile isnt in os
[14:05:42] <PMunch> Oh, you're right
[14:05:53] <PMunch> Why isn't it shown as not used for 1.6 then?
[14:06:22] <FromDiscord> <Elegantbeef> Usage bug possibly??
[14:06:53] <PMunch> Or just the output flags for `nim e` have changed
[14:07:49] <FromDiscord> <Tanguy> So import json / parseJson / `from json import parseJson` breaks it↵I'm back to parsing manually I guess
[14:08:21] <FromDiscord> <Rika> Somewhat odd
[14:09:01] <FromDiscord> <Elegantbeef> https://play.nim-lang.org/#ix=3Izp indeed
[14:09:52] <FromDiscord> <Elegantbeef> The copymem error sounds like you're using a procedure that uses copymem, are you sure you've narrowed where it comes from?
[14:10:02] <FromDiscord> <Tanguy> Playground uses nimscript?
[14:10:14] <FromDiscord> <Tanguy> Oh no, const, ok
[14:10:23] <FromDiscord> <Elegantbeef> I assign an expression to a const which is done using nimscript
[14:10:40] <FromDiscord> <Elegantbeef> Or are we talking about an embedded VM?
[14:11:01] <FromDiscord> <Tanguy> A nimble file but I think that's the same as nimscript
[14:11:10] <FromDiscord> <Elegantbeef> Yea it's nimscript
[14:11:18] <FromDiscord> <Elegantbeef> Which is the same as compile time evaluation
[14:11:29] <FromDiscord> <gogolxdong (liuxiaodong)> How to convert array to string?
[14:11:44] <FromDiscord> <gogolxdong (liuxiaodong)> array/seq to string
[14:12:39] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3Izq
[14:12:40] <FromDiscord> <Tanguy> Must not by exactly the same then
[14:13:08] <FromDiscord> <Elegantbeef> you're compiling a nimscript ifle
[14:13:31] <FromDiscord> <Elegantbeef> Use `nim e test.nims`
[14:13:42] <FromDiscord> <Tanguy> Same
[14:13:51] <FromDiscord> <Tanguy> Oh but in your test you don't use readFile, only json
[14:13:53] <FromDiscord> <Elegantbeef> Wait `nim c .nims` evaluates it aswell i guess
[14:14:07] <FromDiscord> <Tanguy> It's readFile + import json which fails
[14:14:14] <FromDiscord> <ynfle (ynfle)> @gogolxdong with the ``$` ` operator
[14:14:25] <FromDiscord> <Elegantbeef> `Error: unhandled exception: cannot open: test.json [IOError]`
[14:14:27] <FromDiscord> <Elegantbeef> Nope
[14:14:33] <FromDiscord> <Elegantbeef> Works fine
[14:15:04] <FromDiscord> <Elegantbeef> What's your nim version?
[14:15:07] <FromDiscord> <Tanguy> 1.2.14
[14:15:20] <FromDiscord> <Tanguy> Latest and greatest 🙂
[14:15:27] <FromDiscord> <gogolxdong (liuxiaodong)> `$` converts to the format of `@[]` / `[]` string
[14:15:32] <FromDiscord> <Elegantbeef> That's not latest
[14:15:33] <FromDiscord> <Elegantbeef> Latest is 1.6
[14:15:36] <FromDiscord> <Tanguy> I know
[14:15:55] <FromDiscord> <Rika> Gogo if you want quick and dirty you can cast between them
[14:15:57] <FromDiscord> <Elegantbeef> That bug has been fixed in 1.6 if you look at the error it was cause something was using `streams` and didnt handle it for nimscript
[14:15:58] <FromDiscord> <ynfle (ynfle)> @gogolxdong So what to you want?
[14:16:07] <FromDiscord> <Rika> If you want correct you have to iterate and make a new container
[14:17:09] <FromDiscord> <gogolxdong (liuxiaodong)> string data
[14:17:12] <FromDiscord> <Elegantbeef> So i guess if you insist on using 1.2 find the PR that fixed it and request it be backported
[14:17:46] <FromDiscord> <ynfle (ynfle)> @gogolxdong Can you be more specific? I don't know what string data means. A string representation of the seq/array?
[14:18:07] <FromDiscord> <Rika> @gogolxdong did you see what I said?
[14:18:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Izr
[14:18:23] <FromDiscord> <Tanguy> But I don't understand why I can't repro it in the playground
[14:18:40] <FromDiscord> <Elegantbeef> What do you mean?
[14:19:35] <FromDiscord> <gogolxdong (liuxiaodong)> I found some similiar question in hisotry , some one uses arr.mapIt(char it).join
[14:19:49] <FromDiscord> <Tanguy> sent a code paste, see https://play.nim-lang.org/#ix=3Izs
[14:20:08] <FromDiscord> <Elegantbeef> Sounds like a regression with streams
[14:20:29] <FromDiscord> <Tanguy> Yeah but the playground is using the same 1.2.12 as me, no?
[14:20:42] <FromDiscord> <Elegantbeef> Thought you said you were using 1.2.14
[14:20:50] <FromDiscord> <gogolxdong (liuxiaodong)> which is better, copyMem or mapIt.join
[14:20:52] <FromDiscord> <Tanguy> I have the same issue on 1.2.12
[14:20:58] <FromDiscord> <Elegantbeef> As do i
[14:21:10] <FromDiscord> <Elegantbeef> Playground might be running arm which might behave differently?
[14:21:24] <FromDiscord> <Elegantbeef> I dont know, all i know is it's fixed in modern version so something needs backported/fixed
[14:21:28] <FromDiscord> <Elegantbeef> Anyway i need to go to sleep
[14:21:46] <FromDiscord> <Tanguy> Mhh yeah, weird. thanks
[14:22:39] <FromDiscord> <Rika> Copy is better
[14:25:32] <PMunch> gogolxdong_(liuxiaodong), if you want to convert a seq[char] to a string you can just do a cast
[14:25:45] <FromDiscord> <Rika> Am I being ignored globally or what
[14:25:46] <PMunch> It's a bit hacky, but they are essentially the same type
[14:25:56] <PMunch> @Rika, ignored?
[14:26:09] <PMunch> Oh, you already said that :P
[14:26:12] <PMunch> Sorry I was AFK
[14:26:14] <FromDiscord> <Rika> In reply to @Rika "Gogo if you want": Yeah I said it a while ago
[14:26:34] <FromDiscord> <Rika> I asked because no one seemed to acknowledge that I was here lol
[14:27:48] <PMunch> !eval echo hostCPU & " is the CPU on the playground ElegantBeef"
[14:27:51] <NimBot> amd64 is the CPU on the playground ElegantBeef
[14:35:21] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[14:38:58] *** Joins: toothlessgear (2c15493d69@user/toothlessgear)
[14:53:13] <FromDiscord> <krisppurg> In reply to @huantian "Man why does dimscord": True, but I did it to also match discord's snake case json fields (which is used for json.to) but also to make it look a little nicer. Then again you can write attributes as in camelCase.
[15:12:28] <FromDiscord> <ynfle (ynfle)> @gogolxdong What do you want? If you  `[1, 2, 3, 4] -> "1234"`then`sequtils.mapIt` & `strutils.join` if you want `['1', '2', '3']` the you can use join with out mapIt. You can also do copymem and cast, but cast isn't stable. ie. it's an implementation detail (may apply to copymem) as well
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:36:42] <PMunch> I still hold that we should create a wrapper for `cast[string]` and `cast[seq[char/uint8/int8/byte]]` so that if this implementation detail changes then it won't break every program who depends on this behaviour
[16:09:22] *** Joins: pro (~pro@user/pro)
[16:09:29] *** Quits: pro (~pro@user/pro) (Client Quit)
[16:45:33] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3IzQ
[16:53:06] <FromDiscord> <el__maco> this is correct
[16:53:24] <FromDiscord> <el__maco> its called short circuit evaluation
[16:54:40] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3IzS
[16:55:36] <FromDiscord> <el__maco> assuming the official nim tutorial knows the semantics, the answer is yes i.e. you don't need to do that 😅
[16:56:23] <FromDiscord> <hmmm> haha let's hope, I'll let you know if the entire mess will take fire and burn out
[16:57:18] <FromDiscord> <el__maco> easy enough to verify https://play.nim-lang.org/#ix=3IzT
[17:05:56] *** Joins: rockcavera (~rc@192.12.112.199)
[17:05:56] *** Quits: rockcavera (~rc@192.12.112.199) (Changing host)
[17:05:56] *** Joins: rockcavera (~rc@user/rockcavera)
[17:10:42] *** Joins: lumo_e (~enrico@151.29.48.90)
[17:20:19] <FromDiscord> <IsaacPaul> sent a code paste, see https://play.nim-lang.org/#ix=3Ivi
[17:20:41] <FromDiscord> <IsaacPaul> with optimizations on (o2 or o3)
[17:24:40] <FromDiscord> <el__maco> the compiler would have to be extra sure thing2() absolutely does not have side effects
[17:25:36] <FromDiscord> <el__maco> that said I it wouldn't surprise me if some compilers would postpone the call
[17:32:10] *** Joins: arkurious (~arkurious@user/arkurious)
[17:35:51] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[18:13:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[18:23:02] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[18:37:20] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[18:48:11] *** Joins: pro (~pro@user/pro)
[18:48:45] <FromDiscord> <eyecon> What kind of solutions do we have currently for a previously unknown number of tasks, which should run "concurrently" (suspending as in Kotlin-like coroutines or blocking) and can spawn other tasks, and which need to pass information back (not just at completion but also in between)?
[18:49:13] <FromDiscord> <eyecon> I know threadpool which spawns threads, and `Channel`s as message-passing mechanism
[18:50:22] <FromDiscord> <eyecon> Do we have maybe a similar information passing mechanism which can be used with single-threaded concurrent (async/await) code? AFAIK the channels are not designed for non-multithread applications
[18:52:30] <FromDiscord> <JSONBash> There is a project to implement a CPS runtime (https://github.com/nim-works/cps) but it is a work in progress
[18:53:24] <FromDiscord> <JSONBash> other than that, there is asyncdispatch which uses async/await
[18:54:23] <FromDiscord> <JSONBash> but I don't know of any good threaded and async solutions (would like to know one too)
[18:54:41] <FromDiscord> <JSONBash> you could look at httpbeast and see how it has implemented a threaded and async system?
[18:55:27] <FromDiscord> <eyecon> In reply to @JSONBash "There is a project": Full-blown CPS is nice for sure, let's hope it's complete soon
[18:55:41] <FromDiscord> <eyecon> In reply to @JSONBash "you could look at": Good thinking, I'll do that, thanks
[18:56:20] <FromDiscord> <eyecon> In reply to @JSONBash "other than that, there": But no way to pass information between the concurrent running paths?
[18:57:04] <FromDiscord> <exelotl> @eyecon the actual built-in language mechanism for resumable functions is "closure iterators" - this is what async/await are built on-top of
[18:57:08] <FromDiscord> <exelotl> https://nim-lang.github.io/Nim/manual.html#iterators-and-the-for-statement-firstminusclass-iterators
[18:58:43] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[18:59:15] <FromDiscord> <eyecon> Yes, I saw that, I think that is _almost_ CPS but not quite
[18:59:47] <FromDiscord> <eyecon> Previously I dabbled in Kotlin and this is solved really really well there
[19:00:15] <FromDiscord> <eyecon> So I'm looking for things I can put together to achieve something similar
[19:00:35] <FromDiscord> <fumamatar> sent a code paste, see https://play.nim-lang.org/#ix=3IAD
[19:00:50] <FromDiscord> <fumamatar> (edit) "https://play.nim-lang.org/#ix=3IAF" => "https://play.nim-lang.org/#ix=3IAE"
[19:04:03] <FromDiscord> <eyecon> In reply to @JSONBash "There is a project": This looks actually quite good, thanks again
[19:08:13] <FromDiscord> <can.l> In reply to @fumamatar "Sorry for interrupting you": A seq is not just a pointer (it also has fields for length and capacity), this is why simply casting a pointer to a seq will not give you a valid seq object. One solution is to use copyMem to copy your ethernet_header into the buffer. In this case no call to alloc is necessary.
[19:13:15] <FromDiscord> <fumamatar> Oh that makes sense, thank you. copyMem sounds good, would there otherwise be something analogue to a char in c?
[19:14:41] <FromDiscord> <can.l> There is ptr byte and ptr UncheckedArray[byte], but I would not recommend using it in most cases.
[19:15:18] <FromDiscord> <fumamatar> oh well that makes sense, its quite literally the same as char
[19:15:29] <FromDiscord> <fumamatar> thank you for your help, i appreciate it !
[19:18:15] <FromDiscord> <Fish-Face> why is `--gc:none` slower than `--gc:orc` ... at least to me it seems that way, benching AoC problems
[19:25:31] <FromDiscord> <exelotl> could be that gc:orc is allowing you to reuse the same block of memory that was just freed (which may be cached or something) while gc:none forces new blocks to be allocated every time
[20:00:49] *** Quits: fputs (~fputs@67.59.83.166) (Ping timeout: 250 seconds)
[20:05:23] *** Joins: src (~src@user/src)
[21:40:40] <FromDiscord> <hmmm> is aoc still going? I'm not hearing updates from pmunch
[21:41:15] <FromDiscord> <hmmm> !sheerluck !updatestatus
[21:44:02] <FromDiscord> <el__maco> I thought he said he's travelling and won't be streaming
[21:44:18] <FromDiscord> <hmmm> ah ok 👍
[21:44:32] <FromDiscord> <hmmm> who is leading nim leaderboard
[21:45:15] *** Joins: jmdaemon (~jmdaemon@142.207.63.60)
[21:59:18] <FromDiscord> <kevin> Thoughts about nesting Nim func/proc for functions only used within that proc?
[22:00:22] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3IBv
[22:00:42] <FromDiscord> <kevin> if the local proc is only used within the greater scoped proc is this a good idea
[22:01:10] <FromDiscord> <kevin> or should you just keep them in the same scope level
[22:01:50] <FromDiscord> <kevin> sent a code paste, see https://play.nim-lang.org/#ix=3IBx
[22:01:59] <FromDiscord> <kevin> (edit) "https://play.nim-lang.org/#ix=3IBx" => "https://play.nim-lang.org/#ix=3IBy"
[22:03:15] <FromDiscord> <Rosen> I like not polluting the global namespace so I'd always nest as long as I was SURE it wouldn't ever be reused in a different proc
[22:05:01] <NimEventer> New thread by Miran: Nim 1.2.16 released, see https://forum.nim-lang.org/t/8715
[22:05:42] <FromDiscord> <exelotl> both are acceptable, I do like nested procedures though, as they can make it easier to reason about the code (when you see an unexported function at the top level you have to figure out where is it used in the file - nested procedures simplify that)
[22:09:39] *** Joins: xet7 (~xet7@user/xet7)
[22:33:05] <NimEventer> New thread by Despam: Nim - shell, see https://forum.nim-lang.org/t/8716
[22:35:28] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=
[22:42:42] *** Joins: tombrick (~user@2601:2c5:600:bb8:f450:844b:8f39:d09f)
[22:43:59] <FromDiscord> <Michal58> my Nim is weird
[22:46:54] <FromDiscord> <Solitude> windows has 1 mb stack limit according to stackoverflow
[22:46:56] <FromDiscord> <el__maco> aren't nim arrays on the stack? Maybe asking for 2MB is too much
[22:47:01] <FromDiscord> <Solitude> you allocate 4 mb
[22:47:22] <FromDiscord> <el__maco> 4MB yes, I forgot the int is 64 bit
[22:47:53] <FromDiscord> <Michal58> ok thanks
[22:48:19] <FromDiscord> <Michal58> I just trying my original code in the playground and it worked first time
[22:48:25] <FromDiscord> <Michal58> i lost 2 hors to that
[22:48:27] <FromDiscord> <Solitude> playground runs on linux
[22:48:36] <FromDiscord> <Solitude> which has 8 mb stack limit by default
[22:48:39] <FromDiscord> <Michal58> In reply to @Solitude "playground runs on linux": ik that's what I'm saying
[22:49:16] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[22:49:17] <FromDiscord> <Michal58> how do I change the limit?
[22:52:18] <FromDiscord> <demotomohiro> I think you need to google "man gcc" and pass the gcc option via --passC.
[22:53:06] <FromDiscord> <demotomohiro> Or use seq instead of array.
[22:55:46] *** Joins: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[22:56:13] <FromDiscord> <Recruit_main707> id say once you are at 4mb you are most likely not gonna get any kind of performance improvements compared to using sequences
[22:56:28] <FromDiscord> <Recruit_main707> probably the opposite
[23:05:53] <FromDiscord> <Michal58> yeah, that makes sense
[23:13:02] <FromDiscord> <Michal58> Thank you everyone
[23:24:19] <tombrick> this compiles and works without examining the list of children, but obviously "children" ("para5") is meant to be some sort of unchecked array of Windows. is it possible to pass in something or cast it with the existing proc signature? https://termbin.com/dkcm
[23:29:41] <tombrick> i was trying to find some examples of UncheckedArray and types in similar function calls, too, without success
[23:37:37] *** Quits: lumo_e (~enrico@151.29.48.90) (Ping timeout: 240 seconds)
[23:38:19] <tombrick> oh! i think i got it with cast[ptr UncheckedArray[Window]](children)
[23:40:59] <FromDiscord> <Michal58> Would it be possible to say the error is due to exceeding the stack size limit in the error message? @Recruit_main707 @Solitude @elmaco
[23:44:12] <FromDiscord> <Recruit_main707> idk
[23:46:35] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[23:49:36] <FromDiscord> <Solitude> In reply to @Michal58 "Would it be possible": error message comes from os
[23:50:30] <FromDiscord> <Michal58> ok detect that at compilation time then
[23:50:40] <FromDiscord> <Michal58> at least give a warning
[23:50:54] <FromDiscord> <Michal58> ?
[23:52:02] <FromDiscord> <Solitude> ok
[23:52:49] *** Joins: lumo_e (~enrico@151.29.48.90)
