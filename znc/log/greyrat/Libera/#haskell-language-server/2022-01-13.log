[00:30:51] *** Quits: arrowd (~arr@2.94.236.140) ()
[00:57:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:57:40] <anton-latukha[m]> Support of 9.2 just merged: https://github.com/haskell/haskell-language-server/pull/2503
[01:38:31] <Hecate> hurray
[02:44:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:44:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:53:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:57:34] <anton-latukha[m]> Yeey, now official:
[02:57:34] <anton-latukha[m]> https://github.com/haskell/haskell-language-server/pull/2503
[02:57:47] <anton-latukha[m]> The GHC 9.2 support is merged.
[03:00:41] <anton-latukha[m]> (sadly, while I was trying to help, I was getting in the way more then helping, but I'm learning, I'm learning)
[06:34:17] <sooch_> Nice :)
[07:12:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:14:16] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[10:07:17] *** Quits: shapr (~user@2601:7c0:c202:5190:f73c:d98b:42b3:a084) (Ping timeout: 240 seconds)
[11:12:29] *** Joins: arrowd (~arr@2.94.236.140)
[11:14:01] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:29:35] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[11:40:40] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:42:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:47:44] *** Joins: juhp (~juhp@128.106.188.82)
[12:33:35] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[12:34:10] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:35:49] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[12:37:20] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:46:57] *** Quits: arrowd (~arr@2.94.236.140) ()
[12:47:08] *** Joins: arrowd (~arr@2.94.236.140)
[13:42:39] *** Joins: hololeap (~hololeap@user/hololeap)
[13:43:12] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:00:57] <jneira[m]> fendor: hope you dont mind i've activated master branch protection rules
[14:09:44] <fendor[m]> <jneira[m]> "fendor: hope you dont mind i'..." <- I don't mind, thank you! Did I try to commit to master by accident?
[14:11:49] <jneira[m]> no, no, i only saw your last pr and the merge button green without approvals or a green ci
[14:12:43] <jneira[m]> pure coincidence
[14:13:20] <jneira[m]> maybe the traffic does not worth install mergify
[14:13:20] <fendor[m]> fair, not sure though whether the approval constraint is really necessary, but let's see how it works out
[14:13:39] <fendor[m]> yeah, currently not. There is almost no traffic, it's fairly stable
[14:13:45] <jneira[m]> well it makes devs ask for reviews and even doing a quick one is good imo
[14:15:06] <jneira[m]> and you always can bypass it changing temporary branch rule to allow admins do merges
[14:15:15] <fendor[m]> that's indeed true, but since we both are essentially the only reviewers... however, documenting that we always want reviews is a good thing
[14:15:17] <jneira[m]> with the button red an all sort of things :-)
[14:16:34] <jneira[m]> all members of https://github.com/orgs/haskell/teams/haskell-ide are maintainers of the repo
[14:17:13] <fendor[m]> yeah, what I meant is that we are the only regular reviewers at the moment
[14:17:23] <jneira[m]> yeah
[14:17:40] <fendor[m]> but I agree that it is a nice thing to have, since it will probably change in the future
[14:18:01] <fendor[m]> i.e. I hope we aren't the only regular reviewers forever üòÄ
[14:18:19] <jneira[m]> we always can change the approvals thing therafter, but i would keep in any case ci checks, ensure the branch is update to master and protect master from pushes 
[14:18:38] <jneira[m]> fendor[m]: or even better, we have new ones :-) 
[14:19:20] <jneira[m]> do, the same thing
[14:19:20] <fendor[m]> exactly what I hope for!
[14:19:23] <jneira[m]> :-P 
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:21:13] <jneira[m]> dont want to pest you too much, but there is some progress in the `cabal info` front?
[14:21:58] <fendor[m]> none at all, unfortunately
[14:22:28] <fendor[m]> I still have a mental barrier, I don't know how to proceed sensibly
[14:23:42] <fendor[m]> cabal info, cabal meta-plugins, cabal-plan, all of these things could be combined... what is the scope, desired interaction, etc...
[14:24:03] <fendor[m]> I basically lack a vision
[14:26:50] *** Quits: arrowd (~arr@2.94.236.140) ()
[14:27:12] <jneira[m]> maybe we could start with the actual implementation of the existing pr?
[14:35:16] <fendor[m]> the implementation of what I care about is pretty much trivial (just extract the paths and vomit them out)
[14:35:51] <fendor[m]> however, getting it merged afterwards is more tricky üòÄ 
[16:19:03] <anton-latukha[m]> +====
[16:19:03] <anton-latukha[m]> I'm currently on the CI build failures in `master`. Checking-out what causes the breakages & how to fix it.
[16:31:18] <anton-latukha[m]> Yes. Reproduced the `9.0.1 <-> stylish-haskell` failure locally.
[16:31:31] <anton-latukha[m]> `stylish-haskell` CI tests only `8.8.3`, so ...
[16:31:48] <anton-latukha[m]> * tests only for `8.8.3`,, * `8.8.3`, but has `base <5` so ...
[16:32:39] <anton-latukha[m]> * <-> stylish-haskell 0.13` failure
[16:33:13] <anton-latukha[m]> Ah, you already opened: https://github.com/haskell/stylish-haskell/issues/378
[16:33:49] <jneira[m]> yeah
[16:34:12] <jneira[m]> but stylish-haskell should not be built for ghc-9.0.1
[16:34:45] <jneira[m]> we have the appropiate flag in the cabal.project to skip its build
[16:34:45] <anton-latukha[m]> & there is https://github.com/haskell/haskell-language-server/pull/2582
[16:35:21] <anton-latukha[m]> So, lets accumulate fixes in that PR then.
[16:36:59] <jneira[m]> hmm i see `-stylishhaskell` in the cabal file but it is being built anyways ü§¶‚Äç‚ôÇÔ∏è
[16:37:01] <anton-latukha[m]> jneira[m]: Just to recap: just built: `cabal build all --project-file=cabal-ghc901.project` on `master` & it builds with new `stylish-haskell`
[16:37:17] <jneira[m]> ya
[16:37:24] <jneira[m]> ugh
[16:37:25] <anton-latukha[m]> * just built locally: `cabal
[16:38:18] <jneira[m]> maybe my new code to copy cabal.project is broken
[16:39:08] <jneira[m]> i see `'cabal-ghc901.project' -> 'cabal.project'` in the setup log
[16:39:11] <anton-latukha[m]> I guess, presence of:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/d768d5770daf82bbfa0e672c13aff45a00ccbf75)
[16:39:41] <anton-latukha[m]> Overrides the  `-stylishhaskell` behavior in `9.0.1.project`.
[16:40:11] <anton-latukha[m]> s/behavior/setting/
[16:40:24] <jneira[m]> jumm it did not until now, for other packages
[16:40:40] <jneira[m]> allow-newer should not interfere with explicit cabal flags
[16:40:57] <jneira[m]> ..in the constraint section
[16:41:14] <jneira[m]> and https://github.com/haskell/haskell-language-server/blob/4ffdf45a390e93d02f5fb05ac8abd604becb809e/haskell-language-server.cabal#L300-L303 looks ok
[16:42:03] <anton-latukha[m]> If to remove that `allow-newer`:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/b2029de8d416962c9de416bd94ff6d741a6434a3)
[16:42:03] <jneira[m]> yeah
[16:42:03] <anton-latukha[m]> So it shows that it runs solver on `stylish-haskell` despite the flag.
[16:42:03] <jneira[m]> we want to make the solver happy, the solver takes in account all local packages
[16:42:41] <jneira[m]> but the build itself was not triggered thanks to the cabal flag until now
[16:43:45] <jneira[m]> and tactics in also in the build and should not
[16:44:15] <jneira[m]> haskell-language-server +ignore-plugins-ghc-bounds -stylishhaskell -tactic in cabal-ghc901.project
[16:44:27] <jneira[m]> * `haskell-language-server +ignore-plugins-ghc-bounds, * -stylishhaskell -tactic` in
[16:45:36] <jneira[m]> maybe all is the culprit
[16:45:43] <jneira[m]> i.e. `cabal build all`
[16:45:57] <jneira[m]> could you try locally without all?
[16:46:40] <jneira[m]> the test workflow was ok and it has no `call`
[16:46:49] <jneira[m]> s/call/all/
[16:47:45] <jneira[m]> if `all` ignore explicit flags in constraints we cant use it i am afraid
[16:48:01] <anton-latukha[m]> jneira[m]: Yes. It is what I wanted to write about in the beginning. The `all` seems to have some additional constranits. & despite Caching building test & bench separately, the `all` seems still imply some bigger requirements.
[16:48:18] <jneira[m]> it is so i would say it is a cabal bug
[16:48:20] <anton-latukha[m]> Maybe `all` builds the disabled targets?
[16:48:51] <jneira[m]> ignoring flags? that is my guess
[16:49:32] <jneira[m]> but that is no good, cabal should not ignore explicit, manual flags in any case
[16:50:19] <anton-latukha[m]> So then I scavage the Cabal bug reporting & ping related report or make a report into Cabal.
[16:50:23] <jneira[m]> hmm wait o minute
[16:50:34] <jneira[m]> maybe it is not a bug
[16:50:38] <jneira[m]> hmmm
[16:50:46] <jneira[m]> yeha it is not
[16:50:58] <jneira[m]> we are telling cabal which builds all packages
[16:51:09] <jneira[m]> and the constraints are in hls only
[16:51:32] <jneira[m]> so it is doing what we are telling it 
[16:51:53] <jneira[m]> we have to put the constraints in each plugin .cabal
[16:52:00] <jneira[m]> the flag i mean
[16:52:06] <jneira[m]> to make it not buildable
[16:52:23] <jneira[m]> and maybe we can remove them from hls itself
[16:52:31] <jneira[m]> which will be good imo
[16:53:00] <jneira[m]> but the quick fix is remove temporary `all`from caching
[16:53:25] <jneira[m]> if we are not gonna use the plugin in hls we dont have to cache its dependencies
[16:53:36] <jneira[m]> but we wanted all for some reason...
[16:53:38] <anton-latukha[m]> Yes, please bundle it in.
[16:53:42] <jneira[m]> yeah
[16:54:11] <anton-latukha[m]> jneira[m]: All allows to build all testsuite & all benchmark dependencies for all subprojects at once.
[16:54:47] <anton-latukha[m]> At least it is my understanding of it, you probably have better understanding of Cabal.
[16:56:53] <anton-latukha[m]> I kinda wanted to build everything & `--keep-going` all the time, so caching saves everything possible.
[16:56:53] <anton-latukha[m]> But then we removed the `allow-fail` option from the step, & `--keep-going` still returns the error code, which terminated the workflow & so the cache does not get saved.
[16:57:28] <jneira[m]> yeah it does but see: https://github.com/haskell/cabal/issues/6259
[16:57:58] <jneira[m]> --enable-benchmarks should work for the appropiate packages
[16:58:01] <jneira[m]> but it does not
[16:58:06] <anton-latukha[m]> It is a difficulty in GitHub CI, that it allows only `green` or `red` state & has no state of `notification/warning`. If there was `warning` state - we'd could `--keep-going` & still save the cache.
[16:58:20] <jneira[m]> ya
[16:59:28] <anton-latukha[m]> But if we pretend that failing workflow returns the Ok code - we would not be able to monitor the state of the CI workflow.
[17:02:54] <jneira[m]> i've removed all in https://github.com/haskell/haskell-language-server/pull/2567
[17:03:10] <jneira[m]> and i am testing caching in my branch: https://github.com/jneira/haskell-language-server/actions/runs/1692937550
[17:06:59] <anton-latukha[m]> <jneira[m]> "yeah it does but see: https://..." <- Yes, something like that.
[17:07:00] <anton-latukha[m]> Seems like Cabal indeed needs more hands.
[17:07:00] <anton-latukha[m]> Well, then I go for a daywalk & , in a couple of hours, would collaborate in https://github.com/haskell/haskell-language-server/pull/2567 but waiting for me is not that important, already seems we arrived at the causes & the current temporary fix.
[17:07:19] <anton-latukha[m]> * current temporary (or continious) fix.
[17:07:36] <anton-latukha[m]> * current temporary (or continuous) fix.
[17:43:40] <jneira[m]> marvellous https://github.com/lspitzner/brittany/issues/364
[17:59:58] <michaelpj[m]> wow, what a great response
[18:10:19] <fendor[m]> interesting, is lspitzner AWOL?
[18:59:21] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2b64:ce79:8ca:be50)
[19:30:13] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Quit: You have been kicked for being idle)
[20:13:20] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[20:34:13] <jneira[m]> I was a little bit worried by the Brittany thing cause I did not recognize the user who did the upload
[20:35:08] <jneira[m]> tfausak uploaded 0.14
[20:35:08] <jneira[m]> 0.0 with the same user name than github
[20:35:40] <michaelpj[m]> I think he's now a maintainer of brittany
[20:36:49] <Hecate> yes
[20:37:09] <jneira[m]> it seems so, so he should be admn of the repo or change it in hackage
[20:37:11] <jneira[m]> to make things clearer
[20:37:33] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2b64:ce79:8ca:be50) (Remote host closed the connection)
[20:38:35] <anton-latukha[m]> I'm in the middle of doing a rebase of https://github.com/haskell/haskell-language-server/pull/2567 on `master`. Should I rebase & force push, I always feel anctious in this situation, when I start to work in PR branch & need to go up the stream (force push someones PR to rebase), or how this culture goes in the project, maybe/probably `jneira`, you, would feel more comfortable doing it yourself.
[20:40:35] <anton-latukha[m]> In any case - that rebase may be basic step-by-step, but as a whole - be a bit a too complex rebase process to do by other person hands. 
[20:49:58] <jneira[m]> yeah don't worry
[20:54:17] *** Joins: shapr (~user@2601:7c0:c37c:46d0:fa29:61d1:1155:8385)
[21:11:50] <michaelpj[m]> if rebases become too complex I tend to just brutally squash everything down to one commit and then just do the rebase in one go. Nothing more annoying than having to resolve conflicts like 7 times throughout a rebase process...
[21:39:26] <jneira[m]> and we are squashing before merge so the history is not so important for master
[22:12:34] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[22:13:03] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:13:21] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[22:31:00] *** Joins: isovector1 (~isovector@172.103.216.166)
[22:31:23] <isovector1> i've got wingman compiling for 9.0.... but of course now there is 9.2 which breaks shit again
[22:31:26] <isovector1> what's the best path forward here
[22:32:08] <isovector1> the issue in particular is `ConPatIn` now needs exactprint annotations
[22:35:13] <isovector1> this is in Compat.Core
[22:35:22] <isovector1> but i suspect none of wingman has any chance of building against 9.2 due to the exactprint changes
[22:38:51] <michaelpj[m]> I think Pepe just ground through all the exactprint related issues everywhere else with lots of CPP :/
[22:39:00] <michaelpj[m]> not sure there's anything easier on offer
[22:45:03] <isovector1> maybe pepe could help me grind through this one too :)
[22:58:57] *** Quits: shapr (~user@2601:7c0:c37c:46d0:fa29:61d1:1155:8385) (Ping timeout: 240 seconds)
[23:26:14] <jneira[m]> isovector1: do you plan to add support for both in one go(pr)?
[23:27:15] <jneira[m]> maybe we could consider add 9.0 support separately, it would be a great outcome standalone :-)
[23:34:37] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:37:13] *** Joins: juhp (~juhp@128.106.188.82)
[23:56:51] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
