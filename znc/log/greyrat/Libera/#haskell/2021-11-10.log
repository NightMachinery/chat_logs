[00:00:09] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[00:00:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[00:01:11] <dsal> carbolymer: this is there commit where I did a bunch of that: https://github.com/dustin/mqtt-hs/commit/7668dcd8c2173f7703769e1b0044f80e0ae063a7
[00:01:49] <carbolymer> dsal: that's  suprisingly clean
[00:02:02] <sm> oh now.. I bet an accurate Lode Runner is quite hard
[00:02:08] <dsal> Looks like this was my bug fix: https://github.com/dustin/mqtt-hs/commit/50634bada037406bceba7ab13fd7632a97a2ff82
[00:02:26] <dsal> Stuff was getting parked in stm when a disconnection happened at exactly the right time.
[00:03:38] <dsal> The eventlog reader was a one off, but I think I still have it.
[00:04:14] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[00:04:17] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:06:32] *** Quits: mei3 (~mei@user/mei) (Ping timeout: 240 seconds)
[00:07:04] <carbolymer> I wonder if in those GHC events I would be able to find out where my thread gets stuck, it seems that's mostly log of events (like the name suggests), not sure if there's an event for "HALP I'M STUCK HERE FOR 4 HRS" from a thread
[00:07:38] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[00:08:29] *** hexeme is now known as ldlework
[00:08:41] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de)
[00:09:27] *** Quits: emf (~emf@2620:10d:c090:400::5:defd) (Read error: Connection reset by peer)
[00:09:29] *** Joins: emf_ (~emf@2620:10d:c090:400::5:defd)
[00:09:51] *** Joins: neurocyte0132889 (~neurocyte@212.232.89.58)
[00:09:51] *** Quits: neurocyte0132889 (~neurocyte@212.232.89.58) (Changing host)
[00:09:51] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[00:11:24] <dsal>  I can't remember what my thing did but it answered my question quickly.
[00:12:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:12:20] <dsal> You can add stuff like timeouts and extra info.
[00:12:45] <dsal> In my case, I think it was "where did the currently running threads start?"
[00:13:28] <dsal> Then I used my brain runtime to debug.
[00:14:29] *** Quits: emf_ (~emf@2620:10d:c090:400::5:defd) (Read error: Connection reset by peer)
[00:14:42] *** Joins: emf (~emf@2620:10d:c090:400::5:defd)
[00:17:11] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[00:17:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:18:35] *** Joins: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de)
[00:19:33] *** Quits: emf (~emf@2620:10d:c090:400::5:defd) (Read error: Connection reset by peer)
[00:19:52] *** Joins: emf (~emf@2620:10d:c090:400::5:defd)
[00:21:32] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c7149f82889e7e27a4cfa8d6.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[00:23:30] *** AlexNoo_ is now known as AlexNoo
[00:28:42] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:30:12] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:7f33:b84f:d388:a0fc)
[00:30:55] *** Quits: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2) (Read error: Connection reset by peer)
[00:31:02] *** Joins: emf_ (~emf@163.114.130.1)
[00:31:03] *** Joins: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2)
[00:32:11] *** Quits: emf (~emf@2620:10d:c090:400::5:defd) (Ping timeout: 245 seconds)
[00:32:17] <dsal> carbolymer: This was the hack I used to figure out what threads were running:  https://gist.github.com/dustin/2ca9e66543c4e5c5158650f790454a99
[00:32:58] <carbolymer> nice, thanks
[00:34:44] * dsal It's gross and I don't even know what it was supposed to do, but it did it.  :)
[00:36:06] *** Joins: x_kuru (~xkuru@user/xkuru)
[00:36:49] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:37:45] *** Quits: emf_ (~emf@163.114.130.1) (Ping timeout: 256 seconds)
[00:37:47] *** Joins: emf (~emf@2620:10d:c090:400::5:defd)
[00:38:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 250 seconds)
[00:39:00] *** Quits: kuribas (~user@ptr-25vy0i9fqz6dux8z18z.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[00:44:56] *** Quits: emf (~emf@2620:10d:c090:400::5:defd) (Read error: Connection reset by peer)
[00:44:57] *** Joins: emf_ (~emf@2620:10d:c090:400::5:defd)
[00:46:31] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[00:46:47] * shapr attaches a debugger to his brain
[00:48:51] *** Quits: gg (~gg@2a01:e0a:819:1510:4c29:c873:f42e:2b2) (Ping timeout: 245 seconds)
[00:50:01] *** Quits: emf_ (~emf@2620:10d:c090:400::5:defd) (Read error: Connection reset by peer)
[00:50:05] *** Joins: emf (~emf@163.114.132.5)
[00:50:55] <dsal> There's some ugly stuff in there.  Like, what's `\Event{evTime} -> evTime`
[00:51:54] *** Joins: Pickchea (~private@user/pickchea)
[00:52:35] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:55:25] *** Joins: emf_ (~emf@2620:10d:c090:400::5:4199)
[00:56:46] *** Quits: emf (~emf@163.114.132.5) (Ping timeout: 260 seconds)
[00:57:14] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[00:57:38] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 268 seconds)
[00:57:49] *** Joins: dolio (~dolio@130.44.130.54)
[00:59:05] *** Joins: cjb (~cjbayliss@user/cjb)
[01:02:12] <[exa]> dsal: field pattern?
[01:02:39] <[exa]> ah that was not a question. :D
[01:04:22] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[01:09:40] *** Quits: Topsi (~Tobias@dyndsl-095-033-024-160.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[01:13:20] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:7f33:b84f:d388:a0fc) (Quit: SeungheonOh)
[01:15:17] <carbolymer> ;)
[01:15:26] <carbolymer> dsal: but it works!
[01:15:58] *** Quits: cjb (~cjbayliss@user/cjb) ()
[01:16:01] <carbolymer> when I was doing java, I missed Haskell's abstractions
[01:16:09] <carbolymer> now I'm doing Haskell, I miss JVM instrumentation
[01:16:16] *** Joins: pavonia (~user@user/siracusa)
[01:17:13] <sm> ekg, any good ?
[01:17:43] *** Joins: cjb (~cjbayliss@user/cjb)
[01:18:03] <carbolymer> yeah, ekg is okayish
[01:19:13] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:20:27] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:25:47] <maerwald> iohk-monitoring-framework uses it
[01:26:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[01:27:24] <maerwald> https://github.com/input-output-hk/iohk-monitoring-framework/blob/master/plugins/backend-ekg/src/Cardano/BM/Backend/EKGView.lhs
[01:29:34] <carbolymer> that looks impressive
[01:29:49] <carbolymer> are they writing all their code as literate haskell?\
[01:30:36] <maerwald> it's probably one of their worst libraries
[01:30:38] <maerwald> :D
[01:30:46] <carbolymer> haha
[01:30:47] <carbolymer> why
[01:30:56] <maerwald> well, try to use it and check the documentation
[01:30:58] <carbolymer> I haven't figured out what it really does
[01:30:59] <carbolymer> though
[01:33:35] *** Joins: notzmv (~zmv@user/notzmv)
[01:33:51] *** Joins: biberu (~biberu@user/biberu)
[01:35:06] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:37:52] <dsal> carbolymer: When I started doing java, I missed squeak's instrumentation. heh
[01:37:54] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[01:37:59] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[01:38:31] <dsal> This is some stuff I was doing in haskell a couple weeks ago: https://usercontent.irccloud-cdn.com/file/8saPPh6O/ping.png
[01:39:12] *** Quits: biberu (~biberu@user/biberu) (Read error: Connection reset by peer)
[01:39:28] <carbolymer> dsal: that's nice, realy informative
[01:39:30] <dsal> I wrote some literate haskell in markdown at my last job.  It was pretty neat since our source browser rendered markdown and also the flow diagrams I was using inside of the file and stuff.
[01:40:20] <dsal> carbolymer: It's more than it appears at first!  The little /\ is pointing to when a postgres lock was acquired.  Understanding what the actual code is doing, you can tell exactly when a connection was acquired from a pool, what had it last, when it asked for a lock, when it got a lock, and how long each little piece of the transaction took.
[01:40:59] <dsal> Also, this kind of thing:  https://usercontent.irccloud-cdn.com/file/qpJ9Y6E1/query.png
[01:41:19] <carbolymer> wow
[01:41:55] <carbolymer> thats from output from event log, or -prof?
[01:42:00] <dsal> eventlog
[01:42:11] <carbolymer> that's a lot of data
[01:42:11] <carbolymer> nice
[01:42:13] *** Joins: zebrag (~chris@user/zebrag)
[01:42:55] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:c951:41b3:1b4a:c1f9)
[01:43:21] <dsal> This is opentelemetry.  It also covers distributed traces, though the viewing tool I was using can't actually show that.  You could trace a new connection being made to the DB back to the function that issued the request in another process.
[01:43:51] *** Joins: biberu (~biberu@user/biberu)
[01:44:20] <dsal> Yeah, I didn't even get a screenshot of that because this tool couldn't do it.
[01:44:45] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[01:49:56] <mark__> Still confused regarding WHNF. 1) Is a partially applied value constructor in WHNF, like (:) True ? 2) Is a lambda abstraction applied to an argument in WHNF, like (\x -> x) "A" ? 
[01:52:40] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[01:54:46] <mark__> I think the expression in "x = \(x :: Int) -> x" is in WHNF. There is nothing that could be evaluated but "seq x (); :sprint x" returns "x = _". Is this because a lambda is not showable?
[01:57:05] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 256 seconds)
[01:57:16] *** Joins: gg (~gg@2a01:e0a:819:1510:e434:efd5:edf7:7caa)
[01:58:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[02:05:21] <lyxia> Yeah
[02:05:27] <geekosaur> right, lambdas are in WHNF but there's nothing to show
[02:05:33] <geekosaur> they have to be applied
[02:09:44] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431)
[02:12:52] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:e9:abf1:b887:13fa) (Ping timeout: 268 seconds)
[02:13:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:15:54] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Quit: Leaving)
[02:16:41] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[02:17:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[02:18:17] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[02:19:44] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[02:21:26] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:28:04] <monochrom> Partially applied value constructor is translated to lambda, e.g., "(:) True" means \y -> True : y
[02:28:38] <byorgey> mark__: (1) yes, (2) no
[02:28:55] <monochrom> In fact let's not fear 0.  (:) = \x y -> x : y
[02:30:41] *** Quits: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net) (Ping timeout: 264 seconds)
[02:32:14] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 246 seconds)
[02:33:28] <remexre> are there any circumstances where (traceM "foo" >> undefined) would error, but not print the traceM?
[02:34:33] <mark__> So I never evaluate arguments unless I have to and i keep evaluating case expressions and applying my lambdas until I reach a value constructor or get "stuck" (too few arguments)?
[02:36:42] <monochrom> remexre: Yes, I think Control.Monad.State.Lazy may do that.
[02:39:48] *** Joins: vysn (~vysn@user/vysn)
[02:42:07] *** Quits: burnsidesLlama (~burnsides@dhcp168-027.wadham.ox.ac.uk) (Remote host closed the connection)
[02:43:28] <remexre> monochrom: how does that work? doesn't the trace need to get forced to tell if the LHS of >> is _|_ or not?
[02:43:48] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[02:44:08] *** Quits: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[02:46:45] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[02:47:01] <monochrom> Does >> of State.Lazy force the LHS of >> ?
[02:47:15] <monochrom> Does it even care?
[02:47:22] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[02:48:17] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 250 seconds)
[02:48:41] *** Quits: chele_ (~chele@user/chele) (Remote host closed the connection)
[02:50:54] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[02:51:10] <danso> would an equivalent definition for Alternative be `(Applicative f, forall a . Monoid (f a)) => Applicative f` with no methods? 
[02:51:47] <danso> this requires QuantifiedConstraints, but i am not aware of any drawbacks to enabling it 
[02:52:36] <hpc> there might be overlapping Monoid instances that depend on knowledge of a
[02:52:49] <remexre> monochrom: on phone so checking is slow, but it looks like it doesn't override it, and I think runStateT on the LHS should force it?
[02:52:51] <hpc> and do a different but valid thing
[02:52:56] <remexre> Which the (>>=) does
[02:53:14] <hpc> but probably yes if this is just "am i understanding Alternative correctly"
[02:53:28] <monochrom> Ugh phone is not a suitable medium for this kind of investigation.
[02:53:49] <remexre> Yeah... Heading home from work /shrug
[02:54:35] <monochrom> Pen and paper, however, is perfect for this kind of calculational work.
[02:56:11] <monochrom> A simplified version of Lazy.State's >>= is:  (State stf) >>= k = State (\s0 -> let (a, s1) = stf s0 in runState (k a) s1)
[02:57:24] <remexre> Right, and the traceM should trace when it matches against the State stf, right?
[02:57:32] <monochrom> If k = \_ -> undefined, calculate whether the above definition even cares what stf is.
[02:58:12] <monochrom> And let me remind you the semantics of let:
[02:58:22] <monochrom> > let (x,y) = undefined in 42
[02:58:23] <lambdabot>  42
[02:58:49] <monochrom> Even this:
[02:58:56] <monochrom> > let Just x = Nothing in 42
[02:58:57] <lambdabot>  42
[02:59:00] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:00:13] <monochrom> Also, "(State stf)" is a newtype wrapper, "(State stf) >>= ..." is as though "stf >>= ..."
[03:00:26] <remexre> Hm, okay...
[03:00:36] <monochrom> So, who forces stf again?
[03:00:48] <remexre> stf doesn't need to be forced
[03:01:06] <remexre> traceM x = trace x (pure ())
[03:01:16] <remexre> So to get the State it should force the trace
[03:02:04] <monochrom> OK, name me your favourite newtype wrapper that's on lambdabot. I'll show you what it really does.
[03:02:32] <remexre> Uh I do not know lambdabot well... Data.Functor.Identity.Identity?
[03:02:42] <monochrom> OK!
[03:02:53] <monochrom> > case undefined of Identity x -> 32
[03:02:55] <lambdabot>  32
[03:03:55] <remexre> Huh, I guess this kinda makes sense for newtypes...
[03:04:31] <monochrom> After type erasure it's just "case undefined of x -> 32"
[03:06:02] *** Quits: michalz (~michalz@185.246.204.61) (Remote host closed the connection)
[03:06:02] <monochrom> I ran into this once. My course material used to use newtype. One day I decided to s/newtype/data/ so I don't have to explain newtype to students. Then I got an unexpected bottom.
[03:06:12] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:06:35] <remexre> Okay, I guess that all makes sense, thanks! 
[03:07:26] <yin> > case undefined of StateT x -> 32
[03:07:28] <lambdabot>  32
[03:07:29] <yin> oh no
[03:07:43] *** Joins: biberu\ (~biberu@user/biberu)
[03:07:47] <remexre> Oof
[03:08:16] <danso> thanks hpc. with the overlapping instances, are you saying that for some `f`, `f Int` could have a difference Monoid instance than `f String` ?  
[03:08:29] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 256 seconds)
[03:08:37] <remexre> Also rip getting massive lag... Well, I'll check that my transformer stack has at least one strict monad in it when I'm back home, thanks
[03:09:17] <monochrom> Yeah if you just say "Control.Monad.State" you get the Lazy one, for example.
[03:09:25] *** Quits: nineonine (~nineonine@2604:3d08:7780:cd00:94f7:1c4f:2fa7:9763) (Remote host closed the connection)
[03:09:29] *** Joins: biberu- (~biberu@user/biberu)
[03:10:28] <monochrom> In retrospect I think that that decision was as naïve as defining foldl.
[03:11:27] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 268 seconds)
[03:12:32] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 240 seconds)
[03:14:44] *** Quits: biberu- (~biberu@user/biberu) (Ping timeout: 250 seconds)
[03:16:51] *** Joins: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de)
[03:19:42] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[03:21:28] <yin> monochrom: what do you mean?
[03:22:05] <Axman6> foldl is bad, lazy state by default is bad
[03:22:25] <yin> nooo
[03:23:26] <monochrom> Yeah, that.
[03:23:56] <yin> i like having to be explicit when we want strictness
[03:24:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[03:24:13] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[03:24:22] <Axman6> there are definnitely times where strictness by default is the right choice, and both of those are good examples
[03:24:46] <monochrom> What if I put it this way: For a long time, foldl' did not exist, that's the real naïvity.
[03:24:47] <Axman6> there's no reason for foldl to not be strict except in very rare, usually contrived examples
[03:25:12] <yin> i think defaults should be predictable
[03:25:25] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:25:41] <yin> if you know everything is lazy by default, you'll know when to require lazyness
[03:25:58] <yin> if not, you are in the dark
[03:26:12] <yin> s/lazyness/stricness
[03:26:22] <yin>            ^t
[03:26:34] *** Joins: pennychase[m] (~pennychas@2001:470:69fc:105::1:3043)
[03:26:48] *** Joins: biberu (~biberu@user/biberu)
[03:26:51] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 250 seconds)
[03:27:38] <Axman6> if you cvan think of an example where lazy foldl is useful, I will be impressed. The current one leads to unexpected (and hence, unpredictable) behaviour, which is very difficult to debug if you don't know about foldl's behaviour. You end up with stack overflows in completely unrelated parts of your program
[03:27:54] <monochrom> I can be talked into either having no defaults or having defaults aligning with majority use cases. But I am skeptical about having defaults aligning with ideology.
[03:27:59] <Cajun> "if you know everything is lazy...lazyness" i disagree. you may know strictness may be necessary for some semblance of performance, but not necessarily know exactly when strictness should be made explicit
[03:28:15] <Cajun> like "should i add bang patterns to this?"
[03:28:32] <monochrom> The time-proved retrospective observation is that foldl and State.Lazy have much fewer use cases.
[03:28:42] *** Parts: pennychase[m] (~pennychas@2001:470:69fc:105::1:3043) ()
[03:28:48] <monochrom> Similarly Data.Map.Lazy for example.
[03:29:10] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[03:29:22] <Axman6> "Shoukd I add a bang pattern to this?" The answer is always "yes" :P
[03:29:29] *** Joins: machinedgod (~machinedg@24.105.81.50)
[03:29:39] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:30:17] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[03:32:30] *** Joins: debclair (~debclair@157.100.93.61)
[03:32:51] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[03:34:31] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[03:35:11] <dsal> sum should be lazy.  If I only want to know a partial sum, I should be able to read part of the result.
[03:35:19] <monochrom> haha
[03:36:04] *** Joins: lambdandy[m] (~lambdandy@2001:470:69fc:105::1:3045)
[03:37:18] <dolio> That's the sort of methodology that made containers have a major performance issue at one point. :þ
[03:37:22] <Axman6> that's just scanl (+) 0
[03:38:10] <shapr> random question, is there already a utility that calculates a "rebuild score" from a set of cabal files?
[03:38:30] <sclv> what is a rebuild stor
[03:38:32] <shapr> I think I want a package graph
[03:38:44] <sclv> theres utils for that
[03:38:46] <monochrom> byorgey is now promoting Data.Map.Lazy again because it helps with many programming contest problems :)
[03:38:53] <shapr> sclv: any names / links?
[03:39:26] *** Quits: debclair (~debclair@157.100.93.61) (Quit: Leaving)
[03:40:24] <shapr> I want a score that gives a higher cost to long chains of dependencies, but less to packages that can be built in parallel.
[03:40:36] *** Joins: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net)
[03:40:45] * shapr thinks
[03:40:56] <yin> monochrom: have you checked his game out?
[03:41:02] <monochrom> No.
[03:41:05] <sclv> you can get dotfiles directly out of ghc-pkg
[03:41:09] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[03:41:12] <shapr> oh I didn't know that
[03:41:30] <yin> monochrom: https://github.com/byorgey/swarm
[03:42:11] <yin> #swarm here on libera
[03:42:13] <shapr> sclv: thanks!
[03:42:33] <yin> pretty cool
[03:45:58] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:48:02] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[03:48:41] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:50:23] *** Joins: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net)
[03:50:24] <dsal> Is it crazy to just be like, "I don't understand all the exceptions things so I'm going to run some code in an async and observe it" ?
[03:52:54] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[03:53:10] *** Joins: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net)
[03:53:54] *** Quits: wennefer0 (~wennefer0@c-73-69-143-60.hsd1.ma.comcast.net) (Remote host closed the connection)
[03:55:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:55:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:55:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:55:24] *** Joins: wroathe (~wroathe@user/wroathe)
[03:56:19] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[03:56:51] *** Quits: emf_ (~emf@2620:10d:c090:400::5:4199) (Read error: Connection reset by peer)
[03:57:02] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 240 seconds)
[03:58:24] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:02:05] *** Joins: emf (~emf@2620:10d:c090:400::5:f986)
[04:02:44] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:03:19] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[04:04:21] <monochrom> It is not crazy to use observations to improve understanding. (Most people are crazy to do the opposite direction.)
[04:05:26] <monochrom> But it may be less helpful to do that with async. (Threads are more basic and fewer moving parts.)
[04:05:34] *** Parts: hippoid (~hippoid@c-98-220-13-8.hsd1.il.comcast.net) ()
[04:08:33] *** Quits: psydurr (~psydurr@pool-141-152-27-2.rcmdva.fios.verizon.net) (Quit: Leaving)
[04:09:56] <dsal> Knowing what might be thrown and how to manage the case positively and negatively got super hard.  But it's trivial with an async.
[04:09:59] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[04:16:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:16:28] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[04:18:25] *** Quits: jkaye (~jkaye@2601:281:8300:7530:49b1:9f67:bcbc:61f) (Ping timeout: 250 seconds)
[04:20:06] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a)
[04:21:01] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 256 seconds)
[04:23:26] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:e1e5:75f2:6059:4431) (Ping timeout: 245 seconds)
[04:26:47] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[04:29:47] *** Quits: mmhat (~mmh@55d4bf19.access.ecotel.net) (Quit: WeeChat 3.3)
[04:31:13] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 256 seconds)
[04:36:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:38:27] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[04:39:38] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:43:02] *** Quits: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:48:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:52:44] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:56:09] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[04:58:02] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[05:00:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[05:09:40] *** Joins: sugar (~sugar@bras-base-hmtnon1497w-grc-21-70-26-153-130.dsl.bell.ca)
[05:10:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Quit: Leaving)
[05:11:52] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[05:17:16] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:17:16] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:17:16] *** Joins: wroathe (~wroathe@user/wroathe)
[05:18:09] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[05:20:28] *** Joins: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net)
[05:22:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[05:22:32] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 240 seconds)
[05:24:02] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Quit: Leaving)
[05:24:50] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6)
[05:27:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5d00:eb1a:26:b28a) (Ping timeout: 240 seconds)
[05:31:46] *** Quits: sugar (~sugar@bras-base-hmtnon1497w-grc-21-70-26-153-130.dsl.bell.ca) (Quit: Client closed)
[05:35:48] *** ezzieygu1wuf is now known as ezzieyguywuf
[05:38:11] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:c951:41b3:1b4a:c1f9) (Ping timeout: 264 seconds)
[05:45:14] *** Quits: xlei (znc@pool-68-129-84-118.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[05:50:52] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[05:55:14] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 246 seconds)
[05:55:31] *** Quits: ees (~user@pool-108-18-30-46.washdc.fios.verizon.net) (Remote host closed the connection)
[05:56:49] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[06:01:22] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[06:05:44] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Remote host closed the connection)
[06:05:53] *** Quits: johnjay (~pi@192.142.100.50) (Ping timeout: 250 seconds)
[06:07:52] *** Joins: alzgh (alzgh@user/alzgh)
[06:08:45] *** Joins: johnjay (~pi@192.142.100.50)
[06:09:54] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[06:13:33] *** Quits: cjb (~cjbayliss@user/cjb) ()
[06:25:02] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:26:03] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[06:26:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:26:46] *** Quits: xff0x (~xff0x@2001:1a81:536d:7000:f003:c1eb:d2a3:5377) (Ping timeout: 245 seconds)
[06:28:47] *** Joins: xff0x (~xff0x@2001:1a81:53aa:5400:49da:2933:d5c1:bd65)
[06:30:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[06:30:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[06:34:24] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:36:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd)
[06:40:02] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:ec9d:c0:f2e1:89a6) (Ping timeout: 240 seconds)
[06:42:27] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e)
[06:44:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:46:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:cc66:8cdf:6920:eedd) (Ping timeout: 264 seconds)
[06:48:00] *** Joins: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330)
[06:53:02] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 240 seconds)
[06:59:06] *** Joins: SeungheonOh (~Thunderbi@2600:1700:5168:1400:d0db:f0d9:c386:c3c1)
[06:59:32] *** Quits: SeungheonOh (~Thunderbi@2600:1700:5168:1400:d0db:f0d9:c386:c3c1) (Client Quit)
[07:05:49] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:05:49] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:05:49] *** finn_elija is now known as FinnElija
[07:07:50] *** Quits: alx741 (~alx741@181.196.68.101) (Quit: alx741)
[07:13:59] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Ping timeout: 246 seconds)
[07:15:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[07:15:23] *** Quits: AlexNoo (~AlexNoo@178.34.163.82) (Read error: Connection reset by peer)
[07:16:07] *** Joins: AlexNoo (~AlexNoo@178.34.163.82)
[07:18:06] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[07:18:07] *** Quits: jkaye (~jkaye@2601:281:8300:7530:c139:e489:8815:b330) (Ping timeout: 268 seconds)
[07:19:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[07:21:26] *** Quits: jlamothe_ (~jlamothe@198.251.61.229) (Quit: leaving)
[07:21:59] *** Joins: flukiluke (~m-7humut@plum.alephc.xyz)
[07:22:35] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 250 seconds)
[07:29:12] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[07:30:54] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:34:17] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 246 seconds)
[07:34:37] *** Joins: alzgh (~alzgh@user/alzgh)
[07:35:35] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[07:38:26] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[07:41:57] *** Joins: jinsun (~quassel@user/jinsun)
[07:43:20] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[07:45:29] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[07:49:48] *** Joins: mbuf (~Shakthi@122.174.254.232)
[07:53:24] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[07:53:32] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 240 seconds)
[07:56:21] *** Quits: retroid_ (~retro@2e41e9c8.skybroadband.com) (Ping timeout: 268 seconds)
[07:57:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[07:58:26] *** Quits: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se) (Ping timeout: 246 seconds)
[07:59:34] *** Joins: retroid_ (~retro@2e41e9c8.skybroadband.com)
[08:00:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[08:02:24] *** Joins: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[08:12:16] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[08:25:07] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[08:28:38] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[08:30:11] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Quit: Laa shay'a waqi'un moutlaq bale kouloun moumkine)
[08:33:03] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[08:33:29] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[08:37:32] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 240 seconds)
[08:39:44] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:39:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8)
[08:42:45] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[08:43:11] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:646d:b422:185d:c10e) (Ping timeout: 250 seconds)
[08:45:39] *** Quits: falafel (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[08:51:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[08:57:08] *** Quits: x_kuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:57:38] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[09:00:05] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 250 seconds)
[09:06:11] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:07:31] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[09:12:17] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 256 seconds)
[09:13:49] *** Joins: monochrom (trebla@216.138.220.146)
[09:14:06] *** Joins: rkrishnan (~user@122.167.19.65)
[09:15:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:15:23] *** Joins: boxscape_ (~boxscape_@mue-88-130-59-079.dsl.tropolys.de)
[09:23:35] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:31:17] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 264 seconds)
[09:35:06] *** Quits: emf (~emf@2620:10d:c090:400::5:f986) (Ping timeout: 245 seconds)
[09:36:41] *** Joins: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[09:36:53] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[09:38:49] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[09:43:55] *** Quits: CannabisIndica (~herb@user/mesaboogie) (Quit: ZNC - https://znc.in)
[09:44:02] *** Quits: hiruji (~hiruji@user/hiruji) (Ping timeout: 240 seconds)
[09:45:53] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: Client limit exceeded: 20000)
[09:47:17] *** Joins: CannabisIndica (~herb@user/mesaboogie)
[09:49:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[09:50:51] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[09:54:04] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:58:32] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[10:03:02] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[10:04:32] *** Joins: hiruji (~hiruji@user/hiruji)
[10:08:07] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[10:09:03] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[10:14:05] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:14:39] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[10:17:46] *** Joins: img (~img@user/img)
[10:22:34] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[10:22:43] *** Joins: Sgeo (~Sgeo@user/sgeo)
[10:29:26] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[10:35:06] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[10:37:31] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[10:39:06] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:39:46] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[10:40:05] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:3471:ef4b:ebc8:3b49)
[10:43:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:315a:c7df:cdab:4da8) (Ping timeout: 250 seconds)
[10:47:33] *** Joins: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr)
[10:54:49] *** Joins: noddy (~user@user/noddy)
[10:57:01] *** Joins: mmhat (~mmh@55d4b224.access.ecotel.net)
[11:08:34] *** Quits: mmhat (~mmh@55d4b224.access.ecotel.net) (Quit: WeeChat 3.3)
[11:10:28] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[11:13:23] *** Joins: vysn (~vysn@user/vysn)
[11:14:37] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:14:47] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 246 seconds)
[11:15:19] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:75c6:91f1:4f95:975b)
[11:17:31] *** Quits: drdo (~drdo@roach0.drdo.eu) (Quit: Ping timeout (120 seconds))
[11:17:36] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[11:17:50] *** Joins: drdo (~drdo@roach0.drdo.eu)
[11:20:17] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:21:04] *** Joins: bairyn (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[11:21:32] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[11:23:06] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:54fc:9972:155c:27b0)
[11:26:44] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[11:26:46] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:75c6:91f1:4f95:975b) (Ping timeout: 245 seconds)
[11:27:06] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[11:27:39] *** Joins: markusde (~makrus@2604:3d08:6f80:6b00::9610)
[11:27:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:30:54] *** Joins: vshabanov (~vshabanov@85.203.46.25)
[11:32:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[11:40:29] <markusde> Yo- looking to start contributing to some oss projects. Anyone know of any that are newbie friendly and need help?
[11:40:31] *** Joins: ServerStatsDisco (~serversta@2001:470:69fc:105::1a)
[11:44:09] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 256 seconds)
[11:44:39] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[11:45:53] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:45:54] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 260 seconds)
[11:50:51] *** Joins: robosexual (~spaceoyst@88.85.216.62)
[11:52:22] <[exa]> markusde: hard to tell. do you have any specific project you want to improve?
[11:52:30] *** Joins: ubert (~Thunderbi@p200300ecdf4fca6ff42c1e431d1c483e.dip0.t-ipconnect.de)
[11:53:22] <[exa]> generally, most OSS is friendly and will happily accept PRs that make sense, the usual advice is to do something _you_ are interested in/need to have working
[11:54:43] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[11:54:56] <markusde> exa: ic ic. I'l just troll around github then
[11:55:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:55:42] <[exa]> like, if all OSS works just right for you, there's no reason to code more, right? :]
[11:57:28] *** Quits: ubert (~Thunderbi@p200300ecdf4fca6ff42c1e431d1c483e.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[11:57:32] <markusde> exa: lmao
[11:57:47] <[exa]> anyway if you just need practice, there's afaik no library for regexes that has a good machine-buildable&representable immediate representation of the regexes... :]
[11:57:49] *** Joins: ubert (~Thunderbi@p548c9652.dip0.t-ipconnect.de)
[11:58:01] <[exa]> s/representable/analyzable/ 
[12:01:43] *** Quits: boxscape_ (~boxscape_@mue-88-130-59-079.dsl.tropolys.de) (Quit: Connection closed)
[12:04:07] <tomsmeding> that sounds like something you might personally like [exa] :p
[12:05:19] <[exa]> yes.
[12:05:54] <tomsmeding> does it need to be fast? how expressive the regexen?
[12:06:09] <[exa]> I basically want to build a lexer online
[12:06:40] <[exa]> so basically taking tiny pieces of regexes, connecting them into a larger DFA, triggering actions when some state gets reached
[12:07:09] <tomsmeding> online as in online algorithm, not as in web-based?
[12:07:17] *** Quits: xff0x (~xff0x@2001:1a81:53aa:5400:49da:2933:d5c1:bd65) (Ping timeout: 264 seconds)
[12:07:25] <[exa]> online as "the lexing specification is the input of the user"
[12:07:32] <tomsmeding> right
[12:07:51] <tomsmeding> sounds hard to get fast due to the dynamic nature
[12:07:52] *** Joins: michalz (~michalz@185.246.204.33)
[12:07:58] *** Joins: xff0x (~xff0x@2001:1a81:53aa:5400:2665:d30f:dc60:ace5)
[12:08:37] <[exa]> I might have talked about that here already
[12:08:44] *** Joins: chele (~chele@user/chele)
[12:08:55] *** Joins: kuribas (~user@188.189.234.163)
[12:08:59] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[12:09:50] <[exa]> basically I want something that can cut programs into labeled whitespace and non-whitespace tokens; the meaning of whitespace depends on context (e.g. in C, ' ' in a string is not a whitespace, and comments tokenize differently than the text around)
[12:10:34] <[exa]> and well you know, languages are infinite so having the user supply the language spec themselves saves me a lot of stress :D
[12:10:39] <tomsmeding> for C specifically, the better solution would be to statically write a state machine
[12:10:47] <tomsmeding> right
[12:11:12] <tomsmeding> you have indeed talked about this before
[12:11:33] <[exa]> yap, still no time to actually push it :D
[12:11:44] <tomsmeding> https://ircbrowse.tomsmeding.com/day/haskell/2020/12/30?id=226295#trid226295
[12:11:51] * tomsmeding used search superpowers
[12:12:00] <tomsmeding> aka SELECT
[12:13:03] <[exa]> oh what a nice tool, people can just grab random good ideas from #haskell now and start businesses around them. :D
[12:13:10] <[exa]> ^ wishful thinking
[12:13:12] <tomsmeding> ircbrowse really needs search
[12:13:32] <[exa]> throw it into elasticsearch
[12:13:39] <tomsmeding> no
[12:13:45] <[exa]> y no
[12:13:48] <tomsmeding> I already have one annoying to install dep, postgres
[12:13:55] <tomsmeding> original ircbrowse used sphinx
[12:14:01] <tomsmeding> haven't bothered to install that yet
[12:14:26] <tomsmeding> I've done some work to try to eliminate the postgres dep but ended up in the weeds
[12:14:26] <[exa]> in postgres there are pretty good text search things
[12:14:59] <tomsmeding> better than LIKE '%regex%' ?
[12:15:16] <[exa]> yeah, literal fulltext search with inverted indexes
[12:15:23] <tomsmeding> ö
[12:15:24] <[exa]> don't even start with LIKE :D
[12:15:55] <tomsmeding> yeah because LIKE is nice for one-off searching like I just did but is a performance nightmare
[12:16:05] <[exa]> basically add a table like (postID int, author text, message tsvector, msgcontext tsvector )
[12:16:25] <[exa]> to context you add a bit of messages from the environs, you can even weight them
[12:17:04] <[exa]> and then there's some operator (iirc @@) that allows you to efficiently match the table rows using a googlish text query in tsvector
[12:17:09] *** Quits: markusde (~makrus@2604:3d08:6f80:6b00::9610) (Quit: Leaving)
[12:17:27] <[exa]> unfortunately markusde just left, this would be a nice OSS project.. :D
[12:17:33] <tomsmeding> :p
[12:17:50] <tomsmeding> fancy, noting down; currently swamped in work but that may change at some point ever maybe
[12:18:10] *** Joins: gaff (~gaff@49.207.214.48)
[12:18:20] <[exa]> https://www.postgresql.org/docs/9.5/textsearch-tables.html
[12:18:26] *** Quits: gaff (~gaff@49.207.214.48) (Client Quit)
[12:18:39] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[12:18:43] *** Joins: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de)
[12:18:45] *** Joins: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de)
[12:18:45] <[exa]> if you're not into details such as correct stemming, it's literally just about adding a few columns
[12:19:03] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 268 seconds)
[12:20:04] *** Quits: kuribas (~user@188.189.234.163) (Read error: Connection reset by peer)
[12:20:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[12:20:13] <[exa]> postgres = underrated
[12:20:36] <tomsmeding> that particular point I was already aware of
[12:21:37] *** Joins: kuribas (~user@188.189.234.163)
[12:23:10] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[12:23:14] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 260 seconds)
[12:25:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:25:18] *** Joins: kuribas` (~user@188.188.45.223)
[12:25:54] *** Joins: mei3 (~mei@user/mei)
[12:26:53] *** Quits: kuribas (~user@188.189.234.163) (Ping timeout: 246 seconds)
[12:30:00] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[12:32:38] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[12:34:49] *** Quits: vshabanov (~vshabanov@85.203.46.25) (Quit: Client closed)
[12:36:20] *** Quits: x6C697370 (~michael@2600:1700:7c02:3180::49) (Ping timeout: 246 seconds)
[12:39:26] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[12:40:35] *** Quits: c_wraith (~c_wraith@adjoint.us) (Ping timeout: 264 seconds)
[12:41:25] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:42:21] *** Joins: cfricke (~cfricke@user/cfricke)
[12:42:35] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Remote host closed the connection)
[12:42:53] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:45:51] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 250 seconds)
[12:47:33] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:33] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:36] *** allbery_b is now known as geekosaur
[12:47:46] *** Quits: kuribas` (~user@188.188.45.223) (Quit: ERC (IRC client for Emacs 26.3))
[12:54:05] *** Joins: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[12:57:31] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[12:58:48] <Profpatsch> I’m trying to fullfill the requirements for https://hackage.haskell.org/package/servant-conduit-0.15.1/docs/Servant-Conduit.html#t:ConduitToSourceIO in my Monad m
[12:58:53] *** Quits: zincy (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 264 seconds)
[12:58:57] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[12:59:03] <Profpatsch> Namely  m ~ IO => ConduitToSourceIO (ResourceT m)
[12:59:10] <tomsmeding> [exa]: would something like this work for your purpose, or am I misunderstanding? https://paste.tomsmeding.com/Hx3MUFXv (not saying I'm going to build this any time soon, was just procrastinating)
[12:59:13] <Profpatsch> My m is in (MonadIO m)
[12:59:21] <Profpatsch> Can I somehow make the m ~ IO work for it?
[12:59:31] <Profpatsch> Maybe with some fancy lifting? 
[12:59:48] <tomsmeding> Profpatsch: no, you'll never get m ~ IO from just MonadIO m
[12:59:56] <Profpatsch> I would say I’m a pretty good Haskeller, but monad-transformer shenanigans always make me cry very hard
[13:00:26] <tomsmeding> usually when people require hard IO instead of just MonadIO, they do some fancy exception handling where they can't tolerate other, unknown monads getting in the way
[13:00:29] <Profpatsch> tomsmeding: I don’t know how this is supposed to work then; Do I have to just propagate (MonadResource m) out of my function?
[13:00:41] <dminuoso> Profpatsch: this is why I generally follow the RIO pattern (without actually using RIO)
[13:00:49] <dminuoso> So I can always unlift back to IO
[13:00:53] <Profpatsch> I had an error where it hard-required (MonadResource IO) 
[13:01:06] <Profpatsch> But that might have been a type sig that was too specific
[13:01:13] <tomsmeding> where did that constraint come from?
[13:01:16] <tomsmeding> not from this class
[13:01:37] <dminuoso> 10:29:48      tomsmeding | Profpatsch: no, you'll never get m ~ IO from just MonadIO m
[13:01:48] <dminuoso> I think I must misunderstand what you're saying here, tomsmeding.
[13:02:02] <dminuoso> If something is polymorphic over m with a MonadIO m constraint, surely I can simply pick m ~ IO?
[13:02:11] *** Quits: andjjj23 (~irc@107.170.228.47) (Ping timeout: 264 seconds)
[13:02:14] <tomsmeding> if you have control over the choice of m, yes
[13:02:16] <Profpatsch> tomsmeding: That’s usually my question, where do contraints come from :) GHC is really bad at telling you without a lot of poking
[13:02:24] <tomsmeding> if you don't and only know that MonadIO m holds, then tough luck
[13:02:35] <dminuoso> Profpatsch: Type error slices would be really wonderful to have.
[13:02:36] *** Quits: mmaruseacph2 (~mihai@198.199.100.72) (Ping timeout: 245 seconds)
[13:02:46] <tomsmeding> classic caller/consumer duality :)
[13:03:07] <dminuoso> Imagine if GHC could generate type error slices, transport these via LSP and have a specialized visualization in haskell-lsp in emacs.
[13:03:19] <dminuoso> Perhaps with some ergonomics to chase/follow inference
[13:03:42] <Profpatsch> tomsmeding: So basically I want to return a   (MonadIO m, MonadError ServantError m) => m (SourceIO returnType) from my servant handler, so that it can stream the result
[13:03:45] <tomsmeding> gut feeling says Helium should have some of the required machinery for such a thing (not necessarily all)
[13:03:59] <Profpatsch> But unfortunately Servant documentation is horrible, so I’m dumbfounded at how to do that when it requires a hard IO
[13:04:04] *** Joins: mmhat (~mmh@55d4b224.access.ecotel.net)
[13:04:28] <Profpatsch> My intuition is that in order to do correct resource handling, I have to pass the ResourceT in somehow
[13:04:32] <tomsmeding> SourceIO itself is already a monad
[13:05:05] <tomsmeding> are you sure (I don't know either, just guessing) that you don't want something like 'SourceT m returnType' instead?
[13:05:19] <Profpatsch> tomsmeding: Ohhh, hmmm
[13:05:20] <Profpatsch> let me try
[13:06:45] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[13:06:51] <Profpatsch> I’m very close to throwing out all of servant and starting over with a good web framework tbh
[13:07:24] <Profpatsch> tomsmeding: I don’t think it’s so easily possible, the documentation in https://hackage.haskell.org/package/servant-0.18/docs/Servant-API.html#t:SourceIO says
[13:07:30] <Profpatsch> > Stream endpoints may be implemented as producing a SourceIO chunk.
[13:07:32] <lambdabot>  <hint>:1:67: error:
[13:07:32] <lambdabot>      parse error (possibly incorrect indentation or mismatched brackets)
[13:07:37] *** Joins: zincy (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[13:07:41] <tomsmeding> poor lambdabot 
[13:07:56] <tomsmeding> but yeah I don't know either :p
[13:08:04] <Profpatsch> who uses a blockquote character for eval anyway :)
[13:08:12] <tomsmeding> just saying that 'm (SourceIO r)' looks weird to me if SourceIO is already a monad
[13:08:22] <Profpatsch> yeah, same
[13:08:29] <tomsmeding> not impossible, just weird
[13:08:31] <Profpatsch> But the type is kinda forced by the Servant typelevel bullshit
[13:08:52] <zincy> How best would you "go back in time" for a hashmap. I was thinking [(UtcTime Map]) is there something better?
[13:08:54] <Profpatsch> Plus the bad decision to try and abstract over pipe libraries instead of just requiring one pipe lib
[13:08:57] <zincy> tuple that is
[13:09:02] <dminuoso> zincy: What does "go back in time" mean?
[13:09:17] <dminuoso> And what is `UtcTime Map` supposed to denote?
[13:09:21] <zincy> Have a record of changes associated to timestamps
[13:09:32] <zincy> So going back in time would mean iteration
[13:09:51] <dminuoso> Without knowing way more context, this is going to be difficult to answer.
[13:10:37] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[13:10:50] <zincy> Say you have a todo list represented by   newtype TodoList = TodoList (Map TodoId Todo)
[13:11:17] <zincy> I can do CRUD on my todo list which is simple.
[13:11:27] <dminuoso> zincy: First question is, do you just want to maintain a linear history, or some tree history?
[13:11:36] <zincy> Ooh good question
[13:11:54] <zincy> Tree history sounds fun
[13:12:50] <tomsmeding> tree history is only relevant if you want to undo, then apply changes again, then undo once more and go back into your original branch
[13:13:12] <dminuoso> Side note, tree-mode in emacs is absolutely amazing.
[13:13:22] <tomsmeding> tree undo in text editors is amazing
[13:13:23] <dminuoso> Linear history for a code editor is frustratingly limiting
[13:13:31] <tomsmeding> in a todo app it feels quite overpowered :p
[13:13:38] *** Quits: fluxit (~fluxit@techsmix.net) (Quit: Bye!)
[13:13:39] <dminuoso> Yes, no, perhaps.
[13:14:06] <dminuoso> tomsmeding: What can I say, tree-mode + org-mode gives me *both*
[13:14:16] <dminuoso> sorry *tree undo + org-mode
[13:14:28] <tomsmeding> tree-org
[13:15:06] <dminuoso> Btw, I recently did the mistake of looking at the.. original "specification" of markdown
[13:15:11] <dminuoso> Wow, what a huge mistake.
[13:15:33] <dminuoso> I assumed to find some document with a formal bnf grammar and some clean semantics.
[13:15:45] <tomsmeding> you assumed wrong
[13:15:53] <dminuoso> Heh yeah.
[13:15:57] <tomsmeding> wasn't it a perl script
[13:16:09] <yushyin> markdown is just a bad format through and through
[13:16:14] <tomsmeding> like, originally
[13:16:29] <dminuoso> It doesnt even have semantics, it just presents a bunch of *examples* and then shows how it renders. I managed to trigger a dozen undesirable side effects in the reference implementation
[13:16:31] <tomsmeding> markdown is an amazing format because it works for a lot of people in a lot of contexts
[13:16:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[13:16:35] <dminuoso> yushyin: Its not even a format.
[13:16:37] <tomsmeding> the lack of standardisation is annoying though
[13:16:38] <dminuoso> It's just.. something.
[13:17:03] <dminuoso> The reference implementation is just some quickly written adhoc nonsense that misbehaves in so many bizarre ways
[13:17:13] <dminuoso> It's not even wrong.
[13:17:16] <tomsmeding> I format my personal notes in markdown even if I'm not actually pulling it through a renderer
[13:17:38] *** Quits: yahb (xsbot@user/mniip/bot/yahb) (Ping timeout: 268 seconds)
[13:17:42] <tomsmeding> and the non-definedness of the format makes that possible :D
[13:18:03] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[13:18:05] <zincy> Oh thanks I will try tree mode in emacs!
[13:18:08] <Profpatsch> Oh god there is an example https://github.com/haskell-servant/servant/blob/master/servant-conduit/example/Main.hs
[13:18:14] <Profpatsch> Why isn’t this mentioned anywhere in the docs
[13:18:16] <dminuoso> zincy: https://www.emacswiki.org/emacs/UndoTree
[13:18:22] <Profpatsch> why isn’t it *in* the docs
[13:18:34] <zincy> Yeah lets go for linear history
[13:18:34] <dminuoso> It's really amazing. :)
[13:18:37] *** Joins: kuribas (~user@ip-188-118-57-242.reverse.destiny.be)
[13:18:37] <tomsmeding> but yeah </trolling>, the ill-definedness is annoying and I'm consistently annoyed by the indentation requirements for lists as well
[13:18:41] <zincy> Its a todo app :D
[13:19:17] <dminuoso> zincy: As a starter you can simply maintain some [TodoList]
[13:19:29] <dminuoso> And each modification just prepends a new TodoList to that.
[13:19:42] <zincy> Thanks!
[13:19:54] <dminuoso> The main difficulty will consist in keeping enough state around to bring your editor into a sensible state when you go back
[13:20:01] <dminuoso> that is if you undo or redo
[13:20:15] <zincy> yeah
[13:23:49] *** Joins: yahb (xsbot@user/mniip/bot/yahb)
[13:26:45] <Profpatsch> tomsmeding: even the example just has all handlers in IO
[13:27:14] <Profpatsch> So idk how to do any of that. I can’t add it to my servant routes that way
[13:27:34] <Profpatsch> Maybe I can implement an orphan instance that is in MonadIO somehow
[13:27:43] <Profpatsch> Or I have to do MonadUnliftIO stuff
[13:29:14] <int-e> does this count as a todo app? https://paste.debian.net/1218951/
[13:30:56] <zincy> int-e: haha 
[13:31:09] <zincy> Todo lists all the way down
[13:31:51] *** Quits: zava (~zava@ip5f5bdf0f.dynamic.kabel-deutschland.de) (Quit: WeeChat 3.3)
[13:34:00] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[13:36:53] *** Joins: hololeap (~hololeap@user/hololeap)
[13:37:11] *** Quits: eruditass (uid248673@id-248673.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:39:12] *** Quits: pop3 (~pop3@user/pop3) (Remote host closed the connection)
[13:40:43] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[13:41:02] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[13:41:12] <Profpatsch> tomsmeding: Uh, when I try to create an orphan instacnce  instance MonadIO m => Servant.Conduit.ConduitToSourceIO (ResourceT m) where
[13:41:23] <Profpatsch> GHC complains that it already exists, and points to the  m ~ IO =>  instance
[13:41:33] *** Joins: c_wraith (~c_wraith@adjoint.us)
[13:41:44] <tomsmeding> yeah, that instance is basically saying that you can't do what you want
[13:42:26] <tomsmeding> writing 'instance m ~ X => Class m where' means that whenever GHC sees "Class m", it's going to use this instance, and then discover that m ~ X
[13:42:48] <tomsmeding> as opposed to 'instance Class X where', where the instance only gets chosen if it is already known that m ~ X
[13:43:09] <Profpatsch> hrm
[13:43:13] *** Joins: fluxit (~fluxit@techsmix.net)
[13:43:20] * tomsmeding knows nothing about servant
[13:43:26] *** Joins: mmaruseacph2 (~mihai@198.199.100.72)
[13:43:36] <Profpatsch> I assume it has something to do with how ResourceT wants to free resources?
[13:43:56] <Profpatsch> But I don’t understand why I can’t put a ResourceT in my m and then have it handle it for me
[13:43:59] <tomsmeding> yeah finalizers are fundamentally incompatible with arbitrary monad transformers
[13:44:13] <tomsmeding> like, what if the user layers an except monad on top? then finalizers might never get run
[13:44:41] <tomsmeding> or hm, this depends on in which order you compose the transformers exactly
[13:45:34] <tomsmeding> I don't know :D
[13:45:38] <Profpatsch> tomsmeding: But ResourceT in particular is in MonadUnliftIO http://localhost:9090/file/nix/store/1an4ayakan989gr05h0qf65w3zzs4q61-conduit-1.3.4.1-doc/share/doc/conduit-1.3.4.1/html/Conduit.html#t:MonadUnliftIO
[13:45:47] <Profpatsch> So that points to it maybe being possible just not done yet?
[13:45:58] <Profpatsch> Now if there were only comments somewhere that described the restriction
[13:46:18] <Profpatsch> I feel like this is all accidental complexity
[13:48:08] <[exa]> tomsmeding: I got caught in the meeting but yes, that's it
[13:48:17] <merijn> tomsmeding: ResourceT works by forcing everything into, effectively, a giant "with" bracket
[13:49:09] <[exa]> tomsmeding: on top of that something like `Map LexState [(regexlike, LexState)]` for making actual DFA out of that
[13:50:08] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[13:50:20] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:5cf1:3cc3:9b0b:354b)
[13:51:51] *** Joins: hololeap (~hololeap@user/hololeap)
[13:54:47] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[13:55:56] *** Joins: __monty__ (~toonn@user/toonn)
[13:59:07] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:01:11] *** Joins: andjjj23 (~irc@107.170.228.47)
[14:02:31] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:03:02] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[14:04:25] <[exa]> tomsmeding: anyway, if this is slow then at very worst I can literally compile it to flex using this representation. :D
[14:04:49] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[14:07:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[14:09:47] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[14:11:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Ping timeout: 246 seconds)
[14:12:37] *** Quits: bairyn (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[14:14:58] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[14:28:13] *** Joins: DNH (~DNH@2a09:bac0:48::82b:7a35)
[14:29:26] *** Quits: mei3 (~mei@user/mei) (Read error: Connection reset by peer)
[14:30:21] *** Joins: kadir (~kadir@78.178.105.36)
[14:30:52] *** Joins: alx741 (~alx741@181.196.68.101)
[14:37:13] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Quit: No Ping reply in 180 seconds.)
[14:38:34] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[14:46:17] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[14:50:39] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[14:54:07] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[14:57:23] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[14:58:53] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[15:04:24] *** Parts: mbuf (~Shakthi@122.174.254.232) (Leaving)
[15:06:02] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[15:10:45] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[15:11:46] <mcgroin> can we use coerce on a function and turn it into another function accepting the coerced parameters?
[15:14:58] <amesgen[m]> mcgroin: Yes, thats e.g. how deriving via is implemented.
[15:15:00] <merijn> mcgroin: Yes
[15:15:29] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[15:15:54] <mcgroin> great
[15:16:13] <tomsmeding> [exa]: ah so you actually want Automaton to be non-opaque
[15:16:33] <tomsmeding> (sorry meetings)
[15:21:47] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[15:26:36] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[15:27:47] *** Quits: DNH (~DNH@2a09:bac0:48::82b:7a35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:28:24] *** Quits: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com) (Quit: leaving)
[15:29:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:29:54] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[15:31:11] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[15:32:41] *** Joins: hololeap (~hololeap@user/hololeap)
[15:33:45] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[15:34:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[15:38:33] *** Joins: bliminse (~bliminse@host86-185-253-43.range86-185.btcentralplus.com)
[15:52:12] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:55:01] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[15:55:46] <maerwald> is there a solution to use `cabal build`, but then install binaries and libraries in a way that makes it work (if `-dynamic` is used)?
[16:00:25] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[16:01:40] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[16:01:46] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[16:01:56] *** Joins: neurocyte0132889 (~neurocyte@94.46.71.199)
[16:01:56] *** Quits: neurocyte0132889 (~neurocyte@94.46.71.199) (Changing host)
[16:01:56] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:02:19] *** Joins: jmorris (uid433911@id-433911.hampstead.irccloud.com)
[16:05:48] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[16:06:18] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[16:09:51] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[16:10:44] *** Quits: awpr (uid446117@id-446117.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:13:11] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:14:02] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Ping timeout: 240 seconds)
[16:15:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[16:17:53] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 246 seconds)
[16:20:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[16:20:53] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[16:23:47] *** Joins: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de)
[16:24:22] *** Joins: neurocyte0132889 (~neurocyte@94.46.71.199)
[16:24:23] *** Quits: neurocyte0132889 (~neurocyte@94.46.71.199) (Changing host)
[16:24:23] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[16:24:48] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[16:29:08] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[16:29:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 264 seconds)
[16:29:25] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 268 seconds)
[16:29:33] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[16:30:01] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:32:14] *** Quits: max22- (~maxime@2a01cb0883359800c49e7f6f9540e9e4.ipv6.abo.wanadoo.fr) (Ping timeout: 246 seconds)
[16:32:34] *** Joins: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233)
[16:33:39] *** Joins: DNH (~DNH@8.43.122.53)
[16:38:02] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[16:38:58] *** Joins: boxscape_ (~boxscape_@134.171.69.87)
[16:41:29] <boxscape_> gratuitous syntax extension idea #27: Use !<class> to introduce a new variable whose type must be an instance of that class. e.g. `5 :: !Num` or `pure :: a -> !Applicative a`
[16:43:53] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:45:18] <robosexual> so it's basically `anonymous` constrained type variables. since `pure :: a -> !Applicative a` <=> `pure :: Applicative _f => a -> _f a` where `_f` can be reffered only once
[16:45:38] <boxscape_> right
[16:46:15] <robosexual> might make some stuff a bit more readable for sure
[16:48:42] <robosexual> there is a lot of functiouns with signature as such `some :: (Monad m) => A -> B -> m C` which could be just `some :: A -> B -> !Monad C`
[16:49:03] <boxscape_> yeah
[16:49:24] <robosexual> nice:)
[16:49:44] <boxscape_> alas, probably not actually worth an extension
[16:51:44] <robosexual> ideas shall be spoken:)
[16:52:20] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Remote host closed the connection)
[16:52:25] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 256 seconds)
[16:53:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[16:53:26] *** Quits: MidAutumnMoon (~MidAutumn@user/midautumnmoon) (Ping timeout: 260 seconds)
[16:54:21] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[16:54:55] *** Joins: MidAutumnMoon (~MidAutumn@user/midautumnmoon)
[16:57:36] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 245 seconds)
[17:01:51] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[17:01:52] *** Joins: chele_ (~chele@user/chele)
[17:03:45] *** Quits: chele (~chele@user/chele) (Ping timeout: 256 seconds)
[17:14:35] *** Quits: aliosablack (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 246 seconds)
[17:14:39] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[17:15:37] *** Joins: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374)
[17:17:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[17:17:42] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 260 seconds)
[17:17:59] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:22:55] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[17:25:11] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[17:25:25] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[17:25:31] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 245 seconds)
[17:26:10] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[17:27:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 240 seconds)
[17:29:49] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[17:31:02] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 240 seconds)
[17:31:25] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[17:34:41] <adamCS> My hls setup (emacs, mac os) often tries to make such a long and not-useful completion list that it gets in the way much more than it helps. Anyone know how to configure anything about that or where to look to figure it out?  I haven't found a lot of documentation of the options I can configure.
[17:38:32] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 240 seconds)
[17:42:57] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[17:43:25] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[17:43:29] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[17:44:26] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[17:48:07] *** justCity is now known as justache
[17:48:21] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[17:49:14] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:52:18] *** tomku|two is now known as tomku
[17:59:31] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:03:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 240 seconds)
[18:05:24] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[18:09:13] <cigsender> adamCS: you might get a faster reply on #haskell-language-server :)
[18:09:41] <adamCS> cigsender: yep. I'll try that...Thanks!
[18:09:45] <tomsmeding> adamCS: what editor?
[18:10:20] <tomsmeding> there have been result ordering issues with HLS, that have been fixed with a PR _today_, so not in any released version yet -- but whether you're hit by this depends on your editor
[18:10:47] <geekosaur> "My hls setup (emacs, mac os)"
[18:10:54] <adamCS> tomsmeding: emacs.  I think my issue might be company rather than hls?
[18:11:20] <tomsmeding> adamCS: see https://github.com/haskell/haskell-language-server/issues/2291#issuecomment-949477646 and https://github.com/haskell/haskell-language-server/issues/2291
[18:11:31] <tomsmeding> is it possible that the problem is simply result _ordering_? If so, probably this
[18:11:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[18:12:38] <adamCS> I'm trying to simplify the company setup.  Half the problem was having number completions on and a bunch of my variables have numbers in the names and so things often went...haywire.  But also, emacs would hang when gathering the list (I think) and then the list wouldn't make sense.  That last bit might be ordering.
[18:15:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Ping timeout: 245 seconds)
[18:16:12] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:5cf1:3cc3:9b0b:354b) (Remote host closed the connection)
[18:17:24] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:b8f5:7f5:bf66:e7c)
[18:17:35] *** Quits: gentauro_ (~gentauro@185.107.12.141) (Changing host)
[18:17:35] *** Joins: gentauro_ (~gentauro@user/gentauro)
[18:17:53] *** Joins: max22- (~maxime@2a01cb0883359800a8cb049c70e9b71a.ipv6.abo.wanadoo.fr)
[18:18:31] *** Quits: gentauro_ (~gentauro@user/gentauro) (Quit: leaving)
[18:18:45] *** Joins: gentauro (~gentauro@user/gentauro)
[18:18:47] *** Joins: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0)
[18:19:17] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:20:02] *** Quits: mark__ (~a@p200300ef973db1e34086f0a6a24fc4dd.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[18:20:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:22:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[18:23:43] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[18:24:49] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:24:49] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:24:49] *** Joins: wroathe (~wroathe@user/wroathe)
[18:26:04] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:29:27] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[18:30:47] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (Ping timeout: 250 seconds)
[18:31:10] *** Joins: alzgh (~alzgh@user/alzgh)
[18:32:41] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Remote host closed the connection)
[18:32:47] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[18:33:25] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[18:34:41] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 250 seconds)
[18:35:24] *** Joins: k` (~user@152.1.137.158)
[18:35:33] *** Joins: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[18:36:09] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:36:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[18:36:54] *** Joins: mark__ (~a@p200300ef973db1dc4086f0a6a24fc4dd.dip0.t-ipconnect.de)
[18:37:22] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[18:37:35] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 264 seconds)
[18:37:52] <k`> Is there a way to use associated type families with functional dependencies? Like `class Foo a b | (Bar a) -> b where type Bar a` ?
[18:38:32] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[18:38:49] <geekosaur> have you tried it?
[18:40:35] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 264 seconds)
[18:42:47] <timCF> Hello! Is there the way to declare somehow system library dependencies in package.yaml file?
[18:44:11] <boxscape_> k` hmmm I'm not sure if that has the inference advantages you're likely looking for but maybe something like `class (c ~ Bar a) => Foo a b c | c -> b where type Bar a` could work
[18:45:39] <geekosaur> timCF, why are you still using package.yaml? even the stack folks have gone back to cabal files, because package.yaml is so limited
[18:46:31] <timCF> geekosaur: I didn't know this :) But is it possible to do the same thing in cabal file?
[18:46:49] <geekosaur> at least two ways to do it in the cabal file
[18:47:47] <timCF> geekosaur: and how? 
[18:48:26] *** Joins: [Kalisto]_ (~nico@user/kalisto/x-8968079)
[18:48:33] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 250 seconds)
[18:48:38] <geekosaur> pkgconfig-depends and extra-libraries
[18:48:46] <geekosaur> had to doublecheck the names, sorry
[18:49:18] <geekosaur> pkgconfig-depends is used when the library has a pkg-config specification (*.pc file), otherwise extra-libraries is used
[18:49:22] *** Joins: Andrew_ (~andrew@user/andrewyu)
[18:49:29] <timCF> geekosaur: thanks a lot, I'll check corresponding docs!
[18:49:32] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 240 seconds)
[18:50:15] *** Quits: AndrewYu (~andrew@user/andrewyu) (Read error: Connection reset by peer)
[18:51:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:51:16] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:51:42] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:52:34] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:52:34] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:52:34] *** Joins: wroathe (~wroathe@user/wroathe)
[18:53:08] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:53:14] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[18:53:24] <maerwald> you can also use a custom Setup.hs
[18:53:47] *** Joins: p_____ (~dyeplexer@user/dyeplexer)
[18:53:54] <maerwald> e.g. https://github.com/llvm-hs/llvm-hs/blob/llvm-12/llvm-hs/Setup.hs
[18:54:21] <geekosaur> but the cabal folks don't like custom Setup.hs
[18:54:23] *** Quits: p_____ (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[18:54:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:55:10] <maerwald> so?
[18:55:31] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[18:55:35] <maerwald> cabal has insufficient means to discover libraries
[18:55:56] <maerwald> in fact, pkg-config shouldn't even be a cabal feature imo. The main reason it's used is because it's fed into the solver
[18:56:04] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[18:56:04] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[18:56:04] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[18:56:20] <maerwald> but in reality... pkg-config files are not a standard, just one of many ways for libraries to expose such info
[18:56:43] *** Joins: mimmy (~mimmyjau@72.142.88.18)
[18:56:46] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 245 seconds)
[18:57:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:57:07] <geekosaur> pkg-config is really useful when you need custom build flags (-I, defines etc.) as well as libraries
[18:57:20] <sclv> its mainly used not for the solver but as geekosaur said, for the linker flags
[18:57:43] *** Quits: asthasr_ (~asthasr@162.210.28.151) (Quit: asthasr_)
[18:58:11] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[18:58:28] <maerwald> geekosaur: for that it's also not a standard
[18:58:56] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[18:59:02] <maerwald> instead, cabal should provide better/easier API to write custom Setup.hs without understanding all the internals
[18:59:20] <sclv> no we should eliminate all custom setup
[18:59:49] <maerwald> how do you support llvm then as linked above?
[18:59:57] <geekosaur> but with custom Setup, just one thing that occurs to me is now you need to run package configure while running the solver, and possibly restart the solver afterward
[19:00:23] <geekosaur> because your list of dependencies may have changed
[19:00:38] <sclv> maerwald: we extend the grammar of cabal files to express what people currently need custom setup for
[19:00:45] *** Joins: Sgeo (~Sgeo@user/sgeo)
[19:00:52] <maerwald> I don't think that's a good idea
[19:02:04] <maerwald> you can never satisfy all and it's a constantly evolving story
[19:02:24] <kritzefitz> sclv so you say Cabal shouldn't be extendable?
[19:02:29] <maerwald> cargo also has build.rs
[19:05:02] <sclv> well i mean i think we'll be stuck with custom setups foreverish
[19:05:11] <sclv> but ideally we can minimize how many we need continously
[19:05:33] <k`>  
[19:05:33] <k`> boxscape_: I'm trying to avoid having `Bar a` as a type parameter of the class instance that defines it. That would pretty much defeat the purpose.
[19:05:49] *** Joins: xddq[m] (~xddqmatri@2001:470:69fc:105::bfd8)
[19:06:04] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:06:14] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[19:06:31] <tomsmeding> adamCS: I tested 'master' of haskell-language-server and that fixes ordering problems for me; note that it now also makes the first character of the completion case-sensitive, where previously the whole match was case-insensitive.
[19:06:52] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[19:06:55] <kritzefitz> sclv: so ideally Cabal should support compiling gettext PO files and installing the results?
[19:07:31] <sclv> kritzefitz: why would that be necessary?
[19:07:39] <maerwald> Anything that isn't pkg-config, such as llvm-config, is likely gonna be ad-hoc and can't be used to design an interface. Unless you require the user to write wrapper scripts that convert to known format (which Ben has been doing with fake pkg-config scripts)
[19:07:42] <boxscape_> k` if you also add `a -> c` as functional dependency you might be able to always write _ (with -XPartialTypeSignatures) instead of actually passing the c argument, I think
[19:07:57] <adamCS> tomsmeding: That's great!  Thanks! Can I just cabal build it and then put in the ghcup/bin directory and point all the links to it?  Or should I just wait for a release?
[19:08:11] <boxscape_> ideally you'd want a way to have an invisible argument for the class, but as far as I can tell that's not supported
[19:08:22] <kritzefitz> sclv, because some packages might want to use gettext localization files and thus need to compile them on build and install them accordingly?
[19:08:26] <sclv> i imagine custom preprocessors can cover a lot of the ground currently used by Setup.hs
[19:08:30] <maerwald> https://github.com/bgamari/nix-pkgconfig
[19:08:32] <maerwald> I think that
[19:08:47] <tomsmeding> adamCS: if you're using cabal, then yes, just cabal build and put the binary somewhere in your path, doesn't even need to be .ghcup/bin -- though it needs to be _before_ .ghcup/bin in your path if you put it anywhere else
[19:08:54] <k`> boxscape_:  Thanks, that's what I was wondering. Not the answer I wanted, but it's good to know I can stop trying.
[19:08:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[19:09:10] *** Quits: mimmy (~mimmyjau@72.142.88.18) (Quit: WeeChat 3.3)
[19:09:12] <tomsmeding> adamCS: if you're using ghc >= 9.0, mind the custom cabal.project files
[19:09:14] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 260 seconds)
[19:09:17] <tomsmeding> (otherwise hls won't build)
[19:09:22] <maerwald> adamCS: you can compile hls via ghcup
[19:09:39] <adamCS> maerwald: un unreleased version?
[19:09:42] <maerwald> yes
[19:09:46] <adamCS> HOW?
[19:09:51] <maerwald> ghcup compile hls  --help
[19:10:37] <tomsmeding> maerwald++
[19:10:42] <adamCS> wow.
[19:10:50] <adamCS> That's cool.
[19:10:53] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 264 seconds)
[19:10:55] <k`> Was hoping I could do something like `class Mapping a b | b (Object a) -> a, a (Object b) -> b where type Object a; type Object a = Param a; map :: (Object a -> Object b) -> a -> b`
[19:10:57] <kritzefitz> sclv: preprocessors process haskell(ish) source files to output haskell, right? How does that help in compiling non-haskell to other non-haskell or installing files in special locations?
[19:11:36] <sclv> i mean clearly a cabal package should not just be installing and compiling nonhaskell to nonhaskell, i would argue that is not the job of a haskell package
[19:11:48] <sclv> people should not do that
[19:11:54] <tomsmeding> maerwald: I assume for ghc >= 9.0 you'll need to explicitly give the --cabal-project file?
[19:11:55] <k`> Rather than forcing folks to write, e.g., `instance Mapping (T a) (T b) a b where ...`
[19:12:08] <kritzefitz> sclv so how do you propose people use gettext?
[19:12:21] <sclv> i don't want to have a build depends on some haskell library and then have nonhaskell compiled and installed randomly on my system
[19:12:27] <maerwald> tomsmeding: I guess
[19:12:34] <adamCS> maerwald, tomsmeding: I'm still not on 9 since too many packages have...issues.  I try every couple weeks!
[19:12:37] <tomsmeding> maerwald: makes sense
[19:13:00] <kritzefitz> sclv so you think data files are evil as well?
[19:13:10] <sclv> no we control where data files go
[19:13:17] <sclv> in the standard format
[19:13:31] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[19:13:37] <kritzefitz> There are also standard locations for gettext files. Cabal just doesn't know about them.
[19:14:02] <sclv> gettext is low level enough i can imagine cabal support tbqh
[19:14:20] <adamCS> maerwald: Does the version number need to match in that command need to match the cabal file in the repo or can I set to, e.g., 1.4.1 so I keep the old 1.4 around?
[19:14:22] <sclv> but i imagine with some concerted effort then preprocessors and other tools would suffice
[19:14:39] <maerwald> adamCS: see --overwrite-version option
[19:15:07] <adamCS> maerwald: nice
[19:15:54] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[19:16:36] *** Quits: jmorris (uid433911@id-433911.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:16:43] <maerwald> I don't see what's wrong with Setup.hs being a low-level interface like build.rs, providing useful library helpers for common things like pkg-config, gettext etc
[19:17:07] <sclv> well we'd maybe just want to cut out some features of setup.hs in that case
[19:17:22] <sclv> like have a subset that doesn't dynamically create a haskell module manifest
[19:17:31] <kritzefitz> sclv: maybe. Excuse my nagging. I'm just a bit frustrated sometimes, because it feels like Cabal seems to loose basic features from time to time, because people think they're not used.
[19:17:33] <sclv> the problem is that its entirely unrestricted
[19:17:45] <sclv> nobody is getting rid of setup.hs anytime soon
[19:17:49] <maerwald> sclv: yes, but that's can be solved with seccomp :)
[19:17:55] <sclv> the GOAL is that we try to make as many things as possible not need it
[19:18:24] <sclv> so that we can analyze statically as much about a package ecosystem as possible without running haskell code
[19:18:30] <sclv> or rather without running arbitrary haskell code
[19:18:43] <maerwald> package managers also use sandboxes
[19:18:53] <maerwald> that's the right solution... it's just hard cross-platform
[19:20:02] <sclv> no also you just don't want to have to run everyone's code just to understand their packages
[19:20:04] <sclv> even without security
[19:20:28] <kritzefitz> Mostly I'm a bit sore, because installing packages to prefixes isn't a thing since new-style cabal. And I'm pretty stuck on a project where I would need that.
[19:20:46] <sclv> that's something we need a good story for
[19:21:01] <sclv> the datafiles stuff is really hacky and we don't have a good full answer
[19:21:05] *** Joins: coady (~coady@31.132.2.93)
[19:21:32] <maerwald> sclv: uhm... you're constantly running a lot of code from your package manager that you didn't write. I don't think that's a criteria.
[19:21:37] <adamCS> maerwald: Can't make it work.  When I specify the repo via "-r https://github.com/haskell/haskell-language-server" I get "Invalid option `-r'" though then it lists that as an option in the subsequent help.
[19:21:55] <maerwald> like, do you read all the source rpms, ebuilds, etc?
[19:22:03] <kritzefitz> sclv: If that's what is missing, I would gladly help by writing down my intended use case. (Just not right now)
[19:22:21] <sclv> kritzefitz: please do browse the tickets, and either comment on one or open a new one!
[19:22:37] <maerwald> adamCS: sure the entire line
[19:22:41] <maerwald> *show
[19:22:56] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:23:07] <adamCS> maerwald: ghcup compile hls -v 1.4.0 -r "https://github.com/haskell/haskell-language-server" -g 9415e55672a0c60a353f0bff3ae8546bdf0e7903 -o 1.4-ro 8.10.7
[19:23:29] <maerwald> adamCS: you can't combine -v and -r
[19:23:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[19:23:56] <maerwald> you want -g instead of -r
[19:24:09] <adamCS> Oh!
[19:24:14] <adamCS> That makes sense.
[19:24:31] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[19:24:40] <maerwald> I'd also avoid 1.4-ro and use 1.4.1.1 or so (there's a bug in 0.1.17.3 with version suffixes)
[19:24:58] <maerwald> which is fixed on master but not released
[19:25:35] <adamCS> maerwald: Thank you!
[19:25:59] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[19:26:12] <maerwald> sclv: my point is... I don't even trust cabal, not just Setup.hs. Ultimately, even ghcup would run within a syscall sandbox (e.g. because it invokes GHC makefiles, unrestricted)
[19:26:14] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[19:27:24] <maerwald> reducing custom API surface is a never ending effort
[19:27:47] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Remote host closed the connection)
[19:29:03] <maerwald> paludis uses sydbox (seccomp based), portage uses something else afair
[19:29:13] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:29:26] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[19:30:07] <maerwald> https://gitweb.gentoo.org/proj/sandbox.git
[19:30:46] <maerwald> ah, it uses ptrace
[19:31:02] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:33:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:35:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[19:36:11] *** Quits: boxscape_ (~boxscape_@134.171.69.87) (Ping timeout: 256 seconds)
[19:38:12] *** [Kalisto]_ is now known as [Kalisto]
[19:39:36] *** Joins: roconnor (~roconnor@host-45-58-217-8.dyn.295.ca)
[19:41:19] <roconnor> When the Haskell report says "A Word is an unsigned integral type, with the same size as Int." What does the same "size" mean?  Does it guarentee that it can hold at least up to 2^30-1 (twice maxBound of Int) or does it only guarentee up to 2^29-1 like Int?
[19:41:29] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 264 seconds)
[19:41:47] <k`> `WORD_SIZE`
[19:41:48] <c_wraith> it means the same bit size
[19:42:11] <c_wraith> also, it means "as the implementation's Int type"
[19:42:35] <roconnor> okay, and Int's bitsize is at least 30, right?
[19:42:36] <c_wraith> so it's less about the minimum range required for Int, and more about how the same compiler defined Int
[19:43:06] *** Joins: alzgh (alzgh@user/alzgh)
[19:43:07] <c_wraith> yes, it does mean it must be at least 30 bits
[19:43:14] <roconnor> thanks.
[19:43:19] <c_wraith> But more to the point, it must be the same size as Int
[19:45:56] <roconnor> bitSize.
[19:51:26] *** Joins: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl)
[19:52:47] *** Joins: rkrishnan (~user@122.167.19.65)
[19:55:02] *** Joins: mimmyjau (~mimmyjau@72.142.88.18)
[19:57:16] *** Quits: mimmyjau (~mimmyjau@72.142.88.18) (Client Quit)
[19:57:36] *** Joins: mimmyjau (~mimmy@72.142.88.18)
[19:57:50] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[19:58:01] *** Joins: jakalx (~jakalx@base.jakalx.net)
[19:58:48] *** Quits: mimmyjau (~mimmy@72.142.88.18) (Client Quit)
[20:02:15] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 256 seconds)
[20:03:43] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:05:27] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:05:31] *** Quits: Kaipi (~Kaiepi@156.34.44.192) (Read error: Connection reset by peer)
[20:05:42] *** Joins: Kaipi (~Kaiepi@156.34.44.192)
[20:06:44] *** Quits: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:07:08] *** Joins: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de)
[20:08:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:08:34] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:54fc:9972:155c:27b0) (Quit: WeeChat 2.8)
[20:12:38] *** Quits: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:12:59] *** Joins: acidjnk_new (~acidjnk@p200300d0c724a7710420fe3aa4fdb454.dip0.t-ipconnect.de)
[20:15:57] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[20:16:18] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:17:27] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[20:21:46] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[20:22:07] <nf> hi, i'm trying to refactor this code https://github.com/ncfavier/ni/blob/master/src/Nirc.hs#L110 to float the  execStateT [] initialContext  to the top of the program, so that the main loop happens in the state monad
[20:23:11] <nf> so now i need "lifted" versions of timeout and tryIOError that work with StateT (with the obvious semantics "restore the old state on timeout"). i was only able to find such a timeout in lifted-base, and tryIO in unliftio and others, but this feels a bit scattered
[20:23:53] <nf> alternatively i could just store the context in an IORef
[20:24:01] <nf> what would you do?
[20:24:07] <monochrom> I recommend not.
[20:24:41] <monochrom> But if you insist, perhaps the "layers" package offers yet another solution, complete or incomplete, I haven't deeply looked.
[20:25:23] <monochrom> "lifting" is a very naïve idea once control flow is involved.
[20:25:43] <monochrom> and a pandora's box
[20:25:50] <monochrom> can of worms
[20:26:52] <monochrom> The difficulty of timeout is that you now have two threads, too.
[20:27:04] <nf> i'll look into layers
[20:27:20] <nf> when you say you recommend not, did you mean the IORef part or the refactoring part?
[20:27:23] <monochrom> What does it even mean to "lift" forkIO to StateT.
[20:27:34] <nf> well, nothing
[20:27:35] <monochrom> refactoring.
[20:27:39] <monochrom> "refactoring"
[20:27:45] <nf> i'm only interested in the special case of lifting timeout, with the semantics i mentioned
[20:28:02] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[20:28:02] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[20:28:02] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[20:28:08] <nf> yeah i guess it's more than refactoring
[20:28:18] <monochrom> timeout is done by forkIO and a lot of other moving parts
[20:28:32] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[20:29:49] *** Joins: notzmv (~zmv@user/notzmv)
[20:30:10] <nf> so to be clear, what would you rather do? the goal being to reuse the context across invocations, instead of using initialContext every time
[20:31:21] *** Joins: DNH (~DNH@8.43.122.53)
[20:32:11] *** Quits: ubert1 (~Thunderbi@2a02:8109:9880:303c:ca5b:76ff:fe29:f233) (Remote host closed the connection)
[20:32:50] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[20:35:10] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[20:37:18] * dsal lifts pandora's box of worms
[20:38:40] *** Joins: alzgh (~alzgh@user/alzgh)
[20:39:22] <tomsmeding> dsal: pray don't open it
[20:39:53] * dsal unlifts
[20:39:59] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[20:43:29] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:b8f5:7f5:bf66:e7c) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:47:03] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Quit: Konversation terminated!)
[20:48:57] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[20:51:28] *** Quits: kuribas (~user@ip-188-118-57-242.reverse.destiny.be) (Remote host closed the connection)
[20:52:43] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[20:53:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:53:58] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 268 seconds)
[21:00:08] *** Quits: urdh (~urdh@user/urdh) (Remote host closed the connection)
[21:00:11] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[21:01:35] *** Quits: rkrishnan (~user@122.167.19.65) (Ping timeout: 250 seconds)
[21:04:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[21:04:28] *** Joins: awpr (uid446117@id-446117.lymington.irccloud.com)
[21:04:40] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:09:07] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 256 seconds)
[21:11:54] *** Quits: royo (~royo@user/royo) (Ping timeout: 260 seconds)
[21:12:10] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[21:14:35] *** Quits: johnny_sitar (~artur@078088015209.bialystok.vectranet.pl) (Ping timeout: 250 seconds)
[21:15:08] *** Quits: nvmd (~nvmd@user/nvmd) (Quit: Later, nerds.)
[21:15:30] *** Joins: coady1 (~coady@94.196.131.116.threembb.co.uk)
[21:16:50] *** Joins: coady2 (~coady@159.48.55.98)
[21:18:11] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 246 seconds)
[21:18:39] *** Quits: coady2 (~coady@159.48.55.98) (Client Quit)
[21:19:19] *** Quits: coady (~coady@31.132.2.93) (Ping timeout: 256 seconds)
[21:20:11] *** Quits: coady1 (~coady@94.196.131.116.threembb.co.uk) (Ping timeout: 264 seconds)
[21:20:41] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[21:21:13] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:21:31] *** ski_ is now known as ski
[21:21:48] *** Quits: chele_ (~chele@user/chele) (Remote host closed the connection)
[21:26:29] *** Joins: zebrag (~chris@user/zebrag)
[21:26:49] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[21:27:33] *** Quits: robosexual (~spaceoyst@88.85.216.62) (Quit: Konversation terminated!)
[21:30:46] *** Joins: cheater (~Username@user/cheater)
[21:31:35] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 264 seconds)
[21:33:03] *** Joins: td_ (~td@94.134.91.32)
[21:34:26] *** Joins: econo (uid147250@user/econo)
[21:40:22] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[21:40:44] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[21:44:53] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:45:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Ping timeout: 268 seconds)
[21:45:23] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 256 seconds)
[21:45:31] *** Joins: v01d4lph4 (~v01d4lph4@223.190.93.72)
[21:45:31] *** Quits: v01d4lph4 (~v01d4lph4@223.190.93.72) (Changing host)
[21:45:31] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[21:48:42] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:49:01] *** Joins: cosimone (~user@93-44-184-123.ip98.fastwebnet.it)
[21:50:06] *** Quits: jkaye (~jkaye@2601:281:8300:7530:212b:79de:3c7b:f9e0) (Ping timeout: 245 seconds)
[21:52:33] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[21:52:43] *** Joins: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net)
[21:55:39] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:58:05] *** Joins: neurocyte0132889 (~neurocyte@94.46.71.199)
[21:58:05] *** Quits: neurocyte0132889 (~neurocyte@94.46.71.199) (Changing host)
[21:58:05] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:58:23] *** Joins: pgib (~textual@173.38.117.83)
[21:59:02] *** Quits: yauhsien (~yauhsien@61-231-16-137.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[22:03:08] *** Quits: mcgroin (~mcgroin@roc37-h01-176-170-197-243.dsl.sta.abo.bbox.fr) (Ping timeout: 250 seconds)
[22:03:08] <joel135> can i get ghc/ghci to spit out the types of all subterms of a code block, like a typing derivation?
[22:04:39] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:09:11] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 250 seconds)
[22:11:20] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:13:55] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Read error: Connection reset by peer)
[22:13:58] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:14:23] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:14:32] *** Joins: emf (~emf@2620:10d:c090:400::5:69be)
[22:20:49] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[22:24:52] *** Joins: jeslie0 (~user@135-23-172-182.cpe.pppoe.ca)
[22:28:21] *** Joins: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com)
[22:28:32] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816) (Remote host closed the connection)
[22:28:51] <shapr> joel135: You can use haskell-language-server to do some of that.
[22:29:45] *** Quits: justache (~justache@user/justache) (Read error: Connection reset by peer)
[22:30:08] *** Joins: jkaye (~jkaye@2601:281:8300:7530:65b4:1325:4217:bff5)
[22:30:40] *** Joins: justache (~justache@user/justache)
[22:33:05] *** Quits: zincy_ (~zincy@host86-181-60-139.range86-181.btcentralplus.com) (Ping timeout: 264 seconds)
[22:33:21] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:33:37] *** Joins: urdh (~urdh@user/urdh)
[22:35:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:37:24] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:37:27] <mark__> Sorry, still trying to understand MMR and WHNF. If I do ":set -XNoMonomorphismRestriction; x = Just 1" and then force evaluation to WHNF "seq x ()" I get x = _. Why does it not eval until the first value constructor Just. The polymorphic thing is inside the Just.
[22:38:31] <monochrom> If you don't mind one subterm at a time, https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:type-at
[22:38:39] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:38:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[22:39:08] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[22:39:09] <monochrom> Or, if you don't mind all subterms of the whole file, https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:all-types
[22:39:38] <monochrom> :type-at is what emacs haskell-mode and dante use.
[22:39:42] *** Joins: DNH (~DNH@8.43.122.53)
[22:39:57] <monochrom> It is also why I still don't need IDEs.
[22:41:10] <monochrom> mark__, unfortunately you have "Num a => Maybe a" not "Maybe (Num a => a)".
[22:41:33] <mark__> Thanks for the links. My theory is that (Just (1 :: Num a => a)) is in core something like (\$dNum -> Just  ..) so the dict must be supplied at the start.
[22:41:51] <monochrom> Equivalently, the polymorphic thing is precisely outside the Just.
[22:42:22] <mark__> That makes sense.
[22:42:23] <monochrom> Why? Because Hindley-Milner does neither rank-n nor impredicativity.
[22:47:45] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 250 seconds)
[22:51:07] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:51:21] *** Joins: jgeerds (~jgeerds@55d41b94.access.ecotel.net)
[22:52:07] <joel135> shapr: good idea. i ended up settling with holes for now though
[22:52:32] *** Quits: chomwitt (~chomwitt@2a02:587:dc0f:7c00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[22:52:54] <joel135> and simple redundant let bindings
[23:03:13] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:05:34] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[23:07:32] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 240 seconds)
[23:10:32] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 240 seconds)
[23:11:10] *** Quits: DNH (~DNH@8.43.122.53) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:11:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:dcad:8023:d7ab:9816)
[23:21:14] *** Joins: player205 (~player205@net-93-71-138-138.cust.vodafonedsl.it)
[23:21:37] *** Quits: player205 (~player205@net-93-71-138-138.cust.vodafonedsl.it) (Client Quit)
[23:21:55] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[23:22:20] *** Joins: player205 (~player205@net-93-71-138-138.cust.vodafonedsl.it)
[23:24:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:26:30] *** Quits: michalz (~michalz@185.246.204.33) (Remote host closed the connection)
[23:26:56] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[23:32:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:33:26] *** Joins: DNH (~DNH@8.43.122.53)
[23:35:02] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 240 seconds)
[23:35:05] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:36:41] *** Quits: pgib (~textual@173.38.117.83) (Quit: 00 PC LOAD LETTER)
[23:36:42] *** Joins: juhp (~juhp@128.106.188.220)
[23:36:47] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 246 seconds)
[23:38:58] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[23:43:36] *** Joins: mei3 (~mei@user/mei)
[23:45:31] *** Joins: coady (~coady@159.48.55.98)
[23:46:48] *** Quits: coady (~coady@159.48.55.98) (Client Quit)
[23:48:06] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:48:48] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[23:49:29] *** Quits: alx741 (~alx741@181.196.68.101) (Ping timeout: 256 seconds)
[23:50:03] *** Quits: gehmehgeh_ (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[23:50:16] *** Joins: hololeap (~hololeap@user/hololeap)
[23:51:05] *** Joins: gehmehgeh_ (~user@user/gehmehgeh)
[23:51:38] *** Joins: nineonine (~nineonine@2604:3d08:7780:cd00:187c:a4eb:abb4:3c17)
[23:52:46] *** Joins: deadmarshal (~deadmarsh@95.38.114.152)
[23:54:02] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[23:54:49] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65)
[23:55:25] *** Joins: jushur (~human@user/jushur)
[23:57:02] *** Quits: deadmarshal (~deadmarsh@95.38.114.152) (Ping timeout: 240 seconds)
[23:57:03] *** Quits: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk) (Remote host closed the connection)
[23:57:17] *** Joins: Guest4249 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:57:52] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[23:57:53] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:58:22] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[23:59:15] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:350f:7ee:191a:6f65) (Ping timeout: 250 seconds)
