[00:38:32] <Zipheir> wasamasa: Hopefully it's not hasty anymore; I'm maintaining it.
[00:40:17] <Zipheir> We (mostly me and dieggsy) did a collective overhaul on diamond-lizard's eggs a while back.
[00:43:58] *** Joins: tazjin (~quassel@polyanka.tazj.in)
[00:48:11] <tazjin> hello. is there an equivalent flag to -Wall for csc? read the man page up and down but couldn't find anything that lets me avoid grepping the output :)
[00:48:32] <wasamasa> Zipheir: ok, that's good to know in case I find an issue with those
[00:50:55] <wasamasa> tazjin: it seems there's just flags to reduce warnings
[00:51:33] <wasamasa> tazjin: the compiler can detect more issues if the code is wrapped in a module, there's a flag to generate one on the fly
[00:51:49] <wasamasa> tazjin: but that flag cannot be used with code already wrapped in once
[00:52:00] <tazjin> wasamasa: it's detecting the right issues for me already, but I need to fail CI on them also :)
[00:52:11] <wasamasa> that would be -Werror, not -Wall
[00:52:38] <tazjin> ah right, sorry, got my head filled with too much random stuff at the moment
[01:07:19] *** Joins: amazigh (~amirouche@user/amirouche)
[01:20:45] *** Quits: chicken_m (~chickenru@node-1w7jr9pm6zp0vkmbbq0vjugw1.ipv6.telus.net) (Quit: Konversation terminated!)
[01:25:05] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 256 seconds)
[01:29:15] *** Joins: chicken_m (~chickenru@node-1w7jr9pm6zp0vkmbbq0vjugw1.ipv6.telus.net)
[02:18:40] *** Joins: atw (~user@2601:5c2:c500:76b0::78e6)
[02:30:21] *** Joins: klovett (~klovett@107.127.24.145)
[04:19:17] *** Quits: atw (~user@2601:5c2:c500:76b0::78e6) (Ping timeout: 240 seconds)
[04:40:21] *** Joins: s-liao (~s-liao@101.86.96.21)
[04:52:23] *** Joins: klovett_ (~klovett@107.127.24.145)
[04:54:20] *** Quits: ASau` (~user@lmpc.drb.insel.de) (Read error: Connection reset by peer)
[04:54:47] *** Joins: ASau` (~user@lmpc.drb.insel.de)
[04:55:35] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 268 seconds)
[06:24:21] *** Quits: klovett_ (~klovett@107.127.24.145) (Read error: Connection reset by peer)
[06:31:35] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[06:34:34] *** Joins: klovett (~klovett@107.127.24.145)
[06:35:39] *** Joins: foggynight (~foggynigh@142.134.192.54)
[06:35:43] *** Joins: klovett_ (~klovett@107.127.24.145)
[06:37:24] <foggynight> Regarding type declarations, how do you declare the type of ARGS in a procedure definition of the form: (define (func . ARGS) ...)? I'm thinking (: func (#!rest TYPE1 --> TYPE2)), is that right?
[06:39:11] *** Quits: klovett (~klovett@107.127.24.145) (Ping timeout: 268 seconds)
[06:49:44] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:09:51] *** Quits: klovett_ (~klovett@107.127.24.145) (Quit: ZZZzzz…)
[08:29:33] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:45:45] *** Quits: ublx (~ublx@user/ublx) (Quit: ublx)
[09:00:57] <foggynight> It also appears type declarations won't cause errors to be thrown across compilation units, the units page in the manual states units are only for running fully expanded and compiled code, does this mean my only option for getting type errors across files is to use modules or includes?
[09:16:24] <foggynight> Arg it doesn't seem like using modules causes type errors to be thrown across files either. Will using includes and having imports being duplicated across files cause problems other than not being able to tell if all the necessary modules for a given file have imports in that file?
[09:30:34] <foggynight> If you have any input on this, please email me at foggynight709@gmail.com, taking off for the night!
[09:30:37] *** Quits: foggynight (~foggynigh@142.134.192.54) (Quit: WeeChat 3.3)
[10:10:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[10:14:45] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[10:15:51] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:21:29] <vandusen> SPAM! SPAM! SPAM! by freeee
[11:51:09] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[12:01:56] <wasamasa> mario-goulart: thanks for your persistence
[12:03:18] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:03:32] <wasamasa> judybot: thank you for your service, it was
[12:03:33] <judybot> wasamasa: in the hallowed halls of Mackinac State. Athletic scholarship assured every aspect of your education, but money is a poor way to measure the insight your professors wrote into your little brains. An MBA degree from CMU and a Master of Accounting from Western Michigan University opens doors and better determines a positive outcome in your professional career. You don’t.
[12:03:54] <wasamasa> oh right, judybot learned to be a lot more convincing at text generation
[12:04:49] <vandusen> SPAM! SPAM! SPAM! by freee
[12:07:50] *** Joins: klovett (~klovett@107.127.24.145)
[12:08:41] <wasamasa> mario-goulart: it has been suggested recently that in case of spam, pastiche could do artificial rate limiting by making the request complete as slowly as possible, is that an option in awful?
[13:35:54] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:11f2:595b:8fe2:b0d4)
[13:35:54] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:11f2:595b:8fe2:b0d4) (Changing host)
[13:35:54] *** Joins: skapata (~Skapata@user/skapata)
[14:02:07] *** Joins: klm (~user@c052BBF51.dhcp.as2116.net)
[14:02:34] <klm> hi guys!
[14:02:38] <klm> long time :-)
[14:02:42] <wasamasa> hello
[14:02:53] <klm> hi wasamasa
[14:03:06] <wasamasa> norwegian still wants me to fly some day
[14:03:57] <klm> yeah? your ticket don't expire? We have talked about trying to make something work for this spring.
[14:04:27] <klm> But I don't know how realistic that is. I'm will be on paternity leave, won't have much time on my hands (that's what they say anyway).
[14:04:54] <klm> I don't think I've mentioned it, we have a boy!
[14:05:18] <wasamasa> I've got a voucher instead
[14:06:32] <wasamasa> congrats
[14:07:08] <klm> thanks
[14:07:37] <klm> well voucher works. I hope this round of Covid won't last as long so that we all can meet again.
[14:08:16] <Bunny351> klm: all the best to you and your family
[14:08:24] <klm> If I can't host something spring, I can probably do it autumn.
[14:08:46] <klm> Bunny351: thank you :-)
[14:12:02] <klm> Bunny351: I've been meaning to ask you about the z3 egg. I'm fascinated about the API offered by zlib being only 2 functions. Is there something fundamentally missing when all you have is one input and one output port? Could all compression ibraries offer this kind of API or would that be too limiting?
[14:12:19] <klm> I'm currently trying out some zstd bindings
[14:13:42] <Bunny351> you probably need some way to tune settings (level, effort, etc.) but, yes, basically you just have streams of data going in and out
[14:16:55] <klm> Ok, interesting. It feels a bit clumpsy writing tests for compressed data to an output. open-output-string works but it doesn't allow "streaming". I wasn't sure if it's awkward because the test use-case is unusual, or if the port-based API was a bad idea. Anyway, I'll stick to ports for now. Thanks!
[14:20:48] <wasamasa> I believe ports were a mistake
[14:21:06] <wasamasa> unidirectional ones that is
[14:21:24] <Bunny351> what's the altnernartve?
[14:21:28] <Bunny351> alternative, even
[14:21:37] <klm> in general for the language, or for a compression/decompression API?
[14:22:31] <wasamasa> in general, yes
[14:22:58] <wasamasa> who cares what kind of port it is, just have one IO abstraction and generic functions working upon it
[14:23:10] <wasamasa> rather than make me choose
[14:23:12] <klm> Hm, interesting. Ports (or perhaps dynamic scope / parameters rather) is what I miss the most when I move to other languages.
[14:23:25] <Bunny351> wasamasa: that is an ikmplementation detail of ports
[14:23:32] <wasamasa> the peak of confusion is when I have an input port when working with stdout and an output port for stdin
[14:24:04] <Bunny351> yes, bidirectionality would be nice, but that makes your bunch-of-generic-handlers more complicated
[14:24:05] <wasamasa> there is no need for them to be separated, give me one object that allows reading/writing
[14:24:14] <Bunny351> a port?
[14:24:16] * Bunny351 runs
[14:24:25] <wasamasa> a bidirectional one if you must
[14:26:17] <klm> don't you need to distinguish between open-input-string and open-output-string? you want there to be an open-string, or am I misunderstanding you?
[14:26:57] <klm> and current-output-port & current-input-port => current-port ?
[14:27:18] <wasamasa> the constructors would stay the same
[14:27:38] <wasamasa> but the procedures working with ports would no longer insist on an input or output port
[14:27:59] <wasamasa> they'd just be handed one port and error out if it doesn't implement the necessary functionality
[14:29:51] <klm> so all ports are bidirectional ones, and if your particular custom port doesn't support a direction it will error out?
[14:30:07] <wasamasa> yes
[14:30:17] <Bunny351> sounds reasonable
[14:30:32] <wasamasa> that's how for example ruby does it
[14:31:32] <klm> yeah, that might be nice. but wouldn't that mean procedures could drop the -input- or -output- part? `current-port` sounds nicer to me, the port procedure names are always very long
[14:32:13] <wasamasa> it would only allow simplifying APIs using several ports
[14:32:26] <wasamasa> like when doing subprocess control
[14:32:37] <wasamasa> or dealing with sockets
[14:32:39] <klm> yes, or tcp
[14:32:44] <klm> exactly
[14:33:37] <klm> is there another advantage I'm missing?
[14:34:34] <wasamasa> you might be able to simplify constructors
[14:34:53] <wasamasa> for example the stringio class doesn't distinguish whether you want to read or write a string
[14:35:19] <wasamasa> that would be equivalent to something like call-with-string
[14:35:44] <klm> yeah sounds fair
[14:36:21] <klm> so even the Scheme standard is uneccesarily big and complex ... *sigh*
[14:36:53] <wasamasa> I'd say it's accurate
[14:36:59] <Bunny351> well, universality can increase complexity, too
[14:37:04] <wasamasa> you only get what you specify
[14:37:14] <wasamasa> if you specify a port should only accumulate writes, you get exactly that
[14:37:31] <wasamasa> its number handling is very precise, too
[14:37:31] <Bunny351> using a port-pair instead of a bdirectional port isn't too bad
[14:38:22] <wasamasa> this style allows you to be as clever as you want to
[14:38:58] <wasamasa> you're unlikely to run into nasty surprises
[14:39:52] <wasamasa> the trade-off of having to write a bit more code for cleaner semantics is fine, but sometimes I'm envious of ruby's better hack value
[14:47:46] <fantazo> I wonder why do some languages favor recursivity to describe loops and other languages don't. Did I not get a memo or something? I mean sure you can describe a loop by a recursion, but why should you?
[14:49:00] <Bunny351> you can drop looping constructs
[14:51:27] <Bunny351> but of course you then need to detect constant-space iteration in the optimization phase
[14:59:51] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:14:13] *** Joins: s-liao (~s-liao@101.86.96.21)
[15:27:51] <fantazo> Bunny351: I can drink alcohol why driving. But that doesn't mean I should.
[15:30:29] <fantazo> bye.
[15:30:30] *** Quits: fantazo (~fantazo@192-164-154-92.hdsl.highway.telekom.at) (Quit: leaving)
[15:34:59] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:53:56] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[16:37:52] *** Joins: amazigh (~amirouche@user/amirouche)
[16:41:36] * Bunny351 can't see the analogy...
[16:51:09] *** Quits: Kooda (~kooda@natsu.upyum.com) (Ping timeout: 250 seconds)
[16:51:34] *** Joins: Kooda (~kooda@natsu.upyum.com)
[16:53:23] *** Quits: ente (~daemon@inferno.barfooze.de) (Ping timeout: 268 seconds)
[17:08:07] *** Joins: s-liao (~s-liao@101.86.96.21)
[17:09:44] <klm> can't blame fantazo for not wanting to use recursion. after all, to learn recursion you first have to learn recursion.
[17:24:01] *** Joins: ente (~daemon@inferno.barfooze.de)
[17:35:37] *** Quits: ente (~daemon@inferno.barfooze.de) (Ping timeout: 240 seconds)
[17:37:18] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[17:58:54] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Ping timeout (120 seconds))
[18:07:34] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:07:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:20:47] <mario-goulart> I think he meant taking the car when you are drunk can be dangerous.  The list can be empty.
[18:21:28] <mario-goulart> wasamasa: I think that should be possible (although I haven't tried that yet).
[18:32:42] <mario-goulart> klm: congrats!
[18:55:57] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[19:19:58] *** Joins: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net)
[19:25:05] *** Quits: alaricsp (~alaric@user/alaricsp) (Ping timeout: 268 seconds)
[19:25:10] *** Quits: shawnw (~shawn_w@c-73-225-121-73.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[19:25:33] *** Joins: alaricsp (~alaric@user/alaricsp)
[20:03:08] *** Quits: klovett (~klovett@107.127.24.145) (Quit: ZZZzzz…)
[20:18:27] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Quit: connection reset by purr)
[20:19:15] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[20:19:35] *** Joins: ente (~daemon@inferno.barfooze.de)
[20:23:17] <klm> mario-goulart: thanks!
[20:33:21] <dTal> bok bok bok
[20:37:47] *** Joins: klovett (~klovett@107.127.24.145)
[20:58:57] *** Joins: ublx (~ublx@user/ublx)
[21:09:08] <vandusen> [eggs repo (r40958, by kristianlm)] chicken-zstd eggref first draft
[21:14:53] <klm> mario-goulart: can you add my new zstd egg to the coop?
[21:15:06] <klm> test-new-egg zstd https://raw.githubusercontent.com/kristianlm/chicken-zstd/master/zstd.release-info # says "ok"
[21:25:25] *** Quits: amazigh (~amirouche@user/amirouche) (Quit: WeeChat 2.8)
[21:33:52] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Quit: connection reset by purr)
[21:34:02] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[21:35:50] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Client Quit)
[21:36:01] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[21:37:58] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Client Quit)
[21:38:09] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[21:45:58] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Quit: connection reset by purr)
[21:46:08] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[21:47:28] *** Quits: phoebos (~phoebos@kisslinux/phoebos) (Client Quit)
[21:47:39] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[21:49:09] <vandusen> [eggs repo (r40959, by mario)] release/5/egg-locations: add zstd (by Kristian Lein-Mathisen)
[21:49:21] <mario-goulart> Thanks klm!
[22:04:01] *** Joins: amazigh (~amirouche@user/amirouche)
[22:09:45] <mario-goulart> vandusen: tell fantazo: recursion is used even in chicken salads: https://i.redd.it/bic3crfmg7681.jpg
[22:09:46] <vandusen> mario-goulart: I will tell fantazo when he/she speaks again.
[22:12:12] <vandusen> [eggs] zstd version 1.0 (for CHICKEN 5) has been released
[22:13:27] *** Joins: shawnw (~shawn_w@152.44.212.188)
[22:35:34] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 256 seconds)
