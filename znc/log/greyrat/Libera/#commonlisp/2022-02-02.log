[00:00:36] <etimmons> I'm working on making ASDF give a justification of why it included a certain .asd file in the source registry (e.g., which config file ended up configuring ASDF to find it).
[00:01:02] <White_Flame> dbotton: are you trying to solve a specific problem, or just curious as to how things work?
[00:01:02] <etimmons> Hopefully that'll also be a springboard for just having the source registry be amenable to introspection in general
[00:01:30] <White_Flame> etimmons: yeah, and then QL has its own override chain of local-projects -> dist -> asdf
[00:01:43] <dbotton> White-Flame the clog builder generates currently just panels, it will generate whole projects soon
[00:02:26] <White_Flame> ok
[00:02:50] <White_Flame> I think the big issue around this is having your own modified versions of libraries that still have the same name, which are loaded in different images
[00:03:02] <dbotton> there really needs to be a simple way for a newbie to know where to put his code.
[00:03:20] <White_Flame> and then what of those modified libraries are visible by default, vs how to include them conditionally
[00:04:03] <etimmons> White_Flame: Well, QL operates outside the source registry. But that does point to an obvious next step: record for each system which particular system definition search function provided it
[00:04:37] <etimmons> dbotton: ~/common-lisp
[00:04:56] <etimmons> The only way that's not included by ASDF is if you do things a newbie is unlikely to do
[00:05:20] <dbotton> yes that is what I (when I started) eventually found out
[00:05:47] <Xach> White_Flame: incorrect - asdf takes precedence
[00:05:47] <dbotton> but confusing for a newbie who is used to choosing his own directories etc
[00:06:21] <White_Flame> dbotton: it's all about load priority.  If you put it in ~/common-lisp, anything from QL will override it.  If you put it in ~/quicklisp/local-projects/, then it'll override, but if people don't have QL they won't find it
[00:06:25] <White_Flame> Xach: oh, really?
[00:06:46] <Xach> White_Flame: always.
[00:07:02] <White_Flame> huh, I guess my use cases hasn't hit that conflict then
[00:07:30] <White_Flame> ASDF will also then override local-projects?
[00:07:36] <EdLangley[m]> I’ve never been able to override QL systems with ASDF:LOAD-ASD
[00:08:05] <Xach> White_Flame: yes. see asdf:*system-definition-search-functions*. local-projects and dist search are last.
[00:08:12] <dbotton> Xach when is the next update to quicklisp projects? (trying to time my 1.0 for builder)
[00:08:22] <etimmons> dbotton: Yeah, I think something that's missing is an "ASDF Recipes" sort of thing. where common questions like that are answered
[00:08:25] <Xach> dbotton: probably this week, within a few days.
[00:08:38] <White_Flame> so what is the expected procedure for grabbing a library, then having a copy that you're editing, without loading the asdf/ql-pathed one?
[00:08:38] <dbotton> awesome
[00:08:50] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[00:09:11] *** Quits: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41) (Quit: Leaving)
[00:09:21] *** Joins: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41)
[00:09:35] <Xach> White_Flame: i usually use local-projects because i understand how it works. i don't understand how the source registry configuration works.
[00:09:58] <dbotton> etimmons I think is critical and now a year in to using CL I still which I had a simple way to add random directories where my projects are found
[00:10:06] <White_Flame> but if .rc file ASDF setup overrides that, then it wouldn't see the local-projects one?
[00:10:34] <dbotton> wish not which
[00:10:52] <White_Flame> dbotton: I've been using ASDF/QL for years and apparently still don't understand it :-P
[00:11:11] <White_Flame> (though I haven't had load order problems per se, doing the things that I did)
[00:11:15] <Xach> White_Flame: i don't really understand what you mean, sorry. i would put it somewhere asdf knows about, because that would override the dist-provided one. local-projects is an augmentation of asdf's search, not something super-tied to quicklisp.
[00:11:39] <Xach> if there was a "conflicting" copy in asdf's search path, maybe i'd use that as my hackable version
[00:11:42] <Xach> or maybe i'd remove it
[00:12:11] <etimmons> dbotton: Some people find asdf:_central-registry_ easiest. Just push a directory into that variable and it will be searched. But that requires config to happen within CL, so if you hop back and forth between implementations it can be annoying to get it synced up and you're typically out of luck if you start an implementation without running its init file
[00:12:51] <etimmons> dbotton: I prefer the source registry. So make a directory ~/.config/common-lisp/source-registry.conf.d/ and add files to it
[00:13:00] <White_Flame> .sbclrc sets up ASDF libs that has lib FOO.  I want to edit FOO's source code, without breaking other image startups that still use FOO.  My edited system is still called FOO for now
[00:13:54] <dbotton> etimmons what would I put in that directory?
[00:13:56] <etimmons> dbotton: like adding the file 20-clog.conf with the contents (:tree "/path/to/clog") will let ASDF find any system belowe /path/to/clog
[00:14:08] <etimmons> * below
[00:14:39] *** Quits: pjb (~pjb@user/pjb) (Remote host closed the connection)
[00:14:58] <White_Flame> (however, my scenario is kinda constructed, as I rarely use ASDF raw anymore.  It's all QL so I haven't had the problems.  But some of our systems require repeatable build, and have their own local lib directory that we add onto the asdf path)
[00:16:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Read error: Connection reset by peer)
[00:21:51] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:21:59] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:23:51] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:27:06] *** Joins: Catie (~user@user/catie)
[00:27:33] <Xach> White_Flame: yeah, i guess if you want max control, different startup/config files seems plausible
[00:30:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:32:14] *** Quits: artchad (~user@public-gprs218803.centertel.pl) (Read error: Connection reset by peer)
[00:32:50] *** Joins: kathe (~kathe@49.32.163.111)
[00:33:02] <kathe> good morning everyone. :)
[00:33:32] <rotateq> Good morning kathe :) Have some parentheses for breakfast.
[00:33:54] <kathe> :D
[00:34:17] <Josh_2> Hi
[00:34:17] <kathe> it's like 0230 out here. i just woke-up too early. :)
[00:34:30] *** Joins: jess (~jess@libera/staff/cat/jess)
[00:36:58] *** Quits: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[00:40:43] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (Quit: Colleen)
[00:41:30] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[00:45:42] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[00:46:53] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:47:00] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[00:47:58] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:48:26] <kathe> is masinter still around?
[00:48:57] <kathe> masinter: are you parent's friend?
[00:53:45] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 256 seconds)
[00:53:47] *** Joins: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[00:54:29] <kathe> would the channel log maintainers provide some provision to show signoff?
[00:57:17] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:05:35] *** Joins: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:8077:c59f:a01d:f390)
[01:06:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:a86c:154c:bd0d:ad65)
[01:06:26] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[01:10:14] *** Quits: Algernon69 (~Algernon6@2a01:e0a:511:6ce0:8077:c59f:a01d:f390) (Ping timeout: 260 seconds)
[01:12:58] <White_Flame> Xach: I actually have a number of setup/loader functions in my .sbclrc, that I call at the repl at the beginning of an image, depending on what I'm doing
[01:13:00] *** Joins: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de)
[01:13:14] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[01:13:28] <White_Flame> I guess because of the global nature of the load path setup, especially if it's symlink or directory location based
[01:13:31] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[01:13:38] <kathe> aha, xach is around!
[01:13:49] <kathe> hi xach. :)
[01:13:53] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[01:13:58] <White_Flame> however, I guess the *whatever-registry* variables could be bound just for load time, but since some dependencies might auto-load components at runtime, I don't trust that
[01:14:11] <kathe> masinter: are you larry?
[01:14:40] *** Quits: kpoeck (~kpoeck@2a01:598:92ba:b949:6171:6dd6:3e6f:83bb) (Quit: Client closed)
[01:15:06] <masinter> yes, that''s me kathe
[01:15:32] <kathe> masinter: parent and me were talking about you just 3 days back. :)
[01:16:01] <masinter> parent?
[01:16:13] <kathe> sean parent. adobe. c++.
[01:16:39] <masinter> ah ok say hi
[01:16:49] <kathe> definitely. :)
[01:17:29] <kathe> masinter: glad that you too are here. hope to learn from you. :)
[01:17:31] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c) (Ping timeout: 250 seconds)
[01:17:33] *** Joins: pjb (~pjb@user/pjb)
[01:19:18] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[01:19:48] <masinter> i'm here to recruit helpers
[01:20:09] <kathe> helpers? for a project!
[01:20:21] <masinter> https://interlisp.org
[01:21:03] <masinter> i'd like to get the common lisp to be good enough to use
[01:21:06] *** Joins: gaqwas (~john@dynamic-095-115-027-162.95.115.pool.telefonica.de)
[01:21:41] <Bike> what are you doing for the compiler?
[01:21:53] <masinter> there's a virtual machine
[01:22:05] <kathe> medley interlisp seems interesting.
[01:22:12] <masinter> it's writtein in C
[01:22:38] <masinter> the C has been updated to be modern C on modern OS
[01:23:44] <Bike> oh, i see. i was asking because the project i work on is a lisp compiler framework that i thought maybe you could use. but if the code is all in C that won't really work
[01:23:59] <masinter> the VM is in C
[01:24:38] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:a86c:154c:bd0d:ad65) (Read error: Network is unreachable)
[01:24:42] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[01:27:43] <masinter> https://interlisp.org/docs/1980-local-optimization.pdf
[01:30:38] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[01:33:55] *** Quits: wacki (~wacki@87.122.94.186) (Quit: Leaving.)
[01:34:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[01:34:41] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:35:07] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[01:36:23] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:40:42] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (Remote host closed the connection)
[01:40:47] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Ping timeout: 256 seconds)
[01:40:53] *** Joins: pillton (~user@193-116-92-98.tpgi.com.au)
[01:43:33] *** Quits: kathe (~kathe@49.32.163.111) (Quit: Leaving)
[01:44:36] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[01:47:07] *** Joins: mayureshkathe (~kathe@49.32.163.111)
[01:48:58] *** Quits: molson (~molson@2001:48f8:704a:123d::75f:1037) (Ping timeout: 250 seconds)
[01:53:47] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[01:53:59] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[01:55:59] <mayureshkathe> okay, i finally settled down on a code editor; it's vim.
[01:56:05] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[01:56:22] <mayureshkathe> i tried really hard to work with emacs, but meta (alt) is painful to reach.
[01:56:50] *** Joins: akoana (~ah@user/akoana)
[01:58:09] <rotateq> you could also try spacemacs if you're more used to vim for the editing part like me
[01:58:13] <phoe> ^
[01:58:20] <phoe> spacemacs is love
[01:58:36] <rotateq> phoe: heh I know you use it too :)
[01:59:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[01:59:14] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 260 seconds)
[01:59:46] <rotateq> but on the working computer (on which I don't have root) i can deploy portacle what is also nice to have ^^
[02:02:24] *** Quits: gaqwas (~john@dynamic-095-115-027-162.95.115.pool.telefonica.de) (Ping timeout: 250 seconds)
[02:05:22] <mayureshkathe> rotateq: i'm impressed with what "vlime" has achieved even in it's nacent state.
[02:05:49] <mayureshkathe> vlime just needs more love. a lot more. :)
[02:05:50] <rotateq> oh cool, but I haven't tried that
[02:06:34] <rotateq> okay to be honest, I find vim script not weirder than elisp :)
[02:06:59] <rotateq> mayureshkathe: do you know about the climacs project?
[02:07:52] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[02:09:41] <mayureshkathe> rotateq: yes, i think it's interesting, but so is hemlock.
[02:10:04] <rotateq> or sry, not "weird" but "more different in terms of usability"
[02:10:14] <rotateq> ah right hemlock, or lem
[02:10:41] <mayureshkathe> rotateq: the real problem with me is that i've been using vi since 1997.
[02:10:42] <rotateq> but as I understood climacs has some additional goals
[02:10:59] <rotateq> mayureshkathe: Then over 20 years longer than me :D
[02:11:01] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[02:11:21] <mayureshkathe> rotateq: :)
[02:11:57] <rotateq> but i was already born in 1997 ^^
[02:12:03] <mayureshkathe> it all started under 'sco' openserver with c++ (pre 1995 enhancements).
[02:12:22] <rotateq> phew c++ *hiding* :)
[02:12:26] <mayureshkathe> rotateq: that part was pretty evident.
[02:12:42] <mayureshkathe> rotateq: i meant the birth year part. :)
[02:12:53] <rotateq> oh really? hm, I could also have been born after 1997
[02:13:21] <rotateq> but no, I can remember it now quite well, the same year when the ANSI CL standard was finalized
[02:13:25] <mayureshkathe> rotateq: then i wouldn't have been using vi 20 years more than you.
[02:13:34] <rotateq> yes right
[02:14:33] <mayureshkathe> i got exposed to emacs only in 1999, but by then, vi was firmly entrenched.
[02:14:40] <mayureshkathe> in my psyche, that is. :)
[02:14:56] <rotateq> but it was also good to have practical exercising with different types of regexes. reminds me i must go on really being able to use cl-ppcre
[02:15:16] <rotateq> vi is everywhere :)
[02:15:37] <mayureshkathe> actually, vi isn't there were 'ed' is. ;)
[02:15:52] <mayureshkathe> were == where
[02:16:14] <rotateq> ah okay, too hard for me as most things
[02:16:31] <mayureshkathe> 'ed' -> 'ex' -> vi -> vim.
[02:16:39] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[02:16:41] <rotateq> but I got to figuring out today some more things with metaobjects
[02:17:22] <rotateq> mayureshkathe: and all "modern" IDEs converge to the idea of emacs (not a certain implementation)
[02:17:32] <mayureshkathe> phoe is considering writing a book on 'mop' and 'clos'. that's like "yay". :)
[02:17:57] <phoe> hey come on it's only plans and it'll only happen in like 2024 earliest gimme a break yo
[02:17:58] <rotateq> ohh, that would be good
[02:18:24] <mayureshkathe> phoe: plans are good. "yay" nevertheless. :)
[02:18:27] <rotateq> phoe: "I love it when a plan works."
[02:18:58] <mayureshkathe> phoe: if not 2024 then maybe by 2026! :)
[02:19:44] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[02:20:29] <rotateq> phoe: take all time you need
[02:20:56] <mayureshkathe> phoe: i tried to DM you on twitter, it's not allowing me.
[02:21:16] <mayureshkathe> phoe: i would like to be a beta tester for your upcoming book.
[02:21:30] <phoe> mayureshkathe: hmm
[02:21:34] <phoe> let me check the twitter thing
[02:21:39] <rotateq> in Germany "DM" stands still for "Deutsche Mark", our currency before euro
[02:22:00] <mayureshkathe> okay.
[02:22:08] *** Parts: mayureshkathe (~kathe@49.32.163.111) ()
[02:22:10] <phoe> ;; in D&D also stands for Dungeon Master, but that's #lispcafe material
[02:22:28] *** Quits: silasfox (~sbv@p200300cec7219d00ef0f653f23257d7e.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[02:22:42] <rotateq> mayureshkathe: ah yes as I asked heisig to read parts of his new PhD thesis and plz don't get me wrong, not for any technical things, but to look if someone on some steps lower can get the central ideas
[02:22:51] <rotateq> nooo :D
[02:22:59] <rotateq> yes phoe
[02:24:40] <edgar-rft> everybody in germany knows that DM is a drugstore -> https://www.dm.de
[02:25:08] <rotateq> haha edgar-rft, good last point for that :)
[02:25:48] <edgar-rft> probably nobody in germany thinks of DM as Deutsche Mark anymore
[02:26:25] <rotateq> and as I'm a nobody :)
[02:27:35] <edgar-rft> you an me are the nobodiest of all
[02:27:41] <rotateq> phoe: with the Common Lisp Recipes 2 book you told me about what is now laid on ice, was there a first concept what to add or change?
[02:28:10] * phoe takes it to query
[02:31:03] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[02:36:34] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 260 seconds)
[02:38:43] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:1911:b0fe:6f92:2189)
[02:40:09] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[02:41:50] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[02:48:18] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[02:51:50] *** Quits: pve (~pve@178-55-121-71.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[02:57:47] *** Quits: orestarod (~orestarod@2a02:2149:8ac6:5900:9a3d:dd76:4837:8b41) (Ping timeout: 252 seconds)
[03:02:39] *** Joins: cosimone` (~user@5.170.240.195)
[03:04:06] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[03:21:05] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[03:43:17] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:1911:b0fe:6f92:2189) (Remote host closed the connection)
[03:49:22] *** Quits: cosimone` (~user@5.170.240.195) (Quit: ERC (IRC client for Emacs 27.1))
[03:52:49] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[03:59:15] *** Joins: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net)
[04:04:46] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[04:05:58] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:10:02] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[04:12:05] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:12:33] *** Joins: Bike (~Bike@71.69.170.70)
[04:12:58] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[04:19:35] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net)
[04:22:35] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[04:26:51] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[04:32:22] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[04:33:37] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[04:36:27] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[04:36:51] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[04:38:15] *** Joins: Alfr (~Alfr@user/alfr)
[04:45:43] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[04:45:44] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[04:47:26] *** Quits: VincentVega (~user@212.97.4.17) (Ping timeout: 256 seconds)
[04:49:59] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[04:51:24] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[04:52:11] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[04:56:35] <jeosol> rotateq: what do you mean by laid on ice - hibernating, stalled, ...?
[05:01:20] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[05:04:09] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[05:05:41] <Guest74> i hope he responds.  Sounds like an interesting idiom. I wonder the language it comes from.
[05:06:59] <dre> I swear that's english
[05:10:06] <Guest74> well, there's put on ice in english.  but that doesn't seem to work with what was said.
[05:10:30] <EdLangley[m]> Yeah, it usually means something like “not being actively worked on”
[05:12:33] *** Quits: Catie (~user@user/catie) (Remote host closed the connection)
[05:13:14] *** Joins: Catie (~user@user/catie)
[05:15:21] *** scymtym_ is now known as scymtym
[05:15:47] <rotateq> jeosol: ehm sry yes i think so
[05:16:15] <rotateq> Guest74: yes was too directly translated from the german pun
[05:16:33] <jeosol> rotateq: this was announced recently? what reason did phoe give?
[05:16:47] <rotateq> EdLangley[m]: or "the idea is kept still in mind for the future"
[05:16:54] <rotateq> no nothing announced
[05:17:03] <Guest74> oh, I thought phoe just announced he finished a chapeter
[05:17:18] <Guest74> s/chapeter/chapter
[05:17:41] <rotateq> ah here a better translation "The idea is probably on hold."
[05:19:54] <Guest74> out of curiousity, is it all one word in german?
[05:22:36] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 250 seconds)
[05:23:13] <rotateq> no it's "auf Eis gelegt"
[05:24:30] <Guest74> Thanks.  Sorry for the off topicness.
[05:24:38] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[05:27:05] *** Quits: osp (~osp@84.19.72.107) (Quit: Leaving)
[05:29:25] *** Joins: Bike (~Bike@71.69.170.70)
[05:37:33] *** Quits: Catie (~user@user/catie) (Quit: heading home)
[05:41:20] *** Joins: s-liao (~s-liao@101.86.96.21)
[05:48:06] *** Joins: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net)
[05:58:38] *** Joins: gko (~gko@user/gko)
[06:02:28] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[06:08:15] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[06:20:32] <fe[nl]ix> beach: you need to switch to HTTPS for metamodular.com otherwise browsers will soon start showing a warning, since it's HTTP-only
[06:20:38] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[06:22:22] *** Joins: aeth_ (~aeth@user/aeth)
[06:25:11] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[06:25:15] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[06:26:56] *** aeth_ is now known as aeth
[06:27:10] *** Quits: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:28:46] *** Quits: gko (~gko@user/gko) (Remote host closed the connection)
[06:38:16] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[06:42:24] <Josh_2> You can easily get a cert with certbot for easy https
[06:51:00] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[06:57:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:59:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[07:00:36] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[07:02:27] *** Joins: aeth (~aeth@user/aeth)
[07:04:48] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[07:08:35] <Josh_2> Shinmera: have you seen the new twitter callback feature?
[07:10:01] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[07:20:42] *** Joins: kathe (~kathe@49.32.161.221)
[07:20:59] <kathe> good morning everyone. again that is. ;)
[07:21:23] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[07:25:36] <Josh_2> To answer my own question, yes
[07:25:50] <mfiano> Any idea why this blows my stack at macro-expansion or compile time (when loading)? https://gist.github.com/mfiano/a8144dfc20656866e45f95e41776f78d
[07:26:01] <mfiano> I'll give more context if needed
[07:27:33] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[07:28:39] <Bike> probably isn't what's causing the problem, but is that double backquote intentional? doesn't seem like it
[07:28:42] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 250 seconds)
[07:28:58] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:29:25] <mfiano> Yes for now I just want to test that it expands to that form in each defmethod (I don't want #'g-c-a-t evaluated)
[07:29:59] <mfiano> The macro is incomplete. I wrote some of it, tested, and got a stack overflow
[07:30:22] <mfiano> Oh I see what you mean
[07:30:29] <Bike> i see. well, i don't see anything obvious. and i assume none of the lists being mapped over are circular.
[07:30:41] <beach> Good morning everyone!
[07:31:26] <kathe> beach: good morning. :)
[07:31:30] <beach> fe[nl]ix: I don't know how to do that.
[07:31:38] <Bike> oh, hm... are the permutations map-permutations constructs allowed to share structure?
[07:31:56] <kathe> would anyone be able and willing to comment on "land of lisp"?
[07:32:18] <mfiano> Bike: Not by default. There is :copy t
[07:32:31] <Bike> that makes it sound like they do share structure unless you specify :copy t
[07:32:31] <beach> kathe: http://metamodular.com/Books/land-of-lisp.html
[07:32:41] <mfiano> t is the default keyword argument
[07:33:25] <Bike> hmm
[07:33:29] <kathe> beach: thanks. i'm deleting that book off my list.
[07:33:46] <beach> Guest74: I don't think I have much written down.  What more is there to say?
[07:34:31] <mfiano> illuminant-pairs is populated with a long list.
[07:34:48] <Bike> mfiano: well, this is the only thing i can think of, so i'd throw in a check to see that illuminant-pairs does not in fact end up circular
[07:35:16] <mfiano> Well it prints
[07:35:24] <Bike> alternately just do (push (copy-list x) illuminant-pairs)
[07:35:25] <mfiano> With a terminal cons
[07:35:42] <Bike> er, sorry, i got mixed up
[07:35:59] <Bike> it wouldln't be illuminant-pairs that would be screwed up if its elements shared structure, but rather the elements would be
[07:36:12] <mfiano> Bike: inline expansion: https://gist.github.com/mfiano/8f9351dbc41afd17c2c91be56af4edb1
[07:36:20] <Bike> but if you're looking at it printed out you're presumably only seeing two element lists, so that can't be it
[07:39:32] <Bike> and *chromatic-adaptation-transforms* isn't circular either? that's a stumper.
[07:40:10] <mfiano> https://gist.github.com/mfiano/bc7d883c9683267fee6306726ccd0acc
[07:40:51] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[07:41:00] <Bike> huh
[07:41:14] <Bike> maybe the compiler is just choking on the hundreds of method definitions. does it work if the lists are shorter?
[07:41:39] <mfiano> I'll subseq the perms
[07:41:41] <mfiano> sec
[07:42:45] <mfiano> https://gist.github.com/mfiano/0e418847c325aa34d34389fbf6ccb6c2
[07:43:15] <mfiano> I guess I am just generating too much code...
[07:44:25] <mfiano> My problem is, each method will be performing the same algorithm, and that can be reduced down to a single array that I want to expand to (load-time-value some-unique-array-per-method)
[07:44:40] <mfiano> Because the algorithm is too intensive for runtime
[07:45:06] <mfiano> Not sure what my options are now :/
[07:45:45] <Bike> you could maybe hack it by dividing into multiple top level forms
[07:46:23] <mfiano> Not exactly sure how you mean.
[07:47:29] <Bike> like instead of (progn a-million-defmethods) you have (progn a-hundred-thousand-defmethods) (progn a-hundred-thousand-defmethods) ...
[07:47:48] <mfiano> I wonder how many methods this actually is...
[07:47:53] <Bike> if the compiler is choking on the amount of code, it's probably more because of having them all in the same top level form, rather than just having them at all
[07:48:26] <Bike> looks like at least several thousand?
[07:48:41] <mfiano> 552 permutations
[07:48:56] <mfiano> 8 *chromatic-transformation-transforms*
[07:49:16] <EdLangley[m]> I ran into this when I tried to use babel to turn a node project into ES3 and then load the generated code with cl-js
[07:49:25] <fe[nl]ix> beach: where is that website hosted ?
[07:49:36] <EdLangley[m]> For some reason, cljs can't handle the tremendous amount of code in the typical node project :)
[07:49:40] <beach> fe[nl]ix: Network solutions.
[07:52:01] <fe[nl]ix> I imagine they have a control panel somewhere where you can setup HTTPS hosting with automatically renewed certificates
[07:52:44] <beach> fe[nl]ix: Maybe so.  My problem is that there were 5 words in that phrase that I don't understand.  But I'll investigate.  Thanks.
[07:58:53] *** Joins: beach` (~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)
[07:59:29] *** Quits: kathe (~kathe@49.32.161.221) (Quit: leaving)
[07:59:34] *** Quits: beach (~user@2a01:cb19:150:3400:31b6:1d0a:d09:5e43) (Killed (NickServ (GHOST command used by beach`!~user@2a01:cb19:150:3400:62f7:c889:3c24:ec89)))
[07:59:37] *** beach` is now known as beach
[08:00:24] *** Joins: karlosz (~karlosz@47.151.136.69)
[08:00:51] <mfiano> Bike: I am at a loss. Here is 1 type only, that takes about 30 seconds to macro-expand (and the permutation list generates instantaneously). I don't think this is a correct expansion, because perms length is only 552
[08:00:55] <mfiano> https://gist.github.com/mfiano/e52eee3405ee5103c8569323a3d872d3
[08:01:24] <mfiano> Well maybe that is 552 methods actually. line count seems about right
[08:01:36] <mfiano> No idea why that takes forever to expand though
[08:01:39] <Bike> each method is about three lines, so, yeah
[08:02:15] <mfiano> I mean it's not doing much 552 times. Certainly not 30 seconds enough
[08:03:17] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[08:03:32] <Bike> yeah, i suppose that is kind of weird. profile?
[08:04:02] <mfiano> How would I profile macro-expansion?
[08:05:46] <beach> mfiano: Are you using SBCL?  Then try the statistical profiler.
[08:06:07] <Bike> throw (macroexpand-1 '(generate-chromatic-adaptation-methods :bradford)) at the profiler
[08:06:53] <mfiano> Ok
[08:08:29] *** Joins: semz_ (~semz@user/semz)
[08:09:24] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[08:09:51] <mfiano> Well that completed instantly, so I guess it is just the inline macrostepper that is slow. However, I get a very strange error at load time now.
[08:11:03] <mfiano> https://gist.github.com/mfiano/c4aa627df52f30a16872dbe9da4c58ea
[08:11:10] <mfiano> and ultimately signals a condition: There is no class named :LED-B3.
[08:11:10] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:11:20] <mfiano> I am expanding to EQL specialization...
[08:12:01] <mfiano> Oh no I'm not
[08:12:05] <mfiano> Sigh I'm an idiot
[08:12:10] <Bike> oh, yeah, i was gonna point that out but figured it wasn't relevant
[08:12:53] <mfiano> Although, I am still only generating bradford. Let me try them all again
[08:16:36] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:17:18] <mfiano> I don't understand why macroexpand-1 in the statistical profiler completes too soon to give any profiling data, but it takes like 30 seconds to compile/load the fasl
[08:17:43] <mfiano> i wouldn't expect methods to take long to compile until their first invocation
[08:17:58] <EdLangley[m]> Maybe profile compile?
[08:18:21] <Bike> uh, compilation is going to take longer than macroexpansion basically always.
[08:18:49] <Bike> compiling things is hard. even if it doesn't build up the discriminating function until it's called, you're telling it to compile several thousand method bodies.
[08:19:01] <mfiano> good call...that is taking some time
[08:19:42] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[08:19:45] <EdLangley[m]> So, you could provide a macro that compiles only the methods the user needs
[08:19:53] <Bike> also, i don't remotely understand what you're doing, but several thousand eql-specialized methods is probably not the best way to do it
[08:19:54] <mfiano> ok and considering i didn't even get to the meat of the computationally expensive method bodies, I fear I need to find another solution
[08:20:16] <Bike> like, could you not just use a hash table or something.
[08:20:52] <mfiano> The whole point is so I don't have to run a 20 line linear algebra matrix multiplication pipeline at runtime for each pixel of an arbitrarily sized image. just multiplying the pixel by a single matrix (that i want these methods to reduce to) would be FAR more efficient
[08:21:25] <mfiano> I am avoiding hash tables completely because of thread contention when synchronizing with a mutex
[08:21:32] <mfiano> also, not very portable
[08:22:11] <Bike> i mean. there's like a pretty decent chance that method lookup will also go through a hash table.
[08:22:39] <EdLangley[m]> So, if you precompute the hash table and then only read, you shouldn’t need to synchronize, right?
[08:23:01] <Bike> are you saying that each of these methods is supposed to return a matrix, and then the caller applies that to some vector representing a pixel
[08:23:06] <mfiano> Unfortunately SBCL yells loudly if 2 threads attempt to read a hash table even
[08:23:23] <mfiano> Bike: Yes
[08:23:24] <Bike> because in that case you could just store the matrices in the table, seems like
[08:23:32] <EdLangley[m]> Hmm, I haven’t seen that.
[08:23:43] <Bike> yells? like, you get an error?
[08:24:00] <mfiano> Yeah a debugger for each lparallel thread.
[08:24:08] <Bike> what's the error?
[08:24:15] <mfiano> Oh god, hell if I remember.
[08:26:04] <mfiano> https://github.com/j3pic/cl-async-await/issues/3 maybe?
[08:28:05] <Bike> i am not sure how a hash table would be corrupted just from reads...
[08:28:20] <Bike> and as a dumb little test i just spawned a few threads to read from the same key of a hash table a million times, and that went fine
[08:28:58] <EdLangley[m]> I’m not seeing any error from concurrent reads either
[08:29:28] <mfiano> Interesting. Maybe I am mis-remembering, though I'm not sure how SBCL could know that another thread isn't currently writing
[08:30:19] <Bike> don't think it does. i checked the source, and this error is signaled when sbcl determines a hash table has been corrupted. like, if some previous operations broke it, a subsequent operation might result in this error
[08:30:23] <EdLangley[m]> It’s perfectly fine to say that modifying the hash-table is UB
[08:30:40] <EdLangley[m]> As far as your library is concerned
[08:30:48] <mfiano> Yes I agree.
[08:30:55] <EdLangley[m]> That is, if the hash-table is an implementation detail.
[08:30:59] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:31:20] <mfiano> I will just have to think how to represent everything.
[08:31:20] *** Quits: pmwals09 (~pmwals09@c-73-218-223-243.hsd1.ma.comcast.net) (Remote host closed the connection)
[08:32:04] <mfiano> There are 3 specializers in the GF. I don't really want runtime EQUAL testing on a 3-tuple per pixel just to hash to get the right value out.
[08:32:05] <EdLangley[m]> Also, ironclad takes a while to load
[08:32:10] <mfiano> Maybe I am being paranoid though
[08:32:17] <EdLangley[m]> It’s not entirely out of the question just to eat the compile-time cost
[08:32:49] <Bike> i think you are being optimistic to think that method dispatch will never do runtime testing on a tuple
[08:33:35] <mfiano> I very well could be. I just like methods because now I have to think about extensibility
[08:33:42] <Bike> if you're concerned enough, you could implement your own hashing scheme
[08:35:26] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:36:16] <mfiano> I was planning on having the user define a set of 3 different methods to define a color space, that can be easily introspectible with M-., but now I have to stick everything in a single global opaque hash table, without some other convenient introspection interface.
[08:36:35] <mfiano> I will think more.
[08:36:46] <pillton> I thought there was an API for M-.?
[08:37:04] <EdLangley[m]> The other option is to figure out some way to only define the methods the user wants
[08:37:29] <Bike> scrolling through a list of thousands of methods on the M-. screen might not actually be that easy
[08:38:35] <mfiano> Eh it's not that difficult with search. At least not with my thousands of GLSL-like vector swizzle operators :)
[08:39:34] <mfiano> a buffer-narrowing search package comes in handy here, too
[08:42:26] <mfiano> In any case, I'm not sure I wouldn't run into the same problem with a hash table. The matrices are the product of a computationally expensive algorithm. I'm running into compile times taking too long without even performing the algorithm, just by the shear number of what will be hash table entries to populate.
[08:42:50] <mfiano> s/entries/keys/
[08:43:25] <mfiano> I guess maybe this should just be lazily memoized
[08:45:26] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Ping timeout: 256 seconds)
[08:45:31] <mfiano> Ah but that could happen any time at runtime, with multiple threads, so throws the hash table idea out for memoization.
[08:45:49] *** Joins: s-liao (~s-liao@101.86.96.21)
[08:45:50] <mfiano> I clearly need to come up with some better ideas. I should call it for today.
[08:47:26] *** Joins: Oladon (~olad@98.43.81.226)
[08:53:12] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[08:54:36] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[08:57:50] *** Joins: chrnybo (~user@89.79-161-60.customer.lyse.net)
[08:57:50] *** Quits: Bike (~Bike@71.69.170.70) (Quit: Connection closed)
[09:06:46] *** Quits: chrnybo (~user@89.79-161-60.customer.lyse.net) (Read error: Connection reset by peer)
[09:08:12] *** Quits: karlosz (~karlosz@47.151.136.69) (*.net *.split)
[09:08:12] *** Quits: Alfr (~Alfr@user/alfr) (*.net *.split)
[09:08:12] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (*.net *.split)
[09:08:12] *** Quits: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net) (*.net *.split)
[09:08:12] *** Quits: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de) (*.net *.split)
[09:08:12] *** Quits: Colleen (~fermion@supersolid.equilibrium.tymoon.eu) (*.net *.split)
[09:08:12] *** Quits: raeda (~raeda@72.49.252.109) (*.net *.split)
[09:08:12] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (*.net *.split)
[09:08:12] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (*.net *.split)
[09:08:12] *** Quits: occ (~occ@user/occ) (*.net *.split)
[09:08:12] *** Quits: dbotton (sid492350@lymington.irccloud.com) (*.net *.split)
[09:08:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[09:08:12] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (*.net *.split)
[09:08:12] *** Quits: froggey (~froggey@li1514-95.members.linode.com) (*.net *.split)
[09:08:12] *** Quits: mgxm_ (~mgxm@user/mgxm) (*.net *.split)
[09:08:12] *** Quits: alvaro121 (~aa@201.230.126.66) (*.net *.split)
[09:08:12] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (*.net *.split)
[09:08:13] *** Quits: contrapunctus (a75f5b1571@jabberfr.org) (*.net *.split)
[09:08:13] *** Quits: stack1 (~stack@ctrl-c.club) (*.net *.split)
[09:08:13] *** Quits: cross_ (~cross@spitfire.i.gajendra.net) (*.net *.split)
[09:08:13] *** Quits: danieli (~danieli@user/danieli) (*.net *.split)
[09:08:13] *** Quits: Shinmera (~shinmera@shirakumo/shinmera) (*.net *.split)
[09:08:13] *** Quits: z3t0 (~z3t0@146.71.14.98) (*.net *.split)
[09:08:13] *** Quits: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com) (*.net *.split)
[09:08:13] *** Quits: amk (~amk@109.255.169.126) (*.net *.split)
[09:08:13] *** Quits: russe (~user@cl-user.org) (*.net *.split)
[09:08:13] *** Quits: gjvc (~gjvc@user/gjvc) (*.net *.split)
[09:08:13] *** Quits: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt) (*.net *.split)
[09:08:13] *** Quits: les_ (~whome@user/les) (*.net *.split)
[09:08:13] *** Quits: TMA (~tma@twin.jikos.cz) (*.net *.split)
[09:08:13] *** Quits: hubvu_ (sid495858@tinside.irccloud.com) (*.net *.split)
[09:08:13] *** Quits: materialfuture (~materialf@149.248.8.187) (*.net *.split)
[09:08:13] *** Quits: skyl4rk (~tlvb@user/tlvb) (*.net *.split)
[09:08:13] *** Quits: Oladon (~olad@98.43.81.226) (*.net *.split)
[09:08:13] *** Quits: semz_ (~semz@user/semz) (*.net *.split)
[09:08:13] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (*.net *.split)
[09:08:14] *** Quits: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net) (*.net *.split)
[09:08:14] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (*.net *.split)
[09:08:14] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[09:08:14] *** Quits: Josh_2 (~user@37.25.47.130) (*.net *.split)
[09:08:14] *** Quits: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net) (*.net *.split)
[09:08:14] *** Quits: susam (~susam@user/susam) (*.net *.split)
[09:08:14] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[09:08:14] *** Quits: _whitelogger (~whitelogg@uruz.whitequark.org) (*.net *.split)
[09:08:14] *** Quits: robin (~robin@user/terpri) (*.net *.split)
[09:08:14] *** Quits: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2) (*.net *.split)
[09:08:14] *** Quits: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f) (*.net *.split)
[09:08:14] *** Quits: splittist (sid17737@id-17737.tinside.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: gko` (~user@user/gko) (*.net *.split)
[09:08:14] *** Quits: payphone (dd09ba4109@2604:bf00:561:2000::20b) (*.net *.split)
[09:08:14] *** Quits: jasom (f3e90f0325@2604:bf00:561:2000::3a6) (*.net *.split)
[09:08:14] *** Quits: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf) (*.net *.split)
[09:08:14] *** Quits: etiago (~etiago@user/etiago) (*.net *.split)
[09:08:14] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: drmeister (sid45147@id-45147.ilkley.irccloud.com) (*.net *.split)
[09:08:14] *** Quits: |smlckz| (~smlckz@user/smlckz) (*.net *.split)
[09:08:14] *** Quits: Krystof (~user@81.174.155.115) (*.net *.split)
[09:08:14] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[09:08:14] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[09:08:14] *** Quits: Equill (~Equill@80.30.200.244) (*.net *.split)
[09:08:15] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (*.net *.split)
[09:08:15] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[09:08:15] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[09:08:15] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[09:08:15] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[09:08:15] *** Quits: etimmons (m-fyxyzb@li834-247.members.linode.com) (*.net *.split)
[09:08:15] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[09:08:15] *** Quits: mcoll (1cd8fbb055@2604:bf00:561:2000::160) (*.net *.split)
[09:08:15] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[09:08:15] *** Quits: axvr (757f658d76@2604:bf00:561:2000::e1) (*.net *.split)
[09:08:15] *** Quits: brown121407 (1fd27a54a7@gnu/webmaster/smarton) (*.net *.split)
[09:08:15] *** Quits: srhm (dda3db84b5@user/srhm) (*.net *.split)
[09:08:15] *** Quits: theothornhill (4948e39ef8@2604:bf00:561:2000::40) (*.net *.split)
[09:08:15] *** Quits: thonkpod (~thonkpod@user/thonkpod) (*.net *.split)
[09:08:15] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[09:08:15] *** Quits: iisi (sid19824@id-19824.hampstead.irccloud.com) (*.net *.split)
[09:08:15] *** Quits: light (~light@user/light) (*.net *.split)
[09:08:15] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[09:08:15] *** Quits: lewisje (~lewisje@72.49.207.113) (*.net *.split)
[09:08:15] *** Quits: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[09:08:15] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (*.net *.split)
[09:08:15] *** Quits: ogamita`` (~t@hubble.informatimago.com) (*.net *.split)
[09:08:15] *** Quits: hirez (~hirez@104.128.237.40) (*.net *.split)
[09:08:15] *** Quits: jsatk__ (sid304796@id-304796.helmsley.irccloud.com) (*.net *.split)
[09:08:16] *** Quits: flip214 (~marek@user/flip214) (*.net *.split)
[09:08:16] *** Quits: Oddity (~Oddity@user/oddity) (*.net *.split)
[09:08:16] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[09:08:16] *** Quits: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de) (*.net *.split)
[09:08:16] *** Quits: psf (~pi@206.55.172.18) (*.net *.split)
[09:08:16] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (*.net *.split)
[09:08:16] *** Quits: [smlckz] (3329f5a75b@user/smlckz) (*.net *.split)
[09:08:16] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (*.net *.split)
[09:08:16] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[09:08:16] *** Quits: phadthai (~mmondor@user/phadthai) (*.net *.split)
[09:08:16] *** Quits: specbot (~specbot@common-lisp.net) (*.net *.split)
[09:08:16] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[09:08:16] *** Quits: hhdave (~hhdave@ip212.ip-193-70-71.eu) (*.net *.split)
[09:08:17] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (*.net *.split)
[09:08:17] *** Quits: ns12 (~ns12@user/ns12) (*.net *.split)
[09:08:17] *** Quits: pillton (~user@193-116-92-98.tpgi.com.au) (*.net *.split)
[09:08:17] *** Quits: stylewarning (sid241636@id-241636.helmsley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (*.net *.split)
[09:08:17] *** Quits: yottabyte (uid195082@id-195082.lymington.irccloud.com) (*.net *.split)
[09:12:25] *** Quits: utis (~utis@84.208.160.26) (Ping timeout: 256 seconds)
[09:12:25] *** Quits: fitzsim (~user@69-165-165-189.dsl.teksavvy.com) (Ping timeout: 256 seconds)
[09:16:56] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[09:21:15] *** Joins: Oddity (~Oddity@user/oddity)
[09:21:15] *** Joins: dstein64 (~dstein64@dannyadam.com)
[09:21:15] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[09:21:15] *** Joins: psf (~pi@206.55.172.18)
[09:21:15] *** Joins: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de)
[09:21:15] *** Joins: [smlckz] (3329f5a75b@user/smlckz)
[09:21:15] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[09:21:15] *** Joins: luis (~luis@lisp/luis)
[09:21:15] *** Joins: phadthai (~mmondor@user/phadthai)
[09:21:15] *** Joins: specbot (~specbot@common-lisp.net)
[09:21:15] *** Joins: Fade (fade@outrider.deepsky.com)
[09:21:15] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[09:21:15] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[09:21:15] *** Joins: ns12 (~ns12@user/ns12)
[09:21:15] *** erbium.libera.chat sets mode: +o luis
[09:22:45] *** Joins: Oladon (~olad@98.43.81.226)
[09:22:45] *** Joins: semz_ (~semz@user/semz)
[09:22:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:22:45] *** Joins: molson (~molson@2001-48F8-704A-123D-0-0-75F-1037-static.midco.net)
[09:22:45] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[09:22:45] *** Joins: cylb (~cylb@pool-173-76-181-138.bstnma.fios.verizon.net)
[09:22:45] *** Joins: easye (~user@oxi.slack.net)
[09:22:45] *** Joins: Josh_2 (~user@37.25.47.130)
[09:22:45] *** Joins: susam (~susam@user/susam)
[09:22:45] *** Joins: _whitelogger (~whitelogg@uruz.whitequark.org)
[09:22:45] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:45] *** Joins: robin (~robin@user/terpri)
[09:22:45] *** Joins: lottaquestions_ (~nick@2607:fa49:5041:a200:c011:d62d:2c14:89f2)
[09:22:45] *** Joins: sveit_ (~sveit@2001:19f0:ac01:247:5400:ff:fe5c:689f)
[09:22:45] *** Joins: splittist (sid17737@id-17737.tinside.irccloud.com)
[09:22:45] *** Joins: gko` (~user@user/gko)
[09:22:45] *** Joins: payphone (dd09ba4109@2604:bf00:561:2000::20b)
[09:22:45] *** Joins: jasom (f3e90f0325@2604:bf00:561:2000::3a6)
[09:22:45] *** Joins: dre (~dre@2001:8003:c932:c301:77c0:cff4:f6dd:6abf)
[09:22:45] *** Joins: etiago (~etiago@user/etiago)
[09:22:45] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[09:22:45] *** Joins: drmeister (sid45147@id-45147.ilkley.irccloud.com)
[09:22:45] *** Joins: |smlckz| (~smlckz@user/smlckz)
[09:22:45] *** Joins: Krystof (~user@81.174.155.115)
[09:22:45] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[09:22:45] *** Joins: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[09:22:45] *** Joins: Equill (~Equill@80.30.200.244)
[09:22:45] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[09:22:45] *** Joins: opcode (~opcode@user/opcode)
[09:22:45] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:22:45] *** Joins: unyu (~pyon@user/pyon)
[09:22:45] *** Joins: lagash (lagash@lagash.shelltalk.net)
[09:22:45] *** Joins: etimmons (m-fyxyzb@li834-247.members.linode.com)
[09:22:45] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[09:22:45] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[09:22:45] *** Joins: mcoll (1cd8fbb055@2604:bf00:561:2000::160)
[09:22:45] *** Joins: sm2n (ae95cb1267@user/sm2n)
[09:22:45] *** Joins: axvr (757f658d76@2604:bf00:561:2000::e1)
[09:22:45] *** Joins: theothornhill (4948e39ef8@2604:bf00:561:2000::40)
[09:22:45] *** Joins: srhm (dda3db84b5@user/srhm)
[09:22:45] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[09:22:45] *** Joins: thonkpod (~thonkpod@user/thonkpod)
[09:22:45] *** Joins: iisi (sid19824@id-19824.hampstead.irccloud.com)
[09:22:45] *** Joins: light (~light@user/light)
[09:22:45] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[09:22:45] *** Joins: lewisje (~lewisje@72.49.207.113)
[09:22:45] *** Joins: MetaYan (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[09:22:45] *** Joins: ogamita`` (~t@hubble.informatimago.com)
[09:22:45] *** Joins: cpape`` (~user@2a01:4f9:c010:632d::1)
[09:22:45] *** Joins: hirez (~hirez@104.128.237.40)
[09:22:45] *** Joins: jsatk__ (sid304796@id-304796.helmsley.irccloud.com)
[09:22:45] *** Joins: flip214 (~marek@user/flip214)
[09:23:29] *** Joins: chrnybo` (~user@89.79-161-60.customer.lyse.net)
[09:23:35] *** Joins: utis (~utis@84.208.160.26)
[09:23:35] *** Joins: karlosz (~karlosz@47.151.136.69)
[09:23:35] *** Joins: Alfr (~Alfr@user/alfr)
[09:23:35] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[09:23:35] *** Joins: mister_m (~user@c-73-110-154-209.hsd1.il.comcast.net)
[09:23:35] *** Joins: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[09:23:35] *** Joins: Colleen (~fermion@supersolid.equilibrium.tymoon.eu)
[09:23:35] *** Joins: raeda (~raeda@72.49.252.109)
[09:23:35] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[09:23:35] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[09:23:35] *** Joins: occ (~occ@user/occ)
[09:23:35] *** Joins: dbotton (sid492350@lymington.irccloud.com)
[09:23:35] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[09:23:35] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[09:23:35] *** Joins: froggey (~froggey@li1514-95.members.linode.com)
[09:23:35] *** Joins: mgxm_ (~mgxm@user/mgxm)
[09:23:35] *** Joins: gjvc (~gjvc@user/gjvc)
[09:23:35] *** Joins: alvaro121 (~aa@201.230.126.66)
[09:23:35] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca)
[09:23:35] *** Joins: contrapunctus (a75f5b1571@jabberfr.org)
[09:23:35] *** Joins: stack1 (~stack@ctrl-c.club)
[09:23:35] *** Joins: cross_ (~cross@spitfire.i.gajendra.net)
[09:23:35] *** Joins: danieli (~danieli@user/danieli)
[09:23:35] *** Joins: Shinmera (~shinmera@shirakumo/shinmera)
[09:23:35] *** Joins: z3t0 (~z3t0@146.71.14.98)
[09:23:35] *** Joins: jmpeax (~jmpeax@host-68-169-157-168.VALOLT2.epbfi.com)
[09:23:35] *** Joins: amk (~amk@109.255.169.126)
[09:23:35] *** Joins: russe (~user@cl-user.org)
[09:23:35] *** Joins: hineios (~hineios@a95-93-142-124.cpe.netcabo.pt)
[09:23:35] *** Joins: les_ (~whome@user/les)
[09:23:35] *** Joins: TMA (~tma@twin.jikos.cz)
[09:23:35] *** Joins: hubvu_ (sid495858@tinside.irccloud.com)
[09:23:35] *** Joins: materialfuture (~materialf@149.248.8.187)
[09:23:35] *** Joins: skyl4rk (~tlvb@user/tlvb)
[09:24:07] *** Joins: pillton (~user@193-116-92-98.tpgi.com.au)
[09:24:51] *** Joins: yottabyte (uid195082@id-195082.lymington.irccloud.com)
[09:24:51] *** Joins: stylewarning (sid241636@id-241636.helmsley.irccloud.com)
[09:24:51] *** Joins: jcowan (sid325434@id-325434.ilkley.irccloud.com)
[09:28:37] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[09:32:21] <mfiano> Well, the funny thing is everything compiles instantly if I just populate a defvar at compile time with all 6960 matrices, including the computationally expensive algorithm for each to derive them.
[09:32:52] <mfiano> So I have a hash table that is populated instantaneously. Something a macro was having a very hard to with.
[09:33:03] <mfiano> hard time*
[09:36:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:41:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[09:49:14] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:50:05] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: sleep)
[09:53:18] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[09:54:22] *** Joins: domovod (~domovod@176.196.122.197)
[10:02:01] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 245 seconds)
[10:09:39] *** Joins: notzmv (~zmv@user/notzmv)
[10:12:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:15:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:16:06] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:17:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[10:17:43] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:27:40] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[10:31:36] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 245 seconds)
[10:33:42] *** Joins: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com)
[10:39:32] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:40:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:44:36] *** Quits: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net) (Quit: ~ Trillian - www.trillian.im ~)
[10:45:41] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[10:47:57] *** Joins: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de)
[10:53:07] *** Joins: Algernon69 (~Algernon6@88.124.69.179)
[10:55:16] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:d057:c3a4:b9e0:579f)
[10:59:31] *** Quits: Algernon69 (~Algernon6@88.124.69.179) (Ping timeout: 256 seconds)
[11:05:34] *** Joins: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl)
[11:15:53] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:21:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[11:23:26] *** Joins: pve (~pve@178-55-110-170.bb.dnainternet.fi)
[11:33:02] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:39:54] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[11:43:43] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[11:45:26] *** Quits: Rue (~rue@2001-b011-1000-1c39-1d05-a00c-3fd4-e115.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[11:45:34] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:46:33] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[12:00:38] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 252 seconds)
[12:01:44] *** Joins: shka (~herr@109.231.0.226)
[12:01:48] *** Joins: amb007 (~a_bakic@253.12.23.93.rev.sfr.net)
[12:08:43] *** Joins: artchad (~user@public-gprs218803.centertel.pl)
[12:14:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:16:55] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:24:31] *** Quits: gaqwas (~john@dynamic-095-118-123-231.95.118.pool.telefonica.de) (Ping timeout: 245 seconds)
[12:26:22] *** Joins: wacki (~wacki@87.122.86.194)
[12:42:12] *** Joins: kathe (~kathe@49.32.171.23)
[12:42:18] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:42:21] <kathe> hello everyone. :)
[12:43:54] <phoe> hey hi
[12:44:00] <kathe> is it essential (rather than recommended) to study 'sicp'?
[12:44:27] <kathe> can a person get by without 'sicp' while working under 'cl'?
[12:44:33] <ecraven> I'd guess yes ;)
[12:44:41] <ecraven> many people work fine with CL and haven't read it
[12:44:59] <kathe> cool. thanks ecraven. :)
[12:45:10] <ecraven> given that it isn't even written in CL (but in Scheme), many of the code snippets in it won't work directly in CL anyway ;)
[12:45:24] <flip214> kathe: (the classic) SICP uses Scheme, which is one Lisp dialect; Common Lisp is another. There are quite a few differences.
[12:45:55] <kathe> i've heard tales of 'sicp' turning a person into superhuman common lisp programmer.
[12:45:56] <flip214> Still, it is a very good book - and rewriting the examples in CL is a good exercise.
[12:46:27] <pjb> Honestly, the main message of sicp, it was taught to me by my university teachers, with programs in Pascal!
[12:46:58] <ecraven> I still think that the *ideas* in SICP are very much reading it for, but they can be gotten from other places ;)
[12:46:59] <flip214> Is there only one, main, message? I've found lots of good thoughts in there.
[12:46:59] <pjb> But sicp can go beyond, since it uses scheme, because lisp provides clearly different mode of abstration.
[12:46:59] <kathe> i got my foundations with "logo" (which is also a lisp). :)
[12:47:37] <pjb> Of course, there are a lot of facettes, but the main message is to use abstractions.
[12:47:43] <kathe> ecraven: where can i get ideas from 'sicp' from a 'cl' angle?
[12:48:04] <pjb> Well, just do the exercises in CL instead of scheme ;-)
[12:48:28] <pjb> This has been done, several times (students have published their solutions). and in other languages, including C++!
[12:48:28] <phoe> just sprinkle a few FUNCALLs over the original code, replace DEFINE with DEFUN over LET, and you have the CL version :D
[12:48:40] <ecraven> kathe: just read SICP, the *ideas* port over to CL nicely, just the syntax is sometimes different
[12:49:19] <kathe> ecraven: thanks. but i think i'll pass.
[12:53:39] *** Quits: amb007 (~a_bakic@253.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[12:54:14] <kathe> i think i'll devote energies towards 'paip'.
[12:54:19] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:55:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[12:55:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[12:57:14] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:57:14] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[12:57:15] <flip214> kathe: "Practical Common Lisp" is a good book, too.
[12:57:38] <kathe> flip124: yes, i'm looking forward to that before 'paip'.
[12:57:41] <kathe> :)
[12:58:22] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[12:58:23] <kathe> i've scheduled 'paip' as the last book in my study regimen.
[12:58:46] <kathe> i read that blog post by steve losh. it showed me the way.
[12:59:11] <kathe> but i was very confused about 'sicp' being essential, because a lot of people "talk" a lot about it.
[12:59:48] <kathe> actually, steve losh's blog helped me accept my "vim" leanings.
[13:00:30] <kathe> i was lucky enough to have got my start in 'cs' using full "logo".
[13:00:43] <kathe> most people don't know that "logo" is a lisp. :)
[13:00:50] <kathe> just without parens. ;)
[13:04:31] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 245 seconds)
[13:06:36] <kathe> thank you to all those who shared their opinions and suggestions.
[13:06:38] <kathe> :)
[13:06:41] <kathe> bye.
[13:06:42] *** Quits: kathe (~kathe@49.32.171.23) (Quit: leaving)
[13:09:51] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[13:11:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:16:53] *** Joins: kevingal (~quassel@149.157.105.172)
[13:17:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:21:45] *** Quits: kevingal (~quassel@149.157.105.172) (Ping timeout: 256 seconds)
[13:22:31] *** Joins: kevingal (~quassel@2001:770:c0:401:c97:e93c:a163:302f)
[13:22:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:32:44] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[13:34:05] *** Quits: jackdaniel (~jack@user/jackdaniel) (Ping timeout: 268 seconds)
[13:34:12] *** Joins: jackdaniel (~jack@turtleware.eu)
[13:37:00] <beach> minion: memo for kathe: Whether some other language (other than the one that is the topic of this channel) is "a lisp" or not is debatable, but such debates are off topic here, and are better conducted in the #lisp channel.  There is no widely agreed-upon definition of "Lisp", so such debates are largely pointless.
[13:37:00] <minion> Remembered. I'll tell kathe when he/she/it next speaks.
[13:37:12] *** Joins: rotateq (~user@p200300e78706a00050f72feb644e2401.dip0.t-ipconnect.de)
[13:49:37] *** Joins: treflip (~user@user/treflip)
[13:56:06] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[14:02:08] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:07:26] *** Joins: parjanya (~esb@2804:14c:1ad:9351:1402:1741:3531:7449)
[14:07:28] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (Read error: Connection reset by peer)
[14:16:33] *** Joins: szos (~user@178.74.52.55)
[14:19:12] *** Quits: artchad (~user@public-gprs218803.centertel.pl) (Read error: Connection reset by peer)
[14:23:10] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:24:05] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:24:28] *** Lord_of_Life_ is now known as Lord_of_Life
[14:33:22] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[14:34:44] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[14:35:25] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[14:45:59] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:48:46] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 260 seconds)
[14:49:01] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 256 seconds)
[14:49:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[14:49:33] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Client Quit)
[14:49:38] *** Joins: amb007 (~a_bakic@219.12.23.93.rev.sfr.net)
[14:49:43] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[14:49:55] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:50:45] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[14:50:51] *** Joins: artchad (~user@public-gprs218803.centertel.pl)
[14:52:04] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[14:57:13] *** Quits: amb007 (~a_bakic@219.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[14:58:24] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[14:59:11] *** Quits: jackdaniel (~jack@turtleware.eu) (Changing host)
[14:59:11] *** Joins: jackdaniel (~jack@user/jackdaniel)
[14:59:11] *** ChanServ sets mode: +o jackdaniel
[15:01:05] *** Joins: occ (~occ@user/occ)
[15:04:53] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[15:05:40] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[15:07:54] *** Joins: occ (~occ@user/occ)
[15:16:46] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:d057:c3a4:b9e0:579f) (Ping timeout: 260 seconds)
[15:17:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:19:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:19:25] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:20:12] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:23:22] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[15:24:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[15:24:41] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:26:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:27:37] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:28:38] *** Joins: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de)
[15:28:52] *** Quits: frgo (~frgo@p548a30d7.dip0.t-ipconnect.de) (Client Quit)
[15:40:36] *** Joins: igemnace (~ian@user/igemnace)
[15:42:31] *** Quits: Brucio-92 (~Brucio-92@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:43:38] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[15:53:05] *** xantoz_ is now known as xantoz
[15:55:53] *** Quits: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 256 seconds)
[15:57:04] *** Joins: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:d057:c3a4:b9e0:579f)
[15:57:33] *** Joins: Spawns (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[15:57:52] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:59:09] *** semz_ is now known as semz
[16:01:25] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:06:19] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[16:06:46] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[16:07:54] *** Joins: chrnybo`` (~user@2a02:2121:28f:fb27:c4b2:9d0f:7ded:81fe)
[16:08:06] *** Quits: chrnybo` (~user@89.79-161-60.customer.lyse.net) (Read error: No route to host)
[16:10:37] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[16:12:21] *** Quits: chrnybo`` (~user@2a02:2121:28f:fb27:c4b2:9d0f:7ded:81fe) (Ping timeout: 250 seconds)
[16:35:42] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[16:35:47] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[16:39:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[16:39:15] *** Joins: clos-encounters (user@2600:3c00::f03c:92ff:fe19:3350)
[16:47:27] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[16:48:02] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[16:49:52] <Josh_2> Hi
[16:50:18] <phoe> hey
[16:54:09] *** Joins: Bike (~Glossina@71.69.170.70)
[16:54:38] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[17:03:24] *** Joins: jeosol (~jeosol@user/jeosol)
[17:08:01] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:08:54] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:09:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:10:03] <Josh_2> Shinmera: are you here?
[17:10:48] <Josh_2> Have you used Chirp with the latest twitter update? I seem to be having problems with authenticating with pin, I cannot verify-credentials after following the steps you have listed on github
[17:21:34] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[17:23:59] <Shinmera> I have not needed to log in in years
[17:24:37] <Shinmera> So it's possible something broke
[17:24:58] <Shinmera> I know the actual oAuth still works though, as I still post using Chirp regularly
[17:26:51] <Josh_2> Yes I can still post using older creds, but can't seem to authenticate new ones :(
[17:28:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[17:28:43] <Shinmera> Well, time for someone to fix the bug then I guess :)
[17:28:45] <bollu> Why does the following say the variable arg is defined but never used? (defun kk (arg) (arg))
[17:28:52] <bollu> In particular, how do I use arg as a function?
[17:28:58] <phoe> bollu: funcall it!
[17:28:58] <Shinmera> clhs funcall
[17:28:59] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm
[17:29:02] <bollu> I suspect this has something to do with the common lisp function scoping
[17:29:03] <bollu> thanks!
[17:29:05] <phoe> (defun kk (arg) (funcall fn))
[17:29:09] <bollu> right :)
[17:29:11] <phoe> not with scoping but namespacing
[17:29:20] <phoe> CL has separate namespaces for variables and functions
[17:29:49] <phoe> so you can do stuff like (let ((fn ...)) ...) and (flet ((fn ...)) ...) without the two colliding with one another
[17:32:26] <bollu> right
[17:33:21] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[17:33:34] *** Joins: silasfox (~sbv@p200300cec714f800caf8c79c6d0f1c51.dip0.t-ipconnect.de)
[17:33:53] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[17:39:14] <mon_aaraj> oh wow, phoe and shinmera here, guess common lisp is a small world
[17:39:24] <Shinmera> I've been here since... uh.
[17:39:32] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[17:39:43] <Shinmera> 2016? Something like that?
[17:40:47] <mon_aaraj> yeah, i've started becoming active in libera, irc overrall as well as this channel no short of a couple weeks ago, though i know phoe through another lisp community in another chat platform, and i just saw your projects on github while looking for some common lisp tools
[17:40:57] <jdz> Shinmera: I'd say at least 2015 (because ELS in London was in 2015).
[17:41:22] <Shinmera> jdz: then closer to 2014 or something.
[17:41:50] <jdz> 2014 was ELS in Paris, but I don't remember meeting you there.  Not that that counts for anything.
[17:42:27] <Shinmera> 2013, according to my bio. First library released in november, and I know I started with Lisp the same year (and also joined here at the same time)
[17:42:38] <Shinmera> Almost a decade, damn.
[17:42:45] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[17:44:51] <Shinmera> I've probably also long since stopped being the youngest one here :)
[17:46:41] <shka> look at this thing https://github.com/admich/Doors
[17:47:04] <Shinmera> What about it
[17:47:06] <phoe> mon_aaraj: gasp, which community on which platform
[17:47:17] <phoe> shka: https://www.youtube.com/watch?v=sIlNIVXpIns
[17:47:20] <shka> Shinmera: WM manager based on mcclim
[17:47:23] <mon_aaraj> the Lisp discord server
[17:47:25] <shka> cool thing
[17:47:27] <Shinmera> Yeah but what about it
[17:47:29] <phoe> mon_aaraj: yes :D
[17:47:53] <shka> well, it is interesting
[17:48:17] <shka> also, i got my calendar Shinmera, it's also cool, good job
[17:48:34] <Shinmera> Nice! Glad to hear it made its way safely. Thank you for your patronage :)
[17:48:49] <phoe> I also got my calen---oh shit I forgot to update it to February
[17:48:51] * phoe shuffles about
[17:49:12] <phoe> there
[17:50:12] <shka> February art looks worryingly what the view from my window
[17:54:33] <bollu> if I have a two argument function, is there an easy way to make it an n argument function that returns the argument when called with <2 arguments, and folds with the function with >= 2 arguments?
[17:54:53] <bollu> hmm, I guess I just call the right fold/
[17:55:53] <jdz> bollu: Maybe you are looking for REDUCE?
[17:56:03] <bollu> jdz yes, that seems to be what `fold` is called :)
[17:58:57] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[17:59:12] <clos-encounters> shka: dang, I was hoping that yt link was an actual demo :P
[17:59:25] <shka> clos-encounters: blame phoe, not me
[18:00:17] <clos-encounters> oh yes, my mistake
[18:05:14] *** Joins: jealousmonk (~user@user/jealousmonk)
[18:07:27] <szos> shka: Has doors gotten to a stable point yet? last I tried it it wouldnt run on my machine (though the author was very forward in the readme that it was unstable)
[18:07:59] *** Joins: heisig (~heisig@131.188.6.20)
[18:16:01] <Josh_2> Shinmera: I think that twitter has deprecated the 1.1 API's for new Apps
[18:17:09] <Josh_2> Your links to the docs within the library just 404
[18:18:16] <Josh_2> Scratch that, they have moved the docs url
[18:21:49] <Josh_2> Okay all is well do not worry Shinmera :)
[18:24:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-72.dsl.bell.ca) (Ping timeout: 256 seconds)
[18:26:25] *** Joins: Brucio-92 (~Brucio-92@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[18:28:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:33:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[18:34:29] *** Joins: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca)
[18:34:33] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:37:30] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:39:35] <jcowan> basically the CL subproject of the Interlisp effort means upgrading its CL to ANSI
[18:40:48] <jcowan> it is very worthwhile, because it means extending the benefits of the Interlisp IDE to Common Lisp programmers as well.
[18:40:58] <jcowan> imho
[18:41:43] <jcowan> I'd say the first thing is to try the test suite and find out just what fails.
[18:42:32] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 250 seconds)
[18:43:19] <jcowan> The existing implementation is CLtL1, plus we have Xarox Common Loops, a direct ancestor of CLOS, plus some other stuff.
[18:43:35] <phoe> test suite - so, like, ANSI-TEST?
[18:43:37] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 256 seconds)
[18:45:10] *** Joins: igemnace (~ian@user/igemnace)
[18:47:55] *** Quits: jealousmonk (~user@user/jealousmonk) (Read error: Connection reset by peer)
[18:48:24] *** Joins: jealousmonk (~user@user/jealousmonk)
[18:53:41] *** Joins: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80)
[18:58:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac)
[18:58:48] <phantomics> Has anyone around used Croatoan? Trying to figure out how to specify specific numbered terminal colors to use for text rather than keywords like :red and :blue, also add-string works fine but add-char seems to just produce blank space
[18:59:29] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[19:00:55] *** Quits: rgherdt (~rgherdt@2a01:598:d034:c97e:11bb:66de:c8c5:ba80) (Ping timeout: 250 seconds)
[19:01:45] *** Joins: s-liao (~s-liao@101.86.96.21)
[19:02:28] *** Quits: pieguy128 (~pieguy128@bas8-montreal02-65-93-195-206.dsl.bell.ca) (Ping timeout: 250 seconds)
[19:04:39] *** Quits: jcowan (sid325434@id-325434.ilkley.irccloud.com) (Ping timeout: 264 seconds)
[19:04:56] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[19:06:49] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[19:07:32] *** Quits: neominimum (sid537410@user/neominimum) (Ping timeout: 240 seconds)
[19:07:53] *** Quits: heisig (~heisig@131.188.6.20) (Quit: Leaving)
[19:09:05] *** Joins: jcowan (sid325434@ilkley.irccloud.com)
[19:09:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b)
[19:10:11] *** Joins: ullbeking_ (sid5364@ilkley.irccloud.com)
[19:11:07] *** Joins: neominimum (sid537410@user/neominimum)
[19:11:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca)
[19:12:13] *** Quits: rgherdt_ (~rgherdt@2a01:598:d037:d3a6:906b:554f:cb0b:40ac) (Ping timeout: 240 seconds)
[19:17:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:23:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65)
[19:24:33] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[19:26:26] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a2:707c:1835:c0de:6122:f29b) (Ping timeout: 260 seconds)
[19:33:44] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[19:34:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-199.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:38:59] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[19:40:53] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca)
[19:45:14] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[19:45:57] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-105.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:46:06] *** Quits: jess (~jess@libera/staff/cat/jess) (Quit: brb)
[19:46:15] *** Joins: jesopo (~jess@libera/staff/cat/jess)
[19:46:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[19:46:44] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[19:47:12] *** jesopo is now known as jess
[19:47:51] *** Joins: sloanr (~user@70-59-77-137.mpls.qwest.net)
[19:47:56] <mfiano> Is there a more appropriate alexandria:map-* function or something else that will make this code a little nicer, instead of manually flipped the list in the lambda to get :XYZ first in the result lists too? https://gist.github.com/mfiano/ab6f86019afc1345718c96e0d54ec9a7
[19:48:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca)
[19:49:20] <mfiano> If it wasn't obvious, I want a list of all (foo :xyz) and (:xyz foo) pairs
[19:53:41] *** Joins: occ (~occ@user/occ)
[19:54:20] *** Quits: szos (~user@178.74.52.55) (Remote host closed the connection)
[19:54:47] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:59:33] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-50-65-93-192-46.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:00:17] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[20:02:50] <clos-encounters> mfiano: I dunno. something like https://cicadas.surf/pastebin/choose-with-repetition.lisp.html ??
[20:03:07] <clos-encounters> its clearer to me anyway, but I'm a loop junkie
[20:06:47] <mfiano> Thanks. I suppose it is cleared because you do not need a nested LOOP, nor a slow APPEND keyword for my example.
[20:06:52] <mfiano> clearer*
[20:08:51] *** Joins: mason (~mason@redhat/mason)
[20:10:47] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca)
[20:12:25] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[20:19:24] *** Quits: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[20:23:16] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-112.dsl.bell.ca) (Ping timeout: 245 seconds)
[20:29:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[20:31:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca)
[20:34:55] *** Joins: Oladon (~olad@98.43.81.226)
[20:36:56] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:37:42] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Read error: Connection reset by peer)
[20:38:17] *** Joins: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com)
[20:40:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-46-67-70-100-151.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:40:46] <phantomics> Turns out I needed to use (croatoan:add-wide-char-utf-8) to add UTF-8 characters
[20:43:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:44:11] <lisp123> Anyone have a pdf of the Concrete Syntax Tree manual or can help me with a query:
[20:45:10] <Bike> what's the query?
[20:45:20] <lisp123> Can I use it to get a list of the calling forms of a given form (e.g. if I have (+ 3 (+ 4 (+ 5 5))), from (+ 5 5) I would like to get access to (+ 4 ..) and (+ 3 ..)
[20:45:36] <lisp123> I was wondering if I could piggyback it for a portable ParEdit
[20:46:15] <lisp123> So if I supply a point in the file, I get the form that contains that point and then any calling forms
[20:47:27] <Bike> CSTs do not have links to CSTs containing them. a CST is basically just an object plus a source location.
[20:48:06] <lisp123> Okay, so I can't traverse the tree?
[20:48:14] <Bike> something like what you describe could maybe be done by keeping a database of CSTs including some source location
[20:48:21] <Bike> you can traverse the tree downward
[20:48:28] <lisp123> Yes, that's what I was thinking
[20:48:43] <lisp123> Like does every inner form have associated information on its source location?
[20:48:59] <lisp123> If I have that, I can figure out the calling forms
[20:49:40] <Bike> yes. try (cst:cst-from-expression '(a b c)), and the you can do (cst:first *) to get an atom cst, or (cst:rest *) to get the CST for (B C)
[20:51:06] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca)
[20:51:41] <lisp123> Thanks! Trying it out now
[20:59:07] *** Joins: jeosol (~jeosol@user/jeosol)
[20:59:14] *** Quits: kevingal (~quassel@2001:770:c0:401:c97:e93c:a163:302f) (Remote host closed the connection)
[20:59:38] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-115.dsl.bell.ca) (Ping timeout: 252 seconds)
[21:02:11] *** Quits: jess (~jess@libera/staff/cat/jess) ()
[21:02:34] *** Quits: sloanr (~user@70-59-77-137.mpls.qwest.net) (Ping timeout: 260 seconds)
[21:06:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-021-032.client.tudelft.eduvpn.nl) (Ping timeout: 260 seconds)
[21:06:57] *** Joins: masinter (~masinter@c-73-158-116-21.hsd1.ca.comcast.net)
[21:08:39] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca)
[21:09:49] *** Quits: domovod (~domovod@ec2-35-165-86-158.us-west-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[21:11:16] *** Joins: citizenandrew (~citizenan@216.13.217.230)
[21:11:30] *** Joins: domovod (~domovod@176.196.122.197)
[21:15:23] <edgar-rft> concrete syntax -> https://i.ibb.co/s3hNqZB/concrete-syntax.jpg
[21:15:29] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-175.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:16:12] <citizenandrew> mfiano: I use sbcl hash tables multithreaded all the time... :synchronized t and all works well.  Lispworks has thread safe hash tables by default.  I don't know about other impls, but maybe a trivial-thread-safe-hash-table library needs to happen?
[21:16:20] <Josh_2> Not enough parens, how am I supposed to write macros with that edgar-rft ?
[21:16:43] <Josh_2> citizenandrew: hello, thank you for your work on dexador :D
[21:16:53] <mfiano> citizenandrew: In my experience with the use cases I have, synchronizing hash tables causes much too much thread contention.
[21:17:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece)
[21:20:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:5edc:3d8b:ba5b:9d4c:db65) (Ping timeout: 250 seconds)
[21:26:16] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca)
[21:26:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578)
[21:29:07] *** Quits: rgherdt__ (~rgherdt@2a01:598:d032:2336:f2b4:2f3d:eb17:4ece) (Ping timeout: 250 seconds)
[21:30:06] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[21:31:36] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[21:31:42] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[21:32:37] *** Joins: Algernon666 (~Algernon6@2a04:cec0:10f5:7936:d057:c3a4:b9e0:579f)
[21:32:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4)
[21:33:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-45-67-70-24-195.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:33:36] <citizenandrew> mfiano: as I understood your case here, it was all readers, which would not need synchronized access...  but sure, if you this is super critical section of code, the sbcl generic hash table won't be a good choice (they are not necessarily optimized for all use cases).
[21:34:03] *** Joins: Noisytoot (~noisytoot@sourcehut/user/noisytoot)
[21:34:18] *** Quits: pillton (~user@193-116-92-98.tpgi.com.au) (Ping timeout: 250 seconds)
[21:35:19] *** Joins: Catie (~user@user/catie)
[21:35:37] *** Quits: Algernon91 (~Algernon6@2a04:cec0:10f1:bb6d:d057:c3a4:b9e0:579f) (Ping timeout: 250 seconds)
[21:35:42] *** Quits: rgherdt_ (~rgherdt@2a01:598:d03e:8408:7089:33b8:9853:8578) (Ping timeout: 260 seconds)
[21:36:20] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Remote host closed the connection)
[21:36:20] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[21:36:59] *** Joins: amb007 (~a_bakic@238.12.23.93.rev.sfr.net)
[21:37:00] *** Quits: amb007 (~a_bakic@238.12.23.93.rev.sfr.net) (Read error: Connection reset by peer)
[21:37:12] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[21:37:47] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 250 seconds)
[21:38:46] *** Parts: citizenandrew (~citizenan@216.13.217.230) ()
[21:39:46] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca)
[21:40:52] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671)
[21:41:30] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 250 seconds)
[21:41:37] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:41:49] *** Joins: amb007 (~a_bakic@238.12.23.93.rev.sfr.net)
[21:42:06] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Quit: WeeChat 3.4)
[21:43:23] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:43:38] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1ab:a2b7:c9fe:3fc7:8f06:34d4) (Ping timeout: 260 seconds)
[21:44:56] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[21:45:39] *** Quits: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net) (Client Quit)
[21:45:55] *** Joins: Rue (~rue@2001-b011-1000-1c39-cdcc-c9c1-11c3-6370.dynamic-ip6.hinet.net)
[21:46:39] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-53-65-93-195-206.dsl.bell.ca) (Ping timeout: 256 seconds)
[21:48:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09)
[21:51:18] *** Joins: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be)
[21:51:20] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1b0:3f8c:c52b:e782:9975:9671) (Ping timeout: 252 seconds)
[21:53:16] *** Quits: rgherdt__ (~rgherdt@2a01:598:d037:32b4:fdd:95d9:2815:da09) (Ping timeout: 245 seconds)
[21:57:59] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:01:46] *** Joins: morganw (~user@80.225.24.132)
[22:03:22] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd)
[22:05:49] *** Quits: rgherdt (~rgherdt@2a01:598:d038:93a5:d559:9d2d:267e:60be) (Ping timeout: 240 seconds)
[22:05:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48)
[22:06:31] *** Joins: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr)
[22:08:16] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1a2:b790:8080:15cb:d0a:bacd) (Ping timeout: 245 seconds)
[22:11:14] *** Quits: OlCe (~user@amontsouris-654-1-45-240.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[22:16:23] *** Joins: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b)
[22:19:06] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:8fc5:e166:fc5d:1805:7d48) (Ping timeout: 260 seconds)
[22:20:05] *** Quits: amb007 (~a_bakic@238.12.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[22:20:56] *** Joins: amb007 (~a_bakic@190.15.23.93.rev.sfr.net)
[22:22:15] *** Quits: jealousmonk (~user@user/jealousmonk) (Remote host closed the connection)
[22:22:34] *** Joins: jealousmonk (~user@user/jealousmonk)
[22:29:22] *** Quits: Algernon666 (~Algernon6@2a04:cec0:10f5:7936:d057:c3a4:b9e0:579f) (Ping timeout: 260 seconds)
[22:38:39] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:40:59] *** Joins: morganw` (~user@80.225.24.132)
[22:41:03] *** Quits: amb007 (~a_bakic@190.15.23.93.rev.sfr.net) (Ping timeout: 256 seconds)
[22:41:03] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 256 seconds)
[22:41:51] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[22:42:11] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Ping timeout: 256 seconds)
[22:42:45] *** Quits: morganw (~user@80.225.24.132) (Ping timeout: 256 seconds)
[22:42:45] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[22:42:45] *** Quits: jackdaniel (~jack@user/jackdaniel) (Ping timeout: 256 seconds)
[22:42:50] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[22:42:52] *** Joins: jackdaniel (~jack@turtleware.eu)
[22:44:32] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 240 seconds)
[22:44:33] *** Joins: epolanski (uid312403@helmsley.irccloud.com)
[22:45:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:45:41] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[22:47:08] *** Quits: morganw` (~user@80.225.24.132) (Quit: ERC (IRC client for Emacs 27.2))
[22:47:23] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:47:30] *** Joins: morganw (~user@80.225.24.132)
[22:48:36] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[22:48:41] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:49:01] *** Joins: robin (~robin@user/terpri)
[22:49:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[22:49:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[22:52:36] *** Quits: raeda (~raeda@72.49.252.109) (Ping timeout: 256 seconds)
[22:53:07] *** Quits: treflip (~user@user/treflip) (Remote host closed the connection)
[22:54:07] *** Joins: cage (~cage@dynamic-adsl-84-221-50-16.clienti.tiscali.it)
[22:54:21] *** Quits: epolanski (uid312403@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:56:44] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:58:14] *** Joins: travv0 (sid293381@user/travv0)
[22:58:20] *** Quits: rain3 (~rain3___@2a02:2f09:d113:6d00:6f23:fba2:d834:1a7) (Ping timeout: 268 seconds)
[22:58:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[22:58:37] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[22:58:54] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e)
[22:59:02] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[22:59:45] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (Ping timeout: 256 seconds)
[22:59:45] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[22:59:45] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 256 seconds)
[23:00:08] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[23:01:11] *** Quits: rgherdt_ (~rgherdt@2a01:598:b1af:d688:3317:8282:257f:fa3b) (Ping timeout: 245 seconds)
[23:06:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:08:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:11:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f)
[23:13:28] <lisp123_> bike: You there?
[23:14:17] <Bike> Hello.
[23:14:20] <lisp123_> (cst:source #<CONCRETE-SYNTAX-TREE:CONS-CST raw: ((QUOTE SWANK)) 821071519B>) returns nil whilst (cst:source #<CONCRETE-SYNTAX-TREE:CONS-CST raw: (QUOTE SWANK) 821071E1E3>) returns a value
[23:14:40] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1af:a6a1:6098:a5e1:1960:321e) (Ping timeout: 250 seconds)
[23:14:44] <lisp123_> So I need to make sure I get down to the individual forms yes to get a source?
[23:14:57] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:15:14] *** Joins: santiagopim (~user@84.78.243.45)
[23:15:23] <Bike> yeah, i think the cst reader doesn't assign sources to cdrs of lists
[23:16:19] <lisp123_> Got it, thanks. Also do you remember what "(663 . 669)" means as a source?
[23:16:41] <Bike> i don't usually use the default source locations, but i would guess those are file positions
[23:16:44] <Bike> a start and end
[23:17:21] <lisp123_> Its strange because (QUOTE SWANK) is more than six characters, but I recall it worked correctly before, so need to revisit how it works
[23:17:29] <lisp123_> Do you have alternative approach?
[23:17:41] <Bike> alternative approach to what?
[23:17:49] <lisp123_> To source locations
[23:17:59] <Bike> yeah, clasp has its own source location objects.
[23:18:07] <lisp123_> Ah ok. Thanks
[23:18:37] <Bike> https://github.com/s-expressionists/Eclector/blob/master/code/base/generic-functions.lisp the default does use file-position
[23:18:59] <jcowan> phoe: Yes.  It might need some tweaking to load at all.
[23:19:03] <lisp123_> Thanks, I had a look at my old code just now and it suggested the same
[23:20:19] <lisp123_> AH so basically in the source code I had 'swank -> CST shows it as (quote swank), but the actual source version is 6 characters
[23:20:22] <lisp123_> Which makes sense
[23:20:36] <Bike> oh. yeah, there you go.
[23:22:06] <lisp123_> I wonder if it is too computationally intensive to re-read an entire lisp file at each keystroke..
[23:23:14] <lisp123_> (noting that lisp files aren't really that long in the grand scheme of things)...because if that inefficient approach works, it will be very easy to build a sexp navigation tool out of CST / Eclector
[23:25:56] <lisp123_> Is there a way to suppress errors when reading through Eclector?
[23:26:09] <Bike> pretty sure it respects *read-suppress*
[23:26:15] <Bike> or do you mean something else
[23:26:41] <Bike> maybe it has its own read-suppress...
[23:27:14] <Bike> nope, should just be cl:*read-suppress*
[23:27:36] <lisp123_> Great, thanks - hopefully that works
[23:28:06] <lisp123_> I got an error saying "SB-INTROSPECT" package not found or something like that when reading (when not in SBCL),basically want to avoid any read errors for partially complete forms
[23:28:22] <Bike> some kinds of errors can't be suppressed, like unknown reader macros, but packages missing should be fine
[23:28:43] *** Joins: jeosol (~jeosol@user/jeosol)
[23:29:00] <lisp123_> Cool thanks! I will start with that
[23:29:11] <scymtym> (handler-bind ((RELEVANT-ERROR #'eclector.reader:recover)) (eclector.reader:read …)) is more comprehensive
[23:29:43] <lisp123_> scymtym: Thanks for that, I'll use that
[23:30:25] *** Joins: Fare (~fare@2607:fb91:bd89:35cf:ccd1:b56e:6bc2:9629)
[23:36:18] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[23:36:41] *** Quits: jeosol (~jeosol@user/jeosol) (Quit: Client closed)
[23:40:20] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[23:40:40] *** Quits: Fare (~fare@2607:fb91:bd89:35cf:ccd1:b56e:6bc2:9629) (Ping timeout: 250 seconds)
[23:41:48] *** Joins: raeda (~raeda@72.49.252.109)
[23:41:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[23:43:08] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:43:08] *** Parts: travv0 (sid293381@user/travv0) ()
[23:43:53] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:49:24] *** Joins: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5)
[23:51:47] *** Quits: rgherdt_ (~rgherdt@2a01:598:d039:8599:53e9:dd17:5623:94f) (Ping timeout: 252 seconds)
[23:53:53] *** Joins: rgherdt_ (~rgherdt@2a01:598:d038:d67f:f4bd:95ae:c30:7222)
[23:55:17] *** Quits: occ (~occ@user/occ) (Ping timeout: 256 seconds)
[23:56:17] *** Quits: rgherdt__ (~rgherdt@2a01:598:b1a4:fc47:7053:7d93:7b:22f5) (Ping timeout: 240 seconds)
