[00:00:10] <Blondie101010> yeah but it might give bad devs some bad ideas
[00:00:15] <Blondie101010> ie: superglobal abuse
[00:00:17] <celphi> that site is not doing same results as my aws server
[00:00:27] <celphi> i get false on my server
[00:00:28] <Blondie101010> celphi:  show your use case
[00:00:40] <Blondie101010> the code with the proper variable content
[00:00:42] <Woet> celphi: ok, what does $_SERVER['REQUEST_URI'] contain for you?
[00:00:43] <celphi> i have `var_dump(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));`
[00:00:52] <Woet> why don't you start with var_dump($_SERVER['REQUEST_URI']) ?
[00:00:59] * Blondie101010 nods
[00:01:18] <Woet> https://3v4l.org/CESlB
[00:01:23] <Woet> in your browser I see "//"
[00:01:28] <Woet> what do you expect the path to be there?
[00:01:28] <celphi> `string(2) "//" bool(false)`
[00:01:48] <celphi> is what i have
[00:02:08] <Woet> parse_url expects, as the name suggests, an url.
[00:02:12] <Woet> REQUEST_URI is not a url
[00:02:47] <Woet> so if you give it "//" as a url, it's gonna assume that's not a path but something else
[00:02:51] <Woet> try giving it a url
[00:03:23] <celphi> it works if i give it valid url., but the whole point of this discussion is using `?: '/'`
[00:03:36] <Woet> ok, so if you give a url to the function that parses a url it works
[00:03:47] <Woet> why are you trying to hack it into doing something else?
[00:04:01] <celphi> yes- but if you scroll up i stated i need to add `?: '/'`
[00:04:14] <Woet> what are you trying to achieve?
[00:04:15] <celphi> to handle cases when someone types `//`
[00:04:25] <Woet> the goal, not the fix you thought of.
[00:04:50] <celphi> im so confused
[00:04:55] <Blondie101010> celphi:  a router will usually use the QUERY_STRING
[00:05:03] <Woet> what does the code do? which cases do you need to handle?
[00:05:11] <Woet> nothing I know of breaks when you have //
[00:05:17] <TinoDidriksen> You don't need special handling for // - just normalize // to /
[00:05:17] <Woet> so what code is breaking?
[00:05:42] <Blondie101010> he's trying to understand how to do a router from scratch
[00:06:02] <celphi> im just trying to use $path. if it's a string no issue. if it's false (which it is when a user types //) i need to add `?: '/'`
[00:06:06] <Blondie101010> '//' usually refers to '/' but caution is advised
[00:06:28] <Blondie101010> your user types that where/
[00:06:38] <celphi> `mysite.com//`
[00:06:42] <Blondie101010> that is fine
[00:06:52] <celphi> it will make $path === false
[00:07:08] <Blondie101010> as mentioned, that is not a URL
[00:07:23] <Blondie101010> use the QUERY_STRING
[00:07:41] <Woet> Blondie101010: then fix your code that assigns $path.
[00:07:47] <Woet> oops
[00:07:47] <Woet> celphi:
[00:08:13] <celphi> query_string is null
[00:08:28] <Blondie101010> then that's empty, default route
[00:08:58] <celphi> query_string is null with a valid url
[00:09:13] <Blondie101010> I didn't argue that
[00:09:15] <celphi> i thought query_string is `?QUERY_STRING`
[00:09:40] <Blondie101010> you tried it with no query string so it's null
[00:09:44] <Blondie101010> try it with something
[00:09:56] <celphi> i dont want to use query_strings
[00:10:07] <Blondie101010> you don't want a router?
[00:10:07] *** Joins: d3sync (~d3sync@62.1.243.19.dsl.dyn.forthnet.gr)
[00:10:10] <celphi> im trying to get a path from url--
[00:10:28] <Blondie101010> you argue instead of even trying
[00:10:33] <celphi> false is not a valid path - so that's why i asked if it's appropiate to use `?: '/'`
[00:10:46] <Blondie101010> go to http://yousite.com/a/b/c/d
[00:10:53] <Blondie101010> what is the QUERY_STRING there?
[00:11:10] <celphi> null
[00:11:25] <celphi> there's no `?` so there wouldnt be one
[00:11:26] <Blondie101010> then it is not passed to PHP
[00:12:13] <Woet> you can also just print_r($_SERVER) and see what info you get
[00:12:25] <celphi> i stand corrected it's just string ""
[00:12:34] <Blondie101010> but it sounds like something is wrong in the Apache config
[00:12:35] <celphi> not null
[00:12:37] <Woet> could also be a bad .htaccess/apache/nginx/conf that doesnt pass the request
[00:15:13] <celphi> string(11) "REQUEST_URI"
[00:15:13] <celphi> string(9) "/a/b/c/d/"
[00:15:13] <celphi> string(12) "QUERY_STRING"
[00:15:13] <celphi> string(0) ""
[00:15:13] <celphi> string(44) "PARSE_URL($_SERVER[REQUEST_URI, PHP_URL_PATH"
[00:15:13] <php-bot> Muting celphi for 20 seconds to prevent them from flooding
[00:15:13] <celphi> string(9) "/a/b/c/d/"
[00:15:37] <celphi> sorry
[00:15:47] <Blondie101010> oh well, you do have the solution still
[00:15:54] <Blondie101010> no need to parse a URL
[00:16:48] <Blondie101010> but didn't you say that returned false earlier?
[00:17:11] <celphi> it's only false if my request_uri  is `//`
[00:18:08] <celphi> string(11) "REQUEST_URI" string(2) "//" || string(12) "QUERY_STRING" string(0) "" || string(44) "PARSE_URL($_SERVER[REQUEST_URI, PHP_URL_PATH" bool(false)
[00:18:21] <Woet> celphi: I'll tell you again, stop using parse_url on something that is not a URL.
[00:18:29] <Woet> celphi: https://3v4l.org/0lqO2
[00:18:48] <Woet> as the name implies and the documentation confirms, parse_url requires a url.
[00:18:53] <Woet> "//" is not a url.
[00:19:11] <Woet> I told you this 16 minutes ago
[00:19:15] <Woet> [21:32:49]  <Woet> try giving it a url
[00:19:29] <celphi> i didnt say url
[00:19:35] <Woet> stop giving garbage to a function that expects a url and then complain that it doesn't work properly
[00:19:42] <celphi> i said it's false if my request_uri is `//`
[00:19:45] <Woet> correct
[00:19:49] <Woet> because // is not a url.
[00:20:00] <Woet> and parse_url, as mentioned 4 times now, expect a url.
[00:20:02] <Blondie101010> lets focus on the real use case
[00:20:16] <celphi> woet im not sure if you're on same page
[00:20:20] <stenno> '//x' is an url
[00:20:26] * stenno hides again
[00:20:28] <Woet> Blondie101010: he has parse_url($_SERVER['REQUEST_URI'], PHP_PATH_INFO)) and is complaining that when it's passed "//" it returns false.
[00:20:39] <Blondie101010> yes, but still
[00:20:50] <Blondie101010> the problem he's trying to solve is to get the route
[00:20:53] <celphi> im saying im using that script and in my browser i have `mysite.com//`
[00:20:53] <stenno> didn't read docs regarding second param :P
[00:21:14] <celphi> so request_uri resolves to `//`
[00:21:17] <Woet> celphi: then pass "mysite.com//" to parse_url.
[00:21:39] <Blondie101010> that is a simple solution to use parse_url() on it
[00:21:44] <Woet> celphi: because, as I've shown you earlier, that works: https://3v4l.org/AJ9Th
[00:22:06] <Woet> celphi: or use a different variable *without* using parse_url.
[00:22:16] <Woet> celphi: print_r($_SERVER) will show you what is available.
[00:22:25] <celphi> and as ive said before that site is not reflecting what my server is
[00:22:30] <Woet> celphi: it is.
[00:22:55] <Woet> celphi: it is returning false on //
[00:23:04] <Woet> https://3v4l.org/PUNgP
[00:24:06] <Woet> so I'm not sure what it's not reflecting according to you
[00:24:14] <da_wunder> celphi: tell us the uri that you're using and/or provide example of that on 3v4l.org site
[00:24:30] <Woet> da_wunder: he's using REQUEST_URI, which will contain "//", which is not a url, which will result in false
[00:25:09] <Woet> da_wunder: and he's convinced that it should work because if he passes /foo it does work, since parse_url correctly guesses despite the incorrect data it has been provided.
[00:25:21] <Woet> s/he's/they're/
[00:25:27] <s17> URL !== URI
[00:25:46] <Woet> s17: you'd think that'd be clear by me saying "you're not a passing a url to it" about 20 times
[00:25:56] <celphi> my request_uri never returns `mysite.com/whatever` it only returns `/whatever`
[00:26:08] <s17> all URI are URL, but not all URL are URI
[00:26:13] <s17> oops
[00:26:19] <s17> all URL are URI..
[00:26:26] <Woet> celphi: correct.
[00:26:28] <Woet> celphi: so stop using it.
[00:26:31] <Woet> celphi: or stop using parse_url.
[00:26:39] <celphi> ??
[00:26:48] <celphi> stop using and use what instead
[00:26:53] <da_wunder> celphi: you really should read - https://www.php.net/manual/en/reserved.variables.server.php
[00:26:55] <Woet> celphi: $_SERVER['REQUEST_URI'] is *not* a URL, stop passing it to parse_url
[00:26:56] <Blondie101010> celphi: https://3v4l.org/ptAiS
[00:27:06] <Woet> celphi: I've told you about 4 times now to use print_r($_SERVER) and check
[00:27:27] <Woet> celphi: it'd help all of us immensely if you would follow the simple instructions you're being given.
[00:27:30] <s17> correct all URL are URI, but not all URI are URL
[00:27:43] <da_wunder> or just var_dump($_SERVER['REQUEST_URI']; to see what that really is
[00:28:18] <Woet> celphi: and if you don't want to follow simple instructions, then don't ask for help and figure it out by yourself.
[00:28:24] <Woet> that's also perfectly fine.
[00:28:51] <celphi> Woet: nothing inside my $_SERVER has `mysite.com/whatever_in_browser`
[00:28:57] <Woet> celphi: i sincerely doubt it.
[00:29:05] <celphi> i just did find
[00:29:06] <Woet> celphi: and you can also combine variables.
[00:29:08] <celphi> nothing
[00:29:21] <Woet> celphi: or, you could check if anything contains something that doesn't need parsing
[00:29:22] <Blondie101010> celphi:  did you look at my last paste?
[00:29:25] <da_wunder> celphi: you need to combine those variables...
[00:29:26] <celphi> btw- im using `FallbackResource /index.php`
[00:29:30] <Woet> celphi: maybe something already contains what you need.
[00:29:49] <Blondie101010> celphi: my last paste is an explicit working solution
[00:30:03] <celphi> yes Blondie101010 is that correct way to do it?
[00:30:03] <Blondie101010> try it
[00:30:12] <Blondie101010> does it work/
[00:30:54] <Blondie101010> how many hours do you spend per day on wondering if you should put on your shoes differently?
[00:31:34] <celphi> yes that solution works
[00:31:39] <da_wunder> celphi: yet again another reason why you _should_ use some libraries for stuff like that
[00:31:40] <Blondie101010> so move on
[00:31:52] <Blondie101010> he doesn't want to learn anything the right way
[00:31:56] <celphi> ??
[00:32:02] <celphi> i just learned something about parse_url
[00:32:03] <Blondie101010> he wants to DIY everything
[00:32:22] <Blondie101010> that will not make you a good programmer
[00:32:24] <Woet> celphi: why did it take over 30 minutes though? you can just read the docs
[00:32:26] <Woet> https://www.php.net/parse_url
[00:32:30] <Woet> "This function parses a URL"
[00:32:34] <Woet> 5 seconds tops
[00:32:56] <Woet> [21:32:06]  <Woet> parse_url expects, as the name suggests, an url.
[00:32:56] <Woet> [21:32:09]  <Woet> REQUEST_URI is not a url
[00:33:04] <Woet> or just listen to the responses you get when you ask a question
[00:33:12] <Woet> which was also 30 minutes ago at this point
[00:34:11] <celphi> "well i guess i could do parse_url($_SERVER['REQUEST_URI'])['path'] ?" Blondie101010: "if that's what you want, sure" then Blondie101010 suggested using the 2nd param
[00:34:35] <celphi> well before your comments woet
[00:34:52] <Blondie101010> ok I regret that even if I included "if that's what you want"
[00:34:52] <Woet> i didnt check any previous chats
[00:35:02] <Woet> if you were recommended that, then yea, i understand the confusion
[00:35:15] <da_wunder> celphi: what I'm trying to tell you is - you should not make your own Request / Response classes - use something that already exists and millions of users are using those - those are quite simple to dig through and see what those are really doing
[00:36:31] <da_wunder> celphi: and using battle tested libraries for that will help you learn stuff a much faster
[00:37:25] <celphi> da_wunder: ok name one -
[00:37:37] <celphi> im curious as to how they handled this issue
[00:38:05] <da_wunder> celphi: eg. https://symfony.com/doc/current/components/http_foundation.html
[00:38:36] <da_wunder> and yes you can use that without Symfony framework - that is individual component that you can use in any application
[00:38:51] <celphi> is there actual code for that somewhere
[00:39:02] <Blondie101010> no, it's all imaginary
[00:39:04] <da_wunder> sure - https://github.com/symfony/http-foundation
[00:39:05] <celphi> w/o having to download it
[00:39:13] <Blondie101010> github
[00:39:32] <Blondie101010> but that's not the router part
[00:39:57] <celphi> where's the router part at
[00:40:02] <Blondie101010> https://symfony.com/doc/current/routing.html
[00:40:21] <celphi> i mean if i  want to see how they handle getting the url
[00:40:42] <celphi> instead of showing me the interface code i want to see how they parsed it
[00:40:50] <da_wunder> router part is in not repository... there is separated repository for routing - that is just for pure request / response handling
[00:41:15] <da_wunder> and to get url with that http foundation component just see - https://github.com/symfony/http-foundation/blob/d6602aca7d3e11f401a0b24f43b611c530abfad3/Request.php#L1055
[00:41:55] <Blondie101010> so they do exactly like I said except they include the real host
[00:42:02] <da_wunder> and there you should see that is separated to multiple methods to get that normalized url
[00:42:49] <Blondie101010> he doesn't care about the non-changing hostname
[00:43:08] <Blondie101010> though it would be useful to generate related URLs
[00:45:06] *** Quits: genom (~g@37.214.74.93) (Remote host closed the connection)
[00:46:30] <da_wunder> celphi: and just for the info that package has been installed quite lot times - https://packagist.org/packages/symfony/http-foundation
[00:46:58] <celphi> wasnt adrian stating the other day it's not the best solution?
[00:47:38] <da_wunder> don't remember to see that comment
[00:48:22] <da_wunder> but really you should just look that to understand what _you_ need to do in your own custom Request class to get that full url
[00:49:16] <Blondie101010> celphi:  there is no best solution
[00:49:30] <Blondie101010> but he has repeated multiple times to start using existing tools
[00:50:23] <Blondie101010> that is what a programmer needs to master today... being able to make a messy router from scratch will not allow you to get any job or contract
[00:50:30] <da_wunder> and maybe after that you understand why you don't want to do that same yourself - and find some odd bugs later on versus using some battle tested library instead and just focus your application business logic more than just basic stuff like that - imho
[00:51:30] <celphi> Blondie101010: I dont disagree on using existing tools, but my style of learning is different from yours. I learn best by attempting to create my own and landing into these pitfalls then after completing my own version ( i get a better understanding of what the process is needed) then when i see a correct version of it, i can compare and see how they handled the parts i had trouble on
[00:52:29] <Blondie101010> so you want to spend your life searching for ways to do everything that already exists?
[00:52:43] <Blondie101010> how will anyone benefit from this?
[00:53:00] <Blondie101010> !+nih
[00:53:00] <php-bot> [NIH] (or "NIH Syndrome"): See http://en.wikipedia.org/wiki/Not_Invented_Here
[00:53:14] <celphi> it's so that whenever i recommend to someone to use a framework (ie routing/controllers) i actually can say i know/understand how it works
[00:53:20] <da_wunder> celphi: I though same like ~20 years ago - and really I regret that approach - I could learn stuff so much faster with other ways...
[00:53:46] <Byteflux> It's truly ridiculous. It's 100% the same thing as saying "I don't know how to build a car, I don't know what goes into a car, I don't know how a car works at all. But I must build it from scratch without any information because that's the best way for me to learn."
[00:54:01] <Byteflux> I've given up on trying to help this stubborn person. They're wasting their own time and eventually I realized I was wasting mine.
[00:54:09] <da_wunder> and if you don't know/understand how those libraries work - just take a deep dive to those and see what those are doing
[00:54:26] <celphi> That's fine Byteflux.
[00:54:39] <Blondie101010> it really isn't
[00:54:45] <Blondie101010> this is becoming a real problem
[00:55:00] <da_wunder> Byteflux: true, next time I'll just add celphi to my ignore list - as I've done multiple people
[00:55:12] <celphi> I'm coming in here asking php questions. It's not out of scope
[00:55:21] <Blondie101010> but please someone tell da_wunder to not say anything about ignore lists anymore
[00:55:39] <celphi> if you want to blacklist me bc im not doing it your way that's perfectly fine with mee
[00:56:03] <Byteflux> Won't be long before you're talking to yourself in here.
[00:56:14] * Blondie101010 nods
[00:57:51] <stenno> .
[00:57:58] <stenno> ._.
[00:58:02] <da_wunder> celphi: I'm not telling you to use some other library - just look how those are doing the same that you're trying to do - imho that's helping - but seems like you've different opinion about that - imho
[00:58:10] <celphi> line 355: $components = parse_url($uri);
[00:58:36] <Blondie101010> read what happens before
[00:58:46] <Blondie101010> where does this $uri come from?
[00:59:08] <Blondie101010> that was shown to you 20-30 minutes ago
[01:00:30] <celphi> it's parsing a uri not url.
[01:01:01] <Blondie101010> you did not answer my question
[01:01:12] <Blondie101010> what's in it?
[01:01:17] <Blondie101010> where does it come from?
[01:01:28] <Blondie101010> it was normalized before excution got there
[01:01:50] <celphi> it comes from wherever the Request::create(....) is called from
[01:02:07] <celphi> but in the comments it says $uri is the URI
[01:02:56] <celphi> `* @param string               $uri        The URI`
[01:03:25] <Blondie101010> so you want to know how they do it, but you just read a few comments from the code???
[01:03:42] <Blondie101010> read the code that brings you to that line
[01:04:34] <da_wunder> huoh... parse_url expects an URL and as pointed earlier
[01:04:51] <Blondie101010> yes but a variable name is just a name
[01:05:08] <Blondie101010> what matters is what's in it
[01:07:14] *** Joins: tw2113 (~tw2113@2001-48F8-6-1318-D2AB-D5FF-FE77-2BD5-dynamic.midco.net)
[01:08:53] <tw2113> sup
[01:12:10] <s17> ikr?
[01:12:48] <s17> parse_url($uri); # lol
[01:18:48] <da_wunder> celphi: you really should look how that $components is used there...
[01:19:17] <celphi> ok
[01:20:50] <celphi> it appears they're using it to build their own $server array
[01:21:49] <da_wunder> didn't you read what that componend does? - "The HttpFoundation component defines an object-oriented layer for the HTTP specification."
[01:23:23] <da_wunder> and to see what is happening when you use eg. that `getUri` method just add breakpoint before you call that and see what really happens - xdebug is your friend to learn stuff
[01:24:55] <celphi> ok ill try that.
[01:25:36] <toretto> idk why php.net's documentation is too old. does anyone recommend alternative documentations compared to php.net?
[01:26:27] <da_wunder> toretto: which doc you're referring?
[01:27:38] <Blondie101010> toretto:  it should be accurate
[01:27:41] <Blondie101010> what page is wrong?
[01:29:15] <toretto> i don't use PHP on regular basis, where can i learn about the newer language feature in PHP 7-8 from the documentation? like security best practices, preventing certain vulnerabilities, type safty and such?
[01:29:29] <da_wunder> toretto: I haven't seen outdated docs there, so could you share which doc page you're referring?
[01:29:49] <toretto> da_wunder: Blondie101010: i think i'm confused a bit. ignore my question on outdates ness.
[01:30:30] <toretto> but i'd like to know any comments on my 2nd question.
[01:30:46] <da_wunder> toretto: if you're looking for changelog - https://www.php.net/ChangeLog-8.php
[01:31:20] <da_wunder> toretto: or if you're looking migration guide from 7 -> 8 - https://www.php.net/manual/en/migration80.php
[01:31:48] <toretto> yeah, the 2nd link is something i was looking for.
[01:31:56] <Byteflux> https://wiki.php.net/rfc#implemented is a good resource to bookmark to keep up to date with new features
[01:32:13] <toretto> but what about security best practices? i specifically want some links regarding that.
[01:32:45] <toretto> is there any official documentation covering this specifically?
[01:32:54] <toretto> or do you guys recommend some other documentation for this?
[01:33:17] <da_wunder> https://www.php.net/manual/en/security.php
[01:33:47] *** Quits: tone0 (~tone@071-011-252-111.res.spectrum.com) (Quit: The Lounge - https://thelounge.chat)
[01:34:39] *** Joins: tone0 (~tone@071-011-252-111.res.spectrum.com)
[01:34:42] <tw2113> https://phptherightway.com/ ?
[01:34:55] <da_wunder> toretto: and the latest docs you can find from github - https://github.com/php/doc-en - maybe there is some pull request to cover your issue and/or you could create an issue about that
[01:36:18] <Blondie101010> tw2113:  yes and no...  there are flagrant errors in their examples
[01:36:40] <Byteflux> lol, didn't even notice there was a proposal to rename T_PAAMAYIM_NEKUDOTAYIM. got rejected
[01:37:20] <Blondie101010> well it could affect existing projects, but that would have been a good thing
[01:37:49] <Byteflux> the proposal did say it would just get aliased to keep BC
[01:38:45] <da_wunder> maybe renaming that would cause more confusing people - dunno
[01:39:28] <stenno> who thought it was a good idea to name it that in the first place
[01:39:57] <da_wunder> early days... like parameter order with array_map and array_walk, etc.
[01:40:25] <Byteflux> some israeli person who perhaps at the time couldn't come up with a better name :p
[01:40:40] * Blondie101010 nods
[01:40:52] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:41:04] <toretto> is there a way to hide the '.php' suffix of the source files assuming i'm using Nginx, without some Nginx configuration hacks?
[01:41:13] <toretto> most solutions i see are just hacks and just insecure.
[01:41:29] <Blondie101010> that is a webserver question
[01:41:49] <tw2113> In PHP, T_PAAMAYIM_NEKUDOTAYIM denotes a syntax error while doing any task. The reason for getting this error is only one. Paamayim Nekudotayim in Hebrew means double colon:: like as a sample error you may see
[01:41:59] <Blondie101010> not sure what you mean by hiding the php extension
[01:42:04] <da_wunder> toretto: use just one entrypoint like index.php and then make that actual file determination there
[01:42:32] <tw2113> i googled/copy/pasted
[01:42:39] <toretto> Blondie101010: lol.com/foo/some_page.php?lol=haha into lol.com/foo/some_page?lol=haha
[01:42:54] <Blondie101010> toretto:  few sites will show anything .php today
[01:43:10] <Blondie101010> because they use a single entry point and router
[01:43:21] <toretto> router?
[01:43:27] <Blondie101010> application router
[01:43:40] <toretto> what's that? like some PHP web frameworks?
[01:43:49] <toretto> can you give me some link?
[01:44:01] <toretto> oint like index.php and then make that actual file determination there
[01:44:04] <toretto> oops
[01:44:07] <da_wunder> eg. https://github.com/nikic/FastRoute
[01:44:08] <toretto> sorry about that.
[01:44:31] <toretto> interesting.
[01:44:57] <Byteflux> `try_files $uri $uri/ /index.php;` would be the magic line in nginx, along with a location block that proxies *.php (or specifically index.php) requests to php-fpm
[01:45:16] <da_wunder> and with that you you don't need to expose anything else than your index.php to public internet
[01:45:22] <Byteflux> https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
[01:45:51] <celphi> `FallbackResource /index.php`
[01:55:07] *** Quits: Optimus (~risto@87.227.237.59) ()
[02:08:08] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Ping timeout: 255 seconds)
[02:09:47] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[02:13:27] *** Joins: ferdna (~ferdna@user/ferdna)
[02:15:56] *** Quits: yuckey2d (~yuckey2d@66.115.145.202) (Quit: The Lounge - https://thelounge.chat)
[02:17:02] *** Joins: yuckey2d (~yuckey2d@66.115.145.202)
[02:21:37] <celphi> is it better to use passed `variables` to a function or to use `$this->variable`
[02:22:15] <celphi> my guess is that it's better to use variables passed to function
[02:22:23] <TinoDidriksen> Depends on the variable's lifetime and scope.
[02:22:56] <celphi> ok that makes sense with scope
[02:23:14] <celphi> so if it's not used anywhere else then go with the more restricted option
[02:23:15] <celphi> ?
[02:23:18] *** Parts: StayHungry (~StayHungr@gateway/tor-sasl/stayhungry) (-)
[02:24:33] <Blondie101010> nothing restrictive there
[02:24:36] <celphi> like in this: https://bpa.st/UPVA
[02:24:43] <Blondie101010> is it a property of the object or not?
[02:24:47] <celphi> should i be passing in those instances?
[02:25:22] <Blondie101010> how else would you be handling that?
[02:25:44] <celphi> i recall when reading inject dependency you want to pass in your variables than instantiate inside functions
[02:26:06] <Blondie101010> definitely
[02:26:24] <Blondie101010> so why are you showing code that does it differently than what you describe?
[02:26:28] <celphi> so in my example it's better to pass in those instances right
[02:26:33] <Blondie101010> yes
[02:26:46] <Blondie101010> but we don't even know the class name
[02:26:49] <celphi> ok ty- i just wanted to be sure i understood what it was saying
[02:27:13] <celphi> class Application{}
[02:27:22] <Blondie101010> ok
[02:28:07] <celphi> i was also askig because it wouldnt seem i would need to decouple application from route or request
[02:38:08] <da_wunder> that depends if your application is also used to run CLI commands - with those you don't have route nor request
[02:38:15] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:40:15] <celphi> wouldnt that be a security issue and create environment depencency to allow cli commands?
[02:41:57] <da_wunder> with that I mean something like `php cli.php some-command-in-your-application` and those you could eg. with cron scripts, run database migrations, provide a cli tool to eg. list/create/update/delete users - without web interface
[02:42:44] <da_wunder> those cli commands you don't use from your web interface - those are only used from cli - nowhere else
[02:43:50] <da_wunder> and if/when there is same logic on your web ui and cli commands - you refactor those parts to separated services which you use from your cli commands and from your controllers
[02:49:51] *** Joins: pmercado (~pmercado@186.107.49.222)
[02:52:56] *** Quits: genomc (uid245282@id-245282.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:40] <celphi> k
[02:54:40] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[03:49:42] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 258 seconds)
[04:02:14] *** Quits: ethoxy (~root@echelon.lucif3r.ru) (Quit: Lost terminal)
[04:02:38] <Byteflux> celphi: Routing/requests/responses are concepts that could probably be abstracted away for console such that you'd have a ConsoleRouter, ConsoleRequest, ConsoleResponse
[04:03:00] <Byteflux> Obviously not to the same detail as HTTP, but just enough to make it work with a common set of interfaces.
[04:03:53] <Byteflux> Actually meant da_wunder.
[04:06:34] <Byteflux> Console commands fit quite well into that paradigm, just that implementations are usually called other things... like Dispatcher, Command etc
[04:07:33] <da_wunder> Byteflux: true, the point was just to show that difference between web requests and cli commands
[04:08:17] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[04:09:20] <celphi> kinda weird: `$app->router->get('/', function () { return 'Hello World'; });` should really be name `set(...)` since it seems to be setting a value not getting
[04:09:40] <celphi> but i guess the "get" is the request method
[04:09:49] <celphi> that's why it threw me off
[04:09:50] <da_wunder> that get is request method on that context...
[04:10:12] <da_wunder> you really should look those docs about the library that you're using
[04:10:54] <celphi> yeah they make leaps in description
[04:11:12] <celphi> in beginning it's easy to follow but then starts to jump in explaining
[04:12:32] <da_wunder> huoh... this is enough for me - I hope that you've good luck on your adventure
[04:12:44] <celphi> thnx da_wunder
[04:20:33] *** Quits: entuland (~entuland@user/entuland) (Quit: Leaving)
[04:25:41] <celphi> how come i never see people use `function whatever(): void {}`
[04:26:01] <celphi> `: void` the return hinting is what im referring to
[04:34:39] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[04:39:12] <Blondie101010> ask them
[04:39:40] <Blondie101010> but return type hinting is pretty recent, so don't expect to see it in every package
[04:44:38] <tw2113> make sure you check the published timestamp of the tutorial you're follwing
[04:44:47] <tw2113> they may be old enough to not have that available
[04:44:55] <tw2113> or they may not have a timestamp available which is a shame
[04:50:29] <celphi> k
[04:53:00] *** Joins: stenno (~stenno@user/stenno)
[04:57:41] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[04:59:45] *** Joins: stenno (~stenno@user/stenno)
[05:05:23] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[05:07:36] *** Joins: stenno (~stenno@user/stenno)
[05:12:43] *** Joins: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com)
[05:19:47] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 258 seconds)
[05:21:11] *** Quits: Blondie101010 (~Blondie10@user/blondie101010) (Ping timeout: 255 seconds)
[05:22:10] *** Joins: stenno (~stenno@user/stenno)
[05:31:23] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:33:20] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 255 seconds)
[05:35:03] *** Joins: vlm (~vlm@user/vlm)
[05:35:16] *** Joins: stenno (~stenno@user/stenno)
[05:39:03] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[05:40:49] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 250 seconds)
[05:43:50] *** Joins: stenno (~stenno@user/stenno)
[05:49:23] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[05:53:34] *** Quits: faktor (~factor@ip174-67-28-62.ok.ok.cox.net) (Quit: Leaving)
[05:58:36] *** Joins: stenno (~stenno@user/stenno)
[05:58:51] <celphi> is union types only for php 8?
[05:59:27] <celphi> or is it possible to do 2 types of hint types in function params with php 7.4?
[05:59:28] <__adrian> https://www.php.net/manual/en/language.types.declarations.php#language.types.declarations.union
[05:59:45] <__adrian> also there's a very, very limited set of situations where this makes sense
[06:00:07] <celphi> with controllers if i had string or callable
[06:00:08] <__adrian> my general advice is to pretend that union types don't exist
[06:00:27] <__adrian> "if i had string or callable"  when would that make sense?
[06:01:11] *** Quits: joedoe47 (~joedoe47@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 258 seconds)
[06:01:18] *** Joins: bernard__ (~bernard@user/bernard)
[06:01:32] <celphi> for gets? ie. `$app->router->get('/', 'dashboard');`
[06:01:49] <__adrian> what is "dashboard" there?
[06:02:02] <celphi> a string for a function name
[06:02:07] <da_wunder> yeah union types are something that makes code hard to read - imho
[06:02:12] <__adrian> a string for a function name is callable
[06:02:32] <__adrian> you DON'T want to hint just  string  as that would allow non-callable strings.
[06:02:33] <celphi> yeah but if i use `$app->router->get('/', 'dashboard');` dashboard is a string
[06:02:40] <__adrian> "> a string for a function name is callable"
[06:02:49] <da_wunder> although I'm fine with public function foo(?Foo $foo)
[06:03:08] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 252 seconds)
[06:03:17] <__adrian> yes, nullable types are fine (not the same concept as unions)
[06:03:22] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[06:03:38] <__adrian> "one type or null" vs. "one type or another"
[06:03:43] <__adrian> *or nothing
[06:04:19] *** Joins: stenno (~stenno@user/stenno)
[06:04:28] <da_wunder> and callable could be a string - https://www.php.net/callable
[06:04:34] <celphi> if i use `public function get(string $path, string $callback): void` and change string to callable it would break wouldnt it?
[06:04:44] <__adrian> ...
[06:04:55] <__adrian> string $callabck  ← this makes no sense.
[06:05:02] <__adrian> callable $callabck  ← this makes sense.
[06:05:15] <__adrian> and one more time:  "> a string for a function name is callable"
[06:05:46] <celphi> ok ty
[06:05:51] <da_wunder> true, but eg. most of static analyzers won't notice that properly - at least yet
[06:05:52] <__adrian> welcome
[06:06:08] <__adrian> da_wunder: you mean callable strings?
[06:06:19] <__adrian> it's hard to "notice" as it's runtime dependent
[06:06:23] <celphi> just seems unintivite that 'string' is callable
[06:06:32] <da_wunder> yep
[06:06:50] <__adrian> celphi: note that, even if an arg is callable, that doesn't mean it's usable they way you need
[06:07:06] <__adrian> you should use an interface for your controllers
[06:07:20] <celphi> ok havent gotten to that part yet
[06:07:49] <celphi> getting closer though
[06:07:50] <__adrian> e.g., Psr\Http\Server\RequestHandlerInterface
[06:08:52] <celphi> `PHP Fatal error:  Uncaught TypeError: Argument 2 passed to app\\core\\Router::get() must be callable, string given,....`
[06:08:58] <__adrian> you'll find a lot of examples that allow request handlers (controllers) to be defined as closures, any callable, class:method strings, etc.
[06:09:12] <__adrian> you passed a string that is not callable
[06:09:19] <__adrian> the error is correct/desired behavior
[06:09:28] <__adrian> you'll find a lot of examples that allow request handlers (controllers) to be defined as closures, any callable, class:method strings, etc.
[06:09:34] <__adrian> this flexibility is not all that desirable
[06:09:37] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 258 seconds)
[06:10:53] <__adrian> recommendation: use an interface. if you want flexibility, make another method that can take _classnames_
[06:11:08] <__adrian> that way you can check that a given classname is of the proper type
[06:11:11] <celphi> yeah im not there yet
[06:11:30] <__adrian> recommendation: don't wait until you're "there" to learn about things
[06:11:48] <__adrian> learn things first, make and understand a plan, THEN start doing it.
[06:12:07] <celphi> im in a node tree and im trying to avoid the depth first search- bc it's  forever going down
[06:12:14] <__adrian> you should not
[06:12:20] <celphi> i cant learn that way
[06:12:29] <__adrian> then you can't learn (which is nonsense)
[06:12:48] <celphi> anyways thnx for the help earlier
[06:12:52] <__adrian> welcome
[06:19:57] <celphi> can i not use `$app->router->get('/contact', [\app\controllers\SiteController::class, 'contact']);` as callable?
[06:20:26] <celphi> the 2nd param
[06:20:44] <__adrian> see da_wunder's link about to learn what's "callable"
[06:20:55] <__adrian> i don't know if that array is callable or not.
[06:21:09] <celphi> ok ill check it out
[06:21:09] <Byteflux> it is but it's a static call and that's obviously not a good idea
[06:21:24] <celphi> i keep getting error
[06:21:34] <__adrian> "it is but..."  well, it MIGHT be  ;)  AND if it is, then yes, it's not a good idea
[06:21:56] <celphi> im watching a video that first shows the static approach then it does dynamic
[06:22:22] <__adrian> stop watching that video then
[06:22:34] <celphi> he's not using type hinting though
[06:22:39] <__adrian> also, in terms of methods , it's not "static, dynamic"
[06:22:42] <celphi> `PHP Fatal error:  Uncaught TypeError: Argument 2 passed to app\\core\\Router::get() must be callable, array given, called`
[06:22:45] <__adrian> it's "static, instance"
[06:22:55] <__adrian> celphi: i understand your error
[06:22:59] <__adrian> see responses above
[06:23:44] <Byteflux> ::class might not be a callable array variant or could be a version thing, but ['ClassName', 'method'] is documented as a callable to a static method
[06:24:14] <__adrian> [class name, static method name] is callable.
[06:24:23] <__adrian> [object instance, method name] is callable.
[06:24:23] <Byteflux> ::class is actually just the string class name any way isnt it
[06:24:31] <__adrian> Byteflux: yes
[06:24:33] <Byteflux> the fully qualified name
[06:24:36] <__adrian> yep
[06:24:39] <Byteflux> yeah that's what i thought
[06:24:52] <__adrian> Byteflux: in fact,  <?= Byteflux::class ?>
[06:27:04] <Byteflux> ah, nice
[06:27:05] <celphi> Byteflux: in your example of ['ClassName', 'method'], how would you include the namespace in the ClassName
[06:27:15] <Byteflux> doesn't even care if the class is real
[06:27:21] <__adrian> celphi: "ClassName"  MUST be the fully qualified classname
[06:27:43] <celphi> not sure what you mean by that
[06:27:55] <Byteflux> '\fully\qualified\name\of\YourClass'
[06:27:55] <celphi> fully qualified classname?
[06:27:58] <__adrian> i mean it must be the *entire* classname
[06:28:03] <__adrian> not only part of it
[06:28:16] <__adrian> you don't have the option of not including the namespace
[06:28:27] <celphi> oh ok
[06:28:27] <Byteflux> That's where ::class can be useful
[06:28:29] <Byteflux> BUT...
[06:28:31] <__adrian> ^
[06:28:41] <__adrian> but this is not your problem
[06:28:45] <__adrian> (or probably isn't)
[06:28:47] <Byteflux> ['ClassName', 'method'] is a callable to a static method. This is a bad solution
[06:28:52] <__adrian> did you see my examples above?
[06:29:32] <celphi> im still getting `  $app->router->get('/contact', ['\app\controllers\SiteController', 'contact']);` is an array and not callable
[06:29:38] <__adrian> did you see my examples above?
[06:29:56] <__adrian> "[class name, static method name] is callable. [object instance, method name] is callable."
[06:30:01] <celphi> oh i see bc mines isnt static
[06:30:23] <__adrian> because it's not one of the forms above
[06:30:35] <__adrian> [class name, instance method] is NOT callable.
[06:31:01] <__adrian> now mind Byteflux's response (and I know i've mentioned this before as well): static methods should be avoided
[06:31:14] <__adrian> you need a REALLY GOOD reason to make a method static. this does not qualify.
[06:31:23] <celphi> ok going to try it just to see if error goes away
[06:31:40] <__adrian> why don't you try fixing it the right way?
[06:31:54] <__adrian> instead of fixing it the wrong way to "see if it works"?
[06:31:58] <__adrian> !+later
[06:31:58] <php-bot> "later"? best practices — like input validation, prepared statements, testing, coding style, and so forth — are important. Many people say they "just want it to work" and claim they will "fix it later." Though they might even be sincere, experience shows it almost **never** happens. Don't be that person! Do it right the first time!
[06:32:21] <celphi> bc i want to see what you're saying working
[06:32:29] <__adrian> read what i'm saying
[06:32:36] <__adrian> i'm NOT saying you should make the method static.
[06:32:49] <Byteflux> $site = new SiteController; // somewhere above and then [$site, 'contact'] as the callable
[06:32:51] <celphi> so i changed my function to be static and it's still saying it's an array not callable
[06:32:54] <__adrian> if you want to see what i'm saying working, then do what i'm saying
[06:32:55] <Byteflux> OR have the router create an instance
[06:33:29] <celphi> adrian i dont plan to keep it that way- i just want to see it work so i am sure i understand what you're saying
[06:33:45] <Byteflux> but then you'd need to do a custom handler syntax that isn't a callable, since the router would be like a controller factory and you need to tell it which controller to make
[06:33:46] <__adrian> again, if you want to see what i'm saying working, then do what i'm saying
[06:33:50] <__adrian> not the thing i'm not saying
[06:34:46] <celphi> you said `[class name, static method name] `. im using `$app->router->get('/contact', ['\app\controllers\SiteController', 'contact'])` where contact is a static method
[06:35:04] <__adrian> what's the other two things i said?
[06:35:23] <__adrian> again, learn first, make and understand a plan, THEN you can write code.
[06:35:25] <celphi> [class name, instance method] is NOT callable.
[06:35:29] <__adrian> you MAY NOT write the code first.
[06:35:34] <__adrian> no
[06:35:45] <da_wunder> this same conversation has been here multiple days... if someone doesn't want to listen proper advices please stop
[06:35:56] <celphi> [object instance, method name] is callable."
[06:36:06] <__adrian> [class name, static method name] is callable. [object instance, method name] is callable. you need a VERY GOOD reason to make a method static, and this does not qualify.
[06:36:12] <__adrian> yes
[06:36:33] <__adrian> so if you want to try what i said... i said DO NOT try to "solve" this by making the method static.
[06:36:42] <__adrian> so what SHOULD you try?
[06:36:50] <__adrian> i.e., what's the other alternative?
[06:36:55] <celphi> ?? ok i get your 3rd sentence but why doesnt your 1st statement work?
[06:37:03] <__adrian> it does
[06:37:14] <Byteflux> in fact just get into the habit of never using static. there might be cases where it's justified, but those are few
[06:37:14] <__adrian> i'm guessing your class is not defined when you try
[06:38:02] <__adrian> 9/10, when i write a static method, it's because there's some limiting factor in existing code.
[06:38:18] <__adrian> i.e., a bad decision years ago that prevents me from doing something quite the best way.
[06:38:36] <__adrian> since you're writing NEW code, you should simply not make those bad decisions in the first place.
[06:40:08] <celphi> not everyone writes good code so i have to understand how bad code works too.
[06:40:21] <Byteflux> it can be tempting to use static but by actively avoiding it early on during learning you are confronted with needing to think about how to do things correctly.
[06:40:23] <__adrian> you're learning
[06:40:28] <__adrian> don't learn with bad code
[06:40:35] <__adrian> learn with good code
[06:40:58] <__adrian> understanding bad code starts with recognizing that it's not good. you can't do that if you don't know good code.
[06:41:43] <__adrian> if you learn with bad code, you'll basically always write bad code. you'll build bad habits that are hard to break.
[06:41:55] <__adrian> instead, build GOOD habits that are heard to break.
[06:41:59] <__adrian> *hard
[06:43:28] <Byteflux> I wish I would've learned this all the right way from the start... especially with all the polished standards and tools we have now.
[06:46:49] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[06:48:03] *** Joins: keypusher (keypusher@user/keypusher)
[06:52:26] <__adrian> bbl folks.
[07:03:20] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[07:03:52] *** Quits: pmercado (~pmercado@186.107.49.222) (Quit: Konversation terminated!)
[07:04:14] *** Joins: Rockwood (~Rocky@user/rocky)
[07:07:31] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:20:53] *** Quits: W8TVI_ (~W8TVI@2600:6c4a:5b00:7:b57f:d492:e525:cf79) (Ping timeout: 255 seconds)
[07:52:51] <celphi> `Uncaught TypeError: call_user_func() expects parameter 1 to be a valid callback, class 'app\\controllers\\SiteController' not found in /var/www/html/twalow/web/index.php:10`
[07:55:05] *** Joins: guidoc (~guido@host-95-235-253-53.retail.telecomitalia.it)
[07:57:05] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[08:01:57] *** Joins: W8TVI_ (~W8TVI@2600:6c4a:5b00:7:b57f:d492:e525:cf79)
[08:02:00] <__adrian> do you understand the message?
[08:03:22] <Rockwood> your function need 1 param celphi
[08:03:39] <celphi> i have it there
[08:03:53] <__adrian> celphi: do you understand what the message is telling you?
[08:04:09] <__adrian> no class with that name exists
[08:04:09] <celphi> yes. the argument needs to be callable
[08:04:16] <__adrian> no, that's not what it says at all
[08:04:24] <celphi> but i do have it
[08:04:26] <__adrian> it says "class 'app\\controllers\\SiteController' not found"
[08:04:43] <__adrian> really?  var_dump(class_exists("app\\controllers\\SiteController"));
[08:05:47] <celphi> false
[08:05:55] <__adrian> so no class with that name exists
[08:06:02] <celphi> hmm i must be doing something wrong with namespaces
[08:06:03] <__adrian> did you (auto)load the class definition?
[08:06:20] <__adrian> ok, so did you use the right classname?
[08:06:46] <celphi> class SiteController
[08:06:58] <celphi> `namespace app\controllers;`
[08:07:16] <__adrian> that means the classname is app\controllers\SiteController
[08:07:19] <__adrian> did you (auto)load the class definition?
[08:07:33] <celphi> not sure what you mean by that
[08:07:55] <__adrian> did you set up an autoloader, or did you require the class definition?
[08:08:08] <celphi> im using composer autoloader
[08:08:25] <__adrian> did you write psr-4 rules that allow it to find your class?
[08:08:34] <celphi> "app\\": "./"
[08:08:52] <celphi> do i need to add one for controllers?
[08:09:04] <__adrian> that's very likely not correct
[08:09:22] <Byteflux> under what name/where is the class file?
[08:09:27] <__adrian> what directory is your project is, and what directory is that controller in?
[08:09:39] <__adrian> is your project *root
[08:10:02] <Byteflux> where is your composer.json, specifically
[08:10:02] <celphi> https://bpa.st/DQXA
[08:10:15] *** Joins: evilbug (~evilbug@191.101.174.127)
[08:10:32] <Byteflux> oh
[08:10:36] <Byteflux> the file is named SiteControllers.php
[08:10:48] <Byteflux> which is not SiteController
[08:10:51] <__adrian> mm hm
[08:11:06] <__adrian> but also, follow conventions: put your source code in src/
[08:11:18] <celphi> but the class is SiteController
[08:11:23] <__adrian> mapping the autoloader to ./ is a hell of a waste
[08:11:33] <__adrian> celphi: then you misnamed the file
[08:11:35] <Byteflux> PSR-4 maps the class name to the file name
[08:11:50] <celphi> crap good to know
[08:11:50] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[08:11:56] <__adrian> google it
[08:12:01] <__adrian> that's the entire concept
[08:12:44] <celphi> geez all that time wasted trying to figure this out and that was the issue
[08:12:44] <__adrian> at the very least, do "app\\controllers\\": "controllers/"
[08:12:45] <celphi> lol ty
[08:13:09] <Byteflux> just in case it's not clear, we mean that you confused SiteController and SiteControllers (with an 's'). You should still have .php extention on the file, of course.
[08:13:19] <__adrian> mapping to ./ wastes a lot of time (and potentially leads to conflicts/errors) trying to find class definitions
[08:13:46] <celphi> ya originally i was confused by that Byteflux but figured out what you meant
[08:14:13] <Byteflux> but as adrian said it's better to make a src/ folder and dump your app stuff in there, then you can just keep the "app\\" mapping and point it to "src/"
[08:14:23] <celphi> i have `./` because my document root goes to web/index.php
[08:14:34] <Byteflux> that's another thing
[08:14:42] <Byteflux> your code shouldn't live inside your web root
[08:14:46] <__adrian> ...you don't have your project sitting in your public folder, do you?
[08:14:53] <Byteflux> make a public/ folder and put your index.php in there
[08:14:56] <__adrian> ^
[08:14:58] <Byteflux> and make the public folder your webroot
[08:15:18] <__adrian> _maybe_ your index.php can go in the web root (but it doesn't have to)
[08:15:40] *** Joins: TakinOver (~quassel@47.150.206.35)
[08:15:41] <__adrian> NONE of your source files should be there.
[08:15:55] <__adrian> your composer project root should be outside your web root directory.
[08:16:27] <Rockwood>  class 'app\\controllers\\SiteController' not found in /var/www/html/twalow/web/index.php:10` oops yes wrong answer i have given sorry for it
[08:16:28] <celphi> listen
[08:16:34] <Byteflux> yeah there's no good reason for your app source files to be in a web root (aka document root)
[08:16:44] <__adrian> ^ and many good reasons not to
[08:16:47] <celphi> i have FallbackResource to index.php
[08:16:50] <__adrian> good
[08:17:03] <celphi> and document root as /twalow/web
[08:17:03] <__adrian> that means even your index.php doesn't need to be in your web root
[08:17:08] <Byteflux> make a public/ folder in your project folder. then move index.php to your public/ folder
[08:17:12] <Byteflux> then change your document root to the public folder
[08:17:29] <Byteflux> then make a src/ folder in your project folder. move all your app classes into the src/ folder
[08:17:40] <Byteflux> then update your composer.json from "./" to "src/"
[08:17:41] <Rockwood> celphi, every framework using this way
[08:17:46] *** Quits: W8TVI_ (~W8TVI@2600:6c4a:5b00:7:b57f:d492:e525:cf79) (Ping timeout: 240 seconds)
[08:17:51] <Byteflux> then clear your composer autoload cache
[08:18:00] <celphi> ok
[08:18:16] <celphi> so rename web -> public and core -> src
[08:18:19] <__adrian> i'll let you run with Byteflux's suggestions  (it's fine)  but for awareness, not even your FallbackResource file needs to be in your web root
[08:18:35] <Byteflux> celphi: okay, read carefully.
[08:18:45] <Byteflux> celphi: answer me: core -> app\core classes?
[08:19:08] <celphi> yes
[08:19:23] <Byteflux> okay, and controllers are app\controllers namespace, models is app\models namespace?
[08:19:44] <celphi> havent started models yet. just created dir
[08:19:50] <Byteflux> yeah i know, but that's the plan, yes?
[08:19:51] <celphi> but yes on controllers
[08:19:56] <celphi> yes
[08:19:58] <Rockwood> celphi, what are you creating now?
[08:20:12] <celphi> lol, just controllers/router
[08:20:14] <Byteflux> okay, so you have 3 folders right now where you are storing (or plan to store) your *app's* class files. core, controllers and models
[08:20:16] <Rockwood> any framework?
[08:20:44] <Rockwood> celphi, you can see many examples for your requirement
[08:20:45] <celphi> core
[08:20:56] <Byteflux> /var/www/html/twalow/web/ is your *project folder*
[08:21:02] <Byteflux> inside of web, make a "src" folder
[08:21:13] <Byteflux> then move core, controllers and models folders *into* the src folder.
[08:21:19] <celphi> when you say app class files are you referrig to Router.php Request.php ?
[08:21:29] <Byteflux> i am referring to every class files in the 'app' namespace
[08:22:16] <Byteflux> remember, i asked you about those folders and the app namespace
[08:22:31] <Byteflux> they are core/controllers/models. those are the folders containing your app class files right now
[08:22:33] <celphi> https://github.com/twalow/php_project
[08:23:10] <__adrian> _probably_ all of those folders should be inside a directory  src/
[08:23:32] <celphi> i made it public so you can see what i have so far
[08:23:51] <Byteflux> well...i dunno about all of them
[08:23:59] <Byteflux> but core, controllers, models 100% should be in src/
[08:24:01] <__adrian> maybe not web/
[08:24:08] <Byteflux> what is runtime/ ?
[08:24:12] <__adrian> i don't know what runtime/ is for
[08:24:37] *** Quits: tw2113 (~tw2113@2001-48F8-6-1318-D2AB-D5FF-FE77-2BD5-dynamic.midco.net) (Remote host closed the connection)
[08:24:43] <celphi> so what should i move?
[08:24:49] <Byteflux> views could go in src or not, as they aren't class files but i guess tehy are still technically app sources
[08:24:54] <__adrian> what is runtime/
[08:24:59] *** Quits: DaNeenjah (~jake@adsl-74-230-9-66.hsv.bellsouth.net) (Quit: WeeChat 3.2)
[08:25:07] <celphi> im not sure yet- im only 1/2 through video
[08:25:15] <Byteflux> okay, forget about runtime for now then
[08:25:18] <Byteflux> did you make the src/ folder?
[08:25:30] <__adrian> views/ (seeing as they're template files) would go in a directory resources/
[08:25:36] <Byteflux> yeah that's probably better
[08:25:42] <celphi> src goes to document_root?
[08:25:48] <__adrian> > im only 1/2 through video  // why are you writing code then?
[08:25:54] <__adrian> no
[08:26:00] <__adrian> src/ is OUTSIDE the doc root
[08:26:07] <__adrian> in your case, web/ would be the doc root
[08:26:10] <Byteflux> okay, so on github, php_project/web is your document root right?
[08:26:19] <Byteflux> you need php_project/src
[08:26:27] <celphi> var/www/html/twalow/web is my document_root
[08:26:35] <Byteflux> i mean relatively speaking
[08:26:47] <__adrian> celphi: which directory is that _in your repo_?
[08:26:53] <Byteflux> in relation to your git repo
[08:27:08] <__adrian> is it  https://github.com/twalow/php_project/tree/master/web  ?
[08:27:32] <celphi> ok so i guess master is twalow
[08:27:41] <Byteflux> wait what
[08:27:48] <__adrian> click the link
[08:27:55] <__adrian> is that directory your doc root?
[08:28:07] <__adrian> > click  // not read. click
[08:28:45] <celphi> on github php_project/web is document root and on my computer twalow/web is my document_root
[08:28:57] <Byteflux> yes, good. that is how you should be doing it.
[08:29:14] <__adrian> yes. assuming those two are the _same directory_ (which was my question).
[08:29:22] <celphi> so dont change it?
[08:29:25] <__adrian> no
[08:29:25] <Byteflux> yes, are they the same folder?
[08:29:40] <__adrian> but DO add the src/ directory and move your source files there, as suggested
[08:29:41] <Byteflux> if they are, then that's good
[08:29:49] <celphi> ok cool
[08:29:49] <Byteflux> on github, in php_project, you want a src/ folder.
[08:30:03] <celphi> then it's php_project/src?
[08:30:15] <Byteflux> yes, it's a sibling of the web folder
[08:30:20] <celphi> ok cool
[08:30:30] <celphi> then move all the stuff in core/ to src/ ?
[08:30:45] <Byteflux> move the *folders* core, controllers, models into src/
[08:30:55] <__adrian> most likey: _contents_ of core/ will go to src/
[08:30:56] <celphi> oh into not replace
[08:31:06] <Byteflux> so that all the classes will also be moved along with the folders
[08:31:17] <Byteflux> so it will look like src/core src/controllers src/models
[08:31:30] <__adrian> ^^
[08:31:36] <celphi> ok i get it
[08:31:39] <celphi> ty
[08:31:46] <Byteflux> *then* go back to your composer.json and change "app\\": "./" to "app\\": "src/"
[08:31:50] <__adrian> ^^
[08:32:03] *** Quits: forgotmynick (uid24625@id-24625.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[08:32:18] <__adrian> celphi: any other questions on all that?
[08:32:31] <celphi> nope - it was well explained
[08:32:32] <Byteflux> i don't know what runtime/ is, but if it's going to contain classes in the app namespace, then it should go into src/ too. if you figure that out later.
[08:32:36] <__adrian> celphi: then back to the earlier question:  __adrian> > im only 1/2 through video  // why are you writing code then?
[08:32:56] <__adrian> (1) learn (2) plan and understand (LAST) start writing code
[08:33:10] <__adrian> otherwise you're only learning how to copy+paste.
[08:33:20] <celphi> bc it sticks better when i type something im learning and i can experiment along the way- then i delete everything and tryto remake on memory/understanding
[08:33:25] <__adrian> you're not even learning how to decide which code is a GOOD IDEA to copy+paste.
[08:33:27] <Byteflux> do you understand why we told you to move your app class folders into src/ ?
[08:33:46] <celphi> im trhinking bc github has that standard
[08:33:51] <Byteflux> no
[08:33:53] <__adrian> no
[08:33:58] <celphi> no idea then
[08:34:21] <__adrian> not even because it's a convention. but there's a _reason_ it's a convention, which we hinted at above
[08:34:34] <__adrian> it's for organization
[08:34:50] <__adrian> when you dump everything in the project root, it's disorganized.
[08:34:55] <Byteflux> it's because 1) it prevents the composer autoload from checking every single folder in your project root and limits the class file lookups to just the src/ folder and 2) it groups your class files to a central location instead of mixing it with everything else all over the place
[08:35:19] <__adrian> it's like moving into a new house and unpacking everything into the kitchen, then just nailing the doors to the other rooms shut.
[08:35:28] <celphi> lmao
[08:36:01] <Byteflux> there's room for more improvement but don't wanna overwhelm >_>
[08:36:01] <__adrian> the autoloading bit is a side effect of that
[08:36:17] <celphi> oh now the /src in json makes sense
[08:36:31] <Byteflux> but now that you've done this, you will need to regenerate your autoloader
[08:36:38] <__adrian> e.g., you want to autoload your bathroom towel, but it's in the kitchen along with your bed and fridge.
[08:36:49] <__adrian> so you have to search EVERYTHING in order to find it.
[08:37:05] <celphi> is it `composer init` ?
[08:37:07] <Byteflux> do you remember how to run the composer command?
[08:37:17] <Byteflux> in your case it's just `composer dump-autoload`
[08:37:18] <__adrian> if you'd just put it somewhere sensible (like the bathroom, or a linen closet) then you'd need to search far fewer places.
[08:37:41] <Byteflux> you are telling composer to wipe the existing cached autoloader and it will make a new one
[08:37:54] <celphi> k
[08:38:48] <Byteflux> more than likely, any time you make changes to the "psr-4" in your composer.json, you will need to do this
[08:39:10] <Byteflux> which should be very infrequent any way
[08:39:29] <celphi> do i still add `app\\controllers\\": "controllers/"` ?
[08:39:41] <Byteflux> no, now that you have a src/ folder it's unnecessary to do it like that
[08:39:49] <celphi> bc it includes it
[08:39:52] <celphi> ok cool
[08:40:02] <Byteflux> you only need "app\\": "src/" and that recognizes everything in the 'app' namespace
[08:40:26] <celphi> k
[08:40:35] <Byteflux> it knows now to automatically map app\controllers to src/controllers and all other namespaces under app
[08:40:51] <celphi> so everything in src/ dir it adds files with app namespace?
[08:41:00] <__adrian> ^ and so long as you follow that naming pattern for your classes (and their filenames) then you won't need to change it
[08:41:08] <celphi> k
[08:41:19] <Byteflux> yes anytime you use an undefined class in the app name, it will attempt to load it from src/
[08:42:28] <celphi> awesome.
[08:42:39] <Byteflux> this is convention for most PHP projects. there are other conventions too which specify how you should name your classes, but that's not too important for now
[08:42:51] <Byteflux> how you should name your namespaces and classes, I mean.
[08:42:56] <celphi> thnx peeps!! made serious progress today
[08:44:20] <celphi> fixed on github. going to continue video
[08:48:42] *** Quits: evilbug (~evilbug@191.101.174.127) (Ping timeout: 258 seconds)
[09:00:04] <Rockwood> Byteflux, are you Nekomander?
[09:00:47] <Rockwood> __adrian, hi how are you sir?
[09:04:15] <__adrian> hi
[09:12:24] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[09:20:09] <Byteflux> nope, im not
[09:40:01] *** Quits: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net) (Quit: dlundgren)
[09:43:48] *** Joins: jetchisel (jetchisel@user/jetchisel)
[09:56:16] <celphi> `Uncaught Error: Class 'app\\controllers\\Controller' not found in /var/www/html/twalow/src/controllers/SiteController.php` why is it looking insite of /src/controllers?
[09:56:31] <celphi> when i have it in app\core
[09:57:05] <celphi> *inside
[09:58:21] <celphi> actually i think i need to dump my composer thingy brb
[09:59:08] <celphi> nope
[10:02:51] <Byteflux> where is the Controller class file
[10:02:53] <celphi> actually my question is wrong- why is it looking inside of `app\controllers` when my class is in `app\core`
[10:03:15] <celphi> ive updated my git
[10:03:27] <celphi> https://github.com/twalow/php_project
[10:03:41] <Byteflux> because when you do 'namespace app\controllers;' in a file, all other classes are relative to that namespace unless you use a fully qualified class name
[10:04:46] <Byteflux> you need to do `use \app\core\Controller;` and then you can just use `Controller` or you must use the full class name `\app\core\Controller` when referring to that class
[10:05:31] <celphi> inside of my SiteController.php ?
[10:05:37] <Byteflux> yes
[10:05:46] <Byteflux> where ever it is you're trying to use the class
[10:07:02] <celphi> SiteController is extended off Controller
[10:07:26] <Byteflux> cool, doesn't change anything i said
[10:07:56] <celphi> so even when using $this-> it applies?
[10:08:11] <Byteflux> it has nothing to do with $this
[10:08:21] <Byteflux> it only has to do with when referring to a class name
[10:08:22] <celphi> `return $this->render('contact', $params);`
[10:08:35] <celphi> render is inherited
[10:08:50] <Byteflux> namespace app\controllers; echo Controller::class -> app\controllers\Controller
[10:09:14] <Byteflux> namespace app\controllers; echo \app\core\Controller::class -> \app\core\Controller
[10:09:28] <celphi> k
[10:09:30] <Byteflux> namespace app\controllers; use \app\core\Controller; echo Controller::class -> \app\core\Controller
[10:09:55] <celphi> k
[10:12:15] <celphi> do you prefer `foreach ($params as $key => $value) { $$key = $value; } - or using extract with EXTR_SKIP
[10:12:38] <celphi> im assuming they achieve same thing where extr_skip would seem safer.
[10:13:01] <Byteflux> that foreach is basically just extract($params), so why do it?
[10:13:28] <celphi> ok- the video suggests the foreach buut i learned about extra yesterday
[10:13:38] <celphi> *learned extract yesterday
[10:14:13] <Byteflux> this is not sounding like a very good video
[10:15:35] <celphi> ive learned a lot about how controllers work with routes (at least a basic idea)
[10:19:06] <Rockwood> foreach is awesome
[10:22:25] *** Quits: ferdna (~ferdna@user/ferdna) (Remote host closed the connection)
[10:25:34] *** Joins: Blondie101010 (~Blondie10@user/blondie101010)
[10:26:46] *** Quits: TanoMarcelo (~TanoMarce@179.63.242.126) (Quit: WeeChat 3.1)
[10:27:30] *** Joins: TanoMarcelo (~TanoMarce@179.63.242.126)
[10:30:33] *** Joins: jgrim2 (~jgrim@d60-65-211-197.col.wideopenwest.com)
[10:33:08] *** Quits: yuckey2d (~yuckey2d@66.115.145.202) (Quit: The Lounge - https://thelounge.chat)
[10:39:32] *** Joins: stenno (~stenno@user/stenno)
[10:45:16] *** Joins: yuckey2d (~yuckey2d@66.115.145.202)
[10:48:42] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 240 seconds)
[10:55:58] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 258 seconds)
[11:06:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[11:08:28] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[11:14:04] *** Joins: DerekTheRed (~portra400@peso.subtitled.com)
[11:15:17] *** Joins: genomc (uid245282@id-245282.stonehaven.irccloud.com)
[11:40:14] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 256 seconds)
[12:05:13] *** Joins: ferdna (~ferdna@user/ferdna)
[12:08:00] *** Joins: stenno (~stenno@user/stenno)
[12:09:46] *** Quits: traptrip (trip@brigaid.xs4all.nl) (Ping timeout: 240 seconds)
[12:19:23] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[12:45:32] *** Quits: toretto (~0xe3b7@user/toretto) (Quit: Lost terminal)
[12:51:03] *** Joins: genom (~g@37.214.74.93)
[13:40:06] *** MelMalik is now known as AmyMalik
[13:54:35] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:54:57] *** Joins: entuland (~entuland@user/entuland)
[13:56:23] *** Quits: keypusher (keypusher@user/keypusher) (Remote host closed the connection)
[13:58:31] *** Joins: Rockwood_ (~Rocky@user/rocky)
[14:02:44] *** Quits: Rockwood (~Rocky@user/rocky) (Ping timeout: 268 seconds)
[14:04:15] *** Joins: keypusher (keypusher@user/keypusher)
[14:09:39] *** Joins: ___Rockwood__ (~Rocky@user/rocky)
[14:13:42] *** Quits: Rockwood_ (~Rocky@user/rocky) (Ping timeout: 276 seconds)
[14:26:41] *** Quits: ___Rockwood__ (~Rocky@user/rocky) (Quit: The Time is Over)
[14:27:02] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 265 seconds)
[14:30:21] *** Joins: WishBoy (~WishBoy@user/wishboy)
[14:30:22] *** Joins: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net)
[15:01:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 265 seconds)
[15:04:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:04:48] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[15:06:00] *** Joins: WishBoy (~WishBoy@user/wishboy)
[15:15:50] *** Quits: ss23 (~ss23@irc.ss23.geek.nz) (Ping timeout: 268 seconds)
[15:17:13] *** Quits: WishBoy (~WishBoy@user/wishboy) (Read error: Connection reset by peer)
[15:20:12] *** Quits: stenno (~stenno@user/stenno) (Ping timeout: 265 seconds)
[15:32:40] *** Joins: stenno (~stenno@user/stenno)
[15:38:06] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[15:43:50] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:52:55] *** Joins: Naktibalda (~Naktibald@88.135.22.17)
[16:59:07] *** Joins: cspray (~cspray@2600:6c5a:a7f:7c97::14c6)
[17:11:38] *** Joins: magla (~gelignite@55d4d566.access.ecotel.net)
[17:11:39] *** Joins: gefd (~Geoff@user/gefd)
[17:37:15] *** Quits: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle) (Quit: BlackIkeEagle)
[17:39:53] *** Joins: BlackIkeEagle (~BlackIkeE@archlinux/trusteduser/blackikeeagle)
[17:45:10] *** Quits: gefd (~Geoff@user/gefd) (Ping timeout: 256 seconds)
[17:51:01] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:07:30] *** Joins: lall- (~alek@2403:6200:88a2:eebc:f21e:df34:9f63:bf85)
[18:49:27] *** Quits: cspray (~cspray@2600:6c5a:a7f:7c97::14c6) (Quit: Leaving)
[18:53:44] *** Quits: yCrazyEdd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 256 seconds)
[19:10:27] *** Quits: Naktibalda (~Naktibald@88.135.22.17) (Ping timeout: 268 seconds)
[19:16:35] *** Joins: lunatunes (uid251484@user/lunatunes)
[19:34:30] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[19:37:21] *** Joins: Rockwood (~Rocky@user/rocky)
[19:39:30] *** Quits: dlundgren (~dlundgren@75-9-109-251.lightspeed.milwwi.sbcglobal.net) (Quit: dlundgren)
[19:52:25] *** Joins: labella (~labella@88.236.168.160)
[19:53:30] *** Quits: labella (~labella@88.236.168.160) (Client Quit)
[19:56:47] *** Joins: labella (~labella@88.236.168.160)
[20:05:04] *** Quits: labella (~labella@88.236.168.160) (Quit: Client closed)
[20:12:38] *** Joins: ferdna (~ferdna@user/ferdna)
[20:14:17] *** Quits: ferdna (~ferdna@user/ferdna) (Excess Flood)
[20:14:54] *** Joins: ferdna (~ferdna@user/ferdna)
[20:16:49] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Remote host closed the connection)
[20:19:17] *** Joins: jetchisel (jetchisel@user/jetchisel)
[20:36:17] *** Quits: Ducki (~ducki@user/ducki) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:47:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[20:47:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:19:33] *** Quits: \mSg (~mSg@user/msg/x-0285936) ()
[21:28:44] *** Quits: yuckey2d (~yuckey2d@66.115.145.202) (Quit: The Lounge - https://thelounge.chat)
[21:34:46] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[21:35:00] *** Joins: Ducki (~ducki@user/ducki)
[21:50:22] *** Joins: entuland (~entuland@user/entuland)
[21:51:36] *** Joins: \mSg (~mSg@user/msg/x-0285936)
[21:52:01] *** Joins: yCrazyEdd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[21:59:43] *** Joins: paule32 (~paule32@user/paule32)
[21:59:46] <paule32> hello
[21:59:59] <paule32> i have a problem with my php:  https://3v4l.org/8LOH6#v7.3.29
[22:00:53] <entuland> what's the problem? the error is quite clear
[22:01:01] <lall-> you what
[22:01:10] <TinoDidriksen> Well obviously you get an error if you remove the !
[22:01:30] <lall-> you ain't calling a function, you're redefining it
[22:01:53] <__adrian> don't redefine functions. DO NOT define functions conditionally*.
[22:01:57] <paule32> Fatal error: Cannot redeclare kallup\webapp\v000001\checker_code() (previously declared
[22:02:03] <paule32> this is my message
[22:02:06] <TinoDidriksen> Don't define functions twice.
[22:02:18] <__adrian> * obvious exception being a polyfill
[22:02:22] <lall-> https://3v4l.org/kVOtU#v7.3.29
[22:02:25] <__adrian> but yeah, don't define functions twice.
[22:02:29] <entuland> paule32, do you know what the exclamation point does?
[22:02:40] <lall-> imagine, checking if function exists, and if it does, then redefine it again
[22:02:42] <paule32> negation
[22:02:45] <paule32> == false
[22:02:46] <paule32> ?
[22:03:03] <__adrian> paule32: *why* do you have two different files requiring a function definition?
[22:03:08] <entuland> okay, so you see how removing it becomes "if the function exists, try and redefine it"?
[22:03:10] <lall-> does my head hurt hitting this wall? hit it again.
[22:03:48] <paule32> __adrian: i use "include()" for checks before i load the script that i want
[22:03:56] <__adrian> *why* ?
[22:04:07] <__adrian> don't include the file twice. only include it once.
[22:04:11] <paule32> i check for direct call
[22:04:25] <TinoDidriksen> Use require_once instead of include.
[22:04:30] <paule32> also direct call of the script's
[22:04:32] <entuland> just a minor nitpick, cause I sense there may be something there - "negation" doesn't mean "==false" there - it means "if it is true, make it false, if it is false, make it true"
[22:04:33] <lall-> or just don't do stupid shit.
[22:04:34] <__adrian> use require, sure
[22:04:55] <__adrian> but the better solution than  require_once  is to organize things so you don't _try_ to require it twice
[22:05:19] <TinoDidriksen> It also helps to read ! as not. Then the code is basically English. "if not function_exists ... create the function"
[22:05:27] <entuland> ^ that
[22:05:31] <__adrian> require function definitions in your bootstrap/startup script
[22:05:32] <Blondie101010> his logic seems to depend on redefining functions
[22:05:48] <paule32> but i was thinking function_exists look of the excistense
[22:05:53] <lall-> how is that even logic ?
[22:05:55] <__adrian> ^ the fact that the two definitions are _different_ is also concerning.
[22:06:00] <TinoDidriksen> function_exists does check existence.
[22:06:18] <__adrian> function_exists()  // does this function exist?
[22:06:19] <paule32> and why does it not his job
[22:06:22] <__adrian> ! function_exists()  // does this function NOT exist?
[22:06:24] <Byteflux> good catch, the definitions are different so it seems intended
[22:06:36] <TinoDidriksen> It does the job you asked it to do.
[22:06:45] <lall-> no,for some reason i can't open the link again, he had definition of a function, then if function exists.. he defined it again
[22:06:52] <__adrian> paule32: you're thinking about it backwards. the ! is not broken and neither isfunction_exists().
[22:06:52] <Byteflux> paule32: you can't have two functions both named 'check_foo'
[22:07:03] <lall-> instead of just calling it
[22:07:15] <__adrian> paule32: why are your two function defintions *different* ?
[22:07:29] <paule32> Byteflux: thats clear
[22:07:47] <lall-> and he never clarified why he did that
[22:07:47] <Byteflux> paule32: the problem stems from you trying to include the same file twice, i'm guessing
[22:07:53] <__adrian> ^
[22:08:03] <paule32> but using "includ" multiple times, function_exists should be handle the issu.. ?
[22:08:21] <Byteflux> paule32: you need to restructure your code so that the file that contains `function check_foo() ...` is only included once and never twice
[22:08:25] <__adrian> paule32: it does, if you use it correctly. if you use it with !.
[22:08:27] <__adrian> BUT
[22:08:38] <__adrian> you shouldn't include this script more than once.
[22:08:41] <Byteflux> don't use bandaids
[22:08:44] <__adrian> then you don't have a problem in the first place.
[22:08:44] <Byteflux> just do it properly
[22:09:15] <Blondie101010> how about a course on proper DI?
[22:09:26] <__adrian> :)  maybe
[22:09:26] <Blondie101010> because that's really where this starts
[22:09:37] <__adrian> but there are other questions to answer first
[22:09:46] <__adrian> paule32: why are your two function defintions *different* ?
[22:09:57] <lall-> yeah, let's just throw a boy into the boiling bother why don't you
[22:10:31] <paule32> that is a clear for me, but when you "include" a file, if you not miss some, then function_exists == true should be skip, if function_exists !== false
[22:11:00] <Byteflux> im guessing the definitions are different because it's a crafted example to demonstrate their issue
[22:11:02] <__adrian> paule32: that DOES happen. that's why, when you use ! (as in your 3v4l) you don't get an error.
[22:11:10] <Byteflux> not necessarily that it's a different function
[22:11:36] <__adrian> but if you do not use ! then you _do_ get an error, because you're doing the opposite of what you say you want to do.
[22:11:50] <__adrian> Byteflux: possible. but I want to hear it, to be sure
[22:11:55] <paule32> __adrian: i don't know how to fiddle more than one files with one ecample
[22:12:07] <Byteflux> yeah i mean i've guessed wrong on many other seemingly obvious things :P
[22:12:31] <__adrian> Byteflux: there's also the issue that _our_ understanding something is useless if the person asking doesn't
[22:12:47] <__adrian> paule32: yes, i assumed. that's not a problem
[22:13:08] <lall-> but there's the eagerness factor. so we'll respond anyway.
[22:13:18] <__adrian> paule32: your problem is this:  "i have 2 files. each of them include this script here"
[22:13:26] <__adrian>                        stop doing this  ^
[22:13:50] <__adrian> include the script with the function definition _only once_.
[22:13:54] <Byteflux> yes, using if (!function_exists(...)) will fix the issue but it's not a proper fix. it's only a bandaid fix
[22:14:43] <Byteflux> there's probably only 1 situation where that kind of thing is appropriate and it's polyfilling which is something else not related to this.
[22:16:32] <lall-> something else not relted. is instanceof uncalled for in similar ways to if function_exists?
[22:16:40] <paule32> that is so: i look in the include array if the script is directly called, so when the script is on top = [0], it is directly called, but i have to use code multiple twice then, and that the problem
[22:17:06] <__adrian> ...
[22:17:08] <paule32> because include increment the include array
[22:17:33] <Byteflux> you don't *have* to include a file twice. if you do, the code is bad
[22:17:40] <__adrian> paule32, _stop doing that_. this IS your problem. start your application with a "startup" script that does all the getting-ready work like including function definitions.
[22:17:44] <__adrian> DO NOT DO IT TWICE.
[22:17:48] <__adrian> that's your only problem here.
[22:18:01] <__adrian> make your program _organized_.
[22:18:37] <Byteflux> lall-: no, instanceof is fine but like anything it can indicate bad decisions depending on how its used
[22:18:43] <__adrian> if you keep structuring your program this way, you will always have this problem.
[22:18:50] <__adrian> just _don't do it_.
[22:19:06] <lall-> that sounds super similar to function_exists.
[22:19:13] <__adrian> lall-: it's not
[22:19:18] <__adrian> class_exists() is  ;)
[22:19:35] <__adrian> instanceof is for looking at an object and deciding what type it is.
[22:20:35] *** Joins: yuckey2d (~yuckey2d@66.115.145.202)
[22:20:36] <__adrian> "paule32> because include increment the include array"  to be clear, stop doing this also. there should be _absolutely no need_ to do anything remotely like this.
[22:21:11] <paule32> is it not so, that require_once load scripts only one times ?
[22:21:19] <__adrian> it is
[22:21:21] <paule32> that then the problem:  https://dpaste.com/7W7N6CQFZ
[22:21:37] <__adrian> but again, that's also not the ideal solution. just organize things.
[22:22:09] <__adrian> "paule32> that then the problem:"  i don't know what you're trying to point out here
[22:23:03] <paule32> dont allow the execution of scripts, when they call directly from the browser url
[22:23:17] <__adrian> DON'T PUT YOUR PHP FILES IN YOUR DOCUMENT ROOT.
[22:23:29] <__adrian> see? no problem.
[22:23:45] <paule32> hmm
[22:23:54] <__adrian> if you don't do the bad ideas, you don't need _more_ bad ideas to "fix" them
[22:23:54] <TinoDidriksen> If there are no files they can directly open, the problem goes away.
[22:23:59] <lall-> he sees the problem
[22:24:13] <Blondie101010> also, if your code was structured, the include files would basically do NOTHING
[22:24:25] <__adrian> "direct access security checks" are 100% a RED FLAG that you're doing it COMPLETELY WRONG.
[22:24:48] <__adrian> whatever tutorial you followed that told you to do that, stop looking at it. throw it in the trash.
[22:25:26] <__adrian> it's idiocy left over from 2007
[22:26:18] * da_wunder and I'm just lucky because I understand to ignore that person totally - he/she didn't accept any advices then - and seems like the same goes on...
[22:26:40] <paule32> no
[22:26:44] <paule32> also yes
[22:26:53] <paule32> i would like use your hints
[22:27:14] <paule32> but i cant follow so quick in many conversations
[22:27:16] <__adrian> paule32: almost all of that file shouldn't exist.
[22:27:18] <__adrian> maybe all of it
[22:27:22] <paule32> i am left about years
[22:27:42] <__adrian> paule32: that's ok. it's text. read it as slow as you need to; it's not going anywhere
[22:28:17] <paule32> not that you become a wrong image of me
[22:28:29] <paule32> i have some disadvantages
[22:29:18] <__adrian> don't worry about that either. but we _do_ like it when people that ask for advice, read and try to understand that advice. being "fast" and keeping up doesn't matter otherwise.
[22:29:41] <__adrian> read and understand first. it's _OK_ if it takes a while.
[22:29:58] <paule32> ok i am in the background
[22:30:54] *** Joins: WishBoy (~WishBoy@user/wishboy)
[23:05:30] *** Quits: simius (~simius@user/simius) (Quit: Bai!)
[23:06:46] *** Joins: simius (~simius@user/simius)
[23:09:29] *** Quits: ferdna (~ferdna@user/ferdna) (Ping timeout: 255 seconds)
[23:09:30] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:12:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[23:21:49] *** Quits: paule32 (~paule32@user/paule32) (Quit: Leaving)
[23:30:13] *** Quits: guidoc (~guido@host-95-235-253-53.retail.telecomitalia.it) (Quit: WeeChat 3.2)
