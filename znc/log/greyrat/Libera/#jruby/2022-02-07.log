[03:08:49] <headius> Yeah we will have to conditionally use the new alternatives to finalizers on 9 and higher at some point. 9.4 is probably the last release that will support Java 8 through 10 so if we get the change into 9.4 we'll be ready to drop all finalizers in the following release
[03:09:18] <headius> I can have a look at the PR tomorrow and we'll get it finalized (ha ha) and landed
[03:26:32] <byteit101[m]> Cool!
[18:51:38] <headius> Good morning!
[18:51:58] <MateuszFryc[m]> 4PM here ;)
[18:52:09] <headius> Good afternoon!
[18:52:16] <MateuszFryc[m]> :)
[19:01:28] <headius> byteit101: I'm stumbling a bit with the nested hash in the bind_variable option too
[19:01:43] <headius> thinking maybe it should just be another keyword, but I will put this in a comment
[19:03:45] <enebo[m]> headius: byteit101 yeah I also have an issue with the nested hash
[19:07:23] <headius> https://github.com/jruby/jruby/pull/7012#issuecomment-1031603416
[19:08:57] <headius> the next logical question for me is "what if you do `convert:` but not `instance_variable:`?" perhaps we bind the field without conversion logic, but do not set up the instance variable?
[19:09:34] <headius> `instance_variable: @foo` also looks good to me for choosing a name
[19:10:14] <headius> er `instance_variable: :@foo` or `instance_variable => :@foo`
[19:10:59] <enebo[m]> Also do we really need the @?
[19:11:18] <enebo[m]> Or can we have hidden ivars?
[19:11:29] <headius> Perhaps not? We are already saying "instance_variable" which implies "@"
[19:11:43] <headius> we can have hidden variables but it is meaningless from Ruby code since you can't access them
[19:11:56] <enebo[m]> In my brain seeing the @foo makes me wonder if I can :@@foo or :$foo
[19:12:16] <headius> `instance_variable_get` requires the @ so there's precedence
[19:12:32] <enebo[m]> ah yeah that's true
[19:12:44] <enebo[m]> but then can we get hidden ones without it?
[19:12:53] <headius> no it errors
[19:13:02] <headius> has to be a valid complete ivar name
[19:13:13] <enebo[m]> ah well I find that weird but that is a precedent so I think following convention makes sense
[19:13:32] <headius> yeah it seems unnecessary in `instance_variable_get` too, but that train has sailed
[19:13:45] <enebo[m]> It just looks like it introduced some question about how else I can specify an ivar
[19:13:57] <enebo[m]> to the point I am wondering it right now :)
[19:14:23] <headius> the @ is part of the name, not just a sigil like in perl
[19:14:33] <enebo[m]> So I remove that suggestion
[19:14:36] <headius> I guess it is both but it is what we put in the table as a key
[19:15:38] <enebo[m]> yeah I think that goes into a philosphical debate but perhaps they tried to decide that by making instance_variable_get require it
[19:16:14] <enebo[m]> Like, man, what is a name anyways?  Does anyone really have a name?
[19:17:23] <enebo[m]> Having one keyword only be valid if in the presence of another keyword I think is also fine.  We can just raise if you do it wrong.  I suspect remembering 2-3 keywords args is simpler than remembering you need to embed a hash of keywords
[19:19:25] <headius> Names are like, just names man
[19:19:57] <headius> yeah if there is a valid case for only `convert` and not `instance_variable`, ok. If there's not, ok.
[19:20:15] <headius> it reads better than nested
[19:20:26] <enebo[m]> yep.  agreed
[19:20:49] <enebo[m]> well I am getting closer to Marshal getting finished
[19:21:02] <headius> how much have you rewritten?
[19:21:06] <enebo[m]> There is a whole struct field missing which I think will detect recursion
[19:21:30] <enebo[m]> A lot but not all of it
[19:21:30] <headius> I am going to look over bug reports and then move on to strscan gem since that is needed by at least one net-* (not http)
[19:21:35] <enebo[m]> And what was rewritten was not massively different 
[19:21:44] <headius> yeah good
[19:21:52] <enebo[m]> but it lines up more with MRI
[19:21:57] <headius> every time I have had to fix stuff in there I have tried to make it match CRuby marshal a bit closer
[19:22:29] <enebo[m]> I left main old method behind because I cannot tell if it is used by extensions
[19:22:29] <headius> automatic serialization really is just a mess in every language
[19:22:30] <enebo[m]> That is also a philosophical question
[19:22:45] <headius> probably good to leave it and deprecate for one major
[19:23:04] <enebo[m]> It is just interesting to realize the old method will still call into the new stuff
[19:23:13] <enebo[m]> without duplicating everything
[19:23:27] <enebo[m]> but they are close so it probably will work largely
[19:24:28] <headius> I tweeted to this @hiroysato on Twitter... he seems to be having issues (or is just annoyed by) trying to get latest JRuby and Embulk working together but I can't quite follow his tweets (jp translation)
[19:24:29] <enebo[m]> The new code handles I think some ordering issues (not solved yet) and recursion issue (not solved yet) but will just pick up stuff like ruby2_keywords toggles.  Some prepend/extend differences,  I add TYPE_DATA as a type we never had
[19:25:09] <headius> https://twitter.com/hiroysato
[19:25:19] <enebo[m]> Which I am not sure we will actually ever Marshal#dump but we will load it properly (e.g. get it from MRI)
[19:25:49] <enebo[m]> Actually I may be wrnog about that but I am not sure how we mark something as being TYPE_DATA
[19:26:19] <headius> I'm not sure it will matter soon, I think the DATA type has been deprecated or removed
[19:26:35] <headius> I saw something about that, not sure
[19:26:38] <enebo[m]> TYPE_DATA is not T_DATA
[19:26:45] <headius> oh not T_DATA
[19:26:46] <enebo[m]> Or at least I am not sure if it is really
[19:26:53] <headius> ü§∑‚Äç‚ôÇÔ∏è
[19:27:06] <enebo[m]> It may be related to it but the example used is dump Dir instances
[19:27:28] <enebo[m]> but extending it and adding _data_dump/_data_load
[19:27:43] <enebo[m]> So it is a mystery until I look into load
[19:27:44] <enebo[m]> err dump
[19:28:23] <enebo[m]> We had 14 F/E on ruby/spec with existing code so I think this is worth the time
[19:28:31] <headius> yeah
[19:28:41] <enebo[m]> Adding freeze: true just was not simple
[19:28:58] <headius> https://github.com/embulk/embulk/blame/v0.10.35/embulk-ruby/lib/embulk/buffer.rb#L6
[19:28:58] <enebo[m]> Also I can see we call proc more than we are supposed to
[19:29:00] <headius> yikes
[19:29:18] <headius> no wonder he's having issues upgrading JRuby
[19:29:27] <enebo[m]> So the number of things we fail always makes me wonder how much people exchange data between impls
[19:29:38] <headius> # TODO simplify
[19:29:42] <headius> hah markdown
[19:30:02] <headius> yeah we used to get a lot of bugs about marshal because it was used for Rails session and other stuff
[19:30:05] *** Quits: marcheiligers[m] (~marcheili@2001:470:69fc:105::1:5286) (Quit: You have been kicked for being idle)
[19:30:12] <headius> but I dunno how much people use it anymore
[19:30:13] <enebo[m]> hahaha yikes is right
[19:30:35] <enebo[m]> I blame us not having good docs for this
[19:31:24] <enebo[m]> This looks like it is supposed to be ascii8bit right?
[19:31:39] <enebo[m]> I am surprised at a minimum that is not an issue
[19:31:56] <headius> I think it would be yes
[19:32:05] <headius> default encoding for ByteList is ASCII-8BIT
[19:32:33] <enebo[m]> oh I thought US-ASCII.  ok then that is probably ok
[19:32:40] <headius> to be fair we don't have much plumbing for working with ByteBuffer which I assume is java_buffer here
[19:33:01] <headius> there's no ByteBuffer.to_s other than the inspect output
[19:33:12] <headius> could be added
[19:33:28] <enebo[m]> but if you are going to rip out a bytelist you may as well also reference on a better method internally
[19:33:46] <enebo[m]> Although in this case perhaps he is making best guess on replace always existing
[19:34:08] <enebo[m]> His gem will stop working in Ruby 3 no doubt
[19:34:26] <enebo[m]> Since all string operations internally will return String and no longer the subclass
[21:03:19] <headius> I did a pass over issues from the last couple weeks and pushed a couple PRs
[21:03:25] <headius> things seem to be moving along ok
[21:03:31] <headius> going to pivot to strscan this afternoon
[21:07:11] <headius> this one is surprisingly green so far but might be deferred until 9.4 since it changes how we calculate thread status (use native status unless it is a "runnable" status, and in that case use our internal status)
[21:07:13] <headius> https://github.com/jruby/jruby/pull/7075
[22:41:55] <headius> 3F10E on strscan tests and 2F2E on specs
[22:42:09] <headius> many of these seem to be the new allowance for either regexp or string
[22:45:25] <headius> enebo: I was thinking of doing a first pass to do mostly cleanup on this code, like adding ThreadContext and catching up with style changes we've made over time
[22:45:39] <headius> if this is going out into the world as an external library I think it should at least follow the patterns we prefer for extensions
[22:45:48] <headius> this is OLD code
[22:48:16] <headius> that said I'm not sure what pattern we prefer for existing methods that do not pass context
[22:48:18] <headius> https://gist.github.com/headius/0cffb9caa668f86b9c12601dbdf0bbde
[22:48:29] <headius> this maintains compatibility but going forward you need to pass TC
[22:48:45] <headius> which may be fine for methods bound to Ruby, since I think we are in agreement we would rather those not be considered public API
[22:51:09] <headius> for methods that actually need TC it is clearly best to pass it, but for methods that just need runtime I am unsure
[22:51:28] <enebo[m]> I think we should potentially always just pass it
[22:52:09] <enebo[m]> It maybe is too dogmatic but the second a new Ruby comes out which says "call to_foo" or something like that then we will wish we used it
[22:52:17] <headius> yeah that's true
[22:52:51] <enebo[m]> The other one which is likely is if we want to raise an error but of course we don't care too much for non-static method impls there
[22:53:08] <headius> errors should only need runtime usually
[22:53:11] <enebo[m]> but for static with no args we will have no access to runtime
[22:53:26] <headius> it's mostly for ruby calls that we really want to have it
[22:53:26] <enebo[m]> I guess self
[22:53:39] <headius> or for anything thread-local of course
[22:53:40] <enebo[m]> still...I think it is more future proof
[22:53:46] <headius> like locking, thread state
[22:53:50] <headius> yeah it is
[22:54:36] <enebo[m]> I wish we had a single holistic view of all bound methods where we had all the same guarantees
[22:54:40] <headius> any thoughts on the third signature here unscan(Ruby)? I mainly added that so that the deprecated version would not have to acquire TC, but this is a newish pattern
[22:54:43] <enebo[m]> like TC and Block
[22:54:57] <headius> usually we just make the deprecated old signature acquire TC
[22:55:02] <enebo[m]> yeah
[22:55:23] <enebo[m]> I don't like Runtime over TC personally
[22:55:32] <headius> it won't matter from a user perspective since nobody should be calling these manually so maybe I am trying too hard
[22:56:00] <enebo[m]> Just because both can get each other but one is much cheaper and I like the view of the world that our methods care about the system from the thread they run on
[22:56:09] <headius> true
[22:57:27] <enebo[m]> I don't think we have made this mistake in a long time but there has been a few cases where someone thought they could just save off TC and it was just not really getting how all this fits together.  Passing it in all the time means just realizing you can use it because it is always there
[22:57:48] <headius> yeah
[22:57:51] <headius> ok I will just add the TC signature
[22:58:18] <headius> FWIW most of these String/Regexp errors are all the same change, since most methods just backend on scan()
[22:58:43] <headius> I will get all specs and tests green and then finish up the PR for that gem
[22:59:45] <headius> hopefully this will go quickly
[23:00:35] <headius> yeah I assumed it was largely deprecated but I think net-imap or one of the other non-http net libraries uses it
[23:01:00] <headius> and we have never really done much work to optimize this
[23:01:09] <headius> if I see anything obvious I will do it
[23:01:57] <headius> yeah
[23:03:02] <headius> tmp = rb_str_new2("$Id$");
[23:03:09] <headius> this thing is not well-maintained even in CRuby
[23:03:39] <headius> $ rvm ruby-3.1 do ruby -rstrscan -e 'p StringScanner::Id'
[23:03:39] <headius> "$Id$"
[23:03:45] <headius> üôÑ
[23:04:13] <headius> ours is "$Id: strscan.c 13506 2007-09-24 08:56:24Z nobu $"
[23:04:44] <headius> guess that tells you how old this code is in JRUby
[23:05:48] <headius> yeah really not useful to have this anymore
[23:06:11] <headius> has not been processed by svn or cvs in a long time
[23:07:52] *** Quits: nilsding (~nilsding@user/nilsding) (*.net *.split)
[23:07:52] *** Quits: ssaschaa[m] (~ssaschaam@2001:470:69fc:105::1:605e) (*.net *.split)
[23:07:52] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (*.net *.split)
[23:07:52] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (*.net *.split)
[23:12:24] *** Joins: nilsding (~nilsding@user/nilsding)
[23:12:24] *** Joins: enebo[m] (~enebo@2001:470:69fc:105::e6)
[23:12:24] *** Joins: ssaschaa[m] (~ssaschaam@2001:470:69fc:105::1:605e)
[23:12:24] *** Joins: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2)
[23:16:12] *** Quits: daveg_lookout[m] (~daveglook@2001:470:69fc:105::1:8374) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: byteit101[m] (~byteit101@2001:470:69fc:105::30ec) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: katafrakt[m] (~katafrakt@2001:470:69fc:105::1:41ff) (Ping timeout: 245 seconds)
[23:16:12] *** Quits: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba) (Ping timeout: 245 seconds)
[23:16:13] *** Quits: MateuszFryc[m] (~lirimaery@2001:470:69fc:105::1:3640) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78) (Ping timeout: 250 seconds)
[23:16:13] *** Quits: kroth_lookout[m] (~krothmatr@2001:470:69fc:105::1:8372) (Ping timeout: 250 seconds)
[23:16:14] *** Quits: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904) (Ping timeout: 240 seconds)
[23:16:14] *** Quits: kovyrin[m] (~kovyrinma@2001:470:69fc:105::1:6d6c) (Ping timeout: 240 seconds)
[23:16:26] *** Quits: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c) (Ping timeout: 250 seconds)
[23:16:32] *** Quits: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: MattWelke[m] (~mattwelke@2001:470:69fc:105::1:34bb) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: basshelal[m] (~basshelal@2001:470:69fc:105::30e7) (Ping timeout: 240 seconds)
[23:16:32] *** Quits: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e) (Ping timeout: 240 seconds)
[23:16:36] *** Quits: headius (~headius@2001:470:69fc:105::3027) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: Albertico[m] (~albertico@2001:470:69fc:105::1:3a89) (Ping timeout: 256 seconds)
[23:16:38] *** Quits: kares[m] (~karesmatr@2001:470:69fc:105::30d1) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: lopex[m] (~lopexm]@2001:470:69fc:105::3158) (Ping timeout: 252 seconds)
[23:16:38] *** Quits: rdubya[m] (~rdubyamat@2001:470:69fc:105::1:7649) (Ping timeout: 252 seconds)
[23:17:03] *** Quits: jtarvydas[m] (~jtarvydas@2001:470:69fc:105::1:8387) (Ping timeout: 268 seconds)
[23:19:02] *** Quits: nilsding (~nilsding@user/nilsding) (Ping timeout: 260 seconds)
[23:19:02] *** Quits: ssaschaa[m] (~ssaschaam@2001:470:69fc:105::1:605e) (Ping timeout: 260 seconds)
[23:19:02] *** Quits: enebo[m] (~enebo@2001:470:69fc:105::e6) (Ping timeout: 260 seconds)
[23:19:02] *** Quits: ahorek[m] (~ahorekmat@2001:470:69fc:105::30e2) (Ping timeout: 260 seconds)
[23:47:29] *** Joins: bensheldon[m] (~bensheldo@2001:470:69fc:105::1:634e)
[23:47:30] *** Joins: MattWelke[m] (~mattwelke@2001:470:69fc:105::1:34bb)
[23:47:30] *** Joins: basshelal[m] (~basshelal@2001:470:69fc:105::30e7)
[23:47:30] *** Joins: oblutak[m] (~oblutakma@2001:470:69fc:105::1:7039)
[23:47:36] *** Joins: jtarvydas[m] (~jtarvydas@2001:470:69fc:105::1:8387)
[23:47:42] *** Joins: AndyMaleh[m] (~andymaleh@2001:470:69fc:105::1:1a78)
[23:47:42] *** Joins: MateuszFryc[m] (~lirimaery@2001:470:69fc:105::1:3640)
[23:47:42] *** Joins: kroth_lookout[m] (~krothmatr@2001:470:69fc:105::1:8372)
[23:47:43] *** Joins: puritylake[m] (~puritylak@2001:470:69fc:105::1:1904)
[23:47:58] *** Joins: klobuczek[m] (~klobuczek@2001:470:69fc:105::1:24c)
[23:47:59] *** Joins: katafrakt[m] (~katafrakt@2001:470:69fc:105::1:41ff)
[23:48:00] *** Joins: byteit101[m] (~byteit101@2001:470:69fc:105::30ec)
[23:48:00] *** Joins: rebelwarrior[m] (~rebelwarr@2001:470:69fc:105::beba)
[23:48:00] *** Joins: rdubya[m] (~rdubyamat@2001:470:69fc:105::1:7649)
[23:48:00] *** Joins: kares[m] (~karesmatr@2001:470:69fc:105::30d1)
[23:48:00] *** Joins: mattpatt[m] (~mattpattm@2001:470:69fc:105::315d)
[23:48:07] *** Joins: Albertico[m] (~albertico@2001:470:69fc:105::1:3a89)
[23:48:09] *** Joins: headius (~headius@2001:470:69fc:105::3027)
[23:48:59] *** Joins: kovyrin[m] (~kovyrinma@2001:470:69fc:105::1:6d6c)
[23:49:05] *** Joins: daveg_lookout[m] (~daveglook@2001:470:69fc:105::1:8374)
[23:49:08] *** Joins: lopex[m] (~lopexm]@2001:470:69fc:105::3158)
