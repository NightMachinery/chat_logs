[00:00:09] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[00:04:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 268 seconds)
[00:07:23] *** Joins: proller (~p@2a02:6b8:0:51e:5756:4fff:e4d8:65d4)
[00:09:46] *** Quits: Guest902 (~Guest90@2620:149:e0:5002::26) (Quit: Ping timeout (120 seconds))
[00:13:32] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[00:19:01] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[00:26:28] * GumbyPAN CPAN Upload: Amazon-Credentials-1.0.10-5 by BIGFOOT https://metacpan.org/release/BIGFOOT/Amazon-Credentials-1.0.10-5
[00:30:19] *** Joins: Guest9080 (~Guest90@2620:149:e0:5002::26)
[00:30:34] *** Quits: Guest9080 (~Guest90@2620:149:e0:5002::26) (Client Quit)
[00:32:35] <gordonfish> vms14: Yes Mojo::DOM is great
[00:38:17] *** Quits: sbrothy (~sbrothy@192038130164.mbb.telenor.dk) (Ping timeout: 240 seconds)
[00:40:54] *** Quits: proller (~p@2a02:6b8:0:51e:5756:4fff:e4d8:65d4) (Ping timeout: 268 seconds)
[00:44:45] *** Quits: ratagin (~ratagin@208.96.144.68) (Quit: Leaving)
[00:48:30] *** Joins: magla (~gelignite@55d47454.access.ecotel.net)
[00:53:28] *** Quits: gizmomathboy (~gizmomath@206.127.53.107) (Quit: Leaving)
[00:53:43] *** Joins: proller (~p@2a02:6b8:0:51e:2149:39ce:e94e:18d4)
[01:00:50] *** Quits: proller (~p@2a02:6b8:0:51e:2149:39ce:e94e:18d4) (Ping timeout: 252 seconds)
[01:06:26] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[01:08:39] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[01:11:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 245 seconds)
[01:16:24] *** Quits: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot) (Quit: Paperbot)
[01:16:27] *** Quits: Repaster (~Repaster@perlbot/bot/grinnz/repaster) (Quit: Repaster)
[01:21:34] * GumbyPAN CPAN Upload: REST-Client-281 by AKHUETTEL https://metacpan.org/release/AKHUETTEL/REST-Client-281
[01:23:23] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Ping timeout: 256 seconds)
[01:25:08] *** Quits: iTomJ (~iTomJ@cpe-74-76-40-184.nycap.res.rr.com) (Quit: Leaving)
[01:26:05] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:27:50] *** Quits: vms14 (~user@149.red-79-153-96.dynamicip.rima-tde.net) (Remote host closed the connection)
[01:29:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[01:31:09] *** Joins: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com)
[01:34:43] *** Quits: magla (~gelignite@55d47454.access.ecotel.net) (Quit: Stay safe!)
[01:36:46] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:dc30:517f:71c5:bb40)
[01:37:33] *** Quits: deadmarshal (~deadmarsh@95.38.228.121) (Ping timeout: 256 seconds)
[01:37:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 240 seconds)
[01:46:36] * GumbyPAN CPAN Upload: Excel-ValueReader-XLSX-1.05 by DAMI https://metacpan.org/release/DAMI/Excel-ValueReader-XLSX-1.05
[01:54:26] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[02:01:27] *** Joins: Repaster (~Repaster@2600:2b00:7330:9a01:1e6f:65ff:fec9:ce9f)
[02:01:27] *** Quits: Repaster (~Repaster@2600:2b00:7330:9a01:1e6f:65ff:fec9:ce9f) (Changing host)
[02:01:27] *** Joins: Repaster (~Repaster@perlbot/bot/grinnz/repaster)
[02:01:30] *** Joins: Paperbot (~Paperbot@2600:2b00:7330:9a01:1e6f:65ff:fec9:ce9f)
[02:01:30] *** Quits: Paperbot (~Paperbot@2600:2b00:7330:9a01:1e6f:65ff:fec9:ce9f) (Changing host)
[02:01:30] *** Joins: Paperbot (~Paperbot@perlbot/bot/grinnz/paperbot)
[02:06:16] <gordonfish> BinGOs: Nice
[02:06:38] * GumbyPAN CPAN Upload: libwww-perl-6.60 by OALDERS https://metacpan.org/release/OALDERS/libwww-perl-6.60
[02:16:16] *** Quits: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de) (Quit: Leaving.)
[02:20:37] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:21:53] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:27:21] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi) (Read error: Connection reset by peer)
[02:28:02] *** Joins: whynot (~whynot@88.155.84.217)
[02:33:01] *** Quits: pizdets_ (~pizdets@183.182.111.251) (Ping timeout: 250 seconds)
[02:33:29] *** Joins: proller (~p@80.240.216.69)
[02:33:43] *** Joins: pizdets (~pizdets@183.182.110.61)
[02:35:19] *** Joins: rgrinberg (~textual@187.223.209.106)
[02:37:24] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[02:38:03] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Client Quit)
[02:39:56] *** Joins: sbrothy (~sbrothy@23.102.41.137)
[02:40:05] *** Quits: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net) (Ping timeout: 250 seconds)
[02:41:03] *** Joins: mmlj4 (~mmlj4@ip174-69-109-162.no.no.cox.net)
[02:48:44] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[02:49:06] *** Joins: tejr (~tejr@user/tejr)
[02:54:39] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[02:54:55] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[02:56:43] * GumbyPAN CPAN Upload: POE-Component-ElasticSearch-Indexer-0.014 by BLHOTSKY https://metacpan.org/release/BLHOTSKY/POE-Component-ElasticSearch-Indexer-0.014
[02:57:30] *** Joins: wilk_ (~wilk@afpn216.neoplus.adsl.tpnet.pl)
[02:57:30] *** Quits: wilk_ (~wilk@afpn216.neoplus.adsl.tpnet.pl) (Changing host)
[02:57:30] *** Joins: wilk_ (~wilk@user/wilk)
[02:59:02] *** Quits: wilk (~wilk@user/wilk) (Ping timeout: 268 seconds)
[02:59:06] *** wilk_ is now known as wilk
[02:59:26] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[03:03:27] *** Joins: pabogr (uid27497@id-27497.tinside.irccloud.com)
[03:06:17] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[03:06:40] *** Joins: proller (~p@2a02:6b8:b081:8806::1:31)
[03:07:46] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 260 seconds)
[03:10:03] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[03:29:50] <daemon> LeoNerd, hey there having a bit of a problem with one of your modules, https://metacpan.org/pod/Net::Async::WebSocket::JSON::Client - the server I am connecting to sends a 'ping' frame on the websocket layer every 3 minutes, it expects a pong back within a 15 minute period. It does not seem to be being responded to or noticed by Net::Async::WebSocket::JSON::Client though
[03:29:51] <Paperbot> Link title(s): [ Net::Async::WebSocket::JSON::Client - connect to a WebSocket server using JSON and IO::Async - me... ]
[03:30:02] <daemon> as the link gets timed out by the server as no response to ping
[03:30:22] <daemon> is there a flag or option somewhere to enable frame level ping/pong
[03:30:53] *** Quits: Peppard (~quassel@ip5886a62d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[03:31:18] <daemon> wonder if it would be on_ping_frame
[03:31:19] <daemon> hmm
[03:32:19] *** Joins: Peppard (~quassel@2001:470:1f0b:751:eca1:f61a:b509:ecd8)
[03:37:01] <daemon> yep it is :P
[03:44:38] <daemon> then again Can't locate object method "pong" via package "Net::Async::WebSocket::JSON::Client"
[03:44:41] <daemon> how the heck do you pong back
[03:45:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:46:38] <daemon> ah $self->send_pong_frame( $bytes, %params )->get
[03:46:49] <daemon> wonder whatbytes and params has to be
[03:48:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:55:39] *** Joins: marcus_ (~marcus@mojo/viking/marcus)
[04:05:56] <aquanight> grr
[04:06:10] <aquanight> LeoNerd: you're into making fun infix operators right? Perl needs a swap operator.
[04:06:31] <aquanight> wait
[04:06:36] <aquanight> ($x, $y) = ($y, $x)
[04:06:39] <aquanight> fuck I forgot about this
[04:10:52] *** Joins: deadmarshal (~deadmarsh@95.38.118.228)
[04:12:15] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[04:12:15] *** Quits: batman (~batman@50.31.137.146) (Remote host closed the connection)
[04:12:39] *** marcus_ is now known as marcus
[04:15:30] *** Quits: deadmarshal (~deadmarsh@95.38.118.228) (Ping timeout: 268 seconds)
[04:17:41] <daemon> does anyone know howto deal with a PING frame on a websocket connection, I need to send a pong back ... and I found the function for that: send_pong_frame(bytes,$params) ... but I am not really sure what bytes or params I should be specifying nothing seems to really mention it in any websocket related module
[04:32:36] <gordonfish> daemon: Isn't that something you define as part of your api/framework's behavior? Just like how IRC, for example, does its own ping/pong, separate from the ICMP concept by the same name.
[04:32:56] <daemon> gordonfish, nah its part of the websocket protocol, a type of packet almost
[04:33:29] <daemon> https://metacpan.org/pod/Protocol::WebSocket::Frame#is_ping
[04:33:30] <Paperbot> Link title(s): [ Protocol::WebSocket::Frame - WebSocket Frame - metacpan.org ]
[04:33:33] <daemon> https://metacpan.org/pod/Protocol::WebSocket::Frame#is_pong
[04:33:33] <Paperbot> Link title(s): [ Protocol::WebSocket::Frame - WebSocket Frame - metacpan.org ]
[04:33:39] <gordonfish> Ah. TBH I haven't done anything extensive you websockets yet, been wanting to though.
[04:33:52] <daemon> weirdly I might have bodged a solution though I have no idea how
[04:33:55] * gordonfish must be seeing double
[04:34:02] <daemon> I set:         $self->send_pong_frame( 1 )->get
[04:34:06] <daemon> '1' got the bytes
[04:34:11] <daemon> it looks like it might have worked
[04:34:17] <gordonfish> (Oh, one link has #is_ping, the other #is_pong)
[04:34:24] <daemon> yeah that is the underlying protocol
[04:34:32] <daemon> that Net::Async::WebSocket::JSON::Client uses
[04:35:07] <daemon> https://dpaste.org/FFUe
[04:35:08] <Paperbot> Link title(s): [ dpaste/FFUe (Perl) ]
[04:35:35] <daemon> websocket has been up over 900 seconds and still holding
[04:35:45] <daemon> if it reaches it to 1500 I will take it, it worked
[04:35:53] <daemon> it certainly did not error out which I am taking strength from
[04:36:16] <daemon> but yeah the ping/pong frame is really not documented - I mean it is reffered to low enough down
[04:36:27] <daemon> but nothing is really said on how to actually pong if you are a client or ping if you are a server
[04:38:31] <daemon> if this does work I will probably have a chat to LeoNerd about possible implementing a default action for it
[04:38:39] <daemon> because if you do not respond to it, the websocket is just closed mysteriously
[04:39:20] <daemon> eval: 15*60
[04:39:22] <perlbot> daemon: 900
[04:41:44] <daemon> well it should according to this servers docs have killed the connection after 15 minutes (if no pong is sent)
[04:41:49] <daemon> [service_websocket:28050]: Websocket(1316s): $VAR1 = {
[04:41:53] <daemon> ... so yeah looks like it did work
[04:43:19] *** Joins: Vicissitude (~Vicissitu@user/vicissitude)
[04:54:06] *** Quits: rgrinberg (~textual@187.223.209.106) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:55:33] *** Quits: Vicissitude (~Vicissitu@user/vicissitude) (Quit: spider chat, spider chat, often filled with pangolin scat)
[04:59:10] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[04:59:38] *** Joins: marcus (~marcus@mojo/viking/marcus)
[05:00:27] <daemon>  Websocket(2427s) :) yep
[05:07:40] *** bocaneri is now known as Sauvin
[05:08:09] *** Quits: marcus (~marcus@mojo/viking/marcus) (Remote host closed the connection)
[05:08:36] *** Joins: zgu|skaro (~zgu@2603-7080-b704-0800-832f-b7d5-7b90-f547.res6.spectrum.com)
[05:08:38] *** Joins: marcus (~marcus@mojo/viking/marcus)
[05:30:37] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 240 seconds)
[05:31:43] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[05:32:08] *** Joins: batman (~batman@jim-hopper.convos.chat)
[05:41:23] *** Joins: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6)
[05:57:57] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[06:02:02] * GumbyPAN CPAN Upload: App-perlimports-0.000028 by OALDERS https://metacpan.org/release/OALDERS/App-perlimports-0.000028
[06:02:57] *** Quits: Su-Shee (~Susanne@p4ffc7c2f.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:05:02] *** Joins: Su-Shee (~Susanne@p50894f73.dip0.t-ipconnect.de)
[06:07:02] * GumbyPAN CPAN Upload: Open-This-0.000029 by OALDERS https://metacpan.org/release/OALDERS/Open-This-0.000029
[06:08:13] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[06:14:05] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[06:22:04] * GumbyPAN CPAN Upload: Mojolicious-Plugin-Syslog-0.05 by JHTHORSEN https://metacpan.org/release/JHTHORSEN/Mojolicious-Plugin-Syslog-0.05
[06:31:05] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 256 seconds)
[06:36:03] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:36:03] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[06:36:03] *** finn_elija is now known as FinnElija
[06:43:53] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[06:54:37] *** Joins: vrurg (~vrurg@45.74.95.181)
[06:57:09] *** Quits: vrurg_ (~vrurg@45.74.95.181) (Ping timeout: 256 seconds)
[07:05:35] *** Quits: pabogr (uid27497@id-27497.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[07:10:32] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[07:10:44] *** Joins: vrurg (~vrurg@45.74.95.181)
[07:12:10] * GumbyPAN CPAN Upload: Module-Signature-0.88 by AUDREYT https://metacpan.org/release/AUDREYT/Module-Signature-0.88
[07:14:13] *** Quits: Penguin666x (~Penguin66@217.138.205.135) (Ping timeout: 240 seconds)
[07:34:36] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[07:43:15] *** Quits: whynot (~whynot@88.155.84.217) (Quit: leaving)
[08:07:49] *** Quits: Martchus_ (~martchus@dynamic-077-007-144-198.77.7.pool.telefonica.de) (Ping timeout: 240 seconds)
[08:08:35] *** Joins: Martchus (~martchus@2a01:c23:b800:3f00:d250:99ff:fe49:3cce)
[08:12:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[08:17:03] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[08:23:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[08:36:57] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[08:39:34] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[08:46:29] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[08:50:10] <aquanight> sweval: use Scalar::Util 'weaken'; my $r1; { my $r2 = {}; weaken($r1 = $r2); } [ $r1 ]
[08:50:11] <perlbot> aquanight: [undef]
[08:52:40] *** Joins: Penguin666 (~Penguin66@217.138.205.135)
[08:59:01] *** Quits: Paladin (~paladin@s0106c0eae42a785d.vc.shawcable.net) (Remote host closed the connection)
[09:01:12] *** Joins: Paladin (~paladin@S0106c0eae42a785d.vc.shawcable.net)
[09:07:29] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[09:10:29] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[09:17:15] *** Joins: jayray (~jayray@user/jayray)
[09:23:51] <ether> Audrey finds time between causing international incidents to do a little cpan maintenance
[09:48:14] <gordonfish> aquanight: That looks right to me.
[09:48:40] <aquanight> yeah I can never remember which side of = that = returns
[09:48:56] <aquanight> one of those "I always 2nd guess this"
[09:48:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[09:49:37] <aquanight> hey this is probably a stupid question but
[09:49:45] <aquanight> ARRAY(0x55d8d5cc0eb0)
[09:50:06] <aquanight> there a good way to reduce that "pointer" to something I can actually look at consistantly?
[09:52:11] <aquanight> and fucking operator precedence keeps fucking with me
[09:52:15] <aquanight> this is why I like prototypes
[09:52:18] <aquanight> I always think I can do
[09:52:31] <aquanight> mynormaloneargsub $thing > 4
[09:52:33] <xenu> you mean convert address to reference?
[09:52:34] <gordonfish> aquanight: If you mean the weaken($r1 = $r2), iirc, weaken is operating on $r1, which if first assigned to, then passed to weaken.
[09:52:41] <aquanight> but without :prototype($) that blows up in your face
[09:52:52] <aquanight> gordonfish: yes that's what I wanted
[09:52:59] <aquanight> basically
[09:53:43] <aquanight> I'm doing my $x = []; $x->[0] = (my $y = []); weaken($y->[2] = $x); shenanigans
[09:54:11] <aquanight> binary trees using arrays so I wanted up and down linkages for easy movement
[09:54:37] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:dc30:517f:71c5:bb40) (Ping timeout: 240 seconds)
[09:54:41] <aquanight> I don't know if they're technically binary trees.
[09:54:44] *** Quits: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:54:45] *** Joins: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[09:54:54] <aquanight> they're something binary-tree-adjacent.
[09:56:13] *** Quits: jlenz (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[09:57:11] <aquanight> xenu: no what I'm after is I'm spewing a bunch of this shit to STDERR so I can see if I'm linking stuff up right
[09:57:30] <aquanight> problem is I have a shitload of ARRAY(0x55d8d5cc...) and it makes my eyeballs go "fuck this"
[09:57:35] *** Joins: jlenz__ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net)
[09:58:04] <xenu> well if you want more random addresses, hash them
[09:58:12] <aquanight> I don't want random addresses
[09:58:16] <aquanight> I want *readable* addresses
[09:58:35] <aquanight> but hashing might be the solution there
[09:58:41] <gordonfish> Data::Dump(er) ?
[09:59:01] <huf> get a dictionary, pair up each ref with a word, print the word
[09:59:03] <xenu> well you can make a list of random words and randomly assign them to references
[09:59:05] <xenu> yeah
[09:59:26] <aquanight> I might have to just do something like... sub array_id { state %x; state $id = 0; $x{"".shift} //= $id++; }
[10:01:17] *** Quits: jlenz_ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[10:05:17] <gordonfish> sweval: use Scalar::Util qw(refaddr); my $r = {}; [ map { join '_', sprintf('%X', refaddr $_) =~ /.{4}/g } [], {}, \'foo' ]; # aquanight
[10:05:18] <perlbot> gordonfish: ["5591_6393_50C0","5591_6393_5090","5591_639F_A090"]
[10:06:33] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[10:10:59] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[10:12:57] *** Quits: vrurg (~vrurg@45.74.95.181) (Ping timeout: 240 seconds)
[10:16:15] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 268 seconds)
[10:30:57] *** Quits: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se) (Ping timeout: 240 seconds)
[10:39:44] *** Joins: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6)
[10:42:17] <aquanight> of the things I'm not proud of doing for an advent puzzle... using eval to read input.
[10:52:37] <rindolf> aquanight: "advent of code"?
[10:52:48] <aquanight> rindolf: ya
[10:52:57] <rindolf> aquanight: ah
[10:57:59] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[10:58:24] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[10:59:26] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:10:59] <rewt> sweval: my $r = {}; [ map { join '_', sprintf('%x', $_) =~ /.{4}/g } [], {}, \'foo' ];  # gordonfish, don't even need refaddr for that; a ref in numeric context is the address itself
[11:11:00] <perlbot> rewt: ["558f_d1b5_a920","558f_d1b5_a890","558f_d1bb_8530"]
[11:11:35] * GumbyPAN CPAN Upload: Mail-Exim-Blacklist-Attachments-1.007 by VOEGELAS https://metacpan.org/release/VOEGELAS/Mail-Exim-Blacklist-Attachments-1.007
[11:17:22] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[11:18:23] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 256 seconds)
[11:20:15] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Excess Flood)
[11:21:36] * GumbyPAN CPAN Upload: Mail-Exim-Blacklist-GeoIP-1.001 by VOEGELAS https://metacpan.org/release/VOEGELAS/Mail-Exim-Blacklist-GeoIP-1.001
[11:25:17] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[11:44:30] *** Joins: manjaroi3 (~manjaro-i@112.169.116.78)
[11:54:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[12:04:26] *** Joins: R2robot_ (~R2robot@user/r2robot)
[12:06:46] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 260 seconds)
[12:19:08] *** Joins: tobybl (~tobybl@213.31.132.151)
[12:20:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:22:20] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[12:26:37] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[12:30:02] *** Quits: Affliction (affliction@idlerpg/player/affliction) (Quit: Read error: Connection reset by beer)
[12:40:03] *** R2robot_ is now known as R2robot
[12:44:46] *** Joins: Affliction (affliction@idlerpg/player/affliction)
[12:50:57] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[12:53:21] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[12:56:13] *** Joins: aquanite (~aquanight@174-126-159-166.cpe.sparklight.net)
[12:56:50] * GumbyPAN CPAN Upload: XML-SAX-SVGTransformer-0.04 by ISHIGAKI https://metacpan.org/release/ISHIGAKI/XML-SAX-SVGTransformer-0.04
[12:56:57] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 240 seconds)
[12:56:57] *** aquanite is now known as aquanight
[13:00:15] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:04:31] *** Quits: Adura (~Adura@user/adura) (Ping timeout: 250 seconds)
[13:06:49] <karjala> I have a script/webapp with nested evals running forever in a while (1) {...} loop (inside the setup function of the Mojo webapp which runs under Morbo, though that might not be important, and before the worker processes have been forked forked), and CTRL-C doesn't seem to terminate it, it just iterates some loop under while(1). I wonder what makes a process un-terminable
[13:07:02] <karjala> (I want it to terminate with CTRL-C btw)
[13:07:33] <karjala> the bottom loop executes a web request with Mojo::UserAgent
[13:08:02] <karjala> But even if I ask the bottom loop to sleep first at every iteration, I still can't ctrl-c terminate it
[13:08:19] <karjala> (with repeated ctrl-c presses)
[13:08:37] <karjala> Do you have an idea of what might be going on?
[13:11:38] <rindolf> perlbot: sh -x
[13:11:38] <perlbot> rindolf: For printing every line of Perl code, see https://metacpan.org/release/Devel-TraceUse ; https://metacpan.org/release/Devel-Trace ; https://metacpan.org/module/Devel::TraceVars
[13:12:31] <rindolf> karjala: can you try that?
[13:13:38] <karjala> rindolf: What should I try to achieve? To print lines while they are being executed?
[13:14:00] <karjala> Is that what you'd like me to try?
[13:14:29] <rindolf> karjala: for debugging the issue, yes
[13:18:57] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[13:19:14] *** Joins: Colt (~Colt@user/colt)
[13:27:06] <daemon> hey all I am using an async component notable: Net::Async::WebSocket::JSON::Client in an app, but am having trouble detecting if it has become disconnected from the remote server or being notified of it
[13:27:10] <daemon> how would I do such a thing?
[13:27:16] <daemon> ideally how would I tell it to simply reconnet
[13:27:22] <daemon> ideally how would I tell it to simply reconnect *
[13:31:14] *** Joins: Pali (~pali@user/pali)
[13:35:43] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Read error: Connection reset by peer)
[13:36:00] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.39)
[13:36:17] <judabuda> can i run perl CGI scripts with nginx?
[13:36:17] <karjala> rindolf: Morbo doesn't allow me to pass -d:Trace command-line option, and running the webapp as: perl -d:Trace ./my_app daemon , exits with a single CTRL-C (as does the same command without -d:Trace)
[13:36:37] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[13:36:39] <karjala> Morbo is normally executed with the morbo command from shell
[13:37:04] <karjala> So it's Morbo's fault somewhere
[13:37:46] <karjala> Something to do with Morbo
[13:37:50] <daemon> writea cheap little wrapper.pl boot that with morbo and start your application with whatever flags you like
[13:37:56] <daemon> eval?
[13:38:12] <daemon> sorry not eval exec is it to pass down the entire execution 
[13:39:46] <karjala> daemon: Are you suggesting something like `use Devel::Trace; system("morbo ...");` I think that won't work, so it's something else you're saying
[13:40:03] <karjala> What should the wrapper do?
[13:40:19] <daemon> I assume morbo is just some thing that executes your webapp
[13:40:28] <karjala> Morbo should execute the wrapper?
[13:40:53] <daemon> yeah write wrapper.pl and get the wrapper to exec your webapp.pl with the -d option
[13:41:00] <daemon> so morbo never has to start it with any flags
[13:41:51] <karjala> I think you can't execute arbitrary scripts with Morbo, only webapps.
[13:42:50] <karjala> I'll try
[13:42:58] <daemon> ah ok 
[13:43:15] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Remote host closed the connection)
[13:44:19] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[13:44:44] <karjala> Turns out you can
[13:45:19] <daemon> :)
[13:46:22] <karjala> even a simple looping script can't be ctrl-c'ed when run under morbo
[13:46:23] *** Quits: rgrinberg (~textual@2806:101e:7:6946:c82c:d3ba:1be9:cc6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:46:41] <karjala> sleep just gets interrupted and that's all
[13:46:49] <daemon> ps aux and send the child a kill
[13:46:57] <karjala> I did that
[13:47:03] <karjala> only kill -9 will do
[13:47:18] <daemon> sounds like a virus
[13:47:45] <karjala> corona maybe
[13:47:50] <daemon> :)
[13:53:06] <karjala> Writing `use Devel::Trace 'trace'; trace 'on';` in my webapp doesn't trace either. But there's no need to - it's morbo+sleep's fault
[14:06:07] *** Quits: manjaroi3 (~manjaro-i@112.169.116.78) (Ping timeout: 256 seconds)
[14:10:26] *** Quits: hudo (~hhudo_@mail.allm-elektro.de) (Ping timeout: 260 seconds)
[14:11:47] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[14:12:32] *** Joins: hudo (~hhudo_@mail.allm-elektro.de)
[14:25:48] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:59] *** Joins: csrf (~csrf@user/csrf)
[14:33:54] *** Quits: martinus__ (~martin@96.19.201.77.rev.sfr.net) (Ping timeout: 256 seconds)
[14:37:43] *** Joins: mattil (~mattil@87-92-14-145.bb.dnainternet.fi)
[14:39:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[14:41:20] *** Quits: mattil (~mattil@87-92-14-145.bb.dnainternet.fi) (Remote host closed the connection)
[14:41:58] *** Joins: mattil (~mattil@87-92-14-145.bb.dnainternet.fi)
[14:42:01] *** Quits: mattil (~mattil@87-92-14-145.bb.dnainternet.fi) (Read error: Connection reset by peer)
[14:47:44] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[14:50:17] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[14:53:15] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[14:57:56] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[15:13:18] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[15:29:43] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.39)
[15:30:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Read error: Connection reset by peer)
[15:38:31] *** Joins: tobybl (~tobybl@213.31.132.151)
[15:44:10] *** Quits: gamo (~Thunderbi@cm-93-156-61-102.telecable.es) (Quit: gamo)
[16:06:47] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[16:07:06] *** Joins: tejr (~tejr@user/tejr)
[16:12:40] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:12:54] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:15:57] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[16:16:10] *** Joins: xenial-user10 (~androirc@20014C4C17E1D200B1EDCB079093A58F.catv.pool.telekom.hu)
[16:25:55] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[16:37:06] *** Joins: TeddyDD (~TeddyDD@user/teddydd)
[16:41:05] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:45:59] *** Quits: proller (~p@2a02:6b8:b081:8806::1:31) (Ping timeout: 268 seconds)
[16:49:35] *** Joins: toastloop (toastloop@user/toastloop)
[16:59:03] *** Joins: proller (~p@80.240.216.69)
[17:11:48] <daemon> hey all I am using an async component notable: Net::Async::WebSocket::JSON::Client in an app, but am having trouble detecting if it has become disconnected from the remote server or being notified of it
[17:12:34] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[17:16:47] <daemon> is there anyway to get cpan to install cpanm from a local tarball with no user intervention?
[17:17:46] <LeoNerd> If I had a local tarball I'd just install it, no need to use cpan for that
[17:18:16] <daemon> yeah can do that easy enough
[17:18:37] <daemon> LeoNerd, while you are about, you got any idea about that net::async question ^
[17:18:44] <daemon> also can I suggest a minor change
[17:19:31] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Quit: leaving)
[17:19:43] <daemon> https://dpaste.org/psbL <-- for the suggestion
[17:19:44] <Paperbot> Link title(s): [ dpaste/psbL (Perl) ]
[17:19:56] <daemon> because there is zero docs on it and without it long running websocket connections just end
[17:20:03] <daemon> no notice about why
[17:20:14] <daemon> I do not even know if '1' is the correct thing to do
[17:20:17] <daemon> but it fixed mine
[17:20:36] *** Joins: Adura (~Adura@user/adura)
[17:21:07] <daemon> if not a default some sort of notice default 'receieved ping frame but no pong handler' might be nice
[17:21:45] *** Quits: xenial-user10 (~androirc@20014C4C17E1D200B1EDCB079093A58F.catv.pool.telekom.hu) (Ping timeout: 268 seconds)
[17:21:47] <daemon> the closest mention to it is tight down in websocket::protocol::frame and its more 'it might be a ping frame' ~ 
[17:21:49] <LeoNerd> daemon: I know almostnothing about websockets
[17:21:52] <LeoNerd> I can barely spell the name
[17:21:54] <daemon> :P
[17:22:12] <daemon> would you be at least willing to mention it in the docs, even a side note
[17:22:23] <LeoNerd> I don't think that's even my module, is it?
[17:22:42] <LeoNerd> Oh huh.. .apparently it is. That's how little I know about it
[17:22:43] <daemon> https://metacpan.org/pod/Net::Async::WebSocket::JSON
[17:22:43] <Paperbot> Link title(s): [ Net::Async::WebSocket::JSON - use JSON-encoded data over WebSockets with IO::Async - metacpan.org ]
[17:22:45] <LeoNerd> I didn't even remember I wrote it
[17:22:49] <daemon> :P
[17:23:00] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 268 seconds)
[17:23:16] <daemon> but just something like 'In the event you are a long running client, it is likely a serer will emit a ping frame on the protocol level to check you are still connected, to deal with this you must respond with a pong' 
[17:23:23] <daemon> I do not know if I even wrote that pong correct
[17:23:26] <daemon> but yeah as I said
[17:23:31] <LeoNerd> I don't think that sounds JSON-specific
[17:23:33] <daemon> it did stop my connections getting nailed after a few minutes
[17:23:35] <LeoNerd> It likely applies to any connection
[17:23:37] <daemon> its not its protocol level
[17:23:45] <daemon> itsa literal special frame
[17:24:02] <daemon> but for some reason its not handled by default
[17:24:04] <LeoNerd> Yes. Any websocket connection
[17:24:07] <daemon> yep
[17:24:10] <daemon> any long running one
[17:24:16] <LeoNerd> So not JSON-specific
[17:24:29] <daemon> nope its more for https://metacpan.org/pod/Net::Async::WebSocket::JSON::Client
[17:24:29] <Paperbot> Link title(s): [ Net::Async::WebSocket::JSON::Client - connect to a WebSocket server using JSON and IO::Async - me... ]
[17:24:38] <daemon> oh maybe lower
[17:24:42] <LeoNerd> I'd suggest it's more for https://metacpan.org/pod/Net::Async::WebSocket
[17:24:43] <Paperbot> Link title(s): [ Net::Async::WebSocket - use WebSockets with IO::Async - metacpan.org ]
[17:24:50] <daemon> https://metacpan.org/pod/Net::Async::WebSocket::Client
[17:24:50] <Paperbot> Link title(s): [ Net::Async::WebSocket::Client - connect to a WebSocket server using IO::Async - metacpan.org ]
[17:25:17] <daemon> yeah there would be a nice place for it
[17:25:35] <daemon> though really it kinda wants to be a default handler anyway
[17:25:49] <daemon> normal people would not even know what it was, I only know because of working with websockets years ago
[17:26:17] <daemon> its not actually mentioned all the way down till... https://metacpan.org/pod/Protocol::WebSocket::Frame
[17:26:17] <Paperbot> Link title(s): [ Protocol::WebSocket::Frame - WebSocket Frame - metacpan.org ]
[17:26:33] <daemon> and then it just mentions there is a ping frame not really what to do with it
[17:26:45] <LeoNerd> That's because I have no idea what a ping frame is
[17:26:51] <LeoNerd> It sounds like you know more about this than I do
[17:27:02] <daemon> and I do not know that much, all I know is that there are 5 types of frames
[17:27:08] <daemon> 2 of those are ping or pong frames
[17:27:14] <daemon> you have to respond to a ping frame with a pong frame
[17:27:27] <daemon> or the con will be axed by the server
[17:27:29] *** Joins: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu)
[17:29:34] <daemon> the thing I am not sure about is this: ... send_pong_frame( $bytes, $params )
[17:29:46] <daemon> I stuck '1' in bytes and left params blank and it worked, I have no idea if that is correct
[17:30:04] <LeoNerd> Then you already know more than Ido
[17:30:38] <daemon> but yeah I just wanted to stop people losing their mind over it by suggesting its defaulted it not specified, if you think that is a good idea
[17:31:27] <daemon> if it is not specified*
[17:32:56] <LeoNerd> "if you think it's a good idea"
[17:33:07] <LeoNerd> I feel I'm not adequtely expressing that I have no idea about any of this
[17:33:15] <LeoNerd> So I can't judge if that's a good idea or not
[17:33:23] <daemon> who would be best to judge
[17:33:31] <LeoNerd> Someone who knows anything at all about websockets
[17:33:42] <daemon> I am not sure that is a massive amount of people -_-
[17:33:54] <daemon> I think mst knows a bit
[17:34:03] <LeoNerd> well then why is all the world's fancy tech built atop foundations that so few people know about?
[17:34:19] <daemon> that has always been the way :P
[17:34:38] <daemon> but its fairly standard for ping/pong frames to be defaulted (at least the c# clientsdo)
[17:35:28] <daemon> I assume you would also not know how to detect if Net::Async::WebSocket::Client gets disconnected from its remote end point either
[17:35:49] <LeoNerd> If it's a regular TCP socket then the usual TCP socket things apply
[17:35:57] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[17:36:23] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[17:36:27] <daemon> ok dokey
[17:40:41] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[17:41:47] *** Joins: haj1 (~haj@ip5f5bf913.dynamic.kabel-deutschland.de)
[17:42:01] <brunoramoslu> hi, I' "stuck" on something that I was not expecting. I'm writing some unit test for a game and was trying to do a check on a function that is just doing return $val < $LIMIT;  so basically true/false
[17:42:30] <brunoramoslu> Is there an easy way to simulate the nature of the true/false?
[17:42:51] <huf> 1 is true and !1 is false
[17:43:17] <LeoNerd> !!1 would be a better true, by the way. It's actually boolean on new perls in a way that 1 isn't
[17:43:31] <huf> yeah, if you really need it to be true, !!1 is better
[17:43:46] *** Quits: sbrothy (~sbrothy@23.102.41.137) (Remote host closed the connection)
[17:43:49] <huf> or !0 to be the same length as false
[17:44:30] <brunoramoslu> ah I see, my google foo was failing me on this one
[17:44:32] <brunoramoslu> thanks
[17:46:51] <daemon> if we have a real true/false in !0 and !1 can't we simply have a solid true/false 'true' 'false' ?
[17:47:06] <LeoNerd> From Monday, you can
[17:47:09] <daemon> oooh
[17:47:22] <LeoNerd> (that's when 5.35.8 should get bundled up, containing the new  use builtin  stuff)
[17:47:22] *** Quits: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) ()
[17:47:31] <daemon> nice
[17:47:32] <LeoNerd> Oh which reminds me I should write some perldelta for it
[17:47:56] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[17:48:25] *** Joins: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[17:49:04] <pragma-> "1 is true, !1 is false" is certainly different than the "0 is false, !0 is true" that one typically hears.
[17:49:30] <simcop2387> !1 is false would seem to imply that 2 is false.  there is no such thing as 2
[17:49:31] <huf> 0 is false but not the real false
[17:49:35] *** Joins: Deknos (~someone@user/menace)
[17:49:38] <brunoramoslu> unsurprisingly it worked as you said using !!1 for true and !1 for false :)
[17:49:42] <daemon> simcop2387, 2 is 'maybe' ;)
[17:50:08] <huf> isnt it file not found?
[17:52:53] *** Joins: ueberall (ueberall_l@user/ueberall)
[17:54:01] <brunoramoslu> is it me or it's not easy to search for !!1 and !0 in google and github ?
[17:54:14] <daemon> lol maybe "!!1"
[17:54:20] <brunoramoslu> no
[17:54:21] <brunoramoslu> :D
[17:54:24] <daemon> :)
[17:54:47] <brunoramoslu> and '!!1' doesn't work either
[17:54:53] <brunoramoslu> XD
[17:55:50] <daemon> well after monday no need to worry about it 
[17:56:01] <daemon> well then again it will be a development release
[17:56:10] <daemon> LeoNerd, is it known if it will get pulled into 5.26 yet
[17:56:11] <brunoramoslu> I was trying to find a CPAN module that would have this definition in a reusable/packaged way already
[17:56:13] <daemon> 36 *
[17:56:39] <LeoNerd> It's on the development path towards 5.36, yes
[17:56:56] <brunoramoslu> I'll just leave the code like that and move to 5.36 when it's out
[17:57:10] <daemon> I thought it could still be held back from the stable release even if it made it to the development release
[17:57:14] *** Quits: xenial-user10 (~androirc@3EC97C6F.catv.pool.telekom.hu) (Ping timeout: 252 seconds)
[17:59:17] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[18:07:01] *** Quits: ology (~gene@user/ology) (Remote host closed the connection)
[18:11:36] *** Joins: ology (~gene@user/ology)
[18:21:26] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[18:25:04] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:33:37] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:35:48] <aquanight> evalblead: use Devel::Peek; Dump(!!1);
[18:35:59] <aquanight> perlbot: evalblead use Devel::Peek; Dump(!!1);
[18:35:59] <perlbot> aquanight: No factoid found. Did you mean one of these: [evalpaste] [eval print 4+5] [eval] [evalspam] [eval-test] [evalmodules] [eval_modules] [evil] [eclipse perl] [epitaph]
[18:36:49] <karjala> Hello!
[18:43:48] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[18:43:56] *** Joins: sevvie_ (~sevvie@vps-6df5f188.vps.ovh.net)
[18:44:09] *** Quits: sevvie (~sevvie@vps-6df5f188.vps.ovh.net) (Killed (NickServ (GHOST command used by sevvie_)))
[18:44:14] *** sevvie_ is now known as sevvie
[18:46:40] *** Quits: Deknos (~someone@user/menace) (Quit: Deknos)
[18:47:16] *** Joins: selkirk (~selkirk@182.69.202.102)
[18:49:01] <selkirk> any good places where i can look for remote Perl jobs?
[18:49:36] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[18:49:48] <aquanight> LeoNerd: https://github.com/Perl/perl5/blob/c80a8618143e98aed6d9e5bbaee16d0308e211d0/inline.h#L3426 ## probably should be checking that SvIV(sv) has the right value
[18:49:49] <Paperbot> Link title(s): [ perl5/inline.h at c80a8618143e98aed6d9e5bbaee16d0308e211d0 · Perl/perl5 · GitHub ]
[18:50:13] <Mandevil> Hm, is there any problem with copying sqlite3 file of a running app? 
[18:50:35] <Mandevil> I am copying from running Mojo app to dev environment and I am not getting the same content.
[18:51:55] *** Quits: diskin (~diskin@ec2-18-158-74-148.eu-central-1.compute.amazonaws.com) (Read error: Connection reset by peer)
[18:52:15] <Mandevil> Oh, I guess it's all in the wal file?
[18:52:58] *** Joins: diskin (~diskin@87.117.51.113)
[18:54:25] <LeoNerd> aquanight: It shouldn't need to
[18:55:06] <LeoNerd> Any modification will first have done THINKFIRST which will break the COW_static
[19:00:14] <simcop2387> Mandevil: yea if you have the WAL enabled then it'll be in there until locks get freed.  that file can't always be reliably copied though (it generally works though).
[19:00:38] *** Joins: gamo (~Thunderbi@cm-93-156-61-102.telecable.es)
[19:00:54] <ology> selkirk: https://jobs.perl.org/search?offsite=1 maybe?
[19:00:55] <Paperbot> Link title(s): [ Search (Perl Jobs) ]
[19:01:13] <simcop2387> Mandevil: what can work better is: echo ".dump" | sqlite3 db.file > db.sql; and then just load up the .sql file in a new database
[19:01:14] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[19:01:31] <simcop2387> i think that's the right pattern anyway
[19:03:38] *** Joins: monkey_ (~user@190.104.116.153)
[19:06:32] <selkirk> ology: thanks, mate! what should i expect for a Perl job interview?
[19:07:07] <ology> uh
[19:07:33] <ology> perl coding?
[19:07:44] <ology> problem solving?
[19:07:44] <selkirk> ology: yeah.
[19:08:16] <selkirk> ology: are personal projects absolutely necessary? i have a couple of small terminal based game-like apps in GitHub but nothing big.
[19:08:37] <selkirk> ology: in Perl, i mean.
[19:08:37] <ology> A portfolio of your work is always important.
[19:08:46] <selkirk> ology: i'll try to improve it.
[19:09:11] <selkirk> ology: is Moose or some OOP framework a necessary requirement for Perl nowadays?
[19:09:57] <ology> I have used Moo(se) in a number of enterprise gigs.
[19:12:04] <selkirk> ology: thanks, mate! you've been very helpful. i absolutely love Perl and was looking for a job in hope that it would be easy now that not many developers learn Perl anyway and i know it.
[19:12:43] <ology> selkirk: Check out https://www.careerbuilder.com/jobs?posted=&pay=&radius=&emp=all&cb_apply=false&cb_workhome=true&keywords=perl&location= maybe too?
[19:12:43] <Paperbot> Link title(s): [ Perl Jobs - Apply Now | CareerBuilder ]
[19:13:21] <selkirk> ology: will do. i'm exclusively remote, though.
[19:13:55] <ology> That is what the &location= menas.
[19:14:00] <ology> means
[19:14:33] <selkirk> ology: oh! sure.
[19:14:37] <selkirk> ology: (Y)
[19:21:00] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[19:22:11] <rindolf> selkirk: also see https://perl-begin.org/tutorials/bad-elements/
[19:22:12] <Paperbot> Link title(s): [ Perl Elements to Avoid - The Perl Beginners’ Site ]
[19:25:30] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[19:28:22] *** Joins: monkey_ (~user@190.104.116.153)
[19:29:25] <simcop2387> selkirk: portfolios almost always help but aren't always required, a decent amount of my bigger stuff was done for $EMPLOYER so couldn't be shown in interviews
[19:30:13] <selkirk> simcop2387: okay. thanks!
[19:30:45] <selkirk> rindolf: thanks!
[19:31:40] <aquanight> LeoNerd: what about dualvar?
[19:31:44] <rindolf> selkirk: you're welcome . good luck
[19:32:05] <LeoNerd> aquanight: I didn't want to encourage that kind of thing
[19:32:19] <aquanight> LeoNerd: I'm thinking the opposite problem
[19:33:13] <aquanight> e.g. dualvar(1, !1); would this look like a boolean
[19:33:22] <aquanight> (it'd have to be under 'use integer')
[19:33:36] <LeoNerd> No, No perl code can create booleans other than the given true/false ones
[19:34:05] *** Quits: toastloop (toastloop@user/toastloop) (Remote host closed the connection)
[19:34:45] <aquanight> ah, sv_copypv doesn't set up COW
[19:35:09] <aquanight> so I'm not sure how you'd get the same PV ptr into the result
[19:35:50] <aquanight> I think that would've been the only thing keeping you from passing the SvIsBOOL test
[19:37:43] <LeoNerd> Right; but that's a fairly key point :) COWs are kinda fragile and they're fragile enough that any modification you try to make to a bool stops is being bool
[19:39:05] *** Quits: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) ()
[19:39:33] *** Joins: ovid_ (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[19:40:50] <aquanight> yeah I'm not sure what would even create a COW scalar to begin with.
[19:40:50] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 260 seconds)
[19:41:01] <aquanight> like from perl side that is
[19:41:52] <aquanight> of course
[19:42:14] <aquanight> I could build up a fake boolean with pack hacking but that point we're pretty firmly in "apply gun to foot" territory.
[19:43:04] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[19:45:38] *** Quits: selkirk (~selkirk@182.69.202.102) (Quit: leaving)
[19:50:05] <Mandevil> simcop2387: Ah, thanks for the hint.
[19:56:57] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[19:57:25] *** Quits: EvanCarroll (~ecarroll@68-78-105-35.lightspeed.hstntx.sbcglobal.net) (Ping timeout: 240 seconds)
[19:57:30] <Mandevil> if exists $arg{$k} && defined $arg{$k} && $arg{$k} eq '' ... do I need to write this to avoid warnings if the key doesn't exist or exists but doesn't have defined value?
[19:57:42] <Mandevil> Or is there a better way?
[19:58:06] <simcop2387> Mandevil: depends on what you're doing exactly, what's going on inside the if?
[19:58:08] <Mandevil> (The purpose of that test is to see if it has empty string value).
[19:58:33] <simcop2387> i think you can get away without the exists for that
[19:58:35] <Mandevil> https://l.perl.bot/p/8xruhm
[19:58:35] <Paperbot> Link title(s): [ Perlbot Pastebin ]
[19:58:51] <Mandevil> simcop2387: No, it gives warning if the key exists but is undefined.
[19:59:09] <simcop2387> but you can probably also do: if (($arg{$k} // '') eq '') { ... }
[19:59:35] <Mandevil> I guess, but it's quite ugly.
[20:00:01] <simcop2387> since you're getting it from keys then it should always exist
[20:00:21] <Mandevil> Well, I am getting warnings... so seems like that's not the case.
[20:01:50] <Mandevil> It's not a big deal, I'll just have three tests.
[20:02:00] <Mandevil> I just wanted to know if I am doing something silly or not.
[20:02:02] <simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $k (keys %args) {$args{$k} = undef unless $args{$k} ne ''}; \%args
[20:02:03] <perlbot> simcop2387: Use of uninitialized value $args{"bar"} in string ne at (IRC) line 1. {baz => undef,bar => undef,foo => 1}
[20:02:11] <aquanight> length($arg{$k}) == 0 over $arg{$k} eq ''
[20:02:17] <simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $k (keys %args) {$args{$k} = undef unless !defined $args{$k} || $args{$k} ne ''}; \%args
[20:02:19] <perlbot> simcop2387: {bar => undef,baz => undef,foo => 1}
[20:02:34] <simcop2387> aquanight: why?
[20:02:49] <aquanight> is that not a thing?
[20:03:08] <simcop2387> aquanight: it'll work but it's longer and not as clear what you're doing
[20:03:38] <simcop2387> it has no advantages at all
[20:04:47] <simcop2387> sweval: my $s; length($s)
[20:04:49] <perlbot> simcop2387: No output.
[20:04:54] <simcop2387> hrm i thought that'd give a warning too
[20:04:57] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $k (keys %args) {$args{$k} = undef if $args{$k}//'' eq ''}; \%args
[20:04:59] <perlbot> aquanight: {baz => "",foo => undef,bar => undef}
[20:05:30] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $k (keys %args) {$args{$k} = undef unless length $args{$k}}; \%args
[20:05:31] <perlbot> aquanight: {bar => undef,foo => 1,baz => undef}
[20:05:48] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; $_ = undef unless length $_ for values %args; \%args
[20:05:50] <perlbot> aquanight: ERROR: syntax error at (IRC) line 1, near "$_ for " 
[20:06:14] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; $_ = (length $_ ? $_ : undef) for values %args; \%args
[20:06:15] <perlbot> aquanight: {baz => undef,foo => 1,bar => undef}
[20:06:46] <aquanight> oo I can golf it further
[20:06:53] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; $_ = (length ? $_ : undef) for values %args; \%args
[20:06:55] <perlbot> aquanight: {baz => undef,bar => undef,foo => 1}
[20:07:10] <simcop2387> aquanight: that's an interesting idea using values like that
[20:07:21] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; length or $_ = undef for values %args; \%args
[20:07:23] <perlbot> aquanight: {baz => undef,bar => undef,foo => 1}
[20:07:41] <simcop2387> a less golfed version that'd be valid then:
[20:08:03] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; length||undef $_ for values %args; \%args
[20:08:04] <perlbot> aquanight: {foo => 1,baz => undef,bar => undef}
[20:08:11] <simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $v (values %args) {undef $v unless $v}; \%args
[20:08:13] <perlbot> simcop2387: {baz => undef,foo => 1,bar => undef}
[20:08:26] <aquanight> simcop2387: that'll kill "0"
[20:08:28] <simcop2387> hrm that's not quite good enough yea
[20:08:36] <simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $v (values %args) {undef $v unless length $v}; \%args
[20:08:37] <perlbot> simcop2387: {foo => 1,bar => undef,baz => undef}
[20:08:54] <aquanight> $_ is great for golfing
[20:09:16] <simcop2387> yea, i like to avoid it in most normal code though just because it can be confusing
[20:09:23] <aquanight> well yes
[20:09:33] <simcop2387> Mandevil: assuming you don't care about the actual key, see above
[20:09:45] <simcop2387> if you do care about the key, see experimental perl
[20:09:49] <aquanight> but now I'm wondering how much further can we go
[20:09:57] *** Joins: pj (~pj@ghettoforge/pj)
[20:10:08] <Mandevil> You mean caring about keys existence?
[20:10:09] <simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my ($k,$v) (%args) {undef $v unless length $v; "... $k here ..."}; \%args
[20:10:10] <perlbot> simcop2387: Useless use of string in void context at (IRC) line 1. {baz => undef,foo => 1,bar => undef}
[20:10:16] <aquanight> sadly undef won't act on $_ by default
[20:10:19] <simcop2387> Mandevil: caring about what the key actually is
[20:10:30] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[20:10:35] <Mandevil> No, I just want to replace all '' values with undef.
[20:10:55] <Mandevil> It's for ingestion of forms where empty values come back as ''.
[20:11:02] <Mandevil> I mean HTML forms.
[20:11:13] <aquanight> Mandevil: in that case, see simcop2387
[20:11:18] <simcop2387> Mandevil: yea then iterating on values %arg, and using the aliasing of the loop to reassign is a very nice way to do things
[20:11:22] <aquanight> 09:38:37/66DD8 < simcop2387> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; for my $v (values %args) {undef $v unless length $v}; \%args
[20:11:48] <simcop2387> i always forget that works, wasn't until aquanight reminded me that it made sense
[20:12:01] <simcop2387> and i still could have sworn that length(undef) would warn
[20:12:13] <aquanight> it apparently does not
[20:12:13] <Mandevil> HM
[20:12:23] <Mandevil> Let's try it.
[20:12:52] <aquanight> joh
[20:12:57] <aquanight> I can golf it further
[20:13:01] <aquanight> I can shave 3 more characters
[20:13:10] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = undef; $args{baz} = ''; /./||undef $_ for values %args; \%args
[20:13:11] <perlbot> aquanight: Use of uninitialized value $_ in pattern match (m//) at (IRC) line 1. {baz => undef,foo => 1,bar => undef}
[20:13:14] <aquanight> damn
[20:13:16] <aquanight> nope
[20:13:39] <aquanight> well
[20:13:59] <aquanight> if it's the html forms where 'undef' values won't be in the hash *then* that could work but in the general case it does not.
[20:14:04] <Mandevil> Yeah, looks good
[20:14:33] <Mandevil> Thanks guys for the effort.
[20:15:49] <Mandevil> aquanight: BTW, you can shave chars with if! in place of unless
[20:15:52] <Mandevil> 3 chars!
[20:16:15] <aquanight> well
[20:16:18] <aquanight> || also works
[20:16:45] <aquanight> remember that A unless B is also 'B or A' or B||A
[20:17:15] <Mandevil> Right
[20:19:29] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:dc30:517f:71c5:bb40)
[20:19:54] <aquanight> sweval: my %args; $args{foo} = 1; $args{bar} = ''; $args{baz} = ''; /./||undef $_ for values %args; \%args
[20:19:55] <perlbot> aquanight: {bar => undef,baz => undef,foo => 1}
[20:20:47] <aquanight> this is probably the limit here I think.
[20:23:19] *** Joins: tobybl (~tobybl@213.31.132.151)
[20:24:31] <Mandevil> Lol, that breaks syntax highliting in vscode
[20:27:10] <Mandevil> It doesn't like /./|| ... if there's space between / and | all is fine.
[20:27:58] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[20:31:31] <daemon> Mandevil, https://i.imgur.com/B6Nc0dK.png
[20:31:36] <daemon> does not seem to break highlighting :o
[20:32:51] <Mandevil> It does for me: https://i.imgur.com/plCPGbf.png
[20:35:35] <Mandevil> daemon: Are you using default perl syntax highlighter?
[20:35:40] <daemon> nope
[20:36:08] <Mandevil> That might be it :)
[20:36:47] <Mandevil> Use of uninitialized value $_ in pattern match (m//) ... the golfed version doesn't seem to cut it.
[20:37:49] <daemon> Mandevil, https://gist.github.com/PaulGWebster/bd74efbbbdb01837661df29b44272b41
[20:37:50] <Paperbot> Link title(s): [ Visual Studio Code Settings Sync Gist · GitHub ]
[20:51:40] * GumbyPAN CPAN Upload: ELab-Client-0.020 by AKHUETTEL https://metacpan.org/release/AKHUETTEL/ELab-Client-0.020
[20:56:21] *** Quits: pizdets (~pizdets@183.182.110.61) (Ping timeout: 268 seconds)
[20:57:16] *** Joins: pizdets (~pizdets@183.182.110.61)
[21:05:57] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[21:06:14] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[21:09:52] *** Joins: EvanCarroll (~ecarroll@216.52.170.154)
[21:16:55] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[21:17:18] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:18:50] *** Joins: pj (~pj@ghettoforge/pj)
[21:19:38] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 256 seconds)
[21:29:28] <daemon> https://i.imgur.com/JRU2auU.png version strings are bad?
[21:30:35] <ether> yes
[21:30:43] <daemon> so ... what should we correctly use
[21:30:52] <ether> https://xdg.me/version-numbers-should-be-boring/
[21:30:53] <Paperbot> Link title(s): [ Version numbers should be boring ]
[21:31:23] <ether> use v5.16; is ok.  but don't use v-strings for your module version if you plan to release it to cpan
[21:31:50] <daemon> there is another way to represent them and a tool on perlbot to convert them
[21:32:00] <daemon> simcop2387, how do you do the version conversion thing via perlbot
[21:32:28] <daemon> eval5.30: $^V
[21:32:30] <perlbot> daemon: bless( {original => "v5.30.3",qv => 1,version => [5,30,3]}, 'version' )
[21:32:41] <ether> here's a demonstration of vstrings in action, and what I think of them, all in one:  perl -CS -E'say v3232.95.3232'
[21:33:02] <daemon> v1.2.34567 -> 1.00234567
[21:33:03] <daemon> so
[21:33:18] <Grinnz> *version strings* are fine. it's the *bareword* vstrings that are bad
[21:33:33] <daemon> should be 5.0030000 ?
[21:33:41] <Grinnz> no. use v5.30.0 is fine
[21:33:53] <daemon> https://i.imgur.com/JRU2auU.png <-- apparently not
[21:33:59] <Grinnz> yes, you're using a dumb policy set
[21:34:05] <ether> at 'cruel' level
[21:34:07] <daemon> the default one
[21:34:21] <Grinnz> regexes also do not require /s or /m, that policy is even stupider
[21:34:26] <Grinnz> remove the defaults and use Perl::Critic::Community
[21:34:34] <ether> turning the level up that high is going to give you some things that are not so cut and dried
[21:34:36] <daemon> hold a mo someone told me about this before, someone made a policy 
[21:35:00] <daemon> Perl::Critic::Community ok dokey
[21:35:02] <daemon> ill give that a spin
[21:35:17] <Grinnz> anyway for your 'our $VERSION', you want to write it: 'v0.0.1';
[21:35:27] <ether> it's good to be forced to think about whether /s or m/ might be needed, but I rarely use /s, and only sometimes /m
[21:35:29] <Grinnz> the quotes are important. if you don't quote it, it's a vstring, which sucks
[21:35:43] <daemon> I see
[21:36:00] <Grinnz> but for use and require, they don't take quoted versions, so you're forced to use vstrings. it's whatever
[21:36:15] <ether> two-dotted versions can still be annoying though, and if you ever switch formats later, you can easily create a value that's smaller than a previous one by accident
[21:36:24] <Grinnz> perlbot: versions
[21:36:24] <perlbot> Grinnz: Sort::Versions is useful for handling version numbers, particularly those of non-Perl packages. | http://blogs.perl.org/users/grinnz/2018/04/a-guide-to-versions-in-perl.html
[21:36:27] <ether> I prefer simple decimals like 0.001 but YMMV
[21:36:35] <Grinnz> ^ also must be quoted
[21:36:53] <Grinnz> i don't care which you use, as long as you quote them when possible :)
[21:37:09] <daemon> I hope "perl-toolbox.lint.perlcriticProfile":  "community", is the same as theme
[21:37:19] <Grinnz> no idea
[21:37:23] <daemon> lets see!
[21:37:28] <ether> indeed. versions are strings, not numbers, even though they can be used as numbers in *some situations*
[21:37:34] <Grinnz> make sure you install it though. perlcritic themes will just run with nothing by default
[21:37:46] <daemon> already did
[21:37:58] <daemon> nope its not the same as profile, ill add is as a arg []
[21:38:09] <ether> even when checking versions, you should do eval { Module->VERSION($minimum) } rather than  if Module->VERSION < $minimum
[21:39:15] <Grinnz> see the blog post above for specifics
[21:39:32] <haarg> profile controls what rc file to use
[21:39:48] *** Joins: semigloss (~semigloss@d14-69-6-230.try.wideopenwest.com)
[21:39:51] <haarg> defaulting to ~/.perlcriticrc
[21:40:00] <haarg> you may want to configure things there instead
[21:40:30] <simcop2387> i like having project specific .perlcriticrc and telling distzilla about using it myself
[21:40:38] <daemon> yep done, does not seem to affect that cruel warning about version though
[21:40:47] <Grinnz> then it's not using it
[21:41:06] <Grinnz> community is a completely different policy theme with only a few overlaps, and that isn't one of them
[21:41:11] <simcop2387> daemon: are you doing any remote editing stuff?
[21:41:16] <daemon> yeah this is in WSL2
[21:41:21] <daemon> im editing this in the WSL2 settings
[21:41:23] <daemon> not the local
[21:42:02] <daemon> simcop2387, https://dpaste.org/5TS9
[21:42:03] <Paperbot> Link title(s): [ dpaste/5TS9 (Docker) ]
[21:42:07] <daemon> I might be configuring it wrong
[21:42:15] <daemon> sure it took me a while to get this sane last time I did it
[21:42:31] <daemon> 'useprofile' 'false'
[21:42:42] <Grinnz> it might not recognize ~ in paths
[21:43:44] <daemon> ok now I told it to use profiles the v...warning cruel thing has disappeared
[21:43:51] <daemon> but I have no warnings at all ... I doubt that
[21:45:45] <Grinnz> try "use File::Slurp;"
[21:45:52] <Grinnz> if you're using community, that should trigger
[21:46:17] <daemon> "use File::Slurp;"
[21:46:18] <daemon> err
[21:46:35] <daemon> Lint: STERN: Used module File::Slurp
[21:46:41] <Grinnz> \o/
[21:46:45] <daemon> \o/
[21:46:49] <daemon> so my code has no warnings
[21:46:51] <daemon> nice lol
[21:47:10] <Grinnz> it's mostly that the community theme doesn't warn about stupid stuff, only stuff we talk about here all the time
[21:47:42] <haarg> the default perl critic policy set is quite shit
[21:47:48] <daemon> simcop2387, not sure if you want to put this in perlbot or somewhere ... but yeah this is both perltidy & perlcritic with the community mod setup within wsl2 https://dpaste.org/7jXK
[21:47:49] <Paperbot> Link title(s): [ dpaste/7jXK (Docker) ]
[21:48:08] <daemon> might be handy for someone
[21:48:08] <haarg> so unfortunately if you want something stricter, you generally have to go through the list and make your own decisions
[21:49:01] <daemon> guess I should setup a perltidy profile next, I would like to move away from \s{4} to \s{2}
[21:49:31] <daemon> I think I recall a chat about File::Slurp, is that the one that decodes/encodes things funny
[21:49:46] <Grinnz> yeah, and its interface is terrible
[21:50:14] <daemon> should probably add a capture for Data::UUID that is bloody crap as well
[21:50:15] <Grinnz> File::Slurper and Path::Tiny have explicit functions depending whether you're reading/writing bytes or text
[21:50:23] <daemon> even though the interface is worse 'UUID' works far better
[21:50:50] <simcop2387> daemon: i sort of feel like we might want a community wiki for those kind of things
[21:51:19] <daemon> is the community quite literally this channel? or was other people in on it too
[21:51:28] <daemon> because if it was just this channel a little wiki page would be easy to do
[21:51:39] <Grinnz> mostly this channel, there's a lot of overlap with others
[21:52:20] <daemon> do we have any perl wiki's that work well at present?
[21:52:32] <Grinnz> ehhh
[21:52:43] <Grinnz> there are some CMS, but for a straight wiki i would just use mediawiki tbh
[21:52:57] <Grinnz> but maybe Yancy could do the job
[21:53:06] <daemon> I kinda preffer Xwiki but I do not really care enough to argue about it I am curious though
[21:53:11] <daemon> why mw 
[21:53:16] <Grinnz> most used, most useful
[21:53:31] <daemon> ok dokey
[21:53:35] <Grinnz> lowest barrier to getting a working site
[21:53:59] <daemon> not sure that one is 100% almost all modern wiki's are just a docker image now days
[21:54:17] <Grinnz> i mean more than just setup - usability too
[21:54:34] <Grinnz> since people use it people will know how to use it more
[21:54:55] <daemon> ok
[21:58:05] <Grinnz> the other challenge is getting people to use it consistently :)
[21:58:54] <daemon> well if its just for discussing community policy for perlcritic :P
[21:59:02] *** Joins: deadmarshal (~deadmarsh@95.38.113.39)
[21:59:05] <daemon> it might not be massively common to hit it
[21:59:50] <Grinnz> i think the idea was for more than just that :P
[22:00:08] <daemon> ah
[22:02:49] <daemon> would it still be for well the irc community
[22:02:54] <daemon> or you thinking full perl community
[22:03:12] *** Joins: kevin-oculus (~tomys@c188-149-14-10.bredband.tele2.se)
[22:06:00] *** Joins: magla (~gelignite@55d4d5f7.access.ecotel.net)
[22:08:05] *** Joins: martinus__ (~martin@96.19.201.77.rev.sfr.net)
[22:08:32] <Grinnz> i don't think there's a clear boundary there
[22:10:58] *** Quits: aquanight (~aquanight@174-126-159-166.cpe.sparklight.net) (Ping timeout: 268 seconds)
[22:11:17] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 240 seconds)
[22:13:38] *** Quits: jlenz__ (~jlenz@c-73-204-107-230.hsd1.fl.comcast.net) (Quit: Leaving)
[22:18:32] *** Quits: deadmarshal (~deadmarsh@95.38.113.39) (Ping timeout: 240 seconds)
[22:19:55] <daemon> Grinnz, well grabbed a domain quickly, will slap mediawiki up somewhere and see what everyone things, can note it down on the media wiki lol
[22:27:06] <ology> what domain name? just curious? :)
[22:27:46] <daemon> perl.place
[22:27:53] <daemon> seems nice and middle of the road
[22:28:14] <daemon> not specifically IRC and such
[22:28:36] <daemon> I was going to grab perlcommunity.com but apparently it was registered 2007
[22:28:41] <daemon> same as perl.group
[22:28:55] <Grinnz> nice, good name
[22:29:05] <simcop2387> i used to have perl.sexy, but never found a use for it
[22:29:19] <daemon> simcop2387, suprised you did not have perlbot answer on it like a live support agent :P
[22:29:53] <simcop2387> not a terrible idea to have a thing for that actually
[22:30:08] <Grinnz> simcop2387: just have it display https://metacpan.org/pod/Acme::EyeDrops#Naked-Arm-Wrestling
[22:30:09] <Paperbot> Link title(s): [ Acme::EyeDrops - Visual Programming in Perl - metacpan.org ]
[22:30:36] <simcop2387> lol
[22:30:53] <daemon> haha
[22:37:17] <daemon> oh hmm mail, I am going to have to configure my mail server so mediawiki can send out registration mails
[22:37:24] <daemon> or was we thinking github login?
[22:37:27] <daemon> or something akin
[22:40:57] *** Quits: EvanCarroll (~ecarroll@216.52.170.154) (Ping timeout: 240 seconds)
[22:43:16] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:47:44] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[22:53:37] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[22:56:16] *** Joins: tobybl (~tobybl@213.31.132.151)
[22:56:25] <Grinnz> i'm sure mediawiki has some integration we can use - auth0, github, google, etc
[23:01:10] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Quit: Leaving)
[23:01:31] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[23:02:46] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Ping timeout: 268 seconds)
[23:05:00] *** Quits: tobybl (~tobybl@213.31.132.151) (Remote host closed the connection)
[23:06:20] <daemon> ok dokey makes sense
[23:06:32] <daemon> we can always add email later when its easier to do
[23:06:38] <daemon> or if its required for some reason
[23:06:40] *** Joins: pj (~pj@ghettoforge/pj)
[23:06:47] <daemon> wonder if the domain is up yet
[23:06:50] <daemon> perlbot, resolve perl.place
[23:06:52] <perlbot> daemon: No factoid found. Did you mean one of these: [perlplan9] [perl begin] [perl-begin] [perl books] [perl-build] [perlop] [perlapi] [perlbat] [perlbot] [perlbot!]
[23:07:33] <daemon> it is
[23:07:33] <daemon> nice
[23:08:16] <daemon> now need to pick a server hmm
[23:08:31] <daemon> big BSD one is going down for upgrade in the next 2 weeks
[23:08:44] <daemon> I know where I can put it
[23:15:44] *** Parts: BarbeDeCou (uid6451@id-6451.helmsley.irccloud.com) ()
[23:18:37] *** Quits: pj (~pj@ghettoforge/pj) (Ping timeout: 240 seconds)
[23:19:31] *** Quits: superkuh (~superkuh@user/superkuh) (Excess Flood)
[23:31:40] *** Joins: pj (~pj@ghettoforge/pj)
[23:38:32] *** Joins: rgrinberg (~textual@187.223.248.37)
[23:49:32] <Mandevil> Mojo::SQLite migrations feature is something taken from elsewhere? Or did Mojo::SQLite invent that?
