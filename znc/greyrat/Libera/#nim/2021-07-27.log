[00:00:00] <FromDiscord> <treeform> I am looking at `JSON-Schema-Test-Suite` jsony only crashes on the stack one.
[00:00:09] <FromDiscord> <treeform> I guess I will add a limit then I will crash on none.
[00:08:09] <FromDiscord> <planetis> catching defect produces worse assembly why dont you write proper checks instead
[00:09:54] <FromDiscord> <planetis> where exactly parseJson throws defect any open issue?
[00:14:28] <FromDiscord> <treeform> ^ I don't understand what you mean?
[00:14:49] <FromDiscord> <treeform> Is there a way to check for stack depth or catch the stack overflow error?
[00:15:46] <FromDiscord> <ynfle (ynfle)> You can do it manually either global variable or pass in a parameter
[00:16:11] <FromDiscord> <treeform> I don't want to pass variable manually
[00:16:18] <FromDiscord> <treeform> well I want to bench the 3 approaches:
[00:16:25] <FromDiscord> <treeform> manual var
[00:16:28] <FromDiscord> <planetis> https://github.com/nim-lang/Nim/issues/17383 ?
[00:16:36] <FromDiscord> <treeform> checking allocation pointer
[00:16:43] <FromDiscord> <treeform> and catching exception
[00:20:23] <FromDiscord> <dom96> In reply to @haxscramper "Defect should be deprecate": wasn't it added post-1.0? it feels like a relatively new thing, maybe I'm still living in 0.19 land ðŸ™‚
[00:26:31] *** Quits: max22- (~maxime@2a01cb0883359800e12f44b4de2cf38c.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:30:12] <FromDiscord> <planetis> actually thenim manual has a section about it https://nim-lang.github.io/Nim/manual.html#definitions
[00:30:59] <FromDiscord> <planetis> so the oddballs are the ones catching defects not the other way around
[00:36:28] *** Quits: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f) (Ping timeout: 256 seconds)
[00:43:54] *** Joins: max22- (~maxime@2a01cb0883359800e12f44b4de2cf38c.ipv6.abo.wanadoo.fr)
[01:00:50] *** Quits: max22- (~maxime@2a01cb0883359800e12f44b4de2cf38c.ipv6.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[01:31:55] *** Joins: max22- (~maxime@2a01cb08833598001bde83a9ef6e6a84.ipv6.abo.wanadoo.fr)
[01:49:36] *** Quits: max22- (~maxime@2a01cb08833598001bde83a9ef6e6a84.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:13:11] <FromDiscord> <haxscramper> They also force programmer into a corner where they have only two ways out - catch things, or see how your program aborts itself trying to divide by zero
[02:13:48] <FromDiscord> <haxscramper> Or some library does what can effectively considered quit(1) on error
[02:14:49] <FromDiscord> <haxscramper> And it is not hard to imagine why people catch defects
[03:48:00] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[03:57:20] *** Joins: rockcavera (~rc@192.12.112.212)
[03:57:20] *** Quits: rockcavera (~rc@192.12.112.212) (Changing host)
[03:57:20] *** Joins: rockcavera (~rc@user/rockcavera)
[04:43:16] <FromDiscord> <sclee15 (Sung-Chul Lee)> is there null/void safety feature in Nim?
[04:44:50] <FromDiscord> <Elegantbeef> There is `std/wrapnils` and also experimental not nil annotation/strict not nil annotation
[04:59:22] *** Quits: rockcavera (~rc@user/rockcavera) (Read error: Connection reset by peer)
[05:00:07] *** Joins: rockcavera (~rc@192.12.112.212)
[05:00:08] *** Quits: rockcavera (~rc@192.12.112.212) (Changing host)
[05:00:08] *** Joins: rockcavera (~rc@user/rockcavera)
[05:09:04] <FromDiscord> <sclee15 (Sung-Chul Lee)> @elegantbeef\:matrix.org thank you
[05:37:06] *** Quits: aeverr (~deodex@ai126197048203.18.access-internet.ne.jp) (Ping timeout: 240 seconds)
[06:24:54] <FromDiscord> <reilly> I cannot figure out for the life of me how to access the children of a node in pragmagic/godot-nim.
[06:39:58] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:57:53] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:35] *** Joins: supakeen (~user@python/site-packages/supakeen)
[10:00:08] <fn> <11ForumUpdaterBot99> New thread by KerryC: String formatting a number with Javascript backend, see https://forum.nim-lang.org/t/8272
[10:37:16] <fn> <11ForumUpdaterBot99> New Nimble package! gnu - Godot-Nim Utility - Godot gamedev with Nim, see https://github.com/Knaque/gnu
[10:37:17] <fn> <12R2D299> 4GitHub: 7"GNU (Godot-Nim Utility) is a CLI for creating games in the Godot engine using the Nim programming language."
[11:14:38] <FromDiscord> <generic linux user> who said my talk:sunglassess:
[11:14:42] <FromDiscord> <generic linux user> (edit) "talk:sunglassess:" => "talkðŸ˜Ž"
[11:14:49] <FromDiscord> <generic linux user> (edit) "talkðŸ˜Ž" => "nameðŸ˜Ž"
[11:20:12] <FromDiscord> <arnetheduck> sent a long message, see http://ix.io/3ubs
[11:22:27] <FromDiscord> <arnetheduck> In reply to @haxscramper "And it is not": half of it is probably because although the manual explicitly says you should not rely on catching defects, people end up catching them by accident when using  a naked `except:` making the "default" / easiest code work contrary to the intent of defects
[11:25:20] <fn> <11ForumUpdaterBot99> New Nimble package! cpython - Alternative StdLib for Nim for Python targets, see https://github.com/juancarlospaco/cpython
[11:25:20] <fn> <12R2D299> 4GitHub: 7"Alternative StdLib for Nim for Python targets, hijacks Python StdLib for Nim"
[11:25:48] *** Joins: max22- (~maxime@2a01cb08833598007b8ccc588263f173.ipv6.abo.wanadoo.fr)
[11:27:16] *** Joins: neceve (~quassel@2a02:c7f:607e:d600:f762:20dd:304e:4b1f)
[11:27:35] <FromDiscord> <saem> Defects are almost never the answer. A library author is deceiving themselves into thinking they know enough information about all systems within which their library will be used and somehow they can make and end-to-end system design choice.
[11:28:22] <FromDiscord> <saem> That's putting it more kindly than it should perhaps.
[11:31:59] *** Joins: aeverr (~deodex@ai126197048203.18.access-internet.ne.jp)
[11:46:41] *** Quits: max22- (~maxime@2a01cb08833598007b8ccc588263f173.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[12:18:02] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @fn "<ForumUpdaterBot> New Nimble package!": Is it an implementation of Pythin in Nim?
[12:23:43] <FromDiscord> <generic linux user> !!!
[12:25:17] <FromDiscord> <Clonkk> What would be the point ?â†µ(@System64 ~ Flandre Scarlet)
[12:35:23] *** Joins: SebastianM (~seba@user/sebastianm)
[12:41:17] <FromDiscord> <System64 ~ Flandre Scarlet> ah isn't it for compilling to Python?â†µDidn't understood
[12:41:25] <FromDiscord> <Rika> no
[12:41:39] <FromDiscord> <Rika> its a simulation of the python stdlib i believe
[12:42:50] <FromDiscord> <Clonkk> https://github.com/juancarlospaco/cpython is a Nim API of Python stdlib through Nimpy
[12:42:52] <fn> <12R2D299> 4GitHub: 7"Alternative StdLib for Nim for Python targets, hijacks Python StdLib for Nim"
[12:43:00] <FromDiscord> <Rika> oh i see
[12:43:03] <FromDiscord> <Rika> thats strange but cool
[12:43:10] <FromDiscord> <Rika> oh i get it
[12:43:18] <FromDiscord> <Rika> its like the node library he also made
[12:43:38] <FromDiscord> <Clonkk> Exactly
[12:44:58] <FromDiscord> <Clonkk> You don't compile for Python in Nim. You run Python code in C with CPython and doing this hasb een made easy by Nimpy. Implementing Pythin in Nim would probably have little to no practical useâ†µ(@System64 ~ Flandre Scarlet)
[12:46:47] <FromDiscord> <PsychoClay> `var s = "d"â†µvar i = 20â†µlet sp: array[2, pointer] = [s.addr, i.addr]`â†µwhy doesnt this work?
[12:48:44] <FromDiscord> <Clonkk> Because i.addr is not a pointer it's `ptr int` and `s.addr` is a `ptr string`
[12:49:24] <FromDiscord> <Clonkk> You can cast `ptr X` to `pointer` if you really want to
[12:49:28] <FromDiscord> <PsychoClay> does cast[pointer](s.addr) work?
[12:49:30] <FromDiscord> <PsychoClay> ah yea
[12:49:51] <FromDiscord> <Clonkk> Can't tell you if it's a good idea or bad design though. Casting to raw pointer is usually not needed unless you interaÃ©ct with C
[12:50:01] <FromDiscord> <Rika> please note that you've arrived at "good luck have fun" territory
[12:50:02] <FromDiscord> <PsychoClay> well i ave some threading issues
[12:50:02] <FromDiscord> <Clonkk> WHat are yo utrying to do ?
[12:50:17] <FromDiscord> <Rika> what issues are you having
[12:50:30] <FromDiscord> <PsychoClay> not being able to access globals in threads
[12:50:40] <FromDiscord> <Rika> you generally shouldnt
[12:50:46] <FromDiscord> <Clonkk> That's normal
[12:50:57] <FromDiscord> <Clonkk> in NIm, thread have their own heap (that will change with arc/orc)
[12:51:10] <FromDiscord> <Clonkk> If you want to pass pointer to heap memory
[12:51:13] <FromDiscord> <Clonkk> You need to allocate a shared heap
[12:51:43] <FromDiscord> <Clonkk> `allocShared`, `deallocShared`, `freeShared`, `reallocShared` will be what you're looking for
[12:51:54] <FromDiscord> <PsychoClay> well up until now pointers have worked in combination with multiple channels
[12:52:16] <FromDiscord> <Clonkk> Do you compile with --gc\:arc ?
[12:52:20] <FromDiscord> <Rika> "worked" might just be a coincidence
[12:52:28] <FromDiscord> <PsychoClay> In reply to @Clonkk "Do you compile with": no
[12:52:32] <FromDiscord> <PsychoClay> should i?
[12:53:19] *** Quits: xet7 (~xet7@user/xet7) (Read error: Connection reset by peer)
[12:54:05] <FromDiscord> <PsychoClay> but global vars dont get gc'd right so passing a pointer to a thread should be fine right?
[12:54:10] *** Joins: xet7 (~xet7@user/xet7)
[12:54:45] <FromDiscord> <Rika> that's not the root issue of using globals (atomicity/race conditions is usually)
[12:54:55] <FromDiscord> <Clonkk> If you want to pass global pointers to object between threads use https://nim-lang.org/docs/system.html#createSharedU%2Ctypedesc
[12:54:56] <FromDiscord> <Clonkk> And you'll have to free it with https://nim-lang.org/docs/system.html#freeShared%2Cptr.T
[12:55:17] <FromDiscord> <Rika> if you want to pass things between threads maybe channels would be better?
[12:55:26] <FromDiscord> <PsychoClay> im also using channels
[12:55:48] <FromDiscord> <PsychoClay> In reply to @Clonkk "And you'll have to": can i instead of doing this, use a gc that has a shared heap?
[12:55:57] <FromDiscord> <PsychoClay> or is that somethin non related
[12:55:59] <FromDiscord> <Clonkk> Channel can't send reference for now (unless you're using devel with new chnanel implementation and --gc\:arc then it might be)â†µ(@PsychoClay)
[12:56:30] <FromDiscord> <PsychoClay> well i dont use the channels for sending pointers
[12:57:17] <FromDiscord> <Clonkk> Currently, in Nim vanilla, sharing heap memory between thread is not valid unless using specific allocated shared heap. It may work because you work on the memory address that may still exists
[12:59:42] <FromDiscord> <PsychoClay> what do you mean by "not valid" ?
[13:00:04] <FromDiscord> <Clonkk> Right so basically, each thread has its own heap okay ?
[13:00:08] <FromDiscord> <PsychoClay> yea
[13:00:20] <FromDiscord> <Clonkk> So you can't share a pointer to a thread's heap memory to another thread
[13:00:22] <FromDiscord> <Rika> it's not gonna work as intended
[13:00:27] <FromDiscord> <Rika> it "works" until it doesnt
[13:00:49] <FromDiscord> <Rika> like those bugs that you wonder why it happens only when this happens and not when this happens
[13:01:48] <FromDiscord> <Clonkk> Only way to get a shared heap is changing you gc strategey so either --gc\:boehm, --gc\:arc, --gc\:orc (and maybe --gc\:go)
[13:02:02] <FromDiscord> <PsychoClay> so if i do that it should be fine?
[13:02:18] <FromDiscord> <Clonkk> What exactly are yo utrying to accomplish
[13:02:18] <FromDiscord> <PsychoClay> to use pointers to global vars?
[13:02:54] <FromDiscord> <PsychoClay> well i have a global registry of procs
[13:03:09] *** Joins: max22- (~maxime@2a01cb088335980093c9a6d20dca7a65.ipv6.abo.wanadoo.fr)
[13:03:15] <FromDiscord> <PsychoClay> and the registry need to be accesed from a thread
[13:04:25] <FromDiscord> <PsychoClay> i just need to access a table basically
[13:06:02] <FromDiscord> <Clonkk> You can share global between threads though that's valid
[13:06:10] <FromDiscord> <Clonkk> No need to use pointers
[13:06:11] <FromDiscord> <Clonkk> What you can't do is share pointer to local heap memory
[13:06:36] <FromDiscord> <PsychoClay> yea its just globals im trying to access
[13:07:01] <FromDiscord> <Clonkk> If it's global you don't need pointer
[13:07:05] <FromDiscord> <PsychoClay> but i keeg getting gcunsafe errors if i try to directly access it?
[13:07:45] <FromDiscord> <Clonkk> Because it is
[13:07:46] <FromDiscord> <Clonkk> But oyu can access it
[13:07:46] <FromDiscord> <Clonkk> Using pointer will not change it
[13:08:00] <FromDiscord> <PsychoClay> but it doesnt compile
[13:08:23] <FromDiscord> <Clonkk> https://nim-lang.org/docs/manual.html#threads
[13:08:35] <FromDiscord> <Clonkk> So either you're sure of what you're doing and you can the gc safe away
[13:09:03] <FromDiscord> <PsychoClay> so i should use ` {.cast(gcsafe).}:` ?
[13:09:16] <FromDiscord> <Rika> personally i would advise against it
[13:09:21] <FromDiscord> <Rika> and change the pattern you are using
[13:09:42] <FromDiscord> <Rika> aka: drop the sharing heap idea and think of a different solution
[13:09:53] <FromDiscord> <Elegantbeef> the gc safe away trick is here https://nim-lang.org/docs/manual.html#threads-gc-safety
[13:09:54] <FromDiscord> <Elegantbeef> Overrides thread analysis cause you're the programmer and supposedly can be trusted, but i've yet to be given reason to agree ðŸ˜›
[13:11:18] <FromDiscord> <PsychoClay> you mean the --threadAnalysis:off switch?
[13:11:32] <FromDiscord> <Clonkk> Whenever I can I try to use a threadpool with spawn instead of explicit thread
[13:11:32] <FromDiscord> <Clonkk> I found it easier to work with
[13:11:48] <FromDiscord> <ElegantBeef> Nah talking about the cast gcsafe
[13:12:06] <FromDiscord> <ElegantBeef> The matrix bridge is awful at times with the delay
[13:12:37] <FromDiscord> <PsychoClay> oh i see it felt like they wernt reading my messages
[13:13:47] <FromDiscord> <PsychoClay> In reply to @Clonkk "Whenever I can I": in my case the thread is supposed to run for the entire lifetime of the process so i dont think threadpool is very usefull in that case
[13:13:49] <FromDiscord> <ElegantBeef> Is this a table generated at runtime ro compiile time?
[13:13:54] <FromDiscord> <ElegantBeef> (edit) "ro" => "or"
[13:13:56] <FromDiscord> <PsychoClay> runtime
[13:14:15] <FromDiscord> <ElegantBeef> Does it change when threads run?
[13:14:27] <FromDiscord> <PsychoClay> no
[13:14:50] <FromDiscord> <PsychoClay> all the values get put into it at the start of runtime
[13:15:08] <FromDiscord> <ElegantBeef> So then you could just copy them into threadvars so you wouldnt have to run gcsafe on any interaction with the global var
[13:15:45] <FromDiscord> <Clonkk> Ah true I'm on Matrixâ†µ(@ElegantBeef)
[13:15:48] <FromDiscord> <Clonkk> Sometimes there's a delay
[13:16:20] <FromDiscord> <Clonkk> Basically with threads it's sharedHeap manually allocated or copy
[13:16:29] <FromDiscord> <Clonkk> Or it's global with heap memory
[13:16:44] <FromDiscord> <ElegantBeef> Should preface that with "I'm no threading expert, just a schmuck that is somehow allowed to both own a multi threaded cpu and write code to run on it"
[13:17:37] <FromDiscord> <ElegantBeef> And the global with heap memory can have you doing the manual casting a lot assuming you like thread analysis
[13:19:00] <FromDiscord> <PsychoClay> so is there any benefit with using the cast(gcsafe) thing over useing a pointer?
[13:19:11] <FromDiscord> <ElegantBeef> you dont pass a pointer around pointlessly
[13:19:31] <FromDiscord> <PsychoClay> well its not pointless because im trying to access the table
[13:20:19] <FromDiscord> <ElegantBeef> Well like i said i'm not a thread expert, but if you're practically doing shared heap, why not you know just use shared heap and ensure you do it safely
[13:20:34] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[13:21:31] <FromDiscord> <PsychoClay> could i use the boehm gc instead of manually allocating shared heap?
[13:21:56] <FromDiscord> <ElegantBeef> Well i'd suggest orc over boehm but yea
[13:22:16] <FromDiscord> <PsychoClay> hmm ok
[13:22:34] <FromDiscord> <PsychoClay> whats the benefit of using orc over boehm
[13:22:46] <FromDiscord> <ElegantBeef> It's apart of the nim compiler
[13:23:14] <fn> <11ForumUpdaterBot99> New post on r/nim by monyarm: Does nim have an equivalent to python's max function?, see https://reddit.com/r/nim/comments/osj37g/does_nim_have_an_equivalent_to_pythons_max/
[13:23:16] <FromDiscord> <ElegantBeef> It offers compile time inserted destructors where possible
[13:25:08] <FromDiscord> <PsychoClay> ok so if i use orc pointers to globals should be fine?
[13:25:34] <FromDiscord> <ElegantBeef> Well it still has thread analysis so that doesnt magically disappear
[13:25:53] <FromDiscord> <ElegantBeef> but you can use the cast gcsafe to access global variables without any issues
[13:26:33] <FromDiscord> <ElegantBeef> So if you know for certain there will be no modifications to that table you can access it freely without any race conditions afaik
[13:27:27] <FromDiscord> <PsychoClay> ok got it, thanks for your explanation :))
[13:28:54] <FromDiscord> <Clonkk> I would wrap your registry in object, maybe a Lock to avoid race condition / concurrent access and use getter / setter to access your objects though
[13:29:06] <FromDiscord> <Clonkk> (yeah the bridge wasn't displaying edit to message)
[13:30:11] <FromDiscord> <PsychoClay> but if the table never gets modified, concurrent access doesnt matter right?
[13:30:36] <FromDiscord> <ElegantBeef> It should not, think clonkk was thinking about your sanity ðŸ˜„
[13:30:43] <FromDiscord> <PsychoClay> oh ok
[13:31:04] <FromDiscord> <Clonkk> If your table never gets modified then you will simply never call the setter ðŸ˜„
[13:31:33] <FromDiscord> <Clonkk> But if you don't create the API from the start, you'll use the object directly, and then one day you may actually need to modify something and you'll modify it directly
[13:31:45] <FromDiscord> <PsychoClay> true
[13:31:46] <FromDiscord> <ElegantBeef> Yea using a condition only on setting seems to be the smartest
[13:31:48] <FromDiscord> <Clonkk> And then you'll join madness
[13:31:52] <FromDiscord> <Clonkk> THat is multithreading
[13:32:30] <FromDiscord> <PsychoClay> i think ive already joined madness with my templates
[13:32:33] <FromDiscord> <ElegantBeef> Lol
[13:32:33] <FromDiscord> <Clonkk> Usually, you use a double lock. The WriteLock disable all reading and writing. The ReadLock enable reading but not writing ( can't modify while being accessed)
[13:33:05] <FromDiscord> <ElegantBeef> Well if you want code reviews there are occasionally eyes here ðŸ˜„
[13:34:17] <FromDiscord> <PsychoClay> well if u want to take a look https://github.com/PsychoClay/aberrant/blob/master/src/screep/scraper.nim heres a template that i made
[13:34:48] <FromDiscord> <ElegantBeef> Oh boy nested templates
[13:34:52] <FromDiscord> <PsychoClay> yea
[13:36:56] <FromDiscord> <ElegantBeef> Well inside the template i did find a lovely bug awaiting to appear ðŸ˜„
[13:37:43] <FromDiscord> <ElegantBeef> Ah nvm you arent using `os./`
[13:38:01] <FromDiscord> <ElegantBeef> Atleast hopefully not ðŸ˜„
[13:38:20] <FromDiscord> <PsychoClay> well i do
[13:38:27] <FromDiscord> <PsychoClay> idk what line ur referring to
[13:38:49] <FromDiscord> <ElegantBeef> the url joining, but as i see you define your own operator seems fine
[13:38:56] <FromDiscord> <PsychoClay> ah yea
[13:41:00] <FromDiscord> <ElegantBeef> That is quite a horrific template but hard to suggest something more reasonable presently
[13:42:15] <FromDiscord> <PsychoClay> i could just use regular procs but i really like having to write less code
[13:55:28] <FromDiscord> <Clonkk> Writing less code that is un readable isn't necessarily all the fuss
[13:56:04] <FromDiscord> <PsychoClay> well the template itself is unreadable but the code that uses the template is more readable for me
[14:40:49] <FromDiscord> <planetis> @saem I am in similar situation where I believe panicing is the right choice https://github.com/planetis-m/sync/issues/20 What's your opinion? Can a user of my library recover somehow from a deadlock? of course lock-free sync primitives like a phaser and timeouts are better choices, I am just not knowledgeable enough to make them.
[15:11:04] *** Quits: max22- (~maxime@2a01cb088335980093c9a6d20dca7a65.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[15:27:25] <FromDiscord> <zidsal> I'm not sure what the right answer is, but as an example if someone was to write a database with sync, I wouldn't want the program to panic, if someones query deadlocked I'd want the database to kill the query
[15:27:53] <FromDiscord> <zidsal> (edit) "I'm not sure what the right answer is, but as an example ... if" 03added "of recovery:â†µâ†µ"
[15:28:25] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[15:35:52] <FromDiscord> <planetis> so a wait with a timeout
[15:36:00] <FromDiscord> <planetis> how can you handle an error in the calling thread from the waiting one
[15:38:54] <FromDiscord> <planetis> actually rust has that poison bool in its locks (but from what I gather it's there bc they dont support finally? could be wrong), but it also panics in this case
[16:01:38] <arkanoid> I've been studying haskell recently, and I'm realising how many haskell concepts inspired nim
[16:03:00] <arkanoid> actually I don't see haskell in the list of languaged that inspired nim, so probably I'm just catching second-level traits
[16:03:06] <FromDiscord> <Rika> idt its haskell that inspired nim
[16:03:12] <FromDiscord> <Rika> i believe its more coincidence
[16:03:16] <FromDiscord> <Rika> or a shared ancestor
[16:03:30] <FromDiscord> <Rika> nim is mainly inspired by pascal i believe?
[16:03:41] <FromDiscord> <Rika> so if haskell and pascal are related then yes
[16:05:11] <arkanoid> do you know any other imperative programming language that is capable of tracking effects and purity in particular?
[16:05:52] *** Joins: arkurious (~arkurious@user/arkurious)
[16:06:01] <FromDiscord> <Rika> no
[16:06:11] <FromDiscord> <Rika> i think that was an "original" idea
[16:06:55] <arkanoid> I fear FP programmers don't know about this. It's a "massive" quality
[16:15:35] <FromDiscord> <Rika> well its not a priority of nim
[16:22:51] <FromDiscord> <konsumlamm> Haskell isn't tracking effects like Nim either
[16:23:36] <FromDiscord> <konsumlamm> In reply to @arkanoid "I fear FP programmers": trust me, they do know about effect systems
[16:24:07] <FromDiscord> <Rika> i think they mean about nim having an effect system
[16:24:50] <FromDiscord> <konsumlamm> in that case, i'd have to use it before judging
[16:25:00] <FromDiscord> <konsumlamm> but i doubt it's particularly stable...
[16:25:26] <FromDiscord> <Rika> it isnt
[16:25:31] <FromDiscord> <Rika> it needs more love imo
[16:25:34] <FromDiscord> <Rika> its a promising feature
[16:25:47] <FromDiscord> <konsumlamm> is there any feature of Nim that doesn't need more love?
[16:26:07] <FromDiscord> <Rika> true
[16:27:40] <mst> wonder if I could build koka-style effects using macros and the existing code
[16:27:46] <mst> could be good for a laugh
[16:28:01] <FromDiscord> <konsumlamm> tbh, FP programmers won't suddenly like Nim, because they realize that it has a half-working effect system that barely anyone uses
[16:28:27] <mst> well, no, but that's really not the point
[16:29:24] <arkanoid> I use it quite everywhere
[16:29:47] <FromDiscord> <konsumlamm> In reply to @mst "well, no, but that's": ye, i was talking to arkanoid
[16:29:48] <mst> arkanoid: exception tracking or custom tags?
[16:30:02] <FromDiscord> <konsumlamm> In reply to @arkanoid "I use it quite": well, then you're part of "barely anyone"
[16:31:30] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[16:32:13] <arkanoid> mst: both. I use {.noSideEffect, raises: [].} for intended "pure" code, then I have the "grey area" with noSideEffects but may raise specific exceptions, then there's the "lawless" part (hopefully just the main) where everything is possible
[16:33:17] <mst> ah, right, which 'func' adds implicitly
[16:33:25] <mst> course the main 'Effects' doc section doesn't mention it
[16:33:30] <arkanoid> I'm practicing to move the "grey areas" somewhere else by leveraging on Monads (Option, Either)
[16:33:32] <mst> *lolsigh*
[16:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:34] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:38:47] <arkanoid> there are not so many issues tagged Effect System https://github.com/nim-lang/Nim/issues?q=is%3Aissue+is%3Aopen+label%3A%22Effect+system%22+
[16:39:24] <FromDiscord> <konsumlamm> you call that many?
[16:40:10] <arkanoid> ?
[16:40:19] <FromDiscord> <Rika> read again
[16:40:21] <FromDiscord> <Rika> he said "not many"
[16:40:33] <FromDiscord> <konsumlamm> oh nvm
[16:42:24] <FromDiscord> <konsumlamm> it's not hard to guess why there are so few issues though
[16:43:25] <fn> <11ForumUpdaterBot99> New thread by Ingo: Build long strings, speed., see https://forum.nim-lang.org/t/8273
[16:44:09] <FromDiscord> <haxscramper> I think right now tag system is only used for eradicating some of the built-in language features from the code, such as exceptions
[16:44:10] <FromDiscord> <haxscramper> With `{.raises: [].}`
[16:45:38] <mst> right, but you can define your own tags
[16:45:39] <arkanoid> it's very useful to keep your code in shape. By moving all code into pure functions it's much easier to move the problems on the edge of the design
[16:45:44] <FromDiscord> <haxscramper> Used by users
[16:46:12] <FromDiscord> <haxscramper> And documentation hides effects and raises behind `{...}` so they are not explicitly visible
[16:46:13] <arkanoid> and tagging helps you group the edge
[16:47:15] <FromDiscord> <haxscramper> ï»¿mst\: nobody does that
[16:48:17] <FromDiscord> <haxscramper> And by "nobody" I mean - there are 11 occurencies of things derived from `of RootEffect` in all nimble packages
[16:48:36] <FromDiscord> <haxscramper> And eight of them repeat the same pair TimeEffect/IoEffect
[16:48:41] <FromDiscord> <haxscramper> Because they had stdlib cloned
[16:49:53] <arkanoid> the manual doesn't say to extend RootEffect, but just just "type MyTag = object"
[16:50:55] <FromDiscord> <haxscramper> well, good luck trying figure that out. I can check for `{.tags: []` in that case
[16:53:01] <mst> -!- mst is now known as nobody
[16:53:19] <mst> (in practice I don't have anything that -needs- that currently but it's very tempting for certain stuff)
[16:53:33] <FromDiscord> <haxscramper> yeah, it looks nice
[16:53:37] <FromDiscord> <haxscramper> I have `ShellExecEffect`
[16:56:00] <FromDiscord> <haxscramper> well, anyway, for haxdoc I will implement `@effect{ShellExecEffect} :: Docstring related to particular effect` and `@raises{ArgumentError} :: Explanation why this exception might be raised`
[16:56:01] <FromDiscord> <haxscramper> So this stuff could be documented at least
[16:56:40] <FromDiscord> <haxscramper> So end users would be aware of the effects and reasons, and not just get random "unlisted effect/exception" errors
[16:58:30] <FromDiscord> <haxscramper> in commit message
[16:58:31] <FromDiscord> <haxscramper> I actually wrote about this (why effect tracking should have better documentation support) here https://github.com/haxscramper/haxdoc/commit/9e09f7a2dc2c56fdce66102a172f1d9104270145
[17:00:30] <arkanoid> it's very easy to check for tags (please execute this in editor as is compile time) https://play.nim-lang.org/#ix=3ud2
[17:02:01] <arkanoid> I really appreciate yout effort for pushing effect tracking into nim. It's really something that programmer lands to soon or later once they struggle handling complexity
[17:03:39] <FromDiscord> <haxscramper> Yes, but do you expect user to run this fr every possible procedure they want to use?
[17:04:10] <FromDiscord> <haxscramper> Main issue is visibility and documentation
[17:04:23] <FromDiscord> <haxscramper> And if haxdoc can give you a warning like "undocumented direct raise if " it is a good thing
[17:08:21] <arkanoid> actually I'm not an haxdoc user (I'm very bad in documenting my projects, while I tend to push design to useless levels) please excuse me if I take some time to understand what's the usage, while having a quick lunch
[17:09:43] <FromDiscord> <haxscramper> Yes. Even though I personally don't want to push for purity as much as you do, but lots of the inconveniences from exceptions are based on tooling, and not on the concept of tracking itself. Like bad error messages, no way to actually track changes (https://github.com/nim-lang/Nim/pull/18541/files#diff-13795c17121ec235cc0d7a1f5df177f3a5af2e32d2cbd2d95c8b020ad8c76516R703 ) in the code (and here we see Defect again)
[17:10:07] <FromDiscord> <haxscramper> `> not an haxdoc user` considering it is not even done yet that is understandable
[17:18:31] *** Parts: jfinkhaeuser (~jfinkhaeu@user/jfinkhaeuser) ()
[17:30:26] <arkanoid> haxscramper, as a non nimdoc user, what's the new features offered by your haxdoc?
[17:32:39] <FromDiscord> <haxscramper> Works for whole project, has an API for custom tooling, export to XML/SQLite/html, supports documentation annotations like `@arg{}` that actually allow writing documentation comments with some semantic meaning, instead of just random text. Tracking of tags, effects, raises.
[17:32:59] <FromDiscord> <haxscramper> All of that is implemented in the proof-of-concept stage, but I need to finally finish hcparse
[17:32:59] <FromDiscord> <haxscramper> And then work on haxdoc
[17:33:16] <FromDiscord> <haxscramper> Also tracking changes between library versions
[17:33:36] <FromDiscord> <haxscramper> image.png https://media.discordapp.net/attachments/371759389889003532/869565686404493332/image.png
[17:35:55] <FromDiscord> <haxscramper> But most importantly, haxdoc should understand the code
[17:36:47] <FromDiscord> <haxscramper> and it also has sourcetrail integration
[17:36:57] <FromDiscord> <haxscramper> probably the only thing that is like 99%+ done
[17:37:38] <FromDiscord> <haxscramper> I'm missing IC to get information about template expansion, but aside from that
[17:38:31] <arkanoid> sci-fi question. Does it build some sort of dependency graph of function calls? I want to colorize functions
[17:39:10] *** Joins: max22- (~maxime@2a01cb0883359800942cf6d1ff66e79e.ipv6.abo.wanadoo.fr)
[17:41:07] <FromDiscord> <haxscramper> yes
[17:41:38] <FromDiscord> <haxscramper> or if it doesn't it would be a 10-line change
[17:41:38] <FromDiscord> <haxscramper> https://github.com/haxscramper/haxdoc/blob/master/src/haxdoc/docentry_types.nim#L484
[17:41:45] <FromDiscord> <haxscramper> I just tend to instantly forget details like this if I don't touch the project for over a week
[17:44:52] <arkanoid> well, this is wow
[17:45:44] <arkanoid> I mean, I'd use it. A doc tool that can let me graph my design and colorize it according to effects is what I exactly do in my mind
[17:46:25] <FromDiscord> <deech> Why is an underscore a valid identifier ,eg `let _ = "hello world"; echo _` but if you add some characters it isn't? eg. `let abc_ = ...` Is this due to to `_` unsensitivity?
[17:48:31] <FromDiscord> <haxscramper> `_` is a special case of an identifer
[17:48:32] <FromDiscord> <haxscramper> I'm surprised you can `echo` it actually
[17:49:51] <mst> it's commonly used for implicitish arguments
[17:54:25] *** Joins: rockcavera (~rc@192.12.112.213)
[17:54:25] *** Quits: rockcavera (~rc@192.12.112.213) (Changing host)
[17:54:25] *** Joins: rockcavera (~rc@user/rockcavera)
[18:08:01] *** Joins: Vladar (~Vladar@46.162.2.53)
[18:10:52] <FromDiscord> <arnetheduck> In reply to @haxscramper "Also tracking changes between": should turn this into an abi-compatibility tool ;l)
[19:09:45] <fn> <11ForumUpdaterBot99> New thread by Xhevahir: Nim earns mention in the news (unfortunately?), see https://forum.nim-lang.org/t/8274
[19:16:55] <FromDiscord> <generic linux user> really?
[19:17:06] <FromDiscord> <generic linux user> is that a good mews or a bad one?
[19:17:22] <FromDiscord> <generic linux user> :|
[19:17:23] <fn> <06Prestige99> I think publicity is good
[19:17:39] <FromDiscord> <generic linux user> atleast some ppl get to know it
[19:19:21] <FromDiscord> <generic linux user> there is go and rust there so i think we are equal
[19:19:41] <FromDiscord> <haxscramper> 0.000001 IQ antivirus vendor joins the chat
[19:19:51] <FromDiscord> <generic linux user> ðŸ—¿.
[19:19:55] <FromDiscord> <haxscramper> nImIsMalWaRe
[19:20:00] <FromDiscord> <generic linux user> naww
[19:20:28] <FromDiscord> <haxscramper> Other than regular issues with AV vendors I think more publicity is a good thing
[19:21:35] <FromDiscord> <generic linux user> they only mention nim once or twice
[20:22:04] <FromDiscord> <saem> I don't know the library well enough, but I do know nim stdlib doesn't have a kill for threads from the outside. But could the user conceivably have a sentinel?
[20:28:28] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:43:25] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:48:29] <mst> oh, right, that's not really "exotic", what that is, is that -one- person wrote -one- blog post showing some basic windows process injection stuff using nim because it made for an easier and more elegant example than C
[21:29:59] <FromDiscord> <@bracketmaster-5a708063d73408ce4> @haxscramper\:matrix.org  - what's an AV vendor?
[21:36:47] <FromDiscord> <krisppurg> Has anyone got this error? I appear to have gotten this error when I connect to gateway on `ws`. I have updated `ws` to `0.4.4`, but regardless I still get the error.â†µâ†µ(see file) https://media.discordapp.net/attachments/371759389889003532/869626888526639104/message.txt
[21:46:08] <FromDiscord> <krisppurg> nvm https://forum.nim-lang.org/t/7551#47896 solves the problem
[22:10:13] <fn> <11ForumUpdaterBot99> New thread by Chaemon: Static generics with concept, see https://forum.nim-lang.org/t/8275
[22:57:12] *** Quits: max22- (~maxime@2a01cb0883359800942cf6d1ff66e79e.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[23:20:34] <FromDiscord> <TurtleP> so something I'm wondering: is it better to raise and exception with a message or `return echo("my message")`? I rarely use exceptions and apologize if this is a stupid question
[23:34:57] <FromDiscord> <SolitudeSF> the latter is not a valid nim
[23:36:49] <FromDiscord> <TurtleP> well, that's kind of beside the point
[23:40:25] *** Joins: max22- (~maxime@2a01cb08833598007a1e380bc6c37102.ipv6.abo.wanadoo.fr)
[23:48:38] <FromDiscord> <reilly> Is it possible to mark an import as used, similarly how you can do `var x {.used.}: string`?
[23:52:12] <fn> <06Prestige99> Don't know, but why would you need that?
[23:52:51] <FromDiscord> <haxscramper> Or use `Result` if you want to have return-based value handling
[23:52:58] <FromDiscord> <haxscramper> But by default nim is geared towards exceptions
[23:52:59] <FromDiscord> <haxscramper> raise exceptions with readable messages
[23:53:36] <FromDiscord> <haxscramper> `{.push warning[Unused]:off.}`
[23:53:36] <FromDiscord> <haxscramper> `{.pop.}`
[23:54:37] <FromDiscord> <reilly> I'm working with godot-nim (see knaque/gnu), and as a part of that, I need to import scripts into stub.nim. No actual code is executed in the stub, only imports, but they have to be imported. Because there's no actual code, though, I get warned for each import. It just bugs me is all.
[23:55:06] <FromDiscord> <reilly> (Also see knaque/godot-nim-stub to see what the file system looks like)
[23:56:34] <FromDiscord> <haxscramper> push warning off
[23:58:16] <FromDiscord> <planetis> indeed a sentinel could be a solution
