[00:00:43] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:01:20] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:10:53] *** Quits: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:13:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:16:53] *** Joins: aartaka (~aartaka@217.118.83.156)
[00:16:58] *** Quits: aartaka (~aartaka@217.118.83.156) (Read error: Connection reset by peer)
[00:17:13] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:17:24] *** Quits: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:89c:4eff:febd:d995) (Ping timeout: 240 seconds)
[00:17:47] *** Joins: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:ccf9:9dff:feed:2fda)
[00:17:58] *** Quits: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:ccf9:9dff:feed:2fda) (Client Quit)
[00:23:44] <Guest74> is there a better way to check which bits of an integer are set than just looping through all the bits?
[00:25:02] <Shinmera> what do you hope to do with this info?
[00:25:05] <Guest74> i.e. is doing things like checking if chunks of it are 0 slower than just looping through the entire thing?
[00:25:17] <Guest74> checking key states.
[00:27:11] <Guest74> but, bit masks in general.
[00:27:23] <Bike> clhs logtest
[00:27:23] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_logtes.htm
[00:27:35] <Bike> might be useful
[00:27:45] <Bike> checking each bit individually is probably going to be slower than basically anything else
[00:28:54] <Guest74> I was thinking of similar for keybindings.  but setting a keymap state needs to know all that are set.
[00:29:46] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[00:29:48] <Guest74> I'm just not sure if using ldb and byte to check chunks of the integer would be faster than just looping.
[00:30:21] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[00:30:41] <Shinmera> why guess when you can test
[00:30:43] <Bike> you have a 64 bit machine. it can check 64 bits just as easily as it checks 1. but if you're doing something like taking a bitset and outputting a list of keyword flags, the arithmetic is not going to be the slow part either way
[00:31:27] <Guest74> Shinmera: that's what I usually end up doing after asking here :)
[00:32:36] <Guest74> that should probably be :(
[00:34:18] <Guest74> bike: thanks, that made me think I don't have to check at all!  The user can do whatever they want with the keystate.
[00:35:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[00:36:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[00:38:12] <Guest74> so implementations shouldn't have any problem with arrays of ub64s on 64 bit machines right?
[00:41:28] <pjb> also, you can use bit-vectors.
[00:44:24] <Guest74> I'd have to convert to a bit vector from some sort of c array.
[00:45:51] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Quit: Leaving)
[00:47:50] <aeth> Guest74: the usual byte sizes should work and if they don't they will just become T arrays so the code will still run, just not as well
[00:48:12] *** Quits: simendsjo (~user@84.211.91.241) (Ping timeout: 250 seconds)
[00:48:53] <Guest74> that would be my concern.  I wonder what's the largest bit length I can use without that happening on all implementations.
[00:48:59] <aeth> you might want to stay to (unsigned-byte 32) just to ensure that it remains a fixnum, although SBCL does optimize signed/unsigned 64-bit integers like fixnums if it doesn't leave function scope
[00:49:07] <aeth> (if it leaves the function, it has to box, just like double-float)
[00:50:02] <aeth> I usually do signed/unsigned 32 bit instead of fixnum in my types. Won't work well on 32-bit implementations, but will work. Should work perfectly on 64-bit ones
[00:50:19] <aeth> I sometimes need all 64 bits, though
[00:50:41] <Guest74> the more the better, there are 767 possible keys.
[00:51:00] *** Quits: Brucio-61 (~Brucio-3@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 240 seconds)
[00:51:11] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 256 seconds)
[00:51:26] <aeth> so, (simple-array (unsigned-byte 64) (12)) then?
[00:51:37] <Alfr> Guest74, there's a lower bound for most-positive-fixnum.
[00:51:57] <aeth> might only be optimized on SBCL, though. with (unsigned-byte 32) it should stay a fixnum on all 64-bit implementations.
[00:52:16] <aeth> Alfr: yes, but the limits are designed with 16-bit implementations in mind so they're uselessly low
[00:53:19] <Alfr> aeth, f.a. implementations, thus even those.
[00:54:04] <aeth> e.g. a long string is implementation-specific because you can only portably assume up to 1024
[00:54:23] <aeth> but writing code to work around that is pointless
[00:54:30] <aeth> which makes the limits meaningless
[00:55:06] <aeth> that particular example is http://www.lispworks.com/documentation/HyperSpec/Body/v_ar_tot.htm
[00:55:15] <aeth> array-total-size-limit
[00:55:18] <Guest74> I like 64 just because it divides up keys the best, though it still splits f keys between groups. 32 divides alphanumeric keys into two groups.
[00:56:21] <aeth> Guest74: then just write it so 64-bit SBCL can optimize the integer operations of the integers from a (simple-array (unsigned-byte 64) (*))
[00:56:35] <aeth> if other implementations don't currently optimize it, it's just a bignum until they eventually support similar optimizations
[00:56:56] *** Quits: yewscion (~yewscion@52.94.133.130) (Ping timeout: 272 seconds)
[00:57:05] <aeth> it won't fail, it'll just be slower
[00:59:32] *** Quits: molson (~molson@172-103-21-94-dynamic.midco.net) (Remote host closed the connection)
[01:00:07] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[01:01:09] <Guest74> I guess I'll just have to check it on my pi later on.
[01:02:31] *** Joins: kpoeck (~kpoeck@2a01:598:91b4:a3e5:e481:27b6:7e34:48e4)
[01:05:32] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:05:43] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:11:10] *** Joins: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer)
[01:11:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[01:11:36] *** Joins: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:7cbb:45ff:fe29:6698)
[01:12:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:12:21] *** Quits: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:7cbb:45ff:fe29:6698) (Client Quit)
[01:12:31] *** Joins: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:7cbb:45ff:fe29:6698)
[01:14:57] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[01:16:59] *** Quits: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:7cbb:45ff:fe29:6698) (Ping timeout: 252 seconds)
[01:19:15] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:23:37] *** Joins: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:94bf:a6ff:fe4b:80a0)
[01:23:44] *** Quits: dirtcastle (~dirtcastl@2409:4072:6d95:74a6:94bf:a6ff:fe4b:80a0) (Client Quit)
[01:31:36] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[01:32:13] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[01:37:55] *** Joins: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be)
[01:43:36] *** Quits: kpoeck (~kpoeck@2a01:598:91b4:a3e5:e481:27b6:7e34:48e4) (Quit: Client closed)
[01:52:03] *** Quits: cosimone (~user@93-47-229-38.ip115.fastwebnet.it) (Ping timeout: 256 seconds)
[01:57:41] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[02:16:16] *** Joins: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net)
[02:22:26] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[02:25:34] *** Quits: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net) (Quit: connection reset by purr)
[02:27:45] *** Joins: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net)
[02:37:38] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 272 seconds)
[02:43:00] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[02:46:11] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 245 seconds)
[03:08:36] *** Joins: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net)
[03:12:11] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[03:17:17] *** Quits: hashfunc133c (~user@2601:5c0:c280:7090:8c1e:afa3:b36b:39be) (Ping timeout: 240 seconds)
[03:20:41] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:20:59] *** Joins: eugercek (~user@user/eugercek)
[03:22:42] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[03:28:35] *** Quits: ebrasca (~user@librepanther.com) (Remote host closed the connection)
[03:34:14] *** Joins: s-liao (~s-liao@101.86.96.21)
[03:35:47] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[03:36:05] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Client Quit)
[03:36:05] *** Quits: kevingal (~quassel@2001:770:c0:401:a866:b37a:2932:9f63) (Ping timeout: 250 seconds)
[03:59:26] *** Joins: Inline__ (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de)
[03:59:53] *** Quits: Inline (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[04:00:48] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[04:11:54] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[04:26:37] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[04:27:49] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:28:28] *** Joins: Oladon (~olad@98.43.81.226)
[04:37:28] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[04:50:00] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[05:12:20] *** Joins: dotblank (~dotblank@47.200.198.95)
[05:12:50] *** Quits: anticomputer_ (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[05:12:59] <dotblank> Is this a good place for Autolisp questions or is there a different channel for that?
[05:13:43] <tyson2> maybe try #lisp or #lispcafe
[05:14:14] <dotblank> Thanks!
[05:23:24] *** Quits: Fare (~fare@pool-71-185-187-182.phlapa.fios.verizon.net) (Ping timeout: 240 seconds)
[05:28:38] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[05:36:24] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[05:36:46] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:38:09] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 256 seconds)
[05:54:35] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 256 seconds)
[06:02:08] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[06:13:58] *** Joins: notzmv (~zmv@user/notzmv)
[06:19:45] *** Joins: Inline (~Inline@p200300cd470c380061a83d28f03bd1ae.dip0.t-ipconnect.de)
[06:22:12] *** Quits: Inline__ (~Inline@p200300cd4710a900587aa636b2d58f82.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[06:28:26] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[06:28:43] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Read error: Connection reset by peer)
[06:29:26] *** Joins: igemnace (~ian@user/igemnace)
[06:37:05] *** Quits: s-liao (~s-liao@101.86.96.21) (Ping timeout: 256 seconds)
[06:39:10] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[06:40:25] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[06:42:16] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[06:43:03] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[06:54:12] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:03:55] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:10:39] *** Joins: s-liao (~s-liao@101.86.96.21)
[07:13:16] *** Quits: terrorjack (~terrorjac@static.3.200.12.49.clients.your-server.de) (Quit: The Lounge - https://thelounge.chat)
[07:14:08] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:26:38] *** \f is now known as buffer
[07:26:46] *** buffer is now known as \f
[07:28:22] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[07:30:20] <beach> Good morning everyone!
[07:53:54] *** Joins: user__ (~semz@user/semz)
[07:55:21] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[07:56:45] *** Quits: semz_ (~semz@user/semz) (Ping timeout: 256 seconds)
[08:00:37] *** Joins: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[08:03:10] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[08:03:38] <hashfunc107e> does CL have any standard facilities for finding the line number of a particular string in a file?
[08:03:51] <hashfunc107e> i prefer not to use any external libraries
[08:05:41] <beach> Loop using READ-LINE and a counter.
[08:06:25] <hashfunc107e> beach: ok, i considered that, but i was hoping for a better way. looks like that'll have to do! thanks
[08:07:03] <user__> If it's already loaded into memory you could also just combine SEARCH and COUNT.
[08:07:10] <user__> oh for god's sake
[08:07:12] *** user__ is now known as semz
[08:07:20] <semz> I should get a bouncer already
[08:08:45] <beach> And, yes, they excluded FIND-NUMBER-OF-LINE-IN-FILE-THAT-MATCHES-STRING from the standard.
[08:10:33] <hashfunc107e> beach: it's about time they pass that proposal haha
[08:10:50] <Josh_2> Good morning
[08:11:06] <hashfunc107e> Josh_2: gm
[08:11:43] <hashfunc107e> now i'm thinking of how to solve the problem of finding a multi-line string in a file; returning it's corresponding line number that it starts at
[08:12:58] <beach> Load the entire file into memory.  Then search for the index of the string.  Finally, count the newlines preceding that index.
[08:14:16] <hashfunc107e> beach: that is a clever strategy
[08:14:59] <hashfunc107e> i'm assuming my best bet is to use UIOP:READ-FILE-STRING for loading the file into memory
[08:16:15] <White_Flame> as a separate question, I'm speeding up some file I/O.  Replacing read-from-string with parse-integer is far faster, but what about for floats?  is there a builtin way, or maybe a lib, that converts an entire string to a fp number?
[08:16:33] <White_Flame> ...faster than read-from-string
[08:20:33] <hashfunc107e> White_Flame: i'm no expert, but the first thought that comes to mind is to somehow use CFFI for that problem
[08:21:01] <White_Flame> that would probably involve copying memory, and it's fairly expensive
[08:21:29] <White_Flame> I did that with a C union to cast floats into arrays of bytes, before I discovered my implementation's internals, and it was like 100x slower
[08:21:38] <White_Flame> (probably would be faster than read-from-string still, but whatever)
[08:22:14] <White_Flame> Since this is such a constrained case, decimal numbers from csv with no scientific notation or ignorable characters, I'm writing a manual loop across the chars while I wait :)
[08:24:40] <hashfunc107e> interesting that you're analyzing a bunch of floats haha. are you analyzing some scientific data?
[08:24:56] <White_Flame> business data
[08:26:06] <hashfunc107e> even more interesting. are floats the best type to use for the situation?
[08:27:05] <White_Flame> yes
[08:29:57] <hashfunc107e> i've never dealt with hard-floats in business software before
[08:55:44] *** Quits: dotblank (~dotblank@47.200.198.95) (Quit: Client closed)
[09:07:29] *** Joins: zacque (~zacque@1.32.81.194)
[09:11:18] <White_Flame> yeah, this is stupidly faster.  the old version spent 50% of the total time under r-f-s, now the whole thing runs in about half the time
[09:22:58] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[09:25:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:55:50] *** Joins: dirtcastle (~dirtcastl@103.43.203.228)
[09:58:05] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[10:00:25] *** Quits: jealousmonk (~user@user/jealousmonk) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 27.1))
[10:03:56] <Josh_2> Very nice White_Flame
[10:06:18] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Read error: Connection reset by peer)
[10:09:25] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[10:17:26] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[10:24:34] *** Quits: leo_song (~leo_song@user/leo-song/x-7207016) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[10:24:45] *** Joins: leo_song (~leo_song@user/leo-song/x-7207016)
[10:25:45] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 256 seconds)
[10:30:33] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[10:31:01] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[10:49:27] <hashfunc107e> is it just me or does this sound like the total opposite of what it should be: "Predicate should return true if and only if the first argument is strictly less than the second (in some appropriate sense). If the first argument is greater than or equal to the second (in the appropriate sense), then the predicate should return false."
[10:50:34] <_death> it's just you?
[10:50:35] <beach> I think it's just you.  What problem do you have with it.
[10:50:54] <Josh_2> think its just you
[10:51:44] <hashfunc107e> If the first argument is superior to the second, return false.
[10:52:09] <hashfunc107e> ^ that is so unintuitive in my opinion
[10:52:17] <beach> What part?
[10:52:21] <hashfunc107e> Rather it should be:
[10:52:28] <hashfunc107e> "If the first argument is superior to the second, return true."
[10:52:36] <beach> That's a different function.
[10:52:50] <beach> The description is that of a function such as <.
[10:54:07] <hashfunc107e> beach: ok, that makes sense now
[10:54:30] <beach> Why did it not make sense before?
[10:56:47] <hashfunc107e> My line of thought was (and still is), "If thing is superior to thing' then it's true thing is superior."
[10:56:57] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[10:57:32] <beach> So you think (< 4 3) should return true?
[10:57:45] <beach> ... because 4 is greater than 3?
[11:00:04] <hashfunc107e> beach: i think we're looking at the same thing reasoning from different foundations of thought
[11:00:48] <beach> I would like to understand your foundations of thought that made you think the description was strange.
[11:01:06] <beach> I guess it's the teacher in me that is curious.
[11:04:12] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[11:05:11] <flip214> I still have to move the operator between the operands to think such things through
[11:05:48] <_death> ∀x∀y P(x,y) ⇔ x < y
[11:06:27] <hashfunc107e> ok will do. so here's the sentence we're dealing with "Predicate should return true if and only if the first argument is strictly less than the second (in some appropriate sense). If the first argument is greater than or equal to the second (in the appropriate sense), then the predicate should return false." generally (and i can't speak for everyone on this), when i think of something as true, or greater, i think of the number
[11:06:27] <hashfunc107e> think of something as false, or lesser, i think of the number 0. therefore, when i read, "If something is Greater, return False", is sounds unintuitive to me, since that sentence reads like, "If something is Greater, return Lesser." or "If something is 1, return 0." or "If something is true, return false."
[11:07:17] <hashfunc107e> _death: yes, in terms of "∀x∀y P(x,y) ⇔ x < y" that makes sense to me
[11:08:22] <beach> hashfunc107e: So in your opinion, the function < is not a predicate, because it returns false if the first argument is greater than or equal to the second?
[11:09:13] <hashfunc107e> beach: no, i don't think that. i think a better example would have been to use > as the predicate in that sentence.
[11:09:32] <ck_> "when i think of something as true [...] i think of the number"
[11:09:37] <ck_> sounds like C
[11:09:42] <beach> But, but, that would have changes what it means.
[11:09:51] <hashfunc107e> ck_: exactly, that's where i'm coming from
[11:09:55] <ck_> but this is not C
[11:10:03] * ck_ confused
[11:10:19] <beach> s/changes/changed/
[11:10:21] <hashfunc107e> ck_: i know. but i have spent alot of time in C, and i'm trying to permanently switch to lisp
[11:10:56] <beach> hashfunc107e: Even in C, x < y is 0 when x is greater than or equal to y.
[11:11:11] <hashfunc107e> beach: isn't that what you implied earlier? "The description is that of a function such as <."
[11:11:37] <beach> hashfunc107e: Yes, are you saying they should not be allowed to describe < ?
[11:11:41] <hashfunc107e> beach: yeah, like i said, i think we're on different lines of thought right now
[11:12:24] <beach> I am also totally confused as to how you could have opinions about what predicate someone else is describing.
[11:12:54] <beach> "Please do not describe <.  Describe > instead!"
[11:13:06] <_death> it simply means the predicate should be a strict partial order
[11:13:09] <hashfunc107e> i think there is some miscommunication going on here. on both our ends
[11:13:15] <ck_> beach: well that makes sense to me! After all, > is the greater predicate
[11:13:20] <ck_> (scnr)
[11:13:56] <hashfunc107e> _death: yes, that makes sense to me
[11:15:04] <_death> > is also a strict partial order, so it can also serve as the predicate
[11:15:58] <White_Flame> maybe "return true if it should come strictly earlier in the list" would be more appropriate
[11:16:28] <White_Flame> but I don't think the sentence as-is is incorrect or misleading in any way
[11:17:07] <beach> White_Flame: That's also a different predicate.
[11:17:32] <White_Flame> how so?
[11:17:52] <beach> I don't see how < is the same as "earlier in the list".
[11:17:55] <White_Flame> fully,l "return true if X should come strictly earlier in the list than Y"
[11:18:02] <beach> I don't see a list at all in that phrase.
[11:18:05] <White_Flame> sort doesn't require <
[11:18:15] <beach> Who said something about sort?
[11:18:34] <_death> beach: the quoted text does not describe the actual < function, but any strict partial order.. so I can see how someone might not notice "in the appropriate sense" and get confused
[11:18:38] <White_Flame> oh sorry, thought I saw that up there
[11:18:38] <hashfunc107e> beach: that's the documentation description we're talking about
[11:18:39] <beach> < is a shorthand for "considered smaller".
[11:19:05] <beach> hashfunc107e: But your problem is unrelated to where the phrase is from.
[11:19:29] <White_Flame> the SORT page has extremely similar wording
[11:19:31] <White_Flame> for its predicate
[11:20:45] <hashfunc107e> beach: i think i may have miscommunicated, then. my issue is that of the sentence "Predicate should return true if and only if the first argument is strictly less than the second (in some appropriate sense). If the first argument is greater than or equal to the second (in the appropriate sense), then the predicate should return false." on the SORT documentation page
[11:21:53] <White_Flame> yeah, hence my `maybe "return true if it should come strictly earlier in the list" would be more appropriate` actually would apply to that ;)
[11:21:55] <beach> hashfunc107e: All it means is that you should give it some predicate P, and if YOU think that x is less than y in your favorite way, then (P x y) should return true.
[11:22:43] <beach> hashfunc107e: And if YOU think that x is greater than or equal to y in your favorite way, then (P x y) should return false.  And you should supply a predicate that works that way, for YOUR favorite way of considering x and y.
[11:23:28] *** Joins: Cymew (~ante@host-78-79-230-126.mobileonline.telia.com)
[11:23:48] <beach> hashfunc107e: And if you do that, SORT promises to give you a result in ascending order, according to YOUR way of comparing the elements.
[11:25:14] <White_Flame> "according to the order determined by the predicate function"
[11:25:30] <hashfunc107e> White_Flame: beach: yes, makes total sense to me now. thanks ya'll
[11:25:39] <White_Flame> doesn't actually technically specifically say that the order is smaller to larger
[11:25:40] <hashfunc107e> _death: thanks
[11:25:42] <beach> Pleasure.
[11:26:12] <beach> White_Flame: That sounds like a case for WSCL.
[11:26:17] <White_Flame> yep
[11:26:42] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[11:31:33] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[11:36:20] *** Joins: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de)
[11:39:26] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 268 seconds)
[11:40:18] *** Joins: amb007 (~a_bakic@120.151.22.93.rev.sfr.net)
[11:40:30] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[11:40:52] *** Quits: dirtcastle (~dirtcastl@103.43.203.228) (Quit: Quit)
[11:41:46] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[11:45:57] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Ping timeout: 240 seconds)
[11:46:07] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[11:47:17] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:51:48] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 272 seconds)
[11:51:58] *** Joins: s-liao (~s-liao@101.86.96.21)
[11:52:04] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[11:52:08] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:53:51] *** Quits: Cymew (~ante@host-78-79-230-126.mobileonline.telia.com) (Ping timeout: 256 seconds)
[11:55:02] *** Joins: shka (~herr@109.231.3.55)
[12:03:01] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[12:14:12] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[12:16:05] *** Joins: Cymew (~ante@h-158-174-56-13.A137.corp.bahnhof.se)
[12:29:44] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:30:03] *** Joins: dirtcastle (~dirtcastl@103.43.203.226)
[12:30:11] *** Quits: linjian (~linj@user/linj) (Quit: You have been kicked for being idle)
[12:32:11] *** Quits: OlCe (~user@amontpellier-655-1-45-169.w109-210.abo.wanadoo.fr) (Read error: Connection reset by peer)
[12:51:12] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:52:08] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:54:28] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:56:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:02:22] *** Joins: OlCe (~user@amontpellier-655-1-45-169.w109-210.abo.wanadoo.fr)
[13:03:02] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:04:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[13:28:36] *** Quits: lisp123 (~lisp123@120.154.103.52) (Read error: Connection reset by peer)
[13:29:06] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:33:01] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[13:37:33] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[13:41:00] *** Quits: Catie (~user@user/catie) (Ping timeout: 240 seconds)
[13:46:27] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[13:46:28] *** Quits: dirtcastle (~dirtcastl@103.43.203.226) (Ping timeout: 250 seconds)
[13:51:51] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl)
[14:00:37] *** Quits: d4ryus (~d4ryus@ppp-188-174-84-16.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[14:06:55] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[14:09:24] *** Quits: hashfunc107e (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[14:14:46] *** Joins: d4ryus (~d4ryus@ppp-93-104-13-17.dynamic.mnet-online.de)
[14:27:13] *** Joins: notzmv (~zmv@user/notzmv)
[14:32:03] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:35:17] *** Joins: jimka (~jimka@2a01:e0a:26a:f400:60bd:b6f6:8f7f:c783)
[14:36:05] *** Quits: jimka (~jimka@2a01:e0a:26a:f400:60bd:b6f6:8f7f:c783) (Client Quit)
[14:37:18] *** Joins: jimka (~jimka@2a01:e0a:26a:f400:60bd:b6f6:8f7f:c783)
[14:38:02] *** Quits: jimka (~jimka@2a01:e0a:26a:f400:60bd:b6f6:8f7f:c783) (Client Quit)
[14:47:47] *** Joins: morganw (~user@80.225.24.132)
[14:48:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[15:10:25] *** Joins: dirtcastle (~dirtcastl@103.43.203.225)
[15:10:25] *** Quits: dirtcastle (~dirtcastl@103.43.203.225) (Client Quit)
[15:11:23] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:20:17] <beach> One of the referees of our ELS paper wrote "This section fails to not that other code-walking libraries and AST building libraries do exist, and do provide portable wrappers for the environment functionalities".  Is this person saying that these other libraries provide their own portable versions of the CLtL2 protocol, or that they have their own protocol, or something else?
[15:20:31] <beach> s/not/note/
[15:21:44] <beach> I guess the remark is about the fact that we discuss only cl-environment among portability libraries.
[15:24:19] *** Joins: random-nick (~random-ni@87.116.167.125)
[15:27:05] <beach> I guess hu.dwim has its own protocol and implementations of it for several Common Lisp implementations.
[15:32:31] <beach> OK, so let me ask this instead.  What portable code walkers do people here know?  hu.dwim.walker is one.  Agnostic Lizard is another.  Any others?
[15:33:46] <random-nick> cl-ast?
[15:34:08] <random-nick> actually it's spelled clast http://clast.sourceforge.net/
[15:34:22] <beach> Thanks!
[15:36:30] <beach> Perfect.  It uses CLtL2 + Allegro extensions.
[15:39:32] <beach> I can't seem to clone agnostic-lizard from GitLab.
[15:39:42] *** Joins: eugercek (~user@user/eugercek)
[15:41:11] <beach> "server certificate verification failed"
[15:41:20] <beach> I don't understand what this means.
[15:42:30] <beach> Oh, wait, I have a clue...
[15:44:32] <beach> Nope.
[15:45:46] <flip214> If I have a CL source form (a LAMBDA), is there a library that code-walks and runs it to annotate each individual subform with its result?
[15:46:14] <_death> more walkers are in arnesi, iterate, screamer
[15:46:45] <beach> _death: Thanks.
[15:47:13] <attila_lendvai> beach, you probably need to update your https certificates
[15:47:57] <attila_lendvai> beach, note that hu.dwim.walker was originally arnesi. it's straight our an arnesi repo clone, strippend down and renamed in the form of darcs commits.
[15:48:37] <attila_lendvai> arnesi used to be this one monolithic package for all of segv's semi-generic CL hackings
[15:48:39] <beach> attila_lendvai: I wish I knew what it meant that I need to update my https certificates.
[15:49:08] <beach> attila_lendvai: Thanks for the information on hu.dwim.walker/arnesi.
[15:49:26] <attila_lendvai> beach, IOW, probably some ssl-certificates package on your OS needs to be updated.
[15:50:05] <beach> I followed the instructions I got from git clone, but I still can't download via https.
[15:50:28] <attila_lendvai> at the time hu.dwim.walker was new, it was the most capable walker that i knew about. but clast, and a-l sounds new to me.
[15:50:57] <random-nick> cl-cont also has an adhoc walker I think
[15:51:08] <beach> For this paper, I am just interested in the protocol(s) they use for accessing the environment.
[15:51:23] <beach> Not so much in the code walkers themselves.
[15:51:33] <beach> I noticed hu.dwim has its own.
[16:00:05] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 256 seconds)
[16:10:24] *** Quits: zacque (~zacque@1.32.81.194) (Quit: Goodbye :D)
[16:20:54] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[16:27:27] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[16:27:52] <beach> Am I reading the ITERATE code right that it can't walk MACROLET forms?
[16:30:20] <_death> yes
[16:30:34] <beach> Thanks.
[16:31:50] <_death> example (iter (for i below 5) (collect (macrolet ((m () 'i)) (m))))
[16:32:05] <beach> I see, yes.
[16:34:45] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[16:37:52] *** Joins: Bike (~Glossina@71.69.170.70)
[16:42:29] *** Joins: s-liao (~s-liao@101.86.96.21)
[16:47:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[16:52:19] <attila_lendvai> among other things, iterate also doesn't update the lexenv with the variables it introduces. i wrote a few words about it: https://github.com/hu-dwim/hu.dwim.reiterate#why
[16:52:32] <attila_lendvai> also added a readme for hu.dwim.walker
[16:55:15] *** Joins: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[16:56:19] *** Joins: eugercek (~user@user/eugercek)
[16:56:26] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 272 seconds)
[16:56:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[16:57:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:01:04] *** Quits: lisp123 (~lisp123@120.154.103.52) (*.net *.split)
[17:01:04] *** Quits: shka (~herr@109.231.3.55) (*.net *.split)
[17:01:04] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (*.net *.split)
[17:01:04] *** Quits: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net) (*.net *.split)
[17:01:04] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (*.net *.split)
[17:01:04] *** Quits: okflo (~okflo@lisa.diesenbacher.net) (*.net *.split)
[17:01:04] *** Quits: russe` (~user@cl-user.org) (*.net *.split)
[17:01:04] *** Quits: easye (~user@oxi.slack.net) (*.net *.split)
[17:01:04] *** Quits: opcode (~opcode@user/opcode) (*.net *.split)
[17:01:04] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (*.net *.split)
[17:01:04] *** Quits: derelict (derelict@user/derelict) (*.net *.split)
[17:01:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[17:01:04] *** Quits: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz) (*.net *.split)
[17:01:04] *** Quits: snits (~quassel@ip98-179-76-75.ph.ph.cox.net) (*.net *.split)
[17:01:04] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (*.net *.split)
[17:01:04] *** Quits: antoszka (sid528518@id-528518.uxbridge.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: alanz (sid110616@id-110616.uxbridge.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: borodust (~irc@user/borodust) (*.net *.split)
[17:01:04] *** Quits: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net) (*.net *.split)
[17:01:04] *** Quits: saturn2 (~visitant@user/clone-of-saturn/x-1551297) (*.net *.split)
[17:01:04] *** Quits: Andrew (Andrew@user/AndrewYu) (*.net *.split)
[17:01:04] *** Quits: EsoAlgo (~EsoAlgo@152.70.142.52) (*.net *.split)
[17:01:04] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[17:01:04] *** Quits: [smlckz] (3329f5a75b@user/smlckz) (*.net *.split)
[17:01:04] *** Quits: luis (~luis@lisp/luis) (*.net *.split)
[17:01:04] *** Quits: phadthai (~mmondor@user/phadthai) (*.net *.split)
[17:01:04] *** Quits: Fade (fade@outrider.deepsky.com) (*.net *.split)
[17:02:30] *** Joins: lisp123 (~lisp123@120.154.103.52)
[17:02:30] *** Joins: shka (~herr@109.231.3.55)
[17:02:30] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:02:30] *** Joins: Common-Lisp (~Common-Li@104-58-112-202.lightspeed.bcvloh.sbcglobal.net)
[17:02:30] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[17:02:30] *** Joins: okflo (~okflo@lisa.diesenbacher.net)
[17:02:30] *** Joins: russe` (~user@cl-user.org)
[17:02:30] *** Joins: easye (~user@oxi.slack.net)
[17:02:30] *** Joins: opcode (~opcode@user/opcode)
[17:02:30] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[17:02:30] *** Joins: derelict (derelict@user/derelict)
[17:02:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:02:30] *** Joins: thomaslewis (6e04fe5c02@mail.nobodyhasthe.biz)
[17:02:30] *** Joins: snits (~quassel@ip98-179-76-75.ph.ph.cox.net)
[17:02:30] *** Joins: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff)
[17:02:30] *** Joins: antoszka (sid528518@id-528518.uxbridge.irccloud.com)
[17:02:30] *** Joins: alanz (sid110616@id-110616.uxbridge.irccloud.com)
[17:02:30] *** Joins: Andrew (Andrew@user/AndrewYu)
[17:02:30] *** Joins: borodust (~irc@user/borodust)
[17:02:30] *** Joins: dilated_dinosaur (~dino@cpc1-bexl9-2-0-cust231.2-3.cable.virginm.net)
[17:02:30] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[17:02:30] *** Joins: EsoAlgo (~EsoAlgo@152.70.142.52)
[17:02:30] *** Joins: dstein64 (~dstein64@dannyadam.com)
[17:02:30] *** Joins: [smlckz] (3329f5a75b@user/smlckz)
[17:02:30] *** Joins: luis (~luis@lisp/luis)
[17:02:30] *** Joins: phadthai (~mmondor@user/phadthai)
[17:02:30] *** Joins: Fade (fade@outrider.deepsky.com)
[17:02:30] *** erbium.libera.chat sets mode: +o luis
[17:05:43] *** Joins: vcarvalho (~vcarvalho@bl20-114-170.dsl.telepac.pt)
[17:06:55] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[17:07:50] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[17:09:02] <vcarvalho> Hey there, does anyone have some experience with 3b/classimp? I was trying to import a gltf (.glb) asset with embedded textures and was having some trouble.
[17:15:25] <pjb> flip214: cl-stepper could be modified to do that. Note that in case of loops, a form can have multiple results.
[17:16:01] <pjb> flip214: in a way, cl-stepper does it, only the the annotation is done on the *standard-output* ;-)
[17:18:15] <flip214> pjb: thanks
[17:25:18] *** Quits: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 250 seconds)
[17:26:07] *** Joins: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[17:27:17] <beach> attila_lendvai: Thanks.  Yes, I saw that about ITERATE.
[17:56:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[18:00:52] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:07:33] *** Joins: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net)
[18:07:51] *** Quits: sabra_ (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Ping timeout: 256 seconds)
[18:10:37] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[18:11:08] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[18:13:32] *** Quits: s-liao (~s-liao@101.86.96.21) (Quit: Client closed)
[18:14:06] *** Joins: s-liao (~s-liao@101.86.96.21)
[18:14:59] *** Quits: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[18:15:16] *** Joins: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de)
[18:17:01] *** Quits: s-liao (~s-liao@101.86.96.21) (Client Quit)
[18:19:02] *** Joins: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net)
[18:22:35] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:34:07] *** Quits: sabra (~sabra@99-105-192-94.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[18:37:35] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:41:11] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[18:41:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[18:44:53] *** Quits: cpape`` (~user@2a01:4f9:c010:632d::1) (Quit: ERC (IRC client for Emacs 25.2.2))
[18:48:13] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
[18:52:58] *** Joins: cage (~cage@94-39-220-187.adsl-ull.clienti.tiscali.it)
[18:53:45] *** Quits: Cymew (~ante@h-158-174-56-13.A137.corp.bahnhof.se) (Ping timeout: 256 seconds)
[19:26:36] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[19:39:12] *** Quits: Fare (~fare@pool-72-94-152-64.phlapa.fios.verizon.net) (Ping timeout: 272 seconds)
[19:46:12] *** Quits: sander (~sander@user/sander) (Ping timeout: 240 seconds)
[19:49:16] *** Joins: sander (~sander@user/sander)
[20:05:07] *** Joins: jeosol (~jeosol@user/jeosol)
[20:10:43] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[20:12:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[20:13:14] <qhong> is there a way to do some kind of partial evaluation in SBCL?
[20:13:57] <qhong> say I have a recursive function that analyze one argument, I want all recursive call to be fully expanded if this argument is a constant
[20:14:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl)
[20:16:24] <mfiano> See #sbcl
[20:17:21] <qhong> I just happen to only care about sbcl but a portable solution is also fine
[20:17:37] <mfiano> There is none.
[20:18:33] <_death> you can use a compiler macro
[20:19:25] <qhong> _death: do I basically have to write the same definition twice using that approach?
[20:19:48] <qhong> one for defun, one for define-compiler-macro…
[20:19:56] <mfiano> Yes, with instructions on how to expand or decline to expand.
[20:20:20] <_death> if the expansion needs to look the same, sure
[20:20:24] <mfiano> Also what constitutes a constant.
[20:21:00] <mfiano> You will need EVAL if you want to treat defconstant values as constants, since the compiler macro will see a symbol in this case.
[20:21:05] <Fade> beach: weblocks uses cl-cont
[20:21:30] <beach> OK, thanks!
[20:27:30] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:29:37] <_death> qhong: there are of course libraries.. for example Partial in https://engineering.purdue.edu/~qobi/software/
[20:33:13] <mfiano> I am once again saddened by the state of available graph theory libraries, and none are very great jumping off points. I am always forced to write ad-hoc implementations of the algorithms I need. Debating whether to do that again, for the small number of algorithms I need, or to add another crappy library to the pile.
[20:36:07] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3710:7c80:9130:5abf:96b3:dc0c)
[20:38:37] *** Quits: mogan90 (~mogan90@132.140.7.93.rev.sfr.net) (Ping timeout: 240 seconds)
[20:40:28] <mfiano> My usual goto, https://github.com/eschulte/graph would have been okay, had it been 1) portable (relies on a few implementations' custom hash table test support), 2) supported more than numeric/symbolic nodes (presumably due to #1).
[20:57:17] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:04:23] <qhong> _death: Nice, thanks. I wonder if it’s a “shallow” implementation or it’s a full meta circular evaluator though, the latter is less than ideal.
[21:10:39] <pjb> You don't need eval, just symbol-value: (defconstant +foo+ 42) (symbol-value '+foo+) #| --> 42 |#
[21:39:45] *** Joins: notzmv (~zmv@user/notzmv)
[21:45:20] *** Joins: ioa (~ioa@2a01:4f8:211:1d09::)
[21:51:07] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Ping timeout: 256 seconds)
[21:51:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:56:25] *** Joins: v88m (~Xiro@213.87.152.231)
[21:57:25] *** Joins: Catie (~user@user/catie)
[22:03:49] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[22:05:53] *** Quits: vcarvalho (~vcarvalho@bl20-114-170.dsl.telepac.pt) (Quit: Client closed)
[22:06:37] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:c19d:39a5:11c7:fcb0)
[22:13:26] *** Joins: Psybur (~Psybur@mobile-166-171-56-243.mycingular.net)
[22:14:01] <Psybur> What do I have to install to get ql-dist:install-dist ?
[22:15:53] <Xach> Psybur: quicklisp
[22:15:53] *** Quits: v88m (~Xiro@213.87.152.231) (Read error: Connection reset by peer)
[22:16:18] <Xach> you can get quicklisp by downloading https://beta.quicklisp.org/quicklisp.lisp then loading it with cl:load. then follow the directions.
[22:16:32] *** Joins: jealousmonk (~user@user/jealousmonk)
[22:17:02] <Psybur> hmm i thought i had sbcl loading quicklisp by default. been a while since I busted it out
[22:17:38] <Xach> if you have quicklisp loaded, you should have a function ql-dist:install-dist.
[22:17:59] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:19:11] *** Quits: amb007 (~a_bakic@120.151.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[22:20:14] *** Joins: amb007 (~a_bakic@93.151.22.93.rev.sfr.net)
[22:21:19] *** Quits: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de) (Quit: WeeChat 3.4)
[22:21:41] <Psybur> Went through https://astraybi.wordpress.com/2015/08/02/how-to-install-slimesbclquicklisp-into-emacs/ and got quicklisp loading automatically with slime and sbcl
[22:24:04] *** Joins: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de)
[22:32:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:33:16] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:35:52] *** Quits: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:38:48] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[22:39:06] *** Joins: eugercek (~user@user/eugercek)
[22:39:44] *** Quits: eugercek (~user@user/eugercek) (Remote host closed the connection)
[22:41:48] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[22:44:50] *** Joins: igemnace (~ian@user/igemnace)
[22:58:29] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[23:00:27] *** Joins: Cena (~cena@c-107-4-204-12.hsd1.mn.comcast.net)
[23:04:09] *** Joins: Oladon (~olad@98.43.81.226)
[23:21:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:22:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:23:42] *** Joins: kpoeck (~kpoeck@2a01:598:92b1:854a:64aa:e231:1f33:858a)
[23:24:26] *** Lord_of_Life_ is now known as Lord_of_Life
[23:32:04] *** Joins: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net)
[23:32:21] *** Quits: IPmonger (~IPmonger@c-69-242-83-226.hsd1.pa.comcast.net) (Remote host closed the connection)
[23:45:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[23:48:28] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[23:49:10] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Remote host closed the connection)
[23:51:00] *** Quits: silasfox (~sbv@p200300cec71b7900525c480533030ba1.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[23:53:02] *** Joins: silasfox (~sbv@p4fe8dfb9.dip0.t-ipconnect.de)
[23:56:33] *** Joins: mogan90 (~mogan90@132.140.7.93.rev.sfr.net)
