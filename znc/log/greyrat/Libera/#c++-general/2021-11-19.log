[00:00:01] <rpav> 🤔
[00:00:01] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:00:05] <LordKalma> you have to build it yourself with your particular version of Qt and compiler
[00:00:08] <LordKalma> but after that it's fine
[00:00:19] <rpav> works with widgets?
[00:00:29] <rpav> aha
[00:00:32] <LordKalma> you also only have to build the UI once. YOu can have multiple versions of Qt by compiling just the stub to work with it
[00:00:35] <LordKalma> it does
[00:00:46] <LordKalma> it can inspect signals, slots, UI elements, a buttload of crap really
[00:01:02] <rpav> awesome thanks gonna check it out, so many times tracking down stuff comes down to "find some unique string then grep the source" :(
[00:01:54] <LordKalma> https://github.com/KDAB/GammaRay/wiki/Getting-GammaRay
[00:02:34] *** Quits: Budd (~Budd@2001:470:8d44:1::5) (Remote host closed the connection)
[00:03:06] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[00:03:14] <LordKalma> rpav, this might be a nice teaser: https://www.youtube.com/watch?v=rSLZ3r7RETw
[00:03:47] <LordKalma> (they do have a full tutorial piece)
[00:04:25] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Client Quit)
[00:04:30] <rpav> ah gonna have to get KDSME built too
[00:04:39] <rpav> cool .. yeah seems pretty straightforward so far
[00:05:17] *** Quits: Budd (~Budd@2001:470:8d44:1::5) (Remote host closed the connection)
[00:05:40] <rpav> actually maybe that's only a qml thing
[00:05:45] <LordKalma> a yes, it has like two optional dependencies
[00:06:09] <LordKalma> the state machine viewer allows you to see this: https://youtu.be/vhD1WBaRLZI?t=262 (correct time stamp)=
[00:06:38] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Remote host closed the connection)
[00:11:46] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[00:12:23] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 264 seconds)
[00:13:50] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[00:14:44] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:18:43] *** Joins: paul424 (~tom@ip-31-0-121-106.multi.internet.cyfrowypolsat.pl)
[00:21:34] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[00:26:48] <rpav> so having 20 clangd running does chew up a chunk of ram
[00:26:57] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[00:27:32] <kalven> is clangd written in electron?
[00:27:36] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:28:49] <LordKalma> hahaha no
[00:28:55] <LordKalma> but it's a ram hungry parser, that's for sure
[00:29:00] <LordKalma> rpav, 12 or 13?
[00:29:04] <LordKalma> (version, I mean)
[00:29:40] <LordKalma> clang 12 wanted GBs of ram to process https://github.com/mackron/miniaudio/blob/master/miniaudio.h (3MB)
[00:29:44] <LordKalma> clang 13 is much better
[00:30:38] <rpav> 13
[00:31:05] <rpav> yeah i was actually surprised i had so many in only a handful of gigs, this is a fair chunk of code
[00:32:12] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:32:12] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[00:32:43] <rpav> still about 8GB unaccounted-for
[00:33:00] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[00:33:04] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Quit: Leaving)
[00:34:35] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 264 seconds)
[00:35:17] <johnny> LordKalma, the funny thing about vscode and clangd is that the more errors there are, the slower it gets at handling autocomplete :(
[00:35:30] <johnny> errors and warnings actually
[00:35:47] <LordKalma> it's usually hard to try and parse an abstract source tree if your tree has errors
[00:36:03] <johnny> and actually it's errors and/or warnings sorry
[00:36:15] <johnny> even if 'ts just warnings it'l still get slower
[00:37:20] *** Quits: byku (~byku@host-92-10-130-64.as13285.net) (Quit: WeeChat 2.8)
[00:39:30] *** Quits: TheGuestMovie (~TheGuestM@173.231.114.74) (Quit: Client closed)
[00:45:34] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:46:10] *** Joins: pulse (~pulse@user/pulse)
[00:53:59] *** Joins: badone (~badone@209.132.189.136)
[00:59:07] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Quit: Leaving)
[00:59:36] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:01:36] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[01:04:30] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[01:06:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:14:50] *** Quits: Burgundy (~yomon@86.127.194.72) (Ping timeout: 256 seconds)
[01:16:36] *** Joins: Mi2305_ (~maikel@127.red-79-156-22.staticip.rima-tde.net)
[01:17:02] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:17:06] *** Quits: sysctl (~user@88.215.77.255) (Quit: Konversation terminated!)
[01:17:59] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:19:26] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:19:49] *** Joins: troller (~p@2a02:6b8:b081:7203::1:21)
[01:20:10] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:20:55] *** Joins: pinchartl (~laurent@perceval.ideasonboard.com)
[01:22:54] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[01:26:33] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[01:32:39] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[01:35:25] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[01:36:34] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:38:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:23] *** ChanServ sets mode: +v npaperbot
[01:38:25] *** Quits: paul424 (~tom@ip-31-0-121-106.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[01:41:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[01:44:40] *** Joins: manuels (~manuel@80.211.205.88)
[01:49:04] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[01:50:05] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[01:51:30] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[01:52:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:53:30] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[02:05:11] *** Quits: dld (~dld@2601:197:600:1210:9992:b3e2:af1a:fbc2) (Ping timeout: 264 seconds)
[02:07:06] *** Joins: dld (~dld@98.217.187.57)
[02:10:14] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[02:11:57] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[02:14:43] *** Joins: varioust (~varioust@108.167.11.88)
[02:18:03] *** Quits: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de) (Quit: Client closed)
[02:19:20] *** Joins: Rayke (rayke@user/rayke)
[02:19:30] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[02:19:45] *** Quits: Rayke (rayke@user/rayke) (Client Quit)
[02:20:02] *** Joins: Rayke (rayke@user/rayke)
[02:34:10] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 256 seconds)
[02:34:12] *** Quits: varioust (~varioust@108.167.11.88) (Quit: varioust)
[02:39:56] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[02:40:49] <kaichiuchu> (read my words: I am aware this is not exactly the right channel to ask this, but the proper channel is dead and some of you probably have experience)
[02:41:07] <kaichiuchu> would anyone have any insights as to why https://github.com/kaichiuchu/vm-tutorial/blob/main/src/frontend/vm_thread.cpp#L128 is happening?
[02:41:27] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[02:43:08] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[02:43:08] *** Joins: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de)
[02:43:40] *** Joins: evocatus (~evocatus@213.193.2.105)
[02:44:14] <cbreak> kaichiuchu: maybe you're flooding Qt's event loop with events that it doesn't have the time to process
[02:45:12] <kaichiuchu> the problem is the way I'm doing it appears to be the qt way (TM)
[02:45:49] <kaichiuchu> I could call QApplication::processEvents() somewhere I guess but I don't know if that'll work
[02:46:59] <cbreak> this doesn't look like the Qt way
[02:47:10] <cbreak> it looks like a tight polling loop
[02:47:33] <cbreak> the Qt way would be via events, timers or something like that
[02:48:39] *** Parts: pinchartl (~laurent@perceval.ideasonboard.com) ()
[02:49:03] <yolo_> pretty much all GUI is event-driven, you set it up, and just 'sleep' for events then react to them, anything else might be anti-pattern
[02:49:11] <cbreak> kaichiuchu: anyway, on MacOS, you could use Instruments to run a memory profiler
[02:49:20] <cbreak> I bet something similar exists on other platforms too
[02:49:22] <kaichiuchu> well I know where the memory usage is spiking
[02:49:26] <cbreak> that should tell you where you spend all your memory on
[02:49:28] <kaichiuchu> it's within the meta object signals/slots crap
[02:49:40] <cbreak> well, that's clear then: You're not processing events
[02:49:56] <cbreak> either because you're not running an event loop into which you have objects bound to
[02:50:02] <cbreak> or you just create too many events
[02:50:09] <cbreak> too fast for them to get processed
[02:50:19] <cbreak> maybe because of lock starvation or what ever...
[02:50:22] * yolo_ never liked qt, it has its own (complex) ecosystem, too much for GUI. for pure GUI, use wxwidgets or sciter
[02:51:31] <yolo_> or gtk3/4, all three are cross-platform, kind of
[02:51:48] <yolo_> any book or blog about how to write 'cross-platform c++'
[02:52:36] <cbreak> Qt's the best way still for general purpose C++ cross platform crap I think
[02:53:00] <cbreak> but it's huge, yes.
[02:53:03] <cbreak> huge and old.
[02:53:14] <yolo_> qt is also expensive if you're doing commercial, and, if you stop paying for any given year, you can no longer sell anyting made with qt, which is very odd
[02:53:59] <cbreak> nah
[02:54:07] <cbreak> you can use the LGPL Qt commercially
[02:54:59] <cbreak> if you can live with the restrictions / responsibilities
[02:55:23] <yolo_> Can I continue to distribute my application after my commercial license has expired? : No. You are not permitted to further distribute your applications.
[02:55:27] <yolo_> https://www.qt.io/faq/tag/qt-commercial-licensing
[02:55:37] <cbreak> yeah. Don't pay for Qt then
[02:55:44] <cbreak> if you start paying, you've failed.
[02:56:02] <cbreak> it's clearly a mistake to even consider paying for Qt
[02:56:05] <yolo_> if you ever bought its commercial devkit and made a product, you can not sell it if you're not continuing buying that stupid kit
[02:56:11] <cbreak> because you have to agree to these nonsense terms
[02:56:36] <cbreak> that's why I use the LGPL Qt, even for commercial work
[02:57:10] <yolo_> what tool you use to develop then
[02:57:23] <yolo_> totally vim/emacs?
[02:57:48] <cbreak> Xcode
[02:57:52] <cbreak> and VSCode
[02:58:13] <cbreak> (And VIM)
[02:58:30] <cbreak> I haven't used Qt at work in years
[02:58:44] <cbreak> but back then, cmake + Xcode worked fine
[03:00:03] <yolo_> so far for my own GUI needs I'm comparing wxwidgets vs sciter
[03:00:43] <yolo_> I do need a cross-platform GUI myself, for both desktop and embedded HMI, Qt's license on embedded is even more strict
[03:01:06] <yolo_> electron could be the option except it's an overkill and too fat, thus sciter
[03:01:18] <cbreak> I don't know that domain.
[03:01:26] <cbreak> I only used Qt for desktop systems
[03:01:56] <cbreak> all my embedded work was done bare metal, without anything even resembling a GUI (unless you count traces on an osciloscope and blinking LEDs)
[03:02:12] <johnny>  it's hard to call what they are calling embedded now "embedded"
[03:02:19] <johnny> if it can run linux, it's really weird to say it's "embedded"
[03:02:32] <cbreak> well. If it's built in into something it's embedded?
[03:02:34] <johnny> i guess it'sbetter to talk about microcontrollrs
[03:02:55] <yolo_> well you can squeeze linux and a busybox into 2MB still, so yes it can be embedded
[03:02:59] <johnny> does that make an imac embedded?
[03:03:09] <cbreak> only if you put the imac into a toaster
[03:03:20] <cbreak> or dish washer, or ... tv I guess? :/
[03:03:23] <yolo_> if it does not have a keyboard/mouse i will call it embedded
[03:03:28] <Juliu> That is where an imac belongs
[03:03:54] <cbreak> so my android Note Boox pro is an embedded device? :D
[03:04:18] <yolo_> not really, there is something called 'headless embedded android'
[03:04:23] <johnny> cbreak, somebody must be paying Qt to continue though, otherwise they wouldn't be selling licenses right? seems like if it was gonna go bust, it already wou have
[03:04:42] <yolo_> as android is more like a desktop than a typical embedded device
[03:04:42] <cbreak> johnny: I'm sure people pay for it
[03:04:50] <cbreak> I see commercial software using it quite often
[03:04:58] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:05:00] <cbreak> like Nuke, Maya, other VFX tools
[03:05:05] <johnny> ah
[03:05:22] <johnny> the support must be saving them tons of money
[03:05:25] <cbreak> I'd expect them to use a commercial license
[03:05:29] <yolo_> big guns, game vendors, virus scanners are GUI lovers, commercially
[03:05:31] <johnny> that's probably why one would pay for a commercial license
[03:06:02] <johnny> to me, i'm avoiding qt because of how freakin hostile it is to get it on windows without the online installer
[03:06:17] <johnny> and the work folks have to do to get it work on CI setups
[03:06:18] <yolo_> cross platform is such an obvious but unresolved problem still
[03:06:39] <johnny> the online instaler itself is hostile
[03:06:40] <yolo_> which is why android won, it unified the GUI layer(in parallel with ios)
[03:06:57] <cbreak> yolo_: heh
[03:07:11] <cbreak> android has like 20 GUI layers... at least that's how it looks like... not very unified :P
[03:07:20] <cbreak> probably 10 of them have been cancelled by google by now
[03:07:34] <johnny> that's why did my mobile app with ionic so i wouldn't have to think about that
[03:07:50] <johnny> it'd be fine as a webapp in general if it didn't need bluetooth
[03:08:48] <yolo_> sciter should take on Qt with crowfunding, just make it open source then profit from consulting or something else(freemium for small team, charge for big companies,etc)
[03:09:36] <yolo_> anyways it has been a painful journey for me to settle down on a GUI myself, still undecided
[03:10:13] <johnny> i still thnk i might use electron anyways for the node api integration
[03:10:14] <cbreak> big companies will not switch away from Qt.
[03:11:13] <cbreak> (not without very compelling reasons that warrant a full rewrite)
[03:11:25] <johnny> i doubt yolo_ wants them to switch away from qt. just for there to be a reasonable alternative
[03:12:21] <cbreak> I for one am happy to not have to deal with GUI stuff a lot :)
[03:15:22] *** Joins: geli (~gelignite@55d4c92e.access.ecotel.net)
[03:15:31] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:18:06] *** Quits: magla (~gelignite@55d4e1d7.access.ecotel.net) (Ping timeout: 268 seconds)
[03:20:03] *** Joins: magla (~gelignite@55d46975.access.ecotel.net)
[03:21:48] *** Quits: geli (~gelignite@55d4c92e.access.ecotel.net) (Ping timeout: 268 seconds)
[03:21:59] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[03:29:10] <yolo_> FWIW, i (again) settle down on electron, i will embrace the resource hit as its advantages outweighs its drawbacks plus it's MIT licensed. like it or not, 90% GUI are consumed on browsers these days anyway
[03:29:48] <yolo_> eletron is a browser running in its own window
[03:31:21] <yolo_> with nodejs jailbreaking out of browser-sandbox-mode
[03:31:33] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[03:32:30] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[03:32:42] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[03:34:20] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[03:36:04] <Raziel> is this bait
[03:44:37] *** Quits: troller (~p@2a02:6b8:b081:7203::1:21) (Ping timeout: 268 seconds)
[03:48:15] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[03:51:34] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[03:57:48] *** Joins: troller (~p@80.240.216.69)
[03:58:05] *** Quits: evocatus (~evocatus@213.193.2.105) (Quit: Leaving)
[04:02:59] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:05:25] *** Joins: Colt (~Colt@user/colt)
[04:07:31] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[04:10:07] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:10:23] *** Quits: magla (~gelignite@55d46975.access.ecotel.net) (Quit: Stay safe!)
[04:21:34] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[04:23:17] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:29:48] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[04:32:10] *** Joins: RamblingMad (~RamblingM@165.225.227.48)
[04:32:12] *** Quits: RamblingMad (~RamblingM@165.225.227.48) (Client Quit)
[04:34:17] *** Joins: KMan-Delux (~KMan-Delu@165.225.227.48)
[04:34:53] <KMan-Delux> any decent reflection libraries that don't require preprocessor macros?
[04:39:57] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:55:29] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[04:56:03] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[04:56:04] *** Parts: znemo (sid500529@uxbridge.irccloud.com) ()
[04:59:43] <AmR> Any one can help with this code ?
[04:59:45] <AmR> https://pastebin.com/gfahYVmN
[05:00:24] *** Quits: adeliktas (~adeliktas@200116b82203d9004c14741036ac2e75.dip.versatel-1u1.de) (Ping timeout: 256 seconds)
[05:02:17] *** Quits: wasd (~wasd@user/axis) (Remote host closed the connection)
[05:03:30] <AmR> > I try this but not work "  " > set( SQLITE3_INCLUDE_DIR "${CMAKE_CURRENT_BINARY_DIR}/Code/3rdparty/SQLite3MultipleCiphers/" CACHE STRING "" ) >     set( SQLITE3_LIBRARIES "${CMAKE_CURRENT_BINARY_DIR}/Code/3rdparty/SQLite3MultipleCiphers/libsqlite3d.a" CACHE STRING "" )
[05:08:32] <KMan-Delux> what doesn't work?
[05:09:40] <AmR> KMan-Delux: sqlite3 lib not linking with soci lib
[05:10:13] <KMan-Delux> sure, but that doesn't narrow it down whatsoever
[05:10:45] <johnny> there is a cmake channel AmR
[05:10:45] <KMan-Delux> is the include dir not getting set? is the `LIBRARIES` not getting set? what isn't working?
[05:11:21] <AmR> johnny: I try all day
[05:11:35] <johnny> that doesn't mean that you can just bring it here though
[05:11:35] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[05:12:32] <AmR> johnny: Cmake is tool to
[05:12:39] <AmR> too*
[05:12:58] <johnny> yeah in the case of cmake it's probably ok by that
[05:13:17] <johnny> glad i don't have to do cmake myself tho
[05:13:26] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[05:13:26] <AmR> :)
[05:21:42] *** Quits: AmR (~AmREiSa@41.36.24.35) (Quit: Konversation terminated!)
[05:24:44] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:25:06] *** Joins: troller (~p@2a02:6b8:b081:16::1:35)
[05:25:30] *** Joins: frost (~frost@user/frost)
[05:31:46] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 265 seconds)
[05:38:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:24] *** ChanServ sets mode: +v npaperbot
[05:42:53] *** Joins: pull (~tcz@91.150.165.88)
[05:43:57] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[05:44:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c06c:44c:596b:766c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:48:08] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[05:49:49] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[05:58:11] *** Quits: pull (~tcz@91.150.165.88) (Quit: Czesc)
[06:01:46] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[06:02:56] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[06:15:52] <smallville7123> https://gist.github.com/mgood7123/4b042a21bd849652ae1c09fc317fa11b
[06:16:02] <smallville7123> is this safe to do? https://gist.github.com/mgood7123/4b042a21bd849652ae1c09fc317fa11b *
[06:18:37] <InPhase> Seems okay, except the maintenance fragility of synchronizing an iterator and an index.
[06:19:27] <InPhase> Either push_back the td or loop over idx if you need the idx.
[06:20:59] <smallville7123> InPhase: hmm
[06:21:12] <smallville7123> im not sure what you mean
[06:22:46] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[06:25:47] *** headline_ is now known as headline
[06:29:39] *** Quits: emerent (~quassel@p200300cd572be6aeba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:30:15] *** Joins: emerent (~quassel@p200300cd571f93e8ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:33:11] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[06:41:36] <smallville7123> should i do this instead? https://gist.github.com/mgood7123/d89b265573c9764b25ad3174ba679c8d
[06:45:03] *** Joins: ferdna (~ferdna@user/ferdna)
[06:45:15] <Alipha> smallville7123: InPhase's point was that keeping vector iterators long term is fragile because if you erase elements in the vector, the iterator may now be pointing to the wrong element. Worse, inserting elements may trigger resizing, which will invalidate all iterators
[06:46:28] <Alipha> This may be a place to use std::list because operations on a std::list won't invalidate any of the std::list::iterators (unless you erase the element an iterator points to)
[06:50:58] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a community of creative supermutants at https://indiedevs.net/)
[06:51:29] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[06:53:02] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[06:55:40] <smallville7123> Alipha: and does doing `tracked_views.erase(std::remove_if(tracked_views.begin(),tracked_views.end(), pred), tracked_views.end());` avoid that issue?
[06:59:15] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[07:03:57] <Alipha> smallville7123: no. the concern--not necessarily an issue--is that you are holding onto vector iterators long term (ie, your container of std::vector<TrackingData>::iterators), and that you're apparently modifying the vectors that these iterators point into. Your solution may very well be the "best" solution, but you have to be very careful that the iterators remain valid
[07:06:29] <smallville7123> Alipha: like, if i dont use a vector of iterators and just use `tracked_views.erase(std::remove_if(tracked_views.begin(),tracked_views.end(), pred), tracked_views.end());` to remove the elements instead
[07:07:54] <Alipha> smallville7123: what's `pred`? How are you keeping track of what to remove?
[07:08:07] <smallville7123> https://gist.github.com/mgood7123/d89b265573c9764b25ad3174ba679c8d
[07:13:07] *** Joins: PJBoy (~PJBoy@user/pjboy)
[07:13:35] <Alipha> smallville7123: in your first paste, did the `iterators` vector exist only within a single function?
[07:14:25] *** Quits: KMan-Delux (~KMan-Delu@165.225.227.48) (Quit: Client closed)
[07:22:18] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 268 seconds)
[07:22:59] *** Joins: great_taste (~great_tas@190.32.235.20)
[07:26:29] <smallville7123> yes
[07:27:08] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 256 seconds)
[07:39:59] *** Quits: troller (~p@2a02:6b8:b081:16::1:35) (Ping timeout: 264 seconds)
[07:44:09] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[07:44:30] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:59:13] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[08:00:40] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Client Quit)
[08:10:32] <Alipha> smallville7123: then perhaps we're overreacting. I was under the assumption that `iterators` would be long lived and it would be difficult to keep track of all the locations that the `tracked_views` vectors could be modified and that the `iterators` would have to be appropately updated. But if `iterators` is confined to a function, then it (hopefully) would be easy to ensure that the iterators aren't
[08:10:34] <Alipha> modified
[08:11:54] *** Quits: X-Scale (~ARM@46.50.7.119) (Ping timeout: 256 seconds)
[08:12:03] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[08:13:19] *** Joins: Burgundy (~yomon@86.127.194.72)
[08:13:53] *** X-Scale` is now known as X-Scale
[08:16:53] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:18:47] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[08:19:39] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:19:59] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[08:20:12] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[08:24:20] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Client Quit)
[08:38:54] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[08:49:15] *** Quits: rnsanchez (~rnsanchez@179.233.246.221) (Ping timeout: 268 seconds)
[08:50:48] *** Joins: rnsanchez (~rnsanchez@179.233.246.221)
[08:55:18] *** Quits: Mi2305_ (~maikel@127.red-79-156-22.staticip.rima-tde.net) (Ping timeout: 260 seconds)
[09:08:48] *** Joins: Guest77 (~Guest77@2600:1700:e2a0:13f0:7108:7faf:daad:5f1f)
[09:21:28] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[09:21:54] <smallville7123> why am i getting this? https://gist.github.com/mgood7123/d730b0c963634d0b45be56a7ad4bef81
[09:22:31] <smallville7123> i get "INFO: UI: view linearLayout, it.hasNext(): false"
[09:22:51] <smallville7123> when i am meant to be getting "INFO: UI: view linearLayout, it.hasNext(): true"
[09:23:24] *** Joins: cm007magnum (~Rheanna@218.78.105.67)
[09:38:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:24] *** ChanServ sets mode: +v npaperbot
[09:43:07] *** Quits: malloy (~jimery@116.30.222.115) (Quit: WeeChat 3.0)
[09:46:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:87d:c502:a26a:7c54)
[09:51:23] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:87d:c502:a26a:7c54) (Ping timeout: 264 seconds)
[10:05:41] *** Joins: fdgds (~fdgds@178.49.152.151)
[10:07:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dcdf:18a0:e93f:35ad) (Quit: Quit)
[10:09:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:10:51] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[10:11:57] *** Quits: cm007magnum (~Rheanna@218.78.105.67) (Remote host closed the connection)
[10:12:30] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[10:12:46] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[10:17:44] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:29:30] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[10:30:56] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[11:01:35] *** Quits: cm007magnum (~Rheanna@218.78.99.237) (Remote host closed the connection)
[11:03:25] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[11:04:30] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:08:00] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 268 seconds)
[11:13:14] *** Joins: sysctl (~user@88.215.77.255)
[11:17:17] *** Quits: artok (~azo@mobile-access-bcee1d-81.dhcp.inet.fi) (Quit: drive to work)
[11:17:25] *** Joins: ambasta (~ambasta@89.46.62.147)
[11:37:21] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:39:06] *** Joins: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de)
[11:40:46] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:40:57] *** Quits: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de) (Client Quit)
[11:41:15] *** Joins: adeliktas (~adeliktas@200116b8223dbc00494bb8b9b20f75eb.dip.versatel-1u1.de)
[11:46:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:49:57] *** Joins: frost (~frost@user/frost)
[11:50:20] *** Quits: Guest77 (~Guest77@2600:1700:e2a0:13f0:7108:7faf:daad:5f1f) (Quit: Client closed)
[11:50:22] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 260 seconds)
[11:50:33] *** Joins: Guest77 (~Guest77@2600:1700:e2a0:13f0:7108:7faf:daad:5f1f)
[11:51:13] *** Quits: Guest77 (~Guest77@2600:1700:e2a0:13f0:7108:7faf:daad:5f1f) (Client Quit)
[11:52:03] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[11:54:06] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[11:55:15] *** Joins: malloy (~jimery@116.30.222.115)
[12:06:45] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:00] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[12:15:50] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 268 seconds)
[12:19:25] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[12:27:53] *** Joins: robod34 (Username@79.113.195.239)
[12:31:18] *** Joins: PJBoy (~PJBoy@user/pjboy)
[12:31:37] *** Joins: kylese (~kylese@p5dd8b8a7.dip0.t-ipconnect.de)
[12:34:48] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[12:36:00] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[12:41:35] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[12:43:05] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[12:50:03] <smallville7123> 15:51:54 smallville7123: why am i getting this? https://gist.github.com/mgood7123/d730b0c963634d0b45be56a7ad4bef81
[12:50:03] <smallville7123> 15:52:31 smallville7123: i get "INFO: UI: view linearLayout, it.hasNext(): false"
[12:50:03] <smallville7123> 15:52:51 smallville7123: when i am meant to be getting "INFO: UI: view linearLayout, it.hasNext(): true"
[12:56:27] <LordKalma> what kind of dumpster fire happened here?
[13:01:33] <PJBoy> clearly all of your touch states are NONE
[13:02:12] <LordKalma> just like your sex life since 1984
[13:02:56] <PJBoy> dang those nested ifs
[13:03:07] <PJBoy> you want &&s there
[13:03:31] <PJBoy> or better yet a function
[13:10:26] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:11:27] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:15:38] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[13:16:14] <smallville7123> LordKalma: oof
[13:18:45] <smallville7123> there
[13:19:42] <smallville7123> PJBoy: there *
[13:21:08] <smallville7123> why am i getting this? https://gist.github.com/mgood7123/d730b0c963634d0b45be56a7ad4bef81
[13:21:08] <smallville7123> i get.    "INFO: UI: view linearLayout, it.hasNext(): false"    when i am meant to be getting.    "INFO: UI: view linearLayout, it.hasNext(): true"
[13:21:33] <LordKalma> clearly because it.hasNest() is false
[13:21:46] <smallville7123> even though it previously returns true
[13:22:57] <smallville7123> why am i getting this? https://gist.github.com/mgood7123/d730b0c963634d0b45be56a7ad4bef81 i get.    "INFO: UI: view linearLayout, it.hasNext(): false"    when i am meant to be getting.    "INFO: UI: view linearLayout, it.hasNext(): true”,   even though i get “true” previously on line 14
[13:25:33] <smallville7123> i get.    "INFO: UI: view linearLayout, it.hasNext(): false" on line 66    when i am meant to be getting.    "INFO: UI: view linearLayout, it.hasNext(): true” on line 66,   even though i get “true” previously on line 14 *
[13:25:34] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[13:26:03] <smallville7123> i get.    "INFO: UI: view linearLayout, it.hasNext(): false" on line 66    when i am meant to be getting.    "INFO: UI: view linearLayout, it.hasNext(): true” on line 66,   even though i get “INFO: UI: view linearLayout, it.hasNext(): true” previously on line 14 *
[13:31:43] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[13:33:18] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[13:38:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:24] *** ChanServ sets mode: +v npaperbot
[13:44:47] <PJBoy> why would getting true previously make you expect to get true again?
[13:52:11] <smallville7123> this makes no sense ;-; https://gist.github.com/mgood7123/d730b0c963634d0b45be56a7ad4bef81    i cant see why my true is suddenly flipping to false ;-;
[13:52:50] <smallville7123> PJBoy: because it is saved in the tracking information in tracked_views
[13:56:00] * smallville7123 adds mor printf debug
[13:56:53] <smallville7123> wtf
[13:58:01] <smallville7123> https://gist.github.com/mgood7123/c56caa21cbeb20063f32ddd0ab414f43
[14:01:26] * smallville7123 litters with iteration checks
[14:04:41] <smallville7123> wtf how does this make any sense? https://gist.github.com/mgood7123/41050f3e7e931fa43078621f983b7526
[14:06:38] <PJBoy> I still don't see what doesn't make sense there
[14:14:52] *** Joins: slumfat (~slumfat@pool-173-49-248-243.phlapa.fios.verizon.net)
[14:15:40] <PJBoy> are you initialising MultiTouch::iterator::index?
[14:16:06] <slumfat> Sure he is
[14:16:13] <PJBoy> what makes you think so?
[14:20:58] *** Quits: slumfat (~slumfat@pool-173-49-248-243.phlapa.fios.verizon.net) (Quit: Connection closed)
[14:21:39] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[14:22:38] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[14:26:14] *** Joins: magla (~gelignite@55d403ec.access.ecotel.net)
[14:29:50] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:38:41] *** Quits: malloy (~jimery@116.30.222.115) (Quit: WeeChat 3.0)
[14:54:51] <LordKalma> rpav, Vue does seem interesting!
[14:55:02] <LordKalma> and the app scalfolding is really complete, damn!
[14:55:06] <LordKalma> including the router crap and etc
[15:07:54] <johnny> i liked all that part about vue, but what i like about react is the jsx..
[15:12:33] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[15:14:06] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[15:14:18] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Ping timeout: 260 seconds)
[15:19:54] *** Joins: pulse (~pulse@user/pulse)
[15:24:47] *** Joins: andreasbuhr (~quassel@p549db93c.dip0.t-ipconnect.de)
[15:29:39] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (Ping timeout: 265 seconds)
[15:29:47] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[15:36:38] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:41:10] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:42:43] *** Joins: NyB (~archon@81.6.39.62)
[15:43:56] *** Joins: troller (~p@2a00:1fa0:4a8a:6ae2:a349:6adc:7188:820f)
[15:43:59] *** Joins: Guest17 (~Guest17@wificampus-098247.grenet.fr)
[15:44:19] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[15:49:13] *** Quits: troller (~p@2a00:1fa0:4a8a:6ae2:a349:6adc:7188:820f) (Ping timeout: 268 seconds)
[15:53:46] *** Quits: Guest17 (~Guest17@wificampus-098247.grenet.fr) (Ping timeout: 256 seconds)
[16:01:30] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[16:04:31] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[16:14:36] <smallville7123> PJBoy: hmm
[16:15:33] <smallville7123> PJBoy:
[16:15:36] <smallville7123> PJBoy: yes
[16:16:42] <smallville7123> https://gist.github.com/mgood7123/18db5554fe278758cf6dedabb6e011e3
[16:19:11] *** Joins: walkr (~walkr@200.195.131.74)
[16:23:47] <LordKalma> johnny, apparently tyotu can JSX with vue...
[16:23:51] <PJBoy> bah
[16:26:28] *** Joins: troller (~p@2a02:6b8:0:51e:7e83:ddd0:4bf8:f500)
[16:27:01] <LordKalma> I'm reading the docs, and it does seem really interestijg
[16:27:16] <LordKalma> Next thing you know and I'm writing UI with neutralino.js :D
[16:27:22] <LordKalma> hahahah
[16:27:51] <smallville7123> imma go out on a limb and guess that it might be the array class i am using
[16:28:13] * smallville7123 tries with std::vector
[16:28:34] <smallville7123> in the MultiTouch class
[16:30:19] <smallville7123> and it was :(
[16:31:09] <smallville7123> must be something that std::vector does not like which messes with the array
[16:32:59] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:41:15] <smallville7123> imma just use std::vector instead
[16:41:39] * smallville7123 attempts to remove all of the logging i put
[16:43:32] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:51:32] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[17:03:24] <rpav> LordKalma: yeah it seems to work and doesn't take like 200MB of tooling, but i guess it depends on what you need
[17:04:30] <rpav> really it could get even slimmer but having some of the scaffolding is nice .. i was using https://vitejs.dev/ which makes reloading a lot faster too
[17:04:32] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[17:06:43] <rpav> smallville7123: having separate `maxSupportedTouches` vs multiTouch->data seems like a bad idea
[17:07:16] <rpav> also your iterator shouldn't be that
[17:08:01] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:08:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[17:11:11] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[17:11:51] *** Quits: troller (~p@2a02:6b8:0:51e:7e83:ddd0:4bf8:f500) (Ping timeout: 268 seconds)
[17:12:58] *** Joins: TheSchaf (~TheSchaf@pd95f12cf.dip0.t-ipconnect.de)
[17:13:35] <smallville7123> how so?
[17:13:42] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[17:14:09] <rpav> you only really need iterator = &data[0] and increment that
[17:15:34] <smallville7123> https://github.com/mgood7123/MultiTouch/blob/main/MultiTouch.cpp
[17:16:09] <smallville7123> rpav: that is not reliable
[17:16:46] <rpav> it's pretty reliable ;)
[17:17:58] <smallville7123> the iterator is provided as a means of iterating active touches in the vector since indexes are re-used in order to maintain indexing and identity
[17:18:26] <smallville7123> eg index 1 could be used or it could be unused
[17:18:35] <smallville7123> eg "recycled"
[17:20:30] <smallville7123> additionally if i where t remove maxSupportedTouches than index tracking would become much more difficult due to pushing/popping of the vector
[17:20:35] <smallville7123> to*
[17:21:43] <smallville7123> for exampel a touch could be assigned to index 9, but then 6 fingers are removed, the touches that are still active would need a fair amount of work to track this and adjust the recieved index to compensate
[17:22:03] <smallville7123> tho that is ASSUMING the index can be identified
[17:22:16] <rpav> that's sortof a different problem
[17:23:40] <smallville7123> eg what happens if index 7 is passed but the data is shifted such that an offset is set and the data that might be recieving the index, is to offset the index however the data is at the correct location as per the given index
[17:24:06] *** Joins: troller (~p@2a02:6b8:0:51e:546e:7417:4f13:22b7)
[17:25:59] <smallville7123> yea
[17:27:23] <rpav> but, your iterator is not doing anything different from the above
[17:27:43] <smallville7123> what do you mean?
[17:28:02] <rpav> in any case making a vector of touches that happened and doing a more simple iteration on that is a lot easier
[17:28:44] <rpav> include the ID in each element/pointed-to-value
[17:29:04] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:29:43] <smallville7123> what do you mean?
[17:29:58] <rpav> "active touches"
[17:30:36] <rpav> like your active touches can be a separate vector<Touch> (or vector<Touch*>), then you don't have to do complicated things
[17:31:16] <rpav> when your total element count is likely to be <=10, maintaining it is not a big computational cost
[17:31:58] <smallville7123> wouldnt that just be the same as what i currently do?
[17:33:17] <rpav> then why is your iterator anything but vector::iterator
[17:33:41] <smallville7123> because it is meant to iterate over ACTIVE touches
[17:34:10] <smallville7123> also i like java style iterators
[17:34:42] <rpav> and thus `vector<Touch> activeTouches`
[17:35:17] <rpav> "i like java style iterators" => that's nice but writing Java in C++ is a recipe for tears
[17:35:34] <rpav> various standard library things have issues with stashing iterators among other things
[17:37:32] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[17:38:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:24] *** ChanServ sets mode: +v npaperbot
[17:40:04] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[17:41:18] *** Joins: paul424 (~tom@apn-77-112-96-153.dynamic.gprs.plus.pl)
[17:43:24] <paul424> Hello , I have had a gameMap which owns a seat objects collection via vector<seat*>, now I have two gameMaps for editing purpose, and one of them is sometimes deleted . How should I share the seats collection between them ? The easiest option seems to be vector<shared_ptr<seat*>> in gameMap ... AM I on the right track ?
[17:43:30] *** Quits: Colt (~Colt@user/colt) (Quit: Leaving)
[17:43:45] <smallville7123> i dont see how that would help
[17:43:51] <smallville7123> rpav:
[17:44:00] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[17:44:19] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[17:45:12] *** Quits: walkr (~walkr@200.195.131.74) (Quit: Leaving)
[17:46:03] <rpav> then you're not doing weird more complicated machinations to get things working
[17:46:29] <paul424>  ehem who's speaking to whom ?
[17:46:38] <paul424> rpav, are you answering my quest ?  :D ?
[17:46:43] <rpav> paul424: oh sorry no
[17:47:34] <rpav> smallville7123: like n^2 iteration though to be fair assuming a max touch size of like 10 that's not going to be a huge issue, but still a bit ew
[17:48:02] <rpav> oh wait hasNext is _modifying_, so not n^2 but definitely ew
[17:48:20] <smallville7123> :)
[17:48:33] <rpav> paul424: wtf is a "seat object"
[17:49:02] <paul424> hehe a seat on which a player sits :D
[17:49:56] <rpav> unless your game is a simple game revolving entirely around seats, you should definitely not have code which has much concept of a seat, and definitely not a vector<seat*>
[17:50:13] <smallville7123> lol
[17:50:28] <paul424> might an proxy object for AI or human Player ....
[17:51:27] <smallville7123> paul424: the easiest way would be reference counting
[17:51:55] <paul424> smallville7123, aha ... but shared_ptr does this , doesn't it ?
[17:52:02] <rpav> the blind leading the blind
[17:52:24] <paul424> rpav, here : https://github.com/OpenDungeons/OpenDungeons/blob/development/source/game/Seat.h
[17:52:54] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[17:53:00] <smallville7123> eg struct Shared_seats { int ref, vector<seat*> seats; };
[17:53:10] <smallville7123> eg struct Shared_seats { int ref = 0; vector<seat*> seats; };
[17:53:32] <rpav> paul424: by "a seat" you mean "player data" by the looks
[17:53:37] <rpav> i don't see much about sitting
[17:53:43] <paul424> aha, smallville7123 thanks
[17:53:55] <paul424> rpav, it was an irony that player sits on a seat :D
[17:54:00] <rpav> what smallville7123 suggests is both horrifying and terrible
[17:54:42] <smallville7123> wait why not just make it a global variable?
[17:54:46] <paul424> whom should I listen to ? Who have more karma points here ?
[17:55:12] <rpav> karma isn't a thing here; listen to whoever ¯\_(ツ)_/¯
[17:55:55] <rpav> shared_ptr is already reference counting for an object, but note it's shared_ptr<T> not T*, and you almost certainly shouldn't be using it
[17:55:58] <smallville7123> if you are sharing seats between two worlds then how are they accessing it? is seats local to each world?
[17:56:17] <smallville7123> and is*
[17:56:29] <rpav> though there's a possibility if ownership is nondeterministic
[17:56:38] <smallville7123> or do the world's have a reference to eachother
[17:56:54] <smallville7123> eg world1.world2 and world2.world1
[17:57:12] <paul424> smallville7123, no no , it's a dirty hack to have two gamemaps
[17:57:18] <paul424> to allow this :
[17:58:00] <paul424> https://www.youtube.com/watch?v=dZCcNeGdbeg
[17:58:36] <paul424> smallville7123, so they are not local
[17:58:52] <smallville7123> if each world will ALWAYS have a seats then you probably want to make a base class that both worlds inherit and then have a static seats so that it is shared globally across all instances of the bass class
[17:59:07] <smallville7123> base*
[17:59:27] <paul424> mhm
[17:59:38] <smallville7123> tho this brings additional complexity of seat management
[17:59:55] <smallville7123> eg you dont want to unintentionally modify another world's seat
[18:00:19] <smallville7123> nor do you want to delete it if another world is using it
[18:01:07] <smallville7123> (similar to multi-thread management in a way, where each world could be thought of as a "seperate thread")
[18:01:41] *** Joins: jkaye (~jkaye@216.53.205.34)
[18:02:14] <smallville7123> tho in this case i assume the renderer is single-threaded thus you dont need to sync such as mutex's and others
[18:03:25] <smallville7123> however this largely depends on how each world is rendered, if each world is rendered sequentially, eg world1.draw(); world2.draw();     then you should not have any problem
[18:04:59] <smallville7123> however if each world can render out-of-order, eg world1.floor.draw(); world2.sky.draw(); world1.people.draw(); world2.floor.draw(); ...      then you will need to manage this like a multi-thread application (but without sync as there is no point since no two draws will occur at the same time)
[18:05:44] <smallville7123> eg world1.floor.draw() and world2.sky.draw() will not occur at the same time in a single threaded renderer
[18:07:45] <paul424> yes " nor do you want to delete it if another world is using it "
[18:08:02] <smallville7123> but as i said, if they are drawing out-of-order then you will need to manage the shared seat's more carefully since you might not know what order the seats get modified in each world
[18:08:19] <paul424> don't worry about drawing , it 's done by ogre-engine and opengl ...
[18:08:45] <smallville7123> alright
[18:09:07] <paul424> and the collections of seats are exactly the same on both world
[18:09:10] <paul424> worlds*
[18:11:11] <smallville7123> then make a sub class and have seats as a static object and then access it in each world (effectively making seats a global object except scoped to a class/namespace)
[18:11:22] <smallville7123> eg GlobalSeats::seats
[18:12:41] <smallville7123> eg seats could be in world in which both worlds are an instance of, eg World::seats
[18:13:58] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:15:18] <smallville7123> ideally somewhere that is easy to remember and access, but generally not in global space (outside of class/namespace) as to avoid conflics with libraries that may have the same named variable
[18:15:53] <smallville7123> eg to avoid conflicts with C libraries that have variables in global space
[18:16:31] <smallville7123> anyway that should help
[18:20:55] <paul424> rpav, how do you mean I certainly shouldn't use shared_ptr here  ? what do I miss ?
[18:21:14] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[18:21:29] <rpav> shared_ptr is sortof a last resort when the lifetime of the object can't be tied to something else deterministic
[18:21:46] <paul424> so what to use ? weak_ptr ?
[18:21:50] <rpav> unique_ptr
[18:21:53] <paul424> aha
[18:22:16] <rpav> note that unique_ptr and shared_ptr are _entirely_ about ownership and the lifetime of the object
[18:23:20] <rpav> you can almost always tie an object to something that won't live longer than it will, and determine that it should be cleaned up when the owning object is, and that's unique_ptr .. if you need to pass around temporary references (vs handing off ownership) then use regular T*/T&
[18:23:47] <rpav> it's usually threads or similar where it's hard and shared_ptr becomes necessary
[18:24:33] <paul424> rpav, aha thanks for tutorial :) !
[18:24:51] <paul424> as a reward you can play OpenDungeons my edition :D
[18:24:55] <rpav> paul424: are you java prior or ?
[18:25:23] <paul424> https://snapcraft.io/opendungeons-plus
[18:25:35] <paul424> rpav, my java skills are very weak
[18:25:43] <smallville7123> lol
[18:25:53] <smallville7123> :)
[18:26:08] <rpav> paul424: well, is C++ your only language or what else are you used to
[18:26:15] <smallville7123> "as a reword you get to play a game" :)
[18:26:21] <smallville7123> reward*
[18:26:29] <paul424> :D
[18:26:35] <smallville7123> :D
[18:26:36] <paul424> rpav, hmm I can code in python
[18:26:48] <rpav> what's your _primary_ familiarity
[18:26:53] <smallville7123> as a reward, you can have dinner tonight :D
[18:26:57] <paul424> rpav, my primary is c++
[18:27:10] <rpav> "would you like to play a game?" -> as long as it's not global thermonuclear war
[18:27:18] <smallville7123> lmao
[18:27:26] <rpav> paul424: oh then you should know this stuff :(
[18:27:30] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[18:27:34] <paul424> I know :(
[18:27:56] <rpav> but if you did pre-11 c++ then it's a new world (just not _that_ New World)
[18:28:07] <paul424> I have had even a nolyc quote : "I am not a newbie " ;)
[18:28:37] <rpav> yeah that seems clear
[18:31:29] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[18:34:25] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:36:21] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:2c29:7076:9399:3f2e) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:36:45] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:36:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:7816:2c69:3dcc:933a)
[18:41:15] *** Quits: sysctl (~user@88.215.77.255) (Remote host closed the connection)
[18:41:39] *** Joins: sysctl (~user@88.215.77.255)
[18:52:14] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[18:52:40] *** Quits: sysctl (~user@88.215.77.255) (Remote host closed the connection)
[18:53:04] *** Joins: sysctl (~user@88.215.77.255)
[18:56:04] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[18:56:12] *** Quits: mitch0 (~mitch@84-236-12-229.pool.digikabel.hu) (Ping timeout: 256 seconds)
[18:56:26] *** Quits: baltazar (~baltazar@84-236-12-229.pool.digikabel.hu) (Ping timeout: 260 seconds)
[18:56:27] *** Joins: NiD27 (~nid27@49.205.151.232)
[18:57:51] *** Joins: mitch0 (~mitch@91-82-172-24.pool.digikabel.hu)
[18:57:59] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:58:02] *** Joins: baltazar (~baltazar@91-82-172-24.pool.digikabel.hu)
[19:02:52] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[19:03:39] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 250 seconds)
[19:04:43] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:05:31] <paul424> I DOn't want to necropost the discussion, but the way of unique_ptr seems unfeasible : having two gamemaps each having vector<unique_ptr<Seat>> , then in the destructor of a gamemap one would have void GameMap::clearSeats(){    for (Seat* seat : mSeats)    {        delete seat;    }    mSeats.clear();}
[19:06:35] *** Quits: jkaye (~jkaye@216.53.205.34) (Remote host closed the connection)
[19:06:46] <paul424> hmm it seems  I should create a base class and then inherit from it : one for the seat collection owner , one for the seat collecion user
[19:07:00] *** Joins: jkaye (~jkaye@216.53.205.34)
[19:07:03] <paul424> in case I should avoid shared_ptr for all cost
[19:08:54] <paul424> hmm or shift the ownership of mSeats to some longer lived object
[19:16:14] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[19:17:55] *** Joins: AmR (~AmREiSa@41.36.24.35)
[19:19:06] *** Joins: cart_man (~rynot@host-78-144-126-49.as13285.net)
[19:19:20] <paul424> Does shifting the ownership up , to the owner of gameMap makes sense ?
[19:19:24] <paul424> brb
[19:19:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:20:27] *** Quits: fdgds (~fdgds@178.49.152.151) (Quit: Client closed)
[19:20:28] *** Quits: NiD27 (~nid27@49.205.151.232) (Quit: Leaving)
[19:21:35] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[19:23:45] <Alipha> paul424: note that the whole point of unique_ptr is that you don't have to use delete
[19:24:05] <Alipha> paul424: and shifting the ownership up probably makes sense
[19:24:22] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[19:25:36] <paul424> Alipha, oki thanks
[19:27:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3089:13e1:8fcb:f777)
[19:29:48] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:33:54] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3089:13e1:8fcb:f777) (Quit: Quit)
[19:33:56] *** Quits: paul424 (~tom@apn-77-112-96-153.dynamic.gprs.plus.pl) (Quit: Leaving)
[19:34:17] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:3089:13e1:8fcb:f777)
[19:38:07] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:39:42] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 265 seconds)
[19:44:10] *** Quits: jkaye (~jkaye@216.53.205.34) (Ping timeout: 268 seconds)
[19:47:41] *** Quits: cart_man (~rynot@host-78-144-126-49.as13285.net) (Quit: Konversation terminated!)
[19:56:31] <imMute> the mSeats.clear() isn't necessary either.  the std::vector destructor effectively does that
[20:02:35] <rpav> but unique_ptr<vector<Seat*>> _would_ require using delete (i'm not sure the exact intent of "shift ownership up")
[20:02:57] <rpav> that ^ seems like a silly thing though so probably not what was intended
[20:02:59] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[20:04:06] <rpav> also don't overlook the value of a value container, but if you want to pass or store pointers of them, this might be a good time to use deque<Seat>
[20:05:42] *** Joins: Chucky (~irc@user/pronhub)
[20:05:57] * rpav sees way too much unnecessary pointer usage ;/
[20:06:18] * Haohmaru points rpav to a new direction
[20:06:46] <rpav> Haohmaru: multidimensional pointers 🤔
[20:07:31] <Haohmaru> multidimensional vectors of multidimentional pointers to pointers to pointers
[20:08:41] <rpav> pointers orbiting a pointer star
[20:09:17] *** Quits: adeliktas (~adeliktas@200116b8223dbc00494bb8b9b20f75eb.dip.versatel-1u1.de) (Quit: Client closed)
[20:11:28] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[20:14:11] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[20:16:23] <fruitypunk> imaginary pointers
[20:16:35] <fruitypunk> hmm my irc client is weird
[20:17:21] <Haohmaru> which one?
[20:18:12] *** Joins: great_taste (~great_tas@190.32.235.20)
[20:21:19] *** Joins: Juliu_ (~Juliu@ip4d16fa3d.dynamic.kabel-deutschland.de)
[20:21:26] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[20:22:21] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:23:38] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:3089:13e1:8fcb:f777) (Ping timeout: 268 seconds)
[20:29:20] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:30:50] <rpav> Haohmaru: well, maybe it's the end
[20:31:27] <Haohmaru> of what?
[20:31:43] <rpav> i guess that was never clear
[20:32:09] <rpav> it should have definitely been the first, though
[20:36:05] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 264 seconds)
[20:46:03] *** Quits: Juliu_ (~Juliu@ip4d16fa3d.dynamic.kabel-deutschland.de) (Quit: Quit)
[20:51:50] <LordKalma> rpav, https://i.gyazo.com/30d764252d2a1ef5c35a1198c70197f9.png
[20:52:40] *** Joins: X-Scale` (~ARM@83.223.248.137)
[20:52:57] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 256 seconds)
[20:53:50] <Alipha> that's not c++
[20:54:37] *** X-Scale` is now known as X-Scale
[20:54:46] <LordKalma> hahah indeed
[20:55:01] <LordKalma> could be with those web-like app UI toolkits
[21:00:01] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[21:00:47] *** Joins: xkuru (~xkuru@user/xkuru)
[21:01:37] <rpav> yeah this is the point at which tiny wasm blobs of c++ would be neat for some things but i haven't really looked into it, and i know you need a chunk of JS glue ;/
[21:01:37] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[21:02:05] <rpav> i mean like depending on what you're doing .. probably would be primarily webgl or rendered gui in that case
[21:02:15] <rpav> but cool
[21:03:45] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[21:05:39] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[21:06:01] *** Joins: paul424 (~tom@ip-31-0-123-63.multi.internet.cyfrowypolsat.pl)
[21:07:32] <LordKalma> I don't understand how you make content narrower with bootstrap hahaha
[21:09:42] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:21:17] *** Joins: adeliktas (~adeliktas@2001:16b8:223d:bc00:494b:b8b9:b20f:75eb)
[21:26:09] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Remote host closed the connection)
[21:29:23] *** Joins: pulse (~pulse@user/pulse)
[21:32:54] *** Quits: great_taste (~great_tas@190.32.235.20) (Quit: Client closed)
[21:36:50] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[21:38:17] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:24] *** ChanServ sets mode: +v npaperbot
[21:44:53] *** Quits: Chucky (~irc@user/pronhub) (Quit: Chucky)
[21:49:42] <paul424> ehem I have mSeats(make_shared<std::vector<Seat*>>(std::vector<Seat*>())), how do I make it to run
[21:50:03] <paul424> void GameMap::clearSeats(){    for (Seat* seat : getSeats())    {        delete seat;    }    mSeats.get()->clear();} on delete ?
[21:51:20] <kalven> but why
[21:51:36] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[21:51:48] <imMute> paul424: if the vector owns the Seats, use unique_ptr instead of a bare pointer.  if it doesn't own them, then it shouldn't delete them.
[21:52:34] <Alipha> paul424: a std::shared_ptr<std::vector<Seat*>> is probably a bad idea. it was suggested to use std::vector<std::unique_ptr<Seat>>
[21:53:17] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[21:53:28] <Alipha> or *possibly* use std::vector<std::shared_ptr<Seat>>
[21:53:31] <paul424> aha but I need to share it between two gameMaps of which EACH should have std::vector<Seat*>
[21:53:47] <paul424> Alipha, my translator to paulish :D
[21:54:06] <imMute> paul424: std::shared_ptr<std::vector<std::unique_ptr<Seat>>> then
[21:54:29] <imMute> or what Alipha said - depending on if the vector itself is shared or just some of the Seats
[21:55:54] <paul424> imMute, oki thanks
[21:56:15] <Alipha> so both GameMaps have the same players ("seats")?
[21:56:24] <paul424> sure
[21:56:26] <paul424> :D
[21:56:45] <paul424> I showed to you it's only for such small tiny bit which would hover in editor mode
[21:57:02] <paul424> and Seats for example code the ownership , and sometimes the tiles color
[21:57:09] <paul424> wait
[21:57:14] <Alipha> instead of std::shared_ptr<std::vector<std::unique_ptr<Seat>>>, you may consider moving the ownership of the std::vector<std::unique_ptr<Seat>> "up" to the owner of the GameMaps
[21:58:07] <paul424> https://www.youtube.com/watch?v=dZCcNeGdbeg here the second part , it's for such copy and paste ....
[21:59:30] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[22:00:31] <paul424>  is this now clear what I do need it for ? :D
[22:02:44] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[22:05:06] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:d1f8:80ae:52cc:d3f)
[22:10:18] *** Quits: rb (~augh@theguntretort.com) (Quit: ZNC - https://znc.in)
[22:10:37] *** Joins: rwb (~augh@theguntretort.com)
[22:20:15] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Ping timeout: 256 seconds)
[22:20:23] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[22:28:44] <paul424> hmm when converting a loop to use     for (std::unique_ptr<Seat> seat : seats) I get
[22:29:06] <paul424> error: use of deleted function ‘std::unique_ptr<_Tp, _Dp>::unique_ptr(const std::unique_ptr<_Tp, _Dp>&) [with _Tp = Seat; _Dp = std::default_delete<Seat>]’  391 |         for(std::unique_ptr<Seat> seat : mGameMap->getSeats())
[22:29:28] <hnOsmium0001[m]> use std::unique_ptr<Seat>& (or const reference)
[22:29:43] <paul424> ahh sure
[22:29:46] <hnOsmium0001[m]> for-range with a value type tries to copy elements from the container, which you can't do on unique_ptr, obviously
[22:31:58] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[22:32:05] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:7883:4458:4520:f986)
[22:32:06] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:7883:4458:4520:f986) (Changing host)
[22:32:06] *** Joins: skapata (~Skapata@user/skapata)
[22:35:25] *** Joins: jehelset (~jeh@ti0005q162-7332.bb.online.no)
[22:37:35] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[22:38:06] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:39:18] <rpav> for(auto&& seat : seats)
[22:40:35] <paul424> but still I have DOZENS of places where I need to change from Seat* to unique_ptr<Seat>/ I think I am past the halfway through ...
[22:40:44] <rpav> you shouldn't be
[22:40:59] <rpav> if one place owns it, that's the only place you need unique_ptr
[22:41:11] <rpav> otherwise you should be passing raw pointers for non-ownership-transfer cases
[22:41:28] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[22:41:50] *** Joins: great_taste (~great_tas@190.32.235.20)
[22:41:53] <paul424> like the loops : from     for (Seat* seat : gameMap->getSeats()) to for(unique_ptr<Seat>& seat : .... )
[22:41:55] <paul424> no no ?
[22:42:19] <Alipha> paul424: use `auto&` more ;-)
[22:42:32] <rpav> better auto&& as it's "always correct"
[22:42:57] <rpav> e.g. if something actually returns a temp value
[22:43:29] <MaddHatter> bit of a long shot, but has anybody here done much with Visual Studio 2022 yet? In particular, with Boost and Spirit? I'm seeing some pretty odd compiler errors about invalid suffix literals in boost template code that isn't using suffix literals.
[22:43:56] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[22:44:31] <Alipha> GampeMap::getSeats could have been changed to return some kind of "view" object which would act like a container of Seat*... but that's probably more work than just changing all your Seat* to unique_ptr<Seat>&
[22:45:09] <MaddHatter> It's probably not even a visual studio 2022 thing come to think of it because I see the same errors in vs2019. So something with Boost, probably (this is 1.78).
[22:47:18] *** Quits: troller (~p@2a02:6b8:0:51e:546e:7417:4f13:22b7) (Ping timeout: 268 seconds)
[22:52:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:b564:6599:abb6:8026)
[22:54:14] *** Joins: meator (~meator@user/meator)
[22:55:11] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:10:02] *** Joins: blackhole (~blackhole@2601:600:9f80:2aa0:3855:415c:dd77:5de8)
[23:10:24] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[23:15:17] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:16:10] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[23:23:43] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[23:25:16] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:26:38] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[23:28:12] *** Joins: EdFletcher (~PKD@user/edfletcher)
[23:28:48] *** Joins: Colt (~Colt@user/colt)
[23:30:03] <cq-work> In C++, a class with default member initializers wasn't considered an aggregate. Was there a way to initialize such an object without creating an explicit constructor since aggregate initialization isn't possible?
[23:30:07] *** Quits: EdFletcher (~PKD@user/edfletcher) (Client Quit)
[23:30:40] <cq-work> In C++11*
[23:31:32] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[23:33:09] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[23:36:29] *** Quits: jehelset (~jeh@ti0005q162-7332.bb.online.no) (Remote host closed the connection)
[23:37:47] *** Joins: nkatte (~nkatte@2804:14c:7980:8c85::bde6)
[23:38:16] *** Quits: nkatte (~nkatte@2804:14c:7980:8c85::bde6) (Remote host closed the connection)
[23:45:00] <AmR> Any one have time can look at this code And give me review for it ? https://github.com/midjji/convenient_multithreaded_qt_gui
[23:48:27] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Remote host closed the connection)
[23:50:48] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
