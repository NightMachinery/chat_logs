[00:00:39] *** Quits: Lycurgus (~juan@cpe-45-46-140-49.buffalo.res.rr.com) (Quit: Exeunt)
[00:07:59] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:12:12] *** Quits: karlosz (~karlosz@router.cloyne.org) (Ping timeout: 245 seconds)
[00:15:10] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f4a8:187b:951a:2344) (Remote host closed the connection)
[00:19:07] <Josh_2> Currently I am storing bits and bobs of information into their own files on the file system, which are periodically saved and loaded on application startup, I am just wondering if there is a library to make this a bit more seamless?
[00:19:20] <Josh_2> Right now everything I save except one thing is just a lisp form
[00:19:59] <jmercouris> Josh_2: cl prevalence
[00:20:18] <Josh_2> I think that is more than I need
[00:20:42] *** Quits: ircseeker3 (~nodebot@108.62.52.153) (Ping timeout: 256 seconds)
[00:21:02] <jmercouris> Josh_2: then I don't understand your question
[00:21:08] <jmercouris> you can also use the data storage library from Nyxt
[00:21:50] <Josh_2> I think Shinmera has a library that does what I am thinking of, but I can't find it on his github
[00:22:06] *** Joins: gaqwas (~john@dynamic-077-004-093-153.77.4.pool.telefonica.de)
[00:22:06] <jmercouris> I mean CL prevalence is perfect for storing SEXP
[00:22:07] *** Quits: gaqwas (~john@dynamic-077-004-093-153.77.4.pool.telefonica.de) (Remote host closed the connection)
[00:22:10] <jmercouris> easy to serialize
[00:22:29] *** Joins: gaqwas (~john@dynamic-077-004-093-153.77.4.pool.telefonica.de)
[00:23:12] <jcowan> SQLite is generally good at this kind of thing, and is written to be extremely robust against file corrption.
[00:23:58] <Shinmera> Colleen: tell Josh_2 look up ubiquitous
[00:24:02] <Colleen> Josh_2: About ubiquitous https://shinmera.github.io/ubiquitous#about_ubiquitous
[00:24:19] <moon-child> as postgres, sqlite has an excellent persistence layer, but its data model is not commensurate with lisp's object graphs, so if you want to store arbitrary objects you will have a hard time
[00:24:26] <moon-child> (though of course you can use it for blob storage)
[00:24:31] <Josh_2> Thats the one, thanks Shinmera
[00:25:35] <jmercouris> man the amount of libraries Shinmera has written is just absurd
[00:25:50] <Shinmera> It is :(
[00:26:33] <moon-child> (aside: sqlite is surprisingly large.  It's maybe 15-20% the size of postgres, which I found surprising)
[00:27:11] <lotuseater> Shinmera: I'm impressed by that too :)
[00:27:15] <Josh_2> I think ubiquitous will be perfect for storing various access keys
[00:27:24] <Josh_2> better than having them in source like I do now :joy:
[00:33:27] *** Quits: Skyfire (~pyon@user/pyon) (Ping timeout: 245 seconds)
[00:34:05] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:35:33] *** Joins: Skyfire (~pyon@user/pyon)
[00:36:24] *** Joins: tfeb (~tfb@88.98.95.237)
[00:38:34] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[00:38:39] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[00:38:56] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[00:42:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[00:53:58] *** Joins: dsk (~dsk@user/dsk)
[00:55:41] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[00:57:15] <nirnam> what are the recomended choice for parallel computing that work across implementation?
[00:58:13] <phoe> lparallel
[00:58:22] <phoe> swank-crew
[00:58:26] <shka> nirnam: BT for the pthreads style of API, lparallel for higher level stuff
[00:58:47] <shka> and i can't stress enough how useful lparallel has been for me
[00:58:53] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[00:59:35] <phoe> lfarm
[01:00:14] <lotuseater> nirnam: or for concurrency things with software transactional memory there is STMX
[01:00:16] <nirnam> seemed like lparallel get alot of love, I'll try these based on support I can get when thing goes south
[01:00:54] <lotuseater> phoe: what does swank-crew offer?
[01:03:50] <shka> use swank with your crew?
[01:04:14] <Bike> based on the readme, it's to let you cajole remote machines into doing work.
[01:04:21] <Bike> the "swank" part is that it uses the swank protocol for it
[01:04:28] <lotuseater> oh it's for distributed computing :)
[01:04:41] <shka> should be called swank-leash
[01:04:53] <shka> :-)
[01:06:22] <nirnam> clustering? sounds fun I wish I had more than one machine
[01:06:37] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:06:53] <lotuseater> nirnam: or a bunch a raspis
[01:07:45] <lotuseater> when talking to non lisp things for such things zeromq is also great
[01:08:00] <nirnam> would lisp doing well on it tho? I knows that sbcl can compile to arm but I've nothing to try it on
[01:08:48] <lotuseater> yes it runs on arm too like ccl for example
[01:18:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[01:21:16] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:25:53] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[01:29:45] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 248 seconds)
[01:30:04] *** Joins: ahc (~ahc@121.98.229.241)
[01:30:37] *** Quits: zagura (~zagura@user/zagura) (Quit: Meh...)
[01:39:52] *** Joins: zagura (~zagura@user/zagura)
[01:47:50] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[01:52:07] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:53:41] *** Joins: amb007 (~a_bakic@109.245.227.26)
[01:54:44] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[01:55:01] *** Joins: lisp123 (~lisp123@45.130.83.200)
[01:58:20] *** Quits: amb007 (~a_bakic@109.245.227.26) (Read error: Connection reset by peer)
[01:58:29] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[01:58:29] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[01:58:50] *** Quits: pve (~pve@188-67-205-112.bb.dnainternet.fi) (Quit: leaving)
[02:00:14] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[02:01:06] <mason> phoe: I just ordered your book from my local book shop. If I like it I might ask you to send me a pair of autographed parentheses.
[02:01:24] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:01:25] <phoe> mason: hope it serves you well!
[02:01:49] <mason> Gives me a chance to support my local book shop, so it's already a win.
[02:03:36] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[02:12:27] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:15:08] *** Quits: taiju (~taiju@240b:253:ec40:2400:7d70:b78b:4932:3d5a) (Ping timeout: 268 seconds)
[02:15:09] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[02:16:40] *** Quits: djuber (~user@65.79.128.64) (Remote host closed the connection)
[02:16:45] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[02:19:52] *** Quits: sander (~sander@user/sander) (Ping timeout: 268 seconds)
[02:24:17] *** Joins: sander (~sander@user/sander)
[02:34:56] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[02:37:30] *** Joins: lisp123 (~lisp123@45.130.83.200)
[02:38:01] *** Quits: gaqwas (~john@dynamic-077-004-093-153.77.4.pool.telefonica.de) (Ping timeout: 248 seconds)
[02:39:24] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 272 seconds)
[02:41:26] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Ping timeout: 268 seconds)
[02:42:44] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[02:44:59] *** Quits: NotThatRPG (~NotThatRP@162-219-230-90.fttp.usinternet.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:54:01] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 248 seconds)
[03:08:18] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:f064:e8e7:95bb:fe9a)
[03:08:19] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:f064:e8e7:95bb:fe9a) (Read error: Connection reset by peer)
[03:08:58] *** Quits: andreyorst (~andreyors@2.92.124.61) (Ping timeout: 250 seconds)
[03:09:23] *** Joins: andreyorst (~andreyors@2.92.124.61)
[03:10:22] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[03:11:04] *** Quits: frgo (~frgo@p200300deef181d00e13f7bdeb1305ddd.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:11:21] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[03:11:31] *** Joins: frgo (~frgo@p200300deef181d00b51d11aabf3c221f.dip0.t-ipconnect.de)
[03:14:10] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 272 seconds)
[03:17:05] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Read error: Connection reset by peer)
[03:17:52] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:18:34] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Ping timeout: 258 seconds)
[03:18:47] *** Joins: edgar-rft (~edgar-rft@109.193.249.223)
[03:19:04] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[03:23:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:23:52] *** Quits: luna-is-here (~quassel@2a02:908:f761:2a3c::a) (Ping timeout: 245 seconds)
[03:24:03] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[03:24:08] *** Joins: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de)
[03:27:12] *** Joins: karlosz (~karlosz@router.cloyne.org)
[03:28:09] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 248 seconds)
[03:54:13] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[03:54:40] *** Quits: luna-is-here (~quassel@ip-95-223-59-176.hsi16.unitymediagroup.de) (Read error: Connection reset by peer)
[03:54:49] *** Quits: edgar-rft (~edgar-rft@109.193.249.223) (Ping timeout: 248 seconds)
[03:55:12] *** Joins: luna-is-here (~quassel@2a02:908:f761:2a3c::a)
[03:55:17] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[03:57:42] *** Joins: pegaso (~reis-r@177.107.24.157)
[03:57:56] *** Quits: pegaso (~reis-r@177.107.24.157) (Client Quit)
[03:59:08] *** Quits: random-nick (~random-ni@87.116.177.228) (Ping timeout: 268 seconds)
[04:00:38] *** Joins: ahc (~ahc@121.98.229.241)
[04:01:17] *** Joins: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de)
[04:06:31] *** Quits: copec (~copec@home.unaen.org) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:11:36] *** Joins: tfeb (~tfb@88.98.95.237)
[04:12:23] *** Quits: karlosz (~karlosz@router.cloyne.org) (Quit: karlosz)
[04:13:59] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[04:31:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[04:31:58] *** Joins: srhm (~ascii@user/srhm)
[04:51:35] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[04:52:00] *** Joins: srhm (~ascii@user/srhm)
[05:00:41] *** Joins: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5)
[05:09:39] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[05:20:01] *** Joins: jon89 (~jon89@24-233-185-117.miami.fl.bluestreamcable.net)
[05:27:57] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[05:29:11] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:29:28] *** Joins: srhm (~ascii@user/srhm)
[05:29:57] *** Joins: montxero (~user@149.167.149.74)
[05:31:04] *** Joins: pillton (~user@2405:b000:703:2::34:248)
[05:37:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[05:39:01] *** Quits: montxero (~user@149.167.149.74) (Read error: No route to host)
[05:42:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[05:42:40] *** Joins: srhm (~ascii@user/srhm)
[05:48:06] *** Quits: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de) (Quit: ERC (IRC client for Emacs 27.2))
[05:54:07] *** Quits: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5) (Quit: Leaving)
[06:01:15] *** Quits: nirnam (~nirnam@1.46.13.87) (Ping timeout: 268 seconds)
[06:10:31] *** Joins: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5)
[06:13:26] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:13:48] *** Joins: srhm (~ascii@user/srhm)
[06:18:52] *** Joins: akoana (~ah@user/akoana)
[06:19:04] *** Quits: hendursaga (~weechat@user/hendursaga) (Quit: hendursaga)
[06:19:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:29:07] <asarch> Is there any way to check if the source file is correctly balanced at all?
[06:29:24] <asarch> I mean, the parentheses pairs
[06:34:20] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[06:34:25] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[06:34:49] *** Joins: srhm (~ascii@user/srhm)
[06:37:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:19:16] <kakuhen> M-x check-parens or equivalent
[07:22:06] <jeosol> asarch: do you use paredit or equivalent when writing code? Normally, you shouldn't have this problem if you use paredit or similar
[07:22:48] *** Joins: prxq_ (~quassel@x4db330a1.dyn.telefonica.de)
[07:25:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:26:57] *** Quits: prxq (~quassel@x4db5a3fe.dyn.telefonica.de) (Ping timeout: 268 seconds)
[07:28:41] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 248 seconds)
[07:30:03] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 268 seconds)
[07:32:45] <beach> Good morning everyone!
[07:35:05] <pillton> Good morning!
[07:42:15] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[07:42:38] *** Joins: srhm (~ascii@user/srhm)
[07:52:33] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[07:53:00] *** Joins: srhm (~ascii@user/srhm)
[08:09:08] *** Quits: Josh_2 (~user@37.25.47.130) (Ping timeout: 258 seconds)
[08:13:24] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:13:50] *** Joins: srhm (~ascii@user/srhm)
[08:14:01] *** Parts: akoana (~ah@user/akoana) ()
[08:22:02] <hexology> what's the correct syntax for `((something-that-returns-a-lambda) a b c)`? my attempt clearly isn't right: https://bpa.st/L3HQ
[08:22:23] <beach> clhs funcall
[08:22:24] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_funcal.htm
[08:22:33] *** Joins: nirnam (~nirnam@1.46.140.64)
[08:22:56] <hexology> ah
[08:23:43] <beach> hexology: And there is no such thing as "a lambda".  There are "lambda expressions" that, when evaluated, turn into "functions".  What other languages call "a lambda" is just "a function", possibly anonymous, in Common Lisp.
[08:23:49] <lad> Hi. I'm playing around with sb-ext:seed-random-state... for deterministic randomness. I noticed something odd, wondering if anyone has a clue? Pasting the example I find odd: http://pastie.org/p/2aO0mxdvxWMm65ciNIoCMi
[08:25:52] <beach> lad: What is nshuffle?
[08:26:02] <lad> beach, sorry let me add it
[08:26:14] <asarch> jeosol, what is 'paredit'?
[08:26:28] <hayley> Well, if nshuffle is destructive, you are lucky the second form doesn't summon nasal demons.
[08:26:37] <beach> That's what I am thinking.
[08:26:59] <beach> asarch: An Emacs mode that keeps parentheses balanced.
[08:27:20] <lad> beach, updated: http://pastie.org/p/1YBugQVTKAkL5McY6qO3ix
[08:27:33] <hayley> But the third would perform the same permutation with different elements if you do not reset FOO between runs.
[08:29:58] <lad> beach, i guess rotatef is destructive
[08:30:04] <beach> It is.
[08:30:27] <beach> lad: I am not sure what is going on, but I can tell you that you are modifying literal data, and then anything can happen.
[08:30:44] *** Joins: dsk (~dsk@user/dsk)
[08:33:29] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[08:34:50] <lad> beach, okay. yeah, that just seemed weird because it's the same list. i don't understand exactly what's going on either. I'm sort of after generating random sequences that I can recall via seed. Guess i need to think more about it
[08:36:15] <lad> beach, thanks for taking a look
[08:39:24] <White_Flame> a simple copy-list might get you what you want
[08:46:00] <lad> White_Flame, hi. hmm using copy-list seems to have the behavior
[08:47:27] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[08:47:33] <lad> White_Flame, wait, let me double check. may have spoke too soon
[08:49:47] <beach> lad: You could trace nshuffle to get an idea of what is going on.
[08:51:57] *** Quits: pillton (~user@2405:b000:703:2::34:248) (Quit: ERC (IRC client for Emacs 27.2))
[08:53:05] <lad> White_Flame, that seemed to work :)
[08:55:04] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[08:55:28] *** Joins: srhm (~ascii@user/srhm)
[08:57:43] <White_Flame> you need to (copy-list (car foo)), as copying foo itself would still keep the same EQ contents
[08:58:53] <lad> White_Flame, interesting, I took the approach of doing copy-list in nshuffle
[08:59:07] <White_Flame> ok, but now it's not "n" shuffle anymore ;)
[08:59:20] <White_Flame> (assuming you meant it to indicate it's desctructive)
[09:00:45] <lad> White_Flame, true... well i copied it off stack overflow and hadn't questioned the "n" in the name. is that a convention btw?
[09:00:56] <White_Flame> yes, like REVERSE vs NREVERSE
[09:01:17] <lad> White_Flame, cool, okay.
[09:08:26] <lad> White_Flame, so i wonder why copy-list works here vs a dynamic variable
[09:09:04] <White_Flame> it makes a new list
[09:09:22] <White_Flame> the variable holds a literal object, which is basically the list that came out of READing the source code, and retains its identity
[09:10:18] <White_Flame> I mean, if you (defvar *foo* '(1 2 3)), (defun buh (x) (incf (car x))), and (buh *foo*), that list will hold (2 2 3), then (3 2 3), etc
[09:10:40] <White_Flame> where that list is stored is kinda irrelevant
[09:11:02] <White_Flame> (let ((foo '(1 2 3))) (buh foo) (buh foo) foo) would perform the same destructive modification on the same list
[09:11:50] *** Joins: Oladon (~olad@98.43.81.226)
[09:11:54] <White_Flame> however, since the equivalent of the source code is being modified there, the next time you run it it could still retain those changed values instead of starting from (1 2 3) again.  Or anything else, as it's undefined behavior to change that
[09:13:53] <lad> White_Flame, okay, I kind of get it that the var is always being changed hence varying results ok
[09:14:22] <White_Flame> the var itself is not being changed; the value it holds however is being mutated
[09:14:30] <White_Flame> the var still points to the exact same cons/list object
[09:15:07] <White_Flame> the slots within the list being passed to nshuffle are being changed around, in the exact same list structure
[09:18:38] <lad> White_Flame, got it, the destructive nshfullle is always changing in the var's value. Then when copy-list is used, it's a creating local variable, new list that based on the dynvar. thx for help explaining
[09:19:10] <White_Flame> not a local variable, just a new value
[09:20:07] <White_Flame> because of the different ways that lisp can bind variables to values, the notion of a "variable" is much more apparent than in most static languages
[09:21:02] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[09:21:14] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:21:39] *** Joins: srhm (~ascii@user/srhm)
[09:22:02] *** Joins: pillton (~user@2405:b000:703:2::35:28)
[09:27:28] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:30:42] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[09:38:26] *** Joins: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798)
[09:42:06] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[09:42:28] *** Joins: srhm (~ascii@user/srhm)
[09:44:12] *** Quits: derelict (~derelict@user/derelict) (Ping timeout: 258 seconds)
[10:20:17] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[10:26:37] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[10:30:13] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:34:25] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[10:34:48] *** Joins: srhm (~ascii@user/srhm)
[10:50:34] *** Joins: derelict (~derelict@user/derelict)
[10:52:09] *** Joins: pve (~pve@188-67-218-76.bb.dnainternet.fi)
[10:58:01] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[10:59:43] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[10:59:43] *** Lord_of_Life_ is now known as Lord_of_Life
[11:05:46] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[11:06:08] *** Joins: srhm (~ascii@user/srhm)
[11:09:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[11:10:03] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:18:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Received SIGTERM)
[11:23:09] *** Quits: lad (~lad@user/lad) (Ping timeout: 268 seconds)
[11:26:44] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[11:27:08] *** Joins: srhm (~ascii@user/srhm)
[11:28:02] *** Joins: shka (~herr@109.231.62.239)
[11:29:27] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:30:51] *** Quits: gethuen (uid502979@id-502979.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[11:32:28] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:34:30] *** Joins: makomo (~makomo@user/makomo)
[11:35:28] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Read error: Connection reset by peer)
[11:36:00] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[11:40:50] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 272 seconds)
[11:42:04] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[11:42:08] *** Joins: Guest25 (~Guest25@39.41.12.66)
[11:45:02] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[11:45:45] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[11:46:28] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[11:47:40] *** Joins: gaqwas (~john@dynamic-077-009-062-015.77.9.pool.telefonica.de)
[11:49:36] *** Quits: Guest25 (~Guest25@39.41.12.66) (Quit: Client closed)
[11:52:08] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[11:53:32] *** Joins: amb007 (~a_bakic@79.101.103.222)
[12:02:34] *** Quits: kuler (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[12:03:03] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[12:16:54] <pjb> Some of lad confusion came from this wrong assertion: "(nshuffle '(1 2 3) (sb-ext:seed-random-state 1 )) ;=> This always returns the same result".
[12:17:37] <pjb> It returns the same when this is evaluated (from a load of the source, or at the REPL), because in that case each time a new literal list (1 2 3) is read.
[12:17:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[12:18:04] <pjb> But when you compile-file this expression, the compiler will read (1 2 3) once, and may store it either in read-only space or in read-write space.
[12:18:19] <beach> Nice catch.
[12:18:39] <pjb> In the former case, an error or a sigbus may occur.  In the later case we'll get the same changing results as the other expression.
[12:21:57] <beach> Also, lad was confused about other things, like the difference between a variable and an object.
[12:27:44] *** Quits: amb007 (~a_bakic@79.101.103.222) (Read error: Connection reset by peer)
[12:28:45] *** Joins: amb007 (~a_bakic@79.101.103.222)
[12:30:52] *** Quits: pillton (~user@2405:b000:703:2::35:28) (Quit: ERC (IRC client for Emacs 27.2))
[12:35:55] *** Quits: amb007 (~a_bakic@79.101.103.222) (Ping timeout: 268 seconds)
[12:36:01] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:36:51] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[12:39:29] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:44:21] *** Joins: heisig (~heisig@p579c8ec5.dip0.t-ipconnect.de)
[12:47:35] <heisig> Can someone tell me how I can access local variables with a #N suffix in the SLIME debugger (on SBCL)?
[12:48:42] <heisig> Those variables arise whenever a variable name is used more than once in the same scope.
[12:49:04] <heisig> And so far, I haven't managed to refer to them in the interactive 'e' evaluator within a stack frame.
[12:52:52] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:53:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:54:18] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 272 seconds)
[12:54:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[12:54:41] *** Joins: lisp123 (~lisp123@5.30.23.247)
[12:55:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[12:55:36] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[12:55:58] *** Joins: srhm (~ascii@user/srhm)
[12:56:01] *** Joins: amb007 (~a_bakic@93.87.81.69)
[12:56:20] <pjb> heisig: good question.
[12:58:44] <pjb> heisig: 1- if you type RET on the frame, it shows all variables (that have not been optimized out), even those named with uninterned symbols.
[13:00:05] <mfiano> can you give some example code that produces these suffices?
[13:00:25] <pjb> heisig: 2- if you move the cursor on one of them, and type RET, the slime inspector will show you its value in more details.
[13:00:47] <mfiano> I cannot reproduce on Sly at least
[13:00:58] <beach> pjb: But you may want to use such a variable in a form that you type to eval-in-frame
[13:01:06] <pjb> heisig: 3- otherwise, if you want to access it from an expression you'd enter with e for example, the only way would be to have a reference to that variable name.
[13:01:16] *** Quits: amb007 (~a_bakic@93.87.81.69) (Read error: Connection reset by peer)
[13:01:36] <pjb> heisig: which is the point of using uninterned variable names in the first place, to prevent you to access it…
[13:01:52] <mfiano> You can M-RET to send the object to the REPL, and create a reference to it there which you could use in eval-in-frame
[13:02:11] *** Joins: amb007 (~a_bakic@93.87.81.69)
[13:02:25] <mfiano> Works even for uninterned symbols. I use it frequently
[13:04:20] <pjb> (defvar *saved-name*) (defun foo () (let ((#1=#.(let ((name '#:foo)) (setf *saved-name* name) name) 42)) (incf #1#) (/ #1# 0)))  Then in slime with e on the frame, #.*saved-name*  will return the value of the variable #:foo
[13:05:17] <pjb> The expression in the #1=#. would have to be more sophisticated if the code was compiled and loaded, since here the name is only saved in the compilation environment aka startup environment when you just load the source.
[13:05:34] <pjb> heisig: ^
[13:06:12] <pjb> In short it's possible, but inconvenient; don't do that.  Use a flag in your macro to use normal symbols while debugging!
[13:07:51] *** Joins: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it)
[13:07:55] <mfiano> What does that have to do with some #N suffix the debugger is adding to locals?
[13:08:27] <heisig> pjb: I wasn't talking about uninterned symbols, but symbols that were magically renamed by SBCL.  SBCL sometimes converts a lexical variable A to A#1, ..., A#N.
[13:08:55] <mfiano> heisig: simple code example that exemplifies this renaming?
[13:09:20] <heisig> mfiano: Your trick with using M-RET to send the value to the REPL works perfectly.  It is not ideal, but solves my problem.
[13:09:27] <mfiano> Ok good
[13:10:32] *** Quits: amb007 (~a_bakic@93.87.81.69) (Ping timeout: 245 seconds)
[13:10:45] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[13:10:53] <beach> mfiano: I wonder whether it is renaming due to SSA conversion, maybe.
[13:11:17] <mfiano> I don't know. I haven't ever seen this, or was able to reproduce it from heisig's description
[13:11:22] <mfiano> But I use a SLIME fork
[13:12:51] <beach> I see it all the time.  I don't think it has to do with SLIME or SLY, but with how SBCL presents the stack-frame contents.
[13:13:48] <pjb> heisig: oh, in that case they are are normal symbols, so just use A#1
[13:13:51] <mfiano> Interesting, also use SBCL and spend quite a deal of time in the debugger
[13:14:14] <pl> I thought Python (CMU, SBCL and SCL) didn't do SSA?
[13:14:19] <pjb> sorry I read prefix instead of suffix.
[13:14:50] <heisig> Here is a minimal example that produces such a stack frame: (defun foo (x &aux (x (1+ x))) (break) (+ x x))
[13:15:35] *** Quits: asarch (~asarch@2806:10ae:7:defb:627b:ef7f:734a:76f5) (Quit: Leaving)
[13:15:35] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[13:15:40] <mfiano> pjb: It's not a symbol, just an annotation to a symbol the debugger is presenting same symbols as IIUC
[13:15:46] *** Joins: amb007 (~a_bakic@93.87.81.69)
[13:16:16] <heisig> pjb: When I evaluate x#1 in that stack frame, I get "The variable |X#1| is unbound.".  So it is definitely not just a symbol.
[13:16:19] <mfiano> heisig: https://i.lisp.cl/OdxLin.png
[13:17:03] <pjb> heisig: it's a symbol, but sbcl must be doing other optimizations, such as storing the value in registers or something.
[13:17:15] <heisig> mfiano: Sorry, I forgot the (optimize (debug 3) (safety 3)), because I use that globally.
[13:17:16] <pjb> heisig: try with (safety 3) (debug 3) (speed 0) (space 0)
[13:18:36] <mfiano> I see.
[13:20:11] <mfiano> Only need debug 3 and rest default compiler policy values
[13:20:48] <beach> mfiano: I take it debug 3 is not your default then.
[13:21:03] <beach> It is mine, which is why I see this all the time, just like heisig.
[13:21:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[13:22:00] <mfiano> It is not. I do not modify the implementation's default compiler policy so I don't accidentally introduce bugs for the common user
[13:22:08] *** Joins: srhm (~ascii@user/srhm)
[13:22:31] <beach> Interesting point of view.
[13:23:25] <pjb> If you don't modify defaults, then how do you know your code is conforming?
[13:23:52] <pjb> Actually, you should compile your code in a loop trying all the combinations of default variations.
[13:25:20] <mfiano> When I need debug 3, I either do it to an individual function, or I modify the default compiler policy manually for a temporary image rather than a "always different" value from what the average user may be running my code with
[13:25:27] <mfiano> same for other optimizations
[13:28:31] <mfiano> debug 3 has special meaning for libraries such as static-dispatch that I use, too. When I'm quickly prototyping or running performance regression tests in my codes, I don't want a failure to remember a localized declaration to cause me to lose precious time
[13:28:56] *** Quits: ahc (~ahc@121.98.229.241) (Quit: Client closed)
[13:30:32] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[13:32:05] <mfiano> (static-dispatch alters the semantics of method dispatch, so you could get a completely different method called with debug 3!)
[13:32:18] <mfiano> debug 3 means disable static dispatch
[13:33:43] <beach> Sounds very strange to me.
[13:34:35] <mfiano> Not really. Types can change dynamically at runtime. With static dispatch there is no runtime dynamic dispatch
[13:34:39] <mfiano> It's pretty clear
[13:35:47] <beach> What sounds strange to me is that a library would completely change its algorithms based on the DEBUG level.
[13:36:27] <mfiano> It makes sense to me. debug 3 is more debuggable, so there is no inlining.
[13:36:29] <beach> I mean, there is not even a standard way of querying the DEBUG level as far as I know.
[13:37:30] <beach> But inlining doesn't change any algorithms.
[13:37:39] <mfiano> Sure, the whole library makes use of a CLtL2 environments portability library.
[13:39:01] <beach> I totally do not expect any library to alter its algorithms as a result of my changing the DEBUG level.  That's why I think it is strange.
[13:39:19] <mfiano> There is no algorithm being altered
[13:39:39] <beach> From static to dynamic dispatch?
[13:40:34] <mfiano> Static-dispatch works by inlining a method function's body according to statically determined environment information, at compile time.
[13:40:56] <mfiano> If you want debuggability, you might want to see the method call's frame and arguments used for dispatch
[13:41:08] <mfiano> Which implies disabling inlining the method function's body
[13:43:52] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net)
[13:45:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:46:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:48:40] *** Quits: scymtym (~user@ip-88-153-154-183.hsi04.unitymediagroup.de) (Ping timeout: 268 seconds)
[13:48:50] *** Quits: amb007 (~a_bakic@93.87.81.69) (Ping timeout: 252 seconds)
[13:49:03] *** Joins: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs)
[13:50:28] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[13:50:53] <mfiano> I wouldn't say there is another algorithm, as it's the same Common Lisp generic function's method combination algorithm, just invoked at a different time (not runtime), which can alter the result.
[13:51:24] <mfiano> https://github.com/alex-gutev/static-dispatch#common-pitfalls
[13:51:43] <beach> OK.
[13:54:47] <hayley> Wow, they even ported non-dispatching dispatch to Common Lisp. How modern!
[13:57:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:59:30] <hayley> The semantics are totally different under static dispatch, as it turns an assumption like "the argument X is of type FOO" into "the class of the argument X is exactly FOO".
[14:03:23] *** Quits: heisig (~heisig@p579c8ec5.dip0.t-ipconnect.de) (Quit: Leaving)
[14:03:34] <hayley> Thought I had more to say, but it is very strange that removing the optimization completely changes semantics.
[14:05:57] *** Quits: amb007 (~a_bakic@net124-35-245-109.mbb.telenor.rs) (Ping timeout: 268 seconds)
[14:07:03] *** Joins: amb007 (~a_bakic@93.87.81.69)
[14:07:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:08:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:10:36] <beach> Without checking what any implementation returns, what do you think this form should return: (destructuring-bind (&whole x a) (list 1) (list x a)) ?
[14:11:07] <hayley> ((1) 1)?
[14:11:23] <beach> I think ((list 1) 1)
[14:11:35] <beach> But your answer is what SBCL does.
[14:12:12] <hayley> So, the value of the &whole variable should be unevaluated?
[14:12:43] <beach> It would be if my thinking is acceptable.
[14:14:09] *** Joins: lad (~lad@user/lad)
[14:14:14] <mfiano> Same result on ECL and CCL
[14:14:22] <hayley> The first sentence in the description of DESTRUCTURING-BIND suggests all binding is done on the structure resulting from the evaluation of the expression, so it isn't immediately obvious. But sometimes the standard is like that.
[14:15:20] <beach> Yeah, that phrase suggests that the form is evaluated and only its value is then considered.
[14:15:56] <beach> Thanks.
[14:15:57] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[14:16:23] <hayley> Then 3.4.5 Destructuring Lambda Lists defers to 3.4.4 Macro Lambda Lists, which only describes &whole in terms of a macro function.
[14:17:26] <hayley> "&whole is followed by a single variable that is bound to the entire macro-call form; this is the value that the macro function receives as its first argument." I guess the value our fictive "macro function" receives is the result of evaluation still.
[14:17:37] *** Quits: amb007 (~a_bakic@93.87.81.69) (Ping timeout: 245 seconds)
[14:18:44] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[14:19:38] <scymtym> ::notify heisig i haven't read the entire discussion, but have you tried supplying the IDENTIFIER argument to SB-DEBUG:VAR? (see http://www.sbcl.org/manual/index.html#Variable-Access )
[14:19:39] <Colleen> scymtym: Got it. I'll let heisig know as soon as possible.
[14:21:41] <hayley> In my worthless opinion, having a strange subject of destructuring would have been avoided if they wrote 3.4.4 to be an "extension" of 3.4.5, with the latter describing how to destructure by destructuring lambda lists, and the former introducing &environment.
[14:22:48] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Ping timeout: 268 seconds)
[14:25:35] *** Joins: dsk (~dsk@user/dsk)
[14:26:07] <beach> hayley: I now think the behavior of implementations is correct.  There are two lambda lists involved here which made me confused.  The lambda list of the macro destructuring-bind and that of its argument.  A &whole parameter of the former would have (list 1) as its value.
[14:27:11] <beach> Anyway, time for a lunch break.
[14:28:26] <hayley> Right.
[14:30:59] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:31:21] *** Joins: random-nick (~random-ni@87.116.179.82)
[14:31:22] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[14:33:27] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[14:33:56] *** Joins: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs)
[14:35:28] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[14:35:53] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 248 seconds)
[14:51:47] *** Quits: amb007 (~a_bakic@cable-94-189-183-212.dynamic.sbb.rs) (Ping timeout: 245 seconds)
[14:54:20] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[14:55:44] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[14:56:08] *** Joins: srhm (~ascii@user/srhm)
[14:58:52] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[15:01:18] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:10:05] *** Quits: frgo (~frgo@p200300deef181d00b51d11aabf3c221f.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:10:33] *** Joins: frgo (~frgo@p200300deef181d00b51d11aabf3c221f.dip0.t-ipconnect.de)
[15:11:51] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Quit: Leaving)
[15:14:35] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[15:18:33] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:19:12] *** Joins: amb007 (~a_bakic@cable-94-189-176-95.dynamic.sbb.rs)
[15:23:39] *** Quits: amb007 (~a_bakic@cable-94-189-176-95.dynamic.sbb.rs) (Ping timeout: 268 seconds)
[15:23:46] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[15:25:15] *** Parts: fpc (~fpc@user/fpc) ()
[15:25:15] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:25:44] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[15:30:44] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[15:38:56] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[15:40:10] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.2)
[15:46:30] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:15:28] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[16:15:33] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[16:15:47] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[16:17:37] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[16:18:23] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:19:41] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[16:22:37] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 245 seconds)
[16:24:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[16:25:20] *** Joins: srhm (~ascii@user/srhm)
[16:26:14] *** Joins: bendersteed (~user@ppp046177076102.access.hol.gr)
[16:29:55] *** Parts: bendersteed (~user@ppp046177076102.access.hol.gr) (ERC (IRC client for Emacs 27.2))
[16:34:55] *** Joins: lotuseater (~user@p200300e7871b3f008a69ffac690ca7c7.dip0.t-ipconnect.de)
[16:38:43] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[16:52:56] *** Quits: dsk (~dsk@user/dsk) (Ping timeout: 256 seconds)
[16:55:05] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:01:21] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Quit: Leaving)
[17:05:54] *** Quits: jon89 (~jon89@24-233-185-117.miami.fl.bluestreamcable.net) (Quit: Client closed)
[17:31:04] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Remote host closed the connection)
[17:32:01] *** Joins: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[17:32:17] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:34:24] *** Joins: gethuen (uid502979@id-502979.stonehaven.irccloud.com)
[17:35:31] *** Joins: Josh_2 (~user@37.25.47.130)
[17:37:49] *** Quits: Josh_2 (~user@37.25.47.130) (Remote host closed the connection)
[17:39:22] *** Joins: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu)
[17:39:53] *** Quits: attila_lendvai (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 248 seconds)
[17:42:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:42:59] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:56:19] *** Joins: Bike (~Glossina@71.69.170.70)
[17:56:19] *** ChanServ sets mode: +o Bike
[17:58:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[17:59:00] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Remote host closed the connection)
[17:59:18] *** Joins: srhm (~ascii@user/srhm)
[17:59:34] *** Joins: lisp123 (~lisp123@45.130.83.200)
[18:03:24] *** Quits: lisp123 (~lisp123@45.130.83.200) (Read error: Connection reset by peer)
[18:19:31] *** Joins: Josh_2 (~user@37.25.47.130)
[18:19:46] *** Quits: srhm (~ascii@user/srhm) (Read error: Connection reset by peer)
[18:19:51] <Josh_2>  Hello
[18:20:08] *** Joins: srhm (~ascii@user/srhm)
[18:22:26] <beach> Hello Josh_2.
[18:22:55] <Josh_2> Hi beach, how is your work coming along?
[18:23:24] *** Joins: selwyn (~selwyn@user/selwyn)
[18:23:56] <beach> Very well, thank you.  I am completely rewriting the code for manipulating lambda lists, because the previous one was wrong, but I am almost done.
[18:24:04] <beach> How about yourself?
[18:24:20] <Josh_2> That is good!
[18:27:49] <Josh_2> Mine is going well, nice and steady progress
[18:27:54] <beach> Great!
[18:28:56] <hexology> beach: hi, thanks for the tip about funcall earlier. and yes, i realize that there is no distinct "lambda" type in lisp and should have been more precise. that puts a damper somewhat on the usefulness of partial function application. would it be silly to rewrite `partial` as a macro that expands to a lambda form?
[18:29:11] *** Joins: lisp123 (~lisp123@45.130.83.200)
[18:29:18] <hexology> i also have to say, CCL gave a much nicer error message than SBCL in this case
[18:29:50] <beach> hexology: Let me consult your code again...
[18:30:13] <hexology> https://bpa.st/L3HQ it was here
[18:30:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[18:31:24] <beach> I think PARTIAL is fine as it is.  FUNCALL is just part of the language.
[18:31:46] <jcowan> hexology: But it is practical to write a macro also
[18:31:52] *** Quits: attila_lendvai_ (~alendvai@catv-86-101-74-70.catv.broadband.hu) (Ping timeout: 272 seconds)
[18:32:10] <beach> jcowan: Not really.  You won't be able to return a closure for instance.
[18:32:34] <beach> ... and that is what is being done here.
[18:37:05] <hexology> beach that's fair. and i suppose you don't want this as much in lisp as you might want in other languages, because flet lets you do this on an ad-hoc basis
[18:37:36] <hexology> and if you were writing a function that you intended to be "longer-lived" then partial application might be too much abstraction anyway
[18:38:45] <beach> No, the abstraction is useful.  It is known as "Currying", and I am pretty sure you have functions for it in Alexandria.
[18:40:13] <hexology> honestly i think haskell-style currying tends to be hard to read... a little point-free style here and there isn't bad, but it can get excessive and create a lot of mental overhead
[18:40:28] <beach> Having said that, I should add that this, somewhat extreme, functional style, is not that much used in Common Lisp.  Much of modern Common Lisp code uses CLOS-style "object-oriented" programming with generic functions and standard classes.
[18:40:51] <hexology> indeed, that is what i've seen. i think lisp strikes a nice balance
[18:41:13] <beach> Though, functional style is of course occasionally useful.  You see it in macro expanders for instance.
[18:41:45] <hexology> as in, in the implementation of a macro expandeR?
[18:42:09] <beach> As in the body of DEFMACRO forms.
[18:42:42] <akater[m]> beach: What do you need for lambda-list?  I have a macro `do-destructuring-lambda-list` which walks them, maybe it could be useful?
[18:44:11] <beach> akater[m]: I am working on writing a Common Lisp implementation, so I need lots of functionality on lambda lists, hence the module for that purpose.
[18:44:23] <beach> minion: Please tell akater[m] about SICL.
[18:44:23] <minion> akater[m]: SICL: SICL is a (perhaps futile) attempt to re-implement Common Lisp from scratch, hopefully using improved programming and bootstrapping techniques. See https://github.com/robert-strandh/SICL
[18:44:50] <akater[m]> beach: I'm aware of SICL
[18:45:04] <beach> OK.
[18:48:52] <beach> Destructuring needs to be somewhat specific.  For example, the error conditions signaled when there are too few or too many arguments, when there is an odd number of keyword arguments, etc., need to be such that the source tracking can pick up the source location of the macro form that caused the problem.
[18:50:55] <lotuseater> beach: Does your macro also signal a condition if &OPTIONAL and &KEY are used without isolation? I mean for example (defun foo (x &optional y &key z) ...)
[18:52:04] <beach> Since that is allowed, no condition is currently signaled, but a style warning could be signaled I guess.
[18:52:41] <akater[m]> beach: Well, here's a webpage with elisp version.  I have one for CL too, it's not published.  Search for do-destr : https://gitlab.com/akater/elisp-akater-misc/-/blob/master/akater-misc-macs.org  (Direct links to sections in rendered org pages in Gitlab do not seem to be supported, sorry.) If you find it useful, I could submit a CL version to SICL and add tests.  There are some after the definition, already.
[18:53:00] <lotuseater> Okay.
[18:53:13] <jcowan> beach: How do you currently track source locations?
[18:54:59] <beach> akater[m]: Thanks, but signaling simple errors won't do.
[18:56:10] <beach> jcowan: We have a library called "Concrete Syntax Tree" that wraps each S-expression in a standard object that contains source information.  And Eclector is able to return such CSTs.
[18:56:48] <beach> jcowan: Then we have code that attempts to re-create a CST after macro expansion, so that source information is preserved as much as possible.
[18:57:09] <jcowan> Okay, I guess that's a reasonable good-enough solution.
[18:57:41] <beach> Do you have a better one?
[18:57:56] <yitzi> I've also used eclector and the cst library to do line and column tracking versus the default stream position only tracking. Both are very cool libraries.
[18:58:28] <Bike> i think racket syntax objects are the same kind of thing, or at least they include source locations in addition to hygienic macro stuff
[18:58:35] <jcowan> Not given the constraint that macro bodies have to work on plain S-expressions, no.  You might want to expose the conversion functions so that a macro can choose to work directly at the CST level.
[18:59:05] <beach> jcowan: scymtym has plans in that direction.
[19:00:08] <jcowan> Bike: You're right, but it does expose conversions between raw S-expressions and syntax objects.  The issues arise when a macro call's arguments contain calls to other macros arbirarily deep.
[19:01:16] <beach> akater[m]: I canonicalize my lambda lists for a variety of further processing stages, and the canonicalization does a lot of error checking.  So further processing stages can work with canonicalized lambda lists and avoid checking those errors each time.
[19:01:35] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[19:01:58] *** Joins: srhm (~ascii@user/srhm)
[19:04:40] <akater[m]> beach: OK then.  SICL is exciting.  Unfortunately, I have too much unfinished projects to help with it.  This one just felt like it could be an easy contribution.
[19:05:23] <beach> I understand.  Thanks for trying.
[19:05:29] <lotuseater> I should try sometime myself how to write a macro for a lambda that is able to handle &REST, &OPTIONAL, &KEY from one with fixed arglist.
[19:06:20] <lisp123> beach: I read somewhere that SBCL doesn't use CLOS for built-in types (a good chance I read wrong). Is SICL using CLOS for all built-in types and does this mean you can get equivalent performance from CLOS vs. other data structures (the general comment has been structures are faster than classes due to avoiding looking up methods in the dispatch table)
[19:07:42] <akater[m]> lisp123: Standard has some restrictions re: built-in classes.
[19:07:59] <scymtym> jcowan: beach was referring to this: https://github.com/scymtym/s-expression-syntax/ . the basic idea is that a client must implement protocol functions for telling whether an input is a cons, for retrieving the car/cdr, for telling whether an input is a symbol, for retrieving the symbol name/package, etc. if that is the case, the library can parse any data structure as if it were an ordinary s-expression
[19:08:19] <lisp123> akater[m]: Oh I see, I will look into that - thanks
[19:08:48] <beach> lisp123: It depends on what you mean by built-in types.  For certain classes that can have direct instances, like FIXNUM, SINGLE-FLOAT, CHARACTER, CONS, SICL has special representations with tagged pointers.  For everything else, SICL uses standard classes.
[19:09:07] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-1AD1-dynamic.midco.net) (Quit: Using Circe, the loveliest of all IRC clients)
[19:09:38] <lisp123> beach: Thanks
[19:10:01] <beach> So, for instance, in SICL I do (defclass symbol () ((... symbol-name) (... symbol-package)))
[19:10:42] <lisp123> I am curious if classes can be made as efficient as strucutures (DEFSTRUCT)
[19:11:00] <lisp123> So if structures are implemented as classes, that would imply there is a way to make classes also as fast
[19:11:00] <beach> lisp123: Pleasure.  In SBCL, you have a number of kludges that are required because CLOS is not loaded until late.  So you can't do (defclass standard-class (...) ...) in SBCL.
[19:11:33] <lisp123> beach: Does that mean SBCL has an 'advantage' for efficiency?
[19:12:30] <beach> I believe SBCL does not require an indirection for certain built-in types for which SICL does require an indirection.
[19:13:29] <beach> lisp123: But on the other hand, for SICL, we have invented a number of efficiency-improving techniques, so I am not worried.  In particular, I count a lot on call-site optimization as in the ELS paper.
[19:14:55] <lisp123> beach: Nice, that's nice to hear. I will read that paper out of curiosity when I have time
[19:14:55] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Read error: Connection reset by peer)
[19:14:56] <beach> lisp123: We also invented better generic-function dispatch, path replication, and more.
[19:15:15] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[19:16:05] <lisp123> Nice. I am leaning towards working more and more with generic functions where possible. After learning about :before and :after, they are even more useful than before
[19:17:33] <beach> Right.  And, rather than introducing special cases all over the place, I much prefer to use a general mechanism like generic functions, and invent ways to make this mechanism sufficiently fast.
[19:17:55] <beach> I just don't have the work capacity to maintain code with lots of special cases.
[19:18:33] <lisp123> That seems like a smart way to do things
[19:18:45] <beach> And my brain is too small to write modules in a Common Lisp subset, like the SBCL compiler not using generic functions as I have been told, so each module uses the full language.
[19:20:16] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:21:34] <lisp123> And thus, Common Lisp can be argued to be fully an OO language :D
[19:22:18] <lotuseater> lisp123: not quite fully, but in the backstage more things happen than the eye expects first
[19:22:58] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 240 seconds)
[19:23:02] <beach> Since there is no widely agreed-upon definition of "OO language", this issue could be debated to death.
[19:23:38] <lotuseater> beach: So we don't have to. :)
[19:24:03] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[19:25:00] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:29:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:29:37] <White_Flame> Java is an OO language.  Object Obsessed.
[19:30:30] <beach> *sigh*
[19:32:27] <lotuseater> White_Flame: the forcing on what they call so in Java makes it very unattractive
[19:33:16] <White_Flame> but Lisp is an OO (Obviously Optimal) language
[19:33:27] <lotuseater> hehe
[19:39:30] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[19:39:54] *** Joins: khrbt (~znc@2601:646:8600:2f6:3fa:485d:475e:2130)
[19:57:34] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[19:57:37] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:04:23] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[20:04:48] *** Joins: srhm (~ascii@user/srhm)
[20:08:43] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:30:26] *** Quits: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[20:30:47] *** Joins: Posterdati (~posterdat@host-82-49-175-12.retail.telecomitalia.it)
[20:35:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[20:36:20] *** Joins: srhm (~ascii@user/srhm)
[20:42:03] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[20:51:15] *** Joins: selwyn (~selwyn@user/selwyn)
[20:51:39] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[20:53:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:54:06] *** Joins: lisp123_ (~lisp123@45.130.83.200)
[20:58:27] *** Quits: lisp123_ (~lisp123@45.130.83.200) (Ping timeout: 245 seconds)
[21:09:55] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[21:14:32] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 268 seconds)
[21:14:46] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[21:15:26] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[21:25:27] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[21:30:07] *** Joins: Fedoreo (~Srain@cpef81d0fb150a3-cmf81d0fb150a0.cpe.net.cable.rogers.com)
[21:31:44] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 272 seconds)
[21:32:11] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[21:32:29] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:9bbd:2119:e364:669a)
[21:33:29] *** Joins: lisp123 (~lisp123@45.130.83.200)
[21:33:40] *** Quits: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:9bbd:2119:e364:669a) (Remote host closed the connection)
[21:33:57] *** Joins: attila_lendvai (~alendvai@2a02:ab88:3707:bb00:5ee0:c5ff:feb2:29e2)
[21:34:55] *** Joins: tfeb (~tfb@88.98.95.237)
[21:36:26] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[21:38:09] *** Quits: tfeb (~tfb@88.98.95.237) (Client Quit)
[21:39:53] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 248 seconds)
[21:40:35] *** Joins: ircseeker3 (~nodebot@185.187.243.123)
[21:42:24] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[21:42:39] *** Joins: amb007 (~a_bakic@93-86-247-135.dynamic.isp.telekom.rs)
[21:48:54] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[21:49:20] *** Joins: srhm (~ascii@user/srhm)
[21:51:08] *** Quits: Fedoreo (~Srain@cpef81d0fb150a3-cmf81d0fb150a0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[21:51:34] *** Quits: amb007 (~a_bakic@93-86-247-135.dynamic.isp.telekom.rs) (Ping timeout: 256 seconds)
[21:52:25] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[22:04:22] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:07:37] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 248 seconds)
[22:07:49] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:09:43] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[22:10:10] *** Joins: srhm (~ascii@user/srhm)
[22:11:48] *** Joins: lisp123 (~lisp123@45.130.83.200)
[22:18:45] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[22:20:05] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[22:20:06] *** Quits: lisp123 (~lisp123@45.130.83.200) (Remote host closed the connection)
[22:20:18] *** Joins: lisp123 (~lisp123@45.130.83.200)
[22:20:28] *** Joins: srhm (~ascii@user/srhm)
[22:22:03] *** Joins: lisp123_ (~lisp123@5.30.23.247)
[22:23:39] *** Joins: selwyn (~selwyn@user/selwyn)
[22:25:27] *** Quits: lisp123 (~lisp123@45.130.83.200) (Ping timeout: 268 seconds)
[22:30:03] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[22:32:38] *** Joins: hafat (~hafat@159.146.87.68)
[22:33:28] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[22:34:47] <lisp123_> Is it possible to add IRC logging to #clschool? It would be useful to go through questions that others asked and also in case one logs off before a question is answered
[22:35:47] <mfiano> Logging is done by people who visit a channel, that means you.
[22:36:09] <lisp123_> IRC Logs: <https://irclog.tymoon.eu/libera/%23commonlisp>  like this I mean
[22:36:37] <mfiano> Shinmera doesn't visit #clschool. Most people just log on their own with their IRC client
[22:37:11] <Bike> the logs are done by colleen, shinmera's bot
[22:37:17] <Bike> which is in several channels shinmera is not in
[22:37:32] <Bike> you could prolly just ask. i don't know that shinmera has an application process
[22:37:34] <mfiano> Maybe it responds to /invite then
[22:37:42] <mfiano> Or that
[22:37:48] <lisp123_> Bike: thanks, I will ask him
[22:40:09] <alphapapa[m]> <lisp123_> "Is it possible to add IRC..." <- You could use the channel through the Matrix bridge and then have access to the room's history that way
[22:40:55] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[22:41:08] <lisp123_> alphapapa[m]: But then I would have to use Matrix no :)? LimeChat is serving me well
[22:41:18] *** Joins: srhm (~ascii@user/srhm)
[22:41:41] <Bike> you could also set up a bouncer so you have 24/7 logs
[22:41:58] <Bike> for yourself
[22:42:14] <alphapapa[m]> lisp123_: Matrix is pretty cool and easy to use.  My Emacs client works pretty well.  :)
[22:42:15] <Bike> i guess that doesn't help much if you're trying to link a newbie to a previous answer
[22:42:28] *** Joins: notzmv (~zmv@user/notzmv)
[22:42:28] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[22:42:31] <lisp123_> I guess one could also write some elisp and use ERC and save the buffer to file. But I just tweeted Shinmera which seemed to be the path of least resistance :)
[22:42:39] *** Joins: amb007 (~a_bakic@93-86-247-135.dynamic.isp.telekom.rs)
[22:42:41] <edgar-rft> Wouldn't it make more sense to collect solutions to common questions in some public document repository like the "Common Lisp Cookbook"?
[22:42:59] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[22:43:25] <lisp123_> alphapapa[m]: Nice :)
[22:44:20] <lisp123_> edgar-rft: Its more for just reading through what people are asking - sometimes can learn useful stuff from that. Whereas Cookbook is very detailed so is better suited for "recipes" - I wouldn't necessarily go there to figure out why to use gensym within macros for example
[22:44:38] <lisp123_> Which was a question I asked earlier (thanks PJB!) and now I manually saved it in my notes files
[22:45:00] <lisp123_> very detailed / too large & exhaustive to search through at times
[22:47:40] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[22:52:46] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 244 seconds)
[22:55:43] <pjb> lisp123_: there are reasons why some channels are not logged.  We want that newbies don't be ashamed of asking any kind of questions in #clschool; for this it's not logged (publically). you can always use a bot to make a local log; note that erc can log your channels while you're connected.
[22:56:36] <lisp123_> pjb: I see, ok that makes sense
[22:57:07] <pjb> lisp123_: eg. there's https://gitlab.com/com-informatimago/com-informatimago/-/blob/master/small-cl-pgms/botil/botil.lisp#L60 (I've not put it in production yet however; some batteries might be needed).
[22:57:47] <pjb> lisp123_: in particular, the search engine I tried (montezuma) doesn't satisfy me.
[22:57:52] <lisp123_> pjb: Thanks, I'll have a look. I think I can just get ERC to log for me since I have a machine thats always on
[22:58:22] <pjb> M-x customize-group RET erc-log RET
[22:58:38] <lisp123_> pjb: Thanks!
[22:58:58] *** Quits: gethuen (uid502979@id-502979.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[22:59:36] *** Quits: hhdave_ (~hhdave@ip212.ip-193-70-71.eu) (Ping timeout: 276 seconds)
[23:00:29] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[23:00:29] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:00:46] *** Parts: sm2n (~sm2n@user/sm2n) (Leaving)
[23:01:00] *** Joins: sm2n (~sm2n@user/sm2n)
[23:01:45] *** Quits: srhm (~ascii@user/srhm) (Quit: Konversation terminated!)
[23:02:08] *** Joins: srhm (~ascii@user/srhm)
[23:06:32] *** Quits: amb007 (~a_bakic@93-86-247-135.dynamic.isp.telekom.rs) (Ping timeout: 252 seconds)
[23:08:27] <Josh_2> Whats the library for handling bzip files?
[23:08:37] <Josh_2> I saw it yesterday and now I cannot remember it :(
[23:09:13] *** Quits: sander (~sander@user/sander) (Read error: Connection reset by peer)
[23:09:33] <mfiano> chipz is one
[23:09:40] *** Joins: sander (~sander@user/sander)
[23:10:29] <Josh_2> Thats the one
[23:10:38] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[23:23:53] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:24:24] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[23:26:33] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:26:40] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[23:29:06] *** Joins: selwyn (~selwyn@user/selwyn)
[23:30:49] *** Quits: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs) (Ping timeout: 248 seconds)
[23:32:16] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[23:32:19] *** Joins: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs)
[23:32:35] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Quit: Leaving...)
[23:34:37] *** Quits: amb007 (~a_bakic@net157-37-245-109.mbb.telenor.rs) (Read error: Connection reset by peer)
[23:34:54] *** Joins: amb007 (~a_bakic@cable-94-189-181-220.dynamic.sbb.rs)
[23:35:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[23:36:59] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-F0C2-dynamic.midco.net)
[23:37:36] <nij-> Just curious. Suppose I want to edit a line in a huge file using lisp, is there a way to do that without reading the whole file into the memory?
[23:45:01] <Josh_2> with-open-file doesn't load the entire file into memory
[23:46:51] <Josh_2> You can use file-position to change line
[23:48:19] <lotuseater> so from another point of view: it's possible with C or sed, so *how* do I do it? ^^
[23:48:49] <Shinmera> file-position doesn't help with lines.
[23:48:58] <Shinmera> just call read-line until you're at the desired line number.
[23:49:20] <Shinmera> or manually read-char until you've seen the desired number of Linefeeds
[23:50:07] <nij-> I plan to go through a file line by line, check if that line satisfies a pred, and make change only to that line if T.
[23:50:38] <nij-> Currently my code is very ugly.. I read and write the whole file every time :(
[23:54:13] *** Joins: lisp-newbie (~lisp-newb@192.117.240.42)
[23:55:14] *** Joins: thomasbartscher (~thomasbar@picard.host.weltraumschlangen.de)
[23:55:48] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[23:56:17] *** thomasbartscher is now known as Aksej
[23:56:22] <lisp-newbie> quick question: I have a class definition, and then functions where I use that class definition, and I want to make a way to just pass in a name of a class and generate functions for that class. Would I use a function for that? Or is that already what a macro is for?
[23:56:47] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:514:bcc7:8202:1798) (Ping timeout: 245 seconds)
[23:57:12] <lisp-newbie> Meaning I want to automatically generate functions for an arbitrary class that I pass in
[23:58:40] <lotuseater> that is what macros are also for
[23:58:46] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[23:59:04] <Bike> Usually you want to generate code at build time as much as you can
[23:59:11] <mfiano> if the class name is available at compile time
