[00:14:38] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:b882:42b4:f44e:9996) (Remote host closed the connection)
[00:17:00] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[00:41:43] *** Quits: src (~src@user/src) (Ping timeout: 256 seconds)
[00:43:44] *** Joins: src (~src@user/src)
[00:48:46] *** Quits: src (~src@user/src) (Quit: Leaving)
[00:48:56] *** Joins: src (~src@user/src)
[01:02:47] <FromDiscord> <enthus1ast> if i can i will @treeform
[01:03:05] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[01:04:09] *** Joins: pch (~pch@66.49.131.33)
[01:06:11] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[01:07:03] *** Joins: pch_ (~pch@66.49.131.33)
[01:07:12] *** Quits: pch (~pch@66.49.131.33) (Read error: Connection reset by peer)
[01:07:14] *** Quits: pch_ (~pch@66.49.131.33) (Remote host closed the connection)
[01:08:50] *** Joins: pch (~pch@66.49.131.33)
[01:11:07] *** Quits: pch (~pch@66.49.131.33) (Remote host closed the connection)
[01:12:11] *** Joins: pch (~pch@66.49.131.33)
[01:13:51] *** Joins: pch_ (~pch@66.49.131.33)
[01:13:51] *** Quits: pch (~pch@66.49.131.33) (Read error: Connection reset by peer)
[01:15:14] *** Quits: pch_ (~pch@66.49.131.33) (Remote host closed the connection)
[01:16:20] *** Joins: pch (~pch@66.49.131.33)
[01:25:24] <FromDiscord> <TryAngle> how do I get the count of characters in a string?
[01:28:27] <FromDiscord> <Yardanico> you want to count how many times a single characters occurs in a string?
[01:28:46] <FromDiscord> <TryAngle> now how many characters it contains
[01:28:57] <FromDiscord> <Yardanico> `str.len`
[01:29:00] <FromDiscord> <TryAngle> the `len()` proc doesn't return the character when using other UTF8 range sometimes‚Üµfor example: using `len()` on  `ÏïàÎÖï! ‰Ω†Â•ΩÔºÅ`  returns `16`
[01:29:14] <FromDiscord> <Yardanico> yeah, you need to use unicode module for utf8
[01:29:25] <FromDiscord> <Yardanico> https://nim-lang.org/docs/unicode.html#runeLen%2Cstring
[01:29:33] <FromDiscord> <TryAngle> just import unicode and it works?
[01:29:50] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GOO
[01:29:54] <FromDiscord> <TryAngle> thanks!
[01:34:50] <FromDiscord> <treeform> In reply to @enthus1ast "if i can i": thanks!
[01:40:20] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[01:47:30] <FromDiscord> <TryAngle> hmm it seems when a proc marked as {.discardable.} is the single thing in an of (case -> of) the pragma has no effect
[01:47:46] <FromDiscord> <TryAngle> (edit) "is" => "and gets called as"
[01:48:05] <FromDiscord> <Elegantbeef> Well yea how is it supposed to know it should be discarded
[01:48:40] <FromDiscord> <Elegantbeef> Each branch is resolved after the first, so i suppose if it's not in the first branch it can be reasoned
[01:48:56] <FromDiscord> <Elegantbeef> But if it's in the first branch there is 0 information that "this should be discarded"
[01:49:34] <FromDiscord> <TryAngle> oh I see
[01:49:46] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GOR
[01:50:05] <FromDiscord> <Elegantbeef> you know you can just do `discard parseText(h, node)`?
[01:50:19] <FromDiscord> <TryAngle> oh no I didn't üòÇ
[01:50:21] <FromDiscord> <TryAngle> thanks
[01:51:07] <FromDiscord> <Elegantbeef> Yea in that case without discarding it gets that the proc returns and says "all branches need to be of type `parsetext()`
[01:51:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3GOS
[01:51:53] <FromDiscord> <Elegantbeef> Though with that return it shouldnt matter
[01:52:18] <FromDiscord> <TryAngle> ah that makes sense, it's the first time I had this case
[01:59:43] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 252 seconds)
[02:00:16] *** Joins: src (~src@user/src)
[02:08:32] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:12:54] *** Quits: src (~src@user/src) (Quit: Leaving)
[02:13:04] *** Joins: src (~src@user/src)
[02:15:31] <FromDiscord> <evoalg> @ElegantBeef you created scanTuple ?
[02:17:19] <FromDiscord> <evoalg> Thank you for creating it!
[02:30:40] <FromDiscord> <Elegantbeef> I did, it's mostly the same implementation as scanf so i hardly did anything
[02:39:15] <FromDiscord> <evoalg> All the same, from someone new like me it helps a lot. I've found with learning Nim, often the thing that takes the longest for me (and most frustrating compared to python) is getting the data into variables / containers. So, thank you üôÇ
[02:43:00] <FromDiscord> <evoalg> Also @ElegantBeef did you see that "include" trick in the aoc channel for day02? ... my mind is blown
[02:44:05] <FromDiscord> <ynfle (ynfle)> +1!
[02:44:18] <FromDiscord> <Elegantbeef> It's interesting not overly mind blowing to me though üòÄ
[02:44:20] <FromDiscord> <ynfle (ynfle)> It's truly mind blown
[02:44:41] <FromDiscord> <ynfle (ynfle)> Turning data into code! It's like lisp almost
[02:44:58] <FromDiscord> <Elegantbeef> Comically last year I used the nimVM for solving that operator precedence problem instead of making a lexer/evaluator
[02:45:54] <FromDiscord> <sharpcdf> what function returns the absolute path of my current nim file?
[02:46:05] <FromDiscord> <sharpcdf> ive tried `getProjectPath` but it returns an error
[02:46:32] <FromDiscord> <Elegantbeef> `getAppDir`?
[02:46:51] <FromDiscord> <Yardanico> In reply to @sharpcdf "what function returns the": you mean source file?
[02:46:55] <FromDiscord> <Yardanico> or the resulting binary?
[02:47:11] <FromDiscord> <sharpcdf> In reply to @Yardanico "you mean source file?": source file
[02:47:20] <FromDiscord> <sharpcdf> In reply to @Elegantbeef "`getAppDir`?": that returns the binary directory
[02:47:25] <FromDiscord> <sharpcdf> oh wait found it
[02:47:28] <FromDiscord> <Yardanico> https://nim-lang.org/docs/system.html#currentSourcePath.t
[02:47:32] <FromDiscord> <sharpcdf> https://nim-lang.org/docs/system.html#currentSourcePath.t
[02:47:33] <FromDiscord> <sharpcdf> yea
[02:47:34] <FromDiscord> <sharpcdf> thanks
[02:56:56] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[03:10:34] *** Quits: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:20:45] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 252 seconds)
[03:27:25] <FromDiscord> <TryAngle> does this have the same effect of using `type X = object` vs `type X = ref object`? https://media.discordapp.net/attachments/371759389889003532/916115869040525332/unknown.png
[03:27:40] <FromDiscord> <Yardanico> no
[03:28:00] <FromDiscord> <Yardanico> even with type X = object nim will pass the objects into by reference if the object is large enough
[03:28:11] <FromDiscord> <Yardanico> and with bycopy the object will be _always_ passed by copy
[03:28:17] <FromDiscord> <Yardanico> you really only should use it for C FFI
[03:28:36] <FromDiscord> <Yardanico> (edit) "even with type X = object nim will pass the objects into ... by" 03added "procedures"
[03:28:41] <FromDiscord> <TryAngle> ah ok, I see‚Üµthanks
[03:40:18] <FromDiscord> <sharpcdf> a proc that returns nothing is written as `proc asf(): void = ` right?
[03:40:27] <FromDiscord> <sharpcdf> i dont remember lol and i cant find it anywhere
[03:40:39] <FromDiscord> <Yardanico> In reply to @sharpcdf "a proc that returns": just `proc asf() = discard`
[03:40:51] <FromDiscord> <Yardanico> `void` can be used for an empty return type, but is not required, that's just legacy
[03:41:34] <FromDiscord> <sharpcdf> alright
[03:41:35] <FromDiscord> <sharpcdf> thanks
[03:41:45] <FromDiscord> <Yardanico> also parens are optional too if you have no arguments
[03:41:51] <FromDiscord> <Yardanico> so `proc asf = discard` is perfectly fine
[03:44:07] <FromDiscord> <sharpcdf> yea i know
[03:45:27] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3GPk
[03:45:52] <FromDiscord> <Yardanico> In reply to @sharpcdf "ive seen some examples": where is it "left out" ?
[03:46:01] <FromDiscord> <Yardanico> "discard" is like python's "pass", so just "do nothing"
[03:47:29] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3GPl
[03:47:37] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GPm
[03:47:38] <FromDiscord> <Yardanico> your first line won't compile
[03:47:39] <FromDiscord> <sharpcdf> and they just leave out hte discard
[03:47:45] <FromDiscord> <Yardanico> so if you want to have an empty proc you write "discard"
[03:47:49] <FromDiscord> <Yardanico> as the only thing inside of it
[03:47:57] <FromDiscord> <sharpcdf> In reply to @Yardanico "no, you must have": well of course, but im saying leaving out the discard
[03:48:05] <FromDiscord> <sharpcdf> In reply to @Yardanico "so if you want": ok, but what if im defining it there
[03:48:12] <FromDiscord> <sharpcdf> and adding stuff inside of it
[03:48:15] <FromDiscord> <Yardanico> ?
[03:48:16] <FromDiscord> <sharpcdf> instead of just declaring it
[03:48:19] <FromDiscord> <eqf0> I think `proc (x, y: int) {.closure.}` is a type, not a declaration
[03:48:30] <FromDiscord> <Yardanico> ah, if he's asking that, then yes
[03:48:36] <FromDiscord> <Yardanico> since it's just a procedure type, you don't need a body at all
[03:48:39] <FromDiscord> <sharpcdf> i think youre misunderstanding
[03:48:40] <FromDiscord> <Yardanico> hence you don't need = discard
[03:48:41] <FromDiscord> <sharpcdf> basically
[03:49:40] <FromDiscord> <sharpcdf> sent a code paste, see https://play.nim-lang.org/#ix=3GPn
[03:49:54] <FromDiscord> <sharpcdf> not just declaring it
[03:49:56] <FromDiscord> <Yardanico> ahh, i think you misunderstood
[03:49:58] <FromDiscord> <sharpcdf> if it has a body
[03:50:02] <FromDiscord> <Yardanico> "discard" is _only_ for when you have an empty proc with no body
[03:50:06] <FromDiscord> <Yardanico> if you have a body, "discard" isn't needed
[03:50:08] <FromDiscord> <sharpcdf> ohhhh
[03:50:31] <FromDiscord> <sharpcdf> alright so when im defining a function with no return value i just dont add anything
[03:50:32] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3GPo
[03:50:38] <FromDiscord> <sharpcdf> ohhhhhhhhhhhhhhhhhhh
[03:50:51] <FromDiscord> <sharpcdf> thanks lol
[03:50:51] <FromDiscord> <Yardanico> "discard" is a part of the procedure body, it's not a part of the procedure declaration
[03:51:30] <FromDiscord> <sharpcdf> alright that makes a ton more sense
[04:02:39] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:15:43] <FromDiscord> <huantian> Is there a way to get `split(string, sep, maxsplit)` return a tuple of length dependent on a static maxsplit?‚ÜµOr is that not a good idea
[04:19:10] <FromDiscord> <Yardanico> In reply to @huantian "Is there a way": and what happens if there are not enough elements? do you throw a runtime error?
[04:19:25] <FromDiscord> <Yardanico> also you can already have similar effect with normal split and unpack
[04:19:33] <FromDiscord> <Yardanico> https://github.com/Yardanico/nimpylib/blob/master/src/pylib/unpack.nim or https://github.com/technicallyagd/unpack or something similar
[04:19:50] <FromDiscord> <huantian> true
[04:20:21] <FromDiscord> <huantian> yeah that works
[04:37:30] <FromDiscord> <sharpcdf> can i link a html/css/javascript file with the link pragma? if so, how would i access it through the source file?
[04:53:54] <FromDiscord> <ynfle (ynfle)> I think `link` is for a c or cpp compiler
[04:53:58] <FromDiscord> <sharpcdf> nevermind, found `staticRead`
[04:54:02] <FromDiscord> <sharpcdf> yeai think so too
[04:54:06] <FromDiscord> <ynfle (ynfle)> What would it mean for html/css/javascript
[04:54:17] <FromDiscord> <ynfle (ynfle)> `link` isn't for linking to you nim program
[04:54:48] <FromDiscord> <sharpcdf> i was talking about embedding the files
[04:54:54] <FromDiscord> <sharpcdf> though linking did that
[04:54:57] <FromDiscord> <sharpcdf> but found staticRead
[04:55:12] <FromDiscord> <Elegantbeef> nah `link` is for linking libraries to your code
[05:06:10] <arkanoid> would nim leaders tell nim users if a large company would be using nim for a proprietary project?
[05:06:40] <FromDiscord> <Yardanico> ?
[05:06:40] <FromDiscord> <Rika> How would one know
[05:06:44] <FromDiscord> <Rika> It‚Äôs proprietary
[05:07:16] <arkanoid> well, support is a thing, they would receive requests probably
[05:07:29] <FromDiscord> <Rika> Requests for
[05:07:54] <arkanoid> fixing stuff, implement a language feature, who knows
[05:08:08] <arkanoid> stay alive and well
[05:08:54] <FromDiscord> <Rika> Large companies would probably opt to either fix it themselves or switch languages I assume
[05:09:04] <arkanoid> no
[05:09:32] <arkanoid> well, it depends on the concept of "large", but essentially no. They would send money and requests
[05:09:43] <FromDiscord> <Rika> Or they just wouldn‚Äôt disclose that they‚Äôre building an app or whatever els
[05:11:06] <arkanoid> well, so the anwer is "it depends"
[05:24:29] <FromDiscord> <sharpcdf> how do you create a file?
[05:26:12] <FromDiscord> <Elegantbeef> You can just do `open(fileName, fmWrite)` and close it after, you can open a `FileStream` you can do `writeFile(fileName, data)`
[05:26:22] <FromDiscord> <Elegantbeef> There are many ways to do it of course
[05:26:30] <FromDiscord> <sharpcdf> alright, thanks
[05:37:48] <FromDiscord> <sharpcdf> why is it erroring? this is the second time im trying to compile it and the first time it worked fine https://media.discordapp.net/attachments/371759389889003532/916148683978969148/unknown.png
[05:38:17] <FromDiscord> <sharpcdf> there was a file that the program created that i deleted afterwards, is that the problem?
[05:40:21] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:41:50] <arkanoid> is move semantics sink param inferred, or I have to take care of it?
[05:42:58] <arkanoid> I'm listening to araq move semantics presentation at fosdem 2020, he said that it could be inferred somehow in the future. I'm the future now
[05:43:19] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[05:47:32] <FromDiscord> <Yardanico> In reply to @arkanoid "I'm listening to araq": there is a feature like that, but it's turned off by default because it was causing type incompatibility in some cases where you have proc types
[05:47:34] <FromDiscord> <Yardanico> --sinkInference
[05:48:34] <FromDiscord> <Yardanico> you can try compiling with --sinkInference:on , if it works - cool, (a bit of) free performance :P
[05:48:37] <FromDiscord> <Yardanico> for your program that is
[05:51:12] <arkanoid> Yardanico: but what about arc? Benchmark of arc on code without any sink/lent annotation follows the presentation of sink/lent, like if it is already inferred with arc
[05:51:29] <FromDiscord> <Yardanico> wdym "what about arc"?
[05:51:33] <FromDiscord> <Yardanico> sinkInference is specific to arc/orc
[05:52:15] <FromDiscord> <leorize> wasn't a part of the issue with --sinkInference is that it doesn't play nice with closures and can cause memory corruption for those?
[05:52:23] <arkanoid> oh, ok. So I expect it to be turned on for that example
[05:52:37] <FromDiscord> <Yardanico> @leorize don't remember the memory corruption issues
[05:52:45] <FromDiscord> <Yardanico> but there are problems with type compatibility with closures, yes
[05:53:22] <FromDiscord> <leorize> sink is probably the weirdest feature in the language
[05:53:29] <FromDiscord> <Yardanico> why?
[05:53:36] <FromDiscord> <Yardanico> i think it makes sense actually
[05:53:48] *** Joins: neurocyte0132889 (~neurocyte@IP-185189141046.dynamic.medianet-world.de)
[05:53:49] *** Quits: neurocyte0132889 (~neurocyte@IP-185189141046.dynamic.medianet-world.de) (Changing host)
[05:53:49] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[05:53:55] <FromDiscord> <leorize> the only thing it said is "should be moved" and not "must be moved"
[05:54:39] <FromDiscord> <Yardanico> i mean, it's just that we don't have good --sinkInference so we have to use it explicitly
[05:54:42] <FromDiscord> <leorize> effectively rendering it to be an optimization (a bad one, even) rather than a constraint
[05:54:54] <FromDiscord> <Yardanico> with sinkInference by default it'll be there for everyone but you won't have to annotate your code with "sink"
[05:55:12] <FromDiscord> <Yardanico> it's a bit weird as of now when you need to annotate it manually, yes
[05:55:45] <arkanoid>  in the talk araq says that badly inserted sink/lent won't make any instability/crash but maybe just make program slower
[06:02:20] <arkanoid> --sinkInference is default ON according to manual
[06:02:44] <FromDiscord> <leorize> iirc its only on for the stdlib
[06:02:48] <FromDiscord> <leorize> but that might have changed
[06:03:43] <arkanoid> OK. Very interesting subject though. Would like to read mode about this
[06:04:31] <FromDiscord> <Yardanico> In reply to @leorize "iirc its only on": yeah https://github.com/nim-lang/Nim/blob/devel/lib/system/inclrtl.nim#L51
[06:04:35] <FromDiscord> <leorize> looks like its still off-by-default
[06:04:42] <FromDiscord> <leorize> except for stdlib
[06:04:51] <FromDiscord> <Yardanico> In reply to @leorize "looks like its still": well, not "still"
[06:05:00] <FromDiscord> <Yardanico> it was on by default for some time in the past  :)
[06:05:19] <FromDiscord> <leorize> I mean, in the context of a release, then it hasn't been on since its introduction in 1.2.0
[06:07:15] <arkanoid> so I can expect move semantics to work full speed when calling stdlib procs, but I have to setup sink and lent for my own procs
[06:15:24] <FromDiscord> <Elegantbeef> Most stdlib procs are annotated
[06:40:28] <arkanoid> Nimporter readme: possible benefits: "doesn't require nim compiler", dependencies "nim compiler". I'm confused
[06:43:07] <FromDiscord> <Yardanico> In reply to @arkanoid "Nimporter readme: possible benefits:": i guess the former is about already-published packages
[06:43:15] <FromDiscord> <Yardanico> and dependencies is for the developers (not end users) of the libraries
[06:43:33] <FromDiscord> <Yardanico> so basically you can publish binary wheels to pypi and no need for nim compiler i guess
[06:43:46] <arkanoid> well, that's obvious
[06:43:49] <FromDiscord> <Yardanico> but then idk about "on import"...
[06:43:53] <arkanoid> ok ok, btw got it
[07:00:35] <arkanoid> damn vscode and nim will always be worst enemies
[07:00:56] <arkanoid> I keep have to restart it to get autocompletion/suggestions
[07:01:48] <arkanoid> no matter which of the two main extensions I activate, ctrl+space stays in "loading ..." forever, until I restart "code ."
[07:04:44] <arkanoid> also basic stuff like "detect indentation" doesn't work. I still have to manually change from 4 to 2 and back manually according if I'm writing a py or nim file
[07:06:54] <arkanoid> ps -ae | grep nimsuggest shows it not running
[07:07:25] <FromDiscord> <evoalg> hate's a strong word, but I hate vscode
[07:08:25] <FromDiscord> <Elegantbeef> And it hates you!
[07:08:31] <FromDiscord> <Rika> I hate you beef
[07:08:32] <FromDiscord> <Rika> Smh
[07:08:39] <FromDiscord> <Elegantbeef> Everyone already knows that
[07:11:11] <FromDiscord> <evoalg> you young people ... only being able to show affection though mocking each other
[07:11:16] <arkanoid> I want to debug this, but I don't know where to start. Well, nimsuggest is not running, and that's a strong evidence that something is wrong
[07:11:52] <FromDiscord> <Elegantbeef> Open up the output tab and look at the nim extension output
[07:12:17] <FromDiscord> <Elegantbeef> If that doesnt work you may want clone the extension and build it from source to be able to debug it easier
[07:12:28] <arkanoid> it just says "2021-0011-05 04:0039:06.000306 - [info] Extension Activated"
[07:12:30] <arkanoid> and that's it
[07:13:06] <FromDiscord> <Rika> Can the program access Nim?
[07:13:13] <FromDiscord> <Rika> Like in vscode
[07:13:48] <arkanoid> what do you mean? if nim toolchain is in path? yes it is, I can run nim/nimble/nimsuggest in vscode terminal window
[07:21:44] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:24:51] <arkanoid> I've opened a but, hopefully I can get some info about how to debug this. Log is just silent/stuck
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:49:38] *** Joins: tiorock (~rc@192.12.112.100)
[07:49:38] *** Quits: tiorock (~rc@192.12.112.100) (Changing host)
[07:49:38] *** Joins: tiorock (~rc@user/rockcavera)
[07:49:39] *** rockcavera is now known as Guest3752
[07:49:39] *** tiorock is now known as rockcavera
[07:52:29] <arkanoid> got what happened. After moving from codium to ms vscode, latest workspace settings "drifted" into user settings, and I had wrong nim.projects settings
[07:53:11] *** Quits: Guest3752 (~rc@user/rockcavera) (Ping timeout: 252 seconds)
[08:04:52] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:28:12] <nrds> <06Prestige99> Is there an objectively "best" ui framework in Nim that runs on Linux? I was thinking of using the old gtk wrapper, unsure if there are better alternatives
[08:28:48] <FromDiscord> <leorize> all ui libs suck, unfortunately
[08:29:02] <FromDiscord> <leorize> gintro does work really well if you target linux, though
[08:29:31] <arkanoid> Rika, I did my benchmarks with this https://play.nim-lang.org/#ix=3GN2, and python seems 3x slower (209ms vs 589ms per loop). There are probably two elefants in the room: nimpy on and --d:debug
[08:29:51] <arkanoid> sorry, I meant the opposite. Nim seems 3x slower
[08:30:05] <FromDiscord> <Rika> Turn debug off then
[08:30:07] <FromDiscord> <Elegantbeef> Why are you benching with `-d:debug`?
[08:30:24] <FromDiscord> <Rika> And why Nimpy?
[08:30:51] <nrds> <06Prestige99> Thanks leorize
[08:32:58] <arkanoid> Rika, when I sent you this piece of python, for simplicity I omitted last line and changed return type. What the python real function really do is "return pd.DataFrame(data=rows, columns=cols) if len(rows) > 0 else None", so on the nim side it is "return if len(rows) > 0: pd.DataFrame(data = rows, columns = cols) else: nil" and return type PyObject
[08:33:34] <arkanoid> it wotks, but probably doing more copies than python<>pandas
[08:33:40] <arkanoid> not sure though
[08:33:45] <FromDiscord> <Rika> Yes
[08:33:47] <FromDiscord> <Rika> Likely
[08:42:28] <arkanoid> Rika, with release and arc it went python 236ms vs nim 270ms
[08:42:47] <arkanoid> next test would be to just return list of lists to python and avoid pandas on the nim side
[08:42:49] <FromDiscord> <Yardanico> try -d:danger also
[08:45:20] <arkanoid> with danger is 224ms vs 255ms
[08:46:09] <FromDiscord> <Yardanico> also you can try lto :P
[08:46:15] <FromDiscord> <Yardanico> --passC:"-flto" --passL:"-flto"
[08:47:18] <arkanoid> sure. Also this is the nim code I'm using https://play.nim-lang.org/#ix=3GQe
[08:47:31] <arkanoid> I algo guess theres seq allocation to optimize
[08:48:05] <FromDiscord> <Rika> If you know the sizes beforehand yes
[08:49:39] <arkanoid> with lfto is 220ms vs 254ms, no changes
[08:50:14] <arkanoid> second run 220 vs 243
[08:50:48] <arkanoid> well, it's near, but python yet faster. Surely there's nimpy in the middle, but not sure if it's doing copies or not
[08:51:13] <arkanoid> Rika, no I don't know the number of parsed lines beforehand
[08:52:14] <arkanoid> actually this is the code with imports: https://play.nim-lang.org/#ix=3GQf
[08:54:28] <arkanoid> by making column list a const now is 233 vs 237 :P
[08:54:58] <arkanoid> but there are fluctuations. not sure if %timeit is the right way to benchmark
[08:55:17] <FromDiscord> <Yardanico> @arkanoid also the python version is better optimized
[08:55:38] <arkanoid> is it?
[08:55:40] <FromDiscord> <Yardanico> list comprehensions don't need temporary lists, but in `line.split('|').mapIt(it.strip())` they are needed
[08:55:51] <FromDiscord> <Yardanico> compared to `[ll.strip() for ll in line.split(",")]`
[08:56:17] <FromDiscord> <Yardanico> hm
[08:56:26] <FromDiscord> <Yardanico> well anyway, they're close enough :)
[08:56:31] <arkanoid> would zeero-function keep the game going?
[08:56:37] <FromDiscord> <Yardanico> yes
[08:57:15] <arkanoid> sure! they are. Would be nice to know if this way to create and pass PyObject does imply more copies that in pure python
[08:57:31] <arkanoid> I'm actually "lending" PyObject here
[08:58:26] <arkanoid> or is it "lenting"? whatever
[09:00:46] <FromDiscord> <Cypheriel> do I smell nimpy
[09:01:43] <arkanoid> sure, that's the elephant in the room
[09:02:51] <FromDiscord> <Cypheriel> Nimpy's cool, but there's a lot that utterly confuses me ¬Ø\_(„ÉÑ)_/¬Ø
[09:02:54] <FromDiscord> <Yardanico> huh?
[09:02:57] <FromDiscord> <Yardanico> it's pretty simple
[09:03:02] <FromDiscord> <Cypheriel> I could not for the life of me get it to work with a virtual environment
[09:03:03] <FromDiscord> <Yardanico> it's a really high level cpython api wrapper
[09:03:18] <FromDiscord> <Cypheriel> and I didn't feel super comfortable using my system interpreter
[09:03:43] <FromDiscord> <Yardanico> have you seen https://github.com/yglukhov/nimpy/issues/152 and https://github.com/yglukhov/nimpy/issues/171 ?
[09:04:12] <arkanoid> replaced sequtils with zero functional, let's check who wins now
[09:04:36] <FromDiscord> <Cypheriel> I've not seen them, but now that I have... I think I'm even more confused
[09:05:16] <arkanoid> 'line' is of type <lent string> which cannot be captured as it would violate memory safety
[09:06:39] <arkanoid> Cypheriel, I use nimpy in a venv all the time. It just picks the python in your path, so an activated venv just works
[09:06:51] <FromDiscord> <Cypheriel> hm... it did not work that way for me
[09:07:14] <FromDiscord> <Cypheriel> I even used some uh... `nim-install` PyPi package
[09:07:27] <arkanoid> but I've also tried wild experiments, like building python on my own and link dyn link to it but also tried static linking for full. It worked out every time
[09:08:10] <FromDiscord> <Cypheriel> Well, I'm not exactly experienced with Nim or anything really of this specific nature, so I could definitely see the problem just being my inexperience
[09:08:26] <arkanoid> nimble init fooproj; cd fooproj; python3 -m venv venv; ./venv/bin/activate
[09:08:42] <FromDiscord> <Cypheriel> yeah... it just didn't work that way for me
[09:09:04] <FromDiscord> <Cypheriel> it'd also use my system Python even if I had something like 3.10.0 as my global interpreter from `pyenv`
[09:09:36] <FromDiscord> <Cypheriel> I did some testing just with echoing `py_import("platform").python_version`
[09:09:40] <arkanoid> if you run "type python" once you are into your venv, what do you see?
[09:10:14] <FromDiscord> <Cypheriel> well, I'm not on Linux atm, but when I'd do `where python` and `where python3`, it'd be the Python from my venv
[09:10:27] <FromDiscord> <Cypheriel> `python -V` and etc would confirm it
[09:10:45] <FromDiscord> <Cypheriel> but when I'd execute my nim code, it'd say 3.8
[09:10:51] <FromDiscord> <Cypheriel> (edit) "nim" => "Nim"
[09:11:22] <FromDiscord> <Cypheriel> (edit) "but when I'd execute my Nim code, it'd say 3.8 ... " 03added "(via platform.python_version + local modules could not be found)"
[09:15:02] <arkanoid> Cypheriel, as last resort, try pyInitLibPath https://play.nim-lang.org/#ix=3GQh
[09:15:14] <arkanoid> this is what I use to load custom compiled python in random dir
[09:16:17] <arkanoid> back to my optimization game: "for line in data.splitLines --> filter(it.strip.len > 0):" results in "NimCompileException:  'line' is of type <lent string> which cannot be captured as it would violate memory safety". Do you know why?
[09:18:59] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 252 seconds)
[09:24:51] <arkanoid> with zero functional is actually slower than with sequtils, now python 232ms vs nim 263ms
[09:27:01] <arkanoid> this is the current nim version, do you see other room for improvements? https://play.nim-lang.org/#ix=3GQl
[09:27:46] <FromDiscord> <Yardanico> well i think it might've gotten slower because you added a closure procedure
[09:27:57] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[09:28:40] <arkanoid> actually, yes, let me rethink
[09:28:52] <FromDiscord> <Yardanico> you can make both your python version and nim version a bit faster by iterating line-by-line instead of getting the whole list of lines
[09:30:17] <arkanoid> Yardanico, the python version is already doing that
[09:30:48] <FromDiscord> <Yardanico> is it?
[09:31:05] <FromDiscord> <Yardanico> you do `[ll for ll in data.splitlines() if ll and ll.strip()]` so you still create the whole list
[09:31:11] <arkanoid> for x in (line for line in data.splitlines() if line and line.strip()):
[09:31:17] <FromDiscord> <Yardanico> ah, yeah, this way yes
[09:31:36] <arkanoid> that's old code, I've been optimizing it after Rika suggestion
[09:31:46] <arkanoid> I've just make the nim code without closure
[09:31:53] <FromDiscord> <Yardanico> well it's hard to say anything if I can't test it myself and you modify the code :P
[09:32:55] <arkanoid> zero_functional without closure: https://play.nim-lang.org/#ix=3GQp
[09:38:30] <arkanoid> I've incremented the benchmark time to have more consistent results (now is %timeit -n 10). I'm getting python 286ms nim 321ms
[09:39:15] <arkanoid> this with arc, danger, lfto and zero_functional. Python can be quite surprising
[09:39:42] <FromDiscord> <Cypheriel> I suppose it's time to reboot my computer and see if I can get nimpy working in a venv
[09:39:50] <FromDiscord> <Cypheriel> but do I really wanna reinstall VSCode \üòî
[09:40:07] <arkanoid> what's the connection between the two?
[09:40:36] <FromDiscord> <Cypheriel> It's really the only editor I can sanely use with Nim, without having to tackle something like vim or emacs
[09:40:43] <arkanoid> fyi, I'm working with nim + nimpy + nimterop + vscode + python + venv right now, with all static checkers running
[09:41:18] <FromDiscord> <Cypheriel> I've never really had a good time with VSCode... I find configuring it to be quite the pain, and everything ends up feeling quite "hacky"
[09:41:27] <FromDiscord> <Rika> It‚Äôs only surprising because you‚Äôre going from Python to Nim to Python I would say
[09:41:51] <arkanoid> if vscode feels hacky, try real visual studio. 4x more options
[09:42:01] <FromDiscord> <Yardanico> In reply to @arkanoid "if vscode feels hacky,": no nim support :)
[09:42:12] <FromDiscord> <Cypheriel> Visual Studio on Linux would be quite the feat
[09:42:17] <FromDiscord> <Yardanico> i mean no proper autosuggest plugin, there is probably syntax highlighting though
[09:42:53] <FromDiscord> <Cypheriel> I've been thinking about learning something like emacs purely for Nim
[09:43:05] <FromDiscord> <Cypheriel> just because I'd feel like I'm the one in control of things
[09:43:18] <arkanoid> I jump between vscode and neovim (actually spacevim) quite happily
[09:44:01] <FromDiscord> <Rika> I learned neovim ‚Äúfor Nim‚Äù
[09:44:06] <FromDiscord> <Cypheriel> I've always tried learning vim/emacs but... I get fairly overwhelmed quite quickly
[09:44:14] <FromDiscord> <Cypheriel> In reply to @Rika "I learned neovim ‚Äúfor": "neonim" üòî
[09:44:19] <FromDiscord> <Rika> Lol
[09:44:42] <FromDiscord> <Rika> I did the ‚Äúlearn advanced stuff along the way‚Äù so I only know some of the basic commands by heart
[09:45:11] <FromDiscord> <Rika> If you asked me what a letter did in command mode I would have prolly a 50% chance of knowing
[09:46:13] <FromDiscord> <Cypheriel> I mean things like doom emacs seem pretty cool, but it's pretty tough getting past the learning curve
[09:47:15] <FromDiscord> <Cypheriel> also tbh there's like so many different Nim extensions for VSCode, I'd never even know if I'm using the right one
[09:47:24] <FromDiscord> <Rika> While not knowing if you will like it or not yeah I get it
[09:47:44] <FromDiscord> <Cypheriel> God only knows what an "LSP" is, too lol
[09:47:48] <FromDiscord> <Rika> Imagine spending a few hours learning something just to know if you‚Äôll like it or not
[09:48:08] <FromDiscord> <Cypheriel> in fairness, I'm kind of the same way with Nim as a language
[09:48:20] <arkanoid> I've repeated the benchmark removing pandas from the picture. Now function returns seq[seq[string]] (List[List[str]]]), and now nim shines
[09:48:52] <FromDiscord> <Rika> Well yeah
[09:48:59] <arkanoid> python 255ms, nim 152ms
[09:49:05] <FromDiscord> <Rika> Not much better huh
[09:49:11] <FromDiscord> <Rika> I mean I guess it is ‚Äúmuch‚Äù better
[09:49:41] <arkanoid> well, I was expecting more advantage in my opinion
[09:50:22] <arkanoid> but numbers are consistent, nim is 1.75x faster than python in this context
[09:52:00] <arkanoid> but to make this result, I had to turn the solution to zero_functional and make the code somehow harder to read than python
[09:52:38] <FromDiscord> <Rika> Nim does need better iterator libraries I guess
[09:52:39] <FromDiscord> <Yardanico> what if you don't use zero functional but have a normal iterator ?
[09:52:41] <arkanoid> so it's a fair result. Python and Nim are both good here. I'll stay on python as it seems that it has no overhead in returning a List[List[str]]] or a pd.Dataframe of that table
[09:52:55] <FromDiscord> <Yardanico> sure it's "more" code visually, but not really
[09:53:12] <FromDiscord> <Rika> Always an overhead somewhere by crossing interpreter boundaries
[09:53:32] <FromDiscord> <Yardanico> In reply to @Rika "Always an overhead somewhere": nonono he is benchmarking pure nim vs pure python right now
[09:53:38] <FromDiscord> <Yardanico> i think
[09:53:40] <FromDiscord> <Rika> Really?
[09:53:44] <FromDiscord> <Yardanico> yes
[09:53:53] <FromDiscord> <Yardanico> "I've repeated the benchmark removing pandas from the picture. Now function returns seq[seq[string]] (List[List[str]]]), and now nim shines"
[09:54:02] <FromDiscord> <Rika> In reply to @arkanoid "so it's a fair": Well I meant to say that against the last statement here
[09:54:11] <FromDiscord> <Yardanico> @arkanoid can you share the input data and whatever nim code you have now?
[09:54:17] <FromDiscord> <Yardanico> i'm a bit bored anyway, so i might as well tinker with it
[09:54:26] <FromDiscord> <Yardanico> or just tell me how to generate "similar" data
[09:55:04] <arkanoid> Yardanico, nope. I've a python function, and I've a nim function with {.exportpy.} that I compile to .so and I run from python next to the python one. It's a benchmark comparison where nimpy is part of the game and nim is the guest
[09:55:14] <FromDiscord> <Yardanico> oh
[09:55:33] <FromDiscord> <Yardanico> then yeah rika is right and the results are actually good :)
[09:56:24] <arkanoid> that was to test if it was worth replacing python function with nim ones, and the answer is "yes but only if you exchange base types" or something like that
[09:58:22] *** Joins: recreation (~recreatio@128.106.140.172)
[09:59:39] <arkanoid> Yardanico: I'm getting more "'line' is of type <lent string> which cannot be captured as it would violate memory safety" if I try hybrid sequtils & zero_functional approach where outer loop is sequtil and inner stuff is zero_functional
[09:59:58] <FromDiscord> <Rika> Can you not do hybrid?
[10:00:25] <arkanoid> sure, it was full zero_functional. I was trying to follow Yardanico
[10:01:08] <arkanoid> Rika, this is the full zero_functional version https://play.nim-lang.org/#ix=3GQp
[10:01:34] <arkanoid> but instead of returning the pd.Dataframe, I now return "rows" directly
[10:02:33] <arkanoid> like here: https://play.nim-lang.org/#ix=3GQt
[10:03:08] <FromDiscord> <Rika> Is it slower?
[10:03:23] <arkanoid> and this is actually faster than python returning same List[List[str]]], even crossing the border
[10:03:52] <FromDiscord> <Rika> Pandas might just be well optimised I guess
[10:05:13] <arkanoid> yes, it seems like it has zero cost creation. Returning List[List[str]]] or returning pd.Dataframe made from same rows from python function results in same benchmark time
[10:08:42] <arkanoid> well, this is surprising. Converting the List[List[str]]] on the python side to pd.Dataframe results to zero overhead for the python version but huge overhead to the nim version, even if already on the python side. Now I'm back to python 280ms vs nim 322ms
[10:11:41] <FromDiscord> <Yardanico> is it surprising though?
[10:13:24] <arkanoid> Yardanico, well, yes: https://play.nim-lang.org/#ix=3GQw
[10:14:10] <FromDiscord> <Yardanico> hmmm
[10:14:23] <FromDiscord> <Yardanico> just to be safe, you check that both nim and python give same values, right?
[10:14:32] <arkanoid> yes they do
[10:14:36] <arkanoid> just checked now
[10:14:37] <FromDiscord> <Yardanico> weird then
[10:15:50] <arkanoid> fyi the final result is a 16970 rows √ó 26 columns table
[10:23:52] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[10:30:17] <FromDiscord> <Cypheriel> So... is there a specific extension I should get for VSCode?
[10:30:20] <FromDiscord> <Cypheriel> for Nim, I mean
[10:32:24] <FromDiscord> <Cypheriel> I would think it's <https://marketplace.visualstudio.com/items?itemName=nimsaem.nimvscode>, but I'm not totally sure
[10:33:15] <arkanoid> Yardanico: I've opened an issue on nimpy's github to talk about it. It might be something relevant as nim <- data science -> python is a hot topic
[10:44:11] <FromDiscord> <Hamid Bluri> hey, i have an issue with collect macro https://media.discordapp.net/attachments/371759389889003532/916225786648875019/unknown.png
[10:44:55] <FromDiscord> <Hamid Bluri> the result of collect macro can't be passed as function paramter directly
[10:45:11] <FromDiscord> <Hamid Bluri> (edit) "collect" => "`collect`" | "paramter" => "parameter"
[10:45:51] <FromDiscord> <Rika> Parenthesise the collect
[10:46:53] <FromDiscord> <Hamid Bluri> pure pars without function call üòµ‚Äçüí´ https://media.discordapp.net/attachments/371759389889003532/916226463575982120/unknown.png
[10:47:42] <FromDiscord> <Hamid Bluri> should i open an issue or there is something i dont' know about nim üòï
[10:48:03] <FromDiscord> <Cypheriel> I don't think that's what they meant lol
[10:48:06] <FromDiscord> <Rika> Isn‚Äôt there a parameter after collect like newSeq or is that optional
[10:48:11] <FromDiscord> <Rika> It is what I meant
[10:48:17] <FromDiscord> <Hamid Bluri> In reply to @Rika "Isn‚Äôt there a parameter": it's optional
[10:48:26] <FromDiscord> <Cypheriel> right... in that case, I'm completely clueless as to how Nim works
[10:48:35] <FromDiscord> <Cypheriel> that is some cursed looking syntax lol
[10:49:12] <FromDiscord> <Hamid Bluri> In reply to @Rika "Isn‚Äôt there a parameter":  https://media.discordapp.net/attachments/371759389889003532/916227048983388169/unknown.png
[10:49:48] <FromDiscord> <Rika> I don‚Äôt know anymore really
[10:49:56] <FromDiscord> <Hamid Bluri> identifier expected, but found `collect newseq` ü§£
[10:50:14] <FromDiscord> <Hamid Bluri> ok, thank u anyway
[10:55:41] <FromDiscord> <Cypheriel> What would the Nim equivalent of Python's `iter()` be? I'm a bit confused lol
[10:56:26] <FromDiscord> <Rika> None afaik, need to manually make it yourself I guess but it shouldn‚Äôt be hard
[10:56:34] <FromDiscord> <Hamid Bluri> hey @Rika it does work that way https://media.discordapp.net/attachments/371759389889003532/916228900152049664/unknown.png
[10:56:44] <FromDiscord> <Rika> In reply to @Rika "None afaik, need to":  if you want a closure iterator
[10:56:51] <FromDiscord> <Rika> Otherwise it‚Äôs just .items() I assume
[10:57:11] <FromDiscord> <Rika> In reply to @hamidb80 "hey <@259277943275126785> it does": Oh nice I was thinking about that but thought it wouldn‚Äôt work
[10:57:35] <FromDiscord> <Hamid Bluri> In reply to @Cypheriel "What would the Nim": there is a package called `itertools` by narimiran that implements python's `itertools`
[10:57:53] <FromDiscord> <Cypheriel> Would that include `iter()`?
[10:58:06] <FromDiscord> <Cypheriel> cause technically `iter()` isn't from `itertools`
[10:58:18] <FromDiscord> <Rika> In reply to @Rika "Otherwise it‚Äôs just .items()": Isn‚Äôt this what you want or what
[10:58:34] <FromDiscord> <Hamid Bluri> In reply to @Cypheriel "cause technically `iter()` isn't": what do you wanna do?
[10:58:46] <FromDiscord> <Cypheriel> In reply to @Rika "Isn‚Äôt this what you": Let me test real quick
[10:59:01] <FromDiscord> <Hamid Bluri> it doesn't have `iter`‚Üµhttps://github.com/narimiran/itertools
[11:00:06] <FromDiscord> <Rika> Are you trying to get an iterator as a value?
[11:02:21] <FromDiscord> <Cypheriel> In reply to @Rika "Are you trying to": Um... I'm not sure how to explain it, one second
[11:03:16] <FromDiscord> <Cypheriel> sent a code paste, see https://play.nim-lang.org/#ix=3GQE
[11:03:24] <FromDiscord> <Cypheriel> this is basically what I'm trying to do
[11:06:10] <FromDiscord> <Yardanico> what you want is `toSeq`
[11:06:11] <FromDiscord> <Yardanico> from sequtils
[11:06:48] <FromDiscord> <Yardanico> that's to get values from an iterator call
[11:06:50] <FromDiscord> <Cypheriel> um... VSCode seems to be having a heart attack... one moment
[11:07:07] <FromDiscord> <Yardanico> you need to use the normal calling syntax for it though, mcs won't work
[11:07:17] <FromDiscord> <Yardanico> so `toSeq(myiter())` and not `myiter().toSeq()`
[11:07:34] <FromDiscord> <Cypheriel> so many errors have started appearing out of thin air
[11:08:16] <FromDiscord> <Elegantbeef> I believe in 1.6 `myIter().toSeq` should work
[11:08:16] <FromDiscord> <Cypheriel>  https://media.discordapp.net/attachments/371759389889003532/916231850907828244/Screenshot_20211203_003806.png
[11:08:25] <FromDiscord> <Yardanico> that's a warning
[11:08:32] <FromDiscord> <Cypheriel> Yes... but it shouldn't be there
[11:08:40] <FromDiscord> <Yardanico> well, maybe you have an error above?
[11:08:42] <FromDiscord> <Cypheriel> and it's just one of the many thin air errors that make no sense
[11:08:46] <FromDiscord> <Yardanico> if you have an error, warnings can be weird
[11:08:51] <FromDiscord> <Yardanico> try to compile
[11:09:33] <FromDiscord> <Cypheriel> sent a code paste, see https://play.nim-lang.org/#ix=3GQF
[11:09:53] <FromDiscord> <Yardanico> what nim version are you on?
[11:10:20] <FromDiscord> <Yardanico> `nim -v`
[11:10:40] <FromDiscord> <Cypheriel> sent a code paste, see https://play.nim-lang.org/#ix=3GQG
[11:10:40] <FromDiscord> <Yardanico> yeah that's quite old
[11:10:44] <FromDiscord> <Cypheriel> It is!?
[11:10:46] <FromDiscord> <Yardanico> latest nim version is 1.6.0, two major versions ahead
[11:10:50] <FromDiscord> <Cypheriel> How'd I manage that
[11:11:20] <FromDiscord> <Yardanico> In reply to @Cypheriel "How'd I manage that": use `choosenim` to install nim instead of using your distro's package manager
[11:11:40] <FromDiscord> <Cypheriel> oh
[11:11:49] <FromDiscord> <Cypheriel> The culprit was `nim-install` from PyPi
[11:12:16] <FromDiscord> <Cypheriel> sent a code paste, see https://play.nim-lang.org/#ix=3GQI
[11:12:46] *** Joins: cvoxel (~evilburp@169-0-73-64.ip.afrihost.co.za)
[11:13:12] *** Quits: cvoxel (~evilburp@169-0-73-64.ip.afrihost.co.za) (Remote host closed the connection)
[11:13:29] <FromDiscord> <Yardanico> yep
[11:15:44] <FromDiscord> <Cypheriel> Okay, removing that seems to have fixed the errors
[11:37:41] <FromDiscord> <claude> In reply to @hamidb80 "hey, i have an": for inline `:` blocks you need to use `do`. so you should be doing `len collect do:`
[11:38:30] <FromDiscord> <Rika> Oh yeah I forgot that existed
[11:41:51] *** Joins: PMunch (~PMunch@user/pmunch)
[11:59:24] *** Joins: xet7 (~xet7@user/xet7)
[12:36:26] *** Joins: krux02 (~krux02@p200300e8170c11004db6e8013ca32c23.dip0.t-ipconnect.de)
[12:48:33] <FromDiscord> <n00nehere> ayo
[12:48:54] <FromDiscord> <Yardanico> hi
[12:51:12] <FromDiscord> <n00nehere> what's a good game developing library that is not dead and does not need tons of boilerplate code?
[12:51:24] <FromDiscord> <n00nehere> and not godot, i don't like it
[12:51:40] <FromDiscord> <enthus1ast> hi [n00nehere](https://matrix.to/#/@n00nehere:converser.eu) you could join the nim game development channel
[12:51:45] <FromDiscord> <n00nehere> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/916257806255030322): and not godot, i don't like it(too stupid to use it)
[12:52:04] <FromDiscord> <n00nehere> wait how do i join it
[12:52:30] <FromDiscord> <n00nehere> ok i found it
[12:52:59] <FromDiscord> <n00nehere> joking there isn't
[12:53:14] <FromDiscord> <enthus1ast> https://matrix.to/#/#nim-gamedev:matrix.org
[12:53:31] <FromDiscord> <Yardanico> @n00nehere we have 10+ channels bridged to matrix
[12:53:31] <FromDiscord> <enthus1ast> (i never know how to share rooms in matrix ughh)
[12:53:52] <FromDiscord> <enthus1ast> #nim-gamedev\:matrix.org
[13:44:05] <NimEventer> New thread by Aredirect: Updating Nim Days, see https://forum.nim-lang.org/t/8674
[13:57:59] *** Joins: filcuc (~filippo@37.163.150.207)
[14:04:45] *** Quits: filcuc (~filippo@37.163.150.207) (Ping timeout: 256 seconds)
[14:04:49] *** Joins: filcuc_ (~filippo@37.163.150.207)
[14:13:14] *** Quits: filcuc_ (~filippo@37.163.150.207) (Ping timeout: 252 seconds)
[15:21:44] <FromDiscord> <firasuke> Are there any "official" vim plugins available for Nim?
[15:24:42] <PMunch> I use zah/nim
[15:24:47] <PMunch> And NimLSP
[15:24:51] <PMunch> Works pretty well
[15:26:38] <PMunch> I don't think there are any "official" Nim plugins. But Nim has a pretty loose model of contribution, so the line between official and unofficial is fairly faded
[15:27:00] <FromDiscord> <firasuke> I see
[15:27:11] <FromDiscord> <firasuke> which is more popular though?
[15:27:17] <FromDiscord> <firasuke> I suppose NimLSP is for nvim?
[15:27:32] <FromDiscord> <firasuke> (edit) "is for" => "can be used with"
[15:29:29] <PMunch> I guess so
[15:29:33] <PMunch> I use it with "normal" vim
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:43:51] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Quit: ZNC - https://znc.in)
[15:55:28] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[15:55:36] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[16:06:16] <FromDiscord> <retkid> So do you guys see a straight forward way to thread modifying a giant sequence
[16:06:48] <FromDiscord> <retkid> My idea is you consolidate the different parts, split it into however many threads
[16:07:21] <FromDiscord> <retkid> That might be the fastest way
[16:13:47] <PMunch> It totally depends on the algorithm you want to apply
[16:17:21] <PMunch> If it is embarrassingly parallelizable then I would simply spin up N threads and pass them a pointer to the `(mySeq.len div N) * ThreadNum`th element. Then they can modify their chunk of the elements in place. As long as the sequence is used afterwards you shouldn't run into any GC trouble, I think..
[16:25:48] *** Quits: recreation (~recreatio@128.106.140.172) (Quit: Leaving)
[16:28:43] <FromDiscord> <retkid> In reply to @PMunch "If it is embarrassingly": I‚Äôm afraid of the Len changing during a insertion  that
[16:28:47] <FromDiscord> <retkid> (edit) " that" => "there"
[16:29:10] <FromDiscord> <retkid> Then I‚Äôd have to keep it inplace
[16:29:24] <FromDiscord> <retkid> Which limits me somewhat
[16:37:17] *** Joins: src (~src@user/src)
[17:10:41] <PMunch> Wait, you're changing the length?
[17:10:52] <PMunch> Then you'd definitely need a completely different solution
[17:23:40] <FromDiscord> <hmmm> yo boiz can u link to the config.nims section of the manual
[17:23:43] <FromDiscord> <hmmm> can't find
[17:29:08] <FromDiscord> <hmmm> oh it's nimble stuff
[17:30:03] <FromDiscord> <Solitude> In reply to @hmmm "yo boiz can u": https://nim-lang.org/docs/nims.html
[17:32:58] <FromDiscord> <hmmm> oh I see
[17:33:42] <FromDiscord> <hmmm> this is comfy I was adding flags by hand why the collective of nim discord didn't tell me earlier üßê
[17:33:59] *** Joins: xet7 (~xet7@user/xet7)
[17:42:50] <PMunch> Hmm, is there no way to receive a single UDP datagram in Nim?
[17:43:16] <PMunch> @hmmm, how would we know you didn't add them to a file :P
[17:46:01] <FromDiscord> <hmmm> In reply to @PMunch "<@887269570765791243>, how would we":  https://media.discordapp.net/attachments/371759389889003532/916331943220609024/usagyuuun-mini-fight.gif
[17:50:32] <FromDiscord> <retkid> In reply to @PMunch "Wait, you're changing the": I can make it implace or not idk
[17:54:25] <Amun-Ra> hmm, how to allocate cstring with given size?
[17:59:32] <PMunch> Well, you're not really supposed to
[17:59:46] <PMunch> But a cstring is just a `ptr char`
[17:59:50] <PMunch> Same as in C
[18:00:38] <PMunch> So you just have to allocate memory somehow
[18:00:54] <FromDiscord> <Cypheriel> uh oh... I must've done something quite bizarre
[18:01:04] <FromDiscord> <Cypheriel> sent a code paste, see https://play.nim-lang.org/#ix=3GSw
[18:01:29] <Amun-Ra> hm
[18:01:34] <Amun-Ra> PMunch: thanks
[18:01:45] <PMunch> I like to use `newString(someLen)` and then `cast[cstring](myStr[0])`. And then, since most C functions that handle string data returns a new size I would then do `myStr.setLen(returnOfCProcedure)`
[18:02:43] <Amun-Ra> how about create(char, 1024)?
[18:03:32] <PMunch> That would also work
[18:03:51] <PMunch> But then you wouldn't be able to treat it as a string in Nim
[18:04:08] *** Joins: rockcavera (~rc@192.12.112.240)
[18:04:09] *** Quits: rockcavera (~rc@192.12.112.240) (Changing host)
[18:04:09] *** Joins: rockcavera (~rc@user/rockcavera)
[18:04:19] <Amun-Ra> I need a buffer to work with libz 
[18:05:02] <PMunch> If you just have `var myCStr = cast[cstring](create(char, 1024)` and then `echo myCStr` that will copy the cstring content over into a string IIRC.
[18:05:27] <PMunch> And of course with `create` you need to deallocate the memory yourself
[18:05:39] <Amun-Ra> I'll try newString, no need to dealloc
[18:05:53] <PMunch> You could of course also do `seqSeq[char]`
[18:06:00] <PMunch> newSeq*
[18:06:07] <Amun-Ra> hmm
[18:06:57] <PMunch> After all in Nim `type string = distinct seq[char]`
[18:07:11] <PMunch> Not actually, but effectively
[18:07:40] <Amun-Ra> and I'll change definition of inbuf and outbuf from cstring to pointer
[18:08:35] <PMunch> `ptr UncheckedArray[char]` is probably the best type to wrap it as
[18:08:46] *** Joins: cvoxel (~evilburp@2a01:4f8:c0c:5dd8::1)
[18:08:59] <Amun-Ra> oh, right
[18:11:38] *** Parts: cvoxel (~evilburp@2a01:4f8:c0c:5dd8::1) ()
[18:16:53] *** Joins: arkurious (~arkurious@user/arkurious)
[18:32:19] *** Joins: terminalpusher (~terminalp@2a01:586:a4a5:1:393:e590:b69b:2236)
[18:45:11] <PMunch> Streaming day 3 of AoC right now! https://www.twitch.tv/pmunche
[19:09:51] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[19:23:13] <FromDiscord> <iffy (Matt Haggard)> I want to write unittests for some procs that manipulate `NimNode`s but the compiler complains with this error\: "request to generate code for .compileTime proc\: renderAST" What are my options? Put my tests in `static:` blocks?
[19:28:32] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[19:29:48] *** Joins: akp (~Abi@230.88.115.87.dyn.plus.net)
[19:38:14] *** Quits: akp (~Abi@230.88.115.87.dyn.plus.net) (Quit: Leaving)
[19:42:52] <FromDiscord> <dain> is there a way in arraymancer to turn an array of booleans into an integer
[19:43:09] <FromDiscord> <dain> i.e. treat the booleans as the values of the bitfields in the int
[19:44:11] <FromDiscord> <dain> [true, true, false, true, false, true, true, false] -> interpret as 11010110 == 214
[19:44:23] <FromDiscord> <dain> without converting it to a string and using the parse functions
[19:45:25] <FromDiscord> <dain> sent a code paste, see https://play.nim-lang.org/#ix=3GTf
[19:48:33] <FromDiscord> <vindaar> no offense, but why is this something that should be built into arraymancer? That seems like something that should be a convenience proc in some bitarray like module
[19:52:20] <FromDiscord> <dain> guess so
[20:10:09] *** Joins: xet7 (~xet7@user/xet7)
[20:25:21] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[20:25:39] *** Joins: noeontheend (~noeonthee@12.205.205.130)
[20:27:59] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:34:47] <FromDiscord> <Zoom> Better to stay in uint/int and use `ord` if you need to treat bits as boolean
[20:42:31] *** Joins: Vladar (~Vladar@46.162.2.53)
[20:47:21] *** Joins: pro (~pro@user/pro)
[20:52:17] *** Joins: Pyautogui (~Pyautogui@136.228.206.213)
[20:53:31] *** Quits: Pyautogui (~Pyautogui@136.228.206.213) (Client Quit)
[21:04:39] *** Quits: noeontheend (~noeonthee@12.205.205.130) (Ping timeout: 256 seconds)
[21:08:29] *** Quits: pro (~pro@user/pro) (Quit: WeeChat 3.3)
[21:33:45] <FromDiscord> <dain> is there any downside to making all my procs generic
[21:33:53] <FromDiscord> <dain> or making them generic as much as possible, at any rate
[21:38:59] *** Joins: xet7 (~xet7@user/xet7)
[22:07:25] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GTX
[22:07:50] <FromDiscord> <TryAngle> (edit) "https://play.nim-lang.org/#ix=3GTX" => "https://play.nim-lang.org/#ix=3GTY"
[22:09:10] *** Joins: sdmcallister (~sdmcallis@2607:fea8:e1c0:7f60:6c26:75ea:371a:3631)
[22:15:56] *** Quits: terminalpusher (~terminalp@2a01:586:a4a5:1:393:e590:b69b:2236) (Remote host closed the connection)
[22:23:18] <FromDiscord> <Cypheriel> What does one do if a function requires a kwarg like `end`? O.o
[22:29:49] <FromDiscord> <sdmcallister> The duckdb c api has funtion that returns a pointer to a result array in a columnar format  `int32_t i_data = (int32_t ) duckdb_column_data(&result, 0);` `result` is the query result and 0 is the column number.  They give an example of printing a value from the array in C like `printf("%d", i_data[row]);`
[22:31:27] <FromDiscord> <sdmcallister> Just wondering how I would go about this in Nim.
[22:36:49] <FromDiscord> <sdmcallister> sent a code paste, see https://play.nim-lang.org/#ix=3GU7
[22:55:58] *** Quits: sdmcallister (~sdmcallis@2607:fea8:e1c0:7f60:6c26:75ea:371a:3631) (Quit: Client closed)
[23:04:16] <NimEventer> New post on r/nim by Samaursa: Nim Debugging on Windows (with VS Code), see https://reddit.com/r/nim/comments/r874za/nim_debugging_on_windows_with_vs_code/
[23:07:12] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3GUg
[23:09:02] <FromDiscord> <TryAngle> (I have never written any c except for basic universtiy cource)
[23:18:46] <FromDiscord> <Cypheriel> I'm so very confused. How does one convert a `PyObject` to an `int`
[23:22:21] <NimEventer> New post on r/nim by monkey_fresco: How to send cookies with getContent?, see https://reddit.com/r/nim/comments/r87hv5/how_to_send_cookies_with_getcontent/
[23:40:16] *** Joins: audiophile (~audiophil@user/audiophile)
[23:41:49] <audiophile> hi anyone doing aoc
[23:42:02] <audiophile> i dont mean the politician, i mean the code challenge thingy
[23:54:34] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
