[00:03:03] <b0nn> https://go.dev/play/p/gmge7VSSRRo
[00:03:44] <murd0c> ok, i can implement an interface even its only data with no methods?
[00:03:57] <ikke> It's the methods that determine the interface
[00:04:08] <ikke> if the interface has no methods, any struct would satisfy it
[00:04:17] <ikke> for example 'interface{}'
[00:04:22] <b0nn> interface{}, but be warned interface{} means reflect is going to be called
[00:04:33] <b0nn> hmm, or just type assertions
[00:05:11] <b0nn> It's not a pretty solution
[00:05:26] <ikke> But you can add some methods to structs for an interface
[00:05:26] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:05:58] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[00:08:14] <murd0c> yep, I think that was the deal. I'll try it!
[00:08:16] <murd0c> thanks!
[00:11:37] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Quit: Ping timeout (120 seconds))
[00:11:47] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[00:13:49] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[00:30:45] *** Quits: treeford (~charleste@user/treeford) (Quit: WeeChat 3.3)
[00:32:19] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[00:32:36] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-051d-e96c-af20-267b.ip6.gigabit.dk) (Quit: Leaving)
[00:33:53] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:59] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[00:34:39] *** Joins: ricci (~ricci@31.187.110.131)
[00:35:14] *** Joins: treeford (~charleste@user/treeford)
[00:44:43] *** Quits: jjonah (~jjonah@p200300d5d7249400dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[00:45:15] *** Joins: d42 (~root@user/d42)
[00:46:35] *** Quits: absc (~absc@dynamic-adsl-94-34-200-127.clienti.tiscali.it) (Remote host closed the connection)
[00:47:19] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[00:51:49] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[00:57:31] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:00:22] *** Quits: rek2 (~ReK2@user/rek2) (Quit: WeeChat 3.5)
[01:05:26] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[01:06:12] <b0nn> gopls 0.82 has just been released
[01:06:51] <b0nn> they were waiting for staticcheck to get sorted with generics, I wonder if that means that staticcheck is now across that line
[01:09:31] <ikke> I checked the latest realese and it no longer barfs
[01:10:03] * b0nn hits the like button
[01:19:23] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:23:48] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:24:36] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 240 seconds)
[01:25:06] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:27:23] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:28:37] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:29:00] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[01:29:04] <LtHummus> is there an easy way to see if a channel is closed? I'm writing some tests and want to make sure that my code is closing a channel properly
[01:31:09] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[01:33:19] <lungaro> why are net/http client timeouts so complicated?
[01:33:27] <lungaro> is there a way to just time box the entire operation?
[01:33:46] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[01:33:58] <lungaro> dial timeout, connect timeout, read header timeout, tls timeout, http continuation timeout..
[01:34:01] <lungaro> i'm sure more
[01:34:58] <lungaro> ah, looks like I can do WithContext()
[01:34:59] <lungaro> nvm
[01:37:50] *** ElderMalaclypse is now known as apotheon
[01:38:56] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:43:10] <fizzie> LtHummus: Yeah, a two-result-values form of the receive operator returns an `ok` output that's false if and only if the channel was closed (kind of like indexing a map). And you can stick it in a `select` if you want to make sure it doesn't block: https://go.dev/play/p/DHFuhM74Qm6
[01:43:53] <fizzie> (Gratuitous use of generics there, but just ignore that.)
[01:44:33] *** Quits: clemens3 (~clemens@225.40.150.83.ftth.as8758.net) (Ping timeout: 256 seconds)
[01:45:08] <fizzie> It _will_ consume a value from the channel, though, if it's not closed and the channel is ready to receive. But if that case is going to end up in a failed test anyway, hopefully that's not an issue.
[01:52:58] *** Joins: g2anj (~v@58.228.230.4)
[01:53:54] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[01:54:42] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[01:55:31] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 246 seconds)
[01:56:57] *** Joins: kakysha (~kakysha@user/kakysha)
[01:57:46] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:58:51] *** Joins: clemens3 (~clemens@225.40.150.83.ftth.as8758.net)
[02:06:51] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:06:51] <LtHummus> yeah sounds like i can just recieve with an `ok` output and assert that `ok` is false and the returned value is empty
[02:06:52] <LtHummus> thanks
[02:07:35] *** Quits: adip (~adip@dev80.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[02:14:08] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Ping timeout: 272 seconds)
[02:14:46] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 272 seconds)
[02:17:50] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Remote host closed the connection)
[02:18:29] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:18:30] *** Quits: nagylzs (~nagylzs@catv-89-134-249-35.catv.fixed.vodafone.hu) (Quit: Leaving)
[02:18:51] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7)
[02:21:57] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[02:22:45] *** Joins: treeford (~charleste@user/treeford)
[02:25:25] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:26:25] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[02:29:06] *** elastic_1 is now known as elastic_dog
[02:29:09] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[02:29:45] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:30:21] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:32:33] *** Joins: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:33:18] <b0nn> hmm if you have a goroutine that you are testing, the test will be racy
[02:33:59] <b0nn> unless you are running the code the goroutine runs itself, in which case the channel will be on the same goroutine as the test.. which makes testing... difficult
[02:34:24] *** Quits: craekz (~craekz@user/craekz) (Ping timeout: 272 seconds)
[02:34:34] *** Joins: craekz (~craekz@user/craekz)
[02:34:34] <b0nn> accurate testing*
[02:34:41] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:37:50] <LtHummus> yeah it's ... complicated, but i am calling the code (in the test) that in theory should create the channel, create the consumer, do some stuff with both, and then close and cleanup everything
[02:38:19] <LtHummus> and i want to make sure i'm not leaving channels open and littered around :)
[02:40:22] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[02:40:55] <fizzie> The "official" (as in, they put it in the Tour) is that generally you need not bother. https://go.dev/tour/concurrency/4 "Another note: Channels aren't like files; you don't usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop."
[02:41:25] <LtHummus> the consumer is indeed doing a range loop, so i do need to close
[02:41:26] <fizzie> You may decide to, of course. Especially if you think the channel remaining open is likely to indicate a goroutine was left waiting on it.
[02:42:52] <b0nn> Yeah - I don't think closing is "We're finished with this resource now, you can drop it, because the reader(s) will still have areference to it
[02:43:15] <b0nn> Meaning the GC will always skip over it
[02:43:25] <b0nn> </wild reckons>
[02:44:55] <foobaz> that's true, closing a channel and garbage collecting it are completely orthogonal
[02:46:33] *** Quits: independent56 (~independe@2.25.26.98) (Remote host closed the connection)
[02:47:58] *** Joins: independent56 (~independe@2.25.26.98)
[02:50:04] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[02:51:27] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[02:51:35] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:57:00] *** Quits: independent56 (~independe@2.25.26.98) (Ping timeout: 240 seconds)
[02:58:01] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Quit: Leaving)
[03:03:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[03:05:35] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[03:07:42] *** Quits: mpldr (~mpldr@user/mpldr) (Quit: WeeChat 3.5)
[03:18:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:19:52] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[03:19:55] *** Quits: dvdmuckle (~dvdmuckle@user/dvdmuckle) (Quit: Bouncer Surgery)
[03:20:05] *** Joins: Techcable (~Techcable@user/Techcable)
[03:21:16] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[03:21:18] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[03:21:25] *** Joins: rcernin (~rcernin@101.189.129.123)
[03:23:42] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[03:25:16] *** Joins: Techcable (~Techcable@user/Techcable)
[03:29:23] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 256 seconds)
[03:39:30] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:39:52] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7)
[03:42:48] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[03:53:29] *** Joins: ash_worksi (~ash_m@user/ash-m/x-3292451)
[03:53:31] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[03:53:46] <ash_worksi> how popular is it to keep routing configuration in a configuration file such as yaml?
[03:56:11] *** Joins: epony (epony@user/epony)
[04:04:22] <b0nn> more popular than keeping it in json
[04:07:53] <ash_worksi> b0nn: more popular than baking it into main() ?
[04:08:24] <b0nn> heh, 12 facto app would say baking itno main == bad
[04:08:34] <ash_worksi> hmm
[04:08:47] <b0nn> what are you meaning by "routing" information, mux routing, network routing?
[04:08:52] <ash_worksi> b0nn: I appreciate that response, but is it incidentally more popular
[04:08:53] <ash_worksi> ?
[04:09:06] <ash_worksi> b0nn: a mapping of paths to handlers
[04:09:16] <b0nn> oh, mux routing
[04:09:31] <b0nn> yeah - I normally keep those in a routes.go
[04:10:12] <b0nn> main.go calls some function in routes.go that returns all of the ebdpoint -> handler info
[04:10:57] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[04:16:48] <ash_worksi> so routes.go just defines NewRouter() or so?
[04:16:57] <ash_worksi> oh
[04:17:51] <ash_worksi> no it doesn't I suppose. So is it just a function taking a path with a swtich?
[04:19:48] <ash_worksi> like case "/path/to/thing": return thingHandler
[04:19:53] *** Joins: treeford (~charleste@user/treeford)
[04:25:51] <bpalmer> that's the basic implementation for a barebones mux.
[04:27:43] <bpalmer> I might be tempted by routes.NewMux() , although I guess returning a []struct{Pattern string, Handler http.Handler }{ ... } would make it easier to combine several into a single mux.
[04:27:52] *** Joins: m25n (~m25n@67.142.235.252)
[04:31:51] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:33:59] *** Quits: m25n (~m25n@67.142.235.252) (Ping timeout: 256 seconds)
[04:38:30] <ash_worksi> but routes are typically kept in a separate file written in go?
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:15] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[04:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:53:19] <seebs> "typically" seems like it's very much the wrong question
[04:53:31] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[04:53:47] <seebs> i'm not sure what's typical, and i doubt anyone here has seen more than 0.01% of web apps written in Go, so I'm not sure anyone here would know what is typical, but also why does "typical" matter?
[04:53:49] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[04:53:57] <b0nn> strictly speaking they can be almost anywhere; routes.go is a handy name because... it's where the routes are
[04:56:02] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[04:57:23] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[05:03:13] *** Parts: Sqaure (~a@user/square) (Leaving)
[05:03:18] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[05:05:27] <ash_worksi> b0nn: so for a handy routes.go file, would you expect that to return just a []struct or a fully configured mux router?
[05:05:37] <ash_worksi> s/would/might/
[05:22:14] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:23:36] *** Joins: favadi (~favadi@2001:ee0:4081:6914:4466:e3ad:3666:affe)
[05:33:35] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[05:34:41] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[05:34:57] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:35:54] *** Quits: saml_ (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:43:07] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 256 seconds)
[05:44:15] *** Quits: phylaz (~phylaz@82.51-174-55.customer.lyse.net) (Ping timeout: 256 seconds)
[05:49:24] *** Joins: neurocyte8614 (~neurocyte@IP-094016090045.dynamic.medianet-world.de)
[05:49:24] *** Quits: neurocyte8614 (~neurocyte@IP-094016090045.dynamic.medianet-world.de) (Changing host)
[05:49:24] *** Joins: neurocyte8614 (~neurocyte@user/neurocyte)
[05:50:07] <b0nn> The answer to that is - do you understand coupling?
[05:51:32] *** Quits: neurocyte861 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:51:33] *** neurocyte8614 is now known as neurocyte861
[05:51:58] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:53:00] *** Quits: favadi (~favadi@2001:ee0:4081:6914:4466:e3ad:3666:affe) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:56:50] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[05:57:18] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[05:59:06] *** Joins: Church (~aleph@68.161.207.188)
[06:01:34] *** Quits: murd0c (~Murdoc@user/murd0c) (Ping timeout: 246 seconds)
[06:10:39] *** Joins: favadi (~favadi@2001:ee0:4081:6914:f515:3fd0:10f1:6a2)
[06:11:11] *** Joins: treeford (~charleste@user/treeford)
[06:17:22] *** Joins: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net)
[06:23:32] *** Quits: LogicAside (~LogicAsid@user/logicaside) (Quit: That's a thinker...)
[06:23:40] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[06:25:04] *** Joins: jw4 (~jw4@user/jw4)
[06:25:40] *** Joins: LogicAside (~LogicAsid@user/logicaside)
[06:29:01] *** Quits: AriESQ (~user@user/AriESQ) (Remote host closed the connection)
[06:30:01] *** Quits: sztanpet (sztanpet@user/sztanpet) (Quit: asd)
[06:30:34] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[06:30:46] *** Joins: califax (~califax@user/califx)
[06:33:59] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:34:02] *** Joins: sztanpet (sztanpet@user/sztanpet)
[06:43:36] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[06:44:55] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:52:58] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[06:57:03] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[06:58:02] *** Joins: jmtb (~jmtb@cs662597-210.bham.rr.com)
[06:58:04] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[07:01:16] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Client Quit)
[07:01:35] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[07:03:33] *** Joins: andlabs (~andlabs@172.102.12.78)
[07:03:49] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:06:50] *** Quits: jmtb (~jmtb@cs662597-210.bham.rr.com) (Quit: Connection closed)
[07:13:13] *** Quits: andlabs (~andlabs@172.102.12.78) (Ping timeout: 260 seconds)
[07:16:26] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:18:13] *** Quits: theoceaniscool_ (~theoceani@213.94.16.92) (Ping timeout: 246 seconds)
[07:18:34] *** Joins: andlabs (~andlabs@2605:ef80:8084:2169:bd29:7831:d89c:8cd5)
[07:20:50] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[07:20:59] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:55b8:132a:d761:dcab:904c) (Ping timeout: 252 seconds)
[07:31:24] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Quit: xiongxin)
[07:31:25] *** Joins: xiongxin1 (~Thunderbi@117.136.33.222)
[07:31:50] *** Joins: theoceaniscool_ (~theoceani@213.94.16.92)
[07:32:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.4)
[07:32:23] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[07:32:56] *** Quits: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Quit: WeeChat 3.3)
[07:33:27] *** Joins: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[07:33:45] *** xiongxin1 is now known as xiongxin
[07:37:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[07:37:43] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[07:41:45] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[07:44:47] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[07:55:03] *** Joins: andlabs_ (~andlabs@2605:ef80:8085:217d:916a:6438:7664:d77d)
[07:55:15] *** Quits: andlabs (~andlabs@2605:ef80:8084:2169:bd29:7831:d89c:8cd5) (Ping timeout: 260 seconds)
[08:03:23] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:04:07] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:05:08] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:07:23] *** Quits: andlabs_ (~andlabs@2605:ef80:8085:217d:916a:6438:7664:d77d) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:09:53] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[08:12:45] *** Joins: andlabs (~andlabs@2605:ef80:8085:217d:2831:9f66:4d0f:535b)
[08:17:50] *** Quits: andlabs (~andlabs@2605:ef80:8085:217d:2831:9f66:4d0f:535b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:21:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:25:31] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 256 seconds)
[08:25:35] *** Quits: KekS (~KekSi@77.189.143.122) (Ping timeout: 260 seconds)
[08:26:07] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[08:30:06] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[08:30:24] *** Joins: KekSi (~KekSi@dynamic-077-012-024-247.77.12.pool.telefonica.de)
[08:32:50] *** Joins: mooff (mooff@awful.cooking)
[08:33:46] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[08:34:13] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[08:41:04] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Read error: Connection reset by peer)
[08:43:19] *** Quits: shtirlic_ (~shtirlic@184.22.157.64) (Ping timeout: 256 seconds)
[09:02:15] *** Joins: adip (~adip@aedz200.neoplus.adsl.tpnet.pl)
[09:06:35] *** Parts: mrus (~mrus@gateway/tor-sasl/mrus) ()
[09:06:46] *** Quits: mickey (~user@user/mickey) (Ping timeout: 260 seconds)
[09:08:49] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[09:15:04] *** Joins: mickey (~user@user/mickey)
[09:15:06] *** Joins: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk)
[09:15:27] *** Joins: walterwhip (~walterwhi@user/walterwhip)
[09:18:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[09:22:16] *** Quits: csmarchbanks_ (~csmarchba@prometheus/team/csmarchbanks) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:22:55] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[09:23:18] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[09:32:32] *** Joins: han-solo (~han-solo@user/han-solo)
[09:37:47] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:38:28] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 260 seconds)
[09:39:00] *** Quits: Skriptmonkey (~Skriptmon@82-92-237-24.gci.net) (Remote host closed the connection)
[09:44:43] *** Joins: han-solo (~han-solo@user/han-solo)
[09:45:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:50:29] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[09:52:09] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[09:52:16] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Remote host closed the connection)
[09:52:44] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[09:53:38] *** Quits: favadi (~favadi@2001:ee0:4081:6914:f515:3fd0:10f1:6a2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:58:54] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:06:09] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:11:31] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 260 seconds)
[10:11:46] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:13:26] *** Joins: han-solo (~han-solo@user/han-solo)
[10:20:29] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[10:22:13] *** Joins: rvalue (~rvalue@user/rvalue)
[10:23:49] *** Joins: favadi (~favadi@2001:ee0:4081:6914:e882:c38c:eda6:1708)
[10:26:52] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 272 seconds)
[10:27:32] *** Joins: mpldr (~mpldr@user/mpldr)
[10:27:37] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[10:29:28] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:30:19] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[10:31:09] *** Joins: independent56 (~independe@2.25.26.98)
[10:31:33] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[10:32:26] *** Joins: ekathva_ (~ekathva@mobile-access-b04823-216.dhcp.inet.fi)
[10:33:50] *** Quits: ekathva_ (~ekathva@mobile-access-b04823-216.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:35:03] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 260 seconds)
[10:36:11] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Remote host closed the connection)
[10:36:20] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[10:37:00] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[10:40:38] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[10:43:05] *** Joins: treeford (~charleste@user/treeford)
[10:43:41] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 246 seconds)
[10:45:44] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[10:47:46] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 272 seconds)
[10:49:26] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[10:53:32] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:02:18] *** Joins: xiongxin (~Thunderbi@117.136.33.222)
[11:02:36] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[11:08:16] *** Joins: mncheck (~mncheck@193.224.205.254)
[11:12:39] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 260 seconds)
[11:13:00] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[11:15:41] *** Joins: phylaz (~phylaz@82.51-174-55.customer.lyse.net)
[11:17:07] *** Joins: habamax (~habamax@user/habamax)
[11:19:23] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 260 seconds)
[11:21:57] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[11:22:51] *** Joins: koo5_ (~quassel@51.140.155.227)
[11:31:47] *** Quits: d42 (~root@user/d42) (Ping timeout: 260 seconds)
[11:34:20] *** Parts: pgloor (~petergloo@bit.cubus.space) (The Lounge - https://thelounge.chat)
[11:41:26] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[11:44:40] <aLeSD[m]> hi all
[11:44:56] <aLeSD[m]> which is the best way to autogenerate mocks in golang ?
[11:44:56] *** Joins: d42 (~root@user/d42)
[11:45:28] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[11:48:18] *** Joins: cabazon (~cabazon@192.55.54.37)
[11:48:33] <cabazon> Hi, I just applied to Lyft, Uber and Pinterest; apparently all they use golang
[11:48:41] <cabazon> excited!
[11:50:21] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:50:51] *** Joins: hanzo (uid532183@user/hanzo)
[11:51:04] <bpalmer> that's not what they mean when somebody stumbles into your car's back seat and tells you to "go! go! just go!"
[11:51:12] <mpldr> aLeSD[m]: https://github.com/golang/mock this one is quite often used… to a point where I'd call it the first-stop mock generator
[11:51:30] <bpalmer> but good luck on the applications, cabazon
[11:52:15] <aLeSD[m]> mpldr: thanks
[11:52:38] *** Quits: independent56 (~independe@2.25.26.98) (Ping timeout: 246 seconds)
[11:57:44] <cabazon> The thing is, I've got 15 YOE in software, mostly C/firmware/kernel + devops/github
[11:57:54] <cabazon> but been doing golang only recently
[11:58:08] <cabazon> I hope that's enough, I'm a big fan of go
[11:58:09] *** Joins: shka (~herr@109.231.3.55)
[12:01:28] *** Quits: haliucinas (~52b4903d@5.20.153.21) (Quit: haliucinas)
[12:01:50] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:01:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[12:02:45] *** Joins: haliucinas (~d5c5a67e@5.20.153.21)
[12:07:37] *** Joins: han-solo (~han-solo@user/han-solo)
[12:10:52] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[12:12:23] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Read error: Connection reset by peer)
[12:13:43] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Read error: Connection reset by peer)
[12:13:58] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[12:14:06] *** Quits: batdog (~batdog@lnsq.elkins.co) (Quit: Bye)
[12:15:57] *** Joins: batdog (batdog@lnsq.elkins.co)
[12:18:07] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[12:20:32] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[12:20:50] <b0nn> aLeSD[m]: If I am creating a mock I go to the interface I am mocking, and grab all of the functions, then just paste them into a *_test.go file (prepending them with func (something *Something), and appending {}
[12:22:23] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[12:30:10] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:36:35] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[12:38:43] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 260 seconds)
[12:40:06] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:41:41] *** Joins: R2robot_ (~R2robot@user/r2robot)
[12:42:13] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[12:42:25] *** Joins: Atque (~Atque@user/atque)
[12:42:43] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 260 seconds)
[12:43:57] *** Joins: ricci (~ricci@31.187.110.131)
[12:44:59] *** Quits: batdog (batdog@lnsq.elkins.co) (Quit: Bye)
[12:45:23] *** Joins: batdog (batdog@lnsq.elkins.co)
[12:45:29] *** Quits: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net) (Ping timeout: 246 seconds)
[12:45:34] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[12:46:35] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:48:21] *** Quits: cabazon (~cabazon@192.55.54.37) (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
[12:48:33] *** Joins: cabazon (~cabazon@192.55.54.37)
[12:51:54] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 272 seconds)
[12:53:06] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:54:16] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Quit: Leaving)
[12:55:12] *** Joins: rcernin (~rcernin@101.189.129.123)
[12:56:30] *** Joins: jjonah (~jjonah@p200300d5d7249400dea632fffeb3342f.dip0.t-ipconnect.de)
[12:57:18] *** Quits: cabazon (~cabazon@192.55.54.37) (Quit: http://www.kiwiirc.com/ - A hand crafted IRC client)
[12:59:42] *** Joins: nucleargrave (~nucleargr@c-73-150-253-137.hsd1.nj.comcast.net)
[13:04:39] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[13:04:58] *** Joins: teasea (~teasea@user/teasea)
[13:08:48] *** Quits: belphegor666 (~satan@user/belphegor666) (Quit: WeeChat 3.4)
[13:09:08] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[13:10:30] *** Quits: xiongxin (~Thunderbi@117.136.33.222) (Read error: Connection reset by peer)
[13:15:27] *** Joins: me-sudoer-dentne (~me-sudoer@2409:4071:2292:ea90:2154:3fa0:f58a:8ee0)
[13:15:40] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[13:15:40] *** Joins: belphegor666 (~satan@user/belphegor666)
[13:15:48] *** Parts: me-sudoer-dentne (~me-sudoer@2409:4071:2292:ea90:2154:3fa0:f58a:8ee0) ()
[13:15:58] *** Joins: me-sudoer-dentne (~me-sudoer@2409:4071:2292:ea90:2154:3fa0:f58a:8ee0)
[13:16:56] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[13:20:37] *** Joins: moog_ (~moog@107.126.53.130)
[13:21:56] *** Quits: zaz\ (~zaz@poneybl.eu) (Quit: bye)
[13:22:18] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:22:56] *** Quits: moog (~moog@98.97.85.1) (Ping timeout: 246 seconds)
[13:25:25] *** Joins: zaz\ (~zaz@poneybl.eu)
[13:27:24] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 240 seconds)
[13:28:07] *** Joins: rcernin (~rcernin@101.189.129.123)
[13:28:15] <j416> aLeSD[m]: I typically use GoImpl for stubbing; vim-go bundles it in. I guess other editors might have it, too. -> https://asciinema.org/a/sRPImBZq7WsFsXUzFa1GXr4Ps
[13:33:18] *** Joins: Ergo^ (~ergo@91.238.59.144)
[13:35:53] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[13:36:22] *** Joins: dr0n|1 (~nabromov@97e36665.skybroadband.com)
[13:37:50] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[13:42:27] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 260 seconds)
[13:53:02] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 246 seconds)
[13:55:05] *** imm__ is now known as imm_
[13:58:47] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[14:00:39] *** Quits: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: The Lounge - https://thelounge.chat)
[14:00:41] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[14:01:02] *** Joins: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net)
[14:05:04] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5532:4939:d6e8:c8f6)
[14:06:11] *** Joins: mikoto-c1 (~mikoto-ch@213.177.151.239)
[14:07:48] *** Joins: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53)
[14:08:49] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[14:09:24] *** Quits: walterwhip (~walterwhi@user/walterwhip) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:13:36] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[14:19:21] *** Joins: treeford (~charleste@user/treeford)
[14:19:39] *** Quits: greypw2546 (~greypw254@grey.pw) (Quit: I'll be back!)
[14:20:03] *** Joins: greypw2546 (~greypw254@grey.pw)
[14:23:59] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[14:27:48] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:28:50] *** Quits: mikoto-c1 (~mikoto-ch@213.177.151.239) (Quit: mikoto-c1)
[14:29:03] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[14:29:06] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[14:29:35] *** Joins: jw4 (~jw4@user/jw4)
[14:30:44] *** Quits: marcel (~marcel@user/marcel) (Quit: The Lounge - https://thelounge.chat)
[14:31:01] *** Joins: marcel (~marcel@user/marcel)
[14:32:14] *** Quits: theoceaniscool_ (~theoceani@213.94.16.92) (Ping timeout: 246 seconds)
[14:32:40] *** Quits: favadi (~favadi@2001:ee0:4081:6914:e882:c38c:eda6:1708) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:33:02] *** Joins: favadi (~favadi@2001:ee0:4081:6914:e882:c38c:eda6:1708)
[14:34:43] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:36:14] *** Joins: jw4 (~jw4@user/jw4)
[14:37:41] *** Quits: favadi (~favadi@2001:ee0:4081:6914:e882:c38c:eda6:1708) (Client Quit)
[14:38:02] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[14:38:35] *** Joins: favadi (~favadi@2001:ee0:4081:6914:5dc2:82a5:a213:2ac7)
[14:38:47] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5532:4939:d6e8:c8f6) (Ping timeout: 252 seconds)
[14:43:55] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[14:45:16] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[14:45:58] *** Joins: theoceaniscool_ (~theoceani@213.94.16.92)
[14:47:00] *** Joins: jw4 (~jw4@user/jw4)
[14:48:48] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[14:52:14] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 272 seconds)
[14:52:18] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[14:53:39] *** Joins: jw4 (~jw4@user/jw4)
[14:54:08] *** Joins: fling (~fling@user/fling)
[14:55:39] *** Joins: Sqaure (~a@user/square)
[14:58:37] *** Joins: han-solo (~han-solo@user/han-solo)
[14:59:12] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 272 seconds)
[14:59:22] *** Joins: llorllale (~llorllale@198.98.119.85)
[15:00:19] *** Joins: jw4 (~jw4@user/jw4)
[15:02:44] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[15:04:41] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 256 seconds)
[15:05:08] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[15:06:17] *** Joins: han-solo (~han-solo@user/han-solo)
[15:06:58] *** Joins: jw4 (~jw4@user/jw4)
[15:10:23] *** Joins: kakysha (~kakysha@user/kakysha)
[15:11:26] *** Quits: dr0n|1 (~nabromov@97e36665.skybroadband.com) (Ping timeout: 246 seconds)
[15:12:12] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Read error: No route to host)
[15:13:07] *** Joins: dr0n|1 (~nabromov@97e36665.skybroadband.com)
[15:22:18] *** Quits: me-sudoer-dentne (~me-sudoer@2409:4071:2292:ea90:2154:3fa0:f58a:8ee0) (Quit: Leaving)
[15:22:22] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:24:40] <aLeSD[m]> ok .. thanks all
[15:25:05] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[15:31:25] <mikoto-chan> hello everyone
[15:31:30] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 272 seconds)
[15:32:08] <mikoto-chan> should I use net or net/http when I wanna act as an IRC server?
[15:34:10] <zutt> mikoto-chan: `net` - IRC is not http-based protocol
[15:34:46] *** Joins: c10l (~c10l@user/c10l)
[15:34:59] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:35:11] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[15:35:25] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[15:35:41] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:36:42] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[15:36:56] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:37:35] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:37:59] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[15:38:18] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[15:39:49] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[15:40:43] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[15:41:01] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Client Quit)
[15:43:03] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[15:44:17] <mikoto-chan> zutt: fluffle/goirc only got a client submodule
[15:44:25] <mikoto-chan> but I need a server part too
[15:44:35] <ikke> Time to write one :P
[15:45:45] <zutt> yep, fun project for you then mikoto-chan :)
[15:46:04] <zutt> there are some existing go ircd's out there, never seen them used in real world, but there are some
[15:49:11] *** Quits: xiongxin (~Thunderbi@2409:8955:3894:25d6:2bd8:ade2:1163:8d53) (Ping timeout: 252 seconds)
[16:03:29] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 252 seconds)
[16:04:49] *** Joins: c10l (~c10l@user/c10l)
[16:07:51] *** Joins: treeford (~charleste@user/treeford)
[16:10:35] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 246 seconds)
[16:12:20] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[16:12:26] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[16:12:29] *** Quits: favadi (~favadi@2001:ee0:4081:6914:5dc2:82a5:a213:2ac7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:12:52] <fizzie> There are also existing low-level IRC protocol libraries that would work for either endpoint of the client-server connection (but aren't full-fledged IRC servers, as in, for routing messages between clients and participating in a network).
[16:20:11] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Ping timeout: 260 seconds)
[16:21:49] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[16:26:41] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[16:30:33] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[16:30:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[16:31:21] *** Joins: ricci (~ricci@31.187.110.131)
[16:32:04] *** Joins: acagastya (~acagastya@wikinews/acagastya)
[16:32:26] *** Quits: Epithium (~Epithium@2603-6080-3203-8d68-a9fe-010b-1d2d-81ea.res6.spectrum.com) (Remote host closed the connection)
[16:33:55] <acagastya> Hi, I have two projects in the `~/go/src/git.example.com/gitbox`.  One is foo (which has a package bar in foo/bar) and the other is `baz`.  How do I use the package `bar` in `baz`?  (That would be, how do I use local packages from different projects?)
[16:34:37] <acagastya> I am getting `main.go:8:2: no required module provides package git.example.com/gitbox/foo/bar; to add it:...` -- however the package does not exist on the internet yet.
[16:50:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[16:51:10] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[16:51:25] *** Joins: rvalue (~rvalue@user/rvalue)
[16:53:10] *** Quits: muesli (~muesli@fribbledom.com) (Quit: NO CARRIER)
[16:53:10] *** Quits: penguwin (~penguwin@fribbledom.com) (Quit: NO CARRIER)
[16:53:42] *** Joins: muesli (~muesli@fribbledom.com)
[16:53:49] *** Joins: penguwin (~penguwin@fribbledom.com)
[16:56:40] *** Parts: ash_worksi (~ash_m@user/ash-m/x-3292451) ()
[16:59:03] *** Joins: favadi (~favadi@2001:ee0:4081:6914:cc90:2a33:f69f:10cb)
[17:00:37] <fizzie> acagastya: From the error messages, you're using modules rather than old $GOPATH style, so: either `replace` directives in the go.mod files, or the new Go 1.18 "workspace" feature.
[17:00:56] <fizzie> See https://go.dev/doc/tutorial/workspaces for a worked example of the latter.
[17:01:07] *** Joins: fef (~thedawn@user/thedawn)
[17:01:46] <fizzie> In either case, you'd import "git.example.com/gitbox/foo/bar" in baz; the difference is just how you tell Go that the module "git.example.com/gitbox/foo" can be found in a local directory, instead of looked up via the normal means.
[17:05:02] <fizzie> The version with replace directives would be a matter of putting the line `replace git.example.com/gitbox/foo => ../foo` in .../baz/go.mod. But it's arguably less convenient than Go 1.18 workspaces because the replace isn't something you'd generally commit to the repository (or at least push), so it gets in the way of making go.mod changes that you *do* want to publish.
[17:05:19] <acagastya> All right, looking at the docs now; thanks, fizzie!
[17:05:57] *** Quits: earthbre- (earthbreak@2600:3c03::f03c:91ff:fece:9070) (Quit: I Break D Ert)
[17:06:10] *** Parts: acagastya (~acagastya@wikinews/acagastya) ()
[17:07:38] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[17:12:14] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[17:13:06] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[17:13:20] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:16:37] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[17:18:43] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[17:21:01] *** Quits: favadi (~favadi@2001:ee0:4081:6914:cc90:2a33:f69f:10cb) (Ping timeout: 256 seconds)
[17:23:10] *** Joins: mncheck (~mncheck@193.224.205.254)
[17:26:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:28:58] *** Quits: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk) (Quit: WeeChat 3.5)
[17:30:18] *** Joins: murd0c (~Murdoc@2800:810:492:ee:5980:bd55:d188:1321)
[17:30:19] *** Quits: murd0c (~Murdoc@2800:810:492:ee:5980:bd55:d188:1321) (Changing host)
[17:30:19] *** Joins: murd0c (~Murdoc@user/murd0c)
[17:30:22] *** Joins: shtirlic_ (~shtirlic@184.22.157.64)
[17:30:36] *** Piraty is now known as ping
[17:30:41] *** ping is now known as Piraty
[17:33:03] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[17:33:06] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 272 seconds)
[17:35:38] *** Joins: MattByName (~MattByNam@cpc138182-asht8-2-0-cust870.10-1.cable.virginm.net)
[17:37:03] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[17:38:18] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[17:41:28] *** Quits: shtirlic_ (~shtirlic@184.22.157.64) (Ping timeout: 260 seconds)
[17:41:56] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[17:44:44] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 246 seconds)
[17:46:03] *** Joins: arkurious (~arkurious@user/arkurious)
[17:46:18] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[17:46:54] *** Joins: fspax (~fspax@46.148.141.211)
[17:48:21] *** Joins: treeford (~charleste@user/treeford)
[17:49:05] *** Quits: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net) (Remote host closed the connection)
[17:51:11] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[17:57:09] *** Quits: MattByName (~MattByNam@cpc138182-asht8-2-0-cust870.10-1.cable.virginm.net) (Quit: Leaving)
[17:58:29] *** Joins: MattByName (~MattByNam@cpc138182-asht8-2-0-cust870.10-1.cable.virginm.net)
[18:00:20] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[18:02:28] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[18:04:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:06:27] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:15:57] *** Joins: shtirlic_ (~shtirlic@184.22.157.64)
[18:17:08] *** Quits: jjonah (~jjonah@p200300d5d7249400dea632fffeb3342f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[18:17:17] *** Joins: jjonah (~jjonah@p200300d5d7205100dea632fffeb3342f.dip0.t-ipconnect.de)
[18:19:37] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 256 seconds)
[18:25:41] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[18:26:20] *** Quits: MattByName (~MattByNam@cpc138182-asht8-2-0-cust870.10-1.cable.virginm.net) (Remote host closed the connection)
[18:27:37] *** Joins: kakysha (~kakysha@user/kakysha)
[18:30:10] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[18:31:36] *** Quits: dr0n|1 (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 2.8)
[18:33:13] *** Joins: kakysha_ (~kakysha@user/kakysha)
[18:33:34] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[18:33:52] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[18:34:07] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 256 seconds)
[18:37:00] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[18:39:41] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 246 seconds)
[18:41:26] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[18:45:00] *** Joins: dk86 (~dk86@2804:14d:2ca0:8031:5a54:c48:65aa:98fe)
[18:51:09] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[18:53:20] *** Joins: nuclearg2 (~nucleargr@user/nuclearg1)
[18:53:26] *** Joins: andlabs (~andlabs@172.102.12.40)
[18:54:58] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[18:59:33] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[18:59:57] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[18:59:57] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[18:59:57] *** Joins: tane (~tane@user/tane)
[18:59:58] *** Joins: tiferrei2000 (~tiferrei@user/tiferrei)
[19:00:55] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[19:02:40] *** Joins: treeford (~charleste@user/treeford)
[19:06:31] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:80b4:37b:3fb6:164f:722e)
[19:06:55] <oliv3> hi, anyone knows of a linter that looks for undocumented structs/code ?
[19:07:07] <oliv3> giving a look at https://golangci-lint.run/, looks pretty cool
[19:10:56] *** Joins: Omnipotent (~Omnipoten@89.37.173.188)
[19:12:21] <Omnipotent> Is there method to check whether a net Connection is still active?
[19:13:17] *** Quits: Omnipotent (~Omnipoten@89.37.173.188) (Remote host closed the connection)
[19:13:55] *** Joins: Omnipotent (~Omnipoten@89.37.173.188)
[19:14:01] *** Quits: shtirlic_ (~shtirlic@184.22.157.64) (Ping timeout: 256 seconds)
[19:15:01] *** Quits: Omnipotent (~Omnipoten@89.37.173.188) (Remote host closed the connection)
[19:15:19] *** Joins: Omnipotent (~Omnipoten@89.37.173.188)
[19:18:03] *** Quits: Fossil (~Fossil@95.85.23.165) (Quit: Bye)
[19:18:16] *** Joins: Fossil (~Fossil@2a03:b0c0:0:1010::398:b001)
[19:18:16] *** Quits: bpalmer (~user@user/bpalmer) (Remote host closed the connection)
[19:19:14] *** Joins: prologic (~prologic@mail.mills.io)
[19:19:26] *** Quits: sebn (~sebn@c90-142-43-192.bredband.tele2.se) (Remote host closed the connection)
[19:19:34] *** Quits: Omnipotent (~Omnipoten@89.37.173.188) (Remote host closed the connection)
[19:19:41] *** Joins: sebn (~sebn@c90-142-43-192.bredband.tele2.se)
[19:20:06] <prologic> Heya 👋 I have a problem with Go's netdns=cgo resolver whereby on macOS it *does not* respect the Resolvers in /etc/resolvers/ like it _should_. See: https://gist.github.com/prologic/2c3135df794129e13633230f294b8e09
[19:23:57] *** Joins: Omnipotent (~Omnipoten@89.37.173.188)
[19:25:09] *** Quits: Omnipotent (~Omnipoten@89.37.173.188) (Remote host closed the connection)
[19:28:35] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[19:30:08] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[19:32:31] <prologic> I'll answer my own question then
[19:32:54] <prologic> Apparently the Resolver on macOS will not respect /etc/resolvers/<domain> for anything but A record lookups
[19:32:57] <prologic> da fuq?!
[19:33:34] *** Quits: murd0c (~Murdoc@user/murd0c) (Quit: WeeChat 3.4)
[19:36:07] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 256 seconds)
[19:37:14] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 272 seconds)
[19:42:29] *** Joins: han-solo (~han-solo@user/han-solo)
[19:42:34] *** Joins: shtirlic (~shtirlic@184.22.157.64)
[19:43:20] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[19:45:11] *** Joins: xse (~xse@user/xse)
[19:49:07] *** Joins: pepee (~pepee@user/pepee)
[19:49:10] *** Quits: dk86 (~dk86@2804:14d:2ca0:8031:5a54:c48:65aa:98fe) (Quit: Leaving.)
[19:49:24] *** Joins: dk86 (~dk86@2804:14d:2ca0:8031:9b38:b954:c579:30d2)
[19:51:34] *** Joins: moog__ (~moog@98.97.85.156)
[19:51:42] *** Quits: mva (znc@gentoo/developer/mva) (Ping timeout: 260 seconds)
[19:52:54] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[19:54:23] *** Quits: moog_ (~moog@107.126.53.130) (Ping timeout: 260 seconds)
[19:54:51] *** Quits: andlabs (~andlabs@172.102.12.40) (Ping timeout: 260 seconds)
[19:55:03] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 260 seconds)
[19:55:15] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[19:55:43] *** Quits: Kane (~Kane@portal.yarg.fr) (Remote host closed the connection)
[19:58:26] *** Joins: Kane (~Kane@portal.yarg.fr)
[20:04:50] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:06:02] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[20:07:21] *** Quits: loggingbot (~loggingbo@user/loggingbot) (Read error: Connection reset by peer)
[20:07:25] *** Joins: fspax (~fspax@46.148.141.211)
[20:08:05] <hifi> is there any short way to handle map key that is either an interface or a string in a type switch when you want to to drop all non-string keys anyway but depending on the data source the map is either map[string]interface{} or map[interface{}]interface{}? I'm almost duplicating the code to handle both cases with nested type select and the only way I could think of is to use another function to call when the real type matches
[20:10:07] *** Quits: b0nn (~shane@user/b0nn) (Ping timeout: 256 seconds)
[20:12:54] *** Quits: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu) (Remote host closed the connection)
[20:16:25] <beanzilla> https://play.golang.com/p/1hKuq747O3b Something like that?
[20:16:49] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[20:19:30] *** Joins: Omnipotent (~Omnipoten@89.37.173.188)
[20:19:44] *** Quits: Omnipotent (~Omnipoten@89.37.173.188) (Remote host closed the connection)
[20:21:23] *** Quits: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[20:21:37] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[20:21:52] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[20:22:03] <beanzilla> Or do you mean, https://play.golang.com/p/cToqj-y98Nl
[20:22:47] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[20:23:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:27:41] <hifi> ah, sorry, I wasn't very clear I take in an interface and have a type switch for it but I need to handle both different types of a map in it explicitly as the interface key map type doesn't pick up a string key map
[20:29:11] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[20:29:44] <hifi> when technically a string keyed map would be compatible with an interface keyed map if all I care are string keys but I may get the former as well
[20:30:54] <hifi> I think this comes up between unmarshaling yaml vs json with the same structure if you want to handle both dynamically instead of a typed struct
[20:30:58] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[20:31:03] *** Quits: fspax (~fspax@46.148.141.211) (Ping timeout: 250 seconds)
[20:31:41] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[20:31:58] *** Joins: optic__ (~rickybob@gateway/vpn/pia/rickybob)
[20:33:12] *** Joins: mva (znc@gentoo/developer/mva)
[20:34:31] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 260 seconds)
[20:35:12] *** Joins: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de)
[20:35:39] *** Joins: loggingbot (~loggingbo@user/loggingbot)
[20:35:55] *** Quits: boof (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 260 seconds)
[20:42:31] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:44:02] <beanzilla> So something like https://play.golang.com/p/-UHLNDQRvfa except you'd first need to identify if the interface is map[string]interface{} (You'll have to write seperate code for the 2 map types, but you can reuse some of the code for the interface once the string keys are essentially converted)
[20:44:32] *** Joins: b0nn (~shane@user/b0nn)
[20:45:10] <beanzilla> Oh, and of course the map[string]interface{} will always count as string in the example so you could also throw in some kind of converter test to try converting between types? (ugly, but might work)
[20:45:22] *** Quits: nuclearg2 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.4)
[20:45:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:46:48] *** Quits: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de) (Quit: The Lounge - https://thelounge.github.io)
[20:47:47] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[20:48:03] *** Joins: strubbl891941988 (~strubbl@ipbcc0c7cb.dynamic.kabel-deutschland.de)
[20:51:15] *** Quits: casastorta (~casastort@neo1.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:51:52] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[20:53:07] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[20:58:11] *** Joins: han-solo (~han-solo@user/han-solo)
[21:00:54] *** Joins: treeford (~charleste@user/treeford)
[21:02:32] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[21:04:22] *** Quits: jack_rabbit (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:04:51] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 260 seconds)
[21:05:45] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[21:05:52] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:28] *** Joins: han-solo (~han-solo@user/han-solo)
[21:06:50] *** Joins: epony (epony@user/epony)
[21:09:18] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:13:59] <lungaro> if i'm closing over a variable in a function, how do I copy it?
[21:14:11] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[21:14:42] <lungaro> ie, https://go.dev/play/p/fbzPh8moQXa
[21:16:45] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[21:19:36] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[21:19:50] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:20:04] *** Joins: internut (~internut@98.38.226.136)
[21:23:28] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:25:18] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[21:25:48] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[21:27:48] <rewt> that's not really a generic paste site; its purpose is so that code pasted there should be runnable (with the run button on the top right)
[21:27:56] <fizzie> lungaro: A conventional way is the slightly suspicious-looking `idx := idx` in the loop body.
[21:29:22] <fizzie> Here's a runnable example of `x := x`: https://go.dev/play/p/QieQDGasdU3
[21:29:24] <lungaro> yeah, i just remembered that
[21:29:42] <lungaro> very odd indeed =P
[21:30:28] <fizzie> The other is passing it as an argument, but that's not really an option for `g.Go` probably, since I take it it takes a `func() error`.
[21:30:33] <rewt> it's because go re-uses loop variables, so by the time the first goroutine gets to that variable, the for loop has overwritten the value by a later iteration
[21:31:06] <rewt> x := x creates a new x variable with the contents of the x variable in scope at that time
[21:31:15] <lungaro> i know why rewt, i was commenting on the odd syntax
[21:31:36] <lungaro> it makes sense, but the code doesn't read nicely
[21:31:41] <rewt> it could be newx := x for a different variable name; the 2 vars aren't related
[21:31:59] <fizzie> The pass-it-as-an-argument can work for something like `go func(idx int) { ... }(idx)` but TBH I don't think that looks much if any more pleasant.
[21:32:11] <fizzie> And yeah, I tend to give the copy a different name.
[21:33:36] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:34:18] *** Joins: treeford (~charleste@user/treeford)
[21:35:36] *** Joins: dsrt^ (~dsrt@c-24-99-107-170.hsd1.ga.comcast.net)
[21:40:33] *** Quits: casastorta (~casastort@neo2.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:40:37] *** Joins: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de)
[21:40:37] *** Quits: tane (~tane@dslb-002-201-234-231.002.201.pools.vodafone-ip.de) (Changing host)
[21:40:37] *** Joins: tane (~tane@user/tane)
[21:42:49] *** Joins: casastorta (~casastort@neo1.krivokuca.net)
[21:44:02] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:44:37] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:284e:9311:1eb:894c)
[21:45:32] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 246 seconds)
[21:45:44] *** Quits: nekron (~nekron@noordsee.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:47:17] *** Joins: nekron (~nekron@noordsee.de)
[21:47:19] <lungaro> yah. makes more sense to me
[21:47:26] <lungaro> thanks
[21:47:37] <lungaro> i wish closing over a variable would just copy it.. Too basd
[21:47:39] <lungaro> too bad*
[21:47:44] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Client Quit)
[21:48:05] <lungaro> I can see how both would be useful
[21:52:44] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[21:56:07] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:56:18] <dostoyevsky2> Is there a way to see how much memory my code uses during testing?  I want to keep an eye on efficient memory usage, but not sure what kind of tools I could use
[21:56:46] <dostoyevsky2> Atm I am using way too many strings which should be streams
[21:58:13] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:59:26] *** Quits: apathor (~mike@c-73-119-36-70.hsd1.ma.comcast.net) (Read error: Connection reset by peer)
[22:02:46] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:04:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 250 seconds)
[22:06:43] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[22:14:28] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 260 seconds)
[22:15:46] <lungaro> you can profile memory and cpu, then get a nice call graph of allocs
[22:15:47] *** Quits: n8nl (~n8nl@c-24-61-77-34.hsd1.ma.comcast.net) (Ping timeout: 260 seconds)
[22:16:21] <lungaro> profiling can be instrumented at runtime. see https://go.dev/doc/diagnostics
[22:16:37] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[22:18:12] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Ping timeout: 240 seconds)
[22:19:19] *** Quits: b0nn (~shane@user/b0nn) (Remote host closed the connection)
[22:19:49] *** Joins: knusbaum (knusbaum@gateway/vpn/protonvpn/knusbaum)
[22:19:50] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[22:19:56] <SJrX> Anyone have any recommendations for testing command line applications in go. I am porting something written in bash, with BATS tests to go, and I'd like to still test at the command line level. In theory I could stick with BATS, but I'm wondering if there is in fact a better tool with go. It's kind of weird because you need to the built binary to run the tests.
[22:22:32] <lungaro> seems that testing cli doesn't buy you much, but I dont know exactly what you want
[22:22:48] <lungaro> why not just test the functions? is your concern missed flags?
[22:22:50] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[22:23:06] <hifi> beanzilla: isn't there some runtime weight to using reflection over _just_ a type switch?
[22:23:31] <SJrX> Well cobra.dev is the utility we are using to make the command line utility. I would get more assurance seeing the command line being tested than seeing random unit tests for functions.
[22:25:07] *** Joins: b0nn (~shane@user/b0nn)
[22:25:54] *** Quits: optic__ (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[22:26:36] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[22:30:04] *** Joins: treeford (~charleste@user/treeford)
[22:30:04] <dostoyevsky2> Is it really that difficult to write a shell in Go?  I guess I am missing a pure go implementation of readline
[22:31:15] <seebs> Define "write a shell". Writing a shell in the sense of "compatible with sh" is probably hard, writing a shell otherwise isn't especially hard, although readline-alone is, almost precisely, the complexity of implementing at least two text editors.
[22:31:50] <ikke> https://pkg.go.dev/mvdan.cc/sh
[22:32:21] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a12:2ca0:497c:9170:1d46)
[22:32:31] <dostoyevsky2> seebs: in c based languages it's quite easy to hack together a shell, as libreadline will do all the heavy lifting...  but there is also rlwrap, that can readlinify anything that just reads from stdin
[22:34:15] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[22:35:21] <ikke> This seems to be a pure go readline like library: https://pkg.go.dev/github.com/chzyer/readline
[22:36:05] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:284e:9311:1eb:894c) (Ping timeout: 250 seconds)
[22:39:16] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[22:40:19] *** Joins: califax (~califax@user/califx)
[22:42:02] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: quick everyone outta the universe)
[22:42:10] <dostoyevsky2> ikke: it's quite nice
[22:44:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[22:45:10] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00)
[22:48:03] <hifi> beanzilla et. al. here's my gripe simplified down to an example: https://go.dev/play/p/m7-ClDqbyQO
[22:49:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d99d:3b0b:7662:bc00) (Client Quit)
[22:50:55] <hifi> I know this case specifically can be fixed by using a struct and both will unmarshal correctly but if we're dealing with dynamic data the inability to handle both cases within the same function without duplicating the logic or using an anonymous function irritates me
[22:51:34] <dostoyevsky2> hifi: in yaml you can write `[a, b, c]: true' whereas in json the key is always a string...
[22:51:47] <hifi> yes, I know, that's not really the point
[22:52:15] <fizzie> hifi: If you want to always run that piece of code on the `map[string]interface{}` (either the original, or the "fixed"), how about just taking that code out of the type switch? In terms of your example: https://go.dev/play/p/g_3fN41X-U2
[22:52:54] <fizzie> s/t/theMap/ on line 37, but anyway.
[22:53:01] <hifi> in the full code I'm haldling more type cases, not just those two
[22:54:40] <hifi> approaching X Y problem very fast I can tell
[22:55:15] <fizzie> Probably. But as a one more spin, how about using `case map[string]interface{}, map[interface{}]interface{}:` in the larger switch, and putting an extra type switch (or type assertion) inside the body to make the whichever-one-it-is into a map[string]interface{}.
[22:55:42] <hifi> okay, that sounds pretty good
[22:56:15] <hifi> although if it's _not_ a map[string]interface{} wouldn't that be an issue? it's taking in an arbitrary structure
[22:57:18] <hifi> this is probably more productive if I just pull the actual function out so it's easier to understand the problem space - not that there's much wrong in it in terms of function but I'm bothered by how I've structured it, just started on go a week ago :)
[22:57:43] *** Joins: cation21 (cation@user/cation)
[22:58:26] <dostoyevsky2> hifi: that function looks like you copied it from my project btw...
[22:58:32] <fizzie> In the body of that case, you'd know it must be one of those two types. Then you'd do something like `if t2, ok := t.(map[interface{}]interface{}); ok { /* your conversion loop */ }; /* the common handling */`. But yeah, devil and details and all that.
[22:59:16] *** Quits: cation (cation@user/cation) (Ping timeout: 272 seconds)
[23:01:00] *** R2robot_ is now known as R2robot
[23:01:04] *** cation21 is now known as cation
[23:02:33] <dostoyevsky2> my anyMapToStringMap is recursive though...  because of nested dictionaries
[23:04:45] <hifi> so is mine, moment
[23:05:24] <dostoyevsky2> and coupled with a toString(any) function... that will turn every type into a string, or start a debugger
[23:05:48] <hifi> https://go.dev/play/p/FuqryGQhuWC so this abomination is what I wrote originally
[23:05:58] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[23:06:52] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[23:07:58] <hifi> it's not handling many edge cases but for what I needed it it was fine, but there are so many different types it could miss because an interface in a type switch doesn't satisfy any type that fits that interface
[23:08:16] <hifi> which - quite honest - I expected to happen
[23:08:20] <dostoyevsky2> `fmt.Fprintf(os.Stderr, "Unhandled map key during flattening: %T, value ignored\n", v)' <- without a toString(any) this will be triggered quite a lot, because yaml has weird syntax rules for types... e.g. `on' and `off' are not strings, they are booleans..
[23:10:11] <dostoyevsky2> I guess you could just make sure to always write keys as `"on"' or `"1.2"' so they are always strings
[23:16:04] <hifi> but how to avoid handling every possible key and value type combination in the type switch? the default case would be wrong for any map type where it would be preferred to stringify the key and value somehow without knowing what types would be fed to it?
[23:16:55] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[23:17:30] *** Joins: mug3n_ (~mugen@gateway/tor-sasl/mugen)
[23:18:00] <hifi> same thing for slices, if []interface{} doesn't match []int or []string it sounds really complicated to create an exhaustive type switch for all possible types - let alone user types
[23:18:33] <dostoyevsky2> hifi: you could always parse the yaml directly into a struct...
[23:18:49] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 256 seconds)
[23:19:09] <hifi> that wouldn't work with arbitrary input which this function is for
[23:19:43] <dostoyevsky2> yeah, then you have to do what I did: just cover all the types... I think I have around 1k loc just for that
[23:19:55] <hifi> wow
[23:20:34] <hifi> that's pretty depressing if there's really no better way to do generic string conversion keeping slices and maps
[23:23:01] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[23:24:22] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[23:29:40] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 272 seconds)
[23:30:56] <dostoyevsky2> hifi: I've used yaml in c++ as well, but they didn't map it to the c++ types, it just remained a string dict, along with a type indicator...  I guess one could write a similar parser for Go
[23:31:16] <dostoyevsky2> Maybe that's easier than handling all the conversions
[23:35:05] <dostoyevsky2> But I just looked at this c++ project again, yaml parsing code using libyaml is like 2k loc
[23:35:59] <hifi> right, in the subset of yaml the easiest "fix" would be to make the parser do the dumbification of input
[23:36:35] <hifi> but this is a generic issue that []interface{} and map[interface{}]interface{} don't match all possible types
[23:37:04] <hifi> maybe []interface{} does, I'm not sure, but the map one certainly does not
[23:42:28] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a12:2ca0:497c:9170:1d46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:42:51] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a12:2ca0:497c:9170:1d46)
[23:47:47] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:c06:c5f:5435:411f) (Ping timeout: 250 seconds)
[23:50:59] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:f81b:729b:7ef0:993)
[23:51:20] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:51:25] *** Quits: internut (~internut@98.38.226.136) (Remote host closed the connection)
[23:52:09] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[23:53:09] *** Joins: califax (~califax@user/califx)
[23:53:16] *** Joins: internut (~internut@2601:280:4e00:7b70:e9d9:9974:75be:a2f0)
[23:54:57] <hifi> it boils down to this and I suspect I know the reason why it doesn't work and why it will never work but from intuition it should: https://go.dev/play/p/luh4bMOl53G
[23:57:13] <hifi> my guess is the type system doesn't know or care if something is a map, it only cares about the fully qualified type and it either matches or doesn't
[23:57:59] *** Quits: internut (~internut@2601:280:4e00:7b70:e9d9:9974:75be:a2f0) (Ping timeout: 260 seconds)
