[00:02:18] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 260 seconds)
[00:02:34] *** Joins: briandeaed (~root@185.234.208.208.r.toneticgroup.pl)
[00:05:48] *** Quits: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320) (Ping timeout: 268 seconds)
[00:06:39] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[00:07:04] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[00:09:47] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:12:53] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:14:23] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[00:17:36] *** Quits: xff0x (~xff0x@2001:1a81:52f3:1d00:e2c8:a45c:f0af:d33) (Ping timeout: 250 seconds)
[00:17:54] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[00:20:20] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:21:34] <dminuoso> monochrom: Thank you for your objections. As for the "thunk vs expression" terminology, it's an interesting choice - can people accept with just arbitrary semantics without envisioning some arbitrary specific model of implementation?
[00:22:16] <dminuoso> I actively delibered whether to just denominate these as lazy (let's for the sake of discussion also equate lazy and non-strict here) expressions
[00:23:28] <dminuoso> Perhaps I should engage more in just talking about semantics, but at the same time giving simplified models of explanation (i.e. equating a specific implementation with the semantics) can be a simpler way to learn something.
[00:23:38] *** Joins: pavonia (~user@user/siracusa)
[00:24:04] <dminuoso> It's how we teach electrons as balls flying around an atom, something that is provably false.
[00:24:29] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[00:25:18] <dminuoso> (Which too is precluded by a false dichotomy)
[00:25:35] *** Quits: Hash (~Hash@hashsecurity.org) (K-Lined)
[00:26:04] *** Joins: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca)
[00:26:24] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[00:27:27] <dminuoso> As for the "less lazy", that intentionally was a pedagogic simplification. Also, in case you didnt catch it, my version of foldl' is strictly (the pun!) speaking is slightly different in strictness from the original, something I did intentional as explaining a function with a bang pattern is far simpler than `seq` - and the implementation was easy enough to get the gist of it across.
[00:27:29] *** Quits: Null_A (~null_a@2601:645:8700:2290:c416:44d3:5d02:2aca) (Remote host closed the connection)
[00:28:12] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[00:29:20] <dminuoso> I recently started having a lot of discussions with other people as well as my girlfriend, who works as a teacher, about how to properly simplify models in explanations. When do I annotate "this is just a simplification, but", when do I intentionally hide details "planet orbits are circles", or when do I tell blatant lies for simpler world models "electrons fly like balls around atoms"
[00:29:52] <dminuoso> Perhaps I should look up on some literature on this, there ought to be a lot of opinions and experiences
[00:30:14] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:30:31] *** Joins: Null_A (~null_a@2601:645:8700:2290:5c09:f5f1:57b7:d1d5)
[00:30:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[00:31:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[00:31:07] *** Quits: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi) (Quit: Leaving.)
[00:31:09] *** Quits: Null_A (~null_a@2601:645:8700:2290:5c09:f5f1:57b7:d1d5) (Read error: Connection reset by peer)
[00:32:19] *** Quits: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius) (Max SendQ exceeded)
[00:32:26] *** Quits: alp (~alp@user/alp) (Ping timeout: 245 seconds)
[00:32:48] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[00:33:25] *** Joins: Null_A (~null_a@2601:645:8700:2290:5c09:f5f1:57b7:d1d5)
[00:33:41] *** Joins: Raito_Bezarius (~Raito@wireguard/tunneler/raito-bezarius)
[00:33:41] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:50b5:b57f:7251:ce23) (Ping timeout: 245 seconds)
[00:33:56] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[00:34:10] *** Joins: hololeap (~hololeap@user/hololeap)
[00:34:34] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[00:35:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[00:40:02] *** Joins: xff0x (~xff0x@2001:1a81:52f3:1d00:e2c8:a45c:f0af:d33)
[00:43:36] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 250 seconds)
[00:45:13] *** Joins: nineonine (~nineonine@S0106a0ff7073d5d5.vf.shawcable.net)
[00:47:25] *** Joins: hololeap_ (~hololeap@user/hololeap)
[00:47:27] *** Quits: hololeap (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[00:47:54] *** Quits: max22- (~maxime@2a01cb0883359800a797759c8651134a.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[00:48:21] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[00:48:44] <jackdk> my school chemistry class basically told us we were going to be told a series of less lying lies, but also gave us a guided tour of the major experiments which invalidated each model. I though that was cool
[00:48:52] *** Joins: max22- (~maxime@2a01cb0883359800da3732762d8e896f.ipv6.abo.wanadoo.fr)
[00:51:09] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:51:40] *** Quits: briandeaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: leaving)
[00:52:59] <ephemient> there's no right answer for everyone. some are going to get stuck on the wrong model, but you're not going to get through to many students without simplifications
[00:53:52] *** Quits: cynomys (~cynomys@user/cynomys) (Quit: Lost terminal)
[00:54:11] <dminuoso> Sure, I dont think simple models are the point of discussion here.
[00:54:26] *** Quits: davros (~davros@host86-185-61-1.range86-185.btcentralplus.com) (Ping timeout: 250 seconds)
[00:54:36] *** Joins: lep (~lep@94.31.89.203)
[00:54:52] <dminuoso> Like a QM professor once put it "a model serves just to make predictions. If these predictions turn out to be true, the model is good - if not the model is not good.
[00:55:07] <dminuoso> So you can measure the quality in the number of false predictions.
[00:55:28] <lep> is there a way to have cabal tell me the path to an exe it just build?
[00:55:41] <monochrom> My first simplification is to commit to lazy evaluation even though the Haskell Report doesn't. My second simplification is I don't need the vocab "thunk". Hell I don't need "closure" either.
[00:55:42] <dminuoso> lep: Yes, `cabal list-bin <component-descr>`
[00:55:52] <lep> thanks!
[00:56:22] <monochrom> http://www.cs.utoronto.ca/~trebla/CSCC24-2021-Summer/03-haskell-evaluation.html is how I teach this stuff.
[00:56:42] <dminuoso> monochrom: I think its much simpler in the context of a course, where you can establish terminology and frame the students as you see fit.
[00:56:51] <dminuoso> The benefit of being a professor I suppose
[00:57:33] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[00:58:50] *** Quits: xsperry (~xs@user/xsperry) (Ping timeout: 268 seconds)
[00:59:02] <lep> also can i tell cabal to not create a backup file of cabal.project.local when i change a configuration?
[00:59:22] <dminuoso> Else a discussion would have to begin by establishing a particular choice of terminology and some context. Then, under the assumption the discussion partner is able to blindly relinquish themselves of their knowledge and beliefs, adopt yours, you can explain it in that sense.
[00:59:31] <lep> i guess i can remove it before calling configure
[00:59:47] *** Quits: Null_A (~null_a@2601:645:8700:2290:5c09:f5f1:57b7:d1d5) (Remote host closed the connection)
[00:59:51] *** Joins: cjb (~cjb@user/cjb)
[00:59:54] <dminuoso> lep: Mmm, calling configure is an odd thing to do in 2022
[01:00:17] <lep> ok
[01:00:22] <lep> i have no idea of cabal
[01:00:35] <lep> i just have a flag which changes the build
[01:00:41] <lep> and i want to build both versions
[01:01:02] <dminuoso> lep: So I would keep two cabal.project.local files, containing the separate flags
[01:01:35] <dminuoso> And then invoke cabal twice with `cabal build --project-file cabal.project.local.flavorA && cabal build --project file cabal.project.local.flavorB`
[01:01:54] <dminuoso> If memory serves right, all `cabal configure` does in v2- mode is put out those flags into a cabal.project.local anyway
[01:02:07] <lep> nice, thanks agains
[01:02:09] <lep> -s
[01:04:22] *** Joins: son0p (~ff@2800:484:1d81:b700:d40b:900:b387:320)
[01:06:11] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[01:06:23] <lep> so it replaces my project.cabal file? if i just do cabal build --project-file cabal.project.local.flavourA <target> i get an error
[01:06:24] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[01:06:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[01:08:42] *** Joins: megaTherion (~therion@unix.io)
[01:12:18] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[01:15:46] *** Quits: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl) (Remote host closed the connection)
[01:19:12] *** Joins: ix (~ix@2a02:8010:674f:0:d65d:64ff:fe52:5efe)
[01:19:56] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[01:20:00] *** Joins: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[01:20:44] *** Joins: alp (~alp@user/alp)
[01:21:12] *** Quits: thyriaen_ (~thyriaen@dynamic-077-191-211-108.77.191.pool.telefonica.de) (Quit: Leaving)
[01:22:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[01:22:35] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[01:22:57] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:23:02] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[01:24:31] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 245 seconds)
[01:25:13] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[01:33:49] <dminuoso> It rather emits to your cabal.project.local
[01:33:58] <dminuoso> Presumably it will backup whatever there is before
[01:34:20] <dminuoso> Your cabal.project and cabal.project.local represent the (stateful) build configuration for your project
[01:38:17] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:39:19] *** Joins: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net)
[01:40:12] *** Joins: machinedgod (~machinedg@24.105.81.50)
[01:41:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:41:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:41:54] *** Joins: wroathe (~wroathe@user/wroathe)
[01:45:44] *** Joins: alx741 (~alx741@157.100.197.240)
[01:49:27] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 250 seconds)
[01:53:00] *** Quits: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507) (Remote host closed the connection)
[01:53:10] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[01:54:34] *** Joins: CHUD (~CHUD@host-80-41-89-108.as13285.net)
[01:55:58] *** Quits: klf (~klf@66.220.205.98) (Quit: Leaving)
[01:56:12] *** Quits: MatthiasG2 (~matthias@i6DFA01BB.versanet.de) (Quit: leaving)
[01:56:25] *** Parts: CHUD (~CHUD@host-80-41-89-108.as13285.net) ()
[01:56:57] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[01:58:53] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[02:00:05] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:03:02] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[02:03:22] *** Joins: jkaye (~jkaye@2601:281:8300:7530:d551:c5d6:10bb:b867)
[02:09:18] *** Quits: max22- (~maxime@2a01cb0883359800da3732762d8e896f.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:15:24] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[02:15:27] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[02:16:05] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:16:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:20:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[02:20:52] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[02:22:19] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560)
[02:23:41] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[02:24:18] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:25:04] <charukiewicz> I'm trying to use pandocCompiler in my Hakyll site and have been fighting it for like an hour just to get it to preserve a target="_blank" tag when compiling <a> tags in an .html file. I've tried using pandocCompilerWith to enable custom readerExtensions/writerExtensions such as Ext_link_attributes which the docs seem to suggest should support passing through all the attributes, but I can't get it to change its behavior of 
[02:25:04] <charukiewicz> omitting everything other than href, id, and class. Has anyone dealt with this?
[02:26:47] <charukiewicz> I'm at a point where I want to use TagSoup to traverse the parsed document and convert a class named "target--_blank" into the target="_blank" attribute, which I know will work, but is a terrible approach.
[02:26:56] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[02:29:44] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[02:29:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[02:30:11] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[02:31:01] *** Quits: coot (~coot@213.134.190.95) (Quit: coot)
[02:32:47] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[02:33:18] *** Joins: burnside_ (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[02:34:10] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:34:36] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[02:39:02] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:40:16] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[02:41:14] <dminuoso> Mmm, decisions decisions.. should I provide a Data instance but hide the data-constructor and only expose a smart constructor?
[02:41:24] <dminuoso> Or should I not provide a Data instance?
[02:41:28] * dminuoso cant decide
[02:44:28] *** Quits: Null_A (~null_a@c-98-210-133-39.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[02:44:41] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[02:45:29] *** Quits: jkaye (~jkaye@2601:281:8300:7530:d551:c5d6:10bb:b867) (Quit: Leaving)
[02:46:02] <EvanR> it's great when math and logic do not apply https://i.imgur.com/02hZzOS.png
[02:46:50] <dminuoso> EvanR: hah, what is that?
[02:46:57] <EvanR> glsl
[02:47:26] <dminuoso> Is this implying that creating a can mutate m or n?
[02:47:49] <dminuoso> (Or their memory stores, rather?)
[02:47:53] <EvanR> no but who the F knows what else can happen xD
[02:49:21] <davean> dminuoso: I mean if you add numbers twice, no reason to think they add to the same thing
[02:49:31] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Quit: No Ping reply in 180 seconds.)
[02:49:33] <EvanR> ???
[02:49:34] <dminuoso> Oh mmm.
[02:49:41] <dminuoso> Yeah I see what you're getting at
[02:49:53] <EvanR> yeah if you're measuring a piece of lumber for cutting
[02:49:58] <EvanR> or using glsl
[02:50:05] <hpc> this is well known in ML circles
[02:50:11] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:50:47] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[02:50:51] <davean> dminuoso: I'm kinda confused why you think they might, thats not how math works.
[02:51:11] <davean> I've checked by running the calculations on a GPU
[02:51:12] * EvanR kicks the sarcasm detector
[02:51:58] <hpc> i am 100.00000002% certain that davean is correct here
[02:53:45] <EvanR> this is more egregious than I'm used to with floats
[02:55:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8)
[02:57:34] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:58:06] *** Quits: mmhat (~mmh@55d4f2c4.access.ecotel.net) (Quit: WeeChat 3.4)
[02:58:36] <ephemient> even without talking about the GPU, on x86 CPUs you'll get different results from x87 vs SSE arithmetic, and a compiler could decide to use both…
[02:58:59] <davean> ephemient: Well, no, not EXACTLY. You CAN due to precision
[02:59:07] <davean> it depends when and how you do register moves
[02:59:33] <EvanR> does none of this happen in haskell because every float computation begins and ends in a heap object
[02:59:45] <davean> haha, no it CAN happen in Haskell
[02:59:54] <davean> Though we dropped x87 I think
[02:59:56] <davean> a few versions back
[03:00:07] <EvanR> ?_?
[03:00:08] <ephemient> well in practice any compilers targeting x86-64 are gonna be using SSE only anyhow
[03:00:42] <davean> ephemient: not entirely true
[03:00:47] <EvanR> so how much precision does SSE use
[03:00:53] <ephemient> I think SSE2 is implemented in all 64-bit processors except for some old atoms?
[03:00:55] <davean> 16, 32, or 64 bits
[03:01:09] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 250 seconds)
[03:01:16] <davean> But x87 does calculations in 80 bits, and stores and loads in 64 bits
[03:01:17] *** Quits: mud (~mud@user/kadoban) (Ping timeout: 240 seconds)
[03:01:56] <davean> ephemient: In practice 80 bit floats are still evailable, you just need to use them right
[03:02:27] <EvanR> what do you call a compiler or property of compilation where the nonsense in Example 2 above is not possible
[03:02:28] <ephemient> there's also the fact that x86-32 abi used the x87 registers to pass floating point around, but x86-64 abi uses xmm registers
[03:02:38] *** Joins: hololeap (~hololeap@user/hololeap)
[03:02:48] <davean> ephemient: broken!
[03:02:53] <davean> er, that was for EvanR
[03:03:00] <EvanR> broken?
[03:03:04] <davean> EvanR: Broken!
[03:03:05] <ephemient> if everything's already in xmm you have to do extra work to get it over to the x87 fpu
[03:03:05] <EvanR> or not-broken
[03:03:20] <davean> EvanR: Thats what we call a compiler that gets the same results when it adds the same floats twice
[03:03:27] <EvanR> >_>
[03:03:57] <davean> Theres some 128bit float support in SSE I think, I've never used it though
[03:04:11] <davean> EvanR: The reason x87 does 80 bits is very legitimate
[03:04:16] <davean> it just causes problems for high level languages
[03:04:21] <EvanR> I don't care about 80 bits
[03:04:33] <monochrom> Oh I know!  Functional is when a and b are the same. Imperative is when a and b are different. :)
[03:04:35] <EvanR> I care about getting the same answer if you do the same thing
[03:04:54] <EvanR> use 80 bits or not
[03:05:07] <davean> EvanR: you DO get the same answer if you do the same thing, the problem is things like scheduling affect if they're the same thingh
[03:05:18] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[03:05:19] <EvanR> on paper, they look exactly the same
[03:05:27] <EvanR> i don't buy "x does not equal x, sorry"
[03:05:43] <ephemient> in two different contexts, they may be optimized differently
[03:05:47] <EvanR> depending on compiler, something could have happened between x and x
[03:05:51] <davean> EvanR: No, see, they *DON'T* look the same on paper, thats why x87 is 80 bits
[03:06:03] <EvanR> this paper
[03:06:05] <davean> EvanR: it comes from an engenering precion requirement
[03:06:08] <EvanR> a = m + n
[03:06:10] <EvanR> b = m + n
[03:06:15] <ephemient> or, the compiler might decide to compile them differently even if they're right next to each other, because it decides that's a better use of processor resources
[03:06:30] <davean> Your system just makes it basicly impossible to use x87 rigth
[03:06:40] <davean> ephemient: yep
[03:06:50] <EvanR> alright well, I prefer broken then
[03:06:51] <davean> I was just focusing on one side of the weirdness
[03:07:07] <davean> EvanR: we all prefer broken
[03:07:26] <ephemient> I think we're mostly coming to that conclusion anyhow
[03:07:51] <davean> x87 was great in the days of cooperative multiprocessing with your kernels writen in ASM
[03:08:10] <davean> now we can afford 128bit floats
[03:08:16] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[03:08:21] <ephemient> Java 17 killed strictfp (making it the default) so they're definitely not using x87 anymore
[03:08:41] <EvanR> I'm not even sure how 80 bits helps two 64bit additions
[03:08:57] <EvanR> wouldn't 80 bits only matter in a series of computations that stay 80 bits
[03:09:09] <davean> oh and I want to be clear we're talking bfloat here 
[03:09:34] <ephemient> maybe your inputs come from other computations and have intermediate 80-bit forms
[03:09:49] <davean> EvanR: See thats the problem - your entire kernel isn't supposed to leave x87
[03:10:09] <davean> its a *coprocessor*
[03:10:11] <davean> not an instruction set
[03:10:29] <davean> its a *second computer you get answers out of*
[03:10:39] <EvanR> the original GPU
[03:10:46] <EvanR> DOS can't be pure
[03:11:01] <EvanR> there's only 1 math coprocessor
[03:11:28] <dminuoso> davean: In shaders, you dont have general assurance of invariance
[03:11:44] <dminuoso> Which can lead to one operation being computed differently in different computation units
[03:12:17] <EvanR> and different computation units conveniently are all configured with various precisions?
[03:12:34] <EvanR> not your dad's parallelism
[03:12:40] <davean> dminuoso: No, shaders are all sorts of fucked up - esp because they deal with the SIMT model so your other branches can mess with you
[03:13:09] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:685d:59ed:4faf:3de1) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:13:45] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:13:45] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:13:45] *** Joins: wroathe (~wroathe@user/wroathe)
[03:14:10] <dminuoso> EvanR: Sorry a weird typo. Compilation units.
[03:14:19] <dminuoso> EvanR: Reason being different optimizations
[03:14:40] <EvanR> so why do the different compilation units have different optimizations
[03:15:15] <dminuoso> Who knows. Optimizers do all kinds of funky things, maybe there's different levels of information available, different optimization passes that kick in because they spot funky things..
[03:15:19] <davean> You can't just use floats without doing your numerical methods
[03:15:24] <dminuoso> Noboy can tell you why exactly the GHC simplifier does a particular thing either
[03:15:34] <dminuoso> It's a strange interaction from all passes
[03:16:48] <SrPx> github.com/kindelia/hvm feedbacks before I announce? :)
[03:16:52] <dminuoso> EvanR: And perhaps the GLSL compiler takes advantage of non-invariance, when its free to do "kind of correct" optimizations based on local context
[03:17:34] * monochrom takes "premature optimization is the root of all evil" and deletes "premature". :)
[03:17:38] <EvanR> that's what the section is about, moving computations around as if they are pure, redoing them sometimes, but at different precision
[03:17:56] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[03:17:57] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[03:18:15] <EvanR> THAT seems broken
[03:19:38] <EvanR> it seems within this context "optimization" doesn't entail "leaving the original behavior intact"
[03:20:07] <EvanR> baby with the bathwater would take that and say why not return a black screen every time in the name of performance
[03:21:20] <ephemient> in the context of shaders, floating point is only approximately defined. as long as the graphics that come out look close enough
[03:22:41] *** Joins: Ved2311 (~Ved2311@2600:1700:d840:2370:2c7f:af63:1c:7efc)
[03:23:09] <monochrom> Yeah "behaviour" allows a margin in this case.
[03:23:37] <monochrom> But the margin is not large enough to include black screen.
[03:25:07] *** Joins: TonyStone31 (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com)
[03:25:08] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Quit: Leaving)
[03:25:10] <monochrom> People do not want to say "if sometimes you can afford more guard bits so you can be more accurate, don't, we want the original inaccuracy, because reproducible builds".
[03:25:10] <EvanR> so in general are you supposed to interpret every float computation as having some noisy envelope around it, as if you're doing physics xD
[03:25:11] *** Quits: TonyStone31 (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com) (Remote host closed the connection)
[03:25:28] <monochrom> I would.
[03:25:37] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-cdff-5348-04ff-b4e2.res6.spectrum.com)
[03:25:38] <EvanR> which seems to defeat the purpose of digital computers
[03:26:09] <monochrom> Oh, "noise" "error" are just a simplified model.
[03:26:23] <Axman6> I found out the other day that on PPC, long double is implemented as a pair of doubles, giving 106 bits of precision but the same exponent, and this can lead to both subnormal and "supernormal" numbers
[03:26:38] <Axman6> The things you learn reading Apple's header files...
[03:27:22] <monochrom> The same way tossing a coin is modelled by probability "uncertainty" because I can't be bothered to take measurements and use Newtonian mechanics to determinize it.
[03:29:06] <EvanR> also, what about standards
[03:29:07] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[03:29:15] <monochrom> The same way I don't commit to more than "sorting takes O(n lg n)" because I can't be bothered to look at the exact hardware and calculate that it's exactly 45 n lg n + 3 n - 2 lg n microseconds.
[03:29:40] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750:724d:7bff:fe2b:f560) (Remote host closed the connection)
[03:29:53] <monochrom> Right there the unknown constant multiplier and the unknown lower order terms are exactly noise and error.
[03:29:53] <EvanR> the standard doesn't really speak in terms of noise or random results
[03:30:04] *** Joins: notzmv (~zmv@user/notzmv)
[03:30:12] <ephemient> while most programming languages nowadays say they have IEEE 754 floats, CPU's FPUs can often be configured in different modes (rounding, nan handling, etc.) and GPUs frequently have non-IEEE 754 compliant floats (different precisions, etc.)
[03:30:29] *** Joins: alx741 (~alx741@157.100.197.240)
[03:30:52] *** Joins: charukiewicz (~charukiew@2600:1702:a90:2750::3c)
[03:30:53] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:31:35] <cjay> rounding modes are part of 754
[03:31:54] <cjay> they are only a problem if some library changes it an leaves it changed
[03:32:17] <ephemient> right, I just bring it up because your calculation will be different depending on outside state
[03:32:25] <cjay> true
[03:32:39] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[03:32:52] <EvanR> in fact this situation is WORSE than being random with a known simple distribution xD
[03:33:20] <EvanR> because if you assume this and then show someone real results they will think you're nuts, not random at all
[03:33:29] <EvanR> unless you painstakingly come up with all the test run environments
[03:34:01] <EvanR> which isn't how a particular application works
[03:34:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[03:35:00] <EvanR> so quantum computers would be an upgrade in another way xD
[03:35:47] <EvanR> IEEE quantum floats
[03:37:01] <jackdk> are there (m)any data types whose `Num` instance includes noncommutative `(*)`? Matrix multiplication is the obvious candidate, but maybe they're all on special operators like `(!*!)`. And are there any common classes that require commutative `(*)` in their laws?
[03:37:45] <EvanR> @pl \x -> (x * 2)
[03:37:45] <lambdabot> (2 *)
[03:38:07] <EvanR> lambdabot proves it's commutative
[03:38:46] <EvanR> (didn't think anything depended on Num having laws)
[03:40:04] <dolio> Maybe you should stop insisting that the error terms have anything to do with repeatedly sampling from some kind of distribution.
[03:40:43] <ephemient> quaternions are another "obvious" one
[03:41:08] <EvanR> a = m + n, b = m + n, c = m + n, d = m + n, look, sampling xD But admittedly, not from any coherent distribution
[03:41:46] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[03:43:23] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[03:43:41] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[03:44:14] *** Quits: burnside_ (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[03:44:17] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Quit: Quitting IRC :()
[03:44:34] <EvanR> (also I wasn't talking about error, but inconsistency, the fact that we are even thinking of this as sequential samples)
[03:44:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[03:45:25] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:49:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[03:50:02] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[03:50:14] <jackdk> ephemient: thanks, and more likely to rely on num operators e.g. https://hackage.haskell.org/package/linear-1.21.8/docs/src/Linear.Quaternion.html#line-243
[03:51:35] *** Joins: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk)
[03:53:42] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[03:53:48] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[03:54:33] <EvanR> cool, instance Monad Quaternion -- the diagonal of a sedenion is super useful!
[03:55:30] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[04:00:29] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[04:04:00] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[04:05:28] *** Joins: Topsi (~Tobias@dyndsl-095-033-024-223.ewe-ip-backbone.de)
[04:11:11] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[04:15:41] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[04:15:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[04:16:30] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[04:17:18] *** Quits: Ved2311 (~Ved2311@2600:1700:d840:2370:2c7f:af63:1c:7efc) (Quit: Client closed)
[04:18:43] *** Joins: Akiva (~Akiva@user/Akiva)
[04:23:17] *** Quits: myme (~myme@40.51-175-185.customer.lyse.net) (Ping timeout: 250 seconds)
[04:29:14] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[04:29:26] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[04:32:37] *** Joins: Null_A (~null_a@2601:645:8700:2290:9dfb:d74f:b509:d274)
[04:40:46] *** Joins: lateef (~lateef@2603-6080-6740-0538-845d-1912-a53c-bf82.res6.spectrum.com)
[04:40:49] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[04:40:50] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[04:41:51] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:47:58] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:48:00] *** Quits: nineonine (~nineonine@S0106a0ff7073d5d5.vf.shawcable.net) (Remote host closed the connection)
[04:49:04] *** Joins: mud (~mud@user/kadoban)
[04:50:52] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:51:12] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Quit: WeeChat 3.4)
[04:51:25] *** Joins: texasmynsted_ (~texasmyns@99.96.221.112)
[04:52:20] *** Quits: texasmynsted (~texasmyns@99.96.221.112) (Ping timeout: 250 seconds)
[04:53:19] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[04:53:37] *** Quits: lateef (~lateef@2603-6080-6740-0538-845d-1912-a53c-bf82.res6.spectrum.com) (Quit: lateef)
[04:53:49] *** Joins: mystilleef (~mystillee@2603-6080-6740-0538-845d-1912-a53c-bf82.res6.spectrum.com)
[04:58:15] <dminuoso> Mmm, when a conduit receives an exception, will that flush the conduit first?
[04:58:29] <dminuoso> (Does the question even make sense?)
[05:03:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[05:05:21] *** Joins: Kaiepi (~Kaiepi@156.34.47.253)
[05:06:46] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:2541:beac:9acd:61a8) (Remote host closed the connection)
[05:06:54] *** Quits: jao (~jao@68.235.43.84) (Ping timeout: 256 seconds)
[05:08:53] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[05:09:54] *** Joins: texasmynsted (~texasmyns@99.96.221.112)
[05:10:37] *** Quits: texasmynsted_ (~texasmyns@99.96.221.112) (Ping timeout: 240 seconds)
[05:10:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[05:12:24] <jackdk> doubt it
[05:19:09] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:20:54] *** Joins: jao (~jao@static-68-235-44-71.cust.tzulo.com)
[05:23:35] *** Joins: deadmarshal (~deadmarsh@95.38.231.75)
[05:27:34] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[05:27:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.75) (Ping timeout: 240 seconds)
[05:27:39] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[05:30:50] *** Joins: vicfred (~vicfred@user/vicfred)
[05:37:59] *** Joins: texasmynsted_ (~texasmyns@99.96.221.112)
[05:39:08] *** Quits: texasmynsted (~texasmyns@99.96.221.112) (Ping timeout: 250 seconds)
[05:45:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[05:47:26] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:47:32] *** Quits: mystilleef (~mystillee@2603-6080-6740-0538-845d-1912-a53c-bf82.res6.spectrum.com) (Quit: mystilleef)
[05:48:34] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:54:51] *** Joins: califax- (~califax@user/califx)
[05:57:12] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:57:12] *** califax- is now known as califax
[05:59:43] *** Joins: kilolympus (~kilolympu@31.205.200.235)
[06:01:14] *** Joins: jkaye[m] (~jkayematr@2001:470:69fc:105::1:86f7)
[06:01:25] *** Quits: xff0x (~xff0x@2001:1a81:52f3:1d00:e2c8:a45c:f0af:d33) (Ping timeout: 250 seconds)
[06:02:51] *** Quits: Null_A (~null_a@2601:645:8700:2290:9dfb:d74f:b509:d274) (Read error: Connection reset by peer)
[06:03:16] *** Joins: xff0x (~xff0x@2001:1a81:5330:2600:3a82:23bb:1178:cc83)
[06:07:15] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[06:09:05] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00::518)
[06:10:29] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Remote host closed the connection)
[06:10:45] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[06:16:07] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[06:21:08] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[06:23:54] *** Joins: hololeap (~hololeap@user/hololeap)
[06:28:03] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[06:31:18] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[06:33:01] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[06:33:57] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Quit: ZNC 1.8.2 - https://znc.in)
[06:38:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:40:50] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[06:43:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[06:46:20] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[06:46:26] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:46:26] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:46:26] *** Joins: wroathe (~wroathe@user/wroathe)
[06:49:02] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[06:50:48] *** Joins: trillp (~trillp@2001:19f0:6401:72e:c092:4829:25d6:b788)
[06:50:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[06:53:06] *** Quits: burnsidesLlama (~burnsides@dhcp168-016.wadham.ox.ac.uk) (Remote host closed the connection)
[07:04:32] *** Quits: jao (~jao@static-68-235-44-71.cust.tzulo.com) (Remote host closed the connection)
[07:05:04] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[07:08:07] *** Joins: mbuf (~Shakthi@136.185.77.246)
[07:10:49] *** Joins: Erutuon (~Erutuon@user/erutuon)
[07:13:16] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[07:14:40] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[07:16:40] *** Quits: td_ (~td@muedsl-82-207-238-178.citykom.de) (Ping timeout: 256 seconds)
[07:18:17] *** Joins: td_ (~td@muedsl-82-207-238-222.citykom.de)
[07:19:30] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[07:19:41] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[07:23:24] *** Joins: jao (~jao@static-68-235-44-71.cust.tzulo.com)
[07:31:21] *** Joins: euphrates[m] (~euphrates@2001:470:69fc:105::fbb5)
[07:33:58] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 250 seconds)
[07:42:17] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00::518) (Read error: Connection reset by peer)
[07:42:35] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00::518)
[07:51:34] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00::518) (Remote host closed the connection)
[07:51:52] *** Joins: kimjetwav (~user@2607:fea8:2363:8f00:f6a1:f8c9:ad86:473d)
[07:56:26] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[08:12:08] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:12:08] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:12:08] *** Joins: wroathe (~wroathe@user/wroathe)
[08:12:17] *** Quits: foul_owl (~kerry@174-21-143-101.tukw.qwest.net) (Ping timeout: 250 seconds)
[08:13:16] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 245 seconds)
[08:18:33] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:23:19] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[08:23:57] *** Quits: kimjetwav (~user@2607:fea8:2363:8f00:f6a1:f8c9:ad86:473d) (Ping timeout: 240 seconds)
[08:24:08] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[08:24:29] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) ()
[08:24:51] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:25:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:26:13] *** Joins: foul_owl (~kerry@94.140.8.108)
[08:32:02] *** Quits: foul_owl (~kerry@94.140.8.108) (Ping timeout: 256 seconds)
[08:32:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:33:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[08:33:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[08:33:48] *** Joins: wroathe (~wroathe@user/wroathe)
[08:36:08] *** Joins: robosexual (~spaceoyst@92.248.225.230)
[08:37:09] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:37:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:42:52] *** Quits: swistak (~swistak@185.21.216.141) (Ping timeout: 250 seconds)
[08:42:58] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[08:43:13] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:43:30] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[08:43:53] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:44:19] *** Quits: Topsi (~Tobias@dyndsl-095-033-024-223.ewe-ip-backbone.de) (Read error: Connection reset by peer)
[08:45:58] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[08:46:13] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:46:14] *** Joins: foul_owl (~kerry@94.140.8.107)
[08:46:29] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) ()
[08:46:58] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[08:47:28] *** Quits: jao (~jao@static-68-235-44-71.cust.tzulo.com) (Remote host closed the connection)
[08:54:42] *** Quits: cjb (~cjb@user/cjb) (Quit: rcirc on GNU Emacs 29.0.50)
[08:58:25] *** Joins: jao (~jao@static-68-235-44-71.cust.tzulo.com)
[09:01:47] *** Joins: deadmarshal (~deadmarsh@95.38.114.109)
[09:04:07] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:04:56] *** Joins: swistak (~swistak@185.21.216.141)
[09:06:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:08:56] *** Quits: jao (~jao@static-68-235-44-71.cust.tzulo.com) (Remote host closed the connection)
[09:09:00] *** Joins: freemanX (~user@138.75.106.242)
[09:09:45] *** Joins: andreabedini (~andreabed@8s8kj6n5jr0p8rp4lths.ip6.superloop.com)
[09:12:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 260 seconds)
[09:18:01] *** Joins: fvr (uid503686@id-503686.uxbridge.irccloud.com)
[09:18:54] <fvr> what does `qAddDependentFile` do? https://hackage.haskell.org/package/template-haskell-2.18.0.0/docs/Language-Haskell-TH-Syntax.html#v:qAddDependentFile
[09:21:10] <andreabedini> fvr: I guess the description of addDependentFile is more informative https://hackage.haskell.org/package/template-haskell-2.18.0.0/docs/Language-Haskell-TH-Syntax.html#v:addDependentFile
[09:22:01] <fvr> that's informative, thanks!
[09:26:19] *** Quits: freemanX (~user@138.75.106.242) (Remote host closed the connection)
[09:27:03] *** Quits: doxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 250 seconds)
[09:27:32] *** Joins: rusrushal13 (~rusrushal@2401:4900:447c:7aab:9569:ad9c:2bdf:6f6e)
[09:31:34] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[09:35:44] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[09:40:30] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 260 seconds)
[09:46:29] *** Joins: cynomys (~cynomys@user/cynomys)
[09:48:58] *** Joins: jao (~jao@static-68-235-44-71.cust.tzulo.com)
[10:01:21] *** Quits: rusrushal13 (~rusrushal@2401:4900:447c:7aab:9569:ad9c:2bdf:6f6e) (Ping timeout: 256 seconds)
[10:03:30] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:04:45] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[10:07:20] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[10:12:54] *** Quits: jao (~jao@static-68-235-44-71.cust.tzulo.com) (Ping timeout: 256 seconds)
[10:13:14] *** Joins: fef (~thedawn@user/thedawn)
[10:14:21] *** Joins: zeenk (~zeenk@2a02:2f04:a204:7c00:d1e7:19c4:1020:b94b)
[10:19:54] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:20:22] *** Quits: robosexual (~spaceoyst@92.248.225.230) (Quit: Konversation terminated!)
[10:20:41] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:21:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[10:23:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[10:23:39] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[10:23:49] *** Joins: zeenk2 (~zeenk@2a02:2f04:a104:3700:5a8:957d:2155:a792)
[10:24:01] *** Quits: zeenk (~zeenk@2a02:2f04:a204:7c00:d1e7:19c4:1020:b94b) (Ping timeout: 250 seconds)
[10:24:23] *** Joins: _ht (~quassel@231-169-21-31.ftth.glasoperator.nl)
[10:27:15] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[10:27:53] *** Joins: michalz (~michalz@185.246.204.57)
[10:28:16] *** Joins: falafel (~falafel@2603-8000-8403-e980-a564-89bf-cc0b-6efb.res6.spectrum.com)
[10:28:23] *** Joins: zaquest (~notzaques@5.130.79.72)
[10:28:33] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[10:32:16] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:dde2:c55f:f2c9:43fc)
[10:35:08] *** Parts: trillp (~trillp@2001:19f0:6401:72e:c092:4829:25d6:b788) (WeeChat 3.4)
[10:42:39] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:45:15] *** Quits: zeenk2 (~zeenk@2a02:2f04:a104:3700:5a8:957d:2155:a792) (Ping timeout: 250 seconds)
[10:46:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:47:01] *** Joins: zeenk2 (~zeenk@82-77-96-125.cable-modem.hdsnet.hu)
[10:47:56] *** Quits: zeenk2 (~zeenk@82-77-96-125.cable-modem.hdsnet.hu) (Client Quit)
[10:49:16] *** Joins: dut (~dut@user/dut)
[10:49:52] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[10:58:33] <Cheery> haskell's type inference is not quite standard and deals with kinded variables, but does it have a name?
[10:58:49] <Cheery> it's quite not higher-order unification, right? lambdas are missing.
[10:59:57] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[11:01:35] *** Joins: vysn (~vysn@user/vysn)
[11:02:26] <Andrew> So I've got something like a string "1 2 3 4", and I want to convert it to a list [Integer] [1, 2, 3, 4]... How do I do that?
[11:02:59] <jackdk> What are some subproblems that you could solve to achieve this goal?
[11:03:47] <Andrew> Hmm, splitting a string by spaces, and converting e.g. "1" to 1
[11:04:18] <jackdk> Sounds like I good start. I know that "splitting a string by spaces" has a function in the Prelude to do that
[11:04:43] <[exa]> Cheery: it's a variant of system Fω, there's a pretty nice paper on it (I think the current pop name for the algorithm is OutsideIn)
[11:04:46] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[11:05:15] <Andrew> heh, emerge doesn't want to install cabal for me lol
[11:05:28] <Andrew> I'll go with prelude first...
[11:05:35] <dolio> Cheery: It's not even close to higher-order unification. It's really not significantly different han what you'd do for HM.
[11:05:53] <Andrew> "words" does the trick
[11:05:57] <jackdk> I would use ghcup if at all possible. I don't know the state of haskell packaging on Gentoo
[11:06:24] <dolio> The higher order variables can only be solved to partial-applications of higher-order constants, basically.
[11:06:50] <jackdk> Andrew: yep. so now to turn the `[String] -> [Int]`. Where are you at with your Haskell learning? Are you still learning direct recursion, or are you comfortable with higher-order functions?
[11:07:06] <Andrew> I'm comfortable with higher-order
[11:07:37] <[exa]> Cheery: also SPJ has a pretty nice talk from zurihac somewhere on youtube (it's unfortunately clipped at the end but delivers the message)
[11:07:41] <Andrew> I just need a function or whatever to turn a string into an integer 
[11:07:54] * Andrew is okay with 'map'
[11:08:05] <jackdk> yeah map is the way here
[11:08:45] <jackdk> for now, `read :: Read a => String -> a` will do, but that can fail at runtime
[11:09:00] <dolio> Or, replace HM with whatever strategy you want for the first-order case.
[11:09:22] <jackdk> to do this for reals, I would use `Text.Read.readMaybe :: Read a => String -> Maybe a`
[11:09:31] <jackdk> have you done typeclasses yet?
[11:09:38] <Andrew> Typeclasses, yes
[11:09:56] <Andrew> But I'm not that comfortable with Monads e.g. Maybe
[11:10:22] <Andrew> It's to the point where I could understand it if people gave me example code (and I have the docs to the side)
[11:10:48] <jackdk> sure, so let's get it working at all, first. Have you got something going with `map`, `read`, and `words`?
[11:11:30] <Andrew> I waasn't careful with the typesig of read, that seems to be it
[11:11:31] <Andrew> Thanks :)
[11:12:43] <jackdk> no problem. if you want to try building a safer version, ignore the fact that Maybe has a Monad instance for now and just treat it as a data type. try to write a function `foo :: [Maybe a] -> Maybe [a]`
[11:13:13] *** Quits: andreabedini (~andreabed@8s8kj6n5jr0p8rp4lths.ip6.superloop.com) (Quit: WeeChat 3.3)
[11:16:16] <Cheery> so if I type inference in ukanren that has prolog-style terms, I could imitate this with tap(caller, arg)
[11:16:33] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:16:38] <Cheery> tap(list, int)
[11:18:54] <Cheery> but kinds should match, too.
[11:19:46] <Cheery> I have a hunch that it can be done, though.
[11:21:27] *** Joins: notzmv (~zmv@user/notzmv)
[11:22:57] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 250 seconds)
[11:23:06] <Cheery> tap(caller, arg), kind(tap(caller, arg), star).. then treat kind as a chr constraint.
[11:23:56] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:e245:b598:3bd:262a)
[11:24:03] <dolio> I don't know if I understand the question. If it's just whether you can do Haskell's inference with normal unification, then the answer is yes.
[11:24:40] <dolio> And yeah, you need to do some kind checking to make sure your unifications of types don't go wrong.
[11:25:21] <dolio> You don't need something like lambda prolog or whatever.
[11:26:03] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[11:26:18] <oscurochu> is it true that haskell code does not need to be tested?
[11:26:32] <jackdk> not at all
[11:27:32] <jackdk> a large class of tests -- those that check argument and return types -- don't need to be written, but you still need to write tests.
[11:27:32] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:27:39] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:28:11] *** Joins: alp (~alp@user/alp)
[11:28:41] <dolio> Cheery: The spots where you actually need to do kind checking are usually pretty limited, though. Usually you wouldn't end up in a sitaution where a unification of types can be ill-kinded unless it's from something a programmer wrote.
[11:28:45] <Cheery> kind(tap(F, A), B) <=> kind(F, TA → TB), kind(A, TA), kind(B, TB)
[11:28:59] <Cheery> ok.
[11:29:14] <ski> > case [ns | (ns,s) <- many (StateT (reads :: ReadS Integer)) `runStateT` "0 1 2 3",("","") <- lex s] of [ns] -> Just ns; _ -> Nothing  -- Andrew ?
[11:29:15] <lambdabot>  Just [0,1,2,3]
[11:30:17] <oscurochu> jackdk i just started learning how to write tests in javascript and clojure, and still don't 100% understand testing. how do i learn more about testing in haskell?
[11:30:21] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[11:30:38] <Cheery> kind(F, X), kind(F, Y) <=> X != Y | false.
[11:30:38] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[11:31:11] <Cheery> so.. I could probably get this done that way.
[11:31:34] *** Joins: max22- (~maxime@2a01cb08833598005d2ea791b13aed90.ipv6.abo.wanadoo.fr)
[11:31:55] <jackdk> oscurochu: unit testing is often the same as any other language: factor out your functions into smaller parts. pure functions are easier to test. Think about what the outputs should be for a given input, and write test cases that ensure it's actually the case. I like the tasty library, with tasty-hunit for writing unit tests
[11:32:17] <ski> also, property testing
[11:32:50] <jackdk> @check \x y -> x + y == y + x
[11:32:52] <lambdabot>  +++ OK, passed 100 tests.
[11:33:20] <ski> @check \x y -> x == y
[11:33:21] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:e245:b598:3bd:262a) (Ping timeout: 250 seconds)
[11:33:22] <lambdabot>  +++ OK, passed 100 tests.
[11:33:33] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[11:33:39] <jackdk> I don't have a good intro for that handy, but yes definitely important. https://www.youtube.com/watch?v=NcJOiQlzlXQ maybe?
[11:33:58] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:d2eb:19ab:f134:7a9c)
[11:34:55] *** Joins: flipchan (~filip@188-169-255-31.dsl.utg.ge)
[11:35:00] *** Joins: jakalx (~jakalx@base.jakalx.net)
[11:35:25] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[11:36:07] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[11:36:19] * ski . o O ( "Don't Write Tests!" by John Hughes in 2017-06 at <https://www.youtube.com/watch?v=hXnS_Xjwk2Y> )
[11:36:57] *** Joins: coot (~coot@2a02:a310:e241:1b00:ec1a:e9df:79ac:66ba)
[11:38:34] <Cheery> hm. I got that one rule wrong.
[11:38:42] <Cheery> kind(tap(F, A), TB) <=> kind(F, TA → TB), kind(A, TA).
[11:41:03] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[11:41:53] <oscurochu> what about tests that the output depends on the output of another function? i just started learning about haskell, so forgive my javascript-like syntax; func1 (x, func2) = func3(x, func2);
[11:42:26] *** Quits: prasad (~user@c-73-170-49-136.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[11:43:47] *** Joins: chele (~chele@user/chele)
[11:44:25] <ski> Cheery : .. i was thinking it looked like a type error
[11:44:39] <EvanR> oscurochu, so func1 = func3 ? xD
[11:45:03] <EvanR> I simplified your function
[11:45:16] <oscurochu> lol let me find the actual example i had in mind, i wrote it down wrong.
[11:45:21] <ski> presumably `func2' isn't universally quantified
[11:45:56] *** Joins: ardell (~ardell@user/ardell)
[11:46:29] *** o is now known as niko
[11:47:50] <oscurochu> Func1 ( req, res ) = Func2(Func3, req.userId );
[11:48:32] <ski> `res' is singleton ?
[11:48:48] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:49:46] <oscurochu> ( req, res ) are the arguments give by the expressjs router. not sure how that would work in haskell.
[11:50:24] <ski> i mean, it seems a bit weird that `res' is only mentioned once
[11:50:27] <EvanR> so you want to test a request handler
[11:50:39] <EvanR> which means you'll need some test requests to handle
[11:51:27] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[11:51:44] <oscurochu> but what if func3 also calls func4 and func4 calls func5, etc. 
[11:51:55] <EvanR> what if they do
[11:52:08] <EvanR> you'll be doing a "end to end" test basically
[11:52:13] *** Quits: alp (~alp@user/alp) (Ping timeout: 250 seconds)
[11:52:13] <EvanR> which some people swear by
[11:52:20] <oscurochu> true
[11:54:18] <oscurochu> so im thinking that the idea of testing would be to start at the purest function, so that by the time i test a function like this, i should expect it to pass?
[11:54:31] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 245 seconds)
[11:55:46] *** Quits: ensyde (~ensyde@2600:1700:2050:1040:dde2:c55f:f2c9:43fc) (Ping timeout: 245 seconds)
[11:55:48] <EvanR> when you have working function f1 and working function f2, there's no guarantee putting them together works
[11:55:57] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:56:10] <EvanR> if it does, presumably your test passes
[11:56:19] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:57:15] <EvanR> but making sure your pure functions are right is a huge step toward a working system
[11:57:19] <ski> oscurochu : bottom-up ?
[12:00:33] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[12:00:43] *** Quits: charukiewicz (~charukiew@2600:1702:a90:2750::3c) ()
[12:01:18] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[12:02:11] <oscurochu> Ok that makes sense. Thanks. That has already made a difference in how I see this code I wrote. I had a bunch of code that was largely untestable, and it feels really good to finally get to the point im at. Learing haskell has helped me see code i've written in new ways
[12:02:28] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[12:02:54] *** Joins: tom_ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684)
[12:03:32] *** Joins: fendor (~fendor@178.165.174.170.wireless.dyn.drei.com)
[12:04:10] *** Joins: jiribenes (~jiribenes@rosa.jiribenes.com)
[12:04:13] *** Quits: choucavalier_ (~choucaval@peanutbuttervibes.com) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: b20n (sid115913@id-115913.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:04:13] *** Quits: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:04:19] *** Quits: Jon (jon@dow.land) (Quit: ZNC - http://znc.in)
[12:04:29] *** Joins: terrorjack5 (~terrorjac@2a01:4f8:1c1e:509a::1)
[12:04:50] *** Quits: kaskal (~kaskal@2001:4bb8:2cc:5073:e1cf:a3ef:264a:1e80) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[12:04:50] *** Quits: jiribenes_ (~jiribenes@rosa.jiribenes.com) (Ping timeout: 268 seconds)
[12:04:52] *** Joins: choucavalier (~choucaval@peanutbuttervibes.com)
[12:05:07] *** Joins: kaskal (~kaskal@2001:4bb8:2cc:5073:e1cf:a3ef:264a:1e80)
[12:05:27] *** Quits: xbreu (~xbreu@2001:470:69fc:105::1:5061) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: denbrahe (~denbrahe@2001:470:69fc:105::19c0) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: Las[m] (~lasmatrix@2001:470:69fc:105::74e) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be) (Ping timeout: 268 seconds)
[12:05:27] *** Quits: sm (~sm@plaintextaccounting/sm) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f) (Ping timeout: 268 seconds)
[12:05:28] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 268 seconds)
[12:06:02] *** Quits: robertm (robertm@lattice.rojoma.com) (Ping timeout: 240 seconds)
[12:06:04] *** Quits: zwro[m] (~zwromatri@2001:470:69fc:105::1d4) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: peddie (~peddie@2001:470:69fc:105::25d) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: quantum (~quantum@user/quantum/x-8556232) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: alex[m]1234567 (~alexchete@2001:470:69fc:105::1:1001) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: acidsys (~LSD@2.lsd.systems) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: tom__ (~tom@2a00:23c8:970c:4801:5b6a:e81b:79dc:f684) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: Flow (~none@gentoo/developer/flow) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: ddb (~ddb@ipv6two.tilde.club) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: lieven (~mal@ns2.wyrd.be) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: davetapley (sid666@id-666.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: dexterfoo (dexter@2a01:7e00::f03c:91ff:fe86:59ec) (Ping timeout: 268 seconds)
[12:06:04] *** Quits: jocke-l (jocke-l@a.x0.is) (Ping timeout: 268 seconds)
[12:06:04] *** terrorjack5 is now known as terrorjack
[12:06:19] *** Joins: dut_ (~dut@user/dut)
[12:06:19] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[12:07:23] *** Joins: lieven (~mal@ns2.wyrd.be)
[12:07:27] *** Joins: dexterfoo (~dexter@li655-253.members.linode.com)
[12:07:42] *** Joins: kuribas (~user@ptr-25vy0i9mijo6rhu39yx.18120a2.ip6.access.telenet.be)
[12:07:42] *** Joins: ddb (~ddb@ipv6two.tilde.club)
[12:07:51] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[12:08:00] *** Joins: davetapley (sid666@id-666.uxbridge.irccloud.com)
[12:08:06] *** Joins: lechner (~lechner@debian/lechner)
[12:08:14] *** Joins: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[12:09:25] *** Quits: dut (~dut@user/dut) (Ping timeout: 256 seconds)
[12:10:33] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[12:13:22] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[12:16:58] <oscurochu> So haskell has web frameworks. Im kind of overwhelmed by the number of them. I just want to know how mutations work in a language thats immutable
[12:17:17] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (Quit: The BNC has broken!)
[12:17:23] *** Joins: ManofLetters[m] (~manoflett@2001:470:69fc:105::3be)
[12:17:38] *** Joins: robertm (~robertm@lattice.rojoma.com)
[12:17:50] *** Joins: xbreu (~xbreu@2001:470:69fc:105::1:5061)
[12:18:16] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:18:20] *** Joins: jocke-l (jocke-l@a.x0.is)
[12:18:32] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Ping timeout: 240 seconds)
[12:18:45] <dminuoso> oscurochu: Okay, so the immutability has to be understood in context
[12:18:51] <dminuoso> It's not that we dont have mutations.
[12:18:58] *** Joins: b20n (sid115913@id-115913.uxbridge.irccloud.com)
[12:18:58] *** Joins: wallymathieu (sid533252@id-533252.uxbridge.irccloud.com)
[12:19:01] <dminuoso> We have a lot of different mutation tools, including those available to other languages
[12:19:09] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:19:09] *** Joins: Flow (~none@gentoo/developer/flow)
[12:19:10] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[12:19:20] <dminuoso> We can manipulate memory directly, we can have traditional "variables" (lets better call them mutable stores) that you can simply manipulate in a loop...
[12:19:41] <dminuoso> It's just that the grammatical *expressions* themselves cant cause mutation
[12:19:51] *** Joins: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es)
[12:19:56] <dminuoso> That is, the act of *evaluating* an expression <expr> cant (usually) cause mutation
[12:20:14] *** Joins: denbrahe (~denbrahe@2001:470:69fc:105::19c0)
[12:20:25] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:20:26] *** Joins: alex[m]1234567 (~alexchete@2001:470:69fc:105::1:1001)
[12:20:36] *** Joins: peddie (~peddie@2001:470:69fc:105::25d)
[12:20:37] *** Quits: sayola (~vekto@dslb-088-064-186-153.088.064.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[12:20:41] *** Joins: Yehoshua (~yehoshua@2001:470:69fc:105::1:593f)
[12:20:44] *** Joins: sm1 (~sm@plaintextaccounting/sm)
[12:20:45] <dminuoso> A rough intuition to help guide you here, is that if we think of `IO A` as a list of assembly instructions which, if executed, could carry out some arbitrary things. Those assembly instructions themselves are free to do whatever, including manipulating memory or mutable stores.
[12:20:52] <dminuoso> But evaluating that list of assembly instructions may not.
[12:21:20] <oscurochu> that makes sense
[12:21:21] *** Joins: Las[m] (~lasmatrix@2001:470:69fc:105::74e)
[12:21:35] *** Joins: zwro[m] (~zwromatri@2001:470:69fc:105::1d4)
[12:21:58] *** Joins: quantum (~quantum@user/quantum/x-8556232)
[12:22:37] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Ping timeout: 240 seconds)
[12:23:06] *** Joins: acidsys (~LSD@2.lsd.systems)
[12:23:18] <dminuoso> oscurochu: In addition, we even have a special environment, in which we can carry out mutations *inside* the evaluation of pure code.
[12:23:29] <dminuoso> But its limited in such a way, that these manipulations remain hidden outside, so you cant leak this state.
[12:23:45] *** Quits: mrmonday (~robert@what.i.hope.is.not.a.tabernaevagant.es) (Remote host closed the connection)
[12:24:10] <dminuoso> This is called ST, and it enables us to say implementing a sort algorithm say like quicksort - which requires in-place mutation to remain efficient - but use it in otherwise pure code.
[12:24:16] <dminuoso> % :t runST
[12:24:16] <yahb> dminuoso: (forall s. ST s a) -> a
[12:24:33] * ski . o O ( STM )
[12:24:56] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:25:15] <dminuoso> So that way we have the benefit of both worlds, writing pure code while using localized mutations that cannot possibly leak out to write highly efficient algorithms.
[12:25:17] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Ping timeout: 256 seconds)
[12:25:26] <dminuoso> While preventing observable mutations
[12:25:38] <dminuoso> inside that pure code.
[12:26:05] <ephemient> if you go back to pre-monadic-IO Haskell, main was a pure function that returned a list of IO actions that the runtime should execute, with the results of those actions being fed back into main as input - and with laziness, it all worked out. monadic IO wraps that up into something that is easier to work with
[12:26:25] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[12:26:31] <dminuoso> ski: Yeah, I pondered mentioning it. :)
[12:26:33] *** Joins: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[12:27:00] *** Joins: mrmonday (~robert@octarineparrot.com)
[12:28:04] <kuribas> ah, records parameterised by higher kinded variables works just fine in idris :)
[12:28:29] <kuribas> Maybe I should move on from this low level language callled haskell ...
[12:29:40] <kuribas> https://gist.github.com/kuribas/c4d7fd7ce7ef963f7c02a266828095f3
[12:30:27] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[12:31:31] *** Quits: yauhsien (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[12:31:52] *** Joins: flipchan (~filip@188-169-255-31.dsl.utg.ge)
[12:31:58] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Changing host)
[12:31:58] *** Joins: flipchan (~filip@user/flipchan)
[12:44:17] *** Joins: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374)
[12:47:21] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:47:35] *** Joins: cstml (~cstml@user/cstml)
[12:47:39] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:47:57] *** Joins: __monty__ (~toonn@user/toonn)
[12:50:20] *** Quits: falafel (~falafel@2603-8000-8403-e980-a564-89bf-cc0b-6efb.res6.spectrum.com) (Read error: Connection reset by peer)
[12:52:57] *** Quits: shriekingnoise (~shrieking@201.231.16.156) (Quit: Quit)
[12:53:48] *** Joins: Jon (jon@dow.land)
[12:54:20] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[12:54:46] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Read error: Connection reset by peer)
[12:55:04] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[12:55:14] *** Joins: phma__ (~phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f)
[12:56:45] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[12:58:22] *** Quits: Adeon (sid418992@id-418992.lymington.irccloud.com) (Ping timeout: 260 seconds)
[12:58:39] *** Quits: Jon (jon@dow.land) (Quit: ZNC - http://znc.in)
[12:58:50] *** Quits: phma (phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f) (Ping timeout: 260 seconds)
[12:59:19] *** phma__ is now known as phma
[12:59:58] *** Joins: Adeon (sid418992@id-418992.lymington.irccloud.com)
[13:03:15] *** Joins: alp (~alp@user/alp)
[13:03:52] *** Joins: phma_ (phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f)
[13:04:38] *** Joins: Jon (jon@dow.land)
[13:05:13] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (Ping timeout: 250 seconds)
[13:05:21] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:9145:1668:6954:3d71) (Remote host closed the connection)
[13:05:31] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:06:04] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[13:06:05] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (Ping timeout: 250 seconds)
[13:07:23] *** Quits: cln (sid336875@id-336875.ilkley.irccloud.com) (Ping timeout: 252 seconds)
[13:07:23] *** Quits: ephemient (uid407513@id-407513.lymington.irccloud.com) (Ping timeout: 250 seconds)
[13:07:23] *** Quits: aristid (sid1599@id-1599.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[13:07:26] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 245 seconds)
[13:07:31] *** Joins: aristid (sid1599@id-1599.uxbridge.irccloud.com)
[13:07:42] *** Quits: phma (~phma@2001:5b0:211f:83e8:ceab:d757:d3e2:cd8f) (Ping timeout: 260 seconds)
[13:07:56] *** Quits: lightandlight (sid135476@id-135476.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[13:08:01] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[13:08:15] *** Quits: truckasaurus (sid457088@id-457088.helmsley.irccloud.com) (Ping timeout: 250 seconds)
[13:08:15] *** Quits: bradparker (sid262931@id-262931.uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[13:08:29] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[13:08:30] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 250 seconds)
[13:09:06] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[13:09:06] *** Quits: rune (sid21167@id-21167.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[13:09:11] *** Joins: cln (sid336875@id-336875.ilkley.irccloud.com)
[13:09:19] *** Joins: ski (~ski@remote12.chalmers.se)
[13:09:35] *** Quits: joel135 (sid136450@id-136450.hampstead.irccloud.com) (Ping timeout: 252 seconds)
[13:09:56] *** Quits: NemesisD (sid24071@id-24071.lymington.irccloud.com) (Ping timeout: 245 seconds)
[13:10:01] *** Joins: tritlo (sid58727@user/tritlo)
[13:10:13] *** Joins: bradparker (sid262931@id-262931.uxbridge.irccloud.com)
[13:10:26] *** dut_ is now known as dut
[13:10:34] *** Joins: ephemient (uid407513@id-407513.lymington.irccloud.com)
[13:10:43] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[13:10:45] *** Joins: joel135 (sid136450@id-136450.hampstead.irccloud.com)
[13:10:50] *** phma_ is now known as phma
[13:10:50] *** Joins: lightandlight (sid135476@id-135476.helmsley.irccloud.com)
[13:11:00] *** Joins: ehamberg (sid18208@id-18208.hampstead.irccloud.com)
[13:11:06] *** Joins: NemesisD (sid24071@id-24071.lymington.irccloud.com)
[13:11:07] *** Joins: truckasaurus (sid457088@id-457088.helmsley.irccloud.com)
[13:11:17] *** Quits: alinab (sid468903@helmsley.irccloud.com) (Ping timeout: 250 seconds)
[13:11:43] *** Joins: rune (sid21167@id-21167.ilkley.irccloud.com)
[13:11:45] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[13:12:01] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[13:13:09] *** Joins: alinab (sid468903@id-468903.helmsley.irccloud.com)
[13:13:46] *** Quits: vito (sid1962@user/vito) (Ping timeout: 260 seconds)
[13:14:30] *** Joins: vito (sid1962@user/vito)
[13:14:45] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[13:16:03] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (Ping timeout: 250 seconds)
[13:19:24] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[13:19:41] *** Quits: cynomys (~cynomys@user/cynomys) (Ping timeout: 256 seconds)
[13:24:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[13:25:59] *** Joins: cfricke (~cfricke@user/cfricke)
[13:26:01] *** Quits: cfricke (~cfricke@user/cfricke) (Client Quit)
[13:26:12] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[13:26:59] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[13:27:26] *** Quits: max22- (~maxime@2a01cb08833598005d2ea791b13aed90.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[13:31:48] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:33:17] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[13:35:11] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[13:36:19] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:36:54] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[13:38:12] *** Joins: cfricke (~cfricke@user/cfricke)
[13:39:50] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[13:40:15] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[13:42:49] *** Joins: Graham31415 (~Graham314@5.33.56.252)
[13:47:59] *** ncopa3 is now known as ncopa
[13:48:18] *** Quits: ncopa (~ncopa@gbr2-dev1.alpinelinux.org) (Changing host)
[13:48:18] *** Joins: ncopa (~ncopa@alpine/developer/ncopa)
[13:50:11] <Graham31415> Hi. I'm planning to learn Haskell, and I've noticed there are a variety of older docs/books that apply to Haskell98. Should I avoiding learning from older reference material (some of them look more my style compared to newer resources)? I have GHC 9.0.2 installed via my OS, and see that this does Haskell2010 by default, but that newer GHC versions
[13:50:12] <Graham31415> enable GHC2021 by default (with a bewildering array of extensions enabled). Is there a reason to use/avoid any particular Haskell subset while learning? Is it just a matter of ignoring any syntax I don't understand when reading code (at least for now)?
[13:50:32] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[13:51:46] <geekosaur> haskell2010 has maybe 3 smallish changes compared to haskell98
[13:52:25] <geekosaur> the bigger changes aren't captured by any standard but they're easy enough to deal with once you know about them
[13:52:29] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:7951:c786:1220:b402)
[13:53:14] <geekosaur> (and ghc2021 is those extensions and nothing else, and you won't find any learning material for it. or for the extensions, aside from stuff that assumes you already learned standard Haskell)
[13:54:15] <geekosaur> @where books
[13:54:15] <lambdabot> https://www.extrema.is/articles/haskell-books, see also @where LYAH, RWH, YAHT, SOE, HR, PIH, TFwH, wikibook, PCPH, HPFFP, HTAC, TwT, FoP, PFAD, WYAH, non-haskell-books
[13:54:57] <geekosaur> mm, guess that needs to be edited
[13:55:23] *** Joins: xsperry (~xs@user/xsperry)
[13:55:36] <geekosaur> or not, lyah seems to be back online
[13:57:14] <Graham31415> Thanks!
[13:59:13] <geekosaur> feel free to ask here if you have any questions or problems
[13:59:24] <geekosaur> there's usually someone around who can help
[13:59:35] <Graham31415> Awesome. Will do!
[13:59:43] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:d2eb:19ab:f134:7a9c) (Quit: WeeChat 2.8)
[14:00:28] *** Quits: eggplant_ (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Remote host closed the connection)
[14:02:00] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:05:48] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[14:06:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[14:09:17] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:8e08:7908:8918:48c0) (Ping timeout: 240 seconds)
[14:09:30] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[14:09:37] <Franciman> so you kept making fun of me
[14:09:47] <Franciman> https://github.com/Kindelia/HVM here is the answer to y'all
[14:10:46] <Franciman> and now i am happy i won't have to code in haskell ever again, this community has become toxic for me
[14:10:50] <Franciman> enjoy making fun of people
[14:10:51] <Franciman> bye
[14:11:06] <Franciman> we are hopefully getting much better tools than haskell and much better communities
[14:11:08] <Franciman> bye
[14:11:35] *** Joins: arjun (~arjun@user/arjun)
[14:11:47] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (haskell is the richest esolang)
[14:13:01] <kuribas> What's up with him?
[14:14:27] *** Joins: memowe (~memowe@vpnpool6-3901-0442.uni-muenster.de)
[14:14:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:15:15] <opqdonut> oh huh HVM sounds interesting
[14:15:30] <memowe> o/
[14:16:37] <geekosaur> Franciman has been in the past rather pissy that we don't think like they do
[14:16:46] <kuribas> geekosaur: there are more?
[14:16:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[14:16:59] <geekosaur> singular "they"
[14:17:14] * geekosaur tends to avoid gendering
[14:17:43] <kuribas> ah, haha :)
[14:17:45] * [exa] foresees `theys`
[14:17:51] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[14:18:03] <Franciman> geekosaur: i've been pissy? Ok I apologise, but i did because i felt made fun of
[14:18:11] <Franciman> because of your (noy specifically yours) sarcarsm
[14:18:20] <Franciman> ok
[14:18:21] <Franciman> sorry
[14:18:23] <dminuoso> kuribas: This is a singular they as per Chicago Guide of Style
[14:18:32] <kuribas> right :)
[14:18:33] <geekosaur> I didn't see much sarcasm in the exchanges I saw, just a complete failure to agree on basics
[14:18:33] <Franciman> but why make fun of me
[14:18:45] <maerwald> geekosaur: "they" is also gendering
[14:19:05] <Franciman> you can use "it" for me, please :)
[14:19:14] <kuribas> haskellers are pedantic, academic, stubburn, dismissive, but I wouldn't call them toxic...
[14:20:06] <Franciman> geekosaur: glad to be wrong
[14:21:19] <Franciman> so i haven't been made fun of when i encouraged a friend, but received the equivalent in text of rolled eyes by by other people in the room
[14:21:20] <kuribas> stubborn
[14:21:22] <Franciman> ok
[14:22:02] *** Parts: memowe (~memowe@vpnpool6-3901-0442.uni-muenster.de) ()
[14:22:06] <Franciman> proposing things and getting answers like: yes, and maybe let's also do this *dumb thing*
[14:22:09] <Franciman> isn't sarcasm
[14:22:11] <Franciman> ?
[14:22:16] <Franciman> ok, then
[14:22:18] <Franciman> i was wrong
[14:22:19] <[exa]> Franciman: btw what happened? (for the others here, my scrollback doesnt seem to reach any problems)
[14:23:07] <Franciman> nothing
[14:23:09] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:23:10] <Franciman> i misinterpreted things
[14:23:12] <Franciman> so enjoy 
[14:23:18] <[exa]> oh okay
[14:23:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:23:25] <Franciman> enjoy your awesome perfect ultimate language
[14:23:30] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[14:23:31] <maerwald> :D
[14:23:45] <Franciman> being beaten by hvm by an exponential factor
[14:23:58] <Franciman> pretty awesome result
[14:24:01] <Franciman> btw
[14:24:29] <dminuoso> Glad if you produce results that you're happy with.
[14:24:38] <Franciman> and maybe in the future remember that some people may feel offended when you act in some ways
[14:24:40] <Franciman> so ok
[14:24:46] <Franciman> sorry , i misinterpreted
[14:24:49] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:24:57] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
[14:25:01] <Franciman> enjoy your esocommunity
[14:25:05] <Franciman> bye
[14:25:08] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (TURBOquit(TM) - the fastest way to get out of awkward situations)
[14:25:50] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[14:26:20] *** Lord_of_Life_ is now known as Lord_of_Life
[14:27:11] <maerwald> I think Haskell is more of a sunk cost fallacy by now (like 99% of all languages)
[14:27:19] <maerwald> but that's ok
[14:27:20] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[14:27:27] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[14:29:21] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[14:30:22] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[14:31:05] *** Joins: alx741 (~alx741@157.100.197.240)
[14:31:18] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[14:32:01] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[14:32:06] *** Joins: newhoggy (sid198874@id-198874.helmsley.irccloud.com)
[14:32:34] *** Joins: fef (~thedawn@user/thedawn)
[14:32:52] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[14:33:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:34:04] <Benzi-Junior> how do I set a  ghc flag globally
[14:34:06] *** Quits: Graham31415 (~Graham314@5.33.56.252) (Quit: Client closed)
[14:34:31] <Benzi-Junior> i.e. whenever I run ghc I want certain flags sets
[14:35:42] <geekosaur> there isn't really a way to do so. but these days it's unusual to run ghc by itself, and if you use cabal or stack there are ways to set "global" options
[14:39:38] <maerwald> Benzi-Junior: a wrapper script
[14:40:30] <geekosaur> beware that if you do that it could confuse stacdk/cabal if you do use them for some things
[14:40:43] <geekosaur> depending on the option
[14:43:04] *** Joins: cynomys (~cynomys@user/cynomys)
[14:43:57] <Benzi-Junior> geekosaur, -fno-warn-tabs 
[14:45:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[14:45:25] *** Joins: cfricke (~cfricke@user/cfricke)
[14:45:38] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (Quit: My Ex-Girlfriend once told me: I'm not a slut, I'm just popular)
[14:45:44] *** Quits: cynomys (~cynomys@user/cynomys) (Client Quit)
[14:46:22] <yushyin> I advise you not to use tabs unless you really really know how the layout rules work :D
[14:46:36] <geekosaur> that one's probably fine although … that. people will warn you about it all over the place :)
[14:46:58] <yushyin> like I just did :)
[14:47:10] *** Quits: chele (~chele@user/chele) (Ping timeout: 256 seconds)
[14:47:20] <geekosaur> also that you always use editors that agree with ghc on what a tab is
[14:47:49] <Benzi-Junior> honestly, I have been writing haskell since years before ghc made -fwarn tabs the default
[14:48:23] <Benzi-Junior> I have yet to find a single bug due to indentation
[14:50:06] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[14:51:05] *** Quits: gawen_ (~gawen@user/gawen) (Read error: Connection reset by peer)
[14:52:52] <Benzi-Junior> I have however had -fwarn-tabs break some builds beacuse of tools escalating warnings to errors
[14:53:43] *** Joins: gawen (~gawen@user/gawen)
[14:54:29] *** Quits: gawen (~gawen@user/gawen) (Read error: Connection reset by peer)
[14:55:12] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[14:56:44] *** Joins: gawen (~gawen@user/gawen)
[14:58:57] <maerwald> Benzi-Junior: use a wrapper script
[14:59:25] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[15:00:37] *** Quits: vglfr (~vglfr@46.96.161.0) (Ping timeout: 240 seconds)
[15:00:50] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[15:00:57] *** Joins: Erutuon (~Erutuon@user/erutuon)
[15:01:11] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[15:01:40] <maerwald> exec ghc -fno-warn-tabs ${1+"$@"}
[15:01:48] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:02:04] *** Joins: max22- (~maxime@2a01cb08833598000998630b2f1bfbaa.ipv6.abo.wanadoo.fr)
[15:03:06] <geekosaur> use a path on that "ghc" so the script doesn't re-exec itself :)
[15:03:42] <geekosaur> (also just tested to make sure it doesn't do weird stuff with --version, --supported-languages, or other things build systems might want to do with ghc behind your back)
[15:05:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Ping timeout: 240 seconds)
[15:06:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:08:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[15:09:03] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[15:10:40] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[15:17:02] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:19:37] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[15:22:29] <Andrew> When compiling and running https://termbin.com/v4fh, the evaluation sequence is wrong
[15:22:41] <Andrew> i.e. I get the prompt '> ' after typing the input
[15:23:39] <yushyin> you should flush stdout handle
[15:23:47] <dminuoso> Or change the buffering mode.
[15:23:59] <Andrew> Oh, thanks
[15:24:12] <Andrew> I thought that it was a strictness issue, which confused me because I'm already in `do'
[15:24:25] <dminuoso> This is some of the bizarre things you begin to appreciate, that in a terminal you have stdin echo and stdout together in one stream..
[15:24:38] <dminuoso> So its up to you to sort out the ambiguity/reordering issues
[15:24:42] <Andrew> I mean, don't all interactive programs do that?
[15:25:10] <dminuoso> All interactive CLI programs *must* do this one way or another
[15:25:43] <dminuoso> That's simply a natural consequence of shared screen estate. If you want your output and input echo to occur on the same space.
[15:26:08] *** Joins: notzmv (~zmv@user/notzmv)
[15:27:02] <dminuoso> Amongst the toolbag of things to do is: tightly control buffering, toggle echo mode off, switch to raw mode and handle everything yourself..
[15:27:24] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 256 seconds)
[15:28:59] <dminuoso> If you take a curses client, like say common IRC clients, they address this by switching to raw mode and then controlling the entirety of the terminal manually by emitting the right control sequences in the right order/time.
[15:29:11] <geekosaur> the reason output is buffered is because even in 2022 if you turn off buffering you can see individual characters being output one at a time
[15:29:31] <geekosaur> if every one needs its own systemj call for output
[15:29:32] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[15:30:02] * Andrew likes having individual outputs one-by-one
[15:30:15] <Andrew> I hate it when UNIX pipes buffer too much
[15:30:15] <dminuoso> Andrew: Your users might not for performance reasons.
[15:30:20] <Andrew> Hehe true
[15:30:42] <yushyin> only in haskell do people quickly blame lazyness for this, while the same behaviour is seen in all other languages
[15:30:48] <dminuoso> Andrew: The ideal compromise here is raw mode.
[15:31:02] <Andrew> dminuoso: I found that, thanks
[15:31:41] *** Joins: kaph (~kaph@net-2-47-208-144.cust.vodafonedsl.it)
[15:31:42] <Andrew> yushyin: I don't see that with TeX or C or python or shell, but yes, Haskell has laziness, and if you don't know what `do' does, that's a reasonable idea
[15:31:43] <dminuoso> Andrew: Say curses actually uses custom buffering but with arbitrary degrees of freedom. But it means the terminal output is managed by you entiretly.
[15:31:51] *** Joins: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de)
[15:31:56] <Andrew> Yeah, I know that
[15:32:01] <geekosaur> I see it with C, it does exactly the same buffering
[15:32:03] *** Joins: gawen_ (~gawen@user/gawen)
[15:32:05] <yushyin> ^
[15:32:30] <dminuoso> Mmm, is that actually defined in C?
[15:32:30] *** Quits: gawen (~gawen@user/gawen) (Ping timeout: 256 seconds)
[15:32:35] <boxscape_> Is there a canonical haskell solution for putting on hold and waking up threads with signals from other threads?
[15:32:41] <dminuoso> Id expect buffering defined in systems standards like POSIX, if anything.
[15:32:59] <dminuoso> boxscape_: Yes.
[15:33:09] <dminuoso> boxscape_: Use an T/MVar?
[15:33:15] <dminuoso> And just block on it one way or another
[15:33:23] <boxscape_> ah, right, those exist
[15:33:24] <boxscape_> thanks
[15:33:39] <Andrew> By the way, is there something like `read', but works for [char]?  For example, `functionToBeDiscovered "123" :: Integer` is 123
[15:34:00] <dminuoso> Andrew: So read actually works for that, but it's a very poor fit.
[15:34:00] <geekosaur> huh?
[15:34:12] <Andrew> Hmm...
[15:34:21] <byorgey> Andrew: [Char] is the same as String
[15:34:21] <__monty__> :t read
[15:34:21] <geekosaur> @src String
[15:34:21] <lambdabot> type String = [Char]
[15:34:22] <lambdabot> Read a => String -> a
[15:34:28] <dminuoso> Andrew: The simple "get some quick practice" answer is read if you dont care about performance, bugs and poor diagnostics.
[15:34:31] <Andrew> I know that char is same as string, yes
[15:34:38] <dminuoso> The industrial answer is attoparsec/megaparsec.
[15:34:50] <Andrew> I mean, `read "123" :: Integer` is errooneous
[15:34:56] <byorgey> > read "123" :: Integer
[15:34:58] <lambdabot>  123
[15:35:01] <byorgey> works for me
[15:35:07] <Andrew> Wait, really sorry, that was my typing, sorry :(
[15:35:16] <byorgey> hehe, no worries =)
[15:35:20] <dminuoso> Andrew: So the first answer is, you likely never want read, readMaybe is the better solution
[15:35:32] <dminuoso> Because you likely dont control the input, so you need to be able to deal with bugs.
[15:35:48] <Andrew> Ah, yes
[15:36:27] <dminuoso> The next step is that read extremely poor performance, the third step is that `read` is sort of like a haskell evaluator (that complements show) rather than a parser framework. Then final, read is unable to give any diagnostics as to why or where parsing something failed.
[15:36:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[15:37:00] <dminuoso> Which is why if you want to turn textual data into something different, you likely want to use a proper parsing library like `attoparsec` or `megaparsec`
[15:37:19] <dminuoso> Haskell certainly doesnt make the task of "process some text data" very easy for beginners (and experts).
[15:37:36] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[15:39:02] <Andrew> dminuoso: I noticed that, yeah.  I think it's not that easy (but "better") in C either, the easiest is of course sh, which doesn't have types, and everything is a string 
[15:41:43] <geekosaur> well, except sh is short on a bunch of useful tools
[15:41:47] <geekosaur> which is why awk and perl
[15:42:35] *** Quits: vysn (~vysn@user/vysn) (Quit: WeeChat 3.3)
[15:45:19] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 256 seconds)
[15:45:27] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[15:46:57] *** Guest9250 is now known as xstill-
[15:47:05] *** Joins: fef (~thedawn@user/thedawn)
[15:47:27] *** xstill- is now known as Guest1281
[15:48:13] *** Joins: cfricke (~cfricke@user/cfricke)
[15:50:55] <maerwald> Andrew: sh has types, e.g. functions (arrays in bash) etc.
[15:50:59] <dminuoso> Andrew: Better in C? As if all the string formatting and parsing functions have historically not been one of the largest source of CVEs...
[15:51:53] <dminuoso> Astronomically poor support for textual data in C gave right to entire industries of red and blue teams...
[15:51:58] <dminuoso> *gave birth
[15:52:04] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[15:52:08] <Andrew> That's true
[15:52:12] <dminuoso> So sure. Its good in the sense that it secures a lot of peoples lifes... :)
[15:52:14] <maerwald> dminuoso: that's because people in C don't use parser combinators
[15:52:18] <maerwald> it's not the fault of the language
[15:52:22] <Andrew> Exactly
[15:52:30] <dminuoso> maerwald: Its the fault of the language if they bring tools that are incredibly easy to misuse.
[15:52:41] <Andrew> I mean, sh is really UNIXy, so things are supposed to be separate tools linked together
[15:53:03] <dminuoso> It's like handing unstable explosives to a kid, but blaming them for playing with them, instead of the safe wooden toys
[15:53:05] <maerwald> dminuoso: parser combinators didn't really exist back then I hink
[15:53:10] <maerwald> so no, I don't think it's the fault of the language
[15:53:22] <Andrew> By the way, are there any BUILTIN functions that are like the INVERSE of map?  For example it takes a list of functions (do those exist? hmm) and a peice of data and applies all of them to a list
[15:53:35] <dminuoso> Andrew: Yes, map!
[15:53:41] <Andrew> What?
[15:53:59] <dminuoso> % ($ 3) <$> [(+1), (*2)]
[15:53:59] <yahb> dminuoso: [4,6]
[15:54:03] <dminuoso> Voila! :)
[15:54:15] <dminuoso> note, if you're unfamiliar, <$> is an infix variant of map
[15:54:25] <dminuoso> % map ($ 3) [(+1), (*2)]
[15:54:25] <yahb> dminuoso: [4,6]
[15:54:35] <Andrew> why the $ there?
[15:54:43] <Guillaum[m]> And if you are unfamiliar with ($ 3), that (\f -> f 3)
[15:54:51] <dminuoso> a $ b = a b
[15:54:56] <Andrew> Oh
[15:55:05] <dminuoso> So ($ 3) is a partially applied ($)
[15:55:09] * Andrew recalls that `seq' is used somewhere there
[15:55:10] *** Quits: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net) (Ping timeout: 256 seconds)
[15:55:16] <boxscape_> % distribute [(+1), (*2)] 3
[15:55:16] <yahb> boxscape_: [4,6]
[15:55:18] <Andrew> k, got it :)
[15:55:20] <boxscape_> that's not in the standard library though
[15:55:25] <Andrew> It feels a bit hacky though
[15:55:30] <dminuoso> What's hacky about it?
[15:55:38] <dminuoso> It's very idiomatic.
[15:56:47] <Guillaum[m]> Andrew if you are not at ease with `$`, just write another function (let's say "g f = f 3") and use it in your map (such as "map g [(+1), (*2)]")
[15:57:19] *** Joins: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net)
[15:58:15] <idnar> % [(+1), (*2)] <*> pure 3
[15:58:15] <yahb> idnar: [4,6]
[15:58:24] <dminuoso> Or write your own `distribute xs y = ($ y) <$> xs`, and then have the same comfort as boxscape_ above.
[15:58:33] <Andrew> Yeah
[15:58:37] <Andrew> Thanks
[15:59:45] *** Joins: chele (~chele@user/chele)
[15:59:46] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[16:00:16] <boxscape_> (the one I used is from the "distributive" package by the way)
[16:00:30] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:db29:cb0:7e70:ac05)
[16:00:57] <boxscape_> % sequenceA [(+1), (*2)] 3
[16:00:58] <yahb> boxscape_: [4,6]
[16:00:58] <boxscape_> hm
[16:01:06] <boxscape_> I suppose that works, too
[16:01:19] <dminuoso> % :t sequenceA
[16:01:19] <yahb> dminuoso: (Traversable t, Applicative f) => t (f a) -> f (t a)
[16:01:40] <dminuoso> That's quite cunning
[16:01:55] <boxscape_> I only tried it because sequenceA's type signature is so similar to distribute
[16:01:57] <boxscape_> :t distribute
[16:01:58] <lambdabot> error:
[16:01:58] <lambdabot>     • Variable not in scope: distribute
[16:01:58] <lambdabot>     • Perhaps you meant ‘distrib’ (imported from Control.Lens)
[16:01:59] <boxscape_> % :t distribute
[16:02:00] <yahb> boxscape_: (Distributive g, Functor f) => f (g a) -> g (f a)
[16:02:02] <dminuoso> But I think its too shrouded and not obvious what this does.
[16:02:08] <boxscape_> that is true
[16:02:23] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:02:55] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:03:05] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[16:03:27] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[16:07:38] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[16:12:52] *** Quits: MasseR4 (~MasseR@51.15.143.128) (Quit: The Lounge - https://thelounge.chat)
[16:13:30] *** Joins: MasseR4 (~MasseR@51.15.143.128)
[16:14:47] *** Joins: Gurkenglas (~Gurkengla@dslb-090-186-104-244.090.186.pools.vodafone-ip.de)
[16:16:25] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66)
[16:18:35] *** Joins: Guest4442 (~Guest44@77.222.105.50)
[16:27:03] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[16:27:48] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[16:28:00] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:7951:c786:1220:b402) (Quit: Textual IRC Client: www.textualapp.com)
[16:29:31] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[16:30:38] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:32:09] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[16:32:41] *** Joins: vglfr (~vglfr@46.96.158.194)
[16:35:34] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[16:39:24] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[16:40:29] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:41:06] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:41:10] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[16:41:13] *** Joins: fendor_ (~fendor@77.119.206.49.wireless.dyn.drei.com)
[16:42:32] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[16:43:51] *** Quits: fendor (~fendor@178.165.174.170.wireless.dyn.drei.com) (Ping timeout: 250 seconds)
[16:46:06] *** Quits: Guest1281 (xstill@lounge.fi.muni.cz) (Changing host)
[16:46:06] *** Joins: Guest1281 (xstill@fimu/xstill)
[16:47:12] *** Guest1281 is now known as xstill_
[16:54:40] *** Quits: max22- (~maxime@2a01cb08833598000998630b2f1bfbaa.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[16:55:52] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[16:56:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Quit: Leaving)
[16:57:47] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[17:02:21] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:04:06] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:05:19] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[17:07:36] *** Quits: dsrt^ (~dsrt@75-147-197-198-Atlanta.hfc.comcastbusiness.net) (Remote host closed the connection)
[17:09:11] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[17:10:14] *** xstill_ is now known as xstill-
[17:10:17] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 250 seconds)
[17:11:18] *** Joins: jespada (~jespada@87.74.36.188)
[17:13:13] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[17:13:28] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[17:18:21] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[17:19:14] *** Joins: vysn (~vysn@user/vysn)
[17:19:35] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[17:20:00] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[17:20:19] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[17:21:09] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:21:17] *** Parts: qrpnxz (~qrpnxz@user/qrpnxz) (Disconnected: Replaced by new connection)
[17:21:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[17:21:40] *** Joins: Pickchea (~private@user/pickchea)
[17:21:42] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) ()
[17:22:01] *** Joins: qrpnxz (~qrpnxz@user/qrpnxz)
[17:24:56] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[17:25:03] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[17:29:31] *** Quits: newhoggy (sid198874@id-198874.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[17:29:40] *** Joins: newhoggy (sid198874@id-198874.helmsley.irccloud.com)
[17:31:07] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[17:33:46] *** Joins: slack1256 (~slack1256@191.126.99.84)
[17:34:13] *** Quits: slack1256 (~slack1256@191.126.99.84) (Remote host closed the connection)
[17:34:18] *** Joins: Unhammer (~Unhammer@user/unhammer)
[17:38:14] <Morrow> boxscape_: I believe using sequence like that will use O(n) space, or so I've heard
[17:38:31] <boxscape_> oh interesting
[17:39:38] *** Joins: y04nn (~y04nn@92.223.89.196)
[17:39:47] *** Quits: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[17:39:53] <Morrow> since you sessentially have sequence [a,b] = (\x -> a x : (\y -> b y : (\z -> []) y) x)
[17:41:48] *** Joins: wombat875 (~wombat875@pool-72-89-24-154.nycmny.fios.verizon.net)
[17:44:40] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:7942:5c67:99d0:7a74)
[17:45:44] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:46:00] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[17:46:36] <Morrow> Although now I'm not so sure about that
[17:47:56] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[17:49:33] <Morrow> Actually it seems to make a big difference when optimizations are turned on.
[17:51:57] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[17:52:38] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[17:52:54] *** Joins: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl)
[17:55:36] <boxscape_> I suppose that makes sense
[17:57:21] *** Quits: tv (~tv@user/tv) (Ping timeout: 256 seconds)
[18:00:09] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[18:00:12] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Quit: leaving)
[18:00:28] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[18:01:20] *** Joins: tv (~tv@user/tv)
[18:03:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:03:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:03:24] *** Joins: wroathe (~wroathe@user/wroathe)
[18:03:26] <Profpatsch> ANy better way to convert a Map into a HashMap than going (HashMap.fromList . Map.toList)?
[18:04:15] <geekosaur> nope. they're completely different structures, there's no shortcut to conversion
[18:04:42] <Guillaum[m]> Profpatsch: I don't think so. You may want to use `fold` and `HashMap.insert`, but it won't be dramatically different.
[18:04:58] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:05:02] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[18:05:06] <Profpatsch> geekosaur: But conversion e.g. with foldMapWithKey is probably pretty similar?
[18:05:33] <geekosaur> yes. you're still going through an intermediate, it's just hidden inside the fold
[18:05:46] <Profpatsch> I guess it’s hard to know and I need to benchmark it if it ever becomes a speed problem
[18:05:54] <geekosaur> either way you're building a completely different structure from the original
[18:06:00] <Profpatsch> Or just convert to a builder directly
[18:06:21] <Profpatsch> Oh but it will only recurse to the level of keys anyway and leave the values untouched
[18:06:24] <Profpatsch> so it’s not a deep copy
[18:08:29] <boxscape_> Is there a way to kill a thread harder than with killThread?
[18:08:50] <boxscape_> in particular when the thread in question is blocked at the moment
[18:09:49] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[18:09:58] *** Joins: hueso (~root@user/hueso)
[18:10:33] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[18:11:33] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[18:12:06] <boxscape_> hm from I can find it seems like the answer is probably no
[18:14:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[18:18:45] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[18:19:40] *** Quits: deadmarshal (~deadmarsh@95.38.114.109) (Ping timeout: 256 seconds)
[18:20:24] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:21:49] *** Quits: cods (~fred@82-65-232-44.subs.proxad.net) (Ping timeout: 240 seconds)
[18:21:54] *** Joins: hueso (~root@user/hueso)
[18:23:30] *** Joins: cods (~fred@82-65-232-44.subs.proxad.net)
[18:27:04] *** Joins: max22- (~maxime@2a01cb08833598004ac57d9f58d5074f.ipv6.abo.wanadoo.fr)
[18:27:04] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:28:45] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:28:46] *** Joins: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2)
[18:29:25] *** Joins: shriekingnoise (~shrieking@201.231.16.156)
[18:29:50] *** Quits: hueso (~root@user/hueso) (Quit: hueso)
[18:33:05] *** Joins: hueso (~root@user/hueso)
[18:34:24] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[18:35:02] *** Quits: hueso (~root@user/hueso) (Client Quit)
[18:36:54] <Guillaum[m]> Profpatsch: The keys and values will be shared between both structures, but the spine of the structures will be totally different.
[18:37:11] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[18:38:11] *** Joins: hueso (~root@user/hueso)
[18:38:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:38:40] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[18:40:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:41:33] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[18:43:53] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 250 seconds)
[18:46:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:46:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:46:35] *** Joins: wroathe (~wroathe@user/wroathe)
[18:46:54] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:47:24] <RMSBach> Isn't Map -> HashMap an apomorphism?  I'm a bit rusty on my barbed wire and bananas though...
[18:48:55] <RMSBach> Well, its probably a natural transformation too, but that isn't surprising.  Sorry Profpatsch I'm not being very useful or practical
[18:50:01] *** Joins: Pickchea (~private@user/pickchea)
[18:50:50] *** Quits: flipchan (~filip@user/flipchan) (Ping timeout: 256 seconds)
[18:51:11] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[18:51:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[18:57:19] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:57:25] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Ping timeout: 256 seconds)
[19:00:29] <boxscape_> hmm I wonder why the type of replicateM was changed to use Applicative, but the type of sequence still uses Monad
[19:01:44] <geekosaur> it's a mishmash
[19:01:52] <boxscape_> fun
[19:01:57] <geekosaur> some things got changed, some got alternatives (e.g. sequenceA)
[19:02:07] <byorgey> I guess because we already had sequenceA but we didn't have replicateA?
[19:02:11] <byorgey> not that that's a good reason
[19:03:26] <boxscape_> hm I suppose that would explain it
[19:07:19] *** Joins: flipchan (~filip@188-169-255-31.dsl.utg.ge)
[19:08:01] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67)
[19:09:14] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[19:10:49] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66) (Remote host closed the connection)
[19:11:08] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66)
[19:11:48] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[19:13:00] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:f0bc:c4cb:1665:1c67) (Remote host closed the connection)
[19:13:17] *** Quits: alp (~alp@user/alp) (Ping timeout: 240 seconds)
[19:14:04] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[19:15:33] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66) (Ping timeout: 256 seconds)
[19:16:02] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[19:16:52] *** Joins: slack1256 (~slack1256@186.11.113.101)
[19:18:44] <slack1256> When is recomended to run `+RTS -A32m -n8m --RTS` instead of bare `+RTS -A32m --RTS`. Asking in another way, how does separating the allocation area in chunk sizes help with threaded programs performance?
[19:20:05] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[19:22:01] *** Quits: dut (~dut@user/dut) (Ping timeout: 250 seconds)
[19:22:26] *** Joins: wavemode (~wavemode@c-98-223-145-19.hsd1.il.comcast.net)
[19:24:55] <[exa]> slack1256: it eliminates false sharing
[19:25:15] *** Joins: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net)
[19:26:46] *** Quits: cstml (~cstml@user/cstml) (Quit: Connection closed)
[19:26:49] <Guillaum[m]> https://downloads.haskell.org/~ghc/9.0.1/docs/html/users_guide/runtime_control.html#rts-flag--n%20%E2%9F%A8size%E2%9F%A9 there are details here, but [exa] I'm not sure it improves false sharing, because as I understand documentation, threads are always given a separate allocation area.
[19:28:16] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[19:28:30] *** Joins: alp (~alp@user/alp)
[19:28:35] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:30:08] *** Joins: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0)
[19:33:07] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[19:33:24] <Guillaum[m]> I tried to run a program with `-A100M -N1` and `-N8` and indeed, first program consumns 100M, when the other consums 800M (as stated by +RTS -s)
[19:35:17] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[19:36:42] <Guillaum[m]> slack1256: now back to your question. Imagine you have 2 threads, the first one is not allocating much, when the second one is allocating a lot. When the 32m of the second one will be exhausted, a GC will happen, when actually only half of the allocation space was used. Now split that in chunks of 8mega, you have 8 chunks. thread 2 will consumns 7 chunks (so 7/8 of the available allocation area) before triggering a collection. There is a
[19:36:42] <Guillaum[m]> bit more CPU used to dispatch chunks, but that not a lot.
[19:37:00] <slack1256> Guillaum[m]: Just to be clear, I am asking about the lower case -n option though.
[19:37:41] <slack1256> OK, you are clear on that. Give me a sec to read what you wrote.
[19:38:58] <slack1256> Is the allocation area (-A) common for all the capabilities?
[19:39:14] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Remote host closed the connection)
[19:39:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[19:39:55] <Guillaum[m]> slack1256: my little experiment above let me think that there is a different allocation area for each capability.
[19:40:12] <boxscape_> I just accidentally wrote code where it doesn't make a difference whether you use $ or <$>, was confused for a minute https://paste.tomsmeding.com/jMW5XzhZ
[19:42:46] <Guillaum[m]> slack1256: you can have a similar effect (i.e. less GC) by increasing `-A`, but it will use more memory.
[19:42:56] <slack1256> That was what I thought too. So I don't see how chunking each separate allocation area will help. I mean, the second capability allocation area is now chunked at the 4m. It still consumes the 32M faster than the first capability.
[19:43:49] <Guillaum[m]> slack1256: I think that all the chunks are now avaialbel in a shared pool. So one capability can now use all of them.
[19:44:06] <slack1256> Ooooh, that would be indeed helpful!
[19:45:00] <slack1256> Also, you could set the chunks to be the size of your L2-cache.
[19:46:38] *** Quits: flipchan (~filip@188-169-255-31.dsl.utg.ge) (Changing host)
[19:46:38] *** Joins: flipchan (~filip@user/flipchan)
[19:46:55] <Guillaum[m]> I'm not sure it may have an impact on performance. chunks are written linearly (so you don't really care about it being in cache) and are read randomly.
[19:47:20] <Guillaum[m]> (sorry, need to go, nice technical discussion, I learned a few things will trying to answer your question, I appreciate that).
[19:49:57] *** Quits: max22- (~maxime@2a01cb08833598004ac57d9f58d5074f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[19:50:02] *** Quits: mbuf (~Shakthi@136.185.77.246) (Quit: Leaving)
[19:50:42] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[19:51:31] <slack1256> Guillaum[m]: Thanks to you too.
[19:52:48] *** Quits: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net) (Quit: The Lounge - https://thelounge.chat)
[19:53:59] *** Joins: Katarushisu (~Katarushi@cpc147334-finc20-2-0-cust27.4-2.cable.virginm.net)
[19:55:14] <[exa]> slack1256: basically I meant that there's a bit of delay whenever you need to exclusively access a page on a CPU after another CPU used it, so if you have more threads writing to the same location, the chance for these delays are expectably high (consider multithread garbage collection in this regard). I guess that adding chunks prevents this kind of race on the chunk headers (or generally any such 
[19:55:20] <[exa]> hotspots)
[19:59:09] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Remote host closed the connection)
[20:01:34] *** Quits: aeka (~aeka@2606:6080:1001:18:8d41:9604:d435:36b6) (Quit: ZNC 1.8.2 - https://znc.in)
[20:01:54] *** Joins: aeka (~aeka@user/hiruji)
[20:02:00] *** Joins: jaror[m] (~jaror@2001:470:69fc:105::265)
[20:05:13] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:db29:cb0:7e70:ac05) (Ping timeout: 268 seconds)
[20:05:20] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[20:09:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Ping timeout: 240 seconds)
[20:11:24] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[20:14:08] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 256 seconds)
[20:14:44] *** Joins: emf (~emf@162.218.217.186)
[20:17:00] *** Joins: zmt00 (~zmt00@user/zmt00)
[20:17:02] *** Joins: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66)
[20:18:44] *** Joins: emf_ (~emf@163.114.132.4)
[20:19:27] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[20:19:48] *** Quits: emf (~emf@162.218.217.186) (Ping timeout: 256 seconds)
[20:25:18] *** Quits: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374) (Ping timeout: 250 seconds)
[20:26:05] *** Joins: chomwitt (~chomwitt@2a02:587:dc03:8900:12c3:7bff:fe6d:d374)
[20:29:53] *** Quits: jgeerds_ (~jgeerds@55d4a547.access.ecotel.net) (Ping timeout: 268 seconds)
[20:30:33] *** Joins: econo (uid147250@user/econo)
[20:30:53] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[20:31:27] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 276 seconds)
[20:31:50] <albet70> for example, main = scotty 80 $ do {get "/test" $ doSomething} , every GET requests will let doSomething run, could save the variable doSomething out of it? so that all the variable can be get?
[20:32:44] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Remote host closed the connection)
[20:33:06] <albet70> with other languages, it would use global variable to archive, for example, set a global list variable, so every doSomething save its inner variable to that list
[20:34:42] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:37:06] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[20:37:45] *** Joins: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu)
[20:38:40] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[20:38:41] *** Joins: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net)
[20:39:29] *** Quits: dust_ (~dust@2405:204:5488:ef4c:54b6:3467:52f3:e9f2) (Quit: Konversation terminated!)
[20:42:52] <fruitfly> Hi, can I ask about this:
[20:42:53] <fruitfly> Prelude> :t elem
[20:42:53] <fruitfly> elem :: (Foldable t, Eq a) => a -> t a -> Bool
[20:42:54] <fruitfly> Does "t a" mean a list? I find it a bit weird, it looks as though it where two parameters.
[20:42:58] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[20:43:09] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[20:43:27] <Rembane> fruitfly: It's a list written in a strange way. 
[20:43:36] *** Quits: yauhsien_ (~yauhsien@61-231-37-18.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[20:44:14] <Rembane> fruitfly: On a more formal level, t is anything that has an instance of the Foldable typeclass. List has an instance of the Foldable typeclass.
[20:44:20] *** Joins: neurocyte0917090 (~neurocyte@IP-045143076117.dynamic.medianet-world.de)
[20:44:20] *** Quits: neurocyte0917090 (~neurocyte@IP-045143076117.dynamic.medianet-world.de) (Changing host)
[20:44:20] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[20:44:21] <geekosaur> % :t elem @[]
[20:44:22] <yahb> geekosaur: Eq a => a -> [a] -> Bool
[20:44:43] <geekosaur> there I filled in the list type as "t"
[20:44:49] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[20:45:37] <fruitfly> Thank you!
[20:45:49] *** sa1_ is now known as sa1
[20:46:19] <geekosaur> % :t elem @S.Set
[20:46:19] <yahb> geekosaur: Eq a => a -> S.Set a -> Bool
[20:46:28] <geekosaur> since Set is also a member of Foldable
[20:46:37] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[20:46:57] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:47:15] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[20:47:43] *** Quits: fvr (uid503686@id-503686.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:51:19] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Ping timeout: 256 seconds)
[20:52:12] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:54:35] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[20:55:36] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[20:57:09] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[20:57:20] *** Joins: jao (~jao@static-68-235-44-23.cust.tzulo.com)
[20:57:49] *** Joins: sagax (~sagax_nb@user/sagax)
[20:57:59] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[20:58:46] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:02:16] *** Quits: russruss (~russruss@my.russellmcc.com) (Quit: The Lounge - https://thelounge.chat)
[21:04:06] *** Joins: russruss (~russruss@my.russellmcc.com)
[21:04:55] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[21:07:55] *** Quits: Guest4442 (~Guest44@77.222.105.50) (Quit: Client closed)
[21:08:13] *** Quits: AWizzArd (~code@gehrels.uberspace.de) (Changing host)
[21:08:13] *** Joins: AWizzArd (~code@user/awizzard)
[21:08:55] *** Quits: boxscape_ (~boxscape_@p4ff0b9d5.dip0.t-ipconnect.de) (Quit: Connection closed)
[21:08:57] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[21:10:15] *** Joins: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0)
[21:11:12] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 268 seconds)
[21:11:33] <segfaultfizzbuzz> for nonstrict/lazy evaluation, is it possible to have your cake and eat it too? by that i mean, can i have many/most of the benefits of laziness but operate a system where the performance impact is provably no worse than a strict evaluation approach?
[21:11:52] <segfaultfizzbuzz> or is it an inherent trade-off, that laziness simply has a performance overhead
[21:12:24] <dsal> laziness isn't opposed to efficiency.
[21:12:46] *** Joins: burnsidesLlama (~burnsides@dhcp168-030.wadham.ox.ac.uk)
[21:13:59] *** Quits: fruitfly (~fruitfly@host-79-121-42-70.kabelnet.hu) (Ping timeout: 256 seconds)
[21:14:07] *** Joins: Topsi (~Tobias@dyndsl-095-033-094-250.ewe-ip-backbone.de)
[21:14:31] <kuribas> segfaultfizzbuzz: define "performance impact".  I don't think lazyness is going to matter significantly over other factors.
[21:14:51] <Andrew> Laziness => efficency for some programs
[21:14:59] <Andrew> And laziness does mean more memory usage
[21:15:12] <segfaultfizzbuzz> well with strictness when i ask for a value, it will have already been evaluated
[21:15:14] <maerwald> it can also mean worse performance
[21:15:18] <segfaultfizzbuzz> but with laziness, if i ask for a value, i may need to wait
[21:15:19] <kuribas> Andrew: Not necessarily 
[21:15:27] <Andrew> kuribas: I know
[21:15:32] <maerwald> but this is so general, there's no clear answer
[21:15:37] <Andrew> Generally, for large thunks
[21:16:17] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:16:17] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: alx741)
[21:16:21] <segfaultfizzbuzz> meaning that to achieve laziness much of the benefit comes from calculating things after they are requested
[21:16:33] *** Joins: alx741 (~alx741@157.100.197.240)
[21:16:44] <maerwald> the performance problem with laziness is that it can cause memory allocations in hot loops, which are unnecessary
[21:17:11] <maerwald> you can easily throw ram at all other problems, but not at this one
[21:18:11] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[21:18:26] <maerwald> and strict evaluation can calculate an entire subcomputation that's not needed
[21:19:07] <maerwald> IME, the latter is easier to find and reason about
[21:19:20] <maerwald> unless you don't understand your own algorithm
[21:19:39] <maerwald> the laziness problem is only solvable via debugging
[21:20:13] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[21:20:51] <maerwald> there are also some edge cases where laziness allows much better optimizations (e.g. in lens library)
[21:21:22] <maerwald> for most programs, it's usually not worth it
[21:23:48] *** Quits: Megant (megant@user/megant) (Ping timeout: 250 seconds)
[21:25:42] *** Joins: Megant (megant@user/megant)
[21:27:57] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:29:37] *** Quits: neverfindme (~hayden@158.123.160.43) (Max SendQ exceeded)
[21:30:02] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[21:30:16] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:31:41] <segfaultfizzbuzz> ok thanks (bbiab)
[21:31:49] *** Quits: segfaultfizzbuzz (~rustisafu@2602:306:cd3c:9350:5d4f:b362:d270:61b0) (Quit: Leaving)
[21:32:31] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[21:32:48] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[21:33:47] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:7942:5c67:99d0:7a74) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:34:21] <polyphem> albet70: main = do sharedVar <- newTVarIO Nothing ; _ <- forkIO (taskA sharedVar) ; scotty 80 $ do {get "/test" $ doSomething sharedVar }
[21:34:29] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (Ping timeout: 252 seconds)
[21:34:36] *** Joins: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg)
[21:36:17] *** Joins: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[21:36:52] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:37:43] *** Quits: MajorBiscuit (~MajorBisc@c-001-028-049.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:38:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:39:42] <dminuoso> 18:42:24             dsal | laziness isn't opposed to efficiency.
[21:39:57] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[21:40:10] <dminuoso> Mmm, if that was accurate, the inability to predict performance wouldn't be such an ubiquitous topic in all the Haskell discussion forums.
[21:40:19] <dminuoso> Even amongst more experienced Haskellers.
[21:40:34] <dsal> Yeah, but the answer isn't "make everything strict"
[21:40:54] <geekosaur> I also wouldn;t say opposed to. I would say "makes much harder to reason about"
[21:41:03] <dsal> Sometimes laziness helps.  Sometimes it makes it weird and confusing.
[21:41:07] *** Joins: deadmarshal (~deadmarsh@95.38.228.65)
[21:41:22] <c_wraith> you can learn to understand Haskell performance
[21:41:40] <c_wraith> it mostly comes down to learning how to write code that doesn't break things.
[21:42:12] <dminuoso> When you have to learn how to write code that pleases the current flavour of combinations in the GHC simplifier for your current versions, I'm not convinced this is a viable strategy.
[21:42:27] <c_wraith> unfortunately there isn't compiler support for getting it right, and that's a huge issue in a language that depends on the compiler to tell you so much
[21:42:41] <dminuoso> As it is right now, I cant even have guaranteed sharing. Say writing `let a = ... a ... a` does not guarantee sharing - I lack the tools to guide the implementations.
[21:44:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[21:44:30] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[21:44:38] <c_wraith> Haskell doesn't guarantee that - Haskell doesn't even guarantee lazy evaluation. I'm pretty sure GHC guarantees it
[21:44:53] <maerwald> dsal: the times where I thought "thank god Haskell is lazy, otherwise my program would be slow now" is probably zero, except for various libraries that rely on all the optimization tricks
[21:45:13] <dminuoso> If memory serves right, GHC developers told me that no assurances can be made.
[21:45:44] <dminuoso> The point Im making here is, it all relis on some specific knowledge of GHC internals that may very well differ between versions.
[21:45:44] <geekosaur> everyone is convinced laziness is evil and should be banned :(
[21:45:54] <c_wraith> honestly, I think GHC's strictness analysts was an error
[21:45:54] *** Joins: pgib (~textual@173.38.117.89)
[21:46:15] <kuribas> geekosaur: I think optional lazyness is nice.
[21:46:19] <c_wraith> it lets people write bad code and have it still work
[21:46:26] <maerwald> geekosaur: no, I think we need better ideas about how to mix both concepts
[21:46:38] <c_wraith> *analysis
[21:46:40] <maerwald> in a way that makes the code not insane spaghetti chaos
[21:46:41] <geekosaur> you sure don't sound like it
[21:46:45] <wavemode> Most people come to realize that it's easier to reason about performance when you write strict code by default and only use laziness where it's desirable, than when writing lazy code by default
[21:46:45] <dminuoso> geekosaur: Im not saying its fundamentally broken, just that it's very incompatible with reasonable expectations of performance analysis.
[21:46:53] <geekosaur> every time laziness comes up you're all over how laziness was a mistake
[21:47:09] <kuribas> geekosaur: the benefits of lazyness aren't that big.
[21:47:10] <dminuoso> It's certainly convenient for writing expressive code, as long as you dont mind about performance too much. And yes, you can write highly performant code, but that's almost an art.
[21:47:16] <geekosaur> you even posted links about how laziness was so much of an error in so many places
[21:47:23] <c_wraith> wavemode: it can't work that way, though. opt-in laziness is the same as no laziness
[21:47:29] <maerwald> geekosaur: aha
[21:47:55] <maerwald> I literally just said that laziness facilitates certain optimizations
[21:48:04] <kuribas> I even managed to get self-recursive parser combinators working in clojure :)
[21:48:16] <c_wraith> so many libraries get on the strictness cargo cult that they break code using them correctly
[21:48:19] <maerwald> and libraries like lens and streamly rely on those tricks
[21:48:27] <maerwald> but that's not what most programmers want or need
[21:48:36] <c_wraith> because they can't imagine people using laziness vorrectly
[21:48:42] <dminuoso> wavemode: The problem is just lazyness doesnt work well in a strict-by-default language, it makes writing modular code much more comfortable.
[21:48:44] <c_wraith> or correctly, for that matter
[21:49:13] <kuribas> dminuoso: also not if the language insert "force" for you?
[21:49:18] <kuribas> and "delay"?
[21:49:27] <dminuoso> Something that was suggested a few times before, is something like levity polymorphism or multiplicity polymorphism but for strictness.
[21:49:43] <dminuoso> Such that the type system would track and infer for you, but would at the same time be tractable.
[21:49:57] <dminuoso> (Or perhaps a separate, orthogonal type system)
[21:50:15] <dminuoso> Has this been explored in some languages before?
[21:50:18] <wavemode> I do often wish laziness were part of the type system somehow, yeah
[21:50:23] <geekosaur> uh, dminuoso who's wavemode?
[21:50:29] <geekosaur> oh, sorry, missed that
[21:50:33] <kuribas> dminuoso: would that even be possible?  How do you know if a value is intended lazyly or strictly?
[21:50:52] <dminuoso> kuribas: Same as with any polymorphism - callers/consumers choice.
[21:51:04] <c_wraith> I just don't want to have correct code made impossible by other programmer's lack of imagination
[21:51:04] <dminuoso> I dont know the details because I havent actually done this.
[21:51:20] <kuribas> dminuoso: that implies explicit "force"?
[21:51:34] <dminuoso> kuribas: I dont know what that implies. Let a PhD student figure this out.
[21:51:38] <c_wraith> any kind of opt-in laziness results in my being at the mercy of others' imagination
[21:52:53] <maerwald> dminuoso: my fear is that such a system would be very complicated and make it hard to correctly use libraries, because now you need to know that some functoins don't behave very well lazy/strict etc. I mean we already have this problem and hope library maintainers figure it out... but if the caller has to figure it out
[21:52:55] <maerwald> uff
[21:53:18] <dminuoso> maerwald: See, this is why we should have some poor PhD spend 5 years of his or her life on this, to tell us whether its truly complicated or not.
[21:53:31] <dminuoso> That's what PhD students are for, no?
[21:53:57] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:53:57] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:53:58] <maerwald> I think this topic will lead to at least a couple of burnt out students
[21:54:03] <maerwald> but it's for the greater good
[21:54:16] <maerwald> a few smashed dreams, that's ok
[21:54:38] <dminuoso> You're acting as if SPJ and friends haven't burned out a couple students before. :p
[21:56:02] <EvanR> is "strict almost everything" and "lazy almost everything" really silly positions to take when my program relies on laziness to work remotely right, while the compiler uses strictness analysis to strictfy a zillion things and give me even more performance
[21:56:20] <kuribas> dminuoso: idris has opt in lazyness.
[21:56:35] <EvanR> you can't write idris anywhere like haskell
[21:56:38] <EvanR> because of that
[21:57:04] <EvanR> strict almost everything and NOT that maybe too incompatible universes of programming mentality
[21:57:32] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[21:57:44] *** Joins: sus (zero@user/zeromomentum)
[21:57:49] <EvanR> strict almost everything seems to kind of defeat the purpose of haskell even
[21:57:57] <EvanR> many other languages exist, ocaml xD
[21:58:37] <wavemode> you're right, we should all switch to ocaml
[21:58:39] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[21:58:39] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:59:05] <kuribas> EvanR: well, idris borrows a lot from haskell.
[21:59:17] <kuribas> EvanR: and even then not enough IMO :)
[21:59:31] *** Quits: alx741 (~alx741@157.100.197.240) (Quit: leaving)
[22:00:54] <EvanR> I'm thinking there are wildly different ways to use haskell, like, blue collar web code may be entirely made of monad transformers, and laziness may seem ridiculous to crunch a web request (lazy I/O not being sane, so you used a streaming library)
[22:01:23] <EvanR> or less crunchy settings could get away with being more mathlike and composable
[22:04:18] *** Joins: romesrf (~romes@44.190.189.46.rev.vodafone.pt)
[22:04:22] <romesrf> o/
[22:06:21] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[22:07:02] *** Joins: MatthiasG2 (~matthias@i6DFA01BB.versanet.de)
[22:10:07] <monochrom> But I don't like the argument order of OCaml's foldl and foldr!
[22:10:39] *** Quits: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net) (Ping timeout: 256 seconds)
[22:13:24] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:5126:c335:5f23:8358)
[22:14:14] *** Quits: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com) (Quit: I'm gonna win SETI@home.)
[22:14:57] <maerwald> you'll like it after a bank throws 300k at you
[22:15:11] *** Quits: polyphem (~rod@2a02:810d:840:8754:a057:eb16:35f3:4c79) (Ping timeout: 252 seconds)
[22:15:51] <geekosaur> or not
[22:16:41] <EvanR> s/ocaml/purescript/
[22:16:51] *** Joins: koala_man (~vidar@157.146.251.23.bc.googleusercontent.com)
[22:21:14] *** Joins: xkuru (~xkuru@user/xkuru)
[22:24:35] <maerwald> is there a library for emitting diffs of two Texts? like `diff -u`
[22:27:03] *** Quits: michalz (~michalz@185.246.204.57) (Ping timeout: 250 seconds)
[22:28:03] *** Quits: ProfSimm (~ProfSimm@176-12-60-137.pon.spectrumnet.bg) (Remote host closed the connection)
[22:30:47] <EvanR> hmm https://hackage.haskell.org/package/Diff-0.3.2/docs/Data-Algorithm-Diff.html
[22:31:08] <EvanR> well that's a link to an older version
[22:31:38] <maerwald> that doesn't diff text well
[22:31:51] <EvanR> getGroupedDiff :: Eq a => [a] -> [a] -> [Diff [a]]
[22:31:52] <maerwald> https://hackage.haskell.org/package/ormolu-0.4.0.0/docs/src/Ormolu.Diff.Text.html#diffText
[22:31:58] <maerwald> I'll just salvage that
[22:33:28] *** Quits: yassernasc (~yassernas@2804:29b8:505a:f33d:1872:f10d:d91b:b66) (Remote host closed the connection)
[22:35:47] *** Joins: zebrag (~chris@user/zebrag)
[22:45:55] *** Joins: Pickchea (~private@user/pickchea)
[22:48:37] *** Quits: y04nn (~y04nn@92.223.89.196) (Ping timeout: 256 seconds)
[22:51:32] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[22:52:48] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 256 seconds)
[22:53:56] *** Quits: deadmarshal (~deadmarsh@95.38.228.65) (Ping timeout: 256 seconds)
[22:55:36] *** Joins: lechner (~lechner@debian/lechner)
[22:56:26] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[22:56:48] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[22:59:06] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[23:01:23] *** Joins: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl)
[23:02:20] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[23:04:45] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[23:04:48] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Client Quit)
[23:05:05] *** Joins: o-90 (~o-90@gateway/tor-sasl/o-90)
[23:09:48] *** Quits: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net) (Ping timeout: 256 seconds)
[23:11:24] *** Joins: Morrow (~user@bzq-110-168-31-106.red.bezeqint.net)
[23:13:22] *** Joins: ensyde (~ensyde@2600:1700:2050:1040:ac63:f3f7:89ad:2997)
[23:13:27] *** Joins: mmhat (~mmh@55d4f68d.access.ecotel.net)
[23:15:34] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[23:15:39] *** Joins: lavaman (~lavaman@98.38.249.169)
[23:16:52] *** Quits: o-90 (~o-90@gateway/tor-sasl/o-90) (Remote host closed the connection)
[23:17:37] *** Joins: Guest6735 (~sam@c-93bfe655.020-348-73746f1.bbcust.telenor.se)
[23:21:00] *** Joins: alt-romes (~romes@44.190.189.46.rev.vodafone.pt)
[23:21:42] *** Quits: romesrf (~romes@44.190.189.46.rev.vodafone.pt) (Ping timeout: 256 seconds)
[23:23:50] <Guest6735> Hi! I'm trying to make a static binary using musl, but it's not really working. I posted my entire question here with details: https://paste.tomsmeding.com/KFupcwRc
[23:24:52] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44) (Remote host closed the connection)
[23:25:01] *** Quits: Topsi (~Tobias@dyndsl-095-033-094-250.ewe-ip-backbone.de) (Ping timeout: 268 seconds)
[23:25:15] <maerwald> Guest6735: I wouldn't use that docker image, just a plain alpine image
[23:25:54] <geekosaur> also specifying a compiler version as a resolver is apt to get you fairly old packages. I'd use an appropriate LTS
[23:26:17] <maerwald> Guest6735: here's an example: https://github.com/hasufell/stack2cabal/blob/b18eda25237221b32994910a3bbcc8ee6ad2163a/.github/workflows/release.yaml#L31-L133
[23:26:28] <maerwald> it works pretty much the same with stack
[23:28:00] <Guest6735> Thank you both! I'll try both out now.
[23:28:09] <maerwald> --ghc-options='-split-sections -optl-static' is usually enough
[23:28:55] <maerwald> use ghcup in the alpine container to get GHC bindists for stack
[23:28:59] <maerwald> then use --system-ghc
[23:30:07] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[23:30:43] <maerwald> here's an example of a dockerfile https://gist.github.com/hasufell/f0893abfbba63ac4ea40feb0520946ee
[23:31:47] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[23:31:51] *** Quits: alt-romes (~romes@44.190.189.46.rev.vodafone.pt) (Quit: WeeChat 3.4)
[23:32:24] <Guest6735> Thank you, I'm reading the alpine-haskell-stack docs. 
[23:34:31] *** Quits: rusrushal13 (~rusrushal@2409:4056:e82:6bda:bd0e:9743:fccb:b2a0) (Ping timeout: 256 seconds)
[23:35:18] *** Quits: merijn (~merijn@c-001-001-018.client.esciencecenter.eduvpn.nl) (Ping timeout: 256 seconds)
[23:38:55] *** Joins: vicfred (~vicfred@user/vicfred)
[23:39:12] *** Quits: alp (~alp@user/alp) (Ping timeout: 268 seconds)
[23:40:01] *** Quits: janus (janus@anubis.0x90.dk) (Quit: CPU quota exceeded)
[23:40:05] *** Joins: soxen (~bbrahms@pool-173-54-217-168.nwrknj.fios.verizon.net)
[23:42:36] *** Joins: y04nn (~y04nn@92.223.89.196)
[23:43:44] *** Joins: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net)
[23:44:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:f579:9b2b:4d0d:2d44)
[23:48:27] *** Quits: yauhsien_ (~yauhsien@118-167-40-21.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[23:51:19] *** Quits: hololeap (~hololeap@user/hololeap) (Quit: Bye)
[23:52:26] *** Quits: slack1256 (~slack1256@186.11.113.101) (Remote host closed the connection)
[23:52:55] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:54:46] <SrPx> my post about HVM has been filtered on /r/haskell
[23:54:54] <SrPx> does that mean I'm shadow banned!? 
[23:55:22] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Read error: Connection reset by peer)
[23:55:37] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:56:10] <yushyin> maybe ask the subreddit mods?
[23:57:55] *** Quits: fendor_ (~fendor@77.119.206.49.wireless.dyn.drei.com) (Remote host closed the connection)
[23:58:57] <EvanR> HVM?
[23:59:38] <dsal> Haskell's Very Monadic
