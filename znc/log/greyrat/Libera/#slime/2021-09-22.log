[00:48:00] *** Joins: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[00:51:23] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[04:57:14] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[04:57:51] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[04:59:24] *** Server sets mode: +nt 
[09:49:01] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[09:52:28] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[12:05:37] *** Quits: minion (~minion@common-lisp.net) (Remote host closed the connection)
[12:06:36] *** Joins: minion (~minion@common-lisp.net)
[12:16:43] *** Quits: dec0d3r (~dec0d3r@2001:8003:4810:9600:7275:1afb:1707:8eaa) (Remote host closed the connection)
[19:15:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[19:16:02] <lisp123> Hi, I wanted to ask the rationale for requiring (setq slime-enable-evaluate-in-emacs t) to allow CL code to access Emacs
[19:16:31] <lisp123> CL already has basically full access to the file system & network, so I'm not sure what extra security this is providing - but I imagine I am mistaken
[19:26:25] <luis`> I guess it might be an issue if you're connecting to a remote Lisp and don't want it taking over your client session somehow.
[19:27:03] <luis`> But, yeah, it seems a bit paranoid. 
[19:27:35] <lisp123> luis`: Actually that's not a bad point
[19:59:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Read error: Connection reset by peer)
[21:58:05] <pjb> security would be a good reason to require it. At least, emacs is somewhat security concious with stuff like file-local variables (and eval!) and stuff like that.
[21:58:31] <pjb> So slime-enable-evaluate-in-emacs is definitely a good thing, to allow it only if you need it.
[22:00:05] <pjb> but it's true that an inferior lisp (local or remote) can also use emacsclient to -e '(setq slime-enable-evaluate-in-emacs t)' (if the emacsclient server exists, and is configured to allow remote clients).
