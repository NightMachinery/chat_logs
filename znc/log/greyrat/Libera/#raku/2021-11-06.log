[00:00:40] <Od1n> arghhh ... i always forget them. my raku isn't fluent enough at all
[00:00:46] <Od1n> thank you so much lizmat 
[00:01:36] <lizmat> m: dd <foo bar type_min type_max>.map: { ~$/ if / type_ <( .* / }
[00:01:37] <camelia> rakudo-moar e98e17da7: OUTPUT: «("min", "max").Seq␤»
[00:01:47] <lizmat> a bit shorter, but more linenoisy
[00:02:00] <lizmat> I've grown to appreciate the less line-noisy variants
[00:06:16] <Od1n> well ... the same to me when in comes to shell scripting (sed regexps are boring to maintain) but raku has a very acceptable way to be noisy
[00:08:12] <lizmat> BTW, I was disappointed to see that / foo <( / would not simply fetch everything after the first "foo"
[00:08:23] <lizmat> sadly the .* is needed
[00:31:37] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:31:37] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[00:32:57] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[00:40:02] <Od1n> fair enough here. i'm more disappointed by the fact i need an entire block when just a regexp used to make the job done. trade offs ... but no doubt raku is the best deal 
[00:44:23] <lizmat> Od1n but you have a block in your perl code as well ?
[00:45:58] <Od1n> nope, just the regexps: map /type_(.*)/ @foo returns all the captures that was matched in @foo 
[00:46:24] <Od1n> map /type_(.*)/, @foo , sorry
[00:47:07] <lizmat> m: dd <a b c>.map: / b /  # not sure why this couldn't work 
[00:47:08] <camelia> rakudo-moar e98e17da7: OUTPUT: «No such method '!cursor_start' for invocant of type 'Str'␤  in block <unit> at <tmp> line 1␤␤»
[00:47:18] <Od1n> /type_(.*)/ is simpler than { $~/ if / type_ <( .* / }
[00:47:24] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:d9c8:22e8:7bd:5ca5) (Read error: Connection reset by peer)
[00:47:44] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:d9c8:22e8:7bd:5ca5)
[00:48:19] <lizmat> ~$/ actually, but yeah
[00:48:21] <Od1n> ~$/ ... sorry
[00:48:23] <Od1n> yes :)
[00:48:47] <lizmat> hmmm.. that feels like something that could be pursued  :-)
[00:49:00] <Od1n> :)
[00:49:10] <Od1n> "it would be great"
[00:49:59] <Od1n> map / type_ <( /, @foo should be the ultimate goal
[00:50:17] <lizmat> it would, wouldn't it  :-)
[00:50:36] <Od1n> indeed :)
[00:53:57] *** Joins: _Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net)
[00:53:58] *** Quits: Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Read error: Connection reset by peer)
[00:54:59] *** Joins: leedo_ (leedo@2600:3c03::f03c:91ff:fe91:982f)
[00:55:11] *** Joins: Summer_ (~summer@user/summer)
[00:55:36] *** Joins: rba_ (~rba@2a01:4f8:c2c:7a41::1)
[00:56:43] *** Quits: leedo (leedo@2600:3c03::f03c:91ff:fe91:982f) (Ping timeout: 246 seconds)
[00:56:43] <ugexe> >>.comb(/ ... /) ? 
[00:57:01] *** Joins: jcallen_ (quassel@user/jcallen)
[00:57:07] *** Quits: Summer (~summer@user/summer) (Ping timeout: 268 seconds)
[00:57:07] *** Summer_ is now known as Summer
[00:58:23] *** Quits: rba (~rba@2a01:4f8:c2c:7a41::1) (Ping timeout: 264 seconds)
[00:58:23] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 264 seconds)
[00:58:23] *** rba_ is now known as rba
[00:58:23] *** Quits: jcallen (quassel@user/jcallen) (Ping timeout: 264 seconds)
[00:59:01] *** Joins: leah2 (~leah@vuxu.org)
[00:59:18] <lizmat> ugexe: indeed, I guess I was lead too much by the perl idiom
[00:59:51] <lizmat> Od1n ^^
[01:00:23] <lizmat> m: dd <foo bar type_min type_max>.comb: / type_ <( .* /
[01:00:23] <camelia> rakudo-moar e98e17da7: OUTPUT: «("min type_max",).Seq␤»
[01:00:41] <lizmat> m: dd <foo bar type_min type_max>.comb: /:g type_ <( .* /
[01:00:41] <camelia> rakudo-moar e98e17da7: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unrecognized regex modifier :g␤at <tmp>:1␤------> 3dd <foo bar type_min type_max>.comb: /:7⏏5g type_ <( .* /␤    expecting any of:␤        argument list␤        term␤»
[01:01:37] <Od1n> wow ... same problem as lizmat: i try too much translating my perl ideas in raku
[01:01:45] <Od1n> thanks ugexe 
[01:03:33] *** Joins: MoC (~moc@user/moc)
[01:03:43] <Od1n> ugexe: but not exactly: if there is no match, the entire string is returned so there are a lot of false positive 
[01:03:57] <Od1n> i'm checking for the parameters of .comb
[01:04:45] <lizmat> m: dd <a foo_b foo_c>.comb: / foo_ <( .*? >> /   # slight mod on the regex
[01:04:45] <camelia> rakudo-moar e98e17da7: OUTPUT: «("b", "c").Seq␤»
[01:05:24] <lizmat> m: dd <a foo_b foo_c>.comb: / foo_ <( \w+ /   # alternate version
[01:05:24] <camelia> rakudo-moar e98e17da7: OUTPUT: «("b", "c").Seq␤»
[01:05:37] <Od1n> haha. this one works but i don't understand why
[01:05:48] <Od1n> >> is unseen to me 
[01:06:02] <Od1n> https://docs.raku.org/language/regexes#index-entry-regex__%3C%3C-_regex__%3E%3E-_regex__%C2%AB-_regex__%C2%BB
[01:06:05] <lizmat> word boundary at right
[01:06:50] <Od1n> yes. as i just read but why is this enough to remove the others
[01:07:09] <ugexe> .comb on a list is stringifying the list, no?
[01:07:31] <lizmat> ugexe: eh, yes of course
[01:07:51] <Od1n> ahhhhh ... got it! thanks
[01:07:58] <lizmat> m: dd <foo bar type_min type_max>>>.comb: / type_ <( .* /
[01:07:58] <camelia> rakudo-moar e98e17da7: OUTPUT: «(().Seq, ().Seq, ("min",).Seq, ("max",).Seq)␤»
[01:08:10] <lizmat> m: say <foo bar type_min type_max>>>.comb: / type_ <( .* /
[01:08:10] <camelia> rakudo-moar e98e17da7: OUTPUT: «(() () (min) (max))␤»
[01:08:37] <Od1n> wicked!
[01:10:58] <Od1n> nope: soft.dir>>.comb( /type_<(.*/ ) gives me an error 
[01:11:06] <Od1n> 'fluent/fluent150' is a directory, cannot do '.open' on a directory
[01:11:40] <Od1n> but .comb: / foo_ <( .*? >> /  made me happy :)
[01:26:52] <Tirifto> Is there a way to somehow precompile code which is about to be EVALuated (multiple times) – that is, when it does not come from a module?
[01:34:29] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[01:35:55] <Od1n> are raku.land and modules.raku.org different facets of the same ecosystem ?
[01:39:59] <lizmat> yes
[01:40:25] <lizmat> modules.raku.org is basically what modules.perl6.org used to be
[01:40:37] <lizmat> raku.land is a new thing, based on Cro
[01:40:41] <Od1n> ok. so there is no implementation of Template::Toolkit in raku.
[01:40:55] <Od1n> ahh cool! cro in production !
[01:41:12] <lizmat> also: logs.liz.nl   # also cro, and also production :-)
[01:41:54] <lizmat> if you're thinking about templating in Raku, I've become pretty enamoured by Cro::WebApp
[01:42:48] <Od1n> your irc logs are gorgeous! i like it 
[01:43:11] <lizmat> thank you  :-)
[01:43:39] <Od1n> actually i need static pages
[01:44:50] <lizmat> https://logs.liz.nl/raku/2021-11-04.html is actually a static page
[01:45:32] <Od1n> build with cro ?
[01:45:41] <lizmat> yup
[01:46:04] <lizmat> and Cro::WebApp
[01:46:13] <Od1n> is there a chance to pull the code of logs.liz.nl ?
[01:46:31] <lizmat> https://github.com/lizmat/App-Raku-Log/issues
[01:46:39] <lizmat> and all the modules that it uses :-)
[01:46:52] <lizmat> https://github.com/lizmat/App-Raku-Log
[01:46:55] <lizmat> actually  :-)
[01:47:09] <Od1n> thank you so much! i'll study this
[01:47:23] <lizmat> not a lot of docu yet, as a lot is still in flux
[01:47:33] <lizmat> but the modules that are used, are better documented
[01:47:53] <lizmat> https://github.com/lizmat/App-IRC-Log  for erxample
[01:48:10] <Od1n> reading raku code is something i have to exercize on so it's ok :)
[01:48:33] <Od1n> but for now got to sleep. thank you again
[01:48:40] <lizmat> sleep well!
[01:48:45] <lizmat> and you're welcome  :)
[01:48:49] <Od1n> have a nice week-end rakoons
[01:49:20] <lizmat> thanks, we will  :-)
[01:56:43] *** Joins: monkey_ (~user@190.104.116.153)
[02:00:08] *** Quits: Kaiepi (~Kaiepi@156.34.44.192) (Remote host closed the connection)
[02:02:32] *** Joins: Kaiepi (~Kaiepi@156.34.44.192)
[02:19:08] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Remote host closed the connection)
[02:33:27] *** Quits: MoC (~moc@user/moc) (Quit: Konversation terminated!)
[02:39:06] *** Quits: hyperreal (hyperreal@fedora/hyperreal) (Quit: the lounge - https://webirc.envs.net)
[02:48:51] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[02:49:28] *** Joins: monkey_ (~user@190.104.116.153)
[03:04:20] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[03:25:40] *** Joins: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net)
[03:35:50] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[04:10:05] *** Quits: MasterDuke (~MasterDuk@94.0.188.131) (Ping timeout: 256 seconds)
[05:09:04] *** Joins: Oshawott (~archenoth@2604:3d09:681:f00:fd31:5d52:fd09:995d)
[05:12:22] *** Quits: archenoth (~archenoth@2604:3d09:681:f00:d9c8:22e8:7bd:5ca5) (Ping timeout: 260 seconds)
[05:34:14] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[05:53:59] *** Quits: _Xliff_ (~Cliff@pool-71-255-227-73.washdc.east.verizon.net) (Remote host closed the connection)
[06:20:51] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Quit: C-x C-c)
[06:29:09] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[06:58:10] *** Joins: frost (~frost@user/frost)
[07:58:11] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[07:58:11] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[07:58:28] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[07:58:35] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:58:35] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[07:58:37] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[07:58:56] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[07:58:58] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:59:12] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[07:59:36] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[08:00:15] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[08:00:25] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[08:01:00] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[08:01:05] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[08:46:14] <Geth> ¦ doc: c6819b428f | Coke++ | doc/Language/variables.pod6
[08:46:15] <Geth> ¦ doc: pass example compilation test
[08:46:15] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/c6819b428f
[08:46:18] <linkable6> Link: https://docs.raku.org/language/variables
[08:48:26] *** Quits: SmokeMachine (sid19088@id-19088.tinside.irccloud.com) (Ping timeout: 245 seconds)
[08:49:08] *** Quits: ecocode__ (sid500572@id-500572.lymington.irccloud.com) (Ping timeout: 260 seconds)
[08:49:16] *** Quits: leont (sid489095@id-489095.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[08:49:16] *** Quits: zostay (sid170293@id-170293.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[08:49:41] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 245 seconds)
[08:50:06] *** Quits: rjbs (sid498898@id-498898.uxbridge.irccloud.com) (Ping timeout: 245 seconds)
[08:50:11] *** Quits: kawaii_ (sid345572@id-345572.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[08:50:18] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[08:50:45] *** Joins: zostay (sid170293@hampstead.irccloud.com)
[08:50:46] *** Quits: pony (sid524992@smol/hors) (Ping timeout: 260 seconds)
[08:50:48] *** Joins: skaji_ (sid178483@tinside.irccloud.com)
[08:50:55] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 260 seconds)
[08:50:56] *** skaji_ is now known as skaji
[08:51:23] *** Joins: patterner_ (sid212303@2a03:5180:f:3::3:3d4f)
[08:51:25] *** Joins: ecocode__ (sid500572@id-500572.lymington.irccloud.com)
[08:52:01] *** Joins: leont (sid489095@2a03:5180:f:5::7:7687)
[08:52:12] *** Joins: kawaii_ (sid345572@2a03:5180:f:4::5:45e4)
[08:52:28] *** Joins: pjlsergeant (sid143467@2a03:5180:f:4::2:306b)
[08:52:28] *** Joins: pony (sid524992@smol/hors)
[08:52:31] *** Joins: rjbs (sid498898@id-498898.uxbridge.irccloud.com)
[08:58:42] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[08:59:58] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[09:00:27] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[09:00:59] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[09:02:52] *** Joins: SmokeMachine (sid19088@id-19088.tinside.irccloud.com)
[09:33:01] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:36:00] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[09:43:59] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:90d0:563b:3279:f95b) (Ping timeout: 268 seconds)
[09:47:50] *** Quits: seednode4 (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:48:37] *** Joins: seednode4 (~seednode@user/seednode)
[10:47:07] *** Quits: Sgeo_ (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:00:19] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[11:00:20] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[11:00:33] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[12:00:34] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:00:34] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[12:02:24] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[12:38:44] *** Joins: MasterDuke (~MasterDuk@94.0.188.131)
[12:45:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:45:59] *** Joins: frost (~frost@user/frost)
[13:00:52] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:58:11] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[14:08:39] *** Joins: frost (~frost@user/frost)
[15:08:39] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:08:39] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:10:11] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[15:15:45] *** Quits: xinming__ (~xinming@115.219.39.150) (Ping timeout: 268 seconds)
[15:16:08] *** Joins: xinming__ (~xinming@115.219.39.150)
[15:33:03] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:34:16] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:59:28] *** Joins: jess (~jess@libera/staff/jess)
[16:10:26] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[16:15:01] *** Joins: kylese (~kylese@p548352b2.dip0.t-ipconnect.de)
[16:28:45] <Geth> ¦ doc: 2f821909ee | (Christian Bartolomäus)++ | doc/Type/Proc/Async.pod6
[16:28:45] <Geth> ¦ doc: Remove duplicate word
[16:28:45] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/2f821909ee
[16:28:48] <linkable6> Link: https://docs.raku.org/type/Proc::Async
[16:36:23] *** Quits: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[17:26:35] *** Joins: discord-raku-bot (~RakuIRC@ip5f5ab74b.dynamic.kabel-deutschland.de)
[17:52:37] *** Quits: kylese (~kylese@p548352b2.dip0.t-ipconnect.de) (Quit: Leaving)
[18:52:37] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:52:37] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[18:55:43] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[18:57:02] *** Joins: Skarsnik (~Skarsnik@91-170-31-218.subs.proxad.net)
[19:18:16] <Skarsnik> Hello
[19:20:31] <Skarsnik> lizmat, any luck with the BEGIN/INIT stuff in a module? x)
[19:20:40] <discord-raku-bot> <Nemokosch#9980> suppers
[19:27:00] *** Joins: monkey_ (~user@190.104.116.153)
[19:43:57] *** Joins: Sgeo (~Sgeo@user/sgeo)
[20:06:16] <japhb> Trying to figure out status on the URI install issue: I saw ugexe fixed zef's confusion about URI versus URI::Template.  I know [Coke] noticed the same install problems with URI that I did, and jonathanstowe confirmed it was most likely a Rakudo regression, not a URI change (since there haven't been any).  Was there any progress after that?
[20:07:06] *** Joins: suman (~suman@27.34.50.108)
[20:07:10] <suman> Suppose I have a hash my %new_hash = {"madam" => 4, "sir" => 1, "student" => 3};
[20:07:50] <suman> How to print the keys with higher values in this case: get the keys madam and student
[20:09:02] <japhb> m: my %new_hash = madam => 4, sir => 1, student => 3; .say for %new_hash.sort(*.value).head(2);
[20:09:03] <camelia> rakudo-moar e98e17da7: OUTPUT: «sir => 1␤student => 3␤»
[20:09:09] <japhb> m: my %new_hash = madam => 4, sir => 1, student => 3; .say for %new_hash.sort(-*.value).head(2);
[20:09:10] <camelia> rakudo-moar e98e17da7: OUTPUT: «madam => 4␤student => 3␤»
[20:09:20] <japhb> (Forgot to reverse the sort direction)
[20:10:53] <suman> @japhb Rather than elements of hash, I just wish to get the last two highest keys 
[20:11:15] <japhb> m: my %new_hash = madam => 4, sir => 1, student => 3; .key.say for %new_hash.sort(-*.value).head(2);
[20:11:15] <camelia> rakudo-moar e98e17da7: OUTPUT: «madam␤student␤»
[20:11:18] <japhb> Or
[20:11:28] <japhb> m: my %new_hash = madam => 4, sir => 1, student => 3; .say for %new_hash.sort(-*.value).head(2).map(*.key);
[20:11:29] <camelia> rakudo-moar e98e17da7: OUTPUT: «madam␤student␤»
[20:12:03] <suman> (y) 
[20:12:54] <japhb> (Technically it is possible to determine k-th greatest faster than sorting the whole array (by partitioning), but doesn't seem worth the hassle here.)
[20:14:46] <suman> If you have time, it would be great to see that solution too '=D 
[20:16:29] <japhb> I don't think we have convenient optimized built-ins for that ... it would require writing out the partition algorithm by hand.  Not conceptually difficult, but famously easy to make non-obvious mistakes and get off-by-one errors and such.
[20:17:12] <japhb> Unless your hash has a LOT of elements (at least thousands), I'd just stick with the (fairly well-written) sort routine.
[20:29:59] <suman> @japhb Can you please tell me how to print keys who have specific values. If a hash has value=1, then it will print all keys with value 1.
[20:30:15] <suman> my %hash={abc => 1, bcd => 1, cde => 1, def => 1, efg => 1};
[20:30:29] <suman> here it has to print all keys because all have val=1
[20:31:06] <lizmat> feels like we're doing someone's home work  :-)
[20:32:06] <lizmat> m: my %a = :1a,:1b,:2c,:3d; say %a.map: { .key if .value == 1 }
[20:32:07] <camelia> rakudo-moar e98e17da7: OUTPUT: «(a b)␤»
[20:33:06] <suman> Haha no no, I was looking to solve k-mer problem in bioinformatics in rakuish way '=D 
[20:35:55] <ugexe> m: my %foo = a => 1, b => 1, c => 3; say %foo.categorize(*.value, :as(*.key))<1>
[20:35:56] <camelia> rakudo-moar e98e17da7: OUTPUT: «(Any)␤»
[20:36:12] <ugexe> m: my %foo = a => 1, b => 1, c => 3; say %foo.categorize(*.value, :as(*.key)){1}
[20:36:12] <camelia> rakudo-moar e98e17da7: OUTPUT: «[a b]␤»
[20:39:11] <suman> (y) 
[20:53:27] *** Quits: suman (~suman@27.34.50.108) (Quit: Connection closed)
[21:13:56] *** Quits: sftp (~sftp@79.174.36.182) (Ping timeout: 260 seconds)
[21:21:26] *** Joins: suman (~suman@27.34.50.108)
[21:32:35] <suman> I do say $heredocs.subst("\n",:g)  to remove all newlines and get a combined string in heredocs. 
[21:32:49] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:33:04] <suman> Is it good ?
[21:33:50] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[21:34:49] <suman> Uploaded file: https://uploads.kiwiirc.com/files/04ae635ff5a8151cd97839a1264d5619/test.raku
[21:36:27] *** Quits: jess (~jess@libera/staff/jess) ()
[21:39:08] *** Joins: sftp (~sftp@79.174.36.182)
[21:44:06] *** Quits: sftp (~sftp@79.174.36.182) (Ping timeout: 260 seconds)
[21:50:20] *** Quits: suman (~suman@27.34.50.108) (Quit: Connection closed)
[21:52:24] *** Joins: sftp (~sftp@79.174.36.182)
[22:07:56] *** Joins: arun007 (~arun007@117.230.86.236)
[22:09:08] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[22:10:32] *** Quits: arun007 (~arun007@117.230.86.236) (Client Quit)
[22:54:50] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[22:55:30] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[23:12:13] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[23:23:49] *** Joins: euandreh (~euandreh@2804:14c:65c9:5161:4d0f:6b02:d329:b5d2)
[23:39:59] *** Quits: monkey_ (~user@190.104.116.153) (Ping timeout: 264 seconds)
[23:52:15] *** Joins: sena_kun (~koto@94.142.239.45)
[23:53:15] *** Quits: sena_kun (~koto@94.142.239.45) (Remote host closed the connection)
[23:54:14] *** Quits: Altai-man (~koto@94.142.239.45) (Ping timeout: 260 seconds)
[23:55:37] *** Joins: melika (~melika@91.99.254.114)
[23:55:58] <melika> hi
