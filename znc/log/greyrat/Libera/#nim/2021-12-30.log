[00:04:03] <FromDiscord> <hmmm> if c matches a single char what does the dot do in c("!."))
[00:04:40] <FromDiscord> <KatrinaKitten> When passed a `char`, it matches just that character. When passed a `string` or `Slice[char]`, it matches any character from the string/slice.
[00:05:13] <FromDiscord> <KatrinaKitten> So in the case of `c("!.")`, it matches either a `!` or a `.`.
[00:05:19] <FromDiscord> <hmmm> oh!
[00:12:06] <FromDiscord> <hmmm> kat kat but how does it happen that the things we match in c(',') << whitespace are not showing in the final seq (last dumb question I promise lol)
[00:13:01] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3JYu
[00:15:41] <FromDiscord> <KatrinaKitten> In reply to @hmmm "kat kat but how": `<<` is the same as `&` in that it expects the parsers one after the other, but it only keeps the result of what's on the left-hand side, instead of both as a `seq`. There's also `>>` which only keeps the result of what's on the right-hand side - think of it as it points to what gets kept. Since the `c(',') << whitespace` is connected to the `s("Hello") | s("Greetings")` via `<<`, only the resu
[00:16:16] <FromDiscord> <hmmm> this is genius lol
[00:16:21] <FromDiscord> <hmmm> ty kat!
[00:16:44] <FromDiscord> <KatrinaKitten> (Actually it really goes more like `(strings << comma) << whitespace` rather than `strings << (comma << whitespace)`, but the result is the same üôÇ )
[00:21:28] <FromDiscord> <SecureThisShit> sent a long message, see http://ix.io/3JYx
[00:22:30] <FromDiscord> <SecureThisShit> In C++ that‚Äôs done with the keyword ‚Äúusing‚Äù
[00:23:06] <FromDiscord> <SecureThisShit> using function1 = NTSTATUS(NTAPI)(HANDLE ProcessHandle, PVOID BaseAddress, ULONG_PTR ZeroBits, PULONG RegionSize, ULONG AllocationType, ULONG Protect);‚ÜµFor example
[00:23:24] <FromDiscord> <Solitude> In reply to @SecureThisShit "Hey, I got a": `typeof function1`
[00:25:01] <FromDiscord> <Elegantbeef> @krisppurg\: there is no `kind` field, it doesnt infer kind
[00:25:02] <FromDiscord> <SecureThisShit> And function1 is still defined like‚Üµ‚Üµproc function1(parameters): returnvalue
[00:25:06] <FromDiscord> <SecureThisShit> ?
[00:25:30] <FromDiscord> <krisppurg> In reply to @Elegantbeef "<@222794789567987712>\: there is no": I've added the rename hook already
[00:27:30] <FromDiscord> <Solitude> In reply to @SecureThisShit "And function1 is still": thats depends on you. if it is - use typeof. if you defined it as a type - dont.
[00:32:47] <FromDiscord> <Solitude> In reply to @Elegantbeef "<@222794789567987712>\: there is no": it shouldnt require the kind
[00:43:13] <FromDiscord> <Solitude> In reply to @krisppurg "Hi, whenever I do": but if it wouldnt require discriminator it would fail with FieldDefect instead of JsonError with wrong payload. so, i guess some logic has to be added for parsing only fields from current/default variant branch.
[00:47:35] <FromDiscord> <Solitude> In reply to @krisppurg "I've added the rename": can you test if it works with this check disabled? https://github.com/treeform/jsony/blob/11df6999829a0fa51af353182d35613c9afbf39f/src/jsony.nim#L422
[00:48:08] <FromDiscord> <krisppurg> nvm I realised I put renameHook in wrong order, it was in bottom of renameHook
[00:48:09] <FromDiscord> <Solitude> fieldPairs should already be guarding from wrong field access
[00:48:15] <FromDiscord> <krisppurg> (edit) "renameHook" => "newGuildChannel"
[00:49:53] <FromDiscord> <SecureThisShit> sent a code paste, see https://play.nim-lang.org/#ix=3JYC
[00:50:53] <FromDiscord> <Solitude> `type function1 = proc(ProcessHandle: PHANDLE): NTSTATUS`
[00:51:32] <FromDiscord> <Solitude> https://nim-lang.org/docs/manual.html#types-procedural-type
[00:56:20] <FromDiscord> <SecureThisShit> sent a code paste, see https://play.nim-lang.org/#ix=3JYE
[00:56:52] <FromDiscord> <Solitude> i dont get the point of casting the value twice
[00:57:53] <FromDiscord> <Solitude> and i for sure dont get what corresponding cpp line does, so we wait for someone more knowledgable
[00:58:52] <NimEventer> New thread by Shirleyquirk: Unicode Operators: How Do we Choose Which To Include?, see https://forum.nim-lang.org/t/8754
[01:07:13] <FromDiscord> <kaddkaka> https://nim-by-example.github.io/procvars/ mentions do notation as being "a bit shorter". But surely there must something else to it than just saving 1 character üòÜ
[01:07:36] <FromDiscord> <kaddkaka> (edit) "do" => "`do`" | "shorter"." => "shorter"  than `proc`."
[01:08:36] <FromDiscord> <kaddkaka> (edit) "character" => "character?"
[01:12:37] <FromDiscord> <Solitude> In reply to @kaddkaka "https://nim-by-example.github.io/procvars/ mentions": https://nim-lang.org/docs/manual_experimental.html#do-notation‚Üµyou can pass multiple blocks of code to macro with it
[01:17:39] <FromDiscord> <kaddkaka> thanks I have to get to macros üôÇ (newbie here üôã‚Äç‚ôÇÔ∏è)
[01:23:49] <FromDiscord> <Elegantbeef> @evoalg\: eh a normal for loop is sufficient for that, store the last three entries and you're golden
[01:24:17] <FromDiscord> <evoalg> ahh ok that's makes sense
[01:24:49] <FromDiscord> <evoalg> How are your dogs btw?
[01:25:09] <FromDiscord> <Elegantbeef> Cold been like -40 and below for the past few weeks
[01:27:01] <FromDiscord> <evoalg> woah ... oh that's not celsius ... my wife is from Siberia and it get's to -40 celsius üòâ
[01:27:19] <FromDiscord> <Elegantbeef> I'm Canadian bud
[01:27:42] <FromDiscord> <evoalg> still too bloody cold for a kiwi
[01:27:48] <FromDiscord> <Elegantbeef> -40 is the same in Fahrenheit as Celsius, but i do use centigrade
[01:28:21] <FromDiscord> <Elegantbeef> I was trying to point out that it was Celsius üòõ
[01:29:18] <FromDiscord> <ynfle (ynfle)> > Canadian bud‚ÜµI see what you did there
[01:29:27] <FromDiscord> <Elegantbeef> Lol
[01:32:23] *** Joins: xet7 (~xet7@user/xet7)
[01:37:42] <FromDiscord> <evoalg> ahh of course it's the same ... oh and I should have known that Canada is more progressive in this regard than the US ... but is it really -40 there?
[01:38:56] *** Joins: PMunch (~PMunch@user/pmunch)
[01:41:35] <FromDiscord> <Elegantbeef> Yes
[01:51:56] <PMunch> Evening @Elegantbeef :)
[01:53:30] <FromDiscord> <Elegantbeef> Hello
[02:02:33] <FromDiscord> <kaddkaka> Southern Sweden is back to plus celsius tomorrow, bye bye snow üò¶ üëã
[02:03:16] <FromDiscord> <hugogranstrom> In reply to @kaddkaka "Southern Sweden is back": üò¶ It was a white christmas for us at least
[02:22:34] <PMunch> Here it's still -9 and loads of snow..
[02:29:06] *** Joins: nrds (~NimBot@ns501209.ip-142-4-210.net)
[02:32:21] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: leaving)
[02:43:24] <FromDiscord> <tandy> can the nim compiler itself be compiled to c?
[02:43:57] <FromDiscord> <tandy> im jus wondering whether u could have the compiler compiled to wasm
[02:48:31] <NimEventer> New Nimble package! nimfmt - Configurable Nim code linter / formatter / style checker with heuristics, see https://github.com/FedericoCeratto/nimfmt
[02:55:55] <FromDiscord> <Elegantbeef> https://www.jasonbeetham.com/snake/nicoscripter.html the VM can compile! üôÇ
[02:56:19] <FromDiscord> <Elegantbeef> Compiling the compiler doesnt make much since since you also need a C compiler built for wasm, but it's probably doable
[03:06:33] <FromDiscord> <tandy> ohh this is coool
[03:06:44] <FromDiscord> <tandy> so you can write and compile nim in the browser
[03:07:05] <FromDiscord> <Elegantbeef> Well you can write and evaluate nim
[03:07:08] <FromDiscord> <tandy> someone needs to integrate that into browser vscode
[03:07:11] <FromDiscord> <Elegantbeef> That's on the Nim vm not the compiler
[03:07:19] <FromDiscord> <tandy> close enough \:)
[03:10:10] <FromDiscord> <frankzig> hallo, I've got an iterator for a custom type, is there a way to raise a compilerror if a `when` clause fails'
[03:10:18] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3JZk
[03:10:49] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JZl
[03:10:58] <FromDiscord> <frankzig> thankyou!
[03:19:53] <FromDiscord> <dizzyliam> thinking of using nimscript as a kind of markup language for typesetting... let
[03:19:59] <FromDiscord> <dizzyliam> (edit) "let" => "let's see how this goes"
[03:20:59] <FromDiscord> <Elegantbeef> If you need help i know a guy
[03:24:07] <FromDiscord> <dizzyliam> haha, someone else who's twisted nimscript into markup?
[03:24:34] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:6cc4:96c6:a3a5:e429) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[03:25:50] <FromDiscord> <Elegantbeef> No someone that knows how to easily interop
[03:26:35] <FromDiscord> <Elegantbeef> I dont know if you've seen https://github.com/beef331/nimscripter but it pretty much makes it seemless
[03:28:26] <FromDiscord> <Elegantbeef> Thanks to Nim's macro magic and command syntax it really doesnt take much to make it seem like a MD language
[03:28:32] <FromDiscord> <Elegantbeef> Or MU if you prefet üòõ
[03:28:35] <FromDiscord> <Elegantbeef> prefer\
[03:30:39] <FromDiscord> <dizzyliam> oh nice, that could actually be really useful
[03:48:49] <FromDiscord> <Elegantbeef> Yep if you have any issues feel free to holler at me
[04:15:39] <FromDiscord> <dizzyliam> thanks
[04:20:55] <FromDiscord> <TheAlex> Hello, I'm new to Nim and I couldn't find anything on the and operator. I tried ``and`` and ``&&`` but I got errors.
[04:21:17] <FromDiscord> <TheAlex> for ``and`` I got ``10 other mismatching symbols have been suppressed; compile with --showAllMismatches:on to see them``
[04:22:02] <FromDiscord> <TheAlex> for ``&&`` I get ``Error: undeclared identifier: '&&'``
[04:24:35] <FromDiscord> <Rosen> Can you give some more context? Can you show the line it was throwing that first error at you at?
[04:26:25] <FromDiscord> <TheAlex> sent a code paste, see https://play.nim-lang.org/#ix=3JZC
[04:27:09] <FromDiscord> <TheAlex> (edit) "https://play.nim-lang.org/#ix=3JZC" => "https://play.nim-lang.org/#ix=3JZD"
[04:29:29] <FromDiscord> <Elegantbeef> `if i mod 3 == 0 and i mod 5 == 0`
[04:29:55] <FromDiscord> <Elegantbeef> or `i mod 3 and i mod 5 == 0`
[04:30:04] <FromDiscord> <Elegantbeef> Though that's bitwise `and`
[04:30:12] <FromDiscord> <TheAlex> ah so does ``%%`` not work in in nim?
[04:30:29] <FromDiscord> <Elegantbeef> I mean it works but it's not the operator for modulo
[04:30:50] <FromDiscord> <Elegantbeef> https://nim-lang.org/docs/system.html#%25%25%2Cint%2Cint
[04:30:51] <FromDiscord> <Elegantbeef> It's unsigned modulo
[04:31:25] <FromDiscord> <Elegantbeef> Nim being wirth inspired prefers word operators in many cases
[04:31:28] <FromDiscord> <Fish-Face> I am attempting to use `iterutils`, so procs which expect `Iterable` for the first time. I am surprised that a `seq` is not an `Iterable`. What am I missing and where should I read about what `Iterable` actually is?
[04:31:35] <FromDiscord> <TheAlex> In reply to @Elegantbeef "Nim being wirth inspired": I see, thank you
[04:32:55] <FromDiscord> <Elegantbeef> `type Iterable[T] = (iterator: T) | Slice[T]` yea it's not
[04:32:56] <FromDiscord> <Elegantbeef> In this definition you need to do `seq.items`
[04:33:10] <FromDiscord> <dizzyliam> In reply to @Fish-Face "I am attempting to": https://nim-by-example.github.io/for_iterators/
[04:34:36] <FromDiscord> <Fish-Face> @ElegantBeef ah I see that makes some sense. Confusingly a seq literal doesn't want to be `items`d
[04:34:45] <FromDiscord> <Fish-Face> @dizzyliam `Iterable`, not `iterator` üôÇ
[04:34:55] <FromDiscord> <dizzyliam> oops yeah i got confused
[04:35:15] <FromDiscord> <dizzyliam> where does `iterutils` come from?
[04:36:45] <FromDiscord> <Fish-Face> hmm, you can do `for x in @[1, 2, 3].items` but not `for x in iterutils.map(@[1, 2, 3].items, ...)` it seems
[04:37:06] <FromDiscord> <Fish-Face> https://hookrace.net/nim-iterutils/iterutils.html
[04:37:47] <FromDiscord> <dizzyliam> thanks
[04:37:57] <FromDiscord> <Fish-Face> it's on github too
[04:39:04] <FromDiscord> <Elegantbeef> And even then it might not work
[04:39:05] <FromDiscord> <Elegantbeef> Due to `items` being an inline iterator
[04:39:46] <FromDiscord> <Fish-Face> ah so I got confused
[04:39:54] <FromDiscord> <Fish-Face> `Iterable` is not `iterable` üôÉ
[04:40:01] <FromDiscord> <Elegantbeef> It's a nimble package
[04:40:24] <FromDiscord> <Elegantbeef> Like i said it's a inline iterator
[04:40:46] <FromDiscord> <Fish-Face> and `seq.items` is `iterable` (not `iterator`) so not one of the types in `Iterable`
[04:40:51] <FromDiscord> <Elegantbeef> Shameless https://github.com/beef331/slicerator/blob/master/src/slicerator.nim#L201-L204
[04:41:16] <FromDiscord> <Elegantbeef> Yep
[04:41:33] <FromDiscord> <Elegantbeef> I have some silly macros i'm working on
[04:41:59] <FromDiscord> <Elegantbeef> But it's in progress
[04:42:01] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3JZL
[04:42:27] <FromDiscord> <Elegantbeef> Wel `items` is an `iterator` but it's not `iterator: T` since that's an `iterator: T {.closure.}` as `closure` is the default calling convention for iterators
[04:42:42] <FromDiscord> <Fish-Face> huh
[04:43:31] <FromDiscord> <Fish-Face> So if you define an `inline` iterator that yields `T` that is not `iterator: T`?
[04:43:39] <FromDiscord> <Elegantbeef> Indeed
[04:43:49] <FromDiscord> <Fish-Face> `nimble` won't acknowledge the existence of `slicerator`, strangely
[04:43:52] <FromDiscord> <Fish-Face> I am on 1.6.2
[04:43:57] <FromDiscord> <Elegantbeef> It's not in the repository
[04:43:59] <FromDiscord> <Elegantbeef> or registry
[04:44:00] <FromDiscord> <Fish-Face> but OK, this is not such a big deal atm
[04:44:01] <FromDiscord> <Fish-Face> ah
[04:44:13] <FromDiscord> <Elegantbeef> You need to install it using the git url presently as i havent got to publishing
[04:44:28] <FromDiscord> <Elegantbeef> I want to figure out that `chain` macro and document/clean everything up still
[04:45:07] <FromDiscord> <Elegantbeef> My `zip` `map` `filter` work on iterators regardless where they come from so you can do `0..10` or `[10, 20, 30]` or w/e
[04:50:27] <FromDiscord> <evoalg> In reply to @Fish-Face "`nimble` won't acknowledge the": do this: `nimble install https://github.com/beef331/slicerator` ... and since beefy is working on it currently, beefy is open to suggestions, so if you've got some ideas then you could help shape slicerator into something better but suggesting them to beefy
[04:54:54] <FromDiscord> <Fish-Face> Well I only wanted it to speed up an AOC solution more elegantly to beat some friends' times so nothing critical üòõ
[04:55:07] <FromDiscord> <Elegantbeef> So then slicerator will do better üòõ
[04:56:02] <FromDiscord> <Fish-Face> yes but there is overhead of instantiating the mapped sequence vs the overhead of performing the `map` in the body of the loop vs the overhead of adding unpublished packages to the build instructions üòõ
[04:56:22] <FromDiscord> <Elegantbeef> It is published
[04:56:33] <FromDiscord> <Elegantbeef> You add `requires "https://github.com/beef331/slicerator"` to your nimble file and you did it
[04:57:08] <FromDiscord> <Elegantbeef> If you arent using a nimble file, i dont know what to say, use one
[04:57:30] <FromDiscord> <Fish-Face> and I already committed the other version some minutes ago üôÉ
[04:57:49] <FromDiscord> <Elegantbeef> Where are your solutions?
[04:58:14] <FromDiscord> <Fish-Face> https://github.com/fish-face/aoc2021/
[04:58:30] <FromDiscord> <Fish-Face> but I will not be accepting Pull Requests for this üòâ
[04:59:23] <nrds> <06Prestige99> Is there a way to have a nim file force a certain switch on? Like switch("threads", "on") but not in config.nims
[05:00:27] <FromDiscord> <Elegantbeef> fish face is using a shell script instead of using a nimble file
[05:00:30] <FromDiscord> <Elegantbeef> Jeez üòõ
[05:01:29] <FromDiscord> <Elegantbeef> I dont think so prestige
[05:01:36] <nrds> <06Prestige99> rip
[05:01:50] <FromDiscord> <Fish-Face> that's a Dockerfile, not a shell script üòõ it does call `nimble` directly though yes
[05:02:35] <FromDiscord> <Elegantbeef> No it calls nim
[05:02:55] <FromDiscord> <Elegantbeef> Ah nvm you do call nimble in the docker file
[05:03:03] <FromDiscord> <Elegantbeef> You really made this more complicated than it needs be
[05:03:15] <FromDiscord> <Fish-Face> eh?
[05:03:22] <FromDiscord> <Fish-Face> I think you don't know what it needs to be
[05:03:44] <FromDiscord> <Fish-Face> the Dockerfile is a requirement.
[05:05:38] <FromDiscord> <Elegantbeef> Putting your deps in a docker install command instead of just in a root nimble file
[05:05:38] <FromDiscord> <Elegantbeef> You want a portable environment to build/time your solutions to play code racer with your friends
[05:05:43] <FromDiscord> <Elegantbeef> Anyway i'll shush
[05:05:46] <FromDiscord> <Elegantbeef> Probably annoying you anyway
[05:22:50] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[05:39:18] *** Joins: xet7 (~xet7@user/xet7)
[05:48:40] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[05:51:41] *** Joins: xet7 (~xet7@user/xet7)
[06:08:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:23:48] <NimEventer> New thread by Oyster: Diff lib?, see https://forum.nim-lang.org/t/8755
[07:00:56] <nrds> <06Prestige99> is the "of" operator for type checking very expensive?
[07:01:48] <FromDiscord> <Elegantbeef> It's uses type information to see if it's of the other type
[07:02:04] <FromDiscord> <Elegantbeef> Presently in nim's new runtime it's relatively slow as it does uncached string comparisons
[07:02:24] <nrds> <06Prestige99> ah, interesting. Thanks for the insight
[07:21:11] *** Quits: vicecea (~vicecea@gateway/vpn/pia/vicecea) (Remote host closed the connection)
[07:21:42] *** Joins: vicecea (~vicecea@gateway/vpn/pia/vicecea)
[07:23:09] <FromDiscord> <Elegantbeef> @evoalg\: been thinking about it was that day 1 of aoc?
[07:32:06] <FromDiscord> <evoalg> yes it was
[07:49:19] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 250 seconds)
[07:52:09] <FromDiscord> <evoalg> sent a code paste, see https://play.nim-lang.org/#ix=3K0o
[07:52:31] <FromDiscord> <evoalg> I dunno why I did that as a reply
[07:53:51] <FromDiscord> <evoalg> and it would have been better for me to have used `len` instead of `sum` in the 2nd eg
[07:56:05] <FromDiscord> <evoalg> it might be a bad eg for slicerator, specially the 1st eg
[08:05:27] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:10:04] <FromDiscord> <Elegantbeef> I still dont know about `chain` thought of just adding more operations to it, but seems like it can get complicated quickly
[08:11:44] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3K0r
[08:13:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[08:28:23] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:42:41] <FromDiscord> <dizzyliam> I'm passing an enum as a static argument to a macro, and when I use backticks to insert it into a `quote do` block, it turns into an int literal. Any ideas to get around this?
[08:44:40] <FromDiscord> <amadan> sent a code paste, see https://play.nim-lang.org/#ix=3K0v
[08:45:48] <FromDiscord> <dizzyliam> yeah i think i'll do the same. for some reason it doesn't feel very idiomatic but it works
[08:46:32] <FromDiscord> <amadan> sent a code paste, see https://play.nim-lang.org/#ix=3K0w
[08:46:45] <FromDiscord> <amadan> (edit) "https://play.nim-lang.org/#ix=3K0w" => "https://play.nim-lang.org/#ix=3K0x"
[08:47:05] <FromDiscord> <amadan> Keep forgetting that module exists
[08:48:38] <FromDiscord> <dizzyliam> first i've heard of it
[08:48:47] <FromDiscord> <Elegantbeef> It's new to 1.6.2
[08:48:50] <FromDiscord> <Elegantbeef> 1.6.0 \
[08:48:53] <FromDiscord> <Elegantbeef> I'm a dummy
[08:50:15] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3K0y
[08:59:25] <FromDiscord> <dizzyliam> that one's nice as well
[08:59:27] <FromDiscord> <dizzyliam> lots of choice
[09:00:05] <FromDiscord> <Elegantbeef> genast is the better choice
[09:10:51] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[09:22:16] <FromDiscord> <dizzyliam> @ElegantBeef I'm getting this error building something with nimscripter:
[09:22:20] <FromDiscord> <dizzyliam> `nimscripter.nim(1, 17) Error: cannot open file: compiler/nimeval`
[09:22:40] <FromDiscord> <Elegantbeef> Ah right i forgot to say add a `config.nims` with `--path:"$nim"`
[09:23:24] <FromDiscord> <dizzyliam> thanks
[09:23:42] <FromDiscord> <dizzyliam> the secret knowledge
[09:29:41] <FromDiscord> <evoalg> sent a long message, see http://ix.io/3K0E
[09:30:58] <FromDiscord> <Elegantbeef> I'd say to always avoid include, so that's all where you're wrong
[09:38:56] <FromDiscord> <dizzyliam> @ElegantBeef Is there a way in nimscripter to pass on an imported module to the nimscript during `loadScript`?
[09:39:10] <FromDiscord> <dizzyliam> similar to the way the first demo creates a "nimscript module"
[09:39:37] <FromDiscord> <Elegantbeef> If it's in your `stdlib` you can tell it to import the module by name
[09:40:02] <FromDiscord> <Elegantbeef> https://github.com/beef331/nimscripter/blob/master/src/nimscripter.nim#L52 `modules = ["mymodule"]` for instance
[09:40:14] <FromDiscord> <Elegantbeef> Or if it's next to the module
[09:40:26] <FromDiscord> <Elegantbeef> I assume you have a basic API in a file you want to import?
[09:40:44] <FromDiscord> <Elegantbeef> Or do you want to export an entire module?
[09:41:54] <FromDiscord> <gogolxdong (liuxiaodong)> How to rename files recursively in Nim?
[09:42:02] <FromDiscord> <dizzyliam> Yeah there's some type definitions and macros in a nim file that I want both the main module and nimscript to import
[09:42:30] <FromDiscord> <dizzyliam> if that makes sense
[09:42:48] <FromDiscord> <Elegantbeef> There's a few ways to doing this, you can add it as an addition or you can copy that file to the stdlib or next to the `.nims`
[09:43:07] <FromDiscord> <Elegantbeef> in the latter you'd use the `module = ...` i mentioned earlier
[09:43:20] <FromDiscord> <Elegantbeef> I'd suggest the latter
[09:43:30] <FromDiscord> <dizzyliam> ah yep that makes sense, thanks
[09:43:58] <FromDiscord> <Elegantbeef> Any functions declared in there will be used as pure nimscript and no Nim interop ofc
[09:47:06] <FromDiscord> <dizzyliam> yep
[09:51:55] <FromDiscord> <mattrb> When using the bitsize pragma to define bitfields, can you specify the type as an enum? It seems to be permitted by the compiler, but I'm seeing some unexpected behavior..
[09:52:39] <FromDiscord> <Elegantbeef> Code example?
[09:55:57] <FromDiscord> <mattrb> Lemme reduce this further in a sec, but this is a super quick attempt at reducing it :p https://gist.github.com/mattrberry/36ca21aaaffd67e7f63a6508c22223fe
[09:56:15] <FromDiscord> <mattrb> I'd expect the assertions to all pass
[09:58:12] <FromDiscord> <mattrb> In that example, DMACNT2 has enums for some fields. I'm setting both dmacnt and dmacnt2 to the value 0x8000, so I'd expect only the top bit of each to be set, i.e. the .enable field
[09:58:29] <FromDiscord> <mattrb> There's definitely a chance I'm just doing something stupid
[09:58:52] <FromDiscord> <Elegantbeef> Let's see
[10:08:15] <FromDiscord> <Elegantbeef> Yea this is very odd
[10:14:28] <FromDiscord> <codic> https://nitely.github.io/nim-regex/regex.html for toPattern this says "Deprecated: Use `re` instead"
[10:14:34] <FromDiscord> <codic> however, re compiles the regex at compile time
[10:14:37] <FromDiscord> <codic> I don't want this, I can't have this
[10:14:44] <FromDiscord> <codic> i must compile my regex with runtime data
[10:14:44] <FromDiscord> <Elegantbeef> Ah found the issue
[10:14:51] <FromDiscord> <Elegantbeef> Someone didnt annotated with `{.packed.}`
[10:14:52] <FromDiscord> <codic> so how do I do that if not with toPattern?
[10:15:26] <FromDiscord> <Elegantbeef> https://nitely.github.io/nim-regex/regex.html#re%2Cstring
[10:15:49] <FromDiscord> <codic> Oh I am stupid
[10:15:53] <FromDiscord> <codic> There is an overload for both lol
[10:15:57] <FromDiscord> <codic> Ok cool
[10:16:17] <FromDiscord> <Elegantbeef> @mattrb\: https://play.nim-lang.org/#ix=3K0P
[10:16:28] <FromDiscord> <Elegantbeef> Adding packed solves it but i also added `AddressControl`
[10:16:46] <FromDiscord> <Elegantbeef> I think it makes sense since it's probably adding unwanted pading for the enum types
[10:20:35] <FromDiscord> <mattrb> Ah, I didn't know about packed. I would have figured that the implication when using bitfields was that they're packed. Good find though! What does adding AddressControl do? Just ensure that the value maps to 2 bits?
[10:20:50] <FromDiscord> <mattrb> Had to step away from my computer so I can't play around with it this second :/
[10:21:21] <FromDiscord> <Elegantbeef> Well it gives you a small range so if you know you never assign a unsafe value
[10:33:12] <FromDiscord> <mattrb> I'll need to look at the generated code to see how it's actually behaving I guess. I initially assumed that when using the bitsize pragma, it would just mask effectively mask/shift those bits and cast them to the defined type. I definitely wouldn't have expected to have the size of the enum impact the size of the resulting struct
[10:33:46] <FromDiscord> <Elegantbeef> I think perhaps the enum isnt cased for packing without `packed`
[10:33:51] <FromDiscord> <Elegantbeef> Might be a compiler bug
[10:33:57] <FromDiscord> <mattrb> But I'm also not a c wizard. I remember doing something similar in c++ a long ways back that worked
[10:34:36] <FromDiscord> <mattrb> In curious now so I'll toy around with the target c code tomorrow to see if I can learn a little more about what's going on
[10:34:50] <FromDiscord> <mattrb> Thank you for the help with the `packed` tip!
[10:36:01] <FromDiscord> <Elegantbeef> Yea do update me with the C code once you toy with it
[10:36:30] <FromDiscord> <Elegantbeef> I'm thinking `bitsize` "works" with enums
[11:39:43] *** Joins: tiorock (~rc@192.12.112.96)
[11:39:43] *** Quits: tiorock (~rc@192.12.112.96) (Changing host)
[11:39:43] *** Joins: tiorock (~rc@user/rockcavera)
[11:39:43] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (lithium.libera.chat (Nickname regained by services)))
[11:39:43] *** tiorock is now known as rockcavera
[12:14:17] <FromDiscord> <evoalg> @ElegantBeef if I was going to have a grid of 1's & 0's or (true & false) then it's inefficient to use int's ... are bool's a good idea? (good idea in terms of mem & speed). Or would enums be the way to go?
[12:15:27] <FromDiscord> <Elegantbeef> Well if you want to be anal-retentive you'd use a packed bit collection
[12:15:48] <FromDiscord> <Elegantbeef> So if you know the range you could do `set[first..last]`
[12:16:02] <FromDiscord> <Elegantbeef> Though that only works for a 65k range
[12:16:20] <FromDiscord> <Elegantbeef> So if area is larger than 65k you'd need to make your own collection
[12:16:50] <FromDiscord> <Elegantbeef> Or use a bit array here https://nimble.directory/search?query=bit
[12:17:15] <FromDiscord> <Elegantbeef> The 65k is actually `uint16.high` if it's not clear
[12:18:20] <FromDiscord> <evoalg> ahhh so even though it's only 1 & 0, you're talking about the range of the size of the grid right?
[12:18:26] <FromDiscord> <evoalg> that makes sense
[12:19:12] <FromDiscord> <Elegantbeef> Yea the range is how many bits
[12:19:26] <FromDiscord> <Elegantbeef> for instance `set[0..10]` is 10 bits
[12:19:37] <FromDiscord> <Elegantbeef> 11 bits actually cause of inclusive range
[12:19:49] <FromDiscord> <evoalg> thanks for the link, I'll have a read. Ahhh ok  number of bits! gotcha ok!
[12:20:28] <FromDiscord> <Elegantbeef> Nim's builtin set is limited to a range of `uint16.high` if you need anymore that's what the other libraries are for
[12:20:48] <FromDiscord> <Elegantbeef> So if your area isnt static or known beforehand you'll want the packages üòõ
[12:21:10] <FromDiscord> <evoalg> gotcha yea they will grow ... but I'm confused by what a "packed bit collection" ... is that the `set[first..last]` thingy?
[12:21:30] <FromDiscord> <Elegantbeef> instead of storing "on" in a bool you store it in a bit
[12:21:38] <FromDiscord> <Elegantbeef> So you can fit 8 times as much data in the same memory
[12:22:09] <FromDiscord> <evoalg> ahhhhh gotcha yea I seen that sort of thing before. So do those packages use the same sort of trick?
[12:22:14] <FromDiscord> <Elegantbeef> In Nim unlike C++ `seq[bool]` has each element being 8 bits, so you're using 1/8th the amount of bytes you have
[12:22:17] <FromDiscord> <Elegantbeef> Yea they do
[12:23:10] <FromDiscord> <Elegantbeef> If you know the width of a column you also could use that with a sequence
[12:24:49] <FromDiscord> <evoalg> it sounds interesting to do it by hand rather than use packages, but I think it might be easier for me to use packages, unless I need good understanding of what's going on behind the scenes?
[12:25:01] <FromDiscord> <Elegantbeef> Indeed
[12:26:54] <FromDiscord> <evoalg> thank you Elegantbeef - that's all very interesting and helpful!
[12:32:52] <FromDiscord> <jord> is there any Nim implementation of the buffer-replace node.js package?
[12:42:12] <FromDiscord> <Elegantbeef> @evoalg\: you know me, i cant resist coding a silly implementation to show https://play.nim-lang.org/#ix=3K1m
[12:42:38] <FromDiscord> <evoalg> you're good!
[12:42:48] <FromDiscord> <Elegantbeef> Still not overly packed since all bits arent contiguous
[12:43:11] <FromDiscord> <evoalg> I'll try and understand it
[12:43:26] <FromDiscord> <Elegantbeef> It'd need to be whole bytes to be contiguous
[12:43:38] <FromDiscord> <Elegantbeef> So any multiple of 8 would be efficient for this thing
[12:43:58] <FromDiscord> <Elegantbeef> Otherwise you're losing memory due to not doing contiguous storage
[12:45:21] <FromDiscord> <Elegantbeef> The actual bitlists are better than that, it's just fun
[12:47:14] <FromDiscord> <evoalg> what would need to be a multiple of 8? ... the length of the `a` ?
[12:47:32] <FromDiscord> <Elegantbeef> `BitSeq[8]`
[12:47:35] <FromDiscord> <Elegantbeef> The width of the column
[12:48:04] <FromDiscord> <evoalg> ahhh right!
[12:48:18] <FromDiscord> <Elegantbeef> `set` takes up the amount of bits in the range so if you do o `0 .. 5 - 1` you're using 5 bits of 8 in a byte
[12:49:20] <FromDiscord> <Elegantbeef> And as such when you put them end to end you have 3 unused bits  between them
[12:49:29] <FromDiscord> <Elegantbeef> It's the bool problem just slightly more efficient
[12:49:57] <FromDiscord> <Elegantbeef> Infact if you did `set[0..0]` you'd have the exact same compression as the bool method üòÄ
[12:49:57] <FromDiscord> <evoalg> gotcha ok ... that makes sense ... and btw it amazes me that you can do something like this so fast, and it works!
[12:50:10] <FromDiscord> <evoalg> ahhh true!
[12:51:56] <FromDiscord> <Elegantbeef> How else do i pretend i'm a programmer üòõ‚Üµ(@evoalg)
[12:53:04] <FromDiscord> <evoalg> hehe ... you're funny ... and I know what Rika would say about now
[12:53:19] <FromDiscord> <Rika> You‚Äôre not fooling anyone
[12:53:27] <FromDiscord> <evoalg> bingo!
[12:56:38] <FromDiscord> <Elegantbeef> Rika sits perched just to jump down with the inane insults!
[13:06:23] <FromDiscord> <hmmm> yea rika is a predator that lurks in the dark that bites anything that is cute and fluffy
[13:06:54] <FromDiscord> <SecureThisShit> In reply to @Solitude "i dont get the": The solution was to declare the function1 with {.stdcall.}. That made it castable FYI.
[13:11:59] <FromDiscord> <Elegantbeef> @SecureThisShit\: i do have to ask are you doing a type conversion or actual `cast` when you say "castable"?
[13:12:38] <FromDiscord> <hmmm> In reply to @evoalg "Do you fold your": yo my boi thanks, nu I was thinking about ways to break horizontal long lines, I remember there were supposed to be rules on how to do that
[13:13:15] <FromDiscord> <evoalg> ahhh yea ... like after a comma, etc
[13:13:26] <FromDiscord> <Elegantbeef> Horizontally long lines are sinful! üòõ
[13:13:41] <FromDiscord> <evoalg> lol
[13:15:36] <FromDiscord> <hmmm> yea lol
[13:18:42] <FromDiscord> <jord> is there any Nim implementation of the buffer-replace node.js package?
[13:19:32] <FromDiscord> <Elegantbeef> Is that just string replace?
[13:19:50] <FromDiscord> <Elegantbeef> If so https://nim-lang.org/docs/strutils.html#replace%2Cstring%2Cstring%2Cstring
[13:24:12] <FromDiscord> <evoalg> In reply to @hmmm "yo my boi thanks,": I found this https://nim-lang.org/docs/nep1.html#introduction-conventions-for-multiminusline-statements-and-expressions ... but I think there are others too
[13:27:58] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[13:30:12] *** Joins: xet7 (~xet7@user/xet7)
[13:31:41] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38)
[13:31:53] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3K1s
[13:32:05] <FromDiscord> <hmmm> but it might have been python so I don't know lol
[13:32:50] <FromDiscord> <evoalg> maybe for nim it's like this: https://status-im.github.io/nim-style-guide/formatting.style.html
[13:33:27] <FromDiscord> <Rika> NEP 1
[13:33:34] <FromDiscord> <Rika> I don‚Äôt know where it‚Äôs located in the docs
[13:34:09] <FromDiscord> <evoalg> https://nim-lang.org/docs/nep1.html
[13:34:34] <FromDiscord> <hmmm> In reply to @NimEventer "New Nimble package! nimfmt": this looks juicy btw, anyone already tried it
[13:35:41] <FromDiscord> <Rika> It‚Äôs incomplete
[13:36:47] <FromDiscord> <hmmm> what's missing
[13:37:52] <FromDiscord> <Rika> It‚Äôs listed on the read me
[13:42:32] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[13:44:34] *** Joins: xet7 (~xet7@user/xet7)
[14:45:58] <FromDiscord> <qb> In reply to @Elegantbeef "Alternatively use `scanp`": `nimble publish` won't work if you have not `master`  as default branch. `git config --global init.defaultBranch master` fixed it
[14:46:31] <FromDiscord> <qb> sent a code paste, see https://play.nim-lang.org/#ix=3K1O
[15:02:01] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38) (Quit: My MacBook Air has gone to sleep. ZZZzzz‚Ä¶)
[15:04:17] <FromDiscord> <dizzyliam> Settled on an OK nimscript syntax for my typesetting engine
[15:04:37] <FromDiscord> <dizzyliam> sent a code paste, see https://play.nim-lang.org/#ix=3K1S
[15:06:34] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:c4c6:c62c:ab52:6d38)
[15:20:35] <FromDiscord> <hmmm> hourly reminder that sequtils is awesome ü§©
[15:37:26] <FromDiscord> <planetis> is this a "dangerous" implicit conversion to cstring? `drawText(cameraDescriptions.cstring, 40, 140, 10, DarkGray)`
[15:38:20] <FromDiscord> <planetis> I think this warning must appear a lot in wrappers
[15:41:30] <FromDiscord> <evil> I keep accidentally running a key combo that runs the command "nim secret " in my terminal. does anyone know what the actual combination is? I would like to be able to use it not on accident
[15:43:31] <NimEventer> New Nimble package! opussum - Wrapper around libopus, see https://github.com/ire4ever1190/opussum
[18:01:59] *** Joins: arkurious (~arkurious@user/arkurious)
[18:10:52] <FromDiscord> <Schelz> any lib for nim to check keypress ?
[18:19:38] <FromDiscord> <hmmm> I remember illwill had a getkey() proc, but the lin is about ncurses
[18:20:27] <FromDiscord> <enthus1ast> yes keypressen can be checked with illwill
[18:20:33] <FromDiscord> <enthus1ast> async keypresses i mean
[18:20:49] <FromDiscord> <enthus1ast> (but only ascii / en-us keys)
[18:21:29] <FromDiscord> <enthus1ast> for blocking checks have a look at std/terminal.nim
[18:26:59] <FromDiscord> <hmmm> yea terminal has getch()
[18:28:08] <FromDiscord> <hmmm> I remeber using it to make a proc to cover passwords with 
[18:28:26] <FromDiscord> <hmmm> it was called dancingWithTheStars
[18:28:46] <FromDiscord> <hmmm> my proc names are legendary üßê
[18:39:15] <FromDiscord> <Isofruit> ... nim even has an interpreter for on the fly code testing (inim) I am very happily surprised
[18:41:10] <FromDiscord> <Solitude> In reply to @Isofruit "... nim even has": nim has an interpreter, but inim isnt it.
[18:41:27] <FromDiscord> <Isofruit> I see I still fuck up the correct naming of stuff then
[18:42:25] <FromDiscord> <Isofruit> Either way, does not take away from the point: On the fly code testing, yay
[18:46:49] <FromDiscord> <qb> In reply to @Schelz "any lib for nim": windows, linux? x11?
[19:19:08] *** Joins: neurocyte0132889 (~neurocyte@94.46.76.127)
[19:19:08] *** Quits: neurocyte0132889 (~neurocyte@94.46.76.127) (Changing host)
[19:19:08] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[19:59:42] <FromDiscord> <n00nehere> what do you think is the best library for making games on linux?
[20:00:09] <FromDiscord> <n00nehere> i tried raylib and godot but i really don't like godot and raylib has gave me a lot of problems
[20:00:39] <FromDiscord> <enthus1ast> i currently use raylib and i think its great
[20:01:10] <FromDiscord> <n00nehere> it gave me problems like memleaks on test programs, randomly crashing, cant find dependencies etc...
[20:01:16] <FromDiscord> <n00nehere> all with test programs
[20:01:49] <FromDiscord> <enthus1ast> have not encountered these
[20:16:53] <FromDiscord> <sOkam!> sdl seems to be used a lot in nim
[20:17:24] <FromDiscord> <sOkam!> In reply to @n00nehere "what do you think": sdl seems to be used a lot in nim
[20:19:49] <NimEventer> New Nimble package! NimbleImGui - ImGui Frontend for Nimble, see https://github.com/qb-0/NimbleImGui
[20:25:08] <FromDiscord> <sOkam!> In reply to @enthus1ast "i currently use raylib": any specific bindings that you recommend?
[20:45:19] *** Joins: PMunch (~PMunch@user/pmunch)
[21:10:08] <FromDiscord> <Shiba> can i use -d:release -d:danger when i do testing and debuginf
[21:10:28] <PMunch> I mean you can
[21:10:30] <FromDiscord> <planetis> memory leaks? do tell more n00nehere
[21:11:04] <PMunch> But they remove debugging so you won't get as informative errors and such
[21:33:28] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[21:48:49] *** Joins: lumo_e (~enrico@2001:b07:5d38:4002:27f6:4f84:2b70:4bb1)
[21:52:35] *** Joins: neurocyte0132889 (~neurocyte@94.46.76.127)
[21:52:35] *** Quits: neurocyte0132889 (~neurocyte@94.46.76.127) (Changing host)
[21:52:35] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:04:43] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:05:55] *** Joins: xet7 (~xet7@user/xet7)
[22:26:36] <FromDiscord> <frankzig> sent a code paste, see https://play.nim-lang.org/#ix=3K6d
[22:26:37] <FromDiscord> <frankzig> ?
[22:30:21] *** Quits: lumo_e (~enrico@2001:b07:5d38:4002:27f6:4f84:2b70:4bb1) (Ping timeout: 245 seconds)
[22:30:46] <FromDiscord> <enthus1ast> i think they are
[22:31:59] <FromDiscord> <qb> sent a code paste, see https://play.nim-lang.org/#ix=3K6h
[22:32:08] <FromDiscord> <el__maco> I think they are asking about constructors
[22:32:19] <FromDiscord> <el__maco> maybe?
[22:33:02] <FromDiscord> <enthus1ast> ref objects are not afaik
[22:39:07] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[22:48:24] *** Joins: xet7 (~xet7@user/xet7)
[22:50:49] <PMunch> Well a ref object will be initialise to a null reference/null pointer
[23:08:14] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[23:14:40] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:21:28] <FromDiscord> <retkid> i know iterators are not unique to nim
[23:21:38] <FromDiscord> <retkid> but the way nim does them is such a strong thing
[23:22:07] <FromDiscord> <retkid> makes code a lot cleaner
[23:22:45] <FromDiscord> <retkid> im updating an old python repo and im really missing the convenience of Nim's iterators.
[23:24:31] <FromDiscord> <konsumlamm> umm, python has exactly the same style of iterators
[23:24:48] <FromDiscord> <konsumlamm> in fact, i'm pretty sure nim's iterators were inspired by python's
[23:24:49] <FromDiscord> <retkid> except they're bound to classes
[23:24:54] <FromDiscord> <konsumlamm> no?
[23:25:01] <FromDiscord> <retkid> NO!?!
[23:25:10] <FromDiscord> <konsumlamm> in python they'r ecalled generators
[23:25:29] <FromDiscord> <retkid> alright thats all i needed to know
[23:25:33] <FromDiscord> <konsumlamm> the iter stuff is bound to classes, bit you can also define nim style iterators
[23:25:48] <FromDiscord> <konsumlamm> (edit) "iter" => "`iter`" | "bit" => "but"
[23:26:53] <FromDiscord> <retkid> thank you, saint konsumlamm
[23:27:55] <FromDiscord> <konsumlamm> np
[23:29:51] <FromDiscord> <konsumlamm> (the reason most python iterators don't use generators is that they also define additional stuff)
