[00:08:06] *** Joins: splud (~noneya.bi@user/splud)
[00:13:01] *** Joins: Vivek (~Vivek@pool-96-242-229-226.nwrknj.fios.verizon.net)
[00:13:17] *** Quits: splud (~noneya.bi@user/splud) (Ping timeout: 256 seconds)
[00:13:25] *** Vivek is now known as Guest5678
[00:13:53] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[00:14:34] *** Joins: Guest88 (~Guest88@c-174-51-130-98.hsd1.co.comcast.net)
[00:15:22] *** Quits: Guest88 (~Guest88@c-174-51-130-98.hsd1.co.comcast.net) (Client Quit)
[00:26:36] *** Joins: splud (~noneya.bi@user/splud)
[00:34:08] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 268 seconds)
[00:39:49] *** Quits: _ht (~quassel@2a02:a468:b619:1:7ee4:4b51:626d:e55) (Remote host closed the connection)
[00:49:23] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:52:26] *** Quits: Guest5678 (~Vivek@pool-96-242-229-226.nwrknj.fios.verizon.net) (Quit: Client closed)
[01:00:23] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[01:00:47] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[01:17:39] *** Joins: goldfish (~goldfish@user/goldfish)
[01:18:51] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[01:24:46] *** Joins: graywolf (~wolf@user/graywolf)
[01:29:36] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[01:37:36] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[01:39:26] *** Quits: codingstream (~chris@2600:1700:b2:6c30::2b) (Quit: WeeChat 3.3)
[01:43:34] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[01:55:30] *** Joins: BSaboia (~bsaboia@187.19.139.6)
[01:58:32] *** Quits: graywolf (~wolf@user/graywolf) (Quit: WeeChat 3.4)
[02:08:46] *** Joins: mdemo (~mdemo@user/mdemo22)
[02:21:57] *** Quits: BSaboia (~bsaboia@187.19.139.6) (Quit: This computer has gone to sleep)
[02:27:56] *** Quits: teclator (~quassel@85.155.180.70.dyn.user.ono.com) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[02:34:23] *** Quits: ZAJDAN2 (~ZAJDAN@chladek-jar.zno.skynet.cz) (Ping timeout: 268 seconds)
[02:50:15] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[02:54:34] *** Quits: bluedust_ (~bluedust@103.161.144.28) (Remote host closed the connection)
[03:20:58] *** Joins: cyberbanjo (mksybr@tilde.team)
[03:27:55] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[03:28:25] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[03:32:03] *** Quits: DenKn (~deac@2001:470:69fc:105::1:5ee2) (Quit: Reconnecting)
[03:32:17] *** Joins: DenKn (~deac@2001:470:69fc:105::1:5ee2)
[04:04:18] *** Quits: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net) (Quit: ZNC - https://znc.in)
[04:05:25] *** Joins: m_antis (~znc_admin@ool-44c09a21.dyn.optonline.net)
[04:10:57] *** Quits: Guest9014 (~vit@chello085216193138.chello.sk) (Ping timeout: 240 seconds)
[04:16:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 256 seconds)
[04:23:19] *** Joins: fowl (~fowl@2600:1700:8513:2070:7db1:3fbf:51be:b185)
[04:35:07] *** Quits: fowl (~fowl@2600:1700:8513:2070:7db1:3fbf:51be:b185) (Quit: Client closed)
[04:41:19] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[05:56:50] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[05:57:31] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[05:57:41] *** Joins: fowl (~fowl@2600:1700:8513:2070:7db1:3fbf:51be:b185)
[06:02:20] *** Quits: fowl (~fowl@2600:1700:8513:2070:7db1:3fbf:51be:b185) (Changing host)
[06:02:20] *** Joins: fowl (~fowl@user/fowl)
[07:00:23] *** Joins: SteveR (~SteveR@103.215.168.1)
[07:12:39] *** Quits: fowl (~fowl@user/fowl) (Quit: Client closed)
[07:18:58] *** Joins: log101 (~log101@212.125.22.146)
[07:30:43] *** Quits: SteveR (~SteveR@103.215.168.1) (Quit: Client closed)
[07:30:48] *** Joins: fowl (~fowl@user/fowl)
[07:33:25] *** Joins: oxfuxxx (~oxfuxxx@185.156.174.4)
[07:51:37] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 240 seconds)
[08:03:10] *** Joins: Rounin (~david@84.212.130.215)
[08:11:10] *** Joins: log101 (~log101@212.125.22.146)
[08:36:01] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[08:36:35] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[08:37:15] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 256 seconds)
[08:56:06] *** Quits: fowl (~fowl@user/fowl) (Quit: Client closed)
[09:10:36] *** Joins: log101 (~log101@88.255.77.33)
[09:11:48] *** Joins: fowl (~fowl@user/fowl)
[09:23:53] *** Joins: Guest9014 (~vit@chello085216193138.chello.sk)
[09:25:41] *** Quits: fowl (~fowl@user/fowl) (Quit: Client closed)
[09:46:43] *** Joins: Guest94 (~Guest94@117-56-44-177.hinet-ip.hinet.net)
[10:05:38] *** Joins: bluedust (~bluedust@103.161.144.28)
[10:29:36] *** Joins: _ht (~quassel@2a02:a468:b619:1:b7fa:be1e:6eb0:5ee1)
[10:32:21] *** Joins: teclator (~quassel@85.155.180.70.dyn.user.ono.com)
[11:22:05] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[11:22:42] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[11:34:14] *** Joins: ZAJDAN (~ZAJDAN@195.122.199.179)
[11:55:02] *** Joins: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp)
[12:00:20] *** Quits: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp) (Quit: Lost terminal)
[12:02:16] *** Joins: postmodern (~postmoder@user/postmodern)
[12:07:09] *** Joins: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp)
[12:13:27] *** Quits: log101 (~log101@88.255.77.33) (Remote host closed the connection)
[12:13:44] *** Joins: log101 (~log101@88.255.77.33)
[12:16:42] *** Joins: Guest97 (~Guest97@42-200-89-203.static.imsbiz.com)
[12:17:00] *** Quits: Guest97 (~Guest97@42-200-89-203.static.imsbiz.com) (Client Quit)
[12:19:21] *** Quits: log101 (~log101@88.255.77.33) (Remote host closed the connection)
[12:19:38] *** Joins: log101 (~log101@88.255.77.33)
[12:24:17] *** Quits: log101 (~log101@88.255.77.33) (Ping timeout: 256 seconds)
[12:26:13] *** Quits: bluedust (~bluedust@103.161.144.28) (Remote host closed the connection)
[12:30:50] *** Joins: fef (~thedawn@user/thedawn)
[12:36:32] *** Quits: Guest94 (~Guest94@117-56-44-177.hinet-ip.hinet.net) (Quit: Client closed)
[12:47:37] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 240 seconds)
[12:48:26] *** Quits: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:50:07] *** Joins: AEtherC0r3 (~quassel@snf-734901.vm.okeanos.grnet.gr)
[13:05:00] *** Joins: fercell (~ferr@185.65.50.80)
[13:08:42] *** Joins: bluedust (~bluedust@103.161.144.28)
[13:36:08] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:39:13] *** Quits: bluedust (~bluedust@103.161.144.28) (Remote host closed the connection)
[13:49:28] *** Joins: brown121407 (1fd27a54a7@gnu/webmaster/smarton)
[14:03:07] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[14:03:49] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[14:19:53] *** Quits: oxfuxxx (~oxfuxxx@185.156.174.4) (Ping timeout: 256 seconds)
[14:32:43] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[14:33:06] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[14:50:37] *** Joins: constxd (~brad@142.167.170.88)
[14:58:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[15:04:55] *** Joins: bluedust (~bluedust@103.165.167.71)
[15:07:02] *** Quits: Guest9014 (~vit@chello085216193138.chello.sk) (Ping timeout: 250 seconds)
[15:11:01] *** Quits: bluedust (~bluedust@103.165.167.71) (Remote host closed the connection)
[15:28:07] *** Joins: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net)
[15:34:29] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[15:40:02] *** Quits: oxfuxxx (~oxfuxxx@10.177.181.107.wiredns.net) (Ping timeout: 240 seconds)
[15:42:03] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2 Beta Build (2022/01/23 UTC) 64 Bit)
[15:42:23] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:43:12] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:04:38] *** Joins: fef (~thedawn@user/thedawn)
[16:12:08] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[16:22:30] *** Quits: shiru (~shiru@p4236133-ipoe.ipoe.ocn.ne.jp) (Quit: leaving)
[16:40:21] <IsoLinCHiP> Any suggestions how to use active-record models from a rails app in scripts on a completely different host? Throwing everything in the same source folder isnt really an option as I have two related web apps with different models and a few scripts that need to access both.
[16:57:29] *** Quits: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[16:58:11] *** Joins: aindilis (~aindilis@152-44-40-72.us-chi1.upcloud.host)
[17:26:26] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[17:28:13] *** Quits: robotmay (~beepboop@2001:8b0:7af0:2580:d883:8885:991e:c8cf) (Quit: No Ping reply in 180 seconds.)
[17:29:24] *** Joins: robotmay (~beepboop@2001:8b0:7af0:2580:90d7:88a4:bd2a:e8eb)
[17:34:29] <ox1eef> IsoLinCHiP: I guess share the config/database.yml and models for the scripts, at a minimum.
[17:39:10] *** Joins: fowl (~fowl@user/fowl)
[17:39:47] <mooff> do they use different databases?
[17:39:54] <IsoLinCHiP> ox1eef: git submodules, or do you recon thats going to be more headache than use?
[17:40:09] <IsoLinCHiP> mooff: yes
[17:42:23] <ox1eef> i guess you could have a repo with the models, and share them between web app and scripts.
[17:43:20] *** Joins: Guest61 (~Guest61@cpc122728-blbn12-2-0-cust247.10-1.cable.virginm.net)
[17:44:54] *** Quits: fowl (~fowl@user/fowl) (Quit: Client closed)
[17:45:11] *** Quits: Guest61 (~Guest61@cpc122728-blbn12-2-0-cust247.10-1.cable.virginm.net) (Client Quit)
[17:57:11] <mooff> it's gonna be tricky, and depend on how tangled the models are with other application code, libraries, etc
[17:58:11] <mooff> however you load the model classes, you'll need to make sure the base model for each application points to the right DB
[18:02:18] *** Quits: xyhuvud (~quassel@2001:1ba8:1424:ea00:f44d:852a:dd78:1ed2) (Read error: Connection reset by peer)
[18:02:35] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:f3d9:e485:7d23:3e4d)
[18:28:46] <adam12> If you're using Bundler, I'd reach for a private gem before a git submodule, imho. But there's no great way to do it in general.
[18:31:13] <ox1eef> generally i think one would package the scripts and web app together, and that makes life easier.
[18:48:26] *** Joins: bluedust (~bluedust@103.161.144.28)
[18:52:36] *** Joins: infinityfye (~infinityf@102.47.59.10)
[18:56:07] *** Joins: mmalter (~mmalter@88.126.10.237)
[19:06:56] <Vaevictu1> you could a) fork the whole thing and keep it forked indefinitely.  b) try to utilize just the models/etc and maintain them as a unified source base, which might require application changes in the /other/ app to facilitate.
[19:11:02] <Vaevictu1> either could be correct depending on your existing code and/or environment.
[19:29:08] <jhass[m]> when opting for git as a solution git subtree trumps git submodule 90% of the time
[19:31:23] <jhass[m]> for the particular case I wonder if reusing the same model code in your scripts is really important or if just duplicating a bunch of bare bone model classes for them isn't just fine
[19:34:09] <Vaevictu1> yup.  depends on existing code/environment :D
[19:34:28] <Vaevictu1> the old-school in me says "just copy it over and be free!"
[19:34:38] <Vaevictu1> especially if they're not sharing databases.
[19:34:43] *** Vaevictu1 is now known as Vaevictus
[19:40:59] <mooff> i've got an intermittent deadlock with my Ruby bot now that it forks to handle commands :)
[19:42:40] <mooff> i've only seen it hang when running fast-exiting shell commands over IRC. such as "$ id", "$ cmd-that-doesnt-exist", etc.. but non-deterministically
[19:45:27] <mooff> the code does "as(sender.nick) { ... use Open3 to run command, stream output to IRC }"
[19:48:26] <mooff> as looks like this: def as(nick)
[19:48:26] <mooff>   acct = posix_account! nick
[19:48:26] <mooff>   Process.waitpid (fork {
[19:48:26] <mooff>     become! acct # does setregid, setreuid, Dir.chdir, updates ENV
[19:48:26] <mooff>     yield
[19:48:27] <mooff>     (Thread.list - [Thread.main]).each &:join
[19:48:27] <mooff>   })
[19:48:28] <mooff> end
[19:49:00] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[19:49:41] <Vaevictus> i hope you're sanitizing everything from outside the script :D
[19:49:43] <mooff> once in a while, it hangs on Process.waitpid, and the fork process shows as defunct in ps
[19:50:00] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:50:30] <mooff> Vaevictus: it's obviously a somewhat crazy experiment, but imagine it's sort of like a public access UNIX / Ruby system over IRC (LOL)
[19:50:43] <Vaevictus> what could go wrong, amirite? 
[19:50:55] <mooff> well, exactly!
[19:51:08] * Vaevictus puts ;rm in my nick
[19:51:53] <Vaevictus> as far as why it's blocking, sorry, no idea.  i guess maybe check for the pid rather than waiting for it?
[19:52:13] <mooff> oh, the nick is sanitized, and the user creation is run with system('adduser', '-D', safe_nick, ..) etc
[19:52:17] <Vaevictus> i mean, check first, then wait.
[19:52:36] *** Quits: bluedust (~bluedust@103.161.144.28) (Ping timeout: 250 seconds)
[19:52:44] <Vaevictus> i hope this is a throwaway VM ... if it is, awesome! :D
[19:52:59] <mooff> i'm tempted to use Process.detach and just hope for the best.. let everything be asynchronou
[19:53:21] <mooff> but the deadlock is sort of confusing
[19:53:30] <Vaevictus> when i wrote my IRC bots, i used perl with POE... and that kinda black magic is dangerous stuff :D
[19:53:39] <ox1eef> haha
[19:53:44] <Vaevictus> the deadlock is, assumedly because you can't wait for a pid to finish once it's already finished.
[19:53:45] <ox1eef> i remember POE, vaguely
[19:54:00] <Vaevictus> POE::Component::IRC::Client lol
[19:54:19] <mooff> in the case where it's already finished, it should throw an exception though, right?
[19:54:19] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[19:54:22] <Vaevictus> I've *still* got a bot running via POE.
[19:54:23] <ox1eef> Vaevictus: you can collect a status at any time, as far as i know. 
[19:54:31] <Vaevictus> mooff: dunno, should it?
[19:54:50] <mooff> it seems to!
[19:55:27] <ox1eef> Process.wait does not raise an exception. try: pid = fork {}; sleep 5; Process.wait(pid)
[19:55:55] <Vaevictus> now that perl's retconned perl6 out of existance, it's doing better lol
[19:56:04] <mooff> ox1eef: try Process.wait(pid) twice
[19:56:10] <mooff> Errno::ECHILD
[19:56:26] <Sheilong> Where in Ruby documentation it says that the foreach method for Files does not load all the lines of a file at once? 
[19:56:31] <ox1eef> is that the exception you see? i understood you dont see an exception, but a zombie
[19:56:45] <mooff> that's right, i don't see an exception :)
[19:57:15] <ox1eef> the point was you can collect the status long after the process exits.
[19:57:16] <mooff> Sheilong: it may not be specified in the documentation :/
[19:57:34] <Sheilong> Someone is telling me to use readlines instead of foreach to count the number of lines in a File. But to convince him that foreach is better, I need to prove him about my argument. 
[19:57:47] *** Joins: bluedust (~bluedust@103.161.144.28)
[20:00:24] <adam12> Sheilong: I don't see it documented, but in _general_, if it's yielding a block, it's usually lazy.
[20:01:02] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 240 seconds)
[20:01:26] <mooff> may need to read the source code for that foreach and readlines, Sheilong
[20:01:30] <Sheilong> adam12: where is general?
[20:01:44] <ox1eef> Are foreach and readlines not identical?
[20:01:50] <Vaevictus> exec("wc -l <filename>") jk
[20:02:12] <adam12> Sheilong: General == for many Ruby methods. It's not a category of documentation.
[20:02:45] <ox1eef> seems not - no block for readlines().
[20:03:05] <mooff> i think readlines reads until EOF, then returns them all at once
[20:03:16] <Vaevictus> File.foreach(filename) {} count=$. 
[20:03:50] <ox1eef> I would use readlines personally.
[20:04:19] <Vaevictus> file=File.open("file","r"); file.readlines.size 
[20:04:33] <ox1eef> IO.readlines("foo.txt").size
[20:04:58] <Vaevictus> this random stackoverflow says taht readlines is slower when the files are over 1mb
[20:05:01] <mooff> from `ri foreach`, the description of CSV.foreach makes me think it /might/ be streaming
[20:05:42] <Vaevictus> https://stackoverflow.com/questions/25189262/why-is-slurping-a-file-not-a-good-practice
[20:06:25] <mooff> if true it would suggest to me that foreach is "read and yield line-by-line" by convention
[20:06:41] <mooff> ("This method is intended as the primary interface for reading CSV files.")
[20:06:49] <Vaevictus> i think that's true, yeah
[20:06:58] <Vaevictus> from my 30 seconds of research
[20:06:58] <mooff> (surely the primary interface would not load the whole file into memory :))
[20:07:37] <ox1eef> IO.foreach("foo.txt").count - this works, and foreach is returning an Enumerator.
[20:09:13] <adam12> I wonder if #count converts it to an Array (ala, slurping it)
[20:09:21] <ox1eef> indeed, not sure
[20:14:50] <adam12> I'd probably do IO#read with some set size (like 8k?), then count "\n". To prevent allocations, you could probably pass a string to IO#read and let it re-use the same one.
[20:20:09] <ox1eef> i'd check if ruby optimizes the scenario at all - and how Enumerable#count behaves without a block. It could be optimized to not iterate the whole collection. 
[20:22:44] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:22:53] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[20:33:27] *** Joins: BSaboia_ (~bsaboia@187.19.136.30)
[20:39:59] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[20:41:15] *** Quits: ZAJDAN (~ZAJDAN@195.122.199.179) (Ping timeout: 256 seconds)
[20:42:12] <IsoLinCHiP> Yeah, I also was considdering just making a slim model copy, but I know there is some model changes going to be coming soonish down the road.
[20:43:32] <IsoLinCHiP> If it were tools directly related to the site, Id just put them in the source of the web pages, agreed. But I have the awkward case, that Im just operating on the data the websites generate for some different processes.
[20:44:12] *** Joins: log101 (~log101@212.125.22.146)
[20:44:37] <Sheilong> does File.open(path, "r").readlines.length } automatically closes the file?
[20:44:39] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[20:46:03] <mooff> Sheilong: by default, it will be auto-closed when the File object is GC'd
[20:46:34] <mooff> but that could be a long time
[20:47:31] <Sheilong> mooff: Better use a block in such case then?
[20:47:52] <Sheilong>  File.open(path, "r") do {|file| file.length}end
[20:47:58] <mooff> yes - that's a good way to do it
[20:48:37] <mooff> then it'll be closed as soon as the block returns
[20:49:23] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.155)
[20:49:27] <mooff> File.readlines(path) will also close it immediately after reading
[20:53:43] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.155) (Ping timeout: 256 seconds)
[21:00:42] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[21:01:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:02:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:02:55] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[21:04:30] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[21:09:18] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 250 seconds)
[21:11:23] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[21:16:06] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 268 seconds)
[21:17:54] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.155)
[21:24:28] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.155) (Ping timeout: 250 seconds)
[21:24:58] *** Joins: oxfuxxx (~oxfuxxx@89.40.183.139)
[21:29:17] *** Quits: oxfuxxx (~oxfuxxx@89.40.183.139) (Ping timeout: 240 seconds)
[21:41:31] *** Quits: log101 (~log101@212.125.22.146) (Ping timeout: 256 seconds)
[21:43:05] *** Joins: hololeap (~hololeap@user/hololeap)
[21:49:33] *** Quits: bluedust (~bluedust@103.161.144.28) (Read error: Connection reset by peer)
[21:51:22] <Sheilong> mooff: so there is no need for a block?
[21:53:07] *** Joins: log101 (~log101@212.125.22.146)
[22:07:01] *** Quits: log101 (~log101@212.125.22.146) (Read error: Connection reset by peer)
[22:09:03] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.189)
[22:13:17] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.189) (Ping timeout: 240 seconds)
[22:24:30] *** Quits: Thanzex (~Thanzex@37.103.212.236) (Read error: Connection reset by peer)
[22:24:57] *** Joins: Thanzex (~Thanzex@37.103.212.236)
[22:28:18] *** Joins: ur5us (~ur5us@2406:e002:6d58:d101:23b2:b738:8a21:f7ed)
[22:49:39] <micah> i've got a daemon that does a 'puts' for some debug logging to STDOUT, i found that it is not actually spitting the logs right away and they were being buffered
[22:50:00] <micah> i thought I could set $stdout.sync = true to fix that, but that doesn't seem to take hold and I'm stumped why
[22:50:33] <micah> (when I stop the application, suddenly all its logs come flushing in)
[22:51:26] <adam12> micah: Maybe something else is buffering them?
[22:52:32] <adam12> micah: Are you running the daemon from the shell?
[22:54:35] <micah> adam12: I'm running it via systemd... I've got 5 systems that were doing this, weirdly, when I added `$stdout.sync = true` to the code and deployed it, four of them started to work properly, but one still doesn't
[22:54:59] <micah> i tried stdout.flush, but exception NameError -- undefined local variable or method `stdout' for main:
[22:55:33] *** Joins: samgranieri (~samgranie@user/samgranieri)
[22:56:50] *** Joins: Guest842 (~Guest84@186.6.167.85)
[22:57:21] <adam12> You'd need $stdout.flush
[22:58:43] <micah> adam12: ah, i just tried STDOUT.flush and it worked, so I should change to $stdout.flush
[22:58:58] <micah> but... it makes me wonder why $stdout.sync = true is not working, maybe its set somewhere?
[23:00:35] <adam12> micah: Hard to say, but $stdout is designed to be re-assigned. Maybe $stdout != STDOUT
[23:14:35] *** Joins: ZAJDAN (~ZAJDAN@chladek-jar.zno.skynet.cz)
[23:23:32] *** Quits: yxhuvud (~quassel@2001:1ba8:1424:ea00:f3d9:e485:7d23:3e4d) (Ping timeout: 240 seconds)
[23:24:50] *** Joins: yxhuvud (~quassel@2001:1ba8:1424:ea00:9011:7274:8c0:3359)
[23:35:46] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 250 seconds)
[23:43:06] *** Joins: oxfuxxx (~oxfuxxx@139.28.218.188)
[23:47:48] *** Quits: oxfuxxx (~oxfuxxx@139.28.218.188) (Ping timeout: 268 seconds)
[23:48:55] *** Quits: finsternis (~X@23.226.237.192) (Quit: Changing server)
[23:49:19] *** Joins: finsternis (~X@23.226.237.192)
