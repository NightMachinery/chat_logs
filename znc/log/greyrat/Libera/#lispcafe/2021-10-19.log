[00:21:20] <gilberth> Hmm, either compilers are not as good as I believed, or I miss something. Perhaps the latter. However, the CPU emulator is written in a way, that all temporary variables are defined at the top of the function, even if their scope is limited. I know narrow the scope, to get an idea what really is the CPU state, and as a result the code runs faster, which it shouldn't do.
[00:31:41] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[00:39:23] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:39:45] <dave0> maw
[00:39:53] <selwyn> hi
[00:40:00] <gilberth> Hello dave0!
[00:40:07] <dave0> maw selwyn, gilberth !
[00:40:23] <dave0> sup?
[00:41:02] <gilberth> ¿dns
[00:42:42] <gilberth> dave0: I untangle the CADR CPU and will attempt brute force at compiling the microcode.
[00:42:55] <dave0> i see...
[00:43:41] <selwyn> can just about see a way to bridge whatsapp to weechat
[00:43:47] <selwyn> will be painful but worth it
[00:44:53] <gilberth> My experiment will be: Have all the mechanics in just one function void cpu_step (struct cpu *cpu, ucw_t insn); And then say for(;;) switch(cpu.pc) { case 0: cpu_step (&cpu, 0x100289792792); break; case 1: cpu_step (&cpu, 0x793761610); ...; }
[00:45:25] <gilberth> And see, if the compiler does inline cpu_step and throw all the dispatch around on the insn op code.
[00:45:29] <selwyn> any recommendations for a private irc server?
[00:47:22] <shka> selwyn: private IRC server does not sound like you really want an IRC server honestly
[00:47:32] <gilberth> I tried that with the B32 instruction set and gcc was very good at it, boiling it down.
[00:47:57] <selwyn> the plan is to bridge whatsapp to irc using this https://github.com/42wim/matterbridge
[00:48:05] <selwyn> and then connect to the server using weechat
[00:48:11] <gilberth> Well, define "private". I once ran an ircd at my company, turned out to be useful.
[00:48:11] <selwyn> i don't want to use libera for my private messages
[00:48:40] <selwyn> only function of the server will be to allow bridging
[00:48:44] *** Joins: raeda (~raeda@72.49.219.33)
[00:50:01] *** Quits: raeda (~raeda@72.49.219.33) (Remote host closed the connection)
[00:50:21] *** Joins: raeda (~raeda@72.49.219.33)
[00:51:10] <shka> so run your own on a PI
[00:51:41] <selwyn> i will run it on my personal server
[00:51:52] <selwyn> am i misunderstanding what a private irc server is?
[00:51:59] <selwyn> i mean, i will make one myself
[00:52:45] <shka> i thought that you were asking about ready service 
[00:52:49] <selwyn> oh
[00:53:02] <selwyn> yeah my question was not clear
[00:53:06] <mfiano> matterbridge is horrible
[00:53:16] <selwyn> i meant what software i could use to run a server
[00:53:21] <selwyn> mfiano: why :(
[00:53:24] <mfiano> constantly loses sync/disconnects
[00:53:32] <gilberth> ircd?
[00:53:36] <shka> any other good management book other then "peopleware"?
[00:53:43] <selwyn> oh dear
[00:54:24] <selwyn> did you stop using it because of that?
[00:54:36] *** Joins: dra (~dra@2a04:4540:6409:4e00:cc08:6836:8a16:3bee)
[00:54:37] <mfiano> yes
[00:54:40] <dra> Hello!
[00:54:54] <selwyn> i don't suppose you know of any alternatives?
[00:54:56] <selwyn> hi dra
[00:56:27] <Mondenkind> mfiano: dispatch benchmark: http://ix.io/3Cao and cl eqv: http://ix.io/3Cap.  It is 25x _slower_ as of new-disp.  One thing I neglected to mention, though, is that this is a megamorphic callsite, which is kind of a worst case for JITs; they can't really outperform a straight compiler for such cases
[00:56:48] <Mondenkind> so I was using that to get a baseline, before benchmarking hypomorphic callsites, but I never got around to that
[00:57:44] <Mondenkind> fwiw when I mentioned it in the dev channel, I was told that there is currently no strategy for handling megamorphic callsites; so presumably it will be improved in the future
[00:58:02] <mfiano> Mondenkind: I finished reading the official documentation today. I think there are a few warts that are going to prevent me from using it seriously, though might do some small scripts with it
[01:00:31] <mfiano> One thing I don't like is how type objects are instance objects without any state.
[01:01:03] <mfiano> I don't like the type smiley solution to pick which one you mean for definite/indefinite.
[01:01:26] <mfiano> It is very unlispy for sure not having a real bottom type. Nil is sort of special
[01:01:52] <mfiano> I see why they did it from a type checking perspective, but it is ehhh
[01:03:36] <mfiano> I think the whole object/type system is way more over-complicated/full of footguns than there needed to be.
[01:03:42] <Mondenkind> hmm, according to a comment in the source, Nil is specced to be a bottom type, but isn't actually
[01:04:30] <mfiano> If for example you have an type-constrained optional parameter without a default value, and no argument is supplied at the call site, it gets a type object as the default value
[01:04:48] <mfiano> Rather than say Nil, obviously, which would fail the constraint
[01:05:56] <mfiano> my Int $a; say $a;
[01:06:15] <mfiano> My lispy self would expect Nil here, but a type theorist would expect an Int
[01:06:31] <mfiano> at the very least it should be a type union i think
[01:06:50] <Mondenkind> oh, I see
[01:06:53] <Mondenkind> I don't hate that actually
[01:06:53] <mfiano> But all types represent both undefined and defined types
[01:06:58] <Mondenkind> think of it like a typed nil
[01:07:10] <mfiano> Hence the :D/:U smilies
[01:09:23] <mfiano> I could probably live with that, but there is quite a bit I don't like about the type/object system :/
[01:12:33] *** Quits: dra (~dra@2a04:4540:6409:4e00:cc08:6836:8a16:3bee) (Quit: Leaving)
[01:13:10] <mfiano> Mostly, though as I said a few times already, I think it has too many hacks in the OOP dept, like most traditional OOP languages.
[01:14:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[01:14:53] <mfiano> I've used my fair share of OOP-based languages to know how much time is spent fighting it. I am really not a huge fan of OOP at all, but CLOS is special.
[01:15:33] <mfiano> I would like to find a language with an object system that doesn't suck like CLOS one day, but chances are slim.
[01:16:13] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:19:11] <selwyn> time to pitch yeast
[01:20:58] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 258 seconds)
[01:35:55] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[01:50:24] <selwyn> i wonder if common lisp counts as a traditional oop language at this point
[01:52:20] <gilberth> Traditional? I don't think so.
[01:52:33] * hayley reads the rubric for the security assignment
[01:53:24] <hayley> "Discuss the efficiency/security trade-off of your proposed technique." What, you can do more than 1GB/s/core of AES with hardware acceleration, and we aren't writing close to 10MB/s surely as the Minecraft API craps itself at that point... 
[01:57:03] <hayley> Seems more like 100MB/s without hardware acceleration, and 650MB/s with hardware acceleration (of AES-256-CBC) but you get the idea. Not even close to the bottleneck.
[01:57:07] <edgar-rft> If it doesn't suck then it's not traditional :-)
[01:58:50] <mfiano> I guess my last sentence was ambiguous. Obviously CLOS doesn't suck :)
[02:01:19] <gilberth> A language which doesn't allow me to add a method to an existing class does suck. As well as one for having two ways to denote subroutine invocation f(x,y) and x.f(y). To begin with.
[02:02:45] <mfiano> Raku has more than 2 :)
[02:03:38] <mfiano> But it does allow for the former
[02:04:22] <copec> https://twitter.com/numist/status/1450151762757767168?s=21
[02:05:13] <gilberth> Trouble is f(x,y) is not the same as x.f(y).
[02:25:57] <selwyn> https://app.uio.no/ifi/texcount/faq.html#emacs
[02:26:08] <selwyn> look at the indentation style :)
[02:27:23] <gilberth> I like it like the close parens match the open parens. Or appear to match. Bruno style.
[02:27:31] <selwyn> ) ) )
[02:27:33] <selwyn> bruno style?
[02:27:44] <selwyn> bruno style?
[02:29:01] <gilberth> Of CLISP fame.
[02:29:38] <selwyn> right
[02:31:34] <selwyn> doing word counts of latex documents is pretty hard actually
[02:32:59] <gilberth> I will fight back sometime and not put "}" on an extra line in C.
[02:33:21] <selwyn> i used to give each } its own line in java
[02:33:44] <selwyn> and, for a while, each {
[02:34:26] <selwyn> i can sort of see the appeal of python syntax in that indentation decisions become trivial (because they are made for you)
[02:34:32] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[02:38:45] <gilberth> Like this <http://clim.rocks/gilbert/silly.c> will get compact code.
[02:39:22] <selwyn> what's silly about it?
[02:39:24] <gilberth> selwyn: In C I give each "{" and "}" its own line. And I hate the K&R style which is consistent and does so only for "}"
[02:39:27] * hayley does benchmarks
[02:39:34] <gilberth> selwyn: The indentation.
[02:39:44] <hayley> 7.6GB/s encryption using AES-256-CTR, and the Minecraft library only puts out 170kB/s on a good day.
[02:40:10] <gilberth> BTW for a wc of a LaTeX document, as long as you want to count the words that make it to the output, I would work on the DVI.
[02:40:27] <selwyn> yeah dvi maybe more practical to work with
[02:40:28] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[02:40:59] <gilberth> Watch the hyphenation.
[02:41:24] <selwyn> i usually output pdfs
[02:41:39] <gilberth> You might have luck with just pdflatex and pdftotext or pdftoascii. or what ever that is called.
[02:41:56] <selwyn> i'm sure that will have problems with hyphenation
[02:42:08] <selwyn> at this point it is easier to live without having a word count lol
[02:42:17] <gilberth> Turn it off for counting.
[02:43:41] <gilberth> And make it ragged right. Remember <http://clim.rocks/gilbert/tex/dpans.0.txt>?
[02:44:18] <gilberth> That's generated from the DVI.
[02:44:23] <selwyn> oh i see
[02:44:50] <selwyn> i think that's enough work for today
[02:46:12] <gilberth> A special TeX that would enforce fixed pitch fonts would be nice for a general ASCII^UTF-8 output. In my next live.
[02:47:49] <gilberth> But for wc you don't need fixed width fonts. There is some dvi to ascii tool, which kind of works.
[02:48:21] <gilberth> Question is: How exact must the word count be?
[02:48:35] <selwyn> not that much
[02:49:00] <gilberth> Then pdf -> text could do. Give it a try.
[02:49:12] <selwyn> i would be counting my phd thesis, which has an upper limit of 100k words
[02:49:21] <selwyn> would be nice to see what percentage of that i have roughly
[02:49:40] <selwyn> but it is not even clear how to word count such a document
[02:49:43] <gilberth> I see. So a rough count would be a win.
[02:50:41] <gilberth> Heh, is there some definition of how to count words? Does a 'sin', say, in an equation could as a word?
[02:50:52] <gilberth> ToC?
[02:51:08] <selwyn> i couldn't find such a definition
[02:51:23] <selwyn> consensus is that bibliographies are excluded
[02:51:34] <selwyn> i feel that equations ought to count for at least one word, morally speaking
[02:52:48] <gilberth> I guess at this point you just want to know if you're at e.g. 20k words or at 80k words.
[02:53:38] <selwyn> 16k words
[02:53:46] <selwyn> nearly 17k
[02:53:53] <selwyn> not too bad
[02:53:59] <gilberth> So you have ample of space left.
[02:54:16] <selwyn> yeah
[02:54:33] <selwyn> my worry was that i wouldn't have enough results to make a successful thesis
[02:54:48] <selwyn> but that appears to be unlikely to be the case
[02:55:15] <gilberth> Hmm, how many pages would 100k words be? Like 150 or so?
[02:55:36] <selwyn> if laid out as a thesis with double spacing, then a lot more than that i think
[02:55:40] <selwyn> but i don't know the answer
[02:56:03] <selwyn> 100k words is said to be the boundary between a novella and a novel
[02:56:21] <gilberth> I was thinking about layed out like a book.
[02:58:24] <gilberth> It must have been a pain to write a thesis before the advent of computers for typesetting.
[02:58:42] <selwyn> apparently there are some who produce 2x 50k word manuscripts in a month for a competition
[02:58:51] <selwyn> gilberth: indeed
[02:59:09] <selwyn> the few papers/theses i have read from that time do typesetting of equations by hand though
[02:59:25] <selwyn> which is probably easier than a computer
[03:00:14] <gilberth> I wonder if mechanical tty were ever used for text processing. You could glue those paper tapes. :-)
[03:00:20] <selwyn> lol
[03:00:34] <gilberth> selwyn: Perhaps easier to prepare, but harder to make copies.
[03:00:53] <gilberth> selwyn: Well, with punch cards, you don't need Emacs. :-)
[03:01:36] <gilberth> selwyn: Well, I would use a tty, if not for computers. You could edit and copy as much as you like.
[03:02:18] <selwyn> return to ed
[03:04:45] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 250 seconds)
[03:04:50] <gilberth> Couldn't be worse than vi.
[03:05:51] <gilberth> Actually, I wonder how it would feel to operate a machine by a real tty.
[03:07:42] <gilberth> Editing can't be that bad, when you ever used BASIC with line numbers. And you would keep a print out of your program anyway.
[03:07:48] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:59a6:cb38:6d37:7205) (Remote host closed the connection)
[03:09:52] <gilberth> This is funny. gcc, which took 4 hours and 4.6GB of disk space to compile, spots more uninitialized variables than clang does. I wonder how that could happen.
[03:10:41] <selwyn> that's much longer than clasp
[03:11:04] <gilberth> selwyn: This is a slow machine.
[03:11:16] <selwyn> well
[03:11:21] <selwyn> better not build clasp on it then
[03:11:33] <gilberth> 2.2GHz and only two cores.
[03:14:34] <gilberth> The Linux machine of mine is 3.6GHz and has 8 cores and more RAM and more cache.
[03:15:31] <selwyn> cool
[03:15:38] <selwyn> well, goodnight
[03:15:48] <gilberth> Take care!
[03:34:25] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[03:38:44] *** Joins: Alfr (~Alfr@user/alfr)
[03:51:14] *** Quits: random-nick (~random-ni@87.116.178.206) (Ping timeout: 258 seconds)
[04:47:38] <hayley> https://i.redd.it/nnrut48d5e761.png
[04:50:37] <gilberth> Nice one.
[04:50:53] <gilberth> Who is that other guy in the exam?
[04:51:33] <hayley> Michel Foucalt
[05:19:33] <hayley> https://danluu.com/empirical-pl/
[05:46:37] <hayley> https://news.ycombinator.com/item?id=9320989 "Here's one reason I say the Bitcoin Protocol doesn't exist: No sane person says "An important feature of the Bitcoin Protocol is that conforming clients MUST REJECT any Bitcoin 
[05:46:37] <hayley> transaction which would exhaust the default number of locks available to the Berkeley DB.""
[05:46:39] <hayley> LOL
[05:50:10] <gilberth> My CADR says: "Foo, a hacker has screwed somewhere." Guess that would be me :-(
[05:51:46] <gilberth> And now? Go back?
[06:10:31] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[06:17:59] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[06:18:47] <gilberth> Hugh? xedit comes with a Lisp?
[06:26:12] <hayley> https://www.youtube.com/watch?v=v2DLG522Kws
[06:26:27] <gilberth> Ouch. When I use clang, the CADR seems to work, when I use gcc-11.2 it doesn't.
[06:27:43] <gilberth> Oh dear, ixelp died again?
[06:28:41] *** Quits: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de) (Remote host closed the connection)
[06:29:47] *** Joins: ixelp (~ixelp@p5492d7b6.dip0.t-ipconnect.de)
[06:29:47] *** ChanServ sets mode: +o ixelp
[06:30:53] *** Quits: slyrus_ (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[06:31:18] <hayley> https://www.reddit.com/r/aspiememes/comments/qan5g6/they_confused_inclusion_and_exclusion/ Guess I haven't had any labs yet. But they let me do stupid shit in high school.
[06:32:23] <gilberth> Ok. Could I have a deterministic input to the CPU and craft a detailed trace of the whole machine state at each cycle? And then compare?
[06:33:18] <gilberth> But then, I was bitten many, many times by gcc bugs, wouldn't surprise me, when this too is a gcc bug.
[06:42:20] <gilberth> I also suggest that the gcc folks would actually honor bug reports.
[06:48:59] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[07:03:52] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[07:29:34] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[07:43:05] *** Joins: semz (~none@user/semz)
[08:14:06] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[08:15:41] <hayley> https://www.youtube.com/watch?v=CyrKinzliyQ
[08:15:41] -ixelp- Something is wrong with my Wii Sports Golf game - YouTube
[08:34:36] <hayley> gilberth: Can you afford -Wpedantic or whatever it is?
[08:36:15] <hayley> FWIW if I need to edit libraries for an assignment, and we use git for version control, do I just have to add each library as a submodule?
[08:44:36] <gilberth> hayley: I can, it gives no additional warnings compared to the -Wall I already have.
[08:44:45] <hayley> Ouch.
[08:47:03] <gilberth> I move to the Linux machine tomorrow, where I have five different versions of gcc, but no current clang.
[08:47:53] * hayley mentally prepares to beat Minecraft again
[08:49:34] <gilberth> However -Wconversion would drive me nuts, as the original code is very lazy about signed versus unsigned.
[08:49:44] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[08:50:17] <hayley> Well, I was not first. But I got the egg.
[08:50:39] * hayley sees no egg and blinks.
[08:50:56] <hayley> What a waste.
[08:51:34] <gilberth> And now? Hatch it?
[08:52:16] <hayley> How? I got no egg.
[08:52:54] <gilberth> Oh, you said "What a waste", I imagined you found it.
[08:53:18] <gilberth> And being disappointed that it is not made of gold.
[08:55:13] <gilberth> Down to 8ns/cycles and a bit. That's a waste.
[08:57:11] <gilberth> It's late, guess my BFI microcode compiler has to wait.
[09:14:26] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[09:17:40] <hayley> Though it looks great on paper to have encryption be 44,000x faster than anything we can make the API do, I think it needs some optimization.
[09:21:46] <hayley> Seriously, they already did it and used folders rather than submodules. Seems I won't be getting very far w.r.t doing as much "work" as anyone else.
[09:27:38] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 260 seconds)
[09:33:57] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:37:54] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[09:39:43] *** Joins: aeth (~aeth@user/aeth)
[09:51:14] * gilberth waits for clang to finish compiling 16k #include "cpu_step.h", which has 500 lines + a few functions calls he hopes get inlined.
[09:52:24] * hayley "optimizes" and now getBlocks() transfers 730kB/s at best. Still awful.
[09:52:41] * gilberth crashed clang.
[09:53:29] <gilberth> It urges me to file a bug report. Haha, very funny.
[09:54:09] * hayley reads this shitty Java code
[09:54:28] <hayley> "// Add variables that appear in switch" Just put it in the switch case, you already put { } around the bodies.
[09:57:02] <gilberth> It mentions a crash report file, which it didn't generate. /me shrugs. Next.
[09:58:41] <gilberth> hayley: Is that your homework?
[09:58:46] <hayley> Yes.
[09:59:03] <gilberth> Seriously? Get a refund.
[09:59:26] <hayley> I'm just fiddling around with this library so that encryption throughput isn't 44,000× as high as application throughput, and so I have something to write about.
[09:59:53] <hayley> But this is public code.
[10:00:16] <gilberth> Public?
[10:00:46] <hayley> Or not? Now I can't find it in the original repository.
[10:01:20] <gilberth> hayley, it's where the egg is.
[10:01:29] <hayley> Thanks.
[10:01:38] <gilberth> np
[10:02:19] <hayley> Also how do I set a thread name? It'd be easier if I was looking for "Shitty connection thread" versus "Thread-123"
[10:03:09] <gilberth> Pass a :NAME argument to BT:MAKE-THREAD?
[10:03:38] <hayley> Yes, I am aware of how to do it in BT. Rather in Java.
[10:04:03] <hayley> Though I have a macro wherein I write (with-thread (:name "Thread cleaning up your poop") (loop (clean-up-poop)))
[10:04:16] <gilberth> I haven't written a single line of Java since decades.
[10:05:01] <gilberth> I believe my machine is starting to page.
[10:05:06] <hayley> The first thing I found was someone writing new Integer(x).toString() to write out a string. Why bother with the boxed integer object? IIRC escape analysis doesn't work on Integer, Long, etc, cause Java tries to cache instances. Pretty funny.
[10:05:44] <gilberth> And this one has a real spinning disk.
[10:07:02] <selwyn> iirc new Integer(x).toString() is idiomatic
[10:07:30] <gilberth> gcc uses 44GB, while I only have 8GB of RAM in this poor machine. Fun.
[10:07:51] <selwyn> i don't understand why the memory requirements are so high
[10:08:34] <gilberth> selwyn: Because I compile a function of about 8M lines.
[10:08:42] <selwyn> oh lol
[10:09:13] <hayley> selwyn: I found Integer.toString() is a bit faster.
[10:10:01] <dave0> gilberth: is it your massive switch statement?
[10:10:07] * hayley looks to see how this person uses two threads to do IO.
[10:10:13] <shka> hehe
[10:10:34] <shka> it reminds me of my SQL generated function that was 6 megabyte in text file
[10:10:34] <gilberth> dave0: Yep. But I don't believe it will work out.
[10:10:49] <shka> it worked great until PG decided that JIT is a good idea
[10:10:54] <hayley> icache goes brrrrrrr
[10:10:57] <shka> it was, in this case, a very bad idea
[10:11:00] <dave0> gilberth: array of function pointers could work too
[10:11:11] <selwyn> brings back memories of writing one thread per connection stuff in java
[10:11:41] <gilberth> dave0: Nope. Not with the instruction modification register and the two-stage pipeline.
[10:12:23] <gilberth> And memory reads come in two cycles late and this must be maintained.
[10:12:38] <hayley> Hm, no, this isn't making sense yet.
[10:14:45] <selwyn> hm, does common lisp even have nio
[10:15:08] <gilberth> 70GB and counting. I should have tried that experiment on the bigger machine, with more RAM and faster disks.
[10:15:17] <hayley> Well, I spot a few bugs. First that they use a non-volatile boolean to decide when the connection is closed, so the compiler can just turn it into while (true) { ... } and shit's fucked.
[10:15:41] <shka> selwyn: kinda
[10:15:52] <gilberth> hayley: That's common.
[10:15:58] <selwyn> it's not in the spec?
[10:16:01] * hayley sends them to JMM jail
[10:16:52] <shka> selwyn: there is LISTEN on streams but nothing else IIRC
[10:17:05] <selwyn> til
[10:17:23] <hayley> I outperformed Rust/Tokio async with one connection per thread and some care with LISTEN. And a better hash table of course.
[10:17:24] <gilberth> LISTEN is broken.
[10:17:28] <selwyn> also read-char-no-hang
[10:17:39] <shka> gilberth: that is... not good
[10:17:39] <gilberth> Which is broken in SBCL.
[10:18:12] <hayley> Oh, for fuck's sake, messages are actually processed in the server tick loop, and those two threads just set up buffers for it.
[10:18:21] <selwyn> hayley: lol
[10:18:59] <gilberth> Apart from implementation bugs, you want read-char-no-hang, because LISTEN will return on EOF, and you probably do want to act on EOF.
[10:19:00] <shka> selwyn: regardless, in theory you could manage multiple files with pooling, but most likely you would want to use this on the sockets instead
[10:19:21] <selwyn> right
[10:19:26] <shka> which are absent from cl spec
[10:19:28] <gilberth> And there is neither READ-BYTE-NO-HANG, nor a READ-SEQUENCE, which would be have as read(2).
[10:19:39] <gilberth> * behave
[10:20:25] <gilberth> Hence, you're in trouble.
[10:20:40] <shka> oh, this is serious omission
[10:21:57] <gilberth> Well, (1) LISTEN should be fixed and (2) READ-SEQUENCE have a :SHORT argument. A :NO-HANG argumenet to READ-SEQUENCE would also be fine.
[10:22:36] <gilberth> READ-CHAR-NO-HANG and a potential READ-BYTE-NO-HANG don't help, when you want some I/O speed.
[10:22:46] <shka> they surely gonna fix this in the next revision of CL! :P
[10:23:20] <gilberth> I am lazy. I should write about this, propose sth and offer a library.
[10:23:57] <selwyn> shka: if only the common lisp developers would get off their arses
[10:24:02] <hayley> According to my results, the actual message handler is only running like 5% of the time. So it's all IO. Or maybe Python. Probably the latter too.
[10:24:06] <selwyn> tired of waiting 30 years for a new version :p
[10:24:37] <gilberth> And I also want to be able to return an arbitrary number of stream elements, not just a single character. Or have a buffer access API.
[10:25:11] <hayley> Back to 200kB/s again. So somehow the last one was a fluke.
[10:25:13] <gilberth> Ok. gcc settled at 70GB, it doesn't grow anymore.
[10:26:29] <gilberth> I believe, it thinks. But I am still mildly thrashing.
[10:27:25] <hayley> Seriously, this is all IO being slow on the Python side?
[10:27:39] <hayley> socket.recv_into is the only hot function, which means I'm fucked.
[10:28:28] <gilberth> Anyhow, CL lacks some for fast stream I/O in a modular fashion. Also some standard about bivalent streams and switching the external formats. Heck, not even the :UTF-8 external format is universal. This could be a kind of addendum.
[10:29:06] <gilberth> hayley: It does burn cycles? Is every bit greeted by its name?
[10:29:28] <hayley> Somehow, yes.
[10:30:42] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:31:09] <hayley> Alternately, again, the Java side is somehow slower.
[10:31:43] <gilberth> My CPU is ~90% idle? How is that counted? Load is like 1.3
[10:33:05] * hayley also misses having a REPL and meters everywhere.
[10:34:26] <gilberth> Perhaps your education entail to learn to do without. What's next semester? Punched cards files with a system operator?
[10:35:13] <hayley> That would have been the old university, where they gave us vi because "IDE skills don't transfer". But apparently programming languages do.
[10:35:39] <shka> well, programming languages do transfer
[10:36:20] <shka> mostly because differences between programming languages are not as huge as you would think
[10:36:26] * hayley reads more
[10:36:42] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[10:36:44] <hayley> They use an ArrayDeque, but AIUI this is a mailbox so just a queue would suffice?
[10:36:52] <selwyn> shka: but in that case, why learn boring corpo ones at university
[10:36:54] <selwyn> seems a waste
[10:37:02] <shka> learning CL really gave this impression
[10:37:39] <shka> hayley: the overhead of arraydeque is so tiny that it does not matter
[10:38:09] <shka> selwyn: i agree
[10:38:11] <hayley> Well, currently the IO threads are suspect, and they do dumb things with dequeues.
[10:38:15] <gilberth> Well, once you mastered CL, you should be able to learn any other language in no time.
[10:38:34] <shka> gilberth: why?
[10:38:53] <selwyn> even c++? lol
[10:38:57] <shka> i mean, i tend to agree
[10:39:04] <shka> but i don't know why
[10:39:11] <shka> i don't have solid theory behind this
[10:39:18] <gilberth> selwyn: What new concepts does C++ provide?
[10:39:19] <selwyn> common lisp tends to have every style in it?
[10:39:34] <shka> selwyn: sure, why not?
[10:39:38] <gilberth> I would call Prolog different.
[10:40:12] <selwyn> hm
[10:40:26] <shka> selwyn: the only different stuff in C++ is that template meta-programming but in the end they are just recursive functions with fucked-up syntax
[10:40:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[10:40:28] <selwyn> i looked into c++ and decided it would not be worth the effort to learn it
[10:40:34] <selwyn> that's different though
[10:41:14] <gilberth> As I once learned Prolog I wrote Lisp in Prolog and programs became buggy and slow until I finally "got" Prolog. You just formulate your problems in different ways.
[10:41:54] <shka> template style of lisp cons would be something like cons<A,cons<B,cons<C...
[10:41:58] <gilberth> selwyn: What for? You like the pain?
[10:42:03] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[10:42:09] <selwyn> well exactly
[10:42:13] <selwyn> the pain wasn't worth it
[10:42:29] <gilberth> Templates are more or less like macros, nothing really interesting about it.
[10:42:37] <shka> https://www.youtube.com/watch?v=XPLwPRhHw0M
[10:42:38] -ixelp- Pain (Remastered) - YouTube
[10:42:53] <selwyn> is there a good prolog implementation in common lisp?
[10:43:10] <shka> gilberth: i would call it a recursive functions working on types and literals
[10:43:17] <gilberth> selwyn: I don't know.
[10:43:18] <shka> at compile time
[10:43:21] <shka> very, very slowly
[10:43:25] <shka> selwyn: yes!
[10:43:37] <shka> but commercial
[10:43:42] <shka> not open sauce
[10:43:56] <selwyn> the lispworks one?
[10:44:00] <shka> yeah
[10:44:01] * hayley tries a larger chunk size and gets 2.5MB/s. Still mediocre.
[10:44:10] <selwyn> looks worth paying for tbh
[10:44:10] <gilberth> But writing a Prolog in CL is almost trivial. It's a tiny language.
[10:44:27] <shka> well, not exactly trivial if you want full prolog
[10:44:36] <shka> because cuts
[10:44:36] <Mondenkind> nor fast prolog
[10:44:44] <selwyn> buildyourownprolog.com
[10:44:45] <shka> and what Mondenkind said
[10:45:03] <gilberth> Mondenkind: We have COMPILE.
[10:45:25] <Mondenkind> gilberth: sure.  But the cl compiler is optimized for compiling lisp code, not prolog code
[10:45:41] <shka> i even made my own prolog-like language
[10:45:43] <shka> https://github.com/sirherrbatka/huginn/blob/master/scratch/zebra.lisp
[10:45:44] -ixelp- huginn/zebra.lisp at master · sirherrbatka/huginn · GitHub
[10:45:50] <gilberth> You could compile Prolog to CL.
[10:46:17] <Mondenkind> right; my point is that the types of things prolog tends to do and the types of things cl tends to do are different.  And the cl compiler is optimized for the latter
[10:46:39] <shka> gilberth: you could, and paip-prolog does that, still does not run any faster then my bytecode unfolding interpreter 
[10:46:54] <gilberth> Nah, the only thing you'd miss in co-routines.
[10:47:05] <hayley> "Deprecated. Magic value" The documentation for the Minecraft API in Java-land is also about as confusing.
[10:47:32] <gilberth> shka: Then it's a poor compiler.
[10:47:34] <selwyn> hayley: what are you trying to do lol
[10:47:39] <shka> selwyn: anyway, zebra puzzle!
[10:47:42] <selwyn> combine minecraft with homework?
[10:47:52] <shka> gilberth: yeah, but making a good one is certainly non-trivial
[10:47:58] <hayley> The assignment is to encrypt traffic for some Minecraft-Python library.
[10:48:11] <robin> a fun factoid: the ivory processor had *one* instruction specifically for prolog optimization (i don't recall what it did exactly; i haven't gotten quite that far with my CL-based lispm emulator ;))
[10:48:13] <selwyn> how strange
[10:48:13] <gilberth> I wonder, if gcc will still compile by the time I get up.
[10:48:37] <shka> regardless
[10:48:40] <hayley> But my report says that encryption throughput on one core is about 8GB/s, application throughput about 2MB/s, and there is supposed to be a part on the efficiency-security tradeoff. Well, looks free to me.
[10:48:47] <gilberth> robin: You mean the microcode.
[10:48:54] <hayley> robin: The Joshua source code says something like "We'd microcode this if we had the guts for it!"
[10:49:13] <shka> i think that C++ would make a lot more sense if that template magic was based around the logic-programming, and not pure functional programming
[10:49:55] <gilberth> What are templates even useful for?
[10:50:31] <shka> they kinda are, but they are just so PITA to use that the utility is questionable
[10:50:56] <shka> you are often generating more problems then you solve
[10:51:04] <shka> but i don't think that it has to be like that
[10:51:13] <gilberth> What about C++ is not PITA to use?
[10:51:14] <robin> gilberth, no, the instruction set
[10:51:35] <gilberth> robin: Which one? Sure not the processor itself.
[10:51:44] <robin> (i'm not familiar with the microcode, there may be prolog stuff there too)
[10:52:04] <robin> gilberth, i'll check to make sure i wasn't hallucinating ;)
[10:52:08] <pjb> C++ templates are turing complete compilation-time programming. You can do the same as with CL macros, but in a very difficult and hairy way.
[10:52:13] <shka> gilberth: uh... some of the STD has a decent design imho
[10:52:36] <pjb> C++ templates are somewhat like brainfuck macros.
[10:52:40] <gilberth> I could add Prolog-supporting byte codes to CLISP anytime, then my CPU will have Prolog support, too. :-p
[10:52:56] <robin> ivory = I-machine, iirc?
[10:53:07] <shka> pjb: i mean, static type safety can be a good thing
[10:53:23] <shka> i don't have much use for it, but in theory it has it's benefits
[10:53:24] <gilberth> robin: Still just microcoded.
[10:55:15] <gilberth> You may look at Japan. What was Lisp in the AI hype in the US, was Prolog in Japan. They once had a project to get at 1M inferences per second.
[10:56:02] <shka> i find that Japanese project to be fascinating topic
[10:56:29] <shka> they were onto something with that
[10:57:52] <gilberth> Perhaps. My love affair with Prolog was breve and intense, but we didn't fit too well and departed a long, long time ago.
[11:00:43] <gilberth> And I have mixed feelings about the Lisp machine.
[11:01:57] * hayley finds a pretty constant round-trip latency of 50ms to call getBlocks, even from Lisp.
[11:02:26] <selwyn> they like lisp as well in japan right?
[11:03:18] <shka> apparently yes, they had history of applying lisp to various domains
[11:03:29] <Mondenkind> selwyn: that was my impression, but I have no ide aof its origin
[11:03:50] <selwyn> clearly they have good taste
[11:04:27] <shka> nintendo was using lisp for compilers IIRC
[11:05:33] <selwyn> wow cool
[11:09:02] <dave0> hayley: the hitchhikers guide to the galaxy movie is on tv tonight
[11:09:14] <dave0> i might tape it
[11:09:27] * hayley scours the java.util.concurrent package for a better way to have a mailbox.
[11:09:38] <hayley> As they use tabs for indentation, and my tab width is 8, the code is going all to the right.
[11:09:46] <selwyn> martin freeman was in that
[11:10:04] <dave0> yep he's good
[11:10:15] <dave0> alan rickman did marvin's voice
[11:10:18] <selwyn> huh alan rickman as well
[11:10:22] <dave0> yes yes!
[11:10:25] <selwyn> forgot about that
[11:10:41] <selwyn> well
[11:10:50] <gilberth> Tabs are anachronistic, and when they are there belong at a width of 8.
[11:11:00] <Mondenkind> never watched that movie.  But the radio play was really good
[11:11:19] <selwyn> it may be on tv tonight for you, but that means i will have to wait another 12 hours until it is on here :)
[11:13:20] * hayley thinks again
[11:13:53] <hayley> Minecraft ticks 20 times a second, i.e. each tick is 50ms apart. We only handle messages every tick. The client only sends one request at a time.
[11:14:14] <hayley> So 50ms latency is basically guaranteed.
[11:15:46] <hayley> Maybe I could hack things so that, if we handle one message, we try to handle another if it comes in quickly enough? Though that only drops the average latency to 25ms.
[11:20:43] <hayley> Seems I have no problem trying to generate messages (SBCL reports like 1.2µs/message, and the server complaining about overload is in the same ballpark), so it might win.
[11:35:24] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:35:54] <hayley> What's also funny is that they log if the queue is too long, and defer processing, but the queue still is unbounded. Could just use a blocking queue.
[11:39:06] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:11:43] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:58cd:7a73:282:b3d7)
[12:12:32] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:58cd:7a73:282:b3d7) (Remote host closed the connection)
[12:25:29] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[12:33:59] *** Quits: clothespin (~awolven@c-73-209-95-92.hsd1.il.comcast.net) (Ping timeout: 264 seconds)
[12:52:23] <robin> gilberth, well yeah, but iirc it was documented in the macroinstruction set; that would be a meaningful difference, no?
[12:55:22] <robin> oh, they're (probably) *undocumented* instructions according to my notes: the undocumented instructions include logic-tail-test, push-global-logic-variable, push-local-logic-variables and unify
[13:02:36] <robin> gilberth, i guess the significance would be a matter of perspective; for me it is since ivory emulators work with instructions not microcode (or at least i don't think the vlm emulates microcode at all, i could certainly be wrong)
[13:03:02] <robin> s/it is/it's a meaningful difference/
[13:11:26] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:13:39] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.3)
[13:16:18] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[13:23:24] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[13:23:41] *** Joins: random-nick (~random-ni@87.116.178.206)
[13:25:25] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Client Quit)
[13:44:36] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[13:48:09] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 268 seconds)
[13:54:54] <mfiano> Morning
[13:59:58] *** Quits: random-nick (~random-ni@87.116.178.206) (Ping timeout: 258 seconds)
[14:19:33] *** Joins: lisp123 (~lisp123@5.30.23.247)
[14:19:39] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[14:22:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[14:24:07] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[14:35:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[14:42:25] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[15:21:59] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Ping timeout: 264 seconds)
[15:25:05] <ck_> hello
[15:33:16] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[15:35:02] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[15:35:12] *** Joins: icer (eric@gateway/vpn/protonvpn/icer)
[15:35:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:35:43] <selwyn> shka: i thought you were joking but my order is probably going to spend more time in the uk than china before arriving
[15:36:00] <shka> oh, i am being dead serious
[15:36:20] <shka> since 1958 shipping worldwide is not a problem
[15:36:42] *** Joins: aeth (~aeth@user/aeth)
[15:37:41] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[15:37:45] <selwyn> 1958?
[15:41:41] <shka> yes
[15:41:52] <shka> the year shipping container has been introduced
[15:42:26] <shka> before the shipping container loading a ship could took up to a full week
[15:43:50] <shka> 1958 is when the world became the global market
[15:45:21] <hayley> BTW I did not get a win by trying to handle more messages, sadly. Scheduler hates me? Dunno but I'm stuck reporting 2.7MB/s, which means I don't have much to write.
[15:45:35] <hayley> "I've seen zero cost abstractions with more costs than that!"
[15:46:40] <shka> well, does the producer thread uses 100% of the cpu?
[15:47:09] <shka> and also, what kind of cpu are you using?
[15:48:29] <hayley> The producer thread does not use 100% CPU, no. Nothing uses significant amounts of CPU, cause the consumer (Minecraft mod) can only safely handle requests once per tick.
[15:49:36] <hayley> The application can only pass around 2.7MB/s at most, and encryption with AES-256-CTR runs at about 7.3GB/s. So encryption is free.
[15:55:20] <selwyn> why did it take so long
[15:55:58] <selwyn> i guess it is a standards issue
[15:59:45] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[16:00:07] <shka> selwyn: yeah, standardization takes time 
[16:03:37] <pl> well, it took some time to move from break bulk to containers
[16:04:49] <selwyn> oh, to be a greek shipping family after ww2
[16:05:15] <selwyn> there must have been few other opportunities in history to make that much money that easily
[16:05:36] <selwyn> without selling arms, or drilling for oil
[16:05:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Remote host closed the connection)
[16:06:14] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[16:10:14] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 265 seconds)
[16:11:09] <pl> selwyn: probably nothing beats the bonanza that was US economical situation post-WW2
[16:11:41] <pl> Pretty much everyone else was stuck on rebuilding while USA got to invest in new stuff
[16:11:58] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:15:50] <selwyn> good point
[16:16:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[16:17:13] <selwyn> reminds me that i am going to do a wartime recipe soon
[16:17:36] <selwyn> https://www.bbc.co.uk/food/recipes/applecrumble_2971 a relative of woolton pie
[16:17:38] -ixelp- Apple crumble recipe - BBC Food
[16:22:03] <shka> selwyn: uses butter, so not 100% period accurate :-)
[16:25:05] <selwyn> i will assume that i have bought some off of a friendly local crook
[16:25:09] <selwyn> for two weeks wages
[16:32:58] <shka> the black market
[16:37:04] <pl> 2oz butter was weekly ration per adult
[16:37:25] <shka> you sure about that?
[16:37:30] <shka> i think that this was margarine
[16:37:53] <shka> uh, apparently it was butter
[16:38:03] <shka> and twice as many margarine
[16:38:08] <pl> margarine was separate ration
[16:38:47] <pl> so you could attempt to save up some butter as well as pool multiple rations to get the ingredients
[16:39:05] <shka> well, ok
[16:39:14] <shka> selwyn: your recipe is legit!
[16:40:09] <selwyn> it is lazier than actually making a pie
[16:40:15] <selwyn> which tbh i can probably do
[16:41:44] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[16:42:00] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[16:46:16] <selwyn> should do apple butter as well
[16:47:09] <dave0> nite all
[16:47:30] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[17:08:29] * edgar-rft now wants an Apple iButter
[17:16:21] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:16:50] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:31:29] <ck_> pre-seeded, probably
[17:48:37] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[17:49:07] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[17:50:59] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:1845:6993:369c:6011)
[17:59:24] *** Joins: rogersm (~rogersm@90.166.177.48)
[18:03:29] *** Quits: icer (eric@gateway/vpn/protonvpn/icer) (Remote host closed the connection)
[18:35:37] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[18:39:06] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:17:18] *** Joins: Catie (~user@24.19.51.175)
[20:21:35] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-102F-static.midco.net)
[20:31:55] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[20:32:35] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[20:59:57] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:1845:6993:369c:6011) (Remote host closed the connection)
[21:00:02] <gilberth> Good morning #lispcafe!
[21:07:45] <shka> morning, i uess
[21:07:50] <shka> *guess
[21:09:14] <selwyn> hi
[21:09:37] <gilberth> I quit gcc, it was not finished. I need another approach.
[21:10:13] <ck_> g++ then? with more templates
[21:10:41] <gilberth> ck_: Sure, they are turning complete, aren't they?
[21:11:30] <ck_> yeah so you can do all of it in templates even, good idea
[21:11:33] <gilberth> Nah, it was a bold experiment, I hoped that by magic it would compile the microcode. Perhaps when I would have waited a few more years, it would have worked. Who knows?
[21:15:35] <gilberth> Anyhow, I am at the MMU. A curious thing is happening there. The virtual address range of the frame buffer is forced to map to just 256*#o36000, as a page is only 256 words, that is not enough for the frame buffer. The physical memory read routine then recognizes that page number and pulls in the virtual address to get at the frame buffer offset. However, that very part of the MMU page table is not setup at all somehow.
[21:16:16] <gilberth> I like to fix that. And I cannot see anything in the schematics that would make some virtual addresses special.
[21:19:04] <gilberth> The nasty thing about the microcode is: There is a delay slot for instructions, and two for memory reads. And a register, which when set, will be ORed into the next instruction word. I somehow need to untangle that.
[21:19:52] <gilberth> Consider: JMP FOO ; JMP BAR. This would jump to FOO execute that instruction and no matter what then jump to BAR.
[21:31:45] *** Joins: random-nick (~random-ni@87.116.178.206)
[21:46:41] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[21:47:11] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[22:01:17] <shka> oh no
[22:01:22] <shka> a dead pixel on my screen
[22:06:04] <shka> no, not a dead pixel
[22:06:29] <shka> *sigh*
[22:15:19] <edgar-rft> are you sure it's not a zombie pixel?
[22:33:59] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[22:35:42] *** Joins: aeth (~aeth@user/aeth)
[22:36:06] <gilberth> At times a dead pixel turns out to be just dead dust instead.
[22:36:41] * gilberth implemented a TLB only to recognize that it made things slower.
[22:41:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[22:41:12] <edgar-rft> I think the fastest is writing no code at all
[22:41:58] *** Joins: aeth (~aeth@user/aeth)
[22:46:35] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 264 seconds)
[22:48:15] *** Joins: aeth (~aeth@user/aeth)
[22:52:53] *** Joins: Oddity (Oddity@user/oddity)
[22:57:51] *** amirouche is now known as amazigh
[23:10:38] *** Quits: rogersm (~rogersm@90.166.177.48) (Quit: Leaving...)
[23:22:31] *** Quits: nckx (~nckx@tobias.gr) (Quit: Updating my Guix System <https://guix.gnu.org>)
[23:24:30] *** Joins: nckx (~nckx@tobias.gr)
[23:39:34] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 258 seconds)
[23:41:15] *** Joins: aeth (~aeth@user/aeth)
