[00:00:16] <ski> that last example was pseudo-C
[00:01:12] <ski> oh, and sorry, i forgot to remove `float avg' from the parameter list there -- no it ought to not be there
[00:01:21] <ski> so, correction :
[00:01:28] <ski>   float *map<typename T>(T *context,float (*fun)(T *,float),float *list,size_t size);
[00:01:39] <ski> or, with actual C, rather than pseudo-C :
[00:01:55] <ski>   float *map(void *context,float (*fun)(void *,float),float *list,size_t size);
[00:02:09] <fizzie> I don't know why, but it'd feel more natural for me for `void *context` to be the last parameter of both map and the called function.
[00:02:27] <ski> or, if you're passing the destination (pointer to first element of) array
[00:03:06] <ski>   void map(void *context,float (*fun)(void *,float),float *src,float *dest,size_t size);  /* perhaps also returning `dest' here, if you prefer */
[00:03:37] <ski> hm, well, i guess i'd at least like `context' to be adjacent to the callback `fun'
[00:03:54] *** Quits: smoke (~smoke@user/smoke) (Quit: Leaving)
[00:05:26] <fizzie> Hmm, well, then maybe `void map(float *dst, const float *src, size_t n, float fun(float, void *), void *context);`. Anyway, just a thing. Both pthread_create and (GNU) qsort_r put it last, that's probably where my preconceptions are from. (Both also put the callback second-to-last.)
[00:06:50] *** Quits: AmR (~AmREiSa@156.199.236.198) (Quit: Konversation terminated!)
[00:07:32] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[00:08:25] <TonyStone> if i do fd=open("/dev/urandom", O_RDONLY|O_NOCTTY);   in multiple processes at the same time is it possible those seperate processes can be getting the exact same random bytes?
[00:09:41] <owensjrw> Thank everyone back to the drawing board....
[00:09:51] <TonyStone> or if 2 or more seperate processes read fd at the same time rather.  it seems to possibly be sporatic behoavior i am seeing but i am having a hard time proving or disproving it...
[00:13:57] <ski> fizzie : sounds reasonable
[00:15:31] <ski> (now i'm wondering if this `map' ought to have `memmove'-like behaviour on overlap)
[00:15:41] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[00:16:37] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 240 seconds)
[00:16:44] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[00:20:14] <owensjrw> Im getting messed up numbers now using the void *context, ouch got lots of learning to do...
[00:22:22] <TonyStone> owensjrw dont feel bad.  i have tons of learning to do too! lol.
[00:22:34] <ski> did you pass a pointer to `avg' ?
[00:22:39] <sham1> If you're not always learning something, then you're doing it wrong
[00:23:14] <TonyStone> im struggling with basic things...... sham1... i always say "if you aren't fu**ing up then you aint trying"   :)
[00:23:45] *** Joins: SadPepe (~SadPepe@user/SadPepe)
[00:24:02] <owensjrw> https://bpa.st/HXIQ
[00:24:50] <owensjrw> the sd and ssd are now incorrect.
[00:25:11] *** Quits: SadPepe (~SadPepe@user/SadPepe) (Client Quit)
[00:26:00] <sham1> TonyStone: well sure, but one must start somewhere
[00:27:27] <owensjrw> If I run it more than one in a row it acts like I didn't call free as well.
[00:27:44] <ski> owensjrw : `map' should pass `context', not `&context', to `fun' and itself
[00:27:57] <sham1> Wait, we doing HOFs now?
[00:28:54] <ski> in your call to `map', `context' is `&avg', a pointer to `avg'. if you pass `&context', you'll effectively be passing a pointer to pointer to `avg' (and then next recursive call will be passing pointer to pointer to pointer to `avg', &c. .. oops !)
[00:29:10] <ski> sham1 : owensjrw have been doing it for a while, yea
[00:29:45] *** Quits: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net) (Read error: Connection reset by peer)
[00:29:51] *** Joins: korg815 (~korg815@user/korg815)
[00:30:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[00:30:42] <ski> oh, and the `fflush' should be before the `scanf', not after
[00:30:50] <ski> (otherwise, there's no point, really)
[00:32:03] <sham1> Why is stdout being flushed there anyway
[00:32:12] <sham1> Oh, for the prompt?
[00:32:21] <ski> (the idea is to flush the buffer, in case we're using line buffering, so that the request `Enter datapoint ...: ' is output *before* `scanf' is called, expecting / waiting for the corresponding input)
[00:32:25] <ski> yea
[00:32:29] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[00:32:32] *** Quits: alch (~alch@151.46.72.79) (Ping timeout: 272 seconds)
[00:33:48] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:10] *** Joins: alch (~alch@151.82.155.210)
[00:34:10] <owensjrw> Nailed it yep removing &context fixed it.
[00:34:17] *** Quits: marderIII (~MarderIII@86-88-74-111.fixed.kpn.net) (Quit: leaving)
[00:35:23] <owensjrw> You all rock, unfortunately I'm a half century young so I don't have much time to learn this as well as you all :-)... But I really enjoy this.. Thank yaw'll
[00:35:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:35:52] <ski> (btw, you could be using `map' to do the job of your `foldl' calls here)
[00:36:05] *** Joins: jiffe (~jiffe@47-220-182-140.gtwncmkt04.res.dyn.suddenlink.net)
[00:36:11] <ski> better late than never :)
[00:37:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[00:38:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Client Quit)
[00:38:19] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[00:39:05] *** Joins: Akiva (~Akiva@user/Akiva)
[00:39:30] *** Joins: soapsudsxx (~soapsudsx@209.221.40.152)
[00:40:28] <owensjrw> One last look.. What else do I need to do? https://bpa.st/JZZQ
[00:43:05] <ski> no need for `fflush' after `puts', since it already sends a trailing newline
[00:43:07] *** Joins: neo1 (~neo@103.144.161.8)
[00:43:21] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[00:43:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 250 seconds)
[00:45:05] *** Joins: neo1 (~neo@103.144.161.8)
[00:45:07] <ski> you could remove the redundant brackets (first call to `foldl'). and `for(...)' vs. `if ( ... )' looks a bit inconsistent. oh, and imho, `sizeof (float)' looks nicer (`sizeof' is not a function)
[00:45:09] *** Quits: neo1 (~neo@103.144.161.8) (Client Quit)
[00:45:37] *** Joins: epicout (~epicout@2a01:e0a:77:db70:978a:6e9:9495:cd9d)
[00:46:18] *** Joins: joshcryer (~josh@204.62.111.60)
[00:46:44] <ski> and perhaps `map' should not necessarily do update-in-place, rather being passed a destination pointer (which you could allocate in `main', or else just pass the same `data_list' anyway)
[00:47:31] *** Joins: KevinX (~KevinX@user/KevinX)
[00:48:53] * owensjrw shoulders down and knuckles dragging back to the drawing board
[00:49:10] *** Joins: neo1 (~neo@103.144.161.5)
[00:49:17] *** Quits: neo1 (~neo@103.144.161.5) (Client Quit)
[00:49:40] <ski> (if you're compiling with GCC, you should probably make sure `-foptimize-sibling-calls' is enabled, making sure that `foldl' and `map' gets compiled to tail-recursive (iterative) loops .. oh, and that won't work with your current `map'. if you do a worker-wrapper for it, it should work. or if you pass a destination pointer, but return nothing. or if you put `return' in front of the recursive call)
[00:50:15] <ski> (if you're using another implementation, it may have some equivalent option you could turn on)
[00:50:38] *** Joins: neo1 (~neo@103.144.161.8)
[00:53:10] <ski> (btw, if you prefer your `map' to do update-in-place, then that's fine. it's just that, usually, functions with that name do transform a collection to a new collection, by calling the provided callback on every element in the input collection, to produce the corresponding element of the output collection)
[00:53:42] <ski> (oh, and i guess i would again complain about the misleading name `deviation')
[00:54:21] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[00:55:35] <ski> hm, perhaps `i' should also be a `size_t' (and then `%i' should be `%zu')
[00:56:30] *** Quits: neo1 (~neo@103.144.161.8) (Quit: WeeChat 3.4)
[00:57:42] *** Quits: csileeeeeeeeeeoe (~csileeeee@50.232.121.75) (Remote host closed the connection)
[00:58:18] <owensjrw> be back soon...
[00:58:55] <ski> (oh, and i guess the `%zi' in `scanf' should also be `%zu' (`size_t' is unsigned))
[00:59:54] *** Joins: rgrinberg (~textual@177.244.18.30)
[01:01:03] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[01:08:06] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[01:09:04] *** Quits: mahmutov_ (~mahmutov@5.176.35.94) (Ping timeout: 250 seconds)
[01:10:25] *** Joins: dsrt^ (~dsrt@50.232.121.75)
[01:16:43] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:21:07] <owensjrw> Ok I think its ready to go to the market... Who is ready to hire me when I retire in a couple of years? https://bpa.st/QVHA
[01:22:25] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:24:20] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[01:26:49] *** Joins: mahmutov_ (~mahmutov@5.176.35.94)
[01:28:05] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[01:28:37] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.132)
[01:29:32] *** Quits: epicout (~epicout@2a01:e0a:77:db70:978a:6e9:9495:cd9d) (Changing host)
[01:29:32] *** Joins: epicout (~epicout@user/epicout)
[01:30:00] <ski> owensjrw : `map' is still not tail-recursive
[01:30:29] <owensjrw> What does tail-recursive mean?
[01:30:54] *** Quits: de-facto (~de-facto@user/de-facto) (K-Lined)
[01:31:07] <ski> that the function does nothing after the recursive call (apart from returning the result of the recursive call, as the result of the current call, in case the result type is not `void')
[01:31:14] <sham1> If you think of the assembly, it'd be something like `call func; ret`
[01:31:28] <ski> which can be optimized to `jmp func'
[01:31:33] <sham1> So yeah, as ski said, there are no expressions between the function call and the return
[01:31:42] <sham1> So it can be indeed optimized as such
[01:32:38] <ski> in your case, after calling `map' recursively, you still have to `return dst' (note that that recursive `map' call will return `dst' as well, hence my suggestion to prefix it with `return')
[01:32:50] *** jaeckel_ is now known as jaeckel
[01:32:53] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[01:33:11] <ski> (this would be the "or if you put `return' in front of the recursive call" alternative)
[01:33:16] *** Quits: jaeckel (~jaeckel@sleipnir.jaeckel.eu) (Changing host)
[01:33:16] *** Joins: jaeckel (~jaeckel@user/jaeckel)
[01:33:27] <sham1> The C abstract machine doesn't understand tail recursion, although many implementations like GCC and Clang do
[01:34:05] <sham1> Although although there was/is a proposal for a "return goto" dealio that could be used for that. I'm personally not a fan but oh well
[01:34:12] <sham1> I'd rather it just be a return
[01:34:12] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 250 seconds)
[01:34:34] <ski> if you're going to do iterative processes like `foldl' and `map' recursively, it's best to ensure that they use tail-recusion (assuming your implementation can do that)
[01:35:01] <sham1> Ah yes: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n2920.pdf
[01:35:19] *** Quits: Akuli (~Akuli@82-203-162-94.bb.dnainternet.fi) (Quit: Akuli)
[01:36:34] *** Joins: danisanti (~daniel@user/danisanti)
[01:36:52] <owensjrw> are you suggesting return size == 0 ? dst : map(dst + 1, src + 1, size - 1, context, fun);
[01:37:25] <ski> (alternatively, you could simply loop via `for', like fizzie suggested earlier)
[01:37:50] <ski> owensjrw : well, that's one way to do it, sure
[01:38:28] <owensjrw> Yes all this would have been easier with for loops. There is an exercise that goes over list operations to include map and fold, I found it interesting so I tried to implement it.
[01:39:07] <ski> (`if (size != 0) { *dst = ...; return map(...); } return dst;' or `if (size == 0) return dst; else { *dst = ...; return map(...); }' would also have worked)
[01:39:53] <ski> oh, actually ..
[01:40:18] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[01:40:35] <ski> right, because your'd adjusting `dst' in your recursive calls, this won't actually work (you'll return a pointer to the end of the array, not to the start)
[01:41:17] <Waynes> Recursion should probably not be used in C unless you are working with objects of fixed or extremely limited size (e.g. binary trees) to avoid stack overflows. Banking on the compiler to optimize tail recursion is living dangerously.
[01:41:21] <ski> which means that you have to "do a worker-wrapper for it", anyway
[01:42:08] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[01:42:21] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:42:21] <ski> iow, let your `map' (the wrapper) call `map_helper' (the worker), and then `return dst;'. `map_helper' itself will have `void' as return type
[01:43:47] *** Quits: magla (~gelignite@55d47190.access.ecotel.net) (Quit: Stay safe!)
[01:44:07] <tusko> Does anything jump out at you as clearly wrong about this: https://bpa.st/EKKA
[01:44:07] *** Quits: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com) (Read error: Connection reset by peer)
[01:44:21] <ski> Waynes : as long as the recursion depth is say logarithmic in the size (as with balanced trees, or with stuff like `bsearch'), you should be fine
[01:44:23] <owensjrw> just add return to the map call in map?
[01:44:26] <sham1> Waynes: while that is a valid concern, it does seem that most implementations actually used do support tail call optimization. Especially with LTO
[01:44:43] <tusko> valgrind complains a lot about the printf("...", *hostname) but if I just lose that print it seems to work fine
[01:45:08] <ski> owensjrw : no, since that propagates the `dst' from the last / innermost recursive call, which points to the end
[01:45:52] <ski> (if you had passed an index, that was incremented, to the recursive call, rather than adjusting the start pointer, this wouldn't've been an issue)
[01:46:12] <ski> (but, passing an index would presumably also be done via worker-wrapper ..)
[01:46:47] <Waynes> sham1: technically speaking, there might be valid reasons for tail calls https://blog.reverberate.org/2021/04/21/musttail-efficient-interpreters.html but I don't trust compilers enough for that
[01:46:48] <candide> Title of Waynes's link: Parsing Protobuf at 2+GB/s: How I Learned To Love Tail Calls in C
[01:47:49] <Waynes> tusko: does valgrind still complain if you make this into a self-contained executable?
[01:48:33] *** Joins: myon98 (~myon98@user/myon98)
[01:49:02] <Waynes> tusko: You might also get lucky and find the issue with the AddressSanitizer. You can activate it like `gcc -g -fsanitize=address -fsanitize=undefined main.c`
[01:49:05] <ski> tusko : what's the type of `q->buff' ?
[01:49:15] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[01:49:59] <sham1> I personally tend to find that tail-calls make many things quite nice in expressiveness. I mean, they're basically gotos which can take values and produce them
[01:50:10] <ski> also, it looks like you can factor out the end of the `if' body
[01:50:30] <sham1> Things like state machines are so nice with tail-calls
[01:51:56] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[01:53:31] * ski . o O ( "The Swine Before Perl" (talk/presentation) by Shriram Krishnamurthi in 2001-11 at <https://cs.brown.edu/~sk/Publications/Talks/SwineBeforePerl/> mentions using tail-calls to implement state machines )
[01:53:32] <candide> Title of ski's link: Shriram Krishnamurthi: Talk: Swine Before Perl
[01:55:18] *** Joins: kedamono (~kedamono@2600:1016:a001:dd98:2486:1042:f936:990b)
[01:55:45] *** Parts: kedamono (~kedamono@2600:1016:a001:dd98:2486:1042:f936:990b) ()
[01:56:14] *** Joins: namkeleser (~namkelese@101.175.104.107)
[01:57:42] <nitrix> ski, I wonder what tail calls translates to in Prolog.
[01:58:22] <nitrix> ski, I'm assuming the choice points more or less serve that purpose but I wonder if you'd want them to be eliminated or not.
[02:00:02] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[02:01:12] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.132) (Ping timeout: 272 seconds)
[02:03:48] *** Joins: VoidSync (~sync@user/voidsync)
[02:04:39] <tusko> @ski, q->buff is a char **buff[SIZE];
[02:04:51] <tusko> Waynes, gonna give that option a run
[02:06:40] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.133)
[02:07:57] *** ndorf_ is now known as ndorf
[02:10:27] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:11:17] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[02:12:20] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[02:13:35] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:15:38] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[02:19:28] <owensjrw> My last run then off to do something else today.. https://bpa.st/KCZA
[02:19:30] <ski> nitrix : you only get Last Call Optimization (LCO), in case there's no new (remaining) choice-points, since the present call to the current predicate
[02:19:32] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:20:16] <ski> (it's called "LCO", rather than "TCO", since logic programming independently figured out this was a useful thing)
[02:21:12] *** Parts: danisanti (~daniel@user/danisanti) (Konversation terminated!)
[02:22:35] <ski> owensjrw : you still need to make sure to return the correct `dst'
[02:23:01] <owensjrw> dst[0] ??
[02:23:08] *** Joins: korg815 (~korg815@user/korg815)
[02:23:35] <ski> if you had `return size == 0 ? dst : map(...) - 1;', then it would give the correct result -- but since that `... - 1' happens after that recursive call to `map', that means that that's not a tail-call
[02:24:25] <ski>   float *map(...) { map_aux(dst,src,size,context,fun); return dst; }
[02:25:22] <ski>   void map_aux(float *dst,float *src,size_t size,void *context,float (*fun)(float,void *)) { /* as your previous `map' body, except no `return's */ }
[02:26:50] <ski> so, only the top call (to `map') returns `dst' (which is the original one, not having been incremented as your current `map' does). `map_aux' increments its `dst' parameter (and also `src'), but doesn't return it
[02:28:15] *** Joins: hiroshi_ (~freedom@151.35.240.191)
[02:29:21] <ski> owensjrw : `dst[0]' is equivalent to `*(dst + 0)', which is equivalent to `*dst'. if you meant `&dst[0]', then that then becomes equivalent to `&*dst', or just `dst' .. so, no change
[02:30:23] <owensjrw> Ill give it one more crack, thanks my friends.
[02:31:00] <ski> (assuming `dst' is a pointer. if `dst' is an array, then in `dst[0]' it will first implicitly be converted to a pointer. while a plain `dst' in some cases (like `sizeof',`&') won't be implicitly converteD)
[02:31:18] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[02:31:48] <ski> owensjrw : do you understand why subtracting one from the recursive call would give the correct pointer as result (while defeating tail-recursion) ?
[02:32:36] *** Quits: pizdets (~pizdets@183.182.115.101) (Ping timeout: 240 seconds)
[02:33:18] *** Quits: nf (~n@monade.li) (Read error: Connection reset by peer)
[02:33:21] *** Quits: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt) (Quit: Leaving)
[02:33:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[02:34:13] *** Joins: pizdets (~pizdets@183.182.110.171)
[02:34:19] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[02:34:27] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:34:28] *** Quits: oriba (~oriba@dynamic-089-014-025-098.89.14.pool.telefonica.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:34:30] *** Joins: nf (~n@monade.li)
[02:35:01] <owensjrw> Not if it has been increased more than once.
[02:35:09] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[02:35:34] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:37:31] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Remote host closed the connection)
[02:38:34] *** Quits: cryptonector (~nico@24.28.108.183) (Ping timeout: 272 seconds)
[02:38:54] *** Joins: cryptonector (~nico@24.28.108.183)
[02:39:25] *** Joins: bindu_ (~bindu@user/bindu)
[02:39:26] *** Joins: eddof13 (~eddof13@192.154.196.148)
[02:39:52] *** Quits: Waynes (~Waynes@user/waynes) (Quit: Leaving.)
[02:39:54] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[02:39:55] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 240 seconds)
[02:39:56] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[02:40:21] *** Quits: trn (jhj@sourcehut/user/trn) (Ping timeout: 245 seconds)
[02:40:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[02:41:22] *** bindu_ is now known as bindu
[02:41:31] *** Joins: trn (jhj@sourcehut/user/trn)
[02:42:00] *** Quits: eddof13 (~eddof13@192.154.196.148) (Client Quit)
[02:43:03] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[02:43:21] <fizzie> owensjrw: But there's more than one -1 involved as well. For each recursive +1, there's exactly one corresponding -1.
[02:44:28] <owensjrw> keeps canceling out, would it traverse the arrays?
[02:46:07] <ski> it would traverse forward on the recursive calling, and traverse backwards on the returns from the recursion
[02:46:14] <fizzie> Personally I'd just not return anything from map, since returning the destination is only of very limited use. The calling function already *has* that -- it's the value it gave as the argument.
[02:46:22] <fizzie> (Yes, you can use it for function chaining a little, but still.)
[02:47:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:47:11] <ski> yea, it's not like owensjrw was actually using the return result from the initial call to `map', in `main'
[02:48:21] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:48:44] <owensjrw> I created the map_helper and made if void but it still requested a return is it because the *map_helper?
[02:48:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[02:49:43] <ski> huh ?
[02:49:59] <fizzie> If you mean you made it `void *map_helper(...)`, that's a function returning `void *`.
[02:50:36] *** Quits: mahmutov_ (~mahmutov@5.176.35.94) (Ping timeout: 272 seconds)
[02:51:00] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[02:51:42] <owensjrw> Oh no now seg faults ...... yikes
[02:53:25] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[02:54:35] *** Joins: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[02:54:36] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[02:59:19] *** Quits: hiroshi_ (~freedom@151.35.240.191) (Quit: hiroshi_)
[03:00:01] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:00:16] *** Joins: System_Error (~SystemErr@user/systemerror)
[03:00:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:07:02] <owensjrw> Last one (ok maybe) https://bpa.st/LPRA
[03:08:11] *** Quits: hashfuncadb (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Remote host closed the connection)
[03:09:03] <ski> owensjrw : looks ok, to me
[03:09:05] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[03:09:23] <ski> (although i'd prefer it if `foldl' also took a `void *context')
[03:09:51] <owensjrw> I was just thinking that since *src is already there.
[03:09:54] <ski> (not that you need to use in, in this case, but it's a good habit)
[03:11:06] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[03:11:30] <owensjrw> I was just relooking at that.. Can I use void I am assigning avg to the float value of the function?
[03:11:31] <fizzie> A "generic" foldl also allows the accumulator to be a different type than the list items. But that too is less convenient to accomplish in C.
[03:11:32] <ski> (if you want to, you could also figure out how to the job of your two `foldl' calls, with two (more) `map' calls, instead)
[03:11:41] <ski> yea
[03:13:21] <ski> owensjrw : for your `add', if you added a `void *context' parameter to it (to conform with the changed interface of `foldl'), you'd ignore that parameter in the body of `add'
[03:13:39] <owensjrw> What do you mean? nest foldl in map?
[03:13:52] <ski> no, that was a separate exercise
[03:14:14] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::ef3c) (Quit: Konversation terminated!)
[03:15:28] <ski> (calling `map' (twice (thrice, in all)) instead of your two `foldl' calls was a separate exercise to the suggestion to add `void *context' to `foldl')
[03:17:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[03:22:01] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[03:22:15] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[03:22:57] *** Quits: kurahaupo (~kurahaupo@pa49-197-172-99.pa.qld.optusnet.com.au) (Ping timeout: 252 seconds)
[03:23:20] *** Joins: System_Error (~SystemErr@user/systemerror)
[03:24:04] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[03:26:37] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 240 seconds)
[03:26:49] *** lukedashjr is now known as luke-jr
[03:29:51] *** Joins: vicfred (~vicfred@user/vicfred)
[03:30:17] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:42] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:35:55] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:36:10] <owensjrw> Thank you all for the day.. It was awesome. Have a great evening..
[03:36:27] <ski> yw
[03:36:51] *** Quits: owensjrw (~owensjrw1@2600:1700:b5b0:6380::41) (Quit: Leaving)
[03:37:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:38:03] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 256 seconds)
[03:38:34] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 250 seconds)
[03:39:52] *** Joins: Wulf (~Wulf@user/wulf)
[03:40:23] *** Joins: seninha (~chatzilla@user/seninha)
[03:41:15] *** Joins: constxd_ (~brad@142.134.78.128)
[03:41:19] <constxd_> kings
[03:43:58] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[03:45:00] *** Quits: constxd (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[03:45:49] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[03:46:08] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:48:00] *** Joins: KevinX (~KevinX@user/KevinX)
[03:48:26] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[03:49:54] *** Quits: orestarod (~orestarod@2a02:2149:8b20:700:2b9d:7f86:7169:61c0) (Ping timeout: 252 seconds)
[03:50:57] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[03:51:02] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[03:53:55] *** Quits: namkeleser (~namkelese@101.175.104.107) (Ping timeout: 256 seconds)
[03:54:48] <tusko> I tried running with -sanitize=address and -sanitize=undefined no dice. Actually valgrind just crashed right away
[03:54:49] *** Quits: VoidSync (~sync@user/voidsync) (Quit: Leaving)
[03:54:55] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:55:15] <constxd_> tusko: what are u trying to debug king
[03:55:15] <tusko> If I comment out the printf (seen in this code snippet: https://bpa.st/EKKA) then the code seems to run ok mostly
[03:55:46] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:55:57] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[03:56:06] <tusko> I built a shared, circular queue. Then I set loose 10k producers and 10k consumers on it to make sure it's thread safe.
[03:56:16] <tusko> This is my consume function https://bpa.st/EKKA
[03:56:46] <tusko> I get a lot of errors about that printf("\nConsumed%s\n", *hostname); call
[03:57:03] <tusko> if I comment it out, 20k producers and consumers just congreate no probelms
[03:58:01] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[03:58:13] <constxd_> well
[03:58:22] <tusko> help me king
[03:59:30] <constxd_> seems a bit odd that you test `hostname != 0` and then immediately assign to `hostname`
[03:59:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[03:59:35] *** Quits: lleo (~lleo@89-200-46-213.mobile.kpn.net) (Ping timeout: 256 seconds)
[03:59:57] *** Quits: joshcryer (~josh@204.62.111.60) (Quit: Leaving)
[04:00:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[04:02:37] *** Joins: oriba (~oriba@dynamic-089-014-025-098.89.14.pool.telefonica.de)
[04:04:29] *** Quits: oriba (~oriba@dynamic-089-014-025-098.89.14.pool.telefonica.de) (Client Quit)
[04:04:33] <constxd_> tusko: wouldn't u agree
[04:05:01] <tusko> hm
[04:06:11] <tusko> I am trying to test that the user passed a valid pointer, and then populate that memory address with the value of q->buff[q->tail]
[04:06:39] <tusko> I expect that if(hostname) would return false if hostname were a nullptr
[04:06:48] <constxd_> ok well
[04:07:12] <constxd_> if (q && hostname) might as well be if (hostname) because if q is a null pointer it's too late -- you already have undefined behavior above
[04:07:33] <tusko> oh true
[04:07:36] <tusko> good call
[04:08:05] <constxd_> if (hostname) then you want to use hostname as a means of returning a value to the caller? you should be modify the object it points to then
[04:08:15] <constxd_> s/should be/should/
[04:08:28] <constxd_> i.e., line 7 should read `*hostname = ...`
[04:08:42] <tusko> ohhh, so that's like *hostname
[04:08:43] <tusko> yeah
[04:08:44] <tusko> ok
[04:11:03] <tusko> I think this is it
[04:11:38] <constxd_> W
[04:11:54] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Ping timeout: 252 seconds)
[04:12:19] *** Joins: Soni (~quassel@autistic.space)
[04:12:42] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:14:19] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Client Quit)
[04:15:03] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[04:16:32] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[04:17:09] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[04:17:26] <tusko> thank you constxd_
[04:17:38] <constxd_> ofc king
[04:17:51] <tusko> This seems to work, but every now and then it throws some strange value from that pointer
[04:20:14] <tusko> I think that might be just me reading random values
[04:23:12] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.133) (Ping timeout: 250 seconds)
[04:23:22] *** Joins: RETRO (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[04:23:50] <constxd_> can u post the whole program
[04:23:59] *** Quits: LuKaRo (~LuKaRo@p200300dfa712f140429be276a75d0242.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[04:24:03] *** Joins: LuKaRo_ (~LuKaRo@p57b157e5.dip0.t-ipconnect.de)
[04:25:08] <tusko> I can, give me just a couple mins to get it together for ya
[04:29:28] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[04:30:17] *** Quits: alch (~alch@151.82.155.210) (Read error: Connection reset by peer)
[04:30:23] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[04:32:09] *** Joins: pnbeast (~pnbeast@2601:140:4280:3800::1)
[04:32:13] *** Quits: korg815 (~korg815@user/korg815) (Ping timeout: 256 seconds)
[04:33:56] <tusko> array.h: https://bpa.st/2YEQ  array.c: https://bpa.st/AUCQ  test.c: https://bpa.st/HVFQ
[04:34:04] <tusko> sorry for the delay constxd_
[04:34:21] *** Joins: korg815 (~korg815@user/korg815)
[04:34:32] *** Joins: alch (~alch@bo-18-131-249.service.infuturo.it)
[04:34:43] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[04:35:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[04:36:19] <tusko> Valgrind says my error is in array_get() in array.c on Line 69. But I suspect it may also have to do with array_put() in array.c on Line 47
[04:36:41] <tusko> Every now and then I get some junk value. The test program runs 20k times though which is overkill ofc
[04:36:44] <tusko> just for testing
[04:39:37] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[04:41:24] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0d13-db80-1316-2ed6.res6.spectrum.com) (Remote host closed the connection)
[04:41:32] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[04:42:55] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:43:52] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Client Quit)
[04:43:58] *** Parts: RETRO (~RETRO@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) ()
[04:49:00] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:52:04] *** Quits: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:58:19] *** Joins: pulse (~pulse@user/pulse)
[05:01:15] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[05:05:59] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[05:06:12] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[05:07:40] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[05:13:42] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[05:16:32] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:16:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:16:33] *** Joins: wroathe (~wroathe@user/wroathe)
[05:22:45] <caze> What is buff used for?
[05:23:00] *** Quits: dsrt^ (~dsrt@50.232.121.75) (Ping timeout: 250 seconds)
[05:23:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[05:23:59] <tusko> it is char ** it holds hostnames
[05:24:12] <caze> q->buff[q->head] = &hostname;
[05:24:14] <caze> What does that do?
[05:25:34] <tusko> That copies the address of hostname ptr to the ptr at buff[q->head]
[05:26:21] <tusko> I gather that I may need to do strcpy() there, but that opened a huge can of worms
[05:26:33] <tusko> Things got messy for me real fast
[05:26:37] <caze> No, but what happens when the function returns?
[05:26:57] <tusko> ohhh
[05:27:03] <tusko> hostname is deallocated
[05:27:07] <tusko> or maybe it changes
[05:27:33] <caze> Automatic variables die when their scope ends.
[05:27:47] <tusko> Let's see, hostname is a pointer, it points at a string, it was passed by reference, and so presumably yeah it dies eventually
[05:28:07] <tusko> SO I need to copy that string
[05:28:23] <caze> hostname is a variable that is local to array_put.
[05:28:46] <caze> Why?
[05:28:57] <tusko> that makes sense. I think I was confused by it being a pointer
[05:29:30] <tusko> well, I can't be sure. Could I just copy the address? what if the string changes or gets deallocated somehwere
[05:32:37] <caze> CAn't you just do q->buff[q->head] = hostname; ?
[05:33:04] <tusko> I did something similiar
[05:33:14] <tusko> *q->buff[q->head] = hostname
[05:33:18] <caze> YOu have too many * imo.
[05:33:42] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[05:33:58] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[05:34:08] <tusko> So without that * it tells me incompatible pointer types, assigning to char** from char* use & to take the address
[05:34:14] <tusko> that's what the debugger throws
[05:34:25] <tusko> probably how I got the & in the first place
[05:34:25] <caze> Why do you have a char **?
[05:34:32] <tusko> buf iss a char**
[05:34:38] <tusko> its an array of strings
[05:34:43] <caze> No it's not.
[05:34:53] <tusko> it isn't
[05:34:58] <caze> It's a char **[]
[05:35:10] <tusko> oh that is a fact
[05:35:13] <caze> So effectively, it's a char ***.
[05:35:18] <caze> ,threestar
[05:35:18] <candide> 3star is http://c2.com/cgi/wiki?ThreeStarProgrammer
[05:35:24] <tusko> oh wow
[05:35:47] <tusko> so then I should say it is a *char[] now
[05:35:53] <caze> ALmost.
[05:37:00] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 240 seconds)
[05:37:54] *** Joins: frost (~frost@user/frost)
[05:38:32] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:38:59] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[05:41:33] <tusko> ah I should probably make it a char** huh
[05:41:36] <tusko> duh
[05:42:07] <tusko> it would make too much sense
[05:46:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[05:51:20] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[05:52:54] <tusko> Is this the correct way to initialize q->buff then?
[05:52:55] <tusko>   q->head = 0;
[05:52:55] <tusko>   q->tail = 0;
[05:52:55] <tusko>   
[05:52:58] <tusko> ugh
[05:52:59] *** ChanServ sets mode: +o candide
[05:53:00] *** candide sets mode: +b *!~yeurt@user/tusko
[05:54:18] *** candide sets mode: -b *!~yeurt@user/tusko
[05:54:33] *** Joins: ferdna (~ferdna@user/ferdna)
[05:54:53] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:54:53] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:54:53] *** Joins: wroathe (~wroathe@user/wroathe)
[05:54:53] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[05:55:05] *** Joins: wroathe (~wroathe@user/wroathe)
[05:56:27] <caze> What are the head and tail for?
[05:56:30] <tusko> Please forgive my ignorance
[05:57:02] <tusko> This is the data structure and how I am initializing it. https://bpa.st/4KXA
[05:57:05] <caze> In your original version, you just have an array, so it's not clear to me, given that context, what head and tail are for.
[05:57:23] <tusko> head and tail are integers that track the index in a circular buffer
[05:59:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:59:47] <caze> Can the buffer grow?
[06:00:05] <tusko> caze, this is the whole shared buffer object. It's probably easier than passing functions
[06:00:07] <tusko> https://bpa.st/VALA
[06:00:09] *** Joins: dignissimus (~dignissim@79-70-31-37.dynamic.dsl.as9105.com)
[06:00:19] <tusko> It is guarded by two semaphores and protected by a mutex
[06:00:42] <tusko> so if its full (or empty) threads wait to fill or empty it
[06:02:12] <dignissimus> For swapping rows in a 2d array, could I just swap them as variables? tmp = array[0]; array[0] = array[1]; array[1] = temp; for example
[06:02:47] <caze> dignissimus: It depends on how you've simulated a 2d array.
[06:02:59] <caze> (C only has one dimensional arrays)
[06:03:01] <dignissimus> caze: char** for example
[06:03:30] <dignissimus> My reasoning is that I'm just changing the pointers
[06:03:44] <caze> Yes, you can assign pointers.
[06:03:46] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 272 seconds)
[06:04:00] <dignissimus> And the above works to swap rows?
[06:04:15] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[06:04:33] <caze> If you had simulated the 2D array as int array[2][2]; then it wouldn't work, because C doesn't allow you to assign arrays.
[06:06:29] <dignissimus> Oh I see, thank you!
[06:07:00] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[06:08:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:09:17] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[06:11:22] <tusko> I swear to god caze constxd_ Wayne ski all of you are ice cold
[06:13:04] *** Joins: Inline__ (~Inline@p200300cd47082500eff0453775466c26.dip0.t-ipconnect.de)
[06:15:11] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:15:26] *** Quits: Inline (~Inline@p200300cd473ac50039f51e8a2d5e1728.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:17:24] * ski rather sleepy
[06:17:43] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Remote host closed the connection)
[06:18:05] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[06:21:20] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[06:21:49] *** Joins: kts (~kts@103.73.237.194)
[06:21:51] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com)
[06:22:06] <ski> are you sure you should call `array_free' (calling `sem_destroy') before you've called `sem_init' in `array_init' ?
[06:22:48] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com) (Remote host closed the connection)
[06:22:55] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[06:23:08] <tusko> I don't call free in array_init I don't believe
[06:23:30] <ski> you call `array_free', at least in <https://bpa.st/AUCQ>
[06:23:30] <tusko> although I do have a problem with free. I think I'm freeing the char** incorrectly
[06:23:50] <tusko> oh true story
[06:23:59] *** Joins: zer0x (~zer0x@1.55.210.143)
[06:24:15] <tusko> that's if the mutex or semaphore fail to init. I've switched that function up a bit
[06:24:25] <ski> oh, and `&hostname' in `array_put' is probably not a good idea .. but perhaps you've already fixed this ?
[06:24:45] <tusko> I did :)
[06:25:04] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:25:38] <tusko> actually I think I'll remove those free() calls as well
[06:25:49] <tusko> you're right, it isn't initialized at that point
[06:26:10] <ski> hm, i didn't see any `free' calls, so far
[06:26:19] <tusko> https://bpa.st/P3FQ
[06:26:41] <tusko> this actually complains that I'm not using free() correctly to destroy the char**
[06:27:01] <ski> why does it say "Lost the queue or data." rather than "Lost the data." ?
[06:27:45] <tusko> no reason, just my own inexperience
[06:28:51] <tusko> It used to check if(q && hostname) but the mutex lock is already undefined if q is lost
[06:29:13] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[06:32:04] <ski> in <https://bpa.st/HVFQ>, probably better to compute the number of elements in the array, rather than sprinkle magic numbers like `11' and `12' over the code
[06:33:22] <ski> (and i dunno why you're using `12' (rather than `11') .. if you were intending to randomly select a host from your array, you're selecting the random index wrong)
[06:34:12] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[06:34:21] <ski> (oh, and presumably `25' should be a `#define' or maybe a part of what `a' points to, or something)
[06:36:14] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 250 seconds)
[06:36:21] <ski> (and did you intend to interleave the `pthread_join'ing with the `pthread_create'ing ? rather than do all the latter first, before all the former ?)
[06:36:23] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:37:34] *** Quits: katsuragi (katsuragi@tilde.institute) (Ping timeout: 260 seconds)
[06:37:49] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[06:38:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[06:39:04] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[06:39:55] *** Quits: lwhjp (~user@softbank126150065004.bbtec.net) (Remote host closed the connection)
[06:40:32] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Quit: Quit)
[06:40:39] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Remote host closed the connection)
[06:42:08] <ski> hm, you replaced `char **buff[SIZE]' by `char **buff' in <https://bpa.st/4KXA>, but you've kept `#define SIZE 8'. are all `array's supposed to have `SIZE' as capacity ?
[06:42:30] <ski> (also, you no longer `#include "array.h"', why ?)
[06:43:48] <ski> and you probably shouldn't cast the result of calling `calloc'
[06:44:12] <ski> (do you even want to `calloc' at all, in `reset' ?)
[06:46:47] <ski> (oh, and i forgot to ask before : why does `array_init',`reset' return `int's ? and did you intend for `array_init' to call `exit' on trouble, while `array_put' and `array_get' does `return -1;' ?)
[06:49:16] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[06:49:45] *** Quits: kts (~kts@103.73.237.194) (Ping timeout: 252 seconds)
[06:51:07] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[06:52:02] <ski> tusko : right, you're doing `q->buff[q->head] = hostname;' in `array_put' (and `*hostname = q->buff[q->tail];' in `array_get'), so you're not actually using the memory you `calloc'ed ! instead you're throwing away the pointer to the memory, in `array_put', replacing it with the `hostname' that was passed. then later `array_get' retrieves that back (but does not clear or otherwise change that element of `q->buff').
[06:52:08] <ski> and so, eventually, `array_free' will attempt to call `free' on pointers that you've passed via `hostname' !
[06:52:13] <tusko> these are all great questions. I hadn't really thought to make a bunch of #defines
[06:52:50] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[06:52:50] <ski> oh, and you've in fact not allocated a pointer for `buff' either !
[06:53:32] <ski> you want memory capable of storing `q->size' `char *'s, putting a pointer to that in `buff'
[06:54:35] *** Quits: noteness (~noteness@user/noteness) (Ping timeout: 240 seconds)
[06:54:45] <ski> ok, i see in your last paste, <https://bpa.st/P3FQ> (which i only got to right now), you did `free' `q->buff'
[06:55:04] <ski> did you also allocate it, in `reset' ?
[06:56:35] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Ping timeout: 240 seconds)
[06:56:37] <ski> in any case, i don't think you should allocate the `q->buff[i]'s, for `i' inbetween `0' and `q->size'. you just need space for `q->size' `char *'s. the actual `char *'s (`hostname') will be provided as parameter to `array_put', is the responsibility of the caller of that to provide storage for
[06:57:15] *** Quits: mrus (~mrus@gateway/tor-sasl/mrus) (Ping timeout: 240 seconds)
[06:57:36] <tusko> ski: https://bpa.st/Q2OA
[06:57:55] *** Quits: phaise (~phaise@gateway/tor-sasl/phaise) (Ping timeout: 240 seconds)
[06:58:10] <tusko> I went through and made most of the changes you suggested as well as some other suggested. I included more macros, so I can change one value and still have sane testing.
[06:58:15] <ski> hm, i'm also wondering why you `#define' `CIRC_QUEUE_H', but it seems the name of your header file is not `circ_queue.h', but `array.h' (and perhaps `array' should be called `circ_queue', and `array_init' be called `circ_queue_init', and so on .. ?)
[06:58:32] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[06:58:35] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 240 seconds)
[06:58:55] <tusko> I now allocate q->buff as a char** and then initialize q->size char* inside of it
[06:59:11] <ski> i'm also wondering why <https://bpa.st/VALA> does the `#ifndef CIRC_QUEUE_H' and `#define CIRC_QUEUE_H' dance, while it contains *definitions* of functions ?!
[06:59:15] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[06:59:42] <tusko> The only issue I seem to have is that array_free() complains in Valgrind about invalid free() delete() etc
[06:59:58] <tusko> Apparently I'm freeing it wrong
[07:00:16] <tusko> But I tried to loop through each pointer and free it, then free the char**
[07:00:40] <tusko> I switched it up a bit, and allocated at the end of array_init()
[07:00:54] <tusko> reset() kind of seems like a pointless function to me now
[07:01:08] <tusko> I only thought it might be nice to have a function that sets values back to initial
[07:02:03] <ski> (perhaps, in `array_init', you should call `pthread_mutex_destroy' on `&q->lock', in case the semaphore initialization failed .. or perhaps it's no bother, since you're doing `exit', anyway)
[07:02:15] *** Quits: wand (~user@gateway/tor-sasl/wand) (Ping timeout: 240 seconds)
[07:02:28] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[07:03:07] <ski> hmm .. i wonder if `isEmpty',`isFull',`size' shouldn't also use the mutex, for safety
[07:03:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:05:03] <tusko> wouldn't that require me to change the interface to take in a buffer?
[07:05:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:06:03] <tusko> Yeah, I'm constrained by the application to call it those things. Once I am done with this project I will change it to circ_queue, which it is
[07:06:33] <tusko> the whole idea was to have a circular buffer, but I was asked to call it array.h/.c
[07:06:42] <tusko> I was just including all the files as one paste for  convenience
[07:07:01] <tusko> there are headers <array.h> array.c> <test.c> just to block off the different files
[07:07:11] <ski> better than `sizeof(.some type.)' in `calloc' (or `malloc' or `realloc'), is to use `sizeof *pointer'. in your case, `sizeof *q->buff' and `sizeof *q->buff[i]' (btw, `sizeof(char)' is `1', anyway). and, if you're using `calloc', you could already make use of the count argument, so `calloc(MAX_NAME_LENGTH,sizeof ...)' rather than `calloc(1,sizeof ... * MAX_NAME_LENGTH)' ..
[07:07:41] <ski> .. however, as i mentioned above, i don't think you should allocate memory for `q->buff[i]' in `array_init' anyway, to begin with
[07:07:45] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[07:08:00] *** Joins: tejr (~tejr@user/tejr)
[07:09:25] <tusko> yeah, that was my aim with calling array_free() ofc I didn't realize I hadn't yet init'd the buffer
[07:09:52] <tusko> I considered dropping those state functions entirely
[07:10:00] *** Joins: shadow3d (~shadow3d@119.123.134.157)
[07:10:00] <tusko> Since the semaphore tracks these boundaries
[07:12:02] *** Joins: kts (~kts@103.73.237.194)
[07:12:24] <ski> "reset() kind of seems like a pointless function to me now" -- yea, i'm not sure why you have both that, and `array_init'
[07:12:55] *** Quits: tejr (~tejr@user/tejr) (Ping timeout: 240 seconds)
[07:12:57] <ski> "wouldn't that require me to change the interface to take in a buffer?" -- sorry, which ?
[07:13:21] <ski> "the whole idea was to have a circular buffer, but I was asked to call it array.h/.c" -- mhm, ok
[07:13:47] *** Quits: gxt_ (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[07:13:59] <tusko> I'm trying to understand that. I guess I understand that it is commonplace for the user of my library to present me with a preallocated buffer
[07:14:29] <tusko> But in this case I allocate the buffer in the init function to be a fixed size
[07:15:01] <ski> "I now allocate q->buff as a char** and then initialize q->size char* inside of it" -- as i've mentioned several times, i don't think you should allocate (and later `free') the `char *'s for `q->buff[i]', for the `i's. you should just allocate `buff' to the chosen capacity (which i guess is `SIZE' ? or it could be a parameter to `array_init', possibly)
[07:15:46] <tusko> q->buff[i] = calloc(MAX_NAME_LENGTH, 1); looks a lot better I agree
[07:15:46] <ski> (i suppose it would also be possible for the user to pass in the `buff' to use, to `array_init' ..)
[07:16:02] *** Quits: kts (~kts@103.73.237.194) (Read error: Connection reset by peer)
[07:16:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[07:16:29] <ski> better use `sizeof *q->buff[i]' rather than `1' (in case you adapt the code to use `T **buff' for some other `T' than `char')
[07:16:34] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: Lost terminal)
[07:16:51] <ski> (but again, i'm arguing that you shouldn't allocate memory for the `q->buff[i]'s anywya)
[07:17:03] <tusko> I think I'll drop it
[07:17:54] <ski> "it is commonplace for the user of my library to present me with a preallocated buffer" -- that is a separate issue. you may allocate `q->buff' in `array_init', or you could perhaps delegate that responsibility to your caller. in any case, i think you should not allocate `q->buff[i]'
[07:18:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[07:18:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[07:18:16] *** Joins: wroathe (~wroathe@user/wroathe)
[07:18:24] <ski> "But in this case I allocate the buffer in the init function to be a fixed size" -- yea, which might be reasonable
[07:19:07] <ski> but allocating memory for `q->buff[i]', and then throwing away the pointers to those pieces of memory, and later `free'ing the wrong pointers, certainly can't be right
[07:19:33] <tusko> So, I was asked to provide a shared buffer that initializes itself to hold some limited number of strings. So, I am thinking you mean array_init(array *q) such that q is already an array the user created and the memory has been allocated already
[07:19:47] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[07:19:54] *** Joins: wand (~user@gateway/tor-sasl/wand)
[07:19:58] *** Joins: mrus (~mrus@gateway/tor-sasl/mrus)
[07:19:59] *** Joins: noteness (~noteness@user/noteness)
[07:20:21] <ski> ah .. that is also a separate issue
[07:20:28] <ski> (and doing that is fine)
[07:20:35] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[07:21:13] *** Joins: joomla9 (uid543104@id-543104.lymington.irccloud.com)
[07:21:39] <ski> there are three things that need to have storage here. (a) the `array' itself. your `main' allocates this, with automatic storage duration, and passes a pointer to that to `array_init' (which just accepts it, doesn't need to allocate any `array')
[07:21:49] <tusko> Ok, I dropped the allocation of each char* and just have now  q->buff = calloc(q->size, sizeof(char*));
[07:22:22] <ski> (b) `array_init' then allocates `array->buff'/`q->buff', an array of `char *' pointers (still uninitialized)
[07:22:32] *** Joins: gxt_ (~gxt@gateway/tor-sasl/gxt)
[07:23:06] <ski> then (c) you currently also allocate pieces of memory to initialize those `char *' pointers (the `q->buff[i]', for all the `i's) to point to those pieces of memory
[07:23:44] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[07:23:47] *** Joins: phaise (~phaise@gateway/tor-sasl/phaise)
[07:24:34] *** Joins: tejr (~tejr@user/tejr)
[07:24:41] <ski> while i'm saying you don't want to do this (c) part. since `array_put' already is supposed to get a pointer (`char *') `hostname' to allocated storage (which is the responsibility of the caller of `array_put' to allocate. in your case, `producer' takes pointers to string literals (read-only arrays of `char's), which are statically allocated)
[07:25:01] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:25:26] <tusko> (a) yes, definitely. (b)  q->buff = calloc(q->size, sizeof(char*)); and then I scrapped (c) entirely. I do not now try to initialize the contents of q->buff after (b)
[07:26:16] <tusko> oh snapsies
[07:26:42] <tusko> Yeah, my program actually runs pretty much just fine now. I did not expect that
[07:26:57] <ski> (it would be possible to have `array_init' allocate the `array' itself. but then it'd need to return an `array *', or take an `array **' parameter. and it's less flexible (and also somewhat easier to use, when it's appropriate to use), since then you're fixing the means of allocation into `array_init', rather than letting the caller deal / bother with it)
[07:28:49] <tusko> Yeah, my mind always goes to cutting the caller out because I can't control the malformed things they might give me.
[07:28:55] <ski> "I do not now try to initialize the contents of q->buff after (b)" -- huh ? (b) already initializes `q->buff'
[07:29:21] <ski> that's what `q->buff = calloc(q->size,sizeof *q->buff);' does
[07:29:22] <tusko> Right, I meant the q->buff[i]'s I dropped that. Never been happier.
[07:29:29] *** Quits: hyperupcall (~hyperupca@cpe-172-90-202-158.socal.res.rr.com) (Quit: Client closed)
[07:29:45] <ski> yay ! :)
[07:30:00] *** Quits: Luke- (~ldm@hacksoc/alumni/ldm) (Quit: o/ 3w 6d 23h 59m 13s)
[07:30:01] <ski> now, did you mean to interleave the `pthread_join's with the `pthread_create's ?
[07:30:23] *** Joins: kts (~kts@103.73.237.194)
[07:30:33] <ski> (that way, you'll only have two pthreads spawned at the same time, iiuc)
[07:31:47] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:32:38] <ski> (oh, and rather than using `THREADS' in some places and `THREADS/2' in others, i'd use `2*THREADS' in the former and `THREADS' in the latter. to avoid having to rely on `THREADS' being an even number. but perhaps `THREADS' should be renamed to `THREAD_PAIRS' or something, then ..)
[07:33:24] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 240 seconds)
[07:33:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net)
[07:34:14] *** Joins: Luke (~ldm@hacksoc/alumni/ldm)
[07:37:08] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[07:37:21] <tusko> oh yeah, that's a really good idea.
[07:37:59] <tusko> Mostly I just wanted to generate a bunch of random producers and consumers to be sure I am threadsafe
[07:38:12] <tusko> I plan to use this next to make a DNS resolver
[07:38:16] <tusko> a simple one ofc
[07:38:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[07:39:07] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:40:37] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[07:42:55] <ski> (oh, and in place of `10' you could use `sizeof hosts / sizeof hosts[0]')
[07:43:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[07:43:29] <tusko> ah, I didn't realize that would work in C
[07:43:48] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[07:49:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[07:51:14] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[07:53:04] *** candide sets mode: -o candide
[07:55:30] <klys> is this a good channel to discuss yacc/bison parsers?  https://gist.github.com/mdasoh/eaf924af120dc9c9e0e37133e9530fc0
[07:55:31] <candide> Title of klys's link: c like minimal expression parsing for incremental improvements 0001-13mar2022 · GitHub
[07:56:55] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:01:00] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[08:01:42] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:02:18] *** Joins: rgrinberg (~textual@177.244.18.30)
[08:04:47] *** Quits: soapsudsxx (~soapsudsx@209.221.40.152) (Remote host closed the connection)
[08:05:38] *** Joins: Atque (~Atque@user/atque)
[08:06:38] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[08:08:01] *** Joins: ekathva (~ekathva@n16iytldzw0rbah2i-1.v6.elisa-mobile.fi)
[08:08:38] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:08:58] *** Quits: kts (~kts@103.73.237.194) (Ping timeout: 250 seconds)
[08:09:29] *** Joins: zacts (~zacts@user/zacts)
[08:09:44] *** Quits: zmt01 (~zmt00@user/zmt00) (Quit: Leaving)
[08:10:25] *** Joins: nostar (~nostar@68.51.221.108)
[08:10:55] *** Joins: zmt00 (~zmt00@user/zmt00)
[08:11:00] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:11:05] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:13:21] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Ping timeout: 252 seconds)
[08:17:07] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[08:22:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:22:31] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:23:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Ping timeout: 240 seconds)
[08:23:48] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:23:59] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[08:24:04] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[08:24:17] *** Joins: ztx (~ztx@user/ztx)
[08:25:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[08:30:39] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[08:33:09] *** Quits: alch (~alch@bo-18-131-249.service.infuturo.it) (Ping timeout: 252 seconds)
[08:33:09] *** Quits: dignissimus (~dignissim@79-70-31-37.dynamic.dsl.as9105.com) (Quit: WeeChat 3.4)
[08:33:46] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[08:34:45] *** Joins: alch (~alch@pa-18-189-56.service.infuturo.it)
[08:34:53] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:36:25] *** Joins: Darkcoal (~user@user/Darkcoal)
[08:36:51] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Remote host closed the connection)
[08:42:59] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[08:47:30] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[08:51:04] *** Joins: heiner1 (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[08:51:04] *** Quits: heiner (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (Read error: Connection reset by peer)
[08:51:50] *** Quits: joev (~joev@user/joev) (Ping timeout: 252 seconds)
[08:52:15] *** Joins: joev (~joev@user/joev)
[08:53:25] *** heiner1 is now known as heiner
[08:53:56] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:54:06] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[08:56:41] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 272 seconds)
[09:00:42] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[09:06:55] *** Joins: savolla (~quassel@84.44.28.28)
[09:09:02] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:09:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:11:41] *** Quits: duds- (~duds-@user/duds) (Quit: Leaving.)
[09:12:23] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:15:36] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[09:20:17] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[09:20:36] *** Joins: duds- (~duds-@user/duds)
[09:22:44] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[09:23:19] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Max SendQ exceeded)
[09:23:53] *** Joins: ymwm__ (~yingmanwu@27.153.167.53)
[09:26:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[09:27:46] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[09:34:46] *** Quits: ski (~ski@remote12.chalmers.se) (Quit: Lost terminal)
[09:35:14] *** Quits: savolla (~quassel@84.44.28.28) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[09:35:59] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[09:40:58] *** Quits: joomla9 (uid543104@id-543104.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[09:45:49] *** Joins: ski (~ski@remote12.chalmers.se)
[09:50:35] *** Joins: vicfred (~vicfred@user/vicfred)
[09:51:46] *** Joins: vicfred_ (~vicfred@user/vicfred)
[09:53:02] *** Quits: joev (~joev@user/joev) (Ping timeout: 272 seconds)
[09:53:28] *** Joins: joev (~joev@user/joev)
[09:53:33] *** Quits: vicfred_ (~vicfred@user/vicfred) (Client Quit)
[09:55:06] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 252 seconds)
[10:01:46] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:02:08] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[10:03:11] *** Quits: pnbeast (~pnbeast@2601:140:4280:3800::1) (Quit: WeeChat 2.7.1)
[10:03:24] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[10:05:48] *** Quits: rgrinberg (~textual@177.244.18.30) (Ping timeout: 240 seconds)
[10:06:21] *** Quits: bch (~bch@S01069050ca2cbf63.ok.shawcable.net) (Quit: rebooter)
[10:08:32] *** Joins: rgrinberg (~textual@177.244.18.30)
[10:08:49] *** Quits: nurupo (~nurupo.ga@user/nurupo) (Quit: nurupo.ga)
[10:08:51] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:09:15] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[10:09:20] *** Joins: nurupo (~nurupo.ga@user/nurupo)
[10:12:02] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 272 seconds)
[10:13:58] *** Joins: nexus_ (~nexus@fibhost-67-47-22.fibernet.hu)
[10:15:29] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[10:16:15] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:18:38] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:23:29] *** Joins: Atque (~Atque@user/atque)
[10:26:56] *** Joins: mra90 (~mra@192.55.54.55)
[10:29:14] *** Quits: shadow3d (~shadow3d@119.123.134.157) (Remote host closed the connection)
[10:29:26] *** Joins: shadow3d (~shadow3d@119.123.134.157)
[10:29:39] *** Quits: shadow3d (~shadow3d@119.123.134.157) (Remote host closed the connection)
[10:30:23] *** Joins: shadow3d (~shadow3d@119.123.134.157)
[10:30:24] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Ping timeout: 272 seconds)
[10:32:21] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:33:18] <mra90> https://pastebin.com/CV4mRnat -> Why does compiler put 100 bytes of garbage into section of initialized variables? oO
[10:33:46] <mra90> I would expect only 0xAAAAAAAA is placed there
[10:34:23] <System_Error> maybe section alignment?
[10:35:32] <mra90> this is the content of that section https://pastebin.com/E8M3Uyu0
[10:35:46] <mra90> I don't even see 0xAA.. there
[10:36:20] *** Joins: ekathva_ (~ekathva@mobile-access-5672f9-153.dhcp.inet.fi)
[10:37:31] <saribro> why would there be? global_buff is not initialised, untill test_func() is called, there's no reason to expect 0xAA.. there
[10:37:39] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:38:00] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 272 seconds)
[10:38:36] *** Quits: ekathva (~ekathva@n16iytldzw0rbah2i-1.v6.elisa-mobile.fi) (Ping timeout: 240 seconds)
[10:39:06] <mra90> saribro, yes so what is that garbage there?
[10:40:01] <saribro> whatever random stuff was available, I suppose
[10:40:05] *** Joins: Darkcoal (~user@user/Darkcoal)
[10:40:12] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[10:40:17] <mra90> saribro, but what is the purpose of it?
[10:40:26] <mra90> available for what?
[10:40:57] *** Joins: bzng (~bzng4@80-123-54-112.adsl.highway.telekom.at)
[10:43:53] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[10:47:20] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:48:36] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:52:34] *** Joins: iomari891 (~iomari891@102.91.5.46)
[10:54:01] *** Joins: meator (~meator@user/meator)
[10:54:57] *** Quits: ekathva_ (~ekathva@mobile-access-5672f9-153.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:56:13] *** Joins: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi)
[10:56:37] *** Joins: pony (sid524992@smol/hors)
[10:56:45] <pony> hi
[11:00:37] *** Joins: Rounin (~david@84.212.130.215)
[11:00:42] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[11:01:25] *** Joins: Alhazred (~Alhazred@45.129.56.151)
[11:01:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[11:02:04] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 272 seconds)
[11:02:07] *** Quits: Alhazred (~Alhazred@45.129.56.151) (Client Quit)
[11:02:26] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[11:02:37] *** Joins: meator (~meator@user/meator)
[11:03:10] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[11:03:19] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:07:46] *** Quits: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[11:11:17] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[11:11:36] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:11:42] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:12:04] *** Joins: thevishy (~Nishant@49.37.242.151)
[11:13:10] *** Joins: Natch (~natch@c-67bae255.014-297-73746f25.bbcust.telenor.se)
[11:13:21] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[11:13:41] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:14:07] *** Joins: toulene (~toulene@user/toulene)
[11:16:13] *** Joins: loganlee (~Thunderbi@user/loganlee)
[11:16:55] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 240 seconds)
[11:18:23] *** Joins: oakyy (~oaky@37.250.213.109.bredband.tre.se)
[11:19:08] *** Quits: thevishy (~Nishant@49.37.242.151) (Quit: Leaving)
[11:19:53] *** bparker_ is now known as bparker
[11:20:08] *** Joins: nishant (~Nishant@49.37.242.151)
[11:22:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl)
[11:22:43] *** Quits: shadow3d (~shadow3d@119.123.134.157) (Ping timeout: 256 seconds)
[11:23:00] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[11:23:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[11:24:55] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:25:04] *** Joins: toulene (~toulene@user/toulene)
[11:26:09] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 272 seconds)
[11:26:15] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 240 seconds)
[11:30:40] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:30:48] *** Joins: arinov_ (~arinov@213.194.126.155)
[11:31:55] *** Quits: nexus_ (~nexus@fibhost-67-47-22.fibernet.hu) (Read error: Connection reset by peer)
[11:33:39] *** Joins: nexus_ (~nexus@178-164-208-88.pool.digikabel.hu)
[11:34:39] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[11:35:21] *** Joins: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com)
[11:35:31] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:36:11] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[11:36:14] *** Joins: oxfuxxx (~oxfuxxx@37.120.204.134)
[11:36:56] *** Joins: aradesh (~aradesh@user/aradesh)
[11:39:06] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[11:39:08] *** Quits: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 250 seconds)
[11:39:43] *** Joins: freep (~freepppp@193.92.35.32.dsl.dyn.forthnet.gr)
[11:40:04] *** Quits: meator (~meator@user/meator) (Ping timeout: 272 seconds)
[11:40:38] <ent58> If uintptr_t technically isn't valid to use as a casted-to type from anything but a void *. How then do you properly check alignment?
[11:42:15] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:43:27] <Maxdamantus> ent58: `uintptr_t` values are not guaranteed to correspond numerically to their corresponding pointers anyway.
[11:43:53] <Maxdamantus> ent58: you can observe alignment by converting to `char *` points and subtracting those.
[11:44:22] *** Joins: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de)
[11:45:46] <ent58> that would seem to suggest that while the underlying representation of the data isn't guaranteed (even though this is a no-op on every platform I can imagine), the distance between them is?
[11:46:02] <ent58> that's....strategic
[11:46:11] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[11:46:31] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[11:46:59] <Maxdamantus> The thing that's guaranteed is that you can read any object as an array of `unsigned char` values.
[11:47:45] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:48:14] <Maxdamantus> `uintptr_t` is only guaranteed to be able to preserve a `void *` value. There's nothing guaranteed about which `uintptr_t` value corresponds with which `void *` value.
[11:48:26] *** Joins: frost (~frost@user/frost)
[11:48:45] *** Joins: rcoote (~rcoote@2a02:908:690:a140:d574:cbce:bdc6:8f4)
[11:48:51] <dave0> could you   (uintptr_t)(void *)(int *)something
[11:49:46] <Maxdamantus> Yes, but you can't assume any information from the resulting `uintptr_t`. That `uintptr_t` value is only useful for getting back the original `void *` or `int *` value.
[11:50:25] <Maxdamantus> afaik you could even get back different `uintptr_t` values each time you evaluated the expression.
[11:50:56] <ent58> So, practically speaking, the implementation could give you a ROT13 of the pointer as the resulting bit pattern
[11:50:59] <ent58> and you just have to deal
[11:51:08] <ent58> so
[11:51:08] <Maxdamantus> Sure.
[11:51:24] <ent58> even if you cast to char *, how do you align it?
[11:51:50] <ent58> Like of course I could do the actual & 3, & 7, etc but I mean
[11:52:13] <Maxdamantus> You can't align it.
[11:52:36] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 240 seconds)
[11:53:29] <Maxdamantus> Actually, you can if you know another pointer within the same object which is aligned.
[11:53:30] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:53:57] <ent58> right, then subtraction makes sense
[11:54:07] <dave0> there is _Alignof
[11:54:26] *** Joins: Darkcoal (~user@user/Darkcoal)
[11:54:36] <ent58> but that's only for compile time retrieval of alignment
[11:54:45] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:54:50] <ent58> say a third party library hands you a void *
[11:54:51] <dave0> what other kind is there?
[11:55:01] <ent58> is it aligned for your target data?
[11:55:02] <Maxdamantus> That tells you the alignment of a type. It doesn't know how to figure out how many bytes away a `char *` value is from being aligned.
[11:56:21] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[11:56:28] *** Quits: oakyy (~oaky@37.250.213.109.bredband.tre.se) (Ping timeout: 250 seconds)
[11:56:36] *** Joins: moose (~moose@user/moose)
[11:56:46] <Maxdamantus> ent58: usually the receiver will expect the sender to make sure it is suitably aligned, rather than implementing some sort of check to see if it is aligned.
[11:57:15] <Maxdamantus> If it was produced by `malloc` or similar, it is aligned.
[11:57:29] <dave0> why did they expose alignment like that?
[11:57:39] <ent58> what if it was produced by assembly?
[11:57:54] <ent58> or, rather, even more practical
[11:58:19] <ent58> what if you're writing something which allows the user to enter addresses manually?
[11:58:27] <Maxdamantus> ent58: the author of the assembly code probably knows whether it's suitably aligned.
[11:58:45] <Maxdamantus> ent58: that's not possible in C.
[11:58:52] *** Quits: arinov_ (~arinov@213.194.126.155) (Remote host closed the connection)
[11:59:09] <dave0> you are not allowed to point to arbitrary addresses
[11:59:25] <Maxdamantus> ent58: valid addresses are produced by `malloc` or by the address-of operator on lvalues denoting valid objects.
[11:59:34] <Maxdamantus> ent58: you can't just invent your own addresses.
[11:59:41] <ent58> how does....any microcontroller, with fixed addressing, work?
[11:59:50] <Maxdamantus> ent58: not C.
[11:59:54] <dave0> nonstandard
[12:00:00] *** Joins: arinov_ (~arinov@213.194.126.155)
[12:00:32] *** Quits: roue (~roue@097-086-244-045.res.spectrum.com) (Ping timeout: 240 seconds)
[12:00:41] <Maxdamantus> ent58: if you've got a particular platform in mind, you can break a lot of these rules and end up with something that happens to work on that platform.
[12:00:53] *** Joins: King_julian (~King_juli@41.1.142.79)
[12:01:03] <Maxdamantus> ent58: it's just possible that it won't work if you try to run it on another platform.
[12:01:24] *** Joins: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05)
[12:01:27] <ent58> Right I mean I'm just thinking how any OS kernel was ever written
[12:01:52] <ent58> But it's "implementation defined"?
[12:01:53] <dave0> it has machine dependent parts
[12:01:56] <Maxdamantus> ent58: right, OS kernels normally break a lot of those rules, so they're not written in portable C.
[12:02:23] *** Joins: Thedarkb (~Thedarkb@82.3.80.190)
[12:02:28] <Maxdamantus> ent58: if you create a C compiler for your new CPU architecture, it's not going to be able to magically compile and run Linux.
[12:03:02] <Maxdamantus> ent58: Linux involves a bunch of assembly code that is not C, and a bunch of "C" code which assumes various things about platforms.
[12:03:14] <ent58> those assumptions don't break, though
[12:03:27] <ent58> I'm completely fine testing those assumptions in a standard way
[12:03:29] <Maxdamantus> They don't for gcc, which is the compiler that Linux supports.
[12:03:40] <Maxdamantus> Linux doesn't support other C compilers.
[12:03:41] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[12:03:48] <ent58> Wait I didn't know that
[12:03:56] <ent58> Oh.
[12:04:13] *** Joins: slidercrank (~slidercra@user/slidercrank)
[12:04:16] <ent58> I'm learning a lot today
[12:04:23] <dave0> linux kernel is written in gnu c
[12:04:44] <dave0> did clang add enough compatibility with gcc to compile linux kernel?
[12:05:02] <Maxdamantus> Probably.
[12:05:30] <dave0> i think i read it somewhere
[12:05:54] <Maxdamantus> I'm sure there are compilation projects where Linux is compiled using clang or tcc or something, but Linux development only tries to achieve compatibility with gcc.
[12:06:03] *** Joins: cadmio (~cadmio@151.57.30.140)
[12:06:12] <Kerr> (EE student designing a processor for a class) How hard is it to get GCC to support a new arch(since this seems topical)
[12:06:12] <cadmio> error: void value not ignored as it ought to be response = close_tab(NULL, litos);
[12:06:17] <cadmio> what does that mean?
[12:06:19] <Maxdamantus> anything else working is likely due to the compiler being adapted to compile Linux rather than Linux being written for that compiler (or for standard C).
[12:06:48] <Maxdamantus> cadmio: it probably means that `close_tab` returns `void`.
[12:07:02] <Kerr> I think it would be really neat to take my processor design to an fpga and have gcc be able to target it
[12:07:47] *** Quits: duds- (~duds-@user/duds) (Remote host closed the connection)
[12:07:53] <cadmio> ok thanks
[12:07:55] *** Parts: cadmio (~cadmio@151.57.30.140) ()
[12:08:21] *** Joins: oakyy (~oaky@2001:6b0:1:1041:8f6e:3ab9:8402:bcb5)
[12:08:42] <dave0> i think risc-v is the arch du jour
[12:10:44] *** Joins: duds- (~duds-@user/duds)
[12:10:48] <ent58> That's truly limiting for what I want to do...I have to be able to validate data specified that way, and even if I make the assumption that "on all sane compilers it will work", they could decide to pull the rug and no-op the sanity check because they can
[12:11:57] <dave0> you have a possibly unaligned int?
[12:12:11] <dave0> piece it together from unsigned char*
[12:12:28] <dave0> int x = p[0] << 0 | p[1] << 8;
[12:12:43] *** Quits: reset (~reset@user/reset) (Quit: reset)
[12:12:52] <dave0> gcc recognizes it as an unaligned load on processors that support it
[12:13:09] *** Quits: Furai (~Furai@furai.pl) (Remote host closed the connection)
[12:13:13] <ent58> right, but that int cannot become an aligned pointer
[12:13:27] *** Joins: toulene (~toulene@user/toulene)
[12:13:35] *** Joins: Furai (~Furai@furai.pl)
[12:13:49] <ent58> the user gives me a pointer, I must validate it
[12:13:57] <dave0> that just means you can't fetch an int
[12:14:05] <dave0> but you can fetch a unsigned char
[12:14:23] *** Quits: ymwm__ (~yingmanwu@27.153.167.53) (Remote host closed the connection)
[12:14:34] <dave0> what user? users cant give you a pointer
[12:14:55] *** Joins: zer0x (~zer0x@1.55.210.143)
[12:15:42] <ent58> they can: I'm writing something that basically shuffles dynamic libraries in and out, allowing the user to dynamically poke at any address they choose
[12:16:04] <dave0> if you somehow recieve a pointer and you don't know if you can dereference it to get an int, access it as a char, or you could also memcpy it
[12:16:11] <Kerr> dave0, I agree that riscv is the arch de joire now, but i'm designing sn arch for a class, so copy-pasting riscv isnt what we're doing.
[12:16:12] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 240 seconds)
[12:16:52] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[12:16:55] <ent58> and yeah I totally understand that memcpy to temporary is a no-op most of the time, the issue is that I need to actually act on the data the user points to
[12:17:15] *** Joins: cadmio (~cadmio@151.57.30.140)
[12:17:16] <ent58> so say they enter an arbitrary address and want to modify it as a float
[12:17:34] <ent58> I have to check if it's aligned, and then proceed to do the memcpy shuffle
[12:17:37] <ent58> however
[12:17:41] <ent58> I can't align it normally
[12:18:05] <dave0> memcpy doesn't require alignment
[12:18:11] *** Joins: ymwm (~yingmanwu@27.153.167.53)
[12:18:14] *** Parts: cadmio (~cadmio@151.57.30.140) (WeeChat 3.0)
[12:18:28] <ent58> so I would have to memcpy in and out of that memory from a temporary float
[12:19:08] <dave0> void abs(void *ptr) { float f; memcpy(&f, ptr, sizeof(float)); if(f < 0.0) f = -f; memcpy(ptr, &f, sizeof(float)); }
[12:19:15] <ent58> but like Max mentioned earlier, you can't really expect the value of any address to "line up" with the thing you're pointing to
[12:19:21] <ent58> I think that's the more important point
[12:19:33] <ent58> So any pointer I receive as text
[12:19:47] *** Joins: ironman (~ironman@49.36.54.157)
[12:19:53] <ent58> converted to.....a 64-bit unsigned long (uintptr_t)
[12:19:56] <ent58> means nothing
[12:19:58] <Maxdamantus> Who's going to read it back as a float in the future?
[12:20:12] <dave0> litter your code with memcpy
[12:20:16] <ent58> possibly the module that got modified
[12:21:40] <ent58> But what I'm gathering is that without defying the standard via assumptions akin to gnuC
[12:22:00] <ent58> I can't map any user specified data to a valid pointer
[12:22:12] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[12:22:23] <Maxdamantus> How does the user know what a valid pointer is?
[12:23:55] <ent58> there are ways of doing this that would allow them to enter an offset rather than an absolute address, but lets say they did the math (using a tool to scan header information knowing there's no ASLR at play, etc)
[12:24:21] <ent58> and they want to put 3.0f at address 0x004009A0
[12:25:45] <dave0> ent58: memcpy
[12:25:54] <ent58> this makes me wonder why you would even have facilities to print pointers if their underlying value means nothing
[12:26:01] <ent58> right but in order to memcpy
[12:26:08] <Maxdamantus> If you're willing to make these sorts of assumptions, you could just cast the long long value `0x004009A0` to a `float *`
[12:26:21] <dave0> yeah %p is quite useless except perhaps for debugging
[12:26:43] <ent58> you need to turn the string "0x004009A0" into 0x004009A0 and then assume you can put that value in a `void *`
[12:26:47] <Maxdamantus> but standard C doesn't allow you to reason about things like absence of ASLR or certain integers mapping to valid addresses.
[12:27:03] <dave0> what string? why are you inventing things as you go
[12:27:07] *** Quits: oakyy (~oaky@2001:6b0:1:1041:8f6e:3ab9:8402:bcb5) (Remote host closed the connection)
[12:27:19] *** Joins: Dean (~Dean@user/De4n-Whit3/x-9385125)
[12:27:21] *** Joins: oakyy (~oaky@2001:6b0:1:1041:bf76:6792:de7d:6008)
[12:27:22] <Dean> hello
[12:27:36] <dave0> float f = 3.0; memcpy(0x004009A0, &f, sizeof(float));
[12:27:39] <dave0> probably get a wanring
[12:27:49] <dave0> but it's only a warning and you know it's valid
[12:28:05] *** Quits: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05) (Quit: Client closed)
[12:28:19] *** Joins: roue (~roue@097-086-244-045.res.spectrum.com)
[12:28:22] <Maxdamantus> If you're assuming that `(void *)0x004009A0` is a valid address, you might as well assume that it's also suitably aligned for `float`
[12:28:45] *** Quits: tusko (~yeurt@user/tusko) (Remote host closed the connection)
[12:28:46] <ent58> So
[12:28:57] <ent58> Looking this issue up, someone mentioned a principle in the standard
[12:29:04] <ent58> where when something is left unspecified
[12:29:06] *** Joins: frost (~frost@user/frost)
[12:29:07] *** Joins: tusko (~yeurt@user/tusko)
[12:29:23] <ent58> the standard writers expect the right thing will be done because doing anything else is harder
[12:29:42] <ent58> so while they could legally remove that memcpy you wrote, dave0
[12:29:46] <ent58> they won't
[12:29:55] <ent58> and instead they will do exactly the right thing
[12:30:04] <ent58> it just drives me nuts that it's that brittle
[12:30:10] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[12:30:13] <ent58> the warning implies that the rug could be pulled at any time
[12:30:21] *** Quits: frost (~frost@user/frost) (Client Quit)
[12:30:36] <sham1> Work-sized memcpys will be removed. Of course it's not guaranteed by the standard, but it's the right thing to do
[12:30:37] <dave0> but the rug would be pulled everywhere
[12:30:38] *** Quits: alch (~alch@pa-18-189-56.service.infuturo.it) (Read error: Connection reset by peer)
[12:30:41] <sham1> Word-sized*
[12:30:51] *** Joins: justAstache (~justache@user/justache)
[12:30:56] <dave0> your user's code would break too
[12:31:15] <dave0> because their code is wrong too
[12:31:49] *** Joins: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05)
[12:34:01] *** Joins: alch (~alch@ca-18-219-194.service.infuturo.it)
[12:34:33] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[12:34:42] <dave0> so it's not your fault :-)
[12:34:51] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[12:34:55] *** Quits: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05) (Client Quit)
[12:35:00] *** Joins: cadmio (~cadmio@151.57.30.140)
[12:35:00] *** Quits: constxd_ (~brad@142.134.78.128) (Ping timeout: 240 seconds)
[12:35:01] <dave0> i personally would go with memcpy
[12:35:02] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 260 seconds)
[12:35:28] <cadmio> I've a bug: when the user choices CANCEL the program should not close instead it does https://paste.gnome.org/pwviqzfxj
[12:36:00] *** Joins: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05)
[12:36:48] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[12:36:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[12:37:19] *** Joins: Darkcoal (~user@user/Darkcoal)
[12:37:44] *** Joins: the_lanetly_052 (~the_lanet@194.135.155.189)
[12:38:17] <ent58> so I have a function that accepts a uintptr_t (just to make it easier), the "user" calls this from the void, and my task is to shove the data at (char *)uintptr_t in a float f via memcpy
[12:38:24] <ent58> and it will work everywhere
[12:38:33] *** Quits: cadmio (~cadmio@151.57.30.140) (Read error: Connection reset by peer)
[12:38:37] *** Joins: cadmio1 (~cadmio@151.35.69.236)
[12:38:37] <cadmio1> I've forgotten a piece this line should only be reached when the user selects CLOSE https://paste.gnome.org/pn3lfwl0k#line-101
[12:39:19] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[12:39:49] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:40:18] <ent58> and I will just hold my brain and comfort it while it compiles
[12:40:25] <ent58> knowing that years from now
[12:40:31] <ent58> the rug will be pulled
[12:40:34] <ent58> lol
[12:44:51] <caze> Kerr: gcc has a history of bering intentionally designed not to be easy to extend.
[12:45:01] <caze> Kerr: Although that has more to do with the frontend.
[12:46:18] <Kerr> https://gcc.gnu.org/onlinedocs/gccint/Machine-Desc.html
[12:46:24] <Kerr> Gives me a bit of hope
[12:46:51] <Kerr> Probably not but I'm very curious as too what it would actually entail
[12:47:15] <caze> Why gcc?
[12:50:36] <Kerr> Why any other compiler?
[12:50:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[12:51:01] <greeter> man, why didn't i think of that nickname?
[12:51:14] <caze> There have been compilers developed in the past 15 years as a response to what I just said.
[12:51:39] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 252 seconds)
[12:53:04] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:55:54] <cadmio1> I've an "Unexpected Behaviour" I've added this printf for debuggin https://paste.gnome.org/pjifrxsar#line-96 and with that the program works correctly...
[12:56:12] <Kerr> So... clang?
[12:56:45] <Kerr> Not that I'm opposed, I'll explore that too
[12:56:53] <caze> More likely llvm.
[12:57:13] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[12:59:01] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:00:47] *** Joins: merrinx (~merrinx@ti0028a400-3686.bb.online.no)
[13:05:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:06:42] <cadmio1> here's the whole code https://github.com/gioretikto/litos/blob/main/acels.c#L111
[13:08:04] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:09:54] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[13:10:48] *** Joins: anshupatia (uid29854@id-29854.helmsley.irccloud.com)
[13:11:30] *** Joins: fivespoons (~fivespoon@user/fivespoons)
[13:17:19] *** Quits: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05) (Quit: Client closed)
[13:22:16] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:25:29] *** Quits: fivespoons (~fivespoon@user/fivespoons) (Quit: leaving)
[13:26:25] *** Joins: fivespoons (~fivespoon@user/fivespoons)
[13:26:58] <cadmio1> ok I solved it
[13:27:48] <dave0> ask first, debug later
[13:32:39] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[13:33:11] <cadmio1> with that printf in place everything works out fine...
[13:34:52] <cadmio1> I tried to remove it and the program doesn't work s expected
[13:37:37] *** Quits: cadmio1 (~cadmio@151.35.69.236) (Quit: WeeChat 3.0)
[13:39:14] *** Quits: rcoote (~rcoote@2a02:908:690:a140:d574:cbce:bdc6:8f4) (Quit: Konversation terminated!)
[13:39:21] *** Joins: cadmio (~cadmio@151.57.6.128)
[13:39:34] <fivespoons> can fread be interrupted? I want to gracefully handle a SIGTERM
[13:39:37] *** Quits: ncrowl (~ncrowl@89-160-77-134.cust.bredband2.com) (Ping timeout: 240 seconds)
[13:41:25] <sham1> What you'd usually want to do is maybe use poll/epoll/kqueue/whatever to see if your file descriptor has anything to read, and then using the signal stuff because you can then just not poll anymore
[13:41:38] <sham1> But no, I don't think it's doable with stdio
[13:41:52] *** Joins: ncrowl (~ncrowl@31-208-86-111.cust.bredband2.com)
[13:42:02] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[13:42:02] *** Quits: nexus_ (~nexus@178-164-208-88.pool.digikabel.hu) (Ping timeout: 240 seconds)
[13:42:07] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[13:42:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[13:42:48] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[13:43:00] *** Parts: cadmio (~cadmio@151.57.6.128) ()
[13:44:01] *** Joins: nexus_ (~nexus@178-164-208-109.pool.digikabel.hu)
[13:47:33] *** Joins: arinov (~arinov@5.24.97.248)
[13:48:01] *** Quits: arinov_ (~arinov@213.194.126.155) (Ping timeout: 272 seconds)
[13:48:08] <dave0> cant get the robot to do a blocking read :/
[13:49:07] *** Joins: cursey (~cursey@user/cursey)
[13:50:30] <dave0> ,cc void handler(int signo) { } int main(void) { close(0); close(1); int filedes[2]; if(pipe(filedes) != 0) perror("pipe"); signal(SIGALRM, handler); alarm(1); int c = getchar(); if(c == EOF) { perror("sigalrm"); } else { printf("char %c ", c); } }
[13:50:33] <candide> dave0: sigalrm: Interrupted system call
[13:50:37] <dave0> sorta works
[13:50:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[13:51:01] <dave0> blocks on getchar, alrm fires, returns EINTR
[13:51:19] *** Joins: shivesh (~shivesh@user/shivesh)
[13:51:31] <dave0> seems a bit jank
[13:51:38] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:51:45] <sham1> Yeah, better do it properly with file descriptors
[13:52:56] <dave0> the pipe was the only way i could think of to make it block
[13:53:35] *** Quits: iomari891 (~iomari891@102.91.5.46) (Quit: WeeChat 3.3)
[13:54:58] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 272 seconds)
[13:55:03] *** Joins: eddybilley (~freddieti@217.119.232.174)
[13:57:08] *** Quits: nishant (~Nishant@49.37.242.151) (Quit: Leaving)
[13:57:13] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:58:36] *** Quits: Thedarkb (~Thedarkb@82.3.80.190) (Ping timeout: 240 seconds)
[14:00:34] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[14:02:03] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:2e86:80a5:f58b:d1a4) (Ping timeout: 252 seconds)
[14:02:05] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[14:02:52] <fivespoons> dave0: if you use read() it interrupts,  but not from a fifo
[14:02:59] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:a4f7:3458:36c4:ffd7)
[14:03:29] <dave0> ,cc volatile sig_atomic_t cleanup = 0; void handler(int signo) { cleanup = 1; } int main(void) { signal(SIGALRM, handler); alarm(1); close(0); int x[2]; pipe(x); int c = getchar(); if(cleanup) { printf("cleanup in aisle one "); } if(c == EOF) { perror("sigalrm"); } else { printf("char %c ", c); } }
[14:03:33] <candide> dave0: sigalrm: Interrupted system call  cleanup in aisle one
[14:03:51] <fivespoons> e.g,    <myfifo myprogram    on SIGTERM,  won't interrupt the read call,   but   <myfifo cat | myprogram    - interrupts the read call with EINTR
[14:04:18] *** Quits: wand (~user@gateway/tor-sasl/wand) (Remote host closed the connection)
[14:04:41] <dave0> i don't really know, i can't use signals
[14:04:42] *** Joins: fe23 (~fe23@2409:8a34:466:6010:50d1:7544:c60d:ec26)
[14:04:49] *** Joins: wand (~user@gateway/tor-sasl/wand)
[14:05:24] <dave0> there's a sigaction flag to make the a syscall fail with EINTR if it gets a signal
[14:06:10] <dave0> but that's posix
[14:06:34] <dave0> apart from the pipe thing to simulate a blocking read, the code is c
[14:06:41] <dave0> maybe you need posix
[14:07:54] <fivespoons> dave0: I'm resorting to POSIX read, but it's still not straightforward
[14:08:06] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 252 seconds)
[14:08:27] <dave0> they're nasty, i don't like them
[14:10:04] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[14:10:06] *** Joins: Masklin__Gurder (~joel@bioinf-serv.biol.lu.se)
[14:12:18] *** Joins: ztx (~ztx@user/ztx)
[14:17:04] *** Quits: ent58 (~ent58@rrcs-97-76-214-244.se.biz.rr.com) (Quit: Client closed)
[14:19:55] <fivespoons> dave0: nevermind, I found my distinction in `man signal.7` ... A "slow" device is one where the I/O call may block for an indefinite time, for example, a terminal, pipe, or socket... a (local) disk is not a slow device according to this definition; I/O operations on disk devices are not interrupted by signals
[14:20:26] <fivespoons> dave0: thanks for trying with me, but I think this calls for a different approach
[14:22:32] <dave0> ah nice catch, i didn't know that
[14:22:45] <dave0> sorry i wasn't much help :-(
[14:22:47] *** Parts: fmac (bf93f83905@2604:bf00:561:2000::26) ()
[14:23:30] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 252 seconds)
[14:24:12] *** Joins: frost (~frost@user/frost)
[14:24:15] *** Joins: malina (~malina@user/malina)
[14:24:21] *** Joins: unknow (~i.am@user/marlboro)
[14:25:06] *** Joins: meator (~meator@user/meator)
[14:28:15] <roxlu> Hey! I'm reading up a bit more about plugin systems and was reading this page https://ourmachinery.com/post/little-machines-working-together-part-2/ where they mention the use of an opaque struct that can be used by plugins to store state. I'm curious why they doin't use a `void*` for this?
[14:34:30] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 252 seconds)
[14:34:46] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[14:34:53] *** Joins: plastico (~plastico@neomutt/plastico)
[14:36:11] *** Masklin__Gurder is now known as Masklin
[14:36:15] *** Masklin is now known as Masklin_Gurder
[14:37:07] <Maxdamantus> roxlu: because using a pointer to an incomplete struct type is clearer and more type-safe.
[14:37:10] *** Quits: ironman (~ironman@49.36.54.157) (Quit: Leaving)
[14:37:39] <Maxdamantus> roxlu: the same thing applies to `FILE *` in the standard library. `FILE *` is just an opaque value that is returned and consumed by various standard C functions.
[14:37:46] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 260 seconds)
[14:37:57] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[14:38:17] *** Quits: oakyy (~oaky@2001:6b0:1:1041:bf76:6792:de7d:6008) (Ping timeout: 240 seconds)
[14:38:38] <NRK> .oO( void *p = &p; )
[14:38:44] <Maxdamantus> roxlu: if they instead returned and consumed `void *`, bugs would be less likely to be caught by the compiler, and reading code would be harder because if someone declares a `void *` variable, you don't know if it's going to be used as a file handle or an allocator handle or any other random thing.
[14:39:48] *** Parts: fivespoons (~fivespoon@user/fivespoons) ()
[14:40:36] *** Quits: X-Scale (~ARM@83.223.233.31) (Ping timeout: 240 seconds)
[14:40:36] *** X-Scale` is now known as X-Scale
[14:42:45] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 256 seconds)
[14:42:54] *** Quits: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi) (Remote host closed the connection)
[14:43:12] *** Joins: ekathva_ (~ekathva@n16izluvk39q3lx3y-1.v6.elisa-mobile.fi)
[14:43:48] <roxlu> ah thanks totally makes sense!
[14:46:42] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Quit: Off to see the wizard.)
[14:50:13] *** Joins: King_julian (~King_juli@41.1.142.79)
[14:52:31] <roxlu> I'm also wondering about something else. Lets say I create a plugin system where plugins are loaded form shared libs. At some point I can imagine that a plugin wants some "context" (some state) from the client/user. I'm thinking to implement a generic event system where a plugin can trigger an event to fetch some data from the user. E.g. like and event called `OPENGL_PLUGIN_NEEDS_CONTEXT`; the client is
[14:52:33] <roxlu> then supposed to set a pointer to an OpenGL rendering context. What would be a good approach to deliver a pointer to (in this case) a OpenGL context?
[14:54:34] *** Joins: CodeAgain0 (~codeagain@user/CodeAgain)
[14:54:41] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::ef3c)
[14:55:14] *** Joins: bone (~bone@user/mbo)
[14:55:56] *** Quits: Praise (~Fat@user/praise) (Remote host closed the connection)
[14:55:57] *** Quits: bone_ (~bone@user/mbo) (Ping timeout: 240 seconds)
[14:56:07] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[14:56:36] *** Quits: CodeAgain (~codeagain@user/CodeAgain) (Ping timeout: 240 seconds)
[14:56:36] *** CodeAgain0 is now known as CodeAgain
[14:56:50] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[14:57:06] *** Joins: Praise (~Fat@user/praise)
[14:58:21] *** Joins: fivespoons (~fivespoon@user/fivespoons)
[14:58:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[14:59:24] <fivespoons> dave0: using sigaction(), instead of signal(), and no sa_flags set, drops the specific behaviour and consistently interrupts fread :)
[15:02:01] *** Quits: alch (~alch@ca-18-219-194.service.infuturo.it) (Read error: Connection reset by peer)
[15:03:31] *** Quits: fivespoons (~fivespoon@user/fivespoons) (Quit: leaving)
[15:04:11] *** Quits: yggdrasil (~yggdrasil@67-0-90-132.albq.qwest.net) (Ping timeout: 252 seconds)
[15:05:20] *** Joins: eroux (~eroux@102-65-85-242.ftth.web.africa)
[15:05:35] <dave0> oops they left
[15:05:40] <dave0> glad it worked in the end
[15:05:49] *** Joins: alch (~alch@151.34.215.246)
[15:06:02] *** Joins: yggdrasil (~yggdrasil@75-161-21-164.albq.qwest.net)
[15:06:48] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:08:57] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 240 seconds)
[15:09:17] *** Joins: kts (~kts@103.73.237.2)
[15:10:44] *** Quits: kts (~kts@103.73.237.2) (Client Quit)
[15:11:14] *** Joins: eddybilley (~freddieti@217.119.232.174)
[15:13:54] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[15:16:12] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 268 seconds)
[15:17:11] *** Joins: constxd (~brad@142.134.78.128)
[15:18:13] *** Quits: soul-d (~uknown@user/soul-d) (Read error: Connection reset by peer)
[15:20:38] *** Joins: eddybilley (~freddieti@217.119.232.174)
[15:22:12] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Ping timeout: 240 seconds)
[15:24:21] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[15:25:27] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 268 seconds)
[15:25:40] *** Joins: seninha (~chatzilla@user/seninha)
[15:26:23] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[15:29:30] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[15:32:12] *** Quits: ymwm (~yingmanwu@27.153.167.53) (Ping timeout: 240 seconds)
[15:38:42] *** Joins: eddybilley (~freddieti@217.119.232.174)
[15:39:02] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:43:54] *** Quits: oxfuxxx (~oxfuxxx@37.120.204.134) (Quit: Yankies Motherfh@ckers C0[k Astroboys)
[15:45:18] *** Quits: ztx (~ztx@user/ztx) (Quit: WeeChat 3.4)
[15:45:48] *** Quits: mra90 (~mra@192.55.54.55) (Ping timeout: 272 seconds)
[15:52:27] *** Joins: VoidSync (~sync@user/voidsync)
[15:56:34] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 272 seconds)
[15:57:27] *** Joins: ztx (~ztx@user/ztx)
[15:57:27] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:59:07] *** Joins: frost (~frost@user/frost)
[16:07:35] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[16:11:19] *** Joins: oakyy (~oaky@2001:6b0:1:1041:1990:d619:a787:aa37)
[16:15:09] *** Quits: arinov (~arinov@5.24.97.248) (Ping timeout: 252 seconds)
[16:17:36] *** Quits: frost (~frost@user/frost) (Quit: Client closed)
[16:18:35] *** Joins: oaky_ (~oaky@2a00:801:234:aa1a:6991:124:726a:4a30)
[16:19:05] *** Joins: cart_ (~cart@host-78-144-125-214.as13285.net)
[16:19:41] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[16:21:22] *** Quits: oakyy (~oaky@2001:6b0:1:1041:1990:d619:a787:aa37) (Ping timeout: 260 seconds)
[16:24:50] *** Quits: oaky_ (~oaky@2a00:801:234:aa1a:6991:124:726a:4a30) (Quit: Leaving)
[16:25:25] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 240 seconds)
[16:25:44] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[16:26:59] *** Quits: nexus_ (~nexus@178-164-208-109.pool.digikabel.hu) (Ping timeout: 272 seconds)
[16:27:58] *** Joins: nexus_ (~nexus@91-83-1-220.pool.digikabel.hu)
[16:29:48] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[16:30:56] *** Joins: SaltHilStroller_ (~SaltHillS@199.249.111.186)
[16:32:38] *** Joins: SaltHillStroller (~SaltHillS@206.223.160.26)
[16:33:48] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:36:22] *** Quits: SaltHilStroller_ (~SaltHillS@199.249.111.186) (Ping timeout: 268 seconds)
[16:42:38] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[16:42:53] *** Quits: sebag (~guest@91.245.82.2) (Ping timeout: 256 seconds)
[16:44:13] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:47:09] *** Joins: soul-d (~uknown@user/soul-d)
[16:47:14] *** Quits: moog_ (~moog@107.126.53.51) (Ping timeout: 272 seconds)
[16:47:26] *** Quits: raym (~raym@user/raym) (Quit: technical problems, rebooting...)
[16:49:16] *** Joins: raym (~raym@user/raym)
[16:51:31] *** Joins: oriba (~oriba@dynamic-089-014-251-097.89.14.pool.telefonica.de)
[16:52:04] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:52:09] *** Joins: toulene7 (~toulene@user/toulene)
[16:52:26] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Read error: Connection reset by peer)
[16:52:45] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:53:04] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:53:05] *** toulene7 is now known as toulene
[16:53:34] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 272 seconds)
[16:54:09] *** Quits: slavfox (~slavfox@93.158.232.111) (Read error: Connection reset by peer)
[16:54:58] *** Quits: tc__ (~tc@103-140-203-11.vic.as139284.net.au) (Remote host closed the connection)
[16:55:23] *** Joins: tc__ (~tc@103-140-203-11.vic.as139284.net.au)
[16:57:24] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:01:58] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[17:03:24] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[17:03:48] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[17:03:51] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:04:26] <theseb> how debug when segfaulting?  valgrind gave some info but when i try to add print statements to get more info they don't print
[17:04:35] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[17:05:21] <theseb> i can't accept that segfaults put you in this undefined state where you can't do anything
[17:05:27] <dave0> put fflush(stdout); after the printf's
[17:05:50] <dave0> theseb: the usual thing is run gdb and do a backtrace
[17:07:32] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[17:07:36] *** Joins: slavfox (~slavfox@93.158.232.111)
[17:07:56] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[17:08:21] <theseb> dave0: thanks. will try
[17:08:37] <dave0> theseb: `gdb ./prog.exe` and then `core prog.exe.core` and then `bt` for backtrace
[17:08:39] *** Joins: Atque (~Atque@user/atque)
[17:08:50] *** Joins: acerbic (~acerbic@cs-xdata-50-86-52-171.cspire.com)
[17:10:05] <sham1> And similar stuff for lldb
[17:15:36] *** Quits: saribro (~swinnenb@user/swinnenb) (Remote host closed the connection)
[17:17:04] <theseb> dave0: i remember using ddd a long time ago....do people here like that?...it was a gui interface to gdb so seemed easier
[17:19:07] *** Joins: zer0x (~zer0x@1.55.210.143)
[17:19:57] <dave0> dunno, gui sounds nice
[17:20:18] <dave0> i usually debug with printf's... just add a fflush(stdout); if they aren't being displayed
[17:21:44] <constxd> gdb has a tui mode
[17:22:48] <constxd> there's cgdb too
[17:23:43] *** Joins: King_julian (~King_juli@41.1.142.79)
[17:26:03] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[17:28:20] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Remote host closed the connection)
[17:30:08] *** Joins: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05)
[17:31:48] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[17:32:51] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[17:35:03] <Dean> is "interleaving" the compilers way of executing an expression, in any order it sees fit (in terms of operands), to ensure optimal runtime?
[17:39:54] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[17:41:10] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:41:23] *** Joins: frost (~frost@user/frost)
[17:42:12] *** Quits: King_julian (~King_juli@41.1.142.79) (Ping timeout: 240 seconds)
[17:43:53] *** Quits: Kerr (~Kerr@2601:602:ce80:df10:c95c:5d01:92d0:1d05) (Quit: Client closed)
[17:44:19] *** Quits: frost (~frost@user/frost) (Client Quit)
[17:45:33] *** Joins: wyfnt (~wyfnt1232@113.21.73.126)
[17:45:54] *** Joins: aniruddha (uid340443@id-340443.ilkley.irccloud.com)
[17:48:20] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[17:48:49] *** Joins: matt|lib (~matt|lib@170.55.73.210)
[17:50:13] *** Quits: wyfnt (~wyfnt1232@113.21.73.126) (Read error: Connection reset by peer)
[17:50:31] *** Joins: frost (~frost@user/frost)
[17:51:54] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 260 seconds)
[17:52:25] *** Quits: zer0x (~zer0x@1.55.210.143) (Ping timeout: 250 seconds)
[17:54:15] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[17:55:24] *** Joins: pulse (~pulse@user/pulse)
[17:55:59] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:56:32] *** Joins: Rynn (~rynn@216.30.158.198)
[17:58:48] *** Quits: munkis (~mendel_mu@ool-ae2cb229.dyn.optonline.net) (Ping timeout: 272 seconds)
[18:00:09] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Quit: penguino)
[18:02:30] *** Quits: sweetsymph (uid509475@id-509475.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[18:02:57] *** Quits: Darkcoal (~user@user/Darkcoal) (Ping timeout: 252 seconds)
[18:05:38] *** Joins: Darkcoal (~user@user/Darkcoal)
[18:07:37] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[18:10:30] *** Quits: bzng (~bzng4@80-123-54-112.adsl.highway.telekom.at) (Quit: Leaving)
[18:11:25] *** Quits: Rynn (~rynn@216.30.158.198) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:12:50] *** Quits: oldlaptop (~quassel@45.63.78.126) (Ping timeout: 252 seconds)
[18:13:18] *** Joins: strajder (~strajder@user/strajder)
[18:14:21] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[18:14:43] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:20:29] *** Quits: matt|lib (~matt|lib@170.55.73.210) (Quit: Client closed)
[18:22:07] *** Joins: Klinda (~superleag@user/klinda)
[18:22:10] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:27:42] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-3d4d-3be7-c779-827a.inf6.spectrum.com) (Remote host closed the connection)
[18:28:15] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-3d4d-3be7-c779-827a.inf6.spectrum.com)
[18:28:31] *** Quits: nosolls (~nosollsma@user/nosolls) (Quit: Reconnecting)
[18:28:48] *** Joins: nosolls (~nosollsma@2001:470:69fc:105::1:c76e)
[18:29:54] *** Quits: nosolls (~nosollsma@2001:470:69fc:105::1:c76e) (Changing host)
[18:29:54] *** Joins: nosolls (~nosollsma@user/nosolls)
[18:30:28] *** Joins: KevinX (~KevinX@user/KevinX)
[18:35:08] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[18:37:49] *** Quits: unknow (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[18:41:03] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[18:41:28] *** Joins: slidercrank (~slidercra@user/slidercrank)
[18:43:17] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[18:47:53] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-3d4d-3be7-c779-827a.inf6.spectrum.com) (Ping timeout: 256 seconds)
[18:49:01] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:49:30] *** Joins: sant (~sant@170.81.141.210)
[18:52:02] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[18:53:05] *** Quits: sant (~sant@170.81.141.210) (Read error: Connection reset by peer)
[18:56:08] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[18:56:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[18:56:48] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:57:56] *** Quits: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com) (Ping timeout: 252 seconds)
[18:58:05] *** Joins: mahmutov_ (~mahmutov@37.155.16.84)
[18:58:33] *** Joins: sant (~sant@170.81.141.210)
[18:59:13] *** Joins: moog (~moog@98.97.86.136)
[18:59:15] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:00:00] *** Joins: oldlaptop (~oldlaptop@45.63.78.126)
[19:01:31] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:03:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:04:35] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Remote host closed the connection)
[19:05:56] *** Quits: alch (~alch@151.34.215.246) (Ping timeout: 272 seconds)
[19:06:08] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:06:27] *** Joins: Enitin (~Enitin@82.180.145.228)
[19:07:08] *** Joins: alch (~alch@151.34.153.160)
[19:08:43] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[19:08:53] *** Joins: ztx (~ztx@user/ztx)
[19:09:22] *** Joins: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de)
[19:10:20] *** Joins: danisanti (~daniel@user/danisanti)
[19:12:10] <danisanti> Is it ok for a function in a library that returns a string (char *) to ask for it's user to free that char * ?
[19:12:13] *** Quits: k0ta (3da8335bb9@2604:bf00:561:2000::10a) (Remote host closed the connection)
[19:12:13] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (Remote host closed the connection)
[19:12:13] *** Quits: jayaura (e2d69d141a@2604:bf00:561:2000::2b0) (Remote host closed the connection)
[19:12:13] *** Quits: mzal (7dc76dea13@2604:bf00:561:2000::69) (Remote host closed the connection)
[19:12:13] *** Quits: shreyasminocha (51fdc93eda@user/shreyasminocha) (Remote host closed the connection)
[19:12:13] *** Quits: sm2n (ae95cb1267@user/sm2n) (Write error: Broken pipe)
[19:12:13] *** Quits: tom5760 (73d4025b14@user/tom5760) (Write error: Broken pipe)
[19:12:13] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (Write error: Broken pipe)
[19:12:13] *** Quits: milesrout (ce261f06ff@2604:bf00:561:2000::257) (Write error: Broken pipe)
[19:12:13] *** Quits: colbyhub (411e4f2740@2604:bf00:561:2000::2de) (Read error: Connection reset by peer)
[19:12:13] *** Quits: trvv (555a816688@user/trvv) (Remote host closed the connection)
[19:12:13] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (Remote host closed the connection)
[19:12:13] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (Remote host closed the connection)
[19:12:13] *** Quits: blu (c99e8442f9@2604:bf00:561:2000::220) (Remote host closed the connection)
[19:12:14] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (Remote host closed the connection)
[19:12:14] *** Quits: fcresende (08f4f13bd6@2604:bf00:561:2000::307) (Remote host closed the connection)
[19:12:14] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (Remote host closed the connection)
[19:12:15] *** Quits: akspecs (00cc8321af@sourcehut/user/akspecs) (Remote host closed the connection)
[19:12:34] *** Joins: jayaura (e2d69d141a@2604:bf00:561:2000::2b0)
[19:12:34] *** Joins: mzal (7dc76dea13@2604:bf00:561:2000::69)
[19:12:40] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[19:12:41] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[19:12:48] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[19:12:48] *** Joins: k0ta (3da8335bb9@2604:bf00:561:2000::10a)
[19:12:48] *** Joins: shreyasminocha (51fdc93eda@user/shreyasminocha)
[19:12:48] *** Joins: tom5760 (73d4025b14@user/tom5760)
[19:12:48] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[19:12:50] *** Joins: sm2n (ae95cb1267@user/sm2n)
[19:12:50] *** Joins: akspecs (00cc8321af@sourcehut/user/akspecs)
[19:12:50] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[19:12:56] *** Joins: fcresende (08f4f13bd6@2604:bf00:561:2000::307)
[19:12:56] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[19:12:56] *** Joins: milesrout (ce261f06ff@2604:bf00:561:2000::257)
[19:13:03] *** Joins: trvv (555a816688@user/trvv)
[19:13:03] *** Joins: colbyhub (411e4f2740@2604:bf00:561:2000::2de)
[19:13:03] *** Joins: blu (c99e8442f9@2604:bf00:561:2000::220)
[19:13:29] <BtbN> danisanti, generally, no, unless you also supply a function to free it
[19:14:05] <BtbN> much better to just be given a buffer by the caller, and then fill it
[19:14:14] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Remote host closed the connection)
[19:14:30] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[19:14:42] <danisanti> BtbN: thanks
[19:15:41] <danisanti> BtbN: The string will have a non-deterministic size
[19:15:59] <BtbN> have a way to query that size then
[19:16:01] <rcf> danisanti: it's fine to do that, so long as it is very clearly indicated.
[19:16:10] <danisanti> so, can I instead of char * return a string[12] ?
[19:16:17] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com)
[19:16:27] <BtbN> you mean a stack allocated something? No, that's a very bad idea.
[19:17:01] *** Quits: nexus_ (~nexus@91-83-1-220.pool.digikabel.hu) (Ping timeout: 245 seconds)
[19:17:02] <BtbN> The problem with returning something you allocated is that the caller might be using a different memory allocator, so "Just call free() on it" is very dangerous
[19:17:30] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a896:dea:2287:d7fd)
[19:17:30] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a896:dea:2287:d7fd) (Changing host)
[19:17:30] *** Joins: skapata (~Skapata@user/skapata)
[19:17:40] <danisanti> BtbN: if I return a string[N], then the caller won't need the free(), right?
[19:17:58] <rcf> Depending on what you're doing, it is fine to write off those people entirely as users.
[19:18:13] * rcf takes a very dim view of custom allocators in general.
[19:18:15] <BtbN> if you return a string[n], it'll be invalid memory the moment your function returns
[19:18:31] <Dean> Where, when using C, would | & ^ << >> be useful? Bit manipulation? Can I call it that?
[19:18:35] <danisanti> BtbN: ok
[19:19:00] *** Joins: nexus_ (~nexus@80-95-69-192.pool.digikabel.hu)
[19:19:30] <rcf> Dean: of course.
[19:20:14] <danisanti> then, I have to supply the free function for the library. Even if the return is a char* (a string, which a free(string) would do it)?
[19:20:52] <markand> Dean, it's used a lot
[19:20:56] <Dean> ok thank you rcf
[19:21:14] <Dean> ok thanks markand i think i know what to research now
[19:21:37] <markand> instead of doing something like f(true, false, true, true, true, false) you can do something like f(VERBOSE | DEBUG | CREATE | HIDDEN)
[19:21:46] <markand> which is much more understandable that millions of bools
[19:22:03] <rcf> danisanti: I would oppose worrying about custom allocators unless you really need to. Most of the time it's premature optimization or some other cargo-cult nonsense driving their usage.
[19:22:11] <markand> you have this a lot in POSIX APIs (e.g. open("..", O_CREAT | O_EXCL, ...);_)
[19:22:28] <Dean> thank you markand
[19:23:02] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-1-225.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[19:24:08] <danisanti> rcf: the case that I am pointing is towards a non-memory-leak for the user of the function. so you are saying that I can make my library function allocate and ask the user to free() it?
[19:24:09] <zwr> Dean: they're about as useful as addition, except not many are familiar with them before programming like they are with addition
[19:26:17] <zwr> in the OpenSSH code they had a random string generator that needed 6 random bits per character, their RNG returned 32 random bits (an uint32_t), so they micro-optimized that by taking 6 bits out of the 32 bit integer at a time, with bitwise operators of course. I can't seem to find the code right now though
[19:26:28] <danisanti> BtbN: being a return of string char *, should I create a function in the library that frees for the user to do it, or can I just ask the user to use free() ?
[19:26:50] <rcf> danisanti: it is quite common to do that. As a rule I will gladly take memory leaks over buffer overflows, which you are begging for in assuming the user correctly calculates the size.
[19:26:53] <BtbN> You have to offer a function to free it, even if it's just a thin wrapper around free()
[19:27:46] <BtbN> Make sure it's an actual exported function, and not some inline thing in a header
[19:28:00] <danisanti> BtbN: rcf: you guys are awesome
[19:28:29] <BtbN> It's also very common style for functions that accept a buffer to fill to return the size of that buffer
[19:28:37] <BtbN> and when you pass in NULL for a buffer, only tell you the size
[19:29:04] <rcf> danisanti: whichever approach you take, the key is documentation. Nothing is worse than being left unsure if you are supposed to free something returned by a library function.
[19:29:28] <BtbN> like, for example good old snprintf
[19:29:42] <rcf> Whether the user likes what they have to do is secondary to the fact that it is clear to them.
[19:29:43] <pragma-> The plural of regex is regrets
[19:30:14] <BtbN> to get the size snprintf needs, you first call it with NULL for a buffer. Then it returns the size. You allocate, and then call it again
[19:30:31] <BtbN> In scenarious where the size isn't obvious that is
[19:30:34] <BtbN> -u
[19:30:49] <danisanti> good ideas
[19:30:56] <danisanti> thank you so much
[19:32:06] <danisanti> I will do a wrapper around free() solution
[19:32:57] *** Joins: kurahaupo (~kurahaupo@pa49-197-172-99.pa.qld.optusnet.com.au)
[19:33:35] <danisanti> because it is more performant than callling twice the function. The computer has to run the whole program in order to get the final size
[19:33:46] <danisanti> so it will not be doing that twice
[19:34:29] <danisanti> there is no other way around running the whole program/function
[19:35:09] *** Quits: Enitin (~Enitin@82.180.145.228) (Ping timeout: 256 seconds)
[19:35:49] *** Quits: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net) (Remote host closed the connection)
[19:36:04] *** Joins: dogbert2 (~Bill@ip70-170-79-7.lv.lv.cox.net)
[19:38:52] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[19:39:06] *** Quits: danisanti (~daniel@user/danisanti) (Ping timeout: 245 seconds)
[19:41:21] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[19:41:26] *** Quits: eddybilley (~freddieti@217.119.232.174) (Ping timeout: 250 seconds)
[19:43:55] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[19:43:59] *** Quits: SaltHillStroller (~SaltHillS@206.223.160.26) (Ping timeout: 256 seconds)
[19:44:54] *** Joins: Akiva (~Akiva@user/Akiva)
[19:45:00] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:45:56] *** Joins: icy_troubles (~icy_troub@dyn-pppoe-142-51-247-213.vianet.ca)
[19:46:55] *** Joins: KevinX (~KevinX@user/KevinX)
[19:50:13] *** Quits: icy_troubles (~icy_troub@dyn-pppoe-142-51-247-213.vianet.ca) (Ping timeout: 256 seconds)
[19:51:05] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[19:51:30] *** Joins: sebag (~guest@91.245.82.2)
[19:51:51] *** Quits: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu) (Ping timeout: 268 seconds)
[19:53:41] *** Joins: zsoltiv_ (~zsoltiv@85-235-95-111.naracom.hu)
[19:53:46] *** Inline__ is now known as Inline
[19:54:00] *** Quits: koo5_ (~quassel@51.140.155.227) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[19:54:55] *** Joins: koo5_ (~quassel@51.140.155.227)
[19:55:29] *** Joins: Stink (~chris@li670-83.members.linode.com)
[19:57:39] *** Joins: magla (~gelignite@55d4c150.access.ecotel.net)
[19:59:21] *** Joins: icy_troubles (~icy_troub@cpef81d0fa691a3-cmf81d0fa691a0.sdns.net.rogers.com)
[19:59:34] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[19:59:38] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[19:59:55] *** Joins: Giovanni (~Giovanni@176.55.166.222)
[20:00:06] *** Quits: sant (~sant@170.81.141.210) (Ping timeout: 252 seconds)
[20:00:10] *** Joins: sant (~sant@170.81.141.210)
[20:06:20] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (Remote host closed the connection)
[20:07:02] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[20:07:14] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[20:07:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[20:08:31] *** Joins: Betal (~Betal@user/betal)
[20:08:47] *** Joins: nwulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:10:15] *** Joins: FluffyMask (~masque@user/fluffymask)
[20:11:28] *** Joins: Atque (~Atque@user/atque)
[20:12:12] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 252 seconds)
[20:12:47] *** Quits: sant (~sant@170.81.141.210) (Quit: sant)
[20:13:16] *** Joins: eddybilley (~freddieti@2a02:a454:7f89:1:e002:109f:447c:e388)
[20:13:21] *** Joins: bch (~bch@S01069050ca2cbf63.ok.shawcable.net)
[20:15:50] *** Joins: MrFantastik (~f@176.108.141.162)
[20:17:23] *** Joins: gproto23_ (~gproto23@user/gproto23)
[20:17:32] *** Quits: eddybilley (~freddieti@2a02:a454:7f89:1:e002:109f:447c:e388) (Ping timeout: 240 seconds)
[20:19:24] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 272 seconds)
[20:19:26] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[20:19:54] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 252 seconds)
[20:23:33] *** Joins: vekay (~vekay@user/vekay)
[20:24:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[20:25:38] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:25:53] *** Joins: Enitin (~Enitin@82.102.22.85)
[20:29:48] *** Quits: poprocks (~logan@user/poprocks) (Read error: Connection reset by peer)
[20:30:35] *** Joins: Waynes (~Waynes@user/waynes)
[20:31:17] *** Quits: Dean (~Dean@user/De4n-Whit3/x-9385125) (Ping timeout: 240 seconds)
[20:32:01] *** Quits: jkotra (~jkotra@122.169.141.242) (Quit: ZNC 1.8.2+deb2 - https://znc.in)
[20:32:20] *** Joins: jkotra (~jkotra@122.169.141.242)
[20:33:10] *** Quits: fe23 (~fe23@2409:8a34:466:6010:50d1:7544:c60d:ec26) (Quit: fe23)
[20:33:39] *** Quits: ncrowl (~ncrowl@31-208-86-111.cust.bredband2.com) (Ping timeout: 252 seconds)
[20:34:45] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 252 seconds)
[20:35:11] *** Joins: ncrowl (~ncrowl@31-208-86-61.cust.bredband2.com)
[20:36:04] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[20:38:22] *** Joins: mra90 (~mra@192.55.55.57)
[20:40:42] *** Joins: Praise (~Fat@user/praise)
[20:41:20] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[20:41:45] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:42:36] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[20:43:07] *** Joins: omegatron (~some@p5b056cb8.dip0.t-ipconnect.de)
[20:50:20] *** Joins: danisanti (~daniel@user/danisanti)
[20:54:46] *** Quits: danisanti (~daniel@user/danisanti) (Read error: Connection reset by peer)
[20:55:43] *** Joins: danisanti (~daniel@user/danisanti)
[20:55:46] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:56:31] *** Joins: rgrinberg (~textual@177.244.18.30)
[20:56:57] *** Joins: mattil (~mattil@helsinki.portalify.com)
[20:57:18] *** Parts: danisanti (~daniel@user/danisanti) ()
[20:59:53] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[21:05:33] *** Quits: meator (~meator@user/meator) (Read error: Connection reset by peer)
[21:05:43] *** Quits: aniruddha (uid340443@id-340443.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:06:36] *** Joins: meator (~meator@user/meator)
[21:06:52] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:07:32] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[21:08:46] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[21:09:05] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:10:02] *** Joins: rgrinberg (~textual@177.244.18.30)
[21:13:09] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed)
[21:13:19] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:15:00] *** Quits: seninha (~chatzilla@user/seninha) (Quit: ChatZilla 0.9.93 [SeaMonkey 2.53.10.2/20220226204633])
[21:15:25] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[21:15:43] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[21:18:12] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 252 seconds)
[21:24:39] *** Joins: Figworm (FiggyWitIt@user/figworm)
[21:25:47] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:26:27] *** Quits: the_lanetly_052 (~the_lanet@194.135.155.189) (Ping timeout: 252 seconds)
[21:31:04] *** Quits: oldlaptop (~oldlaptop@45.63.78.126) (Ping timeout: 250 seconds)
[21:36:36] *** Quits: MrFantastik (~f@176.108.141.162) (Ping timeout: 245 seconds)
[21:39:01] *** Quits: nexus_ (~nexus@80-95-69-192.pool.digikabel.hu) (Ping timeout: 256 seconds)
[21:40:32] *** Joins: nexus_ (~nexus@fibhost-67-47-34.fibernet.hu)
[21:40:57] *** Joins: oldlaptop (~oldlaptop@45.63.78.126)
[21:41:26] <SaltHilStroller_> Is there a way to assert at compile time that a *specified* struct parameter is initialized?
[21:43:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:30f3:94a8:6231:86ed) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:44:14] <NRK> initialized to what?
[21:45:09] <Amun-Ra> hmm… make struct private and expose only public init function
[21:45:46] <Amun-Ra> ah, wrong channel (wrong language)
[21:46:18] <caze> SaltHilStroller_: What do you mean by *specified*?
[21:47:01] <SaltHilStroller_> caze: I belive there is some flag in GCC to alert to unitialized struct parameters. But I'm only interested in ensuring one parameter in one struct type is always specified
[21:47:43] *** Joins: thomas25 (thomas25@brought.to.you.by.bnc4free.com)
[21:47:51] <caze> SaltHilStroller_: Make a setter function, and only access the struct through that. Put a flag in the struct, and have the setter function set the flag whenever it is called.
[21:48:05] *** Joins: reset (~reset@user/reset)
[21:48:31] <thomas25> any recommended code quality analyzers for embedded C. automation (github etc) would be a plus.
[21:50:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-c158-e30b-7e5e-fcd2.res6.spectrum.com) (Remote host closed the connection)
[21:50:34] *** Joins: tiotags (~tiotags@user/tiotags)
[21:51:34] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:51:55] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[21:59:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:00:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[22:01:36] *** Quits: l4s8g (~l4s8g@pd9e62e01.dip0.t-ipconnect.de) (Quit: l4s8g)
[22:02:29] <SaltHilStroller_> caze: Unfortunately that does nothing for me at compile time
[22:03:44] <caze> SaltHilStroller_: Why compile time?
[22:04:37] <SaltHilStroller_> caze: A large codebase with multiple targets and codepaths that would be difficult to test at runtime
[22:05:06] <caze> If you hid the struct behind an API, then you wouldn't have to test.
[22:05:25] <caze> Although it sounds like it's too late to introduce a new API.
[22:05:47] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:06:04] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[22:07:05] <SaltHilStroller_> Yeah, unfortunately
[22:07:44] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[22:08:13] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Ping timeout: 240 seconds)
[22:08:13] <NRK> i think compilers should warn if they detect uninitialized variable usage
[22:08:15] <SaltHilStroller_> It feels like there should definitely be some static analysis available that would check this. All the struct definitions are available at compile time
[22:08:31] <caze> SaltHilStroller_: But the strategy is to hide the struct definition, so that you can't access the members directly.
[22:08:40] <NRK> i typically get those warnings more at -O3
[22:08:49] *** Joins: Dean (~Dean@165-73-119-36.ip.afrihost.capetown)
[22:09:04] <caze> Only the getter/setter functions would have direct access to the members.
[22:10:02] <caze> SaltHilStroller_: So you'd have an allocater function that would set the init flag to 0. And the setter function would set it to 1.
[22:11:45] <NRK> i don't think that solves the problem though. if the thing is uninitialized, then the flag might have 1.
[22:11:49] <SaltHilStroller_> NRK: What's the difference between an intentional and unintentional not-initialized variable :) The compiler doesn't have the context to konw that
[22:12:06] <NRK> meaning if the caller didn't first allocate.
[22:12:19] <NRK> ,cc int a; int b = a;
[22:12:21] <candide> NRK: [warning: 'a' is used uninitialized [-Wuninitialized]  note: 'a' was declared here] no output: a = 0; b = 0
[22:12:23] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[22:12:24] <caze> NRK: If it's uninitialized, the flag would have 0.
[22:12:31] <SaltHilStroller_> I.e. `struct foo {int a; int b}; struct foo = { .a = 5 }
[22:12:43] <caze> NRK: The caller can *only* allocate.
[22:12:48] <Dean> hi caze
[22:12:53] <caze> hi Dean
[22:12:54] <NRK> caze: uninit stuff on the stack can have any value
[22:13:10] *** Joins: teepee (~teepee@openscad/teepee)
[22:13:23] <caze> NRK: It can't be automatic. The struct definition isn't available.
[22:13:25] <NRK> SaltHilStroller_: that's an initialized struct.
[22:13:39] <caze> You would get a compile error.
[22:13:39] <NRK> b is initialized to zero there.
[22:13:47] <SaltHilStroller_> Okay fair enough
[22:13:57] <SaltHilStroller_> I want to ensure a specific value is not zero
[22:14:08] <zer0python> I thought you could only do the .var = ... when it was an initialization, otherwise you'd use foo.a = 5;
[22:14:45] <caze> zer0python: Yes.
[22:15:06] <zer0python> caze: depends on architecture. on x86/x86_64 it sub's from the stack, so whatever is there is what it will use.
[22:15:15] <NRK> caze: i thought we're not talking about opaque/incomplete types.
[22:15:18] <zer0python> if you want to ensure 0, you should do int a = 0;
[22:15:20] <NRK> he said it's too late for that
[22:16:24] <caze> NRK: I said it was too late. But I was just explaining how it would work if it weren't.
[22:16:35] <caze> zer0python: What are you talking about?
[22:17:49] <NRK> caze: ah, right. i was just getting things mixed up then.
[22:18:58] *** Joins: freakazoid333 (~matt@2603-9000-cf03-86c3-7da2-d52d-7c03-c4c8.inf6.spectrum.com)
[22:22:06] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:24:41] *** Joins: rgrinberg (~textual@177.244.18.30)
[22:25:15] *** Joins: lle (~lle@2001:ac8:24:77::2d)
[22:27:42] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:28:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[22:28:25] *** Joins: Atque (~Atque@user/atque)
[22:30:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:30:24] *** Joins: KevinX (~KevinX@user/KevinX)
[22:31:18] *** Quits: wlemuel (~wlemuel@210.22.124.110) (Read error: Connection reset by peer)
[22:34:01] *** Joins: cassepipe (~cassepipe@81-66-251-102.rev.numericable.fr)
[22:34:40] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:35:46] *** Joins: wlemuel (~wlemuel@210.22.124.110)
[22:37:19] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:38:21] *** Joins: Narrat (~omnius@p200300df5f4c41b706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:39:09] *** Joins: rgrinberg (~textual@177.244.18.30)
[22:43:26] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[22:43:42] *** Parts: thomas25 (thomas25@brought.to.you.by.bnc4free.com) (Textual IRC Client: www.textualapp.com)
[22:44:35] *** Quits: lle (~lle@2001:ac8:24:77::2d) (Quit: Textual IRC Client: www.textualapp.com)
[22:44:56] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[22:44:58] *** Quits: cart_ (~cart@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[22:45:04] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:45:06] *** Joins: shivesh (~shivesh@user/shivesh)
[22:46:44] *** Quits: Narrat (~omnius@p200300df5f4c41b706ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[22:46:57] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[22:47:18] *** Joins: Narrat (~omnius@p200300df5f4c41b706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:47:36] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[22:48:07] *** Joins: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com)
[22:49:38] *** Quits: Darkcoal (~user@user/Darkcoal) (Quit: Darkcoal)
[22:50:16] *** imm__ is now known as imm_
[22:52:28] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (Quit: leaving)
[22:53:19] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[22:53:53] *** Quits: Narrat (~omnius@p200300df5f4c41b706ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[22:55:13] *** Joins: Narrat (~omnius@p200300df5f4c41b706ea56fffe2e7cdc.dip0.t-ipconnect.de)
[22:56:24] *** Quits: KevinX (~KevinX@user/KevinX) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:56:32] *** Joins: andai (~andai@86.32.36.28)
[22:57:14] *** Joins: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac)
[23:01:15] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[23:01:27] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:8036:392e:550f:f6cb)
[23:01:29] *** southey2 is now known as foxtrot
[23:02:07] *** Joins: KevinX (~KevinX@user/KevinX)
[23:02:42] *** Quits: alch (~alch@151.34.153.160) (Read error: Connection reset by peer)
[23:06:00] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:06:09] *** Quits: Waynes (~Waynes@user/waynes) (Quit: Leaving.)
[23:06:45] *** Quits: tiotags (~tiotags@user/tiotags) (Quit: Leaving)
[23:07:27] *** Joins: alch (~alch@151.68.223.250)
[23:10:57] *** Quits: [R] (~rs@genoce.org) (Ping timeout: 240 seconds)
[23:12:21] *** Joins: [R] (~rs@genoce.org)
[23:14:08] *** Joins: semeion (~semeion@user/semeion)
[23:17:05] *** Joins: unlink_ (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de)
[23:17:25] <Dean> is "interleaving" the compilers way of executing an expression, in any order it sees fit (in terms of operands), to ensure optimal runtime?
[23:18:16] *** Quits: unlink2 (~unlink@p200300ebcf17f000a0e82b17ad9d82cf.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[23:18:26] <caze> ,c11 interleaving
[23:18:29] <candide> Displaying 1 of 3 matches: http://www.iso-9899.info/n1570.html#5.1.2.4p1 [Multi-threaded executions and data races] Under a hosted implementation, a program can have more than one thread of execution (or thread ) running concurrently. The execution of each thread proceeds as defined by the remainder of this standard. The execution of the entire program consists of an execution of all of its threads.14) Un... <truncated; https://0x0.st/oZEu.txt>
[23:19:11] <nitrix> Branch predictors have a predictable default. Codegens will emit instructions such that the default scenario is the most likely to get the most advantage of the predictor.
[23:19:29] <cehteh> + filling pipelines optimally
[23:19:44] <caze> Dean: Motivation is not really the job of the specification. Alternative motivations could be simply to allow the compiler writer to be lazy.
[23:19:47] <nitrix> After that, hardware is free to completely re-order everything as long as the guards/fences are maintained.
[23:23:33] <Dean> a hosted environment is like on the computer. and a free standing environment would be an iot device? so interleaving has to do with streams? today was the first day i found the term 'interleaving'.
[23:23:57] <cehteh> in intel terms that translates to "hardware is completely free to extract your private keys from memory while it renders some webpage" :)
[23:24:18] <nitrix> A hosted environment has to provide the entire standard library and usually implies an operating system of some sort to help with the memory management.
[23:25:16] <nitrix> A free standing environment has lesser requirements; parts of the standard library are optional (most notably malloc/free).
[23:26:20] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[23:26:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Ping timeout: 252 seconds)
[23:26:22] <nitrix> It's useful for embedded devices where the only program running is your own, with memory-mapped devices and usually direct access to the physical memory as well.
[23:26:42] <Dean> ok thank you nitrix caze and cehteh. hosted environment would be like windows, macOs, and some flavor of linux? and interleaving has to do with streams running concurrently in an optimal manner?
[23:27:37] <cehteh> the term 'interleaving' is used in a lot contexts, dunno what you exactly mean here
[23:29:11] *** Quits: rgrinberg (~textual@177.244.18.30) (Ping timeout: 256 seconds)
[23:29:12] <Dean> Its used in the summary of a chapter in a book I am using to learn c. "You also learned how operator precedence, associativity, order of evaluation, sequencing, and interleaving can affect the total order in which a
[23:29:17] <Dean> program is executed."
[23:29:19] <nitrix> Interleaving normally implies parallel streams of events having to synchronize to a single stream of events, where you have a mechanism of some kind to decide how that unfolds.
[23:29:22] <caze> Dean: "streams" isn't quite the right word.
[23:29:48] <nitrix> You see it with instruction pipelines in modern processors. You see it in multithreaded applications writing to sockets and files. The list is large.
[23:30:09] *** Joins: agrosant (~agrosant@46.12.50.59.dsl.dyn.forthnet.gr)
[23:30:58] <Dean> caze. it can be any arrangement of data in a non sequential manner? for efficiency?
[23:31:03] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:31:09] <Dean> ok, thank you nitrix so it has a wide usage
[23:31:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:31:26] *** Quits: gproto23_ (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[23:31:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[23:31:53] <cehteh> it doesnt relate much to hosted/non-hosted ... except that on some embeded controllers you want clock accurate execution without surprises
[23:32:04] <cehteh> and those are often programmed non hosted
[23:32:19] *** Joins: rgrinberg (~textual@177.244.18.30)
[23:32:51] <nitrix> The C Standard talks about interleaving with regards to the execution of instructions in threads, but it's rather simple (things just have to remind sequentially consistent).
[23:33:38] *** Quits: vekay (~vekay@user/vekay) (Quit: Leaving)
[23:33:47] *** Lord_of_Life_ is now known as Lord_of_Life
[23:34:14] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:34:17] <nitrix> One thread does 1,2,3 and another does A,B,C, you can have any intermediate sequential permutations. 1,2,3,A,B,C. 1,A,2,B,3,C, etc.
[23:35:15] *** Joins: RicardasSim (~RicardasS@78-63-172-44.static.zebra.lt)
[23:35:36] <Dean> ooh ok nitrix so whichever is more optimal for memory efficiency?
[23:35:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:35:57] <nitrix> Well, by default it's memory_order_seq_cst, but there are other modes of operation.
[23:36:21] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:36:32] <nitrix> Sometimes you only need to guarantee that the reads or the writes to be sequential and/or consistent.
[23:36:59] <nitrix> That's what atomics added in C11 lets you control, albeit you rarely really have to tweak them.
[23:37:01] <Dean> i don't know this modes of operation yet. its not the same as like writing/reading a file?
[23:37:06] <caze> I think Dean was asking about interleaving in the context of something much more basic than threads.
[23:37:35] *** Joins: sweetsymph (uid509475@id-509475.lymington.irccloud.com)
[23:37:53] <Dean> that sounds about right caze.
[23:38:00] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:38:51] <nitrix> I don't think C itself has other mentions of interleaved operations outside of that; that'd be up to the compiler implementations.
[23:40:20] <Dean> it is for efficiency purposes in terms of memory? nitrix or it's a bigger thing.
[23:40:26] <Dean> ?
[23:41:47] <twkm> if a machine is a vector processor it might evaluate expressions in parallel.
[23:41:50] <nitrix> I don't understand the question about efficiency. When you interleave something, you simply mesh one set into another, preserving their respective orderings.
[23:41:51] *** Quits: anshupatia (uid29854@id-29854.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[23:41:59] <nitrix> You don't have less or more elements.
[23:42:47] <nitrix> Interleaved operations will appear like they're being doing concurrently, but wont actually be in parallel.
[23:42:52] <nitrix> *done
[23:43:06] *** Quits: merrinx (~merrinx@ti0028a400-3686.bb.online.no) (Quit: WeeChat 3.3)
[23:43:23] <Dean> nitrix what is the purpose of interleaving?
[23:43:48] <Dean> is it a high level technique?
[23:43:56] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[23:44:06] <nitrix> You're asking me what the purpose of addition is.
[23:44:07] <twkm> get multiple things done in a unit of time.
[23:44:24] <caze> Dean: https://ideone.com/NILenX
[23:44:29] <nitrix> Merging two sets and preserving their ordering solves various problems where, well, sets and orderings are involved.
[23:44:47] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.4)
[23:45:20] <nitrix> It's semantically important. There isn't a performance implication directly attached to that.
[23:45:24] *** Quits: MajorBiscuit (~MajorBisc@c-001-018-036.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[23:45:28] <nitrix> You still have the same number of elements that you started with.
[23:45:34] <Dean> caze: it really is just addition?
[23:45:59] <Dean> twkm thank you. so it's for speed purposes? things get done faster?
[23:46:02] <caze> Dean: The function foo might be called, paused at say, line 5, and then the function call to bar might be called and run to completion, before the foo call is completed.
[23:46:28] <Dean> caze: fascinating! o.o but then you still get the right output in the end of 3?
[23:46:34] <caze> Dean: Or they might be run in parallel.
[23:46:53] <nitrix> Interleaving in the context of execution of instructions gives you essentially a time sharing system, aka a scheduler.
[23:46:55] <caze> Dean: If interleaving is done, it's required to appear as if it's not being done.
[23:47:00] *** Joins: Allah (~Allah@wsip-174-71-193-82.lv.lv.cox.net)
[23:47:10] <Dean> nitrix: so it is for speed purposes?
[23:47:31] *** Joins: Norkle (~norkle@admin.nasa-g0v.com)
[23:47:34] <nitrix> No. You're still working with the same exact time budget.
[23:47:35] <caze> Dean: Did you see what I wrote earlier? > Dean: Motivation is not really the job of the specification. Alternative motivations could be simply to allow the compiler writer to be lazy
[23:47:36] <Dean> caze: fascinating. why? so that it looks natural while it all happened very fast?
[23:47:50] <caze> Dean: Because it's not allowed to break the semantics of the language.
[23:48:11] <caze> That would make the language unuseable.
[23:48:16] <Dean> caze: yes, i saw that. it's a very confusing statement for me. lazy is not the normal lazy? it's a CS term?
[23:48:38] <caze> Dean: No, I mean developer time and resources being spent on the project.
[23:48:57] *** Parts: Allah (~Allah@wsip-174-71-193-82.lv.lv.cox.net) ()
[23:49:24] <caze> Dean: For instance, this is a specification compliant implementation of malloc: void *malloc(size_t n) { return NULL; }
[23:49:24] <Dean> caze: so in order to write the compiler quickly they use interleaving? although its not really recommended?
[23:49:35] <caze> Dean: It's an option.
[23:49:38] <nitrix> Dean, If you have two sets of 3 tasks (e.g. 1,2,3 and A,B,C) and each tasks takes an hour, interleaving them (1,A,2,B,3,C) just gives them a fair chance to progress through both sets simultanously. They, still, have to be sequential and the total time need will still be 6 hours. It's not a performance thing.
[23:49:55] *** Joins: Allah (~Allah@wsip-174-71-193-82.lv.lv.cox.net)
[23:50:14] <Dean> nitrix: hmm. okay. so it doesn't make things faster or more efficient. it's just another way of implementing something?
[23:50:20] <twkm> not so much for speed, rather for efficiency which turns out to sometimes be faster.
[23:50:40] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:51:30] <caze> Dean: Here is another example of interleaving: (a = b) + (c = d)
[23:51:42] <Dean> twkm for memory efficiency on a motherboard level? but it's not neccesarily faster or more efficient, but an attempt at it?
[23:51:43] *** Quits: Allah (~Allah@wsip-174-71-193-82.lv.lv.cox.net) (Quit: Client closed)
[23:51:59] <caze> Dean: It's simply to provide flexibility for the compiler developer.
[23:52:03] <Dean> caze: isn't that just order of operations? or associativity?
[23:52:08] <Dean> ooh ok.
[23:52:20] <caze> Dean: In fact, d could be the first thing to be evaluated.
[23:52:44] <Dean> ok so it's just a way of implementing a compiler? caze
[23:52:48] <caze> An interleaving sequence could be d a c b
[23:53:01] <nitrix> Dean, You can merge two sets in various ways. Interleaving the members of the two sets is one such way. Its main defining characteristic is that the ordering is preserved. Kind of like when you slide a zipper up/down. Teeth on the left side meshes with teeth on the right side, one after the other.
[23:53:04] <caze> Dean: Yes.
[23:53:36] <nitrix> Dean, left, then right, then left, then right, etc. In turn. They preserve their original ordering but become combined into a single sequence.
[23:54:14] <caze> Dean: What book are you reading?
[23:54:19] <Dean> ok thank you everyone. i think i understand now.
[23:54:51] <Dean> caze it is called "Effective C" by Robert C Seacord.
[23:54:54] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[23:55:19] <nitrix> Dean, (1,2,3) and (A,B,C) could also be interleaved as (1,2,A,B,3,C), because even though they've been merged together, 1,2,3 still kept its order and so did A,B,C. Hence it's properly interleaved.
[23:55:31] *** Quits: rgrinberg (~textual@177.244.18.30) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:55:39] <Dean> I just finished chapter 4. I did some of the Introduction to Computer Science on Edx. The cs50 course starts with C. But it feels like they skipped over so much of C, so I took a break from the cours to learn C. It's a really enjoyable language, but it is complicated for me.
[23:56:05] <Dean> ah ok i see nitrix thank you.
[23:56:09] <caze> Dean: Can you look up "interleaving" in the book's index?
[23:56:17] <nitrix> It's not as _fair_, there's a bias one one side, but it's still interleaved.
[23:56:47] *** Joins: rgrinberg (~textual@177.244.18.30)
[23:57:03] <caze> I'm not certain that we're talking about interleaving in the same context that the book uses it.
[23:57:24] <nitrix> I don't recall Effective C talking about interleaving at all.
[23:57:33] <caze> He just quoted it.
[23:57:53] <Dean> *_* caze you are so amazing. thank you sir. I will reread the Order of Evaluation section again. now that I understand the general term better.
[23:58:11] <caze> Dean: There is no order of evaluation.
[23:58:18] *** Quits: slidercrank (~slidercra@user/slidercrank) (Quit: Why not ask me about Sevastopol's safety protocols?)
[23:58:38] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:58:40] <Dean> Chapter 4, page 64 has a section "Order of Evaluation" where they first start using the term "interleaving".
[23:59:09] <caze> Dean: There is binding of operands to operators. Basically, when you have operators and operands mixed together, the job is to figure out which operator gets which operands.
[23:59:14] <Dean> ". The only
[23:59:14] <Dean> sequencing guarantees provided by this code are that both f and g are called
[23:59:16] <Dean> before max, and that the executions of f and g do not interleave."
[23:59:52] <nitrix> That's a cute X/Y problem.
[23:59:53] <caze> Dean: What's the example?
