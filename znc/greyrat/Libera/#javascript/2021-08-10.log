[00:00:16] *** Joins: Crash1hd (~Crash1hd@25.78.247.35.bc.googleusercontent.com)
[00:00:36] <Crash1hd> can anyone assist me on making this work? console.log([].constructor(10).map((_,i)=>i))
[00:00:58] <Crash1hd> I just want a single line that creates an array like so [1,2,3,4,5,6,7,8,9,0]
[00:01:53] <theskillwithin> n> Array.from({ length: 10 ), (_, i) => i)
[00:01:54] <jellobot> (fail) SyntaxError: Unexpected token ')'
[00:02:11] <theskillwithin> n> Array.from({ length: 10 }, (_, i) => i)
[00:02:12] <jellobot> (okay) [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]
[00:03:24] *** Joins: summersault (~summersau@179.221.251.16)
[00:03:25] <Crash1hd> theskillwithin, thankyou. :) and add  + 1 to i on the end is perfect
[00:03:32] <Crash1hd> any way to change the 10 to 0 though?
[00:04:04] <Crash1hd> nm
[00:04:06] <Crash1hd> console.log(Array.from({length: 10}, (_, i) => i + 1 < 10 ? i + 1 : 0))
[00:04:07] <Crash1hd> works
[00:06:00] <Crash1hd> theskillwithin, thank you again :)
[00:06:05] <theskillwithin> np
[00:08:52] *** Parts: lidenbrock (~lidenbroc@2804:14c:32:8120:a109:dea1:e873:f9a8) ()
[00:13:14] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:588:f27d:ab41:1311:18e6)
[00:13:44] *** Joins: zebrag (~chris@user/zebrag)
[00:15:22] *** Joins: fikran (~fikran@user/fikran)
[00:16:00] <fikran> I have a really silly question that I'm embarassed to ask. I have an Ojbect called `props`. When I try to print it with Object.keys(props), I see that there are elements `env`, `softwareType` and `stage`. But I cannot seem to actually access those values.
[00:16:16] *** Joins: prometh (uid425119@id-425119.charlton.irccloud.com)
[00:16:44] <systemfault> props['env'] or props.env
[00:16:48] <prometh> would i want to work at google? i was told today that they work you until there's nothing left
[00:16:54] <fikran> I tried that!
[00:17:00] <fikran> console.log(`Test: ${props.stage}`)
[00:17:07] <systemfault> prometh: I'd do it for a year, looks good on a resume
[00:17:07] <fikran> that says the property 'statge' does not exist.
[00:17:17] *** Quits: Atum_ (~IRC@user/atum/x-2392232) (Quit: Atum_)
[00:17:18] <GreenJello> fikran, what's the exact output?
[00:17:18] <fikran> stage*
[00:17:27] <prometh> systemfault: that's what i'm thinking... do they pay everyone lots of money?
[00:17:28] <fikran> lib/logging-stack/logStack.ts:29:30 - error TS2339: Property 'stage' does not exist on type 'DeploymentStackProps'.
[00:17:43] <fikran> but...I set it.
[00:17:44] <systemfault> prometh: No clue
[00:17:44] <fikran> I see it
[00:17:46] <GreenJello> that's typescript not knowing the property exists
[00:18:15] <fikran> ohhh...so the underlying javascript knows, but the typescript doesn't.
[00:18:16] <GreenJello> it's not saying the property doesn't exist, just that you haven't communicated its existence to typescript
[00:18:18] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[00:18:19] <GreenJello> right
[00:18:25] <fikran> how...does one do that?
[00:18:43] <fikran> wow, I was on that for over an hour now
[00:18:55] <GreenJello> there's probably a type annotation you need to add it to
[00:19:04] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[00:20:06] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[00:20:14] <GreenJello> look for where DeploymentStackProps is defined
[00:20:55] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[00:20:55] *** jmcantrell is now known as Guest2124
[00:20:55] *** Quits: Guest2124 (~jmcantrel@user/jmcantrell) (Killed (erbium.libera.chat (Nickname regained by services)))
[00:20:55] *** __jmcantrell__ is now known as jmcantrell
[00:21:11] *** Joins: Guest2124 (~jmcantrel@user/jmcantrell)
[00:21:30] *** Quits: hygl (uid16621@id-16621.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[00:24:41] *** Quits: straykitten (~straykitt@subs24-116-206-8-61.three.co.id) (Ping timeout: 248 seconds)
[00:24:49] *** Joins: jokoon (~eio@2a01:e0a:542:e160:30f8:ebee:cb3d:7fb4)
[00:24:51] <jokoon> hello
[00:25:09] <jokoon> is it possible to use the mouse coordinate with js events in SVG?
[00:26:18] <GreenJello> I don't know of any reason it wouldn't work. What issue are you running into?
[00:26:23] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[00:26:38] *** Guest2124 is now known as jmcantrell
[00:28:04] <jokoon> wondering about the SVG canvas having a scaled coordinate space
[00:28:34] <entuland> don't mix up the internal coordinates (viewbox) with the actual size of the element
[00:28:39] <entuland> the two things are separated
[00:28:48] <entuland> I use SVGs all over the place for that
[00:28:49] <jokoon> mmmh
[00:29:00] <jokoon> so I cant use the coordinates of SVG objects directly?
[00:29:07] <entuland> so that I can scale / skew the element without affecting the internal coordinate system
[00:29:15] <entuland> you can convert them if needed
[00:29:22] <entuland> it really depends on your end goal
[00:29:49] <jokoon> I want the nearest object amount about 200
[00:29:59] <jokoon> so linear search is ok
[00:30:25] <entuland> you could first convert the mouse coordinates into internal coordinates to find the corresponding coords in SVG reference, then do the lookup in that reference
[00:30:53] <jokoon> yeah well it's a plotting thing, so it's going to be a little painful
[00:31:01] <entuland> it's all about not losing track of the coordinate system you're working with at every step
[00:31:23] <entuland> pain goes away once you create small conversion functions with clear names
[00:32:02] <jokoon> the scaling might change so I would need to have scaling parameters etc
[00:32:15] *** Joins: anton (anton@tloks.com)
[00:32:25] <entuland> that's why I pretty much never use scaling on the main SVG element
[00:32:47] <entuland> that way the only things I have to know to convert are the viewbox values and the real size of the lement
[00:32:51] <entuland> *element
[00:32:54] <jokoon> and how do you avoid scaling?
[00:33:08] <entuland> I refer to scale transforms on the main SVG element
[00:33:23] <entuland> I simply change the size of the element with width / height via CSS
[00:33:37] <entuland> after all SVG won't care
[00:34:41] <jokoon> mmmh
[00:34:59] <jokoon> so you just change width and height on <svg> ?
[00:35:12] <entuland> yes, but not as attributes, via style
[00:36:02] <entuland> actually, I don't even alter both, I only change the width and I let the aspect ratio take care of the height (where I care about preserving the ratio)
[00:37:03] <entuland> when I have to do coordinate system conversion I either use a single multiplier for both, or I query clientHeight if I need to
[00:37:05] *** Quits: anton (anton@tloks.com) (Client Quit)
[00:37:09] *** Joins: straykitten (~straykitt@subs24-116-206-8-46.three.co.id)
[00:37:26] *** Joins: anton (anton@tloks.com)
[00:39:34] <entuland> say the viewport is 100 and the mouse coordinate is 350, with the element taking 700, I just have to do 100 / 700 * 350 to get 50 (the corresponding SVG coordinate value for that mouse coordinate)
[00:41:00] <jokoon> and you can getElementById on a <g> ?
[00:41:22] <entuland> can't rememeber, you can check the docs or simply try it
[00:41:25] <entuland> most likely yes
[00:41:55] <entuland> nowadays I only use querySelector/All (or avoid it altogether keeping track of my elements as I create them, if I create them via JS
[00:42:26] <jokoon> oh yeah
[00:42:28] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[00:42:40] <jokoon> I don't remember how to iterate, the syntax is hairy
[00:42:52] <entuland> why?
[00:43:03] <entuland> there are many ways, which one you refer to?
[00:43:04] <jokoon> to iterate over the children of a node
[00:43:14] <jokoon> what's the simplest?
[00:43:21] <entuland> you mean writing explicit for loops?
[00:43:45] <jokoon> no, iterating children on a getelementbyid
[00:43:59] <entuland> you can avoid them most if not all the time, with map() forEach() and various other helper functions on the arrays
[00:44:30] <silly> or target explicitly with querySelectorAll
[00:44:59] <entuland> yes, :scope is very handy for that
[00:45:05] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Quit: Haxxa flies away.)
[00:46:08] *** Joins: Haxxa (~Haxxa@122.199.45.186)
[00:46:58] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 256 seconds)
[00:50:57] <jokoon> so, elem.cx and cy?
[00:50:58] *** Quits: anton (anton@tloks.com) (Remote host closed the connection)
[00:51:42] <jokoon> mmmh
[00:51:59] <jokoon> I'm always lost when it comes to find info about the attribute of whatever things in the dom
[00:54:45] <silly> you can use devtools and the js console. select an element and after typing $0. in the console you get an autocomplete box or just $0 should log something you can unfold and view
[01:03:45] <jokoon> I have <g id="points"><circle cx="0.2" cy etc
[01:04:06] <jokoon> points_those = document.getElementById('points');
[01:04:28] <jokoon> for (var i = 0; i < points_those.children.length; i++) { elem = points_those.children[i]; ...
[01:04:53] <jokoon> elem.cx outputs some other attributes which is not a number
[01:05:37] <entuland> did you check whether you can access that attribute directly on the element like that?
[01:05:46] <entuland> also, if at all possible, avoid the explicit for loop
[01:05:48] <jokoon> SVGAnimatedLength { baseVal: SVGLength, animVal: SVGLength }
[01:06:17] <jokoon> why couldn't I access them?
[01:06:37] <entuland> I have no idea, did you check? you mention you're not getting the output you expect
[01:06:57] <entuland> it's like trying to read "element.class" expecting it to work, whereas it's element.className, or something
[01:07:16] <entuland> not all attributes of a tag end up as members of the corresponding JS elements
[01:08:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:09:05] <jokoon> mmmh
[01:09:06] <entuland> in other words, you may need elem.getAttribute("cx")
[01:09:48] <jokoon> thanks
[01:09:59] <entuland> seems like they can be accessed also via elem.style.cx - but that will likely NOT return the value of the attribute
[01:10:29] *** Joins: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com)
[01:11:15] *** Joins: matsaman (~matsaman@user/matsaman)
[01:12:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[01:13:12] <cthulchu> my wonderful folks, I just realized I don't remember the last time I made a for or a while loop. I solve incredible amount of problems with array functions.
[01:13:36] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[01:13:48] *** Quits: CoJaBo_ (~aztec@c-73-64-56-249.hsd1.pa.comcast.net) (Changing host)
[01:13:48] *** Joins: CoJaBo_ (~aztec@user/CoJaBo)
[01:14:22] *** Joins: fikran (~fikran@user/fikran)
[01:14:45] <entuland> I just checked my own current codebase - I have literally only 2 explicit for loops, where I'm dealing with coordinate ranges
[01:15:46] <entuland> and three for-in loops, all the others are array functions
[01:16:22] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[01:17:09] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[01:17:19] <jokoon> can I set arbitrary data on a SVG element?
[01:17:32] <GreenJello> with data-attributes, sure
[01:17:52] <jokoon> something like elem.blablabla = "SOMETHING" ?
[01:17:57] <entuland> no
[01:18:04] <entuland> elem.dataset.blablabla
[01:18:24] <GreenJello> ^
[01:18:25] <entuland> and beware that they all end up as strings in actual data-something attributes in the tag
[01:18:38] <jokoon> <circle blablabla="TROUBADOUR"> ?
[01:18:50] <entuland> no, <circle data-blablabla="
[01:19:05] <entuland> may help opening the MDN docs and reading up on the stuff we point out
[01:23:40] <jokoon> So happy
[01:23:42] <jokoon> thanks
[01:23:53] <jokoon> I just made some simple plotting thing in JS and flask
[01:24:07] <jokoon> gonna make some video and post it online :)
[01:28:27] <jokoon> https://imgur.com/a/0eAXs4j
[01:29:48] <entuland> are you eval()ing that string?
[01:30:09] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[01:30:20] <entuland> wait, did we speak about that already a while ago, about filtering the input and only allowing certain stuff?
[01:30:41] *** Joins: jmft2 (~JMFT@81.149.115.87.dyn.plus.net)
[01:30:44] <jokoon> it only runs in localhost
[01:33:21] *** Joins: summersault (~summersau@179.221.251.16)
[01:34:42] *** Joins: cog (~Atlas@S0106f0f24965de23.ok.shawcable.net)
[01:35:04] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[01:38:06] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[01:38:25] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[01:39:28] <ljharb> FlorianBad: what i mean is, you shouldn't have to think about what's supported when and where. use babel, and the env preset, and let it handle transpilation.
[01:42:57] *** Joins: funhouse (~funhouse@user/funhouse)
[01:43:16] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[01:43:34] <foureyes> is it common to implement libraries in javascript as classes with a number of static methods, or do you export and object with a bunch of properties that are functions?
[01:43:45] <foureyes> export an object*
[01:44:09] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[01:45:06] *** Joins: Guest3778 (~Guest37@d207-189-236-135.yt.northwestel.net)
[01:45:22] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:46:37] <foureyes> I'm actually doing both, but the former when I need to call some of the functions from other functions
[01:46:58] <foureyes> this is just the first way it occurred to me to do this but I am wondering if the pros do something more clever :)
[01:47:29] <GreenJello> I'd avoid classes you don't want to instantiate
[01:47:46] <GreenJello> it's unnecessary and slightly confusing
[01:47:57] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 268 seconds)
[01:48:55] *** Joins: pulse (~pulse@user/pulse)
[01:49:21] <foureyes> yeah I don't want to instantiate... just called stuff like MyLib.makechangestoreactthings(reactthings, otherArgs)
[01:49:27] <foureyes> so what would you do?
[01:49:42] <foureyes> just export everything from a module like normal? :)
[01:49:55] <foureyes> not sure why I am doing this at all, come to think of it
[01:51:12] *** Joins: summersault (~summersau@179.221.251.16)
[01:53:02] *** Quits: jokoon (~eio@2a01:e0a:542:e160:30f8:ebee:cb3d:7fb4) (Quit: Leaving)
[01:53:27] <GreenJello> yeah, if authoring in common.js, then either set exports.foo = foo; or module.exports = { foo, bar }
[01:53:40] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[01:53:56] <foureyes> thanks
[01:54:26] <GreenJello> just don't do exports.foo = () => {}; as iirc that loses the function name in errors
[01:56:25] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 248 seconds)
[02:03:34] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[02:07:49] *** Joins: thiras (~thiras@user/thiras)
[02:08:24] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:09:34] *** Joins: summersault (~summersau@179.221.251.16)
[02:09:43] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[02:13:14] *** Joins: thiras (~thiras@user/thiras)
[02:17:45] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 248 seconds)
[02:18:32] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[02:19:49] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[02:20:21] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:23:06] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[02:23:50] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[02:24:41] *** Quits: straykitten (~straykitt@subs24-116-206-8-46.three.co.id) (Ping timeout: 248 seconds)
[02:28:52] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[02:30:00] *** Joins: thiras (~thiras@user/thiras)
[02:30:01] *** Quits: Sven_vB_ (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:03] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[02:30:03] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[02:30:03] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[02:30:27] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:31:14] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 256 seconds)
[02:32:41] <cthulchu> so... why does this not work? ==(1,2)
[02:32:57] <cthulchu> how do I make it work as a function I wonder...
[02:33:02] <cthulchu> I mean it is a function in the end
[02:33:43] *** buu_ is now known as buu
[02:37:07] *** Tobbi__ is now known as Tobbi
[02:37:10] *** Joins: straykitten (~straykitt@subs41-116-206-37-239.three.co.id)
[02:38:11] *** Joins: pavonia (~user@user/siracusa)
[02:40:25] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[02:40:51] <entuland> don't think there is such a thing in JS, cthulchu
[02:41:14] <cthulchu> I just want to show my wife how everything returns something, not just what is an obvious function
[02:42:31] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[02:42:48] <entuland> you could just explain the concept, if you need to show it where it's supported you could throw together a class with custom operator definitions in C++ or something
[02:44:03] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[02:44:05] <entuland> built-in facilities aren't constrained to have "function-like" shape like that in any arbitrary language
[02:44:27] *** Joins: summersault (~summersau@179.221.251.16)
[02:44:41] *** Quits: prometh (uid425119@id-425119.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[02:45:13] *** Joins: Tetractys (~Tetractys@109-93-61-88.dynamic.isp.telekom.rs)
[02:48:03] <cthulchu> oh
[02:48:05] <cthulchu> really?
[02:48:26] <cthulchu> I mean, yes, sure, some things would have to be implemented on a lower level than JS
[02:48:36] <cthulchu> but I thought that was a bit further than this
[02:48:41] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 248 seconds)
[02:48:41] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 258 seconds)
[02:53:41] *** Joins: zebrag (~chris@user/zebrag)
[02:54:12] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[02:56:31] *** Joins: Celeo (~Celeo@user/celeo)
[03:05:27] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:07:48] <entuland> personally the only language I know where you can define operators like that is C++, I may have heard about others and forgot - never heard of anything even remotely similar in JS
[03:09:07] <entuland> gotta love swapping the behavior of * and / to confuse people :P
[03:09:41] <GreenJello> rust and python also have more flexible operators, but in JS operators mostly call spec internal methods
[03:10:34] <GreenJello> cthulchu, const result = 1 === 2; console.log(result); might be a good example for that
[03:10:53] <GreenJello> showing that it produces a boolean value
[03:11:31] <cthulchu> oh, that's good
[03:11:32] <cthulchu> many thans
[03:12:07] <spynxic> GreenJello: what's an operator not in js
[03:12:46] <cis> there's an infinite list of operators not in js
[03:13:01] <spynxic> If you can name several then perhaps what's the most needed operator not in js
[03:14:04] <GreenJello> spynxic, I was referring to extensibility of operators, i.e. implementing them for custom types
[03:14:34] <spynxic> Just asking to get a feel for how difficult it'd be to implement such an operator from scratch with js
[03:14:51] <GreenJello> but it's pretty arbitrary whether something is an operator or a function
[03:15:26] <spynxic> That isn't so in math, is it
[03:15:29] <GreenJello> you can't really implement operators in JS
[03:15:40] <spynxic> Addition isn't a mathematical function
[03:15:55] *** Joins: kadobanana (~mud@user/kadoban)
[03:16:07] *** Joins: Northwoods_ (~Northwood@2409:4055:4e09:ce78:846:584c:6b14:3541)
[03:16:14] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[03:16:14] <GreenJello> there are some cases where operators will call methods you define, but they tend to not lead to anything powerful
[03:16:22] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[03:16:46] <GreenJello> in math operators and functions are mostly the same thing
[03:17:17] <spynxic> There's a function to calculate the distance between two points
[03:17:30] <spynxic> Would you consider it to be an operator
[03:17:42] <cis> you could implement it as an operator if you wanted to
[03:17:48] <GreenJello> ^
[03:18:01] <spynxic> How'd you use it as an operator
[03:18:10] *** Quits: Northwoods (~Northwood@103.223.9.173) (Ping timeout: 240 seconds)
[03:18:17] *** Joins: summersault (~summersau@179.221.251.16)
[03:18:22] <cis> dist = point1 <-> point2
[03:18:29] <cis> make up some symbol
[03:19:11] <spynxic> Addition and multiplication have inverse operations
[03:19:34] *** CoJaBo_ is now known as CoJaBo
[03:19:49] *** Quits: kadobanana (~mud@user/kadoban) (Read error: Connection reset by peer)
[03:20:07] *** Joins: kadobanana (~mud@user/kadoban)
[03:20:14] <GreenJello> "In mathematics, an operator is generally a mapping or function that acts on elements of a space to produce elements of another space" - https://en.wikipedia.org/wiki/Operator_(mathematics)
[03:20:34] <cis> spynxic: have you ever played around with a lisp?
[03:20:42] *** Quits: Guest3778 (~Guest37@d207-189-236-135.yt.northwestel.net) (Quit: Client closed)
[03:20:43] <spynxic> No
[03:20:50] <cis> you could have some fun defining operators
[03:21:04] <spynxic> With symbols?
[03:21:14] <cis> sure
[03:21:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[03:21:50] <spynxic> I'm not sure what the inverse of the distance function would amount to
[03:22:16] <cloudbender> a proximity function
[03:22:22] <cloudbender> maybe
[03:23:16] <spynxic> Subtraction basically undoes addition and division undoes multiplication
[03:23:40] *** Joins: fikran (~fikran@user/fikran)
[03:24:05] <cis> spynxic: what's the inverse of the nullish coalescing operator?
[03:24:12] <spynxic> Given a distance and a point you don't recover the other point you used to find the distance
[03:24:55] <cis> spynxic: mathematically you could say that it's the infinite set of all points of that distance from the given point
[03:25:05] <spynxic> You'd have to pass an angle of some sort with the distance
[03:25:21] *** Quits: edk (edk@libera/staff/edk) (Read error: Connection reset by peer)
[03:25:55] <cis> either way, operators do not have to preserve information
[03:27:52] <ljharb> cis: "inverse" is a nonsense question there
[03:28:17] <ljharb> nullish coalescing is extra semantics on top of normal member access
[03:28:28] <ljharb> and there's no reverse of "member access"
[03:28:32] <cis> yes
[03:32:56] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[03:35:42] *** Joins: edk (edk@libera/staff/edk)
[03:38:33] *** Quits: jmft2 (~JMFT@81.149.115.87.dyn.plus.net) (Ping timeout: 268 seconds)
[03:39:55] *** Joins: wallbroken (wallbroken@user/wallbroken)
[03:39:58] <wallbroken> hi
[03:40:12] *** Joins: zebrag (~chris@user/zebrag)
[03:40:15] <wallbroken> idk if isn't an off topic question
[03:40:36] <spynxic> If the product is not null or undefined then either you have the first value or the second value. If the product is null or undefined then you have the second value and the first value is also null or undefined
[03:40:43] <wallbroken> i should send a patch about this code: https://hg.mozilla.org/comm-central/raw-rev/20c21ea84c4a9b4012b31016e096654e3bd60a56
[03:40:47] <wallbroken> do you know how to do it?
[03:40:59] <wallbroken> a patch means that some lines of that code will change
[03:41:24] <matsaman> use 'diff'
[03:41:48] <matsaman> https://en.wikipedia.org/wiki/Patch_(Unix)#Usage_examples
[03:42:26] <matsaman> some VCS/VCS GUIs will do it for you without having to use 'diff' explicitly, too
[03:42:28] <wallbroken> i'm on windows
[03:42:44] <matsaman> you can use diff on Windows
[03:42:58] <matsaman> I admit, like all things it's less straightforward on Windows
[03:43:01] <wallbroken> there isn't "diff" on Windows
[03:43:03] <matsaman> but you can do it, pretty easily
[03:43:22] <wallbroken> i have "WinDiff", but it's a gui
[03:43:36] *** Quits: junktext (~junktext@109.201.152.168) (Ping timeout: 272 seconds)
[03:44:35] <matsaman> stuff like this might suffice: https://tools.bartlweb.net/diff/
[03:44:40] <matsaman> but you should just get a diff
[03:44:50] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[03:44:59] <cis> doesn't windows have its subsystem for linux thing?
[03:45:17] <matsaman> yeah, it's not at all straightforward to use, particularly for a newbie =P
[03:45:29] <matsaman> it's also huge overkill just to get diff
[03:45:43] <wallbroken> i need to send a patch to correct a bug
[03:45:52] <cis> some would say windows is overkill just to get an OS...
[03:46:01] <matsaman> eyup
[03:46:10] <wallbroken> the line change is in this file: https://hg.mozilla.org/comm-central/raw-file/tip/chat/modules/socket.jsm
[03:46:15] <matsaman> wallbroken: well you have all the info you need
[03:46:20] <wallbroken> but i need to integrate it in the prevuois file
[03:46:27] <matsaman> a patch file is a specific diff output with the .patch extension
[03:46:28] <wallbroken> and i'm a little confused
[03:46:28] <cis> there's also cygwin, I remember using that
[03:46:34] <matsaman> it's merely a diff between two versions of a file
[03:46:41] <wallbroken> have you an idea about that?
[03:46:53] <matsaman> cygwin is just fine, doesn't take but a few minutes to install, and might even come with diff in its standard set
[03:46:54] <wallbroken> as you can see, the first link is entirely different from the second link
[03:47:54] <matsaman> try https://tools.bartlweb.net/diff/
[03:48:43] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[03:48:56] *** Joins: summersault (~summersau@179.221.251.16)
[03:49:29] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 248 seconds)
[03:49:47] <wallbroken> https://dpaste.org/WOsR
[03:49:54] <wallbroken> this is my winmerge diff output
[03:49:57] <wallbroken> and it's correct
[03:50:06] <wallbroken> those are the lines i need to change with my patch
[03:50:40] <wallbroken> the problem is that mozilla staff told me to integrate that diff to this: https://hg.mozilla.org/comm-central/raw-rev/20c21ea84c4a9b4012b31016e096654e3bd60a56
[03:50:59] <wallbroken> here is non raw format: https://hg.mozilla.org/comm-central/rev/20c21ea84c4a9b4012b31016e096654e3bd60a56
[03:51:07] *** Joins: Nitrousoxide_ (~msdos@user/nitrousoxide)
[03:51:08] <wallbroken> have you some idea about what does this mean?
[03:52:22] *** Nitrousoxide_ is now known as Nitrousoxide
[03:55:03] *** Quits: Tetractys (~Tetractys@109-93-61-88.dynamic.isp.telekom.rs) (Quit: Textual IRC Client: www.textualapp.com)
[03:55:29] <matsaman> wallbroken: to combine the two diffs?
[03:55:33] <matsaman> that's lazy of them, but
[03:55:49] <matsaman> take the existing one and apply it to a copy of your file
[03:56:04] <matsaman> then change that copy of the file so it has your additional changes
[03:56:16] <matsaman> then diff the original file with this final copy of the file, and you'll have a new diff that can be used by patch
[03:58:11] <wallbroken> ...
[03:58:22] <wallbroken> do you see that https://hg.mozilla.org/comm-central/rev/20c21ea84c4a9b4012b31016e096654e3bd60a56
[03:58:33] <wallbroken> is completely different than socket.jsm ?
[03:59:28] <matsaman> you can do a recursive diff with 'diff'
[04:01:50] *** Quits: funhouse (~funhouse@user/funhouse) (Quit: Client closed)
[04:03:38] *** Quits: Vooloo (~Vooloo@195-252-44-117-no2400.tbcn.telia.com) (Quit: Client closed)
[04:06:14] *** Joins: federico_it (~textual@151.95.116.125)
[04:06:49] *** Quits: epolanski (uid312403@id-312403.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[04:13:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Quit: leaving)
[04:13:44] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[04:14:15] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[04:15:22] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[04:15:29] *** Quits: cog (~Atlas@S0106f0f24965de23.ok.shawcable.net) (Read error: Connection reset by peer)
[04:18:01] *** Quits: happymeal (~happymeal@user/happymeal) (Read error: Connection reset by peer)
[04:20:10] *** Quits: federico_it (~textual@151.95.116.125) (Quit: Textual IRC Client: www.textualapp.com)
[04:24:27] *** Quits: onosendi (~onosendi@user/onosendi) (Quit: WeeChat 3.2)
[04:24:41] *** Quits: straykitten (~straykitt@subs41-116-206-37-239.three.co.id) (Ping timeout: 248 seconds)
[04:24:53] *** Joins: Naan (~Naan@user/naan)
[04:30:14] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[04:35:31] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[04:37:08] *** Joins: straykitten (~straykitt@subs24-116-206-8-29.three.co.id)
[04:39:37] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 248 seconds)
[04:42:32] *** Quits: Lyn (~Lyn@user/law) (Ping timeout: 258 seconds)
[04:44:10] <austincheney> how can I import "get" from node librarys http and https in the same file without imposing a global name collision?
[04:45:22] <theskillwithin> import { get as httpGet } from 'http'
[04:45:38] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[04:45:58] <austincheney> thanks theskillwithin
[04:48:44] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[04:53:35] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[04:55:05] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 248 seconds)
[04:56:40] *** Joins: Jaran|zZZzZZZzz (~mail@p5b2c5b08.dip0.t-ipconnect.de)
[04:56:40] *** Quits: Jaran|zZZzZZZzz (~mail@p5b2c5b08.dip0.t-ipconnect.de) (Changing host)
[04:56:40] *** Joins: Jaran|zZZzZZZzz (~mail@user/jaran)
[04:57:26] *** Quits: Jaran (~mail@user/jaran) (Ping timeout: 256 seconds)
[05:04:03] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[05:04:22] *** Joins: Northwoodss (~Northwood@103.223.8.125)
[05:05:28] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[05:07:31] *** Quits: Northwoodss (~Northwood@103.223.8.125) (Client Quit)
[05:07:38] *** Quits: Northwoods_ (~Northwood@2409:4055:4e09:ce78:846:584c:6b14:3541) (Ping timeout: 256 seconds)
[05:07:43] *** Joins: whitehot_robot (~whitehot_@mail.whitehotrobot.com)
[05:08:15] *** Quits: whitehot_robot (~whitehot_@mail.whitehotrobot.com) (Client Quit)
[05:08:34] *** Joins: whitehot_robot_8 (~whitehot_@mail.whitehotrobot.com)
[05:08:49] *** Quits: whitehot_robot_8 (~whitehot_@mail.whitehotrobot.com) (Remote host closed the connection)
[05:09:59] *** Quits: Celeo (~Celeo@user/celeo) (Quit: Leaving)
[05:10:26] *** Joins: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[05:11:26] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[05:11:59] *** Joins: whitehot_robot_8 (~whitehot_@mail.whitehotrobot.com)
[05:12:13] *** Quits: whitehot_robot_8 (~whitehot_@mail.whitehotrobot.com) (Remote host closed the connection)
[05:12:48] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:15:09] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 268 seconds)
[05:18:57] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[05:20:54] *** Parts: skidz (sid506825@user/mucholoco) ()
[05:26:11] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[05:26:31] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[05:31:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[05:31:49] *** Quits: xsperry (~as@user/xsperry) (Remote host closed the connection)
[05:32:59] *** Joins: fikran (~fikran@user/fikran)
[05:38:43] *** Quits: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[05:42:03] *** Quits: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[05:43:09] *** Joins: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[05:44:29] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:45:05] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:48:26] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 256 seconds)
[05:49:43] <buu> Mmm
[05:49:44] <buu> kubernetes
[05:51:00] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[05:51:08] *** Joins: crimson_king (~harpia@58.148.205.168.dynamic.vibefibra.com.br)
[05:51:09] *** Joins: gde35|2 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[05:51:21] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[05:52:17] *** Joins: NoiseEee8 (~NoiseEee@178.128.153.219)
[05:52:32] *** Joins: howdoi_ (uid224@id-224.tooting.irccloud.com)
[05:52:35] *** Joins: LtHummus_ (~lthummus@97-126-113-251.tukw.qwest.net)
[05:52:57] *** Joins: pizdets_ (~pizdets@183.182.111.62)
[05:53:03] *** Joins: Popzi_ (~Popzi@95.150.161.138)
[05:53:35] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[05:53:40] *** Joins: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[05:53:47] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[05:53:52] <buu> Anyone know how to get which number a particular pod in a replicaset is?
[05:54:50] *** Joins: debsan (~debsan@2800:810:471:8425::1000)
[05:55:08] *** Quits: NoiseEee (~NoiseEee@178.128.153.219) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (Read error: Connection reset by peer)
[05:55:08] *** Quits: unixcat64 (thelounge@fedora/hyperreal) (Quit: Ping timeout (120 seconds))
[05:55:08] *** Quits: gde35 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (Read error: Connection reset by peer)
[05:55:08] *** Quits: Popzi (~Popzi@95.150.161.138) (Quit: Quitting)
[05:55:08] *** Quits: harpia (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Remote host closed the connection)
[05:55:08] *** Quits: pizdets (~pizdets@183.182.111.62) (Quit: pizdets)
[05:55:08] *** Quits: LtHummus (~lthummus@97-126-113-251.tukw.qwest.net) (Remote host closed the connection)
[05:55:08] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Read error: Connection reset by peer)
[05:55:08] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Write error: Connection reset by peer)
[05:55:08] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: No Ping reply in 180 seconds.)
[05:55:08] *** Quits: orbyt_v10 (~orbyt_v10@172.92.4.78) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: t3nj1n (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: irrgit (~irrgit@192.241.175.183) (Ping timeout: 272 seconds)
[05:55:08] *** Quits: BUSY (~BUSY@user/busy) (Ping timeout: 272 seconds)
[05:55:09] *** NoiseEee8 is now known as NoiseEee
[05:55:10] *** howdoi_ is now known as howdoi
[05:55:11] *** Quits: Jonno_FTW (~come@user/jonno-ftw/x-0835346) (Remote host closed the connection)
[05:55:12] *** Quits: michaelis (~michaelis@193.183.209.17) (Remote host closed the connection)
[05:55:18] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[05:55:19] *** Joins: Jonno_FTW (~come@api.carswap.me)
[05:55:22] *** Joins: BUSY (~BUSY@user/busy)
[05:55:50] *** Joins: unixcat64 (thelounge@envs.net)
[05:56:28] *** Joins: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de)
[05:56:28] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 268 seconds)
[05:58:22] *** Joins: JackFin (~ircuser@S01069050ca4e3573.cg.shawcable.net)
[05:58:26] *** Quits: kmh (~kmh@p200300df5f031500dc05e9b97966e73c.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[06:00:26] *** Joins: michaelis (~michaelis@193.183.209.17)
[06:00:28] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[06:03:37] *** Quits: crimson_king (~harpia@58.148.205.168.dynamic.vibefibra.com.br) (Quit: Leaving)
[06:09:22] *** Joins: summersault (~summersau@179.221.251.16)
[06:10:20] *** Joins: matsaman (~matsaman@user/matsaman)
[06:10:37] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[06:15:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:88fa:1bd8:6b2e:a2d2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:88fa:1bd8:6b2e:a2d2)
[06:16:35] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:88fa:1bd8:6b2e:a2d2) (Client Quit)
[06:18:08] *** Joins: summersault (~summersau@179.221.251.16)
[06:18:59] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[06:20:35] *** Quits: howdoi (uid224@id-224.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[06:21:36] *** Joins: krishna (~krishna@76.14.21.109)
[06:24:42] *** Quits: straykitten (~straykitt@subs24-116-206-8-29.three.co.id) (Ping timeout: 256 seconds)
[06:24:50] *** Joins: summersault (~summersau@179.221.251.16)
[06:25:45] *** Quits: Haxxa (~Haxxa@122.199.45.186) (Ping timeout: 248 seconds)
[06:26:01] *** Joins: Rockwood (~Rocky@user/rocky)
[06:26:55] *** Joins: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com)
[06:27:00] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[06:27:36] <sickdyd> buu: wrong channel?
[06:29:52] *** Quits: byanka_ (~byanka@91.244.10.3) (Ping timeout: 258 seconds)
[06:30:10] *** Joins: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467)
[06:32:54] <foureyes> absolutely mind-bending wtfs right now trying to figure out why import something from "./thefileisrighthere" works but require("./thefileisrighthere") doesn't... but if i change to a file that doesn't exists i get an error saying the file doesn't exist...
[06:34:46] <GreenJello> doesn't work?
[06:35:09] <foureyes> the object is imported as null
[06:35:11] *** Joins: summersault (~summersau@179.221.251.16)
[06:35:31] <foureyes> well it's a function actually... module.exports = (a,b) => etc
[06:35:47] <foureyes> it's a Sequelize model, in fact
[06:36:02] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[06:36:51] <foureyes> I have written basically the same models twice, once from boilerplates generated from sequelize-cli and then again from scratch because I can't seem to import the damn things how I expect
[06:37:41] <foureyes> and I am trying to figure out why it doesn't work as I expect and along the way I am finding basic things not working like require("./models/model") not finding anything
[06:37:46] *** Joins: straykitten (~straykitt@subs24-116-206-8-14.three.co.id)
[06:38:18] <foureyes> and the best error I can get from it is "500 lol f u"
[06:38:25] <foureyes> :/
[06:38:27] <sheetjs> foureyes: what bundler?
[06:38:58] <foureyes> im using nextjs
[06:41:05] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[06:45:46] *** Joins: z1haze (~z1haze@user/z1haze)
[06:46:06] <z1haze> brain farting here.. will this work as a singleton that i can use throughout my app? https://bpa.st/ZKQQ
[06:46:42] <Rockwood> sheetjs, o/
[06:47:52] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Ping timeout: 268 seconds)
[06:48:04] *** Quits: realies (~realies@user/realies) (Read error: Connection reset by peer)
[06:48:43] *** Joins: realies (~realies@user/realies)
[06:49:51] <z1haze> how do you export a singleton that returns a promise? ive confused myself
[06:50:07] <sheetjs> z1haze: the code snippet doesnt do what you think
[06:50:16] <z1haze> yeah i do believe that to be the case.
[06:50:26] <sheetjs> explain in english what you want to do
[06:50:29] <z1haze> do you based on that, know what i'm trying to do and can steer me in the right direction?
[06:50:31] <z1haze> ok sure
[06:50:35] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[06:50:56] <z1haze> i want to have a database instance that i can import into various files in my application, but i only want a singleton instance of it. but the datbase connection is async
[06:51:24] <z1haze> and some of the files are executed from events, so i cant just pass the variable around
[06:51:59] <buu> so you need a promise that always returns the same variable value?
[06:52:09] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[06:52:19] <z1haze> i just want THAT database instance
[06:52:37] <sheetjs> make a getter
[06:52:48] <buu> let db; async function getdb(){ if(!db) { db = await getmydb() } return db }
[06:52:56] <sheetjs> yeah and export that
[06:53:10] <Rockwood> are you using node?
[06:53:10] <z1haze> okay, so i was trying to do this with a single var, i guess i need 2
[06:53:12] <z1haze> will try
[06:53:26] <sheetjs> you dont need two variables
[06:53:32] *** Joins: summersault (~summersau@179.221.251.16)
[06:53:34] <buu> well
[06:53:36] <buu> a function is a variable
[06:53:37] <z1haze> sorry, a variable and a function
[06:53:38] <buu> sorta
[06:53:38] <z1haze> yeah
[06:55:19] <z1haze> buu, so i would then export the getter instead of the object itself?
[06:55:56] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 258 seconds)
[06:56:05] <buu> yes
[06:56:25] <buu> of course then you have to await it every where you use it
[06:56:41] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 248 seconds)
[06:56:50] <buu> I prefer something like () => {db = await getdb(); main(db) }
[06:56:56] <z1haze> so if a promise has already been resolved, will it still response to .then() or await on it then?
[06:57:53] <sheetjs> yes
[06:58:07] <z1haze> ok cool. then im golden. thank you's
[06:58:09] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[06:58:40] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 272 seconds)
[06:58:40] <Rockwood> you need fetch here i think
[06:58:43] <sheetjs> n> var x = Promise.resolve(3); x.then(y => {}); setTimeout(() => { x.then(y => console.log(y)) }, 1000)
[06:58:45] <jellobot> (okay) Timeout { _idleTimeout: 1000, _idlePrev: [TimersList], _idleNext: [TimersList], _idleStart: 45, _onTimeout: [Function (anonymous)], _timerArgs: undefined, _repeat: null, _destroyed: false, [Symbol(refed)]: true, [Symbol(kHasPrimitive)]: false, [Symbol(asyncId)]: 9, [Symbol(triggerId)]: 0 }3
[06:58:56] <sheetjs> n> var x = Promise.resolve(3); x.then(y => {}); setTimeout(() => { x.then(y => console.log(y)) }, 1000); void 0
[06:58:58] <jellobot> (okay) undefined3
[06:59:13] <sheetjs> the "3" is coming from the setTimeout, which runs roughly a second after the promise resolve
[07:01:39] *** Joins: bambanxx (~bambanx@181-163-45-80.baf.movistar.cl)
[07:02:20] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[07:04:57] *** Joins: PikaChokeMe (~PikaChoke@c-24-11-1-200.hsd1.ut.comcast.net)
[07:05:47] <PikaChokeMe> So I have like... a bunch of arrays... I needed to find all the combinations of the values in these arrays. I was doing this with a massive nested for loop... but now I've found that like... I can take a cartesian product of these arrays and it's basically the same thing?
[07:06:21] <sheetjs> cartesian product will includes duplicates
[07:07:15] <PikaChokeMe> how performant is it? Is it that hard to clean out the duplicates?
[07:07:46] <PikaChokeMe> right now I'm in some ungodly unperformant polynomial time
[07:07:52] <PikaChokeMe> of like... n^13 or something
[07:08:02] *** Quits: wintersky (uid453465@id-453465.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[07:08:19] <sheetjs> n! (n factorial)
[07:09:14] <sheetjs> err n! permutations, 2**n combinations
[07:12:34] <sheetjs> n> ["a","b"].reduce((acc, v) => acc.concat(acc.map(r => r.concat([v]))), [[]]);
[07:12:35] <jellobot> (okay) [ [], [ 'a' ], [ 'b' ], [ 'a', 'b' ] ]
[07:12:38] *** Joins: summersault (~summersau@179.221.251.16)
[07:13:25] <sheetjs> if your array potentially has duplicates, you can deduoe
[07:13:52] <sheetjs> n> const data = ["a","b","b","a"]; [...new Set(data)].reduce((acc, v) => acc.concat(acc.map(r => r.concat([v]))), [[]]);
[07:13:53] <jellobot> (okay) [ [], [ 'a' ], [ 'b' ], [ 'a', 'b' ] ]
[07:15:24] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[07:18:29] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[07:18:58] <PikaChokeMe> what is like a deduoe? o.O
[07:19:06] <sheetjs> *dedupe
[07:19:49] <PikaChokeMe> is building a cartesian product like this faster than a nested for loop?
[07:20:10] <sheetjs> "combinations" != cartesian product
[07:20:25] <PikaChokeMe> what is the difference?
[07:21:22] <sheetjs> ["a", "a"] would be counted as part of the cartesian product but not a combination
[07:21:43] <sheetjs> ["a"] is a combination but not part of the cartesian product
[07:24:43] <theskillwithin> can a value also be an array?  cuz then thats much harder
[07:27:04] *** Joins: beencubed (~beencubed@209.131.238.248)
[07:27:12] <PikaChokeMe> oh... so in a way I actually neither want A in my set nor A, A
[07:27:44] <sheetjs> if you really want something like [ ["a", "b"], ["b", "a"] ] then you are asking for permutations
[07:28:34] <PikaChokeMe> mmm... So what I really have is like... 5 pairs of boots. 5 pairs of pants. 5 shirts. You can't wear boots as a shirt. You can't wear pants as boots etc.
[07:28:49] <PikaChokeMe> I want all possible "outfits" so to speak
[07:29:01] <PikaChokeMe> but I also want to build that list in a way that is performant
[07:29:12] <sheetjs> oh so you actually do want the cartesian product boots x pants x shirts
[07:29:46] <sheetjs> do you actually need the entire list at once?
[07:29:47] <theskillwithin> can you have boots and pants on with no shirt
[07:30:02] <PikaChokeMe> I think so. I tried to look it up last night and that seemed like what I wanted. You can't have boots and pants with no shirt.
[07:30:04] <sheetjs> that would be equivalent to adding a null element to each array
[07:30:19] <PikaChokeMe> and I probably don't need the entire list at once, but I would like to build because I want to sort and filter on it and stuff
[07:30:20] <Rockwood> theskillwithin, cheers
[07:30:33] <theskillwithin> o/
[07:30:41] <sheetjs> you can calculate it explicitly
[07:30:44] <Rockwood> howdy bro?
[07:31:12] <sheetjs> in total there are boots.length * pants.length * shirts.length choices
[07:31:27] <sheetjs> if the things are optional, just add 1
[07:31:30] *** Quits: IceMichael (~IceMichae@dynamic-046-114-152-175.46.114.pool.telefonica.de) (Ping timeout: 240 seconds)
[07:31:40] <sheetjs> (boots.length + 1) * (pants.length + 1) * (shirts.length + 1)
[07:32:15] <sheetjs> given a number 0 <= i <= boots.length * pants.length * shirts.length you can actually generate one choice
[07:32:56] <sheetjs> boot would be boots[i % boots.length], pant would be pants[((i / boots.length)|0) % pants.length], etc
[07:33:17] <sheetjs> so you may not even need to list out all possibilities
[07:33:35] <PikaChokeMe> I actually have like 24 possible items... and about 3-4 options for each item
[07:33:47] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[07:33:58] <sheetjs> so it sounds like at least 3 ** 24 possibilities
[07:34:06] <PikaChokeMe> so only around 282429536481 possibilities in total xD
[07:35:47] <PikaChokeMe> so as it is right now with my omega nested for loop I can wait about 2-3 minutes and I'll have every option
[07:36:08] <sheetjs> do you need all of the options
[07:36:14] <sheetjs> or just need o generate a random one
[07:36:28] <PikaChokeMe> I want them all so I can compare them and sort them based on stat priority
[07:36:49] <PikaChokeMe> like one set will have every item with mastery... and there will probably be a couple of these that have pretty good mastery, but other varying stats
[07:36:56] <PikaChokeMe> it'd be nice to have them all to compare them
[07:39:53] *** Quits: LiftLeft (~LiftLeft@154.21.28.119) (Ping timeout: 248 seconds)
[07:40:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[07:40:42] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[07:41:07] *** Quits: LtHummus_ (~lthummus@97-126-113-251.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[07:41:55] *** Joins: LtHummus (~lthummus@97-126-113-251.tukw.qwest.net)
[07:42:18] *** Joins: fikran (~fikran@user/fikran)
[07:45:32] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 272 seconds)
[07:52:58] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[07:56:40] *** Quits: z1haze (~z1haze@user/z1haze) (Quit: Leaving)
[07:57:57] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 268 seconds)
[07:59:49] *** Joins: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de)
[08:01:17] *** Joins: LiftLeft (~LiftLeft@154.21.114.108)
[08:03:25] <foureyes> s of a b https://stackoverflow.com/questions/40294870/module-exports-vs-export-default-in-node-js-and-es6 :/
[08:10:14] <theskillwithin> PikaChokeMe your going to need a walk in closet to fit all that
[08:10:49] *** Quits: LiftLeft (~LiftLeft@154.21.114.108) (Ping timeout: 248 seconds)
[08:13:22] *** Joins: summersault (~summersau@179.221.251.16)
[08:14:28] <PikaChokeMe> https://github.com/ehmicky/fast-cartesian I tried using this for a bit...
[08:14:45] <PikaChokeMe> it was like... really good on a small scale... and now it doesn't really seem much more performant
[08:17:45] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 248 seconds)
[08:21:07] <theskillwithin> PikaChokeMe interesting, whats this for?
[08:22:26] <foureyes> is sequelize unfuckingbelievably complicated or is it just me?
[08:23:18] <theskillwithin> its that kinda like knex?
[08:24:25] <theskillwithin> or i guess knex isn't an ORM on its own
[08:24:41] *** Quits: straykitten (~straykitt@subs24-116-206-8-14.three.co.id) (Ping timeout: 248 seconds)
[08:24:59] <theskillwithin> foureyes is that like objection.js?
[08:29:02] <foureyes> i just can't believe how little sense it makes and want to smash everything around me
[08:29:36] *** fjmorazan_ is now known as fjmorazan
[08:30:18] *** Joins: silly_ (~silly@user/silly)
[08:30:22] *** Joins: gggp (~gggp@123.113.181.165)
[08:32:49] <PikaChokeMe> it's a gear calculator
[08:33:01] <theskillwithin> foureyes hehe glad i focus on frontend
[08:33:04] <PikaChokeMe> also typescript is a god damn abomination tell your friends :V
[08:33:45] *** Quits: silly (~silly@user/silly) (Ping timeout: 248 seconds)
[08:33:49] <sheetjs> im surprised for..of is fast
[08:34:49] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[08:35:18] <theskillwithin> sheetjs well of course its faster than an array method?
[08:36:14] <sheetjs> for..of versus looping by index
[08:36:45] *** Joins: ferdna (~ferdna@user/ferdna)
[08:37:07] *** Joins: straykitten (~straykitt@subs24-116-206-8-5.three.co.id)
[08:37:41] <theskillwithin> sheetjs what if I have a function that calls itself.   is that practical speeds?
[08:38:01] *** Quits: bambanxx (~bambanx@181-163-45-80.baf.movistar.cl) (Ping timeout: 248 seconds)
[08:38:09] <theskillwithin> a recursive function
[08:38:39] <foureyes> this honestly has to be some kind of joke
[08:38:56] <foureyes> to do an inner join is so fucking insanely complex
[08:39:05] <foureyes> this can't be real
[08:39:36] *** Joins: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl)
[08:42:08] *** Joins: hygl (uid16621@id-16621.tinside.irccloud.com)
[08:42:39] <theskillwithin> foureyes is this inner join? https://github.com/theskillwithin/node-mysql/blob/master/models/User.js#L20
[08:43:56] <foureyes> holy mother of christ i just got it working
[08:44:17] <theskillwithin> 🎉
[08:44:32] <foureyes> excuse my french but that also looks like another insane library
[08:44:48] <foureyes> I am pretty good with SQL and this is just offensively complicated
[08:45:02] <foureyes> anyway fuck this for one day... bye
[08:45:03] <theskillwithin> well i hope your complaining in irc somehow helped you
[08:45:08] <foureyes> absolutely
[08:46:18] *** Joins: gehn (~gehn@user/gehn)
[08:46:42] *** Parts: hygl (uid16621@id-16621.tinside.irccloud.com) ()
[08:47:47] *** Joins: summersault (~summersau@179.221.251.16)
[08:47:56] <foureyes> the documentation might as well be a photograph of someone flipping the bird
[08:48:03] <wroathe> lol
[08:48:07] <wroathe> Oh React ecosystem
[08:48:09] <wroathe> You so silly
[08:48:10] <wroathe> https://swr.vercel.app/docs/getting-started
[08:49:09] <wroathe> Because clearly HTTP requests need to be hooks
[08:49:52] <theskillwithin> foureyes and you find this harder https://vincit.github.io/objection.js/  ?
[08:50:26] <foureyes> no
[08:50:30] <foureyes> that looks good actually
[08:50:47] <foureyes> nice clear documentation with examples of joins
[08:50:48] <foureyes> wow
[08:51:04] <theskillwithin> =]
[08:51:28] <foureyes> is this ok to use for production stuff? :P
[08:51:59] <celphi> lol @ theskillwithin
[08:52:08] <celphi> "well i hope your complaining in irc somehow helped you"
[08:52:15] <foureyes> it always does
[08:52:19] <theskillwithin> gotta get that anger out lol
[08:52:27] <foureyes> for real
[08:52:35] <foureyes> i wanted to destroy everything in my vicinity
[08:52:49] <foureyes> repressing that shit is how atrocities happen in this world
[08:52:53] <foureyes> you did a good thing today
[08:53:33] <theskillwithin> foureyes i am not backend, so grain of salt,  but ya its ok to use for production
[08:53:36] <foureyes> also I am probably going to rewrite everything objection.js because what's another 6 hours of nothing achieved anyway
[08:53:45] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[08:55:15] <foureyes> i wonder if they thought they were making something better than sql
[08:55:49] <theskillwithin> id assume its to make it easier
[08:56:24] <foureyes> failed so hard it should be an esoteric meme of infamy
[08:56:38] <gehn> what are we talking about?
[08:56:40] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[08:56:50] <gehn> is this about C#?
[08:56:51] <foureyes> https://sequelize.org/
[08:57:01] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[08:57:02] <gehn> ah
[08:57:29] <gehn> I've used it
[08:57:42] <gehn> it's an ORM, there's no such thing as a good ORM, so that's the first problem
[08:57:50] <Rockwood> bye cya
[08:57:54] <Rockwood> my work time
[08:58:02] <Rockwood> cheers everyone
[08:58:10] <wroathe> ^
[08:58:17] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 248 seconds)
[08:58:27] <theskillwithin> wroathe its actually pretty convenient, this is how apollo does it a popular graphql library.  but you also don't have to do it that way
[08:59:03] *** Joins: mickey8 (~user@user/mickey)
[08:59:04] *** Joins: Pil (~Pil@80.255.81.66)
[08:59:10] *** Joins: Pilik (~Pil@80.255.81.66)
[08:59:24] <theskillwithin> wroathe (talking about the react stuff)
[08:59:41] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[08:59:53] <wroathe> theskillwithin: In general I don't think it's a good idea for component render functions to have side effects.
[09:00:07] *** Quits: Pilik (~Pil@80.255.81.66) (Client Quit)
[09:00:07] *** Quits: Pil (~Pil@80.255.81.66) (Client Quit)
[09:00:11] <wroathe> theskillwithin: Especially side effects like sending AJAX requests
[09:01:45] <theskillwithin> ud that that anyways tho?  i don't understand
[09:02:05] *** Joins: D4mned (~Dmnd@212.101.253.244)
[09:04:13] <wroathe> theskillwithin: use what?
[09:04:21] *** Quits: Talon (Talon@172.77.99.199) (Ping timeout: 258 seconds)
[09:04:34] *** Quits: summersault (~summersau@179.221.251.16) (Ping timeout: 268 seconds)
[09:08:52] <theskillwithin> wroathe oops, i meant,  isn't that the case otherwise as well.  i don't see how its different
[09:09:29] <wroathe> The problem with useEffect and useLayoutEffect is that using them makes your component layer take on the additional responsibility of manage effect state, and ties your components to their environment. Unit testing would clearly outline this. For example, if your component sends and AJAX request as part of the render function and you're in a unit testing environment now you all of a sudden need to
[09:09:35] <wroathe> start mocking responses in your AJAX client to test branches that depend on the data being returned from the request
[09:10:30] <theskillwithin> axios-mock-adapter
[09:10:35] <wroathe> Whereas if you move handling AJAX requests to another layer (say the event handler layer), and you strive to keep your component layer "pure" (meaning that they return React Elements that are purely a function of the provided props), then you no longer need any mocking or environment setup to test the branches within
[09:11:12] <wroathe> You just call the function with each props configuration of interest, and assert that the returned react element tree has the structure that you expect
[09:11:16] <wroathe> No mocks required
[09:12:51] *** Joins: LiftLeft (~LiftLeft@212.102.58.170)
[09:12:53] <theskillwithin> so you spelled out two different approaches
[09:13:26] <theskillwithin> but what you linked, just because its a hook, doesn't mean its doing one of those approaches
[09:13:53] <wroathe> Yeah. I've been playing with the idea of moving as much logic out of the component layer of an application as possible
[09:13:59] <theskillwithin> im not familiar with the library you linked, so u might know which they do
[09:14:23] <wroathe> I think it would ultimately lead to an easier to maintain, more correct, and easily testable codebase
[09:14:55] <wroathe> Keep components as functions of their inputs, and handle things like calling browser APIs in the event handlers only
[09:15:06] <wroathe> That way you can constrain mocking, if needed, to just the event handler functions
[09:15:37] <wroathe> And using something like Redux separates the state of the application out into another easily testable and maintainable layer of the application
[09:15:43] <theskillwithin> some of these problems solved with graphql solutions now.  in some aspects of certian things talked about
[09:16:35] <theskillwithin> doing something just for the sake of it being easier to test, should not be how we think
[09:17:01] <theskillwithin> testing should evolve to meet the best way of coding
[09:17:08] <theskillwithin> whatever that is
[09:17:12] *** Quits: lightstalker (~BT@user/lightstalker) (Ping timeout: 276 seconds)
[09:17:24] *** Joins: gggp_ (~gggp@60.10.23.162)
[09:18:56] <PikaChokeMe> I actually ended up with kind of a generator for my massive collection of combinations
[09:19:13] <PikaChokeMe> each time I call next, I get a new combination of items
[09:19:36] <PikaChokeMe> now I can loop through this with a for loop which completely locks up my application and destroys my browser
[09:19:39] <wroathe> theskillwithin: I find that often the best way of coding and easier testing go hand in hand
[09:19:54] <PikaChokeMe> but I'm wondering if there's like a smart/clever way to process one item at a time in like a setTimeout loop or something
[09:19:55] <wroathe> theskillwithin: Have you ever been asked to test a unit of code within an application that was never written with testing in mind?
[09:20:37] <theskillwithin> PikaChokeMe idk if its possible to go thru that many in a browser and not lock it up.   maybe with service workers?  but then ud still have to render it all, so idk if that fits
[09:20:43] <wroathe> theskillwithin: Like say a 1000 line long function that calls lots of different browser APIs to update the DOM, create timers, send ajax requests, and so on
[09:20:44] *** Quits: gggp (~gggp@123.113.181.165) (Ping timeout: 252 seconds)
[09:21:22] <PikaChokeMe> rendering isn't too bad because I'm actually already using like a clever/infinite scroll type of thing
[09:21:30] <PikaChokeMe> I'm only rendering 4 elements of my collection max at a time
[09:21:50] <theskillwithin> ahh nice virtualization
[09:23:04] <GreenJello> PikaChokeMe, you can do a for..of loop inside an async function and periodically await something like a timer promise
[09:23:32] <GreenJello> or it can be an async generator if you need to produce outputs over time
[09:24:07] *** Joins: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net)
[09:24:27] <PikaChokeMe> will a for..of inside an async function not lock my UI? How does it know to for..of over time?
[09:25:20] <GreenJello> when an await is reached it pauses the function, and it sets it up to resume when the promise resolves
[09:25:40] <GreenJello> other stuff can happen in between
[09:27:36] <wroathe> GreenJello: Have you used this useSWR thing I linked in your React projects?
[09:28:01] <GreenJello> and if you need to ensure it fits within a time budget, you can track how much time has passed since you last resumed, and have an if (tooLong) await delay(10)
[09:28:06] <wroathe> GreenJello: Or rather, how do you prefer to structure your AJAX code for React projects?
[09:28:17] <wroathe> (when you're done helping them)
[09:28:40] <GreenJello> wroathe, I use similar things, yeah
[09:28:56] <GreenJello> not that specific implementation
[09:28:58] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[09:29:10] <wroathe> GreenJello: So you put AJAX calls inside of your components?
[09:29:17] <GreenJello> yeah
[09:29:19] <PikaChokeMe> so if I never await, that function will never execute?
[09:29:21] <wroathe> Ah
[09:29:34] <PikaChokeMe> or am I thinking of that incorrectly
[09:29:43] <PikaChokeMe> https://gist.github.com/PikaChokeMe/d9b56f976d64743f22ba5abef08b177d this is what I kind of have and am about to test
[09:29:47] <GreenJello> PikaChokeMe, if you never await then it'll block until your function returns
[09:30:12] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[09:30:15] <wroathe> GreenJello: It sounds like I'll be leading a React team coming up here, and while my preference would be to NOT have that, I'm wondering if restricting the team from making AJAX calls in components would be too unfamiliar and foreign to them
[09:30:39] <wroathe> I think there are plenty of advantages to making that rule, though
[09:30:42] <wroathe> And so that's why I'm torn
[09:31:36] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[09:31:50] <wroathe> In the past I've seen some real horror stories on the UI. Back in my Backbone.js days I'd regularly fiend Backbone View components that were 3000 lines of a grab bag of every kind of logic
[09:31:54] *** Quits: debsan (~debsan@2800:810:471:8425::1000) (Ping timeout: 268 seconds)
[09:32:26] <GreenJello> it's by default the best place to make them. redux doesn't offer an alternative that isn't a million times worse. If you can design something that's better for every case, then it could be fine to have the restriction
[09:32:32] <wroathe> State management, effects like DOM manipulation and AJAX requests, and so on
[09:33:04] <wroathe> GreenJello: Well, the restriction I'm partial to is that AJAX requests (and most other kinds of effects) be restricted to only event handlers
[09:33:22] <wroathe> And that those event handlers be exported from modules for ease of testing
[09:33:39] <PikaChokeMe> I think it's working :O
[09:33:47] <GreenJello> const resultICareAbout = useApi(() => fetchUser(props.userId), [props.userId]); is very compelling
[09:33:52] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[09:34:18] <theskillwithin> ya
[09:34:32] <systemfault> wroathe: People tried other things... and they're mostly all bad. (Redux saga for example)
[09:34:42] <wroathe> systemfault: Yup
[09:34:44] <wroathe> systemfault: Or Redux Thunk
[09:34:48] <wroathe> I'm not in favor of either
[09:35:14] <GreenJello> not seeing the old result, not writing a reducer that tracks loading and error states, not dealing with concurrency issues if the requests complete out of order, or if the component has unmounted
[09:35:40] <theskillwithin> instead of touching 5 files, touching 1
[09:35:43] <wroathe> GreenJello: How does that handle different kinds of responses? You'd have to inspect the response below that for each case within the component
[09:36:18] <wroathe> Basically your request and response processing logic get moved to within the component
[09:37:52] <GreenJello> you can still extract some or all of the logic when needed
[09:38:06] <GreenJello> it's a bit awkward with APIs like the one you linked earlier
[09:38:38] *** Quits: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:39:12] <GreenJello> I use an Option type, so I can do things like resultICareAbout.success().map(getUserStats).match({
[09:39:35] <GreenJello> but you can do the same with that API and composition
[09:39:43] *** Quits: straykitten (~straykitt@subs24-116-206-8-5.three.co.id) (Quit: Leaving)
[09:40:21] <GreenJello> I dunno, I don't find it to be inconvenient in most cases, and it's not like I'm fetching data in components that have UI
[09:41:26] <wroathe> GreenJello: So you make components explicitly for handling side effects, then?
[09:41:34] <GreenJello> yes
[09:42:01] *** Quits: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 248 seconds)
[09:42:02] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[09:43:17] <GreenJello> except UI components can manage UI state, handle window resize events, that kind of stuff
[09:44:01] <wroathe> GreenJello: That's one potential approach. My concern there is that when fetchUser returns a response you'll potentially have multiple ways you can update the state of the application, based on the response that comes back, and you can either set it in a store like Redux, or you can have that component manage the state. The problem I see with having the component manage the state is that it's not
[09:44:08] <wroathe> always the case that components that need that state will fit neatly into that kind of isolated container
[09:44:48] <wroathe> GreenJello: For example, deciding that you want your application sidebar to close if it's open when a response comes back, or displaying a global error message
[09:44:56] <GreenJello> yes, and I have a way to specify redux actions that should be fired automatically
[09:45:09] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[09:45:26] <wroathe> GreenJello: Is it a secret? Or is that something you can share?
[09:46:18] <GreenJello> I don't think I have a version I can share
[09:46:37] <GreenJello> I usually do simpler things on smaller projects
[09:47:21] <wroathe> Well, this is going to be a huge project I'll be starting. I'm concerned with how shoving everything that isn't part of a shared state container into components will scale for development.
[09:47:44] <wroathe> It's probably a little bit if you separate components into distinct roles, as you've suggested there
[09:47:48] <wroathe> a little better*
[09:48:17] <wroathe> My nightmare scenario is what I described from those Backbone days. The 3000 line "view"
[09:49:02] <GreenJello> I've migrated towards this from originally redux saga, starting with getting loading states out of redux, then error states, then data that isn't shared
[09:49:08] <wroathe> I've done one React project in the corporate world so far, and our small team agreed to follow the purely Redux approach. Our weakest member found it hard to understand though, and it seemed like no amount of explanation could get him up to speed.
[09:49:15] <GreenJello> it's made the codebase much easier to work with
[09:49:24] <GreenJello> but it's a very small team
[09:49:40] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 272 seconds)
[09:50:47] <wroathe> So I'm concerned with deciding on approaches based purely on their theoretical strengths, when so many front end (and React) developers operate based on what they're familiar with
[09:51:37] <wroathe> I can write up a document explaining what impact moving logic out of components would have on an application in great detail, but there's no guarantee that some of our weaker devs will comprehend all of the points within
[09:51:37] *** Joins: fikran (~fikran@user/fikran)
[09:51:50] <wroathe> And they'll be moreso concerned with what they've seen on the READMEs in the libraries they're familiar with
[09:52:12] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 272 seconds)
[09:52:56] <wroathe> GreenJello: Well, thanks for the feedback. That point about component roles really helped.
[09:54:29] <GreenJello> I had the same ideology when I started this project years ago, but there were so many cracks that showed up over time when applied to actual situations
[09:54:33] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[09:54:51] <wroathe> GreenJello: Which ideology? I mentioned a few things here.
[09:55:02] <gehn> is there a speicific term for "one past the end" of a list?
[09:55:07] *** Quits: falafel (~falafel@pool-96-255-70-50.washdc.fios.verizon.net) (Ping timeout: 268 seconds)
[09:55:20] <gehn> like, a single word
[09:55:21] <GreenJello> I wasn't making any requests in components, it was all extracted to the data layer with redux and redux-saga
[09:55:35] <gehn> function checkOnePastTheEnd() {} feels a bit overly verbose
[09:56:10] <wroathe> GreenJello: Could it be that redux saga was the problem, though? Just because you move away from tying your effects to Redux doesn't necessarily mean they need to go in components.
[09:57:07] <GreenJello> yeah, there might be a non-redux solution, or even some of the newer work on abstracting redux away
[09:58:01] <GreenJello> redux-saga is certainly garbage, but there were also issues with managing loading/error/data states globally, when often you only care about some state from the perspective of a component instance
[09:58:14] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[09:58:47] <GreenJello> and having to represent the loading/error states for every possible query, be it an individual item or list, it's a huge mess
[09:59:13] <GreenJello> I never found a good solution to that, and not for lack of trying
[09:59:48] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 272 seconds)
[10:00:05] <wroathe> GreenJello: Hmm. I'm not quite picturing the scenario. I'm familiar with loading/error/data states, but the Redux approach would just be to useSelector to connect your component instance to them
[10:00:43] <wroathe> GreenJello: Are you talking about a scenario where you have multiple concurrent AJAX requests, and individual component instances dependent on them?
[10:03:25] <theskillwithin> still need to fire those action states
[10:03:26] <GreenJello> if you have resources /api/posts?page=:n, /api/post/:id your state is like postsByPage: { [n]: { loading: bool, error: ?E, items: string[] } }, postsById: { [id]: { loading: …, item: ?Post } }
[10:04:45] <wroathe> GreenJello: So /api/posts?page=:n returns a list of post IDs, and then you turn around and request individual post content with separate ajax calls to that second resource?
[10:04:52] <GreenJello> this is already a bit of a mess, but this quickly falls apart if there's a field only in one of the APIs, or you need to add extra query params to one of them
[10:05:30] <GreenJello> nah, typically you have a list API that returns a list of objects, and you also have detail APIs for when the user wants a specific item
[10:05:42] <wroathe> GreenJello: Yeah, that's typical
[10:05:45] *** Joins: gggp__ (~gggp@123.115.132.5)
[10:05:46] <GreenJello> with mostly the same fields, or a subset
[10:05:52] <GreenJello> superset*
[10:06:06] <wroathe> GreenJello: I figured you were setting up an unideal hypothetical scenario
[10:06:47] <wroathe> GreenJello: So postsByPage is a map of page number to request state and response data
[10:07:00] <wroathe> GreenJello: So you're talking about the mapping of request parameters to request state
[10:07:06] <wroathe> Like, in general
[10:07:20] <GreenJello> yeah, since it's global state you need to key it by the specific request being performed
[10:07:41] <wroathe> That's a really good point. I'll have to mull that one over.
[10:07:42] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[10:08:35] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[10:08:41] *** Quits: gggp_ (~gggp@60.10.23.162) (Ping timeout: 248 seconds)
[10:08:44] <theskillwithin> or in graphql just supply $first and $skip and ez pagination
[10:11:27] <wroathe> GreenJello: What's floating around my head right now is some kind of scheme where you store the serialized request params on the Request object itself, and then keep a global mapping of a generated request ID to that request object somewhere, and then use that generated request ID as the key for that request in the redux state
[10:11:44] <wroathe> GreenJello: Just as a potential solution
[10:13:01] <wroathe> GreenJello: (for scenarios where you've got multiple request params that would form a compound key into the structure)
[10:13:27] <wroathe> But really the right answer might just be functions to compute compound keys from request parameters within the store.
[10:13:43] <GreenJello> would that be a random id, or hash of the request params?
[10:14:12] <wroathe> GreenJello: My first thought was just even an incrementing integer ID
[10:14:27] <wroathe> GreenJello: It would just need to uniquely identify the request object in that map
[10:15:04] <wroathe> const reqId = uid++; requests[reqId] = request
[10:15:08] <GreenJello> I've done that, and it's really just an over-complicated version of storing state in components (which is presumably where you're storing the request id)
[10:16:26] <GreenJello> it does get the job done, except your posts by id or whatever reducer is also going to update for the requests you no longer care about
[10:17:05] <GreenJello> otherwise it's the same as components being able to unsubscribe from requests by hook dependencies changing
[10:17:46] <GreenJello> (but with more steps and leaking memory)
[10:17:53] <wroathe> GreenJello: As I'm thinking about this, I think in your hypothetical scenario here you don't even need to store request state flags for each page, do you? Really it would be dependent on how your UI is structured.
[10:18:18] <wroathe> GreenJello: If this is pagination it would just be request state for that whole pagination component
[10:18:28] <wroathe> GreenJello: Rather than for the specific page
[10:19:01] <wroathe> (presumably they can only change the page one at a time, and not concurrently)
[10:19:38] <GreenJello> if you're doing component-specific redux state instead of modeling resources in redux state, you can get around some of these issues
[10:19:42] <GreenJello> but that's kinda leaky
[10:20:18] <GreenJello> and again gets you back to using hacks to avoid having the component track the state
[10:20:55] *** Joins: gggp_ (~gggp@123.113.181.165)
[10:21:05] <GreenJello> the component already has a place to store state and has a concept of its own identity (without needing to name it)
[10:22:24] <wroathe> Right, but within the component it would just amount to being const { loading, error } = useSelector(s => s.postsPagination);
[10:22:35] <wroathe> (if the posts pagination is a singleton on the page)
[10:23:27] <GreenJello> oh, I had an impractical avoidance of assuming anything was a singleton
[10:23:38] <GreenJello> which is probably where a lot of my problems came from
[10:24:05] <GreenJello> *definitely where a lot of my problems came from
[10:24:05] *** Quits: gggp__ (~gggp@123.115.132.5) (Ping timeout: 258 seconds)
[10:24:20] <wroathe> Well, this conversation has given me a lot to play with
[10:24:27] <wroathe> GreenJello: So thanks very much
[10:26:01] <wroathe> It does get a lot tricker when you take into account multiple component instances. It's a question of whether you model the store in terms of the data, or in terms of the component structure.
[10:26:30] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:27:36] <wroathe> The component structure will obviously be a cleaner mapping, but then ties your store to the structure of your UI in potentially an undesirable way, and structuring it in terms of the raw data will lead to extreme pain trying to map that back to your components.
[10:35:26] <theskillwithin> PikaChokeMe nice
[10:36:32] *** Quits: LiftLeft (~LiftLeft@212.102.58.170) (Ping timeout: 272 seconds)
[10:37:00] <PikaChokeMe> my only regret
[10:37:03] <PikaChokeMe> is that it's still slow
[10:37:44] *** Quits: jimbzy (~jb@user/jimbzy) (Ping timeout: 272 seconds)
[10:39:26] *** Quits: ckdcreation (~ckdCreati@147.55.130.37) (Read error: Connection reset by peer)
[10:39:42] *** Joins: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[10:40:45] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[10:43:41] *** Joins: jimbzy (~jb@hwsrv-458174.hostwindsdns.com)
[10:43:42] *** Quits: jimbzy (~jb@hwsrv-458174.hostwindsdns.com) (Changing host)
[10:43:42] *** Joins: jimbzy (~jb@user/jimbzy)
[10:44:24] *** Joins: gggp__ (~gggp@221.219.70.239)
[10:45:53] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[10:46:26] *** Quits: ckdcreation (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[10:47:38] *** Quits: gggp_ (~gggp@123.113.181.165) (Ping timeout: 252 seconds)
[10:48:39] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[10:50:31] <theskillwithin> PikaChokeMe dang that sucks,  do you have to run in the browser?
[10:56:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[10:57:36] *** Joins: qswz (~caub@91-175-196-225.subs.proxad.net)
[10:58:58] <PikaChokeMe> mmm... not necessarily... I was just like... yeah... I'll make a cruddy electron app most ill fit for its purpose xD
[11:00:44] <theskillwithin> oh didn't know it was electron
[11:00:57] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[11:01:04] <PikaChokeMe> It's not yet, but soon
[11:01:05] <PikaChokeMe> also
[11:01:16] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[11:01:28] <PikaChokeMe> turns out that like... spreading two increasingly massive arrays over and over again is really expensive apparently
[11:01:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 272 seconds)
[11:02:28] <PikaChokeMe> can a JS array even hold 282429536481 elements?
[11:02:50] <theskillwithin> well
[11:02:59] <theskillwithin> if there all empty yes
[11:03:48] <theskillwithin> n> Array.from({ length: 282429536481 })
[11:03:49] <jellobot> (fail) RangeError: Invalid array length
[11:04:45] <theskillwithin> well i was wrong
[11:05:47] *** Joins: cloudbender62 (~cloudbend@user/cloudbender)
[11:06:27] <theskillwithin> what about JSON
[11:06:49] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 248 seconds)
[11:09:24] *** Joins: earendel (uid498179@id-498179.tooting.irccloud.com)
[11:10:00] *** Quits: earendel (uid498179@id-498179.tooting.irccloud.com) (Changing host)
[11:10:00] *** Joins: earendel (uid498179@user/earendel)
[11:10:09] <ljharb> JSON can hold infinite elements, but every parser will have some limit
[11:10:16] <ljharb> PikaChokeMe: why would you spread them when `.concat` exists
[11:10:23] <ljharb> PikaChokeMe: but also why would you have massive arrays at all
[11:10:59] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:11:32] <theskillwithin> ljharb came in late
[11:11:46] <PikaChokeMe> I'm using a UI framework that depends on the pointer for the array changing to detect "changes"
[11:12:24] <PikaChokeMe> and I'm basically building a tool that calculates all possible outfits from sub arrays of shoes pants shirts belts bracers tops etc.
[11:12:37] <ljharb> there are no pointer
[11:12:38] <ljharb> s
[11:12:55] <ljharb> do you mean, object identity?
[11:13:21] <ljharb> um, why would you need all possible combinations of that in the UI?
[11:13:32] <ljharb> people don't browse a website and say "show me every possible outfit"
[11:14:03] <theskillwithin> wasn't it like 3 ** 24
[11:14:05] <PikaChokeMe> because every out has different stats, like skill, mastery, or wisdom
[11:14:38] <PikaChokeMe> I wanted to be able to look and compare all these sets and possibly even find like... which set has skill, mastery, and wisdom all within 20 points of each other
[11:15:43] <ljharb> PikaChokeMe: that does not sound like the job of a UI
[11:15:53] <ljharb> PikaChokeMe: that sounds like the job of a backend, preprocessed so you never need to do it on the fly
[11:16:05] <ljharb> why would you want to do that kind of massive map/reduce in the browser?
[11:16:13] *** Quits: gggp__ (~gggp@221.219.70.239) (Ping timeout: 258 seconds)
[11:16:14] <theskillwithin> thats what i was trying to say
[11:18:00] <earendel> is the |detecting changes| part working?
[11:18:21] <ljharb> earendel: they were running into trouble copying such large arrays, so i don't think that's at all the problem
[11:18:38] <PikaChokeMe> there's a lot of problems with the approach all around :D
[11:18:54] <earendel> i wanted one too :/
[11:19:32] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[11:19:54] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (Ping timeout: 240 seconds)
[11:20:47] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[11:21:10] <earendel> is it eventually for training purposes? sounds like some db job .. but of course we can just entertain a case in which you would want to have that part done in the browser.
[11:21:23] <earendel> couldn't we?
[11:21:43] <PikaChokeMe> it's just supposed to be a little electron tool people can run at the end of the day
[11:21:47] <PikaChokeMe> and plan builds with
[11:21:51] <PikaChokeMe> to be "optimal"
[11:22:04] <PikaChokeMe> it's for an MMO
[11:23:12] *** Joins: cloudbender52 (~cloudbend@user/cloudbender)
[11:23:24] *** Quits: cloudbender62 (~cloudbend@user/cloudbender) (Ping timeout: 272 seconds)
[11:25:00] <earendel> remember ever planning to start a band and decide upon the name in first place. seems most of that plans stuck there. gues s the names weren't good.
[11:26:19] <theskillwithin> as in the first step should have been the last
[11:26:31] *** Joins: cloudbender69 (~cloudbend@user/cloudbender)
[11:26:34] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 272 seconds)
[11:27:14] *** Quits: cloudbender69 (~cloudbend@user/cloudbender) (Client Quit)
[11:28:16] <earendel> right. the first step should have been to get the van halen v guitars.
[11:28:32] <earendel> and then eventually learn to play. ;>
[11:29:13] *** Quits: cloudbender52 (~cloudbend@user/cloudbender) (Ping timeout: 248 seconds)
[11:33:16] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[11:34:51] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Read error: Connection reset by peer)
[11:35:43] <theskillwithin> idk how you learn to play guitar before getting a guitar
[11:36:00] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[11:36:57] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Remote host closed the connection)
[11:37:30] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[11:38:00] <earendel> i draw one ..loo
[11:38:11] <theskillwithin> its so easy to optimize a thing, that should not be a thing
[11:38:20] <earendel> fair enuff.
[11:38:59] <earendel> PikaChokeMe: we decided you get van halen first.
[11:39:48] <theskillwithin> well thats like bias, cuz we all grow up in school.  where we optimize answer
[11:40:36] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[11:40:36] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[11:40:36] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[11:41:16] <earendel> speak for yourself tasmanian imbecile
[11:41:34] <earendel> lol
[11:41:37] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:42:55] <earendel> without knowing the question?
[11:43:12] <earendel> like in jeopardy.
[11:43:56] <earendel> or in the deep thought story.
[11:44:31] <earendel> arthouse cinema
[11:47:24] <theskillwithin> wat
[11:47:25] <earendel> theskillwithin: don't be sad. i was just teasing.
[11:49:56] <theskillwithin> im not sad, im confused lol
[11:50:22] <theskillwithin> was your intention to make me sad?
[11:50:46] <earendel> no.
[11:51:40] <theskillwithin> then thats an odd thing to say lol
[11:52:29] * earendel set channel mode -m
[11:56:49] *** Joins: gggp__ (~gggp@123.113.182.84)
[11:58:07] *** Joins: vysn (~vysn@user/vysn)
[11:59:04] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[11:59:23] *** Quits: qswz (~caub@91-175-196-225.subs.proxad.net) (Quit: leaving)
[11:59:26] *** Quits: codebam (~codebam@user/codebam) (Quit: WeeChat 3.2)
[12:00:58] *** Joins: fikran (~fikran@user/fikran)
[12:02:12] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[12:02:41] *** Joins: mickey8 (~user@user/mickey)
[12:03:01] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[12:03:21] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[12:13:03] *** Joins: CryptoDavid (uid14990@id-14990.highgate.irccloud.com)
[12:14:18] *** Quits: owlbynight (sid501016@tinside.irccloud.com) (Ping timeout: 240 seconds)
[12:14:18] *** Quits: Lewix (sid158496@tinside.irccloud.com) (Ping timeout: 240 seconds)
[12:14:33] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (Ping timeout: 252 seconds)
[12:14:55] *** Joins: Lewix (sid158496@id-158496.tinside.irccloud.com)
[12:14:58] *** Quits: victor (sid208353@user/victor) (Ping timeout: 240 seconds)
[12:15:01] *** Joins: owlbynight (sid501016@id-501016.tinside.irccloud.com)
[12:15:41] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[12:15:53] *** Joins: victor (sid208353@user/victor)
[12:19:07] *** Joins: debayer (~debayer@2603-8000-cf00-0010-6506-f455-c63d-7629.res6.spectrum.com)
[12:19:39] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[12:21:23] *** Quits: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:21:29] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 248 seconds)
[12:23:47] *** Joins: nwoob (~apple@103.233.123.202)
[12:25:03] *** Parts: nwoob (~apple@103.233.123.202) ()
[12:31:08] *** Quits: realies (~realies@user/realies) (Ping timeout: 268 seconds)
[12:33:43] *** Joins: duch_kazatel (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[12:34:08] *** Joins: Lyn (~Lyn@user/law)
[12:34:25] *** Quits: robertmaxrees (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (Ping timeout: 258 seconds)
[12:35:29] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:33] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:40:56] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[12:43:14] *** Quits: momus (~momus@ec2-18-195-22-48.eu-central-1.compute.amazonaws.com) (Ping timeout: 258 seconds)
[12:43:24] *** Joins: momus (~momus@ec2-18-195-22-48.eu-central-1.compute.amazonaws.com)
[12:43:25] *** Joins: WishBoy (~WishBoy@user/wishboy)
[12:48:56] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[12:51:21] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 248 seconds)
[12:53:20] *** Quits: YaknotiS (~YaknotiS@user/yaknotis) (Ping timeout: 272 seconds)
[12:54:25] *** Joins: Fleuv (~Fleuv@83.98.230.230)
[12:55:32] *** Quits: gehn (~gehn@user/gehn) (Remote host closed the connection)
[12:55:51] *** Joins: gehn (~gehn@user/gehn)
[12:56:55] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (Quit: No Ping reply in 180 seconds.)
[12:57:13] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[13:00:58] *** Quits: debayer (~debayer@2603-8000-cf00-0010-6506-f455-c63d-7629.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[13:02:58] *** Quits: Fleuv (~Fleuv@83.98.230.230) (Quit: Leaving)
[13:16:15] *** Joins: Naan (~Naan@user/naan)
[13:17:22] *** Joins: jmft2 (~JMFT@81.149.115.87.dyn.plus.net)
[13:18:53] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[13:19:19] *** Joins: enoq (~enoq@194-208-179-35.lampert.tv)
[13:21:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[13:42:33] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:43:28] *** Quits: wintersky (uid453465@id-453465.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[13:54:48] *** gggp__ is now known as gggp
[14:03:24] *** Joins: funabash1 (funabashi@185.52.0.236)
[14:03:42] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 256 seconds)
[14:08:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 248 seconds)
[14:10:17] *** Joins: fikran (~fikran@user/fikran)
[14:11:12] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[14:13:13] *** Joins: entuland (~entuland@user/entuland)
[14:14:49] *** Joins: federico_it (~textual@151.95.116.125)
[14:14:51] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[14:16:09] <PikaChokeMe> is it like... bad practice to use more than one map
[14:16:33] <PikaChokeMe> like pipe(map(stuff), map(mapSomeMore))
[14:17:28] <PikaChokeMe> I think I could theoretically do this all in one line
[14:18:01] <gehn> PikaChokeMe, I would often consider that good practice most likely
[14:18:21] <gehn> isolate each operation from the others (where possible), each map does one tiny thing, then the next map does something to that
[14:18:25] <PikaChokeMe> whew... I just didn't know if there were really bad performance implications for this or something
[14:18:41] <gehn> then each operation so to speak is small and testable, independent of the others, and composable
[14:19:31] <gehn> if you're worried about performance you probably shouldn't be using JavaScript
[14:19:55] <gehn> with that said, also, if you're using JavaScript you shouldn't worry about performance
[14:20:20] <gehn> because A) javascript is actually quite fast and B) premature optimization is the root of all evil so sayeth our lord and savior Knuth
[14:21:02] <gehn> PikaChokeMe, performance is found in the mind of the developer, not in the language
[14:21:28] *** Quits: CryptoDavid (uid14990@id-14990.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[14:21:32] <gehn> always prioritize good code over everything else by default
[14:22:04] <gehn> *if* you notice performance problems, *then* and only then you must first profile and benchmark to identify where those problems are
[14:22:47] <gehn> good code that was written to be good code in the first place will be much easier to optimize later anyway, that's *if* you actually have performance problems, which you probably don't
[14:32:00] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[14:33:13] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 248 seconds)
[14:36:01] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[14:38:06] *** Quits: federico_it (~textual@151.95.116.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:40:44] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[14:43:52] *** Quits: Naan (~Naan@user/naan) (Read error: Connection reset by peer)
[14:44:27] *** Joins: Naan (~Naan@user/naan)
[14:45:23] *** Joins: federico_it (~textual@151.95.116.125)
[14:50:56] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Quit: rewrit3)
[14:54:15] *** Joins: tungki (~tngk@subs20-114-142-172-49.three.co.id)
[14:58:00] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[14:59:39] *** Quits: federico_it (~textual@151.95.116.125) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:01:44] *** Joins: federico_it (~textual@151.95.116.125)
[15:04:04] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[15:04:22] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[15:04:28] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Client Quit)
[15:07:12] *** Quits: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com) (Ping timeout: 245 seconds)
[15:12:00] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e)
[15:14:49] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 248 seconds)
[15:15:34] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:16:28] *** Joins: thiras (~thiras@user/thiras)
[15:16:50] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[15:17:38] *** Quits: tungki (~tngk@subs20-114-142-172-49.three.co.id) (Ping timeout: 268 seconds)
[15:20:16] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[15:27:00] *** Quits: jmft2 (~JMFT@81.149.115.87.dyn.plus.net) (Ping timeout: 256 seconds)
[15:28:46] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:44a5:d8a3:809:6e7e) (Quit: Leaving)
[15:32:24] *** Joins: Guest2024 (~stella@5.179.148.161)
[15:32:31] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[15:34:18] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[15:38:59] *** Quits: Guest2024 (~stella@5.179.148.161) (Quit: Client closed)
[15:39:34] *** Quits: stiv3n (~stiv3n@184.170.252.218) (Ping timeout: 258 seconds)
[15:41:33] *** Joins: stiv3n (~stiv3n@172.98.87.169)
[15:42:49] *** Joins: jmft2 (~JMFT@82.3.54.26)
[15:47:30] *** Joins: Guest716 (~Guest7@188.232.182.132)
[15:54:08] *** Joins: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com)
[15:55:14] *** Joins: tungki (~tngk@subs20-114-142-172-49.three.co.id)
[15:55:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[15:56:22] *** Joins: summersault (~summersau@179.221.251.16)
[15:57:23] *** Quits: tungki (~tngk@subs20-114-142-172-49.three.co.id) (Read error: Connection reset by peer)
[15:59:34] *** Joins: tungki (~tngk@subs31-116-206-15-25.three.co.id)
[16:01:09] *** Joins: pulse (~pulse@user/pulse)
[16:01:32] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[16:01:36] *** Joins: Harlin_ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[16:01:56] *** Joins: wwwi (~User@128-201-104.netrun.cytanet.com.cy)
[16:05:10] *** Quits: N4buc0 (~N4buc0@2001:1284:f013:588:f27d:ab41:1311:18e6) (Quit: Leaving)
[16:06:01] *** Quits: Harlin_ (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (Ping timeout: 248 seconds)
[16:09:45] *** Quits: stiv3n (~stiv3n@172.98.87.169) (Ping timeout: 248 seconds)
[16:11:08] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:14:14] *** Quits: Woet (~me@irc.woet.me) (Ping timeout: 252 seconds)
[16:14:47] *** Quits: pupskuchen (~pupskuche@user/pupskuchen) (Ping timeout: 252 seconds)
[16:15:53] *** Quits: shan (shan@user/shan) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: AlbertLast (~nix@0exclusive.de) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: hassoon (hassoon@user/hassoon) (Ping timeout: 252 seconds)
[16:16:26] *** Quits: Axy (~Axy@user/axy) (Ping timeout: 252 seconds)
[16:16:59] *** Quits: polyrob (~rob@user/polyrob) (Ping timeout: 252 seconds)
[16:21:56] *** Quits: litharge (litharge@libera/bot/litharge) (*.net *.split)
[16:21:56] *** Quits: ozone (ozone@libera/bot/ozone) (*.net *.split)
[16:21:56] *** Quits: wwwi (~User@128-201-104.netrun.cytanet.com.cy) (*.net *.split)
[16:21:56] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (*.net *.split)
[16:21:56] *** Quits: fikran (~fikran@user/fikran) (*.net *.split)
[16:21:56] *** Quits: momus (~momus@ec2-18-195-22-48.eu-central-1.compute.amazonaws.com) (*.net *.split)
[16:21:56] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (*.net *.split)
[16:21:56] *** Quits: duch_kazatel (~robert0@c-76-114-62-229.hsd1.ca.comcast.net) (*.net *.split)
[16:21:56] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (*.net *.split)
[16:21:56] *** Quits: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com) (*.net *.split)
[16:21:56] *** Quits: Jonno_FTW (~come@api.carswap.me) (*.net *.split)
[16:21:56] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[16:21:56] *** Quits: irrgit_ (~irrgit@192.241.175.183) (*.net *.split)
[16:21:56] *** Quits: gde35|2 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[16:21:56] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (*.net *.split)
[16:21:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (*.net *.split)
[16:21:56] *** Quits: Neuromancer (~Neuromanc@user/neuromancer) (*.net *.split)
[16:21:56] *** Quits: APic (apic@apic.name) (*.net *.split)
[16:21:56] *** Quits: iomari891 (~iomari891@105.112.138.38) (*.net *.split)
[16:21:56] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[16:21:56] *** Quits: nedbat (~nedbat@python/psf/nedbat) (*.net *.split)
[16:21:56] *** Quits: Pixi (~Pixi@user/pixi) (*.net *.split)
[16:21:56] *** Quits: ozymandias (~ozymandia@libre.theyareafter.us) (*.net *.split)
[16:21:56] *** Quits: byte4byte_ (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net) (*.net *.split)
[16:21:56] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[16:21:56] *** Quits: edr (~edr@user/edr) (*.net *.split)
[16:21:57] *** Quits: thiras (~thiras@user/thiras) (*.net *.split)
[16:21:57] *** Quits: gehn (~gehn@user/gehn) (*.net *.split)
[16:21:57] *** Quits: Lyn (~Lyn@user/law) (*.net *.split)
[16:21:57] *** Quits: victor (sid208353@user/victor) (*.net *.split)
[16:21:57] *** Quits: kraih (sid17075@mojo/destroy-all-humans/kraih) (*.net *.split)
[16:21:57] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[16:21:57] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (*.net *.split)
[16:21:57] *** Quits: earendel (uid498179@user/earendel) (*.net *.split)
[16:21:57] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (*.net *.split)
[16:21:57] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (*.net *.split)
[16:21:57] *** Quits: D4mned (~Dmnd@212.101.253.244) (*.net *.split)
[16:21:57] *** Quits: silly_ (~silly@user/silly) (*.net *.split)
[16:21:57] *** Quits: LtHummus (~lthummus@97-126-113-251.tukw.qwest.net) (*.net *.split)
[16:21:57] *** Quits: beencubed (~beencubed@209.131.238.248) (*.net *.split)
[16:21:57] *** Quits: PikaChokeMe (~PikaChoke@c-24-11-1-200.hsd1.ut.comcast.net) (*.net *.split)
[16:21:57] *** Quits: krishna (~krishna@76.14.21.109) (*.net *.split)
[16:21:57] *** Quits: michaelis (~michaelis@193.183.209.17) (*.net *.split)
[16:21:57] *** Quits: JackFin (~ircuser@S01069050ca4e3573.cg.shawcable.net) (*.net *.split)
[16:21:57] *** Quits: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de) (*.net *.split)
[16:21:57] *** Quits: unixcat64 (thelounge@envs.net) (*.net *.split)
[16:21:57] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[16:21:57] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (*.net *.split)
[16:21:57] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[16:21:57] *** Quits: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at) (*.net *.split)
[16:21:57] *** Quits: mei (~mei@user/mei) (*.net *.split)
[16:21:57] *** Quits: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be) (*.net *.split)
[16:21:57] *** Quits: loke[m] (~loke@2001:470:69fc:105::237) (*.net *.split)
[16:21:57] *** Quits: kadoban (~kadoban@user/kadoban) (*.net *.split)
[16:21:58] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[16:21:58] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[16:21:58] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[16:21:58] *** Quits: deadbeat (~quassel@user/deadbeat) (*.net *.split)
[16:21:58] *** Quits: doc (~doc@user/doc) (*.net *.split)
[16:21:58] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[16:21:58] *** Quits: FightingFalcon (~none@user/fightingfalcon) (*.net *.split)
[16:21:58] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[16:21:58] *** Quits: tungki (~tngk@subs31-116-206-15-25.three.co.id) (*.net *.split)
[16:21:58] *** Quits: seabass (~seabassfo@2001:470:69fc:105::187) (*.net *.split)
[16:21:58] *** Quits: greggerz (~greggerzm@2001:470:69fc:105::da2) (*.net *.split)
[16:21:58] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[16:21:58] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[16:21:59] *** Quits: s1b1 (~s1b1@user/s1b1) (*.net *.split)
[16:21:59] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[16:21:59] *** Quits: bestdesign (~bestdesig@order.a.whore.website) (*.net *.split)
[16:21:59] *** Quits: simius_ (~simius@user/simius) (*.net *.split)
[16:21:59] *** Quits: Albright_ (~Albright@149.28.13.173) (*.net *.split)
[16:21:59] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[16:21:59] *** Quits: mrdata (~mrdata@user/mrdata) (*.net *.split)
[16:21:59] *** Quits: jess (~jess@libera/staff/jess) (*.net *.split)
[16:21:59] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (*.net *.split)
[16:21:59] *** Quits: themaxdavitt (sid433050@user/themaxdavitt) (*.net *.split)
[16:21:59] *** Quits: morgabra (sid500580@user/morgabra) (*.net *.split)
[16:21:59] *** Quits: DrowningElysium (sid190788@user/drowningelysium) (*.net *.split)
[16:21:59] *** Quits: gendl (sid100083@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: lebster (sid17131@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: Manouchehri (sid384576@stonehaven.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: cis (cis@user/cis) (*.net *.split)
[16:21:59] *** Quits: keypusher (keypusher@user/keypusher) (*.net *.split)
[16:21:59] *** Quits: tkob (tkob@user/thekingofbandit) (*.net *.split)
[16:21:59] *** Quits: jsatk (sid304796@id-304796.brockwell.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: Ducki (~ducki@user/ducki) (*.net *.split)
[16:21:59] *** Quits: dfg (dfg@user/dfg) (*.net *.split)
[16:21:59] *** Quits: entuland (~entuland@user/entuland) (*.net *.split)
[16:21:59] *** Quits: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com) (*.net *.split)
[16:21:59] *** Quits: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467) (*.net *.split)
[16:21:59] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (*.net *.split)
[16:21:59] *** Quits: bodiccea (~bodiccea@user/bodiccea) (*.net *.split)
[16:22:00] *** Quits: ringo_ (~ringo@157.230.117.128) (*.net *.split)
[16:22:00] *** Quits: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com) (*.net *.split)
[16:22:00] *** Quits: itok (sid418430@id-418430.charlton.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: ruel (~ruel@falcon.ruhnet.net) (*.net *.split)
[16:22:00] *** Quits: seed0 (~seed0@user/seed0) (*.net *.split)
[16:22:00] *** Quits: MachinShin (sid243317@id-243317.brockwell.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: Joel (~jjshoe@user/joel) (*.net *.split)
[16:22:00] *** Quits: tofran (~tofran@37.189.158.134) (*.net *.split)
[16:22:00] *** Quits: doji (~doji@user/doji) (*.net *.split)
[16:22:00] *** Quits: graingert (sid128301@id-128301.tinside.irccloud.com) (*.net *.split)
[16:22:00] *** Quits: Ares000 (~Ares3@37.228.196.119) (*.net *.split)
[16:22:00] *** Quits: wallbroken (wallbroken@user/wallbroken) (*.net *.split)
[16:22:00] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2851:91a4:af4c:7957) (*.net *.split)
[16:22:00] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[16:22:00] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:c578:89c3:1fce:4302) (*.net *.split)
[16:22:00] *** Quits: welldonehowever (welldoneho@welldonehowever.oddprotocol.org) (*.net *.split)
[16:22:00] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[16:22:00] *** Quits: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:00] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (*.net *.split)
[16:22:00] *** Quits: kadobanana (~mud@user/kadoban) (*.net *.split)
[16:22:00] *** Quits: mven (~mven@072-179-001-159.res.spectrum.com) (*.net *.split)
[16:22:00] *** Quits: celphi (uid97751@user/celphi) (*.net *.split)
[16:22:00] *** Quits: wolfshappen (~waff@irc.furworks.de) (*.net *.split)
[16:22:00] *** Quits: coc0nut (~coc0nut@user/coc0nut) (*.net *.split)
[16:22:00] *** Quits: WillPittenger (~willpitte@2001:470:69fc:105::1bf) (*.net *.split)
[16:22:01] *** Quits: repo[m] (~repo@user/repo) (*.net *.split)
[16:22:01] *** Quits: dskull (~dskull@user/dskull) (*.net *.split)
[16:22:01] *** Quits: luny (~luny@52.178.89.202) (*.net *.split)
[16:22:01] *** Quits: paule32 (~paule32@user/paule32) (*.net *.split)
[16:22:01] *** Quits: acid (~acid@user/acid) (*.net *.split)
[16:22:01] *** Quits: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[16:22:01] *** Quits: Tabmow (~tabmow@user/tabmow) (*.net *.split)
[16:22:01] *** Quits: cinderblock (~cinderblo@firefly.isozilla.com) (*.net *.split)
[16:22:01] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[16:22:01] *** Quits: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net) (*.net *.split)
[16:22:01] *** Quits: hax (~hax@user/hax) (*.net *.split)
[16:22:01] *** Quits: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (*.net *.split)
[16:22:01] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[16:22:01] *** Quits: Kays (Kays@user/kays) (*.net *.split)
[16:22:01] *** Quits: beowulf (sid116@id-116.tooting.irccloud.com) (*.net *.split)
[16:22:01] *** Quits: Fozzworth_ (~Fozzworth@user/fozzworth) (*.net *.split)
[16:22:01] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[16:22:02] *** Quits: federico_it (~textual@151.95.116.125) (*.net *.split)
[16:22:02] *** Quits: cisme_ (~cisme_@user/cisme/x-1186982) (*.net *.split)
[16:22:02] *** Quits: nicoty[m] (~nicoty@user/nicoty) (*.net *.split)
[16:22:02] *** Quits: Deide (~deide@user/deide) (*.net *.split)
[16:22:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[16:22:02] *** Quits: jonifen (~jonifen@user/jonifen) (*.net *.split)
[16:22:02] *** Quits: electr0n (~electr0n@about/security/founder/electr0n) (*.net *.split)
[16:22:02] *** Quits: dlam (~dlam@dlam.me) (*.net *.split)
[16:22:02] *** Quits: mishiranu (~mishiranu@78.129.171.229) (*.net *.split)
[16:22:02] *** Quits: ekl (~ekl@user/ekl) (*.net *.split)
[16:22:02] *** Quits: ninjabanjo (~ninjabanj@107.150.45.163) (*.net *.split)
[16:22:02] *** Quits: rogorido (~rogorido@mail.georeligion.org) (*.net *.split)
[16:22:02] *** Quits: Dorward (~dorward@13.5.169.217.in-addr.arpa) (*.net *.split)
[16:22:02] *** Quits: ryzokuken (~ryzokuken@fanzine2.igalia.com) (*.net *.split)
[16:22:02] *** Quits: Jck_true (~jcktrue@188.228.89.240) (*.net *.split)
[16:22:02] *** Quits: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003) (*.net *.split)
[16:22:02] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (*.net *.split)
[16:22:02] *** Quits: deniska (~denis@user/deniska) (*.net *.split)
[16:22:02] *** Quits: purphoros (~purphoros@devforge.org) (*.net *.split)
[16:22:02] *** Quits: Pajus (~Pajus@user/pajus) (*.net *.split)
[16:22:03] *** Quits: zd (~zd@7.210.184.35.bc.googleusercontent.com) (*.net *.split)
[16:22:03] *** Quits: Henry151 (~bishop@user/henry151) (*.net *.split)
[16:22:03] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[16:22:03] *** Quits: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2) (*.net *.split)
[16:22:03] *** Quits: ashnur (~rak@user/ashnur) (*.net *.split)
[16:22:03] *** Quits: les (znc@user/les) (*.net *.split)
[16:22:03] *** Quits: Kirjava (~cake@user/kirjava) (*.net *.split)
[16:22:03] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (*.net *.split)
[16:22:03] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[16:22:03] *** Quits: summersault (~summersau@179.221.251.16) (*.net *.split)
[16:22:03] *** Quits: banana_ (~banana_@user/banana/x-2944094) (*.net *.split)
[16:22:03] *** Quits: jmft2 (~JMFT@82.3.54.26) (*.net *.split)
[16:22:03] *** Quits: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com) (*.net *.split)
[16:22:03] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (*.net *.split)
[16:22:03] *** Quits: enoq (~enoq@194-208-179-35.lampert.tv) (*.net *.split)
[16:22:03] *** Quits: Nitrousoxide (~msdos@user/nitrousoxide) (*.net *.split)
[16:22:03] *** Quits: gggp (~gggp@123.113.182.84) (*.net *.split)
[16:22:03] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (*.net *.split)
[16:22:03] *** Quits: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de) (*.net *.split)
[16:22:03] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (*.net *.split)
[16:22:03] *** Quits: ircuser-1 (~Johnny@71.63.241.168) (*.net *.split)
[16:22:03] *** Quits: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net) (*.net *.split)
[16:22:03] *** Quits: Popzi_ (~Popzi@95.150.161.138) (*.net *.split)
[16:22:03] *** Quits: NoiseEee (~NoiseEee@178.128.153.219) (*.net *.split)
[16:22:03] *** Quits: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi) (*.net *.split)
[16:22:03] *** Quits: Jaran|zZZzZZZzz (~mail@user/jaran) (*.net *.split)
[16:22:03] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[16:22:03] *** Quits: skillbot (~skillbot@user/skillbot) (*.net *.split)
[16:22:03] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[16:22:03] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (*.net *.split)
[16:22:03] *** Quits: Naan (~Naan@user/naan) (*.net *.split)
[16:22:03] *** Quits: owlbynight (sid501016@id-501016.tinside.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: Lewix (sid158496@id-158496.tinside.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: mkbloke (~mkbloke@vps.cammo.me.uk) (*.net *.split)
[16:22:03] *** Quits: jimbzy (~jb@user/jimbzy) (*.net *.split)
[16:22:03] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[16:22:03] *** Quits: beeza (sid53872@id-53872.tinside.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: gambl0re (~gambl0re@24.140.237.124) (*.net *.split)
[16:22:03] *** Quits: Alvin_ (~Alvin@122.162.213.4) (*.net *.split)
[16:22:03] *** Quits: Sherpard2_ (~VPard@user/sherpard2) (*.net *.split)
[16:22:03] *** Quits: fkrauthan (~fkrauthan@user/fkrauthan) (*.net *.split)
[16:22:03] *** Quits: Alexendoo (~Alexendoo@macleod.io) (*.net *.split)
[16:22:03] *** Quits: zopsi (~zopsi@irc.dir.ac) (*.net *.split)
[16:22:03] *** Quits: jellobot (~jellobot@104.248.16.142) (*.net *.split)
[16:22:03] *** Quits: CoJaBo (~aztec@user/CoJaBo) (*.net *.split)
[16:22:03] *** Quits: Bombo (atom@user/bombo) (*.net *.split)
[16:22:03] *** Quits: cythrawll (sid384410@id-384410.charlton.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: jwpapi (sid502614@id-502614.highgate.irccloud.com) (*.net *.split)
[16:22:03] *** Quits: snek (sid280155@id-280155.tooting.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: stigz (sid371747@id-371747.tinside.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: rickbutton (sid410078@id-410078.brockwell.irccloud.com) (*.net *.split)
[16:22:04] *** Quits: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:04] *** Quits: xsznix (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[16:22:04] *** Quits: JohnDoe2 (~johndoe2@2001:470:1f07:89::dead:bead) (*.net *.split)
[16:22:04] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[16:22:04] *** Quits: Jigsy (~Jigsy@user/jigsy) (*.net *.split)
[16:22:04] *** Quits: TheSilentLink (~TheSilent@user/thesilentlink) (*.net *.split)
[16:22:04] *** Quits: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi) (*.net *.split)
[16:22:04] *** Quits: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[16:22:04] *** Quits: eqw (~eqw@31.134.178.99) (*.net *.split)
[16:22:04] *** Quits: gry (~quassel@botters/gry) (*.net *.split)
[16:22:04] *** Quits: lilmonkey` (~lilmonkey@user/lilmonkey) (*.net *.split)
[16:22:04] *** Quits: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795) (*.net *.split)
[16:22:04] *** Quits: mcint (mcint@user/mcint) (*.net *.split)
[16:22:04] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[16:22:04] *** Quits: deltab (~deltab@user/deltab) (*.net *.split)
[16:22:04] *** Quits: optimant (quasselcor@user/optimant) (*.net *.split)
[16:22:04] *** Quits: chovy (~chovy@75-55-138-167.lightspeed.mtryca.sbcglobal.net) (*.net *.split)
[16:22:04] *** Quits: p_stampy (~p_stampy@user/p-stampy/x-2915953) (*.net *.split)
[16:22:04] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (*.net *.split)
[16:22:04] *** Quits: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (*.net *.split)
[16:22:04] *** Quits: haniaF_ (~haniaF@79.191.119.137.ipv4.supernova.orange.pl) (*.net *.split)
[16:22:04] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[16:22:04] *** Quits: nomn (nomn@user/nomn) (*.net *.split)
[16:22:04] *** Quits: koolazer (~koo@user/koolazer) (*.net *.split)
[16:22:04] *** Quits: Dev0n (~Dev0n@user/dev0n) (*.net *.split)
[16:22:04] *** Quits: merced (merced@user/merced) (*.net *.split)
[16:22:04] *** Quits: mikebald (~mikebald@159.203.185.106) (*.net *.split)
[16:22:04] *** Quits: con3 (~con3@2604:a880:4:1d0::be:d000) (*.net *.split)
[16:22:04] *** Quits: samsch (~samsch@171.ip-192-99-69.net) (*.net *.split)
[16:22:04] *** Quits: jmcantrell (~jmcantrel@user/jmcantrell) (*.net *.split)
[16:22:05] *** Quits: paulcarroty (~paulcarro@2001:470:69fc:105::216) (*.net *.split)
[16:22:05] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[16:22:05] *** Quits: webstrand (~webstrand@user/webstrand) (*.net *.split)
[16:22:05] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[16:22:05] *** Quits: Daniel15 (~daniel@d.sb) (*.net *.split)
[16:22:05] *** Quits: Unfixed (~Jake@64.31.33.140) (*.net *.split)
[16:22:05] *** Quits: \mSg (~mSg@user/msg/x-0285936) (*.net *.split)
[16:22:05] *** Quits: PigDude_ (~PigDude@159.203.16.199) (*.net *.split)
[16:22:05] *** Quits: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com) (*.net *.split)
[16:22:05] *** Quits: flying_sausages_ (~flying_sa@83.149.106.219) (*.net *.split)
[16:22:05] *** Quits: spike_spiegel5 (~spike_spi@static.200.4.251.148.clients.your-server.de) (*.net *.split)
[16:22:05] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (*.net *.split)
[16:22:05] *** Quits: jaawerth (~jaawerth@104.131.115.202) (*.net *.split)
[16:22:05] *** Quits: luiserebii (~luiserebi@li1568-23.members.linode.com) (*.net *.split)
[16:22:05] *** Quits: b-rex (~b@v.dropswitch.net) (*.net *.split)
[16:22:05] *** Quits: bin4ry (~bin4ry@128.199.135.148) (*.net *.split)
[16:22:05] *** Quits: chowmeined (~chowmeine@user/chowmeined) (*.net *.split)
[16:22:05] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (*.net *.split)
[16:22:05] *** Quits: hardtotell (~hardtotel@satyr.seedboxes.cc) (*.net *.split)
[16:22:05] *** Quits: ThePendulum (~znc@2a03:b0c0:0:1010::1a8:1) (*.net *.split)
[16:22:05] *** Quits: Linkandzelda (~Linkandze@cloudirc.laz.li) (*.net *.split)
[16:22:05] *** Quits: birkoff (birkoff@user/birkoff) (*.net *.split)
[16:22:05] *** Quits: saikub (saikub@saikub.thunderirc.net) (*.net *.split)
[16:22:05] *** Quits: blez (~blez@213.91.182.96) (*.net *.split)
[16:22:05] *** Quits: _var (~kdy@kiana.kdy.ch) (*.net *.split)
[16:22:05] *** Quits: nullheroes (~nullheroe@168.235.66.22) (*.net *.split)
[16:22:05] *** Quits: Slade (~user@user/slade) (*.net *.split)
[16:22:05] *** Quits: flameboi (dgw@user/flameboi) (*.net *.split)
[16:22:05] *** Quits: tempest (~ashe@2607:5501:3000:1d3f::2) (*.net *.split)
[16:22:05] *** Quits: fkm (~fkm@user/fkm) (*.net *.split)
[16:22:05] *** Quits: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net) (*.net *.split)
[16:22:05] *** Quits: kraucrow (~polarizin@188.166.72.81) (*.net *.split)
[16:22:05] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[16:22:06] *** Quits: VectorX (~VectorX@user/vectorx) (*.net *.split)
[16:22:06] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[16:22:06] *** Quits: phenom (~primus@user/phenom) (*.net *.split)
[16:22:06] *** Quits: abirkill (snoopy@d172-218-198-90.bchsia.telus.net) (*.net *.split)
[16:22:06] *** Quits: thekingofbandit (thekingofb@user/thekingofbandit) (*.net *.split)
[16:22:06] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (*.net *.split)
[16:22:06] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[16:22:06] *** Quits: LIERO (~no@user/liero) (*.net *.split)
[16:22:06] *** Quits: azizLIGHT (~azizLIGHT@user/azizlight) (*.net *.split)
[16:22:06] *** Quits: justache (~justache@user/justache) (*.net *.split)
[16:22:06] *** Quits: CuriousErnestBro (~CuriousEr@user/curiousernestbro) (*.net *.split)
[16:22:06] *** Quits: Kol (~Kol@d75-157-122-186.bchsia.telus.net) (*.net *.split)
[16:22:06] *** Quits: jacekowski (jacekowski@jacekowski.org) (*.net *.split)
[16:22:06] *** Quits: ljharb (sid43720@user/ljharb) (*.net *.split)
[16:22:06] *** Quits: hsiktas (sid224847@id-224847.tooting.irccloud.com) (*.net *.split)
[16:22:06] *** Quits: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9) (*.net *.split)
[16:22:06] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[16:22:06] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[16:22:06] *** Quits: mstruebing (~maex@2001:41d0:8:93c7::1) (*.net *.split)
[16:22:06] *** Quits: funabash1 (funabashi@185.52.0.236) (*.net *.split)
[16:22:06] *** Quits: percY- (~percY@138.68.239.19) (*.net *.split)
[16:22:06] *** Quits: robyndrake (~robyndrak@user/robyndrake) (*.net *.split)
[16:22:06] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (*.net *.split)
[16:22:06] *** Quits: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr) (*.net *.split)
[16:22:06] *** Quits: Koopz (~Koopz@koopz.rocks) (*.net *.split)
[16:22:06] *** Quits: Selicre (~x@hello.i.am.selic.re) (*.net *.split)
[16:22:06] *** Quits: Crash1hd (~Crash1hd@25.78.247.35.bc.googleusercontent.com) (*.net *.split)
[16:22:06] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (*.net *.split)
[16:22:06] *** Quits: acidsys (~LSD@2.lsd.systems) (*.net *.split)
[16:22:06] *** Quits: Cork (~Cork@user/cork) (*.net *.split)
[16:22:06] *** Quits: Enissay (~Enissay@user/enissay) (*.net *.split)
[16:22:07] *** Quits: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com) (*.net *.split)
[16:22:07] *** Quits: ario (~ario@159.65.220.102) (*.net *.split)
[16:22:07] *** Quits: calcmandan (~quassel@user/calcmandan) (*.net *.split)
[16:22:07] *** Quits: a1paca_ (~a1paca@user/a1paca) (*.net *.split)
[16:22:07] *** Quits: daniel-k (~daniel-k@192.241.135.211) (*.net *.split)
[16:22:07] *** Quits: bobdobbs` (~user@150.107.174.237) (*.net *.split)
[16:22:07] *** Quits: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4) (*.net *.split)
[16:22:07] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[16:22:07] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[16:22:07] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (*.net *.split)
[16:22:07] *** Quits: glider_ (~glider@user/glider) (*.net *.split)
[16:22:07] *** Quits: noarb- (~noarb@user/noarb) (*.net *.split)
[16:22:07] *** Quits: nepeat_ (~nepeat@79.110.170.62) (*.net *.split)
[16:22:07] *** Quits: cnsunyour (~sunyour@129.226.182.99) (*.net *.split)
[16:22:07] *** Quits: SoF (~skius@user/skius) (*.net *.split)
[16:22:07] *** Quits: px (~px@user/px) (*.net *.split)
[16:22:07] *** Quits: slaughter (~slaughter@europa.whatbox.ca) (*.net *.split)
[16:22:07] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (*.net *.split)
[16:22:07] *** Quits: penthief (~penthief@user/penthief) (*.net *.split)
[16:22:07] *** Quits: gkatsev (~gkatsev@spacecompute.com) (*.net *.split)
[16:22:07] *** Quits: pizdets_ (~pizdets@183.182.111.62) (*.net *.split)
[16:22:07] *** Quits: Tempesta (~Tempesta@user/tempesta) (*.net *.split)
[16:22:07] *** Quits: Guest716 (~Guest7@188.232.182.132) (*.net *.split)
[16:22:07] *** Quits: g2anj_ (~v@58.227.244.56) (*.net *.split)
[16:22:07] *** Quits: rg (~rg@user/rg) (*.net *.split)
[16:22:07] *** Quits: Black (~Benett@2a03:4000:1a:7aa::2) (*.net *.split)
[16:22:07] *** Quits: foureyes (foureyes@brought.to.you.by.bnc4free.com) (*.net *.split)
[16:22:07] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (*.net *.split)
[16:22:07] *** Quits: henry40408 (~henry4040@112.105.246.24) (*.net *.split)
[16:22:07] *** Quits: bailon (~gizzard@saturn.whatbox.ca) (*.net *.split)
[16:22:07] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (*.net *.split)
[16:22:07] *** Quits: davlefou (~davlefou@5.183.213.42) (*.net *.split)
[16:22:07] *** Quits: francis (francis@user/francis) (*.net *.split)
[16:22:07] *** Quits: forn (nemes@tilde.team) (*.net *.split)
[16:22:07] *** Quits: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com) (*.net *.split)
[16:22:07] *** Quits: zoite (~zoite@user/zoite) (*.net *.split)
[16:22:07] *** Quits: bigode (bigode@2600:3c01::f03c:91ff:fee5:c75e) (*.net *.split)
[16:22:07] *** Quits: asd (~noname@user/asd) (*.net *.split)
[16:22:07] *** Quits: DPA (~DPA@75-128-16-94.static.cable.fcom.ch) (*.net *.split)
[16:22:08] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[16:22:08] *** Quits: hendursa1 (~weechat@user/hendursaga) (*.net *.split)
[16:22:08] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[16:22:08] *** Quits: mickey8 (~user@user/mickey) (*.net *.split)
[16:22:08] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (*.net *.split)
[16:22:08] *** Quits: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation) (*.net *.split)
[16:22:08] *** Quits: w0ng (~w0ng@185.218.127.38) (*.net *.split)
[16:22:08] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: jakesyl (sid56879@id-56879.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (*.net *.split)
[16:22:08] *** Quits: notchris (sid181145@id-181145.stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: merpnderp (sid16744@stonehaven.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: Trieste_ (T@user/pilgrim) (*.net *.split)
[16:22:08] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (*.net *.split)
[16:22:08] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[16:22:08] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:d869:df28:2173:ba54) (*.net *.split)
[16:22:08] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (*.net *.split)
[16:22:08] *** Quits: baroobob (~jwbwater@98.215.243.94) (*.net *.split)
[16:22:08] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[16:22:08] *** Quits: vbgunz (~vbgunz@35.141.71.47) (*.net *.split)
[16:22:08] *** Quits: mdel (~mdel@user/mdel) (*.net *.split)
[16:22:08] *** Quits: relipse (sid16131@tinside.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: avu (~jan@user/avu) (*.net *.split)
[16:22:08] *** Quits: sagax (~sagax@213.138.71.146) (*.net *.split)
[16:22:08] *** Quits: Pilum (~JKM@user/pilum) (*.net *.split)
[16:22:08] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (*.net *.split)
[16:22:08] *** Quits: _nderscore (~nderscore@silentf.art) (*.net *.split)
[16:22:08] *** Quits: Zauberfisch (~Zauberfis@cm83-180.liwest.at) (*.net *.split)
[16:22:08] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (*.net *.split)
[16:22:08] *** Quits: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com) (*.net *.split)
[16:22:08] *** Quits: shades (shades@milliways.ramdrive.org) (*.net *.split)
[16:22:08] *** Quits: pizza (~pizzaiolo@user/pizzaiolo) (*.net *.split)
[16:22:08] *** Quits: em (~em@li247-180.members.linode.com) (*.net *.split)
[16:22:08] *** Quits: Seich (~seich@ns513649.ip-198-27-67.net) (*.net *.split)
[16:22:08] *** Quits: lf94 (~lf94@2604:a880:cad:d0::cd6:8001) (*.net *.split)
[16:22:08] *** Quits: Ownix (sid11917@id-11917.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: naeluh (sid95128@id-95128.tooting.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: DarkSeid (sid394293@id-394293.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: ross (sid305269@user/ross) (*.net *.split)
[16:22:08] *** Quits: systemfault (sid267009@id-267009.highgate.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: hughrawlinson_ (sid11243@id-11243.charlton.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: NiKaN (sid385034@id-385034.brockwell.irccloud.com) (*.net *.split)
[16:22:08] *** Quits: robertparkerx (~robertpar@user/robertparkerx) (*.net *.split)
[16:22:08] *** Quits: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505) (*.net *.split)
[16:22:08] *** Quits: bitblt (~root@2001:19f0:b001:c5b:5400:3ff:fe62:8f) (*.net *.split)
[16:22:08] *** Quits: thykka (~thykka@2a01:4f8:c0c:e335::1) (*.net *.split)
[16:22:08] *** Quits: joepie91 (~joepie91p@user/joepie91) (*.net *.split)
[16:22:08] *** Quits: AciD` (~fu@user/acid/x-5205451) (*.net *.split)
[16:22:08] *** Quits: SrPx (sid108780@id-108780.highgate.irccloud.com) (*.net *.split)
[16:23:02] *** Quits: marienz_ (~marienz@libera/staff/marienz) (Ping timeout: 630 seconds)
[16:26:53] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[16:27:43] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi)
[16:27:43] *** Joins: Exa (exa@irc.moe)
[16:27:43] *** Joins: DPA (~DPA@75-128-16-94.static.cable.fcom.ch)
[16:27:43] *** Joins: asd (~noname@user/asd)
[16:27:43] *** Joins: bigode (bigode@2600:3c01::f03c:91ff:fee5:c75e)
[16:27:43] *** Joins: forn (nemes@tilde.team)
[16:27:43] *** Joins: zoite (~zoite@user/zoite)
[16:27:43] *** Joins: davlefou (~davlefou@5.183.213.42)
[16:27:43] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[16:27:43] *** Joins: henry40408 (~henry4040@112.105.246.24)
[16:27:43] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[16:27:43] *** Joins: foureyes (foureyes@brought.to.you.by.bnc4free.com)
[16:27:43] *** Joins: Black (~Benett@2a03:4000:1a:7aa::2)
[16:27:43] *** Joins: rg (~rg@user/rg)
[16:27:43] *** Joins: g2anj_ (~v@58.227.244.56)
[16:27:43] *** Joins: s1b1 (~s1b1@user/s1b1)
[16:27:43] *** Joins: shan (shan@user/shan)
[16:27:43] *** Joins: dfg (dfg@user/dfg)
[16:27:43] *** Joins: Ducki (~ducki@user/ducki)
[16:27:43] *** Joins: jsatk (sid304796@id-304796.brockwell.irccloud.com)
[16:27:43] *** Joins: tkob (tkob@user/thekingofbandit)
[16:27:43] *** Joins: keypusher (keypusher@user/keypusher)
[16:27:43] *** Joins: cis (cis@user/cis)
[16:27:43] *** Joins: morgabra (sid500580@user/morgabra)
[16:27:43] *** Joins: themaxdavitt (sid433050@user/themaxdavitt)
[16:27:43] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[16:27:43] *** Joins: jess (~jess@libera/staff/jess)
[16:27:43] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[16:27:43] *** Joins: simius_ (~simius@user/simius)
[16:27:43] *** Joins: bestdesign (~bestdesig@order.a.whore.website)
[16:27:43] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[16:27:43] *** Joins: phryk (~totallyno@user/phryk)
[16:27:43] *** Joins: tungki (~tngk@subs31-116-206-15-25.three.co.id)
[16:27:43] *** Joins: gendl (sid100083@id-100083.stonehaven.irccloud.com)
[16:27:43] *** Joins: terrorjack (~terrorjac@ec2-54-95-39-30.ap-northeast-1.compute.amazonaws.com)
[16:27:43] *** Joins: Axy (~Axy@user/axy)
[16:27:43] *** Joins: ryzokuken_ (~ryzokuken@fanzine2.igalia.com)
[16:27:43] *** Joins: kinabalu- (~kinabalu@198.23.166.98)
[16:27:43] *** Joins: doji (~doji@user/doji)
[16:27:43] *** Joins: fikran (~fikran@user/fikran)
[16:27:43] *** Joins: ninjabanjo_ (~ninjabanj@107.150.45.163)
[16:27:43] *** Joins: hassoon_ (hassoon@grape.ircnow.org)
[16:27:43] *** Joins: francis (francis@user/francis)
[16:27:43] *** Joins: electr0n_ (~electr0n@about/security/founder/electr0n)
[16:27:43] *** Joins: qwedfg_ (~qwedfg@user/qwedfg)
[16:27:43] *** Joins: Woet_ (~me@irc.woet.me)
[16:27:43] *** Joins: polyrob (~rob@user/polyrob)
[16:27:43] *** Joins: JoelJoel (~jjshoe@user/joel)
[16:27:43] *** Joins: fuzzfox (~gizzard@saturn.whatbox.ca)
[16:27:43] *** Joins: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com)
[16:27:43] *** Joins: Albright (~Albright@2001:19f0:8001:ca4:9847:743f:9437:3cfd)
[16:27:43] *** Joins: AlbertLast_ (~nix@0exclusive.de)
[16:27:43] *** Joins: pupskuchen (~pupskuche@user/pupskuchen)
[16:27:43] *** Joins: wyre (~wyre@user/wyre)
[16:27:43] *** Joins: DrowningElysium (sid190788@user/drowningelysium)
[16:27:43] *** Joins: lebster (sid17131@id-17131.stonehaven.irccloud.com)
[16:27:43] *** Joins: seed0_ (~seed0@li1647-214.members.linode.com)
[16:27:43] *** Joins: mrdata (~mrdata@user/mrdata)
[16:27:43] *** Joins: stiv3n (~stiv3n@172.98.87.203)
[16:27:43] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[16:27:43] *** Joins: wwwi (~User@128-201-104.netrun.cytanet.com.cy)
[16:27:43] *** Joins: pulse (~pulse@user/pulse)
[16:27:43] *** Joins: summersault (~summersau@179.221.251.16)
[16:27:43] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[16:27:43] *** Joins: shailangsa (~shailangs@host86-185-58-139.range86-185.btcentralplus.com)
[16:27:43] *** Joins: Guest716 (~Guest7@188.232.182.132)
[16:27:43] *** Joins: jmft2 (~JMFT@82.3.54.26)
[16:27:43] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[16:27:43] *** Joins: thiras (~thiras@user/thiras)
[16:27:43] *** Joins: Naan (~Naan@user/naan)
[16:27:43] *** Joins: comatory_ (~ondrejsyn@217.11.241.69)
[16:27:43] *** Joins: funabash1 (funabashi@185.52.0.236)
[16:27:43] *** Joins: enoq (~enoq@194-208-179-35.lampert.tv)
[16:27:43] *** Joins: Nitrousoxide (~msdos@user/nitrousoxide)
[16:27:43] *** Joins: gehn (~gehn@user/gehn)
[16:27:43] *** Joins: momus (~momus@ec2-18-195-22-48.eu-central-1.compute.amazonaws.com)
[16:27:43] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[16:27:43] *** Joins: hendursa1 (~weechat@user/hendursaga)
[16:27:43] *** Joins: Lyn (~Lyn@user/law)
[16:27:43] *** Joins: duch_kazatel (~robert0@c-76-114-62-229.hsd1.ca.comcast.net)
[16:27:43] *** Joins: victor (sid208353@user/victor)
[16:27:43] *** Joins: kraih (sid17075@mojo/destroy-all-humans/kraih)
[16:27:43] *** Joins: owlbynight (sid501016@id-501016.tinside.irccloud.com)
[16:27:43] *** Joins: Lewix (sid158496@id-158496.tinside.irccloud.com)
[16:27:43] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[16:27:43] *** Joins: mickey8 (~user@user/mickey)
[16:27:43] *** Joins: vysn (~vysn@user/vysn)
[16:27:43] *** Joins: gggp (~gggp@123.113.182.84)
[16:27:43] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[16:27:43] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[16:27:43] *** Joins: mkbloke (~mkbloke@vps.cammo.me.uk)
[16:27:43] *** Joins: earendel (uid498179@user/earendel)
[16:27:43] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[16:27:43] *** Joins: jimbzy (~jb@user/jimbzy)
[16:27:43] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[16:27:43] *** Joins: Akimb (~Akimb@82-135-197-171.static.zebra.lt)
[16:27:43] *** Joins: D4mned (~Dmnd@212.101.253.244)
[16:27:43] *** Joins: silly_ (~silly@user/silly)
[16:27:43] *** Joins: IceMichael (~IceMichae@x527162ea.dyn.telefonica.de)
[16:27:43] *** Joins: LtHummus (~lthummus@97-126-113-251.tukw.qwest.net)
[16:27:43] *** Joins: beencubed (~beencubed@209.131.238.248)
[16:27:43] *** Joins: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com)
[16:27:43] *** Joins: PikaChokeMe (~PikaChoke@c-24-11-1-200.hsd1.ut.comcast.net)
[16:27:43] *** Joins: ircuser-1 (~Johnny@71.63.241.168)
[16:27:43] *** Joins: Haxxa (~Haxxa@122-199-44-36.ip4.superloop.com)
[16:27:43] *** Joins: krishna (~krishna@76.14.21.109)
[16:27:43] *** Joins: michaelis (~michaelis@193.183.209.17)
[16:27:43] *** Joins: JackFin (~ircuser@S01069050ca4e3573.cg.shawcable.net)
[16:27:43] *** Joins: kmh_ (~kmh@p200300df5f0d0200dc05e9b97966e73c.dip0.t-ipconnect.de)
[16:27:43] *** Joins: unixcat64 (thelounge@envs.net)
[16:27:43] *** Joins: BUSY (~BUSY@user/busy)
[16:27:43] *** Joins: Jonno_FTW (~come@api.carswap.me)
[16:27:43] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[16:27:43] *** Joins: t3nj1n_ (~t3nj1n@pool-96-246-146-100.nycmny.fios.verizon.net)
[16:27:43] *** Joins: irrgit_ (~irrgit@192.241.175.183)
[16:27:43] *** Joins: Popzi_ (~Popzi@95.150.161.138)
[16:27:43] *** Joins: pizdets_ (~pizdets@183.182.111.62)
[16:27:43] *** Joins: NoiseEee (~NoiseEee@178.128.153.219)
[16:27:43] *** Joins: gde35|2 (~kvirc@84-106-154-98.cable.dynamic.v4.ziggo.nl)
[16:27:43] *** Joins: peterhil_ (~peterhil@dsl-hkibng32-54fb52-57.dhcp.inet.fi)
[16:27:43] *** Joins: Jaran|zZZzZZZzz (~mail@user/jaran)
[16:27:43] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[16:27:43] *** Joins: edk (edk@libera/staff/edk)
[16:27:43] *** Joins: kadobanana (~mud@user/kadoban)
[16:27:43] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:27:43] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[16:27:43] *** Joins: Crash1hd (~Crash1hd@25.78.247.35.bc.googleusercontent.com)
[16:27:43] *** Joins: skillbot (~skillbot@user/skillbot)
[16:27:43] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[16:27:43] *** Joins: mven (~mven@072-179-001-159.res.spectrum.com)
[16:27:43] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[16:27:43] *** Joins: dka (~code-is-a@ns3059207.ip-193-70-33.eu)
[16:27:43] *** Joins: cryocaustik (~cryocaust@user/cryocaustik)
[16:27:43] *** Joins: beeza (sid53872@id-53872.tinside.irccloud.com)
[16:27:43] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[16:27:43] *** Joins: cythrawll (sid384410@id-384410.charlton.irccloud.com)
[16:27:43] *** Joins: Neuromancer (~Neuromanc@user/neuromancer)
[16:27:43] *** Joins: celphi (uid97751@user/celphi)
[16:27:43] *** iridium.libera.chat sets mode: +v skillbot
[16:27:43] *** Joins: gambl0re (~gambl0re@24.140.237.124)
[16:27:43] *** Joins: acidsys (~LSD@2.lsd.systems)
[16:27:43] *** Joins: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at)
[16:27:43] *** Joins: Cork (~Cork@user/cork)
[16:27:43] *** Joins: mei (~mei@user/mei)
[16:27:43] *** Joins: APic (apic@apic.name)
[16:27:43] *** Joins: Enissay (~Enissay@user/enissay)
[16:27:43] *** Joins: wolfshappen (~waff@irc.furworks.de)
[16:27:43] *** Joins: LIERO (~no@user/liero)
[16:27:43] *** Joins: coc0nut (~coc0nut@user/coc0nut)
[16:27:43] *** Joins: YoungFrog (~youngfrog@39.129-180-91.adsl-dyn.isp.belgacom.be)
[16:27:43] *** Joins: iomari891 (~iomari891@105.112.138.38)
[16:27:43] *** Joins: Alvin_ (~Alvin@122.162.213.4)
[16:27:43] *** Joins: loke[m] (~loke@2001:470:69fc:105::237)
[16:27:43] *** Joins: repo[m] (~repo@user/repo)
[16:27:43] *** Joins: niko (~niko@libera/staff/niko)
[16:27:43] *** Joins: klys (~mdasoh@show.op8.us)
[16:27:43] *** Joins: webstrand (~webstrand@user/webstrand)
[16:27:43] *** Joins: DCTWD (~dc@uz.utmappro.com)
[16:27:43] *** Joins: nedbat (~nedbat@python/psf/nedbat)
[16:27:43] *** Joins: Pixi (~Pixi@user/pixi)
[16:27:43] *** Joins: ozymandias (~ozymandia@libre.theyareafter.us)
[16:27:43] *** Joins: Daniel15 (~daniel@d.sb)
[16:27:43] *** Joins: \mSg (~mSg@user/msg/x-0285936)
[16:27:43] *** Joins: VectorX (~VectorX@user/vectorx)
[16:27:43] *** Joins: Unfixed (~Jake@64.31.33.140)
[16:27:43] *** Joins: byte4byte_ (~byte4byte@c-73-219-127-47.hsd1.ma.comcast.net)
[16:27:43] *** Joins: PigDude_ (~PigDude@159.203.16.199)
[16:27:43] *** Joins: bradp (~bradp@cpe-70-92-7-182.wi.res.rr.com)
[16:27:43] *** Joins: theglass (~glass@user/theglass)
[16:27:43] *** Joins: edr (~edr@user/edr)
[16:27:43] *** Joins: flying_sausages_ (~flying_sa@83.149.106.219)
[16:27:43] *** Joins: Sherpard2_ (~VPard@user/sherpard2)
[16:27:43] *** Joins: spike_spiegel5 (~spike_spi@static.200.4.251.148.clients.your-server.de)
[16:27:43] *** Joins: Spydar007 (~spydar007@user/spydar007)
[16:27:43] *** Joins: fkrauthan (~fkrauthan@user/fkrauthan)
[16:27:43] *** Joins: phenom (~primus@user/phenom)
[16:27:43] *** Joins: abirkill (snoopy@d172-218-198-90.bchsia.telus.net)
[16:27:43] *** Joins: Alexendoo (~Alexendoo@macleod.io)
[16:27:43] *** Joins: thekingofbandit (thekingofb@user/thekingofbandit)
[16:27:43] *** Joins: zopsi (~zopsi@irc.dir.ac)
[16:27:43] *** Joins: DK3 (~DK3@rs000042.fastrootserver.de)
[16:27:43] *** Joins: jellobot (~jellobot@104.248.16.142)
[16:27:43] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[16:27:43] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[16:27:43] *** Joins: FightingFalcon (~none@user/fightingfalcon)
[16:27:43] *** iridium.libera.chat sets mode: +v jellobot
[16:27:43] *** Joins: tabakhase (tabakhase@user/tabakhase)
[16:27:43] *** Joins: doc (~doc@user/doc)
[16:27:43] *** Joins: deadbeat (~quassel@user/deadbeat)
[16:27:43] *** Joins: Isthmusi (~Isthmus@user/isveni)
[16:27:43] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[16:27:43] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[16:27:43] *** Joins: Bombo (atom@user/bombo)
[16:27:43] *** Joins: JohnComputation2 (~JohnCompu@gateway/tor-sasl/johncomputation)
[16:27:43] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[16:27:43] *** Joins: jakesyl (sid56879@id-56879.stonehaven.irccloud.com)
[16:27:43] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[16:27:43] *** Joins: notchris (sid181145@id-181145.stonehaven.irccloud.com)
[16:27:43] *** Joins: merpnderp (sid16744@stonehaven.irccloud.com)
[16:27:43] *** Joins: Trieste_ (T@user/pilgrim)
[16:27:43] *** Joins: nomn (nomn@user/nomn)
[16:27:43] *** Joins: jwpapi (sid502614@id-502614.highgate.irccloud.com)
[16:27:43] *** Joins: snek (sid280155@id-280155.tooting.irccloud.com)
[16:27:43] *** Joins: dskull (~dskull@user/dskull)
[16:27:43] *** Joins: stigz (sid371747@id-371747.tinside.irccloud.com)
[16:27:43] *** Joins: luny (~luny@52.178.89.202)
[16:27:43] *** Joins: rickbutton (sid410078@id-410078.brockwell.irccloud.com)
[16:27:43] *** Joins: Nnavd (~Nnavd@ec2-34-220-224-214.us-west-2.compute.amazonaws.com)
[16:27:43] *** Joins: xsznix (~xsznix@104-14-31-126.lightspeed.austtx.sbcglobal.net)
[16:27:43] *** Joins: JohnDoe2 (~johndoe2@2001:470:1f07:89::dead:bead)
[16:27:43] *** Joins: paule32 (~paule32@user/paule32)
[16:27:43] *** Joins: azizLIGHT (~azizLIGHT@user/azizlight)
[16:27:43] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[16:27:43] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:27:43] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[16:27:43] *** Joins: relipse (sid16131@tinside.irccloud.com)
[16:27:43] *** Joins: c4017 (~c4017@2604:3d08:747f:7c90:d869:df28:2173:ba54)
[16:27:43] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[16:27:43] *** Joins: baroobob (~jwbwater@98.215.243.94)
[16:27:43] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[16:27:43] *** Joins: Jigsy (~Jigsy@user/jigsy)
[16:27:43] *** Joins: TheSilentLink (~TheSilent@user/thesilentlink)
[16:27:43] *** Joins: acid (~acid@user/acid)
[16:27:43] *** Joins: yosafbridge (~yosafbrid@static.38.6.217.95.clients.your-server.de)
[16:27:43] *** Joins: Iolo (~iolo@dsl-tkubng22-58c02b-220.dhcp.inet.fi)
[16:27:43] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[16:27:43] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[16:27:43] *** Joins: eqw (~eqw@31.134.178.99)
[16:27:43] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[16:27:43] *** Joins: jaawerth (~jaawerth@104.131.115.202)
[16:27:43] *** Joins: evulish (~evulish@cpe-72-231-26-248.nyc.res.rr.com)
[16:27:43] *** Joins: ario (~ario@159.65.220.102)
[16:27:43] *** Joins: luiserebii (~luiserebi@li1568-23.members.linode.com)
[16:27:43] *** Joins: calcmandan (~quassel@user/calcmandan)
[16:27:43] *** Joins: b-rex (~b@v.dropswitch.net)
[16:27:43] *** Joins: a1paca_ (~a1paca@user/a1paca)
[16:27:43] *** Joins: bin4ry (~bin4ry@128.199.135.148)
[16:27:43] *** Joins: gry (~quassel@botters/gry)
[16:27:43] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[16:27:43] *** Joins: vbgunz (~vbgunz@35.141.71.47)
[16:27:43] *** Joins: daniel-k (~daniel-k@192.241.135.211)
[16:27:43] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[16:27:43] *** Joins: lilmonkey` (~lilmonkey@user/lilmonkey)
[16:27:43] *** Joins: Tabmow (~tabmow@user/tabmow)
[16:27:43] *** Joins: bobdobbs` (~user@150.107.174.237)
[16:27:43] *** Joins: tccki (~tccki@2406:e001:2:5a60:250:56ff:fe9e:8795)
[16:27:43] *** Joins: mdel (~mdel@user/mdel)
[16:27:43] *** Joins: mattf (mattf@2600:3c03::f03c:92ff:fea6:56a4)
[16:27:43] *** Joins: mcint (mcint@user/mcint)
[16:27:43] *** Joins: flameboi (dgw@user/flameboi)
[16:27:43] *** Joins: xisop (~xisop@bnull.net)
[16:27:43] *** Joins: deltab (~deltab@user/deltab)
[16:27:43] *** Joins: optimant (quasselcor@user/optimant)
[16:27:43] *** Joins: Tempesta (~Tempesta@user/tempesta)
[16:27:43] *** Joins: cinderblock (~cinderblo@firefly.isozilla.com)
[16:27:43] *** Joins: hardtotell (~hardtotel@satyr.seedboxes.cc)
[16:27:43] *** Joins: chovy (~chovy@75-55-138-167.lightspeed.mtryca.sbcglobal.net)
[16:27:43] *** Joins: p_stampy (~p_stampy@user/p-stampy/x-2915953)
[16:27:43] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[16:27:43] *** Joins: monoxane (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:27:43] *** Joins: haniaF_ (~haniaF@79.191.119.137.ipv4.supernova.orange.pl)
[16:27:43] *** Joins: ThePendulum (~znc@2a03:b0c0:0:1010::1a8:1)
[16:27:43] *** Joins: w0ng (~w0ng@185.218.127.38)
[16:27:43] *** Joins: [R] (~rs@genoce.org)
[16:27:43] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[16:27:43] *** Joins: ldlework (~hexeme@user/hexeme)
[16:27:43] *** Joins: Linkandzelda (~Linkandze@cloudirc.laz.li)
[16:27:43] *** Joins: diverdude (~user@176-21-102-230-cable.dk.customer.tdc.net)
[16:27:43] *** Joins: Stx (stx@libera/staff/stx)
[16:27:43] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[16:27:43] *** Joins: hax (~hax@user/hax)
[16:27:43] *** Joins: dante443 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[16:27:43] *** Joins: Ownix (sid11917@id-11917.brockwell.irccloud.com)
[16:27:43] *** Joins: avu (~jan@user/avu)
[16:27:43] *** Joins: birkoff (birkoff@user/birkoff)
[16:27:43] *** Joins: saikub (saikub@saikub.thunderirc.net)
[16:27:43] *** Joins: robyndrake (~robyndrak@user/robyndrake)
[16:27:43] *** Joins: justache (~justache@user/justache)
[16:27:43] *** Joins: sagax (~sagax@213.138.71.146)
[16:27:43] *** Joins: Pilum (~JKM@user/pilum)
[16:27:43] *** Joins: CuriousErnestBro (~CuriousEr@user/curiousernestbro)
[16:27:43] *** Joins: glider_ (~glider@user/glider)
[16:27:43] *** Joins: noarb- (~noarb@user/noarb)
[16:27:43] *** Joins: nepeat_ (~nepeat@79.110.170.62)
[16:27:43] *** Joins: cnsunyour (~sunyour@129.226.182.99)
[16:27:43] *** Joins: blez (~blez@213.91.182.96)
[16:27:43] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:27:43] *** Joins: _var (~kdy@kiana.kdy.ch)
[16:27:43] *** Joins: Kol (~Kol@d75-157-122-186.bchsia.telus.net)
[16:27:43] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[16:27:43] *** Joins: Kays (Kays@user/kays)
[16:27:43] *** Joins: SoF (~skius@user/skius)
[16:27:43] *** Joins: beowulf (sid116@id-116.tooting.irccloud.com)
[16:27:43] *** Joins: _nderscore (~nderscore@silentf.art)
[16:27:43] *** Joins: Zauberfisch (~Zauberfis@cm83-180.liwest.at)
[16:27:43] *** Joins: px (~px@user/px)
[16:27:43] *** Joins: codingcampbell (~codingcam@user/codingcampbell)
[16:27:43] *** Joins: Slade (~user@user/slade)
[16:27:43] *** Joins: Fozzworth_ (~Fozzworth@user/fozzworth)
[16:27:43] *** Joins: Flonk (~Flonk@ec2-52-40-29-25.us-west-2.compute.amazonaws.com)
[16:27:43] *** Joins: koolazer (~koo@user/koolazer)
[16:27:43] *** Joins: Dev0n (~Dev0n@user/dev0n)
[16:27:43] *** Joins: merced (merced@user/merced)
[16:27:43] *** Joins: mikebald (~mikebald@159.203.185.106)
[16:27:43] *** Joins: con3 (~con3@2604:a880:4:1d0::be:d000)
[16:27:43] *** Joins: samsch (~samsch@171.ip-192-99-69.net)
[16:27:43] *** Joins: jacekowski (jacekowski@jacekowski.org)
[16:27:43] *** Joins: ljharb (sid43720@user/ljharb)
[16:27:43] *** Joins: hsiktas (sid224847@id-224847.tooting.irccloud.com)
[16:27:43] *** Joins: austincheney (~austinche@2600:1700:1220:76c8:f982:507a:283b:3df9)
[16:27:43] *** Joins: shades (shades@milliways.ramdrive.org)
[16:27:43] *** Joins: pizza (~pizzaiolo@user/pizzaiolo)
[16:27:43] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[16:27:43] *** Joins: Byteflux (~byte@byteflux.net)
[16:27:43] *** Joins: laris (undead@37.221.209.36)
[16:27:43] *** Joins: slaughter (~slaughter@europa.whatbox.ca)
[16:27:43] *** Joins: NiKaN (sid385034@id-385034.brockwell.irccloud.com)
[16:27:43] *** Joins: ChanServ (ChanServ@services.libera.chat)
[16:27:43] *** Joins: em (~em@li247-180.members.linode.com)
[16:27:43] *** Joins: Seich (~seich@ns513649.ip-198-27-67.net)
[16:27:43] *** Joins: lf94 (~lf94@2604:a880:cad:d0::cd6:8001)
[16:27:43] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[16:27:43] *** Joins: penthief (~penthief@user/penthief)
[16:27:43] *** Joins: AciD` (~fu@user/acid/x-5205451)
[16:27:43] *** iridium.libera.chat sets mode: +o ChanServ
[16:27:43] *** Joins: SrPx (sid108780@id-108780.highgate.irccloud.com)
[16:27:43] *** Joins: ozone (ozone@libera/bot/ozone)
[16:27:43] *** Joins: gkatsev (~gkatsev@spacecompute.com)
[16:27:43] *** Joins: thykka (~thykka@2a01:4f8:c0c:e335::1)
[16:27:43] *** Joins: joepie91 (~joepie91p@user/joepie91)
[16:27:43] *** Joins: bitblt (~root@2001:19f0:b001:c5b:5400:3ff:fe62:8f)
[16:27:43] *** Joins: farn (~farn@2a03:4000:7:3cd:d4ab:85ff:feeb:f505)
[16:27:43] *** Joins: orkim (~orkim@user/orkim)
[16:27:43] *** Joins: kraucrow (~polarizin@188.166.72.81)
[16:27:43] *** Joins: Selicre (~x@hello.i.am.selic.re)
[16:27:43] *** Joins: TheStormsOfFury (~StormsOfF@wsip-207-162-134-107.tu.ok.cox.net)
[16:27:43] *** Joins: Koopz (~Koopz@koopz.rocks)
[16:27:43] *** Joins: olspookishmagus (~pookie@snf-137798.vm.okeanos.grnet.gr)
[16:27:43] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[16:27:43] *** Joins: fkm (~fkm@user/fkm)
[16:27:43] *** Joins: litharge (litharge@libera/bot/litharge)
[16:27:43] *** Joins: tempest (~ashe@2607:5501:3000:1d3f::2)
[16:27:43] *** Joins: percY- (~percY@138.68.239.19)
[16:27:43] *** Joins: mstruebing (~maex@2001:41d0:8:93c7::1)
[16:27:43] *** Joins: ross (sid305269@user/ross)
[16:27:43] *** Joins: systemfault (sid267009@id-267009.highgate.irccloud.com)
[16:27:43] *** Joins: hughrawlinson_ (sid11243@id-11243.charlton.irccloud.com)
[16:27:43] *** Joins: DarkSeid (sid394293@id-394293.brockwell.irccloud.com)
[16:27:43] *** Joins: naeluh (sid95128@id-95128.tooting.irccloud.com)
[16:27:43] *** Joins: robertparkerx (~robertpar@user/robertparkerx)
[16:27:43] *** iridium.libera.chat sets mode: +v ozone
[16:27:50] *** Joins: entuland (~entuland@user/entuland)
[16:27:50] *** Joins: lind{at}yahoo (uid486956@id-486956.tinside.irccloud.com)
[16:27:50] *** Joins: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467)
[16:27:50] *** Joins: wallbroken (wallbroken@user/wallbroken)
[16:27:50] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[16:27:50] *** Joins: bodiccea (~bodiccea@user/bodiccea)
[16:27:50] *** Joins: ringo_ (~ringo@157.230.117.128)
[16:27:50] *** Joins: Drgonz0 (~Drgonz0@107-179-254-222.cpe.teksavvy.com)
[16:27:50] *** Joins: itok (sid418430@id-418430.charlton.irccloud.com)
[16:27:50] *** Joins: ruel (~ruel@falcon.ruhnet.net)
[16:27:50] *** Joins: tofran (~tofran@37.189.158.134)
[16:27:50] *** Joins: MachinShin (sid243317@id-243317.brockwell.irccloud.com)
[16:27:50] *** Joins: graingert (sid128301@id-128301.tinside.irccloud.com)
[16:27:50] *** Joins: Ares000 (~Ares3@37.228.196.119)
[16:27:50] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:2851:91a4:af4c:7957)
[16:27:50] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[16:27:50] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:c578:89c3:1fce:4302)
[16:27:50] *** Joins: welldonehowever (welldoneho@welldonehowever.oddprotocol.org)
[16:27:50] *** Joins: simon816 (~simon816@ec2-35-178-246-72.eu-west-2.compute.amazonaws.com)
[16:27:50] *** Quits: tofran (~tofran@37.189.158.134) (Max SendQ exceeded)
[16:27:50] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Max SendQ exceeded)
[16:27:59] *** Joins: federico_it (~textual@151.95.116.125)
[16:27:59] *** Joins: cisme_ (~cisme_@user/cisme/x-1186982)
[16:27:59] *** Joins: nicoty[m] (~nicoty@user/nicoty)
[16:27:59] *** Joins: Deide (~deide@user/deide)
[16:27:59] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[16:27:59] *** Joins: jonifen (~jonifen@user/jonifen)
[16:27:59] *** Joins: mishiranu (~mishiranu@78.129.171.229)
[16:27:59] *** Joins: ekl (~ekl@user/ekl)
[16:27:59] *** Joins: rogorido (~rogorido@mail.georeligion.org)
[16:27:59] *** Joins: Dorward (~dorward@13.5.169.217.in-addr.arpa)
[16:27:59] *** Joins: Jck_true (~jcktrue@188.228.89.240)
[16:27:59] *** Joins: PanamaCity3003 (~PanamaCit@skylab/user/panamacity3003)
[16:27:59] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[16:27:59] *** Joins: deniska (~denis@user/deniska)
[16:27:59] *** Joins: purphoros (~purphoros@devforge.org)
[16:27:59] *** Joins: Pajus (~Pajus@user/pajus)
[16:27:59] *** Joins: zd (~zd@7.210.184.35.bc.googleusercontent.com)
[16:27:59] *** Joins: Henry151 (~bishop@user/henry151)
[16:27:59] *** Joins: OverCoder (~OverCoder@user/overcoder)
[16:27:59] *** Joins: quesker (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[16:27:59] *** Joins: ashnur (~rak@user/ashnur)
[16:27:59] *** Joins: les (znc@user/les)
[16:27:59] *** Joins: Kirjava (~cake@user/kirjava)
[16:28:02] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[16:28:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[16:28:18] *** Joins: tofran (~tofran@37.189.158.134)
[16:28:20] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[16:28:37] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Remote host closed the connection)
[16:28:40] *** Joins: dlam (~dlam@dlam.me)
[16:28:54] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[16:29:38] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 252 seconds)
[16:29:51] *** Joins: marienz (~marienz@libera/staff/marienz)
[16:31:08] *** Quits: nicoty[m] (~nicoty@user/nicoty) (Ping timeout: 272 seconds)
[16:31:08] *** Quits: Deide (~deide@user/deide) (Ping timeout: 272 seconds)
[16:34:36] *** Joins: D3mned (~Dmnd@212.101.251.242)
[16:34:36] *** Quits: D4mned (~Dmnd@212.101.253.244) (Read error: Connection reset by peer)
[16:37:10] *** Quits: D3mned (~Dmnd@212.101.251.242) (Client Quit)
[16:38:40] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[16:38:54] *** Joins: summersault (~summersau@179.221.251.16)
[16:40:52] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[16:41:06] *** Joins: summersault (~summersau@179.221.251.16)
[16:42:31] *** Joins: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de)
[16:42:45] *** Joins: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[16:50:18] *** Joins: mat001 (~mat001@c-73-223-64-126.hsd1.ca.comcast.net)
[16:51:20] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[16:51:34] *** Joins: summersault (~summersau@179.221.251.16)
[16:56:51] *** Joins: happymeal (~happymeal@user/happymeal)
[16:58:16] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[16:58:31] *** Joins: summersault (~summersau@179.221.251.16)
[17:04:41] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[17:15:45] *** Joins: realies (~realies@user/realies)
[17:16:51] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[17:20:15] *** Quits: wwwi (~User@128-201-104.netrun.cytanet.com.cy) (Quit: Leaving)
[17:33:43] *** Joins: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[17:33:43] *** Quits: YaknotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Changing host)
[17:33:43] *** Joins: YaknotiS (~YaknotiS@user/yaknotis)
[17:34:10] *** Joins: seabass1 (~seabassfo@2001:470:69fc:105::187)
[17:35:43] *** Joins: kahawa (~kahawa@odin.s1acker.com)
[17:38:19] *** Sherpard2_ is now known as Sherpard2
[17:39:37] *** AlbertLast_ is now known as albertlast
[17:41:45] *** Joins: jmcantrell (~jmcantrel@user/jmcantrell)
[17:42:01] *** Joins: paulcarroty (~paulcarro@2001:470:69fc:105::216)
[17:42:40] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:50:20] *** Quits: kahawa (~kahawa@odin.s1acker.com) (Remote host closed the connection)
[17:51:23] *** Joins: WillPittenger (~willpitte@2001:470:69fc:105::1bf)
[17:51:24] *** Joins: kadoban (~kadoban@user/kadoban)
[17:52:33] *** Joins: epolanski (uid312403@id-312403.brockwell.irccloud.com)
[17:53:19] *** Quits: mrdata (~mrdata@user/mrdata) (Read error: Connection reset by peer)
[17:53:50] *** Joins: mrdata (~mrdata@135-23-182-185.cpe.pppoe.ca)
[17:54:12] *** Quits: mrdata (~mrdata@135-23-182-185.cpe.pppoe.ca) (Changing host)
[17:54:12] *** Joins: mrdata (~mrdata@user/mrdata)
[17:57:22] *** Quits: tungki (~tngk@subs31-116-206-15-25.three.co.id) (Read error: Connection reset by peer)
[17:58:13] *** Quits: PikaChokeMe (~PikaChoke@c-24-11-1-200.hsd1.ut.comcast.net) (Quit: Leaving)
[17:59:26] *** Quits: jazzy (~jaziz@2600:380:4545:1bb4:ec20:e391:8f1d:8467) (Ping timeout: 256 seconds)
[17:59:50] *** Quits: gggp (~gggp@123.113.182.84) (Ping timeout: 268 seconds)
[18:00:45] *** Joins: greggerz (~greggerzm@2001:470:69fc:105::da2)
[18:03:07] *** Joins: nicoty[m] (~nicoty@user/nicoty)
[18:05:16] *** Joins: Deide (~deide@user/deide)
[18:05:23] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d)
[18:06:07] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[18:06:18] *** Quits: cinderblock (~cinderblo@firefly.isozilla.com) (Remote host closed the connection)
[18:06:30] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[18:07:45] *** Quits: enoq (~enoq@194-208-179-35.lampert.tv) (Quit: enoq)
[18:09:29] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:10:01] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:10:56] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 268 seconds)
[18:14:51] *** Quits: Akimb (~Akimb@82-135-197-171.static.zebra.lt) (Read error: Connection reset by peer)
[18:22:42] *** Joins: vqueiroz (uid340368@id-340368.stonehaven.irccloud.com)
[18:23:53] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[18:25:23] *** Joins: xsperry (~as@user/xsperry)
[18:26:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[18:27:54] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (Ping timeout: 240 seconds)
[18:28:53] *** Joins: fikran (~fikran@user/fikran)
[18:29:14] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:29:41] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[18:29:54] *** Quits: Nimzowitsch (~nimzo@user/nimzowitsch) (Remote host closed the connection)
[18:34:49] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d) (Quit: Leaving)
[18:38:53] *** Joins: daoudr (~daoudr@178.197.212.193)
[18:40:10] *** Joins: junktext (~junktext@109.201.152.161)
[18:43:00] *** Joins: enoq (~enoq@194-208-179-35.lampert.tv)
[18:49:00] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[18:49:03] *** Parts: siyb1 (~siyb@h081217185055.dyn.cm.kabsi.at) ()
[18:49:26] *** Joins: siyb (~siyb@h081217185055.dyn.cm.kabsi.at)
[18:50:23] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:50:53] *** Joins: realies- (~realies@178-169-218-119.haskovo.ddns.bulsat.com)
[18:50:54] *** Quits: realies (~realies@user/realies) (Read error: Connection reset by peer)
[18:53:07] *** Joins: s1b1 (~s1b1@user/s1b1)
[18:54:41] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[18:56:43] *** Quits: hassoon_ (hassoon@grape.ircnow.org) (Changing host)
[18:56:43] *** Joins: hassoon_ (hassoon@user/hassoon)
[18:57:34] *** Joins: Crassus (~Crassus@user/crassus)
[19:01:08] *** Joins: zebrag (~chris@user/zebrag)
[19:02:26] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df05f-197.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:04:51] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[19:05:12] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 268 seconds)
[19:05:50] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:08:47] *** Joins: Camilo (~hugh@host-92-20-143-244.as13285.net)
[19:10:33] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[19:12:33] *** Parts: kinabalu- (~kinabalu@198.23.166.98) ()
[19:12:55] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[19:16:09] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 258 seconds)
[19:18:07] *** Joins: iffraff (~quassel@136.49.178.170)
[19:20:18] *** Joins: PikaChokeMe (~PikaChoke@c-24-11-1-200.hsd1.ut.comcast.net)
[19:20:22] *** Joins: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi)
[19:21:19] *** Quits: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi) (Remote host closed the connection)
[19:21:45] *** Joins: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi)
[19:22:27] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[19:23:09] *** JoelJoel is now known as JOel
[19:23:12] *** JOel is now known as Joel
[19:23:22] *** Joins: Guest42 (~Guest42@p200300c8cf227600386324dfb0f6e21b.dip0.t-ipconnect.de)
[19:26:26] <PikaChokeMe> I told someone about my cartesian product problem the other day... and they were telling me I didn't have to build all the sets, that I could build any particular set I wanted based on some clever math
[19:26:34] <PikaChokeMe> who was that person? Where was that math
[19:26:53] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[19:32:23] *** Quits: Guest42 (~Guest42@p200300c8cf227600386324dfb0f6e21b.dip0.t-ipconnect.de) (Quit: Client closed)
[19:34:00] *** Joins: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl)
[19:36:11] <PikaChokeMe> it was sheetjs
[19:36:28] *** Quits: gambl0re (~gambl0re@24.140.237.124) (Ping timeout: 258 seconds)
[19:38:42] *** Quits: Crash1hd (~Crash1hd@25.78.247.35.bc.googleusercontent.com) (Ping timeout: 268 seconds)
[19:39:02] *** Joins: Crash1hd (~Crash1hd@S0106a84e3f475583.cg.shawcable.net)
[19:40:24] *** Joins: LiftLeft (~LiftLeft@154.21.114.33)
[19:42:18] *** Quits: Crash1hd (~Crash1hd@S0106a84e3f475583.cg.shawcable.net) (Read error: Connection reset by peer)
[19:43:08] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:51:05] *** Quits: stiv3n (~stiv3n@172.98.87.203) (Ping timeout: 248 seconds)
[19:53:06] *** Joins: stiv3n (~stiv3n@2601:647:8101:e370:e119:9975:3ec3:d975)
[19:53:39] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[19:57:08] *** Joins: roadt (~roadt@114.97.241.40)
[19:59:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:00:42] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[20:02:02] *** Joins: Akimb (~Akimb@86.100.13.100)
[20:04:38] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[20:07:15] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:257d:20:516b:5d31)
[20:10:30] <deadbeat> PikaChokeMe: on here? you were talking to theskillwithin, ljharb and earendel
[20:13:18] *** Joins: l__q (~modinfo@user/modinfo)
[20:14:28] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[20:19:20] <l__q> Is it a better way to save chat messages as state? Now if users write a lot o messages, then it takes longer and longer to process it, eg, add a vote needs to filter all messages
[20:21:08] <l__q> mayby without saving to state, only push to DOM? But how then access this message and update eg. Vote?
[20:21:11] *** hassoon_ is now known as hassoon
[20:21:47] *** Parts: hassoon (hassoon@user/hassoon) ()
[20:21:50] *** Joins: hassoon (hassoon@user/hassoon)
[20:22:09] <PikaChokeMe> what does the const getCombination = (n, arrays, divisors) part of const getCombination = (n, arrays, divisors) => arrays.reduce((acc, arr, i) => { mean?
[20:22:56] <PikaChokeMe> is that like... function parameters?
[20:23:16] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[20:23:18] <Alexendoo> Yeah, it's an arrow function
[20:24:55] *** Joins: howdoi (uid224@id-224.tooting.irccloud.com)
[20:25:44] <PikaChokeMe> https://stackoverflow.com/a/66889540/1625274 I guess I'm just confused why he puts a function inside of a function that already exists
[20:25:48] <l__q> I love arrow functions since this year Im only use arr func
[20:26:41] <PikaChokeMe> I'm trying to copy this into typescript so it confuses me
[20:27:06] *** Joins: Liblx (~Alex@2a02:810c:280:59c:7471:c11:7e53:10ff)
[20:27:47] *** Quits: Liblx (~Alex@2a02:810c:280:59c:7471:c11:7e53:10ff) (Client Quit)
[20:27:50] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 258 seconds)
[20:29:44] <PikaChokeMe> I was also super confused by the switching of the i and the n in his function definition and then the usage below
[20:31:04] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[20:31:16] <l__q> How to show chats messages on site without puting into state? And then access to update eg. vote?
[20:31:52] <l__q> with react
[20:33:38] *** Quits: iffraff (~quassel@136.49.178.170) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:34:00] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 268 seconds)
[20:36:28] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[20:36:58] *** Joins: fuxaches (~terry@S01060cb6d29d89df.ed.shawcable.net)
[20:37:49] *** Quits: shan (shan@user/shan) (Changing host)
[20:37:49] *** Joins: shan (shan@cyblog/maintainer/shan)
[20:38:12] *** Joins: fikran (~fikran@user/fikran)
[20:38:40] <ljharb> PikaChokeMe: callbacks are a bit of a JS basic
[20:38:43] <ljharb> !eloquent @ PikaChokeMe
[20:38:43] <jellobot> PikaChokeMe, Eloquent JavaScript is a comprehensive introductory Web-based book with examples and a built-in interpreter. http://eloquentjavascript.net/
[20:38:44] <ljharb> read that
[20:40:03] <l__q> Why every chat "tutorial" use state to save messages? But if the chat grows, and amount of users this is a very bad idea to save into state
[20:40:15] *** Joins: wintersky (uid453465@id-453465.brockwell.irccloud.com)
[20:40:19] <gehn> because it's a tutorial
[20:40:35] <gehn> proper production implementation is left as an exercise for the reader
[20:40:35] <l__q> How then save messages for better way?
[20:40:55] *** Joins: funhouse (~funhouse@user/funhouse)
[20:41:02] <l__q> and access to update eg. vote
[20:41:10] <gehn> study system design
[20:42:09] <l__q> any example?
[20:47:47] <ljharb> What’s wrong with state
[20:47:53] *** Joins: codebam (~codebam@user/codebam)
[20:47:53] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[20:48:24] <l__q> when grows and you whant to update a single message then it take a while
[20:49:22] <PikaChokeMe> I'm just not actually used to seeing function definitions like this in JS
[20:49:34] <PikaChokeMe> I usually actually write in TypeScript, as much as I hate it sometimes
[20:49:36] <l__q> better way Im think is to push messages into DOM, but how then update it?
[20:49:49] <GreenJello> there are multiple ways to solve it. If you want to keep the simple rendering model, you could split the message list into lists with e.g. 10 messages each
[20:50:56] <l__q> GreenJello: that a rly good idea! What is the next idea?
[20:51:00] <GreenJello> or you could use virtual rendering to not render messages the user can't currently see
[20:51:10] <l__q> prop im will split messages
[20:51:41] <l__q> hmm?
[20:51:52] <PikaChokeMe> just listen to incoming messages on a websocket and dump them into the dom
[20:52:02] <l__q> virtual rendering? interesing, I will see this
[20:52:08] <PikaChokeMe> You could also do what IRC does... where this is all just data sent over a socket
[20:52:33] <PikaChokeMe> you only render to the user what is actually relevant to them and keep the rest of the message to yourself to process it accordingly
[20:52:36] <l__q> PikaChokeMe: my chat does it :D
[20:53:21] <PikaChokeMe> you could send json where you have like {id: whatever, message: render me to the dom}
[20:53:41] <PikaChokeMe> and then if a user edits a message just have the client look for that message id, and modify/update the text
[20:53:49] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:54:09] <PikaChokeMe> but if your chat is intended to be that ephemeral, why let them edit messages at all
[20:54:39] <l__q> My chat dosent allow edit messages
[20:54:56] <sheetjs> is github having issues with comments?
[20:55:00] <l__q> but I need to edit message if user give a vote
[20:55:14] <l__q> now im fiter all messages and edit a stage
[20:55:42] <l__q> sheetjs: no, im currently send a comment to prisma project
[20:55:52] <l__q> it works
[20:56:00] *** Joins: Heraes (~Heraes@119.12.203.77.rev.sfr.net)
[20:56:00] *** Quits: Heraes (~Heraes@119.12.203.77.rev.sfr.net) (Changing host)
[20:56:00] *** Joins: Heraes (~Heraes@user/romarain)
[20:56:25] *** Quits: Heraes (~Heraes@user/romarain) (Read error: Connection reset by peer)
[20:56:26] <sheetjs> ok now it works :D last 5 minutes "you cannot comment at this time"
[20:56:52] <l__q> GreenJello: thanks for your ideas! I will check virtual rendering, but prop I will split messages in my state
[20:57:15] <PikaChokeMe> sheetjs :O
[20:57:40] <PikaChokeMe> I took your advice in the end... and just ended up rendering a specific cartesian product index
[20:57:41] <l__q> mayby sesion expired? refresh site shoulded work
[20:58:42] <sheetjs> lot faster than enumerating every possibility :P
[20:59:00] <PikaChokeMe> It took me to the point of actually watching my computer try to process 2176782336 records in real time... and watching like 100000 records take literal seconds to process before I realised I only had 200 more of those to go and I was like... yeah this wont work
[21:00:10] <l__q> GreenJello: im will use virtual rendering! Thanks a lot!
[21:01:21] <PikaChokeMe> also at one point I tried to make an array that big and I was like... I'll just fill the first half of the array with the first option from a, the second half with the second option... then the first half of the first have with first option 2 and so on....
[21:01:43] <sheetjs> our first CVE was sadly related to that
[21:01:46] <PikaChokeMe> and then I basically realised that's pretty much what you suggested except instead of building everything and holding it in memory, just build whatever range you need
[21:02:12] *** Quits: bambanxx (~bambanx@181-163-41-17.baf.movistar.cl) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:02:18] *** Joins: zebrag (~chris@user/zebrag)
[21:02:29] *** Joins: Rockwood (~Rocky@user/rocky)
[21:03:00] <sheetjs> the DBF file format specifies the number of rows and the library would try to create an array with the specified length
[21:03:35] <l__q> thats what im needed! https://github.com/bvaughn/react-virtualized thanks <3
[21:04:09] <sheetjs> for version 3+ the length is a 32-bit integer and it wasn't capped, so it could run something like `new Array(100000000)`
[21:04:13] <sheetjs> n> new Array(100000000)
[21:04:13] <jellobot> (okay) [ <100000000 empty items> ]
[21:04:17] <sheetjs> n> new Array(1000000000)
[21:04:18] <jellobot> (okay) [ <1000000000 empty items> ]
[21:04:54] <Rockwood> o/
[21:05:18] <PikaChokeMe> :O
[21:05:22] *** Joins: Northwoods (~Northwood@103.223.8.125)
[21:05:42] <PikaChokeMe> my firefox memory ballooned to like 30 gigs... then ran out of memory, and I was like... this wont work.
[21:06:56] *** Quits: Akimb (~Akimb@86.100.13.100) (Ping timeout: 258 seconds)
[21:08:07] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[21:17:23] *** Joins: Akimb (~Akimb@86.100.13.100)
[21:19:06] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[21:21:52] <sheetjs> the unremovable spam :(
[21:22:30] <sheetjs> so if someone leaves a comment in a github issue, project owners can delete it
[21:22:42] *** Joins: Betal (~Betal@user/betal)
[21:22:51] <sheetjs> but for whatever reason, if someone reviews a PR and leaves a comment, there's no obvious place to delete it
[21:24:05] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[21:24:30] <silly_> i hate spam
[21:25:34] <sheetjs> spam is a natural result of bad incentives
[21:26:09] <sheetjs> its free to create accounts and leave spam comments.  it increases short-term engagement metrics
[21:26:46] <Rockwood> sheetjs, o/
[21:26:54] <sheetjs> Rockwood: ;/
[21:27:01] <Rockwood> howdy?
[21:27:26] <sheetjs> open source woes
[21:27:37] <sheetjs> projects switching from apache to agpl en masse
[21:27:55] <Rockwood> agpl?
[21:28:05] <Rockwood> new for me
[21:28:20] <silly_> (yet) another general public licence
[21:28:41] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 248 seconds)
[21:28:41] <Rockwood> wht kind lic?
[21:31:53] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 248 seconds)
[21:31:58] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[21:32:15] <hendursaga> Affero General Public License
[21:32:49] <hendursaga> Supposed to close the so-called SaaSS loophole
[21:33:25] <sheetjs> it piles on a bunch of usage restrictions
[21:33:52] <sheetjs> the distance between AGPL and a proprietary license is much shorter than Apache to AGPL
[21:36:39] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[21:37:00] <hendursaga> I'm enjoying it
[21:37:23] <sheetjs> its arguably a bad trend
[21:37:34] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[21:37:41] *** Parts: cloudbender (~cloudbend@user/cloudbender) ()
[21:37:57] <hendursaga> I don't see an argument
[21:39:18] <PikaChokeMe> can tasks actually run in parallel in JS? like if I ran 6 tasks concurrently would I finish what I was doing 6 times faster, or would I actually just run each task 6 times slower
[21:39:51] <sheetjs> the platform has to provide it
[21:39:55] <sheetjs> web workers is a classic example
[21:40:02] <GreenJello> there's concurrent I/O, timers, etc. but only one computation is running at any time
[21:40:25] *** Quits: Akimb (~Akimb@86.100.13.100) (Ping timeout: 248 seconds)
[21:40:28] <GreenJello> unless you use multiple threads or processes
[21:40:44] *** Joins: ckdcreation (~ckdCreati@147.55.133.134)
[21:41:08] <GreenJello> (web workers are what browsers provide for threads)
[21:42:16] <PikaChokeMe> I'm basically iterating through this set from 0-2176782336 again... not storing it in memory but seeking through it's value trying to see if item[i].someProperty > bestItemFoundSoFar.someProperty
[21:42:33] <PikaChokeMe> and I realise like... if this runs at the speed it has been this will only take me 30 hours
[21:43:16] <sheetjs> is this related to the combination thing?
[21:43:20] <PikaChokeMe> if I can divide 2176782336 into 60 sections and search each individually it'll only take me 30 minutes
[21:43:22] <PikaChokeMe> also yes
[21:43:43] <DPA> Maybe keep it sorted by someProperty and bisect.
[21:43:51] <sheetjs> can you do a gradient descent or something
[21:44:04] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[21:44:26] <PikaChokeMe> as far as I know all my data is random
[21:44:31] *** Joins: cbleslie2 (~cbleslie@47.148.37.101)
[21:44:36] <PikaChokeMe> and I don't have the entire list of permutations stored in memory in any way
[21:44:43] <sheetjs> what is someProperty
[21:44:55] <PikaChokeMe> "mastery" just a gear stat
[21:44:57] <sheetjs> is it randomly generated or is it computed based on the other properties of item[i] ?
[21:44:57] <wroathe> PikaChokeMe: Is this a filter operation?
[21:45:03] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:45:04] <wroathe> PikaChokeMe: Or a find?
[21:45:17] <sheetjs> i think it's a search for some property that can be computed based on other properties
[21:45:42] <wroathe> Right, so a find based on computed properties
[21:46:01] <PikaChokeMe> it could probably be either.... it is... computed based on the mastery of all the pieces that make up each individual set of gear
[21:46:02] <sheetjs> but there are too many possibilities to explicitly enumerate
[21:46:20] *** Quits: wovixo (~wovixo@128.104.205.49) (Read error: Connection reset by peer)
[21:46:27] *** Joins: Akimb (~Akimb@86.100.13.100)
[21:46:30] <PikaChokeMe> yis
[21:46:35] <PikaChokeMe> as I am discovering
[21:46:42] *** Joins: wovixo (~wovixo@128.104.205.49)
[21:47:09] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Read error: Connection reset by peer)
[21:47:21] *** Quits: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[21:47:30] *** Quits: merpnderp (sid16744@stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:47:39] <sheetjs> so you could do a descent to find local optima
[21:48:02] <sheetjs> lets say there were 4 classes of items
[21:48:34] <sheetjs> A = ["a","b","c"], B = ["d", "e"], C = ["f", "g"], D = ["h", "i", "j"]
[21:48:52] <sheetjs> so each element in the cartesian product is an array of 4 elements
[21:49:07] <sheetjs> and say you chose ["b", "d", "f", "h"]
[21:49:18] <sheetjs> now you compute the property for this thing
[21:49:35] <sheetjs> then you compute the property for all things that vary by one element
[21:50:01] <sheetjs> e.g. adfh, cdfh, befh, bdghm bdfi, bdfj
[21:50:07] *** Quits: themaxdavitt (sid433050@user/themaxdavitt) (Ping timeout: 245 seconds)
[21:50:28] <sheetjs> your next choice will be the best result among the 7 possibilities
[21:50:45] <sheetjs> and you repeat the process until the chosen thing is the best among its neighbors
[21:51:36] <PikaChokeMe> I think I get it... but how is this faster than iterating
[21:51:49] <PikaChokeMe> is that item actually guaranteed to be the best? or is it just a local minima?
[21:51:54] <sheetjs> well it's an approximation and you don't have to iterate
[21:52:04] <sheetjs> yeah its a local optima
[21:52:22] <sheetjs> you can randomly generate a handful of starting points
[21:52:50] *** Quits: Cyp_ (~cyp@192038129116.mbb.telenor.dk) (Remote host closed the connection)
[21:53:08] <PikaChokeMe> this is probably one of the cooler programming problems I've tried to solve to be honest
[21:53:19] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 258 seconds)
[21:53:27] *** Joins: konrados (~konrados@user-5-173-173-2.play-internet.pl)
[21:54:18] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:55:30] *** Quits: jakesyl (sid56879@id-56879.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:55:30] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 240 seconds)
[21:55:37] *** Joins: themaxdavitt (sid433050@user/themaxdavitt)
[21:55:45] *** Quits: Manouchehri (sid384576@id-384576.stonehaven.irccloud.com) (Ping timeout: 276 seconds)
[21:56:55] *** Joins: Cyp_ (~cyp@192038129116.mbb.telenor.dk)
[21:57:12] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 245 seconds)
[21:57:54] *** Quits: notchris (sid181145@id-181145.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[21:58:32] *** Joins: morgabra (sid500580@user/morgabra)
[21:58:54] *** Joins: name_ (~sed@pool-100-7-38-116.rcmdva.fios.verizon.net)
[21:59:19] *** Joins: Manouchehri (sid384576@stonehaven.irccloud.com)
[22:00:31] *** Quits: morgabra (sid500580@user/morgabra) (Max SendQ exceeded)
[22:01:53] *** Joins: Nimzowitsch (~nimzo@user/nimzowitsch)
[22:02:02] *** Joins: morgabra (sid500580@user/morgabra)
[22:02:25] *** Quits: unixcat64 (thelounge@envs.net) (Changing host)
[22:02:25] *** Joins: unixcat64 (thelounge@fedora/hyperreal)
[22:02:51] *** Quits: Manouchehri (sid384576@stonehaven.irccloud.com) (Max SendQ exceeded)
[22:04:25] *** Joins: JayDoubleu (sid339529@stonehaven.irccloud.com)
[22:04:28] *** Joins: Manouchehri (sid384576@stonehaven.irccloud.com)
[22:05:17] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[22:05:29] *** Joins: spynxic (~spynxic@spynxic.powered.by.lunarbnc.net)
[22:05:33] *** Joins: notchris (sid181145@stonehaven.irccloud.com)
[22:05:34] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[22:07:07] *** Quits: Camilo (~hugh@host-92-20-143-244.as13285.net) (Ping timeout: 268 seconds)
[22:07:40] *** Joins: jakesyl (sid56879@stonehaven.irccloud.com)
[22:08:46] *** Joins: Camilo (~hugh@37.120.133.74)
[22:09:40] *** Joins: merpnderp (sid16744@id-16744.stonehaven.irccloud.com)
[22:11:29] *** Quits: Rockwood (~Rocky@user/rocky) (Quit: The Time is Over)
[22:13:15] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:257d:20:516b:5d31) (Ping timeout: 258 seconds)
[22:16:09] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 248 seconds)
[22:20:05] *** Joins: CoolerX (~CoolerX@user/coolerx)
[22:20:51] <sheetjs> does parseFloat take a radix argument?
[22:21:44] <GreenJello> nope
[22:21:46] <sheetjs>             value = (value === +value) && (value === (value | 0)) ? parseInt(value, 10) : parseFloat(value, 10);
[22:22:22] <GreenJello> ignores arguments after the first
[22:23:37] <GreenJello> and the parseInt there is redundant
[22:24:50] <GreenJello> the whole thing is: if (value !== +value || value !== (value | 0)) value = parseFloat(value)
[22:24:59] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[22:26:02] <GreenJello> the first condition might also be redundant, but not 100% sure on that
[22:26:42] <sheetjs> https://github.com/abstractvector/node-dbf/blob/master/src/parser.js#L97 was the original line
[22:26:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[22:29:18] <GreenJello> uh, it's a string, so the condition is always false here
[22:29:34] <GreenJello> value = parseFloat(value)
[22:29:38] <sheetjs> yeah i figured, the equivalent sheetjs line is
[22:29:44] <sheetjs> 				case 'F': out[R][C] = parseFloat(s.trim()); break;
[22:29:52] *** Quits: CoolerX (~CoolerX@user/coolerx) (Quit: Leaving)
[22:29:56] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[22:30:54] *** Joins: straykitten (~straykitt@subs25-116-206-9-38.three.co.id)
[22:30:56] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[22:31:01] *** Parts: straykitten (~straykitt@subs25-116-206-9-38.three.co.id) ()
[22:31:52] <GreenJello> I feel like this was ported from some C code or something
[22:32:30] <sheetjs> who knows
[22:33:18] <sheetjs> the dbf stuff is hard because there's no real official documentation and the IP changed hands too many times
[22:34:12] <sheetjs> so most projects either ported some old C library or followed some unofficial spec
[22:34:31] <sheetjs> there are a few that seem closer to greenfield, like the `dbf` ruby gem
[22:34:52] <cthulchu> damn stack trace is just...
[22:35:01] <cthulchu> how. do. you. find. it?! https://i.imgur.com/5Az5ubi.png
[22:35:34] <sheetjs> do you have the source maps?
[22:35:37] <GreenJello> grep your source code?
[22:35:47] <silly_> somewhere in your inline script
[22:35:53] <cthulchu> it's not my source
[22:35:57] <cthulchu> it's not inline either
[22:36:00] <silly_> just click on vm7278:1
[22:36:08] <cthulchu> exactly
[22:36:16] <cthulchu> which gives me this: https://i.imgur.com/0YV77l0.png
[22:36:24] <cthulchu> not in my codebase
[22:36:33] <sheetjs> so something else is depending on jQuery
[22:36:42] <silly_> have you looked in the dom?
[22:36:49] <silly_> inline script?
[22:37:08] <sheetjs> can you grep for that string?
[22:37:15] <cthulchu> it is in dom
[22:37:16] <cthulchu> thanks
[22:37:24] <cthulchu> but I don't know what throws it to the dom
[22:37:35] <silly_> wordpress i guess
[22:37:39] <cthulchu> no
[22:38:11] <silly_> the hand of god?
[22:38:23] <sheetjs> cthulchu: search for part of the selector
[22:38:34] <cthulchu> tried
[22:39:57] <cthulchu> I'm afraid it's some base64 eval garbage
[22:40:01] <sheetjs> window.jQuery = () => { debugger; }
[22:40:41] *** Quits: Camilo (~hugh@37.120.133.74) (Ping timeout: 248 seconds)
[22:41:34] *** Joins: Camilo (~hugh@37.120.133.74)
[22:42:17] <sheetjs> n> debugger;
[22:42:18] <jellobot> (okay) undefined
[22:42:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[22:42:37] *** Joins: Guest84 (~Guest84@p200300c8cf227600386324dfb0f6e21b.dip0.t-ipconnect.de)
[22:43:11] *** Joins: Talon (Talon@172.77.98.6)
[22:43:59] <silly_> n --inspect> debugger;
[22:44:54] <silly_> somebody click continue in n>
[22:45:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[22:46:12] *** Jaran|zZZzZZZzz is now known as Jaran
[22:46:47] <silly_> ee moj jaranee
[22:47:28] <Slade> hmm node 13 and 15 got skipped?
[22:47:33] *** Joins: fikran (~fikran@user/fikran)
[22:47:44] <GreenJello> no?
[22:47:48] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 268 seconds)
[22:47:58] <sheetjs> even are LTS releases
[22:48:38] <sheetjs> Major Node.js versions enter Current release status for six months, which gives library authors time to add support for them. After six months, odd-numbered releases (9, 11, etc.) become unsupported, and even-numbered releases (10, 12, etc.) move to Active LTS status and are ready for general use.
[22:49:35] <celphi> n>continue;
[22:49:36] <jellobot> (fail) SyntaxError: Illegal continue statement: no surrounding iteration statement
[22:49:44] <silly_> weren't odd versions like experimental versions some years ago?
[22:50:10] <GreenJello> they're sorta like beta releases in practice
[22:50:43] <GreenJello> you can try them out and they should work 99% of the time, but businesses usually stick to current LTS
[22:50:43] <sheetjs> like 0.10 days
[22:52:00] <GreenJello> node 15 and 16 have been released, but I'm still on 14.x at work until October
[22:52:44] <Slade> was just looking at this.. https://nodejs.org/en/about/releases/
[22:52:52] <Slade> 13 and 15 were missing
[22:53:06] <sheetjs> yeah because they are not supported
[22:53:18] <Slade> oh, already EOL?
[22:53:28] <GreenJello> yeah
[22:53:52] *** Joins: summersault (~summersau@179.221.251.16)
[22:54:29] <sheetjs> 15 was EOL in April
[22:54:33] <sheetjs> 13 last year
[22:55:32] <Slade> so 16 will become an LTS eventually?
[22:55:42] <Slade> the 'active' LTS
[22:55:48] <GreenJello> active LTS in October
[22:55:57] <sheetjs> the table shows the dates
[22:56:21] <Slade> sheetjs, yea just wasnt sure why 16 didnt have the tag 'LTS' next to it
[22:56:30] <sheetjs> look at the status column
[22:56:54] <Slade> thats what i was looking at. 16 didnt say lts
[22:56:58] *** Joins: teut (~teut@182.69.87.27)
[22:57:09] <sheetjs> v10 should also be listed here
[22:57:10] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:257d:20:516b:5d31)
[22:57:32] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[22:57:37] <sheetjs> the v12 bar looks wrong
[22:58:15] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[22:58:39] <sheetjs> nvm 30 months from initial release
[22:58:43] <GreenJello> v10 should be EOL unless it had a longer LTS release
[22:58:55] *** Quits: comatory_ (~ondrejsyn@217.11.241.69) (Ping timeout: 268 seconds)
[22:59:03] <sheetjs> actually thats incorrect
[22:59:16] <sheetjs> so in total there seems to be 36 months of support
[22:59:46] <sheetjs> 6 months of current + 12 months of active + 18 months of maintenance
[23:00:13] <sheetjs> so yeah v10 wouldve EOL'd in april
[23:01:12] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[23:02:08] *** Joins: summersault (~summersau@179.221.251.16)
[23:06:43] <entuland> say I want to compute a number in 0x00 to 0xFF range out of a 8 digits hex number, would it be good enough to just modulo it? or should I do some progressive XOR or something to actually take advantage of the randomness of the string? It's part of a UID
[23:07:08] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[23:07:35] <entuland> I'm happy with possible conflicts, just looking for the best possible randomness out of the given input
[23:07:54] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 240 seconds)
[23:08:33] <sheetjs> entuland: if you have 8 iid random hex digits, you could take the low 2 digits or high 2 digits or any 2 digits for that matter
[23:09:13] <GreenJello> ^
[23:09:15] *** Joins: N4buc0 (~N4buc0@2001:1284:f013:588:5975:f4ef:e434:54a2)
[23:09:23] <GreenJello> anything else can only reduce randomness
[23:09:31] <GreenJello> (or make no impact, like xor)
[23:10:06] <sheetjs> xor can create problems
[23:10:30] <sheetjs> for example, suppose you had a process that generates a uniform byte
[23:10:48] <entuland> I threw the XOR there, I just remember some algo used it to compute checksums or something
[23:10:51] <sheetjs> then you can expand that to 8 digits by multiplying by 0x01010101
[23:11:01] <sheetjs> e.g. 0xBA -> 0xBABABABA
[23:11:08] <sheetjs> and now if you xor the bytes, you get 0
[23:11:15] <entuland> so not even taking the modulo would make any difference compared to taking the last two digits?
[23:11:30] <sheetjs> taking the last 2 digits is  modulo 256
[23:11:52] <entuland> okay, so it's just the same operation and I didn't know how it worked
[23:11:53] <sheetjs> the overarching answer to your question is "it depends on the random nature of the 8 digit hex number"
[23:12:42] <entuland> yes, I know it depends on the randomness of the input, I was just not sure whether there was any way to somehow consider all the 8 digits when trying to extract just 2
[23:12:56] <entuland> thanks for the input everone
[23:13:00] <entuland> y* :P
[23:14:50] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[23:15:14] *** Joins: mickey8 (~user@user/mickey)
[23:15:33] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[23:19:50] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:21:10] <Slade> fibers will not be supported on nodejs 16 or higher
[23:21:37] <systemfault> What's that, some library nobody used?
[23:22:19] *** Quits: summersault (~summersau@179.221.251.16) (Remote host closed the connection)
[23:22:28] *** Quits: EgonX (~EgonX@2601:2c6:47f:9c18:c578:89c3:1fce:4302) (Quit: Textual IRC Client: www.textualapp.com)
[23:23:51] *** Joins: summersault (~summersau@179.221.251.16)
[23:24:18] *** Parts: Guest84 (~Guest84@p200300c8cf227600386324dfb0f6e21b.dip0.t-ipconnect.de) ()
[23:24:51] <Lyn> should I be using Redux with ReactJS
[23:25:59] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[23:26:03] <Slade> systemfault, node-sass uses it.
[23:26:05] *** Quits: Betal (~Betal@user/betal) (Ping timeout: 258 seconds)
[23:26:19] <systemfault> Why do the sass people keep making shit decisions?
[23:26:33] *** Quits: mattil (~mattilinn@87-92-9-185.bb.dnainternet.fi) (Quit: Leaving)
[23:26:38] <Slade> https://sass-lang.com/blog/node-fibers-discontinued
[23:27:21] <systemfault> 1) Not killing the original SASS syntax once SCSS was released 2) Writing SASS in Ruby 3) Using Dart to replace Ruby 4) Using a library nobody use for concurrency
[23:27:37] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Ping timeout: 248 seconds)
[23:27:56] *** Quits: jakesyl (sid56879@stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:27:56] *** Quits: JayDoubleu (sid339529@stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:28:02] *** Joins: morgabra_ (sid500580@user/morgabra)
[23:28:03] *** Joins: notchris_ (sid181145@id-181145.stonehaven.irccloud.com)
[23:28:04] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[23:28:09] *** Quits: themaxdavitt (sid433050@user/themaxdavitt) (Ping timeout: 248 seconds)
[23:28:16] <GreenJello> Lyn, for non-tiny apps you often need some kind of global state store, and redux fits that role decently
[23:28:18] *** Joins: themaxdavitt (sid433050@user/themaxdavitt)
[23:28:18] *** Joins: Manouchehri_ (sid384576@id-384576.stonehaven.irccloud.com)
[23:28:20] *** Joins: jakesyl (sid56879@id-56879.stonehaven.irccloud.com)
[23:28:31] *** Quits: notchris (sid181145@stonehaven.irccloud.com) (Ping timeout: 268 seconds)
[23:28:35] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[23:28:41] *** Quits: Manouchehri (sid384576@stonehaven.irccloud.com) (Ping timeout: 248 seconds)
[23:28:41] *** Manouchehri_ is now known as Manouchehri
[23:29:01] *** Joins: Betal (~Betal@user/betal)
[23:29:03] <Lyn> are there other options I should consider for it
[23:29:08] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 268 seconds)
[23:29:08] *** morgabra_ is now known as morgabra
[23:30:14] <systemfault> Lyn: Redux + GraphQL/Just using component state/replace redux with mobx and look how they handle that in that lib..
[23:30:25] *** Joins: EgonX (~EgonX@2601:2c6:47f:9c18:e95e:e379:78f4:bcee)
[23:30:59] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 268 seconds)
[23:31:06] <systemfault> *For the first, I meant: drop redux and use GraphQL
[23:31:36] *** Parts: Alvin_ (~Alvin@122.162.213.4) ()
[23:31:56] *** Joins: Aayush (~Alvin@user/aayush)
[23:32:04] *** Joins: pycurious (~Adium@user/pycurious)
[23:32:27] <pycurious> I've cross origin = false because of security constraints. How do I pull a video/image from a CDN?
[23:34:56] <GreenJello> not sure what "cross origin = false" refers to, but if you mean you're using CSP then you should be able to override it for some asset types on some hosts
[23:36:38] <pycurious> GreenJello: how do i override it on my page?
[23:37:55] <GreenJello> where are you entering that setting?
[23:38:49] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[23:39:10] *** Neuromancer is now known as Meowmancer
[23:40:24] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d)
[23:43:01] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:5ced:8697:4c5:e97d) (Client Quit)
[23:45:47] *** Joins: mickey86 (~user@user/mickey)
[23:47:38] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 244 seconds)
[23:47:38] *** mickey86 is now known as mickey8
[23:49:25] *** Joins: pavonia (~user@user/siracusa)
[23:55:11] *** Joins: jose47 (~jose@pmr109.internetdsl.tpnet.pl)
[23:57:31] *** electr0n_ is now known as electr0n
[23:58:44] *** Joins: matsaman (~matsaman@user/matsaman)
