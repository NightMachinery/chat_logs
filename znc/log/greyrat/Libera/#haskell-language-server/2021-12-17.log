[00:28:15] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[01:20:21] <michaelpj[m]> wow, we have a lot of duplicate code in the test suites for various bits of HLS
[02:12:06] *** Joins: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com)
[02:42:00] <sm> does hls (hie-bios) build the world in its own private cache, just like stack and cabal do ?
[02:47:16] <sm> I wonder if cradles were organized by component, with paths grouped under their component, if it would be easier
[02:47:54] <sm> and I wonder if gen-hie always generates an entry for each file rather than one for the directory - it seems that way here
[02:48:13] <sm> other than that, gen-hie seems really handy, but I wonder why I'm having to run it at all
[02:51:42] * sm just did it for several projects and it felt a bit like busywork
[03:47:56] <sm> wow, hls is working on my stack scripts, I haven't seen that before
[03:51:31] <sm> ah not quite. But maybe better than before, I seem to remember something breaking from the shebang line
[06:20:25] *** Quits: pepeiborra (sid443799@ilkley.irccloud.com) (Ping timeout: 256 seconds)
[06:23:37] *** Joins: pepeiborra (sid443799@id-443799.ilkley.irccloud.com)
[07:32:35] *** Joins: juhp (~juhp@128.106.188.82)
[08:07:01] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[08:14:44] *** Joins: juhp (~juhp@128.106.188.82)
[08:20:37] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[08:56:37] <jneira[m]> <sm> "other than that, gen-hie seems..." <- hls should work for most projects without it: it uses the same config you can see in hie.yaml but on the fly, so if you don't have to touch the gen-hie yaml hls must work
[08:58:20] <sm> jneira: I thought I had some projects where the implicit cradle didn't work for many of the source files, but perhaps it was for other reasons. I now have a pure arm toolchain so I should retest all
[08:59:28] <jneira[m]> nice, in any case the hie.yaml should not fix them neither
[08:59:46] <jneira[m]> in other case it is a bug we have to fix
[09:00:27] *** Joins: juhp (~juhp@128.106.188.82)
[10:42:28] *** Joins: arrowd (~arr@2.94.236.140)
[11:06:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[12:18:38] <fendor[m]> <sm> "does hls (hie-bios) build the..." <- yeah, actually both. Hie-bios uses a private cache to initialise a cabal project and then hls uses a custom cache for .hi files. For stack, we share the cache with the stack tool, but HLS still has a private dir for hi files.
[12:18:56] <fendor[m]> additionally, there is hiedb, which is our own cache database
[12:19:34] <fendor[m]> <sm> "and I wonder if gen-hie always..." <- gen-hie should do that only for other-modules and main-is. It has no logic for merging common prefixes.
[12:20:18] <fendor[m]> <sm> "wow, hls is working on my..." <- yeah, that is probably an accident. It probably just loaded the script with boot-libs in scope (using the Default Cradle)
[12:21:29] <fendor[m]> <sm> "other than that, gen-hie seems..." <- agreed with jneira , you should have to run it at all and in my opinion, it is exactly the opposite. When it doesn't work, you need to write a hie.yaml yourself (not the generated one)
[12:53:57] <jneira[m]> please, dont merge any pull request before https://github.com/haskell/haskell-language-server/pull/2493 to make sure we dont have bad commits in master
[12:54:43] <jneira[m]> and it would be great to have some stamp on that pr :-) 
[12:57:38] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[13:21:47] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:28:51] *** Parts: coot (~coot@89-64-85-93.dynamic.chello.pl) ()
[13:29:22] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[13:38:39] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Remote host closed the connection)
[13:40:00] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[14:14:12] <jneira[m]> wow murphy never rests 
[14:36:06] *** Quits: arrowd (~arr@2.94.236.140) ()
[15:11:28] *** Joins: libertyprime (~libertypr@203.211.78.24)
[16:43:24] *** Quits: libertyprime (~libertypr@203.211.78.24) (Quit: leaving)
[17:20:04] *** Joins: libertyprime (~libertypr@203.211.78.24)
[17:25:17] *** Quits: libertyprime (~libertypr@203.211.78.24) (Ping timeout: 240 seconds)
[17:27:38] *** Joins: arrowd (~arr@2.94.236.140)
[19:07:29] *** Quits: yoshitsugu (uid529929@id-529929.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:17:24] *** Quits: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb) (Quit: coot)
[20:15:13] <sm> g'day all. Wow that's a lot of building
[20:15:46] <sm> all: I'm still not seeing the practical benefit of keeping stack-8.10.6.yaml around ?
[20:17:58] <michaelpj[m]> it's in the build matrix, no? https://github.com/haskell/haskell-language-server/blob/master/.github/workflows/build.yml#L20
[20:18:28] <michaelpj[m]> and it's a supported version
[20:33:14] <michaelpj[m]> whyyyyyyyyyyyyyy: https://github.com/microsoft/language-server-protocol/issues/1394
[21:01:41] <sm> I think upgrading to latest ghc minor version is generally easy and recommended, so most projects could safely just support the latest, but perhaps it's different for hls. Ok, then it should remain, as a copy
[21:03:48] <sm> well, a mostly-copy
[21:03:48] <michaelpj[m]> sm: it sounds like you disagree with the support policy for minor versions: https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html#minor-versions
[21:04:04] <michaelpj[m]> if you want to make the argument to change it, you could make an issue
[21:04:15] <michaelpj[m]> but as it stands, 8.10.6 falls under that, so it gets built, and we have a stack file for it
[21:04:26] <sm> I'm not going that far, just asking how many stack yamls y'all want to maintain
[21:04:44] <sm> since I offered to help update them a little
[21:08:42] <sm> I hoped to reduce three ghc 8.10 stack yamls to one, but it seems not the way right now. 
[21:10:34] <sm> they could be reduced to two by making stack.yaml a symlink. For windows users, this wouldn't work, but git clone still works and creates the symlink file containing the target path, so windows-based builders/contributors could probably figure it out. The readme could say "windows users: copy stack-8.10.7.yaml stack.yaml". Also, I don't know how many windows folk would actually be affected/notice. 
[21:11:49] <sm> but perhaps three copies plus extra maintainer discipline is simplest.
[21:17:43] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[21:31:30] <sm> can't investigate it now, but install/src/*hs are an example of files that the implicit cradle doesn't recognise (for me)
[21:32:47] <sm> seems gen-hie ignores install/ for some reason
[21:33:00] <sm> recognises it's a separate project, maybe
[21:47:46] <sm> so I opened install/ as a standalone project in vs code. hls output showed normal startup and no errors, but hls was not active and didn't start Processing the files. Running hls at the command line did, but it's rebuilding the world since install's stack.yaml is for an older ghc version; should be synced with the parent project
[21:49:59] <maralorn> michaelpj: I liked the "odd" vs. "atypical" change in your above mentioned issue. Afterall 2^31-1 is most certainly odd.^^
[21:50:23] <michaelpj[m]> maralorn: quite ðŸ˜…ðŸ˜…ðŸ˜…
[21:50:47] <michaelpj[m]> I could just imagine "closed because of course it's odd!"
[21:53:01] <sm> when I run hls in install/, with no argument or `.`, it wants to process the whole haskell-language-server repo
[21:58:07] *** Quits: arrowd (~arr@2.94.236.140) ()
[22:10:10] <jneira[m]> <sm> "recognises it's a separate..." <- yeah i usually open  directly the install folder in vscode and worked last time i did
[22:10:29] <jneira[m]> <sm> "when I run hls in install/, with..." <- do you have an hie.yaml in the parent directory?
[22:11:36] <sm> jneira: I have no hie.yaml in install/ or the parent, though there are a bunch under ghcide and plugins
[22:13:34] <jneira[m]> in test data i guess
[22:14:07] <sm> it says Consulting the cradle for "install/src/HlsInstall.hs", eg, then a bunch of hls: finish: ..., but no errors, no processing, no red squiggly lines (even after running hls at command line and letting it process everything).
[22:18:42] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[23:27:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:29:45] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Client Quit)
[23:31:18] *** Joins: coot (~coot@2a02:a310:e03f:8500:933a:39ca:ef4e:37cb)
[23:35:09] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:37:14] *** Joins: juhp (~juhp@128.106.188.82)
[23:47:40] <jneira[m]> ok i needed a hie.yaml in ./install cause the implicit-hie or hie-bios tries to load the subproject as a package from the main project cabal.project
[23:50:40] <sm> jneira: yes that matches what I was seeing.. some tool treats it as part of the larger project and another tool doesn't, so it falls between the cracks
[23:51:57] <sm> install/README: "The rationale behind this choice is to keep the installer completely isolated from main HLS code: different dependencies, different builds, etc." Is that really helping ?
[23:53:10] <jneira[m]> well we did not have to touch the script cause deps changes in the main project did not affect it
[23:53:24] <jneira[m]> so we did not touch it in months
[23:53:57] <jneira[m]> the rest of packages do not depend on it and the other way around
[23:54:30] <sm> install.hs is in the parent directory. As a stack script, it could nowadays use stack script --resolver ... and there'd be no need for install/stack.yaml
[23:55:32] <sm> ie, stack scripts can be completely self contained now
[23:55:35] <jneira[m]> hmm it has 4 extra deps
[23:55:49] <sm> those can be specified with --package
[23:55:49] <jneira[m]> and a flag
[23:56:01] <jneira[m]> the  one liner starts to be a little bit long ;-)
[23:56:21] <sm> ..and I assume flags too. There is a multiline syntax for it, as with cabal scripts
[23:56:42] <jneira[m]> yeah i know but you have to put that info in some place
[23:56:58] <jneira[m]> or a sh/cmdscript or docs or... a stack.yaml
[23:57:13] <jneira[m]> s/or a sh/cmdscript or docs or... a stack.yaml/or a sh/cmd script or docs or... a stack.yaml/
[23:57:30] <sm> yes, either it can be a self-describing script, or an ordinary package. Right now it's kind of both
[23:57:57] <sm> I am guessing (don't know) that having the stack.yaml there is confusing hls
[23:58:01] <jneira[m]> yeah the script thing does not give us great things tbh
[23:58:56] <jneira[m]> sm: not sure what is going on, for cabal is clear, the install subfolder does not have cabal.project and the parent does
[23:59:22] <sm> that's why it's called shake.project in install/ I guess, to hide it from hls
[23:59:22] <jneira[m]> what cradle choose hls for you when running hls in the subdir?
[23:59:26] <jneira[m]> stack or cabal?
[23:59:57] <sm> Cradle directory: /Users/simon/src/DEVTOOLS/haskell-language-server
[23:59:57] <sm> Cradle type: Stack
