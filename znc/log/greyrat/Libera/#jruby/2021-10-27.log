[00:00:31] <headius> could you print out `obj.class.ancestors` where obj is the result of `getFields`?
[00:42:12] <headius> kares: I see a jruby-openssl gem artifact in sonatype staging
[00:42:15] <headius> 0.11
[00:42:49] <headius> do we release the gem on maven?
[00:55:13] <headius> enebo: I did the PR against 9.3
[00:55:21] <headius> oops, I meant 9.2
[01:07:46] <enebo[m]> sorry was doing a couple of errands
[01:09:50] <headius> No problem
[01:10:17] <headius> That PR probably won't be green due to Maven lag but jnr stuff is released
[01:10:25] <headius> I couldn't think of a good reason not to do it against 9.2
[01:10:34] <enebo[m]> headius:can you restart your ci run on your PR
[01:10:56] <enebo[m]> headius: I think the only fear I have in it are the jnr-constant fixes
[01:11:24] <enebo[m]> headius: but I am game
[01:11:46] <enebo[m]> all the jobs on travis failed
[01:13:15] <enebo[m]> puritylake: cool.  fix_printf is completely green now too
[01:13:28] <headius> The constant fixes were mostly additions so I don't think they're likely to hurt anything
[01:14:08] <headius> I will restart the pr ci in a while but Travis tends to get stuck with stale versions sometimes
[01:14:35] <enebo[m]> puritylake: if you fixed those two be sure to push them to that branch you made the PR on
[01:15:15] <enebo[m]> headius: I just saw some renaming like Inet to INet but those perhaps are just internal to the library
[01:15:41] <puritylake[m]> Not quite yet, running the test locally more errors cropped up the spec fast one
[01:16:03] <puritylake[m]> They are to do with String#% fails
[01:16:18] <headius> That was fixing a bad class name on Windows, it failed to load because it was wrong
[01:16:41] <headius> And I think that is all still part of the added socket constants that weren't there before
[01:16:54] <enebo[m]> ok
[01:17:37] <enebo[m]> puritylake: if you merge your branch with HEAD of fix_sprintf you should see completely green run
[01:17:53] <enebo[m]> puritylake: unless it is a bug with %cC you are seeing in format
[01:18:07] <enebo[m]> I fixed some problems a couple of days ago with format
[01:18:08] <puritylake[m]> Ok one sec
[01:19:29] <enebo[m]> I now also realize I need to change the parser  a little bit.  I tried to get away with all modifier parsing in one method and I should make methods for width and precision as their own parse methods
[01:20:31] <enebo[m]> That realization becomes way more obvious as I started fixing esoteric error messages that we never passed.  I keep adding more and more if statements with boolean toggles.  Not a good pattern once you have multiple ones
[01:23:03] <headius> enebo: restarted
[01:27:42] <edipofederle[m]> This is the correct way to set a ENV variable: `posix.setenv(keyAsJava, valueAsJava, 1);` ?
[01:32:26] <puritylake[m]> enebo: is fix_sprintf a new branch?
[01:32:45] <enebo[m]> puritylake: sorry I meant the branch we are working on
[01:32:52] <enebo[m]> new_sprintf
[01:33:42] <puritylake[m]> Ah cool, seem to be at HEAD already, just rerunning the tests due to a technical hiccup in the command I ran with git
[01:34:17] <puritylake[m]> I'll let you know the tests that are failing as soon as they are done
[01:34:49] <puritylake[m]> Some of the fails are the ones you mentioned would fail if the environment wasn't set up right but the ones I refer to regard sprintf
[01:35:51] <enebo[m]> puritylake: I am apparently eating an early dinner :)  I will stop back afterwards but there is not really any time pressure.
[01:36:10] <puritylake[m]> No worries, enjoy
[01:38:02] <enebo[m]> edipo.federle: ProcessBuilder.environment() will return a map you can change values before executing the process
[01:38:49] <edipofederle[m]> ah, so, just change the map directly? 
[01:38:50] <enebo[m]> posix.setenv will work but only when native support is enabled (which probably is not important here).  
[01:38:55] <enebo[m]> yeah I believe so
[01:39:02] <edipofederle[m]> nice
[01:39:05] <edipofederle[m]> thx!
[01:39:09] <enebo[m]> np
[01:39:11] <enebo[m]> bbiab
[02:04:18] <danieljrubyquest> <headius> "could you print out `obj.class...." <- Sure! I'm seeing this:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/2a0dd7fb7de3e822f399eab1c89b4ca88b7955b5)
[02:16:41] <puritylake[m]> Ok fails seem to be gone, did a quick push
[02:18:41] <enebo[m]> puritylake: yeah watching it run in a tab :)
[02:19:47] <puritylake[m]> Awesome, hopefully can get to work on the next specifier if this passes
[02:22:52] <enebo[m]> https://app.travis-ci.com/github/jruby/jruby/jobs/545289481
[02:23:15] <enebo[m]> I see some others also failed too.  Looks like something with zero padding broke
[02:23:49] <puritylake[m]> Oh boy
[02:24:11] <enebo[m]> heh
[02:24:34] <enebo[m]> well assuming your merge did not undo something in the parser I would think it would mostly be %c sorts of things
[02:25:10] <enebo[m]> I do also see in ruby/spec run that one of those mocks are not calling something (which I think was the last thing you said you fixed)
[02:26:50] <puritylake[m]> The tests had stopped failing, I'll have another look
[02:28:58] <puritylake[m]> Zero padding seems to be a problem with %d
[02:29:18] <puritylake[m]> I must have messed up that code somehow
[02:29:41] <puritylake[m]> Maybe I messed with the merging conflicts
[02:29:57] <enebo[m]> I see you did a force push too?
[02:30:13] <puritylake[m]> Did I?
[02:30:39] <enebo[m]> well maybe you didn't.  The PR says the merge conflicts commit was force push but perhaps I don't get something
[02:30:53] <enebo[m]> I never notice comments like that until there is a problem :)
[02:32:23] <puritylake[m]> I could have, my memory in the short term can be unreliable
[02:32:53] <enebo[m]> you could create a new branch off of HEAD and git cherry-pick the 4 commits you made for this original PR
[02:33:07] <enebo[m]> err 3 commits
[02:33:12] <enebo[m]> then submit a new PR
[02:33:26] <enebo[m]> that would eliminate the merge and HEAD ran green on travis
[02:34:10] <puritylake[m]> Haven't heard of cherry-picking in git
[02:36:01] <enebo[m]> yeah it is really useful.  It just takes a specific commit and commits onto your current branches HEAD (and no doubt you can specify where you want it committed)
[02:36:45] <enebo[m]> I alias it to 'git cp' and will use it when I just want to move a commit from mainline development back to an older support branch
[02:37:32] <enebo[m]> I am thinking if zero padding for %d is broken something went wrong in the merge so it is simpler to just start a new branch and cp your commits there
[02:38:07] <enebo[m]> unless any of your 3 commits hit the parser and changes how zero padding works
[02:40:11] <puritylake[m]> I think I know where I went wrong, is it possible to revert the changes I push from the PR? I know off the top of my head what I did to fix MY code
[02:41:02] <puritylake[m]> I remember seeing code you wrote in format_d* I think I overwrote it in a merge
[02:41:17] <enebo[m]> well there are two ways but I dislike both of them
[02:41:55] <enebo[m]> 1 is to git revert which will make a big commit which undoes the commit.  I think this is probably weirder output-wise for merge commits 
[02:42:31] <enebo[m]> 2. is to use git reset --hard HEAD^ which would nuke the last commit and the force push to the PR
[02:42:56] <enebo[m]> This is good for really removing stuff but it is about as dangerous as you might think it is so you need to be careful
[02:43:25] <puritylake[m]> Option 2 doesn't seem good
[02:43:36] <puritylake[m]> Well for this case
[02:43:38] <enebo[m]> The advantage of 1 is nothing is destroyed but you add more noise to history.  number 2 has no noise but you need to be confident
[02:44:07] <puritylake[m]> Ok, I'll learn to cherry pick
[02:44:33] <enebo[m]> I locally do #2 and there is a syntax for deleting n commits when I realize I just booched what I was working on
[02:45:25] <enebo[m]> Or sometimes I do it to do pre-release testing because I will commit version number as a commit.  When I am done I just hard head kill that commit because it is not release time
[02:45:34] <enebo[m]> (our build system requires the version to be committed which is why I need to do the commit)
[02:45:59] <enebo[m]> I should say I have used git for years and still feel I am not very good at git
[02:46:37] <enebo[m]> So someone may come along and lay the smack down on my suggestions but a new brajc and 3 cps will make a much smaller PR
[02:46:50] <enebo[m]> you actually have merged twice too and now it will be 0
[02:53:46] <puritylake[m]> So on the new branch I checkout upstream's head? Then cherry pick my commits?
[02:56:39] <enebo[m]> you git checkout new_sprintf; git pull (to make sure you at HEAD); git branch my_pr_branch; git checkout my_pr_branch; git cherry-pick {commit_hash} ...; 
[02:57:05] <enebo[m]> then push to your fork and then go over to github and it will say you can open a PR at the top for that last commit
[02:57:47] <enebo[m]> Actually it will be in the text of the push too
[03:08:14] <puritylake[m]> My brain is like goo right now trying to fix this mess lol
[03:10:46] <enebo[m]> yeah this is not so bad.  but if you are tired it may be easier tomorrow :)
[03:11:02] <enebo[m]> people redo PRs all the time too
[03:11:49] <puritylake[m]> I'm tempted to drop my PR, copy and paste only my pieces of code and pushing it again lol
[03:12:18] <puritylake[m]> The changes I made are very close to each other
[03:12:56] <puritylake[m]> And I haven't done a huge amount
[03:13:20] <enebo[m]> well that is also valid since you made changes between commits
[03:13:59] <enebo[m]> some projects ask people to squash commits so that if we later want to use git bisect we do not bisect into a commit which breaks stuff
[03:14:14] <enebo[m]> we don't ask that but there is a virtue to it 
[03:14:23] <puritylake[m]> I think I'll do that, gimme a moment
[03:59:05] <puritylake[m]> Ok think it's working
[04:00:52] <puritylake[m]> Or not cause I'm stupid lol
[04:04:22] <puritylake[m]> Screw it I'll get back to it tomorrow with a clear mind
[04:15:42] <Freaky> headius: what Linux's did you have in mind when you mentioned java_home?
[04:15:56] <Freaky> seems specific to macOS, but it's a bit awkward to search for ;)
[10:48:16] <kares[m]> headius: we stopped releasing jruby-openssl to maven - the gem is already pushed (and downloaded 3k+ times) on RGs
[10:48:16] <kares[m]> still use maven to build the final gem package (w the release profile) - so I might have deployed to sonatype but not intent to release there.
[10:49:29] <kares[m]> I adjusted the tests for the expected file grow (due a bigger BC packaed) on the 9.2 PR, there's still CI azure jobs broken atm - seems unrelated
[14:42:18] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[14:42:19] *** Quits: mlaug (~mlaug@v220210724969158479.bestsrv.de) (*.net *.split)
[14:45:32] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[14:45:32] *** Joins: mlaug (~mlaug@v220210724969158479.bestsrv.de)
[17:38:59] <enebo[m]> kares: thanks for looking at the size increase.  We seem to have set pretty narrow margins in checkversions job
[18:07:41] <headius> good morning
[18:08:31] <headius> enebo: it is just a MB boundary and we usually just pick the next largest
[18:08:45] <enebo[m]> yeah I know
[18:09:09] <enebo[m]> I am just saying it seemed pretty close
[18:09:48] <headius> yeah I have never paid attention to how close to the actual size we are when I bump up the size check
[18:10:13] <enebo[m]> I actually am not saying I am against putting it close.  Just making an observation
[18:10:32] <enebo[m]> I think the larger issue is in evaluating growth at all and figuring out what increased the size
[18:11:12] <headius> we have never tracked that much but it would be interesting to know
[18:11:42] <enebo[m]> When I have looked at it we tend to increase on native platform updates and stdlib updates
[18:11:57] <enebo[m]> our code does also increase but it is quite a bit slower
[18:12:15] <headius> the base JRuby jar has shrunk a bit in the last year or two
[18:12:27] <headius> mostly from your parser lambda change
[18:12:40] <enebo[m]> but when it does I unpack last release and then try and figure out what is different hoping (if it seems weird we changed the build and started bundling garbage)
[18:12:56] <headius> at least we know we won't accidentally ship a 100MB tarball
[18:13:24] <enebo[m]> yeah it is part of why I am not against it.
[18:13:29] <headius> I restarted the jnr PR but it may still be stale and I don't feel like wrestling with the cache
[18:14:05] <headius> if it fires before the artifact is present it will cache that failure for like 24h
[18:16:10] <enebo[m]> I clicked on one run and it is actively running tests 
[18:16:13] <enebo[m]> I think it must have cleared
[18:18:41] <headius> yay
[18:31:59] <headius> JNR PR is green other than the azure jobs that have been failing for a while
[18:32:18] <headius> I should just remove those on the 9.2 branch
[18:32:35] <headius> we have moved away on master and could add a GitHub or Travis job for Windows
[19:22:38] <enebo[m]> headius: I think we are in agreement to ship newer openssl for 9.2 as well?
[19:25:13] <headius> enebo yeah
[19:25:26] <enebo[m]> ok I will merge that as well
[19:26:04] <enebo[m]> headius: one other one : https://github.com/jruby/jruby/pull/6889
[19:26:10] <enebo[m]> this is for 9.3
[19:33:24] <danieljrubyquest> Hi all! Regarding my message yesterday about getting an `NoMethodError` calling map on a Java `Java::JavaUtil::Collections::UnmodifiableRandomAccessList`: looking at `class.ancestors` before and after the upgrade from 9.2.19 to 9.3.1, I notice that `Enumerable` is part of the ancestor chain in 9.3.1 but not 9.2.19. Is that a recent change? And did this work via some method other than mixing in `Enumerable` previously?
[19:34:10] <danieljrubyquest> Ancestor chain in 9.3.1:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/82a4d45ce2d569879ccc4728eb81eb03e76d3e01)
[19:34:46] <headius> hmm ok
[19:36:03] <headius> danieljrubyquestionasker:  what Java version are you running?
[19:37:09] <danieljrubyquest> I'm confused by why the version *without* Enumerable is the one that allows map to be called -- seems backward in my mind but not familiar with how this works internally.
[19:37:09] <danieljrubyquest> I'm running Java 11.0.9
[19:37:28] <headius> yeah that is backward to me too
[19:37:45] <headius> ok, I am trying to get an instance of this class locally
[19:38:10] <headius> I am thinking something in that hierarchy also defines a "map" and it is interfering with this dispatch
[19:38:40] <headius> like some private or protected "map" function on one of the Java classes that overrides the one from Enumerable
[19:39:11] <headius> you could print out object.class.instance_methods to see if map might still be there but not public
[19:40:35] <danieljrubyquest> Good point, thanks! Will do. Will take a minute (I am unfortunately dealing with a system I can only run in CI atm so have to wait for a build :thisisfine:)
[19:40:41] <headius> it does appear to work for me on JRuby master:
[19:40:44] * headius sent a code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/460dc392586a149be25e04d9f686cf617d1b725f
[19:41:11] <headius> oh duh it won't print because it is empty
[19:41:12] <headius> but no error
[19:41:41] <headius> does that command line above error for you?
[19:48:12] <danieljrubyquest> That command doesn't error for me. But also the ancestor list is different from what I have in my service:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/af8bcc853db29c9844ba87b0775c252c92787db0)
[19:49:06] <danieljrubyquest> So maybe this is an issue with some other mixins that are happening to the list somewhere?
[19:53:25] <danieljrubyquest> Working on printing out the instance methods
[19:55:43] <danieljrubyquest> But looking up those extra modules, I do not believe any of them should be messing with map...
[19:56:21] <headius> since the example I gave works then we can assume it is likely caused by the other classes in the hierarchy
[19:56:36] <headius> I agree though none of those look suspicious
[19:57:26] <headius> if you could come up with a way to reproduce locally it would be a big help... right now I don't have much to go on
[19:57:48] <danieljrubyquest> Makes sense. Thanks for your help with not a lot to work with!
[19:58:45] <headius> it would be pretty weird for some Ruby library to remove or hide `map` so there could be something broken in JRuby with refinements or prepends or something
[19:59:02] <headius> some complicated hierarchy that results in us not seeing the method anymore
[20:02:03] <headius> danieljrubyquestionasker: a full error backtrace would be good too... if you like, open a bug so we can track discussion better
[20:02:06] <headius> if it turns out not to be a bug, no big deal
[20:02:34] <headius> the fact that it works in 9.2 makes me assume we regressed in some way
[20:52:25] <danieljrubyquest> Thanks! I should also mention that separately from this (or maybe related?) the rspec tests for our JRuby service are hitting an OOM error after the upgrade, and still do so even if I double the memory from what they have used historically
[23:18:41] <headius> danieljrubyquestionasker: that definitely should go in a bug report
[23:19:05] <headius> we can offer you some guidance investigating what is taking up so much memory
[23:19:26] <headius> you already took the first step we'd suggest so if double the memory doesn't work there's something wrong
[23:48:01] <headius> enebo: looking over diffs from the merge
[23:48:15] <headius> nothing jumping out so far but the install4j file gained some ^M
[23:48:29] <headius> pretty much the whole file
[23:49:14] <headius> sorry this is actually diffing master against the WIP branch
[23:49:23] <headius> so it could be a recent change on master that brought in the ^M
[23:50:09] <headius> a couple gems that go away in 3 returned too so I will remove those
[23:51:49] <enebo[m]> yeah as I said there was virtually nothing in the merge which was a conflict
[23:52:03] <headius> yeah looks pretty good
