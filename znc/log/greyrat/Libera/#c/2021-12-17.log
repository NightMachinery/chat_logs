[00:01:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:04:13] *** Quits: strajder (~strajder@user/strajder) (Quit: leaving)
[00:04:49] *** Joins: terminalpusher (~terminalp@2a01:586:9b10:1:626f:27f9:f54e:e6c6)
[00:06:17] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 240 seconds)
[00:07:48] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[00:08:27] *** Joins: arinov (~arinov@213.194.126.155)
[00:08:28] *** Joins: gothicserpent (~gothicser@204.152.215.249)
[00:08:55] *** Quits: mahmutov (~mahmutov@37.155.62.65) (Ping timeout: 268 seconds)
[00:11:28] *** Joins: Everything (~Everythin@37.115.210.35)
[00:11:57] <Everything> Hi all. What are your favorite pure C projects that can be used as a good/mature role models?
[00:13:52] *** Quits: terminalpusher (~terminalp@2a01:586:9b10:1:626f:27f9:f54e:e6c6) (Remote host closed the connection)
[00:14:44] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 252 seconds)
[00:15:43] *** Joins: Macuser (~Macuser@72.sub-174-206-112.myvzw.com)
[00:18:38] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[00:20:51] *** Joins: kish` (~sid742412@user/aqua)
[00:22:01] <apotheon> maybe OpenBSD's POSIX userland stuff
[00:22:08] <apotheon> s/POSIX/POSIXy/
[00:23:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:23:38] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[00:24:04] <Everything> apotheon: thanks for the comment
[00:29:24] <constxd> Everything: plan9
[00:30:55] <constxd> sqlite3
[00:31:24] <Everything> constxd: thanks
[00:32:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[00:32:48] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[00:32:51] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Read error: Connection reset by peer)
[00:33:06] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[00:34:47] *** Inline__ is now known as Inline
[00:34:56] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[00:38:08] *** Joins: soul-d (~uknown@user/soul-d)
[00:39:19] *** Joins: Torr (~Torr@user/torr)
[00:40:44] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:42:01] *** Joins: vuks_ (~Vuks69@87-206-7-209.dynamic.chello.pl)
[00:43:00] *** Joins: Viewday112 (~Viewday@user/viewday)
[00:43:09] *** Quits: vuks_ (~Vuks69@87-206-7-209.dynamic.chello.pl) (Remote host closed the connection)
[00:43:15] *** Quits: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl) (Quit: Leaving)
[00:43:38] *** Joins: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl)
[00:44:57] *** Quits: Viewday11 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[00:44:57] *** Viewday112 is now known as Viewday11
[00:45:31] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[00:45:40] <oldlaptop> Plan 9 is not, as I understand it, "pure C" in the sense that what it is written in is not standard C
[00:46:02] <oldlaptop> (which is not to say that there's anything wrong with that, or with it)
[00:47:05] <constxd> then neither is OpenBSD
[00:48:32] <oldlaptop> I'm not talking about a gccism here or there, IIRC plan 9 is written in a sufficiently different "dialect" as to require plan 9's (own, special) compiler
[00:49:05] <oldlaptop> (openbsd ships two completely different compilers for different machines at present, though naturally clang has had to support some gccisms)
[00:49:48] <apotheon> Yeah, OpenBSD is capable of being compiled by either GCC or Clang, and my impression is that it wouldn't take much to make it compile with the Plan9 compiler; it's port-able-ish between compilers.
[00:50:34] <constxd> yes but "OpenBSD's POSIX userland stuff" is clearly not standard C -- it's right there in the name
[00:50:35] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:50:41] <apotheon> . . . which is better than most C projects of *really* significant size.
[00:50:57] <oldlaptop> constxd: It is stuff that implements a POSIX userland
[00:51:01] <apotheon> constxd: OpenBSD's as in "used in the base system".
[00:51:08] *** Joins: Kev_ (~Kev@2a01cb0400149f00f09c65fa9ca53088.ipv6.abo.wanadoo.fr)
[00:51:19] <constxd> oldlaptop: yes, by using POSIX library functions
[00:51:55] <oldlaptop> which are, themselves, part of OpenBSD's POSIX userland stuff, written in (mostly) C (with assembler versions of things like strcpy() or whatever for some machines)
[00:52:44] <apotheon> constxd: What does using POSIX library functions have to do with being portable to different compilers?
[00:52:52] <oldlaptop> as opposed to Plan 9 C, which is this different from C: http://man.cat-v.org/plan_9/1/8c
[00:52:55] <candide> Title of oldlaptop's link: 8c page from Section 1 of the plan 9 manual
[00:53:41] <apotheon> constxd: Are you arguing that no libraries should be allowed if you're going to call the language used "C"?
[00:53:54] <apotheon> I'm pretty sure that's not what Everything was asking.
[00:54:28] <constxd> lmao
[00:54:40] <apotheon> My impression is that Everything was asking for "C, and only C, not C++ or Java or Lua or whatever".
[00:54:41] <constxd> i didn't object to your suggestion
[00:54:56] <apotheon> 14:20 < constxd> yes but "OpenBSD's POSIX userland stuff" is clearly not standard C -- it's right there in the name
[00:54:59] <apotheon> What does that mean?
[00:56:00] <constxd> i'm applying the "not standard C" argument to your OpenBSD suggestion to try to illustrate why it doesn't make sense
[00:56:44] <constxd> i think Plan9's and OpenBSD's /cmd or /bin are good places to look for nice C code
[00:57:00] <oldlaptop> constxd: There is a difference in kind: Plan 9 is written in a language with syntactic extensions compared to C. Library functions have nothing to do with that.
[00:57:04] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[00:57:23] <oldlaptop> This doesn't make it bad code by any means, but it's definitely something someone reading it as a role model should be aware of.
[00:57:33] <constxd> doesn't matter if it's a library function or a language extension -- it's still not a part of the C standard
[00:57:54] <apotheon> constxd: What doesn't make sense?  I'm confused about your point.
[00:59:11] <apotheon> Are you saying that people should only use projects that don't use anything not mentioned in the standard itself -- thus never using any libraries that aren't strict stdlib -- as examples of good code when learning?
[00:59:14] <constxd> if you go read that man page, literally all of that is standard C now except for the { .x 5 } syntax (which is just one byte away from being standard C)
[00:59:27] <constxd> apotheon: no i'm saying that would be stupid
[00:59:35] <oldlaptop> (I don't remember the indexed array initializers going in offhand.)
[00:59:42] <apotheon> What's the objection to OpenBSD's userland, then?
[00:59:46] <apotheon> I'm even more confused now.
[00:59:51] <constxd> there is none
[01:00:24] <constxd> ,cc -std=c11 int a[10] = { [4] = 12 }; for (int i = 0; i < 10; ++i) printf("%d ", a[i]);
[01:00:26] <apotheon> Please explain what your "not standard C" statement means.
[01:00:26] <candide> constxd: 0 0 0 0 12 0 0 0 0 0
[01:00:43] <apotheon> I have been left with zero idea why you said that at all now.
[01:00:57] <apotheon> let alone what it's supposed to mean
[01:01:28] <constxd> apotheon: oldlaptop said Plan9 doesn't count because it's not "standard C". I was just pointing out that say, OpenBSD's sh would also not count as "standard C".
[01:01:45] <apotheon> How does OpenBSD's sh not count?
[01:02:06] <constxd> Because it uses things like fork()
[01:02:11] <oldlaptop> apotheon: The argument is that using Plan 9's language extensions is, somehow, no different from using fork() or strlcpy().
[01:02:21] <apotheon> fork() is just a library
[01:02:35] <constxd> Yes a non-standard library function
[01:02:43] <apotheon> That seems to suggest that including a header file makes your code not "standard C".
[01:03:09] <apotheon> You can't even write your own libraries for the project and still call it "standard C" by that measure.
[01:03:28] <constxd> Yes you can because they are a part of the project
[01:03:39] *** Quits: monkey_ (~user@181.114.17.106) (Ping timeout: 256 seconds)
[01:03:50] <apotheon> I'd call it "standard C" as long as none of the code included compiles on a strictly conforming compiler.
[01:03:57] <apotheon> s/none/all/
[01:03:58] <apotheon> damn it
[01:04:07] <constxd> Ok
[01:04:15] <constxd> Don't read Plan 9 then
[01:04:28] <apotheon> The C is thus standard.
[01:04:36] <constxd> Those extremely radical language extensions make it impossible for anything you learn to carry over to standard C
[01:04:52] <constxd> Better to treat is an entirely different language
[01:04:54] <oldlaptop> Wow, that strawman is, like, a smoking pile of ashes.
[01:04:58] <oldlaptop> Cool.
[01:05:09] <apotheon> There's no reason to not read Plan 9; it's just important to recognize the caveats, given that the divergences from the standard are compiler-specific *and* it's not even a very popular compiler.
[01:05:10] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:05:56] <constxd> Would you say that projects using GNU extensions are not C?
[01:06:00] <apotheon> I don't even see how that recommendation that one be aware of caveats is controversial.
[01:06:16] <apotheon> GNU-specific extensions?  Yeah, those aren't C.
[01:06:29] <apotheon> They're GNU C, a slightly different language.
[01:06:56] <oldlaptop> And definitely important to consider while reading, say, linux (or some other widely-deployed thing that needs gcc or a gcc-clone compiler)
[01:07:09] <apotheon> more similar than C++; probably even more similar than ObjC, though I don't plan to bet money on that
[01:07:18] <apotheon> oldlaptop: right
[01:07:19] <constxd> Yeah linux isn't written in C
[01:08:06] *** Joins: monkey_ (~user@181.114.17.106)
[01:08:07] <apotheon> I hate the GNU Make situation.
[01:08:22] <oldlaptop> This whole steaming pile of bullshit proceeds from an observation that "pure C" might not be a phrase that accomodates significant and pervasive language extensions.
[01:08:38] *** Joins: PortableDave (~portabled@118.210.56.9)
[01:08:42] <constxd> significant and pervasive LMAO
[01:08:43] <apotheon> It's probably both the most-used Make language *and* the *only* Make language that is compatible with GNU Make.
[01:09:59] <apotheon> oldlaptop: Given a reasonable interpretation of the question, I just took "pure C" to mean "compiler-portable C without other languages (like C++) mixed in".
[01:10:05] <apotheon> I try to interpret things reasonably.
[01:10:57] *** Joins: System_Error (~SystemErr@user/systemerror)
[01:11:07] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:11:36] <apotheon> In short, I translated "pure C" as "only C", not "hand-compiling source code to assembly according to the standard".
[01:12:14] <apotheon> . . . and if your library is written in C, I'll count that as "C".
[01:13:47] *** Joins: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net)
[01:14:12] *** Quits: cousteau (~cousteau@user/cousteau) (Quit: ♫ I can't forget the day I shot that network down ♫)
[01:14:37] *** Quits: constxd (~brad@192.75.101.164) (Ping timeout: 240 seconds)
[01:14:48] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[01:16:15] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Read error: Connection reset by peer)
[01:17:01] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[01:17:06] *** Joins: brad_mssw (~bhouse@172.110.173.1)
[01:17:26] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Ping timeout: 252 seconds)
[01:20:59] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:24:58] *** Quits: Kev_ (~Kev@2a01cb0400149f00f09c65fa9ca53088.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[01:25:25] *** Joins: k0tyk[m] (~k0tykmatr@2001:470:69fc:105::1:511a)
[01:27:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 256 seconds)
[01:29:17] *** Quits: alch (~alch@mi-18-17-239.service.infuturo.it) (Ping timeout: 240 seconds)
[01:31:24] *** Joins: alch (~alch@151.82.89.150)
[01:31:39] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[01:31:52] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:32:21] *** Joins: constxd (~brad@192.75.101.164)
[01:36:40] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[01:40:40] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:44:27] *** Quits: brad_mssw (~bhouse@172.110.173.1) (Ping timeout: 256 seconds)
[01:44:29] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[01:46:22] <floatcomplex> "linux isn't written in c" is an asinine statement
[01:46:27] <floatcomplex> it's not fortran
[01:48:27] *** Quits: constxd (~brad@192.75.101.164) (Quit: WeeChat 2.8)
[01:48:38] *** Quits: digilink (~digilink@user/digilink) (Quit: WeeChat 3.3)
[01:49:10] *** Joins: digilink (~digilink@user/digilink)
[01:49:42] <System_Error> Linux not written in C? Oh srsly?
[01:49:44] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:50:41] *** Quits: inlight (~inlight@user/inlight) (Remote host closed the connection)
[01:51:05] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:51:39] <Maxdamantus> Most of it is C. There's also some code depending on certain compilers, which is arguably not C. There's also some assembly code.
[01:53:22] <Maxdamantus> In a lot of cases, you could probably take some source file from Linux, provide some alternative header files for it, and compile it using any standard compiler.
[01:56:00] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:56:01] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[01:57:36] *** Joins: Charadon (~Charadon@155.138.164.183)
[02:00:00] <System_Error> There was some bits of asm, also maybe extensions. But wast majority is still C.
[02:00:21] <twkm> it is mostly gnu c, so not quite c but not quite not c.
[02:00:24] <System_Error> As for "Standard compiler" - good luck compiling boot loaders, kernels and so on "standard" compiler.
[02:01:33] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[02:02:31] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[02:02:47] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[02:03:12] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Remote host closed the connection)
[02:03:22] *** Joins: pulse (~pulse@user/pulse)
[02:03:37] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[02:04:35] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[02:04:37] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[02:07:26] *** Quits: Kit (~u0_a391@2600:380:bc52:ebbd:3fe3:3b25:a9ee:d19f) (Ping timeout: 245 seconds)
[02:08:18] <floatcomplex> saying it's not c because it needs a certain compiler is like saying a pen can't write in latin because it depends on ink
[02:09:28] <System_Error> C99 added freestanding but it like half way there. Say how does one puts X to section Y standard way?
[02:11:26] *** Joins: seninha (~seninha@user/seninha)
[02:11:38] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Quit: Leaving)
[02:12:02] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Remote host closed the connection)
[02:12:17] *** Joins: Itaru (~Itaru@ro2.flokinet.is)
[02:15:13] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[02:17:37] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[02:19:34] *** Joins: fbiagent__ (~fbiagent@user/fbiagent)
[02:19:37] *** Quits: fbiagent (~fbiagent@user/fbiagent) (Ping timeout: 240 seconds)
[02:20:54] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:21:48] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.3)
[02:22:02] *** Joins: arinov (~arinov@213.194.126.155)
[02:22:25] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Ping timeout: 256 seconds)
[02:22:51] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:23:04] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[02:30:31] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Quit: Leaving)
[02:30:45] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[02:32:16] *** Quits: chomwitt (~chomwitt@2a02:587:dc19:a500:12c3:7bff:fe6d:d374) (Remote host closed the connection)
[02:33:45] *** Quits: pizdets (~pizdets@183.182.110.46) (Ping timeout: 256 seconds)
[02:34:11] *** Joins: pizdets_ (~pizdets@183.182.111.251)
[02:35:50] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[02:35:58] *** Joins: constxd (~brad@TA9CB.WPA.Dal.Ca)
[02:38:42] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[02:40:41] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[02:42:12] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[02:42:51] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[02:44:38] *** Quits: magla (~gelignite@55d46610.access.ecotel.net) (Quit: Stay safe!)
[02:44:42] *** Joins: kuber (~kuber@97-113-156-194.tukw.qwest.net)
[02:46:48] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[02:49:03] *** Joins: soapsudsxx (~soapsudsx@141.193.188.143)
[02:49:14] *** Quits: kuber (~kuber@97-113-156-194.tukw.qwest.net) (Client Quit)
[02:53:18] *** Joins: kuoi (~kuoi@109.175.166.57)
[02:58:55] *** Quits: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[02:59:02] *** Quits: constxd (~brad@TA9CB.WPA.Dal.Ca) (Ping timeout: 240 seconds)
[02:59:07] *** Joins: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[03:00:01] *** Quits: nyah (~nyah@94.6.71.219) (Remote host closed the connection)
[03:03:24] *** Joins: ferdna (~ferdna@user/ferdna)
[03:03:51] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:05:36] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[03:07:37] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 240 seconds)
[03:08:17] *** u0_a391 is now known as Kit
[03:09:12] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:09:31] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[03:10:15] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[03:13:02] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[03:16:23] *** Quits: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[03:18:25] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:18:52] *** Joins: u0_a391 (~u0_a391@2600:380:bc52:ebbd:4abf:2d2b:bd7d:6b1d)
[03:19:28] *** Quits: bolovanos_ (~bolovanos@user/bolovanos) (Quit: Leaving)
[03:22:17] *** Quits: Kit (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:23:03] *** u0_a391 is now known as Kit
[03:24:09] *** Joins: shivesh (~shivesh@user/shivesh)
[03:25:53] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[03:26:29] *** Quits: Akuli (~Akuli@213.216.209.28) (Quit: Akuli)
[03:30:15] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[03:31:02] *** Joins: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[03:36:07] *** Joins: katnis (uid15849@id-15849.helmsley.irccloud.com)
[03:37:53] *** Joins: bebyx (~Thunderbi@user/bebyx)
[03:40:59] *** Quits: Kit (~u0_a391@2600:380:bc52:ebbd:4abf:2d2b:bd7d:6b1d) (Ping timeout: 252 seconds)
[03:43:15] *** Joins: Kit (~u0_a391@2600:380:8a56:412c:5c34:42cb:a755:e49b)
[03:44:56] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.41)
[03:44:57] *** Quits: Itaru (~Itaru@ro2.flokinet.is) (Ping timeout: 240 seconds)
[03:44:57] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:47:04] *** Joins: Wulf (~Wulf@user/wulf)
[03:48:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:48:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:48:32] *** Joins: wroathe (~wroathe@user/wroathe)
[03:48:33] *** Quits: boB_K7IQ (~boB_K7IQ@152.44.147.180) (Ping timeout: 256 seconds)
[03:51:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:53:02] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[03:53:41] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[03:55:06] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.41) (Read error: Connection reset by peer)
[03:58:17] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.41)
[04:02:37] *** Quits: PortableDave (~portabled@118.210.56.9) (Ping timeout: 240 seconds)
[04:04:32] <poprocks> soon the whole kernel will be rewritten in Rust
[04:04:41] *** Joins: PortableDave (~portabled@118.210.56.9)
[04:05:06] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[04:05:19] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[04:07:56] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Ping timeout: 252 seconds)
[04:07:57] *** Joins: elPuma (~elPuma@2600:1700:40b0:7830:6b12:bad0:527b:af99)
[04:08:17] *** Quits: nitrix (~nitrix@user/nitrix) (Quit: Genius is one percent inspiration and ninety-nine percent perspiration)
[04:09:06] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:11:40] <wroathe> poprocks: which kernel
[04:11:42] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[04:12:15] *** Joins: nitrix (~nitrix@user/nitrix)
[04:14:11] *** Joins: nostar (~nostar@68.51.221.108)
[04:16:03] <ioxzev1z> wroathe, Linux
[04:16:43] *** Quits: coruja (~coruja@user/coruja) (Quit: ZNC 1.8.2 - https://znc.in)
[04:16:53] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 256 seconds)
[04:19:32] *** Joins: coruja (~coruja@user/coruja)
[04:19:36] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.41) (Read error: Connection reset by peer)
[04:21:51] *** Quits: SymbioticFemale (~Symbiotic@user/SymbioticFemale) (Ping timeout: 276 seconds)
[04:23:14] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 260 seconds)
[04:23:49] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[04:25:28] *** Joins: sol-86 (~paulo@2a02:c7f:44e3:8e00:8d6d:7e79:f69b:8b60)
[04:25:54] <trenka> poprocks: the ultimate goal is to rewrite it in BPF
[04:27:07] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.41)
[04:27:22] *** Quits: fbiagent__ (~fbiagent@user/fbiagent) (Quit: Leaving)
[04:27:42] *** Joins: jmiehe (~Thunderbi@user/jmiehe)
[04:27:57] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[04:28:45] *** Joins: zat (~zat@191.23.60.220)
[04:29:18] <floatcomplex> lol
[04:29:35] <poprocks> I think it should be rewritten in `whitespace`
[04:30:12] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:30:16] <floatcomplex> a sufficiently pervasive rust environment would have to include a c interpreter to do anything useful, and then where would we be
[04:30:27] *** Parts: sol-86 (~paulo@2a02:c7f:44e3:8e00:8d6d:7e79:f69b:8b60) ()
[04:31:04] <poprocks> hmm... rewriting the C interpreter in Rust!!
[04:31:54] <twkm> System_Error: freestanding existed in c89.
[04:33:25] <wroathe> floatcomplex: Why would it need a C interpreter? 
[04:33:39] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.41) (Read error: Connection reset by peer)
[04:34:04] <poprocks> because.... rust.... is.... amazing!! (head explodes)
[04:34:10] <wroathe> Surely you could write a kernel in just pure Rust. Heck, you could (and probably should) write one in APL too
[04:34:23] <fbiagent> why would you write one in APL
[04:34:33] <wroathe> Why wouldn't you write one in APL 
[04:36:20] *** Joins: dohtem (uid524096@user/dohtem)
[04:41:29] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[04:43:03] *** Joins: arinov (~arinov@213.194.126.155)
[04:44:27] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:44:56] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[04:45:19] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[04:46:08] *** Joins: seninha (~seninha@user/seninha)
[04:48:11] <Thedarkb1-Deskto> I think I've found an issue with GCC's codegen.
[04:48:37] <Thedarkb1-Deskto> I'm cross compiling to arm7 and I'm getting illegal half word writes when I attempt to increment or perform bitwise ops on an unsigned short.
[04:49:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 268 seconds)
[04:49:59] <floatcomplex> possibly specifying the wrong arm target
[04:50:17] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 252 seconds)
[04:50:21] <floatcomplex> there is an option that makes it only do aligned access even on the newer targets though
[04:50:24] <floatcomplex> try that
[04:50:51] <Kit> does anybody know how i can authenticate git for github without gh cli
[04:51:03] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:51:11] <Kit> gh cli wont run on my pc and i cant compile it fsr
[04:51:17] <Kit> well
[04:51:34] <Kit> golang wont run on my pc
[04:51:50] <fizzie> Just upload a SSH key on the website? 
[04:52:22] <Kit> oh.
[04:52:30] <Kit> forgot about that.
[04:52:46] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[04:52:48] <Kit> thanks, ill see if i can do something with that
[04:53:03] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[04:53:11] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[04:53:13] <Kit> sorry for wasting your time
[04:53:51] * wroathe feels that his time has been wasted 
[04:54:17] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 256 seconds)
[04:56:02] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[04:56:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:56:56] <Thedarkb1-Deskto> Nevermind, I'm a dumbarse and I fucked up my linker script and was trying to write to ROM.
[04:58:12] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[05:00:00] *** Quits: ormaaj (~ormaaj@user/ormaaj) (Quit: Reconnecting)
[05:00:16] *** Joins: malloy (~jimery@116.30.221.255)
[05:00:43] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[05:01:26] <Thedarkb1-Deskto> I only got this far because GCC was kind enough to put all of my previous variables in registers.
[05:02:57] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[05:04:29] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.41)
[05:04:42] *** Joins: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5)
[05:05:20] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.41) (Read error: Connection reset by peer)
[05:05:59] <SrPx> I think this is a noob question but
[05:06:00] <SrPx> https://stackoverflow.com/questions/70387351/is-it-possible-to-dynamically-load-new-functions-to-a-running-c-program
[05:07:08] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[05:07:13] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[05:12:35] <trenka> SrPx: the link has both question and the answer
[05:13:09] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[05:13:26] <SrPx> trenka: "Another way, similar but perhaps more primitive, would be to compile the code into an object file and then load it into a mmaped region with execution permissions, jumping then to it using a function pointer."
[05:13:34] *** Quits: zat (~zat@191.23.60.220) (Remote host closed the connection)
[05:13:48] <SrPx> just wondering if anyone has more information about that in particular
[05:13:56] *** Parts: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5) ()
[05:13:56] *** Joins: zat (~zat@191.23.60.220)
[05:13:57] *** Joins: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5)
[05:14:06] <wroathe> SrPx: You can link pre-compiled functions into the current process image with a dynamic linker, or you could write either a just-in-time compiler on interpreter that takes code as input at runtime and interprets it into executable instructions
[05:14:22] <System_Error> <twkm> System_Error: freestanding existed in c89. <- IIRC freestanding got standardized in C99...
[05:14:40] <System_Error> tho they forgot plenty of important stuff anyway
[05:15:03] <SrPx> specifically,  how do I "load an object file into a mmaped region with execution permissions"?
[05:15:41] <wroathe> SrPx: That second option he described is exactly what dlopen already does 
[05:15:51] <System_Error>  was trying to write to ROM. <- On cortexM it often warrants like HardFault :P
[05:15:56] <wroathe> SrPx: You'd just be reinventing that wheel, but with a much much simpler mechanism 
[05:16:07] <SrPx> I see. Okay, then, makes sense. I'll just stick to dlopen. Thanks :)
[05:19:59] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 252 seconds)
[05:20:37] <Thedarkb1-Deskto> Yeah, I've put in my linker script for .data to go in iwram, but for some reason it still wants to write to ROM
[05:20:41] *** Quits: Macuser (~Macuser@72.sub-174-206-112.myvzw.com) (Quit: Textual IRC Client: www.textualapp.com)
[05:21:48] *** Quits: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5) (Remote host closed the connection)
[05:22:21] *** Joins: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5)
[05:22:37] * Thedarkb1-Deskto hardcodes a pointer to IWRAM
[05:22:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[05:22:53] <Thedarkb1-Deskto> Fixing my linker script can wait until it's not 2am
[05:23:03] <wroathe> Thedarkb1-Deskto: Quitter
[05:23:14] <System_Error> Thedarkb1-Deskto: There're different kinds of data. RODATA may live in ROM. But RW data have to be in ROM but moved to RAM.
[05:23:23] *** Joins: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com)
[05:23:44] <System_Error> This means there're 2 addresses: one where you store it, other where you move it. And its up to startup to place RW DATA properly
[05:24:09] <Thedarkb1-Deskto> My startup at the moment is just a GBA ROM header and a branch to main.
[05:24:18] *** Quits: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5) (Remote host closed the connection)
[05:24:30] *** Joins: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5)
[05:24:35] <System_Error> Thedarkb1-Deskto: hmm... you dont have normal startup, and just enter function?
[05:24:44] <Thedarkb1-Deskto> For the time being.
[05:25:00] <System_Error> and if so, you want to do at least data move/bss init.
[05:25:02] *** Parts: joe_ (~joe_@2601:84:4501:6440:9085:8681:e196:8dd5) ()
[05:25:37] <System_Error> Before this point... it "sorta works" to some extent, even maybe in C, but its not a proper C arena
[05:26:21] <Thedarkb1-Deskto> Yeah, I've never tried anything like this in C before.
[05:26:27] <System_Error> I once had that quite funny, like variables surviving reset, etc. Because there was nobody to zero bss, etc.
[05:26:53] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:26:59] <System_Error> But its failing C assumption about environment actually, and is quite a bug.
[05:27:01] *** Quits: Kit (~u0_a391@2600:380:8a56:412c:5c34:42cb:a755:e49b) (Ping timeout: 240 seconds)
[05:27:17] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 240 seconds)
[05:28:07] <mcf> SrPx: you could take a look at https://github.com/spencertipping/jit-tutorial#jit-mechanics for an example of how to use mmap with PROT_EXEC in the context of a jit compiler
[05:28:08] <candide> Title of mcf's link: GitHub - spencertipping/jit-tutorial: How to write a very simple JIT compiler
[05:29:43] *** Joins: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it)
[05:29:46] *** Quits: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch) (Remote host closed the connection)
[05:29:55] *** Quits: emanuele6 (~emanuele6@net-93-71-98-153.cust.vodafonedsl.it) (Changing host)
[05:29:55] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[05:30:08] *** Joins: pflanze (~pflanze@5-168-208-80-pool.fiber.fcom.ch)
[05:31:32] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 252 seconds)
[05:31:39] <Thedarkb1-Deskto> The fuck, the variable's gone in the text section!
[05:31:48] *** Quits: alch (~alch@151.82.89.150) (Ping timeout: 240 seconds)
[05:31:58] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[05:32:53] *** Joins: alch (~alch@to-18-69-225.service.infuturo.it)
[05:33:08] <twkm> System_Error: you are mistaken re freestanding.
[05:34:26] <floatcomplex> the highest four bytes of physical ram can pretty reliably be counted on to survive a reset, and the uf2 bootloader exploits this to tell the difference between single and double clicking the reset button
[05:35:10] <SrPx> mcf: reading that repository, awesome readme, thank you. So the way it would work is we'd generate the machine code in memory and then jump to it. I didn't know you could do that. Interesting
[05:35:51] <twkm> it might not be possible.
[05:36:00] <SrPx> About the dlopen, I'm doing something wrong. I've build a simple file with an `int dn(int x)` function, compiled it as `clang -shared fn.o -o fn.so`, and then loaded it like `int (*fn)(int) = dlopen("./fn.so", RTLD_LOCAL | RTLD_LAZY);`. But calling it with `fn(5)` causes a segfault. Am I missing something?
[05:36:13] <SrPx> `int fn(int x)` *
[05:36:15] <Thedarkb1-Deskto> The page needs to be marked as executable though on a modern Intel chip.
[05:36:24] <Thedarkb1-Deskto> If you're generating code in memory.
[05:36:49] <floatcomplex> i wouldn't count on it working elsewhere either
[05:37:40] <dave0> SrPx: dlopen returns a cookie ... you want dlsym to find your function
[05:37:52] <mcf> SrPx: dlopen just gives an opaque handle to the fn.so object. you need to use dlsym(handle, "dl") to get at the dl symbol
[05:37:54] <SrPx> oh
[05:38:39] <System_Error> twkm: interesting. For some reason I've been sure it got standardized at C99 point.
[05:39:03] <mcf> *dn symbol
[05:39:31] <System_Error> <floatcomplex> the highest four bytes of physical ram can pretty reliably be counted on to survive a reset <- It depends on environment/memmap/etc.
[05:39:58] <fizzie> Freestanding implementations "getting standardized" in C99 might be a reference to how in C89 there were no requirements what library facilities a freestanding implementation needs to provide, but C99 added a minimal set of headers that must be present (mostly new ones in C99).
[05:39:59] <SrPx> thanks, got it to work
[05:40:01] <SrPx> yaaay :)
[05:40:03] <SrPx> thanks thanks <3
[05:40:33] <System_Error> And if I'll need that it good idea to just explicitly free some area of RAM of sections, that way C wouldnt touch it. Except maybe if you deref pointer manually.
[05:40:59] *** Quits: vuks (~Vuks69@87-206-7-209.dynamic.chello.pl) (Read error: Connection reset by peer)
[05:41:17] <Thedarkb1-Deskto> I think it's sorted now.
[05:49:18] *** Joins: joe_ (~joe_@2601:84:4501:6440:f5b7:9c60:e564:c617)
[05:49:46] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:50:34] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 268 seconds)
[05:52:29] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[05:53:17] *** Quits: joe_ (~joe_@2601:84:4501:6440:f5b7:9c60:e564:c617) (Ping timeout: 240 seconds)
[05:53:21] <System_Error> twkm: I've DLed C89 standard and somehow found it had freestanding, too. So you're right abouf freestandng, interestingly.
[05:54:20] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[05:57:57] *** Quits: earnestly (~earnest@user/earnestly) (Ping timeout: 240 seconds)
[05:58:14] *** Joins: joe_ (~joe_@2601:84:4501:6440:f5b7:9c60:e564:c617)
[05:58:57] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: This computer has gone to sleep)
[06:00:46] *** Quits: Dreg (~Dreg@fr33project.org) (Read error: Connection reset by peer)
[06:01:15] *** Joins: Dreg (~Dreg@fr33project.org)
[06:02:26] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[06:03:28] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[06:03:43] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[06:03:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[06:04:06] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[06:05:03] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[06:05:53] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[06:06:44] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[06:07:01] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:07:20] *** Quits: joe_ (~joe_@2601:84:4501:6440:f5b7:9c60:e564:c617) ()
[06:08:34] *** Joins: highrate (~presonic@111-22-237-24.gci.net)
[06:09:06] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[06:09:39] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 256 seconds)
[06:12:54] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[06:19:29] <SrPx> as usual, complete answer in case anyone asks the same question in a future: https://stackoverflow.com/questions/70387351/is-it-possible-to-dynamically-load-new-functions-to-a-running-c-program?noredirect=1#comment124424079_70387351
[06:20:18] <SrPx> cheers
[06:20:25] *** Quits: celphi (sid97751@user/celphi) (Ping timeout: 256 seconds)
[06:20:37] *** Quits: kurahaupo (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[06:20:50] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[06:21:58] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[06:22:47] <Thedarkb1-Deskto> Changing between thumb and arm changes program behaviour.
[06:22:48] <Thedarkb1-Deskto> Classic
[06:23:08] *** Joins: bsdbandit01 (~bsdbandit@172.58.189.41)
[06:23:12] <pragma-> well, they're completely different body parts
[06:23:36] <wroathe> But the thumb requires the arm 
[06:24:01] *** Joins: celphi (sid97751@user/celphi)
[06:24:18] <pragma-> some thumbs just need an arse
[06:24:19] <Thedarkb1-Deskto> Thumb code should be faster because the cartridge is only connected via a 16 bit bus, but execution somehow escapes a while(1) loop when I compile with it.
[06:24:29] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[06:24:38] <wroathe> You're a 16 bit bus 
[06:24:48] <merced> no you're an 8-bit ramdac
[06:25:26] <wroathe> https://www.youtube.com/watch?v=LfGWxOW98Kg
[06:25:27] <candide> Title of wroathe's link: Ohhhhhh / MEME - YouTube
[06:26:02] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Read error: Connection reset by peer)
[06:26:11] *** Quits: glowcoil (sid3405@id-3405.tinside.irccloud.com) (Ping timeout: 245 seconds)
[06:26:13] *** Quits: ikiryo (sid109660@user/ikiryo) (Ping timeout: 240 seconds)
[06:26:32] *** Quits: snickerbockers (sid210497@id-210497.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[06:26:35] *** Quits: celphi (sid97751@user/celphi) (Max SendQ exceeded)
[06:26:44] *** Joins: celphi (sid97751@user/celphi)
[06:26:48] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[06:27:02] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 240 seconds)
[06:27:46] *** Joins: ikiryo (sid109660@user/ikiryo)
[06:27:53] *** Joins: BlueShark (sid10311@user/blueshark)
[06:28:13] *** Joins: glowcoil (sid3405@id-3405.tinside.irccloud.com)
[06:29:43] *** Joins: snickerbockers (sid210497@id-210497.ilkley.irccloud.com)
[06:31:19] *** Quits: bsdbandit01 (~bsdbandit@172.58.189.41) (Read error: Connection reset by peer)
[06:33:27] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 256 seconds)
[06:37:59] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[06:42:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[06:43:52] *** Quits: NEYi (~NEYi@109.251.216.38) (Read error: Connection reset by peer)
[06:44:02] *** Joins: fe23 (~fe23@2409:8a34:468:83d0:88c0:c7c2:e4da:1da2)
[06:45:12] *** Quits: masterbuilder (~user@user/masterbuilder) (Remote host closed the connection)
[06:47:52] *** Joins: cthi (~cthi@097-082-138-151.res.spectrum.com)
[06:49:53] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 256 seconds)
[06:50:20] *** Joins: karakedi (~eAC53C340@user/karakedi)
[06:51:06] *** Quits: kuoi (~kuoi@109.175.166.57) (Quit: kuoi)
[06:53:52] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:56:32] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[06:57:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[06:57:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[06:57:37] *** Joins: wroathe (~wroathe@user/wroathe)
[06:58:26] *** Joins: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e)
[06:58:52] *** Joins: constxd (~brad@142.134.38.68)
[06:59:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:03:38] *** Joins: mrlemke (~quassel@208.74.105.200)
[07:04:16] *** Quits: bsdbandit01 (~bsdbandit@2607:fb91:1492:eb5c:8136:9529:69d1:919e) (Read error: Connection reset by peer)
[07:08:43] *** Quits: moog (~moog@107.242.124.157) (Remote host closed the connection)
[07:12:28] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:16:01] *** Joins: frost (~frost@user/frost)
[07:18:01] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:9d20:9499:4e3c:804c)
[07:20:03] *** Joins: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net)
[07:29:19] <System_Error> wroathe> But the thumb requires the arm <- Cortex M not so sure of it and somehow lacks arm :D
[07:30:39] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[07:32:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[07:33:35] <wroathe> System_Error: I'm not prepared to take these shenanigans any further 
[07:33:37] *** Quits: u0_a391 (~u0_a391@2603-6010-a141-6fa3-88f4-4cc9-a7b6-7571.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:33:45] <wroathe> We've gone too deep
[07:34:51] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:40:16] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[07:41:05] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:43:05] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[07:45:43] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[07:48:47] *** Joins: jinsun__ (~quassel@user/jinsun)
[07:48:57] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[07:56:27] *** Joins: kuoi (~kuoi@109.175.166.57)
[07:57:12] *** Joins: Insing144 (~Insing147@78.30.38.171)
[07:58:04] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[08:00:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:02:39] *** Quits: elPuma (~elPuma@2600:1700:40b0:7830:6b12:bad0:527b:af99) (Quit: Client closed)
[08:07:14] *** Quits: mahmutov (~mahmutov@5.176.0.124) (Ping timeout: 260 seconds)
[08:09:35] *** Quits: puke (~puke@user/puke) (Quit: puke)
[08:10:19] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[08:11:09] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 268 seconds)
[08:11:09] *** jmiehe1 is now known as jmiehe
[08:17:44] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:21:13] *** ormaaj is now known as ormaaj2
[08:22:33] *** Quits: constxd (~brad@142.134.38.68) (Quit: WeeChat 3.0.1)
[08:27:38] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Leaving)
[08:32:18] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Remote host closed the connection)
[08:33:04] *** Quits: dohtem (uid524096@user/dohtem) (Quit: Connection closed for inactivity)
[08:33:15] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[08:41:33] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com)
[08:44:24] *** Quits: phineas (~farawayas@103.160.128.7) (Remote host closed the connection)
[08:45:12] *** Quits: larry87 (~quassel@c-73-6-106-85.hsd1.tx.comcast.net) (Remote host closed the connection)
[09:02:07] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 250 seconds)
[09:05:46] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:09:06] *** Joins: dohtem (uid524096@user/dohtem)
[09:09:19] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:11:28] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:13:38] <duds-> can somebody explain this to me? why would you need to suffix an integer with an L if you're already declaring it with "long"? https://litter.catbox.moe/as798i.PNG
[09:14:06] <nitrix> The literal itself isn't a long unless it's suffixed.
[09:14:10] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[09:14:45] <duds-> so when used through a variable, such as Big_Number is in the example, it wouldn't need the suffix, correct?
[09:16:52] <nitrix> It'll have the whichever closest integer type whose range includes that value. Then, the assignment will cause a conversion between the type of the literal to the type of the variable.
[09:18:40] <duds-> so using a suffix skips the approximation and assigns the explicit literal type to the variable type? sry i just want to be clear ; ;
[09:18:55] <duds-> but if so, i think i understand
[09:20:43] <nitrix> If 1287600 doesn't fit an int, it could be a long for example.
[09:20:57] *** Joins: u0_a647 (~u0_a647@198.55.124.115.adsl.inet-telecom.org)
[09:22:06] <nitrix> Remember that INT_MAX's minimum's magnitude is only guaranteed up to +32767. Implementations don't have to support integers that are larger than that.
[09:22:33] <duds-> ok that just confuses me more. so if i say "int 1287600" and it doesn't fit, it will become a long without error - even if i declare it through it? so conversely "long 100" would be an integer unless i said "long 100L"?
[09:22:34] <nitrix> So integer literals that are obviously bigger defaults to the next suitable type, like long.
[09:22:55] <nitrix> I'm explaining from the beginning to give you an understanding. Take your time.
[09:23:14] <duds-> thank you
[09:23:41] <nitrix> ,cc ptype(1287600)
[09:23:43] <candide> nitrix:  1287600 = i​nt
[09:24:44] <nitrix> This particular compiler decided to give this literal the type `int`. On platforms where `int` is too small (INT_MIN = -32767, INT_MAX +32767), it would be given a different type like long.
[09:24:54] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:24:56] <duds-> i see
[09:25:06] <duds-> but where does the suffix come in!
[09:25:26] <duds-> because alright, int->long makes sense, if it can't fit an integer. and the inverse works too (I assume), so "long 100" can actually turn out to be an int, unless i say "100L" but then why would i do that... 
[09:25:32] <nitrix> Having the suffix forces the literal to have the right intended type, usually so that arithmetic performed before conversions, ends up being correct.
[09:25:41] <nitrix> ,cc ptype(1287600L)
[09:25:44] <candide> nitrix:  1287600L = long
[09:25:46] <nitrix> This will always be a long.
[09:25:49] <duds-> aha!
[09:25:52] *** Joins: slidercrank (~slidercra@user/slidercrank)
[09:26:19] <duds-> and this can be useful for example to ensure compatibility between compilers?
[09:26:34] <floatcomplex> less than you'd think
[09:26:42] <duds-> bummer
[09:27:11] <floatcomplex> depends on what property you need to be consistent
[09:27:16] <duds-> i think i get it though, thanks a lot nitrix
[09:27:24] <nitrix> I'm almost done.
[09:28:40] *** Joins: Atque (~Atque@user/atque)
[09:28:40] *** Quits: alch (~alch@to-18-69-225.service.infuturo.it) (Read error: Connection reset by peer)
[09:28:46] <nitrix> The last piece that you have is an assignment to a variable of type long. That assignment will cause a conversion from the value the literal created, to the one that'll be stored in the variable's object.
[09:29:49] <nitrix> If they're both long, that's great. If it's to a higher rank, that's also fine (those have larger ranges, inclusive of the lower ranks).
[09:30:25] <nitrix> The other way around, from a high rank to a low rank, becomes more dangerous. You can get wrap-around behaviors, or undefined behaviors.
[09:31:18] <nitrix> ,cc unsigned char x = 1287600; printf("%u", x); // High to low, unsigned (wraps around).
[09:31:21] <candide> nitrix: [warning: unsigned conversion from 'i​nt' to 'unsigned char' changes value from '1287600' to '176' [-Woverflow]] 176
[09:31:30] <nitrix> Whoops.
[09:31:41] <duds-> high rank to low rank being ie int <variable> = 1287600L
[09:31:45] <nitrix> ,cc unsigned char x = 1287600U; printf("%u", x); // High to low, unsigned (wraps around).
[09:31:48] <candide> nitrix: [warning: conversion from 'unsigned i​nt' to 'unsigned char' changes value from '1287600' to '176' [-Woverflow]] 176
[09:31:57] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[09:32:08] <duds-> hmmm
[09:32:34] <duds-> i got it
[09:32:38] <nitrix> This is actually fine, albeit compilers will warn because you almost never want to do that and is indicative something else has gone wrong.
[09:33:00] <nitrix> ,cc char x = 1287600; printf("%d", x); // High to low, signed (this one is UB).
[09:33:03] <candide> nitrix: [warning: overflow in conversion from 'i​nt' to 'char' changes value from '1287600' to '-80' [-Woverflow]] -80
[09:33:14] *** Joins: alch (~alch@151.82.79.90)
[09:33:24] <nitrix> I guess it depends whether char is signed. That's a whole other can of worms.
[09:33:36] <duds-> UB?
[09:33:42] <nitrix> Undefined Behavior.
[09:33:46] <nitrix> ,ub
[09:33:46] <candide> Undefined behavior is behavior for which the C standard does not impose any requirements. This is to allow C the freedom to be implemented on systems with different architectures. Programs invoking undefined behavior may appear to compile and even run without errors at first, only to fail on another system, or even at a later time. If you want to write reliable code, don't use such behaviors.
[09:34:25] <duds-> oh alright
[09:34:58] <duds-> but how was changing the value from '1287600' to '176' fine in your view?
[09:35:07] <duds-> it seems like a pretty major change...
[09:35:30] <nitrix> 1287600U was fine. 1287600 wasn't.
[09:36:27] <nitrix> Going from a larger type to a smaller type is safe for unsigned integers, but not for signed integers.
[09:36:28] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Remote host closed the connection)
[09:37:21] <duds-> oh, so the value itself is obviously wrong, but it's safe in the sense the program will continue working i guess
[09:37:44] <duds-> even if the value went from such a high to such a low number
[09:37:46] <nitrix> It doesn't have to. That's the problem with UB.
[09:37:57] <duds-> but it could
[09:38:12] <duds-> i got it
[09:38:49] <duds-> thank you very much
[09:39:03] <nitrix> On modern computers, integers are all represented with the bits using a strategy known as "Two's Complement". One bit tells the sign, the other bits are all flipped.
[09:40:07] <nitrix> It's done intentionally that way so that arithmetic between positive and negative numbers can always be done by processors in the same sequence of steps, without having to care about the sign.
[09:40:19] <nitrix> It ends up working itself out.
[09:40:25] <rcf> C2X shall not allow any other scheme. 
[09:41:19] <nitrix> But a consequence of that representation is that if the number gets too large, that high bit normally reserve to tell whether the number is positive or negative gets overwritten, causing the number to behave surprisingly.
[09:41:40] <duds-> ohhh
[09:41:47] *** Quits: et09 (~et09@user/et09) (Ping timeout: 252 seconds)
[09:42:06] <nitrix> Not all implementations choose this approach, different machines work differently, but C supports all of them, so you're stuck with the common denominator.
[09:42:27] <mcf> nitrix: it's not UB, but implementation defined
[09:42:31] <rcf> (though overflow will remain UB because C programmers are terrified of iterating with not-int) 
[09:42:42] <nitrix> mcf, My bad.
[09:42:55] <duds-> that explains the difference in behaviour between unsigned and signed perfectly, then
[09:43:12] <nitrix> Therefore the Standard says that overflowing a signed integer is implementation-defined, and of course, one of the ways of overflowing an integer is with the examples you had earlier.
[09:43:38] <duds-> you are right
[09:43:42] <nitrix> Well, that I had. Yours were fine. (long to long).
[09:45:08] <rcf> Overflowing a signed integer is totally UB, not just implementation-defined.  
[09:45:49] <nitrix> The choice of representation is implementation-defined, integer overflow is ub, yeah.
[09:47:24] <nitrix> Threads got tangled in that conversation.
[09:48:12] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Ping timeout: 240 seconds)
[09:48:17] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-0492-87fb-9804-d949.res6.spectrum.com) (Ping timeout: 240 seconds)
[09:50:20] *** Joins: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5)
[09:50:57] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[09:51:05] <rcf> With the coming requirement of two's complement, the rationale is no longer anything sensible, but rather that loop counters incrementing must be allowed to be assumed to be monotonic for performance reasons, and only undefined behavior for signed int lets that happen. 
[09:51:22] *** Joins: Charadon (~Charadon@155.138.164.183)
[09:55:12] <nitrix> I fairly reasonable. Leave that role to the sanitizers, kinda like what Rust does on their debug builds.
[09:57:43] <mcf> rcf: the topic was about conversion of a value to a signed integer type that could not represent it, not overflow
[09:59:26] <nitrix> The original one was L suffixes on integer literals :P
[09:59:46] <nitrix> (Appearing in an assignment)
[09:59:51] *** Joins: kurahaupo_ (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au)
[10:00:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:02:57] *** Quits: u0_a647 (~u0_a647@198.55.124.115.adsl.inet-telecom.org) (Ping timeout: 240 seconds)
[10:03:17] *** Quits: kurahaupo (~kurahaupo@ppp122-115.static.internode.on.net) (Ping timeout: 240 seconds)
[10:03:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[10:03:50] <duds-> not an assignment, just reading a book (Beginning C) to self-teach (as my first programming language, I know it's not the best for that but it's what I need for my use-case)
[10:03:54] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[10:06:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[10:06:50] <nitrix> Assignment as in using the = operator. Although yours is slightly more than that, it was an initialization.
[10:07:15] *** Joins: adw123 (~adw123@21-53-255-130.kamensktel.ru)
[10:07:38] <duds-> oh, damn my bad 
[10:08:25] *** Quits: adw123 (~adw123@21-53-255-130.kamensktel.ru) (Read error: Connection reset by peer)
[10:08:41] *** Joins: wad123 (~wad123@21-53-255-130.kamensktel.ru)
[10:09:05] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:09:13] <nitrix> I don't remember if Beginning C is on the book list.
[10:09:15] <nitrix> ,books
[10:09:15] <candide> See http://www.iso-9899.info/wiki/Books for some useful book recommendations, including free online resources.
[10:09:56] *** Quits: wad123 (~wad123@21-53-255-130.kamensktel.ru) (Read error: Connection reset by peer)
[10:09:56] <nitrix> Interesting. Share your feedback when you're done :)
[10:10:12] *** Joins: wda213 (~wda213@21-53-255-130.kamensktel.ru)
[10:10:56] <wda213> hello there
[10:11:47] *** Joins: Guest62 (~Guest62@21-53-255-130.kamensktel.ru)
[10:11:54] <Guest62> hello
[10:12:13] <wda213> hi
[10:13:03] *** Quits: wda213 (~wda213@21-53-255-130.kamensktel.ru) (Read error: Connection reset by peer)
[10:13:15] *** Parts: Guest62 (~Guest62@21-53-255-130.kamensktel.ru) ()
[10:16:12] <duds-> nitrix, sure thing :]
[10:16:30] *** Quits: llh (~llh@user/llh) (Ping timeout: 260 seconds)
[10:16:56] *** Quits: b1101 (~b1101@pool-100-33-96-155.nycmny.fios.verizon.net) (Quit: b1101)
[10:17:35] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[10:18:59] *** Quits: Charadon (~Charadon@155.138.164.183) (Ping timeout: 256 seconds)
[10:20:23] *** Joins: nicko (~iClass@222.211.31.34)
[10:20:47] *** Joins: llh (~llh@user/llh)
[10:21:15] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[10:22:55] <dave0> so you explained why signed overflow is u.b. .. why then is unsigned not also u.b?
[10:24:59] *** Joins: Akiva (~Akiva@user/Akiva)
[10:25:06] <duds-> because it doesn't have the bit reserved for the negative sign, so when it overflows it doesn't potentially replace it - meaning it will not behave as irregularly
[10:26:17] <rcf> C was not designed as a coherent system, but standardized. There is a difference. Initially, there was no representational issue to encounter, so it could be defined.
[10:28:24] *** Quits: soapsudsxx (~soapsudsx@141.193.188.143) (Remote host closed the connection)
[10:29:20] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[10:29:26] *** Quits: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com) (Quit: leaving)
[10:30:17] <nitrix> On a practical level, what duds- said. Ultimately though, the rules are whatever the Standard decides to say, they don't have to make sense.
[10:30:27] <beastie> nope duds- 
[10:30:39] *** Joins: karakedi (~eAC53C340@user/karakedi)
[10:31:01] <beastie> because signed integers have at least two ways of internal representation, while unsigned have only one.
[10:31:46] <nomagno> One's compliment, two's compliment, simple sign bit
[10:32:03] <nitrix> Myeah. If you were guaranteed Two's Complement for singed integers, then you wouldn't have UB, it'd be predictable what happens.
[10:32:37] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[10:33:19] <beastie> nitrix: indeed I think the behaviour is not exactly U.B. but implementation defined behaviour (which, once specified, is not undefined anymore)
[10:33:20] <nomagno> This is why I use unsigned integers for my VM ^
[10:34:00] <nomagno> Yes, I take a performance hit by doing doing two's complement and opeeations manually. It's still a huge predictability bump in C99
[10:34:00] <Learath2> I propose we mandate two's complement and define all overflow. Who even uses sign-magnitude representation? Does C have to run on some comp arch students vacuum tube hobby computer?
[10:34:06] <beastie> so how people should operate with signed numbers in your VM?
[10:34:55] *** Joins: lleo (~leo@188-206-108-114.mobile.kpn.net)
[10:35:20] <beastie> Learath2: what are  you doing with the intrinsec asymetric nature of two's complement?
[10:35:22] *** Quits: bindu (~bindu@user/bindu) (Quit: Leaving)
[10:35:24] <dave0> Learath2: sounds like lots of work for compiler writers :-(
[10:35:39] *** Joins: bindu (~bindu@user/bindu)
[10:35:41] <nomagno> beastie: Uh, you don't. The CPU has 15 instructions, an appropriately small memory, and an appropriately lackluster feature set
[10:35:43] <Learath2> compiler people are way too lazy anyway, they can use the work
[10:36:21] <beastie> anyway, you should be able to solve problems like the solution to x + 3 = 2
[10:36:24] <nomagno> Very fun to program assembly for tough :D
[10:36:49] <nomagno> beastie: well I do have underflow and overflow flags.
[10:36:58] <beastie> and?
[10:37:10] <Learath2> beastie: Um, the asymmetry exists, we don't have to do anything about it but to acknowledge it. The standard mandating twos complement wouldn't change anything
[10:37:17] <beastie> how are you going to solve that equation above?
[10:37:27] <nomagno> Sec
[10:37:46] <Learath2> dave0: besides I actually doubt there'd be much work at all given C++ already mandates two's complement
[10:38:26] <dave0> ooh do they? i'm switching to c++ :-)
[10:38:41] *** Joins: bliminse (~bliminse@host86-186-4-210.range86-186.btcentralplus.com)
[10:38:52] <beastie> java also mandates two's complement.
[10:39:44] *** Quits: lleo (~leo@188-206-108-114.mobile.kpn.net) (Client Quit)
[10:39:56] <dave0> java even guarantees the sizes
[10:40:23] <Learath2> dave0: C++20 6.8.1p3 I think, so it's new but still they already took the leap :D
[10:40:45] <floatcomplex> doesn't java also not have unsigned integers though
[10:40:48] <floatcomplex> good luck with that
[10:41:01] *** Joins: malloy (~jimery@116.30.221.255)
[10:41:13] <Learath2> Java is completely insane, if you hash a URL it'll do a dns request and hash the ip the hostname resolves to along with the url :D
[10:41:20] *** Joins: swinnenb (~swinnenb@user/swinnenb)
[10:41:26] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[10:41:34] <beastie> java specifies full behaviour, even maximum and minimum values.
[10:41:47] *** Joins: kish` (~sid742412@user/aqua)
[10:42:10] <dave0> that'd be so nice
[10:42:35] <beastie> but that makes implementation of the VM more difficult in architectures that don't follow the implementation mandated by the VM.
[10:42:35] <dave0> toss out all the oo crap and bring back goto
[10:42:59] <beastie> let's return to FORTRAN IV
[10:43:47] <beastie> no more significative spaces in the code anymore!!!
[10:44:05] <Learath2> I'm so sad that goto got absolutely shafted by the oo-nuts. There are some cases where it works much better than the other control flow structures
[10:45:13] <beastie> for example?
[10:45:32] <Learath2> To this day I still instantly get annoyed by articles that match `[a-zA-Z]*? considered harmful`
[10:45:49] <Learath2> beastie: cleanup after errors is an immediate example everyone will give you
[10:46:08] <Learath2> breaking out of nested loops is one I use fairly often aswell
[10:46:53] <beastie> hmmm.... throw/try/catch should be a solution for that.... goto implementation (as it is exception handling) is by far more difficult to implement than any other control structure.
[10:47:34] <beastie> java, for example has the labeling of control structures to allow break'ing from them.
[10:47:56] <beastie> IMHO it's more readable than goto.
[10:48:37] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:9d20:9499:4e3c:804c) (Ping timeout: 240 seconds)
[10:49:56] <beastie> goto checking, when you misplace the label to jump to is far more difficult as  you need to check how the nesting is done and permit only to get out of scope, and never jump into the middle of an inner scope without initializing local variables or structures.
[10:50:14] <nitrix> I works well to clean up resources locally, without having to shift the responsibility to the caller.
[10:50:28] <beastie> this makes goto processing far more difficult for a compiler writer.
[10:50:32] <Learath2> I absolutely despise exceptions, especially unchecked ones. Non-local handling of errors is just a silly idea. The way rust went about error handling is the best if you absolutely have to not use goto in your language for whatever reason
[10:51:00] <beastie> silly?
[10:51:07] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[10:51:19] <nitrix> Second best, C. More so than Go.
[10:51:34] <beastie> I hardly imagine an scenario where errors can be solved locally and not in the calling code.
[10:52:03] <nitrix> I prefer a magic value than multiple returns, one of which tightly coupled to the other.
[10:52:42] <beastie> nitrix: you will stick to very small projects that way.... 
[10:53:13] <beastie> where you can manage the amount of silly things that can happen to a program and cannot be solved locally.
[10:53:26] <nitrix> Right. I'm just starting to program.
[10:53:45] <floatcomplex> :)
[10:54:08] <beastie> the abstraction of error handling doesn't nest properly when you are developing libraries that introduce errors or situations in which the library cannot decide what to do on an error.
[10:54:15] <Learath2> How are you supposed to solve an error robbed of all it's context? Exceptions encourage just shouting at the user since you can't really do much 6 frames above where the error occured
[10:54:27] <Learath2> also it is well known that nitrix is actually just a butcher, he doesn't even program
[10:54:53] <nitrix> Gosh I would make a really happy butcher.
[10:55:01] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:55:45] <beastie> nitrix: when you use sarcasm (I deduced it on the smiley you got after your comment) you assume that you are probably the most experience programmer in a channel of 751 users.... wow!!! that's awesome (and this is sarcasm, also)
[10:55:49] <Learath2> The old way just works fine, enforcing handling with the compiler like in rust makes it even better. Your library function fails, you return an error code
[10:55:49] <nitrix> Hatchets never errors, never crashes, they just work.
[10:57:12] <beastie> well... sorry for my comment (again), I was just trying to add some personal experience to the discussion.
[10:57:51] <Learath2> Anyway, I find in languages where exceptions are a thing so are "Unhandled exception" warnings just thrown at the user. Which I find is fairly unacceptable
[10:58:23] <floatcomplex> better than an unhandled hatched thrown at the user...but only just
[10:58:34] <dave0> i'm the prettiest of 751 users
[10:58:34] *** Quits: Insing144 (~Insing147@78.30.38.171) (Quit: Leaving)
[10:58:47] <beastie> but that's not a fault of the exception system... but of the user of the library, that didn't check what exceptions he should handle.
[11:00:21] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 256 seconds)
[11:00:39] <beastie> and C has an exception handling mechanism in the longjmp implementation.
[11:01:09] <floatcomplex> i'm marginally okay with passing concise error status back up the call stack from library functions as long as they print something really fucking informative to stderr where the problem actually happened and all of that context is still there
[11:02:09] <beastie> floatcomplex: printing an error is normally one of the problems a library cannot afford, as the library doesn't know how to print things (or even if they have to be printed at all)
[11:02:19] <nitrix> My problem with exceptions is very different, it's not even about safety but ergonomics. The whole point is for them to cascade to the callers transparently, but you cannot work with them without knowing exactly which functions will or wont throw an exception, so you end up annotating and carefully crafting the path that the exception takes to make sure all the cases are covered, doing the exact opposite of what they're supposed to buy you.
[11:02:49] <nitrix> It's a self defeating feature.
[11:03:32] <beastie> yeah... but that's a problem of documenting the software... of course you have to document the code you write... or you are lost... 
[11:03:36] <floatcomplex> "the library doesn't know how to print things" fprintf(stderr, "warning: %s: could not whatever: %s\n", __FUNC__, strerror(errno));
[11:03:44] <floatcomplex> that's what stderr is for
[11:03:46] <floatcomplex> stupid not to use it
[11:03:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[11:03:57] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 240 seconds)
[11:04:06] <beastie> this is one of the reasons java and/or c++ are more successfull on large projects.
[11:05:15] <beastie> floatcomplex: in an embedded system, stderr is normally the most interesting thing I ask the provider when trying to look at why my Chromecast doesn't connect to MBO.
[11:06:05] <beastie> stderr is a unix product... from the age of teletypes... :)
[11:06:29] <nitrix> Sure, but if you end up annotating with comments, or with some linter, or any other tooling, then you're just poorly making up for what could've been taken care of with actual code, maybe even supported by the language.
[11:06:42] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:07:23] <beastie> well, if you are not smart enough to decide on a format to annotate, that allows the automatic processing of those annotations, then you are in trouble.
[11:07:32] *** Quits: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net) (Quit: Leaving)
[11:07:44] <Learath2> um, I'm not sure of the implication of your last statement, stderr is indeed a unix product and it is old, what is the point there? :D
[11:08:35] <nitrix> It's like those people that create their own DSL configuration language and it always devolves into a full blown language supporting logic operators and some kind of formatting. They could've just configured the application with code, in the language language the app is written in.
[11:08:47] <beastie> you can even annotate using dummy macros (macros that expand into blank strings when parsed by the compiler, but not when preprocessed with some other include that provides different information about the routine/variable/etc. they annotate)
[11:09:00] *** Joins: sysctl (~sysctl@88.215.77.255)
[11:09:07] <beastie> this is just plain text processing, so you can decide on it... 
[11:09:45] <beastie> in my opinion, if it has not been included is because it was considered not necessary for the kind of projects that are to be solved by the language.
[11:10:17] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:11:28] <Learath2> Oh I just remembered another gripe I have with exceptions. Locally it's completely unobvious what happens when an error happens. You'll have to go tracing backwards looking for a catch block. It's just less readable
[11:11:42] <floatcomplex> less debuggable
[11:11:48] <beastie> this has been done in the history far before automatic documentation was actually invented (see for example the way D.Knuth uses to put the full code and the documentation in his single source for TeX program, which by the way is written in standard Pascal)
[11:12:28] <beastie> well... you can switch to java then! :)
[11:12:38] <nitrix> Learath2, On that subject, this was a massive eye opener for me: https://www.youtube.com/watch?v=49dMGC1hM1o
[11:12:39] <candide> Title of nitrix's link: Reactive Programming: Why It Matters - YouTube
[11:13:13] *** Joins: kashyaprushi (~kashyapru@2405:201:1010:b033:5010:b599:9ae4:3186)
[11:13:31] <beastie> java's one of its first premises was to make programming easier for everybody, even non-programmers... you can use it, if you are not capable of solving your documentation problem fairly.
[11:13:58] <beastie> you don't like pointers?  use java... ;)
[11:14:15] <floatcomplex> another way of putting that is that people who cannot reason about what the program should do can use java to quickly generate a lot of code anyway
[11:14:34] <Learath2> nitrix: I'll give it a watch with my coffee, thanks
[11:15:05] <nitrix> Learath2, The idea that modules should be self-contained and react to things happening outside. They can get notified about conditions they're interested in and exhibit new behaviors on the system as a whole, but at least when you look at a module, you know immediately what its dependencies are and what it does.
[11:15:50] <nitrix> Learath2, Instead of the module being called by other modules and the actually knowledge of how the module gets used is scattered all over the codebase.
[11:15:54] <Learath2> On the topic of documentation, I'm a great fan of code that is self-descriptive. Comments and documentation is important but a good language and good coding practices should get you most of the way there
[11:16:02] <beastie> I cannot argue agains people that prefer not to use object oriented programming in their projects, but in my opinion, if it has not been included yet in C is because there's a compatible language that already incorporates it, and you can do object oriented programming without support from the language.
[11:17:07] <nitrix> Learath2, Let me know. It stretches the idea to the extreme until they reach functional programming with streams, but I think there's a middle point in there that can remain OOP-like and be extremely elegant.
[11:17:39] <beastie> yeah... if you look at the code of TeX, you will see that, even being autodescriptive code, some things cannot be expressed in the code (as for example the rationale that led you implementing things that way)
[11:18:04] <Learath2> In js `function post_msg(msg)` literally tells me absolutely nothing, in C `error_type post_msg(const char *msg)` tells me much more, in rust `fn post_msg(msg: &str)` tells me even more 
[11:18:53] <beastie> sometimes that's important... I have been blamed by 25years old children because "code must be self descriptive" and told me to erase all my comments, which where no more than rationale added for the maintainer understanding about the implementation.
[11:19:49] <beastie> when you are almost 60 years old, the only chance you have is to do what you are asked for... I'm afraid... but don't worry, all of us will end being that age :)
[11:20:46] <dave0> "i can't read the code with all those annoying comments" ?
[11:20:50] <beastie> that's true... it would be better to call it just `post(msg)`  (as what is to be post is explained in the parameter name) :)
[11:21:16] *** Quits: malloy (~jimery@116.30.221.255) (Ping timeout: 250 seconds)
[11:21:20] <beastie> dave0: you are speaking without having the example in front of you.... 
[11:21:49] <beastie> so you are telling about something you have not seen... that's prejudice... you know, right?
[11:21:53] <Learath2> As always taking things to the extreme is a bad idea, code must be self descriptive surely, but that doesn't imply all comments are bad. If there is a way to write it in a more self-descriptive way without compromise, do it, if not do the weird thing and document it
[11:22:42] <dave0> beastie: not me! the kid
[11:23:12] <beastie> of course... i answered that it would be better to call the function something like: this_function_just_sends_an_email_message_to_the_mail_server_that_is_the_one_in_charge_to_deliver_it(and_this_is_the_message_itself)`
[11:23:37] <beastie> so each time you call it you will have a good explanation of what the function does.
[11:24:03] *** Joins: malloy (~jimery@116.30.221.255)
[11:24:18] <dave0> that's not strictly conforming because it's >31 characters long
[11:24:20] <beastie> yeah.... dave0, my apologies for misunderstanding.
[11:24:57] *** Quits: rahl (~rahl@102.114.84.162) (Ping timeout: 240 seconds)
[11:25:15] <dave0> 31 character descriptions should be enough for everybody
[11:25:58] <Learath2> Aaanyway, nice chat, I'll go watch the talk the talk nitrix linked and then I have to go study more multivariable calculus
[11:26:07] <beastie> dave0: well... gcc actually supports up to 128 i think (or unlimited, don't remember)  but I don't think a different function would have the same 32 first chars... the standard talks about the significative ones.... so you can use a unique prefix to distinguish and continue to use identifiers longer than 32 chars.
[11:26:32] <beastie> Learath2: so you are a student... :)
[11:26:32] <dave0> beastie :-)
[11:27:04] <Learath2> oh no, I've been exposed
[11:27:13] *** Joins: rahl (~rahl@102.114.240.106)
[11:28:01] <beastie> or you can take the identifier, take it's sha1, prepend `f_` (to indicate this is a function and document it) and use that as the function name.  You will have a long time before you clash names with that approach.
[11:28:38] <Learath2> that "... :)" looks like it discarded all 50 minutes of the things I said :P
[11:29:03] <beastie> so you have f_845afd234feb93452341ff230b0065f(p_2879877233423fabccd2341123)
[11:29:49] *** Quits: MrAureliusR (~MrAureliu@user/mraureliusr) (Ping timeout: 256 seconds)
[11:30:07] <beastie> no... the ellipsis is my vice, i cannot avoid it... and the smiley indicates I'm a happy man!
[11:31:01] <beastie> Learath2: young men tend to discard today everything I say, so don't worry about it, It will happen to you more and more each time as time evolves.
[11:36:11] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[11:36:48] *** jinsun__ is now known as jinsun
[11:41:43] *** Quits: PortableDave (~portabled@118.210.56.9) (Ping timeout: 256 seconds)
[11:42:05] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[11:44:22] *** Joins: xa0s (~xa0s@mab.sdf.org)
[11:44:58] *** Joins: mrig (~AdiIRC@user/mrig)
[11:45:33] *** Joins: aradesh (~aradesh@user/aradesh)
[11:48:20] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:49:09] *** Joins: Rounin (~david@84.212.130.215)
[11:54:53] <Jck_true> beastie: The answer is emojies. this_🍆_just_📡_an_📧_✉️_to_the_📪_that_is_the_1️⃣_in_charge_to_🚚_it(✉️)`
[11:56:42] <dave0> that's so cool
[11:57:12] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b082:aa65:4b23:c398)
[11:57:12] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b082:aa65:4b23:c398) (Changing host)
[11:57:12] *** Joins: skapata (~Skapata@user/skapata)
[11:57:51] <Jck_true> True factory methods... 🏭()
[12:05:01] *** Quits: somlis (~somlis@user/somlis) (Read error: Connection reset by peer)
[12:06:51] <DPA> Is this a gcc / compiler bug? https://godbolt.org/z/bd78zsT1z
[12:09:32] <GyrosGeier> very minor one
[12:09:39] <GyrosGeier> that it shows the note: line
[12:13:00] *** Quits: rgrinberg (~textual@2806:101e:7:6946:95cc:8d5a:5708:c8d5) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:15:17] *** Joins: inlight (~inlight@157.35.62.139)
[12:15:17] *** Quits: inlight (~inlight@157.35.62.139) (Changing host)
[12:15:17] *** Joins: inlight (~inlight@user/inlight)
[12:15:38] *** Joins: kurahaupo (~kurahaupo@pa49-181-205-150.pa.nsw.optusnet.com.au)
[12:16:04] *** Joins: earnestly (~earnest@user/earnestly)
[12:17:49] *** Quits: kurahaupo_ (~kurahaupo@pa49-195-67-63.pa.nsw.optusnet.com.au) (Ping timeout: 268 seconds)
[12:22:23] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:26:04] *** Joins: soul-bw (~uknown@2a02-a456-85ad-1-d5dc-ebfc-cde-f122.fixed6.kpn.net)
[12:28:56] *** Quits: soul-d (~uknown@user/soul-d) (Ping timeout: 268 seconds)
[12:33:50] <cehteh> 2000BC: 𓂀    2000AC: 😂
[12:34:59] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[12:35:13] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[12:38:18] <river> 𓂀w𓂀
[12:39:54] *** Joins: Klinda (~superleag@user/klinda)
[12:42:23] <Jck_true> cehteh: Time is a flat circle
[12:43:50] *** Quits: m4ho (~m4ho@p5098be52.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[12:46:20] <cehteh> hieroglypes where in use for some thousand years ... i bet emoji wont last that long
[12:47:24] *** Joins: m4ho (~m4ho@81.20.119.6)
[12:48:31] *** Quits: kurahaupo (~kurahaupo@pa49-181-205-150.pa.nsw.optusnet.com.au) (Quit: Quit)
[12:51:59] *** Quits: m4ho (~m4ho@81.20.119.6) (Ping timeout: 256 seconds)
[12:52:14] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:53:47] *** Joins: puke (~puke@user/puke)
[12:58:16] *** Quits: iomari891 (~iomari891@197.210.53.158) (Ping timeout: 245 seconds)
[12:59:06] *** Joins: m4ho (~m4ho@81.20.119.6)
[12:59:33] *** Joins: iomari891 (~iomari891@197.210.52.72)
[13:06:09] *** Quits: iomari891 (~iomari891@197.210.52.72) (Ping timeout: 256 seconds)
[13:06:09] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 256 seconds)
[13:06:48] *** Joins: iomari891 (~iomari891@197.210.52.72)
[13:06:51] *** Bitflux is now known as Byteflux
[13:07:44] *** Joins: joe_ (~joe_@63.119.181.194)
[13:07:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:10:47] *** Quits: joe_ (~joe_@63.119.181.194) (Client Quit)
[13:12:59] *** Joins: Kev_ (~Kev@2a01cb0400149f00b8e40d0a31653e47.ipv6.abo.wanadoo.fr)
[13:14:23] *** Joins: plastico (~plastico@neomutt/plastico)
[13:14:37] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:14:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[13:15:24] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[13:18:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:19:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:20:01] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[13:22:10] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[13:22:37] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[13:23:58] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[13:24:21] *** etolier is now known as Guest9799
[13:25:23] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:25:24] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
[13:25:25] *** Quits: AsenMx (~AsenMx@user/asenmx) (Ping timeout: 240 seconds)
[13:26:23] *** Joins: AsenMx (~AsenMx@user/asenmx)
[13:28:16] *** Joins: Enitin (~Enitin@82.102.22.86)
[13:29:22] *** Quits: alch (~alch@151.82.79.90) (Read error: Connection reset by peer)
[13:32:40] *** Joins: Matt|home (~matt@adsl-74-233-58-81.mia.bellsouth.net)
[13:32:53] <Matt|home> can you implement getopt with standard C? no libs?
[13:33:37] *** Joins: alch (~alch@151.82.92.247)
[13:36:13] <dave0> sure
[13:36:38] <dave0> grab a copy from one of the *bsd's .. they have liberal licenses
[13:37:22] <Matt|home> ty
[13:39:23] <Matt|home> hm
[13:39:37] <Matt|home> what's an example of something you couldn't easily or feasibly do in standard C without external libs?
[13:40:19] <Jck_true> threading? pthreads?
[13:40:37] *** Quits: Enitin (~Enitin@82.102.22.86) (Ping timeout: 240 seconds)
[13:40:40] <dave0> maybe also a JIT
[13:41:43] <dave0> standard c doesn't have directories but posix does...
[13:42:49] <dave0> posix c also has some restrictions that standard c doesn't
[13:43:15] <dave0> like different minimum size for int, and poking addresses into function pointers
[13:46:39] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[13:47:17] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[13:49:29] *** Lord_of_Life_ is now known as Lord_of_Life
[13:50:37] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[13:51:23] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[13:52:32] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[13:55:50] *** Joins: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f)
[13:56:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:57:03] <Matt|home> i haven't written anything in over a year.. how is it that people i know remember shit from 20 years ago and i can barely remember some function parameters..
[13:57:24] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[13:59:36] *** Joins: Burgundy (~yomon@79.115.213.171)
[14:00:11] *** Joins: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it)
[14:04:33] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[14:05:57] <dave0> i do that all the time
[14:06:06] <dave0> i    man fread   every other day
[14:06:14] <Jck_true> Why we have IDE's with auto complete...
[14:06:49] <Jck_true> It's actually worse if you think you can remember the parameters and use them wrong...
[14:06:51] <dave0> why does fread take 4 bloody parameters when 3 would do
[14:07:29] <dave0> i can never remember return codes either
[14:07:47] <dave0> most of the time it's -1 for error and 0 for success but not always
[14:08:05] <dave0> some functions return instead of -1, they return a negative number
[14:08:20] <dave0> and some functions instead of returning 0 for success, they return a positive number
[14:08:43] <dave0> does fclose return -1 or EOF on error?
[14:08:44] <Jck_true> Some return via a pointer... 
[14:09:44] <dave0> pointers are usually NULL on error.. but not always!
[14:12:14] <dave0> other things i can't forget.. like having to cast the argument to isspace to unsigned char... and that char buf[100]; needs scanf("%99s", buf) meaning 99 characters not including the trailing \0 unlike fgets which includes the \0
[14:12:50] <dave0> i have memorized too much cruft
[14:16:22] <Matt|home> silly question: you can pass char *envp[] to main() according to this, and my eyes kinda glaze over whenever anyone mentions environment variables... i think i really only use $PATH . why does argc exist but envp doesn't need a counter?
[14:17:12] <dave0> Matt|home: envp is terminated by a NULL ... but the proper posix way is to use    extern char **environ;    envp as an argument to main is a unix-ism
[14:17:20] <Matt|home> gotcha
[14:19:58] <Matt|home> char is guaranteed = 1 byte right?
[14:21:20] <dave0> yep
[14:21:29] <dave0> sizeof(char)==1 by definition
[14:21:43] <Matt|home> ty
[14:23:06] <vdamewood> dave0 Matt|home: Though, argv has the same NULL termination property.
[14:23:25] *** Quits: malloy (~jimery@116.30.221.255) (Quit: WeeChat 3.0)
[14:25:56] <Matt|home> alright.. this is gonna be extremely subjective and depending on individual needs.. but in all honesty, how important is reading the standards.. i assume from start to finish is just a waste of time
[14:26:37] <dave0> you'll never unseat fizzie as c's language lawyer
[14:26:40] <river> it's useful, there are edge cases you wouldn't think about otherwise
[14:27:38] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:27:53] <Matt|home> alright
[14:28:41] <vdamewood> Also, there's a lot of material out there that describes certain behaviors as part of the language, while those behaviors are UB or IB in the standard, and you get bitten in the ass when porting your code.
[14:29:50] *** Quits: katnis (uid15849@id-15849.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:30:03] <Matt|home> alright.. uh which standard do i care about C99 ?
[14:30:10] <Matt|home> or C11 or whatever it's called
[14:30:12] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:24] <vdamewood> C17 is the current, but it's mostly a bugfix/clarification on C11.
[14:30:46] <vdamewood> Also, MSVC doesn't support C99, but it does comply with C11 and C17.
[14:30:59] *** Joins: csrf (~csrf@user/csrf)
[14:31:23] <vdamewood> clang and gcc support C17 fully last I checked.
[14:32:34] <vdamewood> The only complication is that C11 introduced optional sections. So pay attention to what's optional. This is why MSVC is C11/C17 compliant but not C99. C99 has variable-length arrays, and C11 made them optional. MSVC doesn't support VLAs.
[14:38:43] <Matt|home> oh jesus christ it's been so goddamn long.. what's the difference between char argv[] and char *argv[] .. wouldn't those be equivalent if the pointer just points to the first element in the array..
[14:38:48] *** Joins: random-nick (~random-ni@87.116.181.93)
[14:39:17] <Matt|home> or is that like argv[][] ..
[14:39:37] <Matt|home> yeah i've got a lot of reading to do..
[14:40:39] <rindolf> Matt|home: the latter is an array of pointers
[14:40:48] *** Joins: ko (~i.am@user/marlboro)
[14:41:14] <Matt|home> ah so each element has a char * value
[14:41:35] <earnestly> Matt|home: (Try not to confuse how formal parameters can be defined like this due to pass by reference, and an array)
[14:41:42] <dave0> Matt|home: yeah, it's like argv .. an array of strings
[14:41:54] <Matt|home> so argv[0] = would be like char *var1 or something
[14:42:05] <dave0> yep
[14:42:09] <Matt|home> tyty
[14:42:19] <earnestly> Matt|home: So while in the context of main( ... you can write *argv[] as **argv, in other contexts they are different things.
[14:42:51] <Matt|home> got it
[14:42:52] <dave0> ,cc int main(int argc, char **argv, char **envp) { for(int a = 0; envp[a] != NULL; a++) puts(envp[a]); }
[14:42:55] <candide> dave0: SHELL=/bin/bash HISTCONTROL=ignoredups HISTSIZE=1000 HOSTNAME=compiler XDG_SEAT=seat0 PWD=/home/compiler LOGNAME=compiler XDG_SESSION_TYPE=tty SYSTEMD_EXEC_PID=40803 _=/usr/bin/gdb LINES=24 HOME=/home/compiler LANG=en_US.UTF-8 LS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;... <truncated; https://0x0.st/-CKQ.txt>
[14:44:37] *** Quits: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[14:44:41] <earnestly> Matt|home: You can also desugar array access, such as argv[2] is *(argv+2) which is where the party trick of *(2+argv) and so 2[argv] comes in
[14:45:16] <earnestly> Matt|home: If you had *argv[2] then it would be **(argv+2), you can draw this out on a piece of paper with arrows for pointers and boxes for your arrays
[14:45:47] *** Joins: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it)
[14:46:11] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[14:52:00] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[14:55:49] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[14:56:38] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[14:56:53] *** Joins: zat (~zat@191.23.60.220)
[15:00:50] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:00:53] *** Joins: joe_ (~joe_@63.119.181.194)
[15:01:37] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[15:02:03] *** Joins: somlis (~somlis@user/somlis)
[15:04:20] *** Joins: Tempesta (~Tempesta@user/tempesta)
[15:04:49] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Remote host closed the connection)
[15:05:05] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[15:08:24] *** Joins: _kimchi (~kimchi@87.247.123.112)
[15:09:30] <hxztnxt> why does it say unused variable even though it's being assigned a value?
[15:10:56] <rkta> hxztnxt: do you use it after assigning a value?
[15:12:37] *** Quits: nicko (~iClass@222.211.31.34) (Ping timeout: 240 seconds)
[15:16:56] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:de:7734:d784:4933)
[15:18:23] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[15:18:27] <hxztnxt> yes
[15:18:50] <dave0> hxztnxt: does it otherwise compile?
[15:19:08] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:19:20] <hxztnxt> it compiles, just a warning
[15:19:24] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:19:36] <dave0> if you are confident that your code is correct, ignore the warning
[15:19:58] <hxztnxt> oh, i think i get it. Im just assigning to it a value, but not using it anywhere
[15:20:03] <hxztnxt> that's why
[15:22:31] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[15:23:48] *** Joins: kurahaupo (~kurahaupo@pa49-179-64-29.pa.nsw.optusnet.com.au)
[15:23:50] *** Joins: nicko (~iClass@222.211.28.136)
[15:27:45] *** Quits: iomari891 (~iomari891@197.210.52.72) (Ping timeout: 268 seconds)
[15:28:48] <rkta> hxztnxt: what compiler are you using?
[15:29:01] *** Joins: iomari891 (~iomari891@197.210.77.160)
[15:30:17] *** Quits: kurahaupo (~kurahaupo@pa49-179-64-29.pa.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[15:31:45] *** Quits: m4ho (~m4ho@81.20.119.6) (Quit: WeeChat 3.3)
[15:31:57] *** Quits: nicko (~iClass@222.211.28.136) (Ping timeout: 240 seconds)
[15:32:33] *** Joins: nicko (~iClass@222.211.28.110)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:39:34] <useretail> guys, how can it be that the following code https://searchcode.com/file/237700751/mpfr/src/uceil_exp2.c/ was compiled for armv7 with different instructions: https://pastebin.com/raw/wE4g9CWq https://pastebin.com/raw/MbUbpZfW
[15:40:01] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Read error: Connection reset by peer)
[15:40:47] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b)
[15:41:19] *** Quits: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[15:41:44] <ioxzev1z> useretail, what do you mean?
[15:42:04] <useretail> ioxzev1z, just compare two pastebins
[15:42:33] <ioxzev1z> Right, you're using the exact same compiler and target, but get different code between two calls?
[15:42:57] <useretail> looks like it
[15:43:14] <ioxzev1z> Paste your compilation line
[15:43:19] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[15:43:44] <useretail> i don't have it, only compiled binaries
[15:44:01] *** Quits: asdflkj_sh (asdflkj@bsdforall.org) (Ping timeout: 250 seconds)
[15:44:03] <ioxzev1z> Right, so you can't know the options given to the compiler, etc between those two compilations
[15:44:20] *** Joins: kurahaupo (~kurahaupo@pa49-186-234-227.pa.vic.optusnet.com.au)
[15:44:32] *** Joins: MrAureliusR (~MrAureliu@user/mraureliusr)
[15:44:37] <useretail> ioxzev1z, so?
[15:45:27] <ioxzev1z> So it isn't surprising that you get different outputs if flags were changed for gcc, etc
[15:45:43] *** Joins: Everything (~Everythin@37.115.210.35)
[15:45:49] <ioxzev1z> If you got those two different outputs with the exact same gcc line then it would be a bit weird
[15:45:57] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 256 seconds)
[15:47:08] <useretail> yeah, i got that, but so drastically that even instructions are different?
[15:47:36] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Remote host closed the connection)
[15:47:45] <ioxzev1z> Maybe one is compiled with optimizations and the other without?
[15:47:49] *** Joins: random-nick (~random-ni@87.116.181.93)
[15:48:02] *** Quits: zwr (~zwr@2804:d45:b966:fb00:a798:3719:6645:498) (Ping timeout: 240 seconds)
[15:48:14] <useretail> dunno
[15:48:16] <|smlckz|> ,cc int x = 5; printf("%d %d %d", x++, x, ++x);
[15:48:19] <candide> |smlckz|: [warning: operation on 'x' may be undefined [-Wsequence-point]  warning: operation on 'x' may be undefined [-Wsequence-point]] 6 7 7
[15:48:22] <river> oh no dont do that
[15:48:50] <|smlckz|> why it gives output like that?
[15:49:03] *** Joins: zwr (~zwr@2804:d45:b966:fb00:7634:5fa:3b2f:e1a6)
[15:49:05] <ioxzev1z> |smlckz|, the compiler explains above
[15:49:09] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[15:50:01] <rindolf> |smlckz|: it's a bad idea
[15:51:04] *** Joins: pulse (~pulse@user/pulse)
[15:51:17] <|smlckz|> what do you do when thinks like this appear on your exam? =
[15:52:02] <|smlckz|> *things
[15:52:53] *** Quits: joe_ (~joe_@63.119.181.194) ()
[15:55:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[15:55:06] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:de:7734:d784:4933) (Quit: This computer has gone to sleep)
[15:55:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[15:58:16] *** Quits: Guest9799 (~somewhere@122-199-43-68.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[15:59:20] <|smlckz|> is it totally undefined or ABI has any definition for this?
[15:59:38] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[16:00:02] *** etolier is now known as Guest4472
[16:00:28] *** Joins: joe_ (~joe_@63.119.181.194)
[16:01:21] <|smlckz|> on my aarch64 machine, it produces "5 7 7" instead..
[16:01:45] <Xgc> |smlckz|: Sure.  An implementation could define that behavior.  There's no such thing as "totally undefined behavior".
[16:03:25] *** mattgirv_ is now known as mattgirv
[16:03:32] *** Quits: iomari891 (~iomari891@197.210.77.160) (Ping timeout: 240 seconds)
[16:03:51] <|smlckz|> ''could''.. what is happenning in reality? who defines this behaviour?
[16:04:07] <Xgc> |smlckz|: Even if the implementation doesn't document the behavior, you could examine that implementation to see if the behavior can be determined.
[16:04:31] <ioxzev1z> iirc UB means that the standard doesn't have a definition, but as Xgc said an implementation can define it, and if you're only working for that implementation then you can use safely use their definition
[16:04:54] <ioxzev1z> But UB usually means code isn't portable
[16:05:04] <Xgc> |smlckz|: It's the difference between "guaranteed" vs "explainable, but not guaranteed"
[16:05:09] *** Joins: iomari891 (~iomari891@197.210.77.17)
[16:05:16] *** Joins: u0_a3911 (~u0_a391@2600:380:8a58:cf0:2493:4043:34b2:e3c7)
[16:05:26] <clarity> |smlckz|: It's up to the complier to decide how to compile that.
[16:06:41] <clarity> You might get different results with different context, different optimization flags, different version..
[16:06:42] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[16:07:14] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[16:08:51] *** Joins: listen_ers (~listen_er@c-98-240-233-64.hsd1.mn.comcast.net)
[16:09:51] <Matt|home> okay.. var *ptr; <-- declaration , and if im reading this correctly "ptr" ptr is the address of whatever you're assigning it to, or literally just the value of the variable "ptr". so int *ptr; ptr = &mynum . i.e. you assign an address value to the variable. 
[16:10:44] <Matt|home> when do you need to use the * symbol except when declaring.. 
[16:11:04] <clarity> When dereferencing
[16:11:19] <clarity> Given the address of Matt, give me Matt.
[16:11:23] <clarity> That's what dereferencing does.
[16:11:32] <rindolf> Matt|home: ptr = &mynum; *ptr = 5;
[16:12:00] <clarity> Also int a = 5*3;
[16:12:08] <Matt|home> so dereferencing means grabbing the value of the variable the pointer is poiting to?
[16:12:10] <Matt|home> pointing*
[16:12:19] <clarity> More like "giving you the variable"
[16:12:25] <clarity> Not its value, but the variable itself
[16:12:32] <clarity> Which you can assign to, or from which you can read its value
[16:12:51] <Matt|home> .. uh if im looking for some simple examples what should i be googling
[16:13:00] <Matt|home> dereference example?
[16:14:19] *** Quits: joe_ (~joe_@63.119.181.194) ()
[16:15:54] <river> int x = 3; int *x_ptr = &x; int y = 7 + *x_ptr;
[16:15:56] <river> y comes out as 10
[16:16:11] <river> int x = 3; int *x_ptr = &x; *x_ptr = 7;
[16:16:17] <river> now x will be 7 instead of 3
[16:19:53] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[16:19:59] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 250 seconds)
[16:21:20] *** Parts: Everything (~Everythin@37.115.210.35) ()
[16:23:10] *** Joins: inlight (~inlight@157.35.62.139)
[16:23:10] *** Quits: inlight (~inlight@157.35.62.139) (Changing host)
[16:23:10] *** Joins: inlight (~inlight@user/inlight)
[16:25:51] *** Joins: juliopcrj (~juliopcrj@177.44.227.40)
[16:26:00] *** Joins: meator (~meator@user/meator)
[16:29:55] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Remote host closed the connection)
[16:30:48] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[16:34:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 252 seconds)
[16:37:18] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Quit: Leaving)
[16:39:33] *** Quits: kashyaprushi (~kashyapru@2405:201:1010:b033:5010:b599:9ae4:3186) (Quit: Leaving)
[16:42:55] <Matt|home> oh i get it
[16:42:57] <Matt|home> thanks ri
[16:42:59] <Matt|home> river
[16:43:01] <river> yw
[16:45:09] *** Joins: constxd (~brad@192.75.101.164)
[16:45:13] <Smilex> Hey. I'm reading the execve man page, and it says that by convention the filename should be the first argument in "args". What I'm not sure about is if that's implying that the filename should have the entire path, or just the actual file name?
[16:46:05] <omegatron> as you like
[16:46:30] <river> i think it can be a relative path
[16:46:38] <omegatron> your program is execute with a set of environment variables ... PWD (current working directory) is one of them
[16:46:52] *** Quits: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:47:02] <Smilex> full path is less work for me
[16:47:05] *** Quits: Satin (uid193953@user/Seten) (Quit: Connection closed for inactivity)
[16:47:13] <constxd> i mean
[16:47:17] <constxd> what are u exec()ing
[16:47:36] <river> I guess you could put anything there
[16:47:37] <Smilex> I'm writing a pet window manager, so whatever the user wants
[16:47:39] <constxd> do u want it to have the full path or relative path or just basename? it's up to u king
[16:47:41] <river> and just exec the program
[16:48:17] <Smilex> which leads me to another question. I'm currently just passing "environ" as the envp pointer, but I'm worried that's very unsafe?
[16:48:49] <clarity> Seems fine if you want the child to inherit your environment
[16:49:23] <Smilex> I think I do, because it's a WM... But I might not be thinking of some issue
[16:49:30] *** Quits: constxd (~brad@192.75.101.164) (Remote host closed the connection)
[16:50:00] *** Joins: constxd (~brad@192.75.101.164)
[16:50:18] <clarity> For the first item in argv, my shell just passes the name of the command as it appears on the command line
[16:50:38] <clarity> So if I enter a full path, it's a full path.  If I enter a relative path, it's a relative path.  If I enter no path, there's no path.
[16:51:12] <clarity> I'd stick to that convention in a wm too.
[16:51:42] <Smilex> ok yeah, same as what I currently do
[16:51:44] <Smilex> Thanks!
[16:53:51] <Matt|home> https://pastebin.com/G661eZzP
[16:54:07] *** Quits: constxd (~brad@192.75.101.164) (Client Quit)
[16:54:51] *** Joins: Libero (~Libero@77.49.32.8.dsl.dyn.forthnet.gr)
[16:55:31] *** Quits: baltazar (~baltazar@84-236-20-119.pool.digikabel.hu) (Ping timeout: 250 seconds)
[16:55:35] <clarity> Matt|home: line 7 is a call, yes
[16:55:43] *** imm__ is now known as imm_
[16:55:49] <clarity> line 12 is both a declaration and a definition
[16:55:58] <clarity> Names there don't have to match names at call site
[16:56:04] <Matt|home> what's line 1 called?
[16:56:08] <clarity> It's a declaration
[16:56:33] <clarity> Names don't need to match between declaration and definition, you could even omit names from the declaration altogether
[16:56:47] <Matt|home> so i could have done in main: int a = 5; int b = 10; myfunction(a, b) and kept the declaration and definition arguments the same
[16:56:56] <clarity> Yep
[16:56:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 240 seconds)
[16:57:13] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[16:57:15] *** Joins: baltazar (~baltazar@84-236-9-28.pool.digikabel.hu)
[16:57:38] <Matt|home> but in myfunction() 's scope, there already exist x and y int variables?
[16:58:31] <clarity> The ones from main are not in scope, no.  In myfunction's body, the parameters are in scope.
[16:58:42] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[16:59:19] <Matt|home> right, but they're called x and y, i don't have to do: int myfunction(int x, int y) { int x; int y;}
[16:59:24] <Matt|home> they already exist
[16:59:38] <Matt|home> i could just assign them values like x = 500
[16:59:44] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[17:00:06] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:00:30] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[17:00:38] <clarity> Right
[17:00:38] <Matt|home> i got it, ty
[17:00:52] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:01:16] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[17:03:06] *** Joins: inlight (~inlight@157.35.62.139)
[17:03:06] *** Quits: inlight (~inlight@157.35.62.139) (Changing host)
[17:03:06] *** Joins: inlight (~inlight@user/inlight)
[17:03:28] *** Joins: constxd (~brad@192.75.101.164)
[17:04:25] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:04:42] *** Guest6120 is now known as homura
[17:06:17] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 240 seconds)
[17:08:00] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:08:29] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:08:58] <ioxzev1z> Matt|home, you declare something exists, then define how it works. void foo(int, int); is a declaration, void foo(int x, int y) { } is a definition. Notice how the declaration doesn't have names for the arguments, which is perfectly fine.
[17:09:23] <ioxzev1z> The latter (if no declaration exists) is also a declaration
[17:09:37] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[17:09:51] <ioxzev1z> You would need to declare the function before use, but you can define it elsewhere if you want
[17:10:11] *** Joins: inlight (~inlight@user/inlight)
[17:11:24] <ioxzev1z> Also with scope, int main(void) { int x = 5; { int x = 10; } } as you can see there are two blocks, where the inner block hides the outer x, so in that block x == 10
[17:11:43] <ioxzev1z> ,cc int main(void) { int x = 5; { int x = 10; } }
[17:11:45] <candide> ioxzev1z: [warning: declaration of 'x' shadows a previous local [-Wshadow]] no output: x = 5
[17:11:49] *** Joins: slidercrank (~slidercra@user/slidercrank)
[17:12:30] *** Joins: namkeleser (~namkelese@101.179.128.103)
[17:13:09] *** Joins: lleo (~leo@188-206-108-114.mobile.kpn.net)
[17:13:57] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 240 seconds)
[17:14:15] <Matt|home> ty ioxzev1z 
[17:14:45] <Matt|home> what's correct practice in regards to including or excluding variable names in declarations and definitions
[17:15:20] <omegatron> you mean parameters ..?
[17:15:24] <Matt|home> yes
[17:15:39] <Matt|home> when i read a manpage for example they always include variable names
[17:15:42] <ioxzev1z> Up to you, if you have declarations in a .h and definitions in a .c it might help to use variable names in the .h for clarity, but names in declarations aren't a requirement
[17:15:44] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:15:47] <omegatron> I would always give them a designation, so the fellow readers knows what to expect
[17:15:49] *** Joins: et09 (~et09@user/et09)
[17:16:39] *** Joins: jinsun__ (~quassel@user/jinsun)
[17:16:40] <ioxzev1z> Matt|home, if someone sees void foo(int, char, void *) it might be hard to figure out what the arguments mean without searching for the definition, so you might want to give them names
[17:16:57] <ioxzev1z> However, if you had something like int max(int, int), that's fairly self-explanatory
[17:18:07] *** Joins: seninha (~seninha@user/seninha)
[17:18:34] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[17:18:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[17:18:41] <ioxzev1z> One thing however is that when you separate .h and .c you need to change the names in both files if you want consistency, which might be difficult to remember to do
[17:18:54] *** Joins: zat (~zat@191.23.60.220)
[17:19:28] *** Joins: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu)
[17:19:58] <omegatron> unless you get used to some self-discipline and have some certain "naming scheme"
[17:21:04] <omegatron> this is usually part of so called "coding style" - every company or human may have its own
[17:21:35] *** Quits: dsrt^ (~dsrt@wsip-98-188-240-142.mc.at.cox.net) (Remote host closed the connection)
[17:21:35] <ioxzev1z> omegatron, sure, but if you're working rapidly on a codebase and in .c you change some argument from size_t len to size_t dst_len to clarify the name, you might forget to change it in the .h so then you have size_t len in .h, size_t dst_len in .c. It would work fine but documentation might be written incorrectly
[17:21:36] *** Joins: fluter (~fluter@user/fluter)
[17:22:26] <omegatron> well .. you got to pour some love into your work ...
[17:22:34] <omegatron> meaning: do it right or leave it
[17:23:32] *** Quits: markb1 (~markb1@2600:1700:eb40:7ecf:671f:f146:9b7e:7b61) (Remote host closed the connection)
[17:23:37] <omegatron> but yes, to forget is human .. but there are tools to compenstate
[17:23:44] <omegatron> compensate
[17:23:49] <Learath2> One nice thing about this approach of splitting the declaration and definition is that it makes it very easy to skim through the interface
[17:24:05] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[17:24:16] <omegatron> yeah, this approach should be preferred under most circumstances
[17:24:56] *** Quits: lleo (~leo@188-206-108-114.mobile.kpn.net) (Quit: beyond time space in laws)
[17:25:34] <nomagno> beastie: I was going to post an assembly 6 line brute force method to find the answer to (x+3=2) without moving members around, however I had to go. In short: Yes, you can work with integers (trough checking for overflow and underflow, and conditional jumps based on that), but there are no default interfaces to output non-negative numbers. Not a huge drama
[17:25:51] <nomagno> just like you can on any Turing-complete CPU
[17:26:16] <nomagno> It is a toy CPU anyways, I found having memory simply be raw data was more portable and simple to implement.
[17:27:26] *** Quits: frost (~frost@user/frost) (Ping timeout: 245 seconds)
[17:27:26] *** Quits: random-nick (~random-ni@87.116.181.93) (Quit: quit)
[17:29:05] *** Quits: baltazar (~baltazar@84-236-9-28.pool.digikabel.hu) (Ping timeout: 256 seconds)
[17:29:05] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 256 seconds)
[17:30:43] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[17:31:08] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[17:31:55] *** Quits: alch (~alch@151.82.92.247) (Ping timeout: 256 seconds)
[17:33:11] *** Joins: gproto23 (~gproto23@user/gproto23)
[17:33:53] *** Joins: alch (~alch@151.57.101.150)
[17:37:54] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbfb-173.dhcp.inet.fi)
[17:38:43] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 256 seconds)
[17:39:07] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[17:39:24] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[17:41:30] *** Joins: meator (~meator@user/meator)
[17:42:20] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:46:25] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[17:48:09] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[17:48:16] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[17:49:24] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Read error: Connection reset by peer)
[17:50:14] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[17:50:32] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[17:52:03] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (Remote host closed the connection)
[17:52:17] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[17:58:14] <ioxzev1z> nomagno, isn't the only x for that -1?
[17:59:39] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[18:00:32] *** Quits: nicko (~iClass@222.211.28.110) (Quit: Konversation terminated!)
[18:00:41] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[18:00:57] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[18:02:10] *** Joins: inlight (~inlight@157.35.65.219)
[18:02:10] *** Quits: inlight (~inlight@157.35.65.219) (Changing host)
[18:02:10] *** Joins: inlight (~inlight@user/inlight)
[18:02:56] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:02:56] *** Joins: arinov (~arinov@213.194.126.155)
[18:04:48] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Remote host closed the connection)
[18:04:57] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:04:57] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:04:57] *** Joins: wroathe (~wroathe@user/wroathe)
[18:05:55] *** Joins: baltazar (~baltazar@91-83-35-151.pool.digikabel.hu)
[18:06:11] *** Joins: zat (~zat@191.23.60.220)
[18:10:00] *** Joins: namkeleser (~namkelese@101.179.128.103)
[18:12:45] *** Joins: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com)
[18:13:27] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:15:40] <nomagno> ioxzev1z: Which can also be stored as 255 with underflow level of 1
[18:16:31] <nomagno> "Doesn't deal with signed numbers" doesn't mean "Can't deal with signed numbers"
[18:17:15] *** Joins: jinsun (~quassel@user/jinsun)
[18:17:45] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:18:23] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[18:18:48] *** Joins: jinsun___ (~quassel@user/jinsun)
[18:20:37] *** Quits: jinsun__ (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[18:21:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[18:21:37] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 240 seconds)
[18:21:42] *** Joins: Klinda (~superleag@user/klinda)
[18:22:19] <ioxzev1z> Ah
[18:24:57] <nomagno> How to check if a substraction has underflow going on in my assembly: 
[18:24:57] <nomagno> `sub R1 R2; set FFFE FFFF; jcz 5; set [0] FFFC; halt; set [1] FFFC; halt;
[18:26:56] *** Quits: namkeleser (~namkelese@101.179.128.103) (Quit: Client closed)
[18:27:11] <nomagno> step by step: substract address 2 from address 1 (should be cmp, my bad. sub needs a third address). Put the underflow flag into the zero flag. Jump to instruction 5 (print 1) IF the zero flag is 0. Else continue execution (print 0).
[18:27:36] <nomagno> Effectively if the substraction results in a negative number, this prints 0. If it results in a positive number, it prints 1.
[18:29:35] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:31:53] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[18:32:41] <beastie> nomagno: i'm not sure, as I'm speaking from memory, but I think overflow requires sign change xor carry flag.
[18:33:29] <beastie> but I'm not sure.... 
[18:35:32] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[18:35:53] <nomagno> Well it's hard for subtractions to result in overflow.
[18:35:57] *** Quits: meator (~meator@user/meator) (Ping timeout: 256 seconds)
[18:36:13] <nomagno> But you can definitely use a regular 0/1 carry flag for addition overflow
[18:36:41] <beastie> substracting +10 - (-10) results in overflor (mod 10)
[18:37:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:37:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:37:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:38:57] <nomagno> There are no default instructions to handle signed operations, so ideally I'd automatically detect this in the corresponding subprocedure/macro
[18:39:19] <beastie> but do you have a subtraction or not?
[18:39:26] <nomagno> yes
[18:39:32] *** Quits: baltazar (~baltazar@91-83-35-151.pool.digikabel.hu) (Ping timeout: 240 seconds)
[18:40:05] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8)
[18:40:10] <nomagno> I have "cmp V1 V2", for not storing the results, and "sub V1 V2 R3", for storing it
[18:40:11] <beastie> you said that your machine was not supporting anything but unsigned numbers... so you don't operate on signs... you have only carry bit.
[18:40:46] <Matt|home> i've got two options for how i want to handle this, and im not sure which is more appropriate or if they're just different and im wasting my time. im writing a binary parser editor thingy. to my understanding, i can either fopen() a file and just use some read and write calls, or i can load it into memory with mmap. mmap still requires a file descriptor to work with. so either way, im using fopen to access the file?
[18:40:52] <nomagno> Well yeah underflow and overflow are a different thing than signedness
[18:41:12] <nomagno> They can be used to implement it without issues tough
[18:41:28] <omegatron> Matt: is your file of humonguous size?
[18:41:38] *** Joins: baltazar (~baltazar@178-164-190-44.pool.digikabel.hu)
[18:41:42] <beastie> Matt|home: what abount mmap() ??
[18:41:46] *** Joins: joe_ (~joe_@63.119.181.194)
[18:42:04] <beastie> you can close the file descriptor as soon as you have the memory segment attached.
[18:42:06] <Matt|home> well that's part of the question. should i create size limits? the idea is to write an objdump clone with some modifications, i dunno how objdump handles massive executables
[18:42:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:42:24] <omegatron> well .. look at its source code
[18:42:52] <Matt|home> and i really don't understand "file stream" one bit. is that C terminology or implementation specific..
[18:43:13] <beastie> Matt|home: if you are tied to 64bit arch then you have plenty of virtual memory space to do what you want.... but with 32bit you can be limited with big executables.
[18:43:30] <Matt|home> right, i'd like this to support both
[18:44:08] <beastie> file stream indeed was used to represent a stream of bits... some descriptor that gives you the bytes as you are able to read them.
[18:44:12] *** Joins: shivesh (~shivesh@user/shivesh)
[18:44:17] <nomagno> You can work with unsigned integers with one byte per number, signed integers with two bytes per number, and rational numbers with three bytes per number
[18:45:17] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[18:45:18] <Matt|home> yeah i don't know enough to dissect this.. great..
[18:45:46] <beastie> I don't understand why you do that (using one byte numbers) with unsigned and why do you require two bytes to do it with signed?
[18:45:48] <nomagno> Effectively, you can make subprocedures that work with numbers as complex as you want.
[18:46:02] *** Quits: neverfindme (~hayden@158.123.160.43) (Ping timeout: 240 seconds)
[18:46:27] <nomagno> beastie: I don't support signed operations period. However, you can, naturally, implement them anyways
[18:46:38] <nomagno> It's a matter of my VM being turing-complete
[18:47:10] *** Joins: arinov (~arinov@176.89.29.127)
[18:47:10] <nomagno> Not of it being comfortable
[18:48:33] <beastie> 32bit allows you only to map 4Gb of virtual memory, that is divided into segments for several things... kernel virtual space, shared libraries, text, data and stack... while you get ample space to hold your file if you want it mmap()ed, it is easy that you get your virtual address space unable to hold a segment big enough to hold completely a large executable.
[18:48:51] <beastie> with 64bit this problem doesn't exist.
[18:48:58] <omegatron> at least for now
[18:49:31] <beastie> well... I don't think we are going to need to expand to 128bit machines in a while.
[18:49:32] <demiurge> i think datasets do exist that are too big to mmap with 64 bits
[18:49:42] <demiurge> (though obviously they don't live on single machines)
[18:49:47] *** Quits: joe_ (~joe_@63.119.181.194) ()
[18:49:52] <beastie> yeah... but do it in pieces... 
[18:50:15] <beastie> the mmap() segment you get is just a window to the file... not the complete view.
[18:50:30] <Matt|home> hm i don't understand. im trying to pass one commandline argument to main() .. but argc is undefined. do i just need to do argc = 1 in main() ?
[18:50:42] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (Quit: WeeChat 3.4-dev)
[18:50:46] <beastie> ein?
[18:50:51] <demiurge> no you need to declare it as a parameter
[18:51:03] *** Joins: neverfindme (~hayden@158.123.160.43)
[18:51:06] <demiurge> int main(int argc, char **argv) { whatever }
[18:51:10] <Matt|home> right.. but
[18:51:14] <beastie> it would be nice to have a look how have you defined main() in your code.
[18:51:20] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[18:51:26] <Matt|home> main.. gets called.. and expects oh oh oh
[18:51:26] <Matt|home> oh
[18:51:27] <Matt|home> wait
[18:51:30] <Matt|home> ..........
[18:51:37] *** Joins: Tom^ (~Tom^@user/tom/x-0773808)
[18:51:50] <Matt|home> so im correct
[18:51:59] <beastie> youre correct?
[18:52:01] <beastie> sure?
[18:52:27] <Matt|home> int main(int argc, char *argv[]) { argc = 1; ...} and i can just access the first element in argv normally
[18:52:34] <Matt|home> i think
[18:52:38] * pragma- squints.
[18:52:44] <demiurge> stop wtf are you doing
[18:53:03] <beastie> no.... you cannot assign a value to argc, you are going to lose the value it is passed from the command line.
[18:53:05] <Matt|home> sigh. could somebody please show me an example of passing a single argument to main? like a filename?
[18:53:21] * pragma- stares.
[18:53:24] <Matt|home> like i wanna do ./myprog -filename
[18:53:50] <beastie> with that you will get argc == 2
[18:54:15] <Matt|home> im very confused.. argc is the number of arguments main is expected to be passed yes?
[18:54:23] <beastie> and argv[0] == "./myprog", argv[1] == "-filename" and argv[2] == NULL
[18:54:42] <beastie> yes... but that includes the program name... 
[18:54:49] <trenka> Matt|home: no
[18:54:50] <Bou> it is the number of arguments main *actually* got passed, not expects to get passed
[18:54:51] <Matt|home> it includes the program name. ok. 
[18:54:52] <Matt|home> no?
[18:55:03] <trenka> Matt|home: what Bou said
[18:55:48] *** Joins: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240)
[18:55:49] <Matt|home> oh. well isn't that a problem. wouldn't you be able to pass like a trillion arguments or something ridiculous?
[18:55:55] <demiurge> yes
[18:56:12] <Matt|home> so.. is there a way to forcefully limit the number of arguments that will be passed and accepted
[18:56:13] <Bou> if (argc != 2) print error and exit; else argv[1] is your filename
[18:56:24] <earnestly> Matt|home: (OS/kernel limits it, see ARG_MAX (in bytes, including environment)
[18:56:29] <omegatron> there is a maximum length (of bytes)
[18:56:42] <beastie> well... despite of the operating system limitations, yes... you can pass up to (let's say) 8Mb in arguments... a large amount of them... 
[18:56:43] <earnestly> There's also a limit of the size of an individual argument too
[18:56:45] <Matt|home> okay. got it
[18:56:59] <Matt|home> ty Bou & all
[18:57:24] <beastie> hmmm... I don't think there's a limit on the size of each argument.... only on the overal size of all.
[18:57:25] <omegatron> Matt: why don't you look into the source code of some other project, to see how they do it?
[18:57:39] <omegatron> yes, the overall size is limited
[18:57:40] <Matt|home> omegatron : looking at objdump right now, it's beyond me -_- 
[18:57:50] <beastie> hes
[18:58:19] <beastie> yes... we understand... objdump is just for real programmers (which prefer still do it in fortran iv)
[18:58:20] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[18:58:21] <omegatron> Matt: it seems with your limited knowledge, the task you have chosen is beyond your current capabilites - you should really read some books, tutorials or whatever to dive into the topic
[18:59:38] <beastie> you need to practice with normal programs (like the exercises from K&R, for example) and then you can complicate things with linker input files.
[18:59:42] <omegatron> start simple ..
[18:59:53] <Matt|home> it's just been a long time
[19:02:15] <beastie> a long time?
[19:02:31] *** Joins: superboot (~agentgasm@user/superboot)
[19:02:56] *** Quits: juliopcrj (~juliopcrj@177.44.227.40) (Quit: Leaving)
[19:03:25] <omegatron> maybe the source code of bc ( calculator program, https://git.yzena.com/gavin/bc ) is simple enough to use as a learning experience, together with the K&R book/exercises
[19:03:36] <Matt|home> i've been coding on and off for years and recently took a year and a .. half ish hiatus because of school. i have some free time now. it'll come back to me..
[19:03:43] <Matt|home> hopefully..
[19:03:47] *** Quits: Guest1693 (~vin@cortana.cs.wisc.edu) (Quit: WeeChat 2.8)
[19:04:47] <beastie> yeah... but how main() receives and processes parameters is a bit basic not to know... on some side it looks like you control a bit, but on other side it seems you need a very basic introduction.
[19:06:57] <Matt|home> i agree. im finishing this in two weeks even if it kills me tho :p
[19:07:42] <ioxzev1z> What are you writing?
[19:07:45] <omegatron> just out of curiosity: what modification of objdump you wish to do?
[19:10:10] <Matt|home> oh something im not qualified for. a long time ago i got pretty interested in security and malware design and thought it'd be cool to write one of each type, starting with a virus. had to read up a lot on elf files and how processes get loaded and handled in general. right now, i don't have any big aspirations beyond objdump clone except maybe with the ability to modify binaries with some target code or something. i actually did manage to 
[19:10:10] <Matt|home> write something a few years ago
[19:10:34] <Matt|home> where i was able to inject my own code, i think it just printed some hex number, but the program crashed after running and i haven't looked at it in a long time
[19:10:36] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:10:40] *** Joins: mh3f_ (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:10:49] <Matt|home> so tl;dr rn the objective is objdump clone
[19:12:34] *** Quits: mh3f_ (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Write error: Connection reset by peer)
[19:12:41] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:8c85:3d90:d3c9:3f6b) (Ping timeout: 252 seconds)
[19:13:06] *** Joins: mh3f_ (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:13:28] <Matt|home> thiiiis is.. most certainly wrong im sure of it..
[19:14:43] <beastie> you know there's a library to deal with ELF binaries?
[19:14:49] *** Quits: mh3f_ (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Client Quit)
[19:14:55] <beastie> (and COFF, etc)
[19:15:10] <Matt|home> yes yes i know, the purpose behind this is strictly to get back into coding
[19:15:16] <beastie> it's part of GNU binutils
[19:15:17] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 240 seconds)
[19:15:17] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[19:15:17] <Matt|home> and put some actual crap in my github page
[19:15:33] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[19:15:37] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[19:15:43] <Matt|home> iirc i used the pre existing ELF struct instead of writing my own
[19:15:54] *** Joins: bindu (~bindu@user/bindu)
[19:15:59] <beastie> then the best you can do is to start with simple problems, like you have recommended from K&R exercises.
[19:16:03] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[19:16:03] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Quit: Leaving)
[19:16:25] <beepbooptheory> ping
[19:16:35] <omegatron> peng
[19:16:57] <beastie> pang!
[19:17:29] *** Joins: arinov (~arinov@31.223.10.63)
[19:17:44] *** Joins: supajerm (~supajerm@gateway/vpn/pia/supajerm)
[19:20:22] <rindolf> Matt|home: https://github.com/shlomif/Freenode-programming-channel-FAQ/blob/master/FAQ_with_ToC__generated.md#i-want-to-learn-programming-which-language-should-i-start-with
[19:21:49] *** Quits: river (~My_user_n@tilde.team/user/river) (Ping timeout: 240 seconds)
[19:24:41] *** Quits: slidercrank (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[19:25:01] <Matt|home> thank you
[19:25:55] <Matt|home> https://pastebin.com/0pQcja2R <-- alright well this compiles without errors, but let's see if it actually works.. i think im passing the filename incorrectly..
[19:26:25] <pragma-> >infect
[19:28:19] <pragma-> FILE * isn't a file descriptor. It's an abstraction.
[19:28:28] <Matt|home> seems to work..
[19:28:34] *** Quits: shailangsa (~shailangs@host86-186-127-128.range86-186.btcentralplus.com) (Ping timeout: 260 seconds)
[19:29:37] *** Quits: arinov (~arinov@31.223.10.63) (Ping timeout: 240 seconds)
[19:29:55] <pragma-> C is not a "seems to work" language.
[19:30:06] <omegatron> PHP is ...  =D
[19:31:48] *** Joins: arinov (~arinov@176.89.29.127)
[19:32:52] <Matt|home> thus why im testing it.. i could have _sworn_ you couldn't pass arrays to functions.. yeah alright i'd better reread some stuff
[19:33:25] *** Quits: jenkins (~jenkins@user/jenkins) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[19:35:27] *** Joins: meator (~meator@user/meator)
[19:36:59] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[19:37:03] *** Joins: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com)
[19:40:01] *** Joins: jenkins (jenkins@user/jenkins)
[19:40:27] *** Joins: mrig (~mrig@user/mrig)
[19:42:28] <anddam>  /topic
[19:42:42] <anddam> sorry, had a space already there
[19:43:57] *** Quits: fe23 (~fe23@2409:8a34:468:83d0:88c0:c7c2:e4da:1da2) (Quit: fe23)
[19:43:57] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 240 seconds)
[19:44:14] *** Joins: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[19:44:27] *** Joins: lisbeths (~user@c-73-83-140-133.hsd1.wa.comcast.net)
[19:44:29] <retro> is there a useless C generator
[19:44:40] <retro> where it generates C code that does nothing basically
[19:44:43] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[19:45:13] <lisbeths> void main(){}
[19:45:58] <retro> but more than just that
[19:46:07] <retro> where you can tell it how much you want
[19:46:17] <lisbeths> do you mean a program that generate code that looks like it does something but ultimately does nothing and can be copy and paste it anywhere in the file?
[19:46:17] *** Quits: alch (~alch@151.57.101.150) (Ping timeout: 240 seconds)
[19:46:37] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[19:46:48] <retro> I guess
[19:46:59] <retro> I can copy and paste it manually if not
[19:47:07] <lisbeths> well what you can do is declare a bunch of variables and edit them around without doing anything to the rest of the program
[19:47:43] <novns> retro, there are some neural networks that were deeply trained on C sources
[19:47:56] <retro> send me
[19:48:03] <retro> this is what I mean
[19:48:06] <retro> i think
[19:48:07] <retro> AIA
[19:48:08] <retro> AI
[19:48:16] <novns> but this code will never compile
[19:48:25] *** Joins: alch (~alch@151.82.70.174)
[19:49:11] <novns> retro, I don't remember where I saw this, you can google
[19:49:13] <retro> it has to compie
[19:49:18] <retro> compile
[19:49:20] <retro> send me
[19:49:22] <retro> anyhow
[19:51:31] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:51:40] <lisbeths> I think what you are trying to do is to make a file look like it has more lines of code than it really does. Is that correct?
[19:51:50] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[19:51:53] <pragma-> I don't know why there isn't a paragraph to standardize main returning void. it should simply return 0 to the system.
[19:51:53] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[19:51:55] *** Joins: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[19:52:14] *** Joins: noonien (~noonien@user/noonien)
[19:53:36] <retro> yes
[19:53:46] <Bou> no, I like `float main()`
[19:54:26] *** Joins: shailangsa (~shailangs@host86-186-127-224.range86-186.btcentralplus.com)
[19:57:02] <retro> what if we do (float)int main{}
[19:57:25] <retro> or inside main just do a function call (float)main();
[19:58:24] <lisbeths> pragma-: this is why people want to return !0 https://xkcd.com/1172/
[19:59:54] *** Quits: MarcoFe (~marcofe@net-5-88-237-237.cust.vodafonedsl.it) (Quit: Konversation terminated!)
[20:03:06] *** Quits: joedoe47_ (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 260 seconds)
[20:03:33] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[20:04:26] <novns> retro, it's impossible to google
[20:04:37] <novns> those words are too common
[20:04:50] <novns> a lot of irrelevant articles
[20:05:04] <retro> thats how google is
[20:05:45] <retro> guess this will do https://picheta.me/obfuscator
[20:06:02] <retro> not exactually what I asked but
[20:13:25] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[20:13:43] *** Joins: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net)
[20:13:51] *** Joins: mahmutov (~mahmutov@5.176.0.124)
[20:14:11] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[20:14:35] *** Joins: noonien (~noonien@user/noonien)
[20:19:45] *** Joins: Charadon (~Charadon@155.138.164.183)
[20:21:46] *** Joins: Akiva (~Akiva@user/Akiva)
[20:22:44] *** Joins: random-nick (~random-ni@87.116.181.93)
[20:25:37] <ioxzev1z> pragma-, what do you mean?
[20:29:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[20:30:39] <ioxzev1z> Surely the point of void is that it doesn't return anything
[20:35:59] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Quit: Leaving)
[20:37:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-786b-4edf-d419-7d31.res6.spectrum.com)
[20:37:20] *** Joins: Guest56 (~Guest56@2c0f:ed28:504f:3630:203f:1a51:70a0:ae5e)
[20:37:46] *** Quits: Guest56 (~Guest56@2c0f:ed28:504f:3630:203f:1a51:70a0:ae5e) (Client Quit)
[20:40:10] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:43:37] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:47:46] *** Quits: sunsh1ne_warrior (~sunsh1ne_@46.148.141.240) (Quit: Konversation terminated!)
[20:47:52] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[20:48:41] *** Joins: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com)
[20:48:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:56:48] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[20:57:49] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[20:58:00] <Matt|home> wow. objdump just reads the entire contents into memory via mmap
[20:58:15] <Matt|home> https://github.com/CyberGrandChallenge/binutils/blob/master/binutils/objdump.c <-- line 1116
[20:58:47] <Matt|home> i don't understand how it handles that for large executables on 32 bit though..
[21:01:01] *** Quits: joedoe47 (~weechat@c-98-254-188-143.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[21:01:02] <apotheon> 10:00 < ioxzev1z> Surely the point of void is that it doesn't return anything
[21:01:10] <apotheon> Maybe the point is that what it returns has no type.
[21:01:37] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:01:39] <apotheon> . . . though the obvious way to return something with no type is to return nothing.
[21:01:40] *** Joins: Satin (uid193953@user/Seten)
[21:02:02] <Matt|home> ioxzev1z : void is kinda special, it's technically good practice (kinda) to include it in parameters where you're not passing anything
[21:02:35] *** Joins: Betal (~Betal@user/betal)
[21:03:22] <ioxzev1z> Matt|home, I was talking about him saying void should be allow for main and just return 0; which is wrong considering that void specifically means there is no return
[21:03:39] <Matt|home> yeah main has to be of type int i believe
[21:04:01] <Matt|home> it's more accurate to say there's no point in returning anything from a void function
[21:04:06] *** Quits: arinov (~arinov@176.89.29.127) (Ping timeout: 245 seconds)
[21:04:37] <ioxzev1z> No, it's more accurate to say that a function returning void does not return anything. There is no storage space for the return value of a void function because it doesn't return anything
[21:04:55] *** Quits: neverfindme (~hayden@158.123.160.43) (Client Quit)
[21:05:07] <ioxzev1z> ,cc void foo(void) { return; } int x = foo();
[21:05:08] <candide> ioxzev1z: error: void value not ignored as it ought to be
[21:05:20] <ioxzev1z> What value would x possibly have in the above?
[21:05:21] <Matt|home> ja
[21:05:30] <Matt|home> what u said is correct
[21:06:25] *** Quits: Charadon (~Charadon@155.138.164.183) (Remote host closed the connection)
[21:06:34] <_kimchi> How to determine the end of va_arg list?
[21:09:04] *** Joins: u0_a3912 (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[21:09:12] <ioxzev1z> _kimchi, have you read the manpage for va_arg?
[21:09:52] *** Joins: Charadon (~Charadon@155.138.164.183)
[21:10:03] *** Joins: tradar (~tradar@user/tradar)
[21:11:05] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-d54b-d9a4-abaf-8734.inf6.spectrum.com)
[21:11:09] <LeoNerd> Two main approaches. Either some inherent fact about the pre-valist arguments (e.g. getting to the end of a "format string", or just being told the count of elements), or by recognising some special "here is the end" element that won't appear in the middle; e.g. a final NULL at the end of a list of not-null elements
[21:13:05] *** Quits: u0_a3911 (~u0_a391@2600:380:8a58:cf0:2493:4043:34b2:e3c7) (Ping timeout: 268 seconds)
[21:20:32] <_kimchi> how about just using va_list next value until they end? Cause for now it looks like its working =D But as C is a not language that is "seems to work" one help me out. In my case for example while(value=va_arg(my_list, double)) {..}
[21:21:12] <_kimchi> It seems it goes through all the arguments user provided after the essential ones I declared in function arguments and then gets back to those
[21:21:26] *** jinsun___ is now known as jinsun
[21:21:53] *** Quits: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[21:23:55] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[21:24:05] <ioxzev1z> man va_arg: "If there is no next argument, or if type is not compatible with the type of the actual next  argument  (as promoted according to the default argument promotions), random errors will occur."
[21:24:18] *** Quits: tradar (~tradar@user/tradar) (Ping timeout: 276 seconds)
[21:24:39] *** Joins: tradar (~tradar@user/tradar)
[21:25:05] *** Joins: BSaboia (~bsaboia@187.18.140.125)
[21:25:50] <_kimchi> thought about appending a NULL at the end in the beginning of function, but that is not possible either
[21:26:17] <ioxzev1z> _kimchi, read LeoNerd's comment
[21:26:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:28:41] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[21:29:03] *** Quits: beepbooptheory (~mik-wsl@50.216.98.94) (Remote host closed the connection)
[21:29:26] *** Joins: ocb (~ocb@user/ocb)
[21:29:30] *** Quits: tradar (~tradar@user/tradar) (Client Quit)
[21:30:03] *** Joins: plastico (~plastico@neomutt/plastico)
[21:30:59] *** Quits: esselfe (~steph@user/esselfe) (Quit: Restarting)
[21:31:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 252 seconds)
[21:31:20] *** Joins: esselfe (~steph@user/esselfe)
[21:32:12] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[21:33:13] *** Quits: _kimchi (~kimchi@87.247.123.112) (Quit: Leaving)
[21:33:53] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[21:39:09] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[21:39:38] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[21:41:33] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Remote host closed the connection)
[21:41:47] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[21:42:23] *** Joins: cul8r (~cul8r@76.113.95.199)
[21:43:56] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[21:44:22] *** Quits: cul8r (~cul8r@76.113.95.199) (Client Quit)
[21:48:22] <nomagno> Does sizeof() work 'properly' in arrays accessed as struct pointer members (it returns the actual size of the array)?
[21:48:41] *** Parts: ocb (~ocb@user/ocb) ()
[21:48:41] *** Quits: kuoi (~kuoi@109.175.166.57) (Remote host closed the connection)
[21:48:52] <nomagno> Struct pointer members, if the struct pointer has been passed to a function
[21:49:41] <ioxzev1z> you mean s->arr? yeah assuming arr is char arr[20]; sizeof(s->arr) is 20
[21:49:50] <ioxzev1z> s/is/if arr is/
[21:49:53] <trenka> nomagno: sizeof of a pointer is size of the pointer
[21:50:05] <trenka> nomagno: sizeof of array is size of array
[21:51:05] <nomagno> argh, this disctinction between bare arrays and arrays inside pointers is one of the legacy things that bothers me the most bout C
[21:51:16] <nomagno> s/arrays inside pointers/arrays inside structs/
[21:51:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:51:33] <ioxzev1z> nomagno, what do you mean ? A struct is just a "wrapper" around data
[21:51:59] <ioxzev1z> There is nothing special about char bar[20]; in struct foo { char bar[20]; };
[21:52:00] <trenka> ,cc struct { int *p; int arr[10]; } s; printf("%zd %zd", sizeof(s.p), sizeof(s.arr));
[21:52:01] <nomagno> Well, arrays are not first class citizens in C. However you can just nullify that distinction if you wrap the array inside a struct
[21:52:02] <candide> trenka: 8 40
[21:52:27] <ioxzev1z> nomagno, think of structs as boxes containing data.
[21:52:57] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[21:53:04] <Franciman> hi all does C11 have something like https://en.cppreference.com/w/cpp/numeric/popcount ?
[21:53:04] <nomagno> It's more of a language design disagreement, not a lack of understanding
[21:53:05] <candide> Title of Franciman's link: std::popcount - cppreference.com
[21:53:20] <Franciman> that allows cross platform counting of 1 bits in a integer
[21:53:29] <Franciman> to possibly leverage fast cpu ops
[21:53:48] <ioxzev1z> Actually they are a little special, struct foo { char a[20]; }; struct foo bar(void) { struct foo f = { 0 }; return f; } struct foo f = bar();
[21:53:51] <ioxzev1z> Uh
[21:54:09] <ioxzev1z> ,cc struct foo { char a[20]; }; struct foo bar(void) { struct foo f = { 0 }; return f; } struct foo f = bar();
[21:54:11] <candide> ioxzev1z: no output: f = {a = '\0' <repeats 19 times>}
[21:54:17] <ioxzev1z> Return array from function
[21:55:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[21:55:38] <nomagno> Yes. My issue is that, while I understand that it would break compatibility, arrays should probably just be treated like this by default, or easily
[21:56:03] <nomagno> perhaps a new qualifier, 'clonable' or whatever, for arrays
[21:56:23] <nomagno> Something that makes direct or close-to-direct assignment possible
[21:56:29] *** Joins: jiffe (~jiffe@mail.nsab.us)
[21:58:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:58:36] *** Joins: carlavilla (~carlavill@2a0c:5a84:3407:5100:221:6bff:fe3b:cee4)
[21:58:51] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[22:00:20] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[22:00:24] <Franciman> i don't want to use C++ xd
[22:00:32] <Franciman> i guess I'll try inline assembly
[22:00:38] <Franciman> and requiescat in pace
[22:00:55] *** Joins: beepbooptheory (~mik-wsl@50.216.98.94)
[22:01:12] <nomagno> Do you really need this one optimization?
[22:01:42] <Franciman> yes I tested the for loop
[22:01:47] <Franciman> and it's quite a bit slower
[22:01:48] <nomagno> You know you can just use unsigned integers and use an AND and BITSHIFT or whatever to get the bit in question, right?
[22:01:51] <nomagno> Ah
[22:01:53] *** Joins: Akuli (~Akuli@87-94-111-147.bb.dnainternet.fi)
[22:02:07] <Franciman> ah no, I need to count the number of bits
[22:02:07] <nomagno> Well make sure to use a #ifdef !
[22:02:14] <Franciman> that are equal to 1
[22:02:17] <nomagno> Don't want to break the thingy on other architectures
[22:02:59] <Franciman> sure
[22:03:00] <Franciman> ty
[22:03:42] <nomagno> Franciman: The number of bits that are equal to 1? You can easily achieve that by doing an AND
[22:03:49] <nomagno> Doesn't sound any slower either
[22:04:12] <Franciman> enlighten me
[22:06:08] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Ping timeout: 268 seconds)
[22:06:15] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[22:06:21] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[22:08:25] *** Joins: john99 (~vmjua@138.62.221.87.dynamic.jazztel.es)
[22:09:19] *** Joins: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com)
[22:10:09] *** Quits: iomari891 (~iomari891@197.210.77.17) (Ping timeout: 256 seconds)
[22:11:00] <nomagno> Franciman: https://termbin.com/qgkr
[22:11:02] *** Joins: iomari891 (~iomari891@197.210.77.160)
[22:11:28] <Franciman> ah ok yes
[22:11:34] <Franciman> i need a for loop lol
[22:11:45] <Franciman> well thanks
[22:12:01] <Franciman> i found that gcc has a builtin operation
[22:12:10] <Franciman> even if I loathe being dependent on gcc
[22:13:30] *** Joins: sbrothy (~sbrothy@192038130164.mbb.telenor.dk)
[22:13:38] *** Quits: gothicserpent (~gothicser@204.152.215.249) (Ping timeout: 252 seconds)
[22:13:45] *** Quits: bongobrown (~bongobrow@cpe-76-185-215-2.satx.res.rr.com) (Remote host closed the connection)
[22:13:52] *** Joins: NEYi (~NEYi@109.251.216.38)
[22:13:53] <nomagno> This for loop translates to tops 10 instructions per number on any architecture to ever exist
[22:14:08] <Franciman> nice
[22:14:10] <nomagno> Without any significant optimization, :D
[22:14:10] <Franciman> then I want to try it
[22:14:20] <Franciman> thanks nomagno a lot
[22:14:30] <Franciman> well for me it will be 64 operations
[22:14:35] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[22:14:35] <nomagno> It even works on my crappy 15-instruction VM
[22:14:37] <Franciman> but it's still not much
[22:14:54] <nomagno> And fairly easy to hand-translate to assembly
[22:15:38] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[22:15:44] *** Joins: gothicserpent (~gothicser@204.152.216.121)
[22:16:23] *** Quits: iomari891 (~iomari891@197.210.77.160) (Ping timeout: 252 seconds)
[22:18:46] <Franciman> thanks nomagno 
[22:19:00] <Franciman> one more question, C doesn't have a standard 128bit integer, right?
[22:19:01] *** Joins: iomari891 (~iomari891@197.210.53.158)
[22:19:07] <ioxzev1z> Not iirc
[22:19:09] <Franciman> rip
[22:19:16] <Franciman> thanks
[22:19:23] <ioxzev1z> Could always do uint64_t x[2];
[22:25:31] *** Quits: kapil (~kapil@o-k.website) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[22:26:53] *** Joins: masterbuilder (~user@user/masterbuilder)
[22:27:20] *** Joins: kapil (~kapil@o-k.website)
[22:28:13] *** u0_a3912 is now known as Kit
[22:34:22] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
[22:36:32] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Quit: Leaving)
[22:37:06] *** Joins: X-Scale` (~ARM@206.46.158.5.rev.vodafone.pt)
[22:39:31] *** Quits: X-Scale (~ARM@31.22.167.4) (Ping timeout: 256 seconds)
[22:39:31] *** X-Scale` is now known as X-Scale
[22:40:50] *** Quits: cpuid (~cpuid@user/cpuid) (Quit: ZNC 1.8.2 - https://znc.in)
[22:41:39] *** Joins: cpuid (~cpuid@co5.at)
[22:41:39] *** Quits: cpuid (~cpuid@co5.at) (Changing host)
[22:41:39] *** Joins: cpuid (~cpuid@user/cpuid)
[22:42:57] <sham1> And for adding you either need to do some assembly or you split your number into 52-bit chunks and do addition with that. Relevant reading: https://www.chosenplaintext.ca/articles/radix-2-51-trick.html
[22:43:09] <sham1> Well, 51-bit chunks, but we
[22:43:21] *** Quits: mh3f (~mdhowle@cpe-98-25-217-234.sc.res.rr.com) (Quit: Leaving)
[22:45:49] <sham1> It eliminates carries (well, ish), makes it easier for the processor to pipeline it and you get nice performance out of it. And should be possible in straight ISO C in the veins
[22:45:54] *** Quits: BSaboia (~bsaboia@187.18.140.125) (Quit: This computer has gone to sleep)
[22:46:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 240 seconds)
[22:47:47] *** Joins: jiffe (~jiffe@mail.nsab.us)
[22:48:08] <sham1> And you can even vectorize the addition if you do that 2^51 radix trick
[22:48:24] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:49:23] <ioxzev1z> sham1, good link, thanks
[22:49:41] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:50:02] <sham1> Took me a bit to find it because for whatever reason, I hadn't bookmarked it, even though I do that for like all of my things
[22:50:53] *** Joins: cousteau (~cousteau@user/cousteau)
[22:53:02] *** Joins: meator (~meator@user/meator)
[22:54:12] <sham1> And the very neat thing about that is that it's faster, even with the conversion back and forth, than the add + adc chain
[22:56:37] *** Joins: strajder (~strajder@user/strajder)
[23:00:52] *** Quits: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof) (Quit: WeeChat 3.3)
[23:01:50] *** Joins: koffeinfriedhof (~koffeinfr@ubuntuusers/moderation/koffeinfriedhof)
[23:03:19] *** Joins: moog (~moog@107.77.244.45)
[23:06:39] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[23:13:26] <MrMobius> strange question maybe but do jumps in C code always go to an address with a label in the resulting assembly? ignoring function pointers and other things where the pointer can change at runtime
[23:15:11] *** Quits: jkl1337 (~jkl@user/jkl) (Quit: Gone.)
[23:16:22] *** Joins: seninha (~seninha@user/seninha)
[23:16:32] *** Joins: jkl (~jkl@user/jkl)
[23:17:28] *** Joins: slidercrank (~slidercra@user/slidercrank)
[23:17:57] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-786b-4edf-d419-7d31.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:18:41] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 245 seconds)
[23:19:13] <sham1> What do you mean
[23:21:44] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (Remote host closed the connection)
[23:22:39] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[23:23:49] *** Quits: zat (~zat@191.23.60.220) (Ping timeout: 256 seconds)
[23:27:50] *** Quits: xa0s (~xa0s@mab.sdf.org) (Quit: leaving)
[23:34:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-555a-1142-3fc2-3a5f.res6.spectrum.com)
[23:37:39] *** Quits: nicode (~nic@2607:f2c0:9417:4c00:c788:aed4:9339:c885) (Ping timeout: 250 seconds)
[23:39:49] *** Joins: nicode (~nic@2607:f2c0:9422:4500:c3a0:cf3e:273a:1698)
[23:41:08] *** Joins: inlight (~inlight@157.35.69.112)
[23:41:08] *** Quits: inlight (~inlight@157.35.69.112) (Changing host)
[23:41:08] *** Joins: inlight (~inlight@user/inlight)
[23:41:44] *** Quits: soul-bw (~uknown@2a02-a456-85ad-1-d5dc-ebfc-cde-f122.fixed6.kpn.net) (Read error: Connection reset by peer)
[23:42:08] *** Joins: vicfred (~vicfred@user/vicfred)
[23:45:56] *** Quits: alch (~alch@151.82.70.174) (Read error: Connection reset by peer)
[23:49:50] *** Joins: alch (~alch@151.82.95.142)
[23:50:42] *** Quits: ko (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:52:29] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[23:53:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:54:37] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:56:28] *** Joins: ckdCreations (~ckdCreati@147.55.130.32)
[23:57:01] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-555a-1142-3fc2-3a5f.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:58:07] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com)
[23:58:14] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-60a6-7749-daab-1d70.res6.spectrum.com) (Client Quit)
[23:59:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 240 seconds)
