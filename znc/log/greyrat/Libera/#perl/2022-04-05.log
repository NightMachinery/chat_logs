[00:00:01] *** Joins: sokan (~sokan@2a02:587:9e11:bc00:227:eff:fe16:865d)
[00:02:15] *** Quits: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:02:19] <simcop2387> f for respect?
[00:02:33] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[00:02:39] <huf> that's not the right order
[00:03:57] *** Joins: veesh (~veesh@5.28.154.27)
[00:06:28] <leont> ether: ot
[00:06:35] <leont> ether: it's not that hard to pronounce
[00:08:55] *** Joins: morte_ (~user@181.114.17.106)
[00:11:51] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) (Remote host closed the connection)
[00:11:53] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 246 seconds)
[00:12:44] *** Quits: zacts (~zacts@user/zacts) (Quit: Client closed)
[00:15:45] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:16:21] *** Joins: rgrinberg (~textual@177.248.158.166)
[00:17:05] * GumbyPAN CPAN Upload: Dancer2-Plugin-FormValidator-0.21 by ALEXPAN https://metacpan.org/release/ALEXPAN/Dancer2-Plugin-FormValidator-0.21
[00:18:55] *** Joins: rawley (~rawley@142.99.241.242)
[00:23:16] *** Joins: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr)
[00:23:34] *** Quits: kaitlyn03245 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[00:23:52] *** Joins: kaitlyn03245 (~kaitlyn@user/kaitlyn)
[00:24:22] *** Quits: kaitlyn03245 (~kaitlyn@user/kaitlyn) (Client Quit)
[00:24:38] *** Joins: kaitlyn03245 (~kaitlyn@user/kaitlyn)
[00:25:40] *** Joins: proller (~p@2a02:6b8:b081:1214::1:2d)
[00:27:07] * GumbyPAN CPAN Upload: Data-Dumper-Interp-2.25 by JIMAVERA https://metacpan.org/release/JIMAVERA/Data-Dumper-Interp-2.25
[00:28:00] *** Joins: zhmylove (~zhmylove@178.252.127.211)
[00:30:23] *** Quits: ekathva (~ekathva@2001:999:250:8f1f:9d72:5a3d:d0:fe01) (Quit: Leaving)
[00:33:58] *** Joins: mattil (~mattil@87-92-46-217.bb.dnainternet.fi)
[00:35:47] *** Quits: cstls (~user@2603-7081-0800-4824-bd31-cecc-5003-f8fe.res6.spectrum.com) (Remote host closed the connection)
[00:38:14] *** Quits: ovid (~ovid@laubervilliers-659-1-13-124.w80-11.abo.wanadoo.fr) ()
[00:38:25] *** Quits: mattil (~mattil@87-92-46-217.bb.dnainternet.fi) (Ping timeout: 248 seconds)
[00:43:17] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:d52e:866a:6f3a:60a1) (Ping timeout: 256 seconds)
[00:46:41] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 256 seconds)
[00:54:05] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[00:56:23] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[01:01:43] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Changing host)
[01:01:43] *** Joins: yano (~yano@ircpuzzles///////////somanyslashes)
[01:01:50] *** Quits: yano (~yano@ircpuzzles///////////somanyslashes) (Changing host)
[01:01:50] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[01:03:02] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[01:03:17] *** Quits: jgaz (~jgaz@2600:8805:d980:16e:2e0:4cff:fe00:e201) (Quit: Leaving)
[01:04:00] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[01:04:35] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Quit: MEATBOT listens not to your cries for mercy. ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:04:35] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:04:35] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:04:35] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:04:35] *** Quits: perldoc (~perldoc@24.88.46.213) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[01:04:37] *** Quits: kaitlyn03245 (~kaitlyn@user/kaitlyn) (Quit: The Lounge - https://thelounge.chat)
[01:05:42] *** Joins: kaitlyn03245 (~kaitlyn@user/kaitlyn)
[01:05:54] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 272 seconds)
[01:06:47] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[01:07:11] * GumbyPAN CPAN Upload: Dancer2-Plugin-FormValidator-0.22 by ALEXPAN https://metacpan.org/release/ALEXPAN/Dancer2-Plugin-FormValidator-0.22
[01:07:50] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[01:08:18] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[01:09:18] *** Joins: perldoc (~perldoc@2603-6081-6402-7816-0000-0000-0000-0d8f.res6.spectrum.com)
[01:10:12] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[01:10:12] *** ChanServ sets mode: +v perlbot
[01:12:58] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[01:14:19] *** Joins: perlbot_ (~perlbot@perlbot/bot/simcop2387/perlbot)
[01:14:19] *** ChanServ sets mode: +v perlbot_
[01:15:15] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 256 seconds)
[01:15:57] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[01:16:15] *** perlbot_ is now known as perlbot
[01:20:05] <simcop2387> perlbot: hi
[01:20:07] <perlbot> simcop2387: hello
[01:30:41] *** Quits: bmeneg (~bmeneg@131.100.62.124) (Quit: Konversation terminated!)
[01:30:41] *** Quits: bit4bit (~bit4bit@190.128.123.78) (Read error: Connection reset by peer)
[01:31:05] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[01:33:53] *** Quits: magla (~gelignite@d5365b83.access.ecotel.net) (Quit: Stay safe!)
[01:34:43] *** Quits: martinus__ (~martin@139.30.201.77.rev.sfr.net) (Ping timeout: 260 seconds)
[01:43:16] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:46:05] *** Joins: ircuser-1 (~Johnny@c-71-193-246-4.hsd1.or.comcast.net)
[01:50:17] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:55:18] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 272 seconds)
[02:01:48] *** Quits: jpn (~jpn@user/jpn) (Quit: Lost terminal)
[02:02:50] *** Quits: morte_ (~user@181.114.17.106) (Ping timeout: 246 seconds)
[02:03:44] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 268 seconds)
[02:17:44] *** Joins: whynot (~whynot@37.73.48.35)
[02:29:37] *** Joins: hurl (~hurl@212.183.219.210.dyn.user.ono.com)
[02:31:04] *** Quits: n1to (~n1to@user/n1to) (Quit: Leaving)
[02:40:47] *** Quits: hurl (~hurl@212.183.219.210.dyn.user.ono.com) (Quit: Leaving...)
[02:41:21] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 268 seconds)
[02:41:52] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Remote host closed the connection)
[02:43:26] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[02:44:08] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[02:45:55] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[02:46:00] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:46:01] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[02:48:56] *** Quits: haj1 (~haj@p200300eda707e000499ddefd12113287.dip0.t-ipconnect.de) (Quit: Leaving.)
[02:51:17] *** Joins: rgrinberg (~textual@177.248.158.166)
[02:52:01] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Quit: Awaru)
[02:52:32] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[02:57:46] *** Quits: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net) (Quit: Konversation terminated!)
[02:59:02] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:16:25] * GumbyPAN CPAN Upload: Fsdb-3.0 by JOHNH https://metacpan.org/release/JOHNH/Fsdb-3.0
[03:23:13] *** Quits: murrayn (~murray@static.38.4.181.135.clients.your-server.de) (Changing host)
[03:23:13] *** Joins: murrayn (~murray@user/murrayn)
[03:25:22] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Quit: Awaru)
[03:33:48] *** Joins: pizdets (~pizdets@183.182.111.118)
[03:34:09] *** Quits: pizdets_ (~pizdets@183.182.115.90) (Ping timeout: 265 seconds)
[03:36:07] *** Quits: Pali (~pali@user/pali) (Ping timeout: 256 seconds)
[03:42:44] *** Quits: todo75 (~todo75@user/todo75) (Remote host closed the connection)
[03:48:29] *** Quits: fwg (~fwg@user/fwg) (Quit: .oO( zzZzZzz ...)
[03:51:29] * GumbyPAN CPAN Upload: Test2-Harness-1.000117 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000117
[03:53:30] *** Quits: dwalker (~dwalker@58.177.241.177) ()
[03:53:54] *** Joins: dwalker (~dwalker@58.177.241.177)
[04:06:39] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[04:07:40] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[04:21:02] *** Joins: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu)
[04:26:42] *** Joins: Trigon (~reuben@144.39.114.115)
[04:36:39] *** Joins: riceandb1ans (~zach@dev07.raasta.org)
[04:36:57] *** Joins: Nei_ (~ailin@openSUSE/member/ailin-nemui)
[04:37:02] *** Joins: gloin_ (~gloin@user/gloin)
[04:37:35] *** Joins: Malin8 (lounge@pirate.pt)
[04:37:41] *** Joins: quernd8 (~quernd@boethin.uberspace.de)
[04:38:07] *** Quits: e1f (~user@user/e1f) (Read error: Connection reset by peer)
[04:38:15] *** Joins: e1f (~user@141.117.1.180)
[04:38:16] *** Quits: jelly (~me@user/jelly) (Remote host closed the connection)
[04:38:18] *** Quits: gloin (~gloin@user/gloin) (Read error: Connection reset by peer)
[04:38:32] *** Quits: blinky42 (~quassel@user/blinky42) (Read error: Connection reset by peer)
[04:38:41] *** Quits: Nei (~ailin@openSUSE/member/ailin-nemui) (Ping timeout: 256 seconds)
[04:39:11] *** Quits: Malin (lounge@pirate.pt) (Read error: Connection reset by peer)
[04:39:11] *** Malin8 is now known as Malin
[04:39:15] *** Quits: leosilva (~leosilva@canonical/leosilva) (Ping timeout: 256 seconds)
[04:39:41] *** Joins: blinky42 (~quassel@jabber.blinkylight.net)
[04:39:41] *** Quits: blinky42 (~quassel@jabber.blinkylight.net) (Changing host)
[04:39:41] *** Joins: blinky42 (~quassel@user/blinky42)
[04:39:49] *** Quits: rorx (~rorx@cpe-65-24-161-82.columbus.res.rr.com) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: riceandbeans (~zach@user/riceandbeans) (Ping timeout: 256 seconds)
[04:39:49] *** Quits: quernd (~quernd@boethin.uberspace.de) (Ping timeout: 256 seconds)
[04:39:49] *** quernd8 is now known as quernd
[04:40:48] *** Joins: rgrinberg (~textual@177.248.158.166)
[04:41:54] *** Nei_ is now known as Nei
[04:42:53] *** Joins: bingos_ (bitbucket@cabbage.bingosnet.org)
[04:42:57] *** Joins: gordonfish- (~gordonfis@user/gordonfish)
[04:43:13] *** Quits: brunoramoslu (~brunoramo@94.252.122.42) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: noctuks (9wxBRvrIcP@user/noctux) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: sivoais (~zaki@199.19.225.239) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: dg (~dgl@dg.wtf) (Ping timeout: 256 seconds)
[04:43:13] *** Quits: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: timlegge (~quassel@134.41.65.158) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Soltis (~anon@c-73-3-82-11.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: ingy (~ingy@143.244.187.20) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Lynx_ (~x@fuchshai.geomar.de) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: arcanez (~arcanez@warpedreality.org) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: a3r0 (~aero@61.100.184.210) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: buZz (~buzz@sky.thebigblue.tk) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: Ekho (~Ekho@user/ekho) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: gordonfish (~gordonfis@user/gordonfish) (Ping timeout: 256 seconds)
[04:43:47] *** Quits: bnjf (~bnjf@vm.bnjf.id.au) (Ping timeout: 256 seconds)
[04:44:16] *** Joins: timlegge (~quassel@134.41.65.158)
[04:44:17] *** gordonfish- is now known as gordonfish
[04:44:21] *** Quits: sobukus (~sobukus@sourcemage/mage/sobukus) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: APic (apic@apic.name) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: Darxus (~darxus@panic.chaosreigns.com) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: romel_ (~romel@romel.org.ua) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: BinGOs (~bitbucket@user/bingos) (Ping timeout: 256 seconds)
[04:44:21] *** Quits: tyep (~hatseflat@hatsuseno.rootaccess.nl) (Ping timeout: 256 seconds)
[04:44:31] *** bingos_ is now known as BinGOs
[04:45:04] *** Joins: sivoais (~zaki@199.19.225.239)
[04:45:05] *** Joins: torbjorn_ (~torbjorn@88.81-166-205.customer.lyse.net)
[04:45:09] *** Joins: buZz (~buzz@sky.thebigblue.tk)
[04:45:09] *** Joins: noctuks (mk6gDPckYi@user/noctux)
[04:45:22] *** Joins: bnjf (~bnjf@vm.bnjf.id.au)
[04:45:26] *** Joins: a3r0 (~aero@61.100.184.210)
[04:45:33] *** buZz is now known as Guest6184
[04:45:34] *** Joins: Soltis (~anon@c-73-3-82-11.hsd1.ut.comcast.net)
[04:45:39] *** Joins: Lynx_ (~x@fuchshai.geomar.de)
[04:45:44] *** Joins: sobukus (~sobukus@sourcemage/mage/sobukus)
[04:45:45] *** Quits: BinGOs (bitbucket@cabbage.bingosnet.org) (Changing host)
[04:45:45] *** Joins: BinGOs (bitbucket@user/bingos)
[04:45:45] *** Joins: tyep (~hatseflat@hatsuseno.rootaccess.nl)
[04:45:47] *** Joins: Darxus (~darxus@panic.chaosreigns.com)
[04:45:51] *** Joins: romel (~romel@romel.org.ua)
[04:47:32] *** Joins: jayray (~jayray@user/jayray)
[04:47:48] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:48:58] *** Joins: dg (~dgl@dg.wtf)
[04:49:50] *** Joins: rorx_ (~rorx@cpe-65-24-161-82.columbus.res.rr.com)
[04:52:21] *** Joins: leosilva (~leosilva@canonical/leosilva)
[04:53:06] *** Joins: Ekho (~Ekho@user/ekho)
[04:54:21] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[04:55:23] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[04:55:23] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[04:56:12] *** Joins: APic (~apic@apic.name)
[04:56:26] *** Joins: brunoramoslu (~brunoramo@94.252.122.42)
[04:56:53] *** Joins: arcanez (~arcanez@warpedreality.org)
[04:58:00] *** Joins: ingy (~ingy@143.244.187.20)
[04:58:15] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[04:59:41] *** Joins: jelly (jelly@user/jelly)
[05:02:12] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:13:17] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[05:17:53] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[05:19:00] *** Joins: rgrinberg (~textual@177.248.158.166)
[05:19:10] *** Guest6184 is now known as buZz
[05:27:14] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[05:30:49] *** Joins: monkey_ (~user@190.104.116.153)
[05:36:41] * GumbyPAN CPAN Upload: libwww-perl-6.62 by OALDERS https://metacpan.org/release/OALDERS/libwww-perl-6.62
[05:45:57] *** Quits: whynot (~whynot@37.73.48.35) (Quit: Lost terminal)
[05:54:07] *** Joins: fwg (~fwg@user/fwg)
[05:54:42] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 272 seconds)
[06:03:27] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:07:52] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[06:08:17] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[06:14:23] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:14:24] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[06:14:37] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[06:16:05] *** Joins: wwalker (~wwalker@64.225.18.84)
[06:22:55] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:37:42] *** Joins: Kimm0n0 (~Kimmono@56.81-166-244.customer.lyse.net)
[06:39:20] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 246 seconds)
[06:39:43] *** Joins: silug2 (~silug@068-188-018-154.biz.spectrum.com)
[06:39:57] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 256 seconds)
[06:39:57] *** silug2 is now known as silug
[06:40:04] *** Joins: renihs_ (~renihs@89.58.15.194)
[06:40:08] *** Joins: Lartza_ (~lartza@user/lartza)
[06:40:11] *** Joins: quesker_ (idnet@2600:3c01::f03c:91ff:feac:4ce2)
[06:40:31] *** Quits: quesker (~idnet@mail.89vx.net) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: vague (~vague@irssi/staff/vague) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: Lartza (lartza@user/lartza) (Ping timeout: 256 seconds)
[06:40:31] *** Quits: renihs (~renihs@89.58.15.194) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: noctux (~noctux@user/noctux) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: Kimmono (~Kimmono@56.81-166-244.customer.lyse.net) (Ping timeout: 256 seconds)
[06:41:05] *** Quits: klys (~mdasoh@show.op8.us) (Ping timeout: 256 seconds)
[06:41:19] *** quesker_ is now known as quesker
[06:41:39] *** Quits: przemoc (~przemoc@user/przemoc) (Ping timeout: 256 seconds)
[06:41:39] *** Quits: pekster (~rewt@user/pekster) (Ping timeout: 256 seconds)
[06:42:15] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[06:42:17] *** Joins: vague (~vague@irssi/staff/vague)
[06:42:58] *** Joins: klys (~mdasoh@show.op8.us)
[06:43:03] *** Joins: tusko (~yeurt@user/tusko)
[06:43:12] *** Joins: pekster (~rewt@user/pekster)
[06:43:13] *** Joins: przemoc (~przemoc@89-72-24-4.dynamic.chello.pl)
[06:43:13] *** Quits: przemoc (~przemoc@89-72-24-4.dynamic.chello.pl) (Changing host)
[06:43:13] *** Joins: przemoc (~przemoc@user/przemoc)
[06:43:22] *** Joins: noctux (~noctux@user/noctux)
[06:54:41] *** Joins: rgrinberg (~textual@177.248.158.166)
[07:13:59] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 246 seconds)
[07:28:41] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:28:41] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 246 seconds)
[07:35:55] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[07:55:29] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:55:30] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[07:56:37] *** Quits: e1f (~user@141.117.1.180) (Changing host)
[07:56:37] *** Joins: e1f (~user@user/e1f)
[07:56:53] *** Quits: monkey_ (~user@190.104.116.153) (Remote host closed the connection)
[08:02:19] *** Quits: az103 (~az103@071-087-062-195.res.spectrum.com) (Ping timeout: 260 seconds)
[08:02:47] *** Joins: az103 (~az103@071-087-062-195.res.spectrum.com)
[08:07:52] *** rorx_ is now known as rorx
[08:09:15] *** Joins: fstd_ (~fstd@xdsl-87-78-201-176.nc.de)
[08:09:19] *** Joins: Trigon (~reuben@144.39.114.115)
[08:12:12] *** Quits: fstd (~fstd@xdsl-89-0-80-77.nc.de) (Ping timeout: 240 seconds)
[08:17:58] *** Quits: gast0n (~g4570n@user/gast0n) (Quit: Bye, see you soon! 👋)
[08:21:53] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 246 seconds)
[08:22:14] *** Quits: Martchus_ (~martchus@dynamic-095-114-114-041.95.114.pool.telefonica.de) (Ping timeout: 246 seconds)
[08:22:29] *** Joins: Martchus (~martchus@dynamic-077-009-048-048.77.9.pool.telefonica.de)
[08:38:57] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 256 seconds)
[08:38:57] *** Quits: peetee (c0ce52d876@user/peetee) (Ping timeout: 256 seconds)
[08:38:57] *** Quits: overrider_ (~overrider@user/overrider) (Ping timeout: 256 seconds)
[08:40:42] *** Joins: overrider_ (~overrider@user/overrider)
[08:40:47] *** Joins: zakame (~zakame@user/zakame)
[08:41:01] *** Quits: az103 (~az103@071-087-062-195.res.spectrum.com) (Ping timeout: 240 seconds)
[08:42:16] *** Joins: az103 (~az103@071-087-062-195.res.spectrum.com)
[08:43:08] *** Joins: ekathva (~ekathva@2001:999:250:8f1f:76db:3839:8c62:de89)
[08:53:12] *** Quits: az103 (~az103@071-087-062-195.res.spectrum.com) (Ping timeout: 268 seconds)
[08:53:36] *** Joins: az103 (~az103@071-087-062-195.res.spectrum.com)
[09:01:48] *** Quits: az103 (~az103@071-087-062-195.res.spectrum.com) (Remote host closed the connection)
[09:02:57] *** Quits: japh (~scp1@user/japh) (Ping timeout: 248 seconds)
[09:03:15] *** Joins: japh (~scp1@user/japh)
[09:05:43] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:07:00] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[09:07:25] *** Joins: fling (~fling@user/fling)
[09:14:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:31:53] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[09:33:46] *** Joins: KaitoDaumoto (Frat@user/kaitodaumoto)
[09:43:46] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[09:43:46] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 268 seconds)
[09:45:45] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[09:48:43] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:50:37] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[09:52:57] *** Quits: revhippie (~jdavis@097-081-163-065.res.spectrum.com) (Ping timeout: 252 seconds)
[09:53:25] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[09:56:07] *** Quits: llh (~UPP@user/llh) (Quit: :::: ( UPP ) ::::)
[09:58:25] *** Joins: revhippie (~jdavis@097-081-163-065.res.spectrum.com)
[09:58:27] *** Joins: Guest567 (~Guest567@18.31.13.80)
[10:04:43] *** Joins: wuseman (~wuseman@user/wuseman)
[10:08:05] *** Joins: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi)
[10:10:58] *** Quits: willthechill (~willthech@2600:1700:8c61:3ed0:4c02:f151:a5e3:57bd) (Ping timeout: 260 seconds)
[10:11:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[10:13:17] *** Joins: fling (~fling@user/fling)
[10:16:16] *** Joins: jplesnik (jplesnik@nat-pool-brq-t.redhat.com)
[10:16:16] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[10:22:03] *** Quits: mattil (~mattil@d54vzm2ccn6pv72-8rz-4.rev.dnainternet.fi) (Remote host closed the connection)
[10:32:14] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[10:33:31] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:33:37] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[10:34:32] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[10:35:19] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:35:26] *** Quits: mattil (~mattil@helsinki.portalify.com) (Read error: Connection reset by peer)
[10:35:39] *** Joins: mattil (~mattil@helsinki.portalify.com)
[10:53:11] *** Joins: Sauvin (~sauvin@about/linux/staff/sauvin)
[10:53:26] *** Joins: mexen (uid495612@user/mexen)
[10:55:25] *** Joins: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de)
[10:58:33] *** Joins: cuhela (~cuhela@188.119.45.227)
[11:03:32] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[11:14:43] *** Joins: haj1 (~haj@p200300eda707e000c2dea2d721dcbbd6.dip0.t-ipconnect.de)
[11:14:59] *** Quits: Guest567 (~Guest567@18.31.13.80) (Quit: Client closed)
[11:15:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[11:17:26] *** Joins: fling (~fling@user/fling)
[11:18:06] *** Joins: tobybl (~tobybl@132.202.200.146.dyn.plus.net)
[11:20:44] *** Quits: cuhela (~cuhela@188.119.45.227) (Quit: Leaving)
[11:23:06] *** Joins: mixfix41 (~sdenynine@user/mixfix41)
[11:26:41] *** Quits: randir (~randir@95-31-138-202.broadband.corbina.ru) (Remote host closed the connection)
[11:28:39] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[11:44:29] *** Joins: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[11:53:49] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[11:55:02] *** Quits: andrzejku (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 246 seconds)
[11:55:27] *** Joins: tobybl_ (~tobybl@132.202.200.146.dyn.plus.net)
[11:57:21] *** Quits: tobybl (~tobybl@132.202.200.146.dyn.plus.net) (Ping timeout: 248 seconds)
[12:02:40] *** Joins: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com)
[12:05:13] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Ping timeout: 256 seconds)
[12:13:35] *** Quits: Awaru (Awaru@gateway/vpn/airvpn/awaru) (Ping timeout: 246 seconds)
[12:15:10] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[12:19:12] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[12:19:14] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[12:19:32] *** Joins: fling (~fling@user/fling)
[12:20:24] *** Joins: epony (epony@user/epony)
[12:22:52] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 268 seconds)
[12:23:07] *** Joins: Awaru (Awaru@gateway/vpn/airvpn/awaru)
[12:31:37] *** Quits: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[12:31:44] *** Joins: Manderson_ (manderson@gateway/vpn/protonvpn/manderson)
[12:32:03] *** Quits: Trigon (~reuben@144.39.114.115) (Ping timeout: 260 seconds)
[12:33:15] *** Joins: Smedles (~quassel@2403-580d-1--aaa1-59ff-fe53-1a69.ip6.aussiebb.net)
[12:33:18] *** Joins: ccntrq (~Thunderbi@2a01:e34:eccb:b060:de80:e6ed:5bb7:2742)
[12:34:09] *** Quits: Manderson (manderson@gateway/vpn/protonvpn/manderson) (Ping timeout: 248 seconds)
[12:36:13] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Ping timeout: 260 seconds)
[12:37:57] *** Joins: Pali (~pali@user/pali)
[12:52:14] *** Quits: mweckbecker (~matthias@weckbecker.name) (Ping timeout: 260 seconds)
[12:55:56] *** Joins: TweetiePooh (~richard@cpc75386-sotn16-2-0-cust456.15-1.cable.virginm.net)
[12:57:50] *** Joins: mweckbecker (~matthias@weckbecker.name)
[13:01:50] *** Joins: jpn (~jpn@user/jpn)
[13:01:51] *** Joins: jplesnik__ (jplesnik@nat-pool-brq-t.redhat.com)
[13:01:51] *** jplesnik__ is now known as jplesnik
[13:04:13] *** Quits: jplesnik_ (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 240 seconds)
[13:08:19] *** Joins: art1 (~romeyke@p200300ccdf094d0064a2a83e31b49835.dip0.t-ipconnect.de)
[13:09:17] *** Joins: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz)
[13:23:26] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[13:23:46] *** Joins: fling (~fling@user/fling)
[13:27:33] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[13:32:13] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[13:32:55] *** Quits: zhmylove (~zhmylove@178.252.127.211) (Quit: Leaving)
[13:45:56] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[13:51:01] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[13:52:33] *** Joins: sokan_ (~sokan@athedsl-304997.home.otenet.gr)
[13:54:08] *** Quits: sokan (~sokan@2a02:587:9e11:bc00:227:eff:fe16:865d) (Ping timeout: 268 seconds)
[13:54:08] *** sokan_ is now known as sokan
[14:02:09] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 248 seconds)
[14:04:08] *** Joins: zakame (~zakame@user/zakame)
[14:06:25] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[14:10:03] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[14:11:45] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 248 seconds)
[14:12:30] *** Quits: skrzyp (~skrzyp@skrzyp.net) (Ping timeout: 272 seconds)
[14:19:08] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Quit: emanuele6)
[14:21:23] * GumbyPAN CPAN Upload: Sub-Quote-2.006_007 by HAARG https://metacpan.org/release/HAARG/Sub-Quote-2.006_007
[14:25:11] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Ping timeout: 252 seconds)
[14:26:23] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:27:30] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[14:27:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[14:29:40] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[14:29:41] *** Joins: fling (~fling@user/fling)
[14:30:56] *** Joins: vanfanel640 (~vanfanel6@user/vanfanel64)
[14:32:33] *** Quits: Frosku (~frosku@user/frosku) (Ping timeout: 256 seconds)
[14:32:59] *** Joins: Frosku (~frosku@user/frosku)
[14:33:41] *** Quits: vanfanel64 (~vanfanel6@user/vanfanel64) (Ping timeout: 256 seconds)
[14:33:43] *** vanfanel640 is now known as vanfanel64
[14:44:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[14:54:17] *** Quits: KaitoDaumoto (Frat@user/kaitodaumoto) (Remote host closed the connection)
[14:55:11] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:55:12] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[14:55:54] *** Joins: david_ (~david@2600:1702:26a0:2000:49f3:6f41:92ce:4978)
[14:56:18] *** david_ is now known as Guest7160
[14:57:38] *** Quits: TieUpYourCamel (~david@2600:1702:26a0:2000:f9dc:da07:5947:eede) (Ping timeout: 252 seconds)
[15:12:01] *** Quits: proller (~p@2a02:6b8:b081:1214::1:2d) (Ping timeout: 248 seconds)
[15:12:25] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[15:22:43] *** Joins: peetee (c0ce52d876@198.108.77.17)
[15:23:02] *** Quits: peetee (c0ce52d876@198.108.77.17) (Changing host)
[15:23:02] *** Joins: peetee (c0ce52d876@user/peetee)
[15:30:16] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[15:30:59] *** Joins: csrf (~csrf@user/csrf)
[15:33:04] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[15:37:02] *** Joins: tirnanog (~tirnanog@user/tirnanog)
[15:41:47] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[15:50:22] *** Joins: wingfold (~wingfold@173.38.117.84)
[15:56:39] *** Quits: jplesnik (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[15:57:57] *** Joins: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com)
[16:05:54] *** Quits: rpath (~rpath@gateway/tor-sasl/rpath) (Quit: Leaving)
[16:14:23] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[16:15:23] <daemon> hey all I am stored a reged with qr// that inclues a capture group (), at one point in the code a foerach is used to check a set of regexs including the one previously mentioned against a string
[16:15:28] <daemon> when this happens it raises a warning: Use of uninitialized value $_ in pattern match (m//) at engine.perl line 211.
[16:15:37] <daemon> how do I supress this warning
[16:15:58] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[16:16:19] <Botje> show code instead of prose
[16:16:35] <Botje> but at a guess: make sure $_ is not undef?
[16:16:37] <daemon> https://dpaste.org/GT3Xr
[16:16:37] <Paperbot> Link title(s): [ dpaste/GT3Xr (Perl) ]
[16:17:20] <genio> line 11 looks backwards
[16:17:40] <daemon> oh yeah
[16:18:02] <Botje> also no need to qr again
[16:18:18] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[16:18:20] <Botje> if $dkey =~ $regex
[16:18:24] <daemon> ah yeah it was meant to be m// there was just having a play about
[16:18:26] <daemon> see if I could resolve it
[16:18:34] <daemon> wait I do not even need the m// its self?
[16:18:38] <genio> nope
[16:18:53] <daemon> did that change at some point
[16:18:56] <Botje> no
[16:19:15] <daemon> neat, I always have used the // wonder where I got that from
[16:19:17] <Botje> also, why assign to $return instead of , well, returning?
[16:19:31] <daemon> notice there is no \n on line 5
[16:19:49] <daemon> if it worked or not is figured out later
[16:20:21] <Botje> can you guarantee that only one regex matches?
[16:20:28] <daemon> yes
[16:20:46] *** Quits: mixfix41 (~sdenynine@user/mixfix41) (Quit: and the winter is outta here...)
[16:20:49] <daemon> well I best be able to otherwise this entire script is useless :)
[16:21:43] <daemon> genio++ # Cheers, no idea how I got that the wrong way around
[16:22:14] *** Joins: gizmomathboy (~gizmomath@206.127.53.107)
[16:22:18] <daemon> Botje++ # Cheers, no idea where I learned scalar/qr's should be used with // in if statements
[16:25:48] *** Quits: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[16:26:10] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[16:28:11] *** Quits: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch) (Client Quit)
[16:28:42] *** Joins: pflanze (~pflanze@61-41-178-139.dyn.fiber.qlnet.ch)
[16:29:51] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[16:30:38] <daemon> eval: my $s='GET:/OphTrOperationnote/Default/create?patient_id=17891&unbooked=1&unbooked_type=emergency'; my $x=qr#^GET:/OphTrOperationnote/Default/create?patient_id=(\d+)&unbooked=1&unbooked_type=emergency'#i; if ($s =~ /$x/) { $1 } 
[16:30:39] <perlbot> daemon: No output.
[16:30:46] <daemon> hmm
[16:31:01] <daemon> ignore the / wondered if it did make a difference
[16:31:09] <daemon> what am I not escaping that I should be here
[16:31:19] <daemon> I used # so I did not have to escape /
[16:31:47] <daemon> ah '
[16:32:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[16:33:38] *** Joins: jplesnik_ (jplesnik@nat-pool-brq-t.redhat.com)
[16:33:58] *** Joins: fling (~fling@user/fling)
[16:34:23] *** Quits: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[16:34:35] <Botje> note: URL parameters can come in any order; expecting a specific order is a bad idea
[16:34:56] <daemon> not in this case
[16:34:57] *** Joins: agrosant (~agrosant@79.103.182.92.dsl.dyn.forthnet.gr)
[16:35:19] <daemon> this log file is almost 200M I grep'd for GET:/OphTrOperationnote/Default/create
[16:35:27] <daemon> thrown it through uniq
[16:35:31] <daemon> it only occurs in this order
[16:35:33] <daemon> for whatever reason
[16:35:38] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:36:09] <Botje> can imagine most browsers try to preserve the order of the <input> fields
[16:36:11] *** Quits: jplesnik (~jplesnik@nat-pool-brq-u.redhat.com) (Ping timeout: 245 seconds)
[16:36:23] <daemon> true I should probably account for it incase
[16:36:33] <daemon> unless whatever is writing this log is reordering it
[16:36:48] *** Joins: proller (~p@93.158.190.218)
[16:37:01] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[16:37:12] <daemon> looking at it, I bet I could remoev that : between GET and the url 
[16:37:15] <daemon> and load it in URI
[16:38:06] <daemon> then the match could be stored in a $hash{URI}->{KEY} = {VAL} style
[16:38:21] <daemon> wait no because I can't predict the patient_id
[16:38:31] <daemon> but what I could do is ... $hash{URI}->{KEY} = {VAL OR QRREGEX}
[16:39:03] <daemon> hmm
[16:39:39] <daemon> I could write the response the same way the same style of hash
[16:39:44] <daemon> yeah that could work
[16:39:47] <daemon> cheers Botje 
[16:41:52] *** Quits: proller (~p@93.158.190.218) (Ping timeout: 268 seconds)
[16:43:34] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:46:00] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Read error: error:1408F119:SSL routines:ssl3_get_record:decryption failed or bad record mac)
[16:46:33] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[16:48:29] *** dionysos is now known as undercaffeinated
[16:48:56] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[16:49:58] *** Joins: bmeneg (~bmeneg@131.100.62.124)
[16:52:56] *** Joins: proller (~p@2a02:6b8:0:408:a460:ef3c:f4ee:357e)
[16:54:03] *** Quits: edef (~edef@user/edef) (Changing host)
[16:54:03] *** Joins: edef (~edef@ircpuzzles/2022/april/fourth/edef)
[16:55:16] *** Quits: D-ion (~D-ion___@0850724116.static.corbina.ru) (Ping timeout: 272 seconds)
[16:56:33] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 248 seconds)
[16:57:02] *** Joins: akaWolf (~akaWolf@akawolf.org)
[17:01:39] * GumbyPAN CPAN Upload: CallBackery-0.41.6 by OETIKER https://metacpan.org/release/OETIKER/CallBackery-0.41.6
[17:03:16] *** Joins: D-ion (~D-ion___@0850724116.static.corbina.ru)
[17:08:53] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[17:13:59] *** Joins: pucara (~i@host16.190-139-218.telecom.net.ar)
[17:17:53] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Ping timeout: 248 seconds)
[17:27:18] *** Quits: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[17:27:18] *** Quits: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net) (Ping timeout: 260 seconds)
[17:27:25] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[17:27:38] *** Quits: Affliction (affliction@idlerpg/player/affliction) (Ping timeout: 250 seconds)
[17:28:51] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 260 seconds)
[17:30:44] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:31:16] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:21] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:31:33] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:31:37] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[17:32:24] *** Joins: wuseman (~wuseman@81-236-212-19-no68.tbcn.telia.com)
[17:32:24] *** Quits: wuseman (~wuseman@81-236-212-19-no68.tbcn.telia.com) (Changing host)
[17:32:24] *** Joins: wuseman (~wuseman@user/wuseman)
[17:32:24] *** Joins: mattil (~mattil@helsinki.portalify.com)
[17:32:36] <daemon> hmm
[17:32:49] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 248 seconds)
[17:32:57] <daemon> is there anyway I can validate $hash->{URI}->{KEY} is a qr-regex
[17:33:10] <Botje> eval: ref qr/foo/
[17:33:12] <perlbot> Botje: Regexp
[17:33:18] <daemon> ooh ref works with the
[17:33:19] <daemon> m
[17:33:19] <daemon> nice
[17:33:21] <daemon> cheers Botje 
[17:33:57] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[17:36:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[17:36:42] * GumbyPAN CPAN Upload: Games-Sudoku-General-0.027 by WYANT https://metacpan.org/release/WYANT/Games-Sudoku-General-0.027
[17:37:22] *** Quits: mattil (~mattil@helsinki.portalify.com) (Ping timeout: 268 seconds)
[17:37:28] *** Joins: G_SabinoMullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:37:28] *** Joins: G_Sabino1ullane (~G_SabinoM@pool-72-94-251-236.phlapa.fios.verizon.net)
[17:38:05] *** Joins: fling (~fling@user/fling)
[17:38:09] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 248 seconds)
[17:38:15] *** Joins: jpn (~jpn@user/jpn)
[17:40:08] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:41:34] *** Quits: diskin (~diskin@ec2-52-89-211-63.us-west-2.compute.amazonaws.com) (Read error: Connection reset by peer)
[17:43:12] *** Joins: diskin (~diskin@185.99.7.85)
[17:43:19] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 260 seconds)
[17:44:36] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:45:04] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:45:18] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Read error: Connection reset by peer)
[17:45:26] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:45:33] <simcop2387> seems like my riscv64 smoker is working reliably :)
[17:46:28] <ilmari> how long does a full build+test run take?
[17:47:45] *** Quits: zakame (~zakame@user/zakame) (Ping timeout: 248 seconds)
[17:47:57] <simcop2387> 7.5 hours with the default smoke settings from Test::Smoke
[17:48:21] <simcop2387> so building and then running with both PERLIO settings
[17:48:47] <simcop2387> the build takes ~30-40min, the rest is all the test suite
[17:50:01] *** Joins: zakame (~zakame@user/zakame)
[17:50:10] <ilmari> how many/fast cores?
[17:50:39] *** Quits: ueberall (ueberall_l@user/ueberall) (Quit: ZNC)
[17:50:43] <simcop2387> 2 cores, running at 1.0ghz, https://shop.allnetchina.cn/products/starfive-visionfive-ai-single-board-computer
[17:50:43] <Paperbot> Link title(s): [ StarFive VisionFive Single Board Computer – ALLNET China ]
[17:50:49] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:51:15] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:51:21] <simcop2387> i'm hoping that once the NVDLA and Neural Network Engine libraries are ready that I can get them to do some fun stuff
[17:51:29] *** Quits: wuseman (~wuseman@user/wuseman) (Ping timeout: 248 seconds)
[17:51:42] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[17:51:52] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[17:52:54] *** Joins: ueberall (ueberall_l@user/ueberall)
[17:53:24] <Altreus> Kinda hate regexp
[17:53:41] <Altreus> The P just feels like extra work
[17:54:00] <leont> simcop2387: IMHO running with both PERLIO settings is a waste of time in your case, if not always
[17:54:00] <simcop2387> yea i always leave it off
[17:54:33] <simcop2387> leont: probably, but it's sitting on my rack doing little else right now, i set it up as a systemd timer to run every day so i do nothing at all
[17:55:52] <ilmari> but if you leave it off you could run it every 6 hours!
[17:56:27] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 250 seconds)
[17:57:06] <simcop2387> there's not really enough commits happening to care too much about that
[17:57:22] *** Quits: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c) (Remote host closed the connection)
[17:59:38] <simcop2387> leont: once i can get it to start doing some of the vision stuff that i want (in particular yolov[3-5] for object detection) and get Frigate NVR running on it, i'll probably turn that down to weekly instead of daily and make it only do one mode for that.  my main hope is that the ai offload stuff is capable of doing things for my car while capturing dashcams.
[17:59:58] *** Joins: jpn (~jpn@user/jpn)
[18:00:10] <simcop2387> once i can start to try that i'll buy a second one to stuff in there for that.  i want my dashcams to stream to my home server, live.
[18:01:28] <simcop2387> the NVDLA should be able to run the object detection at 30fps live for all 4 dash cams
[18:04:41] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Remote host closed the connection)
[18:05:08] *** Joins: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi)
[18:06:02] *** Quits: bbrtj (~bbrtj@185.24.91.138) (Ping timeout: 246 seconds)
[18:07:26] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 245 seconds)
[18:08:58] *** Joins: jpn (~jpn@user/jpn)
[18:09:53] *** Quits: mattil (~mattil@d54vzntjl0nz0pwq99y-4.rev.dnainternet.fi) (Ping timeout: 260 seconds)
[18:10:02] *** Quits: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu) (Remote host closed the connection)
[18:10:05] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[18:12:25] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:12:36] *** Joins: deadmarshal_ (~deadmarsh@95.38.113.9)
[18:12:40] *** Joins: randir (~randir@93.159.239.42)
[18:16:16] <daemon> if I have a URI object and my URI is http://blah.com?something=x&bless=aeroplane
[18:16:28] <daemon> how can I return the value for 'something' i.e. 'x'
[18:17:13] *** diskin is now known as Guest2753
[18:17:13] *** Quits: Guest2753 (~diskin@185.99.7.85) (Killed (strontium.libera.chat (Nickname regained by services)))
[18:17:13] *** Joins: diskin (~diskin@ec2-52-89-211-63.us-west-2.compute.amazonaws.com)
[18:19:15] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 260 seconds)
[18:19:56] <Dorward> daemon: Do you mean a URL object? https://developer.mozilla.org/en-US/docs/Web/API/URL
[18:19:59] <Paperbot> Link title(s): [ URL - Web APIs | MDN ]
[18:20:13] <Dorward> Uh. No. This isn't #javascript. Ignore me.
[18:20:14] <Botje> URI::Query?
[18:20:43] <daemon> I went for https://metacpan.org/pod/URI::QueryParam
[18:20:43] <Paperbot> Link title(s): [ URI::QueryParam - Additional query methods for URIs - metacpan.org ]
[18:20:46] <daemon> seems to work pretty well
[18:21:09] <daemon> I thought URI could do it without extension modules though
[18:21:11] <daemon> must be mistaken
[18:23:35] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:24:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:70be:3437:d6be:b5ae)
[18:25:07] <simcop2387> daemon: yea URI::QueryParam is the way to go, it's part of URI
[18:25:46] <simcop2387> it's split out because not all URI use that same style of thing for that so it's not applicable to all schemas/whatever
[18:33:00] *** Joins: mattil (~mattil@87-92-46-217.bb.dnainternet.fi)
[18:34:09] *** Quits: Woodzy (~quassel@198.204.246.228) (Ping timeout: 248 seconds)
[18:34:51] *** Joins: Woodzy (~quassel@198.204.246.228)
[18:35:12] *** Joins: mattil_ (~mattil@helsinki.portalify.com)
[18:38:23] *** Quits: mattil (~mattil@87-92-46-217.bb.dnainternet.fi) (Ping timeout: 260 seconds)
[18:39:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[18:40:00] *** Joins: thrig (~thrig@207.108.197.156)
[18:40:35] *** Joins: fling (~fling@user/fling)
[18:41:37] *** Quits: japh (~scp1@user/japh) (Ping timeout: 248 seconds)
[18:42:14] <daemon> simcop2387, gotcha that makes sense
[18:42:51] <daemon> if I have $qrregex, I can tell its a regexp with 'ref' but can is there anyway I can detect if it has capture groups and if it does how many?
[18:43:07] <daemon> if I have $qrregex, I can tell its a regexp with 'ref' but is there anyway I can detect if it has capture groups and if it does how many?
[18:43:37] <ilmari> daemon: have you looked at the functions in https://perldoc.perl.org/re ?
[18:43:37] <Paperbot> Link title(s): [ re - Perl pragma to alter regular expression behaviour - Perldoc Browser ]
[18:43:49] *** Joins: japh (~scp1@user/japh)
[18:44:12] <daemon> several times over my life, but can never really remember it :)
[18:44:15] <daemon> let me quickly scan it
[18:44:25] <thrig> first we ferment the regmust, and from that
[18:44:32] <Grinnz> "how many" is a difficult question, because how it matches may change how many captures you get
[18:44:45] <daemon> yep |
[18:45:02] <simcop2387> daemon: why do you need to know anyway?
[18:45:04] <daemon> I guess I can just manually check $1,$2,$3
[18:45:14] <daemon> there will never be more than 2 
[18:45:15] *** Joins: xcombelle (~xavie@176-139-252-198.abo.bbox.fr)
[18:45:19] <thrig> or capture to named thingies
[18:45:26] <daemon> ooh that could work
[18:45:38] <Grinnz> if you do the match in list context you can assign the matches to an array
[18:45:42] <thrig> then it's like $count = keys %+
[18:45:42] <simcop2387> daemon: don't bother with the $1, use @{^CAPTURE} instead
[18:45:50] <daemon> simcop2387, I need more know that it has capture groups more so than the name
[18:45:50] <Grinnz> or that
[18:45:53] *** Joins: gast0n (~g4570n@user/gast0n)
[18:45:56] <daemon> moer so than it has them *
[18:45:59] <ilmari> see also @{^CAPTURE} and @{^CAPTURE_ALL}
[18:46:10] <simcop2387> daemon: @{^CAPTURE} will have any captured stuff
[18:46:19] <daemon> wait what document has ^CAPTURE in it
[18:46:23] <daemon> re seems not to
[18:46:25] <Grinnz> perlvar
[18:46:27] <ilmari> perlvar
[18:46:30] <daemon> perlbot perlvar
[18:46:30] <perlbot> daemon: Perl predefined variables - https://perldoc.pl/perlvar
[18:46:32] <daemon> ta
[18:46:36] <thrig> perldoc -v '...'
[18:46:36] <perlbot> thrig: Your documentation is available at: https://perldoc.perl.org/variables/%27...%27
[18:46:37] <Grinnz> https://perldoc.perl.org/variables/@%7B%5ECAPTURE%7D
[18:46:37] <Paperbot> Link title(s): [ @{^CAPTURE} - Perldoc Browser ]
[18:46:42] <thrig> silly bot
[18:48:26] <daemon> eval: my $str='foo10 bar20 baz30'; if ($str =~ m/^.*?(\d+).*?(\d+).*?(\d+)/) { return join ',',@{^CAPTURE} } else { return "nope" }
[18:48:28] <perlbot> daemon: 10,20,30
[18:48:38] <daemon> neat
[18:49:39] <ilmari> daemon: so you don't care about how many capture groups the _regex_ has, but how many groups _match_ captured?
[18:49:43] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Remote host closed the connection)
[18:50:14] <ilmari> *the match
[18:51:25] *** Quits: japh (~scp1@user/japh) (Remote host closed the connection)
[18:51:40] <daemon> ilmari, yes though actually with CAPTURE I can get a solution working, I really wanted to avoid checking $1,$2 and $3 manually, now I can
[18:51:47] <ilmari> words: they mean things. precision: it matters.
[18:52:03] <daemon> oh I am terrible with words :)
[18:52:28] <daemon> simcop2387++ # almost forgot
[18:52:30] <thrig> a regular expression is how Superman met his match
[18:52:54] <daemon> also how lex luther found out about the green rock stuff that superman hates
[18:53:11] <thrig> that's a bit cryptic
[18:53:18] <daemon> I forget its name
[18:53:21] *** Quits: mattil_ (~mattil@helsinki.portalify.com) (Ping timeout: 248 seconds)
[18:53:25] <daemon> supermans only weakness
[18:53:43] <daemon> Kryptonite?
[18:54:15] *** Joins: todo75 (~todo75@user/todo75)
[18:54:48] <simcop2387> https://media.comicbook.com/2018/09/lex-luthor-40-cakes-1131948.jpeg
[18:55:15] <daemon> :-)
[18:57:05] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[18:57:38] *** Quits: pucara (~i@host16.190-139-218.telecom.net.ar) (Quit: Lost terminal)
[18:59:29] *** Joins: wuseman (~wuseman@81-236-212-19-no68.tbcn.telia.com)
[18:59:50] *** Joins: off^ (~off@c-24-99-107-170.hsd1.ga.comcast.net)
[18:59:58] *** Quits: wuseman (~wuseman@81-236-212-19-no68.tbcn.telia.com) (Changing host)
[18:59:58] *** Joins: wuseman (~wuseman@user/wuseman)
[19:00:33] *** Joins: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net)
[19:02:04] <vms14> I need to encode some sort of struct to have this data { name len, name, immediate flag } This kind of structure will be checked a lot of times when searching stuff so I'd like to find an efficient way to encode it
[19:02:27] <vms14> the only way I see is to use pack and unpack, are they more efficient than substring split a regex or alike?
[19:02:45] <thrig> my $struct = [ 42, "Bob", -1 ];
[19:03:29] <vms14> thrig: it's better than using unpack on a string?
[19:03:37] <vms14> faster*
[19:04:04] <thrig> at that point I'd write it in C
[19:05:34] <vms14> I try to learn how to implement a forth by using perl as a playground, once I have some knowledge maybe I'll try to do it in another language, but I like some features I can have by just using perl and maybe is "fast" enough to be useful
[19:06:11] <thrig> an array is stack-ish
[19:06:42] <vms14> hahah yes, I have @stack and @return, and the dictionary is also an array
[19:07:12] <ilmari> wouldn't the dictionary more naturally be a hash?
[19:07:19] <vms14> ilmari: nope
[19:07:31] <ilmari> so you really need to store the name length? perl strings already track their length
[19:07:32] <vms14> it was at first, but it's not how should really be
[19:07:51] <vms14> you can have old definitions of a word coexisting, a hash would replace them
[19:08:11] <vms14> and there is a word named forget which will remove all words from that point to the end
[19:08:33] <vms14> the dictionary is really a linked list and is searched starting from the end
[19:08:59] <vms14> so you'll always find the latest definition of a word, but older words can still use the older definition
[19:09:44] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 246 seconds)
[19:09:45] <vms14> once you "compile" a word it's just a list of memory addresses of the words it uses (in my case they'll be array index)
[19:10:13] <vms14> ilmari: the length is for speeding a bit the search process
[19:10:33] <vms14> I can test for the len and skip if does not match, so I don't have to compare the whole string
[19:11:15] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[19:11:53] <vms14> ilmari: I can use length() instead and will be fast as if I've stored it?
[19:12:16] <vms14> just with a funcall overhead
[19:12:20] <thrig> use Benchmark qw(cmpthese)
[19:12:25] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[19:12:37] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 240 seconds)
[19:13:20] <vms14> yes, I should play with the benchmark module in order to get some answers
[19:13:52] <vms14> for now I'll just focus on learning and understanding how should I do staff, then play with benchmarks
[19:14:28] <vms14> I know I'll have to rewrite it several times so I don't fear changes
[19:15:11] <vms14> stuff*
[19:16:14] <ilmari> `eq` checks the length before comparing the bytes
[19:17:08] <vms14> :0 thanks ilmari I didn't know that
[19:17:26] <vms14> then I don't have that need
[19:17:44] <ilmari> unless they have different internal representations (utf8 vs not)
[19:18:44] *** Joins: vrurg_ (~vrurg@45.74.95.181)
[19:18:44] *** Quits: vrurg (~vrurg@45.74.95.181) (Read error: Connection reset by peer)
[19:19:18] *** Joins: rgrinberg (~textual@177.248.158.166)
[19:20:43] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[19:21:07] <vms14> I have to go, thanks for your help ilmari and thrig 
[19:21:39] *** Quits: vms14 (~vms14@29.red-79-153-202.dynamicip.rima-tde.net) (Quit: WeeChat 3.4)
[19:21:50] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[19:24:29] *** Joins: willthechill (~willthech@2600:1700:8c61:3ed0:c850:19fa:55b4:4ffe)
[19:24:59] *** Joins: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl)
[19:26:34] *** Joins: todo75 (~todo75@user/todo75)
[19:28:44] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[19:29:48] *** Quits: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi) (Ping timeout: 272 seconds)
[19:31:53] *** Joins: bbrtj (~bbrtj@185.24.91.138)
[19:33:57] *** vrurg_ is now known as vrurg
[19:34:27] <rindolf> today, a friendly street cat followed me along the street until when she was all over my side
[19:34:41] *** Joins: japh (~scp1@user/japh)
[19:38:43] *** Quits: randir (~randir@93.159.239.42) (Remote host closed the connection)
[19:39:41] *** Quits: jplesnik_ (jplesnik@nat-pool-brq-t.redhat.com) (Quit: Leaving)
[19:41:50] *** Quits: andrzejku_ (~andrzejku@45-11-60-125.ip4.greenlan.pl) (Ping timeout: 272 seconds)
[19:42:35] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[19:43:22] *** Quits: tirnanog (~tirnanog@user/tirnanog) (Quit: = "")
[19:43:47] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 268 seconds)
[19:43:48] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[19:44:06] *** Joins: fling (~fling@user/fling)
[19:44:23] *** Quits: bmeneg (~bmeneg@131.100.62.124) (Ping timeout: 246 seconds)
[19:44:27] *** Joins: bmeneg_ (~bmeneg@131.100.62.65)
[19:44:44] *** Quits: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt) (Quit: Leaving)
[19:45:24] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Ping timeout: 240 seconds)
[19:45:37] *** Joins: machaddr (~machaddr@a79-168-74-18.cpe.netcabo.pt)
[19:49:11] *** Joins: akaWolf (~akaWolf@akawolf.org)
[19:49:32] *** Quits: k33p3r (kexik@2605:6400:c847:1948::8491) (Remote host closed the connection)
[19:49:32] *** Quits: Pny (pny1312@user/pny) (Remote host closed the connection)
[19:49:32] *** Quits: PonyBlocks-_- (ponyblocks@2605:6400:c847:1478::8741) (Remote host closed the connection)
[19:50:37] <daemon> I have a half written io::async project, I want to send out a blocking web request, I do not want it to block any other aspects of the running of the application though, what would the correct module be
[19:50:48] *** Quits: Dorward (~dorward@2001:8b0:683:6dc5:56b2:3ff:fe9c:2b78) (Remote host closed the connection)
[19:51:13] <daemon> basically I want it to stop the current operation but any other operations should continue
[19:51:57] *** Joins: randir (~randir@95-31-138-202.broadband.corbina.ru)
[19:54:39] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[19:54:46] *** Joins: Dorward (~dorward@2001:8b0:683:6dc5:56b2:3ff:fe9c:2b78)
[19:55:33] <tm604> daemon: sounds like "blocking" is exactly what you _don't_ want then - why not just `await $http->GET(...)` or equivalent?
[19:56:47] *** Joins: todo75 (~todo75@user/todo75)
[19:57:51] <ilmari> e.g `$http->GET(...)->then(sub { ... })` if you aren't using async/await
[20:01:00] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 240 seconds)
[20:01:46] <gordonfish> Exactly, callbacks/event handlers/call-this-when-ready are a big part of async programming
[20:02:51] *** Joins: todo75 (~todo75@user/todo75)
[20:03:30] *** Joins: magla (~gelignite@d5363ac5.access.ecotel.net)
[20:03:54] <daemon> ah
[20:03:59] <daemon> I used Net::Async::HTTP
[20:04:13] <simcop2387> that works with Future::AsyncAwait
[20:04:17] <daemon> Cannot 'await' outside of an 'async sub' at engine.perl line 215.
[20:04:18] <daemon> >.>
[20:04:19] <daemon> yeah
[20:04:25] <daemon> appears not compatible
[20:04:31] <daemon> let me try tm604's suggestion
[20:04:36] <daemon> sorry ilmari's
[20:04:51] <simcop2387> that's not because NAHTTP is incompatible, but because you didn't make your function compatible
[20:05:15] <simcop2387> the synopsis of NAHTTP even directly shows using it with FAA
[20:05:19] <daemon> ilmari, where did $http come from
[20:05:36] <ilmari> daemon: Net::Async::HTTP
[20:05:36] <simcop2387> Net::Async::HTTP->new()
[20:05:41] <daemon> ah gotcha
[20:05:45] <daemon> so I did get the right module
[20:05:54] <tm604> perhaps this would be a good opportunity to post code!
[20:07:10] <thrig> code that has gone postal?
[20:07:40] <vague> postalcode? What are you sending where?
[20:08:29] <thrig> the FAA was mentioned so it probably involves planes
[20:08:40] <Altreus> Does anyone know how I can make a Moose attribute conditionally required? Is it just, do it in BUILDARGS?
[20:09:14] <daemon> let me see how it does first :)
[20:10:18] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 268 seconds)
[20:10:29] <simcop2387> Altreus: buildargs is how i've done it before at least
[20:11:25] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[20:12:57] <Altreus> k ... kind of mardy that I have to make it conditionally required in the first place tbh :/
[20:15:37] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:16:05] <simcop2387> probably not terribly hard to make a Moose extension that lets you put it as: required => sub { my ($buildargs) = @_; ... return 1} or something
[20:16:48] <daemon> hmmm anyone have any idea about this with http::nahttp https://dpaste.org/UaM46
[20:16:48] <Paperbot> Link title(s): [ dpaste/UaM46 (Perl) ]
[20:17:03] <daemon> the options look correct to me do I need to specify the host?
[20:17:08] <daemon> I thought it would derive it from the uri
[20:17:38] <LeoNerd> daemon: You're missing something. Ensure you've got URI::http available
[20:17:45] <gordonfish> Altreus: You could probably have a default => routine for the conditionee attribute that checks if the other attribute is set and creams if itself is unset
[20:17:46] <daemon> ah I do not
[20:17:52] <gordonfish> screams*&
[20:17:59] <LeoNerd> Also no need to put `method => "POST"` since you're calling ->POST anyway
[20:18:00] <gordonfish> bah
[20:18:23] <LeoNerd> Also get yourself some async/await because that ->then chaining is uuuugly these days
[20:18:23] <daemon> err there appears to be no module called uri::http
[20:18:41] <daemon> ah cool
[20:19:00] <tm604> daemon: $uri is the first parameter
[20:19:27] <LeoNerd> Oh hah, that
[20:19:29] <daemon> oh I have URI#
[20:19:30] <tm604> don't pass `uri => $uri`, just pass `$uri`, see the POST method documentation: at the moment it's doing URI->new('uri') which isn't http
[20:19:39] *** Quits: NGCBD (~GEttR@user/gettr) (Ping timeout: 260 seconds)
[20:19:41] <LeoNerd> perlbot: ref URI->new("http://foo")
[20:19:41] <perlbot> LeoNerd: For information about references in perl, see the built-in perldocs: http://p3rl.org/REF , or if that fails: http://perl-begin.org/topics/references/ . | http://mvp.kablamo.org/basics/references/
[20:19:48] <LeoNerd> perlbot: eval ref URI->new("http://foo")
[20:19:49] *** Quits: magla (~gelignite@d5363ac5.access.ecotel.net) (Quit: Stay safe!)
[20:19:49] <perlbot> LeoNerd: ERROR: Can't locate object method "new" via package "URI" (perhaps you forgot to load "URI"?) at (IRC) line 1. 
[20:19:56] <LeoNerd> perlbot: eval use URI; ref URI->new("http://foo")
[20:19:58] <perlbot> LeoNerd: URI::http
[20:19:59] <daemon> oh I see
[20:19:59] <LeoNerd> anyway, there
[20:20:15] <tm604> the structure you'd need here is `await $http->POST( $uri, $content, %args );`
[20:20:40] <daemon> oh I do not need to do it with named params like I did
[20:21:20] <tm604> not really a question of "need", more of "that won't work" =)
[20:21:57] <tm604> there's a `do_request` method, for generic requests, but POST/GET/PUT/etc. are designed to take the more common parameters directly, then a key/value list of named arguments after those
[20:22:05] <daemon> ah I copied the style from the synopsis
[20:22:17] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Quit: Leaving)
[20:22:22] <daemon> https://metacpan.org/pod/Net::Async::HTTP#SYNOPSIS
[20:22:23] <Paperbot> Link title(s): [ Net::Async::HTTP - use HTTP with IO::Async - metacpan.org ]
[20:22:51] <tm604> yes, that's `->do_request` - the other methods behave differently
[20:23:28] <daemon> gotcha so the full request for what I would want is, POST(URI,json-encode,{ content_type=>'application/json' })
[20:23:56] <tm604> almost; no `{}`, it's just key/value pairs - that's a hashref
[20:24:29] <tm604> and as always be careful with the encoding - send bytes, not Unicode text
[20:25:13] <tm604> for more examples: https://metacpan.org/dist/Net-Async-HTTP/requires
[20:25:14] <daemon> ah right
[20:25:14] <Paperbot> Link title(s): [ Distributions which depend on Net-Async-HTTP - metacpan.org ]
[20:26:25] <ilmari> I wish the JSON::MaybeXS docs were clearer on bytes vs. characters, like the Mojo::JSON docs are
[20:26:31] <daemon> that is just a list of requires not examples
[20:26:43] <daemon> https://metacpan.org/release/PEVANS/Net-Async-HTTP-0.48/source/examples
[20:26:44] <Paperbot> Link title(s): [ Browse PEVANS/Net-Async-HTTP-0.48/examples - metacpan.org ]
[20:26:50] <daemon> kind of pitiful amount of examples though
[20:26:53] <daemon> not even a POST
[20:26:57] <ilmari> daemon: it's a list of distros that use it
[20:27:07] <tm604> there are many examples of POST and other methods among those distributions
[20:27:14] <ilmari> which presumably contain actually working code you can look at
[20:27:38] <daemon> which one has a clear post example
[20:27:48] <LeoNerd> Yah I often lack imagination for interesting examples. Going to find other distributions is usually helpful
[20:27:49] <tm604> https://metacpan.org/dist/Net-Async-Github/source/lib/Net/Async/Github.pm#L1154 for a generic-ish example of POST-with-JSON
[20:27:50] <Paperbot> Link title(s): [ lib/Net/Async/Github.pm - metacpan.org ]
[20:28:15] <daemon> LeoNerd, I always liked the poe.perl.org cookbook would be nice if we could have such a thing as a general site for all modules
[20:28:21] <tm604> but pretty much any webservice is likely to have a sinful combination of GET, POST, PUT and OPTIONS
[20:28:53] <LeoNerd> daemon: if you build me the infrastructure I'll write the examples
[20:29:03] <LeoNerd> I keep telling people this and nobody ever listens
[20:29:11] <simcop2387> don't forget PATCH, TRACE and DELETE
[20:29:19] <LeoNerd> Mmmmm PATCH
[20:29:22] <thrig> UPDATE?
[20:29:39] <simcop2387> thrig: that's PATCH actually, usually
[20:29:49] <huf> why just those?
[20:29:56] <huf> why not put the payload there as json
[20:30:18] <huf> or as lisp
[20:30:21] <simcop2387> huf: PATCH "works" for binaries too
[20:30:42] <huf> yeah but i mean instead of the http method
[20:31:11] <thrig> (eval (network-read what could possibly go wrong
[20:31:16] <huf> yeah!
[20:31:17] <gordonfish> simcop2387: Ah yes, binary patches, when closed source bins that never get updated need to be fixed. Been there before.
[20:31:27] <tm604> like that april RFC for json-in-headers? https://tools.ietf.org/id/draft-reschke-http-jfv-07.html
[20:31:28] <Paperbot> Link title(s): [ A JSON Encoding for HTTP Header Field Values ]
[20:31:30] <gordonfish> (Or just something no one has the source to anymore...)
[20:31:52] <thrig> someone implemented that, with perl. luckily we were able to get that service shutoff, eventually
[20:31:59] <simcop2387> that reminds me, what was this years 4-1 rfc
[20:32:27] <gordonfish> Is that an april food thing?
[20:32:30] <gordonfish> fools
[20:32:33] <gordonfish> #$^#$
[20:33:10] <daemon> LeoNerd, I do own perl.place
[20:33:15] <simcop2387> https://datatracker.ietf.org/doc/html/rfc9225 this looks like the good one
[20:33:16] <Paperbot> Link title(s): [ RFC 9225 - Software Defects Considered Harmful ]
[20:33:23] <simcop2387> oh and this one, https://datatracker.ietf.org/doc/html/rfc9226
[20:33:24] <Paperbot> Link title(s): [ RFC 9226 - Bioctal: Hexadecimal 2.0 ]
[20:33:37] <LeoNerd> daemon: OK. Can I type perl code in to answer questions other people have asked there?
[20:33:45] <ilmari_> daemon: example that I whipped up in a few minutes, having never used `Net::Async::HTTP` before:... (full message at https://libera.ems.host/_matrix/media/r0/download/libera.chat/023a4358b8daad349e32476eec7e4ec63a56e321)
[20:34:12] *** Quits: bit4bit (~bit4bit@181.49.102.14) (Ping timeout: 240 seconds)
[20:34:29] <daemon> LeoNerd, actually it would be a fun little project to learn some mojo with
[20:34:29] <ilmari> hm, that didn't post as neatly as I expected
[20:34:30] <daemon> probably need a bit of help along the way though
[20:34:33] <daemon> especially with the bits on you know writing stuff in an interface
[20:34:46] <LeoNerd> Honestly it could just be a google doc
[20:34:48] * ilmari_ sent a perl code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/26e9a9efe4dbe3518608e439047bc9dc6ccc69f6
[20:34:49] <LeoNerd> I made one. Years ago
[20:34:57] <LeoNerd> It's world writable. Anyone in the world can ask me questions and I'll just write perl code
[20:35:03] <ilmari> ah, if I post the code block on its own, it looks nicer on IRC
[20:35:05] <LeoNerd> It lasted maybe half an hour and then everyone forgot about it
[20:35:12] <tm604> ilmari++ # that indeed looks like a convincing Net::Async::HTTP example
[20:35:42] <ilmari> tm604: it even works!
[20:35:52] *** Joins: mowcat (~mowcat@2a00:23c5:d190:1901:f22f:74ff:fe77:1e1c)
[20:36:00] * ilmari_ sent a perl code block: https://libera.ems.host/_matrix/media/r0/download/libera.chat/44b6f90d36f21615fba574e0a629dffabfc04cc8
[20:36:58] * GumbyPAN CPAN Upload: Dancer2-Plugin-FormValidator-0.30 by ALEXPAN https://metacpan.org/release/ALEXPAN/Dancer2-Plugin-FormValidator-0.30
[20:38:24] *** Joins: martinus__ (~martin@139.30.201.77.rev.sfr.net)
[20:40:27] <gordonfish> ilmari: I noticed you don't have $loop->run; in there
[20:41:59] * GumbyPAN CPAN Upload: Net-AppDynamics-REST-1.009 by AKALINUX https://metacpan.org/release/AKALINUX/Net-AppDynamics-REST-1.009
[20:41:59] * GumbyPAN CPAN Upload: RT-Extension-ExcelFeed-0.07 by BPS https://metacpan.org/release/BPS/RT-Extension-ExcelFeed-0.07
[20:42:01] <ilmari> gordonfish: `await` does that at the toplevel
[20:43:19] <gordonfish> Oh right. Would the loop even be needed in case like that, it doesn't seem to be used?
[20:43:33] <LeoNerd> A loop object needs to exist, yes
[20:43:47] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:43:50] <LeoNerd> IO::Async doesn't create one for you implicitly, like most of the other event systems do
[20:43:54] *** Quits: jayray (~jayray@user/jayray) (Ping timeout: 272 seconds)
[20:44:15] <ilmari> well, it calls ->get on the future, which does $self->await, which does $self->{loop}->await($self), which does $self->loop_once until $future->is_ready;
[20:45:36] <thrig> you can't handle the future!
[20:46:19] *** Joins: rgrinberg (~textual@177.248.158.166)
[20:46:33] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Read error: Connection reset by peer)
[20:46:33] *** Quits: metabot (~metabot@perlbot/bot/metabot) (Read error: Connection reset by peer)
[20:46:33] *** Quits: perldoc (~perldoc@2603-6081-6402-7816-0000-0000-0000-0d8f.res6.spectrum.com) (Read error: Connection reset by peer)
[20:47:00] <ilmari> from the /topic on #io-async: Those who do not understand the Future are doomed to await it
[20:47:59] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Read error: Connection reset by peer)
[20:47:59] *** Quits: meatbot (~meatbot@perlbot/bot/meatbot) (Read error: Connection reset by peer)
[20:48:02] *** Quits: kaitlyn03245 (~kaitlyn@user/kaitlyn) (Read error: Connection reset by peer)
[20:48:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[20:48:23] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[20:48:34] *** Joins: kaitlyn03245 (~kaitlyn@user/kaitlyn)
[20:49:35] *** Joins: metabot (~metabot@perlbot/bot/metabot)
[20:50:07] *** Joins: fling (~fling@user/fling)
[20:52:06] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[20:52:36] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[20:52:36] *** ChanServ sets mode: +v perlbot
[20:53:07] *** Joins: perldoc (~perldoc@2603-6081-6402-7816-0000-0000-0000-0d8f.res6.spectrum.com)
[20:53:37] *** Joins: meatbot (~meatbot@perlbot/bot/meatbot)
[20:57:00] * GumbyPAN CPAN Upload: Daemon-Device-1.10 by GRYPHON https://metacpan.org/release/GRYPHON/Daemon-Device-1.10
[20:59:19] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[21:01:19] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:5019:823:a50e:5ee6)
[21:10:24] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:17:03] * GumbyPAN CPAN Upload: Test2-Harness-1.000118 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000118
[21:17:36] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:20:37] *** Joins: Trigon (~reuben@144.39.114.115)
[21:21:25] *** Joins: jgaz (~jgaz@2600:8805:d980:16e::9e0)
[21:23:52] *** Quits: jgaz (~jgaz@2600:8805:d980:16e::9e0) (Client Quit)
[21:26:03] <daemon> hmm keep getting Cannot 'await' outside of an 'async sub' at engine.perl line 223.
[21:26:12] <daemon> anyway I can do this without changing the sub?
[21:26:52] <LeoNerd> The message is pretty clear
[21:26:52] <daemon> https://dpaste.org/erbqL
[21:26:53] <Paperbot> Link title(s): [ dpaste/erbqL (Perl) ]
[21:27:06] <LeoNerd> If you weant to `await`, you can only do that from inside `async sub`, (or at toplevel of the main script itself)
[21:27:09] *** Quits: tobybl_ (~tobybl@132.202.200.146.dyn.plus.net) (Remote host closed the connection)
[21:27:19] <daemon> so ill have to freeze the entire script
[21:27:21] <daemon> wonderful
[21:27:23] <LeoNerd> ... no?
[21:27:27] <LeoNerd> The entire point is that it *doesn't*
[21:27:28] <daemon> I do not think I can easily chaneg it
[21:27:32] *** Parts: art1 (~romeyke@p200300ccdf094d0064a2a83e31b49835.dip0.t-ipconnect.de) ()
[21:27:49] <LeoNerd> `await` causes that one sub to suspend for a while, so it can come back later. Meanwhile you do other things
[21:27:54] <LeoNerd> It's _exactly_ like ->then just a lot neater
[21:28:02] <daemon> yeah but I do not think I can change the actual sub now
[21:28:07] *** Joins: rgrinberg (~textual@177.248.158.166)
[21:28:08] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[21:28:14] <LeoNerd> sub { A()->then( sub { B() } ) }    ===   async sub { await A(); await B() }
[21:28:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:28:54] <LeoNerd> What do you mean "can't change the sub"..? You write the word "async" before the word "sub".
[21:29:12] <daemon> async sub on_stream
[21:29:20] <LeoNerd> That's fine
[21:29:24] <daemon> Cannot 'await' outside of an 'async sub' at engine.perl line 223.
[21:29:35] <daemon> it made no difference 
[21:29:41] <LeoNerd> Er..
[21:29:47] <LeoNerd> Then you likely did it wrong. Show some code?
[21:30:06] <daemon> https://dpaste.org/bARbh
[21:30:07] <Paperbot> Link title(s): [ dpaste/bARbh (Perl) ]
[21:30:41] <LeoNerd> This is inside the sub created on line 185
[21:30:49] <LeoNerd> Anonymous sub{}s also count
[21:31:26] <daemon> so .. on_read => async sub {
[21:31:52] <LeoNerd> Yes in theory, though IO::Async isn't going to do anything with the future result of that so... it's kiiiinda pointless
[21:32:01] <LeoNerd> But it wouldn't do anything with a ->then return *either*
[21:32:34] <daemon> I just want it to post off to localhost
[21:32:39] <LeoNerd> So do that
[21:32:41] <daemon> but I do need the return of that post
[21:32:49] <daemon> atm its just freezing
[21:32:53] <LeoNerd> So adopt it
[21:32:55] <daemon> it never even posts
[21:33:03] <LeoNerd> Yeah it probably doesn't because you dropped the future
[21:33:04] <LeoNerd> Don't do that
[21:33:30] <LeoNerd> The moment you create a future, never let go of it. If you do it'll probably stall, or at the very least, lose ability to report errors
[21:33:45] <LeoNerd> So it ends up looking like your script has frozen, when really it had some fatal error that it tried to "die" with that went nowhere
[21:34:04] <daemon> https://dpaste.org/TURh0
[21:34:05] <Paperbot> Link title(s): [ dpaste/TURh0 (Perl) ]
[21:34:08] <daemon> I shoved the return into self
[21:34:36] <xcombelle> hi rindolf 
[21:34:52] <LeoNerd> No you stored the result of await
[21:35:02] <LeoNerd>       on_read => async sub {   <== is the problem
[21:35:03] <LeoNerd> Dont' do that
[21:35:04] <daemon> I need to store loop to
[21:35:08] <LeoNerd> 18:01 <LeoNerd> Yes in theory, though IO::Async isn't going to do anything with the future result of that so... it's kiiiinda pointless
[21:35:13] <daemon> wait I thought that, that sub had to be async
[21:35:16] <LeoNerd> GAHHHH
[21:35:36] <LeoNerd> OK. Golden rule.  WHENEVER YOU CREATE A FUTURE YOU MUST DO SOMETHING WITH IT
[21:35:42] <LeoNerd> 'await' counts.  $self->adopt_future counts
[21:35:49] <LeoNerd> NOTHING ELSE WHATSOEVER COUNTS
[21:36:06] <thrig> Mom this future followed me home can we keep it
[21:36:30] <LeoNerd> $http->POST  creates a future. So you can either await on it, or adopt it. You've chosen to await it inside an async sub. That's fine
[21:36:38] <LeoNerd> async sub creates a future. WITH WHICH YOU HAVE DONE NOTHING
[21:36:40] <LeoNerd> So all is lost
[21:36:58] <daemon> ok so remove all the async sub statements
[21:37:05] <LeoNerd> That'sd _a_ solution but a terrible one
[21:37:13] <LeoNerd> The non-terrible solution is to write the code properly
[21:37:22] <LeoNerd> One giant sub is not proper
[21:37:29] <daemon> yeah I do that in iteration 3
[21:37:34] <LeoNerd> Pull out all the logic for being one completed client into its own _async sub_
[21:37:41] <rindolf> xcombelle: hey, whats new?
[21:37:42] <daemon> I do nto write like that on iteration 1
[21:37:50] <LeoNerd> Then call that from the on_read by doing   if(ready) { $self->adopt_future( $self->be_a_client ) }
[21:37:59] <LeoNerd> THIS PART IS KEY
[21:38:04] <LeoNerd> The ability to  ->adopt_future  on that call
[21:38:20] <LeoNerd> You will find it impossible to write that -without- wrapping it up in its own sub
[21:38:23] <LeoNerd> subs are cheap. use them
[21:38:28] <daemon> I do on iteration 3
[21:38:43] <LeoNerd> Then I recommend you skip directly to "iteration 3" now
[21:38:52] <daemon> I do not understand enough yet
[21:39:00] <daemon> plus I have to prove it works first
[21:39:00] <LeoNerd> Which is why I am explaining it to you
[21:39:12] <LeoNerd> Writing the logic in one giant sub is not going to work
[21:39:35] <LeoNerd> You will therefore have a hard time "undersatnding it", because of this fact
[21:39:47] <daemon> probably why I had such a hard time understanding it in the first place
[21:40:25] <daemon> iteration 1 is POC, 2 is documentation(pre), 3 is breakdown and clean, 4 is refinement of code, 5 is documentation
[21:40:36] <LeoNerd> That's fine
[21:40:47] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 252 seconds)
[21:40:48] <ilmari> but #1 cant P the C if it doesn't W
[21:40:51] <LeoNerd> But splitting the logic into its own sub isn't just "cleanup", it is "essential mechanism that makes it work"
[21:40:57] <LeoNerd> So it has to be done in part 1
[21:41:05] <daemon> this worked in POE fine -_-
[21:41:10] <LeoNerd> POE doesn't have futures
[21:41:20] <LeoNerd> The entire way that async/await works is by suspending subs. Entire subs
[21:41:25] <LeoNerd> You can't suspend "a bit of a function"
[21:41:33] <daemon> so I could just put that tiny post in a sub of ist own
[21:41:35] <LeoNerd> That doesn't work. async/await suspends a whole sub in one go
[21:41:45] <LeoNerd> So "the part of the program that needs suspending" has to be a sub
[21:42:15] *** Joins: jpn (~jpn@user/jpn)
[21:42:37] <daemon> wait I can't I need the response in the main code workflow
[21:42:51] <LeoNerd> That is the point of await
[21:43:31] <LeoNerd> async sub be_one_client { my $resp = await $http->POST(...); do stuff with the $resp here... }     on_read => sub { ... if(ready) { $self->adopt_future( $self->be_one_client ) } }
[21:43:36] <LeoNerd> Stare closely
[21:45:23] <daemon> I understand to some degree that very small example but I have no idea how to refactor the code I already have to be compatible with that
[21:45:47] <LeoNerd> Overall I'd say your on_read handler is _far_ too big
[21:46:04] <LeoNerd> Cut it into smaller pieces, shaped like mine
[21:46:19] <daemon> ok 
[21:46:21] <daemon> one mo
[21:50:44] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[21:51:20] <gordonfish> Re: <ilmari> well, it calls ->get on the future, which does $self->await, which does $self->{loop}->await($self), which does $self->loop_once until $future->is_ready;
[21:51:28] <gordonfish> Ah, right. Makes sense. Thanks.
[21:51:55] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[21:52:06] <LeoNerd> If you go in for a purely F-AA driven approach even in the toplevel script you can often end up creating a Loop object but not really using it much directly
[21:52:17] *** Joins: fling (~fling@user/fling)
[21:52:39] <LeoNerd> In fact I have entire scripts that might just do  IO::Async::Loop->new->add( my $http = Net::Async::HTTP->new );   then make use of the $http object, but never needs to bother even putting the Loop into a variable
[21:56:20] *** Quits: cation (cation@user/cation) (Quit: Leaving)
[21:56:40] *** Joins: cation (cation@user/cation)
[21:58:12] <daemon> LeoNerd, https://dpaste.org/srYCO ok made it a bit smaller
[21:58:13] <Paperbot> Link title(s): [ dpaste/srYCO (Perl) ]
[21:58:47] *** Joins: The_Blode_ (~Blode@user/the-blode/x-7164444)
[21:59:43] *** Quits: The_Blode (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[22:00:20] <daemon> I kind of need the loop I beliee
[22:00:23] <LeoNerd> You are still doing  on_read => async sub
[22:00:23] <daemon> because of the two streams
[22:00:27] <LeoNerd> As I said that is pointless
[22:00:30] <LeoNerd> I should get IO::Async to warn about that
[22:00:34] <daemon> changed
[22:00:39] <LeoNerd> No IO::Async notifier currently ever cares about the return value
[22:00:59] <LeoNerd> So returning a future out of those is pointless and gets lost and in any case don't you have a console full of huge warnings about that?
[22:01:06] <daemon> no
[22:01:11] <daemon> no warnings at all
[22:01:11] *** Quits: thrig (~thrig@207.108.197.156) (Remote host closed the connection)
[22:01:20] <LeoNerd> https://metacpan.org/pod/Future#DEBUGGING  -- well make sure to turn that on
[22:01:21] <Paperbot> Link title(s): [ Future - represent an operation awaiting completion - metacpan.org ]
[22:01:23] <daemon> does not even warn when it freezes
[22:01:27] <LeoNerd> It'll hopefully find a few extra cases of mistakes
[22:01:45] <LeoNerd> It won't tell you where in the code you broke it, but at least it'll tell you that it is now broken and you shouldn't have done whatever you recently did
[22:01:51] <daemon> ah now I removed that async sub
[22:01:51] <daemon> Cannot 'await' outside of an 'async sub' at engine.perl line 197.
[22:01:54] <daemon> I can't do the post
[22:02:03] <LeoNerd> YEs SO STOP DOING THAT
[22:02:04] <LeoNerd> GAH
[22:02:08] <LeoNerd> I've said this now four times
[22:02:14] <LeoNerd> You can put `await` inside _an_ async sub
[22:02:16] <daemon> you said to make the code broken down into subs
[22:02:17] <daemon> so I did
[22:02:20] <LeoNerd> You cannot make on_read itself an async sub
[22:02:39] <daemon> not got to changing anything else yet
[22:02:46] <LeoNerd> Put the await inside a *SMALLER* async sub that gets called from on_read, so you can put its future result into ->adopt_future
[22:02:56] <LeoNerd> the word "adopt" does not apear in your post
[22:03:01] <LeoNerd> So you have not listened
[22:03:12] <daemon> you asked me to make smaller subs so I did I have not changed anything else yet
[22:03:20] <LeoNerd> Right. Well, then it still won't work yet ;)
[22:03:42] <LeoNerd> Until you have a call to  ->adopt_future  somewhere in the code, I'm willing to bet it will still be broken
[22:03:58] <LeoNerd> The restructuring was to get to a point where that is -possible-
[22:04:42] <LeoNerd> ((also as a total aside; you don't need to `use strict` on line 6 there, because the `use v5.28` on line 3 already enabled it)
[22:04:56] <daemon> oh the version brings in strict
[22:04:57] <daemon> nice
[22:05:12] <LeoNerd> v5.36  also turns on warnings so that's even nicer
[22:05:27] <LeoNerd> I've spent most of the past two days updating lots of core perl .pod files for that
[22:05:39] <daemon> ah so it finally happened cool
[22:05:47] <daemon> wonder when we will get non experimental signatures
[22:05:51] <LeoNerd> 5.36
[22:05:54] <daemon> nice
[22:05:56] <LeoNerd> It's in
[22:06:16] <daemon> ill have to have a tour of the boxes see which of them I can get to 5.36
[22:06:26] <LeoNerd> use v5.36;  # equivalent to: use strict; use warnings; use feature qw( signatures and a bunch of other nice stuff ); no feature qw( indirect switch ); ...
[22:06:27] <daemon> most are freebsd or gentoo so they should be possible
[22:07:02] <LeoNerd> Turning off "indirect" is a useful one too.. it stops all that annoying "oops I forgot to  use List::Util 'first'"  bug
[22:07:59] *** Joins: XV8 (~XV8@2601:5cb:c001:50::13f0)
[22:08:29] <daemon> Can't locate object method "request_state_parse" via package "IO::Async::Stream" at engine.perl line 140.
[22:08:29] <daemon> v
[22:08:31] <daemon> https://dpaste.org/NFLsT
[22:08:32] <Paperbot> Link title(s): [ dpaste/NFLsT (Perl) ]
[22:08:34] <xcombelle> very bad day rindolf 
[22:08:53] <LeoNerd> That sounds like the name of a function or method you've created for yourself
[22:08:55] <daemon> ah never really used indirect
[22:09:03] <LeoNerd> So probably you're calling it on the wrong object
[22:09:04] <daemon> oh wait
[22:10:02] *** Quits: Guest7160 (~david@2600:1702:26a0:2000:49f3:6f41:92ce:4978) (Quit: Leaving)
[22:10:55] <daemon> well that was unexpected
[22:10:56] <daemon> Ncat: Connection from 127.0.0.1.
[22:10:56] <daemon> close: Bad file descriptor
[22:11:04] <daemon> is my ncat being weird
[22:11:19] <daemon> yes it is
[22:11:22] <daemon> how did I break ncat
[22:11:44] <daemon> but hey it made the post!
[22:12:04] <daemon> https://dpaste.org/5yMv9
[22:12:05] <Paperbot> Link title(s): [ dpaste/5yMv9 (Perl) ]
[22:12:15] *** Quits: tusko (~yeurt@user/tusko) (Ping timeout: 240 seconds)
[22:12:41] <daemon> did I do a system upadte and miss nmap/ncat somehow
[22:12:42] <daemon> hmm
[22:12:43] <pragma-> netcat is the one being weird. not your program.
[22:12:54] <daemon> yeah I tried to netcat to its self (from a different terminal)
[22:12:56] <daemon> and it did the same
[22:13:01] <daemon> just recompiling it now
[22:13:46] <daemon> bad file descriptor again
[22:13:53] <daemon> what the hell did I do
[22:13:54] *** Joins: tusko (~yeurt@user/tusko)
[22:14:06] <rindolf> xcombelle: ah, what's wrong?
[22:14:17] <ilmari> daemon: you can call async subs as methods too, i.e $self->make_post($content)
[22:14:21] <pragma-> left a whole bunch of file descriptors open until you ran out?
[22:15:01] <daemon> missed -4 -_-
[22:15:06] <daemon> I forgot I removed IPv6 from the kernel on this box
[22:15:49] <daemon> perfect it worked now :D
[22:17:47] <daemon> IO::Async::Future=HASH(0x558d6b01e738) was constructed at /home/paul.webster/perl5/lib/perl5/IO/Async/Loop.pm line 638 and was lost near /home/paul.webster/perl5/lib/perl5/IO/Async/Function.pm line 762 before it was ready.
[22:17:50] <daemon> hmm
[22:18:00] <daemon> that's not good right
[22:18:16] <daemon> but I put it in its own small sub and saved the result
[22:20:06] *** Joins: jpn (~jpn@user/jpn)
[22:28:05] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 252 seconds)
[22:28:55] *** Joins: n1to (~n1to@user/n1to)
[22:29:28] *** Quits: KnoP (~KnoP@p4ff566f8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[22:30:17] *** Quits: deadmarshal_ (~deadmarsh@95.38.113.9) (Ping timeout: 252 seconds)
[22:31:44] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-e4f8-bd3f-9136-d580.res6.spectrum.com) (Ping timeout: 260 seconds)
[22:34:41] *** Joins: Xplorator (~Xplorator@176.166.206.65)
[22:36:25] *** Quits: proller (~p@2a02:6b8:0:408:a460:ef3c:f4ee:357e) (Remote host closed the connection)
[22:36:37] *** Quits: wingfold (~wingfold@173.38.117.84) (Ping timeout: 240 seconds)
[22:37:10] * GumbyPAN CPAN Upload: Test2-Harness-1.000119 by EXODIST https://metacpan.org/release/EXODIST/Test2-Harness-1.000119
[22:38:43] *** Joins: todo75 (~todo75@user/todo75)
[22:39:31] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 245 seconds)
[22:41:08] *** Joins: jayray (~jayray@user/jayray)
[22:43:23] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 260 seconds)
[22:44:21] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-f1ec-d7f3-37e1-032c.res6.spectrum.com)
[22:47:52] <Botje> not well enough it seems
[22:47:56] <Botje> show code?
[22:50:12] *** Joins: todo75 (~todo75@user/todo75)
[22:55:26] *** Joins: bit4bit (~bit4bit@181.49.102.14)
[22:56:18] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 260 seconds)
[22:56:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[22:57:12] *** Joins: fwg_ (~fwg@user/fwg)
[22:57:35] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[22:58:13] *** Joins: fling (~fling@user/fling)
[22:59:33] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[23:00:11] *** Quits: fwg (~fwg@user/fwg) (Ping timeout: 260 seconds)
[23:03:01] <daemon> Botje, https://dpaste.org/k5eGj
[23:03:02] <Paperbot> Link title(s): [ dpaste/k5eGj (Perl) ]
[23:05:10] <Botje> probably want to `use Carp::Always` so you get a nice stack trace
[23:05:29] <daemon> really need to rewrite it
[23:05:55] <daemon> but hopefully I can pull enough out of it to pass what I class as barrier 1
[23:06:15] *** Joins: jpn (~jpn@user/jpn)
[23:07:03] *** undercaffeinated is now known as dilfridge
[23:08:02] <LeoNerd> I'm not quite sure you're getting the point of await here
[23:08:24] <daemon> when await is used the subroutine is suspended so the rest of the program keeps running
[23:08:26] <LeoNerd> Your "make_post" is awaiting a future, then immediately returning the result of it anyway, and you're expecting ->adopt_future to return something
[23:08:27] <LeoNerd> It doesn't
[23:08:39] <LeoNerd> $self->adopt_future( do_subtask ); return;   <== void contect
[23:08:43] <LeoNerd> That's a typical thing to do
[23:08:52] <LeoNerd> async sub do_subtask   should then do all the actual logic
[23:09:00] <daemon> ah
[23:09:07] <daemon> so do_subtask keeps running
[23:09:08] <LeoNerd> You want to move the stuff to handle the response into that  async sub
[23:09:10] <LeoNerd> Yes
[23:09:15] <daemon> ok that makes sense
[23:09:21] <LeoNerd> This being the entire point of suspend-then-resuming that async sub
[23:12:17] <LeoNerd> There's probably JavaScript articles about async/await you can read.
[23:12:20] <LeoNerd> Exactly same idea here
[23:12:26] <daemon> I despise javascript
[23:12:27] <LeoNerd> (or you can watch my various perl talks)
[23:12:52] *** Quits: bmeneg_ (~bmeneg@131.100.62.65) (Quit: Konversation terminated!)
[23:13:02] <LeoNerd> Sure. But there's a *lot* of beginners writing it. Which means there's a *lot* of beginner-oriented tutorials and demos and articles about writing it
[23:13:09] <LeoNerd> So plenty of reading material to get the general shape
[23:13:23] <LeoNerd> You just have to remember that it's spelled "function" in JavaScript but "sub" in perl ;)
[23:13:35] <daemon> think if anything I would follow the c# ones, though comicaly enough I avoided async in c# and just used raw threads >.>
[23:13:41] *** Quits: jpn (~jpn@user/jpn) (Ping timeout: 246 seconds)
[23:13:59] *** Joins: morte_ (~user@181.114.17.106)
[23:15:16] *** Quits: choroba (~E.Choroba@89-101-243-80.cust.centrio.cz) (Quit: Leaving)
[23:15:38] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[23:16:21] *** Quits: rgrinberg (~textual@177.248.158.166) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:16:28] *** Joins: choroba (~E_Choroba@89-101-243-80.cust.centrio.cz)
