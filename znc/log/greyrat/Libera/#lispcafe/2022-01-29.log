[00:04:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[00:07:03] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[00:13:29] <gilberth> moon-child: I would have guessed that. Still looks a lot like ClIM actually.
[00:21:39] * moon-child doesn't know clim
[00:21:44] * moon-child thinks imgui is a bad idea, though
[00:25:01] <gilberth> Well, with CLIM you could have a display function with a pane, which is invoked after each command, with an UPDATING-OUTPUT macro which allows you to give some cache hints.
[00:25:16] <gilberth> Anyhow, since when does Windows have select(2)?
[00:26:14] <moon-child> but, you _have_ a pane, that is a persistent object
[00:26:15] <moon-child> yes?
[00:26:16] <gilberth> moon-child: But to judge I would need to read up further about immediate GUIs. Perhaps it's different? I dunno.
[00:26:36] <moon-child> immediate mode means you rebuild the graph every frame
[00:26:39] <gilberth> moon-child: Sure, the pane sticks.
[00:27:46] <gilberth> moon-child: Well, I update every frame too. In theory, if I could even do that with X11. Makes we want to route the vsync signal to say the RS232 again to get interrupts.
[00:28:11] <gilberth> However, most of the time nothing happens, and I don't do anything.
[00:28:15] <pl> gilberth: 9x or NT?
[00:28:17] <moon-child> update every frame, fine.  But the graph persists.  You an mutate one part of the graph, without impacting the rest of it
[00:28:32] <gilberth> pl: Windows 10. So NT.
[00:29:03] <gilberth> moon-child: Yes, and my event loop picks those changes up.
[00:29:03] <moon-child> win10 is so slow.  I still have a windows 8.1 on my craptop
[00:29:04] <pl> gilberth: select() is available for sockets only, use WaitOnMultipleObjects instead
[00:29:21] <moon-child> gilberth: yep, that is ordinary retained mode, not immediate mode
[00:29:33] <gilberth> pl: I have a socket.
[00:29:57] <pl> then yes, Winsock always had a select(2) available
[00:30:06] <gilberth> moon-child: Is it? I'll read up about that.
[00:31:16] <gilberth> pl: Ok. I face CCL giving me :TIMEOUT on its FD-INPUT-AVAILABLE-P primitive, when I said "I like to block" and thus XLIB:OPEN-DISPLAY fails.
[00:31:58] <pl> sounds like a bug probably in CCL
[00:33:00] <pl> select(2) is kinda mandatory for BSD Sockets, and Winsock implements them faithfully enough to carry BSD copyright notice
[00:33:04] <gilberth> Probably. I'll debug that. Bad thing is: Once I do too much debugging with PRINT, input is already available and all works fine.
[00:34:11] <gilberth> On Linux and BSD CCL uses poll(2) there. Perhaps the select(2) usage is just buggy. I'll assume for now, that Windows' select(2) behaves.
[00:35:11] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[00:36:45] <gilberth> I am working on my pure CLX backend, which actually will only be useful as a fallback. The real backend will perhaps just use libX11. And I'd like to have that fallback backend work with CCL on Windows, too.
[00:36:53] *** Joins: aeth (~aeth@user/aeth)
[00:49:01] <gilberth> Ok. I found a bug. Select was called like select(1, infds, NULL, NULL, tv); The 1 is wrong here, select(2) is not poll(2) :-)
[00:56:22] *** Joins: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21)
[00:56:24] <dra> Hello!
[00:58:29] <gilberth> The other bug is, that somewhere "please wait forever" is turned into -1, while the lower primitives expect NIL being used there.
[01:01:17] <selwyn> https://www.youtube.com/watch?v=yDpVvdC4K8k
[01:01:17] -ixelp- Valve Updated All the Half-Life 2 - YouTube
[01:02:53] <kakuhen> ok but did the regressions in half-life: source get fixed
[01:03:08] <selwyn> regressions?
[01:03:12] <kakuhen> oh wow i said this just as "office complex" b-roll was being played 
[01:03:13] <selwyn> i'm playing hl source now actually
[01:03:17] <kakuhen> those reflections are so ugly and kill the lighting
[01:03:20] <kakuhen> * the lighting of that level
[01:03:28] <gilberth> Ok. It works now. Makes we wonder, if anyone actually tested sockets with CCL on Windows. Whom to send patches? rme?
[01:03:54] <kakuhen> probably mailing list or github yeah
[01:04:06] <gilberth> Oh, and poll(2) takes -1 as "Please block".
[01:04:14] <kakuhen> in either case it'll take quite a while for rme to respond since he's busy with work and seems to have a pattern of checking on CCL once a quarter or so
[01:04:41] <gilberth> kakuhen: github? Forget it. I am not confident with that. I'll just send a patch, as I always did.
[01:05:01] <kakuhen> understandable
[01:05:41] <gilberth> kakuhen: Is there another person more active with CCL these days. But it's not urgent.
[01:06:13] <gilberth> But with time I should get into github and git in general.
[01:06:34] <kakuhen> gilberth: to the best of my knowledge, only rme seems to have commit access (at least on github)
[01:06:53] <gilberth> ok, thanks!
[01:09:45] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[01:10:09] <gilberth> This select(2) glitch is funny, as poll(2) takes the number of fds, while select(2) gets the size of the bitmap.
[01:10:19] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[01:18:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[01:19:28] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:20:21] <hayley> Good morning everyone!
[01:21:08] <Alfr> Hello beach.
[01:21:18] <hayley> https://www.youtube.com/watch?v=M2irYat2wf4
[01:21:18] -ixelp- Julia's Song (Remastered 2003) - YouTube
[01:21:21] <Alfr> *hayley
[01:21:29] <hayley> Seems the more interesting coffee compiler club meetings happen when I am asleep.
[01:22:14] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[01:23:54] *** Joins: aeth (~aeth@user/aeth)
[01:27:03] <hayley> https://www.youtube.com/watch?v=3ipzHViqzRs Holy shit, Christine Flood of G1 and Shenandoah fame showed up.
[01:27:03] -ixelp- Coffee Compiler Club, 2022_01_28 - YouTube
[01:28:04] <gilberth> Then don't sleep, hayley.
[01:28:30] *** Joins: jeosol (~jeosol@user/jeosol)
[01:29:03] <hayley> No, I was exhausted from last week. And if I show up, then they'll all be bad.
[01:29:31] *** Joins: Inline (~Inline@ip-037-201-241-209.um10.pools.vodafone-ip.de)
[01:30:35] <hayley> ok, there's only about 25 minutes on GC talk, and the rest somehow is all typing. Oh well.
[01:30:46] <gilberth> Bad? Who's bad?
[01:31:04] <hayley> All the meetings will be bad if I show up, apparently.
[01:31:05] <selwyn> i think hayley is trying to express sod's law
[01:31:34] <hayley> But, put it this way: the authors of the big two concurrent compacting GC algorithms were in the same meeting four hours ago.
[01:31:35] <gilberth> hayley: Do you think they turn bad because of you?
[01:31:41] <gilberth> selwyn: sod's law?
[01:32:01] <hayley> gilberth: Wouldn't be surprised.
[01:32:33] <gilberth> hayley: Hmm. Adjust your attitude then.
[01:33:03] <selwyn> sod's law is the idea that you if you attend anything frequently (football matches, compiler club meetings)
[01:33:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[01:33:25] <selwyn> you will tend to miss moments worth watching, and be present for the ones that aren't
[01:33:43] <gilberth> I see.
[01:34:32] <jasom> Not heard that one before, but my grandmother used to swear that the Red Sox lost every game she went to in person.
[01:34:37] <moon-child> selwyn: sounds like confirmation bias
[01:34:57] <jasom> given that my grandfather had season tickets, this was unlikely to be completely true
[01:35:20] *** Joins: aeth (~aeth@user/aeth)
[01:35:57] <gilberth> jasom: Well, bad things or things that fit our theory tend to remembered, while we forget the other.
[01:36:40] <moon-child> yes ^ confirmation bias
[01:36:46] <hayley> The joke is that I only showed up for one meeting.
[01:37:28] <gilberth> Or we notice things we are concerned about. Ever noticed how women who want a child see pregnant women all the time all around of a sudden?
[01:37:38] <jasom> Resistentialism seems related as well
[01:38:08] <jasom> gilberth: right; my preferred example is you seem to hit red lights more when you are late because you don't notice red lights when you aren't late
[01:39:59] <hayley> But there was no GC talk when I showed up, probably cause Christine Flood didn't show up then.
[01:40:16] <gilberth> jasom: lol. We have a lot of deer to watch for while driving at certain times. My wife always sees the deer, which is good. I never encounter them, just because I am not accustomed to it and don't see it. Which actually is bad.
[01:40:24] <moon-child> obviously the solution is to be christine flood
[01:41:26] <hayley> Already said I intended to be gender-bent Henry G Baker Jr.
[01:42:17] <gilberth> Anyhow, this bias could also be useful. If you really want something in life and you practice to start your morning with "I want xyz", your perception changes and you spot opportunities that would help you to get what you want, more easily and more often.
[01:42:33] * moon-child hopes to be freddie mercury, but will settle for fabian giesen
[01:42:34] <gilberth> And that is all this "The Secret" is about.
[01:43:46] * hayley searches and sees HandmadeCon presentations
[01:44:06] * hayley decides to look for the phone number to organise a FAA committee, just in case.
[01:44:36] <moon-child> lol
[01:47:17] * gilberth shuts down Windows and sees "Updating ..." and shrugs.
[01:49:10] <gilberth> Actually I wonder if a "real" Windows 10 is also that slow.
[01:51:26] <moon-child> it is
[01:51:44] <hayley> yep.
[01:52:21] <moon-child> that's why I keep win8.1 on my laptop
[01:52:59] <hayley> guicho271828 has starred one-more-re-nightmare somehow.
[01:53:24] <moon-child> who's that?
[01:53:34] <hayley> "'somehow?' You just press the star button." Yeah, but last I checked we weren't on great terms. Still, though, it happened. 
[01:54:32] <hayley> Author of the Trivia pattern matching library (which I use very extensively in OMRN), eazy-opencl (which I use very extensively in oclcl-petalisp, and despise), and a bunch of other stuff.
[01:57:50] <hayley> IIRC he also once asked if any Lisp systems used refcounting, IMO hinting to a poor implementation, so I laughed it off, and only then hinting to FBIP systems. But, as I've shown now, it's hard to keep a good debugger in the presence of FBIP unless you allow for hiding variables from the debugger (I think SBCL does have <optimized out>, but I don't like it), and what isn't mutable in Lisp tends to share structure an interesting amount of the
[01:57:51] <hayley> time.
[01:58:27] <gilberth> Interlisp uses reference counting.
[01:58:31] <hayley> (or, more, "what isn't used as mutable", as CL does not have a notion of immutable objects, other than numbers and characters.)
[02:01:43] <random-nick> what's fbip?
[02:01:53] <waleee> functional but in place
[02:02:06] <random-nick> ah
[02:02:25] <waleee> eg https://koka-lang.github.io/koka/doc/book.html#sec-fbip (not a lisp but ...)
[02:02:26] -ixelp- The Koka Programming Language
[02:03:16] <drakonis> anything can be a lisp if you squint hard enough
[02:10:48] <kakuhen> objective-c is my favorite lisp
[02:12:07] <moon-child> hayley: debugging also interferes with dx
[02:12:23] <gilberth> What happens when I say (defclass foo () ((#:x :initarg :x :accessor foo-x)))? Does that catch me not being disciplined enough and using WITH-SLOTS all the time?
[02:12:29] <hayley> Sure.
[02:12:48] <hayley> gilberth: Probably. It also means that redefinition will kill any state you have.
[02:13:00] <gilberth> hayley: Ouch!
[02:13:24] <gilberth> I wasn't thinking about the latter.
[02:13:45] <random-nick> would :x work?
[02:14:03] <gilberth> That would be worse.
[02:14:54] <gilberth> Because the keyword package is "public".
[02:16:02] <hayley> %x, so that you are allowed to execute anyone who writes %x.
[02:16:31] <gilberth> I mean (slot-value object :x) would work. As well as (with-slots ((x :x)) object ...)
[02:17:17] <gilberth> hayley: That one is me and I wanted to protect me from myself. A % doesn't stop me, nor does "::".
[02:17:53] <hayley> A % makes it obvious where you are doing something dumb.
[02:18:38] <gilberth> WITH-SLOTS already is dumb. But I use it all the time.
[02:19:03] <gilberth> lint for CL, when?
[02:19:23] * hayley makes notes for SICL
[02:21:16] * hayley tries to run the JOL <https://github.com/openjdk/jol> library, since apparently Java objects have 12-16 bytes of header, and she wants to test it.
[02:21:26] <hayley> Rather, there are demo programs which print out layouts.
[02:22:28] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:22:59] *** Quits: random-nick (~random-ni@87.116.181.150) (Ping timeout: 252 seconds)
[02:23:57] <moon-child> sicl objects have 32 bytes of header!
[02:24:00] *** Joins: Catie (~user@user/catie)
[02:24:23] *** Joins: aeth (~aeth@user/aeth)
[02:24:29] * hayley thinks
[02:24:40] *** Quits: dra (~dra@2a04:4540:6410:fa00:1daf:f543:2c33:ce21) (Quit: Leaving)
[02:24:53] <hayley> 16 bytes dyad + 24 bytes of mandatory slots in the rack IIRC.
[02:25:19] <moon-child> gilberth: (defmacro with-slots (&rest r) (error "no slots"))?
[02:25:38] <moon-child> hayley: 24 bytes in the rack?  I thought there was only a stamp and a length
[02:25:47] <hayley> One second...
[02:26:36] <hayley> https://github.com/robert-strandh/SICL/blob/master/Code/CLOS/standard-object-defclass.lisp Also a hash code. Surprise!
[02:26:37] -ixelp- SICL/standard-object-defclass.lisp at master · robert-strandh/SICL · GitHub
[02:26:45] <moon-child> right
[02:27:17] <hayley> Presumably the SICL specification mentions what's there, cause I don't remember now.
[02:28:18] <hayley> Yeah, three words: stamp, list of effective slots, and hash code.
[02:31:29] <hayley> I suspect you could replace the stamp and effective slot list with just a stamp that is produced per layout. Only one layout per class is ever non-obsolete, and we can mark a stamp table without much effort.
[02:31:49] <hayley> er, a table of stamp number -> effective slots or such.
[02:32:56] <gilberth> moon-child: You are not allowed to modify the CL package. I suggest (SHADOW "WITH-SLOTS"). ;-)
[02:34:10] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 250 seconds)
[02:35:52] *** Joins: aeth (~aeth@user/aeth)
[02:38:54] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[02:38:57] <|3b|> (defmethod sb-mop:slot-value-using-class :before (foo (o foo) s) (error "lol")) ;; making accessors work again left as an exercise for the user
[02:40:21] <|3b|> though if you just want to convince yourself to stop using with-slots, could just set up an emacs abbrev to expand it to with-accessors :)
[02:40:48] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:41:21] <gilberth> Well, I'm a WITH-SLOTS addict.
[02:42:36] *** Quits: OlCe (~user@amontsouris-654-1-37-13.w92-151.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[02:43:08] <gilberth> WITH-ACCESSORS won't save me much typing as I need to name the accessor functions.
[02:43:18] <|3b|> too bad with-accessors doesn't accept X as a designator for (X X) though, so can't just replace with-slots directly
[02:43:23] <|3b|> yeah
[02:43:27] <moon-child> gilberth: sure, I was assuming that
[02:43:40] <|3b|> though not too hard to write your own that does
[02:43:57] <gilberth> |3b|: Well the accessor won't be called just X.
[02:44:36] <|3b|> ah, i guess that's a bit harder then :(
[02:44:43] <pjb> gilberth: you can define your own macro expanding to a with-accessors form, to save even more typing.
[02:44:51] <gilberth> moon-child: Then why the DEFMACRO?
[02:45:02] * |3b| tends to just name slots and accessors the same
[02:45:14] <gilberth> pjb: I still need to name the accessors.
[02:45:19] <moon-child> gilberth: oh, good point.  If you shadow it it won't be defined in the first place
[02:45:45] <gilberth> |3b|: I really hate that. What I hate even more is the X-OF thing.
[02:45:59] <moon-child> why do you hate it?
[02:46:04] <moon-child> you use lisp-n.  Embrace it!
[02:47:33] <gilberth> I don't like it because X is not universal. A FOO-X might be different from BAR-X semantically. Just because sth has children, does not imply that those children are all sheets e.g. as with SHEET-CHILDREN.
[02:47:33] <hayley> The Utena idea of Lisp-n is quite funny. X is the same as (X) is the same as (X: SELF), as messages and variables are literally the same thing, but you still need to VALUE: (instead of FUNCALL) to call a function object.
[02:47:35] <|3b|> yeah, not intended to suggest others should agree with me :)
[02:47:54] <moon-child> gilberth: sure, but a package is bounded
[02:48:07] <moon-child> there is no expectation that a foo::x will be the same as a bar::x
[02:48:11] * |3b| would assume sheet-children means the parent is a sheet, not the children
[02:48:19] <|3b|> (which is also a bad assumption)
[02:48:31] <gilberth> And you easily wind up with clobbering symbols getting into the way when using multiple packages. How many things have slots called X and Y?
[02:48:57] <|3b|> but i'd tend to say different meanings of X should be in different packages rather than different names
[02:48:58] <gilberth> |3b|: Yes, but one that is caught at run time.
[02:49:38] <|3b|> so foo:x vs bar::x
[02:49:41] <moon-child> phoe: I hear gilberth is using packages instead of nicknaming them
[02:49:47] <moon-child> pls bonk him
[02:49:59] <gilberth> CLIM works with protocols. And I like it the way as it is. You have a sheet protocol with SHEET-xxx generic functions and an output record protocol with RECORD-... functions.
[02:51:24] <gilberth> moon-child: Yes, I do. I know a time when relative package names weren't implemented outside the Lisp machine.
[02:51:24] <|3b|> existing names makes things harder :/
[02:51:37] <phoe> moon-child: gasp
[02:51:58] * |3b| thought one of the commercial lisps always had relative package names?
[02:52:04] * |3b| also thinks relative names are useless though
[02:52:24] <gilberth> |3b|: Franz? Nope. They called that relative package names, but it was sth quite different.
[02:53:12] <gilberth> Relative names are our new package local nicknames. They are called because the package prefix is resolved relative to the current package.
[02:53:31] <|3b|> ah, cool :)
[02:53:41] <moon-child> so like java?  from within foo.bar, I can refer to foo.baz:x as simply baz:x?
[02:54:18] <gilberth> So my CLIM:FOO could be different from your CLIM:FOO. But the Lisp machine also allowed for 3B-TOOL:CLIM:+RED+
[02:54:27] * |3b| missed that when searching for things to compare against while making package local nicknames
[02:54:47] <gilberth> moon-child: Yes, this is what Franz sold as "relative package names". Uselsss.
[02:55:35] <gilberth> What we call package local nicknames today is what Symbolics called relative package names. Quite rude by Franz to take that term.
[02:55:38] <|3b|> i think they actually called it "hierarchical packages", not relative
[02:56:11] <gilberth> I am pretty sure they called it relative, but am too lazy to look that up.
[02:56:29] <|3b|> https://franz.com/support/documentation/10.1/doc/packages.htm#hier-packs-1
[02:56:31] -ixelp- Packages
[02:56:37] <|3b|> though possibly it has been renamed in the past
[02:57:11] <gilberth> Anyhow, it's very useful. I could load all three CLIMs into an image and still say CLIM:+RED+ in my sources. The nickname definition would point to the CLIM I want to use today.
[02:58:18] <gilberth> |3b|: Ok, then it was perhaps others who said "relative package names" to Franz' Java-like hierarchical package names.
[02:59:40] <gilberth> One thing, which even is more feasible with our local nicknames, is that I wish more people would name their packages prefixed by a domain. Like ORG.LISPCAFE.GREATEST-SYSTEM.
[02:59:52] <|3b|> hmm, wish i saw that lisp-machine stuff earlier, might have been nice to try to match it better
[03:00:55] <gilberth> Then you could use my ORG.LISPCAFE.GREATEST-SYSTEM without :USEing my package, but by giving it a nickname.
[03:02:03] <|3b|> yeah, i think that has gotten a bit more popular since local nicknames is available in most implementations
[03:02:55] <gilberth> I believe that will lead to shorter identifiers as often symbols are named like FOO-... when withing that FOO system this FOO would be redundant otherwise. Without FOO- :USEing would be hard, with nicknames, you can actually instead say FOO:... or F:... if you like.
[03:04:15] <gilberth> On that note, I believe CLIM's names are overly verbose. Why is it: MAKE-TRANSLATION-TRANSFORMATION? First, a translation is a transformation, no need to mention that, second MAKE- is redundant too. Or do you say MAKE-CONS-OBJECT?
[03:04:22] * |3b| isn't sure about the option for defpackage to inject relative nicknames for itself into other packages though
[03:04:51] <moon-child> (make-instance 'coons :car car :cdr cdr :cgr cgr)
[03:06:47] <|3b|> well, you MAKE- arrays, various streams, hash tables, lists, etc. CONS is probably just due to old code :)
[03:06:55] <gilberth> moon-child: Even worse. As transformations are immutable, make-translation-transformation may intern. In one special case I do that: (make-translation-transformation 0 0) -> +identity-transformation+
[03:07:39] <gilberth> |3b|: VECTOR? It's not MAKE-VECTOR* as CLIM would have called that.
[03:08:05] <|3b|> right, cl isn't very consistent
[03:08:53] <|3b|> cons,vector,make-list,make-string,make-array
[03:09:02] <gilberth> I don't like that MAKE- prefix. In in CLIM it even is wrong at times. You are not guaranteed to get a fresh object in each case.
[03:09:23] <selwyn> my lisp images keep dying after a day or two
[03:09:25] <|3b|> that i will agree sounds bad
[03:09:28] <selwyn> what to do
[03:09:51] <|3b|> selwyn: cron job to restart it after a day
[03:10:04] <selwyn> that's a good idea..
[03:10:14] <gilberth> Well, it could be argued that it makes sense with MAKE-STRING, it constructs an empty string of a length. It does denote a string like with (STRING ..).
[03:11:12] <gilberth> I just see that different with transformations and regions. That are mathematical objects. Would be like having MAKE-COMPLEX-NUMBER instead of COMPLEX.
[03:12:05] <gilberth> Most of the time your are not concerned about actually making, that is consing an object.
[03:14:41] <gilberth> Anyhow, I played with a package which provides me abbrevs. Invoking general designs, I could say (draw (in +red+ (rectangle 100 100 200 200))) instead of (draw-rectangle* *standard-output* 100 100 200 200 :ink +red+). I could also do (draw (rotate (/ pi 2) (scale 2 (in +red+ (rectangle 100 100 200 200)))))
[03:31:33] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 250 seconds)
[03:56:37] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:08:10] *** Quits: mrmr (~mrmr@user/mrmr) (Quit: The Lounge - https://thelounge.chat)
[04:33:57] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[04:36:08] *** Joins: aeth (~aeth@user/aeth)
[04:42:18] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[04:44:21] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[04:47:09] <hayley> https://www.youtube.com/watch?v=RZJQ-JBHxWA
[04:47:10] -ixelp- Dazzle Ships 1-7 - YouTube
[04:47:20] <hayley> moon-child: fuck yeah I'm coonsing
[05:08:46] <gilberth> Hmm, suppose I want to have immediate objects. Suppose that there are many of them, so that pre-consing them would not be feasible. Say that there are few enough that allocating the equivalent size in the address space would be fine. Can't I just allocate the objects so, that they all point inside the same physical memory page filled with the appropriate header?
[05:09:13] <gilberth> I could then tell the immediate value by looking at the address.
[05:09:48] <hayley> I don't see why not.
[05:09:56] <hayley> Can't afford tags though?
[05:10:23] <gilberth> Not when I am not alone.
[05:10:53] <hayley> Hm.
[05:10:54] <gilberth> Address space can be allocated, you can't allocate tag bits.
[05:11:13] <hayley> How would your TLB feel about it?
[05:11:54] <gilberth> Depends on, if I actually dereference the pointers.
[05:13:30] <hayley> Does checking the header not count as dereferencing?
[05:14:07] <gilberth> Anyhow, this whole scheme would be implementation-dependent anyway, as I need to mmap and I need to do so, that GC doesn't attempt to move the objects. But it would be less invasive than asking the user to recompile his Lisp with a patch from scratch.
[05:14:42] <gilberth> hayley: It does, but my FOO-P could as well look at the address.
[05:15:32] <hayley> So, what actions actually need to read data from your single page, and what data is it? Is it immediate or not?
[05:15:57] <hayley> FOO-P looks at the address, FOO-VALUE apparently can tell the value by looking at the address too?
[05:16:17] <gilberth> Yes. As there are /n/ FOOs.
[05:16:42] <hayley> So what are you actually doing that needs to read from memory?
[05:16:50] <gilberth> The object header would be all the same and thus the virtual address could map to the same physical.
[05:17:27] <gilberth> hayley: A generic function will look at the header. But in my case that would be rare and a bit odd.
[05:17:49] <hayley> Right then.
[05:18:09] <gilberth> It was just a some idea.
[05:18:42] <hayley> Sure.
[05:18:56] <hayley> #lispcafe gets to read all my "just some idea"s.
[05:19:47] <gilberth> At times a "just some idea" is a brilliant idea. You don't know beforehand.
[05:21:04] <hayley> Hm, odd that the quote on <https://github.com/telekons> is only actually written in text form there. I got it from <http://www.nureference.co.uk/discography/beggars/BBL%2019%20CD%20pge%202.jpg> which hasn't been transcribed by anyone other than myself.
[05:23:43] <hayley> I didn't spot the name being related to "telekinesis", mostly because the album mostly expresses paranoia surrounding other people and machinery (as mentioned).
[05:27:08] <hayley> ...and, in no small part, due to that the website with the scans really makes it difficult to view the scans at a good size. Defeats the point, really.
[05:29:41] *** Quits: kevingal (~quassel@37.228.202.92) (Remote host closed the connection)
[05:50:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[05:52:38] *** Joins: aeth (~aeth@user/aeth)
[06:12:34] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[06:13:33] <hayley> https://www.reddit.com/r/cscareerquestions/comments/setxnt/psa_one_of_the_fangs_is_about_to_internally/
[06:15:54] <hayley> (Apparently it's Amazon. idk I don't read any news.)
[06:21:34] <jeosol> hayley: thanks, interesting read/. Definitely Amazon
[06:21:48] <jeosol> I have heard of the terrible culture there
[06:22:20] <hayley> All I know is the piss bottles for delivery workers, and the shitty write-a-server-in-Rust presentation.
[06:22:28] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[06:23:31] <hayley> (The latter being shit because they used a "benchmark" which doesn't stress the server on any hardware known to man, in order to claim success — it's all roundtrip latency.)
[06:24:20] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[06:26:43] <hayley> But it's the first I hear that the tech culture there is shit. And I wasn't really aware that people idolise working at FA(A?)NG; I thought everyone wanted to be Elon Musk or something.
[06:28:20] <hayley> "There are people who make their entire life about their career and act like the LinkedIn equivalent of a social media influencer. They unapologetically idolize certain employers like other people would a hollywood celeb. Like you don't work at Amazon but are for some reason gushing about how they're awesome and follow gossip." lol
[06:30:08] <hayley> Applied Language is basically my dream "job", except that it brings in little money. We even have a 20% rule: you read random papers 80% of the time, and hack the other 20%. I think that's how Google works.
[06:39:12] <White_Flame> hayley: I see "PIP" in that thread a lot, any idea what that means?
[06:39:33] <hayley> "Performance improvement plan"
[06:39:51] <White_Flame> and as a verb that implies... :)
[06:39:59] <hayley> Apparently an indirect way to mean you're getting fired.
[06:40:09] <White_Flame> ok
[06:40:27] <White_Flame> hmm, "These complaints are 90% amazon. 10% facebook. I have heard that netflix PIPs a lot, but they have far fewer employees."
[06:41:21] * hayley has failed to ratio The Linux Cast (creative name!) on C being "the right tool for the job"
[06:42:47] <hayley> "In my first job, a senior analyst handed a foot-tall stack of printed code to a junior analyst and said, “Let me know if there are any bugs in that.” The junior analyst placed his hand on the top of the stack, closed his eyes for a moment, and then intoned, “Yes.”"
[06:43:07] <White_Flame> heh
[06:44:19] <jeosol> hayley: Yes, people in the US here idolize working at FAANG cos of the high salaries
[06:44:33] <hayley> Still, "when the hell is C the right tool for the job?" seems to be the obvious question.
[06:44:50] <White_Flame> when you're working on an existing C project, I guess :-P
[06:45:17] <jeosol> White_Flame: never seen the abbreviation PIP before?
[06:45:21] <hayley> Can't argue with that.
[06:45:28] <White_Flame> picture in picture :-P
[06:45:39] <jeosol> Guess you are not stateside
[06:45:43] <White_Flame> I am
[06:45:58] <jeosol> really? ok, guess not plug into the fang bs
[06:46:02] <hayley> I'd also guess anywhere where you're going to diddle a lot of pointers anyway (though it's more fun with DEFINE-VOP, honestly), but Blackburn and friends found they could write a whole GC in Rust without much unsafe { }
[06:46:03] <White_Flame> correct
[06:46:25] <White_Flame> woudln't touch any of them with a 10 foot pole
[06:46:36] <jeosol> it's madness over there, real madness
[06:47:14] <White_Flame> america worships money, and thus FAANG are gods
[06:47:32] <jeosol> read a few of the comments, and one guy said how you have to out perform members of your team to be ranked better. Like a duel, what kind of stupid pressure
[06:48:19] <White_Flame> I think microsoft stopped doing their ridiculous ranked firing system
[06:48:21] <jeosol> I have heard other cases, not Faang specifically, where colleagues can sabotage your work, like delete your slides prior to a presentation or other nefarious stuff. I am told, there you don't every leave your computer unlocked. Your screen must be locked at all times
[06:48:54] <hayley> What the fuck?
[06:49:02] <jeosol> My friend said it was hunger games, they also had PIP and stacked ranking, with the bottom x% getting axed each year
[06:49:03] <White_Flame> right, these aren't workers, aren't professionals, aren't computing people
[06:49:25] <jeosol> I think I hear it was Jack Welch of GE (?) that started it many decades and many companies copied it
[06:49:29] <White_Flame> they're literally doing the hunger games for the bigger paycheck
[06:49:48] <White_Flame> right, but as far as I know it's been completely debunked as destructive
[06:50:00] <White_Flame> but momentum continues at the speed of business :-P
[06:50:01] <jeosol> yes, very true
[06:50:19] <jeosol> hence some companies moved away from it
[06:50:23] <White_Flame> and not just paycheck, but ego and "winning".
[06:50:29] <jeosol> yeah, that too
[06:50:36] <White_Flame> lots of narcissistic sociopaths, too
[06:50:39] <jeosol> lots of politics
[06:50:40] <White_Flame> not just greed
[06:50:56] <White_Flame> I hate the entire industry
[06:51:01] <White_Flame> money ruined computing
[06:51:09] <jeosol> have to play along, drink beer, ..., or you are seen as not a team player
[06:51:35] <White_Flame> or rather, the gold rush ruined computing
[06:51:53] * hayley reads "ego" and twitches
[06:53:20] <hayley> But that's odd. Are they team players or not? Or is inter-personal sabotage and competition just never spoken of?
[06:55:11] <jeosol> hayley: it's the culture there and that is what you have to do to rise in the company
[06:56:07] <jeosol> obviously, you don't do it to be seen, the sabotage, is usually saying negative things about your colleagues, or saying they aren't as competent or something
[06:56:29] <jeosol> there are companies where managers as other colleagues about fellow colleagues performance, and imagine if you don't get along with them well, what they will say
[06:57:34] <hayley> Right.
[07:02:33] <jeosol> some places are just toxic, and then those won't can withstand it or like it, leave, and then you get a concentration of toxic people left behind
[07:30:30] <gilberth> This is strange. I can open fonts with XLIB:OPEN-FONT fine, where xterm -fn <font> fails.
[07:56:54] *** Joins: Oddity (~Oddity@user/oddity)
[08:12:07] *** Joins: semz_ (~semz@user/semz)
[08:14:46] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[08:16:23] *** semz_ is now known as semz
[08:52:37] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[08:54:54] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[08:55:12] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[08:55:53] <hayley> Well, I figured out that I can convince my compiler to generate transitions without sufficient bounds checking, when derivatives don't show that something won't obviously match, but length inference does. I incorrectly forced :INFINITY values to 0, which allows for unchecked loads where there shouldn't be. Oops.
[08:56:19] <hayley> Now I just don't even generate code for such states, and transitioning to one is handled as failure to match immediately.
[08:57:03] <dave0> maw
[09:00:47] <hayley> maw
[09:02:51] <hayley> Such transitions are rare, because we usually paper over them with a grep[] machine, and you have to have enough "dead" states to go out of bounds.
[09:22:29] *** Joins: contrapunctus_ (a75f5b1571@jabberfr.org)
[09:35:29] *** Joins: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net)
[09:35:41] <vms14> I'll become a schemer
[09:36:11] <vms14> s7 scheme has the format function and that was the only thing I was missing from cl
[09:36:22] <vms14> and has some cl stuff
[09:36:46] <vms14> but it's hard to see how () is true and stuff alike
[09:37:50] <vms14> and I liked cl for having separate namespaces for functions even if this is a hated "feature" from some lispers
[09:38:21] <vms14> I suppose it's matter of time to get used to, but I really like s7 scheme
[09:38:30] <vms14> I always liked it
[09:41:30] <|3b|> write a CL for it :)
[09:48:32] <vms14> nah, I'm happy with it
[09:49:08] <vms14> and I had troubles sometimes in cl when accepted rest arguments and wanted to pass them to another function which accepts rest arguments too
[09:49:40] <vms14> they'll be packaged as a list so I cannot "flatten" it unless I use ,@
[09:50:22] <vms14> in this scheme ,@ exists but it's also the same as (apply values list)
[09:50:30] <vms14> (define (c-for init condition step . code)
[09:50:30] <vms14>   (format #f "for(~a;~a;~a){~{~a;~}}" init condition step code))
[09:50:30] <vms14>  
[09:50:30] <vms14> (define (c-while test . code)
[09:50:33] <vms14>   (c-for "" test "" (apply values code)))
[09:50:57] <vms14> the . dot is &rest
[09:52:47] <vms14> it has unhygienic macros and gensym
[09:53:37] <moon-child> hayley: unfortunately, for dubious reasons of 'performance', present implementations do not permit us to (defclass coons (cons) ((%cgr :accessor cgr :initarg :cgr)))
[09:53:41] <moon-child> damn anti-modular cl
[09:54:17] <moon-child> vms14: https://github.com/moon-chilled/loop/  loop + extensions for s7
[09:54:17] -ixelp- GitHub - moon-chilled/loop: Loop implementation for scheme
[09:54:35] <vms14> also a feature I liked a lot from cl is when you (make-array :element-type 'char :fill-pointer-p t :adjustable t) you can use this array as a string and format can use it as if it was a stream
[09:54:48] <vms14> have the same here
[09:55:13] <vms14> (open-output-string)
[09:55:54] <vms14> and... it runs on android
[09:55:56] <vms14> xD
[09:56:36] <vms14> I've made a remote repl with java sockets and use netcat to have a repl from the pc to the phone
[09:56:52] <hayley> moon-child: you have posted anti-modular code prepare to lose subscriber
[09:57:49] <vms14> but I have to write a lot of c code to bind the jni functions 
[09:58:37] * hayley wonders what to call a RE fuzzer. "It's regrind time!"
[09:59:04] <moon-child> getting that \sigma grindset
[10:00:33] <hayley> I also don't yet have s-expression REs, so I'll just generate strings, much to the dismay of gilberth. 
[10:02:20] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 256 seconds)
[10:03:22] <moon-child> nah there's an easy excuse for that
[10:03:27] <moon-child> gotta test your RE parser too
[10:03:35] <moon-child> .oO(is omrn bootstrapped yet?)
[10:03:51] <hayley> I can't parse RE syntax with REs, no.
[10:04:02] *** Joins: aeth (~aeth@user/aeth)
[10:04:16] <hayley> But I heard the guy who parses HTML with regexes can also parse regex syntax with regexes too.
[10:07:28] <hayley> (random-re) ⇒ "(¬¬Z)|(((B)&(L))|(«F»))"
[10:07:31] <hayley> Terrifying. I like it!
[10:11:14] <hayley> "Unhandled memory fault at #xA." Hey, I thought I just wrote a checked AREF that would handle this. 
[10:13:27] <hayley> I made my result register vector too small, and that somehow makes a fault at #xA. Not going to ask how.
[10:13:53] * moon-child forwards hayley to the aircrash bureau
[10:14:56] * hayley tries to recall some relevant meme 
[10:15:25] * hayley uploaded an image: (31KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/wAMzlzooCYDrmkqtDVfjlqmo/private-police.jpg >
[10:15:55] <hayley> "The assertion (AND (<= *START* INDEX) (< INDEX *END*)) failed." Hooray, a bug.
[10:18:09] <hayley> Fortunately for me, it takes my laptop a few seconds to find a bug, which means that a fair few REs aren't broken. gilberth apparently can't say the same with his tests.
[10:18:22] <vms14> hayley I've made a lisp "parser" using regex
[10:18:44] * hayley calls the Chomsky hierarchy police
[10:29:41] <hayley> Hm, I consistently get errors when the minimum length is determined to be 0. Then the compiler decides, on a transition from m-l = 1 -> m-l = 0 that we don't need the check. Oops.
[10:31:32] <hayley> This would happen e.g. on the transition for b for b(ab)* or something like that. Oops.
[10:32:18] <vms14> hayley: https://pastebin.com/rgKb0smQ
[10:32:19] -ixelp- use strict; my $token_regex = qr /\".+?\"|[^\(\)\s]+/o; sub sexp_to_ast - Pastebin.com
[10:32:20] <vms14> xd
[10:32:51] <vms14> it transforms the ( for [ and so on so it's a perl array reference
[10:33:04] <vms14> then it just evals it and you get the ast
[10:33:17] * hayley keeps playing around and finds a RE that refuses to compile. Uhoh.
[10:33:18] <moon-child> so it doesn't really parse, just punts to the perl parser
[10:34:12] <hayley> ((¬«S»))* apparently has infinitely many derivatives, which is never good.
[10:34:29] <vms14> https://pastebin.com/BJGQJRHw this is the whole stuff
[10:34:29] -ixelp- use strict; use Term::ANSIColor; use Data::Dumper; ### TODO - Pastebin.com
[10:34:54] <vms14> you could download it and just use perl file.pl
[10:35:10] <vms14> but there is no readline so you could use rlwrap
[10:35:14] <vms14> anyways it's shit
[10:35:15] <vms14> xD
[10:35:15] * hayley wonders why read_sexp is inspecting function names and all.
[10:35:31] <vms14> hayley: everything is broken
[10:36:00] <vms14> I have no idea about this stuff, they were a bunch of tests that seemed to work
[10:36:22] <vms14> macros just work because I'm traspiling perl code using perl code
[10:36:41] <vms14> but everything is wrong
[10:37:43] <hayley> Now I'm confused, as apparently there are finite similar derivatives, yet the DFA construction function finds some more to make.
[10:38:29] <hayley> .oO(I didn't check what happens with a grep machine and all.)
[10:39:30] <hayley> Aha, δ_SSSS.... yields infinitely many hairy derivatives.
[10:42:18] <hayley> I see an intermediate ¬{some tag set} which should be simplified to the empty set, I guess.
[10:43:12] <hayley> Yep, that was the bug.
[10:44:11] <hayley> My compiler now doesn't explode on at least 3,613 regular expressions, which I'd say is pretty good.
[10:46:46] <hayley> Fuzzing really seems to pay off quickly for me.
[10:46:56] <hayley> https://github.com/telekons/one-more-re-nightmare/blob/master/Tests/regrind.lisp
[10:46:57] -ixelp- one-more-re-nightmare/regrind.lisp at master · telekons/one-more-re-nightmare · GitHub
[10:56:31] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[10:56:36] *** Quits: vms14 (~user@114.red-79-153-195.dynamicip.rima-tde.net) (Remote host closed the connection)
[11:01:17] <hayley> "If your code causes unintentional deaths it's not quality." "I get your point but that's applying a moral point of view to a technical question [...] It's because the essence of software quality is not a natural law, it's the relative perception of it's users."
[11:01:33] <hayley> Next question: in what contexts does a user have a high perception of your software, when it kills people?
[11:02:28] <hayley> First to say "social media" gets to pay for my bail from the aircrash bureau, who have held me prisoner since moon-child snitched on me.
[11:03:34] <White_Flame> code should only cause intentional deaths
[11:03:50] <hayley> But I guess "I don't want to get hacked by buggy software", let alone "I don't want to get killed by buggy software", are functional requirements that no one thinks they actually have to say out loud.
[11:09:09] <hayley> "I'm an ex Lead Frontend Developer" ok, can't pick on him, he probably hasn't had to deal with corruption from out-of-bounds bugs. Which is generally a good thing, of course.
[11:10:24] * hayley spots https://i.redd.it/90lldfyvlq481.png by the author. So I guess FAANG^WMAANG (in this case) idolisation is a thing.
[11:10:56] <moon-child> i thought it was MANGA
[11:11:53] <hayley> Well, that works.
[11:17:59] <Aurora_v_kosmose> hayley: I'm sure the buyers of automated weapons would be quite enthussed, unlike the end-users.
[11:19:47] <Aurora_v_kosmose> Outside of such malicious uses, few come to mind that would be enthussed by lethal potential.
[11:33:39] <hayley> Another thought: we might "create value" somehow, but we also have to "not not create value". However, the double negative is important; it's much like comparing liveness (we eventually do something good) and safety (we never do something bad).
[11:34:01] <hayley> "However a case still can be made that the mentioned errors has actual desirable uses. For example if you are part of a cyber attack force and is about to hack someone might be even to death in a war situation." Hence I sad "very few desirable uses", not none.
[11:42:21] <hayley> (The replies in https://www.reddit.com/r/programming/comments/se88im/dubious_achievement_comm_of_the_acm_34_4_april/huigwjk/ FWIW)
[11:42:22] -ixelp- "Dubious Achievement", Comm. of the ACM 34, 4 (April 1991), 18. : programming
[11:49:27] <moon-child> hayley: hmm, I changed my mind; deep-copy is not a well-defined operation
[11:50:01] <moon-child> copying classes is not the primary problem, only a manifestation of it: you can't account for pointers into implicit context
[11:50:13] <moon-child> obvious example being an array index, or a symbol
[11:52:02] <moon-child> (well, you can snapshot the whole image, but that's not really the local operation you expect from a deep copy)
[11:54:39] <hayley> Generally, idk how you avoid moral/ethical concerns when specifying how a system should work. Even the case of hacking some organisation "to death in a war situation" could well be an act of self-defense.
[11:55:34] <hayley> But then "don't blow _us_ up by mistake" is still a useful requirement.
[11:55:39] <moon-child> I would shorten to 'idk how you avoid moral/ethical concerns'.  No one said ethics is not a trivial field :P
[11:55:56] * moon-child 's mom's friend is an ethicist
[11:56:32] * hayley infamously once said ethical software was a sad joke, cause their ethical system was rubbish.
[11:57:16] <hayley> And, indeed, you can still have bad ethics, but still have ethical concerns of some kind.
[12:00:11] <hayley> Their first comment is also wrong IMO. "With perfect knowledge about the hardware and the programming tools to be used along with an unchanging set of exact, correct requirements software can be developed as other engineering products" and then the author implies that anything less than such knowledge makes it impossible.
[12:00:30] <hayley> Yet I can still write formal specifications and models, though I know little about the hardware and surrounding software.
[12:04:36] <moon-child> people seem not to understand semantics, or compilation
[12:04:46] <moon-child> I don't need to know how the hardware is implemented to know its abstract model
[12:05:03] <moon-child> (and I can't get perfection anyway; no one knows if our models of physics are perfect)
[12:09:27] <hayley> Right.
[12:11:08] <hayley> Similarly, no one needs to know how a particular resistor was designed, if they have a half-decent datasheet. It's still interface vs implementation in engineering (though I can only comment on EE really).
[12:11:53] <hayley> It may as well say "the consequences are undefined if you run too much current through a component" :)
[12:12:06] <moon-child> :D
[12:20:13] * hayley still wonders how to achieve regex implementation fame. Probably doesn't help by writing it in CL. But without that, she'd have no implementation to be famous for. Hm.
[12:24:16] <hayley> Also, my compiler should be thread safe, and the SBCL compiler can be run concurrently apparently, so I should multi-thread the fuzzer.
[12:38:01] <hayley> gilberth: Apparently re2c can now generate Rust code. Ironic.
[12:38:57] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[12:39:13] <hayley> The generated code is also amusing: https://re2c.org/manual/manual_rust.html
[12:39:13] -ixelp- User manual (Rust) — re2c 3.0 documentation
[12:41:02] <selwyn> gnuxie: https://www.ft.com/video/56db419e-e3ad-43ba-abe2-5c0e75de6ecf
[12:41:03] -ixelp- Nick Clegg's first interview in the metaverse | Financial Times
[12:41:04] <selwyn> cursed content
[12:46:32] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:46:56] <selwyn> blockchain coming to the metaverse apparently
[12:47:17] *** Joins: shka (~herr@109.231.0.226)
[12:54:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[12:56:52] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:04:32] <ck_> I think I am, in fact, tired of winning at this point
[13:26:04] *** Joins: random-nick (~random-ni@87.116.167.125)
[13:32:13] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[13:33:30] *** Joins: kevingal (~quassel@2a02:8084:4140:f300:e0c2:1cb3:66c2:bea2)
[13:35:00] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[13:37:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:44:09] * selwyn learns about the haber process
[13:46:36] <selwyn> should have paid more attention at school lol
[13:53:27] <ck_> would it have been a topic in school chemistry?
[13:53:41] <shka> it would here
[13:54:26] <ck_> spectacular https://upload.wikimedia.org/wikipedia/commons/1/1e/Fritz_Haber.png
[14:18:03] <selwyn> http://assets.markallengroup.com/article-images/image-library/147/uploads/sites/9/2016/03/WEB-Taylor-pic-for-inset.jpg
[14:20:31] <selwyn> i ought to get glasses actually
[14:35:10] <ck_>  bottom text: when you accelerate some particles
[14:36:17] <selwyn> ck: i am informed that this is a look
[14:36:21] <selwyn> https://timesofindia.indiatimes.com/life-style/fashion/buzz/pharrell-williams-called-out-for-wearing-tiffanys-copy-of-antique-mughal-glasses/articleshow/89173622.cms
[14:36:21] -ixelp- tiffany: Pharrell Williams called out for wearing Tiffany's copy of antique Mughal glasses - Times of India
[14:36:23] <selwyn> mughal glasses
[14:37:05] <ck_> "The spectacles were designed to help the wearer reach enlightenment and ward off evil. [...]"
[14:37:10] <ck_> neat
[14:39:13] <ck_> this has been entered into my lexicon, for the next time I need to chat up a hot bird
[14:40:16] <ck_> so yeah I like quiet walks on the beach, playing the violin at dawn, and ward off some evil when I get the chance  anyway how was lunch?
[14:41:39] <selwyn> make sure you have a licence to chat up that hot bird mate
[14:42:29] <ck_> I have just renewed my ornithologists license
[14:43:12] <semz> I didn't know ck_ and phoe had something like this going.
[14:43:37] <ck_> something like what?
[14:44:36] <semz> maybe the hot bird pun was too silly
[14:45:06] <pjb> ck_: what does an ornithologist license allow you to do?
[14:45:17] <ck_> I went to the school of The Streets. He told me that "we say birds, not bitches"
[14:45:50] <ck_> pjb: makes me a qualified bird descriptor, don't you know anything interrobang
[14:45:59] <selwyn> lol
[14:53:07] <pjb> ck_: so if somebody says "hey look it's Superman", you can officially contradict them and say, "no, it's a male Eastern Bluebird."
[14:53:53] <ck_> it's often an unladen swallow
[14:59:38] <neominimum> What if they say "hey look it's Wonder woman!" ;)
[15:01:45] <neominimum> https://en.wikipedia.org/wiki/Masked_booby
[15:12:00] * hayley starts to think she can't actually simplify (not (tag-set ...)) to (empty-set), but needs some simplification so that one RE has finite similar derivatives, seemingly.
[15:13:34] <hayley> Hm. NULLABLE of INVERT here is INVERT of NULLABLE, which means I preserve semantics otherwise.
[15:17:59] <hayley> Otherwise a tag set is just a funny empty string, and they are handled the same elsewhere. ok, looks valid to me.
[15:18:04] <pjb> neominimum: then an ornithologist could contradict with a: "no, it's a Eos histrio".
[15:19:49] <hayley> Is there even a negation form specified by POSIX or PCRE? If not, I guess I am free to do whatever, and dropping submatches in an INVERSE makes sense.
[15:26:38] <gilberth> hayley: Supposing "inverse" is your funny name for a complement, what do you think? Can the Thompson method deal with Boolean operations?
[15:27:29] <hayley> It cannot, no. And I do need to fix names, sure.
[15:28:34] <hayley> But should e.g. (:not (:group "a")) produce a submatch?
[15:29:14] <hayley> By my reading of my code, I currently don't. And as there seemingly are no complements specified by RE standards, I have no a priori reason to pick something.
[15:29:43] <gilberth> Nope. How can that submatch match, when it matching implies that the overall expression cannot match?
[15:30:24] <hayley> Whew.
[15:30:27] * hayley just checking if she went insane yet.
[15:30:46] <neominimum> pjb: Ah yes, quite right :monocle:
[15:32:37] <gilberth> Anyhow my X server is funny. It lists fonts with XLIB:LIST-FONT-NAMES, which when I attempt to open it says that such a font does not exist.
[15:33:48] <hayley> So FWIW it might be worth mentioning that you better rewrite (complement (tag-set ...)) to (empty-set), as you do for (complement (empty-string)).
[15:34:42] <hayley> Otherwise, hey, the compiler doesn't barf on very many REs now.
[15:34:46] <gilberth> Which is annoying because that X11 name error because of OpenFont is an asynchronous error and thus cannot really be handled.
[15:34:50] *** Joins: rogersm (~rogersm@90.166.180.250)
[15:36:54] <gilberth> Or rather OpenFont doesn't trigger that error. You get the name error, when you attempt to use that font.
[15:56:32] <selwyn> >  The \clearpage command is robust while \cleardoublepage is fragile
[15:56:34] <selwyn> classic
[15:57:46] <shka> the duality...
[15:58:13] <ck_> a perfect application of "I can't even"
[15:59:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[16:01:29] <selwyn> classic
[16:01:37] <selwyn> oops
[16:01:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:08:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[16:15:46] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[16:15:54] <nij-> I've tried hard to learn JS: https://bpa.st/SVHQ
[16:15:55] -ixelp- View paste SVHQ
[16:16:22] <nij-> But I think I won't like it forever.. 
[16:16:39] <nij-> Anyone here working for company that forces you to use inf langs? How do you deal with it?
[16:17:49] <pjb> Use emacs, write emacs lisp code to generate the inferior code.
[16:18:43] <nij-> lolllollll sounds legit :O
[16:18:50] <nij-> I can also use parenscript..
[16:19:34] <nij-> Stupid me yah. I was about to pick up some books on "functional js" to see what's a better way to mapc.
[16:20:07] <nij-> [1, 2, 3].map((x) => (3*x)) just ain't an acceptable syntax..
[16:24:20] <ck_> nij-: I use clojurescript to ease the pain a bit
[16:24:45] <nij-> does it translate into js code?
[16:24:54] <nij-> I have to do some online evaluation test..
[16:24:55] <ck_> but the real secret is old age and indifference
[16:25:42] <ck_> well, yes, look up closure compiler -- but it won't be small
[16:26:31] <nij-> Does it support translation of idioms in clojure to JS.. maybe that's a better question.
[16:26:56] <ck_> I don't know
[16:26:57] <nij-> For example, CL has parenscript. But as I just tested, it doesn't translate CL's mapcar to whatever suitable in JS..
[16:27:14] <selwyn> what would be the suitable equivalent in js?
[16:27:31] <nij-> Parenscript treats mapcar as a user-defined function, and write mapcar verbatim in the translation -- this obviously doesn't work.
[16:27:51] <nij-> selwyn: I dunno... and maybe I won't never know.
[16:28:11] <nij-> One way suggested in mozilla's page is something like: [1,2,3].map((x) => (3*x))
[16:30:49] <selwyn> i am supposed to label even blank pages with page numbers
[16:30:54] <selwyn> but then they won't be blank anymore
[16:31:13] <nij-> lol
[16:31:49] <nij-> pjb do you suggest me writing my own transpiler, that transpiles _usual idioms_ of js (e.g. defun lambda mapcar) into js? 
[16:33:42] <selwyn> nij-: not to discourage you but that will be difficult
[16:33:55] <selwyn> and the point is to avoid pain related with writing js right :p
[16:34:11] <nij-> Maybe I only need a little set of translation rules.. I don't expect any use of js to be complicated.
[16:34:26] <nij-> selwyn @@ yeah..
[16:34:31] <nij-> But what's better?
[16:34:36] <selwyn> well
[16:34:58] <selwyn> i have only ever written js once, for a browser script addon
[16:35:07] <selwyn> it didn't seem worth using any other solution
[16:35:44] <selwyn> generally my rule is to only use cl over other lisps, but the exception i make is for the web
[16:36:17] <edgar-rft> I've heard browsers use tabs instead of spaces :-)
[16:36:54] <selwyn> i would rather use a stable, predictable scheme with a javascript ffi, over a half-complete implementation of cl
[16:37:06] <selwyn> and that's not to put down the implementors - they do a good job
[16:37:26] <selwyn> it is just that implementing common lisp in the browser is essentially impossible to do satisfactorily
[16:38:08] <nij-> selwyn: - how about getting a job that pays you?
[16:38:35] * selwyn has never had a job
[16:38:59] <nij-> it's not my choice. i'm a working/middle class from the 2nd world.
[16:39:01] <selwyn> and what is this 'pay' that you speak of
[16:39:18] <nij-> A normal programmer job that pays you.
[16:39:26] <nij-> edgar-rft: no..
[16:39:54] <selwyn> well, i am not planning to pursue a career in coding when my studies are done
[16:40:08] <selwyn> so it is not a question i have a helpful answer for, sorry
[16:40:25] <edgar-rft> nij-, firefox says: "open link in new tab" instead of "new space"
[16:43:56] <nij-> selwyn: what do oyu plan to do?
[16:44:41] <selwyn> 1) quantum computing researcher 2) 
[16:45:25] <selwyn> 2) clojure dev (?)
[16:45:47] <pjb> nij-: also: http://informatimago.com/articles/life-saver.html
[16:45:47] -ixelp- Life Saver -- How a Lisp programmer can survive in a C++ environment
[16:46:27] <pjb> nij-: and: https://cliki.net/s-exp%20syntax
[16:46:27] -ixelp- CLiki: s-exp syntax
[16:54:15] <nij-> Great fus! I will read them when I'm traveling to the grocery shop. WIll be back later in the day.
[16:56:41] *** Quits: Oddity (~Oddity@user/oddity) (Ping timeout: 250 seconds)
[17:09:41] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Ping timeout: 250 seconds)
[17:36:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[17:38:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[18:05:03] *** Joins: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1)
[18:05:05] <dra> Hello!
[18:06:21] <selwyn> love it when my cloud storage has a download rate of 1kb/s
[18:07:07] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[18:11:38] <ck_> sounds like 2001
[18:16:59] *** Joins: McParen (~mcp@user/mcparen)
[18:31:31] <edgar-rft> selwyn: it's prabably faster if you just wait until it rains :-)
[18:53:59] <shka> selwyn: yeah, partly why i simply set up nextcloud on my pi
[18:54:24] <shka> it is not powerful hardware, and disk is slow, but still better then small cloud providers
[18:54:52] <shka> but getting pi now is a challenge :D
[18:56:37] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:57:48] <selwyn> shka: i am severely limited in my choices by $academic_institution
[19:02:37] <selwyn> have there ever not been pi shortages?
[19:17:19] *** Parts: McParen (~mcp@user/mcparen) ()
[19:33:12] *** Joins: domovod (~domovod@176.196.122.197)
[19:39:16] *** Quits: kevingal (~quassel@2a02:8084:4140:f300:e0c2:1cb3:66c2:bea2) (Remote host closed the connection)
[19:47:51] *** Quits: dra (~dra@2a04:4540:6422:4100:b557:981:2db:8b1) (Remote host closed the connection)
[19:56:00] *** Joins: treflip (~user@user/treflip)
[20:06:24] <SAL9000> there's everything shortages at the moment
[20:07:25] <ck_> even patience
[20:07:48] <ck_> what does SAL9000 when powered down?
[20:07:58] <ck_> *sing when powered down
[20:10:02] *** Quits: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[20:10:22] <selwyn> https://www.youtube.com/watch?v=N4QrDqJFLYg
[20:10:23] -ixelp- HL2 Lost Coast Speedrun 1.09 Minutes - YouTube
[20:11:54] <ck_> "good" :D
[20:18:34] <phoe> I am shaving yaks
[20:18:48] <phoe> like, I wanted a recipe that shows some namespace management in CL
[20:18:52] <phoe> then I looked at lisp-namespace
[20:18:58] <phoe> and I screamed
[20:19:51] <phoe> and I ended up NIHing a whole separate project that's backwards incompatible with it so I can have something that I am not scared of putting into CLR while also provoking questions about shameless plugs
[20:23:41] <mfiano> I don't understand why you list compiler macros as a separate namespace from functions/macros
[20:24:01] <phoe> where?
[20:24:09] <phoe> oh
[20:24:23] <mfiano> Norvig lists only 7 namespaces in his book
[20:25:18] <phoe> they are in separate namespaces though - a symbol can name neither a compiler macro nor a function, either, or both
[20:25:33] <phoe> functions and macros are a strict XOR
[20:25:39] <phoe> it isn't the same with functions and compiler macros
[20:26:30] <mfiano> I'm also confused why you deleted the lineage but call it a fork
[20:26:42] <mfiano> I see no "forked from"
[20:26:42] <phoe> lineage?
[20:26:58] <gilberth> Yeah, but I'd say functions and macros are in the same namespace.
[20:27:01] <phoe> oh - that's because GitHub https://docs.github.com/en/search-github/searching-on-github/searching-in-forks
[20:27:02] -ixelp- Searching in forks - GitHub Docs
[20:27:19] <phoe> gilberth: functions and macros are in the same namespace
[20:27:24] <phoe> compiler macros aren't though
[20:27:42] <mfiano> What does that link have to do with a project being forked or not?
[20:27:50] <gilberth> phoe: Indeed.
[20:28:04] <phoe> github makes life a little bit worse for projects that are officially marked as forks
[20:28:28] <phoe> and also the actual lineage is in the Git history
[20:29:15] <mfiano> If by worse you mean that people can't discover forward or backward forks from the graph GitHub provides.
[20:29:16] <phoe> and also (warning: hot take and personal opinion) I think that forked projects which purposefully break backwards compatibility shouldn't be listed as forks of the original because they are no longer compatible with the original
[20:29:35] <gilberth> So we have compiler macros, functions/macros, variables/symbol-macros, types, classes, blocks, go-tags, packages, modules, logical hosts. Which name space have I forgotten?
[20:29:36] <mfiano> That is a primary reason for a fork :P
[20:30:11] <phoe> mfiano: not from what I've seen on GitHub, people tend to make forks then add a commit or five and then forget about it and let everything linger in the github tree
[20:30:21] <gilberth> Character names.
[20:30:31] * phoe adds logical hosts and character names to the list
[20:30:35] <mfiano> I would go by what Norvig lists
[20:31:23] <gilberth> phoe: Though you could argue that those are not named by symbols. But name spaces never the less.
[20:31:51] <gilberth> phoe: (declaim (declaration add-me-to-your-list))
[20:32:14] <phoe> gilberth: neither are packages
[20:32:25] <phoe> so, yes, a namespace name is also a poorly defined concept
[20:32:41] <phoe> I assume you could treat character codes as a namespace as well if you go this way
[20:33:34] <mfiano> There is a section in PAIP labeled of all things, "The Seven Namespaces"
[20:33:42] <gilberth> phoe: Are you writing an article about name spaces?
[20:34:50] <phoe> gilberth: not really, just a manual of https://github.com/phoe/in-nomine
[20:34:51] -ixelp- GitHub - phoe/in-nomine: Utility for creating, accessing, and managing custom namespaces in Common Lisp.
[20:35:11] <mfiano> and you missed some namespaces he describes
[20:35:16] <mfiano> and added new ones, weird
[20:35:28] <ck_> does clisp stand for christian lisp
[20:35:46] <phoe> missed? which ones?
[20:35:53] <phoe> ck_: more like Lisp written in C
[20:36:09] <ck_> phoe: "oh, I didn't know that"
[20:36:22] <phoe> oh I apologize
[20:36:33] <phoe> more like Common LISP
[20:36:46] <ck_> I'm still in humor school :( it was supposed to mesh with "in nomine .."
[20:37:12] <phoe> ooooh
[20:37:16] <phoe> nice one
[20:37:22] <phoe> mfiano: I only see modules that the list was missing
[20:38:13] <mfiano> phoe: symbols inside a quoted expression are treated as constants and thus form a namespce. special variables form a distinct namespace from lexical variables, etc
[20:38:24] <mfiano> See PAIP section
[20:39:14] <gilberth> phoe: Oh. Does it have a TPL DEFINE macro? A LET? Does it play well with &environment? Is just compiling a file with new entity definitions in a name space such that those definitions don't make it into the image and are only available during compilation?
[20:39:42] <phoe> gilberth: that's why I have the ... in the list, so I can conveniently never pretend that the list is complete
[20:39:58] <SAL9000> did you mean &allow-other-keys
[20:40:26] <phoe> SAL9000: nice
[20:40:57] <SAL9000> although I guess &rest would be more apposite?
[20:41:09] <SAL9000> I have keyword arguments on the brain from some work stuff
[20:42:39] <gilberth> phoe: I see. I have sth like that and figure out two tricks how to do with compile-file, neither of which is perfect. I am busy at the moment, perhaps I find some time to look at what I got. I implemented my own "sane" NS for my CLIM for presentation types and for my Pascal compiler, both using different strategies.
[20:43:27] <Gnuxie> selwyn: well that's not what i was expecting from the video
[20:44:44] <selwyn> 5:08 was my favourite
[20:45:02] <Gnuxie> think he's talking out his ass though fb won't be giving up shit 
[20:45:09] <selwyn> > will i be allowed to ... walk over and push you and maybe slap you
[20:45:35] <selwyn> that would make meta very popular tbh
[20:53:36] *** Joins: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net)
[20:54:04] <nij->  javascript> "3" == 3   ;; => true  ;;  Wonderful..
[20:54:50] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[20:57:05] <ck_> nij-: https://www.youtube.com/watch?v=et8xNAc2ic8
[20:57:06] -ixelp- dotJS 2012 - Brian Leroux - WTFJS - YouTube
[20:57:46] <gilberth> nij-: That's the "script" in "Javascript", it tries to be helpful.
[21:04:49] <semz> My favorite Javascript WTF is this: a = new Array(1) has length 1. a[0] gives you undefined. However, a.every(x => false) is true. If you then do a[0] = undefined, it still has length 1 and a[0] is undefined, but a.every(x => false) is now false.
[21:05:39] <semz> Some madman thought that false, null and undefined weren't enough yet and new arrays should really contain a special value that acts like undefined everywhere except in this one situation.
[21:06:25] <gilberth> You want yet another NIL?
[21:09:01] <gilberth> It rather is that the whole idea to have some special value meaning "I'm not set" is doomed. They kind of tried to fix that by coming up with new NILs. CL got it right. GETHASH returns two values and even takes a default. GETF takes a default too. READ is passed an eof value instead of some default sentinel.
[21:09:21] <gilberth> Variables and slots can be unbound.
[21:09:44] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Quit: later)
[21:12:38] <semz> What slays me that they went out of their way to somehow make it even more nonsensical. undefined is a bad idea, but once you have it, initializing arrays to the "not set" value would at least make *sense*.
[21:13:02] <semz> IS that*
[21:19:14] <selwyn> it would be interesting to know more about the decision to choose generalised booleans
[21:19:23] <selwyn> was it a conscious attempt to learn from scheme's mistakes?
[21:24:16] <ck_> from what I know, everything about the failures of javascript can be explained by "it was rushed out in weeks"
[21:24:37] <ck_> there's an interview with Brendan Eich in Coders at Work
[21:55:19] *** Quits: treflip (~user@user/treflip) (Quit: good night!)
[22:09:54] *** Quits: nij- (~jin@2001-48F8-9021-806-0-0-0-6F8B-dynamic.midco.net) (Remote host closed the connection)
[22:45:43] *** Quits: domovod (~domovod@176.196.122.197) (Ping timeout: 268 seconds)
[22:51:12] *** Joins: molson__ (~molson@2001-48F8-704A-123D-0-0-75F-1033-static.midco.net)
[22:54:02] *** Quits: molson_ (~molson@2001-48F8-704A-123D-0-0-75F-102F-static.midco.net) (Ping timeout: 240 seconds)
[22:56:53] *** Quits: shozo (~user@178.74.52.55) (Remote host closed the connection)
[23:15:29] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:22:17] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[23:25:00] <Alfr> selwyn, I thought scheme has generalized booleans, in particular everything but #f is true.
[23:25:31] <selwyn> yeah
[23:25:43] <selwyn> uh
[23:26:04] <selwyn> rather i meant multiple false values as gilberth said
[23:29:51] <Alfr> selwyn, can they be distinguished? Let's just assume it'd be possible with eq, then should (eq x nil) be true or false when x is an other false value?
[23:30:39] <selwyn> um
[23:30:55] <Alfr> selwyn, and if the can't be distinguished, then the language wouldn't have two such values in practice, as you simply can't tell them apart.
[23:32:10] <selwyn> right
[23:32:28] <selwyn> and now you have to compare with two false values
[23:32:33] <selwyn> to see if something is false
[23:32:52] <selwyn> which is another problem
[23:33:22] <ck_> a new way of thinking
[23:33:32] <ck_> "illiterate programming"
[23:33:38] <phoe> amazing
[23:33:40] <pjb> really, logic boolean operators are macros that expand to IF, only IF maps lisp objects to true or false.
[23:33:54] <pjb> therefore it would be simple to have a IF that would accept several false value.
[23:34:10] <pjb> But that doesn't imply EQ would have to identify them! On the contrary.
[23:34:32] <Alfr> selwyn, well (eq ..) as above should say false, as per assumption, but that just introduce an other pitfall: (eq x nil) works as expected for non false values, and then you also get (eq nil nil) => true and (eq hat-nil nil) => false.
[23:35:28] <selwyn> yes
[23:36:37] <pjb> (shadow 'if) (defmacro if (test then &optional else) (let ((vtest (gensym))) `(let ((,vtest ,test)) (cl:if (or (eql 'nil ,vtest) (eql 0 ,vtest)) ,else ,then))))
[23:36:57] <Alfr> pjb, then you would have to specify for every combination (or pair) of false values what eq should actually return.
[23:37:00] <pjb> (if (logand #xff00 #x00ff) 'yep 'nope) #| --> nope |# 
[23:37:16] <pjb> (eq 0 'nil) #| --> nil |# 
[23:37:25] <pjb> You want to keep eq discriminating objects.
[23:38:03] <pjb> If you want to write an equiv function you still can: (defun equiv (a b) (if a (if b t nil) (if b nil t)))  (equiv 1 'nil) #| --> nil |#  (equiv 0 'nil) #| --> t |# 
[23:38:34] <pjb> (equiv 1 't) #| --> t |# 
[23:38:42] <Alfr> pjb, I just thought to make the problem a little bit easier by only asking how the result should be interpreted as a boolean.
[23:39:34] <pjb> Alfr: my point is that only IF interprets lisp objects as booleans.
[23:39:45] <pjb> So it's only this operators that needs to be modified.
[23:40:12] <pjb> For example: (eq b 't) is wrong, since b could be 42 and be true!
[23:40:26] <pjb> You must use an (equiv 42 't) #| --> t |#  based on IF.
[23:40:56] <Alfr> pjb, not saying it's not possible to deal with multiple false values, I'm only questioning whether introducing further values for false is a good idea.
[23:41:48] <pjb> Alfr: I don't see any fundamental problem with it.  It could be practical to consider 0 nil () #f false "" #() and a few other objects as false.
[23:43:12] <Alfr> pjb, cognitive overhead?
[23:44:12] *** Joins: lisp123 (~lisp123@5.30.23.247)
[23:46:02] <pjb> I've always been bothered with laser guns in movies, that the target point of the laser guns don't move during the shoot.  Thos people have quite steady hands!!!
