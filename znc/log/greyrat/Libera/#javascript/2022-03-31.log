[00:01:50] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:06:42] *** Joins: Deneb (~johnch@194.82.159.143.dyn.plus.net)
[00:07:15] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk)
[00:07:15] *** Quits: D4mned (~D1mned@212.101.253.84) (Read error: Connection reset by peer)
[00:08:42] *** Joins: D4mned (~D1mned@212.101.253.191)
[00:09:00] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 240 seconds)
[00:09:26] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[00:10:31] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[00:13:06] *** Joins: Tang3nt-Man (~Tang3nt-M@217.146.83.231)
[00:13:17] *** Quits: Kruppt (~Kruppt@50.111.1.161) (Quit: Leaving)
[00:15:53] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk) (Ping timeout: 260 seconds)
[00:17:12] *** Joins: MRDPZK1 (~MRDPZK@d205-250-152-220.bchsia.telus.net)
[00:20:46] *** Quits: MRDPZK (~MRDPZK@d205-250-152-220.bchsia.telus.net) (Ping timeout: 250 seconds)
[00:21:12] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 272 seconds)
[00:23:06] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[00:23:22] *** Quits: MRDPZK1 (~MRDPZK@d205-250-152-220.bchsia.telus.net) (Ping timeout: 250 seconds)
[00:23:35] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:26:22] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[00:28:03] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 260 seconds)
[00:29:49] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:29:49] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:29:49] *** Joins: wroathe (~wroathe@user/wroathe)
[00:32:28] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: WeeChat 3.3)
[00:34:06] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 245 seconds)
[00:38:23] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[00:38:42] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[00:40:52] *** Joins: pavonia (~user@user/siracusa)
[00:43:47] *** Joins: voltage (voltage@user/voltage)
[00:47:25] *** Quits: voltage_ (voltage@user/voltage) (Ping timeout: 256 seconds)
[00:54:35] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[00:54:49] *** Joins: The_Blode (~Blode@user/the-blode/x-7164444)
[00:54:55] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[00:55:21] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:55:42] *** Quits: The_Blode_ (~Blode@user/the-blode/x-7164444) (Ping timeout: 260 seconds)
[00:57:38] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[00:58:43] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[01:00:02] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[01:00:28] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Ping timeout: 272 seconds)
[01:00:40] *** Quits: EgonX_ (~EgonX@38.66.76.50) (Ping timeout: 246 seconds)
[01:01:52] *** Joins: niop (niop@gateway/vpn/airvpn/niop)
[01:02:04] *** Quits: niop_ (niop@gateway/vpn/airvpn/niop) (Ping timeout: 246 seconds)
[01:03:03] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 260 seconds)
[01:03:17] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[01:04:54] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:07:01] *** Joins: jazzy (~jaziz@user/jaziz)
[01:12:21] <ThePendulum> grr seems loading="lazy" doesn't always take display: none into account properly
[01:13:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 246 seconds)
[01:15:39] <KevinX> banana_  does `some-styles/**/*.{scss,css}` work?
[01:22:03] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:23:16] *** Joins: jazzy2 (~jaziz@user/jaziz)
[01:24:43] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[01:25:11] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[01:25:14] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:26:13] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 246 seconds)
[01:26:30] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 260 seconds)
[01:27:05] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[01:27:50] *** Joins: pulse (~pulse@user/pulse)
[01:32:28] *** Joins: alystair (~alystair@user/alystair)
[01:34:30] <banana_> KevinX: thanks I'll try it I ended up just repeating the line for both .scss and .css like a barbarian
[01:37:33] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Quit: Client closed)
[01:37:43] <banana_> KevinX: no :( just checked
[01:38:03] <banana_> KevinX: it's for .prettierignore if youre familiar with that build tool
[01:38:13] <banana_> project formatter
[01:38:38] <KevinX> yeah, mine just has them on individual lines
[01:38:39] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[01:38:43] <banana_> specifically im doing `some-styles/**/*.min.{scss,css}`
[01:38:45] <KevinX> maybe you cant. never tried
[01:39:02] <banana_> for .prettierignore?
[01:40:06] <KevinX> Yeah like you just need one rule for each extension
[01:40:36] <banana_> :( oh ok I guess same idea for .eslintignore?
[01:41:11] <banana_> I didnt read the docs is well as Ive done usually. probably missed what glob syntax they actually support
[01:41:23] <KevinX> probably same for all similiar files .gitignore etc
[01:41:30] <banana_> because obviously then they dont support a full version of glob patterns
[01:41:44] <banana_> like what flavor of glob are they using.
[01:41:55] <KevinX> im using husky with lint-staged and have prettier run with `"*.{js,yml,jsx,ts}"`
[01:42:13] <banana_> but that's command line right
[01:42:25] <KevinX> yeah
[01:42:43] <banana_> could be a different glob supported there right?
[01:42:50] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:42:57] <KevinX> you'd have to dive into the code I guess
[01:43:05] <banana_> code?
[01:43:10] <banana_> nah im good I dont do that
[01:43:22] <banana_> :P
[01:43:30] <KevinX> into the code that parses the ignore file to determine what is ignored
[01:43:51] <banana_> well at that point might as well work for myself
[01:44:07] <KevinX> now you got two good ideas
[01:44:42] <banana_> im not that talented
[01:45:08] <banana_> I mean lazy... nah right first time
[01:45:31] <KevinX> i believe in you
[01:46:06] <banana_> thanks man
[01:46:07] *** Quits: D4mned (~D1mned@212.101.253.191) (Read error: Connection reset by peer)
[01:47:41] *** Joins: D4mned (~D1mned@212.101.251.168)
[01:49:53] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[01:52:40] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[01:55:00] *** Quits: niop (niop@gateway/vpn/airvpn/niop) (Remote host closed the connection)
[01:55:30] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Remote host closed the connection)
[01:56:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:88a0:fb04:2d2:c434) (Ping timeout: 245 seconds)
[01:56:41] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[01:57:54] *** Joins: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au)
[01:59:35] *** Joins: niop_ (niop@gateway/vpn/airvpn/niop)
[02:01:35] *** Joins: peteyboy_ (~peteyboy1@199.157.133.37.dynamic.jazztel.es)
[02:02:32] *** Quits: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es) (Ping timeout: 272 seconds)
[02:02:37] *** Quits: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au) (Ping timeout: 260 seconds)
[02:04:57] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 260 seconds)
[02:05:07] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:06:22] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[02:07:45] <banana_> yo
[02:07:47] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Client Quit)
[02:07:59] <banana_> cli question. again for a noob
[02:08:31] *** Quits: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com) (Quit: Leaving.)
[02:09:41] <banana_> if a cli command took an argument like a filename how would you write a bash script, if anything like powershell but not powershell, to do like ls -l  and then grep against a regex pattern you want. then from that list of files youd call this cli command for each file name filtered by grep
[02:10:06] *** Quits: Deneb (~johnch@194.82.159.143.dyn.plus.net) (Quit: Leaving)
[02:12:44] *** Quits: Dorward (~dorward@2001:8b0:683:6dc5:56b2:3ff:fe9c:2b78) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[02:12:46] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[02:13:27] <banana_> not imperative to have that answer so if you dont want to help then ignore
[02:14:52] *** Quits: peteyboy_ (~peteyboy1@199.157.133.37.dynamic.jazztel.es) (Ping timeout: 246 seconds)
[02:16:40] *** Joins: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es)
[02:16:49] <KevinX> use |
[02:17:13] <KevinX> `ls -lh | grep '.js' |  awk '{ print $5,"\t", $9 }'`
[02:17:16] <KevinX> for example
[02:24:10] *** Joins: junebug (~junebug@2600:1700:3db0:2540:2774:4d56:3e4e:44ed)
[02:25:04] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:25:52] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[02:26:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:27:28] *** Joins: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com)
[02:30:02] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[02:30:29] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[02:36:10] *** Quits: junebug (~junebug@2600:1700:3db0:2540:2774:4d56:3e4e:44ed) (Quit: Leaving)
[02:38:31] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:40:07] *** Quits: andersaloof (~anders@251.92-221-169.customer.lyse.net) (Ping timeout: 260 seconds)
[02:40:24] *** Joins: jamea77 (~jamea@200.68.140.32)
[02:40:46] *** Quits: jamea (~jamea@200.68.141.36) (Ping timeout: 245 seconds)
[02:40:56] *** Joins: andersaloof (~anders@251.92-221-169.customer.lyse.net)
[02:42:47] *** Quits: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es) (Ping timeout: 252 seconds)
[02:44:54] <jasonaowen> banana_: if the pattern can be expressed as a glob, you might be able to get away with `for f in *.js ; do echo "$f"; done`
[02:45:26] <jasonaowen> need to quote the variable in case the filenames have spaces or other special characters
[02:47:42] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 260 seconds)
[02:48:03] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[02:50:18] *** Joins: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com)
[02:50:47] *** Joins: admin123 (harrymoren@gateway/vpn/protonvpn/admin123)
[02:51:22] <lf94> > awk
[02:51:24] <lf94> use cut
[02:51:33] <lf94> After I learned how to properly use cut, awk is rarely needed
[02:52:34] *** Quits: admin124 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 272 seconds)
[02:54:27] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[02:57:24] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[02:57:53] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 250 seconds)
[02:59:20] <banana_> KevinX: yeah not as familiar using awk or sed
[02:59:35] <Alexendoo> cut alone wouldn't work there
[03:00:02] <banana_> KevinX: managed to use sed for this other situation and for the example I needed help with apparently this cli command actually supported a glob pattern so I was actually ok
[03:00:04] *** Joins: nomic (~nomic@185.217.117.233)
[03:00:21] *** Joins: Praise (~Fat@user/praise)
[03:00:35] <banana_> but dam these cli commands seem useful for situations with rigid cli's
[03:00:56] <KevinX> well awk was just for an example, the point being the left output gets piped into the right function
[03:01:07] <banana_> it's like how the hell do you get a comprehensive education on these commands
[03:01:09] <Alexendoo> As you would need to replace the runs of spaces with a single one
[03:01:35] *** Joins: pluri (~pluri@user/pluri)
[03:01:46] <banana_> yeah these damn commands though.
[03:02:09] <KevinX> time
[03:02:11] <banana_> i saved what you suggested, ill look at it later trying to figure out this last cli issue totally fried my brain
[03:02:14] <KevinX> and failing a lot
[03:02:26] <KevinX> and reading. alot
[03:02:33] <banana_> dam
[03:02:48] <banana_> well... I've already failed in much I guess
[03:02:49] <KevinX> here's a decent awk primer if interested https://earthly.dev/blog/awk-examples/
[03:03:08] *** Quits: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net) (Ping timeout: 252 seconds)
[03:03:25] <banana_> ok bookmarked thanks
[03:03:33] <KevinX> you could try writing your own command line tools too
[03:03:45] <banana_> code?
[03:03:52] <banana_> damnit
[03:04:34] <KevinX> yes like write the echo or cat command in node
[03:04:49] <KevinX> a simplified version anyway
[03:04:53] *** Joins: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73)
[03:05:48] <banana_> i guess i dont see the motivation
[03:06:17] <banana_> maybe i have the wrong attitude, but youre saying just to learn to learn basically?
[03:06:20] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[03:06:47] <KevinX> yes and gain a deeper knowledge of the language and tooling
[03:06:54] <banana_> i could maybe do it for this, but in general i dont think i could realistically carry that mindset
[03:07:42] <banana_> ah ok. was saying in general if that's my attitude. i see what youre saying for tooling
[03:08:03] <KevinX> it could be a good exercise for learning your next programming language then
[03:09:45] <banana_> possibly
[03:10:05] <banana_> do you suggest that to stay competitive in the tech field or just for general interest?
[03:10:38] <banana_> cause yea unfortunately i think im a displaced programmer. but whatever had this philosophical discussion on here
[03:10:50] <banana_> but just say "to be competitive" I guess
[03:11:48] <KevinX> well i only mentioned it because you asked how to get a better understanding of the commands
[03:12:10] <KevinX> building them is probably the best way
[03:12:17] <KevinX> using them is the second best
[03:12:24] <banana_> also yea just dont see the motivation to learn just to learn. I see how it can help you out in dividends in the future. but seems like a lot of learning things youll never use
[03:12:52] <banana_> not to be a party pooper i guess
[03:12:59] <banana_> i could be wrong
[03:13:12] <KevinX> depends on your goals
[03:13:15] <ProfSimm> What's the fastest implementation of a String Builder in JS. I'm using arrays of strings with a join, but I hope I can do better
[03:13:21] <KevinX> the more you know th emore valuable you are though
[03:13:25] <austincheney> cat command in node should be only a few lines of code.  readFile("file/path", callback(err, fileData){console.log(fileData.toString();)});
[03:13:31] <banana_> well honestly part of it is I get paid to program
[03:14:24] <banana_> it's a living. so idk maybe im not totally SOL and there's some philosophical book I could read about technology
[03:15:19] <banana_> KevinX: about "the more you know th emore valuable you are though" I think that depends what you know though
[03:15:50] <austincheney> banana_, that depends upon the audience
[03:16:00] <austincheney> sometimes the more you know the more you intimidate
[03:16:57] <banana_> so your all's philosophy is the more you know the more valuable youll be somewhere and that fact should be enough motivation
[03:17:21] <banana_> or could be enough motivation
[03:17:24] <KevinX> my motivation is just to gain a deeper knowledge of all things CS
[03:17:27] *** Quits: jamea77 (~jamea@200.68.140.32) (Ping timeout: 260 seconds)
[03:17:43] <banana_> ah ok. my motivation is more general challenges
[03:18:06] <systemfault> ProfSimm: As far as I'm know, it's the fastest you can be without building specialized datastructures...
[03:18:15] <ProfSimm> systemfault: re?
[03:18:20] <banana_> I like having it my way idk probably something to work out with a therapist
[03:18:21] <KevinX> what do you mean by general challenges?
[03:18:40] <KevinX> ProfSimm whats wrong with join?
[03:18:40] <ProfSimm> systemfault: oh ok
[03:18:46] <KevinX> n> ['a', 'b'].toString()
[03:18:46] <banana_> If I want something done then I'll research to high heaven to figure it out
[03:18:46] <jellobot> (okay) 'a,b'
[03:18:57] <ProfSimm> KevinX: it's work (for the processors/memory)
[03:18:59] <KevinX> not sure its faster
[03:19:24] <KevinX> maybe use wasm
[03:19:36] <banana_> so maybe not general challenges. I meant like "in general"
[03:19:41] <systemfault> ProfSimm: You really mean a for loop .push()'ing strings to an array and then do .join('') on it, right?
[03:20:37] <banana_> like the dilemma "figure it out or youre fired" because it motivates me
[03:21:11] <KevinX> n> ['a', 'b'] + ''
[03:21:12] <jellobot> (okay) 'a,b'
[03:21:18] <banana_> so maybe if God told me "to learn new stuff or im fired" id do what youre suggesting
[03:21:31] <banana_> hmm
[03:21:46] <KevinX> well you have to figure out what motivates you
[03:21:53] <KevinX> if you learn X you can get Y
[03:22:10] <banana_> I think I could brainwash myself
[03:22:18] <KevinX> thats just with everything in life
[03:22:18] <banana_> as long as I stay healthy
[03:22:39] <KevinX> if you learn this and that you can triple your salary
[03:22:41] <hassoon> why would you do so
[03:22:44] <banana_> yeah but the unknown of actually "getting Y" demotivates me
[03:22:47] <KevinX> if you learn the piano, you can impress your friends
[03:23:14] <banana_> if you have friends...
[03:23:25] *** Quits: zerkal0 (~16189@2600:6c42:657f:ec9f:7169:74fc:4542:c48c) (Read error: Connection reset by peer)
[03:23:45] <banana_> jk if you have friends that would be impressed and I guess give you that status where it would be ideal
[03:23:48] *** Quits: voltage (voltage@user/voltage) (Quit: Leaving)
[03:23:51] <KevinX> you just have to learn how to drink alcohol for that one
[03:23:59] <hassoon> you can impress yourself
[03:24:34] <hassoon> there is a level of consciousness where befriending yourself is equivalent to befriending real other people
[03:24:43] <hassoon> up to you to reach ti
[03:24:44] <hassoon> * it
[03:25:20] <banana_> I'd have to reflect on that one
[03:25:31] <KevinX> that deep
[03:25:38] <KevinX> but im for it
[03:25:55] <KevinX> i've remained single and childless by choice. I'm definitely my own best friend
[03:26:08] <banana_> KevinX: and yea alcohol is partially why starting out this career was rocky
[03:26:22] <banana_> besides just being a total pleb at first.
[03:26:38] <KevinX> well, dont drink and code
[03:26:49] <banana_> no way i could
[03:26:50] <KevinX> your commit messages will be out of control
[03:26:52] <banana_> uppers only
[03:26:58] <banana_> lol
[03:27:37] <banana_> idk
[03:27:54] <banana_> I think people need other social interaction though, naturally
[03:28:29] <OnkelTem> Hi folks. We have problem with downloading a file from our device. I'm not familiar with the details of how file sending should be implemented in the back-end, but the current behaviour is as following: the file gets downloaded in one big chunk, so that the browser download dialog appears only when the whole file was downloaded.
[03:28:43] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[03:28:46] <banana_> so status definitely helps make that easier, because gives other people a reason to socialize with you instead of vice versa
[03:28:59] <OnkelTem> It is a symptom of what do you think? What's exactly can be wrong in the back-end?
[03:29:42] <hassoon> KevinX: if you can just sit silent and observe life around you for hours without getting bored and starting to worry what people who are possibly aware of you sitting alone for hours in the same position, think about young, you're almost in that level
[03:29:58] <hassoon> * about you,
[03:30:36] <banana_> huh... ok
[03:31:06] <banana_> but what about general social needs needing to be met
[03:31:20] <banana_> so you mean once you already have that need met
[03:31:33] <KevinX> i hardly care what anyone thinks about it, but I still try to improve things like my looks and personality traits
[03:31:40] <KevinX> it = me*
[03:31:51] <hassoon> you have irc/internet, otherwise if a stranger wants to approach you and know more about you by starting a frienly conversation, they are welcome
[03:31:52] <banana_> if youre implying the Maslow pyramid
[03:32:06] <hassoon> * friendly *
[03:32:33] <banana_> KevinX: so you do try to work on things for status I guess
[03:32:34] *** Quits: pizdets_ (~pizdets@183.182.115.2) (Ping timeout: 246 seconds)
[03:32:40] <hassoon> meh live your life and socialize with peope sure
[03:32:54] <banana_> which gives you that social interaction naturally needed
[03:33:14] <hassoon> just telling you that there is also another kind of friendship, if you have no friends
[03:33:27] *** Quits: niop_ (niop@gateway/vpn/airvpn/niop) (Ping timeout: 256 seconds)
[03:33:38] <banana_> i mean if you have family that you socialize with you bless you, some people dont have that support though
[03:33:52] <hassoon> d'oh my eyes are exhausted
[03:34:05] *** Joins: pizdets (~pizdets@183.182.111.193)
[03:34:07] <hassoon> 8h in the office in a row, same position
[03:34:19] <hassoon> didn't bother to go out for launch
[03:34:33] <hassoon> i'm proud i made it anyway
[03:34:55] <banana_> trying to retrace the convo
[03:34:58] <hassoon> next time i'll have a decent breakfast to avoid hunger
[03:35:17] <hassoon> banana_: meh just telling bro, i'm socializing in my irc :D
[03:35:18] *** Joins: Midas (~EyeOfMida@2607:fb90:7eb3:2984:9af5:46dd:194:6a55)
[03:35:30] <hassoon> banana_: or you wanna finish your talk ? okey then
[03:35:34] <banana_> oh motivation impressing friends/overall social status from learning something
[03:36:08] <banana_> hassoon: eat something lol
[03:36:20] <banana_> youre good I'm definietly going to reflect what was said
[03:36:48] <hassoon> banana_: yep, cooked an omlette, mixed it with green salad, then put the whole meal in a 400g chunk of bread
[03:37:09] <hassoon> it was enough to kill the hunger and resume energy
[03:37:11] <banana_> nice I made an omelette yesterday
[03:37:18] <hassoon> <3 eggs
[03:37:26] <hassoon> a 3 eggs one is nice
[03:37:35] <banana_> im bad at making tem. it always breaks apart when I fold it
[03:37:44] <hassoon> lmao !!!
[03:37:48] *** Joins: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au)
[03:38:27] *** Quits: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73) (Ping timeout: 260 seconds)
[03:38:56] <hassoon> if it falls apart you should make a sandwich with it
[03:38:59] <hassoon> like i do
[03:39:16] *** Joins: jamea (~jamea@189.237.47.249)
[03:39:22] <banana_> good idea
[03:39:51] *** Joins: nulixes (~Thunderbi@gateway/vpn/pia/nulixes)
[03:39:59] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:d10b:be87:ad35:873) (Remote host closed the connection)
[03:41:57] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Quit: Lost terminal)
[03:43:11] *** Quits: Optimus (~risto@87.227.227.147) ()
[03:43:42] *** Quits: ckdCreations (~ckdCreati@147.55.133.141) (Read error: Connection reset by peer)
[03:44:27] <banana_> \
[03:45:14] *** Joins: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73)
[03:45:24] *** Quits: mat001_ (~mat001@72.28.108.216) (Ping timeout: 240 seconds)
[03:45:27] *** Quits: mat001 (~mat001@89.45.90.157) (Ping timeout: 260 seconds)
[03:48:43] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[03:48:43] *** Quits: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net) (Ping timeout: 260 seconds)
[03:48:51] *** Joins: jamea77 (~jamea@189.237.47.249)
[03:49:23] *** Quits: Midas (~EyeOfMida@2607:fb90:7eb3:2984:9af5:46dd:194:6a55) (Ping timeout: 260 seconds)
[03:51:37] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[03:51:47] *** Quits: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au) (Remote host closed the connection)
[03:51:50] *** Quits: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73) (Read error: Connection reset by peer)
[03:51:57] *** Joins: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73)
[03:52:06] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Ping timeout: 272 seconds)
[03:53:17] <banana_> https://www.youtube.com/watch?v=y-Wr401Bio4
[03:53:17] <skillbot> YouTube Title: How to...Make a Perfect Omelette
[03:55:14] *** Joins: jamea (~jamea@189.237.47.249)
[03:55:43] *** Quits: jamea77 (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[03:56:53] <theskillwithin> that looks like a damn good omelette
[03:57:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[03:57:36] <theskillwithin> when I hear the words perfect with omelette tho, a french style omelette comes to mind.  a little harder to master.  but id probably prefer that one with all the cheese most days
[03:58:27] *** Joins: jamea77 (~jamea@189.237.47.249)
[03:58:37] <theskillwithin> https://youtu.be/5__zptEU9vE
[03:58:37] <skillbot> YouTube Title: I Try To Master Jacques Pepin's Perfect Omelet...
[03:59:55] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[04:00:32] *** Joins: zuQe85 (~zuQe8@cpc105060-sgyl40-2-0-cust136.18-2.cable.virginm.net)
[04:03:24] *** Joins: jamea (~jamea@189.237.47.249)
[04:04:46] *** Quits: jamea77 (~jamea@189.237.47.249) (Ping timeout: 246 seconds)
[04:05:32] *** Quits: EyeOfMidas (~EyeOfMida@2601:c6:c57f:c450:f9c8:2891:544d:4c73) (Quit: CoreIRC for Android - www.coreirc.com)
[04:06:51] *** Joins: jamea77 (~jamea@189.237.47.249)
[04:07:41] <banana_> next i need "how to crack an egg" because i keep getting egg shell in pan
[04:07:51] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[04:08:00] <banana_> im sure there's an art to it
[04:09:14] <mrdata> yes
[04:09:30] *** Joins: jamea (~jamea@189.237.47.249)
[04:10:16] <mrdata> you hald the egg approximately balanced, and strike it against the outside edge of a bowl or pan, but your thumb and fingers limit the depth the edge can penetrate
[04:10:21] <mrdata> *hold
[04:10:46] <mrdata> to perhaps 20%
[04:11:04] *** Quits: jamea77 (~jamea@189.237.47.249) (Ping timeout: 246 seconds)
[04:13:53] *** Joins: jamea77 (~jamea@189.237.47.249)
[04:14:15] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 256 seconds)
[04:15:58] *** Joins: goddard (~goddard@user/goddard)
[04:16:02] <banana_> so the outer edge of the bowl im hitting
[04:16:09] <goddard> can i some how stop this from being overriden in side a class?
[04:16:16] <goddard> "this"
[04:16:16] <banana_> unless youre mean the outer outer edge of the rim
[04:16:34] <mrdata> your fingers provide the stop as they touch the edge when you strike
[04:16:45] <banana_> goddard: what you mean calling a function?
[04:17:07] <goddard> "this" when inside my class I don't want it being overriden
[04:17:21] <goddard> If I am inside some other foreach loop or something
[04:17:22] <banana_> inside the constructor or a method?
[04:17:23] *** Joins: jamea (~jamea@189.237.47.249)
[04:17:38] <mrdata> you strike against the sharpest edge of the bowl or pan
[04:17:46] <mrdata> so yes this is the rim
[04:18:13] <systemfault> goddard: No code snippet === difficult to help.
[04:18:15] <banana_> goddard: make sure the foreach callback function is an arrow function
[04:18:29] *** Quits: jamea77 (~jamea@189.237.47.249) (Ping timeout: 252 seconds)
[04:18:33] <goddard> ahh ok
[04:18:35] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[04:19:01] <banana_> like .forEach((element) => { } ) instead of .forEach(function((element) => { } )
[04:19:08] <banana_> oops
[04:19:22] <banana_> ... instead of .forEach(function((element) { } )
[04:19:30] <banana_> you know what i mean
[04:19:54] <banana_> arrow functions get their this from the surrounding block
[04:20:19] <banana_> so like the instance method's block if this forEach is called in a method
[04:20:34] <goddard> ya super handy i didn't realize that
[04:20:37] <banana_> the instance method block has `this` as the class instance
[04:22:36] <banana_> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this  for reference "ES2015 introduced arrow functions which don't provide their own this binding (it retains the this value of the enclosing lexical context).
[04:22:36] <banana_> "
[04:22:37] <systemfault> The "this" inside a function is whatever is at the left of the `.` when _IT_IS_CALLED_.
[04:23:21] <banana_> lexical context means like function or module block afaik
[04:23:43] <banana_> just means the surrounding code. whatever the surrounding code has for `this`
[04:23:52] <banana_> arrow functions use that
[04:24:25] <banana_> to basically solve the issue you found with non-arrow functions e.g. function() { ... }
[04:24:39] <banana_> that used to be a thing that pissed off ljharb
[04:24:46] <banana_> and then he invented arrow functions
[04:24:49] <goddard> so is the () also optional?
[04:24:54] <goddard> () => {
[04:25:01] <goddard> or just param => {
[04:25:06] <banana_> it is for one parameter
[04:25:20] <banana_> but like multiple parameters you need the parens
[04:25:28] <systemfault> If you pass a "method" as a callback, then you only passed the function and it will eventually be called without nothing at the left of the ".", so the "this" inside the function at that moment will be undefined (strict mode)
[04:26:07] <systemfault> goddard: Some people wanting to 'save a character' do    _ => {} instead of  () => {}
[04:26:31] <systemfault> _ has no special meaning in JS... but it's sometimes used to mean "ignore me"
[04:26:39] <banana_> you used to have to do:
[04:26:43] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 256 seconds)
[04:27:57] <banana_> n>const self = this; [1, 2].forEach(function(elem) { return `dunno what `this is: ${self}, element: ${elem}`})
[04:27:58] <jellobot> (fail) SyntaxError: Unexpected token 'this'
[04:28:01] *** Joins: jamea (~jamea@189.237.47.249)
[04:28:09] <banana_> elll no
[04:28:31] <banana_> n>const self = global; [1, 2].forEach(function(elem) { return `dunno what `this is: ${self}, element: ${elem}`})
[04:28:32] <jellobot> (fail) SyntaxError: Unexpected token 'this'
[04:28:40] <banana_> oh shit
[04:28:54] <systemfault> banana_: In the Crockford days, we used to do `var that = this;`
[04:28:56] <banana_> n>const self = global; [1, 2].forEach(function(elem) { return `dunno what "this" is: ${self}, element: ${elem}`})
[04:28:56] <jellobot> (okay) undefined
[04:29:05] <banana_> n>const self = global; [1, 2].map(function(elem) { return `dunno what "this" is: ${self}, element: ${elem}`})
[04:29:06] <jellobot> (okay) [ 'dunno what "this" is: [object global], element: 1', 'dunno what "this" is: [object global], element: 2' ]
[04:29:10] <systemfault> banana_: Then ES5 came out and we started using .bind() :)
[04:29:12] <banana_> oh that's what I meant
[04:29:33] <EdFletcher> y'all know you can PM jellobot to test stuff, right? or just use the REPL first?
[04:29:41] <banana_> basically the var self = this; self shit
[04:29:49] <banana_> but then ljharb came up with arrow functions
[04:29:53] <banana_> took him 20 years
[04:30:12] <banana_> )
[04:30:14] <banana_> :)
[04:31:41] *** Joins: comet23 (comet23@user/comet23)
[04:32:24] <banana_> systemfault: I read the rhino javascript book 6th edition so I felt like I was there with you
[04:33:09] *** Joins: jamea77 (~jamea@189.237.47.249)
[04:33:24] <banana_> it mentioned es3 too and covered polyfills that supported es5 stuff in es3. it was deep
[04:33:24] <systemfault> Ew. I unfortunately had to use Rhino in the past but I started with "The Good Part"... which was a very bad book to learn the language.
[04:33:55] <banana_> "The Good part" ? whats that
[04:34:28] <systemfault> This thing https://www.oreilly.com/library/view/javascript-the-good/9780596517748/
[04:34:54] <banana_> I liked the rhino but idk i kind of like comprehensive stuff probably related to advice KevinX gave me
[04:34:55] *** Joins: summersault (~summersau@179.221.251.36)
[04:34:58] <systemfault> But now, i 2022, none of the patterns in that book are used...
[04:35:02] *** Quits: jamea (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[04:35:03] <systemfault> *in 2022
[04:35:26] <banana_> how did you "have to use the rhino" in the past
[04:35:29] <systemfault> Ahhh, you meant the Rhino book
[04:35:30] <banana_> like the boss made you?
[04:35:36] <comet23> javascript the outdated parts
[04:35:50] <systemfault> I haven't read "The Definitive Guide" (The book with the Rhino)
[04:35:56] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[04:36:25] <banana_> I meant this but the 6th edition the one prior https://www.amazon.com/JavaScript-Definitive-Most-Used-Programming-Language
[04:36:29] <systemfault> I thought you meant some shitty about about Rhino https://en.wikipedia.org/wiki/Rhino_(JavaScript_engine)
[04:36:35] <systemfault> *shitty book
[04:36:49] <banana_> https://www.amazon.com/JavaScript-Definitive-Most-Used-Programming-Language/dp/1491952024
[04:36:59] <systemfault> I get it now
[04:37:00] *** Quits: ryzendar (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net) (Quit: Leaving)
[04:37:05] <banana_> lol
[04:37:11] <ProfSimm> systemfault: man. painful flashbacks
[04:37:15] <banana_> yeah but rhino was mentioned in the 6th edition
[04:37:18] <systemfault> Heh haha
[04:37:18] *** Joins: ryzenda (~ryzenda@pool-74-109-246-70.pitbpa.fios.verizon.net)
[04:37:32] <banana_> e4x was mentioned also
[04:37:39] <banana_> and now I rub it into jsx devs
[04:37:50] *** Quits: jamea77 (~jamea@189.237.47.249) (Ping timeout: 260 seconds)
[04:37:53] <banana_> umm rub it in towards jsx devs*
[04:38:00] *** Quits: summersault (~summersau@179.221.251.36) (Remote host closed the connection)
[04:38:11] <ProfSimm> systemfault: JS shouldn't have had "this" at all, I think. should've been just objects with visibility into a scope
[04:38:41] <systemfault> ProfSimm: So objects could not refer to themselves?
[04:38:44] <banana_> jsx and https://en.wikipedia.org/wiki/ECMAScript_for_XML are probably totally different, idk, but they look similar
[04:39:04] <ProfSimm> systemfault: they can refer to their properties and method directly without this, because they're in scope
[04:39:15] <systemfault> banana_: I wouldn't be surprised if E4X was at least an inspiration for JSX
[04:39:17] <ProfSimm> methods*
[04:39:27] <systemfault> ProfSimm: I see
[04:40:30] <banana_> i wouldnt mind reading like a technical heavy history of libraries and languages
[04:40:44] <banana_> probably full of drama
[04:40:48] <ProfSimm> systemfault:   function newFooGetter() { let getFoo = () => foo; let foo = 5; return {getFoo}; }  let fg = newFooGetter();  gf.getFoo(); // 5
[04:41:18] <banana_> who actually makes languages
[04:41:26] <systemfault> Elves!
[04:41:28] <banana_> I want to see these people
[04:41:32] <banana_> yeah seriously
[04:41:35] <ProfSimm> banana_: I'm making one
[04:41:50] <banana_> "I help make programming languages" <--- never heard anyone say that
[04:41:58] <banana_> but also havent searched on youtube
[04:42:20] * ProfSimm waves
[04:42:29] <banana_> ProfSimm: yea but idk is this like for fun or idk
[04:42:32] <banana_> that's cool man
[04:42:36] <ProfSimm> banana_: in the middle.
[04:42:58] <banana_> just wondering if there's like serious efforts made by the best big tech can offer. or idk no idea
[04:43:20] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[04:43:24] <banana_> or have we been piggy banking off ex-hippies in california for the last 30 years?
[04:43:31] <banana_> 40-50 years idk
[04:43:34] <ProfSimm> banana_: both
[04:43:45] <ProfSimm> banana_: a runtime like V8 is not a bedroom project
[04:43:55] <ProfSimm> banana_: but the original JS was literally a 10-day bedroom project
[04:44:01] <banana_> i want to make programming languages and not program, they have it way easier
[04:44:04] <ProfSimm> And the original JS is basically 90% of modern JS.
[04:44:10] <ProfSimm> In terms of fundamentals.
[04:44:11] <banana_> they're like king idk i rather be that
[04:44:36] <banana_> ProfSimm: ah interesting
[04:45:18] <ProfSimm> banana_: I wanna see who the heck wrote the Excel expression language. That thing uuuuuuugly.
[04:45:23] <ProfSimm> banana_: but I still respect it. Works
[04:46:01] *** Joins: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au)
[04:46:07] <banana_> you know what I'm saying I rather be like "hey use this programming language I made"
[04:46:12] <banana_> "you make stuff from my stuff"
[04:46:22] <ProfSimm> banana_: make one
[04:46:34] <ProfSimm> banana_: just please do NOT make it like C, Java and JS
[04:46:36] <banana_> idk man sounds like an insider knowledge thing
[04:46:43] <banana_> not part of the club feels like
[04:46:44] <ProfSimm> We need new stuff
[04:46:56] <ProfSimm> In the 70s and 80s there were amazing languages we've abandoned
[04:46:56] <banana_> emotionally speaking and not rationally probably
[04:47:02] <ProfSimm> Now everything looks like C and Java
[04:47:06] <ProfSimm> It's pathetic
[04:47:26] <systemfault> ProfSimm: People are lost without their curly braces
[04:47:43] *** Joins: niop_ (niop@gateway/vpn/airvpn/niop)
[04:47:54] <banana_> it seems like a huge knowledge gap and the people that know how to make languages hoard the knowledge. idk im probably paranoid
[04:48:09] <ProfSimm> systemfault: I'd say any hierarchical language would need some grouping characters, heck even Python has some
[04:48:18] <ProfSimm> systemfault: but there's a lot more weird stuff we don't need.
[04:48:31] <ProfSimm> systemfault:  like "this" :)
[04:48:37] <banana_> what does it even take to make your own language.
[04:48:58] <banana_> what understanding, what knowledge it's idk like something your dad passes down if he made languages
[04:49:14] <ProfSimm> banana_: literally, it takes writing a tokenizer, parser, a runtime, a standard library and tooling :P
[04:49:28] <ProfSimm> banana_: experimenting and reading
[04:50:11] <systemfault> LLVM's logo is a dragon because it's an hommage to a classic compiler book
[04:50:18] <ProfSimm> Forgot compiler, but let's say if you have runtime you may interpret
[04:50:31] *** Quits: Sven_vB (~sven@user/sven-vb/x-2094958) (Remote host closed the connection)
[04:50:51] *** Quits: niop (~niop@n106-70-196-23.rdl1.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[04:51:05] <ProfSimm> banana_: no one is a Real Programmer (tm) until they write a Lisp implementation in their life. Or a few.
[04:51:07] <ProfSimm> ;-)
[04:51:10] <ProfSimm> jk but
[04:51:14] <ProfSimm> curious people do
[04:51:35] <systemfault> https://github.com/aalhour/awesome-compilers#tutorials
[04:51:36] *** Quits: comet23 (comet23@user/comet23) (Ping timeout: 250 seconds)
[04:51:40] *** Quits: arthur_melo (~IRC@user/arthur-melo/x-6822691) ()
[04:51:41] <banana_> I feel that's the hierarchy if you can live off of making programming languages for others
[04:52:15] *** Quits: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation) (Ping timeout: 240 seconds)
[04:52:26] <banana_> id assume youd have to be heavily involved in your work so would need some way to survive
[04:52:32] <banana_> maybe foodstamps works idk
[04:52:54] *** Quits: IceMichael (~IceMichae@h2878436.stratoserver.net) (Quit: bye)
[04:52:58] <ProfSimm> systemfault: we're so used to stuff. Like... why are we putting () after functions? Why are we using dot to access members? Why do we have classes and closures with so many overlapping features?
[04:53:04] *** Joins: Sven_vB (~sven@user/sven-vb/x-2094958)
[04:53:10] *** Joins: JohnComputation (~JohnCompu@gateway/tor-sasl/johncomputation)
[04:53:13] *** Joins: IceMichael (~IceMichae@h2878436.stratoserver.net)
[04:53:17] <banana_> but assuming these people are economically stable
[04:53:30] <ProfSimm> systemfault: and this is just superficial stuff, it goes much deeper. But we can still have curlies.
[04:53:31] <ProfSimm> ;-)
[04:53:46] <ProfSimm> Curlies is such an ugly name though
[04:54:00] <ProfSimm> Let's call 'em  round () square [] and wave {}
[04:54:02] <ProfSimm> :P
[04:54:25] <systemfault> ProfSimm: Probably because people are more likely to adopt programming languages that look like something they're used to... it could simply be a matter of familiarity
[04:54:36] <banana_> took notes what you said
[04:54:38] <ProfSimm> systemfault: oh it absolutely is the case.
[04:55:23] <ProfSimm> systemfault: but we're at the point where I feel we're suffering. Our imagination is damaged. We close our eyes and the C++ / Java grammar shows up. We can't imagine anything else
[04:56:20] <ProfSimm> systemfault: in my lang thingy you don't type console.log("hello world") you can write just:  console log "hello world"
[04:56:22] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[04:56:48] <systemfault> The way I see it... OOP has been explored enough the last 30 years, maybe we simply need a more radical shift to something else... (FP?)
[04:56:54] *** Joins: mat001 (~mat001@c-71-202-208-66.hsd1.ca.comcast.net)
[04:57:16] <ProfSimm> systemfault: FP and OOP have a lot of overlap. Polarization makes people argue about two sides of the same coin
[04:57:27] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[04:57:48] <ProfSimm> systemfault: OOP is not complete though. How many languages offer solid async and value types, coroutines. All those essential to Alan Kay's OOP and unfortunately absolutely lost since
[04:57:52] *** Quits: minto (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[04:57:55] <systemfault> Well... I believe they _could_ be two sides of the same coin.. But they're not.
[04:58:07] *** Joins: m_ (~mat001@static-198-54-129-70.cust.tzulo.com)
[04:58:20] <systemfault> Pick your typical OOP language... the default is mutations everywhere.
[04:58:30] <ProfSimm> systemfault: dunno to me they are. Erlang is the poster child of both being part of something bigger.
[04:58:32] *** Joins: minto (~mintograd@47.201.5.61)
[04:58:54] <ProfSimm> systemfault: Erlang's process is functional, no mutable state per se, in the process, except one thing called process dictionary
[04:59:15] <ProfSimm> systemfault: but together the thousands of processes interacting with messages... emergent effect is highly stateful and mutable
[04:59:20] <banana_> ProfSimm: like i wanna see these language makers in person and see if theyre good role models XD idk
[04:59:32] <systemfault> Unfortunately, ask any "typical dev", they probably have never heard of Erlang.
[04:59:37] <banana_> see if I can catch their energy idk emulate them
[05:00:09] <ProfSimm> banana_: well the maker of JavaScript resigned from Mozilla after supporting ban on gay marriage
[05:00:22] <ProfSimm> banana_: so no they're all terrible people, terrible /s
[05:00:31] <banana_> like sports stars you can kinda get a, although sckewed, glimpse of them, but programming languages makers seem hidden from site
[05:00:32] <systemfault> ProfSimm: There's nothing fundamentally incompatible between FP and OOP... Just the form of OOP that seems to be mainstream
[05:00:55] <banana_> sight
[05:01:20] <ProfSimm> systemfault: I just think both are incomplete and complement each other and can form one language with both FP parts and OOP parts
[05:01:37] <systemfault> ProfSimm: Would love to see something like that.
[05:01:38] <banana_> ProfSimm: yeah im not talking about their beliefs im talking about their productivity and if theyre effective individuals I guess
[05:01:59] <banana_> not talking about trivial beliefs*
[05:02:06] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Ping timeout: 260 seconds)
[05:02:26] <ProfSimm> banana_: I think you're putting language design and implementation on a pedestal. The best cure for this is write yourself a Lisp.
[05:02:35] <banana_> im assuming the vast majority of these people are men, not to be terribly sexist just an educated guess
[05:02:47] <systemfault> Well... numbers matter here.
[05:03:05] <banana_> ProfSimm: I definitely am putting it on a pedestal
[05:03:10] <systemfault> Can't expect to have 50/50 male/female representation in programming... if there's 1 female for 9 males in schools
[05:03:37] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[05:03:43] <ProfSimm> Let's invent a pill that makes 9 out of 10 babies girls
[05:03:49] <ProfSimm> That'll fix everything
[05:03:56] <banana_> systemfault: yeah just thought Id point it out because idk society right or wrong likes to put you in a box based on gender
[05:03:58] <systemfault> s/in schools/in CS
[05:04:12] <systemfault> banana_: Mostly a US thing, they love problems.
[05:04:13] <banana_> so i think it ties to the role model idea
[05:04:48] <banana_> ProfSimm: there's already red pill
[05:04:51] <banana_> jk
[05:05:36] <banana_> i dont want to go too off track. but would be cool to get some bio-documentaries on language makers
[05:05:49] <banana_> and not just like that guy that wrote minecraft with java
[05:06:23] <ProfSimm> banana_: look up recursive descent parsers
[05:06:44] <ProfSimm> banana_:  and write yourself a language
[05:07:12] <banana_> I think I need a role model before I try to tackle that.
[05:07:38] <banana_> someone to look up to idk. how do others do it or is it youre on your own really
[05:08:18] <banana_> or is it like anything else I guess
[05:09:13] <banana_> like if you want to be a chess master you can watch a youtube video of some master chess player. it's just odd with programing language makers
[05:09:50] <ProfSimm> banana_: it's full of videos for programmers on youtube
[05:09:54] <ProfSimm> it's not the 90s
[05:10:27] <banana_> so you would model over programmers if you wanted to be better at making programming languages?
[05:10:35] <ProfSimm> https://www.youtube.com/watch?v=N55XNj8KjC4
[05:10:35] <skillbot> YouTube Title: Let's write a recursive descent parser in C (Part 1)
[05:11:08] <ProfSimm> banana_: ?
[05:11:33] <banana_> so youre not saying dont model yourself over any programmer
[05:11:57] <ProfSimm> I'm not saying not to not do anything.
[05:12:04] <banana_> id think making a programming language is a life style, takes some disciplin im assuming
[05:12:14] <ProfSimm> No
[05:12:21] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:428:432b:7486:55c7) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:12:38] <ProfSimm> It requires curiosity and some free time
[05:13:38] <banana_> jotting this down
[05:16:57] *** Joins: onosendi (~onosendi@user/onosendi)
[05:19:12] *** Joins: AtomicLong (~primamate@p200300ee1725cb00bd79695eac4e9a47.dip0.t-ipconnect.de)
[05:27:29] *** Quits: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com) (Quit: Leaving.)
[05:30:14] *** Quits: AtomicLong (~primamate@p200300ee1725cb00bd79695eac4e9a47.dip0.t-ipconnect.de) (Quit: WeeChat 3.3)
[05:31:25] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:32:58] *** Quits: nulixes (~Thunderbi@gateway/vpn/pia/nulixes) (Ping timeout: 246 seconds)
[05:37:52] *** Quits: cotko (~cotko@188-230-251-153.dynamic.t-2.net) (Ping timeout: 272 seconds)
[05:38:02] *** Quits: Tang3nt-Man (~Tang3nt-M@217.146.83.231) (Remote host closed the connection)
[05:41:28] *** Joins: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c)
[05:41:30] *** Joins: vysn (~vysn@user/vysn)
[05:44:35] *** Joins: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2)
[05:44:35] *** Quits: average (~average@2a02:2f04:405:d600:f516:46b1:9c42:4fa2) (Changing host)
[05:44:35] *** Joins: average (~average@user/average)
[05:49:19] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[05:54:02] *** Joins: dimi1947 (~dimi1947@46.198.247.237)
[05:56:45] *** Joins: jamea (~jamea@177.239.85.44)
[06:02:35] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[06:03:09] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:03:09] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:03:09] *** Joins: wroathe (~wroathe@user/wroathe)
[06:05:12] <friend> Making a programming language requires a great deal of knowledge, a vision, flexibility, a good network of people to help, it's not easy. But using a programming language is fun and doesn't have nearly the same requirements.
[06:06:21] <hax> there's a course on frontendmasters
[06:08:35] <hax> https://frontendmasters.com/courses/programming-language/
[06:10:36] *** Joins: ath28 (~dimi1947@46.198.247.237)
[06:12:45] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[06:13:58] *** Quits: dimi1947 (~dimi1947@46.198.247.237) (Ping timeout: 272 seconds)
[06:17:26] <systemfault> I've seen that with JS and PHP... two very bad languages.... that eventually became really big. (The difference between the two is that JS actually became good with time)
[06:17:55] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[06:18:02] *** Quits: stagas (~stagas@2a02:587:c4b4:ded5:e0bf:13e7:4d38:a036) (Remote host closed the connection)
[06:18:19] *** Joins: trafficjam (~trafficja@203.176.111.34)
[06:18:25] *** Joins: stagas (~stagas@2a02:587:c4b4:ded5:bc9d:8c0d:59b:e05d)
[06:18:31] <trafficjam> does sentry no longer offer free slack integration?
[06:18:39] *** Quits: N4buc0 (~N4buc0@189.115.86.130) (Read error: Connection reset by peer)
[06:19:50] *** Quits: bambanxx (~bambanx@2800:150:106:1061:5518:785e:5eeb:367c) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:23:39] <trafficjam> ok apprently nobody uses irc anymore
[06:24:46] <systemfault> Looks like it.
[06:25:22] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 272 seconds)
[06:25:28] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[06:26:20] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160)
[06:26:24] *** Joins: wyclif (~wyclif@user/wyclif)
[06:29:15] *** Quits: jamea (~jamea@177.239.85.44) (Ping timeout: 260 seconds)
[06:31:38] *** Quits: DrowningElysium (uid190788@user/drowningelysium) (Quit: Connection closed for inactivity)
[06:32:17] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 256 seconds)
[06:35:41] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[06:36:36] <KevinX> php has been improving too i'd say
[06:36:45] *** Joins: jamea (~jamea@177.239.82.103)
[06:37:35] *** Joins: Cyp_ (~cyp@213.237.84.236)
[06:38:09] <systemfault> Somewhat... the language itself improved quite a bit, its standard library still remains a disaster
[06:38:26] <KevinX> they implemented arrow functions poorly in my opinion
[06:38:36] <KevinX> hey have match and enums now
[06:38:40] <KevinX> they*
[06:38:42] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:b563:2857:6cfb:5f17)
[06:39:13] <KevinX> https://www.zend.com/blog/php-8-1
[06:39:39] <systemfault> I still can't use array_filter/reduce/map properly when I come back to it because I cannot remember the argument ordering...
[06:39:54] <KevinX> yeah that was a big fail
[06:40:09] <KevinX> i never remember too. vs code helps though
[06:40:22] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[06:40:27] <systemfault> also... disgusting things like having to use a mandatory array_values after an array_filter
[06:40:38] <systemfault> Otherwise, you get an array with holes in it
[06:40:40] <KevinX> to index?
[06:40:43] <KevinX> yeah
[06:41:28] *** Quits: Cyp (~cyp@213.237.84.236) (Ping timeout: 260 seconds)
[06:41:31] <systemfault> I can't see any reason at this point why they don't simply make arrays "objects" with methods on them
[06:41:38] *** Quits: ath28 (~dimi1947@46.198.247.237) (Quit: Leaving)
[06:41:47] <systemfault> They could use that opportunity to clean up things quite a bit...
[06:42:40] <KevinX> laravel has "collections" which solves it like that
[06:42:59] <KevinX> https://laravel.com/docs/9.x/collections
[06:43:15] <KevinX> I think most people writing php are using laravel or wordpress I guess
[06:43:28] <wyclif> Laravel mostly it seems
[06:43:40] <systemfault> I just remembered that arrays in PHP are stateful... ugh.. (reset/next/prev/etc)
[06:44:36] <wyclif> It has improved the the problem PHP has is that the haters still act like it's PHP 4 but it's not nearly like it used to be and is a lot nicer now
[06:44:57] <KevinX> loop variables leak outside their scope too
[06:45:00] *** Quits: howdoi (uid224@id-224.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[06:46:05] <systemfault> Beside the wide availability of cheap shared hosts allowing PHP, I can't see many reasons to use that language these days...
[06:46:31] <wyclif> Thing is, PHP is still everywhere you look
[06:46:40] <KevinX> Laravel solves a lot of problems and is feature complete mostly
[06:46:41] <wyclif> not just shared hosts
[06:46:47] <systemfault> You mean "wordpress"? :)
[06:46:52] <KevinX> its a good all in one solution
[06:47:01] <KevinX> and good community
[06:47:19] <KevinX> wordpress is becoming a JS project
[06:47:21] <wyclif> Well, sure, WordPress is hugely popular. But it's not as if WP = PHP
[06:47:25] <systemfault> Laravel is great, they picked Symfony components and made a framework that is way nicer to use than Symfony
[06:47:33] <buu> wyclif: it basically does
[06:47:50] <systemfault> wyclif: Ruby is Rails.... PHP is wordpress...
[06:48:03] <KevinX> WP is remving themes
[06:48:20] <KevinX> A theme in wordpress will essentially be a json color config and some custom JS
[06:48:25] <wyclif> I think you're gonna see that changing. WP is already moving away from it
[06:49:11] *** Joins: pulse (~pulse@user/pulse)
[06:49:19] <systemfault> The state of the NodeJS HTTP ecosystem is pretty bad IMHO...
[06:49:20] <wyclif> If I were doing PHP work today I would want to be using Laravel
[06:49:28] <KevinX> I'd say in 5 years WP will be a lot different
[06:50:14] <systemfault> wyclif: Same.
[06:50:33] <systemfault> Is there a modern solution in PHP for websockets?
[06:51:23] <systemfault> I've used async PHP libs in the past... but I never felt they were really good or that they were common
[06:53:12] <theskillwithin> whatever happened to that thing where WP using react for its wtver
[06:53:12] <systemfault> What was it.... React I believe (Not the JS thing)
[06:55:10] <theskillwithin> 5 years ago all my coworkers were using php, now they are all using js
[06:55:30] <theskillwithin> how the turntables
[06:55:39] *** Quits: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net) (Remote host closed the connection)
[06:56:37] <theskillwithin> https://serverless-stack.com/
[06:58:50] *** Joins: admin124 (harrymoren@gateway/vpn/protonvpn/admin123)
[06:59:14] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160) (Ping timeout: 260 seconds)
[07:00:33] *** Joins: paule32_ (~paul@nat-91-137-16-12.net.encoline.de)
[07:00:33] *** Quits: paule32_ (~paul@nat-91-137-16-12.net.encoline.de) (Changing host)
[07:00:33] *** Joins: paule32_ (~paul@user/paule32)
[07:01:25] *** Quits: admin123 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 256 seconds)
[07:02:06] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 272 seconds)
[07:03:34] *** Joins: paule32__ (~paul@nat-91-137-21-12.net.encoline.de)
[07:03:34] *** Quits: paule32__ (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:03:34] *** Joins: paule32__ (~paul@user/paule32)
[07:04:15] *** Quits: paule32 (~paul@user/paule32) (Ping timeout: 260 seconds)
[07:06:25] *** Quits: paule32_ (~paul@user/paule32) (Ping timeout: 246 seconds)
[07:06:35] *** Joins: paule32 (~paul@nat-91-137-21-12.net.encoline.de)
[07:06:35] *** Quits: paule32 (~paul@nat-91-137-21-12.net.encoline.de) (Changing host)
[07:06:35] *** Joins: paule32 (~paul@user/paule32)
[07:08:04] <buu> Also async is the devil
[07:09:04] *** Quits: paule32__ (~paul@user/paule32) (Ping timeout: 272 seconds)
[07:10:20] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 272 seconds)
[07:10:58] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:20:17] <systemfault> There's no good alternative.
[07:20:45] <systemfault> There's a reason why it's used EVERYWHERE.
[07:21:15] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[07:22:32] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[07:25:26] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[07:26:30] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[07:31:37] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[07:32:03] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[07:38:23] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[07:40:17] <systemfault> Oh some Java-drama today
[07:40:43] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 246 seconds)
[07:40:49] <systemfault> Their biggest web framework has two new vulnerabilities
[07:40:50] *** Joins: keypushe- (keypusher@user/keypusher)
[07:41:02] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[07:41:07] <hax> i started looking at kotlin. it seems nice
[07:41:30] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[07:43:07] <systemfault> Yeah, it's a great language
[07:43:30] <systemfault> And by using coroutines, you can write very solid concurrent code
[07:43:36] <KevinX> you should try the Spring framework
[07:43:38] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[07:44:08] *** keypushe- is now known as keypusher
[07:44:11] <KevinX> "This new Spring RCE vulnerability, now dubbed Spring4Shell, is caused by unsafe deserialization of passed arguments."
[07:45:02] <systemfault> Yeah, was reading this article https://www.cyberkendra.com/2022/03/spring4shell-details-and-exploit-code.html
[07:46:17] <KevinX> can't tell but seems it was leaked by mistake or something
[07:46:35] <KevinX> the researcher who discovered it deleted their twitter
[07:46:56] <systemfault> I understand, what he did seems a bit unethical.
[07:47:43] <KevinX> oh yeah, reading that article now
[07:48:09] *** Joins: MRDPZK (~MRDPZK@d205-250-152-220.bchsia.telus.net)
[07:50:41] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Quit: Leaving)
[07:50:55] *** Joins: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com)
[07:52:01] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[07:52:07] *** Quits: rewrit3 (~rewrit3@user/rewrit3) (Read error: Connection reset by peer)
[07:52:18] *** Joins: zebrag (~chris@user/zebrag)
[07:52:18] *** Quits: zebrag (~chris@user/zebrag) (Client Quit)
[07:53:15] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[07:53:25] *** Quits: nomic (~nomic@185.217.117.233) (Quit: Leaving)
[07:53:26] <systemfault> On our side of the fence https://thehackernews.com/2022/03/over-200-malicious-npm-packages-caught.html?m=1
[07:53:54] <systemfault> (Not as bad)
[07:54:34] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[07:57:50] *** Quits: jamea (~jamea@177.239.82.103) (Ping timeout: 272 seconds)
[07:59:47] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[08:01:46] <KevinX> yeah i saw that too. Seem like a single actor?
[08:02:00] <KevinX> "typosquatting"
[08:02:07] <KevinX> going for the low hanging fruit
[08:03:03] <systemfault> I'm surprised that NPM cannot check those
[08:03:18] *** Joins: trafficjam (~trafficja@203.176.111.34)
[08:03:36] <systemfault> Something that would check similarity with other package names on publish... some levenstein distance crappy check
[08:03:49] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[08:04:48] <systemfault> And on false positive, you could just contact NPM to get the wanted name or similar
[08:05:13] *** Quits: FlorianBad (~FlorianBa@cpe-67-49-107-16.dc.res.rr.com) (Quit: Client closed)
[08:13:06] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c)
[08:13:37] *** Joins: dimi1947 (~dimi1947@46.198.247.237)
[08:13:39] <ljharb> npm somewhat blocks those already
[08:14:00] <ljharb> scope vs unscoped tho, that's a tricky one
[08:14:13] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:b949:3ab6:25f0:720c) (Client Quit)
[08:14:19] <ljharb> but also if someone fails to copy/paste an install command verbatim, they're gonna have a bad time anyways
[08:14:55] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[08:19:56] *** Quits: CalamityBlue (~CalamityB@user/CalamityBlue) (Ping timeout: 245 seconds)
[08:21:49] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:23:59] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[08:24:20] <systemfault> Hmm, I believe that people installing those packages are just making typos, no? Typing @somescope/goo instead of @somescope/foo, maybe I don't get the problem right
[08:24:31] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[08:27:41] *** Joins: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com)
[08:31:27] *** Joins: dave0 (~dave0@069.d.003.ncl.iprimus.net.au)
[08:34:35] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[08:34:41] *** Quits: D4mned (~D1mned@212.101.251.168) (Ping timeout: 256 seconds)
[08:35:27] <hax> i think it's that they're installing fancy-libs instead of @official/fancy-libs
[08:38:43] *** Joins: zebrag (~chris@user/zebrag)
[08:39:43] *** Joins: pluri (~pluri@user/pluri)
[08:41:24] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 240 seconds)
[08:44:00] *** Quits: goddard (~goddard@user/goddard) (Remote host closed the connection)
[08:44:24] *** Joins: goddard (~goddard@user/goddard)
[08:47:28] <ThePendulum> it should just show a steam locomotive
[08:50:02] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[08:52:57] *** Quits: MRDPZK (~MRDPZK@d205-250-152-220.bchsia.telus.net) (Quit: Client closed)
[08:53:05] <ljharb> systemfault: you don't
[08:53:13] <ljharb> systemfault: `@somescope` is always fully owned
[08:53:21] <ljharb> systemfault: it's that `@aws/foo` exists, and someone registered `foo`
[08:53:32] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Quit: WeeChat 3.4)
[08:53:51] <systemfault> True, just tired... But what about @zaure/foo instead of @azure/foo then
[08:54:44] <ljharb> sure, true enough
[08:54:53] * ThePendulum takes note 
[08:54:58] <ljharb> but that's only a problem if users are using their eyes and hands to transfer a package name to the command line
[08:55:04] <ljharb> which is dumb, since "copy paste" exists
[08:55:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:56:04] <ThePendulum> idk especially with a slash you often can't double click to select the whole thing and typing might seem faster than selecting by dragging
[08:56:49] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160)
[08:57:14] <ThePendulum> there's no captcha on npm registrations? damn
[08:57:46] *** Quits: jargon (~jargon@184.101.173.186) (Remote host closed the connection)
[09:00:05] *** Quits: stagas (~stagas@2a02:587:c4b4:ded5:bc9d:8c0d:59b:e05d) (Ping timeout: 252 seconds)
[09:02:48] *** Joins: gulzar (~gulzar@49.206.240.149)
[09:03:04] *** Joins: stagas (~stagas@2a02:587:c4b4:ded5:bc9d:8c0d:59b:e05d)
[09:03:12] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:05:41] <gulzar> Hi. small help. https://paste.debian.net/1236233/  .  What it do is to add the selected ids to a textbox in the bootstrap modal, with variable "id_list". The issue is it retains the previously selected values. How to have id_list empty on each click event?
[09:07:47] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[09:08:18] <gulzar> solved :)
[09:10:52] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[09:11:56] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 272 seconds)
[09:12:04] <stagas> systemfault: well that's a problem of the past for me https://github.com/stagas/safe-npm
[09:12:40] <systemfault> Interesting idea
[09:13:07] *** Joins: trafficjam35 (~trafficja@203.176.111.34)
[09:14:31] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[09:15:56] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[09:16:58] *** Joins: rock (~rock@user/rock)
[09:17:49] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[09:17:56] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[09:21:58] <ljharb> lol i still think this is a silly idea
[09:22:02] <ljharb> "5 days ago" isn't automatically safe
[09:22:20] <ljharb> and if enough people used this, then it would just take 5 days to discover the attacks in the first place
[09:23:48] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 240 seconds)
[09:24:14] *** Joins: onosendi (~onosendi@user/onosendi)
[09:24:23] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[09:24:47] <stagas> it's not 100% safe but it's a bit more safe, esp. against people who go insane
[09:25:24] <ljharb> nah, i don't think it really is
[09:25:27] <stagas> against a really malicious and competent hacker, maybe no
[09:25:33] <ljharb> if you follow regular best practices, you're safe anyways
[09:25:48] <ljharb> which are, an internal registry, block deps with CVEs from being added, a lockfile, and code review.
[09:26:36] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[09:27:01] *** Joins: trafficjam (~trafficja@2001:8004:1500:4d7d:f6af:bf82:4a55:37f7)
[09:28:30] *** Quits: trafficjam35 (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[09:28:36] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 240 seconds)
[09:29:14] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160) (Ping timeout: 252 seconds)
[09:29:32] *** Joins: trafficjam15 (~trafficja@203.176.111.34)
[09:31:58] *** Quits: trafficjam (~trafficja@2001:8004:1500:4d7d:f6af:bf82:4a55:37f7) (Ping timeout: 250 seconds)
[09:32:02] <stagas> ljharb: how does an internal registry protect when i want to install something i just found, it will pull all of its current deps no? so i still have to do time travel installs, or whenever i install something new i have to pray
[09:32:04] *** Quits: trafficjam15 (~trafficja@203.176.111.34) (Client Quit)
[09:32:24] *** Joins: trafficjam (~trafficja@203.176.111.34)
[09:38:51] <ljharb> stagas: no, you just run your tests
[09:39:23] <ljharb> stagas: i agree that the only scenario your thing protects against is when you're installing something new, and it or one of its deps has a brand new, undiscovered, problem in it
[09:39:32] <ljharb> stagas: but that's just not all that common
[09:42:54] <stagas> so praying that it's not the one time this time
[09:44:40] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[09:47:28] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[09:49:35] <ljharb> but also, that’s what tests are for
[09:49:47] <ljharb> and backups :-)
[09:50:40] *** Parts: rock (~rock@user/rock) (bbl)
[09:52:19] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 246 seconds)
[09:52:40] *** Quits: cthulchu_ (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 246 seconds)
[09:54:58] *** Joins: codebam_ (~codebam@user/codebam)
[09:55:46] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:b563:2857:6cfb:5f17) (Quit: My iMac has gone to sleep. ZZZzzz…)
[09:57:27] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 260 seconds)
[10:03:22] *** Joins: han-solo (~han-solo@user/han-solo)
[10:04:25] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[10:06:57] *** Joins: dob1 (~dob1@user/dob1)
[10:07:56] *** Joins: onosendi (~onosendi@user/onosendi)
[10:08:01] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:12:12] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 240 seconds)
[10:13:13] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 260 seconds)
[10:16:54] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:20:55] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[10:21:12] *** Quits: zauberfisch (~Zauberfis@cm147-42.liwest.at) ()
[10:22:17] *** Joins: zauberfisch (~Zauberfis@cm147-42.liwest.at)
[10:24:03] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:25:41] *** Joins: Guest5279 (~Guest52@213.162.65.111)
[10:30:42] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Remote host closed the connection)
[10:31:59] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[10:35:26] *** Joins: mexen (uid495612@user/mexen)
[10:35:37] *** Quits: pmercado (~pmercado@190.22.73.57) (Ping timeout: 256 seconds)
[10:35:48] *** Joins: D4mned (~D1mned@212.101.251.168)
[10:36:48] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 272 seconds)
[10:38:24] *** Joins: undefined_bob (~undefined@user/undefined-bob/x-5411918)
[10:41:17] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[10:43:50] *** Joins: trafficjam57 (~trafficja@203.176.111.34)
[10:46:56] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[10:49:13] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[11:00:51] *** Joins: nulixes (~Thunderbi@gateway/vpn/pia/nulixes)
[11:01:14] *** Quits: trafficjam57 (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[11:03:19] *** Joins: trafficjam (~trafficja@203.176.111.34)
[11:05:36] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[11:05:59] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[11:06:19] *** Parts: WizJin_ (~z0rbaznc@78.141.221.79) ()
[11:09:37] *** Joins: pluri (~pluri@user/pluri)
[11:11:49] *** Joins: Optimus (~risto@87.227.227.147)
[11:12:30] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[11:14:50] *** Joins: admin123 (harrymoren@gateway/vpn/protonvpn/admin123)
[11:15:26] *** Quits: Optimus (~risto@87.227.227.147) (Read error: Connection reset by peer)
[11:15:43] *** Joins: Optimus (~risto@87.227.227.147)
[11:17:01] *** Quits: admin124 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 246 seconds)
[11:23:22] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[11:27:35] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160)
[11:28:42] <Decker> :) is there a JS to TS compiler? that once I'm done with the JS it can go through and annotate all the types I did use?
[11:31:53] <systemfault> Not sure how that would work....
[11:32:22] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[11:32:55] <systemfault> function foo(a: X, b: X): X { return a + b; } What is the type of X? number? BigInt? string?
[11:33:18] <D4mned> when my AI girl friend takes over the world everything will be possible!
[11:33:46] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[11:36:00] <D4mned> why is strongly typed is better than dynamically
[11:36:38] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[11:37:33] <D4mned> and why === is better than ==
[11:37:52] <D4mned> it feels like using === takes more courage to use!
[11:38:05] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:38:46] <systemfault> Mainly tooling... avoids dumb errors that would usually get caught by tests (You still test with statically-typed language... it's just that with TS, I see the errors in my editor before I run the test. )
[11:39:13] <systemfault> === ensures the types are the same... but you already knew that...
[11:39:25] <D4mned> excuse my ignorance as im a newbie
[11:40:48] <D4mned> i guess i havent reached the point where that matters much to me
[11:46:02] *** Joins: nulixes1 (~Thunderbi@gateway/vpn/pia/nulixes)
[11:47:42] *** Quits: nulixes (~Thunderbi@gateway/vpn/pia/nulixes) (Ping timeout: 260 seconds)
[11:47:43] *** nulixes1 is now known as nulixes
[11:49:36] *** Joins: dob1 (~dob1@user/dob1)
[11:52:35] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b0e0:c4b0:8b04:fa76)
[11:55:58] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 272 seconds)
[11:55:59] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[11:56:01] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.5)
[11:56:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[11:57:59] *** Joins: jargon (~jargon@184.101.173.186)
[12:00:40] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:01:48] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Remote host closed the connection)
[12:02:18] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160) (Ping timeout: 260 seconds)
[12:03:03] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:08:03] *** Joins: sfields_ (~sfields@2605:a601:adea:7a00:b0f3:92c0:5031:4a99)
[12:10:21] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 245 seconds)
[12:10:35] *** Quits: sfields (~sfields@2605:a601:adea:7a00:b060:ab7f:958c:df55) (Ping timeout: 250 seconds)
[12:11:12] *** Joins: defn (~n0b0dy@user/defn)
[12:11:52] *** Quits: trafficjam (~trafficja@203.176.111.34) (Ping timeout: 250 seconds)
[12:11:56] *** Joins: dob1 (~dob1@user/dob1)
[12:15:34] *** Joins: rendar (~rendar@user/rendar)
[12:18:03] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 260 seconds)
[12:18:15] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[12:18:46] *** Joins: Booster2ooo (~Booster2o@user/booster2ooo)
[12:20:43] *** Joins: trafficjam (~trafficja@2001:8004:1500:2574:5b3f:d734:ffca:9054)
[12:25:08] *** Quits: Guest5279 (~Guest52@213.162.65.111) (Quit: Client closed)
[12:28:52] *** Quits: sheetjs (~sheetjs@user/sheetjs) (Quit: Leaving...)
[12:30:09] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[12:40:23] *** Joins: peteyboy1 (~peteyboy1@199.157.133.37.dynamic.jazztel.es)
[12:40:38] <fweht> is it somehow possible to use prettier.io for general c-like syntax?  e.g. glsl?  i feel a lot of their functionality is not dependent on very specific js constructs?
[12:42:32] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 260 seconds)
[12:44:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:46:31] <fweht> ah nvm there is clang formatter, i just learned!
[12:48:13] *** Joins: otisolsen70_ (~otisolsen@80.80.4.2)
[12:48:21] *** Joins: fillx (~fillx@user/fillx)
[12:48:50] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[12:50:28] *** Quits: fillx (~fillx@user/fillx) (Client Quit)
[12:51:43] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Ping timeout: 272 seconds)
[12:55:50] *** Quits: otisolsen70_ (~otisolsen@80.80.4.2) (Remote host closed the connection)
[12:56:40] *** Quits: Tempesta (~Tempesta@user/tempesta) (Read error: Connection reset by peer)
[12:58:48] *** Joins: Naan (~Naan@user/naan)
[13:00:41] *** Joins: cotko (~cotko@89-212-138-82.static.t-2.net)
[13:08:23] *** Quits: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 256 seconds)
[13:11:24] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:14:03] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[13:14:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[13:14:40] *** Joins: CrazyEddy (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f)
[13:14:41] *** Quits: pez (~pez@user/pez) (Read error: Connection reset by peer)
[13:15:01] <ProfSimm> How do I delegate yield from one generator to another
[13:15:10] *** Joins: wyclif (~wyclif@user/wyclif)
[13:15:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:15:40] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 246 seconds)
[13:16:11] <ProfSimm> for(;;) { v = foo(); v.done ? break : yield v }
[13:16:15] <ProfSimm> I.e. this sort
[13:16:16] <ProfSimm> of
[13:16:20] <ProfSimm> But without having to type it out
[13:17:04] <Cork> don't think you can
[13:17:21] <ProfSimm> Ah well shucks.
[13:17:29] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[13:17:40] <ProfSimm> Cork: I'm trying to flatten recursive code, but it's not all tail recursive.
[13:17:42] *** Joins: pez (~pez@user/pez)
[13:17:50] <ProfSimm> Cork: so trying to figure out what to do
[13:18:33] <Cork> would have to have a bit more context to follow what you're trying to do
[13:18:49] <ProfSimm> Cork: I'm trying to avoid a recursive descent parser blowing up the stack
[13:18:49] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 246 seconds)
[13:19:05] <Cork> ya, i get that part, but that is abstract, not specifics
[13:19:13] <ProfSimm> Well.
[13:19:44] <ProfSimm> Cork: I was born in a small village in the outskirts of...
[13:19:45] *** Joins: benni (~benni@p57b83856.dip0.t-ipconnect.de)
[13:19:49] <ProfSimm> Cork: ok nm thanks :)
[13:20:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[13:20:56] *** Joins: wyclif (~wyclif@user/wyclif)
[13:24:32] <systemfault> ProfSimm: yield* ? or you mean something else
[13:24:59] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[13:25:00] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[13:25:45] <systemfault> n> function *myGen() { yield* [1,2,3,4] } console.log(...myGen())
[13:25:45] <jellobot> (okay) 1 2 3 4
[13:30:07] *** Joins: Tempesta (~Tempesta@user/tempesta)
[13:30:22] <ProfSimm> systemfault: yes!!
[13:30:33] <ProfSimm> So it CAN do it
[13:30:49] <ProfSimm> systemfault: thanks a lot, well this makes generators a lot more useful to me
[13:30:57] <ProfSimm> In terms of producing readable code
[13:30:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[13:31:26] <D4mned> n> \u{63}\u{6f}\u{6E}\u{73}\u{6f}le.log("unicode")
[13:31:27] <jellobot> (okay) unicode
[13:31:43] <D4mned> thats just weird
[13:31:58] *** Joins: wyclif (~wyclif@user/wyclif)
[13:34:23] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:c06:c5f:5435:411f)
[13:34:47] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[13:35:14] <D4mned> cool though
[13:35:52] <ProfSimm> D4mned: I didn't know this exists.
[13:36:02] <D4mned> i just found out about it
[13:36:17] <ProfSimm> D4mned: I guess it's handy to transmit any JS through 7-bit medium
[13:37:00] <D4mned> sounds milicious lol
[13:37:01] *** Quits: suss (~user@user/suss) (Ping timeout: 246 seconds)
[13:38:32] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:39:25] *** Joins: VoidSync (~sync@user/voidsync)
[13:42:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[13:43:05] *** Joins: wyclif (~wyclif@user/wyclif)
[13:45:22] *** Quits: pizdets (~pizdets@183.182.111.193) (Ping timeout: 265 seconds)
[13:45:46] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 245 seconds)
[13:46:07] *** Quits: D4mned (~D1mned@212.101.251.168) (Read error: Connection reset by peer)
[13:46:19] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[13:47:42] *** Joins: D4mned (~D1mned@212.101.251.96)
[13:50:32] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[13:50:37] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 240 seconds)
[13:52:27] *** Joins: nomic (~nomic@185.217.117.233)
[13:53:08] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[13:53:16] *** Quits: trafficjam (~trafficja@2001:8004:1500:2574:5b3f:d734:ffca:9054) (Ping timeout: 250 seconds)
[13:54:10] *** Joins: wyclif (~wyclif@user/wyclif)
[13:56:14] *** Joins: aswsd (~helpme8@user/hlpme)
[13:56:15] <aswsd> when to use npm vs npx? I'm a bit confused
[13:56:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[13:57:56] <ProfSimm> Anyone here writing parsers in JS?
[13:58:04] <ProfSimm> Wanted to exchange experience
[13:59:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[13:59:45] *** Joins: wyclif (~wyclif@user/wyclif)
[14:00:19] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[14:00:25] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160)
[14:02:44] <D4mned> parsers for what
[14:02:48] *** Joins: keypushe- (~keypusher@user/keypusher)
[14:04:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[14:04:57] *** Joins: pizdets (~pizdets@183.182.114.101)
[14:05:14] *** Joins: wyclif (~wyclif@user/wyclif)
[14:05:23] *** Quits: keypusher (keypusher@user/keypusher) (Ping timeout: 260 seconds)
[14:06:09] *** keypushe- is now known as keypusher
[14:08:50] *** Joins: onosendi (~onosendi@user/onosendi)
[14:10:34] *** Joins: admin124 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[14:11:08] <ProfSimm> D4mned: programming languages and data formats
[14:11:38] <ProfSimm> D4mned: I'm writing a language. Part JS, part JSON, part Lisp, part Haskell, part Java...
[14:11:45] <ProfSimm> Many parts :P
[14:12:23] *** Quits: admin123 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 260 seconds)
[14:13:00] *** Quits: onosendi (~onosendi@user/onosendi) (Ping timeout: 240 seconds)
[14:18:41] *** Quits: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com) (Quit: Leaving.)
[14:20:00] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[14:21:46] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[14:23:30] *** Quits: VoidSync (~sync@user/voidsync) ()
[14:24:55] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[14:25:37] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[14:25:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[14:26:09] <Decker> ProfSimm most just use Acorn
[14:26:15] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[14:26:43] <Decker> but there's tons of parsers - but they're rarely stopped at the parsing point (like acorn) they are usually attached to a JS engine and runtime too
[14:27:03] *** Joins: qswz (~caub@89-80-20-125.abo.bbox.fr)
[14:27:23] *** Quits: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge) (Read error: Connection reset by peer)
[14:28:47] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[14:29:09] <ProfSimm> Decker: I'm not using/making a generic one. So
[14:29:12] <qswz> if my site support sign in/up with google along with sign in§up with email/password. If a user had already an account and use sign up with google, should 1. sign him in 2. error email already exists?
[14:29:18] <ProfSimm> Decker: all custom code :P
[14:29:59] *** Joins: dionysus69 (~Thunderbi@94-43-121-219.dsl.utg.ge)
[14:30:15] *** Joins: DF32 (~DF32@2001:8a0:f893:5c00:942a:1f12:22a1:861)
[14:30:55] <Decker> except at some level you are; and really there's a parsing phase... which is what acorn is; it takes JS and spits out AST ... was just sayin there's lots of other JS parsers, but they're not standalone so they will all have a bunch of extra junk one definatly doesn't NEED for parsing (any) language
[14:31:26] <ProfSimm> Decker: I'm not writing a parser to parse JS, I'm writing a parser in JS to parse a new language
[14:31:36] <Decker> it's also IN js
[14:31:45] <ProfSimm> Decker: ok but I'm not parsing JavaScript
[14:31:55] *** Joins: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[14:32:10] *** Joins: alystair (~alystair@user/alystair)
[14:32:13] <ProfSimm> Decker: I'm only using JS as a stepping stone before I WASM parts of it
[14:32:17] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 252 seconds)
[14:32:53] <qswz> which language?
[14:33:03] <ProfSimm> qswz: it's a new one
[14:33:07] <qswz> ok
[14:33:26] <qswz> coolscript
[14:33:35] <Decker> I the next step would be porting the config-script library which uses the tokenizer, and tokenizes format strings to match against and dispatch ... I ended up just exposing the C through node though.  Other than JSON flavors of parsers which are just streaming tape readers
[14:33:47] <ProfSimm> qswz: started as a need to have expressions and light scripting on a spreadsheet-like productivity tool. And then I liked it...
[14:34:42] <DF32> Hello, can anyone help me with a small doubt please? I have this "map(k => (k[0] == 1 ? '0 ' : '00 ') + '0'.repeat(k.length) + ' ')" where "k" is a string of numbers (always 1's and 0's) and k[0] is the first number of that string. I'm checking if k[0] is 1 or 0. Does anyone know why can't I use the coerce operator in the short if, like this:
[14:34:42] <DF32> "map(k => (!!k[0] ? '0 ' : '00 ') + '0'.repeat(k.length) + ' ')" ?
[14:35:30] <ProfSimm> Decker: talking of which I have a problem with the "streaming tape" part in mine. I can tokenize a stream in motion just fine, but the expression tree accumulates in memory. Means if I have source code that produces bigger expr tree than I have RAM, that's bad news.
[14:35:33] <qswz> DF32: checks .padStart function
[14:35:42] *** Joins: dan01 (~dan01@2a02:2f09:360d:2e00:b015:3d2c:aba1:e095)
[14:35:57] <Decker> https://github.com/d3x0r/-/blob/master/org.d3x0r.common/text.js#L90 ProfSimm Tokenizer... and text segment wrapper... segments form a doubly linked list with possible indirect for sub-expressions/phrases
[14:35:57] <ProfSimm> Decker: you may empathize with that need as your JSOX is even more of a data format and may need to accumulate large streaming data
[14:36:32] <ProfSimm> Decker: my point is, how would we process this without storing it all in ram
[14:36:34] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[14:36:40] <Decker> ya I haven't tried to pipe gigs through it
[14:36:41] <ProfSimm> Decker: swap out subtrees to disk :)
[14:36:54] <DF32> qswz Thanks, but it will not work here, it's a different problem. I need to check if the first letter is 0 or 1...
[14:36:56] <Decker> a file
[14:37:01] <ProfSimm> Decker: we can use indirect reference that says "oh yeah load this from file.dump if you ever come here"
[14:37:08] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[14:37:22] <DF32> Does anyone know why can't I use the coerce operator in a short if?
[14:37:24] <Decker> ya... memory map it; let the system remove it when it's not used and needs more physicsl memory
[14:37:40] <ProfSimm> Decker: that'd made it useful to store some "cost" of an expr based on count of descendants and content
[14:37:44] <Decker> I'd just map such a file in the first case so it's 0 memory
[14:37:45] <qswz> DF32: use string templates anyway
[14:37:45] <ProfSimm> Decker: so you know what's useful to swap
[14:38:10] <ProfSimm> Decker: there has to be another way though. Event-based parser. XML used to have those a lot
[14:38:28] <ProfSimm> Decker: SAX parser, heard of it?
[14:38:48] <Decker> ya - the JSOX interface for streams is event based - everytime a token sequence completes (comes back to CONTEXT_UNKNOWN)
[14:38:57] <Decker> it pushes the value to the callback
[14:39:02] <Decker> ya; I prefered expat
[14:39:12] <qswz> n> ['111', '00'].map(k => (k[0] == 1 ? '0 ' : '00 ') + '0'.repeat(k.length) + ' ')
[14:39:13] <jellobot> (okay) [ '0 000 ', '00 00 ' ]
[14:39:20] <Decker> (that fell out of repair and was small, I made small changes and renamed it as sexpat in SACK) :)
[14:39:28] <Decker> sacked it even :)
[14:39:35] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[14:39:35] <ProfSimm> Decker: it might not be that useful for a script though, because you can't evaluate it until you have it, and before that it's just arbitrary expressions
[14:39:57] <qswz> n> ['111', '00'].map(k => `${k[0] == 1 ? '0 ' : '00 '}${'0'.repeat(k.length} `)
[14:39:57] <jellobot> (fail) SyntaxError: missing ) after argument list
[14:40:11] <Decker> ya hence 'completed' objects... { +100Megs } would be 1 event
[14:40:19] <Decker> not like every sub-tag in an XML parser
[14:40:32] <qswz> n> ['111', '00'].map(k => `${k[0] == 1 ? '0 ' : '00 '}${'0'.repeat(k.length)} `)
[14:40:33] <jellobot> (okay) [ '0 000 ', '00 00 ' ]
[14:40:43] <ProfSimm> Decker: how'd one constrain arbitrary stream like that so it can be parseable I wonder
[14:41:04] <qswz> DF32: sounds like thousands separator formatting?
[14:41:10] <qswz> use Intl if so
[14:41:11] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[14:41:20] <qswz> Intl.NumberFormat
[14:41:43] <Decker> ProfSimm with a more complex state than a single token :)
[14:42:11] <ProfSimm> Decker: from experience you need to somehow FORCE a standalone "chunk" of processing
[14:42:31] <ProfSimm> Decker: so many small trees, not one big tree
[14:42:45] <ProfSimm> Decker: and then permit a way for every next tree to refer to the previous ones maybe
[14:43:25] <DF32> qswz is there any advantage in using the string template here? Nah, just a code challenge (code golf style - less chars)
[14:43:31] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[14:43:41] <ProfSimm> Decker: alternatively we ban hierarchical data formats and make it all relational, trees only emerging from relational queries
[14:44:00] <ProfSimm> Decker: you can parse relational data "row' by "row"
[14:44:01] <Decker> ProfSimm :) make it a stream filter
[14:44:07] <DF32> passing chars to unary
[14:44:51] <ProfSimm> Decker: machine code is a flat stream of commands too, not incidentally i bet
[14:45:22] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[14:45:28] <Decker> ProfSimm https://github.com/d3x0r/dekcore.js/blob/main/command_stream_filter/text_parse.js  Dekware input I structured to be able to chain filters... like a MUD stream might be a TCP socket to Telnet to ANSI to Triggers (auto respond based on input) to the user ... 'sides simple ones like 'tokenize' aren't very many lines
[14:45:33] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:45:42] <Decker> ya separated by \n
[14:45:45] <DPA> Relational data can form graphs, which trees can't fully represent.
[14:45:47] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[14:45:48] <Decker> and sub-separted by ;
[14:45:50] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[14:45:53] <ProfSimm> DPA: yup
[14:46:02] <ProfSimm> DPA: well that's the thing, code is really graphs anyway
[14:46:13] <ProfSimm> DPA: we use variables for the extra "edges" the tree can't express
[14:47:11] <Decker> :) Just did a circular recursion... since the game board loaded the tokens, I loaded the tokens from the board exports, but the board imports teh GameWaiter which is the dialog which was going to show tokens (so you can choose your color)
[14:47:14] <ProfSimm> Decker: when you parse a stream do you parse char by char
[14:47:20] <Decker> import recursion
[14:47:36] <Decker> ProfSimm Maybe; but blocks are sent in the stream - datagrams basically
[14:47:51] *** Joins: prawnsal_ (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk)
[14:47:53] <Decker> so it might be that something that assembles characters back in might read a lot before making 1 block too
[14:48:12] <ProfSimm> Decker: I use regex to tokenizer and streaming is a bit awkward
[14:48:14] *** Quits: benni (~benni@p57b83856.dip0.t-ipconnect.de) (Quit: Client closed)
[14:48:17] <ProfSimm> to tokenize*
[14:48:26] <Decker> sure...
[14:48:29] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[14:48:37] <ProfSimm> Decker: gotta know when i have a token bounary
[14:48:42] <ProfSimm> before I match
[14:48:44] *** Joins: audio (~audio@user/audio)
[14:48:47] <Decker> my text parser in C was mostly copy and paste to JS so.... I got grouping with brackets and quotes too
[14:50:53] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[14:51:23] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 260 seconds)
[14:51:26] *** Quits: jargon (~jargon@184.101.173.186) (Remote host closed the connection)
[14:51:45] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[14:51:51] *** Quits: prawnsalad (~prawnsala@82-71-13-185.dsl.in-addr.zen.co.uk) (Ping timeout: 260 seconds)
[14:52:31] <ProfSimm> Decker: one approach I plan to try is to have a single simplified regex which finds a "complete piece" to further tokenize (i.e. detect a safe token boundary in the stream)
[14:52:48] <ProfSimm> Decker: granted if I do it like you would do it in C I can directly tokenize char by char
[14:53:17] <qswz> DF32: what was the issue btw? I don't see one
[14:53:20] <ProfSimm> Decker: my gut says regex should be faster
[14:53:39] <qswz> you're concatenating strings so it can't go wrong
[14:53:51] <Decker> using integer comparisons is plenty fast
[14:54:10] <Decker> ProfSimm [...string].map( codePointAt(0) );
[14:54:14] *** Quits: dimi1947 (~dimi1947@46.198.247.237) (Quit: Leaving)
[14:54:52] <ProfSimm> Decker: this looks very slow
[14:54:55] <ProfSimm> :D
[14:55:01] <Decker> ...string separates surrogate paris properly so they're always 1 character strings... then you don't have to worry aobut getting a value 0xd8xx something and having to pair it
[14:55:04] <Decker> it's actually really fast
[14:55:09] <ProfSimm> Decker: btw wait, you can do spread on a STRING :)?
[14:55:20] <Decker> yup and get chars
[14:55:22] <Decker> char strings
[14:55:24] <ProfSimm> Well damn
[14:55:50] <DF32> qswz in the example I shown? Nothing, it works fine with by comparing  with "=="  but I'm just wondering why can't I just use !!k[0] ? '0 ' : '00 '
[14:55:56] <ProfSimm> Decker: I trust JS engines to optimize but I don't know if I trust them to optimize as much as regex can
[14:56:14] <DF32> qswz with the coerce it doesn't work
[14:56:35] <Decker> ProfSimm 0 comparison always < any other comparison :p
[14:56:50] <ProfSimm> Decker: I was just itching to test, but I don't feel like rewriting my tokenizer
[14:56:52] <qswz> DF32: I don't see any coercion there
[14:57:04] <qswz> a coercion is for example +1
[14:57:10] <qswz> +'1' I mean
[14:57:14] <qswz> or '' + 1
[14:57:31] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 246 seconds)
[14:57:47] <DF32> oh, I thougnt this "!!" was called coerce operator in javascript.
[14:58:07] <DF32> It doesn't work using "!!" instead of "=="
[14:58:21] <DF32> shouldn't "!!" cast to bool?
[14:58:31] *** Quits: dan01 (~dan01@2a02:2f09:360d:2e00:b015:3d2c:aba1:e095) (Ping timeout: 250 seconds)
[14:58:33] <qswz> DF32: can you paste again the relevant code
[14:58:42] <qswz> I didn't see any !!
[15:00:15] <DF32> this works: "map(k => `${(k[0] == 1 ? '0 ' : '00 ') + '0'.repeat(k.length)} `)". This doesn't work: map(k => `${(!!k[0] ? '0 ' : '00 ') + '0'.repeat(k.length)} `)  (!! before k)
[15:00:32] <DF32> can it be because k is a string of numbers?
[15:00:35] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:00:50] <since_> maybe (!!k[0])? :
[15:01:05] <qswz> k[0] == 1 ? '0 ' : '00 ' is the same as !!k[0] ? '0 ' : '00 '
[15:01:14] <qswz> since_: nope
[15:01:24] <qswz> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
[15:01:31] *** Quits: Csm319_ (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[15:02:14] <qswz> ! is way higher than ternary
[15:02:37] <qswz> oops
[15:02:47] <DF32> that's why I don't get it why it doesn't work. I tried to console.log k[0] prints the chars 1 or 0. While console.log !!k[0] prints only false to all values
[15:03:03] <qswz> k[0] == 1 is not the same as !!k[0]
[15:03:19] <qswz> I see what's confusing you
[15:03:19] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[15:03:30] <Decker> "0" or 0
[15:03:41] <qswz> you thought X === '0' and !!X would be the same
[15:03:44] <qswz> first always use ===
[15:04:05] <blueagain> ^
[15:04:18] <DF32> I not using === because it's a code golf challenge ahah
[15:04:31] <DF32> Yeah, I thought that would be the same
[15:05:22] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[15:05:24] <DF32> thanks :P
[15:06:04] *** Joins: keypushe- (keypusher@user/keypusher)
[15:06:28] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Client Quit)
[15:06:44] <qswz> you can golf it much more
[15:08:16] <qswz> `0${k[0]==1?'':0} '0'.repeat(k.length)} `
[15:08:23] *** Quits: keypusher (~keypusher@user/keypusher) (Ping timeout: 260 seconds)
[15:08:25] <qswz> `0${k[0]==1?'':0} ${'0'.repeat(k.length)} `
[15:09:20] *** keypushe- is now known as keypusher
[15:10:59] <qswz> what are shortcuts to next search match in chrome?
[15:11:03] <dave0> does k[0]-1?'':0 work?
[15:11:12] <since_> DF32: try ~~k[0]
[15:11:22] <qswz> n> '0'-1?2:3
[15:11:22] <jellobot> (okay) 2
[15:11:31] <blueagain> qswz: ctrl+g
[15:11:36] <qswz> n> ~~'0'?2:3
[15:11:36] <jellobot> (okay) 3
[15:11:38] <blueagain> +G is prev
[15:11:46] <qswz> blueagain: thanks
[15:12:08] <qswz> g for grep
[15:12:41] <qswz> ctrl+f for Fearch
[15:12:49] <qswz> find, I'm stupid
[15:12:50] <blueagain> f is for find
[15:13:11] <blueagain> though you can probably install a vimperator plugin and it will ease your life
[15:13:31] <audio> anyone experienced with datatables?
[15:13:49] <blueagain> audio: ask your question
[15:14:02] <DF32> it works the ~~k[0]
[15:14:14] <audio> blueagain, how are the searchpanes configured in this example? https://datatables.net/examples/api/highcharts.html
[15:15:00] <since_> n> [~~'0'?true:false, ~~'1'?true:false, ~~'2'?true:false]
[15:15:01] <jellobot> (okay) [ false, true, true ]
[15:15:26] <DF32> but how is the space being added here "`0${~~k[0] ? '' : 0} ${'0'.repeat(k.length)} `)
[15:15:30] <DF32> `0${~~k[0] ? '' : 0} ${'0'.repeat(k.length)} `)
[15:15:56] <DF32> it was like this before '0 ' or '00 ' (space after the 0)
[15:16:32] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:17:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[15:17:52] <DPA> n> +'0'&&''
[15:17:52] <jellobot> (okay) 0
[15:17:57] *** Joins: wyclif (~wyclif@user/wyclif)
[15:18:13] *** Joins: thiras (~thiras@user/thiras)
[15:18:18] <DPA> n> +'1'&&''
[15:18:18] <jellobot> (okay) ''
[15:18:54] <audio> blueagain, ?
[15:19:32] <DPA> `0${+k[0]&&''} ${'0'.repeat(k.length)} `
[15:19:52] *** Joins: VoidSync (~sync@user/voidsync)
[15:20:36] <DF32> lmao, how many possibilities are there
[15:23:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[15:23:32] <audio> blueagain, any idea?
[15:23:43] *** Joins: wyclif (~wyclif@user/wyclif)
[15:24:00] <blueagain> audio: looking at it
[15:24:04] <DF32> Hmm, because the bitwise of 1 or 0 is the opposite
[15:24:04] <audio> ok
[15:24:06] <audio> thanks
[15:26:07] <DF32> DPA could you please explain what is this doing? +k[0] && ''
[15:27:45] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:27:46] <blueagain> audio: https://cdn.datatables.net/plug-ins/preview/searchPane/index.html
[15:28:11] <blueagain> audio: I don't think they're doing anything custom other than `example').DataTable( { searchPane: true,
[15:28:22] <blueagain> sorry, other than `searchPane: true`
[15:28:24] <audio> thanks, ok, i'll try it
[15:30:36] <DPA> I assumeg k[0] is number like. So k[0] converts it to a number. 0 is falsy. && returns the first parameter if it is falsy. Otherwise, the second. So in this case if +k[0] is truthy, it returns ''.
[15:30:43] <DPA> *assumed
[15:31:12] <dave0> maw audio
[15:31:57] *** Joins: alystair (~alystair@user/alystair)
[15:32:24] <audio> dave0, maw, didn't know you were in here
[15:33:10] <dave0> i'm a newbie
[15:34:06] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160) (Ping timeout: 245 seconds)
[15:34:44] <DPA> Or to put it another way,  x&&y  is the same as x?y:x
[15:35:06] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[15:35:33] <DF32> x ? x : y, no?
[15:35:50] <DF32> since it returns the first if true
[15:36:13] *** Quits: jazzy2 (~jaziz@user/jaziz) (Ping timeout: 250 seconds)
[15:36:16] <DF32> I still don't get where are you adding the extra 0 because I had it like '0 ' : '00 '
[15:36:17] <DF32> O.o
[15:36:18] <blueagain> DF32: x&&y is a boolean check, it shortcircuits if x is false
[15:36:49] <DF32> ohhhh, nevermind...
[15:37:06] <blueagain> y is only read if x is truthy
[15:37:47] *** Joins: i0e (~is0ke3@user/is0ke3)
[15:38:22] <blueagain> `x ? x : y` is more like `x || y`
[15:38:53] <DF32> yeah got it, thanks DPA blueagain.. And that + before k ( +k[0] )
[15:39:12] <blueagain> that's equivalent to doing Number(k[0]), just shorter
[15:39:17] <blueagain> a cast to number
[15:39:30] <blueagain> since you're golfing, using + is fine, but in all other cases, use the explicit way
[15:39:38] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:29b4:5494:e5f8:bfa:fded)
[15:39:39] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[15:40:06] <blueagain> + is harder to read and the intention might not be quite clear
[15:43:37] <blueagain> DF32: the extra 0 comes from the number case
[15:43:47] <blueagain> n> +'0'&&''
[15:43:48] <jellobot> (okay) 0
[15:43:50] <blueagain> n> +'1'&&''
[15:43:51] <jellobot> (okay) ''
[15:44:36] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[15:44:51] <blueagain> number cast*
[15:45:49] *** Quits: aswsd (~helpme8@user/hlpme) (Ping timeout: 246 seconds)
[15:47:50] <DF32> shouldn't 0 be cast to false? and the extra 0 would not be add?
[15:50:21] <DF32> that's confusing, since when the number is 0 there needs to be an extra 0. And if +k[0]  is 0 then the 0 shouldn't be added?
[15:50:22] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[15:50:34] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[15:51:28] <DF32> what am I missing here? 0${+k[0] && ''}
[15:51:33] *** Joins: summersault (~summersau@179.221.251.36)
[15:55:26] <DPA> && is an operator. Think of it like any other function. If the first paramter is falsy, it returns it. Otherwise, it returns the second parameter. It doesn't cast anything.
[15:56:13] *** Quits: summersault (~summersau@179.221.251.36) (Ping timeout: 260 seconds)
[15:59:10] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 272 seconds)
[15:59:15] <DF32> of course... I forgot again about that lmao. Sorry my head and going in circles. What is problably confusing me is the concept of falsy, what I'm used to is just using && to check if both conditions are true (if one isn't then nothing happens)
[15:59:27] <DPA> And the ${expression} in a template string is replaced with whatever the expression evaluates to, turned into a string.
[15:59:28] <DF32> *is going in circles
[16:03:15] *** Cyp_ is now known as Cyp
[16:04:47] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[16:05:13] <blueagain> I do admit it's a bit confusing since && is strongly associated with boolean values
[16:05:22] <blueagain> but its general use is consistent with that
[16:05:44] <blueagain> if first operand is falsy, fail fast (and return it)
[16:07:40] <blueagain> DF32: by the way, note this implementation won't work if +k[0] is cast to NaN
[16:07:49] <blueagain> n> `0${(+'f')&&''}`
[16:07:49] <jellobot> (okay) '0NaN'
[16:08:20] <blueagain> so you might need to guard against that if your input could potentially contain non-numbers
[16:08:40] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[16:10:15] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:10:43] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[16:11:36] <DPA> In that case, just switch back to ~~
[16:11:36] <DPA> n> `0${~~'f'&&''}`
[16:11:36] <jellobot> (okay) '00'
[16:16:12] <DF32> DPA blueagain thank you for the patience, I understand the && now
[16:17:18] <DF32> it's the && '' that's adding the extra space right? I would have thought it would need to be && ' '
[16:17:43] <DF32> blueagain I'm passing chars to unary, so I will be dealing always with numbers, but thanks
[16:17:48] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[16:20:27] <DF32> nevermind, it's the space between the 2 string templates adding the space
[16:23:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[16:23:19] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[16:23:43] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[16:24:12] <DF32> the '' is just there for that thing of &&, here I was confusing me again lol...
[16:24:41] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:25:01] *** Quits: D4mned (~D1mned@212.101.251.96) (Ping timeout: 246 seconds)
[16:27:04] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[16:27:14] <OnkelTem> Hi. VSCode quick question: in the file comparison view, are there some tools for editing? I mean like copying lines from LTR or vice versa
[16:27:46] *** Joins: hans (uid529825@id-529825.helmsley.irccloud.com)
[16:28:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[16:30:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[16:30:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:30:57] *** Joins: wyclif (~wyclif@user/wyclif)
[16:30:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[16:31:50] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:187d:1335:db91:60e3)
[16:31:54] *** Joins: alystair (~alystair@user/alystair)
[16:33:04] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:35:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[16:36:29] *** Joins: wyclif (~wyclif@user/wyclif)
[16:38:20] *** Joins: pmercado (~pmercado@190.22.73.57)
[16:41:48] <qswz> is it read-only?
[16:43:08] *** Joins: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp)
[16:43:33] <qswz> n> `0${(+'1')&&''}`
[16:43:34] <jellobot> (okay) '0'
[16:43:38] <qswz> n> `0${+'1'&&''}`
[16:43:39] <jellobot> (okay) '0'
[16:43:57] <qswz> + higher than &&
[16:44:06] <qswz> n> `0${+'0'&&''}`
[16:44:06] <jellobot> (okay) '00'
[16:45:02] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 240 seconds)
[16:45:14] <blueagain> && is very low on precedence
[16:45:28] <DF32> lol, just noticed now jellobot is a bot. Thought it was some guy repeating stuff
[16:45:44] *** Joins: D4mned (~D1mned@212.101.251.96)
[16:45:49] <qswz> ternary's even lower
[16:46:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[16:46:39] <DF32> qswz sorry, what do you mean by "higher than". Isn't + converting to number?
[16:46:55] <blueagain> he means the operator precedence
[16:47:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:48:04] <blueagain> `+'1'&&''` means `(+'1')&&''` and not `+('1'&&'')`
[16:48:14] <DF32> ohh okok
[16:48:55] <DF32> got it, + has higher precedence
[16:50:32] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[16:51:38] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[16:52:08] *** Joins: jamea (~jamea@177.239.82.103)
[16:53:30] *** Joins: i0e (~is0ke3@user/is0ke3)
[16:57:27] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 260 seconds)
[16:58:37] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[16:59:28] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:00:02] *** Quits: qswz (~caub@89-80-20-125.abo.bbox.fr) (Quit: leaving)
[17:00:22] <ProfSimm> what's the most performant way to combine "function" and "state" in modern JS engines?    1) function with closed over state  2) object with method and properties  3) a function you pass a state object to
[17:02:08] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:06:48] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[17:07:11] <austincheney> ProfSimm, here is how I do it:  https://github.com/prettydiff/wisdom/blob/master/state_management.md
[17:07:22] <austincheney> but my approach is very un-frameworkish
[17:08:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:08:59] <ProfSimm> austincheney: I don't undestan
[17:09:04] *** Quits: gulzar (~gulzar@49.206.240.149) (Quit: Client closed)
[17:09:18] <austincheney> to save a network request I dump my state artifact into the page so its there in the intitial HTTP response.  You can add it to the page as a script tag content, comment, or value on hidden input element.
[17:10:36] <austincheney> In chrome I am able to load the page in about 150ms which includes full state restoration of what looks like an OS GUI
[17:11:25] *** Joins: Jasen (~jasen@1.202.162.11)
[17:12:51] <Maxdamantus> ProfSimm: why do you actually want to combine them? Are you specifically trying to achieve dynamic dispatch?
[17:13:35] <DPA> I don't know, but I would expect 1 to be the fastest. It won't have to consider any object prototypes and the likes, and I suspect it may increase the chance that it can hit the cpu caches too. But it may not be very practical in some cases. And it probably won't be the bottleneck either.
[17:13:55] <Maxdamantus> ProfSimm: if not, I imagine it would be more performant to keep them separate, so function calls can be statically resolved (so the implementation can decide to inline things, or figure out various assumptions around/within calls).
[17:14:43] *** Joins: l__q (~modinfo@user/modinfo)
[17:15:02] <blueagain> doesn't this question mostly depend on the specific implementing engine
[17:15:51] <ProfSimm> austincheney: ah i see. I do the same, that's a good approach. My question is more low-level though. Not app state, but object state.
[17:16:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[17:16:11] <ProfSimm> Maxdamantus: I need the function to see its state yes
[17:16:21] <Maxdamantus> Maybe what I'm describing is 3), not sure.
[17:16:39] <ProfSimm> Maxdamantus: I benched
[17:16:55] <ProfSimm> Maxdamantus: anything with a prototype is vastly slower, including the class syntax
[17:16:58] <Maxdamantus> ProfSimm: what I'm talking about is `f(o, x)` rather than `o.f(x)`
[17:17:20] <ProfSimm> Maxdamantus: closure and object literal with assigned function as method (where you use this) are equivalent, with the object literal winning slightly
[17:17:27] <ProfSimm> Maxdamantus: yes
[17:17:32] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715)
[17:17:42] <blueagain> ProfSimm: if you already benched... why are you asking?
[17:18:05] <ProfSimm> Maxdamantus: I've not tested f(o, x) but I presume it'll be the same, I'll test now "this" is just an implicit param
[17:18:12] <ProfSimm> blueagain: I benched after I asked
[17:18:18] <blueagain> oh
[17:19:26] <blueagain> Maxdamantus: do you actually have a case where this matters, or is it theoretical?
[17:19:27] <austincheney> ProfSimm, the reason why prototypes/classes are slower in microbenchmarks is scope precedence.  In order to resolve a reference the JS engine will traverse the scope chain to find where the reference is declared.  Once the scope chain is exhausted it will then traverse the prototype chain.
[17:19:35] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:19:59] <Maxdamantus> blueagain: no, it's just theoretical. Static dispatch is theoretically easier to optimise than dynamic dispatch.
[17:20:02] <blueagain> sorry, wrong ping, I meant ProfSimm
[17:20:16] <blueagain> yup
[17:21:56] <Maxdamantus> When using dynamic dispatch (the usual pattern in JS), it's just a matter of how well the JS implementation does at statically resolving function calls, which I'm sure it can do in some cases, in which case they should be basically equivalent.
[17:22:17] <Maxdamantus> Though I'm certain that it won't know in all cases.
[17:25:18] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[17:25:40] *** Quits: Jasen (~jasen@1.202.162.11) ()
[17:26:11] <ProfSimm> Maxdamantus: I just thought some optimization is done there, in fact there has to be
[17:26:14] <ProfSimm> Maxdamantus: but not enough
[17:26:44] <ProfSimm> Maxdamantus: also obj.method(obj) where method is an arrow function is slightly faster than obj.method() where method is a normal function /receiving this/
[17:26:54] <ProfSimm> Maxdamantus: so apparently it's like that..
[17:27:58] <ProfSimm> Maxdamantus: fastest code is   state.arrow(state) :)
[17:28:19] <Maxdamantus> Where `state.arrow` is the same function for each `state` object?
[17:29:35] <Maxdamantus> (ie, so you can just have `arrow` as a static function and call `arrow(state);` instead)
[17:30:51] <ProfSimm> Maxdamantus: yes
[17:31:29] <ProfSimm> Maxdamantus: in Firefox using "this" i.e. old-school function + state.func(); is drastically slower than arrow + argument
[17:31:39] <ProfSimm> Maxdamantus: Chrome is midlly slower with this
[17:31:44] <ProfSimm> So it's been settled folks.
[17:32:15] <ProfSimm> 1) don't use prototypes and constructors, use object literals in factories  2) avoid old-school functions and this, use arrow functions and arguments
[17:32:24] <Maxdamantus> What does your test code look like?
[17:32:37] <ProfSimm> Well, sh*t I closed the window
[17:33:03] <ProfSimm> Maxdamantus: basically an object literal with a = 1 b = 2 c = 3 d = 4, function e which sums them and assigns the result to d
[17:33:08] <blueagain> ProfSimm: I don't really see the end goal here. If the browsers change their implementation, which is they are likely to do at some point, your results become irrelevant
[17:34:04] <blueagain> better to write correct, clear code and improve perf on a demonstrable case basis
[17:34:05] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:34:05] <ProfSimm> blueagain: browsers have been at it for years now, it's been a billion dollars war for performance. Do I think performance changes in time etc.? Yes. But would it drastically change these results in respect to one another? I doubt
[17:34:32] <ProfSimm> blueagain: luckily I always preferred object literals and arrow methods
[17:34:35] <Maxdamantus> Hm. I think you'd need a more elaborate test than that, since with simple cases it's relatively easy for the implementation to figure out everything that's going on, and then the measured differences might not be related to the thing you're actually trying to test.
[17:34:53] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:35:20] <ProfSimm> Maxdamantus: it's true, this is why i include them in operations like summing. But it's harder for JS to optimize things like C would, because C is static
[17:36:02] <ProfSimm> Maxdamantus: the only unfortunate thing from those tests for me is that "classic" functions and "this' are so slow in FFox
[17:36:08] <ProfSimm> Chrome deals with this waaay better
[17:36:56] <Maxdamantus> Also, your way won't necessarily be faster than prototypes. It could easily be faster when you've only got one function, since you're just storing an extra single reference to that function per object, but if you've got 10 functions, that's 10 extra references stored per object, rather than one reference to a prototype.
[17:36:58] <ProfSimm> blueagain: I'm writing a parser in JS, and currently it's recursive, and the stack blows after 10k+ nestings
[17:37:16] <ProfSimm> blueagain: so I need to refactor it with explicit stack of frames, so i need to know what to make the frames, so now I know
[17:37:33] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:37:52] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:38:06] <ProfSimm> Maxdamantus: you have a point. But I tested with 1 function because I'll have one function in my case
[17:38:37] <Maxdamantus> And again, when accessing a function through a prototype, it could easily be faster for 1 function, since you only do one lookup on the `state` object rather than a prototype lookup on the `state` object then a function lookup on the prototype object, but when you've got multiple functions, you'll probably get more benefits from memory locality within the prototype object.
[17:39:15] <Maxdamantus> ie, continually accessing the same 10 properties from the same prototype object, rather than accessing 10 properties from lots of different objects.
[17:39:41] <ProfSimm> Maxdamantus: tbh I'm not sure either improves locality.
[17:39:56] <ProfSimm> Maxdamantus: JS and Java are extremely fragmented heaps, as we know.
[17:40:47] <Maxdamantus> anyway, need to go to bed. 'night.
[17:40:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[17:41:04] *** Joins: aswsd (~helpme8@user/hlpme)
[17:42:07] *** Joins: wyclif (~wyclif@user/wyclif)
[17:43:02] *** Joins: rewrit3 (~rewrit3@user/rewrit3)
[17:44:07] *** Joins: pulse (~pulse@user/pulse)
[17:45:58] <ProfSimm> Maxdamantus: night
[17:47:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[17:47:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[17:47:46] *** Joins: wyclif (~wyclif@user/wyclif)
[17:48:10] <blueagain> ProfSimm: no tail recursion possible?
[17:48:28] *** Joins: dan01 (~dan01@2a02:2f09:360d:2e00:b015:3d2c:aba1:e095)
[17:50:14] <ProfSimm> blueagain: they added it in the ECMAScript standard, then there was a fight among the vendors and now only Safari has TCO
[17:50:31] <ProfSimm> blueagain: so unfortunately gotta roll my own
[17:50:33] *** Joins: i0e (~is0ke3@user/is0ke3)
[17:50:38] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 272 seconds)
[17:51:43] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[17:51:45] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[17:52:21] <ProfSimm> I'm very surprised that using "this" is a slowdown
[17:52:23] *** Joins: client-side96 (~client-si@dslb-002-207-024-216.002.207.pools.vodafone-ip.de)
[17:52:27] <ProfSimm> I mean it's just an implicit argument, wtf
[17:52:32] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[17:52:55] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[17:53:18] *** Joins: wyclif (~wyclif@user/wyclif)
[17:54:31] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[17:56:20] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 272 seconds)
[17:56:52] *** Joins: voltage_ (voltage@user/voltage)
[17:57:09] <blueagain> I wonder why no one bothers implementing TCO
[17:57:41] *** Quits: client-side96 (~client-si@dslb-002-207-024-216.002.207.pools.vodafone-ip.de) (Quit: client-side96)
[17:57:56] *** Joins: client-side96 (~client-si@dslb-002-207-024-216.002.207.pools.vodafone-ip.de)
[17:59:31] <ProfSimm> blueagain: because it produces undebugable traces
[18:00:04] <ProfSimm> blueagain: this can be fixed.
[18:00:19] <ProfSimm> blueagain: but the vendors were arguing if the syntax should be explicit or not, for TCO
[18:00:30] <ProfSimm> blueagain: I'm fine with explicit, but they didn't agree.
[18:01:53] <blueagain> yeah, the explicit proposal appears dead
[18:02:23] *** Quits: stagas (~stagas@2a02:587:c4b4:ded5:bc9d:8c0d:59b:e05d) (Ping timeout: 252 seconds)
[18:03:18] <ProfSimm> blueagain: I had to implement regex lookbehind manually the other day because Chrome and FF support it, Safari doesn't. Now I need to unroll my stack manually, before Safari has TCO, Chrome and FF don't. Joys of web dev
[18:03:29] <ProfSimm> blueagain: but the web platform is amazingly powerful regardless
[18:03:29] *** Joins: adroitmachine_ (~adroitmac@182.64.104.84)
[18:05:00] *** Joins: bryan- (~bryan@2601:240:e301:5f40::9fd0)
[18:05:57] *** Quits: client-side96 (~client-si@dslb-002-207-024-216.002.207.pools.vodafone-ip.de) (Quit: client-side96)
[18:06:42] <blueagain> ProfSimm: would it be helpful to write some parts of the parser in wasm? the performance-critical ones, that is
[18:08:43] <ProfSimm> blueagain: strategy is 1) prototype everything in TypeScript because it's fun and easy and runs on the web 2) move the runtime to WASM for performance 3) make the parser self-hosted (so it'll run on WASM as well) 4) Use LLVM to make a native runtime.
[18:09:37] *** Joins: mi6x3m (~mi6x3m@user/mi6x3m)
[18:09:39] <blueagain> ProfSimm: sounds good. I'd drop the ts part, but that's personal taste :)
[18:10:00] <mi6x3m> hey, does anyone know if promises are processed in the order they're enqueued?
[18:10:03] <ProfSimm> blueagain: I can't program without writing interfaces
[18:10:18] <ProfSimm> blueagain: it's important in something that deals with token types and expression types too
[18:10:53] <ProfSimm> mi6x3m: there's no order guarantee
[18:11:26] <ProfSimm> mi6x3m: the only way is to daisy chain them, make the next one when the previous is done
[18:11:59] <mi6x3m> ProfSimm, it's what i'm currently doing (writing a firefox plugin) but I started question my sanity and thought the standard requires this
[18:12:15] <ProfSimm> blueagain: you can write some kind of a routine to do it for you, instead of doing it manually.
[18:12:48] <ProfSimm> blueagain:  finalPromise = daisyChainPromises(promiseArray);
[18:13:00] <ProfSimm> Sorry
[18:13:02] *** Joins: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160)
[18:13:03] <ProfSimm> I mean mi6x3m
[18:13:27] <mi6x3m> ProfSimm, I have a 'var queue' with an empty promise and i keep .then-ining to it whenever a request comes in
[18:13:37] <mi6x3m> which afaik is the same, yes
[18:13:51] <ProfSimm> yes
[18:14:19] <blueagain> I have another strategy with interdependent promises, and that is I make sure the input array's entries are independent before I throw them into Promise.all
[18:14:19] <mi6x3m> thanks
[18:14:50] <ProfSimm> blueagain: that's always better when possible
[18:15:43] *** Quits: bryan- (~bryan@2601:240:e301:5f40::9fd0) (Remote host closed the connection)
[18:16:27] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:16:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:16:28] *** Joins: wroathe (~wroathe@user/wroathe)
[18:20:53] *** Quits: jamea (~jamea@177.239.82.103) (Ping timeout: 260 seconds)
[18:21:11] <ProfSimm> I can't understand why the new "class" syntax produces objects that are over 10 times slower than classic ones.
[18:21:11] *** Quits: mi6x3m (~mi6x3m@user/mi6x3m) (Quit: Leaving)
[18:21:45] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:23:55] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[18:25:28] *** Quits: Haxxa (~Haxxa@202-130-210-100.ip4.superloop.com) (Ping timeout: 272 seconds)
[18:25:32] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 260 seconds)
[18:26:07] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 246 seconds)
[18:26:15] *** Quits: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de) (Quit: Lost terminal)
[18:26:41] *** Joins: gurkenglas (~gurkengla@dslb-178-012-018-212.178.012.pools.vodafone-ip.de)
[18:32:05] <blueagain> ProfSimm: where are you getting those results, I just set up a small test, in FF class syntax is 28% slower, in CH classic is 12% slower
[18:32:06] *** Joins: muley (~muley@76-245-68-99.lightspeed.iplsin.sbcglobal.net)
[18:35:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 272 seconds)
[18:36:12] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[18:36:44] <ProfSimm> blueagain: https://pastebin.com/raw/0FDW6mXb
[18:36:46] <ProfSimm> blueagain: https://i.imgur.com/DWy7zgh.jpg
[18:37:14] <banana_> my eyes
[18:37:32] <banana_> why pastebin.com/raw
[18:37:33] <ProfSimm> banana_:  try the goggles
[18:37:41] <banana_> why
[18:37:50] <ProfSimm> banana_: because everyone is complaining about pastebin I thought it's the ads
[18:38:21] <banana_> oh yeah and non /raw is just as bad.
[18:38:40] <banana_> I think hastepin looks better or that other one where you can make revisions
[18:39:05] <banana_> yea im not sure why pastebin is not liked
[18:39:06] *** Joins: Haxxa (~Haxxa@202-65-73-230.ip4.superloop.com)
[18:39:09] <banana_> !pastebin
[18:39:09] <jellobot> banana_, Please paste your code to a site like https://gist.github.com or https://dpaste.org/ (NOT pastebin.com or hastebin), or create a running example: see !fiddle. See also !badpastebin !hastebin !nopaste and !mcve
[18:39:25] <banana_> oh not hastebin either
[18:39:37] <banana_> !badpastebin
[18:39:37] <jellobot> banana_, Don't use pastebin.com, Ads, Spamfilters, Captcha, Adds whitespace, Slow, Ugly, No comment/fork/annotate, Breaks copy/paste, Blocked for some people, etc. See !paste and !fiddle
[18:39:51] <banana_> oh youre right
[18:40:00] <ProfSimm> banana_: about what
[18:40:07] <banana_> the ads
[18:40:19] <banana_> that's a listed reason by jellobot
[18:40:36] <banana_> !hastebin
[18:40:36] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[18:40:36] <jellobot> banana_, Please don't use Hastebin. It has very poor color contrast, and is therefore not readable for people with poor vision.
[18:40:51] *** Quits: bn_mobile (uid278100@id-278100.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[18:41:06] <banana_> !mcve
[18:41:06] <jellobot> banana_, How to create a minimal, complete, and verifiable example https://stackoverflow.com/help/mcve see also !fiddle
[18:42:58] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:43:10] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[18:43:24] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[18:43:27] *** Quits: sa0 (~sa0sin@2a01:e0a:414:b360:99e0:1241:1efc:a160) (Remote host closed the connection)
[18:43:39] *** Joins: sa0 (~sa0sin@88.120.82.205)
[18:44:21] <ProfSimm> Can someone try the CLASS sample and one of the other ones and see if they're so drastically different?
[18:47:57] *** Quits: adroitmachine_ (~adroitmac@182.64.104.84) (Ping timeout: 250 seconds)
[18:49:02] *** Quits: paule32 (~paul@user/paule32) (Quit: Leaving)
[18:50:08] <blueagain> ProfSimm: https://dpaste.org/bR7k
[18:50:16] <blueagain> ProfSimm: these measure almost the same in CH
[18:50:26] <ProfSimm> blueagain: what is CH
[18:50:36] <blueagain> Chromium
[18:50:39] <ProfSimm> ok
[18:50:42] <ProfSimm> blueagain: weird
[18:50:56] <ProfSimm> blueagain: how come to me class is slow both in chrome and firefox
[18:51:01] <blueagain> try it, I used https://jsbench.me/
[18:51:12] <ProfSimm> blueagain: I also used it
[18:51:26] *** Joins: adroitmachine_ (~adroitmac@182.64.104.84)
[18:51:28] <ProfSimm> blueagain: wait. you remove the loop on the methods
[18:51:30] <ProfSimm> blueagain: :P
[18:51:41] <blueagain> exactly
[18:51:55] <ProfSimm> blueagain: I'm not testing instantiation speed
[18:52:47] <blueagain> even with a loop, no big diff
[18:52:58] <ProfSimm> blueagain: this gives me type error
[18:53:00] <ProfSimm> hm
[18:53:14] <blueagain> non-class syntax 30% slower
[18:53:41] <ProfSimm> blueagain: I'm getting type error on the second
[18:53:51] <ProfSimm> I see no problem I don't know
[18:54:12] <blueagain> what type error
[18:54:31] <ProfSimm> Cannot read properties of undefined (reading call)
[18:54:37] <ProfSimm> Annoyingly no stack or line
[18:55:09] <blueagain> I'd send you the jsbench page
[18:55:15] <ProfSimm> no wait
[18:55:18] <blueagain> unfortunately it's annoying to use, you have to reg
[18:55:27] <ProfSimm> I don't wanna reg
[18:55:31] <blueagain> neither do I
[18:56:21] <ProfSimm> blueagain: it was some unicode character between the lines
[18:58:52] <blueagain> i should open a simple local perf comparison site without reg, can't be that hard, what is this mess
[18:59:15] <blueagain> can't copy anything out of it
[19:00:11] *** Joins: d[10] (~d10]@2804:2488:1080:e60:69:ca86:66e:a68e)
[19:00:15] <d[10]> this.data_hoje = new Date(data.data_hoje) || null;
[19:00:24] <d[10]> why it returns date when data.data_hoje = null ?
[19:03:45] *** Joins: EgonX_ (~EgonX@2601:2c6:47f:879e:f869:fc5:ffa:d4c8)
[19:04:08] <blueagain> n> new Date(null)
[19:04:09] <jellobot> (okay) 1970-01-01T00:00:00.000Z
[19:04:26] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:1c69:4995:f8a4:2715) (Ping timeout: 260 seconds)
[19:04:36] <blueagain> n> new Date(null) || "else"
[19:04:36] <jellobot> (okay) 1970-01-01T00:00:00.000Z
[19:04:49] <d[10]> blueagain ok thanks
[19:04:53] <d[10]> is not null
[19:05:18] <d[10]> bot cool
[19:05:30] <blueagain> d[10]: I don't think the Date constructor ever returns `null`
[19:05:31] <d[10]> n> new Date(2002,3,30)
[19:05:32] <jellobot> (okay) 2002-04-30T00:00:00.000Z
[19:06:02] <blueagain> n> new Date(NaN)
[19:06:02] <jellobot> (okay) Invalid Date
[19:06:16] <blueagain> n> typeof new Date(NaN) === "string"
[19:06:16] <jellobot> (okay) false
[19:06:32] <blueagain> oh
[19:06:36] <blueagain> n> typeof new Date(NaN) === "object"
[19:06:36] <jellobot> (okay) true
[19:07:25] <pupskuchen> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/Date#return_value
[19:07:44] <blueagain> n> new Date(NaN) instanceof Date
[19:07:45] <jellobot> (okay) true
[19:07:46] <ProfSimm> blueagain: I added an example without prototype and it's like 30 times faster
[19:07:49] <ljharb> blueagain: it's impossible
[19:08:01] <ljharb> blueagain: which is why all the free ones started requiring registration, because spam
[19:08:10] <ljharb> blueagain: you can't have nice things and also be privacy conscious
[19:08:16] *** Quits: EgonX_ (~EgonX@2601:2c6:47f:879e:f869:fc5:ffa:d4c8) (Client Quit)
[19:08:39] <blueagain> ljharb: but why? there are free paste bins, why not free perf bins
[19:09:49] *** Joins: doug16k (~doug16k@172-97-188-4.cpe.distributel.net)
[19:09:52] *** Quits: adroitmachine_ (~adroitmac@182.64.104.84) (Ping timeout: 246 seconds)
[19:10:34] <ProfSimm> blueagain: most likely perf is a smaller niche thing and cant make money with it
[19:11:02] <doug16k> what do you think should happen if you do this: '123 test st - unit 4 - lot 1'.split(/(((?<=\D)(?=\d))|(?<=\d)(?=\D))/)
[19:11:13] *** Quits: undefined_bob (~undefined@user/undefined-bob/x-5411918) (Quit: WeeChat 1.5)
[19:12:13] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:187d:1335:db91:60e3) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:12:34] <d[10]> lol
[19:12:35] <doug16k> I am asking too much right? lol
[19:12:36] <d[10]> ;S
[19:12:39] <ProfSimm> blueagain: when i added one of the examples without prototype, the prototype/class ones became "97% slower"
[19:13:06] *** Joins: EgonX (~EgonX@2601:2c6:47f:879e:388c:9712:1d29:b183)
[19:13:11] *** Quits: hax (~hax@user/hax) (Ping timeout: 260 seconds)
[19:13:20] *** Quits: cotko (~cotko@89-212-138-82.static.t-2.net) (Quit: Konversation terminated!)
[19:13:41] <blueagain> ProfSimm: I guess there are costs to climbing up the prototype chain, short though it may be in this case
[19:14:00] <ljharb> blueagain: a) the free pastebins almost all suck, and b) because perf bins objectively have been misused more, not sure what to tell you
[19:14:10] <ljharb> but also, microbenchmarking is a toy. nobody should ever make a real coding decision based on it.
[19:14:14] <blueagain> ljharb: though... there's no real climbing up going there, so I don'tknow
[19:14:24] <ljharb> performance is impossible to measure properly outside the entire application.
[19:14:34] <blueagain> ljharb: the bot recommends dpaste, it's nice...
[19:14:45] <doug16k> you can do 60 fps on 100 elements in js, easy. if your code can't, it's bad
[19:14:50] <ProfSimm> blueagain: it's nuts.
[19:15:03] <ProfSimm> blueagain: I mean I'll never use a damn class/prototype again
[19:15:18] <blueagain> ljharb: I generally 100% agree about perf. I just think it'd be nice if you could easily share perf results, it would make this conversation here much more productive (assuming there's a desireable goal here)
[19:16:55] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[19:17:24] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[19:17:46] <blueagain> ProfSimm: maybe this is relevant for a parser, but if your end goal is performance, then working with low-level languages like C/C++ is anyway the way to go
[19:17:57] *** Joins: wyclif (~wyclif@user/wyclif)
[19:18:01] <ProfSimm> blueagain: I can't run C in the browser
[19:18:02] <blueagain> not sure js is the right tool here
[19:18:17] <blueagain> why do have to run your parser in the browser?
[19:18:18] <doug16k> ProfSimm, you can techniocally
[19:18:24] <ProfSimm> Yes yes
[19:18:26] <ProfSimm> WASM
[19:18:29] <blueagain> also, wasm, yes
[19:18:38] <ProfSimm> JS is not slow
[19:18:46] <ProfSimm> It's just prototypes that are oddly slow
[19:19:18] <doug16k> there is a first time penalty at each call site for a method call
[19:19:49] <doug16k> next time it fast paths that type, and if it is wrong, it makes a switch case dispatcher thing there
[19:19:56] <blueagain> not sure performance was one of the main design goals of js
[19:20:09] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:20:42] *** Joins: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[19:21:01] <doug16k> if you have all kinds of different duck types that have that prototype, they look like piles of different types to the JIT
[19:21:06] <ljharb> blueagain: that presumes that it's actually productive to use performance as a persuasion point in an argument about code, which it shouldn't ever be
[19:21:14] <doug16k> you could be causing it
[19:21:16] <ljharb> blueagain: performance is the least important thing
[19:22:09] <blueagain> ljharb: again, I agree. I still see at least some didactic value here; and at the least, you could use such a tool to detect issues in implementations
[19:22:11] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[19:23:06] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 272 seconds)
[19:23:18] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:23:42] *** Joins: wyclif (~wyclif@user/wyclif)
[19:23:56] <doug16k> you can do little things that seem unimportant, like setting every property, that make the JIT have to deal with fewer types at each call site
[19:24:48] <doug16k> setting every property when creating objects I mean
[19:24:59] <ljharb> blueagain: i think the existence of those kinds of tools is more harmful than the absence of them, tbh
[19:25:09] <doug16k> don't just slop around half assed partially undefined stuff then expect it to be fast
[19:26:26] <ashnur> someone please explain to me how the srcdoc iframe trick works
[19:26:48] <blueagain> ljharb: fair enough
[19:27:40] <ashnur> this https://codepen.io/chriscoyier/pen/GRKZryx
[19:27:43] <ashnur> how does it work?
[19:28:12] <doug16k> don't make the JIT play drinking games where they have to drink every time the mix of properties changes on the object at a call site
[19:28:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[19:29:13] *** Joins: wyclif (~wyclif@user/wyclif)
[19:30:00] *** Quits: cinderblock (~cinderblo@firefly.isozilla.com) (Quit: kthxbai!)
[19:30:53] *** Joins: cinderblock (~cinderblo@firefly.isozilla.com)
[19:31:56] <ProfSimm> blueagain: can yuou confirm a no-proto sample is much faster for you?
[19:31:58] <ProfSimm> blueagain: plz
[19:32:13] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 240 seconds)
[19:34:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[19:34:30] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[19:34:43] *** Joins: wyclif (~wyclif@user/wyclif)
[19:34:47] *** Quits: hans (uid529825@id-529825.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[19:36:20] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[19:36:27] <blueagain> ProfSimm: yup
[19:37:15] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[19:38:58] <ashnur> can I ask something? https://www.screwfix.com/help/mobileapps/ if you click play on any of the videos, does it start to play? and if you check it in mobile view, do you have to click twice for the video to start?
[19:39:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[19:40:19] *** Joins: wyclif (~wyclif@user/wyclif)
[19:41:50] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) (Read error: Connection reset by peer)
[19:43:48] *** Joins: jamea (~jamea@10.189-202-213.bestelclientes.com.mx)
[19:43:55] *** Quits: kakashiA1 (~kakashi@ip-037-201-198-071.um10.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[19:44:23] *** Joins: prometh (uid425119@id-425119.ilkley.irccloud.com)
[19:44:25] *** Quits: dan01 (~dan01@2a02:2f09:360d:2e00:b015:3d2c:aba1:e095) (Read error: Connection reset by peer)
[19:44:38] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Ping timeout: 272 seconds)
[19:45:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[19:45:37] *** Joins: rawley (~rawley@142.99.241.242)
[19:45:53] *** Joins: wyclif (~wyclif@user/wyclif)
[19:48:53] *** Joins: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net)
[19:56:35] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[19:56:54] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Remote host closed the connection)
[19:57:11] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[19:58:02] *** Joins: MRDPZK (~MRDPZK@d205-250-152-220.bchsia.telus.net)
[19:58:06] *** Quits: csm3105 (~csm3105@143.red-83-48-84.staticip.rima-tde.net) (Quit: Leaving)
[19:58:25] *** Joins: i0e (~is0ke3@user/is0ke3)
[19:59:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:00:08] *** Quits: MRDPZK (~MRDPZK@d205-250-152-220.bchsia.telus.net) (Client Quit)
[20:02:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:02:33] <doug16k> ashnur, have to click them twice
[20:02:52] <doug16k> ^ on my desktop
[20:03:06] <doug16k> no mobile view involved
[20:03:41] <doug16k> first click changes something, seems youtube wants another click
[20:05:15] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[20:05:27] <teresko> wat
[20:06:29] <ashnur> thanks
[20:06:46] <ashnur> yeah, it's a hack so lighthouse shows nice numbers, iframe is not loaded until you click
[20:06:50] <ashnur> genius, right?
[20:07:05] <ashnur> interestingly, it works for me on desktop, but apparently only me :D
[20:07:19] <doug16k> yeah, fun how we make the page not have content and not work as optimization
[20:07:39] <ashnur> lol
[20:09:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:12:00] <rick123> If there's any React guru out there, whats the difference between render and createPortal except the event propagation ?
[20:12:07] <doug16k> ashnur, try it in an incognito window
[20:13:20] *** Joins: avacado_toast (~avacado_t@204.111.207.135)
[20:14:50] *** Joins: bambanxx (~bambanx@190.162.68.107)
[20:16:01] <doug16k> rick123, I guessed createPortal shares internal stuff and render shares less but I don't know
[20:16:02] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 252 seconds)
[20:16:12] <ashnur> seems like it was working because I had it muted
[20:17:09] *** Parts: avacado_toast (~avacado_t@204.111.207.135) ()
[20:17:52] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:18:50] *** Quits: nulixes (~Thunderbi@gateway/vpn/pia/nulixes) (Ping timeout: 272 seconds)
[20:21:49] *** Joins: l__q (~modinfo@user/modinfo)
[20:22:08] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:22:39] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:23:43] *** Joins: kakashiA1 (~kakashi@37.84.2.12)
[20:23:55] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:24:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:29:18] *** Joins: CalamityBlue (~CalamityB@user/CalamityBlue)
[20:30:53] *** Quits: CiaoSen (~Jura@p200300c95735b0002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[20:34:32] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[20:34:41] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Client Quit)
[20:35:14] *** Joins: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net)
[20:35:48] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:37:22] *** Quits: mat001 (~mat001@c-71-202-208-66.hsd1.ca.comcast.net) (Read error: Connection reset by peer)
[20:38:00] *** Joins: mat001 (~mat001@72.28.108.216)
[20:39:10] *** Joins: comatory (~ondrejsyn@217.11.241.69)
[20:41:30] *** Joins: arthur_melo (~IRC@user/arthur-melo/x-6822691)
[20:45:19] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:45:48] *** Quits: Booster2ooo (~Booster2o@user/booster2ooo) (Read error: Connection reset by peer)
[20:45:59] *** Joins: suss (~user@user/suss)
[20:46:18] *** Quits: nomic (~nomic@185.217.117.233) (Quit: Leaving)
[20:48:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[20:48:53] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu)
[20:51:46] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[20:52:41] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[20:53:03] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:53:20] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Read error: Connection reset by peer)
[20:54:55] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[20:54:58] *** Quits: dave0 (~dave0@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:55:55] *** Joins: alystair (~alystair@user/alystair)
[20:56:24] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[20:57:15] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:29b4:5494:e5f8:bfa:fded) (Remote host closed the connection)
[20:58:39] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[20:59:30] *** Quits: aswsd (~helpme8@user/hlpme) (Read error: Connection reset by peer)
[21:00:12] *** Quits: VoidSync (~sync@user/voidsync) (Remote host closed the connection)
[21:00:26] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:01:09] *** Joins: N4buc0 (~N4buc0@189.115.86.130)
[21:02:18] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[21:02:48] *** Joins: sheetjs (~sheetjs@user/sheetjs)
[21:05:56] *** Quits: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Quit: taupiqueur)
[21:06:51] *** Quits: average (~average@user/average) (Ping timeout: 250 seconds)
[21:07:33] <OnkelTem> Hi folks. I'm developing a package which processes files. But the processing involves writing custom javascript.
[21:07:49] *** Quits: jsmooth (~quassel@user/jsmooth) (Quit: jsmooth)
[21:07:57] <OnkelTem> This is an example of how it's structured: https://i.imgur.com/viJOSQ7.png
[21:08:30] <OnkelTem> acmaker - is the tool I'm working on. I wonder: how can I include javascript from the custom instances?
[21:09:02] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 260 seconds)
[21:09:26] <OnkelTem> You see, the processing is performed inside 'acmaker' tool. And I need somehow to use javascript from specific project (example1, example2)
[21:10:03] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[21:10:13] <OnkelTem> I guess eval is not the best option, is it?
[21:10:23] *** Quits: bambanxx (~bambanx@190.162.68.107) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:10:26] *** Quits: comatory (~ondrejsyn@217.11.241.69) (Ping timeout: 260 seconds)
[21:10:30] *** Joins: voltage (voltage@user/voltage)
[21:10:42] *** Joins: stagas (~stagas@2a02:587:c4b4:ded5:72f:e3da:86f4:83b)
[21:11:27] <austincheney> OnkelTem, I too am working on a file system application in JavaScript.  The application presents an OS-like GUI in the browser and allows full file system interaction.  I am working on rewriting the file copy part of it and working on routing in accordance with the applications security model, because it allows sharing of the file system to remote users across the internet.
[21:11:28] *** Joins: Alex123 (~Adium@cpe-76-89-231-189.socal.res.rr.com)
[21:12:05] <austincheney> OnkelTem, I recommend you do all your file system work using Node, because there is a file system API in the browser now but it isn't mature.
[21:12:18] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:12:27] <OnkelTem> Oh, I should have said from the beginnig: it's 100% node js app!
[21:13:04] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 246 seconds)
[21:14:03] *** Quits: voltage_ (voltage@user/voltage) (Ping timeout: 260 seconds)
[21:14:07] <sheetjs> OnkelTem: process files?
[21:14:13] <austincheney> OnkelTem, here is how I am processing file system interaction https://github.com/prettydiff/share-file-systems/blob/http2/lib/terminal/server/services/fileSystem.ts#L41-L337
[21:14:19] *** Joins: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea)
[21:18:24] *** Joins: l__q (~modinfo@user/modinfo)
[21:19:12] *** Quits: l__q (~modinfo@user/modinfo) (Client Quit)
[21:19:33] <austincheney> OnkelTem, does that code sample answer your questions?
[21:19:39] *** Quits: ruzu (~ruzu@107-179-252-71.cpe.teksavvy.com) (Ping timeout: 260 seconds)
[21:20:00] *** Joins: l__q (~modinfo@user/modinfo)
[21:20:08] *** Joins: JustAProgrammer (~JustAProg@c1-3c-zen-5.hntvl.zs.ncren.net)
[21:20:09] *** Joins: Naan (~Naan@user/naan)
[21:20:12] <OnkelTem> austincheney:  not sure, colleague!
[21:20:30] <OnkelTem> sheetjs: hi! I process books into their audio versions. Each book may have different structure. That's why I need some javascript code.
[21:20:51] <OnkelTem> it helps with converting book into the format used by the main tool - acmaker
[21:20:58] *** Quits: JustAProgrammer (~JustAProg@c1-3c-zen-5.hntvl.zs.ncren.net) (Client Quit)
[21:21:07] *** Joins: mexijoe (~mexijoe@66.sub-174-204-194.myvzw.com)
[21:21:16] <OnkelTem> and that format is good for TTS processing
[21:22:27] <OnkelTem> Acmaker includes executable script. It should somehow "know" which data is avaialable for "processing" for what it has to include the custom javascript code from those projects.
[21:22:38] <OnkelTem> Maybe my phrasing is awful, don't blame me :)
[21:23:13] <OnkelTem> austincheney: basically, it's a problem of discovering plugins I guess
[21:23:27] <sheetjs> so for example, sheetjs processes spreadsheet files.  there's some logic to determine which type of file you are dealing with and some logic for parsing for each file type
[21:24:11] <OnkelTem> yeah, now imagine that you always deal with an Unknown file format and need to write some convertor to make it known for the main tooling
[21:24:30] <sheetjs> in 2022, you'd probably structure it with a generic registry.  each type module would provide a method to determine whether the file is of the type and a function to parse data
[21:24:32] <OnkelTem> so you'll run into the problem of discovery those converters
[21:24:52] <sheetjs> statically, at least that'll be the only way to play nice with ESM
[21:25:12] <sheetjs> if you are doing it in node, you can stick everything in a subfolder and readdirSync -> require
[21:25:44] <sheetjs> plugins/ ... and your main module would just scan the plugins folder and require every module
[21:25:59] <sheetjs> this notoriously does not work with ESM
[21:26:22] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[21:26:31] <OnkelTem> wow, I remind this scanning was blamed, at least in PHP, but the reasons are common heh
[21:26:50] <sheetjs> it's an easy approach
[21:27:06] <sheetjs> another way is to store a list of plugins and have you main process require them
[21:27:13] <OnkelTem> yeah
[21:27:36] <sheetjs> and a third approach (friendly with bundlers) is to hardcode the list
[21:28:12] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:29:20] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[21:29:50] <ProfSimm> blueagain: wondering if you checked speed of no-proto version
[21:31:19] <ljharb> mexijoe: you need to auth with nickserv for non-ops to see what you say
[21:31:26] <ljharb> mexijoe: see the last link in the topic
[21:31:33] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 250 seconds)
[21:32:10] *** Quits: mexen (uid495612@user/mexen) (Quit: Connection closed for inactivity)
[21:32:42] *** Joins: jargon (~jargon@184.101.173.186)
[21:33:38] <mexijoe>  how do u get a navbar to match on both desktop and mobile on my phone the navbar goes off screen
[21:34:14] <ljharb> that's more of an html and css question, you don't need js for that
[21:34:50] <mexijoe> ok
[21:35:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 260 seconds)
[21:35:43] *** Quits: alystair (~alystair@user/alystair) (Ping timeout: 260 seconds)
[21:36:13] <OnkelTem> sheetjs: so there is not way to import dynamically in ESM even with the modern node? and with dynamic imports?
[21:36:35] *** Quits: EgonX (~EgonX@2601:2c6:47f:879e:388c:9712:1d29:b183) (Quit: Textual IRC Client: www.textualapp.com)
[21:36:47] <NoiseEee> anyone used a graphics manipulation library that works in both browser and with Node?  I had been using Caman for a long time... it's perfect, but doesn't play nice with new versions of Node (dependencies) and isn't maintained any longer
[21:37:05] <ljharb> OnkelTem: `import()` is the way to import dynamically
[21:37:30] <ljharb> OnkelTem: but "import dynamically" doesn't mean "dynamically determine what the filename is", it means "you don't have to hardcode the filename in the import statement"
[21:37:34] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:37:41] <ljharb> OnkelTem: you can definitely use fs methods to read a directory and then `import()` those.
[21:37:54] <OnkelTem> cool then! thanks
[21:37:55] <ljharb> what sheetjs probably means is that in ESM, you can't do it synchronously
[21:38:02] <ljharb> OnkelTem: but, you shouldn't be using native ESM. use babel.
[21:38:17] <OnkelTem> I use ESM but then convert it to normal js yeah
[21:38:21] <OnkelTem> normal js LOL
[21:38:54] <ProfSimm> I have a new rule: never export constructors from modules, only factories. "new" should not be part of any library's API
[21:40:02] <stagas> ProfSimm: why?
[21:40:08] <ljharb> ProfSimm: while that's true, `new` is still part of that api if your factory uses it
[21:40:29] <ProfSimm> ljharb: it's part of the implementation, but not the interface
[21:40:30] <ljharb> iow, don't use `new` anywhere you can avoid it, classes are terrible
[21:40:34] <ljharb> ProfSimm: right, and that's still bad
[21:40:46] <stagas> the constructor is a factory with syntactic sugar
[21:40:56] <ProfSimm> stagas: there's a difference.
[21:41:11] *** Joins: EgonX (~EgonX@c-73-115-70-244.hsd1.tx.comcast.net)
[21:41:13] <ProfSimm> stagas: the factory can return an object literal, instead of a prototype instance
[21:41:23] <ashnur> literally a literal?
[21:41:30] <ProfSimm> And for some reason, prototypes are very slow.
[21:41:35] <ashnur> wut
[21:41:46] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 246 seconds)
[21:41:46] <ashnur> compared to what, when, doing what
[21:43:19] <ljharb> prototypes are historically fast, but performance isn't important
[21:43:33] <ProfSimm> Historically fast. But presently slow.
[21:43:33] <ljharb> `new` and `this` is best avoided because shared mutable state is toxic
[21:43:37] <ProfSimm> Been benching it all day
[21:43:40] *** Joins: vysn (~vysn@user/vysn)
[21:43:48] <ljharb> whether your users type `new` in their code or not is irrelevant to whether it's got shared mutable state
[21:44:09] <ProfSimm> ljharb: but it's relevant to whether it's an object literal or a proto instance
[21:44:18] <ljharb> ProfSimm: sure
[21:44:30] <ProfSimm> ljharb: also factory allows returning same class with different arguments and so on
[21:44:34] <ljharb> but you wouldn't have a constructor in the first place if it was an object literal
[21:44:40] <ljharb> ProfSimm: right but if it's a class *at all* then you have the same hazards
[21:44:46] <ProfSimm> ljharb: well the factory is the constructor then
[21:44:46] <ljharb> "they don't have to use `new`" isn't actually valuable
[21:45:02] <ljharb> the factory is making something, but "constructor" isn't a generic word here
[21:45:09] <ljharb> a function that returns an object literal isn't a constructor, full stop
[21:45:20] <ProfSimm> ljharb: it is because constructor's name is a static dependence
[21:45:44] <ProfSimm> ljharb: full stop full stop
[21:45:44] <ljharb> i have no idea what you mean
[21:45:49] <ProfSimm> ljharb: ellipsis :P
[21:45:52] <ljharb> the `.name` of a constructor isn't even guaranteed to be present
[21:46:00] <ljharb> an ellipsis has three dots :-p
[21:46:08] <ljharb> and isn't actually three `.`, it's `…`, a separate character.
[21:46:10] <ProfSimm> ljharb: yes you did the first dot
[21:46:22] <ljharb> `...` is not an ellipsis. `…` is.
[21:46:37] <ProfSimm> Both are an ellipsis, the second is a single character
[21:46:46] <ProfSimm> Let's argue about something else :P
[21:47:21] <ljharb> lol k
[21:47:27] <ProfSimm> ljharb: I didn't mean ".name" I mean function ClassNAme() {}  <-- ClassName is a static dependency
[21:47:35] <ljharb> i don't know what that means
[21:47:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[21:47:46] <ljharb> you can do `var x = function ClassName() {}` and refer to it by `x`?
[21:48:07] *** Joins: taupiqueur (~taupiqueu@68.104.204.77.rev.sfr.net)
[21:48:18] <ljharb> what is a "static dependency" in a code context? dependencies are something npm manages.
[21:48:25] <ProfSimm> ljharb: this is a problem when you have an interface and a factory that returns 10 different implementations of that interface. If you have no factory you need to write 10 classes. While actually you could have used decorators and so on to implement those 10 interfaces with fewer classes
[21:48:39] <ProfSimm> ljharb: you can also conditionally pick classes based on aruments with a factory
[21:49:14] <ProfSimm> ljharb: basically exposing a class even if you use it is not great
[21:49:23] <ProfSimm> ljharb: and with object literals you may not even use it
[21:49:24] <ljharb> ProfSimm: you don't need classes for any of that
[21:49:28] <ljharb> you can have 10 functions
[21:49:43] <ProfSimm> ljharb: yes that's... a factory :) A function that returns an object
[21:49:48] <ljharb> but also talking about "an interface" and "a factory" really suggests you're writing java
[21:49:58] <ljharb> there's no need to be so attached to terms and patterns
[21:49:59] <ProfSimm> ljharb: those are C++ patterns
[21:49:59] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:50:03] <ljharb> ok, C++ then
[21:50:07] <ProfSimm> ljharb: they still apply
[21:50:13] <ljharb> C++ devs write crappy JS code until they forget about C++
[21:50:15] *** Joins: zebrag (~chris@user/zebrag)
[21:50:24] <ljharb> the terms apply but the mental models you bring with you very much do not
[21:50:31] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:50:35] <ProfSimm> ljharb: of course they do.
[21:50:42] <ljharb> there exists ZERO things for which classes or interfaces are necessary. just things you could use them with.
[21:50:46] <ljharb> no, they definitely don't.
[21:50:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 246 seconds)
[21:50:53] <ProfSimm> ljharb: if you have two objects with same function arguments and outputs and behavior, what do they share?
[21:50:58] <ProfSimm> ljharb: their interface
[21:51:05] <stagas> ProfSimm: i get what you mean. you can replace a factory with a strategy and the rest of the code doesn't need to change, it's still using the same factory, where if you used a class, now you'd have to change them all to a factory that returns the instance, yes?
[21:51:07] <ljharb> sure, that's technically true, but in practice a meaningless thing to describe
[21:51:12] <ljharb> we're not in a university class
[21:51:19] <ProfSimm> ljharb: it's very meaningful
[21:51:28] <ProfSimm> ljharb: without it, polymorphism makes no sense
[21:51:35] *** Quits: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:51:57] *** Joins: wyclif (~wyclif@user/wyclif)
[21:52:05] <blueagain> ProfSimm: I did
[21:52:17] <ProfSimm> ljharb: I have for example OutputWriter interface. Things write output to it. One implementation is just a string builder.
[21:52:29] <ProfSimm> ljharb: it implements the OutputWriter interface, how else am I gonna say it
[21:52:30] <ljharb> so many nouns
[21:52:32] <ljharb> !nouns @ ProfSimm
[21:52:33] <jellobot> ProfSimm, In JavaScript, verbs are equally important as nouns. http://steve-yegge.blogspot.com/2006/03/execution-in-kingdom-of-nouns.html
[21:52:49] <ljharb> i'm saying that if you think about your programs in these ways, you will write worse programs in JS
[21:52:51] <ProfSimm> blueagain: what happened
[21:53:17] <ljharb> having "builders" and "interfaces". these aren't things, they're concepts, and making code do backflips to satisfy the concepts makes for hard to maintain programs
[21:53:24] <ProfSimm> ljharb: if I say "type classes" would it really mean I think way better about it? No.
[21:53:33] <ljharb> of course not, because that's not a JS term either
[21:53:41] <ProfSimm> ljharb: and what's the JS term for it?
[21:53:43] <ljharb> and yes, if you use idiomatic terms you objectively think more idiomatically about problems
[21:54:02] <ljharb> i'm not sure there is one. if there is, i don't know how to translate that, and if there isn't, it's because *it's not useful to have one*
[21:54:13] <ProfSimm> ljharb: so I need to use the JS term for it and there isn't one. You're honestly just messin' around
[21:54:17] <ljharb> this is how all language works btw, not just computer language
[21:54:20] <blueagain> ProfSimm: "wondering if you checked speed of no-proto version"
[21:54:30] <blueagain> ProfSimm: I did, it was lots faster
[21:54:39] <ljharb> ProfSimm: no, i'm saying that you should not use any term. you should find an idiomatic way to think about what you're building without borrowing patterns from wildly different languages
[21:54:46] <ProfSimm> ljharb: interfaces are not a C++ concept, there's no interface there either. It's an engineering concept, from cybernetics.
[21:54:50] <blueagain> ProfSimm: I wanted to create a free service for perf, but ljharb forbade me
[21:54:54] <ProfSimm> ljharb: it existed before computers existed
[21:55:11] <ProfSimm> blueagain: yay, long live obj literals then :P
[21:55:20] <ProfSimm> blueagain: he forbade you? Why would
[21:55:43] <ljharb> lol
[21:55:50] <ljharb> i discouraged you, that's all
[21:55:52] <blueagain> ProfSimm: he said it's bad
[21:56:07] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 246 seconds)
[21:56:08] <blueagain> I listen to ljharb because he usually has intelligent things to say
[21:56:11] <ProfSimm> ljharb doesn't want interfaces, decorators, classes and perf testes!
[21:56:12] <ljharb> i said that if you make a service that doesn't require registration, you will be inundated by spam
[21:56:15] <ProfSimm> testers(
[21:56:21] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[21:56:25] <ljharb> and there's already free services that require registration, so just go register
[21:56:38] <ljharb> ProfSimm: i'm part of TC39, and we just approved decorators for stage 3 on monday.
[21:56:51] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[21:56:56] <ljharb> ProfSimm: and i landed a private class fields improvement in the language last year.
[21:57:01] <ProfSimm> ljharb: well decorators had a meaning before that, pick a new name /s
[21:57:33] <blueagain> ProfSimm: can you share your parser when it's done / presentable?
[21:57:50] <DPA> Getting spam requests isn't a problem as long as you can process them all & they can't send anything anywhere else.
[21:58:10] <ProfSimm> blueagain: sure
[21:58:18] <blueagain> fwiw, registration, unless enforcing a phone number, doesn't really prevent spam
[21:58:38] <ProfSimm> blueagain: well they're trying with email and captcha
[21:58:38] <ljharb> blueagain: true. but it's a moat.
[21:58:48] *** Joins: i0e (~is0ke3@user/is0ke3)
[21:58:51] <ljharb> blueagain: but it's not about preventing it, it's about tamping it down to a tolerable level
[21:59:13] <ljharb> you just can't really have free anonymous things that store executable code without inviting abuse
[21:59:22] <blueagain> can I just limit it 10 pastes per x hours per ip, does that make sense
[21:59:24] <ljharb> so either you pay for it, or you register somewhere. that's your tradeoff.
[21:59:31] <ljharb> blueagain: no, because of distributed bot networks
[21:59:48] <blueagain> hmpf
[22:00:04] *** Joins: nulixes (~Thunderbi@gateway/vpn/pia/nulixes)
[22:00:11] *** Joins: pulse (~pulse@user/pulse)
[22:00:21] <DPA> If it accesses other sites, just make the limit per target site.
[22:00:23] <ProfSimm> Pretty sure pastebins are used to coordinate bitcoin stealing bots and god knows what else
[22:00:24] <ljharb> blueagain: don't get me wrong, if you can solve this you can retire on your piles of dragon gold
[22:00:36] <ljharb> blueagain: because almost every tech company on the planet will want to buy your solution
[22:00:58] <blueagain> ljharb: resolve what, the perfbin problem or the spam problem?
[22:01:52] <ljharb> the spam problem (which blocks the perfbin one)
[22:01:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[22:02:01] <ProfSimm> ljharb: you should add interfaces to JS
[22:02:10] <ProfSimm> ljharb: I'm trolling, I'm trolling :P
[22:02:45] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[22:03:01] *** Joins: wyclif (~wyclif@user/wyclif)
[22:03:11] <ProfSimm> ljharb: enums made of symbols might help tho
[22:03:39] <ljharb> ProfSimm: i want to https://github.com/tc39/proposal-first-class-protocols
[22:03:58] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[22:04:09] *** Joins: rawley (~rawley@142.99.241.242)
[22:04:15] *** Joins: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea)
[22:04:23] <blueagain> is it possible to sso via github. hm but that would force the users to have a github account
[22:05:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:05:35] <ProfSimm> ljharb: that's a hard problem without types
[22:05:38] <blueagain> *sigh*
[22:06:07] <ljharb> ProfSimm: seems pretty easy, that proposal solves it
[22:06:16] <ljharb> blueagain: right, but everyone should anyways :-)
[22:06:32] <ProfSimm> ljharb: I don't yet understand it
[22:07:08] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 272 seconds)
[22:08:47] <ProfSimm> ljharb: so we have a protocol Ordered, symbol (?) compare, and function lessThan()
[22:08:59] <ProfSimm> ljharb: why need 3 names to describe one method
[22:10:11] <ProfSimm> ljharb: it seems to me one name is enough
[22:10:31] <ljharb> because it's not one thing?
[22:10:39] <ProfSimm> ljharb: I don't understand it yet
[22:10:44] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[22:11:08] <ProfSimm> ljharb: what does .implement() do. Just check the symbol is there on the prototype?
[22:11:34] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[22:12:22] <ljharb> ProfSimm: it installs the symbol on the prototype
[22:12:30] *** Joins: Hanii (~textual@2a00:23c5:c583:a300:e060:11bc:86e1:43be)
[22:12:41] <ProfSimm> ljharb: it installs it? It's there isn't it
[22:12:41] <ljharb> it's a dynamic way to do `class Foo implements Protocol {`, basically
[22:13:03] <ljharb> ProfSimm: the symbol is, the implementation isn't
[22:13:04] <ProfSimm> Foo.prototype[Something.name] = f...
[22:13:13] <ProfSimm> ljharb: what implementation. the lessThan method?
[22:13:22] <ljharb> yes
[22:13:35] <ljharb> and whatever else the protocol brings with it
[22:13:38] <ProfSimm> ljharb: well that's not implementing the protocol, that's just adding helpers to it. THe implementation is the compare() method
[22:13:50] <ProfSimm> ljharb: I think "default" implementations of a method like this suggests it should be a separate function, not grafted on each prototype
[22:13:52] *** Quits: jellobot (jellobot@2600:3c01::f03c:92ff:fead:d256) (Remote host closed the connection)
[22:13:59] *** Joins: jellobot (jellobot@2600:3c01::f03c:92ff:fead:d256)
[22:13:59] *** ChanServ sets mode: +v jellobot
[22:14:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:14:19] *** Quits: jellobot (jellobot@2600:3c01::f03c:92ff:fead:d256) (Remote host closed the connection)
[22:14:25] *** Joins: jellobot (jellobot@2600:3c01::f03c:92ff:fead:d256)
[22:14:26] *** ChanServ sets mode: +v jellobot
[22:14:29] <ljharb> the helpers ARE the implementations that use protocol
[22:14:32] <ljharb> *the protocol
[22:14:35] <ProfSimm> ljharb: an interface should be as small as possible. This seems to combine the idea of interfaces with mixins.
[22:14:37] *** Quits: audio (~audio@user/audio) (Ping timeout: 240 seconds)
[22:14:47] *** Quits: konrados (~konrados@user-5-173-20-21.play-internet.pl) (Ping timeout: 260 seconds)
[22:15:06] <ProfSimm> ljharb: dunno. If you don't like the anti-patterns coming from Java, this seems to kinda help them through
[22:16:26] <ProfSimm> ljharb: lessThan(one, other) seems just fine.
[22:16:47] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:16:47] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:16:47] *** Joins: wroathe (~wroathe@user/wroathe)
[22:16:57] <ljharb> it combines the coordination point - the symbols - with the implementations that use it - the methods
[22:17:14] <ljharb> you can provide your own methods, but you usually don't have to
[22:17:35] *** Quits: maret (~maret@nat-88-212-37-89.antik.sk) (Read error: Connection reset by peer)
[22:17:41] <ProfSimm> ljharb: an interface is not supposed to provide implementations, that's the whole point of it
[22:17:52] <ProfSimm> ljharb: and clearly String implements its own compare
[22:18:01] <ProfSimm> Which is the actual implementation of this
[22:18:10] *** Joins: maret (~maret@nat-88-212-37-89.antik.sk)
[22:18:37] <ProfSimm> ljharb: those extra helpers are just prototype pollution
[22:19:41] *** Quits: DF32 (~DF32@2001:8a0:f893:5c00:942a:1f12:22a1:861) (Quit: Client closed)
[22:19:41] <ProfSimm> ljharb: it seems to me this proposal wants to be about mixins, and have a constructor that can check preconditions, like is compare there and so on
[22:20:12] <ljharb> ProfSimm: it definitely doesn't; mixins are terrible
[22:20:21] <ljharb> ProfSimm: they're not pollution tho, they're critical parts of the thing that implements the protocol
[22:20:21] <ProfSimm> ljharb: lessThan() is exactly a mixin method
[22:20:35] <ljharb> sure. but it's not "mixins" in the same way JS people use the term
[22:20:43] <ProfSimm> ljharb: how are they. Compare does the work and lessThan uses compare, not the other way around
[22:20:49] <ljharb> so yes, in a general sense, it's a combination of the interface and the mixins that use it
[22:21:03] <ljharb> ProfSimm: right. but symbols aren't ergonomic. nobody will ever call compare directly
[22:21:10] <ljharb> they call lessThan, or something else, and those call compare.
[22:21:49] <ProfSimm> ljharb: people will call compare directly, that's the point of it. To avoid name collisions. Which adding non-symbol methods like lessThan brings back
[22:22:15] <ProfSimm> ljharb: if protocols bring their helpers along, it'll be a mess, overwritten methods and so on
[22:22:29] <ljharb> ProfSimm: no they won't
[22:22:33] <ProfSimm> ljharb: how
[22:22:44] <ProfSimm> ljharb: what happens to String if it had lessThan method?
[22:23:02] <ljharb> ProfSimm: because if the method already exists, it will throw
[22:23:07] <ProfSimm> ljharb: nice
[22:23:10] <ljharb> ProfSimm: the proposal is early stage, so all these details aren't worked out
[22:23:24] <ProfSimm> ljharb: so we add add a helper to a protocol and bunch of working classes now throw
[22:23:27] <ljharb> but 100% if it just blessed the terrible mixin pattern of "smoosh a bunch of crap onto one class" then it would be bad
[22:23:39] <ljharb> ProfSimm: yes, doing that would be a breaking change
[22:23:40] <ljharb> so?
[22:23:52] <ljharb> but sure, that's something to consider
[22:24:18] <ProfSimm> well, it is, just think protocols should stick to symbol names and have as few of those symbols as possible (like one is usually ok
[22:24:31] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[22:25:42] <ProfSimm> ljharb: in my experience the best interface is a functional one (one method)
[22:26:07] *** Joins: dan01 (~dan01@2a02:2f0f:311c:1500:f42c:839a:a15e:7902)
[22:26:34] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:26:52] *** Joins: alystair (~alystair@user/alystair)
[22:27:14] <ljharb> sure, i agree with that
[22:27:19] <ljharb> but we still have tons of protocols in the language already
[22:27:43] <ljharb> thenable, toStringable, toJSONable, arraylike, iterable, asyncIterable, regexes, etc
[22:28:12] *** Quits: phenom (~primus@user/phenom) (Ping timeout: 240 seconds)
[22:28:20] <ProfSimm> ljharb: yeah it's highly unfortunate those weren't symbols, and maybe some migration should be considered, but we won't be alive to see the end of it
[22:28:33] <ProfSimm> ljharb: which reminds me... JS needs a deprecated feature :)
[22:28:42] *** Joins: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be)
[22:28:43] <ProfSimm> ljharb: something to spit in the console about deprecated stuff :P
[22:28:57] <ProfSimm> ljharb: because it's accumulating a lot of junk
[22:30:34] <ljharb> nah that'd be silly
[22:30:38] <ProfSimm> ljharb: some kinda format process for feature removal 1) introduce alternative (say x.toString ---> x[Symbols.toString]) 2) wait 3) deprecate old one in spec 4) wait 5) throw deprecated warning in console 6) wait 7) wait 8 ) wait some more 9) aaand wait 10) remove old deprecated stuff
[22:30:41] <ljharb> and very few parts of JS are actually deprecated
[22:30:43] <ProfSimm> formal*
[22:30:46] <ljharb> and no, nothing will ever be removed, ever
[22:30:50] <ljharb> "don't break the web" rules all
[22:30:51] <ProfSimm> ljharb: well look
[22:31:00] <ProfSimm> ljharb: if you don't remove junk, you become junk and you get removed
[22:31:09] <ljharb> then that's what will happen
[22:31:12] <ProfSimm> ljharb: it's the rule of the universe
[22:31:14] <ljharb> JS will NEVER EVER remove anything that breaks the web
[22:31:17] <ProfSimm> ljharb: entropy wins
[22:31:19] <ljharb> and for JS to be removed, the web would have to be
[22:31:21] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[22:31:27] <ljharb> and if something displaces the web, good
[22:31:28] <ProfSimm> ljharb: this is why I provided a 10 step provess above
[22:31:32] *** Quits: Naan (~Naan@user/naan) (Ping timeout: 260 seconds)
[22:31:41] <ljharb> "wait" would be "until the heat death of the universe"
[22:31:41] <ProfSimm> ljharb: look at how Apple removes stuff all the time, they're alive
[22:31:46] <ljharb> they aren't the web
[22:32:03] <ProfSimm> ljharb: they have a pretty big ecosystem. iOS appstore most profitable on the planet
[22:32:26] <ProfSimm> ljharb: they know entropy. They don't want to become junk
[22:32:49] <ProfSimm> ljharb: Java said they'll never remove stuff. Heat death of the universe and so on. Well they're now adding deprecation. Laws of physics always win
[22:32:58] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:33:22] <ProfSimm> ljharb: plus, the web survived the removal of Flash just fine
[22:33:36] <ProfSimm> ljharb: the web is more resilient that we give it credit for. Also do you know why Flash was removed.
[22:33:43] <ProfSimm> ljharb: it didn't remove junk from itself.
[22:33:47] <ProfSimm> ljharb: so it got removed
[22:34:01] <ljharb> ProfSimm: doesn't really matter what you're arguing here, nothing will ever be removed, ever
[22:34:19] <ProfSimm> ljharb: this will 100% be false in the long term
[22:34:19] <ljharb> java should be able to remove stuff, they're not the web
[22:34:36] <ProfSimm> ljharb: let me guess Flash is also not the web
[22:34:37] <ljharb> ProfSimm: happy to buy you a drink when that happens, but i suspect we'll be centuries dead at that time
[22:34:42] <ljharb> flash was never the web
[22:34:50] <ljharb> that's WHY flash was removed
[22:34:54] <ProfSimm> ljharb: well it isn't anymore. har har :
[22:34:55] <ProfSimm> :P
[22:35:08] <ljharb> it wasn't just that flash was junk, it's that "the way things like flash worked" were junk
[22:35:11] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[22:36:01] <ProfSimm> ljharb: Flash was making right steps actually. The problem is it started making these steps when it was already dying. Waking up too late and realizing you're junk doesn't help. Out of time
[22:36:33] <ProfSimm> ljharb: before that it was years of "we'll never break compatibility" and "we'll always be small to download"
[22:37:05] <ProfSimm> ljharb: I was in the beta when they replaced their garbage runtime full of security holes with a solid one. Way too late. Flash was dying.
[22:37:07] <ljharb> nah flash was never going to fix itself
[22:37:17] <ljharb> it'd still be based on AS3
[22:37:24] <ProfSimm> AS3 is fine
[22:37:49] <ljharb> so fine that browsers all killed ES4 entirely because it was so bad
[22:38:10] *** Quits: jamea (~jamea@10.189-202-213.bestelclientes.com.mx) (Ping timeout: 272 seconds)
[22:39:24] <ProfSimm> ljharb: ES4 was killed because it had features that don't need to be in source form in a browser.
[22:39:32] <ProfSimm> ljharb: Flash is compiled so this didn't apply to it.
[22:39:35] *** Quits: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net) (Ping timeout: 256 seconds)
[22:39:52] <ProfSimm> ljharb: the rise and success of TypeScript shows ES4 was a good effort. TypeScript is in parts what ES4 was.
[22:40:56] <ljharb> um, no it's not?
[22:41:00] <ljharb> TS is entirely unrelated
[22:41:23] <ProfSimm> ljharb: it's unrelated but oddly similar.
[22:41:40] <ProfSimm> ljharb: it even has JSX, which is like E4X light
[22:42:11] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 250 seconds)
[22:42:43] *** Joins: gehn (~gehn@user/gehn)
[22:43:06] *** Joins: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[22:43:49] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Quit: ZNC 1.8.2 - https://znc.in)
[22:44:08] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:44:11] <ljharb> a) jsx isn't something TS made, it's something they added support for, because of react. b) jsx isn't like E4X, it just leverages similar grammar loopholes
[22:44:21] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:44:26] <blueagain> wth is e4x
[22:44:46] <ljharb> blueagain: an old dead JS dialect
[22:45:08] *** Quits: taupiqueur (~taupiqueu@68.104.204.77.rev.sfr.net) (Ping timeout: 260 seconds)
[22:45:13] *** Joins: phenom (~primus@user/phenom)
[22:45:19] <DPA> I did have a few instances where I used a feature, then it was removed or broken. I once built an UI framework on top of Object.observe. I once used ::before(N) somewhere, I don't remember for what. I used to myclass.apply(object) before JS classes forbade that. I'm pretty sure there were some other things too, but I forgot them.
[22:46:30] <blueagain> ECMAScript for XML
[22:46:32] <blueagain> omg
[22:46:37] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[22:46:39] <blueagain> this sounds awful
[22:46:47] <blueagain> anything that has xml in it sounds awful
[22:46:56] <ljharb> indeed
[22:47:04] <ljharb> DPA: sure but Object.observe was never in the language
[22:47:10] <ljharb> DPA: and so, nothing should ever have relied on it
[22:47:29] <ProfSimm> ljharb: you make arguments about who made what, but I'm not talking about who made what, rather about what it is.
[22:47:30] <ljharb> DPA: also JS classes never allowed `.apply` or `.call` or "not new"
[22:47:44] <ljharb> DPA: so iow, you were using an early version of a transpiler, which isn't JS
[22:47:45] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:47:46] <ProfSimm> ljharb: they may be the wheel reinvented, but it was reinvented, showing the wheel was the right idea
[22:48:01] <ljharb> ProfSimm: sure. nobody's saying the things flash was trying to do weren't useful
[22:48:21] <ljharb> ProfSimm: communism's a great theory, but that doesn't spare all the implementations from judgement
[22:48:23] <austincheney> blueagain, E4X never really took off, but its really just as simple as putting a script tag (with the html namespace) in an XML document.  Nothing else is different.
[22:49:25] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 240 seconds)
[22:49:52] <DPA> ljharb: No, I wan't using a transpiler. Before the class keyword, function(){this.bla=123;} was a class. And apply was part of how inheritance was done. So when the "class" keyword became a thing, and replaced parts of old stuff, it broke other old stuff.
[22:50:05] <blueagain> for each( var price in sales..@price )
[22:50:09] <ljharb> DPA: that means your refactor broke it
[22:50:11] <blueagain> what is this insanity
[22:50:15] <ljharb> DPA: an archaic constructor still works the same
[22:50:24] <ljharb> blueagain: firefox-specific JS
[22:50:43] <ljharb> DPA: and you can use Reflect.construct with a class and argument spread, i believe
[22:50:47] <ProfSimm> ljharb: what we really need in JS is a way to alocate and work with raw memory
[22:51:04] <doug16k> ProfSimm, like typed arrays?
[22:51:08] <ProfSimm> ljharb: as types. Arrays, numbers, strings, objects.
[22:51:15] <ProfSimm> doug16k: not quite
[22:51:19] <doug16k> strings how
[22:51:44] *** Joins: i0e (~is0ke3@user/is0ke3)
[22:51:45] <doug16k> char * ?
[22:51:56] <ProfSimm> doug16k: basically you define some sort of structure and a solid block of memory is allocated. Object of objects or arrays of objects, whatever it has to be
[22:52:14] <ProfSimm> doug16k: same as the other string types
[22:52:16] <blueagain> ya I'd also say typed arrays
[22:52:23] <doug16k> you want valuetypes I guess
[22:52:35] <doug16k> C# struct
[22:52:41] <ProfSimm> type arrays don't have nearly that flexibility
[22:52:58] <doug16k> why though?
[22:53:10] <blueagain> sales.item.(@type == "oranges").@quantity = 4;
[22:53:11] <doug16k> js performance is pretty much infinite as far as my code can tell
[22:53:13] <ProfSimm> doug16k: how do you build AoS as a solid block of memory with typed arrays?
[22:53:16] <blueagain> what is the @?
[22:53:34] <DPA> The nice thing about the good old archaic constructors and apply is that I can inject a class before anything calls any constructors. But with classes, I can no longer do that, not even using Reflect.
[22:53:34] <DPA> But I can't possibly require the old ways anymore, now that the everything uses the class keyword. So some lib / framework use cases I would have had for this, I can now just not do anymore.
[22:53:49] <doug16k> ProfSimm, you build SoA
[22:53:58] <DPA> *I can inject a proxy
[22:54:17] <ljharb> ProfSimm: that would be terrible
[22:54:24] <ljharb> ProfSimm: direct memory access has never made anything better
[22:54:25] <ProfSimm> ljharb: it'd be fast
[22:54:30] <ljharb> fast doesn't matter
[22:54:38] <ljharb> slow and correct is far far better than fast and brittle
[22:54:39] <austincheney> ProfSimm, direct memory access basically means a new language with pointers.  JS is completely designed around garbage collection
[22:54:42] <ProfSimm> ljharb: it's not direct memory access, it's still sandboxed
[22:54:46] <ProfSimm> ljharb: i.e. range check
[22:55:02] <ljharb> literally any feature motivated by "but it's fast" is probably a bad idea
[22:55:05] <ljharb> fast doesn't matter
[22:55:05] <ProfSimm> austincheney: C# did with Spans
[22:55:12] <blueagain> well
[22:55:25] <ljharb> speeding up things that are good on their own is great
[22:55:26] <ProfSimm> ljharb: fast doesn't matter, meanwhile browsers dumped billions into making js fast
[22:55:27] <blueagain> fast matters when you write a kernel
[22:56:47] <ProfSimm> blueagain: decorators... but... not in this place in code.
[22:56:53] <austincheney> ProfSimm, if you were really concerned with performance (and this is a really big if) there is a lot of low hanging fruit you could pick to get pretty near half C lang level performance in this language without direct memory access
[22:56:58] <ProfSimm> blueagain: what source is that from
[22:57:16] <blueagain> ProfSimm: https://en.wikipedia.org/wiki/ECMAScript_for_XML#Example
[22:57:22] <ProfSimm> austincheney: I'm way past there
[22:57:33] <ProfSimm> blueagain: oh e4x
[22:57:36] <austincheney> ProfSimm, my experience writing in JS tells me that JS developer really REALLY don't care about peformance and will generally lie about performance to avoid uncomfortable decisions
[22:57:36] <blueagain> anyway
[22:57:41] <ProfSimm> blueagain: attributes
[22:57:44] *** Quits: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net) (Quit: ezakimak)
[22:57:52] <blueagain> ProfSimm: I still don't get why you can't write your parser in c or rust
[22:57:58] *** Joins: ezakimak (~ezakimak@c-174-52-132-123.hsd1.ut.comcast.net)
[22:58:20] <ProfSimm> blueagain: the parser is fast enough. What worries me really is the runtime
[22:58:37] <ProfSimm> blueagain: the parser is simple, it parses in real time as you type
[22:58:57] <doug16k> you can make code that is easy to run or hard to run. can't blame runtime because you made it hard to run
[22:59:20] <ProfSimm> doug16k: no I mean I'm writing a runtime
[22:59:36] *** Joins: dan101 (~dan01@2a02:2f0f:311c:1500:b116:10:ea5c:8139)
[23:00:06] <doug16k> oh I thought you meant overheads like JIT and GC
[23:00:10] <ProfSimm> The language is such that it'll take a ton of fragmented memory because I can't allocate blocks of it
[23:00:28] <ljharb> ProfSimm: fast doesn't matter in language design. it matters in browser dev.
[23:00:40] <ProfSimm> ljharb: everything is connected
[23:00:58] <ljharb> citing dirk gently doesn't mean everything's the same :-p
[23:01:25] *** Quits: taupiqueur_ (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[23:01:35] <ProfSimm> ljharb: I'm just a leaf in the stream of creation
[23:01:57] <ProfSimm> ljharb: but nah the language design matters.
[23:01:58] <ljharb> leaves don't move the stream, the stream moves them
[23:02:01] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 245 seconds)
[23:02:09] <doug16k> what are you doing in that is processing intensive that you need to micromanage memory?
[23:02:12] <ProfSimm> ljharb: we know that
[23:02:21] <ljharb> language design matters, and the language needs to be able to be made performant. but that is not the same thing as "it's good to add features solely for perf"
[23:02:32] <ProfSimm> doug16k: well I allocate lots of small objects
[23:02:50] <doug16k> you don't think it is pooling them and doing that for you?
[23:02:58] <ProfSimm> doug16k: it's not.
[23:03:17] <ProfSimm> doug16k: just the fact it runs GC on them is pure overhead, as I have no GC
[23:03:19] <doug16k> if their lifetime is too short, it can't do anything
[23:03:25] *** Quits: dan01 (~dan01@2a02:2f0f:311c:1500:f42c:839a:a15e:7902) (Ping timeout: 250 seconds)
[23:03:39] <ljharb> what do you mean "i have no gc"
[23:03:39] <ProfSimm> doug16k: but i have no way to explicitly delete them either
[23:03:48] <ljharb> the objects won't be GCd if you're still referencing them
[23:03:49] <ProfSimm> ljharb: well my language is not GC based
[23:03:57] <blueagain> wait
[23:03:57] <ljharb> we're talking about JS
[23:04:05] *** Quits: Hanii (~textual@2a00:23c5:c583:a300:e060:11bc:86e1:43be) (Quit: Textual IRC Client: www.textualapp.com)
[23:04:09] *** Joins: i0e (~is0ke3@user/is0ke3)
[23:04:10] <ProfSimm> ljharb: I'm talking about a language I'm writing in JS
[23:04:13] <ljharb> are you writing some new snowflake language that runs inside of JS natively?
[23:04:19] <ljharb> lol ok
[23:04:22] <ashnur> why are you mean ljharb
[23:04:24] <ljharb> well then that's a bad idea, that's what wasm is for
[23:04:27] <ProfSimm> ljharb: but that's just last 5 min, otherwise we were talking about about JS
[23:04:27] <ljharb> ashnur: how am i mean
[23:04:32] <ashnur> "snowflake"
[23:04:34] <blueagain> ProfSimm: I thought you're writing a parser, not an engine
[23:04:36] <ljharb> ashnur: "snowflake" just means "every one is unique"
[23:04:43] <ProfSimm> blueagain: both
[23:04:55] <ljharb> ashnur: i'm certainly lightly implying that everyone who makes a new language believes, perhaps wrongly, that their thing is unique and special
[23:04:58] <ProfSimm> blueagain: the parser is ready actually but it won't inform you much as it's all in the runtime
[23:05:10] <ashnur> maybe you don't see how it's mean, but trust me, i wouldn't be happy to hear such judgmental stuff
[23:05:40] <blueagain> actually I'd abstract ljharb's snowflake term
[23:05:48] <ashnur> of course you would :P
[23:05:52] <blueagain> everyone who makes anything believes his thing is unique and special
[23:06:02] <ashnur> that's so not true
[23:06:14] <DPA> The main problem with WASM in the browser is a lack of support for memory mapping multiple memories. Whole thing can only have one, makes some stuff impossible to implement without very slow bound checks & emulation.
[23:06:20] <doug16k> most good programmers go through a phase where they discover parsers/AST/compiler theory, and they make a bunch of DSLs
[23:06:29] <ashnur> DPA, that's a feature:D
[23:06:46] <ashnur> doug16k, and then the best invent brainfuck?
[23:06:52] <doug16k> and/or dragged through it in university
[23:07:12] <ashnur> https://catseye.tc/
[23:07:17] <blueagain> actual snowflakes can be pretty uniform though
[23:07:29] <doug16k> ashnur, exactly, or arnoldc
[23:08:11] <ljharb> blueagain: that's not true tho, i make tons of paper airplanes that are neither unique nor special
[23:08:17] <ljharb> they just throw good
[23:08:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 260 seconds)
[23:08:34] <ashnur> :D
[23:08:43] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[23:08:47] <blueagain> ljharb: that's just your hobby/pasttime, I doubt that counts as a "thing"
[23:08:56] <blueagain> I don't think every dinner I make is brilliant
[23:09:13] <ashnur> digital taylorism is rampant, literally suffocating progress and some people think everyone believes they do new things?
[23:09:25] <ashnur> only in the 21st century
[23:09:31] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[23:09:36] <blueagain> what is taylorism
[23:09:41] <ashnur> exactly
[23:10:27] <ashnur> Taylor was an OCD guy who was given power like you give power today to scrum masters
[23:10:36] *** Joins: i0e (~is0ke3@user/is0ke3)
[23:11:22] *** Joins: mahler (~hasley@wikimedia/Hasley)
[23:11:31] <blueagain> scrum is fraud
[23:11:50] <ashnur> it's industry standard like typescript
[23:12:02] <ashnur> maybe even more so
[23:12:13] <ashnur> especially if you include all of its kind
[23:12:22] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:12:42] <ljharb> blueagain: what are you counting then?
[23:13:00] <ljharb> blueagain: i guarantee someone who's carving their 200th identical figurine doesn't think they're all unique and special
[23:13:08] <ProfSimm> blueagain: https://www.coltram.com/proto/
[23:13:21] <ljharb> also lol, "giving power to scrum masters" sounds like a very different world than the one i work in
[23:13:29] <blueagain> ljharb: once you invest a certain amount of hours into something, you'd probably start thinking it has a value
[23:13:37] <blueagain> regardless of whether it has an actual value
[23:13:37] <ProfSimm> blueagain: think of it as JSON with math expressions, arrow functions and few other things
[23:13:56] <blueagain> investor's fallacy, I believe
[23:14:33] <blueagain> ProfSimm: that's your language?
[23:14:53] <ashnur> ljharb, how many scrum masters have you hired/employ so far?
[23:15:12] <ProfSimm> blueagain: that's the parser only.
[23:15:30] <ProfSimm> blueagain: sorry for the shitty example, it doesn't show everything, but that takes time to prep
[23:15:31] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[23:15:43] <ProfSimm> blueagain: doesn't show even half of it tbh
[23:15:47] <blueagain> ProfSimm: looks cool
[23:16:16] *** Quits: vantage (~vantage@ip-193-121-152-141.dsl.scarlet.be) (Read error: Connection reset by peer)
[23:16:23] <blueagain> I skipped compiler class at uni so I don't know a whole lot about parsers
[23:16:54] <ashnur> it's just string manipulations, total rabbit hole but i would say it's not worth it
[23:16:54] <ProfSimm> blueagain: source files (tsx) here: https://www.coltram.com/proto/assets/js/  main.js just aggregates them
[23:17:02] *** Joins: i0e (~is0ke3@user/is0ke3)
[23:17:56] <doug16k> compilers are very fun actually
[23:17:59] <blueagain> so first steps is tokenising the character string, right?
[23:18:05] <blueagain> step*
[23:18:10] <ProfSimm> blueagain: sure
[23:18:32] <ProfSimm> blueagain: first you group letters -> tokens. Then you group tokens -> expressions/nodes
[23:18:39] <ashnur> doug16k, who said rabbit holes aren't fun?
[23:18:44] <ashnur> akshually
[23:18:44] <ProfSimm> blueagain: then you do further transforms and at some point you have a language
[23:18:50] *** Quits: i0e (~is0ke3@user/is0ke3) (Client Quit)
[23:19:04] *** Quits: codebam_ (~codebam@user/codebam) (Ping timeout: 246 seconds)
[23:19:24] *** Quits: dan101 (~dan01@2a02:2f0f:311c:1500:b116:10:ea5c:8139) (Ping timeout: 240 seconds)
[23:20:06] <doug16k> yeah something like tokenize -> parse -> syntax tree -> semantic analysis -> intermediate representation -> optimizations -> codegen/execution
[23:20:11] *** Joins: cotko (~cotko@BSN-182-21-28.dynamic.siol.net)
[23:20:13] <blueagain> so tokenising is something like, taking `1+2` and turning it into (number, 1), (operator, +), (number, 2) ?
[23:20:43] <blueagain> it's just a transformation?
[23:20:45] <ProfSimm> blueagain: yes. Usually done char by char in a loop, but if you look in the Tokenizer class, I cheated with regex, because I can. And because I suspect it's faster in JS
[23:20:53] *** Joins: taupiqueur (~taupiqueu@lmontsouris-659-1-2-186.w193-248.abo.wanadoo.fr)
[23:20:56] <doug16k> tokenize is seeing 1 and emitting a NUMBER token, 'if' and emitting an IF token, '(' emitting OPENPAREN, etc
[23:21:44] <blueagain> but sometimes position matters, in the interpretation of a single token? is that does come into place during the parsing stage?
[23:22:02] <blueagain> or does that*
[23:22:13] <doug16k> then in parse, there's a rule that says expression ::= NUMBER  . then if that is PLUS rule, it makes an AST node that takes left hand side expression plus right hand side expression
[23:22:34] <doug16k> which could be a NUMBER
[23:22:36] <ProfSimm> blueagain: ideally you have a language where the tokenizer doesn't care about context, it only cares that each token begins where the last ended (no gaps)
[23:23:11] <ProfSimm> blueagain: but in mixed languages parsers you need context-aware tokenizers that recognize context switching tokens. For example template engines, or HTML parsers (inline JS and CSS blocks)
[23:23:21] <doug16k> expression ::= expression PLUS expression
[23:23:30] <blueagain> so if you have an expression like `1+2*3`, at which stage do you decide which operator has precedence?
[23:23:38] <ProfSimm> blueagain: parser
[23:23:41] <ashnur> what i really hate are these parser generators with their limited notations
[23:23:47] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.165.threembb.co.uk)
[23:23:52] <ProfSimm> blueagain: the tokenizer just groups characters and gives them a type nothing else
[23:24:00] <blueagain> I see
[23:24:26] <blueagain> doug16k: is it always clear that you can apply exactly one rule?
[23:24:40] <doug16k> no, a grammar can have ambiguities
[23:24:54] <ProfSimm> blueagain: but ideally you have no ambiguities
[23:25:01] <blueagain> what do you do then
[23:25:10] <ProfSimm> blueagain: you fix your shitty language grammar! :-)
[23:25:26] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.165.threembb.co.uk) (Remote host closed the connection)
[23:25:28] *** Joins: dpuerto (~dpuerto@136-27-83-52.cab.webpass.net)
[23:25:49] <ProfSimm> blueagain: well you either pick one of few possible meanings, emit an error, or yeah, fix the design
[23:25:51] *** Joins: Tangent-Man (~Tang3nt-M@92.40.179.154.threembb.co.uk)
[23:25:52] <doug16k> yeah, part of developing the grammar is fixing the ambiguities and saying it right
[23:27:00] <ProfSimm> blueagain: I use space instead of dot. This will allow naturally looking DSLs
[23:27:31] <ProfSimm> blueagain: I also don't require empty () for function call. This means  this:   "foo.bar().baz(1, 2).qux()" becomes "foo bar baz (1, 2) qux"
[23:27:39] <ProfSimm> blueagain: so you can model your own language in the language
[23:28:04] <doug16k> ProfSimm, then how do I get a reference to the function itself?
[23:29:28] *** Quits: banana_ (~banana_@user/banana/x-2944094) (Ping timeout: 260 seconds)
[23:29:34] <ProfSimm> doug16k: I have couple of options for this, haven't decided yet, but either you do "foo bar ..." or "@foo bar" (@ for address, like &foo in other languages)
[23:29:51] *** Joins: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com)
[23:29:58] <doug16k> & crossed my mind. it's available right?
[23:29:59] <ProfSimm> doug16k: but actually I have something else in mind, where it doesn't matter, because it executes non-strictly like HAskell
[23:30:18] <ProfSimm> doug16k: well it's available, but ideally I don't want it to look like C
[23:30:37] <doug16k> well, unary is available I mean. binary one is bitwise and of course
[23:30:40] <ProfSimm> doug16k: so I'm trying to make it work by "magic".
[23:31:02] <ProfSimm> doug16k: yes I support unary operators before and after chains, like:   !a b c    or  a b c?
[23:31:33] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[23:31:40] <doug16k> ah right. not looking like js makes it not look like c too
[23:32:00] <doug16k> js is almost C
[23:32:09] <doug16k> but stops at the crazy part
[23:32:19] <ljharb> ashnur: none, because why would we pay for that
[23:32:27] <ProfSimm> doug16k: well I don't want to make it different for no reason, but let's say I try to think what makes sense if C didn't exist
[23:32:29] <ljharb> blueagain: that is very true, spending creates a belief in value
[23:33:37] *** Quits: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:33:54] *** Quits: sickdyd (~sickd@120.51.82.69.ap.gmobb-fix.jp) (Ping timeout: 272 seconds)
[23:34:03] <ProfSimm> doug16k: in a pure language there's no difference between an expression, and a function with no argument.
[23:34:25] <ProfSimm> doug16k: so there's no different syntax needed. The problem is I do allow side-effects, although some functions are marked explicitly pure
[23:34:31] *** Joins: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea)
[23:34:53] <ProfSimm> doug16k: so I gotta figure out the syntactical situation for side-effecting functions
[23:34:56] *** Quits: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea) (Client Quit)
[23:34:58] <doug16k> I am totally against functional programming for one reason: good luck debugging
[23:35:34] <doug16k> what order does it run? probably crazy order if the compiler is good
[23:35:36] *** Quits: Elliria (~littlegir@cpe-66-24-84-219.stny.res.rr.com) (Quit: *POOF*)
[23:36:24] <ProfSimm> doug16k: technically one could think of non-strict execution as if everything is wrapped in arrow functions by default
[23:36:35] <ProfSimm> doug16k: I'll try to make debugging not suck
[23:36:42] <austincheney> doug16k, debugging is easier, with one exception, in functional programming because a stack trace tells you everything you need to know.
[23:37:07] <doug16k> austincheney, it doesn't do tail call optimization and screw that all up?
[23:37:28] <ProfSimm> Yeah the stack is not what one thinks it is in functional
[23:37:42] <ProfSimm> My runtime is continuations based
[23:37:49] <ProfSimm> So everything is a tail call technically.
[23:37:50] <ProfSimm> :P
[23:38:24] <doug16k> afaik most functional stuff is heavily reliant on codegen transforming recursions into loops
[23:38:35] <ProfSimm> doug16k: it can be.
[23:38:52] *** Joins: wyclif (~wyclif@user/wyclif)
[23:39:01] <blueagain> ProfSimm: do you know lisp
[23:39:02] <ProfSimm> doug16k: but with continuations you have no stack per se. So you don't need loops, because calling a continuation is literally like looping a loop. As in literally it's the same thing
[23:39:08] <ProfSimm> blueagain: little
[23:39:18] <blueagain> really nice, uses polish notation
[23:39:22] <doug16k> closures have infinite power yeah
[23:40:23] *** Joins: jamea (~jamea@200.68.140.32)
[23:41:08] *** Quits: l__q (~modinfo@user/modinfo) (Ping timeout: 260 seconds)
[23:41:41] *** Joins: banana_ (~banana_@user/banana/x-2944094)
[23:41:47] <ProfSimm> blueagain: my thing is a bit like lisp, but with infix operators
[23:41:55] <ProfSimm> blueagain: I have no reserved words whatsoever
[23:42:01] <ProfSimm> blueagain: all comes from the stdlib
[23:42:27] <ProfSimm> blueagain: so if you use something like if...else.. or do..while, it's all functions. But it looks 1:1 to statements
[23:42:46] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:43:29] <ProfSimm> blueagain: well infix operators, unary operators (prefix and postfix) and named parameters / labels like {foo: 1, bar: 2} etc.
[23:44:07] *** Joins: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea)
[23:44:52] *** Quits: Tangent-Man (~Tang3nt-M@92.40.179.154.threembb.co.uk) (Read error: Connection reset by peer)
[23:44:52] *** Joins: Tang3nt-Man (~Tang3nt-M@92.40.179.157.threembb.co.uk)
[23:44:55] <ashnur> ljharb, then obviously I wasn't talking about you personally, was I? I was trying to explain who Taylor was, not trying to assign blame to everyone present...
[23:45:33] <ashnur> maybe I should've said 'how scrum masters get power today' but it is what it is
[23:45:45] *** voltage is now known as voltage_
[23:46:41] <blueagain> doesn't 'scrum' come from rugby
[23:46:49] <ProfSimm> blueagain: you know what I'm realizing today. Prototypes are not useful for performance if you have an object with lots of methods, but very few instances. They're also not useful if you have lots of instances of small objects with few methods. They're only useful if you have lots of instances of objects with lots of methods. But I have no such objects at all, I consider them bad practice.
[23:47:17] <ProfSimm> blueagain: basically JS prototypes optimize an anti-pattern
[23:48:26] <ashnur> the etymology of one particular expression of this insanity is probably less important than where it is coming from
[23:50:37] <blueagain> the perhaps biggest issue I have with scrum are the estimates
[23:51:05] <blueagain> for anything meaningful, I can't give an estimate since it's potentially a problem I haven't solved yet
[23:51:37] <blueagain> for anything non-meaningful, if it needs an estimation, it's probably not been abstracted away by a pattern/tool
[23:52:26] *** Quits: pulse (~pulse@user/pulse) (Quit: { indiedevs.net })
[23:52:36] *** Joins: howdoi (uid224@id-224.lymington.irccloud.com)
[23:53:05] *** Quits: d[10] (~d10]@2804:2488:1080:e60:69:ca86:66e:a68e) (Quit: Client closed)
[23:53:22] *** Quits: cotko (~cotko@BSN-182-21-28.dynamic.siol.net) (Ping timeout: 246 seconds)
[23:54:25] *** Joins: blahboybaz (~blahboyba@c-67-161-98-159.hsd1.wa.comcast.net)
[23:55:52] *** Quits: bambanxx (~bambanx@2800:150:106:137e:958f:a5e4:ee18:58ea) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:57:09] <ashnur> estimates are fine, it's the fact that it's rare that you had been part of the process until that point so it's unreasonable to guess.
[23:58:09] <blueagain> ashnur: we've been doing it for 4 years at my day job. estimates haven't got better, or worse, for that matter
[23:58:29] <ashnur> as I said, because you probably weren't part of the process before the estimates
[23:58:38] *** Quits: aclark (~aclark@pool-108-51-184-139.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[23:58:38] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[23:59:08] <ashnur> i mean the process that gives you the task of estimation, like how and why and what you are going to do
[23:59:35] <ashnur> otherwise a lot of the time even before you would estimate you would do small experiments just to know if something is possible
