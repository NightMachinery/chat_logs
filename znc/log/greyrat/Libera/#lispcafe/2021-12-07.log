[00:01:32] <gilberth> Good morning #lispcafe!
[00:01:44] <selwyn> hi
[00:08:13] <pjb> smell-o-vision would be more practically implemented as a VR/AR device, so, with a personal point-of-smell.
[00:08:58] <hayley> Good morning everyone!
[00:09:18] <pjb> If you use a neuralink interface, no real molecule need to be involved, so be assured, your house won't smell poop, only *you* will scent it!
[00:09:53] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[00:10:07] <gilberth> hayley: Hello beach!
[00:11:34] <hayley> https://www.youtube.com/watch?v=ZW2N72dxDDU
[00:11:35] -ixelp- Remind Me To Smile - YouTube
[00:25:31] <hayley> Do std::strings know their own lengths?
[00:25:44] <selwyn> how long is a piece of std::string
[00:25:58] * hayley spots someone calling strlen on the result of .c_str() and wonders if she can get heap corruption by sending \0 again.
[00:27:02] <hayley> OTOH probably not, I can only convince application code that the string is shorter than what it actually is. OTOOH, we'll let afl-fuzz find out.
[00:27:35] <selwyn> why can't you call strlen like that
[00:32:03] <ck_> I think a std::string is about 2.6 std::fathoms
[00:32:25] <hayley> If I were to send a \0 in my string, as I have before, it might not behave as expected.
[00:32:53] <hayley> Still not wrong though; the malloc has its own idea of string length, and AIUI it's still all in bounds.
[00:47:49] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[00:50:03] *** Joins: aeth (~aeth@user/aeth)
[00:51:52] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[01:04:09] <selwyn> is the man in the high castle tv show worth watching
[01:05:09] <shka> selwyn: didn't watch it, book is one of the best
[01:05:14] <shka> from Dick
[01:05:15] <selwyn> i read the book
[01:05:32] <selwyn> it seems they had to make it more action oriented to adapt it into a series
[01:05:44] <shka> mmm, then it is not my cup of tea
[01:06:22] <selwyn> is it true that he used the i ching to write the book?
[01:06:59] <shka> i don't know, sounds like a P.K.Dick thing to do 
[01:07:11] <shka> guy was a massive weirdo
[01:07:14] <selwyn> i still think that a scanner darkly is his best work
[01:07:51] <selwyn> but he does a great job of inducing high octane horror in the man in the high castle
[01:07:58] <shka> my favorite story about the guy was that he insisted that Lem does not exist and is a communist conspiracy
[01:07:59] <selwyn> ten pages in and the whole world is shit
[01:08:04] <shka> Lenin Engels Marx
[01:08:08] <selwyn> what 
[01:08:52] <shka> selwyn: long story, Lem personally wanted to help publish Dick in the commie block, Dick expected to earn a lot of money 
[01:09:05] <shka> but it is communism, we don't do that here
[01:09:14] <shka> so he got a little bit sour 
[01:09:26] <shka> and started to think that he was played by the KGB
[01:09:35] <selwyn> sounds like drug paranoia tbh
[01:10:02] <shka> and Lem surely is not the real person because no author would be so consistently publishing so diverse novels so quickly
[01:10:40] <shka> anyway, it is a true story, look it up
[01:10:53] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:11:35] <shka> so yeah, kids, don't do drugs
[01:12:01] <selwyn> theres a debate over whether drugs are actually good for your creativity
[01:12:19] <shka> i mean... https://www.youtube.com/watch?v=dGykwC0fdJ4
[01:12:19] -ixelp- Fleetwood Mac ~ The Chain ~ Live 1982 - YouTube
[01:12:27] <shka> can be good for life shows :P
[01:12:30] <selwyn> i think pkd is the best example of 'he couldn't have done it if he was off the drugs'
[01:12:31] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:12:42] <shka> i don't know about that
[01:13:06] <shka> i know thought that Lem personally was disappointed by pkd after this whole thing
[01:13:19] *** Joins: x88x88x- (~cheeg@156.146.57.109)
[01:13:28] *** Quits: x88x88x- (~cheeg@156.146.57.109) (Remote host closed the connection)
[01:13:29] <shka> and before that he considered PKD to be one of the top 3 SF authors in the western world
[01:13:56] <selwyn> well he is
[01:14:05] <selwyn>  /was
[01:15:40] <shka> the other favorite of Lem was Le Guin actually 
[01:16:51] <shka> can't remember the third one, somehow i want to say Roger Zelazny but this really does not sound right
[01:17:19] *** Joins: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x)
[01:17:23] *** Quits: x88x88x- (~cheeg@gateway/vpn/pia/x88x88x) (Remote host closed the connection)
[01:17:36] <shka> selwyn: https://en.wikipedia.org/wiki/Stanis%C5%82aw_Lem#Relationship_with_American_science_fiction
[01:22:21] <shka> selwyn: btw, read this, you will like it https://en.wikipedia.org/wiki/His_Master%27s_Voice_(novel)
[01:23:15] * gilberth drowns in an ocean of backslashes for he daring to use MathJax.
[01:24:32] <shka> gilberth: the soundtrack https://www.youtube.com/watch?v=1SsnKe-fm1c
[01:24:33] -ixelp- Drown in Ashes - YouTube
[01:24:46] <gilberth> It could have been simple. An option to process TeX only in elements of a certain CSS class would have been helpful. But I can't see such an option.
[01:25:33] <shka> selwyn: oh, also this one https://en.wikipedia.org/wiki/Summa_Technologiae 
[01:27:02] <gilberth> shka: Thanks, reminds me of my former^1.5 long term relationship. Really lights my mood.
[01:28:14] <shka> gilberth: could be worse
[01:28:17] <gilberth> Speaking of which, I lost my wedding ring while asleep. An omen?
[01:28:51] <gilberth> shka: It's ok. We miss each other and can't see us. Damn pandemic.
[01:29:04] <shka> https://www.youtube.com/watch?v=3T_7B7uNXPA
[01:29:04] -ixelp- Lydia Lunch – "Afraid of Your Company" - YouTube
[01:29:18] <selwyn> gilberth: can your stuff be used to compile metafont in common lisp?
[01:29:52] <gilberth> You mean, compiling the metafont program to CL?
[01:29:59] <selwyn> yes
[01:30:21] <gilberth> Sure, it runs fine. I generated my font files with it.
[01:31:52] <shka> good night all
[01:32:01] <gilberth> Take care!
[01:32:13] <selwyn> goodnight
[01:32:44] <hayley> https://www.youtube.com/watch?v=pu-SgkFjOWs
[01:32:44] -ixelp- Tramp - YouTube
[01:33:41] <gilberth> selwyn: But I would need my time to package it up in a way for others to use. And in general my compiler is not optimized for speed, but for debugging with runtime checks at every operation.
[01:34:07] <hayley> I wonder if I can do a generational mark-compact collector by guessing that the old objects are more or less always alive. I'd still always fix up pointers, so no write barrier, but I wouldn't mark and compact so much.
[01:35:13] <hayley> I'd still have to mark through old objects, so nothing new compared to the usual dense prefix.
[01:36:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 265 seconds)
[01:49:56] *** Quits: pl (sid98063@helmsley.irccloud.com) (Ping timeout: 245 seconds)
[01:50:13] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[01:55:06] *** Quits: Catie (~user@user/catie) (Quit: Going home)
[02:26:07] <gilberth> Dammit. Should I really guess what MathJax matches and where it does escape processing and where not? It does look at B^WSTRONG elements, but not at CODE elements. Do I need to read the source? That sure is robust, isn't it?
[02:26:55] * gilberth reads.
[02:28:51] <gilberth> There is a 'findTeX' option, the name sounds promising, but the documentation says nothing more that it exists.
[02:34:04] <moon-child> 'an option to process TeX only in elements of a certain CSS class would have been helpful'  iframe time?
[02:35:27] <gilberth> All over the place? With data: URIs? Generated from JS? Sounds really nice. Wrapped in OBJECT even?
[02:42:57] *** Quits: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[02:44:11] <mfiano> Ugh, why does sharpsign number have to show up in my condition reports?
[02:44:35] *** Joins: abrantesasf (~abrantesa@187.36.170.211)
[02:44:55] <gilberth> Have you checked *print-circle*?
[02:45:07] <mfiano> https://gist.github.com/mfiano/292074e86631c76adbbfc3934bd80784
[02:45:08] -ixelp- cpu-usage.lisp · GitHub
[02:46:12] <gilberth> Yes, but have you checked what *print-circle* is set to?
[02:46:58] <mfiano> Nope, but that's obvious in retrospect. Thanks.
[02:47:16] <mfiano> My mind is corrupted from working with syscalls and their poor error handling all day
[02:49:59] <moon-child> meh.  they are better than libc
[02:50:13] <moon-child> whoever came up with errno ought to be shot
[02:50:26] * gilberth nods.
[02:50:29] <mfiano> I completely agree, and I _am_ working with libc
[02:50:45] <moon-child> aha.  worse and worse!
[02:51:34] <mfiano> The C application code I'm porting basically has a huge case statement converting general libc error messages to context specific ones
[02:51:47] <mfiano> I wish we could have context aware error messages easily
[02:52:30] <mfiano> moon-child: I'm porting FreeBSD's vmstat to CL
[02:52:59] <mfiano> Or well the parts of it I need for now
[02:53:18] <moon-child> 'converting general libc error messages to context specific ones'    I did something similar in my audio library.  Not sure if it was worth it.  But I converted all of the error numbers alsa can return to lib-specific ones
[02:54:02] <mfiano> Yeah that was a consideration, but I just punted to the user to rtfm
[02:54:55] <moon-child> probably appropriate for your use-case.  I have to abstract over many system audio apis
[02:55:31] <moon-child> and I think it is meaningful to report to a user 'you have an underrun' vs 'system is borked'
[02:55:41] <mfiano> Yeah probably worth it for you then. The typical C idiom is to do something dumb like: if(return_value != 0) {perror("syscall name"); exit(1);}
[02:56:20] <mfiano> I'm surprised this C code actually bothers to do better, for some definition of the word anyway.
[02:57:57] <moon-child> my audio lib is c.  Some parts are truly awful
[02:58:30] *** Joins: MichaelRaskin (~MichaelRa@ipb21a9944.dynamic.kabel-deutschland.de)
[02:58:30] *** ChanServ sets mode: +o MichaelRaskin
[02:59:57] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 268 seconds)
[03:00:14] <moon-child> it's not so much error handling as memory management, imo.  I try to make an interface which is hard to misuse, so I end up committing some really horrible pointer crimes in the implementation
[03:00:15] <mfiano> I don't think at least some 'awful' is avoidable with C. One of the main reasons I avoid it at all costs.
[03:00:59] <GreaseMonkey> WRT error handling in C: when writing APIs i tend to return an error code and any values to be returned go in pointer arguments
[03:01:26] <gilberth> Ok. Reading the sources of MathJax reveals options for element names to be processed or not. So, I might be able to get what I want, when I manage to set those options. So far, so good.
[03:01:27] <GreaseMonkey> although i am getting more and more tempted to use setjmp/longjmp...
[03:01:30] <mfiano> Try interfacing with one of the libc implementations.
[03:01:37] <moon-child> that is a very industrial pattern.  uefi/vulkan/fmod all do that
[03:02:18] <moon-child> I think passing a pointer to error code is better in some respects, because it forces the caller to acknowledge the possibility of an error, even if they just pass NULL
[03:02:28] <moon-child> setjmp/longjmp is nice.  but there are annoying restrictions
[03:02:38] <GreaseMonkey> good point w/ the pointer-to-error-code approach
[03:02:42] <moon-child> you cannot access non-volatile variables following the second return to setjmp
[03:04:00] *** Quits: Alfr (~Alfr@user/alfr) (Killed (zinc.libera.chat (Nickname regained by services)))
[03:04:05] *** Joins: Alfr (~Alfr@user/alfr)
[03:04:15] <moon-child> and you can only send an int; not enough space for a pointer, so you have to put it out-of-band or make the int an index into something else, or etc.  Also there is no UNWIND-PROTECT, so code you do not control may be unable to clean up resources it wants to
[03:04:33] <mfiano> Even CFFI implicitly agrees errno is a bad idea
[03:04:54] <mfiano> > defcvar: Note that accessing errno this way won’t work with every implementation of the C standard library.
[03:05:08] * hayley copies the Lisp 2 compacting algorithm from the GC handbook and apparently it works
[03:06:05] <GreaseMonkey> i actually wonder if, in the scenario where one is passing a pointer to an opaque struct, an error code should be shoved into the struct and if it's not set to whatever the "no error" code is then most calls get squelched and return a "call cancelled due to previous error" error, it may make the code a bit cleaner
[03:06:25] <moon-child> mfiano: hmm?  isn't errno accessed through a function, not a variable, in most libcs?
[03:06:59] <mfiano> moon-child: Right, strerror, which that quote is referring to about not working in all libc implementations.
[03:07:05] <GreaseMonkey> # define errno (*__errno_location ()) <-- this is what glibc does
[03:07:25] <mfiano> Most do
[03:07:58] <mfiano> it's __error for FreeBSD
[03:08:49] <moon-child> yes, and __errno() on openbsd
[03:08:56] <moon-child> I catalogued these when I was going to make a libc
[03:09:00] <moon-child> then I decided that was a terrible idea
[03:09:29] <mfiano> In my code I just did (cffi:defcfun ("__error" error-number) (:pointer :int))
[03:10:42] *** Joins: dra (~dra@2a04:4540:6400:e300:a031:7dec:ad3:e1ac)
[03:10:46] <dra> Hello!
[03:11:30] <moon-child> (that is, I was going to make a libc that was binary-compatible with all the existing libcs.  Who knows why)
[03:19:00] <gilberth> ok. I am in business. Writing chores await me.
[03:20:24] <random-nick> can the groveller find the errno function?
[03:21:04] <mfiano> funnily enough the groveller doesn't work correctly on FreeBSD
[03:21:29] <|3b|> sm2n: that Simula claims to be using a low-pass filter, which is sort of the opposite of hinting :)
[03:21:38] <mfiano> Tries calling out to "cc" and gets a error code of 1
[03:21:50] <mfiano> Probably assumes gcc or something dumb
[03:23:30] <|3b|> hinting = interpret our pixels a set of infinite bandwidth squarewave basis functions, and try to distort the font into something representable with that basis. Low-pas = interpret pixels as samples in a limited bandwidth continuous signal (so fourier basis or whatever), and then remove high frequencies
[03:24:23] <sm2n> |3b|: the desirable parts of the output (sharpness etc) look like the output of a bad hinting algo imo is all I'm saying
[03:24:43] <random-nick> mfiano: which is odd, because the CFFI manual includes an example which uses #+freebsd
[03:25:05] <|3b|> after thinking about the problem more earlier, i think i decided that distinction is why i expect hinting to not work in VR. on a monitor, the "squarewave" interpretation is somewhat reasonable, but in VR it probably isn't
[03:26:04] <mfiano> random-nick: github.com/cffi-posix/cffi-errno won't even compile because of this uiop:call-program call not returning 0 at load time.
[03:26:11] <|3b|> sm2n: do you mean it lacks sharpness in the filtered output?
[03:26:21] <|3b|> (as bad hinting would)
[03:26:23] <mfiano> it's deep in the cffi-groveller source
[03:26:31] <mfiano> I gave up looking into it
[03:27:24] <sm2n> yeah
[03:28:42] * hayley found a bug in the Handbook!
[03:29:07] <mfiano> Plenty of those, but still the best documentation around.
[03:29:15] <mfiano> I filed like 5 already?
[03:29:45] <hayley> relocate in Algorithm 3.2 is wrong, because it calls size(scan) after moving an object. However, the object can be moved less than its size, and thus the old scan pointer can't be used to tell anything about the object.
[03:29:49] <gilberth> hayley: Be so kind and leave a page number for the time I eventually get around to read that book.
[03:30:01] <hayley> The solution is probably to retrieve the size before moving.
[03:30:13] <hayley> gilberth: Page 35
[03:30:15] <mfiano> Oh, you were talking out of context.
[03:30:32] <hayley> https://gchandbook.org/errata.html does not have the bug.
[03:30:50] <hayley> Granted, who'd be dumb enough to implement it based on the Handbook algorithm?
[03:30:56] * |3b| 's other thought this morning is that VR stuff is still less of engineering "pick a problem, implement a solution, done", and more science "form hypothesis, try it, see how it fails, repeat", which is why experiencing the result is important
[03:31:07] <gilberth> hayley: You tell me.
[03:32:04] <moon-child> hayley: 'object can be moved less than its size' you mean like if you have a pointer to the interior of an array, but none the beginning, so you get rid of the prefix?
[03:32:34] <hayley> I'm not sure.
[03:33:30] <hayley> But, say we have an object with 4 words. We move the object backwards just 2 words. Now the object header is probably trashed, so we can't call SIZE on the old address, only on the new address.
[03:34:14] <gilberth> ok. That's obvious.
[03:34:17] <moon-child> ah, yes, one of these non-concurrent algorithms I keep hearing so much about :)
[03:35:02] <moon-child> (wouldn't your to-space normally be distant from your from-space, not overlapping with it?)
[03:35:19] <hayley> But the algorithm in the handbook still does SCAN <- SCAN + SIZE(SCAN); oops.
[03:35:31] <hayley> This is a mark-compact collector, which uses only one space.
[03:36:29] <moon-child> ahh
[03:37:17] <gilberth> muLisp uses such a collector. With a twist, that I never got: ATOMs are moved to the higher end of the space and CONSes are moved to the lower end. The free space is in between.
[03:37:23] <hayley> And, yes, you usually can't make mark-compact concurrent, cause the mutator can still have old addresses, and those need to have forwarding pointers that the mutator can still traverse.
[03:37:40] <moon-child> gilberth: sicl plans to do that too
[03:37:47] <hayley> Either you go full semi-space (no one does), or you just copy a small part of memory (the latter).
[03:38:08] <moon-child> I would guess it improves locality: conses are always tightly packed
[03:38:11] <hayley> IIRC there are different lists for dyads and racks, but those are not compacted.
[03:38:21] <gilberth> muLisp does this for type checking as I just needs to compare the pointer to say the cons allocation pointer.
[03:38:46] <hayley> It also reduces the per-cons overhead, so that you don't need a size per cons. Just check if it's in some region of memory.
[03:38:57] <moon-child> hayley: I mean for the nursery
[03:39:12] <hayley> I didn't know that about the nursery.
[03:39:15] <gilberth> And then being an 8-bit machine, it does this only on the high 8-bits of the 16-bit address. Quite neat.
[03:39:34] <hayley> beach wants to preserve allocation order, but you can do that while moving dyads to one side and racks to another, I guess.
[03:39:50] <moon-child> I'm sure it's up for negotiation.  But https://0x0.st/-h7e.png
[03:39:52] <hayley> Hah, go figure.
[03:40:01] <hayley> Figure 24.1 on page 128.
[03:40:13] <hayley> Yep, that one.
[03:40:46] <gilberth> What is a dyad, what is a rack? dynamic size versus static size?
[03:41:05] <moon-child> yeah
[03:41:08] <moon-child> dyad is always two words
[03:41:12] <moon-child> used for conses and standard object headers
[03:41:41] <gilberth> ok
[03:42:30] <White_Flame> the rack is the main storage of objects
[03:43:06] <hayley> Well, semispace GC needs 668 words, and mark-compact needs 466 words.
[03:44:18] <moon-child> no one ever claimed semispace took up less space than other solutions.  point is SPEED
[03:45:03] <hayley> Not exactly easy to measure speed.
[03:53:00] *** Quits: random-nick (~random-ni@87.116.181.93) (Ping timeout: 265 seconds)
[03:53:30] * hayley uploaded an image: (29KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/sYSMLQQwPViAhOxkasiOsIlT/three-derivatives.png >
[04:04:36] *** Quits: dra (~dra@2a04:4540:6400:e300:a031:7dec:ad3:e1ac) (Ping timeout: 265 seconds)
[04:21:16] <hayley> Seems O(heap) kicks in eventually and I do more reads and writes with larger heaps.
[04:26:13] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (Remote host closed the connection)
[04:26:57] <hayley> Well, mark-compact does many more reads, but semispace does more writes up to 900 words.
[04:31:03] * hayley uploaded an image: (35KiB) < https://libera.ems.host/_matrix/media/r0/download/matrix.org/VNlYFSPcbkHbtvgVddxKGAKA/three-derivatives-rw.png >
[04:31:45] <hayley> That said, one should pay attention to locality. /me is not writing a cache simulator.
[04:33:29] <gilberth> hayley: What's your plan? Implement every algorithm you find in the GC Handbook?
[04:33:56] <hayley> It would take too long, and the Racket debugger (moreso in the DrRacket IDE) is non existentn.
[04:34:31] <hayley> Not even a backtrace when I break an assertion in the GC.
[04:35:23] <gilberth> Hmm, how do you debug then? Using print statements?
[04:35:36] <hayley> gilberth: And AIUI I can't implement naïve reference counting, since I can't be informed when a variable goes out of scope, nor can I do anything with stacks for the same reason.
[04:35:38] <hayley> Correct.
[04:36:32] <gilberth> I use print for debugging all the time.
[04:36:46] <gilberth> hayley: Why bother with RC anyway?
[04:36:51] <hayley> Hm, I guess I could compare root sets upon every call to CONS, and work on the difference. It's a simulation, so no one has to know that it's a stupid and slow approach to faking it.
[04:37:03] <hayley> gilberth: How else would I know how slow it is?
[04:37:43] <gilberth> Will you know by benchmarking a toy function?
[04:38:30] <hayley> Will I know by not benchmarking a toy function?
[04:38:44] <gilberth> Fair enough.
[04:40:19] <hayley> Though I can't expose any new functions from GC to mutator, so I can only sample reads and writes at each GC cycle. But it should consistently underestimate then.
[04:41:34] * hayley was informed that Ravenpack is hiring for the third time now.
[04:42:12] <gilberth> You want to apply?
[04:42:40] <hayley> I'm supposed to get a summer job. But it's still hacking and not a ReAl JoB, so my dad won't shut up.
[04:44:08] <gilberth> Your dad will never shut up. I mean, after all, you study to not stack shelves all your life, don't you?
[04:47:48] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[04:49:40] <dave0> maw
[04:50:02] <gilberth> Hello dave0!
[04:50:08] <dave0> hey gilberth!
[04:50:19] <dave0> &#20;
[04:51:57] <gilberth> No space for me? That's a DC4. :(
[04:54:42] <dave0> oh i thought it was hex!
[04:55:22] <gilberth> At least is not octal. ;)
[04:55:35] <gilberth> Hex is &#x20;
[04:55:54] <gilberth> Very Lispy.
[04:56:35] <dave0> i can't even do octal in my head
[04:56:55] <hayley> gilberth: Seems so.
[04:57:35] <gilberth> dave0: Use the CADR for a while. Space is 40.
[04:58:37] <gilberth> hayley: You should stop caring about what your dad says. My opinion.
[04:58:40] <edgar-rft> Maybe it works better if you have an octagonal head.
[04:58:52] <hayley> gilberth: Well, if I don't, I get kicked out of the house.
[04:59:28] <White_Flame> are you paying rent otherwise?
[04:59:35] <gilberth> hayley: Well, that would be a good thing in the long run.
[04:59:49] <hayley> White_Flame: I am paying rent.
[05:00:03] <gilberth> You do? *gasp*
[05:00:03] <hayley> gilberth: Not when I do not have a job, and apartments are fucking expensive.
[05:00:05] <White_Flame> well then, he doesn't really have much reason if you can cover expenses
[05:00:23] <hayley> It's all coming out of government welfare basically.
[05:00:41] <gilberth> hayley: Yes, they are. I am well aware.
[05:00:41] <dave0> share a flat with your friends and party
[05:01:44] <gilberth> I am still puzzled your dad takes rent from you. And if he does, it's a contract and as White_Flame mentioned: You pay the rent => No reason for him to kick you out.
[05:02:03] <White_Flame> well, it's his/their house.  they can choose who to board and not
[05:02:25] <White_Flame> when it comes down to brass tacks
[05:03:08] <gilberth> Sure. Technically, yes. But I find it hypocritical to take rent and then demand to stack shelves, it should be hayley's business how she earns the money for rent.
[05:03:38] <White_Flame> right, it clearly sounds like a "you're doing wrong things in life, do different things" thing
[05:04:34] * gilberth spontaneously is grateful for his parents.
[05:07:36] <hayley> Technically it is my mum's house (± bank loan), but he is abusive towards her too.
[05:08:00] <hayley> .oO(https://www.youtube.com/watch?v=Vknl2oVwd8I)
[05:08:00] -ixelp- Kingsman: The Secret Service final credits scene - YouTube
[05:08:05] <gilberth> Terrific!
[05:09:31] <gilberth> [Anyhow welfare works differently here. Here hayley would not get welfare as long as she lives at home and studies, it would be the obligation of her parents to pay for his living costs while at uni. Upto an age of 25.]
[05:09:46] <gilberth> s/his/her/ ;sorry
[05:10:32] <hayley> Full time study is considered something that stops you from working, and you pay through the nose for university here. Not as bad as paying through the mouth too (e.g. the US), but still a fair bit of money.
[05:10:35] <gilberth> hayley: So it's your mum's house and HE wants to kick you out? What does your mum say about that?
[05:11:11] <hayley> She says I don't have to get a job if I don't want to.
[05:11:24] <gilberth> hayley: And status of a full time student would bar you from welfare?
[05:11:48] <hayley> At my age you get welfare if you can't work. I can't work as I am at university full time.
[05:12:07] <gilberth> hayley: So then, if she says so, everything is in order, isn't it? It's HER house. Your dad is only guest in this case.
[05:12:20] <hayley> Theoretically, yes.
[05:12:24] <gilberth> hayley: ok.
[05:13:27] <gilberth> Do you need a job right now, or would savings do?
[05:13:55] <hayley> If I could stay at home, I could probably live on savings. Else not.
[05:14:21] <gilberth> Including paying "rent"?
[05:14:34] <hayley> Probably.
[05:14:48] <gilberth> Then your dad should shut up.
[05:14:55] <hayley> Still cheaper than an apartment by a few times.
[05:15:27] <gilberth> Seriously, you make more money in the long run by hacking GC benchmarks then by stacking shelves.
[05:19:23] <hayley> It's not money, it's about bullshit notions of work ethic.
[05:20:20] <gilberth> I figure that. Tell him: Nobody got rich by working.
[05:20:57] * hayley (somewhat ironically) was having a discussion about grifting and social capital in another room, then her ex showed up.
[05:22:59] <hayley> I've been bullshitted before by people, but not in the very specific way that came up. Like once someone said they wanted to cure autism at child-birth, so I told them to shut it and not be an asshole, they said "lol ur white" and I said "so? you're an asshole" more or less
[05:24:27] <hayley> And, of course, I took down another grifting project with some friends, where they wanted money for a social network server written in C, which apparently would have somewhat better moderation tools, if your definition of "better" means that you can get banned for no reason quicker. But my ex is into that stuff sadly.
[05:25:35] <hayley> They wanted money, and disappeared after 1.5 years. Not sure if anyone paid anything, but there were idiots defending it. I hope not.
[05:27:04] <hayley> Hence, one who has social capital (a funny term for "a large following on the internet" perhaps) can turn it into actual capital if they pull off a good scam.
[05:27:24] <dave0> https://youtu.be/DrUB0g8Vjgg
[05:27:25] -ixelp- Simply Red - Money's Too Tight (To Mention) - YouTube
[05:28:37] <hayley> I guess it wouldn't hurt so much, if they didn't promise any software and just wanted donations, and if they didn't accuse me of running a psychological operation by the far-right, because I had called them out.
[05:28:44] <gilberth> hayley: It's the very business model of those "influencers".
[05:28:56] <hayley> Precisely.
[05:30:51] <hayley> The original topic was about https://twitter.com/rechelon/status/1467620744733634575 where people are being asked to pay for emotional labour.
[05:31:58] <hayley> Probably a good thing, if someone is being shitty, but from experience that is not what happens. What happens is more like e.g. "Here is my regular expression engine which uses DFAs and derivatives, and a writeup on how it works." "I read that you need O(2^n) states though?" "Send me $20 and I'll tell ya."
[05:32:22] <gilberth> lol
[05:32:38] <hayley> IMO I clearly indicated that I was fine with describing it for free. So this is rude.
[05:33:17] <gilberth> And that really happened?
[05:33:53] <hayley> And I see it as an evasion strategy when someone has a legitimate problem, like that ableist person who felt the need to point out that I'm white.
[05:34:23] <hayley> The story about REs didn't happen, I made it up. But the one about curing autism at childbirth did.
[05:34:47] <hayley> And the one about writing servers in C also did. My first article "A Parastatal Problem" apparently killed it.
[05:35:51] <gilberth> Ah. Can't you just ignore those people?
[05:35:51] <hayley> I still have a link for the latter: https://weirder.earth/@dzuk/104780871934068162
[05:36:29] <hayley> Generally, yes, except when I walk in on the receiving end by accident. And it's a discussion about hypotheticals anyway.
[05:37:50] <hayley> Quite a hairy one for me. I guess if you get along with everyone and never get on the receiving end (coughmy excough) then it looks good.
[05:39:16] <hayley> If we are charging for emotional labour, then my theory has always been that no one gets off any better. Two people can have a loud argument, and neither would care who is more exhausted or not.
[05:39:43] <hayley> Even if one person is probably right, and the other probably wrong, the latter doesn't know any better. So you come off even anyway.
[05:39:47] <White_Flame> what is "emotional labor" in this context?
[05:40:34] <hayley> White_Flame: I read it as "having to put up with someone's bullshit". But IMO both parties see their situation as "putting up with the other's bullshit" most of the time.
[05:41:13] <White_Flame> so just "I'm in a sucky state, pay me to cope" and not "I'm going to put myself into a sucky state for $REASONS if you pay"?
[05:41:31] <hayley> "I'm in a sucky state because you said that"
[05:41:47] <White_Flame> "you" being those who the person wants funding from...
[05:42:05] <hayley> Yes.
[05:42:24] <White_Flame> sounds more like an annoyance fee that they want to levy than some sort of crowdfunding thing?
[05:43:35] <hayley> I mean, my discussion with the Rust regex person was frustrating, but it would be frustrating for him too. I'd read something, give it to gilberth, and gilberth would tell me it's wrong. But I'd have to come up with a response. That guy would feel like I am over-confident as he's done all the engineering work to avoid the hairy cases that he thinks are important.
[05:43:38] <hayley> Right.
[05:44:30] <White_Flame> so ... silly people who don't know how to communicate effectively need idiot pay :-P
[05:44:53] <hayley> But it all comes off as entrapment (best word I can think of) where you think you're fine to say something by context, but actually you're definitely not and you need to pay up.
[05:44:57] <hayley> Something like that.
[05:45:44] <White_Flame> so really more associated with language policing?
[05:45:52] <White_Flame> as a more specific thing?
[05:46:19] <hayley> Not really.
[05:47:48] <hayley> Just that you disagree. Also that they think you came to them to complain, when it appears to you that their idiocy was published to you. Both are correct, I guess. So IMO the "labour" goes both ways.
[05:48:04] <White_Flame> thinking it's "fine to say something" but "it's definitely not" does sound specific to read
[05:48:07] * hayley looks through her book for memoized phrasing
[05:48:43] <hayley> No, it's not about language though. It's just context. Someone shouts into a crowd and you can't say anything back.
[05:48:52] <White_Flame> it's amazing how communication is so broken nowadays
[05:49:12] <White_Flame> well, not communications itself, but people's own craziness around it
[05:49:32] <hayley> "Such a belief that a conversation somehow belongs to someone, and that they have some authority over it even, is highly erroneous. If we were to analyse conversation as if it were a commodity, it is clear that any notion of value is produced by whoever continues and reads the conversation. ..."
[05:49:49] <White_Flame> adding "so now you owe me for my emotional labor" is just the joke on top of the comedy cake
[05:50:27] <hayley> IOW, you only gain value from shouting into a crowd because the crowd is there. But it can't sustainably be a free service, and people can shout back.
[05:51:30] <hayley> The only reason you might get away with picking on anyone who shouts back is "social capital", i.e. that you have a following that can't reason independently.
[05:51:59] <White_Flame> "crowd" = their accumulated social capital/audience?
[05:52:25] <hayley> Their social capital would be a subset of the crowd, usually.
[05:53:12] <hayley> The terminology sucks, mostly because I am unaware of people trying to formalize this bullshit, so I invented it all. I seriously hope no one else is stupid enough to formalize it though.
[05:53:21] <White_Flame> heh
[05:54:01] <White_Flame> from my partial comprehension of it, it's just people trying to """legitimize""" their stupid disagreements and dislikes
[05:54:11] <hayley> I mean, I think I wrote an okay book, but the reception was bad, and what good reception I got was because people twisted the ideas beyond recognition.
[05:54:17] <hayley> That's probably about right.
[05:54:21] <White_Flame> instead of acknolwedging that peopel have disageements & dislikes
[05:54:25] <White_Flame> and are free to have them
[05:54:45] <White_Flame> I mean, this is the epitome of what people mean by "snowflake"
[05:55:13] <gilberth> What do they mean by "snowflake"?
[05:55:15] <hayley> I also don't know any economics or game theory words, but my thesis is that no one gets off (notably) better in an argument. So claims to ownership or emotional labour or whatever else are baseless.
[05:55:23] <White_Flame> ah, I see what you mean now
[05:55:41] <hayley> gilberth: Someone who is _very_ sensitive.
[05:55:56] <White_Flame> someone who melts down whenever their surroundings don't agree with & support them
[05:56:17] <gilberth> ok.
[05:56:23] <hayley> https://applied-langua.ge/software-and-anarchy.pdf page 36 or so. Look, it even has a quote from the olde #lispcafe in it!
[05:56:57] <hayley> Rather page 39 entitled "Social capitalism".
[05:57:51] <hayley> And it's hairy to me simply because "one does not need to justify attempting to rid themselves of unpleasant people; but the same phrases are also frequently used to avoid being held accountable for providing misinformation, or being unpleasant themselves." It's all relative and no one's really in the right without an observer.
[05:58:11] <White_Flame> exactly
[05:58:24] <White_Flame> label others as "bad" enough to eject them
[05:58:30] <White_Flame> or, to justify an ejection
[05:58:39] <White_Flame> instead of just, like, disagreeing :)
[05:59:00] <White_Flame> but of course, "conversation" used to be a private thing
[05:59:09] <White_Flame> nowadays it often happens in a very public venue
[05:59:11] <gilberth> [This somewhat reminds me of the difference between my wife's family and my own. In the former disagreement over anything implies war and abandoning contact. In my family it's totally accepted that people come to different conclusions or have different views or value things differently. My wife was always surprise how relaxed our family is when together, even when discussing hot irons like politics.]
[05:59:54] <White_Flame> if yo'ure in a coffee shop and somebody within earshot pops into "your" conversation at "your" table, that's not necessarily welcomed nor implicitly open to others to participate
[06:00:18] <White_Flame> but postings online in a public place?  not so much
[06:00:36] <hayley> Still, I can appreciate that one can dispose of assholes. But, unless that person is saying "You are fat and you smell bad" or some actual insult, then there isn't a well-defined bad guy.
[06:01:05] <White_Flame> gilberth: yeah, there's a lot of insecure simpletons out there who use cutting off contact as some sort of ammo
[06:01:21] <White_Flame> it's certainly not just her
[06:01:23] <hayley> Yes, online posting is more like shouting into a crowd. Social capital perhaps then is like having a platform and bodyguards to "take care of" any dissenters.
[06:02:04] <White_Flame> or, an actual internet place with active moderation that you control :-P
[06:02:18] <White_Flame> (but people forget that anything other than social media exists)
[06:02:27] <hayley> Hey, I thought we were doing physical metaphors. No fair!
[06:02:37] <gilberth> Or a code of conduct at your arsenal.
[06:02:47] <White_Flame> gilberth: that still demands moderation
[06:02:54] <White_Flame> else it's just dogpiling
[06:03:06] <gilberth> Yes, I didn't imply otherwise.
[06:04:05] <White_Flame> I view the moderation itself as the important part; what structure of rules or judgment they use is quite variable
[06:04:27] <White_Flame> social media usually leaves people without any effective moderation tools
[06:04:50] <White_Flame> or undermines it algorithmically :-P
[06:12:37] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 240 seconds)
[06:13:22] *** Joins: aeth (~aeth@user/aeth)
[06:13:29] <hayley> But the physical metaphor breaks down on the Internet. Someone read the book and complained what I was proposing was "pseudo-democratic". But that's not at all right: a democracy tries to make everyone happy by following the majority in making region-wide decisions, and what I propose makes everyone happy by letting them make their own independent decisions.
[06:14:05] <hayley> So, more like anarchy to me, except that you don't need any conflict resolution procedures at all, since no one else cares. Hence the name of the book.
[06:34:43] *** Quits: abrantesasf (~abrantesa@187.36.170.211) (Remote host closed the connection)
[07:25:07] <gilberth> hayley: Any thoughts on, if we could detect when a grep machine explodes due to O(n^2) and a fallback to non-greppy machine is called for?
[07:25:55] <hayley> Could build a non-grep machine, and see if the grep machine grows too large relative to the non-grep machine.
[07:27:25] <gilberth> Set a guessimate state limit based on the non-greppy? Yeah, sounds about a good idea. That limit could even be somewhat non-linear.
[07:28:47] <gilberth> I wonder how many of the engines claiming to build an DFA, really build a grep machine, or rather run the non-greppy again and again, that is with backup.
[07:30:11] <gilberth> But then, when you have a good prefix, with low false negatives, it won't matter much. Hmm.
[07:32:02] <hayley> I wouldn't be able to say who builds a grep machine or not. But SIMD and a prefix is nicer, because you have fewer branches.
[07:32:58] <gilberth> Yes, for seeking a needle in the haystack, I guess. Nah, did I mention, that I don't care for needles?
[07:33:15] <hayley> Or you could interpolate and set a compile time limit based on the number of states. A very bad RE might even just use bytecode, hypothetically.
[07:33:50] <hayley> Yes, I know, you do the very important task of lexing. Because every Lisp programmer requires inventing a bespoke grammar including new lexical rules.
[07:35:22] <gilberth> Very funny. We need to deal with random grammars and syntax coming from outside our little, fine world.
[07:36:44] <gilberth> At times it seems I spend most of my time writing parsers.
[07:37:56] <moon-child> who needs the outside world?!
[07:38:38] <gilberth> moon-child: I just can't hack everything on my own. My life is too short for that.
[07:40:13] <moon-child> and yet you hack for yourself not only the parsers but also the parser generators?
[07:40:44] <gilberth> Yes. And?
[07:53:53] <sham1> How much are needles actually needed though
[07:59:02] <hayley> How often do you SEARCH or CL-PPCRE:SCAN or CL-PPCRE:ALL-MATCHES, etc?
[08:00:15] <gilberth> There is a difference between just searching and to match a fully anchored RE.
[08:03:15] <moon-child> the problem I have with grepping is that prose is not very big; and if I am grepping code I want to express a template syntax tree, not a template string
[08:04:58] <sham1> Well too bad. Most tools operate on text instead of semantic structure
[08:05:05] <moon-child> bully for those tools, then
[08:05:12] <moon-child> fuck unix
[08:08:24] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[08:09:40] * moon-child dreams of JIT that will detect array access patterns and transpose dimensions accordingly
[08:10:11] <hayley> gilberth: Well, the Rust regex library runs a set of non-greppy DFAs on each character.
[08:11:03] <hayley> https://github.com/rust-lang/regex/blob/master/src/sparse.rs Wonder how they represent submatches if they just have a set of instruction pointers though.
[08:11:04] -ixelp- regex/sparse.rs at master · rust-lang/regex · GitHub
[08:11:22] *** Quits: semz (~none@user/semz) (Ping timeout: 268 seconds)
[08:14:54] <hayley> Hm, one comment indicates a prefix of .*? which sounds like a grep machine of sorts. And then there is a reversed DFA for finding the start of a match again. Pfft.
[08:17:05] <hayley> "// We're so totally hosed." Don't think he really wants to use a NFA.
[08:20:50] <gilberth> .*? won't by magic yield a smaller automaton than we have. And they run a set of DFAs? Thus an NFA, or what?
[08:21:09] *** Joins: lisp123 (~lisp123@5.30.23.247)
[08:21:10] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[08:21:38] <hayley> No idea, sorry. /me can't read Rust and also can't read 60kLOC regex engines.
[08:22:09] <gilberth> You know more Rust than I do.
[08:22:46] <gilberth> I wonder what they need 60kLoC for.
[08:23:07] <hayley> Like 3 VMs (DFA, Pike, backtracking) and prefix matching IIRC.
[08:23:17] <gilberth> I believe the early Linux kernels were smaller than that.
[08:23:40] <gilberth> Three VMs? Nifty.
[08:24:14] <hayley> https://github.com/rust-lang/regex/blob/master/HACKING.md Missed this document, I guess.
[08:24:15] -ixelp- regex/HACKING.md at master · rust-lang/regex · GitHub
[08:24:16] *** Joins: semz (~none@user/semz)
[08:25:44] <hayley> The DFA doesn't seem to ever touch Save() instructions, which confuses me. But I guess they only use that for the start and end of matches in a DFA, so they handle them specially?
[08:26:16] <hayley> Recall: "captures is the most expensive of them all because it must do what find does, and then run either the bounded backtracker or the Pike VM to fill in the capture group locations. Both of these are simulations of an NFA, which must spend a lot of time shuffling states around."
[08:27:18] <hayley> Save is handled properly by the Pike VM. So I guess the DFA still just needs to know instruction pointers only.
[08:27:50] <gilberth> "In particular, a design goal is to make searching linear with respect to both the regular expression and the text being searched." Ok, we can do that, easy. Can they?
[08:28:02] <hayley> lol
[08:28:48] <gilberth> Next thing mentioned is the Pike machine, which is an NFA, isn't it?
[08:29:00] <hayley> Right.
[08:29:18] <hayley> "Lastly, the real workhorse of this library is the "lazy" DFA in src/dfa.rs. It is distinct from the Pike VM in that the DFA is explicitly represented in memory and is only ever in one state at a time."
[08:30:08] <hayley> Okay, the sparse sets are used while lazily converting a NFA to a DFA. So the operation of the DFA engine still confounds me.
[08:32:29] <gilberth> So they first scan using Thompson perhaps with an DFA, and then scan again for submatch addressing? Valid approach for a low needle count. Pointless for my application, as my haystack is made of needles only. What I would like to know though: Is there a grep[] machine?
[08:32:29] <hayley> The description makes me think that a program does not use a grep machine. But all the DFA execution code is in terms of a single execution. So I guess they must "backtrack".
[08:32:46] <hayley> Nope!
[08:32:53] <gilberth> Nope?
[08:33:08] <gilberth> Milady, let me read what they wrote.
[08:34:33] <hayley> "The only advantages it offered over the dynamic Pike VM that was built at runtime were the following: 1. Syntax checking was done at compile time. Your Rust program wouldn't compile if your regex didn't compile."
[08:35:03] <hayley> Don't these people constantly brag about how if it compiles, it must work? How is this half of "the _only_ advantages"? Huge to me.
[08:36:29] <hayley> I'm pretty sure the compiler macro I wrote accidentally prevents invalid REs from compiling. At least it's noisy.
[08:37:36] <hayley> (defun f (x) (one-more-re-nightmare:all-string-matches "(a|b*" x)) ⇒ At end of input  (a|b* In context PARENS: While parsing PARENS. Expected: (stuff) [Condition of type ESRAP:ESRAP-PARSE-ERROR]
[08:37:50] <gilberth> They do what? Backtracking in linear time? Really? *gasp* Why again is that called backtracking, again? Or is this just a failed attempt to explain how subset construction works? /me reads further.
[08:40:46] <gilberth> And no, the worst case size of an DFA does not depend on the size of the input. First year CS, stupid^Wdear author.
[08:42:37] * hayley hears shouting downstairs.
[08:43:16] <gilberth> Don't you have ear plugs?
[08:43:17] <hayley> Where's it say the size of a DFA is related to the size of the input?
[08:43:26] <hayley> "Get your ass down here!"
[08:43:36] <hayley> Lovely words.
[08:45:15] <gilberth> "DFAs are susceptible to exponential state blow up (where the worst case is computing a new state for every input byte, regardless of what's in the state cache)." 4th paragraph in "Architecture overview"
[08:46:09] <gilberth> hayley: Good news is: You could keep your brain. Only your ass is asked for.
[09:00:12] <hayley> Ah, yeah, that's not "exponential state blow up".
[09:00:48] * hayley is back after payslip email spelunking. Also, Thunderbird doesn't handle table editing well. But nor did anything ever that wasn't a spreadsheet editor, from experience.
[09:00:50] <gilberth> You survived?
[09:00:57] <hayley> Maybe.
[09:01:34] <gilberth> Maybe? Do you fear being poisoned?
[09:01:40] <hayley> .oO(If you had a sufficiently large cache, you could just make a O(2^n) long string, and so you'd have exponential blowup without constantly cache missing.)
[09:02:20] <hayley> Well, more seriously, I woke up once thinking he was shouting. But no one was shouting apparently. /me fears PTSD of some sort.
[09:02:38] <gilberth> hayley: Perhaps I just too picky with those details. But it smells to me a bit like the author has a poor understanding of the theory, or is poor at writing. Sorry.
[09:03:28] <hayley> He did sound like that in conversation.
[09:03:38] <gilberth> hayley: Yes, and this is why I would suggest to move out, if possible.
[09:03:53] <hayley> But I only wrote a RE engine because university classes were moving slowly. So I can't talk about understanding theory.
[09:04:12] <gilberth> hayley: Ah, that was the very same guy?
[09:04:18] <hayley> Yes.
[09:08:32] <hayley> Also ironic that my dad complains he fiddles with spreadsheets all day. That's not a "real job".
[09:09:32] <hayley> https://www.reddit.com/r/rust/comments/r6e5s3/the_onemorerenightmare_compiler/hn6nfsg/ So now everywhere I go, someone points out the name. Nice.
[09:09:33] -ixelp- The one-more-re-nightmare compiler : rust
[09:09:50] <hayley> "your choice of name for the crate is just brilliant" Hol up, this isn't a Rust library, so not a crate. lol
[09:10:04] <gilberth> "What do you do for a living?" "I am a spreadhseet-fiddler."
[09:10:53] <hayley> Still, my point holds. But what did I expect calling it one-more-re-nightmare?
[09:11:16] <gilberth> hayley: Say you plan a career as a professional garbage collector.
[09:12:54] <hayley> Could do.
[09:13:06] * hayley will make Cliff Click look like a LLVM developer
[09:13:18] <gilberth> Show him the handbook :-)
[09:14:26] <hayley> He's seen it.
[09:20:54] <gilberth> And? Did he ask what it is about?
[09:21:12] <hayley> Pretty clear.
[09:21:19] <moon-child> doesn't he nowadays write in java?  I think I would rather write c++ than java!
[09:21:34] <hayley> I'd rather Java than C++.
[09:21:38] <moon-child> (c++ being hotspot's implementation language.  It at least has macros)
[09:21:45] <moon-child> '''macros'''
[09:21:53] <gilberth> Java has GC.
[09:21:53] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[09:22:11] <gilberth> For macros there always is m4.
[09:22:15] <moon-child> bdw go--well, not brr, but it goes somewhere
[09:22:16] <hayley> Anything more than "reusing memory when the programmer doesn't say to" probably sounds like https://www.youtube.com/watch?v=aW2LvQUcwqc
[09:22:17] -ixelp- Technical Jargon Overload - YouTube
[09:31:02] *** Joins: treflip (~user@95.79.32.99)
[09:41:08] <sham1> Also nothing serious you from using the C preprocessor with Java except ethics
[09:41:16] <sham1> Stops*
[09:41:27] <sham1> Mobile phones <3
[09:45:08] <White_Flame> I wish autocorrect would just serious making mistakes
[09:47:16] <sham1> Yes
[09:47:59] <sham1> Also, this weather is terrible. My mask gets all soggy
[09:50:03] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Remote host closed the connection)
[09:51:13] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[10:00:49] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 265 seconds)
[10:39:31] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:41:53] <hayley> https://www.youtube.com/watch?v=LbVvYuzbk-A
[10:41:53] -ixelp- Warriors (Full Length Version) - YouTube
[10:56:27] *** Joins: sifisega (~silas@101.100.130.75)
[10:56:37] <sifisega> anyone awake?
[10:59:09] <sham1> Mayhaps
[10:59:18] <moon-child> sifisega: yes, unfortunately
[11:00:46] <sifisega> what's keeping you fellows up?
[11:01:57] <moon-child> just pretend I live in london and have just woken up
[11:02:14] <gilberth> Me too, unfortunately, too.
[11:02:47] <moon-child> gilberth: you stayed up all knight?
[11:02:54] <sifisega> So the sun is keeping you unfortunate souls awake?
[11:02:55] <moon-child> (the extra k is for you, btw)
[11:03:32] <gilberth> moon-child: Yes. And thanks for the "k".
[11:04:42] <hayley> It is 6:30pm, it'd be weird for me to sleep now.
[11:04:58] <gilberth> But I am a nocturnal person and would usually not get to sleep before 4:00 when I really early or 6:00 in the morning. It's 8:34 local time now. I am a bit off.
[11:05:29] <sifisega> its just 8:30 now, im nearly ready to hit the sack
[11:06:22] <sifisega> What is the apeal to staying awake all night?
[11:06:33] <hayley> https://www.youtube.com/watch?v=359qGNryZmY
[11:06:33] -ixelp- Starship Trooper: a. Life Seeker, b. Disillusion, c. Würm - YouTube
[11:06:52] * hayley 's schedule is 8:30am to 11:30pm
[11:06:55] <gilberth> There is no appeal to it, it's my natural sleeping pattern. Unfortunately.
[11:07:01] <hayley> ^^
[11:07:21] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 276 seconds)
[11:07:57] <hayley> Hm, https://gchandbook.org/errata.html has an email for sending in errata. /me has a go
[11:08:29] <gilberth> My most active time is between 21:00 til around 03:00, no matter how much I slept or have not slept.
[11:09:18] <moon-child> https://pbs.twimg.com/media/FF88OBkVgAAcAk7.jpg
[11:09:55] * hayley eye twitches at the idea of "deleting data"
[11:10:04] * ck_ increases "leverage" counter
[11:10:25] <gilberth> hayley: Says a garbage collection expert.
[11:10:37] <moon-child> gilberth: but garbage is not data!
[11:10:44] <hayley> gilberth: Yes, if you free() or GC, there is no guarantee that your data disappears from memory.
[11:10:47] *** Quits: jurov (~jurov@rev-81-92-255-36.radiolan.sk) (Ping timeout: 265 seconds)
[11:11:07] <gilberth> moon-child: No? What else? Forgotten bits?
[11:11:14] <hayley> And someone may copy above the GC, which is precisely why I do not like the idea.
[11:11:36] <moon-child> gilberth: they are bits, but they are not meaningful
[11:11:49] <moon-child> a bit is only meaningful if it has context; that is, a pointer
[11:12:00] <moon-child> and that is only GCed to which there are no pointers
[11:12:11] <gilberth> I am sure they don't loose they meaning, only because I dropped my pointer.
[11:12:52] <moon-child> there is no such thing as intrinsic meaning.  Only extrinsic meaning, which derives from context
[11:13:19] <moon-child> if you find a book written in an alien script you will not be able to make heads nor tails of it.  Nor will anybody else, except the aliens
[11:13:36] <gilberth> Context is a broad term. What if the dropped pointer pointed to say a PDF copy of the GC handbook. That would sure be meaningful bits.
[11:13:54] <moon-child> sure
[11:14:00] <moon-child> how would you know how to interpret them
[11:14:17] <sham1> Zeroing garbage collector, or zeroing free(), oh my
[11:14:19] <moon-child> given n bits, there are at least 2^n valid interpretations.  How will you know which one to pick?
[11:14:56] <gilberth> I'd recognize the PDF magic header and consult the spec. I mean there is context. It was bits stored on my machine, not on an alien machine from Alpha Centauri.
[11:15:26] <moon-child> fair enough
[11:18:30] <gilberth> Otherwise /lost+found would not make sense. Just a thought.
[11:19:48] <moon-child> hmm.  object graph has generally much greater granularity than fs tree.  But I wonder if you could prune it so lost+found would do something interesting
[11:21:29] <gilberth> I bet you could for document-like object trees. Say you find a pointer to HTML DOM element by accident.
[11:22:10] <hayley> Here is my errata email: https://plaster.tymoon.eu/view/2765
[11:22:13] <hayley> Does it make sense?
[11:24:03] <moon-child> makes sense to me (though I have the advantage of having already heard you describe it with other words)
[11:25:30] <gilberth> Isn't the issue an overlapping copy, likely? I personally would likely use less likely.
[11:25:49] <hayley> I found it happened soon enough with variable sized objects.
[11:26:04] <moon-child> 'overwrite part of the object pointed to by scan with itself'  might be clearer as  'overwrite part of the object pointed to by scan with a different part of itself'
[11:26:14] <hayley> Right.
[11:26:24] <gilberth> Of course, when all object are of same size, there is no problem.
[11:28:42] <hayley> The description of Lisp 2 explicitly states "It can be used with objects of varying sizes".
[11:29:58] <hayley> It is also strange to me that the algorithm also performs a null check when updating pointers. Not my problem that you have silly languages with null pointers.
[11:32:41] <gilberth> You don't want to have a null pointer?
[11:32:48] <hayley> gilberth: https://i.redd.it/vr1xmctib2481.png
[11:32:50] <hayley> Nope.
[11:33:02] <gilberth> No NIL?
[11:33:16] <hayley> NIL is an object still. We might move NIL.
[11:33:57] <moon-child> might you?
[11:33:59] <gilberth> Is it? Or does it just mimic as one?
[11:34:20] <moon-child> I think if somebody has a workload which would benefit from moving nil, it is their own fault
[11:34:29] <hayley> moon-child: Depends on a whole lot of things, but NIL is an object, and null is not.
[11:34:43] <moon-child> gilberth: on sbcl: 'MOV EDX, #x50100117              ; NIL'
[11:34:51] <moon-child> (disassembly of (lambda () nil))
[11:34:59] <hayley> I'm not saying that moving NIL is useful, I'm just saying that it is different to null.
[11:35:26] <moon-child> gilberth: sure, you might implement it as a null pointer, but that would be a strange thing to do, and you would still have to store somewhere the result of e.g. (symbol-name nil)
[11:35:48] <hayley> Dereference null and it's game over. Dereference NIL and you just have symbol guts.
[11:36:06] <gilberth> Yes, but you get a faster NULL.
[11:36:20] <moon-child> faster why?
[11:36:54] <gilberth> Ask gcc, or clang. But the linker is funny, anyway.
[11:37:21] <hayley> If you have (loop until (null bla)), and (NULL x) = (EQ x 'NIL), then loading NIL is loop invariant.
[11:37:50] <gilberth> It should be a constant.
[11:38:31] <gilberth> Anyhow, my toy lisp runs faster with NIL being the null aka NULL aka 0 pointer.
[11:38:54] <moon-child> toys frequently exhibit different performance characteristics from non-toys
[11:39:28] <moon-child> heh, looks like sbcl on arm burns a register for nil
[11:39:38] <gilberth> Well, you don't take a SYMBOL-NAME that often and not without a type check, anyway.
[11:39:54] *** Quits: sifisega (~silas@101.100.130.75) (Ping timeout: 265 seconds)
[11:40:29] <gilberth> moon-child: Now that could hurt. I bet another register is for TLS.
[11:40:29] <moon-child> what _do_ you do with nil?  EQ doesn't care.  IF will generate slightly bigger, but not slower code
[11:41:11] <moon-child> gilberth: arm has 32 registers, it's fine.  iirc it burns a register for something on x86 too, but i guess it's happier to do it on arm
[11:41:28] <gilberth> You mind your lexicals to it as the initial value.
[11:41:40] <hayley> SBCL now burns R13 for the generational GC write barrier, but it is a pain in the ass to encode anyway. So it wasn't used before.
[11:42:00] <moon-child> gilberth: sure.  Again, slightly bigger but not appreciably slower
[11:42:05] <White_Flame> moon-child: it uses all the segment registers iirc, but no general purpose registers
[11:42:09] <gilberth> moon-child: For TLS? Why? You usually use a segment^Wselector register for that.
[11:42:19] <White_Flame> hmm, maybe R11 for TLS?
[11:42:34] <moon-child> hayley: a register was _not used_ because it was a pain in the ass to encode?  Why?
[11:42:50] <hayley> Let me find it in the SBCL source...
[11:42:56] <moon-child> (and, it is not that bad.  I think I spend something like 20 loc canonicalizing such 'pain in the ass' forms in my assembler.  Encoding selection was more work)
[11:43:52] <moon-child> White_Flame, gilberth: couldn't tell you, but this tends to pop up in disassemblies with no further context:  'MOV RAX, [R13+16]                ; thread.binding-stack-pointer'
[11:43:57] <White_Flame> R13, yeah
[11:44:04] <White_Flame> just disasm'd it myself, too
[11:44:22] *** Joins: cranium (~cranium@user/cranium)
[11:44:24] <hayley> https://github.com/sbcl/sbcl/blob/master/src/compiler/x86-64/vm.lisp#L84-L88
[11:44:24] -ixelp- sbcl/vm.lisp at master · sbcl/sbcl · GitHub
[11:44:35] <hayley> R12 rather for the card table base register.
[11:44:41] <gilberth> I wonder what is the reason for that.
[11:45:20] <moon-child> you can read the instruction tables if you like.  x86 encoding is like sgr codes: I don't regret knowing it, but I hope someday I can forget it
[11:45:41] <hayley> IIRC R12 "aliases" R4 aka RSP, so the encoding for effective addresses is different.
[11:45:59] <hayley> ...rather, R12 has the encoding for stack relative stuff, which is different to any other GPR for some reason.
[12:09:14] *** Joins: notzmv (~zmv@user/notzmv)
[12:33:50] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:b36c:1fc0:956d:d06c) (Ping timeout: 252 seconds)
[12:33:54] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[12:35:05] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:35:35] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:da4:9ec6:5ef5:74d6)
[12:44:05] <shka> https://github.com/golang/go/issues/48072
[12:44:06] -ixelp- runtime: time goes backwards on windows-arm64 (frequent TestGcLastTime failures) · Issue #48072 · golang/go · GitHub
[12:44:07] <shka> :D
[12:44:35] <shka> https://www.youtube.com/watch?v=GgD9FyE60hs
[12:44:35] -ixelp- Cher - If I Could Turn Back Time (Official Video) - YouTube
[12:52:32] <hayley> https://www.youtube.com/watch?v=ratR1ngcWss
[12:52:33] -ixelp- How to make anhydrous ethanol (100% alcohol) - YouTube
[13:03:49] <shka> https://www.youtube.com/watch?v=Y2ij7o8akDo
[13:03:49] -ixelp- Iron Sembello - "She's a Trooper" - YouTube
[13:23:20] <dave0> i'm boning up on max headroom
[13:24:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.3)
[13:29:29] <moon-child> 'However, as most programmers do not write provably correct code it is frequently beneficial to use the bounds-checked-interfaces to avoid potential errors'  O RLY?
[13:35:41] <dave0> bad computer? uh-huh. bad programmer.
[13:36:29] <hayley> It is a day ending in -y time to post https://www.youtube.com/watch?v=PcsumKaIXEs
[13:36:29] -ixelp- Gary Numan (London 1981) [07]. The Aircrash Bureau - YouTube
[14:07:05] <hayley> https://microkerneldude.org/2021/11/17/dishonest-and-contradictory-fact-checking-csiros-communications-about-the-trustworthy-systems-group/
[14:09:06] <mfiano> .041663+9-+-
[14:14:17] <mfiano> 96************************************6666666666666666666666666666666666666666666666666666+++++++++++++++++++++++++++++++++++
[14:14:45] <hayley> .oO(An untrustworthy system, for comparison.)
[14:20:17] <shka> https://www.youtube.com/watch?v=qAe6aFyDC5M
[14:20:18] -ixelp- Goodbye From COP26 - YouTube
[14:30:16] *** Joins: jurov (~jurov@rev-81-92-255-39.radiolan.sk)
[14:35:55] <ck_> mfiano is a number station confirmed
[14:36:31] <hayley> https://www.youtube.com/watch?v=lwx8A0XUpfM
[14:36:32] -ixelp- Time Zones - YouTube
[14:41:43] *** Joins: harryisgamer (~harry@cpe-23-242-170-124.socal.res.rr.com)
[14:42:00] *** Quits: harryisgamer (~harry@cpe-23-242-170-124.socal.res.rr.com) (Quit: WeeChat 2.8)
[14:55:11] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:01:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[15:07:25] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 240 seconds)
[15:29:59] *** Quits: phantomics (~phantomic@97-118-231-120.hlrn.qwest.net) (Read error: Connection reset by peer)
[16:58:53] *** Quits: OlCe (~user@lfbn-nic-1-262-221.w90-116.abo.wanadoo.fr) (Ping timeout: 256 seconds)
[18:03:03] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:06:46] <dave0> nite all
[18:06:49] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[18:20:36] <mfiano> 3.6
[18:21:11] <mfiano> sorry
[18:22:45] <ck_> "message received" :)
[18:23:03] <ck_> so what was it? cat? spider? cleaning your keyboard? broken controller?
[18:35:46] <mfiano> Oh I didn't see the previous garbage
[18:36:14] <mfiano> None of the above reasons...
[18:36:53] <mfiano> I fell asleep on the couch with my wireless keyboard. :/
[18:40:22] <ck_> that's a great reason :) I remember how this feels like
[19:04:50] <mfiano> Hmm, how do I parameterize the number 1 in the FORMAT control string "~,1f" ?
[19:28:09] *** Joins: Catie (~user@user/catie)
[19:34:27] <edgar-rft> do you have chouchs without a wireless keyboard?
[19:35:38] <ck_> mfiano: you use v -- http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm
[19:35:39] -ixelp- CLHS: Section 22.3
[19:36:10] <ck_> (format nil "~,vf" 10 23.45) => "23.4500000000"
[19:37:18] <ck_> I see you already received that answer elsewhere -- sorry, am not really focusing on all channels right now
[19:47:43] <mfiano> Yeah I posted in the wrong channel, but thank you.
[19:49:19] *** Joins: random-nick (~random-ni@87.116.165.83)
[19:53:36] *** Joins: makomo (~makomo@user/makomo)
[20:14:55] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[21:26:13] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Ping timeout: 240 seconds)
[21:29:16] <gilberth> Good morning #lispcafe!
[21:51:32] *** Joins: slyrus (~slyrus@192-184-223-165.static.sonic.net)
[21:57:55] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:00:01] * gilberth painted himself into a corner again with git.
[22:01:31] <shka> gilberth: what is wrong?
[22:03:58] <gilberth> I have a [bare] repo and two working directories. I created a branch 'an-idea' in one with 'git branch' and then 'git checkout' made modifications and said 'git commit' and 'git pull'. So far so good.
[22:06:14] <gilberth> In the other working directory I tried to switch to that new branch, too. Apparently I switched bracnhes, but when I say 'git pull' I  get no changes, and when I try to commit I get errors about conflicts, yet all I wanted is to have the changes made on the first machine.
[22:07:13] <gilberth> My working directory is bust. I could perhaps make a fresh clone, but that doesn't sound right.
[22:10:29] <gilberth> In a new [third] clone, everything appears to be fine again. git seems fragile, which I don't believe.
[22:16:00] <ck_> I don't understand
[22:16:22] <ck_> when you say you went git commit and git pull, where do these two things happen? in the same directory?
[22:18:17] <gilberth> I misstyped. I said 'push' after 'commit'.
[22:18:47] <gilberth> In the first working directory. And that is fine and git is happy.
[22:18:56] <ck_> ok that makes sense
[22:19:41] <ck_> now in the second copy, is it possible that you just created a local branch by the same name instead of one that tracks remote changes?
[22:20:05] <gilberth> Perhaps, how would I know?
[22:20:24] * gilberth checks history.
[22:20:25] <ck_> take a look at the file .git/config and read the entries there
[22:21:30] <gilberth> ck_: I said 'git checkout an-idea' Isn't that the command to switch branches? /me checks .git/conifg
[22:21:57] <ck_> gilberth: "yes, but"
[22:23:05] <gilberth> It says [branch "an-idea"] \n remote=origin \n merge=refs/head/an-idea What do I make of this?
[22:23:08] <gilberth> But?
[22:23:15] <ck_> from the man page: "If <branch> is not found but there does exist a tracking branch in xactly one remote (call it <remote>) with a matching name and --no-guess is not specified, treat as equivalent to $ git checkout -b <branch> --track <remote>/<branch>"
[22:23:30] <ck_> ok that's good, the remote is set to what you probably want
[22:23:51] <ck_> if you say "git status" in that second copy, what branch does it say it is in? (first line)
[22:25:02] <gilberth> It says "On branch an-idea" and "Your branch and 'origin/an-idea' have diverged, [...]"
[22:25:32] <gilberth> Yet have made no modifications. All I wanted is to have the changes made and pushed in/from the first directory.
[22:26:28] <gilberth> Am I on a local branch, I created by noobiness?
[22:27:06] <ck_> you're always on a local branch, that's not the distinction you need to keep in mind
[22:27:40] <ck_> so, I'm guessing here, but it looks like your state looks like tis:
[22:29:05] <ck_> actually there's no need to guess, just take a look at where the divergence happened
[22:29:18] <ck_> please run this in both directories: git log --pretty=oneline -n5
[22:29:36] <ck_> or -n<however many commits you need to see a common ancestry>
[22:32:25] <gilberth> ok
[22:35:04] <ck_> oh, also, when you say "two working directories", I assumed they were two copies of the repository. Is that the case?
[22:35:19] <gilberth> https://termbin.com/cdow
[22:36:19] <gilberth> ck_: I made a repository with 'git init --bare' and created two working directorys and said 'git clone' there.
[22:36:37] <gilberth> On two different machines, as you can see.
[22:36:54] <ck_> yes, that's good, I just didn't see you mention clone before and wanted to be sure
[22:37:30] <ck_> so as you can see there's two commits from "added" -- "now?" and "and more" that the second repository doesn't have yet
[22:37:48] <ck_> that's why you can't push. But git has a mechanism to fix this, called rebasing
[22:38:33] <gilberth> Yes. And: Oh dear!
[22:38:52] <ck_> so simplifying the names, you have A->B->C->D on the one repository, and A->X on the second
[22:39:36] <gilberth> And I don't want to push actually. I want to have the changes in the repo on the second working directory. I was not editing things and I don't want to.
[22:40:03] <gilberth> in the second directory. No changes made there.
[22:40:40] <ck_> now, in the second repository, if you say "git pull --rebase origin/an-idea", and the changesets allow for it, it will "rebase" the commit X on top of the new commits that come from the remote
[22:41:00] <ck_> so A->X becomes A->B->C->D->X
[22:41:09] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[22:41:33] *** Joins: robin (~robin@user/terpri)
[22:41:55] <ck_> just "git pull" will fail because the histories are different
[22:42:16] <gilberth> When I do that, git complains. "Pulling is not possible because you have unmerged files."
[22:42:28] <gilberth> When I did the git pull --rebase ...
[22:43:17] <ck_> can you show the full output of git status?
[22:44:17] <ck_> "unmerged files" sounds like you are in a merge right now.. if that's the case, there will be files marked as such, and they'll have the usual merge markers >>>>> ==== and so on
[22:44:28] <gilberth> https://termbin.com/0bec
[22:46:00] <shka> gilberth: you have changes to file foo.txt on both branches, that's why it complains
[22:46:10] <gilberth> Yes, indeed, git believes I want to merge sth. There is nothing to merge. Actually there is because the version of 'foo.txt' is the one from the 'master' branch, because git refused to give me the version in the 'an-idea' branch.
[22:46:27] <ck_> do you want to discard local changes then?
[22:46:44] <gilberth> Yes, sir!
[22:46:48] <ck_> if yes, say "git merge --abort" and then "git pull --force origin/an-idea"
[22:48:15] <gilberth> https://termbin.com/3971
[22:48:51] <sham1> Apparently it's not there
[22:48:55] <sham1> You might have to fetch it
[22:48:58] <shka> uh
[22:49:00] <shka> no
[22:49:00] <ck_> my mistake, ' ' instead of "/"
[22:49:04] <shka> exactly
[22:49:11] <shka> git pull origin an-idea
[22:49:12] <ck_> shka: pull is fetch and merge
[22:49:20] <shka> ck_: i know
[22:49:28] <shka> i was referring to sham1
[22:49:31] <ck_> sham1: pull is fetch and merge
[22:49:34] <sham1> It is
[22:49:46] <sham1> Except that it cannot prune, which is what using fetch by itself can do
[22:50:03] <shka> you are making it more complicated then it needs to be :)
[22:50:15] <gilberth> https://termbin.com/2js7
[22:50:40] <shka> gilberth: launch magit, resolve the conflict
[22:50:56] <ck_> well, you can do that -- I assume you want to learn what the deal is here, yes?
[22:51:01] <shka> i don't even remember how to do that from command line, sorry
[22:51:37] <gilberth> Which conflict? I did no edits. I just want to ditch it! I want the copy in the repo. Dammit. Sorry.
[22:52:26] <ck_> I guess the file stil has those conflict markers. Here's another way to solve your problem
[22:52:37] <shka> gilberth: yeah, and magit has option to simply TAKE B
[22:52:41] <ck_> by the way which is which? is amethyst the state you want, or gsmaragd?
[22:53:08] <shka> anyway, sorry, i can help, i don't actually use git commands directly anymore
[22:53:19] <gilberth> amethyst is the state I want, smaragd is the kaputt git working directory.
[22:53:44] <gilberth> Both are clones of a bare repository elsewhere.
[22:53:45] <sham1> Delete the local repo and reclone
[22:54:38] <ck_> gilberth: you can for example do "git reset --hard HEAD^" on smaragd, afterwards a pull will go through no problem
[22:55:12] <gilberth> Yes, that works. But it does not sound right. Isn't there a git command to tell it, that I just want to forget any changes git believes there are. I mean, I cannot even get at the version in the "master" bare repo.
[22:55:30] <ck_> ? I don't follow
[22:55:34] <sham1> I don't think there is
[22:55:56] <gilberth> ck_: I'll try.
[22:56:20] <ck_> gilberth: but there's an entire new commit there, separate from the one on your origin repository. the one with sha 704...63d3
[22:57:07] <ck_> secondly the previous incomplete merge altered the file, which is the conflict that git told you about
[22:57:25] <gilberth> ck_: When I say 'reset' and then 'pull' there are still conflicts. I just can't get at the current version of 'an-idea' as on the first working directory or in the bare repository, which I could clone fine elsewhere.
[22:58:13] <ck_> ah
[22:58:21] * gilberth cries.
[22:58:50] <gilberth> Where does this commit come from?
[22:59:02] <ck_> which one? "yep" ?
[22:59:33] <gilberth> yes.
[22:59:48] <ck_> it came from you I guess, who else :)
[23:00:13] <gilberth> RLY?
[23:00:52] <gilberth> But I made it to the first working directory, which seems fine. And git status there says "all up to date".
[23:01:34] <ck_> could it be that you are mistaken
[23:02:02] <gilberth> Of course, I just don't know where.
[23:03:20] <ck_> you obviously have a commit with description "yep" that you created on smaragd, not amethyst. Do those prompts look sufficiently different? Could you have confused them maybe
[23:03:53] <gilberth> Let me check.
[23:05:25] <gilberth> Ok. Again. To be sure: amethyst is the first wd, where all is fine, and 'yep' is a commit I made there, and it was pushed ok.
[23:05:42] <gilberth> smaragd is the working directory with the trouble.
[23:06:31] <ck_> but https://termbin.com/cdow says different
[23:08:01] <gilberth> [The 'g' is a glitch] My bash history disagrees. It has 'git commit -ma "yep"' on amethyst, not on smaragd.
[23:08:54] <ck_> okay, interesting, then you changed the history afterwards. any "--amend"s in your bash history?
[23:09:24] <gilberth> Nope.
[23:10:22] <gilberth> ck_: That's can't be right, can it? There must be a mistake.
[23:11:10] * gilberth checks git log again and still is surprised.
[23:11:15] <sham1> revlog?
[23:11:25] <ck_> when you run "git reflog --unreachable" on amethyst, does it show the yep?
[23:11:25] <gilberth> Is that a git command?
[23:11:41] <ck_> sorry
[23:11:58] <ck_> "git fsck --unreachable", I read sham1s message while typing
[23:12:48] <gilberth> Checking object directories: 100% (256/256), done.
[23:14:10] <ck_> maybe the ever-present forces of darkness have modified your bits
[23:15:18] <gilberth> Yes, perhaps. Alpha particles. It must be alpha particles. smaragd does not have ECC memory.
[23:16:02] <gilberth> I get two 'unreachable blob ....' lines on smaragd, the second, "broken" working directory.
[23:16:34] <gilberth> Anyhow, it's kaputt, isn't it? Broken, bust, fubar?
[23:16:38] <ck_> nah
[23:17:33] <ck_> let's go to #gitschool and investigate this exciting mystery further
[23:18:23] <gilberth> See you there. I'll need a minute.
[23:18:24] <ck_> assuming you want to figure out what happened in order to build an understanding. If not, do what sham1 and shka advised you to do already: clone again, and use a client like magit in future
[23:19:16] <sham1> Git is like a thousand degree knife
[23:19:27] <shka> gilberth: if you really, really, really must know everything read "git pro"
[23:19:34] <shka> it is excellent book
[23:20:57] <gilberth> Ok. I am at #gitschool now.
[23:22:48] <gilberth> shka: I do not need to be an expert, I just want a "central" bare repo for me to work with from multiple machines.
[23:33:36] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:34:28] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:36:54] <pjb> gilberth: easy.  If you have access to a server thru ssh, trivial.
[23:37:41] <pjb> gilberth: see: https://github.com/informatimago/bin/blob/master/git-create-remote-repository
[23:37:42] <gilberth> pjb: Trivial? My local working directory is bust.
[23:37:42] -ixelp- bin/git-create-remote-repository at master · informatimago/bin · GitHub
[23:38:21] <pjb> gilberth: git-create-remote-directory gilbert@remote.server.gilbert.name   /srv/git/new-project
[23:38:27] *** Quits: lagash (lagash@lagash.shelltalk.net) (Client Quit)
[23:39:08] *** Joins: lagash (lagash@lagash.shelltalk.net)
[23:39:32] <pjb> s/git-create-remote-directory/git-create-remote-repository/ obviously, sorry.
[23:40:06] <pjb> git init ; git-create-remote-repository gilbert@remote.server.gilbert.name   /srv/git/new-project ; git push
[23:40:11] <pjb> what can be easier?
[23:41:01] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[23:47:32] *** Quits: lagash (lagash@lagash.shelltalk.net) (Quit: ZNC - https://znc.in)
[23:55:25] <gilberth> pjb: You create a branch in one wd and then the other is bust. bbl, I am on #gitschool.
