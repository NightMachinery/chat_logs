[00:04:01] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 250 seconds)
[00:04:13] *** Quits: analoq (~yashi@user/dies) (Ping timeout: 265 seconds)
[00:05:02] <evocatus> is it the only way to work with unpublished packages? https://golang.org/doc/modules/managing-dependencies#local_directory
[00:06:12] <b0nn> As far as I know, yes
[00:07:02] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:08:33] <evocatus> it makes me extremely sad
[00:10:06] <b0nn> ok, FTR I'm not a big fan of modules, BUT, dependency management is a royal CF - not just for Go, Java (maven and Gradle), Node (NPM), Python (pip), Not sure about Rust's Cargo, because I've never used it in anger
[00:10:53] <b0nn> There were a couple of community projects that tried to do dep management in Go before modules, Glide and dep, then there was the prototype for modules, vgo
[00:11:09] <evocatus> I remember that
[00:11:38] *** Joins: sheldon (~sheldon@user/sheldon)
[00:11:48] <evocatus> I prefer using relative paths in import statements
[00:12:08] <evocatus> like most of languages do since C (and probably even earlier)
[00:12:18] <b0nn> well, the relative path in modules is relative to the root go.mod of the project
[00:13:00] <evocatus> so if I don't want to type a lot of replace statements I should actually make one go.mod for my entire directory with Go code
[00:13:09] <b0nn> TIAS
[00:14:03] <b0nn> But keep in mind that local hacks don't distribute well at all (IOW your code will only ever run on your machine)
[00:14:35] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[00:14:37] <b0nn> Unless you configure your prod servers to mirror your local machine*
[00:14:52] <evocatus> I speak about my pet projects and experiments
[00:15:30] <evocatus> they all happen to have no prod servers
[00:16:00] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[00:17:27] *** Quits: evocatus (~evocatus@84.51.113.13) (Quit: Leaving)
[00:18:43] <b0nn> It's a footgun, I've told you it's a footgun, you know it's a footgun, if you choose to go through with it, that's on you and it matters not to me
[00:19:55] *** Joins: sheldon (~sheldon@user/sheldon)
[00:24:23] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[00:26:20] *** Quits: Nex8192 (~Nex8192@user/nex8192) (Quit: Don't watch me die)
[00:26:30] *** Quits: jespada (~jespada@252-155-231-201.fibertel.com.ar) (Quit: Textual IRC Client: www.textualapp.com)
[00:26:35] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[00:28:00] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[00:28:34] *** Joins: ugjka (~ugjka@ugjka.net)
[00:29:04] *** Joins: servytor (uid525486@hampstead.irccloud.com)
[00:31:45] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[00:32:11] *** Quits: andlabs (~andlabs@104.132.34.111) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:33:00] *** Joins: rusty (~rustyboy@82.77.237.221)
[00:33:02] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[00:33:38] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Remote host closed the connection)
[00:33:49] *** Joins: fikran (~fikran@user/fikran)
[00:34:44] *** Joins: jannis (~jannis@user/xjs)
[00:35:21] *** Quits: tyson2 (~user@cpe44d9e795a64f-cm688f2e2dfaa0.sdns.net.rogers.com) (Remote host closed the connection)
[00:35:38] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::100d) (Ping timeout: 265 seconds)
[00:36:24] *** Quits: Xjs (~jannis@user/xjs) (Ping timeout: 256 seconds)
[00:36:43] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:8166:e244:ffd4:a452)
[00:37:08] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[00:39:17] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:40:51] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[00:41:38] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[00:43:09] *** Quits: dr0n (~nabromov@94.11.23.235) (Client Quit)
[00:44:27] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[00:48:18] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[00:49:39] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[00:50:59] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:54:58] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Excess Flood)
[00:56:23] <eyJhb> I have no clue what I am doing wrong, I have a dependency that have upgraded. In the project that depends on it, I have deleted the two go.*, and then redid the go mod init, and go mod tidy. But it keeps fetching the version that is one behind...
[00:57:04] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[00:58:30] <eyJhb> Force downloaded it with ...@sha
[01:00:14] <b0nn> hmm was that an upstream cache problem
[01:01:21] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:02:47] <eyJhb> Maaaybe? No clue. Shouldn't think Gitlab had such an issue
[01:05:41] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[01:06:20] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[01:08:52] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[01:10:21] <krux02> does go have a fast solution for strings.Builder that behaves like a linux `tee`?
[01:10:25] *** Joins: sheldon (~sheldon@user/sheldon)
[01:10:41] *** Joins: Guest81 (~Guest81@2600:6c5e:157f:df79:c557:938a:9f61:5abf)
[01:10:53] <krux02> essentially a strings.Builder that writes everything into two strings.Builder?
[01:11:50] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:13:46] <krux02> it would also help if I can copy the last N bytes from a a Builder into anthore builder
[01:14:20] <krux02> currently I create a new Builder write into that, apply .String() on it and then write that into two builders
[01:14:22] <eyJhb> Quite sure there is something like that.
[01:14:56] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[01:14:57] <krux02> but I've learned the painful way that these intermediate string allocations can really hurt performance
[01:15:02] <eyJhb> Can't you just use https://pkg.go.dev/io#MultiWriter ?
[01:15:28] <krux02> interesting
[01:15:34] <krux02> this might be what I was looking for
[01:15:39] <krux02> I'll have a deeper look
[01:16:35] <eyJhb> It's quite nice, but .. Really simple
[01:17:03] <krux02> I like really simple
[01:17:14] <krux02> your comment reads like this would be a disadvantage
[01:19:05] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:20:02] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:20:15] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[01:23:45] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[01:23:56] *** Quits: Guest81 (~Guest81@2600:6c5e:157f:df79:c557:938a:9f61:5abf) (Quit: Client closed)
[01:24:11] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 250 seconds)
[01:28:36] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[01:30:44] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[01:33:09] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[01:35:01] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[01:36:10] *** Joins: sheldon (~sheldon@user/sheldon)
[01:36:48] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[01:37:29] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[01:39:59] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[01:40:26] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[01:41:42] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[01:45:23] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[01:50:04] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[01:50:30] *** Joins: rcernin (~rcernin@124.190.139.235)
[01:50:35] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:51:12] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[01:56:09] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[01:57:23] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[01:58:55] *** Quits: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi) (Remote host closed the connection)
[01:59:15] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 265 seconds)
[01:59:17] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[01:59:42] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 256 seconds)
[02:00:43] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[02:03:44] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:07:17] *** Quits: gpeskens_ (~gpeskens@62.251.31.165) (Remote host closed the connection)
[02:07:41] *** Joins: gpeskens_ (~gpeskens@62.251.31.165)
[02:08:12] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[02:09:29] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[02:13:51] *** Joins: noord (~noord@user/noord)
[02:15:34] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 256 seconds)
[02:15:36] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:15:57] *** Joins: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net)
[02:18:47] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[02:20:42] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:23:17] *** Quits: wolfshappen (~waff@irc.furworks.de) (Quit: later)
[02:25:26] *** Joins: sheldon (~sheldon@user/sheldon)
[02:27:22] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Quit: The Lounge - https://thelounge.chat)
[02:28:11] *** Joins: lazyreader (~lazyreade@user/lazyreader)
[02:29:37] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[02:30:32] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[02:31:05] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[02:32:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:41:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[02:43:10] *** Joins: fikran (~fikran@user/fikran)
[02:44:28] *** Joins: internut (~internut@2601:280:4e00:7b70:49d1:8c3c:68e5:74c0)
[02:47:49] *** Quits: dsrt^ (~dsrt@h178.173.139.63.static.ip.windstream.net) (Ping timeout: 250 seconds)
[02:56:19] *** Quits: servytor (uid525486@hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:57:02] *** Joins: sheldon (~sheldon@user/sheldon)
[03:01:15] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[03:03:32] *** Joins: rightbrace (~rightbrac@bras-base-toroon0817w-grc-36-184-146-151-86.dsl.bell.ca)
[03:04:16] *** Quits: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:04:35] *** Joins: fhs (~fhs@pool-74-101-98-114.nycmny.fios.verizon.net)
[03:04:52] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 256 seconds)
[03:08:26] *** Joins: wolfshappen (~waff@irc.furworks.de)
[03:08:37] *** Quits: adip (~adip@aedz57.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[03:09:16] *** Guest7127 is now known as xzr
[03:10:30] *** Joins: adip (~adip@dib205.neoplus.adsl.tpnet.pl)
[03:14:34] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[03:23:56] <rightbrace> I would like to write a generic function `Get[T any](key int) T` which has a set of maps of a few types, which are indexed by integers, and should choose which map to fetch the value from based on T. I can assert the value of T through switch (interface{})(zeroT).(type){}, but I cannot return appropriateMap[key], nor T(appropriateMap[key]). Is
[03:23:57] <rightbrace> there any supported way to do what I'm trying to do?
[03:27:26] *** Quits: normen (~normen@p200300d71723fa002d474962d539310c.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[03:28:42] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[03:28:51] <mikoto-chan> how do I keep taking input from stdin until the program gets terminated with <C-c>?
[03:29:18] *** Joins: rcernin (~rcernin@124.190.139.235)
[03:31:19] <fizzie> rightbrace: There's `return (interface{})(appropriateMap[key]).(T)`, which applies the same idea to the return conversion as you did for the type switch.
[03:32:04] <fizzie> But really it doesn't sound like you'd be getting anything out of the generics.
[03:32:53] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[03:33:30] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[03:34:39] <fizzie> There doesn't really seem to be much difference beween having your function return interface{} and calling it `Get(123).(SomeType)` compared to making it generic like that and calling it `Get[SomeType](123)`.
[03:35:35] *** Joins: alzgh (alzgh@user/alzgh)
[03:36:10] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[03:37:40] <rightbrace> fizzie: Yeah that works perfectly, thank you - the reason I'm considering this approach is that 123 is a key in some, but not all of the maps, I want to grab it from the map corresponding to the correct type
[03:38:50] <fizzie> Oh, right, yes, you're also using the passed-in type to make that decision, fair enough.
[03:39:30] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:43:32] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[03:44:34] *** Quits: alzgh (alzgh@user/alzgh) (Ping timeout: 256 seconds)
[03:47:18] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[03:47:56] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[03:48:08] *** Joins: alzgh (~alzgh@user/alzgh)
[03:49:05] <dalan62367> Is it correct that if I'm using structs as a key in a map, and I want to hash on the values of the members of that struct, I need to use a pointer to the struct? E.g. `map[*key]vool`
[03:49:16] <dalan62367> Not using a pointer means it's hashing the memory address?
[03:49:39] <dalan62367> Confused by this gist - https://gist.github.com/cevaris/24cc9da7b14731204c79
[03:49:49] <fizzie> rightbrace: I don't think it's any better (probably the opposite), but since I bothered to come up with it... there's also: https://gotipplay.golang.org/p/w1zAajX9LXC
[03:50:49] <fizzie> (tl;dr use a named result parameter, type-switch on its address, use the resulting pointer -- which is of known type inside the type switch -- to store the return value in it.)
[03:52:35] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[03:53:27] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[03:54:06] <rightbrace> Any specific reason why its worse? Its definitely easier to read in my opinion
[03:54:12] <fizzie> dalan62367: The exact opposite. *Using* a pointer means using memory addresses as the map key. That's why in that gist the second lookup (in MapStructPointerAsKey) fails: a1 and a2 have different addresses.
[03:54:23] <dalan62367> Gosh, I had it backwards 😵
[03:55:19] <dalan62367> Is it not idiomatic to have multiple checks for the membership of a key in a map in one if statement? e.g.: `if _, ok := m[key]; ok && _, ok2 := m2[key]; ok { }`?
[03:55:48] <fizzie> rightbrace: No specific reasons, it was a purely subjective judgement. :) Half just because I almost never use named result parameters, the other half because needing a pointer just to assign a value to a local variable feels weird.
[03:55:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:56:11] <fizzie> It's not even valid, so it can hardly be idiomatic. You only get to put a single simple statement in an `if` statement.
[03:57:17] <fizzie> (And you can't have `_, ok := ...` as the operand of a && expression.)
[03:58:00] <mikoto-chan> https://dpaste.com/5UAUCX584
[03:58:04] <rightbrace> Ahh okay, thanks - tbh this is kind of a dumb function anyway, so I expected a weird-looking solution. Thankfully I most likely won't need to do it this way, but it is good to know how
[03:58:12] <mikoto-chan> why does -h not work for this program?
[03:58:31] <dalan62367> Interesting, so you have to write out multiple `_, ok := ...`
[03:58:43] <dalan62367> for _, coord := range p2.full_coordinates() {
[03:58:43] <dalan62367> 		_, seen_ok := seen[coord]
[03:58:43] <dalan62367> 		_, added_ok := added[coord]
[03:58:43] <dalan62367> 		if seen_ok && !added_ok {
[03:58:43] <dalan62367> 			intersection = append(intersection, coord)
[03:58:43] <dalan62367> 			added[coord] = true
[03:58:44] <dalan62367> 		}
[03:58:44] <dalan62367> 	}
[03:59:05] <A_Dragon> probably dont want to paste more than one or three lines
[03:59:28] <dalan62367> Sorry!
[04:00:35] <A_Dragon> _, seen, _, added = seen[c], added[c] may work
[04:00:43] <A_Dragon> s/=/:3
[04:00:45] <A_Dragon> s/3/=
[04:00:48] <A_Dragon> I cant type today
[04:01:13] <fizzie> Nah, you can't also unpack results from multiple things with that.
[04:01:16] <fizzie> mikoto-chan: "flag" doesn't do short options (or unambiguous abbreviations), and there's no flag named "h". If that's what you meant by "-h".
[04:01:17] <A_Dragon> aww
[04:01:40] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[04:01:49] <A_Dragon> I'd kinda like a someMap[key]? syntax to just get the exists state out
[04:02:22] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[04:02:37] *** Joins: EdFletcher (~PKD@user/edfletcher)
[04:02:45] <dalan62367> Yeah that would be nice. I was mistakenly just using `if seen[key] && !added[key] { }`
[04:03:10] <A_Dragon> though that comes from me abusing maps as sets, which ehhhhh
[04:03:24] <mikoto-chan> fizzie: no I mean, even when I enter an incorrect flag it doesn't output "Usage of ./foo:"
[04:04:07] <fizzie> mikoto-chan: You don't call flag.Parse() anywhere, it would seem.
[04:04:29] <mikoto-chan> fizzie: of course, thanks for reminding me
[04:05:29] <fizzie> If it's a map[T]bool, and you only store `true`s in it, the simple syntax is just fine (and is probably the main selling point of `map[T]bool` over `map[T]struct{}`).
[04:07:16] <A_Dragon> not quite; 1, the struct version uses slightly less memory, and 2, the struct version has the benefit that it has two states, not three (1: exists && true, 2: exists && false, 3: !exists && ??? )
[04:07:29] <A_Dragon> being able to `delete` is helpful
[04:07:39] <A_Dragon> then again, the default for the bool wooould be false
[04:08:04] <Tv_> using map[T]bool is just a ticking time bomb
[04:08:10] <Tv_> one day you will write m[k] = foo()
[04:08:47] *** Quits: adip (~adip@dib205.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[04:08:51] <fizzie> Our style guide says map[T]bool vs. map[T]struct{} is everyone's personal choice, IIRC.
[04:08:54] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[04:12:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:12:36] <fizzie> Oh well. With generics there's always the possibility of a `func ContainsKey[M constraints.Map[K, V], K, V any](m M, k K) (found bool) { _, found = m[k]; return }` to make the check an expression (`if maps.ContainsKey(seen, c) && !maps.ContainsKey(added, c) ...`) rather than a statement. ;)
[04:13:14] <A_Dragon> I am. so. looking forward. to having one `contains` impl
[04:13:45] <A_Dragon> I'd be using 1.18 in most things now if golanci-lint didnt choke when defining a generic struct that has a generic function field
[04:17:00] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[04:23:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[04:24:42] *** Joins: sheldon (~sheldon@user/sheldon)
[04:26:11] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[04:30:36] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:31:27] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[04:31:34] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[04:32:23] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[04:33:54] *** Joins: sheldon (~sheldon@user/sheldon)
[04:35:22] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[04:39:11] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[04:43:10] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:46:00] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:8166:e244:ffd4:a452) (Ping timeout: 265 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:20] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Quit: Leaving)
[04:50:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[04:52:31] *** Joins: fikran (~fikran@user/fikran)
[04:52:33] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[04:54:54] *** Joins: frost (~frost@user/frost)
[04:59:23] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[04:59:57] *** Quits: vimal (~vimal@2a02:a210:9600:1600:3271:adb4:e3fb:289a) (Ping timeout: 268 seconds)
[05:01:58] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:8166:e244:ffd4:a452)
[05:03:51] *** Joins: sheldon (~sheldon@user/sheldon)
[05:03:52] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:06:38] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:08:13] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[05:09:32] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 256 seconds)
[05:11:37] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[05:12:53] *** Joins: andlabs_ (~andlabs@2604:ca00:17a:c475:21ab:25b5:b9e7:c44c)
[05:13:04] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:8166:e244:ffd4:a452) (Ping timeout: 265 seconds)
[05:16:32] *** Quits: danderson (~dave@63.81.90.235) (Ping timeout: 260 seconds)
[05:17:43] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:17:45] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 250 seconds)
[05:18:12] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[05:18:56] *** Joins: vimal (~vimal@ip-213-127-89-120.ip.prioritytelecom.net)
[05:19:03] *** Quits: andlabs_ (~andlabs@2604:ca00:17a:c475:21ab:25b5:b9e7:c44c) (Ping timeout: 250 seconds)
[05:20:23] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:d71:9c5b:ce44:719b)
[05:22:34] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[05:28:51] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Quit: The Lounge - https://thelounge.chat)
[05:29:33] *** Joins: c10l (~c10l@user/c10l)
[05:29:41] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[05:29:53] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:29:53] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 250 seconds)
[05:31:04] *** Quits: baakeydow (~baake@163.172.145.178) (Ping timeout: 256 seconds)
[05:31:23] *** Joins: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru)
[05:33:02] *** Quits: shtirlic_ (~shtirlic@pppoe.178-66-64-49.dynamic.avangarddsl.ru) (Read error: Connection reset by peer)
[05:33:42] *** Joins: sheldon (~sheldon@user/sheldon)
[05:33:46] *** Quits: c10l (~c10l@user/c10l) (Client Quit)
[05:33:51] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 265 seconds)
[05:34:09] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:d71:9c5b:ce44:719b) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:34:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[05:34:38] *** Joins: baakeydow (~baake@163.172.145.178)
[05:34:39] *** Joins: c10l (~c10l@user/c10l)
[05:37:29] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[05:37:44] *** Quits: novns (~novns@user/novns) (Quit: ZNC 1.8.2 - https://znc.in)
[05:37:47] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com)
[05:38:12] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[05:38:13] *** Joins: novns (~novns@user/novns)
[05:38:22] *** Joins: noarb (~noarb@user/noarb)
[05:40:03] *** Joins: danderson (~dave@tailscale/danderson)
[05:40:03] *** ChanServ sets mode: +v danderson
[05:41:48] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:42:06] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[05:44:07] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[05:46:54] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[05:48:50] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[05:59:00] *** Joins: cloudfstrife (~cloud@112.64.68.165)
[06:02:53] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:03:38] *** Joins: andlabs (~andlabs@2604:ca00:178:4685:c82e:66e5:10:d73a)
[06:04:24] *** Joins: andlabs_ (~andlabs@2604:ca00:178:4685:81c3:3e16:fa83:89a)
[06:05:06] *** Quits: rightbrace (~rightbrac@bras-base-toroon0817w-grc-36-184-146-151-86.dsl.bell.ca) (Ping timeout: 256 seconds)
[06:06:31] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5d71-0aee-812d-c1b0.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[06:07:12] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 265 seconds)
[06:07:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 264 seconds)
[06:07:41] *** Joins: danderson (~dave@tailscale/danderson)
[06:07:41] *** ChanServ sets mode: +v danderson
[06:08:11] *** Quits: andlabs (~andlabs@2604:ca00:178:4685:c82e:66e5:10:d73a) (Ping timeout: 264 seconds)
[06:08:38] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com)
[06:08:45] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[06:09:58] *** Joins: andlabs (~andlabs@64.9.251.130)
[06:13:35] *** Quits: andlabs_ (~andlabs@2604:ca00:178:4685:81c3:3e16:fa83:89a) (Ping timeout: 264 seconds)
[06:14:08] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:14:27] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 265 seconds)
[06:19:21] *** Joins: danderson (~dave@tailscale/danderson)
[06:19:21] *** ChanServ sets mode: +v danderson
[06:21:00] *** Joins: sheldon (~sheldon@user/sheldon)
[06:21:55] *** Quits: andlabs (~andlabs@64.9.251.130) (Read error: Connection reset by peer)
[06:22:00] *** Joins: andlabs_ (~andlabs@2604:ca00:178:4685:fc1f:4f50:999b:2ad3)
[06:22:09] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:22:52] *** Joins: andlabs (~andlabs@2604:ca00:178:4685:c2b:6625:8741:482d)
[06:23:06] *** Quits: strubbl891941988 (~strubbl@ipb21a9322.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[06:23:24] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[06:25:02] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[06:25:34] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[06:25:58] *** Joins: andlabs__ (~andlabs@2604:ca00:178:4685:7574:7da:4e32:3e0c)
[06:26:13] *** Quits: andlabs_ (~andlabs@2604:ca00:178:4685:fc1f:4f50:999b:2ad3) (Ping timeout: 250 seconds)
[06:27:05] *** Quits: andlabs (~andlabs@2604:ca00:178:4685:c2b:6625:8741:482d) (Ping timeout: 250 seconds)
[06:29:06] *** Joins: sheldon (~sheldon@user/sheldon)
[06:29:26] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:31:27] *** Joins: joe (~joe@bras-base-toroon0817w-grc-36-184-146-151-86.dsl.bell.ca)
[06:31:51] *** joe is now known as Guest7203
[06:33:47] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 265 seconds)
[06:34:10] *** Guest7203 is now known as rightbrace
[06:34:35] *** Joins: Rayke (rayke@user/rayke)
[06:43:15] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[06:43:27] *** Joins: andlabs (~andlabs@64.9.251.130)
[06:43:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:44:17] *** Quits: rightbrace (~joe@bras-base-toroon0817w-grc-36-184-146-151-86.dsl.bell.ca) (Quit: rightbrace)
[06:45:52] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 265 seconds)
[06:47:01] *** Quits: andlabs__ (~andlabs@2604:ca00:178:4685:7574:7da:4e32:3e0c) (Ping timeout: 250 seconds)
[06:47:23] *** Joins: ajfriesen3 (~ajfriesen@cable-78-35-98-50.nc.de)
[06:48:17] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Read error: Connection reset by peer)
[06:48:17] *** ajfriesen3 is now known as ajfriesen
[06:48:42] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[06:48:48] *** Joins: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com)
[06:50:03] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 250 seconds)
[06:51:40] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 265 seconds)
[06:52:11] *** Quits: andlabs (~andlabs@64.9.251.130) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:55:18] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[06:57:34] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:00:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[07:00:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[07:01:52] *** Joins: fikran (~fikran@user/fikran)
[07:02:20] *** Joins: normen (~normen@p54b35554.dip0.t-ipconnect.de)
[07:02:37] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 250 seconds)
[07:03:37] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[07:06:01] *** Quits: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com) (Remote host closed the connection)
[07:06:12] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[07:10:02] *** Quits: normen (~normen@p54b35554.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[07:11:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:14:08] *** Joins: rcernin (~rcernin@124.190.139.235)
[07:14:32] *** Joins: danderson (~dave@tailscale/danderson)
[07:14:32] *** ChanServ sets mode: +v danderson
[07:16:29] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[07:18:28] *** Joins: sheldon (~sheldon@user/sheldon)
[07:22:55] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Quit: WeeChat 3.3)
[07:22:59] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[07:23:13] *** Joins: andlabs (~andlabs@70.107.171.168)
[07:23:38] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[07:24:43] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[07:25:29] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Client Quit)
[07:25:30] *** Quits: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net) (Ping timeout: 265 seconds)
[07:25:52] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[07:29:49] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[07:30:03] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[07:31:13] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 250 seconds)
[07:32:10] *** Joins: mooff (mooff@awful.cooking)
[07:34:12] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[07:38:45] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[07:42:01] *** Quits: sav_ (~sav@177.12.48.155) (Quit: Leaving)
[07:45:12] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[07:54:59] *** Quits: cloudfstrife (~cloud@112.64.68.165) (Ping timeout: 265 seconds)
[07:55:55] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 250 seconds)
[07:56:42] *** Joins: danderson (~dave@tailscale/danderson)
[07:56:42] *** ChanServ sets mode: +v danderson
[07:58:21] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:03:12] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[08:10:43] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[08:23:13] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 250 seconds)
[08:25:13] *** Joins: danderson (~dave@tailscale/danderson)
[08:25:13] *** ChanServ sets mode: +v danderson
[08:33:02] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[08:36:04] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 265 seconds)
[08:36:52] *** Joins: danderson (~dave@tailscale/danderson)
[08:36:52] *** ChanServ sets mode: +v danderson
[08:38:00] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[08:44:01] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:50:31] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 250 seconds)
[08:53:17] *** Joins: danderson (~dave@tailscale/danderson)
[08:53:17] *** ChanServ sets mode: +v danderson
[09:06:37] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:09:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[09:09:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:11:21] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 265 seconds)
[09:11:30] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:13:15] *** Joins: danderson (~dave@tailscale/danderson)
[09:13:15] *** ChanServ sets mode: +v danderson
[09:13:17] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Ping timeout: 265 seconds)
[09:17:49] *** Quits: danderson (~dave@tailscale/danderson) (Ping timeout: 250 seconds)
[09:22:22] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[09:23:13] *** Joins: fikran (~fikran@user/fikran)
[09:24:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:28:48] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[09:30:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[09:30:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:34:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Ping timeout: 268 seconds)
[09:38:02] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 240 seconds)
[09:40:26] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[09:41:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[09:41:53] *** Joins: cloudfstrife (~cloud@2408:840c:951e:777c:13e:bf7a:d952:89b)
[09:42:05] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:42:57] *** Joins: sheldon (~sheldon@user/sheldon)
[09:46:31] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[09:46:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:47:17] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 250 seconds)
[09:47:56] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:51:11] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 250 seconds)
[09:52:18] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[09:53:48] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[09:57:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:58:43] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[09:59:21] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[10:02:06] *** Quits: mic4ael (~mic4ael@kolodzie-pc.cern.ch) (Ping timeout: 265 seconds)
[10:02:24] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[10:03:45] *** Joins: mic4ael (~mic4ael@kolodzie-pc.cern.ch)
[10:09:11] *** Joins: Leon_ (~Leon@138.sub-174-198-200.myvzw.com)
[10:09:35] *** Leon_ is now known as Guest3728
[10:11:31] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[10:12:25] *** Quits: leonthemisfit (~Leon@user/leonthemisfit) (Ping timeout: 250 seconds)
[10:18:08] *** Quits: lilgopher (~textual@2601:241:8000:38f0:d57d:ecca:5e52:8ff5) (Quit: Textual IRC Client: www.textualapp.com)
[10:18:10] *** Joins: et_ (~et@user/et)
[10:18:55] *** Quits: et (~et@user/et) (Ping timeout: 250 seconds)
[10:18:55] *** et_ is now known as et
[10:21:50] *** Quits: pvalenta (~petr@mail.open-system.cz) (Quit: ZNC - https://znc.in)
[10:23:14] *** Joins: danderson (~dave@tailscale/danderson)
[10:23:14] *** ChanServ sets mode: +v danderson
[10:23:56] *** Joins: pvalenta (~petr@mail.open-system.cz)
[10:30:16] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[10:30:29] *** Joins: queue- (~nerd@rektnet.com)
[10:31:14] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:31:33] <queue-> should my api auth server be compartmentalized away from my front-end even if its all in golang, should i put them in separate docker containers for each service here, one serving up html, one serving up api, or can i just throw all my html in with the api stuff, theres no security flaw?
[10:31:45] <queue-> how does that look in terms of web security
[10:34:31] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[10:40:11] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[10:43:53] <b0nn> seperate into multiple containers *when* your requirements need for that to happen
[10:44:29] <b0nn> Is this for a production environment, or demonstration?
[10:45:06] <queue-> production environment eventually
[10:45:35] <b0nn> So, the key to a happy life is to build for the problem you have, not the problem you want
[10:46:30] <b0nn> You can build all that horizontal scability into it now, but if you don't need it, you're better off focusing on other tasks that will being you in $
[10:46:41] <b0nn> dammit, I sound like a PM :'(
[10:48:13] <queue-> i can do that a number of ways but im wondering waht the best usage here is since im setting the os env vars with user/pass/app key, then rather than a db im using a func with modals to save info but yea i definitely want horizontal scalability
[10:48:36] <b0nn> Here's how Netflix are saying that they do it https://netflixtechblog.com/edge-authentication-and-token-agnostic-identity-propagation-514e47e0b602
[10:48:49] <deniska> Fracturing your program into microservices is a sure way to both make it less performant and less understandable
[10:49:42] <queue-> i see b0nn, ty
[10:49:51] <queue-> https://miro.medium.com/max/700/0*O9jFfeg6KaxBVVTY says it all
[10:50:24] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[10:50:36] <b0nn> But, they have the requirements to build such a beast, and the $ to staff the engineers to maintain it
[10:51:24] <queue-> im a devops engineer, all of this is going to end up being part of something much larger in the long run so might as well do it right the first time and throw this into my kubernetes setup
[10:51:39] <queue-> im simply replacing my python flask framework with golang
[10:52:24] <queue-> i replaced my php phalcon framework with python flask
[10:52:57] <b0nn> heh, as a frequent over-engineerer myself, I'm in no position to pass judgement ;)
[10:53:37] <queue-> but yea i wouldnt need this big of a beast haha
[10:53:54] <deniska> Once I discovered that 512gb of RAM is not that expensive unless you rent it off the cloud, I don't really believe in horizontal scaling for most practical purposes :)
[10:54:47] <sztanpet> well yes, its rare you really need horizontal scalability
[10:54:55] <queue-> i do it for a job
[10:55:00] <queue-> its a new job lol
[10:55:07] <queue-> i went from level 2 tech to devops engineer
[10:55:31] <deniska> I too do unthinkable things for money
[10:56:06] <b0nn> OMG someone submit that to bash.org
[10:56:14] <queue-> lol
[10:56:26] <queue-> that was open for a lot of good jokes there
[11:00:32] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[11:01:46] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3)
[11:03:52] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[11:05:20] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:10:15] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[11:11:17] *** Joins: Memory (~user_name@user/memory)
[11:13:26] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[11:13:26] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[11:13:26] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:14:11] *** Quits: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[11:15:14] *** Joins: sheldon (~sheldon@user/sheldon)
[11:15:18] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[11:15:36] *** Quits: bbear (~znc@21212.s.t4vps.eu) (Ping timeout: 256 seconds)
[11:16:15] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[11:16:43] *** Joins: jla (~jordi@64.225.79.195)
[11:20:11] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[11:30:33] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[11:30:41] *** Joins: adip (~adip@dib205.neoplus.adsl.tpnet.pl)
[11:32:34] *** Joins: fikran (~fikran@user/fikran)
[11:35:26] *** Quits: adip (~adip@dib205.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:39:22] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[11:40:23] *** Quits: chasmo77 (~chas77@71.63.241.168) (Ping timeout: 250 seconds)
[11:41:24] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[11:43:12] *** Joins: chasmo77 (~chas77@71.63.241.168)
[11:43:20] *** Quits: cloudfstrife (~cloud@2408:840c:951e:777c:13e:bf7a:d952:89b) (Remote host closed the connection)
[11:43:52] *** Joins: cloudfstrife (~cloud@2408:840c:951e:777c:c546:6723:3b55:515e)
[11:46:19] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[11:50:14] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[11:52:18] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 265 seconds)
[11:53:49] *** Joins: Thursday (~Thursday@user/thursday)
[11:55:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[11:59:33] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:00:34] *** Joins: mrig (~AdiIRC@user/mrig)
[12:00:38] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[12:01:22] *** Joins: sheldon (~sheldon@user/sheldon)
[12:01:59] *** Quits: jannis (~jannis@user/xjs) (Quit: Bye.)
[12:02:17] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Quit: Leaving)
[12:02:22] *** Joins: Xjs (~jannis@user/xjs)
[12:04:23] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[12:05:47] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[12:06:44] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[12:10:56] *** Joins: uio (~incomplet@89-220-239-102.cable.dynamic.v4.ziggo.nl)
[12:14:31] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[12:15:04] *** Joins: normen (~normen@p200300d71723fa002c347580d1cbc2bc.dip0.t-ipconnect.de)
[12:15:30] *** Quits: uio (~incomplet@89-220-239-102.cable.dynamic.v4.ziggo.nl) (Quit: Leaving)
[12:17:59] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:18:04] *** Joins: meinside (uid24933@helmsley.irccloud.com)
[12:19:35] *** Quits: cloudfstrife (~cloud@2408:840c:951e:777c:c546:6723:3b55:515e) (Ping timeout: 264 seconds)
[12:20:20] *** Joins: rcernin (~rcernin@124.190.139.235)
[12:20:43] <seebs> remember, if you write ten thousand microservices, you've written one percent of a service
[12:20:48] *** Joins: cloudfstrife (~cloud@2408:840c:911e:2d0b:54da:c990:4ddf:5928)
[12:24:17] *** Joins: adip (~adip@dib205.neoplus.adsl.tpnet.pl)
[12:32:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[12:33:15] *** Joins: sheldon (~sheldon@user/sheldon)
[12:34:56] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[12:37:35] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[12:37:59] <mikoto-chan> https://dpaste.com/CLXFZ4775
[12:38:03] <mikoto-chan> why does this not work?
[12:40:35] *** Quits: sheldon (~sheldon@user/sheldon) (Ping timeout: 264 seconds)
[12:49:24] <KirkMcDonald> mikoto-chan: Looks like you got those slices backwards.
[12:50:15] <KirkMcDonald> mikoto-chan: But also, assigning to `s` will not be visible to the caller.
[12:59:21] *** Joins: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de)
[13:03:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:04:57] *** Joins: sav_ (~sav@177.12.48.155)
[13:09:39] *** Joins: dr0n (~nabromov@92.40.255.112.threembb.co.uk)
[13:10:54] *** Quits: c10l (~c10l@user/c10l) (Read error: Connection reset by peer)
[13:11:05] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[13:17:43] *** Joins: Exaga (~exaga@sarpi/maintainer/exaga)
[13:19:54] <Exaga> hi folks. a quick question if i may... installing go-lang on a linux system - i'm 99% sure i read somewhere in a guide that after installing Go that root user needs to log out and back into the system. alas, for the life in me I cannot seem to find that guide again. Am I getting confuzzled with something else or is that an actual requirement? thanks in advance :)
[13:20:03] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Ping timeout: 250 seconds)
[13:25:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:29:16] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:29:35] *** Quits: rcernin (~rcernin@124.190.139.235) (Ping timeout: 250 seconds)
[13:29:54] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:31:22] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[13:32:58] <KirkMcDonald> Exaga: It is not at all unusual for a user to install Go into their home directory, meaning root would not need to do anything at all.
[13:33:17] <Exaga> KirkMcDonald: ok thank you
[13:33:39] <Exaga> i must have got my wires crossed somewhere along the line
[13:35:25] *** Joins: c10l (~c10l@user/c10l)
[13:38:03] *** Quits: amolith (~amolith@nixnet/founder/amolith) (Quit: o/)
[13:39:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[13:40:37] <sztanpet> maybe if PATH changes?
[13:41:19] <Exaga> sztanpet: ahh... what if GOPATH has not been set?
[13:41:39] <Exaga> i'm sorry if this is a novice question. i am very new to Go
[13:41:46] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[13:41:55] *** Joins: fikran (~fikran@user/fikran)
[13:43:17] <sztanpet> GOPATH is irrelevant nowadays
[13:43:29] <Exaga> my problem is/was: i installed go-lang 1.16.3 on my system as root user. to test it was working i ran ~# go get golang.org/x/tools/cmd/godoc
[13:43:59] <Exaga> nothing happened, so i logged out and back in as root user. used tha same command again and viola - it works!
[13:44:59] *** Joins: alzgh (~alzgh@user/alzgh)
[13:44:59] <Exaga> i'm just trying to understand what I did wrong or what i should be doing instead of what I am doing, if that makes sense
[13:45:37] <sztanpet> we dont know what you did tho
[13:46:20] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[13:47:16] <Exaga> sztanpet: that's all I did - and as I said, i seem to remember reading somewhere that loggin in and out was required
[13:47:25] <Exaga> maybe i am barking up the wrong tree
[13:47:30] <sztanpet> how did you install go tho
[13:47:39] <sztanpet> did you use your distros package?
[13:47:44] <Exaga> yes
[13:48:41] <sztanpet> yea, maybe your PATH got modified to include $GOPATH/bin and that came into effect when you logged in again
[13:49:08] <Exaga> thank you. i will make a note of that for future reference :)
[13:56:25] *** Joins: rusty (~rustyboy@82.77.237.221)
[13:56:28] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:64e2:c502:91bb:b0a9)
[13:56:56] <Exaga> have a good day folks. thank you for your help and patience o/
[13:57:00] *** Parts: Exaga (~exaga@sarpi/maintainer/exaga) (I'm leaving; metaphorically, metaphysically, and literally.)
[13:57:33] *** Joins: sleetdrop (~sleetdrop@61.135.152.248)
[14:00:08] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:02:19] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:64e2:c502:91bb:b0a9) (Ping timeout: 265 seconds)
[14:02:24] *** Quits: rusty (~rustyboy@82.77.237.221) (Remote host closed the connection)
[14:02:57] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[14:04:46] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:05:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:08:16] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[14:18:55] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:19:12] *** Quits: sleetdrop (~sleetdrop@61.135.152.248) (Ping timeout: 256 seconds)
[14:21:11] *** Joins: krux02 (~krux02@194.8.199.29)
[14:21:14] *** Joins: nabromov (~nabromov@94.11.23.235)
[14:23:44] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[14:24:04] *** Quits: dr0n (~nabromov@92.40.255.112.threembb.co.uk) (Ping timeout: 265 seconds)
[14:27:30] *** Quits: meinside (uid24933@helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[14:37:35] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:40:36] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:40:50] *** Quits: fputs (~fputs@67.59.83.166) (Remote host closed the connection)
[14:41:40] *** Joins: fputs (~fputs@67.59.83.166)
[14:41:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[14:42:15] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[14:42:41] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[14:48:22] *** Joins: Ergo^ (~ergo@91.238.59.144)
[14:56:33] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[14:57:20] *** Joins: pepee (~pepee@user/pepee)
[15:01:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[15:01:29] *** Quits: cloudfstrife (~cloud@2408:840c:911e:2d0b:54da:c990:4ddf:5928) (Quit: Konversation terminated!)
[15:02:02] *** Joins: moldorcoder7_ (~moldorcod@37.120.143.28)
[15:02:50] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 256 seconds)
[15:03:11] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 250 seconds)
[15:06:51] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[15:12:33] *** Joins: jla (~jordi@64.225.79.195)
[15:13:38] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:18:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 268 seconds)
[15:19:18] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:64e2:c502:91bb:b0a9)
[15:20:55] *** Joins: rcernin_ (~rcernin@124.190.139.235)
[15:24:23] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:64e2:c502:91bb:b0a9) (Ping timeout: 264 seconds)
[15:29:11] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[15:29:52] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[15:29:59] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Ping timeout (120 seconds))
[15:30:00] <dalan62367> How would I create a slice of interfaces? Something like `type rule interface {}` and then `[]rule := { structThatSatisfiesInterface{}, otherStructThatSatisfiesInterface{}, }` etc?
[15:30:17] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[15:30:33] *** Joins: pztrn (~pztrn@user/pztrn)
[15:34:38] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 265 seconds)
[15:38:23] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[15:40:41] *** Quits: blrn (~tcook@user/blrn) (Quit: WeeChat 2.8)
[15:40:55] *** Quits: GJdan (~quassel@107-190-26-141.cpe.teksavvy.com) (Ping timeout: 265 seconds)
[15:43:40] <fizzie> It's not really different to any other slice. `rules := []rule{ x, y, z, ... }` where x, y, z are expressions that result in values that implement the interface. So if `type T struct {...}` does so, x could be `T{...}`. Though more often than not, it's the type `*T` that satisfies the interface, and you'd include `&T{...}` in the slice instead.
[15:46:21] <fizzie> https://play.golang.org/p/fjiczHF3gnB and so on (for the possibly less common case where it's the struct types that do implement the interface).
[15:47:49] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[15:49:10] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[15:51:17] *** Joins: fikran (~fikran@user/fikran)
[15:57:39] *** kn1001 is now known as kn100
[16:02:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:03:36] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:03:42] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[16:04:19] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:04:24] *** Quits: henry40408 (~henry4040@112.104.114.35) (Quit: The Lounge - https://thelounge.chat)
[16:05:15] *** Joins: henry40408 (~henry4040@112-104-114-35.adsl.dynamic.seed.net.tw)
[16:05:28] *** Quits: henry40408 (~henry4040@112-104-114-35.adsl.dynamic.seed.net.tw) (Read error: Connection reset by peer)
[16:06:10] *** Joins: henry40408 (~henry4040@112-104-114-35.adsl.dynamic.seed.net.tw)
[16:09:08] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:09:20] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e)
[16:10:36] *** Joins: Guest28 (~Guest28@46.7.126.11)
[16:11:38] *** Quits: nabromov (~nabromov@94.11.23.235) (Quit: WeeChat 2.8)
[16:12:16] *** Quits: Guest28 (~Guest28@46.7.126.11) (Client Quit)
[16:15:05] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[16:17:38] *** Quits: X-Scale (~ARM@83.223.235.65) (Ping timeout: 256 seconds)
[16:17:58] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[16:19:15] *** X-Scale` is now known as X-Scale
[16:19:33] *** Joins: noord (~noord@user/noord)
[16:22:12] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[16:22:39] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:27:16] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 256 seconds)
[16:27:23] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Ping timeout: 264 seconds)
[16:28:24] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[16:36:12] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:36:50] *** Joins: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d15f:a494:a911:62f8)
[16:40:58] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[16:43:33] *** Quits: rcernin_ (~rcernin@124.190.139.235) (Ping timeout: 268 seconds)
[16:45:02] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[16:45:27] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 250 seconds)
[16:46:34] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[16:46:35] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 264 seconds)
[16:51:20] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[16:59:03] *** Joins: samlamamma (~samlamamm@proxy01.se.axis.com)
[17:00:54] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[17:00:54] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[17:00:54] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[17:05:27] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:15:23] *** Joins: Ergo^ (~ergo@91.238.59.144)
[17:17:14] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:22:02] *** Quits: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net) (Ping timeout: 260 seconds)
[17:22:48] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:32:09] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[17:34:00] *** Joins: DogHackit (~nathanren@c-76-27-57-63.hsd1.ut.comcast.net)
[17:36:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[17:37:19] <dostoyevsky2> Is there a function that will tell me whether a file is binary/text?  I think I would just write a function that reads the first 10k of a file (max) and looks for a \0 character
[17:43:41] *** Quits: g2anj (~v@39.112.227.198) (Ping timeout: 265 seconds)
[17:48:46] *** Joins: jla (~jordi@64.225.79.195)
[17:51:37] *** Joins: GJdan (~quassel@107-190-26-141.cpe.teksavvy.com)
[17:55:16] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com)
[17:58:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[17:58:58] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:00:14] <deniska> you can try decoding it as utf-8, but then other encodings exist
[18:00:39] *** Joins: fikran (~fikran@user/fikran)
[18:01:45] *** Quits: erhandsome (~erhandsom@user/erhandsome) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[18:03:11] *** Joins: erhandsome (~erhandsom@user/erhandsome)
[18:04:47] *** Joins: dozn (uid249292@user/dozn)
[18:05:54] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[18:11:41] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[18:17:46] *** Joins: solitonmedic (~c0a80069@user/solitonmedic)
[18:19:05] *** Quits: internut (~internut@2601:280:4e00:7b70:49d1:8c3c:68e5:74c0) (Remote host closed the connection)
[18:19:44] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[18:24:00] *** Quits: dozn (uid249292@user/dozn) (Ping timeout: 256 seconds)
[18:24:44] *** Joins: dozn (uid249292@user/dozn)
[18:25:42] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[18:27:48] *** Joins: sailorCat (~sailorCat@mail2.gajsin.name)
[18:28:29] *** Quits: thorsager (~mit@green.krakow.dk) (Quit: Lost terminal)
[18:31:26] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:b65d:31b:86ff:e40e) (Remote host closed the connection)
[18:31:40] *** Joins: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4)
[18:32:00] *** Quits: krux02 (~krux02@194.8.199.29) (Quit: Leaving)
[18:35:24] <seebs> there is not in general a way to meaningfully *define* a distinction between binary and text, although you can guess fairly well by looking for things that are valid UTF-8.
[18:38:39] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[18:40:01] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[18:42:04] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[18:45:14] <dostoyevsky2> Perl had these -B and -T flags for filenames, so I thought maybe this idea caught on and Go also already has that distinction builtin somehow, but it never worked perfectly, so I guess that's why it isn't
[18:45:15] *** Joins: neurocyte0132889 (~neurocyte@45.131.37.7)
[18:45:15] *** Quits: neurocyte0132889 (~neurocyte@45.131.37.7) (Changing host)
[18:45:15] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[18:45:40] *** Joins: LiftLeft (~LiftLeft@216-26-118-34.dynamic.nelson.airstreamcomm.net)
[18:46:33] *** Joins: notepad7 (~notepad@129.159.46.243)
[18:48:08] *** Quits: notepad7 (~notepad@129.159.46.243) (Client Quit)
[18:49:42] *** Joins: notepad7 (~notepad@129.159.46.243)
[19:00:26] *** Joins: tg (~tg@rockylinux/infra/tg)
[19:02:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:06:58] *** Joins: mooff (mooff@awful.cooking)
[19:09:37] *** Quits: mooff (mooff@awful.cooking) (Client Quit)
[19:10:29] *** Joins: mooff (mooff@awful.cooking)
[19:15:13] <kn100> Imagining I'm using the Go http package to handle routes, like so: `srvmux.Handle("/some-path/lists/", nrgorilla.InstrumentRoutes...)` Can I route paths which contain a variable? something like srvmux.Handle("/some-path/lists/{some-id}/status")?
[19:17:17] <dostoyevsky2> kn100: that's the syntax...
[19:18:04] <dostoyevsky2> params := mux.Vars(r_http_Reuqest); params["some-id"]
[19:18:55] <kn100> dostoyevsky2: Another example of where I should have just...tried it. lol. Thanks
[19:20:46] *** Joins: arinov (~arinov@5.24.160.250)
[19:21:46] <rawtaz> doesnt the docs say?
[19:24:09] <dostoyevsky2> Speaking of gorilla, I in `ls -al ~/go/pkg/mod/github.com/gorilla/' I have a `mux@v1.8.0' ... people told me I should consider vendoring if I want to safe-guard that code against tampering...  The easiest way seems to me to just import that version from github into my own repo
[19:25:35] <dostoyevsky2> And then adjust all the imports to that local location... hmmm
[19:28:02] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[19:29:13] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:32:29] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[19:33:29] <leitz> If you have a string of phrases seperated by whitespace, and you want to make two strings; one with just the last phrase, and the other with everything else, is there a better way than doing a Split, taking the last phrase, and the Join everything else back?
[19:33:41] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[19:33:42] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[19:33:58] *** Quits: andlabs (~andlabs@70.107.171.168) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:34:27] *** Quits: FunnyLookinHat (~FunnyLook@64.184.172.137) (Ping timeout: 250 seconds)
[19:35:26] *** Quits: samlamamma (~samlamamm@proxy01.se.axis.com) (Quit: Client closed)
[19:36:40] *** Joins: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de)
[19:36:40] *** Quits: tane (~tane@dslb-002-201-234-197.002.201.pools.vodafone-ip.de) (Changing host)
[19:36:40] *** Joins: tane (~tane@user/tane)
[19:37:19] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637) (Read error: Connection reset by peer)
[19:38:07] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com)
[19:43:10] *** Quits: sav_ (~sav@177.12.48.155) (Quit: Leaving)
[19:43:15] <dostoyevsky2> leitz: search backwards for the last whitespace and split directly there?
[19:43:30] *** Joins: sav (~sav@177.12.48.155)
[19:43:54] *** sav is now known as Guest7702
[19:45:00] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Quit: leaving)
[19:51:29] *** Joins: andlabs (~andlabs@2604:ca00:178:4685:fde4:1bf0:ccce:b63c)
[19:51:56] <arinov> why i cant execute `gopkg.in/yaml.v2/go/src/gopkg.in/yaml.v2`?
[19:53:09] <arinov> i set my GOROOT in /usr/bin
[19:53:21] <arinov> where go binary exists
[19:54:06] *** Quits: dan01[m] (~dan01@2001:470:69fc:105::1:2640) (K-Lined)
[19:54:06] *** Quits: meain (~meain@2001:470:69fc:105::2db) (K-Lined)
[19:54:06] *** Quits: enick_495 (~dngraymat@2001:470:69fc:105::793b) (K-Lined)
[19:54:06] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (K-Lined)
[19:54:08] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (K-Lined)
[19:54:08] *** Quits: kadoban (~kadoban@user/kadoban) (K-Lined)
[19:54:09] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (K-Lined)
[19:54:09] *** Quits: psydroid (~psydroid@user/psydroid) (K-Lined)
[19:54:11] *** Quits: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27) (K-Lined)
[19:54:11] *** Quits: jzacsh[m] (~jzacshm]@2001:470:69fc:105::462) (K-Lined)
[19:54:13] *** Quits: enick_208 (~dngray@user/dngray) (K-Lined)
[19:54:13] *** Quits: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4) (K-Lined)
[19:54:15] *** Quits: petoem (~petoem@user/petoem) (K-Lined)
[19:54:15] *** Quits: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25) (K-Lined)
[19:54:17] *** Quits: dung[m] (~dungbrocc@2001:470:69fc:105::d25b) (K-Lined)
[19:54:17] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (K-Lined)
[19:54:17] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (K-Lined)
[19:54:18] *** Quits: mambang[m] (~mambang@user/mambang) (K-Lined)
[19:54:18] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (K-Lined)
[19:54:19] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (K-Lined)
[19:54:20] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (K-Lined)
[19:54:22] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (K-Lined)
[19:54:22] *** Quits: gio[m] (~giolekvam@2001:470:69fc:105::1:16a) (K-Lined)
[19:54:22] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (K-Lined)
[19:54:24] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (K-Lined)
[19:54:24] *** Quits: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb) (K-Lined)
[19:54:24] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (K-Lined)
[19:55:09] *** Quits: __alex (~alex@ip5f5be3c9.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[19:55:30] <sztanpet> you dont need to set GOROOT
[19:55:43] <sztanpet> also, what are you trying to execute in a library?
[19:56:08] *** Quits: bkircher (~bkircher@2001:a61:250f:2b01:4b96:7ca4:45ee:36d4) (Quit: Leaving)
[19:57:26] <arinov> no in bash
[19:57:46] <sztanpet> what do you expect GOROOT does?
[19:57:50] *** Joins: easbarbosa (~user@2804:1b2:180:3cf8:a663:a1ff:fe49:c8ed)
[19:58:20] <arinov> the first try to go get this url was give me an error i have no set it
[19:58:25] <leitz> dostoyevsky2, I think the split and join might be easier for a human to read.
[19:58:28] <arinov> so i set it to go binary folder
[19:58:32] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 265 seconds)
[19:59:56] <arinov> i tryied to set gopath also, i read go help gopath and i dont know where to set it because i dont have any 'The GOPATH environment variable lists places to look for Go code.' any go code yet on this machine
[20:00:12] <arinov> i just wanted to check ho it works and it seem on my machine it does not
[20:00:36] *** Joins: holgersson (~quassel@user/holgersson)
[20:00:45] <arinov> my expectations was this works similar as pip install something for python for example
[20:00:58] <arinov> but it seems more like :q! in vim
[20:02:07] <arinov> i think my system is broken, thats why i ask here, everything i googled about goroot and gopath looks like distro depends
[20:03:02] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Ping timeout: 260 seconds)
[20:03:20] *** Quits: michele_ (~eraser@user/michele) (Remote host closed the connection)
[20:03:37] *** Joins: michele (~eraser@user/michele)
[20:03:46] <arinov> ok nevermind, seems i just set wrong GOPATH into directory i moved
[20:04:17] *** Quits: cespare (sid330206@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[20:04:21] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[20:04:28] <arinov> it was my fault
[20:04:47] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[20:05:28] *** Quits: justicefries (sid26447@tinside.irccloud.com) (Ping timeout: 265 seconds)
[20:05:29] *** Quits: Shrike (sid305680@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: liam_ (sid7517@helmsley.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: hjmcnew____ (sid86092@tinside.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: lebster (sid17131@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: dreistadt (sid501648@lymington.irccloud.com) (Ping timeout: 264 seconds)
[20:05:29] *** Quits: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net) (Ping timeout: 264 seconds)
[20:05:34] *** Joins: tristero (~nobody@user/tristero)
[20:05:47] *** Quits: ansimita (~ansimita@user/ansimita) (Ping timeout: 264 seconds)
[20:05:57] *** Quits: Manouchehri (sid384576@hampstead.irccloud.com) (Ping timeout: 265 seconds)
[20:05:57] *** Quits: seds (sid492514@user/seds) (Ping timeout: 265 seconds)
[20:06:05] *** Quits: soren (sid124229@uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[20:06:05] *** Quits: dreamcat4 (uid157427@hampstead.irccloud.com) (Ping timeout: 264 seconds)
[20:06:05] *** Quits: Anderson-D (sid146635@tinside.irccloud.com) (Ping timeout: 264 seconds)
[20:06:11] *** Joins: dreistadt (sid501648@lymington.irccloud.com)
[20:06:22] *** Joins: cespare (sid330206@hampstead.irccloud.com)
[20:06:51] *** Quits: thinkofher (~thinkofhe@user/thinkofher) (Ping timeout: 244 seconds)
[20:06:55] *** Quits: alm (~alm@user/alm) (Ping timeout: 265 seconds)
[20:07:04] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 268 seconds)
[20:07:17] *** Quits: dove_ (~jordan@li1158-85.members.linode.com) (Read error: Connection reset by peer)
[20:07:27] *** Joins: dove (~jordan@li1158-85.members.linode.com)
[20:07:29] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[20:07:35] *** Joins: buu (~buu@70-142-48-147.lightspeed.austtx.sbcglobal.net)
[20:07:44] *** Joins: kadoban (~kadoban@user/kadoban)
[20:07:44] *** Joins: gio[m] (~giolekvam@2001:470:69fc:105::1:16a)
[20:07:44] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[20:07:44] *** Quits: cornfeedhobo (~cornfeedh@user/cornfeedhobo) (Ping timeout: 246 seconds)
[20:07:44] *** Joins: mambang[m] (~mambang@user/mambang)
[20:07:44] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[20:07:44] *** Joins: psydroid (~psydroid@user/psydroid)
[20:07:44] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[20:07:44] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[20:07:44] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[20:07:44] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[20:07:44] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[20:07:44] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[20:07:45] *** Joins: Guest5434 (~dngraymat@2001:470:69fc:105::793b)
[20:07:45] *** Joins: jzacsh[m] (~jzacshm]@2001:470:69fc:105::462)
[20:07:45] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[20:07:56] *** Joins: pulsepoint433[m] (~pulsepoin@2001:470:69fc:105::1:1f25)
[20:07:56] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[20:07:56] *** Joins: Endow[m] (~endowmatr@2001:470:69fc:105::1:21eb)
[20:07:56] *** Joins: dung[m] (~dungbrocc@2001:470:69fc:105::d25b)
[20:07:56] *** Joins: itsjoints (~itsjoints@2001:470:69fc:105::1:29f4)
[20:07:57] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[20:07:58] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[20:07:58] *** Joins: petoem (~petoem@user/petoem)
[20:07:58] *** Joins: darkskiez[m] (~darkskiez@2001:470:69fc:105::1:2a27)
[20:07:59] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[20:07:59] *** Joins: enick_741 (~dngray@user/dngray)
[20:08:00] *** Joins: thinkofher (~thinkofhe@user/thinkofher)
[20:08:09] *** Joins: alm (~alm@user/alm)
[20:08:16] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[20:08:29] *** Quits: redlegion (sid429547@ilkley.irccloud.com) (Ping timeout: 264 seconds)
[20:08:29] *** Quits: eric_hill (sid323132@tinside.irccloud.com) (Ping timeout: 264 seconds)
[20:08:35] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[20:08:51] *** Quits: wangledorf (sid505185@ilkley.irccloud.com) (Ping timeout: 265 seconds)
[20:09:02] *** Quits: psb_ (sid500598@ilkley.irccloud.com) (Ping timeout: 240 seconds)
[20:09:02] *** Quits: jimcroft_______ (sid148498@uxbridge.irccloud.com) (Ping timeout: 240 seconds)
[20:09:02] *** Quits: sa (sid1055@tinside.irccloud.com) (Ping timeout: 240 seconds)
[20:09:02] *** Quits: hdm (sid500490@aha/hacker/hdm) (Ping timeout: 240 seconds)
[20:09:31] *** Quits: obviyus (sid415299@user/obviyus) (Ping timeout: 268 seconds)
[20:09:31] *** Quits: kubblai (sid478659@fedora/kubblai) (Ping timeout: 268 seconds)
[20:09:32] *** Quits: braxas (sid508886@lymington.irccloud.com) (Ping timeout: 240 seconds)
[20:09:33] *** Quits: trollixx (sid289131@uxbridge.irccloud.com) (Ping timeout: 250 seconds)
[20:09:33] *** Quits: pombreda (sid227801@tinside.irccloud.com) (Ping timeout: 250 seconds)
[20:09:39] *** Quits: avery (sid501608@uxbridge.irccloud.com) (Ping timeout: 265 seconds)
[20:09:39] *** Quits: bw (sid2730@user/betawaffle) (Ping timeout: 265 seconds)
[20:09:39] *** Quits: aarchi (sid486183@uxbridge.irccloud.com) (Ping timeout: 265 seconds)
[20:09:57] *** Quits: dozn (uid249292@user/dozn) (Read error: Connection reset by peer)
[20:09:57] *** Quits: Balooga (sid407689@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:09:57] *** Quits: chimeracoder_ (sid230642@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:09:58] *** Quits: nescafe1001 (sid211018@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:09:58] *** Quits: dreistadt (sid501648@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:09:58] *** Quits: qaisjp (sid26374@user/qaisjp) (Read error: Connection reset by peer)
[20:09:58] *** Quits: hhes (sid420846@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:09:58] *** Quits: theckman (sid295081@user/theckman) (Read error: Connection reset by peer)
[20:10:00] *** Quits: mustafa (sid502723@rockylinux/releng/mustafa) (Read error: Connection reset by peer)
[20:10:00] *** Quits: telemachus (sid2004@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:01] *** Joins: fikran (~fikran@user/fikran)
[20:10:01] *** Quits: recursion (sid504862@ilkley.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: Pent (sid313808@lymington.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: jsvcycling (sid369784@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: computerquip (sid423484@user/computerquip) (Read error: Connection reset by peer)
[20:10:02] *** Quits: derfj (sid19429@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:10:02] *** Quits: morgabra (sid500580@user/morgabra) (Write error: Connection reset by peer)
[20:10:03] *** Quits: decartes_ (sid240036@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:03] *** Quits: r0bby (r0bby@user/r0bby) (Read error: Connection reset by peer)
[20:10:04] *** Quits: pl (sid98063@helmsley.irccloud.com) (Read error: Connection reset by peer)
[20:10:04] *** Quits: chromis (sid150893@tinside.irccloud.com) (Read error: Connection reset by peer)
[20:10:04] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Read error: Connection reset by peer)
[20:10:04] *** Quits: st3fan (sid43079@lymington.irccloud.com) (Write error: Connection reset by peer)
[20:10:04] *** Quits: jzelinskie (sid17772@user/jzelinskie) (Read error: Connection reset by peer)
[20:11:36] *** Joins: morgabra (sid500580@user/morgabra)
[20:11:37] *** Joins: trollixx (sid289131@uxbridge.irccloud.com)
[20:11:43] *** Joins: mustafa (sid502723@rockylinux/releng/mustafa)
[20:11:45] *** Joins: braxas (sid508886@lymington.irccloud.com)
[20:11:56] *** Quits: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:11:58] *** Joins: seds (sid492514@user/seds)
[20:11:58] *** Joins: Anderson-D (sid146635@tinside.irccloud.com)
[20:12:00] *** Joins: lebster (sid17131@hampstead.irccloud.com)
[20:12:11] *** Joins: dozn (uid249292@user/dozn)
[20:12:11] *** Joins: jimcroft_______ (sid148498@uxbridge.irccloud.com)
[20:12:13] *** Joins: dreistadt (sid501648@lymington.irccloud.com)
[20:12:15] *** Joins: recursion (sid504862@ilkley.irccloud.com)
[20:12:15] *** Joins: nescafe1001 (sid211018@tinside.irccloud.com)
[20:12:19] *** Joins: Balooga (sid407689@lymington.irccloud.com)
[20:12:23] *** Joins: obviyus (sid415299@user/obviyus)
[20:12:24] *** Joins: soren (sid124229@uxbridge.irccloud.com)
[20:12:25] *** Joins: jzelinskie (sid17772@user/jzelinskie)
[20:12:30] *** Joins: krux02 (~krux02@p200300e8172958000e9c089d099881c9.dip0.t-ipconnect.de)
[20:12:33] *** Joins: eric_hill (sid323132@tinside.irccloud.com)
[20:12:37] *** Joins: dreamcat4 (uid157427@hampstead.irccloud.com)
[20:12:43] *** Joins: jsvcycling (sid369784@uxbridge.irccloud.com)
[20:12:44] *** Joins: liam_ (sid7517@helmsley.irccloud.com)
[20:12:58] *** Joins: pombreda (sid227801@tinside.irccloud.com)
[20:13:16] *** Joins: r0bby (r0bby@user/r0bby)
[20:13:20] *** Joins: telemachus (sid2004@helmsley.irccloud.com)
[20:13:23] *** Joins: aarchi (sid486183@uxbridge.irccloud.com)
[20:13:25] *** Joins: avery (sid501608@uxbridge.irccloud.com)
[20:13:42] *** Joins: redlegion (sid429547@ilkley.irccloud.com)
[20:13:47] *** Joins: wangledorf (sid505185@ilkley.irccloud.com)
[20:13:48] *** Joins: hhes (sid420846@ilkley.irccloud.com)
[20:13:58] *** Joins: Manouchehri (sid384576@hampstead.irccloud.com)
[20:14:00] *** Joins: decartes_ (sid240036@helmsley.irccloud.com)
[20:14:14] *** Joins: qaisjp (sid26374@user/qaisjp)
[20:14:24] *** Joins: sa (sid1055@tinside.irccloud.com)
[20:14:27] *** Joins: kubblai (sid478659@fedora/kubblai)
[20:14:45] *** Joins: pl (sid98063@helmsley.irccloud.com)
[20:14:45] *** Joins: chromis (sid150893@tinside.irccloud.com)
[20:14:49] *** Joins: hdm (sid500490@aha/hacker/hdm)
[20:14:50] *** Joins: chimeracoder_ (sid230642@helmsley.irccloud.com)
[20:14:58] *** Joins: eruditass (uid248673@uxbridge.irccloud.com)
[20:14:59] *** Joins: Pent (sid313808@lymington.irccloud.com)
[20:15:23] *** Joins: derfj (sid19429@tinside.irccloud.com)
[20:15:44] *** Joins: theckman (sid295081@user/theckman)
[20:16:54] *** Quits: cim (~cim@205.185.117.110) (Quit: Ping timeout (120 seconds))
[20:17:05] *** Joins: cim (~cim@205.185.117.110)
[20:19:11] *** Joins: st3fan (sid43079@lymington.irccloud.com)
[20:19:14] *** Joins: hjmcnew____ (sid86092@tinside.irccloud.com)
[20:19:37] *** Joins: Shrike (sid305680@helmsley.irccloud.com)
[20:19:56] *** Joins: psb_ (sid500598@ilkley.irccloud.com)
[20:20:00] *** Quits: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks) (Ping timeout: 268 seconds)
[20:20:46] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 260 seconds)
[20:20:53] *** Joins: computerquip (sid423484@user/computerquip)
[20:21:25] *** Joins: bw (sid2730@user/betawaffle)
[20:21:30] *** Joins: justicefries (sid26447@tinside.irccloud.com)
[20:21:46] *** Joins: cornfeedhobo (~cornfeedh@user/cornfeedhobo)
[20:23:11] *** Quits: arinov (~arinov@5.24.160.250) (Ping timeout: 265 seconds)
[20:26:55] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:29:19] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Client limit exceeded: 20000)
[20:29:20] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Client limit exceeded: 20000)
[20:29:31] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Client limit exceeded: 20000)
[20:29:35] *** Quits: Guest5434 (~dngraymat@2001:470:69fc:105::793b) (Quit: Client limit exceeded: 20000)
[20:29:38] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Client limit exceeded: 20000)
[20:29:38] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Client limit exceeded: 20000)
[20:29:42] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Client limit exceeded: 20000)
[20:29:56] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[20:30:06] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Client limit exceeded: 20000)
[20:30:24] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Client limit exceeded: 20000)
[20:30:26] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (Quit: Client limit exceeded: 20000)
[20:31:15] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Client limit exceeded: 20000)
[20:31:47] *** Quits: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103) (Quit: Client limit exceeded: 20000)
[20:32:11] *** Joins: chasmo77 (~chas77@71.63.241.168)
[20:32:16] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Client limit exceeded: 20000)
[20:32:17] *** Joins: andlabs_ (~andlabs@2604:ca00:178:4685:918f:63a8:56f6:c24c)
[20:32:38] *** Quits: jzacsh[m] (~jzacshm]@2001:470:69fc:105::462) (Quit: Client limit exceeded: 20000)
[20:35:47] *** Quits: andlabs (~andlabs@2604:ca00:178:4685:fde4:1bf0:ccce:b63c) (Ping timeout: 264 seconds)
[20:42:04] *** Quits: queue- (~nerd@rektnet.com) (Changing host)
[20:42:04] *** Joins: queue- (~nerd@user/queue/x-7267619)
[20:43:14] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[20:49:53] *** Joins: csmarchbanks (~csmarchba@prometheus/team/csmarchbanks)
[20:50:31] *** Joins: arinov (~arinov@213.194.126.155)
[20:55:17] *** Joins: andlabs (~andlabs@64.9.251.130)
[20:58:02] *** Quits: andlabs_ (~andlabs@2604:ca00:178:4685:918f:63a8:56f6:c24c) (Ping timeout: 240 seconds)
[21:05:44] *** Quits: andlabs (~andlabs@64.9.251.130) (Read error: Connection reset by peer)
[21:05:49] *** Joins: andlabs_ (~andlabs@2604:ca00:178:4685:c902:7b42:6d02:f65d)
[21:09:33] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[21:13:35] *** Quits: andlabs_ (~andlabs@2604:ca00:178:4685:c902:7b42:6d02:f65d) (Ping timeout: 264 seconds)
[21:15:59] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[21:24:42] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:28:46] <lungaro> anyone have examples of opening a file descriptor of a child process ? I want to experiment with plugins using HTTP over the fd, say fd3
[21:28:49] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[21:28:49] *** Joins: kadoban (~kadoban@user/kadoban)
[21:28:49] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[21:28:49] *** Joins: mambang[m] (~mambang@user/mambang)
[21:28:49] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[21:28:49] *** Joins: psydroid (~psydroid@user/psydroid)
[21:28:49] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[21:28:50] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[21:28:50] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[21:28:50] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[21:28:50] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[21:29:02] *** Joins: M1000mh[theythem (~M1000mhmo@2001:470:69fc:105::4103)
[21:29:03] *** Joins: enick_642 (~dngraymat@2001:470:69fc:105::793b)
[21:29:03] *** Joins: jzacsh[m] (~jzacshm]@2001:470:69fc:105::462)
[21:42:16] *** Quits: mrig (~AdiIRC@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[21:43:59] *** Joins: Torr_ (~Torr@user/torr)
[21:46:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-a5f1-5281-6a38-5d1d.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:47:39] *** Joins: mrig (~mrig@user/mrig)
[22:09:49] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[22:11:27] *** Quits: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru) (Ping timeout: 265 seconds)
[22:11:48] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[22:12:14] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Ping timeout: 268 seconds)
[22:12:39] *** Joins: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru)
[22:13:25] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[22:14:47] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[22:15:59] *** Quits: darkstardev13 (~darkstard@50.39.114.152) (Ping timeout: 264 seconds)
[22:16:24] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[22:17:36] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[22:19:20] *** Joins: fikran (~fikran@user/fikran)
[22:23:48] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[22:24:13] *** Quits: Torr_ (~Torr@user/torr) (Quit: leaving)
[22:25:56] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:31:01] *** Joins: bindu (~bindu@user/bindu)
[22:32:24] *** Quits: Memory (~user_name@user/memory) (Quit: leaving)
[22:32:57] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[22:34:14] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:f87a:7987:9b41:bb0e)
[22:36:35] *** Quits: noord (~noord@user/noord) (Quit: WeeChat 3.3)
[22:37:08] *** Joins: X-Scale` (~ARM@92.250.99.18)
[22:38:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 264 seconds)
[22:40:29] *** Joins: X-Scale (~ARM@46.50.7.119)
[22:41:50] *** Quits: X-Scale` (~ARM@92.250.99.18) (Ping timeout: 256 seconds)
[22:45:16] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[22:47:52] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[22:52:53] *** Joins: fentanyl (~ryan@user/sapi01)
[22:54:35] *** Quits: jla (~jordi@64.225.79.195) (Quit: Leaving.)
[22:55:40] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:57:20] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:57:52] *** Quits: zer0bitz (~zer0bitz@2001:2003:f6e3:7400:d15f:a494:a911:62f8) (Ping timeout: 268 seconds)
[23:02:08] *** Joins: jla (~jordi@64.225.79.195)
[23:05:58] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[23:07:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[23:07:32] *** Joins: jpw (~jpw@user/jpw)
[23:08:57] *** Quits: adip (~adip@dib205.neoplus.adsl.tpnet.pl) (Ping timeout: 250 seconds)
[23:10:56] *** Joins: adip (~adip@dij224.neoplus.adsl.tpnet.pl)
[23:12:58] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Ping timeout: 260 seconds)
[23:13:08] *** Joins: rcernin_ (~rcernin@124.190.139.235)
[23:18:39] *** Joins: ekathva (~ekathva@88-114-118-220.elisa-laajakaista.fi)
[23:20:15] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:21:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com)
[23:21:43] *** Quits: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru) (Remote host closed the connection)
[23:21:52] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[23:21:59] *** Joins: flukes (~textual@user/flukes)
[23:24:51] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[23:25:17] *** Joins: bindu (~bindu@user/bindu)
[23:25:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-51f4-54b3-ac18-bd1c.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:26:36] *** Quits: rcernin_ (~rcernin@124.190.139.235) (Ping timeout: 256 seconds)
[23:27:41] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[23:35:07] *** Quits: fentanyl (~ryan@user/sapi01) (Quit: leaving)
[23:36:16] *** Joins: mikey__ (~mikey__@user/mikey/x-6463285)
[23:40:40] *** Quits: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca) (Remote host closed the connection)
[23:41:15] *** Joins: veegee (~veegee@ipagstaticip-469c2903-2b07-6dc3-3bc2-98748da5ca77.sdsl.bell.ca)
[23:42:16] *** Joins: shtirlic (~shtirlic@pppoe.178-66-70-130.dynamic.avangarddsl.ru)
[23:43:25] <b0nn> dostoyevsky2: if you want to vendor with modules, it's a matter of `go mod vendor` and, as leitz says "replace directives" - this is the current workaround that people are using to "pin" dependencies
[23:44:41] <b0nn> In a perfect world your upstream developers would respect semantic versioning and not push breaking changes to the same major version
[23:44:44] *** Quits: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br) (Ping timeout: 256 seconds)
[23:44:52] <b0nn> but, devs are lazy :)
[23:46:04] <oliv3> Hi
[23:46:23] *** Joins: rcernin_ (~rcernin@124.190.139.235)
[23:47:18] <oliv3> Is using the Context to store key/values a good practice ? I remember having read somewhere that no, but can't find the link
[23:47:35] *** Joins: FunnyLookinHat (~FunnyLook@64.184.172.137)
[23:48:08] <b0nn> Not to "store", but some people use context as a vehicle to "transmit" that data
[23:48:16] <b0nn> But even then I wouldn't
[23:48:23] *** Quits: solitonmedic (~c0a80069@user/solitonmedic) (Ping timeout: 264 seconds)
[23:48:54] <oliv3> Yeah transmit
[23:49:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:c95:5e78:2621:2637)
[23:49:43] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[23:49:55] <oliv3> Iirc it was talking about guessing/tampering/[de]serializing issues
[23:50:11] <oliv3> With the keys
[23:50:31] <b0nn> If you want to pass data about, then it's clearer to everyone if you do that explicitly, not hidden in the context
[23:51:01] <oliv3> Sure, makes sense
[23:51:51] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-0c95-5e78-2621-2637.inf6.spectrum.com) (Ping timeout: 250 seconds)
[23:52:02] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (Remote host closed the connection)
[23:53:11] <oliv3> I had an interview question about that some question, and the correct answer was "the context should be used for signaling, not doing weird things with k/v"
[23:53:22] *** Joins: walkr (~walkr@177-7-165-171.user3p.brasiltelecom.net.br)
[23:53:30] <oliv3> So i guess that's a design issue
[23:57:18] *** Joins: ash_m (~androirc@user/ash-m/x-3292451)
[23:59:11] *** Quits: jla (~jordi@64.225.79.195) (Ping timeout: 264 seconds)
