[00:00:29] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[00:00:52] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[00:01:26] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:01:44] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 250 seconds)
[00:04:46] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Ping timeout: 250 seconds)
[00:05:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[00:08:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:08:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:08:03] *** Joins: wroathe (~wroathe@user/wroathe)
[00:08:42] <schuelermine> hey wait a minute awp that's rubbish, no? the impl. param may be a type class but the polymorphism isn't in the instance but in the method.
[00:09:32] <schuelermine> I.e. class A where { id :: forall t. t -> t } is fine
[00:10:09] <schuelermine> and any specific let ?id = x is just an instance like data FOO; instance A FOO where { id = x }
[00:11:49] *** Quits: jgeerds__ (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 240 seconds)
[00:12:29] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[00:12:35] *** Quits: cosimone` (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[00:13:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:14:49] <awpr> https://hackage.haskell.org/package/ghc-prim-0.8.0/docs/GHC-Classes.html#t:IP
[00:14:51] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[00:15:11] <awpr> it'd be `instance IP "id" (forall a. a -> a)`
[00:16:00] <schuelermine> ah OK
[00:17:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[00:21:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:21:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:21:16] *** Joins: wroathe (~wroathe@user/wroathe)
[00:21:19] <schuelermine> Wait
[00:21:48] <schuelermine> So how does it use different instances when there's no type difference in the instances?
[00:22:38] <schuelermine> Normally something like 1 :: Num n => n calls a different implementation based on the *type*, and if that type can't be inferred, you can do @Type, but how's that work with IP?
[00:22:59] <awpr> there's special allowance in the compiler for implicit params syntax to be allowed to create local instances
[00:24:00] <EvanR> wait... can that be abused xD
[00:24:02] <awpr> the machinery for consuming instances locally is already there, since it's needed for polymorphism, but normally scoped instances can't be created since that'd completely ruin instance coherence
[00:24:31] <awpr> (implicit params are intentionally not coherent, so no problem with losing coherence there)
[00:25:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[00:26:31] <monochrom> Yes! Consider "data MyIntOrd = Ctor{cmp :: Int -> Int -> Ordering}" so you can write "sort :: (?ord :: MyIntOrd) => [Int] -> [Int]"
[00:27:23] *** Joins: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk)
[00:28:29] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[00:28:44] <monochrom> So I can then write "let ?ord = Ctor{basically do prime factorization then use show on the list then compare the lists} in sort [1..1000]"
[00:28:56] <monochrom> err compare the strings!
[00:29:36] *** Quits: jonathanx__ (~jonathan@h-178-174-176-109.a357.priv.bahnhof.se) (Quit: Leaving)
[00:31:34] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:31:37] *** Quits: tanners (~tanners@2600:1003:b11a:a16f:d0aa:19cc:13f7:58b7) (Ping timeout: 240 seconds)
[00:31:41] <awpr> maybe even `newtype Bad a c = Bad {unBad :: c => [a] -> [a] }; sort = unBad $ unsafeCoerce @(Bad Int (Ord Int)) @(Bad Int (IP "ord" MyIntOrd)) $ Bad Prelude.show`
[00:32:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[00:32:37] <awpr> with extra badness because that record is definitely not the same representation as the Prelude.Ord dictionary
[00:32:38] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[00:33:22] *** Joins: acidjnk (~acidjnk@p200300d0c7271e5531e75586a8fe0593.dip0.t-ipconnect.de)
[00:33:30] <awpr> er, Prelude.sort
[00:33:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[00:33:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[00:33:52] *** Joins: wroathe (~wroathe@user/wroathe)
[00:35:02] *** Quits: schweers (~user@2001:16b8:e960:8100:aaa1:59ff:fe3f:235c) (Ping timeout: 240 seconds)
[00:37:01] *** Joins: enoch (~enochthec@user/enochthechronoco)
[00:40:31] *** Quits: enoch (~enochthec@user/enochthechronoco) (Client Quit)
[00:41:44] *** Ekho- is now known as Ekho
[00:42:53] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[00:43:08] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[00:49:31] *** Quits: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net) (Ping timeout: 256 seconds)
[00:51:48] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Read error: Connection reset by peer)
[00:52:03] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[00:52:32] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:55:17] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[00:56:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:58:15] *** Quits: ubert (~Thunderbi@p200300ecdf0994b6cb4175acd0981d1c.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:03:37] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 240 seconds)
[01:05:50] *** Joins: opticblast (~june@secure-165.caltech.edu)
[01:06:16] <opticblast> is there any particular reason not to reuse a Data.ByteString.Builder.Builder?
[01:08:45] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:10:13] *** Quits: mrmr (~mrmr@user/mrmr) (Ping timeout: 240 seconds)
[01:11:49] *** Quits: benin (~benin@183.82.30.17) (Ping timeout: 240 seconds)
[01:13:47] *** Joins: benin (~benin@183.82.30.17)
[01:17:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[01:19:33] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: leaving)
[01:27:57] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Read error: Connection reset by peer)
[01:28:08] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[01:30:33] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[01:32:24] *** Quits: michalz (~michalz@185.246.204.101) (Remote host closed the connection)
[01:32:46] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[01:33:47] *** Joins: Erutuon (~Erutuon@user/erutuon)
[01:35:44] *** aweinsto1k is now known as aweinstock
[01:39:02] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:42:32] *** janus__ is now known as janus
[01:42:34] <jackdk> what are you trying to do? that sounds like a question which assumes an imperative way of interacting with builders, which is not how they work (they're more like sequences of instructions of how to build a bytestring, in a form taht you can't inspect but has O(1) append)
[01:44:43] <monochrom> Ah, now I understand the question.
[01:45:42] <monochrom> But yeah it's still too general.
[01:45:53] <dibblego> sedition160.
[01:47:03] <[exa]> dibblego: does that look like a password?
[01:47:24] <dibblego> yeah sorry, it's just a virtualbox password
[01:47:41] <monochrom> Don't forget the . at the end :)
[01:47:53] *** Quits: jacks- (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[01:48:16] <[exa]> :] nvm
[01:48:54] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:53:16] *** Joins: dut (~dut@user/dut)
[01:55:40] *** danso is now known as dansoup
[01:57:00] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[01:59:04] *** Quits: benin (~benin@183.82.30.17) (Quit: Ping timeout (120 seconds))
[01:59:11] *** Quits: dansoup (~danso@2001:1970:52e7:d000:96b8:6dff:feb3:c009) (Quit: WeeChat 3.3)
[02:03:19] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:08:42] *** Quits: lagash (lagash@lagash.shelltalk.net) (Ping timeout: 250 seconds)
[02:09:08] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Ping timeout: 250 seconds)
[02:10:26] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[02:13:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:14:37] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[02:16:15] *** Joins: mrmr (~mrmr@user/mrmr)
[02:18:11] *** Quits: phma (phma@2001:5b0:212a:9158:6d66:ed09:dec5:bdad) (Read error: Connection reset by peer)
[02:19:32] *** Joins: phma (phma@2001:5b0:2143:8b68:2dec:594f:a26e:5c25)
[02:20:21] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[02:20:29] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[02:21:47] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:26:32] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Remote host closed the connection)
[02:27:01] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[02:28:10] *** Joins: Guest54 (~Guest54@186.139.149.253)
[02:29:45] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[02:30:05] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[02:30:26] *** Joins: Jonno_FTW (~come@user/jonno-ftw/x-0835346)
[02:32:28] <Guest54> ¿por qué llamamos funciones de suma y multiplicación?
[02:32:56] <Guest54> why do we call addition and multiplication functions?
[02:33:41] <davean> How could they ever no be functions?
[02:33:47] <davean> They're like the most classical examples
[02:33:54] <Axman6> :t (+)
[02:33:55] <lambdabot> Num a => a -> a -> a
[02:33:58] <Axman6> definitely a function
[02:33:59] <davean> They take parameters and produce a result
[02:34:02] <geekosaur> mathematics does not have any distinction between a function and an operator
[02:34:17] <geekosaur> haskell does for parsing reasons, but has ways to override both
[02:34:20] <Axman6> :t (<>) -- also a function
[02:34:22] <lambdabot> Semigroup a => a -> a -> a
[02:34:37] <EvanR> is Guest54 asking about etymology of "function" in general
[02:34:50] <EvanR> why is anything called a function
[02:35:08] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[02:36:25] <Guest54> svosotros
[02:36:34] <Guest54> por qué
[02:37:00] <Guest54> why
[02:37:43] <monochrom> If you know "function", then note that addition is a special case.
[02:38:30] <geekosaur> did you understand anything we said?
[02:39:38] <Guest54> More and less
[02:40:34] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:41:34] <Guest54> Is true if there are not diference in operation or function
[02:41:48] <hpc> correct
[02:42:15] <hpc> you'd be hard-pressed to find a difference between (+) and some hypothetical function "plus = \x y -> x + y"
[02:42:24] <Guest54> set and element
[02:42:28] <monochrom> Oh you can even make a case that distinguishes between "operator" and "operation".
[02:42:43] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[02:44:45] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[02:44:54] *** Joins: hololeap_ (~hololeap@user/hololeap)
[02:46:55] <Guest54> thanks
[02:47:13] *** Quits: Guest54 (~Guest54@186.139.149.253) (Quit: Client closed)
[02:47:42] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[02:50:05] *** Joins: Nolrai2 (~Nolrai2@73.240.1.39)
[02:50:07] *** Quits: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com) (Remote host closed the connection)
[02:50:50] <Nolrai2> Is it normal for linking a small program to take over a minute?
[02:51:15] <geekosaur> it can be, yes. linkers are often slow
[02:52:13] *** Joins: Cale (~cale@cpef48e38ee8583-cm30b7d4b3fc20.cpe.net.cable.rogers.com)
[02:52:19] <hpc> it's a weirdly heavy operation in a number of ways
[02:52:51] <hpc> back when the 64-bit transition was just happening, it was a big deal when it was suddenly impossible to build webkit on 32-bit because linking required more than 4 gigs of addressable memory
[02:53:50] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:53:56] <Nolrai2> Damn, I was hoping something was wrong. Its a bit crazy to wait that long to see if a change works. Well I guess having constants be settable by comand line args is good practice anyway. In both senses of "good practice". :)
[02:55:30] *** Quits: acidjnk (~acidjnk@p200300d0c7271e5531e75586a8fe0593.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[02:55:49] <monochrom> Oh haha so you're like me, when benchmarking, change "n = 10" to "n = 100000" in the source file and rebuild...
[02:55:56] *** Quits: burnsidesLlama (~burnsides@dhcp168-028.wadham.ox.ac.uk) (Remote host closed the connection)
[02:56:11] <monochrom> In fact I don't even bother to have "n =" haha.
[02:58:24] <EvanR> Nolrai2, reloading particular files in ghci after modifying them is good... also a hot code reloading after you rebuild a part of the application would be nice
[02:58:39] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[02:58:44] <EvanR> assuming linking of THAT isn't slow
[02:58:46] <EvanR> which is might be
[02:59:22] <EvanR> linking was the bog-down last time I tried code reloading
[03:00:55] *** Joins: lagash (lagash@lagash.shelltalk.net)
[03:01:51] <opticblast> when I say "reusing a Builder", I mean that I have a particular builder, and I need to use it twice. is it better to use it directly twice, or should I convert it into a lazy bytestring and use that twice?
[03:02:00] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Ping timeout: 250 seconds)
[03:02:15] <opticblast> if a builder is like a function, then "calling" it twice means redoing all of the work used to make it
[03:03:01] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[03:03:05] <EvanR> calling a function twice might not be as much as work x 2, depending on how it's made
[03:03:27] <opticblast> true, it could be like "let heavy = expr in \x -> foo heavy x"
[03:03:30] <EvanR> because laziness
[03:04:08] <opticblast> which when called twice does foo twice but heavy only once
[03:05:01] <Nolrai2> Now I just need to figure out if this crazy behavior is a bug, a result of numerical approximation, or 'real'.
[03:05:06] <EvanR> but if a builder would have been generated lazily and consumed on use, holding onto it for 2nd use now means it becomes materialized
[03:05:25] <EvanR> this is where "duplicate thunk" would be handy?
[03:05:54] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 250 seconds)
[03:06:03] <Nolrai2> opticblast: honestly I would just try both. Should be a pretty simple change, no?
[03:06:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[03:07:41] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1)
[03:07:42] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:911c:c4ab:2f7e:d3f1) (Remote host closed the connection)
[03:07:45] <monochrom> In Fortran, "real" is a numerical approximation. So, same difference. >:)
[03:07:47] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[03:08:00] <EvanR> ironic naming
[03:08:02] *** Joins: tanners (~tanners@2600:1003:b10c:b4b6:4e2:294a:11a:8db2)
[03:13:57] *** Quits: pritambaral (~pritam@user/pritambaral) (Ping timeout: 240 seconds)
[03:14:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:14:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:14:55] *** Joins: wroathe (~wroathe@user/wroathe)
[03:15:16] *** Joins: cyphase (~cyphase@user/cyphase)
[03:15:52] *** Quits: Nolrai2 (~Nolrai2@73.240.1.39) (Quit: Client closed)
[03:16:17] <Axman6> opticblast: the real answer is benchmark and see, in the case of builders it depends a lot on what that builder is doing. If it's made up of lots of small builders then running it once and storing the result might be useful, adding a bytestring to a builder is pretty cheap because all the sizes are known
[03:17:01] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[03:19:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[03:21:05] <opticblast> thanks
[03:23:01] *** Quits: max22- (~maxime@2a01cb0883359800d1e94aeeb9e074b6.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:28:03] <EvanR> so if I take a list, and want to return a tuple whose first component is a lazy scan of that list, and the second component is the "final state" (which corresponds to the end of the scan)
[03:28:53] <EvanR> it seems like break/scan territory, and via some magic I can consume that scan without drawing out the whole list due to the second component?
[03:29:09] <EvanR> break/span
[03:30:13] <EvanR> f xs = let ys = scanl whatever start xs in (ys, last ys) -- ? xD
[03:31:16] *** Joins: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net)
[03:31:29] <monochrom> If you don't evaluate the final state too early, the scan can be consumed lazily.
[03:31:56] <monochrom> And I mean resulting in lazily taking in the input list.
[03:32:04] <EvanR> and finally, when you do want to evaluate the 2nd component, you don't chew through a million thunks?
[03:32:21] <DavSanchez> Hi team! Quick question. How does one include the README.md file at the root of a repo in the haddock documentation? Is it possible to have this rendered locally or does it work only when uploading to Hackage?
[03:33:01] <monochrom> The final state may or may not be a huge thunk itself depending on at least 2 factors.
[03:33:21] <EvanR> I have my "update frame" shrine decorated
[03:33:36] <EvanR> candels lit
[03:33:41] <monochrom> You can cook up a custom version of scanl that mitigates it.
[03:33:56] <monochrom> But the way you consume the scan can also mitigate it.
[03:34:26] <monochrom> Here is a small example that helps understand the phenomenon.
[03:34:53] <monochrom> Define b = scanl (+) 0 [1..]
[03:35:37] <monochrom> "print b" and "print (b !! n)" have extremely different space behaviour.  O(1) vs Ω(n).
[03:35:54] <monochrom> If you find out why, you understand my "But the way you consume the scan can also mitigate it."
[03:36:33] <EvanR> I appreciate the puzzler
[03:37:17] <EvanR> @src print
[03:37:17] <lambdabot> print x = putStrLn (show x)
[03:38:04] <monochrom> Well, you can replace "print b" by "mapM_ print b" if you want "print" to always be about a single Integer.
[03:38:16] <EvanR> @src putStrLn
[03:38:16] <lambdabot> putStrLn s = do putStr s; putChar '\n'
[03:38:28] <EvanR> @src putStr
[03:38:29] <lambdabot> putStr s = hPutStr stdout s
[03:38:41] <EvanR> @src hPutStr
[03:38:41] <lambdabot> Source not found. Where did you learn to type?
[03:38:53] <monochrom> But let's say "print b" ensures that you evaluate b!!100 before you evaluate b!!101
[03:39:02] <geekosaur> hPutStr's a bit more involved
[03:39:31] *** Quits: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374) (Ping timeout: 245 seconds)
[03:40:33] <EvanR> um ok, so whatever does the printing will traverse the list, which is a scanl
[03:40:41] <EvanR> @src scanl
[03:40:42] <lambdabot> scanl f q ls = q : case ls of
[03:40:42] <lambdabot>     []   -> []
[03:40:42] <lambdabot>     x:xs -> scanl f (f q x) xs
[03:40:58] *** Quits: alx741 (~alx741@157.100.93.160) (Read error: Connection reset by peer)
[03:41:51] <EvanR> it will try to discard the q's but the 100th one depends on all those f q x
[03:42:27] <EvanR> q = f q x from previous iteration
[03:43:16] <EvanR> and hence all the x from the original list
[03:43:20] <EvanR> so the original list sticks around
[03:43:31] <EvanR> or becomes a thing when it wouldn't have, potentially
[03:44:00] <EvanR> is that right
[03:44:17] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Remote host closed the connection)
[03:44:51] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[03:45:45] *** Quits: nhs (~nhs@136.49.226.20) (Ping timeout: 256 seconds)
[03:46:01] *** Joins: alx741 (~alx741@157.100.93.160)
[03:48:26] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:48:32] *** Quits: jkaye_ (~jkaye@2601:281:8300:7530:6a7d:d789:f2c1:154c) (Ping timeout: 240 seconds)
[03:49:41] <EvanR> where is scanl' xD
[03:51:30] <opticblast> Data.List
[03:52:04] <EvanR> oh there it is
[03:52:06] <geekosaur> @index scanl'
[03:52:06] <lambdabot> GHC.OldList, Data.List
[03:52:10] <geekosaur> huh
[03:54:13] *** Quits: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net) (Quit: Ping timeout (120 seconds))
[03:54:17] *** Quits: tanners (~tanners@2600:1003:b10c:b4b6:4e2:294a:11a:8db2) (Ping timeout: 240 seconds)
[03:54:18] <EvanR> alright good to know. Unfortunately I still don't know how to predict or explain (ys, last ys). Say I print ys in IO, then go to use last ys for something, was the list consumed or not
[03:54:53] <EvanR> normally I'd say no it string up in memory but then break/span ...
[03:57:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[03:58:24] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[03:59:22] <EvanR> > scanl (+) 0 [1..] !! 100000
[03:59:24] <lambdabot>  5000050000
[03:59:27] <EvanR> > scanl (+) 0 [1..] !! 10000000
[03:59:33] <lambdabot>  50000005000000
[03:59:38] <EvanR> > scanl' (+) 0 [1..] !! 10000000
[03:59:40] <lambdabot>  50000005000000
[03:59:45] <EvanR> shrug xD
[03:59:54] *** Joins: arahael (~arahael@118.208.232.68)
[04:01:47] *** Joins: seer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[04:01:51] *** seer is now known as Inst
[04:01:54] <Inst> hmmm
[04:02:02] <Inst> Axman6, Evanr
[04:02:07] <Inst> why did you guys use this book?
[04:02:09] <Inst> https://www.amazon.com/Haskell-Functional-Programming-International-Computer/dp/0201882957/ref=sr_1_21?crid=3H5RVJ2IK2XFP&keywords=haskell+development&qid=1642033701&sprefix=haskell+development%2Caps%2C243&sr=8-21
[04:03:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:04:44] <monochrom> EvanR: I have "merely" ys = [1..n], print (ys, last ys).  It takes much space, even under -O2
[04:05:30] <EvanR> then the break span magic doesn't work on this planet
[04:06:03] <EvanR> at least that result is understandable
[04:06:46] <monochrom> "last" is much less transparent than break/span in the context of having the optimizer and/or the RTS to see through what's going on and discard data.
[04:07:48] <EvanR> so some kind of version of scanl that does... something... is in order
[04:08:26] *** Joins: nhs (~nhs@136.49.226.20)
[04:08:46] <monochrom> (ys, last ys) is likely in the same genre as (sum xs, length xs)
[04:09:03] <monochrom> Even under a very efficient sum.
[04:09:14] <EvanR> yeah i never learned the solution to that one xD
[04:09:33] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:10:22] <monochrom> Basically the solution is to give up and write a fairly custom handcoding.
[04:11:17] <EvanR> (sum xs, length xs) seems like use a pair of states in the fold
[04:11:24] <monochrom> "data SL a = SL !a !Int", foldl' (\(SL a n) b -> SL (a+b) (n+1))
[04:11:29] <EvanR> make sure both components get evaluated along the way
[04:11:30] <monochrom> Yeah.
[04:11:49] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[04:12:08] <monochrom> And then there are libraries and theories for doing it generally.
[04:12:22] <monochrom> For example if you have heard of the "Fold" type, that's one.
[04:12:28] <Axman6> Inst: I think I used the second edition of that at uni
[04:12:37] <EvanR> in (ys, last ys) I'm 'folding' one of them and not doing anything on the other...
[04:12:45] <monochrom> And someone else use the theory of "attribute grammars" for it. I don't understand this one.
[04:12:53] <Inst> i mean for teaching
[04:13:25] <Inst> i'd have been really big on it if the last edition weren't 2011
[04:14:55] <EvanR> resumable folds
[04:16:42] <Axman6> the fundamentals of HAskell haven't changed much in the last decade. I would be surprised if there's much in there that isn't worth learning
[04:17:14] <geekosaur> I'd mostly be worried about things like Eq and Show being removed from Num, and AMP
[04:17:24] <monochrom> Consider (sum xs, last xs).  I would do it by:
[04:17:28] <geekosaur> both meaning various type signatures may need to be adjusted
[04:17:40] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[04:18:09] <monochrom> data P a b = P !a !b;  foldl' (\(P a _) x -> P (a+x) x) (P 0 undefined)
[04:18:29] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[04:18:30] <Inst> axman6: the problem I have now is, well, no one actually teaches modern haskell unless they're a corporate trainer
[04:19:07] <Inst> in the sense at the production outfits seem to be running custom preludes, string has been replaced by text
[04:19:15] <EvanR> yeah...
[04:19:30] <EvanR> last, sum, length are left folds
[04:19:43] <EvanR> 'the list itself' is a right fold
[04:19:46] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:19:52] <monochrom> Ah.
[04:20:04] <monochrom> May I introduce you to DList... >:)
[04:20:57] <monochrom> foldl' (\(P a _) x -> P (a . (x:)) x) (P id undefined)
[04:21:24] <EvanR> what is this, rebuilding the list along the way in such a way it's not reversed? xD
[04:21:32] <monochrom> I have not benchmarked it though heh
[04:21:43] <Axman6> Inst: you need to know the fundamentals before you learn modern haskell
[04:22:08] <EvanR> I think I need one of these advanced foldl types...
[04:22:56] *** Joins: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net)
[04:22:58] <Inst> is that why people don't stick with Haskell?
[04:23:11] <monochrom> Yes.
[04:23:15] <Inst> or, like, the accusations that Haskell is a toy language are true, except specifically of the version that's taught?
[04:23:25] <monochrom> Yes.
[04:23:28] <geekosaur> you need to learn how to walk before you can run. should people not ever run?
[04:24:00] <monochrom> No. Babies should learn how to drive so they never need worry about walking or running.
[04:24:08] <Axman6> I think trying to generalise the reasons down to one or two things is a fruitless persuit
[04:24:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:24:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:24:24] *** Joins: wroathe (~wroathe@user/wroathe)
[04:24:25] <monochrom> Hell, not either, just learn how to order UberEats online so they won't even drive.
[04:24:34] <Inst> Axman6: my feeling about string is that string is perfect for learning recursion and naive parsing
[04:25:26] <geekosaur> you'll still be using the same String primitives on Text, btw
[04:25:38] <monochrom> Recall that walking is the #1 cause of baby injuries, running is the #1 cause of children injuries, and driving is the #1 cause of adult injuries.
[04:25:58] <monochrom> Haskell is also the #1 of hand injuries among Haskellers.
[04:26:15] <Inst> as long as it's not some other reason, it's perfectly acceptable
[04:26:38] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[04:26:48] <Inst> geekosaur: why I hate text: the idea of unpacking / packing it every time I want to do an operation on it :(
[04:26:56] <geekosaur> nope
[04:27:00] <Inst> but that's my fault
[04:27:12] <geekosaur> Text has its own versions of all the same operations
[04:27:19] <geekosaur> but they're the same operations
[04:27:26] <Axman6> yeah, if you're unpacking Texts you're doing something wrong
[04:27:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:27:28] <geekosaur> you won't be learning a different API when the time comes
[04:27:30] <Inst> no, but, like, i'd rather hand craft the operations
[04:27:33] <dsal> You only have to pack or unpack if you're doing something not with Text.
[04:27:36] <Inst> i don't know enough about text to do that yet
[04:27:37] <EvanR> you could convert Text to String and back when something needs String... which is possible ... 
[04:27:41] <EvanR> you only*
[04:28:15] <EvanR> but that's not Text's fault
[04:28:20] <geekosaur> also I will note that I work with a number of Haskell programs and String is perfectly fine for them
[04:28:26] <Inst> bleh, sorry, i'll run off and stop wasting your time, need to do more exercises / stop with the dumb exercises and actually build a file handler lib for myself at this point
[04:28:37] <geekosaur> (Text is actually wasteful if your strings are all short)
[04:29:04] <EvanR> handleFile :: (File -> r) -> FilePath -> IO r
[04:29:04] <monochrom> I understand the sentiment.  Many Haskellers like to hand craft arithmetic, too.  They prefer "data N = Z | S N" and, when confronted with 4+5, unpack 4 and 5 to N, run their hand crafted addition, pack.
[04:29:09] <Axman6> but with text-2.0, less wasteful!
[04:30:41] <Inst> monochrom: you're being sarcastic, right?
[04:30:52] <monochrom> What do you think?
[04:31:00] <geekosaur> for the past several minutes, yes
[04:31:35] <Inst> possibility one: this is incredibly sarcastic. possibility two: there might be haskellers who derive pleasure from forcing a custom implementation of arithmetic that's computationally wasteful
[04:31:44] <geekosaur> some people look at Haskell having 3 string-like types and think that it is a sign that Haskell is a toy language
[04:32:09] <Inst> given what i've seen of haskellers so far, i love you guys for that specific reason
[04:32:11] <geekosaur> they do not consider that they're abusing one string-like type to do things that should not be conflated, like ByteString vs. String or Text
[04:32:32] <geekosaur> or that there are optimization reasons to choose String over Text or vice versa
[04:32:52] <geekosaur> Haskell forces you to think about these things, as usual
[04:33:07] <geekosaur> many programmers don't like being forced to think
[04:33:25] *** Joins: Guest54 (~Guest54@186.139.149.253)
[04:33:29] <Inst> this, at least in my impression, is a language
[04:33:41] <Inst> where programming newbies craft the same code 3 different ways and rate them on beauty and efficiency
[04:34:18] *** Quits: Guest54 (~Guest54@186.139.149.253) (Client Quit)
[04:35:03] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 256 seconds)
[04:36:37] <Axman6> @quote+ geekosaur many programmers don't like being forced to think
[04:36:37] <lambdabot> No quotes match. Just try something else.
[04:36:47] <geekosaur> it;s @remember
[04:37:38] <Axman6> @remember geekosaur many programmers don't like being forced to think
[04:37:38] <lambdabot> I will never forget.
[04:37:49] <Axman6> god it's been so long since I've done that, or seen anyone do it
[04:38:37] <Inst> is that a problem if they don't like being forced to think? they're work-a-day wage laborers
[04:38:49] <Inst> if they're being asked to do overtime, better to do it while not thinking
[04:38:59] <monochrom> laborer my a**
[04:39:24] <monochrom> They are overpaid and they still hold too much bargaining power over their employers
[04:40:19] <Inst> in the sense that they're the only ones that know how the lighting is wired up due to insufficient documentation?
[04:40:29] <monochrom> In no other employment do we see employees extorting employers to unnecessarily upgrade equipment every couple of years.
[04:41:36] *** Joins: cheater (~Username@user/cheater)
[04:41:54] <monochrom> Look at all the 4K 42" quad-head monitors and 64-core 2TB RAM computers their employers have to buy for them.  And twice as much hardware at their home reflecting how highly they're paid.
[04:42:29] <monochrom> It also large explains bloatware and hogging websites.
[04:43:02] <monochrom> Now look at the number of bugs and security holes they produce.
[04:43:26] <monochrom> Overpaid and unchecked.
[04:44:04] <Inst> still being sarcastic?
[04:44:26] <Inst> just because you're being oppressed by your employer doesn't mean you can't be screwing the employer as well
[04:44:28] <geekosaur> no, this is pretty much truth :(
[04:44:37] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:44:46] <geekosaur> you don't  fix bloated software any more, you throw more hardware at it
[04:44:51] <geekosaur> or more cloud resources
[04:44:55] <Inst> when i was with my service sector job, i went and quoted a Harvard Business Review article on why overtime is bad
[04:45:00] <Inst> in an industry where you had ton of people working overtime
[04:45:07] <Inst> I coined the term "overtime scammers"
[04:45:17] <Inst> do no work while doing overtime, get paid 1.5x
[04:45:26] <SethTisue__> 🎵 see we gotta be exploited, see we gotta be exploited, by somebody, by somebody, by somebody 🎵
[04:45:38] <Inst> at the same time, terrible base wages, terrible working conditions, etc
[04:45:51] <Inst> corporate policy was not being followed
[04:48:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[04:53:35] <Axman6> this duscussion feels more at home in r/AntiWork (or maybe r/ProEmployer?)
[04:55:38] *** Quits: alx741 (~alx741@157.100.93.160) (Remote host closed the connection)
[04:57:39] *** Quits: DavSanchez (~DavSanche@73.red-83-34-157.dynamicip.rima-tde.net) (Quit: Ping timeout (120 seconds))
[04:58:13] <Axman6> i*
[05:01:07] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[05:05:05] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Ping timeout: 256 seconds)
[05:05:32] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[05:06:02] <EvanR> I er uh https://paste.tomsmeding.com/Em71JYTL
[05:06:33] <EvanR> k types are wrong
[05:06:54] <EvanR> -> Unfolding b s
[05:08:07] <Axman6> what's wrong with (,) <$> list <*> last from foldl?
[05:08:56] <EvanR> ah
[05:09:03] <monochrom> EvanR: I have a feeling that customScan has something to do with Mealy or Moore machines in the machines package. Although, the package does not carefully consider strictness.
[05:11:29] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[05:13:07] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[05:14:37] <EvanR> and thanks to your previous puzzler, I see that if I wanted to skip to the End, I'd need to do it carefully
[05:14:50] <monochrom> :)
[05:18:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[05:25:33] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[05:29:23] <EvanR> Axman6, wait wait wait...
[05:29:41] <EvanR> what does that give you, (the list, last (the list)) ?
[05:30:14] <Axman6> yes
[05:30:28] <Axman6> list accumulates it in reverse order and reverses it though
[05:30:47] <EvanR> head scratch
[05:31:41] <EvanR> well, that's what's wrong with it xD
[05:32:19] <EvanR> you could skip that by just saving the original list
[05:32:52] <Axman6> it does decouple the original list and the new one's spines though
[05:33:09] <EvanR> I guess
[05:36:37] *** Quits: mmhat (~mmh@55d44405.access.ecotel.net) (Ping timeout: 240 seconds)
[05:37:00] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[05:37:48] *** Joins: drtonkey (~drtonkey@173.28.219.99)
[05:38:54] *** Parts: drtonkey (~drtonkey@173.28.219.99) ()
[05:39:04] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:41:34] *** Joins: califax- (~califax@user/califx)
[05:42:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:44:21] *** Quits: little_mac (~little_ma@2601:410:4300:3ce0:7d45:c5da:471f:1879) (Remote host closed the connection)
[05:44:48] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:44:49] *** califax- is now known as califax
[05:46:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[05:47:02] *** Quits: wrengr (~wrengr@150.12.83.34.bc.googleusercontent.com) (Quit: leaving)
[05:52:16] <jackdk> Any haskell-on-windows people here? I would like to know whether `lookupEnv "%UserProfile%"` or `lookupEnv "UserProfile"` is the correct form of the call. 
[05:53:54] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[05:55:44] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:56:00] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[05:56:30] *** Joins: neurocyte091705 (~neurocyte@IP-045010062077.dynamic.medianet-world.de)
[05:56:30] *** Quits: neurocyte091705 (~neurocyte@IP-045010062077.dynamic.medianet-world.de) (Changing host)
[05:56:31] *** Joins: neurocyte091705 (~neurocyte@user/neurocyte)
[05:58:48] *** Quits: neurocyte09170 (~neurocyte@user/neurocyte) (Ping timeout: 250 seconds)
[05:58:48] *** neurocyte091705 is now known as neurocyte09170
[05:58:57] *** Quits: xff0x (~xff0x@2001:1a81:538c:a900:ca7a:63a1:efb3:59ef) (Ping timeout: 240 seconds)
[06:00:23] *** Joins: lagash (lagash@lagash.shelltalk.net)
[06:01:00] *** Joins: xff0x (~xff0x@2001:1a81:5213:d00:a0e3:bed3:6536:d79e)
[06:03:00] <EvanR> data Unfolding ω a = End ω | Cons a (Unfolding ω a)
[06:03:05] <EvanR> forUnfolding_ :: Monad m => (a -> m ()) -> Unfolding ω a -> m ω
[06:03:21] <EvanR> Traversable was hurting my head
[06:03:49] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[06:08:59] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[06:13:15] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Quit: WeeChat 3.3)
[06:14:57] *** Quits: polyphem_ (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a) (Ping timeout: 240 seconds)
[06:15:32] *** Joins: polyphem_ (~rod@2a02:810d:840:8754:e450:3ca3:b389:687a)
[06:16:11] <EvanR> https://paste.tomsmeding.com/yaMAo2E7
[06:16:37] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[06:17:21] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[06:17:26] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: This computer has gone to sleep)
[06:21:49] *** Quits: raym (~raym@user/raym) (Ping timeout: 240 seconds)
[06:25:33] *** Joins: benin (~benin@183.82.30.17)
[06:26:16] *** Quits: aeka` (~aeka@2606:6080:1001:f:ed79:9361:ea0e:3e88) (Read error: Connection reset by peer)
[06:27:40] <EvanR> oh that's traverse
[06:29:00] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:31:23] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:32:23] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[06:33:40] *** Joins: jinsun (~quassel@user/jinsun)
[06:35:10] *** Joins: aeka (~aeka@user/hiruji)
[06:36:19] *** Quits: hueso_ (~root@user/hueso) (Ping timeout: 256 seconds)
[06:41:04] *** Joins: nhs_ (~nhs@136.49.226.20)
[06:41:04] *** Quits: nhs (~nhs@136.49.226.20) (Read error: Connection reset by peer)
[06:43:28] *** Joins: hueso (~root@user/hueso)
[06:46:27] <catern> idea: when you instatiate a smart constructor with a literal value, your IDE should do partial evaluation to tell you at the time that you write the value down, if it will pass the smart constructore's checks
[06:46:33] <catern> has any project ever done this?
[06:49:45] <Axman6> it can be done with template haskell but there isn't a way to tell the compiler to do that
[06:56:45] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[06:58:16] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:567f:a71e:f346:c5f0) (Ping timeout: 245 seconds)
[06:58:53] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:00:39] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:01:47] *** Joins: aeka (~aeka@user/hiruji)
[07:02:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:03:41] *** Joins: raym (~raym@user/raym)
[07:06:03] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Client Quit)
[07:07:04] *** Quits: vglfr (~vglfr@46.96.134.134) (Ping timeout: 256 seconds)
[07:10:00] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:10:48] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[07:11:01] *** Quits: td_ (~td@94.134.91.149) (Ping timeout: 240 seconds)
[07:11:22] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:12:03] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:12:48] *** Quits: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1) (Quit: The Lounge - https://thelounge.chat)
[07:12:57] *** Joins: td_ (~td@muedsl-82-207-238-204.citykom.de)
[07:13:06] *** Joins: aeka (~aeka@user/hiruji)
[07:13:59] *** Joins: vglfr (~vglfr@46.96.134.134)
[07:14:02] *** Joins: terrorjack (~terrorjac@2a01:4f8:1c1e:509a::1)
[07:15:05] *** Joins: vysn (~vysn@user/vysn)
[07:15:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:16:11] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[07:17:55] *** Joins: lavaman (~lavaman@98.38.249.169)
[07:18:13] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 240 seconds)
[07:19:41] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[07:21:52] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:22:13] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[07:22:30] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:28:51] *** Quits: raym (~raym@user/raym) (Quit: kernel update, rebooting...)
[07:29:33] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:30:01] *** Quits: haasn (~nand@haasn.dev) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[07:30:42] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[07:31:22] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:31:26] *** Quits: tommd (~tommd@75-164-130-101.ptld.qwest.net) (Ping timeout: 256 seconds)
[07:31:26] *** Joins: haasn (~nand@haasn.dev)
[07:32:22] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:32:59] *** Joins: aeka (~aeka@user/hiruji)
[07:33:02] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[07:33:26] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:33:41] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Read error: Connection reset by peer)
[07:34:42] *** Quits: vysn (~vysn@user/vysn) (Remote host closed the connection)
[07:34:50] *** Joins: img (~img@user/img)
[07:38:28] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:41:19] *** Joins: raym (~raym@user/raym)
[07:42:12] *** Joins: aeka (~aeka@user/hiruji)
[07:42:12] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:b997:c1f9:27c:1247)
[07:43:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[07:43:58] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:45:35] *** Joins: razetime (~quassel@49.207.203.87)
[07:46:35] *** Joins: aeka (~aeka@user/hiruji)
[07:46:35] *** Quits: aeka (~aeka@user/hiruji) (Read error: Connection reset by peer)
[07:49:34] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[07:50:46] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[07:55:21] *** Joins: mbuf (~Shakthi@122.174.222.201)
[07:56:39] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 250 seconds)
[07:58:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[08:00:21] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[08:01:11] *** Joins: aeka (~aeka@user/hiruji)
[08:02:12] *** Joins: Erutuon (~Erutuon@user/erutuon)
[08:06:57] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:07:00] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:07:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:10:46] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:16:40] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:17:21] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:23:49] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[08:27:10] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:27:54] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:35:49] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[08:37:41] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:38:21] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:39:28] *** Quits: talismanick (~talismani@c-67-164-73-220.hsd1.ca.comcast.net) (Remote host closed the connection)
[08:48:30] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:48:49] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[08:48:52] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[08:58:41] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[08:59:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[08:59:21] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[09:00:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:00:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:00:06] *** Joins: wroathe (~wroathe@user/wroathe)
[09:03:34] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[09:04:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[09:12:34] *** hugo- is now known as hugo
[09:12:49] *** Joins: fef (~thedawn@user/thedawn)
[09:13:05] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[09:26:28] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[09:26:47] *** Joins: jackson99 (~bc8147f2@cerf.good1.com)
[09:28:32] <jackson99> hi. I am parsing json with aeson, and my field names don't match json names (there is mytypeField prefix, which json obviously doesn't have). do I have to write my own FromJSON instance or is there a more automatic way of doing this?
[09:28:41] *** Quits: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net) (Ping timeout: 245 seconds)
[09:28:49] *** Joins: ByronJohnson (~bairyn@50-250-232-19-static.hfc.comcastbusiness.net)
[09:30:23] <jackson99> json also has "alpha-3" key, which may be problematic
[09:32:01] <c_wraith> if you are parsing json from a source not under your control, you generally have to write your own instances.
[09:32:12] <c_wraith> ...  If the input is consistently formatted.
[09:32:20] <c_wraith> If it isn't, you can just work with Value
[09:33:47] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:33:49] <jackdk> I generally prefer to manually write instances, because generically-derived instances often silently change format if you refactor the types.
[09:34:01] <c_wraith> aeson doesn't require you to parse to a domain data type.  If the content isn't part of your domain data, don't.
[09:34:17] <jackdk> This can also be avoided if you are disciplined in your separation of serialisation types from domain type
[09:34:45] <jackson99> json isn't under my control. but I thought there was an automatic way of adding haskell type prefix
[09:36:56] <c_wraith> you can play around with the stuff in Data.Aeson.TH, if you want. It probably won't do what you want.
[09:37:00] <EvanR> actually having json under my control, and having it have terrible haskell field names, sounds terrible xD
[09:38:50] <EvanR> json lets you use basic words and lets them collide, it's great
[09:39:10] <c_wraith> these days having terrible field names in haskell is opt-in
[09:43:16] *** Quits: vglfr (~vglfr@46.96.134.134) (Ping timeout: 250 seconds)
[09:43:21] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[09:44:37] <EvanR> really
[09:44:47] <jackson99> are you hinting at record dot syntax?
[09:44:58] <EvanR> which extensions do I enable to not opt-in
[09:45:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:47:45] <jackson99> is it worth using Map over list for just 249 elements?
[09:47:57] <jackson99> probably not?
[09:51:13] <EvanR> usually the problem is list doesn't have the API you want, if you should be using Map
[09:51:32] <jackson99> find is good enough
[09:51:36] <EvanR> so you end up writing janky list processing functions that Map already has
[09:51:45] <EvanR> if find is enough then great
[09:52:05] *** Joins: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e)
[09:52:14] <EvanR> :t find
[09:52:14] <jackson99> I am looking up same list by 5 different things, so I'd need 5 Maps
[09:52:15] <lambdabot> Foldable t => (a -> Bool) -> t a -> Maybe a
[09:52:23] <EvanR> Data.Map won't even help with that
[09:53:11] *** Quits: hugo (znc@verdigris.lysator.liu.se) (Quit: ZNC 1.8.2 - https://znc.in)
[09:53:32] <BrokenClutch> Uh, before sleep a question came to my mind. What you all think about haskell's future?
[09:53:58] <BrokenClutch> I'm like, new to the thing and I don't care much for that stuff. But some people that I try to show haskell to
[09:54:18] <EvanR> the blind leading the blind?
[09:54:22] <dibblego> go to sleep
[09:54:28] <BrokenClutch> ask me this same question and I really don't know how to answer
[09:54:40] <BrokenClutch> I expected these responses
[09:54:48] <BrokenClutch> And I'm quite happy about them
[09:54:57] <EvanR> learn haskell before becoming an evangelist
[09:55:15] *** Joins: hugo (znc@verdigris.lysator.liu.se)
[09:55:18] <BrokenClutch> Is it the leap of faith thing?
[09:56:32] <BrokenClutch> dibblego: Yeah, I should, good night
[09:56:37] <dibblego> g'night
[09:57:17] *** Parts: BrokenClutch (~pioneer@2804:d41:c292:6c00:33d8:d2f1:d8af:153e) ()
[09:57:46] *** Joins: notzmv (~zmv@user/notzmv)
[09:58:37] <jackson99> would you use Int or String type for country numeric code? code can have leading zeroes, so I am not sure if Int is appropriate. https://en.wikipedia.org/wiki/List_of_ISO_3166_country_codes#Current_ISO_3166_country_codes
[09:59:06] <dibblego> (DecDigit, DecDigit, DecDigit)
[09:59:37] *** Joins: chomwitt (~chomwitt@ppp-94-67-201-202.home.otenet.gr)
[09:59:49] <dolio> Int has plenty of leading zeroes.
[09:59:50] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[09:59:51] <jackson99> directly like that, or wrapped in a type?
[10:00:08] <dibblego> I'd probably enumerate them tbh, because I'm like that
[10:00:44] <jackson99> dolio yeah that is true, 001 is a valid Int. maybe I'm being too OCD
[10:01:11] <EvanR> are the leading zeros significant in anyway or just format padding
[10:01:22] <dolio> You should probably make a separate type for it regardless.
[10:01:56] <EvanR> newtype CountryCode = CountryCode { noCountry :: Int }
[10:02:33] <jackson99> EvanR they don't seem to be significant
[10:02:48] <EvanR> bureaucratic nonsense then xD
[10:04:25] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[10:04:50] *** Joins: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com)
[10:06:04] <EvanR> country code 0 and 00 every time baby
[10:07:17] *** Quits: shapr (~user@2601:7c0:c202:5190:f73c:d98b:42b3:a084) (Ping timeout: 240 seconds)
[10:07:55] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[10:09:54] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:91de:85f0:a816:591c)
[10:13:11] *** megaTherion_ is now known as megaTherion
[10:16:46] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[10:17:27] <opqdonut> phone numbers in general are [Digit], not Integer
[10:17:43] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:17:51] <opqdonut> so I'd store the country codes as [Digit] for ease of concatting with the [Digit] the user has given you
[10:18:11] <opqdonut> (thinking of the usual web form thing where you have a dropdrown for the country code and then you enter your phone number next to it)
[10:20:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:21:27] *** Quits: mikoto-chan (~mikoto-ch@194.157.16.89) (Quit: mikoto-chan)
[10:26:16] *** Joins: vicfred (~vicfred@user/vicfred)
[10:30:56] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[10:33:05] *** Quits: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com) (Remote host closed the connection)
[10:33:21] *** Joins: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com)
[10:33:53] *** Joins: Erutuon (~Erutuon@user/erutuon)
[10:37:07] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (Quit: bye)
[10:37:22] *** Quits: justIrresolute (~justache@user/justache) (Remote host closed the connection)
[10:37:57] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[10:38:14] *** Joins: justIrresolute (~justache@user/justache)
[10:48:02] *** Quits: shriekingnoise (~shrieking@181.229.0.83) (Quit: Quit)
[10:51:01] *** Joins: mikoto-chan (~mikoto-ch@194.157.37.35)
[10:51:37] *** Joins: schweers (~user@i59F630AB.versanet.de)
[10:53:11] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[10:56:38] *** Quits: schweers (~user@i59F630AB.versanet.de) (Remote host closed the connection)
[10:57:26] <jackson99> @hoogle String -> String -> String -> String
[10:57:26] <lambdabot> Basement.String replace :: String -> String -> String -> String
[10:57:26] <lambdabot> Foundation.String replace :: String -> String -> String -> String
[10:57:26] <lambdabot> XMonad.Hooks.DynamicLog wrap :: String -> String -> String -> String
[10:58:00] <jackson99> which one of the two packages with replace should I use? or should I just roll my own
[11:00:32] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[11:07:02] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[11:07:48] <tdmm> @hoogle [a] -> [a] -> [a] -> [a]
[11:07:49] <lambdabot> Language.Fixpoint.Misc wrap :: [a] -> [a] -> [a] -> [a]
[11:07:49] <lambdabot> Data.List.Utils replace :: Eq a => [a] -> [a] -> [a] -> [a]
[11:07:49] <lambdabot> Data.String.Utils replace :: Eq a => [a] -> [a] -> [a] -> [a]
[11:09:05] <EvanR> package stringsearch looked promising back in the day, it has replace. Also it's ByteString
[11:13:06] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[11:13:24] *** Quits: opticblast (~june@secure-165.caltech.edu) (Ping timeout: 250 seconds)
[11:13:33] *** Joins: akurilin_ (uid322841@id-322841.ilkley.irccloud.com)
[11:13:42] *** Quits: nunggu (~q@gateway/tor-sasl/nunggu) (Ping timeout: 276 seconds)
[11:13:58] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:14:55] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[11:15:07] *** Quits: qhong_ (~qhong@rescomp-21-400677.stanford.edu) (Ping timeout: 256 seconds)
[11:15:22] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:15:31] *** Joins: nunggu (~q@gateway/tor-sasl/nunggu)
[11:15:39] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[11:15:53] *** Joins: ahammer (~ahammer@157.122.68.247)
[11:16:32] *** Joins: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[11:16:58] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[11:16:58] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 256 seconds)
[11:20:12] *** Joins: `2jt (~jtomas@10.red-83-58-228.dynamicip.rima-tde.net)
[11:21:31] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:c21f:deb4:93f3:3ef9)
[11:21:34] *** Joins: schweers (~user@2001:16b8:e978:5100:aaa1:59ff:fe3f:235c)
[11:21:38] *** Quits: unyu (~pyon@user/pyon) (Quit: brb)
[11:22:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[11:22:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:24:52] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[11:26:42] *** Quits: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato) (Ping timeout: 276 seconds)
[11:27:12] *** Quits: razetime (~quassel@49.207.203.87) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:27:26] *** Joins: HotblackDesiato (~HotblackD@gateway/tor-sasl/hotblackdesiato)
[11:29:35] *** Quits: juhp (~juhp@128.106.188.82) (Quit: juhp)
[11:29:43] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[11:30:59] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[11:34:05] <schuelermine> monochrom: Where is the problem with this?
[11:35:09] <schuelermine> Also, why are polymorphic instances disallowed? The instances themselves can be represented just fine given ImpredicativeTypes is now a thing
[11:35:28] *** Joins: vpan (~0@212.117.1.172)
[11:35:37] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[11:35:39] <schuelermine> sadly J can't thmest with them because I'm on Android and the only run able binary I could is ghc 8m10
[11:35:57] <schuelermine> no wait it's 8.8
[11:36:05] <jackson99> can aeson be used to partially parse json? I only need a couple of fields, out of several dozen
[11:37:10] <siers> jackson99, you can make another data type with Maybes for those cases
[11:38:33] <jackson99> is there no way to avoid having to name all the fields, when I need only a few?
[11:39:06] <siers> unneeded fields are probably going to be ignored
[11:39:43] <siers> I haven't checked, but it should be that way – if you parse an object with x, y, z, but data is only data Data = { x ::, y :: } it's going to parse
[11:39:58] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[11:40:30] <siers> it should be that way because otherwise backwards compatibility is ruined
[11:40:40] *** Quits: hololeap_ (~hololeap@user/hololeap) (Read error: Connection reset by peer)
[11:41:02] <dminuoso> jackson99: Yes.
[11:41:05] <jackson99> you're right! they are ignored
[11:41:14] <dminuoso> Or rather it depends.
[11:41:32] <dminuoso> There are generics options that let it not ignore extra fields
[11:41:40] <dminuoso> So you can have it both ways
[11:42:00] *** Joins: hololeap_ (~hololeap@user/hololeap)
[11:42:11] <siers> I was thinking it's probably configurable
[11:42:46] <jackson99> I am manually writing FromJSON instance, so it just works. perhaps it wouldn't if I just used default instance
[11:43:03] <dminuoso> jackson99: It would, you can trivially configure it.
[11:43:45] <dminuoso> https://hackage.haskell.org/package/aeson-2.0.3.0/docs/Data-Aeson.html#v:rejectUnknownFields
[11:43:47] <jackson99> how about field name mismatch? json has "field", while haskell data is "dataNameField"
[11:44:03] <dminuoso> jackson99: Same story.
[11:44:14] *** Joins: cfricke (~cfricke@user/cfricke)
[11:44:42] <dminuoso> So the default implementation for FromJSON looks like this: https://hackage.haskell.org/package/aeson-2.0.3.0/docs/src/Data.Aeson.Types.FromJSON.html#parseJSON
[11:44:50] <dminuoso>     parseJSON = genericParseJSON defaultOptions
[11:44:57] <jackson99> and weirdly named json fields? alpha-3, while haskell field name is dataNameAlpha3? I need yet another flag for that? :)
[11:45:11] <dminuoso> Note that defaultOptions :: Options
[11:45:12] *** Joins: ubert (~Thunderbi@p200300ecdf0994878c88f9c813554c3f.dip0.t-ipconnect.de)
[11:45:32] <dminuoso> You can use field accessors to change it like this:
[11:46:09] <dminuoso> `genericParseJSON defaultOptions{ fieldLabelModifier = stripping "dataNameField" }` given a suitable function `stripping :: String -> String -> String`
[11:46:19] <dminuoso> Err sorry a slight typo
[11:46:36] <dminuoso> genericParseJSON defaultOptions{ fieldLabelModifier = stripping "dataName" }
[11:47:12] *** Joins: juhp (~juhp@128.106.188.82)
[11:47:35] <dminuoso> So fieldLabelModifier is some arbitrary function that maps the Haskell field name to the JSON field name. It defaults to id
[11:47:44] <dminuoso> Does this make any sense to you?
[11:48:00] *** Quits: ahammer (~ahammer@157.122.68.247) (Quit: Leaving)
[11:48:15] <jackson99> it makes sense, I just need to string it all together
[11:50:15] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[11:51:08] *** Quits: mtjm (~mutantmel@2604:a880:2:d0::208b:d001) (Remote host closed the connection)
[11:51:22] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[11:52:11] *** Joins: mtjm (~mutantmel@2604:a880:2:d0::208b:d001)
[11:52:28] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[11:52:45] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:53:16] *** Quits: mikoto-chan (~mikoto-ch@194.157.37.35) (Ping timeout: 250 seconds)
[11:56:16] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:91de:85f0:a816:591c) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:56:18] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Ping timeout: 250 seconds)
[11:56:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[11:57:39] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[11:58:45] *** Joins: michalz (~michalz@185.246.204.97)
[11:59:20] *** Joins: chele (~chele@user/chele)
[11:59:30] *** Quits: dut (~dut@user/dut) (Quit: Leaving)
[12:04:37] *** Quits: bontaq (~user@ool-45779fe5.dyn.optonline.net) (Ping timeout: 240 seconds)
[12:05:38] *** Joins: random__ (~random@185.219.68.251)
[12:07:49] *** Quits: random_ (~random@185.219.68.251) (Ping timeout: 240 seconds)
[12:11:30] *** Joins: max22- (~maxime@2a01cb088335980020904b4e9299912b.ipv6.abo.wanadoo.fr)
[12:11:47] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[12:13:00] *** Joins: Jing (~hedgehog@240e:390:7c53:a7e1:1910:eb62:16d3:8874)
[12:13:43] *** Joins: dut (~dut@user/dut)
[12:15:06] *** Joins: Jing_ (~hedgehog@240e:390:7c53:a7e1:dddb:2811:79d2:379)
[12:16:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:18:17] *** Quits: Jing (~hedgehog@240e:390:7c53:a7e1:1910:eb62:16d3:8874) (Ping timeout: 240 seconds)
[12:21:24] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:22:44] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[12:23:09] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[12:24:38] *** Quits: max22- (~maxime@2a01cb088335980020904b4e9299912b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:25:25] *** Joins: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr)
[12:25:57] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Ping timeout: 256 seconds)
[12:28:34] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[12:30:08] *** Quits: puffnfresh[m] (~puffnfres@2001:470:69fc:105::1:22da) (Quit: You have been kicked for being idle)
[12:31:02] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[12:33:35] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[12:34:04] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:35:49] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[12:37:14] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[12:37:27] *** Joins: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4)
[12:42:48] *** Quits: max22- (~maxime@2a01cb0883359800761b1c69d9198b7f.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:43:02] *** Joins: max22- (~maxime@2a01cb08833598000df4e5a73d13ef2b.ipv6.abo.wanadoo.fr)
[12:45:50] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[12:47:08] *** Quits: max22- (~maxime@2a01cb08833598000df4e5a73d13ef2b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:47:23] *** Joins: max22- (~maxime@2a01cb08833598000df4e5a73d13ef2b.ipv6.abo.wanadoo.fr)
[12:47:31] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[12:47:31] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[12:47:34] *** allbery_b is now known as geekosaur
[12:48:02] *** Quits: max22- (~maxime@2a01cb08833598000df4e5a73d13ef2b.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[12:48:10] *** Joins: acidjnk (~acidjnk@p200300d0c7271e5531e75586a8fe0593.dip0.t-ipconnect.de)
[12:50:12] *** Joins: Guest20 (~Guest20@217.155.25.33)
[12:50:31] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[12:51:37] *** Guest20 is now known as cstml
[12:53:35] *** Quits: cstml (~Guest20@217.155.25.33) (Client Quit)
[12:53:49] *** Joins: cstml (~cstml@217.155.25.33)
[12:55:56] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[12:56:10] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[12:56:32] *** Quits: cstml (~cstml@217.155.25.33) (Changing host)
[12:56:32] *** Joins: cstml (~cstml@user/cstml)
[12:58:58] *** Quits: cstml (~cstml@user/cstml) (Quit: Connection closed)
[12:59:13] *** Joins: cstml (~cstml@user/cstml)
[12:59:20] *** Joins: unyu (~pyon@user/pyon)
[12:59:36] *** Joins: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4)
[13:00:59] <superstar64> Is it possible to define something like `typeLamIO :: (forall a. IO (F a)) -> IO (forall a. F a)` assuming impredecative types?
[13:02:38] <lortabac> superstar64: what would this function do?
[13:04:33] <superstar64> I'm trying to add first class polymorphism to my effect system and this sort of function being legal would be really useful.
[13:07:06] <superstar64> I kinda have a gut feeling it's impossible because it seems it would allow things that the value restriction disallows in ml.
[13:09:20] *** Joins: mmhat (~mmh@55d451ef.access.ecotel.net)
[13:09:56] <superstar64> `typeLamIO (newIORef []) : IO (forall a. IORef [a])`
[13:10:53] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (Ping timeout: 256 seconds)
[13:11:24] <Axman6> the ol' unsafeCoerce IORef
[13:11:37] <dminuoso> % data F a = F
[13:11:37] <yahb> dminuoso: 
[13:11:46] <dminuoso> % f :: (forall a. IO (F a)) -> IO (forall a. F a); f = unsafeCoerce
[13:11:46] <yahb> dminuoso: 
[13:12:09] <dminuoso> ImpredicativeTypes was enabled previously in a query
[13:12:33] <dminuoso> This looks benign
[13:12:54] *** Joins: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[13:13:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:13:30] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:13:30] *** Joins: wroathe (~wroathe@user/wroathe)
[13:14:10] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:3e5c:6874:4d71:3988)
[13:16:09] *** Joins: pritambaral (~pritam@user/pritambaral)
[13:16:52] <superstar64> `typeLam :: (forall a. F a) -> IO (forall a. F a)` is obviously safe
[13:17:05] <superstar64> so `typeLamSTPure :: (forall a s. ST s (F a)) -> ST s (forall a. F a)` should be too
[13:18:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[13:23:41] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[13:25:44] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[13:30:32] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:30:53] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[13:31:06] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[13:31:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:32:59] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[13:35:37] *** Quits: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp) (Quit: Leaving)
[13:36:13] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[13:37:42] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Ping timeout: 250 seconds)
[13:37:48] *** Quits: qeqeqw (~qeqeqw3@2001:861:3a04:e320:31ea:a59b:1c06:51f4) (Quit: Leaving)
[13:39:28] *** Joins: tcard (~tcard@p2878075-ipngn18701hodogaya.kanagawa.ocn.ne.jp)
[13:42:39] *** Joins: hololeap (~hololeap@user/hololeap)
[13:43:06] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[13:43:12] *** Quits: hololeap_ (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[13:43:49] *** Joins: kuribas (~user@ptr-25vy0i9uvgk6lbwz9nb.18120a2.ip6.access.telenet.be)
[13:44:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[13:44:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[13:44:17] *** Joins: wroathe (~wroathe@user/wroathe)
[13:44:29] <kuribas> In order to parse whitespace, isn't it easier to tokenize first?
[13:44:32] <kuribas> I find handling whitespace can become quite messy...
[13:44:43] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[13:44:46] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[13:45:56] <dminuoso> kuribas: It depends. If you establish some `token` combinator that eats leading or trailing whitespacd and consistently use it, it can work.
[13:46:16] <kuribas> right, that could work as well...
[13:49:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[13:50:39] <merijn> kuribas: The trick is to not deal with whitespace at all :p
[13:51:01] <merijn> That's the main reason to tokenize, tbh "remove whitespace from input stream"
[13:51:19] <kuribas> merijn: to prohibit all whitespace? :-O
[13:51:45] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 250 seconds)
[13:52:23] <merijn> kuribas: no, the point of lexing is to convert text including whitespace into a stream of tokens (which no longer contain whitespace)
[13:53:24] <kuribas> merijn: I am not sure what you are suggesting to do?
[13:54:21] <merijn> kuribas: You said "isn't it easier to tokenize", I'm saying "yes, that's why you even do tokenization"
[13:55:02] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[14:00:45] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[14:00:49] <Franciman> haskell is gruesome
[14:00:51] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[14:01:23] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[14:01:44] <Franciman> i can't make template haskell work
[14:01:58] <Franciman> and get messages i can understand
[14:02:00] <Hecate> who can?
[14:02:02] <Axman6> try binding to C from it
[14:02:09] <Hecate> hehe
[14:02:22] <[exa]> Franciman: any specific error?
[14:02:24] * Hecate sends Axman6 some emotional support 
[14:02:33] <[exa]> o man
[14:03:28] <kuribas> merijn: right
[14:04:15] <Franciman> [exa]: half a page
[14:04:18] <Franciman> and more
[14:04:29] <Franciman> but after a lot of fight, i was able to get rid of TH
[14:04:32] <Franciman> T.T
[14:04:41] *** Joins: Photonsphere[m] (~maridonke@2001:470:69fc:105::1:688b)
[14:05:26] *** Parts: Photonsphere[m] (~maridonke@2001:470:69fc:105::1:688b) ()
[14:05:27] <Franciman> i have a question. I had read that the haskell community is saying that having another standard version is not on plans, because it requires lots of work
[14:05:41] <Franciman> so it's preferred to have the GHC proposals workflow
[14:06:02] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[14:06:03] <Franciman> i wonder, doesn't this tamper the development of other fellow compilers?
[14:06:24] <Franciman> i mean nowadays it's pretty rare in the code I saw to not add at least one ghc extension
[14:06:44] *** Quits: schweers (~user@2001:16b8:e978:5100:aaa1:59ff:fe3f:235c) (Remote host closed the connection)
[14:07:10] *** Quits: xff0x (~xff0x@2001:1a81:5213:d00:a0e3:bed3:6536:d79e) (Ping timeout: 250 seconds)
[14:07:44] *** Quits: yauhsien_ (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:07:45] <[exa]> Franciman: some of the ghc extensions will inevitably get standardized, many are pretty easy to either port or factor out of code, and sometimes the libs are not really meant to be portable (esp. with low-level stuff)
[14:08:25] <[exa]> but well, yeah, I guess having a second "big" compiler would help. Perhaps it could also help to make both compilers much less huge.
[14:08:32] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[14:08:35] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[14:09:33] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:10:39] <Franciman> yes, ofc not everything is meant to be portable
[14:10:47] *** Joins: xff0x (~xff0x@2001:1a81:5213:d00:a0e3:bed3:6536:d79e)
[14:11:06] <[exa]> increasing the size and user-friendly value of the "standard" (no matter how adhoc its definition is) inevitably increases the complexity of _all_ compilers around that need to jump a larger gap to become "viable" for community
[14:11:52] <Franciman> and choosing what to put in the standard is _a lot of work_ ok
[14:11:54] <kritzefitz> I'm not sure I understand your argument. Currently it seems to me like we need another big compiler so developing other compilers is easier, which seems kinda circular. Is there a deeper underlying argument why a language should have multiple implementations?
[14:11:56] <[exa]> but we still get a better language. :D
[14:12:09] *** Joins: __monty__ (~toonn@user/toonn)
[14:12:35] <[exa]> kritzefitz: it has the nice side effect that standardization, portability and compatibility issues suddenly materialize and get solved quickly
[14:13:00] <Franciman> it also reduces the «one point» failure
[14:13:03] <Franciman> vulnerability
[14:13:09] <Franciman> for companies
[14:13:28] <Franciman> if you don't have haskell SUPER MASTERS, you may not be able to fix ghc
[14:13:41] <[exa]> also gives you choices (e.g. a tradeoff may be implemented differently in separate compilers, without having the code destroyed by #ifdefs)
[14:13:54] <Franciman> now i wonder, do i need to be a haskell SUPER MASTER to professionally use haskell?
[14:13:57] <Franciman> true [exa] 
[14:14:03] <Franciman> there are many benefits, in my view
[14:14:52] <[exa]> Franciman: you don't need to, just get productive and don't waste much time on advanced features you don't really need
[14:15:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:15:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:15:05] *** Joins: wroathe (~wroathe@user/wroathe)
[14:18:50] <maerwald> you can only be productive when you stop caring about advanced features
[14:19:08] <kritzefitz> The portability argument still seems circular to me? Why do we need to find portability problems when we don't have alternative implementations we would want to port to?
[14:19:44] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[14:19:56] <maerwald> kritzefitz: that's a chicken and egg argument
[14:20:09] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Remote host closed the connection)
[14:20:43] <maerwald> we already have a pretty bad bus factor on GHC
[14:20:55] <maerwald> making it extra hard for others to start from scratch will not help
[14:21:05] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[14:23:54] <kritzefitz> But wouldn't maintaining alternative implementations even worsen that bus factor? To me it seems like it would take potential developer time that could be spent on improving GHC.
[14:24:02] <maerwald> why would it worsen it??
[14:24:26] <maerwald> are you saying anyone interested in writing a Haskell compiler should be interested in maintaining the GHC hairball?
[14:24:36] <maerwald> that sounds a little far fetched
[14:24:57] <kritzefitz> Ok, true.
[14:26:33] <maerwald> I'm pretty sure there are companies who have the capacity to write one, but didn't because it's hard to keep up with semi-documented features and potentially be incompatible with large parts of the ecosystem
[14:27:01] <Franciman> kritzefitz: one word: polarisation
[14:27:03] <Franciman> haskell lacks it
[14:27:07] <Franciman> and now I'm off
[14:27:10] <Franciman> see ya
[14:27:14] *** Parts: Franciman (~Franciman@mx1.fracta.dev) (WeeChat 3.4)
[14:27:24] <yushyin> oO
[14:27:48] <maerwald> hell, facebook writes compilers and new languages all the time
[14:28:14] <maerwald> and facebook employees have expressed their anger towards GHC breaking stuff frequently
[14:28:25] <maerwald> so it seems they would have an interest in that, maybe
[14:29:05] <maerwald> but only if that actually reduces maintenance issues at the end of the road
[14:29:24] <dminuoso> Is fb still on 8.6?
[14:29:27] <maerwald> which is not the case without an up2date standard
[14:29:42] <dminuoso> Not that 8.6.1 is a bad release, its rock stable..
[14:29:44] <kritzefitz> Ok, granted it may not work out in practice. But leaving that aside, wouldn't it be preferable to have more developers for GHC instead of splitting that work over multiple implementations?
[14:30:11] <maerwald> dminuoso: simonmar's post indicates it's 8.8, but not sure
[14:30:37] <maerwald> kritzefitz: no
[14:31:26] <maerwald> then you make GHC the testbed for all (crazy) ideas and make it harder to do radical improvements
[14:31:43] <maerwald> which is exactly our status quo
[14:33:34] <maerwald> example of a crazy idea: dependent types. Example of radical improvements that seem impossible: having a Haskell compiler whose primary focus is compilation speed
[14:35:04] <kritzefitz> It seems to me like you implicitly limit “radical improvement“ to changes that don't change the language. Is that correct?
[14:36:04] *** Joins: alx741 (~alx741@157.100.93.160)
[14:36:36] <maerwald> no... a radical improvement to the language would be changing syntax
[14:37:04] *** pritambaral is now known as prite
[14:37:15] <maerwald> but that's not in the scope of a compiler adhering to the standard
[14:37:38] <maerwald> you can add dependent types to your compiler while adhering to the standard, though
[14:37:50] <maerwald> so it's possible for compilers to support a superset of haskell
[14:38:58] <maerwald> and I'd rather have people fork GHC or write a new compiler when doing that sort of thing, instead of having everything creep into GHC, just because it's the primary implementation and we failed at having a good standard
[14:39:43] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[14:45:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:45:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:45:51] *** Joins: wroathe (~wroathe@user/wroathe)
[14:50:55] *** Joins: schweers (~user@2001:16b8:e978:5100:aaa1:59ff:fe3f:235c)
[14:51:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[14:51:34] *** Quits: superstar64 (~superstar@2600:1700:ed80:50a0:d250:99ff:fe2c:53c4) (Quit: Leaving)
[14:53:58] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[14:57:04] <kritzefitz> Ok, I think I understand your argument. Thanks for walking me through it.
[15:04:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:06:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:07:51] *** Quits: prite (~pritam@user/pritambaral) (Remote host closed the connection)
[15:08:18] *** Joins: prite (~pritam@user/pritambaral)
[15:11:35] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:12:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:14:30] <jackdk> dependent types, linear types, first-class `exists`, whatever vs. compile faster, fix the "package-o-orphan-instances" problem on hackage, or the "adding a new superclass breaks the universe" problem
[15:17:48] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:18:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:22:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:26:04] *** Joins: jgeerds (~jgeerds@55d4bbed.access.ecotel.net)
[15:27:17] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 240 seconds)
[15:32:08] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Quit: Reconnecting)
[15:32:20] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[15:34:52] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:189c:6a92:5958:80be)
[15:36:40] *** Quits: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com) (Quit: leaving)
[15:38:03] <tomsmeding> jackdk: how is the "adding a new superclass breaks the universe" a solvable problem?
[15:38:34] <jackdk> I don't know if it is, but I know that it's a problem.
[15:42:01] *** Parts: jakalx (~jakalx@base.jakalx.net) (Disconnected: Replaced by new connection)
[15:42:02] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:42:56] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:3e5c:6874:4d71:3988) (Ping timeout: 250 seconds)
[15:43:46] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[15:44:04] *** Joins: bliminse (~bliminse@host86-188-36-178.range86-188.btcentralplus.com)
[15:44:18] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[15:45:00] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:46:09] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:47:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:48:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:48:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:48:06] *** Joins: wroathe (~wroathe@user/wroathe)
[15:52:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[15:53:19] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:53:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:57:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[15:58:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:58:37] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[15:59:02] *** Quits: _ht (~quassel@82-168-34-160.fixed.kpn.net) (Remote host closed the connection)
[15:59:18] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:01:30] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[16:02:10] *** Joins: _ht (~quassel@82-168-34-160.fixed.kpn.net)
[16:02:52] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[16:03:18] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[16:04:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:05:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:05:15] *** Joins: tafa (~tafa@user/tafa)
[16:07:15] *** Joins: cfricke (~cfricke@user/cfricke)
[16:09:01] <merijn> Axman6: ?? I always found binding C from Haskell absolutely trivial? What are you doing that makes it gruesome?
[16:09:21] <janus> why does build-constraints.yaml not say anything about 'text' bounds? it doesn't look like it is a boot package, so i would expect many packages to be broken by text 2
[16:10:40] <merijn> janus: Why?
[16:10:57] <merijn> I would expect very little to break by Text-2.0, tbh
[16:10:57] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[16:11:05] <janus> merijn: because tools like stack will put in automatic bounds on upload such that text 2 is excluded
[16:11:26] *** Joins: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[16:11:42] <janus> and then there are even people who manually put in bounds that exclude unreleased minor versions, because they'd prefer to have it excluded from solver instead of just hoping it works
[16:11:47] <merijn> janus: No, I meant why do you expect many packages to break
[16:12:24] <janus> that's what i am explaining. if i am developing package foobar in the year 2019, text 2 is unreleased, i will put in bounds that exclude text 2. there should be many such packages on hackage
[16:13:03] <merijn> I'm not sure how that breaks anything?
[16:13:26] <janus> by 'break' i here mean that it is excluded in build-constraints.yaml. dunno if there is a better word
[16:13:56] <janus> if stackage nightly has text 2, it would have to exclude the packages that don't work with text 2
[16:14:13] <merijn> I dunno what build-constraints.yaml does. To me "package breaks due to release of text-2.0" means "the package can no longer compile" OR "the package won't compile with text-2.0"
[16:14:20] *** Quits: cstml (~cstml@user/cstml) (Remote host closed the connection)
[16:14:43] <janus> they do that by setting a bound "foobar < 0 # tried foobar-0.1, but it's library does not support: text-2"
[16:14:53] <janus> build-constraints.yaml defines a stackage snapshot, afaik
[16:15:12] <merijn> janus: tbh, I think the answer to that is "I don't think stackage snapshots are as maintained as many people imagine them to be" :p
[16:15:38] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 252 seconds)
[16:16:12] <janus> if the package is excluded from the snapshot, i'd say it doesn't compile ;) since it would require the user to start solving the dep graph
[16:16:36] <merijn> janus: Packages exists outside of stackage too :)
[16:16:47] <janus> right, but i am specifically asking about build-constraints.yaml
[16:17:00] <dminuoso> Of course not. It's not as if fpco hires 40 Haskell developers to spend their full time auditing, vetting and curating resolvers...
[16:17:04] <merijn> anyway, probably more of a question for #stackage if that still exists?
[16:18:24] <janus> doesn't seem like it exists on libera.chat, i imagine they may have moved to slack
[16:19:05] <janus> dminuoso: what is "Of course not" a reply to?
[16:19:31] <merijn> janus: To my statement about the amount of stackage maintenance :)
[16:19:36] <merijn> presumably
[16:19:46] <dminuoso> janus: merijn's remark about stackage snapshots being not as maintained as many people imagine them to be
[16:20:29] <janus> i am asking this question because there is a bug on the stackage repo for upgrading to mmorph 1.2 and a bug for upgrading to aeson 2, so they are tracking that
[16:20:44] <janus> and many packages are still excluded cause they are incompatible with bytestring 0.11
[16:20:47] <dminuoso> It seems more reasonable to consider build plans "curated snapshots that are tested to work", than to assume that others have magically done the job for you.
[16:20:51] <dminuoso> But that's just me.
[16:21:13] <janus> how are my questions incompatible with that assertion?
[16:21:41] <merijn> janus: Anyway, the answer is most simply "because no one submitted a PR to change things yet"?
[16:21:48] <janus> i am looking through those pr's and i wonder how it can be that packages are excluded based on incompatibility with other packages, but not with text. it is just odd, that's all
[16:22:13] <janus> a pr wouldn't be necessary to encounter this problem
[16:22:17] <merijn> janus: Presumably they're hoping those package will be fixed "Real Soon (TM)"
[16:22:18] <dminuoso> janus: Because incompatibilities depend on what portion of a library you are using.
[16:22:40] <merijn> Since most packages can probably simply bump their text bounds and call it a day
[16:22:48] <janus> if there is a package that demands text>=2, and they havn't gotten text 2 yet, they would also have to exclude it. but there isn't any package like that either
[16:22:50] <merijn> Most people don't use the internal bits that changed
[16:23:10] <janus> in all of stackage... i think that's odd
[16:23:40] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:24:55] <merijn> janus: I mean your question is, essentially "why did they already ram through text-2.0 if it's incompatible?" and the answer is "you'd have to ask the maintainers who made that change to stackage"?
[16:25:35] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[16:25:37] <janus> well they didn't ram text-2 through. so probably the explanation is that they just thought it would break too much
[16:25:39] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[16:25:44] <geekosaur> wait, are you saying they pushed text 2 into the lts?
[16:25:53] <janus> no, they didn't even put it in nightly
[16:25:54] <geekosaur> nightly I can see, that's what it's there for
[16:26:07] <janus> it's not in nightly either and there is no discussion on it
[16:26:17] <janus> there is a discussion on aeson-2 though
[16:26:23] <merijn> ok, now I'm confused about my understanding if the question, so I'll assume I'm misreading everything and giving up :)
[16:26:58] <janus> right but thank you anyway, i think this did clear up things
[16:28:09] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:28:31] <janus> and my initial assertion that "it doesn't say anything about text bounds" is wrong. because e.g. the package text-all is excluded for incompatibility with text-1.2.4.1. 
[16:29:37] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[16:32:23] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[16:32:37] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[16:34:10] *** Quits: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:34:30] <maerwald> stack itself isn't even maintained
[16:35:02] *** Joins: yauhsien (~yauhsien@61-231-29-214.dynamic-ip.hinet.net)
[16:36:57] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[16:39:27] *** Quits: acidjnk (~acidjnk@p200300d0c7271e5531e75586a8fe0593.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:41:43] *** Joins: Pickchea (~private@user/pickchea)
[16:42:08] <tomsmeding> maerwald: you're going to need to qualify that assertion, will bugs not get fixed?
[16:43:42] <maerwald> tomsmeding: there are some bugfix PRs that never got any review, correct
[16:43:58] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[16:44:29] <maerwald> you may be lucky to get a review by chance, depending on who you pinged at what time of day, but that's not "maintained" software
[16:45:46] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 250 seconds)
[16:48:22] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[16:48:46] *** Quits: jackson99 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Session timeout))
[16:52:33] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:52:55] <tomsmeding> maerwald: interesting, TIL. Was this an intentional change (e.g. by fpco) or did maintainer activity just naturally decline over time? (If you happen to know)
[16:52:57] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[16:53:17] <tomsmeding> (not making a judgement call, just assessing situation)
[16:53:18] <maerwald> tomsmeding: it was also announced here: https://www.snoyman.com/blog/babies-oss-maintenance/
[16:53:20] <tomsmeding> ah
[16:53:25] *** Quits: chomwitt (~chomwitt@ppp-94-67-201-202.home.otenet.gr) (Ping timeout: 256 seconds)
[16:54:01] <maerwald> one reason supposedly was that Cabal (the library) is moving too fast
[16:54:11] <maerwald> I call bs on that, but anyway
[16:55:05] *** Parts: Brandon_1X (~brandon@178-79-138-117.ip.linodeusercontent.com) ()
[16:56:34] *** Joins: chomwitt (~chomwitt@2a02:587:dc11:fb00:12c3:7bff:fe6d:d374)
[16:56:55] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[17:00:05] *** Quits: acidsys (~LSD@2.lsd.systems) (Excess Flood)
[17:00:38] <tomsmeding> maerwald: thanks for sharing, that post makes lots of sense. I don't see him making a point about Cabal moving too fast; he does say that GHC moves too fast for his wishes.
[17:00:45] *** Joins: cstml (~cstml@user/cstml)
[17:01:12] <tomsmeding> oh he does mention Cabal in a similar context once
[17:01:31] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[17:01:57] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Ping timeout: 240 seconds)
[17:02:14] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[17:04:13] *** Joins: acidsys (~LSD@2.lsd.systems)
[17:08:44] *** Quits: nhs_ (~nhs@136.49.226.20) (Read error: Connection reset by peer)
[17:10:54] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[17:13:25] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[17:13:43] *** Joins: nschoe (~quassel@2a01:e0a:8e:a190:42f9:717:c87c:61ed)
[17:15:13] <merijn> tbh, I have the impression that most FPCO projects start out with a pretty decent quality engineering package and then gradually they just accumulate more and more problems and warts >.>
[17:16:36] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[17:20:56] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:23:36] *** Joins: slack1256 (~slack1256@191.126.99.83)
[17:27:46] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[17:35:12] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[17:38:02] *** Joins: max22- (~maxime@2a01cb0883359800450c60e303939557.ipv6.abo.wanadoo.fr)
[17:38:05] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[17:43:03] *** Joins: jkaye_ (~jkaye@2601:281:8300:7530:8293:8dc5:8087:f321)
[17:43:17] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[17:48:17] <maerwald> stacks codebase is pretty easy to understand (for a project that big)... so it's not that the entry barrier for contributors is too high
[17:49:06] *** Joins: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:e083:f91a:e3b1:b08b)
[17:54:03] *** Joins: schuelermine (~schuelerm@user/schuelermine)
[17:54:49] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[17:57:57] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[17:58:13] *** Joins: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8)
[17:58:57] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 240 seconds)
[18:00:02] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:00:02] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:00:02] *** Joins: wroathe (~wroathe@user/wroathe)
[18:00:57] *** Quits: da39a3ee5e6b4b0d (~textual@2403:6200:8876:c04a:e083:f91a:e3b1:b08b) (Ping timeout: 240 seconds)
[18:03:16] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:03:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[18:04:37] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[18:05:36] <ProfSimm> How would we approach a function that needs to return multiple named results
[18:05:49] <ProfSimm> Is there something more conventional than records
[18:06:22] <merijn> ProfSimm: Not really
[18:06:59] <ProfSimm> What i want to do is a function where i return a "default" result, but optionally you can fetch more "attributes" at will
[18:07:21] <ProfSimm> I.e. I want the additional named results to be implicit and only visible when you decide to select them
[18:07:41] <ProfSimm> I guess I could use a tuple (main result, ...)
[18:08:44] <ProfSimm> merijn: have you sometimes thought what if all languages returned results as a set of relations, like in SQL.
[18:09:00] <ProfSimm> Everything is a list, and everything is a record. Depends on what you SELECT
[18:09:06] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:09:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[18:11:01] *** Quits: kilolympus (~kilolympu@31.205.200.235) (Ping timeout: 240 seconds)
[18:13:24] <dminuoso> ProfSimm: well if you separate the algebra, that is certainly possible and how SQL does it.
[18:13:44] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[18:14:18] <dminuoso> SQL servers usually compile your query into a relational algebra, transform that algebra according to semantic preserving transformations with better performance, and then execute said algebra against the tuples
[18:15:06] <dminuoso> `lens` works somewhat similarly, in that we can express a sort of "way to look into/modify" data as a first class value that composes nicely, and then at some point run it against our data
[18:15:06] *** Quits: max22- (~maxime@2a01cb0883359800450c60e303939557.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[18:15:07] <ProfSimm> dminuoso: I'm itching to imagine a language that has this semantic by default. Everything is a relation. Even moreso than SQL, because SQL has functions.
[18:16:21] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[18:16:38] *** Joins: stef204 (~stef204@user/stef204)
[18:17:25] <dminuoso> ProfSimm: Functions and algebras are not mutually exclusive
[18:17:35] <dminuoso> Mmm, Im trying to think of the name of a particular prolog based language
[18:18:02] <kuribas> dminuoso: ugh, sadly using a token operator means I have to reparse the tokens.
[18:18:17] <ProfSimm> dminuoso: they're not but I prefer to unify them. Say present functions as virtual tables (relations) and eliminate the concept of separate functions
[18:18:18] <kuribas> dminuoso: when backtracking.
[18:18:52] <ProfSimm> dminuoso: or inversely, present relations as function, i.e. FROM function WHERE arguments
[18:19:04] *** Joins: bontaq (~user@ool-45779fe5.dyn.optonline.net)
[18:19:06] <dminuoso> Ah I was thinking of Datalog, you might be interested in that ProfSimm 
[18:20:27] <ProfSimm> dminuoso: I think i wanna keep the imperative nature of processing, but reduce the "data shapes" to a single universal format, much like relations are
[18:21:18] *** Joins: Rum (~bourbon@user/rum)
[18:24:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:25:24] *** Joins: xkuru (~xkuru@user/xkuru)
[18:28:31] <EvanR> why would you want imperative relational algebra
[18:29:17] <EvanR> also the original question seemed to suggest extensible records
[18:30:09] *** Joins: johnjaye (~pi@154.6.152.74)
[18:30:22] <johnjaye> should ~/.cabal be created when installing cabal-install?
[18:30:32] <johnjaye> or do i need to run 'cabal update' given the odd name?
[18:30:39] <johnjaye> it says cabal is 3.4
[18:30:44] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[18:31:57] <geekosaur> it will be created the first time you run it
[18:32:03] <geekosaur> just installing it does nothing
[18:32:09] *** Joins: smarton (~smarton@gnu/webmaster/smarton)
[18:32:10] <geekosaur> except install the binary
[18:32:20] *** Joins: shriekingnoise (~shrieking@181.229.0.83)
[18:32:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:32:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:32:50] *** Joins: wroathe (~wroathe@user/wroathe)
[18:32:52] <johnjaye> ok. i tried  cabal install nonsensename and it created it
[18:33:00] <johnjaye> but says it needs to be updated to get hackage
[18:33:09] <geekosaur> yeh
[18:33:23] <johnjaye> so i do need to install it then run 'cabal update'. ok
[18:33:50] <geekosaur> cabal update has to be run manually since you might be relying on your current index as a "snapshot". it'll also tell you how to get back to the old "snapshot" after you run it
[18:33:53] <merijn> johnjaye: ~/.cabal is created "on-demand" if it doesn't exist yet
[18:34:02] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[18:34:30] <merijn> johnjaye: 'cabal update' just fetches the latest package index from Hackage so should be run periodically (but cabal will print a reminder you haven't updated in 20 or so days)
[18:34:45] <johnjaye> idk it just says it updated hackag
[18:34:47] <johnjaye> nothing else
[18:35:05] <johnjaye> now to pkg install ghc and see if that work
[18:35:11] <merijn> johnjaye: It won't
[18:35:17] <merijn> johnjaye: ghc isn't installable via cabal
[18:35:23] <merijn> Because it's not a cabal package
[18:35:26] <johnjaye> yes i'm using pkg.
[18:35:38] <johnjaye> ghc and cabal are separate packages on bsd
[18:35:40] <merijn> ah, wait, you meant the system package manager. Nevermind :)
[18:35:41] <johnjaye> idk why
[18:36:07] <johnjaye> when i googled for how to install haskell on bsd it said there was a metapackage that installed both of them
[18:36:09] <johnjaye> but it's gone now
[18:36:10] <merijn> johnjaye: Because GHC is (in theory) perfectly usable without cabal, using make or something like shake
[18:36:33] <merijn> And cabal is (in theory) perfectly usable with non-GHC compilers
[18:36:41] <johnjaye> i see
[18:36:45] <geekosaur> last I heard BSD was at least considering moving away from packaging haskell and suggesting people use ghcup instead
[18:36:52] <merijn> Most of them besides UHC are now defunct, but that's coincidental
[18:37:03] <geekosaur> since thye'd otherwise have to keep multiple versions of everything around
[18:37:08] *** Quits: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[18:37:10] <maerwald> geekosaur: oh god
[18:37:15] <merijn> maerwald: RIP you
[18:37:23] <maerwald> support for FreeBSD bindists isn't very good atm
[18:37:28] <maerwald> because FreeBSD CI is a pita
[18:37:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[18:38:35] <maerwald> and they break easily when FreeBSD does something weird to their libraries
[18:39:23] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[18:40:05] <johnjaye> maerwald: i don't know much about how CI systems work. what do you mean it's a pain?
[18:40:18] <johnjaye> i have a vague idea you send your code to amazon and it runs it 1000000 times
[18:40:23] <maerwald> johnjaye: well... how do you run freebsd isolated?
[18:40:43] <johnjaye> isolated from what? hackers?
[18:40:58] <maerwald> CI system that doesn't have persistent state
[18:41:26] <johnjaye> idk much about them. i know freebsd has some kind of quarterly release system for the binaries
[18:41:48] <maerwald> that's not what I meant
[18:41:50] <geekosaur> freebsd does have CI arrangements… with microsoft azure
[18:42:10] <maerwald> FreeBSD CI on GHC gitlab (which produces the bindists) currently uses vagrant
[18:42:13] <maerwald> and it's flaky
[18:42:26] <maerwald> before it was just a persistent stateful runner 
[18:42:51] <maerwald> github actions doesn't have freebsd support out of the box
[18:43:03] <maerwald> there's an action that abuses macos vm capability
[18:43:06] <maerwald> but it's not a very good one
[18:43:36] * geekosaur finds that interesting given that freebsd and microsoft have actually been working together relatively closely for some years
[18:43:51] <geekosaur> ever since microsoft bought hotmail, in fact
[18:45:58] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[18:46:04] <maerwald> and: statically linking on freebsd is... I dunno
[18:46:05] *** Joins: lavaman (~lavaman@98.38.249.169)
[18:46:14] <maerwald> not sure it's even possible, but I tried and never managed
[18:46:26] <maerwald> the linker is just weird
[18:47:25] <geekosaur> they discourage static linking because that gets you binaries that only work on one point release
[18:47:58] <merijn> maerwald: Nothing in the handbook?
[18:47:58] <maerwald> so yeah... you are forced to link dynamically, but have none of the binary compatibility of windows or mac
[18:48:15] <maerwald> the worst of both worlds
[18:48:55] *** Quits: smarton (~smarton@gnu/webmaster/smarton) (Quit: Quit)
[18:50:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[18:50:37] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[18:52:25] <johnjaye> seems strange as a noob, i've used clang on it before so
[18:52:30] <johnjaye> idk
[18:53:03] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[18:53:49] <geekosaur> it's been a while but I used to run fbsd extensively and never had binary compatibility issues
[18:54:26] <geekosaur> would still run it if the world hadn't gone linux to the extent that it's hard to find drivers for modern hardware :(
[18:54:46] <johnjaye> ^
[18:54:54] <johnjaye> supposedly netflix uses freebsd
[18:55:01] <johnjaye> so i don't know how that circle is squared exactly
[18:55:37] *** Joins: max22- (~maxime@2a01cb0883359800c8a77c004bdd2128.ipv6.abo.wanadoo.fr)
[18:56:36] <maerwald> geekosaur: http://gregorkopf.de/blog/posts/ghc_ino64.html
[18:56:47] <maerwald> REALLY?
[18:57:44] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[18:58:20] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:59:08] <geekosaur> have you ever seen the crawling horrors linux uses to avoid that kind of issue? spread throughout the kernel and glibc
[18:59:25] <geekosaur> fine until you do something that breaks it and then it makes that look minor
[18:59:28] *** Joins: shapr (~user@2601:7c0:c37c:46d0:2b64:ce79:8ca:be50)
[19:01:50] <maerwald> Well, I'm fairly confident they don't care about people distributing binaries
[19:02:03] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[19:02:09] <maerwald> which is a fine stance
[19:02:18] <maerwald> but then please package your GHC yourself :p
[19:02:45] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[19:03:11] *** Quits: jgeerds (~jgeerds@55d4bbed.access.ecotel.net) (Ping timeout: 256 seconds)
[19:07:31] *** Joins: kacper (~kacper@kwlan13.uoks.uj.edu.pl)
[19:07:39] <EvanR> at this point I'm suspicious of my distributor giving me SomeVersion of GHC
[19:07:50] <EvanR> since it seems like you probably need multiple
[19:08:12] <EvanR> I guess they could provide multiple versions too
[19:08:41] <geekosaur> that's what they're trying to avoid, as I understand it
[19:09:06] *** Quits: da39a3ee5e6b4b0_ (~textual@2403:6200:8876:c04a:6410:d0a3:c1e2:34d8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:09:10] <geekosaur> it's a slippery slope as they end up packaging other things in multiple versions to go with each ghc
[19:09:29] <geekosaur> especially if they (like pretty much everyone else) use stackage as their starting point
[19:11:36] <kacper> Hi. I need to generate some random numbers from different distributions (normal, Laplace, ...). What would be a good (simple, reliable) library to use?
[19:13:19] <geekosaur> doesn't random-1.2 handle multiple distributions these days? not sure about laplace though
[19:14:17] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::55f8) (Ping timeout: 240 seconds)
[19:14:39] <geekosaur> (and it's an interface that can be used with multiple backends)
[19:15:02] <merijn> kacper: mwc-random?
[19:15:18] <merijn> random itself is just a RNG afaik, no real distributions?
[19:15:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:15:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:15:21] *** Joins: wroathe (~wroathe@user/wroathe)
[19:15:22] <johnjaye> so if i type 'cabal install random' it says it has to download and build them
[19:15:25] <johnjaye> is that because i'm on bsd?
[19:15:32] <geekosaur> merijn, not as of 1.2
[19:15:37] *** Quits: falafel (~falafel@2603-8000-d800-688c-54f8-65c3-409b-d4a1.res6.spectrum.com) (Ping timeout: 240 seconds)
[19:15:47] <EvanR> random-fu, I recall
[19:16:02] <EvanR> https://hackage.haskell.org/package/random-fu
[19:16:23] <merijn> johnjaye: No?
[19:16:24] <johnjaye> it says i should have run cabal install --lib random
[19:16:28] <merijn> johnjaye: ah
[19:16:33] <merijn> johnjaye: You want neither, tbh
[19:17:00] <maerwald[m]> geekosaur: what else other than ghc do they package? 
[19:17:07] <merijn> johnjaye: What you want is a cabal file for your code that lists random as a dependency and then "it'll just work"
[19:17:24] <geekosaur> don't know currently. as I said, I *used* to run it extensively
[19:17:30] <johnjaye> building mersenne-random-pure64 as well as about a dozen other deps
[19:17:49] <geekosaur> have not checked recently, have heard talk that they want to stop packaging stuff, but afaik they have not acted on it yet
[19:17:53] <merijn> geekosaur: afaict random only has uniform distribution
[19:17:53] <johnjaye> merijn: so i'm not supposed to download them with cabal?
[19:18:02] <merijn> geekosaur: mwc-random has loads of distributions
[19:18:10] <merijn> johnjaye: "It Depends (TM)"
[19:18:25] <johnjaye> i just mean to use it in a program
[19:18:27] <merijn> johnjaye: What you're not supposed to do is: Attempt to globally install packages.
[19:18:41] <geekosaur> hm, wonder if they removed it all again
[19:18:56] <merijn> johnjaye: Right, you should make a cabal file for your program that has random as dependency and then do "cabal build" to compile your program
[19:19:13] <merijn> johnjaye: Then it will fetch and install the dependency for you already
[19:19:19] <geekosaur> there were some complaints about how they'd added them
[19:20:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:20:30] <geekosaur> \right, these days you do not install libraries, you let cabal manage them for you
[19:20:50] <geekosaur> installing libraries just causes pain later when you need different versions
[19:20:51] <merijn> johnjaye: The "problem" is that cabal (mostly) got rid of the idea of "globally installed packages", because that leads to conflicts between different projects, etc. instead there's a global store that allows infinitely many conflicting installs of the same package
[19:21:10] <merijn> johnjaye: So different projects can use different, conflicting versions of the same package without issue
[19:21:30] <EvanR> out of infinite conflict, comes unlimited victory
[19:21:40] <merijn> johnjaye: But the result is that "globally installing" becomes a meaningless/useless thing (if package 'foo' is installed 5 times, which is the right global one?!)
[19:22:30] <merijn> johnjaye: When you build a project (like your program) cabal will automatically select a set of matching dependencies and make only those visible to your code.
[19:23:02] <johnjaye> sounds like the way virtual memory always got described which was dumb
[19:23:11] <johnjaye> why would i want multiple programs to use my memory at the same time?
[19:23:37] <johnjaye> but i guess if people want to use libv4.2 and libv3.7 and libv6.2 at the same time that's how it has to be
[19:23:38] *** Joins: red-snail (~snail@static.151.210.203.116.clients.your-server.de)
[19:23:38] <geekosaur> because memory that's not being used is wasted
[19:23:40] <merijn> Virtual memory is one of the best/greatest inventions in the history of operating systems...
[19:24:01] <johnjaye> merijn: yes but the way its described sounds dumb. at least in my textbook
[19:24:04] <merijn> johnjaye: I have 2 different projects at work in python that require different versions of the same library
[19:24:04] <geekosaur> why would you pay good money for memory that won't be used?
[19:24:24] <merijn> johnjaye: I literally cannot work on both projects unless I manually manage virtual envs to separate them
[19:24:29] <EvanR> the zen of having 15 gigs of empty ram
[19:24:43] <johnjaye> merijn: right i get what you're saying it just doesn't make sense
[19:24:48] *** Quits: Major_Biscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[19:24:58] <merijn> The cabal approach does the same thing, except it does it transparently and can reuse the same install between different projects
[19:25:19] <johnjaye> cool
[19:27:08] <merijn> johnjaye: If two projects both want "foo-1.2" then there is just a single foo-1.2 installed. If one wants foo-1.1 and the other foo-3.7, then they both will be, but each project only gets to see one of them
[19:27:42] <johnjaye> right i understand. it just doesn't make any sense
[19:27:43] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[19:27:59] <johnjaye> it's like saying i have windows xp, windows 7, windows nt, windows me all installed so my program can use the right version
[19:28:10] <EvanR> what's the context
[19:28:24] <EvanR> you are developing haskell programs? or just running someones program they already built
[19:28:33] <merijn> EvanR: "Don't use 'cabal install' to install libraries" :p
[19:28:42] <EvanR> I mean for johnjaye 
[19:29:02] <EvanR> but yeah merijn is right, if johnjaye is trying to write haskell programs
[19:29:19] <johnjaye> so cabal install is deprecated or
[19:29:24] <johnjaye> should i not be using it at all?
[19:29:31] <johnjaye> to run haskell programs i mean
[19:29:32] <sclv> the cabal tool is not deprecated its great
[19:29:35] <merijn> johnjaye: It's still fine for executables
[19:29:51] <merijn> johnjaye: Like "cabal install happy" (or "cabal install cabal-install" :p)
[19:29:54] <sclv> just the "cabal install" command is not really the right way to manage lib dependencies when building packages
[19:30:12] <Clint> unless you like it that way
[19:30:13] *** Quits: jophish (~jophish@2001:470:69fc:105::670) (Quit: You have been kicked for being idle)
[19:30:25] <merijn> johnjaye: But for making dependencies available, you're best off just adding a dependency to cabal file, running "cabal build" and letting it auto-fetch/build/install your dependencies
[19:30:28] *** Joins: jophish (~jophish@2001:470:69fc:105::670)
[19:30:29] <EvanR> yeah so cabal install some-cool-game... then run the game. Maybe. Hopefully they release an actual package at some point xD
[19:30:32] <sclv> if it weren't even more confusing, arguably we would rename the "cabal-install" tool to "cabal-build" or "cabal-exe" or the like :P
[19:31:16] *** Parts: jophish (~jophish@2001:470:69fc:105::670) ()
[19:31:30] <sclv> the reason it makes sense is that if you're working on a few different haskell projects, each of which has nontrivial transitive deps, the odds that there will be at least one lib solved for with different versions in each project go up very quickly
[19:31:31] *** Joins: fef (~thedawn@user/thedawn)
[19:31:40] <sclv> especially if one of the projects you're working on is an older codebase than the other
[19:32:03] <johnjaye> i guess this is similar to python's venv?
[19:32:13] <sclv> right, its a fancier vrsion of that
[19:32:23] <EvanR> haskellenv xD
[19:32:35] <johnjaye> to be fair nix is based on the premise of having any version of any lib you need
[19:32:48] <johnjaye> which is still insane to me but managed insanity seems to be part of OS stuff these days
[19:32:53] <sclv> indeed. we call the new v2- style "nix-like" often and it was inspired by it
[19:33:08] <sclv> it uses a similar hashed chain of deps to uniquely identify each package
[19:33:24] <EvanR> if everyone in the world used 1 version of every library everywhere... that would be insane xD
[19:34:08] <johnjaye> imagine if ordering a drink at kfc you said i want lemonade. and the clerk responded, ok, first we have to establish the definition of lemonade to proceed.
[19:34:15] <sclv> if you accept the premise that deps will have lower bounds (people want to use new features) and deps will have upper bounds (sometimes breaking changes are made) then there's really no way around this
[19:34:40] <johnjaye> sclv: ah that makes sense. people are greedy and want to use the latest features always
[19:34:43] <EvanR> are you drinking lemonade or developing a brand new lemonade chemical concoction and have all this lab equipment lying around
[19:34:44] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[19:34:55] <sclv> even if they only wanted to use new features rarely it would happen
[19:34:55] *** Quits: kacper (~kacper@kwlan13.uoks.uj.edu.pl) (Quit: Client closed)
[19:35:00] *** Joins: vglfr (~vglfr@46.96.161.71)
[19:35:38] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 250 seconds)
[19:35:59] <johnjaye> that would be the most philosophical chain restaurant ever. Socratic Fried Chicken
[19:36:24] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:c21f:deb4:93f3:3ef9) (Quit: WeeChat 2.8)
[19:36:27] <EvanR> btw I am work in a cabal project right now which doesn't specify any of the dep versions
[19:36:29] <janus> Hecate: i saw you said you have initiated package takeover for basement, memory or cryptonite. where can find more details on your application?
[19:36:30] <EvanR> working
[19:36:33] <johnjaye> "Before you can eat your fries, we have to ask: What is the best system of fries for a city-state?"
[19:36:49] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:36:49] <EvanR> which is probably bad, but it contradicts what you're saying johnjaye 
[19:37:29] <EvanR> my cabal file just lists what libs I want, and I it works
[19:37:37] <EvanR> for now
[19:38:05] <EvanR> I can also use cabal repl -b lib1 -b lib2 to try shit out
[19:38:13] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Remote host closed the connection)
[19:38:13] <EvanR> with no file
[19:38:25] <merijn> EvanR: cabal has a (poorly documented) repl mode too :p
[19:38:52] <merijn> EvanR: Where you embed the cabal file info in a comments inside a haskell file and it will use runhaskell with the right dependencies available :p
[19:39:05] <EvanR> cabal script?
[19:39:27] <EvanR> didn't think that worked as a repl
[19:39:46] <merijn> eh, script mode, yes
[19:39:49] <merijn> I have the dumbs
[19:40:26] *** red-snail is now known as red-snail1
[19:40:28] *** red-snail1 is now known as red-snail
[19:41:01] *** Joins: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net)
[19:41:09] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[19:42:34] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[19:44:12] *** Quits: slack1256 (~slack1256@191.126.99.83) (Remote host closed the connection)
[19:45:54] *** Joins: val-host_ (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738)
[19:46:02] *** Quits: val-host_ (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738) (Remote host closed the connection)
[19:46:17] *** Joins: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738)
[19:47:18] *** Quits: val-host (~val-host@2a02:2f0f:9108:b00:6891:37fc:a7bd:3738) (Client Quit)
[19:48:56] *** Quits: mbuf (~Shakthi@122.174.222.201) (Quit: Leaving)
[19:49:39] *** Joins: Techcable (~Techcable@168.235.93.147)
[19:49:52] *** Quits: phma (phma@2001:5b0:2143:8b68:2dec:594f:a26e:5c25) (Read error: Connection reset by peer)
[19:51:49] *** Joins: phma (~phma@host-67-44-209-85.hnremote.net)
[19:54:33] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:54:40] *** Joins: yangby (~secret@115.199.105.217)
[19:55:08] *** Quits: xff0x (~xff0x@2001:1a81:5213:d00:a0e3:bed3:6536:d79e) (Ping timeout: 250 seconds)
[19:55:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[19:55:58] *** Joins: xff0x (~xff0x@2001:1a81:5213:d00:aaa3:1c56:33b0:7a9e)
[19:56:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:56:28] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Client Quit)
[19:56:47] *** Quits: yangby (~secret@115.199.105.217) (Client Quit)
[19:57:45] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[19:58:28] *** Joins: yangby (~secret@115.199.105.217)
[20:00:05] *** Quits: yangby (~secret@115.199.105.217) (Client Quit)
[20:00:10] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:01:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:03:06] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:06:35] *** Joins: cyphase (~cyphase@user/cyphase)
[20:07:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Client Quit)
[20:09:55] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:10:49] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:189c:6a92:5958:80be) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:10:58] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[20:13:00] *** Joins: cstml[m] (~cstmlmatr@2001:470:69fc:105::1:5c07)
[20:14:51] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:14:51] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:14:51] *** Joins: wroathe (~wroathe@user/wroathe)
[20:15:04] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 250 seconds)
[20:18:57] *** Joins: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de)
[20:19:23] *** Joins: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl)
[20:19:57] *** Quits: jespada (~jespada@87.74.36.188) (Ping timeout: 240 seconds)
[20:20:59] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 256 seconds)
[20:21:57] *** Quits: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk) (Ping timeout: 256 seconds)
[20:21:59] *** Joins: jespada (~jespada@87.74.36.188)
[20:23:17] *** Quits: wre^ (~wre@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[20:23:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[20:24:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:25:24] *** Joins: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:28:20] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[20:29:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[20:32:43] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:32:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:32:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:32:57] *** Joins: wroathe (~wroathe@user/wroathe)
[20:36:07] *** Quits: ubert (~Thunderbi@p200300ecdf0994878c88f9c813554c3f.dip0.t-ipconnect.de) (Remote host closed the connection)
[20:37:28] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[20:37:33] *** Quits: shapr (~user@2601:7c0:c37c:46d0:2b64:ce79:8ca:be50) (Remote host closed the connection)
[20:40:20] *** Quits: wroathe (~wroathe@user/wroathe) (Quit: leaving)
[20:40:33] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[20:40:33] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[20:40:33] *** Joins: wroathe (~wroathe@user/wroathe)
[20:43:17] *** Quits: nschoe (~quassel@2a01:e0a:8e:a190:42f9:717:c87c:61ed) (Ping timeout: 240 seconds)
[20:45:41] *** Joins: Akiva (~Akiva@user/Akiva)
[20:49:33] *** Joins: Sgeo_ (~Sgeo@user/sgeo)
[20:50:12] *** Joins: burnsidesLlama (~burnsides@dhcp168-031.wadham.ox.ac.uk)
[20:51:03] *** Joins: Tuplanolla (~Tuplanoll@91-159-68-166.elisa-laajakaista.fi)
[20:51:17] *** Quits: hgolden_ (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Ping timeout: 240 seconds)
[20:52:09] *** Quits: Sgeo (~Sgeo@user/sgeo) (Ping timeout: 256 seconds)
[20:54:13] *** Joins: shapr (~user@2601:7c0:c37c:46d0:fa29:61d1:1155:8385)
[20:54:24] *** Joins: vicfred (~vicfred@user/vicfred)
[20:57:17] <Inst> do you guys know of any good alternatives to System.IO?
[20:58:00] <EvanR> Data.ByteString I/O ?
[20:58:19] <geekosaur> define "good alternatives"
[20:58:32] <geekosaur> I mean, there's things like conduit
[20:58:57] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Ping timeout: 256 seconds)
[20:59:45] *** Joins: tanners (~tanners@2600:1003:b127:bfd4:fcb8:9a4c:c23:f972)
[21:01:25] <Taneb> What are you trying to do with it, and why aren't you happy with it?
[21:02:46] <Inst> i just want to use a more "modern" alternative to System.IO
[21:03:10] *** Quits: schuelermine (~schuelerm@user/schuelermine) (Read error: Connection reset by peer)
[21:03:15] *** Joins: anselmschueler (~schuelerm@user/schuelermine)
[21:03:50] <sshine> Inst, depending on what parts of it you mean, there's RIO: https://hackage.haskell.org/package/rio
[21:04:22] <Inst> i've installed Z-Io
[21:04:27] *** Quits: jumper149 (~jumper149@base.felixspringer.xyz) (Ping timeout: 256 seconds)
[21:05:34] <EvanR> you should strive to have as little of your program in IO as possible
[21:05:35] *** Quits: shriekingnoise (~shrieking@181.229.0.83) (Ping timeout: 256 seconds)
[21:05:35] *** Joins: jumper149 (~jumper149@base.felixspringer.xyz)
[21:06:23] <EvanR> in which case the choice of System API matters less xD
[21:06:44] <sshine> Inst, I'm pretty happy with Data.Text.IO for Unicode file I/O.
[21:07:25] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[21:07:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[21:07:55] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[21:08:14] *** Joins: kmein (~weechat@user/kmein)
[21:08:24] <Inst> "with the understanding that IO will make up large parts of your program anyways"
[21:09:01] <geekosaur> that depends on what you are doing. also what are you quoting?
[21:09:02] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:189c:6a92:5958:80be)
[21:09:40] <Inst> when i was talking to others, they seemed to agree that the majority of your program would be in IO-land, i.e, file access, file reading, file writing would be IO-ed
[21:09:50] <EvanR> that doesn't sound right
[21:09:50] <Inst> the actual computation would be in pure functions, but you'd have a lot of IO
[21:09:53] <sshine> Inst, really depends on the program.
[21:09:56] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:10:03] <Inst> i guess in their style that's what happened
[21:10:13] <EvanR> the majority part
[21:10:39] <Inst> then call a bunch of pure functions to do the data transformation, which might be in libs, etc
[21:10:42] <sshine> I would like if the 'network' package had MonadIO instances rather than direct IO.
[21:11:03] <Inst> bleh, i doubt i'll be ready
[21:11:04] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[21:11:15] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[21:11:40] <Inst> i've been putting this off forever, i have a friend who's doing python and will be out by the 23rd, idea is to start in IO-land with >>= and >> as basic syntactical units, alongside \n -> ...
[21:11:43] <EvanR> the majority of your program is IO code is the hell we escaped from before using haskell
[21:11:43] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[21:12:11] <sshine> Inst, that last sentence is a bit cryptic.
[21:13:02] <Inst> i mean depict a conventional imperative program
[21:13:04] <sshine> EvanR, well, *shrug*. maybe you're writing APIs and the business logic is a really small CRUD thing compared to simply accepting requests, passing stuff to a database, and returning responses?
[21:13:08] *** Quits: retroid_ (~retro@2e40edd9.skybroadband.com) (Ping timeout: 250 seconds)
[21:13:19] <Inst> in >>= and >>
[21:13:19] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[21:13:49] <EvanR> ok, so maybe we didn't escape from that hell 
[21:13:59] <EvanR> yet
[21:14:07] *** Joins: CiaoSen (~Jura@p200300c95737a2002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[21:14:14] <Inst> maybe better IO libs can help
[21:14:28] *** Joins: gensyst (gensyst@user/gensyst)
[21:14:41] <gensyst> Why is GHCJS such a beast (huge size and painful to setup and "therefore Nix") but PureScript is not?
[21:14:43] *** Quits: random__ (~random@185.219.68.251) (Remote host closed the connection)
[21:14:48] <gensyst> Both are compiling to JavaScript!
[21:14:58] <EvanR> GHC is a beast
[21:15:06] *** Joins: random__ (~random@185.219.68.251)
[21:15:10] *** Quits: Erutuon (~Erutuon@user/erutuon) (Quit: WeeChat 2.8)
[21:15:18] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:15:24] <Inst> the natural question will be "why are we using >>= and >> instead of just a return key?"
[21:15:34] <sshine> what's a return key?
[21:15:39] <EvanR> Enter
[21:15:56] <EvanR> I have the same question, why don't you start with do notation IO
[21:15:57] <sshine> do-notation does just that? :)
[21:16:23] <Inst> EvanR: because then it's an easier introduction to Haskell types, the notion of computing as a lambda calculus, and FAM
[21:16:27] <EvanR> monads don't really add anything to the understanding of IO
[21:16:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:16:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:16:28] *** Joins: wroathe (~wroathe@user/wroathe)
[21:16:35] *** Quits: Jing_ (~hedgehog@240e:390:7c53:a7e1:dddb:2811:79d2:379) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:16:46] <EvanR> if you want to introduced computation with lambdas, then don't use IO
[21:16:49] <geekosaur> and my answer would be "so you understand what's going on underneath and don't get nasty surprises later because of incorrect assumptions""
[21:17:07] <Inst> i'm convinced that Monads can be taught almost day one
[21:17:10] <EvanR> starting from IO just seems backwards
[21:17:20] <Inst> to conventional Haskell teaching, yes, and that's the point
[21:17:23] <gensyst> EvanR ok but why the need for GHCJS? Why can't we just write Haskell somehow, compile it into JavaScript - just like PureSCript is doing?
[21:17:24] <EvanR> teach lambda calculus, teach functional programming, teach monads... but IO?
[21:17:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:17:31] <gensyst> I don't quite GET it
[21:17:51] <Cale> Inst: The thing is, you need to know at least a handful of examples of monads before it makes sense to introduce an abstraction to capture the common pattern
[21:17:53] <geekosaur> http://blog.sigfpe.com/2006/08/you-could-have-invented-monads-and.html
[21:17:54] *** Joins: Erutuon (~Erutuon@user/erutuon)
[21:18:09] <geekosaur> gensyst, that's what ghcjs does
[21:18:38] <geekosaur> it's just that a javascript backend turns out to be fairly complex from an implementation standpoint
[21:18:59] <sshine> gensyst, you could maybe have a JS back-end for GHC that didn't live in its own fork of GHC. but then again, Asterius, the Haskell-to-WASM compiler, is also a fork.
[21:19:10] <Inst> i have this problem wherein every new advanced concept i meet that stumps me, i decide is the most important and therefore is worth teaching first
[21:19:13] <geekosaur> there are almost-haskells that do "better" but don't behave the same way because of fundamental differences between how haskell and javascript do things. see elm
[21:19:37] <Inst> FP I get, IO in Haskell, at least to me, seems to be undertaught
[21:20:04] <Cale> I'd be somewhat surprised, but I guess it depends on what resources you're using to learn..
[21:20:13] <sshine> Inst, in FP, if you start with "functions", you'll eventually get around to most concepts, since most things are made with functions. :)
[21:20:22] <Inst> i mean for an experienced programmer you have an idea of how to handle IO
[21:20:30] <Inst> IO already has a very easy branch into functions, i.e, if'
[21:20:39] <EvanR> yes so you get functions, so why are you planning to each people stuff you don't get
[21:20:49] <EvanR> what if they don't get functions
[21:20:52] <Inst> to give me an incentive to learn it
[21:21:22] <EvanR> e.g. the first thing you say is "here is >>= and monads" and they're like... wtf, what is \
[21:21:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[21:21:23] <gensyst> geekosaur sshine EvanR, From what I know, GHCJS compiles into a separate .js file, with code not really interoperaable with other parts (other JS) of the <html></html> However PureScript is interoperable.
[21:21:25] <gensyst> Why?
[21:21:31] <gensyst> Some really fundamental differences!
[21:21:39] <gensyst> Someone needs to write a beginner tutorial on this!
[21:21:48] <Inst> EvanR: the first thing I say is this is how we do this C program in Haskell using binds and thens
[21:21:50] <gensyst> On how all these pieces fit together
[21:21:59] <EvanR> "I'm starting with >>= and monads because that's what I was interested in last night"
[21:22:16] <EvanR> people confuse
[21:22:33] <Inst> no, but psychologically, and sociologically, let's say someone gets monads lesson 2 or week 2
[21:22:42] <Inst> isn't the rest of Haskell just easy peasy then?
[21:22:52] <geekosaur> no?
[21:23:18] <Inst> i'm the type of person who found recursion easy, though, so...
[21:23:19] <sprout_> you can make anything as complex as you want
[21:23:19] <Cale> Monad is a very simple abstraction, and it is not a big deal in the grand scheme of things
[21:23:27] <Inst> but socially, it's a form of gatekeeping
[21:23:28] <geekosaur> gensyst, for one, memory management works completely differently. then you have things like the concurrency primitives (MVars, STM, …)
[21:23:34] <Inst> it's almost deliberately badly taught
[21:23:35] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:23:48] <EvanR> "wth is \ and recursion" "sorry, I find that easy, we won't be explaining it!"
[21:24:02] <geekosaur> in effect your one .js file contains a whole Haskell runtime along with your program, and the parts that need the Haskell runtime won't play well with the raw JS backend
[21:24:16] <geekosaur> this is also why we don't have a JVM backend
[21:24:30] <geekosaur> or a CLR/Mono backend
[21:24:46] <dolio> Well, there was one of those, too, but it was another fork instead of being rolled back into GHC.
[21:24:55] <EvanR> Inst, that sounds like conspiratorial thinking. Unintentionally badly taught, well, 
[21:25:24] <sshine> is that mainly non-strictness that makes Haskell back-ends hard to make in arbitrary VMs?
[21:25:24] <Inst> recursion iirc is a meme
[21:25:29] <Inst> as in a good sense, not a bad sense
[21:25:48] <Inst> "i heard you wanted some bling in your bling, so I gave you some bling in your bling in your bling"
[21:25:54] <Inst> the no u recursive meme is also there
[21:26:14] <Cale> Inst: I disagree, it's just a strange kind of thing to abstract over, since (1) many programming languages don't have type constructors and (2) most languages don't have a way to abstract over type constructors, and (3) this pattern is very deeply a functional one, so if you haven't done much functional programming before, you're unlikely to have seen instances of the pattern we're generalising over.
[21:26:39] <dolio> sshine: JavaScript functions aren't curried by default, either.
[21:26:50] <gensyst> geekosaur, ok. sound more suited for ppl who want to write single-page web "apps" (JS required) instead of websites (which mostly work fine without JS (with some features missing))
[21:26:55] <Cale> Inst: So if you haven't had the opportunity to see many examples of monads before, Monad will seem sort of crazy.
[21:27:01] <Inst> Cale: to get an actually good monad tutorial, you need like 10 lessons
[21:27:14] <gensyst> geekosaur, PureScript sounds like a great balance for no JS required websites.
[21:27:18] <Inst> the idea is just to intro the concept, get someone used to using >>= to manipulate type constructors (once they're introduced to the concept)
[21:27:19] <geekosaur> you can do whole websites in ghcjs, you just have to use ghcjs libs
[21:27:22] <dolio> So you need some kind of system to keep track of partial applications and such.
[21:27:28] <Cale> Inst: You just need enough specific examples of monads, like IO and lists, and especially parsers
[21:27:29] <geekosaur> purescript, elm, etc. are better for interop
[21:27:33] <sshine> dolio, does that impact performance, or is it just tedious management?
[21:27:49] *** Joins: neverfindme (~hayden@158.123.160.43)
[21:27:57] <maerwald> list monad confuse most people
[21:28:01] <EvanR> please don't write a 10 lesson monad tutorial
[21:28:26] <sshine> Monads for Dummies
[21:28:28] <Inst> maybe I don't get monads? They're just a typeclass that implements >>=, whose only purpose is to join type constructors of the same monadic type?
[21:28:32] *** Quits: neverfindme (~hayden@158.123.160.43) (Remote host closed the connection)
[21:28:34] <EvanR> Functors for Dummies
[21:28:44] <EvanR> actually that might be interesting
[21:28:44] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:28:46] <Inst> and for chaining
[21:28:48] <gensyst> geekosaur, yeah. thanks!
[21:28:56] <Inst> monadic chaining, function of type a-> m a
[21:29:18] <Cale> Inst: That isn't a precise enough explanation to correctly write the Monad class...
[21:29:19] <Inst> stops it from creating arbitrarily high stacks of m
[21:29:31] <dminuoso> Inst: No that kind of misses the point.
[21:29:33] <Inst> return is already in applicative
[21:29:35] <sshine> Inst, as far as I understand, monads are just monoids in the category of endofunctors?
[21:29:48] <Cale> sshine: Now *that's* unhelpful :)
[21:29:53] <geekosaur> ^
[21:29:57] <EvanR> haven't seen that one in a while
[21:30:00] <Inst> >> is defined as *> these days, iirc
[21:30:00] <dminuoso> Inst: The crux is that is captures a repeating pattern that is hard to see.
[21:30:16] <Inst> i mean i came in from experience with Maybe monadic type
[21:30:18] <Cale> Inst: Yeah, though honestly, I feel like Applicative is a distraction.
[21:30:19] <dolio> sshine: You could compile Haskell functions to curried JS functions, but then you'd need to be able to talk about uncurried JS functions somehow, and possibly produce them from Haskell.
[21:30:29] <sshine> EvanR, I felt like it was time to repeat it, considering "monads are just ..." popped up on my screen. :-P
[21:30:33] <dminuoso> Inst: The crucial part is: that pattern is not relevant to most users of Monad.
[21:30:38] <dminuoso> It's sort of like:
[21:30:38] <Cale> Inst: You can and probably should understand Monad before understanding Applicative
[21:30:40] *** Joins: econo (uid147250@user/econo)
[21:30:53] <EvanR> "_ is just a _" red alert shields up xD
[21:30:54] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 250 seconds)
[21:31:02] <Inst> it's a deliberate meme
[21:31:08] <Cale> Applicative is more abstract, so if you don't get what Monad is about, Applicative tries to capture an even wider range of situations.
[21:31:08] <Inst> there's sarcasm inherent in the phrase
[21:31:31] <maerwald> Applicative is also less powerful, so I prefer to start with the less powerful concepts
[21:31:41] <EvanR> Functor
[21:31:41] <sshine> EvanR, yes. I generally never use the word "just" in mathematics. :) (also not "obvious" and "trivial".)
[21:31:44] <Inst> yeah tbh if i had gotten stuck on Haskell last time at Monads, instead of Recursion
[21:31:45] <geekosaur> sarcasm doesn't transmit well over the internet
[21:31:50] <geekosaur> see monochrom last night
[21:31:56] <dminuoso> Inst: You dont need an algebra course and study ring theory in order to understand how to multiply and add numbers, right?
[21:32:06] <Inst> i'd probably be of the type that doesn't want to teach monads because they seem trivial
[21:32:18] <dolio> Applicative isn't really more abstract. It's more general.
[21:32:22] <sshine> EvanR, (well, "trivial" can mean something like "base case", that's okay, but maybe a bit unobvious.)
[21:32:29] <dminuoso> Inst: And yet ring theory captures that pattern, because as it happens, there's other things that have the same shape/laws as adding and multiplying numbers. That doesnt make adding or multiplying numbers itself any harder.
[21:32:31] <Inst> applicative iirc is just fmap that works for multiple arguments to a function
[21:32:38] <Cale> dolio: Fair, "more general" is a better way of saying what I meant :)
[21:32:47] <EvanR> applicative can have effects, while fmap can't
[21:32:58] <geekosaur> also see poe's law
[21:33:08] <dminuoso> Inst: Does that make any sense to you?
[21:33:30] <Cale> dminuoso: That's only going to make any sense if Inst knows what a ring is
[21:33:53] <dminuoso> Cale: Mmm, that's actually a surprisingly good point.
[21:34:03] <dminuoso> Bummer, it's such a lovely analogy.
[21:34:06] <Inst> beyond the simple notion of being some  algebraic structure in some abstract algebra
[21:34:13] <dminuoso> Inst: that's enough.
[21:34:56] *** Quits: benin (~benin@183.82.30.17) (Quit: The Lounge - https://thelounge.chat)
[21:34:59] <sshine> I thought a ring is an algebra.
[21:35:17] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 240 seconds)
[21:35:29] <Cale> Inst: Yeah, it's an abstraction where you have a somewhat-arbitrary set of things together with addition and multiplication operations that to some extent have similar properties to the addition and multiplication of numbers that you're familiar with.
[21:35:32] <Inst> i'm trying to figure out a case where the pure f <*> arg1 <*> arg 2 set-up can create effects
[21:35:52] <Inst> probably something with IO types
[21:35:57] <[itchyjunk]> I think i should be able to define more than one thing after where, right?
[21:35:58] <EvanR> IO, Maybe, etc
[21:35:59] <Cale> Sure, if you want IO effects
[21:36:04] <[itchyjunk]> where left = blah right = blah
[21:36:05] <EvanR> Either e
[21:36:13] <Inst> should I consider dropping something into Nothing as an effect?
[21:36:23] <Inst> itchyjunk:
[21:36:28] <Inst> define one thing, type enter
[21:36:29] <dminuoso> Inst: Did you have simple linear algebra (vectors) in school?
[21:36:29] <Cale> You could consider "the ability to fail" as an effect
[21:36:31] <Inst> align the lines
[21:36:41] <EvanR> the effect of Maybe is to Nothing early
[21:36:58] <Inst> that's an effect that could disrupt the rest of the chain of calculations, nice
[21:36:58] *** Quits: cstml (~cstml@user/cstml) (Ping timeout: 250 seconds)
[21:37:03] <Inst> my haskell theoretical education is shit
[21:37:04] <EvanR> yes
[21:38:30] <Inst> where IamaCat = cat
[21:38:32] <EvanR> State s is also Applicative
[21:38:41] <Inst>       Iamalsoacat = alsoCat
[21:38:42] <EvanR> where the effects are maybe more obvious
[21:38:48] <Inst> @[itchyjunk]
[21:38:48] <lambdabot> Unknown command, try @list
[21:38:51] *** Joins: mikoto-chan (~mikoto-ch@194.157.16.89)
[21:38:57] <sshine> @list
[21:38:57] <lambdabot> What module?  Try @listmodules for some ideas.
[21:39:07] <sshine> @list [itchyjunk]
[21:39:07] <lambdabot> No module "[itchyjunk]" loaded
[21:39:11] *** Quits: anselmschueler (~schuelerm@user/schuelermine) (Ping timeout: 256 seconds)
[21:39:23] <[itchyjunk]> Inst, i needed to define "left" and "right"
[21:39:29] <dminuoso> Inst: The key take away is: we can generalize this act of being able to "add" and "multiply" and call it "Ring". The word `ring` has no real meaning in its english sense, so dont even try to infer any intuition from the name itself.
[21:39:34] <[itchyjunk]> where left = blah right = blah ? no , between them or anything?
[21:39:53] <Inst> are you doing Haskell from the very Beginning?
[21:40:13] *** Joins: retroid_ (~retro@2e40edd9.skybroadband.com)
[21:40:15] <[itchyjunk]> Hmm, i am doing random stuff i think :<
[21:40:24] <monochrom> And now I am ready to disrupt your conversation and announce my explanation of parametric polymorphism! http://www.vex.net/~trebla/haskell/abs-type-param.html
[21:40:26] <Inst> there's a problem like that, wherein you want to have a fmap that takes a result and maps it to Either based on success
[21:40:54] <geekosaur> at some point you'll want to go from doing random exercises to something more structured, since earlier lessons will be necessary to understand later ones
[21:40:57] <Inst> ([l],[r]) = function, iirc
[21:41:09] <Inst> then you define base case as ([],[])
[21:41:10] <EvanR> partition
[21:41:24] <EvanR> :t partition
[21:41:25] <lambdabot> (a -> Bool) -> [a] -> ([a], [a])
[21:41:32] <geekosaur> :t partitionEithers
[21:41:33] <lambdabot> [Either a b] -> ([a], [b])
[21:41:43] <EvanR> oops
[21:42:14] <dminuoso> I recently have so many partitioning wishes and use cases..
[21:42:20] <Inst> also, thanks EvanR
[21:42:30] <dminuoso> Is there something generic to help partition arbitrary sum types?
[21:42:31] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[21:42:31] <Inst> I realized I need to have a strong understanding of what an effect is beyond simply IO
[21:42:42] <dminuoso> Inst: No, that's misleading.
[21:42:46] <dminuoso> And it wont help probably
[21:42:58] <Inst> or disrupting a calculation by changing shared variables
[21:43:07] <dminuoso> This whole notion of effect is not the basis for understanding, it's the *result* of it.
[21:43:23] *** Joins: little_mac (~little_ma@2601:410:4300:3ce0:a09c:720a:f4a0:1ac1)
[21:43:48] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[21:43:51] <EvanR> changing shared "variables"... sounds like State only
[21:44:06] *** Joins: kmein (~weechat@user/kmein)
[21:44:30] <EvanR> a special case
[21:45:12] <EvanR> that's the thing about abstractions, it's hard to get the point across that some example isn't the case in general
[21:45:12] <dminuoso> Inst: To explain why this is: So Monad captures a particular pattern, that pattern is soley expressible in `>>=` and its laws. But just like QM is perfectly described by its maths, humans have an innate desire for visualization and rationalization guides, which is how QM interpretations arise.
[21:45:30] <dminuoso> But none of these QM interpretations will help you learn QM in the slightest. Arguably they are completely in the way.
[21:46:02] <dminuoso> They are what happens after you fully understand quantum mechanics, a sort of result of trying to incorporate your understanding with your belief system
[21:46:28] <EvanR> and this is how we get the quantum mechanics monad
[21:46:33] <dminuoso> It's the same with Haskellers and "effect". It's just an attempt of incorporating some innate understanding of Monad with how we think
[21:46:44] <Cale> dminuoso: If I'm being generous, I'd say Inst is right about needing a stronger understanding of what effects are, insofar as that means learning more examples of monads :)
[21:47:24] <dminuoso> Cale: Perhaps yeah.
[21:47:40] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Remote host closed the connection)
[21:48:07] <Cale> But yeah, the key is not to get too focused on the word "effect", and just pick up actual examples. Learn a parsing monad, learn all the basic examples of monads, learn IO specifically, maybe STM or something would be fun also.
[21:48:41] <Cale> By "basic examples" I mean things like Maybe, lists, Reader, Writer and State
[21:49:12] *** Joins: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net)
[21:49:19] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[21:49:23] <Cale> Then once you have all these examples, you'll begin to see what they actually have in common and what they don't.
[21:49:40] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[21:49:49] <dminuoso> And if you dont, just keep using them for months or years.
[21:50:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:50:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:50:17] *** Joins: wroathe (~wroathe@user/wroathe)
[21:50:50] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:189c:6a92:5958:80be) (Ping timeout: 250 seconds)
[21:55:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:56:41] *** Quits: gensyst (gensyst@user/gensyst) (Quit: Leaving)
[21:57:46] *** Quits: MajorBiscuit (~MajorBisc@c-001-009-026.client.tudelft.eduvpn.nl) (Ping timeout: 250 seconds)
[21:57:53] *** Quits: vglfr (~vglfr@46.96.161.71) (Ping timeout: 256 seconds)
[21:59:02] *** Quits: michalz (~michalz@185.246.204.97) (Remote host closed the connection)
[21:59:25] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:06:23] *** Quits: Constraintegic (~DundiDund@ppp-212-114-229-72.dynamic.mnet-online.de) (Ping timeout: 256 seconds)
[22:07:12] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[22:08:44] <Inst> [], IO, Maybe, Either
[22:08:49] <Inst> () I haven't actually seen its monadic definition
[22:09:18] <EvanR> pure 'c' :: () -- type error
[22:09:23] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[22:09:26] <Inst> well, (a,b)
[22:09:40] <EvanR> similar
[22:10:08] <Inst> data (,) a b
[22:10:13] <EvanR> pure 'c' :: (a,Char) -- where did you get an `a'
[22:10:27] <sprout_> you either want sequencing or function composition which allows you to compute modulo,  or within,  some other theory.  it isn't that hard
[22:10:38] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:10:39] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:10:39] *** Joins: wroathe (~wroathe@user/wroathe)
[22:10:56] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:11:09] *** Joins: deadmarshal (~deadmarsh@95.38.231.124)
[22:11:31] <EvanR> if you modify the type a bit, you can arrange to get an `a' and you have either Reader or State
[22:12:03] <Inst> interesting fmap definition
[22:12:05] <Inst> instance Functor ((,) a) where
[22:12:05] <Inst>     fmap f (x,y) = (x, f y)
[22:12:16] <EvanR> tuple is a Functor but not a Monad
[22:12:30] *** Quits: dut (~dut@user/dut) (Ping timeout: 250 seconds)
[22:12:34] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[22:12:57] <Inst> instance Monoid a => Monad ((,) a) -- Defined in `GHC.Base'
[22:12:59] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:13:21] *** Joins: Guest80 (~Guest80@188.131.26.124)
[22:13:21] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Read error: Connection reset by peer)
[22:13:21] <EvanR> that's where you can get an `a'
[22:13:28] <Inst> a monad when a is a monoid
[22:13:42] <EvanR> that's basically Writer
[22:14:21] <EvanR> if you do something else you get State
[22:14:35] <EvanR> and it doesn't require Monoid
[22:15:32] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[22:15:42] <Inst> reading more random monad explanations
[22:16:40] <EvanR> the first monad tutorial I read way back when was like, look State, look RNG, look []
[22:16:51] <Inst> in a way it feels like the parable of the blind men trying to describe an elephant, tbh
[22:16:55] <EvanR> not a great variety of examples, I was confused xD
[22:17:17] <Inst> unfortunately, in that parable, you never had the blind mathematician who simply said "an elephant exists"
[22:17:50] <Inst> for instance, Monad's problem is that in Haskell it refers to two different things, one of which is arguably an incorrect use
[22:18:01] <Inst> the typeclass, and a type that can be instanced into monad
[22:18:10] <Inst> the types can be very varied, as well as have very varied instance
[22:18:22] <Inst> hence the blind men (this is an example of a monad)
[22:18:28] <EvanR> is that it... I can think of maybe 10 parts of speech where monad is used
[22:18:37] *** Quits: tanners (~tanners@2600:1003:b127:bfd4:fcb8:9a4c:c23:f972) (Ping timeout: 240 seconds)
[22:18:43] <Inst> monad to refer to category theory, as a synonym for unitary
[22:18:49] <EvanR> o_O
[22:18:58] *** Joins: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net)
[22:18:58] <Inst> leibniz monad, spinoza apparently had a monad himself
[22:18:58] <geekosaur> actually not
[22:19:03] *** Quits: tanners (~tanners@pool-71-127-59-41.washdc.fios.verizon.net) (Client Quit)
[22:19:08] <geekosaur> @quote MacLane
[22:19:08] <lambdabot> geekosaur says: so fwiw it looks like [Mac Lane] introduced it in _Categories for the Working Mathematician_, and his terminology note doesn't explain why he picked "monad", but perhaps can be
[22:19:08] <lambdabot> understood to imply a sort of cross between "monoid" and "triad". (p.138 at http://www.maths.ed.ac.uk/~aar/papers/maclanecat.pdf)
[22:19:35] <EvanR> unitarity being the higher dimensional complex version of orthogonality?
[22:19:44] <Inst> oh, spinoza has a different term, not a monad
[22:19:58] <Inst> that should have been a semicolon, not a comma
[22:20:19] <Inst> 1a: UNIT, ONE
[22:20:29] <Inst> https://www.merriam-webster.com/dictionary/monad
[22:20:45] <EvanR> no monads don't seem to have to do with unitness or oneness
[22:21:05] *** Quits: Unhammer (~Unhammer@user/unhammer) (Read error: Connection reset by peer)
[22:21:13] <EvanR> despite the apparent root similarity
[22:21:20] <Inst> i mean i'm against monad mysticism, SPJ even admitted it was a horrible branding mistake
[22:21:44] <EvanR> agreed
[22:21:58] <EvanR> many words wouldn't been saved on the confusion
[22:22:04] <EvanR> er wouldve
[22:23:27] <EvanR> class ApplicativeMappable f => Flattenable f where join :: f (f a) -> f a
[22:23:35] <[itchyjunk]> https://bpa.st/34JQ
[22:23:43] <[itchyjunk]> I am still getting an error for using where it seems
[22:23:44] <geekosaur> FlatMap
[22:23:49] <[itchyjunk]> i have it indented correctly 
[22:24:01] <geekosaur> no you don't
[22:24:02] <dsal> [itchyjunk]: that indentation looks really weird to me.
[22:24:06] <[itchyjunk]> :<
[22:24:09] *** Joins: vglfr (~vglfr@46.96.161.71)
[22:24:10] <geekosaur> rather, the where itself is but the line after is not
[22:24:25] <[itchyjunk]> both starts 1 tab in
[22:24:35] <Inst> https://cdn.discordapp.com/attachments/528863657363505159/931259915882868806/unknown.png
[22:24:44] <geekosaur> you need to indent the start of the next line to the start of the variable on the loine with the where
[22:25:11] <monochrom> "right =" should be aligned with "left ="
[22:25:29] *** Joins: notzmv (~zmv@user/notzmv)
[22:25:40] <EvanR> > join ["warm","fuzzy","thing"] -- *monads* </aliensmeme>
[22:25:41] <lambdabot>  "warmfuzzything"
[22:26:02] <monochrom> If you allow yourself to put "where" on its own line and try not to merge it with anything, you will find that you need less indentation.
[22:26:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:26:35] <Inst> it's just a typeclass, as well as a name for a class of very different types that can be instanced into this typeclass
[22:26:40] <Inst> hence why it's such a disaster
[22:26:43] <EvanR> with laws
[22:26:47] <[itchyjunk]> i think i fixed it.
[22:26:48] <EvanR> as good typeclasses have
[22:26:49] <Inst> yeah
[22:26:51] *** Quits: kuribas (~user@ptr-25vy0i9uvgk6lbwz9nb.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:27:00] <[itchyjunk]> Creating my tree is such a hassle. But i think i tested it and it works
[22:27:07] <[itchyjunk]> is there an easier way to check?
[22:27:16] <[itchyjunk]> myTree = Node 1 (Node 2 (Node 3 Nil Nil) (Node 4 Nil Nil)) (Node 5 Nil Nil)
[22:27:23] <[itchyjunk]> myTreeDepth myTree
[22:27:23] <[itchyjunk]> 3
[22:27:26] <Inst> totally feel like you're doing Haskell from the Very Beginning
[22:27:38] <Inst> chapter 7 or 8, or somewhere, splitEither function shows up
[22:27:39] <[itchyjunk]> http://sketchtoy.com/70395626
[22:27:42] <monochrom> We only know of harder ways to check, but the harder ways check way more things, we think it's worth it.
[22:27:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:27:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:27:44] *** Joins: wroathe (~wroathe@user/wroathe)
[22:27:45] <Inst> Chapter 11, iirc, my binary tree
[22:27:46] <[itchyjunk]> i drew my tree and it makes sense
[22:27:59] <monochrom> Namely, we have a library for randomized testing...
[22:28:06] <EvanR> hah sketchtoy is cool
[22:28:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[22:28:38] <[itchyjunk]> since i drew sketchtoy, my code must be right, right?
[22:29:13] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:29:14] <monochrom> No, a million things could go wrong. (Not saying they do today.)
[22:29:18] <Inst> did you consider implementing a if' function yet?
[22:29:23] <Inst> also, joining the church of the latter day saints?
[22:29:29] <[itchyjunk]> can you implement that?
[22:29:35] <[itchyjunk]> that seems to baked into a language
[22:29:38] <Inst> if' a b c = if a then b else c
[22:29:54] <[itchyjunk]> hmm 
[22:29:55] <monochrom> "Does Node 1 (Node 2 (Node 3 Nil Nil) (Node 4 Nil Nil)) (Node 5 Nil Nil) actually correspond to the picture you draw?" would be the first breakable link.
[22:30:07] <[itchyjunk]> wait, i thought it did
[22:30:12] <dsal> :t bool
[22:30:12] <[itchyjunk]> did i draw it wrong? ;o
[22:30:13] <lambdabot> a -> a -> Bool -> a
[22:30:34] <monochrom> See, that's my point. I think you drew it right. But you never know!
[22:30:38] <geekosaur> "if a then b else c" desugars to a case
[22:30:58] <geekosaur> case is an expression, as is if…then…else
[22:30:59] <[itchyjunk]> I am atleast 10% sure it's right
[22:31:05] <monochrom> Or alternatively but equivalently the picture is right the data is wrong.
[22:31:19] <[itchyjunk]> /o\
[22:31:39] <[itchyjunk]> i double checked, it am at least twice as sure its correct
[22:32:06] <monochrom> Look up "confirmation bias".
[22:32:30] <Inst> one argument against applicative being about effects:
[22:32:32] <Inst> Identity Monad
[22:32:49] <EvanR> it's the no effect monad
[22:32:59] <EvanR> and applicative
[22:33:32] <monochrom> Haha are we going to also argue about squares not being rectangles, circles being not ellipses, 0 and 1 not being numbers...
[22:33:50] *** Joins: e3615us (~e3615us@188.131.26.124)
[22:33:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[22:33:52] <geekosaur> the reason this is useful is so things like State vs. StateT are actually the same thing (State is StateT Identity)
[22:33:56] *** Quits: Guest80 (~Guest80@188.131.26.124) (Quit: Client closed)
[22:34:03] <geekosaur> used to be they were separate
[22:34:06] <[itchyjunk]> I think someone got stabbed for claiming sqrt(2) is irrational
[22:34:29] *** Quits: Ruit (~textual@c-69-248-83-247.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:34:33] <EvanR> I guess that's the opposite problem
[22:34:36] *** Quits: zaquest (~notzaques@5.130.79.72) (Ping timeout: 250 seconds)
[22:35:26] <EvanR> sqrt(2) is irrational peg in rational hole, while Identity fits exactly
[22:36:04] *** Joins: zaquest (~notzaques@5.130.79.72)
[22:36:12] <EvanR> and surprises everyone
[22:36:20] <EvanR> named Inst
[22:36:24] <monochrom> Oh where is that PLT tumblr thing or something again? It has one about pegs, holes, and IO.
[22:36:31] *** Joins: cosimone (~user@93-47-228-11.ip115.fastwebnet.it)
[22:37:16] <Inst> the story was about golden ratio, not sqrt (2)
[22:37:35] <monochrom> This one! https://this-plt-life.tumblr.com/post/44462204757/simon-peyton-jones-adding-the-io-monad-to-haskell
[22:37:36] *** Quits: e3615us (~e3615us@188.131.26.124) (Remote host closed the connection)
[22:37:47] <EvanR> lol
[22:38:49] <Inst> what was haskell using before the IO type constructor?
[22:39:05] <monochrom> [Response] -> [Request]
[22:41:40] <geekosaur> lazy lists. easy to get out of sync
[22:44:08] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 250 seconds)
[22:44:44] <EvanR> you can use a monad to suspend and only continue when given the response from the host
[22:45:08] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[22:45:09] <EvanR> might help
[22:45:33] <EvanR> if I went back to 1990 I would rule
[22:45:35] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:46:59] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[22:48:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[22:48:15] <wmacmil> how do you fmap the aeson decode function for a ByteString with multiple json entries?
[22:49:22] *** Quits: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be) (Quit: WeeChat 3.4)
[22:49:25] *** Quits: chexum (~quassel@gateway/tor-sasl/chexum) (Remote host closed the connection)
[22:49:42] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[22:50:36] <wmacmil> like in this answer
[22:50:38] <EvanR> it's possible to get the unconsume input back from a parse
[22:50:51] <Cale> wmacmil: I don't completely understand that question. What types of things do you have/want? If you had multiple ByteStrings stored in some container of some sort, you might be able to fmap decode
[22:50:52] <EvanR> it's possible to get the unconsumed input back from a parser, and run it again on the rest
[22:50:54] <wmacmil> they only have a single entry
[22:50:55] <wmacmil> https://stackoverflow.com/questions/54233506/read-single-field-of-object-using-aeson-without-writing-a-fromjson-instance
[22:51:25] <EvanR> oh maybe I misunderstood
[22:51:29] <wmacmil> decode "{ \"foo\": \"bar\", \"baz\": 42 }\n{ \"foo\": \"freak\", \"baz\": 11112 }"
[22:51:35] <EvanR> no I didn't
[22:51:46] <Cale> ahh, hmm
[22:52:15] <EvanR> runParser in aeson returns the unconsumed rest of input, so it's possible
[22:52:25] <Cale> Yeah, you'll have to run the parser manually
[22:52:41] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[22:52:57] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[22:55:12] <wmacmil> sorry what that mean exactly, like do some kind of foldr or mapm with parseJSON?
[22:55:13] <Cale> Something like  case parse json s of Done rest o -> ... perhaps do something recursive with rest :: ByteString and the parsed o :: Value ...
[22:55:30] *** Joins: jacks- (~bc8147f2@cerf.good1.com)
[22:55:39] <Cale> Let me give it an actual try
[22:56:24] <wmacmil> cool
[22:56:34] <jacks-> hi. with aeson is it possible to parse a deeply nested json, where I'm only interested in the inner-most part, without having to create haskell data for entire parent structure?
[22:56:41] <EvanR> wmacmil, generally, it's cool if a parser has an interface like String -> Maybe (a, String), which gives you a value (if successful) and the rest of the input where the parser left off
[22:56:56] <EvanR> in this case it does, even if it's kind of low level. It saved your ass xD
[22:57:42] <Cale> λ> parse json s
[22:57:42] <Cale> Done "\n{ \"foo\": \"freak\", \"baz\": 11112 }" (Object (fromList [("baz",Number 42.0),("foo",String "bar")]))
[22:57:49] <EvanR> jacks-, the Value type is good for that
[22:58:01] <EvanR> parse into a Value then dig into that
[22:58:46] <Cale> wmacmil: and then, despite the initial \n, the json parser will parse that remaining string just fine
[22:58:57] *** Quits: shapr (~user@2601:7c0:c37c:46d0:fa29:61d1:1155:8385) (Ping timeout: 240 seconds)
[22:59:10] <jacks-> ok I'll try. another option, I guess, would be to write a custom FromJSON instance, that walks through the tree, and just returns a list of inner-most data I care about?
[22:59:21] *** Joins: themc47 (~mc47@xmonad/TheMC47)
[22:59:23] <wmacmil> thanks, Cale
[22:59:28] <EvanR> that seems like a lot more work
[22:59:37] <Cale> So, I'd probably just write the recursion by hand, but it's probably possible to express as an unfoldr if you really want
[22:59:38] <EvanR> you have to represent everything in between
[22:59:39] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Ping timeout: 256 seconds)
[22:59:39] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 256 seconds)
[23:00:00] <[itchyjunk]> working with tree is a pain.
[23:00:02] <jacks-> I see
[23:00:26] <[itchyjunk]> Hmm, unless i can create it in a txt file and just "load" it.
[23:00:37] <[itchyjunk]> How hard is IO stuff in haskell? maybe i need to learn that next :x
[23:00:42] <Cale> unfoldr (\s -> case parse json s of Done s' o -> Just (o,s'); _ -> Nothing) s
[23:00:57] <Cale> ^^ this works, though note that it silently ignores failures
[23:01:08] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[23:01:19] <Cale> So if your input is cut off or becomes invalid at some point, it will just stop there
[23:01:21] <johnjaye> [itchyjunk]: hard
[23:01:25] <[itchyjunk]> :(
[23:01:33] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 276 seconds)
[23:01:43] <Cale> It's not hard
[23:01:57] <johnjaye> but it kind of has to be. a conceptual model of programming like OO for example often has edge cases that don't fit that model
[23:02:18] <Cale> IO in Haskell is just a little different from most imperative languages, but then again, what isn't?
[23:02:23] <EvanR> jacks-, I take it back... if you only have FromJSON and no ToJSON, it might be possible, since you won't be putting the surrounding json back. But what if the location within the structure changes? Just seems like the wrong use for FromJSON
[23:02:25] <dsal> IO isn't hard in Haskell.
[23:02:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[23:02:39] <wmacmil> when you say "parse json s"
[23:02:53] <dsal> IO is hard in Haskell the same way longjmp is hard in C.
[23:02:53] <wmacmil> json :: bytestring, 
[23:03:03] <Cale> no
[23:03:12] <wmacmil> parse = parseJSON
[23:03:13] <Cale> json :: Parser Value from Data.Aeson
[23:03:18] <wmacmil> ?
[23:03:21] <wmacmil> and whats "s"
[23:03:24] *** Quits: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com) (Remote host closed the connection)
[23:03:27] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 256 seconds)
[23:03:30] <Cale> s :: ByteString
[23:03:44] <Cale> https://hackage.haskell.org/package/attoparsec-0.14.3/docs/Data-Attoparsec-ByteString.html#v:parse
[23:03:47] *** Joins: wmacmil (~wmacmil@83-233-165-97.cust.bredband2.com)
[23:03:48] <Cale> ^^ this is parse
[23:03:59] <Cale> see the Result type just above where I linked
[23:04:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[23:04:12] <geekosaur> I think they missed it
[23:04:29] <Cale> json is the parser that Aeson defines here: https://hackage.haskell.org/package/aeson-2.0.3.0/docs/Data-Aeson.html#v:json
[23:04:29] <wmacmil> sorry it disconnected me for a second
[23:04:31] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[23:04:32] <Cale> oh
[23:04:39] <Cale> s :: ByteString
[23:04:47] <Cale> parse is from https://hackage.haskell.org/package/attoparsec-0.14.3/docs/Data-Attoparsec-ByteString.html#v:parse
[23:05:51] *** Joins: madjestic (~madjestic@88-159-247-120.fixed.kpn.net)
[23:06:03] <Cale> Depending on your use case, you may prefer to use json' which will more aggressively convert the json into Haskell datastructures (the unticked json parser will leave lots of unparsed chunks waiting to be parsed when you actually look at them)
[23:06:59] <[itchyjunk]> Is "System.IO" where I want to start?
[23:07:45] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[23:08:11] <wmacmil> thank you again, Cale
[23:08:18] <EvanR> do { putStrLn "Would you like to play a game?"; answer <- getLine; ...; return ()} :: IO ()
[23:09:02] <[itchyjunk]> hmm
[23:10:06] <EvanR> thus begins the worst zork ever
[23:11:20] <[itchyjunk]> I realize idk how to run my haskell without loading it into ghci either..
[23:11:31] <[itchyjunk]> That was another mystery is needed to solve some day.
[23:12:26] <geekosaur> runghc?
[23:12:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 256 seconds)
[23:12:36] <geekosaur> and then there'ds compiling it
[23:13:32] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:13:56] *** Joins: wrengr (~wrengr@99.34.197.35.bc.googleusercontent.com)
[23:15:38] <[itchyjunk]> Yeah one of those.. i required using Main or somesuch and i filed it under "another day"
[23:16:59] <geekosaur> haskell programs aren't scripts that execute from the top down, they start running at the IO action "main"
[23:17:25] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 240 seconds)
[23:17:50] <wmacmil> now when i try your unfoldr definition, its giving me the following typing error : 
[23:17:51] <wmacmil> Couldn't match type ‘Value’ with ‘GHC.Word.Word8’
[23:17:51] <geekosaur> but you will probably want to put together either a stack or cabal project
[23:18:22] *** Quits: prite (~pritam@user/pritambaral) (Ping timeout: 250 seconds)
[23:18:59] <geekosaur> https://github.com/geekosaur/xmonad.hs/tree/skkukuk is a small cabal project for my xmonad configuration, omitting the git checkouts
[23:19:26] <wmacmil> where its inferring the unfoldr from Data.ByteString.Lazy
[23:20:58] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 250 seconds)
[23:21:00] *** Joins: lechner (~lechner@debian/lechner)
[23:21:53] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:21:57] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[23:22:51] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[23:22:52] <geekosaur> you don't have to worry much about what's in the xmonad.hs aside from the fact that it starts running at the "main =" line
[23:23:08] *** Quits: deadmarshal (~deadmarsh@95.38.231.124) (Ping timeout: 250 seconds)
[23:24:01] *** Quits: xsarnik (xsarnik@lounge.fi.muni.cz) (Ping timeout: 256 seconds)
[23:24:55] <wmacmil> @Cale, where is the unfoldr you're using coming from?
[23:24:55] <lambdabot> Unknown command, try @list
[23:25:58] <EvanR> @index unfoldr
[23:25:58] <lambdabot> GHC.OldList, Data.List, Data.ByteString.Lazy.Char8, Data.ByteString.Lazy, Data.ByteString.Char8, Data.ByteString, Data.Sequence
[23:26:12] <EvanR> Data.List probably
[23:26:28] <Cale> Yeah, Data.List
[23:26:28] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[23:28:57] *** Quits: Inst (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net) (Ping timeout: 256 seconds)
[23:29:34] <wmacmil> thank you
[23:29:35] <wmacmil> !
[23:30:24] <wmacmil> it says something about attoparsec deprecating. is that something I have to manually deal with or will there be a new parser library with ghc?
[23:32:53] <carbolymer> I'm modelling a tree, which can have three values for leaf, and two of three as a root (A and B). I'm thinking of `data T = A [Either X T] | B [Either X T]` but handling Either additinally seems a bit... impractical. Right now I'm using `data A = A [T] | B [T] | C X`, which is simpler, but the type itself allows for root to be `C X`, which does not make sense in my case. Is there a better way to represent this?
[23:34:15] <carbolymer> the latter example should be: `data T = A [T] | B [T] | C X`
[23:34:33] *** Joins: opticblast (~june@secure-165.caltech.edu)
[23:34:37] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 240 seconds)
[23:35:09] *** Joins: ubert (~Thunderbi@p200300ecdf099487827ed8c05b109aa8.dip0.t-ipconnect.de)
[23:35:26] <dsal> What is X?
[23:35:34] <carbolymer> dsal: a type, you can assume Char
[23:36:06] <dsal> Why not `x`  Then you can `data T x` and then your Either is filled in later.
[23:36:40] <dsal> Traversable should help you iron the rest out.
[23:36:42] *** Joins: juhp (~juhp@128.106.188.82)
[23:37:52] *** Quits: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se) (Ping timeout: 250 seconds)
[23:37:54] <carbolymer> dsal: you mean make T parametric? I think I don't see how constructors would look like then?
[23:38:32] <dsal> I don't completely understand your use case, but you just pass the type aroudn.  `data A x = A [T x] | B [T x] | C x`
[23:38:36] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[23:38:42] <dsal> er, T
[23:38:58] <carbolymer> I just want to prevent the tree's root to be `C X`
[23:39:08] <carbolymer> and encode it in a single, quite simple type
[23:39:42] <c_wraith> If you want the root to have different legal values than the rest of the nodes, then you want it to be a different type than the rest of the nodes
[23:40:13] <carbolymer> c_wraith: right, I hoped that I could avoid that ;)
[23:40:42] <carbolymer> c_wraith: because it forces to implement a bunch of corner cases for functions handling tree
[23:41:11] <c_wraith> Not necessarily.  There are different ways to handle "different type"
[23:41:15] <dsal> But that base type can be `Maybe T`
[23:42:30] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[23:43:30] <lyxia> data T_ a = A [T_ X] | B [T_ X] | C a ; type T = T_ Void ; type T' = T_ X
[23:44:13] <wmacmil> i'm now getting an error with where ByteString is defined
[23:44:36] <wmacmil> ‘Data.ByteString.Internal.ByteString’ is not the same as 'Data.ByteString.Lazy'
[23:45:01] <c_wraith> wmacmil: true.  those are not the same type.  But there are convenient conversion functions.
[23:45:23] <EvanR> different types for root or branch than for leaves
[23:45:33] <carbolymer> lyxia: that looks better!
[23:45:42] <carbolymer> EvanR: how to unify them then?
[23:45:48] <EvanR> unify?
[23:46:05] <carbolymer> EvanR: I want to traverse the tree, and I don't want to write special cases for the root
[23:46:31] <EvanR> oh now I see what you meant, these are all leaves
[23:47:49] *** Quits: madjestic (~madjestic@88-159-247-120.fixed.kpn.net) (Ping timeout: 256 seconds)
[23:49:45] <c_wraith> you could always use a GADT where the constructors allowed for the root have a different result type than the constructors allowed other places
[23:49:46] <EvanR> data Leaf tag where A :: Leaf Ok; B :: Leaf Ok; C :: Leaf NotOk
[23:49:55] <c_wraith> like EvanR just demonstrated
[23:51:24] <c_wraith> "different type" doesn't need to mean "different data declaration" :)
[23:51:32] <carbolymer> right
[23:51:55] <carbolymer> good idea with GADTs, EvanR, c_wraith
[23:51:58] <carbolymer> thanks
[23:52:23] <wmacmil> where are those conversion functions documented
[23:53:14] <c_wraith> wmacmil: https://hackage.haskell.org/package/bytestring-0.11.2.0/docs/Data-ByteString-Lazy.html#v:fromStrict and toStrict, the next function down the page
[23:56:44] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[23:56:51] *** Joins: shapr (~user@2601:7c0:c37c:46d0:e770:81ff:40e0:b008)
