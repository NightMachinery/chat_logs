[00:00:10] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[00:14:35] *** Quits: semisimple (~semisimpl@user/semisimple) (Ping timeout: 268 seconds)
[00:16:00] *** Joins: semisimple (~semisimpl@user/semisimple)
[00:17:26] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 252 seconds)
[00:26:25] *** Quits: neiluj (~neiluj@2a01:e0a:1f2:d960:f71f:a091:77ad:cd71) (Quit: WeeChat 3.1)
[00:30:29] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[00:32:14] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[00:34:26] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:40:15] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Read error: Connection reset by peer)
[00:44:37] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:1071:5a83:7f38:20d9)
[00:45:18] *** Joins: Xenolithic (~Xenolithi@user/xenolithic)
[01:03:16] *** Joins: rardiol (~quassel@user/rardiol)
[01:07:11] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 250 seconds)
[01:12:27] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[01:25:31] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 268 seconds)
[01:28:44] *** Quits: ua_ (~ua@public-gprs219402.centertel.pl) (Excess Flood)
[01:30:07] *** Joins: ua_ (~ua@public-gprs219402.centertel.pl)
[01:32:42] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[01:34:54] <sshine> let's say ten people want to coordinate bringing a set of ingredients for mixing drinks; the drink(s) that each person has planned should remain a surprise, but the others should be able to know if there's a high probability of overlap so that some can change their recipe.
[01:35:13] <sshine> what's that called? is that a commitment scheme?
[01:36:25] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[01:42:08] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 252 seconds)
[01:46:13] <maroon> sshine, you mean that everyone should bring a unique item?
[01:46:50] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: leaving)
[01:48:03] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[01:48:47] <sshine> maroon, not necessarily unique. an item can be picked two times, but not three.
[01:48:55] <sshine> (or more)
[01:49:31] <sshine> (the specific multiplicity could be anything, but the constraints should be evaluated when the combined set of chosen ingredients is revealed
[01:50:47] <sshine> er. not revealed. I was hoping that there's a way to evaluate the constraints without revealing the total set
[01:51:38] <sshine> so basically, you only know if an ingredient was chosen by someone else because your choice is rejected.
[01:54:23] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[01:54:33] <sshine> I'll try to do a write-up.
[01:58:09] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[02:02:20] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (Remote host closed the connection)
[02:02:30] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[02:02:32] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[02:02:50] <sarnold> sshine: have you seen this? if not, it feels like something you'd be interested in https://en.wikipedia.org/wiki/Socialist_millionaire_problem
[02:02:53] *** Joins: kish` (~sid742412@user/aqua)
[02:05:31] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[02:12:35] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Quit: caveman)
[02:16:10] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 260 seconds)
[02:18:44] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:a1e1:617f:5617:eda3)
[02:22:41] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[02:31:21] <maroon> sarnold, that was my first thought, except socialist millionaire lets 2 people see if they're the same, but he wants to flag matches without anyone knowing who they're matching
[02:33:50] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 252 seconds)
[02:40:30] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[02:41:51] *** Quits: rardiol (~quassel@user/rardiol) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:42:49] *** Quits: Guyver2 (Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[02:42:51] *** Guyver2_ is now known as Guyver2
[02:43:12] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[02:47:26] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Quit: WeeChat 3.3)
[02:47:53] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:49:17] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-800a-95c0-a608-9494.res6.spectrum.com) (Ping timeout: 240 seconds)
[02:55:12] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com)
[02:55:46] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[03:01:58] *** Joins: MetricT (~MetricT@075-131-120-170.res.spectrum.com)
[03:06:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:11:58] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com) (Quit: jarthur)
[03:24:30] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com)
[03:30:18] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: WeeChat 3.3)
[03:33:06] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[03:34:01] <Alipha> Sounds like a blast of a party
[03:34:32] <ms7821> never go to a party with a cryptographer
[03:34:56] <maroon> ok folks, looks like we have the ingredients to make boilermakers for all!
[03:36:34] <ms7821> lol
[03:36:35] *** Joins: cwebber` (~user@147-219-168-070.res.spectrum.com)
[03:37:17] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[03:38:17] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[03:38:18] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 260 seconds)
[03:40:23] *** Joins: Wulf (~Wulf@user/wulf)
[03:41:03] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:1071:5a83:7f38:20d9) (Quit: Leaving)
[03:45:09] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e954:6a22:3202:5b23) (Ping timeout: 250 seconds)
[03:47:15] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[03:50:46] *** Joins: Spacenut (~aoeu_@24.246.170.95)
[04:01:42] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com) (Quit: jarthur)
[04:04:05] *** Quits: Guest4472 (~somewhere@122-199-43-68.ip4.superloop.com) (Quit: No Ping reply in 180 seconds.)
[04:05:19] *** Joins: etolier (~somewhere@122-199-43-68.ip4.superloop.com)
[04:05:43] *** etolier is now known as Guest6406
[04:07:17] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[04:09:16] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[04:14:21] *** Joins: frost (~frost@user/frost)
[04:14:24] *** Quits: frost (~frost@user/frost) (Client Quit)
[04:20:18] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 260 seconds)
[04:23:13] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[04:25:29] *** Parts: Malvolio (~Malvolio@user/malvolio) ()
[04:28:47] *** Quits: andreasbuhr (~quassel@p549db80f.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:35:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[04:40:10] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[04:40:33] *** Joins: kish` (~sid742412@user/aqua)
[04:42:35] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[04:43:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:48:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[04:48:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[05:01:26] *** Quits: Spacenut (~aoeu_@24.246.170.95) (Read error: Connection reset by peer)
[05:01:59] *** Joins: Spacenut (~aoeu_@24.246.170.95)
[05:03:15] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[05:08:09] *** Joins: Malvolio (~Malvolio@user/malvolio)
[05:20:22] *** Joins: igemnace (~ian@user/igemnace)
[05:20:26] *** Quits: Soni (~quassel@autistic.space) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[05:21:20] *** Joins: Soni (~quassel@autistic.space)
[05:21:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[05:24:37] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[05:28:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:33:29] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[05:34:19] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:37:39] *** Quits: machinedgod (~machinedg@24.105.81.50) (Read error: Connection reset by peer)
[05:38:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:40:50] *** Joins: infosecgnu (~fletc@cpc160499-chfd4-2-0-cust41.12-3.cable.virginm.net)
[05:44:30] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 268 seconds)
[05:44:37] *** Quits: Spacenut (~aoeu_@24.246.170.95) (Ping timeout: 240 seconds)
[05:59:20] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[06:02:37] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:03:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[06:08:19] *** Joins: Spacenut (~aoeu_@24.246.170.95)
[06:24:30] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[06:25:16] *** Joins: phebus (~phebus@fsf/member/phebus)
[06:35:31] *** Joins: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[06:38:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[06:39:41] *** Quits: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[06:40:18] *** Joins: Spacenut42 (~aoeu_@24.246.170.95)
[06:42:57] *** Quits: Spacenut (~aoeu_@24.246.170.95) (Ping timeout: 240 seconds)
[06:53:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[06:54:30] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[06:56:13] *** Joins: deusexbeer (~hedeo@37-146-236-2.broadband.corbina.ru)
[07:06:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[07:12:27] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[08:00:20] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[08:10:24] *** Quits: Gallomimia (~Gallomimi@node-1w7jra2a2gqpwurlgy67770n6.ipv6.telus.net) (Remote host closed the connection)
[08:13:15] *** Joins: Gallomimia (~Gallomimi@node-1w7jra2a2gqpxzh0lrss88jb1.ipv6.telus.net)
[08:23:02] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com)
[08:23:15] *** Joins: node1 (~node1@user/node1)
[08:24:39] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[08:31:28] *** hlieberman__ is now known as hlieberman
[08:43:22] *** Joins: ravan (~ravan@user/ravan)
[08:59:48] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:00:18] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com) (Quit: jarthur)
[09:05:25] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com)
[09:10:21] *** Quits: Warped (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[09:10:26] *** Joins: tooru (uid532895@user/tooru)
[09:17:15] *** Joins: frost (~frost@user/frost)
[09:23:37] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com) (Quit: jarthur)
[09:30:46] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com)
[09:33:54] *** Quits: infosecgnu (~fletc@cpc160499-chfd4-2-0-cust41.12-3.cable.virginm.net) (Ping timeout: 268 seconds)
[09:35:15] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:36:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:36:42] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:41:36] *** Quits: OneWheelGeek (~OneWheelG@alpha.straybits.org) (Remote host closed the connection)
[09:42:01] *** Joins: OneWheelGeek (~OneWheelG@alpha.straybits.org)
[09:45:25] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-4ce9-7fd7-2373-9fbb.res6.spectrum.com) (Quit: jarthur)
[09:53:29] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[09:55:11] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[10:28:54] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[10:38:47] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[10:51:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[11:02:14] *** Quits: r-g (~r-g@51.159.55.86) (Read error: Connection reset by peer)
[11:06:36] *** Quits: ravan (~ravan@user/ravan) (Read error: Connection reset by peer)
[11:06:54] *** Joins: ravan (~ravan@user/ravan)
[11:15:05] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:32:38] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[11:42:00] *** Quits: OneWheelGeek (~OneWheelG@alpha.straybits.org) (Remote host closed the connection)
[11:42:26] *** Joins: OneWheelGeek (~OneWheelG@alpha.straybits.org)
[11:54:48] *** Joins: inlight (~inlight@157.42.202.171)
[11:54:48] *** Quits: inlight (~inlight@157.42.202.171) (Changing host)
[11:54:48] *** Joins: inlight (~inlight@user/inlight)
[11:59:32] *** Joins: Amadiro (~Amadiro@84.209.11.12)
[12:09:23] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[12:09:36] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[12:29:15] *** Joins: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu)
[12:33:57] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[12:35:17] *** Joins: andreasbuhr (~quassel@p549db9c9.dip0.t-ipconnect.de)
[12:35:20] *** Quits: andreasbuhr (~quassel@p549db9c9.dip0.t-ipconnect.de) (Client Quit)
[12:36:02] *** Joins: MajorBiscuit (~MajorBisc@c-001-027-052.client.tudelft.eduvpn.nl)
[12:46:51] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:50:55] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:03:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[13:11:50] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 252 seconds)
[13:16:11] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[13:23:58] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[13:31:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[13:42:38] *** Joins: inlight (~inlight@157.42.206.185)
[13:42:38] *** Quits: inlight (~inlight@157.42.206.185) (Changing host)
[13:42:38] *** Joins: inlight (~inlight@user/inlight)
[13:50:06] *** Joins: Warped (~Warped@user/warped)
[13:51:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:52:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:07:37] *** Quits: MajorBiscuit (~MajorBisc@c-001-027-052.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[14:11:12] <rk4> the odds of these 10 alcoholics successfully implementing any scheme seems remote to me
[14:11:26] *** Joins: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy)
[14:14:32] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[14:18:37] *** Quits: MajorBiscuit (~MajorBisc@62-52-102.netrun.cytanet.com.cy) (Ping timeout: 240 seconds)
[14:20:43] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-015.client.tudelft.eduvpn.nl)
[14:21:31] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[14:22:37] *** Joins: inlight (~inlight@157.42.206.185)
[14:22:37] *** Quits: inlight (~inlight@157.42.206.185) (Changing host)
[14:22:37] *** Joins: inlight (~inlight@user/inlight)
[14:22:56] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:22:56] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[14:24:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[14:33:00] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[14:34:33] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 256 seconds)
[14:42:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[14:42:59] *** Joins: vhqr (~user@120.194.8.115)
[14:46:04] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[14:46:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[14:56:53] *** Joins: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[14:58:45] *** Joins: hqdruxn08__ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com)
[15:01:11] *** Quits: hqdruxn08 (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 256 seconds)
[15:02:37] *** Quits: hqdruxn08_ (~hqdruxn08@cpe-66-68-166-214.austin.res.rr.com) (Ping timeout: 240 seconds)
[15:02:45] *** Joins: dez (uid92154@user/dez)
[15:11:57] *** Joins: vhqr` (~user@120.194.8.115)
[15:13:10] *** Quits: vhqr (~user@120.194.8.115) (Ping timeout: 260 seconds)
[15:13:55] *** Joins: igemnace (~ian@user/igemnace)
[15:47:18] *** Quits: dusk (~quassel@suki.ds7s.nl) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[15:47:31] *** Joins: dusk (~quassel@suki.ds7s.nl)
[15:49:32] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[15:49:32] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[15:49:32] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[15:49:32] *** Joins: menace (~someone@user/menace)
[16:04:21] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:17:17] *** Joins: Guyver2_ (~Guyver@guyver2.xs4all.nl)
[16:19:34] *** Joins: opsecfail (~opsecfail@user/opsecfail)
[16:19:47] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 250 seconds)
[16:19:56] *** Joins: toastloop (toastloop@user/toastloop)
[16:19:57] *** Guyver2_ is now known as Guyver2
[16:23:37] *** Quits: vhqr` (~user@120.194.8.115) (Remote host closed the connection)
[16:36:19] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 268 seconds)
[16:41:45] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[16:55:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[16:56:09] *** Quits: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Quit: Leaving)
[16:56:28] *** Joins: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:59:32] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[17:03:37] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[17:08:27] *** Quits: toastloop (toastloop@user/toastloop) (Quit: Leaving)
[17:12:48] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[17:30:20] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[17:30:28] *** Joins: ravan (~ravan@user/ravan)
[17:34:14] *** Quits: Malvolio (~Malvolio@user/malvolio) (Quit: >_<!!! U_UzzZ)
[17:34:21] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697)
[17:35:28] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[17:49:32] *** Joins: Malvolio (~Malvolio@user/malvolio)
[17:53:24] *** Quits: frost (~frost@user/frost) (Ping timeout: 268 seconds)
[18:03:30] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[18:04:28] *** Quits: menace (~someone@user/menace) (Quit: menace)
[18:17:37] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Ping timeout: 240 seconds)
[18:17:57] *** Quits: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[18:28:47] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[18:34:54] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:35:40] *** Joins: node1 (~node1@user/node1)
[18:50:03] *** Quits: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani) (Ping timeout: 276 seconds)
[18:51:17] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:810:7809:8396:63f0:6697) (Ping timeout: 240 seconds)
[19:11:36] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Read error: Connection reset by peer)
[19:12:32] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[19:13:11] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:13:12] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:18:12] *** Joins: yanmaani (~yanmaani@gateway/tor-sasl/yanmaani)
[19:23:12] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 276 seconds)
[19:25:11] *** Joins: arjun (~arjun@user/arjun)
[19:26:40] *** Quits: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu) (Quit: r-g)
[19:29:38] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[19:33:52] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[19:35:38] *** Joins: machinedgod (~machinedg@24.105.81.50)
[19:47:52] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[19:53:45] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[19:54:21] *** Joins: kish` (~sid742412@user/aqua)
[19:54:40] *** Quits: kish` (~sid742412@user/aqua) (Remote host closed the connection)
[19:55:01] *** Joins: kish` (~sid742412@user/aqua)
[19:55:37] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Ping timeout: 240 seconds)
[20:07:04] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[20:24:20] *** Joins: gabriel1_ (~gabriel1@host-95-239-6-20.retail.telecomitalia.it)
[20:24:28] *** Joins: inlight (~inlight@157.35.40.251)
[20:24:28] *** Quits: inlight (~inlight@157.35.40.251) (Changing host)
[20:24:28] *** Joins: inlight (~inlight@user/inlight)
[20:26:32] *** Quits: gabriel1 (~gabriel1@user/gabriel1) (Ping timeout: 240 seconds)
[20:36:21] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[20:40:38] *** Joins: b93 (~I@209.127.74.135)
[20:46:20] *** Joins: node1 (~node1@user/node1)
[20:47:30] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[20:48:27] *** Quits: gabriel1_ (~gabriel1@host-95-239-6-20.retail.telecomitalia.it) (Remote host closed the connection)
[20:52:44] *** Quits: ua_ (~ua@public-gprs219402.centertel.pl) (Ping timeout: 252 seconds)
[20:52:50] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[20:54:58] *** Quits: semisimple (~semisimpl@user/semisimple) (Quit: WeeChat 3.3)
[20:55:32] <hlieberman> rk4: I wouldn't underestimate the power of a collection of alcoholics.  After all, Windows ME mostly worked.
[20:56:32] *** Joins: ua_ (~ua@public-gprs219402.centertel.pl)
[21:06:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[21:13:03] *** Quits: kish` (~sid742412@user/aqua) (Ping timeout: 276 seconds)
[21:16:57] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[21:19:37] *** Quits: opsecfail (~opsecfail@user/opsecfail) (Ping timeout: 240 seconds)
[21:21:57] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[21:34:10] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 268 seconds)
[21:41:23] *** Joins: kevinnn (~kevinnn@2600:8802:3713:3b00::9548)
[21:42:06] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[21:42:08] <kevinnn> Hi all, I am not a crypto expert. Reading the libsodium documentation, it is still not clear to me what kind of encryption I should be using
[21:42:23] <kevinnn> Basically, I have a video stream that I would like to encrypt
[21:42:32] <kevinnn> the stream is sent over UDP
[21:42:41] <kevinnn> so there is no guarantee that packets will be in order
[21:42:47] <kevinnn> or that they will arrive at all
[21:43:21] <kevinnn> because the stream is meant to be as low latency as humanly possible, I do not wish to re-order any packets that arrive out of order
[21:43:40] <kevinnn> and instead just drop them, this results in the best lowest latency stream
[21:43:47] <kevinnn> any suggestions on what I should use?
[21:44:31] *** Quits: node1 (~node1@user/node1) (Quit: Client closed)
[21:46:36] *** Joins: Everything (~Everythin@37.115.210.35)
[21:47:59] <Alipha> kevinnn: just a min
[21:48:09] <kevinnn> Alipha: thank you!!
[21:50:17] *** Quits: inlight (~inlight@user/inlight) (Ping timeout: 240 seconds)
[21:51:30] <hlieberman> kevinnn: I strongly suggest using with higher levels of abstraction than libsodium directly.  Noise would fit your needs quite well, though it does require some bookkeeping when you're using an unreliable transport mechanism.  You could also use SRTP or DTLS; though those are much less... clean protocols than libsodium, SRTP is built specifically for video transport, and DTLS is fine with packet loss.  The combination of the two is 
[21:51:30] <hlieberman> what WebRTC uses, in fact.
[21:52:42] <Alipha> kevinnn: well, once you have a shared symmetric key, you would just use crypto_secretbox_easy with an incrementing nonce, and send the nonce along with the ciphertext in the packet. keep track of the latest nonce you've received and drop any packets with older nonces: https://doc.libsodium.org/secret-key_cryptography/secretbox 
[21:52:44] <kevinnn> hlieberman: SRTP unfortunately adds too much latency for our use case
[21:52:55] <Alipha> sodium_increment is documented here: https://doc.libsodium.org/helpers
[21:53:37] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[21:53:45] <Alipha> kevinnn: do you know how to generate a shared symmetric key? and is this bidirectional encrypted communication or just unidirectional?
[21:53:59] <hlieberman> kevinnn: SRTP should be very little overhead once the connection is initiated.
[21:54:01] <kevinnn> Alipha: oh cool! so crypto_secretbox_easy with sodium_increment is enough for my case? Awesome!
[21:54:38] <hlieberman> That assumes there's a pre-shared key.
[21:54:55] <hlieberman> I'd suggest using Noise over libsodium directly.
[21:54:56] <kevinnn> Alipha: um not quite, just figured I would use some kind of CSPRNG. And it is bi-directional
[21:55:11] <hlieberman> There's still a lot to get wrong in libsodium, though certainly less than TLS.
[21:55:19] <Alipha> kevinnn: https://doc.libsodium.org/key_exchange for generating shared symmetric keys (one for each direction) from public/private key pairs
[21:55:54] <Alipha> "use some kind of CSPRNG" -- how do you get the symmetric key that you generated to both parties?
[21:56:24] <kevinnn> Alipha: how often do I need to change these keys? Our users will potentially be using these video streams for hours at a time
[21:56:29] <kevinnn> going about 5mb/s
[21:57:09] <kevinnn> Alipha: right, okay, I'll use your suggestion to get the keys on both sides
[21:57:10] <hlieberman> You're well into dangerous territory right now, kevinnn; there are a lot of ways to get this wrong in subtle ways that totally compromise your security but are very hard to detect.
[21:57:23] <hlieberman> What level of latency do you need to keep to?
[21:57:51] <kevinnn> hlieberman: well the application is remote desktop. RTP adds just a bit too much latency over UDP
[21:59:12] <Alipha> kevinnn: with the ciphers used in libsodium, you never have to rotate keys if you don't want to. just note that if an attacker obtained one of the session keys, they'd be able to decrypt all ciphertext that's part of that session. and so, at the very least, you probably don't want to store the session keys to disk, but to create a new pairs each time you start a new communication
[21:59:15] <hlieberman> You can get quite low latency over WebRTC (which is just SRTP underneath) -- in the low 100s of ms.
[21:59:30] <hlieberman> That should be fine for remote desktop, unless you're trying to push video game streams or something.
[21:59:54] <hlieberman> Look at Apache Guacamole, for example.
[22:00:14] <kevinnn>  Alipha: gotcha, you have been massively helpful. hlieberman seems very concerned for me, is there anything specifically I should look out for that you can think of?
[22:00:22] <Alipha> kevinnn: and as hlieberman has pointed out several times now, rolling your own cryptosystem is a bad idea, as yes, there's several subtle things you could get wrong which would completely compromise your system. you'd want at least to have a trained cryptographer look at it
[22:00:34] <kevinnn> hlieberman: webrtc is p2p
[22:00:40] <kevinnn> so won't work for my case...
[22:00:47] <hlieberman> It doesn't have to be.
[22:01:05] <kevinnn> really? never heard of webrtc being used server to client
[22:01:09] <hlieberman> In fact, it's frequently not; most (though not all) video conferencing systems use SFUs
[22:01:21] <hlieberman> Which are proxying and recombining video streams to save bandwidth.
[22:01:25] <MacGyver> Latency of a remote desktop is only an issue in my experience if you do relative mouse movement.
[22:01:49] <MacGyver> Absolute mouse inputs make near-second latency bearable. Something you might want to take into account.
[22:02:16] <kevinnn> hlieberman: also... video games may be the use case as well...
[22:02:34] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[22:02:47] <kevinnn> idk, we've tried rtp, and it just felt so much slower than our UDP implementation
[22:03:12] <kevinnn> I can't imagine webrtc will be faster. I am open to trying it though if you really think it
[22:03:46] <hlieberman> Video games streamed over the internet is an extremely difficult problem and one that takes entire teams working on relatively specialized technology.
[22:04:31] <kevinnn> hlieberman: I know that haha, we are a small startup and have been working on this for around 9 years now
[22:04:55] <kevinnn> we are just starting to think about security, but for years our priority was ultra low latency
[22:06:24] <hlieberman> I'd look in detail at what exactly your RTP implementation was doing under the hood.  I suspect tuning there is going to buy you better advantages than trying to redevelop RTC from the ground up.  If you must, though, wrapping your custom UDP implementation in DTLS is a good start as a "good enough" way to get some form of crypto that's at least fairly familiar.
[22:06:38] <hlieberman> As it's very close to TLS, your security people will probably be familiar with it themselves.
[22:07:05] <hlieberman> If you try to build something custom, you're going to need to consult with a professional cryptographer, and then you end up spending a lot of money and time on cryptography instead of building your product. ;)
[22:07:13] <kevinnn> ah, like I said, I am the "security" person right now lol
[22:07:24] <hlieberman> In that case, all the better reason to stick to something simple.
[22:07:26] <kevinnn> let me look into DTLS
[22:07:44] <Alipha> kevinnn: the big thing is never reusing a nonce with the same key. also, i misspoke above about rotating keys: calling crypto_kx_client_session_keys with the same public/private keypairs will end up producing the same session keys, and so what you have to do is create new public/private keys per connection/session. so, what you typically end up doing is generating these "ephemeral" private/public keys,
[22:07:46] <Alipha> sending the public key over to the other party, signing that public key with some long-term, pre-exchanged private/public keypair
[22:09:34] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[22:09:34] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[22:09:34] *** Joins: menace (~someone@user/menace)
[22:10:50] *** Joins: Guyver2_ (Guyver@guyver2.xs4all.nl)
[22:11:51] <kevinnn> how do I pre-exchange a private key?
[22:12:11] <kevinnn> and assuming I can do that, do I just generate a new public key for every new connection?
[22:12:30] <kevinnn> since it is a public key can I just transmit it in plain text over tcp?
[22:13:26] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[22:13:33] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Ping timeout: 256 seconds)
[22:13:41] *** Guyver2_ is now known as Guyver2
[22:13:55] <Wulf> kevinnn: don't do that. Always use encrypted connections.
[22:14:34] <kevinnn> Wulf: okay fair enough, then how do I get a unique private/public key combo for every connection?
[22:14:34] <Wulf> kevinnn: and consider using certificates
[22:14:52] <Wulf> kevinnn: why do you need that unique?
[22:15:07] <kevinnn> Alipha said that they need to be unique
[22:16:00] <Alipha> kevinnn: https://pastebin.com/zpy4g8QW
[22:17:10] <Alipha> the uniqueness provides Perfect Forward Secrecy... and makes dealing with the nonce easier, as you can just start each connection with a nonce of 0 if the public/private keys are unique per connection
[22:17:26] *** Joins: toastloop (toastloop@user/toastloop)
[22:17:37] <kevinnn> Alipha: you are an absolute life saver
[22:18:00] <kevinnn> Now all I have to do is figure out how to transfer the initial public key in a secure fashion
[22:18:03] <Alipha> kevinnn: or i'm the death of you because you'll take that, implement it to the best of your ability, but it'll have mistakes :-P
[22:18:45] <Wulf> kevinnn: use certificates
[22:18:54] <kevinnn> Alipha: lol, come on! have faith
[22:18:56] <Wulf> kevinnn: this involves trusting some third party
[22:19:21] <kevinnn> Wulf: okay certificates, I assume I can't do that with libsodium?
[22:19:44] <Alipha> yeah, your solutions are either certificates and trusting a third party, or doing Trust On First Use (TOFU) (which you've probably seen if you've ever used SSH)
[22:20:08] <Wulf> kevinnn: no, use your regular tls library.
[22:20:39] <kevinnn> Wulf: gotcha, so use tls for the first public key, then follow this: https://pastebin.com/zpy4g8QW
[22:20:41] <kevinnn> right?
[22:21:32] <kevinnn> hmm, wait Alipha: I assume if the public key gets exposed then everything is exposed right?
[22:22:22] <kevinnn> I wonder if it is safe to store that on disk, because I've got to use it everytime a new session is started
[22:23:34] <Alipha> kevinnn: public keys are public--you can freely expose them. it's the corresponding private key that you need to keep secret
[22:23:37] <Wulf> kevinnn: public keys can be safely exposed.
[22:23:58] <kevinnn> wait, then why does it need to be securely transfered?
[22:24:07] <kevinnn> "Exchange public keys with the other party in some secure fashion."
[22:24:08] <Alipha> kevinnn: so that it's not modified in transit
[22:24:13] <kevinnn> AH
[22:24:15] <kevinnn> I see I see
[22:26:01] <Alipha> kevinnn: how are servers and clients connecting to each other? i mean, how do they find each other? like, a client user enters in the domain name or ip address they want to connect to, or?
[22:26:18] *** Joins: aleck1 (~aleck@user/aleck)
[22:26:22] <kevinnn> Alipha: that is exactly correct
[22:26:30] <kevinnn> they type the servers IP
[22:28:42] <Alipha> kevinnn: so then, wherever the user gets the server's IP from, they can probably just get the public key from the same location? like posted on an https website or something? or sent in an email *which you then verify the contents*?
[22:29:02] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 260 seconds)
[22:29:18] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[22:29:40] <kevinnn> Alipha: ah, isn't there a way to verify a websites contents haven't been tampered with?
[22:29:48] <kevinnn> I could just spin up a webpage with the key
[22:30:10] <Alipha> kevinnn: yes, using https and a website cert. letsencrypt gives you free certs :-)
[22:30:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[22:30:29] <kevinnn> gotcha, okay that is how I will transmit the public keys
[22:31:40] <Alipha> you'll need a domain name for letsencrypt though--they won't give you certs for IP addresses (domains are cheap though, or free, such as with noip.com)
[22:32:09] <Alipha> (free sub-domains, that is)
[22:32:17] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[22:32:23] <kevinnn> awesome! Alipha you are again, a life saver!
[22:33:41] <Alipha> kevinnn: and you may want to check back with us after you've implemented it :-P if you can point us to the *small* snippets of code where you do all the crypto stuff, someone might give it a once over
[22:34:04] <kevinnn> Alipha: wow really! that is seriously awesome!
[22:34:09] <kevinnn> I will definitely do it
[22:34:34] <Alipha> not making any promises. and i'm not sure how much faith you should put in "some random guy on irc" ;-)
[22:39:47] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[22:40:06] <ioxzev1z> kevinnn, which language?
[22:40:11] <kevinnn> c
[22:40:18] <ioxzev1z> k
[22:40:23] <ioxzev1z> gimme
[22:40:33] <kevinnn> haha I will, thanks
[22:41:31] <Alipha> kevinnn: but yeah, you might not want to have your long-term signing private key sitting unencrypted on your computer. you could encrypt it with a password and have the user enter in the password every time they want to use it (not sure if that's feasible with the server's private signing key...) In which case, to encrypt the private key, you'd randomly generate a salt and generate a symmetric key using
[22:41:33] <Alipha> crypto_pwhash ( https://doc.libsodium.org/password_hashing/default_phf ) and then encrypt the signing private key with that symmetric key using crypto_secretbox_easy, and then store the encrypted private key along with the salt. https://doc.libsodium.org/password_hashing/default_phf
[22:41:39] <Alipha> oh, pasted the link twice
[22:42:52] <Alipha> (using Example 1: key derivation)
[22:44:37] <kevinnn> ah gotcha, okay I will start here, see if I can store this key securely on disk
[22:48:28] <Alipha> Hm. libsodium should add some "generate signed ephemeral public keys" function. And "create session keys from signed ephemeral keys". I feel like that's a common enough pattern to warrant creating those
[22:50:05] <kevinnn> Alipha: wait example 1 requires a password
[22:50:21] <kevinnn> this wouldn't work for the server side
[22:50:26] <Alipha> kevinnn: correct
[22:50:35] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[22:50:57] <kevinnn> or... what would I use for the password for the server side?
[22:51:44] <ioxzev1z> kevinnn, you could store the key, set permissions to 0700 or something, and hope no-one hacks the server and steals the key
[22:51:56] <Alipha> kevinnn: so, either leave it unencrypted (if an attacker has access to your drive, then you probably have bigger problems), or figure out how to store the signing key in your OS's "keychain" or something. (I have no experience in this)
[22:52:29] <ioxzev1z> As Alipha said, if you get hacked to the point that they have access to the HDD then you can't really do much
[22:52:40] <kevinnn> Alipha: ah okay, fair enough
[22:53:45] <ioxzev1z> But assuming the server is not running as root and you have minimal attack possibilities (no unneeded software, etc), you will probably do fine just storing the key as-is
[22:53:57] <ioxzev1z> If you need to transport it then encrypt before moving from 'puter
[22:55:55] <Alipha> Requiring or giving the option to encrypt on the client side might be nice though
[22:56:08] <Alipha> I'd probably just give the option
[23:10:27] *** Joins: imt4067 (~imt4067@tserver.wsb.onl)
[23:16:23] <ioxzev1z> kevinnn, one thing with the above is that you think you should have a key protected by a password, but then what protects the password that protects the key? Passwords everywhere, but when the top layer is leaked they all are
[23:17:18] <kevinnn> ioxzev1z: fair enough, do you have a suggestion?
[23:18:02] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[23:18:34] <Alipha> Is ioxzev1z thinking of yubikey or such?
[23:18:39] <ioxzev1z> As I said above, assuming everything is "sandboxed" to the point where the server isn't running as root, no unnecessary software, good firewall, etc, then you can store the key with 0400 perms
[23:19:05] <ioxzev1z> Alipha, no, assuming he doesn't actually physically own the server then I doubt hardware helps
[23:19:06] <kevinnn> ioxzev1z: I absolutely will do that
[23:20:49] <ioxzev1z> With something like this, much like the analog hole in video encryption, the key has to be accessible somewhere
[23:23:16] *** Quits: imt4067 (~imt4067@tserver.wsb.onl) (Quit: leaving)
[23:23:41] *** Joins: imt4067 (~imt4067@tserver.wsb.onl)
[23:35:57] *** Quits: imt4067 (~imt4067@tserver.wsb.onl) (Ping timeout: 240 seconds)
[23:57:14] <kevinnn> Alipha: just curious, why are we generating new symmetric keys for every session? Why not generate once, store on disk and use those indefinitely?
[23:59:16] <ioxzev1z> Because if all data was encrypted with one key, and was stolen, all data would be decrypted
[23:59:28] <Bostik> and compromise all sessions, past present and future? with keys stored on disk on at least two systems?
[23:59:42] <kevinnn> Ah of course
[23:59:51] <ioxzev1z> You generate asymmetric keys once, giving you public/private. You then generate keys per session
