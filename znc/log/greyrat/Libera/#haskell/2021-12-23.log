[00:06:49] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[00:07:02] *** Joins: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807)
[00:07:15] <EvanR> energizer, have you heard of this feature in ghc where type errors are delayed until some point at runtime
[00:07:38] <EvanR> haven't used it, but it fits the problem of "I just want to run the program NOW"
[00:07:54] *** Joins: notzmv (~zmv@user/notzmv)
[00:08:11] <EvanR> i.e. part of your program could run but the whole thing is still broken
[00:09:10] <EvanR> seems handy and appealing to pythonic sensibilities
[00:09:47] *** Quits: ph88 (~ph88@ip5f5af068.dynamic.kabel-deutschland.de) (Quit: Leaving)
[00:12:58] <tomsmeding> -fdefer-type-errors
[00:13:24] <tomsmeding> see also the more restricted -fdefer-typed-holes
[00:14:10] <EvanR> oh that's a good one... I put a _ and now I don't even get other errors xD
[00:14:57] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[00:16:22] *** Joins: lavaman (~lavaman@98.38.249.169)
[00:20:49] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 250 seconds)
[00:23:03] *** Quits: space_llama (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net) (Quit: Connection closed)
[00:23:19] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[00:27:11] *** Joins: jackson99 (~bc8147f2@83.167.180.121)
[00:27:17] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Quit: WeeChat 3.3)
[00:35:00] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[00:35:21] *** Quits: tewrdh^ (~tewrdh@64.253.22.77) (Remote host closed the connection)
[00:35:45] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[00:36:49] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[00:38:17] *** Joins: amk (~amk@109.255.169.126)
[00:40:30] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[00:40:40] <EvanR> I tried an algebraic solution to todays puzzle
[00:40:46] <EvanR> did not work:tm:
[00:41:03] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[00:41:56] *** Joins: mimmy (~mimmy@69.174.8.146)
[00:43:11] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[00:46:17] *** Quits: benin (~benin@183.82.27.57) (Quit: The Lounge - https://thelounge.chat)
[00:46:37] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[00:46:48] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[00:47:43] *** Joins: benin (~benin@183.82.27.57)
[00:52:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[00:52:22] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[00:53:01] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Remote host closed the connection)
[00:54:40] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:54:57] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:54:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:55:49] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:55:50] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:56:21] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:56:22] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:56:47] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:56:47] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:58:53] <d34df00d> Alrighty, I have a small problem where I need to foldMap over a list, but with access to not just the current element, but, potentially, left and right neightbour of each element (except the first and last one).
[00:59:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[00:59:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[00:59:25] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[01:00:07] <d34df00d> zippers look relevant, but a couple of libraries I looked at don't provide the map-into-a-monoid-and-concat primitive.
[01:01:12] <Rembane> d34df00d: zip3 xs (tail xs) (tail . tail $ xs)
[01:01:25] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:02:11] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:02:11] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:02:13] <Rembane> d34df00d: That might help you, but it's not as fancy as what you were after.
[01:02:38] <d34df00d> Hmm, I came up with zipping together xs, tail (inits xs) and init (tails xs)
[01:03:03] <d34df00d> Yours looks somewhat similar, I think. Also, yep, I was curious if I'm reinventing the wheel, or if there is an abstraction I could use.
[01:03:18] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:03:19] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:03:40] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:03:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:04:04] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:04:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:04:21] <justsomeguy> Haskellbook says "Haskell has native recursion based on the same principle as the Y combinator". (Source here: https://gist.github.com/kingparra/a0600fe64999c391c320058aa0072125) What does that mean?
[01:05:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:05:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:05:19] <justsomeguy> In that gist, I added a comment with my stab at an explanation of that quote, but I feel like I'm missing something.
[01:05:30] *** Quits: Hafydd (~Hafydd@user/hafydd) (Quit: WeeChat 3.3)
[01:05:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:05:36] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:05:55] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 256 seconds)
[01:07:10] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:07:11] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:07:43] <monochrom> I think it is either false or requires a very postmodern definition of "same principles".
[01:08:49] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:09:07] <monochrom> So let me start from the most anal and see if I can progress (regress?) to the most lax.
[01:09:28] <monochrom> The Y combinator is untypable in Haskell. So it is irrelevant right there.
[01:09:44] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:09:45] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:09:59] <justsomeguy> There are a lot of quotes like that in this book ... I think the intention is to relate how the evaluation strategy of LC is a useful mental model for how Haskell evaluates, but sometimes it's frustrating because it seems like some of these are factually incorrect.
[01:10:07] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:10:08] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:10:50] <monochrom> But you can work around by introducing a few newtype wrappings and unwrappings. It is not too bad. Then you can have an edited version of the Y combinator in Haskell.
[01:10:59] <justsomeguy> I did find a definition of Y in haskell, but it requires unsafeCoerce: y = \f -> (\x -> f (x' x)) (\x -> f (x' x))
[01:11:01] <justsomeguy>     where x' = unsafeCoerce x
[01:11:03] <justsomeguy> y
[01:11:10] <tomsmeding> I mean, the primary characteristic of the Y combinator is that Y f = f (Y f); and such a function does indeed exist: it's Data.Function.fix, defined as, you guessed it, fix f = f (fix f)
[01:11:17] <monochrom> But then, this still doesn't mean that Haskell's native recursion is actually defined in terms of that.
[01:11:44] <justsomeguy> Right, that what I'm wondering about. ...
[01:12:16] <monochrom> OK right, the next laxation is "we just mean that the fixed-point equation is solvable, and Y is one way to solve that equation".
[01:12:19] <tomsmeding> you need the weird structure of the standard Y combinator (which is untypeable in Haskell) because you don't have direct recursion in the standard lambda calculs
[01:12:29] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[01:12:46] <monochrom> But Y is by far not the only solution, not even in the untyped lambda calculus in the book's chapter 1.
[01:13:12] *** Joins: Hafydd (~Hafydd@user/hafydd)
[01:13:14] <geekosaur> I have this feeling it's really talking about letrec
[01:13:30] <geekosaur> but that's an odd way of putting it
[01:13:44] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:13:45] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:13:47] <tomsmeding> geekosaur: yeah, then it's doing the reader a disservice by saying that it's the same principle as the Y combinator
[01:13:52] <monochrom> This is a pretty broad disease. People cite Y as though it is the only solution. NO. There is an honest difference between "fixed point combinator" and Y.
[01:14:00] <tomsmeding> it's not, though it can be used to the same end
[01:14:14] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[01:14:15] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:14:16] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:14:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[01:14:25] <monochrom> In the same sense as "white horse is not horse" (white horses don't stand for all horses), Y is not fixed-point combinator.
[01:14:32] <tomsmeding> monochrom: are there any in the untyped lambda calculus that are typeable in Haskell?
[01:14:49] <monochrom> No. They all rely on \x -> x x
[01:14:56] <tomsmeding> makes sense
[01:15:23] *** Joins: mcglk (~mcglk@131.191.49.120)
[01:16:11] *** Joins: acidjnk (~acidjnk@p200300d0c7271e77d154eb1f1200bcdb.dip0.t-ipconnect.de)
[01:16:19] <monochrom> Alternatively, if you delete recursive bindings and recursive data type definitions from Haskell, you end up with something less powerful than System F, and System F doesn't have \x -> x x, we know this because every program in System F terminates.
[01:16:30] <tomsmeding> (are there any in the simply-typed lambda calculus? No, because STLC is total)
[01:16:45] <tomsmeding> (or, perhaps, _therefore_ STLC is total)
[01:16:45] <monochrom> Yeah, like that kind of arguments.
[01:17:19] <tomsmeding> (not sure you can sensibly put a causality relation there)
[01:17:41] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:17:42] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:18:13] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:18:21] <monochrom> The most lax level is to first acknowledge that Haskell has syntactic recursion, which is by far totally not the point of any fixed-point combinator (which spares you from syntactic recursion).
[01:19:20] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[01:19:22] <monochrom> And then the semantics of Haskell goes on to map syntactic recursion to the use of a fixed-point combinator (and we don't care which). As alluded in the Haskell Report.
[01:19:54] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:19:55] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:20:15] <monochrom> So yeah, one point down for HFFP.
[01:20:20] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:20:21] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:20:32] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Remote host closed the connection)
[01:20:41] <monochrom> It uses a good pedogogical strategy, but it gets a couple of facts wrong.
[01:21:24] <monochrom> Although, hiding behind the façade of "same" "principle" you can make any claim you like.
[01:21:42] <monochrom> http://www.vex.net/~trebla/humour/tautologies.html #0
[01:22:02] <justsomeguy> There are a few mroe like this. From ch1 "Functional programming languages are all based on the lambda calculus.". Apparently the original lisp is based on McCarthys thesis.
[01:22:06] <justsomeguy> *more
[01:22:40] <justsomeguy> Thank you for clearing that up, monochrom
[01:22:54] *** Joins: Guest|47 (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net)
[01:23:03] *** Guest|47 is now known as space_llama
[01:23:18] <monochrom> Oh, that one I have no objection.
[01:23:54] <monochrom> Lisp's primary concern was cons cell. FP is only its secondary concern.
[01:24:04] <tomsmeding> though it's fairly easy to be "based on" the lambda calculus :p
[01:24:20] <Rembane> Maybe it's harder to not be based on the lambda calculus?
[01:24:32] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:24:33] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:24:41] <tomsmeding> C isn't in any reasonable way, I guess
[01:24:42] <justsomeguy> So your position is that Lisp isn't a functional lanauge, then? (I would say it isn't purely functional, but it's still functional.)
[01:25:23] *** Joins: regr (~regr@2a02:a466:cf4f:1:cbe9:8a75:f9d2:f3e4)
[01:25:31] <monochrom> I would pin Backus language "FP" as the 1st functional programming language. And it uses so many ideas from lambda calculus that I would not object to "based on that".
[01:25:35] <oats> you can write some really imperative code in some lisps
[01:25:55] <monochrom> But if you don't accept that, I have a weaker stance.
[01:25:59] *** Quits: zincy (~zincy@2a00:23c8:970c:4801:bdb9:8c5f:3085:2807) (Remote host closed the connection)
[01:25:59] <oats> lisp-family languages tend to be more expression-oriented, but idk if that can qualify it as functional
[01:26:03] <tomsmeding> I mean, to be "based on" the lambda calculus, you need variables (only basically removes assembly and forth-likes from the list of candidates), function application (same), and inline functions (removes a couple more, but leaves almost any language that is still receiving updates today)
[01:26:03] <geekosaur> you can write some really imperative code in haskell
[01:26:31] <oats> new rule, lambda calculus is the only functional language :P
[01:27:08] <Rembane> tomsmeding: So having a language that with some effort can be turned into lambda calculus doesn't count? :)
[01:27:15] <tomsmeding> geekosaur: I wonder if our students, who are learning Haskell as a second language after an imperative one, would find that a consolation :p
[01:27:16] <monochrom> Landin taught us to explain programming languages by a lambda calculus on steroid. ("The Next 700 Programming Languages.")  So a revisionist would say that FPLs are based on that, retrospectively.
[01:27:26] <tomsmeding> Rembane: such as?
[01:27:47] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:27:47] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:28:27] <monochrom> But Landin in that paper used lambda calculus to explain Algol, not very functional. So there. >:)
[01:28:52] <tomsmeding> lol
[01:29:07] <monochrom> Basically the paper covers everything except the Prolog camp...
[01:29:27] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:29:27] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:30:35] <space_llama> GHCi, version 8.10.7: https://www.haskell.org/ghc/  :? for help
[01:30:36] <space_llama> Prelude> import Graphics.Glass
[01:30:36] <space_llama> <no location info>: error:
[01:30:37] <space_llama>     Could not find module ‘Graphics.Glass’
[01:30:37] <space_llama>     It is not a module in the current program, or in any known package.
[01:31:02] <tomsmeding> try Graphics.Gloss
[01:31:08] <space_llama> where does Graphics need to reside on my computer for ghci to see it?
[01:32:00] <tomsmeding> you need to create a project, either with stack or cabal, and add the 'gloss' package as a dependency; or you need to start a ghci shell via stack or cabal with the 'gloss' package as a dependency
[01:32:35] <tomsmeding> or you use an old-fashioned way of using cabal and install the library globally :p
[01:32:42] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Read error: Connection reset by peer)
[01:33:04] <tomsmeding> space_llama: do you have experience with python virtualenv, or rust, or nodejs?
[01:33:39] <space_llama> I did not use cabal. I downloaded a .tar.gz file directly from https://hackage.haskell.org/package/gloss
[01:33:56] <tomsmeding> you should use cabal (or stack) :)
[01:34:08] <tomsmeding> unless you have a good reason not to, and you probably don't
[01:34:11] <space_llama> I have about 8 hours experience on python. Mostly have used Matlab
[01:34:22] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:34:25] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:34:26] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:34:41] <tomsmeding> I believe with python, you put dependencies in requirements.txt, right?
[01:34:43] <tomsmeding> or something like that
[01:34:58] <Rembane> tomsmeding: What monochrom said about Landin, Algol and lambda calculus. That should mean that C can be turned into lambda calculus too. Or explained by it.
[01:35:00] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:35:01] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:35:06] <tomsmeding> (actually virtualenv is not really a good example, forget that)
[01:35:22] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:35:23] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:35:34] <space_llama> so how do I know what command to type into shell to download the graphics.gloss package via cabal?
[01:35:43] <tomsmeding> Rembane: not having read the paper (sorry), I wouldn't accept that as an argument why Algol/C is "based on" LC :p
[01:36:36] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:36:37] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:36:54] <tomsmeding> space_llama: the easiest way to start a ghci session with access to 'gloss', is 'cabal repl -b gloss'
[01:37:07] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:37:08] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:37:14] *** Quits: space_llama (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net) (Quit: Connection closed)
[01:37:17] <Rembane> tomsmeding: That's reasonable. I must admit that I did a silly amount of handwaving there.
[01:37:21] <tomsmeding> if you want to actually write a .hs file that uses gloss, create a new directory and put a suitable yourprojct.cabal file in it
[01:37:26] <oats> poor space_llama
[01:37:26] <tomsmeding> oh by space_llama
[01:37:28] <sclv> space_llama: downloading it won't help. you need to build it (and to build it you need to build and link its dependencies, and their dependencies, etc). so that's why we use package managers like cabal to manage all that
[01:37:30] <tomsmeding> *bye
[01:37:35] *** Joins: Guest|47 (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net)
[01:37:39] *** Guest|47 is now known as space_llama
[01:37:39] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[01:37:40] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[01:37:41] <sclv> oh lol
[01:37:48] <sclv> space_llama: downloading it won't help. you need to build it (and to build it you need to build and link its dependencies, and their dependencies, etc). so that's why we use package managers like cabal to manage all that
[01:38:00] <tomsmeding> space llama is lost in space
[01:38:08] <oats> space_llama, please trust us, it's worth it to learn to use the toolin
[01:38:08] <space_llama> oops I just held power instead of delete key and logged off computer...
[01:38:10] <oats> *tooling
[01:38:10] <sclv> so `cabal repl -b gloss` as suggested starts an interactive ghci session with a build dependency on gloss
[01:38:11] <oats> lol
[01:38:27] <tomsmeding> oops :p
[01:38:36] <tomsmeding> what sclv says
[01:38:43] <sclv> and that fetches and build and brings into scope all the stuff gloss needs and builds gloss and makes it available to the ghci session
[01:38:56] <sclv> and then to use it in a file, use a cabal project as suggested
[01:38:57] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[01:41:05] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[01:41:25] *** Joins: kmein (~weechat@user/kmein)
[01:42:09] <tomsmeding> space_llama: can start with this I guess https://paste.tomsmeding.com/M70m4yk4
[01:43:04] <tomsmeding> (sorry for the poor spacing in the cabal file, that tab should be 4 spaces)
[01:43:25] <space_llama> well it did a bunch of installing, building, completed, starting, haddock business for 30+ lines
[01:44:48] <justsomeguy> If your prefer stack, you can run stack ghci -package gloss for the same effect.
[01:45:14] <justsomeguy> (Though, honestly, I think it makes more sense to learn cabal first.)
[01:46:16] <space_llama> now the terminal browser is flickering its heading title between "ghc", "clang" and something else " ... cabal reple -b gloss" and all my typed commands do nothing.
[01:46:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:46:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:46:31] *** Joins: wroathe (~wroathe@user/wroathe)
[01:46:44] <tomsmeding> is it showing you a ghci prompt?
[01:46:50] <space_llama> no
[01:46:55] <sclv> if its still flickering between stuff thats because its still building?
[01:47:05] <tomsmeding> sounds like it
[01:47:08] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Remote host closed the connection)
[01:47:18] <sclv> it might just not be printing loglines as frequently
[01:47:22] <tomsmeding> what is the last line it printed space_llama 
[01:47:40] <space_llama> last4:
[01:47:40] * tomsmeding suspects "Building OpenGLRaw"
[01:47:42] <space_llama> Building     OpenGLRaw-3.3.4.1 (lib)
[01:47:43] <space_llama> Haddock      bmp-1.2.6.3 (all, legacy fallback)
[01:47:43] <space_llama> Installing   bmp-1.2.6.3 (all, legacy fallback)
[01:47:44] <space_llama> Completed    bmp-1.2.6.3 (all, legacy fallback)
[01:47:46] <tomsmeding> bpp,
[01:47:48] <tomsmeding> *boom
[01:47:56] <tomsmeding> OpenGLRaw takes a while :p
[01:48:03] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[01:48:05] <sclv> right its building all this stuff in parallel, and now everything left is blocked on a really big complicated package
[01:48:13] *** Joins: mimmy (~mimmy@69.174.8.146)
[01:48:23] <tomsmeding> (not sure if OpenGLRaw is _complicated_ per se, but it for sure is big)
[01:50:38] <justsomeguy> geekosaur: I think you said that you have a feeling the book is talking about letrec indirectly, earlier. What do you mean by that? Also, what is letrec?
[01:51:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:51:06] <tomsmeding> some languages make a distinction between recursive let (called letrec) and non-recursive let (callet let)
[01:51:13] <tomsmeding> in haskell, all lets are recursive
[01:51:20] <tomsmeding> IIRC scheme makes a distinction
[01:51:42] <geekosaur> yes, that
[01:52:04] <geekosaur> which means that if you refer to a binding on both sides of an equal sign, they're the same binding
[01:52:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[01:52:20] <geekosaur> which means it's a recursive binding that refers to itself
[01:52:38] <geekosaur> this is not the Y combinator, though
[01:53:08] <tomsmeding> it's recursive bindings, with which you can implement a fixpoint combinator :)
[01:53:26] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[01:54:18] <monochrom> Fortunately, you can define and use Y directly in Scheme.
[01:54:45] <monochrom> Or better yet, another fixed-point combinator, one that is more friendly to eager languages.
[01:55:06] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[01:55:37] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[01:56:00] <monochrom> You would still prefer letrec for efficiency.
[01:56:17] *** Joins: yin (~yin@user/zero)
[01:57:11] <monochrom> My idea of "the principle of Y" is not the fact that it solves the fixed-point equation, but how it does it, why it works.
[01:57:28] <monochrom> It (and other solutions) come down to something like \x -> x x
[01:57:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Ping timeout: 240 seconds)
[01:57:50] <tomsmeding> probably if you would ask the author of that book this question, in isolation, they would agree
[01:58:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[01:58:38] <monochrom> That, in turn, comes down to: Let D be the semantic domain of your untyped lambda calculus. Then D is order-isomorphic to the CPO of continuous functions D->D.
[01:59:33] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[01:59:44] * tomsmeding goes off to bed
[02:00:27] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:02:50] <timCF> Hello! Does anybody have an idea how to write conditional type class constraints, based on Data.Type.Equality.== result? Something like if result is 'True then use one constraint, if result is 'False - use another constraint? Basically type-level if-then-else expression for constaints.
[02:02:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[02:11:39] *** Quits: kmein (~weechat@user/kmein) (Ping timeout: 256 seconds)
[02:12:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[02:14:08] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[02:15:56] *** Parts: regr (~regr@2a02:a466:cf4f:1:cbe9:8a75:f9d2:f3e4) (WeeChat 2.8)
[02:16:20] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:21:18] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 260 seconds)
[02:22:53] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[02:22:55] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:23:53] *** Joins: kmein (~weechat@user/kmein)
[02:26:17] *** Quits: yin (~yin@user/zero) (Ping timeout: 240 seconds)
[02:27:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[02:30:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[02:30:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:34:02] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[02:34:50] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:35:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 252 seconds)
[02:36:45] <dan-so> is there a canonical way to get an element out of a HashMap, without caring which it is?
[02:36:57] *** Quits: max22- (~maxime@2a01cb0883359800bfc539327e2fa08b.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:37:05] <dan-so> something like get_any :: HashMap k v -> Maybe (k,v)
[02:38:18] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:38:21] <dan-so> lookupMin or lookupMax would be fine, if i were using a tree-based Map
[02:38:45] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[02:38:48] <jackdk> `headMay . HashMap.toList`?
[02:39:57] <dan-so> yes, that would do fine. so there's not really a "right" way then? 
[02:40:11] <jackdk> If you don't want to add the `safe` dep or similar, use something like `Map.foldrWithKey (\k v _ -> Just (k, v)) Nothing`
[02:40:20] <jackdk> I'm not aware of a canonical name for this function
[02:40:47] <dan-so> okay, thank you!
[02:43:57] *** Quits: kmein (~weechat@user/kmein) (Quit: ciao kakao)
[02:44:35] *** Joins: kmein (~weechat@user/kmein)
[02:46:11] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[02:46:28] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[02:46:39] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Ping timeout: 256 seconds)
[02:47:40] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[02:51:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[02:53:55] <dsal> :t maybeToList
[02:53:57] <lambdabot> Maybe a -> [a]
[02:54:05] <dsal> :t listToMaybe
[02:54:06] <lambdabot> [a] -> Maybe a
[02:54:41] <dsal> @src listToMaybe
[02:54:42] <lambdabot> listToMaybe []    = Nothing
[02:54:42] <lambdabot> listToMaybe (a:_) = Just a
[02:54:51] <dsal> It's kind of weird those aren't defined for Foldable in general.
[02:55:25] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:55:46] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[02:56:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Remote host closed the connection)
[02:56:59] <dan-so> hah, i wrote about that exact topic 
[02:57:08] <dan-so> https://danso.ca/blog/frommaybe-is-just-a-fold/
[03:03:57] *** Quits: cosimone (~user@93-47-230-208.ip115.fastwebnet.it) (Ping timeout: 240 seconds)
[03:05:59] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[03:06:37] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[03:10:17] *** Quits: mimmy (~mimmy@69.174.8.146) (Ping timeout: 240 seconds)
[03:10:58] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[03:11:01] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:11:57] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:11:58] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:17:22] <space_llama> unable to find module 'Graphics.Gloss'
[03:17:45] <space_llama> trying to follow https://mmhaskell.com/blog/2019/3/25/making-a-glossy-game-part-1
[03:18:09] *** Joins: mimmy (~mimmy@38.142.1.26)
[03:21:02] <space_llama> first I `cabal repl -b gloss`, then once downloaded. I 'mkdir newProject' -> 'cd newProject' -> 'cabal init'
[03:21:24] <sm> fixing-the-internet: tell the author their example is hard to follow
[03:22:11] <space_llama> am I the author or do you mean the author of mmhaskell?
[03:22:21] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[03:22:30] <sm> likely-fix-for-you: add the gloss package to build-depends in your .cabal file
[03:22:51] *** Quits: mimmy (~mimmy@38.142.1.26) (Client Quit)
[03:23:06] <sm> author = author of the blog post
[03:24:02] *** Joins: falafel (~falafel@2603-8000-d800-688c-6093-c6e0-4810-959c.res6.spectrum.com)
[03:24:59] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[03:26:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[03:27:49] <space_llama> currently I have:
[03:27:50] <space_llama>       build-depends:          base ^>=4.14.3.0
[03:27:50] <space_llama>                                             gloss >= 1.33 && < 1.14
[03:29:00] <space_llama> I was given this code, so I'm not really sure how to decipher if it is correct (I do not know what "base ^>= #'s  means
[03:29:06] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[03:32:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-6093-c6e0-4810-959c.res6.spectrum.com) (Ping timeout: 240 seconds)
[03:39:22] *** Joins: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net)
[03:40:07] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[03:41:39] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[03:41:45] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:44:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 268 seconds)
[03:45:02] *** Joins: bu5hyt0p_ (~rmsare@2601:281:c780:a510:6d40:63c6:3a27:e5b8)
[03:45:09] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e954:6a22:3202:5b23) (Ping timeout: 250 seconds)
[03:45:14] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[03:45:15] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:45:47] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[03:45:57] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[03:47:39] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[03:48:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:49:32] <jackdk> I think you're meant to have a comma in between
[03:50:24] <space_llama> you mean just before gloss?
[03:51:57] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 256 seconds)
[03:52:21] <sm> space_llama: there's a problem with your gloss line. the number on left should be the lowest allowed version, number on right is the highest
[03:52:21] <g> ^>= x.y.z.u == >= x.y.z.u && < x.(y+1)
[03:52:47] <g> https://cabal.readthedocs.io/en/3.6/cabal-package.html#pkg-field-build-depends
[03:55:02] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[03:57:21] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[03:59:07] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[04:01:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Ping timeout: 240 seconds)
[04:04:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:04:06] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:04:35] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 252 seconds)
[04:04:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[04:04:41] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:13:09] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[04:13:26] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[04:16:39] *** Quits: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net) (Quit: Leaving)
[04:18:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[04:18:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[04:18:15] *** Joins: yin (~yin@user/zero)
[04:18:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:18:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:18:51] *** Joins: wroathe (~wroathe@user/wroathe)
[04:19:05] <jackdk> space_llama: yes
[04:21:46] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[04:22:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[04:22:38] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:26:12] <yin> i don't understand why my solution hangs for aoc 15.2
[04:27:12] <yin> can anyone help me? this should be straightforward
[04:27:15] <yin> https://paste.jrvieira.com/1640221005314
[04:28:02] *** Quits: acidjnk (~acidjnk@p200300d0c7271e77d154eb1f1200bcdb.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:28:47] <yin> runs fine for part1 and all tests, including part2 test
[04:31:43] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[04:32:26] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[04:32:59] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:36:29] *** Quits: space_llama (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net) (Quit: Connection closed)
[04:36:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[04:36:48] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[04:40:59] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[04:43:05] *** Joins: machinedgod (~machinedg@24.105.81.50)
[04:43:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:48:05] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[04:48:06] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:48:16] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[04:48:35] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[04:48:43] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[04:48:59] *** Quits: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net) (Remote host closed the connection)
[04:52:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[04:53:14] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:53:14] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:53:14] *** Joins: wroathe (~wroathe@user/wroathe)
[04:58:16] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:58:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:59:29] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:59:58] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Read error: Connection reset by peer)
[05:03:16] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:03:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:03:16] *** Joins: wroathe (~wroathe@user/wroathe)
[05:04:38] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[05:05:04] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[05:06:46] *** Joins: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0)
[05:09:24] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-214.elisa-laajakaista.fi) (Quit: Leaving.)
[05:11:57] *** Joins: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com)
[05:13:12] *** Joins: nikkc (~nikkc@2603-7080-0103-7aa9-35ff-3499-0703-1f10.res6.spectrum.com)
[05:15:04] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:15:23] <EvanR> yin, are you building a Data.Map from an infinite list of pairs
[05:15:24] *** Joins: jay-invariant (~jay@c-24-4-6-169.hsd1.ca.comcast.net)
[05:15:31] *** Quits: jay-invariant (~jay@c-24-4-6-169.hsd1.ca.comcast.net) (Client Quit)
[05:15:50] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 260 seconds)
[05:16:39] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Client Quit)
[05:16:56] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:18:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:19:26] *** Joins: nuh^ (~nuh@64.253.22.77)
[05:21:26] *** Quits: chomwitt (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 260 seconds)
[05:24:09] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[05:24:47] *** Joins: falafel (~falafel@2603-8000-d800-688c-eced-9d48-e094-4d30.res6.spectrum.com)
[05:28:03] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:28:07] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Quit: leaving)
[05:28:20] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:28:20] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:28:20] *** Joins: wroathe (~wroathe@user/wroathe)
[05:28:31] *** Joins: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com)
[05:28:36] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:e482:21a8:3024:fee0)
[05:30:57] *** Quits: falafel (~falafel@2603-8000-d800-688c-eced-9d48-e094-4d30.res6.spectrum.com) (Ping timeout: 240 seconds)
[05:37:39] *** Quits: machinedgod (~machinedg@24.105.81.50) (Read error: Connection reset by peer)
[05:38:01] *** Joins: machinedgod (~machinedg@24.105.81.50)
[05:39:34] *** Joins: jz99 (~jz99@150.203.2.50)
[05:48:36] <iphy> https://github.com/TokTok/hs-cimple/blob/master/src/Language/Cimple/TraverseAst.hs#L53 is there any way to generalise this to arbitrary types for "text", not just Text?
[05:49:49] *** Quits: nuh^ (~nuh@64.253.22.77) (Ping timeout: 256 seconds)
[05:50:10] *** Joins: nuh^ (~nuh@64.253.22.77)
[05:51:14] <iphy> this one: https://github.com/TokTok/hs-cimple/blob/master/src/Language/Cimple/TraverseAst.hs#L19
[05:51:41] <iphy> I want to make that "Text" a type parameter
[05:55:16] <iphy> MultiParamTypeClasses works, cool
[05:55:29] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:56:12] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Remote host closed the connection)
[05:56:18] *** phma_ is now known as phma
[05:56:29] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[05:57:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[06:01:23] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:01:48] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[06:02:15] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:02:16] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:02:16] *** Joins: wroathe (~wroathe@user/wroathe)
[06:05:17] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[06:06:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:07:37] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[06:08:08] *** Quits: nikkc (~nikkc@2603-7080-0103-7aa9-35ff-3499-0703-1f10.res6.spectrum.com) (Quit: Client closed)
[06:09:50] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[06:13:17] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 240 seconds)
[06:13:33] *** Joins: isovector1 (~isovector@172.103.216.166)
[06:19:28] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:23:20] *** Quits: thaumavorio (~thaumavor@thaumavor.io) (Quit: ZNC 1.8.2 - https://znc.in)
[06:23:24] *** Joins: Guest|47 (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net)
[06:24:06] *** Quits: xff0x (~xff0x@2001:1a81:5290:1c00:84df:602d:a0a9:8535) (Ping timeout: 245 seconds)
[06:25:17] *** Guest|47 is now known as frumple_Doop
[06:26:10] *** Joins: xff0x (~xff0x@2001:1a81:52d0:e400:204:565d:57ea:f23d)
[06:30:42] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[06:33:43] *** Quits: jackson99 (~bc8147f2@83.167.180.121) (Quit: CGI:IRC (Session timeout))
[06:35:41] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Ping timeout: 268 seconds)
[06:35:52] *** Joins: dustee (~dustee@2601:244:4400:eb2:41c1:aef3:8d9c:ccf0)
[06:40:32] *** Quits: xff0x (~xff0x@2001:1a81:52d0:e400:204:565d:57ea:f23d) (Ping timeout: 240 seconds)
[06:41:23] *** Joins: xff0x (~xff0x@2001:1a81:52d0:e400:5fba:65e0:daae:59c3)
[06:42:09] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[06:42:10] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[06:42:39] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[06:42:45] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[06:43:57] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[06:46:23] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[06:47:46] *** Quits: td_ (~td@94.134.91.68) (Ping timeout: 260 seconds)
[06:49:30] *** Quits: dustee (~dustee@2601:244:4400:eb2:41c1:aef3:8d9c:ccf0) (Quit: Client closed)
[06:49:39] *** Joins: td_ (~td@94.134.91.61)
[06:50:32] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 240 seconds)
[06:52:27] <sim590> I'm trying to find out reciprocal cycles in a number's digits. Let's say I have the fraction 1/7 which gives 0.1428571..., then I find the digits [1,4,2,8,5,7,1,4,2,8,5,7,...]. I want to detect the repeating cycle in the digits which should be [1,4,2,8,5,7]. This cycle should be detected as starting at some point in the digits list and never ending at infinity. My approach is to reverse the list
[06:52:29] <sim590> of digits and call the following function on it ( head . head . dropWhile ((==1) . length) . group . groupBy (/=)) in order to find the cycle. Does that approach make sense to you ?
[06:53:17] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[06:53:34] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 268 seconds)
[06:53:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[06:55:55] *** Joins: Erutuon (~Erutuon@user/erutuon)
[06:57:18] <sim590> I'm asking because this is part of a problem on projecteuler and when I call my code to look for the longest cycle in the 1000 first numbers in the sequence 1/1, 1/2, ... 1/1000, then I don't get the right answer. I thought my approach should work, but I'm not sure what's missing
[06:59:27] <sm> https://www.volunteeramnestyday.net . Thanks joeyh
[07:01:53] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[07:03:54] <sim590> Here's the whole code I'm trying to run: http://ix.io/3Jcb
[07:05:58] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[07:06:53] <juhp> hm, does converting a product type to a record doesn't require a PVP major version bump, right?
[07:10:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[07:11:17] *** Joins: kaph_ (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[07:13:55] *** Quits: rekahsoft (~rekahsoft@cpe0008a20f982f-cm64777d666260.cpe.net.cable.rogers.com) (Ping timeout: 268 seconds)
[07:14:03] *** Joins: thaumavorio (~thaumavor@thaumavor.io)
[07:17:56] *** Quits: isovector1 (~isovector@172.103.216.166) (Quit: Leaving)
[07:23:07] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[07:24:51] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[07:29:17] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[07:33:02] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 240 seconds)
[07:37:54] <mniip> sim590, what you should be looking for is when you hit the same remainder in long division
[07:38:08] <mniip> you can't tell if it's a cycle or not from just the digits
[07:38:39] <sim590> But I thought that using a big enough precision would do, no?
[07:38:45] <sim590> I have like 100 digits numbers.
[07:38:56] <mniip> what you're doing is finding the first digit that repeats, no?
[07:39:09] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[07:39:09] <monochrom> Consider 0.1213141512131415...
[07:39:10] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:39:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[07:39:27] <sim590> Yes, in the first groupBy, but the second call of group clears everything about
[07:39:32] <sim590> clears everything out*
[07:39:40] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[07:39:53] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:39:59] <mniip> clears... what out?
[07:39:59] <sim590> Because then I can see which lists in the list [[[Integer]]] that is only of length 1.
[07:40:13] <sim590> Because it lets me know about the repeating cycles
[07:40:32] <sim590> If it's repeating, some list [[Integer]] will have length > 1
[07:40:34] <mniip> see monochrom's example
[07:41:29] <mniip> (in case you're uncertain, it *is* a rational number)
[07:41:31] <mniip> > 1347935/11111111 :: CReal
[07:41:33] <lambdabot>  0.1213141512131415121314151213141512131415
[07:41:44] <sim590> Yeah. Let me run my code on that.
[07:41:54] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[07:41:56] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:42:21] <monochrom> To be fair, if it's just 1/n and n<=1000, there may be a nice lower bound on how bad it gets.
[07:42:23] <mniip> as I said digits are really not the information you should be looking for
[07:42:24] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[07:42:34] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[07:42:50] <mniip> when you do long division, you eventually run out of digits in the dividend. That's where the repeating pattern starts
[07:43:12] <monochrom> But by the time you find out that bound by hand, you have already solved the original problem by hand, too.
[07:43:13] <mniip> each digit is dictated by the value of the remainder you currently have, so it will loop precisely when the remainder loops
[07:43:24] *** Quits: kayvank (~user@52-119-115-185.PUBLIC.monkeybrains.net) (Remote host closed the connection)
[07:43:38] <mniip> digits may repeat but remainders will not
[07:43:45] <monochrom> The reason why PE is not for exercises in coding up brute-forcing.
[07:44:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[07:45:05] <sim590> My code will give that: [[[5,1,4,1,3,1,2,1], [5,1,4,1,3,1,2,1], [5,1,4,1,3,1,2,1], [5,1,4,1,3,1,2,1]]] on the input you mentioned.
[07:45:29] <mniip> ok now try 1/10th of the number
[07:45:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[07:45:52] <monochrom> And the reason why I mock people with "If one day PE poses 'count how many even primes are in the range 1 to 2^(2^n), people will actually code up a loop of 2^(2^n) iterations".
[07:46:00] <mniip> your algorithm depends on where you cut the number off
[07:46:11] <mniip> oh PE is project euler
[07:46:59] <mniip> advent of cope tends to be exercises in brute forcing :(
[07:48:10] <int-e> PE tends to require brute force on top of a shortcut
[07:48:10] <sim590> My code also removes leading zeroes.
[07:48:18] <sim590> mniip: ^
[07:48:23] <sim590> So It doesn't change.
[07:48:39] <mniip> ok then
[07:48:57] <mniip> 5690349/11111111
[07:49:54] <sim590> mniip: http://ix.io/3Jco
[07:50:07] <mniip> yeah
[07:50:20] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[07:50:22] <mniip> so head.head is [1,2]?
[07:50:36] <sim590> Yeah....
[07:50:40] <sim590> Hmmmmmmmmmmmmmmmm
[07:50:44] <int-e> . o O ( Oh no, why are there floating point numbers... )
[07:51:39] <monochrom> 1/(the largest prime below 1000) may be the winner.
[07:52:27] <sim590> OK, so there's some mathematical insight I don't see right now which needs to be used to resolve this? I can't fix my approach in order to get it?
[07:52:37] <sim590> And why does my approach breka.
[07:52:39] <sim590> break*
[07:52:54] <sim590> Because groupBy (/=) doesn't really do what I want, right?
[07:52:55] <mniip> I said from the start, the digits are not a good medium
[07:53:08] <mniip> you should not be looking at the digits to tell where they loop
[07:53:14] <mniip> you should be looking at what produced the digits
[07:53:31] <sim590> So there's a relation between the nature of the number and the looping of its digits?
[07:53:31] <mniip> from the digits themselves it would be impossible
[07:53:37] <sim590> That's some math theorem I guess.
[07:53:50] <mniip> it doesn't really have a name
[07:54:03] <EvanR> this talk of repeating digits screams "continued fractions" for some reason
[07:54:12] <mniip> but yeah, long division by X is a state machine with X states
[07:54:39] <EvanR> i guess in a continued fraction, nothing repeats in any base
[07:54:53] <EvanR> for rationals
[07:55:04] <mniip> once the dividend digits run out, all the output depends on is the remainder
[07:55:14] *** Quits: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[07:55:34] <mniip> every time you have some remainder R, you compute the next digit with (R * 10 `div` D) and the next remainder with (R * 10 `mod` D)
[07:56:01] <mniip> the latter process obviously keeps you between [0..D-1]
[07:56:09] <mniip> so eventually you're bound to repeat the R
[07:56:26] *** Joins: mbuf (~Shakthi@223.178.76.172)
[07:56:39] <mniip> after no longer than D iterations (and actually the number of iterations will divide into D)
[07:56:51] <int-e> monochrom: Amazingly some of the winners (when varying the upper bound N) are not prime: 289 and 361 (and /maybe/ more, though it's heuristically unlikely.)
[07:56:52] <mniip> er
[07:56:58] <mniip> D-1 and D-1 respectively
[07:57:41] <int-e> > 1/101
[07:57:42] <lambdabot>  9.900990099009901e-3
[07:57:47] <int-e> and not all primes are good
[07:58:08] *** Joins: fizbin (~fizbin@c-73-33-197-160.hsd1.nj.comcast.net)
[08:00:54] <monochrom> Yeah the true story involves some primitive root, 10, and the denominator.
[08:00:57] *** Quits: Henson (~kvirc@107-179-133-201.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[08:02:13] <int-e> monochrom: yeah I'm using znorder in pari/gp
[08:02:58] <monochrom> pari/gp is the preferred programming language for PE >:)
[08:03:05] <sim590> OK, so when you compute the remainder of some 1/d division and try to figure out the digits one by one, you have to count the number of iterations before you get on the same remainder. And then, you know the length of the cyle, right ? mniip 
[08:03:14] *** Joins: alfonsox (~quassel@103.92.42.192)
[08:03:17] <mniip> yeah
[08:06:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:08:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 240 seconds)
[08:08:57] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[08:11:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[08:12:38] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[08:13:28] <sim590> hmmmmmmmmmmm OK. Figuring out the digits with (r*10 `div` d) and (r*10 `mod` d) is something I didn't know. So if I understand correctly, at first you do (1*10 `div` d) to get the first digit. Then you can find the remainder r0 = (r0*10 `mod` d). This gives the second digit: r0*10 `div` d. 
[08:13:38] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 260 seconds)
[08:14:04] <sim590> And so on...
[08:14:34] <sim590> But is it equivalent to look for a cycle in the digit or am I obligated to look at the remainder? 
[08:15:33] <EvanR> also divMod to do it in one step
[08:15:43] <sim590> Because I could have the same digit but not have a cycle. Why does the remainder looping gives us a true cycle for sure?
[08:15:44] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:15:51] <EvanR> you can't just look at digits, I think people explained why
[08:15:58] <sim590> EvanR: oh nice!
[08:16:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[08:16:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 240 seconds)
[08:16:20] <EvanR> also they explained why the remainder being bounded results in a loop
[08:16:33] <EvanR> which explains why doing a "long square root" of 2 does not loop
[08:16:36] <sim590> OK, I'll read again
[08:16:52] <EvanR> or doesn't necessarily loop, anyway
[08:18:25] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[08:19:25] <monochrom> The suffix of the digit sequence is controlled by the remainder only.  Seeing the same remainder for the second time means seeing the same suffix again.
[08:19:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[08:20:01] <monochrom> A finite-state Moore or Mealey machine that doesn't need input. I forgot which.
[08:20:32] <monochrom> An unfoldr of a state-transition function of finitely many states.
[08:22:47] <EvanR> a moore machine's next state only depends on the current state (no input)
[08:23:17] <EvanR> finite numbers of states = necessarily loops (proof left as exercise!)
[08:24:50] <int-e> EvanR: Uh, you're wrong.
[08:24:50] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 268 seconds)
[08:25:27] <int-e> The state transition function is the same in both models, it's just about the output. And no, I can't remember which is which :P
[08:25:38] <int-e> It hardly ever comes up.
[08:25:50] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[08:26:06] <EvanR> damn
[08:27:12] <int-e> (and when there's no input, the difference disappears. maybe monochrom was joking about not remembering)
[08:28:08] <monochrom> Oh haha accidental pun.
[08:28:20] <monochrom> But I really don't remember and too lazy to find out.
[08:28:32] <EvanR> now it feels like we're arguing over if bamboo "really is" "a grass" xD. But yeah if I remember a second time, mealy machine also includes an output that depends on state and input
[08:28:42] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[08:29:20] <EvanR> the finite states resulting in a loop doesn't depend on science culture jargon though
[08:29:20] *** Quits: jz99 (~jz99@150.203.2.50) (Quit: Client closed)
[08:30:48] <EvanR> mealy machine's output is relevant in the package `machines'
[08:40:37] *** Quits: falafel_ (~falafel@2603-8000-d800-688c-502d-7280-71cc-20e7.res6.spectrum.com) (Ping timeout: 240 seconds)
[08:45:06] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[08:47:40] *** Joins: hololeap (~hololeap@user/hololeap)
[08:49:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:56:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[08:56:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[08:58:32] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[08:59:57] *** Quits: rembo10 (~rembo10@remulis.com) (Ping timeout: 250 seconds)
[09:00:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[09:06:09] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:10:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[09:12:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:13:20] *** Joins: rembo10 (~rembo10@static.133.56.108.65.clients.your-server.de)
[09:17:52] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[09:20:30] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[09:20:31] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[09:22:48] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:23:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[09:27:07] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[09:28:10] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[09:28:30] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:29:30] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[09:32:44] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:33:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:34:58] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:35:15] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:36:03] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Quit: ZNC 1.8.2 - https://znc.in)
[09:36:16] *** Quits: darkstardevx (~darkstard@50.39.115.145) (Remote host closed the connection)
[09:36:27] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[09:36:40] *** Joins: darkstardevx (~darkstard@50.39.115.145)
[09:38:34] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 260 seconds)
[09:44:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:44:59] *** Joins: notzmv (~zmv@user/notzmv)
[09:45:14] *** Quits: rembo10 (~rembo10@static.133.56.108.65.clients.your-server.de) (Quit: ZNC 1.8.2 - https://znc.in)
[09:46:17] *** Joins: rembo10 (~rembo10@2a01:4f9:c010:b5b9::1)
[09:47:53] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:48:11] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:49:17] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:51:17] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:e482:21a8:3024:fee0) (Ping timeout: 240 seconds)
[09:51:59] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[09:52:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:52:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[09:53:29] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[09:53:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[09:54:05] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[09:55:11] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[09:55:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[09:57:21] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 268 seconds)
[10:00:26] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[10:02:39] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[10:04:15] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:05:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:06:33] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:07:54] <sim590> Here's the resulting solution for my problem http://ix.io/3JcO. I'm wondering if I could have done it as efficiently without a Map?
[10:08:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[10:08:23] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:08:27] *** Joins: jonathanx (~jonathan@94.234.52.89)
[10:08:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:12:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909) (Ping timeout: 252 seconds)
[10:12:37] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[10:14:41] <frumple_Doop> Haskell seems math centric, does it have ways of taking integrals, derivatives, and partial integrals/derivatives (calculus)?
[10:15:21] <frumple_Doop> Or do those operations need to be user defined in a general way?
[10:16:35] <frumple_Doop> ulterior motive to the question is, "is haskell a choice programming language for solving engineering problems, from Statics or for solving differential equations?"
[10:17:23] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:bc5b:dbe0:79e5:a909)
[10:18:14] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:18:18] *** Quits: xff0x (~xff0x@2001:1a81:52d0:e400:5fba:65e0:daae:59c3) (Ping timeout: 268 seconds)
[10:19:04] *** Joins: xff0x (~xff0x@2001:1a81:52d0:e400:55eb:e48f:480a:9ef0)
[10:19:04] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:20:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:22:01] <jackdk> frumple_Doop: I know about https://hackage.haskell.org/package/ad but haven't used it, dunno about integration
[10:22:21] <jackdk> https://hackage.haskell.org/package/integration oh Ed's done that too
[10:23:34] <frumple_Doop> oh I see, thanks.
[10:25:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[10:32:14] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[10:32:43] *** Joins: Morrow (~quassel@bzq-110-168-31-106.red.bezeqint.net)
[10:35:37] *** Quits: bu5hyt0p_ (~rmsare@2601:281:c780:a510:6d40:63c6:3a27:e5b8) (Ping timeout: 240 seconds)
[10:35:51] <yin> cc
[10:35:55] <yin> cc
[10:35:57] <yin> OB
[10:35:59] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:35:59] <yin> OB
[10:36:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:37:56] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:38:17] *** frumple_Doop is now known as space_llama
[10:47:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:50:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:52:53] <space_llama> > ('h':('a':['m']))
[10:52:55] <lambdabot>  "ham"
[10:53:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[10:53:18] <space_llama> is "ham" syntactic sugar for: ('h':('a':['m'])) ?
[10:54:50] <yin> ccººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººººº++ççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççç
[10:54:54] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[10:54:56] <yin> çççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççççç
[10:55:02] <yin> çççççççççççççççççççççççççççççççççççççççççççç++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:08] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:14] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:20] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:26] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:32] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:38] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:44] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:50] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:55:53] <space_llama> > length' [] = 0; length' (_:xs) = 1 + length' xs
[10:55:54] <lambdabot>  <hint>:1:12: error: parse error on input ‘=’
[10:55:56] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:02] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:08] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:14] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:20] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:25] <space_llama> yin fell asleep on keyboard; or cat...
[10:56:26] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:32] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:38] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:42] <xerox> @ops
[10:56:43] <lambdabot> Maybe you meant: pl oeis docs
[10:56:44] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:46] <xerox> @where ops
[10:56:46] <lambdabot> byorgey Cale conal copumpkin dcoutts dibblego dolio edwardk geekosaur glguy jmcarthur johnw mniip monochrom quicksilver shachaf shapr ski
[10:56:47] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[10:56:50] <yin> ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
[10:56:56] <yin> +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++çççç++
[10:58:10] *** ChanServ sets mode: +o mniip
[10:58:10] *** mniip sets mode: +q-o *!*@user/zero mniip
[11:02:27] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:02:37] *** Quits: jonathanx (~jonathan@94.234.52.89) (Ping timeout: 256 seconds)
[11:05:59] <space_llama> head (1,2,4)
[11:06:05] <space_llama> > head (1,2,4)
[11:06:06] <lambdabot>  error:
[11:06:06] <lambdabot>      • Couldn't match expected type ‘[a]’
[11:06:06] <lambdabot>                    with actual type ‘(a0, b0, c0)’
[11:06:20] <space_llama> > head "1 2 3 4"
[11:06:22] <lambdabot>  '1'
[11:06:29] <space_llama> > tail "1 2 3 4"
[11:06:31] <lambdabot>  " 2 3 4"
[11:06:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[11:09:24] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:10:36] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:13:45] <Cale> space_llama: Yes, it is, and ['m'] is syntactic sugar for 'm':[]
[11:14:14] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[11:16:26] <space_llama> > ['m'] == "m"
[11:16:27] <lambdabot>  True
[11:16:58] <space_llama> llama == space
[11:17:03] <space_llama> > llama == space
[11:17:04] <lambdabot>  error: Variable not in scope: llama :: Doc
[11:17:12] <space_llama> :(
[11:19:10] <space_llama> > "word" == 'w':('o':('r':"d"))
[11:19:12] <lambdabot>  True
[11:20:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:21:09] *** ChanServ sets mode: +o mniip
[11:21:10] *** mniip sets mode: -q *!*@user/zero
[11:21:49] *** mniip sets mode: -o mniip
[11:22:11] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:23:42] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[11:26:47] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[11:29:49] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[11:31:19] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-214.elisa-laajakaista.fi)
[11:33:47] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:34:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:36:11] <EvanR> interesting
[11:36:28] <EvanR> I have a datatype with 11 fields
[11:36:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:36:42] <EvanR> the more of them I make strict, the longer compiling -O2 takes
[11:36:57] <EvanR> I noticed because if they are all strict, compiling seems to take forever
[11:37:04] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:40:22] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:43:53] *** Joins: mattil (~mattil@helsinki.portalify.com)
[11:45:46] *** Joins: xkuru (~xkuru@user/xkuru)
[11:46:37] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 240 seconds)
[11:46:49] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[11:47:09] *** Joins: Sobhan (~Sobhan@modemcable039.128-131-66.mc.videotron.ca)
[11:48:16] <Sobhan> Hi, what would be my best best evaluating a function like map (\i -> sum $ map (\j -> sum $ map (\k -> bool 0 1 (pred i j k)) [0..1000]) [0.1000]) [0..1000]
[11:48:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:48:48] *** Joins: thebnq (~bnq@herrokitty.com)
[11:48:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:48:50] <Sobhan> it fills up my ram, i'm guessing i'm not using lazy evaluation properly
[11:51:33] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:51:50] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:52:49] <pavonia> I think sum is too lazy here
[11:52:58] <pavonia> @src sum
[11:52:58] <lambdabot> sum = foldl (+) 0
[11:53:03] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:53:09] <Sobhan> so foldl'?
[11:53:16] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[11:53:28] <pavonia> Yeah, try sum' = foldl' (+) 0
[11:54:22] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 260 seconds)
[11:54:27] <xsperry> I believe when you're compiling with (with -O2 at least) sum shouldn't create unnecessary thunks
[11:54:35] <Hecate>     sum :: Num a => t a -> a
[11:54:35] <Hecate>     sum = getSum #. foldMap' Sum
[11:54:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[11:54:40] <Hecate> in base 4.16
[11:54:54] <Hecate> but *not* in base 4.14 !
[11:54:55] <Sobhan> i was testing with O2 and this fixed it
[11:55:05] <Hecate> Sobhan: yes, so, there's a bit of history behind that
[11:55:07] <Sobhan> thanks
[11:55:12] <Hecate> (I'm the one who pushed the change to base)
[11:55:20] <Sobhan> (nice)
[11:55:29] <Hecate> (thanks, it was unnecessarily painful)
[11:55:30] <Hecate> so
[11:55:51] <Hecate> for all intent and purpose, the laziness of sum/product disappears once you start putting O1 and above
[11:55:57] <Hecate> it's optimised away
[11:56:00] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[11:56:13] <Hecate> but with ghci, it's still here!
[11:56:21] <Hecate> (unless you specify an optimisation level by hand)
[11:56:49] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[11:56:52] <Hecate> which means that trying out functions in ghci doesn't produce the same outcome in terms of memory consumption and evaluation eagerness/laziness
[11:57:10] <Hecate> compared to writing it down in a file and using the optimisation levels
[11:57:53] <Hecate> what was fixed in the base library was the default behaviour to be always eager evaluation
[11:58:20] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[11:58:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[11:58:33] <Sobhan> i wasn't testing in ghci tho, i was compiling with -O2
[11:59:03] <Hecate> and from what I can read, it fixed it?
[11:59:19] <Sobhan> `sum' = foldl' (+) 0` fixed itr
[11:59:30] <Hecate> ah great :)
[11:59:55] <EvanR> moral of the story is you want a foldl' to do a sum
[12:00:08] <EvanR> how you get there is another story
[12:00:26] <EvanR> that it depends on optimizations seems weird
[12:00:45] <Hecate> EvanR: unfortunately it is not
[12:00:57] <Hecate> I admit it feels weird
[12:01:31] <Sobhan> my inner "loop" still does 75% of the allocations tho
[12:01:32] <Hecate> but when I advocated for the change in base, I had very angry people from universities telling me "noooo, Haskell is a lazy language, you're destroying decades of intuition and teaching, noooooo"
[12:02:34] <Hecate> if you want to see how it went, read the "[Proposal]" thread of October 2020: https://mail.haskell.org/pipermail/libraries/2020-October/thread.html#start
[12:02:34] <Sobhan> :rofl:
[12:02:40] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:03:09] <Hecate> especially fucking KKK grand wizard David Duke, what a terrible participant in all this :')
[12:03:13] <Sobhan>      dumbSol.kf                             Main                    src/Main.hs:69:5-93                            2064        9504    2.8   71.1    57.5   86.9      dumbSol.kf.\                          Main
[12:03:13] <Sobhan> src/Main.hs:69:32-71                           2066      950400    0.8   15.9    54.6   15.9
[12:03:19] <EvanR> what
[12:03:26] <Hecate> https://mail.haskell.org/pipermail/libraries/2020-October/030877.html
[12:03:47] <Hecate> EvanR: David J Duke of the Haskell community shares his name with a famous KKK grand wizard
[12:03:59] <EvanR> ok not actual david duke
[12:04:05] <Hecate> ;'D
[12:04:13] <Sobhan> kf is my "inner" loop
[12:04:27] <Sobhan> is doing that many allocation normal?
[12:04:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:04:32] <EvanR> your inner loop doing most of the work, activity, whatever, makes sense ot me
[12:04:35] *** Joins: kuribas (~user@ptr-25vy0i8krrkad5xv3l1.18120a2.ip6.access.telenet.be)
[12:04:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[12:05:32] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:05:35] <EvanR> allocation happens as a matter of course behind the scenes in haskell, but you shouldn't think of it like calling malloc
[12:06:26] <Hecate> Sobhan: oh dear, don't pay too much attention to the allocation, the RTS allocates and the GC eats memory at very high speeds
[12:07:01] <Hecate> I remember hearing about something 80+GB/s on systems that definitely do not have 80+GB of RAM ;-D
[12:08:16] <dminuoso> Sobhan: Allocations are bad if they are your bottleneck.
[12:08:31] <EvanR> this post is pretty terrible
[12:08:38] <dminuoso> Sobhan: Note, that fusion is one of those optimizations designed to avoid intermediate/unneeded allocations.
[12:08:49] <dminuoso> But its only really relevant if thats your bottleneck.
[12:10:32] <Hecate> EvanR: the mailling-list email? yeah it's pretty terrible
[12:11:07] <EvanR> someone was suggesting making foldMap (not-prime) strict?
[12:11:26] <Hecate> no
[12:11:36] <EvanR> ok then
[12:11:46] <Hecate> Fumiaki doesn't take any shit 
[12:11:47] <Hecate> https://mail.haskell.org/pipermail/libraries/2020-October/030879.html
[12:12:23] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[12:15:24] <int-e> I'd hope the GC would reclaim memory, not eat it :)
[12:16:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:17:16] <Hecate> int-e: :P I tried to go with metaphores
[12:17:23] <dminuoso> int-e: Hah, in reality the GC is just pac man.
[12:17:42] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[12:17:53] *** Joins: neurocyte0132889 (~neurocyte@94.46.68.154)
[12:17:53] *** Quits: neurocyte0132889 (~neurocyte@94.46.68.154) (Changing host)
[12:17:53] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[12:18:28] <space_llama> what is meant by "pipes" in haskell lingo?
[12:18:53] <Hecate> space_llama: the library 
[12:19:04] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:19:04] <Hecate> or someone is just fond of plumbing
[12:19:24] <dminuoso> space_llama: This refers to a library or ideas of pipes, much in the same sense how we can use `|` in shell languages to construct data processing pipelines.
[12:19:26] <space_llama> such as "Guards are indicated by pipes that follow a function's name and its parameters." from learn you a haskell
[12:19:31] <dminuoso> Ah
[12:19:35] <int-e> that's just the symbol |
[12:19:35] <dminuoso> Just the character |
[12:19:49] <space_llama> oh I see
[12:19:52] <dminuoso> Incidentally because in shell languages this lets you create "pipes" to connect stuff together
[12:20:01] <Hecate> yes
[12:20:03] <dminuoso> Which is also why the library `pipes` is called `pipes` :)
[12:20:03] <Hecate> sorry space_llama :D
[12:20:33] <dminuoso> space_llama: Fun fact, in conduit the operator to connect two conduits is also named .| :)
[12:20:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:21:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[12:21:14] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:21:35] <space_llama> in math its called vertical bar
[12:21:53] <space_llama> which incidentally is space llamas favorite place to get a drink
[12:22:10] <space_llama> :|
[12:22:35] *** Joins: acidjnk (~acidjnk@p200300d0c7271e77d154eb1f1200bcdb.dip0.t-ipconnect.de)
[12:23:06] *** Quits: nuh^ (~nuh@64.253.22.77) (Remote host closed the connection)
[12:24:07] <space_llama> diminuoso https://www.conduitlanguage.com/ ?
[12:24:58] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Remote host closed the connection)
[12:24:58] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[12:25:31] *** Quits: mncheck (~mncheck@193.224.205.254) (Remote host closed the connection)
[12:25:46] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[12:25:55] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[12:25:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 268 seconds)
[12:26:28] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[12:26:56] <dminuoso> Yes, that...
[12:27:03] <dminuoso> I dont even. :(
[12:27:11] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Remote host closed the connection)
[12:27:46] *** Joins: mncheck (~mncheck@193.224.205.254)
[12:28:16] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:29:48] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:30:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:32:15] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:33:38] *** Joins: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com)
[12:35:25] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[12:36:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:36:12] *** Joins: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se)
[12:36:26] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[12:39:10] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:40:52] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:42:00] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[12:42:46] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[12:43:03] <carbolymer> Can I have two default signatures using DefaultSignatures?
[12:44:26] <carbolymer> for the same function
[12:47:06] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:47:24] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:47:24] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[12:47:49] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:48:28] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[12:48:38] <dminuoso> carbolymer: What would that even mean?
[12:48:46] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[12:49:11] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[12:49:14] <carbolymer> dminuoso: two default signatures with exclusive constraints
[12:49:46] <dminuoso> And how should GHC decide to pick?
[12:50:19] <carbolymer> dminuoso: if the constraints are exclusive, isn't that obvious?
[12:50:34] <dminuoso> No?
[12:50:48] *** Quits: space_llama (~Guest|47@c-73-221-44-172.hsd1.wa.comcast.net) (Quit: Connection closed)
[12:50:53] <dminuoso> First, how would GHC even know that they are exclusive
[12:51:00] <carbolymer> I mean, GHC could fail with an error if it can't pick...
[12:51:36] <zero> theoretically, couldn't we have a (data Strict a = Strict !a) that would make any type behave strictly? where for example, replacing (Int) with (Strict Int) in type signatures would make it an instance of a Num' class which would be a strict version of Num
[12:51:42] <dminuoso> Or do you mean exclusive in the sense that only one can be satisfied, and you expect GHC to just try out both?
[12:51:52] <dminuoso> For each instance?
[12:52:25] *** Joins: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net)
[12:52:27] <carbolymer> dminuoso: yes, try each one, select the one which matches ; if both match, fail with an error
[12:52:57] <dminuoso> carbolymer: Okay so the answer is simple: the manual lists no such behavior https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/default_signatures.html
[12:53:38] <carbolymer> dminuoso: yeah, but the manual does not say 'no' also, so I was hoping I could do that...
[12:53:40] <carbolymer> Well
[12:53:58] <dminuoso> I guess exlusivity doesn't matter, it would rather be a "go from top-to-bottom, pick first that works")
[12:54:20] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[12:54:20] <dminuoso> Well, the manual also doesn't state that `class Jinxed class Thing` is illegal.
[12:54:32] <dminuoso> Do you expect the GHC manual to explicitly list all the things that you cant do?
[12:54:48] <carbolymer> dminuoso: sometimes it's not obvious what are the limits
[12:55:02] <dminuoso> Im not entirely sure why you expect this to work in the first place
[12:55:57] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[12:56:17] *** Joins: Inst (~delicacie@2601:6c4:4080:3f80:f9a0:f50b:a310:4e7)
[12:56:30] <Inst> maybe this is Haskell-offtopic, but is Haskell more Hermione Granger or Luna Lovegood?
[12:56:48] *** Joins: coolnickname (uid531864@user/coolnickname)
[12:56:50] <carbolymer> dminuoso: i don't really know why it can't work
[12:56:59] <dminuoso> carbolymer: Im not saying it couldn't.
[12:57:07] <dminuoso> Im just saying it doesn't seem like an obvious thing to want.
[12:57:16] <dminuoso> Arguably Id find this extremely unintuitive
[12:57:25] <dminuoso> Consider: You write `instance Foo Bar`. What does this do?
[12:57:30] <dminuoso> Which implementation does it pick?
[12:57:50] <dminuoso> If you have some subtle bugs, this can alter behavior without you even noticing
[12:57:55] <carbolymer> dminuoso: the best option here would be to fail with an error if more than one matches I think
[12:58:19] <dminuoso> carbolymer: still, its completely unintuitive because you cant see what is being done.
[12:58:32] <dminuoso> You have to play constraint resolution in your head to know which default method would be picked
[12:59:01] <dminuoso> Each time you change either the default constraints of your Foo, or instances on Bar.
[12:59:11] <carbolymer> dminuoso: this now make more sense if you phrase it that way
[13:00:26] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[13:00:26] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:00:55] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[13:01:05] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[13:01:50] *** Joins: cosimone (~user@93-34-133-112.ip49.fastwebnet.it)
[13:02:01] *** Joins: briandaed (~root@185.234.208.208.r.toneticgroup.pl)
[13:02:48] <carbolymer> Well so I'm resorted to building a tower of monads then
[13:05:46] *** Quits: ozzloy (~ozzloy@ozzloy.lifeafterking.org) (Ping timeout: 245 seconds)
[13:06:11] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:07:06] <yin> i wonder if writing a filter like this can negatively impact performance.
[13:07:08] <yin> length [ () | (0,_) <- M.keys g ]
[13:07:50] *** Joins: meer (~delicacie@2601:6c4:4080:3f80:d9cb:b805:baaa:394f)
[13:08:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[13:08:43] <zero> yin: as opposed to what?
[13:09:57] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:f9a0:f50b:a310:4e7) (Ping timeout: 240 seconds)
[13:10:00] <yin> something like `length $ filter ((== 0) . fst) $ M.keys g`
[13:10:15] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:13:00] <zero> length . filter is subject to fusion I think, maybe someone can confirm. not sure about your [()] thing
[13:14:16] *** meer is now known as Inst
[13:14:26] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[13:14:50] *** Quits: mattil (~mattil@helsinki.portalify.com) (Remote host closed the connection)
[13:15:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[13:15:30] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net) (Quit: zzz)
[13:19:01] <yin> (i want to apologise for earlier. that was definitely my cat)
[13:19:22] <yin> (just noticed it)
[13:21:09] <yin> EvanR: how is that an infinite list?
[13:22:40] *** Joins: Akiva (~Akiva@user/Akiva)
[13:23:11] *** Quits: otherwise (~otherwise@c-73-221-44-172.hsd1.wa.comcast.net) (Quit: Connection closed)
[13:27:40] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[13:28:09] <dminuoso> tomsmeding: By the way, recall this domain trie problem?
[13:28:27] <dminuoso> It's so bizarre how problems keep reappearing all around you once you think about it.
[13:28:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[13:31:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[13:32:57] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[13:35:20] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:35:54] *** Quits: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se) (Read error: Connection reset by peer)
[13:36:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[13:36:12] *** Joins: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se)
[13:37:54] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[13:38:39] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[13:39:16] <xerox> yin: also M.size (M.filter pred m)
[13:39:28] *** Quits: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se) (Remote host closed the connection)
[13:39:46] *** Joins: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se)
[13:40:21] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[13:41:57] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[13:43:33] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[13:43:37] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:43:46] *** Quits: hololeap (~hololeap@user/hololeap) (Excess Flood)
[13:45:04] *** Joins: hololeap (~hololeap@user/hololeap)
[13:45:37] *** Quits: jonathanx (~jonathan@c-5eea3459-74736162.cust.telenor.se) (Ping timeout: 240 seconds)
[13:46:40] <yin> xerox: what's that?
[13:46:42] <c_wraith> xerox: 
[13:46:52] <c_wraith> I don't think that's gonna work as nicely
[13:47:03] <c_wraith> because filtering a Map is a complex operation
[13:47:09] <c_wraith> no way that'll fuse
[13:47:31] <dminuoso> Filtering a map will reconstruct a new map, rebalancing it with each element
[13:47:57] <dminuoso> Right?
[13:48:05] <xerox> my thought would be that if I use the library's functions I give them a chance to do internal optimizations that would not survive the boundaries of changing data structure
[13:48:25] <dminuoso> Though containers claims filter to be O(n) mmm
[13:48:35] <c_wraith> It probably goes through an intermediate list
[13:48:45] <c_wraith> to a list, filter, reconstruct from a sorted list
[13:48:50] <c_wraith> that's all O(n)
[13:49:04] <c_wraith> and obviously more work than just going to a list and filtering and not reconstructing
[13:49:06] <dminuoso> No it does not
[13:49:15] <yin> notice how i'm just interested in the keys
[13:49:16] <dminuoso> It directly operates on Map
[13:49:35] <dminuoso> I dont understand how this can be O(n)(
[13:50:15] <c_wraith> well, it's not a typical balanced tree.  It's allowed to get pretty far out of balance.
[13:50:48] <c_wraith> maybe that means it only does O(1) rebalances in the process of deleting an arbitrary number of elements
[13:50:50] <yin> so... is import Data.Set as S hiding ( take )
[13:50:53] <xerox> so I guess M.filterWithKeys would be the correct one to have mentioned
[13:51:03] <yin> ooops sorry about that
[13:51:12] <c_wraith> yin: you probably want a qualified in there
[13:51:13] <xerox> there's also S.size (S.filter pred (M.keysSet m))
[13:51:29] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[13:51:39] <c_wraith> yin: then you don't need to hide anything
[13:51:39] <int-e> c_wraith: note that even fromAscList . filter . toAscList would be O(n)
[13:51:43] <yin> c_wraith: yeah
[13:51:50] <c_wraith> int-e: yes, that was my point
[13:52:09] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:52:22] <int-e> but regardless, if all you want is to count, yes, length . filter . toList  is the way to go
[13:52:38] <c_wraith> there's no way it's more efficient to reconstruct a complex data structure
[13:52:44] <c_wraith> and then throw it out
[13:53:09] <yin> so `length [ () | (0,_) <- M.keys g ]` is not that smart, is what i'm hearing
[13:53:18] <c_wraith> nah, it's good
[13:53:36] <dminuoso> c_wraith: Maybe Im misreading the implementation, but doesn't filterWithKey potentially call `link2`, which potentially rebalances one side?
[13:53:45] <dminuoso> https://hackage.haskell.org/package/containers-0.6.5.1/docs/src/Data.Map.Internal.html#filterWithKey
[13:54:25] <int-e> even if it constructs an intermediate list (which I think it avoids; there's a rule   toAscList m = build (\c n -> foldrFB (\k x xs -> c (k,x) xs) n m)
[13:54:39] <int-e> ...so build/foldr fusion should kick in)
[13:54:51] <xerox> this is nice to know
[13:54:58] <c_wraith> dminuoso: yes, but that's sort of beside the point.  To understand the bound, you'd need to look at the number of rebalances required over the entire process, not the worst case multiplied by each place it could happen
[13:55:40] <xerox> all these functions are defined via foldrWithKey
[13:55:52] <yin> @hoogle foldrFB
[13:55:52] <lambdabot> Data.Massiv.Array foldrFB :: Source r ix e => (e -> b -> b) -> b -> Array r ix e -> b
[13:56:50] <dminuoso> c_wraith: Ah I get your point.
[13:56:57] <int-e> yin: https://hackage.haskell.org/package/containers-0.6.5.1/docs/src/Data.Map.Internal.html#foldrFB
[13:57:12] <yin> int-e: thank
[13:57:19] <dminuoso> Either way, it looks fairly obvious that using filterWithKey is *not* going to perform well
[13:57:23] <dminuoso> For this task.
[13:57:34] <c_wraith> Yeah.  It's great when you still want a Map afterwards
[13:57:45] <c_wraith> But when you just want a list, not so much
[14:03:45] *** Joins: dextaa5 (~DV@user/dextaa)
[14:04:19] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 265 seconds)
[14:05:50] *** Joins: zangi (~zangi@103.154.230.133)
[14:07:59] <zangi> is there a builtin function that can generate every single combinations of a list based on the length?
[14:08:06] <zangi> > filter ((==3) . length) $ Data.List.subsequences [1..4]
[14:08:07] <lambdabot>  [[1,2,3],[1,2,4],[1,3,4],[2,3,4]]
[14:08:46] <zangi> Data.List.subsequences doesn't really produce every single combination, i.e. it's missing [3,1,4]
[14:08:47] <int-e> zangi: now do it for a list with 30 elements
[14:09:10] <int-e> > permutations [1,2,3]
[14:09:12] <lambdabot>  [[1,2,3],[2,1,3],[3,2,1],[2,3,1],[3,1,2],[1,3,2]]
[14:10:04] <int-e> a subsequence of a_1..a_n is a_{i_1}...a_{i_k} where 1 <= i_1 < i_2 < ... < i_k <= n.
[14:10:14] <c_wraith> > replicateM 3 [1..5]
[14:10:14] <int-e> so [3,1,4] is not a subsequence of [1,2,3,4]
[14:10:15] <lambdabot>  [[1,1,1],[1,1,2],[1,1,3],[1,1,4],[1,1,5],[1,2,1],[1,2,2],[1,2,3],[1,2,4],[1,...
[14:10:33] <c_wraith> there are all sorts of things you might mean
[14:11:10] <int-e> > subsequences [1..2] >>= permutations
[14:11:11] <lambdabot>  [[],[1],[2],[1,2],[2,1]]
[14:12:03] *** Joins: max22- (~maxime@2a01cb088335980010d18673f284ce01.ipv6.abo.wanadoo.fr)
[14:12:26] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 245 seconds)
[14:16:18] *** Joins: jonathanx (~jonathan@94.234.52.89)
[14:17:43] <dminuoso> I have a `Map K V`, and I want to essentially partition the entire map into some `Map O (Map K V)` by means of a `part :: K -> O`. Do I have to build this myself, or are there primitives in `containers` that might help?
[14:18:37] <dminuoso> Naively I'd use `toAscList`, groupOn, and then run a nested fromAscList
[14:19:23] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[14:22:03] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:26:17] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[14:26:29] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 250 seconds)
[14:27:10] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[14:28:19] *** Joins: jespada (~jespada@87.74.33.157)
[14:29:23] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[14:30:34] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[14:32:32] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[14:33:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Ping timeout: 240 seconds)
[14:36:15] *** Quits: ishutin (~ishutin@78-131-74-101.pool.digikabel.hu) (Ping timeout: 256 seconds)
[14:36:57] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[14:37:47] *** Joins: ishutin (~ishutin@80-95-82-198.pool.digikabel.hu)
[14:38:05] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[14:38:55] *** Joins: neceve (~quassel@2.26.93.228)
[14:40:49] <zero> what is this:
[14:40:50] <zero>     Suffix occurrence of @. For an as-pattern, remove the leading whitespace.
[14:40:50] <zero>    |
[14:40:50] <zero> 47 |    go m cave@ ~(c:_)
[14:40:50] <zero>    |             ^
[14:40:52] <zero> ?
[14:40:57] *** Quits: jonathanx (~jonathan@94.234.52.89) (Ping timeout: 240 seconds)
[14:41:47] <zero> is this a new 9.2 thing?
[14:42:02] *** Joins: machinedgod (~machinedg@24.105.81.50)
[14:42:13] <xerox> which part?
[14:42:15] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:42:22] <zero> the error
[14:42:49] <zero> never had this error before
[14:43:00] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:43:11] <mjrosenb> leading whitespace? not trailing whitespace?
[14:45:24] <zero> this is how an as pattern irrefutable is supposed to be written, isn't it?
[14:45:26] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Quit: let me try something)
[14:46:46] <zero> the space in `as@ ~pat` is necessary because otherwise `@~` would be parsed as a unique symbol
[14:46:50] <zero> right?
[14:46:52] <xerox> you need parens
[14:46:54] <zero> what am i missing?
[14:47:02] <xerox> x@(~(...))
[14:47:10] <zero> since when?
[14:47:34] <xerox> spaces are for different arguments no?
[14:47:52] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[14:47:52] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[14:47:52] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[14:48:45] <zero> never had this problem before
[14:48:55] <zero> but parens work. thanks
[14:54:41] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Quit: tum tee tum)
[14:54:49] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[14:55:20] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[14:57:53] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Client Quit)
[14:58:14] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[14:59:56] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (Client Quit)
[15:00:06] *** Joins: lambdabot (~lambdabot@silicon.int-e.eu)
[15:00:06] *** Quits: lambdabot (~lambdabot@silicon.int-e.eu) (Changing host)
[15:00:06] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[15:00:55] <int-e> > let splitFst = unfoldr (\m -> M.minViewWithKey m >>= \(((k, _),_), _) -> let (m1, m2) = spanAntitone ((<= k) . fst) m in pure ((k, mapKeysMonotonic snd m1), m2)) in splitFst $ M.fromList [((1,2),3),((1,3),2),((2,0),4)]
[15:01:04] <lambdabot>  error:
[15:01:10] <lambdabot>      • Variable not in scope:
[15:01:27] <int-e> of course.
[15:01:43] <int-e> > let splitFst = unfoldr (\m -> M.minViewWithKey m >>= \(((k, _),_), _) -> let (m1, m2) = M.spanAntitone ((<= k) . fst) m in pure ((k, mapKeysMonotonic snd m1), m2)) in splitFst $ M.fromList [((1,2),3),((1,3),2),((2,0),4)]
[15:01:44] <lambdabot>  error:
[15:01:44] <lambdabot>      • Variable not in scope:
[15:01:44] <lambdabot>          mapKeysMonotonic :: ((a1, b1) -> b1) -> M.Map (a2, b2) a3 -> b3
[15:02:07] <int-e> > let splitFst = unfoldr (\m -> M.minViewWithKey m >>= \(((k, _),_), _) -> let (m1, m2) = M.spanAntitone ((<= k) . fst) m in pure ((k, M.mapKeysMonotonic snd m1), m2)) in splitFst $ M.fromList [((1,2),3),((1,3),2),((2,0),4)]
[15:02:09] <lambdabot>  [(1,fromList [(2,3),(3,2)]),(2,fromList [(0,4)])]
[15:03:04] <int-e> dminuoso: this /may/ be better than the naive thing, mainly if the groups are large.
[15:03:39] <int-e> dminuoso: spanAntitone is from Data.Map.Internal though
[15:04:48] <int-e> and the lambdabot noise was me fixing @let... I didn't realize I broke it with my last experiment maybe a week ago.
[15:05:32] <dminuoso> int-e: Mmm, that looks neat.
[15:07:11] *** Quits: Guest2359 (1000@gabilgathol.bandrate.org) (Changing host)
[15:07:11] *** Joins: Guest2359 (1000@sourcemage/mage/beowulf)
[15:07:17] *** Guest2359 is now known as |beowulf|
[15:15:17] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[15:15:18] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:15:35] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 252 seconds)
[15:15:47] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[15:15:53] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:18:21] *** Joins: vpan (~0@212.117.1.172)
[15:23:40] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[15:23:57] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[15:24:25] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 256 seconds)
[15:25:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[15:26:30] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[15:27:03] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[15:28:16] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[15:30:12] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[15:30:31] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: Replaced by new connection)
[15:30:32] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:31:01] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[15:31:01] *** Quits: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk) (Remote host closed the connection)
[15:31:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[15:31:25] *** Joins: qrpnxz (abc4f95c31@user/qrpnxz)
[15:31:53] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[15:37:42] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[15:54:58] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[15:59:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[16:00:43] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[16:01:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:01:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:01:46] *** Joins: wroathe (~wroathe@user/wroathe)
[16:02:05] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[16:04:20] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[16:04:39] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 256 seconds)
[16:05:30] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[16:06:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[16:08:21] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[16:10:32] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[16:11:49] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[16:18:35] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[16:19:20] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[16:19:23] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 256 seconds)
[16:19:38] *** Joins: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net)
[16:19:56] *** Joins: toastloop (toastloop@user/toastloop)
[16:20:00] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[16:20:00] *** Joins: yauhsien_ (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[16:20:17] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[16:22:24] <loki_> So I was wondering why
[16:22:26] <loki_> lucky :: (Integral a) => a -> String
[16:22:26] <loki_> lucky 7 = "LUCKY NUMBER SEVEN!"
[16:22:28] <loki_> lucky x = "Sorry, you're out of luck, pal!"   
[16:22:29] <loki_> Works
[16:22:34] <loki_> but lucky :: (Num a) => a -> String lucky 7 = "LUCKY NUMBER SEVEN!" lucky x = "Sorry, you're out of luck, pal!"
[16:22:39] <loki_> Doesn't
[16:22:52] *** Joins: lavaman (~lavaman@98.38.249.169)
[16:23:09] <loki_> The second example should be:
[16:23:13] <loki_> lucky :: (Num a) => a -> String
[16:23:21] <loki_> lucky 7 = "lucky 7!"
[16:23:23] <loki_> lucky x = "Sorry, you're out of luck, pal!"
[16:23:47] *** Quits: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[16:23:53] <hpc> (or use semicolons if you really absolutely must for whatever reason have it all on one line)
[16:24:20] <hpc> ((if you're putting this in ghci, try :{ and :} around your multiline definition as well))
[16:24:35] <hpc> (((or just use a file :P)))
[16:24:39] <loki_> (thanks)
[16:24:43] <loki_> ((also thanks))
[16:24:46] <hpc> :D
[16:24:49] <geekosaur> pattern matching on numbers secretly uses an Eq instance; this may be present for Integral, but it's absent for Num these days
[16:24:52] <loki_> (((also, I was using a file)))
[16:25:05] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[16:25:15] <hpc> ah, that's probably what it is then
[16:25:42] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[16:25:48] <geekosaur> I'd want to see the error message, since "doesn't work" doesn't tell me much
[16:26:18] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[16:26:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[16:27:12] <loki_> It's:
[16:27:16] <loki_> Could not deduce (Eq a) arising from the literal ‘7’
[16:27:16] <geekosaur> %% :info Integral
[16:27:18] <yahb> geekosaur: http://qp.mniip.com/y/36
[16:27:21] <geekosaur> yep
[16:27:25] *** Quits: Benzi-Junior (~BenziJuni@88-149-66-61.du.xdsl.is) (Ping timeout: 240 seconds)
[16:27:27] <loki_> from the context: Num a
[16:27:53] <loki_> But it feels like it should be able to deduce Eq from Num, no?
[16:28:02] <geekosaur> Not for several years
[16:28:26] <loki_> Do you know why?
[16:28:28] <geekosaur> I don't recall why Eq and Show were removed from Num at this point
[16:28:30] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Client Quit)
[16:28:34] <geekosaur> Haskell 98 required them
[16:29:56] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[16:32:20] *** Parts: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net) ()
[16:32:35] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[16:32:35] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[16:32:35] *** Joins: wroathe (~wroathe@user/wroathe)
[16:34:42] *** Joins: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net)
[16:36:13] *** Quits: max22- (~maxime@2a01cb088335980010d18673f284ce01.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[16:37:31] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[16:40:21] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[16:41:11] *** Joins: jakalx (~jakalx@base.jakalx.net)
[16:41:21] *** Quits: hololeap (~hololeap@user/hololeap) (Remote host closed the connection)
[16:42:15] *** Quits: yauhsien_ (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:42:40] *** Joins: hololeap (~hololeap@user/hololeap)
[16:43:00] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[16:44:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:44:37] *** Quits: Akiva (~Akiva@user/Akiva) (Ping timeout: 240 seconds)
[16:48:50] *** Quits: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net) (Quit: leaving)
[16:48:52] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:49:33] *** Joins: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net)
[16:51:05] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:56:09] *** Quits: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Quit: Leaving)
[16:56:28] *** Joins: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374)
[16:57:23] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[16:57:26] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[16:57:35] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:57:46] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[16:58:10] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[16:59:39] *** Joins: timCF (~timCF@m91-129-100-224.cust.tele2.ee)
[17:00:03] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:00:28] *** Joins: Vajb (~Vajb@2001:999:62:e042:be01:afcc:85c5:1e46)
[17:03:19] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:03:19] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:03:19] *** Joins: wroathe (~wroathe@user/wroathe)
[17:04:55] *** Joins: fef (~thedawn@user/thedawn)
[17:08:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[17:08:27] *** Quits: toastloop (toastloop@user/toastloop) (Quit: Leaving)
[17:10:15] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[17:10:57] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 256 seconds)
[17:17:49] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[17:19:18] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[17:25:02] *** Joins: Benzi-Junior (~BenziJuni@dsl-149-66-61.hive.is)
[17:26:42] *** Quits: timCF (~timCF@m91-129-100-224.cust.tele2.ee) (Quit: leaving)
[17:28:24] <int-e>  dminuoso: or you could go crazy and emulate treeowl: https://gist.github.com/int-e/d8caa46bcc784df86f9997abc5cafff1
[17:33:08] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[17:34:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[17:34:23] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[17:36:27] *** Quits: falafel_ (~falafel@cpe-76-168-195-162.socal.res.rr.com) (Ping timeout: 256 seconds)
[17:37:37] <int-e> (oops, that didn't compile; now it does)
[17:40:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:42:00] *** Joins: eron (~eron@186.192.87.8)
[17:45:09] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:45:09] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:45:09] *** Joins: wroathe (~wroathe@user/wroathe)
[17:50:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:50:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[17:52:19] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 256 seconds)
[17:52:26] *** Quits: acidjnk (~acidjnk@p200300d0c7271e77d154eb1f1200bcdb.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[17:53:05] *** Joins: max22- (~maxime@2a01cb0883359800ba08fcf16942d473.ipv6.abo.wanadoo.fr)
[18:01:31] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[18:03:09] *** Quits: briandaed (~root@185.234.208.208.r.toneticgroup.pl) (Quit: Lost terminal)
[18:03:28] *** Joins: mncheck (~mncheck@193.224.205.254)
[18:03:30] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 260 seconds)
[18:09:17] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[18:17:37] *** Quits: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr) (Ping timeout: 240 seconds)
[18:17:57] *** Quits: aliosablack (~chomwitt@2a02:587:dc1c:a00:12c3:7bff:fe6d:d374) (Ping timeout: 240 seconds)
[18:24:15] *** Quits: benin (~benin@183.82.27.57) (Ping timeout: 268 seconds)
[18:26:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[18:27:58] <hololeap> how often do people use type names as quasi-documentation, for instance type Steps = Int ? the significant problem with it seems to be a newcomer won't know what Steps actually is without looking for the definition
[18:28:08] *** Joins: Sgeo (~Sgeo@user/sgeo)
[18:29:00] <hololeap> I'm tempted to define it as `newtype Steps a = Steps a` so that I can have `Steps Int` and that solves both problems
[18:30:15] <geekosaur> the significant probloem some would claim for it is it looks like a distinct type, but isn't, thus giving a falkse sense of type safety
[18:31:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[18:31:50] *** dextaa5 is now known as dextaa
[18:32:07] <hololeap> yeah, I guess you can't substitute real documentation
[18:32:16] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 268 seconds)
[18:32:18] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[18:32:42] *** Joins: benin (~benin@183.82.27.57)
[18:34:49] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 256 seconds)
[18:34:55] *** Quits: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net) (Read error: Connection reset by peer)
[18:35:41] *** Joins: shapr (~user@pool-100-36-247-68.washdc.fios.verizon.net)
[18:36:37] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Ping timeout: 240 seconds)
[18:37:54] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[18:37:56] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[18:38:43] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[18:42:50] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[18:43:25] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[18:44:32] *** Quits: vpan (~0@212.117.1.172) (Quit: Leaving.)
[18:48:51] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[18:51:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:51:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:51:47] *** Joins: wroathe (~wroathe@user/wroathe)
[18:52:00] *** Quits: zangi (~zangi@103.154.230.133) (Quit: zangi)
[18:52:33] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[18:53:01] *** Quits: zaquest (~notzaques@5.130.79.72) (Remote host closed the connection)
[18:53:26] *** Joins: bu5hyt0p_ (~rmsare@2601:281:c780:a510:31c5:bd6a:19eb:499b)
[18:54:01] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[18:54:07] *** Joins: zaquest (~notzaques@5.130.79.72)
[18:56:53] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 250 seconds)
[19:02:06] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:02:16] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[19:07:53] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[19:08:29] *** Joins: n3rdy1 (~n3rdy1@2601:281:c780:a510:31c5:bd6a:19eb:499b)
[19:08:44] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[19:08:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:09:52] *** Parts: bu5hyt0p_ (~rmsare@2601:281:c780:a510:31c5:bd6a:19eb:499b) ()
[19:13:11] *** Joins: chomwitt (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:13:12] *** Joins: aliosablack (~chomwitt@ppp-2-85-245-134.home.otenet.gr)
[19:15:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:16:20] *** Quits: loki_ (~loki@149.red-88-20-26.staticip.rima-tde.net) (Quit: leaving)
[19:17:55] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:19:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Remote host closed the connection)
[19:20:14] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Quit: coot)
[19:21:28] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[19:22:19] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:24:45] *** Joins: arjun (~arjun@user/arjun)
[19:25:37] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[19:26:39] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[19:26:44] <Inst> :t join
[19:26:45] <lambdabot> Monad m => m (m a) -> m a
[19:27:24] *** Quits: mncheck (~mncheck@193.224.205.254) (Quit: Leaving)
[19:28:13] <Inst> :t return
[19:28:14] <lambdabot> Monad m => a -> m a
[19:30:03] *** Joins: chozorho (~chozorho@2601:146:300:c30::9401)
[19:30:42] <[exa]> o ye great truths of the universe
[19:33:18] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 268 seconds)
[19:33:52] *** Quits: arjun (~arjun@user/arjun) (Remote host closed the connection)
[19:35:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:35:38] *** Joins: machinedgod (~machinedg@24.105.81.50)
[19:37:15] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:37:56] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[19:40:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 268 seconds)
[19:41:26] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:44:02] *** Joins: mncheck (~mncheck@193.224.205.254)
[19:47:14] *** Joins: jgeerds (~jgeerds@55d4ac73.access.ecotel.net)
[19:48:37] *** Quits: Inst (~delicacie@2601:6c4:4080:3f80:d9cb:b805:baaa:394f) (Ping timeout: 240 seconds)
[19:48:44] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[19:51:46] *** Quits: jgeerds (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 260 seconds)
[19:54:14] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:54:54] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[19:55:47] <ProfSimm> In Haskell, can I create a type which has custom (polymorphic) implementations of core functions, so those functions can work with my custom type?
[19:58:16] *** Joins: jollygood2 (~bc8147f2@cerf.good1.com)
[19:58:17] *** Quits: xff0x (~xff0x@2001:1a81:52d0:e400:55eb:e48f:480a:9ef0) (Ping timeout: 252 seconds)
[19:59:24] *** Joins: xff0x (~xff0x@2001:1a81:52d0:e400:f16b:c82a:3197:1eaa)
[20:01:28] <[exa]> ProfSimm: depends on which core functions. Usually not in general, e.g. it's hard to overload `length`.
[20:01:54] *** Quits: Bartol (~Bartol@user/Bartol) (Quit: Lost terminal)
[20:02:09] <zero> what?
[20:02:22] <monochrom> But length is now a method of Foldable, overloadable. :)
[20:02:26] <zero> @type length
[20:02:27] <lambdabot> Foldable t => t a -> Int
[20:02:30] <zero> yeah
[20:02:40] <monochrom> You may have to pick another example, like fst.
[20:02:55] <zero> just make your type an instance of Foldable and overload length as you wish
[20:03:09] <monochrom> But let's take a step back. I don't think we even know what the question means.
[20:03:28] <geekosaur> that was my problem. I'm not even sure how to ask for a clarification
[20:03:59] <monochrom> "Show an example?" always works, but I didn't bother.
[20:06:08] <zero> what are "core" functions?
[20:06:08] *** Quits: Vajb (~Vajb@2001:999:62:e042:be01:afcc:85c5:1e46) (Read error: Connection reset by peer)
[20:06:20] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:06:53] <geekosaur> in any case, if the function is part of a typeclass then you'd instance the typeclass for your type
[20:07:16] <geekosaur> if it's not, there's not much you can do
[20:07:36] <geekosaur> but as zero notes, we may have different notions of "core function"
[20:07:57] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (Ping timeout: 240 seconds)
[20:09:12] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[20:09:15] <ProfSimm> Well let's say I want "length" to work with a type I made where length is calculated in some bizarre way.
[20:09:22] <ProfSimm> I make a typeclass?
[20:09:40] <geekosaur> :t length
[20:09:40] <zero> you make an instance
[20:09:41] <lambdabot> Foldable t => t a -> Int
[20:09:49] <geekosaur> so you make an instance of Foldable
[20:09:52] <monochrom> Check out the Foldable type class in the standard library. It already exists.
[20:09:57] *** Joins: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net)
[20:09:57] *** Quits: joo-_ (~joo-_@87-49-147-205-mobile.dk.customer.tdc.net) (Changing host)
[20:09:57] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[20:10:04] <zero> instance Foldable Yourtype where length = ...
[20:10:34] <ProfSimm> Oh yes, typeclass is interfaces and types are classes, I'm thinking in OOP terms
[20:10:36] <monochrom> But I am sure the real problem does not involve length.
[20:10:55] <monochrom> s/problem/question/
[20:11:06] <zero> ProfSimm: not *really* interfaces, but close enough
[20:11:06] <ProfSimm> monochrom: the real problem was more a general mechanism of how this is best done so I think it kinda answers my question
[20:11:25] <ProfSimm> zero: what would be the main differences you'd say?
[20:12:05] *** Joins: Bartol (~Bartol@user/Bartol)
[20:12:06] *** Quits: Bartol (~Bartol@user/Bartol) (Client Quit)
[20:12:20] *** Joins: Bartol (~Bartol@user/Bartol)
[20:12:27] *** Joins: burnsidesLlama (~burnsides@dhcp168-011.wadham.ox.ac.uk)
[20:12:46] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:13:25] <geekosaur> most OOP systems would let you override e.g. length even for an individual object, as long as you conformed to the interface. in Haskelll the "interface" belongs to the type, and in the background it's passing around a record of implementation functions
[20:13:31] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[20:14:01] <ProfSimm> geekosaur: oh I think many OOP languages you'd find also restrict interface implementation to the whole type
[20:14:16] <monochrom> In Java, an interface is a type. In Haskell, a class is not a type.
[20:14:32] <monochrom> There are more.
[20:14:54] <ProfSimm> monochrom:  I didn't get that sorry
[20:15:06] <ProfSimm> In Java, both interfaces and classes are types
[20:15:27] <ProfSimm> But interfaces are abstract which I suppose would be like typeclasses no
[20:15:36] <geekosaur> you cannot, for example, use Foldable as a type in Haskell
[20:15:41] <geekosaur> you use them as constraints
[20:15:46] <geekosaur> :t length
[20:15:47] <lambdabot> Foldable t => t a -> Int
[20:15:51] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[20:16:00] <monochrom> The similarity comes from the fact that they solve the same problem.
[20:16:27] <monochrom> The difference means that they solve the problem from different approaches.
[20:16:46] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Remote host closed the connection)
[20:16:47] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[20:16:47] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[20:16:47] *** Joins: wroathe (~wroathe@user/wroathe)
[20:16:55] <geekosaur> in Java you'd write the equivalent of `Foldable a -> Int`, but you can't use a typeclass that way in Haskell
[20:18:03] *** Joins: slowtype- (~slowtyper@79.103.178.210.dsl.dyn.forthnet.gr)
[20:18:05] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Ping timeout: 252 seconds)
[20:18:15] <zero> in haskell you can constrain the same polymorphic type variable by multiple classes
[20:18:37] <zero> hum
[20:18:47] <zero> not sure i phrased that correctly
[20:18:50] <monochrom> I have a problem, I want to do something fun. I have two friends proposing two solutions, one is to play AOE4, the other is to learn more math.
[20:18:57] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[20:19:11] <monochrom> Now suddenly playing AOE4 and learning more math are "the same" just because they solve the same problem.
[20:19:25] <monochrom> Or even remotely related.
[20:19:30] <int-e> fun.
[20:19:59] <ProfSimm> Well I'm not saying they're the same, I'm trying to learn how they're not the same
[20:20:13] <zero> (Math a, AOE4 a) => Monochrom -> a -> Fun
[20:20:43] <monochrom> At any rate, I now study the Giry monad and going deep into abstract measure theory during the day, and grind AOE4 during the night.
[20:21:11] *** Quits: mbuf (~Shakthi@223.178.76.172) (Quit: Leaving)
[20:21:21] <monochrom> Did you know that you can have a probability distribution over probability distributions? >:)
[20:21:31] <geekosaur> zero, I think it's closer to both AOE and Math instance MonochromFun
[20:21:44] <zero> geekosaur: i agree
[20:22:12] <int-e> monochrom: Ah. That's why this name sounded familiar...
[20:22:26] *** Quits: analognoise (~analognoi@23.105.41.153) (Read error: Connection reset by peer)
[20:22:41] <int-e> monochrom: from here: https://isabelle.in.tum.de/library/HOL/HOL-Probability/Giry_Monad.html
[20:23:00] <monochrom> w00t HOL
[20:23:07] <int-e> Isabelle/HOL
[20:23:17] <int-e> (not to be confused with HOL4)
[20:23:32] <monochrom> Haskell classes are really much closer to C++ overloading than any Java/Scala "interface" notion.
[20:23:53] *** Joins: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net)
[20:24:18] <monochrom> Classes are groupings of overloadable operators. This "overloadable" is in the C++ sense.
[20:24:24] <zero> it's just that Haskell's overloading is organised
[20:24:37] *** Joins: jeetelongname (~jeet@88-111-159-26.dynamic.dsl.as9105.com)
[20:24:41] <monochrom> Indeed C++ concepts are a generalization of Haskell classes.
[20:25:01] <monochrom> Yeah I say "organized overloading".
[20:25:08] <int-e> https://swizec.com/blog/week-20-making-adhoc-polymorphism-less-ad-hoc
[20:25:10] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[20:25:45] *** Quits: alfonsox (~quassel@103.92.42.192) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:26:18] <zero> i wonder... what if class constraints were mandatory for every type variable?
[20:26:57] <int-e> then we wouldn't be here
[20:27:30] <monochrom> Then you would need a class that has no methods so you can translate "id :: a -> a" to "id :: Type a => a -> a"
[20:27:33] <geekosaur> zero: what constraint would you give to a in the type of length?
[20:28:35] <monochrom> > let i :: () => a -> a; i x = x in i "Phone"
[20:28:36] <lambdabot>  "Phone"
[20:28:48] *** Quits: yauhsien (~yauhsien@118-167-43-174.dynamic-ip.hinet.net) (Ping timeout: 268 seconds)
[20:28:48] <monochrom> There is your mandatory constraint. >:)
[20:29:23] <monochrom> > let j :: () => Int; j = 4 in j
[20:29:24] <lambdabot>  4
[20:29:30] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[20:29:30] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[20:29:30] *** finn_elija is now known as FinnElija
[20:29:40] <monochrom> You can even mandate constraints for type constants, too >:)
[20:29:46] <zero> geekosaur: Lenghtable :p
[20:29:55] <zero> i get the point
[20:30:10] <geekosaur> but lengthable applies to the Foldable, not the element type
[20:30:26] <zero> ah i see
[20:31:22] <zero> nevermind then
[20:31:41] <geekosaur> in fact the lack of constraint on `a` there tells you something important: `length` cannot inspect `a`s
[20:31:42] <monochrom> Tautologies and vacuity solve a lot of problems. :)
[20:32:20] <zero> what if we allowed functions with no constraints to be arbitrarily overloaded then?
[20:32:45] <int-e> how is the compiler supposed to know which one you want?
[20:32:50] <geekosaur> then we'd have the kind of zoo C++ has, where >> can be both a bitshoift and an input operation
[20:32:56] <zero> by the type
[20:33:12] <int-e> but we like types to be inferred
[20:33:54] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[20:34:06] <zero> yes, so unconstrained functions would be inferred
[20:34:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[20:34:57] <zero> well i'm not thinking very deeply about this
[20:35:11] <monochrom> Just look at C++. It already does that.
[20:35:25] <monochrom> It is very doable.
[20:35:39] <monochrom> The issue though is error messages.
[20:35:52] <int-e> zero: To me, you have a vague idea of a solution that is looking for a problem.
[20:36:00] <zero> int-e: yes
[20:36:07] <int-e> It's hard to take it seriously.
[20:36:19] <zero> i'm just spitballing
[20:36:26] <monochrom> Joke on book reviews: "This book fills a much needed gap."
[20:36:44] <zero> :)
[20:37:57] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Ping timeout: 240 seconds)
[20:38:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:39:39] <zero> ok, so making unconstrained functions overloadable (but having to respect the more general polymorphic type signature) would be equivalent to...
[20:40:36] <zero> having one class per... wait
[20:42:01] *** Joins: notzmv (~zmv@user/notzmv)
[20:43:01] *** Quits: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net) (Ping timeout: 240 seconds)
[20:46:13] <zero> hypothesizing is important, even if it leads nowhere
[20:46:43] <geekosaur> if you learn something from it, it is
[20:47:15] <zero> fun is a better goal than knowledge
[20:48:18] <ProfSimm> In OOP languages I type foo. and I see a list of methods I can apply to foo. What's the alternative in Haskell given I type the function first?
[20:48:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:49:05] <zero> hoogle
[20:49:28] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[20:49:59] <zero> https://hoogle.haskell.org
[20:50:09] *** Joins: lbseale (~ep1ctetus@user/ep1ctetus)
[20:50:10] <shapr> also haskell-language-server with type holes
[20:50:54] <zero> ProfSimm: oh wait, is foo a type?
[20:51:05] <ProfSimm> Hmm is there no some immediate feedback
[20:51:22] <shapr> you can get 'intellisense' completion with haskell-language-server
[20:51:27] <geekosaur> hls gives you immediate feedback
[20:51:43] <ProfSimm> I mean, how would it work when i type the function first before the argument
[20:51:56] <shapr> but you'll likely want to use type holes to break it down
[20:52:18] <shapr> you could also use wingman to do case splits and etc
[20:53:01] <zero> you can also type `:info Int` into ghci for example to list all it's classes
[20:53:04] <shapr> ProfSimm: check out the demos? https://haskell-language-server.readthedocs.io/en/latest/features.html#demos
[20:56:11] <zero> ProfSimm: you might be thinking backwards. if you are typing a function, you must know what type the argument is, right? because if you ask for a list of possible types, that list is ptentially infinite. the relevant thing t know in that situation would be the type of the function you just typed
[20:56:47] <zero> what would you expect to get when typing `id` ?
[21:07:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:08:29] *** Quits: kuribas (~user@ptr-25vy0i8krrkad5xv3l1.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[21:11:29] *** Joins: niemand (~niemand@p5796adc9.dip0.t-ipconnect.de)
[21:11:38] *** Parts: niemand (~niemand@p5796adc9.dip0.t-ipconnect.de) ()
[21:13:28] *** Joins: Akiva (~Akiva@user/Akiva)
[21:17:12] *** Joins: econo (uid147250@user/econo)
[21:19:31] *** Quits: yin (~yin@user/zero) (Remote host closed the connection)
[21:20:42] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Remote host closed the connection)
[21:22:00] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4)
[21:24:52] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:24:52] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:24:52] *** Joins: wroathe (~wroathe@user/wroathe)
[21:28:11] <monochrom> This is why we say we're doing "functional programming".
[21:28:26] <monochrom> And why the other guys say they're doing "object programming".
[21:29:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:32:39] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:35:39] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[21:36:36] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[21:38:31] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:38:31] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:38:31] *** Joins: wroathe (~wroathe@user/wroathe)
[21:39:08] <EvanR> when I type a function, I want an immediate list of possible arguments to apply it to xD
[21:39:34] <EvanR> but seriously there's been much said about "power of the dot" OOP tooling
[21:39:47] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[21:40:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[21:41:52] <EvanR> the haskell equivalent would be ModuleName.<showMeTheThings> or upcoming myRecord.<showMeTheFields>
[21:43:00] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[21:45:17] *** Quits: deadmarshal (~deadmarsh@95.38.231.102) (Ping timeout: 240 seconds)
[21:46:36] *** Joins: Everything (~Everythin@37.115.210.35)
[21:50:12] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 268 seconds)
[21:50:59] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:50:59] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:50:59] *** Joins: wroathe (~wroathe@user/wroathe)
[21:51:31] *** Quits: phma (phma@2001:5b0:211c:9c18:ac13:6342:6a86:65e4) (Read error: Connection reset by peer)
[21:51:43] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[21:52:35] *** Joins: phma (phma@2001:5b0:211b:ad08:e5d3:c318:2701:f71f)
[21:52:43] *** Joins: coolnickname (uid531864@user/coolnickname)
[21:52:48] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:56:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:56:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:57:56] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:319d:53ed:6690:e5b4) (Remote host closed the connection)
[21:58:58] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:01:03] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:03:25] *** Joins: goepsilongo (~goepsilon@2806:263:c404:8000:f42f:2a6e:3c81:2519)
[22:03:43] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[22:06:42] *** Quits: Jing (~hedgehog@115.207.51.59) (Read error: Connection reset by peer)
[22:07:30] *** Joins: Jing (~hedgehog@2604:a840:3::1061)
[22:07:40] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[22:07:40] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[22:07:40] *** finn_elija is now known as FinnElija
[22:09:35] <Raito_Bezarius> does instance (MonadPlus m, Monoid e) => MonadPlus (ExceptT e m) exist somewhere in base libs?
[22:09:49] <Raito_Bezarius> so that a + b lifts the + of the value
[22:09:59] <Raito_Bezarius> (use case: ExceptT e (List a))
[22:11:01] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[22:13:53] <monochrom> It already exists. You just have to import, for example, Control.Monad.Except
[22:14:46] <monochrom> It is also more general: instance (Monad m, Monoid e) => MonadPlus (ExceptT e m)
[22:15:58] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:17:26] *** Joins: toastloop (toastloop@user/toastloop)
[22:18:20] *** Joins: cfricke (~cfricke@user/cfricke)
[22:20:20] *** Quits: cfricke (~cfricke@user/cfricke) (Client Quit)
[22:20:36] *** Joins: cfricke (~cfricke@user/cfricke)
[22:20:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:24:24] <Raito_Bezarius> I read this instance but it didn't look like that except1 + except2 would merge the result, monochrom 
[22:24:45] *** Quits: eron (~eron@186.192.87.8) (Ping timeout: 256 seconds)
[22:24:46] <Raito_Bezarius> how do you read: https://hackage.haskell.org/package/transformers-0.6.0.2/docs/src/Control.Monad.Trans.Except.html#line-248 ?
[22:24:56] <Raito_Bezarius> the Left e -> liftM … seems to ignore mx
[22:25:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[22:26:13] <monochrom> "Left . mappend e" where e came from "Left e" where "Left e" came from "ex" where "ex <- mx" does not look remotely like ignoring mx to me.
[22:26:38] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:26:46] <monochrom> How do I read it? It mappends the error of mx and the error of my.
[22:29:18] *** Quits: machinedgod (~machinedg@24.105.81.50) (Remote host closed the connection)
[22:29:44] <Raito_Bezarius> damn thanks monochrom 
[22:30:15] *** Joins: machinedgod (~machinedg@24.105.81.50)
[22:30:30] <Raito_Bezarius> and why Right x -> return (Right x) does the right thing wrt to mappend?
[22:30:36] <Raito_Bezarius> for my
[22:30:45] <Raito_Bezarius> sorry for the dumb question
[22:31:48] <monochrom> What is the type of x?  Is it e?
[22:32:09] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:32:57] <Raito_Bezarius> it's m
[22:35:40] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[22:35:58] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[22:36:18] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[22:47:42] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:48:05] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:52:36] *** Joins: cfricke (~cfricke@user/cfricke)
[22:55:53] *** Joins: nahtnam (~nahtnam@104-180-254-7.lightspeed.sntcca.sbcglobal.net)
[22:57:38] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:58:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:59:02] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[22:59:02] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[22:59:02] *** finn_elija is now known as FinnElija
[23:00:31] <hololeap> Raito_Bezarius: what you're looking for actually only requires Applicative
[23:00:35] <hololeap> :t liftA2 (<>)
[23:00:36] <lambdabot> (Applicative f, Semigroup c) => f c -> f c -> f c
[23:01:20] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[23:01:42] *** Quits: lbseale (~ep1ctetus@user/ep1ctetus) (Ping timeout: 260 seconds)
[23:01:47] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[23:01:56] <hololeap> :t liftA2 (<>) (Right (Sum 4)) (Right (Sum 5))
[23:01:57] <lambdabot> Num a1 => Either a2 (Sum a1)
[23:02:04] <hololeap> > liftA2 (<>) (Right (Sum 4)) (Right (Sum 5))
[23:02:06] <lambdabot>  Right (Sum {getSum = 9})
[23:02:30] *** Joins: deadmarshal (~deadmarsh@95.38.231.102)
[23:03:20] <nahtnam> Hello! Has anyone been able to get yesod working on an M1 mac? I'm trying with stack and I just cannot get it working. I do `stack new stock-checker yesodweb/postgres`. Then I do `stack install yesod-bin --install-ghc` which fails due to `Cocao` not being installed. I looked around and to fix this I run `stack config set resolver lts`. Then the
[23:03:21] <nahtnam> previous yesod bin command works. Then I try to do `stack build` which gives me a bunch of inter-dependency issues. I tried copy and pasting them into `extra-deps` but it seems like a circular thing. Finally it starts to build but then fails with presistent PostgreSQL with this issue: "symbol not found in flat namespace '_PQbackendPID'" and I can't
[23:03:21] <nahtnam> seem to figure this one out
[23:04:49] <Raito_Bezarius> ah thx, hololeap !
[23:06:17] <hololeap> Raito_Bezarius: you might also be interested in Ap from Data.Monoid, which has a Monoid instance for (Applicative f, Monoid a) => Ap f a
[23:06:38] <hololeap> basically, (<>) = liftA2 (<>) ; mempty = pure mempty 
[23:07:20] <Raito_Bezarius> what would be a idiomatic way to move forward wrt 19:39 in your eyes hololeap ?
[23:07:31] <Raito_Bezarius> should I do an instance for MonadPlus with Applicative?
[23:09:04] <hololeap> well, ExceptT doesn't actually fit the MonadPlus abstraction, because there's no general way to define what mzero is
[23:10:35] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[23:11:39] <hololeap> wait, no I'm wrong
[23:12:18] <hololeap> anyway that instance of MonadPlus is already defined in Control.Monad.Trans.Except
[23:13:35] <Raito_Bezarius> yes
[23:13:40] <Raito_Bezarius> but how does it actually merge the results?
[23:13:50] <Raito_Bezarius> (cc 19:54 and 20:00)
[23:14:52] <hololeap> you can use either <|> (from the Alternative typeclass) or mplus (from MonadPlus)
[23:15:08] <hololeap> but it's not entirely clear how you want it to behave
[23:15:53] <Raito_Bezarius> In the context of ExceptT e (List a), I'd like to add two ExceptT so that it merges the value if they are both Right _
[23:16:27] <Raito_Bezarius> i.e. a1 a2 :: ExceptT e (List a) ; a1 `mplus` a2 == Right (value a1 ++ value a2) ; something along these lines
[23:16:28] <hololeap> in that case you don't want to use Alternative or MonadPlus, but just plain old liftA2
[23:16:45] <Raito_Bezarius> Right
[23:16:54] <hololeap> if you used Alternative/MonadPlus it would just return the first Right value and would skip the second one
[23:17:21] <Raito_Bezarius> that was exactly what I said at 19:54, but monochrom said otherwise so I got confused
[23:17:27] <hololeap> > Right [1,2,3] `mplus` Right [4,5,6]
[23:17:29] <lambdabot>  error:
[23:17:29] <lambdabot>      • Ambiguous type variable ‘a0’ arising from a use of ‘show_M802144840221...
[23:17:29] <lambdabot>        prevents the constraint ‘(Show a0)’ from being solved.
[23:17:52] <hololeap> eh, bad example
[23:18:25] <hololeap> it might be easier to illustrate with Maybe
[23:18:38] <hololeap> > Just [1,2,3] `mplus` Just [4,5,6]
[23:18:40] <lambdabot>  Just [1,2,3]
[23:18:59] <hololeap> > liftA2 (<>) (Just [1,2,3]) (Just [4,5,6])
[23:19:00] <lambdabot>  Just [1,2,3,4,5,6]
[23:20:57] <Raito_Bezarius> hmm
[23:21:02] <Raito_Bezarius> what happens when there is two errors hololeap ?
[23:21:05] <Raito_Bezarius> are *
[23:21:13] <Raito_Bezarius> can I get the two errors *and* the two values?
[23:21:43] <hololeap> not with ExceptT but there is another data structure that can do that...
[23:21:55] <hololeap> if I can remember its name
[23:22:01] <geekosaur> Chronicle?
[23:22:13] <geekosaur> although there are others like it
[23:22:22] <geekosaur> These
[23:23:39] <geekosaur> Chronicle is a swiss army knife; These is the simple version
[23:23:54] <Raito_Bezarius> nice
[23:24:09] <hololeap> @hackage monad-chronicle
[23:24:10] <lambdabot> https://hackage.haskell.org/package/monad-chronicle
[23:24:32] <geekosaur> the real question is whetheryour operations make continuing after an error meaningful or not
[23:24:36] <hololeap> yeah that's it
[23:27:53] <dminuoso> I was tempted to use monad-chronicle, but found it was easier to model these effects manually and maintain IORefs of critical errors, errors and warnings.
[23:29:06] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:29:46] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:29:56] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[23:31:55] <Raito_Bezarius> geekosaur: in my context, yes, I want to collect all errors
[23:32:11] *** Joins: syrkis (~syrkis@109.59.170.168.mobile.3.dk)
[23:32:14] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[23:32:47] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 252 seconds)
[23:33:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[23:34:50] *** Joins: waleee (~waleee@h-98-128-229-110.NA.cust.bahnhof.se)
[23:35:09] *** Quits: juhp (~juhp@128.106.188.82) (Ping timeout: 256 seconds)
[23:36:23] *** Quits: syrkis (~syrkis@109.59.170.168.mobile.3.dk) (Quit: Client closed)
[23:36:28] <dminuoso> Raito_Bezarius: https://gist.github.com/dminuoso/b273e3a00a0542c4dceda3d98fa56cc0
[23:36:33] <dminuoso> This is how we do this manually 
[23:36:43] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:53] <Raito_Bezarius> Thanks dminuoso!
[23:36:53] <dminuoso> It's quite simple and yet gives us full power.
[23:37:39] <Raito_Bezarius> Indeed!
[23:37:42] <dminuoso> Raito_Bezarius: So our program is split into three phases, and each phase tries to complete even in the presence of errors (to try and collect as many errors as possible)
[23:38:05] <dminuoso> But we can only proceed into the next phase if there's no errors in the previous one (because each phase has certain preconditions that must be met)
[23:38:09] <Raito_Bezarius> Correct, I'm in a similar context
[23:41:23] *** Quits: Megant (megant@user/megant) (Ping timeout: 256 seconds)
[23:42:50] <dminuoso> Raito_Bezarius: So we then have this small combinator: https://gist.github.com/dminuoso/e2e3fc9071e3afaccaa182cc7ad071c5
[23:42:50] *** Joins: Megant (megant@user/megant)
[23:42:51] <hololeap> Raito_Bezarius: from everything you've said, it sounds to me like you're at a point in your learning where you should read through Typeclassopedia
[23:42:58] <hololeap> https://wiki.haskell.org/Typeclassopedia
[23:43:16] <dminuoso> Raito_Bezarius: And then we can do something like `Nothing <$ configErr "Stuff is broken"`
[23:43:31] <hololeap> it will clear up any confusion surrounding Applicative vs Alternative vs Monad vs MonadPlus, etc
[23:44:17] <dminuoso> (We even have a typeclass to generate useless defaults, where we can simply say `configErrDef "foo"`, and this will produce some bogus value as a result, while setting an error. 
[23:44:23] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[23:45:08] <dminuoso> i.e. when for some reason you *must* produce something of type String, you might have: "<nonexistant>" <$ configErr "failed to extract text"
[23:45:09] *** Joins: kadir (~kadir@88.251.54.120)
[23:46:27] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:48:42] <Raito_Bezarius> Thanks hololeap
[23:56:39] *** Joins: chexum (~quassel@gateway/tor-sasl/chexum)
[23:56:51] *** Quits: chexum_ (~quassel@gateway/tor-sasl/chexum) (Ping timeout: 276 seconds)
[23:57:44] *** Joins: jgeerds_ (~jgeerds@55d4ac73.access.ecotel.net)
[23:57:48] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:59:37] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
