[00:01:23] *** Joins: mro_ (~mro@port-92-195-167-77.dynamic.as20676.net)
[00:04:04] *** Quits: mro (~mro@port-92-195-167-77.dynamic.as20676.net) (Ping timeout: 272 seconds)
[00:04:35] *** Parts: travv0 (sid293381@user/travv0) ()
[00:25:03] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 252 seconds)
[00:45:00] *** Quits: mro_ (~mro@port-92-195-167-77.dynamic.as20676.net) (Quit: Leaving...)
[00:53:19] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:00:34] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Ping timeout: 256 seconds)
[01:01:19] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[01:07:12] <d_bot_> <VPhantom> Okay, this is simply cute: `let option_of_bool ?yes ?no c = if c then yes else no` ðŸ˜Ž
[01:11:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:03] <d_bot_> <undu> `let option_of_either = function | Left x -> Some x | Right _ -> None`
[01:14:52] <sleepydog> this is just me, but i would find the use of either of those functions harder to read than the if or match statements they replace
[01:15:20] <d_bot_> <undu> I think so as well ðŸ˜‰
[01:18:44] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:18:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:24:54] <d_bot_> <VPhantom> Yeah I didn't end up needing it but I just thought it was cute.
[01:34:24] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[01:37:03] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[01:40:35] <d_bot_> <mbacarella> is there any flavor left in this chewing gum?
[01:40:35] <d_bot_> <mbacarella> `match cond with true as c -> thing; c | c -> c`
[01:40:44] <d_bot_> <mbacarella> ðŸ˜›
[01:42:01] <d_bot_> <VPhantom> Clever!
[01:42:14] <d_bot_> <VPhantom> It's similar to the path I was at before I simplified with `&&`.
[01:44:02] <d_bot_> <mbacarella> can we exploit let punning somehow? ðŸ¤”
[01:47:31] <d_bot_> <VPhantom> I explored a let binding (`let- _ = condition in ...`) but it was not particularly interesting.
[02:37:07] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi) (Quit: Leaving.)
[02:42:37] <companion_cube> `(c && (thing; true) || (other_thing; false))`
[03:23:22] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Ping timeout: 256 seconds)
[03:35:13] *** Quits: gopiandcode (~gopiandco@137.132.219.134) (Quit: WeeChat 3.0)
[03:36:45] *** Quits: servytor (uid525486@id-525486.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:35:36] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:42:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:45:47] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[04:53:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:19:40] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:20:03] *** Quits: tizoc (~user@li296-221.members.linode.com) (Quit: Coyote finally caught me)
[06:26:39] *** Joins: tizoc (~user@li296-221.members.linode.com)
[07:32:40] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[07:33:10] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:41:38] *** Joins: bobo (~bobo@37.172.124.104)
[07:42:36] *** Quits: spip (~bobo@37.164.40.84) (Ping timeout: 272 seconds)
[07:48:48] *** Joins: mbuf (~Shakthi@171.61.199.222)
[07:59:54] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 252 seconds)
[08:27:46] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:34:11] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[09:56:39] *** Joins: gravicappa (~gravicapp@145.255.0.191)
[10:31:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:31:50] *** Joins: jlrnick (~josephler@2a01cb040a159400ad95b26e34a1d162.ipv6.abo.wanadoo.fr)
[11:55:08] *** Joins: oisota4 (~oisota@user/oisota)
[11:57:20] *** Quits: oisota (~oisota@user/oisota) (Ping timeout: 256 seconds)
[11:57:21] *** oisota4 is now known as oisota
[12:57:29] *** Joins: dextaa_ (~dextaa@user/dextaa)
[13:24:41] *** Joins: olle (~olle@212-181-59-82.customer.telia.com)
[13:25:57] <d_bot_> <reynir> @VPhantom I updated let-if with if%true: it transforms `if%true cond then something` into `let c = cond in if c then something; c`  https://github.com/reynir/let-if
[13:39:10] *** Quits: rak (~rak@debian/rak) (Quit: Segmentation fault (core recycled))
[13:39:26] *** Joins: rak (~rak@debian/rak)
[14:32:04] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:39] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:35:01] *** Joins: bartholin (~bartholin@158.110.71.61)
[15:08:57] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[15:09:02] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Ping timeout: 240 seconds)
[15:21:09] <d_bot_> <VPhantom> Nice! Hey I already had this repo starred so I guess I saw it before in my crazy adventures. ðŸ˜‰
[15:40:55] *** Joins: humasect (~humasect@2001:1970:57e0:4100::1ae0)
[16:11:00] *** Quits: bartholin (~bartholin@158.110.71.61) (Ping timeout: 240 seconds)
[16:12:54] *** Joins: bartholin (~bartholin@158.110.71.61)
[16:19:42] *** Quits: Haudegen (~quassel@178.115.237.87.static.drei.at) (Quit: Bin weg.)
[16:30:05] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[17:01:27] *** Joins: dextaa_ (~dextaa@user/dextaa)
[17:06:32] *** Quits: humasect (~humasect@2001:1970:57e0:4100::1ae0) (Quit: Leaving...)
[17:31:27] *** Joins: Haudegen (~quassel@91.114.49.10)
[17:33:46] *** Quits: dextaa_ (~dextaa@user/dextaa) (Remote host closed the connection)
[17:35:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[17:45:59] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:49:57] *** Quits: jlrnick (~josephler@2a01cb040a159400ad95b26e34a1d162.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[18:09:40] <d_bot_> <VPhantom> I just whipped up a little pattern match on Godbolt: <https://godbolt.org/z/cWh7a6enT> I'm not familiar with much of assembly but is it normal that I don't see the strings `"use"` nor `"documentzz"` in the generated output? I do see the three failure strings but not those pattern strings. I'm trying to understand if the compiler compares strings once per case or if it groups them in a tree but I can't figure much out from the a
[18:10:13] <d_bot_> <VPhantom> (This is part of my "trying to know what I'm doing" series. ðŸ˜›)
[18:11:10] <d_bot_> <VPhantom> Note that I extended "document" with "zz" to make sure it was over 8 bytes long, in case the compiler felt frisky and decided to compare strings as integers.
[18:14:32] <d_bot_> <VPhantom> I don't even see a reference to Stdlib's `compare` function in there. ðŸ¤”
[18:21:43] <d_bot_> <reynir> line 105 or so
[18:22:48] <d_bot_> <reynir> seems like the compiler does integer comparison with "document" and then "zz"
[18:24:04] <olle> Any news in type-land this week?
[18:24:40] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[18:30:59] *** Joins: epony (epony@user/epony)
[18:32:05] <d_bot_> <VPhantom> Oh wow, nice! So it _does_ compare strings as integers when they're short (which they usually are). That's a really neat trick!
[18:34:00] <d_bot_> <VPhantom> Seems to use 63-bit integers too, because dropping to "documen" removed the second check. Thanks for the tip! I totally missed it.
[18:35:08] <d_bot_> <reynir> yea, it took me some time staring at the code to spot it
[19:20:52] *** Joins: gareppa (~gareppa@user/gareppa)
[19:21:37] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:21:46] *** Quits: olle (~olle@212-181-59-82.customer.telia.com) (Remote host closed the connection)
[19:30:58] *** Quits: bartholin (~bartholin@158.110.71.61) (Quit: Leaving)
[19:42:15] *** Quits: bobo (~bobo@37.172.124.104) (Ping timeout: 256 seconds)
[19:42:17] *** Joins: spip (~bobo@37.164.82.97)
[20:21:38] *** Quits: Haudegen (~quassel@91.114.49.10) (Quit: Bin weg.)
[20:34:00] *** Joins: zebrag (~chris@user/zebrag)
[21:04:23] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[21:05:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:06:23] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:40] *** Joins: epony (epony@user/epony)
[21:27:06] *** Joins: Anarchos (~Anarchos@88.168.112.216)
[21:43:59] *** Joins: Haudegen (~quassel@178.115.237.87.static.drei.at)
[21:54:32] *** Quits: mbuf (~Shakthi@171.61.199.222) (Quit: Leaving)
[21:59:50] <d_bot_> <mbacarella> well that's awesome
[22:00:31] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-98.elisa-laajakaista.fi)
[22:00:48] <d_bot_> <mbacarella> it's still faster to match on sum types? because each variant is actually mapped to an integer?
[22:02:06] <d_bot_> <mbacarella> assertion check. trying to avoid internalizing "actually, matching short strings is fast!"
[22:02:17] <d_bot_> <mbacarella> slash faster than matching on sum types
[22:03:48] <d_bot_> <mbacarella> er, is matching on short strings faster than matching on polymorphic variants? ðŸ¤”
[22:04:13] <d_bot_> <mbacarella> or, at least, equivalent?
[22:04:39] <d_bot_> <mbacarella> i understand sum types compute to jump tables but polymorphic variants compute to if-then-else-if-then-else
[22:08:04] <d_bot_> <VPhantom> Polymorphic variants without arguments are unboxed btw, the same as regular variants.
[22:09:08] <d_bot_> <VPhantom> I'm a rookie but I would expect a <7 character string, an int, a variant without arguments and a polymorphic variant without arguments to be handled similarly or identically in the resulting assembly. ðŸ¤”
[22:09:23] <d_bot_> <mbacarella> to the godbolt!
[22:16:46] <d_bot_> <mbacarella> https://godbolt.org/z/ePEaME8WY
[22:16:59] <d_bot_> <mbacarella> i think the regular variant clearly wins
[22:18:40] *** Joins: bartholin (~bartholin@158.110.71.61)
[22:21:41] <dh`> oops, from way back in the scroll:
[22:21:47] <dh`> <companion_cube> dh`: what is the point of using async IOs if you're going to block on them immediately, though?
[22:21:54] <dh`> exercising the async I/O path
[22:22:11] <dh`> that is, if you have a separate async I/O path it'll be rarely used and it's quite likely to not actually work
[22:22:37] <dh`> if you have only the one I/O path any problems will turn up immediately
[22:22:41] <companion_cube> I guess it makes sense
[22:22:50] <companion_cube> if you have both, that is, but that sounds bad :D
[22:23:00] <dh`> this is more important inside kernels than in language runtimes though
[22:23:39] <dh`> most language runtimes don't do anything particularly complicated for generic I/O, so it's just a thin wrapper around the OS
[22:24:01] <dh`> (unless trying to do things like fake up async I/O using threads)
[22:24:21] <dh`> whereas in the OS the I/O path is nontrivial and it's easy for it to be bust
[22:38:58] <sleepydog> the recent io_uring vulnerability comes to mind ...
[23:13:12] *** Joins: servytor (uid525486@id-525486.hampstead.irccloud.com)
[23:13:16] <servytor> can someone explain to me how https://github.com/inhabitedtype/ocaml-aws is 215k lines of OCaml code, 334k lines of json, but https://github.com/cognitect-labs/aws-api is only 4k of Clojure and  10k of json?
[23:13:41] <d_bot_> <VPhantom> @mbacarella I'm surprised, but it does appear that the stock compiler is more aggressive with regular variants. I tried flambda and `-O2` and same difference.
[23:14:10] <d_bot_> <Et7f3 (@me on reply)> you can't otherwise how do you know at runtime short/long string one is a pointer and other is not
[23:14:33] <d_bot_> <VPhantom> I'm not saying they're handled _interchangeably_, just in a similar way.
[23:15:04] <d_bot_> <Et7f3 (@me on reply)> but the ocaml compiler when we match on many string try to find best char to look for difference
[23:17:09] *** Quits: bartholin (~bartholin@158.110.71.61) (Quit: Leaving)
[23:18:08] *** Joins: bartholin (~bartholin@158.110.71.61)
[23:19:00] *** Quits: bartholin (~bartholin@158.110.71.61) (Client Quit)
[23:19:56] <d_bot_> <Et7f3 (@me on reply)> ðŸ˜³ the string was "abcdefghi"
[23:19:57] <d_bot_> <Et7f3 (@me on reply)> https://cdn.discordapp.com/attachments/436568060288172044/951929994198798346/unknown.png
[23:23:00] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 256 seconds)
[23:23:08] *** Joins: tomku (~tomku@user/tomku)
[23:23:40] <d_bot_> <VPhantom> We can see the endianness.
[23:24:52] *** Quits: Anarchos (~Anarchos@88.168.112.216) (Quit: Vision[]: i've been blurred!)
[23:35:46] *** Quits: gravicappa (~gravicapp@145.255.0.191) (Ping timeout: 272 seconds)
[23:40:17] <dh`> (I didn't read the scroll, suppose I should have)
[23:40:20] <dh`> oops
[23:42:59] <d_bot_> <RegularSpatula> I didnâ€™t really read your message well enough and thought at first that Cognitect had started writing ocaml and got really excitedâ€¦
[23:43:34] <companion_cube> servytor: maybe the clojure code is generated on the fly from the json files?
[23:43:50] <sleepydog> servytor: I assume you're asking in good faith. the ocaml version generates a separate module for each product. the clojure project looks to do more at runtime
