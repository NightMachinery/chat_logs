[00:06:21] <mfiano> Yep. I have recently started treating type declarations as a dangerous tool.
[00:07:19] <mfiano> I would much rather use check-type or classes than to have undefined behavior across implementations, or even different versions of the same implementation...or even random behavior on same version of same implementation. undefined is undefined
[00:12:52] *** Joins: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca)
[00:13:50] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[00:14:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[00:15:27] *** Parts: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca) ()
[00:19:17] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 264 seconds)
[00:23:03] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[00:29:58] *** Quits: slyrus (~slyrus@192-184-223-165.static.sonic.net) (Quit: Leaving)
[00:33:50] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[00:35:59] *** Joins: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se)
[00:50:25] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[00:51:17] *** Joins: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca)
[00:52:03] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[00:53:48] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:00:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[01:04:06] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[01:07:24] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[01:09:06] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:12:41] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 264 seconds)
[01:13:10] *** Quits: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca) (Quit: Izem)
[01:13:19] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[01:19:35] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[01:21:31] *** Joins: Wairu_Goodman (~Wairu_Goo@2804:389:e01c:680f:2f18:b9c9:d819:8cff)
[01:22:28] *** Joins: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca)
[01:29:27] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[01:34:18] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[01:35:06] *** Joins: dra (~dra@2a04:4540:6404:e500:c11d:e40:1d19:13dd)
[01:35:11] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:36:46] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:37:36] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 265 seconds)
[01:39:34] *** Lord_of_Life_ is now known as Lord_of_Life
[01:40:35] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:49:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[01:51:55] *** Quits: dra (~dra@2a04:4540:6404:e500:c11d:e40:1d19:13dd) (Quit: Leaving)
[01:54:16] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[01:54:23] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[02:13:58] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[02:15:26] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
[02:15:48] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2.1)
[02:20:14] *** Quits: gaqwas (~john@dynamic-077-009-034-052.77.9.pool.telefonica.de) (Ping timeout: 246 seconds)
[02:29:33] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Ping timeout: 260 seconds)
[02:34:27] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[02:41:30] *** Quits: eddof13 (~textual@200-188-5-138.static.axtel.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:43:02] *** Quits: cuz (~user@38.140.58.234) (Ping timeout: 246 seconds)
[02:43:59] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[02:49:37] *** Joins: Oladon (~olad@98.43.81.226)
[03:03:05] *** Joins: dre (~dre@2001:8003:c932:c301:3f8b:db9:edc2:8200)
[03:07:32] *** Parts: Izem (~Izem@bras-base-london1483w-grc-31-74-12-158-179.dsl.bell.ca) (Good Bye)
[03:08:34] *** Quits: rgherdt (~rgherdt@95.90.244.86) (Ping timeout: 246 seconds)
[03:13:38] *** Quits: dre (~dre@2001:8003:c932:c301:3f8b:db9:edc2:8200) (Quit: Leaving)
[03:14:38] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[03:16:16] *** Joins: cjb (~cjbayliss@user/cjb)
[03:17:50] *** Quits: pve (~pve@178-55-35-188.bb.dnainternet.fi) (Quit: leaving)
[03:18:14] *** Joins: mariari (~mariari@user/mariari)
[03:20:33] *** Quits: random-nick (~random-ni@87.116.183.65) (Ping timeout: 264 seconds)
[03:22:25] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:27:10] *** Quits: frgo (~frgo@p200300deef0cee0040b7498668af8379.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:27:38] *** Joins: frgo (~frgo@p200300deef0cee0040b7498668af8379.dip0.t-ipconnect.de)
[03:28:34] *** Joins: elderK (uid205007@id-205007.helmsley.irccloud.com)
[03:29:04] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[03:34:49] *** Joins: random-nick (~random-ni@87.116.180.119)
[03:39:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[03:47:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:57:27] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[04:01:59] *** Joins: srhm (~srhm@user/srhm)
[04:03:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 246 seconds)
[04:07:58] <CodeBitCookie[m]> Hello!
[04:09:30] <CodeBitCookie[m]> Is there any library which can make CL pretty well integrated with functional programming instead of importing multiple loosely related libraries?
[04:09:59] <CodeBitCookie[m]> Even if it is any other dialect of Lisp, or something like that.
[04:12:26] <hayley> What do you want exactly? CL with Alexandria suffices for lists and vectors.
[04:12:54] <CodeBitCookie[m]> wait a minute, are you the emacs-shibe guy on reddit?
[04:13:14] <hayley> And the name "Lisp dialect" is a misnomer as such languages are mutually incomprehensible and don't interoperate.
[04:13:24] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:14:08] <hayley> i.e. you couldn't exactly import Clojure as a CL library, for example.
[04:14:28] <CodeBitCookie[m]> Okay, but everything isn't immutable by default and common lisp isn't lazy. No infinite sequences AFAIK
[04:15:19] <CodeBitCookie[m]> hayley: Yeah I know, I meant that I could even switch to another language or Lisp to get this functionality
[04:15:37] <CodeBitCookie[m]> and if you ask me what I mean by functionality:
[04:16:29] <CodeBitCookie[m]> to get the good REPL and interactive programming with common lisp (+ all the goodies that come with CL) and good FP integration like clojure as you mentioned
[04:17:55] <CodeBitCookie[m]> People recommend FSet, GTGIW (or something with those letters), Series, and others but some are abandonware too
[04:17:57] *** Joins: cuz (~user@2601:182:cc02:8b0:88fe:7ac8:b1af:1fac)
[04:18:06] *** Quits: cuz (~user@2601:182:cc02:8b0:88fe:7ac8:b1af:1fac) (Remote host closed the connection)
[04:18:18] *** Joins: cuz (~user@2601:182:cc02:8b0:88fe:7ac8:b1af:1fac)
[04:18:36] <hayley> FSet is good, but also see cl-hamt for hash-array-mapped tries.
[04:19:01] <CodeBitCookie[m]> I mean can you give me a set of packages that I could import to get a good experience? Thanks
[04:19:21] <CodeBitCookie[m]> cl-hamt looks good too
[04:19:31] <hayley> The only sequence function in CL without a pure equivalent is SORT, but that can be alleviated by copying the sequence before sorting.
[04:20:28] <CodeBitCookie[m]> what do you mean? in a different library or normal CL?
[04:20:30] <CodeBitCookie[m]> oh in cl-hamt
[04:20:33] <CodeBitCookie[m]> okay sorry
[04:20:42] <hayley> In Common Lisp.
[04:21:10] <CodeBitCookie[m]> wait, so cl-hamt is already in CL?
[04:21:23] <lotuseater> CodeBitCookie[m]: no it's about SORT.
[04:21:28] <hayley> No, I mean that the only sequence function in Common Lisp without a pure equivalent is SORT.
[04:21:35] <lotuseater> it changes your sequence in place
[04:21:45] <hayley> Else, you have no problems treating lists immutably.
[04:22:00] <CodeBitCookie[m]> Ohhh
[04:22:30] <CodeBitCookie[m]> so how can you copy it in that context and why isn't only sort implemented?
[04:22:51] <CodeBitCookie[m]> by copy it I mean, copy the collection before passing it to sort
[04:23:02] <hayley> (sort (copy-seq stuff) #'<)
[04:24:27] <CodeBitCookie[m]> Ahhhh
[04:24:34] <CodeBitCookie[m]> so I only use cl-hamt?
[04:24:44] <lotuseater> but be careful, when doing COPY-SEQ on a VECTOR it returns a SIMPLE-VECTOR, so if your original was adjustable or had a fill-pointer, then in the new this is erased
[04:24:50] <loke[m]> lotuseater: It may change the sequence in place. No guarantees, something you can't really use the old reference anymore.
[04:25:03] <lotuseater> and for lists there is: COPY-LIST
[04:25:21] <lotuseater> loke[m]: sounds like a job for WSCL :)
[04:25:57] <CodeBitCookie[m]> what's WSCL
[04:26:11] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[04:26:15] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[04:26:21] <hayley> No, it would not be appropriate for WSCL, as copying or not depends on the sorting algorithm used.
[04:26:24] <lotuseater> Well-specified Common Lisp
[04:26:29] *** Quits: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com) (Client Quit)
[04:26:35] <lotuseater> then maybe not
[04:26:45] <CodeBitCookie[m]> ah
[04:27:07] <CodeBitCookie[m]> so aside from cl-hamt what about the other FP features?
[04:29:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[04:29:28] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[04:31:05] <CodeBitCookie[m]> sorry for all of my questions, its just that I'm kind of annoyed there isn't much material online for this kind of stuff
[04:31:46] <mfiano> a:copy-array will preserve those properties
[04:32:30] <CodeBitCookie[m]> I mean like for generating infinite sequences you can use this: https://github.com/cbeo/gtwiwtg
[04:32:30] <lotuseater> mfiano: we had that some days ago
[04:32:45] <mfiano> i cant remember what i ate for breakfast today
[04:33:18] <lotuseater> Sorry with that I can't help much. :)
[04:33:46] <lotuseater> CodeBitCookie[m]: with what goes your prior experience with FP?
[04:34:21] <mfiano> I think CL's big benefit is being able to intermix several paradigms in the same program
[04:34:27] <mfiano> Well one of them, anyway
[04:34:52] <CodeBitCookie[m]> not much but I have used Haskell, OCaml and Clojure (Only after common lisp ;))
[04:35:19] <lotuseater> or even being capable of having paradigms that are not experienced yet
[04:35:36] <lotuseater> CodeBitCookie[m]: ah I thought so ^^
[04:36:53] <CodeBitCookie[m]> @lotuseater yeah but I think the whole point of FP is to restrict yourself for freedom
[04:36:57] <CodeBitCookie[m]> or somethin
[04:37:06] <CodeBitCookie[m]> g*
[04:39:46] <lotuseater> it's about reducing unneccessary side-effects, having good compatibility and writing things as real functions, so with the same inputs always returning the same outputs
[04:40:17] *** Quits: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net) (Ping timeout: 264 seconds)
[04:42:00] <CodeBitCookie[m]> yeah, so how can I get something like that with common lisp?
[04:43:16] <lotuseater> do you really have to overfocus on that so much?
[04:43:33] <CodeBitCookie[m]> what do you mean?
[04:44:21] <CodeBitCookie[m]> you mean like not do functional programming and just live a normal life? I haven't though of that.
[04:45:03] <lotuseater> no I like it too very much, before CL I was into Haskell at most
[04:45:52] <CodeBitCookie[m]> I am into both languages right now.
[04:45:58] <CodeBitCookie[m]> So what happened to Haskell?
[04:46:25] <lotuseater> and maybe too much topics are bound to FP that not really are like static typing, lazy lists, wrapping a subset of category theory over your things or even dependent types
[04:47:02] <lotuseater> what do you mean happened? I think they have a foundation or so since last year.
[04:47:17] <mfiano> FP is not very well defined. The one we are talking about now is usually called referential transparency
[04:47:31] <lotuseater> you could look into that bundle of libs: https://github.com/vseloved/rutils
[04:47:49] <CodeBitCookie[m]> I meant what happened to your interest in Haskell.
[04:47:51] <mfiano> FP could just as well mean having first-class functions, in which case Common Lisp is a very functional (among other paradigms) language
[04:48:24] <CodeBitCookie[m]> "referential transparency" Oh so thats what it meant.
[04:49:33] <lotuseater> CodeBitCookie[m]: I'm of course interested in this, also more than just using the language, but combining fundamental ideas (that stand the test of time), that's also good. :)
[04:49:45] <White_Flame> one might rename the older definition of FP as "function-oriented programming"
[04:50:42] <lotuseater> White_Flame: so restricting to the basic idea would be for first not too wibbly-wobbly
[04:51:40] <CodeBitCookie[m]> lotuseater: So even drop the recursion!
[04:51:44] <CodeBitCookie[m]> ?
[04:51:45] <lotuseater> CodeBitCookie[m]: but I also learned (for myself) that static typing can stand in your way easily in more than one sense
[04:51:57] <CodeBitCookie[m]> wdym?
[04:52:39] <lotuseater> it can get a mess and break your legs
[04:52:42] <mfiano> Types can change at runtime. The compiler can even be invoked at runtime.
[04:52:56] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Quit: leaving)
[04:53:14] <CodeBitCookie[m]> really? I mean I never heard or seen that one before
[04:53:19] <mfiano> static anything in such a dynamic language makes for lots amputations
[04:53:35] <lotuseater> CodeBitCookie[m]: recursion would be another mathematical idea coming across :)
[04:54:05] <mfiano> It is much more common to iterate than to recurse in common lisp
[04:54:19] <mfiano> BEcause it is often faster and produces much more readable code
[04:56:07] <CodeBitCookie[m]> so basically all this time using FP and now its not good anymore?
[04:56:22] <mfiano> there is no silver bullet in computing
[04:56:26] <lotuseater> I didn't say so.
[04:56:38] <mfiano> With CL we can mix and match anything and everything and get the benefits of them all
[04:56:44] <CodeBitCookie[m]> lotuseater: not AS good?
[04:56:59] <mfiano> "good" is subjective
[04:57:14] <mfiano> It depends on what you are doing and what language you are using :)
[04:57:23] <CodeBitCookie[m]> mfiano: Okay that looks like an interesting aproach. How?
[04:57:31] <mfiano> How what?
[04:57:49] <lotuseater> even no silver bullet for hunting down crabs ^^
[04:57:55] <CodeBitCookie[m]> How do you mix and match anything and everything and get the benefits of thema ll
[04:58:07] <lotuseater> practice
[04:58:10] <CodeBitCookie[m]> lotuseater: what does that mean? :)
[04:58:18] <CodeBitCookie[m]> okay
[04:58:26] <lotuseater> talking to people and developing your theory background
[04:58:45] <White_Flame> and just getting used to having such flexibility
[04:58:49] <lotuseater> CodeBitCookie[m]: something like an insider: crabs -> rust
[04:59:01] <lotuseater> not fearing freedom :)
[04:59:18] <mfiano> By being a software engineer and making your own decisions on data structures, algorithms, and architecture, as opposed to the guided path Clojure forces you down
[04:59:32] <White_Flame> I think the hardest is to integrate both pure functional & mutatey code correctly.  It needs a hard boundary where only pure stuff exists, that the mutatey stuff can call from the outside
[04:59:56] <White_Flame> but everything else style-wise tends to integrate quite easily, without a lot of hard discipline
[05:00:55] <CodeBitCookie[m]> so now I don't use FP as rigorously as haskell or even as lightly as clojure. Focus more on imperative and just do whatever I want?
[05:02:02] <mfiano> Common Lisp's killer tool is CLOS...it's an integral part of the language. OOP should be at the top of your thoughts, but not that class-centric OOP crap from other languages
[05:02:03] <lotuseater> be specific would be another advise
[05:03:31] <CodeBitCookie[m]> "but not that class-centric OOP crap from other languages" My former-java brain can't understand this aside from the fact that I think OOP is bad now. Now I half know that not all OOP is bad but still can't tell apart the difference
[05:03:43] <CodeBitCookie[m]> "be specific would be another advise" Can you give me an example?
[05:03:44] <CodeBitCookie[m]> :)
[05:03:48] <mfiano> Instead of inheritance being the main form of polymorphism, we have generic functions to define protocols.
[05:04:24] <mfiano> We also have a meta-object protocol, so we can redefine how OOP behaves without requiring language implementors to do this for us.
[05:05:25] <mfiano> OOP is very bad when everything belongs in a class.
[05:05:30] <CodeBitCookie[m]> Okay guys I have to sleep but thanks for all the help. Will think it through :D. I really appreciate your efforts in helping me. I will be back tommorrow inshallah.
[05:05:41] <mfiano> and the OOP system cannot be extended
[05:05:59] <CodeBitCookie[m]> thats interesting
[05:06:17] <mfiano> methods are not members of classes in Common Lisp.
[05:06:39] <CodeBitCookie[m]> whaaaaat?
[05:06:40] <CodeBitCookie[m]> how?
[05:06:45] <lotuseater> CodeBitCookie[m]: hm one example could be when you know "oh at this point we have a simple-bit-vector" then using SBIT for access can be more specific by reading the code than using AREF
[05:06:59] <mfiano> Class-centric OOP languages have single-dispatch. We have multi-dispatch
[05:07:22] <lotuseater> please com back CodeBitCookie[m] if you want
[05:07:24] <mfiano> A method is applicable if all of its specialized arguments are of the correct class or instance
[05:07:47] <lotuseater> haha i knew this question was coming
[05:07:53] *** Quits: random-nick (~random-ni@87.116.180.119) (Ping timeout: 264 seconds)
[05:07:54] <White_Flame> consder ye olde two-object collison, (collide <ball> <wall>).  When forced to put that method in a singular class, do you put it in Ball or Wall?  In CLOS, you just have the "collide" generic function, which _takes_ class instances as parameters
[05:08:21] <lotuseater> it's even not really better when having for example this "impl" stuff for structs in rust
[05:08:25] <mfiano> Notice how I said "or instance". That comes in handy often too
[05:08:47] <mfiano> Well if he left...
[05:08:55] <CodeBitCookie[m]> lotuseater: definitely will come back :)
[05:09:28] <CodeBitCookie[m]> all of this look interesting but tbh I pulled an all nighter and its 6 am and I can barely understand anything you guys are saying.
[05:09:45] <CodeBitCookie[m]> Till tommorow.
[05:09:46] <mfiano> minion: tell CodeBitCookie[m] about pcl
[05:09:49] <minion> CodeBitCookie[m]: look at pcl: pcl-book: "Practical Common Lisp", an introduction to Common Lisp by Peter Seibel, available at http://www.gigamonkeys.com/book/ and in dead-tree form from Apress (as of 11 April 2005).
[05:09:50] <CodeBitCookie[m]> bye
[05:10:08] <lotuseater> good, i know it can be a bit too much at once and for staying motivated, but you will benefit, even if just your viewpoint and thinking about things changes/widens
[05:10:11] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[05:10:13] <CodeBitCookie[m]> Yeah that book got me into COmmon Lisp
[05:10:24] <CodeBitCookie[m]> Didn't read it in full but is planned
[05:10:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[05:11:03] <mfiano> Once you get used to CL's object system, you too will see why OOP is often called "bad"
[05:11:12] <lotuseater> ah so you're 4 time zones wider than me
[05:11:49] <White_Flame> eh, it's very easy to get to "OO is bad" with just java-ish OO :-P
[05:11:55] <mfiano> Yeah
[05:12:06] <mfiano> Very few languages have CL-like object systems.
[05:12:38] <mfiano> Clojure has multimethods which are sort of like generic functions but with custom dispatchers, which we can emulate in CL with filtered-functions and the like
[05:12:40] <lotuseater> Dylan would be an example, or not?
[05:13:19] <mfiano> Julia have overloading of types and arity and lets the JIT work out the code when a method is first called
[05:13:52] <lotuseater> ah right and its other metaprogramming capabilities
[05:13:53] *** Quits: cuz (~user@2601:182:cc02:8b0:88fe:7ac8:b1af:1fac) (Ping timeout: 264 seconds)
[05:14:15] <mfiano> anything with decoupled methods from classes/multi-dispatch would be a decent object system. To go the extra mile, you need th extensibility classes allow via the MOP...generic functions are just funcallable standard objects
[05:14:36] *** Joins: CptKirk20 (~CptKirk@70-59-5-216.hlrn.qwest.net)
[05:14:41] *** CptKirk20 is now known as cptjimkirk
[05:14:44] *** cptjimkirk is now known as CptJimKirk
[05:14:52] <mfiano> or well can be
[05:15:17] *** Quits: CptKirk (~CptKirk@97-118-72-33.hlrn.qwest.net) (Ping timeout: 256 seconds)
[05:17:40] <mfiano> Most newer languages think of meta-programming as having macros. Not reader macros, symbol macros, or compiler macros. Just macros, usually very awkward to use due to not being homoiconic, or when easy (like in Crystal), is not using the full subset of the host language and is not much different from a C preprocessor.
[05:17:52] <mfiano> But whern I think of metaprogramming, I also think of the MOP :)
[05:19:43] * White_Flame does the trendy thing and starts selling OOaaS
[05:21:41] <mfiano> Regarding compatability of different use-cases and performance of a language, the authors of AMOP say
[05:21:47] <mfiano> "The unavoidable conclusion is that no single language will ever be universally  appropriate, no matter how clever its design. So we adopted a different solution. Rather than supplying the user with a fixed, single point in the space of all language designs and  implementations, we would instead support a region of possible designs within that overall space. This is the essence of the
[05:21:49] <mfiano> metaobject protocol approach"
[05:22:09] <mfiano> So I treat it as a tool to give me performance or flexibility or both
[05:24:47] *** Quits: attila_lendvai (~alendvai@C2267416.nat.pool.telekom.hu) (Ping timeout: 268 seconds)
[05:26:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[05:26:33] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[05:27:22] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[05:37:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[05:38:24] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[05:41:18] *** Quits: waleee (~waleee@h-98-128-228-119.na.cust.bahnhof.se) (Ping timeout: 252 seconds)
[05:50:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[05:50:58] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[05:53:49] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[06:00:32] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[06:11:50] *** Quits: brettgilio (~brettgili@x-node.gq) (Quit: Leaving...)
[06:12:38] *** Joins: brettgilio (~brettgili@x-node.gq)
[06:14:35] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[06:22:07] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:26:38] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 246 seconds)
[06:29:25] *** Joins: akoana (~ah@user/akoana)
[06:40:48] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[06:41:59] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[06:53:44] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[07:06:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[07:13:01] <White_Flame> what's an idiomatic way to convert #p"foo.bar" to #p"foo.bar.bak" ?
[07:13:12] <White_Flame> also with a full directory in the pathname
[07:18:01] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[07:18:55] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[07:28:22] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[07:29:08] <CptJimKirk> has anyone had a chance to use sb-md5?
[07:29:22] <CptJimKirk> I'm not really sure what the functions do, but I don't seem to be getting the results I expect
[07:32:49] <beach> Good morning everyone!
[07:33:38] *** Quits: igemnace (~ian@user/igemnace) (Ping timeout: 252 seconds)
[07:34:42] *** Parts: pranavats (3fba1d1b34@jabberfr.org) ()
[07:40:51] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[07:45:50] <raeda> Morning beach
[07:47:22] <lotuseater> CptJimKirk: you may want to look into ironclad
[07:53:01] *** Joins: cjb41988 (~cjbayliss@user/cjb)
[07:53:20] *** Quits: cjb41988 (~cjbayliss@user/cjb) (Client Quit)
[07:53:29] <CptJimKirk> ironclad md5 expects a buffer
[07:54:50] *** Joins: cjb84397 (~cjbayliss@user/cjb)
[07:55:15] *** cjb is now known as Guest2446
[07:55:15] *** cjb84397 is now known as cjb
[07:55:16] *** Quits: Guest2446 (~cjbayliss@user/cjb) (Ping timeout: 260 seconds)
[07:58:06] <CptJimKirk> i cannot seem to call ironclad from within the `with-input-from-string` macro
[07:58:39] <CptJimKirk> I have it quickloaded, it exists and I "required" it, but the exports of ironclad don't seem to exist when I call it within the macro
[08:02:42] <CptJimKirk> I'm finding all kinds of documentation but nothing is defined
[08:02:58] <CptJimKirk> I have no idea what I'm meant to be looking for trying to convert a string to an 8 bit buffer
[08:06:36] <hayley> White_Flame: metaobject.io
[08:06:54] <hayley> (Just try not to get sued by metaobject.com or metamodular.com)
[08:08:46] *** Quits: srhm (~srhm@user/srhm) (Quit: Konversation terminated!)
[08:10:56] *** Quits: taiju (~taiju@M014013236064.v4.enabler.ne.jp) (Ping timeout: 246 seconds)
[08:12:08] *** Quits: semz (~none@user/semz) (Ping timeout: 252 seconds)
[08:15:44] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 264 seconds)
[08:17:52] *** Joins: selwyn (~selwyn@user/selwyn)
[08:21:03] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[08:24:22] <Bike> CptJimKirk: "call it within the macro"? what are you doing, exactly? with-input-from-string isn't going to affect symbols in your code.
[08:24:27] *** Joins: semz (~none@user/semz)
[08:25:30] <CptJimKirk> I had (ql:quickload 'ironclad), then something like (with-input-from-string (ironclad:something ....))
[08:25:36] *** Joins: igemnace (~ian@user/igemnace)
[08:25:39] <CptJimKirk> then something is not part of ironclad or some such
[08:25:46] <CptJimKirk> but I've completely changed everything since then
[08:25:49] <CptJimKirk> and now I'm using uiop
[08:26:34] <Bike> um, okay. it sounds like something went wrong with the loading, i guess.
[08:30:29] *** Joins: taiju (~taiju@M014013236064.v4.enabler.ne.jp)
[08:30:36] <CptJimKirk> I have a new issue
[08:30:52] <CptJimKirk> in my asd my depend-on contains #:uiop
[08:31:08] <CptJimKirk> in my package I :use #:uiop
[08:31:13] <CptJimKirk> but I'm getting a name error on load-system
[08:31:31] <CptJimKirk> "uiop/driver causes name conflicts"
[08:31:42] <CptJimKirk> even after a slime-restart
[08:32:13] <Bike> does it tell you what symbols or packages are involved
[08:33:07] <CptJimKirk> https://pastebin.com/raw/TQFydbaa
[08:33:17] <CptJimKirk> I can resolve it
[08:33:24] <CptJimKirk> but I dont want this every time
[08:33:50] <Bike> you can use shadowing import in your package definition
[08:34:27] <Bike> e.g. if you want e.g. if you want str:emptyp, throw in (:shadowing-import "STR" "EMPTYP")
[08:34:34] <Bike> wow awesome typing bike
[08:34:42] <Bike> :shadowing-import-from, rather
[08:35:21] <Bike> what this error means, if you can't tell, is that str and uiop both export a symbol called "EMPTYP"
[08:35:39] <Bike> so your package can't use both packages without an ambiguity
[08:36:10] <Bike> (which is why restarting doesn't help - there's an actual problem)
[08:38:51] *** Joins: nature (~nature@mail.blazebone.com)
[08:40:00] <CptJimKirk> so how do I disambiguate?
[08:40:16] *** Parts: akoana (~ah@user/akoana) ()
[08:40:29] <Bike> shadowing-import-from, like i said
[08:40:53] <Bike> tells it to import the symbol from whichever package, which overrides the general package use
[08:47:37] *** Quits: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f) (Remote host closed the connection)
[08:55:57] *** Quits: CptJimKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Quit: Client closed)
[08:58:25] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[08:58:45] <CptKirk> bike I've lost my chat history
[08:58:55] <CptKirk> :shadowing something or other?
[09:00:33] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[09:01:13] <lotuseater> are you still using the webclient CptKirk ?
[09:01:22] <CptKirk> yes
[09:01:58] <lotuseater> seems to be not so stable
[09:03:05] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 264 seconds)
[09:08:07] <Bike> the topic has logs
[09:08:12] <Bike> it's shadowing-import-from
[09:08:24] <Bike> clhs shadowing-import
[09:08:24] <specbot> http://www.lispworks.com/reference/HyperSpec/Body/f_shdw_i.htm
[09:08:54] <Bike> well, this page by itself isn't going to help too much if you don't already understand the package system
[09:10:48] *** Quits: khrbt (~znc@user/khrbt) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[09:11:01] *** Joins: khrbt (~znc@user/khrbt)
[09:14:29] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[09:15:42] *** Quits: nature (~nature@mail.blazebone.com) (Ping timeout: 264 seconds)
[09:18:15] <lukego> How does one do an FFI binding to a C library in Lisp/SBCL nowadays? are there particularly recommended tools for extracting datatypes and function signatures from C header files?
[09:24:12] <hayley> CFFI has a groveler from memory.
[09:32:15] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:34:02] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[09:34:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:34:22] <White_Flame> and one from files, too
[09:38:59] * hayley groans
[09:47:18] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Ping timeout: 256 seconds)
[09:50:32] <recordgroovy> cl-autowrap: https://github.com/rpav/cl-autowrap
[09:51:19] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[09:54:53] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b002:2bc9:5a03:6b95:fd0b:d458)
[09:58:20] *** Joins: shka (~herr@109.231.62.239)
[10:01:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[10:05:01] *** Quits: cjb (~cjbayliss@user/cjb) ()
[10:13:31] *** Joins: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se)
[10:19:53] *** Joins: rgherdt (~rgherdt@2a02:8109:86c0:d8d:2cb3:8945:1c5c:6ee2)
[10:28:54] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 264 seconds)
[10:30:55] *** Joins: gaqwas (~john@dynamic-095-114-009-077.95.114.pool.telefonica.de)
[10:37:14] *** Quits: Wairu_Goodman (~Wairu_Goo@2804:389:e01c:680f:2f18:b9c9:d819:8cff) (Ping timeout: 246 seconds)
[10:39:57] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:45:11] *** _Posterdati_ is now known as Posterdati
[10:58:55] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 264 seconds)
[10:59:03] *** Joins: amb007 (~a_bakic@73.149.22.93.rev.sfr.net)
[11:18:35] <pjb> CodeBitCookie[m]: you can add material online on http://cliki.net/
[11:18:45] <pjb> CodeBitCookie[m]: it's a wiki: a web site you can edit yourself!
[11:19:42] *** Joins: pve (~pve@178-55-127-13.bb.dnainternet.fi)
[11:23:57] <pjb> White_Flame: (merge-pathnames (make-pathname :version "bak") #P";some;dir;foo.bar") #| --> #P";some;dir;foo.bar.bak" |#
[11:25:08] <pjb> White_Flame: on the other hand, it's not too useful because implementers refused to map versions to a naming scheme on posix system.  Using .~n~ like emacs does would have been nice.
[11:28:21] <White_Flame> well conceptually it's not a version, it's adding "another" type, which makes sense to human-reading semantics, forcing to promote the old type into the name
[11:28:49] <White_Flame> same thing if you're going to add, say, .gz to a .tar file
[11:29:49] <White_Flame> I just did a string operation on it and (pathname <string>)'d it back, which works but certainly bypasses all the idiomatics of pathnames
[11:30:08] <White_Flame> (or idioms, I guess)
[11:32:02] <hayley> Is there a good way to find all the "unique" type descriptors for arrays which could hold some element type, say a character? I mean "unique" in that the upgraded array element type would not be the same as some other element type.
[11:32:48] <hayley> On SBCL, I might find the combinations (<a> <e> 1) for <a> in {ARRAY, SIMPLE-ARRAY} and <e> in {BASE-CHAR, CHARACTER, T} or something like that.
[11:33:43] <hayley> I guess it could be brute forced with SUBTYPEP or UPGRADED-ARRAY-ELEMENT-TYPE, as I only have to handle characters and bytes really.
[11:37:47] *** Quits: gaqwas (~john@dynamic-095-114-009-077.95.114.pool.telefonica.de) (Ping timeout: 252 seconds)
[11:39:00] <pjb> White_Flame: doing that is more problematic. Having more than one dot in a file name is highly implementation dependent.  This goes also for dotted files…
[11:40:08] <pjb> White_Flame: I would do: (let ((path #P";some;dir;foo.bar")) (make-pathname :name (file-namestring path) :type "bak" :defaults path)) #| --> #P";some;dir;foo.bar.bak" |#
[11:43:10] <pjb> hayley: it's not possible in general: the standard impose only a few specialized arrays. Almost all arrays can have an upgraded-array-element-type of T.
[11:43:35] <pjb> IIRC, only bit-array and character arrays are mandatory.
[11:43:35] <hayley> pjb: Sure. But that tends to not happen.
[11:43:47] <White_Flame> yeah, it has nothing to do with CL implementation & specs, it has to do with concatenative file extension semantics in broader use which unfortunately aren't modeled there
[11:44:17] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[11:44:24] <White_Flame> but yeah, that's a more reasonable form than a string concatenation
[11:44:29] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[11:45:09] <hayley> I could do two tests: is ARRAY SUBTYPEP to SIMPLE-ARRAY? (If so, then ARRAY <= SIMPLE-ARRAY and SIMPLE-ARRAY <= ARRAY, so they must be the same) and then use U-A-E-T to pick the element types that the implementation specializes on.
[11:45:34] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[11:47:56] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 246 seconds)
[11:50:03] <pjb> White_Flame: well, this can only be done sanely with physical pathnames, so, working with namestrings, instead of pathnames.
[11:50:35] <pjb> White_Flame: my example is entirely non-conforming, because 2 dots in a logical filename is not conforming.
[11:51:56] *** Quits: amb007 (~a_bakic@73.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[11:51:59] <pjb> White_Flame: multiple dots in a physical filename can be allowed by an implementation, but don't expect any conforming result using pathname-name and pathname-type on them. Instead, you should use the namestring, and parse and process it as any posix or other path.
[11:52:33] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[11:52:35] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[11:54:38] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[12:32:04] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[12:33:02] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Remote host closed the connection)
[12:33:14] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:33:23] *** Joins: selwyn (~selwyn@user/selwyn)
[12:35:55] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:37:01] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[12:38:11] *** Quits: elderK (uid205007@id-205007.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[12:38:38] *** Quits: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net) (Quit: Ping timeout (120 seconds))
[12:38:57] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:40:34] <Duuqnd[m]1> So, I think I've said before that I was thinking of making a coffee pot controlled by giving TYPEP an invalid type specifier (since that's undefined behavior allowing the implementation to do anything, including making coffee). If I do end up making that, should I bring it to ELS next year as a little fun thing?
[12:40:56] <Duuqnd[m]1> (assuming ELS will be an on location event next year)
[12:47:33] <lotuseater> now that reminds me about this quote with coffee
[12:58:56] *** Joins: cosimone` (~user@93-44-185-223.ip98.fastwebnet.it)
[13:00:24] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 246 seconds)
[13:00:27] <Duuqnd[m]1> Is that a yes?
[13:03:45] <beach> Please do!
[13:04:32] <Duuqnd[m]1> Alright, I will
[13:04:50] <Alfr> Seems like someone is planing on abusing that ub.
[13:04:57] <lotuseater> Duuqnd[m]1: maybe you know it "A mathematician is a machine which turns coffee into theorems."
[13:05:33] <Duuqnd[m]1> I've heard something similar said about programmers
[13:25:19] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Ping timeout: 264 seconds)
[13:25:34] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[13:25:35] *** Quits: jasom (~aidenn@ip98-185-238-13.sb.sd.cox.net) (Ping timeout: 252 seconds)
[13:43:18] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b002:2bc9:5a03:6b95:fd0b:d458) (Ping timeout: 264 seconds)
[13:44:28] *** Joins: attila_lendvai (~alendvai@1F2E5E09.dsl.pool.telekom.hu)
[13:50:18] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Quit: Leaving...)
[13:51:55] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 252 seconds)
[13:58:58] <jackdaniel> coffee machine is a machine that turns coffee into coffee
[14:06:32] *** Quits: recordgroovy (~recordgro@50.35.20.8) (Ping timeout: 246 seconds)
[14:07:25] *** Quits: ahlk (~user@2600:1700:31c0:3a10::48) (Ping timeout: 252 seconds)
[14:07:37] *** Joins: recordgroovy (~recordgro@50.35.20.8)
[14:19:54] <pve> beach: Hi, is eclector.reader:interpret-symbol allowed to return something other than a symbol? (like a list, for example)
[14:20:56] <pve> I've made a small example that works nicely, but I'm not sure if doing something like that is bending the rules too much.
[14:20:58] *** Joins: lottaquestions (~nick@2607:fa49:503e:3000:4989:9ea:8da6:45c5)
[14:30:25] <pjb> Duuqnd[m]1: definitely. Undefined behavior at last put to good use: making coffee!
[14:30:36] <pjb> (instead of nasal daemons, and missiles hitting your hosue).
[14:31:36] <pjb> jackdaniel: coffee machines turn solid coffee (that can be eaten) into liquid coffee (that can be drank or injected intravenously).
[14:34:49] <hayley> pjb: If injection is an option for liquid coffee, what about inhalation?
[14:35:14] <pjb> hayley: this should be tried, indeed.
[14:35:31] <pjb> https://www.wbur.org/news/2011/11/29/caffeine-inhalers-beware
[14:53:36] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[14:53:45] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:02:30] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[15:05:29] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Ping timeout: 264 seconds)
[15:06:00] *** Joins: amb007 (~a_bakic@89.149.22.93.rev.sfr.net)
[15:16:45] *** Joins: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc)
[15:19:29] *** Quits: amb007 (~a_bakic@89.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[15:19:44] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:19:51] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[15:22:12] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[15:22:23] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[15:26:05] *** Quits: frgo (~frgo@p200300deef0cee0040b7498668af8379.dip0.t-ipconnect.de) (Remote host closed the connection)
[15:26:33] *** Joins: frgo (~frgo@p200300deef0cee0044551f4ee9cb8f79.dip0.t-ipconnect.de)
[15:28:46] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2.1)
[15:36:07] <scymtym> pve: that area is a bit in flow at the moment, but the general direction definitely is towards allowing things that are not of type CL:SYMBOL in all places that deal with symbols
[15:45:13] *** Joins: jealousmonk (~user@2804:431:e7c4:4247:75cd:c27b:296a:fb0f)
[15:46:01] <pve> scymtym: ok that's great to hear
[15:46:03] <pve> thanks
[15:47:41] *** Joins: Everything (~Everythin@37.115.210.35)
[15:49:12] <scymtym> pve: sure. for example, https://techfak.de/~jmoringe/semantic-highlighting-2.png does not intern anything as you can probably tell form the #<SYMBOL ..> objects in the syntax tree. if i recall correctly, the parts that may still assume symbols to be of type CL:SYMBOL are error reporting, structure literals and maybe reader conditionals
[15:55:01] <pve> scymtym: Right, I'm just playing around at the moment to see what can be done with it. It's really impressive.
[15:56:02] <pve> scymtym: so far, I have:
[15:56:04] <pve> https://github.com/pve1/eclector-access/blob/master/examples/package-nicknames-test.lisp
[15:56:12] <pve> https://github.com/pve1/eclector-access/blob/master/examples/symbol-patterns-test.lisp
[15:56:29] *** Joins: Nilby (~Nilby@c-67-160-81-88.hsd1.wa.comcast.net)
[15:56:44] <pve> whether anything of "good taste" emerges, remains to be seen :)
[15:59:27] <scymtym> pve: are you implementing package-local nicknames as a "user" extension?
[16:00:17] <pve> scymtym: well just as a test, not actually implementing
[16:00:25] <scymtym> i see
[16:01:42] <pve> hmm or those are actually file-local nicknames, but still
[16:07:24] <beach> pve: scymtym is the maintainer, and the main creator, of Eclector, so he is the right one to ask.
[16:08:12] <pve> beach: yep, my mistake, sorry
[16:21:10] *** Joins: random-nick (~random-ni@87.116.180.119)
[16:24:53] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[16:25:39] *** Joins: selwyn (~selwyn@user/selwyn)
[16:27:20] <beach> pve: Nothing to apologize for.  I guess I came up with the idea for a configurable reader, the initial embryonic implementation, and the name.  But scymtym took it much further and turned it into a stable library with a test suite and documentation.
[16:27:38] *** Quits: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 252 seconds)
[16:27:42] <scymtym> yeah, no worries
[16:42:29] <beach> But now I need a scymtym clone to make me a better pretty printer, with better coding style, test suite, documentation, etc.  Any candidates?
[16:50:37] <hayley> I think you need a mytmycs for a backwards reader.
[16:52:20] <beach> Sure, do you know of one?
[16:54:11] <hayley> Sadly no.
[16:55:13] <hayley> Perhaps you think I'd know one, living in the southern hemisphere, but this is a common misconception. We do have a large ɯʎʇɯʎɔs population though.
[16:56:15] <beach> How on earth did you do that?
[16:56:21] <yitzi> beach: is the pretty printer in SICL implemented yet or just stubbed out?
[16:57:39] <beach> yitzi: It is not implemented.  My initial plan was to use XP, but then I looked at the code, and it is totally awful.
[16:57:55] <Nilby> I think Eclector is great, and I've used it. But unfortunately for my project I need something that does more than just CL and has explict and enduring parse state.
[16:58:58] <beach> yitzi: And since that was the initial plan, I haven't studied the problem, but I wouldn't be surprised if the same kind of client configuration would be desirable for the pretty printer as for the reader.
[17:00:03] <hayley> Me? I have a website bookmarked which picks the right Unicode characters. No idea why those characters exist, still.
[17:01:08] <beach> There are Unicode code points for upside-down characters?  Wow!
[17:02:09] <yitzi> beach: I might be interested in pitching in.
[17:02:13] <hayley> Reminds me, I do want to parse a S-expression language which has constructs of the form (foo: bar baz). Could Eclector be extended to parse the "foo:"?
[17:02:17] <beach> hayley: When I lived in Aotearoa I bought two copies of the "Kiwi upside-down world map".  It is great!
[17:02:17] *** Quits: attila_lendvai (~alendvai@1F2E5E09.dsl.pool.telekom.hu) (Read error: Connection reset by peer)
[17:02:37] <beach> yitzi: Oh, that would be great!
[17:02:40] *** Joins: attila_lendvai (~alendvai@1F2E5E09.dsl.pool.telekom.hu)
[17:03:05] <beach> hayley: Definitely.
[17:03:52] <beach> hayley: I had an argument with the poor salesperson.  I claimed that the map is not upside down, and she insisted it is. :)
[17:04:50] <yitzi> Since I am reading about the printer right now an contemplating rewriting my indenter using Eclector and that is tangentially related.
[17:05:26] <beach> I see.  How does your "indenter" work?
[17:05:53] <jmercouris> beach: what is “XP”?
[17:06:11] <beach> The initial implementation of the pretty printer.
[17:06:21] <jmercouris> I see
[17:07:23] <Gnuxie> *no-defun-allowed*: it's a bit more problematic since the `:` isn't really part of the symbol and when `foo:` is read I don't think want to return a symbol either
[17:08:08] <hayley> Following the jokes made in Melbourne, it would have to be the case that only New Zealand is present on the map, rather than it being missing from the map.
[17:08:19] <hayley> We say the same thing about Tasmania.
[17:08:20] <yitzi> We talked about before. It is a scanner and not sufficient for your editor (yet)
[17:09:18] <hayley> Gnuxie: Yeah, FOO: should read to (SEND FOO) or something wrangleable like that. But I think pve got to more or less the same problem with reading symbols.
[17:09:52] <Gnuxie> yeah it sounded similar
[17:10:48] <beach> yitzi: Oh, I forgot.  Sorry.
[17:11:36] <yitzi>  No worries
[17:11:50] <hayley> ((send foo) bar baz) would be a perfectly fine form to compile. It also means we could have such a SEND form which is not in message position evaluate to some function which sends the message.
[17:12:19] <hayley> But now this is not a Common Lisp discussion. Oops.
[17:12:56] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[17:13:23] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[17:17:31] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[17:20:22] *** Joins: Bike (~Glossina@71.69.170.70)
[17:20:22] *** ChanServ sets mode: +o Bike
[17:25:03] <Bike> hayley: i don't think there's any portable and comprehensive way to get a list of upgraded array element types. closest i can think of would be the brute force, but that couldn't handle e.g. structure types, if any implementation had those
[17:26:47] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:27:38] <hayley> Yes, I'm planning to brute force it for now. Thanks.
[17:28:40] *** ChanServ sets mode: -o Bike
[17:29:20] <Bike> there's implementation stuff you can do, like looking through sbcl's SAETP lists, but i'm guessing that's not how you wanna do it
[17:30:21] <hayley> Though I'm getting ahead of myself with my new regular expression compiler. What if I inlined the matching loop into the caller? What about linting regexes? Probably helps to have a working compiler first.
[17:31:14] *** Joins: ad-absurdum (~ad-absurd@2600:100a:b02c:bdcf:167e:6af9:516c:6894)
[17:31:16] <Nilby> TIL Lisp machines had a separate array type for pixels, because row col looks bad instead of x y
[17:34:01] <hayley> You mean (aref bitmap y x) and (aref bitmap x y)?
[17:34:49] <Nilby> yes
[17:35:08] <Nilby> also perhaps data locality
[17:35:24] <pjb> Waht's wrong with: (defmacro pref (b y x) `(aref ,b ,x ,y)) (pref bitmap y x) ?
[17:35:48] <hayley> Makes sense. Though they could have wired the CRT to scan left to right slowest, rather than top to bottom, to fit the data layout.
[17:36:07] <Nilby> I would bet there were other things special about the pixel array type too
[17:36:35] <pjb> Also, indeed, some bitmap crt monitors were rotated 90 degree, so it was actually scanning vertically…
[17:37:18] <Nilby> that would make just macro-ing around it not effienct enough
[17:37:58] <hayley> But I'd agree that (y, x) looks strange. Worse was attempting to decode a three dimensional bitmap when I didn't know the order of the axes.
[17:38:58] <Nilby> hayley: Exactly. I think they probably eventually had 3d texture array types too.
[17:39:41] <hayley> Still, you would want to choose carefully to get better locality. But, say, filling a word at a time could be feasible with either layout.
[17:40:39] <Nilby> I think the hardware framebuffer layout was a consideration
[17:40:51] *** Joins: ad_absurdum (~ad-absurd@2600:100a:b019:6ee2:bee1:eb35:7c88:f110)
[17:41:47] *** Quits: ad-absurdum (~ad-absurd@2600:100a:b02c:bdcf:167e:6af9:516c:6894) (Ping timeout: 246 seconds)
[17:41:53] *** Quits: ad_absurdum (~ad-absurd@2600:100a:b019:6ee2:bee1:eb35:7c88:f110) (Client Quit)
[17:42:21] <Nilby> There's a lot of fascinating discussion of arrays in http://cl-su-ai.lisp.se
[17:44:59] <mfiano> I believe they had TV planes
[17:45:26] <Nilby> yes
[17:45:27] <mfiano> Which let you change microcontrollers iirc
[17:45:39] <mfiano> so i guess 3d in a way :)
[17:53:22] <Nilby> It seems like some of the issues of CL arrays are because we are using "Fortan Machines".
[17:56:05] <lotuseater> Nilby: what are possible examples for some array issues?
[17:58:32] <Nilby> That many times an array element is forced to be of type T, which might come for free on LispMs, when it's could be more efficient to be a smaller direct type.
[17:58:48] <Nilby> on our Fortran Machines
[17:59:09] <Nilby> or probably by now C machines
[17:59:14] <Bike> free?
[18:00:07] <lotuseater> Linux is a perfect C VM :)
[18:00:15] <Nilby> Free as in part the hardware memory
[18:00:30] <Nilby> or microcode level at least
[18:00:50] <lotuseater> Nilby: okay I see what you mean, so for example when you have a struct with well typed slots.
[18:00:52] <Bike> i don't understand. what would be in the microcode? procedures for accessing elements?
[18:01:04] <Bike> are you saying elements wouldn't have to be boxed?
[18:01:40] <Nilby> bike: yes, wheres boxing on a lispm was at a lower level
[18:02:06] <Bike> that doesn't seem free? something is still doing all the complicated stuff
[18:02:44] <Bike> what cost exactly would be defrayed?
[18:06:01] <Nilby> I suppose it would be like if the SDRAM handled boxing and had explict room for the bits
[18:06:48] <Nilby> the cost of boxing unboxing etrax bits etc. is still somewhere of course
[18:07:42] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:07:50] <Nilby> and when the memory is showing up on a screen, you can't have those extra bits and it has to be layed out right
[18:13:31] <Nilby> Like if we weren't using fortran machines, we might have 68 bit registers and memory bus, like the 36 bit pdp10.
[18:13:54] *** Quits: selwyn (~selwyn@user/selwyn) (Read error: Connection reset by peer)
[18:14:53] <Bike> laid out?
[18:15:11] <Bike> it's just like, something is still doing the work if you keep the usual design of tagging
[18:17:26] <Nilby> right, but from the software level, it's for free if the cpu isn't doing it and you don't have to write code for it, and almost all other memory has the same overhead
[18:19:19] <Nilby> In other words your element-type T, won't have different performance from element-type fixnum or maybe even character.
[18:19:43] *** Joins: ahlk (~user@2600:1700:31c0:3a10::48)
[18:20:53] *** Joins: nature (~nature@mail.blazebone.com)
[18:21:39] <Bike> well, what performance are you talking about
[18:21:57] <Bike> indexing into arrays is cheap wherever, it's boxing where you start needing to cons
[18:23:29] <Bike> something would still be consing, doing type tests, following pointers
[18:26:35] <Bike> with a wider bus you could maybe avoid some untagging shifting type stuff, but i don't understand how that relates to arrays, and anyway that kind of arithmetic stuff doesn't really take that much time
[18:26:51] *** Joins: asarch (~asarch@2806:10ae:7:eb39:c3d8:409b:ff89:a2ee)
[18:27:03] <Nilby> I agree something still has to do such things, alithough a lot of consing can be avoided, I'm probably too ignorant of the low level design to explain it.
[18:27:23] *** Joins: jasom (~aidenn@2600:8802:7fa0:500:f833:278f:1567:d354)
[18:31:09] *** Quits: flip214 (~marek@user/flip214) (Ping timeout: 265 seconds)
[18:31:17] <Bike> i don't understand how some property of the machine could let you avoid consing. consing is part of the algorithms here.
[18:31:52] *** Joins: flip214 (~marek@user/flip214)
[18:32:56] <Bike> well, other than again, if you had a wider bus you might be able to skip boxing doubles
[18:36:44] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[18:38:49] *** Joins: aeth (~aeth@user/aeth)
[18:41:41] <CodeBitCookie[m]> Hello everyone, I came in yesterday and people were helping me change my mind about common lisp
[18:42:01] <CodeBitCookie[m]> I mean I liked it but was trying to turn it into a programming language its not
[18:42:19] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:42:39] <CodeBitCookie[m]> I still don't understand when to use a functional approach and when to just use common lisp imperatively
[18:42:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[18:43:02] <CodeBitCookie[m]> I found that a functional approach boosts my productivity by getting less bugs
[18:44:06] *** Quits: asarch (~asarch@2806:10ae:7:eb39:c3d8:409b:ff89:a2ee) (Quit: Leaving)
[18:44:46] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:45:10] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:48:04] <lotuseater> "And what did it cost you?" "Everything." :)
[18:48:48] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[18:48:50] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[18:49:34] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[18:51:02] <beach> CodeBitCookie[m]: Feel free to use a functional style with Common Lisp if you are more productive that way.  Otherwise, in modern Common Lisp code, you will find the functional style used mostly in macro expanders.
[18:52:06] <beach> CodeBitCookie[m]: Otherwise, modern Common Lisp code frequently use the very different style of "object-oriented programming" made possible with CLOS.
[18:53:06] <beach> CodeBitCookie[m]: But if you are going to use functional programming exclusively, there might be better alternatives than Common Lisp.  What is it with Common Lisp that you like?
[18:53:24] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[18:54:56] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 246 seconds)
[18:55:38] <tyson2> Is typical modern Scheme code more functional than Common Lisp?
[18:57:10] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[19:05:37] *** Joins: jeosol (~jeosol@76-238-186-228.lightspeed.hstntx.sbcglobal.net)
[19:05:40] <pve> hayley: I'm learning about eclector now. I tried doing the "foo:" thing:
[19:05:47] <pve> hayley: https://github.com/pve1/eclector-access/blob/master/examples/smalltalk-keywords-test.lisp
[19:07:37] *** Joins: eddof13 (~textual@200.52.90.10)
[19:08:57] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:10:06] <pve> hayley: also https://github.com/pve1/eclector-access/blob/master/examples/smalltalk-keywords.lisp
[19:14:41] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[19:16:51] <jeosol> Good morning guys!
[19:16:57] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:17:03] <lotuseater> Hi there jeosol.
[19:17:18] <jeosol> Hi lotuseater, howdy
[19:20:00] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:23:11] <jeosol> I have a question. Say I have two systems A and B that can be loaded with (ql:quickload :A) and (ql:quickload :B) (each also starts on a port). I can then send computations there via swank-client from another lisp process
[19:23:19] <CodeBitCookie[m]> beach Yes but I like common lisp because I could get stuff done within 2 weeks of learning it.
[19:23:38] <CodeBitCookie[m]> lotuseater heyyy you came
[19:23:51] <CodeBitCookie[m]> How are you?
[19:24:16] <jeosol> For now, I launch the A and B lisp process manual, but I want to be able to do this automatically, e.g., when a user clicks a button. It's like starting a container (I did try docker, had some issues, but I want to reduce dependencies)
[19:24:24] <jeosol> s/manual/manually
[19:24:27] <beach> CodeBitCookie[m]: So maybe your increased productivity with functional programming is just because you have been using a language other than Common Lisp, which is not terribly adapted to other paradigms?
[19:24:50] <lotuseater> I'm fine, and you're right, one doesn't have to master everything for doing great things with it. That would take much longer.
[19:24:51] <Bike> jeosol: do you want to fork?
[19:25:06] <jeosol> Bike: hahaha
[19:25:41] <jeosol> I am thinking along those lines. but now sure how to go about it. I guess I will have to run things in the background. Then when done, I just send a form to quit it
[19:26:18] <jeosol> Bike: I don't mind doing that. I just want something that works. I did look into docker-swarm a bit, but wanted to stay away from having other tools to worry about
[19:27:41] <CodeBitCookie[m]> beach lotuseater I actually like to use more pure languages like Haskell
[19:28:21] <jackdaniel> do you mean pure like "innocent"?
[19:28:40] <jeosol> jackdaniel: thanks for the laugh
[19:28:41] <jackdaniel> i.e not stained with crude stuff like practical applications? ,)
[19:28:47] <jackdaniel> sure thing
[19:30:01] <lotuseater> CodeBitCookie[m]: At one point Simon Peyton-Jones made a joke and called Haskell "the most imperative language" :)
[19:30:11] <jeosol> Bike: so fork is the way to go?
[19:30:27] <CodeBitCookie[m]> Okay I like Haskell and have made many practical applications. That's besides the point and anyways I was looking at OCaml and thinking of switching because it doesn't force you as much but just sets a preferred path and still has good types and OOP etc
[19:30:28] <jeosol> better way
[19:31:31] <jackdaniel> CodeBitCookie[m]: if haskell works better for you then go for it. as beach mentioned, prevailing style in modern cl applications is object orientation
[19:31:59] <jackdaniel> you may write functional code in common lisp because its specification is not partial towards any particular style though
[19:33:10] <jackdaniel> regarding lack of practical applications it was a silly joke but you were the person who triggered it: saying that some language is "pure", and something is "hygienic" is so purposefully biased phrasing that it forces me to make such jokes
[19:33:23] <CodeBitCookie[m]> Its doesn't though. No language works as good as CL for me. I just find functional programming fun.
[19:33:32] <CodeBitCookie[m]> Okay I have to go eat will come back
[19:33:53] <lotuseater> CodeBitCookie[m]: Combining powerful ideas makes things often even more powerful.
[19:34:14] <Bike> jeosol: i don't know, that's just what came to mind. you could also use run-program
[19:35:06] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[19:36:25] <jeosol> Bike: thanks. I will look into it more. I want to simulate start one, sending a computation, and then stopping it
[19:36:38] <jeosol> s/start/starting
[19:36:56] *** Joins: aeth (~aeth@user/aeth)
[19:37:32] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[19:38:09] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:38:51] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[19:44:01] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[19:44:08] *** Joins: molson (~molson@2001-48F8-704A-CA1-0-0-75F-103A-static.midco.net)
[19:45:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[19:46:00] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:50:56] *** Quits: attila_lendvai (~alendvai@1F2E5E09.dsl.pool.telekom.hu) (Ping timeout: 246 seconds)
[19:53:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:53:16] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 268 seconds)
[19:57:44] *** Joins: selwyn (~selwyn@user/selwyn)
[19:58:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[20:07:49] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[20:12:09] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Client Quit)
[20:15:33] *** Quits: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net) (Remote host closed the connection)
[20:15:50] *** Joins: doyougnu (~user@c-73-25-202-122.hsd1.or.comcast.net)
[20:24:44] *** Joins: CptKirk (~user@70-59-5-216.hlrn.qwest.net)
[20:33:50] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:41:13] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[20:42:06] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[20:44:30] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[20:44:38] *** Quits: CptKirk (~user@70-59-5-216.hlrn.qwest.net) (Quit: ERC (IRC client for Emacs 26.3))
[20:47:22] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[20:49:07] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[20:49:23] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 246 seconds)
[20:50:46] *** Joins: pjb (~pjb@user/pjb)
[20:51:20] *** Joins: aeth (~aeth@user/aeth)
[20:55:34] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Quit: WeeChat 2.8)
[20:59:39] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[21:00:46] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Client Quit)
[21:01:04] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[21:06:46] *** Joins: yewscion (~yewscion@2604:ca00:149:479::60:4768)
[21:07:50] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Quit: WeeChat 2.8)
[21:08:35] *** Joins: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net)
[21:29:22] *** Quits: eddof13 (~textual@200.52.90.10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:10] *** Quits: sterni (~lukas@user/sterni) (Ping timeout: 240 seconds)
[21:38:54] *** Joins: sterni (~lukas@user/sterni)
[22:00:17] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[22:02:35] *** Joins: eddof13 (~textual@200.52.90.10)
[22:02:42] *** Joins: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com)
[22:05:01] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[22:05:22] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[22:06:24] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:09:05] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 264 seconds)
[22:09:06] *** Quits: amb007 (~a_bakic@host.26.88.68.195.rev.coltfrance.com) (Read error: Connection reset by peer)
[22:10:06] *** Joins: amb007 (~a_bakic@73.149.22.93.rev.sfr.net)
[22:11:59] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:32:25] *** Joins: gaqwas (~john@dynamic-095-114-009-077.95.114.pool.telefonica.de)
[22:44:29] <lukego> Hey CFFI n00b question - is there a good example somewhere showing how to to the CFFI-GROVEL syntax for bitfields in structs and also anonymous unions in structs? example of both that I'm trying to specify at the moment here: https://github.com/torvalds/linux/blob/master/include/uapi/linux/perf_event.h#L363-L417
[22:46:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[22:48:44] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[22:49:05] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[22:49:15] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[22:55:31] <semz> CodeBitCookie[m]: There is nothing wrong with using CL functionally even if that's not the most popular usage. If it works, it works, and ime Haskell knowledge is pretty useful when working with CL since the language is so flexible that you can easily go on really questionable design paths without some guiding principle.
[22:55:51] <semz> But when it would be really nice to stray off that path, CL will still have your back.
[22:58:05] <semz> ...that ended up a bit wonky. The "path" in the second post refers to what the principle suggests.
[23:01:59] *** Quits: cosimone` (~user@93-44-185-223.ip98.fastwebnet.it) (Ping timeout: 252 seconds)
[23:05:11] *** Quits: amb007 (~a_bakic@73.149.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[23:05:55] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:10:17] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 264 seconds)
[23:11:36] *** Quits: CptKirk (~CptKirk@70-59-5-216.hlrn.qwest.net) (Quit: WeeChat 2.8)
[23:13:05] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[23:24:11] *** Joins: CptKirk (~user@70-59-5-216.hlrn.qwest.net)
[23:24:44] *** Quits: CptKirk (~user@70-59-5-216.hlrn.qwest.net) (Client Quit)
[23:26:20] *** Joins: CptKirk (~user@70-59-5-216.hlrn.qwest.net)
[23:26:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:30:44] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 246 seconds)
[23:31:19] *** Joins: X-Scale` (~ARM@83.223.240.141)
[23:33:00] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:33:13] *** X-Scale` is now known as X-Scale
[23:34:43] *** Joins: rgherdt_ (~rgherdt@2a02:8109:86c0:d8d:2cb3:8945:1c5c:6ee2)
[23:35:12] *** Quits: yewscion (~yewscion@2604:ca00:149:479::60:4768) (Remote host closed the connection)
[23:36:05] *** Quits: rgherdt (~rgherdt@2a02:8109:86c0:d8d:2cb3:8945:1c5c:6ee2) (Ping timeout: 264 seconds)
[23:38:53] *** Joins: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte)
[23:39:21] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:43:54] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 268 seconds)
[23:49:07] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[23:50:12] *** Joins: yewscion (~yewscion@2604:ca00:149:479::60:4768)
[23:52:28] *** Quits: CptKirk (~user@70-59-5-216.hlrn.qwest.net) (Quit: ERC (IRC client for Emacs 26.3))
[23:52:55] *** Joins: CptKirk (~user@70-59-5-216.hlrn.qwest.net)
[23:53:29] *** Quits: Mandus (~aasmundo@0.51-175-33.customer.lyse.net) (Ping timeout: 246 seconds)
[23:55:16] <CptKirk>  /names
[23:56:06] *** Quits: eddof13 (~textual@200.52.90.10) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:56:35] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:02:06] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[23:02:56] *** Joins: Mandus (~aasmundo@0.51-175-33.customer.lyse.net)
[23:04:14] *** Joins: eddof13 (~textual@200.52.90.10)
[23:05:39] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[23:08:25] *** Quits: tophullyte (tophullyte@gateway/vpn/protonvpn/tophullyte) (Ping timeout: 252 seconds)
[23:09:35] *** Quits: yewscion (~yewscion@2604:ca00:149:479::60:4768) (Ping timeout: 246 seconds)
[23:22:17] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[23:25:28] *** Joins: asarch (~asarch@2806:10ae:7:6a4a:2a25:272d:d8ab:a0c8)
[23:27:00] <borodust> Xach: where should i look first if quickloading after installing new dist takes too long?
[23:29:29] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 264 seconds)
[23:29:53] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[23:33:18] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:37:26] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[23:37:41] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[23:42:50] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 265 seconds)
[23:44:26] *** Joins: aeth (~aeth@user/aeth)
[23:47:27] *** Joins: yewscion (~yewscion@2604:ca00:158:93e5::460:375c)
[23:49:25] <CptKirk> How can I tell slime what directory it should be in?
[23:49:30] <CptKirk> or asdf?
[23:50:28] <lisp123> ASDF or Slime?
[23:51:09] <CptKirk> I wnat to say slime
[23:51:47] <lisp123> https://common-lisp.net/project/slime/doc/html/Installation.html
[23:56:03] <CptKirk> I don't think I want that
[23:56:14] <CptKirk> I have a running slime repl, I want to tell slime what directory its operating in
[23:56:29] <CptKirk> because it can't find "../myfolder/myfile.txt"
[23:56:35] <lisp123> ah
[23:56:36] <CptKirk> because its looking in the wrong direcoty
[23:56:42] <lisp123> I usually type the full path
[23:57:00] <CptKirk> its in the source code?
[23:57:03] <CptKirk> it has to be relative
[23:57:28] <lisp123> I'll let someone else answer, the best I can think of is a hack
[23:57:35] <lisp123> set a variable to the directory
[23:57:40] <lisp123> then appen your relative path to it
[23:59:43] <Posterdati> CptKirk: where are spock and bones?
