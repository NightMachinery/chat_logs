[00:04:22] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:14:32] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[00:23:28] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Ping timeout: 250 seconds)
[00:26:19] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[00:30:32] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[00:41:32] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[00:56:34] *** Joins: Ilyu (~quassel@166.215.82.79.rev.sfr.net)
[00:57:59] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[00:59:32] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[01:02:32] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 240 seconds)
[01:11:30] *** Joins: piotrts (~piotrts@188.146.130.81.nat.umts.dynamic.t-mobile.pl)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:19:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:32:51] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:37:05] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[01:51:10] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[01:51:31] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[02:28:35] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:32:06] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com) (Remote host closed the connection)
[02:33:42] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[02:33:54] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[02:47:55] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[02:49:34] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:50:53] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Read error: Connection reset by peer)
[02:51:07] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[03:02:03] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[03:22:35] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:40:43] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[03:41:03] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[03:48:17] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[03:51:21] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[03:56:12] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 252 seconds)
[03:59:30] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[04:15:14] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[04:16:47] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[04:20:15] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[04:28:45] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[04:30:17] <v3ga> so should there always be a stacktrace? say you get a 500 error when attempting a web request..there's no stacktrace that pops up for me... i see the error code in my repl output but things keep flowing.
[04:31:03] <v3ga> someone was asking for the stacktrace and I was unable to provide it to debug further 
[04:32:07] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[04:34:33] <seebs> you get a stack trace if something panics usually
[04:39:45] <sobel> v3ga: i'd estimate some part of the router decided the request was wrong before it tried to dispatch
[04:40:25] *** Joins: austb (~austb@94.140.8.201)
[04:40:52] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[04:53:57] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[05:00:25] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[05:06:32] *** Quits: austb (~austb@94.140.8.201) (Ping timeout: 240 seconds)
[05:13:13] *** Joins: austb (~austb@94.140.8.198)
[05:21:59] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[05:30:46] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 245 seconds)
[06:03:38] *** Quits: austb (~austb@94.140.8.198) (Ping timeout: 250 seconds)
[06:29:58] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Remote host closed the connection)
[06:41:21] *** Quits: op2 (~op2@user/op2) (Ping timeout: 256 seconds)
[07:07:00] *** Quits: irontom (~user@38.81.106.9) (Ping timeout: 240 seconds)
[07:11:49] *** Joins: mbuf (~Shakthi@122.162.78.73)
[07:18:30] *** Joins: austb (~austb@94.140.8.199)
[07:40:32] *** Quits: austb (~austb@94.140.8.199) (Ping timeout: 240 seconds)
[07:41:35] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[07:46:55] *** Joins: austb (~austb@94.140.8.197)
[07:56:44] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 250 seconds)
[08:14:32] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Quit: Leaving)
[08:17:39] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[08:26:14] <v3ga> ohh.... i should use exceptions to see more data when things go to crap shouldn't I? (inexperienced hobbyist programmer)
[08:27:21] *** Quits: austb (~austb@94.140.8.197) (Ping timeout: 252 seconds)
[08:30:24] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:39:49] *** Joins: eddof13 (~eddof13@192.154.196.149)
[08:40:36] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Remote host closed the connection)
[08:40:55] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[08:57:56] *** Quits: mbuf (~Shakthi@122.162.78.73) (Quit: Leaving)
[09:01:13] *** Joins: puchka (~marius@165.73.242.61)
[09:06:15] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[09:15:12] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[09:19:13] *** Joins: shiranaihito (~textual@219.85.3.209)
[09:19:24] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[09:19:26] *** Quits: shiranaihito (~textual@219.85.3.209) (Read error: Connection reset by peer)
[09:19:51] *** Joins: shiranaihito (~textual@219.85.3.209)
[10:03:10] *** Quits: shiranaihito (~textual@219.85.3.209) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:03:28] *** Joins: shiranaihito (~textual@219.85.3.209)
[10:07:36] *** Quits: shiranaihito (~textual@219.85.3.209) (Ping timeout: 250 seconds)
[10:07:36] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 250 seconds)
[10:08:59] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[10:19:35] *** Joins: shiranaihito (~textual@2001-b011-4011-33f5-045d-63ed-e25e-710a.dynamic-ip6.hinet.net)
[10:22:28] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:32:50] *** Joins: Xylon (~joseph@mail.xylon.me.uk)
[10:38:04] *** Joins: struchu (~struchu@staticline-31-183-185-19.toya.net.pl)
[10:44:18] *** Joins: mbuf (~Shakthi@122.174.182.104)
[11:00:38] *** Quits: eddof13 (~eddof13@192.154.196.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:13:37] <ridcully_> v3ga: a 500 usually indicates a server-side, "un-caught" error.  e.g. some exception bubbled up from your code into the server-code and it gives up
[11:14:32] *** Quits: puchka (~marius@165.73.242.61) (Ping timeout: 240 seconds)
[11:16:29] *** Joins: puchka (~marius@165.73.242.62)
[11:20:34] *** Joins: mac (~AdminUser@117.11.88.253)
[11:20:38] *** mac is now known as Guest3771
[11:24:05] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Quit: Iacob)
[11:24:08] *** Guest3771 is now known as Iacob
[11:29:32] *** Quits: puchka (~marius@165.73.242.62) (Ping timeout: 240 seconds)
[11:31:43] *** Joins: puchka (~marius@165.73.242.62)
[11:34:12] *** Joins: Iacob1 (~Thunderbi@117.11.88.253)
[11:40:32] *** Quits: puchka (~marius@165.73.242.62) (Ping timeout: 240 seconds)
[11:42:51] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[11:46:08] *** Quits: Iacob (~AdminUser@117.11.88.253) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:46:08] *** Iacob1 is now known as Iacob
[11:46:15] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Quit: Iacob)
[11:46:38] *** Joins: Iacob (~Iacob@117.11.88.253)
[11:48:09] *** Quits: Iacob (~Iacob@117.11.88.253) (Client Quit)
[11:48:48] *** Joins: op2 (~op2@user/op2)
[11:57:22] *** Joins: Iacob (~Iacob@117.11.88.253)
[11:58:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:01:12] *** Joins: puchka (~marius@165.73.242.62)
[12:01:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[12:03:34] *** Quits: Iacob (~Iacob@117.11.88.253) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:13:37] *** Quits: piotrts (~piotrts@188.146.130.81.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 240 seconds)
[12:14:30] *** Quits: puchka (~marius@165.73.242.62) (Ping timeout: 252 seconds)
[12:17:36] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 250 seconds)
[12:18:53] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[12:26:59] *** Quits: Ingvix (~Ingvix@user/ingvix) (Read error: Connection reset by peer)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:29:09] *** Joins: Ingvix (~Ingvix@user/ingvix)
[12:37:38] *** Joins: puchka (~marius@165.73.240.254)
[12:55:07] *** Quits: Techcable (~Techcable@168.235.93.147) (Read error: Connection reset by peer)
[12:55:14] *** Joins: Techcable (~Techcable@168.235.93.147)
[13:57:06] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 260 seconds)
[13:57:19] *** Quits: puchka (~marius@165.73.240.254) (Quit: leaving)
[14:10:22] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a161-049d-edaf-1b31.res6.spectrum.com)
[14:53:01] *** Joins: rikka (~user@user/rikka)
[14:54:37] *** Quits: rikka (~user@user/rikka) (Remote host closed the connection)
[15:36:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[16:27:54] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: The Lounge - https://thelounge.chat)
[16:52:21] *** Joins: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net)
[17:01:12] <goodger> unhandled, not uncaught
[17:08:22] *** Quits: struchu (~struchu@staticline-31-183-185-19.toya.net.pl) (Quit: WeeChat 3.3)
[17:09:10] <ridcully_> if we are splitting hairs: it's also not un-handled.  the server part turned it at least into a http status.  otherwise the jvm exception handler would log and then kill the process
[17:09:45] <goodger> it's unhandled within the code written by the application author ;)
[17:10:27] *** Joins: struchu (~struchu@staticline-31-183-185-19.toya.net.pl)
[17:18:47] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[17:23:24] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[17:29:57] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:32:27] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[17:50:35] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[17:52:53] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[18:01:30] *** Joins: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353)
[18:06:18] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[18:08:48] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[18:16:02] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[18:16:55] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[18:20:21] *** Quits: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:21:12] *** Joins: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353)
[18:24:01] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 256 seconds)
[18:28:58] *** Joins: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[18:30:21] *** Quits: yauhsien (~Yau-Hsien@61-231-56-96.dynamic-ip.hinet.net) (Read error: Connection reset by peer)
[18:36:37] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[18:37:48] *** Quits: austb (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 240 seconds)
[18:38:24] *** Quits: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:42:43] *** Joins: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353)
[18:44:56] *** Quits: Iacob (~Iacob@2408:8210:3c30:9150:99d2:4ce4:a9c2:b353) (Client Quit)
[18:46:26] *** Joins: Iacob (Iacob@2605:6400:10:5bf:1a73:cb59:17e5:ab94)
[18:48:10] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[18:51:02] *** Quits: struchu (~struchu@staticline-31-183-185-19.toya.net.pl) (Quit: WeeChat 3.3)
[18:53:47] *** Joins: struchu (~struchu@staticline-31-183-185-19.toya.net.pl)
[18:56:03] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[19:03:53] *** Quits: struchu (~struchu@staticline-31-183-185-19.toya.net.pl) (Quit: WeeChat 3.3)
[19:16:37] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[19:18:32] *** Quits: shiranaihito (~textual@2001-b011-4011-33f5-045d-63ed-e25e-710a.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[19:23:01] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:49:02] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[19:51:19] *** Joins: seschwar (~seschwar@user/seschwar)
[20:05:18] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[20:36:17] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[20:41:10] <yeik-the-spik[m]> In my app I have these processes that need to be run every set amount of time, or when users trigger them, and the again. The solution I've thought was using manifold with `manifold.time/in`, set the deferred that one returns into an atom with a dict mapping `process-id` to `deferred`.
[20:42:23] <yeik-the-spik[m]> with that solution, if users trigger an early execution, I can just `@(my-atom process-id)` or something like that, and I get rid of that `deferred`
[20:43:01] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:44:04] <yeik-the-spik[m]> now, meat of the matter. `manifold.time/in` takes a function with no parameters. so I've written a function that takes a `process-id` and returns a function that runs the process.
[20:45:29] <yeik-the-spik[m]> however, that process that was spawned by a function taking `process-id` needs to call again that very function to spawn the next iteration
[20:46:01] <yeik-the-spik[m]> I think that is not likely to have any infinite recursion issues, but I am not sure. Could anyone confirm or deny such suspicions?
[20:46:58] <yeik-the-spik[m]> Or at least tell me if I am making any sense? Because now that I verbalize what I am doing, I am beginning to feel like this is way to convoluted.
[20:47:47] <Para> The only issue I can see is that if the individual runs are not aware of each other (as in there's no deduping/interleaving prevention) you might end up a few too many runs.
[20:50:18] <aphyr> yeik-the-spik[m]: this might be totall off-base but I have a small scheduling library for this kind of thing that might be helpful
[20:50:26] <aphyr> https://github.com/aphyr/tea-time
[20:51:31] <aphyr> Allows you to schedule execution at specific intervals, specific times, and also to defer execution of a task if necessary. Also supports a fully mockable simulated clock for testing!
[20:54:37] <yeik-the-spik[m]> <Para> "The only issue I can see is that..." <- Well, I want to keep an atom so I can avoid that kind of issue. I said `process-id` but that was a bad name. They are games. Turns run every X-time or user triggered end-turn. So I keep an atom that maps `game-id` to `deferred-computation`. If user triggers, I just deref the `deferred` and set the one for the next turn
[20:54:48] <yeik-the-spik[m]> Thanks for your input Para!
[20:57:22] <yeik-the-spik[m]> <aphyr> "yeik-the-spik: this might be..." <- Thanks for the info. I will check it out. But I will be honest. I think I have manifold Stockholm syndrome. If your library is not a clear improvement I will not use it. 
[20:58:32] <yeik-the-spik[m]> Clear improvement for my use case I mean, which is kind of a simple thing I mean. No disrespect meant
[21:00:05] <aphyr> Yeah, I mean, it should be pretty easy. (tt/every! 10 10 #(prn "I trigger every 10 seconds after waiting 10 seconds"))
[21:00:10] <aphyr> Problem solved?
[21:02:03] <yeik-the-spik[m]> xD. Checking the docs right now
[21:02:28] <Para> fwiw, chime is a pretty nifty library as well, although I'm not sure if it supports the idea of adding executions on the side directly
[21:03:03] <Para> chime's main mode of operation is based on lazy sequence of timetamps; you write a generator for the sequence and hook a function to it and that's it
[21:03:51] <Para> There is core.async channel in it which made me think one could maybe sort of side inject new executions to the in-channel but eh...
[21:22:35] *** Joins: curium (~curium@mail.clouded.monster)
[21:28:48] <yeik-the-spik[m]> aphyr, your virtual time thingy is awesome.
[21:30:00] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:28] <yeik-the-spik[m]> I guess I could implement my user-triggered executes by stopping the tt/every!, running it stand alone and then starting the every! again
[21:30:43] <yeik-the-spik[m]> which kinda feels a little dirtier than the manifold approach
[21:30:52] *** Joins: ns12 (~ns12@user/ns12)
[21:31:05] <yeik-the-spik[m]> but virtual time may make it worth
[21:32:14] <yeik-the-spik[m]> and manifold feels dirty to me anyways
[21:46:36] *** Joins: mbuf (~Shakthi@122.174.182.104)
[21:47:38] <aphyr> ^)_^
[21:48:50] <aphyr> It's a tiny library and it's easy to replace if you want more. Only deps is tools.logging, and it's got close to a decade of deployment in some pretty heavy use cases--systems pushing 10s of millions of events/sec.
[21:57:02] *** Quits: Xylon (~joseph@mail.xylon.me.uk) (Ping timeout: 240 seconds)
[22:01:12] <Para> Hmm, I wonder if those perf/efficiency cores have different advancement characteristics for System#nanoTime.
[22:06:37] <seebs> aaa
[22:06:41] <seebs> that's horrifying
[22:07:03] <seebs> one of the worst perf things i ever saw was someone who was trying to measure latency on web stuff, and they discovered that latency dropped *dramatically* as load increased
[22:07:28] <seebs> eventually i managed to establish that running background things which triggered at least once a millisecond and Did Something removed a lot of the performance hit
[22:07:32] <Para> IIRC one can't really force which core the task is run on either.
[22:08:16] <seebs> so basically, on some modern CPUs, if load is low enough, they're *sluggish to respond at first* which can produce, like, order of magnitude latency hits
[22:08:19] <Para> Like...re-run multiple times, maybe several at the time and hope the NUMA/core type alignment roll goes right.
[22:09:06] <Para> Maybe introduce a fake load segment to your app which is run first to fool the OS scheduler to think that the process will be heavy? :D
[22:10:08] <Para> It's also dumb that Microsoft limits better schedulers to new versions of Windows.
[22:10:19] <Para> They'll eventually backport the schedulers but that always takes time.
[22:11:58] <seebs> in this case, it wasn't even a scheduler thing, I think, it was just the CPU. like, generic all cores basically the same x86, just it would slow way down if nothing was happening.
[22:12:50] <Para> Ah. Yeah, sounds plausible.
[22:17:13] <seebs> and i only just now realized that my testing on it at the time was Invalid, because i was trying to test sub-millisecond sleeps, and Go's internal timer implementation won't actually *try* to sub-millisecond usually.
[22:17:18] *** Quits: justAstache (~justache@user/justache) (Read error: Connection reset by peer)
[22:18:55] *** Joins: justAstache (~justache@user/justache)
[22:28:37] *** Quits: mbuf (~Shakthi@122.174.182.104) (Quit: Leaving)
[23:34:54] *** Joins: Xylon (~joseph@mail.xylon.me.uk)
