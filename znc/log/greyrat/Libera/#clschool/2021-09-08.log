[00:02:59] <lisp123_> speskk: Try also posting in #commonlisp
[00:03:53] <lisp123_> Otherwise, keep this chat open, somebody more knowledgeable will reply when they see it
[00:05:32] *** Quits: vats (~vats@42.111.21.216) (Ping timeout: 252 seconds)
[00:08:49] <speskk> Thanks lisp123_ !
[00:14:41] <pjb> speskk: (defstruct point x y) (loop with p = (make-point :x 1 :y 2) for field in '(point-x point-y) collect (funcall field p)) #| --> (1 2) |# 
[00:17:31] <speskk> Thanks so much pjb, this totally works. As an aside, is it not possible to iterate over empty fields?
[00:25:05] <pjb> It is of course. There's no notion of empty field in structures. 
[00:25:13] <pjb> (loop with p = (make-point) for field in '(point-x point-y) collect (funcall field p)) #| --> (nil nil) |# 
[00:25:57] <pjb> speskk: for standard-objects, you'd have to test for slot-boundp first.
[00:26:36] <speskk> Ah interesting. Thanks so much for the insight. I guess if you're interested at all I'll describe what I'm trying to do, maybe there is a better way,
[00:27:13] <pjb> (defclass color () ((red :initarg :red) (green :initarg :green) (blue :initarg :blue)))   (loop with c = (make-instance 'color :red 30 :green 20) for slot in '(red green blue) collect (if (slot-boundp c slot) (slot-value c slot) :unbound)) #| --> (30 20 :unbound) |# 
[00:27:32] <pjb> speskk: yes, it's quite possible.
[00:28:41] <speskk> I have a struct with a large number of fields (maybe this is a problem in and of itself..). I want to iterate through the struct and 'flip a coin' to decide whether I assign a value to the field or leave it NIL. The abstract is I have an object in a game that when generated has 'random' attributes. I'm trying to write the function that generates the random object.
[00:29:09] <pjb> is the list of attribute random?
[00:29:21] <pjb> Are they all of the same type?
[00:29:39] <speskk> They are all of the same type, just an int in this case.
[00:29:57] <pjb> In that case, it may be better to use a vector.
[00:30:02] <speskk> The so called attriubtes are just a field in a struct. They all act as modifiers of other calculations.
[00:30:20] <pjb> Yes.   You can still wrap it in a standard-object or a structure-object.
[00:30:41] <speskk> That is what I am thinking pjb. It seemed like struct was a nice was to encapsulate construction/etc but I think it's more trouble than it's worth in this case, providing more features than I'd likely need to use.
[00:31:26] *** Joins: dra (~dra@2a04:4540:640b:5900:b1fe:f2a5:2d35:e8c2)
[00:31:41] <pjb> (defconstant +number-of-attributes+ 10) (defclass game-object () ((attributes :initform (map-into (make-array +number-of-attributes+ :initial-element 0) (lambda () (random 1024))) :reader attributes)))   (attributes (make-instance 'game-object)) #| --> #(41 792 306 734 986 757 740 923 963 819) |# 
[00:32:03] <speskk> Thanks very much for your help and insight. I think I'm going to refactor it, either encapsulating more of the peripheray into an object, or less into just a vector.
[00:32:19] <speskk> Ahh
[00:32:31] <pjb> (defstruct game-struct (attributes (map-into (make-array +number-of-attributes+ :initial-element 0) (lambda () (random 1024))) :read-only t)) (make-game-struct) #| --> #S(game-struct :attributes #(541 110 24 676 869 872 821 257 612 253)) |# 
[00:34:00] <speskk> So much stuff I still have to learn. This is amazing, thanks so much pjb
[00:34:59] <pjb> when you start a non-trivial project, it's better to use defclass than defstruct, since it's more versatile and adaptable while developping.  Then if you have some benchmark showing some of them to be too slow, you can consider using defstruct, but in some implementations, structure-object is a subclass of standard-object, so it'd make no difference really.
[00:35:40] <lotuseater> speskk: i think that goes for us all :)
[00:38:13] <speskk> Thanks pjb. I haven't read enough about `defclass`. This small discussion though has already shown me quite a few areas where I haven't really thought enough about layout of the information, so I will pull on that thread and I think start refactoring from there.
[00:38:23] <speskk> Always more to learn lotuseater :)
[00:38:35] <lotuseater> always :)
[00:38:58] <lotuseater> and DEFCLASS really uses more of the power of CLOS
[00:39:18] *** Quits: rain3 (~rain3___@2a02:2f09:d30b:1300:a270:4060:876f:9f40) (Quit: Leaving)
[00:39:51] <speskk> I've never been a good programmer, but I get by. CL is definitely testing the limits of what I think I know about writing software, which wasn't much to being with :D but I'm enjoying it a lot.
[00:40:38] <speskk> I have skirted reading about CLOS because I don't come from a strong OOP background, but I think, at least how I'm setting this game up, it's a classic use case for OOP, so I need to do some homework.
[00:41:08] <lotuseater> that's good when you didn't get brainwashed before
[00:41:33] <speskk> I'll say too, this is a great channel. I pop in here from time to time and there is pretty routinely someone available to answer my inane questions. I really appreciate it folks!
[00:41:42] <lotuseater> the book by Sonya Keene is really good
[00:42:18] <speskk> I will check that out, thanks for the recommendation lotuseater.
[00:42:38] <speskk> I've only read the Practical Common Lisp book so far
[00:43:12] <lotuseater> yeah that not too much so fast ^^
[00:46:38] <lotuseater> the cool thing is, CLOS is more or less just a library with a metaobjectprotocol and you can really get how it works, so very transparent
[00:47:33] <lotuseater> classes and methods are not too strongly connected and there is not really something like this public/private
[00:49:18] <pjb> speskk: yes, OO is often useful with games.
[00:49:21] <speskk> Hm interesting. Like I said I have to read more. I barely have a concept of OOP. The closest I've come to it is the trait system in Rust. Which is to say, not very close at all.
[00:49:23] <pjb> or with GUIs.
[00:50:13] <pjb> speskk: I'd advise to do some squeaking.  http://squeak.org is a nice Smalltalk implementation with a lot of goodies.
[00:50:33] <pjb> Smalltalk the best way to learn what OOP is all about.
[00:51:06] <lotuseater> right, and what most others ignore and then call OOP :D
[00:51:31] <pjb> of course, if you think C++â€¦
[00:51:35] <speskk> :D
[00:51:45] <speskk> I will check out squeak, thanks pjb 
[01:29:55] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:43:37] *** Quits: lisp123_ (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:44:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:48:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[02:07:05] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[02:07:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:25:07] *** Quits: zagura (~zagura@user/zagura) (Ping timeout: 240 seconds)
[02:25:21] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[02:26:56] *** Joins: hendursaga (~weechat@user/hendursaga)
[02:27:47] *** Joins: zagura__ (~zagura@user/zagura)
[02:30:43] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[02:31:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:36:16] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[02:52:01] *** Quits: dra (~dra@2a04:4540:640b:5900:b1fe:f2a5:2d35:e8c2) (Remote host closed the connection)
[03:10:19] *** Joins: lisp123 (~lisp123@5.30.23.247)
[03:12:50] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Quit: ec_)
[03:30:13] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[05:10:47] *** Quits: random-nick (~random-ni@87.116.182.103) (Ping timeout: 252 seconds)
[05:50:38] *** Quits: lotuseater (~user@p200300e7871bf00038fb8d6cf7d8260d.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:59:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[06:05:51] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[07:12:16] *** Quits: sts-q (~sts-q@91.200.108.134) (Ping timeout: 252 seconds)
[07:16:42] *** Joins: sts-q (~sts-q@91.200.108.177)
[07:28:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[08:46:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[09:34:34] *** Joins: vats (~vats@42.111.12.107)
[09:49:07] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[10:05:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:13:01] *** Joins: st_iron (uid370243@id-370243.highgate.irccloud.com)
[10:13:08] <st_iron> good morning
[10:13:29] <lisp123> Good morning, St Iron
[10:13:53] <st_iron> hello lisp123 
[10:13:56] <st_iron> how are you?
[10:14:13] -lisp123- Good :) Just woke up and starting my day, and you?
[10:14:37] <st_iron> oh, similar to you, just running through my notes
[10:14:53] <st_iron> for the day
[10:15:22] <lisp123> Great
[10:34:11] *** zagura__ is now known as zagura
[11:04:13] *** Joins: shka (~herr@109.231.62.239)
[11:43:31] *** Quits: vats (~vats@42.111.12.107) (Ping timeout: 252 seconds)
[12:36:09] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:39:36] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:57:23] *** Joins: makomo (~makomo@user/makomo)
[13:20:56] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[13:21:49] *** Joins: makomo (~makomo@user/makomo)
[13:22:43] *** Quits: makomo (~makomo@user/makomo) (Client Quit)
[13:22:54] *** Joins: makomo (~makomo@user/makomo)
[13:52:10] *** Joins: lotuseater (~user@p200300e7870566004b01295534bb48e2.dip0.t-ipconnect.de)
[14:20:31] *** Joins: treflip (~user@95.79.32.99)
[15:06:13] *** Joins: random-nick (~random-ni@87.116.182.103)
[15:33:32] *** Quits: treflip (~user@95.79.32.99) (Remote host closed the connection)
[16:19:22] <lisp123> A question
[16:20:02] <lisp123> Actually never mind, got my answer :)
[16:30:56] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[17:08:05] *** Joins: vats (~vats@103.70.83.191)
[17:19:57] *** Joins: lisp123_ (~lisp123@45.130.83.218)
[17:22:46] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[17:23:23] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[18:05:50] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:06:25] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:08:29] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:09:25] *** Quits: lisp123_ (~lisp123@45.130.83.218) (Ping timeout: 265 seconds)
[18:11:49] *** Quits: speskk (~user@4133b417.cst.lightpath.net) (Ping timeout: 265 seconds)
[18:29:36] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[18:32:13] *** Joins: speskk (~user@4133b417.cst.lightpath.net)
[18:32:19] *** Parts: speskk (~user@4133b417.cst.lightpath.net) ()
[18:32:40] *** Joins: speskk (~user@4133b417.cst.lightpath.net)
[18:57:20] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 260 seconds)
[19:34:43] *** Joins: thrig (~thrig@65.113.153.50)
[19:51:01] *** Joins: makomo (~makomo@user/makomo)
[20:17:43] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[20:18:07] *** Joins: hendursaga (~weechat@user/hendursaga)
[20:30:59] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:32:49] *** Quits: st_iron (uid370243@id-370243.highgate.irccloud.com) (Quit: Connection closed for inactivity)
[20:54:56] *** Joins: fengshaun (~fengshaun@S0106bc9b6886e536.cg.shawcable.net)
[21:04:52] *** Quits: fengshaun (~fengshaun@S0106bc9b6886e536.cg.shawcable.net) (Quit: bibi!)
[21:30:11] *** Joins: silasfox (~sbv@p200300cec702d762e9ac329684e1b885.dip0.t-ipconnect.de)
[21:47:36] *** Quits: thrig (~thrig@65.113.153.50) (Remote host closed the connection)
[21:48:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[21:55:27] *** Quits: silasfox (~sbv@p200300cec702d762e9ac329684e1b885.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[22:22:42] *** Joins: Josh_2 (~user@37.25.47.130)
[22:33:27] *** Quits: makomo (~makomo@user/makomo) (Quit: WeeChat 3.2)
[22:35:13] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[22:41:50] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 252 seconds)
[22:54:58] <lisp123> I am trying to add a declare within a progn within a macro but getting an erro
[22:55:49] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:56:04] <lisp123> https://plaster.tymoon.eu/view/2625#2625
[22:56:55] <lisp123> Reason I am using progn within a macro is because I have multiple forms (please correct me if I'm wrong here), and then since some of these variables will be special, I am declaring them
[22:58:32] <lisp123> I can avoid the error by adding a " ' " in front of the declare, but I'm not sure if this is interfering with the declare expression
[23:14:00] <lotuseater> you should use LOCALLY there
[23:17:34] <lisp123> lotuseater: Thanks!
[23:19:13] <lotuseater> cause a declare is not intended for being a toplevel form
[23:20:19] <lisp123> I see, that lines up with the error message I was getting
[23:22:05] <lotuseater> I've used it sometimes to wrap a DEFCLASS in it with setting safety to 3 so the types given for slots really get checked.
[23:22:48] <lisp123> That's pretty nifty
[23:34:01] <lotuseater> in CLHS you can see a listing in what lexical scope of which symbols declare can be used
[23:34:18] <lisp123> I have a related question
[23:34:47] <lisp123> if i do (let ((x 0)) (declare (special x) (my-function x))
[23:35:09] <lisp123> does the x in my-function still refer to the x created in the LET?
[23:35:27] <lisp123> I'm trying to nest dynamic extent / indefinite scope variables
[23:36:45] <lotuseater> I don't know.
[23:37:05] <lotuseater> this dynamic-extent thingy is hairy
[23:38:34] <lisp123> seems to work
[23:38:52] <lotuseater> yes but how long?
[23:39:07] <lisp123> one sec
[23:39:22] <lotuseater> this was a rhetorical question
[23:39:53] <lisp123> https://plaster.tymoon.eu/view/2626#2626
[23:47:52] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Quit: ERC (IRC client for Emacs 27.2))
