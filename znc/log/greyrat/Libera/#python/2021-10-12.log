[00:00:23] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[00:00:39] <Subsentient> nedbat: Thanks. Is it just me, or is it incredibly dumb to use .so for python modules on macOS? That's Linux/BSD territory and is just confusing.
[00:00:44] <nedbat> transhumanist: gasMass is a dictionary, or dict
[00:01:06] <nedbat> Subsentient: i have no preconceptions about the right file extension.
[00:02:15] *** Joins: seednode (~seednode@user/seednode)
[00:02:17] *** Joins: georgios (~georgios@user/georgios)
[00:02:24] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 268 seconds)
[00:02:51] *** Parts: bancroft (~bancroft@bras-base-mtrlpq02hsy-grc-06-174-93-254-50.dsl.bell.ca) (WeeChat 3.2)
[00:02:56] <nedbat> Subsentient: on my Mac, I see .so files that aren't part of Python installations, so maybe it isn't so strange.
[00:03:04] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 252 seconds)
[00:03:15] <transhumanist> thanks nedbat
[00:03:25] <nedbat> unless zsh is implemented in Python somehow?  /usr/lib/zsh/5.7.1/zsh/system.so
[00:03:47] *** Joins: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net)
[00:04:21] <Wooble> stack overflow says apple would prefer you use .bundle for those .so files but people use .so for compatibility
[00:04:47] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[00:05:28] <Julian> (it is extremely common to see .so on macOS, despite ^)
[00:05:32] <SnoopJ> what is Linux/BSD about ELF? The standard was born on System V
[00:05:47] <Wooble> leaving aside OS X being BSD :)
[00:05:52] *** Quits: hudo_ (~hudo@62.68.20.210) (Remote host closed the connection)
[00:05:55] *** Joins: hudo__ (~hudo@62.68.20.210)
[00:06:11] <CrtxReavr> Sadly, very little of OSX is BSD-derived anymore.
[00:06:47] *** Joins: ravindUwU (~ravindUwU@n110-22-18-174.sun3.vic.optusnet.com.au)
[00:06:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:06:59] <ravindUwU> Hello!
[00:07:12] <ravindUwU> Is there any way to specify a dataclass field to be immutable?
[00:07:42] *** Joins: kosh (~kosh@user/kosh)
[00:07:48] <CrtxReavr> Probably not without creating your own dataclass.
[00:08:07] <CrtxReavr> Mutability's kind of an all or nothing thing.
[00:08:30] <ravindUwU> Right. With the frozen attribute of the dataclass decorator
[00:08:31] <SnoopJ> ravindUwU, you can freeze the entire class, but I'm not sure there's any way to freeze a field. You'd probably need to wrap it in a @property
[00:08:42] <ravindUwU> CrtxReavr, SnoopJ thanks ^^
[00:09:04] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[00:09:06] *** Quits: rundown (~eb0t@90.208.41.2) (Ping timeout: 260 seconds)
[00:09:20] <ravindUwU> SnoopJ, yeah that's what I've been doing so far. prefix the dataclass prop with an underscore, then write a @property.
[00:09:26] <ravindUwU> *field with an underscore
[00:09:53] <nedbat> ravindUwU: you can also just leave it as a regular attribute, and don't mutate it
[00:10:19] <ravindUwU> sure lol
[00:10:50] *** Quits: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d) (Quit: WeeChat 3.3)
[00:12:03] *** Quits: magla (~gelignite@55d44679.access.ecotel.net) (Quit: Stay safe!)
[00:12:49] <SnoopJ> ravindUwU, attrs has a way to do this at the level of individual fields, FWIW, but it looks like dataclass didn't copy it for whatever reason
[00:13:18] *** Joins: sudomann (~sudomann@73.183.118.9)
[00:13:41] <jinsun> you can annotate as Final then let mypy complain about it if you accidentally mutate
[00:14:05] <jinsun> well not mutate but assign to it, mutation will still be allowed I think
[00:14:06] <whatsupdoc> Question: I keep running into functions similar to filter(). Why do functions like these return a filter object instead of return a list or a tuple? I don't get why they make you do the extra step and convert it to a list all the time?
[00:14:27] <SnoopJ> jinsun, I think mutation per se is allowed in either case, freezing just prevents changing the attribute
[00:14:49] <jinsun> oh ya
[00:14:51] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[00:14:57] <SnoopJ> whatsupdoc, the objects are lazy, and won't hang your machine if you feed them a list with several million elements
[00:15:01] *** Joins: qlixed (~qlixed@host220.181-13-79.telecom.net.ar)
[00:15:23] <KirkMcDonald> whatsupdoc: Sometimes you just want to iterate over the result, and don't care that it's actually a list or whatever.
[00:15:34] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:16:15] <KirkMcDonald> whatsupdoc: In fact, many of these functions *did* return lists in Python 2, but they changed it, because this way is usually more efficient.
[00:16:30] <whatsupdoc> Interesting, okay thanks
[00:16:42] <SnoopJ> `for value in very_large_iterable:  # this will take a while, but the loop will run right away`  vs `for value in list(very_large_iterable):  # nothing happens until we finish building the list`
[00:17:02] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[00:17:03] <KirkMcDonald> Sometimes the iterable is literally limitless.
[00:17:25] *** Joins: kurfen (~kurfen@195.216.219.90)
[00:17:52] *** Joins: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com)
[00:19:53] *** Parts: transhumanist (~hiken@2601:196:8800:35f0:68fe:1a6b:92ae:1b) ()
[00:19:56] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[00:20:02] *** Joins: transhumanist (~hiken@2601:196:8800:35f0:68fe:1a6b:92ae:1b)
[00:20:46] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[00:24:33] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[00:24:46] *** Joins: Auron (~Auron956@user/auron)
[00:25:20] *** Joins: shark (~lemonade@user/sh4rk)
[00:26:03] *** Joins: Julian (~tos9@python/site-packages/Julian)
[00:26:24] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::2612) (Quit: Konversation terminated!)
[00:26:25] *** Joins: diamondbond (~diamondbo@123.231.104.113)
[00:26:31] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[00:26:46] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:26:48] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[00:27:09] <SnoopJ> Is this the best way to spell "give me the buffer under an object, even if it's BytesIO (which doesn't directly support the buffer protocol...?) https://bpa.st/HH3Q
[00:27:48] <SnoopJ> Or perhaps I should just check for getbuffer() and skip the instance check, if that's conventional
[00:27:49] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[00:28:40] *** Quits: ravindUwU (~ravindUwU@n110-22-18-174.sun3.vic.optusnet.com.au) (Quit: KTHXBAI)
[00:31:11] *** Joins: djapo (~archangel@user/djapo)
[00:32:30] *** Joins: Betal (~Betal@user/betal)
[00:34:42] <newpy> what is the best pandas dtype for short strings (less than 6 characters)
[00:35:56] *** Quits: Akuli (~Akuli@82-203-161-142.bb.dnainternet.fi) (Ping timeout: 245 seconds)
[00:36:53] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[00:38:24] *** Quits: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com) (Quit: nappy time)
[00:38:35] <SnoopJ> newpy, you probably want dtype="string" ?
[00:38:49] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:38:56] <newpy> SnoopJ oh ok, was trying to find if that was an option, should have just tried it
[00:39:01] *** Quits: grooverman (~grooverma@177.189.89.171) (Read error: Connection reset by peer)
[00:39:59] <newpy> SnoopJ, ah my class is restricted to an old version of pandas, can't use dtype string
[00:41:03] *** Quits: kurfen (~kurfen@195.216.219.90) (Quit: WeeChat 2.3)
[00:41:31] <SnoopJ> why the restriction?
[00:41:40] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Quit: mogad0n)
[00:41:52] <newpy> SnoopJ, too lazy to update their autograder?
[00:41:57] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:42:05] <SnoopJ> oh, that kind of class
[00:42:07] <newpy> (I meant school class, not python class :P)
[00:43:19] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:43:26] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Ping timeout: 245 seconds)
[00:43:37] *** Joins: sudomann (~sudomann@73.183.118.9)
[00:43:52] *** Quits: miceiken (uid478870@id-478870.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[00:45:28] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.2)
[00:46:03] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[00:46:26] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:47:04] *** Quits: Fiji_ (~Fiji@user/fiji) (Ping timeout: 252 seconds)
[00:47:48] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:48:13] *** Joins: sandb0y (~pirate@user/sandb0y)
[00:48:16] <sveinse> Are there any standard file-like objects/streams APIs under async? io contains various helper classes for streams as regular functions. Does it exists any async counterpart of this?
[00:49:37] *** Joins: Akuli (~Akuli@213.216.210.7)
[00:50:02] *** Joins: aleko1 (~aleko1@2001:470:69fc:105::1:1016)
[00:50:24] *** Quits: Strom (strom@fedora/strom) ()
[00:50:32] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[00:50:45] *** Quits: emf_ (~emf@2620:10d:c090:400::5:fe52) (Quit: emf_)
[00:51:01] *** Quits: diamondbond (~diamondbo@123.231.104.113) (Ping timeout: 265 seconds)
[00:51:16] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:52:01] *** Joins: brickfat (~brickfat@user/brickfat)
[00:52:02] *** Joins: Strom (strom@fedora/strom)
[00:52:18] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:52:37] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:52:56] *** Quits: semeion (~semeion@user/semeion) (Quit: WeeChat 3.3)
[00:53:01] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[00:53:26] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 245 seconds)
[00:53:37] *** Lord_of_Life_ is now known as Lord_of_Life
[00:53:46] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:54:26] <sveinse> My use case is a package that offers a file-like interface to some remote data, and its using io.RawIOBase and io.BufferedReader/Writer as helpers/mixins. I'm porting this to asyncio, but I'm not sure there exists a concept of standard file objects under async and definitely not using these io.* mixins.
[00:54:43] *** Quits: sandb0y (~pirate@user/sandb0y) (Quit: Time for another great escape)
[00:55:04] <deltab> SnoopJ: how often does that get called?
[00:55:07] *** Quits: mogad0n (~mogad0n@user/mogad0n) (Max SendQ exceeded)
[00:55:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[00:56:12] <SnoopJ> deltab, pretty infrequently, it is a helper for a typemap that constructs objects that accept std::istream in their constructor
[00:56:33] <SnoopJ> although if there's an efficiency issue with it I'd want to know about it anyway :)
[00:56:52] <SnoopJ> (you're worried about the imports, perhaps?)
[00:57:30] <deltab> yeah, though it's an internal module, right? so wouldn't be slow to load
[00:57:48] <SnoopJ> that, and the import system has caching
[00:58:07] <deltab> seems untidy doing that work upfront when it might not even be needed
[00:58:13] *** Joins: mogad0n (~mogad0n@user/mogad0n)
[00:58:38] <deltab> and is it possible BytesIO could support the buffer interface in some future version?
[00:58:46] <SnoopJ> I could elide it if just looking for getbuffer() suffices (and the PyObject_GetBuffer() call fails)
[00:59:23] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[00:59:35] <SnoopJ> deltab, not sure, I'm not really clear on why it doesn't support it as-is, actually.
[01:01:01] <deltab> I would try GetBuffer anyway, then if it fails try .getbuffer, and not bohter with the checking for BytesIO specifically
[01:01:58] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 252 seconds)
[01:02:28] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[01:03:05] <SnoopJ> oh hm, actually PyObject_CheckBuffer() checks for getbuffer() anyhow
[01:04:09] <SnoopJ> (I'm using that in the relevant %typemap(check))
[01:05:24] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[01:05:29] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[01:05:50] <SnoopJ> I think I'm not entirely clear on the distinction between getbuffer() and PyObject_GetBuffer. abstract.h says the latter is the C-API version of the former, but it seems to fail on BytesIO objects
[01:06:34] *** Quits: Barones (~Barones@2804:48dc:8500:0:6904:c7e7:9177:1a9c) (Quit: Leaving)
[01:06:59] *** Quits: mantiX (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[01:07:07] *** jazzy2 is now known as jazz-o-lantern
[01:07:24] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[01:09:54] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[01:10:01] <SnoopJ> ...hmm, or maybe it doesn't. I might just be calling PyBuffer_Release() in error
[01:10:39] *** Joins: akk (~akk@75.161.146.115)
[01:11:33] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[01:12:34] *** Joins: cjb (~cjb@user/cjb)
[01:13:22] *** Joins: et_ (~et@user/et)
[01:13:26] <SnoopJ> ah, no, what I was doing was fine, PyObject_GetBuffer() does return -1 for BytesIO instances. It seems like getbuffer() is contractual though, so you're right, I can just fall back on that if it's present.
[01:14:00] <newpy> I have two dataframes with DatetimeIndex, trying to do df1[df2.index] and it's throwing a KeyError "None of [DatetimeIndex..."
[01:14:01] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[01:14:01] *** Joins: src (~src@user/src)
[01:14:16] *** Quits: et (~et@user/et) (Ping timeout: 245 seconds)
[01:14:16] *** et_ is now known as et
[01:14:17] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 246 seconds)
[01:15:15] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[01:15:16] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[01:15:24] <newpy> oh wait, I think I have a sol'n
[01:16:28] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[01:17:18] *** Quits: Tas-sos (~Tas-sos@ppp046177160247.access.hol.gr) (Quit: leaving)
[01:17:39] *** Joins: af (~af@awalgarg.me)
[01:17:40] <newpy> https://paste.ee/p/34oQJ
[01:17:59] <newpy> the top index should have a subset of the bottom index
[01:18:07] <newpy> not sure if there is a quick way to check
[01:18:22] *** tg_ is now known as tg
[01:18:35] <af> I have an idiom/style related question about using enums in fastapi/pydantic which I've described here: http://hastebin.com/ujikurigob.rb. Anyone mind taking a look?
[01:19:16] <newpy> just checked with all(), it's definitely a subset
[01:19:28] <newpy> so I'm not sure why df1[df2.index] is throwing a KeyError
[01:20:07] *** Quits: djapo (~archangel@user/djapo) (Ping timeout: 252 seconds)
[01:21:03] <jinsun> newpy: does df1 have the dates in the columns?
[01:22:02] <newpy> jinsun, no index only
[01:22:05] <jinsun> when indexing the dataframes you have to give the column names not row names
[01:22:32] <jinsun> if you want to index using row names use the .loc indexer
[01:22:41] <jinsun> df1.loc[df2.index]
[01:22:47] <newpy> jinsun oh I see
[01:23:03] *** Joins: QuaternionsRock (~Quaternio@76.191.39.82)
[01:23:27] <newpy> just so I understand, the alternative would be to create a Date column for df1 (clone the index)
[01:23:51] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:f888:9db3:94a7:f52d) (Ping timeout: 245 seconds)
[01:23:55] <QuaternionsRock> is re.fullmatch(pattern, string) exactly equivalent to re.match(pattern + '\\Z', string) ?
[01:23:58] <newpy> and then do what? not sure how to select only those rows where df1.Date is in df2
[01:24:19] *** Quits: fweht (uid404746@id-404746.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[01:24:25] <jinsun> I didn't understand your alternative
[01:24:38] <QuaternionsRock> jinsun was that to me?
[01:24:45] <jinsun> no to newpy
[01:24:50] <newpy> jinsun, well the reason df1[df.index] is failing is because df1 has no Date column?
[01:25:20] <nedbat> QuaternionsRock: yes, though \\Z vs $ is a little fuzzy to me
[01:25:32] <jinsun> newpy: it is failing because the stuff inside df.index is not in the column names of df1
[01:25:32] <QuaternionsRock> Cool
[01:25:42] <newpy> jinsun (your .loc[df2.index] solution works by the way, just want to understand the original error)
[01:25:44] <QuaternionsRock> I know for certain that $ matches \n as well as \0
[01:26:00] <nedbat> QuaternionsRock: \0 is a C thing, not a Python thing
[01:26:02] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[01:26:10] <QuaternionsRock> Yeah but I'm referring to the same thing
[01:26:12] <QuaternionsRock> end of string
[01:26:19] <newpy> jinsun, ohh ok, I thought I was doing fancy indexing, eg. df1[[0,2,5]] would get me row 0, 2, & 5 of df1
[01:26:28] <nedbat> QuaternionsRock: just keep in mind that in a Python channel, people might not understand what you mean by \0
[01:26:36] <QuaternionsRock> sorry you're right
[01:26:38] <jinsun> newpy: df1[...stuff inside df.columns...]   and df1.loc[...stuff inside df.index...]
[01:26:54] <newpy> oh ok, I was using numpy syntax I think, thought it worked in pandas too
[01:26:57] <newpy> .loc it is
[01:26:58] <QuaternionsRock> $ matches both \n and end-of-string (and I think maybe others? \r perhaps?), \Z just matches end-of-string
[01:27:13] *** Quits: gitly (~gitly@185.69.144.227) (Ping timeout: 252 seconds)
[01:28:21] *** Quits: stockholm (~Andreas@p200300d2c703f000ede309b01dcffa7d.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:28:35] <SnoopJ> ...huh, maybe I _can't_ just assume getbuffer() is there after the check, I appear to be hitting an abort in _PyType_Lookup when trying to retrieve it
[01:28:42] <nedbat> QuaternionsRock: that is true with the re.MULTILINE flag. without the flag, $ matches the end of the string
[01:28:49] <deltab> af: I foud this: https://fastapi-utils.davidmontague.xyz/user-guide/basics/enums/
[01:28:53] *** Joins: gitly (~gitly@85.255.237.129)
[01:30:28] <jinsun> are we supposed to be able to import namespace packages? like foo.bar and foo is namespace package so it doesn't have `__init__.py`, but I can do import foo also
[01:30:36] <nedbat> QuaternionsRock: though weirdly, re will also allow one newline at the end of the string? TIL
[01:30:42] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[01:30:47] <af> deltab: I saw that but it does not give ints to put in the db. Further, I'm not sure if it's best for my database code to rely on a type from fastapi.
[01:30:53] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[01:31:51] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Client Quit)
[01:32:02] *** Joins: evocatus (~rg@84.51.113.13)
[01:32:07] <evocatus> hi!
[01:32:32] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:22ca:3921:7462:247b) (Remote host closed the connection)
[01:32:33] <evocatus> I can't find which values pip tools platform option can have
[01:32:40] *** Joins: zeden (~zeden@user/zeden)
[01:32:54] <evocatus> I need to `pip download` packages for Windows from Linux machine
[01:33:32] <QuaternionsRock> nedbat did you get that with match or fullmatch? can't replicate with fullmatch
[01:33:42] <QuaternionsRock> re.fullmatch('a', 'a\n') == None
[01:34:17] <QuaternionsRock> re.match('a\\Z', 'a\n') == None as well
[01:34:18] <nedbat> QuaternionsRock: i was using search, based on something in the MULTILINE description.
[01:34:30] <QuaternionsRock> Oh gotfcha
[01:34:33] <nedbat> QuaternionsRock: $ matches just before one newline at the end
[01:34:35] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Ping timeout: 246 seconds)
[01:34:52] <QuaternionsRock> Can you give the example you're working with?
[01:35:05] *** Quits: kujemiola (~kujemiola@2a01:114f:95e:c800:d97f:d01:bd57:4dc6) (Ping timeout: 256 seconds)
[01:35:06] <nedbat> QuaternionsRock: re.search("abc$", "xasabc\n") --> match
[01:35:22] <QuaternionsRock> Why shouldn't that match?
[01:35:32] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[01:35:37] <nedbat> QuaternionsRock: re.search("abc$", "xasabc\n\n") --> no match
[01:35:56] *** Quits: palasso (~palasso@user/palasso) (Quit: I am not a quitter!)
[01:35:57] <QuaternionsRock> uhhh
[01:36:02] <QuaternionsRock> that doesn't seem like its supposed to happen
[01:36:06] <nedbat> QuaternionsRock: without the MULTILINE flag, $ means end of string, not end of line
[01:36:08] <QuaternionsRock> that's the weirder one to me
[01:36:22] <nedbat> QuaternionsRock: the single newline is the special case
[01:36:36] <QuaternionsRock> pain
[01:36:44] <QuaternionsRock> why is the python regex module so weird lol
[01:37:07] <QuaternionsRock> what's the point of search and match and fullmatch and \Z and ^ and $ if they all do exactly the same thing by default
[01:37:18] <QuaternionsRock> Which, I also want to point out, is not standards compliant
[01:37:24] <KirkMcDonald> It's meant to work with the fact that, when you iterate over the lines of the file, each line will end with a newline (except for the last line, which might not have a newline).
[01:37:42] *** Quits: Akuli (~Akuli@213.216.210.7) (Quit: Leaving)
[01:37:59] <KirkMcDonald> To which standard are you referring?
[01:38:11] <nedbat> QuaternionsRock: i don't thing re is trying to conform to a standard
[01:38:26] <KirkMcDonald> If you're talking about POSIX regular expressions, Python regexes aren't even trying to be those.
[01:38:27] *** Joins: sirquack (~sirquack@2601:643:8680:526:18b0:3cfd:26d7:f50)
[01:38:29] <sirquack>  how do i get the key of a dictionary from one of the items in the dictionary?
[01:38:37] <QuaternionsRock> Oniguruma
[01:38:46] <KirkMcDonald> sirquack: From one of the values, you mean?
[01:38:49] <sirquack> yes
[01:38:57] <KirkMcDonald> sirquack: You'd need to iterate over the dict and look for that value.
[01:38:58] <QuaternionsRock> Oniguruma has been the de facto standard for some time
[01:39:12] <KirkMcDonald> sirquack: Or construct a second dict which maps the values of the first dict to its keys.
[01:39:32] <nedbat> QuaternionsRock: there are many libraries. it doesn't make sense to call Oniguruma "the standard"
[01:39:36] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[01:39:55] <QuaternionsRock> I fully understand that regex is not _actually_ standardized
[01:40:08] <nedbat> QuaternionsRock: in any case, Python is not claiming to use a standard regex, just as vim does not.
[01:40:12] <QuaternionsRock> But Oniguruma regex is absolutely everywhere these days
[01:40:16] <KirkMcDonald> Not to mention Python's re module is somewhat older than Oniguruma.
[01:40:24] <QuaternionsRock> True
[01:40:31] <QuaternionsRock> But the bigger point im trying to make is
[01:40:32] <nedbat> QuaternionsRock: it sounds very popular, yes.
[01:40:44] <QuaternionsRock> The re module feels super unpythonic
[01:40:56] <nedbat> QuaternionsRock: how so?
[01:40:57] <QuaternionsRock> there are just so many ways to accomplish the same task for what appears to be no good reason
[01:41:02] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:41:06] <nedbat> QuaternionsRock: history is why.
[01:41:09] <KirkMcDonald> I mean that just sounds like regular expressions.
[01:41:13] *** Joins: Throgkt (~Throgkt@user/throgkt)
[01:41:14] <QuaternionsRock> dae python 4
[01:41:40] <QuaternionsRock> KirkMcDonald the things i'm referencing here aren't present in either Oniguruma or javascript regex
[01:41:44] <QuaternionsRock> or .net regex afaik
[01:41:50] <nedbat> QuaternionsRock: python 4 will not change re the way you want.  You can use other regex engines if you like.
[01:42:00] <QuaternionsRock> Lol i know
[01:42:05] <QuaternionsRock> Was joke
[01:42:38] <KirkMcDonald> There are bindings to RE2, for one.
[01:42:41] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[01:43:00] <nedbat> or: https://pypi.org/search/?q=oniguruma
[01:43:02] <sveinse> https://pypi.org/project/onigurumacffi/
[01:43:06] <KirkMcDonald> There is also the third-party `regex` module, which may be more to your liking.
[01:45:18] *** Quits: Kharon (uid511277@user/cypris) (Quit: Connection closed for inactivity)
[01:45:21] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Quit: Ping timeout (120 seconds))
[01:45:40] *** Joins: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl)
[01:45:49] *** Joins: Fiji (~Fiji@user/fiji)
[01:46:10] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[01:46:26] <SnoopJ> it's a nice module
[01:47:00] *** Quits: Bato (~plauder@2001:bc8:182c:b39::1) (Remote host closed the connection)
[01:47:40] * SnoopJ particularly like its \p{name=value} specifier for property testing
[01:48:05] *** Quits: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de) (Ping timeout: 264 seconds)
[01:48:08] *** Joins: Bato (~plauder@2001:bc8:182c:b39::1)
[01:48:30] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[01:48:52] *** Quits: programmerq (~programme@user/programmerq) (Ping timeout: 268 seconds)
[01:49:02] *** Quits: mwichmann (~mats@209-188-119-117.taosnet.com) (Ping timeout: 250 seconds)
[01:49:15] *** Quits: comet23 (~comet23@user/comet23) (Ping timeout: 256 seconds)
[01:49:57] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[01:50:27] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[01:50:34] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[01:50:38] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[01:51:05] *** Quits: achilleas (ach@user/achilleas) (Quit: :wq)
[01:51:06] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[01:51:38] *** Joins: sudomann (~sudomann@73.183.118.9)
[01:51:59] *** Joins: kstolen (~kStolen@2a00:fa40:2aaa:1::539:82de)
[01:52:33] *** Joins: programmerq (~programme@user/programmerq)
[01:52:50] *** Joins: achilleas (ach@user/achilleas)
[01:54:01] *** Quits: jazz-o-lantern (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[01:54:38] *** Quits: elkclone (~elkclone@user/elkclone) (Ping timeout: 268 seconds)
[01:54:59] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:9c04:d786:9d05:d79)
[01:55:15] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[01:55:28] <SnoopJ> deltab, I've decided to settle for calling getbuffer() if it's there before calling PyObject_GetBuffer(), since I'd have to call it again anyhow. Thanks for the sanity-check.
[01:56:52] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d)
[01:57:22] *** Quits: evocatus (~rg@84.51.113.13) (Remote host closed the connection)
[01:57:42] *** Joins: evocatus (~rg@84.51.113.13)
[01:59:16] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:9c04:d786:9d05:d79) (Ping timeout: 245 seconds)
[01:59:48] *** Joins: iomari891 (~iomari891@105.112.138.38)
[02:00:18] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0)
[02:00:37] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:01:44] *** Quits: tokerboker (~tokerboke@c-73-71-182-125.hsd1.ca.comcast.net) (Remote host closed the connection)
[02:02:28] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 252 seconds)
[02:02:55] <SnoopJ> I am still a little perplexed about the exact role of getbuffer(), and can't seem to find much in the way of documentation about it, except that PyObject_CheckBuffer() looks for it
[02:02:57] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[02:03:14] *** Joins: promey_ (~Promeys@gateway/tor-sasl/promey)
[02:03:20] *** Quits: ghost43 (~ghost43@gateway/tor-sasl/ghost43) (Quit: Leaving)
[02:03:27] *** Joins: jazzy (~jaziz@user/jaziz)
[02:03:43] *** Quits: QuaternionsRock (~Quaternio@76.191.39.82) (Quit: Client closed)
[02:04:13] *** Joins: nomic2 (~nomic@185.217.117.221)
[02:04:15] *** Quits: whatsupdoc (~whatsupdo@148.64.20.39) (Quit: Client closed)
[02:04:15] *** Joins: ghost43 (~ghost43@gateway/tor-sasl/ghost43)
[02:04:16] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.3)
[02:04:54] *** Quits: nomic2 (~nomic@185.217.117.221) (Client Quit)
[02:04:58] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 265 seconds)
[02:05:24] <sveinse> Am I right that there is no non-async (i.e. blocking) way to acquire the lock with asyncio.Condition() ?
[02:05:54] *** Joins: hoppity (~user@user/hoppity)
[02:06:02] *** Joins: ozoned (odoood@gateway/vpn/protonvpn/odoood)
[02:06:15] <hoppity> Hi guys, how does functools' lru_cache know what to cache?
[02:07:25] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:1aae:87d5:af4f:2c0) (Ping timeout: 252 seconds)
[02:07:44] *** Quits: cjb (~cjb@user/cjb) ()
[02:08:29] <nedbat> hoppity: it's a decorator: you apply it to a function, and it caches the return values of the function
[02:08:39] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 250 seconds)
[02:08:53] *** Joins: brickfat (~brickfat@user/brickfat)
[02:09:20] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[02:10:03] <hoppity> nedbat: so does it cache a particular input = output kind of thing?
[02:10:10] <nedbat> hoppity: yes
[02:10:19] *** Joins: elkclone (~elkclone@user/elkclone)
[02:10:27] <hoppity> thanks
[02:10:39] *** Joins: nomic (~nomic@185.217.117.221)
[02:12:05] *** Quits: Subsentient (~WhiteRat@universe2.us) (Ping timeout: 265 seconds)
[02:12:46] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[02:12:59] *** Joins: korg815 (~korg815@user/korg815)
[02:13:08] <yolo_> I have lots of pip packages, is there a 'safe' way to upgrade them as a whole, considering the packages might have different/conflict dependencies requirements
[02:13:26] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[02:13:40] <yolo_> there is a pipupgrade package that just upgrades all single packages to the newest version, which could break things
[02:13:48] *** Parts: Throgkt (~Throgkt@user/throgkt) ()
[02:14:19] <yolo_> the goal is: once a while I just want to refresh/upgrade those pip installed packages
[02:15:56] <yolo_> https://stackoverflow.com/questions/2720014/how-to-upgrade-all-python-packages-with-pip this is what I'm using, but I wonder how that fixes circular dependency or dependency-conflict issues, if any
[02:15:57] *** Joins: vladoski (~vladoski@2001:b07:add:d406:bdb6:a12d:1913:8f63)
[02:17:22] <nedbat> yolo_: pip-tools has a pip-compile command that will chase down and pin all of the dependencies.
[02:19:06] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Konversation terminated!)
[02:19:14] *** Joins: acegallagher (~Ace@71-211-255-47.hlrn.qwest.net)
[02:19:48] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[02:20:15] <yolo_> new to me, checking, thanks!
[02:20:20] <acegallagher> I'm trying to figure out how to get popen to flush the buffer when writing to a file
[02:20:28] <acegallagher> my searches are useless
[02:20:43] <acegallagher> bufsize only applies to terminal output it seems
[02:21:20] <nedbat> acegallagher: do you mean when the process started by popen writes to the file?
[02:21:46] <yolo_> it will be nice pip can do something like apt: pip update && pip upgrade for all pkgs installed
[02:22:08] <acegallagher> nedbat: yes, exactly. my command is absolutely creating output
[02:22:11] <acegallagher> but I can't see it in the log file
[02:22:33] <nedbat> acegallagher: your command needs to flush, not popen
[02:22:41] *** Joins: phantomotap (~phantomot@c-68-35-28-201.hsd1.al.comcast.net)
[02:22:45] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:23:13] <dodobrain> hi all, does pendulum or a different date./time lib in py parse duration strings ?
[02:23:28] <acegallagher> nedbat: hmmmmmmmmm. when running the command from the normal terminal, I get output right away
[02:23:39] <acegallagher> is there a way to trick this if my command is being particularly u-nclever?
[02:24:05] <energizer> yolo_: pip is a low-level tool. if you want a high-level tool i suggest https://python-poetry.org/
[02:24:28] <nedbat> acegallagher: i don't know if the terminal vs pipe makes a difference
[02:24:44] <energizer> dodobrain: yes
[02:24:47] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[02:25:01] <energizer> dodobrain: it wont go the other way tho
[02:25:06] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[02:25:18] <dodobrain> energizer, i didnt see it in theri doco about parsing an iso8601 duration string to generate a duration object
[02:25:39] <madduck> "expect" should be a synonym for "except"! ;)
[02:25:56] <dodobrain> yes, i dont care for now about generating the duration strings, i just want them parsed correctly into duration objects
[02:25:57] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[02:26:04] <yolo_> energizer: i actually just started using poetry(and like it), it's design for package/module/code development, not for pip install utilties. I don't have issues upgrading/updating requirements.txt/pyproject.toml inside a folder though
[02:27:20] <yolo_> pipx might be OK but I'm not sure if it can install the 50-ish pip-install-user pkgs I use under shell, will give it a shot. maybe pip/poetry is better for development, for utilties I need use pipx instead
[02:28:45] <dodobrain> energizer, ? i see a pendulum.duration(years=, months=, ...)  thats not the same as what i want.. pendulum.create_duration_from_string(duration_string="...")
[02:28:54] <energizer> dodobrain: pendulum.parse
[02:29:03] <dodobrain> lemme see, thanks
[02:29:06] <yolo_> `pipx upgrade-all` is in fact just `pip install -U <all-pkgs>`, however
[02:29:11] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[02:29:49] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[02:30:35] *** Joins: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b)
[02:32:20] *** Quits: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca) (Ping timeout: 256 seconds)
[02:32:53] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d) (Ping timeout: 256 seconds)
[02:34:13] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 250 seconds)
[02:34:47] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[02:35:05] *** Joins: vd (~vd@bras-base-mtrlpq2848w-grc-41-70-53-240-121.dsl.bell.ca)
[02:35:13] *** Joins: spithash (~spithash@user/spithash)
[02:36:47] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d)
[02:37:29] *** Quits: brelod (~me@90.244.150.142) (Quit: leaving)
[02:39:22] *** Joins: Throgkt (~Throgkt@user/throgkt)
[02:39:33] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Quit: emf)
[02:40:46] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 260 seconds)
[02:41:28] *** Joins: sarab (~sarab@103.210.200.98)
[02:42:17] *** Joins: Macuser (~Macuser@216.30.159.201)
[02:42:24] *** Quits: xcombelle (~xavie@176-139-252-198.abo.bbox.fr) (Ping timeout: 245 seconds)
[02:43:01] *** Joins: jetchisel (jetchisel@user/jetchisel)
[02:48:05] <newpy> if I have two dataframes, df1 with 5 columns, and df2 with 2 columns (first being a df1 column name, second being an int), how do I multiply the df2 value with the df1 column value (and maybe assign it to df3 with the same column name as df1)?
[02:48:31] *** Joins: sarab97 (~sarab@103.210.200.98)
[02:49:35] *** Quits: sarab97 (~sarab@103.210.200.98) (Remote host closed the connection)
[02:49:35] *** Quits: sarab (~sarab@103.210.200.98) (Quit: Leaving)
[02:49:51] *** Joins: sarab (~sarab@103.210.200.98)
[02:52:32] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[02:52:45] *** Quits: sarab (~sarab@103.210.200.98) (Client Quit)
[02:53:11] *** Joins: pycurious (~Adium@user/pycurious)
[02:54:39] *** Joins: Nspace (~Nspace@user/nspace)
[02:56:05] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[02:57:08] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[02:58:43] *** Joins: Subsentient (~WhiteRat@universe2.us)
[03:01:46] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Ping timeout: 260 seconds)
[03:02:03] <Subsentient> Anyone know how to get a list of mounted disks on macOS?
[03:02:11] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d) (Quit: Client closed)
[03:02:15] <Subsentient> I'm not calling os.system('mount') lol
[03:02:22] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[03:03:06] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[03:03:33] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com)
[03:04:01] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d)
[03:04:46] <nedbat> Subsentient: idk if there is a library way to do it.  subprocess.check_output("mount") might not be terrible
[03:05:35] <Subsentient> Spawning 'mount' for such a simple task is appalling to me :^(
[03:06:01] <Subsentient> Why can't macOS just have a nice /proc/mounts or at least a convoluted C API like WinNT does? :^(
[03:06:14] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Quit: Client closed)
[03:06:27] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[03:06:50] *** Quits: qlixed (~qlixed@host220.181-13-79.telecom.net.ar) (Ping timeout: 265 seconds)
[03:07:05] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[03:07:29] *** Joins: whatsupdoc (~whatsupdo@148.64.18.99)
[03:08:24] *** Quits: vladoski (~vladoski@2001:b07:add:d406:bdb6:a12d:1913:8f63) (Quit: Textual IRC Client: www.textualapp.com)
[03:08:58] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[03:10:51] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[03:10:59] <aphysically> I kinda wish I could set all commands to be run in a tox lint even if one of them fails, but without ignoring prior ones in the exit code
[03:11:05] <aphysically> not really a big deal though
[03:11:33] *** Joins: odoood__ (~odoood@2601:c8:c003:a550::3)
[03:11:58] <nedbat> Subsentient: mac might have an API for it.
[03:12:01] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 265 seconds)
[03:12:38] <Subsentient> nedbat: I've been looking everywhere, I can't find anything. ObjC/ObjC++ is fine too, just something I can stick in a dylib and call out to with ctypes.
[03:13:17] <nedbat> Subsentient: how fast does this need to be? it sounds like a lot of work when the mount command exists.
[03:13:48] <Subsentient> nedbat: It's called every 500ms, which can get a bit noisy in the processes list. I'd really prefer to avoid that.
[03:13:51] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 276 seconds)
[03:13:58] *** Quits: ozoned (odoood@gateway/vpn/protonvpn/odoood) (Ping timeout: 252 seconds)
[03:14:04] <nedbat> Subsentient: you're checking the mounts twice a second? why is that?
[03:14:19] <Subsentient> nedbat: User expects responsiveness when a drive is inserted
[03:14:35] <Subsentient> and some automated actions are started as soon as it sees the drive
[03:14:48] <nedbat> Subsentient: an inserted drive will be in /Volumes, won't it?
[03:15:06] * aphysically still thinks the empty py.typed file convention is weird
[03:15:07] <Subsentient> nedbat: It should be, but I'm getting an empty list back when I try to collect them in os.scandir('/Volumes/')
[03:16:02] <Subsentient> No API or file access to get mounted drives.... Really makes you want to eat a KG of bath salts and devour Tim Cook's face.
[03:16:39] *** Joins: RougeR (~rougex250@user/rouger)
[03:16:49] <nedbat> Subsentient: isn't this the API? https://developer.apple.com/documentation/foundation/filemanager/1409626-mountedvolumeurls
[03:17:29] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[03:18:00] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[03:18:29] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:8893:62ef:8c3a:512d) (Quit: Client closed)
[03:19:00] <nedbat> Subsentient: you seem pre-angered about the Mac...
[03:20:03] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[03:20:12] <Subsentient> nedbat: Yeah I must admit I'm angry coming from a Linux background or at least Windows and being able to *force* the system to do what I want, even if it complains. With macOS, I constantly hit security barriers with no obvious explanation. For example, os.scandir('/Volumes/') returning an empty iterator.
[03:20:15] *** Quits: dbristow (~dbristow@user/dbristow) (Quit: Leaving)
[03:20:33] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[03:21:31] <newpy> I have a dataframe indexed by date with some named columns
[03:22:13] <newpy> and a second dataframe also indexed by date with two columns (one for a df1 column name, another for an int value)
[03:23:17] <newpy> how would I for each row of the second dataframe, multiply its value by the second dataframe's cell at the same date (and column name referred to by df1's row)
[03:26:19] *** Joins: Nact (~l@2a02:2788:11c4:6e6:da42:e753:215e:64e)
[03:26:22] <aphysically> well I think I've finally run out of excuses for things I can do instead of learning about and implementing unit tests
[03:27:13] *** Joins: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com)
[03:27:37] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[03:27:37] <nedbat> aphysically: you will like testing
[03:27:49] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:9c8f:572b:1cc3:c3b1)
[03:28:09] *** Joins: dbristow (~dbristow@user/dbristow)
[03:28:25] <sveinse> aphysically: yeah, testing in python is actually quite neat
[03:28:32] <aphysically> a lot of people seem to comment on how writing unit tests is a drain, but I'm not worried about that as much as I am intimidated by the flexibility and options. I actually tend to find learning and implementing stuff fun
[03:29:03] <nedbat> aphysically: use pytest, skip unittest
[03:29:43] <aphysically> yeah, from what I've seen pytest seems the de facto standard tool everyone uses
[03:29:52] <sveinse> aphysically: getting a framework up is often the most tedious part. Once that is in place, new tests and new features go hand in glove
[03:30:23] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:3037:d31b:7093:d3ee)
[03:30:27] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-57-65-92-163-194.dsl.bell.ca) (Ping timeout: 240 seconds)
[03:30:52] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[03:31:25] <sveinse> In general, the whole devop chain require som work to setup, but it is so rewarding once its operational
[03:32:24] *** Quits: foobaz212 (~foobaz212@host86-187-225-137.range86-187.btcentralplus.com) (Ping timeout: 256 seconds)
[03:33:14] <aphysically> yeah I've been slowly learning one thing at a time as I convert a toy project of mine from bash into python ( https://github.com/GBeauregard/pyffstream )
[03:33:36] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[03:34:52] *** Quits: odoood__ (~odoood@2601:c8:c003:a550::3) (Ping timeout: 252 seconds)
[03:37:02] <nedbat> aphysically: this is how i explain pytest: https://nedbatchelder.com/text/test3.html
[03:37:15] <energizer> aphysically: brian okken's book is good
[03:37:47] <aphysically> thanks nedbat, energizer I'll read :)
[03:39:09] <hoppity> is a one time pad truly unbreakable?
[03:39:22] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[03:39:24] <energizer> i too find py.typed strange
[03:39:24] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[03:39:52] <energizer> hoppity: see conditions https://en.wikipedia.org/wiki/One-time_pad
[03:39:52] *** Quits: mat001 (~mat001@213.143.69.121) (Remote host closed the connection)
[03:40:13] <hoppity> energizer: than you
[03:40:25] *** Joins: src_ (~src@user/src)
[03:40:42] *** Joins: Warped (~Warped@user/warped)
[03:42:35] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[03:43:00] <grym> key distribution is a really nasty chicken and egg
[03:43:40] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[03:45:15] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:45:46] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[03:45:47] <whatsupdoc> What does calling super() do in a subclass that inherits from multiple base classes?
[03:46:02] *** Joins: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net)
[03:46:18] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[03:46:19] <energizer> whatsupdoc: https://en.wikipedia.org/wiki/C3_linearization
[03:48:40] <Dev0n> would I get better pooling using pgbouncer and sqlalch set to Nullpool than using the built in QueuePool that sqlalch uses as default?
[03:48:46] <nedbat> whatsupdoc: it finds the next class to call
[03:48:49] *** Joins: bukata (~lev@user/bukata)
[03:50:29] <rannnn8888> where where i wrong here ? create multi box ? https://bpa.st/IGQQ
[03:50:33] *** Joins: src (~src@user/src)
[03:53:16] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[03:54:06] <newpy> I made a pastebin for my issue: https://paste.ee/p/fHH4L
[03:54:24] <newpy>  I made a pastebin for my issue: https://paste.ee/p/fHH4L
[03:54:34] <newpy> what I want to happen is for t2 row 0 column 1 to multiply with t row 0 column 'a'
[03:54:47] *** Joins: whatsupdoc19 (~whatsupdo@148.64.18.9)
[03:55:02] *** Quits: whatsupdoc19 (~whatsupdo@148.64.18.9) (Client Quit)
[03:55:06] *** Quits: whatsupdoc (~whatsupdo@148.64.18.99) (Quit: Client closed)
[03:55:07] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-3015-1685-7ac7-6698.res6.spectrum.com) (Read error: Connection reset by peer)
[03:55:24] *** Joins: whatsupdoc (~whatsupdo@148.64.18.9)
[03:55:31] <newpy> I'm also trying to put the resulting product in a third dataframe with the same date row and column (eg. 'a')
[03:58:44] *** Quits: brianward (~brianward@174-21-4-6.tukw.qwest.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:58:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[04:03:18] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Quit: leaving)
[04:03:35] <hoppity> what is the typing library in Python? I see that people use it when they are already using what seem to be buil-in data structures
[04:03:40] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Remote host closed the connection)
[04:04:12] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[04:04:50] <energizer> hoppity: https://www.python.org/dev/peps/pep-0483/
[04:05:00] *** Joins: pycurious (~Adium@user/pycurious)
[04:05:04] *** Quits: flokuehn (~flokuehn@muedsl-82-207-236-231.citykom.de) (Ping timeout: 252 seconds)
[04:05:37] <hoppity> energizer: I apreciate the link but can you tell me the purpose of the tping library ?
[04:06:30] <energizer> hoppity: what do you understand about it so far from the docs?
[04:06:31] *** Quits: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net) (Quit: The Lounge - https://thelounge.chat)
[04:06:41] *** Joins: flokuehn (~flokuehn@mue-88-130-54-168.dsl.tropolys.de)
[04:06:49] <hoppity> energizer: nevermind
[04:07:58] <whatsupdoc> Does python have protected functions?
[04:08:00] *** Joins: thurs8060 (~thurs@ip68-225-209-147.ph.ph.cox.net)
[04:08:23] <energizer> whatsupdoc: no
[04:08:23] <sveinse> whatsupdoc: no
[04:08:44] <whatsupdoc> Ok thanks
[04:10:34] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[04:10:41] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Quit: emf)
[04:10:54] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[04:14:16] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[04:14:17] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[04:17:17] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:17:26] <hoppity> Does anyone know the reason for the typing library apparently implementing types that are already built into Python?
[04:18:24] *** Quits: iomari891 (~iomari891@105.112.138.38) (Quit: WeeChat 3.0.1)
[04:18:32] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:18:52] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[04:19:25] *** Quits: sirquack (~sirquack@2601:643:8680:526:18b0:3cfd:26d7:f50) (Ping timeout: 252 seconds)
[04:19:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Killed (calcium.libera.chat (Nickname regained by services)))
[04:19:37] *** vinleod is now known as vdamewood
[04:19:54] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[04:20:03] <nedbat> hoppity: if you mean Int and List, now they are not needed. you can use int and list
[04:20:38] *** Quits: beterraba (~beterraba@86.107.21.205) (Ping timeout: 260 seconds)
[04:20:40] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[04:20:57] <hoppity> nedbat: exactly, I also saw Dict and thought.. doesn't python already have that?
[04:20:58] *** Joins: pycurious (~Adium@user/pycurious)
[04:22:36] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 245 seconds)
[04:22:38] *** Joins: beterraba (~beterraba@86.107.21.198)
[04:23:03] <nedbat> hoppity: remember that typing was first implemented without changing Python itself.
[04:24:07] <hoppity> nedbat: so you would use Int, Dict etc if you cared about strict typing but use int, dict etc if you did not care?
[04:24:30] <nedbat> hoppity: no, you use Int if <Py3.9, or int if >= 3.9
[04:24:35] *** Quits: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29) (Quit: Konversation terminated!)
[04:25:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[04:26:14] *** Joins: pycurious (~Adium@user/pycurious)
[04:26:23] <hoppity> nedbat: so typing (the library) is now part of Python (sorry if I am completely misunderstanding here)?
[04:26:47] <MacGyver> hoppity: https://www.python.org/dev/peps/pep-0585/
[04:27:03] <MacGyver> The abstract explains it well.
[04:27:10] <energizer> hoppity: yes
[04:27:16] <hoppity> Thank you all
[04:27:54] <energizer> tho i'm not exactly sure what the word 'library' refers to in the python community
[04:28:14] <newpy> any idea why pandas df.sort_values(df.Date) might be throwing a KeyError?
[04:28:26] <hoppity> I haven't used Python in a while so maybe I am using al sorts of wrong terminology. I guess the right name is packag e?
[04:28:34] <energizer> newpy: it takes a string not a series
[04:28:42] <newpy> energizer, that'd do it
[04:28:45] <energizer> hoppity: module
[04:29:01] <Roey> Hey fellow Python afficionados, thank you for making it the most popular language according to the TIOBE index!
[04:29:06] <hoppity> energizer: oh truee, thank you
[04:29:42] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[04:29:59] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[04:30:18] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[04:31:29] *** Joins: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f)
[04:31:32] <nedbat> Roey: we did it!
[04:34:18] <stewie925> hasn't Python been the most popular language for awhile? :)
[04:34:24] <InPhase> TIOBE remains a questionable index even if I like the results better this year.  :)
[04:34:29] *** Joins: vlm (~vlm@user/vlm)
[04:34:43] <Roey> nedbat: :)))))
[04:34:43] <nedbat> stewie925: it hasn't been #1 on tiobe before.
[04:34:46] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Ping timeout: 252 seconds)
[04:34:46] <stewie925> thanks to the many, many python experts here who are always there to help us with our python questions :)
[04:34:55] <Roey> :) :)
[04:35:01] <stewie925> nedbat: oh, I didn't know that
[04:35:02] <Roey> yeah thanks to you guys
[04:35:17] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[04:36:10] <stewie925> its pretty hard to land a python job, everyone seems to be looking for experts :(
[04:36:33] <Roey> I've been playing around with match-case (and dataclasses) in python3.10.  I wonder, what may be the next big addition to the language?
[04:36:53] <stewie925> I have had about 4 years of python experience - but I started from scratch
[04:37:01] <Roey> stewie925: fortunately, it's easy to quickly develop such an expert ability with it :)
[04:37:14] <Roey> oh ok so you sound proficient, then.
[04:37:23] *** Joins: arinov (~arinov@213.194.126.155)
[04:37:26] <stewie925> proficient, not expert
[04:37:28] <stewie925> that's me
[04:37:41] <stewie925> but I still am brushing up on it
[04:37:48] *** Joins: esrh (~user@r4-128-61-91-211.res.gatech.edu)
[04:37:59] *** Joins: fikran (~fikran@user/fikran)
[04:38:42] <stewie925> the other day I asked this question:  how do you append [3] to lists [[4,5[, [6,7]]
[04:38:59] <stewie925> and someone helped me here - I believe it was jinshu
[04:39:07] <energizer> jinsun
[04:39:27] <stewie925> jinsun, goops excuse me :)   thanks energizer for the correction
[04:39:39] <stewie925> Im thinking ginzu knife
[04:40:09] <nedbat> Roey: 3.11 is going to bring performance enhancements, if all goes to plan
[04:40:28] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:40:29] <stewie925> Roey are you currently employed?
[04:40:49] <stewie925> energizer: thanks for the correction
[04:41:23] <Roey> nedbat: aye, I heard that this is GvR's mission now at Microsoft, is to make CPython faster
[04:41:28] <Roey> stewie925: I am, yes
[04:41:34] <Roey> not in a Python position though
[04:41:39] <Roey> how about you, stewie925?
[04:41:48] <stewie925> I am looking
[04:41:52] <stewie925> for a job
[04:41:55] <InPhase> There are 40 times more jobs available in the U.S. for JavaScript than for Visual Basic.  TIOBE lists Visual Basic one notch higher than JavaScript with twice the popularity rating score.  It seems pretty questionable.
[04:42:15] <stewie925> I was laid off with severance package last year, and took the rest of the year off in the middle of covid
[04:42:28] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[04:42:35] <sveinse> I'm sorry
[04:42:36] <stewie925> and I only restarted this year around August
[04:43:08] <stewie925> I really don't mind starting over, just wondering how much they pay....
[04:43:18] <InPhase> Python though is definitely more popular than these others though, so that part ended up correct I think.
[04:43:40] <energizer> nedbat: are they doing the mark shannon plan?
[04:43:43] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[04:43:58] *** Quits: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b) (Ping timeout: 260 seconds)
[04:44:09] <nedbat> energizer: mark shannon is working on it, i don't know if they are using that plan (idk the details of that plan or their progress)
[04:45:56] <stewie925> nedbat has been here for a while, I remember when I started python I asked him questions :)    glad to see him still here
[04:46:22] *** Quits: newpy (~newpy@2601:280:4381:1390:3c15:3b7a:27c7:466) (Ping timeout: 252 seconds)
[04:46:52] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 252 seconds)
[04:47:11] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[04:47:51] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:48:12] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Quit: emf)
[04:48:32] *** Quits: evocatus (~rg@84.51.113.13) (Quit: Konversation terminated!)
[04:48:48] *** Quits: akk (~akk@75.161.146.115) (Quit: +++)
[04:48:53] * nedbat needs a new hobby... :)
[04:48:54] *** Quits: rannnn8888 (~rannnn888@bzq-79-182-162-211.red.bezeqint.net) (Ping timeout: 256 seconds)
[04:49:05] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[04:49:13] <stewie925> nedbat, nooooo :)
[04:49:15] <sveinse> I hosted an interview for a position at work and the first thing the candidate told me how he hates Python and how idiotic it is. When I told him my biggest passion is Py and that we're extending its use, he used the rest of the interview to excuse himself for his statement :D
[04:49:41] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[04:49:48] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[04:49:51] *** Joins: newpy (~newpy@2601:280:4381:1390:3c15:3b7a:27c7:466)
[04:50:11] <stewie925> can't stand people like that who think they're above everyone else
[04:50:34] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Client Quit)
[04:50:50] *** Joins: chenxuezhao (~chenxuezh@106.39.157.10)
[04:51:04] <foo> Using +from argon2 import PasswordHasher for user passwords in a project. I had someone on our team store the user password (albiet hashed) in the user's session (which is hidden from the user, we use redis for user sessions). Is this still a bad idea, even if the password is hashed? I think instead we want to fetch the password from the database and compare to see if a user is trying to change a password to
[04:51:10] <foo> their current password.
[04:52:04] *** Quits: RougeR (~rougex250@user/rouger) (Ping timeout: 265 seconds)
[04:53:00] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[04:53:12] *** Quits: whatsupdoc (~whatsupdo@148.64.18.9) (Quit: Client closed)
[04:55:19] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[04:56:48] *** Joins: jazzy (~jaziz@user/jaziz)
[04:56:57] *** Quits: lesshaste (~lesshaste@82-69-126-43.dsl.in-addr.zen.co.uk) (Remote host closed the connection)
[04:57:28] *** Joins: jetchisel (jetchisel@user/jetchisel)
[04:59:02] *** Joins: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp)
[04:59:25] *** Quits: Lando-HoloNet (~Lando-Spa@user/lando-spacepimp) (Remote host closed the connection)
[04:59:26] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[04:59:26] <newpy> I'm trying to accomplish this in pandas using groupby(): https://paste.ee/p/r4S3e
[04:59:48] <newpy> but the result seems to add extra levels instead
[04:59:52] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[04:59:57] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[05:00:14] <dodobrain> does iso8601 not allow specification of tz info ?
[05:00:38] *** Joins: emf (~emf@2620:10d:c090:400::5:fe52)
[05:00:43] <dodobrain> it seems to allow only literal +/-hours:minutes as the UTC time offsets
[05:01:14] *** Joins: zaquest (~notzaques@5.128.210.178)
[05:02:52] *** Joins: Foxyloxy (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net)
[05:02:57] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[05:03:14] *** Quits: alexyov (~alexyov@84.22.6.244) (Quit: Ping timeout (120 seconds))
[05:03:22] <vdamewood> dodobrain: Nope. Timezones change. UTC offsets are constant.
[05:03:24] *** Joins: alexyov (~alexyov@84.22.6.244)
[05:03:39] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.3)
[05:03:39] *** Joins: Deaygo7 (~Deaygo@let.deaygo.in)
[05:03:49] *** Quits: victori (~victori@cpe-76-174-179-126.socal.res.rr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:03:56] *** Joins: jancoow3 (~jancoow@user/jancoow)
[05:04:00] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[05:04:06] *** Quits: brettgilio (~brettgili@x-node.gq) (Read error: Connection reset by peer)
[05:04:08] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Read error: Connection reset by peer)
[05:04:08] *** Deaygo7 is now known as Deaygo
[05:04:09] *** Quits: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be) (Ping timeout: 265 seconds)
[05:04:09] *** Joins: victori (~victori@cpe-76-174-179-126.socal.res.rr.com)
[05:04:10] *** Quits: jposer (sid132110@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: Darkfoe (sid402081@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: eruditass (uid248673@uxbridge.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: shurane (sid132556@helmsley.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: rubin55 (sid175221@hampstead.irccloud.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: woky (~woky@li1651-31.members.linode.com) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: Foxyloxy_ (~foxyloxy@cpc151593-shef16-2-0-cust343.17-1.cable.virginm.net) (Ping timeout: 260 seconds)
[05:04:10] *** Quits: cole (~cole@user/cole) (Ping timeout: 260 seconds)
[05:04:18] <dodobrain> vdamewood, i'm aware of utc offsets being constant. but the geographical regions themselves are the ones deciding to use a different utc offset during different parts of the year
[05:04:23] *** Joins: beaky_ (~beaky@198.211.118.219)
[05:04:34] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (Remote host closed the connection)
[05:04:42] *** Joins: woky (~woky@li1651-31.members.linode.com)
[05:04:44] *** Quits: ihristov (~ihristov@85.187.46.226) (Quit: Ping timeout (120 seconds))
[05:04:45] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: sale (~sale@ypocit.initech.link) (Ping timeout: 260 seconds)
[05:04:45] *** Quits: beaky (~beaky@2a03:b0c0:0:1010::1e:a001) (Ping timeout: 260 seconds)
[05:04:48] *** Joins: rvgate5 (~rvgate@user/rvgate)
[05:04:48] *** Joins: cole (~cole@user/cole)
[05:04:48] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[05:04:57] *** Quits: Quietus (~quietus@2a04:52c0:101:181::) (Quit: No Ping reply in 180 seconds.)
[05:05:00] *** Quits: metaace_ (~metaace@user/metaace) (Ping timeout: 276 seconds)
[05:05:17] *** Joins: brettgilio (~brettgili@x-node.gq)
[05:05:20] *** Joins: roxfan (roxfan@11.121-64-87.adsl-dyn.isp.belgacom.be)
[05:05:20] *** Quits: jancoow (~jancoow@user/jancoow) (Ping timeout: 260 seconds)
[05:05:20] *** Quits: gerard (~gerard@user/gerard) (Ping timeout: 260 seconds)
[05:05:20] *** Quits: ringo_ (~ringo@157.230.117.128) (Ping timeout: 260 seconds)
[05:05:20] *** Quits: f8e4 (~user@159.89.21.45) (Ping timeout: 260 seconds)
[05:05:20] *** jancoow3 is now known as jancoow
[05:05:24] *** Joins: rubin55 (sid175221@id-175221.hampstead.irccloud.com)
[05:05:25] *** Joins: jposer (sid132110@id-132110.uxbridge.irccloud.com)
[05:05:25] *** Joins: Darkfoe (sid402081@id-402081.helmsley.irccloud.com)
[05:05:26] *** Joins: sale (~sale@ypocit.initech.link)
[05:05:31] *** Joins: eruditass (uid248673@id-248673.uxbridge.irccloud.com)
[05:05:31] <vdamewood> dodobrain: Oh, there's much more than that. Countries also change how they handle timezones. Like when Samoa changed from UTC-12 to UTC+12.
[05:05:32] *** Joins: shurane (sid132556@id-132556.helmsley.irccloud.com)
[05:05:46] *** Joins: gerard (~gerard@user/gerard)
[05:05:50] *** Joins: ringo_ (~ringo@157.230.117.128)
[05:05:55] *** Quits: rvgate (~rvgate@user/rvgate) (Ping timeout: 260 seconds)
[05:05:55] *** rvgate5 is now known as rvgate
[05:06:00] *** Quits: jaykelly450 (~vagrant@c-73-82-49-38.hsd1.ga.comcast.net) (Quit: WeeChat 3.0)
[05:06:01] *** Joins: metaace (~metaace@user/metaace)
[05:06:13] *** Joins: Quietus (~quietus@2a04:52c0:101:181::)
[05:06:16] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[05:06:43] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 252 seconds)
[05:06:53] <vdamewood> Or when China switched from 5 timezones, to one.
[05:06:55] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:06:55] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:07:19] *** Joins: f8e4 (~user@159.89.21.45)
[05:07:19] *** brabrax_ is now known as brabrax
[05:09:21] *** Joins: diamondbond (~diamondbo@123.231.104.113)
[05:10:44] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 268 seconds)
[05:10:57] *** Quits: emf (~emf@2620:10d:c090:400::5:fe52) (Quit: emf)
[05:11:13] <newpy> for anyone interested, the sol'n to my issue was using pandas pivot_table()
[05:11:43] <newpy> ie. creating t2 from t here: https://paste.ee/p/r4S3e
[05:11:49] *** Joins: frost (~frost@59.71.244.36)
[05:14:00] <stewie925> numpy and pandas are greatt for data crunching
[05:14:05] <stewie925> that's all I remember :D
[05:14:18] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 260 seconds)
[05:17:11] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[05:17:38] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:882b:afd4:76be:727c)
[05:20:17] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:21:50] *** Joins: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b)
[05:21:59] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:23:01] *** Quits: lucidreamachine (~brian@2600:1700:1c60:16c0:c815:4a12:6593:9cbb) (Ping timeout: 245 seconds)
[05:25:00] <evidlo> does django's manage.py ignore the current environment variables?
[05:25:34] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Read error: Connection reset by peer)
[05:25:58] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 252 seconds)
[05:26:26] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[05:26:29] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[05:26:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[05:27:35] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[05:30:44] *** Joins: comet23 (~comet23@user/comet23)
[05:30:55] *** Quits: driib (~driib@185.195.233.162) (Read error: Connection reset by peer)
[05:31:11] *** Joins: driib (~driib@185.195.233.162)
[05:31:50] *** Joins: pycurious (~Adium@user/pycurious)
[05:32:56] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Quit: Ping timeout (120 seconds))
[05:33:32] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[05:35:11] *** Joins: sudomann (~sudomann@73.183.118.9)
[05:36:32] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[05:37:19] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[05:38:33] <deltab> foo: yes, not a good idea. The session is presumably read by most pages, so there's a much larger attack surface
[05:38:53] <foo> deltab: thank you, that's what I thought.
[05:39:41] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 245 seconds)
[05:39:42] <deltab> note also that there have been attacks directly on unprotected Redis servers
[05:39:58] <foo> deltab: that's good to know. thank you.
[05:40:26] <deltab> so make sure you restrict access to it
[05:41:14] *** Joins: pluri (~pluri@user/pluri)
[05:44:02] <deltab> hashing the password makes it non-obvious what the password is, but if it's guessable, the hash can't do much to prevent it being guessed eventually; and if a likely password for a user is obtained elsewhere, it's trivial to check against the hash
[05:44:22] <pluri> I have a flask project which, when started on my local machine using `flask run`, it fails with an error because a particular package isn't installed. the error message begins with the line `Error: While importing 'app', an ImportError was raised.`, then continues with the normal traceback information. when transferring the project to my linux server, the project also fails, but the only message printed is `Error: While importing 'app', an ImportError was
[05:44:23] <pluri>  raised.` So the traceback information doesn't get printed. I can't figure out why there is this difference in behaviour.
[05:44:26] <foo> deltab: fair enough, makes sense. This was my hunch too, doing a code review and noticed this.
[05:44:56] *** Parts: devcpu (~rusty@d50-92-229-34.bchsia.telus.net) ()
[05:48:07] *** Quits: src (~src@user/src) (Quit: Leaving)
[05:48:21] *** Joins: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com)
[05:48:57] <deltab> pluri: it might be configured to limit output when it detects it's not running in development mode (e.g. accessed at loclahost)
[05:49:55] <pluri> deltab thanks, that's what i figured, but I've actually set the env variables to be the same. the info printed on the linux server confirms this, ` * Environment: development`
[05:51:33] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:53:09] *** Quits: zebrag (~chris@user/zebrag) (Remote host closed the connection)
[05:55:08] *** Joins: iflema (~ian@user/iflema)
[05:57:33] *** Quits: pagnol (~user@014198154145.ctinets.com) (Remote host closed the connection)
[05:57:44] *** Quits: alphasierra (~alphasier@2405:201:e:4d:e91c:e3b8:9701:614f) (Remote host closed the connection)
[06:00:15] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[06:02:25] *** Joins: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net)
[06:06:01] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:06:06] *** Quits: esrh (~user@r4-128-61-91-211.res.gatech.edu) (Quit: ERC (IRC client for Emacs 27.2))
[06:07:08] *** Quits: shark (~lemonade@user/sh4rk) (Quit: ZNC 1.8.2 - https://znc.in)
[06:08:03] *** Joins: pycurious (~Adium@user/pycurious)
[06:08:38] *** Quits: diamondbond (~diamondbo@123.231.104.113) (Quit: Leaving)
[06:08:49] *** Quits: nyah (~nyah@bcdcb6e3.skybroadband.com) (Ping timeout: 252 seconds)
[06:09:35] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 250 seconds)
[06:11:55] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[06:15:12] *** Quits: brnwx (~brnwx@cpe-74-71-226-69.nyc.res.rr.com) (Ping timeout: 265 seconds)
[06:20:53] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[06:23:25] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 265 seconds)
[06:24:10] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Client Quit)
[06:24:57] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:26:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[06:26:35] *** Joins: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06)
[06:28:17] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[06:29:04] *** Joins: ShinyCyril (~ShinyCyri@65.79.144.153)
[06:31:40] *** Quits: martums (~martums@user/martums) (Read error: Connection reset by peer)
[06:31:57] *** Joins: llh (~llh@user/llh)
[06:32:02] *** Joins: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net)
[06:34:50] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:882b:afd4:76be:727c) (Read error: Connection reset by peer)
[06:35:07] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:882b:afd4:76be:727c)
[06:39:16] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:882b:afd4:76be:727c) (Ping timeout: 245 seconds)
[06:41:35] *** Joins: jmiehe1 (~Thunderbi@user/jmiehe)
[06:42:24] *** Quits: jdmark (~jdmark@097-102-095-007.res.spectrum.com) (Read error: Connection reset by peer)
[06:42:58] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 252 seconds)
[06:42:58] *** jmiehe1 is now known as jmiehe
[06:43:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:44:52] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:45:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[06:47:20] *** Joins: fikran (~fikran@user/fikran)
[06:47:42] *** Joins: ericzolf (~ericzolf@HSI-KBW-46-223-149-105.hsi.kabel-badenwuerttemberg.de)
[06:48:35] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:50:12] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[06:50:27] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[06:55:03] *** Joins: pycurious (~Adium@user/pycurious)
[06:55:52] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: vvdaiwrw)
[06:56:25] *** Quits: l4yer (~l4yer@159.48.55.9) (Ping timeout: 265 seconds)
[06:59:25] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[06:59:55] *** Joins: promeys (~Promeys@gateway/tor-sasl/promey)
[07:00:16] *** Quits: stewie925 (~stewie925@2600:1702:44f0:35c0:9c8f:572b:1cc3:c3b1) (Quit: Client closed)
[07:01:09] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[07:02:39] *** Quits: promey_ (~Promeys@gateway/tor-sasl/promey) (Ping timeout: 276 seconds)
[07:05:37] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[07:05:51] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[07:07:20] *** Quits: ShinyCyril (~ShinyCyri@65.79.144.153) (Quit: ShinyCyril)
[07:10:09] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[07:10:25] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 252 seconds)
[07:10:34] *** Quits: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3) (Remote host closed the connection)
[07:10:48] *** Quits: jarthur (~jarthur@cpe-70-114-198-37.austin.res.rr.com) (Remote host closed the connection)
[07:11:19] *** Joins: Hunterkll (~hunterkll@2001:470:8b06:100:2958:1194:aedf:1fa3)
[07:11:35] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[07:11:59] *** Quits: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b) (Ping timeout: 250 seconds)
[07:12:32] *** Joins: deetwelve (~deetwelve@user/deetwelve)
[07:13:54] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[07:15:45] *** Quits: LiftLeft (~LiftLeft@191.96.185.13) (Ping timeout: 265 seconds)
[07:16:02] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[07:16:43] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Read error: Connection reset by peer)
[07:16:58] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[07:17:14] *** Quits: promeys (~Promeys@gateway/tor-sasl/promey) (Remote host closed the connection)
[07:17:34] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[07:17:37] *** Joins: promeys (~Promeys@gateway/tor-sasl/promey)
[07:17:38] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Remote host closed the connection)
[07:17:58] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:3037:d31b:7093:d3ee) (Ping timeout: 260 seconds)
[07:18:03] *** Quits: simplicity (~yti@user/simplicity) (Remote host closed the connection)
[07:18:46] *** Quits: strungout (znc@mutant.penguin.fyi) (Quit: ZNC - https://znc.in seek the truth or pay the price)
[07:19:01] *** Joins: suffer (znc@mutant.penguin.fyi)
[07:20:06] *** Joins: simplicity (~yti@user/simplicity)
[07:20:13] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-a9f5-b81c-4133-aa88.res6.spectrum.com)
[07:20:51] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[07:21:55] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[07:23:10] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:23:25] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[07:23:26] *** Joins: l4yer (~l4yer@159.48.55.9)
[07:27:06] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[07:29:47] *** Joins: pycurious (~Adium@user/pycurious)
[07:30:06] *** Joins: bdeshi (~bdeshi@45.86.163.209)
[07:30:47] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[07:31:13] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[07:33:01] *** Joins: Wulf (~Wulf@user/wulf)
[07:33:15] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[07:34:28] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[07:34:41] *** Quits: etbcf (~etbcf@2001:8a0:7b3a:dd01:2304:1fdd:d447:fe06) (Ping timeout: 245 seconds)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:53] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 268 seconds)
[07:38:41] *** Quits: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca) (Quit: Bye)
[07:41:14] *** Quits: ericzolf (~ericzolf@HSI-KBW-46-223-149-105.hsi.kabel-badenwuerttemberg.de) (Ping timeout: 265 seconds)
[07:43:46] *** Joins: LiftLeft (~LiftLeft@191.96.185.40)
[07:46:35] *** Quits: Sheilong (uid293653@id-293653.ilkley.irccloud.com) ()
[07:47:51] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[07:48:51] *** Quits: LiftLeft (~LiftLeft@191.96.185.40) (Ping timeout: 245 seconds)
[07:49:34] *** Joins: Thanatos (~Thanatos@197.210.64.65)
[07:49:41] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 250 seconds)
[07:50:29] *** Quits: HenryG (~quassel@2607:5300:201:3000::f63) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[07:50:42] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[07:52:21] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 265 seconds)
[07:52:25] *** Quits: Thanatos (~Thanatos@197.210.64.65) (Client Quit)
[07:52:39] *** Joins: HenryG (~quassel@2607:5300:201:3000::f63)
[07:55:17] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[07:57:47] *** Joins: jetchisel (jetchisel@user/jetchisel)
[08:02:47] *** Joins: Thanatos (~Thanatos@197.210.64.65)
[08:06:22] *** Joins: pycurious (~Adium@user/pycurious)
[08:08:10] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:08:16] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:10:55] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[08:11:39] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[08:13:27] *** Quits: pr100 (~pr100@cpc92728-cmbg20-2-0-cust160.5-4.cable.virginm.net) (Ping timeout: 256 seconds)
[08:14:16] *** Joins: odoood (~odoood@2601:c8:c003:a550::3)
[08:15:42] *** Joins: matrixbot_bartab (~matrixbot@155.210.31.93.rev.sfr.net)
[08:16:28] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Quit: This computer has gone to sleep)
[08:17:13] *** Joins: jazzy (~jaziz@user/jaziz)
[08:20:05] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[08:20:31] *** Quits: odoood (~odoood@2601:c8:c003:a550::3) (Ping timeout: 245 seconds)
[08:24:45] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[08:26:36] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:27:44] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Remote host closed the connection)
[08:30:16] *** Quits: c10l (~c10l@user/c10l) (Quit: The Lounge - https://thelounge.chat)
[08:30:41] *** Joins: c10l (~c10l@user/c10l)
[08:31:43] *** Quits: ttree (~ttree0@c-73-239-62-159.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[08:32:05] *** Joins: stranac (~stranac@195.29.239.126)
[08:33:05] *** Joins: ThanatosJ (~Thanatos@197.210.64.65)
[08:34:19] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[08:35:51] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Ping timeout: 265 seconds)
[08:36:00] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[08:36:16] *** Quits: Thanatos (~Thanatos@197.210.64.65) (Ping timeout: 252 seconds)
[08:36:28] *** Quits: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net) (Read error: Connection reset by peer)
[08:36:50] *** Joins: pycurious (~Adium@user/pycurious)
[08:37:36] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 245 seconds)
[08:39:49] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-a9f5-b81c-4133-aa88.res6.spectrum.com) (Quit: jarthur)
[08:41:39] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[08:42:05] *** Joins: Thanatos (~Thanatos@105.112.41.209)
[08:43:26] *** Joins: bandit_za (~bandit@185.195.232.173)
[08:43:31] <bandit_za> I'm signing PDF documents with endesive (RSA public/private key pair). I'd prefer not to store the pvt key in plain text on my server. Is there a 0 knowledge strategy for encrypting the private key or deriving it from the session such that it can be proved that the server didn't sign anything maliciously (ie it was a user-initiated action)
[08:43:59] <bandit_za> I considered encrypting it with the user's password and then decrypting on login and storing it in the session...but then it's in the dB in the session, anyways. But still might be better than storing it in plain text.
[08:44:04] *** Quits: ThanatosJ (~Thanatos@197.210.64.65) (Ping timeout: 265 seconds)
[08:44:21] <Helle> bandit_za: crypto hardware
[08:44:47] <Helle> bandit_za: which provide a secure store of the key and can sign/encrypt data provided to it without being able to read back the key
[08:45:01] <Helle> some platforms provide this by default
[08:45:06] <Helle> don't roll your own software solution really
[08:45:33] <bandit_za> Helle: I was afraid you were going to say that >_< -- don't always have access to users in the field. And it will raise the cost for the rollout because users are contractors around the world who jump in and out of service
[08:45:51] <Helle> bandit_za: there are (USB) smartcards that can do this
[08:46:09] <bandit_za> Helle: something like a yubikey?
[08:46:12] <Helle> yep
[08:46:32] <Helle> but beyond that, isolate the system that has to do this and make it ONLY do this with minimum managment access, etc
[08:48:09] *** Quits: p-i-_ (~Ohmu@223.206.71.4) (Remote host closed the connection)
[08:48:28] <bandit_za> Helle: you mean break it out into its own service which has no relation to my actual app except for signing?
[08:48:44] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[08:49:25] *** Quits: hudo__ (~hudo@62.68.20.210) (Ping timeout: 252 seconds)
[08:49:25] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[08:49:25] <Helle> bandit_za: yeah, if you have to have it on a server, make it a very isolated thing
[08:49:36] <Helle> bandit_za: but I'd recommend using appropriate hardware instead
[08:49:49] *** Joins: ThanatosJ (~Thanatos@105.112.41.209)
[08:50:11] <Helle> remember btw if this is running on the contractor's phone, you could write a phone app and use TrustZone to store it on such hardware on their phone
[08:50:58] <bandit_za> Helle: is there a way to do that cross platform from a web application?
[08:51:16] *** Quits: Thanatos (~Thanatos@105.112.41.209) (Read error: Connection reset by peer)
[08:51:38] <Helle> bandit_za: Not at this point in time I believe
[08:51:48] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 265 seconds)
[08:51:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[08:52:03] <bandit_za> Helle: regarding your "on the server" advice -- is there an architecture I can read up on to implement? Like how to define the interface between my monolith and the signing module
[08:52:24] <Helle> uh, no idea really, it depends on your whole ecosystem
[08:52:26] <bandit_za> (in a secure fashion)
[08:53:32] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[08:53:50] *** Joins: ravan (~ravan@user/ravan)
[08:54:03] *** Quits: nomic (~nomic@185.217.117.221) (Quit: Leaving)
[08:54:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[08:56:01] <meejah> why are you signing them?
[08:56:39] *** Joins: fikran (~fikran@user/fikran)
[08:56:58] <bandit_za> meejah: it's for crew to checkout gear and their team leader to sign that he received X gear which is listed on this PDF
[08:58:29] <Helle> bandit_za: yeah, that sounds like a task for TrustZone or the like
[08:58:30] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:59:08] <meejah> seems like you want the client-side to sign, yeah
[08:59:35] * aphysically grumbles
[08:59:47] <aphysically> I have a lot of mypyc bugs I need to report
[09:00:29] <aphysically> most of them have workarounds, but the bugs and workarounds were unreported and undocumented so I should put it out there
[09:01:25] <bandit_za> aphysically: if you did do the report, you would be doing a great service to the community. thanks
[09:01:55] <jinsun_> aphysically: what happened about the Final thing? did you get something from the PEP authors?
[09:02:01] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[09:03:01] <aphysically> I sent them a courteous email saying we're in a bit of a pickle and inviting them to comment on the bpo issue (not with that wording)
[09:03:32] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Remote host closed the connection)
[09:03:37] <aphysically> I haven't heard back or seen them comment, but it's only been a day so I'm not concerned
[09:03:55] <jinsun_> cool
[09:04:37] *** Joins: truth (~truth@user/truth)
[09:05:30] <aphysically> someone actually fixed the rich concurrency bug in their own repo
[09:05:35] <aphysically> (the one that drives me nuts)
[09:05:54] *** Joins: acresearch (~acresearc@user/acresearch)
[09:05:55] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 252 seconds)
[09:06:23] <aphysically> I think I read the rich maintainer saying somewhere he's taking a break for a little while so I was trying to figure out the best way to host the minimum patches I need somewhere
[09:06:59] <aphysically> (just fixing concurrency and pyright support really)
[09:07:41] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[09:07:51] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[09:08:42] <aphysically> not sure if I can specify dependencies to github repos directly in pyproject.toml and such
[09:09:24] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 276 seconds)
[09:09:33] *** Joins: pycurious (~Adium@user/pycurious)
[09:10:26] <jinsun_> you can pip install from them, and I think PEP 440 had something to give a url as version
[09:11:17] <aphysically> right I knew I could from pip, the latter is sorta what I was looking for, thanks I'll read the details of it
[09:11:41] <jinsun_> https://www.python.org/dev/peps/pep-0440/#direct-references
[09:11:54] <aphysically> nice
[09:12:40] <jinsun_> not sure how well the packaging backends will support that though
[09:12:51] <jinsun_> haven't tried myself
[09:13:15] <aphysically> we'll find out; right now I'm using flit cause my project is so simple
[09:14:09] <aphysically> flit will actually be able to do pip-native editable installs with the next pip minor release (the next pip minor release adds support for the PEP that proposed a build system agnostic editable protocol)
[09:15:12] <aphysically> flit is pretty good for such a basic project like mine, except it doesn't have anything like lock files
[09:16:42] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:5527:ccff:5ea:c03d)
[09:16:43] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[09:17:08] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[09:17:28] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Remote host closed the connection)
[09:17:51] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[09:17:51] <energizer> aphysically: why use flit instead of poetry?
[09:18:43] *** Quits: Togra (~Togra@user/togra) (Ping timeout: 252 seconds)
[09:19:01] <aphysically> it's the only major build system supporting the new PEP for metadata so far which is cool I guess
[09:20:03] *** Joins: Thanattt (~Thanatos@105.112.41.209)
[09:20:11] <energizer> which pep is that?
[09:20:55] <aphysically> https://www.python.org/dev/peps/pep-0621/ it standardizes things like specifying dependencies and the version and stuff
[09:21:01] <aphysically> classifiers, that sort of thing
[09:21:20] <aphysically> I think the status of the other packaging system is
[09:21:59] <aphysically> poetry: has some sort of philosophical disagreement with PEP 621 dependencies or something
[09:22:14] <aphysically> setuptools: probably will implement support for it eventually tm
[09:22:34] *** Quits: Thanattt (~Thanatos@105.112.41.209) (Read error: Connection reset by peer)
[09:22:58] *** Quits: ThanatosJ (~Thanatos@105.112.41.209) (Ping timeout: 252 seconds)
[09:23:09] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:7e59:ba99:e211:660d)
[09:24:06] <energizer> pip not being able to -e poetry packages for like 4 years has been really annoying
[09:24:17] *** Joins: Togra (~Togra@user/togra)
[09:24:19] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 265 seconds)
[09:24:34] <aphysically> well, the PEP that provides an -e system agnostic to the packager is implemented in pip and will be released in the next minor release
[09:24:51] <energizer> yeah thats progress
[09:25:05] <aphysically> flit has already implemented it so it will start working as soon as the pip version is released (I think one of the flit people authored the PEP maybe?)
[09:25:26] <energizer> yeh i remember that issue in /packaging-issues
[09:25:35] *** Joins: pwnd_sfw7 (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[09:26:11] <energizer> er
[09:26:23] <aphysically> anyway I have nothing against poetry, I was just new to python packaging and I thought the new PEP was cool and people tell me PEPs are cool so I wanted to try it and there wasn't really much more to it than that
[09:26:41] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (Read error: Connection reset by peer)
[09:26:41] *** pwnd_sfw7 is now known as pwnd_sfw
[09:26:44] <energizer> https://github.com/pypa/packaging-problems/issues/256#issuecomment-559250309
[09:27:25] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[09:27:55] <aphysically> there was some poetry issue on PEP 621 that has a ton of comments, but the gist of it seemed to be there's unlikely to be any movement any time soon from poetry maintainers because of the dependency thing being a demotivating factor
[09:28:38] <energizer> mhmm
[09:28:39] <aphysically> not a disqualifying factor; the PEP provides an escape hatch for any build system to provide their own version of any metadata thing, including dependencies - just a demotivating factor that looked like it will stall implementation
[09:29:34] <aphysically> I thought the whole thing was a bit confusing since my understanding was the person dissatisfied with the PEP was one of the authors
[09:29:37] <aphysically> (of the PEP)
[09:32:29] *** Joins: HaMsTeRs (~Thunderbi@182.153.63.35)
[09:32:45] *** Joins: sudomann (~sudomann@73.183.118.9)
[09:34:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 252 seconds)
[09:35:54] *** Joins: petemc (~pete@vps-80fad31a.vps.ovh.net)
[09:36:42] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[09:38:26] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 245 seconds)
[09:38:56] *** Joins: manti7 (~manti7@176.10.104.94)
[09:39:39] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[09:39:50] *** Quits: chenxuezhao (~chenxuezh@106.39.157.10) ()
[09:39:51] *** Joins: control (~v1@user/control)
[09:39:53] *** Joins: akaWolf (~akaWolf@akawolf.org)
[09:40:01] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[09:40:37] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 265 seconds)
[09:41:55] *** Quits: zepolen (~zepolen@2a02:587:860a:4682:5c31:3b13:b3ea:efca) (Ping timeout: 250 seconds)
[09:42:18] *** Joins: zepolen (~zepolen@2a02:1388:2080:f5d9:44f8:cf47:9159:915e)
[09:43:27] <control> hello, i has this code https://bpa.st/UBLA . it runs fine, the order for permutations is from right to left. is it possible to change the permutation order to start from left to right?
[09:44:33] *** Joins: chenqisu12 (~xirndc@183.217.201.186)
[09:44:52] <energizer> control: can you reverse the argument before you call permutations on it
[09:45:20] <control> but it still does the same order even reversing
[09:46:06] *** Joins: pycurious (~Adium@user/pycurious)
[09:46:07] <control> i mean, if its a lot of words, it starts permutation from the right side
[09:46:21] <control> i want to start it from beggining of the left
[09:46:41] *** Quits: zepolen (~zepolen@2a02:1388:2080:f5d9:44f8:cf47:9159:915e) (Read error: Connection reset by peer)
[09:46:42] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[09:46:54] *** Joins: zepolen (~zepolen@athedsl-154557.home.otenet.gr)
[09:47:23] *** Quits: ArchDave2 (~ArchDave2@024-217-066-196.res.spectrum.com) (Quit: Leaving)
[09:47:37] *** Joins: seednode (~seednode@user/seednode)
[09:49:50] <energizer> control:  isnt that (reversed(p) for p in permutations(reversed(seq)))
[09:50:06] <energizer> or am i confused
[09:50:34] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[09:52:03] *** Quits: acresearch (~acresearc@user/acresearch) (Quit: WeeChat 2.8)
[09:52:31] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[09:55:43] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[09:57:11] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 245 seconds)
[09:58:01] *** Quits: HaMsTeRs (~Thunderbi@182.153.63.35) (Ping timeout: 265 seconds)
[09:58:08] *** Joins: HaMmY1 (~Thunderbi@182.153.46.17)
[09:58:26] *** Quits: jay-m126 (~jay-m@41.205.30.141) (Ping timeout: 245 seconds)
[09:58:30] *** Quits: jay-m126_ (~jay-m@41.205.30.141) (Ping timeout: 265 seconds)
[10:00:26] *** HaMmY1 is now known as HaMsTeRs
[10:00:30] *** Joins: kosh (~kosh@user/kosh)
[10:01:18] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[10:02:37] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[10:02:48] *** Joins: palasso (~palasso@user/palasso)
[10:03:05] *** Joins: gusto (~Augustus@2620:149:e0:6002::56)
[10:03:18] *** Joins: ExeciN (~ExeciN@user/nicexe)
[10:04:28] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:04:38] *** Quits: akaWolf (~akaWolf@akawolf.org) (*.net *.split)
[10:04:38] *** Quits: control (~v1@user/control) (*.net *.split)
[10:04:38] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (*.net *.split)
[10:04:38] *** Quits: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net) (*.net *.split)
[10:04:38] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (*.net *.split)
[10:04:38] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (*.net *.split)
[10:04:38] *** Quits: c10l (~c10l@user/c10l) (*.net *.split)
[10:04:38] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[10:04:38] *** Quits: bdeshi (~bdeshi@45.86.163.209) (*.net *.split)
[10:04:38] *** Quits: l4yer (~l4yer@159.48.55.9) (*.net *.split)
[10:04:38] *** Quits: simplicity (~yti@user/simplicity) (*.net *.split)
[10:04:38] *** Quits: suffer (znc@mutant.penguin.fyi) (*.net *.split)
[10:04:38] *** Quits: deetwelve (~deetwelve@user/deetwelve) (*.net *.split)
[10:04:38] *** Quits: iflema (~ian@user/iflema) (*.net *.split)
[10:04:38] *** Quits: driib (~driib@185.195.233.162) (*.net *.split)
[10:04:38] *** Quits: arinov (~arinov@213.194.126.155) (*.net *.split)
[10:04:38] *** Quits: dbristow (~dbristow@user/dbristow) (*.net *.split)
[10:04:38] *** Quits: dodobrain (~dodobrain@user/dodobrain) (*.net *.split)
[10:04:38] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (*.net *.split)
[10:04:38] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (*.net *.split)
[10:04:38] *** Quits: et (~et@user/et) (*.net *.split)
[10:04:38] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (*.net *.split)
[10:04:38] *** Quits: AsenMx (~AsenMx@78.90.248.234) (*.net *.split)
[10:04:38] *** Quits: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net) (*.net *.split)
[10:04:38] *** Quits: moto (~moto@user/moto) (*.net *.split)
[10:04:38] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (*.net *.split)
[10:04:38] *** Quits: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com) (*.net *.split)
[10:04:38] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (*.net *.split)
[10:04:39] *** Quits: af (~af@awalgarg.me) (*.net *.split)
[10:04:39] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (*.net *.split)
[10:04:39] *** Quits: djhankb (~djhankb@208.113.164.68) (*.net *.split)
[10:04:39] *** Quits: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (*.net *.split)
[10:04:39] *** Quits: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com) (*.net *.split)
[10:04:39] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[10:04:39] *** Quits: Bardon (~Bardon@user/Bardon) (*.net *.split)
[10:04:39] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[10:04:39] *** Quits: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au) (*.net *.split)
[10:04:39] *** Quits: apteryx (~maxim@207.35.95.251) (*.net *.split)
[10:04:39] *** Quits: rexbinary (~rexbinary@user/rexbinary) (*.net *.split)
[10:04:39] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (*.net *.split)
[10:04:39] *** Quits: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca) (*.net *.split)
[10:04:39] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (*.net *.split)
[10:04:39] *** Quits: Milos (~Milos@user/milos) (*.net *.split)
[10:04:39] *** Quits: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de) (*.net *.split)
[10:04:39] *** Quits: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net) (*.net *.split)
[10:04:39] *** Quits: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de) (*.net *.split)
[10:04:39] *** Quits: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com) (*.net *.split)
[10:04:39] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (*.net *.split)
[10:04:39] *** Quits: dgdg (~dg_dg@191.101.31.44) (*.net *.split)
[10:04:39] *** Quits: pankid (~quassel@pankid.club) (*.net *.split)
[10:04:39] *** Quits: Yhg1s (sid387777@python/psf/thomas) (*.net *.split)
[10:04:39] *** Quits: sharpertool (sid80151@hampstead.irccloud.com) (*.net *.split)
[10:04:39] *** Quits: ihaveamac (~ihaveamac@ihaveahax.net) (*.net *.split)
[10:04:39] *** Quits: FurCoatStarlette (FurCoatSta@159.196.89.115) (*.net *.split)
[10:04:39] *** Quits: acegallagher (~Ace@71-211-255-47.hlrn.qwest.net) (*.net *.split)
[10:04:39] *** Quits: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net) (*.net *.split)
[10:04:39] *** Quits: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net) (*.net *.split)
[10:04:39] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (*.net *.split)
[10:04:39] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[10:04:39] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (*.net *.split)
[10:04:39] *** Quits: c4017w_ (~c4017@209.52.68.8) (*.net *.split)
[10:04:39] *** Quits: renrelkha (~renrelkha@user/renrelkha) (*.net *.split)
[10:04:39] *** Quits: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu) (*.net *.split)
[10:04:39] *** Quits: bjb (~bjb@sourcerer.ca) (*.net *.split)
[10:04:39] *** Quits: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net) (*.net *.split)
[10:04:39] *** Quits: BigShip (~BigShip@user/bigship) (*.net *.split)
[10:04:39] *** Quits: poorboy (~poorboy@159.89.189.144) (*.net *.split)
[10:04:39] *** Quits: yitz (~yitz@exercism/yitz) (*.net *.split)
[10:04:39] *** Quits: moose` (~moose@user/moose) (*.net *.split)
[10:04:39] *** Quits: Trashlord (~trash@user/trashlord) (*.net *.split)
[10:04:39] *** Quits: Memory (sid459764@user/memory) (*.net *.split)
[10:04:39] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[10:04:39] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (*.net *.split)
[10:04:39] *** Quits: hodapp (~mawson@user/hodapp) (*.net *.split)
[10:04:39] *** Quits: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net) (*.net *.split)
[10:04:39] *** Quits: duoi (~duoi@user/duoi) (*.net *.split)
[10:04:39] *** Quits: shodan45 (~quassel@107.161.22.155) (*.net *.split)
[10:04:39] *** Quits: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu) (*.net *.split)
[10:04:39] *** Quits: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net) (*.net *.split)
[10:04:39] *** Quits: Vision (~Vision@024-178-231-173.res.spectrum.com) (*.net *.split)
[10:04:39] *** Quits: Dan39 (~dan@user/dan39) (*.net *.split)
[10:04:39] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[10:04:39] *** Quits: Duckle (~Duckle@user/duckle) (*.net *.split)
[10:04:39] *** Quits: infobob (~infobob@python/bot/infobob) (*.net *.split)
[10:04:39] *** Quits: oldguy (~oldguy@user/oldguy) (*.net *.split)
[10:04:39] *** Quits: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt) (*.net *.split)
[10:04:39] *** Quits: tkazi (~tkazi@user/tkazi) (*.net *.split)
[10:04:39] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (*.net *.split)
[10:04:39] *** Quits: kinabalu (~kinabalu@about/java/kinabalu) (*.net *.split)
[10:04:39] *** Quits: hendry (~hendry@210.23.22.2) (*.net *.split)
[10:04:39] *** Quits: lack (~lack@user/lack) (*.net *.split)
[10:04:39] *** Quits: zoid (~zoid@user/taxationistheft) (*.net *.split)
[10:04:39] *** Quits: sabet (~sabet@user/sabet) (*.net *.split)
[10:04:39] *** Quits: ikwyl6 (~ikwyl6@2.58.44.226) (*.net *.split)
[10:04:39] *** Quits: ulif (~nick@user/ulif) (*.net *.split)
[10:04:39] *** Quits: Anarchic (~Anarchic@getlegit.co.uk) (*.net *.split)
[10:04:39] *** Quits: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca) (*.net *.split)
[10:04:39] *** Quits: Cyp (~cyp@213.237.87.7) (*.net *.split)
[10:04:39] *** Quits: themill (~stuart@debian/stuart) (*.net *.split)
[10:04:39] *** Quits: salparadise (~salparadi@129.146.17.140) (*.net *.split)
[10:04:39] *** Quits: comrumino (~comrumino@li87-103.members.linode.com) (*.net *.split)
[10:04:39] *** Quits: dxrt (~dxrt@user/dxrt) (*.net *.split)
[10:04:39] *** Quits: rud01f (rud0lf@user/rud0lf) (*.net *.split)
[10:04:39] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[10:04:39] *** Quits: mdw (~root@159.65.86.163) (*.net *.split)
[10:04:39] *** Quits: streety_ (~streety@li761-24.members.linode.com) (*.net *.split)
[10:04:39] *** Quits: operational (~operation@imgonnaf.art) (*.net *.split)
[10:04:39] *** Quits: randall (~randall@user/randall) (*.net *.split)
[10:04:39] *** Quits: Koffa (jkohvakk@user/koffa) (*.net *.split)
[10:04:39] *** Quits: _0az3 (~az0@user/az0) (*.net *.split)
[10:04:39] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[10:04:39] *** Quits: sunyibo_ (~dorsch@5.2.75.229) (*.net *.split)
[10:04:39] *** Quits: \mSg (mSg@user/msg/x-0285936) (*.net *.split)
[10:04:39] *** Quits: willcl_ark (~quassel@user/willcl-ark/x-8282106) (*.net *.split)
[10:04:39] *** Quits: PocketKiller (PacKetIV@user/packetiv) (*.net *.split)
[10:04:39] *** Quits: d1b (~db@user/d1b) (*.net *.split)
[10:04:39] *** Quits: jug (~jug@user/jug) (*.net *.split)
[10:04:39] *** Quits: nvz (~user@nvz.farted.online) (*.net *.split)
[10:04:39] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[10:04:39] *** Quits: grnman_ (~grnman@159.89.27.73) (*.net *.split)
[10:04:39] *** Quits: dgw (dgw@sopel/admin/dgw) (*.net *.split)
[10:04:39] *** Quits: jamwil (~jamwil@user/jamwil) (*.net *.split)
[10:04:39] *** Quits: shan (shan@cyblog/maintainer/shan) (*.net *.split)
[10:04:39] *** Quits: phy1729 (~phy1729@zsh/wizard/phy1729) (*.net *.split)
[10:04:39] *** Quits: AM (~techman@82-203-161-159.bb.dnainternet.fi) (*.net *.split)
[10:04:39] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[10:04:39] *** Quits: d3x (michal@bielaw.ski) (*.net *.split)
[10:04:39] *** Quits: easter_egg (~jeffry@user/easter-egg/x-4406379) (*.net *.split)
[10:04:43] *** Joins: rendar (~rendar@user/rendar)
[10:06:34] *** Joins: jazzy (~jaziz@user/jaziz)
[10:06:50] *** Joins: af (~af@awalgarg.me)
[10:07:41] *** Quits: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421) (Ping timeout: 265 seconds)
[10:07:55] *** Joins: sudomann (~sudomann@73.183.118.9)
[10:10:56] *** Quits: cryocaustik (~cryocaust@user/cryocaustik) (Quit: The Lounge - https://thelounge.chat)
[10:11:56] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:12:17] *** Quits: cryocaustik7 (~cryocaust@user/cryocaustik) (Client Quit)
[10:12:56] *** Quits: af (~af@awalgarg.me) (Ping timeout: 246 seconds)
[10:13:15] *** Joins: cryocaustik7 (~cryocaust@user/cryocaustik)
[10:13:51] *** Joins: af (~af@awalgarg.me)
[10:15:00] *** Joins: jay-m126 (~jay-m@41.205.30.141)
[10:15:12] *** Joins: jay-m126_ (~jay-m@41.205.30.141)
[10:17:39] *** Joins: upsala (~zcb@185.213.155.232)
[10:19:25] *** Quits: af (~af@awalgarg.me) (Ping timeout: 265 seconds)
[10:19:56] *** Joins: chele (~chele@user/chele)
[10:20:57] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[10:21:12] *** Joins: pycurious (~Adium@user/pycurious)
[10:24:28] *** Joins: emf (~emf@2620:10d:c090:400::5:c24e)
[10:24:34] *** Quits: emf (~emf@2620:10d:c090:400::5:c24e) (Client Quit)
[10:24:39] *** Joins: Nspace (~Nspace@user/nspace)
[10:26:03] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[10:26:27] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[10:26:27] *** Joins: akaWolf (~akaWolf@akawolf.org)
[10:26:27] *** Joins: control (~v1@user/control)
[10:26:27] *** Joins: pwnd_sfw (~pwnd_sfw@ool-18b88100.dyn.optonline.net)
[10:26:27] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[10:26:27] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:26:27] *** Joins: c10l (~c10l@user/c10l)
[10:26:27] *** Joins: Wulf (~Wulf@user/wulf)
[10:26:27] *** Joins: bdeshi (~bdeshi@45.86.163.209)
[10:26:27] *** Joins: l4yer (~l4yer@159.48.55.9)
[10:26:27] *** Joins: simplicity (~yti@user/simplicity)
[10:26:27] *** Joins: suffer (znc@mutant.penguin.fyi)
[10:26:27] *** Joins: deetwelve (~deetwelve@user/deetwelve)
[10:26:27] *** Joins: iflema (~ian@user/iflema)
[10:26:27] *** Joins: driib (~driib@185.195.233.162)
[10:26:27] *** Joins: arinov (~arinov@213.194.126.155)
[10:26:27] *** Joins: dbristow (~dbristow@user/dbristow)
[10:26:27] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:26:27] *** Joins: acegallagher (~Ace@71-211-255-47.hlrn.qwest.net)
[10:26:27] *** Joins: ckdCreations (~ckdCreati@147.55.133.130)
[10:26:27] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[10:26:27] *** Joins: et (~et@user/et)
[10:26:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:26:27] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[10:26:27] *** Joins: solo (~solo@c-73-219-147-223.hsd1.ct.comcast.net)
[10:26:27] *** Joins: moto (~moto@user/moto)
[10:26:27] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[10:26:27] *** Joins: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com)
[10:26:27] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[10:26:27] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[10:26:27] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:26:27] *** Joins: salparadise (~salparadi@129.146.17.140)
[10:26:27] *** Joins: daevski (~daevski_@76-253-184-89.lightspeed.rlghnc.sbcglobal.net)
[10:26:27] *** Joins: dermato (~dermatobr@cpe-70-114-219-76.austin.res.rr.com)
[10:26:27] *** Joins: JanC (~janc@user/janc)
[10:26:27] *** Joins: Bardon (~Bardon@user/Bardon)
[10:26:27] *** Joins: cursey (~cursey@user/cursey)
[10:26:27] *** Joins: kaos02 (~kaos02@12.186.233.220.static.exetel.com.au)
[10:26:27] *** Joins: apteryx (~maxim@207.35.95.251)
[10:26:27] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[10:26:27] *** Joins: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net)
[10:26:27] *** Joins: wilz (~wilz@modemcable036.177-131-66.mc.videotron.ca)
[10:26:27] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[10:26:27] *** Joins: Milos (~Milos@user/milos)
[10:26:27] *** Joins: schumaml (~schumaml@dslb-092-074-000-199.092.074.pools.vodafone-ip.de)
[10:26:27] *** Joins: MrFixIt (~samurai_@c-73-75-104-200.hsd1.il.comcast.net)
[10:26:27] *** Joins: luna-is-here (~quassel@ip-95-223-59-100.hsi16.unitymediagroup.de)
[10:26:27] *** Joins: Kim^J (~hagbard@ec2-13-51-167-164.eu-north-1.compute.amazonaws.com)
[10:26:27] *** Joins: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com)
[10:26:27] *** Joins: dgdg (~dg_dg@191.101.31.44)
[10:26:27] *** Joins: pankid (~quassel@pankid.club)
[10:26:27] *** Joins: Yhg1s (sid387777@python/psf/thomas)
[10:26:27] *** Joins: sharpertool (sid80151@hampstead.irccloud.com)
[10:26:27] *** Joins: ihaveamac (~ihaveamac@ihaveahax.net)
[10:26:27] *** Joins: FurCoatStarlette (FurCoatSta@159.196.89.115)
[10:26:27] *** Joins: Forty-Bot (~kvirc@pool-108-45-127-224.washdc.fios.verizon.net)
[10:26:27] *** Joins: Harlin (~DonQixote@c-24-128-8-53.hsd1.co.comcast.net)
[10:26:27] *** Joins: SallyAhaj (~SallyAhaj@user/sallyahaj)
[10:26:27] *** Joins: KombuchaKip (~kip@192.252.230.5)
[10:26:27] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[10:26:27] *** Joins: c4017w_ (~c4017@209.52.68.8)
[10:26:27] *** Joins: renrelkha (~renrelkha@user/renrelkha)
[10:26:27] *** Joins: Allegretto (~allegrett@178-164-188-250.pool.digikabel.hu)
[10:26:27] *** Joins: bjb (~bjb@sourcerer.ca)
[10:26:27] *** Joins: waveclaw (~quassel@ip98-162-237-241.ok.ok.cox.net)
[10:26:27] *** Joins: BigShip (~BigShip@user/bigship)
[10:26:27] *** Joins: poorboy (~poorboy@159.89.189.144)
[10:26:27] *** Joins: yitz (~yitz@exercism/yitz)
[10:26:27] *** Joins: moose` (~moose@user/moose)
[10:26:27] *** Joins: \mSg (mSg@user/msg/x-0285936)
[10:26:27] *** Joins: Trashlord (~trash@user/trashlord)
[10:26:27] *** Joins: Memory (sid459764@user/memory)
[10:26:27] *** Joins: nisstyre (~wes@user/nisstyre)
[10:26:27] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[10:26:27] *** Joins: hodapp (~mawson@user/hodapp)
[10:26:27] *** Joins: dman777 (~dman777@76-253-74-225.lightspeed.austtx.sbcglobal.net)
[10:26:27] *** Joins: duoi (~duoi@user/duoi)
[10:26:27] *** Joins: shodan45 (~quassel@107.161.22.155)
[10:26:27] *** Joins: baltazar (~baltazar@84-236-12-244.pool.digikabel.hu)
[10:26:27] *** Joins: R0b0t1 (~R0b0t1@d-74-214-63-13.md.cpe.atlanticbb.net)
[10:26:27] *** Joins: Vision (~Vision@024-178-231-173.res.spectrum.com)
[10:26:27] *** Joins: Dan39 (~dan@user/dan39)
[10:26:27] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[10:26:27] *** Joins: Duckle (~Duckle@user/duckle)
[10:26:27] *** Joins: infobob (~infobob@python/bot/infobob)
[10:26:27] *** Joins: oldguy (~oldguy@user/oldguy)
[10:26:27] *** Joins: HelloShitty (~psysc0rpi@bl20-171-222.dsl.telepac.pt)
[10:26:27] *** Joins: ulif (~nick@user/ulif)
[10:26:27] *** Joins: tkazi (~tkazi@user/tkazi)
[10:26:27] *** Joins: ChkDigit (~u388mw@207-195-34-73.prna.static.sasknet.sk.ca)
[10:26:27] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[10:26:27] *** Joins: streety_ (~streety@li761-24.members.linode.com)
[10:26:27] *** Joins: kinabalu (~kinabalu@about/java/kinabalu)
[10:26:27] *** Joins: hendry (~hendry@210.23.22.2)
[10:26:27] *** Joins: zoid (~zoid@user/taxationistheft)
[10:26:27] *** Joins: lack (~lack@user/lack)
[10:26:27] *** Joins: sabet (~sabet@user/sabet)
[10:26:27] *** Joins: ikwyl6 (~ikwyl6@2.58.44.226)
[10:26:27] *** Joins: Anarchic (~Anarchic@getlegit.co.uk)
[10:26:27] *** Joins: Cyp (~cyp@213.237.87.7)
[10:26:27] *** Joins: themill (~stuart@debian/stuart)
[10:26:27] *** Joins: comrumino (~comrumino@li87-103.members.linode.com)
[10:26:27] *** Joins: dxrt (~dxrt@user/dxrt)
[10:26:27] *** Joins: rud01f (rud0lf@user/rud0lf)
[10:26:27] *** Joins: fluter (~fluter@user/fluter)
[10:26:27] *** Joins: mdw (~root@159.65.86.163)
[10:26:27] *** Joins: operational (~operation@imgonnaf.art)
[10:26:27] *** Joins: randall (~randall@user/randall)
[10:26:27] *** Joins: Koffa (jkohvakk@user/koffa)
[10:26:27] *** Joins: _0az3 (~az0@user/az0)
[10:26:27] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[10:26:27] *** Joins: sunyibo_ (~dorsch@5.2.75.229)
[10:26:27] *** Joins: willcl_ark (~quassel@user/willcl-ark/x-8282106)
[10:26:27] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[10:26:27] *** Joins: d1b (~db@user/d1b)
[10:26:27] *** Joins: jug (~jug@user/jug)
[10:26:27] *** Joins: nvz (~user@nvz.farted.online)
[10:26:27] *** Joins: rb (~augh@theguntretort.com)
[10:26:27] *** Joins: grnman_ (~grnman@159.89.27.73)
[10:26:27] *** Joins: dgw (dgw@sopel/admin/dgw)
[10:26:27] *** Joins: jamwil (~jamwil@user/jamwil)
[10:26:27] *** Joins: shan (shan@cyblog/maintainer/shan)
[10:26:27] *** Joins: phy1729 (~phy1729@zsh/wizard/phy1729)
[10:26:27] *** Joins: AM (~techman@82-203-161-159.bb.dnainternet.fi)
[10:26:27] *** Joins: mabi (~m42e@pb42.de)
[10:26:27] *** Joins: d3x (michal@bielaw.ski)
[10:26:27] *** Joins: easter_egg (~jeffry@user/easter-egg/x-4406379)
[10:26:51] *** Joins: pycurious (~Adium@user/pycurious)
[10:26:54] *** Joins: ice9 (~ice9@user/ice9)
[10:27:14] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[10:27:21] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Client Quit)
[10:27:26] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[10:28:45] *** Quits: JanC (~janc@user/janc) (Max SendQ exceeded)
[10:28:45] *** Quits: rb (~augh@theguntretort.com) (Max SendQ exceeded)
[10:28:45] *** Quits: Memory (sid459764@user/memory) (Max SendQ exceeded)
[10:28:45] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Max SendQ exceeded)
[10:28:45] *** Quits: Duckle (~Duckle@user/duckle) (Max SendQ exceeded)
[10:28:45] *** Quits: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com) (Max SendQ exceeded)
[10:28:45] *** Quits: l4yer (~l4yer@159.48.55.9) (Max SendQ exceeded)
[10:28:45] *** Quits: AsenMx (~AsenMx@78.90.248.234) (Max SendQ exceeded)
[10:28:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Max SendQ exceeded)
[10:28:51] *** Quits: cursey (~cursey@user/cursey) (Max SendQ exceeded)
[10:29:06] <lpapp> what is thsi flood
[10:29:07] *** Joins: Duckle (~Duckle@user/duckle)
[10:29:09] *** Joins: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com)
[10:29:09] *** Joins: l4yer (~l4yer@159.48.55.9)
[10:29:16] <Wulf> lpapp: we had a netsplit. Don't worry.
[10:29:16] *** Joins: rwb (~augh@theguntretort.com)
[10:29:16] *** Joins: JanC (~janc@user/janc)
[10:29:18] *** Joins: Memory (sid459764@user/memory)
[10:29:25] *** Joins: cursey (~cursey@user/cursey)
[10:29:26] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[10:29:30] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[10:29:36] *** Joins: AsenMx (~AsenMx@78.90.248.234)
[10:29:57] <lpapp> I tried running it through lldb
[10:30:09] <lpapp> but I do not seem to be able to get a backtrace easily for the crash
[10:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[10:30:37] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[10:30:37] <lpapp> https://bpa.st/O6AQ
[10:30:38] <Wulf> lpapp: perhaps you can use valgrind
[10:30:46] <lpapp> not on this OS.
[10:30:51] <Wulf> why not?
[10:31:05] *** Joins: djhankb (~djhankb@208.113.164.68)
[10:31:07] <lpapp> Because it only reallys works well for Linux
[10:31:11] <lpapp> really*
[10:31:23] <lpapp> also, for the crash, backtrace would be more helpful than valgrind
[10:31:38] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 260 seconds)
[10:31:49] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[10:31:52] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[10:31:59] <Wulf> oh, looks like valgrind complains a lot about cpython :(
[10:32:30] <Wulf> python3.9, but python3.10 seems to be clean
[10:32:50] <lpapp> we are on 3.7
[10:32:55] <lpapp> by design
[10:33:25] <Wulf> lpapp: if valgrind works better on linux, perhaps you can debug there
[10:34:24] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[10:35:00] *** Joins: sudomann_ (~sudomann@73.183.118.9)
[10:35:33] <lpapp> No, I do not have access to Linux.
[10:35:51] * aphysically just tried the new pip editable installs with flit
[10:35:53] <aphysically> works :D
[10:35:56] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 245 seconds)
[10:35:59] <lpapp> for a crash, the first point is the backtrace, not valgrind even on Linux, anyhow.
[10:36:22] <lpapp> but I could try if backtrace does not help.
[10:37:05] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 246 seconds)
[10:37:05] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[10:38:29] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:38:31] *** Joins: HaMmY1 (~Thunderbi@14-0-231-085.static.pccw-hkt.com)
[10:38:32] *** Quits: HaMmY1 (~Thunderbi@14-0-231-085.static.pccw-hkt.com) (Client Quit)
[10:39:34] *** Quits: sudomann_ (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[10:40:00] *** Joins: sudomann (~sudomann@73.183.118.9)
[10:40:02] *** Quits: HaMsTeRs (~Thunderbi@182.153.46.17) (Ping timeout: 260 seconds)
[10:40:16] *** Joins: akaWolf (~akaWolf@akawolf.org)
[10:40:28] <Wulf> lpapp: I disagree. Valgrind may well detect a memory error which later causes a crash in totally unrelated code.
[10:40:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[10:43:31] *** Quits: comet23 (~comet23@user/comet23) (Quit: Client closed)
[10:44:50] <lpapp> Wulf you can disagree as much as you like
[10:46:20] *** Quits: ice9 (~ice9@user/ice9) (Remote host closed the connection)
[10:51:43] *** Joins: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1)
[10:52:36] *** Quits: c4017 (~c4017@2604:3d08:747f:7c90:242f:9527:3c56:c500) (Ping timeout: 245 seconds)
[10:52:42] *** Joins: af (~af@awalgarg.me)
[10:55:42] *** Joins: ubert (~Thunderbi@91.141.52.193.wireless.dyn.drei.com)
[10:56:59] *** Joins: p-i-_ (~Ohmu@223.206.71.4)
[10:57:06] <DPA> It can't hurt to run it. I regularly check asan and valgrind. Even if it doesn't show the same error, it's good to know about them. All errors need to be fixed.
[10:57:06] *** Quits: resmo (~resmo@135-58-239-77.dyn.cable.fcom.ch) (Read error: Connection reset by peer)
[10:57:19] *** Joins: resmo (~resmo@2a00:d420:9:8a00:769f:2f97:5dbd:af27)
[10:58:01] *** Quits: dld (~davidlowr@2601:197:600:1210:2184:de22:ee5e:5a79) (Ping timeout: 245 seconds)
[10:58:07] *** Quits: af (~af@awalgarg.me) (Ping timeout: 252 seconds)
[10:58:13] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[10:58:39] *** Joins: mrwick (~mrwick@user/mrwick)
[10:59:24] *** Joins: Thanattt (~Thanatos@105.112.41.209)
[11:00:03] *** Joins: dld (~davidlowr@73.61.8.20)
[11:00:09] *** Joins: pycurious (~Adium@user/pycurious)
[11:00:19] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 252 seconds)
[11:00:23] *** Quits: newpy (~newpy@2601:280:4381:1390:3c15:3b7a:27c7:466) (Quit: Leaving)
[11:02:13] <DPA> Oh my, MacOS and dynamic library stuff? valgrind may indeed not help all that much there indeed. Good luck.
[11:02:27] <lpapp> I fixed the crash.
[11:02:31] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Ping timeout: 252 seconds)
[11:02:35] <lpapp> backtrace pointed out the issue
[11:04:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[11:04:56] *** Joins: af (~af@awalgarg.me)
[11:05:06] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 268 seconds)
[11:05:13] *** Quits: seednode (~seednode@user/seednode) (Quit: Nihil supernum.)
[11:05:31] <Wulf> lpapp: Great! Where/what was the problem?
[11:05:42] *** Joins: seednode (~seednode@user/seednode)
[11:06:47] *** Joins: fikran (~fikran@user/fikran)
[11:06:58] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[11:08:15] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[11:08:36] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:10:26] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[11:11:04] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) (Remote host closed the connection)
[11:11:28] <lpapp> some nullptr dereferenced in my code somewhere.
[11:11:32] <lpapp> thanks.
[11:11:33] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[11:11:58] *** Quits: bukata (~lev@user/bukata) (Ping timeout: 265 seconds)
[11:12:06] *** Joins: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net)
[11:13:09] *** Quits: Abrax (~Abrax@user/abrax) (Remote host closed the connection)
[11:13:28] *** Joins: castle_dweller (~oscarcp@213.144.157.17)
[11:13:35] *** Quits: yaalon (~yaalon@75-35-90-51.lightspeed.snantx.sbcglobal.net) (Remote host closed the connection)
[11:13:44] *** Joins: Abrax (~Abrax@user/abrax)
[11:13:50] *** Joins: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83)
[11:14:01] *** beaky_ is now known as beaky
[11:14:07] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[11:15:01] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[11:15:46] *** Quits: bandit_za (~bandit@185.195.232.173) (Ping timeout: 252 seconds)
[11:17:17] *** Quits: Abrax (~Abrax@user/abrax) (Client Quit)
[11:19:41] *** Quits: yaalon (~yaalon@2600:1700:9450:2d30:9c88:6197:deee:4f83) ()
[11:20:20] *** Joins: resmo_ (~resmo@135-58-239-77.dyn.cable.fcom.ch)
[11:21:31] *** Joins: cth (~Cthulchu@193.194.107.250)
[11:22:07] *** Quits: jaymz (~jaymz@c-68-46-171-130.hsd1.mi.comcast.net) (Ping timeout: 265 seconds)
[11:22:36] *** Quits: resmo (~resmo@2a00:d420:9:8a00:769f:2f97:5dbd:af27) (Ping timeout: 245 seconds)
[11:22:49] *** Joins: gitesh (uid423739@id-423739.ilkley.irccloud.com)
[11:23:00] *** Joins: pspiagicw (~user@123.136.197.145)
[11:26:11] *** Joins: fweht (uid404746@id-404746.lymington.irccloud.com)
[11:26:25] *** Joins: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de)
[11:26:58] *** Joins: brickfat (~brickfat@user/brickfat)
[11:27:13] *** Joins: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4)
[11:27:16] *** Quits: af (~af@awalgarg.me) (Ping timeout: 252 seconds)
[11:27:25] *** Joins: HaMsTeRs (~Thunderbi@14-0-231-085.static.pccw-hkt.com)
[11:27:32] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[11:27:35] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:29:10] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:29:12] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:9ce7:54d4:819e:ca23) (Quit: Textual IRC Client: www.textualapp.com)
[11:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[11:31:04] *** Joins: djhankb (~djhankb@208.113.164.68)
[11:32:07] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[11:32:48] *** Quits: upsala (~zcb@185.213.155.232) (Quit: WeeChat 3.3)
[11:34:40] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::2612)
[11:34:50] *** Joins: pycurious (~Adium@user/pycurious)
[11:36:05] *** Quits: clonebaby (~persephon@modemcable052.109-176-173.mc.videotron.ca) (Ping timeout: 264 seconds)
[11:37:03] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:38:15] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:39:31] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[11:40:04] *** Joins: af (~af@awalgarg.me)
[11:40:06] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[11:40:13] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[11:40:14] *** rwb is now known as rb
[11:40:29] *** Joins: semeion (~semeion@user/semeion)
[11:41:07] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[11:41:18] *** Joins: bandit_za (~bandit@185.195.232.173)
[11:42:10] *** Joins: reset (~reset@user/reset)
[11:43:33] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Quit: WeeChat 2.8)
[11:45:05] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[11:45:36] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.3)
[11:47:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:48:23] <madduck> How does yield actually work internally? Say I have a loop "for i in range(1): print(i); yield i;" — this will print 10 lines, and return a generator. I would have expected the lines to be printed only when the generator is actually used/iterated.
[11:48:39] <madduck> like a co-routine of sorts
[11:48:46] <madduck> but apparently this is not how it's implemented.
[11:48:50] *** Joins: Abrax (~Abrax@user/abrax)
[11:49:00] *** Quits: Abrax (~Abrax@user/abrax) (Remote host closed the connection)
[11:49:11] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[11:49:16] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 252 seconds)
[11:49:27] *** Joins: Abrax (~Abrax@user/abrax)
[11:49:57] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[11:50:38] <KirkMcDonald> madduck: It doesn't yield until there's a yield.
[11:50:59] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[11:51:27] <energizer> madduck: that's not what happens
[11:51:44] <madduck> okay wait, I found the problem I was having.
[11:51:49] <madduck> records.append(player[col] for col in colnames)
[11:51:55] <madduck> in a loop
[11:51:58] <madduck> this is bad.
[11:52:03] <madduck> records.append([player[col] for col in colnames])
[11:52:04] <energizer> i mean
[11:52:10] <energizer> " Say I have a loop "for i in range(1): print(i); yield i;" — this will print 10 lines, and return a generator." no it wont, try it
[11:52:21] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[11:52:23] <KirkMcDonald> Oh, and that's true, it doesn't actually execute until iterated.
[11:52:23] <madduck> yeah, i was confused.
[11:52:34] *** Quits: dld (~davidlowr@73.61.8.20) (Ping timeout: 252 seconds)
[11:52:36] *** Quits: Thanattt (~Thanatos@105.112.41.209) (Quit: Leaving)
[11:54:23] *** Joins: dld (~davidlowr@2601:197:600:1210:750d:ae1c:e5be:6956)
[11:55:08] *** Quits: bandit_za (~bandit@185.195.232.173) (Remote host closed the connection)
[11:56:23] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:5527:ccff:5ea:c03d) (Read error: Connection reset by peer)
[11:57:14] *** Joins: VaniaPy (~VaniaPy@adsl-138.176.58.194.tellas.gr)
[11:57:53] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 265 seconds)
[12:00:27] *** dcaro_away is now known as dcaro
[12:01:27] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 250 seconds)
[12:03:20] *** Joins: plastico (~plastico@neomutt/plastico)
[12:04:03] *** Joins: ioxzev1z (~ioxzev1z@user/ioxzev1z)
[12:05:32] *** Joins: Kharon (uid511277@user/cypris)
[12:05:47] *** Joins: mat001 (~mat001@213.143.69.121)
[12:06:08] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Client Quit)
[12:08:08] *** Joins: alzgh (~alzgh@user/alzgh)
[12:09:27] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Ping timeout: 276 seconds)
[12:09:54] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[12:11:19] *** Quits: pspiagicw (~user@123.136.197.145) (Ping timeout: 252 seconds)
[12:13:01] *** Quits: gitly (~gitly@85.255.237.129) (Ping timeout: 245 seconds)
[12:14:15] *** Joins: shad (~shad@user/shad)
[12:14:18] *** Quits: grys (~quassel@botters/gry) (Ping timeout: 260 seconds)
[12:14:42] *** Joins: sudomann (~sudomann@73.183.118.9)
[12:14:56] *** Quits: gry (~quassel@botters/gry) (Ping timeout: 265 seconds)
[12:15:11] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:15:12] *** Joins: gitly (~gitly@85.255.234.91)
[12:17:36] *** Joins: drogas (~drogas@jump2.jet.uk)
[12:19:01] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:19:09] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[12:20:28] *** Quits: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net) (Quit: bibi!)
[12:20:50] *** Joins: fengshaun (~fengshaun@S010680615f0c2c0a.cg.shawcable.net)
[12:21:39] *** Joins: pycurious (~Adium@user/pycurious)
[12:22:18] *** Joins: thiras (~thiras@user/thiras)
[12:25:09] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[12:26:10] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[12:28:55] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Read error: Connection reset by peer)
[12:29:08] *** Joins: mozgalom_ (~mozgalom@ipnet-gw.157.157.97.111.simnet.is)
[12:31:06] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[12:31:26] *** Joins: grys (~quassel@botters/gry)
[12:31:26] *** Joins: gry (~quassel@botters/gry)
[12:31:36] *** Joins: djhankb (~djhankb@208.113.164.68)
[12:32:18] *** Joins: sudomann (~sudomann@73.183.118.9)
[12:33:17] *** Quits: dld (~davidlowr@2601:197:600:1210:750d:ae1c:e5be:6956) (Ping timeout: 268 seconds)
[12:36:34] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 252 seconds)
[12:37:58] *** Quits: j00n (~mario@user/j00n) (Remote host closed the connection)
[12:38:25] *** Quits: mozgalom_ (~mozgalom@ipnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[12:40:22] *** Joins: dld (~davidlowr@73.61.8.17)
[12:40:34] *** Joins: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net)
[12:42:46] *** Joins: jamer05 (~u0_a369@user/jamer05)
[12:43:50] *** Joins: mrwick (~mrwick@user/mrwick)
[12:44:12] *** Joins: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is)
[12:44:34] <madduck> With argparse, how do I express "--foo-type option only makes sense if --foo is also given" ?
[12:44:47] <madduck> I looked into subparsers, but that is a different concept.
[12:45:09] *** Joins: talismanick (~talismani@76.78.246.103)
[12:45:55] *** Quits: arinov (~arinov@213.194.126.155) (Quit: WeeChat 3.1)
[12:48:27] *** Joins: Klinda (~superleag@user/klinda)
[12:48:36] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[12:48:37] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[12:48:43] *** Joins: hendursaga (~weechat@user/hendursaga)
[12:49:07] *** Joins: dambuster (~dambuster@185.193.170.225)
[12:49:59] *** Quits: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[12:50:05] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[12:50:36] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[12:51:00] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[12:51:18] *** Quits: control (~v1@user/control) (Quit: leaving)
[12:51:30] *** Joins: nyah (~nyah@bcdcb6e3.skybroadband.com)
[12:51:58] *** Joins: arinov (~arinov@213.194.126.155)
[12:52:14] *** Joins: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de)
[12:52:18] *** Joins: adder (~adder@user/adder)
[12:52:45] *** Joins: Hash (~weechat@thestonedapes.com)
[12:54:00] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[12:54:31] <adder> Should I report this bug to asyncclick or click-option-group? https://bpa.st/WH4Q
[12:55:00] <adder> The code in the paste gives the traceback in the paste. However, if I use regular click instead of asyncclick, it works fine.
[12:56:27] <niluje> madduck: args = parser.parse_args() ; if args.foo_type and not args.foo: parser.error() ?
[12:57:19] *** Parts: Dev0n (~Dev0n@user/dev0n) (Textual IRC Client: www.textualapp.com)
[12:57:20] *** Joins: Dev0n (~Dev0n@user/dev0n)
[12:58:22] <raxor2k> somebody have suggestions how can i change that function to read list with dicts? before it was used to read dataframes from CSV: https://bpa.st/IHLQ
[13:00:27] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:01:20] *** Joins: pycurious (~Adium@user/pycurious)
[13:03:15] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:05:32] <madduck> niluje: yeah sure, I can do that, and I guess I can use argument groups to make it clear that certain arguments only apply in certain contexts.
[13:05:51] *** Quits: p-i-_ (~Ohmu@223.206.71.4) (Read error: Connection reset by peer)
[13:05:58] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:06:26] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[13:07:58] *** Quits: jamer05 (~u0_a369@user/jamer05) (Ping timeout: 252 seconds)
[13:08:20] *** Quits: Balzy (~Balzy@host-79-21-15-58.retail.telecomitalia.it) (Ping timeout: 260 seconds)
[13:09:09] *** Joins: Balzy (~Balzy@host-87-4-212-91.retail.telecomitalia.it)
[13:11:53] *** Joins: upsala (~zcb@185.213.155.232)
[13:12:56] *** Joins: nips_ (~nips@23.108.92.212)
[13:13:26] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Ping timeout: 245 seconds)
[13:13:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:15:51] *** Joins: bitplane (~bitplane@2a00:23a8:826:a800:bc7b:eb40:e4a1:853f)
[13:15:54] *** bitplane is now known as davidsong
[13:15:54] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[13:15:58] <nedbat> adder: I'd report it to asyncclick
[13:16:08] *** Joins: fikran (~fikran@user/fikran)
[13:16:10] *** Quits: upsala (~zcb@185.213.155.232) (Ping timeout: 252 seconds)
[13:16:19] *** Joins: holgersson (~quassel@user/holgersson)
[13:16:40] *** Joins: iomari891 (~iomari891@105.112.138.38)
[13:17:31] *** Joins: legola (~legola@46.235.97.9)
[13:18:06] *** Joins: upsala (~zcb@185.213.155.160)
[13:18:41] *** Joins: sudomann (~sudomann@73.183.118.9)
[13:20:03] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 265 seconds)
[13:22:16] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[13:23:22] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[13:24:16] *** Joins: jetchisel (~jetchisel@user/jetchisel)
[13:24:44] <Klinda> how can I see how is implemented a np function? (the code)
[13:25:03] *** Quits: holgersson (~quassel@user/holgersson) (Quit: “Format C:........[Done]“)
[13:25:34] *** Quits: castle_dweller (~oscarcp@213.144.157.17) (Quit: *falls down a pit*)
[13:26:03] <jinsun_> np = numpy?
[13:26:46] *** Quits: Nact (~l@2a02:2788:11c4:6e6:da42:e753:215e:64e) (Quit: Konversation terminated!)
[13:26:50] *** Joins: Proxysna (~Proxysna@62.119.254.142)
[13:27:35] *** Joins: castle_dweller (~oscarcp@213.144.157.17)
[13:27:45] *** Joins: c4017w__ (~c4017@209.52.68.8)
[13:27:57] <adder> nedbat, thanks.
[13:27:58] *** Quits: adder (~adder@user/adder) (Quit: Leaving)
[13:28:19] *** Joins: moose`` (~moose@user/moose)
[13:28:37] <Klinda> yes jinsun_ I want to see how is implemented
[13:28:54] <Klinda> specifically the histogram function
[13:29:22] *** Quits: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net) (Ping timeout: 252 seconds)
[13:29:45] *** Joins: berong91 (~noob4ever@d75-154-235-153.bchsia.telus.net)
[13:29:50] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Remote host closed the connection)
[13:29:55] *** Quits: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 252 seconds)
[13:29:57] <sveinse> Klinda: it might not be so easy, as it uses inner code in C for many things
[13:30:03] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[13:30:03] <jinsun_> numpy docs have a link to the source code usually
[13:30:14] *** Joins: Derailed (~tom@ec2-13-211-184-100.ap-southeast-2.compute.amazonaws.com)
[13:30:17] <jinsun_> https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
[13:30:37] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[13:30:42] <jinsun_> click on [source] there
[13:31:01] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[13:31:08] *** Joins: djhankb (~djhankb@208.113.164.68)
[13:31:34] *** Quits: moose` (~moose@user/moose) (Ping timeout: 252 seconds)
[13:32:08] <Klinda> yes I understand, but I don't understand the code
[13:32:11] <Klinda> thanks anyway ahah
[13:32:13] *** Quits: dfoolz (~dfoolz@static.114.137.9.176.clients.your-server.de) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[13:32:39] *** Joins: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk)
[13:33:33] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[13:34:12] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 265 seconds)
[13:34:43] <jinsun> well "how to understand the code" is a much different and much difficult question than "how to see how is it implemented"
[13:35:01] *** Joins: lucidreamachine (~brian@2600:1700:1c60:16c0:4f3b:1c3a:9c44:d067)
[13:35:17] <sveinse> heh, funny to observe that even within the numpy library code, numpy is imported as np
[13:35:21] <Klinda> I just wanna do it from scratch, cause in my implementation I have different hist and bins
[13:35:55] *** Joins: sudomann (~sudomann@73.183.118.9)
[13:37:28] *** Quits: HaMsTeRs (~Thunderbi@14-0-231-085.static.pccw-hkt.com) (Quit: HaMsTeRs)
[13:39:22] *** Quits: molt (~molt@178-222-245-206.static.isp.telekom.rs) (Quit: Leaving)
[13:40:55] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[13:46:17] *** Quits: ckdCreations (~ckdCreati@147.55.133.130) (Read error: Connection reset by peer)
[13:46:35] *** Joins: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net)
[13:49:46] *** Joins: pycurious (~Adium@user/pycurious)
[13:50:57] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:51:40] *** Joins: strk (~strk@user/strk)
[13:51:49] <strk> I've a class TestPyQgsPostgresProvider(unittest.TestCase, ProviderTestCase):
[13:52:08] <strk> the @classmethod def setUpClass(cls): does a ` cls.assertFalse(True)`
[13:52:23] <strk> which results in: TypeError: assertFalse() missing 1 required positional argument: 'expr'
[13:52:32] <strk> why aren't positional parameters working there ?
[13:53:03] <strk> if I change that to `cls.assertFalse(expr = True)` I get TypeError: assertFalse() missing 1 required positional argument: 'self'
[13:53:10] <strk> what am I missing ?
[13:53:30] *** Joins: mrwick (~mrwick@user/mrwick)
[13:53:31] <petaflot> strk: hmm... reminds me of somethig very similar some weeks ago. almost drove me uts
[13:53:50] <KirkMcDonald> strk: assertFalse is an instance method.
[13:54:07] <KirkMcDonald> strk: You require an instance of the class in order to call it.
[13:54:16] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 245 seconds)
[13:54:23] <strk> and at setUpClass the instance is not created yet ?O
[13:54:28] <petaflot> oh yeas that was it :-)
[13:54:41] <KirkMcDonald> It's a @classmethod. So you're given the class, not an instance.
[13:54:48] <strk> oh
[13:55:18] <strk> is there a Unittest instance method which is called before any other test runs ?
[13:55:25] <petaflot> strk: you really to instantiate your class ; is my_class = MyClass(params_for_init)
[13:55:55] <KirkMcDonald> strk: There is the `setUp` method.
[13:55:57] <petaflot> strk then: cls.assertFalse(True)
[13:56:29] <petaflot> strk: if you just do : `cls = MyClass`you have no instantiation
[13:56:35] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 246 seconds)
[13:56:43] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[13:57:01] <strk> KirkMcDonald: is the `setUp` method going to be called only ONCE even if the test calss has multiple test_this and test_that ?
[13:57:45] * petaflot suspects there are some grey areas around class instantiation... recently I've had to instantiate the same class family 3 times over to finally have a usable result
[13:58:04] *** Joins: somlis (~somlis@user/somlis)
[13:58:06] <strk> or I could try the solution suggested by petaflot and instanciate yet another instance just for doing the pre-condition checks
[13:59:15] <strk> nope, `setUp` is called for each and every test
[13:59:41] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[13:59:56] <nedbat> strk: can you tell us more about the problem you are solving?
[13:59:58] *** Quits: chenqisu12 (~xirndc@183.217.201.186) (Quit: Leaving)
[14:00:02] <strk> at the moment the setUpClass classmethod is using just `assert` to check some preconditions, but that's not very friendly in that it isn't clear where the problem is, when the assert fails (it's not playing nicely with Unittest framework)
[14:00:15] *** Quits: onu (~onufn@gibbs.uberspace.de) (Ping timeout: 260 seconds)
[14:00:17] <strk> nedbat: the problem I'm trying to solve is understanding what's going wrong when the tests fail :)
[14:00:32] <strk> I *think* there's some precondition not being met
[14:00:39] <strk> a precondition to *all* tests
[14:00:48] <strk> so I'd like to have a method which checks the preconditions
[14:01:14] <strk> and have such method *always* run and only ONCE, before at least ONE of the tests in the Unittest subclass is run
[14:01:30] <strk> python myTest.py MyTestClass
[14:01:40] <strk> python myTest.py MyTestClass.test1 MyTestClass.test3 MyTestClass.test3
[14:01:55] <strk> in both calls above, I'd like that precondition check to be run just once
[14:02:04] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[14:03:40] *** Quits: davidsong (~bitplane@2a00:23a8:826:a800:bc7b:eb40:e4a1:853f) (Ping timeout: 256 seconds)
[14:05:27] <nedbat> strk: there's setUpClass and setUpModule I think, not sure if there's a setUpSession thing.  In any case, I think those failures will always be associated with a test.
[14:07:27] *** Joins: mat001_ (~mat001@213.143.69.121)
[14:07:58] *** dcaro is now known as dcaro_lunch
[14:08:58] *** Quits: mat001 (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[14:09:10] *** Joins: onu (~onufn@gibbs.uberspace.de)
[14:11:04] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:12:44] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[14:14:38] <Dev0n> to get they hostname that won't change during the runtime of the application, am I better off using platform.node() instead of socket.gethostname()?
[14:14:43] <Dev0n> afika, platform.node is cached?
[14:17:16] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[14:17:45] *** Quits: Proxysna (~Proxysna@62.119.254.142) (Remote host closed the connection)
[14:18:47] *** Joins: mat001 (~mat001@213.143.69.121)
[14:18:55] *** Quits: mat001_ (~mat001@213.143.69.121) (Ping timeout: 252 seconds)
[14:19:36] <Swayze> "I've looked at the source code for platform.node and it calls os.uname. If it fails, it calls _node which will then call socket.gethostname()."
[14:19:45] <Swayze> thats what they said on the internet 'bout that
[14:20:01] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[14:21:32] <nedbat> strk: btw, pytest has more features for this kind of thing, and can run your unittest test cases
[14:21:45] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[14:21:52] <Dev0n> Swayze, ahh ok, thanks
[14:23:36] <strk> nedbat: I don't want to change too many things, I'm not writing the test from scratch, just adapting it to my needs
[14:23:52] <strk> is petaflot suggestion of instanciating the class in setUpClass a possibly viable solution ?
[14:24:19] <strk> I could instanciate the class and invoke the assertTrue there, maybe ?
[14:24:22] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[14:25:20] *** Joins: raxor2k (~raxor2k@78.158.228.45)
[14:25:21] <jinsun> why do you have to assertTrue inside setup? do it in one of the tests
[14:27:03] *** Joins: SlaveGeek334269 (~SlaveGeek@179.61.228.142)
[14:28:16] <strk> because I often run a single test
[14:28:25] <strk> and want to make sure the preconditions are met
[14:28:39] *** Joins: sudomann (~sudomann@73.183.118.9)
[14:28:44] <strk> would need to invoke a method in each and every test, and make the test check if it did already run the precondition check
[14:28:47] <strk> a lot of code :)
[14:29:19] <rakoon> How can i get logs from a flask app when i run integration tests (making real request to the app)?
[14:30:11] <strk> the instanciation solution seems to work, thanks petaflot for the hint
[14:30:36] *** Joins: pycurious (~Adium@user/pycurious)
[14:30:39] *** Joins: somlis (~somlis@user/somlis)
[14:30:45] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:30:46] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[14:31:04] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[14:31:19] *** Joins: djhankb (~djhankb@208.113.164.68)
[14:32:22] *** Joins: BSaboia (~bsaboia@187.36.77.91)
[14:32:27] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:32:45] *** Quits: nips_ (~nips@23.108.92.212) (Read error: Connection reset by peer)
[14:32:59] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 246 seconds)
[14:33:06] *** Quits: BSaboia (~bsaboia@187.36.77.91) (Client Quit)
[14:34:16] *** Quits: shad (~shad@user/shad) (Ping timeout: 245 seconds)
[14:34:21] *** Joins: nips_ (~nips@abv84.internetdsl.tpnet.pl)
[14:34:49] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[14:34:54] *** Joins: cth (~Cthulchu@193.194.107.250)
[14:34:55] <nedbat> strk: fwiw, i wouldn't try to instantiate a TestCase myself.
[14:35:58] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 252 seconds)
[14:38:01] <strk> nedbat: what would you do instead ?
[14:38:18] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:38:26] <strk> the current code just uses `assert` in setUpClass, but `assert` won't let me print a human-readable message
[14:38:29] <jinsun> simply assert in setUpClass and using pytest might work? (not sure if pytest will do the assert rewrites here though)
[14:38:36] <nedbat> strk: iiuc, this is so that the failures from the pre-condition are reported more clearly; or it's to ensure the preconditions are checked at all?
[14:38:58] <nedbat> strk: did you try adding a message on the assert:   assert x == 1, "X should have been 1!"
[14:39:57] <strk> uhm, that seems to work, yes
[14:40:27] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:40:44] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[14:41:09] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[14:41:37] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:41:38] *** Parts: SlaveGeek334269 (~SlaveGeek@179.61.228.142) (Leaving...)
[14:42:01] *** Quits: lethu (~lethu@user/lethu) (Ping timeout: 252 seconds)
[14:42:12] *** Joins: brelod (~me@90.244.150.142)
[14:43:57] <strk> ok, next
[14:44:00] *** Joins: lethu (~lethu@user/lethu)
[14:44:09] *** Quits: elias117 (~elias117@user/elias117) (Ping timeout: 265 seconds)
[14:44:09] <strk> my test class TestPyQgsPostgresProvider(unittest.TestCase, ProviderTestCase)
[14:44:29] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 264 seconds)
[14:44:34] <strk> the ProviderTestCase is class ProviderTestCase(FeatureSourceTestCase):
[14:44:45] <strk> I'd like to run a test which is defined in the FeatureSourceTestCase class
[14:45:26] <strk> python testPyQgsPostgresProvider.py FeatureSourceTestCase.testGetFeaturesDistanceWithinTests # fails with: AttributeError: module '__main__' has no attribute 'FeatureSourceTestCase'
[14:45:39] <strk> how can I run that "inherited" test method ?
[14:46:12] <strk> should I proxy the method in the subclass ? is that the only way ?
[14:46:49] *** Joins: SlaveGeek334269 (~SlaveGeek@179.61.228.72)
[14:47:56] *** Joins: Klinda (~superleag@user/klinda)
[14:48:55] *** Joins: pycurious (~Adium@user/pycurious)
[14:49:09] <nedbat> strk: the test runs when you run the whole suite, yes?
[14:49:58] <nedbat> strk: I would use "python -m unittest" to run the tests. it has a -k option.
[14:50:57] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:52:31] <mgedmin> you probably want setUp/tearDown/other overridden methods from TestPyQgsPostgresProvider, so you should ask unittest to run TestPyQgsPostgresProvider.testGetFeaturesDistanceWithinTests
[14:52:56] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 246 seconds)
[14:53:14] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[14:53:32] *** Joins: xcm (~xcm@user/xcm)
[14:55:54] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[14:56:17] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:57:13] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[14:59:46] <strk> nedbat: yes, they run when I run the whole suite
[15:00:03] *** Quits: jetchisel (~jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[15:01:05] <strk> uhm, TestPyQgsPostgresProvider.testGetFeaturesDistanceWithinTests indeed works
[15:01:25] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:01:44] *** Joins: curiosity (uid507362@user/cypris)
[15:03:23] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[15:03:47] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[15:04:20] <curiosity> Is there any open source projects on drone automation?
[15:04:44] <curiosity> I mean I imagine there is but does anyone have any links handy would be amazing
[15:06:10] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[15:10:37] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 252 seconds)
[15:10:53] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[15:11:24] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[15:12:01] *** Joins: zerox2a (~zerox2a@2a01:c23:8103:f400:8931:2ee5:fc73:1471)
[15:12:04] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[15:13:19] *** Joins: j00n (~mario@user/j00n)
[15:13:53] *** Quits: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de) (Ping timeout: 264 seconds)
[15:15:27] *** Joins: shad (~shad@user/shad)
[15:16:37] *** Quits: cth (~Cthulchu@193.194.107.250) (Ping timeout: 252 seconds)
[15:17:14] *** Joins: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[15:18:13] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[15:19:11] *** Quits: Leliana (is@2a02:2658:1133:0:dead:babe:0:1) (Quit: brb, sex)
[15:19:20] *** Joins: Barones (~Barones@189.40.79.35)
[15:19:34] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:21:14] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Ping timeout: 268 seconds)
[15:21:17] *** Joins: Pandadub (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b)
[15:23:00] *** Joins: pycurious (~Adium@user/pycurious)
[15:23:05] *** Quits: Pandadub (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b) (Remote host closed the connection)
[15:23:23] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 246 seconds)
[15:23:49] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[15:23:49] *** Quits: Barones (~Barones@189.40.79.35) (Ping timeout: 250 seconds)
[15:25:21] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.3)
[15:25:29] *** Joins: fikran (~fikran@user/fikran)
[15:27:37] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 252 seconds)
[15:27:50] *** Joins: somlis (~somlis@user/somlis)
[15:29:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:29:15] *** Joins: darksun (~darksun@user/darksun)
[15:29:24] *** Joins: Atque (~Atque@user/atque)
[15:29:49] *** Joins: varaindemian (uid73404@id-73404.ilkley.irccloud.com)
[15:31:14] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[15:31:48] *** Joins: djhankb (~djhankb@208.113.164.68)
[15:31:59] *** Joins: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de)
[15:34:16] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[15:34:19] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[15:35:19] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:54] *** Joins: jetchisel (jetchisel@user/jetchisel)
[15:38:41] *** Quits: Quaack (~Quack@185.21.216.169) (Remote host closed the connection)
[15:38:50] *** Joins: Quack (~Quack@185.21.216.169)
[15:39:43] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[15:39:52] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Ping timeout: 265 seconds)
[15:40:15] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[15:41:30] *** Joins: Leliana (is@the.one.and.only.revthefox.co.uk)
[15:41:54] *** Joins: oakridge (~oakridge@user/oakridge)
[15:42:29] *** Joins: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b)
[15:46:21] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:7e59:ba99:e211:660d) (Ping timeout: 245 seconds)
[15:47:22] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:df7f:a075:68c1:9c0e)
[15:47:52] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:48:22] *** Joins: pycurious (~Adium@user/pycurious)
[15:51:11] *** Joins: sudomann (~sudomann@73.183.118.9)
[15:51:34] *** Quits: legola (~legola@46.235.97.9) (Remote host closed the connection)
[15:52:51] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 250 seconds)
[15:54:10] *** Joins: xiongxin (~quassel@113.116.34.92)
[15:55:40] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[15:57:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[16:00:05] *** Quits: castle_dweller (~oscarcp@213.144.157.17) (Quit: *falls down a pit*)
[16:00:14] *** Quits: mozgalom (~mozgalom@IPnet-gw.157.157.97.111.simnet.is) (Quit: SO LONG SUCKERS!)
[16:01:40] *** Joins: pycurious (~Adium@user/pycurious)
[16:04:16] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 245 seconds)
[16:04:54] *** Joins: castle_dweller (~castle_dw@213.144.157.17)
[16:06:05] *** Quits: pycurious (~Adium@user/pycurious) (Ping timeout: 246 seconds)
[16:06:09] *** Quits: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b) (Remote host closed the connection)
[16:06:47] *** Joins: legola (~legola@46.235.97.9)
[16:07:41] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[16:08:04] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[16:08:32] *** Joins: sudomann (~sudomann@73.183.118.9)
[16:08:55] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[16:10:00] *** Joins: vladoski (~vladoski@2001:b07:add:d406:9d04:3577:df5e:a883)
[16:12:46] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[16:13:14] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 260 seconds)
[16:14:12] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:15:56] *** dcaro_lunch is now known as dcaro
[16:15:57] *** Quits: raxor2k (~raxor2k@78.158.228.45) ()
[16:16:18] *** Quits: Bronto22 (~mennoh@84-86-247-193.fixed.kpn.net) (Quit: Konversation terminated!)
[16:17:19] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Quit: leaving)
[16:17:46] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:18:24] *** Quits: ubert (~Thunderbi@91.141.52.193.wireless.dyn.drei.com) (Quit: ubert)
[16:18:42] *** Joins: ubert (~Thunderbi@91.141.52.193.wireless.dyn.drei.com)
[16:18:51] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[16:19:17] *** Quits: cdown (~cdown@163.114.131.1) (Ping timeout: 250 seconds)
[16:19:45] *** Parts: SlaveGeek334269 (~SlaveGeek@179.61.228.72) (Leaving...)
[16:20:04] *** Parts: boris[m] (~borisruna@2001:470:69fc:105::32f3) ()
[16:20:22] *** Joins: boris[m] (~borisruna@2001:470:69fc:105::32f3)
[16:20:24] *** Quits: stranac (~stranac@195.29.239.126) (Read error: Connection reset by peer)
[16:21:01] *** Joins: cdown (~cdown@163.114.131.1)
[16:23:05] *** Joins: pycurious (~Adium@user/pycurious)
[16:23:10] *** Joins: ravan_ (~ravan@user/ravan)
[16:23:10] *** Quits: ubert (~Thunderbi@91.141.52.193.wireless.dyn.drei.com) (Ping timeout: 252 seconds)
[16:24:36] *** Joins: sudomann (~sudomann@73.183.118.9)
[16:25:47] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[16:27:11] *** Joins: mozgalom (~mozgalom@194.144.47.113)
[16:29:13] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[16:29:27] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 276 seconds)
[16:30:17] *** Quits: Macuser (~Macuser@216.30.159.201) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:30:51] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[16:31:13] *** Joins: semeion (~semeion@user/semeion)
[16:31:23] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:31:32] *** Quits: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[16:33:30] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[16:38:20] *** Joins: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de)
[16:39:52] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[16:40:49] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[16:41:09] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[16:41:59] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[16:43:12] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[16:43:31] *** Quits: Sadale (~Sadale@user/sadale) (Read error: Connection reset by peer)
[16:44:50] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[16:44:53] *** Quits: elkclone (~elkclone@user/elkclone) (Quit: Leaving)
[16:44:55] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[16:45:35] *** Joins: Sadale (~Sadale@user/sadale)
[16:47:12] *** Joins: node1 (~node1@user/node1)
[16:47:45] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:48:52] *** Joins: jetchisel (jetchisel@user/jetchisel)
[16:50:08] *** Joins: cth (~Cthulchu@193.194.107.250)
[16:50:51] <Masklin_Gurder> How do I print my integers with leading zeroes to keep numbers same width?
[16:52:56] *** Joins: grooverman (~grooverma@177.102.119.40)
[16:53:30] <nedbat> Masklin_Gurder: "{num:03d}"
[16:53:52] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[16:54:48] *** Quits: castle_dweller (~castle_dw@213.144.157.17) (Quit: *falls down a pit*)
[16:54:53] *** Joins: Macuser (~Macuser@216.30.159.201)
[16:55:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:56:09] <Masklin_Gurder> nedbat: Thanks! <3
[16:56:16] *** susam is now known as susam_
[16:56:20] <merijn> Anyone know if there's a convenient/simple way to figure out which BLAS/LAPACK libraries numpy was built against?
[16:56:25] *** susam_ is now known as susam
[16:57:41] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[16:57:45] *** Joins: theprophet (~theprophe@85.114.228.184)
[16:59:15] <theprophet> when (for example sql) is connected to python and django, why do we add/create/remove etc from django instead of directly from the sql ? like whats the main reason here?
[17:00:08] *** Joins: nomic (~nomic@185.217.117.221)
[17:00:45] <Swayze> because you want your db layer to be abstracted from your ui code
[17:01:03] <Swayze> so you can swop it out and have the framework worry about the sql implementations and nuances
[17:01:28] <Swayze> or rather so that you dont have to become familiar with different db's transact-sql languages
[17:01:35] <Swayze> which differ greatly
[17:02:05] <Swayze> you write your ui code once and your db layer handles the intricacies of communitcating with whatever database you've configured your application to use
[17:02:12] <nedbat> theprophet: also, lots of Python devs are more comfortable thinking in Python object terms than SQL terms.
[17:02:38] <theprophet> Swayze do you mean like, once you add the atributes its done only once?
[17:02:48] <theprophet> nedbat i see.
[17:02:59] <Swayze> i mean you dont have to write different db code for oracle vs mysql vs mssql
[17:03:06] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[17:03:13] <merijn> In theory...
[17:03:28] <Swayze> (for CRUD)
[17:03:29] <theprophet> Swayze so python is converting ?
[17:03:38] <Swayze> more like generating
[17:04:02] <theprophet> Swayze i see
[17:04:05] <Swayze> the specific sql queries to talk to your specific db
[17:04:06] <vdamewood> merijn: find ~/Library/Python/3.9/lib/python/site-packages/numpy/ -name '*.so' -exec otool -L {} \; # otool -L is macOS for ldd
[17:04:15] <slowtyper> merijn: This is the arch build script, https://github.com/archlinux/svntogit-packages/blob/packages/python-numpy/trunk/PKGBUILD
[17:04:28] <merijn> vdamewood: I'm not on macOS atm, though :p
[17:04:42] <vdamewood> merijn: Are you on Windows?
[17:04:56] <merijn> vdamewood: I'm debugging an issue across several linux distros
[17:05:09] <Swayze> yeah and what nedbat saying is huge, you dont need to learn another language (transact sql dialect)
[17:05:20] <Swayze> you can just focus on python alpha omega the end
[17:05:33] <vdamewood> Then replace otool -L with ldd, and  ~/Library/Python/3.9/lib/python/site-packages with the location of the site-packages directory where numpy sits.
[17:05:41] *** Joins: mickey84 (~user@user/mickey)
[17:05:42] *** Joins: B33F_1337 (~b33f1337@host.b33f1337.com)
[17:05:43] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[17:05:44] *** mickey84 is now known as mickey8
[17:05:56] <theprophet> Swayze i see .
[17:06:01] <Swayze> also the point of django is to get your api and db layer handled by the framework
[17:06:08] <Swayze> whereas you just need to define your structures in code
[17:06:11] <merijn> vdamewood: Some nice nightmare issue where I have python bindings for C++ code that fail at runtime on dynamic library issues, but only on *some* specific combinations of compiler toolchains and distros >.>
[17:06:21] <merijn> 'cause f- me >.>
[17:06:32] <Swayze> you get a free api and admin crud portal with authenetication
[17:06:40] <Swayze> thats a lot of free stuff
[17:06:48] <theprophet> Swayze but that can also be done without django
[17:07:06] *** Joins: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e)
[17:07:09] <theprophet> ?
[17:07:22] <Swayze> if cors you could in theory write it all using 1's and 0's
[17:07:25] <Swayze> :-)
[17:07:30] <SnoopJ> merijn, numpy.show_config()
[17:07:51] <theprophet> Swayze i see.
[17:07:52] <Swayze> hardcore programmers only need a keyboard with two buttons 1 and 0
[17:08:05] <Swayze> hhhh
[17:08:11] <theprophet> what about enter?
[17:08:24] <Swayze> its expressed via a set of 1's and 0's
[17:08:29] <Swayze> just like everything else
[17:08:48] <Swayze> its 10 in decimal
[17:08:52] <theprophet> Swayze django is complicated.
[17:09:06] <Swayze> itsnot as complicated as writing all those layers by yourself
[17:09:18] <leduyquang753> Lame. Telegraphers only needed one button.
[17:09:18] <theprophet> Swayze hard to learn and memorize . to many stuff even in starting level.
[17:09:18] <Swayze> you can write a full end-to-end app in a matter of minutes
[17:09:24] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[17:09:40] <Swayze> with enterprise grade security and scaling
[17:09:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:09:59] <merijn> SnoopJ: Thanks
[17:10:19] <Swayze> did you follow the official django introduction project/guide?
[17:10:23] <theprophet> Swayze i am wondering when i will be ready to work independently with django
[17:10:36] <theprophet> Swayze yes and also video tutorials.
[17:10:46] <Swayze> https://www.djangoproject.com/start/
[17:11:02] <theprophet> Swayze yes i have it
[17:11:07] <Swayze> ok if you follow this guide and you find it hard then it means you just have a lack of coding experience in general
[17:11:15] <Swayze> on a scale of 1-10 wrt hardness this is a 5 maybe
[17:11:26] <Swayze> 4...
[17:11:42] *** Quits: p-i-_ (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Remote host closed the connection)
[17:11:57] <theprophet> Swayze well my python coding is good. i just cannot adjust to the idea behind django.
[17:12:11] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Ping timeout: 245 seconds)
[17:12:17] <theprophet> Swayze adding a logic is hard.
[17:12:18] *** Joins: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th)
[17:12:27] <theprophet> Swayze what where and why
[17:12:29] <Swayze> well if you learning it for a job/career prospect then you just have to keep practising
[17:12:37] <Swayze> if its for yourself then feel free to look at alternatives
[17:12:37] <SnoopJ> merijn, and if you need programmatic access, I think that's the stuff in numpy.distutils.system_info
[17:12:44] <theprophet> Swayze thats exactly why i am doing this.
[17:13:09] <theprophet> Swayze i mean job.
[17:13:11] <Swayze> ok then assume theres a reason why django is rated so highly and keep working at it till you see the light
[17:13:17] <Swayze> (because there is)
[17:13:39] *** Joins: prime (~prime@user/prime)
[17:13:59] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[17:14:34] <theprophet> Swayze oh and btw. tbh, that documentation or the tutorial included there.lack of lot of information. for example it does not specify nothing when creating SQL database.
[17:14:49] *** Joins: jfrancisco (~jfrancisc@213.58.201.38)
[17:15:02] *** Joins: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net)
[17:15:34] <Swayze> https://docs.djangoproject.com/en/3.2/intro/tutorial02/
[17:15:44] <theprophet> Swayze and thank you for your help.
[17:15:46] <Swayze> this is the database setup
[17:16:13] <Swayze> strictly speaking setting up your database is outside the scope of django
[17:16:24] <Swayze> sure it does everything else for you except install it
[17:16:26] <Swayze> lol
[17:17:14] <Swayze> theres a plethora of database servers you cant expect django team to do a tut on each and every one of them
[17:17:21] <theprophet> Swayze , well yea but i found a tutorial that shows everything that link lacks.
[17:17:22] <Swayze> they just cover sqlite
[17:17:35] <Swayze> well done theprophet thats your key to success right thre
[17:17:41] <Swayze> being able to work the ol google machine
[17:17:44] <Swayze> o ye
[17:17:48] <Swayze> now yr unstoppable
[17:17:58] <theprophet> Swayze lol. oh yea.
[17:18:16] <theprophet> Swayze good think i can speak 3 langauges.
[17:18:35] <theprophet> Swayze thats what it takes for me to learn django.
[17:18:56] <Swayze> unfortunately girls prefer if you can speak french, they hardly ever understand python :-)
[17:19:05] <Swayze> (or french but french just sounds better )
[17:19:33] <theprophet> @swa
[17:19:47] <theprophet> Swayze no french. georgian. russian. english.
[17:19:53] *** Parts: strk (~strk@user/strk) (WeeChat 3.0.1)
[17:19:58] <Swayze> python is a language too
[17:20:03] <Swayze> so thats 4  ...
[17:20:04] <kosh> is there anything faster than multiprocessing and pickle for parallel processing?
[17:20:13] <theprophet> Swayze is html language?
[17:20:17] <Swayze> yes
[17:20:23] <Swayze> for markup
[17:20:24] <theprophet> make it 5
[17:20:27] <theprophet> css?
[17:21:06] <theprophet> ok this is chitchat now. Swayze thank you. ill go back to studying ..
[17:21:22] <bauripalash> theprophet: count that six
[17:21:31] <theprophet> 6 it is xD
[17:22:09] <SnoopJ> chit-chat is very welcome in #python-offtopic :)
[17:22:54] <kosh> depending on the type of chat of course
[17:23:04] *** Quits: xakan (~xakan@ns354170.ip-91-121-101.eu) (Quit: The Lounge - https://thelounge.chat)
[17:23:05] <theprophet> bauripalash imagine going to a girl and saying. wow = 'beautiful'  or <h1 style="beautifu">
[17:23:08] <theprophet> bauripalash imagine going to a girl and saying. wow = 'beautiful'  or <h1 style="beautifu">
[17:23:15] <theprophet> bauripalash imagine going to a girl and saying. wow = 'beautiful'  or <h1 style="beautifu"> ....
[17:23:25] <theprophet> wow lagged xD
[17:23:34] <Memory> yes very
[17:23:44] <bauripalash> SnoopJ: I opened the channel, it welcomed me with "welcome to #rust-offtopic" what the ??
[17:23:59] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[17:24:04] <bauripalash> theprophet: gonna try today
[17:24:33] <theprophet> dont forget the <head> or you're gonna get in trouble and get exception
[17:24:36] *** Joins: holgersson (~quassel@user/holgersson)
[17:24:37] <theprophet> bauripalash
[17:24:37] *** Joins: xakan (~xakan@ns354170.ip-91-121-101.eu)
[17:25:30] <bauripalash> theprophet: oops, you're a little late...
[17:26:19] *** Quits: tg (~tg@rockylinux/infra/tg) (Remote host closed the connection)
[17:26:56] *** Joins: tg (~tg@rockylinux/infra/tg)
[17:28:24] *** Quits: jfrancisco (~jfrancisc@213.58.201.38) (Quit: Client closed)
[17:29:10] *** Quits: dgdg (~dg_dg@191.101.31.44) (Ping timeout: 252 seconds)
[17:29:26] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[17:30:29] <theprophet> jobs ads be like: 5 years of experience with python, 3 years of django ...  meanwhile i started django 2 days ago. xD
[17:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[17:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[17:31:06] *** Joins: spai (~spai@user/spai)
[17:31:10] <theprophet> </3
[17:31:58] *** Quits: shad (~shad@user/shad) (Ping timeout: 252 seconds)
[17:32:59] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[17:33:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[17:33:09] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-ac81-7fce-fe8c-415b.res6.spectrum.com)
[17:33:14] *** Joins: akk (~akk@75.161.146.115)
[17:33:53] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:34:10] *** Joins: shad (~shad@user/shad)
[17:34:50] *** Joins: fikran (~fikran@user/fikran)
[17:34:54] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Ping timeout: 260 seconds)
[17:35:35] *** Quits: lazerlapin (~lazerlapi@2405:6580:b0c0:4200:ac08:8774:7e5b:2a4) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:37:37] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[17:37:51] <SnoopJ> Anybody know if getbuffer() is documented somewhere? I can't really find reference to it in the docs except in the change notes for 3.2 and the brief reference in the io module docs.
[17:39:06] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[17:40:14] <SnoopJ> And PyObject_CheckBuffer() mentions it, although that's more concerned with the bf_getbuffer slot, and I'm just kinda lost in all the details but want to support objects like BytesIO that don't let you PyObject_GetBuffer() directly
[17:41:26] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[17:42:05] *** Joins: adiKt (uid472628@id-472628.tinside.irccloud.com)
[17:42:13] *** Joins: thebluenowhere (~elevynn@51.155.113.143)
[17:42:47] *** Joins: sudomann (~sudomann@73.183.118.9)
[17:43:18] <mgedmin> I don't think BytesIO supports the buffer protocol?
[17:43:20] *** Joins: carl- (~carl-@185.103.188.130)
[17:43:38] *** Joins: subopt (~subopt@2603-8081-2302-459a-e428-389a-706c-5538.res6.spectrum.com)
[17:43:38] *** subopt is now known as _subopt
[17:45:10] *** Quits: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e) (Ping timeout: 260 seconds)
[17:48:41] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 264 seconds)
[17:48:59] *** Parts: thebluenowhere (~elevynn@51.155.113.143) ()
[17:49:11] *** Quits: theprophet (~theprophe@85.114.228.184) (Quit: Client closed)
[17:49:26] *** Quits: legola (~legola@46.235.97.9) (Remote host closed the connection)
[17:49:45] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Ping timeout: 265 seconds)
[17:49:53] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 265 seconds)
[17:50:17] *** Quits: metah4ck3r (~meta@user/metah4ck3r) (Ping timeout: 250 seconds)
[17:51:19] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:51:46] *** Quits: Klinda (~superleag@user/klinda) (Ping timeout: 252 seconds)
[17:52:10] *** Joins: metah4ck3r (~meta@user/metah4ck3r)
[17:53:02] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[17:53:32] *** Joins: xiongxin_ (~quassel@113.116.34.92)
[17:53:57] *** Quits: xiongxin (~quassel@113.116.34.92) (Ping timeout: 268 seconds)
[17:54:09] *** Joins: martums (~martums@user/martums)
[17:55:05] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[17:55:31] *** Quits: reset (~reset@user/reset) (Ping timeout: 245 seconds)
[17:57:32] *** Joins: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com)
[17:57:47] <p-i-> Suppose Foo.py defines bar=42. How to set a bash variable to Foo.bar?
[17:58:32] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[17:59:11] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:00:41] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 264 seconds)
[18:01:09] <SnoopJ> p-i-, `os.environ["THEVAR"] = value` will set an environment variable
[18:01:32] <SnoopJ> but this is a one-time operation, it doesn't 'track' that value. You could write an object that updates the environment when its attributes are changed, though.
[18:03:18] *** Quits: clarkk (~clarkk@host31-53-69-254.range31-53.btcentralplus.com) (Quit: Leaving)
[18:03:22] *** Quits: orbatos (~orbatos@user/orbatos) (Ping timeout: 260 seconds)
[18:03:23] *** Joins: orbatos_ (~orbatos@user/orbatos)
[18:03:49] *** Joins: defjam (~eb0t@90.213.43.87)
[18:04:04] *** Joins: Grinchioos (~Grinchios@213.205.241.251)
[18:04:16] <p-i-> 👍
[18:06:30] *** Joins: arinov (~arinov@31.142.9.142)
[18:07:59] <rendar> what is the best method to send pd.DataFrames across different processes?
[18:08:00] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[18:08:05] *** Joins: qlixed (~qlixed@181.44.129.13)
[18:08:37] *** Quits: Grinchioos (~Grinchios@213.205.241.251) (Remote host closed the connection)
[18:09:14] <sveinse> rendar: depends on os I think, but network sockets are pretty standard across the board
[18:09:39] <lericson> rendar: disk
[18:09:48] *** Joins: Grinchios (~Grinchios@213.205.241.251)
[18:09:56] <sveinse> haha, and disk of course :P
[18:10:53] *** Joins: jwodder (~jwodder@2601:89:c600:f150:e1c9:160f:b911:f8f)
[18:11:07] <SnoopJ> /dev/shm is nice
[18:11:23] <SnoopJ> depends on what "best" means to you
[18:11:30] <rendar> ok
[18:11:34] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:12:02] *** Quits: vladoski (~vladoski@2001:b07:add:d406:9d04:3577:df5e:a883) (Quit: Textual IRC Client: www.textualapp.com)
[18:12:33] *** Quits: jwodder (~jwodder@2601:89:c600:f150:e1c9:160f:b911:f8f) (Client Quit)
[18:12:41] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[18:13:35] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[18:16:04] *** Quits: nomic (~nomic@185.217.117.221) (Quit: Leaving)
[18:16:35] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Client Quit)
[18:17:01] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[18:20:28] *** Joins: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr)
[18:20:29] <p-i-> If I shebang Foo.py with #!../.venv/bin/python, chmod u+x Foo.py; cd .. ; myfolder/Foo.py it will give "bad interpreter: No such file or directory"
[18:20:34] *** _subopt is now known as subopt
[18:20:45] <p-i-> I don't suppose there's a workaround?
[18:21:12] <p-i-> I'd like it to consider the path relative to the file location not the pwd at time of command
[18:21:34] *** Quits: af (~af@awalgarg.me) (Ping timeout: 260 seconds)
[18:21:51] *** Joins: Deneb (~johnch@86.111.189.80.dyn.plus.net)
[18:22:15] *** Joins: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4)
[18:23:32] *** Quits: orbatos_ (~orbatos@user/orbatos) (Read error: Connection reset by peer)
[18:23:41] *** Joins: orbatos_ (~orbatos@user/orbatos)
[18:23:45] *** Joins: bloody (~bloody@user/bloody)
[18:24:45] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:25:08] *** Joins: DaNeenjah (~jake@adsl-74-230-6-204.hsv.bellsouth.net)
[18:25:12] *** Quits: spetrosi (~spetrosi@2a02:8308:b:ec00:637b:7e28:3899:e5c1) (Quit: Leaving)
[18:25:17] <SnoopJ> p-i-, I don't think shebangs can be relative, but you could write a Python program that uses `#!/bin/env python3` and then looks relative to where it's running
[18:25:48] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 276 seconds)
[18:27:17] *** Joins: af (~af@awalgarg.me)
[18:27:33] *** Joins: spithash (~spithash@user/spithash)
[18:28:38] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[18:30:34] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[18:30:57] *** Quits: rakoon (~rakoon@2001:985:f4c6:1:df7f:a075:68c1:9c0e) (Ping timeout: 268 seconds)
[18:31:03] *** Joins: djhankb (~djhankb@208.113.164.68)
[18:31:34] *** Joins: rakoon (~rakoon@2001:985:f4c6:1:bc70:e69d:10aa:2e3c)
[18:34:39] *** Quits: Elodin (~weechat@user/elodin) (Ping timeout: 268 seconds)
[18:35:15] *** Joins: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e)
[18:36:25] *** Joins: adder (~adder@user/adder)
[18:36:52] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 252 seconds)
[18:37:31] <adder> I'm having an issue with mypy reporting that some decorators make the function untyped. The decorators come from click, and I've installed 'types-click'. I'm using poetry if that changes anything.
[18:37:46] <adder> I'm running mypy with --strict.
[18:38:39] *** Joins: srhm (~srhm@user/srhm)
[18:38:40] <SnoopJ> adder, it would help to see the complete error report. You might also see if using Typer (which is built on top of click) would resolve the problem
[18:38:44] *** Quits: ExeciN (~ExeciN@user/nicexe) (Remote host closed the connection)
[18:39:07] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Read error: Connection reset by peer)
[18:39:13] *** Joins: mekhami (~lawrence@2603-8080-1802-bc00-0aef-5467-2571-d127.res6.spectrum.com)
[18:39:21] <adder> SnoopJ, sorry, here's the full report: https://bpa.st/QH5A
[18:40:07] *** Quits: audiocat (~audio@cpe-24-27-99-134.tx.res.rr.com) (Ping timeout: 252 seconds)
[18:41:11] *** Quits: curiosity (uid507362@user/cypris) (Quit: Connection closed for inactivity)
[18:41:22] <SnoopJ> adder, hmm, the click_option_group message seems pretty relevant. Can we also see cli.py? (or a suitably reduced version of it that fails the same way)
[18:41:37] <sveinse> p-i-: I've found making proper packages and entry_points is the best way forward. Then setuptools will make you the executable in venv/bin or venv\Scripts\ that will work from anywhere
[18:41:52] <adder> SnoopJ, sure: https://bpa.st/ZAJQ
[18:42:13] <SnoopJ> agreed, installing something into a venv can give you an entrypoint with a shebang proper for that env
[18:43:11] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[18:43:13] *** Quits: bauripalash (~bauripala@2401:4900:3829:d0e9:1:2:7b3d:518e) (Quit: Quit)
[18:43:45] *** Quits: srhm (~srhm@user/srhm) (Read error: Connection reset by peer)
[18:44:44] <SnoopJ> adder, hmm, some of those are indeed from click_option_group, but it looks like argument() and option() do as well
[18:45:16] <adder> SnoopJ, yeah, I'm wondering if I'm not using poetry in an intended way or something
[18:45:34] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[18:45:41] <SnoopJ> adder, nah, I am reproducing this outside of poetry
[18:45:43] *** Joins: iomari891 (~iomari891@105.112.138.38)
[18:46:18] <adder> do you think I should knock on mypy's door?
[18:46:53] *** Quits: shad (~shad@user/shad) (Ping timeout: 264 seconds)
[18:47:07] <SnoopJ> I would drop click_option_group for the moment and see how to resolve the ones just associated with click.
[18:47:19] *** Joins: FluffyMask (~masque@user/fluffymask)
[18:47:33] <SnoopJ> For that contrib package you might need to write your own stub if there aren't some somewhere (or submit a PR to the package)
[18:48:05] *** Joins: srhm (~srhm@user/srhm)
[18:49:13] *** Joins: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr)
[18:52:38] <sveinse> I have a large function with lots of logic which is does blocking IO throughout the whole function. I want to port this to async, which is trivial enough. However, this duplicates the same logic, one function for regular IO, one for async. Is there a way I can make a common generic function that either does regular IO or await something in order for me to keep the logic in one place?
[18:54:29] *** Joins: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com)
[18:55:21] *** Quits: arinov (~arinov@31.142.9.142) (Quit: WeeChat 3.1)
[18:56:15] *** Joins: arinov (~arinov@31.142.9.142)
[18:56:42] *** Joins: sudomann (~sudomann@73.183.118.9)
[18:57:35] *** Joins: NeoCore (~neocore@195.200.221.23)
[18:58:29] *** Joins: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi)
[18:59:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[18:59:27] *** Joins: kexec (~kexec@user/kexec)
[18:59:29] *** Quits: NeoCore (~neocore@195.200.221.23) (Client Quit)
[18:59:56] *** Joins: NeoCore (~neocore@195.200.221.23)
[19:00:52] *** Joins: dwt_ (~dwt_@c-98-200-58-177.hsd1.tx.comcast.net)
[19:00:54] *** Joins: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk)
[19:00:56] *** Quits: arinov (~arinov@31.142.9.142) (Ping timeout: 245 seconds)
[19:03:43] <SnoopJ> adder, this seems like a typeshed bug with IdentifyFunction. It _looks_ right, but clearly it doesn't work right: https://github.com/python/typeshed/blob/master/stubs/click/click/decorators.pyi#L58-L73
[19:03:50] <SnoopJ> IdentityFunction*
[19:06:17] *** Quits: xiongxin_ (~quassel@113.116.34.92) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:06:33] <SnoopJ> adder, if I change `-> IdentityFunction: ...` to `-> Callable[[_T], _T]: ...`, the errors go away, so yea, this is either the click stub doing it wrong, or mypy not handling the Protocol right?
[19:08:14] *** Joins: xiongxin (~quassel@119.123.101.136)
[19:10:01] <lericson> man exceptions are ugly
[19:10:18] *** Joins: mrcrypto (~utkarsh@157.37.217.32)
[19:10:24] <sveinse> Is there a simple way to iterate over a generator where send() is used? while True and then you need to catch StopIteration yourself?
[19:14:21] *** Quits: metaace (~metaace@user/metaace) (Remote host closed the connection)
[19:14:36] *** Joins: metaace (~metaace@user/metaace)
[19:15:13] *** Quits: srhm (~srhm@user/srhm) (Ping timeout: 250 seconds)
[19:15:47] <adder> SnoopJ, I don't have much experience with typing so I wouldn't know for sure; turns out that the stubs for click are in typeshed and this package shouldn't be used, as for the other errors, I had to allow untyped decorators because click_option_group does not provide stubs
[19:16:25] *** Quits: defjam (~eb0t@90.213.43.87) (Ping timeout: 252 seconds)
[19:17:00] <SnoopJ> adder, looks like the typestub for click is just broken, I get a revealed type of Any if I call the decorators.
[19:17:02] <sudomann> I should be able to bind port with `nc -l 8889` right?
[19:17:22] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:17:32] <sudomann> wrong channel sorry
[19:18:06] *** Joins: defjam (~eb0t@90.213.43.87)
[19:18:25] <lericson> sudomann: might want a -v in there so you know when you get a connection
[19:18:43] *** Joins: Sky_Net (~Sky_Net@176.14.213.149)
[19:18:54] *** Joins: srhm (~srhm@user/srhm)
[19:18:55] <sveinse> Any ways to embed the StopIteration test into the while loop? https://bpa.st/ZVMA
[19:19:16] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[19:19:16] *** Quits: xiongxin (~quassel@119.123.101.136) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:19:44] *** Quits: VaniaPy (~VaniaPy@adsl-138.176.58.194.tellas.gr) (Quit: Connection closed)
[19:21:02] <SnoopJ> adder, I think I'll open an issue in typeshed, something is weird here with IdentityFunction.
[19:23:01] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[19:25:48] *** Joins: aknot (~aknot@2603:900a:1503:17bb:400:bcc7:5a5b:8460)
[19:27:14] *** Joins: leitz (~LeamHall@cpe-173-172-58-72.tx.res.rr.com)
[19:27:24] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:27:44] <p-i-> woooo Python 3.10 came out
[19:28:18] *** Quits: mrwick (~mrwick@user/mrwick) (Ping timeout: 260 seconds)
[19:28:22] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[19:29:37] *** Quits: Grinchios (~Grinchios@213.205.241.251) (Ping timeout: 252 seconds)
[19:29:37] *** Joins: stdout (~stdout@216.163.21.11)
[19:30:16] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Read error: Connection reset by peer)
[19:30:22] *** Joins: jwhisnant_ (~jwhisnant@user/jwhisnant)
[19:30:32] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[19:30:51] *** Joins: saribro (~swinnenb@user/swinnenb)
[19:32:36] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[19:33:06] <adder> SnoopJ, sounds good; might I ask for the link to the issue so I can subscribe?
[19:33:30] <SnoopJ> adder, yea, will share once I've written it up
[19:33:31] *** Quits: swinnenb (~swinnenb@user/swinnenb) (Ping timeout: 252 seconds)
[19:33:50] <gitesh> global is useful in event-driven(GUI) programming
[19:33:54] *** Joins: Hanii (~textual@2a00:23c5:c587:6d00:583f:addf:6026:5042)
[19:34:10] <SnoopJ> it could be a mypy bug, since it appears to work if I define IdentityFunction in place and use it this way
[19:34:28] *** Joins: slav0nic (slav0nic@python.su)
[19:35:41] *** Quits: DnzAtWrk (~DnzAtWrk@mobile-access-6df0bc-198.dhcp.inet.fi) (Read error: Connection reset by peer)
[19:36:15] *** Joins: SallyAhaj_ (SallyAhaj@user/sallyahaj)
[19:37:08] *** Quits: mrcrypto (~utkarsh@157.37.217.32) (Quit: Leaving)
[19:37:22] *** Quits: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr) (Quit: WeeChat 3.3)
[19:38:58] *** Quits: SallyAhaj (~SallyAhaj@user/sallyahaj) (Ping timeout: 252 seconds)
[19:41:01] *** Joins: stewie925 (~stewie925@2600:1702:44f0:35c0:ec30:badc:b3fd:8af2)
[19:42:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[19:43:17] *** Joins: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp)
[19:43:41] *** Joins: Ergo^ (~ergo@91.238.59.144)
[19:44:11] *** Joins: fikran (~fikran@user/fikran)
[19:44:15] *** Joins: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net)
[19:45:53] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[19:46:35] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 246 seconds)
[19:46:48] *** Quits: kexec (~kexec@user/kexec) (Quit: Client closed)
[19:47:25] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 268 seconds)
[19:48:38] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Read error: Connection reset by peer)
[19:48:38] *** Quits: mekhami (~lawrence@2603-8080-1802-bc00-0aef-5467-2571-d127.res6.spectrum.com) (Quit: WeeChat 2.8)
[19:49:12] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[19:49:52] *** Joins: Klinda (~superleag@user/klinda)
[19:50:35] *** Joins: sudomann (~sudomann@73.183.118.9)
[19:51:41] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 265 seconds)
[19:51:49] *** Quits: adiKt (uid472628@id-472628.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[19:52:10] *** Joins: barzo (~barzo@31.177.222.75)
[19:52:16] *** Parts: Pinchiukas (~keps@128.29.231.35.bc.googleusercontent.com) (WeeChat 2.8)
[19:52:50] *** Joins: lxwulf (~lxwulf@user/lxwulf)
[19:52:56] *** Joins: zrsm (~mrrobot@173.171.254.123)
[19:53:08] *** Joins: stealth_ (~stealth_@216-197-160-97.regn.static.sasknet.sk.ca)
[19:53:20] <p-i-> `sudo add-apt-repository -y ppa:deadsnakes/ppa` isn't working for Python 3.10
[19:53:29] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-228.sw.biz.rr.com) (Ping timeout: 265 seconds)
[19:53:36] <p-i-> Is there a recommended way for getting Python 3.10 onto ubuntu 20.10?
[19:53:44] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[19:53:53] <jinsun> pyenv
[19:54:10] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[19:55:01] <p-i-> https://bpa.st/YFFQ <-- that's my current BASH code
[19:55:07] *** Joins: LiftLeft (~LiftLeft@191.96.185.109)
[19:55:17] <SnoopJ> p-i-, I recommend pyenv
[19:55:17] <stealth_> in cython `__dealloc__` is called before the task is done and thus freeing the memory, any idea how to hold on to reference within the called function or other way to go about it?
[19:56:24] <p-i-> I've also got `sudo apt-get install -y  build-essential libpython3.10-dev ;` a couple of lines later, so maybe I need to sync with a repo that sources 3.10?
[19:56:38] <p-i-> I doubt pyenv will handle that package also
[19:57:45] <SnoopJ> pyenv is capable of giving you what libpythonX.Y-dev gives you (how else could it build Python?)
[19:58:10] <SnoopJ> if you want a debug build, you'll want to pass --debug to `pyenv install`
[19:58:10] *** Joins: bn_work (uid268505@id-268505.uxbridge.irccloud.com)
[19:58:20] *** Joins: hudo__ (~hudo@62.68.20.210)
[19:58:37] *** Quits: SallyAhaj_ (SallyAhaj@user/sallyahaj) (Remote host closed the connection)
[19:59:21] *** spiderman is now known as borat
[19:59:27] <Macuser> anyone familiar with Skyfield API?
[19:59:29] *** borat is now known as spiderman
[19:59:45] *** Joins: SallyAhaj_ (~SallyAhaj@user/sallyahaj)
[19:59:45] <SnoopJ> adder, I have a workaround for you: if you install types-click==0.1.12, this IdentityFunction problem should go away
[20:00:07] <akk> Macuser: I've used skyfield a little.
[20:00:26] <akk> Macuser: Though I confess I often fall back on PyEphem because it's easier.
[20:00:41] <Macuser> I just wanna know how I can do satellites = load.tle_file(stations_url, filename='starlink.tle') without loading the url. I wanna use an already existing .tle file
[20:01:11] <SnoopJ> adder, I don't know what else changed in the stubs since then, but despite the version number looking very different, that's only as far back as 17 May of this year.
[20:01:11] <Macuser> but I want it in the same format as load.tle_file outputs
[20:01:34] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 252 seconds)
[20:02:01] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 250 seconds)
[20:02:19] <akk> Actually, I haven't done artificial satellites, but if it can do starlink now, I should -- I'd very much like a starlink predictor.
[20:03:07] <akk> Does it not cache the link? I thought it cached most things. (Looking.)
[20:03:08] <Macuser> it can do anything you give it
[20:03:15] <Macuser> it's just dependent on what celestrak TLE you give it
[20:03:28] <Macuser> I use PREDICT for passes
[20:03:34] <Macuser> written by KD2BD in C
[20:03:58] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[20:04:36] <SnoopJ> adder, https://github.com/python/typeshed/issues/6156
[20:05:03] *** Joins: sartan (~sartan@user/sartan)
[20:06:02] *** Joins: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec)
[20:06:42] *** Joins: badsektor (~badsektor@user/badsektor)
[20:07:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:07:33] *** SallyAhaj_ is now known as SallyAhaj
[20:08:12] *** Joins: mrcrypto (uid521271@id-521271.helmsley.irccloud.com)
[20:08:23] <SnoopJ> if anybody is familiar with how mypy resolves helpers from _typeshed, I would appreciate a look at ^that issue, I have no idea why it's apparently not seeing IdentityFunction
[20:08:40] *** Joins: sudomann (~sudomann@73.183.118.9)
[20:09:31] *** Joins: pipapipapipo (~peppbel@172.58.45.38)
[20:10:26] <akk> Macuser: When I try that, it caches starlink.tle, so after the first time it doesn't use the url.
[20:10:48] <Macuser> true
[20:11:02] <Macuser> i remember finding that out too
[20:11:09] <akk> Macuser: I tried passing an invalid url and it still worked fine, didn't try to use the url as long as the starlink.tle file was there.
[20:11:17] <Macuser> yep
[20:11:22] <Macuser> i dont know why i frogot that
[20:11:27] *** Quits: rjwiii (~mr-rich@idlerpg/player/mr-rich) (Ping timeout: 240 seconds)
[20:13:57] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Remote host closed the connection)
[20:14:00] *** Joins: rsx (~dummy@ppp-188-174-132-206.dynamic.mnet-online.de)
[20:14:15] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:14:26] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e86c:be50:e673:c005)
[20:14:26] <be3uykpy> t
[20:15:05] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 264 seconds)
[20:15:52] <SnoopJ> NameError: name 't' is not defined
[20:16:03] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[20:16:30] *** Quits: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net) (Quit: Leaving)
[20:16:37] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[20:17:24] *** Joins: sudomann (~sudomann@73.183.118.9)
[20:18:10] <jinsun> SnoopJ: pyright does better there Type of "click.argument("foo")" is "IdentityFunction"
[20:18:32] <SnoopJ> jinsun, hmm, might be a mypy bug then. I'll see what the typeshed folks make of it I guess.
[20:18:49] * SnoopJ doesn't really understand how _typeshed imports work
[20:19:28] *** spiderman is now known as iphone
[20:19:35] *** iphone is now known as spiderman
[20:19:41] *** Joins: donofrio (~donofrio@c-68-40-123-74.hsd1.mi.comcast.net)
[20:20:20] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[20:20:56] <Macuser> akk interestingly, the PREDICT program stops finding pass data after STARLINK-1027
[20:24:19] *** Quits: barzo (~barzo@31.177.222.75) (Quit: Quit)
[20:24:41] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 245 seconds)
[20:25:40] *** Joins: bbbbbb (~peppbel@172.58.45.222)
[20:28:51] *** Quits: pipapipapipo (~peppbel@172.58.45.38) (Ping timeout: 245 seconds)
[20:29:23] *** Quits: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net) (Quit: bilb_ono)
[20:29:25] *** Joins: audiocat (~audio@2603-8081-1800-1546-4f95-adb2-1cba-e9e9.res6.spectrum.com)
[20:29:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[20:30:32] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[20:30:48] *** Joins: Soni (~quassel@autistic.space)
[20:30:55] *** Joins: djhankb (~djhankb@208.113.164.68)
[20:31:09] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[20:31:17] *** Joins: linux_dream (~isaac@2a01:e0a:7:60e0:bcc4:b32c:9221:831d)
[20:32:33] *** Joins: emf (~emf@2620:10d:c090:400::5:a45e)
[20:33:07] *** Joins: RabidToaster1 (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca)
[20:33:55] *** Joins: Spawns_Carpeting (~Spawns_Ca@user/spawns-carpeting/x-6969421)
[20:34:10] *** Joins: mchlumsky1 (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca)
[20:34:32] *** Quits: zegalch (~zegalch@178.128.75.133) (Ping timeout: 246 seconds)
[20:34:53] *** Quits: dstein64 (~dstein64@dannyadam.com) (Ping timeout: 264 seconds)
[20:34:54] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 268 seconds)
[20:34:54] *** RabidToaster1 is now known as RabidToaster
[20:35:03] *** Joins: zegalch (~zegalch@178.128.75.133)
[20:35:05] *** Joins: fxrs (~fxrs@192.227.212.130)
[20:35:09] *** Joins: xavierdarkness_ (~xavierdar@user/xavierdarkness)
[20:35:11] *** Quits: xavierdarkness (~xavierdar@user/xavierdarkness) (Ping timeout: 265 seconds)
[20:35:16] *** Joins: Repiphany_ (~Repiphany@user/repiphany)
[20:35:16] *** Quits: fxrs_ (~fxrs@192.227.212.130) (Ping timeout: 250 seconds)
[20:35:35] *** Quits: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com) (Ping timeout: 246 seconds)
[20:35:38] *** xavierdarkness_ is now known as xavierdarkness
[20:35:45] *** Joins: MightyMu_ (~MightyMu@104.131.138.31)
[20:36:08] *** Quits: kujo4 (~kujo@188.166.12.52) (Ping timeout: 268 seconds)
[20:36:08] *** Quits: MightyMu (~MightyMu@104.131.138.31) (Ping timeout: 250 seconds)
[20:36:08] *** Quits: Repiphany (~Repiphany@user/repiphany) (Ping timeout: 250 seconds)
[20:36:09] *** Quits: mchlumsky (~mchlumsky@modemcable106.190-179-173.mc.videotron.ca) (Ping timeout: 265 seconds)
[20:36:09] *** Quits: dangrenier83 (~pi@user/dangrenier83) (Ping timeout: 265 seconds)
[20:36:09] *** Quits: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca) (Ping timeout: 265 seconds)
[20:36:09] *** mchlumsky1 is now known as mchlumsky
[20:36:42] *** Joins: dstein64 (~dstein64@dannyadam.com)
[20:36:43] *** Joins: redj (~quassel@bras-base-bchmpq5707w-grc-24-76-69-197-62.dsl.bell.ca)
[20:36:56] <jinsun> SnoopJ: well IdentityFunction = Any according to mypy it seems https://mypy-play.net/?mypy=latest&python=3.10&gist=d9b2893f3ece632daed18072a84708ca
[20:37:21] *** Joins: kujo4 (~kujo@188.166.12.52)
[20:37:25] *** Joins: phillhocking (~erasmus@ec2-54-191-78-90.us-west-2.compute.amazonaws.com)
[20:37:58] *** Joins: dangrenier83 (~pi@user/dangrenier83)
[20:39:16] *** Quits: gusto (~Augustus@2620:149:e0:6002::56) (Read error: Connection reset by peer)
[20:39:25] <jinsun> ah well that is because it thinks _typeshed is not something that can be imported I guess
[20:39:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[20:40:16] <jinsun> although pyright seems to be fine with that, and gives `Type of "IdentityFunction" is "Type[IdentityFunction]"`
[20:40:17] <SnoopJ> jinsun, yea, the import is the problem. This used to be defined locally to click and no longer is, and it's failing to find that
[20:40:38] <SnoopJ> I'm not sure why, but I know there are some idiosyncratic rules to _typeshed
[20:41:28] <SnoopJ> so it's not clear if that's the stub doing it not-quite-right, or mypy just can't resolve what's going on there
[20:41:55] *** Quits: tobybl_ (~tobybl@38.247.200.146.dyn.plus.net) (Remote host closed the connection)
[20:42:14] *** Joins: sudomann (~sudomann@73.183.118.9)
[20:42:49] *** Quits: carl- (~carl-@185.103.188.130) (Ping timeout: 252 seconds)
[20:43:05] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[20:44:25] <akk> Macuser: It seems to be hard to find data for all the starlinks. If I use "https://celestrak.com/NORAD/elements/starlink.txt" I get 1685 of them. I don't know how many there actually are.
[20:44:42] <akk> Google says 1,740
[20:45:41] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[20:45:47] *** Joins: gusto (~Augustus@109.255.100.54)
[20:46:19] <CrtxReavr> YOu know. . . satellite internet is something that I've been interested in for a long time.
[20:46:53] <CrtxReavr> I know for a long time, the biggest roadblock to implementing it was the fact that broadcast, analog TV used the optimal FM frequencies.
[20:47:25] <CrtxReavr> But they always talked about needing a constellation of satellites in LEO, number between 600 & 800 satellites. . .
[20:47:28] <Macuser> akk I actually believe it was a problem with too much TLE data in file. I gotta split it up
[20:47:41] <Macuser> maybe. gotta run right now
[20:47:43] <CrtxReavr> So I dunno WTF they all the sudden need 1700 satellites.
[20:47:46] *** Quits: bbbbbb (~peppbel@172.58.45.222) (Ping timeout: 252 seconds)
[20:47:51] <SnoopJ> CrtxReavr, that isn't topical in #python
[20:48:04] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[20:48:14] <SnoopJ> except inasmuch as there are some interesting networking problems in there
[20:48:28] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[20:49:28] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:49:39] *** Joins: rjwiii (~mr-rich@idlerpg/player/mr-rich)
[20:50:38] *** Joins: curiosity (uid507362@user/cypris)
[20:51:03] *** Joins: jazzy (~jaziz@user/jaziz)
[20:51:27] <aphysically> jinsun: I received an email from the PEP author last night saying he intends to take a look at it today or tomorrow
[20:52:54] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[20:54:18] *** Quits: imp (~imp@192-141-191-231.alternativaip.net.br) (Read error: Connection reset by peer)
[20:54:25] *** Joins: fanis30 (~fanis30@adsl-234.37.6.0.tellas.gr)
[20:54:25] *** Joins: nomic (~nomic@185.217.117.221)
[20:54:38] *** Joins: imp (~imp@192-141-191-231.alternativaip.net.br)
[20:54:41] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-bd3d-32f8-73a8-cd11.res6.spectrum.com)
[20:56:10] *** Quits: lxwulf (~lxwulf@user/lxwulf) (Quit: Leaving)
[20:57:49] *** Quits: rsx (~dummy@ppp-188-174-132-206.dynamic.mnet-online.de) (Quit: rsx)
[20:58:55] <rendar> so i can use shared memory to share pd.DataFrames across processes? is this a common thing?
[20:59:18] <Staunch> rendar: i think in general that might have been the whole point of shared memory :P
[21:00:27] *** Joins: jdmark (~jdmark@097-102-095-007.res.spectrum.com)
[21:00:47] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 246 seconds)
[21:01:18] <jinsun_> <aphysically> "jinsun: I received an email from..." <- ah good, you were able to summon them
[21:01:25] *** Joins: reset (~reset@user/reset)
[21:01:39] <rendar> there are examples of sharing pd.DataFrames ?
[21:02:12] <SnoopJ> there are, yes
[21:04:01] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[21:04:07] *** Quits: jpic (~jpic@pop.92-184-110-146.mobile.abo.orange.fr) (Remote host closed the connection)
[21:06:44] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[21:07:42] *** Quits: jmiehe (~Thunderbi@user/jmiehe) (Ping timeout: 260 seconds)
[21:08:52] *** Joins: newpy (~newpy@2601:280:4381:1390:d8a2:4368:1fe2:a8e3)
[21:09:36] <adder> SnoopJ, much appreciated!
[21:09:48] *** Joins: sudomann (~sudomann@73.183.118.9)
[21:09:59] *** Joins: techsurvivor (~don@cpe-70-114-183-69.austin.res.rr.com)
[21:13:17] *** Quits: hendursaga (~weechat@user/hendursaga) (Remote host closed the connection)
[21:13:52] *** Joins: hendursaga (~weechat@user/hendursaga)
[21:13:53] *** Quits: p-i- (~Ohmu@mx-ll-223.206.71-4.dynamic.3bb.co.th) (Quit: Leaving...)
[21:15:37] <SnoopJ> adder, did you see jinsun_'s remarks about how pyright gets this correct, as well?
[21:17:54] *** Joins: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it)
[21:18:17] *** Quits: ckdCreations (~ckdCreati@c-24-17-50-149.hsd1.wa.comcast.net) (Ping timeout: 250 seconds)
[21:18:41] *** Joins: ckdCreations (~ckdCreati@147.55.133.139)
[21:18:42] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:19:27] *** Quits: varaindemian (uid73404@id-73404.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[21:20:45] *** Quits: aknot (~aknot@2603:900a:1503:17bb:400:bcc7:5a5b:8460) (Ping timeout: 268 seconds)
[21:23:39] *** Joins: paul424 (~tom@ip-31-0-126-234.multi.internet.cyfrowypolsat.pl)
[21:23:56] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[21:28:08] *** Parts: OnlineCop (~OnlineCop@user/onlinecop) ()
[21:29:43] *** Quits: rindolf (~shlomif@2a0d:6fc2:4bb1:500:6b1e:2524:3d70:36ec) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[21:30:15] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[21:30:41] *** dcaro is now known as dcaro_away
[21:30:51] <aphysically> gonna spend my morning reporting/documenting all the mypyc stuff I found
[21:31:02] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[21:31:06] <aphysically> I have no need or intention of using mypyc really, but it was quite fun to play with
[21:32:58] <aphysically> oh hey look what just landed in mypy https://github.com/python/mypy/commit/df827c9d8926155b5a47d44f02a02b39823975f5 -> so that will unblock TypeAlias use for most people I think
[21:32:58] *** Joins: vitu (~vitu@187.102.250.2)
[21:33:08] <aphysically> not sure if it unblocks it for typeshed, I think they might still be waiting on pytype (?)
[21:34:53] *** Quits: utunbu_ (~utunbu@user/utunbu) (Ping timeout: 264 seconds)
[21:37:28] *** Joins: node1 (~node1@user/node1)
[21:37:49] *** Quits: Sky_Net (~Sky_Net@176.14.213.149) (Quit: Leaving)
[21:38:06] *** Joins: mwichmann (~mats@209-188-119-117.taosnet.com)
[21:38:42] *** Quits: zumba_addict (~zumba_add@c-71-194-58-34.hsd1.il.comcast.net) (Quit: Client closed)
[21:39:15] *** Quits: vitu (~vitu@187.102.250.2) (Quit: Quit)
[21:43:05] *** Quits: Lando-SpacePimp (~Lando-Spa@user/lando-spacepimp) (Quit: They told me they fixed it. I trusted them to fix it. It's not my fault!)
[21:44:38] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[21:45:51] *** Quits: lucad111 (~lucad111@51-148-40-1.dsl.zen.co.uk) (Quit: Leaving)
[21:48:25] *** Joins: magla (~gelignite@55d450ed.access.ecotel.net)
[21:51:01] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 252 seconds)
[21:51:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[21:53:32] *** Joins: fikran (~fikran@user/fikran)
[21:53:34] *** Parts: af (~af@awalgarg.me) (WeeChat 3.2.1)
[21:57:05] *** Joins: Akuli (~Akuli@82-203-164-221.bb.dnainternet.fi)
[21:57:49] <Jackal-o-lantern> given np.array with shape (x, y, 2) ; how can I find indexes x,y of some vector (a, b) if it exists?
[21:58:00] *** Joins: Pickchea (~private@user/pickchea)
[21:58:11] <aphysically> jinsun_: a lot of the mypyc bugs are just a bit silly https://github.com/mypyc/mypyc/issues/896
[21:58:26] *** Quits: semeion (~semeion@user/semeion) (Ping timeout: 245 seconds)
[22:01:33] *** Quits: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945) (Quit: WeeChat 3.3)
[22:01:40] *** Joins: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9)
[22:01:54] *** Joins: ElPresidente (~ElPreside@2605:a601:55be:bb00:b4ee:8306:9589:1945)
[22:04:08] *** Quits: LuxuryMode (uid91005@id-91005.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[22:04:38] *** Quits: audiocat (~audio@2603-8081-1800-1546-4f95-adb2-1cba-e9e9.res6.spectrum.com) (Ping timeout: 260 seconds)
[22:07:36] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 245 seconds)
[22:09:59] *** Joins: Nspace (~Nspace@user/nspace)
[22:10:56] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 245 seconds)
[22:11:17] *** Joins: semeion (~semeion@user/semeion)
[22:11:21] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[22:11:49] <SnoopJ> Jackal-o-lantern, https://bpa.st/DR3Q
[22:12:24] <SnoopJ> additionally, vecidx.sum() will be the number of results (False -> 0, True -> 1 for this operation)
[22:12:41] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 264 seconds)
[22:13:05] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[22:13:13] *** Joins: d3sync (~d3sync@62.1.63.20.dsl.dyn.forthnet.gr)
[22:13:18] *** Joins: Hexmind (~Hexmind@modemcable049.25-131-66.mc.videotron.ca)
[22:13:30] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[22:14:01] <aphysically> I don't think my performance limitations can be solved by mypyc anyway; my only bottlenecks are 1) external subprocess calls to ffmpeg and 2) excessive console output in debug mode
[22:14:56] *** Joins: Julian (~tos9@python/site-packages/Julian)
[22:15:15] <SnoopJ> Jackal-o-lantern, doing it all in one line: `np.argwhere((haystack == (a, b)).all(axis=-1))` will return a shape (Nresults, 2) set of indices which can be used for indexing as well, but I usually prefer to break it apart like I did in the paste.
[22:15:35] <SnoopJ> (frequently those indices can be re-used and it's a lot harder to maintain dense numpy code)
[22:15:59] *** Joins: sudomann (~sudomann@73.183.118.9)
[22:16:12] *** Quits: vimart (~vimart@239.218-30-62.static.virginmediabusiness.co.uk) (Quit: WeeChat 2.8)
[22:16:19] *** Joins: sedeki (~textual@user/sedeki)
[22:17:04] <aphysically> I remember when I was playing around with some classical quantum mechanics stuff in python using numpy and I thought I found a really clever way to fully vectorize a base expansion to calculate some energy levels
[22:17:20] <aphysically> turns out you can run out of 16 GB of RAM real fast
[22:18:13] *** Quits: node1 (~node1@user/node1) (Quit: Leaving)
[22:18:27] *** Joins: Ivii (~Ivyy@2001:a61:13f1:cb01:cd5:f1cc:1dc7:f945)
[22:19:09] <SnoopJ> combinatoric explosion! \o/
[22:20:35] *** Joins: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se)
[22:21:40] *** Joins: thnee (~thnee@h-85-24-144-199.A328.priv.bahnhof.se)
[22:22:56] *** Quits: thiras (~thiras@user/thiras) (Read error: Connection reset by peer)
[22:23:07] *** Quits: sedeki (~textual@user/sedeki) (Quit: Textual IRC Client: www.textualapp.com)
[22:23:26] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[22:23:45] *** Joins: KombuchaKip (~kip@192.252.230.5)
[22:24:16] *** Joins: kenoba (~kenoba@user/kenoba)
[22:25:48] *** Quits: mrcrypto (uid521271@id-521271.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[22:26:39] *** Joins: node1 (~node1@user/node1)
[22:27:56] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:30:08] *** Quits: Ivii (~Ivyy@2001:a61:13f1:cb01:cd5:f1cc:1dc7:f945) (Remote host closed the connection)
[22:30:15] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[22:30:39] *** Joins: kenoba (~kenoba@user/kenoba)
[22:30:56] *** Joins: djhankb (~djhankb@208.113.164.68)
[22:31:03] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 265 seconds)
[22:32:11] *** Joins: waynew (~wayne@user/waynew)
[22:32:34] *** Quits: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[22:32:36] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[22:33:23] *** Joins: d3sync- (~d3sync@146.70.38.48)
[22:33:31] *** Joins: vvdaiwrw (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:34:18] *** Joins: node1 (~node1@user/node1)
[22:35:11] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Remote host closed the connection)
[22:36:04] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[22:36:37] *** Quits: d3sync (~d3sync@62.1.63.20.dsl.dyn.forthnet.gr) (Ping timeout: 252 seconds)
[22:36:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:37:49] *** Quits: sudomann (~sudomann@73.183.118.9) (Ping timeout: 265 seconds)
[22:38:24] *** Joins: a6a45081-2b83 (~aditya@2601:249:4300:1296:88ec:cc73:84d4:1507)
[22:38:38] *** Quits: node1 (~node1@user/node1) (Client Quit)
[22:39:01] *** Joins: node1 (~node1@user/node1)
[22:40:30] *** Quits: node1 (~node1@user/node1) (Remote host closed the connection)
[22:41:24] *** Quits: kenoba (~kenoba@user/kenoba) (Quit: Ping timeout (120 seconds))
[22:41:29] *** Joins: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a)
[22:41:52] *** Joins: kenoba (~kenoba@user/kenoba)
[22:42:09] *** Joins: ub (~Thunderbi@77.119.211.49.wireless.dyn.drei.com)
[22:42:51] *** Joins: tobybl (~tobybl@38.247.200.146.dyn.plus.net)
[22:43:58] *** Joins: sudomann (~sudomann@73.183.118.9)
[22:45:02] *** Quits: visl (visl@user/visl) (Ping timeout: 252 seconds)
[22:45:07] *** Quits: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com) (Quit: Haxxa flies away.)
[22:47:07] *** Quits: tobybl (~tobybl@38.247.200.146.dyn.plus.net) (Ping timeout: 252 seconds)
[22:47:08] *** Joins: thiras (~thiras@user/thiras)
[22:47:17] *** Joins: Haxxa (~Haxxa@122-199-44-5.ip4.superloop.com)
[22:47:29] *** Quits: WantToHelp (~dale@user/wanttohelp) (Ping timeout: 268 seconds)
[22:49:08] *** Joins: vince (~vince@75.127.14.76)
[22:50:08] <SnoopJ> adder, jinsun_ looks like it's a mypy problem, not a problem with typeshed. It is resolved in the latest click (thanks for the heads-up Akuli), so that's another workaround if you're not pinned by another dependency.
[22:51:53] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Remote host closed the connection)
[22:52:22] <Akuli> what makes you think it's a mypy bug?
[22:52:51] <SnoopJ> Akuli, maybe bug isn't the right term, but #5751 along with the fact that pyright doesn't stumble on that annotation.
[22:52:53] <Akuli> it is in the sense that mypy comes with an old version of typeshed's stdlib part, but i wouldn't call it a bug
[22:52:56] *** Joins: genoobie (~genoobie@151.181.90.104)
[22:53:02] *** Parts: genoobie (~genoobie@151.181.90.104) ()
[22:53:17] <Akuli> pyright is released more often and afaik gets the latest typeshed in each new release
[22:53:18] *** Joins: genoobie (~genoobie@151.181.90.104)
[22:53:36] <SnoopJ> ahh, I didn't realize that was how it was divvied up, but that resolves my lingering confusion. Thanks twice, then :)
[22:53:42] <genoobie> Hi all, I'm trying to debug some python code and I don't know python very well.
[22:54:03] *** Parts: blackout69 (~blackout6@net-37-179-183-91.cust.vodafonedsl.it) ()
[22:54:03] <SnoopJ> genoobie, we might be able to help, tell us some more about it
[22:54:15] <Akuli> yeah it's a bit unfortunate that we have a bunch of utilities included in the stdlib part of typeshed, and the third-party stubs rely on them too
[22:54:15] <genoobie> I'll post a pastebin in a sec
[22:54:21] <SnoopJ> Akuli, I am tempted to say it's a bug to just silently fail, at least.
[22:54:54] <Akuli> i have noticed it in the past too, it feels like a design choice to me because i have gotten into situations where mypy clearly knows something is wrong
[22:55:08] <SnoopJ> mm, could be
[22:56:19] *** Quits: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[22:56:50] <genoobie> SnoopJ (or anyone) I'm basically following some internet site and I had to make some changes...
[22:56:51] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:fcdf:2d93:709e:7090) (Quit: Leaving)
[22:57:07] *** Joins: Pickchea (~private@user/pickchea)
[22:57:11] <genoobie> the code is supposed to email me an ip address when the machine boots up
[22:57:16] <newpy> I have a pandas series ['a','b','b','a'] indexed by datetime, and another dataframe with columns ['a','b','c',...] with values in each row (also indexed by datetime). How do I mask the second dataframe using the first?
[22:57:18] <genoobie> The link is here. https://pastebin.com/842izPep
[22:57:19] <infobob> https://bpaste.net/6J4A (repasted for genoobie)
[22:57:24] <dm1>  /topic
[22:57:47] <Akuli> genoobie, might be a good idea to change your password :D
[22:58:10] <genoobie> oh eff.
[22:58:15] <newpy> ie. for the first row, index '2011-01-01' we have 'a' in the first dataframe, so the second dataframe zeros out columns 'b', 'c', etc, in that row
[22:59:20] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:00:02] *** Joins: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[23:00:57] *** Joins: drdesquire_ (~drlp@2601:4c0:4180:3750:a71d:815c:bb15:7d29)
[23:01:13] <Akuli> genoobie, one problem is session.quit which should be session.quit() with parentheses https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.quit
[23:01:15] *** Quits: FFY00_ (~FFY00@archlinux/trusteduser/ffy00) (Read error: Connection reset by peer)
[23:01:31] *** Joins: FFY00_ (~FFY00@archlinux/trusteduser/ffy00)
[23:01:53] <Akuli> i think you also need to change gmail's settings to make this work, at least i had to change something when i wanted to use an email client with gmail
[23:02:30] <Akuli> obviously sendTo should be changed too :)
[23:02:58] *** Quits: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com) (Ping timeout: 260 seconds)
[23:03:05] *** Joins: d3sync (~d3sync@62.1.63.20.dsl.dyn.forthnet.gr)
[23:03:06] <SnoopJ> it would also help to know what trouble you're trying to debug (I would recommend solving the "when the machine boots up" part separately, make sure the script works when invoked manually first)
[23:04:25] *** dm1 is now known as vlt
[23:04:52] *** Quits: darksun (~darksun@user/darksun) (Remote host closed the connection)
[23:05:26] *** Joins: Roey (~Roey@user/Roey)
[23:05:40] <genoobie> brb...I have to change my password...
[23:06:39] <be3uykpy> ok
[23:06:50] <InPhase> genoobie: Oops.
[23:06:52] *** Quits: d3sync- (~d3sync@146.70.38.48) (Ping timeout: 252 seconds)
[23:07:38] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 260 seconds)
[23:07:40] <genoobie> yeah, like seriously...jaysus
[23:07:43] <InPhase> genoobie: On the plus side, it was a very nice password for only 8 characters.
[23:07:57] <genoobie> Yeah, I hate to give it up...
[23:08:08] <genoobie> oh well
[23:08:17] <InPhase> Maybe we should just all start using that password.
[23:08:40] <genoobie> It was a good one, right?
[23:08:56] <genoobie> Thank you, I rather liked it.
[23:09:03] <genoobie> but here's my issue
[23:09:22] *** Joins: bilb_ono (~alexmarsh@ip184-189-224-55.sb.sd.cox.net)
[23:09:49] <bilb_ono> is there a way to | grep for a certain log from only one of my logging modules?
[23:09:52] *** Quits: dvx (~dvx@185.63.97.64) (Remote host closed the connection)
[23:09:54] <bilb_ono> so that I dont have to see all the logs at once
[23:10:00] <genoobie> The site that I was following was using ssmtp on raspbian.  I need to use msmtp instead (as ssmtp has been deprecated)
[23:10:18] <genoobie> so I have the code, but I get error(s) when I run it
[23:10:20] *** Quits: ericzolf (~ericzolf@2a02:8070:a298:29f0::31a) (Ping timeout: 260 seconds)
[23:10:27] <bilb_ono> oh I got it
[23:10:34] *** Joins: iomari891 (~iomari891@105.112.138.38)
[23:11:06] <energizer> bilb_ono: i have always wondered what your nick means
[23:11:21] <vlt> genoobie: That Emailer class directly connects to gmail.
[23:11:27] <genoobie> So this is the error AttributeError: 'module' object has no attribute 'SMTP'
[23:11:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[23:11:37] <bilb_ono> energizer: if you say it out loud what it does it sound like.
[23:11:49] <bilb_ono> bill bobo
[23:11:52] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-25-65-93-17-96.dsl.bell.ca) (Ping timeout: 252 seconds)
[23:11:56] <KirkMcDonald> A mashup of Bilbo and Yoko Ono.
[23:12:02] <bilb_ono> but the joke is that the first name is bilb and not bill
[23:12:16] <Wooble> genoobie: did you name your file smtplib.py?
[23:12:29] <genoobie> wooble, no why?
[23:12:31] <vlt> genoobie: With the full traceback it would be much easier for us to help you.
[23:12:31] <energizer> bilb_ono: i see
[23:12:53] <bilb_ono> also if you google it youll see its from tim and eric show
[23:13:22] <genoobie> This is the full traceback https://pastebin.com/wkyV5ace
[23:13:23] <infobob> https://bpaste.net/EDWQ (repasted for genoobie)
[23:13:55] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:14:23] *** Joins: Nspace (~Nspace@user/nspace)
[23:14:41] <vlt> genoobie: Line 6
[23:15:18] <vlt> genoobie: of your traceback imports an email.py from your home dir.
[23:15:20] <Wooble> genoobie: oof, also don't name your file email.py because smtplib imports the stdlib email module and you shadowed it.
[23:17:02] <genoobie> but remember I had to uninstall ssmtp and install msmtp
[23:18:01] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 245 seconds)
[23:18:01] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[23:18:07] <genoobie> vlt, so do I need to put the file in a different directory?
[23:18:40] <Wooble> genoobie: you can't run a file named email.py that uses smtplib.
[23:18:58] <genoobie> Wooble, I renamed it.
[23:19:01] <Wooble> name your file something else (and delete __pycache__/email.pyc if it exists)
[23:19:07] <genoobie> the rrors did change
[23:21:11] <genoobie> I've got this traceback now.
[23:21:14] <genoobie> https://pastebin.com/7kBuymiV
[23:21:15] <infobob> https://bpaste.net/56TQ (repasted for genoobie)
[23:21:23] <bilb_ono> the joke usually works by hearing the name first. I guess picking it as a username automatically ruins that haha I just realized
[23:21:32] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[23:22:03] *** Joins: arinov (~arinov@188.58.26.189)
[23:22:09] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:22:10] *** Quits: Nspace (~Nspace@user/nspace) (Quit: Nspace)
[23:22:13] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 250 seconds)
[23:25:01] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[23:25:01] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:25:12] <genoobie> wait, holycrap
[23:27:06] *** Joins: irrgit (~irrgit@192.241.175.183)
[23:28:16] <genoobie> I think it kinda worked....
[23:28:26] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[23:28:48] *** Quits: l4yer (~l4yer@159.48.55.9) (Ping timeout: 268 seconds)
[23:28:51] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:29:22] <genoobie> bbl...thank you all soooooo much!
[23:29:38] *** Joins: djapo (~archangel@user/djapo)
[23:29:42] *** Quits: genoobie (~genoobie@151.181.90.104) (Quit: Client closed)
[23:30:01] *** Quits: Deneb (~johnch@86.111.189.80.dyn.plus.net) (Quit: Leaving)
[23:30:09] *** Quits: jazzy (~jaziz@user/jaziz) (Ping timeout: 265 seconds)
[23:30:10] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[23:30:35] *** Quits: djhankb (~djhankb@208.113.164.68) (Read error: Connection reset by peer)
[23:30:36] *** Joins: stockholm (~Andreas@p200300d2c7080e00512e7354cbc8db88.dip0.t-ipconnect.de)
[23:30:45] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:31:06] *** Joins: djhankb (~djhankb@208.113.164.68)
[23:31:16] *** Joins: vimart (~vimart@85.255.233.29)
[23:31:46] *** Joins: skali (~skali@178.214.251.8)
[23:32:17] *** Joins: l4yer (~l4yer@213.232.87.181)
[23:32:37] <enrh> Just starting out with pydantic, and adding validation to my class. I have a paramter with annotation Optional[Union[str, PathLike]] but RuntimeError: no validator found for <class 'os.PathLike'>, see `arbitrary_types_allowed` in Config. Can I create this?
[23:32:48] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[23:33:13] <enrh> I don't like the idea of arbitrary_types_allowed but I might not understand it.
[23:36:30] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:48f3:3484:87aa:1496)
[23:37:09] *** Quits: Mechanismus (~LabMonkey@2602:306:cf62:e270:48f3:3484:87aa:1496) (Client Quit)
[23:37:33] *** Joins: Mechanismus (~LabMonkey@2602:306:cf62:e270:48f3:3484:87aa:1496)
[23:40:28] *** Quits: jetchisel (jetchisel@user/jetchisel) (Ping timeout: 252 seconds)
[23:42:15] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[23:42:32] *** Joins: jetchisel (jetchisel@user/jetchisel)
[23:43:06] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[23:44:11] *** Joins: jazzy (~jaziz@user/jaziz)
[23:44:33] *** Quits: kyooo (~kyooo@2a02:a31d:a13c:5600:559d:f748:905d:cda9) (Quit: Leaving)
[23:46:32] *** jazzy is now known as jazz-o-lantern
[23:47:40] *** Quits: Julian (~tos9@python/site-packages/Julian) (Ping timeout: 260 seconds)
[23:49:58] *** Quits: skali (~skali@178.214.251.8) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:50:36] <enrh> Just found this https://github.com/samuelcolvin/pydantic/issues/2178
[23:52:58] <enrh> No workaround, so is arbitrary_types_allowed my only option? Does that mean validators even run for the other parameters?
[23:53:07] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 252 seconds)
[23:53:10] *** Quits: Mattiaslndstrm (~Mattiasln@c213-103-137-235.bredband.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:53:27] *** Joins: Barones (~Barones@2804:214:8191:1649:265:f37c:e28a:c70b)
[23:53:48] *** Joins: Julian (~tos9@python/site-packages/Julian)
[23:54:28] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[23:56:22] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
