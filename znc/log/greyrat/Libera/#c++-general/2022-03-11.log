[00:00:48] <udet> well, I meant it in less profound way. when you copy a set element by element new sets allocation needs to adapt with each element. the vector you can preallocate
[00:02:01] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:02:03] <udet> however I just realized I broke my threadsafety so I actually have a bigger problem yet than my philosophical one from before :-(
[00:04:01] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[00:05:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[00:07:07] <rpav> also annoyingly you break pointers when you change the vector, so
[00:11:34] *** Joins: paul424 (~tom@ip-5-172-235-58.multi.internet.cyfrowypolsat.pl)
[00:12:58] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:161)
[00:13:02] *** Joins: Guest5436 (~Guest54@2620:10d:c092:400::4:161)
[00:20:13] <rpav> { auto x = 1; { auto ùóë = 2; cout << x + ùóë } } // ü§î
[00:20:13] <geordi> error: expected ';' before '}' token (fix known)
[00:20:24] <rpav> { auto x = 1; { auto ùóë = 2; cout << x + ùóë; } } // ü§î
[00:20:25] <geordi> 3
[00:20:36] <Guest54> hey can someone help me make sense of this sql error? http://sqlfiddle.com/#!9/db51bd/16 It sayd duplicate column name "check_id" but I don't really understand - I'm just trying to select everything from a subqery
[00:20:41] <rpav> this is what i get for not copy-pasting the whole line
[00:21:25] <rpav> Guest54: not that i don't like messing around with SQL now and again despite it being a bit off-topic, but really you should get a SQL book at this point and/or more useful forum ;)
[00:21:53] <PJBoy> could you phrase the question in terms of C++?
[00:22:07] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[00:22:17] <Guest54> ok fair enough:) ¬†I tried posting on #sql but no one answers, and I'm not allowed on #mysql for some reason (I think I need to verify)
[00:22:26] <Guest54> no worries though
[00:23:27] <PJBoy> man my SQL sucks apparently
[00:23:32] <PJBoy> I don't see the issue
[00:23:41] <rpav> probably it's what it says
[00:23:41] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[00:25:28] <PJBoy> there's the check_id in health_checks and the check_id in tags, and they get joined on check_id
[00:25:43] <PJBoy> is that not enough to deduplicate?
[00:26:27] <Guest54> ahh dang ok
[00:26:30] <rpav> no the table produced is what you're selecting from, and the columns don't get specially named
[00:26:49] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[00:27:10] <PJBoy> I seem to remember joining being pretty simple and not needing special treatment to deduplicate
[00:27:26] <rpav> http://sqlfiddle.com/#!9/db51bd/28/0
[00:27:38] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[00:27:48] <PJBoy> manually specifying the columns :/
[00:27:51] <rpav> PJBoy: none of that is relevant, the subselect is fine, the problem is it produces a table with two "check_id" columns at least in mysql
[00:28:12] *** Quits: jsbach (~jsbach@62.218.23.190) (Ping timeout: 240 seconds)
[00:28:57] <rpav> really you _should_ usually specify all columns unless you very specifically are just screwing around from a repl
[00:29:08] <rpav> otherwise you _will_ get fucked someday when a table gets changed
[00:29:31] <PJBoy> I'm looking back at previous SQL snippets I've written
[00:29:38] <PJBoy> and that seems to be 100% accurate
[00:29:48] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 240 seconds)
[00:30:20] <PJBoy> there's natural join at least http://sqlfiddle.com/#!9/db51bd/29
[00:30:46] <rpav> did i mention i was a bit surprised that someone didn't find it profitable to make specialized data processing hardware, or did i just think that
[00:30:47] <PJBoy> ofc that would join on *all* columns that have the same name
[00:31:10] <rpav> like imagine a GPU that can do joins, and you can compile "query shaders" ;)
[00:31:45] *** Quits: paul424 (~tom@ip-5-172-235-58.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[00:31:56] <rpav> or really, you compile parameterized SQL to blobs you can upload to the SqlPU
[00:32:50] <rpav> otoh i guess while it's not like there isn't _big_ money in data, at the same time, it's a small _market_
[00:33:12] <Guest54> thanks again guys, I really appreciate all the help:) ¬†See ya later (when I get my error lol - just kidding)
[00:33:31] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:161) (Quit: Client closed)
[00:34:04] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 250 seconds)
[00:43:29] *** Joins: Tokamak (~Tokamak@172.58.188.132)
[00:46:14] *** Joins: andreasbuhr (~quassel@p548dd8b0.dip0.t-ipconnect.de)
[00:47:00] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[00:47:28] *** Joins: immibis (~hexchat@62.156.144.218)
[00:53:19] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:01:21] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:02:35] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:04:44] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[01:06:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[01:07:16] *** Quits: andreasbuhr (~quassel@p548dd8b0.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:08:25] *** Joins: teepee (~teepee@openscad/teepee)
[01:18:25] *** Quits: magla (~gelignite@55d4843f.access.ecotel.net) (Quit: Stay safe!)
[01:18:44] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[01:21:48] *** Quits: robod34 (Username@79.113.243.73) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:33] <CarloWood> Say I have an integer "range".  What would I call a variable representing one point in that range?
[01:23:02] <rpav> `int i;`
[01:26:06] <CarloWood> Not very descriptive.
[01:26:33] <PJBoy> seems appropriate for something as general as a "range"
[01:26:38] <CarloWood> i stands for integer - so that doesn't describe that it is sort of a "loop variable" that is running over a given range.
[01:27:15] <PJBoy> `i` is the most archetypical loop variable ever ever
[01:27:27] *** Quits: Guest5436 (~Guest54@2620:10d:c092:400::4:161) (Ping timeout: 256 seconds)
[01:27:28] <PJBoy> followed by `n`
[01:27:29] <CarloWood> lol yeah
[01:27:38] <PJBoy> and `k` in maths
[01:29:19] <PJBoy> so if you had something like `void f(std::ranges::range auto&& data)` and you were looping over its indices
[01:29:29] <PJBoy> I would be calling that variable `i_data`
[01:30:43] <Alipha> rpav: but if the namespace is really for your project, then you wouldn't be typing my_project_name:: really at all, because all your code would already be in the namespace
[01:31:11] <rpav> i for _index_ actually
[01:31:12] <PJBoy> I assumed he meant related project namespaces
[01:31:39] <rpav> Alipha: yeah that's what i meant by the whatever_project line
[01:31:53] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:34:09] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[01:34:24] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[01:34:27] <Alipha> CarloWood: what kind of range? point or element or x may make sense depending upon the context
[01:36:01] <CarloWood> I need a name for the type mostly.  It's a range that will be iterated over - so I'm contemplating 'iterator' :P
[01:36:05] <CarloWood>   using iterator = int;
[01:36:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:37:20] <Alipha> That's an element, not an iterator?
[01:37:33] <Alipha> Or value (or value_type)
[01:37:43] <Alipha> Unless you're talking about an index
[01:39:10] *** Quits: rg (~r-g@51-159-55-86.rev.poneytelecom.eu) (Read error: Connection reset by peer)
[01:39:15] <CarloWood> It's not an index into an array or vector; but something that defines the associated, underlying characteristic that I want to iterate over.
[01:39:30] <PJBoy> index_t
[01:39:54] <PJBoy> (I actually use this)
[01:40:52] <CarloWood> Say, I want to run over 10 different shaders and the range is in [0, 10>. I guess then it is an index. But it could also be the shininess of a material between 0 and 1 in 10 steps. Then I'd just calculate the shininess by dividing the iterator value by 10.
[01:42:21] <CarloWood> Hmmmmm
[01:42:30] <Alipha> Calling it an iterator and it not supporting unary * would cause great confusion
[01:42:32] <CarloWood> Maaaaaybe index is what it is in most cases :/
[01:42:57] <CarloWood> Oh, you're right - the C++ meaning of iterator is different :/
[01:43:02] <Alipha> position_type?
[01:43:08] <CarloWood> Ok, I'll use index_type
[01:43:14] <CarloWood> Or that
[01:43:19] <CarloWood> Position is a good one!
[01:43:28] <CarloWood> position in the range.
[01:43:29] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[01:43:36] <CarloWood> ^ the
[01:43:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:47] *** ChanServ sets mode: +v npaperbot
[01:44:32] <CarloWood> but I'm gonna go with index
[01:45:15] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[01:45:54] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[01:46:34] *** Joins: johnny (~johnny@user/johnny)
[01:54:03] *** Joins: markong (~kvirc@213.146.188.203)
[01:58:19] <Alipha> CarloWood: index implies it's a container of elements though. I like position better
[02:01:12] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[02:02:56] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:06:18] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[02:09:30] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[02:15:13] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[02:16:59] *** Joins: johnny (~johnny@user/johnny)
[02:18:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:21:06] <jbalint> is it possible to capture by move in a lambda?
[02:21:12] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:e48f:b916:ea95:460d) (Quit: Quit)
[02:22:41] <PJBoy> you can manually move into capture
[02:23:07] <PJBoy> `[a = move(a), b = move(b)]() { ... }` for example
[02:23:57] <jbalint> oh cool. perfect. thanks PJBoy
[02:24:00] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[02:24:17] <PJBoy> :)
[02:25:24] <kalven> PJBoy perfection
[02:25:50] <PJBoy> hopefully more perfect than perfect forwarding
[02:26:04] <PJBoy> and more uniform than uniform initialisation
[02:26:12] <jbalint> then i can move out of there with std::move(a)?
[02:26:24] <PJBoy> yeah sure
[02:27:26] <jbalint> oh sh!t... actually calling the lambda woudl help... :)
[02:28:28] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 250 seconds)
[02:29:28] <jbalint> do we get return value optimization from lambdas?
[02:29:54] <PJBoy> yeah
[02:30:07] <jbalint> do i not need to move out of the lambda?
[02:30:16] <PJBoy> { mutex m = [] { return mutex(); }(); }
[02:30:17] <geordi>  
[02:30:25] <PJBoy> notice how mutex is uncopyable
[02:30:29] <PJBoy> and also immovable
[02:30:46] <jbalint> i;m currently returning through a ternary operator
[02:31:10] <PJBoy> all the usual function returning rules apply
[02:31:25] <PJBoy> NRVO, RVO, implicit move
[02:32:07] *** Joins: Elbeeo (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[02:32:07] *** Quits: Elbeeo (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[02:32:07] *** Joins: Elbeeo (~asskoala@user/asskoala)
[02:32:11] <jbalint> ok, let me back up a bit
[02:32:13] *** Quits: AssKoala (~asskoala@user/asskoala) (Read error: Connection reset by peer)
[02:32:44] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[02:33:27] *** Elbeeo is now known as AssKoala
[02:34:30] *** Quits: Deneb (~johnch@128.82.159.143.dyn.plus.net) (Quit: Leaving)
[02:34:41] <jbalint> /usr/include/c++/11.2.0/bits/stl_uninitialized.h:138:72: error: static assertion failed: result type must be constructible from value type of input range 138 |       static_assert(is_constructible<_ValueType2, decltype(*__first)>::value,
[02:34:50] <jbalint> sorry it line breaks after "range"
[02:35:23] <jbalint> I'm doing: return std::move(x); .. lambda has only that return (single return path) and x is moved in to the lambda. return declare as "auto'
[02:35:24] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:19a5:18c2:1f3c:54f3) (Ping timeout: 252 seconds)
[02:35:26] <kalven> code would be nice
[02:35:34] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:35:56] <jbalint> let me try to get a reproducer in wandbox. brb
[02:36:21] *** Joins: johnny (~johnny@user/johnny)
[02:40:39] <jbalint> hrm, this is the closest I can get on wandbox, but my code is failing on line 22 with the above mentioned error. https://wandbox.org/permlink/MjZHDnklHj1sSChX
[02:43:48] <PJBoy> that assertion sounds like that one you get when you use a vector of immovable type
[02:44:07] <PJBoy> { vector<mutex> v; v.resize(1); }
[02:44:08] <geordi> error: static assertion failed: result type must be constructible from input type
[02:44:44] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:44:48] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[02:44:53] <jbalint> let me check the class
[02:45:39] <jbalint> why wouldnt it complain when I move _into_ the lambda?
[02:46:14] <PJBoy> you can do some limited set of operations with a vector of immovable type
[02:46:19] <PJBoy> such as moving that vector
[02:46:35] <PJBoy> resizing somehow is the usual issue
[02:46:46] <Alipha> jbalint: a lambda's captures are const unless you specify the lambda as mutable. and so `return std::move(x);` is actually trying to do a copy because x is a `const vector<X>`
[02:47:04] <PJBoy> oh!
[02:47:08] <Alipha> `auto chosen = [x = std::move(v1), y = std::move(v2)]() mutable {`
[02:47:12] <PJBoy> I would have never thought of that
[02:47:34] <Alipha> it's kinda annoying that std::move just silently copies
[02:47:44] <PJBoy> ok default const might not be my friend anymore
[02:48:00] <Alipha> namespace std { template<typename T> void move(const T&) = delete; } // :-)
[02:48:13] <PJBoy> yeah that too >:(
[02:49:16] <jbalint> how would I reproduce the error in the wandbox example?
[02:49:24] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:49:37] <Alipha> PJBoy: it works! https://wandbox.org/permlink/b9zjF3bUVKT78suu
[02:49:50] <Alipha> completely UB to overload std::move, but meh
[02:50:18] <Alipha> jbalint: did you try adding the mutable keyword in your actual code to see if that fixes it?
[02:50:37] <jbalint> I think this is what's happening https://wandbox.org/permlink/IM4CXiAtWY2pF3oi
[02:51:05] <jbalint> Alipha: yeah, I think that works, and explanation makes sense. thanks. was just trying to understand the gap I was missing when trying to reproduce
[02:51:21] <jbalint> (this is a large-ish codebase with generated code... :-\)
[02:54:45] <jbalint> I'm curious why i'm getting this error when my class doesn't delete the copy constructor
[03:01:31] *** Joins: LBV_User (~leonardo@45.183.248.98)
[03:03:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:07:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[03:22:42] *** Quits: proller (~p@2a02:6b8:b081:b510::1:d) (Ping timeout: 252 seconds)
[03:24:51] <PJBoy> the copy ctor is implicitly deleted in come circumstances
[03:25:06] <PJBoy> generally a non copyable data member or base class
[03:25:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:25:17] <PJBoy> or declaring a move ctor
[03:26:28] <jbalint> ah it's a data member. thanks...
[03:29:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[03:30:59] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[03:36:25] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 256 seconds)
[03:36:50] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[03:37:54] <cq-work> What is the point of using both header guards and pragma once
[03:38:07] <cq-work> I see that a lot in boost for some reason...
[03:38:27] <PJBoy> header guards are considered more standard and reliable
[03:38:39] <PJBoy> but then pragma once is faster
[03:38:51] <cq-work> Is pragma once faster? I find that hard to believe.
[03:39:01] <PJBoy> yeah, you see a pragma once and you're done
[03:39:21] <PJBoy> otherwise you search the whole header looking for the #endif of the #ifndef GUARD
[03:39:28] *** Joins: proller (~p@2a02:6b8:b081:6415::1:4)
[03:43:02] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:cc2e:1c42:2403:ca71) (Quit: My MacBook has gone to sleep. ZZZzzz‚Ä¶)
[03:44:03] <cq-work> They're about similar for clang, gcc is actually slower with pragma once it turns out
[03:44:12] <cq-work> How does that work...
[03:44:36] <PJBoy> I cast doubt
[03:44:44] <Friithian> at what level?
[03:44:53] <cq-work> https://gcc.gnu.org/bugzilla/show_bug.cgi?id=58770
[03:45:00] <Friithian> alternate response: counterspell
[03:45:13] <cq-work> Like in gcc7, it's noticeably slower.
[03:45:22] <cq-work> I don't have a more modern compiler to test with locally
[03:45:44] <Friithian> gcc7 is the most modern compiler you have?
[03:46:32] <cq-work> On this computer, yeah, unless I enable some extra repos. I could get something setup in docker probably
[03:47:16] <cq-work> They reference this back from 2011 which I imagine has changed to some degree https://tinodidriksen.com/2011/08/cpp-include-speed/
[03:47:46] <Friithian> wonder if that'll ping Tino
[03:52:59] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[03:53:25] <Alipha> Maybe gcc determines if the file is the same by hashing it :-)
[03:53:56] *** Joins: xcm (~xcm@user/xcm)
[04:04:26] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:06:50] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:06:55] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:07:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:09:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:11:38] *** Joins: ferdna (~ferdna@user/ferdna)
[04:24:40] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:29:11] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:30:42] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 272 seconds)
[04:32:03] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[04:33:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:38:50] *** Joins: v4mp (~v4mp@user/v4mp)
[04:40:20] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:45:11] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:48:59] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:49:15] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:49:24] *** Quits: proller (~p@2a02:6b8:b081:6415::1:4) (Ping timeout: 240 seconds)
[04:50:28] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[04:53:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[04:53:14] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:53:32] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:04:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:06:48] *** Quits: LBV_User (~leonardo@45.183.248.98) (Quit: Konversation terminated!)
[05:07:25] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:08:12] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:20:23] *** Quits: undephin3d (~undephin3@158.181.73.150) (Ping timeout: 252 seconds)
[05:20:30] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:20:44] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[05:20:56] *** Quits: emerent (~quassel@p200300cd5743c375ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[05:21:17] *** Joins: emerent (~quassel@p200300cd5743c364ba27ebfffed28a59.dip0.t-ipconnect.de)
[05:23:45] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[05:24:37] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:26:59] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[05:29:25] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:30:37] <malloy> why there's no official implement of spinlock?
[05:32:19] <kalven> malloy: there's std::atomic::wait
[05:37:34] *** Joins: thad_the_man_2 (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net)
[05:38:34] *** Quits: thad_the_man (~tlophd_be@99-104-67-23.lightspeed.cicril.sbcglobal.net) (Remote host closed the connection)
[05:39:49] *** Joins: ferdna (~ferdna@user/ferdna)
[05:40:04] <malloy> kalven: no, waiting thread will sleep quickly if the condition not satified, won't it?
[05:42:03] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[05:43:25] *** Quits: ondrej008 (uid311009@id-311009.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[05:43:33] <malloy> but c++ has timed_mutex
[05:43:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:43:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:43:48] *** ChanServ sets mode: +v npaperbot
[05:46:15] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[05:55:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:57:59] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14) (Remote host closed the connection)
[05:59:16] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:911e:d533:e490:181e)
[06:05:32] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:09:30] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[06:15:36] *** Joins: Inline__ (~Inline@p200300cd470c47009a06da4df68ae634.dip0.t-ipconnect.de)
[06:15:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[06:16:06] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[06:18:16] *** Quits: Inline (~Inline@p200300cd470c9c002556fbf58fa37daf.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[06:19:40] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:21:04] *** Joins: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43)
[06:23:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:26:06] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[06:31:11] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:58:01] *** Joins: tronwizard (~tronwizar@static-74-109-121-138.phlapa.fios.verizon.net)
[06:58:25] *** Parts: tronwizard (~tronwizar@static-74-109-121-138.phlapa.fios.verizon.net) ()
[07:03:17] *** Quits: HvszrStykp (~X@81.171.62.82) (Ping timeout: 240 seconds)
[07:06:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:09:51] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[07:13:31] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:14:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:17:00] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[07:17:31] *** Joins: adeliktas4 (~adeliktas@i59F52E53.versanet.de)
[07:18:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[07:19:25] *** Quits: adeliktas (~adeliktas@i59F526C9.versanet.de) (Ping timeout: 240 seconds)
[07:19:25] *** adeliktas4 is now known as adeliktas
[07:24:01] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[07:46:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[07:47:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:47:22] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[07:50:16] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[08:06:28] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:10:21] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[08:10:54] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:14:22] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:27:12] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[08:30:04] *** Quits: emerent (~quassel@p200300cd5743c364ba27ebfffed28a59.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[08:31:52] *** Joins: emerent (~quassel@p200300cd5743c364ba27ebfffed28a59.dip0.t-ipconnect.de)
[08:31:53] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:06:57] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:08:45] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[09:10:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[09:23:32] *** Joins: ravan (~ravan@user/ravan)
[09:34:32] *** Quits: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[09:34:48] *** Joins: kenan-office (~kenanmara@user/kenanmarasli)
[09:35:11] *** Joins: t3nj1n (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[09:35:16] *** Joins: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net)
[09:35:24] *** Quits: t3nj1n_ (~t3nj1n@pool-173-52-219-149.nycmny.fios.verizon.net) (Remote host closed the connection)
[09:43:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:43:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:43:48] *** ChanServ sets mode: +v npaperbot
[09:44:17] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Ping timeout: 240 seconds)
[09:48:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:53:23] <TinoDidriksen> Friithian, both the link and "Tino" pings me. Doesn't even have to be a word; typos in -tion words will ping. But cq-work, the point of my post was that there is no noticable speed difference between the methods. For 10000 files there's ~1 second difference, which means 0.001 seconds per file. Nobody cares about that.
[09:54:56] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[10:01:21] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:01:39] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[10:01:53] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[10:07:38] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:09:40] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[10:10:10] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:11:22] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[10:12:06] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[10:12:35] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:14:26] *** Joins: Donno (~donno@58.84.206.182)
[10:14:46] *** Joins: txtsd (~txtsd@user/txtsd)
[10:16:17] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 240 seconds)
[10:19:13] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14)
[10:22:17] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:911e:d533:e490:181e) (Ping timeout: 240 seconds)
[10:22:58] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:26:37] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[10:27:59] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[10:31:55] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[10:31:59] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[10:32:35] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:32:39] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[10:35:12] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[10:37:45] *** Quits: nshire_ (~nshire@47.146.41.156) (Read error: Connection reset by peer)
[10:59:01] *** Joins: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at)
[11:06:43] *** gentooclimax is now known as climax
[11:06:54] *** climax is now known as gentooclimax
[11:08:20] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:11:41] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[11:12:43] <ville> tokenizing is hardly the bottle neck on a modern machine with ssd
[11:13:14] <ville> and if you just tokenized a file moments ago it's likely cached by your os anyways
[11:15:07] *** Quits: c4017w_ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[11:15:25] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[11:16:42] *** Quits: jsbach (~jsbach@81-223-39-134.static.upcbusiness.at) (Ping timeout: 250 seconds)
[11:16:55] *** gentooclimax is now known as climax
[11:17:48] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 240 seconds)
[11:17:52] *** RandomRead3r is now known as RandomReader
[11:39:48] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Ping timeout: 240 seconds)
[11:40:47] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[11:44:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[11:44:59] *** Joins: manjaro-user (~manjaro-u@208.98.223.91)
[11:51:49] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:53:33] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[11:54:48] *** Joins: paul424 (~tom@ip-5-172-239-42.multi.internet.cyfrowypolsat.pl)
[11:55:43] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14) (Remote host closed the connection)
[11:55:47] *** Quits: blackbeard420 (~blackbear@45.33.85.133) (Quit: ZNC 1.8.2 - https://znc.in)
[11:55:56] *** Joins: blackbeard420 (~blackbear@45.33.85.133)
[11:56:05] *** Joins: jsbach (~jsbach@62.218.23.190)
[11:56:18] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:519b:4fb9:c7e3:562)
[11:56:31] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ad44:e402:1395:21e0)
[11:58:05] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:9c53:fc57:5d12:7033)
[12:05:16] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:10:17] *** climax is now known as gentooclimax
[12:11:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:18:33] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[12:18:57] *** Joins: Guest9420 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr)
[12:19:20] *** Joins: pulse (~pulse@user/pulse)
[12:25:30] *** Joins: robod34 (~Username@79.113.243.73)
[12:25:47] <mort> huh why isn't there a deduction guide for std::unique_ptr's ctor which lets you do `std::unique_ptr(some_pointer)`
[12:26:10] <Guest9420> Hello, I made a multidimensional array template class MultiArray<typename T, size_t... dimensions> (e.g. MultiArray MultiArray<int, 1, 2, 3>). Easy using parameter packs, but now I'm trying to create an access method that takes sizeof... (pack) parameters of type T and I'm struggling. Any idea how?
[12:28:09] *** Joins: DSpider (~DSpider@82.79.237.2)
[12:28:35] <ville> mort: what version of c++ are you using?
[12:29:00] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[12:30:33] <ville> ...or perhaps it's not version-related
[12:32:26] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[12:32:42] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[12:33:00] <ville> it seems they've done something deliberate there to disable ctad?
[12:34:43] <TinoDidriksen> Probably for the best? That could get real confusing.
[12:34:53] <mort> ville: I'm not disabling CTAD I think? My flags are pretty boring, just a few -I flags and -std=c++17
[12:34:58] <mort> tried with C++2a as well
[12:35:33] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:35:48] <ville> TinoDidriksen: the commitee's "think of the children"-level paranoia around fancy pointer safety is just dumb
[12:37:43] <mort> ah nvm I thought you wrote "you" but you wrote "they"
[12:37:50] <ville> mort: i mean if you were to write the dumb version it'd get ctad
[12:38:01] <mort> right
[12:38:54] <mort> I don't understand how someone could think `auto x = unique_ptr(CreateFoo())` is less safe than `auto x = unique_ptr<Foo>(CreateFoo())`
[12:39:13] <TinoDidriksen> Aha, "There is no class template argument deduction from pointer type because it is impossible to distinguish a pointer obtained from array and non-array forms of new (since C++17)"
[12:39:16] <mort> (obviously constructor functions really ought to be returning a unique_ptr, but sometimes you have to use libraries written by google)
[12:40:20] <TinoDidriksen> So that makes sense. T* is ambiguous, so don't support T*.
[12:40:21] <Guest9420> In fine, I'm using a second parameter pack for the method and using static_assert(sizeof...(pack1) == sizeof...(pack2), "Error")
[12:40:30] <Guest9420> Don't know if that's optimal, though
[12:41:54] *** Joins: andreasbuhr (~quassel@p549db66c.dip0.t-ipconnect.de)
[12:44:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:45:01] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:50:18] <xkoncek> i believe a span of fixed size should be constructible from a single pointer
[12:51:35] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[12:53:25] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:53:48] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[13:00:46] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[13:05:06] <ville> TinoDidriksen: "think of the children"-level
[13:05:29] <TinoDidriksen> What would you have it do? Only support non-array T*?
[13:06:37] <ville> sure
[13:08:51] <RandomReader> ville - haven't you generally been *against* implicit conversions?
[13:09:47] <ville> i'd say on case-by-case basis. haven't kept a total tally whether i am against or for
[13:10:57] <ville> i rather base my opinion on how i observe it to play out in practice, and my fancy pointers do differ from the standard ones in various ways in this regard
[13:11:51] *** Joins: plastico (~plastico@neomutt/plastico)
[13:12:59] <RandomReader> Guest9420 - I think that's pretty much the technique, whether you do it in static_assert or SFINAE form
[13:17:35] <RandomReader> (if it's not clear how to SFINAE it, one option is to use std::enable_if for the return type along with trailing-return-type syntax)
[13:32:02] *** Joins: undephin3d (~undephin3@158.181.73.150)
[13:43:28] *** Quits: malloy (~jimery@116.30.221.173) (Quit: WeeChat 3.0)
[13:43:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:43:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:43:49] *** ChanServ sets mode: +v npaperbot
[13:44:03] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14)
[13:44:06] <m_ben> static_assert() will give you a cleaner error message as opposed to sfinae
[13:46:57] *** Quits: Raziel (~Raziel@user/raziel) (Ping timeout: 256 seconds)
[13:47:30] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:519b:4fb9:c7e3:562) (Ping timeout: 250 seconds)
[13:48:20] *** Joins: ivii (~ivan@user/ivii)
[13:51:46] *** Quits: Terminus (~null@user/terminus) (Quit: ZNC 1.8.2 - https://znc.in)
[13:55:23] *** Joins: Raziel (~Raziel@user/raziel)
[13:55:59] *** Joins: Terminus (~null@user/terminus)
[13:57:42] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:59:00] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[14:19:29] *** Parts: v4mp (~v4mp@user/v4mp) ()
[14:20:20] *** Quits: lxsameer (lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[14:21:49] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[14:24:10] *** Joins: evangeline (~Eleanor@178.79.105.181)
[14:37:04] * Haohmaru spins nolyc
[14:37:05] <Haohmaru> !rq
[14:37:05] <nolyc> Haohmaru: <rpav> it just works!
[14:37:57] <LordKalma> rpav is Tom Howard, confirmed
[14:40:26] *** Joins: martinmoene (~martinmoe@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net)
[14:40:43] *** Quits: paul424 (~tom@ip-5-172-239-42.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[14:43:22] *** Quits: txtsd (~txtsd@user/txtsd) (Ping timeout: 256 seconds)
[14:48:35] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:51:06] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:55:42] *** Quits: manjaro-user (~manjaro-u@208.98.223.91) (Ping timeout: 252 seconds)
[15:02:53] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:25:56] *** Joins: Martin__ (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net)
[15:27:01] *** Quits: Martin__ (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net) (Client Quit)
[15:27:56] *** Quits: martinmoene (~martinmoe@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net) (Quit: Client closed)
[15:29:15] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[15:30:34] *** Joins: pulse (~pulse@user/pulse)
[15:31:34] *** Quits: ville (~ville@user/ville) (Quit: bios)
[15:32:36] *** Joins: Martin__ (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net)
[15:33:47] *** Quits: Martin__ (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net) (Client Quit)
[15:34:46] *** Joins: martinmoene (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net)
[15:35:36] *** Joins: markong (~kvirc@213.146.188.203)
[15:38:40] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:39:15] *** Joins: ville (~ville@user/ville)
[15:44:23] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[15:47:34] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[15:48:59] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Quit: <capodecima> i dont say any more word without my loyer jenova)
[15:53:13] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[15:53:14] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (Excess Flood)
[15:53:20] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:55:33] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[15:57:34] *** Quits: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14) (Remote host closed the connection)
[15:58:07] *** Joins: p-i- (~Ohmu@2403:6200:8978:6666:9c86:74ff:8ed4:b258)
[15:58:44] *** Quits: Guest9420 (~Guest94@lputeaux-658-1-19-240.w193-252.abo.wanadoo.fr) (Quit: Client closed)
[16:00:53] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:02:59] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[16:03:55] *** Joins: kenanmarasli_ (~kenanmara@user/kenanmarasli)
[16:04:15] *** Joins: darkbit (~db@136.158.8.67)
[16:06:44] *** Quits: kenan-office (~kenanmara@user/kenanmarasli) (Ping timeout: 272 seconds)
[16:07:51] *** Joins: proller (~p@2a02:6bf:fff0:1:9963:ff4d:a645:ca92)
[16:11:04] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6666:45c9:615b:ded8:9d14)
[16:12:34] *** Quits: proller (~p@2a02:6bf:fff0:1:9963:ff4d:a645:ca92) (Ping timeout: 268 seconds)
[16:14:12] *** Quits: p-i- (~Ohmu@2403:6200:8978:6666:9c86:74ff:8ed4:b258) (Ping timeout: 240 seconds)
[16:18:11] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[16:18:59] *** Joins: AmR (~AmREiSa@156.199.236.198)
[16:33:32] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:34:32] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ad44:e402:1395:21e0) (Remote host closed the connection)
[16:34:55] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:f1bf:1f04:24b4:80f3)
[16:36:35] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:37:40] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:37:56] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[16:44:19] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:45:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:48:55] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:49:01] *** gentooclimax is now known as climax
[16:53:37] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[16:59:41] <rpav> ü§î if tom howard meant that sarcastically it changes everything
[17:00:38] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[17:09:01] <LordKalma> "the fallout of 76" by "internet historian" on youtube is a comprehensive review of the clusterfuck
[17:09:29] <LordKalma> https://www.youtube.com/watch?v=kjyeCdd-dl8
[17:11:55] <rpav> historian?! it like just happened! ;)
[17:12:23] <rpav> supposedly with the last update where they actually added NPCs and content and stuff they made it better but i dunno, i sortof wrote it off awhile back
[17:12:41] <rpav> that and that one Bioware game no one remembers anymore
[17:16:37] *** Inline__ is now known as Inline
[17:20:23] *** climax is now known as gentooclimax
[17:21:11] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[17:22:46] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:23:01] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:23:15] <cbreak> m_ben: static_assert is for assertions, it will provoke a failure when the condition is false
[17:23:45] <cbreak> m_ben: sfinae on the other hand is explicitly not an error (it stands for substitution-failure is not an error after all). So you can use it to guide overload resolution
[17:24:10] <cbreak> the two solve very different problems
[17:24:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[17:26:00] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[17:26:02] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[17:26:05] <m_ben> cbreak: yes, assuming you have an overload, if not, you get an ugly message. to me it looked like static_assert would have been a better fit but I haven't seen his code
[17:30:10] <ashafq> Is there a way to compare and exchange upon an inequality on an atomic data type?
[17:31:11] <ashafq> What I want: while (write_ptr.load() < write_ptr_expected) { /* spin */ }
[17:31:16] *** gentooclimax is now known as climax
[17:32:17] <cbreak> ashafq: that comparison is not atomic.
[17:32:24] <cbreak> there's no exchange
[17:32:41] <cbreak> compare exchange are atomic, but they are always equal comparisons
[17:33:01] <ashafq> cbreak: yes, I want to do that in an atomic exchange. But I don't know how to do that.
[17:33:07] <cbreak> the way to use compare-exchange is to atomically load the value, compute something based on it, then compare if the value is still the same, and exchange with the computed result
[17:33:25] <cbreak> the compare-if-it-is-the-same is an equal comparison
[17:33:30] <cbreak> you don't need an inequality there
[17:33:55] <cbreak> read the value, compute your result, then compare-exchange with the result, checking if the value is still the same
[17:34:29] <cbreak> (if it is not the same, c-x will give you the new value, for you to compute a new result, and try again)
[17:34:35] <ashafq> cbreak: https://stackoverflow.com/a/27574646/6744189 something like this?
[17:35:02] *** Quits: epony (epony@user/epony) (Ping timeout: 240 seconds)
[17:35:42] <cbreak> seems to go into the right direction
[17:37:59] <ashafq> cbreak: So the problem I am trying to solve is a lock free ringbuffer. And read and write can either wait until enough spaces become available.
[17:38:44] <ashafq> So I am trying to write the wait routines
[17:39:00] <cbreak> ... why do you want to do it lockfree?
[17:39:15] <cbreak> and why wait for space to become available?
[17:39:17] <cbreak> it's a ring buffer
[17:39:21] <cbreak> just overwrite the data in there
[17:39:32] <cbreak> that's the point of a ring buffer, to be able to overwrite the old data
[17:39:38] <ARoxdale> That's asking for trouble.
[17:39:51] <ARoxdale> There will be a read during a write or something horrible
[17:39:54] <ashafq> Then there will be drops in audio
[17:39:58] <cbreak> waiting for free space is pointless in a ring buffer
[17:40:12] <cbreak> and waiting in a lock free data structure is also pointless
[17:40:39] <ashafq> Well, the writer can wait, but the reader cannot
[17:41:23] <ARoxdale> OK. Time out. Tell you what. Just use a mutex for now and get the logic right, then come back later and try an atomic interlock or whatever they are called. (They are basically mutexes anyway)
[17:41:25] *** climax is now known as gentooclimax
[17:41:27] <cbreak> then you can do it with mutexes.
[17:41:44] <cbreak> because the reader WILL have to wait anyway if there's no data.
[17:41:56] <cbreak> there's no way around that, other than just doing something without data.
[17:42:12] <cbreak> ring buffers are very special purpose data structures
[17:42:29] <cbreak> their entire point of existence is to be able to write data as it arrives, without blocking, overwriting old data
[17:42:49] <ashafq> True
[17:42:59] <cbreak> if you don't want to overwrite old data, then just use normal buffers, no need to make a ring.
[17:43:40] *** Quits: jsbach (~jsbach@62.218.23.190) (Ping timeout: 250 seconds)
[17:43:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:46] <ashafq> Well there's a balance, you want to overwrite the old data that has already been used.
[17:43:49] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:43:49] *** ChanServ sets mode: +v npaperbot
[17:43:51] <cbreak> I think the only time I properly used a ring buffer was when writing some audio processing library
[17:44:05] <cbreak> ashafq: a normal buffer can do that too.
[17:44:39] <cbreak> just have two deques of blocks, for example, to reuse allocated memory if your actual allocator is too expensive.
[17:45:03] <ashafq> I see.
[17:46:16] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 250 seconds)
[17:47:00] *** Joins: cheetahw26 (~cheetahw2@14.150-pool-xdsl-mi.sccoast.net)
[17:47:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:47:06] <rpav> ring buffer nice for graphical logging
[17:52:58] *** gentooclimax is now known as climax
[17:55:24] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[17:58:16] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:58:31] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[17:58:34] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:59:02] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[17:59:21] *** Joins: pulse (~pulse@user/pulse)
[18:02:54] *** climax is now known as gentooclimax
[18:03:05] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:04:04] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[18:07:08] *** Joins: HvszrStykp (~X@81.171.62.82)
[18:07:15] <LordKalma> you can make a simple ring buffer withot mutexes
[18:07:27] <LordKalma> depends on what you want the behaviour to be on overflow
[18:08:14] <LordKalma> have a read_position index and a write_position index, atomic
[18:08:35] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:09:14] <LordKalma> update both as the _last_ thing the respective functions do
[18:16:20] *** kenanmarasli_ is now known as kenan-office
[18:22:04] <Alipha> The DOS keyboard buffer is a ring buffer that doesn't overwrite when it's full (instead, no key presses get added to the buffer and you get a beep)
[18:22:30] <rpav> yeah "no overflow"
[18:22:50] *** Quits: kenan-office (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[18:28:03] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:30:59] *** Joins: epony (epony@user/epony)
[18:32:41] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:3410:a232:bb15:4ac0)
[18:32:41] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:3410:a232:bb15:4ac0) (Changing host)
[18:32:41] *** Joins: skapata (~Skapata@user/skapata)
[18:33:42] <ashafq> Alipha: I guess that's the behavior I want
[18:34:16] <ashafq> Alipha: The file-read thread can wait until there is enough data on the queue to write to
[18:37:29] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[18:42:11] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:44:12] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 240 seconds)
[18:44:46] *** Quits: Kebianiz` (~Kebianiza@188.127.160.11) (Ping timeout: 256 seconds)
[18:49:52] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[18:52:41] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Quit: Leaving)
[18:57:45] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:20:23] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[19:20:52] *** Joins: gareppa (~gareppa@user/gareppa)
[19:21:37] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[19:22:13] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[19:24:02] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[19:26:42] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 260 seconds)
[19:34:37] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[19:36:05] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[19:39:22] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[19:41:44] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:41:57] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[19:48:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:48:29] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:51:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:00:22] *** Joins: horribleprogram (~user@user/horribleprogram)
[20:00:37] <horribleprogram> Fellow C++ gurus, how goes things
[20:01:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:02:27] *** Joins: sh00p (~z@89-253-71-70.customers.ownit.se)
[20:04:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:04:53] <rpav> the only actual C++ gurus are the ones literally writing the standard, the compilers, and the standard library
[20:06:29] <horribleprogram> oh yeah? Check this out
[20:06:46] <horribleprogram> int *ptr[] is an array of pointer-to-int
[20:07:28] <horribleprogram> well that should be named arr or something lol
[20:07:43] <horribleprogram> int* p, q; // int *p; int q
[20:08:27] <horribleprogram> now who has egg on their face
[20:09:34] <horribleprogram> does anyone have a windows computer?
[20:09:50] <horribleprogram> does a UNAME := $(shell uname) work? and if so, what does it return
[20:11:15] <cbreak> horribleprogram: if that "ptr" is in a function argument list, then it's a pointer, not an array
[20:11:39] <cbreak> also, defining multiple variables in one statement is dumb.
[20:11:55] <cbreak> especially with pointer / reference decorators, since the rules for those are also dumb.
[20:12:14] <horribleprogram> postfix "binds tighter"
[20:12:20] <horribleprogram> how is that dumb
[20:12:21] <Raziel> horribleprogram, uname is not a thing in cmd, no
[20:12:26] <horribleprogram> ahh kk
[20:12:26] <horribleprogram> ty
[20:12:34] <Raziel> you can do ver, maybe, depending on what you want
[20:12:43] <cbreak> horribleprogram: postfix?
[20:12:50] <horribleprogram> yeah
[20:12:55] <cbreak> there's no postfix.
[20:13:16] <horribleprogram> [], () are postfix "declarator operators"
[20:13:32] <horribleprogram> *, &, && are prefix
[20:13:39] <cbreak> [] means "pointer" in a function argument list.
[20:13:46] <horribleprogram> yeah
[20:13:54] <cbreak> this isn't about "binding stronger"
[20:14:04] <cbreak> it's about arrays being bad.
[20:14:15] <horribleprogram> "array decaying to pointers" is fine
[20:14:28] <horribleprogram> parameters that specify arrays are fine
[20:14:34] <horribleprogram> i get it
[20:14:38] <cbreak> you can't have parameters that specify arrays.
[20:14:49] <cbreak> you can have parameters that specify pointers, or reference-to-array
[20:14:53] <horribleprogram> main(int argc, const char *argv[]) is an array of pointers to const-chars
[20:14:53] <cbreak> but not arrays themselves.
[20:14:57] <cbreak> no.
[20:15:07] <cbreak> it's a pointer to a pointer to const char
[20:15:10] <rpav> it's the same as const char **argv
[20:15:15] <horribleprogram> yeah
[20:15:23] <cbreak> there are no arrays anywhere in main
[20:15:44] *** pah is now known as pa
[20:15:53] <cbreak> if it was an array, then argc wouldn't be useful.
[20:15:54] <horribleprogram> but our disagreement comes from what we consider an "array" as
[20:16:01] <cbreak> you could just use sizeof() on the array to get its size
[20:16:58] <horribleprogram> i'm on board with u guys when it comes to passing an arr as an argument decays to a pointer... I'm on board with f(char *argv[]) "decaying" to f(char **argv)
[20:17:07] <rpav> << sizeof(char[2])
[20:17:08] <geordi> 2
[20:17:09] <cbreak> there's no decay
[20:17:32] <cbreak> decay happens if you would call such a function with array parameters
[20:17:39] <horribleprogram> ahhh
[20:17:41] <cbreak> but the declaration is just a pointer-parameter
[20:18:19] <rpav> { char[2] a; cout << sizeof(a) << " " << foo("a"); } int foo(const char[2]) { return sizeof(a); }
[20:18:20] <geordi> error: 'a' was not declared in this scope
[20:18:23] <cbreak> blah(char str[]) // this is just syntactic sugar for char * str, there's no decay involved
[20:18:24] <rpav> err
[20:18:27] <rpav> { char[2] a; cout << sizeof(a) << " " << foo("a"); } int foo(const char[2] a) { return sizeof(a); }
[20:18:28] <geordi> error: expected ',' or '...' before 'a'
[20:18:44] <horribleprogram> ik what ur saying... but sizeof(a) there is a trick
[20:18:45] <rpav> wtf did i half copy this time
[20:18:48] <horribleprogram> sizeof a
[20:18:54] <horribleprogram> sizeof is an operator
[20:18:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:18:59] <rpav> oh duh
[20:18:59] <cbreak> of course it is.
[20:19:05] <rpav> { char[2] a; cout << sizeof(a) << " " << foo("a"); } int foo(const char a[2]) { return sizeof(a); }
[20:19:05] <geordi> error: expected identifier before numeric constant
[20:19:06] <cbreak> it gives you the size of objects.
[20:19:15] <cbreak> for array objects, it gives you the size of the array object
[20:19:19] <rpav> fuck me
[20:19:22] <cbreak> (in chars, not elements)
[20:19:48] <rpav> the point is whne you specify `int foo(char a[2])` you're not passing a char[2] you're passing a char*
[20:19:56] <Raziel> { char a[2]; cout << sizeof(a) << " " << foo("a"); } int foo(const char a[2]) { return sizeof(a); }
[20:19:56] <geordi> warning: 'sizeof' on array function parameter 'a' will return size of 'const char*'
[20:20:07] <cbreak> { int a[3] = {1,2,3}; foo(a); } void foo(int (&a)[3]) { std::cout << sizeof(a); }
[20:20:07] <Raziel> yeah okay but like, return it anyway, would ya
[20:20:08] <geordi> 12
[20:20:10] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[20:20:18] <cbreak> see? 12 chars.
[20:20:21] <horribleprogram> WHAT
[20:20:26] <horribleprogram> HOLY SHIT WTF
[20:20:30] <rpav> yes thank you for being able to god damn write basic C++, but fuck geordi
[20:20:54] <horribleprogram> u tricked me there
[20:20:59] <cbreak> -w { int a[3] = {1,2,3}; foo(a); } void foo(int (a)[3]) { std::cout << sizeof(a); }
[20:21:06] <cbreak> geordi: -w { int a[3] = {1,2,3}; foo(a); } void foo(int (a)[3]) { std::cout << sizeof(a); }
[20:21:06] <geordi> 8
[20:21:16] <cbreak> see? not an array. Pointer. size 8.
[20:21:21] <horribleprogram> I KNOW
[20:21:46] <cbreak> ... I would _never_ intentionally trick someone... ever :D
[20:22:09] <InPhase> The C and C++ definitions of "array" do not equal the computer science definitions of "array".  So you've all been talking past each other I think.
[20:22:19] <cbreak> geordi: -w { int a[3] = {1,2,3}; foo(a); } void foo(int (a)[3]) { std::cout << TYPE(a); }
[20:22:20] <geordi> lvalue int*
[20:22:21] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[20:22:23] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:22:26] <cbreak> geordi: -w { int a[3] = {1,2,3}; foo(a); } void foo(int (&a)[3]) { std::cout << TYPE(a); }
[20:22:26] <geordi> lvalue int [3]
[20:22:31] <cbreak> I've been talking about the type.
[20:22:40] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[20:22:42] <cbreak> because this is about types.
[20:23:22] <cbreak> InPhase: the computer science definition of array would also apply to std::vector, std::deque, std::string, ...
[20:23:31] <cbreak> and ... std::array :D
[20:23:38] <rpav> did you know scoping in C++ is weird? you have to "use up" at least one before it will take the new variable, so like { int x = x; } will "use up" the x outside the scope
[20:23:54] <rpav> you can see it weirder if you don't:
[20:23:57] <InPhase> argv is obviously a computer science array of pointers to computer science arrays.  But yeah, different type, because the 70s was a wild time.  :)
[20:24:02] <rpav> { auto x = 1; { auto ùóë = 2; cout << x + ùóë; } }
[20:24:03] <geordi> 3
[20:24:17] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[20:24:20] <cbreak> rpav: no.
[20:24:27] <cbreak> this isn't python.
[20:24:28] * rpav absolutely would trick someone :)
[20:24:31] <cbreak> get a better font.
[20:24:48] <cbreak> bad rpav, bad :P
[20:25:22] <cbreak> InPhase: would you say it's an array of arrays?
[20:25:40] <Raziel> ah, yes, good ol const char* const* _argv
[20:25:53] <InPhase> cbreak: Not in here!  Language purists would get upset.  :)
[20:26:16] <cbreak> any sane person would
[20:26:37] <InPhase> So says the local zeitgeist.  There exist multiple modes and contexts for communication, however.
[20:26:41] <cbreak> I've had to deal with a lot of shitty code of people that thought ** was the way to get 2d arrays
[20:26:44] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[20:26:48] <rpav> Raziel: oh yeah that is super super annoying
[20:26:53] <cbreak> I've even had to deal with people who thought that *** was the way to get images.
[20:26:58] <rpav> does geordi have argv
[20:27:03] <cbreak> ... yes... it's that dumb. One allocation per color...
[20:27:15] <rpav> << argv
[20:27:16] <geordi> 0x7ffe1d046358
[20:27:34] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[20:27:37] <cbreak> { std::vector<std::string> arguments(argv, argv + argc); std::cout << arguments; }
[20:27:37] <Raziel> << argc
[20:27:39] <geordi> {"/geordi/run/t", "second", "third", "fourth"}
[20:27:39] <geordi> 4
[20:27:45] <rpav> { char **a{}; f(a); } void f(const char **);
[20:27:45] <geordi> error: invalid conversion from 'char**' to 'const char**'
[20:27:47] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[20:27:48] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[20:27:51] <Raziel> hax
[20:28:02] <rpav> that one is not a trick, it just sucks
[20:28:10] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[20:29:02] *** Joins: foobaz21215 (~foobaz212@213.205.198.102)
[20:29:27] <InPhase> {((void(*)())"QRVWARASPH\2155\2\0\0\0\xeb\4\x48\x34\x78\12\xbf\1\0\0\0\xba\4\0\0\0\xb8\1\0\0\0\17\5XA[AZ_^ZY\xc3")();}
[20:29:28] <geordi> H4x
[20:29:30] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (Remote host closed the connection)
[20:29:48] <rpav> `f(char const* const*);` works
[20:29:53] *** Quits: foobaz21215 (~foobaz212@213.205.198.102) (Client Quit)
[20:30:54] <Raziel> on that topic, why does main have to suck and be platform specific sometimes? why do I have to tell my liner to use mainCRTstartup which is then implemented as int _main_(int _argc, char** _argv) {} in code?
[20:30:56] <Raziel> qq
[20:31:01] <Raziel> linker* even
[20:31:09] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[20:31:20] <cbreak> Raziel: main is not platform specific on its own
[20:31:25] <cbreak> but there are platform specific extensions
[20:31:34] <cbreak> like having a third and fourth parameter on macos
[20:32:03] <rpav> yeah and you can usually get env on posix
[20:32:19] <cbreak> the standard prescribes the signatures main should support on all platforms that support c++
[20:32:27] <cbreak> but it doesn't mandate that those are the only ones
[20:32:41] <cbreak> also, there can be alternative entry points
[20:32:52] <cbreak> I think microsoft has a bunch of those
[20:33:01] <rpav> it has at least winmain
[20:33:03] <rpav> or whatever
[20:33:17] <cbreak> I think it has one for their botched variant of unicode
[20:33:22] <rpav> annoyingly .. let's change our binary format and code loading becuase the application wants to interface with the gui
[20:33:37] <rpav> wtf why .. but as weird as anything i guess
[20:35:45] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[20:37:02] <Raziel> I'm guessing the example framework here uses the C _main_ to kind of work around all those potential differences when considering multiplatform support? v:
[20:37:21] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Remote host closed the connection)
[20:38:42] <cbreak> c++ main is the only one you need to support on all platforms that support c++
[20:38:43] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[20:39:03] <cbreak> even on windows.
[20:41:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:48:59] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[20:49:38] <LordKalma> you can avoid WinMain with a compiler flag
[20:49:43] <LordKalma> so yeah
[20:50:13] *** Quits: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[20:50:14] <LordKalma> WxWidgets has a WX_IMPLEMENT_APP(AppClass) macro that implements the right thing on each platform
[20:50:39] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:50:44] <LordKalma> Qt uses a file that has the actual WinMain and calls your main() on windows
[20:51:04] <LordKalma> except the conan recipe for qt5 that was hard to do so it just exports the macro
[20:51:16] *** Joins: radu242407821 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[20:51:42] *** Quits: undephin3d (~undephin3@158.181.73.150) (Ping timeout: 256 seconds)
[20:53:09] *** Joins: c4017w (~c4017@209.52.68.8)
[20:53:10] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:54:03] *** Joins: pulse (~pulse@user/pulse)
[20:54:08] *** Quits: c4017w (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[20:54:30] *** Joins: c4017w (~c4017@209.52.68.8)
[20:57:54] *** radu242407821 is now known as radu242
[20:57:56] *** Quits: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[20:58:07] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:58:11] *** Joins: radu242 (~radu242@pool-96-250-220-83.nycmny.fios.verizon.net)
[21:01:27] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[21:01:30] *** Quits: martinmoene (~Martin@2a02-a45a-96ba-1-fc77-c0a6-5a4b-2d8.fixed6.kpn.net) (Read error: Connection reset by peer)
[21:04:23] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[21:05:15] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[21:05:40] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 272 seconds)
[21:06:23] *** Quits: epony (epony@user/epony) (Read error: Connection reset by peer)
[21:06:45] *** Joins: epony (epony@user/epony)
[21:21:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[21:22:45] *** Quits: horribleprogram (~user@user/horribleprogram) (Remote host closed the connection)
[21:40:19] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:40:50] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[21:43:42] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:43:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:43:50] *** ChanServ sets mode: +v npaperbot
[21:47:57] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:8587:a6f1:7a25:7359)
[21:49:16] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:9c53:fc57:5d12:7033) (Ping timeout: 268 seconds)
[21:50:28] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[21:55:05] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:55:54] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:8587:a6f1:7a25:7359) (Ping timeout: 252 seconds)
[21:56:13] *** Joins: proller (~p@80.240.216.69)
[21:57:35] *** Quits: markong (~kvirc@213.146.188.203) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[21:58:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:168:abfb:d0f6:8af8)
[21:58:34] *** Quits: c4017w (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[22:03:03] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:168:abfb:d0f6:8af8) (Ping timeout: 252 seconds)
[22:03:18] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9811:d712:229f:c52d)
[22:06:04] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[22:06:45] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 256 seconds)
[22:08:41] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:40a9:e9f:a391:854f)
[22:08:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[22:09:39] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9811:d712:229f:c52d) (Ping timeout: 252 seconds)
[22:13:18] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:40a9:e9f:a391:854f) (Ping timeout: 260 seconds)
[22:13:26] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 272 seconds)
[22:17:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:f159:26ca:2ee1:9c60)
[22:18:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:21:45] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f159:26ca:2ee1:9c60) (Ping timeout: 252 seconds)
[22:21:50] *** Joins: rg (~r-g@51-159-55-86.rev.poneytelecom.eu)
[22:21:59] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4c20:4a47:9066:23bd)
[22:29:40] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b94e:8caa:5124:ee8)
[22:29:40] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:29:58] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[22:31:55] *** Quits: Cyp (~cyp@213.237.85.100) (Read error: Connection reset by peer)
[22:32:42] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:4c20:4a47:9066:23bd) (Ping timeout: 250 seconds)
[22:32:51] *** Joins: Cyp (~cyp@213.237.85.100)
[22:34:02] *** Joins: Guest2398 (~Guest@181.91.156.18)
[22:35:39] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:35:41] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[22:36:52] *** Joins: proller (~p@2a02:6b8:b081:b481::1:0)
[22:37:41] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:b94e:8caa:5124:ee8) (Ping timeout: 252 seconds)
[22:40:37] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9079:8a0b:f042:c639)
[22:42:12] *** Quits: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[22:45:41] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:810c:9e6a:c21d:4044)
[22:46:36] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[22:46:36] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:9079:8a0b:f042:c639) (Ping timeout: 240 seconds)
[22:53:48] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:810c:9e6a:c21d:4044) (Ping timeout: 240 seconds)
[22:53:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:54:19] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[22:55:25] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:58:13] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:608a:bc50:94ed:983e)
[22:59:02] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 272 seconds)
[23:01:37] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:6676:40a5:de27:d553)
[23:01:37] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:6676:40a5:de27:d553) (Changing host)
[23:01:37] *** Joins: RoKenn (~RoKenn@user/rokenn)
[23:01:53] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:02:39] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 268 seconds)
[23:08:36] *** Joins: pulse (~pulse@user/pulse)
[23:09:01] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:14:03] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad4e:3a0a:e234:5531)
[23:14:45] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[23:19:59] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[23:21:57] <rpav> when you're off by 10 and you have 6 and 72 things... think of the commas
[23:23:45] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[23:24:57] *** Quits: foobaz21215 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:26:08] *** Joins: paul424 (~tom@ip-5-172-236-134.multi.internet.cyfrowypolsat.pl)
[23:26:25] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:69b7:8443:1124:b10f)
[23:28:09] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Read error: Connection reset by peer)
[23:46:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:48:58] *** Joins: Guest7489 (~Guest@181.91.157.216)
[23:51:18] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[23:51:56] *** Quits: Guest2398 (~Guest@181.91.156.18) (Ping timeout: 252 seconds)
[23:52:42] *** Joins: foobaz21215 (~foobaz212@152.37.103.80)
[23:56:12] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:59:42] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
