[00:00:02] <LordKalma> this was one of said exceptions
[00:00:28] <Raziel> as in, it was broken in the preview?
[00:01:01] <LordKalma> no, as in it doesn't have a release license :)
[00:01:37] <LordKalma> I never knew anything about a different license for the preview
[00:01:40] <LordKalma> @PJBoy, do you?
[00:01:44] <Raziel> I see
[00:02:11] <Raziel> https://visualstudio.microsoft.com/vs/preview/faq/
[00:02:20] <Raziel> "No, “Preview” is not licensed to build shipping apps. "
[00:03:21] <LordKalma> ah interesting
[00:03:31] <LordKalma> I never built a shipping app, fortunately haha
[00:03:54] <LordKalma> well, if I need to do that I can install the non-preview build tools
[00:04:05] <LordKalma> it's nice that you can just get the build tools
[00:04:55] <Raziel> I wonder if there's any other indicators that one could use to be able to see if a binary was built on preview or not
[00:06:40] <LordKalma> it's probably part of the file format
[00:08:06] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[00:15:11] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[00:21:22] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[00:22:27] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[00:25:24] *** Quits: Guest80 (~Guest80@pd9ed7762.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[00:26:27] *** Joins: badone (~badone@209.132.189.136)
[00:42:31] *** Quits: magla (~gelignite@55d41163.access.ecotel.net) (Quit: Stay safe!)
[00:42:58] *** Joins: obiwahn (~heini@user/obiwahn)
[00:44:53] *** Quits: emerent (~quassel@p200300cd57430969ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[00:45:01] *** Joins: emerent (~quassel@p200300cd574309a3ba27ebfffed28a59.dip0.t-ipconnect.de)
[00:54:52] *** Joins: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[00:56:22] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[00:57:04] *** Quits: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[00:57:22] *** Joins: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[00:57:40] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[00:58:01] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[01:00:57] *** Quits: Leone (~Leo@216.154.50.172) ()
[01:02:41] *** Joins: X-Scale` (~ARM@165.201.137.78.rev.vodafone.pt)
[01:03:20] *** Quits: X-Scale (~ARM@83.223.243.66) (Ping timeout: 256 seconds)
[01:05:00] *** X-Scale` is now known as X-Scale
[01:05:54] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[01:07:18] *** Quits: spaceangel_ (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[01:10:27] *** Quits: zoneu (~zoneu@user/zoneu) (Quit: Leaving)
[01:11:19] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[01:11:20] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Quit: varioust)
[01:13:55] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[01:22:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:25:44] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:26:24] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:28:50] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[01:35:09] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:36:10] <PJBoy> nah I didn't know about that
[01:36:18] <PJBoy> but it's completely sensible
[01:37:01] <PJBoy> and not a problem for someone like me that only writes open source shit
[01:37:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 264 seconds)
[01:38:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:38:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:38:11] *** ChanServ sets mode: +v npaperbot
[01:39:04] *** Quits: MarcoFe (~marcofe@host-82-49-154-107.retail.telecomitalia.it) (Quit: Konversation terminated!)
[01:40:10] *** Joins: mike18 (~geri@217-149-160-150.nat.highway.telekom.at)
[01:40:22] <mike18> hi
[01:40:30] <mike18> how can i change the algo to recursive? https://ideone.com/028LLP
[01:40:37] <mike18> i mean iterative....
[01:42:11] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 245 seconds)
[01:49:03] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:11ce:2929:e4e6:8b24)
[01:52:08] <chozorho> the DFS part, you mean?
[01:52:44] <chozorho> I haven't fully implemented it myself, but at a glance, I would advise you to consider what **data structures** would be best suited for that algorithm
[01:53:15] <chozorho> when you think of recursion and function calls, what data structure comes to mind?
[01:54:16] <mike18> dfs with staack
[02:01:20] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[02:02:34] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[02:03:08] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[02:11:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 245 seconds)
[02:18:13] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:21:57] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f)
[02:21:58] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:b1d7:e14b:5957:fa7f) (Changing host)
[02:21:58] *** Joins: skapata (~Skapata@user/skapata)
[02:24:16] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[02:28:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[02:34:44] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:41:53] *** Joins: proller (~p@80.240.216.69)
[02:48:49] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[02:49:39] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:51:37] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[02:54:18] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[02:58:36] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Remote host closed the connection)
[02:59:28] *** Joins: ferdna (~ferdna@user/ferdna)
[03:00:15] <Alipha> mike18: why do you want to?
[03:00:38] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:03:45] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[03:04:00] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[03:08:09] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:10:31] <mike18> implement dfs iterativly - let me try -
[03:16:12] *** Quits: imMute (~immute@user/immute) (Ping timeout: 260 seconds)
[03:16:20] *** Joins: imMute (~immute@user/immute)
[03:17:18] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[03:18:01] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[03:19:19] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:19:57] <CarloWood> Wut...
[03:20:31] <CarloWood> { m_flags.fetch_or(extent_changed_bit, std::memory_order::relaxed); } std::atomic_int m_flags; static constexpr int extent_changed_bit = 1;
[03:20:33] <geordi>  
[03:21:43] <CarloWood> { m_flags.fetch_and(~extent_changed_bit, std::memory_order::relaxed); } std::atomic_int m_flags; static constexpr int extent_changed_bit = 1;
[03:21:43] <geordi>  
[03:22:20] <CarloWood> what the hell... why does this give me:
[03:22:22] <CarloWood> vulkan/OperatingSystem.h:126:13: error: no matching member function for call to 'fetch_and'
[03:22:22] <CarloWood>     m_flags.fetch_and(~extent_changed_bit, std::memory_order::relaxed);
[03:22:22] <CarloWood>     ~~~~~~~~^~~~~~~~~
[03:22:53] <CarloWood> note: candidate function not viable: no known conversion from 'const std::atomic_int' (aka 'const atomic<int>') to 'std::__atomic_base<int>' for object argument
[03:23:01] <CarloWood> oh
[03:23:04] <CarloWood> nevermind
[03:23:28] <CarloWood> Sometimes you just don't see it :/
[03:40:31] *** Joins: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz)
[03:41:25] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[03:43:43] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[03:49:37] *** Quits: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz) (Quit: Leaving)
[03:52:39] <mike18> Alipha: dont find the bug: https://ideone.com/wHTmnW
[04:06:25] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:16:51] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[04:20:43] <Alipha> mike18: I don't think you want the visited grid, as different paths could result in visiting a specific cell with different counts, and you don't want to eliminate a cell from being visited via a different path
[04:21:39] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[04:22:20] <Alipha> I think I see another bug, but you told me not to find the bug...
[04:23:44] *** Joins: Budd (~Budd@2001:470:8d44:1::5)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:27:19] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[04:29:08] <mike18> Alipha: how to avoid revisited a path i already visited?
[04:29:40] <Budd> I tried using std::vector in code for a microcontroller, and it increased my image size from 50kB to 145kB. Many of the added symbols have to do with exceptions and stack unwinding (despite -fno-exceptions and -fno-rtti).
[04:30:49] <Budd> Is there a reasonable way to really avoid exceptions? I also don't need cleanup code at end-of-program, if that's a cost.
[04:31:20] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[04:31:27] <Alipha> Budd: did you compile with optimizations?
[04:31:46] <Alipha> ie, -O2 or -O3 or such
[04:32:11] <Budd> Yes, -O3.
[04:32:12] *** Quits: Brewster (~Brewster@104.145.226.5) (Changing host)
[04:32:12] *** Joins: Brewster (~Brewster@user/brewster)
[04:33:14] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[04:34:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:34:37] <Budd> I've seen advice online about defining my own __cxa_pure_virtual(), which didn't help.
[04:34:42] *** Quits: mike18 (~geri@217-149-160-150.nat.highway.telekom.at) (Remote host closed the connection)
[04:35:09] <Budd> And about providing my own global new(), which didn't work (link fails due to redefined symbols).
[04:38:07] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:f475:c7e0:4a6:d46) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:47:37] <CarloWood> Budd: I wrote a util to implement your own virtual tables if that helps.
[04:49:08] <Budd> CarloWood: Thanks, but that's fancier than I need. I don't expect to use inheritance at all.
[04:49:12] <CarloWood> Budd: start with usage examples: https://github.com/CarloWood/ai-utils/blob/master/VTPtr.h#L34
[04:49:34] <CarloWood> Oh, I thought you need virtual tables, cause you said defining my own __cxa_pure_virtual
[04:50:45] <Budd> That was just advice from a web page trying to eliminate symbols that were required by The System, but not by the programmer.
[04:50:59] <CarloWood> Err nevermind - I see it uses virtual itself lol.... Hmm. I guess the only trick was to make them dynamic (you can change the virtual tables at runtime).
[04:51:39] <RandomReader> that advice is a bit out of context, since it assumes more about the surrounding environment
[04:52:05] <RandomReader> O3 is likely to increase size, not decrease it ... there are other options like Os to favor size
[04:52:36] <Budd> It may be that std::vector pulls in std::new, which pulls in exceptions, which are big.
[04:53:07] <RandomReader> fno-exceptions and removing rtti both carry caveats, particularly that you'll need to build the entire "world" that way to have any useful effect, it's not something that can be done in isolation
[04:53:25] <RandomReader> in this case you're interacting with a stdlib implementation that's providing vector, and that is important for both
[04:54:09] *** Joins: malloy (~jimery@116.30.220.108)
[04:54:11] <RandomReader> that stdlib implementation would have to be built with (and explicitly support, since it's entirely non-standard) fno-exceptions
[04:54:41] <RandomReader> the suggestion in the other channel to look at embedded-oriented containers may be useful, but I don't know what kind of environment you're in
[04:54:41] <Budd> That makes sense.
[04:55:04] <RandomReader> there are also stdlib implementations specifically for embedded, so looking for one of those that supports your compiler may also be an option
[04:55:09] <Budd> I'm programming a Pico (RP2040) with the pico-sdk, which cross-compiles with gcc.
[04:55:36] <Budd> I expect my needs are limited enough that I can just do without std:: containers.
[04:56:20] <CarloWood> If you have very limited memory you might be better of with C.
[04:56:43] <RandomReader> there isn't anything about C++ that actually makes it worse than C in this regard
[04:57:13] <RandomReader> the real problem is tooling support, vendors often support C and not C++
[04:57:27] <Budd> I have 240k of RAM, and 2M of flash which can hold the code (execute-in-place).
[04:58:18] <Budd> Using C++ for nicer syntax and simple member functions hasn't caused any code bloat. It only happened when I added std::vector.
[04:59:17] <RandomReader> any idea what stdlib is in use for that target? I'm not familiar with it
[04:59:49] *** Joins: X-Scale` (~ARM@31.22.167.45)
[04:59:55] <Budd> My hand-rolled minimal vector keeps it smaller - 80k instead of 145. Haven't inspected symbol sizes yet.
[05:00:11] *** Quits: X-Scale (~ARM@165.201.137.78.rev.vodafone.pt) (Ping timeout: 268 seconds)
[05:02:02] <Budd> RandomReader: I don't know. The SDK's standard compile/link flags seem to do an excellent job of leaving out unused symbols.
[05:02:29] *** X-Scale` is now known as X-Scale
[05:03:12] <RandomReader> may just be gcc's libstdc++
[05:03:44] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Quit: varioust)
[05:03:51] <AmR> Did Any one test mingw-w64 Qt5-static build script from AUR ?
[05:17:59] <CarloWood> { if (int n = f()) { cout << "ok: " << n; } } bool f() { return true; }
[05:18:00] <geordi> ok: 1
[05:19:53] <CarloWood> { if (__builtin_expect(static_cast<bool(int n = f()), true)) { cout << "ok: " << n; } } int f() { return 42; }
[05:19:54] <geordi> error: default arguments are only permitted for function parameters
[05:19:58] <CarloWood> didn't think so
[05:20:10] <CarloWood> oops
[05:20:16] <CarloWood> { if (__builtin_expect(static_cast<bool>(int n = f()), true)) { cout << "ok: " << n; } } int f() { return 42; }
[05:20:16] <geordi> error: expected primary-expression before 'int'
[05:20:36] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[05:21:15] <CarloWood> How to combine declaring an int and __builtin_expect into one if statement?
[05:21:31] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[05:23:14] *** Joins: ferdna (~ferdna@user/ferdna)
[05:23:36] *** Joins: cm007magnum (~Rheanna@218.78.53.13)
[05:26:55] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[05:29:45] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:34:11] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[05:34:38] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:35:03] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[05:38:00] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:38:03] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:11] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:12] *** ChanServ sets mode: +v npaperbot
[05:38:26] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[05:39:31] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[05:48:23] *** Quits: Tokamak (~Tokamak@172.58.191.72) (Ping timeout: 264 seconds)
[05:49:54] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[05:58:40] *** Joins: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com)
[05:58:52] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[06:06:01] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5)
[06:11:22] *** Quits: cm007magnum (~Rheanna@218.78.53.13) (Remote host closed the connection)
[06:13:58] *** Joins: cm007magnum (~Rheanna@218.78.67.149)
[06:15:15] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[06:18:04] *** Joins: furincleavagesit (~textual@47.203.181.175)
[06:23:48] *** Quits: furincleavagesit (~textual@47.203.181.175) (Quit: Textual IRC Client: www.textualapp.com)
[06:33:13] *** Joins: frost (~frost@user/frost)
[06:39:59] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a5dd:80a5:c74b:fea5) (Ping timeout: 264 seconds)
[06:45:40] <hnOsmium0001[m]> { if (int n = f(); __builtin_expect(static_cast<bool>(n), true), static_cast<bool>(n)) { cout << "ok: " << n; } } int f() { return 42; }
[06:45:40] <geordi> ok: 42
[06:46:11] <hnOsmium0001[m]> though I have no idea if the __builtin_expect actually worked there
[06:47:00] <hnOsmium0001[m]> honestly this just sounds like a bad idea, use [[likely]] and [[unlikely]] instead
[06:48:18] <hnOsmium0001[m]> { if (int n = f(); __builtin_expect(static_cast<bool>(n), true)) { cout << "ok: " << n; } } int f() { return 42; }
[06:48:18] <geordi> ok: 42
[06:48:58] <hnOsmium0001[m]> actually it seems like you don't need the operator, magic for it to work
[07:01:29] *** Quits: cm007magnum (~Rheanna@218.78.67.149) (Remote host closed the connection)
[07:03:45] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[07:05:34] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[07:07:17] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:07:40] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[07:10:21] <AmR> What is difference between freetype2 and freetype2-bootstrap ?
[07:17:44] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[07:18:42] *** Quits: varioust (~varioust@cpe-108-167-11-88.neb.res.rr.com) (Ping timeout: 260 seconds)
[07:23:19] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[07:47:25] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[07:49:44] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:51:23] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[07:52:58] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[08:40:48] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:5141:283c:ef57:2767)
[08:45:03] *** Joins: RandomRead3r (~RandomRea@user/randomreader)
[08:45:59] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5141:283c:ef57:2767) (Ping timeout: 264 seconds)
[08:47:22] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[08:48:14] *** Quits: RandomReader (~RandomRea@user/randomreader) (Ping timeout: 260 seconds)
[08:48:21] *** RandomRead3r is now known as RandomReader
[09:11:24] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[09:31:07] *** Joins: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de)
[09:31:25] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[09:32:20] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:33:03] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:33:43] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[09:34:46] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[09:34:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[09:38:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:13] *** ChanServ sets mode: +v npaperbot
[09:41:20] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:47:04] *** Joins: Volund (~Volund@184-089-055-145.res.spectrum.com)
[09:49:57] <Volund> hey guys. I'm trying to do something weird with ASIO / Boost ASIO - and I'm wondering if anyone's familiar with the guts... specifically, I am looking to use exec() to 'reload' a program in place after staging all of its connection information to a file and then loading the file to reconstruct connection info around the still-open sockets. What I don't know is: what happens to the epoll / poller / etc other descriptors under the
[09:49:57] <Volund> hood? How do I ensure those are inherited-or-closed-etc on exec() ?
[09:52:07] <AmR> Any one here Working with mingw under ArchLinux ?
[10:03:09] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:09:44] <Volund> well I figured out an answer. if I dynamically allocate the io_context, then I can delete it and its destructor will close the excess FDs
[10:10:12] *** Joins: Terminus (~null@user/terminus)
[10:12:56] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:14:22] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:17:14] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[10:18:51] *** Joins: NiD27 (~nid27@49.205.144.153)
[10:19:15] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:11ce:2929:e4e6:8b24) (Quit: Quit)
[10:21:55] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[10:22:17] *** Joins: johnny (~johnny@user/johnny)
[10:23:42] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:28:39] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[10:28:39] *** Quits: phoenix (phoenix@user/phoenix) (*.net *.split)
[10:28:39] *** Quits: traxex (traxex@user/traxex) (*.net *.split)
[10:28:39] *** Quits: malinus (~malinus@172.245.158.16) (*.net *.split)
[10:28:39] *** Quits: WeblordPepe (~pepe@104.248.83.14) (*.net *.split)
[10:28:39] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[10:28:39] *** Quits: mabi (~m42e@pb42.de) (*.net *.split)
[10:28:39] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[10:28:47] *** Joins: malinus (~malinus@172.245.158.16)
[10:28:54] *** Joins: traxex (~traxex@sdf.org)
[10:28:54] *** Joins: WeblordPepe (~pepe@104.248.83.14)
[10:29:13] *** Joins: phoenix (phoenix@sdf.org)
[10:29:17] *** Joins: mabi (~m42e@pb42.de)
[10:29:17] *** Joins: beanzilla (beanzilla@user/beanzilla)
[10:29:25] *** Quits: phoenix (phoenix@sdf.org) (Signing in (phoenix))
[10:29:25] *** Joins: phoenix (phoenix@user/phoenix)
[10:29:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[10:29:55] *** phoenix is now known as Guest2104
[10:31:09] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[10:33:06] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:34:22] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[10:34:23] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[10:34:23] *** Quits: NyB (~archon@2a02:169:1d9::1:0:0) (*.net *.split)
[10:34:52] *** Joins: FLHerne (~flh@flherne.uk)
[10:34:57] *** Joins: NyB (~archon@2a02:169:1d9::1:0:0)
[10:35:17] *** Joins: cncr04s (~cncr04s@afxr.net)
[10:42:33] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: good night)
[10:44:50] *** Joins: barix (~barix@user/barix)
[10:48:01] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[10:49:43] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[10:51:20] *** Joins: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp)
[10:53:17] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[10:53:50] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[10:54:46] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 260 seconds)
[10:58:45] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[11:02:45] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[11:05:17] *** tner is now known as renopt
[11:05:30] <cbreak> volund: does https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/reference/io_context/notify_fork.html help?
[11:05:32] *** Quits: renopt (~renopt@lisp.us.to) (Changing host)
[11:05:32] *** Joins: renopt (~renopt@user/renopt)
[11:07:48] *** Quits: AmR (~AmREiSa@156.199.219.108) (Quit: Konversation terminated!)
[11:11:22] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[11:11:39] <Volund> yeah I looked over that and it only kinda touches on the subject.
[11:11:58] <Volund> I did figure out a solution though. :D just destroy the io_context
[11:13:23] *** Joins: cm007magnum (~Rheanna@218.78.109.69)
[11:22:36] *** Joins: TheSchaf (~TheSchaf@p54833e1e.dip0.t-ipconnect.de)
[11:41:23] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:48:34] *** Joins: onizu (uid373383@uxbridge.irccloud.com)
[12:00:49] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:01:26] *** Quits: DrMax (~DrMax@node-1w7jra94757g02r478wxwr6fk.ipv6.telus.net) (Remote host closed the connection)
[12:01:26] *** Quits: cm007magnum (~Rheanna@218.78.109.69) (Remote host closed the connection)
[12:04:01] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[12:06:38] *** Joins: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de)
[12:06:47] *** Quits: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de) (Client Quit)
[12:08:21] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Read error: Connection reset by peer)
[12:10:20] *** Quits: Guest80 (~Guest80@pd9ed7c28.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[12:10:50] *** Joins: DrMax (~DrMax@node-1w7jra94757fyzph62x7eqeod.ipv6.telus.net)
[12:10:52] *** Joins: ambasta (~ambasta@89.46.62.147)
[12:23:01] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[12:27:25] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[12:27:34] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 260 seconds)
[12:28:23] <LordKalma> !rq
[12:28:23] <nolyc> LordKalma: <ville> don't believe the cmake propaganda. make is fine
[12:29:15] *** Joins: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de)
[12:29:23] *** Quits: andreasbuhr (~quassel@p549dbb0b.dip0.t-ipconnect.de) (Client Quit)
[12:30:26] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:31:51] *** Quits: traxex (~traxex@sdf.org) (Changing host)
[12:31:51] *** Joins: traxex (~traxex@user/traxex)
[12:42:18] <lkor> cmake is fine, too
[12:42:21] *** lkor is now known as lionkor
[12:51:30] *** Joins: AmR (~AmREiSa@156.199.219.108)
[12:51:30] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[12:54:07] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[12:57:30] *** Guest2104 is now known as phoenix
[13:01:19] <johnny> me still no likely cmake, although that's the fault of the scripting language, not the tech itself
[13:11:20] *** Joins: plastico (~plastico@neomutt/plastico)
[13:17:51] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:23:31] *** Quits: ambasta (~ambasta@89.46.62.147) (Remote host closed the connection)
[13:24:08] *** Joins: Simplar (~Simplar@188.163.92.225)
[13:28:01] *** Joins: robod34 (Username@79.113.195.239)
[13:31:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[13:32:06] *** Quits: ville (~ville@178-75-128-81.bb.dnainternet.fi) (Quit: leaving)
[13:32:20] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:33:22] *** Joins: ville (~ville@178-75-128-81.bb.dnainternet.fi)
[13:38:04] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:12] *** ChanServ sets mode: +v npaperbot
[13:40:39] *** Quits: NiD27 (~nid27@49.205.144.153) (Quit: Leaving)
[13:41:31] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[13:43:24] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[13:56:18] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[14:02:53] *** Joins: sysctl (~user@88.215.77.255)
[14:06:14] *** Quits: sysctl (~user@88.215.77.255) (Read error: Connection reset by peer)
[14:07:17] *** Joins: sysctl (~user@88.215.77.255)
[14:08:21] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[14:09:03] *** Joins: teepee (~teepee@openscad/teepee)
[14:10:39] <LordKalma> PJBoy, ping
[14:11:04] <PJBoy> yo gabba gabba
[14:12:33] <LordKalma> did you the discussions I tagged you in? the cmake extension, and the footgun that was installing vs22?
[14:15:24] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:15:43] <PJBoy> I was pretty out of it yesterday
[14:15:57] <PJBoy> I saw that VS2022 was not for production builds
[14:18:50] <LordKalma> anyway, this: https://github.com/microsoft/vscode-cmake-tools/issues/93#issuecomment-968120396
[14:19:03] <LordKalma> someone made an extension for provide syntax highlighting for cmake on vscode
[14:19:07] <LordKalma> that's not that old twxs' one
[14:19:22] <LordKalma> pretty decent actually, albeit not (yet?) open sourced
[14:28:53] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[14:31:00] <PJBoy> doesn't the CMake extension provide CMake highlighting?
[14:31:14] <PJBoy> yeah it does
[14:31:21] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[14:31:43] <PJBoy> oh that was twxs
[14:31:51] <PJBoy> I thought it was microsoft because CMake Tools was
[14:31:52] <LordKalma> it was twxs' and it sucks
[14:31:58] <LordKalma> I ranted about that exactly
[14:32:06] <LordKalma> MS makes an extension to provide the full tooling
[14:32:10] <LordKalma> doesn't give syntax highlightinh
[14:32:15] <PJBoy> it works in our CMakeLists pretty well
[14:32:30] <LordKalma> in all fairness, they didn't do the extension, they got it from vector-of-bool when they abandoned
[14:32:39] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:44] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 265 seconds)
[14:33:23] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[14:33:54] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[14:34:01] <LordKalma> but yeah, this new extension is actually working pretty well
[14:34:22] <PJBoy> so it's just a replacement for the CMake extension?
[14:34:29] <PJBoy> will the two not conflict?
[14:34:37] <PJBoy> CMake Tools presumably has a dependency on CMake
[14:34:38] <LordKalma> it's a replacement for twxs'
[14:34:44] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[14:34:45] <LordKalma> it doesn't
[14:34:51] <LordKalma> the MS tooling extension is pretty much independent
[14:34:57] <PJBoy> oh, but it installed it automatically when I installed CMake
[14:35:07] <PJBoy> *when I installed CMake Tools
[14:35:22] <LordKalma> maybe you intalled a bundle, not the extension
[14:35:26] <LordKalma> vscode has extension packs
[14:35:39] <PJBoy> I didn't think I did, but maybe
[14:35:41] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Client Quit)
[14:36:14] <LordKalma> anyway, the project looks promising, if it doesn't get abandoned
[14:36:33] <LordKalma> it's written in C# of all things, and the dev's github profile is all C#?!
[14:38:21] <LordKalma> PJBoy, btw, if you feel like having a cmake auto-formatter, cmake-format is an extension, but yo have to install the python packaage of the same name yourself
[14:38:27] <LordKalma> and you can cmake a .cmake-format.json
[14:38:39] <LordKalma> *can make
[14:39:00] <PJBoy> I thought clangd did clang formatting
[14:39:07] <PJBoy> I read that from the docs
[14:39:08] <LordKalma> that's for c++
[14:39:12] <PJBoy> ohhh
[14:39:14] <PJBoy> clang format for cmake
[14:39:19] <LordKalma> cmake-format :)
[14:39:26] <PJBoy> oh shit I just can't read
[14:39:29] <PJBoy> ok cool
[14:39:50] <LordKalma> now that you mention it, I'm not sure what extension is making my clang-format.. yeah, it's probably clangd
[14:43:36] *** Joins: Guest88 (~Guest88@62-78-131-135.bb.dnainternet.fi)
[14:43:42] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Remote host closed the connection)
[14:44:11] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[14:45:04] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:45:19] *** Joins: cursey (~cursey@user/cursey)
[14:47:14] *** Quits: Guest88 (~Guest88@62-78-131-135.bb.dnainternet.fi) (Quit: Client closed)
[14:51:23] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 264 seconds)
[14:56:36] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[14:57:07] *** Quits: xq (~xq@user/xq) (Ping timeout: 268 seconds)
[14:57:28] *** Quits: Oxyd (~oxyd@user/oxyd) (Ping timeout: 256 seconds)
[14:59:19] <johnny> it likey is if it's vscode
[14:59:52] *** Joins: Oxyd (~oxyd@user/oxyd)
[15:00:37] <johnny> LordKalma, for C++ and not ?
[15:00:47] <johnny> i mean for what that's not C++
[15:01:09] <johnny> clang-format is something i use for C++ only.. i wouldn't use it for anything else
[15:04:32] <fiesh> it's actually surprisingly good also for TypeScript / JavaScript -- although not as good as eslint
[15:07:04] *** Joins: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz)
[15:07:54] <johnny> oh, i use prettier not eslint
[15:08:17] <johnny> well i use eslint for the non formatting stuff of course
[15:08:56] <johnny> the only really popular language i don't know anything about formatting is java
[15:09:23] <johnny> sorry i meant non MS languages (discounting ts of course)
[15:09:35] <johnny> because i don't know anything about formatting C# either
[15:13:01] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 265 seconds)
[15:16:07] <LordKalma> I too use prettier for js
[15:16:17] <LordKalma> it's whwatever I had installed when I started using node last week hahah
[15:16:38] <johnny> the equivalent for python which is black, i don't like quite as much
[15:16:51] <LordKalma> I like black
[15:16:51] <johnny> at least prettier lets me configure quotes
[15:16:58] <LordKalma> it's strict AF, that's true
[15:17:10] <johnny> prettier has 4 config options and that's it
[15:17:24] <johnny> one whihc is only needed in js and no other language
[15:17:34] <johnny> well not *needed* really
[15:17:49] <johnny> they don't need to provide the semicolon config option
[15:18:59] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:21:20] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[15:22:47] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[15:22:50] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[15:23:41] *** Joins: cm007magnum (~Rheanna@218.78.104.50)
[15:25:35] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 264 seconds)
[15:29:51] *** Joins: JohnMS_WORK (~kvirc@213.134.183.29)
[15:31:24] *** Quits: johnny (~johnny@user/johnny) (Remote host closed the connection)
[15:32:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[15:32:37] <PJBoy> lets try this include what you use thing
[15:33:02] *** Joins: johnny (~johnny@user/johnny)
[15:33:08] <PJBoy> I reckon it's going to need some serious tweaking with the way our unit tests seem to work
[15:35:46] <ville> 4 config options? amateurs. uncrustify has 750+ config options
[15:36:49] <johnny> lol
[15:37:40] <johnny> they actually want 0 config options, but opinions on semicolon, single quotes, lambda argument parens, and trailing comma are quite contentious
[15:38:26] <cbreak> what's the problem with semicolons?
[15:38:32] <cbreak> use them. They're required.
[15:38:38] <johnny> not in js they aren't
[15:38:51] <cbreak> they are required eventually.
[15:38:58] <cbreak> if you don't write them, the language will insert them for you
[15:39:03] <johnny> sure
[15:39:09] <cbreak> in "random" places, until it stops giving errors
[15:39:19] <johnny> well prettier handles the part where it's ambiguous
[15:39:24] *** Joins: xq (~xq@user/xq)
[15:39:35] <ville> deciding to use uncrustify is one of those "beware of what you ask for" situations. sure you'll have all the options, but you also have all the options. prepapre to waste a day or two
[15:39:36] <johnny> so it will add them in the places to avoid the interpreter doing that
[15:39:48] <johnny> that's the opposite of what i want :)
[15:39:50] <PJBoy> opting for no semicolons is probably the smarter choice
[15:40:06] <PJBoy> even if you write semicolons everywhere, automatic semicolon insertion still happens
[15:40:14] <PJBoy> so it's really just misleading to add manual semicolons
[15:40:15] <cbreak> just insert semicolons everywhere, so the language doesn't do anything dumb
[15:40:30] <PJBoy> language will still be dumb
[15:40:32] <johnny> two opposite opinions there :)
[15:40:38] <ville> PJBoy: or get your interpreter to warn/error if it's able to insert them
[15:40:43] <cbreak> it shouldn't be this dumb, when it doesn't give syntax errors
[15:40:51] <PJBoy> but javascript interpreters are browsers
[15:40:55] <PJBoy> and they don't do that
[15:41:02] <cbreak> If I understand it correctly, it'll only try to add semicolons if there's some syntax error
[15:41:10] <johnny> i sthat's not the only javascript interpreter!
[15:41:11] <PJBoy> nope
[15:41:23] <johnny> you can use it as an embedded scripting language or even on an mcu.. and of course node
[15:41:31] <PJBoy> the example that got me to distrust semicolons in javascript was `return [newline] obj;`
[15:41:45] <johnny> fabrice ballard did something neat https://bellard.org/quickjs/
[15:41:46] <PJBoy> which gets transformed into `return; obj;`
[15:41:50] <PJBoy> no syntax error required
[15:42:10] <PJBoy> and that's with manual semicolon placement
[15:42:12] <cbreak> PJBoy: w.t.f.
[15:42:18] <cbreak> is that language doing
[15:42:29] <PJBoy> you can't avoid knowing the semicolon insertion rules in javascript
[15:42:55] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[15:44:12] <johnny> PJBoy, perhaps because i'm used to semicolon requiring languages, i don't find it to be that strange
[15:44:34] <PJBoy> we're all used to semicolon requiring languages here
[15:44:47] <johnny> i've still yet to run into a problem caused by that
[15:45:05] <PJBoy> AFAIK javascript is the only one that has semicolons that aren't required, but will add them anyway without your consent, and cause a bug because of it
[15:45:26] <PJBoy> it's the most redundantly confused concept of a semicolon
[15:45:29] <johnny> it's at least the only one that's known well enough
[15:46:20] <johnny> i forgot about this
[15:46:21] <johnny> https://bellard.org/jslinux/tech.html
[15:46:40] *** Joins: slavfox_ (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[15:47:19] <johnny> i mean "In 2011 I wrote the initial version of JSLinux, the first PC/x86 emulator in Javascript running Linux"
[15:47:32] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (Ping timeout: 260 seconds)
[15:47:32] *** slavfox_ is now known as slavfox
[15:47:57] <johnny> it's not everyday that you read a sentence like that
[15:48:48] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[15:48:58] <PJBoy> stuff written in JS got significantly less impressive after emscripten came out
[15:49:22] <johnny> and yet we still don't see anything really using it except for video games
[15:49:36] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Ping timeout: 256 seconds)
[15:49:45] <PJBoy> there's usually not too much reason to run stuff in JS when there's an alternative
[15:49:48] <johnny> if you're avoiding the dom, then it's all well in good
[15:49:53] <johnny> but i'd still rather write js 99% of the time
[15:49:57] <johnny> well.. typescript really
[15:50:22] <johnny> because generally i'm not avoiding the dom, i want to use the dom
[15:50:36] <johnny> i do hwoever plan on using emscripten for this C++ program i did write
[15:50:54] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[15:50:57] <johnny> but that's only because i'm not porting somebody else's code that's still actively maintained in which i don't atually care much about it's main usecse
[15:51:04] *** Joins: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736)
[15:51:08] <cbreak> I used emscripten at work to use C++ libs in a web page :)
[15:51:24] <cbreak> it's so much better than writing JS directly
[15:51:40] <johnny> i disagree with that heavily, but that's because i don't find C++ a nice language to write
[15:51:52] <johnny> it's pretty close to being ok
[15:52:08] <johnny> would be nice if folks would solve some of the rough edges... and give us pattern matching and stuff :(
[15:53:57] <barix> emscripten is nice as long as the code you're compiling doesn't have to access the DOM APIs a lot
[15:54:24] <johnny> that's what i figure
[15:54:29] <johnny> but how bad is it really?
[15:54:35] <cbreak> johnny: using a C++ lib is much nicer than reimplementing it in JS :P
[15:55:13] <johnny> the program currently works by taking a whole input file and sending a whole output file, so it's mostly for batch stuff.. i figure that'd be fine
[15:55:29] <johnny> but.. let's say i wanted to view the log messages.. now that doesn't sound so fine
[15:55:40] <johnny> or perhaps i make it less batchlike
[15:55:51] <johnny> barix, is it actually worse than a network roundtrip?
[15:56:44] <johnny> i haven't looked that closely. all i have is a bunch of vague assertions so far
[15:56:50] <johnny> like "it's slow"
[15:57:34] <barix> performance should be fine, but writing the glue code (between emscripten and JS) is annoying
[15:57:42] <barix> since only JS can access the DOM
[15:57:52] <johnny> can't any of that be automated?
[15:58:27] <johnny> i figure i'll know more when i actually try to do it of course
[15:58:42] <barix> don't know about the tooling landscape, sorry
[16:00:29] <johnny> well i'm sure i'm in for a fun time either way
[16:02:57] <LordKalma> JS rules are... amazing
[16:03:13] <LordKalma> auto ; on new line.. the dumb rules with `this`....
[16:03:40] <barix> rules? what rules? you can concatenate arrays with hash maps, and you will get *a* result.
[16:03:59] <johnny> and that is why i always use typescript
[16:04:05] <LordKalma> emphasis on *a* result :D
[16:04:42] *** Joins: Leone (~Leo@216.154.50.172)
[16:04:46] <LordKalma> I've actually found writing React.js decent enougj
[16:05:02] <LordKalma> their language extension, JSX, is pretty cool for the job
[16:05:10] <johnny> indeed
[16:05:21] <johnny> and now it's nap time.
[16:05:30] <LordKalma> i'm doing it with JS, I know you can also do it with TS, but I haven't explored TS
[16:06:07] <johnny> writing plain js feels weird to me after using tyepscript. i'm not used to intuiting the types anymore
[16:06:25] <LordKalma> that happens to me when I write python after a bit of C++  hahah
[16:06:38] <LordKalma> with JSX you end up writing the types a lot haha
[16:07:04] <LordKalma> but yeah, I should explore TS, and become a vscode extension writer
[16:07:14] <johnny> also, it's worth exploring ts just for the different ways typesystems cna work..  like say ou define an object you wanna use as a type, but then later on, you only want part of the object, you can totally do that
[16:07:29] <johnny> you can use Pick to pick fields from it, or use Omit
[16:07:47] <LordKalma> isn't that the {elem1, elem2} = obj syntax in js?
[16:08:33] <johnny> no, i'm talking for for types, like say function (User user).
[16:08:56] *** Joins: ravan (~ravan@user/ravan)
[16:10:07] <johnny> err function (user: User) {}  you can say function(user: Omit<User, "password">) {}
[16:10:30] <LordKalma> interesting
[16:10:36] *** Quits: saohh (~saohh@ip-78-45-147-109.net.upcbroadband.cz) (Quit: Leaving)
[16:11:00] <johnny> there's also Partial which can make all the fields of  type optional
[16:11:27] <johnny> it's worth looking into just to see how folks do type systems elsewhere https://www.typescriptlang.org/docs/handbook/utility-types.html
[16:11:28] *** Quits: cm007magnum (~Rheanna@218.78.104.50) (Remote host closed the connection)
[16:13:03] <johnny> and of course has type aliasing, so you'd probably really be doing   type someType = Omit<otherType, "field">
[16:13:21] <johnny> ok, now seriously.. naptime. but check it out
[16:13:48] *** Joins: cm007magnum (~Rheanna@101.91.232.166)
[16:26:33] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Read error: Connection reset by peer)
[16:32:11] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[16:34:46] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:34:50] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:42:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:46:02] *** Joins: gggp (~gggp@li2010-23.members.linode.com)
[16:50:00] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:50:27] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:51:27] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:51:36] *** Quits: gggp (~gggp@li2010-23.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[16:51:48] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:52:23] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:01:19] *** Quits: cm007magnum (~Rheanna@101.91.232.166) (Remote host closed the connection)
[17:03:36] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[17:04:14] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:09:37] *** Joins: fkdnd (~fkdnd@178.49.152.151)
[17:12:14] *** Joins: Simplar (~Simplar@188.163.92.225)
[17:13:42] *** Quits: proller (~p@2a02:6b8:0:40c:94a:2d18:3aad:1736) (Remote host closed the connection)
[17:14:48] *** Joins: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462)
[17:15:03] <PJBoy> include-what-you-use isn't the most usable tool :/
[17:15:24] <PJBoy> the VS code extension only works on one source file at a time
[17:15:56] <PJBoy> integrating it with make/cmake is combining all the IWYU output with all the build output (warnings etc.)
[17:16:55] <rpav> "enables a mode where CMake first compiles a source file, and then runs IWYU on it" .. why wouldn't you run IWYU on it first
[17:17:03] *** Quits: magla (~gelignite@55d4d56a.access.ecotel.net) (Quit: Stay safe!)
[17:17:33] <rpav> but but really it seems like it's meant to be used file-by-file and if you want to fix your entire codebase, write a script
[17:17:57] <PJBoy> it does seem like that
[17:18:30] <PJBoy> think I'm gonna put a pin in that one
[17:23:42] <PJBoy> although I'll give the fix_includes.py thing a quick try
[17:26:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[17:27:56] *** Joins: fkdnd3 (~fkdnd@178.49.152.151)
[17:28:48] *** Quits: fkdnd (~fkdnd@178.49.152.151) (Ping timeout: 256 seconds)
[17:30:39] *** Joins: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603)
[17:33:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[17:34:22] *** Quits: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603) (Client Quit)
[17:34:37] *** Joins: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603)
[17:35:16] *** Joins: paule32_ (~paule32@user/paule32)
[17:38:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:12] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:12] *** ChanServ sets mode: +v npaperbot
[17:38:26] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 260 seconds)
[17:40:16] *** Quits: proller (~p@2a02:6b8:0:40c:7c4:4db1:a09b:f462) (Ping timeout: 265 seconds)
[17:40:31] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[17:42:14] *** Quits: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603) (Quit: Leaving)
[17:42:30] *** Joins: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603)
[17:46:10] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:52:42] *** Joins: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984)
[17:56:27] <rpav> can it search your entire codebase or does it only remove includes you don't use?
[17:58:34] <PJBoy> well I just ran it now using that fix-include thing
[17:59:12] <PJBoy> seems like it searches the entire codebase
[18:02:53] <PJBoy> hm
[18:03:00] <PJBoy> it is removing some headers incorrectly
[18:03:18] <PJBoy> or maybe it's depending on them being included in the header
[18:03:46] <PJBoy> it's managed to add a forward declaration of a class that already has its header included
[18:08:58] *** Joins: ravan_ (~ravan@user/ravan)
[18:11:34] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 260 seconds)
[18:23:07] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:23:55] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[18:25:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Client Quit)
[18:26:19] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[18:27:32] *** Quits: manic_laughter (~manic_lau@2405:201:e030:f044:2302:61df:8e6e:1603) (Quit: Leaving)
[18:27:55] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:8c8e:69d7:47f4)
[18:27:55] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:4ee:8c8e:69d7:47f4) (Changing host)
[18:27:55] *** Joins: skapata (~Skapata@user/skapata)
[18:29:00] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[18:34:30] *** Quits: JohnMS_WORK (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[18:38:43] *** Joins: Mooncairn (~mooncairn@user/mooncairn)
[18:39:22] *** Joins: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2)
[18:40:40] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[18:41:08] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[18:41:29] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[18:44:21] *** Joins: cm007magnum (~Rheanna@61.171.21.169)
[18:47:35] <rpav> if you can avoid needing the header, and make do with a forward decl, it's a win
[18:49:36] *** Quits: emerent (~quassel@p200300cd574309a3ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:50:12] *** Joins: emerent (~quassel@p200300cd57430928ba27ebfffed28a59.dip0.t-ipconnect.de)
[18:52:55] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[18:55:52] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[18:57:21] <PJBoy> it has both though
[18:57:27] <rpav> weird
[18:58:04] <rpav> unrelated, it's still annoying there's not std::signof(T) which is std::copysign(T(1), T)
[18:58:57] <PJBoy> like std::signbit?
[19:01:30] <rpav> no not like signbit
[19:01:47] <InPhase> Also straight comparison works as long as you don't care about NaN signs.  And there are virtually no reasons to care about NaN signs as they're meaningless.
[19:01:52] <rpav> literally std::copysign(T(1), T)
[19:02:00] <rpav> i.e. you get -1 or 1
[19:02:44] <rpav> this is useful for cases where you want to multiplicatively combine for N toggles
[19:03:38] <PJBoy> signbit * 2 - 1 then
[19:03:55] <rpav> even less convenient to write than copysign :p
[19:04:21] <rpav> the problem isn't that you can't, it's that writing out the thing each time is a bit error-prone and unobvious
[19:04:58] <PJBoy> yeah that's fair
[19:07:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Read error: Connection reset by peer)
[19:07:09] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[19:07:18] *** Quits: cq-work (~Z_Lund@user/cq-work) (Read error: Connection reset by peer)
[19:10:15] <LordKalma> interesting, I didn't know about IWYU, I'm going to try
[19:11:11] <InPhase> rpav: Hmm.  Interesting that copysign comes out more compact in the assembly than signbit with either *2-1 or ?1:-1
[19:11:12] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:11:49] <fiesh> LordKalma: good luck, I gave up on it quite a while back... actually had a rather big merge request that was then dragged out quite a bit and then lost interest since even with it, it proved non-functional
[19:11:51] *** Joins: xkuru (~xkuru@user/xkuru)
[19:11:51] <InPhase> copysign uses an and/or approach on x86-64 with no test or conditional.
[19:12:29] <LordKalma> honestly it should have been part of clang-tidy
[19:12:45] <LordKalma> the problem is that clang-tidy is basically impossible to plug-in
[19:12:55] <InPhase> rpav: Before testing I assumed copysign would be the less compact of the two.
[19:13:00] <LordKalma> which is basically the reason why clazy exists
[19:13:11] <InPhase> (Or that they would come out equivalent somehow.)
[19:13:21] <LordKalma> basically https://bugs.llvm.org//show_bug.cgi?id=32739
[19:13:58] <InPhase> https://godbolt.org/z/WM54ndEa9
[19:17:28] *** Joins: magla (~gelignite@55d4d56a.access.ecotel.net)
[19:18:22] <LordKalma> InPhase, add -march=haswell ;)
[19:18:32] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[19:19:21] <InPhase> LordKalma: It picks up some v's but otherwise looks about the same?
[19:19:51] <LordKalma> yes, pretty much
[19:22:01] <rpav> InPhase: huh, i'm surprised they don't optimize equivalently
[19:22:08] <LordKalma> yeah me too
[19:22:11] <rpav> just one of those things that's not builtin i guess
[19:22:19] <rpav> or like explicitly-checked-for
[19:23:35] <InPhase> clang actually gets them closer.
[19:23:39] <InPhase> But not equivalent.
[19:24:20] <InPhase> clang makes the bitmult and bitcond equivalent with no conditional, but picks up two extra ops on top of the and/or pattern.
[19:24:42] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:27:24] <InPhase> Hmm.  That inspired me to check current benchmarks, and it looks like clang is very narrowly beating gcc on average in runtime benchmarks now.
[19:28:10] <InPhase> There are still some fraction of cases where gcc edges ahead, and they are mostly really close though.
[19:28:46] <InPhase> I'd rough estimate clang on average produces executables about 1-2% faster.
[19:30:15] <InPhase> The last time I seriously investigated that clang was about 3% slower, so there is a progression happening, and apparently some healthy competition continues.
[19:31:26] *** Quits: cm007magnum (~Rheanna@61.171.21.169) (Remote host closed the connection)
[19:31:29] *** Joins: paul424 (~tom@ip-5-172-232-47.multi.internet.cyfrowypolsat.pl)
[19:31:30] *** Joins: pulse (~pulse@user/pulse)
[19:32:23] <InPhase> And it seems that MSVC has missed the optimization competitiveness game entirely, and is way behind these two.
[19:32:34] <AmR> Can I set qt-creator with mingw in Linux ?
[19:33:38] *** Joins: cm007magnum (~Rheanna@61.171.69.141)
[19:35:28] <InPhase> AmR: Yeah, people do cross-compilation with exactly that.  I haven't personally tried it like that.  I can't bring myself to trust a build without a native platform smoke test.
[19:35:33] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[19:37:14] *** Quits: proller (~p@2a02:6b8:0:40c:9b16:3a15:48a7:1984) (Ping timeout: 265 seconds)
[19:38:12] <AmR> Then It's best to have vm
[19:40:27] *** Quits: Cyp (~cyp@192038135092.mbb.telenor.dk) (Remote host closed the connection)
[19:40:55] *** Joins: Cyp (~cyp@192038135092.mbb.telenor.dk)
[19:44:45] <rpav> auto str = "ls -l"_sh | "grep foo"_sh; // go
[19:45:00] <rpav> for(auto line : "grep -r ..."_sh) { ... }
[19:45:01] *** Joins: great_taste (~great_tas@190.32.235.20)
[19:46:13] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.3)
[19:47:46] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Read error: Connection reset by peer)
[19:47:52] *** Joins: uramhoaH (~Haohmaru@195.24.53.110)
[19:48:12] *** uramhoaH is now known as Haohmaru
[19:51:13] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:54:05] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[19:55:21] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[19:55:49] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:c932:ac4e:edba:8a8b)
[19:56:48] *** Joins: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c)
[19:57:26] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[19:57:52] *** Joins: Juliu_ (~Juliu@2a02:810b:c640:3ec0:2930:75d1:6197:9e59)
[20:00:32] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[20:01:53] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:c932:ac4e:edba:8a8b) (Ping timeout: 265 seconds)
[20:14:34] *** Joins: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc)
[20:15:00] *** Joins: ravan__ (~ravan@user/ravan)
[20:17:47] *** Quits: ravan_ (~ravan@user/ravan) (Ping timeout: 268 seconds)
[20:18:16] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[20:18:19] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 265 seconds)
[20:21:20] *** Quits: cm007magnum (~Rheanna@61.171.69.141) (Remote host closed the connection)
[20:22:52] *** Joins: cm007magnum (~Rheanna@218.78.79.129)
[20:25:20] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:28:55] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:36:52] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:40:16] *** Quits: onizu (uid373383@uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[20:40:31] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:45:41] <paul424> void GameEntity::createMesh(NodeType nt){ createMeshLocal(nt);}
[20:46:17] <paul424> the family of methods is defined virtual , now what function would be called in this case ? dynamically or statistically ?
[20:46:38] <paul424> the family of createMeshLocal(nt) is defined virtual
[20:47:18] <paul424> it's like this->createMeshLocal(nt) so it smells like dynamic ...
[20:48:01] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:48:10] *** Joins: ashafq_ (~ashafq@103.60.175.13)
[20:50:32] <ashafq_> Hello C++, I have been trying to solve this leetcode example. But I can't figure out how to do DFS recursively. I am looking at different tutorials about it, but most of them are using different convention.
[20:50:40] <paul424> but on the other hand, the  type of this is (GameEntity*) . Or can this pointer in this context be of derrived type ? please help
[20:50:49] <ashafq_> https://leetcode.com/problems/all-paths-from-source-to-target/ This is the example
[20:51:44] <ashafq_> Can anyone point me to the term I need to google? I tried "DFS recursive +adjacency +list"
[20:52:59] <paul424> ashafq_, just mark each node with bool visited ...
[20:52:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:53:38] <paul424> when it's not visited you launch your procedure for visit(thisNode) , which begins with marking the flag visited as true
[20:53:50] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[20:54:05] <CarloWood> You don't need visited, it is acyclic.
[20:54:32] <paul424> ohh , I didn't read it carefully so not even need for the visited flag
[20:54:33] <CarloWood> ashafq_: it seems trivial to me, no need to Google anything - just code it :/
[20:55:06] <ashafq_> http://paste.debian.net/1219626/ this is what I have so far, but honestly I don't get it.
[20:57:52] <CarloWood> ashafq_: Write a function that returns all possible paths starting from x.  Then the answer is that function starting from 0.  Now implement that function by running over all nodes that are reachable from x and then generate all possible paths from those. Combine and return.
[20:58:33] <PJBoy> > if (current >= static_cast<int>(graph.size() - 1))
[20:58:42] <PJBoy> potential bug there
[20:58:46] <PJBoy> if the graph can ever be empty
[20:59:28] <CarloWood> I think it is a given that node 0 exists.
[21:00:49] <PJBoy> what about subgraphs?
[21:01:01] <PJBoy> oh I misread
[21:01:45] <ashafq_> Any pointers on what to read up on in order to understand problems like these?
[21:02:06] <ashafq_> I think I am missing some of the basics needed to solve this problem
[21:02:16] <CarloWood> No you don't.
[21:02:21] <CarloWood> Just think harder.
[21:05:15] <Raziel> the C++ community and the dark souls community are actually 100% overlapping
[21:05:17] <Raziel> just git gud :^)
[21:05:38] <PJBoy> leetcode isn't an educational website :/
[21:05:57] <PJBoy> I really wouldn't know what to recommend though
[21:06:18] <Raziel> sure it is, if you want to be educated in implementing algorithms that you should just be copying off github anyway
[21:06:51] <PJBoy> man that hurts
[21:06:56] <PJBoy> that sentence physically hurt
[21:07:14] <ashafq_> Raziel: Please add "low quality" to that sentence
[21:07:17] <PJBoy> people write such bad solutions to these things
[21:07:18] * Raziel is now playing: Dwayne Johnson - You're Welcome
[21:07:29] <Raziel> hehhhehe
[21:07:31] <Raziel> but yeah.
[21:07:57] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[21:08:51] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:09:28] <ashafq_> PJBoy: I bought "Cracking the coding interview" book
[21:09:36] <Raziel> don't get me wrong, learning and knowing how some things like that work isn't a bad thing. but >_>
[21:10:07] <Raziel> there's a big leap from knowing how something works in general terms, to making an an actual good implementation of it
[21:10:08] <ashafq_> But I think I kinda regret that now...
[21:10:20] <PJBoy> cracking the code interview is supposed to be pretty good
[21:10:24] <PJBoy> but I've never read it
[21:10:55] <ashafq_> Well it's good... but pretty depressing if that is the state of the interview process
[21:11:18] <ashafq_> The code samples could be better
[21:11:26] *** Quits: cm007magnum (~Rheanna@218.78.79.129) (Remote host closed the connection)
[21:11:41] <Raziel> it depends a lot on who you're interviewing for. from what I've seen, most half-decent companies and interviewers want to see how you think, they want you to go over the way you go about solving something.
[21:11:51] <Raziel> they don't want to see that you memorized an entire book or leetcode implementations
[21:12:28] <Raziel> unfortunately, there's probably still many that aren't half-decent
[21:13:00] <kalven> how do you see how a candidate thinks?
[21:13:28] <ashafq_> Raziel: Also, "False negatives are acceptable"
[21:13:43] <Raziel> you can infer a good amount from giving them an actual *logical* problem to solve and watching how they solve it, and having them tell you what they're doing
[21:14:24] <ashafq_> kalven: I start with asking them to find all roots of (8 ^ 1/3)
[21:14:36] *** Joins: cm007magnum (~Rheanna@61.171.38.68)
[21:15:27] <kalven> Raziel: what's an example of such a problem? I'm genuinely curious
[21:16:49] *** Quits: jkaye (~jkaye@2601:281:8300:7530:e618:9306:a767:ab2) (Ping timeout: 250 seconds)
[21:17:41] <ashafq_> kalven: I have also seen candidates struggle with code reading than writing
[21:18:04] <Raziel> kalven, basically anything that can be implemented in a decently short amount of time just by being given relatively simple rules, without requiring highly specific prior knowledge. I've seen things like simple cellular automatons used pretty effectively, as well as things like converting a time from 360deg notation to hours:minutes
[21:18:39] <PJBoy> my last interview didn't do any of this leetcode shit
[21:18:40] <ashafq_> Raziel: ooo that's a nice question. Can I steal it? ;)
[21:18:44] *** Quits: proller (~p@2a02:6b8:0:40c:7d38:5495:f4b4:c9dc) (Ping timeout: 265 seconds)
[21:18:46] <paul424> kalven, Raziel PJBoy hello ,and how about my question ?
[21:19:00] <PJBoy> mostly quizzed me on OO design and coupling, how to decouple etc
[21:19:03] <paul424> as usual I remind that I am not newbie :D !
[21:19:46] *** Joins: cart_man (~rynot@host-78-144-121-1.as13285.net)
[21:19:48] <PJBoy> I'm still at work, so I can't commit time to think about your question ;)
[21:19:49] <kalven> Raziel: okay, thanks - so basically more focus on the coding part than algorithms?
[21:20:14] <Raziel> basically. and on the logic of being able to turn a set of general, simple, easy enough to understand rules into an algorithm.
[21:21:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[21:21:03] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:14] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[21:21:47] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[21:21:57] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[21:22:01] <Raziel> rather than reproducing an algorithm that you realistically need to have known prior (because logically implementing it from scratch would be far too complex and long to be done in the time expected during an interview or such)
[21:22:36] *** Quits: z9z0b3t1c (z9z0b3t1c@gateway/vpn/protonvpn/z9z0b3t1c) (Ping timeout: 265 seconds)
[21:23:03] <kalven> ok
[21:23:22] * imMute had to reverse a linkekd list for my last interview.  had never done that before, so the interviewer got to struggle along with me.
[21:25:08] <Raziel> paul424, I unfortunately have no idea. :p I'd gues dynamic but idk
[21:25:19] <CarloWood> Lol, I managed to write in geordo
[21:25:24] <CarloWood> geordi*
[21:25:26] <CarloWood>  { cout << solve(0, in); } using Gt = vector<vector<int>>; Gt in = {{4,3,1},{3,2,4},{3},{4},{1}}; int const e = in.size() - 1; Gt solve(int s, Gt const& g) { Gt r; if (s == e) return {{s}}; for (int n : g[s]) { Gt p = solve(n, g); if (!p.empty()) { for (auto&& o : p) { r.push_back({s}); r.back().insert(r.back().end(), o.begin(), o.end()); } } }; return r; }
[21:25:28] <geordi> {{0, 4}, {0, 3, 4}, {0, 1, 3, 4}, {0, 1, 2, 3, 4}, {0, 1, 4}}
[21:25:45] <paul424> Raziel, yeah whether the this pointers in c++ are polymorphic or not ...
[21:26:01] <CarloWood> ashafq_: there you go.. the complete program in one line ^^^
[21:26:39] <ashafq_> CarloWood: :'( that's awesome
[21:27:08] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:30:57] <CarloWood> Lets test the first example too...
[21:31:28] <CarloWood> geordi: replace {{4,3,1},{3,2,4},{3},{4},{1}} with {{1,2},{3},{3},{}}
[21:31:30] <geordi> {{0, 1, 3}, {0, 2, 3}}
[21:31:37] <ashafq_> nice :)
[21:31:45] <CarloWood> Seems to work
[21:32:30] <imMute> paul424: you can still call virtual functions with them, so it's polymorphic, right?
[21:32:48] <paul424> imMute, that was me who asked the question :D
[21:33:11] <paul424> void GameEntity::createMesh(NodeType nt){ createMeshLocal(nt);}
[21:33:22] <paul424> the family of createMeshLocal(nt) is defined virtual
[21:34:15] <imMute> paul424: so that'll call the leaf-most version of createMeshLocal.   is that the question?
[21:34:35] <Raziel> paul424, https://wandbox.org/permlink/EufycLDsqHeVJcaP does this help?
[21:34:37] <Raziel> lol
[21:36:32] <paul424> yeah and the gameEntity, is in the root of all entities ...., imMute
[21:38:05] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:14] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:14] *** ChanServ sets mode: +v npaperbot
[21:44:32] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[21:57:01] *** Joins: horribleprogram (~user@user/horribleprogram)
[21:58:15] *** Joins: Simplar (~Simplar@188.163.92.225)
[22:01:24] *** Quits: cm007magnum (~Rheanna@61.171.38.68) (Remote host closed the connection)
[22:03:33] *** Joins: cm007magnum (~Rheanna@101.89.150.168)
[22:06:01] <horribleprogram> i never understood Forward declarations
[22:06:06] <horribleprogram> class Foo;
[22:06:32] <horribleprogram> I know understand it but sort of
[22:06:59] <horribleprogram> like to prevent compile-time #includes, u don't need the "definition" of a class
[22:07:58] <horribleprogram> and I understand why you can do things like class Foo; then start declaring member functions in a .cpp file that has this declaration... and mdata members of pointer or reference to Foo
[22:08:15] <horribleprogram> but I still never understand what exactly a compiler needs, when it needs it, and so on
[22:08:46] <horribleprogram> so when does a compiler need sizeof(Blah); for ex
[22:08:49] <imMute> if it needs to know what members Foo has or the size of Foo (like for passing non-pointer,non-reference instances of Foo)
[22:08:55] <horribleprogram> yeah
[22:08:59] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[22:09:07] <horribleprogram> imMute: this is where I sort of just memorize it
[22:09:27] <imMute> just passing pointers or references to Foo do not need the full definition.  doing anything with a Foo instance is where you start needing the defintion.
[22:09:37] *** paule32_ is now known as paule32
[22:09:50] <horribleprogram> imMute: kk so an assignment
[22:10:04] <imMute> an assignment of what
[22:10:06] <horribleprogram> imMute: class Foo; class Bar { private: Foo* p = nullptr; }
[22:10:21] <imMute> that would work since you're working with a pointer to a Foo
[22:10:22] <horribleprogram> ur not directly accessing the "instance"
[22:10:24] <horribleprogram> ahh
[22:10:26] <horribleprogram> kk
[22:10:29] *** Joins: cq-work (~Z_Lund@user/cq-work)
[22:10:57] <horribleprogram> so why does the compiler need to even know this?
[22:11:05] <imMute> know what?
[22:11:12] <horribleprogram> if anything... class Foo; is just fake
[22:11:32] <imMute> it tells the compiler "hey, there's a class type called Foo".
[22:11:46] <imMute> versus just letting anything that vaguely looks like a class type name "compile"
[22:11:52] <horribleprogram> so the resulting object file has this "Foo" symbol ?
[22:12:03] <horribleprogram> obviously it's unresolved
[22:12:10] <imMute> no, because you didn't define anything.  and Foo never becomes a symbol on its own anyway
[22:12:10] <horribleprogram> and mangled
[22:12:15] <horribleprogram> ahh
[22:12:26] <imMute> you *declared* Foo, but there's no definition of it yet.
[22:12:28] <CarloWood> horribleprogram: A declaration is code that does not result in assembly generation. A definition is usually something that does (at least for the sake of this explanation).  Then if A uses B, you only need a forward declaration of A for the declaration of B (that "uses A") and you need the definition of A for the definition of B that uses the definition of A.
[22:12:45] <horribleprogram> I'm there, it took me a while
[22:12:46] <CarloWood> sorry, if B uses A
[22:12:57] <horribleprogram> to understand a class definition vs declaration...
[22:13:09] <horribleprogram> trust me if u go back 1 month in the logs I was asking for this same thing
[22:13:22] <horribleprogram> now I understand... but the definition itself again, is vague
[22:13:28] <horribleprogram> a class definition doesn't "generate code"
[22:13:46] <CarloWood> Then lets call that declaration.
[22:13:47] <horribleprogram> a definition is enough so that u can basically call sizeof() on it
[22:13:55] <horribleprogram> CarloWood: no that's not true
[22:14:10] <CarloWood> semantics, I said "at least for the sake of this explanation"
[22:14:10] <horribleprogram> cuz u have a .h file with a class declaration... a corresponding .cpp that defines the member functions
[22:14:14] <horribleprogram> oh
[22:14:16] <horribleprogram> kk
[22:14:26] <horribleprogram> and i meant u have a .h file with a class definition
[22:15:20] <horribleprogram> I'm somewhat confident with looking at ELFs now
[22:15:28] <horribleprogram> so my exploration has to come at that level, again
[22:15:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:7289:19f7:f3fa:e188)
[22:15:34] *** Quits: sysctl (~user@88.215.77.255) (Ping timeout: 268 seconds)
[22:15:48] *** Joins: sysctl (~user@88.215.77.255)
[22:16:19] <horribleprogram> has anyone read Chapter 1 of that book
[22:16:25] <horribleprogram> Large Scale C++
[22:16:29] <horribleprogram> apparently it delves into this
[22:16:43] <CarloWood> The not-code-generating-part of B only needs a forward declaration of A. But if you start to use code generated for A, or memory layout of A, then you need the full declaration (non-code-generating-part) of A.
[22:16:54] <horribleprogram> correct
[22:17:02] <horribleprogram> but also not correct
[22:17:16] <CarloWood> Sorry I thought you had a question.
[22:17:16] <horribleprogram> cuz that's actually a definition
[22:17:38] <horribleprogram> ur confusing me
[22:17:39] <horribleprogram> :P
[22:18:15] <horribleprogram> class definition is this... class Foo { public: Foo(); Foo(const Foo&); private: int x; long y; Blah* z; };
[22:18:43] <horribleprogram> sizeof(Foo) here returns sizeof(void *) + sizeof(long) + sizeof(x)
[22:18:47] <CarloWood> Then what do you call  Foo() { }
[22:18:55] <horribleprogram> there's no subobjects
[22:18:57] <horribleprogram> etc
[22:19:11] <horribleprogram> that's a class member function definition...
[22:19:16] <horribleprogram> that happens to be a "constructor"
[22:19:39] <horribleprogram> a non-defaulted default ctor or w/e
[22:19:51] <horribleprogram> an explitictitly defaulted non-default default defaulted default ctor
[22:19:56] <horribleprogram> :P
[22:20:12] <CarloWood> No wonder you are confused if you call everything a definition :P
[22:20:16] <horribleprogram> no
[22:20:17] <horribleprogram> no
[22:20:18] <horribleprogram> no
[22:20:51] <horribleprogram> Foo(); in my example is a member function declaration
[22:20:58] <horribleprogram> the Foo class is a definition there
[22:21:06] <horribleprogram> trust me I have searched and found
[22:22:14] <horribleprogram> when is this Michael Kerrisk guy going to stop writing man pages and update his TLPI for 64 bit
[22:22:43] <horribleprogram> reading 10 year old 2.6 Linux kernel books
[22:22:58] <horribleprogram> at least Discover Modern C++ is now actually updated
[22:24:01] *** Joins: proller (~p@2a02:6b8:b081:8017::1:3c)
[22:24:45] *** Quits: fkdnd3 (~fkdnd@178.49.152.151) (Quit: Client closed)
[22:24:46] <CarloWood> ok, makes sense. I mean, I am not difficult when it comes to meanings of words. Unless of course you change the meaning of words only half the things, like saying a class A virus is one that kills 10% of the population or more. Then saying that for a class A virus the government can violate the constitution as a temporary emergency (makes sense).  Then change the definition of what a class A virus is, but STILL violate the
[22:24:46] <CarloWood> constitution for a new virus that now falls under the new meaning, but not the old (and then keep violating it for years, as opposed to temporary for emergency).
[22:25:01] <CarloWood> for* only half
[22:25:47] <horribleprogram> ...
[22:25:55] <CarloWood> But we can agree on what definition / declaration means.
[22:26:09] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[22:26:09] <horribleprogram> did u just try to get politics in?
[22:26:16] <horribleprogram> cuz that wasn't even sneaky at all
[22:26:25] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (Quit: ZNC 1.8.2 - https://znc.in)
[22:26:46] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[22:27:06] *** Quits: Mooncairn (~mooncairn@user/mooncairn) (Quit: Quitting)
[22:27:10] <CarloWood> It's something that matters. Saying we can't discuss it is as evil as not wanting to discuss how the Jews were treated in the beginning of WWii.  It's about time all of this is discussed EVERYWHERE.
[22:27:32] <horribleprogram> dude, do u know what the majority of political conversations are?
[22:27:40] <horribleprogram> both arguing a different definition
[22:27:56] <TheGuestMovie> whoa, seems like I joined 5 minutes too late
[22:28:04] <TheGuestMovie> what juicy stuff did I miss
[22:28:07] <horribleprogram> obviously the demonizing... Republicans call Democrats baby killers, Democrats call Republicans racists... plays a huge part in dividing
[22:28:17] <TheGuestMovie> quick, before Tino ships us off to c++-offtopic
[22:28:23] <horribleprogram> but it's usually just a debate in which they haven't laid out definitions
[22:29:05] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[22:29:14] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[22:29:22] <CarloWood> The debate is not what matters, the actions are. And those actions are very wrong and heading in a direction nobody should want :(.
[22:29:30] <horribleprogram> I agree
[22:30:16] <horribleprogram> but we've seen this before... in both extreme ends... (Communism and Fascism), we've seen how these "collective ideologies" lead to authoritarian governments
[22:30:30] <CarloWood> It is and it will.
[22:30:54] <cbreak> because americans have a stupid system.
[22:31:08] <cbreak> Apparently they don't even have a pirate party... I mean, come on...
[22:31:18] <horribleprogram> we have Bloc Quebecoic
[22:31:35] <horribleprogram> their party, if elected as the Federal government... would separate
[22:31:35] *** Quits: ashafq_ (~ashafq@103.60.175.13) (Remote host closed the connection)
[22:31:39] <horribleprogram> ...
[22:31:44] <cbreak> from what?
[22:31:47] <horribleprogram> rest of Canada
[22:31:50] <horribleprogram> :P
[22:32:01] <horribleprogram> i just find it ironic
[22:32:06] <cbreak> I don't know if that'd be good or bad.
[22:32:10] <cbreak> or even practical
[22:32:11] <horribleprogram> that they want to win the Federal election just to separate
[22:32:31] <horribleprogram> it's not
[22:32:42] <CarloWood> Not just lead - that is the fcking goal of them if you ask me. Total control.  Very recently there come out a report by a few universities saying that "now is the time to sneak in a personal CO2 ledger (or whats the word) and link that to the QR-code or green pass or however they want to call it because, quote: "before (covid) people weren't used to draconic freedom limiting measures and total control by the government".
[22:32:56] <CarloWood> Many people saw this coming a year ago...
[22:33:10] *** Quits: letto (~letto@86.120.85.133) (Read error: Connection reset by peer)
[22:33:10] <cbreak> here in switzerland, stuff like that is super slow. They've been working on for decades on moving a city from one canton into an other (maybe similar to moving a town into a different state in the US)
[22:33:12] <horribleprogram> Carlo George Orwell say this decades ago
[22:33:19] <CarloWood> Add to that the CBDC that come in 2 years and we have arrive in China 2.0
[22:33:57] <horribleprogram> look around Carlo
[22:34:04] <horribleprogram> ppl are fearful
[22:34:13] <AmR> Any one try cross compiling and run ?
[22:34:14] <horribleprogram> they don't want the responsibility of personal decisions
[22:34:16] <cbreak> yeah, especially americans
[22:34:30] <cbreak> they seem to be so afraid of the government
[22:34:31] <horribleprogram> so they actually want government authoritarian.. it takes away the burden of choice
[22:34:39] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:e14a:d90e:46d2:87c4)
[22:34:40] <horribleprogram> well they have reason
[22:34:48] <cbreak> doesn't look like it
[22:34:53] <CarloWood> Not MOST of them... If I tell my neighbor I am not vaccinated they get MAD. They believe the narrative that the unvaxxed are the reason all those lockdowns and other measure keep going.
[22:34:55] <cbreak> it doesn't seem very competent
[22:35:08] <horribleprogram> Carlo
[22:35:16] <cbreak> CarloWood: they're right :)
[22:35:17] <horribleprogram> misinformation is needed for authoritarian governments
[22:35:37] <cbreak> in aggregate
[22:35:48] <horribleprogram> i bet u if I polled America.. the general consensus would be an exaggerated virus
[22:36:00] <cbreak> AmR: cross compiling is annoying. You can't avoid it?
[22:36:32] *** Joins: letto (~letto@86.120.85.133)
[22:36:39] <horribleprogram> I'm double vaccinated, but I purposefully order a bunch of shit at restaurants then leave
[22:36:50] <horribleprogram> oh I don't show my ID, sorry I'm out
[22:37:02] <AmR> cbreak: Windows Cross compiling I want run .exe file from Qt-Creator with mingw
[22:37:03] <cbreak> from what I read, there are americans that think the virus isn't real
[22:37:03] <horribleprogram> that's literally my only "stand up against tyranny"
[22:37:13] <horribleprogram> cbreak: correct
[22:37:21] <cbreak> which is obviously stupid.
[22:37:33] <CarloWood> cbreak: nope... there are two scenario's: either I did get covid in the past year (and didn't notice it), in which case I have no natural immunity, which is better than the "immunity" that lasts tops 6 months as the result of a vaccine that targets a single proteine of a virus.  Or, I didn't get it - which mean I also didn't infect anyone.
[22:37:36] <horribleprogram> cbreak: but come on bro, u yourself know there's more ppl scared of it than Alex Jones type conspiracy theorests
[22:37:46] <horribleprogram> theorists*?
[22:38:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:19a8:3d0f:213:c260) (Ping timeout: 245 seconds)
[22:38:08] <cbreak> CarloWood: it's an argument for general behavior, not you in particular
[22:38:12] <CarloWood> It has been shown clearly that that vaccinated carry the same load of viral stuff as non-vaccinated. They are equally infectious.
[22:38:28] <cbreak> also, immunity from infection is highly variable, and usually weaker than that from the vaccines
[22:38:29] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:38:32] <cbreak> at least weaker than that of moderna
[22:38:49] <cbreak> that's why vaccination is recommended even for survivers
[22:38:53] <horribleprogram> Carlo actually that's what I thought
[22:38:58] <horribleprogram> but cbreak is right
[22:39:17] <cbreak> CarloWood: it has been shown clearly that vaccinated are less likely to be infected successfully
[22:39:32] <kalven> !focus
[22:39:33] <nolyc> #C++ focuses on C++. Discuss offtopic things elsewhere; #C++-general or #C++-social
[22:39:36] <cbreak> so while once they are infected, they're similarly infectious as unvaccinated, the chance they are is smaller
[22:39:40] <cbreak> also, chance of death is smaller
[22:39:55] <horribleprogram> sure but the virus itself isn't dangerous enough to warrant forced mandates
[22:40:03] <cbreak> AmR: I think mingw is not compatible to visual studio
[22:40:13] <cbreak> so you'd have to compile (or acquire) a Qt compiled with mingw
[22:40:15] <AmR> I don't Use VS
[22:40:18] <cbreak> so... quite annoying
[22:40:21] <horribleprogram> AmR: that's offtopic, go to #workingset if u want to talk cross-compilation
[22:40:34] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[22:40:40] <cbreak> horribleprogram: it is quite dangerous.
[22:40:56] <cbreak> quite a body count so far.
[22:41:01] <horribleprogram> cbreak: sure but I can use ur logic to ban smoking
[22:41:05] <cbreak> yes.
[22:41:07] <cbreak> I am.
[22:41:20] <horribleprogram> I can use ur logic to ban fast food
[22:41:23] <cbreak> yes.
[22:41:25] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[22:41:37] <cbreak> no fast food in public.
[22:41:40] <CarloWood> Well... the funny thing is, I am not necessarily against a totalitarian world government that might prevent a WWiii. And they'll tell us how many kids we can have (and can't have), also fine with me. But I am NOT going let myself inject with an experimental drug every 6 months that DOES have severe side effects and has caused 28,000 deaths world wide and of which MANY doctors say it shouldn't be done (vaxing the whole
[22:41:40] <CarloWood> world only leads to more aggressive mutations)
[22:41:41] <cbreak> I can agree with that
[22:42:13] <cbreak> CarloWood: that's nonsense though.
[22:42:41] <Raziel> is it shitshow friday again?
[22:42:41] <horribleprogram> i can use ur logic to be sexist and racist
[22:42:45] <Raziel> hmm, no, it's monday
[22:42:52] <horribleprogram> majority of crimes are commited by males
[22:42:54] <CarloWood> Lets stop the discussion here... before kalven gets mad. I don't think we'll be able to convince eachother about that part of this topic :(
[22:43:10] <horribleprogram> fine
[22:43:29] *** Quits: xcm (~xcm@user/xcm) (Remote host closed the connection)
[22:43:32] <horribleprogram> but cbreak, ur world would be far more optimal, happier, and genuinelly more productive
[22:43:36] <horribleprogram> however
[22:43:40] <cbreak> not happier
[22:43:42] <cbreak> but nicer
[22:43:46] *** Joins: xcm (~xcm@user/xcm)
[22:44:25] <horribleprogram> mhm
[22:44:31] <cbreak> I am in favor of keeping people separate
[22:44:37] <horribleprogram> jesus
[22:44:38] <cbreak> in particular, other people from me
[22:45:38] <cbreak> AmR: there are some cross compilation capabilities in CMake, but I've never tried them. They might not work.
[22:45:49] <cbreak> but qt creator has cmake support, maybe it can be used that way
[22:45:52] <CarloWood> Just don't deny that we'll get a personal CO2 quota, CentralBank Digital Currencies that will allow negative interest and limit how much you can own (official papers of their design can be downloaded), and we'll end up with social crediting system like in China were you have to do everything the government says or else.
[22:45:53] <cbreak> but I don't think that'd be easy
[22:46:21] <horribleprogram> CarloWood: Stallman was right this entire time
[22:46:32] <horribleprogram> that foot fungus eating man is a genius
[22:46:36] <cbreak> horribleprogram: you're switching to hurd?
[22:46:38] <kalven> CarloWood: plz do what you said
[22:46:52] <horribleprogram> no but Emacs is lit
[22:47:08] <CarloWood> The world should be discussing alternative to solve our current (financial system) problems. And not be censored the hell away and be lied to by all governments and media.
[22:47:19] <cbreak> as an editor, emacs is not as good as vim. and as an OS, emacs is not as good as linux :)
[22:47:21] <horribleprogram> dude
[22:47:34] <horribleprogram> just stop, continue this layer
[22:47:43] <horribleprogram> u summoned the ban hammer
[22:48:04] <horribleprogram> wait last word
[22:48:13] <horribleprogram> cbreak: exwm is better than any wm
[22:48:18] <horribleprogram> okay now back to C++
[22:48:42] <cbreak> I'd favor KDE. At least it's C++...
[22:49:11] <CarloWood> If you don't use KDE you are against C++ and will be punished.
[22:49:32] <CarloWood> Everyone should use KDE. No exceptions.
[22:49:40] <cbreak> I don't think punishment is needed.
[22:49:53] <cbreak> people can chose their suffering as long as they don't affect others :)
[22:50:04] <AmR> cbreak: I want do the same with Qt creator https://wiki.codeblocks.org/index.php/Code::Blocks_and_Cross_Compilers
[22:50:55] <cbreak> AmR: I'd probably start with https://cmake.org/cmake/help/book/mastering-cmake/chapter/Cross%20Compiling%20With%20CMake.html
[22:51:37] *** Quits: cm007magnum (~Rheanna@101.89.150.168) (Remote host closed the connection)
[22:53:21] *** Joins: cm007magnum (~Rheanna@218.78.94.61)
[23:05:07] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:06:06] *** Joins: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net)
[23:14:58] *** Quits: Tokamak (~Tokamak@172.58.188.114) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:25:56] *** Quits: CppCon (~istupy@2620:0:1003:206:efff:4122:1028:ce8d) (Ping timeout: 245 seconds)
[23:27:11] *** Quits: paul424 (~tom@ip-5-172-232-47.multi.internet.cyfrowypolsat.pl) (Ping timeout: 246 seconds)
[23:28:23] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4fe:2e55:2875:30e0)
[23:36:37] <ville> https://comsec.ethz.ch/research/dram/blacksmith/
[23:37:10] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Remote host closed the connection)
[23:37:52] *** Joins: CppCon (~istupy@2620:0:1003:206:982e:487c:2b24:6d9f)
[23:38:32] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:41:25] *** Quits: cm007magnum (~Rheanna@218.78.94.61) (Remote host closed the connection)
[23:41:26] <cbreak> ville: nice
[23:41:54] *** Quits: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz) (Read error: Connection reset by peer)
[23:41:58] <cbreak> good thing I have ECC, so that should be significantly less problematic :)
[23:42:10] *** Joins: spaceangel (~spaceange@ip-62-245-71-160.net.upcbroadband.cz)
[23:43:11] *** Joins: cm007magnum (~Rheanna@218.78.99.237)
[23:46:20] *** Joins: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[23:47:47] *** Quits: cart_man (~rynot@host-78-144-121-1.as13285.net) (Quit: Konversation terminated!)
[23:48:29] <TinoDidriksen> ECC does not protect well enough.
[23:49:16] <ville> if you're able to monitor error rate you could be alerted to any attacks that try to be of practical speed?
[23:50:54] <cbreak> I'd like to be alerted of any error
[23:51:36] *** Joins: paul424 (~tom@ip-5-172-232-47.multi.internet.cyfrowypolsat.pl)
[23:52:18] <cbreak> I'm a programmer. I rely on the underlying hardware to keep up its responsibility. If I can't trust it anymore, programs have to be much more defensive
[23:52:21] *** Joins: Tokamak (~Tokamak@172.58.188.114)
[23:52:30] <cbreak> so, any memory error is suspicious
[23:52:32] <ville> TinoDidriksen: or are you saying ecc will still let bit gets flipped, not correct them, and let rowhammer succede?
[23:52:49] <cbreak> ville: ECC will notice bit flips of single bits
[23:52:59] <TinoDidriksen> The page you just linked says ECC is not able to prevent this attack.
[23:53:01] <cbreak> and correct them too. It can notice double bit flips too.
[23:53:09] *** Quits: Guest42 (~Guest42@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[23:53:15] <InPhase> Virtual memory is already mapping stuff so wildly, can't it just rearrange things unpredictably and over time to make this line of attacks unfeasible?
[23:53:20] <cbreak> but if you can flip three bits, targeted, then you can circumvent it
[23:53:25] <cbreak> (if you know the algorithm)
[23:54:17] <cbreak> InPhase: the attacker can access the memory
[23:54:35] <cbreak> and you can't move things around below page granularity
[23:54:42] <ville> TinoDidriksen: yes but it's bit low on details as to "how much harder"
[23:55:16] <ville> haven't read the paper they link
[23:56:02] *** Quits: varioust (~varioust@72-46-48-28.lnk.ne.static.allophone.net) (Quit: varioust)
[23:56:24] <InPhase> cbreak: Page size is 4096.  All I need then is to be able to put externally hammerable data in separate pages from things users should not be able to control.
[23:56:31] <ville> seems they need a fully reverse engineered ecc algorithm
[23:57:30] <InPhase> Things that can be hammered are generally a small subset of total storage needs.
[23:57:41] <ville> it's a bit long paper to read this late for me
[23:58:20] <InPhase> new_untrusted T();
[23:58:53] *** Quits: sysctl (~user@88.215.77.255) (Quit: Konversation terminated!)
