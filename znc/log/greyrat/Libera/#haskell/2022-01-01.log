[00:00:23] *** Quits: max22- (~maxime@2a01cb0883359800172ac8059268b28d.ipv6.abo.wanadoo.fr) (Ping timeout: 250 seconds)
[00:00:29] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[00:00:47] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[00:02:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[00:11:57] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[00:13:48] *** Joins: Erutuon (~Erutuon@user/erutuon)
[00:15:41] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[00:17:46] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[00:20:29] *** Joins: antanananananas (~textual@78-63-84-180.static.zebra.lt)
[00:27:22] <otherwise> Why when I load Main.hs in GHCi, and I type :browse  I do not see the functions that I've defined in the module that Main.hs is importing? 
[00:27:49] <otherwise> However when I load the module directly in GHCi, :browse shows the functions
[00:28:27] <geekosaur> :browse shows only the current module, which for Main.hs will be module Main
[00:28:40] <geekosaur> if you import it in ghci then you can use :browse on it
[00:29:07] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/ghci.html#ghci-cmd-:browse
[00:30:42] <geekosaur> :browse limits itslef to a single module just to make things more manageable
[00:34:17] <otherwise> I see. I was able to :browse folder/fileName while having Main loaded, and this worked. Thanks!
[00:36:24] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e281077e1a745617169.dip0.t-ipconnect.de)
[00:36:25] *** Joins: acidjnk (~acidjnk@p200300d0c7271e281077e1a745617169.dip0.t-ipconnect.de)
[00:37:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[00:38:51] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[00:46:28] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[00:47:57] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 240 seconds)
[00:49:45] *** Joins: jespada (~jespada@87.74.33.157)
[00:56:37] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 240 seconds)
[01:00:46] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[01:08:21] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:11:34] *** Joins: ________________ (~textual@node-1w7jr9qkwjp05lc932j6d6xa7.ipv6.telus.net)
[01:17:21] <________________> is it possible to combine data type as follows,
[01:17:54] <________________> ```
[01:17:55] <________________> data F = A | B
[01:17:55] <________________> data G = C | D
[01:17:55] <________________> data H = F | H
[01:17:55] <________________> ```
[01:17:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:d365:2d3d:255:f608) (Ping timeout: 250 seconds)
[01:18:34] <geekosaur> that doesn't mean what you think/hope
[01:18:36] <________________> i meant `data H = F | G`
[01:19:06] <geekosaur> on the left of the = is a type constructor; on the right are data constructors, which live in a different namespace
[01:19:38] <geekosaur> meaning the F and G in `data H` there are not the same as the earlier `data F`/`data G`
[01:20:01] <EvanR> type F = Either A B -- is possible
[01:20:06] <EvanR> type G = Either C D
[01:20:15] <________________> so i'd have to wrap them in another data constructor?
[01:20:18] <________________> i see
[01:20:24] <________________> that makes sense, ty!
[01:20:35] <EvanR> that makes type synonyms and not new types
[01:20:47] <geekosaur> data H = SomeF F | SomeG G
[01:21:19] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:21:19] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:21:19] *** Joins: wroathe (~wroathe@user/wroathe)
[01:21:20] <EvanR> we don't have anonymous sums 
[01:21:22] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:21:51] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[01:21:57] <EvanR> though I now realize you didn't ask for any
[01:22:02] <geekosaur> I think 9.2 does?
[01:22:18] <EvanR> orly
[01:24:15] <geekosaur> https://downloads.haskell.org/ghc/latest/docs/html/users_guide/exts/primitives.html?highlight=anonymous%20sum#unboxed-sums
[01:24:29] <geekosaur> unboxed and anonymous
[01:24:44] <geekosaur> *lifted* anonymous sums still aren't a thing
[01:26:53] *** Quits: johnw (~johnw@2607:f6f0:3004:1:c8b4:50ff:fef8:6bf0) (Quit: ZNC - http://znc.in)
[01:27:54] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:30:36] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:31:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Remote host closed the connection)
[01:32:28] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[01:32:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:33:21] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[01:34:46] <EvanR> is it still possible to define (<*>) in terms of (>>=) using ap
[01:34:51] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:35:46] <EvanR> Ok I did it but now there's a Monad constraint on my Applicative instance
[01:35:57] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:37:45] <EvanR> oof nvm
[01:37:56] <geekosaur> yes, that's generally used to backform an Applicative instance from a pre-AMP Monad
[01:38:18] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[01:38:50] *** Quits: Techcable (~Techcable@168.235.93.147) (Client Quit)
[01:39:05] *** Joins: Techcable (~Techcable@168.235.93.147)
[01:40:52] <hpc> EvanR: didn't feel like writing it yourself? :D
[01:40:57] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[01:41:27] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[01:41:35] <EvanR> I spent like 2 hours writing FreeT myself
[01:41:41] <EvanR> and ragequit
[01:41:58] <EvanR> my consolation prize was having to write Applicative instances xD
[01:43:21] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[01:47:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:49:53] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[01:52:24] *** Parts: Everything (~Everythin@178-133-112-180.mobile.vf-ua.net) ()
[01:53:41] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[01:54:36] *** Joins: euouae (~euouae@user/euouae)
[01:54:53] <euouae> Hello I am reading the monad laws on https://en.wikibooks.org/wiki/Haskell/Category_theory#The_monad_laws_and_their_importance and comparing them to their categorical definiton https://en.wikipedia.org/wiki/Monad_(category_theory)#Formal_definition
[01:56:01] *** Quits: zer0bitz (~zer0bitz@196.244.192.54) (Ping timeout: 256 seconds)
[01:56:11] <euouae> In the wikibook link, there are 4 axioms to be obeyed, a total of 6 equations but in the categorical definition there's only 4 equations I can see (which would be the 1. and 2. from the wikibook)
[01:56:27] *** Joins: max22- (~maxime@2a01cb0883359800912ec9454e10c944.ipv6.abo.wanadoo.fr)
[01:56:37] <euouae> so where does unit o f = M(f) o unit come from, for example?
[01:57:34] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[02:00:22] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:d903:d876:1354:7b4c)
[02:01:07] <geekosaur> a CT monad is more general than a Haskell Monad, which is more correctly the CT monad as specialized to the notional category Hask of Haskell types
[02:01:37] <geekosaur> so some of the additional laws come from the definition of Hask
[02:01:45] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:01:57] <EvanR> those 4 laws are screaming to be rendered as commutative diagrams instead
[02:02:03] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[02:02:48] *** Joins: notzmv (~zmv@user/notzmv)
[02:03:02] *** Quits: deadmarshal (~deadmarsh@95.38.231.93) (Ping timeout: 240 seconds)
[02:04:40] <euouae> geekosaur thank you, that makes sense; the `functor` definition also has haskell laws that in CT are not stated as commutative diagrams, so that makes sense.
[02:04:54] <EvanR> see note 2 at the bottom
[02:05:02] <euouae> the laws in the wikibook are also a bit tricky because they use polymorphism
[02:05:10] <euouae> (It's tricky to compare them to the CT definition)
[02:05:31] <EvanR> CT has even more polymorphism, it's just implicit
[02:05:34] <euouae> EvanR ah yeah, thank you
[02:06:00] <geekosaur> partof that is you can go across categories with both, iirc. but Functor and Monad in Haskell are restricted to Hask, and some of the extra laws express that restriction
[02:06:20] <geekosaur> there are more general ones in Control.Category
[02:06:53] <geekosaur> (but I am no CT expert so I may be wrong about some or all of that)
[02:07:24] <geekosaur> I just know actual CT is much more flexible than what Haskell normally does with them
[02:09:03] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[02:10:13] <EvanR> is haskell still broken on Arch Linux or what do I tell people who want to try haskell and are on arch
[02:10:34] <EvanR> does ghcup just work regardless
[02:10:54] <glguy> Is GHC 9.0.2 missing from ghcup because it's not ready or just because it takes a little time to get things updated?
[02:11:18] *** Quits: otherwise (~otherwise@2601:602:880:90f0:714a:54cb:ba:a18a) (Remote host closed the connection)
[02:11:27] <geekosaur> I haven't seen maerwald around since it was released… which, recall, was on Christmas
[02:11:48] <geekosaur> expect it'll show up after the holidays
[02:11:49] <glguy> I saw him chatting yesterday
[02:11:54] <glguy> OK, cool
[02:12:12] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[02:12:19] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[02:13:37] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Ping timeout: 240 seconds)
[02:15:51] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[02:19:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[02:22:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[02:26:25] *** Joins: allbery_b (~geekosaur@xmonad/geekosaur)
[02:26:25] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Killed (NickServ (GHOST command used by allbery_b)))
[02:26:30] *** allbery_b is now known as geekosaur
[02:27:34] *** Quits: Codaraxis__ (~Codaraxis@user/codaraxis) (Quit: Leaving)
[02:28:01] *** Quits: euouae (~euouae@user/euouae) (Quit: time to upgrade)
[02:34:02] *** Quits: juri_ (~juri@178.63.35.222) (Ping timeout: 240 seconds)
[02:37:37] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[02:38:26] *** Joins: kotshie_ (~kotshie@68.72.208.140)
[02:38:37] *** Joins: res0nat0r0 (~Fletch@dia.whatbox.ca)
[02:38:50] *** Joins: iteratee_ (~kyle@162.218.222.107)
[02:38:51] *** Joins: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com)
[02:38:55] *** Joins: drdo8 (~drdo@144.172.69.89)
[02:38:56] *** Joins: mcglk_ (~mcglk@131.191.49.120)
[02:39:56] *** Joins: jrm2 (~jrm@156.34.249.199)
[02:40:11] *** Joins: zero (~z@user/zero)
[02:40:15] *** Joins: Digitteknohippie (~user@user/digit)
[02:40:25] *** Joins: hexeme (~hexeme@user/hexeme)
[02:40:40] *** Joins: hgolden_ (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[02:41:12] *** Joins: psudosphere (~quassel@31.220.5.250)
[02:41:17] *** Joins: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it)
[02:41:48] *** Joins: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net)
[02:41:50] *** Quits: ianon (~igloo@c-68-83-22-43.hsd1.nj.comcast.net) (Client Quit)
[02:42:01] *** Joins: eco_ (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com)
[02:42:05] *** Joins: werneta_ (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net)
[02:42:10] *** Joins: opqdonut_ (opqdonut@pseudo.fixme.fi)
[02:42:11] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[02:42:12] *** Joins: bliminse_ (~bliminse@host86-186-17-7.range86-186.btcentralplus.com)
[02:42:31] *** Joins: Maxdaman1us (~Maxdamant@user/maxdamantus)
[02:42:42] *** Joins: exarkun_ (~exarkun@user/exarkun)
[02:42:42] *** Joins: ezzieygu1wuf (~Unknown@user/ezzieyguywuf)
[02:42:43] *** Joins: xdej_ (~xdej@quatramaran.salle-s.org)
[02:42:48] *** Joins: Hawker_ (~pi@user/hawker)
[02:42:53] *** Joins: WzC (~Frank@77-162-168-71.fixed.kpn.net)
[02:42:55] *** Joins: xff0x_ (~xff0x@2001:1a81:52ba:da00:768d:77e:35d:d86a)
[02:43:00] *** Joins: w1gz_ (~do@159.89.11.133)
[02:43:25] *** Joins: mstksg (~jle`@cpe-23-240-75-236.socal.res.rr.com)
[02:44:16] *** Joins: lechner_ (~lechner@debian/lechner)
[02:44:47] *** Joins: fjmorazan_ (~quassel@user/fjmorazan)
[02:45:33] *** Joins: infinity0_ (~infinity0@occupy.ecodis.net)
[02:45:37] *** Quits: infinity0 (~infinity0@occupy.ecodis.net) (Killed (calcium.libera.chat (Nickname regained by services)))
[02:45:37] *** infinity0_ is now known as infinity0
[02:46:01] *** Joins: otherwise (~otherwise@2601:602:880:90f0:45d:4609:aef0:450a)
[02:46:04] *** Joins: dka_ (~code-is-a@ns3059207.ip-193-70-33.eu)
[02:46:10] *** Joins: cyphase_eviltwin (~cyphase@user/cyphase)
[02:47:27] *** Quits: wroathe (~wroathe@user/wroathe) (*.net *.split)
[02:47:28] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (*.net *.split)
[02:47:28] *** Quits: juhp (~juhp@128.106.188.82) (*.net *.split)
[02:47:28] *** Quits: antanananananas (~textual@78-63-84-180.static.zebra.lt) (*.net *.split)
[02:47:28] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (*.net *.split)
[02:47:28] *** Quits: Akiva (~Akiva@user/Akiva) (*.net *.split)
[02:47:28] *** Quits: python476 (~user@88.160.31.174) (*.net *.split)
[02:47:28] *** Quits: vglfr (~vglfr@88.155.60.141) (*.net *.split)
[02:47:28] *** Quits: kotshie (~kotshie@68.72.208.140) (*.net *.split)
[02:47:28] *** Quits: cyphase (~cyphase@user/cyphase) (*.net *.split)
[02:47:28] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (*.net *.split)
[02:47:28] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (*.net *.split)
[02:47:28] *** Quits: drdo (~drdo@144.172.69.89) (*.net *.split)
[02:47:28] *** Quits: xff0x (~xff0x@port-92-195-29-230.dynamic.as20676.net) (*.net *.split)
[02:47:28] *** Quits: zmt00 (~zmt00@user/zmt00) (*.net *.split)
[02:47:28] *** Quits: cheater (~Username@user/cheater) (*.net *.split)
[02:47:28] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[02:47:28] *** Quits: werneta (~werneta@70-142-214-115.lightspeed.irvnca.sbcglobal.net) (*.net *.split)
[02:47:28] *** Quits: tomku (~tomku@user/tomku) (*.net *.split)
[02:47:28] *** Quits: kmein (~weechat@user/kmein) (*.net *.split)
[02:47:28] *** Quits: foul_owl (~kerry@94.140.8.106) (*.net *.split)
[02:47:28] *** Quits: hyiltiz (~quassel@31.220.5.250) (*.net *.split)
[02:47:28] *** Quits: x88x88x (~x88x88x@149.28.53.172) (*.net *.split)
[02:47:28] *** Quits: fjmorazan (~quassel@user/fjmorazan) (*.net *.split)
[02:47:28] *** Quits: AlexZenon (~alzenon@94.233.241.181) (*.net *.split)
[02:47:28] *** Quits: qwedfg_ (~qwedfg@user/qwedfg) (*.net *.split)
[02:47:28] *** Quits: jle` (~jle`@cpe-23-240-75-236.socal.res.rr.com) (*.net *.split)
[02:47:28] *** Quits: bliminse (~bliminse@host86-186-17-7.range86-186.btcentralplus.com) (*.net *.split)
[02:47:28] *** Quits: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl) (*.net *.split)
[02:47:28] *** Quits: turlando (~turlando@user/turlando) (*.net *.split)
[02:47:28] *** Quits: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net) (*.net *.split)
[02:47:28] *** Quits: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca) (*.net *.split)
[02:47:28] *** Quits: Digit (~user@user/digit) (*.net *.split)
[02:47:28] *** Quits: Inoperable (~PLAYER_1@fancydata.science) (*.net *.split)
[02:47:28] *** Quits: lechner (~lechner@debian/lechner) (*.net *.split)
[02:47:28] *** Quits: L29Ah (~L29Ah@wikipedia/L29Ah) (*.net *.split)
[02:47:28] *** Quits: dka (~code-is-a@ns3059207.ip-193-70-33.eu) (*.net *.split)
[02:47:28] *** Quits: lambdabot (~lambdabot@haskell/bot/lambdabot) (*.net *.split)
[02:47:28] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[02:47:28] *** Quits: mcglk (~mcglk@131.191.49.120) (*.net *.split)
[02:47:28] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[02:47:28] *** Quits: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de) (*.net *.split)
[02:47:28] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[02:47:28] *** Quits: iteratee (~kyle@162.218.222.107) (*.net *.split)
[02:47:28] *** Quits: Noinia (~Frank@77-162-168-71.fixed.kpn.net) (*.net *.split)
[02:47:28] *** Quits: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com) (*.net *.split)
[02:47:28] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (*.net *.split)
[02:47:28] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (*.net *.split)
[02:47:28] *** Quits: zzz (~z@user/zero) (*.net *.split)
[02:47:28] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (*.net *.split)
[02:47:28] *** Quits: rookie101 (~rookie@165.232.121.13) (*.net *.split)
[02:47:28] *** Quits: w1gz (~do@159.89.11.133) (*.net *.split)
[02:47:28] *** Quits: Hawker (~pi@user/hawker) (*.net *.split)
[02:47:28] *** Quits: int-e (~noone@int-e.eu) (*.net *.split)
[02:47:28] *** Quits: Taneb (~Taneb@runciman.hacksoc.org) (*.net *.split)
[02:47:28] *** Quits: exarkun (~exarkun@user/exarkun) (*.net *.split)
[02:47:28] *** Quits: jrm (~jrm@156.34.249.199) (*.net *.split)
[02:47:28] *** Quits: maerwald (~maerwald@mail.hasufell.de) (*.net *.split)
[02:47:29] *** Quits: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de) (*.net *.split)
[02:47:29] *** Quits: opqdonut (~opqdonut@91.105.251.154) (*.net *.split)
[02:47:29] *** Quits: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net) (*.net *.split)
[02:47:29] *** Quits: res0nat0r (~Fletch@dia.whatbox.ca) (*.net *.split)
[02:47:29] *** Quits: xdej (~xdej@quatramaran.salle-s.org) (*.net *.split)
[02:47:29] *** Quits: eco (~ubuntu@ec2-54-201-230-197.us-west-2.compute.amazonaws.com) (*.net *.split)
[02:47:29] *** Quits: ldlework (~hexeme@user/hexeme) (*.net *.split)
[02:47:29] *** Quits: joeyh (~joeyh@kitenet.net) (*.net *.split)
[02:47:29] *** Quits: Clint (~Clint@user/clint) (*.net *.split)
[02:47:29] *** Quits: canta (~canta@user/canta) (*.net *.split)
[02:47:29] *** Quits: drewolson (~drewolson@user/drewolson) (*.net *.split)
[02:47:29] *** Quits: PigDude (~PigDude@159.203.16.199) (*.net *.split)
[02:47:29] *** Quits: hrdl (~hrdl@mail.hrdl.eu) (*.net *.split)
[02:47:29] *** Quits: niko (~niko@libera/staff/niko) (*.net *.split)
[02:47:29] *** Quits: nisstyre (~wes@user/nisstyre) (*.net *.split)
[02:47:29] *** jrm2 is now known as jrm
[02:47:34] *** drdo8 is now known as drdo
[02:47:39] *** Joins: adamCS (~adamCS@ec2-34-207-160-255.compute-1.amazonaws.com)
[02:48:41] *** Joins: In0perable (~PLAYER_1@fancydata.science)
[02:50:17] *** Quits: otherwise (~otherwise@2601:602:880:90f0:45d:4609:aef0:450a) (Ping timeout: 240 seconds)
[02:50:25] *** Joins: AlexZenon (~alzenon@94.233.241.181)
[02:50:25] *** Joins: finsternis (~X@23.226.237.192)
[02:50:25] *** Joins: tomku (~tomku@user/tomku)
[02:50:25] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[02:50:25] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[02:50:25] *** Joins: python476 (~user@88.160.31.174)
[02:50:25] *** Joins: vglfr (~vglfr@88.155.60.141)
[02:50:25] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[02:50:25] *** Joins: zmt00 (~zmt00@user/zmt00)
[02:50:25] *** Joins: cheater (~Username@user/cheater)
[02:50:25] *** Joins: kmein (~weechat@user/kmein)
[02:50:25] *** Joins: foul_owl (~kerry@94.140.8.106)
[02:50:25] *** Joins: x88x88x (~x88x88x@149.28.53.172)
[02:50:25] *** Joins: obfusk (~quassel@a82-161-150-56.adsl.xs4all.nl)
[02:50:25] *** Joins: xlei (~akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[02:50:25] *** Joins: sim590 (~simon@modemcable090.207-203-24.mc.videotron.ca)
[02:50:25] *** Joins: lambdabot (~lambdabot@haskell/bot/lambdabot)
[02:50:25] *** Joins: dextaa (~DV@user/dextaa)
[02:50:25] *** Joins: lambdap (~lambdap@static.167.190.119.168.clients.your-server.de)
[02:50:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[02:50:25] *** Joins: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[02:50:25] *** Joins: int-e (~noone@int-e.eu)
[02:50:25] *** Joins: Taneb (~Taneb@runciman.hacksoc.org)
[02:50:25] *** Joins: maerwald (~maerwald@mail.hasufell.de)
[02:50:25] *** Joins: wz1000 (~zubin@static.11.113.47.78.clients.your-server.de)
[02:50:25] *** Joins: Typedfern (~Typedfern@75.red-88-22-25.staticip.rima-tde.net)
[02:50:25] *** Joins: joeyh (~joeyh@kitenet.net)
[02:50:25] *** Joins: Clint (~Clint@user/clint)
[02:50:25] *** Joins: canta (~canta@user/canta)
[02:50:25] *** Joins: drewolson (~drewolson@user/drewolson)
[02:50:25] *** Joins: PigDude (~PigDude@159.203.16.199)
[02:50:25] *** Joins: hrdl (~hrdl@mail.hrdl.eu)
[02:50:25] *** Joins: niko (~niko@libera/staff/niko)
[02:50:25] *** Joins: nisstyre (~wes@user/nisstyre)
[02:50:27] *** Quits: finsternis (~X@23.226.237.192) (Max SendQ exceeded)
[02:50:44] *** Joins: finsternis (~X@23.226.237.192)
[02:51:50] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[02:54:09] *** Joins: rookie101 (~rookie@165.232.121.13)
[02:54:52] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[02:54:58] *** Joins: Akiva (~Akiva@user/Akiva)
[02:55:02] *** Joins: bollu_ (uid233390@id-233390.helmsley.irccloud.com)
[02:55:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[02:56:06] *** Joins: lavaman (~lavaman@98.38.249.169)
[02:56:12] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[03:01:35] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[03:01:36] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[03:05:16] <ProfSimm> What would be the functional expression of a relational database I wonder
[03:05:31] <ProfSimm> Also happy new year, and yes this is what I most care about right now
[03:10:18] <EvanR> http://blog.ezyang.com/2010/06/databases-are-categories/
[03:11:12] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[03:11:44] <hpc> no https :(
[03:12:31] <hpc> oh, relational algebra might also be good to read up on
[03:12:49] *** Joins: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net)
[03:13:20] <hpc> then a query is a function (table -> table)
[03:13:24] <hpc> plus or minus joins
[03:13:33] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[03:13:33] <EvanR> very relational https://free.cofree.io/2019/07/31/beautiful-bridges/
[03:13:48] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[03:13:51] *** Joins: zincy_ (~zincy@2a00:23c8:970c:4801:b868:7e50:825e:321f)
[03:14:12] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:14:36] *** Joins: neurocyte0132889 (~neurocyte@IP-045136168007.dynamic.medianet-world.de)
[03:14:36] *** Quits: neurocyte0132889 (~neurocyte@IP-045136168007.dynamic.medianet-world.de) (Changing host)
[03:14:36] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[03:14:44] *** Quits: acidjnk (~acidjnk@p200300d0c7271e281077e1a745617169.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:14:44] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e281077e1a745617169.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:17:01] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[03:17:55] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[03:18:23] *** Quits: otherwise (~otherwise@c-71-231-39-206.hsd1.wa.comcast.net) ()
[03:18:48] <EvanR> >In fact, a database upgrade (schema and data), or in fact an arbitrary transition from one format to another, is merely a natural transformation! 
[03:27:24] <ProfSimm> I dislike the separation of type and value. Can't we somehow combine both in one expression. So we could pass type parameters same as we pass normal parameters
[03:27:41] <geekosaur> that's coming soon
[03:27:52] <ProfSimm> Is it?
[03:28:05] <geekosaur> foo :: forall t -> Bar -> ...
[03:28:24] <ProfSimm> I mean, why even need the :: operator
[03:28:26] <geekosaur> there will be some limits because Haskell is still not a dependently typed language
[03:28:31] <ProfSimm> I wanna somehow remove the barrier
[03:28:39] <geekosaur> if that's what you are looking for, try Idris
[03:29:42] <geekosaur> you cannot "simply" remove the barrier, dependent Haskell is still somewhere in the far-ish future
[03:29:52] <geekosaur> Idris is as close as you can get currently
[03:30:18] <EvanR> as an example of how idris streamlines things, the type level pair, type level list is not a promoted datakind, it's literally the pair and list that you would use on values
[03:31:07] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[03:31:07] *** Quits: lavaman (~lavaman@98.38.249.169) (Read error: Connection reset by peer)
[03:31:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:32:07] *** Quits: ________________ (~textual@node-1w7jr9qkwjp05lc932j6d6xa7.ipv6.telus.net) (Quit: Textual IRC Client: www.textualapp.com)
[03:32:09] <monochrom> @quote monochrom poor.*dependent
[03:32:10] <lambdabot> monochrom says: dynamic type is poor man's dependent type, they are so poor they can't buy a theorem prover.
[03:32:12] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[03:32:22] <ProfSimm> The way I imagine it is that you assign a type directly to a variable, and it has this abstract constraint now. From that point on you can only assign a more constrained type on it until it gets assigned a specific value
[03:32:54] <hpc> idris 2 also has linear types, which is pretty cool too
[03:33:20] <EvanR> you can 'assign' types to variables in idris, as if they were values
[03:33:54] <EvanR> they are allowed in the same places as values, as long as their types match up (types have types)
[03:33:58] <geekosaur> although the notion of assigning more and more constraining types until you reach values sounds more like "gradual typing" to me
[03:35:15] *** Quits: zincy_ (~zincy@2a00:23c8:970c:4801:b868:7e50:825e:321f) (Remote host closed the connection)
[03:35:19] <geekosaur> one problem with doing that in Haskell is that a type is what you promise to others, whereas a value is what you actually do
[03:35:59] <monochrom> Hee hee why write programs if we expect proof erasure anyway >:)
[03:36:00] <geekosaur> this has crucial differences when what you promise to others is that you will accept "any X such that…"
[03:36:44] <geekosaur> you are not in this case refining a type, you are implementing a contract
[03:37:53] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4942:7271:af20:a403)
[03:38:10] *** hexeme is now known as ldlework
[03:38:19] <geekosaur> how you implement it is your business as long as you obey the terms of the contract
[03:40:58] <geekosaur> it'd actually make more sense if the contract were passed in, as opposed to "refining assignment" as you're thinking of
[03:41:21] <geekosaur> that is, the contract comes from the caller, the implementation is the callee
[03:45:12] *** Joins: esoca123 (uid534098@id-534098.tinside.irccloud.com)
[03:45:13] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[03:47:29] <geekosaur> actually I guess that's backwards. the type (contract) goes out, the implementation goes in
[03:49:24] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[03:50:57] *** Quits: wroathe_ (~wroathe@206-55-188-8.fttp.usinternet.com) (Ping timeout: 240 seconds)
[03:50:57] <ProfSimm> I wonder can we do something to combine assignment and comparison for equality in one operator and action
[03:51:08] *** Joins: the_proffesor (~theproffe@2601:282:847f:8010::85ac)
[03:51:08] *** Quits: the_proffesor (~theproffe@2601:282:847f:8010::85ac) (Changing host)
[03:51:08] *** Joins: the_proffesor (~theproffe@user/theproffesor)
[03:51:32] <ProfSimm> I mean if something is unassigned, then you assign it 5, it equals 5. So.
[03:51:43] <ProfSimm> The comparison is true automaticlaly
[03:51:43] <EvanR> if it were C it would be spelled ===
[03:51:57] *** Quits: theproffesor (~theproffe@user/theproffesor) (Ping timeout: 240 seconds)
[03:52:19] <EvanR> and pronounced, equaliquals
[03:52:21] <geekosaur> you seem to be looking for a lot of not-Haskell
[03:52:32] <geekosaur> I mean, the whole concept of that goes against immutable data
[03:53:46] *** Joins: theproffesor_ (~theproffe@2601:282:847f:8010::85ac)
[03:53:48] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[03:53:55] *** Quits: the_proffesor (~theproffe@user/theproffesor) (Remote host closed the connection)
[03:55:21] <EvanR> haskell doesn't feature "unassigned" variables
[03:56:00] <EvanR> they are always bound to something, even if sometimes it is an error value or something
[03:56:26] *** Quits: theproffesor_ (~theproffe@2601:282:847f:8010::85ac) (Read error: Connection reset by peer)
[03:56:45] *** Joins: theproffesor_ (~theproffe@2601:282:847f:8010::85ac)
[03:58:24] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[03:58:35] <EvanR> s/feature/bug/
[04:02:27] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Remote host closed the connection)
[04:02:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:02:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:02:29] *** Joins: wroathe (~wroathe@user/wroathe)
[04:04:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[04:06:15] *** Quits: max22- (~maxime@2a01cb0883359800912ec9454e10c944.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[04:06:17] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[04:06:20] <EvanR> too bad lambdabot doesn't have Data.Time so we can play with the date
[04:06:48] <monochrom> Wait, what do you want to play with the date?
[04:07:16] <geekosaur> % import Data.Time
[04:07:16] <yahb> geekosaur: 
[04:07:21] <geekosaur> go nuts
[04:07:28] *** Joins: max22- (~maxime@2a01cb08833598005a78fa8a594f3623.ipv6.abo.wanadoo.fr)
[04:07:45] <EvanR> % fromGregorian 2021 12 31
[04:07:45] <yahb> EvanR: 2021-12-31
[04:07:50] <EvanR> cewl
[04:09:07] <EvanR> % addDays 1 it
[04:09:07] <yahb> EvanR: 2022-01-01
[04:09:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[04:09:30] <geekosaur> anyway I could imagine languages which did either, but they won't in much of any sense be Haskell
[04:13:05] *** Joins: retroid_ (~retro@05412d78.skybroadband.com)
[04:15:34] *** Quits: retro_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[04:16:40] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[04:18:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:19:09] *** Quits: mastarija (~mastarija@2a05:4f46:e0e:5000:bc70:8f18:1f10:57e1) (Quit: Leaving)
[04:20:24] *** Joins: Everything (~Everythin@37.115.210.35)
[04:21:28] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:26:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[04:27:39] *** Joins: ksqsf (~user@134.209.106.31)
[04:29:37] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 240 seconds)
[04:31:37] *** Quits: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[04:37:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:40:14] *** Joins: Erutuon (~Erutuon@user/erutuon)
[04:40:55] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[04:41:02] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[04:41:05] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4942:7271:af20:a403) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:42:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[04:42:56] *** Joins: sabhrd33 (~shawna@76.14.56.206)
[04:44:10] *** Quits: ProfSimm (~ProfSimm@87.227.196.109) (Remote host closed the connection)
[04:44:19] *** Quits: sabhrd33 (~shawna@76.14.56.206) (Remote host closed the connection)
[04:45:27] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Ping timeout: 256 seconds)
[04:47:04] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[04:48:44] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:48:44] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:48:44] *** Joins: wroathe (~wroathe@user/wroathe)
[04:51:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[04:53:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[04:55:05] *** Quits: python476 (~user@88.160.31.174) (Ping timeout: 256 seconds)
[04:55:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[04:56:18] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Quit: The Lounge - https://thelounge.chat)
[05:04:57] *** Joins: DNH (~DNH@2a02:8108:1100:16d8:4942:7271:af20:a403)
[05:06:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[05:12:19] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 268 seconds)
[05:13:29] *** Quits: DNH (~DNH@2a02:8108:1100:16d8:4942:7271:af20:a403) (Quit: Textual IRC Client: www.textualapp.com)
[05:15:00] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[05:16:08] *** Quits: max22- (~maxime@2a01cb08833598005a78fa8a594f3623.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[05:17:51] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:18:17] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[05:19:13] <EvanR> hpc, I took the bait and went for the dang Applicative instance and ... the bind operation was only 3 lines xD https://paste.tomsmeding.com/41JicFe6
[05:20:19] <EvanR> i guess i could use a library instead
[05:21:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[05:21:32] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi) (Quit: Leaving.)
[05:22:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[05:25:53] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[05:29:49] *** Quits: foul_owl (~kerry@94.140.8.106) (Quit: WeeChat 2.3)
[05:30:37] *** Quits: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Ping timeout: 240 seconds)
[05:30:59] *** Joins: kaction (~kaction@pool-71-191-91-40.washdc.fios.verizon.net)
[05:31:16] <kaction> Does anybody know how to suppress error messages "unable to decommit memory" due madvice returning ENOSYS? Would it be considered GHC bug that it keeps saying it again and again?
[05:31:25] *** Quits: xff0x_ (~xff0x@2001:1a81:52ba:da00:768d:77e:35d:d86a) (Ping timeout: 268 seconds)
[05:31:38] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:32:05] *** Joins: xff0x_ (~xff0x@2001:1a81:52ba:da00:be6d:6461:7f7a:de65)
[05:32:33] <lechner_> Hi, could someone please explain how, in rel8, I can tie the Data.SemVer type to the postgresql-semver extension, please? Thanks!     It's something like this    https://hackage.haskell.org/package/rel8-1.2.1.0/docs/src/Rel8.Type.html#typeInformation
[05:32:37] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[05:32:51] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[05:33:33] *** Joins: otherwise (~otherwise@2601:602:880:90f0:b87e:64be:1874:bae6)
[05:35:08] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:35:44] <lechner_> kaction: thanks for blazing the trail on this    https://salsa.debian.org/lechner/dh-haskell
[05:38:13] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[05:39:33] <kaction> lechner_: you are welcome :)
[05:39:33] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[05:42:04] <lechner_> kaction: did you get the same reaction years ago?   https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1002296#19
[05:42:44] *** Quits: mcglk_ (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[05:44:20] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[05:44:26] *** Joins: mcglk (~mcglk@131.191.49.120)
[05:45:41] *** Joins: L29Ah (~L29Ah@wikipedia/L29Ah)
[05:47:29] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[05:49:17] <kaction> lechner_: I don't recall how it ended. I think dh-haskell got some adoption, but it had rough corners with more complicated packages, and I never took time to make it perfectly bit-to-bit compatible with whatever build system was status-quo.
[05:52:33] *** Joins: foul_owl (~kerry@97-126-11-68.tukw.qwest.net)
[05:54:27] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[05:55:40] *** Joins: lavaman (~lavaman@98.38.249.169)
[05:57:48] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[05:58:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:01:51] *** Joins: harveypwca (~harveypwc@2601:246:c180:a570:3828:d8:e523:3f67)
[06:02:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[06:02:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:02:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:02:52] *** Joins: wroathe (~wroathe@user/wroathe)
[06:03:06] *** Quits: wroathe (~wroathe@user/wroathe) (Client Quit)
[06:03:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[06:03:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[06:03:21] *** Joins: wroathe (~wroathe@user/wroathe)
[06:12:11] *** Quits: xff0x_ (~xff0x@2001:1a81:52ba:da00:be6d:6461:7f7a:de65) (Ping timeout: 250 seconds)
[06:13:37] *** Quits: cyphase_eviltwin (~cyphase@user/cyphase) (Ping timeout: 240 seconds)
[06:14:17] *** Joins: xff0x_ (~xff0x@2001:1a81:52f9:6300:887a:5ed1:98de:74ec)
[06:15:01] *** Quits: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4) (Ping timeout: 240 seconds)
[06:17:23] <lechner_> kaction: thanks! now it is. i copied everything from hlibrary.mk
[06:19:59] *** Parts: qrpnxz (abc4f95c31@user/qrpnxz) (Disconnected: closed)
[06:20:56] *** Joins: cyphase (~cyphase@user/cyphase)
[06:22:05] *** Quits: ksqsf (~user@134.209.106.31) (Remote host closed the connection)
[06:22:33] *** Joins: ksqsf (~user@2001:da8:d800:600:1db7:f109:60a:6851)
[06:24:42] *** Quits: bollu_ (uid233390@id-233390.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[06:24:59] *** Joins: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net)
[06:25:39] *** Quits: ksqsf (~user@2001:da8:d800:600:1db7:f109:60a:6851) (Read error: Connection reset by peer)
[06:26:08] *** Joins: ksqsf (~user@134.209.106.31)
[06:32:00] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:36:54] *** Joins: neverfindme (~hayden@72.92.246.5)
[06:37:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[06:38:54] *** Joins: doyougnu (~doyougnu@c-73-25-202-122.hsd1.or.comcast.net)
[06:41:38] *** Quits: neverfindme (~hayden@72.92.246.5) (Client Quit)
[06:48:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[06:48:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:49:40] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Remote host closed the connection)
[06:50:18] *** Joins: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk)
[06:53:16] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[06:54:37] *** Quits: burnsidesLlama (~burnsides@dhcp168-010.wadham.ox.ac.uk) (Ping timeout: 240 seconds)
[06:55:13] *** Quits: vglfr (~vglfr@88.155.60.141) (Ping timeout: 256 seconds)
[06:56:57] *** Joins: vglfr (~vglfr@88.155.60.141)
[06:59:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[07:00:46] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 245 seconds)
[07:05:17] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[07:08:57] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[07:09:57] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[07:10:08] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 252 seconds)
[07:11:34] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[07:13:03] *** Joins: mbuf (~Shakthi@223.184.115.117)
[07:16:36] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (NickServ (Forcing logout FinnElija -> finn_elija)))
[07:16:36] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[07:16:36] *** finn_elija is now known as FinnElija
[07:20:02] *** Quits: ksqsf (~user@134.209.106.31) (Ping timeout: 252 seconds)
[07:21:31] *** Quits: theproffesor_ (~theproffe@2601:282:847f:8010::85ac) (Changing host)
[07:21:31] *** Joins: theproffesor_ (~theproffe@user/theproffesor)
[07:21:51] *** theproffesor_ is now known as theproffesor
[07:22:51] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[07:23:02] *** Quits: td_ (~td@muedsl-82-207-238-106.citykom.de) (Ping timeout: 260 seconds)
[07:24:54] *** Joins: td_ (~td@muedsl-82-207-238-133.citykom.de)
[07:33:41] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[07:34:12] *** Joins: img (~img@user/img)
[07:35:59] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 252 seconds)
[07:36:47] *** Quits: EvanR (~EvanR@user/evanr) (Quit: Leaving)
[07:37:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[07:38:08] *** Joins: EvanR (~EvanR@user/evanr)
[07:42:47] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[07:44:25] *** Quits: otherwise (~otherwise@2601:602:880:90f0:b87e:64be:1874:bae6) (Remote host closed the connection)
[07:46:09] *** Joins: gaff (~gaff@49.207.212.151)
[07:55:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[07:59:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 240 seconds)
[08:00:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[08:02:12] *** Quits: mcglk (~mcglk@131.191.49.120) (Read error: Connection reset by peer)
[08:03:11] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[08:03:28] *** Joins: mcglk (~mcglk@131.191.49.120)
[08:04:45] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[08:07:20] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 252 seconds)
[08:07:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[08:10:12] *** Joins: fef (~thedawn@user/thedawn)
[08:12:37] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[08:16:12] *** Joins: otherwise (~otherwise@2601:602:880:90f0:fce5:a06d:c23f:e50d)
[08:17:13] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:17:56] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[08:20:54] *** Quits: otherwise (~otherwise@2601:602:880:90f0:fce5:a06d:c23f:e50d) (Ping timeout: 260 seconds)
[08:26:41] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:29:54] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[08:30:05] *** Joins: off^ (~off@207.5.21.20)
[08:30:18] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[08:32:02] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[08:34:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[08:39:09] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[08:45:49] *** Joins: juri_ (~juri@178.63.35.222)
[08:53:57] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Ping timeout: 240 seconds)
[08:59:04] *** Joins: uam (uid360535@id-360535.hampstead.irccloud.com)
[09:08:10] *** Joins: Erutuon (~Erutuon@user/erutuon)
[09:09:29] *** Quits: mvk (~mvk@2607:fea8:5cdd:f000::917a) (Ping timeout: 252 seconds)
[09:11:17] *** Quits: Hawker_ (~pi@user/hawker) (Ping timeout: 240 seconds)
[09:12:35] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:14:39] *** Joins: deadmarshal (~deadmarsh@95.38.119.182)
[09:19:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:20:29] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[09:21:06] *** Joins: fef (~thedawn@user/thedawn)
[09:23:26] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 260 seconds)
[09:23:41] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[09:23:44] *** Joins: cyphase (~cyphase@user/cyphase)
[09:24:53] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Quit: Leaving)
[09:25:09] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:25:14] *** Quits: gaff (~gaff@49.207.212.151) (Remote host closed the connection)
[09:25:14] *** Joins: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:25:23] *** Quits: kaph_ (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Client Quit)
[09:25:23] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Client Quit)
[09:25:38] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[09:26:23] *** Joins: gaff (~gaff@49.207.212.151)
[09:30:07] *** Joins: otherwise (~otherwise@2601:602:880:90f0:1c02:7c0e:4814:d07c)
[09:30:28] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:31:03] *** Quits: gaff (~gaff@49.207.212.151) (Ping timeout: 256 seconds)
[09:31:55] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[09:31:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[09:31:55] *** Joins: wroathe (~wroathe@user/wroathe)
[09:32:27] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[09:34:17] *** Quits: otherwise (~otherwise@2601:602:880:90f0:1c02:7c0e:4814:d07c) (Ping timeout: 240 seconds)
[09:36:09] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[09:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[09:37:17] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 256 seconds)
[09:41:23] *** Joins: mvk (~mvk@2607:fea8:5cdd:f000::917a)
[09:44:18] *** Joins: gaff (~gaff@49.207.198.216)
[09:53:43] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[10:07:52] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[10:10:17] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 240 seconds)
[10:16:25] *** Joins: Rum (~bourbon@user/rum)
[10:30:56] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[10:37:34] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[10:38:13] *** Joins: nhatanh02 (~satori@123.24.172.30)
[10:39:09] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[10:47:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[10:53:54] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[10:54:40] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[10:59:06] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[11:03:08] *** Joins: lavaman (~lavaman@98.38.249.169)
[11:04:32] *** Quits: gaff (~gaff@49.207.198.216) (Remote host closed the connection)
[11:07:17] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 240 seconds)
[11:07:52] *** Joins: otherwise (~otherwise@2601:602:880:90f0:15d8:a1fc:ce25:ad10)
[11:09:58] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[11:12:29] *** Joins: coolnickname (uid531864@user/coolnickname)
[11:17:37] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[11:21:58] *** Quits: Jonno_FTW (~come@api.carswap.me) (Ping timeout: 260 seconds)
[11:22:17] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[11:29:14] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[11:34:44] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[11:35:42] *** Joins: img (~img@user/img)
[11:42:18] *** Joins: gaff (~gaff@49.207.222.122)
[11:45:09] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[11:45:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:46:35] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[11:52:12] *** Quits: otherwise (~otherwise@2601:602:880:90f0:15d8:a1fc:ce25:ad10) (Remote host closed the connection)
[11:53:56] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 252 seconds)
[11:55:03] *** Quits: deadmarshal (~deadmarsh@95.38.119.182) (Quit: ZNC 1.8.2 - https://znc.in)
[11:55:57] *** Joins: deadmarshal (~deadmarsh@95.38.119.182)
[11:56:53] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[12:06:35] *** Quits: xff0x_ (~xff0x@2001:1a81:52f9:6300:887a:5ed1:98de:74ec) (Ping timeout: 252 seconds)
[12:07:28] *** Joins: xff0x_ (~xff0x@2001:1a81:52f9:6300:7499:a110:eaa4:a379)
[12:10:57] *** Quits: Vajb (~Vajb@85-76-162-179-nat.elisa-mobile.fi) (Ping timeout: 240 seconds)
[12:12:50] *** Quits: gaff (~gaff@49.207.222.122) (Ping timeout: 260 seconds)
[12:12:55] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[12:14:11] *** Joins: Vajb (~Vajb@2001:999:50:e6be:1e98:9376:d93e:4506)
[12:17:45] *** Joins: otherwise (~otherwise@2601:602:880:90f0:cdff:5f10:47b:dd48)
[12:33:27] *** Joins: zer0bitz (~zer0bitz@196.244.192.57)
[12:34:23] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 250 seconds)
[12:37:03] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[12:37:03] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[12:37:03] *** Joins: wroathe (~wroathe@user/wroathe)
[12:38:09] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[12:42:01] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[12:42:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[12:42:41] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:46:25] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[12:46:56] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Read error: Connection reset by peer)
[12:47:51] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[12:49:23] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[12:49:37] *** Quits: otherwise (~otherwise@2601:602:880:90f0:cdff:5f10:47b:dd48) (Remote host closed the connection)
[12:54:36] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[13:02:45] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[13:03:51] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Remote host closed the connection)
[13:07:23] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[13:23:05] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Remote host closed the connection)
[13:23:30] *** Joins: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827)
[13:25:46] *** Quits: coot (~coot@2a02:a310:e03f:8500:5cc8:47c:8ec0:b827) (Client Quit)
[13:26:10] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[13:31:56] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[13:45:36] *** Joins: neurocyte0132889 (~neurocyte@IP-045128181214.dynamic.medianet-world.de)
[13:45:36] *** Quits: neurocyte0132889 (~neurocyte@IP-045128181214.dynamic.medianet-world.de) (Changing host)
[13:45:36] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[13:45:42] *** Joins: lavaman (~lavaman@98.38.249.169)
[13:50:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[13:50:03] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[13:51:30] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-90.elisa-laajakaista.fi)
[13:57:22] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 260 seconds)
[13:58:27] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[13:58:42] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:58:50] *** Joins: acidjnk (~acidjnk@p200300d0c7271e28a1c27b1d533e8cdb.dip0.t-ipconnect.de)
[13:58:51] *** Joins: acidjnk_new (~acidjnk@p200300d0c7271e28a1c27b1d533e8cdb.dip0.t-ipconnect.de)
[13:59:14] *** Quits: vglfr (~vglfr@88.155.60.141) (Ping timeout: 260 seconds)
[14:00:02] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[14:04:26] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[14:07:54] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Quit: Leaving)
[14:08:32] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[14:08:32] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[14:10:55] *** Quits: mbuf (~Shakthi@223.184.115.117) (Read error: Connection reset by peer)
[14:11:12] *** Joins: mbuf (~Shakthi@223.184.115.117)
[14:15:48] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:28:29] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[14:32:10] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[14:37:42] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[14:37:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[14:37:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[14:37:50] *** Joins: wroathe (~wroathe@user/wroathe)
[14:42:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[14:43:37] *** Joins: vglfr (~vglfr@88.155.60.141)
[14:44:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[14:45:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:48:43] *** Quits: img (~img@user/img) (Quit: ZNC 1.8.2 - https://znc.in)
[14:50:26] *** Joins: cosimone (~user@93-34-132-88.ip49.fastwebnet.it)
[14:54:08] *** Joins: img (~img@user/img)
[14:54:18] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[14:56:26] *** Parts: jakalx (~jakalx@base.jakalx.net) ()
[14:58:47] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[14:58:53] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[15:08:29] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[15:08:36] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:08:36] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:08:36] *** Joins: wroathe (~wroathe@user/wroathe)
[15:09:27] *** Joins: joo-_ (~joo-_@80-62-117-1-mobile.dk.customer.tdc.net)
[15:09:27] *** Quits: joo-_ (~joo-_@80-62-117-1-mobile.dk.customer.tdc.net) (Changing host)
[15:09:27] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[15:09:32] *** Joins: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr)
[15:13:53] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[15:14:26] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[15:19:41] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[15:20:26] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:39:23] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[15:39:23] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[15:39:23] *** Joins: wroathe (~wroathe@user/wroathe)
[15:43:14] *** Joins: retro_ (~retro@05412d78.skybroadband.com)
[15:44:11] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 250 seconds)
[15:44:23] *** Quits: retroid_ (~retro@05412d78.skybroadband.com) (Ping timeout: 268 seconds)
[15:45:04] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[15:47:34] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Remote host closed the connection)
[15:48:16] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[15:49:03] *** Quits: off^ (~off@207.5.21.20) (Remote host closed the connection)
[15:50:21] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[15:50:43] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[15:51:37] *** Joins: InternetCitizen (~fuzzypixe@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[15:58:39] *** Joins: Rum (~bourbon@user/rum)
[15:58:41] *** Quits: xff0x_ (~xff0x@2001:1a81:52f9:6300:7499:a110:eaa4:a379) (Ping timeout: 252 seconds)
[15:59:39] *** Joins: xff0x_ (~xff0x@port-92-193-207-83.dynamic.as20676.net)
[16:02:35] *** Quits: cosimone (~user@93-34-132-88.ip49.fastwebnet.it) (Ping timeout: 250 seconds)
[16:04:05] *** Joins: __monty__ (~toonn@user/toonn)
[16:05:09] *** Joins: fef (~thedawn@user/thedawn)
[16:06:35] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[16:06:45] *** Joins: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[16:09:57] *** Quits: acidjnk_new (~acidjnk@p200300d0c7271e28a1c27b1d533e8cdb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:09:57] *** Quits: acidjnk (~acidjnk@p200300d0c7271e28a1c27b1d533e8cdb.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[16:10:13] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:10:13] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:10:13] *** Joins: wroathe (~wroathe@user/wroathe)
[16:11:01] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[16:14:06] *** Quits: nhatanh02 (~satori@123.24.172.30) (Ping timeout: 260 seconds)
[16:15:00] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[16:16:13] *** Quits: vglfr (~vglfr@88.155.60.141) (Ping timeout: 256 seconds)
[16:16:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[16:17:52] *** Joins: gaff (~gaff@49.207.192.225)
[16:18:05] *** Joins: vglfr (~vglfr@88.155.60.141)
[16:18:23] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[16:18:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[16:20:10] *** Quits: max22- (~maxime@lfbn-ren-1-1026-62.w92-139.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[16:23:00] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[16:26:02] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[16:27:34] *** Quits: CiaoSen (~Jura@p200300c957347b002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Quit: CiaoSen)
[16:28:29] *** Quits: uam (uid360535@id-360535.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[16:29:07] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[16:32:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[16:33:42] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Ping timeout: 260 seconds)
[16:33:51] *** Joins: _ht (~quassel@5.253.205.174)
[16:37:29] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[16:40:13] *** Quits: gaff (~gaff@49.207.192.225) (Read error: Connection reset by peer)
[16:40:18] *** Joins: gaff_ (~gaff@49.207.192.225)
[16:40:57] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[16:40:57] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[16:40:57] *** Joins: wroathe (~wroathe@user/wroathe)
[16:41:42] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[16:45:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[16:46:04] *** Joins: nrl^ (~nrl@207.5.21.20)
[16:52:45] *** Quits: turlando_ (~turlando@93-42-250-112.ip89.fastwebnet.it) (Read error: Connection reset by peer)
[16:52:59] *** Joins: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it)
[16:52:59] *** Quits: turlando (~turlando@93-42-250-112.ip89.fastwebnet.it) (Changing host)
[16:52:59] *** Joins: turlando (~turlando@user/turlando)
[17:02:01] *** Joins: simendsjo (~user@host.62.119.172.37.bitcom.se)
[17:03:18] *** fjmorazan_ is now known as fjmorazan
[17:05:17] *** Joins: nhatanh02 (~satori@123.24.172.30)
[17:05:27] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234)
[17:06:05] *** Quits: turlando (~turlando@user/turlando) (Ping timeout: 256 seconds)
[17:08:20] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[17:12:47] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[17:13:53] *** Joins: machinedgod (~machinedg@24.105.81.50)
[17:16:12] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[17:17:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:17:59] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:17:59] *** Joins: wroathe (~wroathe@user/wroathe)
[17:20:17] *** Quits: simendsjo (~user@host.62.119.172.37.bitcom.se) (Ping timeout: 240 seconds)
[17:22:12] *** Joins: spaceseller (~spacesell@31.147.205.13)
[17:22:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[17:27:18] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[17:27:30] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[17:29:11] <InternetCitizen> > (\x -> (x 3, x "three")) (\x -> x)
[17:29:13] <lambdabot>  error:
[17:29:13] <lambdabot>      • No instance for (Num [Char]) arising from the literal ‘3’
[17:29:13] <lambdabot>      • In the first argument of ‘x’, namely ‘3’
[17:29:49] *** Quits: Rum (~bourbon@user/rum) (Quit: WeeChat 3.4)
[17:30:01] <InternetCitizen> why does this not work? It's like Haskell specializes the type of id to `Num a => a -> a`
[17:30:22] <InternetCitizen> > (\x -> (x "four", x "three")) (\x -> x)
[17:30:24] <lambdabot>  ("four","three")
[17:30:31] <InternetCitizen> > (\x -> (x 3, x 4)) (\x -> x)
[17:30:33] <lambdabot>  (3,4)
[17:31:31] <InternetCitizen> on the Hindley-Milner wikipedia article I found:
[17:31:40] <InternetCitizen> "Only values bound in a let construct are subject to instantiation, i.e. are polymorphic, while the parameters in lambda-abstractions are treated as being monomorphic."
[17:32:11] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Ping timeout: 252 seconds)
[17:35:15] <InternetCitizen> > let id x = x in (id 3, id "three")
[17:35:17] <lambdabot>  (3,"three")
[17:35:24] <hpc> InternetCitizen: it needs to be rank 2, which needs a type signature
[17:35:38] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:36:01] <InternetCitizen> what needs to be rank 2?
[17:36:08] <hpc> that makes sure x stays as type (forall a. a -> a) and not some specific (a -> a) in the context of the lambda
[17:36:40] <hpc> > let foo :: (forall a. a -> a) -> (Int, String); foo x = (x 3, x "three") in foo (\x -> x)
[17:36:41] <lambdabot>  (3,"three")
[17:41:17] <InternetCitizen> hpc: if I understand correctly, the inference algorithm starts with `(\x -> (x "four", x "three"))`, gives x a type variable `a` and since we call it with "four" substitues `a` for type `String -> b` and fails when we call `x` with `Int` again?
[17:42:25] <hpc> essentially
[17:42:33] <Hecate> morning
[17:43:02] <hpc> you get a weirder error than that because 3 :: Num a => a, so it thinks "hmm, what if there was instance Num String where ...?"
[17:43:24] <hpc> > (\x -> (x False, x "False")) (\x -> x) -- this might make it more clear
[17:43:25] <lambdabot>  error:
[17:43:25] <lambdabot>      • Couldn't match expected type ‘Bool’ with actual type ‘[Char]’
[17:43:25] <lambdabot>      • In the first argument of ‘x’, namely ‘"False"’
[17:44:07] <InternetCitizen> then why does the Wikipedia article that writing lambd expressions this way is undecidable?
[17:44:09] <InternetCitizen> https://en.wikipedia.org/wiki/Hindley%E2%80%93Milner_type_system#Let-polymorphism
[17:44:27] <InternetCitizen> they give the example of `(λ id .  ... (id 3) ... (id "text") ... ) (λ x . x)`
[17:45:30] <InternetCitizen> "restricting the binding mechanism in an extension of the expression syntax. Only values bound in a let construct are subject to instantiation, i.e. are polymorphic, while the parameters in lambda-abstractions are treated as being monomorphic."
[17:45:47] *** Quits: spaceseller (~spacesell@31.147.205.13) (Remote host closed the connection)
[17:45:54] <InternetCitizen> so Haskell type-inference isn't decidable ???
[17:46:13] *** Joins: spaceseller (~spacesell@31.147.205.13)
[17:46:42] <hpc> it's decidable if you don't allow that sort of example
[17:47:25] <hpc> rank 2 is also decidable, but higher ranked stuff is not
[17:47:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[17:47:47] <hpc> rank 2 is where you see things like that nested forall in foo
[17:48:01] <hpc> rank 3 is forall nested one level further, etc etc
[17:48:19] <geekosaur> (note that ghc does not implement rank-2 type inference, even though it is decidable)
[17:48:23] <InternetCitizen> I thought that the example is what I typed into Haskel
[17:48:46] <InternetCitizen> > (\x -> (x 3, x "three")) (\x -> x)
[17:48:48] <lambdabot>  error:
[17:48:48] <lambdabot>      • No instance for (Num [Char]) arising from the literal ‘3’
[17:48:48] <lambdabot>      • In the first argument of ‘x’, namely ‘3’
[17:48:49] <InternetCitizen> ^
[17:48:55] <hpc> yeah, ghc chooses not to infer rank-2 types
[17:49:40] <hpc> Rank2Types and RankNTypes used to be separate, so maybe if you went back to ghc 6 it could be inferred?
[17:49:50] <geekosaur> no
[17:50:17] <geekosaur> rank-2 type inference is fairly complicated, so they decided to punt on it because there didn't seem to be any demand for it
[17:50:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[17:50:37] <hpc> ah, forgot about that
[17:50:45] <geekosaur> I mean, the typechecker is already complex enough without it :)
[17:50:50] <hpc> in any event, you don't really want higher-ranked inference anyway
[17:51:45] <hpc> imagine you're writing your code, and decide to implement some nice higher-order function like map
[17:51:51] <hpc> you make a mistake somewhere and your code compiles
[17:51:56] <InternetCitizen> how does it "choose" not to infer rank-2 types exactly? Does this simply amount to giving `x` a monomorphic type rather than a polymorphic one?
[17:51:59] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 256 seconds)
[17:52:01] <hpc> but surprise, it's now a rank-5 type or something and completely unusable
[17:52:08] <hpc> and you have no error to figure out what you did wrong
[17:52:18] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[17:52:53] <InternetCitizen> that sounds scary, I don't even know what higher ranked types are
[17:54:03] <hpc> a rank 3 type would be maybe something like (forall b. (forall a. a -> a) -> (b -> b)) -> (c -> c) -> c -> c
[17:54:17] <hpc> just more and more foralls to the left of (->)
[17:54:25] <hpc> at deeper and deeper nestings
[17:54:34] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:54:49] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:55:11] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:55:14] *** Joins: coolnickname (uid531864@user/coolnickname)
[17:55:23] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:55:28] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:55:39] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:55:47] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:55:58] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:56:13] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:16] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:56:27] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:27] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:56:37] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:37] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[17:56:48] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:48] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:56:58] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:56:58] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:57:09] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:57:09] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[17:57:20] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:57:20] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[17:57:22] <InternetCitizen> so the real type of the lambda on the left is forall b, c. (forall a. a -> a) -> (b, c) ?
[17:57:33] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:57:33] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:57:47] <InternetCitizen> no sorry (forall a. a -> a) -> (String, Integer)
[17:57:49] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:57:49] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:58:11] <InternetCitizen> I mean for `(\x -> (x 3, x "three"))`
[17:58:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:58:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[17:58:26] <hpc> yes
[17:58:47] <hpc> and thata (forall a. a -> a) type only accepts things that can be that polymorphic
[17:58:48] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:58:53] <hpc> it will accept id, but not ($) for instance
[17:58:53] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:59:04] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:59:06] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:59:17] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:59:19] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:59:30] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:59:30] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:59:40] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:59:40] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[17:59:50] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[17:59:50] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:00:01] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:01] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:00:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:00:13] *** Joins: n3rdy1 (~n3rdy1@2601:646:c300:f20:d852:3bde:2197:ddf9)
[18:00:24] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:24] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:00:29] <InternetCitizen> sorry but isn't ($) :: forall a. forall b. (a -> b) -> a -> b ?
[18:00:38] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:38] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:00:48] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:48] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:00:58] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:00:58] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:01:09] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:01:09] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:01:20] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:01:21] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:01:32] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:01:36] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:01:43] *** ChanServ sets mode: +o geekosaur
[18:01:47] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:01:52] *** geekosaur sets mode: +b *!*@static.211.245.203.116.clients.your-server.de
[18:01:53] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:02:06] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:02:14] *** geekosaur sets mode: -o geekosaur
[18:02:27] <hpc> InternetCitizen: yea, but you can define it as ($) = id
[18:02:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:02:41] <hpc> perhaps that's a bad example
[18:02:54] <hpc> it will accept id, but not... not for instance
[18:02:57] <hpc> :t not
[18:02:58] <lambdabot> Bool -> Bool
[18:03:08] *** Joins: waleee (~waleee@2001:9b0:21d:fc00:398f:b003:b90d:acf4)
[18:03:11] <hpc> grammatically that's an even worse example lol
[18:04:53] <hpc> > let foo :: (forall a. a -> a) -> (Int, String); foo x = (x 3, x "three") in foo not
[18:04:55] <lambdabot>  error:
[18:04:55] <lambdabot>      • Couldn't match type ‘a’ with ‘Bool’
[18:04:55] <lambdabot>        ‘a’ is a rigid type variable bound by
[18:05:16] <InternetCitizen> hpc: so if I understand correctly, this implies that when it tries to infer the type of (\x -> (x 3, x "three")), it gives x a type variable `a` and not a type schema `forall a . b` (or something like that)
[18:05:17] <hpc> and that's the sort of error you get when you pass something that's "too monomorphic"
[18:05:42] <hpc> yeah
[18:06:00] <hpc> it tries to have the "forall a" all the way to the left
[18:06:15] <hpc> foo :: forall a. (a -> a) -> (Int, String)
[18:06:23] <hpc> which means you have to pick a single a when calling foo
[18:08:28] <InternetCitizen> hpc: thank you very much <3
[18:14:03] *** Joins: max22- (~maxime@2a01cb0883359800a99596770101e95e.ipv6.abo.wanadoo.fr)
[18:19:11] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:19:29] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:20:10] *** Quits: gaff_ (~gaff@49.207.192.225) (Remote host closed the connection)
[18:21:27] *** Joins: gaff (~gaff@49.207.192.225)
[18:23:25] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[18:24:58] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:25:37] *** Quits: gaff (~gaff@49.207.192.225) (Ping timeout: 240 seconds)
[18:28:43] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:29:07] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:30:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[18:30:54] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Ping timeout: 268 seconds)
[18:32:04] *** ChanServ sets mode: +o litharge
[18:32:05] *** litharge sets mode: -bo *!*@static.211.245.203.116.clients.your-server.de litharge
[18:32:08] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:32:09] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:32:19] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:32:21] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:32:31] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:32:31] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:32:41] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:32:41] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:32:51] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:32:51] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:32:59] *** Joins: gaff (~gaff@49.207.192.225)
[18:33:01] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:33:01] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:33:13] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:33:13] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:33:26] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:33:26] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:33:42] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:33:42] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:34:05] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:34:07] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:34:18] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:34:19] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:34:29] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:34:29] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:34:40] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:34:42] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:34:52] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:34:52] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:35:02] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:35:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:35:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:35:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:35:22] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:35:22] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:35:25] <int-e> geekosaur: ^half an hour wasn't enough
[18:35:33] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:35:33] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:35:47] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:35:47] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:36:05] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:36:05] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:36:16] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:36:16] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:36:27] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:36:31] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:36:42] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:36:44] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:36:55] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:36:55] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:37:05] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:37:05] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:37:15] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:37:15] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:37:25] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:37:25] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:37:35] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:37:35] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:37:46] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:37:46] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:37:59] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:38:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:38:22] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:22] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:38:32] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:33] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:38:44] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:45] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:38:54] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:38:54] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:39:04] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:39:04] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:39:15] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:39:17] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:39:28] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:39:40] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:39:52] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:40:02] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:40:14] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:40:22] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:40:33] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:40:38] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:40:50] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:40:51] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:41:01] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:01] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:41:03] *** Joins: SummerSonw (~The_viole@203.77.49.232)
[18:41:11] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:11] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:41:22] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:22] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:41:32] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:32] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Read error: Connection reset by peer)
[18:41:43] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:43] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:41:50] <geekosaur> blegh
[18:41:53] *** ChanServ sets mode: +o geekosaur
[18:41:56] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:41:56] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:42:12] *** Joins: ralu (~ralu@static.211.245.203.116.clients.your-server.de)
[18:42:12] *** Quits: ralu (~ralu@static.211.245.203.116.clients.your-server.de) (Remote host closed the connection)
[18:42:13] *** geekosaur sets mode: +b ralu!*@*
[18:42:24] <Hecate> §2
[18:42:41] *** geekosaur sets mode: -o geekosaur
[18:43:09] *** Quits: gaff (~gaff@49.207.192.225) (Ping timeout: 250 seconds)
[18:43:17] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[18:43:17] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[18:43:17] *** Joins: wroathe (~wroathe@user/wroathe)
[18:43:54] *** Quits: _ht (~quassel@5.253.205.174) (Ping timeout: 260 seconds)
[18:44:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:5c9e:b916:30fd:4234) (Ping timeout: 240 seconds)
[18:44:07] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[18:44:56] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[18:44:57] *** Joins: [_] (~itchyjunk@user/itchyjunk/x-7353470)
[18:45:19] *** Quits: [_] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[18:45:46] *** Joins: ph14nix (~io@94.234.51.48)
[18:47:36] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:49:44] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[18:49:46] *** Quits: ph14nix (~io@94.234.51.48) (Quit: WeeChat 3.4)
[18:52:29] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[18:53:25] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[18:55:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[18:56:51] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[18:57:15] *** Quits: spaceseller (~spacesell@31.147.205.13) (Quit: Leaving)
[18:57:17] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[19:00:42] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 260 seconds)
[19:00:57] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[19:01:37] *** Joins: acode (~acode@dslb-092-077-045-168.092.077.pools.vodafone-ip.de)
[19:03:11] <acode> I'm a mathematician learning haskell and I'm confused by the name of the typeclass Functor. In my understanding Functor is for types that "can be mapped over" which makes a lot of sense, but I'm confused by its name. Is it related to functors in mathematics or is it one of the many instances of unrelated concepts sharing a name?
[19:03:43] <geekosaur> it's a restricted form of a category theory functor, as I understand it
[19:04:12] <geekosaur> there's a more genjeral one in Control.Category; the normla one is restricted to the (notional) category Hask of Haskell types
[19:05:00] <acode> Uh I never realized that types form a category. What's an arrow in Hask?
[19:08:41] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 245 seconds)
[19:08:51] <Clint> https://wiki.haskell.org/Hask
[19:09:00] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[19:10:32] <geekosaur> and they don't quite, because of bottom. But I'm also led to believe that there are other category-like things that would admit Hask
[19:10:42] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:11:11] <geekosaur> also there's the paper "Fast and loose reasoning is morally correct" which shows that many CT things are applicable to Hask if you take some care
[19:12:14] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[19:12:52] <acode> very interesting, thanks for the references
[19:12:57] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 240 seconds)
[19:13:35] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Remote host closed the connection)
[19:15:41] *** Quits: SummerSonw (~The_viole@203.77.49.232) (Quit: Leaving)
[19:17:01] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[19:17:28] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:19:28] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[19:20:09] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[19:22:10] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 260 seconds)
[19:23:17] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[19:24:30] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 260 seconds)
[19:24:44] *** Joins: son0p (~ff@181.136.122.143)
[19:26:39] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[19:27:21] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:27:28] *** Joins: gaff (~gaff@49.207.207.53)
[19:27:36] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[19:28:18] <lechner_> Hi, my cabal.project.local specifies "ignore-project: False; compiler: ghc"  Do I need it? Thanks!
[19:28:39] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[19:29:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[19:30:08] *** Quits: ServerStatsDisco (~serversta@2001:470:69fc:105::1a) (Quit: You have been kicked for being idle)
[19:30:41] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:32:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[19:34:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 268 seconds)
[19:36:11] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[19:39:02] *** Quits: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net) (Remote host closed the connection)
[19:42:29] *** ChanServ sets mode: +o litharge
[19:42:29] *** litharge sets mode: -bo ralu!*@* litharge
[19:45:07] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[19:45:54] <lyxia> How do I use an installed package with standalone invocations of ghc? I tried   cabal install --lib first-class-families && ghc -package first-class-families   and cabal seems to install things somewhere but ghc tells me it "cannot satisfy -package first-class-families"
[19:46:09] <albet70> is there binary package manager for ghc?
[19:46:22] *** Joins: Pickchea (~private@user/pickchea)
[19:46:39] <hpc> albet70: does apt count? :P
[19:46:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[19:46:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:47:28] <albet70> apt provide scotty?
[19:48:38] <geekosaur> lyxia, you may need to use --package-env (cabal) / -package-env (ghc)
[19:48:47] <hpc> maybe?
[19:48:52] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:49:02] <hpc> https://hackage.haskell.org/package/scotty doesn't list debian, but a few other distros have it packaged
[19:49:49] <hpc> is there a reason you can't cabal install it?
[19:50:16] <geekosaur> there's no binary package manager because too many things alter abis and ghc is critically dependent on the exact package abi for cross-module inlining
[19:50:27] *** Joins: MoC (~moc@user/moc)
[19:51:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 245 seconds)
[19:51:15] <albet70> my VPS only has 1GB RAM
[19:52:39] <hpc> yeah that'll do it
[19:53:00] <lyxia> geekosaur: thanks, that works
[19:53:02] <hpc> although, maybe upgrade it?
[19:53:10] <lyxia> sounds like something I'm going to forget in a few months
[19:53:10] <hpc> 1 gig isn't even enough to install centos anymore
[19:53:22] <albet70> 1GB isn't enough to compile scotty
[19:53:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 252 seconds)
[19:53:58] *** Joins: euouae (~euouae@user/euouae)
[19:54:30] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[19:55:01] <euouae> Hello, I have a question about the reader monad and monads in general. From what I know, a monad is an endofunctor so M : C -> C, and then we have a return with type :: a -> M a. But how does this include the reader monad? https://en.wikipedia.org/wiki/Monad_(functional_programming)#Environment_monad
[19:55:21] <euouae> In the reader monad, there are two parameters for return; the value and the environment
[19:55:28] <hpc> albet70: build your webapp somewhere else and copy it over maybe?
[19:55:48] <hpc> with static linking you won't need scotty's libs on the vps at all
[19:56:11] <euouae> I'm noticing that there is the following remark under Notes, https://en.wikipedia.org/wiki/Monad_(functional_programming)#cite_note-4 which says in CT they're called "strong monads" instead?
[19:56:22] <euouae> is that the missing link?
[19:57:17] <euouae> Because again strong monads seem to involve a single category C and I don't understand how multiple parameters of different types are incorporated into the theory
[19:57:24] <lyxia> energizer: return :: a -> M a,   if M a = (e -> a)  then return :: a -> e -> a
[19:57:35] <lyxia> I'm not sure what's the confusion here
[19:57:44] <lyxia> euouae: ^
[19:58:32] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Ping timeout: 240 seconds)
[19:58:53] <euouae> Oh, I didn't realize the hom functor is a monad!
[19:59:14] <euouae> but later on, with the state monad we have `type State s t = s -> (t, s)`. Isn't `State` the monad?
[19:59:32] <lyxia> `State s`
[19:59:44] <euouae> So `State s` is the monad?
[19:59:54] <lyxia> `State s` is a monad, yes.
[20:00:01] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[20:01:05] <euouae> That's because of how constructors curry? 
[20:01:42] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[20:01:44] <lyxia> Can you define   return :: a -> State s a ?  bind :: State s a -> (a -> State s b) -> State s b ?  Do they satisfy the monad laws?
[20:02:44] <euouae> I'm just not understanding how to see it as M : C -> C. What's the category here?
[20:03:12] <lyxia> Still the same category of types and functions
[20:03:14] <euouae> If you parametrize State by `s` then I understand that C is Hask, and that's the objects `t` runs over
[20:03:41] <euouae> But for `State` it looks more like C x C -> C
[20:04:01] <lyxia> That's why I was careful to say `State s`
[20:04:33] <euouae> The article states "From the category theory point of view, a state monad is derived from the adjunction between the product functor and the exponential functor, which exists in any cartesian closed category by definition. "
[20:04:44] <euouae> Are they talking about `State` or `State s` here?
[20:04:48] <lyxia> State s
[20:05:21] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 245 seconds)
[20:05:26] <euouae> " Due to the fact that functions on multiple free variables are common in programming, monads as described in this article are technically what category theorists would call strong monads."
[20:05:46] <euouae> Don't they mean `State` is a strong monad (with two parameters s and t)?
[20:05:54] <lyxia> It's the adjunction between `(s, ) : Type -> Type` and `(s -> ) : Type -> Type`, using Haskell's partially applied infix notation.
[20:06:11] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 245 seconds)
[20:06:40] <euouae> ah right. That's what product and exponential means since A -> B = B^A
[20:06:55] <lyxia> I think you should skip over any mention of strong monads because that's irrelevant for this question.
[20:07:33] <euouae> so when we talk about a monad M t1 t2 ... tn, we really mean that (M t1 t2 ... tn-1) is a monad?
[20:08:00] <lyxia> Like, table it for after you can reliably say what "M" is when you look at a new monad.
[20:08:32] <lyxia> Yeah that's usually the case
[20:08:57] <lyxia> When we say monads in Haskell we usually refer to monads on Hask
[20:09:34] <lyxia> That's exacly what the Monad class represents
[20:10:03] <albet70> what is Kleisli arrow?
[20:10:09] <euouae> got it, thank you lyxia 
[20:10:11] <lyxia> sometimes monads in other categories are relevant, and hopefully it will be mentioned explicitly, but it's useful being careful regardless
[20:10:18] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:12:41] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:12:59] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:15:13] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[20:15:36] *** Joins: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net)
[20:16:21] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:17:18] *** Quits: acode (~acode@dslb-092-077-045-168.092.077.pools.vodafone-ip.de) (Quit: Client closed)
[20:18:10] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:18:39] *** Joins: pavonia (~user@user/siracusa)
[20:20:30] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[20:20:30] *** Quits: Feuermagier (~Feuermagi@user/feuermagier) (Remote host closed the connection)
[20:20:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:20:45] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[20:20:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 245 seconds)
[20:20:47] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[20:21:54] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[20:22:02] <monochrom> No, I don't talk about a monad "Maybe X".  I talk about a monad "Maybe".
[20:22:40] <monochrom> Likewise, I don't talk about a function "f(x)". "f" is the function.
[20:24:19] *** Joins: burnsidesLlama (~burnsides@dhcp168-013.wadham.ox.ac.uk)
[20:24:22] <lyxia> I believe in getting people to do more math and they will learn to police their language themselves.
[20:25:11] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Ping timeout: 250 seconds)
[20:25:51] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[20:26:02] *** Joins: Feuermagier (~Feuermagi@user/feuermagier)
[20:29:02] <monochrom> No, this is not about policing. And I have had students who have appreciated that my clarifications helped them unstick and move forward.
[20:29:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[20:30:17] <euouae> monochrom, so you're saying that you'd say that `State s` is a monad, which clarifies what is a monad and what is the parameter.
[20:30:28] <monochrom> Yes.
[20:32:00] <euouae> unfortunately the paper I'm reading doesn't seem to follow that rule 
[20:32:48] <euouae> Or, I have not read it as carefully as I should? But I do understand what the convention is now that you mention it
[20:33:33] <euouae> for example they call `M` a monad but then explain it is parametrized by some `t`, which I think is similar to `State` being parametrized by `s`
[20:36:54] <monochrom> Oh, I say "the State monad" all the time, too. But only when I'm casually and to people who have already known. To beginners, I place consistency at a high priority.
[20:38:44] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:39:22] <euouae> yeah there's some in-the-know thing going on but I'm trying to break through :P thank you for the help
[20:40:24] <lyxia> monochrom: that's a fair point!
[20:42:18] *** Joins: econo (uid147250@user/econo)
[20:43:37] *** Quits: n3rdy1 (~n3rdy1@2601:646:c300:f20:d852:3bde:2197:ddf9) (Ping timeout: 240 seconds)
[20:46:31] *** Quits: nrl^ (~nrl@207.5.21.20) (Ping timeout: 256 seconds)
[20:50:46] *** Joins: Jing (~hedgehog@2604:a840:3::1013)
[20:53:11] <euouae> lyxia that statement that (-> e) is a monad was quite tricky actually
[20:53:19] <euouae> or sorry, (a ->)
[20:59:26] *** Joins: Midjak (~Midjak@may53-1-78-226-116-92.fbx.proxad.net)
[21:02:04] *** Joins: nrl^ (~nrl@207.5.21.20)
[21:03:59] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[21:04:50] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 260 seconds)
[21:08:49] *** Joins: eflister (~eflister@2601:1c0:5501:c150:19dd:dfde:ec02:aa1)
[21:09:51] *** Joins: hexology (~hexology@user/hexology)
[21:12:28] *** Quits: gaff (~gaff@49.207.207.53) (Remote host closed the connection)
[21:15:20] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:16:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:18:25] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[21:19:10] *** Quits: nrl^ (~nrl@207.5.21.20) (Remote host closed the connection)
[21:20:39] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 250 seconds)
[21:23:09] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[21:23:34] <sirlensalot> Anybody have an idea how to use lens to traverse/fold a rank-2 list to "take" or "drop" from it? E.g., given [[1::Int,2,3],[4,5]], I'd like a `take 4` operation that results in `[[1,2,3],[4]]`
[21:24:00] <sirlensalot> I have an operational solution but I was hoping there'd be some IndexedTraversal magic
[21:28:26] *** Quits: mbuf (~Shakthi@223.184.115.117) (Quit: Leaving)
[21:28:54] <Taneb> I'm not aware of any lensy magic that lets you do that
[21:31:27] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[21:31:53] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[21:33:03] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:35:38] *** Quits: Jing (~hedgehog@2604:a840:3::1013) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:37:25] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[21:39:04] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net)
[21:39:43] <xerox> as for not lensy if you write a take variant that also tells you how much it took it's pretty straightforward
[21:40:52] *** Joins: Keriel (~Keriel@bras-base-toroon474qw-grc-71-184-145-2-133.dsl.bell.ca)
[21:43:06] *** Joins: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net)
[21:44:05] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[21:44:38] *** Quits: johnw (~johnw@76-234-69-149.lightspeed.frokca.sbcglobal.net) (Quit: ZNC - http://znc.in)
[21:47:17] *** Quits: yauhsien (~yauhsien@61-231-19-17.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[21:48:53] *** Joins: lavaman (~lavaman@98.38.249.169)
[21:49:01] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:49:01] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:49:01] *** Joins: wroathe (~wroathe@user/wroathe)
[21:49:45] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[21:52:17] *** Joins: Pickchea (~private@user/pickchea)
[21:52:54] <Keriel> hi, I'm going through HPPFP at the moment and having trouble with the exercises at the end of ch 10 that want you to write a bunch of point-free folds.  a lot of them have been ugly enough I think I'm doing something wrong, e.g. myElemF = flip foldr False . ((||) .) . (==)  - but also I don't see how to do filter at all.
[21:53:22] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[21:53:25] <Keriel> I wanted to start with something like - flip foldr [] . bool (:) (flip const) . magic - but I need to somehow apply the test function to the list element and still have a copy of the list element to cons if needed, which I don't see how to do.
[21:53:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c) (Ping timeout: 240 seconds)
[21:56:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[21:57:24] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[21:57:24] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[21:57:24] *** Joins: wroathe (~wroathe@user/wroathe)
[22:00:14] <euouae> Keriel what do you mean by point-free style? So you want filter = expr, with no arguments involved, right?
[22:00:45] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[22:00:50] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 260 seconds)
[22:01:25] <euouae> wouldn't it be enough to write it pointful and then work from there to make it pointfree?
[22:02:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:03:01] <monochrom> filter will be a direct foldr, rather than a flip foldr.
[22:04:15] <monochrom> In this case, the hard part is the pointfree form of what you give to foldr.
[22:05:11] <monochrom> In this case, I wouldn't bother.
[22:06:39] <monochrom> Some pointfree forms elucidate new perspectives, new structures, new beauty.
[22:06:44] <monochrom> This is not one of them.
[22:06:59] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[22:09:12] *** Quits: euouae (~euouae@user/euouae) (Quit:  )
[22:11:16] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:13:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[22:13:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[22:13:29] *** Joins: wroathe (~wroathe@user/wroathe)
[22:15:48] <justsomeguy> Heh, I guess I did all of those exercises wrong.
[22:15:59] *** Quits: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 268 seconds)
[22:16:41] *** Quits: jtomas (~jtomas@153.red-83-53-252.dynamicip.rima-tde.net) (Remote host closed the connection)
[22:17:26] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:20:05] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.3)
[22:20:24] *** Quits: eflister (~eflister@2601:1c0:5501:c150:19dd:dfde:ec02:aa1) (Quit: Client closed)
[22:20:59] <Keriel> euouae: yeah. filter = expr, where expr also does not contain any lambdas (the latter being the hard part)
[22:21:32] <Keriel> monochrom: hm, not flip? don't you need to flip since you don't know what the function is yet but you know what the base case is? or am I misunderstanding when you use flip? (but if you think it's not worth doing that's reasonable too)
[22:22:11] <monochrom> How does flip have to do with base cases?
[22:22:36] <tomsmeding> > (\p -> foldr (\x r -> if p x then x : r else r) []) (>3) [1..6]
[22:22:38] <lambdabot>  [4,5,6]
[22:22:39] <monochrom> Every recursion has base cases. Are you saying therefore all recursive functions must use flip?
[22:22:52] <tomsmeding> @pl \p -> foldr (\x r -> if p x then x : r else r) []
[22:22:52] <lambdabot> flip foldr [] . flip flip id . (ap .) . (`ap` (:)) . (((.) . if') .)
[22:23:16] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[22:23:17] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:23:28] <Keriel> I'm not sure what ap is?
[22:23:37] <tomsmeding> Good :p
[22:24:02] <tomsmeding> It's <*>, but that knowledge is probably not helpful to you
[22:24:18] <tomsmeding> Are you very sure they're asking to make filter without any lambdas anywhere?
[22:24:33] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 256 seconds)
[22:24:37] <tomsmeding> Because that's, well, that, and that is as monochrom not giving any insight
[22:24:41] <Keriel> only in that someone elsewhere told me to use <*> earlier, so now I know I've gotten the same suggestion twice :P
[22:25:09] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:9ce9:17f7:15aa:852c)
[22:25:24] <Keriel> the example at the start of the exercise set starts with the comment "-- fold, both myAnd and the folding function are point-free now"
[22:25:27] <EvanR> if you're trying to "golf" your arguments down to zero <*> is one of those things that can contribute
[22:25:40] <Keriel> which I think makes it clear they don't want me to use lambdas in the folding function
[22:25:47] <tomsmeding> Ah right
[22:25:54] <EvanR> (f <*> g) x = f x (g x)
[22:25:57] <Keriel> but it might be one of those exercise where they want you to realize you can't do it with the tools you have and move on
[22:26:05] <EvanR> (for instance)
[22:26:08] <tomsmeding> So you want 'filter p = foldr _ []' for some _
[22:26:27] <tomsmeding> The above was 'filter = _'
[22:26:28] <Keriel> well, that's not pointfree , right?
[22:26:29] <EvanR> wait that's monads
[22:27:21] <tomsmeding> Keriel: ... I guess, indeed
[22:27:58] <tomsmeding> I mean, you're going to need a conditional somehow: you need to call the predicate on list elements to decide whether to include the element or not
[22:28:13] <tomsmeding> And Prelude doesn't have a pointfree conditional
[22:28:18] <monochrom> Some of us accept "map f = foldr ..." as pointfree. It is good enough to get rid of "xs".
[22:28:34] <Keriel> they've shown us bool in an earlier chapter so I was using that
[22:28:40] <tomsmeding> Lambdabot sneakily used if', assuming that's defined as if' a b c = if a then b else c
[22:28:46] <tomsmeding> Ah yeah that's bool
[22:28:49] *** Joins: eflister (~eflister@2601:1c0:5501:c150:e86d:7316:8592:8dd3)
[22:29:08] <tomsmeding> I have a suspicion that the book had monochrom's version in mind
[22:29:10] <Keriel> also, monochrom: the reason I thought you had to use flip foldr was just that you know what the second argument to foldr will be - [] - before taking any of the arguments to filter, but not the first one?
[22:29:28] <Keriel> but yeah. it seems like there isn't a real solution with what they've shown me so I should try to write it as filter f = ...
[22:29:34] <lechner_> Hi, why does this module explicty import Prelude, please?   https://github.com/nikita-volkov/hasql#short-example
[22:29:36] <tomsmeding> Keriel: the @pl output started with 'flip foldr []' for precisely that reason
[22:29:51] *** Joins: ProfSimm (~ProfSimm@87.227.196.109)
[22:30:09] <tomsmeding> @pl \x r -> if p x then x : r else r
[22:30:09] <lambdabot> join . ap ((.) . if' . p) (:)
[22:30:13] <tomsmeding> Meh
[22:30:27] <Keriel> right, I've been doing flip foldr for a lot of these, I was replying to monochrom asking what flip has to do with base cases
[22:30:37] <tomsmeding> :t flip
[22:30:38] <lambdabot> (a -> b -> c) -> b -> a -> c
[22:30:50] <tomsmeding> Flip just flips the arguments of a function
[22:30:51] <monochrom> Generally when an argument is mentioned twice, it's already a nightmare. Here we have two arguments, both mentioned twice.
[22:31:02] <Keriel> yeah I'm... not even immediately sure if I can do filter f = ...
[22:31:35] <Keriel> they also want maximumBy and minimumBy which seem impossible for the same reason
[22:32:01] <monochrom> I think those are easier and nicer.
[22:32:04] <tomsmeding> :t let bool a b c = if a then b else c in \p -> foldr (join . ap ((.) . bool . p) (:)) -- this is the @pl output, but it's completely unreadable
[22:32:05] <lambdabot> Foldable t => (a -> Bool) -> [a] -> t a -> [a]
[22:32:35] <Keriel> I'll take a look at those then. are you thinking of maximumBy = _ or maximumBy f = _?
[22:32:45] <monochrom> Yes.
[22:33:11] <monochrom> Err, "maximumBy f = _".
[22:33:32] <Keriel> hmm I guess I have to use head here?
[22:34:10] <Keriel> or at least, I don't think the book has introduced foldr1 so I'm probably not meant to use it
[22:34:12] <monochrom> Consider foldl1 or foldr1.
[22:34:27] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:35:09] *** Quits: jpds (~jpds@gateway/tor-sasl/jpds) (Remote host closed the connection)
[22:35:36] *** Joins: jpds (~jpds@gateway/tor-sasl/jpds)
[22:38:44] <Keriel> well. the normal version would be myMaximumBy f = foldr1 (\x y -> bool y x (f x y == GT)) - also using foldr1 because yeah I can't see how to do it without that or ugly head stuff
[22:39:34] <Keriel> but this seems to need something like the ap stuff being discussed above? I can do 'flip bool' to get the correct 'conditional', but then I no longer have x and y left to use for the comparison test. if that makes sense.
[22:39:45] *** Joins: Erutuon (~Erutuon@user/erutuon)
[22:40:40] <monochrom> Ah, that's difficult, yeah.
[22:41:04] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:41:49] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[22:42:11] <Keriel> I think I'm just going to assume I'm supposed to treat these as impossible to write pointfree and come back to it when I learn more tools
[22:42:26] <Keriel> thanks for the help though ^^
[22:45:49] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[22:48:53] <lechner_> Hi, in a pinch is there a way, please, to makel libraries accessible to runhaskell without a local cabal file?
[22:49:37] <lechner_> cabal install hasql says " Cannot build the executables"
[22:49:51] <monochrom> No, but we know ways of "cabal run" and "cabal repl"
[22:51:28] *** Quits: drewolson (~drewolson@user/drewolson) (Quit: The Lounge - https://thelounge.chat)
[22:51:39] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[22:52:00] <lechner_> should i use   cabal repl   instead?
[22:52:04] *** Joins: drewolson (~drewolson@user/drewolson)
[22:52:14] <EvanR> if you really can't figure out how to write something point free, consider how anyone's supposed to read it later xD
[22:52:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[22:52:36] <monochrom> I read it by putting the points back.
[22:53:08] <monochrom> I mean in the ugly cases, of course.
[22:53:11] *** Quits: deadmarshal (~deadmarsh@95.38.119.182) (Ping timeout: 250 seconds)
[22:53:21] *** Joins: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com)
[22:53:46] <EvanR> a combination of bool and (==GT) is screaming case analysis to me
[22:54:13] <monochrom> "interact (unlines . map (show . solve . read) . lines)" is best read without putting the points back. It's a nice one.
[22:54:56] *** Quits: drewolson (~drewolson@user/drewolson) (Client Quit)
[22:55:05] *** Joins: drewolson (~drewolson@user/drewolson)
[22:55:27] *** Quits: max22- (~maxime@2a01cb0883359800a99596770101e95e.ipv6.abo.wanadoo.fr) (Ping timeout: 268 seconds)
[22:56:37] *** Quits: Erutuon (~Erutuon@user/erutuon) (Ping timeout: 240 seconds)
[22:56:43] <EvanR> \x y -> case f x y of GT -> y; _ -> x
[22:57:14] *** Joins: eggplantade (~Eggplanta@108-201-191-115.lightspeed.sntcca.sbcglobal.net)
[22:57:25] *** Quits: coot (~coot@89-64-85-93.dynamic.chello.pl) (Quit: coot)
[22:59:59] *** Joins: Erutuon (~Erutuon@user/erutuon)
[23:00:06] <lechner_> Hi, rel8 requires base ^>=4.14 but Debian's ghc 8.8.4 only comes with base 4.13 (constraint from non-upgradeable package requires installed instance). can i upgrade ghc via cabal, too?
[23:02:09] *** Quits: tromp (~textual@dhcp-077-249-230-040.chello.nl) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:02:18] *** Quits: coolnickname (uid531864@user/coolnickname) (Quit: Connection closed for inactivity)
[23:02:43] <c_wraith> lechner_: you're best off completely uninstalling debian's ghc distribution and using ghcup to manage your installed ghc versions
[23:04:00] *** Joins: Sgeo (~Sgeo@user/sgeo)
[23:04:52] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:05:13] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:06:15] <lechner_> c_wraith: thanks!
[23:07:18] *** Joins: otherwise (~otherwise@2601:602:880:90f0:4406:752c:ba78:a481)
[23:18:23] *** Joins: califax (~califax@user/califx)
[23:21:07] *** Joins: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net)
[23:23:23] *** Joins: JimL (~quassel@89-162-2-132.fiber.signal.no)
[23:24:59] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[23:24:59] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4)
[23:25:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[23:28:41] *** Quits: shapr (~user@pool-108-28-144-11.washdc.fios.verizon.net) (Ping timeout: 245 seconds)
[23:29:47] *** Joins: max22- (~maxime@2a01cb0883359800767a96b77d5018f7.ipv6.abo.wanadoo.fr)
[23:30:20] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:36:45] *** Joins: juhp (~juhp@128.106.188.82)
[23:36:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:38:04] *** Joins: tromp (~textual@dhcp-077-249-230-040.chello.nl)
[23:38:32] *** Joins: coot (~coot@89-64-85-93.dynamic.chello.pl)
[23:39:55] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 256 seconds)
[23:40:33] *** Quits: zincy_ (~zincy@host86-151-99-97.range86-151.btcentralplus.com) (Remote host closed the connection)
[23:40:35] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:40:35] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:40:35] *** Joins: wroathe (~wroathe@user/wroathe)
[23:48:08] *** Joins: simendsjo (~user@host.62.119.30.141.bitcom.se)
[23:50:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:50:54] *** Quits: otherwise (~otherwise@2601:602:880:90f0:4406:752c:ba78:a481) (Remote host closed the connection)
[23:53:28] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:53:28] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:53:28] *** Joins: wroathe (~wroathe@user/wroathe)
[23:54:44] <lechner_> Hi, is it possible, in hasql, to use a more general connection string (for pg_service) or do i have to specify all the parameters with this separately?  I can't figure out how to turn a strict bytestring into the "type Settings = ByteString" declared here     https://hackage.haskell.org/package/hasql-1.4.5.3/docs/Hasql-Connection.html
[23:56:57] *** Quits: simendsjo (~user@host.62.119.30.141.bitcom.se) (Remote host closed the connection)
[23:57:57] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:58:18] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[23:59:09] *** Joins: Pickchea (~private@user/pickchea)
