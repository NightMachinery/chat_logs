[00:00:33] *** Quits: fstd (~fstd@xdsl-87-78-21-185.nc.de) (Read error: Connection reset by peer)
[00:00:40] *** Joins: fstd (~fstd@xdsl-87-78-21-185.nc.de)
[00:03:49] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:04:27] *** Joins: ouestbil1ie (~gallup@142.169.33.81)
[00:05:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[00:05:43] *** Joins: asdflkj_sh (asdflkj@bsdforall.org)
[00:06:31] <nicode> Is there a cleaner way to initialize my self referencing nodes? https://github.com/nicdesjardins/dojo/blob/main/testcases/tree-struct.min.c
[00:07:33] *** Joins: mahmutov (~mahmutov@37.155.21.112)
[00:08:32] <fizzie> `nodes` is in scope for the initialiser expressions, and you're only using the addresses rather than the values, so you can put them straight in the initialiser if you think it's cleaner.
[00:09:38] *** Quits: ouestbillie (~gallup@modemcable053.204-20-96.mc.videotron.ca) (Quit: Lost terminal)
[00:10:12] <nicode> So I can do nodes[] = { { "first node", &nodes[1], &node[2] }, ... } ?
[00:11:11] <fizzie> `struct node {...} nodes[] = { [SOMETHING_TO_SAY] = { .text = "...", .yes = &nodes[IS_IT_TRUE], .no = &nodes[BLAH] }, ... }; with designated initializers.
[00:11:41] <nicode> oh, I'll give that a try, thx
[00:12:00] <fizzie> But if you prefer, also without the designators, the way you said.
[00:13:17] <nicode> right, though it seems to me designators will help with readability so I'll go that route.
[00:14:16] *** Quits: ouestbil1ie (~gallup@142.169.33.81) (Ping timeout: 256 seconds)
[00:14:31] <fizzie> FWIW they're a C99 feature, which I've almost stopped mentioning because it *has* been two decades, but still...
[00:15:15] *** Joins: malina (~malina@user/malina)
[00:18:11] <sham1> People are still clinging onto ANSI C
[00:19:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:21:14] <nicode> sham1: because of legacy programs?
[00:21:30] <sham1> Sadly not just that
[00:21:36] <sham1> Some people are stubborn
[00:21:52] <strajder> c99 rocks
[00:22:00] <pragma-> ANSI has adopted C99 and AFAIK C11.
[00:22:13] <pragma-> So it's a bit of a misnomer to use "ANSI" to refer to C89.
[00:22:38] <sham1> Well okay. C1989
[00:22:56] <sham1> Or C1990 depending on who you ask
[00:25:01] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[00:27:23] *** Quits: kts (~kts@103.73.237.74) (Quit: Konversation terminated!)
[00:28:32] *** Joins: silkut[m] (~silkutmat@2001:470:69fc:105::1:6530)
[00:28:36] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:29:09] *** Joins: Torr (~Torr@user/torr)
[00:31:07] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:32:24] *** Joins: pert (~pert@fsf/member/pert)
[00:33:20] <pragma-> "You're still using C11? Isn't C99 a higher version?"
[00:33:24] <nicode> that looks so much better, thanks fizzie! https://github.com/nicdesjardins/dojo/blob/main/testcases/tree-struct.min.c
[00:34:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:27] *** Joins: kts (~kts@103.73.237.74)
[00:34:29] <constxd> based
[00:34:45] <nicode> based?
[00:34:53] <sham1> baste
[00:35:41] *** Quits: inomoz (~inomoz@176.59.115.245) (Remote host closed the connection)
[00:35:58] <constxd> kings
[00:36:41] <constxd> can a programming language without an http server implementation be taken seriously as a choice for web development in 2022
[00:37:18] <sham1> Any language can use CGI
[00:37:25] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[00:37:28] <constxd> yes but that's my question
[00:37:49] <constxd> is CGI (more likely FastCGI) still a viable option
[00:37:53] <constxd> or is it just cringe now
[00:38:40] <slact[m]> yeah i'm retty sure COBOL is cringe now 'cause it has no HTTP server implementation
[00:38:56] <strajder> should web development be taken seriously in 2022?
[00:39:09] <constxd> slact[m]: yes, COBOL is cringe for web development
[00:39:13] <constxd> it's also cringe in general
[00:39:49] <constxd> seems like php is the only thing still using CGI
[00:40:11] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 256 seconds)
[00:40:17] <slact[m]> strajder: um... does web development take _itself_ seriously?
[00:40:29] <strajder> that too xD
[00:40:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[00:40:45] <constxd> web is the future
[00:40:59] <constxd> native apps are cope
[00:41:21] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[00:41:22] <constxd> web is already dominant and is only getting better
[00:41:23] <sham1> I mean, web developers do take *themselves* seriously
[00:41:36] <constxd> like it or not web is the most important platform
[00:41:50] <slact[m]> sham1: that's an answer to a different question
[00:42:22] <sham1> Not really. Web developers take themselves seriously and thus web development is also taken seriously
[00:42:28] <sham1> At least by web developers
[00:45:48] *** Joins: duuude (~user@user/duuude)
[00:46:56] <nicode> A group taking themself seriously isn't necessarily a good starting point, is it?
[00:47:00] <strajder> web was the future in the 90s, until large-scale surveillance happened; more and more people will just block your js now
[00:47:04] <slact[m]> i'm a punch-card man myself, so i miht be a bit biased, buuut
[00:47:08] *** Quits: rito_ (~rito_gh@45.112.243.149) (Quit: Leaving)
[00:47:56] <nicode> You still working with that old VAX?
[00:48:25] <constxd> if you genuinely think anybody outside of a tiny group of paranoid nerds is blocking JS you're completely out of touch
[00:49:06] *** Joins: seninha (~seninha@user/seninha)
[00:49:11] <strajder> it's called being realistic, just install uBlock Origin and see how much garbage gets blocked on every mainstream site
[00:49:15] *** Quits: zsoltiv_ (~zsoltiv@fibhost-67-12-35.fibernet.hu) (Ping timeout: 256 seconds)
[00:49:20] <constxd> so what
[00:49:26] <constxd> that's not blocking the website's JS
[00:49:40] <constxd> it's blocking third party ad shit
[00:49:49] <Olfodr> I still imagine most people don't even use any type of ad blocking software, not to mention a js blocking techniques
[00:49:56] <constxd> yes
[00:50:18] <constxd> 99% of normal people want to use websites like youtube, amazon, instagram, twitter, etc. which make heavy use of javascript
[00:50:47] <peacefulman> I use to use AdBlockPlus but every website detects for it now
[00:51:10] <BtbN> It's also a commerscial sham
[00:51:14] <constxd> refusing to load javascript is serious schizo shit
[00:51:26] *** Joins: marink (~marink@user/marink)
[00:51:35] <BtbN> like, advertisers can pay them to get excluded from the blocking
[00:51:37] *** Joins: ajf_ (~ajf_@user/ajf/x-9593112)
[00:51:47] <strajder> on the contrary, blocking js is the future
[00:51:54] <constxd> no it isn't
[00:51:58] <strajder> people are sick of that crap
[00:52:03] *** Joins: freepp (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[00:52:03] <constxd> no they aren't lmao
[00:52:08] <BtbN> Blocking JS breaks 99% of sites, so, no, not happening.
[00:52:17] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[00:52:23] *** Quits: freepp (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[00:52:25] *** Quits: magla (~gelignite@55d47b01.access.ecotel.net) (Quit: Stay safe!)
[00:52:46] <Olfodr> I inclined to agree
[00:53:43] <constxd> turn off javascript and go to aritzia.com
[00:53:56] <BtbN> Why would I go to that site to begin with?
[00:53:59] <constxd> that alone is enough to ensure Stacy will never take the NoScript pill
[00:54:11] *** Joins: System_Error (~SystemErr@user/systemerror)
[00:54:43] <Rounin> I find that a lot of sites are even breaking with just the standard privacy settings that are enabled on installation
[00:55:01] <strajder> that's a reason to not use them
[00:55:19] <Rounin> Like, to order an airplane ticket, one first has to enable "enable direct script injection from 5th-party cookies from Russian troll factories" in order to stand a chance
[00:55:33] <Rounin> Yeah... The web's become kind of messed up
[00:55:39] <strajder> example: instead of reddit one can use old.reddit.com, or instead of github sourcehut
[00:55:40] <pragma-> I used to disable all JavaScript and enable it on a site-by-site basis. Now I only disable third-party JavaScript because more and more sites refuse to fail gracefully without first-party JS.
[00:55:52] <strajder> that's the future
[00:55:55] <Rounin> It's almost like BEFORE WE CONTINUE, ROUNIN RESPECTS YOUR PRIVACY. YOUR DATA, YOUR CHOICE. Here's how Rounin will spy on you...
[00:55:57] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.157) (Ping timeout: 240 seconds)
[00:56:16] <constxd> normies don't even know what the fuck javascript is
[00:56:36] <BtbN> It's required by law to not show the site until the user confirmed that obnoxious popup...
[00:56:36] <Rounin> Yeah... GitHub and all these MegaCorps that try to make themselves into critical infrastructure... I've had jobs that try to make me sign up for some sight or another just to perform the job
[00:56:39] *** Parts: cisco87 (~quassel@user/cisco87) (https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:56:44] <Rounin> site that is
[00:56:53] <constxd> they just know that if they click on safari and type in 'amazon' they can buy shit
[00:57:15] <constxd> there isn't going to be some massive pushback against web apps any time soon
[00:57:29] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[00:57:41] <strajder> keep telling yourself that, it might work
[00:57:53] <constxd> it's already working
[00:57:58] <constxd> in fact i'd say it worked
[00:58:19] *** Joins: luizfrds (~Luiz@152.250.243.147)
[00:58:21] <constxd> even desktop apps now are just web apps in disguise
[00:58:39] <constxd> slack, spotify, vs code, discord, ...
[00:58:44] <pragma-> Did you know there are people out there that use the internet without any form of ad-blocker?
[00:58:47] * pragma- shudders.
[00:58:55] <Rounin> Hmm... Yeah, among the people I know, it's sort of been replaced with just apps... Apps from the Google or Apple stores specifically... And the rest of the web mostly doesn't exist
[00:59:04] <Olfodr> while I agree that we should pushback against sites that heavily use js and other spy techniques, I just don't see how the vast majority (or how constxd called them, normies) which are like... what? 98% of the internet users don't even CARE to use any type of ad blocking software would care to install anything that would break their experience
[00:59:10] <pony> pragma-: I don't use an adblocker on my gemini client :)
[00:59:11] <Olfodr> they just don't care about those things.
[00:59:11] <Rounin> Even other services that we already have,... Like... money... is being replaced by these apps that are less convenient
[00:59:16] <Rounin> People just like being locked in
[00:59:51] <BtbN> Majority of people don't give a shit
[01:00:08] <Rounin> I bet you could make a water tap that only dispenses water through a Google app and have people pay extra for it
[01:00:14] <constxd> yes many companies shill their mobile apps
[01:00:17] <constxd> but
[01:00:30] <constxd> they're basically web apps
[01:00:54] <Olfodr> I started using that tracker blocker from DDG on my phone lately. Literally broke like 80% of my apps. WHILE I CARE for privacy... I really want the convenience too
[01:01:01] *** Quits: nicode (~nic@2607:f2c0:9387:9c00:854b:558b:d90b:a242) (Ping timeout: 240 seconds)
[01:01:21] *** Quits: pulse (~pulse@user/pulse) (Remote host closed the connection)
[01:01:34] <sham1> Containers
[01:01:37] <constxd> (((they))) already won just accept that you don't get to have any privacy
[01:01:42] *** Joins: pulse (~pulse@user/pulse)
[01:02:00] <sham1> Echo? Seriously? You think the jews are behind this?
[01:02:20] <constxd> at least when you order your tasty bugs you'll get 2 day delivery with Amazon Prime
[01:03:11] *** Joins: nicode (~nic@2607:f2c0:9463:7d00:366e:8b5c:e157:3e4d)
[01:03:21] <constxd> sham1: well
[01:03:43] <Rounin> Wait, how did... Ah, I see, (((they)))
[01:03:49] <constxd> there sure are a lot of them high up in tech
[01:04:08] * sham1 squints at constxd 
[01:04:18] <pragma-> Back in the days of gopher, nntp, early web sites, you could telnet to a webserver and GET a page and it would be 99% readable right there in the terminal. These days everything is minified and full of cross-site requests.
[01:04:20] <Olfodr> that logic
[01:04:21] * pragma- grumbles.
[01:05:05] <sham1> pragma-: those must have been the days
[01:05:12] * peacefulman will take a grasshopper taco
[01:05:16] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[01:05:16] <pragma-> I haven't used telnet in decades!
[01:05:25] <Rounin> Yeah, I mean... I've always felt that Jack Black and Sarah Silverman and Sasha Baron Cohen were monitoring my communications
[01:05:32] <strajder> gopher is still available
[01:05:42] <Rounin> Sacha that is
[01:05:43] <Olfodr> I still use telnet to check if some ports are open when I try to reach servers :D
[01:05:47] <sham1> Well of course. Telnet is dead because SSH, and as far as using Telnet for connecting to arbitrary TCP sockets, we have nc and socat
[01:05:52] <kit-ten> mmmoommmm! gcc is bullying me again!
[01:05:58] <peacefulman> yeah I still use telnet to check for a port is open as well
[01:06:13] <pony> netcat!
[01:06:39] <kit-ten> netdog
[01:06:45] <pragma-> I used to use telnet all the time! I used to telnet into all kinds of things! IRC servers, mail daemons, talkers, moos, muds!
[01:07:32] <duuude> Olfodr: people do care, everyone I told about these things started to care
[01:07:35] *** Quits: marink (~marink@user/marink) (Quit: Leaving)
[01:08:09] <duuude> Olfodr: the problem is, few people know what is JS, what do those ads do, etc.
[01:08:39] <strajder> it's a matter of education, but the word is getting out already
[01:09:26] <duuude> it is us kinda-nerdy people who think everyone knows everything about computers
[01:09:30] <strajder> there's this movie The Social Dilemma for instance
[01:10:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[01:11:57] <BSaboia> The iptables code mixes spaces and tabs for indentation. Seems weird. Is there any good reasons for that in C standards?
[01:12:20] <constxd> in C standards?
[01:12:24] <sham1> The C standard has nothing to say about indentation
[01:12:29] <constxd> lol
[01:12:50] <sham1> It is, to use a technical term, bikeshedding
[01:12:53] *** Joins: kts_ (~kts@103.73.237.37)
[01:12:55] <constxd> tab characters shouldn't appear in source code
[01:12:56] *** Quits: kts_ (~kts@103.73.237.37) (Client Quit)
[01:12:57] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:13:00] <constxd> it's a terminal control character
[01:13:01] *** Quits: kts (~kts@103.73.237.74) (Ping timeout: 240 seconds)
[01:13:12] <sham1> Eh, space also controls stuff
[01:13:38] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[01:13:39] <fizzie> Mixing spaces and tabs for _indentation_ is objectively weird, but using tabs for indentation and spaces for past-indent-level alignment is a sort-of established style.
[01:13:42] <Olfodr> tabs > spaces ( ͡° ͜ʖ ͡°)
[01:13:54] <fizzie> Occasionally called "smart tabs", sadly not all that supported.
[01:14:05] <sham1> Olfodr: well of course. Unless one makes their tab stop 1
[01:14:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[01:14:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[01:14:06] *** Joins: wroathe (~wroathe@user/wroathe)
[01:14:06] <constxd> just wrong
[01:14:10] <kit-ten> lmao monospaced lenny is w i d e
[01:14:37] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[01:14:38] <sham1> IMO IRC deserves non-monospace font
[01:14:43] <constxd> tabs simply do not belong in source code and there's no argument for it
[01:14:49] <fizzie> Cf. the comic strip at https://www.emacswiki.org/emacs/SmartTabs
[01:14:49] <sham1> It's more prose-like after all
[01:14:51] <strajder> tabs > spaces
[01:14:53] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[01:15:01] <sham1> tabs >= spaces
[01:15:01] <kit-ten> shaml im using weechat so i have no choice
[01:15:06] <strajder> why would you put 8 characters instead of 1?
[01:15:15] <sham1> kit-ten: Sure you do: http://glowing-bear.org/
[01:15:30] <strajder> it multiplies by the # o lines of code
[01:16:03] <kit-ten> shaml is that compatible with lynx?
[01:16:04] <constxd> because you want 8 empty columns
[01:16:16] <strajder> tab is 8 columns
[01:16:20] <constxd> no it isn't
[01:16:30] <Olfodr> 4 isn't it
[01:16:34] <strajder> it is by default on unix-like systems and in c
[01:16:35] <constxd> it's a control character that tells the terminal to advance to the next tabstop
[01:16:52] <sham1> You know what's a weird character? Vertical tab
[01:16:58] <constxd> its "width" depends on the current cursor position
[01:17:09] <kit-ten> 4 col tabs > any other size tab
[01:17:37] <kit-ten> change my mind.
[01:17:53] <strajder> 4 column tabs lead to overindentation of code, code should be clean enough to allow for 8 space tabs
[01:17:55] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[01:18:11] <mcf> constxd: newline is a control character that tells the terminal to advance to the next line. do you not use newlines in your source code either?
[01:18:27] <sham1> 8-column tabs, 120 columns wide lines
[01:18:33] <kit-ten> how about 1 column :p
[01:18:35] <sham1> K&R style
[01:18:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[01:18:43] <pragma-> all projects start out clean but gradually gain... features.
[01:18:46] <constxd> mcf: it has multiple purposes
[01:18:49] <BSaboia> OK, I know that it has nothing to do with the _language_ standards, but it seems odd. However, by reading the code, it seems that spaces are only used for alignment purposes here
[01:19:04] <BSaboia> (here -> in iptables source)
[01:19:12] <sham1> Tabs for indents, spaces for alignment is very sane. Sadly clang-format doesn't seem to support it much
[01:19:19] <constxd> it's not sane
[01:19:23] <kit-ten> why does nobody use tabs for alignment
[01:19:25] <kit-ten> like
[01:19:33] <kit-ten> tabs are perfect for alignment
[01:19:44] <constxd> because people configure their text editor to display tabs with different widths, and then something that was aligned nicely for you is all fucked up for somebody else
[01:19:52] <kit-ten> oh
[01:20:04] <kit-ten> who tf does that
[01:20:10] <sham1> Apparently clang-format *does* support it
[01:20:12] <strajder> kit-ten: alignment from the other side
[01:20:19] <constxd> or it looks fine in your text editor where you have the tab width configured, but then in your diff tool it's all misaligned because it isn't aware of your configuration
[01:20:20] <sham1> UseTab: ForContinuationAndIndentation
[01:20:25] <pony> I don't like when people 'align' things
[01:20:35] <BSaboia> kit-ten, does what? Change the tab width?
[01:20:41] <kit-ten> nvm
[01:20:45] <constxd> just use spaces and there's never any confusion. everything looks the same for everybody in every program.
[01:21:04] <sham1> Or tabs for indent and spaces for alignment. Everything will still look fine no matter the tab width
[01:21:10] <constxd> no it won't
[01:21:15] <sham1> Yes it will
[01:21:19] <pragma-> some people prefer to adjust their own tab-stops
[01:21:25] <pony> tabs for indentation and nothing for alignment :)
[01:21:28] <kit-ten> i only ever use spaces if the editor im using has auto indentation
[01:21:46] <kit-ten> i mean
[01:21:52] <kit-ten> syntaxual indentation
[01:21:53] <kit-ten> likr
[01:22:08] <sham1> pony: so you do something like this? https://pastebin.com/ug5UDd3u
[01:22:11] <kit-ten> it indents when i do { and deindents when i do }
[01:22:14] <BSaboia> constxd, it will look fine regardless of your tab width if used for alignment
[01:22:27] <pony> sham1: no
[01:22:32] <sham1> But that has no alignment
[01:22:34] <sham1> Only indent
[01:22:42] <pony> what
[01:23:07] <sham1> You said that tabs for indentation and nothing for alignment. That's exactly what it looks like
[01:23:28] <sham1> The line containing baz is indented to the same level as the preceding line
[01:23:30] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Quit: Disconnecting)
[01:23:42] <sham1> But it's not aligned
[01:23:49] <pony> I'd write foo(bar, baz);
[01:24:13] <sham1> Not if bar and baz were long expressions you wouldn't
[01:24:33] <pony> what would you do then?
[01:24:47] <strajder> btw, clang-format has Align* options for alignment
[01:24:47] <BSaboia> pony, that was just an example by sham1. I realised that the iptables source uses spaces for alignment by looking at very long multiline printf statements
[01:24:50] <mcf> if they were long expressions, i'd make a variable for them
[01:25:05] <constxd> ok now how do you configure your text editor to determine what is indentation and what is alignment
[01:25:25] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[01:25:25] <strajder> constxd: !clang-format -i %
[01:25:42] <sham1> https://pastebin.com/4P2NgnxJ I'd do this. You can notice how the first n characters on the line with foo and baz have one tab, and then the baz is aligned with bar
[01:25:45] <constxd> not all leading whitespace can be treated as indentation, even if it's a multiple of the tab width
[01:25:47] <BSaboia> This is one such example: https://pastebin.com/01LD85Xu
[01:26:09] <sham1> And it doesn't matter how wide the preceding tab is rendered, it looks just the same
[01:26:59] <constxd> that's a cringe way of writing a function call imo
[01:27:06] <sham1> Anyway, the most superior way of calling functions: https://pastebin.com/gsbM1HWB
[01:27:08] <constxd> either all on one line, or every argument on its own line
[01:27:17] <constxd> alone
[01:27:23] <pony> I'd just indent the arguments to one more level, and what constxd said
[01:27:27] <constxd> the function designator should be on its own line as well
[01:27:28] <pony> or mcf
[01:28:21] <Olfodr> inline ifs :(
[01:28:23] <sham1> pony: but that's alignment
[01:28:28] <pony> no it's not
[01:28:31] <pony> it's indentation
[01:28:49] <pony> alignment is what you did
[01:29:05] <sham1> Anyway, the style I posted has to be done like this because C doesn't allow for trailing commas in function calls
[01:29:45] <sham1> So one can't have something like `foo (bar,baz,quux,); where the argument expressions would be on their own lines with their commas after them
[01:29:53] <sham1> So instead, put the comma before the next one
[01:30:33] <sham1> Admittedly it looks somewhat odd in C, it's a syntax trick that tends to be used more in Haskell. I don't think that can be made into a thing with clang-format
[01:30:40] <pony> ugh
[01:30:53] <pony> hated that about haskell :P
[01:31:19] <constxd> trailing commmas are so ugly
[01:31:23] *** Joins: aqua (~aqua@user/aqua)
[01:31:31] <constxd> shouldn't be allowed anywhere imo
[01:32:02] <constxd> some style guides actually say to prefer them
[01:32:05] <constxd> cringe
[01:32:17] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[01:32:33] <sham1> C++ people get all the fun with this. BreakInheritenceListStyle and BreakConstructorInitializers both have BeforeComma for doing that, but nothing for function parameters
[01:32:46] *** Quits: _4p3 (~ape@kanonenjagd.panzer.ninja) (Quit: leaving)
[01:32:46] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[01:33:04] <sham1> I should mayhaps raise an issue
[01:33:15] *** Quits: strajder (~strajder@user/strajder) (Quit: gn)
[01:34:39] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[01:34:44] *** Quits: arinov (~arinov@31.142.76.178) (Ping timeout: 256 seconds)
[01:35:11] <sham1> Well, function parameters and designated initializers. Not doing this nor allowing trailing commas (for function calls) makes it so that diffs get more noise when one needs to insert a comma
[01:37:07] *** aqua is now known as kish`
[01:42:48] *** Joins: sabry (~sabry@197.37.72.225)
[01:42:57] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[01:45:46] *** Joins: bedouin_ (sid523379@id-523379.hampstead.irccloud.com)
[01:47:06] *** Joins: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com)
[01:47:56] *** Quits: Narrat (~omnius@p200300df5f0ef9dc06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[01:48:05] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[01:48:18] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Client Quit)
[01:48:47] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:50:23] *** Joins: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net)
[01:51:01] *** Quits: kit-ten (~u0_a391@2600:380:a434:56d9:6ab3:5bed:adee:69d0) (Ping timeout: 240 seconds)
[01:52:09] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[01:52:10] *** Joins: noarb (~noarb@user/noarb)
[01:52:43] <hxztnxt> ive noticed it's usual to declare a variable in one line and then assign a value to that variable in another line. Is it wrong to directly do int foo = 0; ?
[01:53:28] <sham1> It's not wrong. In fact, it's often a great way of doing const correctness
[01:53:31] <Rounin> hxztnxt: I wonder if it was mandatory to declare variables at the top in the older versions of C
[01:53:36] <Rounin> At one point, even parameters were declared there
[01:53:51] <sham1> Although if you target C1989, you can't have it. Well, unless some compiler offers it
[01:53:52] <Rounin> At the top of each function, not the top of each file
[01:54:21] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:54:43] <pragma-> at the beginning of a block, any block. you could and can arbitrarily create blocks just about anywhere within functions.
[01:55:26] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:55:39] <pragma-> though nowadays declarations can be just about anywhere. but his question was more about initialization, i thought.
[01:55:53] <sham1> Well declaring with an initialization
[01:56:49] <hxztnxt> yeah
[01:57:09] <hxztnxt> i guess it's just fine to int foo = 0; directly
[01:57:15] <hxztnxt> but just to make sure
[01:57:15] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:57:30] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[01:57:38] <hxztnxt> don't know if that's considered good style
[01:57:57] <BSaboia> But anyways, the style of iptables is really messy. I understand the idea, but they are doing it wrong. The number of tabs used for indentation must match the previous line, if spaces are going to be used for alignment. It is not the case there
[01:58:22] <pragma-> hxztnxt: on one hand, not initializing when you declare lets the compiler warn you of any uninitialized uses of the object so you can rethink your code execution. on the other hand, initializing up front lets you just put conditional checks for 0 or null or whatever before you use it, which can be cluttersome in the code and potentially inefficient in runtime performance.
[02:00:11] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[02:01:35] <pragma-> in practice, the conditional checks are usually positioned in cheap places that do not hinder much.
[02:01:59] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Read error: Connection reset by peer)
[02:02:02] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:02:59] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::12) (Quit: Konversation terminated!)
[02:03:16] *** Quits: Alhazred (~Alhazred@s91904425.blix.com) (Quit: leaving)
[02:04:10] *** Quits: sabry (~sabry@197.37.72.225) (Quit: Client closed)
[02:05:31] *** Joins: Betal (~Betal@user/betal)
[02:05:45] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[02:07:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[02:12:24] <hxztnxt> so should i initialize up front?
[02:13:46] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:15:00] <constxd> hxztnxt: initializing and not reading the initial value is cringe
[02:15:20] <constxd> if you do read the initial value it's not cringe
[02:15:42] <hxztnxt> wait, what do you mean read the initial value
[02:15:51] <hxztnxt> are we talking same thing?
[02:16:23] *** Joins: tigrai (~ilearn@2600:1702:d30:df10:6202:4f52:a7d8:9069)
[02:17:05] <sham1> Not everything have to be "cringe"
[02:17:50] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (Quit: Djoobstil)
[02:17:57] *** Joins: wenxin (~wenxin@user/vim-fans/x-3284168)
[02:18:06] *** Joins: Djoobstil (~djoobstil@djoobstil.online)
[02:19:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:21:50] <constxd> hxztnxt: i mean
[02:22:09] <constxd> setting something to 0 when it's not necessary is cringe
[02:22:46] <constxd> int a = 0; if (f() == 4) { a = 12; } else { a = 100; } // Cringe.
[02:23:25] *** Quits: acerbic (~acerbic@cs-xdata-50-86-53-211.cspire.com) (Ping timeout: 240 seconds)
[02:23:28] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 256 seconds)
[02:23:45] <nitrix> I wonder if you would even be able to define the word cringe, seeing how liberally you're using it.
[02:23:58] <nitrix> At the point, is it punctuation?
[02:24:20] <hxztnxt> a, now i get it. You're right, it's cringe
[02:25:09] <sham1> Well if the value is never read, the compiler can just disregard it
[02:28:44] <hxztnxt> my question was more to do with when the variable IS read.
[02:29:32] <nitrix> The variable might be read much sooner than it is used, in case you didn't know.
[02:30:16] <hxztnxt> Ive seen many times declaring a variable, and instead of directly assigning a value, assigning it in later lines
[02:30:27] <hxztnxt> like int a; ... a=4;
[02:30:42] <nicode> is there a cleaner way to skip over '\n' as the second character in my c = getchar(); https://github.com/nicdesjardins/dojo/blob/main/do_you_have_something_to_say/dyhsts.c
[02:31:00] <nitrix> hxztnxt, `int a = 4;` isn't an assignment.
[02:31:01] *** Quits: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[02:31:27] <nicode> I'm just trying to handle 'y' for yes, 'n' for no, 'q' for quit and handle anything else as invalid.
[02:31:34] <hxztnxt> it's both a declaration and an assignment
[02:31:38] <hxztnxt> isnt it?
[02:31:51] <nicode> a declassignment?
[02:32:29] <hxztnxt> get out
[02:32:40] *** Quits: pizdets_ (~pizdets@183.182.115.92) (Ping timeout: 250 seconds)
[02:32:41] <nicode> lol
[02:32:42] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[02:32:46] <nitrix> hxztnxt, It's both the declaration and the definition of `a`. The object is initialized, not assigned.
[02:33:46] <nitrix> The grammar looks the same, the semantics are not.
[02:33:50] *** Joins: pizdets (~pizdets@183.182.111.169)
[02:34:13] <nicode> or is there a way to do getchar that effectively ignores the second character '\n'?
[02:34:40] <hxztnxt> changin topic
[02:34:43] <fizzie> Not really. But you might consider using `fgets` and only inspecting the first character of each line.
[02:34:52] <hxztnxt> is it common for a c programmer to know php?
[02:34:54] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (Quit: leaving)
[02:36:03] <fizzie> Or of course you can write a different function that calls getchar() sufficiently many times for it to produce something else than a newline.
[02:36:35] <constxd> hxztnxt: not any more common than it is for them to know, say, python or javascript
[02:36:35] <fizzie> You may want to handle EOF, though; programs that end up in an infinite output loop when they hit EOF in their standard input are a little annoying.
[02:36:43] <nicode> fizzie: right, I was thinking I should just wrap getchar() to only get certain chars back.
[02:36:44] <fizzie> (Treating it the same as 'q' is an option.)
[02:37:37] <constxd> php and c aren't closely related really, although php's standard library is very obviously built around libc
[02:37:38] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[02:38:23] <nicode> I know C (still learning) and I'm an ex php programmer.
[02:38:28] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[02:38:46] <hxztnxt> where i live not many jobs are c related. But there are a few of php
[02:39:09] <constxd> you don't want to be doing those
[02:39:19] <hxztnxt> so i was wondering if i should go in, even though it's not my main interest
[02:39:25] <constxd> probably wordpress shit, very cringe
[02:39:37] <hxztnxt> yeah... ikr
[02:39:40] <constxd> not much room for growth and doesn't pay well
[02:39:49] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[02:40:08] <hxztnxt> what can i do then, i need a job
[02:40:10] <constxd> web dev in general isn't bad and php isn't necessarily bad but the bulk of php jobs are prob trash
[02:40:22] <constxd> then apply
[02:40:30] <constxd> do you know php?
[02:40:37] <hxztnxt> no, i can look for something nicer
[02:40:41] <nicode> hxztnxt: do it, just don't sign on for a long time, then keep your eyes peeled for better opportunities.
[02:40:55] <constxd> rust is the future
[02:41:00] <constxd> start learning now
[02:41:05] <hxztnxt> i just dont have too much experience to get a job for c programming
[02:41:08] <nicode> ironically it's the past of metal.
[02:41:21] <constxd> kings
[02:41:32] <constxd> Ty is becoming dangerously based
[02:41:57] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Quit: Leaving)
[02:42:02] <hxztnxt> i would love a job that didnt require me much experience with c, that made me grow
[02:42:26] *** Quits: krissmaster (~kriss@213.239.83.90) (Remote host closed the connection)
[02:42:30] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[02:42:49] <constxd> that is hard
[02:42:52] <nicode> constxd: Ty?
[02:43:00] <constxd> my programming language
[02:43:12] <constxd> just implemented operator sections
[02:43:41] <hxztnxt> i have done some simple c projects which are, i believe, well programmed and commented in english. Though i dont know if that's enoguh to get a job
[02:44:18] <constxd> do you have a university degree?
[02:44:22] <nitrix> We have #c-offtopic for chitchat.
[02:44:23] <hxztnxt> yes
[02:44:47] <constxd> in CS / Eng?
[02:44:50] *** Quits: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net) (Quit: Leaving)
[02:44:51] <constxd> just apply
[02:44:56] *** Quits: tolog (~tolog@91.193.6.10) (Remote host closed the connection)
[02:44:59] <hxztnxt> in CS
[02:45:13] <hxztnxt> though in spain
[02:45:40] <hxztnxt> but my english is fine
[02:45:54] <hxztnxt> or so i think
[02:47:45] <constxd> seems fine to me
[02:51:44] *** Joins: Burgundy (~yomon@82.76.72.88)
[02:53:48] <nicode> How would I have my program do something the second a character is received rather than once '\n' is received?
[02:53:53] *** Joins: Macuser (~Macuser@2600:1003:b449:57f3:9dd:135a:e267:8ebf)
[02:54:08] *** Quits: hxztnxt (~hxztnxt@218.red-83-54-57.dynamicip.rima-tde.net) (Quit: Leaving)
[02:54:15] *** Joins: pk55 (~kvirc@cpe-104-228-101-152.stny.res.rr.com)
[02:55:03] <pk55> if i do `int i = 4; float f = 0f;` then do `i + f`, is the int converted to a float?
[02:55:33] <fizzie> Yes.
[02:55:46] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[02:56:07] <fizzie> (C11 6.3.1.8: Usual arithmetic conversions.)
[02:56:13] <pk55> that's handy, although most people will cast i assume
[02:56:25] <pk55> does it go from int -> float -> double too?
[02:56:40] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Remote host closed the connection)
[02:57:43] <fizzie> If either operand is a `long double`, the non-`long double` operand is converted to that; else if either operand is a `double`, the non-`double` operand is converted to *that*; else if either operand is a `float`, the non-float is converted to that. Otherwise, it goes to a more complicated bit about integer types.
[02:57:44] *** Joins: rgrinberg (~textual@177.246.219.153)
[02:58:00] *** Parts: tigrai (~ilearn@2600:1702:d30:df10:6202:4f52:a7d8:9069) (Leaving)
[02:58:07] <nicode> disregard my question, a little googling helped, duh.
[02:58:14] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[02:58:56] <fizzie> I don't think there's any single-operator situation where it'd convert to double *via* float, though it would sort-of happen in `1 + 0.0f + 0.0`.
[02:59:11] <fizzie> In fact, that's probably an interesting gotcha.
[02:59:19] *** Joins: stonkey (~stonkey@user/stonkey)
[02:59:49] <fizzie> ,cc printf("%.0f %.0f", 2147483647 + 0.0f + 0.0, 2147483647 + 0.0); // different results
[02:59:52] <candide> fizzie: 2147483648 2147483647
[03:00:43] *** Joins: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net)
[03:01:13] <cerl> How do you guys plan a program out in C? Do you use a real life whiteboard or a program to plan out what you're going to do?
[03:02:16] <nicode> cerl: paper/whiteboard helps to think stuff out, no matter what language you're programming in.
[03:02:56] <constxd> just start building it
[03:03:36] *** Joins: Matt|home (~matt@adsl-74-233-58-165.mia.bellsouth.net)
[03:03:54] <constxd> unless you already have a lot of experience building the sort of thing you're building
[03:04:20] *** Joins: pert_ (~pert@fsf/member/pert)
[03:04:20] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[03:04:21] <constxd> but if you don't, there's no way you'll be able to come up with the right abstractions before you run into the problems that will inevitably motivate them
[03:04:47] <constxd> so you'll spend a bunch of time designing this complex approach to the problem only to start building it and realize it isn't going to work
[03:05:00] *** pert_ is now known as pert
[03:05:20] <constxd> first do it the dumb way and then ask how can you make it less dumb
[03:05:49] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[03:07:29] <NRK[m]> cerl: i look at existing similar projects first
[03:07:51] <nicode> I agree that if you don't thoroughly know the language you'll likely be best to try programming, then if you hit a concept that's hard to sort out, go to a whiteboard/paper to visualize it and shift what you're thinking into how it needs to be programmed.
[03:08:41] <NRK[m]> and if none exists then i just do what constxd said, just write a minimal/lousy one as fast as possible without proper error checking or boilerplate. and then rewrite it from scratch.
[03:09:36] *** Joins: g0zart (~g0zart@gateway/vpn/pia/g0zart)
[03:09:46] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[03:10:17] *** Quits: plastico1 (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:11:19] <NRK[m]> also, i dont really "plan" in terms of code. only thing i plan for is what data structure im going to use and how i will lay it out in memory.
[03:12:26] <NRK[m]> cerl: look up "data oriented design" if you're not familiar with it.
[03:14:07] *** Parts: pk55 (~kvirc@cpe-104-228-101-152.stny.res.rr.com) (No boundaries on the net!)
[03:15:53] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:16:21] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[03:16:47] *** Joins: malina (~malina@user/malina)
[03:19:50] *** Quits: cerl (~cerl@c-24-30-27-91.hsd1.ga.comcast.net) (Quit: Leaving)
[03:22:13] *** Quits: wenxin (~wenxin@user/vim-fans/x-3284168) (Ping timeout: 240 seconds)
[03:24:49] *** Joins: seninha (~seninha@user/seninha)
[03:25:21] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[03:25:21] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[03:25:21] *** Joins: wroathe (~wroathe@user/wroathe)
[03:25:25] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 240 seconds)
[03:25:33] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[03:26:46] *** Quits: seninha (~seninha@user/seninha) (Client Quit)
[03:26:57] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:28:43] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Quit: Lost terminal)
[03:30:14] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[03:33:38] *** Quits: pert (~pert@fsf/member/pert) (Quit: pert)
[03:34:13] *** Quits: Soni (~quassel@autistic.space) (Ping timeout: 240 seconds)
[03:35:43] *** Quits: Akuli (~Akuli@82-203-160-12.bb.dnainternet.fi) (Quit: Akuli)
[03:36:12] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[03:36:34] *** Quits: mahmutov (~mahmutov@37.155.21.112) (Ping timeout: 256 seconds)
[03:41:38] *** Joins: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[03:41:53] *** Quits: Klinda (~superleag@user/klinda) (Quit: Konversation terminated!)
[03:42:19] *** Joins: Celeo (~Celeo@user/celeo)
[03:47:45] *** Joins: agonhajdari (~textual@user/agonhajdari)
[03:49:43] *** Quits: Cleverness (~Clevernes@pool-108-54-152-186.nycmny.fios.verizon.net) (Quit: Leaving)
[03:50:57] *** Joins: yeero (~yeero@d149-67-232-63.try.wideopenwest.com)
[03:52:02] *** Parts: Celeo (~Celeo@user/celeo) (Leaving)
[03:52:11] *** Quits: yeero (~yeero@d149-67-232-63.try.wideopenwest.com) (Quit: Leaving)
[03:55:50] *** Joins: frost (~frost@user/frost)
[03:58:34] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[03:59:49] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 240 seconds)
[04:01:21] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[04:01:57] *** Joins: Wulf (~Wulf@user/wulf)
[04:04:05] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[04:04:15] <kurahaupo_> not_a_robot[m]: You seem to be computing  e+=1/(1! * 2! * 3! *4! * … * i!)
[04:04:52] *** Joins: Soni (~quassel@autistic.space)
[04:07:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[04:08:34] *** Joins: seninha (~seninha@user/seninha)
[04:11:49] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (Read error: Connection reset by peer)
[04:13:15] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[04:14:30] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[04:19:07] *** Joins: trafficjam (~qubes@119.17.42.59)
[04:20:49] *** Joins: frost (~frost@user/frost)
[04:21:33] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[04:21:49] *** Quits: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com) (Ping timeout: 240 seconds)
[04:23:02] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[04:23:26] *** Joins: eht (~eht@user/eht)
[04:23:35] *** Joins: crankslider (~slidercra@user/slidercrank)
[04:23:38] *** Quits: g0zart (~g0zart@gateway/vpn/pia/g0zart) (Quit: Leaving)
[04:24:06] *** Joins: malina (~malina@user/malina)
[04:24:13] *** Quits: eht-the-second (~eht@user/eht) (Ping timeout: 240 seconds)
[04:25:59] *** Joins: eht-the-second (~eht@user/eht)
[04:26:46] *** Joins: Fairy (~Fairy@ti0004a400-0210.bb.online.no)
[04:27:49] *** Quits: eht (~eht@user/eht) (Ping timeout: 240 seconds)
[04:27:58] *** Joins: mov_eax (~mov_eax@user/mov-eax/x-5035058)
[04:28:07] *** Quits: rgrinberg (~textual@177.246.219.153) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:30:13] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:30:13] *** Quits: adip (~adip@user-188-33-250-10.play-internet.pl) (Ping timeout: 240 seconds)
[04:30:24] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:33:39] *** Joins: Torr (~Torr@user/torr)
[04:34:17] *** Quits: Windshield_ (~Windshiel@120.20.68.236) (Quit: Leaving)
[04:34:43] *** Joins: gallup (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:34:50] *** Quits: gallup (~gallup@192-222-138-215.qc.cable.ebox.net) (Client Quit)
[04:34:58] *** Quits: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net) (Quit: leaving)
[04:36:15] *** Joins: ouestbillie (~gallup@192-222-138-215.qc.cable.ebox.net)
[04:36:54] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:e97c:ffd8:4c4e:d5f5)
[04:39:06] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:39:06] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:39:06] *** Joins: wroathe (~wroathe@user/wroathe)
[04:40:56] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[04:43:25] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[04:48:32] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[04:48:37] *** Quits: Macuser (~Macuser@2600:1003:b449:57f3:9dd:135a:e267:8ebf) (Ping timeout: 240 seconds)
[04:51:39] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[04:52:22] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[04:53:04] *** Quits: Burgundy (~yomon@82.76.72.88) (Ping timeout: 256 seconds)
[04:57:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[04:57:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[04:57:00] *** Joins: wroathe (~wroathe@user/wroathe)
[05:02:42] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:03:08] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:05:49] *** Quits: manjaroi3 (~manjaro-i@125.131.131.26) (Ping timeout: 240 seconds)
[05:06:48] *** Joins: vysn (~vysn@user/vysn)
[05:09:48] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:09:48] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:09:48] *** Joins: wroathe (~wroathe@user/wroathe)
[05:11:09] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:12:57] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:f755:55d9:216b:76f6) (Ping timeout: 240 seconds)
[05:13:23] *** Quits: malina (~malina@user/malina) (Remote host closed the connection)
[05:14:36] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[05:15:08] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:e97c:ffd8:4c4e:d5f5) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[05:18:58] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:24:10] *** Parts: jan6 (jan6@tilde.team/user/jan6) (WeeChat 3.3)
[05:26:06] *** Joins: NEYi (~NEYi@109.251.216.38)
[05:27:06] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.4)
[05:27:59] *** Joins: malina (~malina@user/malina)
[05:28:37] *** Quits: Rounin (~david@84.212.130.215) (Ping timeout: 240 seconds)
[05:30:00] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[05:30:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[05:30:00] *** Joins: wroathe (~wroathe@user/wroathe)
[05:30:45] *** Quits: haliucinas (~haliucina@5.20.153.21) (Read error: Connection reset by peer)
[05:31:20] *** Joins: AmR (~AmREiSa@41.238.31.212)
[05:34:27] *** Joins: frost (~frost@user/frost)
[05:34:42] *** Joins: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net)
[05:34:56] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:35:04] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Remote host closed the connection)
[05:35:28] <kurahaupo> not_a_robot[m]: You should entirely remove the inner "i_2" loop and just have f *= i;
[05:35:28] *** Joins: danielcamiel (~danielcam@user/danielcamiel)
[05:35:38] <retro> how would you (from a C/ASM perspective) make a tool that checks for instability due to overclocking
[05:35:44] *** Joins: haliucinas (~haliucina@5.20.153.21)
[05:35:51] <retro> this is a theoretical question not a practical one
[05:36:25] <kurahaupo> retro: overclocking which parts of the system? The CPU? The RAM?
[05:36:29] <retro> cpu
[05:38:10] <kurahaupo> Which parts of the CPU do you most suspect would break? The ALU's? The instruction decoding? The L3 cache? the L2 cache? the branch predictor?
[05:38:19] <retro> no idea
[05:38:35] <kurahaupo> You would need to craft code targetting failures in each of those
[05:38:40] <retro> im just wondering how MACHINE_CHECK_EXCEPTION BSODs work
[05:38:54] <retro> lete just say the ALU
[05:39:41] <kurahaupo> have some code that stress-tests that to compute some complex but know result (which you compute while not overclocking, or on a different device)
[05:39:57] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[05:40:22] <retro> but that would slow down windows
[05:40:34] <retro> or "the OS"
[05:40:44] <retro> so I dont think thats how it works
[05:40:49] <kurahaupo> retro: "run in the background and not slow down the OS" wasn't your original requirement
[05:41:20] <retro> ok
[05:42:01] <retro> if I write too long of a question people tend to run away
[05:42:11] *** Quits: cgar (~cgar@072-187-006-075.res.spectrum.com) (Quit: leaving)
[05:42:14] <kurahaupo> Various instructions can throw hardware exceptions, and not necessarily because you're overclocking, though the errors induced by overclocking might bring about the broken program states that could lead to trapping
[05:42:38] <retro> https://en.wikipedia.org/wiki/Machine-check_exception
[05:43:53] <kurahaupo> Yeah in that case, the CPU itself is detecting the problem. It's not a running program that monitors anything.
[05:44:35] <retro> oh
[05:45:06] <retro> but isnt microcode dead
[05:45:28] <kurahaupo> retro: huh? microcode gets bigger all the time with the x86_64 architecture
[05:53:12] <retro> WHDUIWHr fu HWIE TGiwrh fuwhaaaaaaaa?
[05:53:30] <kurahaupo> The x86_64 instruction set is tremendously complicated; it needs the equivalent of a small CPU just to decode it, while not overrunning the pre-fetch buffer.
[05:53:39] <retro> AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
[05:53:40] *** Quits: retro (~retro@cpc138958-jarr14-2-0-cust34.16-2.cable.virginm.net) (Quit: Client closed)
[05:53:49] <kurahaupo> well that wasn't fun
[05:53:54] <sm2n> lol
[05:54:00] *** Joins: Lazenca (~lazenca@user/lazenca)
[05:54:20] <rsjw> wait 'till he hears about the chipsets that run a copy of minix inside them
[05:54:32] <kurahaupo> rsjw: lol
[05:55:42] <kurahaupo> The x86 CPU's have 4 security levels, 0,1,2&3. 3 is the least secure, for ordinary user programs. Oh wait, now it has level -1 as well. Oh wait, now it has -2 ... -3 ... argh
[05:58:10] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:59ed:78f6:d0f0:e463)
[05:59:05] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[05:59:22] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:00:51] *** Quits: ADHD (~XXX@user/ADHD) (Quit: leaving)
[06:01:58] *** Joins: sunarch (uid526836@user/sunarch)
[06:04:34] *** Joins: voldial (~user@user/voldial)
[06:07:15] *** Joins: frost (~frost@user/frost)
[06:08:11] <voldial> I ran into a situation where mv was exiting 0, even though it moved no files. Specifically if `mv -i` was (mis)used and stdin is a empty pipe. It's a bit interesting, because if stdin is closed, mv exits 1 in the otherwise same situation with the same result (except my code would have caught that non zero exit status instead of silently ignoring mv "not doing anything"). I tried breaking it down to specifics so I
[06:08:14] <voldial> understand what is going on, comments/corrections appreciated. https://bpa.st/raw/6TTA
[06:10:08] *** Quits: steve__ (~steve@ool-182c2b80.dyn.optonline.net) (Ping timeout: 256 seconds)
[06:11:10] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[06:11:50] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[06:12:56] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[06:15:27] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[06:18:17] *** Joins: piku (~piku@47.202.113.8)
[06:20:11] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[06:24:36] *** Joins: frost (~frost@user/frost)
[06:24:46] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[06:25:09] *** Quits: fstd (~fstd@xdsl-87-78-21-185.nc.de) (Read error: Connection reset by peer)
[06:25:16] *** Joins: fstd (~fstd@xdsl-87-78-21-185.nc.de)
[06:26:02] *** Quits: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196) (Ping timeout: 240 seconds)
[06:26:50] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[06:27:23] *** Joins: dld (~davidlowr@2601:197:600:1210:a837:f325:7d6a:5246)
[06:27:45] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:29:49] *** Quits: Fairy (~Fairy@ti0004a400-0210.bb.online.no) (Ping timeout: 256 seconds)
[06:31:08] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[06:34:21] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 256 seconds)
[06:34:37] *** Quits: banc (banc@gateway/vpn/airvpn/banc) (Ping timeout: 240 seconds)
[06:36:06] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[06:36:31] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[06:39:03] *** Quits: eht-the-second (~eht@user/eht) (Quit: Leaving)
[06:39:25] *** Joins: eht (~eht@user/eht)
[06:40:56] *** Joins: pnbeast (~pnbeast@2601:140:4280:6ce0::1)
[06:41:21] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[06:43:45] *** Joins: phoebos (~phoebos@kisslinux/phoebos)
[06:48:10] *** Quits: mov_eax (~mov_eax@user/mov-eax/x-5035058) (Quit: WeeChat 2.8)
[06:52:36] *** Joins: banc (banc@gateway/vpn/airvpn/banc)
[06:53:02] *** Quits: Zambyte (~Zambyte@cpe-104-228-60-14.nycap.res.rr.com) (Quit: leaving)
[06:54:57] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[06:57:57] *** Quits: duuude (~user@user/duuude) (Ping timeout: 240 seconds)
[07:10:32] *** Quits: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca) (Quit: WeeChat 3.4)
[07:11:28] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[07:14:29] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:14:33] *** Joins: segnior (segnior@user/segnior)
[07:15:18] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Ping timeout: 256 seconds)
[07:15:22] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[07:15:25] *** Quits: constxd (~brad@142.134.38.68) (Ping timeout: 240 seconds)
[07:16:09] <kurahaupo> voldial: if stdin is closed, then mv -i gets an error when it tries to read from it. If it's empty, it gets EOF, which it treats as the same as "no", and therefore succeeds (it successfully moved all N files it was asked to move, which is vacuously true for N=0)
[07:16:20] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[07:16:42] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[07:16:55] <kurahaupo> mv -i </dev/null should have the same effect as : | mv -i
[07:17:46] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[07:18:00] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[07:19:30] *** Quits: segnior (segnior@user/segnior) (Read error: Connection reset by peer)
[07:21:22] <voldial> kurahaupo: getline() returns -1, which I agree is atleast "no"
[07:22:46] *** Joins: arinov (~arinov@213.194.126.155)
[07:23:59] <voldial> `mv -i </dev/null` -> "missing file operand", exits 1
[07:24:45] <voldial> `mv -i a b </dev/null ; echo $?` yes it also exits 0, like : |
[07:26:33] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:26:51] <voldial> kurahaupo: if stdin is closed, mv only exits -1 because it couldnt close it itsself if I understand the code
[07:27:19] <kurahaupo> exit -1 would be weird
[07:28:24] <kurahaupo> Either way, it gets an error while handling fd#0, and reports that. Whereas answering "no" or getting to end-of-file isn't an error, it's successfully doing as asked
[07:28:26] <voldial> it appears to do exactly that, but only on cleanup "coreutils-9.0/lib/closein.c: close_stdin() 110: if (fail) _exit(1);
[07:29:43] <voldial> kurahaupo: if that is true, it's ignoring a read error from a closed fd0
[07:30:00] *** Quits: Luke (~ldm@hacksoc/member) (Quit: o/ 3w 6d 23h 59m 16s)
[07:30:24] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[07:33:37] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[07:33:49] *** Joins: Luke (~ldm@hacksoc/member)
[07:34:13] *** Quits: kit_ten (~u0_a391@2603-6010-a141-6fa3-950d-0150-5311-7e6b.res6.spectrum.com) (Ping timeout: 240 seconds)
[07:34:37] *** Quits: danielcamiel (~danielcam@user/danielcamiel) (Ping timeout: 240 seconds)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:18] *** Joins: soapsudsxx (~soapsudsx@141.193.188.151)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:46] <voldial> added some context and "man 1p mv" ref's https://bpa.st/raw/LXSQ
[07:37:37] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[07:41:22] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[07:42:53] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[07:44:16] *** Quits: moog (~moog@107.77.244.39) (Remote host closed the connection)
[07:47:36] *** Quits: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net) (Ping timeout: 256 seconds)
[07:51:08] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[07:51:50] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[07:54:10] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:54:57] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 240 seconds)
[07:56:03] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.4)
[07:59:25] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[07:59:48] *** Joins: johnjaye (~pi@154.6.152.74)
[07:59:58] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[08:00:45] *** Joins: hinata (~hinata@2409:4042:d98:f536:7120:a20:9229:980c)
[08:02:24] *** Joins: magic_ninja (~sparkie1@ip24-255-219-188.ks.ks.cox.net)
[08:04:03] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:05:45] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[08:06:36] *** Quits: piku (~piku@47.202.113.8) (Quit: Leaving)
[08:06:53] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:08:01] *** Quits: pulse (~pulse@user/pulse) (Quit: pulse)
[08:08:25] *** Quits: tbcr (~tbcr@107.13.189.161) (Ping timeout: 256 seconds)
[08:08:33] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[08:09:17] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:12:00] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:12:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:13:31] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[08:13:44] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:13:58] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:17:18] *** Joins: Atque (~Atque@user/atque)
[08:19:52] *** Joins: anon16_ (~anon16_@user/anon16)
[08:19:59] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Quit: leaving)
[08:20:15] *** Joins: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x)
[08:22:40] *** Quits: x88x88x_ (~x88x88x@gateway/vpn/pia/x88x88x) (Client Quit)
[08:25:07] *** Joins: don (~don@89.45.90.201)
[08:26:08] *** Quits: kitsunenokenja (~kitsunech@68.91.220.96) (Ping timeout: 256 seconds)
[08:27:03] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[08:33:17] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[08:33:57] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[08:34:26] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[08:36:46] <AmR> How I can convert time_t to string ?
[08:38:13] <Wulf> AmR: localtime + strftime
[08:44:49] <voldial> AmR: https://bpa.st/O6YA
[08:44:52] * voldial ducks
[08:48:09] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Quit: The Lounge - https://thelounge.chat)
[08:48:57] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[08:49:06] *** Quits: mven (~mven@ip68-104-39-54.lv.lv.cox.net) (Quit: Goodbye.)
[08:49:49] *** Quits: malina (~malina@user/malina) (Quit: malina)
[08:51:01] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 240 seconds)
[08:51:04] *** Quits: don (~don@89.45.90.201) (Ping timeout: 256 seconds)
[08:51:09] <voldial> how does one resolve ‘struct timeval *’ to a printf format string? https://bpa.st/WFYA
[08:52:07] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[08:53:07] *** Joins: don (~don@cpe-70-114-183-69.austin.res.rr.com)
[08:55:45] *** Quits: rsjw (~quassel@user/rsjw) (Quit: rsjw)
[08:56:01] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[08:57:42] <rcf> voldial: you don't, you print the members instead.
[08:57:43] *** Joins: malloy (~jimery@116.30.220.175)
[09:00:15] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:00:37] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:01:07] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 256 seconds)
[09:06:00] *** Quits: soapsudsxx (~soapsudsx@141.193.188.151) (Remote host closed the connection)
[09:08:14] *** Joins: u0_a228 (~u0_a228@49.15.138.158)
[09:08:43] <u0_a228> hello
[09:09:18] <packet_lozenge> hello u0_a228
[09:10:02] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[09:13:25] *** Quits: u0_a228 (~u0_a228@49.15.138.158) (Read error: Connection reset by peer)
[09:19:31] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:21:25] *** Quits: mixfix41 (~homefame@user/mixfix41) (Ping timeout: 240 seconds)
[09:22:11] *** Joins: g2anj (~v@58.228.230.4)
[09:22:23] *** Joins: gco (~gco@2601:647:4c80:2424:3002:38d8:2324:b5df)
[09:22:25] *** Joins: anon16_ (~anon16_@user/anon16)
[09:22:36] *** Joins: Mentor (~Ionut@92.86.217.127)
[09:27:19] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[09:27:22] *** Joins: malloy (~jimery@116.30.220.175)
[09:27:54] *** Quits: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 256 seconds)
[09:28:32] *** Joins: mixfix41 (~homefame@user/mixfix41)
[09:31:16] <AmR> voldial: Thanks :)
[09:31:24] <voldial> rcf: ah, gdb then
[09:31:44] <voldial> AmR: np
[09:32:37] *** Quits: don (~don@cpe-70-114-183-69.austin.res.rr.com) (Ping timeout: 240 seconds)
[09:34:41] *** Joins: don (~don@89.45.90.240)
[09:36:32] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[09:38:32] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Ping timeout: 240 seconds)
[09:38:37] *** Quits: hinata (~hinata@2409:4042:d98:f536:7120:a20:9229:980c) (Ping timeout: 240 seconds)
[09:40:07] *** Parts: _mikey (~mikey@user/mikey/x-4335048) (WeeChat 3.4)
[09:43:12] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[09:47:09] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[09:50:34] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.155)
[09:52:09] *** Quits: pizdets (~pizdets@183.182.111.169) (Read error: Connection reset by peer)
[09:52:31] *** Joins: pizdets (~pizdets@183.182.111.169)
[09:54:17] *** Joins: adip (~adip@user-188-33-250-10.play-internet.pl)
[09:55:27] *** Joins: dave0 (~davezero@069.d.003.ncl.iprimus.net.au)
[10:00:12] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[10:01:10] *** Quits: llh (~llh@user/llh) (Quit: :::: ( UPP ) ::::)
[10:03:17] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[10:03:26] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[10:03:31] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[10:03:47] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[10:04:09] *** Joins: llh (~llh@user/llh)
[10:04:40] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) ()
[10:05:29] *** Joins: hinata (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a)
[10:06:06] *** Joins: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com)
[10:06:53] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (Quit: leaving)
[10:09:31] *** Joins: Rounin (~david@84.212.130.215)
[10:10:08] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[10:10:28] *** Joins: tejr (~tejr@user/tejr)
[10:12:14] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[10:16:03] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[10:21:01] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.155) (Ping timeout: 240 seconds)
[10:22:56] *** Quits: pnbeast (~pnbeast@2601:140:4280:6ce0::1) (Quit: WeeChat 2.7.1)
[10:24:59] *** Joins: aqua (~aqua@user/aqua)
[10:25:03] *** Quits: kish` (~aqua@user/aqua) (Ping timeout: 276 seconds)
[10:27:22] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[10:27:37] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (Read error: Connection reset by peer)
[10:29:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[10:30:36] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:33:49] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 240 seconds)
[10:35:49] *** Quits: gco (~gco@2601:647:4c80:2424:3002:38d8:2324:b5df) (Quit: ZZZzzz…)
[10:35:54] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (Ping timeout: 256 seconds)
[10:38:57] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[10:41:00] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[10:42:07] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[10:42:14] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[10:42:44] *** Quits: hinata (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a) (Read error: Connection reset by peer)
[10:45:13] *** Quits: chasmo77 (~chas77@c-71-193-246-4.hsd1.or.comcast.net) (Quit: It's just that easy)
[10:48:34] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Remote host closed the connection)
[10:49:05] *** Joins: dodobrain (~dodobrain@user/dodobrain)
[10:49:39] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:52:06] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[10:52:37] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[10:53:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[10:53:22] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[10:56:05] *** Joins: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b)
[10:57:01] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 240 seconds)
[10:57:27] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:58:11] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[10:58:56] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:00:29] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:00:29] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:00:29] *** Joins: wroathe (~wroathe@user/wroathe)
[11:00:44] *** Joins: AndroUser (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a)
[11:01:38] *** Quits: AndroUser (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a) (Remote host closed the connection)
[11:02:08] *** Joins: AndroUser (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a)
[11:02:40] *** Parts: AndroUser (~androirc@2409:4042:d98:f536:b8fc:31eb:d441:a8a) ()
[11:03:22] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[11:04:41] *** A_Dragon is now known as RemoteHost
[11:05:22] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:06:03] *** Joins: frost (~frost@user/frost)
[11:10:20] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[11:10:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[11:10:54] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[11:10:54] *** Joins: wroathe (~wroathe@user/wroathe)
[11:16:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[11:19:53] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Read error: Connection reset by peer)
[11:20:06] *** Quits: don (~don@89.45.90.240) (Ping timeout: 256 seconds)
[11:21:39] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[11:21:55] *** Joins: don (~don@89.45.90.193)
[11:23:21] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Quit: Raccoon's not another IRC transgenre wannabe who can't fap at the dead american dream, fhackerz)
[11:23:51] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[11:39:30] *** Quits: don (~don@89.45.90.193) (*.net *.split)
[11:39:30] *** Quits: frost (~frost@user/frost) (*.net *.split)
[11:39:30] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[11:39:30] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (*.net *.split)
[11:39:30] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (*.net *.split)
[11:39:30] *** Quits: bzyx (~quassel@89-69-20-238.dynamic.chello.pl) (*.net *.split)
[11:39:31] *** Quits: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr) (*.net *.split)
[11:39:31] *** Quits: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex) (*.net *.split)
[11:39:31] *** Quits: llh (~llh@user/llh) (*.net *.split)
[11:39:31] *** Quits: pizdets (~pizdets@183.182.111.169) (*.net *.split)
[11:39:31] *** Quits: johnjaye (~pi@154.6.152.74) (*.net *.split)
[11:39:31] *** Quits: eht (~eht@user/eht) (*.net *.split)
[11:39:31] *** Quits: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (*.net *.split)
[11:39:31] *** Quits: vysn (~vysn@user/vysn) (*.net *.split)
[11:39:31] *** Quits: trafficjam (~qubes@119.17.42.59) (*.net *.split)
[11:39:31] *** Quits: Soni (~quassel@autistic.space) (*.net *.split)
[11:39:31] *** Quits: Murray7501 (~Murray@89.109-247-180.customer.lyse.net) (*.net *.split)
[11:39:31] *** Quits: Djoobstil (~djoobstil@djoobstil.online) (*.net *.split)
[11:39:31] *** Quits: Betal (~Betal@user/betal) (*.net *.split)
[11:39:31] *** Quits: ajf_ (~ajf_@user/ajf/x-9593112) (*.net *.split)
[11:39:31] *** Quits: rany (~rany@user/rany) (*.net *.split)
[11:39:31] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (*.net *.split)
[11:39:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[11:39:31] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (*.net *.split)
[11:39:31] *** Quits: EtherNet (~ethernet@user/ethernet) (*.net *.split)
[11:39:31] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[11:39:31] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[11:39:31] *** Quits: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it) (*.net *.split)
[11:39:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (*.net *.split)
[11:39:31] *** Quits: Satin (uid193953@user/Seten) (*.net *.split)
[11:39:31] *** Quits: justIrresolute (~justache@user/justache) (*.net *.split)
[11:39:31] *** Quits: caze (~caze@user/caze) (*.net *.split)
[11:39:31] *** Quits: nitrix (~nitrix@user/nitrix) (*.net *.split)
[11:39:31] *** Quits: defjam (~eb0t@90.203.120.248) (*.net *.split)
[11:39:31] *** Quits: karakedi (~eAC53C340@user/karakedi) (*.net *.split)
[11:39:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[11:39:31] *** Quits: JanC (~janc@user/janc) (*.net *.split)
[11:39:31] *** Quits: p0g0 (~p0g0@216.211.153.38) (*.net *.split)
[11:39:31] *** Quits: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com) (*.net *.split)
[11:39:32] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[11:39:32] *** Quits: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi) (*.net *.split)
[11:39:32] *** Quits: Teukka (~teukka@user/Teukka) (*.net *.split)
[11:39:32] *** Quits: bookworm (~bookworm@thelounge/maintainer/bookworm) (*.net *.split)
[11:39:32] *** Quits: andreas303 (andreas303@ip227.orange.bnc4free.com) (*.net *.split)
[11:39:32] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[11:39:32] *** Quits: homura (uid398348@user/homura) (*.net *.split)
[11:39:32] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (*.net *.split)
[11:39:32] *** Quits: Echoz_ (~chris@user/echoz) (*.net *.split)
[11:39:32] *** Quits: bramhaag (~bramhaag@134.195.121.39) (*.net *.split)
[11:39:32] *** Quits: Teckla (uid172075@user/teckla) (*.net *.split)
[11:39:32] *** Quits: imm_ (~imm_@user/imm/x-3405860) (*.net *.split)
[11:39:32] *** Quits: cation (cation@user/cation) (*.net *.split)
[11:39:32] *** Quits: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de) (*.net *.split)
[11:39:32] *** Quits: zalt (~zalt@user/zalt) (*.net *.split)
[11:39:32] *** Quits: davidv7 (~davidv7@user/videogameenjoyer) (*.net *.split)
[11:39:32] *** Quits: dos (~dos@dosowisko.net) (*.net *.split)
[11:39:32] *** Quits: eldritch_ (~eldritch@user/eldritch/x-9272577) (*.net *.split)
[11:39:32] *** Quits: enyc (~enyc@user/enyc) (*.net *.split)
[11:39:32] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[11:39:32] *** Quits: Byteflux (~byte@byteflux.net) (*.net *.split)
[11:39:32] *** Quits: ozzz (~oz@46.49.41.80) (*.net *.split)
[11:39:32] *** Quits: bkhl (~bkhl@user/bkhl) (*.net *.split)
[11:39:32] *** Quits: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it) (*.net *.split)
[11:39:32] *** Quits: qwedfg (~qwedfg@user/qwedfg) (*.net *.split)
[11:39:32] *** Quits: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net) (*.net *.split)
[11:39:32] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (*.net *.split)
[11:39:32] *** Quits: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869) (*.net *.split)
[11:39:32] *** Quits: cebor (~cebor@user/cebor) (*.net *.split)
[11:39:32] *** Quits: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4) (*.net *.split)
[11:39:32] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[11:39:32] *** Quits: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net) (*.net *.split)
[11:39:32] *** Quits: noonien (~noonien@86.127.212.246) (*.net *.split)
[11:39:32] *** Quits: Ryozuki (~Ryozuki@user/ryozuki) (*.net *.split)
[11:39:32] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[11:39:32] *** Quits: aqua (~aqua@user/aqua) (*.net *.split)
[11:39:32] *** Quits: tejr (~tejr@user/tejr) (*.net *.split)
[11:39:32] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (*.net *.split)
[11:39:32] *** Quits: Atque (~Atque@user/atque) (*.net *.split)
[11:39:32] *** Quits: System_Error (~SystemErr@user/systemerror) (*.net *.split)
[11:39:32] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (*.net *.split)
[11:39:32] *** Quits: caveman (~caveman@gateway/tor-sasl/caveman) (*.net *.split)
[11:39:32] *** Quits: duds- (~duds-@gateway/tor-sasl/duds) (*.net *.split)
[11:39:33] *** Quits: bindu (~bindu@user/bindu) (*.net *.split)
[11:39:33] *** Quits: Senicar (~Senicar@gateway/tor-sasl/senicar) (*.net *.split)
[11:39:33] *** Quits: chiselfuse (~chiselfus@user/chiselfuse) (*.net *.split)
[11:39:33] *** Quits: de-facto (~de-facto@user/de-facto) (*.net *.split)
[11:39:33] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[11:39:33] *** Quits: diiirt (~diiirt@user/diiirt) (*.net *.split)
[11:39:33] *** Quits: nomagno (~nomagno@2001:470:69fc:105::c1f0) (*.net *.split)
[11:39:33] *** Quits: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d) (*.net *.split)
[11:39:33] *** Quits: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5) (*.net *.split)
[11:39:33] *** Quits: surgeon[m] (~surge9nma@2001:470:69fc:105::f585) (*.net *.split)
[11:39:33] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (*.net *.split)
[11:39:33] *** Quits: aura[m] (~aurabindo@2001:470:69fc:105::4204) (*.net *.split)
[11:39:33] *** Quits: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553) (*.net *.split)
[11:39:33] *** Quits: abraham (~abraham@143.244.185.86) (*.net *.split)
[11:39:33] *** Quits: Goodbye_Vincent (cyvahl@freakshells.net) (*.net *.split)
[11:39:33] *** Quits: hirish (~hirish@ip85.ip-137-74-20.eu) (*.net *.split)
[11:39:33] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[11:39:33] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[11:39:33] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[11:39:33] *** Quits: mrec_ (~markus@sundtek.de) (*.net *.split)
[11:39:33] *** Quits: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net) (*.net *.split)
[11:39:33] *** Quits: Mindiell (~Mindiell@82-64-206-161.subs.proxad.net) (*.net *.split)
[11:39:33] *** Quits: ra4king (~ra4king@roiatalla.com) (*.net *.split)
[11:39:33] *** Quits: geezabiscuit (~Geezabisc@user/geezabiscuit) (*.net *.split)
[11:39:33] *** Quits: mormue (~mormue@static.29.186.130.94.clients.your-server.de) (*.net *.split)
[11:39:33] *** Quits: MrAureliusR_ (~MrAureliu@user/mraureliusr) (*.net *.split)
[11:39:33] *** Quits: dcx (~dcx@user/dac) (*.net *.split)
[11:39:33] *** Quits: finalsummer_ (~finalsumm@user/finalsummer) (*.net *.split)
[11:39:33] *** Quits: joev (~joev@user/joev) (*.net *.split)
[11:39:33] *** Quits: tm512 (~tm512@user/tm512) (*.net *.split)
[11:39:33] *** Quits: Jck_true (~jcktrue@user/jck-true/x-0200799) (*.net *.split)
[11:39:33] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[11:39:33] *** Quits: mrkajetanp (~mrkajetan@88.98.245.28) (*.net *.split)
[11:39:33] *** Quits: dansan (~daniel@75.81.148.51) (*.net *.split)
[11:39:33] *** Quits: pony (sid524992@smol/hors) (*.net *.split)
[11:39:33] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[11:39:33] *** Quits: Telvana (~capo@user/telvana) (*.net *.split)
[11:39:33] *** Quits: Albright (~Albright@149.28.13.173) (*.net *.split)
[11:39:33] *** Quits: shadowchaser (~Shadowcha@liox.eu) (*.net *.split)
[11:39:33] *** Quits: BlueShark (sid10311@user/blueshark) (*.net *.split)
[11:39:33] *** Quits: Nex8192 (~Nex8192@user/nex8192) (*.net *.split)
[11:39:33] *** Quits: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net) (*.net *.split)
[11:39:33] *** Quits: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (*.net *.split)
[11:39:33] *** Quits: kernelc (~kornel@46.101.204.33) (*.net *.split)
[11:39:33] *** Quits: bleb (~cm@user/bleb) (*.net *.split)
[11:39:33] *** Quits: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407) (*.net *.split)
[11:39:34] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[11:39:34] *** Quits: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se) (*.net *.split)
[11:39:34] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (*.net *.split)
[11:39:34] *** Quits: shokara (8a599707f6@198.108.77.17) (*.net *.split)
[11:39:34] *** Quits: [R] (~rs@genoce.org) (*.net *.split)
[11:39:34] *** Quits: grumble (grumble@user/grumble) (*.net *.split)
[11:39:34] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[11:39:34] *** Quits: mweckbecker (~matthias@weckbecker.name) (*.net *.split)
[11:39:34] *** Quits: dragonmaster (dragonmast@user/dragonmaster) (*.net *.split)
[11:39:34] *** Quits: ws2k3 (znc@vps.freegamehosting.eu) (*.net *.split)
[11:39:34] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[11:39:34] *** Quits: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2) (*.net *.split)
[11:39:34] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (*.net *.split)
[11:39:34] *** Quits: Daemoen (~Daemoen@daemoen.ct-unlimited.com) (*.net *.split)
[11:39:34] *** Quits: gemelen (~gemelen@zooey.gemelen.net) (*.net *.split)
[11:39:34] *** Quits: Justin_T (~Justin@user/justin-t/x-2449983) (*.net *.split)
[11:39:34] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[11:39:34] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[11:39:34] *** Quits: Irvise (~irvise@2001:470:69fc:105::84c) (*.net *.split)
[11:39:34] *** Quits: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f) (*.net *.split)
[11:39:34] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (*.net *.split)
[11:39:34] *** Quits: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9) (*.net *.split)
[11:39:34] *** Quits: TheDcoder[m] (~thedcoder@user/thedcoder) (*.net *.split)
[11:39:34] *** Quits: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net) (*.net *.split)
[11:39:34] *** Quits: synbiose (~synbiose@user/synbiose) (*.net *.split)
[11:39:34] *** Quits: whatsupboy (~whatsupbo@user/scobydoo) (*.net *.split)
[11:39:34] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (*.net *.split)
[11:39:34] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[11:39:34] *** Quits: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com) (*.net *.split)
[11:39:34] *** Quits: cehteh (~ct@git.pipapo.org) (*.net *.split)
[11:39:34] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[11:39:34] *** Quits: illustris (sid211748@id-211748.ilkley.irccloud.com) (*.net *.split)
[11:39:34] *** Quits: stilbruch (~stilbruch@157.245.122.124) (*.net *.split)
[11:39:34] *** Quits: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6) (*.net *.split)
[11:39:34] *** Quits: eof (~eof@tty3.dev) (*.net *.split)
[11:39:34] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (*.net *.split)
[11:39:34] *** Quits: Learath2 (~learath2@user/learath2) (*.net *.split)
[11:39:34] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: bparker (~nobody@user/bparker) (*.net *.split)
[11:39:35] *** Quits: pippijn (~pippijn@ra.xinutec.org) (*.net *.split)
[11:39:35] *** Quits: noahmg123 (sid89117@id-89117.ilkley.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[11:39:35] *** Quits: glenfe (sid231748@user/glenfe) (*.net *.split)
[11:39:35] *** Quits: jellie (~luv_panda@user/jellie) (*.net *.split)
[11:39:35] *** Quits: twkm (twkm@rfc1459.net) (*.net *.split)
[11:39:35] *** Quits: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com) (*.net *.split)
[11:39:35] *** Quits: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2) (*.net *.split)
[11:39:35] *** Quits: Celelibi (celelibi@user/celelibi) (*.net *.split)
[11:39:35] *** Quits: DCTWD (~dc@uz.utmappro.com) (*.net *.split)
[11:39:35] *** Quits: fakenullie (~nullie@london.nullie.name) (*.net *.split)
[11:39:35] *** Quits: livestradamus (~quassel@user/livestradamus) (*.net *.split)
[11:39:35] *** Quits: veltas (~veltas@104.236.34.215) (*.net *.split)
[11:39:35] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (*.net *.split)
[11:39:35] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (*.net *.split)
[11:39:35] *** Quits: Rounin (~david@84.212.130.215) (*.net *.split)
[11:39:35] *** Quits: mixfix41 (~homefame@user/mixfix41) (*.net *.split)
[11:39:35] *** Quits: g2anj (~v@58.228.230.4) (*.net *.split)
[11:39:35] *** Quits: tbcr_ (~tbcr@107.13.189.161) (*.net *.split)
[11:39:35] *** Quits: supakeen (~user@python/site-packages/supakeen) (*.net *.split)
[11:39:35] *** Quits: Luke (~ldm@hacksoc/member) (*.net *.split)
[11:39:35] *** Quits: crankslider (~slidercra@user/slidercrank) (*.net *.split)
[11:39:35] *** Quits: Wulf (~Wulf@user/wulf) (*.net *.split)
[11:39:35] *** Quits: Matt|home (~matt@adsl-74-233-58-165.mia.bellsouth.net) (*.net *.split)
[11:39:35] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[11:39:35] *** Quits: somlis (~somlis@user/somlis) (*.net *.split)
[11:39:35] *** Quits: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net) (*.net *.split)
[11:39:35] *** Quits: BSaboia (~bsaboia@177.37.198.83) (*.net *.split)
[11:39:35] *** Quits: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com) (*.net *.split)
[11:39:35] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (*.net *.split)
[11:39:35] *** Quits: dacav (~dacav@h94-245-9-196.cust.a3fiber.se) (*.net *.split)
[11:39:35] *** Quits: vinay (~Vinay@user/vinay-keshava) (*.net *.split)
[11:39:35] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[11:39:35] *** Quits: edr (~edr@user/edr) (*.net *.split)
[11:39:35] *** Quits: nate (NBishop@o.apocaleaps.com) (*.net *.split)
[11:39:35] *** Quits: HisShadow (~HisShadow@user/hisshadow) (*.net *.split)
[11:39:35] *** Quits: coruja (~coruja@user/coruja) (*.net *.split)
[11:39:35] *** Quits: sebag (~guest@91.245.82.2) (*.net *.split)
[11:39:35] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (*.net *.split)
[11:39:35] *** Quits: Tom^ (~Tom^@user/tom/x-0773808) (*.net *.split)
[11:39:35] *** Quits: raym (~raym@user/raym) (*.net *.split)
[11:39:35] *** Quits: luke-jr (~luke-jr@user/luke-jr) (*.net *.split)
[11:39:35] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[11:39:35] *** Quits: sokan (~sokan@athedsl-4548055.home.otenet.gr) (*.net *.split)
[11:39:35] *** Quits: nun (~nun@178.115.236.156.static.drei.at) (*.net *.split)
[11:39:35] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (*.net *.split)
[11:39:35] *** Quits: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (*.net *.split)
[11:39:36] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[11:39:36] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (*.net *.split)
[11:39:36] *** Quits: koo5_ (~quassel@51.140.155.227) (*.net *.split)
[11:39:36] *** Quits: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch) (*.net *.split)
[11:39:36] *** Quits: Phil-Work (~phil@62.3.100.20) (*.net *.split)
[11:39:36] *** Quits: GyrosGeier (~geier@185.27.255.155) (*.net *.split)
[11:39:36] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (*.net *.split)
[11:39:36] *** Quits: mniip (mniip@libera/staff/mniip) (*.net *.split)
[11:39:36] *** Quits: simontime (~simontime@irc.simonti.me) (*.net *.split)
[11:39:36] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[11:39:36] *** Quits: dcreator (~kjell@208.92-221-37.customer.lyse.net) (*.net *.split)
[11:39:36] *** Quits: davros (~davros@host86-185-61-39.range86-185.btcentralplus.com) (*.net *.split)
[11:39:36] *** Quits: joo-_ (~joo-_@fsf/member/joo--) (*.net *.split)
[11:39:36] *** Quits: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net) (*.net *.split)
[11:39:36] *** Quits: LuKaRo (~LuKaRo@p4fc32532.dip0.t-ipconnect.de) (*.net *.split)
[11:39:36] *** Quits: srji (~srji@static.43.141.203.116.clients.your-server.de) (*.net *.split)
[11:39:36] *** Quits: Chpy0 (~chpy@30-8-178-69.static.gci.net) (*.net *.split)
[11:39:36] *** Quits: ProperNoun (~holyShizn@user/propernoun) (*.net *.split)
[11:39:36] *** Quits: digilink (~digilink@user/digilink) (*.net *.split)
[11:39:36] *** Quits: foul_owl (~kerry@94.140.8.107) (*.net *.split)
[11:39:36] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[11:39:36] *** Quits: emias (~holger@home.zedat.fu-berlin.de) (*.net *.split)
[11:39:36] *** Quits: asd (~noname@user/asd) (*.net *.split)
[11:39:36] *** Quits: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net) (*.net *.split)
[11:39:36] *** Quits: csjp (~csjp@user/csjp) (*.net *.split)
[11:39:36] *** Quits: BUSY (~BUSY@user/busy) (*.net *.split)
[11:39:36] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[11:39:36] *** Quits: SpringSprocket (~srv@hobby.esselfe.ca) (*.net *.split)
[11:39:36] *** Quits: nortoh (~nortoh@user/nortoh) (*.net *.split)
[11:39:36] *** Quits: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net) (*.net *.split)
[11:39:36] *** Quits: avarab (avar@vm.nix.is) (*.net *.split)
[11:39:36] *** Quits: citrons (~citrons@alt.mondecitronne.com) (*.net *.split)
[11:39:36] *** Quits: shantaram (shan@cyblog/maintainer/shan) (*.net *.split)
[11:39:36] *** Quits: alip (~alip@exherbo/developer/alip) (*.net *.split)
[11:39:37] *** Quits: dstein64 (~dstein64@dannyadam.com) (*.net *.split)
[11:39:37] *** Quits: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net) (*.net *.split)
[11:39:37] *** Quits: Dreg (~Dreg@fr33project.org) (*.net *.split)
[11:39:37] *** Quits: zlg_ (~zlg@user/zlg) (*.net *.split)
[11:39:37] *** Quits: alicef (~none@gentoo/developer/alicef) (*.net *.split)
[11:39:37] *** Quits: disconnect3d (~disconnec@user/disconnect3d) (*.net *.split)
[11:39:37] *** Quits: majors_ (~majors@user/majors) (*.net *.split)
[11:39:37] *** Quits: apotheon (~apotheon@copyfree/founder/apotheon) (*.net *.split)
[11:39:37] *** Quits: polyrob (~rob@user/polyrob) (*.net *.split)
[11:39:37] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[11:39:37] *** Quits: amorel_ (~amorel@mx.mompl.net) (*.net *.split)
[11:39:37] *** Quits: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3) (*.net *.split)
[11:39:37] *** Quits: e36freak (~e36freak@user/e36freak) (*.net *.split)
[11:39:37] *** Quits: dangrenier83 (~pi@user/dangrenier83) (*.net *.split)
[11:39:37] *** Quits: sunyour (~sunyour@129.226.182.99) (*.net *.split)
[11:39:37] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[11:39:37] *** Quits: pinheadmz (~pinheadmz@hns-contributor.dev) (*.net *.split)
[11:39:37] *** Quits: root____ (~root@157.245.144.252) (*.net *.split)
[11:39:37] *** Quits: Teacup (~teacup@user/teacup) (*.net *.split)
[11:39:37] *** Quits: sham1 (~sham1@212-146-44-107.aboa.net) (*.net *.split)
[11:39:37] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[11:39:37] *** Quits: regulate (~regulate@koduro.com) (*.net *.split)
[11:39:37] *** Quits: phroa (~phroa@user/phroa) (*.net *.split)
[11:39:37] *** Quits: clarity (~clarity@user/clarity) (*.net *.split)
[11:39:37] *** Quits: sivoais (~zaki@199.19.225.239) (*.net *.split)
[11:39:37] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[11:39:37] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-11c4-68db-ad36-c833.inf6.spectrum.com) (*.net *.split)
[11:39:37] *** Quits: wingsorc (~wingsorc@user/wingsorc) (*.net *.split)
[11:39:37] *** Quits: jinsun_ (~jinsun@user/jinsun) (*.net *.split)
[11:39:38] *** Quits: nf (~n@monade.li) (*.net *.split)
[11:39:38] *** Quits: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58) (*.net *.split)
[11:39:38] *** Quits: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6) (*.net *.split)
[11:39:38] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[11:39:38] *** Quits: mphojele (~mphojelem@2001:470:69fc:105::35ab) (*.net *.split)
[11:39:38] *** Quits: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30) (*.net *.split)
[11:39:38] *** Quits: explosion-mental (~explosion@2001:470:69fc:105::dac2) (*.net *.split)
[11:39:38] *** Quits: placeb0 (uid283215@id-283215.lymington.irccloud.com) (*.net *.split)
[11:39:38] *** Quits: gnoo (gnoo@user/gnoo) (*.net *.split)
[11:39:38] *** Quits: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net) (*.net *.split)
[11:39:38] *** Quits: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net) (*.net *.split)
[11:39:38] *** Quits: dmlloyd (sid331705@redhat/dmlloyd) (*.net *.split)
[11:39:38] *** Quits: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com) (*.net *.split)
[11:39:38] *** Quits: tobiasu (~tobiasu@user/tobiasu) (*.net *.split)
[11:39:38] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (*.net *.split)
[11:39:38] *** Quits: jenkins (jenkins@user/jenkins) (*.net *.split)
[11:39:38] *** Quits: ikiryo (sid109660@user/ikiryo) (*.net *.split)
[11:39:39] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[11:39:39] *** Quits: meowray (MaskRay@user/meowray) (*.net *.split)
[11:39:39] *** Quits: sirdidymus (~sirdidymu@sorcsys.net) (*.net *.split)
[11:39:39] *** Quits: tazle (tazle@kapsi.fi) (*.net *.split)
[11:39:39] *** Quits: glider (~glider@user/glider) (*.net *.split)
[11:39:39] *** Quits: Exa (exa@irc.moe) (*.net *.split)
[11:39:39] *** Quits: domve (~dom@user/domve) (*.net *.split)
[11:39:39] *** Quits: dhch (~dhch@185.213.154.165) (*.net *.split)
[11:39:39] *** Quits: taru9 (~realTaru9@user/taru9) (*.net *.split)
[11:39:39] *** Quits: Retr0id (~Retr0id@user/retr0id) (*.net *.split)
[11:39:39] *** Quits: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d) (*.net *.split)
[11:39:39] *** Quits: carrar (~tim@osburn.jp) (*.net *.split)
[11:39:39] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[11:39:39] *** Quits: Ckat (~Ckat@xn--z7x.xn--6frz82g) (*.net *.split)
[11:39:39] *** Quits: Chaser (~Chaser@user/chaser) (*.net *.split)
[11:39:39] *** Quits: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com) (*.net *.split)
[11:39:39] *** Quits: M101donutman[m] (~M101donut@2001:470:69fc:105::d51) (*.net *.split)
[11:39:39] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[11:39:40] *** Quits: ormaaj (~ormaaj@user/ormaaj) (*.net *.split)
[11:39:40] *** Quits: slact[m] (~slact@2001:470:69fc:105::1:5ee3) (*.net *.split)
[11:39:40] *** Quits: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e) (*.net *.split)
[11:39:40] *** Quits: DPA (~DPA@2a05:41c0:0:8104::a3c:10d) (*.net *.split)
[11:39:40] *** Quits: baloona (~baloona@mail.baloona.de) (*.net *.split)
[11:39:40] *** Quits: tafa (~tafa@user/tafa) (*.net *.split)
[11:39:40] *** Quits: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a) (*.net *.split)
[11:39:40] *** Quits: neunon (~neunon@user/neunon) (*.net *.split)
[11:39:40] *** Quits: gdd (~gdd@129.199.146.230) (*.net *.split)
[11:39:40] *** Quits: jda (~jadra@chai.0xbad.coffee) (*.net *.split)
[11:39:40] *** Quits: lemontree (~chat@user/lemontree) (*.net *.split)
[11:39:40] *** Quits: dme2 (~dme2@67.205.140.199) (*.net *.split)
[11:39:40] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[11:39:40] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (*.net *.split)
[11:39:40] *** Quits: exec64 (5ff8a84e19@2604:bf00:561:2000::f9) (*.net *.split)
[11:39:40] *** Quits: dooba (35c4732bbc@2604:bf00:561:2000::9d) (*.net *.split)
[11:39:40] *** Quits: sm2n (ae95cb1267@user/sm2n) (*.net *.split)
[11:39:40] *** Quits: wangledorf (sid505185@id-505185.ilkley.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: subvisor (sid502026@2a03:5180:f:1::7:a90a) (*.net *.split)
[11:39:40] *** Quits: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3) (*.net *.split)
[11:39:40] *** Quits: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8) (*.net *.split)
[11:39:40] *** Quits: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c) (*.net *.split)
[11:39:40] *** Quits: tom5760 (73d4025b14@user/tom5760) (*.net *.split)
[11:39:40] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[11:39:40] *** Quits: cengiz_io (sid223191@id-223191.ilkley.irccloud.com) (*.net *.split)
[11:39:40] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[11:39:40] *** Quits: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com) (*.net *.split)
[11:39:40] *** Quits: useretail (~useretail@185.132.19.151) (*.net *.split)
[11:39:40] *** Quits: hoho (hoho@user/hoho) (*.net *.split)
[11:39:40] *** Quits: susam (~susam@user/susam) (*.net *.split)
[11:39:41] *** Quits: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se) (*.net *.split)
[11:39:41] *** Quits: mgocobachi (~m@ancrae.com) (*.net *.split)
[11:39:41] *** Quits: Isthmusi (~Isthmus@user/isveni) (*.net *.split)
[11:39:41] *** Quits: Twix (~None@2a01:4f8:192:23d0::1be4:a) (*.net *.split)
[11:39:41] *** Quits: supernov1h (~supernova@mail.ijk.nz) (*.net *.split)
[11:39:41] *** Quits: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net) (*.net *.split)
[11:39:41] *** Quits: richardwh1uk (richardwhi@scarlet.richardwhiuk.com) (*.net *.split)
[11:39:41] *** Quits: knittl (~knittl@user/knittl) (*.net *.split)
[11:39:41] *** Quits: savy_ (~z@io.tl) (*.net *.split)
[11:39:41] *** Quits: z14 (~alzee@user/alzee) (*.net *.split)
[11:39:41] *** Quits: herrhotzenplotz (~herrhotze@user/herrhotzenplotz) (*.net *.split)
[11:39:41] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[11:39:41] *** Quits: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net) (*.net *.split)
[11:39:41] *** Quits: danieln (~danieln@erebor.danieln.de) (*.net *.split)
[11:39:41] *** Quits: RemoteHost (A_D@libera/staff/dragon) (*.net *.split)
[11:39:41] *** Quits: dynos01 (~dynos01@li820-149.members.linode.com) (*.net *.split)
[11:39:41] *** Quits: vancz (~vancz@user/vancz) (*.net *.split)
[11:39:41] *** Quits: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d) (*.net *.split)
[11:39:41] *** Quits: lowin (~lowin@user/lowin) (*.net *.split)
[11:39:41] *** Quits: tarzeau (~alex@mail.aiei.ch) (*.net *.split)
[11:39:41] *** Quits: Muzer (~muzer@tim32.org) (*.net *.split)
[11:39:41] *** Quits: foxtrot (~foxtrot@user/foxtrot) (*.net *.split)
[11:39:41] *** Quits: zacts (~zacts@user/zacts) (*.net *.split)
[11:39:41] *** Quits: silkut[m] (~silkutmat@2001:470:69fc:105::1:6530) (*.net *.split)
[11:39:41] *** Quits: epony (~epony@user/epony) (*.net *.split)
[11:39:41] *** Quits: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com) (*.net *.split)
[11:39:41] *** Quits: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3) (*.net *.split)
[11:39:41] *** Quits: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe) (*.net *.split)
[11:39:41] *** Quits: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b) (*.net *.split)
[11:39:41] *** Quits: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[11:39:42] *** Quits: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37) (*.net *.split)
[11:39:42] *** Quits: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe) (*.net *.split)
[11:39:42] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[11:39:42] *** Quits: daurn (~daurnimat@vultr.daurnimator.com) (*.net *.split)
[11:39:42] *** Quits: Thymo (~Thymo@NASSP/developer/Thymo) (*.net *.split)
[11:39:42] *** Quits: g1n (~g1n@user/g1n) (*.net *.split)
[11:39:42] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[11:39:42] *** Quits: yano (~yano@ircpuzzles/staff/yano) (*.net *.split)
[11:39:42] *** Quits: DonRichie (~DonRichie@ricl.de) (*.net *.split)
[11:39:42] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[11:39:42] *** Quits: armin (~armin@unix.porn) (*.net *.split)
[11:39:42] *** Quits: skeels (21030cf582@2604:bf00:561:2000::237) (*.net *.split)
[11:39:42] *** Quits: DarkUranium (~DarkUrani@stdrand.com) (*.net *.split)
[11:39:42] *** Quits: gonogo (~gonogo@167.88.62.87) (*.net *.split)
[11:39:42] *** Quits: APic (apic@apic.name) (*.net *.split)
[11:39:42] *** Quits: thiccdaddy (~o_O@user/thiccdaddy) (*.net *.split)
[11:39:42] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: kplant (~kplant@user/kplant) (*.net *.split)
[11:39:42] *** Quits: welt (~welt@willow.spiderden.net) (*.net *.split)
[11:39:42] *** Quits: nohit (sid334887@id-334887.tinside.irccloud.com) (*.net *.split)
[11:39:42] *** Quits: trenka (~ykaliuta@user/trenka) (*.net *.split)
[11:39:42] *** Quits: sudden (~cat@user/sudden) (*.net *.split)
[11:39:42] *** Quits: TallonRain (sid214799@user/tallonrain) (*.net *.split)
[11:39:42] *** Quits: leosilva (~leosilva@canonical/leosilva) (*.net *.split)
[11:39:42] *** Quits: Freman (~Freman@flatus.fremnet.net) (*.net *.split)
[11:39:42] *** Quits: n1000 (~n1000@user/n1000) (*.net *.split)
[11:39:42] *** Quits: OverCoder (~OverCoder@user/overcoder) (*.net *.split)
[11:39:42] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[11:39:42] *** Quits: gl (~x@pwn.lu) (*.net *.split)
[11:39:43] *** Quits: voldial (~user@user/voldial) (*.net *.split)
[11:39:43] *** Quits: laris (undead@37.221.209.36) (*.net *.split)
[11:39:43] *** Quits: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc) (*.net *.split)
[11:39:43] *** Quits: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093) (*.net *.split)
[11:39:43] *** Quits: archdark[m] (~ryonagana@2001:470:69fc:105::fd27) (*.net *.split)
[11:39:43] *** Quits: randy408[m] (~randy408m@2001:470:69fc:105::2f5e) (*.net *.split)
[11:39:43] *** Quits: Akawama[m] (~akawama@user/akawama) (*.net *.split)
[11:39:43] *** Quits: atulu (~atulum]@2001:470:69fc:105::d50c) (*.net *.split)
[11:39:43] *** Quits: dalz (~dalz@2001:470:69fc:105::2ea) (*.net *.split)
[11:39:43] *** Quits: hussam (~hussam@user/hussam) (*.net *.split)
[11:39:43] *** Quits: deflected (~deflected@user/deflected) (*.net *.split)
[11:39:43] *** Quits: edk (edk@libera/staff/edk) (*.net *.split)
[11:39:43] *** Quits: PaulePanter (~paul@mail.gw90.de) (*.net *.split)
[11:39:43] *** Quits: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[11:39:43] *** Quits: DarthGandalf (user@znc/developer/DarthGandalf) (*.net *.split)
[11:39:43] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[11:39:43] *** Quits: finsternis (~X@23.226.237.192) (*.net *.split)
[11:39:43] *** Quits: phryk (~totallyno@user/phryk) (*.net *.split)
[11:39:43] *** Quits: LeoNerd (~leo@genoa.dictatorshipcake.co.uk) (*.net *.split)
[11:39:43] *** Quits: int (~int@0x4.cx) (*.net *.split)
[11:39:43] *** Quits: greeb (~greeb@blahblahblah.anime.horse) (*.net *.split)
[11:39:43] *** Quits: krzych (krzych@nroot.pl) (*.net *.split)
[11:39:43] *** Quits: houze (~houze@user/houze) (*.net *.split)
[11:39:43] *** Quits: zaratustra_ (~zaratustr@idlerpg/player/zaratustra) (*.net *.split)
[11:39:43] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[11:39:43] *** Quits: Khoyo (~khoyo@user/khoyo) (*.net *.split)
[11:39:44] *** Quits: ElementW (~tungsten@hoodie.elementw.net) (*.net *.split)
[11:39:44] *** Quits: les (znc@user/les) (*.net *.split)
[11:39:44] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[11:39:44] *** Quits: theglass (~glass@user/theglass) (*.net *.split)
[11:39:44] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: CalimeroTeknik (~calimero@user/calimeroteknik) (*.net *.split)
[11:39:44] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[11:39:44] *** Quits: Emil (emil@emil.fi) (*.net *.split)
[11:39:44] *** Quits: high_ground (~yes@user/high-ground/x-5722129) (*.net *.split)
[11:39:44] *** Quits: fizzie (irc@selene.zem.fi) (*.net *.split)
[11:39:44] *** Quits: chiptuner (~bobby@user/chiptuner) (*.net *.split)
[11:39:44] *** Quits: Seng (~nick@hurtig.ninja) (*.net *.split)
[11:39:44] *** Quits: trn (jhj@sourcehut/user/trn) (*.net *.split)
[11:39:44] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (*.net *.split)
[11:39:44] *** Quits: tempora (~tempus@user/tempora) (*.net *.split)
[11:39:44] *** Quits: MrC (Ben@mrbenc.net) (*.net *.split)
[11:39:44] *** Quits: Neui[m] (~neuimatri@2001:470:69fc:105::745) (*.net *.split)
[11:39:44] *** Quits: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1) (*.net *.split)
[11:39:44] *** Quits: psydroid (~psydroid@user/psydroid) (*.net *.split)
[11:39:44] *** Quits: go4godvin (~go4godvin@user/go4godvin) (*.net *.split)
[11:39:44] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[11:39:44] *** Quits: trinity (9df954e8f1@2604:bf00:561:2000::cd) (*.net *.split)
[11:39:44] *** Quits: agander_m (sid407952@id-407952.tinside.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: Epakai (Epakai@drislock.org) (*.net *.split)
[11:39:44] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[11:39:44] *** Quits: kristian84 (~asdf@ti0037a400-4119.bb.online.no) (*.net *.split)
[11:39:44] *** Quits: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2) (*.net *.split)
[11:39:44] *** Quits: FragByte (~christian@user/fragbyte) (*.net *.split)
[11:39:44] *** Quits: englishm (sid6629@id-6629.tinside.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: asm (~alexander@user/asm) (*.net *.split)
[11:39:44] *** Quits: Pent (sid313808@id-313808.lymington.irccloud.com) (*.net *.split)
[11:39:44] *** Quits: Ragnor (~Ragnor@user/ragnor) (*.net *.split)
[11:39:45] *** Quits: aosync (~aws@mx1.aosync.me) (*.net *.split)
[11:39:45] *** Quits: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce) (*.net *.split)
[11:39:45] *** Quits: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca) (*.net *.split)
[11:39:45] *** Quits: Zenton (~user@user/zenton) (*.net *.split)
[11:39:45] *** Quits: gshumway (~gshumway@user/gshumway) (*.net *.split)
[11:39:45] *** Quits: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net) (*.net *.split)
[11:39:45] *** Quits: divine (~divine@2001:470:8247:1::31) (*.net *.split)
[11:39:45] *** Quits: strudl (~strudl@user/strudl) (*.net *.split)
[11:39:45] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (*.net *.split)
[11:39:45] *** Quits: clockworkgirl (sophie@user/clockworkgirl) (*.net *.split)
[11:39:45] *** Quits: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch) (*.net *.split)
[11:39:45] *** Quits: parazyd (~parazyd@devuan/developer/parazyd) (*.net *.split)
[11:39:45] *** Quits: sa (sid1055@id-1055.tinside.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: IUSR (sid348938@id-348938.hampstead.irccloud.com) (*.net *.split)
[11:39:45] *** Quits: con3 (~con3@143.198.53.32) (*.net *.split)
[11:39:45] *** Quits: reda_ (~reda@user/reda) (*.net *.split)
[11:39:45] *** Quits: bone (~bone@user/mbo) (*.net *.split)
[11:39:45] *** Quits: Stx (stx@libera/staff/stx) (*.net *.split)
[11:39:45] *** Quits: kline (~freedom0@libera/staff/kline) (*.net *.split)
[11:39:45] *** Quits: shachaf (~shachaf@user/shachaf) (*.net *.split)
[11:39:45] *** Quits: koisoke (xef4@epilogue.org) (*.net *.split)
[11:39:45] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (*.net *.split)
[11:39:57] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 240 seconds)
[11:40:17] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Remote host closed the connection)
[11:40:41] *** Joins: chenqisu1 (~bhca7d@183.217.201.21)
[11:43:54] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 256 seconds)
[11:48:31] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[11:49:10] *** Joins: aradesh (~aradesh@2a02:c7c:120a:b200:f9e7:d5ec:cde6:98e)
[11:51:38] *** Joins: nun (~nun@178.115.236.156.static.drei.at)
[11:51:38] *** Joins: Guest7328 (~Tom^@user/tom/x-0773808)
[11:51:38] *** Joins: chiselfuse (~chiselfus@user/chiselfuse)
[11:51:38] *** Joins: the (~eht@user/eht)
[11:51:38] *** Joins: mrig (~mrig@user/mrig)
[11:51:38] *** Joins: don (~don@89.45.90.193)
[11:51:38] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:51:38] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:51:38] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[11:51:38] *** Joins: bzyx (~quassel@89-69-20-238.dynamic.chello.pl)
[11:51:38] *** Joins: kish` (~aqua@user/aqua)
[11:51:38] *** Joins: freep (~freepppp@62.1.174.38.dsl.dyn.forthnet.gr)
[11:51:38] *** Joins: floatcomplex (~floatcomp@wireguard/tunneler/floatcomplex)
[11:51:38] *** Joins: tejr (~tejr@user/tejr)
[11:51:38] *** Joins: Rounin (~david@84.212.130.215)
[11:51:38] *** Joins: llh (~llh@user/llh)
[11:51:38] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[11:51:38] *** Joins: pizdets (~pizdets@183.182.111.169)
[11:51:38] *** Joins: mixfix41 (~homefame@user/mixfix41)
[11:51:38] *** Joins: hiovoltage (~hiovoltag@78.186.68.182)
[11:51:38] *** Joins: g2anj (~v@58.228.230.4)
[11:51:38] *** Joins: Atque (~Atque@user/atque)
[11:51:38] *** Joins: tbcr_ (~tbcr@107.13.189.161)
[11:51:38] *** Joins: johnjaye (~pi@154.6.152.74)
[11:51:38] *** Joins: supakeen (~user@python/site-packages/supakeen)
[11:51:38] *** Joins: Luke (~ldm@hacksoc/member)
[11:51:38] *** Joins: voldial (~user@user/voldial)
[11:51:38] *** Joins: Church (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[11:51:38] *** Joins: crankslider (~slidercra@user/slidercrank)
[11:51:38] *** Joins: trafficjam (~qubes@119.17.42.59)
[11:51:38] *** Joins: Soni (~quassel@autistic.space)
[11:51:38] *** Joins: Wulf (~Wulf@user/wulf)
[11:51:38] *** Joins: Matt|home (~matt@adsl-74-233-58-165.mia.bellsouth.net)
[11:51:38] *** Joins: Murray7501 (~Murray@89.109-247-180.customer.lyse.net)
[11:51:38] *** Joins: Djoobstil (~djoobstil@djoobstil.online)
[11:51:38] *** Joins: Betal (~Betal@user/betal)
[11:51:38] *** Joins: noarb (~noarb@user/noarb)
[11:51:38] *** Joins: System_Error (~SystemErr@user/systemerror)
[11:51:38] *** Joins: ajf_ (~ajf_@user/ajf/x-9593112)
[11:51:38] *** Joins: silkut[m] (~silkutmat@2001:470:69fc:105::1:6530)
[11:51:38] *** Joins: rany (~rany@user/rany)
[11:51:38] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[11:51:38] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[11:51:38] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[11:51:38] *** Joins: Seng (~nick@hurtig.ninja)
[11:51:38] *** Joins: freakazoid343 (~matt@2603-9000-cf03-86c3-11c4-68db-ad36-c833.inf6.spectrum.com)
[11:51:38] *** Joins: somlis (~somlis@user/somlis)
[11:51:38] *** Joins: |darc| (darc@23-112-65-16.lightspeed.nworla.sbcglobal.net)
[11:51:38] *** Joins: BSaboia (~bsaboia@177.37.198.83)
[11:51:38] *** Joins: EtherNet (~ethernet@user/ethernet)
[11:51:38] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[11:51:38] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[11:51:38] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[11:51:38] *** Joins: clamiax (~clamiax@net-93-144-125-193.cust.dsl.teletu.it)
[11:51:38] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[11:51:38] *** Joins: susam (~susam@user/susam)
[11:51:38] *** Joins: Satin (uid193953@user/Seten)
[11:51:38] *** Joins: shailangsa (~shailangs@host86-185-98-37.range86-185.btcentralplus.com)
[11:51:38] *** Joins: justIrresolute (~justache@user/justache)
[11:51:38] *** Joins: caze (~caze@user/caze)
[11:51:38] *** Joins: fbiagent_ (~fbiagent@user/fbiagent)
[11:51:38] *** Joins: nitrix (~nitrix@user/nitrix)
[11:51:38] *** Joins: defjam (~eb0t@90.203.120.248)
[11:51:38] *** Joins: karakedi (~eAC53C340@user/karakedi)
[11:51:38] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[11:51:38] *** Joins: JanC (~janc@user/janc)
[11:51:38] *** Joins: aetnaeus (~qpls@cpeb4750e67d202-cmf81d0fad5840.cpe.net.fido.ca)
[11:51:38] *** Joins: p0g0 (~p0g0@216.211.153.38)
[11:51:38] *** Joins: joast (~rick@cpe-98-146-112-4.natnow.res.rr.com)
[11:51:38] *** Joins: greenbagels (~gb@user/greenbagels)
[11:51:38] *** Joins: mikoto-chan (~mikoto-ch@esm-84-240-99-143.netplaza.fi)
[11:51:38] *** Joins: wingsorc (~wingsorc@user/wingsorc)
[11:51:38] *** Joins: dacav (~dacav@h94-245-9-196.cust.a3fiber.se)
[11:51:38] *** Joins: Teukka (~teukka@user/Teukka)
[11:51:38] *** Joins: raym (~raym@user/raym)
[11:51:38] *** Joins: vinay (~Vinay@user/vinay-keshava)
[11:51:38] *** Joins: dzz007 (~dzz007@user/dzz007)
[11:51:38] *** Joins: bookworm (~bookworm@thelounge/maintainer/bookworm)
[11:51:38] *** Joins: andreas303 (andreas303@ip227.orange.bnc4free.com)
[11:51:38] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[11:51:38] *** Joins: edr (~edr@user/edr)
[11:51:38] *** Joins: nate (NBishop@o.apocaleaps.com)
[11:51:38] *** Joins: homura (uid398348@user/homura)
[11:51:38] *** Joins: caveman (~caveman@gateway/tor-sasl/caveman)
[11:51:38] *** Joins: duds- (~duds-@gateway/tor-sasl/duds)
[11:51:38] *** Joins: bindu (~bindu@user/bindu)
[11:51:38] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[11:51:38] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[11:51:38] *** Joins: Senicar (~Senicar@gateway/tor-sasl/senicar)
[11:51:38] *** Joins: Echoz_ (~chris@user/echoz)
[11:51:38] *** Joins: coruja (~coruja@user/coruja)
[11:51:38] *** Joins: bramhaag (~bramhaag@134.195.121.39)
[11:51:38] *** Joins: Irvise (~irvise@2001:470:69fc:105::84c)
[11:51:38] *** Joins: nomagno (~nomagno@2001:470:69fc:105::c1f0)
[11:51:38] *** Joins: Daniel[m]1234522 (~danielbau@2001:470:69fc:105::1:1a5d)
[11:51:38] *** Joins: Neui[m] (~neuimatri@2001:470:69fc:105::745)
[11:51:38] *** Joins: carrot98[m] (~carrot98m@2001:470:69fc:105::1:5fcc)
[11:51:38] *** Joins: blakesmith[m] (~blakesmit@2001:470:69fc:105::1:4093)
[11:51:38] *** Joins: jinsun_ (~jinsun@user/jinsun)
[11:51:38] *** Joins: manx (xuew@p200300e18f239d00022215fffe03cf97.dip0.t-ipconnect.de)
[11:51:38] *** Joins: epony (~epony@user/epony)
[11:51:38] *** Joins: sebag (~guest@91.245.82.2)
[11:51:38] *** Joins: Teckla (uid172075@user/teckla)
[11:51:38] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[11:51:38] *** Joins: alefir (~alefir@rrcs-24-43-248-58.west.biz.rr.com)
[11:51:38] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[11:51:38] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[11:51:38] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[11:51:38] *** Joins: nf (~n@monade.li)
[11:51:38] *** Joins: sokan (~sokan@athedsl-4548055.home.otenet.gr)
[11:51:38] *** Joins: cation (cation@user/cation)
[11:51:38] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[11:51:38] *** Joins: n8chan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net)
[11:51:38] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[11:51:38] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[11:51:38] *** Joins: koo5_ (~quassel@51.140.155.227)
[11:51:38] *** Joins: pflanze (~pflanze@5-168-208-80.dyn.fiber.qlnet.ch)
[11:51:38] *** Joins: dangrenier83 (~pi@user/dangrenier83)
[11:51:38] *** Joins: theglass (~glass@user/theglass)
[11:51:38] *** Joins: malkrister[m] (~malkriste@2001:470:69fc:105::1:44f3)
[11:51:38] *** Joins: psydroid (~psydroid@user/psydroid)
[11:51:38] *** Joins: skyeto[m] (~skyetosky@2001:470:69fc:105::c2fe)
[11:51:38] *** Joins: alessandro_megli (~alessandr@2001:470:69fc:105::6d3f)
[11:51:38] *** Joins: dlozeve[m] (~dlozevema@2001:470:69fc:105::1:1c58)
[11:51:38] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[11:51:38] *** Joins: Phil-Work (~phil@62.3.100.20)
[11:51:38] *** Joins: enick_397 (~mercvrivs@2001:470:69fc:105::2ee6)
[11:51:38] *** Joins: jaavv[m] (~jaavvmatr@2001:470:69fc:105::1:37b1)
[11:51:38] *** Joins: archdark[m] (~ryonagana@2001:470:69fc:105::fd27)
[11:51:38] *** Joins: orkim (~orkim@user/orkim)
[11:51:38] *** Joins: randy408[m] (~randy408m@2001:470:69fc:105::2f5e)
[11:51:38] *** Joins: Sohaib[m] (~smalinux@2001:470:69fc:105::31b5)
[11:51:38] *** Joins: magicalegg[m] (~magicaleg@2001:470:69fc:105::1:52e9)
[11:51:38] *** Joins: Akawama[m] (~akawama@user/akawama)
[11:51:38] *** Joins: flashd[m] (~flashdmat@2001:470:69fc:105::1:3d0b)
[11:51:38] *** Joins: M101donutman[m] (~M101donut@2001:470:69fc:105::d51)
[11:51:38] *** Joins: surgeon[m] (~surge9nma@2001:470:69fc:105::f585)
[11:51:38] *** Joins: heiner_ (~heiner@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[11:51:38] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[11:51:38] *** Joins: TheDcoder[m] (~thedcoder@user/thedcoder)
[11:51:38] *** Joins: mphojele (~mphojelem@2001:470:69fc:105::35ab)
[11:51:38] *** Joins: ormaaj (~ormaaj@user/ormaaj)
[11:51:38] *** Joins: NRK[m] (~nrkmatrix@2001:470:69fc:105::4e30)
[11:51:38] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[11:51:38] *** Joins: slact[m] (~slact@2001:470:69fc:105::1:5ee3)
[11:51:38] *** Joins: atulu (~atulum]@2001:470:69fc:105::d50c)
[11:51:38] *** Joins: aura[m] (~aurabindo@2001:470:69fc:105::4204)
[11:51:38] *** Joins: go4godvin (~go4godvin@user/go4godvin)
[11:51:38] *** Joins: dalz (~dalz@2001:470:69fc:105::2ea)
[11:51:38] *** Joins: explosion-mental (~explosion@2001:470:69fc:105::dac2)
[11:51:38] *** Joins: not_a_robot[m] (~notarobot@2001:470:69fc:105::dd37)
[11:51:38] *** Joins: nmat[m] (~nmatm]@2001:470:69fc:105::1:5553)
[11:51:38] *** Joins: Bazsalanszky[m] (~bazsalans@2001:470:69fc:105::6fe)
[11:51:38] *** Joins: hussam (~hussam@user/hussam)
[11:51:38] *** Joins: asmwfi[m] (~repmovsb@2001:470:69fc:105::1:274e)
[11:51:38] *** Joins: zalt (~zalt@user/zalt)
[11:51:38] *** Joins: davidv7 (~davidv7@user/videogameenjoyer)
[11:51:38] *** Joins: dos (~dos@dosowisko.net)
[11:51:38] *** Joins: eldritch_ (~eldritch@user/eldritch/x-9272577)
[11:51:38] *** Joins: GyrosGeier (~geier@185.27.255.155)
[11:51:38] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[11:51:38] *** Joins: sivoais (~zaki@199.19.225.239)
[11:51:38] *** Joins: clarity (~clarity@user/clarity)
[11:51:38] *** Joins: Dijky (~Dijky@user/dijky)
[11:51:38] *** Joins: phroa (~phroa@user/phroa)
[11:51:38] *** Joins: regulate (~regulate@koduro.com)
[11:51:38] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[11:51:38] *** Joins: sham1 (~sham1@212-146-44-107.aboa.net)
[11:51:38] *** Joins: Teacup (~teacup@user/teacup)
[11:51:38] *** Joins: pinheadmz (~pinheadmz@hns-contributor.dev)
[11:51:38] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[11:51:38] *** Joins: sunyour (~sunyour@129.226.182.99)
[11:51:38] *** Joins: root____ (~root@157.245.144.252)
[11:51:38] *** Joins: e36freak (~e36freak@user/e36freak)
[11:51:38] *** Joins: _0x5fc3 (~0x5fc3@wireguard/tunneler/-0x5fc3)
[11:51:38] *** Joins: amorel_ (~amorel@mx.mompl.net)
[11:51:38] *** Joins: jkl1337 (~jkl@user/jkl)
[11:51:38] *** Joins: polyrob (~rob@user/polyrob)
[11:51:38] *** Joins: apotheon (~apotheon@copyfree/founder/apotheon)
[11:51:38] *** Joins: majors_ (~majors@user/majors)
[11:51:38] *** Joins: disconnect3d (~disconnec@user/disconnect3d)
[11:51:38] *** Joins: Dreg (~Dreg@fr33project.org)
[11:51:38] *** Joins: zlg_ (~zlg@user/zlg)
[11:51:38] *** Joins: alicef (~none@gentoo/developer/alicef)
[11:51:38] *** Joins: dstein64 (~dstein64@dannyadam.com)
[11:51:38] *** Joins: alip (~alip@exherbo/developer/alip)
[11:51:38] *** Joins: avarab (avar@vm.nix.is)
[11:51:38] *** Joins: citrons (~citrons@alt.mondecitronne.com)
[11:51:38] *** Joins: nortoh (~nortoh@user/nortoh)
[11:51:38] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[11:51:38] *** Joins: nyarmith (~nyarmith@pool-72-95-220-156.pitbpa.fios.verizon.net)
[11:51:38] *** Joins: LangerJan (~jan@user/langerjan)
[11:51:38] *** Joins: BUSY (~BUSY@user/busy)
[11:51:38] *** Joins: csjp (~csjp@user/csjp)
[11:51:38] *** Joins: ElectricSheep (~esheep_zn@pool-100-19-29-200.phlapa.fios.verizon.net)
[11:51:38] *** Joins: theFr1nge (~Fr1nge@ip-92-205-18-51.ip.secureserver.net)
[11:51:38] *** Joins: asd (~noname@user/asd)
[11:51:38] *** Joins: emias (~holger@home.zedat.fu-berlin.de)
[11:51:38] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[11:51:38] *** Joins: foul_owl (~kerry@94.140.8.107)
[11:51:38] *** Joins: SpringSprocket (~srv@hobby.esselfe.ca)
[11:51:38] *** Joins: digilink (~digilink@user/digilink)
[11:51:38] *** Joins: ProperNoun (~holyShizn@user/propernoun)
[11:51:38] *** Joins: Chpy0 (~chpy@30-8-178-69.static.gci.net)
[11:51:38] *** Joins: srji (~srji@static.43.141.203.116.clients.your-server.de)
[11:51:38] *** Joins: LuKaRo (~LuKaRo@p4fc32532.dip0.t-ipconnect.de)
[11:51:38] *** Joins: munkis (~mendel_mu@ool-ae2cb218.dyn.optonline.net)
[11:51:38] *** Joins: joo-_ (~joo-_@fsf/member/joo--)
[11:51:38] *** Joins: davros (~davros@host86-185-61-39.range86-185.btcentralplus.com)
[11:51:38] *** Joins: dcreator (~kjell@208.92-221-37.customer.lyse.net)
[11:51:38] *** Joins: Praise (~Fat@user/praise)
[11:51:38] *** Joins: simontime (~simontime@irc.simonti.me)
[11:51:38] *** Joins: mniip (mniip@libera/staff/mniip)
[11:51:38] *** Joins: lonjil (~quassel@user/lonjil)
[11:51:38] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[11:51:38] *** Joins: gemelen (~gemelen@zooey.gemelen.net)
[11:51:38] *** Joins: Justin_T (~Justin@user/justin-t/x-2449983)
[11:51:38] *** Joins: Daemoen (~Daemoen@daemoen.ct-unlimited.com)
[11:51:38] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[11:51:38] *** Joins: hyper_dave (~hyper_dav@2a01:4f9:4a:246c::2)
[11:51:38] *** Joins: kevinsjoberg (sid499516@id-499516.lymington.irccloud.com)
[11:51:38] *** Joins: computerquip (sid423484@user/computerquip)
[11:51:38] *** Joins: mweckbecker (~matthias@weckbecker.name)
[11:51:38] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[11:51:38] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[11:51:38] *** Joins: grumble (grumble@user/grumble)
[11:51:38] *** Joins: [R] (~rs@genoce.org)
[11:51:38] *** Joins: shokara (8a599707f6@198.108.77.17)
[11:51:38] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[11:51:38] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[11:51:38] *** Joins: Masklin_Gurder (~joel@h-155-4-23-152.A230.priv.bahnhof.se)
[11:51:38] *** Joins: elemongw (~elemongw@20.107.36.50)
[11:51:38] *** Joins: bleb (~cm@user/bleb)
[11:51:38] *** Joins: kernelc (~kornel@46.101.204.33)
[11:51:38] *** Joins: catern (~sbaugh@2604:2000:8fc0:b:a9c7:866a:bf36:3407)
[11:51:38] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[11:51:38] *** Joins: nickorta12 (~nickorta1@174-28-176-216.albq.qwest.net)
[11:51:38] *** Joins: Nex8192 (~Nex8192@user/nex8192)
[11:51:38] *** Joins: BlueShark (sid10311@user/blueshark)
[11:51:38] *** Joins: shadowchaser (~Shadowcha@liox.eu)
[11:51:38] *** Joins: Albright (~Albright@149.28.13.173)
[11:51:38] *** Joins: Telvana (~capo@user/telvana)
[11:51:38] *** Joins: kurfen (~kurfen@176.119.195.10)
[11:51:38] *** Joins: pony (sid524992@smol/hors)
[11:51:38] *** Joins: dansan (~daniel@75.81.148.51)
[11:51:38] *** Joins: mrkajetanp (~mrkajetan@88.98.245.28)
[11:51:38] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[11:51:38] *** Joins: Jck_true (~jcktrue@user/jck-true/x-0200799)
[11:51:38] *** Joins: tm512 (~tm512@user/tm512)
[11:51:38] *** Joins: joev (~joev@user/joev)
[11:51:38] *** Joins: finalsummer_ (~finalsumm@user/finalsummer)
[11:51:38] *** Joins: mormue (~mormue@static.29.186.130.94.clients.your-server.de)
[11:51:38] *** Joins: MrAureliusR_ (~MrAureliu@user/mraureliusr)
[11:51:38] *** Joins: geezabiscuit (~Geezabisc@user/geezabiscuit)
[11:51:38] *** Joins: dcx (~dcx@user/dac)
[11:51:38] *** Joins: ra4king (~ra4king@roiatalla.com)
[11:51:38] *** Joins: Mindiell (~Mindiell@82-64-206-161.subs.proxad.net)
[11:51:38] *** Joins: mrec_ (~markus@sundtek.de)
[11:51:38] *** Joins: dexter0 (~dexter0@c-69-181-126-161.hsd1.ca.comcast.net)
[11:51:38] *** Joins: celphi (sid97751@user/celphi)
[11:51:38] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[11:51:38] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[11:51:38] *** Joins: Goodbye_Vincent (cyvahl@freakshells.net)
[11:51:38] *** Joins: hirish (~hirish@ip85.ip-137-74-20.eu)
[11:51:38] *** Joins: abraham (~abraham@143.244.185.86)
[11:51:38] *** Joins: livestradamus (~quassel@user/livestradamus)
[11:51:38] *** Joins: veltas (~veltas@104.236.34.215)
[11:51:38] *** Joins: fakenullie (~nullie@london.nullie.name)
[11:51:38] *** Joins: DCTWD (~dc@uz.utmappro.com)
[11:51:38] *** Joins: Celelibi (celelibi@user/celelibi)
[11:51:38] *** Joins: petererer (~petern@2001:8b0:65dd:8ef1:37be:e06:fb80:4ba2)
[11:51:38] *** Joins: dkeohane2 (~dkeohane@ec2-18-189-29-140.us-east-2.compute.amazonaws.com)
[11:51:38] *** Joins: twkm (twkm@rfc1459.net)
[11:51:38] *** Joins: jellie (~luv_panda@user/jellie)
[11:51:38] *** Joins: glenfe (sid231748@user/glenfe)
[11:51:38] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[11:51:38] *** Joins: noahmg123 (sid89117@id-89117.ilkley.irccloud.com)
[11:51:38] *** Joins: pippijn (~pippijn@ra.xinutec.org)
[11:51:38] *** Joins: bparker (~nobody@user/bparker)
[11:51:38] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[11:51:38] *** Joins: eof (~eof@tty3.dev)
[11:51:38] *** Joins: synx (hornd@2600:3c00::f03c:91ff:fedf:3d6)
[11:51:38] *** Joins: Learath2 (~learath2@user/learath2)
[11:51:38] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[11:51:38] *** Joins: stilbruch (~stilbruch@157.245.122.124)
[11:51:38] *** Joins: buhman (sid411355@user/buhman)
[11:51:38] *** Joins: illustris (sid211748@id-211748.ilkley.irccloud.com)
[11:51:38] *** Joins: cehteh (~ct@git.pipapo.org)
[11:51:38] *** Joins: aeplus (~steve@2603-8000-cf42-7ec1-162f-1996-0ae2-d7da.res6.spectrum.com)
[11:51:38] *** Joins: Artea (~Lufia@artea.com.pt)
[11:51:38] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[11:51:38] *** Joins: synbiose (~synbiose@user/synbiose)
[11:51:38] *** Joins: Jenna16bit (~j16bit@c-73-228-39-16.hsd1.nm.comcast.net)
[11:51:38] *** Joins: whatsupboy (~whatsupbo@user/scobydoo)
[11:51:38] *** Joins: enyc (~enyc@user/enyc)
[11:51:38] *** Joins: diiirt (~diiirt@user/diiirt)
[11:51:38] *** Joins: teepee (~teepee@openscad/teepee)
[11:51:38] *** Joins: de-facto (~de-facto@user/de-facto)
[11:51:38] *** Joins: Pjerky (~Pjerky@81-234-143-135-no58.tbcn.telia.com)
[11:51:38] *** Joins: Chaser (~Chaser@user/chaser)
[11:51:38] *** Joins: Ckat (~Ckat@xn--z7x.xn--6frz82g)
[11:51:38] *** Joins: Spydar007 (~spydar007@user/spydar007)
[11:51:38] *** Joins: carrar (~tim@osburn.jp)
[11:51:38] *** Joins: user282069 (user@2a01:7e00::f03c:92ff:fe7f:456d)
[11:51:38] *** Joins: Retr0id (~Retr0id@user/retr0id)
[11:51:38] *** Joins: taru9 (~realTaru9@user/taru9)
[11:51:38] *** Joins: dhch (~dhch@185.213.154.165)
[11:51:38] *** Joins: domve (~dom@user/domve)
[11:51:38] *** Joins: Exa (exa@irc.moe)
[11:51:38] *** Joins: glider (~glider@user/glider)
[11:51:38] *** Joins: tazle (tazle@kapsi.fi)
[11:51:38] *** Joins: sirdidymus (~sirdidymu@sorcsys.net)
[11:51:38] *** Joins: meowray (MaskRay@user/meowray)
[11:51:38] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[11:51:38] *** Joins: ikiryo (sid109660@user/ikiryo)
[11:51:38] *** Joins: jenkins (jenkins@user/jenkins)
[11:51:38] *** Joins: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae)
[11:51:38] *** Joins: tobiasu (~tobiasu@user/tobiasu)
[11:51:38] *** Joins: ultera (~ultera@ec2-18-118-193-22.us-east-2.compute.amazonaws.com)
[11:51:38] *** Joins: dmlloyd (sid331705@redhat/dmlloyd)
[11:51:38] *** Joins: finalriposte (~finalripo@2403-5802-74-2-20c-29ff-fe7c-2548.ip6.aussiebb.net)
[11:51:38] *** Joins: mplio_ (~mplio@2a02-a452-be1f-1-fe3f-dbff-fe02-92e4.fixed6.kpn.net)
[11:51:38] *** Joins: placeb0 (uid283215@id-283215.lymington.irccloud.com)
[11:51:38] *** Joins: gnoo (gnoo@user/gnoo)
[11:51:38] *** Joins: zacts (~zacts@user/zacts)
[11:51:38] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[11:51:38] *** Joins: Muzer (~muzer@tim32.org)
[11:51:38] *** Joins: lowin (~lowin@user/lowin)
[11:51:38] *** Joins: alvarezp (quassel@2600:3c01::f03c:91ff:fee5:6d8d)
[11:51:38] *** Joins: vancz (~vancz@user/vancz)
[11:51:38] *** Joins: dynos01 (~dynos01@li820-149.members.linode.com)
[11:51:38] *** Joins: TVH767 (~TVH7@containerhost01.de01-nbg01.dev.ti-more.net)
[11:51:38] *** Joins: Cienisty (Cienisty@user/cienisty)
[11:51:38] *** Joins: herrhotzenplotz (~herrhotze@user/herrhotzenplotz)
[11:51:38] *** Joins: savy_ (~z@io.tl)
[11:51:38] *** Joins: richardwh1uk (richardwhi@scarlet.richardwhiuk.com)
[11:51:38] *** Joins: supernov1h (~supernova@mail.ijk.nz)
[11:51:38] *** Joins: BGL (thirty@75-149-171-58-Washington.hfc.comcastbusiness.net)
[11:51:38] *** Joins: Twix (~None@2a01:4f8:192:23d0::1be4:a)
[11:51:38] *** Joins: Isthmusi (~Isthmus@user/isveni)
[11:51:38] *** Joins: danieln (~danieln@erebor.danieln.de)
[11:51:38] *** Joins: RemoteHost (A_D@libera/staff/dragon)
[11:51:38] *** Joins: mgocobachi (~m@ancrae.com)
[11:51:38] *** Joins: tarzeau (~alex@mail.aiei.ch)
[11:51:38] *** Joins: arand (~arand@c-0a01235c.05-662-7570703.bbcust.telenor.se)
[11:51:38] *** Joins: useretail (~useretail@185.132.19.151)
[11:51:38] *** Joins: uso (~matthias@ows-148-253-67-208.eu-west-2.compute.outscale.com)
[11:51:38] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[11:51:38] *** Joins: cengiz_io (sid223191@id-223191.ilkley.irccloud.com)
[11:51:38] *** Joins: dan_berg_pub (2c6463a49d@2604:bf00:561:2000::1c)
[11:51:38] *** Joins: hpyc9 (~yc9@2600:3c03:e000:297:af:af:af:3)
[11:51:38] *** Joins: Riviera (Riviera@user/riviera)
[11:51:38] *** Joins: tom5760 (73d4025b14@user/tom5760)
[11:51:38] *** Joins: subvisor (sid502026@2a03:5180:f:1::7:a90a)
[11:51:38] *** Joins: wangledorf (sid505185@id-505185.ilkley.irccloud.com)
[11:51:38] *** Joins: sm2n (ae95cb1267@user/sm2n)
[11:51:38] *** Joins: dooba (35c4732bbc@2604:bf00:561:2000::9d)
[11:51:38] *** Joins: exec64 (5ff8a84e19@2604:bf00:561:2000::f9)
[11:51:38] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[11:51:38] *** Joins: klys (~mdasoh@show.op8.us)
[11:51:38] *** Joins: dme2 (~dme2@67.205.140.199)
[11:51:38] *** Joins: lemontree (~chat@user/lemontree)
[11:51:38] *** Joins: hoho (hoho@user/hoho)
[11:51:38] *** Joins: tdmm (1c9b9145fc@2604:bf00:561:2000::1c8)
[11:51:38] *** Joins: jda (~jadra@chai.0xbad.coffee)
[11:51:38] *** Joins: gdd (~gdd@129.199.146.230)
[11:51:38] *** Joins: knittl (~knittl@user/knittl)
[11:51:38] *** Joins: neunon (~neunon@user/neunon)
[11:51:38] *** Joins: baloona (~baloona@mail.baloona.de)
[11:51:38] *** Joins: Biolunar (biolunar@2a02:908:4b24:5000:ba27:ebff:fee0:75a)
[11:51:38] *** Joins: tafa (~tafa@user/tafa)
[11:51:38] *** Joins: DPA (~DPA@2a05:41c0:0:8104::a3c:10d)
[11:51:38] *** Joins: z14 (~alzee@user/alzee)
[11:51:38] *** Joins: MrC (Ben@mrbenc.net)
[11:51:38] *** Joins: tempora (~tempus@user/tempora)
[11:51:38] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[11:51:38] *** Joins: trn (jhj@sourcehut/user/trn)
[11:51:38] *** Joins: chiptuner (~bobby@user/chiptuner)
[11:51:38] *** Joins: fizzie (irc@selene.zem.fi)
[11:51:38] *** Joins: high_ground (~yes@user/high-ground/x-5722129)
[11:51:38] *** Joins: Emil (emil@emil.fi)
[11:51:38] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[11:51:38] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[11:51:38] *** Joins: markand (~markand@markand.fr)
[11:51:38] *** Joins: les (znc@user/les)
[11:51:38] *** Joins: ElementW (~tungsten@hoodie.elementw.net)
[11:51:38] *** Joins: CalimeroTeknik (~calimero@user/calimeroteknik)
[11:51:38] *** Joins: Khoyo (~khoyo@user/khoyo)
[11:51:38] *** Joins: FLHerne (flh@flherne.uk)
[11:51:38] *** Joins: zaratustra_ (~zaratustr@idlerpg/player/zaratustra)
[11:51:38] *** Joins: houze (~houze@user/houze)
[11:51:38] *** Joins: krzych (krzych@nroot.pl)
[11:51:38] *** Joins: int (~int@0x4.cx)
[11:51:38] *** Joins: LeoNerd (~leo@genoa.dictatorshipcake.co.uk)
[11:51:38] *** Joins: phryk (~totallyno@user/phryk)
[11:51:38] *** Joins: greeb (~greeb@blahblahblah.anime.horse)
[11:51:38] *** Joins: finsternis (~X@23.226.237.192)
[11:51:38] *** Joins: jancoow (~jancoow@user/jancoow)
[11:51:38] *** Joins: DarthGandalf (user@znc/developer/DarthGandalf)
[11:51:38] *** Joins: dustinm (~dustinm@static.38.6.217.95.clients.your-server.de)
[11:51:38] *** Joins: edk (edk@libera/staff/edk)
[11:51:38] *** Joins: deflected (~deflected@user/deflected)
[11:51:38] *** Joins: PaulePanter (~paul@mail.gw90.de)
[11:51:38] *** Joins: n1000 (~n1000@user/n1000)
[11:51:38] *** Joins: Freman (~Freman@flatus.fremnet.net)
[11:51:38] *** Joins: leosilva (~leosilva@canonical/leosilva)
[11:51:38] *** Joins: TallonRain (sid214799@user/tallonrain)
[11:51:38] *** Joins: sudden (~cat@user/sudden)
[11:51:38] *** Joins: trenka (~ykaliuta@user/trenka)
[11:51:38] *** Joins: nohit (sid334887@id-334887.tinside.irccloud.com)
[11:51:38] *** Joins: welt (~welt@willow.spiderden.net)
[11:51:38] *** Joins: kplant (~kplant@user/kplant)
[11:51:38] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[11:51:38] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[11:51:38] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[11:51:38] *** Joins: thiccdaddy (~o_O@user/thiccdaddy)
[11:51:38] *** Joins: APic (apic@apic.name)
[11:51:38] *** Joins: gonogo (~gonogo@167.88.62.87)
[11:51:38] *** Joins: DarkUranium (~DarkUrani@stdrand.com)
[11:51:38] *** Joins: skeels (21030cf582@2604:bf00:561:2000::237)
[11:51:38] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[11:51:38] *** Joins: DonRichie (~DonRichie@ricl.de)
[11:51:38] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[11:51:38] *** Joins: armin (~armin@unix.porn)
[11:51:38] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[11:51:38] *** Joins: OverCoder (~OverCoder@user/overcoder)
[11:51:38] *** Joins: Thymo (~Thymo@NASSP/developer/Thymo)
[11:51:38] *** Joins: daurn (~daurnimat@vultr.daurnimator.com)
[11:51:38] *** Joins: paulo (paulo@user/paulo/x-9032687)
[11:51:38] *** Joins: g1n (~g1n@user/g1n)
[11:51:38] *** Joins: laris (undead@37.221.209.36)
[11:51:38] *** Joins: gl (~x@pwn.lu)
[11:51:38] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[11:51:38] *** Joins: shachaf (~shachaf@user/shachaf)
[11:51:38] *** Joins: koisoke (xef4@epilogue.org)
[11:51:38] *** Joins: kline (~freedom0@libera/staff/kline)
[11:51:38] *** Joins: Stx (stx@libera/staff/stx)
[11:51:38] *** Joins: bone (~bone@user/mbo)
[11:51:38] *** Joins: reda_ (~reda@user/reda)
[11:51:38] *** Joins: con3 (~con3@143.198.53.32)
[11:51:38] *** Joins: IUSR (sid348938@id-348938.hampstead.irccloud.com)
[11:51:38] *** Joins: sa (sid1055@id-1055.tinside.irccloud.com)
[11:51:38] *** Joins: parazyd (~parazyd@devuan/developer/parazyd)
[11:51:38] *** Joins: WanderingGlitch (~Wandering@aha/hacker/wanderingglitch)
[11:51:38] *** Joins: clockworkgirl (sophie@user/clockworkgirl)
[11:51:38] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[11:51:38] *** Joins: strudl (~strudl@user/strudl)
[11:51:38] *** Joins: divine (~divine@2001:470:8247:1::31)
[11:51:38] *** Joins: Lyude (~lyudess@pool-98-118-105-43.bstnma.ftas.verizon.net)
[11:51:38] *** Joins: Zenton (~user@user/zenton)
[11:51:38] *** Joins: Ragnor (~Ragnor@user/ragnor)
[11:51:38] *** Joins: asm (~alexander@user/asm)
[11:51:38] *** Joins: Pent (sid313808@id-313808.lymington.irccloud.com)
[11:51:38] *** Joins: aosync (~aws@mx1.aosync.me)
[11:51:38] *** Joins: FragByte (~christian@user/fragbyte)
[11:51:38] *** Joins: englishm (sid6629@id-6629.tinside.irccloud.com)
[11:51:38] *** Joins: gshumway (~gshumway@user/gshumway)
[11:51:38] *** Joins: boreas (~Thunderbi@2a00:6020:b006:a900:d250:99ff:fe34:8fd2)
[11:51:38] *** Joins: retropikzel (9d1a4f9f46@2604:bf00:561:2000::ce)
[11:51:38] *** Joins: kristian84 (~asdf@ti0037a400-4119.bb.online.no)
[11:51:38] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[11:51:38] *** Joins: Epakai (Epakai@drislock.org)
[11:51:38] *** Joins: SrPx (sid108780@id-108780.uxbridge.irccloud.com)
[11:51:38] *** Joins: agander_m (sid407952@id-407952.tinside.irccloud.com)
[11:51:38] *** Joins: trinity (9df954e8f1@2604:bf00:561:2000::cd)
[11:51:38] *** Joins: Karyon (~Karyon@user/karyon)
[11:51:38] *** Joins: Ryozuki (~Ryozuki@user/ryozuki)
[11:51:38] *** Joins: noonien (~noonien@86.127.212.246)
[11:51:38] *** Joins: KevinX (~KevinX@c-71-200-222-150.hsd1.fl.comcast.net)
[11:51:38] *** Joins: leah2 (~leah@vuxu.org)
[11:51:38] *** Joins: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4)
[11:51:38] *** Joins: cebor (~cebor@user/cebor)
[11:51:38] *** Joins: geeknix (~pi@2001:e68:5432:307:f6b7:9845:4bce:2869)
[11:51:38] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[11:51:38] *** Joins: bgs (~bgs@upc.si.94.140.92.241.dc.cable.static.telemach.net)
[11:51:38] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[11:51:38] *** Joins: Posterdati (~posterdat@host-87-19-166-231.retail.telecomitalia.it)
[11:51:38] *** Joins: bkhl (~bkhl@user/bkhl)
[11:51:38] *** Joins: ozzz (~oz@46.49.41.80)
[11:51:38] *** Joins: Byteflux (~byte@byteflux.net)
[11:51:38] *** Joins: Furai (~Furai@furai.pl)
[11:51:45] *** Quits: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8) (Max SendQ exceeded)
[11:52:06] *** Quits: epony (~epony@user/epony) (Max SendQ exceeded)
[11:52:09] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[11:52:09] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:52:09] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[11:52:10] *** Joins: epony (~epony@user/epony)
[11:52:11] *** Joins: Starfoxxes (~Starfoxxe@2a02:8070:5390:d00:12bf:48ff:feb8:38c8)
[11:53:07] *** Joins: anon16_ (~anon16_@user/anon16)
[11:53:23] *** Quits: nate (NBishop@o.apocaleaps.com) (Ping timeout: 256 seconds)
[11:53:23] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Ping timeout: 256 seconds)
[11:53:46] *** Joins: nate (NBishop@o.apocaleaps.com)
[11:56:13] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[11:56:18] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[11:57:27] *** Joins: LucaTM (~LucaTM@user/lucatm)
[11:57:45] *** Quits: candide (~pbot3@about/c/bot/candide) (Remote host closed the connection)
[11:58:17] <voldial> I found https://unix.org/version4/ but it wants registration (membership?) to get the spec, I want to ref is what "shall" means in terms of POSIX, seems the "The Single UNIX Specification, Version 4" is a superset of POSIX?
[11:58:27] *** Joins: candide (~pbot3@about/c/bot/candide)
[11:58:27] *** Quits: ripsquid (~ripsquid@user/ripsquid) (Read error: Connection reset by peer)
[11:59:37] <voldial> I checked, there isnt a "man 1p POSIX"
[11:59:55] <sham1> I'd think that SHALL in POSIX means the same thing as in RFC2119
[12:00:41] *** Quits: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net) (Remote host closed the connection)
[12:00:52] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:01:03] *** Joins: MrMobius (~MrMobius@pool-108-31-243-125.washdc.fios.verizon.net)
[12:01:05] <voldial> sham1: I like it. https://datatracker.ietf.org/doc/html/rfc2119
[12:01:08] <mcf> https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap01.html#tag_01_05_05
[12:01:16] *** Joins: iomari891 (~iomari891@197.210.79.210)
[12:01:50] <voldial> mcf: there it is. "For an implementation that conforms to POSIX.1-2017, describes a feature or behavior that is mandatory. An application can rely on the existence of the feature or behavior."
[12:01:57] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:02:10] <voldial> does coreutils 9 purport to conform to POSIX.1-2017?
[12:02:10] <sham1> Yeah, so it's basically the same as in the RFC
[12:03:15] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[12:04:07] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl)
[12:04:13] *** Joins: ripsquid (~ripsquid@user/ripsquid)
[12:04:50] *** Quits: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b) (Quit: Leaving)
[12:11:31] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Ping timeout: 256 seconds)
[12:12:56] *** Quits: dodobrain (~dodobrain@user/dodobrain) (Ping timeout: 260 seconds)
[12:13:51] *** Joins: inomoz (~inomoz@176.59.115.245)
[12:14:14] *** Quits: AmR (~AmREiSa@41.238.31.212) (Quit: Konversation terminated!)
[12:14:34] *** Quits: inomoz (~inomoz@176.59.115.245) (Client Quit)
[12:18:25] *** Joins: shivesh (~shivesh@user/shivesh)
[12:18:28] *** Quits: Thedarkb1 (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[12:20:13] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 240 seconds)
[12:20:37] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Ping timeout: 240 seconds)
[12:20:45] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[12:20:56] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[12:22:43] *** Joins: Brewster_ (~Brewster@104.145.226.5)
[12:22:57] *** Quits: Brewster (~Brewster@104.145.226.5) (Ping timeout: 240 seconds)
[12:22:59] *** Brewster_ is now known as Brewster
[12:23:15] *** Joins: frost (~frost@user/frost)
[12:23:36] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[12:25:37] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:25:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[12:26:47] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:59ed:78f6:d0f0:e463) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:27:18] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[12:28:13] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[12:28:38] *** Quits: tejr (~tejr@user/tejr) (Remote host closed the connection)
[12:28:54] *** Joins: tejr (~tejr@user/tejr)
[12:31:30] *** Quits: ripsquid (~ripsquid@user/ripsquid) (Read error: Connection reset by peer)
[12:34:02] *** Quits: Freman (~Freman@flatus.fremnet.net) (Ping timeout: 240 seconds)
[12:34:21] *** Joins: Freman (~Freman@185.83.217.144)
[12:37:36] *** Joins: ripsquid (~ripsquid@user/ripsquid)
[12:37:50] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[12:38:08] *** Quits: freakazoid343 (~matt@2603-9000-cf03-86c3-11c4-68db-ad36-c833.inf6.spectrum.com) (Ping timeout: 252 seconds)
[12:38:17] *** Joins: System_Error (~SystemErr@user/systemerror)
[12:38:22] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[12:39:42] *** Joins: dyeplexer (~dyeplexer@user/dyeplexer)
[12:41:12] *** Joins: stonkey (~stonkey@user/stonkey)
[12:41:22] *** Joins: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61)
[12:41:42] *** Quits: iomari891 (~iomari891@197.210.79.210) (Ping timeout: 256 seconds)
[12:43:27] <markand> POSIX exec family of functions take char * const * argument and that means it's not fully const'ified, but I don't understand why in that case it does not modify the original variable: https://ideone.com/5qztYL
[12:43:44] *** Joins: iomari891 (~iomari891@105.112.138.38)
[12:44:26] <GyrosGeier> it's allowed to change the variable
[12:44:48] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[12:45:41] *** Joins: gproto23 (~gproto23@user/gproto23)
[12:45:57] <GyrosGeier> a wait
[12:46:08] <markand> yes but in that case I wonder where the 'x' is assigned to
[12:46:27] <GyrosGeier> your problem is a deprecated conversion
[12:46:40] <GyrosGeier> that allows assigning a string literal to a char *
[12:46:52] <GyrosGeier> string literals live in read-only memory
[12:47:00] <markand> ah yes that's right too
[12:47:03] <mcf> you never call f in that paste, but if you did, it's undefined behavior to modify a string literal
[12:47:18] <dave0> args is an array of strings, not a pointer to one string that you could potentially make point to a different string
[12:47:19] <markand> mcf, oh.. well time to take another coffee :P
[12:47:57] <dave0> char *const *args   means you can't make eg. the 2nd string point somewhere else
[12:48:10] <dave0> args[1] = "hello";   should error
[12:48:28] <markand> but why these function didn't take const char * const * instead? I mean exec should not have to modify anything I guess
[12:48:40] <dave0> why it is char * and not const char * idk.. probably backwards compatibility
[12:48:53] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[12:49:07] <dave0> markand: it might be compatibilty... similar to why   "test"   is a char * and not a const char *
[12:49:46] *** Joins: the_lanetly_052 (~the_lanet@185.30.88.55)
[12:49:53] <dave0> are we talking about main's 2nd parameter?
[12:49:53] <markand> also C does not allow implicit T** to `const T* const*` while to `T* const *` is fine
[12:50:45] <dave0> markand: yeah c and const can be annoying like that
[12:50:50] <markand> :(
[12:51:09] <markand> afaik C++ explicitly allows T** to const T* const * without a cast
[12:51:22] <markand> const all the things!
[12:51:31] <dave0> you might be able to fudge it with a temporary variable
[12:51:48] <GyrosGeier> hmm
[12:52:06] <GyrosGeier> T ** to T const *const * should be disallowed
[12:52:13] <markand> why?
[12:52:26] <dave0> i believe the c-faq addresses this question.. hang on
[12:52:34] *** Joins: eht (~eht@user/eht)
[12:52:42] <GyrosGeier> I dimly remember it allows stripping constness
[12:53:49] *** Quits: the (~eht@user/eht) (Ping timeout: 240 seconds)
[12:54:09] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[12:54:26] <dave0> http://www.c-faq.com/ansi/constmismatch.html
[12:54:41] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[12:55:09] <dave0> there is a silly example of const/pointers ... it's not logical, but it is correct simply because the c standard defines it like it does
[12:55:11] <markand> well const T** is another thing either :P
[12:55:40] <dave0> it is 'correct' by definition, but it is not logical imho
[12:55:41] <mcf> markand: there's a whole paragraph explaining the choice (even with a conversion table of the different type possibilities) in the rationale section of the POSIX exec page
[12:56:07] <mcf> https://pubs.opengroup.org/onlinepubs/9699919799/functions/exec.html#tag_16_111_08 "The statement about argv[] and envp[] ..."
[12:57:17] <mcf> it seems the reason they didn't use const char *const[] is because it'd break existing correct code
[12:57:39] <dave0> compatibility
[12:58:53] <dave0> note that gnu getopt permutes argv[] which is suspicious
[13:00:50] <sham1> Well that's technically more justified because argv[] is owned by the application at that point. It's not the same as what was given to exec by the prior application
[13:01:26] *** Joins: inomoz (~inomoz@176.59.115.245)
[13:02:26] <dave0> oh yes that sounds fair... exec would have to copy the array and strings
[13:02:42] <dave0> to the new process
[13:03:05] <dave0> very unix
[13:03:13] *** Joins: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b)
[13:03:17] *** Joins: loganlee (~Thunderbi@user/loganlee)
[13:04:16] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:04:29] *** Joins: arinov (~arinov@213.194.126.155)
[13:04:45] *** Quits: dyeplexer (~dyeplexer@user/dyeplexer) (Quit: Leaving)
[13:05:55] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[13:06:17] <sham1> Well the exec syscall, whatever it is, has the OS just copy the stuff. Indeed, it's even in the system v abi that you own the argument vector
[13:07:06] *** Joins: bebyx (~Thunderbi@user/bebyx)
[13:08:21] *** Quits: inomoz (~inomoz@176.59.115.245) (Quit: WeeChat 3.4)
[13:14:41] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[13:15:00] *** Quits: wingsorc (~wingsorc@user/wingsorc) (Quit: Leaving)
[13:16:02] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:16:02] *** Quits: tag (sid271787@id-271787.lymington.irccloud.com) (Ping timeout: 240 seconds)
[13:16:02] *** Quits: schna (sid484866@id-484866.helmsley.irccloud.com) (Ping timeout: 240 seconds)
[13:16:37] *** Quits: homura (uid398348@user/homura) (Ping timeout: 240 seconds)
[13:16:48] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[13:17:36] *** Joins: schna (sid484866@id-484866.helmsley.irccloud.com)
[13:17:36] *** Joins: tag (sid271787@id-271787.lymington.irccloud.com)
[13:17:38] *** Joins: homura (uid398348@user/homura)
[13:17:38] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[13:17:44] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[13:19:06] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[13:19:45] *** Joins: iomari891 (~iomari891@197.210.85.125)
[13:21:27] *** Quits: thesemicolons (~thesemico@user/thesemicolons) (Remote host closed the connection)
[13:22:30] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[13:24:35] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[13:26:55] *** Joins: inomoz (~inomoz@176.59.115.245)
[13:27:11] *** Joins: thesemicolons (~thesemico@user/thesemicolons)
[13:28:41] *** Joins: random-nick (~random-ni@87.116.181.150)
[13:29:42] *** Joins: plastico (~plastico@neomutt/plastico)
[13:33:31] *** Joins: seninha (~seninha@user/seninha)
[13:33:50] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[13:34:44] *** Quits: stonkey (~stonkey@user/stonkey) (Remote host closed the connection)
[13:38:45] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Remote host closed the connection)
[13:39:03] *** Joins: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com)
[13:46:32] *** Joins: Jenmin (~Jenmin@183.199.203.203)
[13:50:12] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:53:35] *** Joins: Burgundy (~yomon@82.76.72.88)
[13:53:56] *** Joins: unknow (~i.am@user/marlboro)
[13:54:48] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[14:03:21] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[14:04:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[14:04:57] *** Joins: Sidharthan (~Sidhartha@115.96.0.132)
[14:05:44] *** Quits: karakedi (~eAC53C340@user/karakedi) (Remote host closed the connection)
[14:06:08] *** Quits: Jenmin (~Jenmin@183.199.203.203) (Quit: WeeChat 3.3)
[14:06:42] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 256 seconds)
[14:07:22] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[14:08:04] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[14:08:34] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[14:09:57] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 256 seconds)
[14:10:48] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[14:12:56] *** Quits: chenqisu1 (~bhca7d@183.217.201.21) (Ping timeout: 256 seconds)
[14:20:01] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[14:20:52] *** Quits: Pentode (~Pentode@mobile-166-170-34-96.mycingular.net) (Ping timeout: 256 seconds)
[14:22:34] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 256 seconds)
[14:23:49] *** Quits: iomari891 (~iomari891@197.210.85.125) (Ping timeout: 240 seconds)
[14:25:19] *** Joins: iomari891 (~iomari891@197.210.78.79)
[14:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[14:29:37] *** Joins: the_lanetly_052_ (~the_lanet@194.135.153.29)
[14:29:45] *** Joins: cyphics (~cyphix@user/cyphics)
[14:30:13] *** Quits: csrf (~csrf@user/csrf) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[14:30:33] *** Joins: frost (~frost@user/frost)
[14:30:58] *** Joins: csrf (~csrf@user/csrf)
[14:31:35] *** Quits: kish` (~aqua@user/aqua) (Quit: Leaving)
[14:32:03] *** Quits: the_lanetly_052 (~the_lanet@185.30.88.55) (Ping timeout: 256 seconds)
[14:32:40] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[14:32:55] *** Joins: hasuTMK (~hasu@58x13x224x139.ap58.ftth.ucom.ne.jp)
[14:33:11] *** Quits: iomari891 (~iomari891@197.210.78.79) (Ping timeout: 256 seconds)
[14:33:21] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[14:33:51] *** Joins: iomari891 (~iomari891@197.210.84.204)
[14:34:21] *** Joins: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4)
[14:39:25] *** Quits: iomari891 (~iomari891@197.210.84.204) (Ping timeout: 256 seconds)
[14:42:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:43:40] *** Joins: cvmn (~caveman@gateway/tor-sasl/caveman)
[14:44:59] *** Joins: cursey (~cursey@user/cursey)
[14:46:03] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:46:25] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.153)
[14:50:38] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[14:50:40] *** Joins: gaude (~gaude@152-39-142-46.pool.kielnet.net)
[14:50:55] *** Joins: bindu (~bindu@user/bindu)
[14:51:25] *** Joins: koki (~koki@host-82-60-5-254.retail.telecomitalia.it)
[14:53:29] *** Joins: jaggz (~jaggz@user/jaggz)
[14:53:53] <jaggz> are these going to be equivalent if:  unsigned long mil;
[14:53:54] <jaggz> data[0] = (char)((mil & 0x00ff));
[14:53:54] <jaggz> data[0] = ((char *)(&mil))[0];
[14:54:09] *** Quits: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[14:54:13] *** Quits: carlavilla (~carlavill@2a0c:5a84:3105:5e00:221:6bff:fe3b:cee4) (Ping timeout: 240 seconds)
[14:54:21] *** Joins: carlavilla (~carlavill@188.26.219.17)
[14:55:05] *** kurahaupo is now known as rainbow_dragon
[14:55:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[14:55:51] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[14:56:53] <jaggz> I could do it as a struct
[14:56:57] <dave0> jaggz: depends on endianness
[14:57:05] <jaggz> just wanted to be specific about the byte order..
[14:58:19] <dave0> not a real good way of doing anything.. what's your code supposed to do?
[14:59:05] *** Joins: iomari891 (~iomari891@105.112.138.38)
[14:59:43] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:01:18] *** Quits: koki (~koki@host-82-60-5-254.retail.telecomitalia.it) (Quit: leaving)
[15:01:31] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[15:03:33] <rainbow_dragon> GyrosGeier: string literals *MAY* live in read-only memory. (IMO the C standard really needs to be updated to allow them to be const char[] rather than just char[], on an implementation-defined basis.)
[15:03:47] *** Quits: cassepipe (~cassepipe@2a01:cb18:3ec:6f00:840b:3dd6:9d5e:79f4) (Quit: Leaving)
[15:03:54] *** Quits: cvmn (~caveman@gateway/tor-sasl/caveman) (Ping timeout: 276 seconds)
[15:04:51] *** rainbow_dragon is now known as kurahaupo
[15:05:01] <sham1> Well modifying string literals that aren't assigned to char[] is undefined behaviour, so they might as well be put into RO memory whenever possible
[15:07:20] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[15:09:04] <kurahaupo> dave0: one way to think about it is that pointer values that differ in referential constancy can be assigned (in the direction non-const to const), but objects that are pointers with differing referential constancy are not convertible in either direction (unless as C++ allows, they are themselves const).
[15:09:16] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:09:25] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-022.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[15:09:29] *** Joins: anon16_ (~anon16_@user/anon16)
[15:10:09] <kurahaupo> sham1: a string literal can't be assigned to a char[] (and nor can anything else, since it's an array), but may be used to initialise one.
[15:11:15] <sham1> Well yes, that
[15:11:41] <sham1> Well modifying string literals that aren't used to initialize a char[] is undefined behaviour, so they might as well be put into RO memory whenever possible
[15:11:54] <sham1> And even then, you wouldn't be modifying the string literal but the char[]
[15:12:17] *** Quits: pucara (~i@host230.186-125-94.telecom.net.ar) (Ping timeout: 240 seconds)
[15:13:20] *** Joins: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru)
[15:13:48] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[15:13:55] <fizzie> That `noalias` discussion thread from the 80s that got discussed a couple of times a while back had "String literals have type  `const char []'" in the final "what to do" section. ;) Of course that didn't happen.
[15:14:17] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 240 seconds)
[15:15:05] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[15:18:27] *** Joins: stonkey (~stonkey@user/stonkey)
[15:19:20] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[15:19:25] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 240 seconds)
[15:22:28] *** Joins: Y4knotiS (~YaknotiS@cpc1-cmbg18-2-0-cust87.5-4.cable.virginm.net)
[15:23:04] *** Joins: iomari891 (~iomari891@105.112.138.38)
[15:24:06] <jaggz> dave0, it's preparing a long and an int for sending over a websocket
[15:25:40] <dave0> jaggz: do it with shifting and masking
[15:26:21] <sham1> Well what do you need the first octet of the number? Why not just deserialize it into either a big endian or little endian bytes with shifts and such, like dave0 said, and then put it into the Websocket packet body like an binary arraybuffer blob thing
[15:28:16] <sham1> Probably relevant: https://commandcenter.blogspot.com/2012/04/byte-order-fallacy.html
[15:29:26] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 256 seconds)
[15:30:01] <dave0> jaggz: void putint(unsigned char ptr[4], unsigned int x) { ptr[0] = x >> 24; ptr[1] = x >> 16; ptr[2] = x >> 8; ptr[3] = x >> 0; }; void putlong(unsigned char ptr[8], unsigned long x) { putint(ptr + 0, x >> 32); putint(ptr + 4, x >> 0); } unsigned char data[100]; putint(data + 0, 1234); putlong(data + 4, 4321); send(fd, data, 12);
[15:30:05] *** Joins: Iarfen (~quassel@181.43.58.247)
[15:30:08] <sham1> And hell, that's such a common pattern that it will get optimized and inlined
[15:30:16] <dave0> that's big endian
[15:31:38] <dave0> yeah i've seen it optimized to a mov
[15:32:24] <sham1> mov or a mov and a bswap, depending on if you're going to big endian, little endian or what have you
[15:32:36] <sham1> Similar stuff to how memcpys can be optimized away
[15:32:41] *** Quits: Maxdamantus (~Maxdamant@user/maxdamantus) (Ping timeout: 256 seconds)
[15:32:45] <sham1> Even when reading from unaligned addresses potentially
[15:32:53] <sham1> Because the compiler knows better than you do
[15:33:41] <DarkUranium> Yeah, I've done some testing on Godbold, and memcpy definitely becomes a mov on x86.
[15:33:45] <DarkUranium> (and modern ARM)
[15:33:49] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[15:34:11] <DarkUranium> In fact, the code was exactly the same between memcpy and *(int*)x = ...
[15:34:37] <DarkUranium> However, on architectures that actually trap unaligned reads (POWER is one, I think?), the results *are* different.
[15:34:53] <DarkUranium> Reads or writes.
[15:35:16] <sham1> Yeah, but of course *(int*)x would be undefined behaviour in some cases while doing it with memcpy is never invalid as far as alignment is concerned so you can just do that
[15:35:17] <DarkUranium> Or ones where it's simply UB.
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:33] *** Joins: supakeen (~user@python/site-packages/supakeen)
[15:37:55] <dave0> they really should standardized .. netbsd has https://man.netbsd.org/byteorder.9
[15:38:02] <markand> that's a shame C11 threads don't use errno constants, there is no thrd_strerror or anything like that :/
[15:38:41] *** Joins: agonhajdari (~textual@user/agonhajdari)
[15:38:59] <rcf> dave0: those are partially standardized in POSIX
[15:39:35] <dave0> rcf: cool, i find myself rolling my own too much
[15:39:50] <DarkUranium> sham1: Yeah, my point is rather that memcpy() is not only a portable way of doing unaligned reads/writes, but also a *fast* way. Exactly as fast as assignment on architectures that don't care. (minus the unavoidable memory bus/CPU-related cost)
[15:40:11] <DarkUranium> (i.e. the cost you'd pay even in asm)
[15:40:46] <sham1> Yeah
[15:40:59] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:11c4:68db:ad36:c833)
[15:43:13] *** Joins: Maxdamantus (~Maxdamant@user/maxdamantus)
[15:45:19] *** Joins: strajder (~strajder@user/strajder)
[15:51:07] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::12)
[15:59:40] *** Joins: nmi (~deflected@user/deflected)
[16:00:14] *** Quits: Lazenca (~lazenca@user/lazenca) (Remote host closed the connection)
[16:01:32] *** Quits: deflected (~deflected@user/deflected) (Ping timeout: 268 seconds)
[16:03:01] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:11c4:68db:ad36:c833) (Ping timeout: 240 seconds)
[16:05:17] *** Quits: hinata (~hinata@2409:4042:d98:f536:1c6:56da:21b9:6c5b) (Ping timeout: 240 seconds)
[16:05:51] *** Joins: hinata (~hinata@2409:4042:d98:f536:9cb:7c09:99ce:f13f)
[16:06:57] *** Joins: fe23 (~fe23@2409:8a34:464:4990:d0a0:6afc:175:8a23)
[16:08:45] *** Joins: constxd (~brad@142.134.38.68)
[16:12:55] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 256 seconds)
[16:13:30] *** Joins: brad_mssw (~bhouse@2601:344:4100:b490:19cc:e60:af95:bede)
[16:15:01] *** Joins: kit-ten (~u0_a391@2600:380:a435:d1e6:8fe6:1d70:7462:c689)
[16:16:06] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[16:16:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[16:17:57] *** Quits: kit_ten (~u0_a391@cpe-76-190-178-139.neo.res.rr.com) (Ping timeout: 240 seconds)
[16:20:29] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[16:20:37] *** Quits: fbiagent_ (~fbiagent@user/fbiagent) (Remote host closed the connection)
[16:23:00] *** Joins: fbiagent (~fbiagent@user/fbiagent)
[16:23:01] *** Quits: Iarfen (~quassel@181.43.58.247) (Read error: Connection reset by peer)
[16:24:05] *** Joins: dsdolzhenko (~textual@ip-213-127-111-129.ip.prioritytelecom.net)
[16:25:27] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[16:26:14] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[16:29:17] *** Quits: emanuele6 (~emanuele6@user/emanuele6) (Remote host closed the connection)
[16:29:21] *** Joins: arinov (~arinov@213.194.126.155)
[16:30:29] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[16:31:13] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:cb46:c04b:665a:c687)
[16:36:37] *** Quits: ironman (~ironman@2405:201:1010:b033:bad0:8910:44c9:da61) (Quit: Leaving)
[16:37:48] *** Joins: dogbert2 (~Bill@ip68-105-189-91.lv.lv.cox.net)
[16:39:20] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:39:41] <zwr> write endianness-independent programs
[16:40:22] *** Joins: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f)
[16:40:47] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:41:52] *** hasuTMK is now known as hasu
[16:43:05] *** Joins: Guest17 (~Guest17@wificampus-097061.grenet.fr)
[16:43:10] <sham1> Well endianness-free isn't always possible if you're implementing some protocol or other. But yeah, you want to make it so that
[16:43:25] <sham1> So that you don't need to care about your current target machine's endianness
[16:44:24] <rcf> With endian.h being standardized I say go with that approach
[16:45:06] <sham1> Eh, endian.h requires that things like uint{8,16,32,64}_t exist, which they mightn't
[16:45:08] <NRK[m]> does anyone even use c11 threads?
[16:45:17] <sham1> No. pthreads are just superior
[16:45:18] <rcf> sham1: on a networked machine they'd better.
[16:45:18] *** Quits: AdmiralBumbleBee (~AdmiralBu@47.203.174.105) (Quit: Sleep.)
[16:45:54] *** Joins: AdmiralBumbleBee (~AdmiralBu@47.203.174.105)
[16:46:12] <NRK[m]> yeah, idk what they were thinking. alot of c11 feels like a joke.
[16:46:20] <sham1> I like stdatomic.h
[16:46:24] <sham1> I like stdnoreturn.h
[16:46:35] <sham1> I also like the char16_t and char32_t
[16:46:57] <rcf> C11 threads are now approaching a portability advantage now that Microsoft (of all people) implement them
[16:47:21] <sham1> Well that's good
[16:47:23] <zwr> not sure how good it is but winpthreads has been a thing for a while
[16:47:29] <dave0> i saw __attribute__((noreturn)) save 2 instructions
[16:47:45] <NRK[m]> tbh i kinda liked VLA , bit of a portable alloca
[16:47:50] <sham1> Also of course _Thread_local is nice
[16:48:03] <NRK[m]> but now that c11 made them optional, it's not so portable anymore :(
[16:48:05] <zwr> yeah _Thread_local is legit, I don't even remember how to use pthreads keys
[16:48:23] *** Joins: acerbic (~acerbic@cs-xdata-50-86-55-135.cspire.com)
[16:48:45] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[16:49:12] <sham1> NRK[m]: at least C202x might just make dynamically sized arrays mandatory again, although of course maybe not VLAs proper, but still allocating them on the heap will be better than nothing
[16:49:15] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[16:49:37] <sham1> So `float (*mat)[n][m] = malloc(sizeof(*mat));` might become portable again
[16:50:02] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[16:52:07] <rcf> NRK[m]: they were made optional specifically because people (Microsoft) refused to implement them; they were never truly portable.
[16:52:32] <NRK[m]> i was talking in principle of course
[16:52:34] <sham1> Indeed. For the longest time MSVC didn't have fully compliant C99
[16:53:05] *** Quits: brad_mssw (~bhouse@2601:344:4100:b490:19cc:e60:af95:bede) (Quit: This computer has gone to sleep)
[16:53:40] <NRK[m]> msvc for C is a joke tbh.
[16:53:46] <rcf> Now it's fine
[16:54:03] <sham1> It's gotten better, which I'm thankful about
[16:54:08] <rcf> They are working toward standard compliance for once
[16:54:25] <rcf> Previously C was deprecated pending removal in a future release.
[16:54:25] <sham1> Rather than doing their own thing and claiming that to be the standard
[16:54:31] <NRK[m]> it's still lagging heavily behind clang and gcc from what ive seen
[16:54:43] <rcf> Which is why they now include clang as an option in VS
[16:55:01] <sham1> Well sure, but that's because MSVC is primarily a C++ compiler
[16:55:15] <sham1> C seems to be a bit of an afterthought
[16:55:28] <NRK[m]> yes, which is why i called it joke for C
[16:55:34] *** Joins: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net)
[16:55:41] <zwr> I'm sure it's a joke in general
[16:55:43] <NRK[m]> it's larping as a C compiler
[16:55:57] <Olfodr> many schools still use that to teach C
[16:55:57] <rcf> To be fair looking at win32 C does make one question whether moving on to another language isn't actually a good idea
[16:56:21] <dave0> you mean rust? ;-)
[16:56:35] <rcf> I hate rust with a passion these days, the async split is unforgivable.
[16:56:51] <sham1> I still remember when Visual Studio gave me a warning for `struct whatever *ptr = malloc(sizeof(*ptr));` not casting the result of the malloc even though I'm fairly sure that the compiler was in C mode. At least as set by cmake
[16:57:50] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.153) (Ping timeout: 256 seconds)
[16:59:08] *** Joins: agonhajdari (~textual@user/agonhajdari)
[16:59:53] <sham1> That was fun. I'm assuming it's not fixed, especially since one can indeed use clang with Visual Studio
[17:00:03] <sham1> s/not/now/
[17:01:28] *** Quits: hinata (~hinata@2409:4042:d98:f536:9cb:7c09:99ce:f13f) (Quit: Leaving)
[17:02:20] <sham1> Although if I had to target Windows specifically I'd probably rather go with some .NET language instead of trying to wrangle C to do things with WinAPI
[17:02:26] *** Quits: Guest17 (~Guest17@wificampus-097061.grenet.fr) (Quit: Client closed)
[17:03:35] *** Joins: lleo (~leo@31-161-144-55.mobile.kpn.net)
[17:05:52] *** Joins: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl)
[17:06:13] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 240 seconds)
[17:06:49] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[17:07:04] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:08:47] *** Joins: wovixo (~wovixo@128.104.205.49)
[17:10:35] *** Quits: phundrak (~phundrak@82-65-91-105.subs.proxad.net) (Ping timeout: 268 seconds)
[17:13:22] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[17:14:01] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[17:14:18] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.158)
[17:16:59] *** Joins: neverfindme (~hayden@158.123.160.43)
[17:20:27] *** Quits: lleo (~leo@31-161-144-55.mobile.kpn.net) (Quit: beyond time space in laws)
[17:20:47] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[17:21:50] *** Joins: phundrak (~phundrak@82-65-91-105.subs.proxad.net)
[17:22:34] *** Joins: gr33n7007h (~gr33n7007@user/gr33n7007h)
[17:23:12] *** Joins: karakedi (~eAC53C340@user/karakedi)
[17:24:49] *** Joins: pulse (~pulse@user/pulse)
[17:26:31] *** Quits: the_lanetly_052_ (~the_lanet@194.135.153.29) (Remote host closed the connection)
[17:30:26] *** Quits: neverfindme (~hayden@158.123.160.43) (Quit: Leaving)
[17:32:09] *** Quits: Phil-Work (~phil@62.3.100.20) ()
[17:32:48] *** Joins: Phil-Work (~phil@62.3.100.20)
[17:33:27] *** Joins: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e)
[17:33:47] <rcf> That is what I tend to do as well.
[17:33:47] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Remote host closed the connection)
[17:34:25] *** Guest7328 is now known as Tom^
[17:36:47] *** Joins: jusski (~user@78-63-85-123.static.zebra.lt)
[17:39:58] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:41:08] *** Joins: johnjaye (~pi@154.6.152.74)
[17:41:55] *** Joins: Sheilong (uid293653@id-293653.ilkley.irccloud.com)
[17:42:50] *** Quits: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e) (Ping timeout: 252 seconds)
[17:43:07] *** Joins: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e)
[17:44:56] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.29)
[17:45:17] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 256 seconds)
[17:45:39] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.29) (Max SendQ exceeded)
[17:46:13] *** Joins: the_lanetly_052 (~the_lanet@194.135.153.29)
[17:48:50] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 256 seconds)
[17:50:14] *** Joins: sathylias (~sysadmin@modemcable136.173-130-66.mc.videotron.ca)
[17:51:38] *** Joins: System_Error (~SystemErr@user/systemerror)
[17:52:53] *** Quits: xsperry (~xs@user/xsperry) (Remote host closed the connection)
[17:53:33] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[17:53:34] *** Joins: xsperry (~xs@user/xsperry)
[17:54:24] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:55:17] *** Quits: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e) (Ping timeout: 240 seconds)
[17:55:21] *** Quits: dsdolzhenko (~textual@ip-213-127-111-129.ip.prioritytelecom.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[17:56:58] *** Joins: WilliamLeara (~wdl@cpe-76-185-2-28.tx.res.rr.com)
[17:57:25] *** Joins: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e)
[17:58:51] *** Joins: arinov (~arinov@213.194.126.155)
[17:59:50] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[17:59:50] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[17:59:50] *** Joins: wroathe (~wroathe@user/wroathe)
[18:01:57] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[18:02:55] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[18:03:27] *** Joins: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[18:06:49] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:08:40] *** Quits: smallvil_ (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[18:10:11] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:12:13] *** Quits: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e) (Ping timeout: 240 seconds)
[18:12:51] *** Joins: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e)
[18:16:44] *** Quits: Terlisimo (~Terlisimo@outofband.ozna.net) (Quit: Connection reset by beer)
[18:17:57] *** Quits: Darkcoal (~user@2001:16a2:7a6c:b600:a849:5aeb:cabf:442e) (Ping timeout: 240 seconds)
[18:20:12] *** Joins: Darkcoal (~user@167.86.160.179)
[18:23:53] *** Joins: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[18:26:19] <sathylias> Good morning !
[18:26:44] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Quit: Thanks, see you later.)
[18:27:03] <NRK[m]> good morning, sir!
[18:27:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:28:32] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[18:31:42] *** Quits: hiovoltage (~hiovoltag@78.186.68.182) (Quit: Client closed)
[18:32:25] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[18:33:47] *** Joins: remavas (~Remavas@user/remavas)
[18:33:59] <g1n> hi sathylias and NRK[m]
[18:36:08] *** Joins: mrig (~mrig@user/mrig)
[18:36:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[18:36:25] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[18:37:29] *** Quits: cust (amaama@2607:f2c0:f00f:2500::3) (Remote host closed the connection)
[18:38:22] *** Quits: dsdolzhenko (~textual@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: Textual IRC Client: www.textualapp.com)
[18:38:46] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[18:39:29] *** Joins: Macuser (~Macuser@2600:1003:b466:f61b:650f:cc1c:784:d758)
[18:40:03] *** Quits: remavas (~Remavas@user/remavas) (Quit: WeeChat 2.8)
[18:41:39] *** Joins: WAR10CK (~WAR10CK@219.135.62.144)
[18:43:00] *** Joins: cust (amaama@2607:f2c0:f00f:2500::3)
[18:43:53] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 252 seconds)
[18:47:33] *** Joins: constxd_ (~brad@142.134.38.68)
[18:47:43] <phryk> How do I use typeof (or __typeoff_) in clang? user manual says __typeof__ is always recognized, but it just throws an error when i try to call it?
[18:48:11] *** Joins: Gabin64 (~Gabin@user/gabin)
[18:48:47] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[18:49:46] *** Quits: tech_exorcist (txrcst@user/tech-exorcist/x-0447479) (Remote host closed the connection)
[18:50:03] *** Joins: tech_exorcist (txrcst@user/tech-exorcist/x-0447479)
[18:50:17] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:50:28] *** Joins: kitsunenokenja (~kitsunech@68.91.220.96)
[18:50:37] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[18:50:57] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Client Quit)
[18:52:06] *** Joins: bebyx (~Thunderbi@user/bebyx)
[18:53:56] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[18:54:44] *** Joins: moog (~moog@107.126.53.103)
[18:57:13] *** Quits: jaggz (~jaggz@user/jaggz) (Quit: I saith goodbye)
[18:57:22] <sham1> phryk: what kind of error
[18:57:31] <sham1> Because yeah, __typeof__ should just work
[18:57:40] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15)
[18:57:40] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:35a5:a9fd:9975:e15) (Changing host)
[18:57:40] *** Joins: skapata (~Skapata@user/skapata)
[18:58:11] <phryk> sham1: "expected expression", i'm trying to printf the type of something.
[18:58:31] <sham1> Yeah... that's not happening
[18:58:48] *** Joins: emanuele6 (~emanuele6@user/emanuele6)
[18:58:56] <sham1> printf requires an expression, and the return of typeof is very much not an expression
[18:59:09] <sham1> Indeed, typeof just evaluates to the actual type
[18:59:35] <phryk> yeah, i've read that you get a type, but not a single explanation what a "type" is in this context.
[18:59:48] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:65a8:b0e3:f0de:5a94)
[19:00:00] <pragma-> It's a type that you can put anywhere a type goes.
[19:00:02] <sham1> It's the `int` in `int foo;`
[19:00:13] <pragma-> C doesn't have introspection.
[19:00:18] <sham1> So you could instead do something like `typeof(1 + 2) foo;`
[19:01:51] <phryk> Ah, so it's basically some sort of internal token (a long or whatever) the direct value of which i never come into contact with?
[19:02:28] <phryk> if c doesn't have introspection, how the hell do i debug things? o_O
[19:02:29] <sham1> Yeah. It's not usable at runtime
[19:02:36] <sham1> As to how you debug it, a debugger
[19:03:03] <phryk> can you recommend any with good UX?
[19:03:23] <sham1> gdb, which can have various frontends
[19:03:44] <pragma-> When compiled in debug mode, the compiler saves a copy of the symbol table in a separate file or a separate section of the binary. The debugger loads this symbol table. That's how you are able to inspect things within a debugger.
[19:03:45] *** Quits: Gabin64 (~Gabin@user/gabin) (Quit: Client closed)
[19:03:46] <phryk> yeah, it'd need a frontend. i tried using gdb once and i can't figure out a single thing with it. :F
[19:03:56] <phryk> s/it'd/I'd/
[19:04:54] <pragma-> gdb is pretty simple. backtrace, break, step, next, cont and x are pretty much the only commands you need to know.
[19:05:02] * pragma- shrugs.
[19:05:27] <sham1> I don't know of any frontends other than ddd, because I tend to just use either the emacs frontend (gud) or the gdb built-in curses TUI mode
[19:05:49] <phryk> sham1: how do I access that? when i tried it, I didn't get a TUI…
[19:06:36] <sham1> Should just be `tui enable`
[19:07:27] *** Quits: freakazoid333 (~matt@2603:9000:cf03:86c3:65a8:b0e3:f0de:5a94) (Read error: Connection reset by peer)
[19:07:37] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[19:08:07] *** Joins: freakazoid333 (~matt@2603:9000:cf03:86c3:65a8:b0e3:f0de:5a94)
[19:09:04] <phryk> Can I set breakpoints from within the code I want to debug?
[19:09:52] *** Quits: constxd_ (~brad@142.134.38.68) (Ping timeout: 256 seconds)
[19:10:09] <sham1> b
[19:10:15] <sham1> And then file and line number
[19:10:19] <pragma-> *within* the code, sham1
[19:10:25] <pragma-> e.g. raise(SIGTRAP)
[19:10:36] <sham1> Well within is ambiguous, but fair enough
[19:10:59] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:11:00] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:11:00] *** Joins: wroathe (~wroathe@user/wroathe)
[19:11:22] <phryk> pragma-: ah, and SIGTRAP will automatically be caught by gdb?
[19:11:30] <sham1> It should be
[19:11:52] <pragma-> you could abort() too
[19:12:35] *** Joins: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl)
[19:13:17] <sham1> But yeah. SIGTRAP probably just kills the process if it's not attached to a debugger
[19:14:08] <sham1> You could always assume that you're on x86 with GCC and do inline assembly, like `asm volatile("int $3");`
[19:14:24] <sham1> Although that will probably also abort your program
[19:14:36] <sham1> If outside of a debugger
[19:16:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[19:16:37] *** Quits: cherrry9 (~jan@dek164.neoplus.adsl.tpnet.pl) (Ping timeout: 240 seconds)
[19:18:17] *** Joins: cryptonector (~nico@24.28.108.183)
[19:18:43] <phryk> Mhh, normally run the program now dies with sigtrap, when run in the debugger it dies with a segfault…
[19:18:48] *** Joins: Dima[m] (~reddima10@2001:470:69fc:105::366)
[19:18:54] <phryk> is this… normal?
[19:21:19] *** don is now known as techsurvivor
[19:22:33] *** Joins: Thelma (~Thelma@120.22.36.167)
[19:23:55] <pragma-> gdb should say "Program received signal SIGTRAP" and dump you into a prompt where you can type `bt` to see the call stack and find out where and why it happened.
[19:24:30] *** Joins: nyah (~nyah@94.6.71.219)
[19:25:35] *** Joins: Terlisimo (~Terlisimo@outofband.ozna.net)
[19:25:58] <pragma-> you can use `up` and `down` to navigate the call stack and then `x` or whatever to inspect values.
[19:26:29] <sham1> Or just `frame` and the number of the frame you get from bt
[19:26:47] <pragma-> s/into a prompt/at a prompt/
[19:28:37] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[19:29:32] *** Quits: System_Error (~SystemErr@user/systemerror) (Remote host closed the connection)
[19:29:37] *** Parts: Thelma (~Thelma@120.22.36.167) ()
[19:30:23] *** Joins: System_Error (~SystemErr@user/systemerror)
[19:31:05] <phryk> ah, i think the arguments aren't passed the way i thought i just did 'gdb <normal program call>'…
[19:31:28] *** Quits: techsurvivor (~don@89.45.90.193) (Quit: WeeChat 3.3)
[19:32:10] <pragma-> Congrats. You found a bug in your argument handling. Now use gdb to explore the bug and see what you need to do to fix it. Chop, chop.
[19:32:38] <phryk> lol, i can't even figure out my own simple error.
[19:33:10] <sham1> Yeah, it turns out that you can't just go from `prog arg1 arg2 arg3` to `gdb prog arg1 arg2 arg3`. You need to do more work to pass arguments
[19:33:20] <phryk> :(
[19:33:32] <sham1> But yeah. You should now fix the bug that it at least closes gracefully
[19:33:59] <sham1> Anyway, here's a hint. When you run the program, the run command in GDB takes the arguments and passes them to the program
[19:34:58] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[19:34:58] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[19:34:58] *** Joins: wroathe (~wroathe@user/wroathe)
[19:35:35] <pragma-> Not that much more work is needed. Simply start the program with `gdb ./program` and then at the gdb prompt type `run arg1 arg2 arg3`
[19:36:08] <pragma-> Oh sham1 just said that while I was semi-afk.
[19:36:28] <phryk> Ah nice, got to the SIGTRAP
[19:37:24] *** Quits: gr33n7007h (~gr33n7007@user/gr33n7007h) (Quit: WeeChat 3.4)
[19:37:29] <phryk> now to look at variable types… that's the stack introspection stuff?
[19:39:21] <pragma-> Find a gdb tutorial and follow it. This is #c, not #teach-me-gdb.
[19:39:49] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[19:40:58] <NRK[m]> alternatively, you could master the craft of "carefully placed printf"
[19:41:33] <sham1> The carefully placed printf can't tell the variable's type
[19:41:35] <phryk> NRK[m]: that's where i was coming from, but that info isn't available, it seems.
[19:41:58] <fizzie> `gdb --args prog arg1 arg2 arg3` // hth
[19:42:09] <NRK[m]> how did u end up in a situation where you don't know the type of a variable
[19:42:18] <clarity> NRK[m]: c++
[19:42:20] <clarity> :D
[19:42:26] <NRK[m]> :)
[19:42:30] <pragma-> I tend to riddle my programs with logging systems tucked behind a user-togglable flag (rather than a compile-time debug macro) so I can just tell the user to turn on logging and then send me the log. So much easier to debug that way because the user can trigger the issue themselves without having to attempt to explain to me how to reproduce it.
[19:43:14] <sham1> Just make sure that you don't add any LDAP stuff to the logging code
[19:43:55] *** Joins: ckdCreations (~ckdCreati@147.55.133.137)
[19:44:10] <clarity> I'm trying to add a logging system to my program but it is time consuming..
[19:45:28] <johnjaye> pragma-: sounds like a lot of macros
[19:45:30] <pragma-> That's an awful lot of the word "to" in between words there at the end of my last message.
[19:46:01] <johnjaye> to log or not to log
[19:46:30] <clarity> Maybe I'll add a keylogger too, if I can get logging working
[19:47:03] *** Joins: icedtea (~paul@141.217.247.7)
[19:49:25] *** Quits: peacefulman (~paul@107-190-110-80.cpe.teksavvy.com) (Ping timeout: 240 seconds)
[19:53:50] *** Joins: phrosty (~phrosty@c-73-225-175-19.hsd1.wa.comcast.net)
[19:56:32] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[19:59:31] *** Quits: Sidharthan (~Sidhartha@115.96.0.132) (Quit: WeeChat 3.3)
[20:03:33] *** Quits: unknow (~i.am@user/marlboro) (Ping timeout: 256 seconds)
[20:06:14] *** Joins: pucara (~i@host230.186-125-94.telecom.net.ar)
[20:07:45] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[20:10:31] *** Joins: Everything (~Everythin@37.115.210.35)
[20:14:04] *** Joins: Figworm (~inoor@user/figworm)
[20:14:58] *** Joins: kuber (~kuber@97-126-25-4.tukw.qwest.net)
[20:16:03] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[20:16:37] *** Quits: Macuser (~Macuser@2600:1003:b466:f61b:650f:cc1c:784:d758) (Ping timeout: 240 seconds)
[20:16:37] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:16:54] *** Joins: cmbengue (~Thunderbi@207.191.249.160)
[20:16:56] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:17:06] *** Joins: mahmutov (~mahmutov@5.176.13.95)
[20:17:09] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[20:18:30] *** Quits: treble (~treble@user/treble) (Quit: WeeChat 3.4)
[20:18:33] *** Quits: cmbengue (~Thunderbi@207.191.249.160) (Client Quit)
[20:19:55] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[20:20:15] *** Quits: dave0 (~davezero@069.d.003.ncl.iprimus.net.au) (Quit: dave's not here)
[20:21:03] *** Joins: noise (~jkinross@h208-73-89-178.mdsnwi.tisp.static.tds.net)
[20:21:14] *** Joins: magla (~gelignite@55d483f5.access.ecotel.net)
[20:21:19] *** Joins: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net)
[20:21:48] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[20:21:56] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[20:28:12] *** Joins: badsektor (~badsektor@user/badsektor)
[20:30:09] *** Quits: badsektor (~badsektor@user/badsektor) (Read error: Connection reset by peer)
[20:30:31] *** Joins: badsektor (~badsektor@user/badsektor)
[20:32:01] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:32:17] *** Joins: marink (~marink@user/marink)
[20:33:05] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:33:49] *** Quits: dec0d3r (~dec0d3r@2001:8003:480a:e00:e07:e7c3:7efc:ed0f) (Quit: Leaving)
[20:36:58] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[20:37:22] *** Joins: agonhajdari (~textual@user/agonhajdari)
[20:37:31] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[20:37:48] *** Quits: fe23 (~fe23@2409:8a34:464:4990:d0a0:6afc:175:8a23) (Quit: fe23)
[20:40:05] *** Joins: AmR (~AmREiSa@41.238.31.212)
[20:41:01] *** Quits: kit-ten (~u0_a391@2600:380:a435:d1e6:8fe6:1d70:7462:c689) (Ping timeout: 240 seconds)
[20:41:07] *** Joins: nicholaus04 (~nicholaus@2607:fb90:e589:e2b9:d5ee:56de:0:7ca)
[20:41:59] *** Joins: treble (~treble@75.76.29.142)
[20:41:59] *** Quits: treble (~treble@75.76.29.142) (Changing host)
[20:41:59] *** Joins: treble (~treble@user/treble)
[20:42:32] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[20:47:16] *** Quits: noise (~jkinross@h208-73-89-178.mdsnwi.tisp.static.tds.net) (Quit: Konversation terminated!)
[20:48:40] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:52:43] *** Joins: unknow (~i.am@user/marlboro)
[20:52:54] *** unknow is now known as jhms
[20:54:51] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving...)
[20:56:02] *** Joins: kish` (~aqua@user/aqua)
[20:57:11] *** Joins: pgib (~textual@173.38.117.74)
[20:59:03] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-ec56-c560-562a-bc51.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:59:57] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[20:59:57] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Read error: Connection reset by peer)
[21:00:15] *** Joins: kit_ten (~u0_a391@64.85.173.130)
[21:00:37] *** Quits: trafficjam (~qubes@119.17.42.59) (Ping timeout: 240 seconds)
[21:01:19] *** Joins: Thedarkb1 (~Thedarkb@cpc84095-pool16-2-0-cust190.15-1.cable.virginm.net)
[21:02:34] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[21:04:18] *** Quits: marink (~marink@user/marink) (Quit: Leaving)
[21:05:53] *** Quits: HisShadow (~HisShadow@user/hisshadow) (Ping timeout: 256 seconds)
[21:06:13] *** Quits: oxfuxxx (~oxfuxxx@160.238.38.158) (Ping timeout: 240 seconds)
[21:06:33] *** Joins: HisShadow (~HisShadow@user/hisshadow)
[21:07:05] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:07:25] *** Quits: treble (~treble@user/treble) (Ping timeout: 240 seconds)
[21:07:34] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[21:07:48] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[21:10:17] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[21:13:49] *** Quits: stonkey (~stonkey@user/stonkey) (Ping timeout: 256 seconds)
[21:14:09] *** Quits: kuber (~kuber@97-126-25-4.tukw.qwest.net) (Quit: leaving)
[21:14:57] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[21:18:00] *** Joins: oxfuxxx (~oxfuxxx@160.238.38.154)
[21:21:49] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[21:22:45] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[21:22:54] *** Quits: Darkcoal (~user@167.86.160.179) (Read error: Connection reset by peer)
[21:23:42] *** Joins: xcm_ (~xcm@user/xcm)
[21:26:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896)
[21:32:53] *** Quits: agonhajdari (~textual@user/agonhajdari) (Quit: My Mac Mini has gone to sleep. ZZZzzz…)
[21:37:14] *** Parts: Dima[m] (~reddima10@2001:470:69fc:105::366) ()
[21:38:45] *** Quits: boB_K7IQ (~boB_K7IQ@c-24-19-3-104.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[21:38:54] *** Quits: the_lanetly_052 (~the_lanet@194.135.153.29) (Ping timeout: 256 seconds)
[21:40:51] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc)
[21:41:17] *** Quits: sebbu (~sebbu@user/sebbu) (Ping timeout: 240 seconds)
[21:42:11] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d101:a511:5b6b:4afc) (Client Quit)
[21:43:26] *** Joins: MrFantastik (~f@2607:f598:bbda:20:f5b3:32dc:f491:b69e)
[21:44:14] *** Joins: seninha (~seninha@user/seninha)
[21:44:22] *** Joins: vysn (~vysn@user/vysn)
[21:46:08] *** Joins: Akuli (~Akuli@87-94-108-211.bb.dnainternet.fi)
[21:47:13] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:48:50] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[21:49:01] *** Joins: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf)
[21:51:44] *** Quits: brad_mssw (~bhouse@c-76-106-206-149.hsd1.fl.comcast.net) (Quit: Leaving)
[21:53:51] *** Quits: MajorBiscuit (~MajorBisc@c-001-032-008.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.3)
[21:54:28] *** Quits: Mentor (~Ionut@92.86.217.127) (Quit: Leaving)
[21:55:29] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:55:41] *** Joins: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68)
[21:57:29] *** Joins: gtlsgamr (~gtlsgamr@user/gtlsgamr)
[22:01:56] *** Joins: badsektor (~badsektor@user/badsektor)
[22:02:41] *** Joins: Richard_Cavell (uid165693@id-165693.ilkley.irccloud.com)
[22:07:01] *** Quits: LordJohn (~lordjohn@l37-192-203-250.novotelecom.ru) (Read error: Connection reset by peer)
[22:08:56] *** Quits: anon16_ (~anon16_@user/anon16) (Ping timeout: 256 seconds)
[22:10:10] *** Joins: ttpp (~tttppp@37.115.45.192)
[22:13:37] *** Quits: pgib (~textual@173.38.117.74) (Ping timeout: 240 seconds)
[22:13:41] <pony> what's with those weird C++ initialisers
[22:13:43] <pony> { and }
[22:14:01] <floatcomplex> ?
[22:14:09] <pony> idk
[22:14:13] <pony> been a while since I looked at it
[22:14:16] <floatcomplex> in what context
[22:14:37] *** Joins: pgib (~textual@173.38.117.77)
[22:14:48] <floatcomplex> i use curly braces all the time in c code, i don't write c++
[22:15:30] *** Joins: manjaroi3 (~manjaro-i@125.131.131.26)
[22:16:35] *** Joins: echoSMILE (uid504326@user/echosmile)
[22:16:37] *** Quits: vysn (~vysn@user/vysn) (Ping timeout: 240 seconds)
[22:17:21] *** Joins: steve__ (~steve@ool-182c2b80.dyn.optonline.net)
[22:18:05] *** Quits: motherfsck (~motherfsc@user/motherfsck) (Quit: quit)
[22:18:17] *** Quits: johnjaye (~pi@154.6.152.74) (Ping timeout: 240 seconds)
[22:18:26] *** Joins: motherfsck (~motherfsc@user/motherfsck)
[22:24:44] *** Joins: p0g0_ (~p0g0@216.211.153.38)
[22:24:51] *** Joins: constxd_ (~brad@142.134.38.68)
[22:25:49] *** Quits: p0g0 (~p0g0@216.211.153.38) (Ping timeout: 240 seconds)
[22:27:13] *** Joins: vicfred (~vicfred@user/vicfred)
[22:27:21] *** Quits: constxd_ (~brad@142.134.38.68) (Client Quit)
[22:28:22] *** Joins: mahmutov_ (~mahmutov@5.176.2.142)
[22:28:57] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a98c:b4fd:85b3:2536) (Ping timeout: 240 seconds)
[22:29:11] *** Quits: mahmutov (~mahmutov@5.176.13.95) (Ping timeout: 256 seconds)
[22:30:03] *** Joins: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273)
[22:30:50] *** Joins: Betal (~Betal@user/betal)
[22:31:22] *** Joins: hanzo (uid532183@user/hanzo)
[22:33:43] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[22:34:34] *** Quits: dsdolzhenko (~dsdolzhen@2a02:a210:fa3:b980:3124:c023:5923:acaf) (Quit: Textual IRC Client: www.textualapp.com)
[22:37:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:ab6a:ec40:1b75:3ae7) (Ping timeout: 240 seconds)
[22:37:20] <sokan> https://bpa.st/ZQPQ <--- can someone please comment on this codE?
[22:37:28] <sokan> Is it me or is it ugly? :P
[22:38:55] *** Joins: kurahaupo_ (~kurahaupo@115.69.27.211)
[22:40:04] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[22:41:43] *** Joins: FluffyMask (~masque@user/fluffymask)
[22:42:28] *** Joins: constxd_ (~brad@142.134.38.68)
[22:43:16] <floatcomplex> it is not merely ugly
[22:43:40] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com)
[22:43:56] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-5869-268c-a8ec-cf14.res6.spectrum.com) (Client Quit)
[22:45:05] *** Quits: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com) (Quit: Haxxa flies away.)
[22:47:08] *** Joins: Haxxa (~Haxxa@89nnjg0xckz9ggn6r5xm.ip6.superloop.com)
[22:47:15] <sokan> lol
[22:48:24] *** Quits: ttpp (~tttppp@37.115.45.192) (Quit: Leaving)
[22:48:26] <sokan> the idea is that there are some flat files that have lines that begin with "ATOM". We want to create a new file and write all the lines that begin with ATOM (including ATOM) there.
[22:50:51] *** Joins: stonkey (~stonkey@user/stonkey)
[22:52:38] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[22:54:40] *** Joins: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net)
[22:57:23] *** Joins: Burger (~textual@user/burger)
[22:57:28] <fizzie> `while (!feof(...))` is always a bad sign. Though in this particular context I guess it doesn't have any disastrous consequences.
[22:58:23] <sokan> It's not possible that isn't a more easy way to do what I mentioned :\
[22:58:31] <sokan> I'll give it a go at some point
[22:58:36] <fizzie> You do have a nice infinite loop if an "ATOM..." line ends without a terminating newline.
[23:00:32] *** Quits: g1n (~g1n@user/g1n) (Ping timeout: 240 seconds)
[23:01:00] *** Quits: System_Error (~SystemErr@user/systemerror) (Ping timeout: 276 seconds)
[23:01:28] *** Quits: robyn (~robyndrak@user/robyndrake) (Ping timeout: 268 seconds)
[23:02:00] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Read error: Connection reset by peer)
[23:02:31] *** Joins: AmR| (~AmREiSa@156.207.253.69)
[23:02:37] *** Quits: AmR (~AmREiSa@41.238.31.212) (Ping timeout: 256 seconds)
[23:02:52] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:02:52] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:02:52] *** Joins: wroathe (~wroathe@user/wroathe)
[23:03:23] <sokan> This is our professor's code XD
[23:05:16] <pony> rip
[23:05:43] <floatcomplex> the most important thing you need to know about professors is almost of none of them write production code
[23:06:29] <pony> I like how there's a variable called pOUT and the code makes me pout
[23:06:45] <floatcomplex> there's a big difference between knowing, in the abstract, that you should add some error checking, and having suffered through the process of debugging something that had insufficient error checking
[23:07:19] <floatcomplex> "but this has never failed before" no, you haven't SEEN it fail before, because you weren't looking
[23:07:58] *** Joins: kit-ten (~u0_a391@2600:380:a435:d1e6:f902:eb98:9c0d:5b2e)
[23:08:04] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[23:08:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:08:28] <pony> that reasoning has literally made people die, yeah
[23:10:33] *** Quits: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net) (Ping timeout: 256 seconds)
[23:11:38] *** Joins: dsrt^ (~dsrt@wsip-98-188-246-242.mc.at.cox.net)
[23:12:15] *** Quits: kit_ten (~u0_a391@64.85.173.130) (Ping timeout: 256 seconds)
[23:12:41] *** Joins: boB_K7IQ (~boB_K7IQ@152.44.147.180)
[23:12:51] *** Joins: anon16_ (~anon16_@user/anon16)
[23:14:22] *** Joins: zwr (~zwr@2804:d45:b966:fb00:4478:5288:66d4:ebc1)
[23:15:03] *** Quits: cuppajoe (~joe@ip70-171-93-122.no.no.cox.net) (Quit: WeeChat 3.3)
[23:16:22] *** Quits: badsektor (~badsektor@user/badsektor) (Quit: Leaving)
[23:18:03] *** Joins: rindolf (~shlomif@inkscape/dev/shlomif)
[23:23:10] *** Quits: kurahaupo_ (~kurahaupo@115.69.27.211) (Ping timeout: 256 seconds)
[23:26:13] <sokan> :\
[23:26:30] *** Quits: rindolf (~shlomif@inkscape/dev/shlomif) (Quit: Shlomi Fish ("Rindolf") has left the server. “Chuck Norris was challenged to fight the world, and accepted. He bet on himself, won, and collected the bet money.”)
[23:27:36] *** Quits: WAR10CK (~WAR10CK@219.135.62.144) (Quit: Leaving)
[23:29:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:55d4:c070:9ca0:8896) (Ping timeout: 240 seconds)
[23:30:33] <gtlsgamr> [00:37] sokan: https://bpa.st/ZQPQ <--- can someone please comment on this codE? <--- I came here to learn and get better at C and even I can see that it is ugly and will probably fail at some case
[23:31:57] *** Quits: jusski (~user@78-63-85-123.static.zebra.lt) (Ping timeout: 240 seconds)
[23:32:04] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:32:05] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:32:05] *** Joins: wroathe (~wroathe@user/wroathe)
[23:35:11] *** Quits: lunix00 (~lunix00@2804:14c:6321:900d:ecd5:589a:62ad:6273) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:35:28] <strajder> sokan: that is obviously not production code but an example; there is no point in commenting it
[23:36:08] <strajder> if you have any questions or concerns about it, ask your teacher
[23:37:05] *** Quits: jhms (~i.am@user/marlboro) (Quit: I come down here for a fat woman and that's what I'm havin.)
[23:39:34] *** Joins: sebbu (~sebbu@user/sebbu)
[23:40:35] *** Quits: raym (~raym@user/raym) (Ping timeout: 256 seconds)
[23:41:40] <sokan> he told us that if we can find some other way to do what he does we're free to try.
[23:42:22] <sokan> none of what we do is production code. We're just learning the ropes I think
[23:43:10] *** Joins: dan_pena (~dan_pena@86.228.71.37.rev.sfr.net)
[23:43:34] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 256 seconds)
[23:43:54] *** Joins: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com)
[23:43:55] *** Quits: wroathe (~wroathe@206-55-188-8.fttp.usinternet.com) (Changing host)
[23:43:55] *** Joins: wroathe (~wroathe@user/wroathe)
[23:44:24] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:46:53] *** Joins: mihry (~mihriban@88.241.168.28)
[23:48:57] *** Joins: vysn (~vysn@user/vysn)
[23:52:03] <fizzie> The "obvious" (if maybe slightly easier to mess up) way of avoiding all that nesting would be to do something along the lines of https://ideone.com/nQWeUt instead.
[23:52:17] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 240 seconds)
[23:53:22] *** Quits: Figworm (~inoor@user/figworm) (Quit: Figworm)
[23:53:27] <fizzie> (Or just read entire lines with fgets, which makes it trivial. Isn't PDB one of those punch-cardy formats with a fixed line length limit anyway?)
[23:55:27] <floatcomplex> sokan: "you're free to try" should be interpreted as a prompt, not an admonition
[23:55:32] <floatcomplex> if you do not try, you fail
[23:55:51] *** Quits: shivesh (~shivesh@user/shivesh) (Quit: leaving)
[23:56:23] <floatcomplex> (do not apply "if you do not try, you fail" to "roll your own crypto")
[23:56:45] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4)
[23:58:32] <sham1> Oh one should certainly try for leaning's sake. But not to actually do secure communications unless they know what they're doing, in which case they probably wouldn't
[23:59:26] *** Quits: rgrinberg (~textual@2806:265:5401:8cd:18b:fa2e:c948:1d68) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:59:32] <NRK[m]> wtf did i read
[23:59:38] <floatcomplex> even if one does know what they are doing, correctly implementing crypto is a discipline that is kind of a zero-sum game with being able to write other kinds of code
[23:59:42] <NRK[m]> it reads like some amateur's code
[23:59:51] <floatcomplex> most people should not write crypto code
