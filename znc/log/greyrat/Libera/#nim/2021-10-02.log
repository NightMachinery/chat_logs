[00:12:53] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 265 seconds)
[00:13:31] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[00:19:48] <FromDiscord> <dom96> anyone have any strong feelings about choosenim losing support for tar.xz?
[00:20:32] *** pch__ is now known as kinkinkijkin
[00:21:54] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[00:26:49] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:30:57] <FromDiscord> <leorize> nightlies produce tar.xz
[00:34:35] <FromDiscord> <treeform> In reply to @dom96 "anyone have any strong": no
[00:36:30] <FromDiscord> <acek7> @treeform are you the heaviest nim user?
[00:38:09] <FromDiscord> <Yardanico> the heaviest nim user are status probably
[00:38:18] <FromDiscord> <dom96> In reply to @leorize "nightlies produce tar.xz": really? https://api.github.com/repos/nim-lang/nightlies/tarball/latest-version-1-6 for example gives a tar.gz
[00:38:45] <FromDiscord> <dom96> In reply to @acek7 "<@!107140179025735680> are you the": how do you define "heaviest"?
[00:38:51] <FromDiscord> <Gumber> the one that weighs the most
[00:39:02] <FromDiscord> <Yardanico> he probably meant "biggest" :P
[00:39:02] <FromDiscord> <Gumber> fat shaming going on up in here
[00:39:12] <FromDiscord> <Yardanico> @acek7 but yeah, I'm pretty sure it's status
[00:39:13] <FromDiscord> <acek7> im not sure how to define it lol
[00:39:20] <FromDiscord> <acek7> who the heck is that
[00:39:26] <FromDiscord> <Yardanico> status.im
[00:39:26] <FromDiscord> <Gumber> status.im
[00:39:28] <FromDiscord> <Yardanico> (edit) "status.im" => "https://status.im"
[00:39:30] <FromDiscord> <Gumber> they're implementing Eth 2.0 in nim
[00:39:37] <FromDiscord> <Gumber> or the did implement it I dunno
[00:39:43] <FromDiscord> <Gumber> (edit) "the" => "they"
[00:39:44] <FromDiscord> <Yardanico> @Gumber that was meant to contain an embed but okay :P
[00:39:47] <FromDiscord> <Gumber> I know next to zero about crypto
[00:39:52] <FromDiscord> <Gumber> it wasn't me!!!!!
[00:39:55] <FromDiscord> <Yardanico> huh
[00:40:00] <FromDiscord> <Gumber> I didn't remove the embed
[00:40:02] <FromDiscord> <dom96> 👀
[00:40:07] <FromDiscord> <Yardanico> 🤔
[00:40:07] <FromDiscord> <Gumber> lol
[00:40:17] <FromDiscord> <dom96> Sorry, I hate embeds
[00:40:19] <FromDiscord> <Yardanico> yeah sure it's not a big deal
[00:40:21] <FromDiscord> <dom96> it's a natural reaction for me at this point
[00:40:23] <FromDiscord> <Gumber> man I love it when people do shitty things in shared codebases
[00:40:27] <FromDiscord> <Gumber> like add implicit logic into a db insert
[00:40:31] <FromDiscord> <acek7> what other big software is made with nim
[00:40:34] <FromDiscord> <Gumber> so it's no longer just a db insert
[00:40:37] <FromDiscord> <Gumber> games / game engines
[00:40:45] <FromDiscord> <Gumber> operating system kernels
[00:40:50] <FromDiscord> <Gumber> spaceships
[00:40:51] <FromDiscord> <dom96> In reply to @acek7 "what other big software": the nim compiler 🙂
[00:40:53] <FromDiscord> <acek7> links?
[00:40:54] <FromDiscord> <Yardanico> In reply to @acek7 "what other big software": there's a small list in https://github.com/nim-lang/Nim/wiki/Organizations-using-Nim
[00:40:59] <FromDiscord> <Yardanico> of organizations/specific software
[00:41:00] <FromDiscord> <Gumber> I dunno - you can do anything with Nim you can do with C
[00:41:02] <FromDiscord> <Yardanico> please extend it
[00:41:03] <FromDiscord> <Gumber> or assembly language
[00:41:06] <FromDiscord> <Yardanico> (edit) "please extend it ... " 03added "if you know anyone using nim"
[00:41:33] <FromDiscord> <Gumber> use cases are pretty much limitless
[00:41:35] <FromDiscord> <Yardanico> need to add Goodboy Galaxy there, I brought it up to exelotl, guess he didn't have time
[00:41:42] <FromDiscord> <Gumber> oh yeah - that's a good one to add
[00:42:46] <nrds> <06Prestige99> I want to ask what he's using to deploy to all those platforms (I've only looked into the gba side)
[00:42:53] <FromDiscord> <acek7> wait nim can do anything C or Assembly can do?
[00:43:07] <FromDiscord> <Yardanico> obviously
[00:43:14] <FromDiscord> <Yardanico> as (almost) any other native language
[00:43:20] <FromDiscord> <dom96> so can Python, just shell out to an assembly program 😉
[00:43:37] <FromDiscord> <Yardanico> @Gumber quick question about the machinery - as I understand, everything must be a plugin, even gameplay code?
[00:43:50] <FromDiscord> <acek7> and here i was thinking nim was special haha
[00:44:04] <FromDiscord> <Gumber> In reply to @Yardanico "<@!204328759715692544> quick question about": correct
[00:44:12] <FromDiscord> <Gumber> if you want to code gameplay code
[00:44:18] <FromDiscord> <Gumber> you could also just use creation graphs
[00:44:22] <FromDiscord> <Yardanico> hm, you can compile them in statically, right?
[00:44:26] <FromDiscord> <Gumber> yup!
[00:44:30] <FromDiscord> <Yardanico> so there's a single binary without tons of .dlls
[00:44:40] <FromDiscord> <Gumber> I think if you want to hot reload you have to dyamically link for obvious reasons
[00:44:45] <FromDiscord> <Gumber> (edit) "dyamically" => "dynamically"
[00:45:00] <FromDiscord> <Gumber> but when you actually build a release version or distributable everything gets linked in statically
[00:45:05] <FromDiscord> <Gumber> very similar to how my engine works for my project
[00:45:21] <FromDiscord> <acek7> are .dlls a nuisance ?
[00:45:30] <FromDiscord> <Gumber> for distributing software yes
[00:45:47] <FromDiscord> <Gumber> when you statically link the library is included in the final executable
[00:45:56] <FromDiscord> <Elegantbeef> Jeez asking a person to step on a scale is a lot of work
[00:45:57] <FromDiscord> <Gumber> so you pay in terms of increased file size for your distribuitable
[00:46:06] <FromDiscord> <Gumber> (edit) "distribuitable" => "distributable"
[00:46:25] <FromDiscord> <Gumber> if you dyamically link you load symbols from a dynamic library at runtime
[00:46:35] <FromDiscord> <Gumber> which has a performance cost and also requires those libraries to be present on the users sytem
[00:46:58] <FromDiscord> <Gumber> and they have to be on the linker's path so that they can be found at runtime for symbol resolution
[00:47:17] <FromDiscord> <Gumber> but with dynamic loading of symbols you can achieve hot reloading
[00:47:36] <FromDiscord> <Gumber> although you still have to think about state - which is simple enough to deal with if you know what you're doing
[00:47:40] <FromDiscord> <Gumber> (edit) "although you still have to think about state ... -" 03added "across reloads"
[00:48:17] <FromDiscord> <Gumber> (edit) "if you dyamically link you load symbols from a dynamic library ... at" 03added "(or shared library - they're different names for the same thing)"
[00:48:24] <FromDiscord> <Gumber> (edit) "dyamically" => "dynamically"
[00:49:43] <FromDiscord> <Elegantbeef> Well you can do inlined asm and it compiles to C so...
[00:49:55] <FromDiscord> <ceramicskate0> got Microsoft signed only process mitigation policy working from linux compile working thanks @enthus1ast and @haxscramper
[00:49:56] <FromDiscord> <Elegantbeef> If you have a C compiler for your platform Nim can do it
[00:50:11] <FromDiscord> <Elegantbeef> I guess more C compiler and nim outputs compatible nim
[00:51:28] <FromDiscord> <ceramicskate0> (edit) 04removed "working"
[00:51:46] <FromDiscord> <acek7> Does a larger nim project create any additional files or is it just one.exe no matter the size?
[00:52:48] <FromDiscord> <Gumber> it depends how you structure your project
[00:52:50] <FromDiscord> <Elegantbeef> It's not that big of a deal though imo
[00:52:53] *** Joins: pch_ (~pch@66.49.131.33)
[00:53:05] <FromDiscord> <Gumber> Nim just outputs C or C++ or JS or Obj-C
[00:53:10] <FromDiscord> <Gumber> and then invokes whatever compiler toolchain you specify
[00:53:33] <FromDiscord> <acek7> I was just curious about what it would be like building something for say iPhone or MacOS or Linux
[00:53:54] <FromDiscord> <Gumber> I mean fir macOS or Linux it's pretty straightforward
[00:53:58] <FromDiscord> <Gumber> (edit) "straightforward" => "straight forward"
[00:54:03] <FromDiscord> <Gumber> and really isn't any different than building on Windows
[00:54:22] <FromDiscord> <Gumber> you just target a different os and maybe cpu arch depending on which mac you're talking about
[00:54:30] <FromDiscord> <Gumber> or if you're on like an ARM linux laptop or something
[00:54:42] <FromDiscord> <Gumber> or RISC-V or whatever.......
[00:54:54] <FromDiscord> <Gumber> iPhone is a bit trickier but doable
[00:55:03] <FromDiscord> <Gumber> (edit) "iPhone" => "iOS"
[00:55:23] *** Quits: kinkinkijkin (~pch@66.49.131.33) (Ping timeout: 252 seconds)
[00:55:23] <FromDiscord> <Gumber> this is assuming you're compiling for the same operating system you're compiling on
[00:55:33] <FromDiscord> <Gumber> if you want to cross compile, you need to use a cross compile toolchain
[00:55:35] *** Joins: smvg (~smvg@85.218.163.88)
[00:55:37] <FromDiscord> <Gumber> or something like zigcc
[00:55:38] <FromDiscord> <Gumber> or docker
[00:55:48] <FromDiscord> <Gumber> or - I dunno either way, no matter what, you need to cross compile 🙂
[00:55:59] <FromDiscord> <Gumber> if you're building on a different os / cpu arch then you're targetting
[00:56:06] <FromDiscord> <Gumber> but this is true of any native software
[00:56:09] <FromDiscord> <Gumber> Nim isn't special in this regard
[00:56:56] <FromDiscord> <Gumber> well, unless you are using a language that has a LLVM based compiler backend like Rust
[00:57:02] <FromDiscord> <Gumber> but then you get to deal with extremely long compile times 🙂
[00:57:14] <FromDiscord> <Gumber> worse than C++ even
[00:57:15] <FromDiscord> <acek7> Do i still need a mac to build the iOS app
[00:57:26] <FromDiscord> <Gumber> tmk yes you need macOS hardware to target iOS
[00:57:41] <FromDiscord> <Gumber> you don't need a mac - you could use a mac mini
[00:57:41] <FromDiscord> <acek7> that still annoys me
[00:57:45] <FromDiscord> <Gumber> welcome to apple
[00:57:47] <nrds> <06Prestige99> I thought there's a way to get around it
[00:57:49] <FromDiscord> <acek7> i have a mac mini
[00:57:49] <FromDiscord> <Gumber> they are the worst
[00:57:54] <FromDiscord> <Gumber> maybe there is? I dunno
[00:57:56] <nrds> <06Prestige99> probably against TOS though
[00:57:58] <FromDiscord> <Elegantbeef> Yea there is no difference for the desktop OS
[00:58:08] <FromDiscord> <Elegantbeef> For mobile you have more fun and have to deal with their native build process
[00:58:08] <FromDiscord> <acek7> i got one because i was wanting to eventually build apps
[00:58:11] <FromDiscord> <Gumber> fuck apple with a big rubber dildo IMO
[00:58:13] <nrds> <06Prestige99> linux ftw
[00:58:17] <nrds> <06Prestige99> ^^
[00:58:22] <FromDiscord> <Gumber> I prefer Windows but that's just because I build games
[00:58:26] <FromDiscord> <Gumber> and don't have the venom for it everyone else does
[00:58:28] <nrds> <06Prestige99> I've never agreed with anyone more about mac
[00:58:34] <FromDiscord> <Gumber> for work I'm on a macbook pro but not by choice
[00:58:36] <FromDiscord> <Gumber> it's just what I was given
[00:59:01] <nrds> <06Prestige99> Hm yeah I will need to see if I can release executables for windows using my game engine... just using sdl so it'll be fine, I just don't know how _yet_
[00:59:04] <FromDiscord> <Gumber> if I need to do webdev at home (which if I ever do makes me want to jump off a cliff) I'll use Windows + Windows subsystem for linux
[00:59:19] <FromDiscord> <Gumber> I did it with docker before the advent of zigcc
[00:59:22] <FromDiscord> <Gumber> but now I'd just use zigcc
[01:00:27] <FromDiscord> <acek7> im a designer, id love to build games but i struggle with code
[01:00:52] <FromDiscord> <Gumber> well you can help me out with mine in a few months if you'd like
[01:00:54] <FromDiscord> <Gumber> 🙂
[01:01:06] <FromDiscord> <acek7> sure i make music too
[01:01:07] <FromDiscord> <Gumber> I'm very close to the point of needing some good game designers and artists
[01:01:33] <FromDiscord> <Gumber> and I can't pay - but I promise to distribute funds fairly once and if it makes any money. I plan on going early access on steam next spring / summer
[01:01:39] <FromDiscord> <Gumber> with some sort of playable alpha
[01:01:53] <FromDiscord> <Gumber> well I could pay some, but probably not a lot
[01:02:03] <FromDiscord> <Gumber> I have a wife and dogs to feed and a mortgage to pay xD
[01:02:10] <FromDiscord> <Gumber> maybe soon a kiddo too
[01:02:16] <FromDiscord> <treeform> In reply to @acek7 "<@!107140179025735680> are you the": I am not fat! 😜
[01:02:17] <FromDiscord> <Gumber> time will tell 🙂
[01:02:19] <FromDiscord> <Gumber> lol
[01:02:35] <FromDiscord> <Gumber> was such a good intro into this whole convo
[01:02:40] <FromDiscord> <Gumber> love it
[01:02:57] <FromDiscord> <acek7> lol also im not after money i just love making things
[01:03:04] <FromDiscord> <Gumber> my main man @KingDarBoja has also expressed interest in helping out
[01:03:11] <FromDiscord> <Gumber> we're making a networked 3d multiplayer RTS
[01:03:36] <FromDiscord> <Gumber> or I am anyway - and he's also interested in joining the effort since that's pretty much his bread and butter as far as favorite type of game to play goes
[01:03:36] *** Quits: smvg (~smvg@85.218.163.88) (Read error: Connection reset by peer)
[01:03:49] <FromDiscord> <Gumber> mine too, along with MMOs and PvP centric role playing games
[01:04:00] <FromDiscord> <Gumber> which there are far too few of - I think I'll work on a PvP centric ARPG after this one
[01:04:31] <FromDiscord> <acek7> i need a game that teaches me nim but i dont realize im learning it
[01:04:42] <FromDiscord> <Gumber> someone should make a zachtronics game for Nim
[01:04:46] <FromDiscord> <Gumber> (edit) "someone should make a zachtronics ... game" 03added "style"
[01:04:53] <FromDiscord> <Gumber> I'm pissed that guy has my name and made such cool games
[01:05:03] <nrds> <06Prestige99> Gumber: Anything about your project you can mention?
[01:05:11] <FromDiscord> <Gumber> not really lol - really glad they found their niche
[01:05:15] <FromDiscord> <Gumber> I mean - sure I can mention anything :)(
[01:05:17] <FromDiscord> <Gumber> (edit) ":)(" => "🙂"
[01:05:18] <FromDiscord> <Gumber> ask away
[01:05:28] <FromDiscord> <Gumber> the engine code will all be MIT FOSS
[01:05:33] <nrds> <06Prestige99> Just curious about more details
[01:05:35] <nrds> <06Prestige99> ohhh sweet
[01:05:38] <FromDiscord> <Gumber> gameplay code and assets will all be closed source / protected
[01:05:52] <nrds> <06Prestige99> That's a good way to go
[01:05:59] <FromDiscord> <Gumber> engine is heavily parallelized - not sure exactly HOW I'm going to do that yet but I've R&D'd and prototyped a couple of solutions
[01:06:01] <nrds> <06Prestige99> I'd like to see trailers etc when they're available
[01:06:22] <FromDiscord> <Gumber> as far as theme and subject matter goes - I have a few ideas but am open to suggestions
[01:06:35] <FromDiscord> <Gumber> I plan on having networked physics and destructible environments
[01:06:51] <FromDiscord> <Gumber> it will probably be windows only because cross platform floating point determinism is a effing bitch
[01:06:54] <FromDiscord> <Gumber> (edit) "a" => "an"
[01:07:12] <nrds> <06Prestige99> hm that's too bad
[01:07:19] <FromDiscord> <Gumber> I guess I could also do xbox in that case but I really don't want to because who wants to play an RTS on console?
[01:07:26] <FromDiscord> <Gumber> well you could always play with wine
[01:07:50] <nrds> <06Prestige99> no authoritative server?
[01:07:58] <FromDiscord> <Gumber> I made the graphics backend vulkan so it's not tied to any platform specific graphics API
[01:08:00] <FromDiscord> <Gumber> nope p2p lockstep
[01:08:07] <nrds> <06Prestige99> ah, okay
[01:08:11] <FromDiscord> <Gumber> for now only available on steam but I could add more gamer services and sell on epic too
[01:08:12] <FromDiscord> <Gumber> maybe gog
[01:08:18] <FromDiscord> <Gumber> haven't checked out if they have a gamer service yet
[01:08:23] <FromDiscord> <Gumber> but it will have leaderboards, matchmaking, ELO, etc....
[01:08:41] <FromDiscord> <Gumber> theme wise - I'm either going to do something WWII or alt history US civil war
[01:09:02] <nrds> <06Prestige99> I thought you could get around the floating point issue with a lockstep system
[01:09:05] <FromDiscord> <Gumber> the second idea is my favorite but I haven't fully thought through how I'd do game mechanics with that idea yet
[01:09:11] <FromDiscord> <Gumber> nah
[01:09:17] <FromDiscord> <Gumber> lockstep really solves bandwidth issues
[01:09:28] <FromDiscord> <Gumber> doesn't handle floating point determinism
[01:09:35] <FromDiscord> <Gumber> you can get around floating point determinism using a master server architcture
[01:09:58] <nrds> <06Prestige99> That's a shame tbh
[01:10:01] <FromDiscord> <Gumber> p2p lockstep really just makes it so you don't have to send down a fresh copy of the game state every tick
[01:10:06] <nrds> <06Prestige99> Would love to see it on Linux as well
[01:10:15] <FromDiscord> <Gumber> so you can have hundreds of thousands of units in a game at once
[01:10:28] <FromDiscord> <Gumber> of course the planetary annihilation guys figured this out to some degree
[01:11:40] <FromDiscord> <Gumber> https://www.forrestthewoods.com/blog/tech_of_planetary_annihilation_chrono_cam/
[01:12:17] <FromDiscord> <Gumber> but as far as having enough detail to implement my own version of it, I don't think the blog article is that enlightening
[01:12:22] <FromDiscord> <Gumber> and also I don't want to have to pay for servers
[01:12:29] <FromDiscord> <Gumber> when I can just fork over $100 to steam and be done with it
[01:12:48] <FromDiscord> <Gumber> but yeah - wine is always an option for linux users who want to play
[01:14:06] *** Joins: smvg (~smvg@85.218.163.88)
[01:14:52] <FromDiscord> <Gumber> I could do a fixed math implementation but I don't think it's worth the perf penalty
[01:14:59] <smvg> has anyone done benchmarks comparing cython against nim ? I'm curious to see the performance differences
[01:15:02] <FromDiscord> <Gumber> I want to be able to have massive battles in whatever game I create
[01:15:10] <FromDiscord> <Gumber> Nim is not Python
[01:15:15] <FromDiscord> <Gumber> and doesn't strive to be
[01:15:31] <nrds> <06Prestige99> just performance though?
[01:15:39] <FromDiscord> <Gumber> I just don't think it's a worthwhile benchmark
[01:15:44] <nrds> <06Prestige99> yeah
[01:15:48] <FromDiscord> <Gumber> and I'm pretty sure Nim will beat it
[01:15:57] <FromDiscord> <Gumber> or can beat it rather
[01:16:01] <FromDiscord> <Gumber> benchmarks are stupid in that way
[01:16:19] <nrds> <06Prestige99> I think with lockstep and fixed math, it could still get out of sync maybe
[01:16:22] <FromDiscord> <Gumber> Nim has a really really really really smart design
[01:16:32] <FromDiscord> <Gumber> yeah I mean there's always the chance for things to get out of sync
[01:16:41] <FromDiscord> <Gumber> but you can check for that and blow away game state in that occurance
[01:16:48] <FromDiscord> <Gumber> most RTS games have a system in place like this
[01:17:12] <FromDiscord> <Gumber> see Andreas was extremely smart to make Nim produce C
[01:17:27] <FromDiscord> <Gumber> you have a language and compiler that has been around and worked on and optimized for decades
[01:17:36] <FromDiscord> <Gumber> it's the grandpa of modern programming languages
[01:17:52] <FromDiscord> <Gumber> by modern I mean like post-punch cards
[01:18:10] <FromDiscord> <Gumber> so Nim doesn't have to fill that gap
[01:18:26] <FromDiscord> <Gumber> it can just produce correct portable C and then take advantage of all that existing compiler infrastructure / tooling
[01:18:28] <pch_> most modern languages are written in C
[01:18:32] *** pch_ is now known as kinkinkijkin
[01:18:37] <FromDiscord> <Gumber> Nim isn't written in C
[01:18:40] <FromDiscord> <Gumber> sure it has compiler magic implemented in C
[01:18:45] <FromDiscord> <Gumber> but Nim is self hosted
[01:18:47] <FromDiscord> <Gumber> and boostrapped
[01:19:11] <kinkinkijkin> nim itself is written in C, the STD is written in nim
[01:19:11] <FromDiscord> <Gumber> the Nim compiler is written in Nim
[01:19:14] <kinkinkijkin> this is extremely common
[01:19:19] <FromDiscord> <Gumber> uhhhh incorrect
[01:19:35] <FromDiscord> <Gumber> the Nim compiler is 100% Nim
[01:19:41] <FromDiscord> <Gumber> minus magic
[01:19:44] <kinkinkijkin> uhhhh correct, the definition of the grammar is entirely in C
[01:19:58] <FromDiscord> <Gumber> we're debating semantics at this point
[01:20:01] <kinkinkijkin> the compiler transpiles the nim to C then sends it to GCC
[01:20:07] <kinkinkijkin> no we're not
[01:20:09] <FromDiscord> <Gumber> it doesn't transpile first of all
[01:20:12] <FromDiscord> <Gumber> it compiles to C
[01:20:12] <kinkinkijkin> it doesx
[01:20:18] <FromDiscord> <Gumber> okay keep spreading FUD about stuff you dont' know about
[01:20:23] <FromDiscord> <Gumber> what's the idfference between transpilation and compilation?
[01:20:36] <FromDiscord> <Gumber> because Nim doesn't transpile to C
[01:20:44] <FromDiscord> <Gumber> it's a differnt level of abstraction
[01:20:47] <kinkinkijkin> I've been using nim for 4 years, nim transpiles to various languages (C by default)
[01:20:47] <FromDiscord> <Gumber> it compiles to C
[01:20:52] <FromDiscord> <Gumber> I've bene using Nim for longer than you bud
[01:20:57] <FromDiscord> <Gumber> (edit) "bene" => "been"
[01:21:05] <kinkinkijkin> k
[01:21:06] <FromDiscord> <Gumber> it doesn't transpile to C
[01:21:11] <FromDiscord> <Gumber> if you want to debate me you can but you're wrong
[01:21:16] <FromDiscord> <Gumber> and the inventor of the language will agree with me
[01:21:25] <kinkinkijkin> uh
[01:21:46] <FromDiscord> <Gumber> Nim was orignally written in object pascal btw
[01:21:56] <FromDiscord> <Gumber> so keep getting your facts wrong
[01:22:00] <kinkinkijkin> nim compiler generates C files and sends them to GCC or Clang to compile them
[01:22:05] <kinkinkijkin> this is what transpilation is
[01:22:08] <FromDiscord> <Gumber> no it's not
[01:22:09] <FromDiscord> <Elegantbeef> It's a pointless distinction eitherway
[01:22:15] <FromDiscord> <enthus1ast> in the end, this ^  is a useless debate ;)
[01:22:19] <kinkinkijkin> it is
[01:22:20] <FromDiscord> <Gumber> you don't know the difference between transpilation and compilation
[01:22:24] <FromDiscord> <Gumber> but that's fine
[01:22:35] <FromDiscord> <Gumber> as I said we're debating semantics
[01:22:40] <FromDiscord> <Gumber> and I don't want to do so anymore
[01:22:49] <kinkinkijkin> then gumber, please, if you're so infinitely much smarter than some random person you know nothing about
[01:22:52] <kinkinkijkin> explain transpilation.
[01:22:55] <FromDiscord> <Gumber> if you want to go microbenchmark cython vs Nim go ahead - I see little point in the experiment o reffort
[01:22:59] <FromDiscord> <Gumber> I never said I was smarter than you
[01:23:04] <FromDiscord> <Gumber> I said I knew more about this topic than you
[01:23:09] <FromDiscord> <Gumber> don't conflate the two
[01:23:25] <FromDiscord> <Gumber> transpilation is producing or generating code at the same abstraction level as the language you are writing in
[01:23:30] <FromDiscord> <Elegantbeef> There is an important point of abstraction level
[01:23:32] <FromDiscord> <Gumber> so Java to C# would be transpilation
[01:23:34] <FromDiscord> <Elegantbeef> But eitherway it's a stupid argument
[01:23:47] <FromDiscord> <Gumber> C is at a lower abstraction level than Nim
[01:23:49] <FromDiscord> <Gumber> thus compiliation
[01:23:53] <FromDiscord> <Gumber> like I said semantic debate
[01:23:55] <FromDiscord> <Gumber> pointless
[01:24:18] <FromDiscord> <Gumber> but a distinction nonetheless
[01:24:53] <FromDiscord> <dom96> Is GCC a transpiler because it translates C into Asm?
[01:25:01] <FromDiscord> <Gumber> yeah exactly
[01:25:11] <FromDiscord> <Gumber> thank you for the analogy dom
[01:25:22] <kinkinkijkin> it doesn't, though
[01:25:36] <kinkinkijkin> compilation is turning programming language into bytecode
[01:25:41] <FromDiscord> <Gumber> is it?
[01:25:44] <kinkinkijkin> ASM to bytecode is compilation
[01:25:52] <FromDiscord> <Gumber> I'd say you're incorrect
[01:26:03] <kinkinkijkin> because machine bytecode is nowhere near 1:1 to ASM
[01:26:09] <FromDiscord> <dom96> Asm is just a textual representation of bytecode
[01:27:01] <FromDiscord> <enthus1ast> this might also not be correct, because eg a move to a mem address and a move to a register produce different opcodes
[01:27:06] <kinkinkijkin> not really, most ASMs are written perfectly sequentially while bytecode actually run is not actually perfectly sequential
[01:27:14] <FromDiscord> <enthus1ast> so it also depends on the context
[01:27:15] <FromDiscord> <Gumber> and bytecode is something that can be interpreted by a bytecode interpreter
[01:27:23] <FromDiscord> <Gumber> ASM is the human readable form of a machine's native language
[01:27:27] <FromDiscord> <Gumber> they are different
[01:27:44] <kinkinkijkin> god can you please stop condescending for no goddamn reason
[01:27:52] <kinkinkijkin> im not even a single-native english speaker
[01:27:52] <FromDiscord> <Gumber> that's the way you're taking it
[01:28:06] <FromDiscord> <Gumber> I corrected you and you got offended
[01:28:11] <FromDiscord> <Gumber> that's not my problem
[01:28:36] <FromDiscord> <Gumber> you also tried to flex your nim experience on me
[01:28:37] <kinkinkijkin> stop making incorrect corrections based on semantics you think you know perfectly and unassailably
[01:28:39] <FromDiscord> <Gumber> when you know nothing about me or who I am
[01:29:02] <FromDiscord> <Gumber> I know I'm correct in this situation and if you want to debate it with the language author go right ahead
[01:29:11] <FromDiscord> <dom96> It’s unfortunately easy to see condescension when talking like this. I’m personally not trying to be condescending, sorry if I’m coming across that way.
[01:29:18] <FromDiscord> <Gumber> his name is andreas rumph and you can probably find him active in #internals
[01:29:34] <FromDiscord> <Gumber> if you weren't aware of his handle or his name
[01:29:35] <FromDiscord> <Gumber> it's araq
[01:29:42] <FromDiscord> <Gumber> I'm done with this convo
[01:29:47] <FromDiscord> <Gumber> it's not productive or fun
[01:30:08] <kinkinkijkin> thank you for telling me the creator of the language i use primarily
[01:30:19] <FromDiscord> <Gumber> again I don't know what you know about the langauge or its inventor
[01:30:23] <kinkinkijkin> next i need you to tell me what a "proc" is
[01:30:29] <FromDiscord> <dom96> Do have a look at the wiki page for ‘transpilation’
[01:30:32] <FromDiscord> <Gumber> well I assume you know that if you've been using Nim for four years
[01:30:39] <FromDiscord> <dom96> It supports the abstraction levels definition
[01:30:47] <FromDiscord> <Gumber> not everyone is familiar with the language's history
[01:30:53] <FromDiscord> <Gumber> or its creator
[01:31:08] <FromDiscord> <Gumber> again you're interpreting my words in a certain way and I cannot help that
[01:31:49] <kinkinkijkin> okay, so for context gumber, I'm a tooling developer who works mostly on porting and compilers
[01:31:55] <FromDiscord> <Gumber> gotcha
[01:32:04] *** Joins: KainAlive (~KainAlive@p57b9d37a.dip0.t-ipconnect.de)
[01:32:22] <FromDiscord> <Gumber> I'm a game engine developer
[01:32:33] <FromDiscord> <Gumber> I joined the community about six years ago at this point
[01:32:40] <FromDiscord> <Gumber> late 2014
[01:32:42] <kinkinkijkin> and I've been developing since I got my first computer when I was 10, so it's safe to assume I have understanding of concepts
[01:32:42] *** Quits: KainAlive (~KainAlive@p57b9d37a.dip0.t-ipconnect.de) (Client Quit)
[01:32:46] <FromDiscord> <Gumber> or early 2015
[01:32:54] <FromDiscord> <Gumber> well I don't know how old you are
[01:32:56] <kinkinkijkin> I also speak 2 languages natively and develop in both of them
[01:32:57] <FromDiscord> <Gumber> you might be 12
[01:33:09] <kinkinkijkin> so words get mixed up
[01:33:13] <FromDiscord> <Gumber> that's okay I understand
[01:33:19] <FromDiscord> <Gumber> I'm slightly autistic and have bad ADHD
[01:33:37] <FromDiscord> <Gumber> however I am a native English speaker and I code in a large variety of languages and paradigms
[01:33:39] <kinkinkijkin> but condescending over concepts and turning things into semantic debates is something that crosses language barriers
[01:33:49] <FromDiscord> <Gumber> I wasn't being condescending
[01:33:54] <FromDiscord> <Gumber> that's how you interpreted my words
[01:34:06] <FromDiscord> <Gumber> I was trying to explain a nuance to you
[01:34:34] <FromDiscord> <Gumber> and stop a misnomer from being accepted as truth, or what I perceived to be a misnomer
[01:34:42] <FromDiscord> <Gumber> and I think others would agree in this community, was a misnomer
[01:34:55] <FromDiscord> <Gumber> if we can just leave it at that - I'm fine with that outcome from this exchange
[01:35:03] <kinkinkijkin> nim, in its current "canonical" grammar definition, is written in C, though has translated grammars in C++, JS, and some others I don't remember right now
[01:35:10] <FromDiscord> <Gumber> and I won't walk away with any resentment or hard feelings if you don't as well
[01:35:30] <kinkinkijkin> the nim compiler creates translated grammars for the backend language compiler in use
[01:35:59] <kinkinkijkin> there's a lot of names for this but transpilation is one used in multiple communities to refer to this form of compilation
[01:35:59] <FromDiscord> <Gumber> I don't disagree with these statements
[01:36:14] <FromDiscord> <Gumber> in this community that has not historically been the case
[01:36:25] <FromDiscord> <Gumber> and that distinction was made very very often by Araq
[01:36:32] <FromDiscord> <Gumber> whenever this subject was brought up
[01:36:34] <kinkinkijkin> because transpilation is also used as a "bad" word to some people so people try to avoid it here
[01:37:04] <FromDiscord> <dom96> Yes. Typically the word transpilation is meant to diminish Nim.
[01:37:08] <kinkinkijkin> iirc most of the language's developers are in agreement that they see it as a bad word
[01:37:16] <FromDiscord> <dom96> But the fact remains: the WP definition disagrees.
[01:37:54] <FromDiscord> <dom96> The only thing we can argue about is whether C and Nim have the same “abstraction level “
[01:38:14] <FromDiscord> <dom96> I would say Nim is distinctly more high level than C
[01:38:29] <kinkinkijkin> technically what nim does is actually called "through-compilation" but in the communities ive been brought up in, that's grouped in under transpilation
[01:38:43] <FromDiscord> <dom96> Thus by WPs definition, Nim compiles to C
[01:39:40] <FromDiscord> <zentoad> Is this the chat to ask for help?
[01:39:43] <FromDiscord> <Gumber> yes
[01:39:46] <kinkinkijkin> yes please do
[01:39:51] <FromDiscord> <Gumber> just slightly been derailed but our convo
[01:40:12] <FromDiscord> <Gumber> (edit) "but" => "byu"
[01:40:12] *** Joins: KainAlive (~kain@p57b9d37a.dip0.t-ipconnect.de)
[01:40:19] <FromDiscord> <zentoad> When I get errors like this trying to call some C++ code:
[01:40:20] <FromDiscord> <Gumber> (edit) "byu" => "by"
[01:40:22] <FromDiscord> <enthus1ast> (it would be nice if the offtopic room is bridged to matrix btw ;) )
[01:40:30] <FromDiscord> <zentoad> sent a code paste, see https://play.nim-lang.org/#ix=3AxT
[01:40:37] <FromDiscord> <zentoad> I have no idea how to debug this
[01:40:42] <FromDiscord> <Gumber> can we see your Nim code?
[01:41:01] <FromDiscord> <Gumber> and how you're compiling it?
[01:41:04] <FromDiscord> <zentoad> sent a code paste, see https://play.nim-lang.org/#ix=3AxU
[01:41:19] <FromDiscord> <zentoad> I took everything out until I get this error, and I know the code isn't right, but
[01:41:27] <FromDiscord> <Gumber> how are you linking to G2lib?
[01:41:33] <FromDiscord> <enthus1ast> you must link the library youre useing
[01:41:55] <FromDiscord> <Gumber> well I'm not even sure that's the issue honestly
[01:42:01] <FromDiscord> <zentoad> My questions is, I guess, is there any way to know that's the problem from the errors
[01:42:02] <FromDiscord> <dom96> In reply to @enthus1ast "(it would be nice": It is bridged to matrix
[01:42:03] <FromDiscord> <Gumber> `stdlib_ioDatInit000` looks like some Nim symbol
[01:42:09] <FromDiscord> <Gumber> if you know C++ there is
[01:42:23] <FromDiscord> <enthus1ast> OR make sure the lib  exports this symbol
[01:42:41] <FromDiscord> <Gumber> it's to difficult to debug your issue without knowing how you're compiling your program
[01:42:41] <FromDiscord> <zentoad> None of those calls (like the ioDatInit) are part of the C++ library I have to use
[01:42:48] <FromDiscord> <zentoad> ok
[01:42:50] <FromDiscord> <Gumber> like I said it looks like a Nim symbol
[01:42:57] <FromDiscord> <Gumber> also what operating system are you on?
[01:43:04] <FromDiscord> <Gumber> and what version of Nim are you using?
[01:43:04] <FromDiscord> <zentoad> Windows 10
[01:43:20] <FromDiscord> <zentoad> Nim Compiler Version 1.4.8 [Windows: amd64]
[01:43:24] <FromDiscord> <Gumber> okay
[01:43:33] <FromDiscord> <Gumber> and what does the invocation of `nim.exe look like?`
[01:43:37] <FromDiscord> <Gumber> (edit) "`nim.exe" => "`nim.exe`" | "like?`" => "like?"
[01:44:03] <FromDiscord> <zentoad> is there a more verbose flag to use or some other way for digging in?
[01:44:08] <FromDiscord> <enthus1ast> and gcc version?
[01:44:15] <FromDiscord> <enthus1ast> (or c compiler version)
[01:44:27] <FromDiscord> <Gumber> In reply to @zentoad "is there a more": how are you compiling your code???
[01:44:41] <FromDiscord> <zentoad> gcc (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0
[01:44:41] <FromDiscord> <Gumber> give me the command you're issuing to the command line
[01:44:49] <FromDiscord> <zentoad> sorry:
[01:44:50] <FromDiscord> <Gumber> `nim cpp ???`
[01:44:59] <FromDiscord> <zentoad> just nim cpp file.nim
[01:45:01] <FromDiscord> <zentoad> that's it
[01:45:04] <FromDiscord> <enthus1ast> this one @dom96 https://matrix.to/#/#nim-offtopic:matrix.org ?
[01:45:06] <FromDiscord> <zentoad> sorry I'm new to this
[01:45:15] <FromDiscord> <Gumber> no worries
[01:45:19] <FromDiscord> <Gumber> and no need to apologize
[01:45:24] <FromDiscord> <dom96> In reply to @enthus1ast "this one <@132595483838251008> https://matrix.to/#/": I believe so
[01:45:35] <FromDiscord> <Gumber> okay first of all you're not linking at all to your library as enthus1ast pointed out
[01:45:38] <FromDiscord> <Gumber> so that's one problem
[01:45:51] <FromDiscord> <zentoad> what is the best way to link those libraries?
[01:45:58] <FromDiscord> <Gumber> another problem appears to be that Nim's runtime isn't being linked correctly
[01:46:11] <FromDiscord> <Gumber> well you need to determine whether you want to statically or dynamically link your library
[01:46:17] <FromDiscord> <enthus1ast> i just pinged you in this channel. The channel is empty↵(@dom96)
[01:46:24] <FromDiscord> <zentoad> In reply to @Gumber "another problem appears to": Ahhh I don't know what that means, so it's probably wrong
[01:46:32] <FromDiscord> <Gumber> how'd you install Nim?
[01:47:00] <FromDiscord> <enthus1ast> could also be an ancient c compiler
[01:47:05] <FromDiscord> <Gumber> could be
[01:47:10] <FromDiscord> <Gumber> well cpp compiler but
[01:47:23] <FromDiscord> <Gumber> `gcc (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0`
[01:48:05] <FromDiscord> <Gumber> @zentoad did you use choosenim and run `finish.exe`?
[01:48:09] <FromDiscord> <Gumber> or sorry I mean download Nim
[01:48:13] <FromDiscord> <Gumber> and run `finish.exe`?
[01:48:21] <FromDiscord> <Gumber> or did you use choosenim or ???
[01:48:32] <FromDiscord> <zentoad> I downloaded and did finish.exe
[01:48:42] <FromDiscord> <Gumber> where is your Nim installation located?
[01:48:52] <FromDiscord> <Gumber> on your machine?
[01:49:13] <FromDiscord> <zentoad> E:\nim-1.4.8_x64\nim-1.4.8
[01:49:16] <FromDiscord> <Gumber> I doubt this is causing the issue but...
[01:49:17] <FromDiscord> <Gumber> okay
[01:49:39] <FromDiscord> <Gumber> is Nim's `bin` folder in your system path?
[01:49:56] <FromDiscord> <zentoad> yes
[01:50:09] <FromDiscord> <Gumber> do me a favor...
[01:50:31] <FromDiscord> <Gumber> try running - `nim --cc:vcc -r file.nim`
[01:50:38] <FromDiscord> <Gumber> and tell me what it outputs
[01:50:39] <FromDiscord> <zentoad> ok
[01:51:10] <FromDiscord> <Gumber> sorry
[01:51:34] <FromDiscord> <Gumber> nim --cc:vcc  cpp -r file.nim
[01:52:01] <FromDiscord> <zentoad> ohhhh.  That worked?
[01:52:06] <FromDiscord> <zentoad> huh
[01:52:20] <FromDiscord> <Gumber> okay so mingw is the issue
[01:52:29] <FromDiscord> <Gumber> something is wrong with your mingw setulp
[01:52:31] <FromDiscord> <Gumber> (edit) "setulp" => "setup"
[01:52:38] <FromDiscord> <zentoad> man - this mingw/vs is driving me nuts
[01:52:41] <FromDiscord> <geekrelief> In reply to @geekrelief "a little progress, I": @Gumber I was mistaken. The warning about the pointer truncation is still there. I'm not sure what's referencing `basetsd.h` I looked all over the generated C and in the nim source.
[01:52:43] <FromDiscord> <leorize> have you tried to extract that archive?↵(@dom96)
[01:52:44] <FromDiscord> <Gumber> do you have multiple mingw installations or cygwin or something installed?
[01:53:10] <FromDiscord> <Gumber> In reply to @geekrelief "<@!204328759715692544> I was mistaken.": hmmmm - can you share your bindings and tell me what header you're trying to wrap?
[01:53:25] <FromDiscord> <zentoad> I do.  Ruby put on somewhere, nim did too, and I've got another mingw installed
[01:53:27] <FromDiscord> <geekrelief> Yeah, I'll put it up.
[01:53:29] <FromDiscord> <Gumber> that's probably your issue
[01:53:38] <FromDiscord> <leorize> if you look here\: https://github.com/nim-lang/nightlies/releases/tag/latest-version-1-6 you will see that binary artifacts for \nix are `.tar.xz`
[01:53:50] <FromDiscord> <Gumber> I'm guessing the wrong mingw is getting invoked
[01:54:39] <FromDiscord> <zentoad> hmm, ok
[01:54:40] <FromDiscord> <enthus1ast> gcc --version
[01:55:01] *** Quits: KainAlive (~kain@p57b9d37a.dip0.t-ipconnect.de) (Quit: Quit)
[01:55:03] <FromDiscord> <zentoad> gcc (i686-posix-dwarf-rev0, Built by MinGW-W64 project) 8.1.0
[01:55:13] <FromDiscord> <zentoad> λ which gcc↵/c/Program Files (x86)/mingw-w64/i686-8.1.0-posix-dwarf-rt_v6-rev0/mingw32/bin/gcc
[01:55:28] <FromDiscord> <zentoad> but I imagine this isn't what my nim install is using
[01:55:33] <FromDiscord> <zentoad> I actually don't know
[01:55:49] <FromDiscord> <enthus1ast> GCC 8.1↵May 2, 2018
[01:55:58] <FromDiscord> <enthus1ast> yeah try to update this one \:)
[01:56:09] *** Quits: smvg (~smvg@85.218.163.88) (Quit: Leaving...)
[01:56:12] <FromDiscord> <zentoad> OK
[01:56:25] <FromDiscord> <zentoad> I'll go mess with all this and see what happens
[01:56:29] <FromDiscord> <enthus1ast> mine is ↵gcc (Rev2, Built by MSYS2 project) 10.1.0
[01:56:33] <FromDiscord> <zentoad> Thank you guys/girls for the help
[01:58:56] <FromDiscord> <zentoad> Oh, how is the best way to set the path: -I./include  and libraries: opengl.lib
[02:01:05] <FromDiscord> <dom96> In reply to @leorize "if you look here\:": 😢
[02:02:23] <FromDiscord> <Gumber> In reply to @zentoad "Oh, how is the": I gotta finish up some work but I can help you with this in a few if you're still around
[02:03:44] <FromDiscord> <enthus1ast> you could put this in a youFilename.nims file↵(@zentoad)
[02:04:29] <FromDiscord> <enthus1ast> https://nim-lang.org/docs/nims.html
[02:04:54] <FromDiscord> <enthus1ast> this is evaluated every time you build your application
[02:05:11] *** Quits: greaser|q (greaser@antihype.space) (Changing host)
[02:05:11] *** Joins: greaser|q (greaser@user/greasemonkey)
[02:05:12] <FromDiscord> <enthus1ast> then use `switch`
[02:05:13] *** greaser|q is now known as GreaseMonkey
[02:05:30] <FromDiscord> <enthus1ast> or put it in a nimble task
[02:07:44] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[02:10:47] <FromDiscord> <dom96> So do I fight nimterop/nimarchive or implement tar.xz support in untar
[02:11:32] <FromDiscord> <Gumber> @zentoad yeah pretty what enthus1ast said: `--passC: "-I /your/include/dir/here"` or you can stick it in a nim.cfg file or config.nims file
[02:12:08] <FromDiscord> <Gumber> you shouldn't need to touch opengl.lib - you just need to make sure it's somewhere the linker can find it which it should be able to without any effort on your part
[02:12:37] <FromDiscord> <Gumber> make sure you read Nim's opengl docs if you're using Nim's opengl library
[02:13:09] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3AxZ
[02:13:17] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[02:13:23] <FromDiscord> <enthus1ast> ok looking at the nim discord, there is a lot more going on, in terms of rooms etc
[02:13:36] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[02:13:47] <FromDiscord> <enthus1ast> i think this could all be done with the new matrix spaces
[02:13:53] <FromDiscord> <Gumber> isn't it already?
[02:13:59] <FromDiscord> <Gumber> I just upgraded matrix today and got the spaces thing
[02:14:05] <FromDiscord> <Gumber> and saw all of the community rooms
[02:14:13] <FromDiscord> <Gumber> I think the only thing that won't translate exactly is threads
[02:14:16] <FromDiscord> <enthus1ast> yes?↵(@Gumber)
[02:14:17] <FromDiscord> <Gumber> but I'm not sure about that either
[02:14:32] <FromDiscord> <enthus1ast> mhh i think i must upgrade my homeserver
[02:14:34] <FromDiscord> <Elegantbeef> Not that this community uses threads
[02:14:36] <FromDiscord> <Gumber>  https://media.discordapp.net/attachments/371759389889003532/893629498707279932/unknown.png
[02:14:48] <FromDiscord> <Elegantbeef> I hit the same issue with element's spaces being hidden in a beta flag
[02:14:59] <FromDiscord> <Gumber> yup
[02:15:06] <FromDiscord> <Gumber> had to enable it / opt-in to it
[02:15:11] <FromDiscord> <dom96> we also have a space on Matrix https://matrix.to/#/#nim:envs.net
[02:15:50] <FromDiscord> <enthus1ast> ok then this is an issue on my part
[02:16:23] <FromDiscord> <Elegantbeef> Indeed
[02:16:33] <FromDiscord> <Elegantbeef> Need more mods from matrix though 😀
[02:18:52] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[02:25:35] <FromDiscord> <fenrave> bit new to nim, is there any way of creating separate blocks of code without necessarily making a new function or macro?
[02:26:02] <FromDiscord> <fenrave> mostly just to indent sections of code to make them easier to read and to collapse them when i don't need to read them
[02:26:11] <FromDiscord> <Elegantbeef> `block`
[02:26:33] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ay2
[02:26:34] <FromDiscord> <fenrave> ah
[02:26:51] <FromDiscord> <Elegantbeef> You can also just make a template
[02:27:15] <FromDiscord> <fenrave> yeah i could but its just for indenting properties after making an object
[02:27:38] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3Ay3
[02:27:47] <FromDiscord> <enthus1ast> normally when i do a block for "better visuals" it could be a proc, and it mostly ends this way
[02:28:01] <FromDiscord> <geekrelief> Hey @Gumber Here's my version of nimterop https://github.com/geekrelief/nimterop/tree/define and the binding generator https://github.com/geekrelief/tm-nim  Clone them at the same level, then in tm-nim modify tm_gen.nim's `tm_nim_dir`.  Then build with `nim c tm_gen.nim` It should spit out a bunch of warnings, but it'll generate `tm.nim` which compiles fine with `nim c minimal.nim`.
[02:28:04] <FromDiscord> <enthus1ast> func/proc
[02:29:02] <FromDiscord> <fenrave> does the bridge pass images
[02:29:13] <FromDiscord> <Elegantbeef> Yes
[02:29:28] <FromDiscord> <Elegantbeef> Though irc users get links cause images dont go into text well 😛
[02:29:28] <FromDiscord> <geekrelief> In reply to @geekrelief "Hey <@!204328759715692544> Here's my": @Gumber Going to grab something to eat.  Let me know if you have any issues. Thanks!
[02:29:40] <FromDiscord> <Elegantbeef> Matrix users get embeds assuming they're on gui client
[02:30:04] <FromDiscord> <Elegantbeef> Guess the same applies to irc
[02:30:24] <FromDiscord> <fenrave> would be cool if termical clients automatically converted them to ascii characters
[02:30:44] <FromDiscord> <Elegantbeef> Lol useless but cool indeed
[02:32:51] <FromDiscord> <dom96> sure would be nice if there was a WinAPI function for extracting a zip file
[02:34:17] <FromDiscord> <enthus1ast> zippy can read zip files
[02:36:35] <FromDiscord> <fenrave>  https://media.discordapp.net/attachments/371759389889003532/893635030360948776/unknown.png
[02:36:44] <FromDiscord> <fenrave> mostly so i can just hide hideous blocks like this https://media.discordapp.net/attachments/371759389889003532/893635069762240542/unknown.png
[02:36:57] <FromDiscord> <Gumber> In reply to @geekrelief "<@!204328759715692544> Going to grab": going to take a break for a bit myself because I've been at it all day, but I will take a look for you as soon as I am back 🙂
[02:37:23] <FromDiscord> <geekrelief> In reply to @Gumber "going to take a": Thanks, no rush.  I'll keep working on this.
[02:37:38] <FromDiscord> <Gumber> I shouldn't be too long, prob back in an hour or so
[02:38:24] <FromDiscord> <Gumber> In reply to @fenrave "": you can actually use `block`s to avoid early returns, etc...
[02:38:33] <FromDiscord> <dom96> In reply to @enthus1ast "zippy can read zip": wow a pure Nim library, amazing
[02:38:34] <FromDiscord> <Gumber> I do this quite often in my code
[02:39:01] <FromDiscord> <fenrave> i'll remember that one, i had a problem with that when i was just messing around with nim a bit like 6 months ago
[02:39:08] <FromDiscord> <Gumber> I can show you an example
[02:39:11] <FromDiscord> <fenrave> ok
[02:39:30] <FromDiscord> <Gumber> keep in mind, I don't use exceptions
[02:40:02] <FromDiscord> <Gumber> sent a code paste, see https://paste.rs/0wK
[02:40:10] <FromDiscord> <Gumber> here is a simple example - but you can of course nest and name blocks and then break out of a named block
[03:02:29] *** Quits: max22- (~maxime@2a01cb088335980098b0bbe63a5a4455.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[03:16:59] <FromDiscord> <dom96> heh, leave it to the Nim archives to find an edge case immediately https://github.com/guzba/zippy/issues/29
[03:22:03] <FromDiscord> <enthus1ast> \:)
[03:37:56] <FromDiscord> <Gumber> we try hard to break sshit
[03:37:57] <FromDiscord> <Gumber> (edit) "sshit" => "shit"
[03:39:18] <FromDiscord> <Gumber> @geekrelief looking at your stuff now 🙂
[03:39:37] <FromDiscord> <geekrelief> In reply to @Gumber "<@!109484839480107008> looking at your": cool, btw, I tried out tcc and it works fine
[03:39:46] <FromDiscord> <Gumber> okay so it's a vcc thing
[03:39:48] <FromDiscord> <geekrelief> gcc has issues linking
[03:39:52] <FromDiscord> <geekrelief> vcc has warnings
[03:39:56] <FromDiscord> <Gumber> okay
[03:40:08] <FromDiscord> <Gumber> well I mean that's good news
[03:40:12] <FromDiscord> <geekrelief> here's an example of the gcc error `C:/Users/geekr/scoop/apps/gcc/current/bin/../lib/gcc/x86_64-w64-mingw32/9.3.0/../../../../x86_64-w64-mingw32/bin/ld.exe: ↵C:\Users\geekr\nimcache\tm_gen_d\stdlib_dynlib.nim.c.o:stdlib_dynlib.nim.c:(.text+0x0): multiple definition of `NtCurrentTeb'; `
[03:40:17] <FromDiscord> <Gumber> means it's just compiler specific crap
[03:40:21] <FromDiscord> <Gumber> should be easy to sort out
[03:40:30] <FromDiscord> <geekrelief> yeah, it's strange.  I'm using gcc for my godot binding without issue.
[03:40:45] <FromDiscord> <Gumber> I don't know anything about GDNative really
[03:40:47] <FromDiscord> <geekrelief> I usually get warnings with vcc but I can safely ignore them.
[03:40:49] <FromDiscord> <Gumber> or using Nim with Godot
[03:41:02] <FromDiscord> <geekrelief> yeah it was just a sanity check to make sure my gcc install isn't broken
[03:41:04] <FromDiscord> <Gumber> what warnings do you get with vcc right now again?
[03:41:28] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayb
[03:42:11] <FromDiscord> <geekrelief> I was messing around with pysche-c for parsing C, so I had msys installed.  I was wondering if that was making things screwy, but I uninstalled it.
[03:42:53] <FromDiscord> <Gumber> hmmm
[03:48:40] <FromDiscord> <lel> hey, i just started looking at nim and have a question about the stdlib. i wanted to read a file fully into memory, and there's `io.readAll`, but that seems to return a string. i see that there's `io.readBytes` where i can supply my own buffer. But there seems to be no `io.readAllBytes`. am i missing something here? seems strange to me to assume that a file only contains string data
[03:49:14] <FromDiscord> <Elegantbeef> Strings are bytes! You can always `cast[seq[byte]](yourString)`
[03:49:20] <FromDiscord> <Elegantbeef> Well byte sequences
[03:50:31] <FromDiscord> <lel> ah i see, that makes sense. i suppose i have been writing in languages where strings are not char arrays too much lately m( thanks!
[03:50:54] <FromDiscord> <lel> (edit) "ah i see, that makes sense. i suppose i have been writing in languages where strings are not ... char" 03added "(considered)"
[03:51:33] <FromDiscord> <Elegantbeef> There is the caveat of interop, `seq[byte] ` -\> `string` -\> `cstring` is an issue due to the byte not inserting a `'\0'` after the last entry
[03:51:51] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayf
[03:51:52] <FromDiscord> <Elegantbeef> But if you're staying in Nim you dont have much issue
[03:52:33] <FromDiscord> <Gumber> what is p?
[03:52:42] <FromDiscord> <Gumber> I'm guessing a pointer to an opaque type?
[03:52:51] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayg
[03:52:52] <FromDiscord> <Gumber> yeah so it's a 32 bit pointer
[03:52:58] <FromDiscord> <Gumber> so 4 bytes ov
[03:53:04] <FromDiscord> <Gumber> casts that to an unsigned long - same size
[03:53:14] <FromDiscord> <Gumber> cast it to whatever `ULONG_PTR` is
[03:53:31] <FromDiscord> <Gumber> I'm guessing that's an alias somewhere in the machinery via a preprocessor macro
[03:53:32] <FromDiscord> <geekrelief> is long 32 bits? or is that architecture dependent?
[03:53:39] <FromDiscord> <Gumber> an unsigned long is 32 bits
[03:53:44] <FromDiscord> <Gumber> and unsigned long long is 64
[03:53:52] <FromDiscord> <geekrelief> this is in basetsd.h for windows
[03:53:59] <FromDiscord> <Gumber> yeah
[03:54:53] <FromDiscord> <geekrelief> hmm
[03:55:31] <FromDiscord> <Gumber> sorry wife came in and spilled fish oil pills all over the floor
[03:55:42] <FromDiscord> <Gumber> okay so then
[03:55:47] <FromDiscord> <geekrelief> np
[03:55:53] <FromDiscord> <Gumber> it gets casted back to a pointer to an opaque type
[03:56:14] <FromDiscord> <Gumber> what is ULONG_PTR?
[03:56:37] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=
[03:57:43] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayh
[03:58:38] <FromDiscord> <Gumber> okay so it's a sixty four bit unsigned integer
[03:58:54] <FromDiscord> <Gumber> or a pointer to one rather
[03:59:10] <FromDiscord> <Gumber> wait hold on a sec
[03:59:25] <FromDiscord> <geekrelief> yeah, I guess the cast order is (void ) --> (unsigned long)?
[03:59:26] <FromDiscord> <Gumber> no it's just a sixty four bit unsigned integer
[03:59:45] *** Joins: rockcavera (~rc@192.12.112.229)
[03:59:45] *** Quits: rockcavera (~rc@192.12.112.229) (Changing host)
[03:59:45] *** Joins: rockcavera (~rc@user/rockcavera)
[04:00:32] <FromDiscord> <Gumber> casts go right to left
[04:00:43] <FromDiscord> <Gumber> you can check out operator precedence here: https://docs.microsoft.com/en-us/cpp/c-language/precedence-and-order-of-evaluation?view=msvc-160
[04:00:54] <FromDiscord> <geekrelief> but wouldn't that mean an expansion from 32 to 64 bits is occuring?
[04:01:02] <FromDiscord> <geekrelief> the warning wouldn't make sense right?
[04:02:11] <FromDiscord> <Gumber> no it makes perfvect sense
[04:02:14] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayj
[04:02:15] <FromDiscord> <Gumber> well hold on
[04:02:19] <FromDiscord> <Gumber> this is super annoying - not you
[04:02:27] <FromDiscord> <Gumber> my wife is like telling me shit she's finding in the garage as she find sit
[04:02:34] <FromDiscord> <Gumber> while i'm trying to help you debug this issue
[04:02:37] <FromDiscord> <geekrelief> haha
[04:02:38] <FromDiscord> <Gumber> and my ADHD is going absolutely nuts
[04:02:51] <FromDiscord> <geekrelief> maybe go help your wife first 🙂
[04:03:01] <FromDiscord> <Elegantbeef> Nah geek is more important
[04:03:20] <FromDiscord> <Gumber> no she doesn't need help is the thing
[04:03:28] <FromDiscord> <Gumber> she's just like telling me this shit for absolutely no reason
[04:03:39] <FromDiscord> <Gumber> we have a bunch of crap out in our garage still from when we moved in
[04:04:28] <FromDiscord> <geekrelief> I'm sure she has her reasons. 🙂
[04:04:39] <FromDiscord> <Gumber> to the house we bought this past March - and we had a busy summer and stuff with the marriage, and going back to Virginia and stuff (this is ot btw but I'll try to type it one message)↵↵so as she's coming across stuff in the garage, she's telling me what she's finding like - oh it's a bottle of acetaminophen and she wants me to acknowledge it
[04:04:55] <FromDiscord> <Gumber> well first she was trying to make me feel bad about not using shit I think and now she's just doing it for I dunno wtf reason
[04:05:06] <FromDiscord> <Gumber> she went into the kitchen thank god  so maybe I can concentrate a bit noew
[04:05:08] <FromDiscord> <Gumber> (edit) "noew" => "now"
[04:05:19] <FromDiscord> <Gumber> I love her to death but I mean grrrrrrrr lmao
[04:05:34] <FromDiscord> <Gumber> it's fine - I have my shit quirks and annoying habits too
[04:05:43] <FromDiscord> <geekrelief> hehe alright. maybe you should talk it out?
[04:05:44] <FromDiscord> <Elegantbeef> "You love her to death, but if she keeps this up you wont have to love her long" 😛
[04:05:45] <FromDiscord> <Gumber> so back to your issue - it makes sense because what's happening is this
[04:05:53] <FromDiscord> <Gumber> nah we're fine lol we're not mad or anything
[04:05:54] <FromDiscord> <Gumber> lol
[04:06:01] <FromDiscord> <Gumber> nah we're bffs
[04:06:09] <FromDiscord> <Gumber> have known her since I was 22 and I'm 36 now
[04:06:26] <FromDiscord> <Gumber> you have a pointer to an opaque type so it could be any size
[04:06:47] <FromDiscord> <Gumber> I don't know what POINTER_32  is one sec
[04:07:11] <FromDiscord> <geekrelief> it's `ptr32` not sure what that means
[04:07:29] <FromDiscord> <geekrelief> https://docs.microsoft.com/en-us/cpp/cpp/ptr32-ptr64?view=msvc-160
[04:07:37] <FromDiscord> <geekrelief> native point on 32 bit system
[04:07:50] <FromDiscord> <Gumber> https://docs.microsoft.com/en-us/cpp/cpp/ptr32-ptr64?view=msvc-160
[04:07:51] <FromDiscord> <geekrelief> (edit) "point" => "pointer"
[04:07:53] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[04:08:12] <FromDiscord> <geekrelief> so p is a 32 bit pointer
[04:08:21] <FromDiscord> <Gumber> this is an important bit
[04:08:30] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Ayk
[04:08:53] <FromDiscord> <Gumber> so it could be a 64 bit pointer on a 64 bit system
[04:09:00] <FromDiscord> <Gumber> so it could be truncated to a 32 bit
[04:09:01] <FromDiscord> <geekrelief> ah
[04:09:03] <FromDiscord> <Gumber> see what's going on here?
[04:09:05] <FromDiscord> <geekrelief> yes
[04:09:13] <FromDiscord> <Gumber> so the warnings are valid
[04:09:31] <FromDiscord> <Gumber> now let's look at C:\Program Files (x86)\Windows Kits\10\include\10.0.19041.0\um\winnt.h(8712): warning C4103: alignment changed after including header, may be due to missing #pragma pack(pop)
[04:09:36] <FromDiscord> <Gumber> (edit) "C:\Program" => "`C:\Program" | "pack(pop)" => "pack(pop)`"
[04:09:38] <FromDiscord> <geekrelief> ok
[04:10:39] <FromDiscord> <Gumber> somewhere there is a #pragma pack(push, some_packing_alignment)
[04:10:44] <FromDiscord> <Gumber> (edit) "#pragma" => "`#pragma" | "some_packing_alignment)" => "some_packing_alignment)`"
[04:10:48] <FromDiscord> <Gumber> that isn't being popped
[04:11:09] <FromDiscord> <geekrelief> dammit I shouldn't have made that assumption about `POINTER_32`..
[04:11:33] <FromDiscord> <Gumber> and it's in a header file somewhere that's being included
[04:15:19] <FromDiscord> <Gumber> okay so on that line - `#include "pshpack4.h"`
[04:15:36] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Ayl
[04:16:50] <FromDiscord> <Gumber> so it's going to result in `#pragma pack(push,4)`
[04:17:28] <FromDiscord> <geekrelief> yeah
[04:17:55] <FromDiscord> <Gumber> I think anyway - because I don't think they're using the MIDL compiler
[04:18:03] <FromDiscord> <Gumber> wouldn't make much sense here at all
[04:18:31] <FromDiscord> <Gumber> on line 8812 you see - `#include "poppack.h"`
[04:18:37] <FromDiscord> <geekrelief> yeah I see it
[04:18:45] <FromDiscord> <geekrelief> I guess we can safely ignore these
[04:20:02] <FromDiscord> <Gumber> yeah I wouldn't worry about them
[04:20:12] <FromDiscord> <Gumber> none of them are in user land
[04:20:23] <FromDiscord> <Gumber> okay gcc error now
[04:20:28] <FromDiscord> <geekrelief> cool, yeah gcc
[04:20:47] <FromDiscord> <Gumber> so it's from the linker
[04:20:52] <FromDiscord> <Gumber> basically a duplicate symbol
[04:20:58] <FromDiscord> <Gumber> `NtCurrentTeb`
[04:21:26] <FromDiscord> <geekrelief> There's a few of them
[04:21:40] <FromDiscord> <Gumber> so some library is being linked twice
[04:21:47] <FromDiscord> <geekrelief> `GetCurrentFiber` and `GetFiberData` too
[04:21:48] <FromDiscord> <Gumber> https://docs.microsoft.com/en-us/windows/win32/api/winnt/nf-winnt-ntcurrentteb
[04:22:01] <FromDiscord> <Gumber> or the symbol occurs twice in two different libraries
[04:22:09] <FromDiscord> <Gumber> wait that's worded incorrectly
[04:22:16] <FromDiscord> <Gumber> the symbol occurs in two different libraries that are being linked
[04:22:25] <FromDiscord> <Gumber> or is being exported rather is a better way to phrase it
[04:23:10] <FromDiscord> <Gumber> I'm not even quite sure how all this is being linked
[04:23:57] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Ayn
[04:25:13] <FromDiscord> <Gumber> can you share the generated Nim file with me?
[04:25:22] <FromDiscord> <geekrelief> sure
[04:26:02] <FromDiscord> <geekrelief> generated file https://media.discordapp.net/attachments/371759389889003532/893662570442027078/tm.nim
[04:26:08] <FromDiscord> <Gumber> thanks
[04:26:13] <FromDiscord> <geekrelief> np
[04:27:17] <FromDiscord> <geekrelief> that file is just an artifact of toast
[04:27:54] <FromDiscord> <Gumber> yeah I'm not even seeing where foundation is linked
[04:27:58] <FromDiscord> <Gumber> foundation.dll or foundation.lib
[04:28:19] <FromDiscord> <geekrelief> they aren't linked. I can get these errors from compiling tm_gen.nim
[04:28:26] <FromDiscord> <Gumber> oh I gotcha
[04:29:16] <FromDiscord> <Gumber> hmm I think I might have a suspicion as to what is going on, but let me check....
[04:29:28] <FromDiscord> <geekrelief> ok
[04:30:55] <FromDiscord> <Gumber> try passing `-c` to `gcc`
[04:31:04] <FromDiscord> <geekrelief> Yeah I did that before
[04:31:08] <FromDiscord> <Gumber> didn't work?
[04:31:10] <FromDiscord> <geekrelief> that just avoids linking
[04:31:14] <FromDiscord> <geekrelief> so you wouldn't get the errors
[04:31:29] <FromDiscord> <Gumber> well you don't want to link to just generate the nim bindings right?
[04:31:35] <FromDiscord> <Gumber> you only want to link when you build your example
[04:31:46] <FromDiscord> <Gumber> oh I see wait
[04:31:50] <FromDiscord> <geekrelief> right, but ..
[04:31:53] <FromDiscord> <Gumber> it's going to need to compile nimterop too
[04:32:00] <FromDiscord> <Gumber> and link to that
[04:32:04] <FromDiscord> <Gumber> hmm
[04:32:10] <FromDiscord> <geekrelief> well I mean it works fine
[04:32:19] <FromDiscord> <geekrelief> I can just pass -c to get the wrapper
[04:32:30] <FromDiscord> <geekrelief> then I compile with vcc
[04:32:35] <FromDiscord> <Gumber> but when you compile with the wrapper you still get those errors?
[04:32:43] <FromDiscord> <geekrelief> yes
[04:32:49] <FromDiscord> <Gumber> well if you compile the wrapper with mingw
[04:32:57] <FromDiscord> <Gumber> or rather if you compile the wrapper generator with mingw
[04:33:11] <FromDiscord> <Gumber> you should compile whatever imports the mingw with mingw too
[04:33:20] <FromDiscord> <Gumber> (edit) "mingw" => "bindings"
[04:33:23] <FromDiscord> <Gumber> sorry brain fart
[04:35:04] <FromDiscord> <geekrelief> if I generate the binding and compile the binding with gcc/mingw the errors popup
[04:35:15] <FromDiscord> <Gumber> okay
[04:35:29] <FromDiscord> <Gumber> even if you use `-c` to generate the bindings right?
[04:35:33] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ays
[04:35:58] <FromDiscord> <geekrelief> let me regenerate the binding.. I think the wrapper will be the same though..
[04:36:01] <FromDiscord> <Gumber> okay
[04:36:14] <FromDiscord> <Gumber> yeah I really don't think this is the issue but
[04:36:18] <FromDiscord> <Gumber> I thought it was at first
[04:36:30] <FromDiscord> <geekrelief> yeah, -c with tm_gen.nim and compiled minimal, still has errors
[04:36:34] <FromDiscord> <Gumber> yeah okay
[04:36:39] <FromDiscord> <Gumber> so Nim's stdlib includes that symbol
[04:36:50] <FromDiscord> <Gumber> in `stdlib_system.nim.c`
[04:37:03] <FromDiscord> <Gumber> that's where it's first encountering it
[04:37:35] <FromDiscord> <Gumber> and then mingw is probably linking to it from here: https://github.com/Alexpux/mingw-w64/blob/master/mingw-w64-tools/widl/include/winnt.h
[04:37:59] <FromDiscord> <Gumber> well maybe not that file hold on
[04:39:42] <FromDiscord> <Gumber> oh yeah it is defined there
[04:39:45] <FromDiscord> <Gumber> `extern struct _TEB  WINAPI NtCurrentTeb(void);`
[04:40:13] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayu
[04:40:17] <FromDiscord> <Gumber> second line
[04:40:28] <FromDiscord> <Gumber> well those three lines right there
[04:40:48] <FromDiscord> <geekrelief> yeah yours just looks a little different
[04:40:56] <FromDiscord> <Gumber> oh I just pulled that off github
[04:41:07] <FromDiscord> <Gumber> probably not even a correct file - let's go with yours
[04:41:17] <FromDiscord> <Gumber> either way I think this is what we're dealing with
[04:41:51] <FromDiscord> <geekrelief> sent a code paste, see https://play.nim-lang.org/#ix=3Ayv
[04:42:18] <FromDiscord> <Gumber> yeah but that one is guarded
[04:42:26] <FromDiscord> <Gumber> those are all in the same file?
[04:42:31] <FromDiscord> <Gumber> and those are defining functions
[04:42:38] <FromDiscord> <geekrelief> oh yeah.. for some reason I say ifdef on the first one
[04:42:45] <FromDiscord> <Gumber> yeah
[04:43:05] <FromDiscord> <Gumber> I dunno wtf is going on there honestly
[04:43:15] <FromDiscord> <geekrelief> yeah same file
[04:43:17] <FromDiscord> <Gumber> I think it's just like making an alias to those functions
[04:43:27] <FromDiscord> <Gumber> with a implicit cast of the return type
[04:43:44] <FromDiscord> <Gumber> https://stackoverflow.com/questions/32547952/multiple-multiple-definition-of-while-compiling-simple-hello-world
[04:43:46] <FromDiscord> <Gumber> I think this is the issue
[04:45:50] <FromDiscord> <Gumber> it's definitely not an issue with the binding generator
[04:46:04] <FromDiscord> <Gumber> it's an issue with the compilation of the bindings themselves
[04:46:12] <FromDiscord> <geekrelief> I wonder if it's an issue with my install of gcc
[04:46:53] <FromDiscord> <geekrelief> the stackoverflow issue suggest that the libraries are linked multiple times
[04:47:23] <FromDiscord> <Gumber> yeah I mean that's the underlying issue
[04:47:33] <FromDiscord> <Gumber> the issue isn't exacxtly the same
[04:47:36] <FromDiscord> <Gumber> (edit) "exacxtly" => "exactly"
[04:47:50] <FromDiscord> <Gumber> but somehow libgcc s getting linked twice statically
[04:47:52] <FromDiscord> <geekrelief> right, so what is doing the linking?
[04:47:55] <FromDiscord> <Gumber> (edit) "s" => "is"
[04:48:12] <FromDiscord> <Gumber> well when you compile the bindings with nim and mingw I"m guessing it gets linked statically
[04:48:19] <FromDiscord> <Gumber> but you're not producing an executable soooo
[04:48:33] <FromDiscord> <Gumber> or even a shared library
[04:48:45] <FromDiscord> <Gumber> but you are producing some object files
[04:49:01] <FromDiscord> <Gumber> I'm just doing a rubber duck thing right now btw
[04:49:11] <FromDiscord> <geekrelief> no worries
[04:49:24] <FromDiscord> <Gumber> I think the last sentence in the answer is the jist of what's happening here
[04:49:28] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=
[04:49:42] <FromDiscord> <Gumber> if  you don't generate the bindings separately
[04:49:44] <FromDiscord> <Gumber> this still happens?
[04:50:28] <FromDiscord> <geekrelief> Actually I've never tried that because of the linking errors.  I just generated the wrapper separately first.
[04:50:32] <FromDiscord> <Gumber> give that a shot
[04:50:35] <FromDiscord> <Gumber> see what happens
[04:50:48] <FromDiscord> <Gumber> if they disappear and you get new linker errors
[04:50:50] <FromDiscord> <Gumber> that's your issue
[04:50:51] <FromDiscord> <geekrelief> How would I set that up?
[04:50:57] <FromDiscord> <Gumber> I think it's an arg to nimterop
[04:50:59] <FromDiscord> <Gumber> one sec
[04:51:26] <FromDiscord> <Gumber> so I think....
[04:51:44] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Ayz
[04:51:57] <FromDiscord> <Gumber> and then make a nim file that imports `tm_gen.nim` and compile that
[04:52:33] <FromDiscord> <geekrelief> Can I modify minimal.nim and swap tm with tm_gen?
[04:52:38] <FromDiscord> <Gumber> sure
[04:53:09] <FromDiscord> <geekrelief> same errors
[04:53:32] <FromDiscord> <Gumber> shittttt
[04:53:39] <FromDiscord> <Gumber> ugh man I hate mingw
[04:54:02] <FromDiscord> <geekrelief> yeah
[04:54:17] <FromDiscord> <geekrelief> alright, I'll just put in the readme you gotta use vcc or tcc
[04:54:19] <FromDiscord> <Gumber> nimterop gets compiled and calls toast which generates your bindings
[04:54:26] <FromDiscord> <geekrelief> yeah
[04:54:32] <FromDiscord> <Gumber> and then your bindings are getting compiled by mingw
[04:54:36] <FromDiscord> <Gumber> along with your program
[04:54:40] <FromDiscord> <Gumber> and both are being linked to libgcc
[04:54:45] <FromDiscord> <Gumber> but I don't know how to fix it....
[04:56:14] <FromDiscord> <geekrelief> actually, I'm not sure I really understand the nature of the problem
[04:56:30] <FromDiscord> <Gumber> so when you compile code you don't go automatically from source to executable right
[04:56:33] <FromDiscord> <Gumber> object files get produced
[04:56:40] <FromDiscord> <geekrelief> `tm.nim` is imported into `minimal.nim` would all the symbols be resolved during linking?
[04:56:59] <FromDiscord> <Gumber> and those object files are linked to static libraries and an executable is produced
[04:57:20] <FromDiscord> <Gumber> so object files are being produced that are being linked to two copies of libgcc
[04:57:29] <FromDiscord> <Gumber> and that's why you're getting the duplicate symbols
[04:57:32] <FromDiscord> <geekrelief> I guess if there's a collision the linker would know which to choose
[04:57:44] <FromDiscord> <geekrelief> (edit) "would" => "wouldn't" | "choose" => "choose?"
[04:57:47] <FromDiscord> <Gumber> well it's not so much the linker that's at fault here
[04:57:59] <FromDiscord> <Gumber> it's the way mingw works and the way nimterop is set up to work
[04:58:20] <FromDiscord> <geekrelief> Maybe I'll ping shashlick and see if he knows what's up
[04:58:28] <FromDiscord> <Gumber> he might
[04:58:31] <FromDiscord> <Gumber> one sec let me look into nimterops code
[04:58:40] <FromDiscord> <geekrelief> he reached out to me the other day and offered to help
[04:58:45] <FromDiscord> <Gumber> I can probably better explain it if I can find the loc that will shine the light on this
[04:58:46] <FromDiscord> <Gumber> oh cool
[05:00:57] *** Joins: neurocyte01320 (~neurocyte@94.46.83.234)
[05:00:57] *** Quits: neurocyte01320 (~neurocyte@94.46.83.234) (Changing host)
[05:00:57] *** Joins: neurocyte01320 (~neurocyte@user/neurocyte)
[05:03:19] *** Quits: neurocyte0132 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:03:19] *** neurocyte01320 is now known as neurocyte0132
[05:03:32] <FromDiscord> <geekrelief> I pinged shashlick.  I'll let you know if anything comes of it.  In the meantime, thanks for your help.  I'll just a note in the readme and create an issue about gcc in the repo.
[05:03:44] <FromDiscord> <geekrelief> (edit) "I pinged shashlick.  I'll let you know if anything comes of it.  In the meantime, thanks for your help.  I'll just ... a" 03added "post"
[05:04:40] <FromDiscord> <geekrelief> I think I've had enough of dealing with this for today.  🙂 I'm happy that tcc works though!
[05:04:47] <FromDiscord> <Gumber> okay I can explain it
[05:04:54] <FromDiscord> <Gumber> but yeah that's cool
[05:05:05] <FromDiscord> <Gumber> so toast is getting compiled and turning into toast.exe
[05:05:12] <FromDiscord> <Gumber> and there's one static linking of libgcc
[05:05:17] <FromDiscord> <Gumber> toast.exe gets invoked to produce the bindings
[05:05:23] <FromDiscord> <Gumber> object files are linked to libgcc
[05:05:32] <FromDiscord> <Gumber> you compile those and now you have to libgcc
[05:05:38] <FromDiscord> <Gumber> make sense @geekrelief ?
[05:06:15] <FromDiscord> <geekrelief> The bindings are just nim, so I don't understand where the object files are coming from.
[05:06:38] <FromDiscord> <Gumber> when you compile the nim code to c
[05:06:45] <FromDiscord> <Gumber> the c compiler gets invoked
[05:06:51] <FromDiscord> <Gumber> and produces some object files
[05:07:01] <FromDiscord> <Gumber> so nimterop itself gets compiled
[05:07:19] <FromDiscord> <Gumber> and gets linked statically to libgcc by mingw to produce some object files
[05:07:22] <FromDiscord> <Gumber> because toast.exe needs to be produced
[05:07:42] <FromDiscord> <Gumber> nimterop then invokes toast.exe to generate your bindings
[05:08:15] <FromDiscord> <Gumber> to compile your bindings, you depend on nimterop
[05:08:45] <FromDiscord> <Gumber> and remember nimterop has produced object files already
[05:08:56] <FromDiscord> <Gumber> so you're going to link to those object files in your host program
[05:09:07] <FromDiscord> <Gumber> and nim is going to invoke mingw to compile your program
[05:09:19] <FromDiscord> <Gumber> well nimterop is going to invoke nim to invoke mingw to compile your program
[05:09:23] <FromDiscord> <Gumber> if you're not generated the bindings seprately
[05:09:29] <FromDiscord> <Gumber> but even if you are your'e still going to depend on those object files
[05:09:36] <FromDiscord> <Gumber> because then you'll need to depend on nimterop
[05:09:44] <FromDiscord> <Gumber> and once again mingw will link libgcc
[05:09:54] <FromDiscord> <geekrelief> ok I think I understand now
[05:09:54] <FromDiscord> <Gumber> so now you have duplicate symbols in separate object files
[05:10:00] <FromDiscord> <Gumber> yeah it's hairy af man
[05:10:03] <FromDiscord> <Gumber> but that's what happens
[05:10:08] <FromDiscord> <Gumber> it's all cause of how nimterop works in the end
[05:10:15] <FromDiscord> <geekrelief> yeah I was wondering why nimterop is this convoluted
[05:10:30] <FromDiscord> <Gumber> yeah you might have better luck with @PMunch 's furthak
[05:10:33] <FromDiscord> <geekrelief> I was going through the codebase and had a couple of wtf moments
[05:10:35] <FromDiscord> <Gumber> or just roll the bindings by hand
[05:10:38] <FromDiscord> <Gumber> I don't think it would be that bad with c2nim
[05:10:44] <FromDiscord> <Gumber> but I know you're just trying to make progress
[05:10:46] <FromDiscord> <Gumber> yeah
[05:10:54] <FromDiscord> <Gumber> well - it was a yeoman's effort for sure
[05:11:06] <FromDiscord> <Gumber> it's a lot of fucking code and no one had really tried to do what shaslick was doing
[05:11:10] <FromDiscord> <geekrelief> I don't want to depend on llvm for futhark
[05:11:18] <FromDiscord> <Gumber> (edit) "shaslick" => "shashlick" | "doing" => "doing, at least not in the Nim community yet"
[05:11:21] <FromDiscord> <Gumber> ah okay
[05:11:27] <FromDiscord> <Gumber> yeah I would go for c2nim + perl
[05:11:32] <FromDiscord> <Gumber> and pcre
[05:11:36] <FromDiscord> <geekrelief> I'm not sure it's reasonable to ask people to do all that setup for 1 binding
[05:11:40] <FromDiscord> <Gumber> I agree
[05:11:51] <FromDiscord> <geekrelief> I mean nimterop works for vcc and tcc
[05:11:53] <FromDiscord> <Gumber> I can't even be bothered to install LLVM to use rust xD
[05:11:54] <FromDiscord> <Gumber> yeah
[05:12:00] <FromDiscord> <Gumber> if that's enough for you on windows then you're probablyg ood
[05:12:03] <FromDiscord> <Gumber> (edit) "probablyg ood" => "probably good"
[05:12:12] <FromDiscord> <Gumber> but hey - I gotta run and get some stuff done
[05:12:17] <FromDiscord> <geekrelief> yeah, I just wanted to understand the nature of the problem.
[05:12:18] <FromDiscord> <Gumber> and I'm glad we were able to figure this stuff out 🙂
[05:12:22] <FromDiscord> <geekrelief> thanks for all the help!
[05:12:26] <FromDiscord> <geekrelief> take care!
[05:12:27] <FromDiscord> <Gumber> yeah of course! I always like to do that too!
[05:12:29] <FromDiscord> <Gumber> any time! you too bud!
[05:40:43] *** Quits: rockcavera (~rc@user/rockcavera) (Ping timeout: 252 seconds)
[05:46:05] <FromDiscord> <juan_carlos> Theres something to convert a `seq[seq[]]` to CSV in StdLib?, I know I can do 2 for loops, but wondering if theres something better?.
[05:49:15] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:07:31] <FromDiscord> <Gumber> In reply to @juan_carlos "Theres something to convert": only csv module I'm aware of is `parsecsv`
[06:07:37] <FromDiscord> <Gumber> but I imagine you could come up with something using `sequtils`
[06:07:40] <FromDiscord> <Gumber> fairly easily
[06:07:54] <FromDiscord> <Gumber> give me one sec and I'll do it
[06:09:36] *** Joins: rockcavera (~rc@192.12.112.103)
[06:09:37] *** Quits: rockcavera (~rc@192.12.112.103) (Changing host)
[06:09:37] *** Joins: rockcavera (~rc@user/rockcavera)
[06:14:16] <FromDiscord> <Gumber> @juan_carlos something like - https://play.nim-lang.org/#ix=3AyM ?
[06:15:28] <FromDiscord> <Gumber> obviously it's very simplistic and you'd need to do some escaping and take in some parameters to specify delimiters etc
[06:15:34] <FromDiscord> <Gumber> but I mean it's the basics
[06:23:30] <FromDiscord> <Gumber> you could do this in a much more preformant way with 2d arrays instead of sequences
[06:23:36] <FromDiscord> <Gumber> in terms of space time complexity
[06:23:49] <FromDiscord> <Gumber> but you'd be hard capped in terms of capacity
[06:24:41] <FromDiscord> <Gumber> only dynamic allocations then would be the strings
[06:24:55] <FromDiscord> <Gumber> and I'm assuming you don't know the content of the 2d matrix at compile time
[06:25:34] <FromDiscord> <Gumber> actually those wouldn't be dynamic
[06:25:52] <FromDiscord> <Gumber> sorry - I'm a bit tired but you'd just set a max length on the strings too and allocate those up front as well
[06:26:37] *** Quits: xet7 (~xet7@user/xet7) (Remote host closed the connection)
[06:28:19] *** Joins: xet7 (~xet7@user/xet7)
[06:59:26] <FromDiscord> <juan_carlos> Cool, thanks.
[06:59:48] <FromDiscord> <Gumber> yeah, np!!!
[07:05:14] <FromDiscord> <retkid> whats a good way to write a recursive statement
[07:05:29] <FromDiscord> <retkid> i have a function that returns a list that the function needs to be applied top
[07:05:30] <FromDiscord> <retkid> (edit) "top" => "to"
[07:05:36] <FromDiscord> <retkid> that returns a list...
[07:06:02] <FromDiscord> <retkid> not quite sure how to rap my head around it
[07:08:08] <FromDiscord> <retkid> like that?
[07:08:11] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3AyZ
[07:08:47] *** Joins: Guest9486 (~Guest94@2600:1700:74c4:a070:2818:d177:fa6f:9801)
[07:08:55] <Guest9486> hello everyone. 
[07:09:34] <Guest9486> I am wandering that if there is a way to obtain the type of a variable. For example, var i:int=0, can we obtain its type by a function?
[07:10:01] <Guest9486> Similar with the type as in the python
[07:10:47] <FromDiscord> <Elegantbeef> `typeof(i)`
[07:11:20] <Guest9486> Thank you
[07:11:55] <Guest9486> it works as I just tried.
[07:12:41] <FromDiscord> <Elegantbeef> no problem
[07:28:08] <FromDiscord> <Gumber> In reply to @retkid "i have a function": I'm not even sure what you're trying to get at here...
[07:28:24] <FromDiscord> <Gumber> which function needs to be applied to the list?
[07:28:26] <FromDiscord> <Gumber> the same function?
[07:28:32] <FromDiscord> <retkid> yes.
[07:28:33] <FromDiscord> <cabboose> Use a proxy template or procedure with a forward declaration↵(@retkid)
[07:28:40] <FromDiscord> <Elegantbeef> https://streamable.com/2m1xvk it verks!
[07:28:41] <FromDiscord> <Gumber> in your example you have `example2`
[07:28:44] <FromDiscord> <Gumber> where does that come from?
[07:29:06] <FromDiscord> <Gumber> it's the same as doing recursion in any other imperative / procedural language
[07:29:14] <FromDiscord> <retkid> this is jut some code i wrote half-hazardly before rushing off to do something else
[07:29:32] <FromDiscord> <retkid> none of that has any meaning
[07:29:44] <FromDiscord> <Gumber> okay so you just want to know how to do recursion in Nim? Do what cabboose said
[07:30:06] <FromDiscord> <retkid> In reply to @cabboose "Use a proxy template": can you link me something in the docs
[07:31:22] <FromDiscord> <Gumber> proxy templates are not unique to Nim
[07:31:29] <FromDiscord> <Gumber> they're an abstraction
[07:31:30] <FromDiscord> <retkid> i meant the second thing
[07:31:38] <FromDiscord> <Gumber> just look in the manual for forward declaration
[07:32:17] <FromDiscord> <Gumber> but I will find the relevant section for you, hold on
[07:32:29] <FromDiscord> <retkid> theres 2 sections
[07:32:52] <FromDiscord> <retkid> this is just a function declaration?
[07:33:19] <FromDiscord> <Gumber> https://nim-lang.github.io/Nim/manual.html#procedures
[07:33:29] <FromDiscord> <Gumber> it's a procedure declaration without a body
[07:33:46] <FromDiscord> <Gumber> so you can reference the symbol before it is implemented
[07:35:03] <FromDiscord> <Gumber> maybe seeing some recursive code in Nim would help you: https://rosettacode.org/wiki/Tree_traversal#Nim
[07:35:13] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[07:35:27] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[07:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[07:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:36:42] <FromDiscord> <Gumber> (edit) "maybe seeing some ... recursivetree" 03added "simple" | "code" => "tree traversal"
[07:37:00] <FromDiscord> <Gumber> or if you want the classic example
[07:37:32] <FromDiscord> <Gumber> sent a code paste, see https://play.nim-lang.org/#ix=3Az6
[07:37:40] <FromDiscord> <retkid> i think im just overcomplicating this lol
[07:37:43] <FromDiscord> <Gumber> probably
[07:37:53] <FromDiscord> <Gumber> maybe read the wikipedia page on recursion?
[07:38:08] <FromDiscord> <Gumber> https://en.wikipedia.org/wiki/Recursion#In_computer_science
[07:39:10] <FromDiscord> <Gumber> there's also a specialized form of recursion called tail-recursion
[07:39:37] <FromDiscord> <Gumber> but to understanding it, reading all of this page would be beneficial to you - https://en.wikipedia.org/wiki/Tail_call
[07:40:07] <FromDiscord> <Gumber> (edit) "to" => "as far as" | "it," => "it goes,"
[08:00:18] <FromDiscord> <geekrelief> In reply to @Elegantbeef "https://streamable.com/2m1xvk it verks!": oooh is this using nimscripter?
[08:03:44] <FromDiscord> <geekrelief> In reply to @Elegantbeef "https://streamable.com/2m1xvk it verks!": What have you been up to?! Anyway I can borrow this for The Machinery? 😄
[08:03:47] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:04:21] <FromDiscord> <Elegantbeef> I've been rewriting the interop
[08:04:24] <FromDiscord> <Elegantbeef> So in theory yes you can
[08:04:33] <FromDiscord> <Elegantbeef> Still on a branch cause need to document it more
[08:04:56] <FromDiscord> <Elegantbeef> This interop is the more efficient due using raw PNode logic
[08:05:17] <FromDiscord> <geekrelief> Awesome, pls let me know when it's ready for sharing! Thanks!
[08:05:32] <FromDiscord> <Elegantbeef> Well it's "ready" 😛
[08:05:47] <FromDiscord> <geekrelief> it's the 'bigrewrite' branch?
[08:05:53] <FromDiscord> <Elegantbeef> Yea
[08:06:06] <FromDiscord> <Elegantbeef> Look at `tests/example` for a usage
[08:06:17] <FromDiscord> <geekrelief> you read my mind! thx
[08:07:14] <FromDiscord> <Elegantbeef> For that drawim example https://play.nim-lang.org/#ix=3Az7 is all the extra code i wrote
[08:08:14] <FromDiscord> <Elegantbeef> There are some bugs presently with Nim -\> Nimscript dont know if it's cause of me or the VM but there is an error inside the VM popping up
[08:09:23] <FromDiscord> <geekrelief> Nice, I'll take a look tomorrow.  I'm a bit fried from dealing with gcc and nimterop.  Luckily, vcc and tcc are working smoothly.
[08:09:57] <FromDiscord> <geekrelief> In reply to @Elegantbeef "There are some bugs": For reference, what's the eror?
[08:10:00] <FromDiscord> <geekrelief> (edit) "eror?" => "error?"
[08:10:16] <FromDiscord> <Elegantbeef> Sending a json node -\> Nimscript causes an assertion defect
[08:10:53] <FromDiscord> <geekrelief> ok.  thanks.  signing off, g'night
[08:11:18] <FromDiscord> <Elegantbeef> Buh bye, feel free to ask if you have any questions or want to give any input on the design/ergonomics of it
[08:12:50] <FromDiscord> <Elegantbeef> I do want to try nico or drawim with wasm + nimscripter to see we can get an online educational drawing library like p5js \:D
[08:37:36] <FromDiscord> <impbox [ftsf]> Yass, I'll try get Nico working with 1.6 today
[08:39:53] <FromDiscord> <Elegantbeef> Lol nothing like a kick in the pants 🙂
[08:48:29] *** Quits: Guest9486 (~Guest94@2600:1700:74c4:a070:2818:d177:fa6f:9801) (Quit: Client closed)
[09:19:06] <FromDiscord> <impbox [ftsf]> at least i've got 1.6 running now, so hopefully fixing nico isn't a big job
[09:23:53] <FromDiscord> <impbox [ftsf]> `Warning: suspicious code`
[09:51:06] <FromDiscord> <impbox [ftsf]> `Warning: implicit conversion to 'cstring' from a non-const location this will become a compile time error in the future [CStringConv]` is there a reason for this? should we not convert to cstring?
[09:51:44] <FromDiscord> <impbox [ftsf]> i wish all the things like `CStringConv` were a link to documentation why you shouldn't do something
[09:52:00] <FromDiscord> <impbox [ftsf]> "A dangerous implicit conversion to cstring now triggers a [CStringConv] warning. This warning will become an error in future versions! Use an explicit conversion like cstring(x) in order to silence the warning."
[09:52:03] <FromDiscord> <impbox [ftsf]> why is it dangerous?
[09:52:11] <FromDiscord> <impbox [ftsf]> how can I make it not dangerous?
[09:52:19] <FromDiscord> <xflywind> add .cstring explicitly
[09:52:24] <FromDiscord> <impbox [ftsf]> sure, that will silence it
[09:52:30] <FromDiscord> <impbox [ftsf]> but will it make it not dangerous?
[09:52:46] <FromDiscord> <impbox [ftsf]> if i'm doing something dangerous i want to stop doing the dangerous thing not silence it
[09:53:41] <FromDiscord> <retkid> can i make a for statement
[09:53:53] <FromDiscord> <retkid> that expands as the list inwhich its based on expands?
[09:53:56] <FromDiscord> <retkid> (edit) "inwhich" => "in which"
[09:54:33] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Azr
[09:54:33] <FromDiscord> <retkid> loops forever
[09:54:45] <FromDiscord> <impbox [ftsf]> seems like it?
[09:54:59] <FromDiscord> <impbox [ftsf]> looks like it should loop forever
[09:54:59] <FromDiscord> <retkid> unless that already doesa that
[09:55:02] <FromDiscord> <retkid> (edit) "doesa" => "does a"
[09:55:05] <FromDiscord> <Elegantbeef> Nah you cannot mutate the iteration location
[09:55:09] <FromDiscord> <impbox [ftsf]> did you try it?
[09:55:10] <FromDiscord> <Elegantbeef> Use a while loop
[09:55:17] <FromDiscord> <retkid> ahhh
[09:55:20] <FromDiscord> <retkid> nice call
[09:55:20] <FromDiscord> <retkid> eya
[09:55:23] <FromDiscord> <retkid> (edit) "eya" => "yea"
[09:55:26] <FromDiscord> <retkid> just use it as an iterator
[09:56:00] <FromDiscord> <Elegantbeef> Actually that's just in Nim's seq iterator
[09:56:06] <FromDiscord> <Elegantbeef> If you override that iterator you can
[09:56:14] <FromDiscord> <impbox [ftsf]> you can make an iterator that will let you do it
[09:56:23] <FromDiscord> <impbox [ftsf]> iterators are pretty cool
[09:56:27] <FromDiscord> <retkid> In reply to @Elegantbeef "Actually that's just in": yep
[09:56:29] <FromDiscord> <retkid> thats what i thought
[09:58:35] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Azt
[09:58:46] <FromDiscord> <retkid> sent a code paste, see https://play.nim-lang.org/#ix=3Azu
[09:59:03] <FromDiscord> <retkid> wait
[09:59:22] <FromDiscord> <retkid> (edit) "https://play.nim-lang.org/#ix=3Azu" => "https://play.nim-lang.org/#ix=3Azv"
[09:59:28] <FromDiscord> <retkid> that wont create any problems as long as you dont pop the list
[09:59:32] <FromDiscord> <retkid> then it might create some issues
[09:59:44] *** Joins: Guest34 (~Guest34@2600:1700:74c4:a070:2818:d177:fa6f:9801)
[09:59:55] <FromDiscord> <retkid> but, simplicity is good here
[10:05:35] *** Joins: Vladar (~Vladar@46.162.2.53)
[10:06:36] <FromDiscord> <impbox [ftsf]> aww low/high(value) deprecated, I liked it, now I need to remember what type something is
[10:06:53] <FromDiscord> <impbox [ftsf]> or add typeof
[10:06:54] <FromDiscord> <Elegantbeef> `typeof(a).low` 😛
[10:08:49] <FromDiscord> <xflywind> implicit cstring conversion is disabled because it is more dangerous. explicit cstring conversion is still as unsafe as before.
[10:09:20] <FromDiscord> <impbox [ftsf]> what's unsafe about it?
[10:09:30] *** Quits: Guest34 (~Guest34@2600:1700:74c4:a070:2818:d177:fa6f:9801) (Quit: Client closed)
[10:09:42] <FromDiscord> <Elegantbeef> Depending on what the C does with the char\ it may point to bad memory later
[10:10:15] <FromDiscord> <Elegantbeef> In most cases it can be considered a safe operation
[10:10:21] <FromDiscord> <impbox [ftsf]> okay
[10:10:39] <FromDiscord> <impbox [ftsf]> so it's not the conversion that's unsafe, it's that C might do something unsafe with it?
[10:10:59] <FromDiscord> <xflywind> for example, returns a cstring which points to a local string on procs because string may be gc collected
[10:11:16] <FromDiscord> <xflywind> (edit) 04removed "because string may be gc collected"
[10:11:21] <FromDiscord> <Elegantbeef> Nim puts a `\0` after the last character so yea it's safe Nim -\> C
[10:12:03] <FromDiscord> <xflywind> sent a code paste, see https://play.nim-lang.org/#ix=3AzA
[10:12:18] <FromDiscord> <xflywind> https://nim-lang.github.io/Nim/manual.html#types-cstring-type
[10:30:37] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[10:30:53] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:33:52] <FromDiscord> <impbox [ftsf]> woo nico all working nice in 1.6 now, hopefully it still works with 1.4
[10:38:35] <FromDiscord> <impbox [ftsf]> @ElegantBeef new nico updated to work with 1.6 \o/  ready to be nimscripted
[10:38:54] <FromDiscord> <Elegantbeef> fun
[10:42:30] <FromDiscord> <impbox [ftsf]> can I just {.push:exportToScript.} ?
[10:42:38] <FromDiscord> <Elegantbeef> Nope
[10:42:43] <FromDiscord> <impbox [ftsf]> T_T
[10:42:57] <FromDiscord> <Elegantbeef> Those push pragmas do not play with macros well
[10:43:09] <FromDiscord> <Elegantbeef> I will have a block exportToScript
[10:43:42] <FromDiscord> <Elegantbeef> But also proc overloads dont work across the bridge, so generics/typeclasses are a no go
[10:44:32] <FromDiscord> <Elegantbeef> It's possible to support i suppose
[10:47:12] <FromDiscord> <Elegantbeef> Typeclasses atleast might be, generics certainly cannot be
[10:49:08] <FromDiscord> <haxscramper> When you create `proc generic[T]` on the nimscript side, I don't think it is possible to figure out exact type that was passed
[10:49:26] <FromDiscord> <haxscramper> So you need to generate `proc generic[T] = when ....`
[10:49:33] <FromDiscord> <haxscramper> And dispatch into concrete procs
[10:49:46] <FromDiscord> <haxscramper> At least passed PNode does not have enough information IIRC
[10:49:47] <FromDiscord> <Elegantbeef> Well yea nimscript cannot generate generics
[10:50:27] <FromDiscord> <Elegantbeef> Typeclasses might work though since it's a fixed set, but it'll be complicated
[10:52:57] *** Joins: max22- (~maxime@2a01cb088335980038ece50ee02a7251.ipv6.abo.wanadoo.fr)
[11:01:58] <FromDiscord> <impbox [ftsf]> @ElegantBeef does it support default args?
[11:02:11] <FromDiscord> <Elegantbeef> Havent tried it yet
[11:02:18] <FromDiscord> <Elegantbeef> Theoretically should
[11:02:59] <FromDiscord> <Rika> About to back read a thousand messages, wish me luck I guess
[11:05:11] <FromDiscord> <Elegantbeef> Presently i have a nice bug with float -\> VM
[11:05:27] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3AzH
[11:05:37] <FromDiscord> <impbox [ftsf]> close enough
[11:06:34] <FromDiscord> <Elegantbeef> Both are relatively 0 yes 😛
[11:07:22] <FromDiscord> <Rika> Probably a float bit size issue?
[11:07:32] <FromDiscord> <Rika> Or a misalignment
[11:07:39] <FromDiscord> <impbox [ftsf]> using an analog path to transfer stuff between nim and VM
[11:08:05] <FromDiscord> <impbox [ftsf]> cast to uint64 and compare the bits?
[11:08:46] <FromDiscord> <Rika> Can’t easily cast in VM
[11:12:07] <FromDiscord> <impbox [ftsf]> dang it
[11:12:23] <FromDiscord> <Elegantbeef> Fixed it!
[11:14:39] <FromDiscord> <Elegantbeef> I accidentally was converting all types to Pnodes instead of just non primitives
[11:16:15] <FromDiscord> <cabboose> Cringe
[12:13:31] <FromDiscord> <dom96> 'morning
[12:13:38] <FromDiscord> <Rika> gm
[12:13:49] <FromDiscord> <cabboose> Good arvo
[12:14:03] <FromDiscord> <impbox [ftsf]> o/ gday
[12:14:56] <FromDiscord> <cabboose> Howrya livin cobba
[12:15:01] *** Quits: kayabaNerve (~kayabaNer@user/kayabanerve) (Ping timeout: 252 seconds)
[12:42:19] *** Joins: Amun-Ra (~amun-ra@retro.rocks)
[13:05:49] <FromDiscord> <dom96> Lots of hacktoberfest candidate issues in the choosenim repo 🙂
[13:07:39] <FromDiscord> <dom96> first I need to fix it and the CI but once that's done if anyone is interested I'm happy to give pointers
[13:10:04] <supakeen> seems fun :)
[13:11:18] <FromDiscord> <dom96> oh no https://media.discordapp.net/attachments/371759389889003532/893794757971685406/unknown.png
[13:11:39] <FromDiscord> <dom96> seems like another zippy bug :/
[13:13:45] <supakeen> what about it?
[13:14:09] <FromDiscord> <dom96> very high memory usage
[13:15:28] <supakeen> oh right but another bug does it have many?
[13:18:20] <FromDiscord> <dom96> only one other I've found and fixed already
[13:18:55] <FromDiscord> <dom96> so not too bad, but high memory usage sounds tough to resolve
[13:19:20] <supakeen> well one can always see if the same happens with the libzip bindings
[13:19:31] <supakeen> some compression things like to use a lot of memory if they can
[13:23:42] *** Joins: tinytoast (~squeek@user/tinystoat)
[13:55:05] *** Joins: kayabaNerve (~kayabaNer@user/kayabanerve)
[14:09:36] <FromDiscord> <caramel.py> sent a long message, see http://ix.io/3AAs
[14:11:22] <FromDiscord> <dom96> !matrix
[14:11:23] <FromDiscord> <matrix-appservice-discord-t2bot> sent a long message, see http://ix.io/3qay
[14:11:35] <FromDiscord> <dom96> !matrix ban caramel.py
[14:11:38] <FromDiscord> <matrix-appservice-discord-t2bot> ERROR: No users matching caramel.py found
[14:12:11] <FromDiscord> <dom96> !matrix ban @caramel.py:matrix.org
[14:12:17] <FromDiscord> <matrix-appservice-discord-t2bot> sent a long message, see http://ix.io/3AAt
[14:15:27] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[14:18:16] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:21:01] <FromDiscord> <jmgomez> Hey guys, can Nim inherit from a Cpp class?
[14:23:52] <FromDiscord> <haxscramper> I've done this several times, but current implementation is not really good. So it is better to go step back and consider what exactly do you want to do?
[14:24:42] <FromDiscord> <haxscramper> And there are some important points that need to be accounter for, depending on your use case
[14:26:30] <FromDiscord> <jmgomez> Im considering to integrate nim with an existing cpp framework
[14:27:36] <FromDiscord> <jmgomez> Also, if you have a Cpp class A, which you inherit in nim as B. Any chance another cpp library could inherit it as C? I guess that's too much asking, rhgt
[14:30:56] <FromDiscord> <haxscramper> This can be done
[14:31:09] <FromDiscord> <haxscramper> In reply to @jmgomez "Im considering to integrate": Which framework
[14:31:30] <FromDiscord> <Recruit_main707> what i do is creating a cpp class N that inherits from cpp class A, then wrap that cpp class N and provide functions that can be called by its cpp methods
[14:31:31] <FromDiscord> <haxscramper> In the simplest form you can `importcpp` Cxx object as `{.inheritable, pure.}`
[14:31:38] <FromDiscord> <haxscramper> and then inherit nim things from it
[14:31:54] <FromDiscord> <haxscramper> `{.inheritable, pure, byref, header: "<header>".}`
[14:32:23] <FromDiscord> <haxscramper> Note that I wrote byref explicitly, this way `importcpp` from parent object methods would work as well
[14:32:52] <FromDiscord> <haxscramper> https://github.com/haxscramper/hcparse/issues/1#issuecomment-865188794
[14:33:34] <FromDiscord> <haxscramper> I haven't fully figure out implications of using `byref` instead of `bycopy`, but so far it seems to cause no untraceable interop bugs
[14:34:30] <FromDiscord> <jmgomez> In reply to @haxscramper "Which framework": UE. That's good news. I would like to integrate it first as a scripting lang (or even in a corner) to get used to it but I just want to make sure and understand what's possible before going crazy
[14:34:40] <FromDiscord> <haxscramper> there are also
[14:34:49] <FromDiscord> <haxscramper> well, if you need to only override methods
[14:34:55] <FromDiscord> <haxscramper> then there is a different approach as well
[14:35:19] <FromDiscord> <jmgomez> (edit) "and" => "I"
[14:35:21] <FromDiscord> <Recruit_main707> overriding is the hard part, specially without messing with vtables
[14:35:37] <FromDiscord> <haxscramper> https://github.com/haxscramper/hcparse/issues/2 https://github.com/haxscramper/hcparse/blob/master/src/hcparse/boost_wave/boost_wave.hpp#L53
[14:35:54] <FromDiscord> <haxscramper> In reply to @Recruit_main707 "overriding is the hard": you can get smart and not touch vtables
[14:36:11] <FromDiscord> <haxscramper> basically the idea is - derive once again, and make all methods call nim closures
[14:36:22] <FromDiscord> <haxscramper> and then overriding method is as simple as
[14:36:30] <FromDiscord> <haxscramper> `myObj = someClosure`
[14:36:50] <FromDiscord> <Recruit_main707> ive managed to do it, but messed up with emit quite a bit and im forced to use `include`instead of `import` so that the c++ code is in the correct place
[14:37:07] <FromDiscord> <haxscramper> https://github.com/haxscramper/hcparse/blob/master/src/hcparse/boost_wave/boost_wave.cpp#L244-L264
[14:37:19] <FromDiscord> <haxscramper> C++ side for closure override
[14:37:41] <FromDiscord> <jmgomez> I see, the use case it would be more like only override back in cpp (C) the methods that already existed in A. Not sure the implications with the vtables there
[14:38:12] <FromDiscord> <jmgomez> What Im trying to say is that I wouldnt be creating virtual methods in Nim. Just in Cpp
[14:38:31] *** Joins: pch_ (~pch@66.49.131.33)
[14:38:36] <FromDiscord> <haxscramper> mostly yes, though you can touch vtable if you want https://github.com/nim-lang/Nim/wiki/Playing-with-CPP--VTABLE-from-Nim
[14:38:49] <FromDiscord> <haxscramper> this can even be automated with macros
[14:39:01] <FromDiscord> <haxscramper> so final result would be just as good-looking as regular
[14:39:05] <FromDiscord> <haxscramper> in theory
[14:39:08] <FromDiscord> <Recruit_main707> now we only need the macro :p
[14:39:27] <FromDiscord> <haxscramper> "you can probably write a macro for that"
[14:39:40] <FromDiscord> <haxscramper> famous last words
[14:40:15] <FromDiscord> <Rika> @ beef
[14:40:31] <FromDiscord> <jmgomez> Okay, this has been really helpful. Will get more familiar with Nim before moving forwards but definitely I appreciate your help!
[14:40:46] *** Quits: kinkinkijkin (~pch@66.49.131.33) (Ping timeout: 252 seconds)
[14:58:53] *** Quits: sagax (~sagax_nb@user/sagax) (Ping timeout: 264 seconds)
[15:10:38] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[15:12:41] *** Quits: max22- (~maxime@2a01cb088335980038ece50ee02a7251.ipv6.abo.wanadoo.fr) (Ping timeout: 264 seconds)
[15:25:12] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[15:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.3)
[15:36:55] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:00:37] *** Joins: max22- (~maxime@2a01cb08833598003de9b0144dce98c8.ipv6.abo.wanadoo.fr)
[16:15:54] <FromDiscord> <tandy> is there a way to make nim tell me when im importing something from nativesockets?
[16:16:11] <FromDiscord> <tandy> im trying to compile for the js backend and i cant see where im going wrong
[16:17:39] <FromDiscord> <haxscramper> nim devel has `--processing:filenames` that lists all imports
[16:18:12] <FromDiscord> <haxscramper> https://github.com/nim-lang/RFCs/issues/411#issuecomment-904959558
[16:18:53] <FromDiscord> <tandy> oh thats useful
[16:19:04] <FromDiscord> <tandy> wait did uri somehow require nativesockets now?
[16:21:40] <FromDiscord> <tandy> hmm it always did i guess
[16:22:19] <FromDiscord> <tandy> is there an encodeURL proc for the js backend?
[16:24:43] <FromDiscord> <lel> can someone give me a hint on how to deal with a dynamic number of arguments for a string to be formatted? basically i'm wondering if it's possible to use `strformat` like `vprintf()` in C or `fmt.Printf(foo, bar...)` in go. maybe i'm missing something, but it doesn't seem possible from looking at the docs?
[16:25:54] <FromDiscord> <xflywind> In reply to @tandy "wait did uri somehow": https://nim-lang.github.io/Nim/uri.html#6
[16:26:00] <FromDiscord> <xflywind> it is pure
[16:26:29] <FromDiscord> <haxscramper> https://nim-lang.org/docs/strutils.html#format%2Cstring%2Cvarargs%5Bstring%2C%5D strutils support runtime string formatting↵(@lel)
[16:27:02] <FromDiscord> <lel> @haxscramper ah thanks, that's what i was looking for
[16:34:27] *** Joins: arkurious (~arkurious@user/arkurious)
[16:35:52] <FromDiscord> <KingDarBoja> I saw a ping here, what happened?
[16:37:54] <FromDiscord> <cabboose> There’s no pingas yeeright m8
[16:38:06] <FromDiscord> <Rika> damn, you a boomer?
[16:39:22] <NimEventer> New post on r/nim by thelolrus: 10am EST LIVE Nim Game programming - Ludum Dare 49, see https://reddit.com/r/nim/comments/pzut5r/10am_est_live_nim_game_programming_ludum_dare_49/
[16:50:41] <FromDiscord> <cabboose> Can I skip docgen with a pragma for a proc?
[16:50:44] <FromDiscord> <Vishal> what is this server for?
[16:50:49] <FromDiscord> <Vishal> Game-Dev?
[16:51:20] <FromDiscord> <cabboose> It’s for the nim programming language
[16:51:30] <FromDiscord> <cabboose> There is a sub channel for game-dev
[16:57:16] <FromDiscord> <Vishal> nim is used for..?
[16:57:44] <FromDiscord> <dom96> programming 😄
[17:00:13] <FromDiscord> <tandy> coool↵(<@709044657232936960_=4eim=45venter=5b=49=52=43=5d>)
[17:00:17] <FromDiscord> <haxscramper> no
[17:00:38] <FromDiscord> <Vishal> In reply to @dom96 "programming 😄": thx
[17:00:42] <FromDiscord> <haxscramper> nim doc is very smort
[17:01:07] <FromDiscord> <Vishal> In reply to @cabboose "It’s for the nim": he already told me that thoug↵I meant as in what is its purpose mostly?↵↵gaming
[17:01:11] <FromDiscord> <Vishal> (edit) "mostly?↵↵gaming" => "mostly?↵↵gaming?"
[17:01:18] <FromDiscord> <Yardanico> In reply to @Vishal "he already told me": "gaming" is when you play games
[17:01:22] <FromDiscord> <Vishal> (edit) "In reply to @cabboose "It’s for the nim": he already told me that thoug↵I meant as in what is its purpose mostly?↵↵gaming?" => "sent a long message, see http://ix.io/3AB3"
[17:01:31] <FromDiscord> <Yardanico> there's no "specific" purpose, you just use it to create anything you want
[17:01:43] <FromDiscord> <Vishal> (edit) "http://ix.io/3AB3" => "http://ix.io/3AB4"
[17:02:04] <FromDiscord> <Vishal> In reply to @Yardanico "there's no "specific" purpose,": correct↵but just like python is good for AI ML↵in that sense
[17:02:40] <FromDiscord> <Vishal> see you guys someday!↵↵bye @everyone
[17:03:07] <FromDiscord> <dom96> aww, I was gonna make a LOTR reference
[17:03:08] <FromDiscord> <Yardanico> bad attempt
[17:03:20] <FromDiscord> <Vishal> In reply to @dom96 "aww, I was gonna": hm?
[17:03:23] <FromDiscord> <Vishal> In reply to @Yardanico "bad attempt": hm?
[17:03:30] <FromDiscord> <Yardanico> In reply to @Vishal "hm?": you tried to use <at> everyone
[17:03:39] <FromDiscord> <Vishal> In reply to @Yardanico "you tried to use": i knw
[17:03:40] <FromDiscord> <dom96> One language to rule them all 🙂
[17:03:55] <FromDiscord> <Vishal> In reply to @dom96 "One language to rule": that helps thx
[17:04:06] <FromDiscord> <Vishal> I got the jist
[17:04:20] <FromDiscord> <Vishal> In reply to @dom96 "aww, I was gonna": whats LOTR?
[17:04:29] <FromDiscord> <dom96> Lord of the Rings
[17:04:41] <FromDiscord> <lel> sent a long message, see http://ix.io/3AB6
[17:05:11] <FromDiscord> <Yardanico> how do you want to format your string? can you show an example of what you expect?
[17:05:13] <FromDiscord> <haxscramper> `seq[T]` is a `varargs[T]`
[17:05:25] <FromDiscord> <Yardanico> maybe you just want `join` from strutils ?
[17:05:33] <FromDiscord> <haxscramper> `seq/openarray` is acceptable for `varargs`
[17:06:11] <FromDiscord> <lel> i want to call format string, with a dynamic string and a dynamic seq of uint16, they are not uniform, so they're not all formatted the same
[17:09:33] <FromDiscord> <Rika> your seq has to be `seq[string]`
[17:09:50] <FromDiscord> <Rika> otherwise it will not match `varargs[string]`
[17:10:10] <FromDiscord> <Rika> !eval import strutils; import sequtils; echo "$#".format(@[2,3,5,6].mapIt($it))
[17:10:13] <NimBot> 2
[17:10:24] <FromDiscord> <Rika> import strutils; echo \"\$#\".format(@[2,3,5,6])
[17:10:37] <FromDiscord> <Rika> ah, didnt eval
[17:10:42] <FromDiscord> <Rika> !eval import strutils; echo "$#".format(@[2,3,5,6])
[17:10:46] <NimBot> @[2, 3, 5, 6]
[17:10:55] <FromDiscord> <Yardanico> :D
[17:11:07] <FromDiscord> <Yardanico> rika defeated by nimbot
[17:11:15] <FromDiscord> <lel> ok, i see, yeah i can construct a string seq out of them manually, but usually... that's exactly what printf does for you... so i didn't consider that
[17:11:18] <FromDiscord> <Rika> ? i just forgot to write eval lol
[17:11:32] <FromDiscord> <Rika> it is
[17:11:35] <FromDiscord> <Yardanico>  https://media.discordapp.net/attachments/371759389889003532/893855231081844756/unknown.png
[17:11:54] <FromDiscord> <Rika> ? what's the issue?
[17:12:12] <FromDiscord> <Yardanico> you said that the seq has to be seq[string] but you successfully formatted a seq[int]
[17:12:16] <FromDiscord> <Yardanico> because there's https://nim-lang.org/docs/strutils.html#format%2Cstring%2Cvarargs%5Bstring%2C%5D
[17:12:21] <FromDiscord> <Rika> it does for the intent of what lel wants
[17:12:22] <FromDiscord> <Rika> context
[17:12:32] <FromDiscord> <Rika> if it's not seq[string] it will not match varargs[string] and will instead be stringified
[17:12:48] <FromDiscord> <Yardanico> ah yeah mean it like that
[17:12:49] <FromDiscord> <Rika> yard please xd
[17:12:55] <FromDiscord> <Rika> of course
[17:13:04] <FromDiscord> <Yardanico> In reply to @Rika "yard please xd": i can't read into your mind, y'know
[17:13:20] <FromDiscord> <Rika> you can read the past messages
[17:13:33] <FromDiscord> <Rika> "but when i do strutils.format(foostr, barseq) it takes barseq as one argument instead of taking it as the varargs"
[17:18:12] <FromDiscord> <lel> sent a code paste, see https://play.nim-lang.org/#ix=3ABb
[17:22:45] <FromDiscord> <lel> in go, i would just use the spread operator `.format(foostr, barseq...)`. what i could do to my understading is cast these to strings manually, construct a new seq which is `foobar = @[foostr, barseq...]` and then use that with `unpackVarargs(strutils.format, foobar)`.
[17:23:14] <FromDiscord> <Rika> i just showed that barseq has to be  a seq[string]
[17:23:15] <FromDiscord> <Yardanico> then just do it as Rika said
[17:23:25] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3ABe
[17:23:36] <FromDiscord> <Rika> yes i know that it's not usually supposed to be like that
[17:27:07] <FromDiscord> <Rika> yard do you think `seq[not T]` should match `varargs[T, convfunc]`?
[17:39:27] <FromDiscord> <cabboose> That’s silly. I might export an implementation proc for use by helper modules within my library/package without wanting it to include it in the docgen 🤨
[17:39:41] <FromDiscord> <cabboose> Having to write “INTERNAL USE GO AWAY” is silly
[17:42:28] <FromDiscord> <dom96> @cabboose you could probably hack it into the docgen fairly easily, maybe you could write a quick PR? 🙂
[17:44:17] <FromDiscord> <haxscramper> yeah
[17:44:20] <FromDiscord> <haxscramper> prs are welcome
[17:44:26] <FromDiscord> <cabboose> ima\_2362477.jpeg https://media.discordapp.net/attachments/371759389889003532/893863498692575262/ima_2362477.jpeg
[17:44:26] <FromDiscord> <haxscramper> tooling sucks but prs are welcome
[17:44:43] <FromDiscord> <haxscramper> there is like so much stuff missing for nim docgen
[17:44:48] <FromDiscord> <cabboose> I don’t actually know how to do pragmas and implement their behaviour
[17:44:50] <FromDiscord> <cabboose> But eventually
[17:44:54] <FromDiscord> <haxscramper> `@internal`, `@arg`, `@return`, `@inject`
[17:45:08] <FromDiscord> <haxscramper> and this should not be a pragma btw
[17:45:11] <FromDiscord> <cabboose> I have to study for exam on Monday but I’m just doing some cleaning for loony
[17:45:11] <FromDiscord> <haxscramper> ah
[17:45:41] <FromDiscord> <dom96> why shouldn't it be a pragma?
[17:45:43] <FromDiscord> <haxscramper> because we should not be adding pragmas to the language in order to make up for external tools
[17:45:47] <FromDiscord> <haxscramper> not being good enough
[17:45:56] <FromDiscord> <haxscramper> and docgen should be an external tool
[17:46:19] <FromDiscord> <haxscramper> it can be trivially implemented outside of compiler
[17:47:08] <FromDiscord> <haxscramper> there is so much holes nim `nim doc` it is not even funny to suggest fixing IMO, it basically just scraps `.nim` file and puts it into `.html`
[17:47:16] <FromDiscord> <dom96> to be fair, you can define pragmas outside the compiler too
[17:47:19] <FromDiscord> <haxscramper> no structuring, barely formatting, no docgen-specific tools
[17:47:28] <FromDiscord> <haxscramper> those are macro pragmas↵(@dom96)
[17:47:31] <FromDiscord> <dom96> yes yes, everything sucks
[17:47:31] <FromDiscord> <haxscramper> or template pragmas
[17:47:41] <FromDiscord> <dom96> maybe time to actually fix stuff instead of complaining about it?
[17:47:50] <FromDiscord> <cabboose> Ooo boy
[17:47:57] <FromDiscord> <cabboose> I’m gonna go study lol
[17:48:03] <FromDiscord> <cabboose> Nope
[17:48:38] <FromDiscord> <haxscramper> As I said just now, there is literally as much missing functionality in nim doc as there is `nim doc` itself↵(@dom96)
[17:48:52] <FromDiscord> <haxscramper> so there is nothing really that can be "fixed"
[17:48:58] <FromDiscord> <haxscramper> it's the same situation with c2nim
[17:49:03] <FromDiscord> <haxscramper> everyone writes their own tool
[17:49:13] <FromDiscord> <haxscramper> because there is nothing to build on
[17:49:22] <FromDiscord> <dom96> `nim doc` has received many improvements over the years
[17:49:31] <FromDiscord> <haxscramper> just nobody really cares about docgen being good enough, so not everyone is writing docgen
[17:49:37] <FromDiscord> <dom96> so clearly it's not something that is completely unimproveable
[17:49:57] <FromDiscord> <haxscramper> oh, no, except every single project having to implement their own documentation stitcher because nim doc can't even handle `--project`
[17:51:15] <FromDiscord> <Rika> In reply to @cabboose "That’s silly. I might": cabboose cant you just `when not defined(nimdoc):` or so? im not sure
[17:51:27] <FromDiscord> <dom96> There is an argument to be made that the core team should focus on filling these gaps, but I'm sure it would be resolved if Status (or another org that needs it and is willing to pay) needed it
[17:51:50] <FromDiscord> <cabboose> Ooo yeah that would be what I need ay↵(@Rika)
[17:51:58] <FromDiscord> <dom96> In reply to @Rika "cabboose cant you just": oh yeah, that will work
[17:52:03] <FromDiscord> <haxscramper> this would work only if proc is never used in the same module↵(@Rika)
[17:52:21] <FromDiscord> <cabboose> Oh yeah good point
[17:52:23] <FromDiscord> <Rika> wdym
[17:52:23] <FromDiscord> <haxscramper> so only if it is declared, but used somewere else
[17:52:24] <FromDiscord> <dom96> just wrap all usages with the same 😄
[17:52:25] <FromDiscord> <cabboose> Fak
[17:52:32] <FromDiscord> <Rika> oh true i get it
[17:52:37] <FromDiscord> <haxscramper> or if `nim doc --project` is not running
[17:52:40] <FromDiscord> <cabboose> I want other ones to be exposed though
[17:52:41] <FromDiscord> <haxscramper> in this case it is 100% useless
[17:52:58] <FromDiscord> <Rika> `when not defined(nimdoc):` proc exported↵outside, proc not exported and is blank
[17:52:58] <FromDiscord> <Rika> ?
[17:53:01] <FromDiscord> <Rika> kinda stupid hack
[17:53:10] <FromDiscord> <Rika> blank as in ` = discard`
[17:53:31] <FromDiscord> <haxscramper> this is `@internal{}` tag functionality
[17:53:44] <FromDiscord> <cabboose> That’s pain but would probably work for now cheers rika
[17:54:23] <FromDiscord> <Rika> hows the @ tags supposed to work hax?
[17:55:18] <FromDiscord> <dom96> hacks is what makes the programming world move forward, you can't avoid them forever
[17:55:51] <FromDiscord> <Rika> hacks are temporary yet permanent
[17:55:55] <FromDiscord> <dom96> so use it and make a note referencing an issue to add proper support for it in the docgen 🙂
[17:57:28] <FromDiscord> <haxscramper> just like doxygen javadoc, typescript doc etc↵(@Rika)
[17:57:40] <FromDiscord> <haxscramper> you putproc ar() +## @INTERNAL
[17:57:49] <FromDiscord> <Rika> i am not a fan
[17:57:57] <FromDiscord> <haxscramper> and documentation generator understands it
[17:58:20] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3ABn
[17:58:38] <FromDiscord> <Rika> raise (ref Defect)(nil)
[17:58:40] <FromDiscord> <haxscramper> Functions, templates, procedures, macros, multiple embedded DSL, compile-time validation, compilation to different backends
[17:58:50] <FromDiscord> <Rika> okay
[17:58:55] <FromDiscord> <Rika> it makes more sense now i guess
[17:58:59] <FromDiscord> <haxscramper> objects, ref objects, bitset flags used for configuration of different things
[17:59:08] <FromDiscord> <Rika> im still iffy about comment annotations
[17:59:17] <FromDiscord> <haxscramper> I can't even say that I `@inject{}` some variable in a meaningful way
[17:59:32] <FromDiscord> <haxscramper> Or what `tuple[code: int, err: string]` means
[17:59:54] <FromDiscord> <haxscramper> There is zero semantic information in documentation anyway
[18:00:59] <FromDiscord> <haxscramper> And so on
[18:01:03] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ABo
[18:01:22] <FromDiscord> <haxscramper> Or you know
[18:01:27] <FromDiscord> <haxscramper> going back to basic stuff
[18:01:44] <FromDiscord> <haxscramper> being able to generate documentation for `--project` and not ending up with huge pile of garbage
[18:01:48] <FromDiscord> <dom96> yeah, documentation for tracked exceptions would be awesome
[18:01:58] <FromDiscord> <haxscramper> https://haxscramper.github.io/hmisc/theindex.html
[18:02:03] <FromDiscord> <haxscramper> like look at this POS
[18:02:14] <FromDiscord> <dom96> and forcing each defined exception to be documented would be a nice feature
[18:02:32] <FromDiscord> <haxscramper> I want to know if anyone here can just open this and say like "yeah, that's how `nim doc2 --project` should function"
[18:02:42] <FromDiscord> <haxscramper> exactluy↵(@dom96)
[18:02:47] <FromDiscord> <haxscramper> there are tons of stuff to experiment on
[18:02:58] <FromDiscord> <haxscramper> and if I just go with PRs I would either have to spend developer's time
[18:03:04] <FromDiscord> <haxscramper> on trying to come up with good solution
[18:03:07] <FromDiscord> <haxscramper> fromt he first time
[18:03:12] <FromDiscord> <haxscramper> which is impossible
[18:03:31] <FromDiscord> <haxscramper> or I can develop my external tool that works with all of this
[18:03:40] <FromDiscord> <haxscramper> scrap it twenty times and then come up with good solutio
[18:04:07] <FromDiscord> <haxscramper> so `nim doc` just like c2nim is a lowest common denominator
[18:04:18] <FromDiscord> <haxscramper> it works not too bad to immediately fix it
[18:04:23] <FromDiscord> <haxscramper> But it is not smart in any way
[18:04:47] <FromDiscord> <haxscramper> ah
[18:04:50] <FromDiscord> <cabboose> They’re good. I mean a person either cares enough about their documentation to want a standardised way for it to be nice or doesn’t and just writes comments everywhere↵(@Rika)
[18:05:05] <FromDiscord> <cabboose> But you don’t have to go full gung ho if you don’t want to
[18:05:08] <FromDiscord> <haxscramper> also it does not understand the code, it just rearranges comments somehhat
[18:05:20] <FromDiscord> <haxscramper> for example these enum documentation comments
[18:05:21] <FromDiscord> <Rika> well im still unsure why certain things shouldnt be pragmas
[18:05:49] <FromDiscord> <haxscramper> well, there is a `import {.docgen.}` proposal already
[18:05:57] <FromDiscord> <haxscramper> I mean, mixing module system with documentation generation
[18:06:00] <FromDiscord> <haxscramper> what could be better
[18:06:04] <FromDiscord> <Rika> In reply to @Rika "well im still unsure": most things of course should be commentsl ike idk author or w/e
[18:06:23] <FromDiscord> <Rika> but i dont know why you wouldnt want the `internal` thing above to be a pragma
[18:06:37] <FromDiscord> <haxscramper> https://haxscramper.github.io/hcparse-doc/src/hcparse/libclang.html#CXCursorKind jsut look at it
[18:06:43] <FromDiscord> <haxscramper> and tell me enums should not be put in tables
[18:07:01] <FromDiscord> <haxscramper> but this would take god-who-knows how much time to prove to everyone
[18:07:27] <FromDiscord> <haxscramper> but I can't just ask nim doc to give me simple json, because it outputs this html-mixed-with-json thing
[18:08:21] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ABp
[18:08:27] <FromDiscord> <haxscramper> Doesn't create `htmldocs` dir when asking for json
[18:08:31] <FromDiscord> <cabboose> I’m not that much of a developer; but I’m probably more on the lines of not wanting doc stuff to be part of source code you know? The more pragmas I have to use the more messy things get↵(@Rika)
[18:09:03] <FromDiscord> <Rika> idk man im more of the reverse
[18:10:10] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3ABs
[18:10:13] <FromDiscord> <haxscramper> That's how nim doc gives me json
[18:10:16] <FromDiscord> <haxscramper> yay, way to goi
[18:10:20] <FromDiscord> <haxscramper> so much code understanding
[18:10:32] <FromDiscord> <haxscramper> `"code": <verbatim original code>`
[18:11:12] <FromDiscord> <haxscramper> In reply to @dom96 "yes yes, everything sucks": so going back to this comment
[18:11:20] <FromDiscord> <haxscramper> yes everything about nim doc does sucjk
[18:11:22] <FromDiscord> <haxscramper> (edit) "sucjk" => "suck"
[18:11:53] <FromDiscord> <haxscramper> and "prs are welcome" is not how this should be handled before there is some basic understanding of what features there must be
[18:12:21] <FromDiscord> <haxscramper> If we just start throwing random prs all around this would solve nothing and spend a lot more time
[18:12:39] <FromDiscord> <haxscramper> especially spend core developer's time
[18:12:39] <FromDiscord> <dom96> "PRs are welcome" is a short-cut to: please help us out
[18:12:49] <FromDiscord> <haxscramper> there is no thing to help about
[18:13:03] <FromDiscord> <haxscramper> this thing have to be reinvented from scratch at this point
[18:13:29] <FromDiscord> <dom96> well I disagree, but feel free to write a doc gen from scratch
[18:13:38] <FromDiscord> <haxscramper> already doin it
[18:13:55] <FromDiscord> <dom96> it's one piece of tooling that won't fracture the community
[18:14:06] <FromDiscord> <haxscramper> yeah, not fracturing commuity
[18:14:10] <FromDiscord> <dom96> so yeah, by all means
[18:14:57] <FromDiscord> <cabboose> We all love nim. All will be k
[18:15:41] <FromDiscord> <Rika> why not all will be nim
[18:15:52] <FromDiscord> <dom96> All will be Nimians
[18:15:56] <FromDiscord> <dom96> or Nimmers
[18:16:00] <FromDiscord> <dom96> we should do a poll about this
[18:16:15] <FromDiscord> <Rika> nimian sounsd like youre calling us monkeys
[18:16:16] <FromDiscord> <Rika> lmfao
[18:16:26] <FromDiscord> <cabboose> Pls no more polls 🥴
[18:16:29] <FromDiscord> <dom96> Homo Nimians
[18:16:37] <FromDiscord> <cabboose> Too many dreams dashed
[18:16:55] <FromDiscord> <dom96> what polls dashed your dreams? 😮
[18:17:12] <FromDiscord> <cabboose> That one that ended with year of tooling
[18:17:26] <FromDiscord> <cabboose> That was 🪦
[18:17:42] <FromDiscord> <dom96> huh, the Nim community survey?
[18:19:05] <FromDiscord> <haxscramper> sent a long message, see http://ix.io/3ABu
[18:19:13] <FromDiscord> <haxscramper> well, nimble certainly got some effort put in
[18:20:01] <FromDiscord> <dom96> true, I guess you could say the IC efforts are to improve nimsuggest
[18:20:06] <FromDiscord> <tandy> is status paying for tooling?
[18:20:38] <FromDiscord> <haxscramper> status paid for  https://github.com/nim-lang/nimble/pull/913
[18:20:45] <FromDiscord> <dom96> Status is paying for lockfiles (and the other features they added)
[18:20:58] <FromDiscord> <haxscramper> and they mentioned on seveal occasions that they were looking for someone to work on tooling
[18:20:59] <FromDiscord> <tandy> oh cool
[18:21:11] <FromDiscord> <haxscramper> but I haven't seen any progress on that part
[18:21:11] <FromDiscord> <dom96> But they also contribute a lot to Nim core
[18:21:18] <FromDiscord> <dom96> (monetarily)
[18:21:26] <FromDiscord> <tandy> surprised you havent taken that up ahhah
[18:21:41] <FromDiscord> <tandy> haxdoc in std lib when
[18:21:49] <FromDiscord> <haxscramper> never
[18:21:50] <FromDiscord> <haxscramper> ever
[18:22:09] <FromDiscord> <haxscramper> this is not going to be added to the stdlib because stuff like this has no business being in stdlib
[18:33:44] <FromDiscord> <gnu+linux user> seems nims implementation of setCursorXPos is not working correctly on dragonflybsd 's tty
[18:34:08] <FromDiscord> <gnu+linux user> it anyways starts writing to stdout at 0
[18:35:25] <FromDiscord> <gnu+linux user> its fine for freebsd's and linux's tty
[18:36:45] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[18:42:51] *** Joins: Guest97 (~Guest97@2600:1700:74c4:a070:d45c:3e8c:dbe7:b1ae)
[18:51:47] *** Quits: Guest97 (~Guest97@2600:1700:74c4:a070:d45c:3e8c:dbe7:b1ae) (Quit: Client closed)
[18:53:21] <FromDiscord> <exelotl> is there a nim sets equivalent to `foo ^= (1 << myFlag)`
[18:53:50] <FromDiscord> <exelotl> i.e. toggle myFlag bit on or off
[18:56:04] <FromDiscord> <exelotl> sent a code paste, see https://play.nim-lang.org/#ix=3ABJ
[18:56:54] <FromDiscord> <haxscramper> You can overload `^=` for `var set[enum]`
[18:57:10] <FromDiscord> <haxscramper> I don't think there is any built-in for this functionality though
[18:57:40] <FromDiscord> <haxscramper> or `.flip`
[19:02:26] <FromDiscord> <Rika> toggle might be a nicer name
[19:04:06] <FromDiscord> <haxscramper> it has different number of characters from excl
[19:04:12] <FromDiscord> <haxscramper> very important yeah
[19:05:04] <FromDiscord> <cabboose> Like you want the complement of a set?↵(@exelotl)
[19:05:32] <FromDiscord> <cabboose> If you have devel check out setutils
[19:05:39] <FromDiscord> <cabboose> Or have a look at the lib on the repo
[19:05:45] <FromDiscord> <cabboose> Std/setutils
[19:07:47] <FromDiscord> <Rika> no
[19:08:07] <FromDiscord> <Rika> he only wants to flip one flag
[19:08:10] <FromDiscord> <Rika> not eveyrthing
[19:10:21] <FromDiscord> <cabboose> But if it’s a set wouldnt you just excl that flag
[19:10:32] <FromDiscord> <Rika> flip
[19:10:34] <FromDiscord> <Rika> as in
[19:10:35] <FromDiscord> <Rika> toggle
[19:10:42] <FromDiscord> <cabboose> Ok
[19:10:44] <FromDiscord> <Rika> if its excluded you include it, if its included you exclude it
[19:10:50] <FromDiscord> <cabboose> Convert it to a uint
[19:10:55] <FromDiscord> <cabboose> XOR that flag
[19:11:14] <FromDiscord> <Rika> i assume he doesnt want to go that route
[19:11:25] <FromDiscord> <cabboose> fair
[19:12:27] <FromDiscord> <Goel> We need more Nim surveys
[19:18:53] *** Joins: costledger_ (~cost@103.134.42.228)
[19:21:22] *** Parts: costledger_ (~cost@103.134.42.228) ()
[19:24:22] <FromDiscord> <exelotl> In reply to @Rika "i assume he doesnt": it does make it a 1-liner, but doesn't work in the VM :(
[19:24:33] <FromDiscord> <exelotl> `let flags = cast[CellFlags](cast[uint](k.flags) xor (1 shl cfHFlip.uint))`
[19:24:48] <FromDiscord> <exelotl> and it's pretty ugly lol
[19:25:30] <FromDiscord> <Rika> just make the proc lmao imo its better
[19:25:36] <FromDiscord> <Rika> like what hax said
[19:26:48] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:26:55] <FromDiscord> <exelotl> I wonder if the C compiler knows how to optimise the 4 liner
[19:27:06] <FromDiscord> <exelotl> since that's what I'll have to put in the proc
[19:29:08] <FromDiscord> <haxscramper> if you care about that you might as well put it into `template` instead of a proc to save on call time↵(@exelotl)
[19:30:00] <FromDiscord> <exelotl> yeah, or make it inline
[19:35:18] <FromDiscord> <mtckmeek9891> so why isnt Nim getting the attention it deservea
[19:35:43] <FromDiscord> <cabboose> What you mean
[19:36:00] <FromDiscord> <mtckmeek9891> like why arwnt more people using it
[19:36:19] <FromDiscord> <dom96> are you using it?
[19:36:43] <FromDiscord> <mtckmeek9891> ive done some reading and Nim truly seems awesome. no im not cuz i just found out about it 2 days ago..,3.,
[19:38:00] <FromDiscord> <mtckmeek9891> im just sayin it seems like a very handy language and i guess im just a little surprised ive never heard of it b4
[19:38:02] <FromDiscord> <cabboose> It’s a language still with a lot of competition
[19:38:07] <FromDiscord> <dom96> Reason Nr.1: marketing. Nim needs more and better marketing 🙂
[19:38:11] <FromDiscord> <cabboose> And is niche
[19:38:32] <FromDiscord> <Yardanico> wouldn't say that nim is exactly "niche" at this point honestly
[19:38:55] <FromDiscord> <mtckmeek9891> it seems very diverse
[19:39:12] <FromDiscord> <mtckmeek9891> its like Lua but on pcp
[19:39:16] <FromDiscord> <mtckmeek9891> or something
[19:40:30] <FromDiscord> <cabboose> Ye it’s pretty damn good
[19:40:33] <FromDiscord> <cabboose> Get on it
[19:57:18] <FromDiscord> <Yardanico> trying to make cosmonim work again... https://media.discordapp.net/attachments/371759389889003532/893896933247176734/unknown.png
[19:57:37] <FromDiscord> <Yardanico> for some reason it doesn't really like externs or something, maybe need to try writing C code that does the same extern stuff as nim
[20:06:25] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[20:07:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[20:20:10] <FromDiscord> <dom96> you guys ever seen this error when running build_all.sh? https://media.discordapp.net/attachments/371759389889003532/893902693326782534/unknown.png
[20:26:46] <FromDiscord> <dom96> either I'm missing something or this has been broken for 3 months... https://github.com/nim-lang/Nim/blame/devel/tools/deps.nim#L32
[20:52:41] <FromDiscord> <Yardanico> i think i'm going insane with this cosmopolitan stuff, it's like there's something wrong with the stack itself (or the registers)
[20:53:08] <FromDiscord> <Yardanico> if the addInt line is uncommented, it runs and prints that message, but if it's not uncommented, that upper printf isn't even executed https://media.discordapp.net/attachments/371759389889003532/893910985813930144/unknown.png
[20:53:33] <FromDiscord> <Yardanico> (edit) "uncommented," => "commented," | "uncommented," => "commented,"
[21:01:18] <FromDiscord> <dom96> grrr, old versions of Nim source code have a `build_all.sh` and it just plain doesn't work :/
[21:33:27] *** Quits: max22- (~maxime@2a01cb08833598003de9b0144dce98c8.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[21:34:15] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
[21:51:53] <FromDiscord> <matkuki> Hi all.↵I have code that has an object with a lot of fields that are assigned to from parsed data: https://play.nim-lang.org/#ix=3ACf↵In the example I give only 3 fields, but in real code it's more like 40. ↵Question: Is there a way to replace the `if` statements with something like a macro that goes over all items in the FIELDS table and generates `if` statements instead?
[21:53:12] <FromDiscord> <Yardanico> @matkuki will all your strings be in form "letters<semicolon>"?
[21:53:22] <FromDiscord> <Yardanico> if so, you don't need to have a lot of these if statements because that'll be quite inefficient and cumbersome
[21:53:36] <FromDiscord> <Yardanico> if it's just letters + semicolon then you can just parse the string until the semicolon
[21:53:54] <FromDiscord> <Yardanico> is the format you'trying to parse public?
[21:55:29] <FromDiscord> <Yardanico> but anyway, even if you were to stick to your style of code, yes, you can write a macro like that
[21:55:38] <FromDiscord> <Yardanico> oh, seems like you always split by :
[21:55:52] <FromDiscord> <matkuki> `will all your strings be in form "letters<semicolon>"`↵Yes↵`is the format you'trying to parse public?`↵Yes, it's the yeelight protocol response. But in general I wish to know if there is a mechanism to remove the `if`s?
[21:56:17] <FromDiscord> <Yardanico> yes
[21:56:22] <FromDiscord> <Yardanico> you can split by : to get the string and then use `case`
[21:56:40] <FromDiscord> <Yardanico> and of course if you don't want to do that manually you can write a small macro
[21:57:01] <FromDiscord> <Yardanico> lemme make an example
[21:57:10] <FromDiscord> <matkuki> Thank you 👍
[22:00:59] <NimEventer> New post on r/nim by viitorfermier: What would be the steps required of `wrapping` a Python package in a crosplatform Nim executable?, see https://reddit.com/r/nim/comments/q00mza/what_would_be_the_steps_required_of_wrapping_a/
[22:09:02] *** Joins: max22- (~maxime@2a01cb0883359800842b86a07baa5676.ipv6.abo.wanadoo.fr)
[22:11:29] <FromDiscord> <Yardanico> @matkuki https://play.nim-lang.org/#ix=3ACo
[22:11:49] <FromDiscord> <Yardanico> the macro can be probably made a bit nicer, and also you can actually make it so that that constant table isn't needed at all
[22:11:53] <FromDiscord> <Yardanico> with custom pragmas right in the object
[22:12:10] <FromDiscord> <Yardanico> you can uncomment the last "echo repr result" to see how the macro-generated code looks like
[22:13:16] <FromDiscord> <matkuki> @Yardanico That's fantastic! Thank you! Need to study this.
[22:23:47] *** Quits: max22- (~maxime@2a01cb0883359800842b86a07baa5676.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[22:24:10] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3ACt
[22:57:21] *** Quits: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:00:17] <FromDiscord> <matkuki> @Yardanico 👍
[23:02:50] <FromDiscord> <dom96> TIL tar and curl now ship with Windows
[23:06:39] <nrds> <06Prestige99> wow, it's evolving 🙂
[23:24:49] <FromDiscord> <Gumber> honestly I think Microsoft is pretty uniquely positioned in the OS game
[23:25:09] <FromDiscord> <Gumber> like they've started to embrace FOSS to some degree
[23:25:17] <FromDiscord> <Gumber> they realize the value of the linux kernel and operating system
[23:25:24] <FromDiscord> <Gumber> they've started to EEE that basically
[23:25:36] <FromDiscord> <Gumber> I don't think they can ever get to the final E but
[23:25:52] <FromDiscord> <Gumber> the other two E's do nothing but bolster Microsoft's reputation in the open source / free software community
[23:26:01] <FromDiscord> <Gumber> and also it's great virtualization research
[23:26:15] <FromDiscord> <Gumber> like I think embracing Linux is one of the smartest thing MS has ever done
[23:27:24] <FromDiscord> <Gumber> Wine had to be made for Linux
[23:27:44] <FromDiscord> <Gumber> Windows subsystem for Linux did NOT have to be made, but it was extremely smart to make it
[23:28:00] <FromDiscord> <Gumber> (edit) "Windows subsystem for Linux did NOT have to be made, but it was ... extremelymove" 03added "an" | "anextremely smart ... to" 03added "move"
[23:29:40] <FromDiscord> <Gumber> I think Windows 11 is finally going to have a decent store
[23:29:54] <FromDiscord> <Gumber> so something comparable to apple's
[23:30:07] <FromDiscord> <Gumber> snipping built in
[23:30:32] <FromDiscord> <Gumber> 64-bit ARM emulation
[23:31:16] <FromDiscord> <Gumber> if you're stuck on windows for gamedev reasons, it's nice when it gets better 🙂
[23:32:22] <FromDiscord> <dom96> Anyone up for testing new choosenim? 🙂
[23:38:06] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[23:42:30] <FromDiscord> <Gumber> not if it risks messing up my current install
[23:43:43] <FromDiscord> <Gumber> if there's no risk, then sure I will do it 🙂
[23:44:04] <FromDiscord> <Gumber> my current install would be 1.4.8 windows download
[23:44:07] <FromDiscord> <Gumber> from nim-lang.org
[23:44:14] <FromDiscord> <dom96> I mean, you can just backup your .choosenim folder if you're worried
[23:44:20] <FromDiscord> <Gumber> I don't use choosenim presently
[23:44:49] <FromDiscord> <Gumber> but I am willing to help you test whatever if it won't mess up my other install - sorry I probably should have provided that info about my current install up front
[23:45:13] <FromDiscord> <Gumber> I just am working on my game and I don't want to have to debug a broken environment is all 🙂
[23:46:39] <FromDiscord> <dom96> where is your current install?
[23:50:56] <FromDiscord> <Gumber> my H drive
[23:51:12] <FromDiscord> <Gumber> `H:\Projects\nim-1.4.8`
[23:52:58] <FromDiscord> <Jakes1403> sent a code paste, see https://play.nim-lang.org/#ix=3ACT
[23:53:48] <FromDiscord> <Jakes1403> sent a code paste, see https://play.nim-lang.org/#ix=3ACU
[23:54:44] <FromDiscord> <Elegantbeef> last thing should be `index.addr` or `index[0].addr` if using a seq
[23:57:04] <FromDiscord> <Jakes1403> sent a code paste, see https://play.nim-lang.org/#ix=3ACV
[23:57:53] <FromDiscord> <Elegantbeef> well yet i's `let`
[23:58:03] <FromDiscord> <Elegantbeef> `let` requires `unsafeaddr` due to the immutabillity, though there is an RFC to remove that since it's just tedious
[23:58:19] <FromDiscord> <Elegantbeef> `addr` is already unsafe so `unsafeaddr` is just silly name + api
[23:59:20] <FromDiscord> <Gumber> anyone ever debug a Nim program using windbg?
[23:59:35] <FromDiscord> <Gumber> or I guess - windbg preview? the GUI version of windbg?
[23:59:35] *** Joins: jjido (~Denis@2a01:4b00:80e2:7100:b5ce:8b4b:40bb:9f30)
