[00:02:34] *** Quits: nosolls (~nosolls@user/nosolls) (Quit: WeeChat 3.4.1)
[00:04:25] *** Joins: nagylzs (~nagylzs@catv-89-134-249-35.catv.fixed.vodafone.hu)
[00:05:30] <nagylzs> Hello, can somebody please tell me if pointer write and read operations are atomic in golang? I can protect them with mutexes, but I don't want to if it is not required.
[00:06:29] <bpalmer> see also sync/atomic's LoadPointer and StorePointer
[00:06:32] <lungaro> It's not atomic. Check out the atomic package too, beyond sync/mutex
[00:06:44] <bpalmer> they aren't necessarily atomic
[00:06:44] <nagylzs> Okay, thanks
[00:12:50] *** Joins: moog (~moog@107.77.244.98)
[00:25:15] *** Quits: cmagina (sid286142@user/cmagina) ()
[00:29:23] *** Joins: rek2 (~ReK2@user/rek2)
[00:29:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[00:29:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:31:54] *** Joins: AriESQ (~user@user/AriESQ)
[00:34:36] *** Joins: AriESQ_ (~user@user/AriESQ)
[00:36:10] *** Quits: AriESQ (~user@user/AriESQ) (Ping timeout: 246 seconds)
[00:38:23] *** Quits: nagylzs (~nagylzs@catv-89-134-249-35.catv.fixed.vodafone.hu) (Remote host closed the connection)
[00:38:57] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 272 seconds)
[00:40:03] <b0nn> Oh, they left - I was going to mention that there are some lockfree things done in Go (but I believe that they are slower than stuff that uses locks) and example is https://github.com/dustinxie/lockfree
[00:41:15] <b0nn> That project does have the following caveat attached "The term "lock-free" does not mean the implementation is entirely without lock, but that the heavy-lifting workloads of adding/modifying an entry in the map is done without the need to lock the entire map. A read lock is still used to acess the buckets of map, but this is much more lightweight and efficient than locking the entire map for every
[00:41:21] <b0nn> insert/modify operation."
[00:41:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:42:09] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:43:31] <bpalmer> I did wonder, as I opened up the hashmap/hmap.go file and saw a mutex staring at me
[00:46:48] <b0nn> I was hoping to find a book/blog post that I was reading a whiles back that went into greater detail, and was Go centric, but my Google-fu isn't flash at the best of times
[00:47:21] <b0nn> Maybe it was a white paper
[00:49:22] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[00:55:08] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Read error: Connection reset by peer)
[00:57:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:00:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 260 seconds)
[01:02:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[01:04:33] *** Quits: AriESQ_ (~user@user/AriESQ) (Remote host closed the connection)
[01:06:17] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 250 seconds)
[01:06:53] *** Joins: treeford (~charleste@user/treeford)
[01:13:44] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[01:20:13] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[01:22:20] *** Quits: marcel (~marcel@user/marcel) (Quit: The Lounge - https://thelounge.chat)
[01:22:42] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:23:10] *** Joins: marcel (~marcel@user/marcel)
[01:25:15] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[01:25:46] *** Quits: mpldr (~mpldr@user/mpldr) (Quit: WeeChat 3.5)
[01:30:23] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[01:30:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:30:41] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:30:49] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[01:32:10] *** Quits: treeford (~charleste@user/treeford) (Quit: WeeChat 3.3)
[01:35:18] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[01:35:21] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[01:36:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:38:31] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[01:38:46] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:40:42] *** Joins: nosolls (~nosolls@user/nosolls)
[01:41:36] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:42:50] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:43:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[01:45:11] <dostoyevsky2> kinda like the maxminddb: mmap'ed file, accessed lockfree, because you can't actually change it... Might be a good data structure for my DNS server
[01:46:17] <SJrX> I want to create a command line interface tool, not unlike say the go tool, where you have a bunch of different commands and each command is kind of "pluggable", or doesn't require changes to the rest of the code to support it, just create a new type and you are done. In Java you can use something like SPI for this. I'm guessing looking at the source for the go tool, this isn't idiomatic / possible in go.
[01:46:17] <SJrX> Since there they just have a giant array.  https://github.com/golang/go/blob/master/src/cmd/go/main.go#L47
[01:48:32] <dostoyevsky2> SJrX: a simple switch statement, based on executable name is much easier to understand, imho... makes what structs/packages implement what commands more straightforward
[01:50:12] <dostoyevsky2> But I guess Java devs won't feel at home unless they have their CommandExecutionAbstractFactoryForestFacadeSingleton
[01:55:58] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[01:56:11] *** Quits: zer0bitz (~zer0bitz@2001:2003:f750:a200:88a0:fb04:2d2:c434) (Ping timeout: 245 seconds)
[01:56:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:57:46] <SJrX> dostoyevsky2, well I mainly just wanted a way to discover the commands without having to modify some global array, but I suppose it isn't the end of the world.
[01:58:10] <bpalmer> SJrX: just change the array to a subcommands package with a hashtable, have a new package that has an init() to register itself, and import your new package in main
[01:58:33] <bpalmer> looking at a giant array of things is about the simplest way of discovering commands I can think of. They're literally all there
[01:58:52] <b0nn> Yeah - there's no magic way to discover what is a command and what isn't
[01:59:32] <bpalmer> using some form of type-based dependency injection, on the other hand, hides things
[01:59:58] <dostoyevsky2> SJrX: you can do that with reflection, similar to Java but the code is just not easy to maintain, hard to understand what's going on.. for a simple command -> code mapping
[02:04:13] *** Quits: jiqiren (~jiqiren@oh-hi.org) (Quit: leaving)
[02:06:35] <bpalmer> you might contrast with, say, cobra's subcommands
[02:06:58] *** Quits: adip (~adip@dev80.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[02:11:11] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 260 seconds)
[02:12:36] *** Joins: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net)
[02:13:20] *** Quits: Exuma (~Exuma@47-208-155-156.erkacmtk03.res.dyn.suddenlink.net) (Client Quit)
[02:18:49] <b0nn> LinkedIn - I've had two spammed jobs regarding NFTs/Blockchains this morning
[02:19:34] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:19:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:19:54] <b0nn> I mean, they're pure spam, I doubt the recruiter has done anything more than "send everyone with 'Go' on their profile this email" - but it's the fact that it's BC stuff hiring that's caught my attention (BC == SCAMs IMO)
[02:22:40] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: Leaving)
[02:22:59] <dostoyevsky2> b0nn: maybe you should ask the recruiters for the smallest change to their job description that produces an argon2 hash below a certain cutoff value, for verification purposes
[02:25:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[02:26:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:26:56] <b0nn> So, the thing with LinkedIn is recruiters get charged for their emails, *if* the recipients *don't* respond in any ways (they have an allowance which reduces with each email that's not responded to)
[02:27:59] <b0nn> I used to respond with the "Decline without message" button so that the recruiter would be able to send more mails, but now I only do it to ones that aren't naff
[02:43:00] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:43:01] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:43:12] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[02:47:21] *** Joins: andlabs_ (~andlabs@2a00:79e1:abc:1a12:f15f:76c7:f4ec:a0c5)
[02:48:08] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[02:50:47] *** Joins: admin123 (harrymoren@gateway/vpn/protonvpn/admin123)
[02:50:55] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:51:19] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a0a:fcea:dbff:898d:bcd9) (Ping timeout: 260 seconds)
[02:52:34] *** Quits: admin124 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 272 seconds)
[02:55:17] *** Joins: ajfriesen9 (~ajfriesen@cable-78-35-98-50.nc.de)
[02:57:11] *** Quits: ajfriesen (~ajfriesen@cable-78-35-98-50.nc.de) (Ping timeout: 256 seconds)
[02:57:11] *** ajfriesen9 is now known as ajfriesen
[02:57:48] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[02:57:53] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 250 seconds)
[03:00:21] *** Joins: Praise (~Fat@user/praise)
[03:11:00] *** Joins: moog_ (~moog@98.97.85.203)
[03:13:47] *** Quits: moog (~moog@107.77.244.98) (Ping timeout: 260 seconds)
[03:19:34] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[03:20:28] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Client Quit)
[03:22:20] *** Quits: independent56 (~independe@2.25.26.98) (Ping timeout: 272 seconds)
[03:22:59] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[03:23:14] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Client Quit)
[03:26:22] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[03:28:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:34:02] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[03:38:10] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:5acf:73bc:fb6f:a19) (Read error: Connection reset by peer)
[03:38:25] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:f476:d2ab:c84:9b89)
[03:45:15] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[03:45:29] *** Joins: Atque (~Atque@user/atque)
[03:45:41] *** Joins: itsalexjones_ (~itsalexjo@82.4.99.241)
[03:47:35] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 240 seconds)
[03:48:37] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Ping timeout: 240 seconds)
[03:50:42] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[03:54:44] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[03:55:29] *** Joins: rcernin (~rcernin@101.189.129.123)
[03:55:44] *** Quits: rcernin (~rcernin@101.189.129.123) (Client Quit)
[03:56:08] *** Joins: rcernin (~rcernin@101.189.129.123)
[03:56:11] *** Quits: shackra (~quassel@53.68.179.186.ufinet.co.cr) (Ping timeout: 260 seconds)
[04:02:01] <b0nn> https://gohack.devpost.com/
[04:05:19] *** Joins: shackra (~irc-chat-@52.68.179.186.ufinet.co.cr)
[04:06:08] *** Quits: itsalexjones_ (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[04:12:05] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[04:12:05] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Client Quit)
[04:15:24] *** Joins: greypw2546 (~greypw254@grey.pw)
[04:18:00] *** Quits: greypw2546 (~greypw254@grey.pw) (Client Quit)
[04:19:06] *** Joins: greypw2546 (~greypw254@grey.pw)
[04:19:46] *** Quits: greypw2546 (~greypw254@grey.pw) (Client Quit)
[04:20:10] *** Joins: greypw2546 (~greypw254@grey.pw)
[04:31:31] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[04:32:30] *** Joins: califax (~califax@user/califx)
[04:34:54] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:36:34] *** Joins: AriESQ (~user@user/AriESQ)
[04:39:28] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[04:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:39] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:56:22] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[05:00:44] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[05:09:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:14:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[05:15:36] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[05:28:27] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[05:30:08] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[05:34:56] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[05:46:13] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[05:48:09] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[05:50:28] *** Joins: neurocyte861 (~neurocyte@IP-094016065068.dynamic.medianet-world.de)
[05:50:29] *** Quits: neurocyte861 (~neurocyte@IP-094016065068.dynamic.medianet-world.de) (Changing host)
[05:50:29] *** Joins: neurocyte861 (~neurocyte@user/neurocyte)
[05:52:23] *** Quits: neurocyte86 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[05:52:24] *** neurocyte861 is now known as neurocyte86
[05:53:47] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 260 seconds)
[05:55:44] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[05:57:15] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[05:57:24] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[05:57:37] *** Joins: xiongxin (~Thunderbi@117.136.39.213)
[06:06:50] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[06:10:20] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61)
[06:13:15] *** Quits: xiongxin (~Thunderbi@117.136.39.213) (Ping timeout: 256 seconds)
[06:14:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:14:36] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:296d:7f3d:c53e:c634:5e61) (Ping timeout: 240 seconds)
[06:16:25] *** Joins: Guest81 (~Guest81@125.46.78.163)
[06:19:08] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[06:24:45] *** Joins: Guest48 (~textual@2001:ee0:4081:6914:c4b6:c300:278:fafe)
[06:27:54] *** Joins: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu)
[06:28:10] <v9fk1yn3nu> !ask
[06:32:05] *** Joins: xiongxin (~Thunderbi@117.136.40.174)
[06:32:21] *** Quits: acohn (~acohn@wikipedia/alex-cohn) (Quit: TTFN)
[06:32:44] *** Joins: acohn (~acohn@wikipedia/alex-cohn)
[06:32:44] *** Quits: acohn (~acohn@wikipedia/alex-cohn) (Client Quit)
[06:33:04] *** Joins: acohn (acohn@wikipedia/alex-cohn)
[06:39:14] *** Quits: Guest81 (~Guest81@125.46.78.163) (Quit: Client closed)
[06:43:20] <b0nn> oh, ummm "Don't ask to ask, just ask - paste your code to play.golang.org" - this is a recorded message
[06:43:49] *** Joins: _xor (~xor@74.215.232.169)
[06:45:15] <v9fk1yn3nu> great :)
[06:58:50] *** Joins: admin124 (harrymoren@gateway/vpn/protonvpn/admin123)
[06:59:26] *** Joins: zanshin (~zanshin@user/zanshin)
[07:00:14] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[07:01:25] *** Quits: admin123 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 256 seconds)
[07:02:40] *** Quits: WilliamH (~william@gentoo/developer/williamh) (Quit: leaving)
[07:03:00] *** Joins: WilliamH (~william@gentoo/developer/williamh)
[07:12:55] *** Quits: andlabs_ (~andlabs@2a00:79e1:abc:1a12:f15f:76c7:f4ec:a0c5) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:24:22] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[07:28:17] *** Quits: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu) (Remote host closed the connection)
[07:34:42] *** Joins: andlabs (~andlabs@172.102.12.8)
[07:35:28] *** Quits: AriESQ (~user@user/AriESQ) (Ping timeout: 246 seconds)
[07:37:00] *** Quits: andlabs (~andlabs@172.102.12.8) (Client Quit)
[07:39:11] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:39:15] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401)
[07:39:40] *** Joins: andlabs (~andlabs@172.102.12.8)
[07:42:00] *** Quits: xiongxin (~Thunderbi@117.136.40.174) (Ping timeout: 272 seconds)
[07:42:01] *** xiongxin1 is now known as xiongxin
[07:45:47] *** Quits: andlabs (~andlabs@172.102.12.8) (Ping timeout: 260 seconds)
[07:52:19] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:1a84:e291:3593:78a1:6401) (Ping timeout: 260 seconds)
[07:52:58] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 246 seconds)
[07:53:20] *** Joins: andlabs (~andlabs@2607:fb90:f800:2993:ed64:dc64:c69c:6c45)
[07:57:08] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[07:58:19] *** Joins: andlabs_ (~andlabs@2605:ef80:8089:90dc:e805:51b8:49ac:d7c4)
[07:58:51] *** Quits: andlabs (~andlabs@2607:fb90:f800:2993:ed64:dc64:c69c:6c45) (Ping timeout: 260 seconds)
[08:08:03] *** Quits: Guest48 (~textual@2001:ee0:4081:6914:c4b6:c300:278:fafe) (Ping timeout: 256 seconds)
[08:08:34] *** Joins: shtirlic_ (~shtirlic@184.22.157.64)
[08:12:24] *** Quits: shtirlic (~shtirlic@184.22.157.64) (Ping timeout: 272 seconds)
[08:16:15] *** Joins: rcernin (~rcernin@101.189.129.123)
[08:22:32] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 272 seconds)
[08:23:11] *** Joins: rcernin (~rcernin@101.189.129.123)
[08:25:55] *** Joins: KekS (~KekSi@77.189.143.122)
[08:30:08] *** Quits: KekSi (~KekSi@dynamic-077-182-139-063.77.182.pool.telefonica.de) (Ping timeout: 272 seconds)
[08:43:19] *** Joins: AriESQ (~user@user/AriESQ)
[08:45:23] *** Joins: v9fk1yn3nu (~v9fk1yn3n@user/v9fk1yn3nu)
[08:52:54] *** Quits: nosolls (~nosolls@user/nosolls) (Quit: WeeChat 3.5)
[08:53:09] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Read error: Connection reset by peer)
[08:54:58] *** Quits: andlabs_ (~andlabs@2605:ef80:8089:90dc:e805:51b8:49ac:d7c4) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[09:08:33] *** Quits: toulene (~toulene@user/toulene) (Quit: The Lounge - https://thelounge.chat)
[09:12:39] *** Joins: hanzo (uid532183@user/hanzo)
[09:18:54] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[09:24:35] *** Joins: kratos (~chirukoda@43.225.21.196)
[09:26:38] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[09:35:26] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[09:35:41] *** Joins: rcernin (~rcernin@101.189.129.123)
[09:55:17] *** Joins: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk)
[10:03:22] *** Joins: han-solo (~han-solo@user/han-solo)
[10:07:58] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[10:08:41] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[10:10:31] *** Quits: tg (~tg@rockylinux/infra/tg) (Ping timeout: 246 seconds)
[10:17:26] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[10:17:58] *** Joins: rvalue (~rvalue@user/rvalue)
[10:20:14] *** Joins: tg (~tg@rockylinux/infra/tg)
[10:23:04] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:27:19] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[10:31:22] *** Joins: independent56 (~independe@2.25.26.98)
[10:33:47] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[10:40:10] *** Joins: Midjak (~Midjak@82.66.147.146)
[10:40:37] *** Quits: marcus (~marcus@mojo/viking/marcus) (Ping timeout: 240 seconds)
[10:41:08] *** Joins: jpw (~jpw@user/jpw)
[10:41:14] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 272 seconds)
[10:42:35] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:42:51] *** Joins: pepee (~pepee@user/pepee)
[10:43:46] *** Quits: mncheck (~mncheck@193.224.205.254) (Read error: Connection reset by peer)
[10:45:30] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[11:01:05] *** Joins: adip (~adip@dev80.neoplus.adsl.tpnet.pl)
[11:05:36] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Read error: Connection reset by peer)
[11:05:59] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[11:07:04] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[11:08:14] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2e8a:1439:b3aa:fa15) (Ping timeout: 252 seconds)
[11:09:11] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c58b:a714:9f5b:c7e1)
[11:11:23] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:12:30] *** Joins: habamax (~habamax@user/habamax)
[11:13:00] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:14:37] *** Joins: neurocyte861 (~neurocyte@IP-094016065068.dynamic.medianet-world.de)
[11:14:37] *** Quits: neurocyte861 (~neurocyte@IP-094016065068.dynamic.medianet-world.de) (Changing host)
[11:14:37] *** Joins: neurocyte861 (~neurocyte@user/neurocyte)
[11:14:51] *** Joins: admin123 (harrymoren@gateway/vpn/protonvpn/admin123)
[11:15:19] *** Quits: neurocyte86 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[11:15:26] *** Quits: adip (~adip@dev80.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[11:17:01] *** Quits: admin124 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 246 seconds)
[11:17:06] *** Joins: marcus (~marcus@mojo/viking/marcus)
[11:17:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[11:25:25] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 246 seconds)
[11:26:37] *** Quits: bdeshi (~bdeshi@bdeshi.space) (Quit: bouncer disconnect)
[11:27:32] *** Joins: jw4 (~jw4@user/jw4)
[11:27:37] *** Joins: bdeshi (~bdeshi@bdeshi.space)
[11:27:41] *** Joins: xiongxin (~Thunderbi@117.136.39.222)
[11:29:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:32:33] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[11:33:45] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:33:46] *** Quits: Icedream (~icedream@hzn-b.serverkomplex.de) (Quit: A lol made me boom.)
[11:34:13] *** Joins: jw4 (~jw4@user/jw4)
[11:35:04] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[11:36:38] *** Joins: Icedream (~icedream@hzn-b.serverkomplex.de)
[11:37:05] *** Quits: vincent (~vincent@user/vincent) (Remote host closed the connection)
[11:37:16] *** Joins: vincent (~vincent@user/vincent)
[11:39:14] *** Joins: Guest81 (~Guest81@125.46.78.163)
[11:39:43] *** Joins: mpldr (~mpldr@user/mpldr)
[11:40:59] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 260 seconds)
[11:41:50] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[11:42:01] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[11:42:55] *** Joins: jw4 (~jw4@user/jw4)
[11:48:15] <habamax> lf
[11:49:02] *** Joins: shka (~herr@109.231.3.55)
[11:49:34] *** Quits: jw4 (~jw4@user/jw4) (Ping timeout: 246 seconds)
[11:51:37] *** Joins: jw4 (~jw4@user/jw4)
[11:52:42] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[11:53:22] *** Quits: jw4 (~jw4@user/jw4) (Client Quit)
[11:55:58] *** Quits: independent56 (~independe@2.25.26.98) (Ping timeout: 272 seconds)
[11:57:38] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 260 seconds)
[11:59:14] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[12:00:40] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:00:51] *** Quits: strNophix9 (~strNophix@86-83-36-18.fixed.kpn.net) (Remote host closed the connection)
[12:01:45] *** Joins: kochchef (~quassel@80.146.255.46)
[12:01:48] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Remote host closed the connection)
[12:02:08] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[12:03:02] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[12:05:03] *** Quits: mug3n (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[12:05:33] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[12:08:06] *** Joins: khyr0n__ (~khyr0n@2806:2f0:9260:cb2d:5fd:1a5c:dad0:bb92)
[12:08:39] *** Joins: cim2 (~cim@205.185.117.110)
[12:08:52] *** Joins: ricci (~ricci@31.187.110.131)
[12:09:06] *** Quits: ofh (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7) (Ping timeout: 260 seconds)
[12:09:16] *** Joins: yelnah (~felix@2001:44b8:308c:81:6f0:21ff:fe3c:d4d7)
[12:09:31] *** Quits: jinks_ (~jinks@2001:470:1f18:3aa:1d8:0:1c:34ac) (Ping timeout: 245 seconds)
[12:09:54] *** Quits: cim (~cim@205.185.117.110) (Read error: Connection reset by peer)
[12:09:54] *** cim2 is now known as cim
[12:10:19] *** Quits: khyr0n_ (~khyr0n@2806:2f0:9260:cb2d:5fd:1a5c:dad0:bb92) (Read error: Connection reset by peer)
[12:10:21] *** Quits: defn (~n0b0dy@user/defn) (Ping timeout: 245 seconds)
[12:11:12] *** Joins: defn (~n0b0dy@user/defn)
[12:11:53] *** Joins: jinks (~jinks@104.161.79.77)
[12:12:44] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4)
[12:13:44] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:14:58] *** Quits: xiongxin (~Thunderbi@117.136.39.222) (Ping timeout: 272 seconds)
[12:14:59] *** xiongxin1 is now known as xiongxin
[12:15:20] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[12:15:34] *** Joins: rendar (~rendar@user/rendar)
[12:17:12] *** Joins: mncheck (~mncheck@193.224.205.254)
[12:17:22] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[12:18:08] *** Quits: kratos (~chirukoda@43.225.21.196) (Quit: Client closed)
[12:24:31] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:26:08] *** Joins: xse_ (~xse@user/xse)
[12:26:22] *** Quits: xse (~xse@user/xse) (Ping timeout: 272 seconds)
[12:26:28] *** xse_ is now known as xse
[12:35:20] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[12:42:43] *** Joins: alwyn (~alwyn@user/alwyn)
[12:44:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[12:47:52] *** Joins: anandprabhu (~anandprab@91.74.213.9)
[12:48:13] *** Joins: otisolsen70_ (~otisolsen@80.80.4.2)
[12:49:44] *** Joins: Guest48 (~textual@2001:ee0:4081:6914:99b7:825c:2784:1235)
[12:51:36] *** Quits: shka (~herr@109.231.3.55) (Quit: Konversation terminated!)
[12:51:43] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Ping timeout: 272 seconds)
[12:51:52] *** Joins: shka (~herr@109.231.3.55)
[12:53:08] *** Quits: Guest48 (~textual@2001:ee0:4081:6914:99b7:825c:2784:1235) (Client Quit)
[12:53:42] *** Joins: Guest48 (~textual@2001:ee0:4081:6914:99b7:825c:2784:1235)
[12:53:53] *** Quits: Guest48 (~textual@2001:ee0:4081:6914:99b7:825c:2784:1235) (Client Quit)
[12:55:50] *** Quits: otisolsen70_ (~otisolsen@80.80.4.2) (Remote host closed the connection)
[13:05:16] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:05:46] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:07:10] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[13:07:31] *** Joins: Guest48 (~textual@2001:ee0:4081:6914:6868:2b77:4d50:9077)
[13:11:20] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[13:14:41] *** Quits: pez (~pez@user/pez) (Read error: Connection reset by peer)
[13:15:09] *** Quits: anandprabhu (~anandprab@91.74.213.9) (Quit: Textual IRC Client: www.textualapp.com)
[13:16:55] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[13:17:24] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3316:5adc:f35f:7fae:8bc4) (Ping timeout: 240 seconds)
[13:17:29] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[13:17:42] *** Joins: pez (~pez@user/pez)
[13:22:21] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:22:26] *** Joins: jespada_ (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:24:59] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[13:25:21] *** Quits: jespada_ (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:25:50] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:28:26] *** Quits: X-Scale (~ARM@231.197.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[13:29:28] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[13:30:06] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:30:10] *** Quits: w-g (~w-g@2001:470:69fc:105::195) (Quit: You have been kicked for being idle)
[13:30:21] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:30:42] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Client Quit)
[13:34:10] <dostoyevsky2> My test suite takes like 30s to run... I am getting impatient
[13:34:23] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:c06:c5f:5435:411f)
[13:34:47] *** Joins: otisolsen70 (~otisolsen@80.80.4.2)
[13:35:04] *** Quits: Guest81 (~Guest81@125.46.78.163) (Ping timeout: 250 seconds)
[13:35:34] <bpalmer> time to experiment with t.Parallel()
[13:36:08] *** Joins: xiongxin (~Thunderbi@117.136.39.211)
[13:38:21] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[13:39:34] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca)
[13:40:39] <mpldr> t.Parallel() makes tests faster, but i don't really use it because it makes the output terrible to read
[13:42:44] <dostoyevsky2> my idea atm is to add a environment variable that selects the test suite that should be run...  TEST_SUITES="SNS::*"  ...  When I am currently working on features for that component, and then run the full test suite not all the time
[13:43:13] *** Quits: xiongxin (~Thunderbi@117.136.39.211) (Ping timeout: 260 seconds)
[13:43:13] *** xiongxin1 is now known as xiongxin
[13:43:51] <dostoyevsky2> As each test suite involves creating multiple postgres databases from scratch, I am not sure there is much to optimize
[13:44:28] <dostoyevsky2> I guess I could cache the databases and just throw away all the tables
[13:44:33] *** Joins: moog__ (~moog@98.97.83.133)
[13:45:07] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:45:53] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:46:06] <siXy> dostoyevsky2: See go help test, there's already a way to select which tests to run. This wheel does not need re-inventing.
[13:46:25] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:47:01] *** Quits: moog_ (~moog@98.97.85.203) (Ping timeout: 250 seconds)
[13:47:28] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:47:56] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[13:48:37] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 240 seconds)
[13:49:20] *** Quits: Church (~aleph@68.161.207.188) (Ping timeout: 272 seconds)
[13:49:48] *** Quits: moog__ (~moog@98.97.83.133) (Ping timeout: 240 seconds)
[13:50:02] *** Joins: kodah (~kodah@user/kodah)
[13:51:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[13:52:36] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[13:54:38] <bpalmer> dostoyevsky2: yes, a TestMain or equivalent that sets up the database and some middleware to handle setting up/clearing tables/views/stored procedures would probably be a good idea for db-heavy code.
[13:57:23] <b0nn> These are integration tests; IME postgres is fast copying fixtures and it sounds like you have candidated for "Test these against this instance" and "Test these others against this other instance" which is parallelisable
[13:57:37] <b0nn> candidates*
[13:58:06] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[13:58:41] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[14:03:38] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 260 seconds)
[14:04:47] <b0nn> Oh, and, is it bad form to separate them with build constraints?
[14:05:02] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[14:05:34] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[14:05:40] <b0nn> Build tags* - here's an example https://clivern.com/separate-test-cases-in-golang-with-build-tags/
[14:10:12] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[14:10:28] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[14:10:34] *** Joins: admin124 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[14:12:23] *** Quits: admin123 (harrymoren@gateway/vpn/protonvpn/admin123) (Ping timeout: 260 seconds)
[14:16:38] <siXy> I just found that if you're compiling generic code expecting true monomorphization you need to build with go tool compile '-d=unified=1' -p . -S main.go
[14:16:51] <siXy> Might be useful for some others of you.
[14:17:10] <siXy> (note that this is undocumented so don't expect that to be stable over time)
[14:18:03] *** Joins: ekathva (~ekathva@93-90-58-246.welcomnet.fi)
[14:21:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:25:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[14:27:38] *** Joins: amk (~amk@109.255.169.126)
[14:28:54] *** Joins: amk_ (~amk@109.255.169.126)
[14:31:55] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[14:35:02] *** Joins: fling (~fling@user/fling)
[14:45:33] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:46:48] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:184f:2d11:2654:9001:c0ca) (Ping timeout: 260 seconds)
[14:48:29] *** Quits: otisolsen70 (~otisolsen@80.80.4.2) (Quit: Leaving)
[14:54:08] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[14:55:01] *** Quits: Guest48 (~textual@2001:ee0:4081:6914:6868:2b77:4d50:9077) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[14:56:56] *** Quits: noonien (~noonien@user/noonien) (Quit: The Lounge - https://thelounge.chat)
[14:57:20] *** Joins: noonien (~noonien@user/noonien)
[15:00:09] *** Joins: panlew (~panlew@46.204.53.95.nat.umts.dynamic.t-mobile.pl)
[15:01:11] *** Quits: beholders_eye (~weechat@2804:1b3:70c2:55b8:132a:d761:dcab:904c) (Ping timeout: 245 seconds)
[15:06:52] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[15:09:33] *** Joins: adip (~adip@apn-37-248-220-184.dynamic.gprs.plus.pl)
[15:09:33] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:09:54] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:10:13] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:10:32] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:10:33] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:10:50] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:10:50] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:11:07] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:11:08] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:11:25] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:11:26] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:11:44] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:11:44] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:12:02] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:12:02] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:12:16] *** Joins: some14u (~textual@d5153017c.static.telenet.be)
[15:12:20] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:12:20] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:12:37] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:12:37] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:12:54] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:12:55] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:13:12] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:13:12] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:13:20] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[15:13:29] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:13:29] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:13:46] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:13:46] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:14:04] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:14:04] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:14:21] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:14:22] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:14:37] *** Quits: some14u (~textual@d5153017c.static.telenet.be) (Client Quit)
[15:14:40] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:14:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:14:58] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:14:59] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:15:16] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:15:17] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:15:34] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:15:34] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:15:51] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:15:52] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:16:08] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:16:09] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:16:26] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:16:27] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:16:44] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:16:45] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:17:02] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:17:02] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:17:19] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:17:19] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:17:36] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:17:37] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:17:54] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:17:55] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:18:12] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:18:12] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:18:31] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:18:31] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:18:47] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:18:47] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:19:05] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:19:06] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:19:22] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:19:22] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:19:40] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:19:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:19:52] *** Quits: adip (~adip@apn-37-248-220-184.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[15:19:58] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:19:58] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:20:16] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:20:16] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:20:33] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:20:33] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:20:50] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:20:50] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:21:08] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:21:09] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:21:26] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:21:27] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:21:44] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:21:45] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:22:02] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:22:03] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:22:20] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:22:20] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:22:38] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:22:39] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:22:56] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:22:57] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:23:14] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:23:15] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:23:32] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:23:33] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:23:50] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:23:51] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:24:09] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:24:10] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:24:22] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[15:24:27] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:24:28] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:24:35] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[15:24:45] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:24:46] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:25:03] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:25:03] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:25:21] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:25:21] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:25:39] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:25:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:25:58] *** Joins: adip (~adip@apn-37-248-220-184.dynamic.gprs.plus.pl)
[15:25:58] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:25:58] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:26:15] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:26:16] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:26:17] *** Quits: mncheck (~mncheck@193.224.205.254) (Read error: Connection reset by peer)
[15:26:33] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:26:34] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:26:39] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[15:26:52] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:26:53] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:27:10] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:27:10] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:27:28] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:27:29] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:27:45] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:27:46] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:27:51] *** Quits: ekathva (~ekathva@93-90-58-246.welcomnet.fi) (Ping timeout: 245 seconds)
[15:28:03] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:28:04] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:28:21] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:28:21] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:28:39] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:28:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:28:52] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[15:28:57] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:28:58] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:29:15] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:29:15] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:29:33] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:29:34] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:29:51] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:29:51] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:29:52] *** Joins: califax (~califax@user/califx)
[15:30:09] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:30:09] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:30:28] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:30:29] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:30:46] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:30:47] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:31:03] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:31:03] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:31:21] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:31:22] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:31:31] *** Quits: adip (~adip@apn-37-248-220-184.dynamic.gprs.plus.pl) (Ping timeout: 260 seconds)
[15:31:39] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:31:40] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:31:57] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:31:58] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:32:15] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:32:16] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:32:33] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:32:34] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Read error: Connection reset by peer)
[15:32:51] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:32:51] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:33:10] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:33:10] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:33:27] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:33:28] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:33:45] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:33:46] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:34:03] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:34:03] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:34:21] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:34:21] *** Quits: ziofork52 (~ziofork@fr.worn.eu) (Remote host closed the connection)
[15:34:39] *** Joins: ziofork52 (~ziofork@fr.worn.eu)
[15:35:06] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[15:36:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[15:38:04] *** Joins: fling (~fling@user/fling)
[15:45:01] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:45:05] *** Quits: panlew (~panlew@46.204.53.95.nat.umts.dynamic.t-mobile.pl) (Quit: Leaving)
[15:54:50] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[15:58:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:59:39] *** Joins: moog (~moog@98.97.85.1)
[16:02:38] <Cork> is there a clean way to create a ticker but start it later?
[16:08:41] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[16:11:53] *** Quits: sentriz (~sentriz@109.255.139.98) (Remote host closed the connection)
[16:12:01] *** Joins: sentriz (~sentriz@109.255.139.98)
[16:16:07] *** Joins: some14u (~textual@d51A52D24.access.telenet.be)
[16:16:49] *** Joins: Guest48_ (~textual@2001:ee0:4081:6914:59d4:c39b:227b:2087)
[16:19:43] *** Quits: Guest48_ (~textual@2001:ee0:4081:6914:59d4:c39b:227b:2087) (Client Quit)
[16:21:58] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 272 seconds)
[16:25:03] *** Joins: ricci (~ricci@31.187.110.131)
[16:28:27] *** Joins: toulene (~toulene@user/toulene)
[16:28:59] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[16:30:30] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:31:37] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[16:32:10] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:33:24] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[16:40:01] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[16:40:29] *** Joins: fling (~fling@user/fling)
[16:42:30] *** Quits: some14u (~textual@d51A52D24.access.telenet.be) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[16:46:00] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[16:47:00] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[16:53:14] <siXy> Cork: Not really, but you can just use Reset instead
[16:53:58] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[16:53:59] <Cork> Reset?
[16:54:11] <Cork> how would that prevent it from running before it is needed?
[16:54:13] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Quit: mikoto-chan)
[16:56:54] <siXy> It won't. But you can reset back to the original period, so it will essentially start again from the point you called reset.
[16:58:07] <Cork> siXy: ya, the problem is i need a bunch of them (for cleaning lists of requests in a bunch of structs). And i want to delay starting it until the list isn't empty
[16:59:49] <siXy> You can do something like https://go.dev/play/p/jwEOO6PR4rV is what I mean.
[17:00:09] <siXy> So you create it and imediately stop it, then reset when you need
[17:00:33] <Cork> ah, nice that is exactly what i'm trying to do
[17:00:34] <Cork> thx!
[17:00:35] <siXy> It's not perfect though, as theoretically you could get a single tick through between creating and stopping
[17:01:07] <Cork> time.Second => time.Minute should solve that though
[17:01:30] <Cork> i a thread gets paused for a minute there are more serious problems :)
[17:01:47] <siXy> *nod* yeah - it's still technically a race, but probably good enough for any real world usecase
[17:02:08] <fizzie> If you don't ever receive from the channel before, can you actually still get a tick out of it after calling Stop()?
[17:02:43] <Cork> fizzie: yes, it is even documented
[17:02:55] <siXy> fizzie: It uses a buffered channel
[17:03:09] <Cork> https://pkg.go.dev/time#Timer.Stop
[17:04:01] <fizzie> That (documentation) is for Timer, not Ticker, but fair enough.
[17:04:21] <Cork> they works basically the same so ya
[17:04:48] *** Quits: theo (~theo@user/theo) (Quit: Ping timeout (120 seconds))
[17:04:55] <fizzie> Well, you could do a post-Stop select to consume the tick if one made it there.
[17:05:08] *** Joins: theo (~theo@user/theo)
[17:05:27] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:55b8:132a:d761:dcab:904c)
[17:07:37] *** Joins: Guest48_ (~textual@2001:ee0:4081:6914:d947:7613:ea9e:b0dc)
[17:14:05] *** Joins: xsteadfastx (~marv@2a01:586:3978:2:899:6ad6:daaa:f248)
[17:17:07] *** Quits: Guest48_ (~textual@2001:ee0:4081:6914:d947:7613:ea9e:b0dc) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:18:05] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[17:19:19] *** Joins: kochchef (~quassel@80.146.255.46)
[17:26:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[17:26:50] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:28:42] *** Joins: Guest48_ (~textual@2001:ee0:4081:6914:21dc:9af0:7cc1:e4dc)
[17:29:18] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[17:29:21] *** Joins: Church (~aleph@68.161.207.188)
[17:30:47] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[17:37:46] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[17:39:43] *** Quits: OMGOMG (~bobrobert@poppy.ifi.uio.no) (Quit: Lost terminal)
[17:39:59] *** Quits: Guest48_ (~textual@2001:ee0:4081:6914:21dc:9af0:7cc1:e4dc) (Quit: Textual IRC Client: www.textualapp.com)
[17:40:11] *** Joins: favadi (~favadi@2001:ee0:4081:6914:21dc:9af0:7cc1:e4dc)
[17:40:28] *** Joins: rcernin (~rcernin@101.189.129.123)
[17:42:01] *** Joins: OMGOMG (~bobrobert@poppy.ifi.uio.no)
[17:42:19] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[17:44:14] *** Quits: fling (~fling@user/fling) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[17:44:39] *** Joins: fling (~fling@user/fling)
[17:49:33] <SJrX> I'm writing a command line tool, and I would like to colorize pretty printed json output, like JQ does. I'm aware that there are terminal escape codes, but can people point me to recommendations for where to look for go on colored output. And additionally I'm curious as to a "fast" way to do this in go, can I just find some lexer for json in go?
[17:52:17] <OMGOMG> to choose color, hide a bunch of white stones in your hand, then have your opponent guess whether that number is odd or even
[17:54:02] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[17:54:26] *** Quits: xsteadfastx (~marv@2a01:586:3978:2:899:6ad6:daaa:f248) (Ping timeout: 260 seconds)
[17:56:01] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 246 seconds)
[17:56:58] <siXy> SJrX: There's a MarshallIndent function to format it nicely. For the colours, I'd just pick some commonly used terminal colours and print it out with fmt.Printf, but you can probably find a third party package to make this neater if you want
[17:58:39] <SJrX> siXy, but how will fmt.Printf know to color different json elements differently?
[17:59:26] <ikke> fmt.Printf does not know
[18:02:07] <siXy> oh yeah if you want to colour the individual bits you'll need to write a custom marshaller, unless there's a 3p thing that does this already
[18:03:23] <ikke> there is gojq
[18:03:33] <ikke> https://github.com/itchyny/gojq
[18:09:39] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:11:43] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:14:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[18:16:42] *** Quits: qilx (~quassel@62.201.21.8) (Ping timeout: 252 seconds)
[18:17:18] *** Joins: qilx (~quassel@62.201.21.8)
[18:26:31] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Quit: csmiga)
[18:27:20] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[18:30:01] *** Joins: kakysha (~kakysha@user/kakysha)
[18:30:05] *** Joins: andlabs (~andlabs@2605:ef80:8089:90dc:213c:99d6:dd04:4257)
[18:32:55] *** aog is now known as socrates
[18:38:10] *** Joins: arkurious (~arkurious@user/arkurious)
[18:42:37] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[18:43:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:45:50] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[18:47:37] *** Joins: treeford (~charleste@user/treeford)
[18:48:15] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[18:48:18] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[18:51:30] *** Joins: fling (~fling@user/fling)
[18:52:39] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[18:54:35] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[18:54:40] *** Quits: ghost08 (~ghost08@adsl-dyn150.78-99-35.t-com.sk) (Quit: WeeChat 3.5)
[18:56:23] *** Joins: kakysha (~kakysha@user/kakysha)
[18:56:46] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Read error: Connection reset by peer)
[18:57:38] *** Quits: d42 (~root@user/d42) (Ping timeout: 260 seconds)
[18:58:01] *** Joins: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net)
[19:00:43] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:04:18] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:04:38] *** Joins: d42 (~root@user/d42)
[19:10:14] *** Joins: chirukodati (~chirukoda@43.225.21.196)
[19:10:26] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 272 seconds)
[19:11:53] *** Joins: kakysha (~kakysha@user/kakysha)
[19:13:49] *** Joins: independent56 (~independe@2.25.26.98)
[19:14:37] *** Joins: jjonah (~jjonah@p200300d5d7249400dea632fffeb3342f.dip0.t-ipconnect.de)
[19:16:55] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[19:17:13] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:20:09] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:22:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[19:22:59] *** Quits: fling (~fling@user/fling) (Remote host closed the connection)
[19:23:14] *** Joins: fling (~fling@user/fling)
[19:24:23] *** Quits: andlabs (~andlabs@2605:ef80:8089:90dc:213c:99d6:dd04:4257) (Ping timeout: 260 seconds)
[19:24:55] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[19:27:02] *** Joins: __alex_ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[19:27:04] *** Quits: __alex_ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Client Quit)
[19:27:04] *** Joins: __alex__ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[19:27:04] *** Quits: __alex__ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Client Quit)
[19:27:05] *** Joins: __alex___ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[19:27:05] *** Quits: __alex___ (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Client Quit)
[19:28:15] *** Quits: socrates (~aog@user/aog) (Ping timeout: 240 seconds)
[19:29:22] *** Joins: aog (~aog@user/aog)
[19:38:45] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:42:46] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[19:44:11] <Duns_Scrotus> Does string comparison in go have a fast path for pointer equality
[19:44:27] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[19:45:36] *** Joins: rawley (~rawley@142.99.241.242)
[19:47:48] <Duns_Scrotus> I mean string equality, not comparison
[19:48:20] *** Joins: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com)
[19:49:02] <seebs> i don't know, maybe?
[19:49:15] <seebs> although come to think of it, i don't think pointer is sufficient
[19:49:18] <seebs> you need pointer and length
[19:49:51] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[19:50:05] <siXy> Duns_Scrotus: godbolt.org is a good way of finding out this stuff. I don't know off the top of my head, but that's how I'd check.
[19:50:50] <Duns_Scrotus> seebs: yeah
[19:51:01] <Duns_Scrotus> siXy: wow didnâ€™t know it supported go
[19:51:04] <Duns_Scrotus> Ty
[19:52:35] *** Quits: fling (~fling@user/fling) (Ping timeout: 240 seconds)
[19:53:29] *** Joins: some14u (~textual@109.142.85.70)
[19:54:24] *** Joins: fling (~fling@user/fling)
[19:55:19] *** Joins: some14u- (~textual@109.142.85.70)
[19:55:19] *** Quits: some14u (~textual@109.142.85.70) (Read error: Connection reset by peer)
[19:58:50] *** Quits: some14u- (~textual@109.142.85.70) (Client Quit)
[20:00:42] *** Joins: some14u (~textual@109.142.85.70)
[20:02:13] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 240 seconds)
[20:02:41] *** Joins: treeford (~charleste@user/treeford)
[20:02:51] *** Quits: chirukodati (~chirukoda@43.225.21.196) (Quit: Client closed)
[20:03:41] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 245 seconds)
[20:05:19] <Duns_Scrotus> Oh right I forgot about golang assembly
[20:07:46] *** Quits: some14u (~textual@109.142.85.70) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:08:02] *** Joins: adip (~adip@dev80.neoplus.adsl.tpnet.pl)
[20:08:39] *** Joins: some14u (~textual@109.142.85.70)
[20:09:08] *** Quits: some14u (~textual@109.142.85.70) (Read error: Connection reset by peer)
[20:09:14] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:14:45] *** Quits: adip (~adip@dev80.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[20:22:08] *** Joins: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:22:39] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 250 seconds)
[20:23:55] *** Quits: elastic_1 (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Client Quit)
[20:24:17] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[20:24:43] *** Quits: favadi (~favadi@2001:ee0:4081:6914:21dc:9af0:7cc1:e4dc) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:28:31] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[20:30:04] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Quit: My MacBook Air has gone to sleep. ZZZzzzâ€¦)
[20:30:06] *** Quits: roders[m] (~rodersmat@2001:470:69fc:105::1:62f0) (Quit: You have been kicked for being idle)
[20:30:16] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:30:35] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[20:34:06] *** Quits: tyson2 (~user@cpef492bf758151-cm688f2e29d8d0.cpe.net.cable.rogers.com) (Remote host closed the connection)
[20:34:55] *** Quits: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com) (Ping timeout: 256 seconds)
[20:35:50] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[20:35:59] *** Joins: cstls (~ruiner@2603-7081-0800-4824-35e0-f975-7f2e-91ad.res6.spectrum.com)
[20:36:06] *** Quits: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz) (Quit: Leaving)
[20:37:26] *** Joins: treeford (~charleste@user/treeford)
[20:45:19] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:57:32] *** Quits: tg (~tg@rockylinux/infra/tg) (Read error: Connection reset by peer)
[20:58:08] *** Joins: tg (~tg@rockylinux/infra/tg)
[20:59:52] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:ec62:46e4:cbb2:6c14)
[21:01:13] *** Quits: kiwi49 (~kiwi49@user/kiwi49) (Ping timeout: 250 seconds)
[21:01:16] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:03:58] *** Joins: tane (~tane@user/tane)
[21:05:20] *** Joins: eroux (~eroux@102-65-72-61.ftth.web.africa)
[21:09:32] *** Joins: chirukodati (~chirukoda@43.225.21.196)
[21:10:03] *** Joins: Ritsukon (~Ritsukon@196.203.85.114)
[21:11:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c58b:a714:9f5b:c7e1) (Ping timeout: 256 seconds)
[21:11:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:218f:feb0:93c2:196c)
[21:12:35] *** Joins: adip (~adip@dev80.neoplus.adsl.tpnet.pl)
[21:17:11] *** Joins: cyrus_mc_ (~cyrus_mc_@c-98-232-162-73.hsd1.or.comcast.net)
[21:28:31] *** Quits: ricci (~ricci@31.187.110.131) (Ping timeout: 260 seconds)
[21:29:07] *** Joins: Skriptmonkey (~Skriptmon@82-92-237-24.gci.net)
[21:30:17] *** Joins: ricci (~ricci@31.187.110.131)
[21:30:31] *** apotheon is now known as ElderMalaclypse
[21:31:11] *** Quits: independent56 (~independe@2.25.26.98) (Read error: Connection reset by peer)
[21:31:32] *** Joins: independent56 (~independe@2.25.26.98)
[21:32:36] *** Quits: ricci (~ricci@31.187.110.131) (Client Quit)
[21:35:01] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[21:35:28] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 246 seconds)
[21:36:05] *** Joins: treeford (~charleste@user/treeford)
[21:36:42] *** Joins: kakysha (~kakysha@user/kakysha)
[21:37:42] *** Quits: frebib (~frebibcha@nerdhouse.io) (Quit: Bridge terminating on SIGTERM)
[21:37:59] *** Quits: cyrus_mc_ (~cyrus_mc_@c-98-232-162-73.hsd1.or.comcast.net) (Quit: Connection closed)
[21:38:07] *** Joins: frebib (~frebibcha@nerdhouse.io)
[21:39:23] *** Joins: cyrus_mc_ (~cyrus_mc_@c-98-232-162-73.hsd1.or.comcast.net)
[21:39:25] *** Joins: ricci (~ricci@31.187.110.131)
[21:40:03] *** Quits: cyrus_mc_ (~cyrus_mc_@c-98-232-162-73.hsd1.or.comcast.net) (Client Quit)
[21:41:46] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 246 seconds)
[21:41:47] *** Quits: Ritsukon (~Ritsukon@196.203.85.114) (Quit: leaving)
[21:42:08] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[21:42:18] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[21:44:51] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[21:45:00] *** Quits: craekz (~craekz@user/craekz) (Read error: No route to host)
[21:46:09] *** Joins: kakysha (~kakysha@user/kakysha)
[21:54:48] *** Quits: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de) (Changing host)
[21:54:48] *** Joins: belphegor666 (~satan@user/belphegor666)
[22:00:33] *** Joins: craekz (~craekz@user/craekz)
[22:02:45] *** Quits: g2anj (~v@58.228.230.4) (Quit: .)
[22:04:09] *** Joins: rawley (~rawley@142.99.241.242)
[22:08:05] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[22:10:28] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[22:14:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:16:08] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[22:20:05] *** Quits: vincent (~vincent@user/vincent) (Quit: cappuccigo)
[22:20:54] *** Joins: vincent (~vincent@user/vincent)
[22:21:32] *** Quits: vincent (~vincent@user/vincent) (Client Quit)
[22:24:01] *** Joins: vincent (~vincent@user/vincent)
[22:26:46] *** Joins: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com)
[22:35:12] *** Quits: chirukodati (~chirukoda@43.225.21.196) (Quit: Client closed)
[22:42:31] *** Joins: nagylzs (~nagylzs@catv-89-134-249-35.catv.fixed.vodafone.hu)
[22:45:28] <nagylzs> Hello go-nuts! I'm struggling with atomic.LoadPointer since yesterday. I have a struct member, something like this:
[22:45:30] <nagylzs> primary *config.PostgreSQLConnection
[22:45:54] <nagylzs> This pointer is written from a go routine, and I'm trying to read it this way
[22:45:56] <nagylzs> return (*config.PostgreSQLConnection)(atomic.LoadPointer(c.nearest))
[22:46:24] <nagylzs> return (*config.PostgreSQLConnection)(atomic.LoadPointer(c.primary))
[22:46:37] <nagylzs> I got a compiler error
[22:46:49] <nagylzs> cannot use c.primary (variable of type *config.PostgreSQLConnection) as *unsafe.Pointer value in argument to atomic.LoadPointer
[22:47:07] <nagylzs> Isn't unsafe Pointer compatible with any pointer?
[22:47:38] *** Quits: ricci (~ricci@31.187.110.131) (Quit: ricci)
[22:47:59] *** Joins: kiwi49 (~kiwi49@user/kiwi49)
[22:48:37] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[22:51:19] *** Joins: treeford (~charleste@user/treeford)
[22:51:56] *** Quits: anecdotal57 (~anecdotal@S0106889e6862b41a.ed.shawcable.net) (Quit: Ping timeout (120 seconds))
[22:52:09] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 250 seconds)
[22:52:13] *** Joins: anecdotal57 (~anecdotal@S0106889e6862b41a.ed.shawcable.net)
[22:52:51] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Ping timeout: 245 seconds)
[22:55:31] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[22:59:50] <foobaz> nagylzs: it will work, but you need to explicitly convert it
[23:00:06] <seebs> i think the problem is that you want &c.nearest, or &c.primary, as the argument to LoadPointer.
[23:00:14] *** Joins: jw4 (~jw4@user/jw4)
[23:00:30] <seebs> *T is compatible with unsafe.Pointer, you need the address of a *T to get to a *unsafe.Pointer.
[23:00:55] <nagylzs> Yes, I suspected that I need &c.primary but it is also errorneous
[23:01:11] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Max SendQ exceeded)
[23:01:15] <nagylzs> this is bad too
[23:01:16] <nagylzs> 	return (*config.PostgreSQLConnection)(atomic.LoadPointer((unsafe.Pointer)(&c.nearest)))
[23:02:17] <nagylzs> cannot use (unsafe.Pointer)(&c.nearest) (value of type unsafe.Pointer) as *unsafe.Pointer value in argument to atomic.LoadPointer
[23:02:40] <nagylzs> Or maybe I need to put & out?
[23:03:06] <nagylzs> 	return (*config.PostgreSQLConnection)(atomic.LoadPointer(&((unsafe.Pointer)(c.nearest))))
[23:03:37] <nagylzs> invalid operation: cannot take address of ((unsafe.Pointer)(c.nearest)) (value of type unsafe.Pointer)
[23:03:38] <seebs> hmm. possibly (*unsafe.Pointer)(&c.nearest)?
[23:04:26] <nagylzs> Well that is different error
[23:04:26] <nagylzs> 	return (*config.PostgreSQLConnection)(atomic.LoadPointer((*unsafe.Pointer)(&c.nearest)))
[23:05:42] <nagylzs> cannot convert &c.nearest (value of type **config.PostgreSQLConnection) to *unsafe.Pointer
[23:08:05] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[23:08:38] <seebs> you may need to make an intermediate object of the actual unsafe.Pointer type, and do the conversion separately.
[23:09:11] <seebs> i haven't actually *tried* the atomic stuff on pointers, because honestly it's almost certainly the wrong thing to do?
[23:09:57] <nagylzs> Maybe you have a better suggestion. This is a field in a struct that is written periodically from a go routine. There is another go routine that periodically reads it.
[23:10:21] <nagylzs> Read operation is much more frequent than the write part. So I cannot use a chan here.
[23:12:22] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 272 seconds)
[23:13:29] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Max SendQ exceeded)
[23:14:48] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[23:15:00] <nagylzs> I just tried to use an intermediate type
[23:15:02] <nagylzs> 	p1 := &c.nearest
[23:15:02] <nagylzs> 	p2 := (*unsafe.Pointer)p1
[23:15:13] <nagylzs> But it is a syntax error (???)
[23:15:13] <nagylzs> expected ';', found p1
[23:22:21] <seebs> thi don't think that would work
[23:22:30] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[23:22:31] *** Quits: tyson2 (~user@cpec4411eab32aa-cm64777d9876e0.sdns.net.rogers.com) (Remote host closed the connection)
[23:22:53] <seebs> the problem is you can't directly read from or write to a thing that isn't an unsafe.Pointer using the atomic LoadPointer/StorePointer.
[23:23:21] <nagylzs> I'm not sure why. It is already unsafe. :-D
[23:23:41] <nagylzs> Is there another way to read and write a pointer to a struct, in a thread safe way?
[23:23:49] <seebs> so you need the actual data storage you care about to be an unsafe.Pointer, and then you can do "p1 := atomic.LoadPointer(&unsafePointer); p2 := (*config.PostgreSQLConnection)(p1)"
[23:23:59] <seebs> the short answer is, this is nonsensical
[23:24:01] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[23:24:14] <seebs> you shouldn't be reading or writing a pointer that could be changed, in general
[23:24:27] <seebs> you should be using locking, or channels, or *something* to ensure that all operations are properly ordered
[23:24:52] <nagylzs> The reader does not care if it reads an old (obsolete) value.
[23:25:10] <nagylzs> It really does not matter, if it reads the new value now, or some seconds later...
[23:25:28] <nagylzs> I can put these between locks, of course.
[23:26:00] <seebs> yeah. i'd probably do that. the atomic stuff is useful if you actually *need* unlocked access, and in that case, you'd be using a thing of type unsafe.Pointer as the thing you store in the struct, and converting that value *after* reading it.
[23:26:31] <nagylzs> I just tought that LoadPointer could have been implemented as an atomic CPU instruction at low level, so I was hoping that I would not need a lock for this.
[23:27:09] <nagylzs> Well, I'll just use locks, thanks! :-)
[23:27:13] <fizzie> Just FTR, the *syntax* error was from trying to write `(*unsafe.Pointer)p1` rather than `(*unsafe.Pointer)(p1)`. Conversions don't look like C casts. But that's just the syntax bit.
[23:27:40] <nagylzs> Thank you again! :-)
[23:27:58] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:acd9:13ff:e23:afe7)
[23:30:13] <seebs> It probably is an atomic CPU instruction, but it still has to be a semantically valid operation.
[23:30:54] <seebs> A thing that needs a pointer to unsafe.Pointer really does need the thing it's given to be a pointer to an unsafe.Pointer. The conversion of *T to unsafe.Pointer is valid for arbitrary T, but that doesn't make **T convert to *unsafe.Pointer
[23:32:01] *** Quits: d42 (~root@user/d42) (Ping timeout: 246 seconds)
[23:35:27] *** Joins: absc (~absc@dynamic-adsl-94-34-200-127.clienti.tiscali.it)
[23:36:33] <fizzie> You *could* convert a **T to *unsafe.Pointer via a plain unsafe.Pointer, though. ;) I don't think that'd be quite kosher, but it empirically speaking works: https://go.dev/play/p/C_RQtu8WoBB
[23:36:34] <nagylzs> I'm not sure how garbage collection works in golang. If it uses reference counting, then I should be able to create another reference (e.g. read the pointer) to a struct in an atomic operation.
[23:36:49] <nagylzs> I think that it should be fine.
[23:37:12] <nagylzs> As long as the writer updates the pointer in the struct to a different struct, it should be safe.
[23:38:46] <nagylzs> The reader might then use an old version, but in my particular use case, it is not a problem at all.
[23:39:43] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.5)
[23:40:30] <fizzie> It doesn't do reference counting, as far as I know. There's this talk on the GC (for satisfying general curiosity, not for writing code): https://go.dev/blog/ismmkeynote
[23:40:50] <nagylzs> I'll read that now, thanks.
[23:42:46] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[23:45:56] *** Joins: murd0c (~Murdoc@user/murd0c)
[23:47:00] <murd0c> hi, is there a way to declare a struct field as a data interface?
[23:47:26] <murd0c> I'm having a really bad time trying to explain this to google
[23:48:03] <ikke> interfaces only have methods, not fields
[23:49:52] <murd0c> right, maybe interface it's not the right word...
[23:50:15] <ikke> So what do you want to achieve?
[23:53:19] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[23:55:04] <murd0c> I have a function that returns a Response type, that function calls an API wich response could be different if success or fails
[23:55:36] <murd0c> I want to Â¿wrap? that api response inside a "Content" field inside the Response struct
[23:56:17] <b0nn> Oh, you are "returning an interface" and you want that to be satisfied by "a field within the struct being returned"
[23:57:05] <b0nn> It's a no, the returned object has to satisfy the interface, not some part of the object
[23:57:06] <murd0c> I'm not really sure
[23:57:33] <murd0c> let me explain it with a more basic example
[23:58:21] <murd0c> i have an struct that has a "Shape" field, is there a way that I could set that field with a Rectangle struct or a Circle struct?
[23:58:38] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[23:58:47] <b0nn> If that "Shape" field is an interface, yes
