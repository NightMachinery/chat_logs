[00:00:07] <SaltHilStroller_> I'm almost certainly over-complicating the problem. TLDR I need to serialize some C structs to JSON
[00:00:30] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[00:01:06] <SaltHilStroller_> As far as I know, there's no "clean" way of doing it, without hand-writing JSON converters or abusing the C preprocessor to define the structs
[00:01:39] <[o> yeah! we don't have static reflection yet. a very important thing that was left out in favor of... concepts. yick
[00:01:40] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:02:06] <[o> IMO, the best way to do serialization in C++ is to have a prebuild step with codegen
[00:02:27] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[00:02:33] <[o> or... use protocol buffers :) :) :) :)
[00:03:02] <SaltHilStroller_> I defined a parent class with pure virtual "write" functions. I was then hoping to define a "virtual" member variable which is a pointer to data with the associated correct type
[00:03:54] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f)
[00:03:54] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f) (Changing host)
[00:03:54] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:04:51] <SaltHilStroller_> [o: Do you have some non-GPL library in mind that can create JSON serialization given a header file ?
[00:06:24] <AliceMeows> Just define a function to handle each type you wish and call it a day
[00:06:59] <SaltHilStroller_> AliceMeows: Yeah, that's basically what I was gonna end up doing
[00:07:16] <SaltHilStroller_> UNLESS there was something simple available that could serialize
[00:08:13] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[00:08:24] <AliceMeows> If its C code only then you could write a small parser and generate the necessary code
[00:08:36] <[o> why C code only? lol
[00:09:06] <AliceMeows> Parsing C++ isn't easy
[00:09:17] <AliceMeows> clang is always an option though
[00:09:21] <SaltHilStroller_> [o: The structs are defined in a project that has safety requirements, only C is allowed
[00:09:47] <[o> /j #C
[00:09:52] <AliceMeows> You should be able to write a smaller parser for this then to automate the whole process
[00:10:13] <SaltHilStroller_> Ah, but now I'm parsing them in a more open environment where I can use C++, hence here
[00:10:46] <furrymcgee> g++ compiler output is some kind of serialization
[00:15:32] *** Quits: AssKoala (~asskoala@user/asskoala) (Read error: Connection reset by peer)
[00:16:27] *** Joins: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net)
[00:16:27] *** Quits: AssKoala (~asskoala@23-121-91-253.lightspeed.dybhfl.sbcglobal.net) (Changing host)
[00:16:27] *** Joins: AssKoala (~asskoala@user/asskoala)
[00:16:36] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[00:18:23] *** Joins: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600f5ce6078111bc9bb.ipv6.abo.wanadoo.fr)
[00:23:24] *** Quits: reset (~reset@user/reset) (Quit: reset)
[00:25:58] *** Joins: altairz (~altairz@user/altairz)
[00:27:02] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:27:17] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:29:06] *** Quits: altairz (~altairz@user/altairz) (Client Quit)
[00:30:01] *** Quits: NovaXrine (~NovaXrine@zen.novaxrine.com) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[00:30:20] *** Joins: NovaXrine (~NovaXrine@zen.novaxrine.com)
[00:30:53] *** Joins: Betal (~Betal@user/betal)
[00:32:04] *** Quits: letto (~letto@188.27.114.171) (Quit: Konversation terminated!)
[00:32:30] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[00:32:38] *** Joins: letto (~letto@188.27.114.171)
[00:33:24] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[00:35:32] *** Joins: altairz (~altairz@user/altairz)
[00:35:50] *** Quits: cnnx (~cnnx@bras-base-mtrlpq3401w-grc-32-174-89-96-67.dsl.bell.ca) (Quit: Client closed)
[00:36:35] *** Quits: asocialblade (~qsl@user/asocialblade) ()
[00:39:44] *** Quits: abode (~abode@2a00:f29:80:41c:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[00:40:17] *** Quits: altairz (~altairz@user/altairz) ()
[00:40:36] *** Joins: altairz (~altairz@user/altairz)
[00:43:37] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[00:44:26] *** Joins: rgrinberg (~textual@177.248.150.122)
[00:45:01] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[00:45:06] *** Joins: Enitin (~Enitin@82.180.145.226)
[00:45:37] *** Quits: altairz (~altairz@user/altairz) ()
[00:46:44] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[00:47:55] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[00:48:16] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f)
[00:48:16] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:d87:b69c:9abb:443f) (Changing host)
[00:48:16] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:48:40] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[00:52:03] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:52:12] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[00:52:13] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[00:53:04] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[00:54:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:54:26] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Client Quit)
[00:56:18] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[00:56:24] *** Quits: Enitin (~Enitin@82.180.145.226) (Ping timeout: 260 seconds)
[00:56:45] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[00:59:29] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Remote host closed the connection)
[01:00:04] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[01:00:34] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[01:01:48] *** Quits: Jeegh (~brute@176.33.66.185) (Remote host closed the connection)
[01:02:36] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[01:04:44] *** Joins: asocialblade (~qsl@user/asocialblade)
[01:05:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[01:06:32] *** Joins: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f)
[01:08:25] *** PJBoy is now known as Guest7580
[01:08:25] *** Quits: Guest7580 (~PJBoy@user/pjboy) (Killed (strontium.libera.chat (Nickname regained by services)))
[01:08:27] *** Joins: PJBoy (~PJBoy@user/pjboy)
[01:09:08] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 272 seconds)
[01:10:05] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[01:10:39] *** Quits: trumae (~trumae@2804:18:4823:8f75:1:0:f7ff:8e4f) (Ping timeout: 250 seconds)
[01:10:56] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:13:26] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[01:14:02] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:14:53] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[01:16:11] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:16:44] *** Joins: MasterK (~MK@86.127.22.26)
[01:17:45] *** Joins: immibis (~hexchat@62.156.144.218)
[01:18:50] *** Joins: proller (~p@80.240.216.69)
[01:19:16] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 272 seconds)
[01:20:53] *** Quits: asocialblade (~qsl@user/asocialblade) ()
[01:22:51] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[01:24:59] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[01:25:57] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:26:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:27:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:28:09] *** Joins: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[01:28:10] *** Quits: pretty_d1 (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Client Quit)
[01:28:35] *** Quits: jsbach (~jsbach@2a01:c23:6468:3200:42e8:59db:f661:f100) (Ping timeout: 260 seconds)
[01:29:05] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[01:29:13] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[01:29:24] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:29:27] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[01:29:56] *** Joins: immibis (~hexchat@62.156.144.218)
[01:31:18] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Ping timeout: 272 seconds)
[01:31:36] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ac35:8160:2b6:e011) (Quit: Konversation terminated!)
[01:31:51] *** Quits: zy (~cc@user/zy) (Ping timeout: 260 seconds)
[01:33:12] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 272 seconds)
[01:34:58] <SaltHilStroller_> Alipha: I've spent 30 minutes trying to understand CRTP. Is the main benefit just that the polymorphism is achieved at compile time?
[01:35:02] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ac35:8160:2b6:e011)
[01:35:18] *** Joins: kaph (~kaph@net-31-156-214-2.cust.vodafonedsl.it)
[01:35:23] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Quit: Leaving.)
[01:36:12] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[01:37:28] *** Quits: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com) ()
[01:38:49] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 250 seconds)
[01:39:31] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[01:40:33] *** Joins: sobkas (~sobkas@95.175.17.217)
[01:40:50] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[01:43:23] *** Joins: shailangsa (~shailangs@host86-162-150-212.range86-162.btcentralplus.com)
[01:43:29] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[01:43:46] <Alipha> SaltHilStroller_: it can be used for that, but it can also be used to enforce constraints on a the derived class, e.g., https://godbolt.org/z/e9ozh5arG
[01:48:17] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.5)
[01:48:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:52:22] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[01:52:29] *** Joins: trumae (~trumae@45.170.74.100)
[01:53:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Quit: Leaving)
[01:54:15] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 260 seconds)
[01:54:17] *** Joins: proller (~p@2a02:6b8:b081:b710::1:0)
[01:59:53] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:00:11] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:00:37] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:00:48] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[02:01:48] *** Joins: robert_ (~robert_@47.203.169.95)
[02:02:06] *** Joins: zy (~cc@user/zy)
[02:02:14] *** Quits: zy (~cc@user/zy) (Client Quit)
[02:03:09] *** Quits: gh34 (~textual@cpe-184-58-181-106.wi.res.rr.com) (Quit: Textual IRC Client: www.textualapp.com)
[02:04:05] <SaltHilStroller_> Alipha: Wow, that's actually crazy. Thanks
[02:04:20] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:04:46] *** Quits: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:05:14] *** Joins: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[02:05:30] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 272 seconds)
[02:05:51] *** Joins: m_tadeu (~quassel@bl7-240-233.dsl.telepac.pt)
[02:08:46] *** Joins: seninha (~seninha@user/seninha)
[02:10:00] <Alipha> SaltHilStroller_: note that ParentClass<ChildClass> and ParentClass<ChildClass2> are separate base classes, and so if you want a common base class, then ParentClass needs a (non-templated) parent.
[02:10:10] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:11:09] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:12:40] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[02:13:29] <SaltHilStroller_> I'm getting lost in the sauce
[02:14:08] <Alipha> lol
[02:14:18] *** Joins: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke)
[02:14:46] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[02:14:50] *** Quits: LuksNuke (~LuksNuke@gateway/tor-sasl/luksnuke) (Remote host closed the connection)
[02:14:57] <Alipha> SaltHilStroller_: why do you want a "virtual" member variable, which would be of a different type in each derived class?
[02:15:33] <SaltHilStroller_> Alipha: I forgot how complicated C++ is compared to C lol. It's fun to try and take advantage of the structure it provides though
[02:15:42] <SaltHilStroller_> Let me come up with an example to demonstrate my needs
[02:16:19] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 250 seconds)
[02:17:18] *** Joins: paulf (~paulf@lfbn-lyo-1-398-93.w2-7.abo.wanadoo.fr)
[02:17:43] <Alipha> SaltHilStroller_: and presumably this class hierarchy is for providing serializers for different types... which then why would the seriailizer have a T* member? the serializer doesn't need to hold the data it's serializing--the data would be the parameter to the write function?
[02:17:56] *** Quits: irf21k (~irf21k@2401:4900:26bf:b82c:0:76:6635:b801) (Read error: Connection reset by peer)
[02:18:08] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Quit: ERC (IRC client for Emacs 27.1))
[02:18:33] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:18:49] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 246 seconds)
[02:18:50] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[02:19:02] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[02:19:12] <Alipha> though it also seems like templating would be a better fit than polymorphism
[02:19:12] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.11.threembb.co.uk)
[02:19:38] *** Joins: asocialblade (~qsl@static.16.62.161.5.clients.your-server.de)
[02:19:38] *** Quits: asocialblade (~qsl@static.16.62.161.5.clients.your-server.de) (Changing host)
[02:19:38] *** Joins: asocialblade (~qsl@user/asocialblade)
[02:20:42] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[02:22:20] <SaltHilStroller_> Alipha: https://godbolt.org/z/a7Gfn1Y59
[02:22:36] <SaltHilStroller_> Yeah, as I wrote this out it does seem like templating is where it's at
[02:22:46] <SaltHilStroller_> As you pointed out though, I can't store the types generically then due to the template
[02:23:55] *** Joins: sobkas (~sobkas@95.175.17.217)
[02:24:06] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.76)
[02:24:11] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[02:24:26] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Remote host closed the connection)
[02:25:08] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:25:43] *** Quits: the_lanetly_052_ (~the_lanet@185.30.91.101) (Ping timeout: 260 seconds)
[02:27:41] <Alipha> SaltHilStroller_: if you look at iostreams, they don't have separate classes for each type to serialize. instead, if you want to serialize your type with iostreams, you define `operator<<(ostream &, const YourType &)`. I would imagine you'd want to do the same? if you're not a fan of operator overloading, then you can just have functions named Write or something. `void Write(Serializer &, const Foo &)`
[02:30:27] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Quit: leaving)
[02:30:43] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[02:31:56] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[02:32:10] <SaltHilStroller_> Alipha: Thanks for the advice. Now that you say it, overriding the << operator makes a lot of sense :D I was definitely overcomplicating it. Thanks
[02:33:49] *** Quits: ville (~ville@user/ville) (Quit: ville)
[02:36:28] *** Joins: ville (~ville@user/ville)
[02:36:46] <SaltHilStroller_> Okay, follow up question. Is there a way to return a generic type for a pointer, but still invoke the right ostream operator?
[02:37:10] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 272 seconds)
[02:38:05] *** Joins: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[02:38:35] *** Quits: kaph (~kaph@net-31-156-214-2.cust.vodafonedsl.it) (Ping timeout: 256 seconds)
[02:40:47] *** Quits: mimorek (~mimorek@2a02:a463:6d13:1:8a22:4d45:1db4:6da) (Read error: Connection reset by peer)
[02:41:32] *** Joins: karakedi (~eAC53C340@user/karakedi)
[02:41:39] *** Joins: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de)
[02:44:06] <SaltHilStroller_> Similar to this: https://godbolt.org/z/9ezGsGKxM
[02:44:38] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:47] *** Quits: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl) (Quit: Leaving)
[02:44:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:48] *** ChanServ sets mode: +v npaperbot
[02:52:35] *** Quits: MasterK (~MK@86.127.22.26) (Remote host closed the connection)
[02:52:43] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[02:53:04] *** Joins: badone (~badone@209.132.189.152)
[02:53:20] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Read error: Connection reset by peer)
[02:53:40] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[02:54:31] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 246 seconds)
[02:56:12] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ace2:b4ed:9f9:d737) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:56:20] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[02:56:43] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 256 seconds)
[02:56:44] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:57:11] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Remote host closed the connection)
[02:57:43] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[02:58:23] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:58:39] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[02:58:40] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[02:59:29] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[03:04:25] *** Quits: paulf (~paulf@lfbn-lyo-1-398-93.w2-7.abo.wanadoo.fr) (Quit: Connection closed)
[03:04:25] *** Quits: hashfunc32 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 256 seconds)
[03:04:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[03:05:18] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Ping timeout: 260 seconds)
[03:08:01] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:08:24] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[03:08:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:08:42] *** Joins: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e)
[03:09:35] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[03:09:36] *** Joins: Posterdati (~posterdat@user/Posterdati)
[03:15:00] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[03:16:55] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 246 seconds)
[03:21:31] *** Joins: King_DuckZ (~quassel@2a00:66c0:1:1::51)
[03:22:47] <King_DuckZ> hi, I see that std::basic_string<void> doesn't compile - that's all good, but then why does std::experimental::is_detected<std::basic_string, void>::value == true? am I misunderstanding how is_detected should work?
[03:23:56] *** Quits: Mat_42 (~mat_42@2a02:21b0:644f:e2ee:41b5:ffb9:13e6:417e) (Remote host closed the connection)
[03:25:20] *** Quits: BtbN (btbn@ffmpeg/developer/btbn) (Remote host closed the connection)
[03:25:49] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:28:00] *** Joins: BtbN (btbn@ffmpeg/developer/btbn)
[03:28:25] <Alipha> SaltHilStroller_: why are you dealing with void* at all?
[03:28:46] <King_DuckZ> https://godbolt.org/z/1fcqa7Ezf for example - is it malfunctioning because it's experimental?
[03:28:47] <anyone> it's not even void*
[03:29:13] <Alipha> Also, in c++ we'd prefer <cstdint> not <stdint.h>
[03:29:41] <SaltHilStroller_> Alipha: s/void*/char*/. I have a character buffer that a driver reads into. So I really have a char*, but it was just for example
[03:30:12] <SaltHilStroller_> Device driver reads into char[], and I only know the type by reading the header
[03:30:15] <anyone> << TYPE(std::basic_string<void>::size_type{})
[03:30:15] <geordi> error: forming reference to void
[03:30:19] <anyone> of course it fails.
[03:30:51] <King_DuckZ> of course, but is_detected still == true :|
[03:31:26] <Alipha> SaltHilStroller_: what about returning a std::variant?
[03:32:21] <King_DuckZ> I'm talking about this https://en.cppreference.com/w/cpp/experimental/is_detected
[03:33:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[03:33:57] *** Joins: pizdets_ (~pizdets@183.182.115.2)
[03:34:05] *** Quits: pizdets (~pizdets@183.182.111.169) (Ping timeout: 265 seconds)
[03:36:32] <SaltHilStroller_> Alipha: Ah, that will likely do. Thank you :)
[03:37:31] <PJBoy> King_DuckZ, I think it works because `using T = std::basic_string<void>;` works
[03:37:52] *** Quits: rgrinberg (~textual@177.248.150.122) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:38:13] <King_DuckZ> PJBoy: so flaky implementation of is_detected?
[03:38:25] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:ac35:8160:2b6:e011) (Ping timeout: 256 seconds)
[03:38:33] <King_DuckZ> I was trying this just now and indeed it compiles: using my_void = std::void_t<std::basic_string<void>>;
[03:38:39] <PJBoy> as opposed to something like `std::ranges::iterator_t<void>` that fails to work more directly
[03:39:03] <PJBoy> I think it only checks for substitution failures
[03:39:15] <PJBoy> basic_string<void> only fails when you try to use it
[03:40:36] <PJBoy> there's not much SFINAE in the standard library prior to ranges
[03:40:41] <PJBoy> not that I can think of
[03:40:55] <PJBoy> so hard to think of stdlib examples where is_detected would be useful
[03:41:06] *** Joins: peoliye (~peoliye@205.251.233.183)
[03:41:14] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[03:42:43] <King_DuckZ> otoh this https://godbolt.org/z/dzMbKqs68 doesn't even compile
[03:43:40] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 272 seconds)
[03:45:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:47:02] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Quit: Konversation terminated!)
[03:50:32] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[03:50:36] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[03:52:00] *** Joins: reset (~reset@user/reset)
[03:52:13] *** Quits: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94) (Client Quit)
[03:55:04] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 272 seconds)
[03:55:21] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 245 seconds)
[03:55:47] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[03:56:09] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[03:57:17] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[03:58:17] *** Quits: drbeco (~beco@user/beco) (Remote host closed the connection)
[04:02:32] *** Joins: drbeco (~beco@user/beco)
[04:03:35] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 240 seconds)
[04:05:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[04:05:22] *** Quits: msk (~Thunderbi@89.205.124.39) (Quit: msk)
[04:05:57] *** Joins: msk (~Thunderbi@89.205.124.39)
[04:06:06] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[04:10:29] *** Joins: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca)
[04:11:41] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[04:13:28] *** Quits: sobkas (~sobkas@95.175.17.217) (Remote host closed the connection)
[04:15:34] *** Joins: sobkas (~sobkas@95.175.17.217)
[04:16:25] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:16:57] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 256 seconds)
[04:18:43] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:21:20] <King_DuckZ> I'm not sure it can be fixed o.O
[04:21:40] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[04:22:06] <King_DuckZ> https://godbolt.org/z/9Es7Mfj9d
[04:22:58] <King_DuckZ> I reckon I need to leverage sizeof() to see if the type is entirely valid or not, but that breaks sfinae
[04:23:03] <King_DuckZ> line 14
[04:23:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[04:24:24] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[04:25:10] *** Quits: AmR (~AmREiSa@102.44.191.208) (Quit: Konversation terminated!)
[04:31:08] *** Quits: Karel (~Karel@ptr-9091p584yhzvqsxhq6g.18120a2.ip6.access.telenet.be) (Ping timeout: 260 seconds)
[04:31:12] *** Quits: Fox (littlefox@rondra.lf-net.org) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[04:32:07] *** Joins: LittleFox (littlefox@rondra.lf-net.org)
[04:46:37] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:46:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:47:24] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 240 seconds)
[04:47:38] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[04:49:27] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:49:29] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:50:17] *** Joins: xkuru (~xkuru@user/xkuru)
[04:52:30] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[04:52:31] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[04:54:21] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[05:02:20] *** Joins: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec)
[05:04:41] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:05:32] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Ping timeout: 260 seconds)
[05:06:19] *** Joins: xiongxin (~Thunderbi@117.136.39.215)
[05:08:19] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:08:37] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[05:09:24] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[05:10:17] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[05:15:29] <King_DuckZ> still doesn't work, I keep hitting the same issue albeit with a different syntax https://godbolt.org/z/6T517776b
[05:16:09] <King_DuckZ> crazy that this is_type_complete_v helper works if T is completely undefined, but not in my case
[05:17:15] <King_DuckZ> I don't see the difference as sizeof is invalid in both cases
[05:17:28] *** Joins: rgrinberg (~textual@177.248.146.216)
[05:19:02] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.11.threembb.co.uk) (Remote host closed the connection)
[05:19:02] *** Joins: mad_enz (~mad_enz@2605:8d80:6a1:dfde:99cc:819b:ca5c:a037)
[05:19:28] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[05:21:25] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748)
[05:24:16] *** Quits: xiongxin (~Thunderbi@117.136.39.215) (Read error: Connection reset by peer)
[05:24:16] *** xiongxin1 is now known as xiongxin
[05:24:26] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:25:01] *** Quits: rgrinberg (~textual@177.248.146.216) (Ping timeout: 246 seconds)
[05:28:54] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[05:30:42] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 272 seconds)
[05:31:47] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b)
[05:33:46] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 246 seconds)
[05:35:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:15c6:4ddf:5787:908a:a748) (Ping timeout: 256 seconds)
[05:36:08] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:1ff2:e03a:2456:5ccc:3d7b) (Ping timeout: 252 seconds)
[05:37:14] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f)
[05:37:26] *** Quits: trumae (~trumae@2804:58d8:e00:ecdc:f96f:59f8:a40f:beec) (Ping timeout: 260 seconds)
[05:38:17] *** Joins: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555)
[05:39:00] *** Joins: rgrinberg (~textual@177.248.146.78)
[05:41:43] *** Quits: str0 (~str0@178.220.28.32) (Remote host closed the connection)
[05:44:00] *** Joins: zer0x (~zer0x@1.55.255.231)
[05:44:26] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[05:50:28] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:51:00] *** Quits: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca) (Quit: Leaving)
[05:54:33] *** Quits: trumae (~trumae@2804:18:5047:d523:1:0:fa92:d555) (Read error: Connection reset by peer)
[05:55:07] *** Quits: mad_enz (~mad_enz@2605:8d80:6a1:dfde:99cc:819b:ca5c:a037) (Ping timeout: 260 seconds)
[05:58:39] *** Joins: trumae (~trumae@45.170.74.100)
[06:01:16] <Batzy> does anyone know how i can make an ostream_iterator for a uint128?
[06:06:22] *** Quits: KAHR-Alpha_ (~Alpha@2a01cb0d024a6600f5ce6078111bc9bb.ipv6.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[06:07:18] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:07:22] *** Joins: chenqisu1 (~chenqisu1@183.217.200.168)
[06:08:57] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[06:14:48] <Pwnna> if my function returns a struct from a C library, does it get moved out of the function or copied?
[06:15:03] <Pwnna> obv for C++ class/structs it would be moved but what about something from a C library?
[06:15:09] <Pwnna> should be moved too?
[06:17:17] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2469:bba4:9099:ef70:f70f) (Ping timeout: 260 seconds)
[06:20:29] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:20:35] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[06:23:54] *** Joins: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[06:25:06] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[06:25:07] <b_jonas> Pwnna: structures in C libraries don't have custom constructors, they're all trivially copyable and movable, so there's no difference between copying and moving them. you can imagine either as you wish.
[06:26:14] <Pwnna> what do you mean no difference copying and moving them? isn't there some sort of performance implication if you have a really big struct?
[06:26:19] *** Quits: Inline__ (~Inline@p200300cd470f690069ffd8a9e8710708.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[06:26:20] <Pwnna> i'm probably misunderstanding something, tho
[06:26:54] *** Quits: Posterdati (~posterdat@user/Posterdati) (Ping timeout: 260 seconds)
[06:29:35] <RandomReader> "move" in C++ is a specifically customized behavior, it's not an implicit thing, so the author of a type needs to make it have particular move behavior .. which of course wouldn't occur for C
[06:30:04] <RandomReader> if C++ would move something, but there's no custom behavior, then it's equivalent to copying
[06:31:33] <RandomReader> but if your question is about   "auto obj = source_function(); ... return obj;"   then that's the way you should do it regardless, because Return Value Optimization is likely to occur and will be better than either moving or copying
[06:32:01] <RandomReader> obj being originally a C type is irrelevant there, because this code and behavior are all C++
[06:32:41] <RandomReader> (which is true in general, the code is all going to be following C++ rules, there's no C-specific behavior here)
[06:33:41] <RandomReader> (it's just that C++ will interpret some basic things like structs in a way that is compatible with C, so you can often e.g. use headers from a C library effectively)
[06:36:41] *** Joins: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[06:37:50] <Pwnna> ah ok
[06:37:56] <Pwnna> so return value optimization will happen
[06:38:09] <Pwnna> but if i try to move a C struct into a function let's say
[06:38:14] <Pwnna> that would do nothing
[06:38:47] *** Joins: xiongxin (~Thunderbi@117.136.39.221)
[06:38:53] <Pwnna> well, it would take a copy
[06:39:08] *** Joins: Posterdati (~posterdat@user/Posterdati)
[06:39:33] <Pwnna> well, if the function ends up using the parameter i guess
[06:39:34] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 246 seconds)
[06:39:47] <RandomReader> technically speaking RVO only guaranteed for pure value returns, with no variables in between, so "return source_function();" ... practically speaking, if there's only ever the one variable and no complicated return paths, it's so simple the compiler is going to do it
[06:39:55] <RandomReader> and yes, attempting to move would simply copy instead
[06:40:24] <Pwnna> right so that's what people mean when they say that even a "move" operation could result in copy for "legacy" types
[06:40:31] <RandomReader> yes
[06:40:40] <Pwnna> that makes sense
[06:40:51] <Pwnna> thanks!
[06:41:04] <RandomReader> customizing / creating move behavior works by adding a new overload for constructor/assignment operators .. that overload is a better match for things that would move (like using std::move)
[06:41:16] <RandomReader> if that overload isn't available, then the next best match is the copy forms
[06:41:34] <RandomReader> so things just automatically copy if they can't move
[06:41:38] <Pwnna> yeah
[06:43:01] <Pwnna> is there any reason why a C++ type could be missing its move constructor/assignment without being deleted?
[06:43:18] <Pwnna> i guess if you have a library compiled from pre c++11 trying to link with your program?
[06:44:05] <RandomReader> yes, unfortunately, because move came later to C++: https://en.cppreference.com/w/cpp/language/move_constructor#Implicitly-declared_move_constructor
[06:44:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:48] *** ChanServ sets mode: +v npaperbot
[06:45:04] <RandomReader> it's not specifically about the versions, it's more that any code that was valid before C++11, should not break / be unexpected if you're using C++11, so it has all those caveats for the compiler auto-generating the move operations
[06:45:13] <Pwnna> wait
[06:45:30] <Pwnna> if you declared a copy constructor in code today
[06:45:40] <Pwnna> you would have to manually declare a move constructor?
[06:45:43] <RandomReader> correct
[06:45:46] <Pwnna> i guess it kind of makes sense
[06:45:57] <Pwnna> but the last one
[06:45:58] <Pwnna> there is no user-declared destructor.
[06:46:03] <RandomReader> the underlying assumption is: if you had to customize copy behavior, then whatever the compiler would do automatically is wrong, so it would also get move wrong
[06:46:39] <Pwnna> that does make sense but what about destructor?
[06:46:40] <RandomReader> destructor follows the same pattern: a custom destructor implies you have special cleanup, and that cleanup would need to know about move
[06:46:54] <Pwnna> what about classes with virtual functions
[06:47:04] <Pwnna> iirc you need a virtual destructor defined?
[06:47:08] <Pwnna> i usually have an empty body there
[06:47:28] <Pwnna> i guess that's a warning
[06:47:38] <Pwnna> -Wnon-virtual-dtor
[06:48:11] <RandomReader> yeah you wouldn't want an empty body, instead use:   virtual ~T() = default;
[06:48:49] <RandomReader> but there's also the Rule of 5 to avoid having to think about all of these things anyway: https://en.cppreference.com/w/cpp/language/rule_of_three
[06:49:05] <RandomReader> which boils down to: if you have to write one special member function, then just write them all, even if it's =default or =delete
[06:49:14] <RandomReader> then it's obvious to everyone what the type supports
[06:49:18] <Pwnna> oh
[06:49:19] <Pwnna> hm
[06:49:24] <Pwnna> that's kind of a footgun i didn't know about
[06:49:30] <Pwnna> https://stackoverflow.com/questions/29289956/c11-virtual-destructors-and-auto-generation-of-move-special-functions yeah i see it here
[06:50:58] <RandomReader> yeah it's an unfortunate complication when starting out .. after a while I find it makes sense, it's just one of those things where the customization combinations are too many to always be right, so specifying everything is probably the right thing to do anyway
[06:51:15] <Pwnna> it does make sense
[06:51:22] <Pwnna> it's terrible for beginners :P :D
[06:51:22] <RandomReader> but it doesn't really show up in warnings or anything by default, so you're still stuck stumbling across it
[06:51:26] <Pwnna> yes
[06:51:27] <RandomReader> yeah :/
[06:51:36] <Pwnna> this should be a warning
[06:51:56] <Pwnna> if you see virtual ~T() {}, then there should be a warning basically linking to rule of five as you linked
[06:51:59] <Pwnna> thanks for this deep dive btw
[06:51:59] <RandomReader> some static analysis tools can highlight it
[06:52:21] <Pwnna> i don't have clang-tidy on atm so maybe it's there, but idk
[06:52:42] <RandomReader> I think it has something for it, but I don't remember which offhand, and probably not as a default
[06:53:12] <Pwnna> hmm it's interesting because my class also inherits from boost::noncopyable
[06:53:14] <RandomReader> Scott Meyers popularized this particular one, so sometimes you'll find it under "effective C++" rulesets named after one of his books
[06:54:06] <Pwnna> and boost::noncopyable seems to delete the copy constructor/assignment
[06:54:43] <RandomReader> rule of 5 and using =delete would be a replacement for that
[06:54:44] <Pwnna> so i guess a class derived from that also means it's not movable because the default move constructor is not generator?
[06:55:02] <RandomReader> before C++11, there was no =delete, so the pattern was a bit more obscure .. and sometimes it's handy to just give it an easy name like "noncopyable"
[06:55:08] <Pwnna> Yeah
[06:55:14] <Pwnna> but from the rule of 5:
[06:55:15] <Pwnna> > Because the presence of a user-defined (or = default or = delete declared) destructor, copy-constructor, or copy-assignment operator prevents implicit definition of the move constructor and the move assignment operator
[06:55:32] <Pwnna> Boost: noncopyable( const noncopyable& ) = delete; noncopyable& operator=( const noncopyable& ) = delete;
[06:55:47] *** Quits: trumae (~trumae@45.170.74.100) (Ping timeout: 260 seconds)
[06:55:48] <Pwnna> so that means any class inheriting from noncopyable will also not be movable either
[06:56:19] <RandomReader> right
[06:56:53] <Pwnna> interesting.. not documented in boost's docs either
[06:58:09] <RandomReader> I know it's much older than C++11, so maybe they just haven't ever updated the docs
[06:58:52] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[06:59:07] <RandomReader> (I suppose it's also possible they think it's clear and chose not to, but probably just haven't gotten to it)
[07:00:35] <Pwnna> hmm
[07:00:37] <Pwnna> i tested it just now
[07:00:48] <Pwnna> it compiles but clangd seems to freak out about it
[07:01:24] <Pwnna> wait maybe i'm doing it wrong
[07:01:41] <Pwnna> T t = T(v) doesn't actually call the move constructor does it
[07:03:02] <RandomReader> no, today that's plain initialization, no temporary object involved
[07:03:17] *** Quits: nshire (~nshire@user/nshire) (Quit: Leaving)
[07:03:23] <RandomReader> you'd want to to something more like:   T t1; T t2 = std::move(t1);
[07:03:37] <Pwnna> yeah interestingly enough with clangd and vim, it complains about that line calling implicitly deleted copy constructor of 'A'
[07:03:46] <Pwnna> yeah the other version fails compile
[07:03:52] <RandomReader> that is true before C++17
[07:04:22] <Pwnna> which is true?
[07:04:27] <Pwnna> T t = T(v)?
[07:04:52] <RandomReader> yeah, it's a language quirk where it's required to act like it will call the copy constructor because technically there is a temporary object, but will probably be optimized out ... eventually people thought that was weird and changed C++17 so there is no temporary and therefore nothing to worry about
[07:05:01] <Pwnna> oh interesting
[07:05:11] <Pwnna> yeah so if i compile that with -std=c++11 it fails
[07:05:33] <Pwnna> i've lost track how many quirks we went over today :D
[07:05:42] <RandomReader> lol aye, it's a complicated language!
[07:05:47] <Pwnna> i suppose all of this is good to know if i can remember it all :P
[07:06:00] *** Quits: hashfuncd36 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[07:06:18] *** Quits: rgrinberg (~textual@177.248.146.78) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:06:19] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0)
[07:06:20] <RandomReader> I like all the details, but in general I just try to remember that "something exists" and fall into patterns to manage the complexity when I'm trying to just accomplish something
[07:06:32] <RandomReader> like rule of 5 means I don't have to keep thinking about rationale for the compiler not generating things
[07:06:52] <Pwnna> yeah well its being able to keep all these things in my head and know to recall them when i'm working on things
[07:07:03] <Pwnna> i don't work with C++ every day so it's hard to keep the knowledge hot
[07:07:04] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[07:07:23] *** Quits: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net) (Ping timeout: 260 seconds)
[07:08:00] <RandomReader> yeah, that is probably one of the most challenging things with it .. a lot of other languages you can come back to easier, just because the complexity overhead is lower
[07:08:40] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:08:42] <RandomReader> but even when using it, I'll often just remember "something odd might exist here" and go look up what that might be
[07:09:10] <RandomReader> sometimes it's something, sometimes it's actually nothing and I wasted some time
[07:09:16] *** Quits: xiongxin (~Thunderbi@117.136.39.221) (Ping timeout: 260 seconds)
[07:09:16] *** xiongxin1 is now known as xiongxin
[07:09:19] *** Quits: badfilms (~badfilms@user/badfilms) (Ping timeout: 246 seconds)
[07:09:41] <RandomReader> usually less than if I had to debug it though, so there's that
[07:10:10] <Pwnna> i think that's fine if you've google'd it before and found that page that answered your problem
[07:10:10] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870)
[07:10:50] <Pwnna> the "experience" that other people values is the ability to quickly find _that page_ again :D ...
[07:11:02] <Pwnna> for a newcomer it gets a bit harder unfortunately :\
[07:11:07] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[07:11:14] <RandomReader> yep .. at this point I can usually remember enough about the term or what it's related to to find it on cppreference.com, but I imagine that ability would fade with enough time away
[07:11:18] <Pwnna> exactly
[07:11:30] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[07:11:48] <Pwnna> i do a lot of linux/ops stuff and there are a few things that i don't know but i know the exact term to look up and the exact page (usually a stackoverflow post) to look for :D
[07:12:02] <Pwnna> i've seen others struggle a lot, especially when there's a lot of SEO spam now
[07:12:29] <Pwnna> but in any case this has been immensely helpful. Thank you very much! I just gotta write this stuff down for myself.
[07:12:38] <RandomReader> aye, I treat the Internet as a big library, being able to effectively filter that information is an incredibly useful skill
[07:13:01] <RandomReader> I wish we'd emphasize that more in education, I think it'd make things easier for a lot of people
[07:13:11] <RandomReader> welcome!
[07:13:35] <Pwnna> imagine if google became garbage tomorrow
[07:13:50] <Pwnna> (let's pretend it's not already worse from yesteryear...)
[07:13:53] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:a39:e6f5:9d58:2466:b9f0) (Ping timeout: 260 seconds)
[07:14:00] <Pwnna> not sure how i would code :D
[07:14:35] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:441:afa9:b5e8:ac51:4870) (Ping timeout: 252 seconds)
[07:14:59] <RandomReader> lol aye
[07:15:15] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94)
[07:15:17] <Pwnna> wait.. just going back to to the original question about moving a struct
[07:15:25] <Pwnna> so if i have a struct from C and it's trivial
[07:15:36] <Pwnna> let's say it's just a header
[07:15:42] <Pwnna> like i'm compiling C as C++
[07:15:54] <Pwnna> then that struct will get an automatically generated move constructor?
[07:16:07] <Pwnna> because there's no constructor/destructor/assignment defined for a C struct
[07:16:08] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[07:16:16] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 260 seconds)
[07:16:30] <Pwnna> but if i'm linking to the C struct that's already compiled via a C compiler
[07:16:38] <Pwnna> then the move constructor would not be available, right?
[07:18:16] *** Quits: meandrain (~meandrain@2a02:2f0e:f708:1200:ace9:8e52:80af:8a8c) (Remote host closed the connection)
[07:19:40] <RandomReader> so, it's a combination of things .. since they're all trivial, there's nothing physical generated, so it wouldn't link to anything (because C doesn't generate any of that stuff anyway, it doesn't have those concepts)
[07:19:50] <RandomReader> yes the move ones would exist though
[07:20:11] <RandomReader> but since everything is trivial and C-compatible types, there's never any special behavior, so move doesn't functionally do anything different
[07:20:16] <RandomReader> (than copy)
[07:21:40] <RandomReader> if the struct weren't C compatible, and had C++ types like a std::string member, then it'd be more interesting: auto generated, not trivial, and has an effect by using std::string's move behavior
[07:22:22] <Pwnna> yeah i guess i'm thinking of like a big C struct.. like struct A { char buf[20000]; }
[07:22:37] <Pwnna> pretend that exists somehow in the wild
[07:22:42] <RandomReader> yeah, so that would have implicit move operations, but they're identical to trivial copies
[07:23:32] <RandomReader> the way I mentally model it is that the compiler-generated ones just repeat the same operation on the members, recursively .. so auto-generated move attempts to move each member
[07:23:32] <Pwnna> and I guess since you have to have the struct definition in a header
[07:23:40] <RandomReader> which for an array, doesn't do anything special, it's the same as copy
[07:23:51] <Pwnna> oh
[07:24:02] <RandomReader> for a std::vector, does do something special .. etc
[07:24:13] <Pwnna> oh i think i may have misunderstood the builtin move operator
[07:24:31] <Pwnna> right there's nothing to move
[07:24:54] <Pwnna> because it's all on the stack (not quite, but maybe it illustrates my thinking here?)
[07:24:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:25:27] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:25:32] <RandomReader> right, I'd say it's all in place, a value stored directly .. not detached/separate where you can refer to it from elsewhere
[07:25:47] <Pwnna> right and therefore there's no "accounting" magic you have to do when moving
[07:25:54] <RandomReader> exactly
[07:26:06] <Pwnna> goes to show how much of a c++ noob i am :P
[07:26:07] <Pwnna> thanks again
[07:26:20] <RandomReader> lol no worries, and welcome!
[07:26:39] <RandomReader> I'm wandering off for a bit, have fun
[07:26:56] <Pwnna> o/
[07:28:26] *** Joins: furrymcg1e (~devuan@cgn-89-1-210-48.nc.de)
[07:29:48] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[07:31:22] *** Quits: froggyc (~froggy@2-235-241-212.ip230.fastwebnet.it) (Read error: Connection reset by peer)
[07:31:46] *** Quits: furrymcgee (~devuan@cgn-89-1-209-26.nc.de) (Ping timeout: 260 seconds)
[07:33:21] *** Joins: froggyc (~froggy@2-235-241-212.ip230.fastwebnet.it)
[07:34:50] *** Quits: SaltHilStroller_ (~SaltHillS@206.223.160.26) (Ping timeout: 272 seconds)
[07:39:03] *** Joins: xiongxin1 (~Thunderbi@117.136.39.219)
[07:42:39] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:20f2:ac8a:be5c:57a6:5a94) (Ping timeout: 256 seconds)
[07:42:40] *** xiongxin1 is now known as xiongxin
[07:47:55] *** Joins: xiongxin1 (~Thunderbi@117.136.40.173)
[07:48:52] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 260 seconds)
[07:51:43] *** Quits: xiongxin (~Thunderbi@117.136.39.219) (Ping timeout: 260 seconds)
[07:52:34] *** Quits: xiongxin1 (~Thunderbi@117.136.40.173) (Ping timeout: 272 seconds)
[07:52:39] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245)
[07:53:07] *** Joins: xiongxin1 (~Thunderbi@117.136.40.178)
[07:55:38] <Alipha> Pwnna: note that even with "non-legacy C structs", copying may still be the fastest way to "move". For instance, moving a std::array<int, 10> will result in simply copying each of the 10 ints.
[07:57:03] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3065:2e43:1e0a:ae80:c245) (Ping timeout: 260 seconds)
[07:57:56] *** Joins: irf21k (~irf21k@223.237.152.249)
[08:02:04] *** Quits: xiongxin1 (~Thunderbi@117.136.40.178) (Ping timeout: 272 seconds)
[08:03:33] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[08:04:36] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 272 seconds)
[08:09:23] *** Joins: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5)
[08:10:12] <Batzy> does anyone know why calling upper_bound on a vector<uint128> would always be returning an index of 0 even though the value at index 0 is less than my test value?
[08:14:55] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[08:16:25] *** Quits: sreve (~quassel@p4ff44dd2.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:16:54] *** Joins: sreve (~quassel@p4ff44df2.dip0.t-ipconnect.de)
[08:17:02] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[08:20:59] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Client Quit)
[08:24:45] *** Joins: gproto23 (~gproto23@user/gproto23)
[08:26:06] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[08:26:50] *** Quits: rLapz (~rLapz@user/rLapz) (Remote host closed the connection)
[08:26:59] *** Joins: seninha (~seninha@user/seninha)
[08:27:05] *** Joins: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[08:31:59] *** Joins: rgrinberg (~textual@177.248.158.178)
[08:32:51] *** Quits: rawley (~rawley@216-197-141-102.nbfr.hsdb.sasknet.sk.ca) (Remote host closed the connection)
[08:36:49] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 246 seconds)
[08:37:52] *** Quits: zer0x (~zer0x@1.55.255.231) (Ping timeout: 260 seconds)
[08:40:08] *** Joins: mateusn (~mateusn@2804:d59:a6bd:e100:62bd:2c81:d831:9610)
[08:40:45] *** Quits: mateusn (~mateusn@2804:d59:a6bd:e100:62bd:2c81:d831:9610) (Quit: WeeChat 3.4)
[08:42:09] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 256 seconds)
[08:43:13] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[08:43:47] <hashfunc11d> is there a compiler flag or tool that can output all symbols that are used in a function?  for example, using said compiler flag or tool on the code `void fn(a, b) {return a+b;}` would output `fn a b` or something similar
[08:46:17] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[08:46:39] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[08:50:09] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[08:54:37] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[08:55:18] *** Joins: vicfred (~vicfred@user/vicfred)
[08:59:32] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[09:01:29] *** Quits: hashfunc11d (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Ping timeout: 250 seconds)
[09:03:01] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[09:05:02] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d83:2c46:8073:fff8:2c1f:65e6)
[09:06:55] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 246 seconds)
[09:08:43] <Alipha> Batzy: is the vector sorted?
[09:08:57] <Batzy> yes
[09:09:12] <Alipha> !give Batzy testcase
[09:09:13] <nolyc> Batzy: A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[09:09:18] <Batzy> i think it has something to do with it being uint128s
[09:09:35] <Batzy> well do we know if upper_bound will work with vector<uint128>?
[09:11:05] <Batzy> https://godbolt.org/z/5qh9xjjda
[09:11:11] <Batzy> for some reason my compiler doesnt throw an error
[09:11:12] <Batzy> hm
[09:11:42] *** Joins: Jaydayal (~Jaydayal@user/jaydayal)
[09:19:35] *** Quits: Jaydayal (~Jaydayal@user/jaydayal) (Quit: Leaving)
[09:20:13] *** Joins: SR-71 (~user@user/SR-71)
[09:21:10] *** Joins: zer0x (~zer0x@1.55.255.231)
[09:24:19] *** Quits: Dreadnaught (Kulrak@n122-109-183-238.rdl2.qld.optusnet.com.au) (Ping timeout: 256 seconds)
[09:25:24] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[09:25:35] <Batzy> Alipha: what do u think
[09:25:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:26:24] *** Quits: drbeco (~beco@user/beco) (Remote host closed the connection)
[09:28:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a541:cda0:47a7:dc11)
[09:30:42] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[09:30:57] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d83:2c46:8073:fff8:2c1f:65e6) (Ping timeout: 250 seconds)
[09:32:15] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:3de5:e9f8:3d71:78d0)
[09:32:20] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[09:33:39] *** Joins: Dreadnaught (Kulrak@n122-109-183-238.rdl2.qld.optusnet.com.au)
[09:34:20] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[09:39:59] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 260 seconds)
[09:46:42] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[09:48:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:48:45] *** ChanServ sets mode: +o TinoDidriksen
[09:48:49] *** TinoDidriksen sets mode: -b *!*@user/hamburger
[09:48:55] *** TinoDidriksen sets mode: -o TinoDidriksen
[09:50:14] *** Joins: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138)
[09:50:50] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[09:51:15] *** Quits: reset (~reset@user/reset) (Quit: reset)
[09:52:07] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a541:cda0:47a7:dc11) (Ping timeout: 260 seconds)
[09:52:51] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:57:22] *** Joins: hamburger (~hamburger@user/hamburger)
[10:06:50] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 272 seconds)
[10:10:36] *** Joins: dsrt^ (~dsrt@96-91-136-49-static.hfc.comcastbusiness.net)
[10:10:37] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[10:10:43] *** Joins: Mat_42 (~mat_42@178.238.166.29)
[10:10:57] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a541:cda0:47a7:dc11)
[10:11:53] *** Quits: Mat_42 (~mat_42@178.238.166.29) (Client Quit)
[10:12:03] *** Joins: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net)
[10:16:58] *** Quits: senoraraton (~senorarat@192-195-83-130.static.monkeybrains.net) (Ping timeout: 272 seconds)
[10:18:32] *** Joins: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243)
[10:21:07] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[10:22:38] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[10:23:03] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[10:23:44] *** Quits: hashfunc1f63 (~user@2601:5c0:c280:7090:4533:6252:8e32:243) (Remote host closed the connection)
[10:32:40] *** Quits: peoliye (~peoliye@205.251.233.183) (Ping timeout: 250 seconds)
[10:33:25] *** Joins: hamburger_ (~hamburger@user/hamburger)
[10:33:50] *** Joins: Administrator__ (~hamburger@user/hamburger)
[10:35:37] *** Quits: Administrator__ (~hamburger@user/hamburger) (Remote host closed the connection)
[10:36:10] *** Joins: Administrator__ (~hamburger@user/hamburger)
[10:36:49] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[10:37:41] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[10:37:52] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[10:37:52] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Ping timeout: 272 seconds)
[10:39:04] *** Joins: hamburger (~hamburger@user/hamburger)
[10:39:11] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[10:40:22] *** Quits: samuelbernardo (~samuelber@nata01.lip.pt) (Ping timeout: 246 seconds)
[10:40:43] *** Quits: Administrator__ (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[10:41:46] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[10:41:59] *** Joins: hamburger_ (~hamburger@user/hamburger)
[10:43:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a541:cda0:47a7:dc11) (Ping timeout: 240 seconds)
[10:44:39] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:47] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:48] *** ChanServ sets mode: +v npaperbot
[10:45:29] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[10:45:39] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[10:46:05] *** Joins: rvalue (~rvalue@user/rvalue)
[10:46:43] *** Quits: rgrinberg (~textual@177.248.158.178) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:47:59] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 252 seconds)
[10:48:01] *** Joins: CCCG2022 (~dell@120.245.30.14)
[10:48:21] *** Parts: CCCG2022 (~dell@120.245.30.14) ()
[10:49:31] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: AdiIRC is updating to v4.2)
[10:49:46] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:555d:ed83:9d89:552e)
[10:49:53] *** Joins: Tempesta (~Tempesta@user/tempesta)
[10:52:56] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[10:59:15] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:01:15] *** Joins: Administrator__ (~hamburger@user/hamburger)
[11:03:28] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 246 seconds)
[11:04:11] *** Joins: rendar (~rendar@user/rendar)
[11:08:54] *** Quits: zer0x (~zer0x@1.55.255.231) (Ping timeout: 272 seconds)
[11:11:17] *** Quits: drei (~drei@71.247.34.97) (Ping timeout: 240 seconds)
[11:13:01] *** Quits: Administrator__ (~hamburger@user/hamburger) (Ping timeout: 240 seconds)
[11:13:33] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[11:16:22] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Read error: Connection reset by peer)
[11:16:51] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:16:54] *** Joins: jsbach (~jsbach@2a01:c22:a54f:c100:d5c3:6724:cc4:1ce3)
[11:17:33] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[11:21:32] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[11:23:44] *** Quits: emerent (~quassel@p200300cd5743c3a8ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:23:45] *** Joins: emerent_ (~quassel@p200300cd5743c3afba27ebfffed28a59.dip0.t-ipconnect.de)
[11:23:45] *** emerent_ is now known as emerent
[11:26:42] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:3de5:e9f8:3d71:78d0) (Remote host closed the connection)
[11:26:51] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:555d:ed83:9d89:552e) (Ping timeout: 260 seconds)
[11:26:55] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:b0f7:8873:f6da:6e16)
[11:26:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:29:29] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:428:432b:7486:55c7)
[11:30:14] *** Joins: drei (~drei@71.247.34.97)
[11:31:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[11:32:01] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 245 seconds)
[11:36:56] *** Joins: abode (~abode@2a00:f29:80:3739:8230:49ff:fe6e:36b5)
[11:37:01] *** Joins: rcoote (~rcoote@2a02:908:693:85a0:276:45a:a69:828c)
[11:38:09] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[11:41:43] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[11:46:40] *** Joins: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:46:46] *** Quits: Major_Biscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Client Quit)
[11:47:03] *** Joins: Furai (~Furai@furai.pl)
[11:47:43] *** Joins: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz)
[11:48:53] *** Joins: msk` (~msk@103.213.213.64)
[11:51:49] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[11:52:12] *** Joins: hamburger (~hamburger@user/hamburger)
[11:52:29] <ville> Pwnna: could also think that there's two parts to the above. sort of. part one is whether something is "movable" in the sense that the compiler accepts the particular syntax that would trigger a "move operation". part two is what a "move operation" actually does and what assembly the compiler will generate. it may end up being identical to the corresponding "copy operation" in this regard
[11:53:54] *** Joins: hamburger_ (~hamburger@user/hamburger)
[11:55:36] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:57:45] <ville> Pwnna: you can think that there are only three kinds of types in this dimension: 0) types that can't be copied or moved 1) types that can only be copied 2) types that can be both copied and moved
[11:57:58] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[11:59:30] <ville> Pwnna: but because this is c++ you can of course put the controlling knobs in combinations that don't make any sense in practice. such as type that can be only copy assigned, but can't be copy constructed or moved. but thinking about these sorts of types is not very useful and don't really exist
[12:00:48] <ville> Pwnna:  err 1) types that can only be _moved_
[12:01:26] *** Joins: hamburger (~hamburger@user/hamburger)
[12:02:04] *** Quits: Tempesta (~Tempesta@user/tempesta) (Ping timeout: 265 seconds)
[12:02:48] *** Joins: Administrator__ (~hamburger@user/hamburger)
[12:04:57] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[12:04:58] *** Quits: hamburger_ (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[12:07:13] *** Joins: john99 (~john99@134.238.107.163)
[12:09:16] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[12:12:12] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:b0f7:8873:f6da:6e16) (Quit: Leaving)
[12:12:32] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:8858:5b2:a927:8ef7)
[12:15:28] *** Quits: Administrator__ (~hamburger@user/hamburger) (Quit: Leaving)
[12:15:35] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Quit: leaving)
[12:17:22] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[12:21:39] *** Joins: Tempesta (~Tempesta@user/tempesta)
[12:26:14] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[12:29:48] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[12:29:58] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[12:31:39] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[12:35:18] *** Quits: j0hn_mc_clane (~j0hn_mc_c@84.198.240.138) (Ping timeout: 260 seconds)
[12:35:46] *** Joins: zeenk (~zeenk@2a02:2f04:a313:d600:8d26:ec9f:3ff6:fc94)
[12:36:47] *** Joins: CCCG2022 (~dell@120.245.30.14)
[12:37:26] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:41:07] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Read error: Connection reset by peer)
[12:43:37] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[12:44:15] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[12:44:25] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:44:47] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[12:47:33] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[12:48:07] *** Quits: C-Man (~C-Man@static.88-198-34-209.clients.your-server.de) (Ping timeout: 246 seconds)
[12:49:10] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[12:50:53] *** Quits: Tempesta (~Tempesta@user/tempesta) (Quit: See ya!)
[12:52:11] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[12:54:10] *** Joins: zer0x (~zer0x@1.55.255.231)
[12:55:15] *** Quits: rcoote (~rcoote@2a02:908:693:85a0:276:45a:a69:828c) (Quit: Konversation terminated!)
[13:10:18] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[13:13:38] *** Parts: CCCG2022 (~dell@120.245.30.14) ()
[13:13:39] *** Quits: tafa (~tafa@user/tafa) (Quit: ZNC - https://znc.in)
[13:14:52] *** Joins: Karel (~Karel@ptr-9091p58xjg5bis3jzhi.18120a2.ip6.access.telenet.be)
[13:15:05] *** Joins: tafa (~tafa@user/tafa)
[13:19:06] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:760:ff58:e77a:b949)
[13:20:44] *** Quits: zer0x (~zer0x@1.55.255.231) (Remote host closed the connection)
[13:21:24] *** Joins: zer0x (~zer0x@1.55.255.231)
[13:22:14] *** Quits: zer0x (~zer0x@1.55.255.231) (Remote host closed the connection)
[13:22:32] *** Joins: zer0x (~zer0x@1.55.255.231)
[13:24:16] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246)
[13:27:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:29:28] *** Quits: john99 (~john99@134.238.107.163) (Ping timeout: 250 seconds)
[13:31:23] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.5)
[13:32:16] *** Joins: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-5552-c541-2a06-6581.res6.spectrum.com)
[13:32:30] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[13:33:19] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 260 seconds)
[13:34:06] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-0dd9-0564-5ee4-7b35.res6.spectrum.com) (Ping timeout: 245 seconds)
[13:34:26] *** Joins: jellie (~luv_panda@user/jellie)
[13:44:31] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:48:02] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[13:50:16] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:51:25] *** Joins: LucaTM (~LucaTM@user/lucatm)
[13:55:55] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Ping timeout: 240 seconds)
[13:56:25] *** Quits: Sazhen86 (~Sazhen86@125-236-239-93.adsl.xtra.co.nz) (Quit: My computer has nodded off...)
[13:56:34] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[14:06:22] <King_DuckZ> Anyone able to help with my issue with is_detected?
[14:07:18] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[14:07:38] *** Quits: kaph_ (~kaph@net-93-67-57-97.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:08:46] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:760:ff58:e77a:b949) (Remote host closed the connection)
[14:09:26] *** Quits: Shell (~shell@user/shell) (Quit: ZNC 1.8.2 - https://znc.in)
[14:10:29] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[14:12:27] *** Joins: Shell (~shell@user/shell)
[14:16:10] *** Quits: yano (~yano@ircpuzzles/staff/yano) (Remote host closed the connection)
[14:16:49] *** Joins: yano (~yano@ircpuzzles/staff/yano)
[14:19:21] *** Joins: kaph (~kaph@net-93-67-57-97.cust.vodafonedsl.it)
[14:19:50] *** Joins: tmm88 (~tmm88@user/tmm88)
[14:20:17] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:ce03:4664:236f:6a3d)
[14:21:25] *** Joins: john99 (~john99@102.246.103.34.bc.googleusercontent.com)
[14:23:15] *** Joins: seninha (~seninha@user/seninha)
[14:24:36] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:3108:281:eecd:3097:6246) (Ping timeout: 240 seconds)
[14:28:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[14:34:37] *** Joins: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de)
[14:36:07] *** Quits: tmm88 (~tmm88@user/tmm88) (Quit: Client closed)
[14:38:15] *** Joins: Dumbledore (~Prof_Dumb@2409:4042:4d83:2c46:2a76:3779:7548:8eb0)
[14:41:17] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:ce03:4664:236f:6a3d) (Ping timeout: 260 seconds)
[14:43:41] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[14:44:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:48] *** ChanServ sets mode: +v npaperbot
[14:47:23] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[14:55:50] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[14:57:31] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[14:57:37] *** Joins: gproto23_ (~gproto23@user/gproto23)
[14:58:48] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 272 seconds)
[15:00:24] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[15:02:36] *** Quits: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net) (Ping timeout: 272 seconds)
[15:02:38] *** Quits: proller (~p@2a02:6b8:b081:b710::1:0) (Ping timeout: 252 seconds)
[15:04:16] *** Quits: the_lanetly_052 (~the_lanet@194.135.169.76) (Ping timeout: 246 seconds)
[15:06:22] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 260 seconds)
[15:09:47] *** furrymcg1e is now known as furrymcgee
[15:11:08] *** Joins: unixpro1970 (~unixpro19@c-67-168-1-124.hsd1.wa.comcast.net)
[15:11:51] <ville> King_DuckZ: first rule of irc: don't ask to ask. ask the actual question
[15:12:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[15:12:20] <ville> King_DuckZ: in other words prepare a testcase, post the url...
[15:13:10] *** Joins: seninha (~seninha@user/seninha)
[15:16:55] <fiesh> he already did that
[15:19:18] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[15:23:10] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Client Quit)
[15:25:33] *** Joins: crankslider (~slidercra@user/slidercrank)
[15:25:41] *** crankslider is now known as slidercrank
[15:25:51] <King_DuckZ> ville: already done, scroll up if you have the log, or I'll re-post later when I get to my pc
[15:27:01] <King_DuckZ> Although I'm starting to think we need compiler support for this to work
[15:27:59] <TinoDidriksen> It's in the logs: https://i.pjj.cc/lb/logs/%23c++/
[15:28:10] *** Joins: unknow (~i.am@user/marlboro)
[15:28:17] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[15:28:33] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:29:56] *** Joins: Payam58 (~Payam@138.106.57.131)
[15:32:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[15:39:03] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:41:37] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[15:41:38] *** Joins: jokoon (~eio@2a01:e0a:542:e160:119b:2153:38d4:bf30)
[15:42:45] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[15:43:48] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[15:45:17] *** Joins: xiongxin (~Thunderbi@117.136.40.175)
[15:45:48] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900)
[15:47:52] *** Quits: Khoyo (~khoyo@user/khoyo) (Quit: ZNC 1.8.2 - https://znc.in)
[15:48:26] *** Joins: Khoyo (~khoyo@user/khoyo)
[15:49:39] *** Quits: xiongxin (~Thunderbi@117.136.40.175) (Read error: Connection reset by peer)
[15:50:19] *** Quits: xiongxin1 (~Thunderbi@2409:8954:2e14:4df:bfcf:ac49:3089:d900) (Ping timeout: 250 seconds)
[15:53:57] *** Quits: jsbach (~jsbach@2a01:c22:a54f:c100:d5c3:6724:cc4:1ce3) (Ping timeout: 256 seconds)
[15:57:57] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6)
[16:04:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[16:04:13] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 240 seconds)
[16:06:05] *** Joins: GreyXor (~GreyXor@82.66.31.64)
[16:10:14] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:11:09] <CarloWood> Is there a standard way to combine two std::hash<> results into a single size_t?
[16:12:24] <Zogatribe> yes
[16:12:27] <Zogatribe> hash of hash
[16:12:59] <Zogatribe> xor might work too
[16:13:20] *** Joins: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:958d:2a97:13df:cfbd)
[16:13:34] *** Quits: zer0x (~zer0x@1.55.255.231) (Ping timeout: 246 seconds)
[16:14:32] <Zogatribe> xor all the things
[16:14:35] <PJBoy> xor don't work too well
[16:14:44] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:14:56] <TinoDidriksen> Use boost::hash_combine
[16:15:17] <PJBoy> with xor you'd get hash(a, b) = 0 if a=b
[16:15:25] <TinoDidriksen> The standard hash of integers is just the integer.
[16:15:53] *** Quits: Dumbledore (~Prof_Dumb@2409:4042:4d83:2c46:2a76:3779:7548:8eb0) (Ping timeout: 250 seconds)
[16:15:59] *** Joins: xkuru (~xkuru@user/xkuru)
[16:16:24] <CarloWood> TinoDidriksen: That is what I found too; ppl refer to boost::hash_combine.  Apparently there isn't a std::hash_combine?
[16:16:38] <TinoDidriksen> There isn't yet.
[16:17:47] <PJBoy> not in MSVC
[16:17:58] <Zogatribe> MSVC is off topic
[16:19:08] <CarloWood> TinoDidriksen: they can use mine if they want ;) (for the std). It works really well. https://github.com/CarloWood/ai-utils/blob/master/pointer_hash.h#L20
[16:19:20] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[16:19:48] *** Quits: xrj (~av@2a01:4f8:c17:7cba::1) (Read error: Connection reset by peer)
[16:20:10] *** Joins: xrj (~av@2a01:4f8:c17:7cba::1)
[16:20:38] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[16:20:41] <PJBoy> hash of integer https://godbolt.org/z/cf6c51o19
[16:21:08] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:21:16] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[16:21:26] *** Joins: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net)
[16:21:34] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[16:22:23] <CarloWood> PJBoy: weird
[16:22:46] <Guest69> If I'm using a 3rd party api which takes a pointer to a callback function which I define, is there a way for me to pass it a class member function?
[16:23:13] <PJBoy> nope
[16:23:17] <CarloWood> ms has to do everything different it seems :/.  This only will lead to programs that work on msvc and then break on other compilers.
[16:23:19] <TinoDidriksen> Only if it also takes a pointer to a data object.
[16:23:20] *** Joins: Leone (~Leo@216.154.4.77)
[16:23:53] <PJBoy> it's hard to say whether ms is doing everything differently or gcc
[16:23:56] <TinoDidriksen> Some callback APIs are nice that they allow (func*, void*) and then you can pass anything you like, but if it's just (func*) then you're out of luck.
[16:24:18] *** Quits: gproto23_ (~gproto23@user/gproto23) (Ping timeout: 272 seconds)
[16:24:43] <Guest69> it does optionally take a pointer to a void* data object, so would I pass it a free function and then treat myData as the this pointer: ((MyClass*)myData)->callMemberFunction.
[16:24:56] <PJBoy> the differences are good though, means you rely less on properties that are purely of the implementation
[16:25:25] *** Parts: GreyXor (~GreyXor@82.66.31.64) ()
[16:25:29] <CarloWood> That's true, if you assume that everyone will want to be portable...
[16:25:56] *** Joins: gproto23 (~gproto23@user/gproto23)
[16:26:03] <PJBoy> even if they don't, the code will be more robust against future implementation changes
[16:26:18] <PJBoy> and the code will be more reusable in general
[16:26:32] <PJBoy> Guest69, nearly that
[16:26:41] <PJBoy> pointer to member function syntax is a little different
[16:26:42] <CarloWood> In this case I really don't think that doing something cpu costly for std::hash<integral_type> makes any sense though. It's only slow.
[16:30:30] <PJBoy> would suggest `std::invoke(static_cast<Ret (MyClass::*)(Param0, Param1)>(funcParam), static_cast<MyClass*>(dataParam), param0, param1);` for calling the member function
[16:30:47] <PJBoy> for whatever parameters and return types you have
[16:31:32] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[16:31:40] *** Joins: zer0x (~zer0x@1.55.255.231)
[16:31:41] *** Joins: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl)
[16:33:09] <PJBoy> not sure which version of std::hash<int> I prefer
[16:33:45] *** Joins: bebyx (~Thunderbi@user/bebyx)
[16:34:20] <PJBoy> I guess the libstdc++ one at least cautions you that it's low quality
[16:35:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:35:54] *** Joins: daswf8520 (~daswf852@user/daswf852)
[16:36:26] *** Joins: the_lanetly_052 (~the_lanet@194.135.169.76)
[16:36:55] *** Quits: Guest69 (~Guest69@ip72-199-239-162.sd.sd.cox.net) (Quit: Connection closed)
[16:37:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:38:57] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 256 seconds)
[16:38:57] *** daswf8520 is now known as daswf852
[16:41:41] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:43:26] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[16:43:45] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[16:43:46] <furrymcgee> the problem with callbacks to member functions is you need an instance of the class, https://tldp.org/HOWTO/html_single/C++-dlopen/#loadingclasses
[16:44:52] *** Joins: cnnx (~cnnx@bras-base-mtrlpq3401w-grc-32-174-89-96-67.dsl.bell.ca)
[16:46:43] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:134a:aa8c:6c91:412d:d4e6) (Ping timeout: 260 seconds)
[16:47:30] <evangeline> Is it possible for std::unordered_map to be constexpr in C++20: https://godbolt.org/z/fEfE5xTxr ?
[16:48:28] *** Quits: daswf852 (~daswf852@user/daswf852) (Ping timeout: 260 seconds)
[16:48:44] *** Joins: hiroshi_ (~freedom@151.35.46.107)
[16:48:46] <PJBoy> nah, that one hasn't been touched
[16:48:49] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[16:49:11] <evangeline> PJBoy, std::vector also can't be constexpr ?
[16:49:22] <PJBoy> vector has limited constexpr support
[16:49:39] <evangeline> Ok thank you
[16:50:05] <PJBoy> it can be used in a constexpr function provided it's not returned
[16:50:22] <PJBoy> or somehow assigned to outside the function scope
[16:51:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:53:07] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[16:54:06] *** Joins: hamburger (~hamburger@user/hamburger)
[16:54:43] *** Joins: pulse (~pulse@user/pulse)
[16:54:51] *** Quits: Payam58 (~Payam@138.106.57.131) (Quit: Client closed)
[16:56:20] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[16:57:27] *** Joins: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823)
[16:58:33] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[16:58:58] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 260 seconds)
[16:59:22] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:00:47] *** Joins: jsbach (~jsbach@2a01:c22:a54f:c100:73ba:ea8d:354e:db27)
[17:02:34] *** Quits: chenqisu1 (~chenqisu1@183.217.200.168) (Quit: Leaving)
[17:04:29] *** Joins: Atque (~Atque@user/atque)
[17:05:51] *** Joins: Administrator__ (~hamburger@user/hamburger)
[17:06:02] <evangeline> PJBoy, so this should work: https://godbolt.org/z/PqnvnGY15 ?
[17:06:48] <PJBoy> nah, can't have a constexpr vector outside of a constexpr function
[17:08:05] <PJBoy> so you'd have to do something more like https://godbolt.org/z/jWoErnoTW
[17:09:11] *** Quits: hamburger (~hamburger@user/hamburger) (Ping timeout: 250 seconds)
[17:10:37] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 260 seconds)
[17:10:48] <evangeline> PJBoy, makes sense, thank you
[17:11:36] <PJBoy> for funzies https://godbolt.org/z/G4Gscv54h
[17:11:50] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:12:02] *** Joins: xiongxin1 (~Thunderbi@117.136.40.190)
[17:12:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:12:37] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Remote host closed the connection)
[17:13:04] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Ping timeout: 250 seconds)
[17:13:14] *** Joins: john99 (~john99@213.246.103.34.bc.googleusercontent.com)
[17:13:25] *** Quits: unknow (~i.am@user/marlboro) (Ping timeout: 240 seconds)
[17:14:03] *** Joins: unknow (~i.am@user/marlboro)
[17:14:09] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[17:14:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:15:18] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:2fae:e7bf:4539:f0df:f823) (Ping timeout: 260 seconds)
[17:15:18] *** xiongxin1 is now known as xiongxin
[17:16:32] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[17:19:24] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[17:19:43] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[17:21:36] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:26:42] *** Joins: reset (~reset@user/reset)
[17:28:25] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[17:28:31] *** Joins: xiongxin1 (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5)
[17:29:20] *** Joins: rvalue (~rvalue@user/rvalue)
[17:30:25] *** Quits: xiongxin (~Thunderbi@117.136.40.190) (Ping timeout: 250 seconds)
[17:30:26] *** xiongxin1 is now known as xiongxin
[17:30:34] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[17:31:26] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 272 seconds)
[17:32:30] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[17:37:55] *** Joins: proller (~p@2a02:6b8:b081:b64f::1:29)
[17:40:55] *** Joins: daswf852 (~daswf852@user/daswf852)
[17:41:25] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 240 seconds)
[17:41:32] *** Quits: Administrator__ (~hamburger@user/hamburger) (Ping timeout: 260 seconds)
[17:43:18] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:43:21] *** Joins: forgotmynick (uid24625@id-24625.hampstead.irccloud.com)
[17:48:13] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:48:28] *** Joins: Tempesta (~Tempesta@user/tempesta)
[17:49:41] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[17:49:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:50:27] *** Quits: belphegor666 (~satan@user/belphegor666) (Ping timeout: 260 seconds)
[17:50:32] *** Joins: tradar (~tradar@user/tradar)
[17:50:53] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 260 seconds)
[17:52:27] *** Joins: belphegor666 (~satan@ip-046-223-003-068.um13.pools.vodafone-ip.de)
[17:53:19] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Read error: Connection reset by peer)
[17:54:40] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[17:55:28] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[17:57:44] *** Joins: hamburger (~hamburger@user/hamburger)
[18:00:21] *** Quits: Prof_Dumbledore (~Prof_Dumb@2409:4042:4d31:a150:958d:2a97:13df:cfbd) (Ping timeout: 245 seconds)
[18:02:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:04:16] *** Quits: ironman (~ironman@2405:201:1010:b051:9f16:af8b:1612:56e5) (Quit: Leaving)
[18:06:20] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:10:27] *** Joins: Brainium (~brainium@user/brainium)
[18:12:15] *** Quits: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se) (Read error: Connection reset by peer)
[18:12:30] *** Joins: Green_ (~Green-@h-85-24-185-116.A189.priv.bahnhof.se)
[18:15:04] *** Joins: zer0bitz (~zer0bitz@2001:2003:f750:a200:88a0:fb04:2d2:c434)
[18:16:17] *** Quits: hiroshi_ (~freedom@151.35.46.107) (Quit: hiroshi_)
[18:17:17] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[18:19:55] *** Joins: seninha (~seninha@user/seninha)
[18:23:57] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 250 seconds)
[18:25:44] *** Quits: hamburger (~hamburger@user/hamburger) (Quit: Leaving)
[18:33:02] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[18:33:27] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:33:49] *** Joins: N4buc0 (~N4buc0@189.115.86.130)
[18:35:35] *** Quits: jokoon (~eio@2a01:e0a:542:e160:119b:2153:38d4:bf30) (Quit: Leaving)
[18:41:42] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:43:59] *** Joins: SaltHilStroller_ (~SaltHillS@206.223.160.26)
[18:44:40] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:48] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:49] *** ChanServ sets mode: +v npaperbot
[18:46:28] *** Quits: gojiraz (~goose@111.199.80.15) (Read error: Connection reset by peer)
[18:46:46] *** Joins: gojiraz (~goose@111.199.80.15)
[18:49:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[18:51:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:55:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:55:54] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:56:50] *** Quits: xiongxin (~Thunderbi@2409:8954:2e14:170d:f1be:16dc:459f:3aa5) (Ping timeout: 260 seconds)
[18:57:18] *** Joins: seninha (~seninha@user/seninha)
[18:57:51] *** Quits: [o (~istupy@2620:0:1003:206:7555:dc53:8a25:a389) (Remote host closed the connection)
[18:58:38] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[19:00:32] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[19:03:14] *** Joins: Payam38 (~Payam@138.106.57.131)
[19:04:17] *** Quits: Tempesta (~Tempesta@user/tempesta) (Read error: Connection reset by peer)
[19:06:02] *** Joins: Atque (~Atque@user/atque)
[19:08:51] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:11:22] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[19:12:38] *** Joins: Optimus (~risto@87.227.227.147)
[19:13:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:14:07] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:14:25] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[19:15:12] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[19:19:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:19:28] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[19:19:47] <tonitch> This might be a dumb question but in what case should you reference a pointer to a class from within the class iself ? (like class myclass{ myclass * c_myclass = this}) I see this in a project and i'm not sure for what it could be used
[19:19:52] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:23:14] <ville> tonitch: having a pointer to the object it self seems unusual, having a pointer to the type in self is not that odd
[19:23:31] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.5)
[19:23:40] <ville> err in it
[19:26:39] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[19:27:00] <tonitch> https://github.com/cuberite/cuberite/blob/master/src/Root.h#L249= and https://github.com/cuberite/cuberite/blob/master/src/Root.h#L249=
[19:27:07] <tonitch> https://github.com/cuberite/cuberite/blob/master/src/Root.cpp#L86=
[19:30:43] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:8858:5b2:a927:8ef7) (Quit: Konversation terminated!)
[19:32:41] <ville> who knows...
[19:34:38] <tonitch> Okay, so this is not common ^^ I though it was
[19:35:45] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[19:41:54] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.7.threembb.co.uk)
[19:41:56] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:43:34] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 246 seconds)
[19:45:03] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[19:48:07] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.7.threembb.co.uk) (Ping timeout: 246 seconds)
[19:51:03] *** Quits: gproto23 (~gproto23@user/gproto23) (Ping timeout: 260 seconds)
[19:52:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[19:52:51] *** Joins: meandrain (~meandrain@2a02:2f0e:f708:1200:d147:cca6:dc0e:8b73)
[19:55:03] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.5.threembb.co.uk)
[19:56:26] <Alipha> tonitch: eh, so what you linked to is a static member variable, which for a _static_ member variable, there's only one instance of the variable for the whole application, instead of one instance per object of the class. and so, it seems like this s_Root is acting as a "singleton"
[19:57:28] <Alipha> this s_Root variable seems to be tracking the most-recent cRoot object which was created
[19:58:58] *** Joins: ckdCreations (~ckdCreati@147.55.133.141)
[19:59:15] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:00:11] *** Quits: proller (~p@2a02:6b8:b081:b64f::1:29) (Ping timeout: 252 seconds)
[20:00:13] *** Joins: aakashi2001 (~aakashi20@103.61.255.39)
[20:00:13] *** Quits: aakashi2001 (~aakashi20@103.61.255.39) (Changing host)
[20:00:13] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[20:05:31] *** Joins: proller (~p@2a02:6b8:b081:4::1:3b)
[20:05:37] *** Quits: zer0x (~zer0x@1.55.255.231) (Ping timeout: 246 seconds)
[20:07:12] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[20:07:52] <AliceMeows> What are the chances we'll ever get destructive move?
[20:08:07] <Alipha> AliceMeows: probably zero
[20:08:21] <Alipha> AliceMeows: why do you want a destructive move?
[20:08:22] <AliceMeows> Yeah, I didn't think otherwise
[20:08:44] <AliceMeows> To fix my unique_resource which is currently useless garbage thanks to the current move semantics
[20:09:06] *** Quits: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6) (Quit: Leaving)
[20:09:19] <Alipha> oh, definitely zero if you're talking about replacing current move semantics
[20:09:43] <AliceMeows> I'll take a hack of sorts too as long as I don't have to waste processing power or memory
[20:09:46] <danieldg> yeah, it'd need to be a *third* type of by-value thing
[20:10:05] <AliceMeows> Yeah lets just complicate the language further lol
[20:10:38] <danieldg> there are plenty of hacks - just using optional is a good one
[20:10:49] <PJBoy> https://media.discordapp.net/attachments/400588936151433220/939224242262790204/image0.jpg?width=640&height=360
[20:11:01] <AliceMeows> That is wasting memory and processing power
[20:11:51] <AliceMeows> PJBoy: sometimes it surely feels that way
[20:12:21] <danieldg> I think a Sufficiently Smart Compiler can eliminate the bool part of the option if the move is clear
[20:12:47] <AliceMeows> Same as eliminates the indirection for unique_ptr?
[20:12:50] *** Quits: forgotmynick (uid24625@id-24625.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[20:12:53] <AliceMeows> as it*
[20:12:56] <danieldg> probably
[20:13:47] *** Joins: nostar (~nostar@2601:406:4100:34d:8f4:5ea7:30b2:b7e6)
[20:14:03] <AliceMeows> danieldg: https://godbolt.org/z/MWvEq68o8 it doesn't
[20:14:33] <PJBoy> there's [P1144]
[20:14:33] <npaperbot> P1144R5: [Evolution, Library Evolution] Object relocation in terms of move plus destroy <https://wg21.link/p1144r5> (by Arthur O'Dwyer) (2020-03-02) (Related: https://wg21.link/p1144r5/github)
[20:15:03] *** Quits: chir4gm (~chir4gm@user/chir4gm) (Quit: The Lounge - https://thelounge.chat)
[20:15:14] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[20:15:39] <danieldg> AliceMeows: yeah, you need LTO or inlining
[20:15:52] <PJBoy> that one I think is a shoe in for future C++
[20:16:30] <AliceMeows> danieldg: I'd rather have the language provide me that and not hope some compiler will or wont optimize such code
[20:16:40] <danieldg> agreed, it would be nice
[20:18:45] <Alipha> AliceMeows: func has to preserve its ABI
[20:18:46] <danieldg> while we're at it, a way to initialize a value from an inner scope and have it visible at a higher scope would be nice
[20:19:26] <danieldg> (right now you have to do it with closures or helper functions)
[20:19:35] <PJBoy> if you don't initialise your variable at declaration, then destruction gets complicated
[20:19:53] <Zogatribe> danieldg: seems to me that you are trying to abuse scope
[20:19:59] *** Quits: john99 (~john99@213.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[20:20:00] <danieldg> PJBoy: yes, but if you can move-out, that's already the complicated destructor
[20:20:13] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 260 seconds)
[20:20:15] <PJBoy> move out?
[20:20:37] <AliceMeows> PJBoy: in my case it breaks if unique_resource is moved
[20:21:01] <danieldg> Zogatribe: { auto foo; while (1) { foo_factory ff; foo = ff.do_stuff(); if (foo.is_good()) break; } foo.use() }
[20:21:03] <PJBoy> what breaks?
[20:21:14] *** Joins: Enitin (Enitin@gateway/vpn/protonvpn/enitin)
[20:21:23] <danieldg> Zogatribe: with the goal that the factory is destructed before using foo
[20:21:47] <AliceMeows> It technically screws unique_resource's state since there is no book keeping of the internal variable
[20:21:57] <Zogatribe> I have no idea what you mean by that (and yes I know what a factory is)
[20:22:13] <Alipha> AliceMeows: use and use2 are identical here: https://godbolt.org/z/zfj9bczYe
[20:23:08] <AliceMeows> Its not about use() but func() it was left there by accident from a previous test
[20:23:10] <danieldg> Zogatribe: assume the factory allocates 1MB that is freed on ~ff, and foo::use also allocates 1MB
[20:23:14] <PJBoy> so `{ auto foo; while (1) { { foo_factory ff; foo = ff.do_stuff(); } if (foo.is_good()) break; } foo.use() }`?
[20:23:54] <danieldg> Zogatribe: if those two allocations were the same 1MB, it'd be faster (memory already in cache, etc)
[20:24:34] <danieldg> or assume it's something that is more limited-resource than 1MB
[20:25:03] <PJBoy> looks like the factory is destroyed before foo is used to me
[20:25:22] <danieldg> PJBoy: correct, that's the desired behavior
[20:25:30] <danieldg> PJBoy: but afaik that is not valid C++
[20:25:43] <PJBoy> why wouldn't it be?
[20:26:00] <PJBoy> aside from foo's type not being written
[20:26:02] <Alipha> AliceMeows: the fact that use and use2 are the same means that the compiler optimized func and func to be the same.
[20:26:27] <danieldg> PJBoy: or maybe it's only valid if foo has a default constructor
[20:26:35] <AliceMeows> With larger functions which wont get inlined wont look the same
[20:26:37] <PJBoy> yeah that much is true
[20:27:13] <danieldg> and if foo is copyable/assignable
[20:27:29] <PJBoy> yeah
[20:27:35] <AliceMeows> Alipha: the problem is that unique_ptr isn't zero overhead abstraction
[20:30:54] <PJBoy> last I checked it was
[20:31:09] <PJBoy> but ABIs are refusing to put unique_ptr in registers
[20:35:15] <Alipha> AliceMeows: arguably nothing is a zero overhead abstraction :-)
[20:36:03] <PJBoy> what about `using Int = int;`?
[20:36:50] <Zogatribe> how is that an abstraction?
[20:37:06] <Alipha> PJBoy: YOU ADDED 16 BYTES TO THE SOURCE CODE
[20:37:18] <PJBoy> damn it
[20:37:34] <PJBoy> what about `using T = unsigned long long;` and then using T in a few places?
[20:37:37] <Oxyd> Also parsing that line is going to take more than 0 time.
[20:37:42] <PJBoy> saving bytes in total
[20:37:55] <danieldg> compiler memory use goes up slightly
[20:38:00] <PJBoy> that's gotta be a non-zero underhead abstraction
[20:38:06] *** Quits: proller (~p@2a02:6b8:b081:4::1:3b) (Ping timeout: 260 seconds)
[20:38:45] <PJBoy> Zogatribe, it abstracts int
[20:39:10] <Zogatribe> no it doesn't
[20:39:37] <danieldg> I'd call that a C++ style #define, not an abstraction
[20:39:46] <PJBoy> depends on your definition of abstraction I guess
[20:40:01] <PJBoy> I'd say `int` is the concretisation of `Int`
[20:40:24] *** Quits: gojiraz (~goose@111.199.80.15) (Quit: Leaving)
[20:40:26] <Zogatribe> using Ordinal = int; // this is an abstraction
[20:40:56] <PJBoy> yeah I agree with that
[20:42:39] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 260 seconds)
[20:42:48] <AliceMeows> Alipha: ideally I want to use unique_ptr as if it was T* with automatic clean up
[20:46:29] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[20:49:14] *** Joins: andreasbuhr (~quassel@p549dbae6.dip0.t-ipconnect.de)
[20:49:14] *** Quits: andreasbuhr (~quassel@p549dbae6.dip0.t-ipconnect.de) (Client Quit)
[20:51:01] *** Joins: proller (~p@2a02:6b8:b081:1215::1:d)
[20:56:08] *** Joins: rgrinberg (~textual@177.248.156.216)
[21:02:52] *** Quits: rgrinberg (~textual@177.248.156.216) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:03:11] <furrymcgee> automatic cleanup aka automatic storage duration?
[21:04:13] *** Joins: rg (~r-g@gaei.riseup.net)
[21:04:14] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.5.threembb.co.uk) (Ping timeout: 272 seconds)
[21:05:07] *** Quits: proller (~p@2a02:6b8:b081:1215::1:d) (Ping timeout: 260 seconds)
[21:05:34] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:07:54] *** Joins: Inline__ (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de)
[21:08:16] *** Quits: Learath2 (~learath2@user/learath2) (Ping timeout: 245 seconds)
[21:08:22] *** Quits: Inline (~Inline@p200300cd470a540051f7a3750a30b01e.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[21:08:54] *** Quits: Jmtrix (~qed@user/jmtrix) (Ping timeout: 260 seconds)
[21:10:51] *** Joins: Learath2 (~learath2@user/learath2)
[21:10:57] *** Joins: Jmtrix (~qed@2604:180:2:72d::497d)
[21:10:57] *** Quits: Jmtrix (~qed@2604:180:2:72d::497d) (Changing host)
[21:10:57] *** Joins: Jmtrix (~qed@user/jmtrix)
[21:14:47] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:15:30] *** Joins: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk)
[21:17:56] *** Joins: proller (~p@2a02:6bf:fff0:1:523a:1884:c76a:85aa)
[21:19:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:19:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:21:37] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[21:23:18] *** Quits: Perry (~perry@coffee-break.at) (Quit: ZNC - http://znc.in)
[21:23:21] *** Quits: proller (~p@2a02:6bf:fff0:1:523a:1884:c76a:85aa) (Ping timeout: 250 seconds)
[21:23:27] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[21:23:35] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:23:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[21:23:58] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[21:24:03] *** Joins: Perry (~perry@coffee-break.at)
[21:24:40] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:24:42] *** Joins: faLUKE (~paolo@host-79-49-110-144.retail.telecomitalia.it)
[21:26:09] *** Quits: MajorBiscuit (~MajorBisc@c-001-013-026.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:26:12] *** Joins: ivii (~ivan@user/ivii)
[21:29:08] <faLUKE> Hey, I'm looking at this FAQ: https://isocpp.org/wiki/faq/classes-and-objects#in-class-constant .  At a certain point, the xample uses, inside the f() function, a declared but not defined function:  void byref(const int&);  is this an error of the FAQ? I can't understand how it would compile
[21:29:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 250 seconds)
[21:29:58] *** Quits: Optimus (~risto@87.227.227.147) (Ping timeout: 246 seconds)
[21:31:01] <AliceMeows> furrymcgee: freeing used resources
[21:31:13] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848)
[21:31:14] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:a5a4:d9a1:a057:3848) (Changing host)
[21:31:14] *** Joins: skapata (~Skapata@user/skapata)
[21:38:00] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[21:38:44] *** Joins: proller (~p@2a02:6bf:fff0:1:32c7:f26c:b56a:98f5)
[21:41:24] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[21:42:11] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 250 seconds)
[21:43:47] *** Quits: proller (~p@2a02:6bf:fff0:1:32c7:f26c:b56a:98f5) (Ping timeout: 260 seconds)
[21:44:36] *** Joins: MasterK (~MK@86.127.22.26)
[21:49:33] *** Joins: Optimus (~risto@87.227.227.147)
[21:50:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:53:56] <furrymcgee> do you expect new/delete to be zero overhead?
[21:54:30] <AliceMeows> No but I want the abstraction to have the same cost as calling new/delete
[21:55:31] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 246 seconds)
[21:56:28] *** Quits: rg (~r-g@gaei.riseup.net) (Ping timeout: 260 seconds)
[21:59:44] *** Joins: magla (~gelignite@55d42a76.access.ecotel.net)
[22:00:09] <furrymcgee> do you have any information abot the actual cost?
[22:05:13] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 260 seconds)
[22:08:20] *** Quits: Karel (~Karel@ptr-9091p58xjg5bis3jzhi.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[22:08:54] *** Joins: plastico (~plastico@neomutt/plastico)
[22:11:14] <PJBoy> faLUKE, yeah that's fine, provided it's defined somewhere at some point
[22:11:37] <PJBoy> it's the linker's job to connect the call to the definition
[22:12:21] <faLUKE> PJBoy: I'm seeing that the FAQ must be improved. It would be enough to change it with void byref(const int&){}.   And indent it better
[22:12:27] <PJBoy> if you omit the linker step, it compiles just fine
[22:12:41] <PJBoy> yeah the indentation is bad
[22:12:44] <Alipha> AliceMeows: again, as PJBoy said, blame the ABI compiler vendors settled on. The vendors decided that objects with non-trivial constructors are not passed in registers
[22:13:00] <faLUKE> PJBoy: but it's nonsense to have the declaration instead of a dummy definition
[22:13:09] <PJBoy> I don't disagree
[22:13:30] <PJBoy> probably why not many people sing that page's praises
[22:13:35] <Alipha> There's no reason a compiler vendor couldn't make your unique_ptr example as efficient as the pointer example if they chose to break this ABI
[22:13:55] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:14:10] <Alipha> s/break/deviate from/
[22:14:25] <faLUKE> also, this FAQ is pretty unreadable:  https://isocpp.org/wiki/faq/classes-and-objects#data-in-class
[22:14:30] <faLUKE> IMHO
[22:15:02] <Alipha> So yes, in the world we have today, unique_ptr is not a zero overhead abstraction in this regard
[22:15:30] *** Joins: proller (~p@80.240.216.69)
[22:15:51] <PJBoy> it's not beyond improvement, but it gets the job done as is
[22:16:23] <PJBoy> it's making a point about data members existing, not advertising clang-format sample output
[22:18:48] <faLUKE> PJBoy: uhmmmm
[22:20:06] <PJBoy> good, meditation will help
[22:22:29] *** Joins: Tempesta (~Tempesta@user/tempesta)
[22:22:38] *** Quits: Tangent-Man (~Tang3nt-M@92.40.178.2.threembb.co.uk) (Read error: Connection reset by peer)
[22:23:30] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[22:25:08] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[22:29:03] *** Quits: proller (~p@80.240.216.69) (Remote host closed the connection)
[22:29:23] <Alipha> "Why do I have to put the data in my class declarations?" So that the sizeof of the class is known, which is required for creating objects of the class and arrays of that class
[22:29:37] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[22:29:56] <Alipha> faLUKE: it definitely seems like that faq didn't answer the question and went off on a weird tangent
[22:30:19] <PJBoy> why don't you just have to declare the size then?
[22:30:26] *** Joins: proller (~p@80.240.216.69)
[22:30:30] <danieldg> PJBoy: alignment
[22:30:41] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Client Quit)
[22:30:42] <PJBoy> why don't you just have to declare size and alignment then?
[22:30:43] <danieldg> also how do you know the size?
[22:30:53] <Alipha> that would be an interesting alternative
[22:31:26] <danieldg> PJBoy: you *can* do tricks with unions and private-only members if you reall want to
[22:31:29] <PJBoy> if the class is standard layout, I could calculate the size manually
[22:31:39] <danieldg> PJBoy: what is sizeof(void*)?
[22:31:46] <PJBoy> sizeof(void*)
[22:31:50] <Alipha> PJBoy: https://github.com/alipha/cpp/tree/master/opaque_impl
[22:31:57] <PJBoy> I didn't say you're not allowed to write sizeof expressions
[22:32:13] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[22:32:26] <danieldg> PJBoy: so you have to copy-paste each member of the class and keep that in sync between the private and public headers
[22:32:49] <PJBoy> not necessarily, but potentially
[22:33:15] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Client Quit)
[22:33:36] <PJBoy> the compiler will surely tell me that I specified the size wrong when I get to actually declare the members
[22:33:38] <danieldg> you basically do - the only thing you wouldn't have to keep in sync is names
[22:33:51] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[22:34:08] <danieldg> maybe. Or maybe you removed a uint32_t field and added a void* field.  That size will match on 32-bit, but not on 64-bit
[22:34:10] <PJBoy> also generated code can obviously bypass this synching issue
[22:34:13] <danieldg> hope you have CI testing both
[22:34:37] <danieldg> oh, and types like 'int' and 'long' are just as bad here
[22:34:58] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Client Quit)
[22:34:58] *** Quits: AliceMeows (~AliceMeow@user/alicemeows) (Read error: Connection reset by peer)
[22:35:12] <PJBoy> indeed
[22:35:17] *** Joins: Karel (~Karel@ptr-9091p58xjg5bis3jzhi.18120a2.ip6.access.telenet.be)
[22:35:20] *** Joins: AliceMeows (~AliceMeow@user/alicemeows)
[22:35:31] <danieldg> sure, if you generate both headers from one common source it's fine
[22:35:55] <danieldg> but at that point what are you really gaining from not including the members?
[22:36:25] <PJBoy> the people that frequently asked the question of why data members need to be declared with the class definition see some value
[22:36:45] <danieldg> or they're just used to languages that don't require it
[22:37:00] <PJBoy> probably a highly inclusive or
[22:37:14] *** Joins: Betal (~Betal@user/betal)
[22:37:18] <PJBoy> though I can't think of any languages like that
[22:37:30] <danieldg> Java
[22:37:30] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:37:45] *** Joins: vicfred (~vicfred@user/vicfred)
[22:38:02] <PJBoy> also python actually
[22:38:10] <PJBoy> I thought java worked like C++
[22:38:19] <faLUKE> It seems to me that this FAQ is nonsense  https://isocpp.org/wiki/faq/ctors#ctor-initializer-order . PJBoy, what do you think about it?
[22:38:28] <danieldg> Java doesn't have headers, so you don't need to declare it in the header
[22:38:46] <PJBoy> what's this about a header?
[22:38:56] <PJBoy> that was never part of the question
[22:39:06] <Oxyd> You still need to define all your members in the class definition in Java.
[22:39:28] <danieldg> ... oh, I guess I was assuming the question was higher-level than that
[22:40:01] <PJBoy> faLUKE, what's non-sensical about it?
[22:40:01] <danieldg> so that is a "why do you declare variables before using them" question
[22:40:41] <PJBoy> well like in python I can define a class and add members to it in any of its member functions on-the-fly
[22:41:04] <PJBoy> so I guess there is an alternative of sorts
[22:41:31] *** Joins: sbrothy (~george@192038130202.mbb.telenor.dk)
[22:41:41] <PJBoy> and the FAQ answer talks about how the size would be needed in advance to have a class object on the stack
[22:41:43] <faLUKE> PJBoy: first of all: even if you have only x_(y_) in the initializer list of Z's ctor, the problem of "using Y before Initializing Y" remains.
[22:41:46] <PJBoy> which python wouldn't be able to do
[22:41:46] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[22:42:13] <faLUKE> PJBoy: then, the problem showed by the FAQ has nothing to do with the order in the list
[22:42:16] *** Quits: sbrothy (~george@192038130202.mbb.telenor.dk) (Client Quit)
[22:43:13] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:43:26] <PJBoy> that's true
[22:43:45] *** Joins: rgrinberg (~textual@177.248.156.216)
[22:44:02] <PJBoy> yeah I agree with that criticism
[22:44:27] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 256 seconds)
[22:44:41] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:50] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:50] *** ChanServ sets mode: +v npaperbot
[22:44:51] <PJBoy> that's an unwritten assumption that you would mention every data member in the ctor init list
[22:44:54] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:45:33] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[22:47:13] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:47:29] <Alipha> a better example would be `Z::Z(int y) : y_(y * 2), x_(y_) {}`
[22:47:48] <acidtonic> Compiler related issue here could use any compiler-mixing experts -> https://forum.opencv.org/t/opencv-mixing-compilers-big-project-compound-issues/8195
[22:47:51] <Alipha> also, the faqs use `throw()` instead of `noexcept` :-(
[22:48:06] *** Quits: murphy__ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com) (Ping timeout: 272 seconds)
[22:48:12] *** Joins: murphy_ (~murphy_@cpe-104-162-115-128.nyc.res.rr.com)
[22:48:29] <PJBoy> yeah those faqs are relics of the past
[22:48:50] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[22:52:20] *** DrMax__ is now known as DrMax_
[22:53:47] <pippijn> the size of an object does not need to be known statically to allocate stack memory, but in C++ it is needed if you want to allocate an object with automatic storage duration
[22:54:30] *** Joins: troller (~p@80.240.216.69)
[22:54:54] <danieldg> it does need to be known dynamically, which would be a problem if you could add things in any member function
[22:55:05] <Alipha> eh, what's this distinction you're making between "stack memory" and "automatic storage duration"?
[22:55:06] <danieldg> unless you did a gather-up step during compile
[22:56:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 260 seconds)
[22:57:44] *** Quits: troller (~p@80.240.216.69) (Remote host closed the connection)
[22:58:57] *** Joins: proller (~p@80.240.216.69)
[23:04:03] <faLUKE> Alipha, yeah, I had to correct that.
[23:04:29] *** Quits: DrMax_ (~DrMax@132.215.96.30) (Remote host closed the connection)
[23:05:45] *** Quits: Enitin (Enitin@gateway/vpn/protonvpn/enitin) (Ping timeout: 256 seconds)
[23:06:23] <faLUKE> PJBoy: let's hope I won't encounter many other absurdities, otherwise I have to use another FAQ's source
[23:06:27] <SaltHilStroller_> I have a pointer to an parent class, and I'd like to invoke different functions based on the actual type the parent pointer points to. Is this possible?
[23:06:48] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[23:08:57] <PJBoy> faLUKE, there's the Bjarne's homeboys guidelines
[23:09:09] <PJBoy> http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines
[23:09:19] <ncwbqcfe> SaltHilStroller_: sounds like basic polymorphism
[23:13:23] *** Joins: kenantu (~kenanmara@user/kenanmarasli)
[23:14:26] <Alipha> SaltHilStroller_: virtual member functions. As ncwbqcfe said
[23:15:47] *** Quits: goepsilongo_ (~goepsilon@2603-7000-ab00-62ed-5552-c541-2a06-6581.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[23:16:35] <faLUKE> PJBoy: I used the C++ FAQ book (the source of that website) in the past years and I found it very useful when the FAQs are correct. I don't see other alternatives than marking with "wrong/unprecise" all the FAQs I re-read, after asking in this channel when I find weird things. I don't remember if Soustroup's guidelines are better than the FAQs... what do you think about?
[23:17:53] <PJBoy> I think the guidelines I linked are solid
[23:18:27] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[23:19:31] <faLUKE> Also this FAQ seems to me wrong:  https://isocpp.org/wiki/faq/ctors#order-dependency-in-members ---> compilers always warn for order problems
[23:22:08] *** Quits: suki (~jimery@116.30.222.122) (Ping timeout: 265 seconds)
[23:22:20] <faLUKE> also this FAQ:  https://isocpp.org/wiki/faq/ctors#return-by-value-optimization  <--- it is included in the ctor's FAQ list, which is nonsense
[23:22:53] <faLUKE> (but maybe its title is wrong)
[23:23:55] *** Joins: suki (~jimery@116.30.222.11)
[23:24:19] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[23:29:13] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 256 seconds)
[23:30:33] *** Joins: seninha (~seninha@user/seninha)
[23:32:33] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[23:38:56] *** Joins: nvmd (~weechat@user/nvmd)
[23:39:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[23:40:02] *** Quits: konfusedagain (~konfuseda@125.99.177.198) (Ping timeout: 272 seconds)
[23:41:26] *** Joins: Kim[m] (~kimagders@2001:470:69fc:105::1:e7c2)
[23:42:02] *** Joins: konfusedagain (~konfuseda@125.99.177.198)
[23:46:12] *** Parts: AliceMeows (~AliceMeow@user/alicemeows) ()
[23:47:35] *** Joins: sobkas (~sobkas@95.175.17.217)
[23:49:34] <SaltHilStroller_> ncwbqcfe, Alipha: I don't quite think that is what I'm trying to achieve. Similar to this: https://godbolt.org/z/xsfnM7Gj3
[23:54:49] <SaltHilStroller_> I.e., given a parent pointer, invoke a non-member function polymorphically based on the actual type of the parent
[23:56:33] *** Quits: irf21k (~irf21k@223.237.152.249) (Read error: Connection reset by peer)
[23:57:26] <lmat>  int * i; func0( func1(&i), i);    func1 changes the value of i. When func0 gets its copy of i, will it be that adjusted by func1, or the original (uninitialized) i?
[23:57:50] <anyone> lmat: you literally said it changes it, so that's that
[23:58:12] <anyone> there was something about evaluation order being unspecified. or lately specified in C++17. but only partway.
[23:58:22] <anyone> https://en.cppreference.com/w/cpp/language/eval_order
[23:58:41] <anyone> "There is no concept of left-to-right or right-to-left evaluation in C++."
[23:58:50] <Alipha> lmat: I believe it's unspecified whether func0 will be passed the new value or the original (uninitialized) value
