[00:03:10] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[01:10:52] <CarloWood> { foo({3.14, 42}); } template<class... Types> void foo(std::tuple<Types...> const&) { }
[01:10:52] <geordi> error: invalid initialization of reference of type 'const tuple<>&' from expression of type '<brace-enclosed initializer list>'
[01:11:03] <CarloWood> { foo({3.14, 42}); } template<class... Types> void foo(std::tuple<Types...>) { }
[01:11:03] <geordi> error: could not convert '{3.1400000000000001e+0, 42}' from '<brace-enclosed initializer list>' to 'tuple<>'
[01:11:54] <CarloWood> { foo(make_tuple{3.14, 42}); } template<class... Types> void foo(std::tuple<Types...>) { }
[01:11:54] <geordi> error: expected ')' before '{' token (fix known)
[01:12:05] <CarloWood> { foo(make_tuple(3.14, 42)); } template<class... Types> void foo(std::tuple<Types...>) { }
[01:12:06] <geordi>  
[01:12:52] <CarloWood> { foo(make_tuple(3.14, 42)); } void bar(double, int) {} template<class... Types> void foo(std::tuple<Types...> args) { bar(args...); }
[01:12:52] <geordi> error: expansion pattern 'args' contains no parameter packs
[01:14:27] <CarloWood> { foo(make_tuple(3.14, 42)); } void bar(double d, int i) { cout << d << ' ' << i; } template<class... Types> void foo(std::tuple<Types...> args) { bar(std::get<0>(args), std::get<1>(args)); }
[01:14:28] <geordi> 3.14 42
[01:33:15] *** Joins: badone (~badone@209.132.189.152)
[03:25:23] <graphitemaster> << ((1 << 0) | (1 << 1))
[03:25:24] <geordi> 3
[03:26:04] <graphitemaster> << ((1 << 2) | (1 << 3))
[03:26:05] <geordi> 12
[03:56:41] <graphitemaster> << (1 << 2)
[03:56:42] <geordi> 4
[03:56:47] <graphitemaster> << (1 << 3)
[03:56:48] <geordi> 8
[05:00:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[05:09:02] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[05:16:56] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[06:33:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[06:44:04] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:40:43] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[15:58:26] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[16:50:36] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[17:03:45] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[19:26:11] <CarloWood> Eelis: Any chance for a geordi bot for discord? 
[19:28:03] <CarloWood> { tuple<double, char> t1{3.14, 'x'}; SHOW(t1); }
[19:28:04] <geordi> t1 = {3.14, 'x'}
[19:28:43] <CarloWood> { tuple<double, char> t1{3.14, 'x'}; tuple<void*, bool> t2{&t1, true}; SHOW(t1); SHOW(t2); }
[19:28:44] <geordi> t1 = {3.14, 'x'} t2 = {0x7ffc355fc290, true}
[19:30:02] <CarloWood> { tuple<double, char> t1{3.14, 'x'}; tuple<void*, bool> t2{&t1, true}; auto t12 = tuple_cat(t1, t2); SHOW(t1); SHOW(t2); SHOW(t12); }
[19:30:03] <geordi> t1 = {3.14, 'x'} t2 = {0x7ffe9a34bcb0, true} t12 = {3.14, 'x', 0x7ffe9a34bcb0, true}
[20:35:03] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 256 seconds)
[20:37:04] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[21:30:10] <Eelis> CarloWood: if there's a discord lib for Haskell it should be easy. i personally have no interest in discord
[22:40:46] *** Joins: arleigh (~arleigh@88.230.140.93)
[22:42:40] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[23:01:06] <CarloWood> { A a; auto t = make_tuple(3.14, 42, 'x', &a); cout << t; } struct A {}; template<typename... Args> ostream& operator<<(ostream& os, tuple<Args...> const& t) { std::apply([&os](auto&&... args) {((os << args << " "), ...);}, t); return os; }
[23:01:07] <geordi> error: no match for 'operator<<' in 'operator<< <char_traits<char> >((* & o), ((const char*)", ")) << t' (operand types are 'ostream' and 'const ostream')
