[00:01:30] <[Coke]> all blame points to TimToady!
[00:01:34] <tonyo_> if the signature was different i'd be one thing
[00:01:36] <[Coke]> (in a good way. :)
[00:02:19] <tonyo_> m: sub infix:<op>($x, *@a) is assoc<right> { $x + [*] @a }; say 1 op (2,3,4);
[00:02:19] <camelia> rakudo-moar 3dc4aca28: OUTPUT: «25␤»
[00:02:31] <tonyo_> i'd meaning it'd
[00:06:54] <raydiak> agreed, that would at least do something
[00:13:48] *** Joins: monochromec (~monochrom@pd95e1518.dip0.t-ipconnect.de)
[00:15:31] <monochromec> Is there a developer advocate or spokesperson of the project?
[00:15:57] <monochromec> Or somebody who may be willing to advocate the language in a news outlet?
[00:20:17] <tonyo_> monochromec: in what capacity?
[00:21:10] <monochromec> Doing an episode on the project as part of a FLOSS podcast.
[00:21:21] <[Coke]> Do you have a news outlet in mind/all set just looking or a person, or are you looking for a marketing person?
[00:23:55] <monochromec> A project coordinator or some other dev with a technical background who can talk about the project, its roadmap and history (esp. the things that set Raku apart from Perl) would be ideal.
[00:25:42] *** Joins: monkey_ (~user@181.114.17.106)
[00:27:05] <[Coke]> lizmat, codesections, maybe someone from the steering committe. ^^
[00:27:07] <tonyo_> the history part might vary widely depending upon who steps forward
[00:27:36] *** Quits: xinming_ (~xinming@115.219.36.113) (Ping timeout: 245 seconds)
[00:27:59] *** Joins: xinming_ (~xinming@115.219.36.113)
[00:31:00] *** Quits: monkey_ (~user@181.114.17.106) (Remote host closed the connection)
[00:31:41] *** Joins: monkey_ (~user@181.114.17.106)
[00:33:37] <monochromec> And how would I get in touch with the steering committee? Is there a mailing list or something similar?
[00:33:48] <[Coke]> I'd volunteer jnthn, but I don't want to add to his plate. :)
[00:34:14] <[Coke]> .ask lizmat any suggestions for monochromec's request for someone to talk about Raku on a podcast?
[00:34:15] <tellable6> [Coke], I'll pass your message to lizmat
[00:34:26] <[Coke]> she'll see it when she comes back, she's on the RSC.
[00:34:34] <[Coke]> leave an email or something?
[00:35:20] <monochromec> Mail address is gig@lininlaws.eu. Thanks for your help!
[00:35:32] *** Quits: monochromec (~monochrom@pd95e1518.dip0.t-ipconnect.de) (Quit: Connection closed)
[00:39:51] <[Coke]> thanks for helping us get the word out!
[00:48:46] *** Joins: Petr (~Petr@31.128.219.254)
[00:48:56] <guifa> lizmat++ MasterDuke++ Both of those are critical to getting Intl::Format::DateTime up and running.  new-disp fixes some weird compilation issues with the DateTime::Timezones and RakuAST…well… obviously for constructing formatters à la lizmat's new .fmt ^_^
[00:49:21] <Petr> It is possible to run raku on android&
[00:49:31] <Petr> ?
[00:50:12] <guifa> Petr: Possible, sure.  But I don't know of any pre-made library for it.  
[00:50:25] <guifa> but someone else might
[00:50:53] <Petr> Cant find any info about 
[00:52:51] <raydiak> istr there was talk about someone getting it to work on termux
[00:53:22] *** Quits: kawaii_ (sid345572@id-345572.hampstead.irccloud.com) (Ping timeout: 260 seconds)
[00:53:42] *** Quits: mjgardner (sid182628@id-182628.ilkley.irccloud.com) (Ping timeout: 268 seconds)
[00:53:55] *** Quits: zostay (sid170293@id-170293.hampstead.irccloud.com) (Ping timeout: 268 seconds)
[00:54:06] <guifa> So there's two routes I'd look at initially: you can build Rakudo on the JVM, although I'm not sure if it runs okay with ART (I suppose it should though), or you can also use the JS build of Rakudo inside of a WebView and communicate that way, but that's definitely a crazy round about way to do it
[00:54:18] *** Quits: PotatoGim (sid99505@id-99505.lymington.irccloud.com) (Ping timeout: 260 seconds)
[00:54:19] *** Quits: leont (sid489095@id-489095.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:54:23] *** Quits: tbrowder (sid168924@id-168924.lymington.irccloud.com) (Ping timeout: 246 seconds)
[00:54:27] *** Quits: SmokeMachine (sid19088@id-19088.tinside.irccloud.com) (Ping timeout: 240 seconds)
[00:54:27] *** Quits: pjlsergeant (sid143467@id-143467.hampstead.irccloud.com) (Ping timeout: 240 seconds)
[00:55:09] *** Quits: ecocode__ (sid500572@id-500572.lymington.irccloud.com) (Ping timeout: 268 seconds)
[00:55:14] *** Quits: patterner_ (sid212303@id-212303.ilkley.irccloud.com) (Ping timeout: 260 seconds)
[00:55:17] *** Quits: skaji (sid178483@id-178483.tinside.irccloud.com) (Ping timeout: 264 seconds)
[00:55:20] *** Joins: pjlsergeant (sid143467@hampstead.irccloud.com)
[00:55:33] *** Quits: rjbs (sid498898@id-498898.uxbridge.irccloud.com) (Ping timeout: 268 seconds)
[00:55:50] *** Joins: rjbs (sid498898@uxbridge.irccloud.com)
[00:55:55] *** Joins: PotatoGim (sid99505@lymington.irccloud.com)
[00:56:14] *** Joins: skaji (sid178483@5.254.36.57)
[00:56:14] *** Joins: SmokeMachine (sid19088@5.254.36.57)
[00:56:30] *** Joins: patterner_ (sid212303@ilkley.irccloud.com)
[00:57:52] <Petr> thanks
[00:58:22] *** Joins: tbrowder (sid168924@lymington.irccloud.com)
[00:59:25] *** Parts: Petr (~Petr@31.128.219.254) ()
[00:59:40] *** Joins: mjgardner (sid182628@ilkley.irccloud.com)
[00:59:44] *** Joins: zostay (sid170293@hampstead.irccloud.com)
[00:59:49] *** Joins: kawaii_ (sid345572@hampstead.irccloud.com)
[01:00:08] *** Joins: ecocode__ (sid500572@lymington.irccloud.com)
[01:07:05] <raydiak> .tell Petr I also found a mention of someone running it under debian in UserLAnd (https://play.google.com/store/apps/details?id=tech.ula)
[01:07:06] <tellable6> raydiak, I'll pass your message to Petr
[01:08:14] *** Quits: xinming_ (~xinming@115.219.36.113) (Ping timeout: 245 seconds)
[01:08:38] *** Joins: leont (sid489095@id-489095.uxbridge.irccloud.com)
[01:10:20] *** Joins: xinming_ (~xinming@115.219.36.113)
[01:32:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87)
[01:43:51] *** Joins: berber44 (~berber44@78.107.92.180)
[01:44:16] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Ping timeout: 252 seconds)
[01:45:47] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[01:59:42] *** Joins: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net)
[02:01:07] *** Quits: chloekek (~chloekek@84-80-232-61.fixed.kpn.net) (Remote host closed the connection)
[02:29:48] *** Quits: monkey_ (~user@181.114.17.106) (Read error: Connection reset by peer)
[02:41:34] *** Quits: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 245 seconds)
[02:43:46] *** Joins: Maylay (~gren@108-198-59-230.lightspeed.miamfl.sbcglobal.net)
[02:59:39] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:07:24] *** Quits: xinming_ (~xinming@115.219.36.113) (Ping timeout: 245 seconds)
[03:21:28] *** Quits: berber44 (~berber44@78.107.92.180) (Ping timeout: 256 seconds)
[03:32:44] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[03:40:57] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[03:43:26] *** Quits: simcop2387 (~simcop238@perlbot/patrician/simcop2387) (Ping timeout: 245 seconds)
[03:44:02] *** Quits: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot) (Ping timeout: 265 seconds)
[03:49:31] *** Joins: swaggboi (~swaggboi@slackware.uk/supporter/swaggboi)
[03:50:12] *** Quits: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net) (Quit: No Ping reply in 180 seconds.)
[03:51:27] *** Joins: djerius (~quassel@pool-108-20-43-199.bstnma.fios.verizon.net)
[04:13:08] *** Joins: simcop2387 (~simcop238@perlbot/patrician/simcop2387)
[04:22:40] *** Joins: perlbot (~perlbot@perlbot/bot/simcop2387/perlbot)
[04:34:32] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[04:56:15] *** Joins: berber44 (~berber44@78.107.92.212)
[05:02:31] *** Joins: berber4489 (~berber44@78.107.92.212)
[05:02:41] *** Quits: berber4489 (~berber44@78.107.92.212) (Client Quit)
[05:02:53] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[05:06:17] *** Quits: berber44 (~berber44@78.107.92.212) (Ping timeout: 256 seconds)
[06:06:18] *** Quits: bloatable6 (blo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: committable6 (com-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: shareable6 (sha-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: quotable6 (quo-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: greppable6 (gre-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: coverable6 (cov-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: nativecallable6 (nat-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: unicodable6 (uni-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: squashable6 (squ-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: tellable6 (tel-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: bisectable6 (bis-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: benchable6 (ben-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: statisfiable6 (sta-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[06:06:18] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:06:18] *** Quits: sourceable6 (sou-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:06:18] *** Quits: notable6 (not-able@2001:41d0:2:5eb5::) (Read error: Connection reset by peer)
[06:06:18] *** Quits: releasable6 (rel-able@2001:41d0:2:5eb5::) (Write error: Connection reset by peer)
[06:06:48] *** Joins: statisfiable6 (sta-able@2001:41d0:2:5eb5::)
[06:07:05] *** Joins: notable6 (not-able@2001:41d0:2:5eb5::)
[06:07:14] *** Joins: releasable6 (rel-able@2001:41d0:2:5eb5::)
[06:07:15] *** Joins: greppable6 (gre-able@2001:41d0:2:5eb5::)
[06:07:22] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[06:07:31] *** Joins: bloatable6 (blo-able@2001:41d0:2:5eb5::)
[06:07:44] *** Joins: shareable6 (sha-able@2001:41d0:2:5eb5::)
[06:08:14] *** Joins: nativecallable6 (nat-able@2001:41d0:2:5eb5::)
[06:08:32] *** Joins: committable6 (com-able@2001:41d0:2:5eb5::)
[06:08:37] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[06:08:38] *** Joins: sourceable6 (sou-able@2001:41d0:2:5eb5::)
[06:09:28] *** Joins: squashable6 (squ-able@2001:41d0:2:5eb5::)
[06:09:32] *** Joins: quotable6 (quo-able@2001:41d0:2:5eb5::)
[06:26:15] *** Joins: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com)
[06:26:26] *** Quits: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com) (Remote host closed the connection)
[06:26:50] *** Joins: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com)
[06:27:01] *** Quits: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com) (Remote host closed the connection)
[06:27:20] *** Joins: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com)
[06:27:20] *** Quits: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com) (Remote host closed the connection)
[06:27:34] *** Joins: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com)
[06:29:09] *** Quits: Guest7274748449 (~Guest7274@14-0-230-020.static.pccw-hkt.com) (Remote host closed the connection)
[06:29:36] *** Joins: Guest21 (~Guest21@14-0-230-020.static.pccw-hkt.com)
[06:30:09] *** Quits: Guest21 (~Guest21@14-0-230-020.static.pccw-hkt.com) (Client Quit)
[06:30:31] *** Joins: Guest2356 (~Guest23@14-0-230-020.static.pccw-hkt.com)
[06:48:21] <moon-child> somebody remind me how I make a regex from a string again?
[06:54:17] *** Parts: Guest2356 (~Guest23@14-0-230-020.static.pccw-hkt.com) ()
[06:54:19] <moon-child> hm, looks like <{thestring}>
[07:06:54] *** Joins: bisectable6 (bis-able@2001:41d0:2:5eb5::)
[07:08:02] *** Joins: tellable6 (tel-able@2001:41d0:2:5eb5::)
[07:08:32] *** Joins: benchable6 (ben-able@2001:41d0:2:5eb5::)
[07:12:53] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[07:52:39] *** Joins: berber44 (~berber44@78.107.92.110)
[07:55:17] *** Joins: xinming_ (~xinming@115.219.39.251)
[07:59:09] *** Joins: a3r0_ (~aero@61.100.184.210)
[08:06:12] *** Quits: berber44 (~berber44@78.107.92.110) (Quit: Client closed)
[08:06:50] *** Joins: unicodable6 (uni-able@2001:41d0:2:5eb5::)
[08:07:59] *** Joins: coverable6 (cov-able@2001:41d0:2:5eb5::)
[08:30:15] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.2)
[09:30:15] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:30:15] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[09:35:05] *** Joins: anser (~anser@mm-86-12-120-178.brest.dynamic.pppoe.byfly.by)
[09:45:09] *** Joins: abraxxa (~ahartmai@smtp.hartmaier.priv.at)
[09:54:16] *** Quits: abraxxa (~ahartmai@smtp.hartmaier.priv.at) (Ping timeout: 265 seconds)
[09:55:27] *** Joins: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at)
[10:31:15] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[10:34:11] *** Joins: patrickb (~quassel@55d4f59d.access.ecotel.net)
[10:35:28] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[11:16:16] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[11:17:41] *** Quits: abraxxa (~ahartmai@tsa-tc-flod-1.t-systems.at) (Remote host closed the connection)
[11:23:06] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87)
[12:17:30] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[12:23:24] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[12:24:11] *** Joins: eseyman (~manu@lfbn-idf1-1-1108-68.w82-125.abo.wanadoo.fr)
[12:25:39] <mfiano> Hello all. I'm a newbie exploring the terrain...coming from CL :)
[12:27:55] <eseyman> hello and welcome, mfiano
[12:28:27] <mfiano> Thanks. I was told this language is semantically very similar to CL, so I'll give it a fair chance.
[12:28:51] <mfiano> (I haven't used Perl for about 20 years since I was in college, and I think I forgot everything about it)
[12:29:20] <El_Che> there is no perl knowledge needed to learn raku
[12:31:06] <mfiano> Good. I have exclusively used CL for many years.
[12:31:07] <lizmat> mfiano: feels to me you will be able to write more self-documenting code in Raku :-)
[12:31:09] <tellable6> 2021-10-07T21:04:15Z #raku <[Coke]> lizmat any suggestions for monochromec's request for someone to talk about Raku on a podcast?
[12:31:23] <mfiano> lizmat: Why is that?
[12:31:44] <lizmat> I was looking at the description at https://en.wikipedia.org/wiki/Control_Language
[12:31:57] <mfiano> That is not the CL I was referring to
[12:32:05] <lizmat> aaah... *phew*  :-)
[12:32:07] <mfiano> Common Lisp :)
[12:32:12] <lizmat> ah, I see   ok
[12:32:57] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[12:33:37] <lizmat> mfiano: I assume you read https://www.codesections.com/blog/raku-lisp-impression/ and the discussion on /r/rakulang: https://www.reddit.com/r/rakulang/comments/ptm7qx/rakus_surprisingly_good_lisp_impression/
[12:34:30] <mfiano> Does Rakudo implement all of the specification. I am a little hesitant on learning a language that has a specification maintained by the same party as implementors. ANSI defines the CL standard, in contrast.
[12:35:06] <mfiano> History has been terrible for languages teams that specify the language themselves/only have 1 implementation
[12:36:23] <mfiano> lizmat: Not yet, will do.
[12:37:29] <lizmat> mfiano: in Raku, it is roast that defines the implementation, really
[12:37:50] <discord-raku-bot> <Nemokosch#9980> > History has been terrible for languages teams that specify the language themselves/only have 1 implementation
[12:37:50] <discord-raku-bot> <Nemokosch#9980> there is a difference between the two statements, though
[12:37:54] <lizmat> but at the moment, there is only 1 implementation in active development, so there is a risk indeed...
[12:38:07] <mfiano> I see
[12:39:29] <mfiano> That's ok. I can ignore that for now.
[12:39:41] <mfiano> My other hesitation is more serious.
[12:40:07] <discord-raku-bot> <Nemokosch#9980> Why is that?
[12:41:26] <mfiano> I am mostly a low-level game engine developer, and data visualization programmer. As such I have used the extremely performant Common Lisp for about 20 years. My research leads me to believe Rakudo currently struggles to perform better than Python in some simple programs I've seen. I still think Raku is interesting to learn, but I just don't know what I'd use it for.
[12:42:00] <discord-raku-bot> <Nemokosch#9980> It doesn't seem like Python suffered by not having an external standard
[12:42:43] <mfiano> This is a issue of performance, not standardization. As I mentioned, I am ignoring the previous issue for now.
[12:43:10] <discord-raku-bot> <Nemokosch#9980> I can't see where you mentioned that
[12:43:37] <mfiano> mfiano │ That's ok. I can ignore that for now.
[12:43:38] <lizmat> well, most of the work on the new-disp the past 18 months was about performance
[12:44:03] <mfiano> But  is it suitable for soft real-time applications?
[12:44:07] <discord-raku-bot> <Nemokosch#9980> Well okay, that said nothing about performance 😅 whatever
[12:44:20] <lizmat> and that was only setting up the foundation on which to implement further optimzations
[12:44:42] <lizmat> mfiano: I know people use it in audio applications...
[12:44:50] <mfiano> Is it garbage collected?
[12:44:53] <lizmat> yes
[12:44:54] <mfiano> Good.
[12:45:09] <mfiano> Do you know what type of GC Rakudo uses?
[12:45:14] <mfiano> I hope pauseless
[12:46:12] <lizmat> http://moarvm.org/features.html
[12:46:32] <lizmat> at the moment, GC is still "stop the world" type, afaik
[12:46:48] <lizmat> you might want to ask MoarVM specific questions on the #moarvm channel though
[12:47:24] <lizmat> "When multiple threads are running, collection can run in parallel (meaning that the world is stopped, and multiple threads work on the collection job to get it done more swiftly)."
[12:51:34] <mfiano> I see, so not Pauseless, but parallel, so pretty good.
[12:55:46] <lizmat> yeah...  plans are to make it pauseless as well, but getting it working in parallel without too many bugs, is already quite an achievement  :-)
[12:56:35] <mfiano> Indeed
[12:59:31] <mfiano> Thanks for answering my questions so far. I guess I'll just keep reading the documentation to get a better idea.
[13:00:12] <lizmat> you're welcome...  of course there's no such thing as actually trying stuff
[13:00:33] <lizmat> also, you might want to check out Comma (https://commaide.com) if you're into IDE's  :-)
[13:00:59] <mfiano> I'm not. I prefer vim :)
[13:01:04] <mfiano> But thanks
[13:02:15] <lizmat> mfiano: perhaps a recent discussion could be of interest in that respect: https://www.reddit.com/r/rakulang/comments/psu5n4/what_is_your_preferred_vim_setup_when_writing/
[13:17:37] <mfiano> Are there any notable published books?
[13:21:33] <lizmat> https://raku.org/resources/  has a list
[13:21:56] <lizmat> some of them still refer to Perl 6, but you get the gist  :-)
[13:22:11] <mfiano> That leads me to another question
[13:22:53] <mfiano> > The Perl 6 programming language has a long story. It emerged in 2000 and got its first stable specification in 2015. "Perl 6 at a Glance" is the first book based on the standard 6.c of the language.
[13:24:01] <mfiano> If I were to read a Perl 6 reference rather than a Raku one, how do I know by how much the language differs by?
[13:24:21] <mfiano> It's unclear to me the version history of the specification other than a commit log in the roast repository.
[13:26:08] <mfiano> Similarly, if I were to read a "Raku" book, how will I know how much it differs from the specification version that Rakudo targets?
[13:26:45] <lizmat> mfiano: it is basically s/Perl 6/Raku
[13:27:07] <mfiano> Then what is 6.c?
[13:27:38] <lizmat> any differences you might find between the modern Perl 6 books and Raku, is what you would also see between versions of Raku
[13:27:53] <lizmat> 6.c is the language version released in 2015
[13:28:14] <lizmat> 6.d is the language version released in 2018
[13:28:45] <mfiano> I see. I'm not used to this and I can see it being a major problem for compatible and future-proof code. In CL, there is only one version of the standard that will never change because it is defined by an international standards organization and the language definition is powerful enough for users to extend any aspect.
[13:28:47] <lizmat> late this year / early next year 6.e will be released
[13:29:35] <lizmat> it is the intent that any Raku implementation should support up to 3 language versions back transparently
[13:30:29] <mfiano> I see. It will just take me some getting used to, because in CL, there is code from the 1960's that will still run.
[13:30:47] <lizmat> when you say "use v6.c" in a compilation unit, you are guaranteed the semantics of that language version in that compilation unit
[13:31:16] <lizmat> likewise, if you load a module with a version specification, you are guaranteed *that* version of the module
[13:31:32] <lizmat> use Foo::Bar:ver<0.42>
[13:32:57] *** Quits: linkable6 (lin-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:32:57] *** Quits: evalable6 (eva-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[13:33:35] <mfiano> Ok
[13:33:57] <lizmat> multiple versions of the same module can be installed at the same time  :-)
[13:34:09] <lizmat> and be used inside the same program, as imports are lexical
[13:34:40] <mfiano> I will admit, the feature (from Lisp) that attracts me the most is multiple dispatch
[13:34:42] *** Joins: linkable6 (lin-able@2001:41d0:2:5eb5::)
[13:35:08] *** Joins: evalable6 (eva-able@2001:41d0:2:5eb5::)
[13:35:22] <lizmat> m: sub ok(\a) { say "foo" }; { use Test; ok 1 }; ok 1
[13:35:23] <camelia> rakudo-moar 3dc4aca28: OUTPUT: «ok 1 - ␤foo␤»
[13:35:50] <lizmat> mfiano: yeah, multiple dispatch is a very nice and useful feature  :-)
[13:36:19] <mfiano> Does Raku have a meta object protocol?
[13:36:29] <mfiano> Doubtful, but worth asking :)
[13:50:40] <mfiano> It seems there is no OpenGL bindings module? That shoots down about 90% of the things I'd use it for.
[13:53:40] <lizmat> mfiano: yes, Raku most definitely has a MOP
[13:53:42] *** Joins: whatnext (~whatnext@212.250.5.220)
[13:54:01] <lizmat> mfiano: https://docs.raku.org/language/mop
[13:54:48] <whatnext> hello all :)  I have a question: what is the best way to alias long package names? I am struggling to find any reference to this
[13:56:05] <moritz_> a super simple way is constant ShortName = A::Much::Longer::Name;
[13:57:03] <whatnext> ah ok - that looks good!
[13:57:06] <moritz_> m: constant I = Int; sub f(I) { }; f 'foo';
[13:57:06] <camelia> rakudo-moar 3dc4aca28: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Calling f(Str) will never work with declared signature (Int)␤at <tmp>:1␤------> 3constant I = Int; sub f(I) { }; 7⏏5f 'foo';␤»
[13:57:30] <moritz_> you can see in this example that you can use the aliased name this way in type constraints, and the compile-time checker picks up on it
[13:57:39] <moritz_> (because constants are evaluated at compile time)
[13:58:28] <whatnext> yes that looks like the answer - thanks!
[13:59:17] <mfiano> I see. No GPU driver API support yet is going to be a deal-breaker. I'll check back some other time.
[13:59:27] <mfiano> https://github.com/Raku/raku-most-wanted/blob/master/most-wanted/bindings.md#user-interfaces
[13:59:47] <mfiano> Lists both OpenGL and Vulkan as wanted and not yet even WIP
[14:00:02] <mfiano> I understand though. It took years for us to do so in Lisp
[14:10:26] *** Quits: whatnext (~whatnext@212.250.5.220) (Ping timeout: 265 seconds)
[14:12:09] <lizmat> mfiano 
[14:12:28] <lizmat> too bad... please do check in again from time to time
[14:13:37] <patrickb> Raku can interface directly with C libraries / functions. So especially with something like the OpenGL API a dedicated wrapper might be something you don't actually need in practice.
[14:16:16] <discord-raku-bot> <Nemokosch#9980> Isn't using Lisp for OpenGL pretty uncommon per se?
[14:22:19] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87)
[14:23:09] *** Joins: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz)
[15:00:06] <timo> mfiano: very possibly out of date, that repo, tbh
[15:01:13] <timo> https://github.com/YellowApple/p6-GLFW hasn't been touched in a while, though
[15:01:41] <timo> but SDL2::Raw already handles creating opengl context for you and you can bind all the opengl functions by hand as you encounter the ones you need haha
[15:01:43] *** Joins: frost (~frost@59.71.244.36)
[15:02:19] <timo> https://github.com/bartschuller/perl6-OpenGL is also a thing
[15:02:35] <timo> but that is also untouched for a long while
[15:05:59] <timo> fortunately opengl uses basically no structs? vulkan on the other hand ... oof
[15:32:46] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[15:33:04] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[15:46:39] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[16:29:59] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[16:50:09] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Write error: Connection reset by peer)
[16:50:10] *** Quits: CIAvash (~ciavash@2001:470:69fc:105::264) (Read error: Connection reset by peer)
[16:50:10] *** Quits: demostanis[m] (~demostani@2001:470:69fc:105::2c2) (Write error: Connection reset by peer)
[16:50:12] *** Quits: juanfra (~juanfra@user/juanfra) (Write error: Connection reset by peer)
[16:50:12] *** Quits: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1) (Read error: Connection reset by peer)
[16:52:42] *** Joins: juanfra (~juanfra@user/juanfra)
[17:12:16] *** Joins: AlexDaniel (~alexdanie@2001:470:69fc:105::15e1)
[17:12:16] *** Joins: CIAvash (~ciavash@2001:470:69fc:105::264)
[17:12:16] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[17:12:16] *** Joins: demostanis[m] (~demostani@2001:470:69fc:105::2c2)
[17:34:50] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[17:50:35] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:55:35] <moritz_> structs aren't a problem, if the C API treats them as opaque (gives you getters/setters/constructors/destructors for them)
[17:59:30] <timo> vulkan doesn't do that, to my knowledge
[18:00:23] *** Joins: RaycatWhoDat (~RaycatWho@2601:241:8f80:5250::c52d)
[18:01:19] <RaycatWhoDat> Running into a bit of an issue implementing the `[` and `]` operators in BF: https://github.com/RayMPerry/kitchen-sink/blob/master/raku/bf-interpreter.raku#L25
[18:02:24] <RaycatWhoDat> How can I backtrack or change the currently matched target? 
[18:02:37] <RaycatWhoDat> Or am I thinking about this wrong?
[18:02:47] <timo> you may want to just store the positions of all brackets and match the pairs up later
[18:03:06] <timo> or you can have a "match bf code between matching brackets" style
[18:03:25] <timo> in which case bf programs with unmatched brackets will fail to parse if you don't put in an error handling case
[18:03:43] <timo> oh, you're trying to have the interpreter in the actions methods
[18:04:03] <timo> i guess in that case the second one is your best bet
[18:04:22] <timo> but causing the action methods for the inner code to re-run sounds tricky
[18:04:53] <tonyo_> RaycatWhoDat: are you trying to find matched `[` `]` in a regex?
[18:07:44] <RaycatWhoDat> tonyo_: Kinda. I'm trying to loop inside of the actions. But more generally, I'm just trying to figure out if you can ignore certain matches or move the pointer back to a previous `[`
[18:07:57] <RaycatWhoDat> previous Match *
[18:08:27] *** Quits: anser (~anser@mm-86-12-120-178.brest.dynamic.pppoe.byfly.by) (Quit: Konversation terminated!)
[18:08:28] <RaycatWhoDat> However, I can also accept that grammars aren't really structured for that kind of movement
[18:08:38] <RaycatWhoDat> It would be nice tho
[18:09:15] <tonyo_> it might be easier instead of trying interpret it directly to turn it into a raku code block, like an ast
[18:09:40] <tonyo_> [ -> while <whatever> {,  ] -> }
[18:10:49] <RaycatWhoDat> Got it. I'll try all three.
[18:31:37] <tonyo_> the grammar/action would be able to produce an AST for that and then the interpreter just runs the ast (then you can cache it, show the execution plan, etc)
[18:34:06] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 260 seconds)
[18:40:07] *** Joins: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net)
[18:50:17] *** Quits: ggoebel (~ggoebel@107-134-157-130.lightspeed.tukrga.sbcglobal.net) (Ping timeout: 265 seconds)
[19:33:29] *** Quits: silug (~silug@068-188-018-154.biz.spectrum.com) (Ping timeout: 252 seconds)
[19:33:33] *** Joins: silug1 (~silug@068-188-018-154.biz.spectrum.com)
[19:47:36] <mykhal> Hi, i'm looking fort short rakudiom (Raku idiom) for Python-like stripping, e.g. "abarbaraaaa".strip("a") -> "barbar", without regexp. Could't trim(Str, Str) work like that? Aren't they trimming always something in reality, instead of whitespace-like nothing?
[19:54:55] <moritz_> why without regex?
[19:56:48] <mykhal> it would be 2 OR-ed regexp, too tedious
[19:57:05] <mykhal> .. s/exp/exps/
[19:58:36] <Altreus> wat :)
[19:59:05] <moritz_> $s.subst(/^a+/, '').subst(/a+$/, '')
[20:06:05] <codesections> mykhal: If you _really_ want to avoid a Regex, there are plenty of ways to do so.  Here's the first one that came to mind, which is a bit verbose but reads well enough:
[20:06:18] <codesections> m: with "abarbaraaaa" { say .substr: .comb.first(* ne 'a'):k, .comb.first(:end, * ne 'a'):k }
[20:06:18] <camelia> rakudo-moar ff6951f59: OUTPUT: «barbar␤»
[20:07:41] <codesections> That said, if you're looking for an _idiomatic_ Raku solution, then yeah, a regex (or two in a chain as moritz_ showed) is the way to go.
[20:08:12] <Altreus> that definitely counts as any definition of "tedious" I can come up with :)
[20:10:22] *** Quits: patrickb (~quassel@55d4f59d.access.ecotel.net) (Quit: Quit.)
[20:10:37] <mykhal> pity, however in bash it's not trivial as well (unlike for one-ended solution)
[20:10:58] <codesections> That's fair :)  I'd probably do it with a regex myself, though not one with any ors.  I'd use S/^a* (.*?) a*$/$0/
[20:11:14] <codesections> m: say with "abarbaraaaa" { S/^a* (.*?) a*$/$0/}  
[20:11:14] <camelia> rakudo-moar ff6951f59: OUTPUT: «5===SORRY!5=== Error while compiling <tmp>␤Unsupported use of bare "say".  In Raku please use: .say if you meant␤to call it as a method on $_, or use an explicit invocant or argument,␤or use &say to refer to the function as a noun.␤at <tmp…»
[20:11:31] <codesections> m:  with "abarbaraaaa" { say S/^a* (.*?) a*$/$0/}  
[20:11:32] <camelia> rakudo-moar ff6951f59: OUTPUT: «barbar␤»
[20:12:38] <codesections> m: say "abarbaraaaa".subst: /^a* (.*?) a*$/, $0  # if you prefer the method call form
[20:12:38] <camelia> rakudo-moar ff6951f59: OUTPUT: «Use of Nil in string context␤␤  in block <unit> at <tmp> line 1␤»
[20:18:05] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87)
[20:19:51] <mykhal> stril not fully compliant with DRY principle :)
[20:21:33] <mykhal> wouldn't you love feature req. for trim solution mentones? fortunately, currently it raises error, instead of doing something (else)
[20:21:35] <Altreus> Perfect is the enemy of good
[20:21:36] <mykhal> m: "abarbaraaa".trim("a")
[20:21:36] <camelia> rakudo-moar ff6951f59: OUTPUT: «Too many positionals passed; expected 1 argument but got 2␤  in block <unit> at <tmp> line 1␤␤»
[20:23:05] <mykhal>  mykhal: ???? s/mentones/mentioned/
[20:24:18] <mykhal> or m: "abarbaraaa".trim(/a+/)
[20:27:09] <Altreus> you could also use MONKEY-TYPING; and augment Str :)
[20:34:22] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:36:33] <mykhal> right, but that would be mre tedous than using regexp ;)
[20:37:03] <mykhal> today 'm lossy
[20:38:38] <Altreus> but DRYer
[20:38:44] <Altreus> you can't have both, apparently
[20:39:07] <mykhal> in curr. ver.
[20:59:14] *** Joins: chloekek (~chloekek@84-80-232-61.fixed.kpn.net)
[21:29:17] *** Quits: sena_kun (~sena_kun_@static-84-42-198-52.net.upcbroadband.cz) (Quit: Leaving)
[21:32:54] *** Quits: reportable6 (rep-able@2001:41d0:2:5eb5::) (Remote host closed the connection)
[21:38:19] *** Joins: berber44 (~berber44@78.107.92.137)
[21:45:22] *** Quits: berber44 (~berber44@78.107.92.137) (Quit: Client closed)
[22:10:09] *** Quits: gordonfish (~gordonfis@user/gordonfish) ()
[22:25:25] *** Joins: gordonfish (~gordonfis@user/gordonfish)
[22:29:14] <SmokeMachine> have EXPORT-POST-CHECK-PASS already changed name? I'm trying to use it on RakuAST branch with RAKUDO_RAKUAST env var set to 1 with no luck
[22:31:27] *** Quits: nebuchadnezzar (~dad@82-65-17-178.subs.proxad.net) (Read error: Connection reset by peer)
[22:34:18] *** Joins: reportable6 (rep-able@2001:41d0:2:5eb5::)
[22:47:59] <Geth> ¦ doc: a354a2dfa1 | (Marcel Timmerman)++ (committed using GitHub Web editor) | doc/Language/concurrency.pod6
[22:47:59] <Geth> ¦ doc: Update concurrency.pod6
[22:47:59] <Geth> ¦ doc: review: https://github.com/Raku/doc/commit/a354a2dfa1
[22:48:02] <linkable6> Link: https://docs.raku.org/language/concurrency
[22:49:40] *** Quits: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se) (Read error: Connection reset by peer)
[22:49:55] *** Joins: dogbert17 (~dogbert@c83-253-59-194.bredband.tele2.se)
[23:01:10] *** Joins: clarjon_1 (~clarjon1@user/clarjon1)
[23:02:19] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Ping timeout: 252 seconds)
[23:04:31] *** Quits: xkr47 (xkr47@91-150-59-18.customer.karistelefon.fi) (Ping timeout: 252 seconds)
[23:05:11] *** Joins: xkr47 (~xkr47@91-150-59-18.customer.karistelefon.fi)
[23:09:28] *** Quits: xkr47 (~xkr47@91-150-59-18.customer.karistelefon.fi) (Ping timeout: 252 seconds)
[23:10:09] *** Joins: xkr47 (xkr47@91-150-59-18.customer.karistelefon.fi)
[23:47:28] *** clarjon_1 is now known as clarjon1
