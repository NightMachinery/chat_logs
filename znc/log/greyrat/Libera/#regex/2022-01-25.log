[00:03:18] *** Joins: ecalogero (~ecalogero@host86-142-145-177.range86-142.btcentralplus.com)
[00:04:19] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[00:29:37] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Ping timeout: 240 seconds)
[00:37:24] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:03:19] *** Quits: src_ (~src@user/src) (Quit: Leaving)
[01:03:28] *** Joins: src (~src@user/src)
[01:06:38] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[01:22:14] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[01:29:00] *** Joins: re101-quoll-93 (~re101-quo@047-233-046-055.res.spectrum.com)
[01:30:10] <re101-quoll-93> How do I capture the rest, of the text between the sections: https://regex101.com/r/WvGyqu/1
[01:32:12] *** Quits: egrain (felix@31.204.155.215) (Quit: egrain)
[01:32:55] *** Joins: lavaball (felix@31.204.155.215)
[01:35:02] *** Joins: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com)
[01:35:18] *** Joins: vlm (~vlm@user/vlm)
[01:35:58] <OnlineCop> re101-quoll-93: How do you know when a section has finished?
[01:36:54] <OnlineCop> https://regex101.com/r/WvGyqu/2
[01:36:54] <re101-quoll-93> It is everything between the: ^\w: patterns
[01:37:15] <re101-quoll-93> That works very well
[01:37:19] <re101-quoll-93> Thank you
[01:37:27] <OnlineCop> If the file contains CRLF, you may need to change `\n*` to [\r\n]*
[01:45:11] *** Quits: AMG (ghebo@2605:6400:c847:1449::9441) (Changing host)
[01:45:11] *** Joins: AMG (ghebo@user/amg)
[01:58:23] *** Quits: lavaball (felix@31.204.155.215) (Quit: lavaball)
[02:12:38] *** Quits: timm (~timm@user/timm) (Ping timeout: 250 seconds)
[02:13:26] *** Joins: pluri (~pluri@user/pluri)
[02:17:01] *** Quits: arash_ (uid510918@id-510918.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:44:31] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:44:31] *** Quits: re101-quoll-93 (~re101-quo@047-233-046-055.res.spectrum.com) (Quit: Client closed)
[03:00:55] *** Quits: karakedi (~eAC53C340@user/karakedi) (Ping timeout: 256 seconds)
[03:03:17] *** Quits: palasso (~palasso@user/palasso) (Ping timeout: 268 seconds)
[03:26:07] *** Joins: d1cor (~diego@179.63.242.120)
[03:50:17] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 240 seconds)
[03:52:50] *** Joins: loganlee (~Thunderbi@user/loganlee)
[04:11:14] *** Quits: ecalogero (~ecalogero@host86-142-145-177.range86-142.btcentralplus.com) (Quit: Connection closed)
[04:11:43] *** Quits: src (~src@user/src) (Quit: Leaving)
[04:38:05] *** Joins: src (~src@user/src)
[05:05:55] <Albright> https://regex101.com/r/1M2PV3/1 - How can I match each instance of the (\d+) part? I feel like I'm missing something obvious.
[05:07:17] <mysticspiral[m]> quantified capturing groups will only match the last instance
[05:08:21] <Albright> Hmm. I feel like I've done this sort of thing before though.
[05:08:21] <mysticspiral[m]> so you'd need to do something like this
[05:08:23] <mysticspiral[m]> https://regex101.com/r/1M2PV3/2
[05:12:12] <Albright> mysticspiral[m]: Excellent, thanks.
[05:13:57] <mysticspiral[m]> seems like .net and perl6 would support it
[05:17:39] <mysticspiral[m]> version without using capturing groups: https://regex101.com/r/1M2PV3/3
[05:18:08] <mysticspiral[m]> \K works only in pcre, though
[05:18:35] <Me-me> Albright: .NET is the only kind of regex that allows for a capture group to return more than one extracted string.
[05:18:42] <Albright> Yeah, I'm using JS for this, sadly… looks like it returns some iterator nonsense instead of just giving me a damn array
[05:20:22] <Me-me> Javascript's pretty barebones as far as regex goes, yeah.
[05:20:43] <mysticspiral[m]> Me-me: perl6/raku also supports it
[05:21:25] <mysticspiral[m]> > An unquantified capture produces a Match object. When a capture is quantified (except with the ? quantifier) the capture becomes a list of Match objects instead.
[05:21:27] <mysticspiral[m]> https://docs.raku.org/language/regexes#Grouping_and_capturing
[05:27:35] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-37-70-24-250-33.dsl.bell.ca) (Ping timeout: 268 seconds)
[05:30:22] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:32:17] *** Quits: maetthew (~maetthew@user/maetthew) (Quit: ZNC 1.8.2 - https://znc.in)
[05:32:40] *** Joins: vlm (~vlm@user/vlm)
[05:34:02] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca)
[05:34:53] *** Joins: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se)
[05:34:53] *** Quits: maetthew (~maetthew@c188-150-159-232.bredband.tele2.se) (Changing host)
[05:34:53] *** Joins: maetthew (~maetthew@user/maetthew)
[05:37:20] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca)
[05:38:28] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-139.dsl.bell.ca) (Ping timeout: 250 seconds)
[05:42:03] *** Quits: r00tb0y (r00tb0y@p54a3364f.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[05:42:13] *** Joins: r00tb0y (r00tb0y@p4fed4751.dip0.t-ipconnect.de)
[05:42:34] *** Joins: cerealkiller (~cerealkil@user/tx)
[05:43:42] *** Joins: Guest8670 (~Guest86@139-179-157-94.ftth.glasoperator.nl)
[05:43:43] *** Quits: Guest8670 (~Guest86@139-179-157-94.ftth.glasoperator.nl) (Write error: Broken pipe)
[05:43:59] *** Joins: Guest8615 (~Guest86@139-179-157-94.ftth.glasoperator.nl)
[05:45:04] <Guest8615> Hi, I have a question on regex
[05:45:23] <Guest8615> https://paste.debian.net/1228293
[05:46:25] <cerealkiller> you may have to wait a while, but someone will assist you when they see the message
[05:47:15] *** Joins: re101-bird-9 (~re101-bir@2408:844c:4f00:6d9:1d88:1f10:5825:2f02)
[05:47:48] <mysticspiral[m]> Guest8615: you provided no pattern
[05:53:50] <Guest8615> I have to extract the grades from the text
[05:54:03] <Guest8615> using the last 2 lines of code
[05:54:20] <Guest8615> and apologies for the slow reply was gone for a bit
[05:58:42] <re101-bird-9> https://regex101.com/quiz/10
[05:58:42] <re101-bird-9> This is my regex for this question: /(.)(?=#)/; but it fails and it says 'You are supposed to catch all occurrences!'. but why and how?
[06:01:25] *** Quits: re101-bird-9 (~re101-bir@2408:844c:4f00:6d9:1d88:1f10:5825:2f02) (Quit: Client closed)
[06:01:36] *** Joins: re101-bird-9 (~re101-bir@2408:844c:4f00:6d9:1d88:1f10:5825:2f02)
[06:02:17] *** Quits: bin101 (~bin101@user/bin101) (Ping timeout: 240 seconds)
[06:02:50] <mysticspiral[m]> Guest8615: will it always be in the form digit dot digit?
[06:03:04] <mysticspiral[m]> then line end?
[06:04:18] <mysticspiral[m]> then use this regex = re.compile(r'\d.\d$', flags=re.MULTILINE)
[06:05:46] <mysticspiral[m]> re101-bird-9: the quiz is login-only. maybe paste the the problem into the testpage?
[06:06:12] *** Joins: bin101 (~bin101@user/bin101)
[06:07:28] <re101-bird-9> For every occurence of the char #, match the previous character and save it in a group (backreference). Example: for the text "a#bc# -#", set backreferences with a, c and -. You are not allowed to consume the hash character.
[06:09:38] <mysticspiral[m]> forgot the g flag?
[06:09:46] <Guest8615> mysticspiral[m] yes, and managed to solve it
[06:09:51] <Guest8615> thank you!!
[06:11:07] <re101-bird-9> +mysticspiral[m] yes and managed to solve it, thank you too!
[06:11:15] <re101-bird-9> but why
[06:12:17] <mysticspiral[m]> without g flag it will only return first match
[06:12:25] <mysticspiral[m]> g = global
[06:12:28] <mysticspiral[m]> returns all matches
[06:14:21] <re101-bird-9> I forgot it, thank you
[06:29:30] *** Joins: d1cor (~diego@179.63.242.120)
[07:10:30] *** Joins: adeliktas4 (~adeliktas@i59F4D5EA.versanet.de)
[07:12:09] *** Quits: adeliktas (~adeliktas@i59F5FF62.versanet.de) (Ping timeout: 256 seconds)
[07:12:09] *** adeliktas4 is now known as adeliktas
[07:21:36] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 250 seconds)
[07:36:46] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net) (Ping timeout: 250 seconds)
[07:37:57] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[07:40:11] *** Joins: pluri (~pluri@user/pluri)
[07:43:42] *** Joins: pluri_ (~pluri@user/pluri)
[07:45:01] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 256 seconds)
[07:47:51] *** Joins: pluri (~pluri@user/pluri)
[07:47:57] *** Quits: pluri_ (~pluri@user/pluri) (Ping timeout: 240 seconds)
[07:50:00] *** Quits: re101-bird-9 (~re101-bir@2408:844c:4f00:6d9:1d88:1f10:5825:2f02) (Quit: Client closed)
[07:52:46] *** loganlee is now known as zx2A^zx3F
[07:54:05] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 256 seconds)
[07:55:14] *** zx2A^zx3F is now known as loganlee
[07:55:46] *** Joins: pluri (~pluri@user/pluri)
[08:03:42] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net)
[08:14:29] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 256 seconds)
[08:16:12] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net) (Ping timeout: 250 seconds)
[08:16:24] *** Joins: pluri (~pluri@user/pluri)
[08:21:42] *** Joins: pluri_ (~pluri@user/pluri)
[08:22:42] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 250 seconds)
[08:26:01] *** Joins: pluri (~pluri@user/pluri)
[08:26:10] *** Quits: pluri_ (~pluri@user/pluri) (Ping timeout: 250 seconds)
[08:28:18] *** Quits: Guest8615 (~Guest86@139-179-157-94.ftth.glasoperator.nl) (Quit: Client closed)
[08:29:22] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net)
[08:31:07] *** Quits: MagentaRV (~ShoeMaker@cpe-172-101-11-228.maine.res.rr.com) (Quit: Tell ShoeMaker I miss him!)
[08:32:17] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[08:32:44] *** Joins: pluri (~pluri@user/pluri)
[08:33:37] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net) (Ping timeout: 240 seconds)
[08:36:03] *** Joins: pluri__ (~pluri@user/pluri)
[08:37:31] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 268 seconds)
[08:40:33] *** Quits: pluri__ (~pluri@user/pluri) (Ping timeout: 256 seconds)
[08:40:46] *** Joins: pluri (~pluri@user/pluri)
[08:44:52] *** Joins: pluri_ (~pluri@user/pluri)
[08:44:57] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[08:48:45] *** Joins: pluri (~pluri@user/pluri)
[08:48:57] *** Quits: pluri_ (~pluri@user/pluri) (Ping timeout: 240 seconds)
[08:52:57] *** Quits: pluri (~pluri@user/pluri) (Ping timeout: 240 seconds)
[08:56:10] *** Joins: pluri (~pluri@user/pluri)
[08:57:31] *** Quits: src (~src@user/src) (Quit: Leaving)
[09:08:55] *** Joins: I-M (~id@78.183.106.195)
[09:09:20] *** Joins: karakedi (~eAC53C340@user/karakedi)
[09:13:25] *** Quits: I-M (~id@78.183.106.195) (Read error: Connection reset by peer)
[09:16:22] *** Quits: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com) (Ping timeout: 268 seconds)
[09:32:20] *** Quits: pluri (~pluri@user/pluri) (Quit: Textual IRC Client: www.textualapp.com)
[09:34:56] *** Joins: pluri (~pluri@user/pluri)
[09:57:40] *** Joins: re101-turkey-1 (~re101-tur@relay.lums.edu.pk)
[09:58:06] *** Quits: re101-turkey-1 (~re101-tur@relay.lums.edu.pk) (Client Quit)
[10:02:12] *** Quits: pluri (~pluri@user/pluri) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:12:37] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[10:30:19] *** Joins: monoxane9 (~monoxane@user/monoxane)
[10:30:22] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 268 seconds)
[10:30:23] *** monoxane9 is now known as monoxane
[10:59:21] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net)
[11:07:32] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net) (Ping timeout: 240 seconds)
[11:22:28] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[11:22:32] *** Joins: lavaball (felix@31.204.155.215)
[11:23:58] *** Joins: mojtaba (~mojtaba@142.59.165.199)
[11:25:30] *** Joins: palasso (~palasso@user/palasso)
[11:25:34] <mojtaba> Hello, does anybody know how to reset the position? for example I want to find 3 'aa' in 'aaadaa'. first two, then second and third, and then last two as.
[11:33:50] <digitok> what do you wish to do with them
[11:34:19] *** Quits: ttree (~ttree0@c-73-97-116-42.hsd1.wa.comcast.net) (Ping timeout: 256 seconds)
[11:34:32] *** Quits: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net) (Quit: ZNC 1.8.2 - https://znc.in)
[11:36:00] <mojtaba> digitok: I just want to find the pattern.
[11:36:18] <mojtaba> What is the regex which does not consume the group?
[11:36:27] <digitok> a lookahead
[11:36:47] <digitok> but, do you want to find the position? or match and return the characters?
[11:36:57] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net)
[11:38:15] <mojtaba> digitok: basically I cannot use lookahead, because pattern and sentence are taken from the user.
[11:38:32] <mojtaba> I want indices of the beginning and end.
[11:38:57] <digitok> lookahead can return start index
[11:39:06] <digitok> end index = len(str)
[11:39:47] <mojtaba> yes, but I am not sure how to use the lookahead when the substring and string are not pre-given.
[11:39:52] <digitok> there is no way to match the text without consuming it and advancing the internal pointer without using a zero-width lookaround assertion
[11:40:42] <digitok> why is it any different to using a regex without the lookahead?
[11:40:44] <mojtaba> digitok: hmm, so it is not possible to advance like one character at a time?!
[11:40:57] <digitok> of course
[11:41:09] <digitok> but if you consume characters, the next match starts at the end of the previous match
[11:41:42] <mojtaba> I see.
[11:41:53] <digitok> https://regex101.com/r/xiy6SC/1
[11:41:54] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-c115-aa75-233-6185.fixed6.kpn.net) (Ping timeout: 268 seconds)
[11:41:54] <mojtaba> so there is no way to start from the middle of the previous one
[11:43:08] <digitok> not without lookahead, no :)
[11:43:26] <mojtaba> Thanks digitok :)
[11:43:29] <digitok> but, it seems straightforward unless i am missing something
[11:43:38] <mojtaba> digitok: let me try it.
[11:43:51] <mojtaba> 8-)
[11:43:56] <digitok> the capture group is not required if you do not need the matched text to be returned
[11:44:13] <digitok> since you already know what it is
[11:44:30] <digitok> https://regex101.com/r/xiy6SC/2
[11:44:37] <digitok> so this would just return the positions
[11:44:46] <digitok> start positions*
[11:45:51] <mojtaba> sure. Thanks digitok
[11:46:34] <digitok> np
[11:47:04] <mojtaba> digitok: Can I ask a pythonic regexi question here? :)
[11:47:23] *** Parts: mojtaba (~mojtaba@142.59.165.199) ()
[11:47:36] <digitok> i think so
[11:47:43] *** Joins: mojtaba (~mojtaba@142.59.165.199)
[11:48:32] <mojtaba> so this just return (0,0) as the start and end indices in python 3. re.search(r'(?=(aa))', 'aaadaa')
[11:48:35] <mojtaba> digitok: 
[11:48:42] <mojtaba> Any idea?
[11:50:05] <digitok> i believe re.search only returns a single result
[11:50:44] *** Joins: timm (~timm@user/timm)
[11:51:15] <mojtaba> digitok: my bad. Thanks.
[11:52:21] <digitok> yw :)
[11:53:15] <digitok> i am not sure if you can get match offsets from re.findall, you may need a loop with re.finditer
[11:53:52] <mojtaba> digitok: Yes I am trying finditer now
[11:54:51] <mojtaba> but it is weird, for the substring 'aa' and string 'aaadaa', finditer gives incorrect indices.
[11:55:09] <mojtaba> (start, end) -> [(0, 0), (1, 1), (4, 4)]
[11:55:21] <mojtaba> but it should give -> (0, 1)   (1, 2) (4, 5) 
[11:56:15] <digitok> <digitok> lookahead can return start index <digitok> end index = len(str)
[11:56:45] <digitok> that should be: end index = start index + len(str)
[11:57:02] <digitok> str being the search string, not the input string
[11:57:29] <mojtaba> digitok: that also does not give correct answer
[11:57:55] <mojtaba> with that logic it becomes (0,2) (1,3) (4,6)
[11:58:04] <digitok> yep
[11:58:08] <mojtaba> hmm
[11:58:12] <digitok> that is what regex would give you
[11:58:23] <digitok> you can -1 from the end index if you prefer that
[11:58:34] <mojtaba> awesome
[11:58:49] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[12:00:11] <digitok> perhaps adding 1 to the start index makes more sense, but i am not sure what your goal is
[12:00:37] <digitok> i suppose 0,1 can be character 0, character 1
[12:01:12] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:01:39] <digitok> the way regex returns them is 0,2 = start at position 0 (before character 1), end at position 2 (after character 2, before character 3)
[12:02:44] <digitok> either way, you got it working. hehe
[12:02:53] <mojtaba> Got it. Thumbs up digitok (I am using pidgin as my chat client, and for some reason it does not have enough emojis!)
[12:04:00] <digitok> that is ok ;)
[12:51:18] *** Joins: zetaE (~alpmons@139.47.114.154)
[13:04:48] *** Quits: ToAruShiroiNeko (~eva@user/toarushiroineko) (Ping timeout: 250 seconds)
[13:05:30] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[13:07:54] *** Joins: ToAruShiroiNeko (~eva@user/toarushiroineko)
[13:12:17] *** Quits: adeliktas (~adeliktas@i59F4D5EA.versanet.de) (Ping timeout: 240 seconds)
[13:18:13] *** Joins: pluri (~pluri@user/pluri)
[13:18:59] *** Joins: unluckyshrubbery (~unluckysh@45-19-33-188.lightspeed.livnmi.sbcglobal.net)
[13:20:37] *** Parts: mojtaba (~mojtaba@142.59.165.199) ()
[13:25:59] *** Quits: loganlee (~Thunderbi@user/loganlee) (Quit: loganlee)
[13:28:51] *** Joins: ecalogero (~ecalogero@host86-142-145-177.range86-142.btcentralplus.com)
[13:29:09] *** Quits: ecalogero (~ecalogero@host86-142-145-177.range86-142.btcentralplus.com) (Client Quit)
[13:44:05] *** Quits: stevenm_ (~stevenm@stevenm.keele.netcentral.co.uk) (Ping timeout: 256 seconds)
[13:45:08] *** Joins: stevenm (~stevenm@stevenm.keele.netcentral.co.uk)
[14:06:45] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[14:34:12] *** Joins: re101-boykin-51 (~re101-boy@183.87.161.198)
[14:36:27] <re101-boykin-51> <li[^>]*>\K.*(?=</li>)
[14:36:44] <re101-boykin-51> sample string - <li >Ashu</li><li class="dd">gullu</li>
[14:37:33] <re101-boykin-51> I want output as Ashu & gullu after applying regex in PHP.
[14:37:44] <re101-boykin-51> it this correct or not?
[14:38:53] *** re101-boykin-51 is now known as aakanksha
[14:45:12] *** Joins: Lope (~lope@user/lope)
[14:45:47] <Lope> I'm trying to search all lines in my project in Atom.IO regex (javascript regex) for all calls to foo that lack the parameter bar
[14:45:59] <Lope> So I've got this foo\({.+(?!bar)
[14:46:21] <Lope> but for whateevr reason it matches foo({ a:1, bar:2 });
[14:46:39] <Lope> I want it to only match stuff like foo({ a:1, b:2 });
[14:47:34] <Lope> I also tried this: ^.+foo\({.+(?!bar).+$
[14:52:12] *** Joins: adeliktas (~adeliktas@i59F4D5EA.versanet.de)
[15:13:11] <Lope> I ended up just using a recursive grep piped to another grep
[15:29:17] *** Quits: Lope (~lope@user/lope) (Ping timeout: 240 seconds)
[15:30:49] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[15:35:54] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-fdc3-f0e9-d4e9-45ad.fixed6.kpn.net)
[15:41:50] *** Joins: re101-badger-84 (~re101-bad@157.45.12.167)
[15:43:03] <re101-badger-84> https://regex101.com/r/gZdSox/1
[15:44:24] *** Quits: re101-badger-84 (~re101-bad@157.45.12.167) (Client Quit)
[15:46:15] *** Quits: aakanksha (~re101-boy@183.87.161.198) (Quit: Client closed)
[15:47:13] *** Joins: Lope (~lope@user/lope)
[15:52:02] <digitok> 07Lope, fwiw, would nested {} be something that could occur?
[15:52:24] <digitok> if not: foo\({(?![^{}]*bar)
[15:56:28] *** Joins: dlvdls2 (~dlvdls2@103.196.139.130)
[15:56:39] <dlvdls2> hii
[15:56:58] *** Quits: dlvdls2 (~dlvdls2@103.196.139.130) (Client Quit)
[15:57:42] <zetaE> is perl the best option for nested regexing?
[16:02:46] <digitok> as in a regex that matches nested syntax?
[16:02:51] <digitok> if so, perl/pcre, yes
[16:03:43] <zetaE> got it
[16:14:11] *** Quits: zetaE (~alpmons@139.47.114.154) (Remote host closed the connection)
[16:28:26] *** Joins: d1cor (~diego@179.63.242.120)
[16:46:30] *** Quits: DK3 (~DK3@rs000042.fastrootserver.de) (Changing host)
[16:46:30] *** Joins: DK3 (~DK3@user/DK3)
[17:13:54] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[17:37:34] *** Joins: re101-owl-1 (~re101-owl@49.206.13.176)
[17:39:28] <re101-owl-1> https://regex101.com/r/KzLscO/1 , Hi my following regex is not supporting single digits , 1 ,2 ,3....9 ,  im using this in JS
[17:43:33] <mysticspiral[m]> re101-owl-1: its easier if you provide a list a lines that should and shouldnt match
[17:44:09] <mysticspiral[m]> s@a lines@of lines@
[17:44:10] <rebot> 14mysticspiral[m] meant: re101-owl-1: its easier if you provide a list 07of lines14 that should and shouldnt match
[17:47:19] <mysticspiral[m]> consider that \d always means [0-9]
[17:48:01] <mysticspiral[m]> if you want any other range, then \d has no business there.
[17:49:14] *** Joins: re101-koala-58 (~re101-koa@43.230.180.235)
[17:50:05] <mysticspiral[m]> if you want to match a number between including 0.5 and excluding 1, then use 0.5\d*
[17:50:39] <mysticspiral[m]> i mean 0.5 and 0.6
[17:51:07] <re101-koala-58> need to generate a splunk rex for service =  service=/v/abc/123/def Request to fetch API(/v/abc/123/def) and Request
[17:51:56] <mysticspiral[m]> 0.[5-9]\d* for including 0.5 and excluding 1
[17:52:19] <re101-koala-58> Kindly assist me to  to generate a splunk rex for "service =  service=/v/abc/123/def Request" such that i can fetch "v/abc/123/def Request" and Request
[17:54:12] *** Quits: re101-koala-58 (~re101-koa@43.230.180.235) (Quit: Client closed)
[17:54:54] *** Quits: oscurochu (~oscurochu@097-096-050-227.res.spectrum.com) (Remote host closed the connection)
[17:55:15] <re101-owl-1> My case of the above provided regex is " it should numbers greater than 0.5 , i.e x > 0.5
[17:55:16] *** Quits: timm (~timm@user/timm) (Remote host closed the connection)
[17:55:36] *** Joins: timm (~timm@user/timm)
[17:58:21] <mysticspiral[m]> it also doesnt match 0.505
[18:06:00] <mysticspiral[m]> i think id write the first variant like this 0.5(?!0*$)\d+
[18:11:43] <VectorX> re101-owl-1 are you using a programming language for this?
[18:16:03] <mysticspiral[m]> re101-owl-1: how about this? https://regex101.com/r/KzLscO/2
[18:18:01] <mysticspiral[m]> but since you use JS, why using regex for this?
[18:18:41] <re101-owl-1> VectorX im using Js
[18:19:00] <re101-owl-1> mysticspiral[m] checking your regex, it seems working..
[18:19:18] <re101-owl-1> im using a module which needs regex, so
[18:22:58] <mysticspiral[m]> you dont have any .5 or 5. numbers, right?
[18:26:43] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:28:23] <re101-owl-1> as of now no, what should be done if it needs to accept .5?
[18:29:04] <mysticspiral[m]> you mean .6
[18:30:34] <re101-owl-1> x > = 0.5
[18:35:14] <mysticspiral[m]> https://regex101.com/r/KzLscO/3
[18:35:18] <mysticspiral[m]> now it also matches stuff like 00.5
[18:35:21] <mysticspiral[m]> didnt before
[18:37:42] <re101-owl-1> Thank you very much mysticspiral[m], i think this will help me to solve my problem
[18:39:45] <mysticspiral[m]> version without naked dot again
[18:39:46] <mysticspiral[m]> https://regex101.com/r/KzLscO/4
[18:42:14] <OnlineCop> In all 3 cases, `^0*` could be used.
[18:42:19] <mysticspiral[m]> you could also just prefix version 3 with (?!^.|.$) for non naked dot
[18:43:37] *** Quits: Lope (~lope@user/lope) (Ping timeout: 240 seconds)
[18:45:40] <OnlineCop> Should '00.5' or '04' be valid or invalid?
[18:48:29] <mysticspiral[m]> i said > now it also matches stuff like 00.5
[18:48:29] <mysticspiral[m]> i mean 00.6 of course
[18:49:54] <OnlineCop> `^0*(?:[1-9]\d*(?:[.]\d*)?|[.][6-9]\d*|[.]50*[1-9]\d*)$`
[18:50:47] <OnlineCop> https://regex101.com/r/KzLscO/5
[18:51:38] <OnlineCop> Whoops; I switched it to PCRE for debugging and forgot to assign it back to ECMAScript when I saved.
[18:52:51] <OnlineCop> re101-owl-1: Do you have a list of "these should match" and "these should not match"? It's usually easier to make the regex pattern when you know the rules.
[18:53:25] <re101-owl-1> let me create the list OnlineCop
[18:53:30] <OnlineCop> Also: throw a `[-]?` right after the `^` if you want it to additionally match all negative numbers... unless `-0` and `-0.0` are _valid_.
[18:54:19] <OnlineCop> Some evil programmer, back in the day, decided that floating point numbers should allow -0's and even though their bits were different, they were supposed to be equal to positive values. :D
[18:57:05] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 256 seconds)
[18:58:52] <re101-owl-1> Thanks mysticspiral[m] and OnlineCop for your help, i will create a proper list with do's and dont's and get back to the channel
[19:02:05] *** Joins: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com)
[19:02:46] <OnlineCop> re101-owl-1: The website also has "unit tests" :D
[19:03:25] <OnlineCop> re101-owl-1: There, you can clearly define "this should match" or "this should not match" and then we know the pattern is only valid if all of them pass.
[19:05:57] <re101-owl-1> ok will check them
[19:08:55] <OnlineCop> re101-owl-1: https://regex101.com/r/KzLscO/6 Added some unit tests for you to see them in action.
[19:11:32] <re101-owl-1> that really helped X)
[19:12:12] *** Joins: Lope (~lope@user/lope)
[19:14:04] <OnlineCop> If you later determine that you want to match (or not match) negative values, add in the unit tests first (tell it whether `-0.1` should match, and whether `-0.0` should not), and when those unit tests FAIL, you fix up the pattern until all the tests start to pass.
[19:20:57] *** Quits: Lope (~lope@user/lope) (Ping timeout: 240 seconds)
[19:21:41] *** Joins: proc (uid412603@wikipedia/procrastinatingreader)
[19:22:00] *** Joins: mojtaba (~mojtaba@142.59.165.199)
[19:23:30] <mojtaba> Hello, does anybody know why this lookahead does not cover the overlapping? (It is supposed to give me two groups)
[19:23:30] <mojtaba> ^(?=.*?(\d)\d\1.*?)\d{6}$
[19:23:30] <mojtaba> 110000
[19:23:58] <mojtaba> first and third 0s, and second and fourth zeros
[19:25:13] *** Quits: travisghansen (~travisgha@192.74.130.86) (Quit: The Lounge - https://thelounge.github.io)
[19:27:39] *** Joins: travisghansen (~travisgha@192.74.130.86)
[19:29:38] <mysticspiral[m]> after matching the whole string with \d{6} there is no going back
[19:30:50] *** Quits: JanC (~janc@user/janc) (Remote host closed the connection)
[19:31:04] *** Joins: JanC (~janc@user/janc)
[19:32:19] <mojtaba> mysticspiral[m]: Any suggestion?
[19:42:01] <OnlineCop> Remove the '^' and the {6} ?
[19:43:08] <OnlineCop> mojtaba: If you simply had `(?=(\d)\d\1.*?)` it will show that there are two matches, along with the match positions.
[19:43:42] <OnlineCop> https://regex101.com/r/gkUNrP/1
[19:44:27] <mojtaba> OnlineCop: let me see
[19:44:54] <OnlineCop> Since you know that the pattern is [digit_to_keep][some_other_digit][same_1st_digit], you can infer that the match goes from offset 2 to 4.
[19:45:02] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[19:45:39] <mojtaba> OnlineCop: Could you please elaborate?
[19:45:39] <mysticspiral[m]> if you want to capture the \1 make it (\1)
[19:46:12] <OnlineCop> That, or if you want all 3 digits, you could also have two capture groups: `(?=((\d)\d\2))`
[19:46:19] <mojtaba> mysticspiral[m]: \1 is just for capturing the group
[19:46:25] <OnlineCop> I suppose you also don't need the `.*?` in that lookahead.
[19:46:44] <OnlineCop> https://regex101.com/r/gkUNrP/2
[19:46:47] <mojtaba> OnlineCop: I want number sth number.
[19:47:01] <OnlineCop> The Sith number? Like, Star Wars?
[19:48:44] <mojtaba> OnlineCop: How come having a lookahead without the pattern?
[19:48:57] <OnlineCop> Without what pattern?
[19:49:05] <OnlineCop> A lookahead _is_ a pattern.
[19:49:10] <mojtaba> \d{6}
[19:49:52] <OnlineCop> While not impossible, it would be difficult to both match [digit].[same_digit] _and_ the string length.
[19:50:04] <OnlineCop> You'd just have to do some kind of alternation, though.
[19:51:41] <mojtaba> OnlineCop: Thanks a lot. I thought it is not possible to have just lookahead.
[19:51:52] <OnlineCop> Well... it IS.
[19:52:03] <mojtaba> OnlineCop: awesome, I removed the pattern after lookahead and it is working.
[19:52:09] <mojtaba> OnlineCop: thumbs up!
[19:52:15] <OnlineCop> Anything outside of a lookahead will move the "bumpalong" and consume the characters it matches.
[19:53:22] <mojtaba> OnlineCop: Yes.
[19:54:26] <OnlineCop> mojtaba: PCRE? Javascript? Something else?
[19:55:06] <OnlineCop> https://regex101.com/r/gkUNrP/3
[19:55:17] <mojtaba> Python
[19:55:20] <OnlineCop> This will take into account that the number must be 6 digits long.
[19:56:08] <mojtaba> What is ?| syntax?
[19:57:37] <OnlineCop> It's a PCRE syntax that lets you keep using the capture group (in this case, `\1`). Python's `re` module doesn't support it, but I believe Python's `regex` module from PyPi does.
[19:57:57] <mojtaba> hmm
[19:57:59] <OnlineCop> https://regex101.com/r/gkUNrP/4
[19:58:04] <mojtaba> I will look in to it. Thanks
[19:58:08] <OnlineCop> That should work with `re`.
[19:58:22] <OnlineCop> It just changes all those `\1`'s into \1, \2, \3, and \4.
[19:59:03] <OnlineCop> Obviously, you can fix it up and get rid of those annoying  {0}  quantifiers. I mainly did that to help everything align nicely for readability.
[20:00:09] <mojtaba> OnlineCop: Is there any better way (I mean something more generalize), rather than hand-writing all the combinations, get them by regex?
[20:01:42] <OnlineCop> I'd personally break it apart into two regexes. The first would do the simplest: `\b\d{6}\b` or `^\d{6}$` or whatever you want to guarantee up front.
[20:02:23] <OnlineCop> For each of the matches it returns, you already know that the length is correct, so then you can just use that very simple `(?=(\d)\d\1)` to get the offset where that matches.
[20:02:45] *** Joins: re101-camel-96 (~re101-cam@2804:29b8:5060:a92:6cde:d430:2d3a:fbf6)
[20:02:55] *** Quits: re101-camel-96 (~re101-cam@2804:29b8:5060:a92:6cde:d430:2d3a:fbf6) (Client Quit)
[20:04:00] *** Quits: re101-owl-1 (~re101-owl@49.206.13.176) (Quit: Client closed)
[20:05:19] <OnlineCop> That should give you the _fastest_ results, since the first match can get rid of everything that's not exactly the 6 digits you want, and if you ever need to modify that so it supports numbers in the middle of a string (instead of ^full_line_match$ ), it won't affect how the 2nd regex operates.
[20:09:34] <mojtaba> OnlineCop: thanks. very nice.
[20:09:55] <OnlineCop> My pleasure. Feel free to ask questions in here if you get stuck on anything.
[20:10:18] <OnlineCop> If you're not familiar with it, Regex101 has a "code generator" that helps give you some copy-paste code.
[20:13:16] *** Joins: re101-lizard-73 (~re101-liz@193.144.97.102)
[20:13:35] *** Quits: re101-lizard-73 (~re101-liz@193.144.97.102) (Client Quit)
[20:31:33] *** Joins: re101-quail-93 (~re101-qua@177.234.197.135)
[20:35:28] <mojtaba> Thanks a lot OnlineCop.
[20:43:01] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-fdc3-f0e9-d4e9-45ad.fixed6.kpn.net) (Ping timeout: 240 seconds)
[20:44:25] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[20:53:52] *** Joins: cthulchu (~Cthulchu@69-172-160-196.cable.teksavvy.com)
[20:54:27] *** Quits: re101-quail-93 (~re101-qua@177.234.197.135) (Quit: Client closed)
[21:31:25] *** Joins: d1cor (~diego@179.63.242.120)
[21:40:27] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[22:07:12] *** Quits: d1cor (~diego@179.63.242.120) (Ping timeout: 268 seconds)
[22:29:21] *** Joins: army (~aL@user/army)
[22:53:40] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-fdc3-f0e9-d4e9-45ad.fixed6.kpn.net)
[22:53:57] *** Quits: jmdaemon (~jmdaemon@user/jmdaemon) (Ping timeout: 256 seconds)
[22:55:50] *** Joins: Lope (~lope@user/lope)
[22:56:23] *** Quits: dmaislin (~dmaislin@047-233-046-055.res.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:02:05] *** Quits: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-fdc3-f0e9-d4e9-45ad.fixed6.kpn.net) (Ping timeout: 268 seconds)
[23:26:16] *** Joins: ahmedelgabri (~ahmedelga@2a02-a446-d88a-1-fdc3-f0e9-d4e9-45ad.fixed6.kpn.net)
[23:29:17] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-188.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:29:32] *** timm is now known as f00
[23:30:09] *** Joins: jmdaemon (~jmdaemon@user/jmdaemon)
[23:37:20] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-52-65-93-194-105.dsl.bell.ca)
[23:54:28] *** Joins: re101-yorkie-6 (~re101-yor@62.190.154.115)
[23:54:50] <re101-yorkie-6> Hi
[23:55:40] <re101-yorkie-6> i want to frame a regex in Mule4 to check /match a file name pattern
[23:56:19] <re101-yorkie-6> say file name pattern is  - CR000076351570.zip
[23:56:37] <re101-yorkie-6> how to write regex for this ?
[23:56:49] <re101-yorkie-6> any suggestions /help ?
[23:58:31] <mysticspiral[m]> a CR followed by 12 digits and .zip?
