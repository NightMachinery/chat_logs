[00:02:59] *** Quits: lispy (~lispy@user/lispy) (Quit: Leaving)
[00:11:46] *** Joins: aeth_ (~aeth@user/aeth)
[00:11:52] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[00:11:54] *** aeth_ is now known as aeth
[00:12:44] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:20:26] *** Joins: badkins (~badkins@136.56.92.199)
[00:21:50] <Zipheir> Adding more fuel to the fold-fire: the R6RS fold-left & fold-right forms follow the same convention as Haskell WRT application order.  The accumulator value is passed first for fold-left, and last for fold-right!
[00:22:55] <jcowan> Zipheir: I see the logic of that, I suppose.  But I think uniformity is better in an eager language.
[00:25:59] <sham1> Meanwhile I'd say that having the accumalator "lean" on where the evaluation tree leans might be useful
[00:26:19] <sham1> Although uniformity is also a good thing because it means that it's easier to remember
[00:27:50] <Zipheir> jcowan: Yes.  There's also something a little odd in Scheme about a procedure which receives a varying number of arguments *followed by* a mandatory argument, as opposed to the other way around.
[00:28:19] <Zipheir> Maybe this is why Olin chose (acc v1 v2 ... vn) instead of (v1 v2 ... vn acc).
[00:28:29] <Zipheir> (for the left fold)
[00:29:25] <Zipheir> sham1: But I very much agree about the leaningness.
[00:32:52] <jcowan> "As each theory seems probable enough, I see no objection to believing both."
[00:35:28] <sham1> A question I feel a bit strongly about is whether the folds would accept generators or if one would need a special generator-fold-left or whatever
[00:36:45] <Zipheir> Streams, generators, ...
[00:37:04] <Zipheir> Lots of things can be folded!
[00:37:24] <Zipheir> I'd like something approximating the Foldable and Traversable typeclasses of Haskell.
[00:38:42] <sham1> Yeah, that's what I was thinking of
[00:39:51] <sham1> I feel that the biggest problem would come from trying to make it so that user types could also be used as such, because we of course don't have CLOS or anything so we can't even do the thing where we are like "if you somehow associate a procedure with this name with your type, you are now a foldable" or whatever
[00:40:17] <Zipheir> Comparators are probably the model.
[00:40:38] <sham1> Hm. That's a good point
[00:41:03] <Zipheir> I considered a generic fold of the form (gen-fold <folder-dictionary> kons knil lis1 ...)
[00:42:06] <Zipheir> Sorry, obj1 ...  Obviously the point is that the structures don't have to be lists.
[00:42:41] <sham1> Yeah. And then probably something where the <folder-dictionary> knows how to fold the obj1, obj2 and such
[00:42:49] <sham1> Or just generate the next element
[00:42:59] <Zipheir> The dictionary object tells you how to recurse on an obj.  That's basically it.
[00:43:13] <Zipheir> Right, or generate the next object.
[00:43:28] <Zipheir> The devil is in the details, but it seems plausible.
[00:43:35] <sham1> So for example a prime sieve could use the last state to try to find the next prime
[00:44:11] <sham1> Or an iota-counter that just gives you the naturals from zero upwards
[00:44:30] <Zipheir> I thought prime sieves were coinductive...
[00:44:51] <sham1> Probably are
[00:45:01] <sham1> I'm not totally sure. But you see what I'm driving at
[00:45:17] <Zipheir> (Unfolding as opposed to folding)
[00:45:35] <Zipheir> Right.
[00:45:36] <sham1> You basically want a function f, such that for an old state x, (f x) gives you the new state, maybe alongside a signal to stop
[00:45:47] <sham1> Unless one wants to use the EOF object for that like with generators
[00:45:48] <Zipheir> Yeah, that's co-induction.
[00:46:19] <sham1> Well that's basically what you do with iterators in general in most other languages
[00:46:27] <Zipheir> Most things can also be unfolded, but generic unfolds don't seem to make much sense.
[00:47:16] <Zipheir> sham1: You know `unfold` from SRFI 1, right?
[00:47:22] <sham1> Yes
[00:47:26] <jcowan> There is a generator-fold-left in the SRFI, but not a generator-fold-right, because that's equivalent to composing fold-right with generator->list.
[00:47:42] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:47:58] <Zipheir> Which is why the streams SRFI also has no right fold, IIRC.
[00:48:04] <jcowan> The generator SRFI doesn't provide things that require you to expand the generator first.
[00:48:57] <sham1> Oh yeah, because you need the stop for the right folds
[00:49:02] <sham1> Right
[00:50:09] <Zipheir> The right fold "goes all the way to the end" ... of eternity, apologies to Isaac Asimov.
[00:50:44] <sham1> The right associativity, I'm not actually sure if it copes well with potentially infinite sources\
[00:51:47] <sham1> Haskell gets away with that due to laziness
[00:51:51] <sham1> Hm
[00:51:59] <jcowan> It's a duality: left for eagerness, right for laziness
[00:53:54] <Zipheir> sham1: Yeah, it does, rather surprisingly.
[00:53:57] <Zipheir> https://hackage.haskell.org/package/base-4.16.0.0/docs/Data-List.html#g:3
[00:54:12] <Zipheir> "Note that since the head of the resulting expression is produced by an application of the operator to the first element of the list, given an operator lazy in its right argument, foldr can produce a terminating expression from an unbounded list."
[00:54:32] <sham1> Yeahâ€¦ so won't work for Scheme, sadly
[00:54:35] <Zipheir> But there is no foldr' (strict right fold).
[00:54:53] <Zipheir> No reason it can't.  It's just not easy enough to be lazy, IMHO.
[00:55:06] <sham1> Mmm, doesn't need it, while foldl' is needed because otherwise it'd thunk the tail recursion
[00:55:17] <Zipheir> Agreed.
[00:55:29] <Zipheir> Lazy fold-right is somewhat niche.
[00:55:44] <sham1> Mmm, probably not that big
[01:04:09] *** robin_ is now known as robin
[01:16:28] *** Joins: badkins (~badkins@136.56.92.199)
[01:21:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[01:22:46] *** Joins: badkins (~badkins@136.56.92.199)
[01:22:58] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[01:28:05] *** Joins: mnieper (~user@212.30.36.92)
[01:31:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[01:41:22] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:19:53] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:29:30] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb)
[02:31:48] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[02:33:24] *** Quits: mnieper (~user@212.30.36.92) (Ping timeout: 240 seconds)
[02:34:02] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[02:34:45] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:5e66:8d:7679:aecb) (Ping timeout: 256 seconds)
[02:49:50] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4.1)
[02:50:51] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[02:51:51] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 252 seconds)
[02:52:44] *** Joins: cedb (~ced@user/ouestbillie)
[03:25:28] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:33:25] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[03:38:02] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[03:38:27] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:41:04] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Read error: Connection reset by peer)
[03:41:38] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:44:34] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Client Quit)
[03:45:01] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[03:47:24] *** Joins: seninha (~seninha@user/seninha)
[03:50:28] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[03:51:52] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Remote host closed the connection)
[04:00:38] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[04:04:42] *** Joins: badkins (~badkins@136.56.92.199)
[04:09:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:10:12] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[04:10:16] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) ()
[04:10:43] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[04:10:45] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Remote host closed the connection)
[04:11:50] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[04:22:18] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[04:22:38] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[04:25:33] *** Quits: cedb (~ced@user/ouestbillie) (Quit: WeeChat 3.4.1)
[04:37:01] *** Joins: cedb (~ced@user/ouestbillie)
[04:42:47] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[04:43:17] *** Joins: badkins (~badkins@136.56.92.199)
[04:48:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:56:24] *** Joins: zacque (~zacque@1.32.90.32)
[05:03:29] *** Joins: notzmv (~zmv@user/notzmv)
[05:07:20] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[05:07:49] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[05:15:16] *** Joins: badkins (~badkins@136.56.92.199)
[05:33:00] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[05:45:00] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[05:45:48] *** Quits: X-Scale (~ARM@89.214.146.25) (Ping timeout: 240 seconds)
[05:45:48] *** X-Scale` is now known as X-Scale
[05:51:10] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:52:47] *** Joins: Techcable (~Techcable@user/Techcable)
[05:55:37] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[06:00:50] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[06:16:32] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[06:24:49] *** Quits: jao (~jao@45.152.183.53) (Remote host closed the connection)
[06:29:39] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:41:43] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Remote host closed the connection)
[06:42:32] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[06:45:19] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[06:50:19] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 256 seconds)
[07:02:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[07:05:34] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[07:12:42] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[07:19:36] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[07:24:19] *** Joins: irontom (~user@69.174.103.168)
[07:25:11] *** Quits: irontom (~user@69.174.103.168) (Remote host closed the connection)
[07:25:26] *** Joins: irontom (~user@69.174.103.168)
[07:26:08] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[07:37:26] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 245 seconds)
[07:41:18] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[07:52:09] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 252 seconds)
[07:58:37] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Ping timeout: 240 seconds)
[08:01:08] *** Joins: webshinra_ (~shinra@lfbn-idf3-1-429-113.w83-114.abo.wanadoo.fr)
[08:01:32] *** Quits: webshinra (~shinra@2a01cb080779fc00b3436da62fafc69e.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[08:04:12] *** Joins: livoreno (~livoreno@user/notzmv)
[08:05:49] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 268 seconds)
[08:06:18] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[08:21:04] <ns12> Hello, what is the Scheme equivalent of Common Lisp's "Osicat" operating system interface library (https://github.com/osicat/osicat)?
[08:59:17] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[09:02:30] *** Joins: badkins (~badkins@136.56.92.199)
[09:07:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[09:17:15] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[09:19:18] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[09:19:58] *** Quits: skapata (~Skapata@user/skapata) (Quit: Äœis.)
[10:10:17] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[10:11:40] *** Joins: klovett (~klovett@107.116.92.97)
[10:45:23] *** Joins: seninha (~seninha@user/seninha)
[10:55:42] *** elflng_ is now known as elflng
[10:57:27] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[10:57:43] *** Joins: madage (~madage@user/madage)
[11:29:32] *** Quits: klovett (~klovett@107.116.92.97) (Quit: ZZZzzzâ€¦)
[11:44:17] <seninha> Hi, anyone here with knowledge on automata (in particular, pushdown automata) can check this scheme program of mine that simulates (among other things) a pushdown automata? I'm not confident enough it works for all context-free languages... https://github.com/phillbush/automata.scm
[11:44:32] <seninha> It's an old program of mine, but I've just expanded it to support pushdown automata.
[11:50:10] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:9a3a:65eb:9cac:13c8)
[11:56:37] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[12:20:50] <wasamasa> ns12: the equivalent would be to demand an equivalent SRFI and have nobody implement it because it's too complicated
[12:21:19] <wasamasa> ns12: why not write your own shims for your prefered scheme?
[12:29:06] *** Quits: notzmv (~zmv@user/notzmv) (Ping timeout: 245 seconds)
[12:36:44] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[13:00:40] <dpk> ns12: it looks like SRFI 170 more or less covers basically the same ground
[13:04:36] *** Joins: badkins (~badkins@136.56.92.199)
[13:08:37] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[13:17:36] <sham1> POSIX, for some value of POSIX that includes Windows
[13:18:17] <sham1> And wellâ€¦ makes sense. Windows also has most of the APIs
[13:25:25] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:40:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[13:50:32] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 268 seconds)
[13:54:10] <amazigh> seninha: Welcome, and thanks for sharing. Sadly, I have limited time supply at this time. Feel free to post your project on reddit /r/scheme or the newsgroups :)
[14:02:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:05:25] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:23:11] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[14:25:13] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:28:05] *** Joins: Everything (~Everythin@37.115.210.35)
[14:38:21] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[14:40:21] *** Joins: notzmv (~zmv@user/notzmv)
[14:42:07] *** Joins: badkins (~badkins@136.56.92.199)
[14:46:35] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[15:08:25] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[15:08:44] *** Quits: amk (~amk@109.255.169.126) (Remote host closed the connection)
[15:09:52] *** Joins: amk (~amk@109.255.169.126)
[15:15:52] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[15:16:23] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Remote host closed the connection)
[15:16:42] *** Joins: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt)
[15:18:07] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:27:33] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[15:30:01] *** Quits: ft (~ft@shell.chaostreff-dortmund.de) (Remote host closed the connection)
[15:30:14] *** Joins: ft (~ft@shell.chaostreff-dortmund.de)
[15:32:37] *** Quits: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de) (Ping timeout: 240 seconds)
[15:32:54] *** Joins: edgar-rft (~edgar-rft@ip-109-193-249-223.um39.pools.vodafone-ip.de)
[15:57:30] *** Joins: TCZ (~tcz@91.150.178.124)
[16:06:20] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[16:08:59] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:16:23] *** Joins: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833)
[16:22:17] *** Quits: wickedjargon (~wickedjar@2607:fea8:56a0:6510::f833) (Quit: Leaving)
[16:27:05] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:28:19] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[16:32:35] *** Quits: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[16:32:49] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[16:48:22] *** Joins: badkins (~badkins@136.56.92.199)
[16:55:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[16:58:36] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 240 seconds)
[16:59:28] *** Quits: madage (~madage@user/madage) (Remote host closed the connection)
[16:59:40] *** Joins: madage (~madage@user/madage)
[17:12:26] *** Quits: karlosz (~karlosz@bl18-25-12.dsl.telepac.pt) (Quit: karlosz)
[17:12:35] *** Joins: badkins (~badkins@136.56.92.199)
[17:20:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[17:22:25] *** Quits: TCZ (~tcz@91.150.178.124) (Ping timeout: 250 seconds)
[17:48:52] *** alMalsamo is now known as lumberjack123
[17:58:38] *** Joins: klovett (~klovett@107.116.92.97)
[18:14:17] *** Quits: lagash (lagash@lagash.shelltalk.net) (Remote host closed the connection)
[18:15:18] *** Joins: lagash (lagash@lagash.shelltalk.net)
[18:24:47] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:35:42] *** Joins: badkins (~badkins@136.56.92.199)
[18:40:17] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:41:00] *** Joins: klovett_ (~klovett@107.116.92.97)
[18:44:37] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[18:48:23] *** Joins: klovett (~klovett@107.116.92.97)
[18:51:57] *** Quits: klovett_ (~klovett@107.116.92.97) (Ping timeout: 240 seconds)
[18:52:31] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[19:06:24] *** Joins: badkins (~badkins@136.56.92.199)
[19:17:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[19:30:46] *** Quits: nulluint (uid547282@user/nulluint) (Changing host)
[19:30:46] *** Joins: nulluint (uid547282@fsf/member/nulluint)
[19:31:57] *** Joins: badkins (~badkins@136.56.92.199)
[19:35:57] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[19:40:22] *** Joins: gproto23 (~gproto23@user/gproto23)
[19:44:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d)
[19:44:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:c4ec:7584:bbd2:af2d) (Changing host)
[19:44:07] *** Joins: skapata (~Skapata@user/skapata)
[19:44:15] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[19:45:26] *** Joins: badkins (~badkins@136.56.92.199)
[20:05:44] <Zipheir> ns12: There isn't currently *any* agreement on OS interfaces, really.  SRFI 170 could be the model going forward, though.
[20:14:18] <ns12> I'm surprised that the library chose to use names that are different from POSIX. For example, instead of "mkdir", SRFI 170 uses "create-directory".
[20:14:53] <ns12> Instead of "chown", SRFI 170 uses "set-file-owner".
[20:16:18] <ns12> There's no fork(2) and exec(3) ... :-(
[20:18:22] <Zipheir> "mkdir" is a very UNIXy name. :)  Descriptive kebab-case names are the norm in the Lisp world.
[20:18:49] <Zipheir> Most Scheme implementations do not hew close to the POSIX names, IME.
[20:21:56] <Zipheir> And yeah, there's no process management in SRFI 170.  The spec. calls it "tricky". (agreed)
[20:23:39] *** Joins: skapate (~Skapata@user/skapata)
[20:26:19] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 260 seconds)
[20:28:57] <gwatt> It would be nice to have a common way to spawn processes that's not (system ...)
[20:30:52] <Zipheir> There are, in most implementations.
[20:35:07] <sham1> Another OS interface that might need clarification is threads. Or rather, I'd say that there needs to be a bit more formalisation around the thread APIs and implementation details. Like whether threads share a heap or not
[20:36:37] <Zipheir> Cross-platform threads and signals, the trails of misery and despair.
[20:37:12] <sham1> Eugh. I haven't even thought about signals
[20:37:21] <Zipheir> I think threads are too low-level a model to successfully standardize.  I'd rather see standardized gochans or something.
[20:38:14] <Zipheir> e.g. https://wiki.call-cc.org/eggref/5/gochan
[20:42:03] <Zipheir> sham1: It gets even wonkier with threads and continuations.
[20:42:24] <sham1> Yeah
[20:43:04] <sham1> Although Feeley, for their part, I think did a decent enough job with SRFI-18 and 21 to address it at least at a high level
[20:43:57] <sham1> Because to me it just looks like the continuations would be delimited on thread boundaries
[20:45:25] <Zipheir> Yeah, they'd have to be.
[20:46:40] <sham1> Anyway, in the gochan egg's documentation, the author also mentions the core.async from Clj which might also be an interesting thing to look at for inspiration: https://github.com/clojure/core.async
[20:47:05] <sham1> Saying that they "wish they had copied that instead of Go's concurrency model"
[20:47:46] <Zipheir> I noticed that, it's interesting.
[20:52:33] *** Joins: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[20:53:13] <theseb> (define aa (list 1 2)) (define bb (append aa (list 3 4))) <--- How come appending a list to aa doesn't change aa?
[20:53:31] <theseb> bb = (1 2 3 4) 
[20:53:33] <theseb> but not aa
[20:53:41] <gwatt> because append doesn't modify its arguments
[20:54:02] <theseb> gwatt: fair enough...so it is making a COPY of the original list?
[20:54:17] <theseb> gwatt: rather than just appending to the original list in memory?
[20:54:36] <dpk> it makes a copy of all its arguments but the last one
[20:54:58] <dpk> append! modifies the original list in-place (or can do, anywayÂ â€”Â it's not guaranteed)
[20:55:34] <theseb> dpk: nice...thanks
[20:55:36] <sham1> I'd think that append! would only modify stuff if you had something like (append! (list -1 0) aa (list 3 4))
[20:55:45] <sham1> Like if you had stuff in the middle
[20:56:23] <sham1> Cons-based linked lists are a functional data structure after all
[20:56:44] <theseb> dpk: seems you can create a lisp w/o needing to modify anything in place
[20:57:02] <dpk> it astounds me that there are so many people saying that we can't possibly standardize threads because too complicated, nobody would adopt it, whatever. have you seen the support tables for SRFI 18?
[20:57:49] <dpk> it's not universally supported, but pretty much all the implementations we care about for R7RS Large
[20:58:41] <Zipheir> I misspoke.
[20:59:20] <dpk> (i wasn't calling you out in particular, Zipheir, loads of people have said this on scheme-reports-wg2)
[21:00:07] <sham1> I do feel that SRFI 18 is quite good, although I'd still probably clarify a few things there
[21:00:10] <theseb> sham1: i just noticed if you append! to the cdr of a list it also modifies that original list
[21:00:10] <Zipheir> It's really just that my mind does not yet support the concept of threads as being anything other than a mess with no clear meaning, and I need to study more to make sense of them.
[21:00:20] <theseb> sham1: voodoo dolls!
[21:00:49] <sham1> Well yes, that's how it works
[21:01:05] <Zipheir> I was just digging around for what books I've got on Ï€-calculus...
[21:01:27] <theseb> sham1: if a mini lisp didn't have append!, but only append, you could implement cdr the right way or by making a copy and it wouldn't matter?
[21:01:43] <Zipheir> theseb: Of course.
[21:01:53] <theseb> Zipheir: thanks.
[21:02:08] <theseb> I'm a newb but seems safer to avoid functions that alter lists in place
[21:02:10] <Zipheir> theseb: And a language with immutable lists would never have to do "safety  copying".
[21:27:08] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[21:32:57] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[21:34:17] *** Quits: yagamisato (~SingSong@user/yagamisato) (Ping timeout: 240 seconds)
[21:35:53] *** Joins: yagamisato (~SingSong@183.234.128.105)
[21:35:53] *** Quits: yagamisato (~SingSong@183.234.128.105) (Changing host)
[21:35:53] *** Joins: yagamisato (~SingSong@user/yagamisato)
[21:36:16] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[21:42:58] *** Quits: theseb (~theseb@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[22:25:00] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 252 seconds)
[22:32:09] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[22:32:19] *** Quits: xgqt (~xgqt@gentoo/developer/xgqt) (Read error: Connection reset by peer)
[22:38:16] *** Joins: xgqt (~xgqt@gentoo/developer/xgqt)
[22:53:05] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Ping timeout: 256 seconds)
[23:01:30] *** Joins: badkins (~badkins@136.56.92.199)
[23:23:11] *** Quits: klovett (~klovett@107.116.92.97) (Ping timeout: 260 seconds)
[23:33:52] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
