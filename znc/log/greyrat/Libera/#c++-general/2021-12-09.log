[00:01:03] <PJBoy> great_taste, std::tuple_element
[00:01:10] <malinus> it's a bunch of random virual overrides, but the data input is usually fairly small (~20B-100B)
[00:02:02] <great_taste> ;O
[00:02:05] <PJBoy> << TYPE<tuple_element_t<2, T>>; using T = tuple<int, string, float>; // great_taste
[00:02:05] <geordi> float
[00:02:55] *** Joins: proller (~p@80.240.216.69)
[00:04:06] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[00:05:38] *** Joins: troller (~p@2a02:6b8:b081:10::1:1c)
[00:08:13] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 240 seconds)
[00:09:24] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 265 seconds)
[00:12:27] <rpav> malinus: branch misprediction can be murder
[00:13:04] <rpav> or cache issues, either could apply there i think
[00:13:35] <rpav> otoh that's a _may_, and it _may not_ be an actual noticeable issue
[00:14:00] <rpav> e.g. if you sort all the objects by class and iterate them you can do about as well as possible with virtuals
[00:14:09] <rpav> or dynamic dispatch in general
[00:31:25] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:33:58] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:56:54] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Remote host closed the connection)
[00:57:40] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[01:09:13] *** Joins: letto (~letto@188.26.158.104)
[01:11:04] *** wyre_ is now known as wyre
[01:11:27] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 252 seconds)
[01:11:54] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[01:24:13] <ville> what would you guess a: u32 ceil_power_of_2(u32) function does?
[01:25:01] <kalven> raises the roof yo
[01:26:49] <imMute> ville: my guess is finds the power of 2 that is equal to or larger than the input.
[01:28:52] <ville> ok. so sounds like an acceptable name then
[01:30:07] <imMute> I don't like the name, but that was my guess based on what was given.  without the "ceil" it would be much more ambiguous
[01:30:20] <imMute> but with "ceil" it only makes sense that there's a division in there.
[01:30:51] <imMute> ceil_log2() might be a better name
[01:38:04] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:38:34] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:a894:a049:803a:817)
[01:38:34] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:a894:a049:803a:817) (Changing host)
[01:38:34] *** Joins: skapata (~Skapata@user/skapata)
[01:39:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:22] *** ChanServ sets mode: +v npaperbot
[01:45:16] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:47:42] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:48:23] <leonardus> would it be better to store 3d model data being used for rendering as a list of just vertices, each sequential 3 being a face, where some will inevitably be duplicated, or instead as a list of unique vertices, and then a list of faces with indices to those vertices describing the faces, but will have to be indexed for each vertex when rendering?
[01:48:48] <ville> depends on the data
[01:49:03] <leonardus> in what way?
[01:49:12] <ville> also is this a software rasterizer?
[01:49:42] <leonardus> hardware. cpu passes a list of vertices to the GP
[01:49:55] <leonardus> then the GP does hard work
[01:50:03] <imMute> leonardus: graphics APIs typically let you do it a couple different ways.
[01:50:08] <ville> if your models are say cubes made of triangles then an indexed vertex buffer comes out pretty "bad" possibly
[01:50:23] <imMute> leonardus: https://khronos.org/registry/vulkan/specs/1.1/html/chap20.html#drawing-point-lists
[01:50:56] <leonardus> the API I am using is similar to early (~1.0) opengl
[01:51:15] <ville> if your models are more complex than that, that is there's high number, ~5, of edges meeting at a vertex on average then indexed vertex buffers come out pretty "good"
[01:52:52] <ville> but what performs well really depends on your data. whether you get to take advantage or not of whichever format you choose to use
[01:54:27] <RandomReader> ville - C++ named that bit_ceil()
[01:54:35] <RandomReader> er, C++20
[01:54:51] <RandomReader> not sure it's a *good* name, but there it is
[01:55:07] <ville> RandomReader: ah right. now that you mentioned. think i mocked the name few weeks back
[01:57:10] <leonardus> imMute, ville Thanks for the help :)
[01:57:46] <PJBoy> for how rarely you'd ever need to use bit_ceil, they could have afforded to make it a bit longer and descriptive
[01:58:33] <RandomReader> what's amusing to me is they prefixed it, as if namespaces don't exist
[01:58:59] <PJBoy> that would mean you could `using namespace std::bit` and start using `ceil` for bit_ceil
[01:59:07] *** Quits: letto (~letto@188.26.158.104) (Ping timeout: 252 seconds)
[02:00:46] <RandomReader> I'm a bit ambivalent on log2 though .. I have no trouble thinking of it in those terms, but the focus here really is on the binary representation, not the mathematical calculation
[02:00:58] <RandomReader> wonder if this got bikeshedded in committee
[02:02:59] <leonardus> are the people who make the c++ standard voluneer or paid?
[02:03:22] <PJBoy> they volunteer
[02:03:30] <PJBoy> possibly paying a fee in the process
[02:03:35] *** Joins: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net)
[02:03:36] <ville> leonardus: both. well they are paid by their employers often
[02:03:37] *** Quits: krishnac (~krishnac@c-67-188-37-26.hsd1.ca.comcast.net) (Remote host closed the connection)
[02:04:06] <leonardus> ville: is it like linux where some employers pay their employees to work on the standard?
[02:04:13] <ville> companies with large codebases in c++ often send representatives into the iso meetings
[02:04:21] <leonardus> ah
[02:04:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:68eb:9b8c:ed60:d2d2) (Quit: Quit)
[02:10:14] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 265 seconds)
[02:19:50] <whupdup> leonardus: from what I've heard, the most optimal representation for modern GPUs is indexed models i.e. you don't repeat vertices but instead indices
[02:20:52] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Ping timeout: 265 seconds)
[02:24:28] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:26:36] *** Joins: letto (~letto@188.26.158.104)
[02:26:56] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Remote host closed the connection)
[02:27:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[02:31:05] *** Quits: TheSchaf (~TheSchaf@p508b6d1b.dip0.t-ipconnect.de) ()
[02:32:53] *** Joins: geli (~gelignite@55d4e16d.access.ecotel.net)
[02:33:10] *** Quits: magla (~gelignite@55d4e16d.access.ecotel.net) (Remote host closed the connection)
[02:34:16] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[02:35:33] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[02:48:25] *** Joins: Guest86 (~Guest86@2a02:2f00:3007:6a00:d49c:57a5:edf0:dd38)
[02:48:33] *** Parts: Guest86 (~Guest86@2a02:2f00:3007:6a00:d49c:57a5:edf0:dd38) ()
[02:50:04] *** Quits: CalamityToo (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (Read error: Connection reset by peer)
[02:50:47] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[02:53:25] *** Quits: troller (~p@2a02:6b8:b081:10::1:1c) (Ping timeout: 240 seconds)
[02:56:01] *** Quits: geli (~gelignite@55d4e16d.access.ecotel.net) (Quit: Stay safe!)
[03:02:14] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) (Read error: Connection reset by peer)
[03:14:37] *** Joins: troller (~p@2a02:6b8:b081:8811::1:2e)
[03:26:05] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:29:01] *** Joins: paule32__ (~paule32@user/paule32)
[03:39:09] *** Joins: ferdna (~ferdna@user/ferdna)
[03:46:08] *** Joins: scoobydoob (~scooby@user/scoobydoo)
[03:48:12] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[03:48:16] *** scoobydoob is now known as scoobydoo
[03:58:59] *** Quits: jkaye (~jkaye@c-71-205-220-154.hsd1.co.comcast.net) (Ping timeout: 268 seconds)
[04:02:08] *** Quits: sprout_ (~quassel@2a02:a467:ccd6:1:bc10:5f40:71cb:b3b6) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[04:04:06] <leonardus> whupdup: when you say modern what do you mean by that?
[04:07:11] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:09:16] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Quit: Leaving)
[04:12:20] <whupdup> I mean GPUs in the last 10 years
[04:13:52] <rpav> whupdup: not entirely; gpus have cache issues like anything and indexed meshes can suffer from locality issues
[04:14:16] <rpav> optimizing such in the general case can be hard
[04:18:29] <whupdup> yeah it's a bit too general to state but from what I've been told, generally indexed models outperform unindexed models cache locality notwithstanding
[04:18:50] <rpav> they're preferable for any number of reasons but yeah
[04:19:16] <rpav> these days they _vastly_ do when you can reorganize into meshlets and take advantage of mesh shaders .. i need to figure out how that stuff works myself
[04:20:08] <rpav> from what i saw of the ue5 nanite presentation (which i also need to finish) that's how they accomplish their shit, and it's nifty as hell
[04:20:24] <rpav> but ue5 gets to not have to deal with dynamic geometry modification ;/
[04:20:42] <whupdup> I still have a gtx 760 so I don't even think about rtx or mesh shaders
[04:20:53] <whupdup> but you can still do dynamic GPU-driven meshlet culling with compute
[04:20:55] <whupdup> which I think is super cool
[04:21:08] <rpav> i have a 1070 at home and slightly better at work so i hypothetically can, but haven't really taken advantage
[04:21:28] <rpav> and i reeeeeally want to mess with RTX .. been waiting decades :(
[04:21:49] <rpav> but i can't see getting a new card til like 4xxx if then, damn chip shortages or whatever
[04:22:14] <rpav> whupdup: yeah tons of utility there and dealing with huge meshes
[04:22:58] <rpav> lots of potential for compute-driven mesh ops too i think
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:37:36] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:40:10] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[04:43:34] *** PJBoy is now known as Guest5602
[04:43:35] *** Joins: PJBoy (~PJBoy@user/pjboy)
[04:46:13] *** Quits: Guest5602 (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[04:46:30] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:57:56] <johnny> so glad you folks are dealing with that sort of stuff so i don't have to
[05:01:20] *** Quits: pulse (~pulse@user/pulse) (Quit: Join our gamedev community https://indiedevs.net/)
[05:18:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[05:21:01] *** Quits: troller (~p@2a02:6b8:b081:8811::1:2e) (Ping timeout: 240 seconds)
[05:26:18] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:28:43] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[05:29:30] *** Joins: seninha (~seninha@user/seninha)
[05:29:50] <CarloWood> Anyone else working with vulkan here?
[05:34:04] *** Joins: troller (~p@80.240.216.69)
[05:34:30] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:250b:308d:c956:22dd) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:39:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:23] *** ChanServ sets mode: +v npaperbot
[05:42:44] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[05:47:38] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[05:48:12] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[05:58:17] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[05:59:24] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:03:18] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[06:04:22] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:05:51] <kalven> nope, just webgl
[06:23:01] <smallville7123> trying to come up with a good effects base class is difficult ;-;
[06:24:42] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[06:27:55] <kalven> if that's the case, you may be trying to prematurely generalize
[06:29:43] <smallville7123> for example
[06:29:48] <smallville7123> // what do we do if an effect uses the vertex shader for lighting, manipulating the vertex color, and the fragment shader for texture, sampling color from different areas of the texture?
[06:29:48] <smallville7123> // do we force the user to split the effect into separate effects or do we allow this?
[06:30:34] <kalven> alternatively: don't try to answer these question before you know what you'll actually need
[06:31:39] <smallville7123> kalven: hmm
[06:32:41] <smallville7123> one of the requirements is that an effect must be able to run on both the vertex shader and the fragment shader, however this introduces the above scenario
[06:33:38] <smallville7123> eg do we force the user to split into a vertex lighting shader which gets output to a texture and fed as input for the fragment shader that uses texture sampling?
[06:34:02] <smallville7123> or do we allow for both in the case the user may want to mix the lighing into the texture sampling for some reason
[06:34:24] <kalven> who is the user?
[06:34:37] <smallville7123> the person that will use the api
[06:35:20] <kalven> what is this api for?
[06:35:31] <smallville7123> a VFX system
[06:35:50] <kalven> who's going to be using it?
[06:35:50] <hnOsmium0001[m]> rearchitecturing your shaders really don't cost that much time unless you get above thousands of lines
[06:36:29] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:36:43] <smallville7123> i guess i will just have to allow both
[06:38:02] <kalven> or not?
[06:38:55] <kalven> this doesn't really have anything to do with effects or whatever, but if you lack sufficient domain knowledge and try to build a framework or generalization, it's inveitably going to suck
[06:39:09] <smallville7123> as a valid case is where an effect such a blur must sample lighting data in order to blur the lighting, and then apply that over the original image
[06:40:32] <kalven> a good option in this case is to simply not write the framework or generalization.. write the smallest piece of code that gets the *actual task* done
[06:41:07] <kalven> and when you have solved a bunch of these tasks, you can go back and using what you've learned, refactor
[06:44:26] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:48:07] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[06:51:42] *** Joins: paule32_ (~paule32@user/paule32)
[06:53:51] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[06:54:15] <smallville7123> oh god https://www.khronos.org/opengl/wiki/Vertex_Texture_Fetch *ignores for sake of simplicity*
[06:54:21] *** Joins: paule32 (~paule32@user/paule32)
[06:55:23] *** Quits: paule32__ (~paule32@user/paule32) (Ping timeout: 252 seconds)
[06:56:37] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 240 seconds)
[06:57:09] *** Joins: paule32_ (~paule32@user/paule32)
[06:58:35] *** Joins: paule32__ (~paule32@user/paule32)
[07:00:13] *** Quits: paule32 (~paule32@user/paule32) (Ping timeout: 240 seconds)
[07:02:10] *** Quits: paule32_ (~paule32@user/paule32) (Ping timeout: 265 seconds)
[07:03:12] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[07:04:26] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[07:05:05] * smallville7123 is getting mixed reads online claiming VTF is good and VTF is bad/horrible
[07:10:39] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[07:11:16] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[07:12:44] <johnny> isn't there also prior art for such things?
[07:13:31] <johnny> seems like it'd be much easier to see if an already existing design would fit the bill
[07:15:06] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51)
[07:21:30] *** Quits: emerent (~quassel@p200300cd571a8375ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 265 seconds)
[07:21:32] *** Joins: emerent_ (~quassel@p200300cd5724fde6ba27ebfffed28a59.dip0.t-ipconnect.de)
[07:21:32] *** emerent_ is now known as emerent
[07:41:21] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:dcc8:ad1a:f19b:91b0) (Remote host closed the connection)
[07:54:21] *** Joins: Burgundy (~yomon@79.115.213.171)
[08:20:24] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:31:13] *** Quits: badone (~badone@209.132.189.136) (Quit: ZNC 1.7.5 - https://znc.in)
[08:32:37] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[08:34:10] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[08:34:29] *** Joins: frost (~frost@user/frost)
[08:34:47] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[08:34:54] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:35:15] *** Quits: DrMax (~DrMax@node-1w7jra94757g16d8fug0m91oa.ipv6.telus.net) (Ping timeout: 268 seconds)
[08:38:21] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (Remote host closed the connection)
[08:38:34] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[08:41:10] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[08:43:15] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[08:45:32] *** Quits: malloy (~jimery@116.30.223.163) (Ping timeout: 250 seconds)
[08:46:58] *** Joins: DrMax (~DrMax@node-1w7jra94757g13bsjcy4kedx7.ipv6.telus.net)
[08:47:30] *** Joins: malloy (~jimery@116.30.223.163)
[08:59:58] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:02:12] *** Joins: aleios (~aleios@user/aleios)
[09:02:23] *** Joins: szutt (~szutt@116.37.2.145)
[09:08:47] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[09:12:44] *** Quits: mike18_ (~geri@71-220-52-187.mpls.qwest.net) (Remote host closed the connection)
[09:39:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:24] *** ChanServ sets mode: +v npaperbot
[09:39:37] *** Joins: Itaru (~DaSH@ro2.flokinet.is)
[09:52:20] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:40b7:d4a2:46ea:b690)
[09:52:37] *** Quits: Itaru (~DaSH@ro2.flokinet.is) (Ping timeout: 240 seconds)
[10:06:16] *** Quits: aleios (~aleios@user/aleios) (Quit: WeeChat 3.3)
[10:07:06] *** Joins: txtsd (~txtsd@user/txtsd)
[10:08:58] *** Quits: ac_slater (~ac_slater@c-67-168-6-19.hsd1.wa.comcast.net) (Quit: WeeChat 3.3)
[10:14:19] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:98f7:51e9:4ec2:8af8)
[10:14:19] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:98f7:51e9:4ec2:8af8) (Changing host)
[10:14:19] *** Joins: skapata (~Skapata@user/skapata)
[10:31:03] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[10:37:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:40b7:d4a2:46ea:b690) (Quit: Quit)
[10:40:08] *** Joins: xkoncek3 (xkoncek@lounge.fi.muni.cz)
[10:41:16] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[10:41:19] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[10:41:21] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[10:41:52] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Ping timeout: 256 seconds)
[10:41:52] *** Quits: pinchartl (~laurent@perceval.ideasonboard.com) (Ping timeout: 256 seconds)
[10:41:52] *** xkoncek3 is now known as xkoncek
[10:42:07] *** Joins: pinchartl (~laurent@perceval.ideasonboard.com)
[10:42:26] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[10:42:45] *** Joins: frost (~frost@user/frost)
[10:43:03] *** Quits: cq-work (~Z_Lund@user/cq-work) (Ping timeout: 265 seconds)
[10:43:49] *** Joins: cq-work (~Z_Lund@user/cq-work)
[10:44:02] *** Joins: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[10:45:01] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[10:45:18] *** Joins: szutt (~szutt@116.37.2.145)
[10:49:55] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:49:56] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c:1ea2:b0b4:cf9b)
[10:56:08] *** Quits: malloy (~jimery@116.30.223.163) (Read error: Connection reset by peer)
[10:59:14] *** Quits: BluesBoy (~bboy@user/bluesboy) (Quit: leaving)
[11:00:56] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51)
[11:02:04] *** Joins: malloy (~jimery@116.30.222.36)
[11:03:13] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:03:59] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51) (Ping timeout: 252 seconds)
[11:08:03] *** Joins: BluesBoy (~bboy@user/bluesboy)
[11:14:19] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ec2b:d92a:1f2a:3057)
[11:19:47] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c:1ea2:b0b4:cf9b) (Ping timeout: 265 seconds)
[11:29:28] *** Joins: callq (~callq@2409:4062:2e11:38d:1999:c2e4:d3b8:8865)
[11:31:46] <callq> How do I compare two arrays (of different size) to each other to check how similar they are? I have a set of 1-dimensional data (A) and some function that returns another set (B). Now I need to quantify how close the A-set is to B.
[11:32:52] <TinoDidriksen> By what metric? Does the order of elements matter?
[11:34:45] <callq> No, but they'll be sorted.
[11:34:52] <TinoDidriksen> You could sort() and then https://en.cppreference.com/w/cpp/algorithm/set_difference them. But there's many measures of similarity, so need to really nail down what you're looking for first.
[11:35:22] <callq> If you were to put both sets on a number-line, and yet you only "see" one set - then that's 100% similar.
[11:36:05] <TinoDidriksen> So you require equality of elements. Ok, then yeah set_difference() can help you.
[11:37:04] <callq> Yes, now if I have [1.2,3] and [1,2, 2.5, 3]. an extra element would reduce the similarity score.
[11:37:18] <callq> But how? I don't know, that's up to the math-majors.
[11:39:20] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:41:07] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[11:54:33] *** Joins: gggp (~gggp@li870-78.members.linode.com)
[11:54:59] *** Quits: gggp (~gggp@li870-78.members.linode.com) (Client Quit)
[11:55:14] *** Joins: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6787)
[11:55:56] *** Joins: andreasbuhr (~quassel@p549db5b0.dip0.t-ipconnect.de)
[11:55:57] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:6787) (Client Quit)
[11:56:48] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (Quit: Lost terminal)
[11:59:30] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[12:05:06] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[12:07:26] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:08:37] *** Quits: Spirit532 (~Spirit532@mm-32-1-84-93.mgts.dynamic.pppoe.byfly.by) (Killed (NickServ (GHOST command used by Spirit5328!~Spirit532@mm-44-47-84-93.mgts.dynamic.pppoe.byfly.by)))
[12:08:38] *** Joins: Spirit532 (~Spirit532@mm-44-47-84-93.mgts.dynamic.pppoe.byfly.by)
[12:13:53] *** Joins: baltazar (~baltazar@188-143-71-34.pool.digikabel.hu)
[12:23:33] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 252 seconds)
[12:41:12] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[12:44:54] *** Joins: xkuru (~xkuru@user/xkuru)
[12:47:50] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[12:47:55] *** Joins: robod34 (Username@79.113.195.239)
[12:56:56] *** Quits: chozorho (~chozorho@2601:146:300:c30::88ba) (Quit: WeeChat 3.0)
[13:01:51] *** Joins: plastico (~plastico@neomutt/plastico)
[13:03:29] *** Quits: Cyp (~cyp@213.237.85.9) (Excess Flood)
[13:03:32] <manuels> mort
[13:03:36] <manuels> my eyes are bleeding
[13:03:54] <manuels> i dont get this Injector stuff > https://godbolt.org/z/d74hxc8Y3
[13:03:58] *** Joins: Cyp (~cyp@213.237.85.9)
[13:04:14] <manuels> but it looks sophisticated :D
[13:04:29] <manuels> can you explain how this dependencies work?
[13:04:59] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[13:05:23] <manuels> rather the Maker. I dont get the maker
[13:08:39] <mort> none of us understand the Maker, for He works in mysterious ways
[13:09:25] <mort> more seriously though, it's not really that relevant
[13:09:44] *** Joins: frost (~frost@user/frost)
[13:09:49] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[13:10:25] <mort> it's just a way to let you write `injector.make<Whatever>()` rather than `Whatever(dependencies)`
[13:11:19] <mort> I wouldn't do it myself in real code, it was mainly an exercise in getting the syntax to be more similar to the PHP example
[13:15:12] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[13:15:38] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[13:17:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[13:20:15] <mort> @manuels
[13:21:23] *** Quits: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi) (Ping timeout: 268 seconds)
[13:23:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:27:01] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[13:30:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au)
[13:39:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:22] *** ChanServ sets mode: +v npaperbot
[13:41:20] <smallville7123> if i have a state that can either be A, B_1, or B_2, how would i make an identifiable container that can be of either A, B* or both A and either B_1 or B_2, without compilating the existing states ?
[13:41:44] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[13:42:05] *** Joins: szutt (~szutt@116.37.2.145)
[13:44:58] *** Quits: xcm_ (~xcm@user/xcm) (Remote host closed the connection)
[13:45:15] *** Joins: xcm_ (~xcm@user/xcm)
[13:49:03] *** Joins: artok (~azo@mobile-access-5672c9-83.dhcp.inet.fi)
[13:55:18] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ec2b:d92a:1f2a:3057) (Quit: Quit)
[14:01:52] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:ccbc:7f44:61b5:929c)
[14:08:28] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:ccbc:7f44:61b5:929c) (Ping timeout: 265 seconds)
[14:09:50] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ace5:200c:c5d9:6afa)
[14:19:54] *** Quits: kbingham (~kbingham@core.do.nakedgeek.co.uk) (Quit: ZNC - http://znc.in)
[14:43:20] *** Joins: seninha (~seninha@user/seninha)
[14:54:37] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 252 seconds)
[15:06:35] <PJBoy> esoteric C++ of the day https://wandbox.org/permlink/CeX49arnvCCiqQql
[15:06:37] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[15:06:59] *** Joins: xkuru (~xkuru@user/xkuru)
[15:07:21] <PJBoy> `for (index_t i : 2_r < 9_r)` works like `for i in range(2, 9)`
[15:14:52] <ville> 10_r * 2_r, the second is the cadence?
[15:16:24] <ville> or rather step size i guess
[15:18:48] <PJBoy> indeed
[15:19:10] <PJBoy> strictly speaking I made multiplication commutative, and the lesser multiplicand is the step size
[15:19:24] <ville> well that starts to be kind of confusing
[15:19:37] <PJBoy> well you're never gonna have a step size greater than your range size
[15:19:58] <ville> i'd just make a different literal suffix for the step size
[15:20:13] <PJBoy> that's a significantly better idea
[15:20:15] <PJBoy> :D
[15:21:40] *** Joins: Simplar (~quassel@188.163.93.76)
[15:30:44] *** Quits: skapata (~Skapata@user/skapata) (Quit: Ĝis.)
[15:39:39] <ville> or to interpret range + literal and literal + range in fun way interpret the literal as the step size
[15:40:05] <ville> better yet overload operator << or >>
[15:41:20] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:52:38] *** Joins: bobb_ (~bobb_@dslb-092-074-247-064.092.074.pools.vodafone-ip.de)
[15:57:22] <PJBoy> nah that's awkward because they're directional operators
[15:57:36] *** Joins: aleios (~aleios@user/aleios)
[15:59:35] *** Joins: troller (~p@2a02:6b8:0:40c:58c5:b9fd:1f3:e871)
[16:03:05] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:05:25] <PJBoy> bah
[16:05:43] <PJBoy> what is the point in this "existing cache (remote)" configuration in visual studio
[16:06:08] <PJBoy> I can build via cmake over SSH, sure
[16:06:20] <PJBoy> but any changes I make to files don't actually get synced over
[16:22:45] *** Quits: callq (~callq@2409:4062:2e11:38d:1999:c2e4:d3b8:8865) (Quit: callq)
[16:24:18] *** Joins: immibis_ (~hexchat@62.156.144.218)
[16:27:45] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 252 seconds)
[16:31:33] <PJBoy> going back to the previous configuration with Linux-Clang-Debug, I do find that it works perfectly if you do the `cmake -G` manually on the linux machine
[16:31:45] <PJBoy> so it's purely the CMake configure that VS is fucking up
[16:37:30] *** Quits: immibis_ (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[16:38:11] *** Joins: immibis (~hexchat@62.156.144.218)
[16:41:57] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[16:44:18] *** Joins: teepee (~teepee@openscad/teepee)
[16:46:14] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:50:05] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:2340:2d6e:e3c5:77d7:6ce3)
[16:51:47] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:2340:2d6e:e3c5:77d7:6ce3) (Remote host closed the connection)
[16:52:15] *** Joins: NovumDXW (~NovumDXW@2409:8a28:3610:2340:2d6e:e3c5:77d7:6ce3)
[16:52:46] *** Joins: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290)
[16:53:39] *** Quits: NovumDXW (~NovumDXW@2409:8a28:3610:2340:2d6e:e3c5:77d7:6ce3) (Client Quit)
[16:55:43] *** Quits: baltazar (~baltazar@188-143-71-34.pool.digikabel.hu) (Quit: leaving)
[16:55:58] *** Joins: baltazar (~baltazar@188-143-71-34.pool.digikabel.hu)
[16:56:36] *** Quits: jwillikers (~jwilliker@2604:2800:2:a403:fe91:ac3e:5153:1290) (Remote host closed the connection)
[17:00:59] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[17:01:07] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[17:03:05] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[17:07:46] *** Joins: seninha (~seninha@user/seninha)
[17:12:47] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 256 seconds)
[17:15:26] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[17:16:26] <Haohmaru> !fact
[17:16:27] <nolyc> Haohmaru: The address of a destructor shall not be taken.
[17:16:31] <rpav> you might have a step size greater than your range size, because you took it as input
[17:16:50] <rpav> range literals seem of highly limited use and mostly gee-whiz
[17:16:51] *** Quits: smallville7123 (~smallvill@cpe-172-193-200-97.qld.foxtel.net.au) ()
[17:17:17] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:5801:f37:13f0:1699)
[17:17:46] <rpav> `from_to(from, to[, by])` or just `from(from[, by])` are useful all the time though, since usually your range is variable
[17:18:02] <rpav> and sometimes your step is variable
[17:25:37] <PJBoy> my stuff supports variables
[17:25:55] <PJBoy> via multiplication with 1_r
[17:27:14] *** Quits: aleios (~aleios@user/aleios) (Quit: WeeChat 3.3)
[17:27:23] <rpav> heh
[17:27:45] <rpav> that's one way to write it, but
[17:27:50] <rpav> not sure how clear
[17:28:03] <PJBoy> oh being clear is most certainly not the aim here :)
[17:29:01] <rpav> yeah it's definitely now making me think "how much other stuff could we do by multiplying by weird unit/function types" (and not the 'function operator' *stuff* from befor)
[17:30:17] <PJBoy> one day you'll make me regret my C++ show-and-tell
[17:30:59] <rpav> only if it stops being fun/creative ;)
[17:31:13] <rpav> err
[17:31:18] <rpav> misread that, but yeah
[17:32:08] <rpav> `"string" * "en"_lang` or `"string" * 1_fd` (stdout) but those seem a bit dull
[17:33:05] <PJBoy> so we now have functions as binary operators and UDLs as unary operators
[17:33:15] <rpav> true
[17:33:52] <rpav> C*
[17:34:16] <PJBoy> although functions could still be used for unary operators anyway tbf
[17:34:42] <rpav> yeah but `x * foo` or `x *foo` doesn't have quite the same feel
[17:35:45] <PJBoy> plus you get to provide a parameter to that function without function call syntax
[17:39:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:24] *** ChanServ sets mode: +v npaperbot
[18:06:12] *** Joins: Burgundy (~yomon@79.115.213.171)
[18:09:40] <PJBoy> dude I cannot get this visual studio linux cmake integration working
[18:09:44] <PJBoy> I'm gonna have to give up on it
[18:10:17] <rpav> linux? o.O
[18:10:19] <PJBoy> these stupid -fno-limit-debug-info flags insertions are completely undocumented and seemingly non-configurable
[18:10:47] <PJBoy> the only way I can get this to work is to set everything up, and then go run cmake -G on linux manually
[18:10:50] <rpav> VS runs on linux now or is this like, WSL bs
[18:10:52] <PJBoy> and that just sucks
[18:11:04] <PJBoy> VS talking to linux over SSH + rysnc
[18:11:17] <rpav> weird
[18:11:36] <PJBoy> it would work pretty well if it weren't for this issue
[18:12:27] <PJBoy> I tried adding a `string(REPLACE "-fno-limit-debug-info" "" "CFLAGS" "${CFLAGS}")` to the main CMakeLists.txt
[18:12:32] <PJBoy> but to no avail
[18:12:56] <PJBoy> ditto CXXFLAGS
[18:16:08] *** Joins: furrymcgee (~devuan@cgn-89-1-209-182.nc.de)
[18:16:15] *** Joins: tonitch (~tonitch@user/tonitch)
[18:16:29] <tonitch> Hey, I'm not a pro in cpp but I tried to use socket under linux and I can't get my head around something... I can't receive, here is a gist (next msg) and the command variable is never filled... this is a test so, there is a lot of messes I know but maybe you can get me to the right track ?
[18:16:37] <tonitch> https://gist.github.com/tonitch/62235ffd9eb070025f1ba9ffe819c067
[18:24:31] <BluesBoy> tonitch: line 42 command instead of &command
[18:24:33] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[18:26:24] *** Joins: pulse (~pulse@user/pulse)
[18:26:30] <PJBoy> well spotted
[18:26:34] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[18:27:20] <PJBoy> also string comparison with a string literal
[18:27:29] <PJBoy> line 45
[18:27:43] <PJBoy> should be strncmp or using std::string
[18:28:11] <tonitch> ho shoot, I gave you the latest version but I tried with std::string right before and it didn't worked either
[18:28:18] *** Joins: meator (~meator@user/meator)
[18:29:07] *** Quits: grep_xtrange (~x@ac255238.ppp.asahi-net.or.jp) (Ping timeout: 252 seconds)
[18:29:12] <tonitch> imagine the same program with std::string instead of char ^^
[18:29:16] <tonitch> but it still doesn't work tho
[18:31:19] *** Joins: gehn (~gehn@user/gehn)
[18:31:41] <PJBoy> what's the behaviour?
[18:31:48] <PJBoy> no output at all?
[18:33:05] <tonitch> basicly, I can connect with telnet, I receive a thing if I put a send (like hello world or so) and when I try to send anything with telnet, command stay empty... I can't cout it or compare it or anythin
[18:36:33] <BluesBoy> tonitch: i changed line 42 to recv(new_fd, command, 1024, 0); and line 45 to if(strncmp(command, "ping", 4) == 0) { and it works
[18:37:21] <tonitch> gotta try
[18:38:26] <tonitch> nice it seems to work... so I asume my error was to try using string instead of char ? x)
[18:39:22] <PJBoy> I assume recv doesn't null terminate
[18:39:37] <PJBoy> so there's a good chance you constructed the string improperly
[18:40:06] <tonitch> yhea right... so I can just convert to string or keep using char for the rest of my program I asume ?! :D
[18:40:15] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[18:40:50] <PJBoy> the string comparison version should look like `if (std::string(command, 4) == "ping")`
[18:41:46] <PJBoy> speaking of null termination, does `send` not need to include the null terminator in its length argument?
[18:42:02] *** Quits: frost (~frost@user/frost) (Ping timeout: 265 seconds)
[18:42:09] <PJBoy> I presume not
[18:42:45] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:42:55] <tonitch> well it works without... maybe it's a good idea to do so ^^
[18:43:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:2835:2428:a8d4:1d95)
[18:44:00] *** Joins: Deneb (~johnch@30.125.7.51.dyn.plus.net)
[18:44:12] <PJBoy> I dunno
[18:44:23] <PJBoy> it depends what the receiver of the message you're sending expects
[18:44:35] <PJBoy> so if it works, it's probably how it should be already
[18:50:27] <tonitch> I guess telnet is just tolerant... I'm starting to understand why my test client didn't worked either
[18:54:23] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[18:54:43] *** Joins: meator (~meator@user/meator)
[18:57:58] *** Quits: furrymcgee (~devuan@cgn-89-1-209-182.nc.de) (Quit: leaving)
[19:03:18] <imMute> send/recv works with buffers, not c strings.  so no null termination
[19:03:40] <imMute> (unless the protocol you're speaking includes null terminated messages)
[19:04:28] <imMute> you can use the ptr+size ctor of std::string if you want to stick the data in that.  I think most people use vector<char> though
[19:09:49] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ace5:200c:c5d9:6afa) (Quit: Quit)
[19:10:32] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[19:11:16] <cart_man> Has anybody ever experienced a Bus Error running strlen() on a const char *txt = "111"; for example
[19:11:54] <imMute> cart_man: seems highly suspect.
[19:13:02] <cart_man> imMute: Hmmm ... like?
[19:13:34] <imMute> cart_man: like I'd question if your pointer is actually pointing at that string
[19:14:02] <imMute> Bus errors typically only come from accessing mmap'd MMIO devices in my experience.  technically they could come from accessing RAM, but you'd have major hardware issues at that point
[19:14:24] <cart_man> imMute: But isn't wiritng const char * txt = "something"; fine in C/C++ for a delimited c like string?
[19:15:00] <imMute> yeah, that's the way to do it.
[19:15:15] <cart_man> imMute: Well there is a MMAP in the mix for sure... It was opened just before I try and take the STRLEN of this var. At this point they are completely unrelated though
[19:15:33] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[19:15:40] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:16:10] <Alipha> PJBoy: yeah, my initial reaction is that 9_r * 2_r is confusing. But otherwise I think it's cool. 9_r * 2_step.
[19:18:18] <Alipha> tonitch: if(std::string_view(command) == "ping")
[19:19:59] <PJBoy> still need the 4
[19:20:09] <PJBoy> if we can't assume the string is null terminated
[19:22:09] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 265 seconds)
[19:24:27] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:26:02] <cart_man> imMute: Ok turns out that error was indeed MMAP related and not the strlen() that came right after it : /
[19:26:19] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[19:26:26] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[19:26:46] *** Joins: szutt (~szutt@116.37.2.145)
[19:31:28] *** Joins: magla (~gelignite@55d403aa.access.ecotel.net)
[19:34:06] *** magla is now known as jellyknight
[19:36:58] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[19:48:25] *** Parts: freakazoid343 (~matt@2603:9000:cf0f:80e3:4530:ee19:2379:ed51) (Leaving)
[19:52:15] <SuperNintendoSUX> converting to a string view to just perform a string comparison later is ugly as hell
[19:53:48] <rpav> `std::string_view cmd = "something";` is fine too
[19:54:01] <rpav> you don't need to _convert later_, you should start there
[19:55:00] <rpav> and starting there is nicer for const strings anyway since you don't need to do significant construction
[19:58:13] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 252 seconds)
[20:04:21] *** Quits: Simplar (~quassel@188.163.93.76) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[20:10:08] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[20:10:37] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[20:15:49] *** Quits: gehn (~gehn@user/gehn) (Ping timeout: 240 seconds)
[20:18:32] *** Joins: CoderCharmander (~CoderChar@20014C4C12563000F11692CFE14EEDDA.catv.pool.telekom.hu)
[20:18:58] <amosbird> Hello! What's the right way to format a timepoint as 20150113_12_09_53?
[20:19:27] *** Joins: gareppa (~gareppa@user/gareppa)
[20:22:47] <ville> "timepoint" being what exactly?
[20:23:19] <amosbird> e.g. std::chrono::system_clock::now()
[20:24:17] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:24:45] <ville> in generar i start off with std::time()->std::localtime()->std::strftime(). c++20 might have included something more user-friendly
[20:24:47] <hnOsmium0001[m]> using std::format (c++20) or converting it to a time_t and then using one of the C formatting functions like snprintf()
[20:25:10] <ville> err the use of -> bit unfortunate there...
[20:25:43] <hnOsmium0001[m]> actually it should be what ville said, sorry for misremembering
[20:25:55] <Raziel> there's also https://en.cppreference.com/w/cpp/chrono/c/tm and manually format, and std::put_time
[20:26:06] <amosbird> Cool, thanks
[20:26:44] <Raziel> but yeah it's mostly C stuff v:
[20:29:22] <Raziel> the cpp20 stuff would be https://en.cppreference.com/w/cpp/chrono/hh_mm_ss and https://en.cppreference.com/w/cpp/chrono/year_month_day
[20:29:26] <Raziel> who the fuck made these?
[20:29:36] <Raziel> how bloody drunk were they?
[20:29:39] <Raziel> this is awful.
[20:29:40] <Raziel> >_>
[20:33:18] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:38:57] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (Ping timeout: 250 seconds)
[20:40:39] <rpav> tangentially, it's annoying operator->() has to return a pointer, and doesn't get to return a lifetime-extended reference
[20:43:06] <InPhase> rpav: operator<<()
[20:43:16] <rpav> doesn't help
[20:43:46] <InPhase> Should work.
[20:43:46] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[20:43:56] <rpav> -> lets you automatically reference a member of the incoming struct, which would give you some nice toys, e.g. properties
[20:44:51] <rpav> but returning a pointer, you can't return a temp that you can then reference, and gets destructed at the end of the statement
[20:45:04] <rpav> and no other operator really applies here
[20:46:59] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:5801:f37:13f0:1699) (Quit: Leaving)
[20:50:27] <SuperNintendoSUX> Raziel: what's wrong with these classes?
[20:51:51] <Raziel> I don't even know what the point is. there's many of them for individual combinations of days/months/years, and getting them out of a time_point seems too unwieldy
[20:51:54] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[20:52:03] <Raziel> and then the hour/minute/second one doesn't even work on time_points, it works on durations
[20:52:14] <rpav> can we turn back the clock on chrono
[20:52:39] <Raziel> actually I guess all of em only work on durations
[20:52:53] <Raziel> since the example shows using it with floor to days
[20:53:09] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:53:53] <rpav> the real question is, since time_point is basically defined as a duration from a clock's epoch, why it is not also a duration
[20:54:06] <rpav> or why it exists in the first place
[20:54:37] <Raziel> that would pretty much solve the issue of the weird-ass overly obtuse usages I guess
[20:54:42] <InPhase> rpav: I have a class I explicitly designed to hold objects temporarily in lifetime and implicitly cast to a pointer relating to what's held.  But alas, it's incompatible with -> because of the spec.  A different syntactic choice is required.
[20:54:58] *** Quits: szutt (~szutt@116.37.2.145) (Quit: Client closed)
[20:55:01] <rpav> it'd be like, let's make a new vec2, that's defined as a vector from some space's origin (which obviously they already are), including the space's origin, but make them not vectors
[20:55:43] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:55:56] <rpav> InPhase: that sounds like it works for your case but what i want is the syntax ;/
[20:56:00] <Raziel> call it relative_vec2 for maximum wtf
[20:56:54] <SuperNintendoSUX> I see no trouble with these chrono classes. they are well defined
[20:56:57] <InPhase> rpav: My motivating use case was adding support for those goofy Windows API wide strings into a string object without adding storage for wide string copies.
[20:57:15] <Raziel> I can't say they're not well-defined, that's not really the problem
[20:57:49] <Raziel> the problem is their usage doesn't seem to match the way people would actually want to use time points and parsing that to/from strings
[20:58:08] <rpav> InPhase: yeah what i want is foo-> to return a value, so it can construct an object with a bunch of Properties which are initialized with `&foo`, so you can do like, `foo->prop = 42`; and call like setProp() without actually spending extra storage
[20:58:27] <InPhase> rpav: Hence, returning an object with a wstring inside, but it pretends it's a pointer when presented with a function call asking for one.
[20:58:31] <rpav> or `foo.setProp(42);` that is
[20:59:14] <rpav> InPhase: seems like it makes some sense but i'm not super familiar with win32
[21:00:36] *** Quits: bobb_ (~bobb_@dslb-092-074-247-064.092.074.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[21:00:41] <rpav> template operators when
[21:00:53] <rpav> auto z = x *<int> y;
[21:01:20] <Raziel> type types when
[21:01:24] <rpav> template-parameter-operator _syntax_ i should say
[21:01:33] <rpav> Raziel: meta types! all the way up!
[21:01:41] <Raziel> auto t = int; auto z = x *<t.get()> y;
[21:01:44] <Raziel> beautiful
[21:02:03] <Raziel> finally some good fucking meta-food
[21:02:04] <Raziel> :p
[21:02:46] <rpav> actually you can sortof do that now i think
[21:03:25] <Raziel> can you? I mean you can map type_indexes to stuff and then use that, but, that's also rtti rather than static/compile-time
[21:07:05] *** Joins: gehn (~gehn@user/gehn)
[21:07:36] <rpav> https://godbolt.org/z/f1hP13sMj <- a bit fugly
[21:08:01] <rpav> but having a struct that makes a "type value" can be useful for a number of things
[21:08:43] <Raziel> that doesn't look like a bad basis for it, yeah
[21:08:48] <rpav> e.g. you can pass it as a literal to a function, to avoid some x.template foo<...>(...)
[21:08:55] <rpav> x.foo(..., type<int>);
[21:09:47] <rpav> of course you can store, iterate, and manipulate entire parameter packs for profit and shenanigans too
[21:10:21] <Raziel> indeed. this could make some of my silly meta-maps nicer, perhaps. :p
[21:17:46] <Raziel> rpav, https://godbolt.org/z/Poqhh8bPT why does it croak when trying something like this?
[21:20:23] <kalven> Raziel: need a const on line 9
[21:20:29] <kalven> T the_type() const;
[21:20:55] <Raziel> o. that makes sense.
[21:21:20] <Raziel> also, the using type = T; in the struct seems a bit pointless?
[21:22:27] <PJBoy> would save you having to do decltype of the function call
[21:22:30] <Raziel> unless I'm missing something, but removing it seems to work just as well
[21:22:38] <Raziel> ah
[21:22:44] *** Quits: troller (~p@2a02:6b8:0:40c:58c5:b9fd:1f3:e871) (Ping timeout: 252 seconds)
[21:22:58] <Raziel> but how? :p
[21:23:41] <PJBoy> `foo<decltype(intType)::type>('a');`
[21:24:46] <Raziel> oh, still gotta do decltype but you can do it like that instead of on the function, I see
[21:25:08] <PJBoy> more generally it can be useful to have member type aliases like that
[21:25:14] <PJBoy> can use them for SFINAE or whatever
[21:25:18] <Raziel> hmmm
[21:25:30] <PJBoy> saves you from having to make the_type() const qualified too
[21:25:33] *** Quits: cursey (~cursey@user/cursey) (Quit: bye)
[21:25:55] <PJBoy> https://godbolt.org/z/K5hqfz1eM
[21:27:53] *** Joins: cursey (~cursey@user/cursey)
[21:28:04] <Raziel> so, unlike say, typeid, decltype is not rtti?
[21:28:17] <PJBoy> indeed
[21:28:27] <Raziel> fuuuun
[21:30:00] <PJBoy> also decltype returns a type and typeid returns an object
[21:31:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:4c95:39cf:567e:8e81)
[21:31:37] <Raziel> right. so the biggest "issue" is that there's no real way to store a type proper, except for something like what we did here
[21:31:51] <Raziel> sounds like it wouldn't even be that much work to make a polite object for it in std then v:
[21:32:48] <PJBoy> you can do various things like make a std::tuple<T>
[21:32:56] <PJBoy> std::tuple<decltype(expr)>
[21:33:14] <PJBoy> what does it really mean to store a type
[21:34:32] <Raziel> I suppose that's up for debate. I guess, for starters, something that simplifies the syntax and lets you do things without explicitly using decltype? like auto x = int; std::vector<x> v; x i = 2; v.push_back(i); stuff like that?
[21:34:51] <Raziel> I suppose instead of directly using x in those cases, it could be x.get or x.type or something :p
[21:35:01] <Raziel> since I can see how that might be problematic
[21:35:04] <PJBoy> so `using x = int;`
[21:35:45] <Raziel> right. except also able to pass it around. like an object. :p
[21:35:59] <Raziel> and, yknow, static/compile-time, unlike a type_index
[21:36:02] <PJBoy> pass it around and use it how?
[21:36:25] <PJBoy> you can pass types as template parameters, or you can pass a tuple<T>() object that the other side tuple_element_t's
[21:36:32] <Raziel> I suppose in a similar way to how you'd use templates now, to some extent
[21:37:10] <PJBoy> you can even leverage auto return type functions and decltype those
[21:37:19] <PJBoy> depending on what the metaprogramming calls for
[21:37:58] <Raziel> right. why is it that I haven't really seen this more, before? these capabilities don't seem to be all that new, it seems to mostly be c++11 stuff, no?
[21:38:13] <PJBoy> because people avoid unnecessary metaprogramming
[21:38:32] <PJBoy> if you go look at boost hana source code, it's probably full of this stuff
[21:38:41] <Raziel> faiiiiir
[21:39:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:21] <PJBoy> and you can do a lot with just the basics
[21:39:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:23] *** ChanServ sets mode: +v npaperbot
[21:39:48] <Raziel> I guess I wouldn't be so surprised if when I googled C++ metaprogramming or "how to store and pass types around" I'd get something like this instead of... absolute spaghetti macros or such. :p
[21:40:32] <PJBoy> the idea of storing a type and doing something with it is quite vague
[21:40:45] <Raziel> true
[21:40:51] <PJBoy> it really depends on what your goal is, metaprogramming is pretty situational
[21:41:20] <PJBoy> trying to think if I've done any stupid metaprogramming recently
[21:42:04] <Raziel> I've mapped quite a few enums and their relevant maps across different namespaces
[21:42:06] <Raziel> lol.
[21:43:05] <Raziel> it's stupid, but it's less duplicate code than having another fucking overload for every one of them, so, I'm pretty happy with that one
[21:43:32] <PJBoy> I tell you what though
[21:43:47] <PJBoy> I learnt recently that my trick for writing post-increment etc. is stupid and wrong
[21:43:57] <Raziel> which one's that
[21:44:24] <PJBoy> I was writing `It operator++(int) { return std::exchange(*this, ++*this); }`
[21:44:56] <PJBoy> exchange being a function that returns its first argument, and assigns the second argument to the first
[21:45:20] <PJBoy> so the idea was to return the current *this and set *this to ++*this
[21:45:42] <Raziel> right
[21:45:59] <PJBoy> it's well defined behaviour, but it's always wrong
[21:46:09] <PJBoy> see if you can figure out why!
[21:46:27] <Raziel> it always increments before you can do anything with the returned thing?
[21:48:13] <Raziel> also, with this way of storing types, how would you actually shove em in a container? you obviously can't do vector<type> because type needs to be templated. and if you do any you're back to having to map them manually for the any_cast.
[21:48:23] <Alipha> It operator++(int) { return std::exchange(*this, *this + 1); }
[21:48:34] <Alipha> though it's dumb to write ++ in terms of + :-)
[21:48:43] <PJBoy> yup
[21:49:02] <PJBoy> the first argument is taken by reference, and I must have thought it worked by value
[21:49:09] *** Quits: DrMax_ (~DrMax@132.215.96.36) (Ping timeout: 250 seconds)
[21:49:16] <PJBoy> which is clearly wrong, because then the assignment of the seconds argument to the first wouldn't work
[21:49:32] <Raziel> o, fun
[21:49:40] <PJBoy> so my new way of writing this is `It operator++(int) { return std::exchange(*this, ++It(*this)); }`
[21:49:49] <Alipha> Raziel: what are you trying to accomplish with "storing types in a vector"? types are compile-time and vector is (primarily) runtime
[21:49:55] <PJBoy> which can be spelt `It operator++(int) { return std::exchange(*this, ++auto(*this)); }` in C++23
[21:49:56] <rpav> oh yeah since you need decltype(), having the_type() is useless anyway; i'm half asleep today what can i say
[21:50:52] <Alipha> PJBoy: why not be a normal person and write It operator++(int) { auto ret(*this); ++*this; return ret; }
[21:51:48] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[21:51:49] <PJBoy> because then I have to make a temporary
[21:52:08] <PJBoy> and it's just not as cool, ok
[21:52:46] <Raziel> rpav, I guess I'm having trouble seeing how to properly work with something like that in a decently dynamic way, since any container or function that wants a type also needs to template it
[21:53:02] <rpav> Raziel: dynamic is a separate thing entirely
[21:53:18] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[21:54:14] <rpav> well, in that if you expect to make a vector<dynamic_type> it's not really possible in general
[21:54:21] <PJBoy> plus doesn't RVO kick in for the exchange version?
[21:54:34] <rpav> if you have `auto x = type<int>;`, x is still a _value_
[21:54:43] <PJBoy> the *this object could get copied directly into the caller's scope
[21:55:15] <Alipha> PJBoy: NRVO is very likely to happen for my version
[21:55:23] <PJBoy> that's not likely enough
[21:56:32] <PJBoy> although I imagine NRVO will get guaranteed soon enough
[22:00:47] <Alipha> PJBoy: you'd rather go with the non-guarantee that std::exchange gets inlined than the non-guarantee of NRVO?
[22:01:36] <Alipha> https://godbolt.org/z/vc1f73PzY
[22:01:59] <PJBoy> exchange will definitely get inlined because it's a template
[22:02:14] <Alipha> take off -O1 and my code is shorter ;-)
[22:02:20] <PJBoy> yeah I know
[22:03:09] <PJBoy> I find it weird that it inlines operator++ in your version on -O0
[22:03:22] <PJBoy> oh
[22:03:26] <PJBoy> I didn't scroll down far enough
[22:04:59] <Raziel> rpav, fair enuff. I'll probably stick to my silly maps of type_index for now :p
[22:05:46] <kalven> what are you actually using that for?
[22:07:07] <Raziel> weird paradigms in which similar things from across namespaces/scoped enums should be usable together by other things.
[22:08:28] <rpav> well what are you _doing_ .. type_index isn't going to help more or less
[22:09:06] <Raziel> rpav, https://godbolt.org/z/1K3En14Pj stuff like this. except my enums aren't usually mapped to ints, they're mapped to more specific things :p
[22:09:35] <Raziel> but int makes a half-decent example for how it works without needing extra bs so
[22:09:38] <rpav> like you can certainly make a type thing much like CTTI where you have a type_base, and you can specify dynamically a type<T> and that lets you make a vector<T> .. for some set of precompiled T
[22:10:05] <rpav> Raziel: yeah, if that's all you want you can certainly do the same
[22:11:06] <rpav> i actually need to make something vaguely similar soon that has a bunch of metadata and lets you query/create classes by name and query/call members by name etc, though i think i'm going to co-opt c2ffi to generate reflection data
[22:11:37] <Raziel> some of this would be avoidable if I'd use strings as keys more, instead of enums. but I like the static safe(r) typing of enums, in code.
[22:13:44] *** Quits: tesuji (~quassel@2a02:908:180:9500:9509:881b:6bdf:4d85) (Ping timeout: 265 seconds)
[22:19:27] <kalven> Raziel: https://godbolt.org/z/1nssG1Eb1 - just an example
[22:19:51] *** Joins: troller (~p@80.240.216.69)
[22:22:35] <Raziel> kalven, so in that case, every extra enum + map pair would add an extra if in there, instead of an extra entry in the type_index map. I do wonder how pros/cons of those two approaches look like. the asm is quite a bit smaller at least :p
[22:23:29] <kalven> the mapping from enum type to map can be done in various way. I just chose something that would be localized in the function
[22:26:29] <Raziel> hmmmmm
[22:26:48] *** Quits: troller (~p@80.240.216.69) (Ping timeout: 256 seconds)
[22:27:07] <kalven> here's a way using overloading: https://godbolt.org/z/8GKvaGGzd
[22:27:32] <kalven> note that for that one you'll get a compile error if the enum type hasn't been mapped (which, depending on things might be what you want anyway)
[22:31:40] <SuperNintendoSUX> static dispatching ftw
[22:37:56] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:40:22] *** Joins: troller (~p@2a02:6b8:b081:8815::1:29)
[22:42:17] *** Quits: Hello72 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[22:43:00] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[22:48:54] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[22:53:26] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Ping timeout: 256 seconds)
[22:53:42] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:00:23] <rpav> Raziel: one thing you can do is use enums with string name sets, and if you need to look up by name, convert a string to the enum
[23:00:26] <rpav> or the other way i guess
[23:01:14] <rpav> i think i did strings, because i didn't need much enum-to-type lookup, as most of the lookup was done from loaded strings
[23:01:17] <ashafq> Is there a "scoped mutex" lock in C++?
[23:01:46] <ashafq> https://en.cppreference.com/w/cpp/thread/scoped_lock sorry sorry, I should've googled
[23:04:04] <cart_man> Should I be weary of creating three very lighweight threads per class I instantiate of some object? What is the downside of spawning to much many threads?
[23:06:09] *** Joins: imi (~imi@catv-89-132-115-236.catv.broadband.hu)
[23:07:05] <Alipha> ashafq: sadly, i actually suggest https://en.cppreference.com/w/cpp/thread/lock_guard instead, if you're locking only one mutex at a time because lock_guard won't fall prey to "the most vexing parse"
[23:07:25] <Alipha> geordi: -w { std::scoped_lock(m); } std::mutex m;  // do you see what's wrong?
[23:07:26] <geordi>  
[23:07:51] <Alipha> { std::lock_guard(m); } std::mutex m;  // vs this.
[23:07:52] <geordi> error: class template argument deduction failed: (fix known)
[23:08:03] <Alipha> { std::lock_guard<std::mutex>(m); } std::mutex m;  // or this
[23:08:03] <geordi> error: no matching function for call to 'lock_guard<mutex>::lock_guard()' (fix known)
[23:08:22] <Alipha> !vex
[23:08:23] <nolyc> T x(); and T y(U(z)); declare functions named x and y, the latter with a parameter named z. Also, T(a); declares a variable called a.
[23:14:42] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[23:15:07] <cart_man> Anybody on my stupid thread question :*( ?
[23:18:42] <Alipha> cart_man: how many total threads are we talking about? threads do use additional memory and there's performance loss in that there's overhead switching between threads
[23:18:45] <ashafq> cart_man: I am afraid of threads :)
[23:19:28] <Alipha> cart_man: and there's no performance gain if you have more threads than cpu cores.
[23:20:03] <Alipha> depending upon your situation, a thread pool may be useful
[23:21:02] <cart_man> Alipha: But what does a thread pool do differently from just having three threads?
[23:21:55] <cart_man> Alipha: So the three threads will be very lightweight but unfortunately I need them for parrallel effect they offer
[23:24:09] <Alipha> cart_man: well, with a thread pool, you wouldn't be creating threads necessarily, but "tasks" (e.g., putting lambdas on a queue). if you have a thread pool that allows up to, say, 8 threads, then it'll pop 8 tasks off the queue and not start any additional tasks until one of those 8 are done. once a task is done, the next task is popped off the queue and given to that thread
[23:26:19] <Alipha> what's this "parallel effect" you're referring to?
[23:29:45] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:31:04] *** Quits: Deneb (~johnch@30.125.7.51.dyn.plus.net) (Quit: Leaving)
[23:32:27] <cart_man> Alipha: Ok I see that is quite good reasoning and it seems like a no brainer generally. I have written a number cruncher a while ago that was built like that. BUT What if I wanted INOTIFY in one thread that when it gets a Notification it UNPauses another thread.
[23:33:25] <cart_man> So problem here is that I dont think I notify can be ran effectively in a thread pool?
[23:33:50] *** Quits: andreasbuhr (~quassel@p549db5b0.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:35:41] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:35:46] <Alipha> no, because you don't know if the task you're trying to notify is even running yet. ... unless you made a custom thread pool that would know that each triple of tasks need to be run at the same time
[23:35:59] *** Joins: chozorho (~chozorho@2601:146:300:c30::f5f4)
[23:37:05] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:37:22] <Alipha> i suppose you'd have a main task which when executed would then spawn the 2 additional threads
[23:37:45] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:38:37] <Raziel> rpav, I'll probably have to do that when I want this kind of data to also be loadable from arbitrary files on runtime rather than being all const header stuff in the project :p
[23:38:56] <rpav> Raziel: yea .. but one problem at a time right?
[23:39:03] <Raziel> indeed
[23:39:10] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:39:18] <Raziel> structurally this is still a lot better for that than it was before. better separation of data and logic
[23:41:10] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Read error: Connection reset by peer)
[23:44:20] *** Joins: meator (~meator@user/meator)
[23:46:07] <cart_man> Alipha: Thanks for the input
[23:48:18] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[23:50:37] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 240 seconds)
[23:55:11] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a076:5dc9:a674:c827)
[23:55:48] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[23:55:48] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[23:55:50] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[23:55:50] *** Joins: Roughy (~mdaw45ns@user/roughy)
[23:59:09] *** Joins: Flonk7 (~Flonk@vps-zap441517-1.zap-srv.com)
[23:59:10] *** Joins: meator (~meator@user/meator)
