[00:00:24] <seebs> with the intent being to produce a structure which has vectors of things, and maps of things, and so on, which corresponds to the structure
[00:00:42] <Para> Ah, right, yeah.
[00:00:44] <seebs> so basically, i want the equivalent of (1) gunzip the input stream (2) be able to read sequentially from it, as binary rather than as text.
[00:01:21] <Para> Sounds sensible.
[00:01:27] <seebs> but things like .getInt are conveniently available for ByteBuffer and not for array-of-byte or for GZIPInputStream. So! Dump into ByteArrayOutputStream, convert to array, wrap array as buffer.
[00:01:35] <ridcully_> i would not expect with-open to work like let when it comes to not ".close" relevant things?
[00:01:45] <ToxicFrog> Oh right
[00:01:52] <seebs> ohhh. ohhhh.
[00:02:03] <seebs> it's trying to *close* the things after it's done, and not all of them are closable.
[00:02:40] <seebs> specifically, it can't close the nil.
[00:02:50] <ridcully_> this will roughly work like the try-with-resource from java.  e.g. try open/finally close
[00:03:36] <seebs> I'm actually not even sure this is right now, because it may be that i want to be sure to close the underlying io/input-stream, and i'm not sure that closing the GZIPInputStream wrapping it does that?
[00:04:34] <Para> Decorators of inputstreams simply call the nested implementations so the calls do propagate through, in reverse definition order IIRC
[00:06:06] <Para> It's too late for this. I just quote my self from day or two ago, IO in Java is still somehow a mess.
[00:08:52] <seebs> yeah
[00:09:19] <seebs> honestly i've been pretty tired and grumpy for... a little over two and a half weeks now come to think of it.
[00:09:20] <seebs> very mysterious.
[00:09:48] <ridcully_> is it due to java io? ;)
[00:10:16] <seebs> oddly, no! in fact, it is because of something worse. or at least something i currently believe is worse. i'm not totally willing to commit to that until i have more experience with java io.
[00:11:14] <ridcully_> it also appears, that we are living in interesting times.  takes it's toll, i guess
[00:12:27] <seebs> yeah
[00:14:11] <Para> Yea, there's a reason why my company's now running internal mental support groups.
[00:17:57] *** Quits: uncleyear (~ian@178.176.77.39) (Remote host closed the connection)
[00:18:51] <seebs> yeah. good idea. hang in there, we might still make it!
[00:18:58] *** Joins: uncleyear (~ian@178.176.77.39)
[00:23:10] <Para> seebs: you could maybe try https://github.com/yonatane/bytegeist
[00:23:29] <Para> As in do something totally different for a bit.
[00:23:50] <seebs> huh, interesting.
[00:23:51] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:24:16] <seebs> i think for now i'll just write a reader that reads things roughly the way i did it last time (in a different language) in order to mostly just get familiar-ish with tools, etc.
[00:28:28] <aphyr> seebs: another thing that might come in handy for doing this kind of coercion is https://github.com/clj-commons/byte-streams
[00:28:46] <aphyr> you can just say "look I've got an input stream, give me a bytearray" and it figures it out
[00:29:47] <seebs> that seems handy, yes
[00:41:01] *** Quits: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net) (Remote host closed the connection)
[00:47:49] *** Quits: Ilyu (~quassel@166.215.82.79.rev.sfr.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:56:37] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[00:57:02] *** Quits: yewscion (~yewscion@72-21-196-67.amazon.com) (Ping timeout: 260 seconds)
[01:10:58] *** Joins: ltriant (~ltriant@194-223-10-27.tpgi.com.au)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:19:48] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:21:18] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 260 seconds)
[01:43:35] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[01:47:02] *** Quits: uncleyear (~ian@178.176.77.39) (Ping timeout: 240 seconds)
[01:57:51] *** Quits: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com) (Quit: Client closed)
[02:16:15] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:16:28] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[02:20:00] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com)
[02:20:42] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 252 seconds)
[02:22:11] *** Joins: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net)
[02:23:42] *** Parts: TonyStone (~TonyStone@2603-7080-8607-c36a-0034-44e7-d0a8-40e0.res6.spectrum.com) ()
[02:31:58] *** Quits: daemonises (uid545329@id-545329.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[02:32:40] *** Quits: austb_ (~austb@c-73-240-245-80.hsd1.or.comcast.net) (Ping timeout: 250 seconds)
[03:08:26] <seebs> huh. if i try to call a function from another function, the first one has to have been defined. so... forward declarations?
[03:08:36] <seebs> not sure i'm expressing my confusion here well
[03:10:00] <ToxicFrog> seebs: https://clojuredocs.org/clojure.core/declare
[03:13:08] <seebs> ... it is possible i did not look at the docs very successfully
[03:13:40] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[03:13:49] <seebs> today's other adventure, trying to type-hint ^byte and being told that's not supported. well, fair.
[03:14:14] <hiredman> it is compilcated
[03:15:24] <hiredman> ^byte isn't supported for primitive functions (only longs or doubles and only functions with arity of something like 4)
[03:15:58] <hiredman> and when you type hint a function parameter with a primitive type, the compiler assumes you are trying to make a primitive function
[03:16:20] <hiredman> ^byte is perfectly fine elsewhere
[03:17:43] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Remote host closed the connection)
[03:18:29] *** Joins: atw (~user@ool-18bf5678.dyn.optonline.net)
[03:18:43] <seebs> ... that seems complex to track, but i guess that sort of makes sense? i'm still trying to figure out how best to do this.
[03:19:12] <ToxicFrog> This sounds like something you want a struct-unpacking library for, tbh
[03:19:23] <ToxicFrog> If you were doing this in lua I'd even have a recommendation for you~
[03:20:35] <hiredman> primitive functions can be problematic for forward declarations as well, because the calling convention (so to speak) is different, so if you forward declare usages compiled before the definition is compiled will likely be compiled with the normal calling convention
[03:20:59] <hiredman> which will work with primitive functions, but will box and unbox, which pressumably you are trying to avoid when defining primitive functions
[03:24:04] <seebs> if i were trying to get this done, i'd be using a struct-unpacking library, but i'm trying to learn how it works, so i'm doing it by hand to learn things.
[03:25:11] <ToxicFrog> Aah, fair
[03:30:43] *** Joins: eddof13 (~eddof13@192.154.196.154)
[03:32:25] *** Quits: theruran (uid11305@id-11305.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[03:34:22] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[03:54:40] *** Joins: boogiepop (~boogiepop@S01066c55e885c6e1.cg.shawcable.net)
[04:03:13] *** Quits: eddof13 (~eddof13@192.154.196.154) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:03:52] <seebs> okay, so, say i have a thing, like ByteBuffer, which has methods i could call. like i can do (.getInt stream).
[04:04:44] <seebs> and i want a function that will call a provided method on it, so i want to do something like a function taking [n f stream] and doing something like (repeatedly n #(f stream)), only i've probably spelled that wrong.
[04:05:11] <seebs> but if i try to pass .getInt to that, I get "Unable to resolve symbol .getInt in this context" which is fair, so, is there an idiom here?
[04:07:38] <ToxicFrog> You probably need to pass it as #(.getInt %), although I'm not sure what the reflection implications are of that
[04:08:34] <seebs> well, that got me further. :P
[04:08:34] <seebs> (defn load-int-array
[04:08:35] <seebs> 	  	[^ByteBuffer stream]
[04:08:35] <seebs> 	  	(load-nbt-array .getInt stream))
[04:08:39] <seebs> er wrong paste buffer
[04:08:44] <seebs> Syntax error (IllegalArgumentException) compiling at (/tmp/form-init10857259551421438846.clj:1:74).
[04:08:44] <seebs> No matching clause: 36
[04:09:39] <seebs> unfortunately, i have no clue how to make sense of the given line/file.
[04:10:40] <ToxicFrog> That's, uh, spicy
[04:10:45] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[04:10:57] <ToxicFrog> What's the actual code?
[04:11:14] <seebs> unfortunately, this is one of those things where the nature of the input makes it a mess to simplify
[04:11:46] <seebs> https://gist.github.com/seebs/3ed6435e7563fb669699730f044be1db <-- so this is long, but i actually have no idea even where in it to look for the compile error
[04:12:05] <seebs> i'm aware this is probably bad and unidiomatic, i'm trying to get it running-at-all to then start examining it.
[04:12:49] <ToxicFrog> "no matching clause: 36" sounds like it could plausibly be an error with the `condp`
[04:13:08] <seebs> it does!
[04:13:21] <seebs> and 36 would be a plausible character value, i suspect, to encounter if i screwed a thing up.
[04:13:42] <seebs> ahh, yes.
[04:13:56] <ToxicFrog> I have no idea why you're not getting a proper stack trace though, that error message implies that it was trying to evaluate the condp at compile time
[04:14:19] <seebs> added (prn "oops" type) to the end, and: "oops" 36
[04:14:20] <seebs> Syntax error (NullPointerException) compiling at (/tmp/form-init2675603483781043399.clj:1:73).
[04:14:20] <seebs> Cannot invoke "clojure.lang.IFn.invoke(Object)"
[04:14:40] <seebs> oh wait that makes sense, because i invoke whatever i return there
[04:14:44] <seebs> ohh that's why
[04:14:51] <seebs> because i'm doing ((condp ...) foo)
[04:15:01] <seebs> so if it didn't return a valid thing everything asplode
[04:15:08] <seebs> ... "asplode" is a technical term here
[04:15:46] <ToxicFrog> 'splodey
[04:29:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:36:20] <seebs> d'oh. (repeatedly) is lazy
[04:41:48] <seebs> Syntax error (BufferUnderflowException) compiling at (/tmp/form-init13436530138391572624.clj:1:74).
[04:43:51] <ToxicFrog> This really sounds like your operational code is being executed at compile time, not runtime
[04:43:53] <ToxicFrog> Which means the "syntax error" part is meaningless and it's the stack trace that's where the actual meat will be
[04:44:22] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[04:45:26] <seebs> yeah
[04:45:45] <seebs> well, so. i have a thing that comes out to (repeatedly n read-from-stream)
[04:46:21] <seebs> and what's gone wrong is of course that this is lazy, so it returns the not-yet-evaluated sequence, and then the next thing after that tries to read, and instead gets the bytes that the (repeatedly) would have eaten if it had done anything.
[04:46:35] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 240 seconds)
[04:46:57] <seebs> and it looks like maybe (doall) should fix that, except in fact it does not, it gets that weird syntax error.
[04:46:59] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[04:48:21] <seebs> and yeah, the stack trace really does look like it's actually evaluating the code during the compile and that's wacky.
[04:48:35] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[04:50:06] *** Joins: selfsymmetric-mu (~matt@c-73-29-248-41.hsd1.nj.comcast.net)
[04:52:50] <seebs> ... and the answer is, that fixed the one i was looking at but didn't fix the *other* place i called repeatedly. much is explained.
[04:54:26] <seebs> and now it seems to be working yay.
[04:57:11] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[05:11:24] *** Quits: jeaye (~jeaye@user/jeaye) (Ping timeout: 272 seconds)
[05:12:41] <ToxicFrog> \o/
[05:16:02] *** Joins: jeaye (~jeaye@user/jeaye)
[05:16:11] *** Quits: mattroelle (~Matt_Roel@funbox.mattroelle.com) (Ping timeout: 245 seconds)
[05:17:19] *** Joins: mattroelle (~Matt_Roel@funbox.mattroelle.com)
[05:20:18] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:33:33] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[05:34:41] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[05:35:10] *** Quits: DasBrain (DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_!~DasBrain@user/dasbrain)))
[05:35:16] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[05:46:41] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-a0f7-4a6c-9396-dfff.res6.spectrum.com)
[06:04:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:18:00] *** Quits: DasBrain_ (~DasBrain@user/dasbrain) (Ping timeout: 250 seconds)
[06:42:32] *** Joins: mbuf (~Shakthi@27.58.140.82)
[06:48:32] *** Joins: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com)
[07:04:34] *** Joins: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com)
[07:05:21] *** Quits: ltriant (~ltriant@194-223-10-27.tpgi.com.au) (Ping timeout: 245 seconds)
[07:20:39] *** Quits: vats (~vats@103.16.30.211) (Ping timeout: 256 seconds)
[07:22:34] *** Joins: irontom (~user@37.19.221.165)
[07:23:56] *** Quits: mzan (~quassel@mail.asterisell.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[07:25:01] *** Joins: mzan (~quassel@mail.asterisell.com)
[07:31:27] *** Quits: irontom (~user@37.19.221.165) (Ping timeout: 252 seconds)
[07:36:57] *** Quits: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com) (Ping timeout: 252 seconds)
[07:39:03] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[07:53:31] *** Quits: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com) (Ping timeout: 256 seconds)
[07:54:38] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:a4f7:3458:36c4:ffd7) (Ping timeout: 250 seconds)
[07:56:32] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:e51b:ac6b:af96:5d6c)
[08:01:49] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[08:02:02] *** Joins: lunik1 (~lunik1@37.205.14.203)
[08:10:00] *** Quits: RedNifre (~RedNifre@dslb-002-206-059-242.002.206.pools.vodafone-ip.de) (Ping timeout: 272 seconds)
[08:13:02] *** Joins: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[08:22:43] *** Joins: RedNifre (~RedNifre@dslb-002-206-059-093.002.206.pools.vodafone-ip.de)
[08:23:11] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[08:28:21] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Remote host closed the connection)
[08:47:04] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 250 seconds)
[08:48:37] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 240 seconds)
[08:50:29] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[08:59:38] *** Quits: mbuf (~Shakthi@27.58.140.82) (Quit: Leaving)
[09:14:24] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Remote host closed the connection)
[09:14:43] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[09:19:01] *** Quits: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[09:19:04] *** Joins: puchka (~marius@165.73.241.21)
[09:22:49] *** Joins: Iacob1 (~Thunderbi@117.11.88.253)
[09:23:39] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[09:23:39] *** Iacob1 is now known as Iacob
[09:25:44] *** Joins: tomku (~tomku@user/tomku)
[09:26:52] *** Joins: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net)
[09:29:26] *** Joins: vats (~vats@103.16.30.101)
[09:39:48] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 240 seconds)
[09:41:29] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[09:52:40] *** Joins: Iacob1 (~Thunderbi@117.11.88.253)
[09:54:26] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[09:54:26] *** Iacob1 is now known as Iacob
[09:58:14] *** Joins: uncleyear (~ian@178.176.77.39)
[10:01:03] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 252 seconds)
[10:01:42] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[10:07:20] *** Quits: shiranaihito (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[10:39:18] *** Quits: tomku (~tomku@user/tomku) (Ping timeout: 250 seconds)
[10:44:57] *** Joins: shiranaihito (~textual@111-249-210-215.dynamic-ip.hinet.net)
[10:51:34] *** Joins: struchu (~struchu@62.87.192.114)
[10:52:35] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 256 seconds)
[10:52:53] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[11:26:23] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Remote host closed the connection)
[11:29:32] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[11:31:04] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:35:04] *** Quits: shiranaihito (~textual@111-249-210-215.dynamic-ip.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[11:46:01] *** Joins: tomku (~tomku@user/tomku)
[11:50:34] *** Joins: shiranaihito (~textual@125-228-188-231.hinet-ip.hinet.net)
[11:52:11] *** Joins: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com)
[11:57:19] *** Joins: zmt01 (~zmt00@user/zmt00)
[11:58:12] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[12:07:23] *** Quits: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:14:27] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.4)
[12:19:50] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[12:25:09] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[12:33:53] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Ping timeout: 250 seconds)
[12:34:35] *** Joins: Iacob (~Thunderbi@117.11.88.253)
[12:36:51] *** Joins: drbobbeaty (~drbob@c-24-14-127-107.hsd1.il.comcast.net)
[12:45:17] *** Joins: mbuf (~Shakthi@122.174.246.23)
[12:51:01] *** Quits: KSuyno (~KSuyno@cpe-76-188-109-80.neo.res.rr.com) (Ping timeout: 256 seconds)
[12:54:28] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[12:59:39] *** Joins: Major_Biscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl)
[13:01:00] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:13:42] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[13:18:48] *** Quits: Iacob (~Thunderbi@117.11.88.253) (Quit: Iacob)
[13:23:58] *** Quits: puchka (~marius@165.73.241.21) (Ping timeout: 250 seconds)
[13:25:48] *** Joins: puchka (~marius@165.73.241.21)
[14:16:55] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[14:20:14] *** Joins: rwv (~user@rwv.connected.by.freedominter.net)
[14:25:05] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[14:27:36] *** Quits: rwv (~user@rwv.connected.by.freedominter.net) (Quit: ERC (IRC client for Emacs 27.2))
[14:36:50] *** Joins: vats (~vats@103.16.30.101)
[14:37:13] *** Joins: yewscion (~yewscion@52.94.133.131)
[14:56:28] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[14:58:26] *** Quits: puchka (~marius@165.73.241.21) (Ping timeout: 250 seconds)
[14:58:41] *** Joins: puchka (~marius@165.73.240.116)
[15:03:33] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[15:14:23] *** Quits: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz) (Ping timeout: 256 seconds)
[15:20:29] *** Joins: v88m (~Xiro@213.87.156.72)
[15:24:59] *** Quits: v88m (~Xiro@213.87.156.72) (Ping timeout: 252 seconds)
[15:52:36] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[15:52:51] *** Joins: lunik1 (~lunik1@37.205.14.203)
[15:59:44] *** Joins: Xylon (~joseph@mail.xylon.me.uk)
[16:00:18] <Xylon> hi all
[16:00:33] <Xylon> why can't I use an anonymous function with (-> )
[16:01:55] <Xylon> I tried like (-> 5 square #(+ 3 %)) and I also tried (-> 5 square (fn [num] (+ num 3)))
[16:07:39] *** Quits: ltriant_ (~ltriant@ec2-13-211-134-196.ap-southeast-2.compute.amazonaws.com) (Ping timeout: 256 seconds)
[16:07:49] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[16:08:04] *** Joins: lunik1 (~lunik1@37.205.14.203)
[16:15:03] *** Joins: zmt00 (~zmt00@user/zmt00)
[16:26:20] <ToxicFrog> -> is a macro that rearranges things at the syntactic level, so it's worth taking a look at what those actually result in:
[16:26:22] <ToxicFrog> user=> (macroexpand-1 '(-> 5 square #(+ 3 %)))
[16:26:24] <ToxicFrog> (fn* (square 5) [p1__2631#] (+ 3 p1__2631#))
[16:27:04] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[16:27:19] <ToxicFrog> Actually I think it's more readable with (fn):
[16:27:26] <ToxicFrog> user=> (macroexpand-1 '(-> 5 square (fn [n] (+ n 3))))
[16:27:27] <ToxicFrog> (fn (square 5) [n] (+ n 3))
[16:27:42] *** Joins: kaisyu (uid37155@id-37155.ilkley.irccloud.com)
[16:27:59] <ToxicFrog> So, the `5 square` turns into (square 5), as expected, and then that gets spliced into the (fn), resulting in an invalid fn definition
[16:29:02] <ToxicFrog> You can double-wrap the fn, so that rather than splicing it into the interior of the fn definition, you get a list where the fn definition in its entirety is the first element and the (square 5) is the second, which is valid:
[16:29:04] <ToxicFrog> user=> (macroexpand-1 '(-> 5 square ((fn [n] (+ n 3)))))
[16:29:06] <ToxicFrog> ((fn [n] (+ n 3)) (square 5))
[16:29:12] <ToxicFrog> But that is, imo, pretty gross
[16:30:01] <ToxicFrog> It's also not clear to me what you're actually trying to do here; if you just want to add three, that's (-> 5 square (+ 3))
[16:30:33] <ToxicFrog> And in general I'm having trouble thinking of a situation where putting an anonymous function into -> or its cousins is actually useful
[16:30:35] <ToxicFrog> Xylon: ^
[16:31:10] *** Quits: atw (~user@ool-18bf5678.dyn.optonline.net) (Ping timeout: 250 seconds)
[16:34:31] <seebs> i wonder whether you could make it work with as->, which is structured quite differently
[16:35:06] <ToxicFrog> Maybe, depending on what the goal is
[16:35:52] <ToxicFrog> user=> (macroexpand-1 '(as-> 5 $ (square $) (fn [n] (+ n 3 $))))
[16:35:54] <ToxicFrog> (clojure.core/let [$ 5 $ (square $)] (fn [n] (+ n 3 $)))
[16:35:58] <ToxicFrog> Looks plausible to me.
[16:37:35] <seebs> user=> (as-> 5 $ (square $) (fn [n] (+ n 3 $)))
[16:37:35] <seebs> #object[user$eval138$fn__139 0x5432050b "user$eval138$fn__139@5432050b"]
[16:48:19] *** Joins: v88m (~Xiro@213.87.145.233)
[16:50:13] *** Quits: puchka (~marius@165.73.240.116) (Ping timeout: 240 seconds)
[16:55:44] <Xylon> Thanks ToxicFrog. I was just experimenting.
[16:56:44] *** Quits: son0p (~ff@181.136.122.143) (Remote host closed the connection)
[16:56:55] <Xylon> I think I see what's happening now. fascinating
[16:56:56] <seebs> i'm actually unable to get this to do what i want it to do.
[16:57:03] <seebs> oh, i see why
[16:57:38] <seebs> (as-> 5 v (square v) (#(+ v 3)))
[16:57:47] <seebs> note the extra () on the #() in this case
[17:02:14] <ToxicFrog> Yeah. But that's just a really convoluted way of writing (as-> 5 v (square v) (+ v 3))
[17:02:48] <ToxicFrog> AFAICT the only place anonymous functions are useful in -> is when you want the -> as a whole to evaluate to an anonymous function, and in that case you're better off putting the -> inside the function
[17:02:56] <ToxicFrog> E.g. this: (as-> 5 $ (square $) (fn [n] (+ n 3 $)))
[17:03:31] <ToxicFrog> Is just a more convoluted way of writing this: (fn [n] (+ n 3 (square 5)))
[17:04:13] <Xylon> yep
[17:04:25] <seebs> hmm. yeah, in the as-> case you can generally just write the call you want
[17:13:04] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[17:13:17] *** Joins: lunik1 (~lunik1@37.205.14.203)
[17:17:41] <Para> I'd encourage you to not use anonymous functions, there's nothing bad in lots of small functions. You can use letfn if you care about top-level namespace pollution or whatever :)
[17:18:08] <Para> inlined functions tend to get out of hand a bit too easily; this applies to map, reduce, filter etc. as well
[17:19:29] *** Joins: vats (~vats@103.16.30.101)
[17:21:09] <ToxicFrog> That too.
[17:26:50] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[17:27:05] *** Joins: lunik1 (~lunik1@37.205.14.203)
[17:30:06] *** Quits: lunik1 (~lunik1@37.205.14.203) (Client Quit)
[17:30:16] *** Joins: lunik1 (~lunik1@37.205.14.203)
[17:32:42] *** Joins: puchka (~marius@165.73.240.180)
[17:35:44] *** Joins: patrice (~patrice@user/patrice)
[17:37:31] *** Quits: puchka (~marius@165.73.240.180) (Ping timeout: 256 seconds)
[17:39:11] *** Joins: puchka (~marius@165.73.240.61)
[17:43:00] *** Quits: v88m (~Xiro@213.87.145.233) (Ping timeout: 240 seconds)
[17:43:11] *** Joins: v88m (~Xiro@213.87.148.180)
[17:43:17] *** Quits: puchka (~marius@165.73.240.61) (Read error: Connection reset by peer)
[17:43:48] *** Quits: lunik1 (~lunik1@37.205.14.203) (Quit: Ping timeout (120 seconds))
[17:44:06] *** Joins: lunik1 (~lunik1@37.205.14.203)
[17:51:41] *** Quits: yewscion (~yewscion@52.94.133.131) (Ping timeout: 256 seconds)
[17:52:05] *** Joins: son0p (~ff@181.136.122.143)
[17:59:31] *** Joins: puchka (~marius@165.73.242.53)
[18:01:33] *** Quits: v88m (~Xiro@213.87.148.180) (Ping timeout: 256 seconds)
[18:02:04] *** Joins: v88m (~Xiro@213.87.89.72)
[18:09:52] *** Quits: patrice (~patrice@user/patrice) (Quit: Leaving)
[18:33:07] *** Quits: lunik1 (~lunik1@37.205.14.203) (Remote host closed the connection)
[18:35:30] <Xylon> OK thanks Para
[18:37:24] *** Quits: kaisyu (uid37155@id-37155.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[18:50:27] *** Joins: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw)
[18:50:48] *** Joins: yewscion (~yewscion@52.94.133.131)
[18:51:35] *** Quits: struchu (~struchu@62.87.192.114) (Quit: WeeChat 3.3)
[18:52:53] *** Quits: shiranaihito (~textual@125-228-188-231.hinet-ip.hinet.net) (Ping timeout: 252 seconds)
[18:56:15] *** Joins: lunik1 (~lunik1@37.205.14.203)
[18:57:47] *** Joins: seschwar (~seschwar@user/seschwar)
[19:02:35] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[19:05:16] *** Joins: eddof13 (~eddof13@192.154.196.149)
[19:11:34] <rovanion> Is your emacs capable of jumping to symbols with > in them?
[19:11:44] <rovanion> Because mine doesn't and its breaking my flow, yao.
[19:17:36] *** Joins: jayemar (~user@static-96-234-151-26.bltmmd.fios.verizon.net)
[19:30:42] <rovanion> I was about to ask "what determines the order in which columns are returned from from a 'select * from x' next.jdbc query. But then I thought about it and realized that some queries are were returned in the same order they are in the table while others weren't. The final clue was that a list of rows from the db is represented as a list of maps, and the tables with few columns worked as expected.
[19:30:44] <rovanion> Eight! Eight is the limit at which a clojure map turns from an array to a more advanced datastructure, above eight pairs and order is no longer retained.
[19:31:59] <seebs> ohhh. i thought there was map and sorted-map. but i didn't think about the ordering for small maps.
[19:38:19] <Para> There's some quite specific optimizations as well, eg. single item vectors and such.
[19:44:46] <technomancy> do MapEntry s count?
[19:44:52] <technomancy> two-item vector-ish
[19:45:07] <seebs> hmm
[19:46:15] <seebs> so i'm parsing a thing, and on input, it has "list of [arbitrary type]" objects, and it also has "array of int" and "array of byte" and things like that. and both of those come out to the same effect, like, an array-of-int and a list-of-int are both just N ints
[19:46:36] <seebs> but i want to distinguish them in some way, because it matters which one i have if i want to re-serialize it
[19:47:32] <seebs> and in a statically-typed language, i'd be using typed objects and possibly wrapping them in some way in other things, but in a dynamically-typed language, i'm not sure how to idiomatically express this.
[19:47:45] <technomancy> list/vector?
[19:49:49] <seebs> they're both *actually* vectors, as in, "length explicitly given in advance"
[19:50:11] <seebs> and "would want random access"
[19:51:05] <technomancy> huh, what type is this in which "list" implies random access? =)
[19:51:05] <seebs> also, getting ahead of myself a bit: if i have nested data structures, but everything's immutable, a thing that would otherwise be a "modification" is going to be one replacement of a thing with a different thing per level-of-nesting, yes?
[19:51:13] <technomancy> well, you can attach metadata for that distinction then
[19:51:25] <seebs> i would probably violate some number of codes of conduct if i expressed all of my opinions about the NBT data structures
[19:52:16] <seebs> it has arrays for byte/int/long and maybe one other thing, and it has a generic "list" which is a type byte followed by exactly what you'd get for an array of that type if "array of that" existed
[19:52:51] <seebs> so like, type 3 is int, type 11 is int-array, type 9 is list. a type 9 starting with 0x03 is then followed by something identical to the contents of a type 11.
[19:55:36] *** Quits: v88m (~Xiro@213.87.89.72) (Ping timeout: 252 seconds)
[19:56:12] *** Joins: v88m (~Xiro@213.87.131.182)
[19:56:13] *** Quits: yewscion (~yewscion@52.94.133.131) (Quit: Connection closed)
[20:00:53] *** Quits: v88m (~Xiro@213.87.131.182) (Ping timeout: 256 seconds)
[20:01:30] *** Joins: v88m (~Xiro@213.87.144.17)
[20:09:27] *** Quits: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[20:09:44] *** Joins: henry40408 (~henry4040@123-204-9-134.dynamic.seed.net.tw)
[20:14:31] *** Quits: v88m (~Xiro@213.87.144.17) (Ping timeout: 245 seconds)
[20:15:08] *** Joins: v88m (~Xiro@213.87.151.49)
[20:30:55] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[20:31:41] *** Joins: yewscion (~yewscion@52.94.133.129)
[20:34:11] *** Quits: samuelbernardo (~samuelber@nata02.lip.pt) (Ping timeout: 272 seconds)
[20:44:05] *** Joins: samuelbernardo (~samuelber@nata01.lip.pt)
[20:51:12] <ridcully_> seebs: there is structural sharing in the immutable datatypes.  so yes, somethings and maybe a bit more modified under the hood.  but most of the things are shared
[20:51:35] <ridcully_> and for the data things you could also keep track if what is read in e.g. some map of :type and :data
[20:52:11] <ridcully_> last years AOC had a day where some "binary" files similar to what you are describing here, had to be parsed
[20:52:56] <ridcully_> i guess you could look for some inspiration there too, since many repos e.g. on github are tagged with aoc-2021-clj or similar names
[20:56:35] *** Quits: Major_Biscuit (~MajorBisc@c-001-021-050.client.tudelft.eduvpn.nl) (Quit: WeeChat 3.4)
[21:05:53] <seebs> so, like, if i had a map with values which were maps, and i did an assoc to update one of the inner ones, i'd then have to do an assoc on the containing map to replace the reference there, etc.
[21:07:59] <Para> seebs: there's assoc-in and update-in for nested manipulation
[21:09:20] <seebs> ooh.
[21:09:42] <Para> and also get-in, of course
[21:09:46] <seebs> can that handle nesting that includes lists/vectors?
[21:10:16] <seebs> i'm sort of thinking i may need Actual Fancy Datatypes at some point because i probably want parent-pointers, maybe? but i'm not sure.
[21:10:21] <Para> For vectors, yes, since vectors are associative but that downside is that they're associative based on index so you better be careful about ordering :)
[21:11:41] <seebs> so, i could do something like (update-in toplevel "foo" 3 "bar") and that would get me the lookup of "bar" in index 3 of the lookup of "foo" in toplevel?
[21:11:44] <technomancy> when I said "metadata" above I wasn't just meaning generically; I mean you want to use a specific Clojure feature to represent the difference in your decoded values
[21:11:57] <technomancy> seebs: https://clojure.org/reference/metadata
[21:12:10] <seebs> yeah, i was thinking about metadata but wasn't sure whether it was cost-effective
[21:12:24] <Para> seebs: the third argument is a vector; see https://clojuredocs.org/clojure.core/update-in
[21:12:26] <seebs> if i can easily tag a thing with "is a list" or "is an array" that's probably sufficient
[21:12:46] <seebs> okay, but ["foo" 3 "bar"] would Do What I Mean in a map-containing-vector-containing-map?
[21:13:05] <ridcully_> yes
[21:13:08] <seebs> cool
[21:13:32] <seebs> what's the idiom, if any, for handling not-found or missing things? exceptions, error checks, Just Return Nil, etc?
[21:13:40] * technomancy sighs deeply
[21:13:42] <technomancy> yeah it's just nil
[21:14:23] <technomancy> unfortunately it's not super consistent as nil means about five or six distinct things in clojure
[21:14:37] <ridcully_> the get-ish functions also have a "fallback" last argument.  e.g. you can do (get {} :lol ::not-found)
[21:14:39] <Para> Yeah, there's some even surprisingly popular libraries which don't do that.
[21:14:49] <Para> clj-http comes to mind right off the bat.
[21:15:28] <ridcully_> which might be useful, if you have legit nil values
[21:16:54] <Para> also just because... (->> [0 1 2] (get-in [[:a [:d :e :f]] [:b] [:c]]))
[21:18:00] <Para> Although by forcing that dumbness got a thought, would be nice to have the ability to use functions instead of static lookup values for the *-in functions
[21:18:38] <Para> `[first rest last]` reads a lot better
[21:19:02] *** Quits: eddof13 (~eddof13@192.154.196.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:19:07] <ridcully_> then you are basically in specter land
[21:19:20] <Para> I suppose so :)
[21:19:37] <Para> I think the tiniest light bulb just blinked in my mind.
[21:20:30] <ridcully_> also close to some->
[21:20:32] <technomancy> that's just regular arrow innit?
[21:21:04] *** Quits: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com) (Ping timeout: 250 seconds)
[21:21:10] *** Quits: puchka (~marius@165.73.242.53) (Quit: leaving)
[21:21:50] <Para> It wouldn't return the full structure at the end though.
[21:22:01] *** Joins: v3ga (~v3ga@cpe-98-25-21-91.sc.res.rr.com)
[21:22:15] <Para> I mean for get-in it's equivalent, but for update-in/assoc-in not so.
[21:22:16] <ToxicFrog> Yeah, some-> works for get-in but not update-in/assoc-in
[21:23:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[21:23:37] <ridcully_> so back to specter ;)
[21:24:12] <Para> zippers could probably used like that as well but I don't think I've really ever seen anyone use 'em, don't know why :)
[21:30:17] <ridcully_> last thing i saw em about was in rewrite-clj - but i have not yet used it.  pondered about some generic bb+rewrite-clj code modifications...
[21:33:24] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Quit: ERC (IRC client for Emacs 26.3))
[21:38:08] *** Quits: op2 (~op2@user/op2) (Ping timeout: 272 seconds)
[21:38:27] *** Quits: v88m (~Xiro@213.87.151.49) (Ping timeout: 252 seconds)
[21:43:29] *** Quits: mbuf (~Shakthi@122.174.246.23) (Quit: Leaving)
[21:55:59] *** jjhoo_ is now known as jjhoo
[22:03:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:06:58] *** Quits: jayemar (~user@static-96-234-151-26.bltmmd.fios.verizon.net) (Quit: ERC 5.4.1 (IRC client for GNU Emacs 29.0.50))
[22:12:21] *** Joins: op2 (~op2@user/op2)
[22:16:56] *** Quits: vats (~vats@103.16.30.101) (Ping timeout: 252 seconds)
[22:20:03] *** jackhill_ is now known as jackhill
[22:32:14] *** Joins: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru)
[22:45:06] *** Quits: v88m (~Xiro@109-252-170-8.dynamic.spd-mgts.ru) (Remote host closed the connection)
[23:08:40] *** Joins: libertyprime (~libertypr@118-92-82-225.dsl.dyn.ihug.co.nz)
[23:10:22] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[23:12:26] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[23:18:11] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:36:35] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:58:35] *** Quits: jespada (~jespada@cpc121022-nmal24-2-0-cust171.19-2.cable.virginm.net) (Quit: Textual IRC Client: www.textualapp.com)
[23:58:41] *** Quits: yewscion (~yewscion@52.94.133.129) (Ping timeout: 252 seconds)
