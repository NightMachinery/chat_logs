[00:00:14] <ms7821> and docker
[00:00:15] <Peng> I don't remember doing this, but I generated some 16384-bit SSH moduli. https://mattnordhoff.net/moduli/
[00:00:20] <Peng> I don't think I ever configured sshd to use them.
[00:03:53] <int-e> ms7821: But wsl2 is windows 11 (10 too? I don't think so...) which is 64 bit only, not a 32 bit windows :P
[00:04:15] <ms7821> oh sorry, missed that
[00:04:18] <ms7821> virtualbox then, I guess
[00:04:29] <int-e> it's okay, I'm supressing the urge to ask why :P
[00:05:06] <int-e> Maybe I should ask how you generate and verify a 16k-bit prime on such a machine instead.
[00:05:53] <ms7821> I assume it's Windows 7 or something too
[00:08:14] <maroon> thanks Peng, until your link the only safe primes larger than 8192 that ive seen were at this link which is where i got the 16k safe prime: http://www.sandelman.ottawa.on.ca/ipsec/2003/03/msg00156.html
[00:25:29] *** Joins: machinedgod (~machinedg@24.105.81.50)
[00:31:58] *** Joins: aleck (~aleck@user/aleck)
[00:32:14] <maroon> peng, i've not yet figured out how to decompress .lrz, but does 10mb mean you created several thousand of these 16k safes?
[00:34:25] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:36:46] <Peng> maroon: lrzip
[00:37:07] <Peng> You don't need it though
[00:37:14] <int-e> I guess we could just look here instead: https://github.com/openssh/openssh-portable/blob/379b30120da53d7c84aa8299c26b18c51c2a0dac/dh.c#L175 uses `getline`... it used to do `fgets` with a fixed size buffer.
[00:38:00] <Peng> The .candidates files are only useful for generating the final results
[00:38:01] <int-e> (an older version is cited here: https://security.stackexchange.com/questions/173806/limit-on-modulus-lines-in-openssh-etc-ssh-moduli-file )
[00:38:17] <Peng> And the final results are the 6 lines in https://mattnordhoff.net/moduli/moduli-16384-a -b and -d
[00:39:25] <Peng> I don't know why ssh-keygen has a two stage process that generates a 12 GB file
[00:39:38] <Peng> and then whittles it down to 24 KB
[00:40:03] <maroon> ah thanks Peng this shows something that i've been wondering about how ffdh safe primes are created. openssl makes a big point about creating them randomly, but it looks like SSH is creating these sequentially, where only the last few dozen bits change?
[00:40:35] <maroon> it seems to me that it doesnt really matter if the bits of a safe prime are random since the modulus is made public
[00:42:29] <maroon> im guessing the candidates is maybe the p=primes found, and the final result is just those where q was also prime
[00:42:36] <Peng> The ssh-keygen man page says, "By default, the search for primes begins at a random point in the desired length range."
[00:45:20] <Peng> It says the "candidate primes" are tested for "suitability" with a primality test.
[00:45:39] <Peng> Maybe the first stage generates 12 GB of sequential odd numbers and the second stage checks which ones are prime?
[00:51:20] *** Joins: semisimple (~semisimpl@user/semisimple)
[00:51:58] <maroon> the last hex digit of safe primes is equally distributed between 3/7/b/f, but none of these 6 had the final digit being 7 or b, which looks like a (2/4)^6 = 1/64 chance of this happening
[01:00:22] <semisimple> Does anyone know a good way to estimate how close a given block cipher is to a "true" pseudorandom permutation? Suppose I have different constructions for block ciphers and want to find out empirically which one is the best. So I am sort of looking for quality metrics, where I can do some Monte Carlo simulation on these different constructions.  
[01:00:57] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:01:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:02:36] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[01:02:39] *** Quits: wolfshappen (~waff@irc.furworks.de) (Ping timeout: 272 seconds)
[01:03:19] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 256 seconds)
[01:03:37] <semisimple> So I already found this (https://en.wikipedia.org/wiki/Random_permutation_statistics), which gives some useful statistics to calculate, but I guess it is not focused on a crypto context. E.g. I was considering analysing the distribution of pairs (i,p(i)), for i=1,...,n and where p is a permutation...
[01:03:54] <maroon> semisimple, is this a construction you're creating? or you're trying to evaluate already-created symmetric ciphers like AES?
[01:04:55] *** Joins: cwebber (~user@user/cwebber)
[01:04:57] <semisimple> maroon: It is for evaluating something I have created, but I imagine it does not really matter what you want to evaluate
[01:05:04] <int-e> Peng: the first stage just sieves, testing small prime factors (up to 2^30) for both p and q.
[01:06:09] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:06:25] <maroon> they do a sieve of trial divisions for primes that large? openssl has shrunk the size of their trial divisions, and they no longer even test using all the 2048 primes in their primes table
[01:06:37] <int-e> but that doesn't explain the staging... maybe the idea was to run it on a big machine for the initial phase and then do the checking in parallel on smaller ones? "big" for the 90s, maybe.
[01:07:12] *** Quits: moose (~moose@user/moose) (Quit: Hopping)
[01:07:21] <int-e> maroon: it's not trial division, it's the sieve of Erathostenes. It rules out many non-primes quickly.
[01:08:32] <int-e> (That said, I don't know what a good cut-off is; 2^30 may be too large indeed.)
[01:08:34] *** Quits: gabriel1_ (~gabriel1@37.166.189.211) (Remote host closed the connection)
[01:08:54] <int-e> Hmm. Let me think...
[01:09:33] *** Joins: moose (~moose@user/moose)
[01:09:42] <maroon> semisimple, it does matter if the solution is whether you can adapt your construction to a smaller 32-bit scale. because when testing at smaller bit lengths, blemishes in non-crypto hashes can be detected with pract-rand: https://www.pcg-random.org/posts/bob-jenkins-small-prng-passes-practrand.html
[01:09:48] <int-e> the primes in range [2^29,2^30) should eliminate about 5% of the candidates.
[01:11:24] *** Quits: ua_ (~ua@public-gprs266162.centertel.pl) (Ping timeout: 240 seconds)
[01:12:29] <int-e> (I don't know whether that pays off.)
[01:20:51] <semisimple> maroon: Sure it does, in fact it actually operates more or less only on blocks of 5-20 bits (very simple SP-Network, very similar to PRESENT). I will check out pract-rand. Do you have any suggestion on what would be the best test set up? Just use the cipher to encrypt using a random key?
[01:22:24] <maroon> semisimple, my guess for a test would be to have a sequential++ input and test the output?
[01:22:41] <TunnelJ> this is exactly a thing I do
[01:23:04] <TunnelJ> I prf into 2^256+ space and increment until I find a prime
[01:23:13] <maroon> you give your input as much non-randomness as possible, then test the output
[01:23:32] <TunnelJ> my use case doesn't care about strong, weak, safe, balanced, only prime
[01:23:47] <maroon> TunnelJ, you're searching for normal prime or safe prime?
[01:24:05] <TunnelJ> any prime works, but I do have a flag to search for safe primes if I want
[01:24:13] <TunnelJ> takes quite a bit longer to find
[01:24:53] <maroon> if searching for safe prime, you can restrict your search to start with a 12k+11 number, then your increment can be +12 between candidates
[01:25:03] <TunnelJ> next = sympy.nextprime(cur)
[01:25:03] <TunnelJ> q = int((next-1))//2
[01:25:03] <TunnelJ> if sympy.isprime(q):
[01:25:47] *** Joins: ua_ (~ua@public-gprs219536.centertel.pl)
[01:25:53] <TunnelJ> I've found so many weird things in prime space that I'm not going to make it harder to find them
[01:26:18] <TunnelJ> some ranges are prime deserts, others full of primes
[01:26:33] <maroon> this isnt making it harder. if you're searching for safe primes greater than 7, exactly zero of them are not 12k+11 numbers
[01:26:34] <TunnelJ> the most interesting thing I stumbled onto was a 5-way balanced set
[01:26:50] <TunnelJ> there are way more primes than strong primes
[01:27:15] <maroon> are you using 'strong' as synonym for 'safe'?
[01:27:46] <TunnelJ> no, strong and weak are related to how far away the next closest prime is
[01:28:31] <TunnelJ> I think there was some debate if strong vs weak primes even mattered in cryptosystems?
[01:28:32] <maroon> i've been told that this definition of strong no longer matters
[01:28:42] <TunnelJ> see
[01:28:57] <TunnelJ> I'm old I guess
[01:29:00] <int-e> maroon: for RSA
[01:29:04] <int-e> this is DH though
[01:29:25] <int-e> for which you really want a large prime-sized subgroup
[01:29:31] <maroon> for rsa i've seen where a strong prime had something to do with whether p+1 had small factors, as well as p-1
[01:31:17] <maroon> TunnelJ, there's also deserts and clusters for safe primes too
[01:32:38] <TunnelJ> I think the general technique is pick a huge number, run a fast miller rabin hueristic and if it looks good continue checking
[01:33:03] <TunnelJ> that was the fastest method I was able to find
[01:33:15] <maroon> but what i meant by safe-prime searching only every 12th number means you save time by not testing the number xxxxxxxxxxx1 is a legit prime only to find out that q is a multiple of 5
[01:34:19] <maroon> if you can test both p and q with trial division/sieve first, that cuts down on the candidates you need to test with M-R
[01:34:54] <maroon> but if you're only doing 256 bits, the safe primes are dense enough there that it doesnt matter so much
[01:36:51] <TunnelJ> Field initialized:  4.6954 seconds 132571 after rounds, from: 54415388 prime: 433365643400894553751676487601171325268623290249652588513611506022844667973979
[01:36:54] *** Quits: ivii (~ivan@user/ivii) (Read error: Connection reset by peer)
[01:37:18] <TunnelJ> yeah, turning on strong prime mode adds a ton of random extra time
[01:38:08] <TunnelJ> .5 seconds would be normal
[01:38:38] <maroon> TunnelJ, so for a 'strong prime' you're just wanting a prime that follows another prime by a small (whatever that is) amount?
[01:39:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:40:17] <TunnelJ> i take the prime I found, subtract 1, divide by 2 and see if that's prime
[01:40:35] <TunnelJ> if true, i have a strong prime
[01:40:35] <int-e> Peng: So the first stage sieves up to ~2^32. And it's a pretty safe bet that it pays off... the sieving took 30 minutes for me, and the primes in range 2^31..2^32 (which conservatively takes about half of that time) eliminated about 200k out of 3M candidates; screening proceeds at a rate of about 1/s and CPU core, so those 200k would've taken hours to days to check otherwise.
[01:40:49] <Peng> Sun Feb  2 05:39:37 2014 Sieve next 4294443008 plus 16383-bit
[01:40:49] <Peng> Sun Feb  2 06:34:43 2014 Sieved with 203277289 small primes in 3306 seconds
[01:40:49] <Peng> Sun Feb  2 06:59:06 2014 Found 2894393 candidates
[01:40:51] <maroon> ok that's safe prime, i was thinking 'strong' had to do with distance of p from nearby primes
[01:41:06] <TunnelJ> yeah, sorry, safe
[01:41:14] <TunnelJ> i really just need any old prime
[01:43:02] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[01:44:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:44:09] <int-e> Peng: hmm, that's slow sieving... compare http://paste.debian.net/1232802/
[01:44:42] <int-e> Ah. 2014. Sorry.
[01:44:46] <Peng> :D
[01:45:08] <Peng> On a VPS with probably a Xeon last-generation ~2.5 GHz CPU
[01:47:32] <int-e> This is probably stupid and should be done with gmp instead.
[01:48:26] *** Joins: pagios (~pagios@life.is-a.beauty)
[01:51:05] <maroon> int-e, does processing 350 in 5 secs mean that's testing 350 candidate p's with miller-rabin?
[01:51:14] <int-e> yes
[01:51:19] <int-e> but it's minutes, not seconds
[01:51:54] <int-e> hence ~ one per second
[01:52:25] <maroon> is that 1 core or several?
[01:52:30] <int-e> 1 core.
[01:52:59] <int-e> i7-6850K CPU @ 3.60GHz ...not the newest.
[01:53:32] <int-e> Obviously I won't let that finish :)
[01:54:05] *** Quits: brolin (~brolin@179.13.18.50) (Ping timeout: 256 seconds)
[01:54:05] <int-e> I was mainly interested in whether sieving up to 2^32 pays off. And in this context, it seems to do that.
[01:55:36] <maroon> so it tests a randomly generated range, but ends up returning multiple safe primes from that same range because the sieve captures plenty of candidates
[01:56:09] <int-e> Right.
[01:57:23] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Quit: Lost terminal)
[02:05:49] <snappy> Damn, I feel like I'm not suing gimli properly. I'm not sure if you're allowed to use all 12 32-bit words (or all 48 bytes) as a pad for an unauthenticated stream cipher. In some papers they show an absorb and squeeze operation, and it looks like squeeze only extracts a subset of the state.
[02:07:48] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[02:12:38] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[02:12:46] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[02:12:56] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[02:14:57] <maroon> int-e, just to be clear about the p-candidates being tested at 1 per second, is that just where p has no factors < 2^31, or where q also has no factors < 2^31?
[02:15:32] *** Joins: skaro (~skaro@2600:8807:180:80:189c:d3b9:7e31:f3c6)
[02:17:15] <int-e> maroon: both
[02:31:11] <int-e> With all 6 cores + hyperthreading it manages 10 tests per second. That's a surprising speedup, close to a factor of 9.
[02:32:57] *** Quits: cwebber (~user@user/cwebber) (Ping timeout: 240 seconds)
[02:37:55] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Ping timeout: 240 seconds)
[02:39:16] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[02:42:38] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[02:42:52] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[02:46:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[02:47:18] *** Joins: yauhsienhuangtw (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net)
[02:48:08] <maroon> int-e, does that mean your ETA has shrunk to 3 days?
[02:49:52] <int-e> maroon: well, yes and no. if I left this running continuously... and didn't use the computer for anything else...
[02:50:10] <int-e> but I may actually finish this within a week, just for laughs
[02:50:35] *** Quits: yauhsien_ (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Ping timeout: 250 seconds)
[02:50:56] <int-e> (I split it into jobs of 1k lines each)
[02:51:18] <int-e> (so I /can/ interrupt the computation and resume it later)
[02:53:10] <maroon> how large is the range size that has 2.9 million candidates?
[02:53:20] <int-e> 2^32
[02:53:39] <int-e> there should be about 44 safe primes in there
[02:54:25] <int-e> (using https://en.wikipedia.org/wiki/Safe_and_Sophie_Germain_primes#Infinitude_and_density )
[02:55:41] *** Joins: meyer (~nunyuh@user/cosanostra)
[03:01:19] <int-e> maroon: https://paste.debian.net/1232811/ is the silly thing I've come up with
[03:02:45] *** Joins: Sofia (~sofia@user/sofia)
[03:08:24] <maroon> i guess my code sucks, it takes me around 15 seconds to do a fermat test on a 16k number
[03:11:38] <int-e> what are you using for bignums?
[03:13:55] <hg> (tangential (and therefore, parenthetical): I still occasionally consider implementing bignums by-hand entirely on bitsets)
[03:14:46] <hg> (I have a large part of that already done in a giant pile of macros for Reasons™)
[03:17:46] *** Quits: tex (~super@user/dix) (Ping timeout: 260 seconds)
[03:20:16] <maroon> int-e, i think this is it https://github.com/AtropineTears/num-primes
[03:24:10] *** Quits: hg (~halosghos@user/halosghost) (Quit: WeeChat 3.4)
[03:27:26] <maroon> at least the code is much faster than the biginteger.modpow that's baked into c##
[03:28:54] <int-e> maroon: hmm that seems to depend on num-bigint which is pure rust... not expected to compete :)
[03:30:44] <int-e> Ah, a quick test (compute 2^(n-1) mod n using the builtin modular exponentiation) suggests that GMP will not be faster than SSL's bignums for this.
[03:31:48] <int-e> (Note: Fermat tests and MR tests should take about the same time if implemented properly.)
[03:35:02] <snappy> Ouch, I spoke to Riastradh, I was using gimli incorrectly :/. I might as well just switch to chacha20, but just need an API so I can output blocks (pad) at a time.
[03:35:09] <maroon> yes that last i agree, since the MR would have the exponent be 1 bit smaller
[03:36:06] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[03:37:22] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[03:37:38] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 250 seconds)
[03:39:19] *** Joins: Wulf (~Wulf@user/wulf)
[03:44:35] *** Quits: ioxzev1z (~ioxzev1z@user/ioxzev1z) (Quit: Leaving)
[03:53:59] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[04:04:47] <caveman> anyone here who knows how z-stark works good enough to implement one?
[04:07:49] <halosghost> caveman: do you mean from-scratch, or leveraging one of the libraries out there as a framework?
[04:08:01] <caveman> scratch.
[04:08:18] <halosghost> not I, then I'm afraid (one day, hopefully ☺)
[04:08:38] <halosghost> out of interest though, why from-scratch?
[04:08:39] <caveman> did you try to learn it?
[04:09:13] <halosghost> it's on my to-do list (other things are higher-priority for me at the moment)
[04:09:13] <caveman> to understand it.  using a libturdy is not cryptography, but rather religion.
[04:09:25] <halosghost> what?
[04:09:39] <halosghost> oh
[04:09:44] <halosghost> is that a typo of “library”?
[04:10:54] <iz> using a heavily used, audited and updated library is actually the best way to do cryptography implementation
[04:11:35] <iz> trying to do it from scratch by yourself is often how you end up with vulnerable systems
[04:12:33] <halosghost> iz: with the one big caveat of learning-by-doing (which also has the big caveat that when you release cryptography code, it will probably be used by someone, so releasing hand-rolled crypto should be very carefully-considered)
[04:13:02] <caveman> iz: yes, that's a good religion.
[04:13:22] <iz> oh yeah, it's great for learning and figuring stuff out -- but only for that
[04:13:44] <halosghost> caveman: define “religion”
[04:13:48] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[04:14:03] <caveman> off-topic.
[04:14:12] <halosghost> what?
[04:14:24] <caveman> anyway, did you try to learn zk-stark yet?  or did you not even start the attempts?
[04:14:30] <halosghost> ಠ_ಠ
[04:16:41] <rk4> argument for not handrolling crypto: saltstack, argument for not using a lib: openssl ;)
[04:17:28] <sarnold> lol
[04:17:36] *** Joins: ravan (~ravan@user/ravan)
[04:17:45] <halosghost> int-e: not knowing much about the performance landscape; how does using libsodium's bigint arithmetic compare to just using gmp or-similar?
[04:19:19] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[04:19:50] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:20:05] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[04:21:17] <int-e> halosghost: 1) I don't know. 2) doesn't libsodium only implement very limited multiple precision arithmetic; basically just what you need for Curve25519? cf. https://doc.libsodium.org/advanced/point-arithmetic
[04:21:55] <iz> lol rk4
[04:22:13] <int-e> I /expect/ that for this particular purpose it's faster than using gmp, mainly because it can fully exploit the benefit of working modulo 2^256 - 38 most of the time.
[04:23:17] <halosghost> int-e: 1) fair. 2) very limited indeed, but it does include a few other things besides what you linked: https://doc.libsodium.org/helpers#incrementing-large-numbers
[04:25:06] <halosghost> inc, add, sub, <=>, zero?)
[04:25:09] <halosghost> s/)//
[04:25:13] <TimMc> "runs in constant-time for a given length"
[04:26:17] <maroon> depending on your use-case, constant time can be just wasted time - like when searching for safe primes or rsa primes
[04:26:24] <TimMc> Oh! Right, that's a security thing.
[04:26:28] <halosghost> maroon: for sure
[04:26:34] <halosghost> TimMc: yes ☺
[04:26:40] <TimMc> I was thinking of it in terms of performance, like big-O notation. >_<
[04:27:05] <TimMc> ("aren't... *most* operations O(1) for a specific input?)
[04:27:16] <halosghost> maroon: important for preventing side-channels; so, as long as your threat-model for running your prime-search is okay with a timing attack, you're good ☺
[04:27:43] <halosghost> TimMc: not for a specific input length, no
[04:27:48] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 240 seconds)
[04:27:51] <int-e> halosghost: sorry, but those operations aren't interesting
[04:27:57] <TimMc> int-e: rude
[04:28:01] <halosghost> lol
[04:28:11] <halosghost> int-e: nothing to be sorry for
[04:30:39] <TimMc> halosghost: My algorithm factors the RSA-2048 challenge number in constant time. ;-)
[04:31:02] <halosghost> hehe
[04:31:03] <int-e> TimMc: TBF I imagine they are quite useful because it's *very* easy to make carry propagation *not* constant time.
[04:31:04] <TimMc> Of, RSA in general, sorry that's exponential in bits.
[04:31:09] <TimMc> *Oh
[04:31:31] <TimMc> int-e: Yeah, from a timing attacks perspective it makes a hell of a lot more sense.
[04:31:34] <int-e> But... from a multiple precision arithmetic angle, if it doesn't do multipliation, it's not interesting.
[04:32:49] <maroon> subroutine: <does the math> while (time < expected_time) noop; return
[04:32:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:33:10] <halosghost> (the impractical side of my brain doesn't want add,mul,exp every since I learned about hyperoperation; inc should be enough for anyone™)
[04:33:41] <TimMc> My computer does all of its calculations in constant space (available RAM and storage media) and constant time (probably about 15 years max) anyhow.
[04:33:46] <int-e> halosghost: does your desktop or laptop run on a Minsky architecture?
[04:33:59] <int-e> (with 3 counters)
[04:34:23] <halosghost> no, and I'm not familiar with it
[04:34:27] <halosghost> but I'm already fascinated :)
[04:35:18] <int-e> halosghost: https://en.wikipedia.org/wiki/Counter_machine#Alternative_names,_alternative_models
[04:35:45] <int-e> I thought that's where you were headed with just inc.
[04:36:24] <halosghost> hah
[04:36:43] <halosghost> int-e: no, I just like hyperoperation :)
[04:37:57] <halosghost> (as a fun side-project, I crafted a lambda which takes a natural number and returns the hyperoperator associated with the input index (i.e., (H 0) == Succ, (H 1) == Plus, (H 2) == Times, (H 3) == Power, etc.)
[04:38:00] <halosghost> )
[04:38:54] <halosghost> it even works, but in a naïve lambda calculus evaluator, its performance is totally impractical after 3
[04:39:16] <halosghost> (and even then, the returned implementation of Times is garbage)
[04:39:41] *** Quits: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca) (Read error: Connection reset by peer)
[04:39:53] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[04:40:27] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Remote host closed the connection)
[04:40:51] *** Quits: TunnelJ (~TunnelJ@64.201.243.34) (Quit: Quit)
[04:45:12] <int-e> maroon: Oh, batch No. 73 had a survivor. https://paste.debian.net/1232815/
[04:47:40] <maroon> int-e, that's 7 16384's in a row where the final hex digit isnt 7 or b, seems unusual
[04:48:23] <maroon> (count the 6 from year 2014)
[04:49:15] <halosghost> maroon: do you have a hypothesis of why that might be?
[04:49:32] <halosghost> that does seem like an interesting pattern
[04:50:03] <maroon> none, halosghost, at the ranges i've been searching, they seem pretty much even across the 4 outcomes
[04:50:17] *** Quits: yauhsienhuangtw (~Yau-Hsien@61-231-37-5.dynamic-ip.hinet.net) (Ping timeout: 240 seconds)
[04:50:17] <halosghost> hmm
[04:50:29] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:50:46] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[04:51:06] <int-e> Hmm, let's try this in a richer region (512 bits)
[04:52:45] <maroon> im curious why SSH is assigning 5 as a generator instead of 3?
[04:54:35] <int-e> maroon: https://paste.debian.net/1232817/ looks fine
[04:54:37] <maroon> of these 7 safes, none of the 7 is p-mod-60=59 either, so i wonder of those are getting discarded
[04:55:39] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:57:00] <maroon> well the 59's aren't be discarded from the 512 list
[04:58:10] <int-e> As for the generator... it seems to pick the first non-square modulo that prime. So an element with order p-1 rather than (p-1)/2, hmm.
[05:00:36] <maroon> using g=3 gives order=q 100% of the time, so i wasnt expecting them to skip past 3
[05:01:41] <int-e> maroon: The 512 bit test has remainder 23 14 times, 47 18 times and 59 10 times.
[05:02:28] <int-e> 7 is still a small number.
[05:02:30] <maroon> int-e, and last digit f only 4of 42
[05:02:54] <maroon> i guess it's just a too small sample
[05:04:10] <maroon> there's a problem with having g be something like 4?
[05:04:30] <int-e> well, 4 is always a square
[05:05:06] <maroon> yes, but the public key is still generated across order=q
[05:05:06] <int-e> 6 could be a non-square, but then one of 2 or 3 is already a non-square.
[05:05:52] <int-e> But the generator that ssh-keygen produces has order 2q.
[05:06:25] <int-e> don't ask me why
[05:06:37] <maroon> oh that explains it. i was used to openssl that goes out of its way to have order=1q
[05:07:56] <maroon> but there will be cases where neither 2 or 5 generates order=2q, so im wondering if ssh will give a higher g, or just toss the number
[05:08:04] <int-e> in that case you can always pick 4 (even for q=2, p=5)
[05:08:12] <int-e> (not that we care about that case :P)
[05:08:52] <int-e> I'm wondering why it's never 3 here.
[05:09:09] <maroon> because both 3 and 4 always generate order=1q 100% of the time
[05:09:50] <maroon> from my tests, ive not found an example where g doesn't always produce order=1q when g is either a square, or 3*square
[05:09:57] <int-e> mmm. let me try to work that out
[05:11:29] <int-e> I see, quadratic reciprocity and the restriction of p modulo 4 and 3 leads to (3 | p) = -(p | 3) = -(-1 | 3) = 1.
[05:11:51] <int-e> Neat.
[05:12:56] <maroon> and if you discard the primes where last hex digit is 3 or b, the g=order=1b seems to always include g numbers where you discard the square, and the remaining largest prime factor is 2 or 3
[05:16:18] <int-e> 5 will not always work though (only 2/3 of the time), so it should go higher...
[05:17:41] <maroon> the most extreme example i've found, without much searching, is the 1536-bit modp from RFC 3526, where the lowest 'g' that gives order=2q is g=31 https://datatracker.ietf.org/doc/html/rfc3526#page-3
[05:17:59] <maroon> dunno what ssh would do if you try to inport that puppy
[05:24:20] <maroon> or this 2048-bit safe won't give order=2q for g below g=7 https://datatracker.ietf.org/doc/html/rfc7919#appendix-A.1
[05:30:32] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 272 seconds)
[05:48:42] *** Joins: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26)
[05:50:19] *** Joins: mad_enz (~mad_enz@lnsm4-toronto12-50-101-118-206.internet.virginmobile.ca)
[06:02:56] *** Quits: xenoterracide (~xenoterra@2600:1700:71d4:81f:6e:2be2:8546:ba26) (Remote host closed the connection)
[06:04:57] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[06:10:27] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:17:57] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 240 seconds)
[06:24:15] *** Joins: khole (~khole@217.146.83.196)
[06:27:34] *** Joins: yauhsien_ (~Yau-Hsien@61-231-36-13.dynamic-ip.hinet.net)
[06:28:26] *** Quits: igemnace (~ian@user/igemnace) (Quit: WeeChat 3.4)
[06:29:11] *** Joins: Legend (~Legend@pool-100-17-18-128.bstnma.fios.verizon.net)
[06:29:26] *** Joins: igemnace (~ian@user/igemnace)
[06:30:26] <Legend> is a six word passphrase secure, if I use a good enough argon2 key derivation?
[06:30:37] <Legend> by good enough I'm talking about the settings
[06:31:22] <sarnold> it depends on how you've selected those six words, from what universe of words, etc
[06:32:15] <Legend> sarnold: the words were selected from a bank of 7773 words https://github.com/keepassxreboot/keepassxc/blob/develop/share/wordlists/eff_large.wordlist
[06:32:27] <Legend> selected randomly of course
[06:33:02] <sarnold> and what exactly does "randomly" mean? :)
[06:33:17] <Legend> with the KeePassXC program.
[06:33:33] <Legend> they have a passphrase generator
[06:33:39] <sarnold> aha so it probably uses getrandom() or /dev/urandom or something..
[06:34:23] <maroon> 6 * $log(7773) / $Log(2) is 77 bits, so that part seems secure depending on your adversary
[06:34:24] <sarnold> that works out to around 77 bits of security; that's vastly better than most people's passwords for most things
[06:34:57] <Legend> also using argon2 with 50 transformation rounds and 100 MB of memory
[06:34:59] <maroon> but if you reject words because they're harder to remember, that lowers the security
[06:36:12] <maroon> that's 1 problem i have with some word lists, they start devolving into words that are too similar to each other
[06:37:29] <Legend> https://github.com/keepassxreboot/keepassxc/pull/6914 so uhh interesting commit
[06:38:56] <maroon> hey, if the project is named keep ass it cant be all that bad
[06:39:14] <sarnold> and the x makes it sound cool
[06:39:46] <int-e> maroon: you mean things like too, to, two or throw, throe? :)
[06:39:51] <sarnold> "swinger"? huh
[06:39:51] <maroon> good grief, the last thing in the world id be worried about is offensive words in a password, its not like you're speaking them in public
[06:41:16] <maroon> in fact, 'shocking nonsense' was recommended for years when selecting passwords easy to remember, and what's more memorable than offensive words, you homosapien
[06:41:22] <sarnold> https://en.wikipedia.org/wiki/Wikipedia:10,000_most_common_passwords
[06:41:50] <sarnold> there's some words in there that would definitely earn most eight year olds a Conversation
[06:42:13] <maroon> tell me me your password, johnny! f*** you!
[06:42:18] <sarnold> :D
[06:42:21] <int-e> "fuck fuck fuck" is the new "12345"
[06:43:30] <maroon> this will quickly devolve into not being allowed to use the HKDF term because it could also stand for someone else that someone doesn't like
[06:43:35] <int-e> this is off topic... but the real problem with banning certain words for being too offensive is that they'll be replaced by new words; it's not like the desire to offend is suddenly reduced...
[06:43:55] <maroon> yeah, like let's go brandon
[06:44:12] *** Joins: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com)
[06:44:22] *** Quits: Legend (~Legend@pool-100-17-18-128.bstnma.fios.verizon.net) (Changing host)
[06:44:22] *** Joins: Legend (~Legend@user/onelegend)
[06:44:27] <maroon> or how the fry sign is now racist
[06:44:52] *** Joins: frost (~frost@user/frost)
[06:45:20] <sarnold> and I dunno if you've heard this but some people who have used the swastika weren't very nice about it
[06:45:52] *** Quits: frost (~frost@user/frost) (Read error: Connection reset by peer)
[06:46:19] <maroon> it originated with the non-white people of india
[06:46:34] <int-e> everybody uses language
[06:46:39] <maroon> and was brought back to europe by archeologists
[06:47:16] * int-e needs to remind himself that this is off topic.
[06:47:39] <maroon> lots of groups have taken slurs and 'owned' them. like in england the terms tory and whig - one of them meant horse thief, and the other one is probably worse
[06:48:00] <maroon> and the donkey and elephant for political parties in the usa were originally cartoon insults
[06:49:11] <halosghost> int-e: I mean, there's an aspect to it that is on-topic: that even minor reductions in security (in this case, via the reduction in-size of the universe of words) based on tests wholly influenced by zeitgeist are infinitely regressive
[06:49:15] <halosghost> that's a solid argument
[06:50:07] *** Joins: frost (~frost@user/frost)
[06:50:27] <maroon> we need to tell the developer that 'password' is an offensive word :)
[06:50:55] <sarnold> it has "ass" in it!
[06:51:14] <sarnold> removing three words from the list .. a .00055691760617809185 bit reduction, per word in output
[06:51:38] <int-e> halosghost: damn, and now I want to make a troll PR "remove potentially offensive words from word list" that replaces it by an empty file
[06:51:53] <int-e> fortunately I'm also lazy
[06:53:29] <int-e> more seriously... is there any functionality in there that generates pass phrases from a seed... so that changes like this destroy reproducibility?
[06:53:56] *** Quits: frost (~frost@user/frost) (Client Quit)
[06:54:04] <maroon> ah, i see where the 7773 came from, the list was originally 7776 - yet EFF didnt feel the need to sanitize their list
[06:54:25] <int-e> oh diceware?
[06:54:35] <maroon> the whole put of 7776 is that it's 6^n, and can be used with dice ware
[06:54:52] <maroon> so instead of dropping 3 words, they should have introduced substitutes
[06:54:54] <int-e> 6^5 to be precise
[06:55:44] *** Quits: khole (~khole@217.146.83.196) (Quit: Leaving)
[06:56:03] <halosghost> int-e: :P
[06:56:08] *** Joins: frost (~frost@user/frost)
[06:56:14] <maroon> i double dare you, int-e :)
[06:56:56] <halosghost> sarnold: miniscule to be sure, but it will just keep happening
[06:57:07] <sarnold> honestly if 'swinger' is offensive, then 'swinging' probably ought to be removed
[06:57:27] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:57:33] <int-e> coming in, swinging an axe
[06:58:09] <maroon> licking doesnt belong there. not so much being offensive, but because it's too similar to liking
[06:58:24] <sarnold> I don't care for words of those ilk
[06:58:28] <sarnold> or elk
[06:59:23] <maroon> that pull request reminds of the time a high school had their mascot summarily changed because the female principal thought 'cougar' was offensive
[07:01:39] <int-e> At least "licking" and "liking" aren't homophonic.
[07:03:35] <maroon> 'punk' has been used as an offensive term to describe individuals, unlike swinger
[07:03:55] <halosghost> hmm
[07:03:57] <halosghost> question
[07:04:18] <halosghost> if you have two words which are homonyms in the same word list, is that a reduction in entropy?
[07:04:49] <halosghost> I suppose it would have to be treated as bias because the two are indistinguishable by a computer
[07:04:53] <maroon> i dont think so, it just makes it harder to remember, even if only 1 of the pair is in the list
[07:05:06] *** Joins: SteveR (~SteveR@4.53.131.109)
[07:05:43] <SteveR> Hi there, i have a question on staking any one here?
[07:05:49] <int-e> halosghost: yeah I'd think of it as a bias. Which is /probably/ harmless for a large word list. It's not like we're mapping hexadecimal digits to decimal...
[07:05:54] <halosghost> maroon: to clarify the example: if “lead” (the conjugation of “to lead”) and “lead” (the element) were both in the wordlist (so, you'd see that word pattern twice
[07:05:57] <sarnold> if you drink enough booze, they all kinda slosh into homophones..
[07:06:19] <maroon> halosghost, it shouldnt matter unless the password is spoken
[07:06:20] <int-e> SteveR: not sure we care about vampires
[07:06:38] <SteveR> oh
[07:06:43] <maroon> unless he's talking about the mormon political division
[07:07:15] <halosghost> SteveR: you're probably looking for /topic ☺
[07:07:54] <SteveR> sorry i dont know the scope of the channel
[07:08:11] <maroon> it's about real crypto
[07:08:55] <halosghost> SteveR: the first sentence of /topic clarifies that ☺
[07:09:06] <halosghost> maroon: “real” in such a sense is kind of arbitrary
[07:09:07] <SteveR> yes it does
[07:09:23] *** Joins: khole (~khole@217.146.83.196)
[07:10:10] <halosghost> ℝ ← what “real” means to me at this point
[07:11:28] <maroon> ok, maybe real + quantum?
[07:11:35] <halosghost> lol
[07:16:12] <maroon> homophones in the list: excess exes
[07:16:36] <sarnold> all my excess exes live in texas
[07:17:10] <halosghost> maroon: of course, that's dependent on accent (the two you mentioned aren't homophones for me)
[07:17:14] <int-e> ,ex'cess and 'ex,es?
[07:17:28] <int-e> let's have exes and axes
[07:17:44] <int-e> and maybe excess and access
[07:18:02] <halosghost> axes and access are close in some accents
[07:18:13] *** Quits: Legend (~Legend@user/onelegend) (Quit: Connection closed)
[07:18:15] <halosghost> very close for me
[07:18:25] <int-e> odd, I stress different syllables
[07:18:39] <sarnold> get your asses in here we need to assess this situation
[07:18:41] <int-e> maybe I'm wrong though...
[07:19:53] <maroon> regional word lists would be better, because it would allow replacing some of these too-similar items with memorable proper names such as cities, states, sports team mascots, etc
[07:20:10] <int-e> Whatever, I agree with the idea that homophones are bad for pass phrases.
[07:20:14] <maroon> or even first names
[07:20:51] <halosghost> int-e: for me, “axes” and “access” have the same stress, but there's an additional “s” sound in “access”
[07:21:00] *** Quits: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au) (Ping timeout: 240 seconds)
[07:22:08] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[07:23:46] <int-e> holgersson: I think you're right.
[07:27:14] *** Joins: khole_ (~khole@217.146.83.196)
[07:27:34] *** Quits: khole_ (~khole@217.146.83.196) (Remote host closed the connection)
[07:27:38] *** Quits: khole (~khole@217.146.83.196) (Quit: Leaving)
[07:40:37] <TimMc> I'd be more concerned about licking/liking -- that's a Levenshtein distance of 1.
[07:42:14] <TimMc> The application might be able to compensate by checking a few variations based on nearby words on failure, but better to reduce the need for that.
[07:43:46] <maroon> that lowers security, especially if each word has an average of 4 'close' words
[07:44:47] <maroon> like with TOTP's already minimal bit strength, allowing nearby time interval just drops the strength even further
[07:46:52] <TimMc> Well, this would be brute-forcing on the client if someone fumbled one of the words.
[07:47:39] <TimMc> The KDF would still be tuned for "max time tolerable for login", but I think users would have a much higher tolerance for password recovery.
[07:49:30] <TimMc> Hot take: Anything that takes a decryption passphrase and uses client resources to validate it should have a password recovery command or option.
[07:50:08] <maroon> if you're getting your password strength from 6 words, and allowing 4 'close enough words for each word, you're in effect shrinking your word list by 2 bits, so you've lost 6*2=12 bits from that passphrase
[07:50:39] <TimMc> I'm not allowing any close words.
[07:51:09] <maroon> what did you mean by compensate for nearby words?
[07:51:29] <TimMc> I'm saying like... imagine your desktop password manager had a mode where you could ask it to repair your password by trying everything an edit distance of 1.
[07:52:17] <TimMc> It might take an hour, but it would be burning your own CPU.
[07:53:51] *** Joins: zulutango (~zulutango@static-n58-105-160-58.mas4.nsw.optusnet.com.au)
[07:53:54] <maroon> wonder how big a wordlist could be if you restricted it to 'good' choice of words, but also required the first 4 letters to be unique, which would make it easier for the programs to ignore spelling mis-steaks
[08:03:36] *** Quits: dude12312414 (~test@gateway/tor-sasl/dude12312414) (Quit: THE RAM IS TOO DAMN HIGH)
[08:05:57] <TimMc> https://en.wikipedia.org/wiki/PGP_word_list takes an interesting approach in having two wordlists, one for even positions and one for odd.
[08:06:32] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[08:06:46] <maroon> yes, and its small enough to have them be phonetically distant from each other
[08:06:50] <TimMc> «  The words were carefully chosen for their phonetic distinctiveness, using genetic algorithms to select lists of words that had optimum separations in phoneme space. The candidate word lists were randomly drawn from Grady Ward's Moby Pronunciator list as raw material for the search, successively refined by the genetic algorithms. »
[08:07:10] <maroon> and they're not squeamish about using proper nouns like the EFF list is
[08:08:44] <TimMc> "Dupont", heh
[08:08:49] <TimMc> definitely an offensive word
[08:11:43] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:00:49] *** Quits: moose (~moose@user/moose) (Ping timeout: 272 seconds)
[09:25:18] *** Joins: Everything (~Everythin@37.115.210.35)
[09:42:07] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[09:44:59] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[09:46:24] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[09:54:17] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[09:54:38] *** Quits: danieldg (~me@user/danieldg) (Ping timeout: 250 seconds)
[09:58:41] *** Joins: danieldg (~me@user/danieldg)
[10:03:55] *** Joins: ravan_ (~ravan@42.201.198.151)
[10:03:55] *** Quits: ravan_ (~ravan@42.201.198.151) (Changing host)
[10:03:55] *** Joins: ravan_ (~ravan@user/ravan)
[10:04:57] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[10:07:38] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[10:12:25] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:18:30] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[10:27:43] *** Quits: Elzington (~Elzington@87.249.134.10) (Ping timeout: 256 seconds)
[10:29:43] *** Joins: Elzington (~Elzington@68.235.43.22)
[10:32:55] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Remote host closed the connection)
[10:33:17] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[10:39:03] *** Quits: SteveR (~SteveR@4.53.131.109) (Ping timeout: 256 seconds)
[10:40:11] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[10:53:36] *** Joins: labrador (~labrador@user/labrador)
[11:09:58] *** Quits: karu (~karasu@puffy.mat.univie.ac.at) (Remote host closed the connection)
[11:13:18] *** Joins: tex (~super@user/dix)
[11:15:54] *** Quits: ravan_ (~ravan@user/ravan) (Quit: Leaving)
[11:40:30] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[11:42:10] *** Joins: ardell (~ardell@user/ardell)
[11:47:17] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[11:48:35] *** Quits: skaro (~skaro@2600:8807:180:80:189c:d3b9:7e31:f3c6) (Quit: KVIrc 5.0.1 Aria http://www.kvirc.net/)
[11:49:11] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[11:49:33] *** Joins: Nimrodel (~Nimrodel@ppp-94-69-16-130.home.otenet.gr)
[11:50:11] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Remote host closed the connection)
[11:50:33] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[12:08:33] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[12:13:07] *** Quits: foobaz21248 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:13:59] *** Quits: lazzurs5 (~lazzurs@user/lazzurs) (Quit: Ping timeout (120 seconds))
[12:14:22] *** Joins: lazzurs5 (~lazzurs@user/lazzurs)
[12:15:16] *** Quits: Nimrodel (~Nimrodel@ppp-94-69-16-130.home.otenet.gr) (Quit: Leaving)
[12:15:32] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[12:18:11] *** Joins: machinedgod (~machinedg@24.105.81.50)
[12:22:32] *** Joins: thelounge64 (~thelounge@157.37.150.197)
[12:30:41] *** Quits: Histausse (~histausse@2001:470:69fc:105::1:711b) (Quit: You have been kicked for being idle)
[12:37:46] *** Joins: Vitto (~Vitto@se-14.nat.univ-paris4.fr)
[12:54:28] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 250 seconds)
[12:56:38] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:02:51] *** Joins: ivii (~ivan@user/ivii)
[13:03:02] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[13:03:32] *** Quits: tex (~super@user/dix) (Ping timeout: 240 seconds)
[13:04:58] *** Joins: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net)
[13:19:13] *** Quits: gdd (~gdd@129.199.146.230) (Ping timeout: 272 seconds)
[13:21:27] *** Quits: ivii (~ivan@user/ivii) (Ping timeout: 256 seconds)
[13:21:56] *** Joins: ivii (~ivan@user/ivii)
[13:38:44] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:04] *** labrador is now known as iamak_
[13:40:50] *** iamak_ is now known as labrador
[13:46:27] *** Quits: MajorBiscuit (~MajorBisc@86-88-79-148.fixed.kpn.net) (Quit: WeeChat 3.4)
[13:51:51] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl)
[13:58:45] *** Joins: foobaz21248 (~foobaz212@152.37.103.80)
[14:16:23] *** Joins: karu (~karasu@puffy.mat.univie.ac.at)
[14:18:14] *** Quits: thelounge64 (~thelounge@157.37.150.197) (Quit: The Lounge - https://thelounge.chat)
[14:18:44] *** Joins: thelounge64 (~thelounge@157.37.150.197)
[14:27:43] *** Quits: ardell (~ardell@user/ardell) (Ping timeout: 256 seconds)
[14:34:22] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[14:34:27] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[14:48:22] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[14:52:58] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi)
[14:54:04] *** Quits: Amadiro (~Amadiro@191.96.180.90) (Quit: Leaving)
[14:57:55] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[15:01:16] *** Joins: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[15:03:43] <gurkenglas> What's the name of the trick where you protect your creation against plagiarism by including subtle abnormalities that would reveal the plagiarist as one?
[15:06:32] *** Quits: yauhsien_ (~Yau-Hsien@61-231-36-13.dynamic-ip.hinet.net) (Quit: Leaving)
[15:10:38] *** Joins: Sofia (~sofia@user/sofia)
[15:12:59] <piou> a canary?
[15:13:37] <piou> That's generaly what we call a decoy data used to detect improper usage, such as corruption on the stack or exfiltration of sensitive data
[15:13:48] <piou> Not sure it's used in this specific context though
[15:19:33] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[15:21:15] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[15:35:24] *** Quits: thelounge64 (~thelounge@157.37.150.197) (Quit: Ping timeout (120 seconds))
[15:35:42] *** Joins: Alexthek1d (~Alexthek1@p5b3ae657.dip0.t-ipconnect.de)
[15:35:44] *** Joins: thelounge64 (~thelounge@157.37.150.197)
[15:37:15] <Alexthek1d> Hello guys,
[15:37:15] <Alexthek1d> <Alexthek1d>  how do you get bitcoins to a cold storage with the lowest fees?
[15:37:15] <Alexthek1d> <Alexthek1d>  -- So: Fiat money € ---> Cold wallet with Coins
[15:37:55] *** Quits: thelounge64 (~thelounge@157.37.150.197) (Client Quit)
[15:38:14] *** Joins: thelounge64 (~thelounge@157.37.150.197)
[15:40:08] <yawkat> read the topic
[15:49:44] *** Joins: mei (~mei@user/mei)
[15:55:10] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[15:56:00] *** Quits: Colti (Miramar-FL@user/host-pond) (Excess Flood)
[15:56:15] *** Joins: Colti (Miramar-FL@user/host-pond)
[15:56:39] *** Quits: arooni_team_b (~arooni@li1062-244.members.linode.com) (Ping timeout: 250 seconds)
[15:56:41] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fb4d-184.dhcp.inet.fi) (Ping timeout: 256 seconds)
[15:59:55] *** Joins: arooni (~arooni@li1062-244.members.linode.com)
[16:07:34] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[16:11:08] *** Joins: synaps3 (~void@user/synaps3)
[16:13:25] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[16:14:46] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 260 seconds)
[16:25:51] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[16:30:21] *** Quits: Guyver2 (~Guyver@guyver2.xs4all.nl) (Quit: Going offline, see ya! (www.adiirc.com))
[16:31:24] *** Quits: linear_cannon (~linear_ca@50.35.78.163) (Ping timeout: 240 seconds)
[16:35:09] *** Joins: llorllale (~llorllale@198.98.119.85)
[16:35:47] *** Joins: linear_cannon (~linear_ca@50.35.78.163)
[16:37:46] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
[16:38:38] *** Joins: labrador (~labrador@user/labrador)
[16:41:00] *** Joins: ardell (~ardell@user/ardell)
[16:51:50] <maroon> gurkenglas, digital watermarking?
[16:54:11] *** Quits: byteskeptical (~amnesia@user/byteskeptical) (Ping timeout: 256 seconds)
[16:54:54] *** Parts: cvemys (~cvemys@user/cvemys) ()
[16:56:55] <maroon> but what piou said is also true https://en.wikipedia.org/wiki/Canary_trap
[17:01:04] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (*.net *.split)
[17:01:04] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (*.net *.split)
[17:01:04] *** Quits: CryptoClub (~fafs@78.red-81-40-233.staticip.rima-tde.net) (*.net *.split)
[17:01:04] *** Quits: jdmark (~jdmark@user/jdmark) (*.net *.split)
[17:01:04] *** Quits: xx (~xx@user/xx) (*.net *.split)
[17:01:04] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (*.net *.split)
[17:01:04] *** Quits: sshine (~simon@zhen.eta.solutions) (*.net *.split)
[17:01:04] *** Quits: baakeydow (~baake@2001:41d0:203:b12c::) (*.net *.split)
[17:01:04] *** Quits: EmmyNoether (~EmmyNoeth@yoke.ch0wn.org) (*.net *.split)
[17:01:04] *** Quits: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com) (*.net *.split)
[17:01:04] *** Quits: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net) (*.net *.split)
[17:01:04] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (*.net *.split)
[17:01:04] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: voker57 (~quassel@2a06:1700:0:24::) (*.net *.split)
[17:01:04] *** Quits: MyWay (~MyWay@2001:41d0:8:be9a::1) (*.net *.split)
[17:01:04] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: funabashi (~funabashi@2a00:d880:5:7d4::dc26) (*.net *.split)
[17:01:04] *** Quits: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9) (*.net *.split)
[17:01:04] *** Quits: elichai2 (sid212594@2a03:5180:f:4::3:3e72) (*.net *.split)
[17:01:04] *** Quits: tomboy64 (~tomboy64@user/tomboy64) (*.net *.split)
[17:01:04] *** Quits: piou (~piou@user/piou) (*.net *.split)
[17:01:04] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[17:01:04] *** Quits: hendi (sid489601@id-489601.lymington.irccloud.com) (*.net *.split)
[17:01:04] *** Quits: ssiyad (~ssiyad@user/ssiyad) (*.net *.split)
[17:01:04] *** Quits: euidzero_ (~euidzero@158.101.10.150) (*.net *.split)
[17:01:04] *** Quits: iz (~tv@user/xiz) (*.net *.split)
[17:02:30] *** Joins: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de)
[17:02:30] *** Joins: wolfshappen_ (~waff@irc.furworks.de)
[17:02:30] *** Joins: CryptoClub (~fafs@78.red-81-40-233.staticip.rima-tde.net)
[17:02:30] *** Joins: jdmark (~jdmark@user/jdmark)
[17:02:30] *** Joins: xx (~xx@user/xx)
[17:02:30] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[17:02:30] *** Joins: sshine (~simon@zhen.eta.solutions)
[17:02:30] *** Joins: baakeydow (~baake@2001:41d0:203:b12c::)
[17:02:30] *** Joins: EmmyNoether (~EmmyNoeth@yoke.ch0wn.org)
[17:02:30] *** Joins: aweinstock (~aweinstoc@cpe-67-248-65-250.nycap.res.rr.com)
[17:02:30] *** Joins: jab416171 (~jab416171@c-67-161-208-65.hsd1.ut.comcast.net)
[17:02:30] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[17:02:30] *** Joins: kristjansson (sid126207@id-126207.tinside.irccloud.com)
[17:02:30] *** Joins: voker57 (~quassel@2a06:1700:0:24::)
[17:02:30] *** Joins: MyWay (~MyWay@2001:41d0:8:be9a::1)
[17:02:30] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[17:02:30] *** Joins: funabashi (~funabashi@2a00:d880:5:7d4::dc26)
[17:02:30] *** Joins: d34dh0r53 (~d34dh0r53@2600:1700:10e0:ecf:5054:ff:fe7c:35f9)
[17:02:30] *** Joins: elichai2 (sid212594@2a03:5180:f:4::3:3e72)
[17:02:30] *** Joins: tomboy64 (~tomboy64@user/tomboy64)
[17:02:30] *** Joins: piou (~piou@user/piou)
[17:02:30] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[17:02:30] *** Joins: hendi (sid489601@id-489601.lymington.irccloud.com)
[17:02:30] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[17:02:30] *** Joins: euidzero_ (~euidzero@158.101.10.150)
[17:02:30] *** Joins: iz (~tv@user/xiz)
[17:03:16] *** Quits: xx (~xx@user/xx) (Max SendQ exceeded)
[17:03:16] *** Quits: euidzero_ (~euidzero@158.101.10.150) (Max SendQ exceeded)
[17:03:16] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Max SendQ exceeded)
[17:03:16] *** Quits: Manouchehri (sid384576@id-384576.hampstead.irccloud.com) (Max SendQ exceeded)
[17:03:16] *** Quits: wolfshappen_ (~waff@irc.furworks.de) (Max SendQ exceeded)
[17:03:16] *** Quits: ssiyad (~ssiyad@user/ssiyad) (Max SendQ exceeded)
[17:03:24] *** Joins: ssiyad (~ssiyad@user/ssiyad)
[17:03:32] *** Joins: wolfshappen (~waff@irc.furworks.de)
[17:03:35] *** Joins: euidzero (~euidzero@158.101.10.150)
[17:04:01] *** Joins: Manouchehri (sid384576@id-384576.hampstead.irccloud.com)
[17:04:12] *** Joins: xx (~xx@user/xx)
[17:07:13] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[17:12:12] *** Joins: sambauer64 (~sambauer6@5-12-118-53.residential.rdsnet.ro)
[17:16:43] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[17:18:16] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[17:20:46] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 245 seconds)
[17:27:54] *** Quits: thelounge64 (~thelounge@157.37.150.197) (Ping timeout: 250 seconds)
[17:28:33] *** Joins: X-Scale` (~ARM@83.223.250.236)
[17:30:36] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 240 seconds)
[17:30:38] *** X-Scale` is now known as X-Scale
[17:38:35] *** Quits: Sofia (~sofia@user/sofia) (Ping timeout: 240 seconds)
[17:38:41] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[17:39:44] *** Joins: ivii (~ivan@user/ivii)
[17:41:48] *** Joins: WishBoy (~WishBoy@user/wishboy)
[17:48:08] *** Joins: brolin (~brolin@179.13.18.50)
[17:51:10] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[17:52:29] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 252 seconds)
[17:54:38] *** Joins: Sofia (~sofia@user/sofia)
[17:55:15] *** Joins: BOKALDO (~BOKALDO@user/bokaldo)
[17:55:48] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[17:56:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-033.client.tudelft.eduvpn.nl) (Ping timeout: 256 seconds)
[17:57:04] *** Joins: hg (~halosghos@user/halosghost)
[17:59:43] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[18:00:44] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Quit: leaving)
[18:00:52] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[18:10:53] *** Joins: derpadmin (~Anonymous@homebase.200013.net)
[18:11:08] *** Quits: jdmark (~jdmark@user/jdmark) (Quit: Leaving)
[18:11:28] *** Joins: jdmark (~jdmark@user/jdmark)
[18:12:46] *** Quits: derpadmin (~Anonymous@homebase.200013.net) (Client Quit)
[18:14:10] *** Quits: WishBoy (~WishBoy@user/wishboy) ()
[18:16:37] *** Joins: byteskeptical (~amnesia@user/byteskeptical)
[18:17:49] <hg> I feel like I must be missing something. I see that gmp has built-in support for the Legendre symbol. Does it not offer support for modular square-root?
[18:24:14] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e) (Ping timeout: 250 seconds)
[18:28:33] *** Quits: synaps3 (~void@user/synaps3) (Remote host closed the connection)
[18:30:10] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 272 seconds)
[18:33:20] *** Joins: Guyver2 (~Guyver@guyver2.xs4all.nl)
[18:39:51] *** Joins: gproto23 (~gproto23@user/gproto23)
[18:41:01] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Ping timeout: 256 seconds)
[18:54:14] *** Quits: labrador (~labrador@user/labrador) (Quit: Leaving)
[18:57:28] *** Joins: dude12312414 (~test@gateway/tor-sasl/dude12312414)
[18:57:49] *** Joins: zer0bitz (~zer0bitz@2001:2003:f74d:b800:71e5:4f52:ed0e:7b4e)
[18:58:56] *** Joins: CodeSpelunker (~CodeSpelu@user/codespelunker)
[19:03:17] *** Quits: ardell (~ardell@user/ardell) (Quit: Konversation terminated!)
[19:15:18] *** Joins: ravan (~ravan@user/ravan)
[19:31:19] *** Quits: aleck (~aleck@user/aleck) (Remote host closed the connection)
[19:31:43] *** Joins: aleck (~aleck@user/aleck)
[19:35:48] *** Quits: son0p (~ff@181.136.122.143) (Ping timeout: 240 seconds)
[19:42:15] <hg> seems not
[19:42:26] *** Joins: dez (uid92154@user/dez)
[19:42:29] <hg> though it's been shared on the gmp lib ML: https://gmplib.org/list-archives/gmp-discuss/2013-April/005300.html (fwiw)
[19:45:06] *** Joins: yauhsien (~Yau-Hsien@61-231-36-13.dynamic-ip.hinet.net)
[19:45:58] *** Joins: powftw (uid448161@id-448161.lymington.irccloud.com)
[19:57:53] *** Quits: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net) (Quit: geoffhill)
[19:58:18] *** Joins: geoffhill (~geoffhill@174-21-77-129.tukw.qwest.net)
[20:10:46] *** Joins: thelounge64 (~thelounge@47.31.197.42)
[20:12:12] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[20:12:48] *** Quits: Vitto (~Vitto@se-14.nat.univ-paris4.fr) (Remote host closed the connection)
[20:14:16] *** Joins: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl)
[20:33:06] *** Joins: gabriel1 (~gabriel1@user/gabriel1)
[20:35:46] *** Quits: CodeSpelunker (~CodeSpelu@user/codespelunker) (Quit: CodeSpelunker)
[20:36:37] *** Quits: gurkenglas (~gurkengla@dslb-188-096-121-068.188.096.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[20:45:04] *** Quits: drathir_tor (~drathir@wireguard/tunneler/drathir) (Remote host closed the connection)
[20:45:52] *** Joins: drathir_tor (~drathir@wireguard/tunneler/drathir)
[21:16:39] *** Joins: TunnelJ (~TunnelJ@64.201.243.34)
[21:25:07] *** Quits: semisimple (~semisimpl@user/semisimple) (Quit: WeeChat 3.4)
[21:32:13] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[21:32:46] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[21:41:01] *** Joins: semisimple (~semisimpl@user/semisimple)
[21:47:15] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[21:51:17] *** Quits: MajorBiscuit (~MajorBisc@c-001-015-039.client.tudelft.eduvpn.nl) (Ping timeout: 240 seconds)
[21:54:31] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[21:56:45] *** Quits: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net) (Read error: Connection reset by peer)
[21:57:18] *** Joins: Tangent-Man (~Tang3nt-M@cpc145602-basl14-2-0-cust33.20-1.cable.virginm.net)
[22:14:38] *** Joins: cwebber (~user@user/cwebber)
[22:18:10] *** Joins: Pythayr` (~pither195@2600:1700:82f0:2fe0::1f)
[22:19:58] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Ping timeout: 250 seconds)
[22:21:38] *** Quits: lord| (~lordpipe@user/lordpipe) (Quit: https://i.imgur.com/xacQ09F.mp4)
[22:23:05] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Remote host closed the connection)
[22:24:29] *** Quits: Pythayr` (~pither195@2600:1700:82f0:2fe0::1f) (Ping timeout: 250 seconds)
[22:25:15] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[22:25:36] *** Joins: lord| (~lordpipe@user/lordpipe)
[22:27:07] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[22:28:14] *** Joins: aleck1 (~aleck@user/aleck)
[22:31:05] *** Quits: aleck (~aleck@user/aleck) (Ping timeout: 256 seconds)
[22:32:19] *** Quits: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us) (Quit: Leaving)
[22:35:48] *** Joins: Pythayr (~pither195@vps-1494dc6f.vps.ovh.us)
[22:44:50] *** Joins: igemnace (~ian@user/igemnace)
[22:47:31] *** Quits: Elzington (~Elzington@68.235.43.22) (Ping timeout: 256 seconds)
[22:49:19] *** Joins: Elzington (~Elzington@87.249.134.31)
[22:51:48] *** Quits: yauhsien (~Yau-Hsien@61-231-36-13.dynamic-ip.hinet.net) (Quit: Leaving)
[22:51:59] <TimMc> Ah, now I know what a slide attack is: https://www.youtube.com/watch?v=Nlm-zuOx6Kk
[23:01:38] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:13:35] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:21:40] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:22:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 240 seconds)
[23:23:03] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 268 seconds)
[23:24:15] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:24:26] *** Lord_of_Life_ is now known as Lord_of_Life
[23:25:36] *** Quits: powftw (uid448161@id-448161.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[23:25:57] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:26:40] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:28:26] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:29:25] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:29:40] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:29:48] *** Quits: machinedgod (~machinedg@24.105.81.50) (Ping timeout: 240 seconds)
[23:32:42] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:34:41] *** Quits: ses (uid38151@id-38151.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[23:46:14] *** Quits: BOKALDO (~BOKALDO@user/bokaldo) (Quit: Leaving)
