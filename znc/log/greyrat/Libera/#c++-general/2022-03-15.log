[00:10:23] *** Quits: sigma_ (~sigma@86.57.83.153) (Quit: Konversation terminated!)
[00:15:25] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:ac3a:7c81:c789:5753) (Ping timeout: 240 seconds)
[00:15:50] <MaddHatter> so what happened with ABI compatibility and C++23? Re http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1863r0.pdf
[00:16:06] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[00:16:21] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:16:23] *** Joins: c4017w__ (~c4017@209.52.68.8)
[00:19:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[00:21:19] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[00:22:01] *** Joins: proller (~p@80.240.216.69)
[00:25:38] *** Joins: PJBoy (~PJBoy@user/pjboy)
[00:27:27] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c871:1280:80a0:daf5)
[00:27:59] *** Quits: andreasbuhr (~quassel@p549db62a.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[00:29:49] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[00:30:57] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[00:32:20] <mort> I heard that it was voted down, no?
[00:33:36] <MaddHatter> I have no idea. Does voted down mean maintain ABI compatibility and say so, or continue the status quo of claiming one thing and doing another?
[00:34:10] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 260 seconds)
[00:34:15] <PJBoy> [p1863]
[00:34:15] <npaperbot> P1863R1: [WG21, Direction Group] ABI - Now or Never <https://wg21.link/p1863r1> (by Titus Winters) (2020-01-12) (Related: https://wg21.link/p1863r1/github)
[00:34:41] <PJBoy> it got an updated revision at least
[00:35:44] <PJBoy> unclear what the outcome was
[00:36:20] *** Joins: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:6511:8752:5325:aa96)
[00:36:22] <PJBoy> [p2028]
[00:36:23] <npaperbot> P2028R0: [Evolution, Library Evolution] What is ABI, and What Should WG21 Do About It? <https://wg21.link/p2028r0> (by Titus Winters) (2020-01-10) (Related: https://wg21.link/p2028r0/github)
[00:37:49] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c871:1280:80a0:daf5) (Ping timeout: 240 seconds)
[00:37:59] *** Joins: rpnx (~rpnx@2601:c9:c000:5425:e419:fd25:90be:1dae)
[00:38:22] <PJBoy> there are some notes here http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/p2130r0.pdf
[00:38:33] <PJBoy> > We decided not to promise ABI stability.
[00:39:35] <PJBoy> > We did not have a consensus for a big ABI break for C++23, but it’s important to notice a lot of people are in favour of it.  There were far more people in favour of a big ABI break at some point in time, but there were still 14 strongly against votes. Technically, this is not a strong consensus, but I think it’s strong enough of a consensus to consider such a break. Considering something...
[00:39:37] <PJBoy> ...doesn’t mean we will do it.
[00:40:43] <Inline> hi
[00:40:59] <Inline> what's the problem with this code here ? https://pastebin.com/yNLGavKS
[00:41:22] <MaddHatter> PJBoy: thanks. That's sounding like "we'll think about it for c++26" then
[00:41:42] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:41:50] <PJBoy> yeah
[00:41:58] <Inline> compiling does not work, it fails with https://pastebin.com/TB6yMY0j
[00:42:03] <PJBoy> seems like there's some desire to deprecate std::regex too
[00:42:22] <MaddHatter> well that'll be easy for me. We never got around to using it to begin with.
[00:42:42] <PJBoy> Inline, I only see warnings
[00:42:51] *** Joins: proller (~p@2a02:6b8:b081:b48d::1:13)
[00:43:11] <Inline> it's copying stuff into region of size 0
[00:43:53] *** Quits: magla (~gelignite@55d4c150.access.ecotel.net) (Quit: Stay safe!)
[00:43:59] <Inline> writing between 8 and 17179869176 bytes into a region of size 0 [-Wstringop-overflow=]
[00:44:28] <Inline> it misses a T pointer
[00:44:49] <Inline> kinda like
[00:45:22] <Inline> template <class T> class DynamicArray { private: T *list; .....
[00:45:31] <Inline> or
[00:45:41] <Inline> template <class T> class DynamicArray { private: T *array; .....
[00:45:59] <MaddHatter> well as the warning suggests, m could be 0-sized or any size, really, but operater= is assuming that m is smaller than this
[00:48:00] <Inline> this is totally wrong
[00:48:12] *** Joins: x_kuru_ (~xkuru@user/xkuru)
[00:48:19] <MaddHatter> oh, I overlooked a line. You do still have a problem if m is size 0 though
[00:48:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[00:49:29] <Inline> look this one has no problem
[00:49:31] <Inline> https://pastebin.com/ABWdr7gt
[00:50:44] <MaddHatter> that has no operator=
[00:51:20] <MaddHatter> (which I tihnk means it'll double-free on copy?)
[00:51:27] *** Quits: x_kuru (xkuru@user/xkuru) (Ping timeout: 250 seconds)
[00:51:37] <Inline> right
[00:51:46] <Inline> that too
[00:51:49] <PJBoy> I must admit, I don't see any issue in that original code
[00:51:56] *** Quits: DrMax_ (~DrMax@132.215.96.30) (Remote host closed the connection)
[00:52:44] <PJBoy> it's like it optimises it to memcpy and then complains about it
[00:53:31] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[00:53:31] <Inline> where does it get _allocated_size in grow() ?
[00:53:43] <Inline> it's not initialized, hence UB
[00:53:50] *** Joins: undephin3d (~undephin3@158.181.72.222)
[00:53:56] <PJBoy> it's initialised in every ctor
[00:54:12] <PJBoy> should be fine
[00:54:36] <MaddHatter> copying it over to godbolt, there don't seem to be any complaints
[00:55:06] <Inline> hmmm
[00:55:38] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (Remote host closed the connection)
[00:56:03] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[00:56:34] <PJBoy> only issues I have with this code is use of int as loop index and lack of exception safety
[00:56:50] <MaddHatter> int for size is not ideal, either
[00:57:02] <PJBoy> `_allocated_size + _allocated_size / 2 + 1` could technically overflow too
[00:59:04] <Inline> yes unsigned for loops is better
[00:59:43] <Inline> anyway, something is massively wrong
[01:00:02] *** Joins: nshire (~nshire@user/nshire)
[01:00:03] <PJBoy> that virtual dtor is weird
[01:00:59] <PJBoy> reserved ID for the header guard...
[01:01:32] <PJBoy> includes "bool.h", ew
[01:01:58] <MaddHatter> Is it any different if you remove #include <new>?
[01:02:23] <Friithian> bool.h‽
[01:03:40] <MaddHatter> y'know, where you #define true 0 and #define false 1
[01:03:43] <PJBoy> it's a file that defines `typedef int bool;`
[01:03:56] <PJBoy> and `const bool false = 0, true = 1;`
[01:04:06] <PJBoy> so slightly better than macros
[01:04:32] <Inline> it's no different when i remove <new>
[01:04:34] <MaddHatter> I was being facetious
[01:04:39] <PJBoy> but it's a C++ header that includes it, terrible
[01:04:40] <Inline> it was originally without <new>
[01:05:01] <Inline> but the same set of warnings/erros
[01:05:15] <MaddHatter> what compiler/platform?
[01:05:41] <Inline> x86_64 voidlinux gcc 10.2.1
[01:06:18] <PJBoy> argh this code is so bad
[01:06:34] <MaddHatter> https://godbolt.org/z/qeofT136a is gcc 10.2; no warnings
[01:06:41] <Inline> i found lots of errors in ddd, but i corrected some (at least i hope so)
[01:06:58] <Inline> there was a macro which uses max_size in it's argument list
[01:07:22] <Inline> but then adds it to an int or compares against int
[01:07:37] <Inline> corrected by renaming it to my_max_size
[01:08:00] <Inline> cause that name is reserved for size_t MAX_SIZE
[01:08:07] <PJBoy> and it mixes tabs and spaces, obviously
[01:08:19] <PJBoy> it's fine if it's lowercase then
[01:08:26] <Inline> no it's not fine
[01:08:30] <Inline> even in lowercase
[01:08:35] <PJBoy> why not?
[01:08:43] <Inline> no idea, maybe it needs parens ?
[01:09:00] <Inline> i think the lowercase does not do any difference
[01:09:12] <PJBoy> must be a different max_size it's conflicting with
[01:09:18] <Inline> cause it's still size_max == SIZE_MAX somehow
[01:09:36] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[01:10:00] <PJBoy> << SIZE_MAX
[01:10:01] <geordi> 18446744073709551615
[01:10:04] <PJBoy> << size_max
[01:10:04] <geordi> error: 'size_max' was not declared in this scope; did you mean 'size_t'? (fix known)
[01:10:08] <PJBoy> not the same
[01:10:59] *** Joins: k8yun_ (~k8yun@user/k8yun)
[01:10:59] <MaddHatter> why the heck does T& value(int) call grow(int)?
[01:11:21] <PJBoy> to guarantee that the index is valid
[01:11:24] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 252 seconds)
[01:11:32] <PJBoy> a little like how std::map's operator[] works
[01:11:34] <MaddHatter> if the requested index is <= allocated size??
[01:11:49] <Inline> #define YY_INPUT(buf, result, my_max_size) \
[01:11:49] <Inline> {\
[01:11:49] <Inline>     int k = 0; \
[01:11:49] <Inline>     while (*the_prefix != '\0' && k < my_max_size) \
[01:11:49] <Inline>         buf[k++] = *the_prefix++; \ ....
[01:11:49] <geordi> error: Unexpected end of request. Expected '}' or balanced code.
[01:12:01] <PJBoy> it's `if (i >= _allocated_size) grow(i + 1);` where I'm looking
[01:12:24] <Inline> i changed it to my_max_size, and no more mixing int with size_t
[01:12:26] <MaddHatter> it's <= on mine. How are we seeing different things?
[01:12:29] <PJBoy> oh
[01:12:33] <PJBoy> I was looking at the original source code
[01:12:38] <PJBoy> yeah that's wrong in the pastebin
[01:12:42] <Inline> i tried to change int k to size_t k but that didn't work
[01:13:03] <Inline> cause it's also using another int len on another line with max_size
[01:13:37] <PJBoy> you seeing that being wrong Inline?
[01:13:39] <PJBoy> on line 69
[01:13:56] <Inline> yes i changed that
[01:14:08] <Inline> but that's not the cause of the set of warnings/errors i got
[01:15:03] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[01:15:23] <Inline> and make check also fails with a double free()
[01:15:42] *** Joins: Tobbi (~Tobbi@ip1f115d4d.dynamic.kabel-deutschland.de)
[01:16:43] <Inline> there, i changed the line 69 to it's original value, but still the same set of errors
[01:16:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[01:17:14] <PJBoy> yeah I don't see any reason for those warnings
[01:17:21] <PJBoy> think they're false positives
[01:17:27] *** Quits: Tobbi__ (~Tobbi@2a02:8108:1240:48ec:6511:8752:5325:aa96) (Ping timeout: 268 seconds)
[01:18:38] <Inline> make check fails with cxxtest -> free(): invalid pointer
[01:18:54] *** Quits: robod34 (~Username@79.113.243.73) (Remote host closed the connection)
[01:19:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[01:20:12] <Inline> ok, i'll make a new directory with the original code and correct one by one again, until i discover either an error i introduced or the root of all of this
[01:20:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[01:20:25] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Remote host closed the connection)
[01:24:37] <Inline> i also found many lines where XtPointer() is passed an int
[01:24:48] <Inline> whereas XtPointer itself takes only pointers
[01:24:54] <yolo> why is typeid,alingof,new,delete,static_cast an operator instead of function?
[01:25:04] <Inline> like XtPointer(int)
[01:25:39] <Inline> correct is XtPointer((int *))
[01:29:24] <Inline> so either you can cast it inline or just create a pointer to the int (or whatever) and pass that
[01:29:32] *** Quits: tonitch (~tonitch@user/tonitch) (Ping timeout: 252 seconds)
[01:31:19] *** Joins: DrMax_ (~DrMax@132.215.96.30)
[01:31:56] <mort> tbh I don't understand why std::regex was built in such a way that changing its internals requires an ABI break
[01:32:26] <mort> surely it could've been built using some kind of PIMPL, since that extra pointer dereference isn't gonna make a difference when doing a regex match
[01:32:27] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[01:32:39] <Inline> if it's not written in a malleable way from the beginning......
[01:33:10] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[01:33:16] <mort> yeah it'd have had to be foreseen before it shipped in stable libraries
[01:36:18] <Inline> the interface (args,...) (the interface of the real thing(args) + amendements + new_funcs_of_the_real_thing(...))
[01:38:07] <Inline> nowadays you can template it all, not sure if it's any use in variadics
[01:38:19] <Inline> or in combination with variadics
[01:38:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[01:38:54] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[01:39:59] *** Joins: tonitch (~tonitch@user/tonitch)
[01:43:51] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:43:59] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:43:59] *** ChanServ sets mode: +v npaperbot
[01:44:37] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[01:45:38] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[01:45:40] *** Joins: ferdna (~ferdna@user/ferdna)
[01:46:14] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:54:20] <PJBoy> stdlib using pimpl would be insane
[01:54:29] <PJBoy> it would go against the zero overhead principle
[01:59:58] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[02:01:20] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[02:03:04] <rpnx> Zero overhead died a long time ago
[02:03:10] <rpnx> Have you seen std::function?
[02:03:22] <rpnx> If (function is null) throw ...;
[02:03:24] <rpnx> Every function call
[02:03:42] *** Quits: proller (~p@2a02:6b8:b081:b48d::1:13) (Ping timeout: 268 seconds)
[02:04:08] <CarloWood> I don't want to know *plugs his ears* LALALA CANT HEAR YOU
[02:04:18] <rpnx> Exceptions
[02:04:18] <rpnx> std::bad_function_call if *this does not store a callable function target, i.e. !*this == true.
[02:04:24] <rpnx> Seriously
[02:05:06] <ashafq> https://github.com/jackaudio/example-clients/blob/master/capture_client.c#L60 what is std:: equivalent of pthread_cond_t? std::condition_variable?
[02:07:43] <rpnx> and not only that, io in general sucks. plus std::variant... the list goes on forever
[02:08:19] <rpnx> C++ forgot zero-overhead was a thing a long time ago and started putting in extra safety branches that make your code slow
[02:08:58] <rpnx> It's a curious thing.
[02:14:37] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[02:16:57] <PJBoy> function's zero overhead
[02:17:07] *** Joins: c4017w__ (~c4017@209.52.68.8)
[02:17:18] <rpnx> calling function is one branch per operator()
[02:17:19] <PJBoy> it does those checks in a way you couldn't do any faster otherwise
[02:17:37] <PJBoy> maybe you don't like those checks, but they're not overhead, it's just a feature you don't want
[02:17:38] <rpnx> that's no zero overhead, zero overhead is there not being a bounds check where it's not needed.
[02:17:41] <rpnx> that's overhead
[02:17:52] <rpnx> operator[] having a bounds check is overhead
[02:18:00] <rpnx> not a feature
[02:18:25] <rpnx> If there was a "safe" version e.g. foo.call(...) that did bounds checking, then you could call it "zero overhead"
[02:18:53] <rpnx> but, if I have to implement rpnx::function to do basically the same thing, that's unneeded overhead.
[02:19:32] <rpnx> Your argument is like saying, if you modify an int, it keeping an internal std::string of the decimal form would just be a "feature I didn't want" and not overhead.
[02:20:20] <rpnx> Unneeded "features" are overhead almost by definition.
[02:20:42] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[02:21:04] <rpnx> There are other examples of overhead in C++ of course.
[02:21:38] <PJBoy> different definition of overhead
[02:22:11] <rpnx> Zero overhead means the C++ implementation should satisfy high-performance use cases, which most of the time it does not these days.
[02:22:17] <PJBoy> zero overhead is where you can't get the same functionality by writing it otherwise
[02:22:39] <PJBoy> that includes functionality that does checks that you don't need for your use cases
[02:22:43] <rpnx> yet I need to reimplment std::function to get the same performance
[02:22:51] <PJBoy> like vector::at is zero overhead
[02:23:20] <PJBoy> I'm not saying function couldn't be improved by having a checkless call function
[02:23:32] <rpnx> The idea that std::function is a zero-overhead abstraction for a type erased function is clearly false.
[02:23:44] <rpnx> ergo a violation of the principle of zero overhead.
[02:23:57] *** Quits: x_kuru_ (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[02:24:26] <rpnx> The idea that std::variant is a zero overhead container for one of the variant types is also clearly false.
[02:24:35] <PJBoy> it's a zero overhead abstraction of [func.wrap.func]
[02:24:55] <rpnx> That's an implementation detail
[02:25:18] <rpnx> Zero overhead means that the requirements of the spec don't force inefficiencies on the implementation
[02:25:24] <rpnx> which in this case they do
[02:25:51] <PJBoy> not inefficient if you want those checks
[02:26:31] <rpnx> But inefficient if you do. And most importantly, cannot be made efficient.
[02:26:44] <rpnx> To be zero overhead, it needs to satisfy general use cases and be composable.
[02:27:04] <rpnx> You can add checks to a zero overhead abstraction, but not remove the overhead of a non-zero overhead abstraction.
[02:27:58] <rpnx> The point of zero overhead is that bounds-checking is NOT zero overhead, and that compiler optimizations to remove such safety checks are not sufficient.
[02:28:01] <PJBoy> no one says the general use cases need to be satisfied
[02:28:06] <rpnx> Yes they do.
[02:28:19] <rpnx> operator() does not obey a zero-overhead principle.
[02:28:42] <rpnx> and since std::function has no call method that doesn't do the branch, std::function as a whole is not zero-overhead
[02:28:51] <PJBoy> that's like saying vector's not zero overhead because it always has to check against its capacity member
[02:28:56] <rpnx> vector has operator[] which is not required to do a check
[02:29:10] <PJBoy> you can't eliminate that overhead
[02:29:36] <rpnx> That's true, vector has several inefficiencies.
[02:29:54] <rpnx> I mentioned lack of "expand_uninitialized" or similar as another overhead.
[02:30:19] <PJBoy> and push_back_assume_no_resize
[02:30:44] <PJBoy> or push_back_assume_reserved even
[02:31:07] <rpnx> Yes something like that would be needed, among other issues that vector has.
[02:31:09] <PJBoy> I think that would be a great thing to have actually
[02:31:22] <rpnx> C++ prioritized invariants over zero-overhead
[02:31:36] <rpnx> but the std::function example isn't even invariant breaking
[02:31:37] <mort> what logging setup do people prefer?
[02:31:47] <PJBoy> time to write nih::vector
[02:31:57] <rpnx> they just made it defined behavior when they could have left operator() on a null function undefined.
[02:32:10] <PJBoy> every project I've ever worked on has written its own logging system
[02:32:12] *** Joins: proller (~p@2a02:6b8:b081:6411::1:30)
[02:32:19] <rpnx> zero overhead requires undefined behavior and c++ seems to be moving away from undefined behavior
[02:32:23] <PJBoy> it's kinda sad
[02:32:38] <mort> I kinda wanted to avoid making yet another logging system, I've done that enough
[02:33:15] <rpnx> I should reimplement vector... sigh
[02:33:29] <rpnx> Meanwhile the allocators in C++ suck design wise
[02:33:41] <rpnx> If I did that I'd first reimplement the allocators.
[02:33:48] <PJBoy> eh they allocate and they deallocate
[02:33:51] <PJBoy> what more can you do
[02:34:09] <rpnx> The interface c++ uses is inefficient
[02:34:46] <rpnx> Suppose for example you need space for between 20 and 30 elements.
[02:35:06] <rpnx> You have no way to to tell the allocator "I need at least X bytes and can't use more than Y bytes."
[02:35:44] <rpnx> Nor can you use the efficient slab algorithms that require knowing the size of allocation on deallocate
[02:35:50] <PJBoy> it does have allocate_at_least in C++23 at least
[02:36:16] <rpnx> Which, sure, you can stick size at foo-8, but now you're wasting cache-line space with sizes
[02:36:30] <PJBoy> and deallocate does get the allocation size
[02:36:37] <rpnx> It's optional though
[02:36:54] <rpnx> Well, at least for new/delete
[02:36:55] <PJBoy> doesn't look optional
[02:37:22] <mort> return value: a.allocate_at_least(n) if it is well-formed, otherwise, {a.allocate(n), n}.
[02:38:06] <mort> not sure exactly what "if it is well-formed" entails but it means there are cases where it'll fall back to the old API
[02:38:44] <mort> which, tbh, makes sense, this would let you write code which is as efficient as possible with good allocator implementations but doesn't break with old or less featureful allocator implementations
[02:38:46] <rpnx> Even then sometimes you want an upper bound on the number you will actually use.
[02:39:43] <rpnx> Also no built-in separation between array and slab allocators to allow you to query size of array allocations.
[02:39:49] <PJBoy> yeah, but it's cool that at least allocate_at_least is there
[02:40:12] <PJBoy> putting an upper bound seems like it would have been a natural extension to that idea :/
[02:40:27] <rpnx> And lets not forget there's no resize allocation e.g. realloc that can reuse existing space by expanding the current allocation when possible.
[02:40:49] <mort> what I've read from the rationale is that most modern allocators aren't generally heap datastructures, they're more like arrays of fixed-size elements, so you have one array of 8 byte allocations, one array of 16 byte allocations, one of 24 byte allocations, etc
[02:41:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea)
[02:41:16] <mort> and given such an allocator design, it makes total sense that you'd ask for N bytes and get back a chunk of memory with at least N bytes, plus the number of bytes you actually got
[02:41:16] <rpnx> that's true, but there are cases when you can still expand into a larger allocation
[02:41:34] <mort> yeah, with a heap-style allocator, right?
[02:41:39] <rpnx> often there are "buddy" allocators, that have chunks next to eachother
[02:41:53] <rpnx> so for example, two 32-byte allocations can be combined into a 64-byte one
[02:42:02] <mort> that makes sense
[02:42:07] <rpnx> if the adjacent block is free you can expand into it
[02:42:20] <mort> I also think realloc is a pretty decent API, I don't quite understand the problem with it
[02:42:41] <mort> I mean I understand the object lifetime issues with realloc in particular, but I don't quite understand why one couldn't have a C++ified version
[02:43:10] <rpnx> allocate_at_least does solve the issue of "ask for 24 bytes, but only 16 and 32 are actually available" and getting that 32 byte allocation but not being able to use all of it
[02:43:31] <mort> mhm
[02:44:43] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[02:45:12] <mort> I should probably just use spdlog
[02:45:52] <rpnx> Here's a random serialization sample, thoughts on this api? https://gitlab.com/rpnx/rpnx-serial3/-/blob/main/tests/test1.cpp
[02:51:38] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[02:51:46] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:53:38] <rpnx> I think it's still pretty bad, although the last one I had was worse.
[02:55:07] <rpnx> Full descent into specialized types now, with some independence between the format and the objects being serialized.
[03:03:39] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4)
[03:06:03] *** Quits: ville (~ville@user/ville) (Quit: ville)
[03:06:56] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:11:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:12:12] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (Ping timeout: 240 seconds)
[03:17:36] *** Joins: c4017w_ (~c4017@209.52.68.8)
[03:20:00] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[03:20:57] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[03:21:57] <rpnx> damn my api must be pretty boring.
[03:22:11] <rpnx> I guess that's a good thing?
[03:24:52] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:ad63:bd3f:cc95:19ea) (Quit: Quit)
[03:29:22] <mort> it's a bit hard to follow, why're you making the type called bar and then never using it?
[03:30:29] <rpnx> That might just be leftover from when I changed the test
[03:31:28] <rpnx> yeah I changed it to foo_format
[03:31:52] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:8f5:448b:f0f1:4571)
[03:31:52] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:8f5:448b:f0f1:4571) (Changing host)
[03:31:52] *** Joins: skapata (~Skapata@user/skapata)
[03:36:49] <mort> so use() is supposed to return a tuple of references to types it already knows how to serialize
[03:37:30] <mort> I would question if it's really necessary to have initialize, use and finalize be separate methods, or if use could just take a T&
[03:37:39] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:38:06] <rpnx> Well the idea is that a binding might not work that way
[03:38:30] <rpnx> For example, a type might be convertible to some type that the engine knows how to serialize, but not directly contain serializable members
[03:38:57] <rpnx> e.g. initialize could convert to std::u8string, use return a reference, and finalize gets rid of that std::u8string
[03:39:18] <mort> hmm
[03:39:59] <mort> if you wanted to do that in use, then use would have to return a u8string, not a reference to it, but you obviously want to be able to return a reference too
[03:40:20] <mort> could you somehow make the engine support use returning a reference *and* use returning a value?
[03:40:43] <rpnx> no the binding would contain a u8string value and the use member function return a reference to it
[03:41:10] <rpnx> anything in use() would get converted to a reference, but that might be less efficient
[03:41:26] <rpnx> because if you did use() multiple times it would be less efficient
[03:41:51] <rpnx> that's why the conversion should happen once in initialize and then use just returns a reference
[03:41:58] <mort> I wonder if you actually do use() the same object multiple times ever
[03:42:42] *** Joins: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[03:43:01] <rpnx> There are no examples for the time being
[03:43:22] <rpnx> but it could be in other circumstances like the sizing interface I will implement later
[03:43:42] <mort> the current approach seems perfectly reasonable fwiw, just a bit verbose
[03:44:59] <rpnx> ideally it will do the same thing as the previous version where you do e.g.
[03:45:26] <rpnx> vec.reserve(serial_size(foo)); serialize_iterator(foo, std::back_insterter(vec));
[03:45:56] <mort> btw, how do you handle loading stuff from an old version
[03:46:01] <mort> if you e.g add a member
[03:46:39] <rpnx> well those kind of details would be done at a higher abstraction layer
[03:47:08] <rpnx> it's just a fast serialization library, it's not concerned with meta-issues like the format of objects
[03:47:15] <mort> alright
[03:47:50] <rpnx> I will probably add support for stuff like json and bson and other formats
[03:48:32] *** Parts: Hawker (~pi@user/hawker) (Leaving)
[03:48:32] <rpnx> I can think of... e.g. format_json_field<"foo", json_integer> maybe
[03:48:54] <mort> I would probably suggest experimenting with ways to do schema migrations with your system, if only to figure out where the pain points are and maybe to have some useful info on it in a readme or docs
[03:49:35] <mort> maybe also consider building features for that on top of the core, if that's something you care about
[03:49:50] <rpnx> schemas would be painful since the library doesn't support any concept of type information
[03:49:56] <mort> I don't know what your goal is, but in most real-world cases where you want serialization, schema changes tends to come up
[03:50:15] <Alipha> rpnx: actually, std::function doesn't need the if check. A "null" std::function can just be initialized to point to a function which then throws
[03:50:33] <rpnx> Well, the idea is that it's a base upon which other formats could be built upon.
[03:50:54] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 252 seconds)
[03:51:04] <rpnx> Alipha: Interesting, I didn't think of that. I do believe the standard library implementation on my platform throws though
[03:51:04] <mort> I don't mean some sort of big fancy schema definition thing, just the implicit schema you have from the structure of your serialize/deserialize structs
[03:51:15] <rpnx> with a branch, specifically
[03:52:01] <rpnx> mort: It uh... just pulls from serial3::default_format<T> if you don't specify the format
[03:52:17] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:52:22] <rpnx> so... if default format changes, then yeah, the format would change from one binary to the other
[03:52:34] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[03:52:48] <rpnx> The default format shouldn't change, unless the object structure changes
[03:53:01] <mort> object structure changes is what I'm talking about though
[03:53:12] <rpnx> in which case I'd say...
[03:53:22] <rpnx> deserialize( version, ... )
[03:53:33] <rpnx> if (version == 1) { ... } else { ... }
[03:54:08] <rpnx> hum... that does bring us back to the old problematic pattern
[03:54:17] <rpnx> maybe uuuh... I'm thinking
[03:54:22] <rpnx> Serializer concept?
[03:56:58] *** Quits: rpnx (~rpnx@2601:c9:c000:5425:e419:fd25:90be:1dae) (Quit: Leaving)
[03:57:06] *** Quits: DSpider (~DSpider@82.79.237.43) (Quit: Leaving)
[03:58:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:01:51] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:06:34] *** Joins: Karyon_ (~Karyon@user/karyon)
[04:07:02] *** Quits: Karyon (~Karyon@user/karyon) (Ping timeout: 240 seconds)
[04:09:04] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[04:10:48] *** Quits: CodePoint (~jonathan@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: WeeChat 3.4)
[04:14:47] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[04:16:08] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:18:22] *** Joins: c4017w__ (~c4017@209.52.68.8)
[04:18:55] <Alipha> {} template<typename T> class foo { friend class T; }; class bar {};  // weird. cc: udet
[04:18:55] <geordi> error: using template type parameter 'T' after 'class'
[04:19:25] <Alipha> (i guess `class bar {};` there is unnecessary, but nevertheless)
[04:21:37] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[04:22:14] *** Joins: malloy (~jimery@120.235.172.192)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:29:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[04:32:55] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:35:15] <Alipha> { foo<bar> f; } template<typename T> class foo { friend T; }; class bar {}; // udet: apparently you don't use the class keyword in this case...
[04:35:16] <geordi>  
[04:35:48] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:38:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:38:32] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[04:39:05] *** Parts: ambasta (~ambasta@2001:470:69fc:105::1:3973) ()
[04:44:49] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:47:34] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[04:47:43] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Client Quit)
[04:56:27] *** Joins: ymwm (~yingmanwu@110.85.123.161)
[05:01:43] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:02:09] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Client Quit)
[05:02:23] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:08:37] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:11:17] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[05:12:01] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Ping timeout (120 seconds))
[05:12:40] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:12:46] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Remote host closed the connection)
[05:13:04] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[05:14:10] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (Ping timeout: 260 seconds)
[05:15:52] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[05:16:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Client Quit)
[05:17:08] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[05:18:20] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (Quit: Ping timeout (120 seconds))
[05:18:33] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[05:19:06] *** Joins: c4017w_ (~c4017@209.52.68.8)
[05:20:18] *** Joins: zmt00 (~zmt00@user/zmt00)
[05:21:39] *** Quits: undephin3d (~undephin3@158.181.72.222) (Ping timeout: 252 seconds)
[05:22:33] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[05:22:51] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 245 seconds)
[05:23:21] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:30:17] *** Joins: slackhunter (~0@191.37.24.141)
[05:33:33] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[05:42:37] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 256 seconds)
[05:43:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:44:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:44:00] *** ChanServ sets mode: +v npaperbot
[05:50:33] *** Quits: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie) (Ping timeout: 256 seconds)
[05:50:42] *** Joins: nshire (~nshire@user/nshire)
[05:57:02] *** Quits: slackhunter (~0@191.37.24.141) (Quit: Leaving)
[06:00:39] *** Quits: malloy (~jimery@120.235.172.192) (Read error: Connection reset by peer)
[06:01:11] *** Joins: malloy (~jimery@120.235.172.192)
[06:01:58] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 250 seconds)
[06:04:21] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[06:04:50] *** Joins: zmt00 (~zmt00@user/zmt00)
[06:09:15] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:11:58] *** Joins: Inline__ (~Inline@p200300cd470cd6007b9a329b320e25d9.dip0.t-ipconnect.de)
[06:14:32] *** Quits: Inline (~Inline@p200300cd47082500eff0453775466c26.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[06:18:54] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[06:19:51] *** Joins: c4017w__ (~c4017@209.52.68.8)
[06:22:03] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:23:15] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[06:27:05] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[06:28:04] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[06:31:21] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[06:31:29] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[06:35:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:39:54] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:44:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:45:28] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[06:45:54] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[06:50:37] *** Quits: malloy (~jimery@120.235.172.192) (Read error: Connection reset by peer)
[06:56:20] *** Joins: malloy (~jimery@120.235.172.192)
[06:58:46] *** Joins: xisop (~xisop@bnull.net)
[07:05:48] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Ping timeout: 240 seconds)
[07:08:12] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Ping timeout: 240 seconds)
[07:10:24] *** Joins: k8yun (~k8yun@user/k8yun)
[07:12:48] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[07:13:20] *** Joins: adeliktas4 (~adeliktas@i59F5FD1E.versanet.de)
[07:15:12] *** Quits: adeliktas (~adeliktas@i59F4D410.versanet.de) (Ping timeout: 250 seconds)
[07:15:12] *** adeliktas4 is now known as adeliktas
[07:17:47] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[07:18:04] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[07:20:37] *** Joins: c4017w_ (~c4017@209.52.68.8)
[07:22:10] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[07:24:22] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 268 seconds)
[07:25:51] *** Joins: arch-angel (~arch-ange@user/arch-angel)
[07:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:01:23] *** Joins: smeso (~smeso@user/smeso)
[08:02:11] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[08:05:32] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[08:09:57] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:15:00] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[08:17:39] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 252 seconds)
[08:21:10] *** Joins: c4017w__ (~c4017@209.52.68.8)
[08:22:18] *** Joins: EdFletcher (~PKD@user/edfletcher)
[08:24:32] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[08:26:29] *** Joins: xkuru (~xkuru@user/xkuru)
[08:30:10] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 250 seconds)
[08:31:57] *** Quits: xisop (~xisop@bnull.net) (Quit: leaving)
[08:32:18] *** Joins: xisop (~xisop@bnull.net)
[08:33:13] *** Quits: Giovanni (~Giovanni@176.55.166.222) (Remote host closed the connection)
[08:34:12] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[08:48:27] *** Quits: malloy (~jimery@120.235.172.192) (Read error: Connection reset by peer)
[08:51:13] *** Joins: kaph_ (~kaph@151.43.120.248)
[08:54:38] *** Joins: malloy (~jimery@120.235.172.192)
[09:03:33] *** Quits: kaph_ (~kaph@151.43.120.248) (Read error: Connection reset by peer)
[09:04:26] *** Joins: kaph (~kaph@151.43.120.248)
[09:05:21] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:11:57] *** Joins: Kerr (~Kerr@2601:602:ce80:df10::b76e)
[09:14:56] *** Quits: msk (~msk@103.213.213.65) (Remote host closed the connection)
[09:21:38] *** Joins: c4017w_ (~c4017@209.52.68.8)
[09:25:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[09:27:55] *** Quits: kaph (~kaph@151.43.120.248) (Read error: Connection reset by peer)
[09:38:03] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[09:39:26] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:41:21] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[09:42:36] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[09:43:52] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:44:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:44:00] *** ChanServ sets mode: +v npaperbot
[09:47:45] *** Joins: xkuru (~xkuru@user/xkuru)
[09:48:59] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[09:59:31] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:01:34] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[10:05:49] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[10:10:05] *** Joins: x_kuru (xkuru@user/xkuru)
[10:11:13] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:12:52] *** Quits: Garbanzo__ (~Garbanzo@2602:304:6eac:dc10::43) (Ping timeout: 250 seconds)
[10:13:49] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 256 seconds)
[10:15:11] *** Quits: k8yun (~k8yun@user/k8yun) (Ping timeout: 256 seconds)
[10:16:17] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[10:21:29] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[10:21:58] *** Joins: c4017w__ (~c4017@209.52.68.8)
[10:25:00] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[10:30:29] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[10:30:54] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:38:26] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[10:38:51] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:42:13] *** Joins: JohnMS_AWAY (~kvirc@194.110.240.100)
[10:42:14] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[10:42:50] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[10:46:35] *** Joins: emerent_ (~quassel@p200300cd5743c35fba27ebfffed28a59.dip0.t-ipconnect.de)
[10:46:36] *** emerent is now known as Guest5106
[10:46:36] *** emerent_ is now known as emerent
[10:46:40] *** Quits: Guest5106 (~quassel@p200300cd5743c32cba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:47:11] *** Joins: evangeline (~Eleanor@178.79.105.181)
[10:48:50] *** Quits: davidlowryduda (~davidlowr@2601:197:600:1210:adfa:97b2:16e:b6e4) (Ping timeout: 250 seconds)
[10:50:37] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:50:52] *** Joins: davidlowryduda (~davidlowr@73.61.8.192)
[10:52:19] *** Quits: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:53:41] *** Quits: malloy (~jimery@120.235.172.192) (Read error: Connection reset by peer)
[10:58:42] *** Joins: malloy (~jimery@120.235.172.192)
[10:58:46] *** Joins: manjaro-user (~manjaro-u@199-7-158-51.eng.wind.ca)
[11:07:20] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[11:08:07] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:12:33] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[11:14:22] *** Joins: blackout69 (~blackout6@37.183.198.248)
[11:22:42] *** Joins: c4017w_ (~c4017@209.52.68.8)
[11:26:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[11:36:29] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[11:39:25] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[11:42:34] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 250 seconds)
[11:48:59] *** Parts: blackout69 (~blackout6@37.183.198.248) ()
[11:49:58] *** Joins: CaCode (~CaCode@user/cacode)
[11:57:19] *** Joins: zmt01 (~zmt00@user/zmt00)
[11:58:12] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[12:05:07] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:05:42] *** Joins: unixpro1970 (~unixpro19@c-67-168-187-106.hsd1.wa.comcast.net)
[12:06:49] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[12:07:03] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[12:11:55] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:15:28] *** Quits: CaCode (~CaCode@user/cacode) (Remote host closed the connection)
[12:23:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[12:26:11] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 245 seconds)
[12:34:01] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:36:09] *** Joins: robod34 (~Username@79.113.243.73)
[12:39:15] <malloy> hello, how to use 'std::chrono_literals::1s' ?
[12:42:33] <Latexi95> { using namespace std::chrono_literals; auto one_second = 1s; }
[12:42:34] <geordi>  
[12:44:37] *** Joins: rond_ (~rond_@90.254.208.190)
[12:45:35] <rond_> Hi! I define #define MY_DEBUG_FLAG and I use #ifdef MY_DEBUG_FLAG everywhere in the code. Is there a tool to parse my source code to exclude such sections?
[12:46:36] <rond_> input: project (directory) with hpp/cpp files containing #ifdef MY_DEBUG_FLAG ... #endif sections. Output: same project, but with no such sections included (as they pollute code and make reading code inconvenient)
[12:46:47] *** Joins: meator (~meator@user/meator)
[12:49:27] <Shell> rond_: http://dotat.at/prog/unifdef/
[12:50:47] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:57:11] <rond_> Shell "unifdef" - brililant name :D  thank you!
[12:57:27] <meator> Hi. What are the pros and cons of header only programs (not libraries)?
[12:57:29] <meator> A program I'm working on is header only. The dev said that this reduces compile time, that compilation of header only code will use only one control unit of CPU, which will be faster, but I'm skeptical about that.
[12:59:08] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[13:01:08] *** Joins: plastico (~plastico@neomutt/plastico)
[13:04:12] <rond_> no lilnking perhaps? idk
[13:06:37] *** Quits: manjaro-user (~manjaro-u@199-7-158-51.eng.wind.ca) (Ping timeout: 240 seconds)
[13:13:46] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:15:58] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[13:19:37] *** Joins: blackout69 (~blackout6@37.183.198.248)
[13:23:45] *** Joins: c4017w_ (~c4017@209.52.68.8)
[13:26:53] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:27:00] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[13:29:25] *** Joins: ville (~ville@user/ville)
[13:34:04] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:43:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:44:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:44:00] *** ChanServ sets mode: +v npaperbot
[13:46:30] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[13:48:10] *** Joins: DSpider (~DSpider@82.79.237.72)
[13:48:10] *** Quits: DSpider (~DSpider@82.79.237.72) (Client Quit)
[13:48:11] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[13:50:20] *** gentooclimax is now known as climax
[14:00:08] *** Joins: undephin3d (~undephin3@158.181.72.222)
[14:00:19] *** climax is now known as gentooclimax
[14:02:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:04:54] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:07:48] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:08:20] *** Parts: v4mp (~v4mp@user/v4mp) ()
[14:13:22] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[14:14:34] * Haohmaru hypnotizes nolyc orthogonally
[14:14:36] <Haohmaru> !rq
[14:14:36] <nolyc> Haohmaru: <CarloWood> What is the command? I'll try
[14:16:12] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:16:55] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 256 seconds)
[14:18:02] <LordKalma> ahahah header only makes compilation faster
[14:18:03] <LordKalma> no
[14:18:46] <Haohmaru> overclocking your CPU makes compilation faster
[14:19:11] <Haohmaru> possibly also -O0 makes it faster
[14:20:06] <meator> It could make it faster, but having uncluttered header files can be really useful for a developer looking at the code.
[14:20:17] <ville> LordKalma: less translation units very well could. there's some up front cost for a translation unit and if other costs with those translation units are to small you could speed it up by switching to fewer translation units. effectively making things header-only
[14:21:25] <Haohmaru> you still need one .cpp to #include your header(s), right?
[14:21:36] <Haohmaru> and that .cpp doesn't have to have anything else
[14:22:01] <ville> sure you need one translation unit to produce a binary on any tool chain i know
[14:22:09] <Haohmaru> right
[14:22:33] <ville> but let's say the other extreme was 1 function per header/source pair
[14:22:45] <ville> there you are probably not very fast either
[14:22:50] *** Joins: darkbit (~db@136.158.8.67)
[14:23:02] <Haohmaru> so much files x_x
[14:23:21] <PJBoy> that's only slow because there's lots of header
[14:23:33] <PJBoy> and if it was header only it would just be lots of headers
[14:24:03] *** Joins: c4017w__ (~c4017@209.52.68.8)
[14:24:28] <ville> yes you _could_ transform a header/source pair to just header-with-inline, but that's not the only transform available as you imply
[14:24:49] <PJBoy> that's what header only means though, right?
[14:24:52] <PJBoy> everything's inline
[14:25:13] <PJBoy> with no implication on the number of header files, just that there are no source files
[14:25:39] <ville> what i tried to point out you don't necessarily go from: 1 function per header/source and then transform it into 1 function per header
[14:25:57] <Haohmaru> well, a "header-only" library would not have .cpp files, but a "header-only" program would need to have a .cpp
[14:25:59] <meator> The dev said that the header files can be splitted if the compiler wouldn't make object files and then link them, which is "much slower".
[14:26:03] <Haohmaru> or more like.. a TU
[14:26:13] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:26:33] <PJBoy> so you're saying many headers can be aggregated into a single header?
[14:26:47] <PJBoy> that would be true in both header only and header + source
[14:27:00] <ville> sure, just like you could go from the 1-function per header+source to a coarser division
[14:27:22] <meator> The program has one source file, which then calls a function in a header file that manages everything.
[14:27:25] <ville> it's just means to discuss that there are few dimensions you can move on here and all will have somme affect on compile times
[14:27:28] <Haohmaru> one character of code per header
[14:27:33] <Haohmaru> x_x
[14:27:41] <PJBoy> ok sure, there are many things that affect compile time
[14:27:44] <Haohmaru> this would even work.. thanks to macros
[14:27:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[14:27:50] <ville> well that's not going to quite work.
[14:27:54] <PJBoy> but being header only does strike me as always slower than an equivalent header + source
[14:28:17] <PJBoy> because you never get to save time on there being an existing object file that only needs linking
[14:28:19] <ville> PJBoy: number of TU will cost you at link time
[14:28:27] <PJBoy> that's true
[14:28:31] <PJBoy> I will give you that
[14:28:53] <Haohmaru> linker has to juggle N objects like hot potatos
[14:29:04] <ville> point being it's again one of these things that you can't really any firm claims beyond trivial
[14:29:17] <ville> err make any
[14:29:39] <PJBoy> always good to stay grounded
[14:30:08] <PJBoy> but I agree with LordKalma's broad generalisation
[14:30:09] <meator> I think the dev is talking about a scenario when the program is being compiled for the first time (e.g. no previous object files).
[14:30:23] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[14:32:49] <LordKalma> the problem with "half" the header-only things is that you #include them in 500 places and recompile inline functions 3000 times
[14:33:38] <LordKalma> regardless, the big pro with header-only libraries, that I came to appreciate, is that you're guaranteed to build your dependency with the compiler flags you want
[14:33:50] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[14:35:28] <meator> Header-only libraries certainly have their advantages, but I'm talking about a header-only program.
[14:36:01] <LordKalma> header-only program doesn't make much sense to me... your write everything in header file, and just #include them all in a single .cpp file with main()?
[14:37:00] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[14:37:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[14:38:05] <meator> The .cpp file includes a single header, which itself includes the things it needs.
[14:38:47] <LordKalma> that's writing everything in a single .cpp file, with extra steps
[14:39:01] <meator> Yes.
[14:40:26] <meator> Does that have some performance advantages?
[14:40:29] <LordKalma> I don't see how that would improve build time, as you're literally killing all parallelism
[14:41:17] <LordKalma> runtime performance? maybeeeeeeeeeeeeeeeeee because of the inlining argument
[14:42:56] <LordKalma> since the compiler can see in a single TU all functions it can inline function calls and things like that
[14:43:37] <meator> He said that that the compilation would occupy "only a single CU which burns the least amount of CPU and is quickest to compile".
[14:43:48] <barometz> that's....
[14:43:59] <barometz> potentially true on a single-core system but we don't live in 2002 anymore
[14:44:11] <LordKalma> as ville  said, 1 big TU vs lots of *really* tiny TUs might be better
[14:44:22] <LordKalma> but yeah, not an argument I'd buy in general, no
[14:45:02] <meator> I think that parallelism could have advantages in bigger projects, but the program I'm working on isn't that big.
[14:45:49] <LordKalma> regardless, I think my colleagues here would agree that one should  consider any kind of gospel sus in general
[14:46:55] <meator> Why do we then split code to header and source files?
[14:47:12] <LordKalma> it's called the "separated compilation model"
[14:47:34] <LordKalma> you technically don't ever need headers. headers serve to forward declare things so the compiler is happy
[14:48:09] <LordKalma> like, if you have `void foo();` in a header, that serves to tell everywhere you use foo() that it exists (or will exist)
[14:48:36] <LordKalma> you can just write  `void foo();` at the beginning of all cpp files you'll need it, and it'll work.
[14:49:30] <LordKalma> (or when you use templates, which aren't code you can build beforehand, so you have to build them everywhere you need them. again, you could copy-paste it)
[14:50:55] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[14:51:36] <meator> Let me ask a better question. Why do we have multiple source files? Is this only for big projects, so that they wouldn't need to recompile everything when a single line of code is changed?
[14:51:44] <PJBoy> exactly
[14:52:00] <PJBoy> also for general sanity
[14:52:21] <PJBoy> languages that don't compile like python still split things up into files for organisation
[14:52:53] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[14:53:29] <PJBoy> conversely, you can opt for a "unity" build in C++ where the build combines all your source files into one big one and compiles that
[14:54:05] <PJBoy> losing all the benefits of incremental build, but making a gain on clean builds and possibly improved codegen
[14:54:14] <LordKalma> meator, in fact, I've written header files that are like "numeric_utils.hpp" and then write a *single* function in that header per cpp file
[14:54:22] <LordKalma> so it's not like headers and source files have to be pairs
[14:55:36] <LordKalma> good enough improvements on LTO ought to kill the unity build
[14:56:01] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[14:56:15] <PJBoy> I have at least one big header in my main personal project whose associated source file needs to be split up into multiple
[14:56:34] <LordKalma> also, I hope you have a lot of RAM to do a unity build on anything decently sized
[14:58:36] *** Quits: proller (~p@2a02:6b8:b081:6411::1:30) (Ping timeout: 252 seconds)
[14:58:47] <PJBoy> not sure if you can get any parallelism off of unity builds
[14:59:25] <LordKalma> but you essentially end up with the full tree and associated crap in ram at the same time
[14:59:44] <PJBoy> they seem maybe good for release builds, though still I'd stay away from them if possible
[15:00:13] <PJBoy> suddenly your static declarations / anonymous namespaces clash
[15:00:14] <LordKalma> meh, I enable IPO/LTO on cmake and that«s good enough for me
[15:00:25] <LordKalma> haha yeah
[15:00:54] <LordKalma> I'm using /fp:fast, I should now add enabling contraction of fp operations
[15:00:58] <PJBoy> and I don't want to code in a world that doesn't allow those
[15:01:26] <PJBoy> you should use test driven development for your floating point flags
[15:01:36] <PJBoy> enable the most inaccurate possible flags and construct tests that fail
[15:02:22] <PJBoy> eh that only gets you so far
[15:02:44] <PJBoy> figuring out if you can use fast floating point math is tricky
[15:03:55] <meator> Can I have multiple source files act as a single "translation unit" without crazy includes and with the performance benefits of having everything at once?
[15:04:16] <LordKalma> that's what LTO is for
[15:04:17] *** Joins: anyone (~filler@a4.inai.de)
[15:04:21] *** Joins: rendar (~rendar@user/rendar)
[15:04:30] <ville> sure, a build system could have a mechanism to do that for you
[15:04:34] <LordKalma> it's supposed to bring out the benefits of TU awareness
[15:04:46] <LordKalma> (without all the insanity)
[15:04:55] <rendar> i see
[15:05:27] <ville> rendar: that wasn't for you
[15:05:34] <rendar> oh sorry
[15:05:43] <rendar> let me rewrite the question then: in my old code i used this: an MY_EXPORT macro that if i was compiling the library it exported the function, if it was compiling an executable, it imported the function, but ..i don't know, is this method common?
[15:05:43] <LordKalma> cmake calls it IPO: https://github.com/ruilvo/aether_sdr/blob/master/cmake/ipo_support.cmake
[15:06:07] <LordKalma> rendar, every single library has a header file like that
[15:06:26] <ville> rendar: are you taking about symbol visibility on windows?
[15:06:48] <rendar> ville, yes
[15:06:55] <rendar> LordKalma, i see, ok
[15:07:01] <ville> LordKalma: and no they don't
[15:07:49] <ville> rendar: sure. if you wish to support windows then it's fairly common to have such export macro to control that
[15:08:17] <rendar> what about i don't want/need to support Windows? i don't need that system anymore?
[15:08:36] <LordKalma> default visibility on other systems is "visible", so no
[15:08:43] <LordKalma> ville, hyperbole, of course
[15:09:06] <ville> rendar: upto you. some could think it's prudent to only make visible things that are meant to be directly used by the users of the library
[15:09:51] <LordKalma> yeah, I default to hidden on nix as well
[15:10:38] <ville> rendar: but you already sort-of achieve this by other means such as not declaring something in a header for example, or in an "implementation" namespace or...
[15:10:45] <LordKalma> rendar, you're probably talking about something around these lines: https://github.com/pothosware/SoapySDR/blob/master/include/SoapySDR/Config.h#L36
[15:11:06] *** Joins: rond_ (~rond_@90.254.208.190)
[15:11:11] <LordKalma> which cmake does for you, btw: https://cmake.org/cmake/help/latest/module/GenerateExportHeader.html
[15:11:29] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:11:40] <PJBoy> CMake you beautiful bastard
[15:11:54] <LordKalma> !grab PJBoy
[15:11:54] <nolyc> LordKalma: The operation succeeded.
[15:12:27] <PJBoy> > previous topic: FortranCInterface
[15:12:30] <LordKalma> https://github.com/ruilvo/aether_sdr/blob/master/cmake/default_visibility.cmake and https://github.com/ruilvo/aether_sdr/blob/master/aether_dsp/CMakeLists.txt#L7 for an example
[15:12:48] <rond_> `auto j = foo(commplexComputation); for(; cond(j); j = someNewValue(j)){...}  // use `j` after the for loop.      since I iterate on value of `j`, should I put `j` before first semicolon in the `for` loop?
[15:13:06] <LordKalma> no
[15:13:16] <rond_> why?
[15:13:19] <LordKalma> I mean, you don't have to
[15:13:28] <LordKalma> you can if you want, and it's good to scope things
[15:13:30] <ville> rond_: it would be scoped to the for loop and you couldn't use it
[15:13:59] <PJBoy> I'd probably write `T j; for (j = foo(...); cond(j); j = ...) {}`
[15:14:08] <rond_> nice
[15:14:08] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:14:18] <PJBoy> but your way as written is completely fine
[15:14:24] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:14:32] <PJBoy> and I guess slightly better because it doesn't do a useless default construction
[15:14:53] <rond_> I thought about `T j = foo(...); for(j; cond(j); j = ... ) {}`
[15:15:02] <LordKalma> PJBoy,  I'll make you like CMake and Qt::Core
[15:15:05] <PJBoy> the `j;` there is just redundant
[15:15:15] <PJBoy> your compiler will probably warn on it
[15:15:22] <rond_> so it's not "good practice" (to indicate that we iterate on `j`) at all?
[15:15:31] <PJBoy> no, it's already perfectly clear
[15:15:43] <rond_> ack, thanks!
[15:16:54] <LordKalma> nack, invalid hash
[15:17:17] *** Quits: JohnMS_AWAY (~kvirc@194.110.240.100) (Ping timeout: 240 seconds)
[15:17:40] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[15:17:47] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[15:17:50] * PJBoy calls error handles by calling std::terminate
[15:18:27] <LordKalma> you're joking, but liquid-dsp calls exist() on some error conditions
[15:18:31] <LordKalma> because fuck you that's why, I guess
[15:18:43] <LordKalma> *calls exit()* of course
[15:19:00] <PJBoy> I've seen quite a number of "do x or die" programs
[15:19:08] <PJBoy> stupid perl
[15:19:24] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:19:27] <rond_> I debug with assert(false)
[15:19:40] <PJBoy> ;_;
[15:19:44] <rond_> :D
[15:20:21] <PJBoy> I go for `asm("int3");`, so I can't say much
[15:20:47] <rond_> woah
[15:20:57] <rond_> and debuggers always hang there?
[15:21:24] <rond_> would it work without debug mode?
[15:21:40] <PJBoy> yeah int3 is the "hey debugger, hey, listen, hey" command
[15:22:09] <LordKalma> the best debugger is Cheat Engine, don't @ me
[15:22:22] <LordKalma> honestly, cheat engine does amazing things
[15:22:24] <PJBoy> compilers have debugbreak() intrinsics that do the same thing, but I can never be bothered to look up how they're spelt
[15:22:44] <PJBoy> yeah cheat engine is good
[15:22:51] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[15:23:05] <PJBoy> there's another one calls MHS (for memory hacking software) that was giving cheat engine a run for its money
[15:23:12] <PJBoy> not sure if that one's still about anymore though
[15:23:28] <LordKalma> I edited my "money" on an assassins creed with their "find the memory with this value" tool
[15:23:30] <LordKalma> pretty amazing
[15:23:58] <LordKalma> you give it the current amount, it narrows down to the memory locations with that value, you spend some money so the value changes, and look for the new value just in the addresses previously found
[15:24:11] <undephin3d> My Amiga Action Replay Card could do this on an A500
[15:24:16] <LordKalma> 2 steps is usually enough to find the one or two places you can just edit
[15:24:19] <PJBoy> yup ^
[15:24:28] <PJBoy> that's the basic thing that you do to find cheats
[15:24:45] <PJBoy> and the first step of reverse engineering software
[15:24:47] *** Joins: c4017w_ (~c4017@209.52.68.8)
[15:24:50] <LordKalma> fuck Ubisoft, I wasn't going to pay for their dumb credits on AC:Unity
[15:24:56] <LordKalma> just edited all of it directly
[15:25:05] <LordKalma> microtra-what?
[15:25:06] <PJBoy> emulators have this stuff built in
[15:25:48] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:25:55] <PJBoy> it's actually not terribly difficult to thwart these kinds of attempts to find memory
[15:26:11] <PJBoy> pokemon fire red did a thing where they just moved memory around every frame
[15:26:19] <LordKalma> what I always think when I use cheat engine is how much a security gaping hole this is
[15:26:25] <PJBoy> so that stopped naive cheat searching using the above method
[15:26:27] <LordKalma> like, it's literally attaching a debugger to *any* exe
[15:27:46] <PJBoy> nowadays you could encrypt or sign your memory
[15:27:55] <PJBoy> or use trusted memory extensions
[15:28:02] <LordKalma> TPM 2.0 :D
[15:28:18] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 252 seconds)
[15:28:37] <PJBoy> and TEE on ARM
[15:28:37] <anyone> until such a point that retrogaming is much more popular
[15:28:54] <LordKalma> AMD Epyc server CPUs have an ARM CPU in them that encrypts memory. Even encrypts VMs with different keys, which is nice
[15:29:02] *** Joins: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl)
[15:29:18] <PJBoy> looking at how the TEE/REE stuff on ARM works is very much on my todo list
[15:29:28] <cbreak> if you want to defend against memory attacks: Move the memory to a server.
[15:29:28] <PJBoy> I've been falling behind on my ARM knowledge
[15:29:36] <PJBoy> that's a good one
[15:29:50] <cbreak> then it doesn't matter if you give yourself infinite local money, the server will just ignore it, or detect it
[15:29:55] <PJBoy> and then tell marketing to promote "always online" policies
[15:29:58] <LordKalma> cbreak, yes, ideally one with non-volatile memory
[15:30:03] <LordKalma> so you can literally steal it
[15:30:22] <LordKalma> https://downloadmoreram.com/
[15:30:39] <cbreak> RAM doubler did work... kind of
[15:30:53] <cbreak> but MacOS has it built in nowadays
[15:30:59] <cbreak> not sure about linux or windows.
[15:31:00] <anyone> it just has a new name, e.g. zram
[15:31:19] <LordKalma> is that basically ram-disks?
[15:31:33] <cbreak> no, instead of swapping, it compresses RAM contents
[15:31:37] <cbreak> since it's faster
[15:31:55] <cbreak> well, not instead of. In addition to, as first level before actually swapping
[15:32:33] <PJBoy> but what if my program loads gigabytes of data from /dev/urandom?
[15:32:52] <anyone> you can read as many gigabytes of urandom as you want as long as you don't try to store it
[15:32:52] *** Joins: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse)
[15:32:57] <PJBoy> hah
[15:33:15] <PJBoy> or more likely, I have a shitload of encrypted data in memory
[15:33:33] <PJBoy> encrypted data is supposed to be random-like
[15:33:36] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[15:33:39] <anyone> The irony is... if you deplete the universe of entropy, haven't you actually raised the entropy because you've collected it all in one place
[15:34:07] <LordKalma> yes but not
[15:34:28] <LordKalma> yes, you raised the entropy, but not because of that, but because in an isolated system, it can never decrease
[15:34:36] <LordKalma> themodynamics and all
[15:34:48] <LordKalma> to put in the work to reduce entropy you must create it elsewhere
[15:35:13] <cbreak> LordKalma: that's not entirely sure I think
[15:35:19] <cbreak> with black holes evaporating and all that
[15:35:48] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[15:36:21] <LordKalma> physicists have considered that http://www.scholarpedia.org/article/Bekenstein-Hawking_entropy
[15:39:05] <cbreak> LordKalma: that's about the entropy that can be imagined as being stuck inside the black hole
[15:39:36] *** Quits: adeliktas (~adeliktas@i59F5FD1E.versanet.de) (Ping timeout: 250 seconds)
[15:39:40] <cbreak> but it writes "the event horizon area of a black hole cannot decrease; it increases in most transformations of the black hole"
[15:39:55] <cbreak> I think nowadays, it is theorized that black holes CAN evaporate
[15:40:16] <cbreak> so... where does the entropy go? Hawking Radiation? That should be purely thermal.
[15:40:25] * cbreak is not a physicist
[15:46:09] <oj> entropy and information entropy are only superficially related
[15:46:31] <oj> entropy is an inverse measure of how much work the system can do
[15:47:04] <oj> entropy-removing operations don't exist in a closed system
[15:49:04] * oj hangs around physicist, but isn't one himself
[15:58:55] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:02:01] <lxsameer> b
[16:03:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:05:41] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:09:13] <onizu> Hello
[16:10:35] <onizu> Why is a function definition like: static void funcName(const int& x) { }  giving a warning as: "unreferenced function with internal linkage has been removed"
[16:10:51] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[16:10:53] <rpav> static makes it TU-local; you're not using it in that TU
[16:10:59] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[16:11:05] <onizu> TU?
[16:11:14] <rpav> translation unit, e.g. ".cpp file"
[16:11:26] <onizu> ok
[16:11:36] <onizu> I'm using it in the same cpp file
[16:11:49] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[16:11:54] <onizu> only from within a function which isn't static itself
[16:12:01] <onizu> does that matter?
[16:12:03] <oj> is the definition there?
[16:12:08] <oj> or only the declaration?
[16:12:22] <onizu> the definition is in the cpp (no declaration)
[16:12:37] <rpav> i don't think it would have that warning if it were only a decl .. it's probably a linker warning
[16:13:02] <rpav> if it's inlined, i wonder if that would do it
[16:13:14] <onizu> yes, "internal linkage"
[16:13:30] <oj> if it's really defined in the same file I don't see what could be wrong
[16:13:37] <rpav> sadly there is no `notinline`
[16:13:50] <oj> can you paste the file?
[16:13:55] <onizu> if I comment out the call / reference and just leave the definition, it still gives the warning
[16:14:10] <rpav> yeah i'm suspicious that you're calling an overload or something
[16:15:03] *** Joins: zmt00 (~zmt00@user/zmt00)
[16:16:06] <onizu> I found that a similar static function works, because it was declared in the hpp file , and this one is not declared, sorry
[16:16:25] <onizu> so we cannot have non-declared functions in a cpp file?
[16:16:28] <rpav> yeah, if you have a static in a header and it gets included elsewhere that's highly likely
[16:18:20] <onizu> rpav: the header has only the declaration of the static
[16:18:34] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:19:05] <rpav> post code
[16:19:11] <rpav> full working test case reproduction
[16:19:30] *** Parts: blackout69 (~blackout6@37.183.198.248) ()
[16:20:13] <PJBoy> declaring a static in a header and defining it in a source file?
[16:20:17] <PJBoy> that shouldn't work
[16:20:24] <rpav> why not
[16:20:41] <onizu> I think what it is accepting is to declare the static in the header and in the cpp define it as void ClassName::FuncName() { }
[16:20:52] <PJBoy> well it could work, but you'd have to define that function in every source file
[16:21:03] <PJBoy> so it's impractical
[16:21:04] <rpav> only if you _reference_ it in any given file
[16:21:06] <oj> I've never seen a static declaration in a header without a definition in it too
[16:21:12] <onizu> if I still call it static in the definition without the ClassName:: then it warns
[16:21:13] <PJBoy> oh that's true I suppose
[16:21:20] <rpav> i mean, of course it's silly, but a static prototype followed by a definition should compile
[16:21:52] <PJBoy> it's suspicious though
[16:22:02] <rpav> definitely .. it's pretty useless to have a static decl in a header
[16:22:13] <oj> onizu wait are you saying it's a member function
[16:22:27] <rpav> well
[16:22:35] <oj> void Class:foo() and void foo()  are completely different names
[16:22:48] <oj> s/Class:/Class::/
[16:22:53] <PJBoy> it would only have internal linkage if the class was in an anonymous namespace if that were the case
[16:23:01] <rpav> maybe some weird thing like `static void print_this_file();` which in every file you macro with __FILE__ or something pretty bad you could solve another way
[16:23:07] <onizu> oj no
[16:23:26] *** Quits: rond_ (~rond_@90.254.208.190) (Quit: Client closed)
[16:23:27] <oj> it's a static function in the class namespace?
[16:23:50] <PJBoy> think we should wait for the testcase
[16:24:04] <onizu> oj, no. It's just in the cpp file
[16:24:27] <oj> I'm having trouble following you, just post the source
[16:25:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[16:26:51] <rpav> yeah discussing someone's (mis)interpretation of what their code is doing is always a losing endeavor ;/
[16:27:36] <onizu> making a test case
[16:27:51] <oj> it sounds like it's a static member function tbh
[16:28:45] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[16:29:03] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:29:16] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[16:29:36] <PJBoy> I'm anticipating both a static member function and a static non-member function
[16:30:13] <oj> yup
[16:32:00] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:4998:5f5e:9ad1:1206)
[16:32:00] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:4998:5f5e:9ad1:1206) (Changing host)
[16:32:00] *** Joins: skapata (~Skapata@user/skapata)
[16:36:37] *** Joins: ymwm_ (~yingmanwu@110.85.123.64)
[16:38:58] *** Quits: ymwm (~yingmanwu@110.85.123.161) (Ping timeout: 250 seconds)
[16:39:29] <onizu> something like this: https://wandbox.org/permlink/OfMVk5wdGGJ0ds59
[16:41:00] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[16:42:38] *** Joins: sigma_ (~sigma@2.147.230.56)
[16:43:37] <onizu> Func4 (member) is static declared in the header and defined in the cpp. Other functions(non-static, non-member) defined in the cpp, work. A static function (non-member) defined in the cpp, warns
[16:43:48] <onizu> ref. the test case
[16:46:47] <oj> so what is it you want Func1() to do?
[16:46:56] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[16:47:20] <oj> are you saying you don't want to call it in Test::Func4?
[16:48:03] <oj> because yeah, if you're not using Func1 then the compiler will rightly just remove the function
[16:48:34] <oj> because it's static it can't be  called from a different cpp file, so the compiler knows it won't ever be used
[16:49:47] <onizu> Ok, lets say it is not being called in Test::Func4, but from other non-static non-member functions
[16:50:03] <oj> those functions need to be in this file
[16:50:21] <oj> because the function can't be called from a different file
[16:50:22] <onizu> they are (Func2, Func3)
[16:50:39] <oj> But Func2 and Func3 don't call Func1
[16:51:23] <onizu> yea I didn't do that in the test case, as in my current scenario I have commented out any call to that static (Func1)
[16:51:31] <rpav> why are you defining a func1 that's static if you're not calling it in that file
[16:51:55] <onizu> So is it warning because it is not being called?
[16:51:57] <oj> if you've commented out the use but are planning to use the function again then you can ignore the warning
[16:52:18] <oj> yes, that's why it's warning
[16:52:47] <onizu> MSVC doesn't build successfully if that warning is given
[16:52:57] <onizu> (in my current set up)
[16:52:57] <oj> the warning is there to draw your attention to the dead code in that function
[16:53:23] <oj> you can turn the warning off, but you should do it locally for only that function
[16:53:25] <onizu> ok, I got the reason now, thanks
[16:53:57] <onizu> I think I would just comment the static
[16:54:01] <onizu> definition
[16:55:20] <oj> that's also a solution
[16:55:42] *** Joins: k8yun (~k8yun@user/k8yun)
[16:56:34] <sigma_> hi, i have a problem in qt, i cant print QChar like character on screen. just print unicode number like u0000. my example : https://wandbox.org/permlink/UEnhZF4aHVPeIIL2
[16:57:56] <sigma_> i need to set any argument ?
[16:58:06] *** Quits: msim_ (~msim@2001:8003:d194:d000::d8d) (Read error: Connection reset by peer)
[16:58:38] *** Quits: malloy (~jimery@120.235.172.192) (Read error: Connection reset by peer)
[16:58:48] *** Joins: msim_ (~msim@2001:8003:d194:d000::d8d)
[17:04:19] *** Joins: malloy (~jimery@120.235.172.192)
[17:05:13] *** Quits: ymwm_ (~yingmanwu@110.85.123.64) (Remote host closed the connection)
[17:05:41] *** Joins: ymwm_ (~yingmanwu@110.85.123.64)
[17:06:16] *** Quits: ymwm_ (~yingmanwu@110.85.123.64) (Max SendQ exceeded)
[17:06:43] *** Joins: ymwm_ (~yingmanwu@110.85.123.64)
[17:07:51] *** Joins: andreasbuhr (~quassel@p549db53a.dip0.t-ipconnect.de)
[17:11:09] <ashafq> https://github.com/jackaudio/example-clients/blob/master/capture_client.c#L143 What is the equivalent function of this in std::?
[17:13:36] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:14:30] <undephin3d> https://en.cppreference.com/w/cpp/thread/mutex/try_lock
[17:14:37] <Gamah> mutex::try_lock?
[17:15:33] *** Joins: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[17:17:43] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:18:13] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[17:20:25] <anyone> If 0xFFFFFF could be regarded as "UINT24_MAX", what name would you give a constant value like 0xFF000000 if you had to?
[17:21:22] <ashafq> anyone: ~UNINT24_MAX 😊
[17:21:54] <Haohmaru> that may be 0xFFFFFFFFFF000000
[17:21:56] <Haohmaru> >:)
[17:21:57] *** Quits: k8yun (~k8yun@user/k8yun) (Read error: Connection reset by peer)
[17:22:03] <LordKalma> auto OxFF000000 = 0xxFF000000
[17:22:16] <LordKalma> auto OxFF000000 = 0xFF000000; // *
[17:22:26] <anyone> Haohmaru: sign extension may be fine, but that'll be hard if it happens to be unsigned
[17:22:41] <Haohmaru> i was kidding
[17:22:57] <ashafq> LordKalma: help me out with that queue thing
[17:23:10] <LordKalma> I would if I was qualified to
[17:23:27] * Haohmaru qualifies LordKalma with const and volatile
[17:23:54] <ashafq> LordKalma: It is kinda working with hacky sleep and stuff
[17:24:01] <ashafq> But I get a lot of dropouts
[17:24:10] <cbreak> don't use sleep...
[17:24:14] <LordKalma> explain the issue again
[17:24:35] <cbreak> in a queue, you'd wait.
[17:24:51] <ashafq> cbreak: I am trying not to use sleep. But I don't know enough about the API to implement what I want.
[17:25:16] <ashafq> LordKalma: So there are two threads, a disk thread reading PCM files from wav or mp3
[17:25:35] <ville> !give ashafq williams
[17:25:36] <nolyc> ashafq: C++ concurrency in action by Anthony Williams: http://www.manning.com/williams/
[17:25:49] <ashafq> The other is the audio thread which is just playing back the decoded audio
[17:26:09] <ville> that book tells you how to implement a simple queue you can use to communicate correctly between two threads
[17:26:10] <anyone> ring buffer
[17:26:11] *** Joins: c4017w_ (~c4017@209.52.68.8)
[17:26:19] <ashafq> ville: Thank you so much
[17:26:41] *** Joins: guest29032 (~guest2903@223.179.139.248)
[17:26:48] <ashafq> anyone: I implemented a lock-free ring buffer as well.
[17:26:48] <ville> start off with that. work your way towards something more exotic or specialized if there is need
[17:26:58] <LordKalma> that's a very classical thing
[17:27:04] <LordKalma> ashafq, look at miniaud.io
[17:27:42] <Haohmaru> first you want at least a double buffer ;P~
[17:28:34] <ashafq> Haohmaru: int16_t please
[17:28:44] <Haohmaru> i meant two buffers
[17:28:51] <ashafq> 😊
[17:29:10] <cbreak> I think what I recommended a few days ago would work better
[17:29:12] <ashafq> ville: Thank you!
[17:29:24] <Haohmaru> cbreak which was?
[17:29:30] <ville> all these you want this, you need that, are just nonsense. you don't need anything if you don't have actual requirements
[17:29:31] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[17:29:35] <cbreak> having a deque of buffers with a mutex to protect it, possibly with a second deque of vectors to recycle allocations if needed
[17:29:48] <cbreak> and a CV to allow waiting if you want to wait on full / empty state
[17:29:49] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[17:30:03] <Haohmaru> ^ this
[17:30:04] <anyone> or could use a flip buffer
[17:30:05] <ville> if your only requirement is to communicate between two threads then what's in the book will do. if you then have performnace-related requirements you can tune it
[17:30:21] <LordKalma> or a "smart" queue where you register and use callbacks
[17:30:50] <ashafq> LordKalma: I have never heard about smart queue. Need to look that up.
[17:31:05] <cbreak> they're like smart lightbulbs: Actually quite dumb.
[17:31:06] <anyone> it's not a set term (I'd say), just a way to describe it here
[17:31:25] *** Quits: ymwm_ (~yingmanwu@110.85.123.64) (Remote host closed the connection)
[17:31:25] <LordKalma> I just invented the term
[17:31:31] <LordKalma> yeah that
[17:31:46] <Haohmaru> you're so innovative
[17:31:59] <LordKalma> I'm the steve jobs of my generation
[17:32:15] <Haohmaru> the jeve stobs of queues
[17:32:29] <cbreak> such british. much queueing.
[17:34:43] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:35:13] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[17:36:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[17:36:54] <sigma_> hi, i have a problem in qt, i cant print QChar like character on screen. just print unicode number like u0000. my example : https://wandbox.org/permlink/UEnhZF4aHVPeIIL2
[17:36:54] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:37:07] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[17:37:11] *** Quits: davidlowryduda (~davidlowr@73.61.8.192) (Ping timeout: 256 seconds)
[17:37:32] *** Quits: plastico (~plastico@neomutt/plastico) (Ping timeout: 252 seconds)
[17:37:36] <cbreak> sigma_: QChar is a utf16 code unit
[17:38:10] <cbreak> that paste only shows an "Application Error" from wandbox
[17:38:21] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[17:39:18] *** Joins: davidlowryduda (~davidlowr@2601:197:600:1210:b19d:d8f1:1756:fb98)
[17:39:24] <sigma_> cbreak : i know
[17:39:47] <sigma_> but in wandbox i just example
[17:40:34] <ville> sigma_: for some reason wandbox no longer works. for some. we can't see your paste. the website simply errors.
[17:40:50] <ville> !paste
[17:40:51] <nolyc> Paste your test case to https://godbolt.org/ or http://coliru.stacked-crooked.com/ or https://wandbox.org/ or another pastebin that can compile code. Do _not_ paste to the channel. See the testcase checklist at http://eel.is/c++/testcase
[17:41:10] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[17:41:57] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[17:42:08] <sigma_> https://godbolt.org/z/r3YvT773E
[17:43:15] <sigma_> this is better ?
[17:43:53] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:43:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:44:02] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:44:02] *** ChanServ sets mode: +v npaperbot
[17:44:52] <sigma_> i dont think can compile, i just paste code for example.
[17:45:34] <cbreak> QChar themselves might not be a character
[17:45:53] *** Joins: plastico (~plastico@neomutt/plastico)
[17:46:10] <anyone> so... call it NotAChar instead?
[17:46:33] <sigma_> cbreak : in this video https://www.youtube.com/watch?v=AgNtMtdw3a4 on 7.19
[17:46:42] <rpav> no, QChar is accurate, in that qt extends the tradition of C++ terrible naming to _really_ qterrible qnaming
[17:46:44] <anyone> ville: it seems to be firefox-specific, the wandbox error
[17:47:10] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:47:41] <Haohmaru> QuiteTerrible
[17:48:06] <cbreak> sigma_: not sure how much you know about unicode
[17:48:26] <cbreak> I think QChar is a utf-16 code unit. Some code points require multiple such code units to be encoded
[17:48:35] <rpav> Haohmaru: a good hackronym
[17:48:58] <cbreak> and some code points are ... pointless, without combining with other code points, for example umlauts in decomposed form
[17:49:03] <sigma_> cbreak : i know enough
[17:49:17] <cbreak> I don't know how arabic stuff is encoded, but it might very well be that the characters make no sense on their own
[17:49:37] <cbreak> I'd recommend using QString for text
[17:49:41] <cbreak> not individual QChar
[17:50:05] <cbreak> iterating over unicode text is annoying.
[17:50:20] <rpav> only because we lack good tools in C++
[17:50:31] <cbreak> no
[17:50:43] <rpav> yes; good tools would let you iterate graphemes
[17:50:45] <Haohmaru> rpav you have all the tools you need.. ;P~
[17:50:45] <cbreak> because unicode is encoded in different annoying ways
[17:50:46] <sigma_> cbreak : i use Qstring  or std::string is work but i want character
[17:51:07] <rpav> Haohmaru: if you think that then you need to deal more with unicode
[17:51:15] <Haohmaru> no, thanks
[17:51:41] <rpav> cbreak: it doesn't which form you encounter, they are all well-defined and good, well-written tools would handle the variations
[17:51:43] <rpav> it's not even that much work
[17:51:49] <Haohmaru> dealing with anything that interfaces directly with humans is a horror
[17:52:09] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[17:52:18] <cbreak> rpav: the problem is that the variation sometimes matters, and sometimes it doesn't.
[17:52:38] <cbreak> iterating over graphemes might make sense, or it might not, depending on context
[17:52:44] <rpav> it doesn't matter in terms of iterating graphemes
[17:53:00] <rpav> the code can make the choice whether it cares about iterating graphemes or codepoints, and should have the option to do either
[17:53:08] <sigma_> so  mybe i need set argument
[17:53:23] <rpav> right now the option is "ignore the problem and hope no one notices or has to deal with it"
[17:53:24] <cbreak> sigma_: what do you want characters for?
[17:53:39] <sigma_> cbreak compare
[17:53:40] <cbreak> sigma_: if you want them for utf16 code units, then that's fine. that's what you get.
[17:53:48] <cbreak> ... don't compare code units :/
[17:53:55] <cbreak> unicode comparisons are also annoying
[17:54:03] <sigma_> compare character
[17:54:12] <cbreak> with all the code points that look the same but differ in value
[17:54:13] <sigma_> sort character
[17:54:18] <cbreak> and the different normalizations
[17:54:42] <cbreak> working at the code unit level will screw up comparison in many situations
[17:54:51] *** Joins: jp__ (~jp@bl13-171-74.dsl.telepac.pt)
[17:55:32] *** Joins: k8yun (~k8yun@user/k8yun)
[17:56:07] <jp__> rpav: which country you live in?
[17:56:47] <sigma_> so how can i sort string with out know about a first character
[17:57:22] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[17:58:03] <sigma_> i imagine qt can make that easy, for working an unicode
[17:58:06] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[17:58:51] <rpav> jp__: the US, and i occasionally deal with a fair bit of international text and text rendering
[17:59:41] <rpav> unicode has made a number of poor choices, but it's better than dealing with a bunch of different encodings for everything
[18:02:01] <cbreak> sigma_: Qt's QString have operator< I'm quite sure
[18:02:22] <cbreak> I don't remember how good it is
[18:02:32] <cbreak> but it hopefully is not as bad as comparing code units directly
[18:03:13] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:03:43] <jp__> rpav: i thought myaybe northern europe from the picture
[18:03:59] <rpav> jp__: if you have a picture it's probably not me
[18:05:05] <jp__> ah yeah sorry that was friithian
[18:05:31] <jp__> friithian: where do you live?
[18:05:33] <rpav> you could actually have deal with strings in terms of like, ustring<normalization>
[18:05:41] <rpav> +/
[18:07:28] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[18:09:30] <jp__> my code worked just fine,i added some code and now it gets seg faults... i comment out the new code, still seg faults. i try running debugger, debugger build works flawlessly. i uncomment new code,still works flawlessy in debugger mode. release/profile modes still crash with seg fault.
[18:10:02] <jp__> any ideas of scenarios where this happens?
[18:11:45] <rpav> -fsanitize=address
[18:11:50] <rpav> or is this threaded code
[18:11:58] <jp__> nope
[18:13:16] <jp__> what is that,like a flag i pass to ide?
[18:14:06] <sigma_> jp_: the seg is for memory mybe bad pointer
[18:14:20] <rpav> jp__: is this gcc/clang or vs
[18:14:26] <rpav> and/or what platform i guess
[18:14:35] <jp__> gcc/clang
[18:14:48] <jp__> ubuntu latest lts
[18:14:58] <jp__> x64
[18:15:34] <rpav> then it's a gcc/linker flag
[18:15:59] <jp__> sigma: yeah,like out of bounds... except it doesn't happen with debug
[18:17:10] <rpav> not happening with debug only means you mihgt have a dangling pointer that happens to point to memory you own
[18:17:50] <sigma_> jp_: i forget the software name but i think you can track memory with vilingrid*
[18:18:01] <sigma_> i think
[18:18:17] <rpav> valgrind, and -fsanitize=address is like valgrind but instead of being 20-100x slower it's merely ~3x
[18:18:18] <fiesh> valgrind
[18:18:27] <rpav> also nicer output
[18:18:44] <sigma_> yeh, i like that
[18:18:48] *** Quits: guest29032 (~guest2903@223.179.139.248) (Quit: Client closed)
[18:19:10] <jp__> rpav: the dangling pointer is the highest probability?
[18:19:37] <rpav> it's a possibility but there are tons of possibilities
[18:20:17] <rpav> compiling with optimizations might optimize out some UB that ends up in your code crashing
[18:20:19] <sigma_> no, mybe you have multi thread or they want same memory on same time
[18:21:36] <jp__> nah i am running single thread
[18:22:12] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:22:23] <jp__> it might be optimization as the code ran just fine before
[18:22:52] <sigma_> jp_: mybe becuse they try compact memory too
[18:23:53] <anyone> ASAN uses a shadow space, valgrind however interprets instructions. Sometimes, one of the finds something the other doesn't.
[18:24:18] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Ping timeout: 252 seconds)
[18:24:35] <fiesh> why not compile it in release mod with debugging symbols and just use a debugger?
[18:24:44] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:25:14] <fiesh> not sure what the issue is exactly if the crash is reproducible anyway
[18:25:20] <rpav> -Og is potentially helpful
[18:25:27] <jp__> because i noop
[18:25:53] <anyone> stop being poor and learn asm, then -O2 isn't a problem ;-)
[18:25:54] <jp__> still hatent figured out how to set the linker flags
[18:25:59] <rpav> -Og / -O2 and debug is probably the best place to start since you've got a binary and don't have to rebuild with sanitizers
[18:26:27] <jp__> what is -0g?
[18:26:28] <rpav> but while you're doing that build with sanitize unless your program is trivial enough you can run in valgrind
[18:26:30] *** Joins: c4017w__ (~c4017@209.52.68.8)
[18:26:34] <rpav> not zero, O
[18:26:40] <jp__> what is ->Og?
[18:26:42] <rpav> "optimize for debugging"
[18:27:20] <rpav> optimizations that try to not break debug ability too much, but if that can't repro then -O2 .. if -O2 can't repro in gdb i'd still suspect timing error, but maybe not
[18:27:21] <jp__> .oh i'm using qt don't know here those options hide
[18:27:24] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:28:13] <rpav> somewhere in build options
[18:28:25] <jp__> timming error? i have a timer in the prog but its only there as a placeholder....
[18:29:19] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:29:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[18:30:00] <Alipha> meator: has your coworker never heard of incremental build?? any mid-sized to large-sized project is going to be PAINFUL to recompile the whole thing each time, which is what happens with "header-only" programs/libraries. just a couple days ago someone was in here hacking in a change because the hack would involve changing only one cpp file (which i assume would take like a minute to recompile) instead
[18:30:02] <Alipha> of the more appropriate change of adding some compiler flags which would have taken 4 hours to recompile everything, he said.
[18:30:41] <jp__> nah the build options are quite universal,no options or flags
[18:34:40] *** Quits: JohnMS_AWAY (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 250 seconds)
[18:35:46] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[18:38:27] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:41:53] <meator> Alipha: As I said, the project isn't that big.
[18:42:42] <Alipha> meator: how long does it take to build?
[18:43:34] <jp__> is the apt version of valgrind ok?
[18:43:34] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:44:18] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:44:28] <meator> 4.07s
[18:45:10] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[18:48:47] <meator> LordKalma: I've been googling the things you and others talked about earlier, because I don't really know compilers and LTO has "increased compile time" (https://wiki.debian.org/LTO).
[18:49:25] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[18:49:43] <LordKalma> yes, that extra second on a small executable is horrible
[18:52:59] <meator> Should all small projects be header-only?
[18:53:21] <rpav> 3s -> 4s would be concerning if it increased _every_ compile-time by 1/3 but it's not going to
[18:53:50] <jp__>  nah changing the flags doesn't change anything and valgrind also says 0 errors
[18:53:59] <rpav> even if it crashes?
[18:54:58] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[18:56:33] <jp__> https://wandbox.org/permlink/MiK7BMIfEeeCb6ip
[18:56:47] <sigma_> jp_: valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose --log-file=valgrind-out.txt "./programe name" , valgrind doesnt say error just say any alloc and memory free
[18:56:57] <jp__> dunno,i did what the manual said
[18:57:14] <jp__> myeah thats probz a better way
[18:58:27] <rpav> you shouldn't valgrind on an ASAN-compiled bin .. in fact if it works, it's probably an indication it wasn't properly built
[18:58:51] <jp__> i valgrinded the sources....
[19:00:05] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[19:00:46] *** Joins: filename (~kilitary@188.242.105.134)
[19:02:24] <sigma_> jp_: line 30 ?
[19:04:34] <sigma_> jp_: search valgrind-memcheck.pdf
[19:04:56] <sigma_> have some option for pointer
[19:05:30] <jp__> ummm the website,but now i am running your command on the bin
[19:05:46] <jp__> i will check it out in a bit
[19:06:34] *** Joins: blackout69 (~blackout6@37.183.198.248)
[19:08:59] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:09:16] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:09:44] *** Joins: pulse (~pulse@user/pulse)
[19:20:26] *** Joins: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse)
[19:23:19] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[19:23:41] *** Quits: lh_mouse_ (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 252 seconds)
[19:24:31] *** Joins: paul424 (~tom@ip-5-172-234-77.multi.internet.cyfrowypolsat.pl)
[19:24:33] <jp__> so many qt errors
[19:24:47] <jp__> none the wiser though
[19:25:36] <jp__> the 41 errors are lib related on the check=yes
[19:26:25] <jp__> check = full gives tens of thousands of errors mostly all from qt
[19:26:44] *** Joins: c4017w_ (~c4017@209.52.68.8)
[19:27:02] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:28:52] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:30:17] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[19:31:11] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:31:25] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[19:31:41] <sigma_> jp_: https://aleksander.es/data/valgrind-memcheck.pdf, it is guide. mybe say some more option. use qt dynamic
[19:34:24] <jp__> i just noticed that qt has valgrind built in
[19:34:50] <Alipha> meator: if the project is anticipated to become much larger, then it would be better to just have separate compilation units from the start. But indeed, 4 seconds isn't much and if you want to be header-only, then fine. Regardless, having multiple TUs is most likely going to be faster, even with LTO and such
[19:34:50] <sigma_> so, do you use it?
[19:34:54] <jp__> i saved the guide, gonna play with qt a bit more
[19:35:06] <Alipha> meator: faster with incremental builds, that is
[19:35:30] <jp__> sigma: yeah,it's more usefull from within
[19:37:44] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[19:39:01] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:39:42] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 272 seconds)
[19:40:46] <meator> I think that the header files should be splitted, because I find header-only programs weird and because uncluttered header files can provide useful information to the programmer, but if it really provides performance benefits, then "if it isn't broken, don't fix it". (I'm working on someone else's program.)
[19:41:09] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Read error: Connection reset by peer)
[19:42:09] *** Quits: blackout69 (~blackout6@37.183.198.248) (Quit: Leaving.)
[19:43:35] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[19:44:05] <LordKalma> !rq
[19:44:05] <nolyc> LordKalma: <CodePoint> { vector<bool> v{false}; cout << (v[0] = !v[0])<< v[0]; }
[19:44:22] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[19:44:46] <Alipha> meator: i agree with PJBoy's statement earlier that a header-only program is most likely going to be slower than incremental building with "properly split" TUs
[19:45:00] *** Quits: undephin3d (~undephin3@158.181.72.222) (Ping timeout: 240 seconds)
[19:45:08] *** Joins: Kakurady (~nekoyasha@bras-base-toroon63x9w-grc-18-76-68-53-51.dsl.bell.ca)
[19:45:14] *** Joins: undephin3d (~undephin3@195.243.102.188)
[19:45:31] <Alipha> meator: and if your project/IDE/whatever isn't set up to do incremental builds, then you should probably set that up :-)
[19:46:08] <Alipha> meator: though header-only programs will likely optimize better, so that's a benefit
[19:46:13] <PJBoy> there's nothing weird about that rq geordi snippet
[19:49:28] <meator> The program is really small. The cost of multiple TU might outweigh the benefits of incremental builds, and this will slow down the first compilation, in which there will be no precompiled object files.
[19:49:29] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[19:50:32] <LordKalma> why are you so worried about compile time of a "really small" program?
[19:50:43] <LordKalma> are you using 2001 computers?
[19:52:11] <PJBoy> trying to justify being lazy, smh
[19:52:24] <PJBoy> just like the guy from yesterday who didn't want to use ubsan
[19:52:45] <PJBoy> and it's like "dude just improve your life, you fool"
[19:53:44] <meator> The maintainer of the program to which I'd like to contribute is so worried.
[19:53:49] <meator> I don't agree with his opinion, but I can't find any objective reason to disregard it. It has its benefits.
[19:54:51] *** Quits: undephin3d (~undephin3@195.243.102.188) (Ping timeout: 268 seconds)
[19:56:31] *** Joins: undephin3d (~undephin3@158.181.72.222)
[19:58:25] *** Quits: lh_cat (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[20:02:04] <Alipha> meator: if someone else "owns" the program, then i guess just go with what he wants
[20:07:50] <rendar> what is the right channel to ask about 'make'?
[20:11:00] *** Quits: darkbit (~db@136.158.8.67) (Ping timeout: 252 seconds)
[20:11:22] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[20:14:14] <oj> that's a good question
[20:15:04] <oj> If you're not in a hurry you could try the gnumake help mailing list
[20:15:09] <oj> https://lists.gnu.org/mailman/listinfo/help-make
[20:16:10] <oj> it depends on what you need help with
[20:16:30] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[20:16:44] <PJBoy> !redirect
[20:16:45] <nolyc> Sorry, but your question is off-topic here. Here are some channels where your question may be appropriate -- Windows: #winapi, #windows-coding; #posix; Makefiles and build systems: #workingset; #gcc; general programming: ##programming; #Csharp; #boost; ##algorithms . This doesn't mean we are your guide to Libera.
[20:20:34] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:21:47] *** Quits: filename (~kilitary@188.242.105.134) (Read error: Connection reset by peer)
[20:22:00] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a021:f576:2141:1ac3)
[20:23:58] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[20:27:17] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:28:21] <CarloWood> <meator> Should all small projects be header-only?  <== no.  The whole 'header only' hype is just plain stupid. Carried by people who don't want to invest learning how build systems work </myopinion>
[20:28:37] <CarloWood> invest in*
[20:28:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[20:29:19] <PJBoy> on the other hand, it's great for people who don't want to invest learning how build systems work
[20:29:25] <CarloWood> loool
[20:30:15] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 252 seconds)
[20:30:48] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 250 seconds)
[20:30:54] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:32:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:33:11] *** Quits: c4017w__ (~c4017@209.52.68.8) (Read error: Connection reset by peer)
[20:33:46] *** Joins: c4017w__ (~c4017@209.52.68.8)
[20:35:03] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:35:05] *** Joins: Guest54 (~Guest54@2620:10d:c092:400::4:a410)
[20:35:14] <Guest54> I have a primary key compsing of two columns, but most of my reads are filtering on only one of those columns. My question is, am I leveraging any indexing done for those reads?
[20:35:16] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:38:02] <PJBoy> I'm gonna redirect you to #databases on https://discord.gg/9zT7NHP
[20:38:11] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[20:38:14] <oj> header-only projects aren't all bad, they provide easy distribution for multiple toolchains
[20:38:36] <oj> if you don't have the resources to support many toolchains then it might be sensible
[20:38:36] *** Quits: arch-angel (~arch-ange@user/arch-angel) (Ping timeout: 250 seconds)
[20:38:49] <CarloWood> I didn't say they are ALL bad. I am sure it makes a lot of sense to be header only for some of them.
[20:38:58] <meator> Header-only libraries are cool.
[20:39:02] *** Joins: magla (~gelignite@d536591f.access.ecotel.net)
[20:39:12] <CarloWood> But to bring it as a major advantage in the list of features of a library :/.  Duh.
[20:40:47] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:40:49] *** Quits: jp__ (~jp@bl13-171-74.dsl.telepac.pt) (Quit: Leaving)
[20:41:52] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:4d5:1441:6595:2578)
[20:43:18] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[20:43:59] <rendar> i get this `/usr/bin/ld: cannot find -lcottonmouth` but i have libcottonmouth.so in the same directory where i'm compiling, what is the best way to fix this?
[20:44:26] <anyone> just because the C++ standard library is in great part a header-only library, that's more of a necessity (templates) than a selling point
[20:44:33] <ville> rendar: seriously why does everything have to be "the best"?
[20:44:46] <rendar> ok the proper way to fix this
[20:44:57] *** Joins: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779)
[20:45:46] <CarloWood> rendar: replace with just the filename
[20:45:49] <PJBoy> the library loader doesn't check the current directory by default
[20:46:05] <PJBoy> you have to add the current directory to rpath or LD_LIBRARY_PATH
[20:46:12] <CarloWood> Use libcottonmouth.so instead of -lcottonmouth
[20:46:23] <rendar> CarloWood, ok
[20:46:37] <ville> CarloWood: ?
[20:46:39] <CarloWood> It doesn't PJBoy?
[20:46:44] <PJBoy> nah it doesn't
[20:46:54] <CarloWood> Hmm - should for plain filenames though
[20:46:55] <PJBoy> pretty sure your suggestion isn't a thing btw
[20:47:01] <PJBoy> though could be wrong
[20:47:09] <anyone> well, -l isn't a plain filen ame
[20:47:17] <PJBoy> I'd expect the compiler to try and compile the SO file if you just list it
[20:47:26] <oj> loading a shared library from your current directory sounds scary
[20:47:33] <ville> you can link with an archive directly. dso works differently
[20:47:35] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 256 seconds)
[20:48:06] <CarloWood> Lets wait to see what rendar's experience is with my suggestion ;)
[20:48:36] <CarloWood> My biggest fear is that his current working directory *isn't* the one that he launches the command to link from.
[20:48:49] <rendar> it is
[20:48:59] <CarloWood> So, did it work?
[20:49:25] <CarloWood> If it isn't working - try using the full path.
[20:49:35] <rendar> it seems it gets the correct .so file, but i still get an error
[20:49:36] <rendar> test.c:(.text+0xa): undefined reference to `hello_world(int)'
[20:49:49] <ville> neither the build time linker nor the runtime linker loads from the binary's current directory or cwd by default
[20:49:51] <rendar> but the function is present in the library, and exported successfully
[20:50:08] <oj> I would suggest that you set up a proper development environment where you install the shared library at some standard path
[20:50:16] <oj> if you're developing shared libraries
[20:50:17] <PJBoy> add `-L.` to your build command
[20:50:21] <CarloWood> Did you put the library on the right of whatever contains test.c ?
[20:50:31] <PJBoy> then it should only fail to run
[20:50:31] <oj> or if this is a dependency, that you install it under a standard path
[20:51:01] <oj> I just said essentially the same thing twice didn't I
[20:51:04] <ville> -l to add a library, by its name with out the library prefix ("lib") or suffix (".so"). -L to add directory to look from
[20:51:13] *** Quits: Giovanni (~Giovanni@176.219.119.243) (Remote host closed the connection)
[20:51:38] *** Joins: Giovanni (~Giovanni@176.67.166.45)
[20:51:50] <CarloWood> *shrugs* what I said is the preferred modern way that cmake likes to use.
[20:52:17] <PJBoy> rendar, probably try `-lcottonmouth -L. -Wl,-rpath,.`
[20:52:23] <CarloWood> lol
[20:52:29] <PJBoy> no joke
[20:52:36] <CarloWood> That would put '.' as rpath - not what you want :P
[20:53:02] <PJBoy> it's not ideal
[20:53:14] <CarloWood> At least use `pwd` then.
[20:53:24] <PJBoy> I always have to look up the proper way
[20:53:24] <ville> once you get that to build correctly, then you still have to get the runtime linker to work, and that's what -Wl,-rpath so the libary is found when you try to run your program
[20:53:32] <rendar> ok
[20:53:34] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[20:53:51] <CarloWood> which then will only work on your own machine of course.
[20:53:59] <PJBoy> `-L. -Wl,-rpath,"\$ORIGIN"` if I'm not mistaken
[20:54:28] <CarloWood> If you want to distribute this as binary package, you'll have to properly install the lib.
[20:54:38] <rendar> PJBoy, those flags messes all things up: g++: error: cottonmouth.o: No such file or directory
[20:54:47] <rendar> g++: fatal error: no input files
[20:54:54] <PJBoy> revert CarloWood's change >_>
[20:55:10] *** Joins: filename (~kilitary@static.246.201.46.78.clients.your-server.de)
[20:55:34] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[20:55:36] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[20:55:48] <CarloWood> For some reason I feel not really secure about your order PJBoy... I'd always do -L first.
[20:56:14] <PJBoy> so `-lcottonmouth -L. -Wl,-rpath,"\$ORIGIN"`
[20:56:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[20:56:38] <PJBoy> I mean this is just doing stuff to get it to build
[20:56:55] <ville> it'll build with out the -Wl
[20:57:00] <PJBoy> for distribution you just wouldn't rely on libraries being in the same directory
[20:57:02] <CarloWood> Which is convoluted way to do: ./libcottonmouth.so -Wl,-rpath,"\$ORIGIN"
[20:57:05] <PJBoy> build and run >_>
[20:57:19] <rendar> oh no, it doesn't work anymore, also reverting changes :(
[20:57:25] <PJBoy> I'm pretty sure you can't specify a library like that
[20:57:34] <CarloWood> Sure you can
[20:57:34] <PJBoy> gcc expects source files when you give it an optionless argument
[20:57:55] <oj> You really should install the shared library properly
[20:58:17] *** Quits: Giovanni (~Giovanni@176.67.166.45) (Ping timeout: 250 seconds)
[20:58:42] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[20:58:53] <rendar> it seems that now the problem is not the library
[20:58:58] *** Joins: Giovanni (~Giovanni@176.219.119.243)
[20:59:04] <anyone> you mean the problem is between the chair and keyboard?
[20:59:13] <rendar> the Makefile has been messed up, and it tries to compile the library before making cottonmouth.o :
[20:59:14] <rendar> :
[20:59:16] <rendar> :\
[20:59:34] <rendar> i mean, to link the lib before making .o
[20:59:36] *** Quits: undephin3d (~undephin3@158.181.72.222) (Quit: leaving)
[20:59:41] <CarloWood> The undefined reference to is not the same problem as not being able to find the library no.
[21:00:03] <CarloWood> compile the library?
[21:00:13] *** Quits: kaph_ (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Ping timeout: 268 seconds)
[21:00:13] <CarloWood> You mean link?
[21:00:32] <rendar> link, yep
[21:00:34] <PJBoy> ok wow, gcc really does accept an argumentless SO file
[21:00:46] <CarloWood> You never old us that you are compiling/linking libcottonmouth.so too.
[21:01:00] <CarloWood> told*
[21:01:23] <rendar> https://bpa.st/FP7A
[21:01:24] <PJBoy> so yeah `./libcottonmouth.so -Wl,-rpath,"\$ORIGIN"` after all
[21:01:29] <PJBoy> TIL
[21:01:52] <anyone> argumentless? libcottonmouth.so is an argument.
[21:02:13] <PJBoy> without a prefix that specifies that it's not a source file
[21:02:16] <CarloWood> rendar: -fPIC is not necessary on 64bit machines
[21:02:29] <anyone> PJBoy: whether something is a source file or not is determined solely by extension
[21:02:39] <rendar> CarloWood, i include it anyway, in the case i have to compile in 32 bit
[21:02:43] <PJBoy> yeah apparently so
[21:02:44] <anyone> CarloWood: -fPIC is necessary on 64bit machines, *especially* e.g. sparc
[21:02:47] <PJBoy> I'm surprised
[21:02:54] <PJBoy> I thought linux hated file extensions
[21:03:04] <anyone> There is a difference between hate and indifference.
[21:03:22] <anyone> For example, Windows hates the absence of extensions, but Linux could not care less if it's a.out or a.exe.
[21:03:43] <PJBoy> it could care less
[21:03:50] <PJBoy> GCC for example seems to care
[21:03:54] <anyone> But GCC isn't Linux
[21:04:02] <PJBoy> close enough
[21:04:08] <CarloWood> rendar: you're missing a rule to compile .cxx -> .o
[21:04:12] <ville> PJBoy: gcc/g++ has certain filenames it uses to determine how to treat a file. the usual source file extensions .c, .cpp...
[21:04:15] <oj> are you sure this is to do with file extensions?
[21:04:23] <oj> ok, TIL
[21:04:37] <anyone> also, GCC does not care all that much (it has an -x option, after all), but people are probably going to be upset if they can't tell headers from source files.
[21:04:49] <rendar> CarloWood, i'm not, check this out: https://www.topbug.net/blog/2019/10/28/makefile-template-for-a-shared-library-in-c-with-explanations/
[21:05:10] <anyone> hey, look, /usr/include/c++ has almost no extensions
[21:05:15] <PJBoy> -x I thought controlled if GCC acts like gcc or g++
[21:05:22] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:05:37] <rendar> everything worked well, when i used cottonmouth.c and test.c, when i've turned that into cottonmouth.cxx and test.cxx i get this error
[21:05:39] <anyone> Yeah, -x is for when you're lying about the extension, or there's another reason it can't tell (e.g. when using pipe as input)
[21:05:40] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:05:52] <PJBoy> presumably it has no ability to force a file to act like a SO file
[21:06:00] <anyone> `gcc -x c++ -dM -E /dev/null` comes to mind
[21:06:05] <oj> an SO file is an SO file
[21:06:13] *** Quits: filename (~kilitary@static.246.201.46.78.clients.your-server.de) (Ping timeout: 240 seconds)
[21:06:25] <PJBoy> a tautology is a tautology
[21:06:25] <oj> you can't change the object file structure
[21:06:35] <anyone> `echo -en __linux__ | cpp -x c++ -E -` too
[21:06:40] <ville> PJBoy: g++ will link to standard library, gcc -x c++ won't link ny default
[21:06:50] <PJBoy> oh yeah, true
[21:07:33] <rendar> any help?
[21:08:34] <PJBoy> I can't read that makefile
[21:09:15] <CarloWood> rendar: you're missing a rule to compile .cxx -> .o
[21:09:54] <PJBoy> isn't that what line 28 is?
[21:10:18] <CarloWood> no line 28 is a rule for the .d files - dependency files
[21:10:37] <PJBoy> oh right
[21:10:45] <anyone> explicit .d rules? what year is it!? never heard of -Wp,-MMD?
[21:12:10] <ville> there is a builtin rule to create object files in make
[21:12:36] <ville> https://www.gnu.org/software/make/manual/html_node/Catalogue-of-Rules.html#Catalogue-of-Rules
[21:12:47] <cbreak> in cmake too :P
[21:13:26] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Ping timeout (120 seconds))
[21:13:38] <PJBoy> interesting
[21:13:56] <CarloWood> Not for .cxx
[21:14:00] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:14:01] <rendar> everything worked well, when i used cottonmouth.c and test.c, when i've turned that into cottonmouth.cxx and test.cxx i get this error
[21:14:07] <rendar> CarloWood, i'm not
[21:14:10] <CarloWood>     Considering target file 'cottonmouth.o'.
[21:14:10] <CarloWood>      File 'cottonmouth.o' does not exist.
[21:14:10] <CarloWood>      Looking for an implicit rule for 'cottonmouth.o'.
[21:14:11] <CarloWood> ...
[21:14:17] <rendar> if you look at the website i have linked to you
[21:14:18] <CarloWood>      Trying implicit prerequisite 'cottonmouth.cpp'.
[21:14:21] <rendar> it has the same rules
[21:14:29] <rendar> https://www.topbug.net/blog/2019/10/28/makefile-template-for-a-shared-library-in-c-with-explanations/
[21:14:33] <PJBoy> yup cxx ain't on that list
[21:14:35] <CarloWood> it tries .c, .cc, .C, .cpp .. no .cxx
[21:14:36] <PJBoy> that all makes sense now
[21:14:50] <rendar> oh!
[21:15:12] <rendar> i see now
[21:15:34] <rendar> what extension should i use for C++ files? .cpp and .hpp for headers?
[21:15:50] <PJBoy> nothing cares about header extensions
[21:15:52] <CarloWood> It is a conspiracy against the people that use .cxx (like me)
[21:15:57] <PJBoy> but yeah .cpp
[21:15:58] <ville> PJBoy: some editors may
[21:16:02] <rendar> ok
[21:16:06] <CarloWood> Most people use .cpp
[21:16:07] <PJBoy> gnu apparently prefer .cc
[21:16:16] <barometz> I don't think I've ever seen .C, thankfully
[21:16:41] <anyone> .C does not play well on DOS
[21:16:44] <ville> rendar: use whatever extension you wish. in his case you'll have to add a step as the automatic rules don't cover .cxx
[21:16:59] <CarloWood> ^^ this
[21:17:12] <rendar> ville, i see thanks
[21:17:13] <anyone> .cc and .cpp should be enough. Something is wrong with .cxx people.
[21:17:51] <PJBoy> I'd rather cxx than cc :/
[21:18:22] <PJBoy> 'cause at least CXX is somewhat known as a code for C++, like in make variables
[21:18:35] <PJBoy> idk what the hell cc is meant to be
[21:18:43] <PJBoy> carbon copy files?
[21:18:50] <PJBoy> no props
[21:19:48] <CarloWood> anyone also never uses CXXFLAGS or CXX
[21:20:12] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 250 seconds)
[21:20:50] <CarloWood> rendar: on that note: s/CC/CXX/ ...
[21:21:01] *** Quits: Guest54 (~Guest54@2620:10d:c092:400::4:a410) (Ping timeout: 256 seconds)
[21:21:08] <CarloWood> And s/CFLAGS/CXXFLAGS/
[21:21:18] <rendar> ok
[21:21:44] <CarloWood> And you probably want to add -std=c++20  or whatever standard you want to CXXFLAGS
[21:22:17] <CarloWood> And I think you're just waiting till I tell you what rule to add to make .cxx work.
[21:23:00] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[21:25:42] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[21:27:38] *** Quits: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779) (Remote host closed the connection)
[21:28:10] *** Joins: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779)
[21:30:50] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[21:31:44] *** Quits: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779) (Read error: Connection reset by peer)
[21:31:58] *** Joins: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779)
[21:33:19] <CarloWood> sigh
[21:33:24] <CarloWood> rendar: https://bpa.st/EH7A
[21:34:22] *** Joins: c4017w_ (~c4017@209.52.68.8)
[21:35:05] <CarloWood> I successfully evaded working on my project for an hour... but now I have to face it :/
[21:35:26] <LordKalma> makefiles? bah
[21:35:31] <LordKalma> there's a better way :D
[21:37:16] *** Quits: sigma_ (~sigma@2.147.230.56) (Quit: Konversation terminated!)
[21:37:47] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 256 seconds)
[21:38:53] *** Quits: meator (~meator@user/meator) (Remote host closed the connection)
[21:40:34] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[21:41:27] <rendar> CarloWood, thanks, i see!
[21:42:10] <CarloWood> The main lesson here is: don't write your own makefiles (use cmake)
[21:42:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[21:42:46] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[21:43:36] <rendar> unbelievable, i still get: test.cpp:(.text+0xa): undefined reference to `hello_world(int)'
[21:43:36] <rendar> :(
[21:43:50] <rendar> should i use cmake?
[21:43:54] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:44:02] <fiesh> use meson
[21:44:03] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:44:03] *** ChanServ sets mode: +v npaperbot
[21:44:32] <rpav> rendar: yeah you should use cmake
[21:44:37] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:44:40] <rpav> they even have a pretty decent tutorial now
[21:45:37] <rpav> https://cmake.org/cmake/help/latest/guide/tutorial/A%20Basic%20Starting%20Point.html .. i think this is the one
[21:46:10] <rpav> ignore kitware's silly .cxx but
[21:46:54] <CarloWood> .cxx is the best
[21:47:05] <CarloWood> All Real Programmer(s) use it.
[21:47:15] <CarloWood> If you use it too, then Programmers - with an s.
[21:47:20] <rpav> you can use whatever but not really worth renaming a bunch of shit over, when everyone else uses .cpp heh
[21:47:46] *** Quits: paul424 (~tom@ip-5-172-234-77.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[21:48:07] <rendar> ok
[21:49:11] <fiesh> rendar: https://mesonbuild.com/Tutorial.html  much better than cmake in basically every regard...
[21:49:32] <LordKalma> expect community, dependencies...
[21:49:38] <CarloWood> I use .cxx for my projects; and when I have to write a quick-n-dirty test I use .cpp - so I know it is junk and not part of the Real Project. No harm in deleting the .cpp files.
[21:50:17] <CarloWood> (j/k, I use .cc for junk test :p)
[21:50:20] <fiesh> LordKalma: possibly the latter, although I don't know any dependency that's missing and I use
[21:50:39] <rendar> fiesh, thanks
[21:50:45] <cq-work> Are there filesystems that don't accept ".c++"
[21:50:46] <LordKalma> or if you want to use the de-facto standard...
[21:51:05] <rpav> cq-work: probably not in common use
[21:51:14] <LordKalma> well, I to use .cpp... and it's kinda annoying the "standard" env flags are CXXFLAGS
[21:51:24] <LordKalma> in that regard, cmake's use of .cxx for tutorials is kinda consistent
[21:51:27] <cq-work> I've seen cxx, cc, C, CC, c++
[21:51:38] <LordKalma> since all flags are CMAKE_CXX_SOMETHING
[21:51:45] <rpav> bash does actually not accept C++X="..."
[21:51:54] <LordKalma> of course it doesn't
[21:52:00] <CarloWood> meson is kinda like a religion. With cult members that desperately hang out in #C++ channels to get noobs to use it too. Everyone else uses cmake.
[21:52:03] <rpav> which actually strikes me as weird, wtf is ++ special
[21:52:06] <fiesh> C++ is just really really dumb name for a programming language
[21:52:15] <LordKalma> yes, it is
[21:52:24] <rpav> well i think everyone agrees on that
[21:52:32] *** Joins: meator (~meator@user/meator)
[21:52:48] <rpav> 'cwiid' was clearly the superior choice
[21:53:04] <LordKalma> especially because people thing C++ is a superset of C, still
[21:53:04] <CarloWood> Anything that starts with cw is superior.
[21:53:04] <cq-work> Should have been notc
[21:53:10] <LordKalma> I just read that on an article from this week
[21:53:25] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 240 seconds)
[21:53:32] <LordKalma> well, C++'s influences were SIMULA, C, and Algol 64
[21:53:40] <LordKalma> mash those 3, go
[21:53:45] <cq-work> :( nobody got the joke
[21:53:46] <rpav> cq-work: ok that's definitely the worst
[21:53:46] <cq-work> oh well
[21:54:10] <ville> LordKalma:  isn't go adding a forth?
[21:54:17] <CarloWood> cq-work: GNC?
[21:54:21] <LordKalma> what about CIMULA64
[21:54:30] <cq-work> not, notc said out loud says nazi
[21:54:31] <rpav> cq-work: i'm sure instead of a compile-er to compile source files, it would have hit- them instead
[21:54:57] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:3af3:abff:fe57:23d5) (Ping timeout: 252 seconds)
[21:55:03] *** Joins: immibis (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779)
[21:55:13] *** Quits: immibis_ (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779) (Read error: Connection reset by peer)
[21:55:22] <rpav> everyone should have just adopted objective C
[21:55:22] * cq-work shakes his head.
[21:55:35] <cq-work> I find objective c sort of weird still.
[21:55:36] <LordKalma> wtf is objective C even
[21:55:40] <rpav> it is definitely weird
[21:55:42] <LordKalma> also, doesn't apple use that?
[21:55:57] <rpav> they do/did .. came from NeXT along with OSX
[21:56:00] <cq-work> Apple is the only major consumer of it afaik
[21:56:15] <rpav> NeXT was all ObjC and OSX = NeXT so naturally
[21:56:20] <PJBoy> objective C was the original iOS language
[21:56:42] <PJBoy> it's like C with an additional language hacked in to do OO programming
[21:56:44] <rpav> also it looked cooler than osx ever did ;/
[21:56:48] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[21:57:02] <PJBoy> kinda like what circle-lang is to C++
[21:57:02] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[21:57:04] <rpav> yeah it had a smalltalkier OOP variant thing that was a very different syntax
[21:57:13] <LordKalma> now there's Swift :)
[21:57:18] <LordKalma> isn't circle-lang just sane c++?
[21:57:25] <PJBoy> also function arguments get given two names for some reason
[21:57:32] <LordKalma> the circle-lang dev hangs around in the cpplang slack
[21:57:51] <PJBoy> idk what it means to be sane C++
[21:57:56] <cq-work> I wish circle was open-source.
[21:58:03] <cq-work> I'm not relying on a tool that isn't open-source.
[21:58:21] <rpav> i would hesitate to rely on a language that wasn't broadly supported
[21:58:37] <rpav> unless i was writing it myself i guess
[21:58:58] <LordKalma> .net is becoming the de-facto cross platform-ish platform anyway. only linux is to get fucked :)
[21:59:01] <PJBoy> but circle's additions are all in @meta areas
[21:59:20] <PJBoy> and objective C is like that
[21:59:36] <LordKalma> circle-lang's dev was discussing about supporting pascal-string this week. a really niche feature I didn't know about hahha
[21:59:39] <PJBoy> it has @interface ... @end and whatnot
[21:59:47] <cq-work> .net works pretty well on linux tho?
[21:59:57] <PJBoy> and inline stuff in [square brackets]
[22:00:19] <cq-work> PowerShell also has support for Linux and you can call .NET classes from it (although the MS specific ones are missing obviously)
[22:00:37] <rpav> powershell heh
[22:00:52] <LordKalma> cq-work, it does, I only hate that .net MAUI doesn't support linux :(
[22:00:58] <cq-work> Yeah :(
[22:01:12] <cq-work> PowerShell has grown on me surprisingly.
[22:01:19] <PJBoy> .net as de facto cross platform?
[22:01:24] <PJBoy> you've forgotten about electron
[22:01:29] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[22:01:33] <cq-work> Electron can die in a fire tho
[22:01:35] <rpav> node.js is way more cross platform
[22:01:45] <cq-work> I'm not against node.js
[22:01:50] *** Joins: CoderCharmander (~CoderChar@54032703.catv.pool.telekom.hu)
[22:01:51] <PJBoy> I am
[22:01:53] <PJBoy> fuck node js
[22:01:55] <rpav> not sure about gui but desktop gui is a dead prospect these days
[22:02:03] <CarloWood> Who cares about cross platform. If it runs under linux that what else do you need?
[22:02:12] <rpav> cq-work: yeah it's pretty nice .. i can easily write utilities that runs very quickly on lin/win with zero trouble
[22:02:25] <rpav> anyone who has to build and deploy deps on windows
[22:02:33] <PJBoy> windows can run linux stuff I guess
[22:02:36] <PJBoy> WSL and all that
[22:02:41] <LordKalma> not even linux stuff runs decently on linux, I understand why companies don't want to support it properly
[22:02:44] <rpav> doing that in .net is a hassle if you don't have a large toolset and/or knowledge, but node is pretty damn accessible
[22:02:57] <rpav> LordKalma: like what?
[22:03:02] <LordKalma> like, do you support X or Wayland? or one of the 500 audio frameworks?
[22:03:03] <rpav> that is definitely not my experience
[22:03:06] <LordKalma> and then it's shit either way :D
[22:03:12] <rpav> oh, well that's easy .. no one supports or should support wayland
[22:03:13] <cq-work> I was just having an issue with the core of linux the other day that irritated me, like fork/exec is still a mess until fairly recently.
[22:03:27] <rpav> and really there's mostly just pulseaudio these days
[22:03:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[22:03:59] * CarloWood goes to #geordi till ppl talk about C++ again.
[22:04:03] <PJBoy> and then there's mac
[22:04:13] <PJBoy> where you can't even test your program
[22:04:17] <rpav> nah there isn't
[22:04:28] <PJBoy> or build for it
[22:04:39] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:05:07] <cq-work> All the *BSDs and not-Linux platforms support a closefrom or close_range function to close parent FDs or allow a clone() or flag to not inherit parent FDs.
[22:05:09] <PJBoy> given how much devs care about windows and linux and how few ever talk about mac, I'm surprised mac is still alive
[22:05:30] <cq-work> And most of them have supported that since like the early 2000s. Not Linux though, that didn't get stable until like... 2020
[22:06:07] <rpav> it isn't
[22:06:13] <LordKalma> PJBoy,  mac has like 25% of share on stack overflow's report
[22:06:19] <LordKalma> don't forget it's not all C++
[22:06:35] <LordKalma> there's a legion of webdevs/node.js devs/people who are not c++ devs
[22:06:41] <PJBoy> oh yeah, huh
[22:06:47] <LordKalma> we're a _very_ skewed sample
[22:07:00] <PJBoy> damn web dev
[22:07:04] <PJBoy> keeping mac alive
[22:07:04] <LordKalma> "90%" of development is mobile, and for iOS you need a mac
[22:07:17] <LordKalma> (and an iPhone)
[22:07:23] <PJBoy> mac or rent a mac server
[22:07:36] <LordKalma> renting a mac server doesn't give you USB loading and debugging
[22:07:39] <LordKalma> you *need* a mac
[22:07:48] <PJBoy> which is why I'm surprised iOS is popular
[22:07:48] <rpav> oh rihgt, iOS sdk
[22:07:48] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:07:58] <PJBoy> that shit's expensive
[22:08:18] <PJBoy> and you have to learn the iOS language
[22:08:30] <PJBoy> either objective C, which is one of the worst languages I've ever seen, or swift
[22:08:32] <LordKalma> iOS is popular for consumer because Apple,
[22:08:49] <LordKalma> and for developers because iPhone users ar emore likely to spend money on the store
[22:08:52] <LordKalma> no easy sideloading
[22:09:16] <PJBoy> but you have to pay a dev license and conform to the iOS dev guidelines
[22:09:17] <LordKalma> and for both users and developers, iOS has limited, predictable, devices
[22:09:23] <rpav> yeah android is killing it though so
[22:09:45] <LordKalma> not the clusterfuck that is Android, with devices from 30 to 2000€, some of them with the worst OS versions imaginaable
[22:09:51] *** Joins: Guest7359 (~Guest@host242.190-139-77.telecom.net.ar)
[22:09:54] <LordKalma> like, really, some android images are like holy shit
[22:09:55] <rpav> and yet somehow android has 70% marketshare
[22:10:00] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:10:17] <PJBoy> man that's gone up since last time I checked
[22:10:21] <LordKalma> rpav, because cheap
[22:10:31] <rpav> LordKalma: the problem actually tends to be in reverse though .. iOS has a bunch of different profiles and much worse tools for supporting them
[22:10:35] <PJBoy> android's gotten expensive too haha
[22:10:48] <rpav> yeah it's PC vs Mac all over again, and i couldn't 🤣 harder
[22:10:49] <LordKalma> PJBoy, just because there is a high end, didn't change the fact there is a low end
[22:10:52] <cbreak> LordKalma: my android phone cost almost 900 local bucks
[22:11:00] <cbreak> definitely not cheap
[22:11:00] <rpav> no more Steve Jobs left to step in and fix apple
[22:11:04] <PJBoy> yeah I don't disagree there's low end
[22:11:04] <LordKalma> mine costed me like 150€
[22:11:05] <LordKalma> so yeah
[22:11:23] <PJBoy> the low end android phones have no competition
[22:11:25] <LordKalma> perhaps a bit more
[22:11:31] <LordKalma> yeah, see?
[22:11:40] <PJBoy> and the iphone competes with the expensive androids
[22:11:43] <cbreak> but I did get dual sim, head phone support, micro sd card support, a good display, lots of internal storage, and software updates for a year :/
[22:11:46] <rpav> mine cost $300 and it's probably one of the best android phones you can get
[22:11:47] <PJBoy> which are roughly the same price these days
[22:11:56] <LordKalma> 900€ and 1 year of updates
[22:12:03] <cbreak> maybe even 2 years
[22:12:03] <LordKalma> see? that's the dumpsterfire of android
[22:12:04] <rpav> missing a couple featuers but not worth the +$600 to get them
[22:12:15] <rpav> LordKalma: pretty unfair :p
[22:12:23] <LordKalma> but for real, android devices get some of the worst software imaaginable, and some of them with like zero updates ever
[22:12:27] <LordKalma> with massively broken images
[22:12:34] <PJBoy> my phone was ~£850
[22:12:37] <LordKalma> I wouldn't want to develop for android if I was to bet my money
[22:12:41] <rpav> you could say exactly the same about the PC market.. look at all the hardware configurations#@! .. but not really an issue
[22:12:42] <PJBoy> and I'd argue it was the best phone on market
[22:12:56] <Guest7359> I don't use cellulars :)
[22:12:59] <cbreak> a lot of the android problems are because of linux, and the way the drivers are integrated into it on android
[22:13:05] <Guest7359> but computers!
[22:13:08] <rpav> LordKalma: then you haven't tried, because it's not really the Big Problem!!! everyone who has no experience doing so make it out to be
[22:13:32] <Guest7359> I am not trapped by the system
[22:13:35] <cbreak> drivers are not separate from the kernel, and linux breaks kernel ABI all the time
[22:13:51] <fiesh> the only reasonable two options these days seem to be pinephone and librem...
[22:13:53] <cbreak> and the drivers are not open source either, most of the time
[22:14:18] <LordKalma> fiesh, i'm to millenial/almost gen-x to use a linux phone without the 50 social apps
[22:14:24] <rpav> LordKalma: i mean consider .. _website_ development isn't a dumpster fire because there are lots of hardware configurations (just for other reasons)
[22:14:28] <cbreak> fiesh: tried that fair phone thing?
[22:14:43] <fiesh> cbreak: no?!
[22:14:59] <Guest7359> LordKalma: use a linux computer; forget phones
[22:15:13] <LordKalma> rpav, well, that's not really true. there's like 2 major web engines these days
[22:15:22] <PJBoy> I can't have a bank account without a phone
[22:15:23] <LordKalma> well, 3, if you want to count safari in
[22:15:38] <fiesh> LordKalma: gen-x is quite old, not sure if that's what you really mean
[22:15:46] <LordKalma> gen-z, sorry :)
[22:15:46] <PJBoy> there are a few other things that force 2FA on me too
[22:15:50] <rpav> you're _going_ to have lots of hardware configurations, if not today, then in 10-20 years when everyone's upgraded and changed things and has different window sizes or whatnot .. the key is having configuration tools to deal with it (e.g. like responsive / css stuff for the web), and android has all that
[22:16:03] <Guest7359> PJBoy: 1) that would be abuse; 2) use personal (live) transactions
[22:16:07] <LordKalma> and even there, web APIs are constantly changing and websites don't work well everywhere
[22:16:13] <rpav> nah, if you stick to standard stuff it runs on any of the zillion little browsers there are
[22:16:18] <PJBoy> Guest7359, it's abusive, yeah
[22:16:18] <rpav> it's mostly google shit that doesn't
[22:16:35] <PJBoy> I can't do live transactions because banks open hours after I start work and close hours before I end work
[22:16:45] <LordKalma> zillion little browsers are still like 3 different engines :)
[22:16:55] *** Quits: pepperoni (~pepperoni@172.58.99.255) (Read error: Connection reset by peer)
[22:17:02] <PJBoy> also I can't use my debit card online without authenticating via the bank app
[22:17:18] <LordKalma> EU rules mandate 2FA every 90 days
[22:17:18] <rpav> well like 4? but still
[22:17:21] <PJBoy> so having a phone is now 100% mandatory for me and most people
[22:17:22] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:17:26] *** Joins: pepperoni (~pepperoni@172.58.99.255)
[22:17:33] *** Joins: ARoxdale (~ARoxdale@ip-84-203-29-247.broadband.digiweb.ie)
[22:17:36] <PJBoy> and if my phone breaks, I'm fucked
[22:17:41] <LordKalma> even  paypal asks for an SMS every 90 days
[22:17:46] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:17:55] <Guest7359> PJBoy: use automated cashiers (card); use lunch time; ask for permission
[22:18:00] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:18:02] <LordKalma> and I go shopping without my wallet these days
[22:18:06] <LordKalma> I just use the NFC
[22:18:24] <LordKalma> also, out government has a SSO system for all gov services
[22:18:29] <PJBoy> can't use lunch time or get permission
[22:18:29] <LordKalma> which, guess, what? phone 2FA
[22:18:31] <rpav> you know, i'm suddenly disappointed Paypal's logo isn't a pope hat with a $ on it 🤔
[22:18:32] <LordKalma> either via app, or sms
[22:18:36] <PJBoy> there's no bank close enough to my workplace
[22:18:55] <ville> cbreak: if you upstream the driver, which is what the upstream wants, they make sure when they break that abi that they port your driver as well
[22:18:58] <PJBoy> and the automated cashiers are inside the banks
[22:19:12] <Guest7359> PJBoy: the online stuff: there are coordinates cards also afaik
[22:19:18] <LordKalma> having a phone number if pretty much mandatory here, so is having a bank account
[22:19:20] <rpav> PJBoy: digital check deposits are cool (though direct deposit still more convenient)
[22:19:29] <PJBoy> yeah, but I need my phone for those
[22:19:29] <rpav> and you don't have to deal with people
[22:19:30] <LordKalma> ville, and I hate that. but I ranted about that way too much
[22:19:33] <ville> cbreak: it's not like the manufacturers weren't given an out, they just largely didn't take it. originally at least. google has done some efforts of dragging them into upstreaming
[22:19:41] <rpav> PJBoy: yeah you need a phone for a lot of things
[22:19:42] <PJBoy> my complaint is that I need a phone to do banking or online payments
[22:19:43] <ville> LordKalma: hate "that"?
[22:19:47] <PJBoy> which is terrible
[22:19:55] <LordKalma> ville, that linux "requires" drivers to be upstreamed
[22:19:57] <LordKalma> it's a BS system
[22:19:58] <LordKalma> anyway
[22:20:00] <ville> LordKalma: it's great
[22:20:05] <Guest7359> PJBoy: no, the coodinates card was before phone
[22:20:07] <rpav> mm probably i wouldn't _need_ one in the US
[22:20:11] <Guest7359> coordinates
[22:20:16] <PJBoy> I'm not familiar with this coordinates card thing
[22:20:25] <rpav> i think i can do actual callback, but who the fuck has a land line
[22:20:27] <LordKalma> also, let's talk about mediatek's flagrant disregard for the GPL?
[22:20:35] <LordKalma> and most phone manufacturers also haha
[22:20:50] <Guest7359> it is matrix with codes that comes to your home by snail mail that you use to validate operations online
[22:21:05] <PJBoy> pretty sure we don't have any support for that in the UK
[22:21:08] <LordKalma> ah there's a bank here that does that
[22:21:12] <rpav> i don't think i could use an offline authenticator for most of the banks i've seen
[22:21:19] <LordKalma> it's a card with a bunch of numbers and they ask for random ones
[22:21:29] <rpav> dood
[22:21:33] <rpav> does it come with the red glasses too
[22:21:34] <PJBoy> that reminds me of those old DOS antipiracy codebooks
[22:21:40] <Guest7359> in general talking: don't use a system which is abusive
[22:21:41] <rpav> totally
[22:22:03] <LordKalma> rpav, is that a nick cage movie reference?
[22:22:20] <PJBoy> hey man, I don't want 2FA forced on me
[22:22:24] <PJBoy> but there's nothing I can do
[22:22:33] <LordKalma> something something we live in a society
[22:22:41] <rpav> _why_ can i not find a picture of one of these, wtf
[22:22:43] <ville> we still have cards with pass numbers and "calculators" that give you pass numbers to do banking. no real need for phone
[22:22:52] <Guest7359> also, University teaches: manual methods (like a paper matrix) are important too (not all needs to be automatized)
[22:22:59] *** Quits: immibis (~hexchat@2a02:3032:a:4f76:b82c:396f:6558:3779) (Quit: HexChat)
[22:23:16] <Guest7359> PJBoy: what is 2fa?
[22:23:21] <PJBoy> two factor authentication
[22:23:27] <Guest7359> I am from Argentina
[22:23:38] <Guest7359> ah
[22:23:41] <rpav> LordKalma: no like https://www.mocagh.org/lucasfilm/indycrusadeuk-alt-table.pdf
[22:23:44] <PJBoy> generally it's where you get sent a text with a code that you have to confirm
[22:23:47] <LordKalma> rpav, https://images.trustinnews.pt/uploads/sites/5/2019/12/3062866montepio.jpg
[22:23:55] <LordKalma> it's one of these
[22:23:58] <PJBoy> or you have to open an app and authenticate
[22:23:58] <LordKalma> and they ask random coordinates
[22:23:59] <rpav> LordKalma: they came with red "glasses" that you had to use to see the codes but you couldn't trivially photocopy
[22:24:14] <ville> https://i.media.fi/incoming/61xx57/6986504.jpg/alternates/FREE_720/6986504.jpg
[22:24:18] <rpav> sure makes sense
[22:24:30] <LordKalma> I don't have any of that BS
[22:24:30] <PJBoy> wow nordea?
[22:24:42] <PJBoy> oh nvm
[22:24:54] <LordKalma> my bank uses sms like everybody else
[22:25:12] <ville> certainly not true
[22:25:25] <LordKalma> you have my over-generalizations
[22:25:29] <PJBoy> my bank requires me to type in a SMS'd code to log into my online bank account
[22:25:30] <LordKalma> *hate
[22:25:35] <PJBoy> it's some crappy bullshit
[22:25:41] <LordKalma> ,mine does every 90 days, per EU rules
[22:25:46] <PJBoy> as if my phone is more secure than my computer
[22:26:13] <ville> switch banks to one that offers different options
[22:26:14] <LordKalma> and the phone app can be used with the password of with a pin number, and to enable pin you have to actually call them and validate a bunch of data
[22:26:24] <PJBoy> they all do this
[22:26:36] <ville> mine doesn't
[22:26:42] <rpav> PJBoy: well, is your phone more secure than your wallet, because probably you treat it that way and it's at least as sensitive
[22:26:42] <cbreak> all my banks require 2FA
[22:26:48] <cbreak> none of that SMS bullshit
[22:26:49] <PJBoy> lucky you
[22:27:02] <Guest7359> for all who don't have it: maybe check further about bank documentation
[22:27:04] <ville> i operate my online banking using a "calculator" much like the picture i pasted
[22:27:06] <rpav> like if you lost your wallet you'd probably be slightly more fucked than losing your phone, because nothing is secure
[22:27:14] <cbreak> one of them has an application with stored secret reading a code, and giving back a one time use code
[22:27:27] <cbreak> the other has a similar thing in hardware, using the bank card for storage of the secret
[22:27:31] <PJBoy> my phone has a lock screen, so it's more secure than my wallet
[22:27:31] <rpav> like, obviously hacking a phone is trivial enough but you don't need any effort to read cards in a wallet
[22:27:39] <rpav> right
[22:27:44] <PJBoy> but my wallet has almost no value
[22:27:50] <PJBoy> just whatever cash is in there
[22:27:53] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:27:54] <rpav> no ID/license/bank cards?
[22:28:00] <rpav> those are enough to do anything your phone can
[22:28:03] <PJBoy> you can use my cards without the pin
[22:28:21] <Guest7359> nobody should be forced to have phone, mail, etc. but laws are becoming more and more bad lately; we need to resist and be wise (seeking God too; he talks of "the last times")
[22:28:23] <anyone> the phone is the bank card these days
[22:28:26] <PJBoy> I guess you could try an online transaction
[22:28:29] <rpav> your ID and someone can be you and get all your thnigs, and your cards give them all the information on where to go
[22:28:46] <PJBoy> we don't have ID cards in the UK
[22:29:06] <rpav> well how do you physically authenticate with the bank or something
[22:29:17] <Guest7359> PJBoy: I didn't read if you can't use automated cashiers
[22:29:24] <PJBoy> they have my photo on their computers
[22:29:33] <PJBoy> the automated cashiers are inside the banks
[22:29:39] <PJBoy> so I can't use them when the banks are closed
[22:29:45] <rpav> that's pretty terrible
[22:29:48] <Guest7359> yeah, both USA and UK don't have ID card
[22:29:50] <cbreak> that's quite reasonable
[22:30:11] <rpav> PJBoy: you have to check in when entering the bank or what?
[22:30:12] <LordKalma> I can't understand a world withotu ID cards honestly
[22:30:24] <Guest7359> PJBoy: uh, but you are supposed to open the doors with your card
[22:30:26] <LordKalma> also, with bank cards without a pin
[22:30:28] <rpav> the US definitely has ID cards .. try doing anything without a license/state-issues ID/passport
[22:30:40] <PJBoy> Guest7359, never seen anything like that
[22:30:48] <rpav> plus Real ID is a thing though it's perpetually delayed
[22:30:58] <Guest7359> PJBoy: because automated cashiers are always on a separate room
[22:31:14] <PJBoy> not over here, they're in the lobby
[22:31:17] <LordKalma> anyway, this will get political in 5 minutes
[22:31:19] <LordKalma> I'm out :p
[22:31:24] <Guest7359> also there are networks of cashiers not only on banks
[22:32:03] <PJBoy> whenever I do need to present an ID, we can use either a drivers license or passport
[22:32:05] <cbreak> here in switzerland, there's often a room or part of the bank you can enter outside opening hours, if you have a bank card
[22:32:05] <ville> PJBoy: it could also be that your banks are hiding the "calculator" option. ask for it
[22:32:17] <cbreak> and inside it, there are those Automated ATM Machines
[22:32:44] <LordKalma> here there are ATMs literally everywhere
[22:32:48] <LordKalma> like facing the street
[22:32:53] <cbreak> that too...
[22:33:00] <rpav> yeah lot of ATM skimmers here too heh
[22:33:03] <cbreak> a few months ago, some morons tried to blow one of those up with a bomb
[22:33:04] <ville> PJBoy: here the phone app option is being pushed as the first thing
[22:33:04] <Guest7359> rpav: strangers are forced afaik; not native, basically; but I guess the pressure is very high
[22:33:08] <cbreak> it didn't work
[22:33:12] <LordKalma> but there are special ones inside the bank itself that requires card to open
[22:33:15] <rpav> or any public CC swipe.. gas station etc
[22:33:24] <rpav> Guest7359: ??
[22:33:28] <PJBoy> there's no swipe in the UK at all
[22:33:35] <LordKalma> rpav, my card doesn't even have a mag strip anyway
[22:33:36] <rpav> you use the seashells?
[22:33:38] * rpav runs
[22:33:38] <PJBoy> if someone swipes you here, you'd probably tip off the police
[22:34:04] <rpav> LordKalma: ah that's good
[22:34:04] <cbreak> LordKalma: is the mag stripe even used nowadays?
[22:34:11] <LordKalma> I sure hope not
[22:34:14] <rpav> mag stripe are definitely in use still here sadly
[22:34:16] <cbreak> I thought that's some legacy thing that was phased out decades ago
[22:34:19] <LordKalma> but the US is infamous of old card tech
[22:34:23] <LordKalma> like no pins and mag strips
[22:34:41] <cbreak> I don't have to enter a pin for purchases below 40 francs
[22:34:43] <rpav> i try to only use NFC personally but our new CC aren't quite caught up to my other bank
[22:34:45] *** Joins: c4017w__ (~c4017@209.52.68.8)
[22:35:00] <LordKalma> I don't have to introduce a pin when using the NFC under 50€
[22:35:04] <LordKalma> but always if using the chip
[22:35:08] <cbreak> yeah, NFC works ok
[22:35:09] <LordKalma> which doesn't make much sense, but ok
[22:35:35] <Guest7359> [15:57:25] <rpav> the US definitely has ID cards .. try doing anything without a license/state-issues ID/passport --> rpav: strangers are forced afaik; not native, basically; but I guess the pressure is very high
[22:35:35] <rpav> phone are great though because insta paper trail
[22:35:51] <rpav> or like, bit trail i guess but close enough to see what i spent .. not that there's any delay in getting that from the bank now either
[22:36:06] <rpav> Guest7359: your statement still makes no sense to me with that as context
[22:36:11] <Guest7359> rpav: in example, menonites don't have one
[22:36:18] <cbreak> Guest7359: I've not been in the US for decades, but I read that you have to get a drivers license to buy beer over there
[22:36:31] <PJBoy> ville, I might give that a try
[22:36:43] <LordKalma> whenever I talk to US people about ID cards they are OMG BIG BROTHER DYSTOPIAN SHIT
[22:36:46] <PJBoy> I was trying to find the email my bank sent me about the whole 2FA thing
[22:36:55] <LordKalma> as if they didn't have de-facto systems anyway, that are *worse* than an universal ID
[22:36:55] <rpav> Guest7359: oh well probably they don't do a lot of things that need such =P
[22:37:07] <Guest7359> cbreak: that would be "forcing/pressure by market" style, yes :)
[22:37:23] <Guest7359> either you pressure by gov or by market
[22:37:24] <LordKalma> (plus, 90% of the "omg voter id" problems would go away with an universal ID card. I go to vote, I present my ID, it's done)
[22:37:38] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:37:41] <rpav> LordKalma: i think the fear is less having an ID than being required to have an ID to do things, which is a problem if you have a hard time getting one
[22:37:49] *** Quits: c4017w_ (~c4017@209.52.68.8) (Ping timeout: 240 seconds)
[22:37:49] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:37:50] <PJBoy> ville, my bank's online banking at least doesn't offer any alternatives though
[22:38:02] <PJBoy> the login page asks for my phone number and has no other way to proceed
[22:38:09] <cbreak> LordKalma: funnily enough, while I have two national swiss IDs, I use neither for voting :)
[22:38:11] <rpav> e.g. there's no shortage of making getting IDs hard for one political party's "undesirable" populations
[22:38:12] <Guest7359> rpav: here in Argentina we have forced ID
[22:38:25] <LordKalma> rpav, well, you have an ID card since you're born pretty much
[22:38:30] <LordKalma> so there's no "problem" getting one
[22:38:31] <rpav> LordKalma: sure
[22:38:34] <Guest7359> rpav: made by dictatorships afaik
[22:38:43] <PJBoy> I wish we had an ID card in the UK
[22:38:51] <PJBoy> drivers licenses and passports are expensive
[22:38:54] <LordKalma> it makes things simple, honestly
[22:38:59] <cbreak> getting an ID should be easy.
[22:39:08] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[22:39:10] <cbreak> although, they aren't cheap
[22:39:15] <LordKalma> https://www.autenticacao.gov.pt/documents/20126/0/CartaoCidadao+%281%29.png/7e294588-78f3-2753-87ce-2314e7340942?t=1632407654617&imagePreview=1
[22:39:17] <LordKalma> ours look like this
[22:39:20] <cbreak> I had to pay 130 swiss francs for a combo of passport and ID card
[22:39:28] <Guest7359> anyway, I repeat: God is over all; we don't need to desperate but trust on him
[22:39:39] <LordKalma> my ID card cost me 15€ and is valid for 10 years
[22:39:52] <LordKalma> (5 years if you're under 25)
[22:39:53] <PJBoy> !give Guest7359 religion
[22:39:54] <nolyc> Guest7359: #C++ is a secular channel. This means that the following topics, among others, may not be debated: emacs/vim, Linux/Mac/Windows/BSD, Qt/*, open/closed source. Matters directly related to standard C++ (including style) are ok as long as they are intellectual.
[22:40:05] <LordKalma> hahahaha wtf
[22:40:20] <LordKalma> Qt/* I love how there isn't alternative :p
[22:40:29] <PJBoy> :<
[22:40:30] <cbreak> of course there's not.
[22:40:37] <PJBoy> windows API
[22:41:03] <cbreak> PJBoy: not even with a barrel of WINE
[22:41:13] <PJBoy> >_<;
[22:41:46] <rpav> does anyone really religiously support qt?
[22:41:59] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[22:42:29] <PJBoy> QAnon
[22:42:45] <cbreak> ...
[22:43:03] <cbreak> bunch of star-trek TNG lunatics
[22:43:18] <rpav> cbreak: i don't tihnk that's what they are heh
[22:43:33] <Guest7359> if one can't talk partially offtopic of anything there is not freedom of speech
[22:44:02] <rpav> no one said there was
[22:44:07] <cbreak> there is indeed not.
[22:44:22] <cbreak> there's freedom of make-your-own-channel
[22:44:32] <rpav> and 2- yours is only abridged if it's the government arresting you for it; anyone else telling you off or kicking you out is fair game
[22:44:36] <Guest7359> and as I said, we don't have to support these things
[22:45:01] <cbreak> rpav: depends.
[22:45:10] <cbreak> there is such a thing as a common carrier
[22:45:10] <rpav> speaking of TNG, we do sortof have a lot of TNG tech these days, and better than they had in the show a lot of the time
[22:45:17] <rpav> like look at those clunky pads
[22:45:20] <cbreak> at least there should be, in civilized countries
[22:45:29] <Guest7359> rpav: ofc, gov is over the chat
[22:46:12] <cbreak> rpav: I've wondered over the years why people would accept touch screens for input. Even though they suck.
[22:46:18] <cbreak> turns out, reality accepted touch screens :/
[22:46:25] <Guest7359> rpav: ah, re-reading
[22:46:32] <rpav> cbreak: they do still suck though
[22:46:36] <rpav> i want my blackberry back
[22:46:57] <cbreak> I like my phone. But it's bad at productivity.
[22:47:13] <rpav> it's a decent information access device but definitely bad at information creation
[22:47:18] <cbreak> yes.
[22:47:31] <cbreak> at least I can attach an external USB keyboard to mine.
[22:47:38] <cbreak> ... probably... I shall try that once.
[22:47:45] <rpav> though to be fair, the blackberry was a pretty terrible information access or creation device, but ok at messaging
[22:47:56] <Guest7359> rpav: I don't understand your phrases; freedom of speech; it is easy
[22:48:05] <rpav> Guest7359: it's never easy
[22:49:08] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[22:50:40] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[22:54:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[22:54:30] <PJBoy> at least we have IRC
[22:54:39] <PJBoy> which is like two ships crossing in the night
[22:56:29] <rpav> the lesson should be that communication is hard when you have one party actively introducing noise
[22:57:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:58:23] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:59:32] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:02:50] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 260 seconds)
[23:05:42] *** Joins: proller (~p@2a02:6b8:b081:26::1:13)
[23:12:26] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[23:15:29] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[23:16:36] *** Quits: Terminus (~null@user/terminus) (Ping timeout: 240 seconds)
[23:18:11] *** Joins: zmt01 (~zmt00@user/zmt00)
[23:20:31] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[23:27:02] <rpav> wtf, when would a default copy/move ctor not copy values
[23:27:18] <rpav> or copy/move assignment i guess for whatever happens when a vector gets resized
[23:30:08] <rpav> facepalming headdesking #@!#@!#@!#@
[23:32:34] <cbreak> rpav: the only reason I can think of is for crappy legacy-support like the old auto_ptr
[23:32:54] <rpav> nah i was being dumb
[23:33:28] <rpav> `auto& v0 = v.emplace_back(..); auto& v1 = v.emplace_back(..); v0.foo = ...; v1.foo = ...;`
[23:33:58] <rpav> this is sortof why i want a `with` block
[23:34:20] <rpav> like you could use if or if-assign-true but that's ugly and/or doesn't work if no implicit bool true
[23:35:02] *** Joins: c4017w_ (~c4017@209.52.68.8)
[23:35:59] <cbreak> that seems very risky
[23:36:31] <rpav> which? the first is broken without unspecified guarantees; if is a bad choice; with isn't very risky
[23:36:36] <cbreak> you can use manual scope {}
[23:36:53] <rpav> manual scope is fugly, and the point here is to have it look nicer
[23:37:03] <cbreak> { auto & v0 = ...; } { auto & v1 = ...; }
[23:37:04] <geordi> error: expected unqualified-id before '{' token
[23:37:24] <cbreak> rpav: ... and here I thought it was to make it more readable and more maintainable
[23:37:25] <rpav> yeah that's ugly as hell
[23:37:36] <cbreak> and keeping invalid references out of scope is more maintainable
[23:37:45] <rpav> with(auto&& x = ..) x.a = ...;
[23:38:10] <rpav> kinda like if(..) but no condition, just scope with assignment
[23:38:32] <cbreak> you can already define variables in scope
[23:38:33] <rpav> if(auto&& x = ...; 1) ...
[23:38:46] *** Quits: c4017w__ (~c4017@209.52.68.8) (Ping timeout: 260 seconds)
[23:38:52] <rpav> cbreak: yes and if you think it looks nice you're disqualified from the conversation =P
[23:39:06] <cbreak> it's nicer than the shitty scoping python has.
[23:39:08] <xkoncek> #define 🚗 auto
[23:39:18] <rpav> manual { ... } always gets formatted on multiple lines and is hard to read
[23:39:25] <LordKalma> !grab xkoncek
[23:39:25] <rpav> xkoncek: hehe
[23:39:25] <nolyc> LordKalma: The operation succeeded.
[23:39:45] <rpav> python is irrelevant
[23:39:48] <cbreak> I like having multiple lines
[23:39:56] <rpav> with(..) { ... }
[23:40:08] <LordKalma> #define scope  // and then use scope { ... }
[23:40:14] <rpav> the problem is when you have like { and some indentation absent any obvious heading/context
[23:40:24] <LordKalma> thus, #define scope
[23:40:26] <rpav> fair, in fact
[23:40:35] <cbreak> that's why I have comments
[23:40:40] <cbreak> when it's not plain obvious
[23:40:54] <xkoncek> i got used to scope without any text preceding it
[23:41:06] <rpav> #define with(...) if(__VA_ARGS__; 1)
[23:41:08] <LordKalma> #define'ing keywords is the Qt way :D
[23:41:22] <xkoncek> i know that there is some temporary destruction taking place
[23:41:44] <LordKalma> like #define Q_EMIT // nothing
[23:41:55] <rpav> or slots
[23:42:12] <LordKalma> slots actually #define's to something
[23:42:23] <rpav> actually scoped declarations are the one thing you _can't_ do with lazy args, extremely tangentially
[23:42:34] <rpav> LordKalma: only during moc or something i think
[23:42:48] <rpav> otherwise there isn't valid syntax for any `public XXX:`
[23:43:05] <rpav> i'm not really sure what all moc does and i don't really want to find out
[23:43:05] <LordKalma> you're right
[23:43:12] <LordKalma> it's Q_OBJECT that #define's to something
[23:43:19] *** Quits: Kerr (~Kerr@2601:602:ce80:df10::b76e) (Quit: Client closed)
[23:43:27] <rpav> yeah that's a big hairy ball of QMetaObject things or something
[23:45:07] *** Joins: pulse (~pulse@user/pulse)
[23:45:23] <ville> /* comment */ {}
[23:47:35] <LordKalma> and signals #define's to protected iirc
[23:48:41] *** Quits: foobaz21266 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:48:55] *** Joins: foobaz21266 (~foobaz212@152.37.103.80)
[23:56:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[23:56:39] <mort> kinda disappointed, none of the default clang-format styles are... good
[23:57:03] <mort> almost all have this horrible variable alignment to the opening paren of the function and other terrible choices
[23:58:57] <PJBoy> I also dislike alignment with the opening parenthesis
[23:58:59] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
