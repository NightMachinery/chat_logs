[00:09:47] <LordKalma> you can register Qt Creator in away (at least on windows) that launches a post mortem debugger when something crashes
[00:10:13] <PJBoy> meh
[00:11:00] *** Quits: paul424 (~tom@ip-31-0-126-254.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:11:06] <PJBoy> my workflow for doing work on linux is generally using VS Code on windows nowadays
[00:19:37] <InPhase> KombuchaKip: Sure.  I don't think your problem as you've cast it is solvable, I was just trying to raise awareness about why.
[00:20:36] <InPhase> KombuchaKip: Now there's a good chance you have an xy problem going on, and maybe if you back the description level up a notch and explain what has driven you to try to generically compare floats, we could identify another approach to solve the real problem.
[00:24:46] *** Joins: AmR| (~AmREiSa@156.199.5.112)
[00:25:09] <KombuchaKip> InPhase: Let me think some more on that and re-read a paper again.  In the mean time one thing that sticks out to me as a possible solution is for the caller to specify the relative error as part of a template type for AlmostEquals<size_t>(float, float).
[00:25:17] *** Quits: AmR (~AmREiSa@156.207.199.106) (Ping timeout: 240 seconds)
[00:29:19] *** AmR| is now known as AmR
[00:29:47] <AmR> Any one work with NDK ?
[00:32:07] <InPhase> KombuchaKip: Relative error will never be sufficient, like with those two values 1e35 apart.
[00:32:32] * KombuchaKip shrugs
[00:32:35] <InPhase> KombuchaKip: Sometimes you need relative, sometimes you need absolute, sometimes both.
[00:32:49] <KombuchaKip> InPhase: Well, call site could specify something.
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:34:54] <InPhase> size_t for ULP accuracy on the max plus a float for operand scale could do it fairly generically.  If both are zero it's an == operation.  :)  But again, probably an xy problem at heart.
[00:36:26] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 268 seconds)
[00:37:30] *** Joins: nomo (~nomo@95.87.208.95)
[00:38:37] *** Quits: phoenix (phoenix@user/phoenix) (Ping timeout: 240 seconds)
[00:38:57] *** Joins: phoenix (phoenix@user/phoenix)
[00:48:21] <KombuchaKip> InPhase: What's an xy problem?
[00:50:34] <InPhase> KombuchaKip: This thing:  https://xyproblem.info/
[00:50:49] <InPhase> KombuchaKip: I was happy to address the y, but there's probably an x.
[00:51:23] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939)
[00:51:23] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb3:a1b7:6fb3:1939) (Changing host)
[00:51:23] *** Joins: skapata (~Skapata@user/skapata)
[00:56:09] *** Joins: badone (~badone@209.132.189.152)
[00:56:36] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[01:06:16] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[01:06:28] *** Quits: Burgundy (~yomon@79.115.213.171) (Remote host closed the connection)
[01:07:24] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:15:42] <Alipha> So, to recap, using a relative scale fudge factor when comparing floats for equality is okay in pretty much any situation, except when comparing values which are supposed to be 0. In which case, you need to compare using a fudge factor with a scale of what the values involved in the calculation were.
[01:18:57] *** Quits: immibis (~hexchat@62.156.144.218) (Remote host closed the connection)
[01:18:59] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:22:49] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:22:51] *** Joins: immibis (~hexchat@62.156.144.218)
[01:24:26] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[01:27:02] <AmR> Any one work with NDK under command line ?
[01:34:50] *** Quits: sysctl (~sysctl@88.215.77.255) (Quit: leaving)
[01:35:53] *** Joins: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de)
[01:39:45] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:53] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:53] *** ChanServ sets mode: +v npaperbot
[01:40:17] <KombuchaKip> Alipha: Thanks. Reflecting on all of the above and doing some more reading.
[01:41:11] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 245 seconds)
[01:43:27] *** Joins: pdroman (~pdroman@197.red-79-156-174.staticip.rima-tde.net)
[01:44:12] *** Quits: Leone (~Leo@69-165-148-197.dsl.teksavvy.com) ()
[01:46:49] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[01:48:53] <Alipha> << fixed << setprecision(10) << 100.1f;
[01:48:54] <geordi> 100.0999984741
[01:49:40] <Alipha> So, for numbers around 100, the smallest difference between two numbers that a float can distinguish is about 0.00001.
[01:51:17] *** Quits: pdroman (~pdroman@197.red-79-156-174.staticip.rima-tde.net) (Remote host closed the connection)
[01:54:11] <Alipha> Which means if you did `x - y`, where x and y were both 100.1, but x and/or y was the result of a computation, which means x and/or y may not be 100.0999984741, but a number very close to it, then you may get a result like 0.000002, which you need to treat as 0
[01:55:01] <Alipha> << fixed << setprecision(10) << 0.00101f;
[01:55:01] <geordi> 0.0010100000
[01:55:07] <Alipha> Oh, heh
[01:55:18] <Alipha> << fixed << setprecision(15) << 0.00101f;
[01:55:18] <geordi> 0.001010000007227
[01:59:30] <Alipha> But if x and y are around 0.001, then the smallest difference that can be distinguished is about 0.00000000001. Which means 0.000002 should not be treated as zero, but instead, values smaller than 0.00000000001 should be treated as zero
[02:00:25] <Alipha> So if you have the number 0.000002, you don't know if that should be treated as 0 or not without knowing what numbers were subtracted
[02:01:13] <Alipha> (I thought InPhase did a great job of explaining, but perhaps a different explanation would help)
[02:06:17] *** Quits: magla (~gelignite@55d4bf95.access.ecotel.net) (Quit: Stay safe!)
[02:06:30] <LordKalma> mandatory https://0.30000000000000004.com/ shill
[02:07:02] *** Joins: Simplar (~Simplar@188.163.93.76)
[02:08:14] *** Quits: CoderCharmander (~CoderChar@20014C4C12563000BCCDBFC417CDB7F0.catv.pool.telekom.hu) (Quit: Leaving)
[02:10:21] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[02:12:19] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[02:13:33] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[02:17:33] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[02:20:57] *** Joins: markong (~kvirc@213.146.188.203)
[02:24:45] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[02:30:44] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[02:31:10] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community https://indiedevs.net/)
[02:34:57] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[02:42:43] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[02:55:51] <very_sneaky> could also avoid floats and go for arbitrary precision decimal types, like boost::multiprecision
[03:01:50] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzzâ€¦)
[03:05:46] *** Quits: nomo (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[03:06:26] *** Quits: phoenix (phoenix@user/phoenix) (Quit: WeeChat 3.2.1)
[03:06:32] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:07:41] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[03:09:33] *** Joins: phoenix (~phoenix@user/phoenix)
[03:11:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[03:11:40] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[03:18:18] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:acff:f5a2:fb9a:e3d2) (Remote host closed the connection)
[03:22:05] *** Joins: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net)
[03:24:41] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[03:25:43] <KombuchaKip> InPhase: I'm not sure what you mean by representation / data precision.
[03:29:06] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[03:32:01] *** Quits: andreasbuhr (~quassel@p549db336.dip0.t-ipconnect.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[03:35:09] <InPhase> KombuchaKip: Representational precision is the amount of procession provided by a particular floating point type.
[03:35:47] <KombuchaKip> InPhase: As in 32-bit, 64-bit, etc. But what about data precision?
[03:36:26] <InPhase> KombuchaKip: Data precision is the precision of a value that represents something in the real world, which is more meaningful for a very large amount of floating point data.
[03:36:39] * KombuchaKip nods
[03:36:44] <KombuchaKip> InPhase: Ok, still reading.
[03:37:25] <InPhase> KombuchaKip: For example, measure someone's height, and you're not going to get a value better than a centimeter by any method, because a person's height changes on that scale just from small posture changes and other things.
[03:38:02] <InPhase> KombuchaKip: Therefore you have a big gap between the data precision of a person's height and the representational precision.
[03:40:01] <InPhase> By fundamental principles of measurement theory, there is non-zero statistical uncertainty on every single real world physical value from the set of reals obtained by measurement or calculation from measurements, which is almost every value having anything to do with the real world.  And, floats were invented specifically to deal with these.
[03:40:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:42:30] <InPhase> There is also a non-zero systematic error.  So all that matters for floating point work is that the floating point precision for calculations does not make these pre-existing fundamental statistical and systematic errors larger.  Once you accept that they exist, the methods one uses to address them are the methods of statistics, and not equality.  For example, you check to see if two values are
[03:42:36] <InPhase> within a standard deviation or an uncertainty of the mean of each other, rather than some arbitrary representational value.
[03:47:33] <InPhase> Imagine you are using floating point biometric values from an image to try to equate two identities.  You cannot do equality or almost equality.  You have to determine the distributions of values obtained by a distribution of measurements of the same person and use a statistical comparison to establish whether the new measurement is likely to be from the same population of measurements of the same
[03:47:39] <InPhase> individual.  That establishes equality.
[03:58:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4)
[04:03:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:21ba:a382:6b6:54c4) (Ping timeout: 240 seconds)
[04:05:41] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:24:33] * KombuchaKip is surprised that no one has discovered a better alternative to IEEE754 where the machine'epsilon is constant
[04:24:49] <KombuchaKip> machine's epsilon value is constant for any representable real numbers.
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:29:57] *** Quits: jkaye (~jkaye@2601:281:8300:7530:76ff:6d0a:27ec:c880) (Ping timeout: 240 seconds)
[04:30:12] *** Quits: varioust (~varioust@72-46-56-102.lnk.ne.static.allophone.net) (Ping timeout: 256 seconds)
[04:34:12] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[04:38:37] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[04:38:52] <KombuchaKip> InPhase: So I've reviewed some reading again, including revisiting RandomReader's article. I think the previous ULP approach might be better than what you proposed, but it still needs to be fixed. Working with ULPs can be more efficient on x86 where I have SIMD instructions for moving from x87 registers into an integer one (which you need to do when type punning).
[04:39:30] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:41:06] <KombuchaKip> InPhase: I think the challenge is trying to figure out how many ULPs are acceptable because one ULP is totally reasonable when we are talking about large floats in the 16M range. For small values you need more. So basically one needs to find the curve that suits the application where X is size of an operand and Y axis is acceptable ULPs.
[04:42:10] <InPhase> One ULP is as likely to fail as succeed.
[04:43:10] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:43:14] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 260 seconds)
[04:44:57] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[04:46:33] <KombuchaKip> InPhase: How so? If you have two really large values that you want to test for equivalency, and one of them is distanced from the other by even a few hundred thousand, that might still be because of only one ULP's separation.
[04:47:30] <KombuchaKip> InPhase: Comparing via ULPs is another way of doing relative comparison.
[04:50:21] <InPhase> KombuchaKip: How are you representing two values that are a few hundred thousand apart that fits within one ULP unless one ULP is exactly a few hundred thousand?
[04:50:29] <kalven> I'm assuming this has already been asked and answered, but wht are you writing KombuchaKip?
[04:50:46] <InPhase> Asked but not answered yet that I saw.  :)
[04:51:19] <KombuchaKip> InPhase: Represented as single precision 32-bit floating point. The use case is DSP calculations as I think I mentioned.
[04:51:50] <KombuchaKip> kalven: It's specific to feature analysis for DSP.
[04:53:22] <KombuchaKip> Let me check and see what the typical ranges are when not [0,1]
[04:57:03] <InPhase> Feature analysis of what sorts of features?
[04:57:28] <InPhase> There is almost nothing a DSP touches that you should be treating in this manner.
[04:59:25] <KombuchaKip> InPhase: I can't really get into the contextual details because I am under NDA, but I've never heard of DSP work of this nature that isn't done using floating point representation, arithmetic, and comparison. Doing it all with integers might be faster, but a lot more complicated.
[04:59:59] <InPhase> KombuchaKip: Sure, floats.  But you don't do equalities on digital signals.
[05:00:43] <KombuchaKip> InPhase: If you are trying to perform feature normalization, you need to compare each one to some baseline to try and find, for example, a minimum or maximum value.
[05:00:52] <InPhase> KombuchaKip: You should really reread my soliloquy about measurement principles.  :)
[05:00:57] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 240 seconds)
[05:02:03] <KombuchaKip> InPhase: It makes for interesting philosophical reading, but it doesn't help me solve the problem right now. Speaking of which, it looks like the ranges, when normalized, are always [0, 1] as discussed, and when not normalized are approximately [-100,100]. As in usually under a +/- hundred.
[05:02:29] <InPhase> And that's one way to normalize features.  A more robust method for DSP signal feature normalization is z-scoring.
[05:02:52] <InPhase> max/min normalization corrupts feature integrity by outlier noise.
[05:03:03] <KombuchaKip> InPhase: I need to do min-max normalization.
[05:03:21] <InPhase> Are you feeding this into some machine learning algorithm?
[05:04:09] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:05:10] <KombuchaKip> InPhase: Yes. And it looks like the unnormalized ranges are yet to exceed +/- 100, though it could happen. Regardless, we're talking about values that are either normalized or [0, 100] 99 % of the time. There might be the odd one that's a little over a 100, but none of the input data I've been working with has turned up that scenario yet. This gives us the orders of magnitude to consider in refactoring AlmostEquals(float, float).
[05:06:13] <InPhase> KombuchaKip: Yeah, most likely you really want z-scoring instead.  Do you have a data scientist or statistician on staff that's within NDA that you can discuss this with?
[05:06:47] <InPhase> KombuchaKip: They will understand the impact of min/max vs z-scoring on noise altering the most core learnable features of the data.
[05:07:46] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:08:59] <InPhase> And at no point would you want DSP data flowing into an AlmostEquals routine.  This is absolutely the textbook case of where you need to know the distribution of a specific target signal so that you can make a statistical comparison.
[05:10:32] <InPhase> Again if you have someone with a stats background to discuss that with, or someone familiar with measurement or analysis of this sort of data in the past, it's worth talking to that person about it.
[05:11:47] <InPhase> I assure you this isn't philosophy.  :)  It's from a long career of working with instrument data.
[05:12:53] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:13:05] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[05:13:50] <KombuchaKip> InPhase: Right now we don't have a data scientist / statistician, but at some point we might and, hey, it could be you. When we are talking about normalized features, they're not really DSP or anything at that point. They might have started that way, but the whole point of normalization is that the units become dimensionless.
[05:13:57] <KombuchaKip> And consistently scaled.
[05:14:03] *** Joins: frost (~frost@user/frost)
[05:14:50] <InPhase> KombuchaKip: Yeah.  That's what the z-scoring gives you, but by statistically robust values of mean and standard deviation, rather than extrema.
[05:16:42] <InPhase> KombuchaKip: My current project involves feature selection from brain signal oscillations measured from implanted electrodes using a DSP, fed into machine learning algorithms which attempt to assess brain state and determine when to deliver electrical brain stimulation.  So I've dealt a bit with some of these questions.
[05:17:27] <KombuchaKip> InPhase: If you want to email me your CV, I'll make sure it needs to get to where it needs to. Feel free to DM me.
[05:17:45] <InPhase> KombuchaKip: I'm not hunting for work at the moment, but this is me:  https://rcolyer.net/cv.php
[05:18:06] * KombuchaKip nods
[05:19:30] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 256 seconds)
[05:20:48] <KombuchaKip> InPhase: Right now it would be far too much work to refactor everything to change the feature normalization algorithm, and it likely wouldn't make much, if any, difference to the performance or accuracy.
[05:21:02] <KombuchaKip> InPhase: But I could be wrong and down the road that might be something to look into.
[05:30:34] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 268 seconds)
[05:30:59] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:39:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:39:55] *** ChanServ sets mode: +v npaperbot
[05:40:22] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[05:41:28] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[05:41:33] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[05:42:35] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[05:42:44] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[05:42:56] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[05:47:38] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 260 seconds)
[05:51:43] *** Joins: ferdna (~ferdna@user/ferdna)
[05:52:34] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[05:53:45] *** Joins: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net)
[06:00:30] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[06:02:00] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[06:02:26] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[06:08:33] *** Joins: xardas (~xardas@149.233.51.127)
[06:11:16] *** Quits: wille (~wille@static.140.85.76.144.clients.your-server.de) (Ping timeout: 268 seconds)
[06:16:47] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:23:26] *** Quits: xardas (~xardas@149.233.51.127) (Quit: Client closed)
[06:24:13] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[06:25:31] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[06:25:53] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[06:25:57] *** Joins: wille (~wille@static.140.85.76.144.clients.your-server.de)
[06:27:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[06:31:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 268 seconds)
[06:32:13] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[06:36:48] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Quit: Leaving)
[06:37:57] *** Quits: JeffH (~JeffH@174-16-131-174.hlrn.qwest.net) (Remote host closed the connection)
[06:40:04] *** Joins: adeliktas6 (~adeliktas@i59F52B3A.versanet.de)
[06:42:02] *** Quits: adeliktas (~adeliktas@i59F5F9DB.versanet.de) (Ping timeout: 240 seconds)
[06:42:02] *** adeliktas6 is now known as adeliktas
[06:53:52] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:59:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:00:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:02:37] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:04:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[07:04:44] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 252 seconds)
[07:08:48] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9180:b80f:58c7:8de8) (Quit: Quit)
[07:09:00] <smallvil_> ok i think i got the character position mostly working
[07:20:26] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3dfc:e337:c0f:541a) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[07:23:20] <navidr> What would be the best approach to use FDO with CMake build system?
[07:33:48] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[07:35:19] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[07:37:12] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 256 seconds)
[07:37:37] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[07:38:17] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:06:38] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[08:07:25] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:09:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[08:10:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[08:11:18] <smallville7123> what am i doing wrong here? https://gist.github.com/mgood7123/429fbb2e15c3a1577e1891720f193238
[08:12:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3) (Ping timeout: 240 seconds)
[08:39:22] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (Quit: Ping timeout (120 seconds))
[08:39:37] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[08:39:43] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[08:41:29] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Quit: And I'm out.)
[08:42:24] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:1116:7911:5ad7:44c3)
[08:42:48] *** Joins: ravan (~ravan@42.201.198.151)
[08:42:48] *** Quits: ravan (~ravan@42.201.198.151) (Changing host)
[08:42:48] *** Joins: ravan (~ravan@user/ravan)
[08:43:51] *** Quits: ravan (~ravan@user/ravan) (Remote host closed the connection)
[08:44:16] *** Joins: ravan (~ravan@user/ravan)
[08:49:12] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[08:50:49] <smallville7123> how do i correctly compute my carrot position? https://gist.github.com/mgood7123/429fbb2e15c3a1577e1891720f193238 how about this?
[08:50:53] <smallville7123> how do i correctly compute my carrot position? https://gist.github.com/mgood7123/429fbb2e15c3a1577e1891720f193238
[09:21:17] *** Joins: nmz787 (~nmz787@user/nmz787)
[09:21:25] *** Parts: nmz787 (~nmz787@user/nmz787) ()
[09:24:48] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[09:30:08] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[09:31:18] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[09:36:14] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:39:46] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:39:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:39:54] *** ChanServ sets mode: +v npaperbot
[09:43:26] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:44:55] <AmR> Any one try CLion ?
[09:45:50] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[09:48:15] <johnny> lots of people have mentioned liking it, but it felt a bit too slow to me. although i use linux
[09:49:02] *** Joins: hw9891[m]12 (~hw9891thx@2001:470:69fc:105::1:533c)
[09:51:11] <AmR> johnny: I want know about it's cmake support ?
[09:51:23] <johnny> seems fine
[09:51:33] <johnny> iirc that's pretty much the default for it
[09:52:13] <johnny> you can use other build systems, but the cmake integration is the main way to do things
[09:52:45] *** Parts: hw9891[m]12 (~hw9891thx@2001:470:69fc:105::1:533c) ()
[09:55:11] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[09:57:59] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[10:06:58] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:07:44] <AmR> johnny: I'm looking for cmake auto complete  like C++, Can scan And Add words in target
[10:08:16] <johnny> i wouldn't know
[10:08:51] <johnny> seems like you should be able to search the web to find that out though
[10:09:19] <johnny> or just install it, because it can import existing cmake projects easily, so you can tell with your own code
[10:09:55] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 268 seconds)
[10:11:05] <AmR> I will try
[10:31:06] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[10:32:10] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Read error: Connection reset by peer)
[10:32:44] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:33:26] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[10:43:53] *** Joins: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de)
[10:43:53] *** Quits: andreasbuhr (~quassel@p549dba39.dip0.t-ipconnect.de) (Client Quit)
[11:10:08] *** Joins: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[11:11:46] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[11:12:17] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[11:12:39] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[11:12:57] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[11:27:02] *** Quits: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it) (Ping timeout: 240 seconds)
[11:27:09] *** Joins: nomo (~nomo@95.87.208.95)
[11:34:34] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:53:23] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[11:58:41] *** Joins: tryte (~nelg@183.17.124.167)
[12:00:43] *** Parts: tryte (~nelg@183.17.124.167) ()
[12:09:33] *** Joins: Simplar (~Simplar@188.163.93.76)
[12:20:01] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:21:15] *** Joins: robod34 (Username@79.113.195.239)
[12:22:51] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[12:23:05] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[12:23:19] *** Joins: malloy (~jimery@116.30.221.255)
[12:34:35] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:42:54] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:45:17] *** Quits: smallvil_ (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[12:47:30] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[12:48:25] *** Joins: frost (~frost@user/frost)
[13:17:53] *** Joins: plastico (~plastico@neomutt/plastico)
[13:28:54] *** Joins: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs)
[13:29:48] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:35:17] *** Quits: rajkosto (~rajkosto@109-93-94-77.dynamic.isp.telekom.rs) (Ping timeout: 240 seconds)
[13:39:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:39:54] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:39:54] *** ChanServ sets mode: +v npaperbot
[13:49:58] *** Joins: sysctl (~sysctl@88.215.77.255)
[13:52:34] *** Joins: msk (~msk@103.213.213.70)
[13:57:41] <xkoncek> do c++ coroutines always have to be stored on heap?
[13:59:56] <leduyquang753> From a quick CPPReference read looks like yes.
[14:02:30] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485)
[14:02:30] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:2898:525a:5805:3485) (Changing host)
[14:02:30] *** Joins: skapata (~Skapata@user/skapata)
[14:07:14] <xkoncek> it would be useful if there was an easier and more straightforward way to convert recursive visitor pattern to iterator pattern
[14:19:57] *** Quits: adeliktas (~adeliktas@i59F52B3A.versanet.de) (Ping timeout: 240 seconds)
[14:23:16] *** Joins: fredi (~fredi@189.6.232.131)
[14:23:52] *** Joins: adeliktas (~adeliktas@i59F52B3A.versanet.de)
[14:24:44] <fredi> since I failed to find an OpenMP channel, I tried #C++ and, from there, they suggested me here
[14:24:51] *** Joins: furrymcgee (~devuan@cgn-89-1-208-9.nc.de)
[14:24:55] <fredi> the following link relates: https://stackoverflow.com/questions/70414004/openmp-with-good-performance-in-c-function-but-not-in-c-class-method
[14:26:14] <fredi> it so happens I do know the person in trouble, his code being adapted from a project he worked for in physics department
[14:27:27] <fredi> that meaning: neither has he any idea of what exactly is being done (except for differential equations regarding the movement of neutrons or whatsoever), nor would he be able to produce any MRE
[14:28:22] <fredi> yet worse, the original code being written using C (and OpenMP while we're at it), he was forced (by Mr. Advisor) to rewrite it using C++
[14:30:18] *** Joins: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[14:30:28] <fredi> given this context, it was suggested to him in the last couple hours, by a third party, that OpenMP tries to synchro whenever an attribution is to be performed, and somehow in his particular case, would be trying to synchronize the object as a whole rather than only the member to be attributed
[14:32:45] *** Quits: cursey_ (~cursey@user/cursey) (Quit: bye)
[14:33:21] <fredi> my single question being if that does hold or makes any sense. long ago, structs and classes had minor differences aside the whole OOPist support, yet OpenMP manages to synchro struct members alone in C whereas not with C++ classes?
[14:35:00] <TinoDidriksen> That sounds like something that's easily testable.
[14:35:47] <fredi> sort of, despite it being (supposedly) tested right now, while we're having this conversation
[14:37:31] <fredi> TinoDidriksen  it means to rewrite in such a way for the attributions to happen outside of pragma scope
[14:38:12] <fredi> but, as a matter of course, it's being done. then again, I shall read OpenMP documentation to the detail would this be proven correct
[14:42:17] <TinoDidriksen> I meant you can directly compare the asm output of 2 simple cases in C and C++.
[14:46:19] *** Joins: ravan_ (~ravan@user/ravan)
[14:46:42] <PJBoy> are you sure it's even the parallel part that's slower?
[14:46:58] <PJBoy> those are pretty big functions
[14:47:45] *** Joins: cursey (~cursey@user/cursey)
[14:48:18] <PJBoy> also I don't think that parallel for inside the section does anything
[14:48:28] <fredi> PJBoy  I wondering that too and the answer is no, I'm not. This nonsensical synchronization hypothesis was something a person suggested, assuming the parallel part to be of blame
[14:48:46] <PJBoy> ah ok
[14:48:49] <TinoDidriksen> Oh. Well, profile it first then.
[14:49:01] <PJBoy> yeah definitely give it a profiling
[14:49:07] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[14:50:03] <PJBoy> but regardless of parallelism, having those functions calls like `.getQuadOrder()` in a loop is probably a bad idea
[14:50:17] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 240 seconds)
[14:51:06] <fredi> as for testing it with single instances (and comparing ASM), it didn't occur to me but can't do it myself since I never actually worked with OpenMP
[14:51:13] <fredi> simpler*
[14:51:57] <PJBoy> even for the C version, I would bring `e.ordQuad/2` out into its own const variable
[14:52:09] <PJBoy> and declare it as a private for the parallel for
[14:52:09] <fredi> TinoDidriksen  circa 10h ago I asked and he lacks knowledge of what profiling is, so...
[14:52:16] <fredi> I gave the same suggestion
[14:53:07] <PJBoy> if nothing else, I would slow the transition to C++ down a bit
[14:53:19] <PJBoy> the C code can work without any extra transformation in C++
[14:53:53] <PJBoy> so you can actually measure how much longer the code takes when doing other C++ things
[14:53:56] <PJBoy> like those accessor methods
[14:54:33] <PJBoy> especially if it's bad C++ has those are virtual methods D:
[14:55:57] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[14:57:29] <fredi> whatever "getQuadOrder()" is meant to be, or to do, I agree about this as well
[14:57:55] <fredi> as for virtual methods, could be such somehow related to the performance issue?
[14:59:01] <PJBoy> if those methods are virtual, then yeah
[14:59:49] <PJBoy> virtual methods have a bit of calling overhead to look up the most derived class' implementation of that method
[14:59:51] <fredi> PJBoy  because I know for a fact outside that code fragment, the whole thing is kinda "forced" in many aspects
[15:00:07] <PJBoy> those calls get devirtualised sometimes, but it's a possibility for performance hits
[15:00:34] <fredi> including a "Master Class" having a bunch of members both virtual and/or not, just for the sake of subclasses inheritance
[15:01:55] <PJBoy> yeah we've all seen some pretty despicable C++ design protocols
[15:02:01] <fredi> a week ago, I was asked about inheriting some specific values. the issue ended up solve through upcasting.
[15:02:08] <fredi> *solved
[15:02:35] *** Joins: seninha (~seninha@user/seninha)
[15:02:39] <PJBoy> though I'd say that C code looks quite nasty too
[15:03:40] <PJBoy> > `psi[n][0] = e.cce; psiOld[n][0] = psi[n][0];`
[15:03:48] <PJBoy> at a glance that looks like it does the wrong thing
[15:04:38] <fredi> as for virtual methods specifically, there are two of them entirely undefined in that big class. when I asked, he argued every subclass do implement them in their own ways but...
[15:04:40] <PJBoy> being that it's equivalent to `psiOld[n][0] = psi[n][0] = e.cce;`
[15:05:15] <PJBoy> those would be pure virtual methods
[15:06:12] <fredi> as long as none are causing said trouble
[15:06:48] <fredi> PJBoy  still, as much as the C code could look bad, it was tested beforehand
[15:07:47] <PJBoy> the other thing worth checking is that you've actually enabled openmp >_>
[15:07:50] <fredi> the assumption of smooth transition from there to C++, of course, being wrong from the start
[15:07:58] <PJBoy> like have you compared the time to the openmp disabled build?
[15:08:36] <fredi> no, but through top it was confirmed more than one instance running
[15:08:52] <PJBoy> alright
[15:09:09] <PJBoy> I think the transition of that code to C++ is smooth enough
[15:09:30] <PJBoy> but the transition from procedural code to object oriented, that's less likely to go smoothly for HPC code
[15:10:14] <fredi> you said it and it's bugging me as well: is the bottleneck even in the code fragment in that StackExchange question?
[15:10:33] <PJBoy> there's no way of knowing without a profiler
[15:10:42] <fredi> let profile alone, ltracing wouldn't do any harm
[15:11:22] <PJBoy> first I've heard of ltrace :o
[15:11:49] <PJBoy> that's cool
[15:11:59] <fredi> if OOPism is delving deeper into libraries we'd know that at least
[15:15:03] <PJBoy> yo first time using conan today
[15:16:23] <very_sneaky> PJBoy: how'd you go?
[15:16:46] <PJBoy> gone pretty smoothly so far
[15:17:09] <PJBoy> delegated the task of configuring/building openssl to conan
[15:17:15] <johnny> moo
[15:17:24] <very_sneaky> nice
[15:17:31] <johnny> PJBoy is a barbarian
[15:17:33] <PJBoy> think it's successfully cut down on build complexity
[15:17:39] <PJBoy> please no
[15:17:56] <PJBoy> every single engineer I've spoken to about conan has made reference to the film
[15:18:04] <PJBoy> that film is like twice my age
[15:18:11] <PJBoy> I'm so sick of it hahaha
[15:18:38] <johnny> so why were you building openssl?
[15:18:51] <PJBoy> dependency
[15:19:06] <very_sneaky> lol, i guess it's an easy association to make. there's actually a remote for conan that allows you to use github repos called barbarian
[15:19:15] <PJBoy> not exactly sure why we were building it from source
[15:19:19] <johnny> well are you using conan to *build* openssl? or download a precompiled version from the conan repo?
[15:19:33] <johnny> it depends on which options you choose i imagine
[15:19:49] <PJBoy> well it spat out a load of output telling me how it configured openssl and built it with gcc
[15:19:50] <very_sneaky> https://barbarian.bfgroup.xyz
[15:19:52] <johnny> i'm doing C :(
[15:20:01] <PJBoy> and openssl does need to run those perl scripts
[15:20:10] <PJBoy> so I can only imagine openssl just *has* to be built
[15:20:27] <johnny> make it stop already
[15:20:41] <very_sneaky> there would be prebuilt binaries for openssl with the default options i think
[15:20:57] <PJBoy> it has CPU specific ASM too
[15:21:17] <PJBoy> idk
[15:21:37] <PJBoy> I'm not the one writing the conan here
[15:21:47] <PJBoy> but I'll take that point onboard
[15:22:17] <PJBoy> all it has is a `[requires] openssl/3.0.0`
[15:22:37] <PJBoy> is there something extra I would need to do to ask conan to download the prebuilt binaries?
[15:22:47] <PJBoy> or will it figure that out automatically?
[15:23:02] <PJBoy> (there are some options specified too that may not be the defaults)
[15:23:46] <PJBoy> `openssl:no_idea=True`
[15:23:51] <PJBoy> :thinking_emoji:
[15:24:07] *** Joins: markong (~kvirc@213.146.188.203)
[15:24:14] <very_sneaky> should figure that out automatically, but you'd need to have everything line up for what they build for: https://conan.io/center/openssl?version=3.0.0&os=Linux&tab=configuration
[15:24:31] <very_sneaky> if you've specified options, then you wouldn't get a pre-built
[15:24:42] <PJBoy> ok so that explains that
[15:25:24] <very_sneaky> unless you're specifying an option to the default value, redundantly
[15:25:41] <PJBoy> can confirm that we're not using any of those prebuilt configs
[15:25:45] <PJBoy> so yeah that'd be it
[15:26:30] <PJBoy> legend has it that conan allows for hosting binaries on a private server though
[15:26:33] <very_sneaky> if you host your own artifactory server (free), you can push binaries up so that you don't have to rebuild for your specific configurations
[15:26:37] <PJBoy> nice
[15:27:22] <PJBoy> artifactory = binary right?
[15:27:35] <PJBoy> or binary + supporting metadata
[15:27:41] <very_sneaky> anything
[15:27:57] <very_sneaky> you can put source, binary, non C++ files up there too
[15:28:03] <PJBoy> oh right
[15:28:22] <very_sneaky> the free version only supports conan packages, but enterprise supports a bunch of other package managers for different langauges too - pypi, npm etc
[15:28:39] <very_sneaky> free version supports conan and generic packages *
[15:28:56] <very_sneaky> so if you want to store tarballs or whatever you can
[15:29:16] * Haohmaru is inventing a lossless data compression/decompression algorithm.. tighten your seatbelts
[15:29:23] <PJBoy> is conan offering servers for their artifacts?
[15:29:25] <very_sneaky> middle out?
[15:29:31] <PJBoy> or just software to run on your own server?
[15:29:52] <very_sneaky> jfrog provide a free cloud hosted instance, or you can host your own
[15:29:54] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[15:30:02] <PJBoy> cool
[15:30:22] *** Quits: fredi (~fredi@189.6.232.131) (Ping timeout: 256 seconds)
[15:30:40] <PJBoy> but what if jfrog log my artifacts D:
[15:32:49] <very_sneaky> https://jfrog.com/start-free jeez that's not great marketing
[15:33:15] <very_sneaky> hard to find and not clear that it's artifactory, but yeah - i think it includes some devops tools as well
[15:33:59] <PJBoy> to be fair
[15:34:41] <very_sneaky> so, artifactory as a program was recently accepted into iron bank - the dod "hardened" docker container repository. I would imagine they would be in a bit of a bind if they were caught inspecting user resources
[15:34:47] <PJBoy> I searched jfrog and got https://puu.sh/IxsB6/ab7e3fba89.png
[15:35:45] <PJBoy> ah this is the first I've heard of iron bank
[15:35:51] <very_sneaky> yeah, i found the marketing on their page to be a bit confusing - it wasn't clear what was artifactory on the cloud and what wasn't
[15:36:15] <very_sneaky> turns out they bundle everything in
[15:38:17] <PJBoy> so currently we're running `conan install ...; cmake -G ...`
[15:38:36] <PJBoy> does it make any sense to try and put that conan invocation into the cmake script instead?
[15:39:09] <very_sneaky> that's probably a design question to think about. I'm not sure - it feels like a chicken and egg problem
[15:39:16] <very_sneaky> you can specify cmake in conan as a build requirement
[15:39:27] <very_sneaky> so conan will grab cmake if it doesn't exist
[15:39:40] <PJBoy> omg
[15:39:44] <PJBoy> that's news to me haha
[15:40:02] <PJBoy> I wanna try that
[15:40:18] <PJBoy> although cmake is a hard requirement to be preinstalled in other places
[15:40:22] <PJBoy> so meg
[15:40:24] <PJBoy> *meh
[15:41:39] <very_sneaky> atm with a conanfile.py in my project root, i'm using `conan install . --build-folder=build --build=missing; conan build . --build-folder=build -cb` to grab and build everything
[15:41:52] <very_sneaky> and then `conan build . --build-folder=build -t` to run unit tests
[15:42:33] <Haohmaru> so i guess this counts as RLE .. input is 8bit bytes (it's not text, it's a 1bit digital signal), i encode it as 8bit bytes by simply putting a value (0 or 1) at the top bit, and then the other 7bits form a 7bit uint of how many times this bit value happens.. so 0x00 is encoded as "0 8" or 0x08, 0xFFFF would encoded as "1 16" ...
[15:42:37] <Haohmaru> sounds sane?
[15:43:21] <PJBoy> gotcha
[15:46:57] <PJBoy> that means making a conanfile.py then
[15:47:49] <very_sneaky> yeah i guess so. I think you can only use conanfile.txt if you're a consumer of third party libs
[15:47:57] <very_sneaky> conanfile.py allows you to package your project up
[15:48:34] <PJBoy> conan throws me a "ERROR: Conanfile not found at /blahblah/conanfile.py" when I try to run conan build otherwise
[15:49:29] <very_sneaky> yeah that makes sense. Pretty sure you need to define `build()` with instructions on how to invoke cmake
[15:51:49] <very_sneaky> if you need an example, this is a recipe i wrote for cci: https://github.com/conan-io/conan-center-index/blob/2610781460b765058c7fd1d3392be532da3bf0d7/recipes/armadillo/all/conanfile.py#L253
[15:53:01] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:53:02] <PJBoy> looks reasonable
[15:53:27] <PJBoy> but don't think we'll bother
[15:53:57] <PJBoy> looks pretty damn reasonable though
[15:54:41] <very_sneaky> yeah i thought it was pretty straight forward when going through the process
[16:03:18] <PJBoy> right is there anything I need to do for conan to use clang?
[16:03:31] <very_sneaky> just set up a profile
[16:04:06] <PJBoy> ok that's easy
[16:04:08] <PJBoy> thanks
[16:04:50] <very_sneaky> protip is to add CC, CXX and FC env vars to your profiles.. i've found it helps to reduce errors
[16:05:08] <very_sneaky> FC if you're building anything that may depend on fortran - blas, lapack etc
[16:06:48] <PJBoy> the profile my coworker set up for our ARM build has CC and CCX env vars :D
[16:07:08] <PJBoy> I assume that's completely essential for cmake to work
[16:07:48] <very_sneaky> i think if you don't set it, it will look on the path, but i had some weird issues where it would try to use gcc instead of clang in some circumstances
[16:08:12] <very_sneaky> also, if you're building ARM, there's nothing on CCI pre-built for that. they only have x86_64 prebuilt binaries
[16:09:02] <PJBoy> we have a specific ARM toolchain anyway
[16:09:22] <PJBoy> well
[16:09:32] <PJBoy> various specific ARM toolchains from various vendors
[16:09:43] <PJBoy> so there was never any chance of CCI having this stuff
[16:10:29] <very_sneaky> fair
[16:17:12] <PJBoy> alright switching to clang was a great success
[16:17:18] <PJBoy> very happy with this experience so far
[16:17:59] <very_sneaky> :)
[16:18:36] <very_sneaky> i've been watching a lot of packaging talks recently because we're in the process of moving from a bespoke build system to something open source, and transitioning to a package manager from nothing
[16:19:05] <PJBoy> same!
[16:19:06] <very_sneaky> I'm coming around to the idea that build recipe's should be completely agnostic to the package manager wherever possible because then you don't need to care where it's packaged
[16:19:18] <PJBoy> (except without the watching talks bit)
[16:19:47] <very_sneaky> lol exciting - are you doing an evaluation of a bunch of different ones or just going for the most adopted?
[16:20:03] <PJBoy> diving straight into cmake and conan
[16:20:14] <PJBoy> due to sheer enthusiasm of me and this other guy haha
[16:20:36] <very_sneaky> yeah i think that's where we're gonna land but i feel like i need to do some due diligence given the excitement around meson
[16:20:36] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:21:44] <PJBoy> did you end up going for a jfrog server?
[16:21:49] <very_sneaky> you'll be happy to hear that I've just been through the process of setting up a ci pipeline for automatic package builds/deployment to artifactory - works super easy. the conan team actually provide all of their packaging tools and docker images that they use for cci
[16:22:28] <very_sneaky> we have on-prem artifactory for all of our existing itnernal package management for other languages already
[16:22:41] <very_sneaky> i have one at home for testing
[16:22:45] <PJBoy> bruh
[16:23:02] <PJBoy> so devs will be able to get the latest builds
[16:23:11] <PJBoy> *without needing to build*
[16:23:16] <very_sneaky> yeah, exactly
[16:23:38] <PJBoy> sounds too good to be true <3
[16:23:38] <very_sneaky> the other thing i'm excited for is dependency resolution lol
[16:23:57] <Haohmaru> do i really have to use printf() to get "0F" printed from 0x0F >:/
[16:24:14] <Haohmaru> .. instead of 'f'
[16:24:16] <PJBoy> dependencies and configuring for those dependencies was the main motivation for cmake in the first place
[16:24:16] <very_sneaky> at the moment we have a hornets nest of doing the dance with existing prebuilt binaries hoping one will work with the others, if you don't want to spend an hour rebuilding
[16:24:23] <PJBoy> << uppercase << hex << 0xF
[16:24:24] <geordi> F
[16:24:35] <PJBoy> << uppercase << hex << setfill('0') << setw(2) << 0xF
[16:24:36] <geordi> 0F
[16:24:43] <Haohmaru> wowz
[16:25:28] <PJBoy> I, for one, hate dancing entirely
[16:25:38] <PJBoy> I would probably opt to do the hour rebuild every time
[16:25:46] <Haohmaru> thanks PJBoy
[16:26:06] <PJBoy> that setw needs to be done for every number you output
[16:26:20] <PJBoy> but the other effects last until you unset them
[16:26:21] <very_sneaky> we have users of the binaries who aren't involved in developing the code, so don't know how to build things, which is a bit of an abnormality i think
[16:26:48] <very_sneaky> but yeah i tend to rebuild as well - fortunately i don't need to do it often
[16:26:50] <PJBoy> building code is hard haha
[16:26:57] <PJBoy> it's hard enough for developers
[16:27:12] <PJBoy> I spent all of yesterday trying to build python 3.6
[16:27:15] <very_sneaky> sometimes i forget how hard simple things are
[16:27:17] <PJBoy> and to no avail
[16:27:32] <very_sneaky> i've been trying to teach git to people in my team
[16:27:48] <very_sneaky> forgetting how much i rely on my bash knowledge lol, and this is a windows team so nobody knows bash
[16:27:55] <very_sneaky> it's an uphill battle but getting there
[16:28:15] <very_sneaky> building c++ is a step beyond that i think
[16:28:25] <PJBoy> git is even harder to use than build systems
[16:28:34] <very_sneaky> you think? there's like 6 commands
[16:28:44] <very_sneaky> i think the mental model is easier
[16:28:45] <PJBoy> nah I'm just being a dick towards git
[16:28:52] <very_sneaky> ah :P
[16:29:12] <PJBoy> read-only git is as easy as it gets
[16:29:22] <very_sneaky> don't say that to linus
[16:29:27] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:29:43] <PJBoy> it's the write side of git that gets me all confused
[16:30:09] <very_sneaky> have you watched any of the LTT linux gaming series?
[16:31:36] <PJBoy> linus tech tips?
[16:31:38] <PJBoy> nah
[16:31:41] <very_sneaky> yeah
[16:32:13] <PJBoy> I've heard lots of mixed opinions about that particular series
[16:32:32] <very_sneaky> he has a bit where he finds some isntructions to patch something for his mouse or something on linux, which basically said "go to github and doanload install.sh". he proceeded to right click "save target as" on the install.sh link, ends up getting html disguised as a sh script
[16:32:54] <PJBoy> yeah that's the main thing I heard
[16:32:56] <very_sneaky> goes through this whole saga about not being able to execute html code lol
[16:33:12] <PJBoy> that he's some guy that tries to use linux, but he's really bad at it
[16:33:18] <PJBoy> and blames everything but himself
[16:33:21] *** Joins: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184)
[16:33:29] <very_sneaky> so, i'm re-evaluating whether read-only git is actually that easy without prior knowledge lol
[16:33:32] <PJBoy> I do sympathise though
[16:33:36] <PJBoy> ahaha
[16:33:46] <PJBoy> I mean using git for the first time is never gonna be simple
[16:33:55] <very_sneaky> i mean, he's a windows power user trying to be a linux power user straight away without any appreciation for the differences in philosophies
[16:34:13] <PJBoy> right down to the very first command you need to use, `git clone`
[16:34:27] <PJBoy> that is not an intuitive name at all IMO
[16:34:33] <very_sneaky> yep. and that's what they missed
[16:34:38] <PJBoy> and the docs always write `git-clone`
[16:34:49] <very_sneaky> they do have a big green button that says "Get code" though, and allows you to download as a zip or tarball
[16:34:55] <PJBoy> but there's never any hyphens in any practical context
[16:35:34] <PJBoy> they do actually provide the git clone command on github don't they?
[16:35:35] <very_sneaky> yeah true. that does confuse me too. recently i was confused when downloading git-filter-repo
[16:35:52] <very_sneaky> i was surprised that i could execute git filter-repo and it worked, despite `git-filter-repo` being what was on my path
[16:36:04] <PJBoy> ah they do not
[16:36:26] <PJBoy> ugh, why does github have their own CLI
[16:36:29] <very_sneaky> ah, it does just say `Code`
[16:36:45] <PJBoy> they could have used that tab for the actual git command
[16:37:40] <PJBoy> oh and git on windows is even more work
[16:37:50] <PJBoy> actually nah not for read-only purposes
[16:38:04] <very_sneaky> yeah probably. tbf though, it's probably not a bad gate to have. if you don't know how to use git to get files, you shoudln't be downloading and executing arbitrary code anyway
[16:38:10] <PJBoy> but for read-write purposes, you gotta set up pageant
[16:38:23] <very_sneaky> pageant?
[16:38:42] <PJBoy> it handles private keys
[16:38:45] <very_sneaky> i've just downloaded git-for-windows or msys2, which gives you a bash shell
[16:38:56] <PJBoy> and then that uses the putty format for those keys
[16:39:10] <PJBoy> so you have to convert to the openssh format to paste that public key into your github account
[16:39:16] <PJBoy> bleh
[16:39:17] <very_sneaky> ah. gotcha. that must be what sourcetree uses in itsd backend
[16:39:57] *** Joins: pulse (~pulse@user/pulse)
[16:42:29] <Haohmaru> https://godbolt.org/z/8Yobq6h3v behold, my compressor
[16:43:18] <very_sneaky> that doesn't look like middle out to me
[16:46:18] *** Joins: Simplar (~Simplar@188.163.93.76)
[16:47:04] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[16:47:06] <Haohmaru> of course.. it has a bug
[16:53:09] *** Joins: fredi (~fredi@189.6.232.131)
[16:53:09] *** Quits: fredi (~fredi@189.6.232.131) (Client Quit)
[16:53:25] *** Joins: Leone (~Leo@69-165-148-197.dsl.teksavvy.com)
[16:56:06] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[16:59:41] *** Quits: immibis (~hexchat@62.156.144.218) (Read error: Connection reset by peer)
[16:59:43] *** Joins: immibis_ (~hexchat@62.156.144.218)
[17:02:18] *** Joins: jkaye (~jkaye@2601:281:8300:7530:6566:3224:cc66:3345)
[17:02:44] *** Joins: proller (~p@2a02:6b8:b081:7212::1:5)
[17:07:20] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:12:39] <smallville7123> https://gist.github.com/mgood7123/46bd884cc4c86810d2eea6ae65b547b3   how do i handle the case where the byte position has been advanced by more than one ?
[17:16:13] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:19:35] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Remote host closed the connection)
[17:20:33] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[17:25:13] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:30:38] *** Joins: JohnMS_WORK (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf)
[17:30:51] *** Quits: JohnMS (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Ping timeout: 268 seconds)
[17:32:57] *** JohnMS_WORK is now known as JohnMS_AWAY
[17:34:25] *** JohnMS_AWAY is now known as JohnMS_WORK
[17:34:37] *** Quits: JohnMS_WORK (~JohnMS@2a02:a311:a344:9b00:4ecc:6aff:fed0:fdf) (Client Quit)
[17:37:30] *** Joins: jwillikers (~jwilliker@ics141-1.icsincorporated.com)
[17:38:18] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[17:39:33] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[17:39:47] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:39:55] *** ChanServ sets mode: +v npaperbot
[17:41:17] *** Quits: frost (~frost@user/frost) (Ping timeout: 240 seconds)
[17:45:50] *** Quits: jwillikers (~jwilliker@ics141-1.icsincorporated.com) (Remote host closed the connection)
[17:52:55] *** Joins: user334 (~user@p200300cdb7070300c528c51e94837680.dip0.t-ipconnect.de)
[17:53:43] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[17:54:21] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[17:55:36] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:03:32] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 265 seconds)
[18:06:39] *** Quits: hackkitten (~hackkitte@94.31.103.136) (Read error: Connection reset by peer)
[18:06:56] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[18:07:26] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[18:10:01] <rpav> geez i can never remember the magic combination of settings to make godbolt's ide mode work
[18:10:45] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:12:28] <rpav> ..ok you _do_ have to "add compiler" from the tree .. but i did that once and it didn't actually cmake? .. bah
[18:15:08] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:15:39] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[18:20:11] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[18:23:33] *** Joins: LordKalma_ (~LordKalma@server.ruilvo.com)
[18:23:33] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[18:24:44] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[18:25:29] *** Quits: Ronalds_Mazitis_ (~Ronalds_M@46.109.136.184) (Quit: Connection closed)
[18:33:40] *** Quits: LordKalma_ (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[18:34:12] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[18:37:03] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[18:38:13] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[18:42:13] *** Joins: jokoon (~jokoon@185.61.188.186)
[18:42:29] <jokoon> Does implementations of map make calls to new and delete?
[18:43:43] <urdh> jokoon: don't cross-post
[18:55:06] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Quit: ZNC 1.8.2+deb2build1 - https://znc.in)
[18:55:42] *** Joins: kapil (~kapil@2a01:4f9:c010:c9c3::1)
[19:04:56] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[19:19:19] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:23:17] *** Joins: Tokamak (~Tokamak@172.58.191.27)
[19:28:39] *** Joins: Tokamak_ (~Tokamak@166.205.152.83)
[19:28:56] *** Quits: Tokamak (~Tokamak@172.58.191.27) (Ping timeout: 256 seconds)
[19:30:11] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (Quit: You have been kicked for being idle)
[19:30:12] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (Quit: You have been kicked for being idle)
[19:31:42] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[19:35:01] *** Quits: nomo (~nomo@95.87.208.95) (Quit: Leaving)
[19:35:14] *** Joins: nomo (~nomo@95.87.208.95)
[19:35:51] *** Quits: nomo (~nomo@95.87.208.95) (Client Quit)
[19:38:21] *** Joins: namo (~nomo@95.87.208.95)
[19:40:37] *** Quits: jkaye (~jkaye@2601:281:8300:7530:6566:3224:cc66:3345) (Ping timeout: 240 seconds)
[19:40:59] *** Quits: cq-work (~Z_Lund@user/cq-work) (Quit: WeeChat 3.3)
[19:45:17] *** Quits: kapil (~kapil@2a01:4f9:c010:c9c3::1) (Ping timeout: 240 seconds)
[19:46:14] *** Joins: kapil (~kapil@o-k.website)
[19:59:19] <Alipha> Haohmaru: is your losslesss data compression algorithm going to work "inside out"?
[19:59:43] <Haohmaru> how?
[19:59:48] *** Joins: magla (~gelignite@55d4e80d.access.ecotel.net)
[19:59:53] <Haohmaru> i'm rewriting it slightly
[20:00:34] <Svitkona> jokoon, are you asking for a specific reason or just out of curiosity
[20:00:49] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[20:01:06] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:01:28] <Haohmaru> poor Alipha, he reads everything :/
[20:01:37] <Alipha> Haohmaru: that was a reference to the tv show, Silicon Valley
[20:01:45] <Alipha> Haohmaru: i do :-( at least, i skim
[20:02:04] <jokoon> I've understood stack and heap, so if map is using heap, it means new and delete are unnecessary
[20:02:20] <Haohmaru> haven't even heard it
[20:02:26] *** Quits: ravan_ (~ravan@user/ravan) (Read error: Connection reset by peer)
[20:04:02] <Haohmaru> the next task is to write a function that can quickly check whether it's worth compressing a given input data, and how much size is gonna be needed, without actually using a buffer and hopefully faster than actually attempting to compress for real
[20:04:56] *** Quits: chozorho (~chozorho@2601:146:300:c30:b4c8:fdea:55ac:cb1a) (Quit: WeeChat 3.0)
[20:07:10] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[20:07:13] *** Joins: kaph (~kaph@net-2-47-236-216.cust.vodafonedsl.it)
[20:08:05] <Alipha> jokoon: in modern c++, programmers should "never" have to use new/delete themselves--they should use containers (like std::map and std::vector) or smart pointers (like std::unique_ptr and std::shared_ptr) which will manage the memory for them
[20:10:06] <jokoon> yeah well there's a lot of existing code that can't answer this requirement
[20:10:43] <rpav> Qt being a primary antagonist of modern C++
[20:12:04] <xkoncek> from the very little i did, they at least allow connecting lambda objects
[20:12:27] <jokoon> Qt feels like it's a whole OS and all existing software in a single library
[20:13:58] *** Quits: jokoon (~jokoon@185.61.188.186) (Quit: Client closed)
[20:16:40] <LordKalma> qt has its own memory management idioms, that predate modern c++
[20:16:44] <LordKalma> can'tbe fixed
[20:16:48] <LordKalma> you'd have to write another lib
[20:17:03] <LordKalma> for some reason, there are 5000 UI libs in other languages, like java and C#
[20:17:07] <LordKalma> with c++ the ecosystem is thin
[20:18:06] <rpav> and not one good :(
[20:18:50] <rpav> (though to be fair, UI are big and complicated and slow to develop, and technology/reqs change a lot faster)
[20:18:52] <Haohmaru> double-you-eggz
[20:20:06] <LordKalma> hahahahahahahahahahah no.
[20:20:38] <imMute> ERROR: [Xicom 50-197] PDI programming failure: PLM stalled during programming.
[20:20:47] <imMute> oops.
[20:20:51] <Haohmaru> did someone say PDI?
[20:22:02] <imMute> probably a different PDI
[20:22:36] <Haohmaru> Poorly Designed Interface?
[20:25:08] <imMute> Programmable Device Image apparently
[20:26:39] <rpav> clangd can apparently rename now .. poorly
[20:26:58] <Haohmaru> rename? what?
[20:27:11] <Haohmaru> oh, that's not the compiler
[20:30:53] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[20:31:54] <rpav> ok maybe an issue of the editor getting confused about saving? ðŸ¤”
[20:32:32] <Haohmaru> are you fiddling with your IDE as well, rpav?
[20:32:50] <rpav> not exactly, i just hit the wrong key before and it was like "Rename symbol?" and i was like "gotta try that out!"
[20:33:01] <Haohmaru> aww
[20:33:22] <rpav> does work, but a little finnicky
[20:44:57] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 240 seconds)
[20:51:13] *** Joins: c4017w (~c4017@209.52.68.8)
[20:52:28] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[20:52:56] <Haohmaru> !fact
[20:52:57] <nolyc> Haohmaru: Some literal suffix identifiers are reserved for future standardization.
[20:54:13] *** Joins: Rayke (rayke@user/rayke)
[20:54:29] *** Joins: jkaye (~jkaye@2601:281:8300:7530:bdb2:1444:46f4:adc7)
[21:00:17] <rpav> as opposed to the ones already-defined presumably
[21:06:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[21:08:25] <xkoncek> was colony accepted into C++'s stdlib?
[21:11:02] <TinoDidriksen> npaperbot, search colony
[21:11:03] <npaperbot> P2332R0: [Library Evolution] Establishing std::hive as replacement name for the proposed std::colony container <https://wg21.link/p2332r0> (by Matthew Bentley, Ville Voutilainen, GaÅ¡per AÅ¾man) (2021-03-08) (Related: https://wg21.link/p2332r0/github)
[21:11:03] <npaperbot> Also: P0447R14, P0447R13, P0447R12, P0447R11, P0447R10, P0447R9, P0447R8, P0447R4, P0447R3, P0447R2, P0447R1, P0447R0
[21:12:06] *** Quits: Tokamak_ (~Tokamak@166.205.152.83) (Quit: Textual IRC Client: www.textualapp.com)
[21:12:25] <TinoDidriksen> [0447R]
[21:12:31] <TinoDidriksen> [P0447R]
[21:12:36] <TinoDidriksen> ...
[21:12:39] <TinoDidriksen> [P0447]
[21:12:39] <npaperbot> P0447R17: [SG14, Library Evolution, WG21] Introduction of std::hive to the standard library <https://wg21.link/p0447r17> (by Matt Bentley) (2021-11-04) (Related: https://wg21.link/p0447r17/github)
[21:13:21] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b112:d1fc:dd83:e42f)
[21:16:10] <PJBoy> hive is still a bad name
[21:17:00] <PJBoy> better than colony for sure
[21:17:10] <PJBoy> but come'on
[21:18:21] <rpav> what was wrong with colony?
[21:18:46] <PJBoy> sounds like ant colony
[21:18:54] <rpav> std:::y
[21:18:55] <PJBoy> which is a form of AI
[21:19:11] <PJBoy> which std::hive has nothing to do with
[21:19:42] <RandomReader> they're both names of dynamic ecosystems, not datastructures
[21:19:56] <PJBoy> imagine if they called deques std::evolution
[21:20:05] <PJBoy> or vector std::neural
[21:20:28] <rpav> just sounds like "we get to name new data structures not you" to me
[21:20:33] <rpav> e.g. https://plflib.org/colony.htm
[21:21:10] <PJBoy> something tells me that plf::colony has never once been used to represent a colony of anything
[21:21:15] <rpav> i see such is even the reference implementation
[21:21:20] <RandomReader> no, it's just inappropriate inspiration relative to the existing style of stdlib
[21:21:27] <RandomReader> (and most of CS, for that matter)
[21:21:31] <rpav> also the hilarity of the c++ committee considering something poorly-named
[21:21:50] <PJBoy> compared to the other containers, colony and hive are both awful
[21:22:04] <RandomReader> it's not a container name, it's a brand name
[21:22:06] <PJBoy> you would never in a thousand years guess what they're good for
[21:22:17] <PJBoy> and they're not even particularly googlable names
[21:22:25] <rpav> PJBoy: just like basically everything else prior to learning what it means
[21:22:29] <PJBoy> nah denied
[21:22:34] <PJBoy> a list is self explanatory
[21:22:38] <PJBoy> vector and deque too
[21:22:40] <Alipha> std::skip_deque
[21:22:40] <rpav> nope
[21:22:41] <PJBoy> stack/queue
[21:22:49] <PJBoy> all that stuff is sensibly named
[21:22:53] <PJBoy> hive?
[21:22:58] <PJBoy> like a bee string?
[21:23:03] <RandomReader> colony/hive is unordered, so "queue" doesn't quite apply
[21:23:04] <PJBoy> or like a hive of bees?
[21:23:08] <rpav> you get none of those, because list is to be avoided, and the rest are not general terms
[21:23:10] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:961:e816:8c8d:54a1)
[21:23:32] <rpav> also "vector" is poor vs its mathematical meaning
[21:23:56] <RandomReader> "vector" fits its CS meaning; not everything is supposed to be a pure mathematical term
[21:23:59] <rpav> and "string," i mean what even
[21:24:05] <PJBoy> string of characters
[21:24:10] <PJBoy> it makes sense
[21:24:17] <rpav> only _after you know what it means_
[21:24:18] <Haohmaru> std::sentance
[21:24:25] <PJBoy> yeah well try to make sense of colony
[21:24:34] <rpav> someone at some point used "string" to refer to "a string of characters," and it stuck, just like all the other invented terms
[21:24:38] <RandomReader> "set", "map", and "list" are all descriptive, deque is a shortened form of "double ended queue"
[21:24:38] <PJBoy> "it's a colony of uhhh uhhhhhhh"
[21:24:50] <PJBoy> "well it's like a bucket list"
[21:24:51] <kalven> it doesn't matter much.. you'll quickly get used to it and make it part of your vocabulary
[21:24:57] <rpav> every kind of tree
[21:25:02] <PJBoy> nah denied
[21:25:24] <rpav> opinions Â¯\_(ãƒ„)_/Â¯
[21:25:26] <PJBoy> colony and hive are seriously going to be the worst named identifiers in stdlib since the C inspired names
[21:25:34] <rpav> by the time it makes it into std it'll be useless anyway
[21:25:41] <markong> > also "vector" is poor vs its mathematical meaning <--- indeed!
[21:26:14] <PJBoy> the term "vector" for a vector of arbitrary data appears in several other programming language predating C
[21:26:27] <rpav> it doesn't matter
[21:26:35] <PJBoy> and C kinda had it with argv
[21:26:39] <PJBoy> the argument vector
[21:26:46] <Haohmaru> the first time i was eyeballing std:: and i was told to use "vector" i said "wtf!? that sounds mathzy and i'm scare of mathz, and i was looking for some array thing.. f*ck it"
[21:26:47] <Alipha> argument values?
[21:26:56] <PJBoy> nah it's confirmed vector
[21:27:14] <rpav> all the identifiers are simply words associated loosely with a learned meaning; pointing out one as "bad" doesn't really carry much weight from the people who redefined "inline"
[21:27:21] *** Quits: furrymcgee (~devuan@cgn-89-1-208-9.nc.de) (Quit: leaving)
[21:27:31] <PJBoy> inline only means one thing
[21:27:35] <markong> list is better... but even if you call other things "scalar" (Perl anyone?) vector it's still confusing...
[21:27:42] <xkoncek> "Hive" brings me some Starcraft 1 memories
[21:27:51] <PJBoy> and the thing it means makes sense
[21:27:52] <Alipha> dynarray
[21:28:03] <Alipha> xkoncek: must build more pylons
[21:28:19] <Haohmaru> you have not enough minerals
[21:28:20] <PJBoy> there's no comparison you can make of hive to something in stdlib
[21:28:21] <xkoncek> i just want a vector with stable pointers... too much to ask
[21:28:34] <PJBoy> hive means nothing, everything in stdlib means something
[21:28:48] <rpav> xkoncek: it's not, though colony ime is not the best implementation
[21:28:54] <PJBoy> I highly doubt hive is going to enter anyone's vocabulary either
[21:29:03] <rpav> you can get lighter-weight and faster
[21:29:12] <xkoncek> i just downloaded it, it doesn't have a insert function which accepts iterator
[21:29:16] <rpav> though plf::colony wasn't very std-worthy as implemented either
[21:29:19] <rpav> yeah
[21:29:24] <RandomReader> colony/hive isn't vector-like
[21:29:31] <RandomReader> (not contiguous, not ordered)
[21:29:46] <RandomReader> it's "unordered array-list" ish, in existing terms
[21:29:58] <rpav> it needed a _lot_ of polish on top of it so i just wrote a similar thing .. deque is probably decent out-of-the-box std block storage though
[21:30:00] <RandomReader> (and I hate the "array list" pair, there's just precedent for that term)
[21:30:10] <Alipha> unordered multiset with no fast lookup?
[21:30:17] <RandomReader> not unique
[21:30:25] <RandomReader> or keyed
[21:30:33] <kalven> deque is famously poor on some stdlib implementations
[21:30:58] <PJBoy> it's a bucket list
[21:31:09] <Alipha> my wife says my deque is poor
[21:31:16] <xkoncek> afaik, you can throw values inside, keep iterators and erase them later, that is the use case
[21:31:36] <xkoncek> no order guarantees, but iterators are stable
[21:31:38] <PJBoy> well if your deque is double ended, you can go fuck yourself
[21:31:38] <rpav> Alipha: colony should be O(1) lookup for an index or pointer
[21:31:39] <Alipha> xkoncek: so, std::set? heh
[21:31:40] <xkoncek> i think
[21:31:58] <kalven> set is ordered
[21:31:59] <rpav> more like "sparse array"
[21:32:09] <xkoncek> i think... more/less, but the implementation is block-based
[21:32:21] <PJBoy> the proposal gives
[21:32:23] <PJBoy> > Hive is a formalisation, extension and optimization of what is typically known as a 'bucket array' container in game programming circles
[21:32:37] <Alipha> std::bucket_array
[21:32:45] <RandomReader> "array" has specific meaning in C++ though, so that alone wouldn't fit
[21:32:48] <PJBoy> the "typical name" is way way way better than the atypical brand name
[21:32:50] <RandomReader> (unless it actually exposed the buckets)
[21:32:56] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[21:33:06] <RandomReader> it'd have to act contiguously to have "array" in the name
[21:33:07] <rpav> not really, "bucket" implies linked list
[21:33:24] <RandomReader> how does "bucket" imply linked list?
[21:33:27] <PJBoy> array doesn't mean all that much
[21:33:36] <PJBoy> valarray is a term already
[21:33:40] <RandomReader> "array" in C++ is always used in "contiguous container" terms
[21:33:57] <rpav> because it's been used tangentially for that by someone for hash table buckets at some point, so this qualifies it by prior rules as the definitive, absolute, culturally-ingrained meaning ;)
[21:34:05] <PJBoy> and valarray isn't necessarily contiguous
[21:34:15] <PJBoy> it can have strides or whatever
[21:34:31] <PJBoy> in fact it has weak enough complexity guarantees that it could probably be deque under the hood
[21:34:36] <RandomReader> those are on the operations, not the valarray itself, no?
[21:34:44] <RandomReader> as in the strides apply to the operational layers like slice
[21:34:51] <PJBoy> well it's not specified
[21:34:53] <xkoncek> valarray was in veryy early c++
[21:34:56] <PJBoy> so it could have strides for no good reason
[21:35:53] <RandomReader> ...it's contiguous:  http://eel.is/c++draft/template.valarray.overview#1    and   http://eel.is/c++draft/valarray.range#1
[21:36:31] <PJBoy> they made it model contiguous_iterator?!?!?!
[21:36:56] <PJBoy> via the return type of begin???
[21:37:20] <RandomReader> why are you surprised?
[21:37:23] <PJBoy> what about slice_array
[21:37:39] <RandomReader> it's a proxy type
[21:37:41] <PJBoy> I didn't think we touched valarray since the 90s
[21:37:43] <RandomReader> all the operations are
[21:37:58] <PJBoy> short of a small upgrade for move semantics in C++11
[21:38:08] <RandomReader> even the base operator[] accept proxies for non-contiguous access
[21:38:19] <RandomReader> valarray basically is a more-abstracted sillymatrix
[21:38:27] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[21:39:00] <PJBoy> ah gslice_array
[21:39:05] <PJBoy> that one's not contiguous
[21:39:43] <RandomReader> neither is slice, those are proxy types that model references to a valarray
[21:39:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:39:55] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:39:55] *** ChanServ sets mode: +v npaperbot
[21:40:04] <RandomReader> (fancy spans, basically)
[21:40:06] <PJBoy> just means the term "array" isn't limited to continguousness
[21:40:16] <Haohmaru> !fact
[21:40:16] <PJBoy> hence bucket_array is all good
[21:40:16] <nolyc> Haohmaru: An object of class type can also be initialized by a braced-init-list.
[21:40:32] <RandomReader> it is, it's a "g slice of an array"
[21:40:36] <RandomReader> it's not "a kind of array"
[21:41:38] <PJBoy> can you make the same logic for std::indirect_array?
[21:42:28] <PJBoy> tbh, I'm starting to see the trend of "xxx_array" being names that belong with std::valarray
[21:42:43] <PJBoy> bucket_list then
[21:43:25] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:43:46] <RandomReader> indirect_array is an interesting one
[21:44:02] *** Quits: blyat-73 (~hjgkjhgkj@46.235.96.249) (Ping timeout: 240 seconds)
[21:44:57] <RandomReader> the standard doesn't seem to describe it as an "array" either though, that just appears in its name
[21:45:41] <PJBoy> it's an "indirect[ion to val]array"
[21:45:54] <RandomReader> it also has no interface that's remotely array-like, it's just bulk assignment
[21:46:11] <RandomReader> yeah, weird one, I hadn't seen it before
[21:46:19] <RandomReader> anyway
[21:46:36] <RandomReader> does "list" imply ordering?
[21:46:48] <PJBoy> std::list isn't ordered
[21:46:53] <RandomReader> colony/hive is associative-like in plain insertion, since it can go randomly
[21:46:59] <RandomReader> it is in the sense that you control the order
[21:47:21] <RandomReader> oh, sorry, I mean in programmer-interface terms
[21:47:29] <imMute> "ordered by the order you insert items"
[21:47:29] <RandomReader> not in the key-sorted sense
[21:47:56] *** Joins: Tokamak (~Tokamak@166.205.152.83)
[21:48:02] <RandomReader> unordered_bucket_list sounds lame, but might fit
[21:48:14] <RandomReader> (but I'd still expect access to the buckets in that case, and I don't think that's reasonably)
[21:48:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:b112:d1fc:dd83:e42f) (Ping timeout: 240 seconds)
[21:48:48] <PJBoy> ctor initialiser lists have no order
[21:49:27] <RandomReader> those are declarations, not imperative instructions
[21:50:14] <PJBoy> they still don't have an order :(
[21:50:16] <RandomReader> hm, I wonder if there's any lexical ordering there
[21:51:07] <PJBoy> does set imply ordering to you?
[21:51:19] <PJBoy> 'cause then I could bring up how bitset exists
[21:51:31] <PJBoy> which is actually more of a bitarray
[21:51:48] <PJBoy> although those bits aren't contiguous in the contiguous_iterator sense
[21:53:21] <PJBoy> what about unordered_list
[21:53:35] <PJBoy> the bucket part is only an implementation detail anyway
[21:53:57] *** Quits: msk (~msk@103.213.213.70) (Ping timeout: 240 seconds)
[21:54:04] <kalven> struct unordered_bitset { int count_of_zeroes, count_of_ones; };
[21:54:12] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:b9b9:658d:369d:1685)
[21:54:17] <RandomReader> I thought about that earlier, I wonder if it's not descriptive enough, but otherwise...
[21:54:40] <PJBoy> confirmed better name than hive then
[21:54:49] <PJBoy> because it's non-zero in its descriptiveness
[21:55:00] <RandomReader> the paper talks about push_back but doesn't specify it, I'm not clear if that's supposed to be a thing or not
[21:55:34] <PJBoy> closest I think you get to the buckets is via std::hive_limits
[21:56:32] <PJBoy> I just noticed it has a std::hive_priority
[21:56:40] <RandomReader> "the proposal for unordered_bitset has been rejected due to being too trivial"
[21:56:46] <PJBoy> as part of its class template
[21:57:23] <PJBoy> it specifies that it has two values `performance` and `memory_use`, but otherwise doesn't say anything about them
[21:57:44] <RandomReader> "unspecified" :D
[21:58:07] <PJBoy> oh no, found it
[21:58:26] <PJBoy> > if set to priority::memory_use this is a non-binding request to prioritize lowered memory usage over container performance
[21:58:46] <PJBoy> and priority::performance is unspecified
[21:59:05] <PJBoy> which I guess is fine
[22:02:29] *** Joins: xkuru (~xkuru@user/xkuru)
[22:02:32] <xkoncek> i was just thinking about that vector, but that would need a heap on top of it maintaining free slots
[22:02:45] <xkoncek> and a linked list build-in for ordering
[22:03:34] <xkoncek> and i also want it buffered so that i can make some use of space locality
[22:03:42] <xkoncek> for iteration
[22:21:16] *** Joins: aniketgm (~Aniket@49.36.109.33)
[22:24:36] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[22:25:10] *** Joins: RPNX (~RPNX@2601:c9:c000:20a8:b909:68af:b920:1a33)
[22:26:59] *** Quits: RPNX (~RPNX@2601:c9:c000:20a8:b909:68af:b920:1a33) (Read error: Connection reset by peer)
[22:27:16] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[22:28:28] <kalven> https://maskray.me/blog/2021-12-19-why-isnt-ld.lld-faster
[22:29:09] <xkoncek> i heard that the hype around the gold linker fell off
[22:30:26] <kalven> that was more than ten years ago :P
[22:30:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Read error: Connection timed out)
[22:32:25] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:152:f162:2b1b:5a42)
[22:32:58] <kalven> there's been a bunch of improvements in linkers from gnu ld -> gold -> lld -> mold. all those steps had significant improvements
[22:33:32] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[22:33:40] *** Quits: Tokamak (~Tokamak@166.205.152.83) (Ping timeout: 256 seconds)
[22:34:16] <PJBoy> meanwhile in the windows world
[22:34:22] <PJBoy> LINK.EXE
[22:34:25] <kalven> rip
[22:34:56] <kalven> lld works on windows though, doesn't it?
[22:35:47] <PJBoy> via msys2?
[22:35:50] *** Joins: Tokamak (~Tokamak@166.205.152.83)
[22:35:51] <PJBoy> maybe
[22:36:01] <PJBoy> that's a world I stay from
[22:36:54] *** Joins: ravan (~ravan@user/ravan)
[22:37:07] <PJBoy> oh it has lld-link for clang-cl
[22:37:14] <xkoncek> idk, what is there to improve in linker technology?
[22:37:26] <xkoncek> the error messages are as plain as it gets
[22:37:45] <xkoncek> the speed is not that significant compared to compilers
[22:37:58] <xkoncek> and their task is relatively simple
[22:38:33] <PJBoy> I agree with all those questions
[22:38:37] <PJBoy> link time optimisation?
[22:38:54] <kalven> link time can be significant if you work on large binaries
[22:44:13] <aniketgm> hi
[22:47:09] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Ping timeout: 256 seconds)
[22:47:43] <aniketgm> kalven: lld yes. msys2 had to step up to provide support. what's mold btw.
[22:48:15] <kalven> a new linker
[22:48:44] <rpav> not quite ready for prime-time but when it is it'll rock
[22:49:25] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[22:49:33] *** Joins: Tokamak_ (~Tokamak@172.58.191.77)
[22:49:34] <rpav> though in addition to speed, i'd worry about memory usage
[22:49:37] *** Quits: Tokamak (~Tokamak@166.205.152.83) (Ping timeout: 240 seconds)
[22:50:42] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:52:04] *** Quits: ravan (~ravan@user/ravan) (Quit: Leaving)
[22:53:13] *** Quits: Artea- (~Lufia@artea.com.pt) (Quit: ZNC 1.6.2 - http://znc.in)
[22:53:27] *** Joins: Artea (~Lufia@artea.com.pt)
[22:54:11] <aniketgm> ah! it's c++20 and above. I wondered why I didn't know about it yet. I'm still on c11 Or somewhat c17 as long as I don't switch to another job.
[22:54:44] <xkoncek> C or C++?
[22:55:00] <kalven> mold is c++20 and above?
[22:55:13] <rpav> mold doesn't care what C++ you use; it just requires a compiler that can build with a few c++20 things
[22:55:26] <rpav> for itself, not your code
[22:55:31] *** Joins: robod34 (Username@79.113.195.239)
[22:55:38] <InPhase> Will mold work with rust?  Because it just feels like a name pairing we need to have working.
[22:55:59] <xkoncek> are the same linkers used for linking c and c++ code?
[22:57:40] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 268 seconds)
[22:57:56] <kalven> yes
[22:58:54] <aniketgm> *c++
[22:59:19] <aniketgm> kalven: yes.
[22:59:31] <aniketgm> https://github.com/rui314/mold
[22:59:31] *** Quits: Tokamak_ (~Tokamak@172.58.191.77) (Ping timeout: 268 seconds)
[22:59:50] <kalven> yes, but what rpav said.
[23:00:06] <aniketgm> InPhase: seems it does. from what they've mentioned here ^^
[23:00:46] *** Joins: Tokamak (~Tokamak@166.205.152.179)
[23:09:44] <mort> why would I use std::for_each rather than a for loop
[23:12:37] <kalven> you wouldn't really.
[23:13:08] <TinoDidriksen> for_each is pretty pointless.
[23:14:27] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[23:19:15] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Ping timeout: 268 seconds)
[23:20:41] <aniketgm> TinoDidriksen: huh? I wouldn't say pointless. it reduces typing I guess and has inbuild iterator.
[23:20:51] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[23:21:27] <aniketgm> for_each(some_stl.begin(), some_stl.end(), print_something()) works pretty well.
[23:21:37] <TinoDidriksen> That's not reduced typing.
[23:22:17] <kalven> for (auto&& e : some_stl) { print_something(); }
[23:23:06] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:23:14] <aniketgm> yeah well. that works too. auto is my fav too.
[23:26:49] <kalven> so there are precious few cases where for_each makes sense
[23:30:21] *** Quits: Tokamak (~Tokamak@166.205.152.179) (Ping timeout: 268 seconds)
[23:31:26] <PJBoy> fewer with the introduction of ranges::subrange
[23:31:38] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 260 seconds)
[23:32:18] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[23:34:48] *** Joins: Tokamak (~Tokamak@166.205.152.179)
[23:34:51] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 276 seconds)
[23:35:08] <xkoncek> why is accumulate in numeric and not in algo?
[23:35:22] <xkoncek> => there is no ::ranges version of it
[23:35:35] *** Joins: teepee (~teepee@openscad/teepee)
[23:36:09] <PJBoy> yeah I'll never understand that
[23:37:37] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 240 seconds)
[23:38:08] <PJBoy> maybe because STL didn't manage to think of it
[23:38:17] <PJBoy> and doesn't one anyone touching his shit
[23:41:47] *** Joins: night_wulfe_ (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[23:43:46] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 260 seconds)
[23:44:37] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 240 seconds)
[23:47:19] *** Joins: CaCode (~CaCode@user/cacode)
[23:50:44] *** Quits: Tokamak (~Tokamak@166.205.152.179) (Ping timeout: 256 seconds)
[23:51:13] *** Joins: Tokamak_ (~Tokamak@172.58.191.77)
