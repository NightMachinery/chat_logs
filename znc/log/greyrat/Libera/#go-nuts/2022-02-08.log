[00:00:02] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[00:00:02] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[00:00:02] *** Joins: anonton (~anonton@user/anonton)
[00:00:02] *** Joins: bat[m] (~batm]@2001:470:69fc:105::19b8)
[00:00:03] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[00:00:07] *** Joins: unl0ckd (~unl0ckdma@2001:470:69fc:105::15e6)
[00:01:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[00:01:20] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[00:01:22] <b0nn> Once you get that working - if I were you - I'd get SQS to send an event to let you know when 1 or more messages have arrived and are ready for your lambda https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html
[00:02:11] *** Joins: Atque (~Atque@user/atque)
[00:02:21] *** Quits: rvt (~rvt@librecad/rvt) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[00:03:52] *** Joins: rvt (~rvt@librecad/rvt)
[00:09:02] *** Joins: kyle[m] (~kylematri@2001:470:69fc:105::1:73e8)
[00:09:19] *** Joins: thechadgod[m] (~thechadgo@2001:470:69fc:105::1:a1e2)
[00:09:45] *** Joins: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com)
[00:11:18] *** Joins: dffo^ (~dffo@128-092-182-020.biz.spectrum.com)
[00:14:51] *** Joins: pmcnabb6 (~pmcnabb@user/pmcnabb)
[00:15:21] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[00:15:35] *** Joins: pztrn (~pztrn@user/pztrn)
[00:15:45] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 256 seconds)
[00:15:45] *** pmcnabb6 is now known as pmcnabb
[00:18:52] *** Joins: w-g (~w-g@2001:470:69fc:105::195)
[00:18:59] *** Joins: Ypszilon (~Ypszilon@user/ypszilon)
[00:20:01] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[00:20:15] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[00:26:22] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Quit: WeeChat 3.3)
[00:26:47] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[00:35:07] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:40:04] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[00:42:45] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[00:47:09] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:47:23] *** Quits: Thedarkb1-Deskto (~Thedarkb@2001:bb6:b403:e042:81a7:a11a:626:f80c) (Ping timeout: 252 seconds)
[00:47:25] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[00:48:48] *** Joins: wielding (~wielding@user/wielding)
[00:56:05] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[00:56:13] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[00:56:50] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[00:56:58] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[00:56:58] *** Joins: arcatech[m] (~arcatech@user/arcatech)
[00:56:59] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[00:57:22] *** Joins: mambang[m] (~mambang@user/mambang)
[00:57:35] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[00:59:38] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[00:59:50] *** Joins: psydroid (~psydroid@user/psydroid)
[01:01:23] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[01:02:27] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[01:04:37] *** Quits: nostalgia (~nostalgia@69.51.173.136) (Ping timeout: 240 seconds)
[01:05:22] *** Quits: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831) (Write error: Connection reset by peer)
[01:05:22] *** Quits: wielding (~wielding@user/wielding) (Write error: Connection reset by peer)
[01:05:22] *** Quits: psydroid (~psydroid@user/psydroid) (Write error: Connection reset by peer)
[01:05:22] *** Quits: arcatech[m] (~arcatech@user/arcatech) (Read error: Connection reset by peer)
[01:05:22] *** Quits: mambang[m] (~mambang@user/mambang) (Write error: Connection reset by peer)
[01:05:22] *** Quits: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9) (Write error: Connection reset by peer)
[01:05:23] *** Quits: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7) (Read error: Connection reset by peer)
[01:05:23] *** Quits: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69) (Read error: Connection reset by peer)
[01:05:23] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Read error: Connection reset by peer)
[01:05:23] *** Quits: kyle[m] (~kylematri@2001:470:69fc:105::1:73e8) (Read error: Connection reset by peer)
[01:05:23] *** Quits: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f) (Read error: Connection reset by peer)
[01:05:24] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Read error: Connection reset by peer)
[01:05:24] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Read error: Connection reset by peer)
[01:05:24] *** Quits: thechadgod[m] (~thechadgo@2001:470:69fc:105::1:a1e2) (Write error: Connection reset by peer)
[01:05:24] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Write error: Connection reset by peer)
[01:05:24] *** Quits: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0) (Write error: Connection reset by peer)
[01:05:24] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Read error: Connection reset by peer)
[01:05:24] *** Quits: unl0ckd (~unl0ckdma@2001:470:69fc:105::15e6) (Read error: Connection reset by peer)
[01:05:24] *** Quits: anonton (~anonton@user/anonton) (Read error: Connection reset by peer)
[01:05:24] *** Quits: w-g (~w-g@2001:470:69fc:105::195) (Read error: Connection reset by peer)
[01:05:25] *** Quits: pztrn (~pztrn@user/pztrn) (Write error: Connection reset by peer)
[01:05:25] *** Quits: w[m]1 (~welt@2001:470:69fc:105::1:7409) (Read error: Connection reset by peer)
[01:05:25] *** Quits: geoah (~geoah@2001:470:69fc:105::1d59) (Read error: Connection reset by peer)
[01:05:25] *** Quits: bat[m] (~batm]@2001:470:69fc:105::19b8) (Read error: Connection reset by peer)
[01:05:25] *** Quits: borring (~borring@2001:470:69fc:105::1:532b) (Read error: Connection reset by peer)
[01:06:52] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[01:08:09] *** Parts: Suzumiya (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net) ()
[01:09:51] *** Joins: Mutsumi (~Mutsumi@99-93-141-12.lightspeed.mssnks.sbcglobal.net)
[01:09:56] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 252 seconds)
[01:10:21] *** Joins: kyle[m] (~kylematri@2001:470:69fc:105::1:73e8)
[01:10:21] *** Joins: kadoban (~kadoban@user/kadoban)
[01:10:21] *** Joins: mambang[m] (~mambang@user/mambang)
[01:10:21] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[01:10:21] *** Joins: bat[m] (~batm]@2001:470:69fc:105::19b8)
[01:10:21] *** Joins: psydroid (~psydroid@user/psydroid)
[01:10:21] *** Joins: f33d1[m] (~g0nkstead@2001:470:69fc:105::1:320b)
[01:10:21] *** Joins: hsiktas[m] (~hsiktasm]@2001:470:69fc:105::30d4)
[01:10:21] *** Joins: dan01[m] (~dan01@2001:470:69fc:105::1:2640)
[01:10:22] *** Joins: pztrn (~pztrn@user/pztrn)
[01:10:22] *** Joins: spectern[m] (~specternm@2001:470:69fc:105::1:6842)
[01:10:23] *** Joins: w-g (~w-g@2001:470:69fc:105::195)
[01:10:23] *** Joins: geoah (~geoah@2001:470:69fc:105::1d59)
[01:10:23] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[01:10:23] *** Joins: nezz[m] (~nezzzmatr@2001:470:69fc:105::1:30b7)
[01:10:23] *** Joins: JayDoubleu (~jdoubmatr@2001:470:69fc:105::1:3831)
[01:10:23] *** Joins: Dus10 (~dus10matr@2001:470:69fc:105::a7d)
[01:10:23] *** Joins: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6)
[01:10:23] *** Joins: arcatech[m] (~arcatech@user/arcatech)
[01:10:26] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[01:10:33] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[01:10:33] *** Joins: jzacsh[m] (~jzacshdax@2001:470:69fc:105::1:3a69)
[01:10:35] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[01:10:35] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[01:10:35] *** Joins: thechadgod[m] (~thechadgo@2001:470:69fc:105::1:a1e2)
[01:10:35] *** Joins: mxehbqtuspx[m] (~mxehbqtus@2001:470:69fc:105::1:656f)
[01:10:35] *** Joins: anonton (~anonton@user/anonton)
[01:10:35] *** Joins: pagalingling[m] (~pagalingl@2001:470:69fc:105::1:60b9)
[01:10:36] *** Joins: mattmurr[m] (~mattmurrm@2001:470:69fc:105::1:5ea0)
[01:10:36] *** Joins: borring (~borring@2001:470:69fc:105::1:532b)
[01:10:37] *** Joins: unl0ckd (~unl0ckdma@2001:470:69fc:105::15e6)
[01:10:37] *** Joins: w[m] (~welt@2001:470:69fc:105::1:7409)
[01:10:38] *** Joins: wielding (~wielding@user/wielding)
[01:11:24] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:bc81:ba25:7a70:67f2) (Read error: Connection reset by peer)
[01:11:40] *** Joins: holgersson (~quassel@user/holgersson)
[01:14:59] <admin123> I'm trying to run bun cli https://bun.uptrace.dev/guide/migrations.html#sql-based-migrations how do I make the bun command available?
[01:15:46] <b0nn> assuming you have compiled/downloaded a binary, the next step is to put it on your $PATH
[01:21:11] <admin123> b0nn: I ran the commands in the starter-kit readme and the server runs. I can also run the go command fine. What should I do to get bun on my path?
[01:22:37] *** Quits: frebib (~frebibcha@nerdhouse.io) (Read error: Connection reset by peer)
[01:23:52] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:24:13] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[01:27:58] <admin123> oh I think `go run cmd/bun/main.go -env=dev` is aliased to `bun` in the docs
[01:28:28] <b0nn> So, you ran the following command? `go get github.com/uptrace/bun` That would have installed a binary to $GOBIN, which is normally on your $PATH
[01:29:27] *** Quits: whaley (~whaley@cpe-76-182-165-20.sc.res.rr.com) (Quit: It won't give up.  It wants me dead.  Goddamn this noise inside my head.)
[01:32:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[01:34:49] *** Joins: fikran (~fikran@user/fikran)
[01:36:02] *** Joins: mickey81 (~user@user/mickey)
[01:36:26] <admin123> b0nn: no I ran go run cmd/bun/main.go -env=dev db create_sql <migration name>
[01:36:33] *** Joins: califax- (~califax@user/califx)
[01:36:38] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:36:59] <b0nn> at the bottom of https://github.com/uptrace/bun is "Installation"
[01:37:03] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 250 seconds)
[01:37:05] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[01:37:05] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[01:37:05] *** mickey81 is now known as mickey8
[01:37:38] *** califax- is now known as califax
[01:38:05] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[01:38:16] *** Joins: mickey8 (~user@user/mickey)
[01:38:23] *** Joins: holgersson (~quassel@user/holgersson)
[01:39:20] *** Joins: frebib (~frebibcha@nerdhouse.io)
[01:40:45] <yagamilito> b0nn
[01:40:46] <yagamilito> I tried to loop through all the messages in queue but i am confused how to break the loop when all messages are read
[01:40:46] <yagamilito> https://go.dev/play/p/ml0syldpchf
[01:41:48] <b0nn> yagamilito: the problem is knowing /when/ you have read all of the messages, given that the queue could (in theory) be replenished with messages at any time
[01:41:58] *** Quits: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it) (Quit: Leaving)
[01:42:49] <b0nn> So, either - get a count of the messages currently in the queue, or batch process by saying that N messages will be processed when this function is invoked
[01:43:00] *** Quits: bindu (~bindu@user/bindu) (Ping timeout: 276 seconds)
[01:43:04] <b0nn> Or, let it run forever, blocking until new messages show up
[01:45:08] *** Joins: bindu (~bindu@user/bindu)
[01:45:21] *** Quits: cim (~cim@205.185.117.110) (Quit: The Lounge - https://thelounge.chat)
[01:47:53] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:49:01] *** Joins: Batzy (~quassel@user/batzy)
[01:50:21] *** Joins: cim (~cim@205.185.117.110)
[01:52:14] *** Joins: sdfgsdfg (~dfghsfgs@user/sdfgsdfg)
[01:58:56] *** Joins: roshanavand (~roshanava@185.213.155.232)
[01:59:18] *** Quits: gsthnz- (~gsthnz@user/gsthnz) (Quit: ZNC 1.8.2 - https://znc.in)
[02:03:18] *** Joins: sheb_ (~sheb@31.223.228.71)
[02:05:27] *** Quits: sheb (~sheb@31.223.228.71) (Ping timeout: 256 seconds)
[02:09:29] *** Quits: cobber (~protorom@213.240.182.67) (Quit: cobber)
[02:12:02] <b0nn> Oh, and final option - if you detect that there are no more messages to be read *at this instant* (keeping in mind that new ones may show up at any time) you can then break
[02:12:06] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Quit: WeeChat 3.4)
[02:14:15] *** Quits: eron (~eron@2804:431:c7c2:934:9877:36f8:e8ed:91e) (Quit: Client closed)
[02:19:05] *** Joins: leonarth (~leonarth@user/leonarth)
[02:22:16] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[02:27:51] *** Quits: sjas (~sjas@irc.sjas.de) (Quit: so lets go)
[02:28:41] *** Joins: sjas (~sjas@irc.sjas.de)
[02:29:34] *** Joins: rcernin (~rcernin@124.190.132.36)
[02:36:46] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[02:39:00] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[02:45:51] *** Joins: k8yun_ (~k8yun@24.244.29.102)
[02:47:49] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:49:25] *** Quits: k8yun (~k8yun@24.244.29.102) (Ping timeout: 240 seconds)
[02:55:51] <jayalane`> I have an application that calls os.Readdir() a lot(19004186) and 7 times it is hanging forever; the fs in question is a NFS filer, so this isn't totally unexpected, but the hanging go-routines are keeping my utility from finishing. Is there a recommended way to timeout a normally blocking syscall like this? Something with a goroutine to make the syscall and a timeout on a select to get the answer from that go routine?
[02:58:40] <b0nn> hmm, a goroutine that calls a (potentially) blocking syscall is normally moved onto a new p before the call, and that p is normally parked IIRC
[02:59:30] <b0nn> I think you will have to look at passing in a context.WithTimeout?
[02:59:57] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[03:00:20] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[03:03:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[03:03:30] <albertito> jayalane`: on an os.File you can call SetDeadline but there's a good chance it doesn't work with ReadDir, you'd have to give it a try
[03:13:00] <mrus> does anyone know if there's something like the cargo-update crate in Rust, that allows performing updates on globally installed binaries?
[03:19:30] <jimeh> wouldn't "go install" with "@latest" perform an update if needed?
[03:20:06] <mrus> yes, that is, if I would write down every binary I install and then do that for each of them individually.
[03:20:42] <mrus> is there a tool that manages that?
[03:21:27] <jimeh> ah, right... I just have a hacky shell function that issues all the go install commands I care to have globally available, it's not great, but works ok :P
[03:21:52] <mrus> did you use go list for finding out *which* packages you installed globally or how did you do that?
[03:22:00] <mrus> because that's the issue I'm facing rn
[03:22:56] <mrus> I don't know exactly how to find out which packages I need to upgrade.. and `go list ...` gives me literally all installed packages (including deps), meaning that if I would use that list to run `go install` on each item I'd manually install most of the deps, which I wouldn't want.
[03:23:46] <jimeh> yeah, my "solution" is a lot less elegant I'm afraid, it's legit just a hard-coded list in my dotfiles: https://github.com/jimeh/dotfiles/blob/b78a356e0595195d546f68b89de7ba2aba23fe48/zsh/golang.zsh#L18-L63
[03:24:12] <mrus> damn man.. the struggle is real, it seems.
[03:24:51] <b0nn> The thing is, there's no package manager for Go that monitors a set of projects written in Go - even the cargo one is limited to "Projects managed through this channel"
[03:25:05] <jimeh> kinda yeah, though admittedly I've not tried looking for a better solution yet, and my homebrew packages are all listed in a "Brewfile", and I have similar hacky functions for ruby and node too...
[03:25:35] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[03:26:30] <jimeh> I've always meant to do something less hacky, but still haven't gotten around to it 8+ years later, as it still works ok enough... though at least my homebrew packages are now installed/managed via a "Brewfile" instead of a shell function... lol
[03:27:14] <jimeh> I've toyed with having ansible manage all these things a few times, but never got around to spending enough time on it to make the switch...
[03:28:45] <jayalane`> b0hn: I don't understand the context.WithTimeout reference; I am expecting to lose the 7 OS threads but it's pretty big box, I don't think that'll matter as long as process exit cleans it up.  I don't see any place in the API for contexts.
[03:29:22] <jimeh> and for projects that offer pre-compiled binaries in GitHub Releases, I've instead started letting zinit install and manage those things, like this is how I get fzf installed: https://github.com/jimeh/dotfiles/blob/b78a356e0595195d546f68b89de7ba2aba23fe48/zsh/fzf.zsh#L10-L12
[03:30:00] <b0nn> jayalane`: I had in mind that your gogourinte would monitor the context, and if the timeout was reached then it would self-destruct
[03:30:10] <b0nn> HOWEVER that's not going to work https://www.reddit.com/r/golang/comments/8npwin/how_to_implement_timeout_in_file_reads/
[03:30:16] <mrus> hm, somehow that's not my kind of avotoast.. I'd prefer a way to dynamically manage global installs
[03:31:34] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com)
[03:31:49] *** Quits: eXtr3m0_ (~eXtr3m0@p4fd3afed.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[03:32:25] <jimeh> yeah, zinit isn't perfect, and I don't use it for everything... like I could have it clone the repo and issue "go build" commands, but that seems overkill... I'd rather manually trigger a install all the things command then...
[03:32:54] <jayalane`> b0nn:  Oh, right, gotit.  I was going to just do a lexically scoped channel and select on the function returning and some time.After() case in the select.
[03:36:37] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[03:37:54] <mrus> jimeh: `/bin/ls -1 ~/.go/bin/ | while read bin; do go version -m ~/.go/bin/$bin | grep '^[[:space:]]path' | awk '{ print $2 }'; done` you're welcome
[03:38:29] <mrus> needs some more refinement, but that's basically one way to get the packages
[03:41:11] <jimeh> oh, neat :)
[03:41:29] <mrus> it probably makes sense to replace `path` with `mod` for less noise
[03:41:46] <jimeh> there's a bunch more binaries in that bin folder, but I'm pretty sure it's random things I've manually done "go install" for... lol
[03:42:21] *** Quits: theo (~theo@user/theo) (Ping timeout: 256 seconds)
[03:42:24] <mrus> yeah, as I said.. some more refinement needed, but it's a start. For me I'll be filtering for only stuff starting with github.com for example.
[03:43:05] <jimeh> you might want to add things that start with "mvdan.cc" too if you use gofumpt... lol
[03:43:45] <jimeh> and "golang.google.org" if you use protobuf...
[03:45:17] *** Quits: kinlo (~peter@user/kinlo) (Ping timeout: 240 seconds)
[03:45:37] *** Joins: llorllale (~llorllale@198.98.119.85)
[03:46:25] <jayalane`> b0nn:  Something like this:  https://gist.github.com/jayalane/08ee11d68d14d7bcda7e2ebc9e015331
[03:46:33] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:e00d:866f:e93f:4751) (Ping timeout: 256 seconds)
[03:47:26] <mrus> those things I usually install through emerge. I solely use go install for binaries that I can't find in the repos.
[03:49:23] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[03:52:25] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com)
[03:53:25] *** Quits: Thinkofname (~thinkthin@2a01:430:17:1::ffff:1980) (Quit: Bridge terminating on SIGTERM)
[03:55:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com) (Client Quit)
[03:58:48] <b0nn> jayalane`: That anonymous goroutine will be the one that blocks and stays alive forever
[03:59:35] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 256 seconds)
[04:00:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com)
[04:00:39] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[04:07:04] <jayalane`> b0nn: for 7 times out of a few million, that's ok, although I thought about retrying, and it lets my WaitGroup "end the whole run" logic to work. Box has 40 CPU so 7 extra/dead OS threads for a while are ok.
[04:07:53] <jimeh> mrus: I think you probably want to keep using path instead of mod in that grep, various different binaries I had from sub-packages of a modules, all just returned the top-level module when using "mod"... lol
[04:09:18] *** Quits: k8yun_ (~k8yun@24.244.29.102) (Ping timeout: 260 seconds)
[04:11:14] *** Joins: haliucinas (~haliucina@5.20.153.21)
[04:17:30] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[04:17:59] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[04:18:24] *** Joins: Thinkofname (~thinkthin@37.205.12.211)
[04:19:29] *** Joins: walterwhip (~www@user/walterwhip)
[04:20:46] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[04:22:45] *** Joins: crashrep (~crashrep@user/crashrep)
[04:31:39] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:35:13] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[04:36:20] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[04:36:42] *** Joins: hanzo (uid532183@user/hanzo)
[04:38:07] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[04:40:57] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Ping timeout: 256 seconds)
[04:43:47] *** Joins: rcernin (~rcernin@124.190.132.36)
[04:44:22] *** Quits: leonarth (~leonarth@user/leonarth) (Quit: 84R6CDo3S62HkuYSkVXBr7fXp2wn1XRHeQZ8QPrqxbXvfXP33EH4MhueE2ifPcRbbQQhVXPheMD957muhhBtrvs2QKykeA3)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:57:31] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.4)
[04:58:21] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:00:21] *** Joins: mickey80 (~user@user/mickey)
[05:01:40] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Excess Flood)
[05:02:11] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:03:12] *** Quits: mickey8 (~user@user/mickey) (Ping timeout: 276 seconds)
[05:03:12] *** mickey80 is now known as mickey8
[05:07:01] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[05:09:31] *** Quits: thatcher (~thatcher@91.110.109.236) (Ping timeout: 256 seconds)
[05:09:50] *** Joins: thatcher (~thatcher@91.110.109.236)
[05:23:47] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[05:36:06] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 260 seconds)
[05:36:57] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[05:39:45] *** Joins: R2robot (~R2robot@user/r2robot)
[05:41:34] *** Joins: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft)
[05:42:09] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[05:44:03] <mrus> hm.. you might be correct there, will check that
[05:44:57] *** Joins: califax- (~califax@user/califx)
[05:46:07] *** Quits: LiftLeft (~LiftLeft@gateway/vpn/pia/liftleft) (Ping timeout: 256 seconds)
[05:49:21] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[05:49:21] *** califax- is now known as califax
[05:53:34] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[05:53:42] *** Joins: ar324 (~ar324@user/ar324)
[05:54:15] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07)
[05:55:45] *** Quits: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net) (Ping timeout: 256 seconds)
[05:55:45] *** Joins: lemonsni- (~lemonsnic@86.4.248.115)
[05:55:51] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Ping timeout: 276 seconds)
[05:56:13] *** Quits: chilversc (~chilversc@user/chilversc) (Ping timeout: 240 seconds)
[05:56:19] *** Quits: lemonsnicks (~lemonsnic@cpc159519-perr18-2-0-cust114.19-1.cable.virginm.net) (Ping timeout: 256 seconds)
[05:56:33] *** Quits: popey (~popey@ubuntu/member/popey) (Ping timeout: 256 seconds)
[05:57:33] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[05:58:04] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[05:58:04] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[05:58:18] *** Joins: chilversc (~chilversc@user/chilversc)
[05:59:19] *** Joins: popey (~popey@ubuntu/member/popey)
[05:59:29] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07) (Ping timeout: 256 seconds)
[06:00:32] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07)
[06:00:57] *** Joins: torin (~torin@cpc158497-croy28-2-0-cust45.19-2.cable.virginm.net)
[06:00:58] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Quit: Connection closed for inactivity)
[06:02:47] *** Quits: eXtr3m0 (~eXtr3m0@user/eXtr3m0) (Ping timeout: 256 seconds)
[06:03:41] *** Quits: ar324 (~ar324@user/ar324) (Ping timeout: 256 seconds)
[06:06:45] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 256 seconds)
[06:09:03] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com)
[06:11:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07) (Ping timeout: 240 seconds)
[06:13:08] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[06:13:10] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07)
[06:13:42] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:d07a:83f1:fde2:2a07) (Client Quit)
[06:14:10] *** Joins: rcernin (~rcernin@124.190.132.36)
[06:22:23] *** Joins: jasonwucj (uid13975@id-13975.ilkley.irccloud.com)
[06:27:48] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:28:25] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[06:29:26] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Remote host closed the connection)
[06:29:45] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[06:47:32] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[06:56:07] *** Quits: impermanence (~impermane@c-75-73-193-204.hsd1.mn.comcast.net) (Quit: Connection closed)
[06:58:53] *** Quits: g2anj (~v@58.228.230.4) (Ping timeout: 256 seconds)
[07:04:07] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[07:04:21] *** Joins: fikran (~fikran@user/fikran)
[07:08:17] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[07:09:02] *** Joins: m5zs7k (aquares@web10.mydevil.net)
[07:15:25] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[07:23:17] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Ping timeout: 250 seconds)
[07:24:53] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[07:25:05] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[07:41:59] *** Joins: kinlo (~peter@user/kinlo)
[07:47:03] <fikran> does golang's websocket library have a way to make a socket a line stream?
[07:47:15] <fikran> into bufio.NewReader?
[07:47:38] <fikran> this library: https://pkg.go.dev/golang.org/x/net/websocket
[07:50:29] <rewt> looks like that Conn is an io.ReadWriteCloser, so you could use it as such
[07:52:01] <rewt> if you specifically need a bufio.Reader, you could get one with bufio.NewReader(yourConnObj)
[07:53:55] *** Joins: fdan (~fdan@2001:1900:2100:2807:640a::ffb)
[07:54:13] <rewt> but if all you need is something that implements io.Reader, you should be able to use it directly
[08:10:36] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[08:11:31] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[08:25:02] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 260 seconds)
[08:51:27] *** Joins: bluedust (~bluedust@103.161.144.34)
[08:51:37] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[08:59:40] *** Joins: bancroft (~bancroft@user/bancroft)
[09:00:33] *** Joins: solifugus (~solifugus@2603-7080-7a07-ac2a-5541-a26a-085c-2ff8.res6.spectrum.com)
[09:01:10] *** Joins: k8yun_ (~k8yun@24.244.29.99)
[09:01:42] <bancroft> dumb question, I'm trying to call C.mmap with the contents of a file and not a file descriptor. How do I do that? This is what I have so far, https://bpa.st/B7AQ
[09:02:32] <bancroft> fileContents is a string with the contents of a file
[09:03:57] *** Quits: kodah- (~kodah@user/kodah) (Ping timeout: 240 seconds)
[09:04:23] <bancroft> I got the types from https://go.dev/src/runtime/cgo_mmap.go
[09:05:10] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 260 seconds)
[09:05:49] *** Joins: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net)
[09:06:08] *** Joins: kodah- (kodah@user/kodah)
[09:08:11] *** Quits: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net) (Ping timeout: 256 seconds)
[09:08:46] <foobaz> i don't think you should use mmap for this
[09:09:10] *** Joins: dba (uid533975@id-533975.hampstead.irccloud.com)
[09:09:10] <foobaz> you already have a pointer to the bytes in memory, why would you want a pointer to the bytes on disk?
[09:09:22] *** Quits: adip (~adip@crd88.neoplus.adsl.tpnet.pl) (Ping timeout: 260 seconds)
[09:09:43] <foobaz> just give the C code the pointer to the contents
[09:09:55] <bancroft> foobaz: i'm learning about dlopen, so for fun i'm trying to rewrite it in go so it gives me an execuse to read about it
[09:10:15] <bancroft> part of it is needing to set the protections and the flags
[09:11:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[09:11:52] <bancroft> I got it to work with the fd though, so there's that
[09:13:42] *** Joins: fikran (~fikran@user/fikran)
[09:14:09] *** Joins: masoudd (~masoudd@user/masoudd)
[09:15:45] <solifugus> by default, will a type struct be passed to a func by reference or a copy made?
[09:16:27] <foobaz> solifugus: a copy
[09:16:54] <solifugus> ok.. then one should generally use *mytype to not be wasteful of cpu and memory..
[09:17:10] <solifugus> thnks
[09:17:22] <b0nn> uhhhhh
[09:17:29] <foobaz> pointers have their own CPU and memory cost
[09:17:49] <foobaz> a pointer is only cheaper if the struct is large
[09:19:12] <foobaz> also in certain circumstances copying the value allows the compiler to allocate the memory on the stack instead of the heap, which saves work for the GC
[09:20:33] <bancroft> foobaz: have I reached a deadend? like is it not possible?
[09:21:36] *** Quits: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Remote host closed the connection)
[09:22:06] *** Joins: adip (~adip@crd88.neoplus.adsl.tpnet.pl)
[09:22:41] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[09:26:41] *** Joins: Guest72 (~Guest72@2401:4900:1f3d:5532:e32f:b40b:5bd7:b69c)
[09:37:33] *** Quits: kodah- (kodah@user/kodah) (Ping timeout: 256 seconds)
[09:37:33] *** Quits: normen (~normen@pd9eec481.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[09:39:26] *** Joins: kodah- (~kodah@user/kodah)
[09:45:23] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:50:16] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[09:56:17] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 240 seconds)
[09:58:18] *** Quits: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c) (Remote host closed the connection)
[09:58:42] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[10:04:54] *** Joins: normen (~normen@p200300d717235c000c7dba79528c91a7.dip0.t-ipconnect.de)
[10:06:46] *** Quits: kodah- (~kodah@user/kodah) (Ping timeout: 260 seconds)
[10:08:50] *** Joins: kodah- (kodah@user/kodah)
[10:09:36] *** Joins: seebs (~seebs@24.196.59.174)
[10:19:49] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 256 seconds)
[10:22:40] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[10:23:54] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[10:25:59] *** Joins: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk)
[10:27:59] *** Quits: bancroft (~bancroft@user/bancroft) (Ping timeout: 256 seconds)
[10:43:36] *** Quits: k8yun_ (~k8yun@24.244.29.99) (Read error: Connection reset by peer)
[10:45:14] *** Quits: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de) (Quit: The Lounge - https://thelounge.chat)
[10:48:41] *** Joins: ajfriesen70 (~ajfriesen@cable-78-35-98-50.nc.de)
[10:56:27] *** Quits: hanzo (uid532183@user/hanzo) (Quit: Connection closed for inactivity)
[10:56:35] *** Quits: gpeskens (~gpeskens@2001:985:7aa4:1:640f:6eff:fef2:deb8) (Remote host closed the connection)
[11:11:05] *** Joins: mrig (~mrig@user/mrig)
[11:17:05] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[11:19:54] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:20:38] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Max SendQ exceeded)
[11:20:47] *** Joins: esro (~esro@nat1.krakowskiinternet.pl)
[11:21:05] *** Joins: chenqisu1 (~chenqisu1@183.217.200.249)
[11:21:21] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[11:22:05] *** Joins: rendar (~rendar@user/rendar)
[11:23:03] *** Joins: fikran (~fikran@user/fikran)
[11:23:11] *** Joins: absc (~absc@81.31.144.28)
[11:25:58] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[11:27:31] *** Joins: shka (~herr@109.231.0.226)
[11:28:50] *** Joins: idstam (~idstam@185.176.247.102)
[11:32:33] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[11:32:51] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:32:56] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[11:33:25] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[11:33:37] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:33:47] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[11:34:25] *** Quits: _mikey (~mikey@user/mikey/x-4335048) (Quit: WeeChat 3.4)
[11:36:55] *** Joins: alwyn (~alwyn@user/alwyn)
[11:43:18] *** Quits: noonien (~noonien@user/noonien) (Ping timeout: 250 seconds)
[11:43:57] *** Quits: kodah- (kodah@user/kodah) (Ping timeout: 240 seconds)
[11:44:27] *** Joins: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de)
[11:46:09] *** Joins: kodah- (~kodah@user/kodah)
[11:46:26] *** Joins: xsteadfastx (~marv@94.31.99.245)
[11:54:26] *** Joins: bluedust_ (~bluedust@117.204.132.5)
[11:57:51] *** Quits: bluedust (~bluedust@103.161.144.34) (Ping timeout: 256 seconds)
[12:02:42] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[12:09:29] *** Joins: monoxane5 (~monoxane@user/monoxane)
[12:10:57] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 240 seconds)
[12:10:57] *** monoxane5 is now known as monoxane
[12:11:24] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[12:11:25] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Remote host closed the connection)
[12:13:59] *** Joins: Ergo^ (~ergo@91.238.59.144)
[12:18:45] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Read error: Connection reset by peer)
[12:18:49] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[12:27:33] *** Joins: theo (~theo@user/theo)
[12:35:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[12:38:41] <mickey8> hi, i have a json response from wikipedia's api that looks like this https://dpaste.com/7RELWNK25
[12:39:11] <mickey8> im trying to create a proper struct for that, but if you look at line 11, the pageid is dynamic
[12:39:42] <mickey8> whats the best approach for this? set pages to a map[pageid]anotherstruct{} ?
[12:44:15] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5574:4afc:9b6a:ceb2)
[12:47:05] *** Joins: leonarth (~leonarth@user/leonarth)
[12:47:51] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Ping timeout: 245 seconds)
[12:53:32] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5574:4afc:9b6a:ceb2) (Ping timeout: 240 seconds)
[13:00:54] *** Joins: goldfish (~goldfish@user/goldfish)
[13:01:29] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:03:40] <b0nn> mickey8: I use https://mholt.github.io/json-to-go/ to figure out what the Go struct can look like
[13:04:35] <shadowchaser> b0nn but he means that one of the field names will differ between queries
[13:04:35] *** Joins: mncheck (~mncheck@193.224.205.254)
[13:06:41] <b0nn> in your case the receiving fucntion is relying on the json tags to determine where to put things and you can put something, I forget what off the top of my head - I have it in a code base but I'm a bit tired
[13:07:17] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[13:08:53] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[13:10:39] *** Joins: rcernin (~rcernin@124.190.132.36)
[13:12:57] <mickey8> b0nn no worries. i'll just use a map for this. just wondered if there was a better approach
[13:30:47] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[13:32:24] *** Joins: fikran (~fikran@user/fikran)
[13:34:56] *** Quits: normen (~normen@p200300d717235c000c7dba79528c91a7.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[13:37:35] *** Joins: normen (~normen@p200300d717235c000c7dba79528c91a7.dip0.t-ipconnect.de)
[13:41:05] *** Quits: dffo^ (~dffo@128-092-182-020.biz.spectrum.com) (Remote host closed the connection)
[13:41:14] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 252 seconds)
[13:43:12] *** Joins: alwyn (~alwyn@user/alwyn)
[13:45:01] *** Quits: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net) (Ping timeout: 240 seconds)
[13:45:32] <fps> hmm, net.UDPConn implements net.Conn
[13:46:17] <fps> net.Conn has a function setTTL. i'd like to call that on the result of net.ListenMulticastUDP, which is a net.UDPConn.. i'm new to go,so this is probably basic
[13:47:00] <fps> i tried a type assertion: err = conn.(*net.Conn).SetTTL(255)
[13:47:15] <fps> but go doesn't like that..
[13:47:20] <fizzie> net.Conn does not have a function `SetTTL`.
[13:47:43] <fizzie> It's an interface with the methods Read, Write, Close, LocalAddr, RemoteAddr, SetDeadline, SetReadDeadline and SetWriteDeadline, that's all.
[13:48:06] <fps> ok, then i'm my misunderstanding is even deeper :)
[13:48:07] *** Joins: SJrX (~sjr@S0106302303dfb018.vf.shawcable.net)
[13:48:10] <fps> https://pkg.go.dev/golang.org/x/net/ipv4?utm_source=godoc#Conn.SetTTL
[13:48:28] <fizzie> That's golang.org/x/net/ipv4.Conn, not net.Conn.
[13:48:34] <fps> oh right :)
[13:48:38] <fps> dammit :)
[13:49:38] <fps> hmm, what would be the right way to set the TTL on a message written over a UDPConn? :)
[13:50:28] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[13:51:25] *** Quits: alwyn (~alwyn@user/alwyn) (Ping timeout: 240 seconds)
[13:51:56] <fizzie> Possibly `wrappedConn := ipv4.NewPacketConn(conn)` to wrap your *net.UDPConn inside an *ipv4.PacketConn, though that was based on a _real_ quick glance at that packet. And then use `wrappedConn` to write.
[13:52:06] <fizzie> (And to call SetTTL on.)
[13:52:11] <fizzie> It'd be IPv4-specific, though.
[13:52:18] *** Joins: roshanavand (~roshanava@185.213.155.232)
[13:52:18] <fizzie> (IPv6 doesn't have a TTL, it has a hop limit.)
[13:53:12] <fps> fizzie: ok, thanks for the pointers
[13:53:31] *** Joins: alwyn (~alwyn@user/alwyn)
[13:54:11] *** Quits: Guest72 (~Guest72@2401:4900:1f3d:5532:e32f:b40b:5bd7:b69c) (Quit: Client closed)
[13:58:21] *** Joins: dsrt^ (~dsrt@128-092-182-020.biz.spectrum.com)
[13:59:07] *** Quits: walterwhip (~www@user/walterwhip) (Ping timeout: 256 seconds)
[14:02:48] *** Quits: fdan (~fdan@2001:1900:2100:2807:640a::ffb) (Quit: Client closed)
[14:12:33] *** Joins: walterwhip (~www@user/walterwhip)
[14:21:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[14:21:47] *** Joins: mickey8 (~user@user/mickey)
[14:21:59] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Remote host closed the connection)
[14:28:48] *** Quits: slowtyper (~slowtyper@user/slowtyper) (Quit: ZNC 1.8.2 - https://znc.in)
[14:29:04] *** Joins: slowtyper (~slowtyper@user/slowtyper)
[14:31:06] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[14:31:25] *** Joins: rcernin (~rcernin@124.190.132.36)
[14:31:42] *** Joins: tec (~quassel@gate.sixtopia.net)
[14:33:55] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Quit: ZNC - https://znc.in)
[14:34:55] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[14:35:23] *** Quits: roshanavand (~roshanava@185.213.155.232) (Ping timeout: 256 seconds)
[14:35:34] *** Joins: mrig (~mrig@user/mrig)
[14:35:43] *** Quits: xse (~xse@user/xse) (Ping timeout: 256 seconds)
[14:35:47] *** Joins: xse_ (~xse@user/xse)
[14:36:25] *** xse_ is now known as xse
[14:39:54] *** Joins: g2anj (~v@58.228.230.4)
[14:43:30] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[14:51:54] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 260 seconds)
[14:56:47] *** Joins: jjonah (~jjonah@p200300d5d727ec00dea632fffeb3342f.dip0.t-ipconnect.de)
[14:58:38] *** Quits: shiroyas1 (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com) (Quit: WeeChat 3.3)
[15:01:06] *** Joins: eXtr3m0 (~eXtr3m0@p4fd3ac0f.dip0.t-ipconnect.de)
[15:02:05] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[15:02:58] *** Joins: mrig (~mrig@user/mrig)
[15:06:36] *** Joins: rcernin (~rcernin@124.190.132.36)
[15:09:22] *** Quits: sheb_ (~sheb@31.223.228.71) (Quit: Leaving)
[15:18:11] *** Joins: walterwhip (~www@user/walterwhip)
[15:22:08] *** Joins: yoonkn (~user@175.197.208.79)
[15:23:12] *** Quits: walterwhip (~www@user/walterwhip) (Quit: Textual IRC Client: www.textualapp.com)
[15:23:31] *** Joins: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru)
[15:35:33] *** Joins: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl)
[15:39:38] *** Quits: ryu` (~ryu`@user/ryu/x-3206151) (Quit: ZNC 1.8.2 - https://znc.in)
[15:39:59] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:41:13] *** Joins: ryu` (~ryu`@user/ryu/x-3206151)
[15:41:51] *** Joins: fikran (~fikran@user/fikran)
[15:44:55] *** Quits: mncheckm (~mncheck@193.224.205.254) (Quit: Leaving)
[15:48:16] *** Quits: zwr (~zwr@2804:d45:b966:fb00:af27:6e8f:df74:3523) (Ping timeout: 245 seconds)
[15:49:18] *** Joins: zwr (~zwr@2804:d45:b966:fb00:be03:2bc0:ec84:6a34)
[15:56:05] *** Quits: k3nn7 (~k3nn7@89-64-42-67.dynamic.chello.pl) (Remote host closed the connection)
[15:56:42] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[16:01:45] *** Quits: Ergo^ (~ergo@91.238.59.144) (Quit: WeeChat 2.8)
[16:02:51] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 250 seconds)
[16:05:55] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[16:09:55] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Quit: Leaving)
[16:10:14] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[16:13:00] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Read error: Connection reset by peer)
[16:13:44] *** Joins: pmb (~pmb@89-64-79-51.dynamic.chello.pl)
[16:16:31] *** Joins: bancroft (~bancroft@user/bancroft)
[16:19:21] *** Quits: tesuji (~quassel@2a02:908:180:9500:7dfb:8bc4:47fe:281d) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[16:22:04] *** Quits: jasonwucj (uid13975@id-13975.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[16:24:52] *** Joins: roshanavand (~roshanava@185.213.155.232)
[16:28:09] *** Quits: absc (~absc@81.31.144.28) (Ping timeout: 256 seconds)
[16:29:45] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[16:30:53] *** Quits: tiferrei (~tiferrei@user/tiferrei) (Remote host closed the connection)
[16:31:38] *** Joins: tiferrei (~tiferrei@user/tiferrei)
[16:35:04] *** Quits: leonarth (~leonarth@user/leonarth) (Killed (NickServ (GHOST command used by leonarth_)))
[16:35:04] *** Joins: leonarth_ (~leonarth@user/leonarth)
[16:35:07] *** leonarth_ is now known as leonarth
[16:36:01] *** Joins: jcajka (~jcajka@2a02:8308:a106:d100::4ac5)
[16:36:39] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:36:59] *** Joins: mickey8 (~user@user/mickey)
[16:38:05] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:39:06] *** Quits: eXtr3m0 (~eXtr3m0@p4fd3ac0f.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[16:45:29] *** Quits: chenqisu1 (~chenqisu1@183.217.200.249) (Ping timeout: 256 seconds)
[16:46:12] *** Joins: absc (~absc@81.31.144.28)
[16:48:40] *** Quits: roshanavand (~roshanava@185.213.155.232) (Remote host closed the connection)
[16:48:58] *** Joins: roshanavand (~roshanava@185.213.155.232)
[16:55:59] *** Quits: krux02 (~krux02@p200300e8170d4f00004bdf5557be8ad9.dip0.t-ipconnect.de) (Remote host closed the connection)
[16:57:40] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[16:57:55] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:03:38] *** Joins: r0lh (~r0lh@ipbcc22b08.dynamic.kabel-deutschland.de)
[17:05:17] *** Quits: frebib (~frebibcha@nerdhouse.io) (Quit: Bridge terminating on SIGTERM)
[17:06:04] *** Joins: frebib (~frebibcha@nerdhouse.io)
[17:07:10] *** Joins: comrad (~quassel@holarse/comrad)
[17:13:37] *** Quits: jcajka (~jcajka@2a02:8308:a106:d100::4ac5) (Ping timeout: 240 seconds)
[17:17:02] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[17:18:07] *** Joins: connor_k0 (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[17:20:37] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:21:30] *** Quits: esro (~esro@nat1.krakowskiinternet.pl) (Quit: Leaving)
[17:21:39] *** Joins: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[17:22:06] <mort> I think it used to be possible to have "scripts" which don't have a go.mod file and aren't proper "projects" but still import stuff. Is that still possible? Or was it never possible?
[17:23:41] *** Quits: connor_k0 (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Ping timeout: 256 seconds)
[17:23:55] <siXy> mort: You can write programs without using a module file. "scripts" is probably not a helpful way of thinking about this, but nothing's changed in that regard.
[17:24:16] <mort> siXy: how would you do that? Go just complains that there's no go.mod
[17:27:46] <siXy> vim test.go; write some code that doesn't use modular imports; go build -o foo; ./foo
[17:28:13] *** Quits: r0lh (~r0lh@ipbcc22b08.dynamic.kabel-deutschland.de) (Quit: Client closed)
[17:28:13] <siXy> If you want to use modular imports then you will of course need to use modules, but that was hopefully obvious.
[17:29:12] <fizzie> From the Go 1.16 release notes: "Module-aware mode is enabled by default, regardless of whether a go.mod file is present in the current working directory or a parent directory. More precisely, the GO111MODULE environment variable now defaults to on. To switch to the previous behavior, set GO111MODULE to auto."
[17:29:24] <mort> siXy: how do I "non-modularly" import something then?
[17:29:41] <mort> because `import "github.com/foo/bar" doesn't work
[17:30:42] <siXy> "I did some vaguely defined thing and it doesn't work" isn't a particularly helpful way of reporting problems.
[17:31:56] <fizzie> Doing exactly the above steps in an empty directory gives "go: go.mod file not found in current directory or any parent directory; see 'go help modules'". For a test.go file that's just `package main` + `func main() {}`.
[17:31:57] <mort> what I said isn't any less vague than your suggestion to write some code in test.go
[17:32:14] <mort> the question is, what do you mean by "modular imports", and how can I use imports without using "modular imports"
[17:35:24] <mort> go used to be a pretty nice language for scripts, where you could just write a go program and 'go run' it like you can with python
[17:35:32] <siXy> If you're using 1.16 or newer you need to export GO111MODULE=auto. But again, "doesn't work" is a useless statement. I'm not sure why it's so popular on IRC from users seeking advice - it tells us nothing. Always share the actual error.
[17:35:57] <mort> I didn't say "doesn't work", I said it complains that there's no go.mod
[17:36:13] <siXy> mort> because `import "github.com/foo/bar" doesn't work
[17:36:18] <siXy> mort> I didn't say "doesn't work"
[17:36:20] <siXy> >.>
[17:36:29] <mort> doesn't work ...because it complains there's no go.mod
[17:36:51] <mort> anyways, if you're not in a helpful mood today that's okay
[17:36:58] <mort> you seem very argumentative
[17:37:17] <siXy> You seem to have a lot of attitude for someone wanting free assistance.
[17:37:26] <mort> you're not obligated to provide any
[17:38:25] <mort> siXy: I was just asking what you meant by "non-modularly" importing things
[17:38:25] *** Joins: anon16_ (~anon16_@user/anon16)
[17:38:35] <mort> that's the main point of the question
[17:38:39] <mort> you still haven't answered
[17:39:36] <mort> siXy: would you have been less angry with me if I had just asked how I "non-modularly" import something, without providing the additional context that `import "github.com/foo/bar"` doesn't work because go complains about the lack of a go.mod file?
[17:39:45] <anon16_> Hello. As a complete beginner to backend programming (but not go programming in general), what are some good resources to learn the former?
[17:40:17] <mort> siXy: you there?
[17:41:03] <mort> I swear all discussions in this IRC channel ends up like this
[17:41:36] *** Joins: eron (~eron@2804:431:c7c2:934:71db:138a:b405:a803)
[17:42:25] *** Parts: eron (~eron@2804:431:c7c2:934:71db:138a:b405:a803) ()
[17:42:37] <siXy> anon16_: "backend programming" isn't a particularly well-defined term. If you could be a little more precise about what you're looking for, it'd be easier to help you effectively.
[17:42:49] <mort> siXy?
[17:44:39] <mort> siXy
[17:45:16] <anon16_> siXy: basically, making CRUD apps, APIs, etc
[17:46:07] <mort> siXy: I don't know what's going on here but I'm literally just asking how I should import something in a way that's not a modular import
[17:47:04] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[17:47:09] <mort> siXy
[17:47:33] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[17:49:14] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[17:50:58] <siXy> anon16_: http://go-database-sql.org/index.html is probably worth a look - also worth spending a little time learning SQL if you haven't already.  Beyond that, the official site has a tutorial for creating a REST API with gin here: https://go.dev/doc/tutorial/web-service-gin - personally I'm not a big fan of gin and similar frameworks, but not everyone agrees with me on this.
[17:51:12] *** Joins: fikran (~fikran@user/fikran)
[17:52:10] <anon16_> siXy: thanks, will take a look
[17:55:55] *** Quits: tec (~quassel@gate.sixtopia.net) (Quit: No Ping reply in 180 seconds.)
[17:57:07] *** Joins: tec (~quassel@gate.sixtopia.net)
[17:58:38] *** Quits: svedrin (~quassel@tiamat.funzt-halt.net) (Quit: https://quassel-irc.org - Komfortabler Chat. Überall.)
[17:58:54] *** Joins: svedrin (~quassel@tiamat.funzt-halt.net)
[18:09:02] <davidkrauser> Is there a canonical golang way to handle aggregate errors? If I have a function that can fail in three different ways (say it breaks the work down into three different gothreads, and each returns a different error), is there a way to aggregate those into a single error that can be broken apart? Or should I be returning a []error?
[18:09:17] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 240 seconds)
[18:09:39] *** Quits: ghost08 (~ghost08@adsl-dyn-18.95-102-48.t-com.sk) (Quit: WeeChat 3.4)
[18:09:53] *** Quits: henry40408 (~henry4040@175.181.155.165) (Quit: Ping timeout (120 seconds))
[18:09:56] <davidkrauser> What I think I want is something like Wrap()/Unwrap(), that can handle a set of embedded errors
[18:10:13] *** Joins: henry40408 (~henry4040@175.181.155.165)
[18:10:20] <fizzie> I don't think there's a *canonical* one, but I did run across https://pkg.go.dev/github.com/hashicorp/go-multierror recently when speculating about how a pair of errors could best be represented.
[18:10:49] <davidkrauser> fizzie: oh, cool, thank you. This looks interesting :-)
[18:11:16] <fizzie> You can't really make the wrap/unwrap "protocol" work for anything but a single linear chain (which may be problematic if your initial errors can already have wrapped ones), but you can make an error type that in terms of `errors.Is` / `errors.As` works kind of like the amalgamation of all the input errors.
[18:12:21] *** Joins: edrocks (~Ed@user/edrocks)
[18:12:37] <davidkrauser> Yeah, I was originally thinking I could just make something like a list of errors using Wrap()/Unwrap(), but it breaks down when you need something that isn't linear
[18:12:44] *** Joins: c10l (~c10l@user/c10l)
[18:12:51] <fizzie> The under-the-hood implementation of that package is the "obvious" one, https://github.com/hashicorp/go-multierror/blob/v1.1.1/multierror.go#L85-L121
[18:13:06] *** Joins: arkurious (~arkurious@user/arkurious)
[18:13:17] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[18:14:47] <davidkrauser> lol, I love that you can do stuff like that in Go. Just make the slice implement the interface! Of course!
[18:15:48] <fizzie> (Well, maybe that's not the most obvious-est one, since it also attempts to make the list look like they were an unwrap chain. The one I was imagining didn't do that, it just provided the As/Is methods on the combined errors.)
[18:16:12] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 276 seconds)
[18:16:29] <fizzie> I think I was in fact looking at https://pkg.go.dev/github.com/joeshaw/multierror at the time.
[18:16:41] <fizzie> ...no, that one doesn't do Is/As either.
[18:16:51] <fizzie> Well, anyway, something along those lines.
[18:16:58] <davidkrauser> The behavior here is interesting, though. Wrap/Unwrap essentially work as a way to iterate over the chain. And Is/As only look at the current error. I think with a typical Wrap/Unwrap chain, Is/As will look down the chain to see if a wrapped error matches
[18:17:19] <fizzie> The Is/As method *implementation* typically doesn't do that.
[18:17:28] <fizzie> `errors.Is` / `errors.As` is what does walking down the chain.
[18:17:38] <davidkrauser> right, that's what I meant
[18:17:41] <davidkrauser> that's a good point
[18:17:56] <davidkrauser> so both implementations should work the same with errors.Is/errors.As
[18:18:19] <davidkrauser> I think this is exactly what I need, thanks a bunch fizzie
[18:19:46] *** Joins: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd)
[18:19:54] *** Quits: ekathva (~ekathva@2001:999:50:cab1:b7e8:130b:c792:9fd) (Remote host closed the connection)
[18:19:57] *** Quits: boingolov (~nastynate@99.26.180.217) (Ping timeout: 240 seconds)
[18:23:47] *** Quits: dsrt^ (~dsrt@128-092-182-020.biz.spectrum.com) (Remote host closed the connection)
[18:33:27] *** Joins: fef (~thedawn@user/thedawn)
[18:33:45] *** Quits: califax (~califax@user/califx) (Ping timeout: 276 seconds)
[18:35:03] *** Joins: califax (~califax@user/califx)
[18:35:25] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 256 seconds)
[18:36:28] *** Joins: Guest66 (~Guest66@h082218231015.host.wavenet.at)
[18:43:36] <A_Dragon> I still really hate that those are built with anon interfaces
[18:46:38] <j416> A_Dragon: why?
[18:46:52] <A_Dragon> j416: because its slightly harder to work with
[18:47:13] <A_Dragon> the As and Is interfaces are solely defined in errors.As and errors.Is's signatures
[18:47:40] <A_Dragon> rather than being errors.ErrorIs, errors.ErrorAs, and errors.ErrorAsIs or similar
[18:53:17] *** Ypszilon is now known as ypszilon
[18:54:27] *** Joins: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca)
[19:10:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[19:12:51] *** Joins: connor_k5 (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[19:13:06] *** Joins: arinov (~arinov@213.194.126.155)
[19:14:15] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34) (Client Quit)
[19:14:35] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Ping timeout: 250 seconds)
[19:14:36] *** connor_k5 is now known as connor_k
[19:19:52] *** Joins: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de)
[19:19:52] *** Quits: tane (~tane@dslb-002-201-234-223.002.201.pools.vodafone-ip.de) (Changing host)
[19:19:52] *** Joins: tane (~tane@user/tane)
[19:26:43] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:27:21] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[19:30:03] *** Quits: Guest66 (~Guest66@h082218231015.host.wavenet.at) (Ping timeout: 256 seconds)
[19:31:15] *** Joins: connor_k5 (~connor_k@ip68-102-25-198.ks.ok.cox.net)
[19:31:25] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Ping timeout: 256 seconds)
[19:31:26] *** connor_k5 is now known as connor_k
[19:31:47] *** Quits: connor_k (~connor_k@ip68-102-25-198.ks.ok.cox.net) (Client Quit)
[19:34:24] *** Quits: bluedust_ (~bluedust@117.204.132.5) (Remote host closed the connection)
[19:37:28] *** Quits: tec (~quassel@gate.sixtopia.net) (Quit: quit)
[19:37:33] *** Joins: SuperLag (~akulbe@user/superlag)
[19:42:40] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--4c0.oracle-ocna.com)
[19:45:08] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[19:45:53] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:74dd:96ca:88f8:f549:5799)
[19:47:52] <j416> A_Dragon: as in, you can't autogenerate stubs?
[19:48:57] <A_Dragon> j416: no, as in I cant force verify an implementation implements As or Is, and I cant otherwise easily find how exactly as or is is implemented
[19:49:08] <j416> aha. I see.
[19:49:34] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[19:54:55] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:56:01] <fizzie> Of course the interface names would be `errors.Asser` and `errors.Isser`. ;)
[19:57:26] <j416> XD
[19:58:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[19:58:41] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--4c0.oracle-ocna.com) (Ping timeout: 245 seconds)
[20:00:33] *** Joins: fikran (~fikran@user/fikran)
[20:00:58] *** Joins: dntreou (~yakiza@105-209-145-202.access.mtnbusiness.co.za)
[20:05:07] *** Joins: bluedust (~bluedust@117.204.132.5)
[20:06:43] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:640f:6eff:fef2:deb8)
[20:09:23] *** Quits: aaaaa (~a@65.79.136.69) (Ping timeout: 256 seconds)
[20:10:39] *** Joins: k8yun_ (~k8yun@24.244.29.114)
[20:14:15] *** Quits: k8yun (~k8yun@198-48-158-40.cpe.pppoe.ca) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: sdfgsdfg (~dfghsfgs@user/sdfgsdfg) (Quit: ayo yoyo ayo yoyo hololo, hololo.)
[20:16:15] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[20:21:43] <hyper_dave> Anybody working on go-llvm
[20:22:10] *** Quits: k8yun_ (~k8yun@24.244.29.114) (Changing host)
[20:22:10] *** Joins: k8yun_ (~k8yun@user/k8yun)
[20:25:13] *** Joins: jjido (~Denis@94.4.149.217)
[20:25:44] *** Quits: absc (~absc@81.31.144.28) (Quit: Leaving)
[20:27:24] *** Joins: bluedust_ (~bluedust@185.248.85.41)
[20:28:25] *** Quits: bluedust (~bluedust@117.204.132.5) (Ping timeout: 256 seconds)
[20:33:39] *** Quits: pztrn15 (~pztrn1@aurora.pztrn.name) (Quit: Segmentation fault)
[20:34:28] *** Joins: pztrn15 (~pztrn1@aurora.pztrn.name)
[20:34:55] <lungaro> is there a way to do heredoc in go and also strip leading whitespce?
[20:35:11] <lungaro> kinda annoying to have the formatting all wacky in the code
[20:35:29] <ikke> There is https://pkg.go.dev/github.com/MakeNowJust/heredoc
[20:35:31] *** Joins: whaley (~whaley@2603-6080-a301-33d1-9961-d0f4-1873-ea22.res6.spectrum.com)
[20:35:38] <ikke> Nothing built-in
[20:36:05] <lungaro> huh, not too bad
[20:40:53] *** Joins: aaaaa (~a@65.79.136.69)
[20:43:03] *** Joins: pmcnabb0 (~pmcnabb@user/pmcnabb)
[20:45:35] <fizzie> If I need something that's multi-line but not enough to justify a separate file (e.g., sometimes in tests), what I tend to do is https://go.dev/play/p/ZHDt0gh3Bfu which doesn't look *too* bad at package scope. Terrible inside a block though.
[20:46:06] *** Joins: bluedust (~bluedust@117.204.128.175)
[20:46:36] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 245 seconds)
[20:46:36] *** pmcnabb0 is now known as pmcnabb
[20:48:57] *** Quits: whaley (~whaley@2603-6080-a301-33d1-9961-d0f4-1873-ea22.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:48:59] *** Quits: aaaaa (~a@65.79.136.69) (Quit: ZNC - https://znc.in)
[20:49:48] *** Joins: aaaaa (~a@65.79.136.69)
[20:49:57] *** Quits: bluedust_ (~bluedust@185.248.85.41) (Ping timeout: 256 seconds)
[20:52:23] *** Joins: crashrep (~crashrep@user/crashrep)
[20:53:28] *** Joins: pmcnabb4 (~pmcnabb@user/pmcnabb)
[20:55:23] *** Quits: pmcnabb (~pmcnabb@user/pmcnabb) (Ping timeout: 256 seconds)
[20:55:23] *** pmcnabb4 is now known as pmcnabb
[20:56:16] *** Joins: mncheckm (~mncheck@193.224.205.254)
[20:58:37] *** Quits: mncheck (~mncheck@193.224.205.254) (Ping timeout: 240 seconds)
[21:00:37] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[21:04:35] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[21:05:30] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:22:04] *** Quits: ugjka (~ugjka@ugjka.net) (Quit: Rabooting the server https://ugjka.net)
[21:22:39] *** Joins: ugjka (~ugjka@ugjka.net)
[21:26:50] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[21:37:33] *** Quits: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net) (Ping timeout: 256 seconds)
[21:38:27] *** Quits: dntreou (~yakiza@105-209-145-202.access.mtnbusiness.co.za) (Ping timeout: 250 seconds)
[21:40:17] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--3f.oracle-ocna.com)
[21:52:20] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:655c:94b:918d:9e34)
[21:52:43] *** Quits: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[21:54:42] *** Joins: GJdan (~quassel@107-190-26-133.cpe.teksavvy.com)
[22:00:32] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[22:01:15] *** Joins: todo75 (~todo75@user/todo75)
[22:02:15] *** Quits: bluedust (~bluedust@117.204.128.175) (Remote host closed the connection)
[22:04:33] *** Joins: shiroyasha (~shiroyash@ec2-3-124-70-31.eu-central-1.compute.amazonaws.com)
[22:07:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 250 seconds)
[22:09:53] *** Joins: fikran (~fikran@user/fikran)
[22:14:21] *** Quits: shtirlic (~shtirlic@95-55-121-47.dynamic.avangarddsl.ru) (Remote host closed the connection)
[22:18:00] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[22:21:53] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-f089-38a5-e7a7-68a5.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[22:25:50] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--3f.oracle-ocna.com) (Read error: Connection reset by peer)
[22:26:45] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[22:27:15] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[22:28:58] *** Quits: alwyn (~alwyn@user/alwyn) (Quit: WeeChat 3.4)
[22:30:36] *** Joins: dntreou (~yakiza@105-209-145-202.access.mtnbusiness.co.za)
[22:32:36] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[22:32:53] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[22:37:36] *** Joins: admin123 (~harrymore@cpe-69-203-109-69.nyc.res.rr.com)
[22:39:48] *** Quits: todo75 (~todo75@user/todo75) (Ping timeout: 250 seconds)
[22:42:15] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-78d5-e2ea-a2f1-e76e.res6.spectrum.com)
[22:43:14] *** Quits: dntreou (~yakiza@105-209-145-202.access.mtnbusiness.co.za) (Ping timeout: 260 seconds)
[22:43:58] *** Joins: bluedust (~bluedust@117.204.128.175)
[22:44:55] *** Joins: dntreou (~yakiza@inet-2a02-6900-8808-e010--23.oracle-ocna.com)
[22:46:57] *** Quits: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 240 seconds)
[22:51:59] *** Quits: k8yun_ (~k8yun@user/k8yun) (Quit: Leaving)
[22:52:47] *** Joins: lungaro (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[22:53:01] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[22:55:41] <b0nn> Not go related, but with fuzzing in the 1.18 release it's relevant :) https://www.fuzzingbook.org/html/WhenToStopFuzzing.html
[22:57:57] *** Quits: dntreou (~yakiza@inet-2a02-6900-8808-e010--23.oracle-ocna.com) (Ping timeout: 240 seconds)
[22:59:16] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[23:01:46] *** Joins: dntreou (~yakiza@105-209-145-202.access.mtnbusiness.co.za)
[23:03:33] *** Joins: todo75 (~todo75@user/todo75)
[23:07:00] <admin123> does anyone know of a WORKING up to date example of a go api that uses postgres?
[23:08:18] <admin123> I ran https://github.com/go-bun/bun-realworld-app but it 404s on the root page
[23:09:14] <b0nn> admin123: can you do some troubleshooting?
[23:09:20] <j416> admin123: that's a very broad question
[23:09:33] <b0nn> eg. can you connect to postgres on the host/port configured in the app
[23:09:39] <admin123> b0nn: I'd love to, but I'm not well versed in go
[23:09:59] <b0nn> if you can, can you check that the database the app is loking for exists in your postgres instance
[23:10:12] <admin123> I believe the database is setup correctly. the migration and tables for this api were created from the project's makefile
[23:10:20] <j416> admin123: start simple, build an API without a database, then build something that uses a database, for example.
[23:10:23] <admin123> b0nn: it exists
[23:10:28] <b0nn> ok, well I've got a few minutes so let's see what we can figure out
[23:10:50] <admin123> j416: it's ridiculous to me that none of the examples are working. so sad.
[23:11:04] <j416> maybe you don't need an example :)
[23:11:16] *** Joins: hub (~hub@user/hub)
[23:11:27] <j416> baby steps.
[23:11:31] <admin123> this task is supposed to take less than 4 hours not 2 days.
[23:11:57] *** Quits: hub (~hub@user/hub) (Remote host closed the connection)
[23:12:02] <j416> it'll take you a lot longer than two days to learn this properly
[23:12:30] *** Quits: pmb (~pmb@89-64-79-51.dynamic.chello.pl) (Quit: pmb)
[23:12:39] *** Joins: hub (~hub@user/hub)
[23:12:40] <j416> make haste slowly
[23:13:02] <b0nn> admin123: it's looking for a config file as per https://github.com/go-bun/bun-realworld-app/blob/9b04b5d46d1b9ddf005ccf3aa187082a42a5ae4a/bunapp/config.go#L30
[23:13:10] <b0nn> have you rpovided one?
[23:13:42] *** Quits: hub (~hub@user/hub) (Remote host closed the connection)
[23:14:15] <admin123> b0nn: no.
[23:14:25] <admin123> that's not in the readme. I can do that now.
[23:15:39] <b0nn> Yeah - they don't mention that they need it, bu I can't see how it finds postgres (save for some hardcoded uri)
[23:19:41] <MD87> At a glance I don't see anything that _should_ be served at the root. Unless I've missed something, it just exposes some API endpoints under /api/*...
[23:20:18] *** Joins: _mikey (~mikey@user/mikey/x-4335048)
[23:20:59] <admin123> MD87: awesome , http://localhost:8000/api/articles works
[23:23:16] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-78d5-e2ea-a2f1-e76e.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[23:23:47] <b0nn> heh, I can't even get past the db migration ( must be the wrong version of postgres - it's not liking the 'generated' keyword
[23:24:03] * b0nn retires to twitter
[23:27:03] <admin123> with the stater-kit example by the same team I get stuck on migrations, trying to change the datamodel to match what I'm being asked to build
[23:27:35] <admin123> but at least it serves webpages
[23:28:32] *** Joins: tommo[m] (~tommodevm@2001:470:69fc:105::1:9654)
[23:37:12] *** Parts: jlindgren (~jlindgren@user/jlindgren) (The Lounge - https://thelounge.chat)
[23:42:20] *** Joins: knusbaum (~knusbaum@2001:470:69fc:105::1:ad6f)
[23:43:09] *** Quits: shka (~herr@109.231.0.226) (Remote host closed the connection)
[23:46:21] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-78d5-e2ea-a2f1-e76e.res6.spectrum.com)
[23:46:30] *** Joins: neurocyte0917090 (~neurocyte@ip-094046064199.dynamic.medianet-world.de)
[23:46:30] *** Quits: neurocyte0917090 (~neurocyte@ip-094046064199.dynamic.medianet-world.de) (Changing host)
[23:46:30] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[23:46:34] *** Quits: todo75 (~todo75@user/todo75) (Quit: todo75)
[23:48:12] *** Parts: opalvaults[m] (~opalvault@2001:470:69fc:105::1:51f6) ()
[23:49:54] *** Joins: shka (~herr@109.231.0.226)
[23:54:59] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
