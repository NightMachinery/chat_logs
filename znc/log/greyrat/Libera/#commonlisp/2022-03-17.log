[00:09:49] <wmblathers> Guest74: My cl-svg library uses some FORMAT craziness to get approximately human-readable output.
[00:10:50] <wmblathers> ~< is useful for this.
[00:16:46] <Demosthenex> Guest74: regarding todo lists, clearly you've never met org-mode with org-capture ;]
[00:16:50] <Guest74> I might look at that.  Currently I  have correct indentation, except that everything is indented 2 spaces, like 2 spaces before <svg
[00:22:00] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[00:22:00] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[00:22:00] *** Joins: tane (~tane@user/tane)
[00:31:16] <hashfuncf39> i'm honestly finding DEFSTRUCT to be far more conveniant than DEFCLASS. since construction seems more trivial as well as printing. my intuition is that you should always use DEFSTRUCT unless you really need DEFCLASS. is this the communities' consensus?
[00:31:17] *** Quits: wacki (~wacki@87.122.86.228) (Quit: Leaving.)
[00:32:19] *** Quits: VincentVega (~user@212.97.4.48) (Ping timeout: 250 seconds)
[00:32:40] *** Joins: VincentV` (~user@212.97.4.48)
[00:33:04] *** Joins: epolanski (uid312403@id-312403.helmsley.irccloud.com)
[00:38:07] <Bike> that's kind of the opposite of the consensus.
[00:38:49] <Bike> the main difficulty is that defstruct definitions can't be redefined. if all you want is the accessor names and printing, you can accomplish that fairly easily with a wrapper around defclass.
[00:39:04] <_death> defclass has many features that can prove convenient, like redefinition protocol or multiple inheritance.. defstruct has some pitfalls, and sometimes its defaults get in the way.. but if it works for you..
[00:39:18] <yitzi> Yeah. Give me defclass or give me death.
[00:40:29] <_death> for example, often you actually don't want to print all slot values of an instance
[00:41:55] <hashfuncf39> oh ok. i can see how the redefinition protocol alone is probably worth switching to just usting DEFCLASS. i haven't used that yet. i thought the recompilation errors of my DEFSTRUCT was just a normal thing i had to deal with
[00:42:03] <_death> I think there was a blog post about this recently.. https://lisper.in/do-you-start-with-a-struct-or-a-class .. anyway, I sometimes start with defclass, sometimes with defstruct, depending on what I think I may need
[00:42:37] <hashfuncf39> ok thanks ya'll
[00:43:36] *** Parts: VincentV` (~user@212.97.4.48) (ERC (IRC client for Emacs 27.2))
[00:44:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[00:45:01] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[00:47:08] <hashfuncf39> interesting find on https://grep.app/ as well: searching "(defstruct" gives 1,823 occurrences vs "(defclass"'s 3,740 occurrences
[00:49:47] *** Quits: attila_lendvai (~alendvai@2a02:ab88:7509:f780:ed82:a496:f55:e07b) (Ping timeout: 256 seconds)
[00:49:56] *** Quits: scymtym (~user@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 245 seconds)
[00:50:16] *** Joins: lisp123 (~lisp123@120.154.103.52)
[00:50:46] *** Quits: Brucio-61 (~Brucio-35@2001:638:504:20e6:6ac3:87e0:e782:f3fc) (Ping timeout: 268 seconds)
[00:54:42] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[00:56:05] *** Joins: kpoeck (~kpoeck@2a01:598:a977:c141:12:94da:5e05:c720)
[00:58:14] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Error from remote client)
[01:00:46] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[01:12:07] *** Joins: scymtym (~user@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:12:18] *** Joins: Brucio-61 (~Brucio-35@ip-094-114-248-079.um31.pools.vodafone-ip.de)
[01:12:35] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[01:14:12] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 240 seconds)
[01:14:36] *** Quits: nature (~nature@45.32.235.173) (Ping timeout: 250 seconds)
[01:18:36] *** Quits: random-nick (~random-ni@87.116.176.196) (Ping timeout: 240 seconds)
[01:19:42] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[01:20:57] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[01:24:38] <Guest74> what's interesting is that's not what it shows for me.
[01:25:46] *** Joins: ski (~ski@remote12.chalmers.se)
[01:28:11] <hashfuncf39> what is it showing for you?
[01:32:06] *** Joins: random-nick (~random-ni@87.116.167.125)
[01:34:17] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[01:35:10] *** Quits: asarch (~asarch@2806:10ae:7:2198:c359:d1ec:eb4b:c2b9) (Quit: Leaving)
[01:35:59] *** Joins: aeth (~aeth@user/aeth)
[01:39:39] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[01:57:59] <Guest74> (defstruct 2441 (defclass 4848
[01:58:58] <hashfuncf39> we must be querying different servers/data-sets
[01:59:23] <hashfuncf39> fwir i don't think it's real-time github data
[01:59:47] <hashfuncf39> and by the likes of it they aren't keeping a very redundant data-set
[01:59:57] <hashfuncf39> *looks of it
[02:02:28] <Guest74> my bad, didn't even check the options. checking common lisp gives me your numbers.
[02:03:10] <Guest74> but the numbers are a bit biased considering the top two for defclass.
[02:04:05] *** Quits: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:04:53] *** Joins: knusbaum (~knusbaum@hpnd-dhcp-173-46-246-97.bloombb.net)
[02:05:57] <hashfuncf39> that's true. still tho, the more examples of the code in-use, the more generally accepted it is the way i see it
[02:08:42] *** Joins: pillton (~user@220-244-86-23.tpgi.com.au)
[02:09:30] <random-nick> what other languages use (defstruct and (defclass? elisp?
[02:11:25] <hashfuncf39> elisp has cl-defstruct (in the built-ing cl package) and defclass (in the built-in eieio package). i've never used them
[02:23:10] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 260 seconds)
[02:23:35] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Ping timeout: 240 seconds)
[02:23:44] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[02:35:35] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[02:36:20] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[02:48:12] *** Quits: hashfuncf39 (~user@2601:5c0:c280:7090:29ba:fcc0:8f3a:efac) (Ping timeout: 240 seconds)
[02:50:24] *** Quits: qhong (~qhong@rescomp-21-400677.stanford.edu) (Read error: Connection reset by peer)
[02:50:34] *** Joins: qhong (~qhong@rescomp-21-400677.stanford.edu)
[02:51:18] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Ping timeout (120 seconds))
[03:11:34] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[03:12:51] *** Quits: epolanski (uid312403@id-312403.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[03:32:00] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[03:33:39] *** Joins: zacque (~zacque@1.32.90.32)
[03:45:32] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[03:49:30] *** Quits: zacque (~zacque@1.32.90.32) (Read error: Connection reset by peer)
[03:53:55] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 268 seconds)
[03:56:41] *** Joins: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340)
[04:02:19] *** Joins: zacque (~zacque@1.32.90.32)
[04:03:38] <qhong> is there a (somewhat) portable defadvice library?
[04:03:59] <qhong> I've long heard that SBCL has fwrapper which can be used to implement defadvice, but I don't know any library doing it
[04:08:51] *** Joins: occ (~occ@user/occ)
[04:17:26] *** Quits: occ (~occ@user/occ) (Ping timeout: 245 seconds)
[04:22:36] *** Joins: occ (~occ@user/occ)
[04:31:20] <pjb> random-nick: any lisp can use defstruct and defclass. Since you can define them as macro in any lisp.
[04:31:25] <pjb> random-nick: this includes even schemes.
[04:32:30] *** Quits: morganw (~user@80.225.24.132) (Remote host closed the connection)
[04:34:26] <pjb> ::notify help
[04:34:27] <Colleen> pjb: Got it. I'll let help know as soon as possible.
[04:34:41] <pjb> ::notify hashfuncf39 you can define your own macro to define classes in a more stereotypal way like defstruct. See for example https://github.com/informatimago/lisp/blob/4bfb6893e7840b748648b749b22078f2facfee0a/common-lisp/cesarum/utility.lisp#L895
[04:34:41] <Colleen> pjb: Got it. I'll let hashfuncf39 know as soon as possible.
[04:41:05] *** Quits: White_Flame (~quassel@user/white-flame/x-6930243) (Remote host closed the connection)
[04:42:18] *** Joins: White_Flame (~quassel@user/white-flame/x-6930243)
[04:44:26] <Xach> qhong: fwrappers is allegro
[04:47:27] *** Quits: random-nick (~random-ni@87.116.167.125) (Ping timeout: 256 seconds)
[04:50:10] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[04:53:40] *** Quits: kpoeck (~kpoeck@2a01:598:a977:c141:12:94da:5e05:c720) (Quit: Client closed)
[05:16:24] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 250 seconds)
[05:20:27] *** Joins: lisp123 (~lisp123@120.154.103.52)
[05:21:59] *** Joins: molson (~molson@172-103-21-94-dynamic.midco.net)
[05:23:51] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[05:25:00] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[05:25:56] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[05:26:36] *** Quits: taiju-sub (~taiju@240b:253:ec40:2400:7839:8326:ccbc:7f0e) (Ping timeout: 240 seconds)
[05:58:51] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 252 seconds)
[06:00:37] *** Joins: aeth (~aeth@user/aeth)
[06:06:02] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:07:11] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Remote host closed the connection)
[06:09:20] *** Joins: Inline__ (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[06:12:13] *** Quits: Inline (~Inline@p200300cd470a26002e72b25ea400e9f0.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:25:53] *** Joins: mixfix41 (~sdenyninn@user/mixfix41)
[06:33:58] *** Quits: occ (~occ@user/occ) (Ping timeout: 250 seconds)
[06:36:51] *** Joins: occ (~occ@user/occ)
[06:43:03] *** Quits: karlosz (~karlosz@47.151.136.69) (Ping timeout: 256 seconds)
[06:43:17] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[06:46:23] *** Joins: karlosz (~karlosz@47.151.136.69)
[06:48:35] *** Joins: taiju-sub (~taiju@240b:253:ec40:2400:7839:8326:ccbc:7f0e)
[07:02:54] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[07:07:02] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[07:09:15] *** Joins: lisp123 (~lisp123@120.154.103.52)
[07:13:32] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 240 seconds)
[07:15:46] *** Quits: triffid (~triffid@gateway/tor-sasl/triffid) (Remote host closed the connection)
[07:30:32] <beach> Good morning everyone!
[07:32:26] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[07:36:59] *** Joins: occ (~occ@user/occ)
[07:39:08] *** Joins: semz_ (~semz@user/semz)
[07:41:34] *** Quits: semz (~semz@user/semz) (Ping timeout: 250 seconds)
[07:46:02] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 240 seconds)
[07:47:36] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[07:53:38] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Read error: Connection reset by peer)
[08:02:27] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[08:09:17] *** Quits: waleee (~waleee@2001:9b0:213:7200:cc36:a556:b1e8:b340) (Ping timeout: 240 seconds)
[08:30:16] *** Joins: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[08:34:36] *** Quits: taiju-sub (~taiju@240b:253:ec40:2400:7839:8326:ccbc:7f0e) (Ping timeout: 240 seconds)
[08:38:18] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: sleep)
[08:39:37] *** Joins: eddof13 (~eddof13@192.154.196.149)
[08:47:41] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[08:55:48] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 240 seconds)
[08:57:25] *** Joins: lisp123 (~lisp123@120.154.103.52)
[09:01:44] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 250 seconds)
[09:08:06] *** Joins: razetime (~quassel@117.193.3.115)
[09:18:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[09:20:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[09:20:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[09:50:43] *** Joins: dongdigua (~Srain@240e:30c:db6:6500:efcc:f35c:900b:be5f)
[09:51:07] *** Parts: dongdigua (~Srain@240e:30c:db6:6500:efcc:f35c:900b:be5f) ()
[09:56:38] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[10:01:23] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[10:01:33] *** Joins: taiju-sub (~taiju@240b:253:ec40:2400:7839:8326:ccbc:7f0e)
[10:03:51] *** Joins: occ (~occ@user/occ)
[10:07:23] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[10:12:32] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 240 seconds)
[10:14:02] *** Quits: razetime (~quassel@117.193.3.115) (Ping timeout: 240 seconds)
[10:19:47] *** Quits: taiju-sub (~taiju@240b:253:ec40:2400:7839:8326:ccbc:7f0e) (Quit: Quit)
[10:22:22] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[10:27:40] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[10:29:17] *** Joins: luchadoritos (~luchadori@2603-800c-1a01-8106-fd05-16af-6837-3809.res6.spectrum.com)
[10:36:57] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[10:37:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[10:38:32] *** Quits: occ (~occ@user/occ) (Ping timeout: 240 seconds)
[10:40:40] <Josh_2> Good morning
[10:41:56] *** Joins: occ (~occ@user/occ)
[10:45:35] *** Joins: lisp123 (~lisp123@120.154.103.52)
[10:50:21] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[10:54:21] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[11:00:38] *** Quits: eddof13 (~eddof13@192.154.196.149) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:09:51] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[11:14:02] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[11:15:38] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:30:15] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 268 seconds)
[11:30:23] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[11:35:25] *** Joins: shka (~herr@109.231.3.55)
[11:44:43] *** Joins: epony (epony@user/epony)
[11:55:26] <froggey> Good morning lispers. I'll see you at ELS :)
[11:57:17] *** Quits: amb007 (~a_bakic@102.215.76.86.rev.sfr.net) (Ping timeout: 240 seconds)
[11:58:06] *** Joins: amb007 (~a_bakic@30.151.22.93.rev.sfr.net)
[11:58:12] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[11:58:50] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[12:01:21] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[12:04:43] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:05:44] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[12:06:51] <beach> froggey: Oh, you will be there?
[12:08:36] <froggey> I will, finally :)
[12:08:43] <beach> Excellent!
[12:08:55] *** Quits: occ (~occ@user/occ) (Read error: Connection reset by peer)
[12:09:12] <beach> You should give a lightning talk.
[12:13:19] <froggey> That's my intent, I'm still sorting things out atm
[12:13:27] <beach> Great!
[12:17:14] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[12:19:15] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:23:09] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[12:24:50] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[12:27:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[12:28:31] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[12:30:06] *** Quits: miique (~miiquemat@2001:470:69fc:105::1:6901) (Quit: You have been kicked for being idle)
[12:32:06] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 252 seconds)
[12:34:23] *** Quits: amb007 (~a_bakic@30.151.22.93.rev.sfr.net) (Ping timeout: 256 seconds)
[12:35:04] *** Joins: amb007 (~a_bakic@208.38.22.93.rev.sfr.net)
[12:40:21] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[12:42:13] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[12:42:35] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[12:44:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Quit: Leaving)
[12:45:31] *** Joins: lisp123 (~lisp123@120.154.103.52)
[12:46:57] *** Quits: luchadoritos (~luchadori@2603-800c-1a01-8106-fd05-16af-6837-3809.res6.spectrum.com) (Ping timeout: 240 seconds)
[12:49:19] *** Joins: rogersm (~rogersm@90.166.180.250)
[12:51:37] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[12:56:47] *** Joins: Cymew (~ante@host-78-79-163-206.mobileonline.telia.com)
[13:08:19] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[13:11:59] <Josh_2> Wheres the primary repo for Bknr datastore?
[13:18:22] *** Joins: lisp123 (~lisp123@120.154.103.52)
[13:26:11] *** Joins: kevingal (~quassel@37.228.248.44)
[13:37:58] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[13:39:20] <lisp123> (get-pro 'bknr)
[13:39:22] <lisp123> > https://github.com/hanshuebner/bknr-datastore
[13:39:29] <lisp123> there you go
[13:40:00] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[13:40:07] *** Quits: Cymew (~ante@host-78-79-163-206.mobileonline.telia.com) (Ping timeout: 256 seconds)
[13:40:26] *** Joins: s-liao (~s-liao@101.86.164.158)
[13:41:02] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[13:52:28] *** Joins: hhdave (~hhdave@ip212.ip-193-70-71.eu)
[13:52:46] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[14:16:14] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:16:24] *** Quits: lisp123 (~lisp123@120.154.103.52) (Remote host closed the connection)
[14:19:01] *** Parts: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1) (Disconnected: Replaced by new connection)
[14:19:51] *** Joins: pranavats (3fba1d1b34@2a00:c70:1:178:170:40:189:1)
[14:21:04] *** Joins: wacki (~wacki@87.123.131.191)
[14:25:53] *** Quits: rogersm (~rogersm@90.166.180.250) (Read error: Connection reset by peer)
[14:26:38] *** Joins: rogersm (~rogersm@90.166.180.250)
[14:32:17] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 240 seconds)
[14:32:56] *** Quits: kevingal (~quassel@37.228.248.44) (Remote host closed the connection)
[14:33:19] *** Joins: nature (~nature@45.32.235.173)
[14:33:36] *** Joins: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se)
[14:42:45] *** Joins: razetime (~quassel@117.207.19.145)
[14:43:19] *** Joins: random-nick (~random-ni@87.116.176.196)
[14:50:48] *** Quits: pillton (~user@220-244-86-23.tpgi.com.au) (Quit: ERC (IRC client for Emacs 27.2))
[14:54:39] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[14:56:45] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[15:01:24] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:03:22] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 260 seconds)
[15:03:56] *** Joins: razetime (~quassel@117.207.19.145)
[15:06:48] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:23:43] *** Joins: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925)
[15:26:27] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 252 seconds)
[15:36:33] *** Joins: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu)
[15:36:39] <flip214> I need a name for a function that goes through a list and returns (values (remove-if pred list) (all other items))
[15:36:57] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[15:37:07] <flip214> split-sequence is already taken, sort is taken... perhaps remove-if*
[15:37:17] <flip214> because it just returns a second value?
[15:43:22] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Ping timeout (120 seconds))
[15:43:47] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:51:40] <shka> flip214: divide-if
[15:52:02] <flip214> shka: ah, thanks!
[15:52:51] <shka> well, it is just my suggestion, but it makes sense for me at least
[15:55:23] <yitzi> flip214: partition-if?
[15:56:24] <flip214> yitzi: also good...
[15:56:40] <flip214> hmmm, divide may have a bit of numbers in it, which might mislead here
[15:56:52] <yitzi> If I understand what you are doing that is what it is called in set theory.
[15:57:32] <flip214> yeah, right
[15:57:44] <flip214> well, I'll blame you both in the comment ;)
[15:58:54] <yitzi> Ohhhhh...a comment mention! Fuel for a future academic paper that scrapes comments from CL code?
[15:59:31] <beach> Bah!  Eclector already does that.
[15:59:58] <jackdaniel> nano also allows to scrap comments from CL code :)
[16:00:30] <jackdaniel> manually, but hey! it still does
[16:00:38] <drbluefall> Can't you just use a half-decent regex?
[16:01:26] <yitzi> Ha! I meant more not the method of scraping, but a paper that lists the scraped comments like some kind or archeological dig. ;)
[16:01:27] <jackdaniel> proper parsing (like with eclector) allows you to associate the comment with its parent node
[16:02:00] <jackdaniel> (i.e for consumption by another program)
[16:02:11] <drbluefall> yitzi: ah :P
[16:08:38] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Remote host closed the connection)
[16:08:52] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[16:10:48] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[16:25:45] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[16:26:43] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 256 seconds)
[16:29:01] *** Quits: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl) (Quit: WeeChat 3.4)
[16:34:15] *** Quits: anticomputer (~anticompu@gateway/tor-sasl/anticomputer) (Ping timeout: 240 seconds)
[16:38:00] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:38:18] *** Joins: anticomputer (~anticompu@gateway/tor-sasl/anticomputer)
[16:39:36] *** Joins: razetime (~quassel@117.254.35.217)
[16:42:56] *** Joins: Bike (~Glossina@71.69.170.70)
[16:54:07] *** Joins: waleee (~waleee@h-98-128-228-119.NA.cust.bahnhof.se)
[16:56:02] *** Quits: attila_lendvai (~alendvai@catv-89-132-245-188.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[17:02:34] *** Joins: aartaka (aartaka@gateway/vpn/protonvpn/aartaka)
[17:10:37] <mfiano> flip214: sounds like serapeum:batches iirc
[17:12:23] <mfiano> Ah nope, it is serapeum:partition. I always mix those two up
[17:18:37] <flip214> mfiano: ack, thanks
[17:29:51] *** Joins: szkl (uid110435@id-110435.uxbridge.irccloud.com)
[17:40:12] *** Quits: razetime (~quassel@117.254.35.217) (Ping timeout: 240 seconds)
[17:40:46] *** Joins: razetime (~quassel@117.254.35.21)
[17:47:59] *** semz_ is now known as semz
[17:48:06] *** Quits: razetime (~quassel@117.254.35.21) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:48:36] *** Joins: cage (~cage@dynamic-adsl-94-34-137-6.clienti.tiscali.it)
[17:58:32] *** Quits: amb007 (~a_bakic@208.38.22.93.rev.sfr.net) (Ping timeout: 240 seconds)
[17:58:51] *** Joins: amb007 (~a_bakic@208.38.22.93.rev.sfr.net)
[18:07:28] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[18:11:47] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Quit: WeeChat 3.4)
[18:17:35] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[18:24:16] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[18:28:17] *** Joins: razetime (~quassel@117.254.35.21)
[18:31:02] *** Quits: taiju (~user@240b:253:ec40:2400:b7d1:436e:2d61:e925) (Ping timeout: 240 seconds)
[18:31:23] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[18:33:03] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[18:34:47] *** Quits: light (~light@user/light) (Ping timeout: 256 seconds)
[18:37:51] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 252 seconds)
[18:41:58] *** Joins: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com)
[18:44:10] *** Joins: _73 (~user@pool-108-49-252-36.bstnma.fios.verizon.net)
[18:44:16] *** Joins: light (~light@user/light)
[18:44:18] *** Joins: kpoeck (~kpoeck@80.149.96.222)
[18:47:27] <_73> I wrote this macro DEFCLOSURE that works as intended to give a function name to a lexical closure while allowing a docstring. I have heard that in CL you should never need to use EVAL but I have not been able to come up with a way to get rid of the EVAL in this macro. How could I get rid of this EVAL? (I added the code for PARSE-BODY from ALEXANDRIA because my macro uses it) http://dpaste.com/GKEXZBJPY
[18:49:46] *** Quits: Cymew (~ante@c-0c87225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 250 seconds)
[18:49:51] <Bike> _73: parse the body at macroexpansion time, not runtime
[18:50:39] <_73> ok Ill try that.
[18:51:33] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[18:52:55] *** Quits: razetime (~quassel@117.254.35.21) (Ping timeout: 256 seconds)
[18:53:29] *** Quits: X-Scale (~ARM@89.214.146.27) (Ping timeout: 256 seconds)
[18:53:29] *** X-Scale` is now known as X-Scale
[18:53:59] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[18:54:06] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[18:56:03] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[18:58:42] <_73> Got it thanks. It certainely makes more sense to parse the body at macroexpansion time. http://dpaste.com/62YYP7SPK
[18:58:54] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[18:59:43] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[18:59:53] <beach> What does it do that you can't do with DEFUN?
[19:00:13] <beach> Also, why do you not accept names like (SETF <symbol>)?
[19:02:55] <_73> ctrl-f dlambda - https://letoverlambda.com/index.cl/guest/chap5.html
[19:03:32] <_73> I am using dlambda from the let-over-lambda book and the author uses this pattern so I extracted it into a macro.
[19:04:13] <beach> Can you summarize that for me so i don't have to read the entire thing?
[19:04:27] <beach> I haven't read that book.
[19:04:43] <beach> But I also don't see what your macro can do that DEFUN can't.
[19:05:53] <pjb> _73: see flet and labels !
[19:06:20] <pjb> (flet ((foo (x) "Return the successor of the number X" (1+ x))) (foo 42)) #| --> 43 |#
[19:06:54] <pjb> (funcall (let ((increment 3)) (flet ((foo (x) "Return the INCREMENT'th successor of the number X" (+ x increment))) (function foo))) 42) #| --> 45 |#
[19:07:00] <pjb> _73: ^
[19:07:42] <_73> Dlambda stands for `destructuring lambda` and lets you write a lambda with dynamic dispatch. `(DLAMBDA (:foo (n1 n2) ...) (:bar (&optional bar) (...)) ...)`. SO I can dynamically dispatch different functions with different lambda lists based on a keyword specifier.
[19:07:52] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:07:54] *** Joins: razetime (~quassel@117.207.19.145)
[19:07:56] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:08:19] <_73> If I used DEFUN I would have to funcall the DEFUN'd function to get the lambda out.
[19:08:36] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:08:39] <pjb> _73: just like flet: (flet ((foo (n1 n2) …) (bar (&optional bar) …) …)  (list (foo 1 2) (bar) (bar 3)))
[19:09:02] <pjb> _73: why are you writing or using macros that don't bring anything new to the table?
[19:09:06] *** Joins: X-Scale` (~ARM@89.214.146.79)
[19:09:15] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:09:42] *** Quits: X-Scale (~ARM@219.206.137.78.rev.vodafone.pt) (Ping timeout: 272 seconds)
[19:09:43] *** X-Scale` is now known as X-Scale
[19:09:55] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[19:10:11] <beach> _73: OK.
[19:11:00] <_73> pjb: I don't see how using flet and labels is the same as dlambda.
[19:12:20] <beach> _73: Also, there is no such thing as "a LAMBDA".  There is "a LAMBDA expression", and there are functions.
[19:13:35] <beach> And what is the BODY argument to PARSE-BODY anyway?
[19:14:15] <beach> Wouldn't that be a list of forms possibly starting with some documentation and some declarations?
[19:15:09] <beach> _73: If that is the case, then BODY is not a form.
[19:16:11] <_73> beach: No it an expression that returns a function (with dlambda), with an optional docstring.
[19:16:21] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 252 seconds)
[19:16:25] <_73> Here is an actual use of the macro http://dpaste.com/GKZ6PNDUH
[19:17:19] <beach> How does a form take an optional docstring?
[19:17:54] <beach> I can see how an expression does if it is the body of a function, but I can't see a form taking an optional docstring.
[19:18:44] <_73> Ok I see your problem is my docstring. I will improve it.
[19:18:49] <_73> thanks
[19:18:53] <beach> Sure.
[19:19:36] *** Quits: Guest74 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[19:22:30] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[19:23:22] *** Joins: Guest50 (~Guest50@2601:283:4401:1ba0:5dc0:256b:cd4f:84fe)
[19:25:02] *** Quits: Guest50 (~Guest50@2601:283:4401:1ba0:5dc0:256b:cd4f:84fe) (Client Quit)
[19:25:47] *** Quits: ryanbw (~ryanbw@mab.sdf.org) (Remote host closed the connection)
[19:26:29] *** Quits: tyson2 (~user@cpe688f2ec1f9b3-cm688f2ec1f9b0.sdns.net.rogers.com) (Remote host closed the connection)
[19:39:19] *** Quits: szkl (uid110435@id-110435.uxbridge.irccloud.com) (Quit: Connection closed for inactivity)
[19:49:17] <pjb> _73: https://termbin.com/wj7q
[19:49:29] <pjb> _73: also,  you can just use CLOS, which is equivalent.
[19:49:52] *** Joins: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com)
[19:50:03] *** Quits: mfiano (~mfiano@cpe-67-240-71-179.nycap.res.rr.com) (Client Quit)
[19:54:07] <pjb> _73: https://termbin.com/cykh
[20:03:11] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 256 seconds)
[20:11:29] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[20:11:58] *** Joins: Guest7423 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:14:40] <_73> pjb: I see now. I still think defclosure and dlambda are more convienent though. Also I want to be able to say (symbol-table :entry-p "foo") instead of (entry-p "foo") for example because I have many of these tables and they all have an :ENTRY-P function so I would need to do extra namespace management.
[20:16:12] *** Quits: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net) (Ping timeout: 240 seconds)
[20:17:36] <_73> You're solution requires more namespace management in general.
[20:18:29] *** Joins: karlosz (~karlosz@47.151.136.69)
[20:19:14] *** Joins: Devon (~devon@c-69-138-77-21.hsd1.va.comcast.net)
[20:24:09] *** Quits: Josh_2 (~user@197.185.99.223) (Read error: Connection reset by peer)
[20:25:06] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 252 seconds)
[20:26:27] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[20:27:09] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:28:25] *** Joins: morganw (~user@80.225.24.132)
[20:31:37] *** Quits: Guest7423 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[20:35:44] *** Joins: Guest7414 (~Guest74@modemcable110.164-177-173.mc.videotron.ca)
[20:43:01] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 240 seconds)
[20:45:24] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[20:47:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:53:42] *** Quits: razetime (~quassel@117.207.19.145) (Ping timeout: 252 seconds)
[20:56:41] <jasom> _73: CLOS lets you do that with eql specializers
[20:59:51] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Ping timeout: 256 seconds)
[21:00:37] *** Quits: Nilby (Nilby@2600:3c01::f03c:92ff:feeb:88ff) (Ping timeout: 240 seconds)
[21:01:02] *** Quits: mixfix41 (~sdenyninn@user/mixfix41) (Ping timeout: 240 seconds)
[21:02:56] *** Joins: ldb (~user@user/ldb)
[21:12:31] *** Quits: kpoeck (~kpoeck@80.149.96.222) (Quit: Client closed)
[21:18:19] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[21:20:08] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:24:01] *** Joins: karlosz (~karlosz@47.151.136.69)
[21:27:41] *** Joins: rogersm (~rogersm@90.166.180.250)
[21:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[21:30:54] *** Joins: ns12 (~ns12@user/ns12)
[21:42:53] *** Quits: Guest7414 (~Guest74@modemcable110.164-177-173.mc.videotron.ca) (Quit: Connection closed)
[21:50:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[21:51:33] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[21:52:38] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[21:57:05] *** Joins: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net)
[22:00:41] *** Joins: lisp123 (~lisp123@120.154.103.52)
[22:05:11] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 252 seconds)
[22:06:41] *** Inline__ is now known as Inline
[22:06:51] *** Quits: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de) (Quit: Leaving)
[22:12:04] *** Quits: karlosz (~karlosz@47.151.136.69) (Quit: karlosz)
[22:16:14] *** Quits: ldb (~user@user/ldb) (Quit: ERC (IRC client for Emacs 27.2))
[22:26:32] *** Quits: amb007 (~a_bakic@208.38.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[22:27:11] *** Joins: amb007 (~a_bakic@102.215.76.86.rev.sfr.net)
[22:37:33] *** Quits: Fade (fade@outrider.deepsky.com) (Quit: leaving)
[22:38:48] *** Joins: Inline (~Inline@p200300cd470bec006530e405655b2087.dip0.t-ipconnect.de)
[22:48:41] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Ping timeout: 245 seconds)
[22:50:45] *** Joins: fade (fade@outrider.deepsky.com)
[22:51:30] *** fade is now known as Fade
[22:51:34] *** Joins: Dynom (~niels@80-114-12-206.cable.dynamic.v4.ziggo.nl)
[22:56:01] *** Quits: mgl (~mgl@cpc87455-finc19-2-0-cust234.4-2.cable.virginm.net) (Quit: Client closed)
[22:58:11] *** Joins: karlosz (~karlosz@47.151.136.69)
[23:00:44] *** Quits: karlosz (~karlosz@47.151.136.69) (Client Quit)
[23:03:40] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:05:05] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 256 seconds)
[23:05:40] *** Joins: kpoeck (~kpoeck@2a01:598:91b8:b3ce:a594:8248:c614:7311)
[23:06:43] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:06:53] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Remote host closed the connection)
[23:07:14] *** Joins: zacque (~zacque@1.32.90.32)
[23:09:08] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[23:12:17] *** Joins: aeth_ (~aeth@user/aeth)
[23:12:17] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:12:20] *** aeth_ is now known as aeth
[23:12:54] <zacque> Is this a bug in slime? I tried invoking (slime-eval '(+ 1 2)) from Elisp but got an error: symbol + not found.
[23:13:21] <zacque> To make it work, I have to invoke like (slime-eval '(cl:+ 1 2))
[23:15:27] <zacque> Also, I'm not sure how to pass the optional PACKAGE argument. Both of these fail to work: (slime-eval '(+ 1 2) "CL-USER") and (slime-eval '(+ 1 2) 'cl)
[23:21:15] <_death> it's not a bug.. slime-eval is not really intended for use outside slime's needs.. you can read the docstring for slime-rex to get more details on how it works
[23:22:24] *** Joins: lisp123 (~lisp123@120.154.103.52)
[23:27:11] *** Quits: lisp123 (~lisp123@120.154.103.52) (Ping timeout: 256 seconds)
[23:27:17] <zacque> Oic, I thought it's a "public" function with a single dash in its name
[23:28:22] <_death> it is.. you can use it within its limitations
[23:31:40] *** Joins: aeth_ (~aeth@user/aeth)
[23:31:41] *** Quits: aeth (~aeth@user/aeth) (Killed (NickServ (GHOST command used by aeth_)))
[23:31:43] *** aeth_ is now known as aeth
[23:32:43] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[23:33:42] <zacque> Hmmm, ok...
[23:33:45] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[23:33:47] *** Joins: Everything (~Everythin@37.115.210.35)
[23:33:59] *** Lord_of_Life_ is now known as Lord_of_Life
[23:34:42] *** Quits: kpoeck (~kpoeck@2a01:598:91b8:b3ce:a594:8248:c614:7311) (Quit: Client closed)
[23:38:02] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
[23:38:44] <_death> you give an elisp datum and it "magically" translates it to a CL form.. if you want to give an arbitrary (but readable) CL form, you can give it `(cl:eval (cl:read-from-string ,cl-form-as-string)) .. it has another limitation in the other direction, in the way of result.. so you can also add a cl:prin1-to-string.. but then you need some way to interpret it
[23:39:31] <_death> (also handle multiple values)
[23:41:17] *** Quits: aartaka (aartaka@gateway/vpn/protonvpn/aartaka) (Ping timeout: 240 seconds)
[23:44:14] <etimmons> luis: I just discovered that some links on https://cffi.common-lisp.dev/ got broken by the move to common-lisp.dev. All the origin-relative URLs should be directory-relative instead.
[23:47:12] <zacque> _death: You meant like this: (slime-send '(cl:eval (cl:read-from-string "(+ 1 2)")))?
[23:47:35] <zacque> But it crashes my swank server right away
[23:49:21] <Devon> zacque: Try slime-eval instead of slime-send
[23:50:18] <Devon> E.g., (slime-eval `(cl:eval (cl:read-from-string ,(format "%S" sexp))))
[23:50:31] <zacque> Ah, that works
[23:50:48] <zacque> Thanks, was in the middle of trying slime-send just now
[23:51:10] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[23:51:28] <Devon> Ha, if you want to use the unspeakable on-the-wire protocol.
[23:52:36] *** Quits: wacki (~wacki@87.123.131.191) (Quit: Leaving.)
[23:53:43] <zacque> Who knows, it might work... Haha
[23:54:31] <Devon> Wrap in it `(cl:let ((cl:*package* (cl:find-package ,(or package (slime-current-package))))) #)
[23:56:45] <zacque> Oic..
[23:57:04] <Devon> Call it something like slime-eval*
[23:57:24] <zacque> Looks like that suppose to be what I expect slime-eval to work
[23:57:58] <zacque> Much like swank:eval-in-emacs which is very intuitive
[23:58:17] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 240 seconds)
