[00:02:19] *** Joins: ahc (~ahc@121.98.229.241)
[01:02:40] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 264 seconds)
[01:10:14] *** Quits: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com) (*.net *.split)
[01:10:14] *** Quits: makomo (~makomo@user/makomo) (*.net *.split)
[01:10:16] *** Quits: anddam (~anddam@user/anddam) (*.net *.split)
[01:10:16] *** Quits: sts-q (~sts-q@212.53.219.178) (*.net *.split)
[01:10:17] *** Quits: gko (~user@user/gko) (*.net *.split)
[01:10:17] *** Quits: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au) (*.net *.split)
[01:10:17] *** Quits: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr) (*.net *.split)
[01:10:18] *** Quits: sgithens (sid10659@helmsley.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[01:10:18] *** Quits: commandoline (~commandol@ubuntu/member/commandoline) (*.net *.split)
[01:10:19] *** Quits: GreaseMonkey (greaser@user/greasemonkey) (*.net *.split)
[01:10:19] *** Quits: Gnuxie (~gnuxie@user/gnuxie) (*.net *.split)
[01:10:19] *** Quits: etimmons (~etimmons@2001:470:69fc:105::5d5) (*.net *.split)
[01:10:19] *** Quits: bldr (~bull@185.117.72.168) (*.net *.split)
[01:10:19] *** Quits: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se) (*.net *.split)
[01:10:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:10:20] *** Quits: copec (~copec@schrodbox.unaen.org) (*.net *.split)
[01:10:20] *** Quits: |3b| (bbb@user/3b/x-2324788) (*.net *.split)
[01:10:20] *** Quits: Jing (~hedgehog@125.105.11.101) (*.net *.split)
[01:10:21] *** Quits: emacsomancer (~emacsoman@136.60.128.68) (*.net *.split)
[01:10:21] *** Quits: lagash (lagash@lagash.shelltalk.net) (*.net *.split)
[01:10:22] *** Quits: ogamita (~t@hubble.informatimago.com) (*.net *.split)
[01:10:22] *** Quits: phoe (~phoe@user/phoe) (*.net *.split)
[01:10:22] *** Quits: jfb4 (~jfb4@178.62.2.68) (*.net *.split)
[01:10:23] *** Quits: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net) (*.net *.split)
[01:10:23] *** Quits: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com) (*.net *.split)
[01:10:23] *** Quits: pjb (~pjb@user/pjb) (*.net *.split)
[01:10:23] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (*.net *.split)
[01:10:24] *** Quits: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof) (*.net *.split)
[01:10:24] *** Quits: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net) (*.net *.split)
[01:10:24] *** Quits: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de) (*.net *.split)
[01:10:25] *** Quits: conjunctive (sid433686@id-433686.helmsley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f) (*.net *.split)
[01:10:26] *** Quits: Kabriel (~Kabriel@user/kabriel) (*.net *.split)
[01:10:26] *** Quits: lonjil (~quassel@user/lonjil) (*.net *.split)
[01:10:27] *** Quits: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0) (*.net *.split)
[01:10:27] *** Quits: Riviera (Riviera@user/riviera) (*.net *.split)
[01:10:28] *** Quits: antoszka-r (~antoni@rozalia.antoszka.pl) (*.net *.split)
[01:10:28] *** Quits: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com) (*.net *.split)
[01:10:29] *** Quits: sepanko (~sepanko@user/sepanko) (*.net *.split)
[01:10:30] *** Quits: ChanServ (ChanServ@services.libera.chat) (*.net *.split)
[01:10:30] *** Quits: ahc (~ahc@121.98.229.241) (*.net *.split)
[01:10:30] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (*.net *.split)
[01:12:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[01:14:13] *** Joins: ahc (~ahc@121.98.229.241)
[01:14:13] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[01:14:13] *** Joins: makomo (~makomo@user/makomo)
[01:14:13] *** Joins: copec (~copec@schrodbox.unaen.org)
[01:14:13] *** Joins: |3b| (bbb@user/3b/x-2324788)
[01:14:13] *** Joins: MetaYan_ (~MetaYan@c-7b5d235c.07-84-7462671.bbcust.telenor.se)
[01:14:13] *** Joins: bldr (~bull@185.117.72.168)
[01:14:13] *** Joins: sts-q (~sts-q@212.53.219.178)
[01:14:13] *** Joins: anddam (~anddam@user/anddam)
[01:14:13] *** Joins: Jing (~hedgehog@125.105.11.101)
[01:14:13] *** Joins: lagash (lagash@lagash.shelltalk.net)
[01:14:13] *** Joins: gko (~user@user/gko)
[01:14:13] *** Joins: CrashTestDummy2 (~CrashTest@ool-ad02813b.dyn.optonline.net)
[01:14:13] *** Joins: pedro-delfino (sid507296@id-507296.helmsley.irccloud.com)
[01:14:13] *** Joins: conjunctive (sid433686@id-433686.helmsley.irccloud.com)
[01:14:13] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[01:14:13] *** Joins: seok (~Seok@n114-73-75-18.bla3.nsw.optusnet.com.au)
[01:14:13] *** Joins: pjb (~pjb@user/pjb)
[01:14:13] *** Joins: beach (~user@lfbn-bor-1-466-226.w86-213.abo.wanadoo.fr)
[01:14:13] *** Joins: ogamita (~t@hubble.informatimago.com)
[01:14:13] *** Joins: sgithens (sid10659@helmsley.irccloud.com)
[01:14:13] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[01:14:13] *** Joins: commandoline (~commandol@ubuntu/member/commandoline)
[01:14:13] *** Joins: GreaseMonkey (greaser@user/greasemonkey)
[01:14:13] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[01:14:13] *** Joins: Gnuxie (~gnuxie@user/gnuxie)
[01:14:13] *** Joins: Duuqnd (~duuqnd@2001:470:69fc:105::e9c0)
[01:14:13] *** Joins: sepanko (~sepanko@user/sepanko)
[01:14:13] *** Joins: etimmons (~etimmons@2001:470:69fc:105::5d5)
[01:14:13] *** Joins: CodeBitCookie[m] (~code-bit-@2001:470:69fc:105::a2f)
[01:14:13] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:14:13] *** Joins: ChanServ (ChanServ@services.libera.chat)
[01:14:13] *** Joins: antoszka-r (~antoni@rozalia.antoszka.pl)
[01:14:13] *** Joins: lonjil (~quassel@user/lonjil)
[01:14:13] *** Joins: Riviera (Riviera@user/riviera)
[01:14:13] *** Joins: Kabriel (~Kabriel@user/kabriel)
[01:14:13] *** Joins: madnificent (~madnifice@static.210.74.63.178.clients.your-server.de)
[01:14:13] *** Joins: mns (~mns@c-73-119-178-157.hsd1.ma.comcast.net)
[01:14:13] *** Joins: fiddlerwoaroof (~fiddlerwo@user/fiddlerwoaroof)
[01:14:13] *** Joins: jfb4 (~jfb4@178.62.2.68)
[01:14:13] *** Joins: emacsomancer (~emacsoman@136.60.128.68)
[01:14:13] *** Joins: phoe (~phoe@user/phoe)
[01:14:13] *** strontium.libera.chat sets mode: +o ChanServ
[01:14:29] *** Quits: lucerne (~lucerne@ip202.ip-51-178-215.eu) (Max SendQ exceeded)
[01:14:41] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[02:26:30] *** Joins: dra (~dra@2a04:4540:6417:fd00:95b5:5aa6:2917:4089)
[02:35:27] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[02:43:26] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[03:21:13] *** Quits: dra (~dra@2a04:4540:6417:fd00:95b5:5aa6:2917:4089) (Quit: Leaving)
[03:41:52] *** Joins: Oladon (~olad@98.43.81.226)
[03:50:23] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:51:45] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[03:51:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[04:42:16] *** Quits: random-nick (~random-ni@87.116.165.83) (Ping timeout: 264 seconds)
[05:23:54] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[05:29:09] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[05:57:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:04:05] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[07:24:31] *** Quits: sts-q (~sts-q@212.53.219.178) (Ping timeout: 245 seconds)
[07:40:47] *** Joins: sts-q (~sts-q@91.200.108.149)
[07:45:52] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 264 seconds)
[08:45:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[08:50:10] *** Quits: waleee (~waleee@h-82-196-111-63.NA.cust.bahnhof.se) (Quit: WeeChat 3.3)
[09:29:52] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[09:47:01] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[09:56:11] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Remote host closed the connection)
[09:56:29] *** Joins: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8)
[11:18:38] *** Quits: makomo (~makomo@user/makomo) (Ping timeout: 252 seconds)
[12:09:31] <CodeBitCookie[m]> pjb: why would I want to do that?
[12:14:46] <CodeBitCookie[m]> If I want one function which I happen to need in the imperative style of programming, you can't just say that I want to fully code my application in a functional style or reject the imperative way. You posed a solution that required recursion. Is that why you are saying this? Also didn't you say a few months ago that common lisp doesn't lock you down to any one style of programming like Clojure does?
[12:18:36] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[12:20:09] <CodeBitCookie[m]> pjb: Anyways, it doesn't matter, I was just asking if a function like reduce could do it but I wasn't able to solve my problem with the functions built in because of the lack of my knowledge in this programming language. Thanks for your and beach's solution, which I respect. I won't be creating a library or especially using a functional style to program. Although I think using functional programming when it is more practical or easier
[12:20:09] <CodeBitCookie[m]> to solve a problem than with an imperative style is fine. 
[12:21:58] <CodeBitCookie[m]> pjb: The only reason I pointed out that your solution uses recursion is because I really wanted performance but that doesn't matter since, as you pointed out, most implementations will compile that into iterations to make it more performant. I will use your solution in conjunction with other solutions I come up with. Thank you for you help.
[13:02:49] *** Joins: lisp123 (~lisp123@5.30.23.247)
[13:16:49] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[13:27:21] *** Joins: treflip (~user@95.79.32.99)
[13:27:37] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:42:11] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[13:43:58] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[13:48:47] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Ping timeout: 252 seconds)
[14:34:28] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[14:39:55] *** Joins: winning-luser (~winning-l@2601:8c1:80:70d0::756)
[14:43:22] <winning-luser> i want to be able to type (f 'append) instead of #'append because the latter is painful for me to type, is there a way to create a "aliases" for special operators like FUNCTION?
[14:47:26] <pjb> winning-luser: I type: (f (function append)) instead.
[14:47:38] <pjb> winning-luser: macros can alias special operators.
[14:49:28] <pjb> (defmacro ƒ (name) `(function ,name)) (mapcar (ƒ list) '(1 2 3) '(a b c)) #| --> ((1 a) (2 b) (3 c)) |# 
[14:52:13] <winning-luser> thats a very simple approach, cool. thanks pjb 
[15:30:52] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[15:46:47] *** Joins: random-nick (~random-ni@87.116.165.83)
[15:55:04] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[16:16:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[17:09:20] *** Joins: kingofcsu (~kingofcsu@123.118.74.105)
[17:36:16] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 264 seconds)
[17:38:10] *** Joins: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se)
[17:40:55] *** Joins: lisp123 (~lisp123@5.30.23.247)
[17:44:51] *** Quits: waleee (~waleee@h-82-196-111-63.na.cust.bahnhof.se) (Ping timeout: 256 seconds)
[17:45:25] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 256 seconds)
[17:46:26] <CodeBitCookie[m]> Hello everyone, 
[17:47:11] <CodeBitCookie[m]> so I want to send keyboard and mouse input automatically with Common Lisp. Is there any way you suggest that I go about this?
[17:48:03] <CodeBitCookie[m]> I would prefer if there were a cross platform solution but if the library depends on Xorg or Windows only stuff then that's fine too. 
[17:48:29] <CodeBitCookie[m]> I did read a few outdated blogs.
[17:51:48] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:15:32] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 252 seconds)
[18:22:15] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:23:42] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[18:24:22] *** Joins: lisp123 (~lisp123@5.30.23.247)
[18:27:20] *** Quits: kingofcsu (~kingofcsu@123.118.74.105) (Remote host closed the connection)
[18:46:13] *** Joins: antoszka (uid528518@id-528518.uxbridge.irccloud.com)
[18:51:05] <beach> CodeBitCookie[m]: You can use McCLIM for stuff like that.
[18:53:49] <etimmons> beach: It sounds like CodeBitCookie wants to send mouse and keyboard events to other programs from Common Lisp
[18:55:56] <beach> Oh, sorry.  Misunderstood. 
[18:58:42] *** Joins: x88x88x (~cheeg@gateway/vpn/pia/x88x88x)
[19:06:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[19:14:52] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[19:14:54] <CodeBitCookie[m]> Yup np… so no one really knows.
[19:15:11] <CodeBitCookie[m]> s/./?/
[19:19:14] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[19:28:23] *** Joins: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca)
[19:34:57] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[19:42:48] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[19:56:49] *** Quits: mfiano (~mfiano@li1282-157.members.linode.com) (Ping timeout: 268 seconds)
[20:04:40] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[20:12:08] *** Joins: plexi_ (~orcabot@digital.sanctuary.org)
[20:13:47] *** Joins: mala (~mala@user/malaclyps)
[20:14:30] *** Quits: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: plexi (~orcabot@digital.sanctuary.org) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: chealjo (~nimiux@freeshell.de) (Ping timeout: 256 seconds)
[20:14:34] *** Joins: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:15:01] *** Quits: x88x88x (~cheeg@gateway/vpn/pia/x88x88x) (Ping timeout: 256 seconds)
[20:15:04] *** Quits: malaclyps (~mala@user/malaclyps) (Ping timeout: 256 seconds)
[20:16:01] *** Joins: chealjo (~nimiux@freeshell.de)
[20:16:08] *** Joins: plexi (~orcabot@digital.sanctuary.org)
[20:18:25] *** Quits: plexi_ (~orcabot@digital.sanctuary.org) (Ping timeout: 256 seconds)
[20:18:25] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[20:18:59] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 256 seconds)
[20:27:35] *** Joins: makomo (~makomo@user/makomo)
[20:53:03] *** Joins: Oladon (~olad@98.43.81.226)
[20:56:15] *** Joins: st_iron (uid370243@id-370243.uxbridge.irccloud.com)
[21:17:34] *** Quits: tyson2 (~user@bras-base-toroon0628w-grc-46-142-112-141-177.dsl.bell.ca) (Remote host closed the connection)
[21:23:49] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[21:42:43] *** Quits: treflip (~user@95.79.32.99) (Quit: good night)
[22:14:05] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Quit: WeeChat 3.3)
[22:17:02] *** Joins: tyson2 (~user@cpe00fc8d34ff03-cm00fc8d34ff00.sdns.net.rogers.com)
[22:17:08] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[22:29:11] *** Joins: rotateq (~user@p200300e7871bd300c158d62dc7544d08.dip0.t-ipconnect.de)
[22:36:13] <pjb> CodeBitCookie[m]: it's not a lisp question, it's a question for your GUI toolbox.
[22:36:48] <pjb> CodeBitCookie[m]: or even, non-GUI toolbox. There are extensions to the terminal protocol that let us send mouse position and click thru the terminal.
[22:37:20] <CodeBitCookie[m]> like "xdotool"?
[22:37:38] <CodeBitCookie[m]> https://www.semicomplete.com/projects/xdotool/
[22:37:52] <pjb> CodeBitCookie[m]: to insert "keyboard" even to a tty program you'd have to have write access to the tty connected to that program stdin, and merely write ASCII codes or sequences to it.
[22:38:00] <pjb> CodeBitCookie[m]: who said you used X11?
[22:38:54] <pjb> CodeBitCookie[m]: https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/EventOverview/EventArchitecture/EventArchitecture.html
[22:40:30] *** Joins: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de)
[22:40:45] <CodeBitCookie[m]> pjb: Can you point me to where I can read more on how to do this with lisp or any programming language in general? Thanks.
[22:42:15] <CodeBitCookie[m]> As in, do this with a non-tty program.
[22:42:53] <CodeBitCookie[m]> and i am also talking about cursor input.
[22:43:27] <CodeBitCookie[m]> ...since you cleared up my problem with keyboard input(?)
[22:43:58] <pjb> CodeBitCookie[m]: again, you must identify the GUI toolkit used.  Then you must read the documentation of this GUI toolkit, and study it's API, which can be defined in various languages, C, C++, Java, Objective-C, Kotlin, Swift, etc.
[22:44:23] <pjb> CodeBitCookie[m]: then you must learn how you can communicate with this toolkit, either only thru FFI, or thru some bus, like dbus or other.
[22:44:42] <pjb> Then you will have to write the lisp code to interface with it, and to send the right messages.
[22:44:51] <CodeBitCookie[m]> pjb: I am talking about no application, just general keyboard and mouse input. For E.g like an auto-clicker.
[22:45:07] <pjb> Exactly.
[22:46:00] <pjb> Those GUI events are not managed by the OS.  The OS has notions of file, process, memory maps, semaphores, network sockets, stuff like that.
[22:46:10] <pjb> Not of keyboard events or mouse clicks.
[22:46:27] <CodeBitCookie[m]> pjb: suppose I just want to create a general auto-clicker without any link to a program. I just say, "go to 100,100 px and click", the mouse then blindly follows my orders on the screen without care of what program is run
[22:46:35] <pjb> There may be devices to get data from keyboards or mice peripherals, but this is not managed by the OS.
[22:47:12] <pjb> This is not possible.  In most cases, if you don't have a program, you don't have a GUI.
[22:48:18] <pjb> In some particular cases, you may have an independent window server, for example, with display postscript, and then you would use postscript to write code to manage such "events", but applications didn't go thru the display postscript window manager.
[22:48:26] <CodeBitCookie[m]> pjb: I think there is a little misunderstanding between us, I (think I) never specified I would have to have a GUI or that it HAS to be managed by the OS
[22:49:08] <CodeBitCookie[m]> pjb: yes like Window Systems.
[22:49:14] <pjb> Then what you could do, is to write two virtual device drivers, one using the keyboard protocols to issue simulated keycodes, and one using the mice protocols to issue simulated mouse movements.
[22:49:38] <pjb> In that case, you can hook then those virtual device drivers with anything running in the OS, and inject your raw events.
[22:50:16] <CodeBitCookie[m]> pjb: Won't those device drivers be hardware specific, or will it work on all hardware?
[22:50:21] <CodeBitCookie[m]> (almost all)
[22:50:36] <pjb> I said *virtual* device driver.
[22:51:23] <pjb> It's a device driver that doesn't have any hardware to manage. Perhaps you would have some software talking to your virtual device driver to tell it what event to send.
[22:51:23] <CodeBitCookie[m]> okay, so how would I go about writing those?
[22:51:32] <pjb> Depends on the OS.
[22:51:51] <pjb> On linux, you may start with https://lwn.net/Kernel/LDD3/
[22:52:44] <CodeBitCookie[m]> Woah, thats bigger than I expected.
[22:52:45] <pjb> on macOS or iOS: https://developer.apple.com/documentation/driverkit
[22:53:13] <pjb> There are already system developped to simulate events for testing in particular, or for scripting.
[22:53:55] <CodeBitCookie[m]> pjb: one for linux?
[22:54:20] <pjb> https://en.wikipedia.org/wiki/Graphical_user_interface_testing
[22:54:34] <pjb> xdotool and xdo can help indeed.
[22:55:08] <pjb> Well, for X11.
[22:55:21] <pjb> For linux you'd need those virtual device drivers.
[22:55:45] <pjb> Perhaps: https://github.com/blunderer/vinput
[22:56:29] <pjb> Since linux doesn't imply X11, it can be X11, the new thingy way something, Android, etc.
[22:57:17] <CodeBitCookie[m]> ahh, so someone using wayland would be out of luck if I go the simple route.
[22:57:44] <pjb> Probably wayland can use the same device drivers.
[22:58:08] <CodeBitCookie[m]> pjb: "The X Window system provides functionality...For example, one can call XSendEvent() to simulate a click on a pull-down menu, and so forth." Nice, so the functionality is built in to the window system.
[22:58:36] <pjb> There are also higher level device driver API, for human interfaces.  HID https://www.kernel.org/doc/html/v5.3/hid/index.html notably defined in the context of USB devices.
[22:59:10] <pjb> Similarly,on Android, there's the HAL Hardware Abstraction Layer, so as soon as you have a HAL module for your device, it can be used by the system and applications.
[23:00:09] <CodeBitCookie[m]> pjb: Sorry if these questions are dumb, but I am kind of new to this kind of stuff and before getting *too* complicated, how can I use something like XSendEvent() with Common Lisp, CFFI?
[23:00:23] <pjb> Exactly.
[23:00:50] <pjb> You also have the choice of using sockets and messages, since the X11 protocol is defined.
[23:02:37] <pjb> X11 is not too hard, but you often will have to use a lot of functions to do a single thing. For example, XSendEvent needs a Display, a Window, and an XEvent.  To create them and connect to them, you will have to use several other X11 functions…
[23:03:13] <CodeBitCookie[m]> so something like https://cliki.net/CLX will do?
[23:03:19] <pjb> Yes.
[23:05:18] <CodeBitCookie[m]> Thanks pjb, will report back to you of any problems if that's okay?
[23:06:16] <pjb> You can test it (as prototype), using xdotool
[23:07:30] <pjb> (loop (uiop:run-program "xdotool mousemove 100 200") (sleep 5)  (uiop:run-program "xdotool mousemove 300 200") (sleep 5))
[23:16:34] *** MetaYan_ is now known as MetaYan
[23:18:27] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 268 seconds)
[23:20:25] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[23:39:16] *** Quits: rain3 (~rain3___@2a02:2f09:d00c:8800:e5a:2f8d:20e4:29e8) (Ping timeout: 264 seconds)
