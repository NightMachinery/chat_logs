[00:03:59] *** Joins: evocatus (~evocatus@62.182.78.42)
[00:07:15] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
[00:11:13] *** Joins: ztx (~ztx@user/ztx)
[00:11:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[00:12:28] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[00:13:37] *** Joins: fikran (~fikran@user/fikran)
[00:15:23] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 250 seconds)
[00:16:00] *** Joins: ryu_ (~ryusaku@c6A334BC1.dhcp.as2116.net)
[00:16:57] *** Quits: ryu` (~ryusaku@c6A334BC1.dhcp.as2116.net) (Ping timeout: 240 seconds)
[00:19:46] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[00:20:01] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Remote host closed the connection)
[00:20:16] <tuskkk____> Is there a rule of thumb to follow when to use pointers for function arguments and when not?
[00:20:54] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 276 seconds)
[00:21:03] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:1da2:868d:4bf9:6570)
[00:21:58] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 260 seconds)
[00:23:44] <b0nn> it depends
[00:24:19] <b0nn> pointers are great when you want that specific item to be changeable within the called function, and possibly its children
[00:25:01] <b0nn> values are better though, and vital if you are following the Actor model
[00:25:03] <b0nn> pattern
[00:25:39] <b0nn> hmm, my rule of thumb is "use values as often as possible - because pointers cause threading problems"
[00:26:07] <chilversc> though the size of the struct can matter as well
[00:26:37] <chilversc> any heuristics on how large a struct is reasonable as a value before you want to switch to reference?
[00:27:45] <b0nn> I've seen the "pointers are faster than copying big objects" argument go back and forth a few times, but I've never seen it get passed - the object has to be really big before it's problematic (pointer indirection is costly too)
[00:30:08] <b0nn> Also, as I noted earlier, passing pointers means losing thread safety which means you need to invoke various primitives to ensure your code is correct, mutexes aren't free
[00:30:55] <tuskkk____> makes sense, will write this down for me to remember, thanks!
[00:32:04] <b0nn> And that reminds me Mitchel Hashimoto posted on twitter earlier - lock free code isn't necessarily faster than code with locking (in case there was doubt) https://www.youtube.com/watch?v=ZQFzMfHIxng&t=5s
[00:32:05] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[00:32:23] <b0nn> Mitchell*
[00:33:18] *** Joins: Compy (~compy@user/compy)
[00:39:17] *** Quits: zwr (~zwr@2804:d45:b966:fb00:5e95:5d3f:af2c:e213) (Ping timeout: 240 seconds)
[00:40:37] *** Joins: zwr (~zwr@2804:d45:b966:fb00:9345:6fbb:30c0:b746)
[00:42:08] *** Joins: arinov (~arinov@213.194.126.155)
[00:43:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:1da2:868d:4bf9:6570) (Ping timeout: 240 seconds)
[00:45:40] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[00:46:44] *** Joins: rcernin (~rcernin@124.190.147.6)
[00:48:15] *** Quits: shka (~herr@109.231.0.226) (Ping timeout: 256 seconds)
[00:49:55] *** Quits: rcernin (~rcernin@124.190.147.6) (Client Quit)
[00:50:10] *** Joins: rcernin (~rcernin@124.190.147.6)
[00:52:29] *** nitrix is now known as nitrix-mas
[00:52:39] *** Joins: Tach (~Tach@user/tach)
[00:59:01] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[01:03:08] *** Joins: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad)
[01:12:01] *** Quits: albertito (~nil@37.228.204.251) (Ping timeout: 245 seconds)
[01:19:15] *** Quits: lilgopher (~textual@2601:241:8000:38f0:cd3a:7cf:4af5:8257) (Ping timeout: 268 seconds)
[01:19:34] *** Joins: lilgopher (~textual@2601:241:8000:38f0:6c4b:13d6:199c:71b9)
[01:23:57] *** Quits: lilgopher (~textual@2601:241:8000:38f0:6c4b:13d6:199c:71b9) (Ping timeout: 240 seconds)
[01:28:51] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-8703-960c-aac7-5a22.ip6.gigabit.dk) (Remote host closed the connection)
[01:29:11] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[01:43:20] *** Joins: et_ (~et@user/et)
[01:43:37] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[01:43:49] *** et_ is now known as et
[01:49:01] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[01:57:16] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[01:57:34] *** Joins: mickey8 (~user@user/mickey)
[02:02:59] *** Joins: et_ (~et@user/et)
[02:03:09] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[02:03:17] *** Quits: et (~et@user/et) (Ping timeout: 240 seconds)
[02:03:26] *** et_ is now known as et
[02:03:27] *** Joins: lragyrlmtdwnbo^ (~lragyrlmt@64.253.22.77)
[02:04:07] *** Joins: albertito (~nil@37.228.204.251)
[02:06:33] *** Quits: virtx (~venol_@host-95-234-23-162.retail.telecomitalia.it) (Quit: Client closed)
[02:13:43] *** nitrix-mas is now known as nitrix
[02:15:46] *** Joins: codebam (~codebam@user/codebam)
[02:20:46] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[02:22:58] *** Joins: fikran (~fikran@user/fikran)
[02:36:35] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.0)
[02:41:55] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[02:42:48] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[02:48:21] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[02:49:33] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[02:53:55] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:58:32] *** Quits: evocatus (~evocatus@62.182.78.42) (Quit: Leaving)
[03:11:52] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[03:17:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[03:24:08] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[03:25:06] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[03:26:00] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[03:30:23] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:45:25] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[03:47:44] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[03:49:00] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[03:59:16] <LiENUS> wow i think i hit a hard flaw in my plan to parallel this
[04:01:26] <LiENUS> its dependent on the previous results and if difficulty is too low it'll complete before the appropriate previous result set is filled out
[04:02:29] <LiENUS> accuracy of results drops, i found a difficulty level on my machine it works at and i can add in a check that if its processing a small enough set that the difficulty is lower it'll do it with a more accurate and naive approach but i dont know what the cut off is for other systems heh
[04:03:20] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[04:03:37] *** Parts: devz3ro (devz3ro2@user/devz3ro) (Textual IRC Client: www.textualapp.com)
[04:05:29] <LiENUS> i did manage to figure out stream sorting though, no noticeable slowdown sorting the stream
[04:05:45] <LiENUS> though in general it doesnt produce an out of order stream unless i drop difficulty way down
[04:07:37] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[04:11:32] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[04:12:13] *** Quits: x88x88x (~x88x88x@149.28.53.172) (Ping timeout: 240 seconds)
[04:14:36] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[04:18:12] *** Joins: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb)
[04:27:30] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[04:28:25] *** Joins: respite (~efekt@ec2-44-232-32-190.us-west-2.compute.amazonaws.com)
[04:29:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[04:30:51] *** Quits: x88x88x (~x88x88x@2001:19f0:5:39a8:5400:3ff:feb6:73cb) (Read error: Connection reset by peer)
[04:32:19] *** Joins: fikran (~fikran@user/fikran)
[04:41:57] *** Quits: rvt (~rvt@librecad/rvt) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[04:44:31] *** Quits: rogersm (~rogersm@90.166.177.48) (Read error: Connection reset by peer)
[04:44:59] *** Joins: rogersm (~rogersm@90.166.177.48)
[04:45:13] *** Joins: rvt (~rvt@librecad/rvt)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:41] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:49:33] *** Quits: rvt (~rvt@librecad/rvt) (Quit: ZNC 1.8.2+deb2+b1 - https://znc.in)
[04:50:18] *** Joins: rvt (~rvt@librecad/rvt)
[04:56:48] *** Quits: art_vandelay (~art_vande@142.126.234.156) (Quit: Textual IRC Client: www.textualapp.com)
[05:00:22] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[05:02:54] *** Quits: leitz (~LeamHall@072-182-158-027.res.spectrum.com) (Quit: nappy time)
[05:15:37] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[05:22:09] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[05:22:42] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:22:42] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[05:23:12] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[05:38:50] *** Joins: lilgopher (~textual@2601:241:8000:38f0:e94c:1cdc:20ac:a769)
[05:39:57] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[05:44:42] <dostoyevsky2> Dear Santa, for xmas I'd like to have firefox/librewolf/chromium/ungoogled chrome as a shared library/Shared Object/DLL, so I can do my own session/key management from Go, or close windows whose url matches a regexp, and also add my own UI windows if I wanted..
[05:46:17] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[05:48:13] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[05:49:37] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 240 seconds)
[05:51:22] *** Joins: darkapex (~darkapex@user/darkapex)
[05:52:47] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[05:56:41] *** Quits: lragyrlmtdwnbo^ (~lragyrlmt@64.253.22.77) (Ping timeout: 252 seconds)
[05:57:24] *** Joins: lragyrlmtdwnbo^ (~lragyrlmt@64.253.22.77)
[06:29:02] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 240 seconds)
[06:39:35] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[06:41:40] *** Joins: fikran (~fikran@user/fikran)
[06:55:19] <fikran> I have a struct, but in the event of an error I want to return `nil`. Is there a way to do that? Or something similar?
[06:58:23] *** Quits: gbmor (gbmor@gbmor.org) (Read error: Connection reset by peer)
[06:58:34] <bpalmer> return a pointer to the struct, or return an error/boolean as a second return value , or have a sentinel value
[06:58:42] *** Joins: gbmor (gbmor@gbmor.org)
[06:58:48] <bpalmer> sentinel value that is of the struct type, that is, not nil.
[07:00:41] *** Joins: art_vandelay (~art_vande@142.126.234.156)
[07:02:55] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 250 seconds)
[07:05:22] *** Joins: jespada (~jespada@87.74.33.157)
[07:22:54] *** Quits: rcernin (~rcernin@124.190.147.6) (Ping timeout: 260 seconds)
[07:23:27] *** Quits: pepee (~pepee@user/pepee) (Quit: WeeChat 2.8)
[07:27:37] <seebs> the conventional idiom is to return (T, error), where a non-nil error means the T is relevant.
[07:27:42] <seebs> er, irrelevant
[07:32:11] *** Joins: rogersm_ (~rogersm@89.130.187.152)
[07:32:32] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[07:34:33] *** Quits: rogersm (~rogersm@90.166.177.48) (Ping timeout: 256 seconds)
[07:37:09] <b0nn> sometimes I like to put random data into T when there's an error - to really screw with the users :-)
[07:58:10] *** Joins: souvik (~souvik@103.59.73.171)
[08:02:36] *** Quits: souvik (~souvik@103.59.73.171) (Ping timeout: 240 seconds)
[08:03:11] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[08:09:48] <KirkMcDonald> Returning the zero value for the struct is perhaps more conventional.
[08:16:26] *** Joins: iateadonut (~dan@121.177.17.154)
[08:23:55] *** Quits: moog (~moog@107.126.53.157) (Remote host closed the connection)
[08:24:53] <LiENUS> @b0nn, dear sir i am intrigued and disgusted by your ideas. Do you have a news letter I can subscribe to?
[08:31:09] *** Joins: lalitmee (~lalitmee@180.94.32.191)
[08:33:38] *** Joins: _rubik (~rubik@user/rubik/x-6853868)
[08:35:55] *** Quits: Compy (~compy@user/compy) (Remote host closed the connection)
[08:42:06] <b0nn> LiENUS: www.twitter.com :)
[08:48:37] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[08:51:01] *** Joins: fikran (~fikran@user/fikran)
[08:57:29] *** Joins: bluedust (~bluedust@103.160.233.58)
[09:35:36] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[09:46:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[09:52:28] <LiENUS> am i missing something or is oauth2 over smtp really as simple as passing something like https://go.dev/play/p/GJep_J3Or0q into the client.Auth() function?
[09:52:50] <LiENUS> theres the whole oauth2 bit but the actual smtp side of things looks absurdly simple
[09:53:19] <LiENUS> im basing that code on https://developers.google.com/gmail/imap/xoauth2-protocol#smtp_protocol_exchange and the net/smtp.plainauth
[10:09:09] <LiENUS> non working code but should be enough to give the jist of what i mean
[10:12:57] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 240 seconds)
[10:21:07] *** Quits: sagax (~sagax_nb@user/sagax) (Quit: Konversation terminated!)
[10:21:09] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Ping timeout: 256 seconds)
[10:22:38] *** Joins: sagax (~sagax_nb@user/sagax)
[10:35:08] *** Joins: codebam (~codebam@user/codebam)
[10:35:31] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[10:40:56] *** Quits: dead1 (~dead@user/dead1) (Quit: WeeChat 3.4)
[10:43:49] *** Quits: menace (~someone@user/menace) (Ping timeout: 256 seconds)
[10:44:21] *** Quits: lragyrlmtdwnbo^ (~lragyrlmt@64.253.22.77) (Remote host closed the connection)
[10:45:26] *** Joins: dead1 (~dead@user/dead1)
[10:47:21] *** Joins: lalitmee_ (~lalitmee@180.94.32.197)
[10:49:37] *** Quits: lalitmee (~lalitmee@180.94.32.191) (Ping timeout: 240 seconds)
[10:51:02] <mickey8> how would you guys naturally name a package that works with an api of a specific website? i realize i can use almos anything that comes to mind, but i wonder what would make sense. something like dmv.ca.gov
[10:52:19] <mickey8> i'd go with "dmv" or something personally, but i'd like to make it open source later on so a sensible name would be better :)
[10:52:46] *** Joins: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de)
[10:52:57] *** Quits: menace (~someone@ppp-93-104-175-20.dynamic.mnet-online.de) (Changing host)
[10:52:57] *** Joins: menace (~someone@user/menace)
[10:54:18] <foobaz> mickey8: drivr
[10:54:27] <mickey8> :)
[10:54:30] <b0nn> dmvapiclientfactory
[10:58:09] *** Joins: rcernin (~rcernin@101.189.141.138)
[10:58:38] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[11:00:23] *** Joins: fikran (~fikran@user/fikran)
[11:05:42] *** Joins: dsrt^ (~dsrt@64.253.22.77)
[11:07:52] *** Joins: rendar (~rendar@user/rendar)
[11:23:25] *** Quits: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net) (Quit: The Lounge - https://thelounge.chat)
[11:23:46] *** Joins: dr0n (~nabromov@94.11.23.235)
[11:24:20] *** Joins: ItsNotGoodName0 (~ItsNotGoo@c-73-83-144-140.hsd1.wa.comcast.net)
[11:26:16] *** Quits: jkl (~jkl@user/jkl) (Quit: Gone.)
[11:27:36] *** Joins: jkl (~jkl@user/jkl)
[11:31:15] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[11:37:27] *** Joins: shka (~herr@109.231.0.226)
[11:41:19] <LiENUS> i wrote a package for the "advanced hydrologic prediction service" where the api endpoint on the website is "ahps2" so i unhelpfully named the package ahps2 :)
[11:42:02] <LiENUS> it does not come up in google searches and is likely impossible to find even if you know what you're looking for
[11:44:08] <LiENUS> welp i was missing something but not very much on the xoauth2 front got that figured out was surprisingly simple hopefully the go team adds a provider to the std lib soon
[11:56:58] *** Joins: mrig (~mrig@user/mrig)
[12:00:39] *** Joins: et_ (~et@user/et)
[12:01:27] *** Quits: et (~et@user/et) (Ping timeout: 256 seconds)
[12:01:27] *** et_ is now known as et
[12:09:17] *** Quits: menace (~someone@user/menace) (Quit: menace)
[12:13:30] *** Quits: henry40408 (~henry4040@123-204-134-230.adsl.dynamic.seed.net.tw) (Quit: Ping timeout (120 seconds))
[12:13:52] *** Joins: henry40408 (~henry4040@123-204-134-230.adsl.dynamic.seed.net.tw)
[12:16:54] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 260 seconds)
[12:17:19] *** Quits: codebam (~codebam@user/codebam) (Ping timeout: 256 seconds)
[12:26:06] *** Joins: me-sudoer-dentne (~me-sudoer@182.48.206.173)
[12:30:10] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: You have been kicked for being idle)
[12:33:44] *** Quits: bluedust (~bluedust@103.160.233.58) (Remote host closed the connection)
[12:36:18] *** Quits: me-sudoer-dentne (~me-sudoer@182.48.206.173) (Quit: Leaving)
[12:42:30] *** Joins: arinov (~arinov@178.240.175.124)
[13:03:05] *** Quits: kochchef (~quassel@80.146.255.46) (Ping timeout: 256 seconds)
[13:05:32] *** Joins: kochchef (~quassel@80.146.255.46)
[13:07:24] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[13:09:44] *** Joins: fikran (~fikran@user/fikran)
[13:13:25] *** Joins: bluedust (~bluedust@103.160.233.58)
[13:20:37] *** Joins: souvik (~souvik@103.59.73.171)
[13:33:09] <mikoto-chan> >The default type of an untyped constant is bool, rune, int, float64, complex128 or string respectively, depending on whether it is a boolean, rune, integer, floating-point, complex, or string constant.
[13:33:46] <mikoto-chan> can I set all values in an array of booleans to false?
[13:33:49] *** Quits: arinov (~arinov@178.240.175.124) (Ping timeout: 256 seconds)
[13:34:19] *** Quits: moldorcoder7_ (~moldorcod@37.120.143.28) (Ping timeout: 268 seconds)
[13:38:28] <mikoto-chan> ah, it's false by default.
[13:41:09] *** Joins: moldorcoder7 (~moldorcod@37.120.143.29)
[13:53:39] *** Quits: souvik (~souvik@103.59.73.171) (Ping timeout: 256 seconds)
[14:03:16] <ikke> Yes, the zero value
[14:09:34] *** Quits: dead1 (~dead@user/dead1) (Quit: WeeChat 3.4)
[14:09:39] *** Quits: mrig (~mrig@user/mrig) (Read error: Connection reset by peer)
[14:09:52] *** Joins: mrig (~mrig@user/mrig)
[14:11:41] *** Quits: bluedust (~bluedust@103.160.233.58) (Remote host closed the connection)
[14:12:24] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[14:35:11] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[14:36:14] *** Joins: flynn (~mcbloch@user/flynn)
[14:43:48] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:44:52] *** Joins: flynn (~mcbloch@user/flynn)
[14:45:04] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[14:49:23] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[14:50:27] *** Joins: flynn (~mcbloch@user/flynn)
[14:59:54] *** Joins: krux02 (~krux02@p200300ca8f259100249a88ce1a623548.dip0.t-ipconnect.de)
[15:00:19] <krux02> imports google.golang.org/protobuf: build constraints exclude all Go files in /home/arne/gocode/pkg/mod/google.golang.org/protobuf@v1.27.1
[15:00:22] <krux02> what does this mean?
[15:00:50] <krux02> I say: "Impor this!" golang says "nope"
[15:01:01] <krux02> why???
[15:06:31] <shiroyasha> krux02: Are you sure that's the correct package you want to use, and not a subpackage?
[15:07:22] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[15:09:46] *** Joins: henry404086 (~henry4040@175.181.186.198)
[15:10:53] <krux02> shiroyasha, I am working on an on and off project for a week now. The goal is to deserialize a protobuf message.
[15:11:03] <krux02> Nothing more, just the basic thing.
[15:11:33] <krux02> I am not sure about anything that I do, I am just fighting evethingthing, the changes in go (I am only familiar with go before modules)
[15:11:51] *** Quits: henry40408 (~henry4040@123-204-134-230.adsl.dynamic.seed.net.tw) (Ping timeout: 256 seconds)
[15:11:51] *** henry404086 is now known as henry40408
[15:11:52] <krux02> I struggle with protobuf, I really cant't find comprehensive documentation about it
[15:12:12] <krux02> I simply can't get this damn message to be "Unmarsheled"
[15:13:21] <krux02> It took me far too much time to figure out that the magic word in protobuf is "marshal/unmarshal", I was grepping through the code wtih keywords like "(de)serialize, parse, read, scan, ..."
[15:13:31] <krux02> I've never even heared that word before
[15:13:58] <shiroyasha> I haven't used protobuf, but it seems like the main code is in the `google.golang.org/protobuf/proto` package.
[15:14:49] <krux02> https://paste.debian.net/1224625/
[15:15:12] *** Joins: bluedust (~bluedust@103.160.233.58)
[15:15:41] <krux02> WTF is this damn error message: build constraints exclude all Go files in
[15:15:59] <krux02> It really feels like go wants to annoy me.
[15:16:13] <MD87> There are no useful go files in that package you're trying to import. You need to import the `proto` package as shiroyasha said.
[15:16:14] <shiroyasha> There are no `*.go` files in the `google.golang.org/protobuf` package.
[15:16:32] <krux02> "I could use these files, but I won't, and I won't tell you how you can make me use them"
[15:16:57] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[15:17:57] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 240 seconds)
[15:18:05] *** Joins: et_ (~et@user/et)
[15:18:56] *** Parts: iateadonut (~dan@121.177.17.154) ()
[15:19:05] *** Joins: fikran (~fikran@user/fikran)
[15:19:09] *** Quits: et (~et@user/et) (Ping timeout: 268 seconds)
[15:19:09] *** et_ is now known as et
[15:19:30] <krux02> ok, now it compiles
[15:19:47] <krux02> but why is this error message so maximal uninformative?
[15:20:56] <ikke> I guess because of the assumption that if there no go files to build in a package that you import, it most be because they are excluded by build constraints
[15:21:01] <shiroyasha> There could have been `*.go` files in there, but that could have been filtered out because they depend on a specific architecture, for example.
[15:21:04] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[15:21:40] <shiroyasha> And there is a `*_test.go` file in there that was excluded, so "No Go files in the package" wouldn't have been too accurate because there is one.
[15:22:08] <shiroyasha> But yea the message could have been better.
[15:22:44] <krux02> thanks
[15:23:45] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 256 seconds)
[15:23:55] *** Quits: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk) (Quit: Leaving)
[15:24:49] *** Joins: souvik (~souvik@103.59.73.171)
[15:26:19] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:26:29] <shiroyasha> In Go sometimes it's better to look at the autogenerated documentation, e.g.  https://godocs.io/google.golang.org/protobuf
[15:29:17] *** Quits: souvik (~souvik@103.59.73.171) (Ping timeout: 240 seconds)
[15:30:06] *** Joins: dead1 (~dead@user/dead1)
[15:30:07] *** Quits: dead1 (~dead@user/dead1) (Client Quit)
[15:33:04] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:e182:9e47:91db:c531)
[15:41:26] *** Quits: jespada (~jespada@87.74.33.157) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:41:54] *** Joins: jespada (~jespada@87.74.33.157)
[15:52:52] *** Joins: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d)
[15:55:01] *** Quits: zer0bitz (~zer0bitz@2001:2003:f444:a000:e182:9e47:91db:c531) (Ping timeout: 240 seconds)
[15:55:37] *** Joins: fub (uid190747@id-190747.ilkley.irccloud.com)
[15:56:21] *** Joins: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com)
[15:57:10] *** Parts: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com) ()
[16:00:31] *** Joins: bluedust_ (~bluedust@117.222.187.193)
[16:04:10] *** Quits: bluedust (~bluedust@103.160.233.58) (Ping timeout: 268 seconds)
[16:08:36] *** Joins: bluedust (~bluedust@194.37.96.152)
[16:11:49] *** Quits: bluedust_ (~bluedust@117.222.187.193) (Ping timeout: 240 seconds)
[16:19:53] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[16:24:33] *** Joins: Mattiaslndstrm (~Mattiasln@m37-2-42-97.cust.tele2.se)
[16:24:49] *** Quits: bluedust (~bluedust@194.37.96.152) (Remote host closed the connection)
[16:28:37] *** Quits: Mattiaslndstrm (~Mattiasln@m37-2-42-97.cust.tele2.se) (Ping timeout: 240 seconds)
[16:29:22] <skrzyp> Simple question, but rather irritating. How to maintain general state (UI and runtime config) without global variables in a way that it could be accessed from other packages?
[16:30:27] *** Joins: souvik (~souvik@103.59.73.171)
[16:31:30] <skrzyp> I'm doing a custom domain-specific command shell and I would like to have different "ui" package and "commands" package, where each command would register itself without being explicitly stated in "ui" package. Currently its done by "func init() { ui.AddCommand{&Command{Name: ..., Method: ..., }) }" but there should be a btter way to avoid globals/init
[16:34:14] <skrzyp> I know that even the spf13/Viper uses globals in its own package which is I nice, but I've been told to not do that many times
[16:35:14] *** Quits: souvik (~souvik@103.59.73.171) (Ping timeout: 252 seconds)
[16:35:28] *** Joins: souvik (~souvik@80.179.69.241.cable.012.net.il)
[16:38:19] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[16:38:34] *** Joins: mickey8 (~user@user/mickey)
[16:41:50] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[16:43:39] *** Quits: rcernin (~rcernin@101.189.141.138) (Ping timeout: 256 seconds)
[16:46:11] *** Quits: zer0bitz_ (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d) (Ping timeout: 245 seconds)
[16:47:59] *** Joins: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com)
[16:48:11] *** Joins: zer0bitz (~zer0bitz@2001:2003:f444:a000:2421:137f:dee3:7f7d)
[16:49:18] <bookworm> if you don't like the register approach taken by say the sql package, you can expose a method on the ui struct called Register and in main dynamically look for your commands and register them there manually
[16:49:28] *** Joins: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg)
[16:50:55] <skrzyp> but how can I look up them dynamically if these are coming from external package?
[16:51:55] *** Parts: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com) ()
[16:52:02] *** Joins: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com)
[16:53:33] <bookworm> what do you mean by external package?
[16:53:53] *** Parts: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com) ()
[16:53:55] *** Joins: bluedust (~bluedust@194.37.96.152)
[16:54:02] <bookworm> as in plugin like (different authors) or really just different packages but known at compile time?
[16:54:44] <skrzyp> just different package (actually a different directory) in the same repository, for example "foo.net/skrzyp/app/ui" && "foo.net/skrzyp/app/commands"
[16:56:00] <skrzyp> the point was to implement different UIs in the future but keep operating on the same "commands" which only invoke generic ui statements
[16:56:19] <bookworm> yeah, but that on its own is not a binary, s8 8n main look up commands (however you wanna do that, generally they register at the package commands level via init() and then tell your UI package to use those commands, via an interface that you expect
[16:56:36] *** Joins: tesuji_ (~quassel@138.199.2.51)
[16:56:42] *** Quits: tesuji_ (~quassel@138.199.2.51) (Client Quit)
[16:58:18] <bookworm> here's an example of aerc (not that it is exceptionally good code but it shows the pattern) https://git.labrat.space/aerc/tree/commands/commands.go
[16:59:32] <bookworm> corresponding registration https://git.labrat.space/aerc/tree/commands/prompt.go#n23
[16:59:37] *** Quits: tesuji (~quassel@2a02:908:180:9500:cd6:6ff7:865b:1bad) (Ping timeout: 240 seconds)
[17:00:38] <bookworm> and the usage from main is simply calling commands.Execute, giving the desired arguments (should probably be an interface) as well as the arguments (as in which command to call, in aercs case simply a string
[17:02:44] *** Joins: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com)
[17:06:26] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[17:07:28] *** Quits: jespada (~jespada@87.74.33.157) (Quit: Textual IRC Client: www.textualapp.com)
[17:07:30] *** Joins: flynn (~mcbloch@user/flynn)
[17:09:44] <skrzyp> I think what aerc does is maybe too elaborete at times
[17:10:10] <bookworm> that may be, you don't need to replicate it in full ;)
[17:10:34] <skrzyp> of course I won't
[17:14:17] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[17:15:13] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[17:17:10] <mickey8> where can i start reading about writing tests for functions that read files? i'd like call somef("path/to/file") and test would provide it with a dummy file, etc.
[17:18:38] <mickey8> i use os.Open() if that matters
[17:18:41] <bookworm> the proper way? use an interface that gives you the thing rather than a file path
[17:18:52] <bookworm> meaning a io.Reader or some such
[17:19:16] <mickey8> im not sure what you mean.
[17:19:20] <bookworm> then simply make a trivial stub function that opens a file and hands it over to the actual function accepting the reader
[17:19:35] <bookworm> You don't need to test os.Open, that's the stdlib's job
[17:19:55] <bookworm> you only need to test your own function, so write that function but accept an io.Reader and not a str (file path)
[17:19:57] <mickey8> would that just complicate my code ?
[17:20:06] <mickey8> wouldnt*
[17:20:14] <bookworm> of course, it's an indirection. But you could properly test your code
[17:20:26] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[17:20:36] <mickey8> okay, i'll take your word for that tip.
[17:20:36] <bookworm> by giving it the thing as a string from memory, no need to hit the disc at all
[17:21:14] <bookworm> the other alternative is to give it a file path in your test with a file you shove in the test directory
[17:21:54] <mickey8> which approach would you consider better?
[17:22:09] <mickey8> obviously the first, because you suggested it first, just making sure
[17:22:12] <bookworm> depends ;) there's a time and a place for everything
[17:22:32] <mickey8> ill take the first for now then, might as well learn something new on my way
[17:23:19] *** Quits: _xor (~xor@dsl-50-5-233-169.fuse.net) (Read error: Connection reset by peer)
[17:23:41] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[17:25:17] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[17:26:17] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 240 seconds)
[17:26:27] <mickey8> okay, so let me change my initial question... where can i start reading about mocking io.reader?
[17:26:55] <mickey8> i assume stretchr/testify does it  somehow, but the docs aren't very helpful (unless im missing on something there)
[17:28:26] *** Joins: fikran (~fikran@user/fikran)
[17:31:30] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[17:33:45] <bookworm> you don't need to mock it
[17:33:53] <bookworm> you simply give it a Reader
[17:34:18] <bookworm> that's the beauty of interfaces, you're not asking for a concrete type but for a specific *behavior*
[17:35:15] <bookworm> meaning if you have func ReadConfig(io.Reader) {...}; you can call that with ReadConfig(openFile), or with ReadConfig(strings.NewReader(s))
[17:35:34] <bookworm> the code won't care, all it knows is that it can grab whatever it needs from the parameter by calling Read on it
[17:35:47] <mickey8> makes sense. thanks for the help. i'll go try this and see if i can make it work.
[17:36:51] <bookworm> also, note that io.Reader is just an example, use the interface that is appropriate for what you're trying to do
[17:37:09] <mickey8> yup. io.reader.
[17:39:42] *** Quits: mrig (~mrig@user/mrig) (Quit: Going offline, see ya! (www.adiirc.com))
[17:40:38] *** Joins: no_good (~purekafro@athedsl-4369539.home.otenet.gr)
[17:51:17] *** Quits: no_good (~purekafro@athedsl-4369539.home.otenet.gr) (Ping timeout: 240 seconds)
[17:59:46] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5816:4946:619c:8d56)
[18:03:55] *** Quits: sdfgsdfg (~sdfgsdfg@user/sdfgsdfg) (Quit: ZzzZ)
[18:05:02] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5816:4946:619c:8d56) (Ping timeout: 268 seconds)
[18:05:34] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[18:08:51] *** Joins: no_good (~purekafro@athedsl-4369539.home.otenet.gr)
[18:11:10] *** Quits: no_good (~purekafro@athedsl-4369539.home.otenet.gr) (Remote host closed the connection)
[18:11:56] *** Quits: krux02 (~krux02@p200300ca8f259100249a88ce1a623548.dip0.t-ipconnect.de) (Remote host closed the connection)
[18:13:31] *** Joins: ztx (~ztx@user/ztx)
[18:19:29] *** Parts: wcsiu (~wcsiu@42-2-73-023.static.netvigator.com) ()
[18:20:37] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[18:21:32] *** Quits: dsrt^ (~dsrt@64.253.22.77) (Ping timeout: 240 seconds)
[18:24:36] *** Joins: stephan_ (~stephan@24.114.94.228)
[18:26:57] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[18:27:30] *** Parts: stephan_ (~stephan@24.114.94.228) ()
[18:35:26] *** Joins: MrBlue (~stephan@24.114.94.228)
[18:37:20] *** Quits: MrBlue (~stephan@24.114.94.228) (Client Quit)
[18:38:39] *** Joins: MrBlue (~stephan@24.114.94.228)
[18:46:34] *** Joins: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c)
[18:49:49] *** Joins: Mattiaslndstrm (~Mattiasln@m37-2-42-97.cust.tele2.se)
[18:50:39] *** Joins: mrig (~mrig@user/mrig)
[18:52:32] *** Quits: lechner (~lechner@debian/lechner) (Ping timeout: 268 seconds)
[18:53:36] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:54:12] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca) (Remote host closed the connection)
[18:55:38] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[18:55:57] *** Quits: Tach (~Tach@user/tach) (Quit: Tach)
[18:56:42] *** Joins: flynn (~mcbloch@user/flynn)
[18:58:10] *** Joins: moog (~moog@107.77.244.157)
[18:58:51] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.4)
[18:59:11] *** Joins: Rayke (rayke@user/rayke)
[19:05:06] *** Joins: pepee (~pepee@user/pepee)
[19:12:24] *** Quits: mooff (mooff@awful.cooking) (Quit: Quit)
[19:12:41] *** Quits: lalitmee_ (~lalitmee@180.94.32.197) (Ping timeout: 256 seconds)
[19:15:18] *** Quits: flynn (~mcbloch@user/flynn) (Remote host closed the connection)
[19:16:22] *** Joins: flynn (~mcbloch@user/flynn)
[19:16:56] *** Quits: beholders_eye (~weechat@2804:1b3:70c3:13a2:deb8:2ff4:2321:ba0c) (Ping timeout: 252 seconds)
[19:23:00] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[19:23:04] *** Joins: Everything (~Everythin@37.115.210.35)
[19:23:50] *** Joins: dngray[m] (~dngray@user/dngray)
[19:29:39] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[19:30:44] *** Joins: flynn (~mcbloch@user/flynn)
[19:34:01] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:5816:4946:619c:8d56)
[19:36:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[19:37:47] *** Joins: fikran (~fikran@user/fikran)
[19:38:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:5816:4946:619c:8d56) (Ping timeout: 240 seconds)
[19:42:39] *** Joins: mooff (mooff@awful.cooking)
[19:45:13] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[19:45:31] *** Joins: shtirlic (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru)
[19:46:11] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:48:32] *** Quits: shtirlic_ (~shtirlic@95-55-123-230.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[19:53:51] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-19-70-31-33-162.dsl.bell.ca)
[20:09:00] *** Quits: sus (zero@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[20:09:43] *** Joins: sus (~zeromomen@user/zeromomentum)
[20:09:49] *** Joins: wcsiu_ (~wcsiu@user/wcsiu)
[20:10:46] <wcsiu_> whois wcsiu
[20:10:53] *** Quits: wcsiu_ (~wcsiu@user/wcsiu) (Client Quit)
[20:12:43] *** Joins: wcsiu_ (~wcsiu@user/wcsiu)
[20:12:55] *** Parts: wcsiu_ (~wcsiu@user/wcsiu) ()
[20:24:56] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[20:26:08] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[20:27:07] *** Joins: Tach (~Tach@user/tach)
[20:29:31] *** Joins: bluedust_ (~bluedust@89.238.143.232)
[20:29:57] *** Quits: bluedust (~bluedust@194.37.96.152) (Ping timeout: 240 seconds)
[20:31:31] *** Quits: souvik (~souvik@80.179.69.241.cable.012.net.il) (Quit: leaving)
[20:33:02] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Ping timeout: 268 seconds)
[20:33:39] *** Quits: moldorcoder7 (~moldorcod@37.120.143.28) (Quit: %bye mirc%)
[20:33:58] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:39:40] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[20:50:26] *** Quits: seebs (~seebs@24.196.59.174) (Ping timeout: 252 seconds)
[20:59:41] *** Quits: pztrn (~pztrn@user/pztrn) (Quit: Segmentation fault)
[21:01:08] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (Quit: ZNC 1.8.2 - https://znc.in)
[21:02:11] *** Joins: seebs (~seebs@24.196.59.174)
[21:02:27] *** Joins: pztrn1 (~pztrn1@aurora.pztrn.name)
[21:07:58] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[21:08:12] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[21:10:19] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[21:10:42] *** Joins: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[21:15:29] *** Joins: lechner (~lechner@debian/lechner)
[21:20:58] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:24:41] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[21:28:41] *** Joins: leitz (~LeamHall@072-182-158-027.res.spectrum.com)
[21:31:46] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[21:38:17] *** Quits: bluedust_ (~bluedust@89.238.143.232) (Remote host closed the connection)
[21:45:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 256 seconds)
[21:47:26] *** Joins: fikran (~fikran@user/fikran)
[21:48:54] *** Joins: pztrn (~pztrnpztr@user/pztrn)
[21:51:34] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[21:55:13] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[21:57:09] *** Parts: mnx (marian@user/mnx) (tldr.chat - https://tldr.chat)
[21:57:17] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[22:02:00] *** Joins: paulgrmn__ (~paulgrmn@user/paulgrmn)
[22:04:43] *** Joins: goldfish (~goldfish@user/goldfish)
[22:15:51] *** Quits: moog (~moog@107.77.244.157) (Remote host closed the connection)
[22:16:15] *** Joins: moog (~moog@107.77.244.157)
[22:20:28] *** Joins: dsrt^ (~dsrt@207.5.54.6)
[22:22:20] *** Quits: Mattiaslndstrm (~Mattiasln@m37-2-42-97.cust.tele2.se) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:25:19] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[22:28:31] *** Quits: yamchah2 (~yamchah2@user/yamchah2) (Remote host closed the connection)
[22:28:50] *** Joins: yamchah2 (~yamchah2@user/yamchah2)
[22:30:07] *** Joins: goldfish (~goldfish@user/goldfish)
[22:32:42] *** Joins: mfiano (~mfiano@li1282-157.members.linode.com)
[22:33:30] <mfiano> Happy holidays, everyone. I'm new here. I decided to sit down and learn Go today.
[22:33:55] <skrzyp> good idea
[22:35:57] *** Quits: paulgrmn__ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[22:36:18] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[22:38:15] *** Quits: lilgopher (~textual@2601:241:8000:38f0:e94c:1cdc:20ac:a769) (Quit: Textual IRC Client: www.textualapp.com)
[22:43:37] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[22:47:39] *** Joins: goldfish (~goldfish@user/goldfish)
[22:47:51] <seebs> good luck. i recommend the Go Tour as a starting point probably.
[23:02:14] *** Joins: mobbi_ (~quassel@dfsm20yfq3mh3v8xkw21y-3.rev.dnainternet.fi)
[23:05:32] *** Quits: mobbi (~quassel@dfsm20yffzpyzxswhnw0t-3.rev.dnainternet.fi) (Ping timeout: 240 seconds)
[23:09:08] *** Joins: codebam (~codebam@user/codebam)
[23:10:04] *** Quits: fub (uid190747@id-190747.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[23:10:33] *** Quits: sus (~zeromomen@user/zeromomentum) (Quit: Ping timeout (120 seconds))
[23:11:46] *** Joins: sus (zero@user/zeromomentum)
[23:55:18] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 268 seconds)
[23:56:23] *** Joins: locrian9 (~mike@99-153-255-194.lightspeed.irvnca.sbcglobal.net)
[23:56:47] *** Joins: fikran (~fikran@user/fikran)
[23:58:48] *** Quits: dalek-caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek-caan)
