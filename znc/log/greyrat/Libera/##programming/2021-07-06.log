[00:00:02] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:02:24] <ITD4004> so i'm about to read about 24 bytes using struct.unpack function from the "struct" module
[00:02:40] *** Joins: mmfood (~mmfood@45.91.21.40)
[00:03:05] <ayenet4> what language?
[00:03:14] <ITD4004> python
[00:03:43] <ITD4004> i already have python 3.9.6 installed so testing my python scripts will be easier from there (i think)
[00:04:11] <ITD4004> anyway
[00:04:11] <chance> do you specifically need a c struct, or do you just want to parse bytes into a python data structure?
[00:04:17] <ITD4004> the latter
[00:04:46] <chance> string is built in, light, and confusing
[00:05:11] <chance> i endorse a third-party lib called bitstring, iirc it's a libre license so it should be okay for whatever you're doing
[00:05:11] <ITD4004> i'm not opening up a text file
[00:05:17] <chance> err, not string, struct. sorry. typo.
[00:05:19] <ayenet4> 24 sequential octets, or do you have to worry about endian related issues?
[00:06:05] <ITD4004> well
[00:06:07] <chance> bitstring offers what it sounds like, and an equivalent stream object, and its notation is much easier than shoving stuff in an f-string, and its output mechanism is just streamlike. go right into your data structure, one variable at a time, specified data time or specified number of bits. no bs.
[00:06:28] <chance> not the question you asked, just my two cents after a couple projects involving binary protocols
[00:06:55] <chance> specified data *type*. jeez, i'm sorry. i overslept and i'm on my first cup of coffee
[00:07:18] <chance> all of that said, if you're *gonna* use struct, ask away
[00:07:31] *** Joins: arcatech (~arcatech@user/arcatech)
[00:07:36] <ITD4004> well, i'm thinking more about 6 values within a tuple
[00:07:38] <ITD4004> like this
[00:07:42] <ITD4004> cdrom2352_fields = struct.unpack('>LLLLLL', data1[cdrom_position])
[00:08:15] <chance> i suppose that's not too bad as struct goes
[00:08:30] <ITD4004> yeah but that's the thing
[00:08:36] <ITD4004> my script is currently 78 lines long
[00:08:49] <ITD4004> and when i execute it i get this error
[00:08:54] <ITD4004> TypeError: a bytes-like object is required, not 'int'
[00:09:13] <ITD4004> even though the file i'm trying to open is not an binary file
[00:09:56] <chance> nothing to do with the file you're reading. it's when you pass the data to whatever step is throwing that (been a while) that it expects to be a bytes object, or iirc an iterable of bytes
[00:10:14] <chance> file I/O is, by and large, unrelated to what you do with the data after that. make it binary.
[00:12:54] <chance> i think the best question at this point is what spec you're trying to implement
[00:13:42] <ITD4004> i'm trying to "split" various points of data into individual files
[00:13:43] <ITD4004> for personal use
[00:13:56] <ITD4004> i tried to "make it binary", like this
[00:14:03] <ITD4004> https://bpa.st/K72Z44H7J3B6G2YOOYWJ6LF4KQ
[00:15:15] *** Quits: locknet (~locknet@static.193.168.itcsa.net) (Quit: Leaving)
[00:15:47] <ITD4004> in the first two lines, i "open" a file and set it as "file1", then i pass that file to "data1"
[00:16:27] <ITD4004> after that, i read through 2352-byte blocks of data at least three times, basically walking through parts of the file
[00:18:00] <ITD4004> that "TypeError" message was reported with line 6 being what's wrong with it
[00:18:37] <ITD4004> (again, what i posted here is just a snippet of code)
[00:18:40] <GeDaMo> Wouldn't data1[cdrom_position] be a single byte?
[00:21:14] <GeDaMo> What happens if you use a slice e.g. data1[cdrom_position:cdrom_position+24] ?
[00:21:18] <ITD4004> ahhh
[00:21:20] <ITD4004> i did just that
[00:21:40] <ITD4004> turns out i would need to specify
[00:21:48] <ITD4004> not only the file i want to do a struct.unpack on
[00:22:05] <ITD4004> but also the relative position of the variable i was about to read
[00:22:47] <GeDaMo> Ah yeah, there's an unpack_from where you can specify an offset
[00:22:56] <ITD4004> yeah, there's that
[00:23:55] <GeDaMo> There's also calcsize which will calculate how many bytes are in a format
[00:24:10] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[00:24:50] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[00:26:43] <chance> this is why i gave up and started using bitstreams whenever practical =P
[00:27:28] *** Quits: jaysicks (~jaysicks@BC9C1F67.mobile.pool.telekom.hu) (Remote host closed the connection)
[00:27:43] *** Joins: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de)
[00:28:01] *** Joins: jaysicks (~jaysicks@BC9C1F67.unconfigured.pool.telekom.hu)
[00:30:39] *** Quits: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de) (Client Quit)
[00:34:05] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:35:18] *** Quits: kericsson (~kericsson@user/kericsson) (Quit: Textual IRC Client: www.textualapp.com)
[00:35:48] *** Joins: Qchmqs_ (~qchmqs@41.104.251.143)
[00:37:30] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Quit: Nos vemo)
[00:38:51] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: Goodbye, cruel world!)
[00:39:12] *** Joins: Codaraxis_ (~Codaraxis@ip68-5-90-227.oc.oc.cox.net)
[00:39:28] *** Quits: Qchmqs (~qchmqs@user/qchmqs) (Ping timeout: 246 seconds)
[00:39:32] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[00:41:11] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[00:41:22] *** Joins: [Kalisto] (~nico@user/kalisto/x-8968079)
[00:42:34] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[00:44:51] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[00:45:06] *** Quits: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com) (Quit: Haxxa flies away.)
[00:46:19] *** Joins: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de)
[00:46:37] *** Joins: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net)
[00:48:48] *** Joins: Haxxa (~Haxxa@122-199-59-136.ip4.superloop.com)
[00:48:50] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[00:48:58] *** Quits: teut (~teut@106.214.16.139) (Quit: Connection closed)
[00:49:37] *** Quits: odnes (~odnes@109-178-178-58.pat.ren.cosmote.net) (Read error: Connection reset by peer)
[00:49:41] *** Quits: xff0x (~xff0x@2001:1a81:5326:300:76d0:4869:6e32:a9fa) (Ping timeout: 256 seconds)
[00:49:59] *** Joins: xff0x (~xff0x@185.65.135.235)
[00:50:29] *** Quits: Andalu30 (~andalu30@85.137.21.37.dyn.user.ono.com) (Remote host closed the connection)
[00:51:48] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[00:52:18] *** Joins: Endust (leggt@iceland.sdf.org)
[00:53:51] *** Joins: Y00fie (~yoofie@097-070-135-101.res.spectrum.com)
[00:54:02] *** Quits: GeDaMo (~GeDaMo@user/gedamo) (Quit: Leaving.)
[00:54:58] *** Quits: DevAntoine (~DevAntoin@78.196.234.32) (Remote host closed the connection)
[00:55:55] *** Quits: Yoofie (~yoofie@097-070-135-101.res.spectrum.com) (Ping timeout: 246 seconds)
[00:56:58] *** Quits: xff0x (~xff0x@185.65.135.235) (Ping timeout: 240 seconds)
[00:56:58] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[00:59:00] <Joanna> Recursion is not harmful
[00:59:09] *** Joins: xff0x (~xff0x@2001:1a81:5326:300:76d0:4869:6e32:a9fa)
[00:59:13] *** Joins: ixil (~ixil@82.197.178.137)
[00:59:45] *** Parts: coax (sid481900@id-481900.brockwell.irccloud.com) ()
[00:59:47] *** Quits: audiocat (~audio@2603-8081-1800-6a65-0b74-5e4c-6914-680d.res6.spectrum.com) (Ping timeout: 252 seconds)
[01:00:17] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[01:00:20] <Izem> can be, stack overflow
[01:00:47] <Izem> has anyone seen recursion done on the heap?
[01:02:15] <oldlaptop> That's more or less what "stackless Python" and Tcl 8.6+ do
[01:02:40] <Izem> cool
[01:02:55] <Izem> for online services, the norm is to use http right?
[01:02:57] <oldlaptop> see also all the functional languages that explicitly specify that tail-call optimization must occur
[01:03:07] <Joanna> That depends on what you are recursing and if your code is written correctly
[01:03:44] *** Joins: audiocat (~audio@2603-8081-1800-6a65-3df3-2c9a-29d8-f6c1.res6.spectrum.com)
[01:04:11] *** Quits: ayenet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[01:04:16] <Izem> will happen even if written correctly
[01:04:23] *** Joins: ayenet4 (~0x100@32.211.211.39)
[01:04:33] <Izem> is there a way to exit before stack overflow?
[01:04:37] <Izem> exception maybe?
[01:04:47] <Izem> well, that would be to late
[01:04:55] <Joanna> Recursion can be replaced with loops but it is easier to use recursion
[01:05:07] <Izem> depends
[01:05:10] *** Joins: jazzy (~jaziz@2600:380:c151:8f83:b1f2:8a9f:200e:f932)
[01:05:36] <Izem> easier to go from loop to recursion imo
[01:05:42] <Joanna> You need an exit condition that will be met in the recursive procedure
[01:05:45] <Izem> recursion to loop could be insane
[01:06:11] <Izem> e.g. the tower of hanoi
[01:07:06] <Joanna> Recursion is for when your not sure how many times you need to do something
[01:07:10] <mrig> Go has split stacks which grow dynamically each routine its own stack, handy for recursion.
[01:07:13] <mrig> http://gcc.gnu.org/wiki/SplitStacks
[01:07:36] <Izem> nice, that guy works on gcc go
[01:07:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:07:45] <mrig> yes cool stuff
[01:08:21] <oldlaptop> Izem: "stack overflow" is not a problem with recursion in the abstract, it's a specific, technical problem with a common implementation of recursion
[01:08:25] <chance> python has a maximum recursion depth, there's the obvious "keep a counter" and set your own max depth. there are definitely ways to proof it against an overflow.
[01:08:27] <Izem> recursion will be safer though
[01:08:42] <Izem> oh good point
[01:09:07] <oldlaptop> and it doesn't affect many recursive algorithms in practice, since many recursive algorithms don't tend to get all that deep in the first place
[01:09:15] <Joanna> Using a loop instead of recursion would probably require more complicated code
[01:09:46] <oldlaptop> just looking at some of the classic academic examples, the usual recursive Towers of Hanoi doesn't generaly go very deep at all
[01:10:10] <Izem> depending on the number of disks yeah
[01:10:18] <Izem> it can get big really quickly
[01:10:28] <oldlaptop> you're going to have integer overflow long before you run out of stack space for the naive factorial example, probably Fibonacci too
[01:11:03] <Izem> yeah
[01:11:27] <ayenet4> usually you can adjust stack size a program runs with if it becomes a problem
[01:12:00] *** Quits: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:12:01] <Joanna> I use recursion for traversing tree structures
[01:12:16] <Izem> it would be interesting to see an implementation that uses multiple stacks, sorta related to split stacks
[01:12:23] <Donitz> recursion is to be avoided whenever possible
[01:12:30] <Izem> but for specific stuff, like one just for procedure calls
[01:12:41] *** Quits: Retropikzel (~Retropikz@2001:999:200:d3c:b0af:51bb:d491:3396) (Quit: Leaving)
[01:12:43] *** Joins: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de)
[01:12:59] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:13:20] <edgar-rft> I've heard that earthquakes, nuclear explosions, asteroid impacts, lightning strokes, and gamma-ray bursts are highly harmful, too!
[01:13:20] <edgar-rft> Only saying, while you're whimpering that recursion might blow your stack :-)
[01:13:41] <mrig> Donitz: what makes you say that? What makes you say that?
[01:13:45] <Donitz> *shrug*
[01:13:55] <Donitz> I just like writing code which doesn't blow up in my face
[01:14:09] <ayenet4> yeah heap based would be ideal IMO
[01:14:09] <Joanna> Why does something useful need to be avoided ? That makes no sense
[01:14:28] <ayenet4> but then you have to handle failure cases
[01:15:06] *** Joins: tradar (~tradar@user/tradar)
[01:15:36] <ayenet4> and i don't want to rewrite DNS label decompression without recursion
[01:17:49] <Joanna> Recursion is amazing but it’s confusing for some
[01:19:07] <edgar-rft> summary: don't use recursion when you are confused
[01:19:19] <Donitz> or ever if you can avoid it
[01:19:25] <Donitz> use recursion in your own code
[01:19:29] <Donitz> or put warnings on it if you use it in a lib
[01:19:44] <ayenet4> you can always avoid it but the solution could end up being 10x's longer
[01:19:57] <Donitz> but generally faster
[01:20:16] <Donitz> function calls aren't cheap
[01:20:17] *** Joins: Guest59 (~Guest59@205.251.233.182)
[01:20:26] *** Joins: arcatech (~arcatech@user/arcatech)
[01:20:46] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 246 seconds)
[01:21:02] *** Quits: recursiveNode (~recursive@ip-86-49-255-180.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[01:21:44] *** Joins: Yoofie (~yoofie@097-070-135-101.res.spectrum.com)
[01:23:19] <ayenet4> also don't want to rewrite my fft code
[01:23:19] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[01:23:46] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 240 seconds)
[01:24:16] *** Quits: audiocat (~audio@2603-8081-1800-6a65-3df3-2c9a-29d8-f6c1.res6.spectrum.com) (Ping timeout: 246 seconds)
[01:24:32] *** Quits: Y00fie (~yoofie@097-070-135-101.res.spectrum.com) (Ping timeout: 252 seconds)
[01:24:45] <Donitz> I would not use recursion for an FFT
[01:24:50] <Donitz> well... I would just use numpy for fft
[01:24:52] <Donitz> with GPU support
[01:25:29] <ayenet4> ok but tis is like 12 lines of code
[01:25:29] <Donitz> no wait, that was pyfftw
[01:25:50] *** Quits: magla (~gelignite@55d431c4.access.ecotel.net) (Quit: Stay safe!)
[01:25:53] <Donitz> http://www.fftw.org/
[01:27:25] *** Quits: Pickchea (~private@user/pickchea) (Quit: Leaving)
[01:28:32] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Remote host closed the connection)
[01:28:33] *** Quits: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:29:26] *** Quits: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289) (Quit: WeeChat 2.8)
[01:34:26] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[01:34:50] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[01:35:39] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[01:36:22] <pyzozord> I'm wondering what's the nicest way to get terminal width and height in c
[01:37:34] *** Quits: tradar (~tradar@user/tradar) (Quit: tradar)
[01:37:53] <vdamewood> pyzozord: C doesn't even have a concept of a terminal.
[01:38:10] <vdamewood> pyzozord: So, you'll have to pick an OS.
[01:38:11] <Donitz> isn't that dependent on the platform?
[01:38:27] <Donitz> I bet there is a C lib for getting it
[01:38:30] <Donitz> which handles all the cases
[01:38:56] <vdamewood> For some sufficiently larg subset of all.
[01:38:59] <vdamewood> large*
[01:39:01] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[01:39:35] <vdamewood> pyzozord: Anyway, I would be surprised if ncurses didn't have something for that.
[01:41:07] <pulse> for windows there's GetConsoleScreenBufferInfo
[01:41:14] *** Joins: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de)
[01:41:30] *** Quits: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be) (Quit: Lost the game...)
[01:41:59] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:42:01] <pyzozord> oh sorry forgot to mention: linux x86_64
[01:42:16] * vdamewood curses at ncurses
[01:42:27] <pulse> see this gist pyzozord https://gist.github.com/jtriley/1108174
[01:42:29] <pulse> might help
[01:42:39] <pulse> oh jeez it's python lol
[01:42:41] <pyzozord> vdamewood: don't want to use third party libs if I can help it, I'd prefer to stick to core stuff from linux and gnu
[01:42:42] <pulse> sorry ignore that
[01:43:03] <vdamewood> pyzozord: ncurses is from GNU.
[01:43:06] <pulse> pyzozord, https://psychocod3r.wordpress.com/2019/02/25/how-to-get-the-dimensions-of-a-linux-terminal-window-in-c/
[01:43:18] <pulse> ioctl() is your friend
[01:43:53] <pyzozord> yeah I guess ioctl it is
[01:44:17] <pyzozord> btw how would I know it? I did check out man 2 sysclass but I wouldn't know ioctl had what I was looking for
[01:45:16] <pulse> like most developers, you squint your eyes, wish really hard, then open your eyes and go to google and find what you need :p
[01:45:31] <pulse> or your search engine of choice
[01:46:52] <pulse> i knew i needed this for windows once so it was fast to find, but then i searched for linux equivalent
[01:47:11] <vdamewood> linux equivalent conio.h
[01:47:11] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[01:47:21] <pyzozord> pulse: ok yeah fair, I guess what I am asking "how can I use official doccumentation to find such information". I know I can google. Point is, I want to learn to navigate official docs
[01:47:32] <pulse> i love conio.h
[01:47:36] <pulse> why did they get rid of it :(
[01:47:45] *** Quits: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:47:46] <pulse> pyzozord, it's faster to google tbh
[01:48:07] <pulse> although sometimes you run into this situation https://xkcd.com/979/
[01:48:13] <pulse> in which case docs-fu beats google-fu
[01:48:18] <pulse> but typically google-fu wins
[01:48:23] <pulse> just too many high power moves
[01:49:19] *** Joins: Trieste (~T@user/pilgrim)
[01:49:58] <ayenet4> if you care about w/h you might also want to handle SIGWINCH for when the dimensions change
[01:52:43] *** Quits: NEYi (~NEYi@109.251.216.38) (Quit: Leaving)
[01:54:29] <pyzozord> oh yeah good call
[01:54:52] <vdamewood> It's not a call, it's a signal. :P
[01:55:13] <pyzozord> good callback? :D
[01:55:25] *** Quits: xff0x (~xff0x@2001:1a81:5326:300:76d0:4869:6e32:a9fa) (Ping timeout: 246 seconds)
[01:55:32] <vdamewood> Slurp.
[01:56:21] *** Joins: xff0x (~xff0x@2001:1a81:5326:300:bf03:ba01:b458:4fad)
[01:57:21] *** Quits: immibis (~immibis@62.156.144.218) (Ping timeout: 258 seconds)
[01:59:14] *** Joins: immibis (~immibis@62.156.144.218)
[01:59:55] <pyzozord> when I return a struct from a function in c, that's returning by value right?
[02:01:37] <pulse> C doesn't have RVO right
[02:01:40] *** Joins: blahboybaz (~blahboyba@cpe-98-146-130-225.natnow.res.rr.com)
[02:02:11] *** Joins: Shashin (Shashin@gateway/vpn/protonvpn/shashin)
[02:02:17] <pulse> probably best to ask #c
[02:02:19] <pyzozord> rvo?
[02:02:29] <pulse> return value optimization
[02:02:40] <pulse> also known as copy elision
[02:02:54] <pulse> it's a C++ thing. it avoids copying when returning an object made on the stack
[02:03:09] <pulse> honestly not sure how it works in C, haven't coded in C in a bit
[02:03:23] *** Quits: matiss (~matiss@e01.edge.fi.he.srv.n256.net) (Changing host)
[02:03:23] *** Joins: matiss (~matiss@almalinux/web/matiss)
[02:03:28] *** Quits: Shashin (Shashin@gateway/vpn/protonvpn/shashin) (Client Quit)
[02:04:02] *** Quits: aradesh (~aradesh@user/aradesh) (Quit: WeeChat 1.9.1)
[02:04:04] *** Joins: Shashin (Shashin@gateway/vpn/protonvpn/shashin)
[02:04:26] <blahboybaz> Does node have a way to write a class constructor so that it can take a parameter or not take a parametery and work either way? [ ie: let instance = new someClass(6); || let instance = new someClass(); ] and either world work? Even if I just know what doeing that is called I could look it up and learn.
[02:04:43] <blahboybaz> parametry\parameter
[02:04:53] <blahboybaz> I can't spell
[02:05:12] <vdamewood> pulse: C just simply doesn't have it.
[02:05:31] <pulse> so you always return copies?
[02:05:36] <ayenet4> https://en.wikipedia.org/wiki/X86_calling_conventions
[02:05:59] <ayenet4> seems quite tricky
[02:06:11] <vdamewood> pulse: Structs can be allocated by the callee, and the return value stored in that space.
[02:06:33] <pulse> right, that makes sense
[02:06:41] <pulse> that's how all C APIs are structured
[02:06:49] <Arahael> raw copies are generally cheap though when its already cached
[02:07:19] *** Quits: mnd999_ (~mark@2001:8b0:da3:76a2:b30d:a07c:7290:5ed6) (Ping timeout: 246 seconds)
[02:08:04] <vdamewood> pulse: Oops. s/callee/caller/
[02:08:05] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[02:08:15] <pulse> yeah i understood
[02:08:38] <pulse> i remembered how i call C APIs
[02:08:44] <pulse> so that immediately made sense
[02:10:11] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:12:01] <pyzozord> when doing 30 fps game in terminal in c I need to print every 33ms. Printing will take some time, say 10ms. Then my game logic, say 5ms. Then I need to wait for 18ms. I don't want to do empty loops, can I be a nice citizen and give back control to os until next frame?
[02:12:37] <pyzozord> I mean otherwise my game process will be taking 100% cpu and the laptop will turn into a drone
[02:12:50] <pulse> yes
[02:13:01] <pulse> just sleep for a few ms in the game loop
[02:13:16] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[02:13:17] <pulse> but you won't get stable fps in a terminal window anyway
[02:13:30] <pulse> but you can totally yield CPU time by sleeping
[02:15:35] <pyzozord> actually gameloop seems pretty greedy, in ascii games, many frames may be the same
[02:15:44] <pyzozord> I'm wondering if there are alternatives
[02:16:32] <pulse> last time i did snake in terminal i just updated the game every 500ms or something like that
[02:16:38] <pulse> so it depends on the game
[02:16:40] <pyzozord> like some kind of adaptive fps
[02:17:00] <pulse> if you're doing a text adventure you can just update whenever the user inputs something
[02:17:16] <pulse> terminal isn't a very good platform for games tbh. i've done a few and it's always quirky
[02:17:18] <pyzozord> thing is I still want animations like rain or whatever
[02:17:24] <pulse> and you have to hack around certain things and even then it's quirky
[02:17:50] <AlexDelarge> add a keyboard shortcut to toggle gfx/animations
[02:18:05] <pulse> basically how i'd do a text/ascii based game these days is simply use SDL2 or the likes and then have my own monospace font and a kind of fake terminal display
[02:18:28] <pulse> it's infinitely easier to work with
[02:18:38] <pulse> but then it's not a "true" terminal game i suppose so
[02:18:45] <pulse> depends what you want to do i guess
[02:18:50] <pyzozord> I think ideally it would be some kind of adaptive fps that fluctuates. Fps goes up, up to 30, depending on what animations are demanding, and goes down all the way down to 0 when nothing is happening
[02:19:17] <pulse> with SDL you could even do a CRT filter and stuff like that
[02:19:21] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:19:27] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:19:38] <pulse> pyzozord, that would be ideal but do some prototypes first to see how it looks like
[02:19:44] <pulse> it's all fine in theory but terminals are quirky
[02:20:03] <pulse> especially the windows terminal, it's probably better on linux ones
[02:21:30] *** Quits: Leone (~Leo@45.72.238.153) (Read error: Connection reset by peer)
[02:21:35] <mrig> pyzozord: you could run a timer, and then subtract from your sleep duration whatever time you have consumed during a loop.
[02:21:55] <pyzozord> I know I know. but I don't want to do SDL or opengl. I just want to write a dumb simple game with prints
[02:21:58] <pyzozord> printfs
[02:22:05] <pyzozord> putchars :P
[02:23:19] *** Quits: Guest59 (~Guest59@205.251.233.182) (Ping timeout: 246 seconds)
[02:23:21] <mrig> you could write a frogger and do putlogs? :P
[02:23:52] <pyzozord> hmm yes this adaptive fps system seem to be a purly a game domain problem. I should make some constructs for animations and registering frames or something like that
[02:23:53] <mrig> might need to make a font though to get it convincing.
[02:23:53] *** Quits: trace987 (~trace@ip5b429953.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[02:24:14] <pyzozord> anyway the thing should be reactive, not looping every 33ms constantly
[02:25:26] <pyzozord> oh I know. There should be many different times. For example monsters that move 1 square once a second. And rainy area that updates say 10 times per second
[02:25:33] <pyzozord> s/times/timers/
[02:25:44] <pyzozord> *game timers
[02:25:51] <pyzozord> and those game timers can trigger animations
[02:26:27] <pyzozord> and animations trigger singleton rendering module that will print to the screen at most 30 times per second
[02:27:58] <pyzozord> how can I make timers in c on linux? Such that they call my function after x time?
[02:28:15] *** Quits: Akuli (~Akuli@82-203-160-161.bb.dnainternet.fi) (Quit: Leaving)
[02:29:05] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[02:29:10] <pulse> with a constant framerate you can make tick-based timers
[02:29:17] <ayenet4> and sdl2 is so slow if you have no need for it's double buffering
[02:29:32] <pulse> with variable framerate it's gonna take a bit more imagination
[02:29:54] *** Joins: v01d4lph4 (~v01d4lph4@122.160.65.250)
[02:29:54] *** Quits: v01d4lph4 (~v01d4lph4@122.160.65.250) (Changing host)
[02:29:54] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[02:31:56] <pulse> actually you can easily do accumulators with variable framerate and then add that to some kind of tick based system
[02:32:03] <pulse> it's just not gonna be always accurate
[02:32:11] <pulse> but that shouldn't matter if it's just animations i think
[02:33:02] *** Quits: DALEK-SEC (~dalek@www.pathweb.org) (Quit: DALEKS REIGN SUPREME Ø°`)
[02:33:08] <pyzozord> im not sure if I'm following but you are suggesting variable time rendering, but still fixed time game tick?
[02:33:09] <Arahael> ayenet4: what!?
[02:33:10] *** Joins: DALEK-SEC (~dalek@pathweb.org)
[02:33:15] <Arahael> ayenet4: sdl2 is slow?
[02:33:25] <ayenet4> compared to MIT-SHM yeah
[02:33:30] <ayenet4> or maybe i was using it wrong
[02:33:31] <pulse> pyzozord, honestly i don't have enough context to suggest anything, i'm just thinking out loud :p
[02:33:48] <pyzozord> pulse: same here :D
[02:33:59] <Arahael> ayenet4: i am not familiar with MIT-SHM
[02:34:05] <ayenet4> x11 shared memory
[02:34:08] <pulse> pyzozord, do what every sober game dev does and prototype before you implement. it's easier that way
[02:34:11] <ayenet4> extension
[02:34:22] <pyzozord> just entertaining myself with some hypothetical game engine design
[02:34:23] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 252 seconds)
[02:34:38] <pulse> i still think it's easier with SDL2 and a monospace font
[02:34:41] <Arahael> ayenet4: ah, well, sdl2 is often used as an opengl surface.
[02:34:49] <pulse> preferable amber orange
[02:34:56] <pulse> with a nice CRT filter ... mmhm
[02:35:12] <ayenet4> write it as a snes rom so you don't evn need a posix terminal
[02:35:19] <pulse> heh
[02:35:25] <ayenet4> it's all fixed width characters
[02:35:33] <pulse> or a DOS compatible game
[02:35:35] <pyzozord> I think I could do something like this: while (true) { sleep(maketick()) }
[02:35:37] <pulse> then you can run it in dosbox on any system
[02:35:43] <pulse> -and- you get to use conio.h
[02:35:45] <pulse> win-win
[02:36:18] *** Joins: Guest59 (~Guest59@205.251.233.182)
[02:36:18] <pyzozord> maketick, does entire game, also after towards the end it will know what animation are going to play next and when, so it can return how long nothing happens
[02:36:29] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[02:36:51] <ayenet4> i be back later if anone wants more SNES details  i spent a little over a week learning the basics
[02:36:58] *** Quits: ayenet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[02:37:14] <pulse> while(1) { check_input(); update_stuff(); if (needs_redraw) { redraw_stuff(); } sleep(constant_time); }
[02:37:17] <pulse> why not something like this ^
[02:37:49] <pyzozord> because there will be still many "blank" game ticks
[02:37:55] <pulse> so what
[02:38:16] <pulse> as long as you yield to CPU it's still gonna be 0.1% CPU usage if even
[02:38:24] <pulse> and sleep yields
[02:39:31] <pyzozord> ah my example doesn't take into account user input, user input would also call maketick() I guess. and I guess there should be global "ttl_time" that maketick() updates, and the gameloop would be while(1) { maketick(); sleep(ttl_time); }
[02:39:34] *** Joins: Nact (~l@host-85-27-121-203.dynamic.voo.be)
[02:40:32] <pyzozord> and somewhere else, unrelated, there would be input handling function input(key) { update_input_global(); maketick(); }
[02:40:49] <pyzozord> hmm no that's still not it
[02:41:06] <pyzozord> user input would need to be able to break the sleep()
[02:41:52] <pulse> an event queue is typically used
[02:42:24] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:b8ab:68cd:33ce:8506) (Quit: No Ping reply in 180 seconds.)
[02:42:25] *** Joins: gioyik_ (~gioyik@gateway/tor-sasl/gioyik)
[02:42:32] <pyzozord> pulse: not sure how would it apply in this situation
[02:42:39] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Remote host closed the connection)
[02:43:32] *** Quits: Guest59 (~Guest59@205.251.233.182) (Quit: Client closed)
[02:43:39] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:b312:2bd2:4181:9b72)
[02:44:08] <pulse> me neither honestly
[02:44:18] *** Quits: carploader (~bull@185.117.72.168) (Ping timeout: 240 seconds)
[02:44:28] <pulse> i forgot how i solved input in my own terminal games
[02:44:34] <pulse> i'd have to find the old code
[02:44:46] <pulse> it wasn't very hard i think
[02:45:17] <pyzozord> i can just make fixed tick like you suggested, but tring to figure out if I can avoid that
[02:47:55] <pyzozord> ah wait, i can do aa longjump into the gameloop heheh
[02:48:11] <pyzozord> that would be very bad and ugly though
[02:48:27] <pyzozord> signal handler that turns into rendering loop
[02:48:31] *** Quits: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea) (Quit: WeeChat 3.2)
[02:49:06] <pyzozord> what do AAA games do? Do they sleep() too?
[02:49:33] <pulse> if they want to save battery
[02:50:43] *** Quits: Qchmqs_ (~qchmqs@41.104.251.143) (Ping timeout: 246 seconds)
[02:50:59] *** Joins: hexfive (~eric@50.35.83.177)
[02:52:10] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 240 seconds)
[02:52:36] <DarkTrick> **Q** Has a double slash in a linux path any valid meaning? like /tmp/downloads//personaldownloads
[02:52:46] <DarkTrick> (I guess not, but I wanted to make sure)
[02:53:16] <blahboybaz> Is js (and node?) === to ecma script standard? Does it implement the whole standard parfectly?
[02:53:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 252 seconds)
[02:53:42] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[02:54:37] *** Quits: freakazoid333 (~freakazoi@72.168.177.12) (Read error: Connection reset by peer)
[02:55:17] *** Joins: freakazoid333 (~freakazoi@72.168.177.12)
[02:55:23] <pyzozord> heh, looks like quake is using sleep too
[02:55:54] <pyzozord> pulse: I guess you were right and everyone just uses sleep, big or small
[02:55:57] <pulse> everyone uses sleep in mainloop
[02:56:03] <pulse> because otherwise you get 100% cpu usage
[02:56:20] <pulse> even if you sleep for the tiniest bit it drops down to single digit %
[02:57:03] <pulse> blahboybaz, i would imagine so but i don't really know. i'd ask #javascript
[02:58:14] <Arahael> pulse: there are alternatives to *sleep*, but yes, everybody does something so that the cpu isnt busy.
[02:58:42] <pulse> right
[02:59:05] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.2)
[03:00:47] *** Joins: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289)
[03:01:24] <blahboybaz> pulse: Thanks. I think I stumbled on something that talks about it
[03:01:32] *** Quits: Tempesta (Tempesta@user/tempesta) (Quit: See ya!)
[03:02:28] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[03:03:10] *** Quits: federico_it (~textual@151.51.82.235) (Quit: Textual IRC Client: www.textualapp.com)
[03:04:09] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:04:17] *** Quits: _derpy_ (~quassel@dslb-002-203-130-218.002.203.pools.vodafone-ip.de) (Quit: No Ping reply in 180 seconds.)
[03:04:22] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Ping timeout: 246 seconds)
[03:04:47] *** Joins: Tempesta (Tempesta@user/tempesta)
[03:05:23] *** Joins: derpy (~quassel@dslb-002-203-130-218.002.203.pools.vodafone-ip.de)
[03:06:20] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[03:12:25] <pyzozord> hmm I'm not sure, does sleep() continue if in the middle there was user input signal?
[03:12:58] *** Quits: rifl (~user@user/rifl) (Ping timeout: 240 seconds)
[03:13:25] *** Joins: carploader (~bull@185.117.72.168)
[03:13:32] <Izem> which one?
[03:15:14] *** Quits: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289) (Quit: WeeChat 2.8)
[03:15:38] <pyzozord> I'm not sure, I think SIGTTIN
[03:17:23] *** Quits: Shashin (Shashin@gateway/vpn/protonvpn/shashin) (Ping timeout: 252 seconds)
[03:23:15] <vdamewood> pyzozord: macOS man 3 sleep: suspends execution of the calling thread until
[03:23:15] <vdamewood>      either seconds seconds have elapsed or a signal is delivered to the
[03:23:15] <vdamewood>      thread and its action is to invoke a signal-catching function
[03:23:36] <vdamewood> Oops. I was expecting that to post as a single line.
[03:23:49] <pyzozord> perfect!
[03:23:55] <pyzozord> then that is the way
[03:24:05] <vdamewood> This is the way.
[03:24:19] *** Quits: blahboybaz (~blahboyba@cpe-98-146-130-225.natnow.res.rr.com) (Ping timeout: 246 seconds)
[03:24:52] <pulse> the way found, installing sneakers
[03:24:58] <vdamewood> By the way, does anyone know what the original Unix manual chapter numbers meant?
[03:25:15] <pyzozord> while (1) { sleep(tick(input_queue)) } \n int handle_input_signal() { push_even_to(input_queue) }
[03:25:38] <pyzozord> variable duration gameloop tick and rendering
[03:26:15] *** Joins: rifl (~user@user/rifl)
[03:26:38] *** Quits: rifl (~user@user/rifl) (Remote host closed the connection)
[03:26:43] <pyzozord> inpu signal pushes even to to input_queue and "breaks" the sleep resuming normal execution after handling of the even, which means it will go back to the while loop
[03:27:47] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[03:28:09] <pyzozord> the game loop will make longer and longer sleeps, untill let's say max 60s sleeps
[03:28:59] <pyzozord> whenver user makes input, it breaks the sleep, makes the run a tick, tick may register new animations and decide that it needs to run another tick in 33ms untill all animations are done
[03:29:26] <JuggleTux> vdamewood: man man has the chapter list
[03:29:43] <vdamewood> JuggleTux: For my system, sure.
[03:29:57] * pulse wonders what happens if you type man man man
[03:30:10] <vdamewood> It shows the man page for man twice.
[03:30:18] <pyzozord> vdamewood: I believe 3 means standard c library
[03:30:29] <vdamewood> pyzozord: Sure, it does *now*.
[03:30:44] <vdamewood> Did it mean that in 1972?
[03:30:49] <Izem> try cat-v? they probably have the older manuals
[03:30:58] <pyzozord> Izem: ah you were faster :D
[03:31:00] <pyzozord> http://man.cat-v.org/unix-1st/
[03:31:24] <Izem> so simple :)
[03:31:49] <pyzozord> some sections changed. 7 means misc stuff now, it was booting/login back then
[03:32:35] <pyzozord> oh man, i'm so excited for my variable duration gameloop ticks now
[03:33:20] <pyzozord> I bet all AAA games use this realy
[03:34:08] <pyzozord> except they can assume they will render something every 16ms. In ascii I might go without rendering for few seconds even
[03:34:13] <pyzozord> ok need to sleep
[03:34:14] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Quit: leaving)
[03:35:15] <vdamewood> Dammit... he left before I could thank him.
[03:35:25] <vdamewood> Izem: Thanks.
[03:35:35] <Izem> np
[03:35:58] <vdamewood> Interesting that there's no ection 4 or 8.
[03:35:59] *** Quits: mmfood (~mmfood@45.91.21.40) (Ping timeout: 252 seconds)
[03:36:03] <vdamewood> section*
[03:36:21] <vdamewood> And section 7 is no longer around as far as I can tell.
[03:36:46] <vdamewood> Hmm, man 7 intro on macOS: intro -- miscellaneous information pages
[03:37:11] <vdamewood> Cool. The man page is dates June 5, 1993.
[03:37:14] *** Quits: Inari (~Pinkishu@p508ef018.dip0.t-ipconnect.de) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[03:37:50] *** Quits: vitorgonc (~vitorgonc@2804:d55:580c:5e00:e1b5:27ef:4d7b:f029) (Remote host closed the connection)
[03:37:58] <vdamewood> With a date like that, this man page look like it hasn't been edited since 4.4BSD.
[03:38:02] *** Quits: kmh (~kmh@p200300df5f069e00d0e5bde3844d0c37.dip0.t-ipconnect.de) (Quit: Leaving)
[03:41:16] *** Quits: jaysicks (~jaysicks@BC9C1F67.unconfigured.pool.telekom.hu) (Remote host closed the connection)
[03:42:34] *** Quits: Yoofie (~yoofie@097-070-135-101.res.spectrum.com) (Ping timeout: 240 seconds)
[03:42:38] *** Joins: Y00fie (~yoofie@097-070-135-101.res.spectrum.com)
[03:47:25] *** Quits: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d) (Ping timeout: 246 seconds)
[03:47:39] *** Quits: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3) (Quit: Konversation terminated!)
[03:48:44] <JuggleTux> vdamewood: looks like the chapter numbers come from the Unix Programmer's Manual from 1971 https://www.bell-labs.com/usr/dmr/www/manintro.pdf
[03:49:04] <Izem> does the unix model make sense for a PC?
[03:50:07] <vdamewood> JuggleTux: My question wasn't so much where they come from, but what they meant in the original manual.
[03:50:17] <vdamewood> But there's a list on page 2, so yay!
[03:52:43] *** Joins: kmh (~kmh@p200300df5f069e00d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[03:52:44] <vdamewood> Izem: model?
[03:53:17] <Izem> well the approach to os design
[03:54:20] *** Joins: srikavin (~srikavin@user/srikavin)
[03:54:53] <vdamewood> Oay, then what do you mean by PC? PC in the sinse of an Intel-based system based on the IBM PC? Or just a computer for use by a single person?
[03:54:57] <vdamewood> Okay*
[03:55:13] *** Quits: Guest5169 (internot@2607:5300:60:21b::1) (Changing host)
[03:55:13] *** Joins: Guest5169 (internot@user/scarecr0w)
[03:55:33] *** Guest5169 is now known as Scarecr0w
[03:55:59] <Izem> single person, like personal computing
[03:56:20] <vdamewood> Well, It works well for me.
[03:56:34] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[03:56:38] <vdamewood> My laptop is a certified Unix System.
[03:57:34] *** Quits: jazzy (~jaziz@2600:380:c151:8f83:b1f2:8a9f:200e:f932) (Ping timeout: 246 seconds)
[03:59:15] <Izem> well yeah they did it, but I guess I was just wondering if there was alternatives
[04:00:26] <vdamewood> Whatever Windows NT did.
[04:00:42] <vdamewood> Whatever AmigaOS did.
[04:01:39] <vdamewood> I kind of qish Haiku were stable and 'released', and that AmigaOS were released for x86-64 or ARM64.
[04:01:45] <vdamewood> s/qish/wish/
[04:02:26] <vdamewood> And, they all seem to work.
[04:02:39] <vdamewood> I mean, all of their models seem to work.
[04:04:39] *** Joins: Guest85 (~Guest85@pool-100-7-38-116.rcmdva.fios.verizon.net)
[04:06:04] <Scarecr0w> Excuse me please, has anyone here taken Amazon's Online Assessments for the interview process? I'm taking Part 1 soon and I don't quite know what to expect. If you have taken the Code Debugging part, what kind of questions can I expect? Sorry if this kind of conversations are not allowed.
[04:06:57] <Izem> oh ok, thanks
[04:07:37] <Izem> Scarecr0w part one is just information questions?
[04:08:37] <vdamewood> Dammit. I keep rebasing a certain branch on master after this that or the other change.
[04:09:05] <Scarecr0w> Izem: They said code debugging, fixing codes written by others, logical fixings etc. I'm not sure. The phase itself is called Code Debugging though, so I guess I can expect lots of code fixings etc.
[04:09:25] <Izem> right
[04:09:49] <Izem> I might have skipped that part
[04:10:10] *** Quits: Smeef (~deathonat@user/smeef) (Ping timeout: 252 seconds)
[04:10:18] <Scarecr0w> Wait, we can skip parts?
[04:14:01] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Ping timeout: 246 seconds)
[04:14:08] <vdamewood> In C++ your friends can see your private parts.
[04:15:35] *** Joins: w0x12ef (~w0x12ef@60.10.194.47)
[04:15:57] *** Quits: w0x12ef (~w0x12ef@60.10.194.47) (Remote host closed the connection)
[04:16:21] *** Joins: gggp (~gggp@125.33.94.235)
[04:16:22] *** Quits: shibboleth (~shibbolet@gateway/tor-sasl/shibboleth) (Quit: shibboleth)
[04:17:46] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 240 seconds)
[04:24:31] *** Quits: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 246 seconds)
[04:25:16] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[04:25:39] <Izem> Scarecr0w no, I think that was just a edge case
[04:29:29] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:32:13] <Izem> that reminds me, does any programming language have some sort of permissions system?
[04:32:47] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[04:33:13] <edgar-rft> you need a permission to use the language?
[04:33:49] <Izem> no, permission to use variables :P
[04:34:30] <vdamewood> chmod +r myVariable;
[04:35:03] <vdamewood> And really, for the most part, no. Programming languages use scoping rules to achieve that.
[04:36:59] <edgar-rft> for some people it would be better to first have to pass something like a "drivers license" before being allowed to write any code :-)
[04:37:35] *** Joins: gothicserpent (~gothicser@2605:e000:7fc0:62:ac91:6611:a2ee:3733)
[04:38:06] *** Joins: Smeef (~deathonat@98.15.38.21)
[04:38:06] *** Quits: Smeef (~deathonat@98.15.38.21) (Changing host)
[04:38:06] *** Joins: Smeef (~deathonat@user/smeef)
[04:39:34] *** Quits: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 246 seconds)
[04:40:15] <PlanckWalk> public/private covers maybe 90% of permissions needs.
[04:41:54] <PlanckWalk> Oh, forgot local.
[04:42:20] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:43:31] *** Joins: arcatech (~arcatech@user/arcatech)
[04:46:42] *** Quits: Nact (~l@host-85-27-121-203.dynamic.voo.be) (Quit: Konversation terminated!)
[04:46:44] <Arahael> public, private, protected, internal, fileprivate, friend...
[04:46:53] *** Quits: freakazoid333 (~freakazoi@72.168.177.12) (Read error: Connection reset by peer)
[04:46:53] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Read error: Connection reset by peer)
[04:47:16] <Izem> hmmm
[04:47:34] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[04:47:36] *** Joins: freakazoid333 (~freakazoi@72.168.177.12)
[04:47:38] <Arahael> But frankly I think it's overkill, indeed.  I think the delphi approach is good: Everything within a module is considered a friend - ie, effectively public.  Everything else should be private/public.
[04:47:52] <Izem> but yeah hierarchal permissions do make sense in a programming language
[04:47:58] <Izem> a lexically scoped one at least
[04:48:25] *** Quits: freakazoid333 (~freakazoi@72.168.177.12) (Read error: Connection reset by peer)
[04:48:44] *** Joins: freakazoid333 (~freakazoi@72.168.177.12)
[04:49:11] *** Joins: Lord_of_Life (~Lord@user/lord-of-life/x-2819915)
[04:50:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:52:20] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[04:55:45] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[04:56:34] *** Quits: b1101 (~b1101@ool-44c01641.dyn.optonline.net) (Quit: b1101)
[04:59:54] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[05:00:21] *** Joins: Nact (~l@host-85-27-121-203.dynamic.voo.be)
[05:00:41] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[05:01:27] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[05:02:10] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) ()
[05:06:11] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Ping timeout: 252 seconds)
[05:10:16] *** Joins: qaph (~weechat@user/qaph)
[05:11:04] *** Quits: Rounin (~david@cm-84.212.130.215.getinternet.no) (Ping timeout: 246 seconds)
[05:11:08] *** Quits: CoJaBo (~aztec@c-73-64-56-249.hsd1.pa.comcast.net) (Changing host)
[05:11:08] *** Joins: CoJaBo (~aztec@user/CoJaBo)
[05:12:31] *** Joins: gggp_ (~gggp@221.219.70.91)
[05:13:04] *** Quits: kron (~weechat@user/qaph) (Ping timeout: 268 seconds)
[05:13:06] *** qaph is now known as kron
[05:13:09] *** Joins: SeedyROM (~TheCheat@97-115-40-13.ptld.qwest.net)
[05:13:16] *** Quits: SeedyROM (~TheCheat@97-115-40-13.ptld.qwest.net) (Quit: Leaving)
[05:15:32] *** Quits: gggp (~gggp@125.33.94.235) (Ping timeout: 252 seconds)
[05:16:52] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:16:59] *** Joins: audiocat (~audio@2603-8081-1800-6a65-6fa6-a58d-88fc-903a.res6.spectrum.com)
[05:18:46] *** Quits: menace (~someone@user/menace) (Ping timeout: 246 seconds)
[05:18:53] *** Joins: menace (~someone@2001:a61:34d7:2201:1cae:276d:6e43:c5a7)
[05:19:21] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[05:19:40] *** Joins: rifl (~user@user/rifl)
[05:20:38] *** Joins: Shashin (Shashin@gateway/vpn/protonvpn/shashin)
[05:21:22] *** Quits: freakazoid333 (~freakazoi@72.168.177.12) (Quit: Leaving)
[05:23:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[05:24:31] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[05:24:34] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[05:27:56] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb.)
[05:29:33] *** Joins: Jigsy (~Jigsy@user/jigsy)
[05:30:14] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[05:30:40] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[05:30:56] *** Joins: gnux (~notadevel@user/gnux)
[05:30:59] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[05:34:42] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Ping timeout: 258 seconds)
[05:39:28] *** Joins: ayenet4 (~0x100@32.211.211.39)
[05:40:37] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[05:43:02] *** Quits: Mangy_Dog (Mange@user/mangy-dog/x-7397214) (Ping timeout: 252 seconds)
[05:44:53] *** Quits: Nact (~l@host-85-27-121-203.dynamic.voo.be) (Quit: Konversation terminated!)
[05:46:09] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[05:47:28] *** Quits: Shashin (Shashin@gateway/vpn/protonvpn/shashin) (Ping timeout: 246 seconds)
[05:48:40] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[05:49:14] *** Joins: pete443_ (~pete@user/pete443)
[05:50:02] *** Quits: pete443 (~pete@user/pete443) (Ping timeout: 258 seconds)
[05:52:39] *** Quits: gioyik_ (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 244 seconds)
[05:52:42] *** Quits: tonsofpcs (~tonsofpcs@cpe-67-251-117-244.stny.res.rr.com) (Ping timeout: 240 seconds)
[05:53:29] *** Joins: gioyik_ (~gioyik@gateway/tor-sasl/gioyik)
[05:54:33] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[05:54:41] *** Joins: tonsofpcs (~tonsofpcs@cpe-67-251-117-244.stny.res.rr.com)
[05:55:02] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[05:59:19] *** Joins: Shashin (Shashin@gateway/vpn/protonvpn/shashin)
[06:02:07] *** Quits: ______GOD______ (~GOD@user/god/x-9778998) (Quit: Turning off a portion of this simulation.)
[06:02:37] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[06:03:28] <Scarecr0w> Got 5/7 in Amazon's Code Debugging thing, 20 mins for 7 questions is a pain. Sorry about the rant.
[06:06:01] *** Quits: xff0x (~xff0x@2001:1a81:5326:300:bf03:ba01:b458:4fad) (Ping timeout: 246 seconds)
[06:08:00] *** Joins: xff0x (~xff0x@2001:1a81:5361:2500:82d3:7394:61f1:d68f)
[06:08:54] *** Quits: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[06:10:24] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb again.)
[06:12:59] *** Joins: Jigsy (~Jigsy@user/jigsy)
[06:15:09] *** Quits: misnor (~misnor@156.57.153.38) (Remote host closed the connection)
[06:15:44] *** Quits: hegstal (~hegstal@2a02:c7f:7604:8a00:1a67:2b79:31fc:1012) (Remote host closed the connection)
[06:19:11] *** Joins: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au)
[06:21:15] *** Joins: recursiveNode (~recursive@ip-86-49-255-180.net.upcbroadband.cz)
[06:21:31] <AndroidDAW> why do i get this? https://gist.github.com/mgood7123/a92681a677a2cb8585ffa6a66a9bbf4f
[06:24:39] *** Quits: ayenet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[06:28:08] <gggp_> nodejs seems popular in nowdays
[06:28:14] *** gggp_ is now known as gggp
[06:28:38] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Read error: Connection reset by peer)
[06:30:38] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[06:31:20] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[06:31:32] <EdFletcher> 'tis indeed
[06:31:36] *** Joins: silverballz (~hidden@47.202.102.10)
[06:31:55] *** Quits: jacktar (~whiteshad@gateway/tor-sasl/jacktar) (Ping timeout: 244 seconds)
[06:32:44] *** Joins: jacktar (~whiteshad@gateway/tor-sasl/jacktar)
[06:32:50] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 265 seconds)
[06:32:58] *** Quits: gnux (~notadevel@user/gnux) (Ping timeout: 240 seconds)
[06:33:00] *** Quits: silverwhitefish (~hidden@47.202.102.10) (Ping timeout: 272 seconds)
[06:33:04] *** Joins: Donitz_ (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[06:34:24] *** Quits: neltraus (~neltraus@supernova.neltraus.de) (Read error: Connection reset by peer)
[06:34:58] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 240 seconds)
[06:38:43] <gggp> what enforce this
[06:39:14] *** Joins: runicskull (~runicskul@user/runicskull)
[06:43:30] <luiserebii> Is the second edition of TCP/IP Illustrated, Vol. 1 bad? Should I try to find a copy of the first edition?
[06:44:22] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[06:50:25] *** Quits: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[06:53:44] *** Joins: anahat (~anahat@116.74.190.238)
[06:54:33] *** Joins: gggp_ (~gggp@125.33.95.211)
[06:55:37] *** Joins: gnux (~notadevel@cpe-70-95-57-162.san.res.rr.com)
[06:55:37] *** Quits: gnux (~notadevel@cpe-70-95-57-162.san.res.rr.com) (Changing host)
[06:55:37] *** Joins: gnux (~notadevel@user/gnux)
[06:56:28] *** Quits: gggp (~gggp@221.219.70.91) (Killed (NickServ (GHOST command used by gggp_!~gggp@125.33.95.211)))
[06:56:30] *** gggp_ is now known as gggp
[06:59:34] <vdamewood> luiserebii: What have you heard?
[07:01:19] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 246 seconds)
[07:03:06] *** Joins: wei2912 (~wei2912@112.199.250.21)
[07:08:32] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:08:46] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[07:09:47] <vdamewood> Dammit, there's a book i want on Amazon, at a good price, and I don't have money in my checking account.
[07:12:58] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Ping timeout: 240 seconds)
[07:15:27] *** Quits: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com) (Ping timeout: 272 seconds)
[07:15:48] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:15:49] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[07:15:51] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:7133:e4e2:a4dd:98d5)
[07:16:17] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Read error: Connection reset by peer)
[07:17:00] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[07:17:50] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[07:18:43] *** Joins: b1101 (~b1101@ool-44c01641.dyn.optonline.net)
[07:19:20] *** anahat is now known as nsk__
[07:19:41] *** gioyik_ is now known as gioyik
[07:20:36] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[07:21:39] *** Quits: Twipply (~Twipply@user/twipply) (Quit: Leaving)
[07:23:31] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:24:29] *** Joins: neshpion (~neshpion@gateway/tor-sasl/neshpion)
[07:24:58] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[07:25:48] *** Joins: amigojapan (uid86330@id-86330.brockwell.irccloud.com)
[07:26:01] *** Joins: ayenet4 (~0x100@32.211.211.39)
[07:26:50] *** Joins: bayaz (~bayaz@user/bayaz)
[07:26:57] *** Quits: bayaz (~bayaz@user/bayaz) (Client Quit)
[07:27:24] *** Joins: bayaz (~bayaz@user/bayaz)
[07:29:50] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:29:57] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[07:31:54] *** Joins: pilyn (~pilyn@user/pilyn)
[07:32:33] *** Quits: Jigsy (~Jigsy@user/jigsy) (Quit: brb once more.)
[07:34:20] *** Joins: RedNifre_ (~michael@dslb-002-203-247-028.002.203.pools.vodafone-ip.de)
[07:37:00] *** Quits: bayaz (~bayaz@user/bayaz) ()
[07:37:11] *** Joins: Jigsy (~Jigsy@user/jigsy)
[07:37:20] *** Quits: RedNifre (~michael@dslb-002-206-109-212.002.206.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[07:37:32] *** Quits: sgt_chuckles (~sgt_chuck@pool-71-190-209-205.nycmny.fios.verizon.net) (Remote host closed the connection)
[07:38:38] *** Joins: aquijoule_ (~richbridg@213-225-13-36.nat.highway.a1.net)
[07:39:00] *** Quits: Donitz_ (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Read error: Connection reset by peer)
[07:40:52] *** Quits: richbridger (~richbridg@213-225-32-103.nat.highway.a1.net) (Ping timeout: 246 seconds)
[07:41:21] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[07:42:16] *** Quits: nsk__ (~anahat@116.74.190.238) (Quit: Leaving)
[07:43:09] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[07:43:45] *** Quits: pilyn (~pilyn@user/pilyn) (Quit: Leaving)
[07:43:56] *** Joins: anahat (~anahat@116.74.190.238)
[07:45:42] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[07:49:50] *** Joins: bayaz (~bayaz@user/bayaz)
[07:54:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 240 seconds)
[07:56:00] *** Joins: sheepduck (~sheepduck@user/sheepduck)
[07:56:00] *** Quits: netman69 (~netman@user/netman) (Remote host closed the connection)
[07:56:14] *** Joins: netman69 (~netman@user/netman)
[07:57:44] *** Quits: anahat (~anahat@116.74.190.238) (Quit: Leaving)
[07:57:46] *** Quits: sheepduck (~sheepduck@user/sheepduck) (Client Quit)
[08:02:35] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[08:04:59] *** Joins: nekobyte (~nekobyte@user/nekobit)
[08:05:15] *** Joins: pandakekok9 (~job@user/job)
[08:05:57] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[08:06:20] <decker> https://d3x0r.org/javascript/space-plasma2/ ( add flow indicator dots... added like deviation left/right... so in the gree.. things are blue are more positive(clockwise) in direction and things are red are more negative (counter clockwise)  so having blue to the left and red to the right is most forward...  although there are upstream paths that are the other way, they are harder to traverse...
[08:06:25] *** Quits: gggp (~gggp@125.33.95.211) (Ping timeout: 246 seconds)
[08:09:20] *** Joins: freakazoid333 (~freakazoi@72.168.176.187)
[08:09:48] *** Quits: freakazoid333 (~freakazoi@72.168.176.187) (Read error: Connection reset by peer)
[08:10:39] *** Joins: freakazoid333 (~freakazoi@72.168.176.187)
[08:11:32] *** Quits: nekobyte (~nekobyte@user/nekobit) (Ping timeout: 252 seconds)
[08:12:05] *** Quits: Y00fie (~yoofie@097-070-135-101.res.spectrum.com) (Ping timeout: 252 seconds)
[08:13:57] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[08:14:30] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[08:14:31] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[08:16:56] *** Joins: Crescendo (~Crescendo@user/crescendo)
[08:19:11] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Remote host closed the connection)
[08:23:42] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (Quit: codingcampbell)
[08:24:13] *** Joins: codingcampbell (~codingcam@user/codingcampbell)
[08:24:27] <InPhase> A colleague of mine is working on a research project about flaky test cases.  If anybody is interested there's a 15-minute software engineer survey gathering opinions and practices about these:  https://docs.google.com/forms/d/e/1FAIpQLSd9XBBEF6fdC-AffWeeEMX-sQDHyS4WHRlCtbrjVYxQa35ilQ/viewform
[08:24:49] <vdamewood> Yum, flakey!
[08:24:54] <InPhase> :)
[08:25:02] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[08:25:05] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[08:25:53] <vdamewood> And now I'm bored for some reason.
[08:25:56] <InPhase> vdamewood: I admit I spent the first 30 seconds of the survey contemplating whether it should be spelled flaky or flakey.  Both are accepted spellings, both always look wrong.
[08:27:16] <vdamewood> I figure flake + y, you know like bony.
[08:28:09] <vdamewood> Seriously, this language has a lot of cruft.
[08:28:26] <InPhase> Quite.
[08:29:52] <vdamewood> I think pulse mentioned something about how in English you can never figure out how something is spelled, but in Slovene you have a bajallion verb conjugations to remember.
[08:30:54] <vdamewood> (Slovene has 3 pluralities, and three genders. So, good luck remembering your dual masculine, and plural mixed masculine and feminine forms... or something like that.)
[08:31:06] <vdamewood> * three genders, *I think*
[08:34:05] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[08:34:51] <neshpion> but how many cases?
[08:35:03] <vdamewood> At least four.
[08:35:08] <neshpion> and do verbs come in perfective and imperfective flavorings? :^)
[08:35:57] <vdamewood> Probably
[08:37:16] *** Quits: CoderGuy (~CoderGuy@2601:644:101:4f20:24df:354b:17c0:ede0) (Quit: Leaving)
[08:39:47] *** Joins: vicfred (~vicfred@user/vicfred)
[08:41:58] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:42:02] *** Joins: soapsudsxx (~soapsudsx@209.221.40.138)
[08:47:25] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[08:47:29] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[08:48:40] *** Quits: Guest85 (~Guest85@pool-100-7-38-116.rcmdva.fios.verizon.net) (Ping timeout: 246 seconds)
[08:52:05] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[08:52:39] <luiserebii> vdamewood: I've heard that the second edition destroyed a lot of the clear writing and examples from the original author... the first edition is much better, although it does not describe IPv4 and has some outdated protocol information
[08:52:57] <luiserebii> I am thinking of just reading the 1st edition as a resul
[08:53:02] <luiserebii> s/resul/result
[08:53:05] <vdamewood> 4?
[08:54:01] <vdamewood> I'd say a book on networking that doesn't even describe IPv4 is worthless.
[08:54:14] <luiserebii> sorry, mistyped
[08:54:20] <luiserebii> IPv6 I meant
[08:54:20] <vdamewood> So 6?
[08:54:35] *** Joins: paulo_ (~paul0@user/paulo/x-9032687)
[08:54:42] <vdamewood> I'd say IPv6 is essential these days.
[08:54:49] <Arahael> luiserebii: I'd probably get the latest one, and given the rumour you heard, *maybe* consider getting the first edition if it turns out you can't understand it.
[08:55:23] <Arahael> It's probably fine.
[08:55:26] *** Quits: gothicserpent (~gothicser@2605:e000:7fc0:62:ac91:6611:a2ee:3733) (Quit: Leaving)
[08:56:11] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 252 seconds)
[08:58:25] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[09:01:02] *** Quits: hoochmonger (~hoochmong@user/hoochmonger) (Ping timeout: 252 seconds)
[09:02:43] *** Quits: soapsudsxx (~soapsudsx@209.221.40.138) (Remote host closed the connection)
[09:04:25] *** Joins: soapsudsxx (~soapsudsx@209.221.40.138)
[09:07:44] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[09:08:55] *** Quits: ac5tin (~ac5tin@user/ac5tin) (Quit: WeeChat 3.1)
[09:09:56] <InPhase> ipv6 is important, but most of the fundamentals of networking haven't changed in decades.
[09:10:44] <InPhase> It should be pretty trivial to patch on an understanding of ipv6.
[09:15:26] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[09:15:32] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[09:15:46] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[09:15:49] <Arahael> I still don't have ipv6.
[09:17:19] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:18:21] <neshpion> i'm waiting for ipv7
[09:18:38] *** Quits: Shashin (Shashin@gateway/vpn/protonvpn/shashin) (Ping timeout: 252 seconds)
[09:18:56] *** Joins: teut (~teut@106.214.16.139)
[09:19:26] <teut> https://www.ic.unicamp.br/~pannain/mc404/aulas/pdfs/Art%20Of%20Intel%20x86%20Assembly.pdf  pg 107
[09:19:40] <teut> There-fore, anything you can do with a small data bus can be done with a larger data bus as well;the larger data bus, however, may access memory faster and can access larger chunks ofdata  in  one  memory  operation.
[09:20:09] <teut> whats the logic for that a larger bus can access memory faster?
[09:20:15] *** Joins: qu4nt1n (~qu4nt1n@78.198.214.34)
[09:20:52] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Remote host closed the connection)
[09:21:27] <teut> may it be 32 wires or 16 wires, in a clock cycle  current will pass through all the wires  at the speed of electrons, ie speed of light
[09:21:40] <teut> so what is faster?
[09:22:22] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[09:22:35] <neshpion> you can get 32 bits in one cycle instead of only 16
[09:23:30] <teut> ok, so it was speed due to more data fetching at once
[09:23:33] <teut> thanks
[09:25:12] *** Quits: qu4nt1n (~qu4nt1n@78.198.214.34) (Quit: KVIrc 5.0.0 Aria http://www.kvirc.net/)
[09:29:13] *** Joins: haliucin1s (~haliucina@5.20.153.21)
[09:29:42] *** Quits: haliucinas (~haliucina@5.20.153.21) (Ping timeout: 272 seconds)
[09:30:01] *** Quits: riff-IRC (~riff-IRC@user/riff-irc) (Remote host closed the connection)
[09:30:43] *** Joins: v01d4lph4 (~v01d4lph4@122.160.65.250)
[09:30:43] *** Quits: v01d4lph4 (~v01d4lph4@122.160.65.250) (Changing host)
[09:30:43] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[09:33:07] *** Joins: systemmessages (~systemmes@pa49-195-143-152.pa.nsw.optusnet.com.au)
[09:35:19] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Ping timeout: 246 seconds)
[09:35:30] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[09:36:41] *** Joins: geonic (~geonic@144.202.104.101)
[09:36:41] *** Quits: geonic (~geonic@144.202.104.101) (Changing host)
[09:36:41] *** Joins: geonic (~geonic@user/geonic)
[09:38:04] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[09:39:05] *** Quits: teut (~teut@106.214.16.139) (Ping timeout: 252 seconds)
[09:40:15] *** Joins: Retropikzel (~Retropikz@2001:999:202:4432:e8f7:c7b2:5e6e:e9f2)
[09:45:39] *** Quits: PlanckWalk (~Planck@user/planckwalk) (Ping timeout: 268 seconds)
[09:45:54] *** Joins: PlanckWalk (~Planck@user/planckwalk)
[09:46:06] *** Quits: paulo_ (~paul0@user/paulo/x-9032687) (Quit: Leaving...)
[09:48:34] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[09:51:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:54:18] *** Quits: TechTest (uid283215@id-283215.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[09:54:18] *** Quits: systemmessages (~systemmes@pa49-195-143-152.pa.nsw.optusnet.com.au) (Read error: Connection reset by peer)
[09:56:52] *** Quits: menace (~someone@2001:a61:34d7:2201:1cae:276d:6e43:c5a7) (Quit: menace)
[09:57:55] <vdamewood> Sleepy time.
[09:57:57] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[09:58:39] <Izem> zzz
[10:00:10] *** Quits: xff0x (~xff0x@2001:1a81:5361:2500:82d3:7394:61f1:d68f) (Ping timeout: 240 seconds)
[10:01:06] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[10:02:44] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[10:03:35] *** Joins: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au)
[10:04:37] *** Joins: xff0x (~xff0x@2001:1a81:5361:2500:4d08:33c2:418c:342f)
[10:04:47] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[10:04:50] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[10:10:51] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[10:11:01] <Izem> what are the basics of http auth
[10:11:13] <Izem> can it be used to replace having a user log in system?
[10:12:06] <Arahael> Izem: That doesn't really make sense as a question - isn't authentication all about logging in?
[10:12:22] <Izem> yeah going point
[10:12:28] <neshpion> https://en.m.wikipedia.org/wiki/Basic_access_authentication
[10:12:34] <Izem> I'm thinking most people are not using http auth for that
[10:12:49] <Arahael> Izem: What makes you think that?
[10:13:12] <Izem> I imagine people have their own database thing?
[10:13:49] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 246 seconds)
[10:13:53] <Izem> probably cause I don't know anything about auth :P
[10:14:00] <Arahael> Yes, but users don't access the database directly.
[10:14:21] <Izem> right
[10:14:36] *** Quits: pulse (~pulse@user/pulse) (Read error: Connection reset by peer)
[10:18:29] *** Joins: v01d4lph4 (~v01d4lph4@user/v01d4lph4)
[10:18:45] <Izem> on another tangent, I'm curious about hardware applications, I don't really know where computers are used outside PC and servers
[10:19:16] <Izem> probably everywhere, but is there an interesting application of them?
[10:19:26] <Izem> and no, not bitcoin mining
[10:19:50] *** Quits: v01d4lph4 (~v01d4lph4@user/v01d4lph4) (Client Quit)
[10:20:01] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[10:22:31] *** Quits: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net) (Remote host closed the connection)
[10:24:44] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 252 seconds)
[10:26:10] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[10:26:10] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[10:26:12] <Izem> guess I'm just thinking of asics
[10:27:13] <Izem> imagine a server made from hardware
[10:30:53] *** Quits: neshpion (~neshpion@gateway/tor-sasl/neshpion) (Quit: neshpion)
[10:30:55] <beaky> nice i like hardware
[10:31:10] *** Joins: TechTest (uid283215@id-283215.tooting.irccloud.com)
[10:33:27] *** Joins: fweht (uid404746@id-404746.tooting.irccloud.com)
[10:34:51] *** Quits: jinsun (~quassel@user/jinsun) (Write error: Connection reset by peer)
[10:36:39] *** Quits: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net) (Remote host closed the connection)
[10:36:52] *** Joins: newpy (~newpy@2601:280:4381:1390:9df8:dd37:65f3:4)
[10:37:33] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[10:37:59] *** Joins: rifl` (~user@user/rifl)
[10:38:03] *** Joins: jinsun (~quassel@user/jinsun)
[10:39:29] *** Quits: rifl (~user@user/rifl) (Ping timeout: 252 seconds)
[10:39:55] *** rifl` is now known as rifl
[10:40:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[10:40:38] <vdamewood> I guess I wasnt that sleepy.
[10:41:59] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[10:43:01] *** Quits: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz) (Ping timeout: 244 seconds)
[10:45:31] <AlexDelarge> "nice i like ******" rofl
[10:45:44] <AlexDelarge> it must be a bot script
[10:46:32] *** Quits: SmokenatorZ (~Smokenato@152.249.182.228) (Read error: Connection reset by peer)
[10:47:16] *** Joins: SmokenatorZ (~Smokenato@177.45.25.227)
[10:48:25] <vdamewood> What did I miss?
[10:48:40] *** Joins: anahat (~anahat@116.74.190.238)
[10:50:22] *** Quits: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:50:24] <lavadonut> bofa
[10:51:05] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Remote host closed the connection)
[10:51:20] *** Joins: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au)
[10:52:29] *** Quits: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au) (Remote host closed the connection)
[10:53:18] *** Quits: anahat (~anahat@116.74.190.238) (Client Quit)
[10:54:03] *** Joins: anahat (~anahat@116.74.190.238)
[10:54:07] <|smlckz|> AlexDelarge: yes, bot with tea as input and proofs as output...
[10:54:42] *** Joins: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au)
[10:55:10] *** Joins: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz)
[10:55:20] *** Quits: anahat (~anahat@116.74.190.238) (Client Quit)
[10:55:41] *** Joins: anahat (~anahat@116.74.190.238)
[10:57:05] <Arahael> AlexDelarge: Not a bot, and please be respectful.
[10:57:47] <Arahael> |smlckz|: Yeah, beaky's unusual in that.  I, on the other hand, run with *coffee* as input, and ostensibly code as output. :D
[10:58:11] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[10:58:43] *** Joins: sunny93 (~sunny93@wireguard/tunneler/sunny93)
[10:58:49] *** Quits: soapsudsxx (~soapsudsx@209.221.40.138) (Remote host closed the connection)
[10:59:17] *** Quits: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au) (Ping timeout: 252 seconds)
[10:59:48] <vdamewood> I take both coffee and tea as input.
[11:00:01] <password> i eat bugs and output coffee
[11:00:10] * vdamewood gives beaky a box of loos-leaf green tea.
[11:00:19] <vdamewood> s/loos/loose/
[11:00:20] <|smlckz|> i have full respect for anyone or anything producing proofs... this joke comes from the saying of mathematicians as machines taking coffee and producing proofs. now i forgot which mathematician said that...
[11:00:59] *** Quits: anahat (~anahat@116.74.190.238) (Quit: Connection closed)
[11:01:01] <vdamewood> |smlckz|: Either one of the more famous ones, or one of the less famous ones.
[11:01:02] *** Quits: xff0x (~xff0x@2001:1a81:5361:2500:4d08:33c2:418c:342f) (Ping timeout: 252 seconds)
[11:01:51] *** Joins: xff0x (~xff0x@2001:1a81:5361:2500:e6bd:1cbc:a2b0:ac6c)
[11:02:32] <Arahael> vdamewood: I do believe you're right, but I don't think I've seen it proven that you're correct.
[11:02:37] *** Joins: anahat (~anahat@116.74.190.238)
[11:04:42] <|smlckz|> said Hungarian mathematician Alfred Rényi, example Paul Erdős
[11:07:44] *** Joins: jazzy (~jaziz@2600:380:c151:8f83:b1f2:8a9f:200e:f932)
[11:11:26] *** Joins: Qchmqs_ (~qchmqs@41.104.251.143)
[11:12:32] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[11:13:13] *** Quits: Qchmqs_ (~qchmqs@41.104.251.143) (Client Quit)
[11:13:22] *** Quits: anahat (~anahat@116.74.190.238) (Ping timeout: 240 seconds)
[11:14:35] *** Quits: newpy (~newpy@2601:280:4381:1390:9df8:dd37:65f3:4) (Quit: Leaving)
[11:16:16] *** Joins: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[11:18:32] *** Quits: carploader (~bull@185.117.72.168) (Ping timeout: 252 seconds)
[11:19:29] *** Joins: mrig (~mrig@user/mrig)
[11:20:04] *** Joins: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au)
[11:20:52] *** Joins: wwilly (~wwilly@2a01:cb10:3e0:4f00:b9d5:a5ec:a13:9353)
[11:25:34] *** Quits: wwilly (~wwilly@2a01:cb10:3e0:4f00:b9d5:a5ec:a13:9353) (Ping timeout: 246 seconds)
[11:27:20] *** Quits: bayaz (~bayaz@user/bayaz) ()
[11:27:35] *** Joins: bayaz (~bayaz@user/bayaz)
[11:27:46] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[11:27:57] *** Joins: Crassus (~Crassus@user/crassus)
[11:27:58] *** Quits: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz) (Ping timeout: 244 seconds)
[11:30:47] *** Joins: carploader (~bull@185.117.72.168)
[11:32:18] *** Quits: yaboiburner (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net) (Remote host closed the connection)
[11:32:33] *** Joins: aradesh (~aradesh@user/aradesh)
[11:32:58] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:33:12] *** ChanServ sets mode: +o bayaz
[11:35:00] *** Joins: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz)
[11:36:13] *** Joins: pikapika_lunar (~pikapika_@pika.powered.by.lunarbnc.net)
[11:37:45] *** Quits: bayaz (~bayaz@user/bayaz) ()
[11:38:02] *** Joins: bayaz (~bayaz@user/bayaz)
[11:38:02] *** ChanServ sets mode: +o bayaz
[11:39:16] *** Joins: mnd999_ (~mark@2001:8b0:da3:76a2:4630:5b97:83a2:3e21)
[11:39:21] *** Quits: pikapika (~pikapika_@pika.powered.by.lunarbnc.net) (Read error: Connection reset by peer)
[11:40:22] *** Quits: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz) (Ping timeout: 244 seconds)
[11:41:03] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[11:42:31] *** Joins: anahat (~anahat@116.74.190.238)
[11:43:46] *** Quits: Retropikzel (~Retropikz@2001:999:202:4432:e8f7:c7b2:5e6e:e9f2) (Ping timeout: 246 seconds)
[11:47:58] *** Quits: AndroidDAW (~AndroidDA@cpe-172-193-200-97.qld.foxtel.net.au) (Quit: Leaving...)
[11:48:28] *** Joins: newpy (~newpy@2601:280:4381:1390:ecb8:8c95:7309:5938)
[11:49:10] *** Quits: pikapika_lunar (~pikapika_@pika.powered.by.lunarbnc.net) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[11:49:22] *** Joins: pikapika (~pikapika_@pika.powered.by.lunarbnc.net)
[11:50:32] *** Quits: Nyeogmi (~Nyeogmi@user/nyeogmi) (Ping timeout: 252 seconds)
[11:52:18] *** Joins: wwilly (~wwilly@2a01:cb10:3e0:4f00:49b0:9506:2301:9e06)
[11:52:40] *** Quits: psydroid (~psydroid@user/psydroid) (Ping timeout: 246 seconds)
[11:54:41] *** Quits: bayaz (~bayaz@user/bayaz) ()
[11:54:55] *** Joins: bayaz (~bayaz@user/bayaz)
[11:54:55] *** ChanServ sets mode: +o bayaz
[11:55:00] *** Joins: F0odMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[11:55:12] *** bayaz sets mode: +q $a:jeaye
[11:55:16] *** bayaz sets mode: -q $a:jeaye
[11:57:02] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[11:57:59] *** Joins: odnes (~odnes@109-178-178-58.pat.ren.cosmote.net)
[11:58:48] *** Joins: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de)
[12:00:52] <nitrix> What the heck is going on.
[12:00:59] *** Joins: beelzebuzz (~rasputin@gateway/tor-sasl/beelzebuzz)
[12:01:35] *** Joins: jaysicks (~jaysicks@BC9C1F67.mobile.pool.telekom.hu)
[12:03:54] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[12:06:44] *** Quits: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[12:07:47] *** Joins: ravish0007 (~quassel@ec2-65-0-45-121.ap-south-1.compute.amazonaws.com)
[12:08:16] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[12:09:45] *** Joins: wwilly_ (~wwilly@217.140.106.13)
[12:09:51] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[12:10:21] *** Quits: jaysicks (~jaysicks@BC9C1F67.mobile.pool.telekom.hu) (Remote host closed the connection)
[12:10:53] *** Joins: mobidrop (~mobidrop@84.241.203.69)
[12:11:07] <Joanna> Does anyone have any experience with changing the font in hints?
[12:11:07] *** Joins: tkob (tkob@user/thekingofbandit)
[12:11:39] <beaky> what are hints
[12:11:58] <pikapika> beaky, they are used when rendering small sizes
[12:12:00] <Joanna>  Tooltip text
[12:12:03] <pikapika> Oh
[12:12:06] *** Joins: jaysicks (~jaysicks@BC9C1F67.mobile.pool.telekom.hu)
[12:12:06] *** Joins: rifl` (~user@user/rifl)
[12:12:38] <mobidrop> yes I know all about the fonts and the css
[12:13:00] *** rifl is now known as Guest1228
[12:13:00] *** Quits: Guest1228 (~user@user/rifl) (Killed (osmium.libera.chat (Nickname regained by services)))
[12:13:00] *** rifl` is now known as rifl
[12:13:03] *** rifl is now known as rifl`
[12:13:32] *** Quits: wwilly (~wwilly@2a01:cb10:3e0:4f00:49b0:9506:2301:9e06) (Ping timeout: 252 seconds)
[12:13:54] <Jck_true> Joanna: Windows or Browser?
[12:14:23] <Joanna> Desktop application
[12:18:09] <Arahael> Joanna: It's going to depend on the toolkit you use.  Though, you can usually draw your own, if you wish.
[12:21:45] <Jck_true> Joanna: Under .NET/MFC you can't change the font size to my knowlegde. (But you can draw your own)
[12:22:37] *** Joins: Auron (~Auron956@user/auron)
[12:24:03] *** Joins: merijn (~merijn@195.114.232.94)
[12:25:22] *** Joins: teut (~teut@106.214.16.139)
[12:25:47] *** Joins: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[12:26:55] <beaky> do sick reverse engineering and binary patching to modify the type
[12:27:43] <beaky> (or just draw your own)
[12:28:24] <mrig> Do the iterative processes that generate fractals have a specific terminology from the more linear algorithms that generates a plot?
[12:28:46] <mrig> seems that the time complexity is a major difference.
[12:29:07] <mrig> the limits
[12:29:48] <mrig> If you were naming the processes that create one of the other, how would you differentiate them?
[12:29:59] <mrig> s/of the other/or the other/
[12:32:47] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[12:33:30] <Joanna> Surely I’m not the first one to be disappointed with lame looking hints ?
[12:33:52] <Joanna> I have no idea how to draw a hint
[12:34:28] <W> Fun language fact of the day; bayaz is pronounced in the same way as the Norwegian word "bajas", a loanword from Italian ("baiazzo" presumably pronounced similarly) meaning, usually derogatory, "clown" (as in someone clowning around and annoying people). Originally in Italian a corruption of pagliaccio (the more traditional clown).
[12:35:00] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Connection closed)
[12:35:02] <mrig> Joanna: the code that plots bitmaps can be a little tricky at first, seems that many do not attempt to learn it.
[12:35:08] <|smlckz|> ''corruption''?
[12:35:38] *** Joins: TJ- (~root@2a01:7e00:e001:ee01:ea6f:38ff:fed4:3289)
[12:35:49] <W> |smlckz|, in the linguistic sense
[12:35:54] <Joanna> Hints aren’t the number one priority I was hoping for an easy way to do it :)
[12:37:31] <mrig> Joanna: there is no easy way, pretty sure of that, this depends upon many things
[12:37:35] <W> since most language changes and new words are initially proscribed (see descriptive vs normative linguistics), changes are called "corruptions". I guess it's not a term to use if you're not a fan of normative linguistic (I am certainly not)
[12:37:50] <mrig> including subjective opinion.
[12:39:03] *** Joins: ixil (~ixil@82.197.178.137)
[12:39:14] <Jck_true> Joanna: What language/toolkit/platform are we talking about?
[12:41:39] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[12:41:55] <Joanna> Lazarus
[12:42:48] <Joanna> Jck_true:
[12:43:54] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 240 seconds)
[12:45:17] <mrig> no one on the fractal plot definition?
[12:45:31] * mrig [scratch's head]
[12:45:36] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[12:45:46] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[12:46:22] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:47:53] <mrig> The depth is kind of similar to the notion of dy/dx but is different, how though?
[12:48:43] <mrig> non linear I suppose.
[12:50:49] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[12:50:53] *** Quits: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net) (Quit: Leaving)
[12:51:34] *** Quits: travisshears (~travisshe@aftr-82-135-81-233.dynamic.mnet-online.de) (Quit: Textual IRC Client: www.textualapp.com)
[12:51:47] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[12:51:47] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[12:51:57] <kron> mrig: what kind of fractals? fractal curves like the koch snowflake, or escape time coloring with e.g. the mandelbrot set?
[12:52:09] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[12:52:29] <pyzozord> Hi, is SIGINT any key pressed on the keyboard? If not, is there a signal that that happens on any key press in tty?
[12:53:26] <Joanna> I once had a fractal calendar and the pictures were amazing..
[12:53:32] *** Joins: gggp (~gggp@60.10.194.47)
[12:53:46] <kron> pyzozord: ctrl-c?
[12:54:26] *** Lord_of_Life_ is now known as Lord_of_Life
[12:54:55] <pyzozord> kron: oh so sigint is only ctrl-c?
[12:55:32] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:56:56] <merijn> pyzozord: key presses are not keypresses ever
[12:57:07] <merijn> pyzozord:ctrl-c converting to SIGINT is a terminal feature
[12:57:19] <mrig> bayaz means white in turkish, bay gentleman.
[12:57:35] <pyzozord> merijn: oh, right, that makes sense. Thanks for explanation
[12:57:37] <merijn> ctrl-c is an escape code that the terminal interprets and as a result the terminal sends SIGINT to the attached process
[12:58:04] *** Quits: ayenet4 (~0x100@32.211.211.39) (Remote host closed the connection)
[12:59:14] <NiKaN> learning my language
[12:59:46] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 240 seconds)
[13:00:07] <pyzozord> merijn: do you know if there is any linux signal that happens on all key presses?
[13:01:45] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[13:02:12] <merijn> No such thing
[13:02:14] <mrig> kron: sorry I should have specified, I'm consider the Mandelbrot when I ask this but also functions to such as f(x) = x^4 - 1, which I believe is known as Newtons Method.
[13:03:18] *** Quits: freakazoid333 (~freakazoi@72.168.176.187) (Read error: Connection reset by peer)
[13:03:23] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Remote host closed the connection)
[13:03:28] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[13:03:45] *** Joins: freakazoid333 (~freakazoi@72.168.176.187)
[13:03:46] *** Joins: plastico (~plastico@2001:8a0:de6b:1a00:9d14:766e:70a8:dcea)
[13:03:46] <mrig> a plot which is derived by running an iterative process that generates a bitmap, rather than one that can be easily rendered as a vector image.
[13:04:17] <pyzozord> merijn: ok, I'm trying to find out if there is a way to stop a sleep() on key press and resume normal execution
[13:04:39] *** Quits: newpy (~newpy@2601:280:4381:1390:ecb8:8c95:7309:5938) (Quit: Leaving)
[13:04:50] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[13:05:00] *** Parts: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) ()
[13:07:22] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[13:09:36] <kron> pyzozord: register a signal handler for sigint, then ^C should no longer kill your process, and yet interrupt the sleep (according to sleep(3))
[13:09:59] <amigojapan> pyzozord: don't use sleep. Use a loop and inside the loop check the status of the keypresses
[13:11:19] <amigojapan> kron: seems he wants any key, not ctrl-c
[13:11:58] <pyzozord> yeah I want any key, doing a loop is exactly what I am trying to avoid
[13:12:15] <amigojapan> Why pyzozord
[13:12:43] <pyzozord> there must be a way. Otherwise all cli programs would take 100% when they do "Are you sure? (y/n)"
[13:12:54] <amigojapan> Sleep() should be implemented as a loop too
[13:12:55] <kron> that's just blocking on input
[13:13:24] <pyzozord> ah right, that's just blocking input
[13:14:00] <mrig> kron: sorry if the question seems unclear; I think that what it is that I am trying to ask is whether there a clear mathematical distinction, thus a nomenclature, that might define which is best plotted using vector graphics and that which is best rendered with a bitmap.
[13:14:26] <mrig> I suppose a distinction could be the complexity involved.
[13:15:36] <amigojapan> pyzozord: I don't think you are avoiding a loop with sleep()
[13:16:07] <kron> mrig: i don't feel familiar enough with fractal rendering processes to call it "iterative plotting", but that's what i would've searched for. there also seem to be smarter ways of plotting a mandelbrot set via edge tracing, which might avoid the per-pixel operation you seem to require
[13:16:33] <pyzozord> amigojapan: I mean avoiding something that does 100% cp usage
[13:16:45] <pyzozord> cpu*
[13:16:50] <mrig> kron oh that is cool, thank you for the pointer, I will take a look into that.
[13:16:55] <mrig> Merhaba NiKaN, türk müsünüz?
[13:17:04] *** Joins: Retropikzel (~Retropikz@2001:999:202:4432:e8f7:c7b2:5e6e:e9f2)
[13:17:23] <amigojapan> pyzozord: I think sleep() must be implemented as a loop
[13:17:26] <NiKaN> mrig: yes
[13:17:48] <NiKaN> do you know my language
[13:17:55] *** Quits: mobidrop (~mobidrop@84.241.203.69) (Ping timeout: 246 seconds)
[13:18:01] <mrig> Ah, çok az Türkçe konuşuyorum, kulağa çok hoş gelen bir dil.
[13:18:19] <mrig> I am leaning on google translate here, only know it phonetically.
[13:18:27] <mrig> ... and very little :)
[13:18:50] <Lyn> how can I find out what a firefox process relates to, it's a power hog and I can't make much out of Details in task manager
[13:19:32] <mrig> Lyn: dang, you notices that in htop too?
[13:19:38] <mrig> noticed
[13:19:52] <sandman13> wrapper wrapper wrapper
[13:19:54] <Lyn> htop? :S
[13:20:13] <sandman13> and macro to define a function
[13:20:24] <mrig> Lyn: oh that is the program that I was using when I spotted the enormous footprint of firefox.
[13:20:40] <sandman13> OpenSSL's codebase is beyond my understanding :D
[13:20:56] <mrig> Lyn: like a task manager, but for linux.
[13:21:02] <Lyn> this has been an ongoing problem, it seems firefox is the only program using tremendous amounts of power
[13:21:13] <Lyn> and it's a problem on a laptop
[13:21:22] <amigojapan> pyzozord: "press y/n" is just scanf
[13:21:28] <sandman13> It's normal Lyn
[13:21:45] <sandman13> Modern browsers are resource hogs
[13:21:49] <Lyn> I'd like to do something about it
[13:21:58] <sandman13> use qutebrowser
[13:22:00] <sandman13> :D
[13:22:11] <NiKaN> mrig: I'm translating too, it can't be a coincidence  😂😂😂
[13:22:13] <Lyn> I don't need it to have "Very high" power usage while I sleep
[13:22:57] *** Joins: exvicesindaco (~exvicio@user/exvicesindaco)
[13:22:59] <amigojapan> Lyn: close the browser when you sleep?
[13:23:01] <mrig> NiKaN: you into English?
[13:23:21] <sandman13> 45% UI, 50% processing and 5% spying
[13:23:23] <NiKaN> mrig: Little bit
[13:23:45] <Lyn> would be an easy fix, but what about the times when I don't sleep :p
[13:23:49] <Arahael> NiKaN: Welcome. :)  I only know two languages.  But I do not know Turkish. :(
[13:24:06] <NiKaN> Arahael: 😂
[13:24:09] <NiKaN> Thanks
[13:24:10] <NiKaN> ☺️
[13:24:31] <NiKaN> I know different languages ​​too, but I don't know English
[13:24:37] <NiKaN> maybe i will learn
[13:24:41] <sandman13> how are you writing it?
[13:24:43] <Jck_true> Lyn: Close the lid on your laptop and it goes to suspend? :P
[13:25:03] <amigojapan> I have heard some rumours that Turkish and Japanese share some similarities
[13:25:13] <Arahael> sandman13: Probably a translator, which means spelling things correctly with good grammar will be important.
[13:25:16] <mrig> ah, well welcome yes, well it must be quite difficult to follow, do you have some translation mechanism?
[13:25:25] <Lyn> the firefox is a power drain even when it just lingers on the background
[13:25:34] <NiKaN> amigojapan: are you a japanese
[13:25:56] <NiKaN> Amigo - japan
[13:25:58] <NiKaN> 😅
[13:25:59] <sandman13> Arahael: I don't think I know English to that level. I can write somewhat correct English but not pedantic one
[13:26:05] <amigojapan> NiKaN: no but Japanese is one of the languages I speak
[13:26:19] <sandman13> o mai wa shinderu :D
[13:26:26] <NiKaN> amigojapan: konichi wa
[13:26:27] <NiKaN> ☺️
[13:26:49] <Lyn> everything's going according to keikaku
[13:26:54] <amigojapan> sandman13: omae not omai
[13:27:09] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-f0ad-8208-fa67-f3de.res6.spectrum.com)
[13:27:09] <amigojapan> Lol Lyn
[13:27:21] <sandman13> amigojapan: that's bound to happen when you know phrases from memes
[13:27:25] *** Joins: zeenk (~zeenk@2a02:2f04:a106:9600:82fb:aed9:ca9:38d3)
[13:27:33] <amigojapan> Yep
[13:27:52] <Lyn> omae wa mou shindeiru, isn't that how it goes
[13:28:06] <amigojapan> Yes Lyn
[13:28:19] <NiKaN> amigojapan: これわかりますか
[13:28:35] <NiKaN> I think I learned
[13:28:37] <amigojapan> わかりますよ
[13:28:38] <NiKaN> 😂
[13:28:38] <Alex123> hey everyone, I was wandering what will be best way to store client open-close hours based on weekday and client time zone. So people can book events using their own time zone. All data will be stored for booked events in UTC
[13:28:40] <mrig> kron: I was wondering if there was a technique for the Mandelbrot, also to show the lines of the fractions that are more clearly discernible on smoother gradients.
[13:28:58] <merijn> You can't store booked events in UTC
[13:29:08] <Alex123> why not?
[13:29:09] <merijn> You can never store *any* future time in UTC
[13:29:18] <merijn> Because you cannot know what the UTC time will be
[13:29:22] <NiKaN> amigojapan: I need to talk to you in Turkish and you in English
[13:29:26] <pikapika> merijn, daylight?
[13:29:31] <death916> you cant?
[13:29:34] <merijn> pikapika: Also, timezones change
[13:29:43] <Alex123> utc does not change
[13:29:43] <sandman13> dump in unix timestamp and call it a day
[13:29:47] <death916> u cant calculate utc time from current?
[13:29:54] <merijn> death916: EU is planning to abandon daylight savings time at an unspecified time in the near future
[13:29:55] <amigojapan> NiKaN: I can't speak Turkish
[13:29:59] <mrig> UTC is dream time, pretend that it does not wobble.
[13:30:03] <mrig> :)
[13:30:06] <death916> utc doesnt matter for timezone
[13:30:11] <amigojapan> NiKaN: kebab
[13:30:16] <death916> i thought
[13:30:17] <merijn> death916: But it does
[13:30:18] <NiKaN> 😅
[13:30:28] <death916> how so
[13:30:35] <merijn> death916: How do you convert to UTC?
[13:30:38] <NiKaN> I need to post this on Turkish forums, people should come here 😅
[13:30:42] <death916> utc is universal
[13:30:44] *** Quits: jcarpenter2 (rofl@2603:3016:1e01:b960:20b3:fc15:12c5:30d8) (Read error: Connection reset by peer)
[13:30:46] <sandman13> merijn: Abandoning DST is a good move in regards to programming IMO
[13:30:47] <death916> so why would u convert
[13:30:58] <mrig> death916: UT is universal scale
[13:31:00] *** Joins: gggp_ (~gggp@60.10.194.47)
[13:31:02] <merijn> death916: Because most shops are physically located in the real world?
[13:31:02] *** Joins: jcarpenter2 (negatrator@2603:3016:1e01:b960:20b3:fc15:12c5:30d8)
[13:31:24] <death916> i mean btc transactions are in utc alot i feel it cant be that hard to refer to a future time
[13:31:27] <merijn> death916: If I make an appointment for 10:00 on February 24, 2025 in Amsterdam, you cannot store that as UTC
[13:31:27] <death916> although i never tried
[13:31:36] <merijn> Because you don't know what the UTC time then will be
[13:31:37] <mrig> UTC is for mortals to help them with their sea sickness.
[13:31:38] <death916> o i see merijn
[13:31:43] <Lyn> hmm I unloaded a bunch of firefox tabs and now the power usage went to Low
[13:31:47] <death916> for an appointment in a specific local
[13:31:52] <merijn> Because the EU might abolish daylight savings time, changing the UTC conversion from Amsterdam time to UTC
[13:32:01] <death916> but if u ignore that and jus say we meet at 1300 utc doesnt matter
[13:32:18] <merijn> death916: That's an ambiguous, but not what was suggested
[13:32:25] <Alex123> events are 5 weeks timeframe
[13:32:33] <amigojapan> We don't have dst in Japan
[13:32:36] <mrig> death916: that is right, it is a global scale time, not universe though his is different again.
[13:32:38] <merijn> death916: The suggested thing was "making appointment *and store in UTC*"
[13:32:52] <Lyn> is EU getting rid of dst anytime soon?
[13:32:54] <merijn> mrig: UTC isn't great for "universal time" :p
[13:33:14] <merijn> Lyn: The plan was to abolish it 2020-2021, but COVID happened so I haven't heard anything recently
[13:33:39] <merijn> Lyn: Regardless, other timezone changes happen all the time worldwide
[13:33:41] <Alex123> ok lets store in GMT :)
[13:33:56] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[13:34:01] <sandman13> Why was DST created though?
[13:34:02] <Jck_true> Lyn: As far I know they made it optional for member countries...
[13:34:08] <merijn> Alex123: 5 week in the future you can probably get away with being lucky
[13:34:43] <amigojapan> sandman13: for farmers to have more daylight
[13:35:10] <merijn> Alex123: Assuming appointments in a local thing I would just not support appointments from other timezones, that seems far easier >.>
[13:35:15] <merijn> If it's online, that's trickier
[13:35:26] *** Quits: gggp_ (~gggp@60.10.194.47) (Client Quit)
[13:35:42] *** Joins: gggp_ (~gggp@60.10.194.47)
[13:35:52] <Alex123> how would you convert user week day open-close hours to gmt
[13:36:12] <Alex123> appt are international
[13:36:21] <merijn> then RIP your sanity :p
[13:36:38] <Jck_true> sandman13: Today it certainly provides a purpose here in the nordic countries. Without the +1 adjustment evening outdoor activities would be almost impossible.
[13:36:51] <beaky> maybe you can prompt the user with that fancy map of timezones things
[13:37:39] <beaky> with a special menu for 'i want a timezone not on the map like utc dammit' which the ubuntu installer refuses to include
[13:37:49] <pyzozord> turns out I can do variable duration game tick with just poll/epoll/select because they have timeouts!
[13:39:02] <pyzozord> so instead of sleep()ing and handling some signals, I can just block with sync syscall that has a timeout. It will unblock on user input or on time out, whichever comes first. And then each frame can decide the timeot for the next frame's inpt
[13:39:05] <sandman13> Jck_true: So the problem is caused by fixed time. "You can't go out after 18:00 cause it's dark" - "But it isn't dark" kind of thing?
[13:40:05] <merijn> sandman13: Well, more like "it's light until midnight" half the year vs "it's light until 4 pm" the other half :p
[13:40:25] <Lyn> sandman13 iirc it also has to do with work/school times, like they won't just switch 8am to be 9am instead etc
[13:40:33] <beaky> indeed society is driven  by what the clock on the wall says rather than how bright it is outside
[13:40:56] <beaky> so dst is like a social hack
[13:41:15] <beaky> like the social experiments meme from the last decade
[13:42:11] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-f0ad-8208-fa67-f3de.res6.spectrum.com) (Quit: Leaving.)
[13:42:27] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-f0ad-8208-fa67-f3de.res6.spectrum.com)
[13:42:59] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-f0ad-8208-fa67-f3de.res6.spectrum.com) (Client Quit)
[13:43:04] *** Quits: danielrparks (~quassel@2600:1700:3f7b:20f:b312:2bd2:4181:9b72) (Quit: No Ping reply in 180 seconds.)
[13:43:29] *** Sauvin is now known as Lemniscate
[13:44:10] <Jck_true> sandman13: Well I do sailing. In mid september sun down here is 7:30. Without DST that would be an hour earlier...
[13:44:19] *** Joins: danielrparks (~quassel@2600:1700:3f7b:20f:b45:9757:4c25:fee4)
[13:44:53] *** Lemniscate is now known as Sauvin
[13:45:13] *** Quits: rifl` (~user@user/rifl) (Ping timeout: 246 seconds)
[13:45:58] <Jck_true> sandman13: So provided you have work till 4pm.. It doesn't leave much time for any activity outside work...
[13:46:53] <mrig> merijn: Oh, dropping my t's there, right barycentric is best, if only we had the faintest idea where the center was :D
[13:47:48] <rindolf> sigh: https://github.com/shlomif/fortune-mod/pull/54
[13:47:50] *** Joins: xkuru (~xkuru@user/xkuru)
[13:48:11] *** Joins: brickfat (~brickfat@user/brickfat)
[13:48:32] <mrig> pyzozord: oh that is pretty cool!
[13:49:17] <merijn> mrig: Astronomical time exists
[13:49:36] <mrig> merijn: yes I know, I mentioned this above, you must had misread me :)
[13:49:56] <mrig> am studying this at the moment.
[13:50:33] <pyzozord> mrig: yep, very excited ^^
[13:50:43] <mrig> beaky: something to do with gaslighting; Curious twist of linguistic fate that :D
[13:51:17] <mrig> pyzozord: awesome that is programming at its best!
[13:51:34] <mrig> I only learned about epoll recently, seems really useful though.
[13:51:46] <KillerWasp> rindolf# all the people don't want to install cmake, but if they want to install ninja and meson. *sigh*
[13:51:58] <KillerWasp> s/if/yes/
[13:52:10] *** Quits: odnes (~odnes@109-178-178-58.pat.ren.cosmote.net) (Ping timeout: 240 seconds)
[13:52:40] *** Joins: Glumfish (~Glumfish@user/glumfish)
[13:53:29] <pyzozord> mrig: "that is programming at its best!" I can't agree more
[13:54:03] <sandman13> ah
[13:54:15] <KillerWasp> I want to fish salmon and catfish.
[13:54:18] <KillerWasp> :L
[13:54:34] <sandman13> KillerWasp: did you see my libev/openssl program?
[13:54:42] *** Joins: EnterAPX (~rados@host-81-161-204-182.oxylion.net.pl)
[13:54:48] * mrig plays 'catfish blues' for KillerWasp
[13:55:00] <KillerWasp> sandman13# no, sorry
[13:55:15] <sandman13> np
[13:55:59] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[13:56:58] *** Quits: laguneucl (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4) (Ping timeout: 240 seconds)
[13:57:04] <rindolf> KillerWasp: yes. :(
[13:57:09] <pikapika> rindolf, h
[13:57:36] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[13:57:36] <rindolf> pikapika: What do you mean ?
[13:57:48] *** Joins: trace987 (~trace@ip5b429953.dynamic.kabel-deutschland.de)
[13:57:54] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[13:57:56] <pikapika> hi
[13:58:41] *** Quits: F0odMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 252 seconds)
[13:58:45] <rindolf> pikapika: KillerWasp : hi, sup?
[13:59:06] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[13:59:28] <KillerWasp> rindolf# nothing really, I just woke up and I still need to get everything ready after the power outage.
[14:00:20] *** Joins: EnterMWI (~Enter@host-81-161-204-182.oxylion.net.pl)
[14:01:01] *** Joins: gggp__ (~gggp@60.10.194.47)
[14:01:20] *** Quits: xff0x (~xff0x@2001:1a81:5361:2500:e6bd:1cbc:a2b0:ac6c) (Ping timeout: 252 seconds)
[14:02:04] *** Joins: xff0x (~xff0x@2001:1a81:5361:2500:9aff:3f7d:a108:43b8)
[14:02:26] *** Quits: DasBrain (~DasBrain@user/dasbrain) (Killed (NickServ (GHOST command used by DasBrain_)))
[14:02:32] *** Joins: DasBrain_ (~DasBrain@user/dasbrain)
[14:02:58] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[14:03:26] *** Joins: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk)
[14:03:26] *** Quits: GeDaMo (~GeDaMo@82-69-2-253.dsl.in-addr.zen.co.uk) (Changing host)
[14:03:26] *** Joins: GeDaMo (~GeDaMo@user/gedamo)
[14:03:35] *** Quits: Lyn (~Lyn@user/law) (Quit: Leaving)
[14:03:36] *** DasBrain_ is now known as DasBrain
[14:04:05] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[14:05:46] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[14:06:59] *** Joins: DevAntoine (~DevAntoin@78.196.234.32)
[14:07:02] *** Joins: Crassus (~Crassus@user/crassus)
[14:07:13] <DevAntoine> 'sup
[14:07:56] <rindolf> DevAntoine: hi
[14:08:30] *** Joins: odnes (~odnes@109-178-178-58.pat.ren.cosmote.net)
[14:08:57] <rindolf> DevAntoine: i wrote https://twitter.com/shlomif/status/1412307549668495366
[14:10:25] *** Quits: AlexDelarge (~alexboy@user/alexdelarge) (Ping timeout: 246 seconds)
[14:10:27] *** Joins: krz3si (~szara@2a02:a31c:853b:b780:df0:1631:dcb9:4e4f)
[14:11:20] *** Quits: audiocat (~audio@2603-8081-1800-6a65-6fa6-a58d-88fc-903a.res6.spectrum.com) (Ping timeout: 252 seconds)
[14:11:50] *** Joins: Guest59 (~Guest59@103.149.202.18)
[14:12:59] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[14:13:03] *** Quits: password (~password@user/password2) (Quit: Connection closed)
[14:15:35] *** Quits: gnux (~notadevel@user/gnux) (Quit: Leaving)
[14:16:22] *** Joins: dev4449 (~dev4449@2.147.130.174)
[14:17:12] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-1de7-2d63-6684-8ae0.res6.spectrum.com)
[14:17:46] *** Joins: rifl (~user@user/rifl)
[14:18:01] <rindolf> KillerWasp: ah, power outages do not happen: https://github.com/shlomif/shlomif-tech-diary/blob/master/why-the-so-called-real-world-i-am-trapped-in-makes-little-sense--2020-05-19.asciidoc
[14:19:10] *** Joins: Rounin (~david@cm-84.212.130.215.getinternet.no)
[14:21:47] <KillerWasp> rindolf# in my case it happens almost every day, this week there were 5 cuts.
[14:22:14] <Rounin> Oh, there you are
[14:22:32] <Rounin> rindolf: It seems that Freenode has undergone a complete Netsplit of some kind
[14:22:40] <Rounin> Everyone is on different servers now, or something
[14:22:46] <rindolf> KillerWasp: i disbelieve it
[14:24:08] <rindolf> Rounin: ah
[14:24:59] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 252 seconds)
[14:26:24] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[14:26:32] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[14:27:37] <davve_> Rounin: https://isfreenodedeadyet.com/
[14:31:10] <KillerWasp> rindolf# your web need a update and replace freenode...
[14:32:04] <rindolf> KillerWasp: sigh.
[14:33:31] *** Quits: merijn (~merijn@195.114.232.94) (Ping timeout: 246 seconds)
[14:34:13] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 246 seconds)
[14:34:53] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Ping timeout: 252 seconds)
[14:35:58] <KillerWasp> rindolf# freenode is no longer freenode, although it's something that belonged to the previous time, now it no longer makes sense to promote something that does not exist, it's best to replace it with �����.
[14:36:26] <Rounin> Strange turn of events... Even people who didn't abandon Freenode can't really use it anymore... What do they want from us
[14:36:38] *** Joins: Booster2ooo (~Booster2o@91.183.83.5)
[14:36:51] *** Joins: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8)
[14:37:06] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[14:37:23] *** Joins: Glumfish (~Glumfish@user/glumfish)
[14:38:38] <pyzozord> do I need to use termios to put the terminal in cbreak mode? Or can I use some escape sequence?
[14:40:22] <rindolf> KillerWasp: the fn/libera schism is a mirage of my fears. so is discord-gg
[14:41:30] <KillerWasp> pyzozord# is same, both work fine
[14:41:51] *** Quits: Tom_ (~Tom@2a01:e0a:2de:8130:a12b:c312:f0e9:d71c) (Read error: Connection reset by peer)
[14:42:09] <pyzozord> KillerWasp: I can't find escape sequance for cbreak for xterm
[14:42:13] *** Joins: odnes_ (~odnes@109-178-241-209.pat.ren.cosmote.net)
[14:42:36] <KillerWasp> pyzozord# termios serves to generate more compatibility if there is any difference in the terminal.
[14:42:38] *** Joins: gggp_ (~gggp@221.219.70.91)
[14:43:04] *** gggp_ is now known as gggp
[14:43:30] <GeDaMo> pyzozord: possibly you can do it with ioctl?
[14:43:34] *** Quits: EnterAPX (~rados@host-81-161-204-182.oxylion.net.pl) (Quit: Leaving)
[14:43:40] *** Quits: EnterMWI (~Enter@host-81-161-204-182.oxylion.net.pl) (Remote host closed the connection)
[14:43:57] <KillerWasp> pyzozord# cbreak i guess is a event
[14:44:21] <KillerWasp> pyzozord# you must use signal() instead
[14:45:08] <pyzozord> GeDaMo: thanks I'll take a look at that
[14:45:22] *** Quits: gggp__ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[14:45:26] *** Quits: odnes (~odnes@109-178-178-58.pat.ren.cosmote.net) (Ping timeout: 252 seconds)
[14:45:31] <pyzozord> KillerWasp: I'm not sure I understand. So it's an escape sequence but it's a signal I need to send somewhere?
[14:46:21] <KillerWasp> pyzozord# what escape sequence?
[14:47:43] <pyzozord> KillerWasp: I asked if I need to use termios or can I use an escape sequence to set cbreak mode. You answered they are the same. Later you mentioned I muse use signal.
[14:48:31] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[14:48:44] <KillerWasp> pyzozord# yes, because cbreak != termios/sequence escape
[14:49:44] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 252 seconds)
[14:50:09] *** Joins: lunarkitty (uid501895@user/pyra)
[14:51:19] *** Joins: Mangy_Dog (~Mange@user/mangy-dog/x-7397214)
[14:51:22] *** Quits: Thedarkb (~beno@2001:bb6:b404:188f:1ba6:37d:9e2b:30e8) (Read error: Connection reset by peer)
[14:53:16] *** Joins: Glumfish (~Glumfish@user/glumfish)
[14:53:27] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[14:55:05] *** Joins: audgirka_ (~audgirka@2402:3a80:18c9:9410:c614:fb16:af48:402f)
[14:56:00] *** Joins: F0odMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[14:57:32] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Ping timeout: 252 seconds)
[14:57:54] <beaky> is the future of io non monadic? conal eliot on non monadic io and how we can be liberated from the c style of io (and programming io in other languages as if all languages were just c) http://conal.net/blog/posts/the-c-language-is-purely-functional
[14:58:38] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 252 seconds)
[15:01:33] <beaky> what would the future of io look like
[15:01:34] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[15:01:46] *** Quits: F0odMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 240 seconds)
[15:01:52] *** Quits: rifl (~user@user/rifl) (Ping timeout: 246 seconds)
[15:07:36] *** Joins: audgirka__ (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[15:07:51] *** Joins: Glumfish (~Glumfish@user/glumfish)
[15:09:12] *** Quits: teut (~teut@106.214.16.139) (Quit: Connection closed)
[15:09:26] *** Joins: soulisson (~soulisson@105.156.250.67)
[15:11:07] *** Quits: brickfat (~brickfat@user/brickfat) (Quit: Leaving)
[15:12:22] *** Quits: audgirka_ (~audgirka@2402:3a80:18c9:9410:c614:fb16:af48:402f) (Ping timeout: 246 seconds)
[15:13:11] *** Quits: xkuru (~xkuru@user/xkuru) (Remote host closed the connection)
[15:13:58] <W> beaky, that's not what this link talks about, it talks about how it's nonsense to argue over which languages (whose programs do effect change on a computer) are "purely functional" without clarifying the mechanism for effecting change
[15:14:35] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 252 seconds)
[15:15:03] *** Quits: Crassus (~Crassus@user/crassus) (Quit: Textual IRC Client: www.textualapp.com)
[15:18:11] *** Joins: kill (~killown@user/killown)
[15:18:19] *** Quits: Codaraxis_ (~Codaraxis@ip68-5-90-227.oc.oc.cox.net) (Ping timeout: 246 seconds)
[15:18:23] <kill> what book or tools is the best way to learn c?
[15:19:31] <beaky> oops i meant to link to some coment way below the post http://conal.net/blog/posts/the-c-language-is-purely-functional#comment-467
[15:20:17] <KillerWasp> kill# https://www.pearson.com/us/higher-education/program/Deitel-C-How-to-Program-Plus-My-Lab-Programming-with-Pearson-e-Text-Access-Card-Package-8th-Edition/PGM265656.html
[15:20:18] <W> (also, calling it "IO" is a bit confusing, in that it might be technically true, but these days IO as a colloquial term in programming exclude human interface devices unless you interact with them at a very low level
[15:20:37] <KillerWasp> kill# also use Turbo C/C++ from dosbox
[15:20:48] <kill> I have linux
[15:20:55] <kill> I will use gcc
[15:21:12] <KillerWasp> kill# in linux you can use dosbox
[15:21:16] <kill> KillerWasp, why this book is the best for that
[15:21:26] <kill> why dosbox?
[15:21:28] <KillerWasp> but also gcc without something libraries/headers explained
[15:21:35] <GeDaMo> kill: https://modernc.gforge.inria.fr/#text-2
[15:22:04] <beaky> inria.fr nice thats the institution that made coq and ocaml i think
[15:22:39] <KillerWasp> kill# because Turbo C/C++ is more intuitive/interactive.
[15:22:42] *** Joins: scabby (~scabby@user/scabootssca)
[15:23:02] <beaky> 'With the invention and acceptance of monadic imperative programming, it’s like the Haskell community wandered into an opium den and are still lying there in a fog'
[15:23:11] <pyzozord> I did it with termios in the end. Couldn't find other ways. I always thought that termios is just a big abstraction over many terminals and database of sequence codes
[15:23:14] <pyzozord> is it not?
[15:23:22] *** Quits: recursiveNode (~recursive@ip-86-49-255-180.net.upcbroadband.cz) (Quit: Going offline, see ya! (www.adiirc.com))
[15:23:46] *** Joins: Glumfish (~Glumfish@user/glumfish)
[15:24:17] <GeDaMo> That's termcap
[15:25:03] <GeDaMo> https://en.wikipedia.org/wiki/Termcap
[15:25:04] <pyzozord> ooh yeah I confused those two!
[15:25:14] <W> beaky, I wonder what he means by purely functional IO. Besides constructs like monads, there's ideas like saying the real world is input and output, I know of no other approaches
[15:25:36] <kill> GeDaMo, thank you
[15:25:39] <kill> KillerWasp, thank you too
[15:25:53] <W> "there was a lot of vibrant and imaginative work on functional I/O" [citation needed]
[15:25:59] <KillerWasp> kill# you;'re welcome
[15:27:01] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-1de7-2d63-6684-8ae0.res6.spectrum.com) (Quit: Leaving.)
[15:27:07] <beaky> yes i gotta dig into more what they mean by all those alternative functional io aprpaoches
[15:27:17] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-1de7-2d63-6684-8ae0.res6.spectrum.com)
[15:27:37] <beaky> especially like in 2021 besides frp the only alternative one i know is 'aglebraic effects'
[15:27:47] <GeDaMo> I remember that the language Gofer had some I/O stuff before monads, maybe have a look at that
[15:27:50] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-1de7-2d63-6684-8ae0.res6.spectrum.com) (Client Quit)
[15:27:56] <beaky> i like the name gofer
[15:28:10] <pyzozord> oh I see in systrace that termios actally uses ioctl calls under the hood. Now it all makes more sense
[15:28:16] <pyzozord> strace*
[15:28:48] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[15:29:26] *** Joins: EnterAPX (~user@host-81-161-204-182.oxylion.net.pl)
[15:30:07] *** Joins: mobidrop (~mobidrop@84.241.196.73)
[15:30:10] *** Joins: Glumfish (~Glumfish@user/glumfish)
[15:31:12] *** Joins: teut (~teut@106.214.16.139)
[15:31:19] <teut> https://www.ic.unicamp.br/~pannain/mc404/aulas/pdfs/Art%20Of%20Intel%20x86%20Assembly.pdf   pg 108 control bus
[15:31:52] <teut> here they are saying , that Is  "it  sending  or  receiving?"  is the question
[15:32:10] <W> beaky, hadn't heard of those, but the immediate thought is, how do you implement a progress bar for a time-consuming mathematical operation?
[15:32:15] <teut> but control bus is bidirectional so how does that question arise?
[15:32:46] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Remote host closed the connection)
[15:33:59] <W> (one whose runtime cannot be estimated, I mean, as obviously barprogress=currenttimedelta/estimate is not particularly hard)
[15:34:11] <GeDaMo> teut: it's asking if the data bus is sending or receiving
[15:34:24] *** Joins: Crassus (~Crassus@user/crassus)
[15:35:00] <teut> oh ok, processor can also receive data that it already stored
[15:35:08] <teut> in the ram
[15:35:12] *** Joins: merijn (~merijn@145.100.116.221)
[15:35:55] <teut> the electronics is quite abstracted here, I can't visualize much
[15:37:09] <W> I think this is just basically a quixotic search; side-effects are why we program, and any attempts to isolate them results in the same objection Conal Elliott raises
[15:37:12] <beaky> yes i reach too quickly for monads iam definitely guilty of the opium den thing he rants about
[15:37:48] *** Joins: entuland (~entuland@user/entuland)
[15:37:55] <W> there are benefits to having clearly defined purely functional /parts/ of your program, and that's where it should probably stop
[15:38:18] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[15:39:46] <teut> if I want to add 2 numbers, a and b let's call them,   8 bit number( ie 0 - 255) ,    so the processor let's say has stored , both numbers in ram(let's not care about inefficiency here)  , so now it needs to load a into the 8 bit register
[15:39:52] <W> and if someone objects that you're not refactoring out enough pure parts from your program, it's on them to in the specific case point to the benefits
[15:40:02] *** Joins: TheAceOfHearts (~TheAceOfH@24.41.239.76)
[15:40:03] <teut> now how does the ALU adds?
[15:40:10] <teut> does it have 16 wires?
[15:40:25] <W> teut, yes
[15:40:34] *** Joins: Glumfish (~Glumfish@user/glumfish)
[15:40:42] <leduyquang753> You can look up the adder circuit.
[15:40:49] <W> (I mean, it has many many more wires, but specifically, the 8 bits of each operand will be values on parallel wires in it)
[15:41:01] <teut> yes , I saw the full adder
[15:41:08] <teut> XOR and AND circuit
[15:42:02] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:44:19] <teut> so  if   a is stored  at some position  "xA7B"  some hex value, the processor sets the control bus  in read mode(by maybe defining  0 for read and 1 for write) and loads the address on address line and get the number "a" on the register
[15:44:53] <teut> correct?
[15:47:13] <teut> Uploaded file: https://uploads.kiwiirc.com/files/c38eb3e9ce58d7c6e8b9660f52ea6b27/image.png
[15:47:21] <deniska> teut: yes, CPU sets the address of the address bus, does some signalling that it's reading, and then reads whatever is on the data bus
[15:47:40] <teut> so now , it seems that a is not loaded on the register
[15:47:43] <deniska> the address on* the address bus
[15:47:51] *** Joins: \c (~\c@user/o/x-1005988)
[15:48:07] <teut> rather the     least significant bits of a  and b are loaded on the register
[15:48:18] <W> teut, the specifics of who communicates with what in what order and what timing is generally abstracted away because /it changes/; technology advances, new chips and interfaces are invented, etc.
[15:48:46] <deniska> yeah, the specifics depend on which CPU we're talking about
[15:49:05] <teut> yes, I understand that W  but I need some one of those ways to picturize it
[15:49:26] *** Joins: Guest5952 (~Guest59@49.3.24.45)
[15:49:48] <teut> rather the     least significant bits of a  and b are loaded on the register   <    is this correct?
[15:50:01] <teut> looking at the full adder it seems like this
[15:50:24] <teut> the register can t  store  a and b together on it , it doesnt have enough space
[15:50:27] <GeDaMo> Which register are you talking about?
[15:50:30] <W> one simple example is clock synchronization; there is a uniform clock signal somewhere that goes 0 1 0 1 0 1 for eternity at a rate calibrated to let circuits work optimally, and other circuits read, produce, and store values in time to features of this clock signal
[15:50:45] <deniska> teut: typically a CPU would read memory in chunks corresponding to the size of its registers
[15:51:10] <deniska> (well, abstract model of a CPU, or an older/simpler one, modern CPUs are whacky)
[15:51:15] <GeDaMo> A and B are two different inputs to the adder
[15:51:56] <teut> GeDaMo  but before loading into the adder won't be be put on register first?
[15:52:21] <W> (e.g. there might be a convention that you let the instant when the clock goes from 0 to 1 be when the input values are used, and the period where the clock is 0 is when the output must be ready and stable)
[15:52:27] <teut> yes deniska so        rather the     least significant bits of a  and b are loaded on the register   <    is this correct?
[15:52:30] <GeDaMo> Possibly, some CPUs can add from memory
[15:52:31] *** Quits: Guest59 (~Guest59@103.149.202.18) (Ping timeout: 246 seconds)
[15:52:44] <teut> for old cpu s
[15:52:48] <deniska> teut: if you want to perform an arithmetic operation, we're probably talking about two registers
[15:52:58] *** Quits: kmh (~kmh@p200300df5f069e00d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[15:53:13] *** Joins: kmh (~kmh@p200300df5f2b7500d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[15:53:14] <teut> oh ok , we got 16 registers, yes , I missed it
[15:53:22] <deniska> teut: so first you load from memory to the first register, then you load something from memory to the second register, then perform an operation
[15:53:43] <deniska> teut: older CPUs typically had at least two registers to use with ALU
[15:53:48] <deniska> modern CPUs have many more
[15:54:08] <teut> yes , circuits are more compact now
[15:54:11] <W> modern CPUs might not have the registers it exposes to the opcode interface
[15:54:23] <W> it's all abstractions, all the way down
[15:54:59] *** Quits: runicskull (~runicskul@user/runicskull) (Quit: Leaving)
[15:55:41] <teut> modern cpu s  are much more optimized by hacky stuff, I understand that
[15:56:05] <teut> thanks for explaining
[15:57:43] <deniska> (some CPUs can perform operations directly on memory, that would be implemented by feeding data bus directly to ALU)
[15:58:40] <teut> yes  , loading  data on register is a time wastage
[15:59:12] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 272 seconds)
[15:59:21] <deniska> well, it may require making other parts of a CPU more complicated, that's why a lot of designs actually don't support any memory operations besides stores and loads
[15:59:38] <GeDaMo> https://en.wikichip.org/w/images/7/7e/skylake_block_diagram.svg
[16:00:03] <teut> ah yes GeDaMo you showed this once before too
[16:00:10] <GeDaMo> I like that diagram :P
[16:00:44] <deniska> at some point of history CPUs became much faster than RAM, so you want to avoid operations involving memory :)
[16:00:51] <teut> still that diagram is beyond my ability to understand
[16:00:54] <mrig> GeDaMo: Wouldn't this be a great architecture for Forth?
[16:01:03] <GeDaMo> Which?
[16:01:18] <mrig> all that shared L2 cache. The skkylake architecture.
[16:01:18] *** Joins: rustyshackleford (uid236774@id-236774.brockwell.irccloud.com)
[16:01:30] *** Quits: Guest5952 (~Guest59@49.3.24.45) (Quit: Client closed)
[16:01:37] <GeDaMo> Cache is just faster memory
[16:02:01] <teut> is cache just ram but more nearer to the processor?
[16:02:11] <teut> and is just 12 kbs at max
[16:02:18] <Glumfish> Yes, but its not the same type of ram
[16:02:19] <mrig> yes, with forth being able to be composed within that space, must be pretty useful to be able to share between processors.
[16:02:21] <deniska> I wonder if there's a place for an architecture which allow explicit operations on cache vs ram
[16:02:22] <W> teut, fundamentally, humans don't bother to understand fully even a single CPU they are actively working on the design of. We encapsulate and abstract so that the workload is manageable and so we can produce bigger and more complex systems than can fit in our memory easily
[16:02:26] <Glumfish> Cache is SRAM which is faster
[16:02:37] *** Joins: Leone (~Leo@45.72.238.153)
[16:02:45] <GeDaMo> deniska: that's essentially what GPUs do
[16:02:55] <GeDaMo> Also the Cell processor
[16:03:19] <mrig> For specific data structures, that must be pretty powerful.
[16:03:21] <teut> yes W  but understanding atleast one architecture will help write efficient code
[16:03:23] <GeDaMo> The processing units manually control 'local' memory
[16:03:23] <Glumfish> teut: But cache is controlled in different ways than memory, the CPU Cache controller manages the Cache (what goes in and what goes out)
[16:03:31] <W> teut, will it?
[16:03:53] <deniska> on most architectures cache is just something which makes it magically go faster
[16:03:58] <teut> atleast I can understand threads and other stuff well
[16:04:22] <deniska> you can be aware of cache and its effect, but you don't have much direct control over it besides perhaps "clean it all" and similar commands
[16:04:22] <mrig> between cores rather, not the processors.
[16:05:11] <W> teut, I think you are describing a multi-year learning project that might allow you to save 10% of the runtime of a piece of software that has in the process been rendered unreadable; when you could get 7% just by learning a few simple facts like using close together memory locations to fully utilize caches etc
[16:05:16] <teut> yes Glumfish  , sure,  some circuitry may be difffernt
[16:06:01] <Glumfish> teut: There was a really nice video on cache and cache optimization
[16:06:10] <Glumfish> Ill try getting you a link
[16:06:27] <teut> well, I m just reading a book on assembly language and this was a part in it, so I just wanted to understand it
[16:06:37] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[16:06:59] <Glumfish> teut: https://www.youtube.com/watch?v=Nsf2_Au6KxU
[16:07:04] <Glumfish> Watch this
[16:07:09] <teut> Glumfish , thanks
[16:07:10] <Glumfish> its a bit a long  but definately worth ti
[16:07:17] <Glumfish> very interesting with good visualizations
[16:07:24] <GeDaMo> teut: do you know about NAND2Tetris? It goes through the process of building a simple CPU from logic gates
[16:07:26] <teut> no problem, I watch pycon, goto; etc
[16:07:42] <teut> no problem in long videos
[16:07:48] <Glumfish> noice
[16:07:53] <teut> GeDaMo yep
[16:07:58] <GeDaMo> https://www.nand2tetris.org/software
[16:08:00] <Glumfish> Linuxconf.au has nice talks
[16:08:18] <W> I mean, I say this as someone that closely studied how the C64 works at a low level. It was interesting, sure, but ultimately very little of that knowledge turned out to be practically useful
[16:08:59] <teut> but some parts of the course I couldnt understand
[16:09:46] <Glumfish> W: I think the sweetspot with a lot of these things is to learn the basic details and have a fundamental grasp of how these things work but the details don't matter a lot of times. You don't have to understand/know 100% of how it works
[16:09:47] <teut> so I just try to find other resources with the keywords I got from there
[16:09:52] <Glumfish> As long as you get the basics
[16:10:02] *** Quits: kmh (~kmh@p200300df5f2b7500d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:12:43] *** Joins: kmh (~kmh@p200300df5f2bfd00d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[16:18:39] *** Joins: gggp_ (~gggp@125.33.93.73)
[16:18:56] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[16:19:17] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[16:19:20] <decker> .
[16:21:40] *** Quits: gggp (~gggp@221.219.70.91) (Ping timeout: 246 seconds)
[16:23:05] *** Joins: Twipply (~Twipply@user/twipply)
[16:24:05] *** Joins: riff-IRC (~riff-IRC@user/riff-irc)
[16:24:54] *** Joins: kmh_ (~kmh@p200300df5f2c3700d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[16:26:10] *** Quits: kmh (~kmh@p200300df5f2bfd00d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[16:32:28] *** Quits: gggp_ (~gggp@125.33.93.73) (Quit: Leaving)
[16:32:48] *** Joins: gggp_ (~gggp@60.10.194.47)
[16:33:49] *** Joins: mobidrop_ (~mobidrop@217-62-121-57.cable.dynamic.v4.ziggo.nl)
[16:34:10] *** Joins: gggp__ (~gggp@114.245.111.21)
[16:36:34] *** Quits: mobidrop (~mobidrop@84.241.196.73) (Ping timeout: 272 seconds)
[16:37:22] *** Quits: gggp_ (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[16:39:55] *** Joins: kmh (~kmh@p200300df5f2c9000d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[16:40:10] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 240 seconds)
[16:40:48] <mrig> pretty sure my question earlier on about the different ways of plotting relates to the graphs dimensional properties; The Mandelbrot having also the count of iterations, which is effectively the z axis.
[16:41:23] *** Quits: kmh_ (~kmh@p200300df5f2c3700d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:42:21] <mrig> I wonder if this is a way that the code separation or distinction can be made more logical; just need more study to nail this code I think.
[16:42:35] *** Joins: rifl (~rifl@user/rifl)
[16:43:08] * mrig gets all emotional and hand wavy about this kind of thing :D
[16:45:26] *** Joins: Stefan26 (~Stefan26@78-67-218-242-no207.tbcn.telia.com)
[16:45:49] *** Joins: Crassus (~Crassus@user/crassus)
[16:46:06] <mrig> oh border tracing must be just selective pixel examination I suppose, tracing the edge.
[16:47:29] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[16:48:04] <mrig> vary logical once you think on it a while; A big chunk that does not need to be tested for and those values are all max values of z.
[16:50:44] *** Quits: dev4449 (~dev4449@2.147.130.174) (Ping timeout: 252 seconds)
[16:51:12] *** Quits: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net) (Quit: reboot)
[16:51:19] *** Quits: anton (anton@2604:2dc0:101:200::185) (Ping timeout: 256 seconds)
[16:51:41] <mrig> differing dimentionality, not sure if that is a word :)
[16:52:03] *** gggp__ is now known as gggp
[16:52:10] <pyzozord> so here is my gameloop code with variable length tick time https://termbin.com/fmt1 \o/
[16:52:41] <pyzozord> now based on that I can do timestamp diffs to figure out how much time elapsed between frames. And based on that I can do in game counters and based on the counters animations
[16:53:43] *** Quits: audgirka__ (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Quit: Leaving)
[16:54:00] *** Joins: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275)
[16:54:01] *** Joins: furrykef (~furrykef@ip68-229-199-137.ok.ok.cox.net)
[16:58:26] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 252 seconds)
[16:59:41] <Mangy_Dog> https://imgur.com/gallery/OI4q6RN
[17:01:17] *** Quits: jazzy (~jaziz@2600:380:c151:8f83:b1f2:8a9f:200e:f932) (Ping timeout: 252 seconds)
[17:01:32] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[17:01:50] *** Quits: kmh (~kmh@p200300df5f2c9000d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:03:19] *** Joins: [Kalisto] (~Nico@user/kalisto/x-8968079)
[17:04:15] <mrig> oh dang, that moment when you realised that you should have taken note of a time stamp of a particular recorded lecture but did not do so at the time.
[17:04:21] <beaky> nice blinkenleds
[17:04:31] <Mangy_Dog> :)
[17:04:31] * mrig dreams of audio grep.
[17:04:49] <Mangy_Dog> though the post is more about the scanning wipe effect on the body in the lcd
[17:04:50] <Mangy_Dog> :D
[17:05:06] <Mangy_Dog> ive put way way way too much effort into that
[17:05:08] *** Joins: hoochmonger (~hoochmong@user/hoochmonger)
[17:06:08] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 252 seconds)
[17:06:28] <mrig> Has any real work been done on audio regular expressions?
[17:06:46] <merijn> That's a nightmarish combination of words right there
[17:06:56] <mrig> I suppose this would meld with speech synthesis.
[17:07:08] <mrig> merijn: not really if you are working in phonems.
[17:07:11] *** Joins: kmh (~kmh@p200300df5f2d3400d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[17:07:19] <mrig> I dont see why I should be.
[17:07:41] *** Joins: pulse (~pulse@user/pulse)
[17:07:43] *** Joins: varaindemian (~varaindem@86.124.22.149)
[17:07:57] <mrig> If you basis is sound, you have a sound foundation.
[17:08:13] <mrig> Got to love English for its humor :P
[17:10:00] *** Joins: nekonibble (~nekonibbl@user/nekobit)
[17:11:09] <mrig> s/you/your/
[17:12:59] *** Joins: kmh_ (~kmh@p200300df5f2d4700d9e8a7e0e6fd20fc.dip0.t-ipconnect.de)
[17:13:27] <beaky> yes instead of regular expressions audio has wavelets
[17:13:31] <Glumfish> mrig: for a second there I thought you accidentally typed here instead of vim LOL
[17:13:32] <mrig> beaky: I suppose that would count as io too, if you are streaming bits that are also distinct blocks marked by specific rhythms of transients.
[17:13:40] <sandman13> mrig: Shazam is a thing you know
[17:13:48] *** Quits: jess (~jess@libera/staff/jess) ()
[17:13:48] *** Joins: speckz (~speckz@2600:1700:ce0:bf00:7123:54fa:8f6d:4b56)
[17:13:56] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[17:14:15] <rindolf> sandman13++
[17:14:23] * rindolf is now playing: Pitch Perfect 3 _ Anna Kendrick Performs Freedom! '90 in 4K HDR-pTEmpZ79jeo.mp4 [01:17/04:12]
[17:14:31] *** Quits: kmh (~kmh@p200300df5f2d3400d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 246 seconds)
[17:14:38] <mrig> sandman13: any good for academic audio?
[17:14:51] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) ()
[17:15:04] *** Joins: jess (~jess@libera/staff/jess)
[17:15:47] <mrig> Glumfish: expressing recognition of my poor typing :)
[17:16:25] <mrig> sandman13: can I run Shazam in vim or on the command line?
[17:16:28] <mrig> :P
[17:16:46] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:16:52] <sandman13> You are free to write plugins for it mrig
[17:17:00] <sandman13> they should have an API
[17:17:18] <edgar-rft> what is academic audio? an audio file with a PhD degree?
[17:17:35] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[17:17:49] <mrig> adgar-rft fancy way of saying with long uncommon words in it.
[17:17:56] *** Joins: milkt_ (~debian@gateway/tor-sasl/milkt)
[17:17:57] <sandman13> edgar-rft: An audio which is perfect in every way. You need a bit work to listen it though
[17:18:10] <mrig> The thing does not need to know what the words are, only how to find them accurately.
[17:18:26] <mrig> and make an index.
[17:18:40] <sandman13> but once you do that, it's the most beautiful piece of music you ever heard of
[17:18:47] *** Quits: milkt (~debian@gateway/tor-sasl/milkt) (Ping timeout: 244 seconds)
[17:18:52] * edgar-rft finds words he doesn't know every day
[17:18:57] <mrig> trie for text searching.
[17:19:16] <mrig> edgar-rft: this is why phonetic spelling is so advantageous.
[17:19:37] <mrig> even better if the meaning is structured too, but that is a whole other subject.
[17:19:47] <mrig> that is for modleing
[17:19:57] <mrig> modeling
[17:20:01] *** Quits: alextee (~alextee@zrythm/alex) (Ping timeout: 265 seconds)
[17:20:12] *** Quits: milkt_ (~debian@gateway/tor-sasl/milkt) (Client Quit)
[17:20:24] * edgar-rft is a supermodel
[17:21:02] <mrig> edgar-rft: super!
[17:21:17] <mrig> :D
[17:21:36] *** Joins: milkt (~debian@gateway/tor-sasl/milkt)
[17:21:38] <mrig> a model of good behaviour no doubt :P
[17:21:55] <edgar-rft> it's all about model supremacy
[17:22:43] <mrig> yes, that is the point at which the egg is ready to hatch and the adult born out of teenage me-me ness :)
[17:23:01] <mrig> just 17 <- at your age really!
[17:23:17] * mrig gets the wet trout out.
[17:24:10] * Arahael wacks mrig with an even bigger trout
[17:24:28] <mrig> a plushi one I hope :)
[17:24:39] <Arahael> It was not a plushi one.
[17:24:56] *** Quits: kmh_ (~kmh@p200300df5f2d4700d9e8a7e0e6fd20fc.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[17:25:17] <sandman13> What's up with trout smacking in IRC?
[17:25:38] * mrig slaps sandman13 with a wet trout.
[17:25:41] * sandman13 dodges possible trouts
[17:25:50] <sandman13> too late
[17:26:00] <sandman13> my reflex aren't good :D
[17:26:02] <mrig> sandman13: its all in the tail you see.
[17:26:09] <sandman13> *reflexes
[17:27:08] <mrig> so audio regexp is to be my thing it would seem, to find that line of language the one remembers to cite perfectly my ear but has not idea where it is for reference.
[17:27:23] <mrig> by ear rather.
[17:27:52] <rindolf> edgar-rft: miss piggy as a supermodel: https://www.shlomifish.org/humour/Muppets-Show-TNI/Harry-Potter.html#the_beautiful_assistant
[17:29:46] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 240 seconds)
[17:30:32] <mrig> A fascinating moment in a Sam Vaknin talk on the love that some have of complexity; I really wish that I had marked it now, for future reference.
[17:30:39] <Arahael> sandman13: It's very old IRC humour, it was a "built-in insult" or something in some of the older clients.
[17:30:48] <mrig> just so relevant to programming that it is funny.
[17:30:50] <sandman13> I see
[17:31:07] <Arahael> sandman13: At least, that's my memory of it. :D
[17:31:11] <mrig> Arahael: I thought it was an affectionate greeting ;)
[17:31:37] <Arahael> mrig: I won't deny that.
[17:31:42] <mrig> and a moment of stress relieving silliness
[17:32:04] <sandman13> I should get a nick that is hexy
[17:32:28] <InPhase> !q Arahael
[17:32:28] *** bayaz sets mode: +q $a:arahael
[17:32:32] <InPhase> !uq Arahael
[17:32:32] *** bayaz sets mode: -q $a:arahael
[17:32:42] <InPhase> !q Arahael Ridiculous hair color
[17:32:42] *** bayaz sets mode: +q $a:arahael
[17:32:51] <sandman13> nice way to say hello I see
[17:32:52] <InPhase> !uq Arahael
[17:32:52] *** bayaz sets mode: -q $a:arahael
[17:33:02] *** Joins: alextee (~alextee@zrythm/alex)
[17:33:07] <mrig> sandman13: Sexagesimal would suite you better!
[17:33:29] <Arahael> !q InPhase This is a better trout!
[17:33:29] *** bayaz sets mode: +q $a:InPhase
[17:33:33] <Arahael> !uq InPhase
[17:33:33] *** bayaz sets mode: -q $a:InPhase
[17:33:40] <Arahael> Awesome.  New mod bot is here!
[17:35:52] *** Quits: LiftLeft (~LiftLeft@154.21.114.88) (Ping timeout: 246 seconds)
[17:36:24] *** bayaz sets mode: +q $a:arahael
[17:36:24] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Remote host closed the connection)
[17:36:30] *** bayaz sets mode: -q $a:arahael
[17:37:55] *** Joins: Joanna (uid57472@id-57472.tooting.irccloud.com)
[17:38:48] <Arahael> Sooo...
[17:39:35] *** Quits: lunarkitty (uid501895@user/pyra) (Quit: Connection closed for inactivity)
[17:40:08] *** bayaz sets mode: +b $a:arahael
[17:40:09] *** Arahael was kicked by bayaz (Arahael)
[17:40:23] *** bayaz sets mode: -b $a:arahael
[17:40:27] *** Joins: Arahael (~arahael@60-240-135-223.tpgi.com.au)
[17:40:27] <mrig> heh
[17:40:30] <merijn> lol
[17:40:32] <merijn> pwned
[17:40:33] <Arahael> Wow, that was effective.
[17:40:39] <InPhase> So much for testing in the dev environment.  ;)
[17:40:46] <mrig> Arahael: you cant escape the trout that way!
[17:40:55] <merijn> Arahael: It was mIRC that had the trout insult, iirc
[17:41:13] <Arahael> merijn: Ah, so that's probably where xchat then stole it from.
[17:41:29] <Arahael> I just remember almost 2 decades ago my xchat at the time had that insult. :)
[17:41:34] *** Joins: Guest53 (~textual@ool-43527ebe.dyn.optonline.net)
[17:41:36] <mrig> oh! A well traveled trout then.
[17:42:01] * mrig holds nose.
[17:42:28] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[17:42:36] <teut> Uploaded file: https://uploads.kiwiirc.com/files/e0bb7be0d1d346cebb88bd07be70e3c4/image.png
[17:42:39] *** Joins: kmh (~kmh@p200300df5f2d8b0075f9d28b18545808.dip0.t-ipconnect.de)
[17:42:49] <teut> is thread a hardware thing?
[17:43:14] <Arahael> teut: In that context, yes.
[17:43:27] <teut> and otherwise?
[17:43:34] <Arahael> teut: Also software. :D
[17:43:36] <teut> what does windows pthreads use
[17:43:54] <teut> but we can spawn 1000 threads too
[17:43:58] <InPhase> teut: Most of it is OS managed, but the hardware needs support for concurrent processes and memory access specifications specifically.
[17:44:22] <teut> so , is it like use whatever 's possible on hardware , and rest use software threads/
[17:44:24] <teut> ?
[17:44:56] <teut> each thread has it's own registers, counter registers  , thats what I have heard
[17:45:08] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[17:46:34] <Arahael> teut: Yes, but in practice the OS will switch software threads around because most systems need to run way more threads than they have hardware cores for.  Even if they have enough hardware cores, it's sometimes faster to run them all on the same thread (due to complicated memory cache stuff)
[17:46:39] <decker> https://d3x0r.github.io/space-plasma.js/  I really wouldn't have expected this to just form rivers... I don't know how to generate convergent flows I guess...    added flow dots - but added a time-averaged sum of the path too
[17:46:50] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Ping timeout: 252 seconds)
[17:46:56] *** Joins: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it)
[17:47:02] <Arahael> teut: And when the OS is switching threads around, it will indeed need to copy and preserve the various registers.
[17:47:17] <teut> and is that hyperthreading since each core has two threads?
[17:47:32] *** Joins: jinsun_ (~jinsun_@user/jinsun)
[17:47:38] <Arahael> teut: The term is overloaded, and I think that
[17:47:45] <Arahael> 's an intel-specific technology and term.
[17:48:08] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 272 seconds)
[17:48:25] <Arahael> On some Intel CPU's, each core can run two "hardware threads" simultaniously, though I think both can't access the FPU registers or something.
[17:48:46] <decker> they have the same cache with different registers
[17:48:58] <teut> that video says that using local variables  is way much faster than using global variables
[17:49:24] <decker> local variables are typically on the call-stack, and that current stack is more often in cache than some other variable
[17:50:01] <teut> whats the typical size of the stack?
[17:50:12] <decker> a couple meg
[17:50:16] <teut> L1 cache is just 256 kb
[17:50:18] <decker> it's not meant to be big
[17:50:30] <decker> the used fame is like 256 bytes
[17:50:31] <decker> frame
[17:51:00] <Glumfish> teut: on Linux I think its 8kb
[17:51:12] <Glumfish> but you can tell the linker to increase it
[17:51:20] <Arahael> Or it can be dynamic.
[17:51:21] <decker> linux is actually really big - but you can compile it for small hardware
[17:51:23] <teut> on Linux,   what do you mean?  cache is hardware
[17:51:29] <Glumfish> decker: the stack is more defiantely in cache
[17:51:30] <Arahael> Btw, we're mixing up terms here - cache, and *stack*.
[17:51:34] <Glumfish> sicne its constantly used
[17:51:51] <teut> if I have a  .cpp file of 5000 lines
[17:51:56] <decker> Glum 'it's' 8kb?
[17:52:02] <decker> what is the it in that?
[17:52:04] <Glumfish> The stack size
[17:52:07] *** Joins: mmfood (~mmfood@45.91.21.37)
[17:52:12] <teut> the whole program after compilation when run which be loaded into a stack
[17:52:19] <decker> no
[17:52:28] <teut> then?
[17:52:28] <decker> there's a heap too - that's where globals are which is not the stack
[17:52:29] <Glumfish> not really the OS maps the code segment in a read only are
[17:52:31] <Glumfish> a
[17:52:36] <Glumfish> specifically used for a execution
[17:52:41] <Glumfish> its called the text segment
[17:52:43] <teut> ok there's the heap, that is   fetch and store on ram
[17:52:44] <decker> and it's in a segment itself really outside of heap even - the binary code
[17:52:59] <Glumfish> there are segements in an linked executable
[17:53:06] <Glumfish> each gets loaded with different premissions
[17:53:18] <Glumfish> the mains are the globals text stack and heap
[17:53:19] <decker> (or mapped and not even loaded)
[17:53:20] <teut> oh so the globals are stored on heap (ram) and locals favoured in cache, interesting
[17:53:29] <Glumfish> globas, text, stack, heap ***
[17:53:39] <Glumfish> teut: globals are at their own section
[17:53:44] <Glumfish> wait one ill send a pic
[17:53:56] <decker> heap and stack are both backed by ram... but since you just called a function, and put the values ther - those values will definitely be near the CPU
[17:54:04] <teut> "own section" is unclear
[17:54:32] <Glumfish> https://th.bing.com/th/id/R.fc2580dcbc6ca472933bdafed83a1612?rik=OZE3xrCmJicPpQ&riu=http%3a%2f%2faerointerview.com%2fwp-content%2fuploads%2f2015%2f10%2fPicture1.png&ehk=siKWLZ1pTk7A0hUNemI%2bbFCfmJnPX6RzEKVFfpJzcaI%3d&risl=&pid=ImgRaw
[17:54:48] <Glumfish> initialized date and uninitialized data are the globals accordingly
[17:55:06] <Glumfish> teut: they are different memory segments
[17:55:14] <Glumfish> that are managed differently
[17:55:24] <teut> the img tells about stack  but not about ram, cache etc
[17:55:26] <decker> that's not actually right - there's lots of code segments with shared libraries and stuff
[17:55:36] <decker> each of them has hteir own static data blocks, code blocks, and even heap blocks
[17:55:39] <Glumfish> teut: thats the logical layout
[17:55:41] <decker> (sections)
[17:55:46] <teut> ok
[17:55:50] <Glumfish> modern OSes use
[17:55:54] <Glumfish> virtual memory
[17:56:04] <Glumfish> meaning when you accesss a piece of memory for the first time
[17:56:26] <Glumfish> they map a virtual memory address to a physical memory address
[17:56:45] <Glumfish> meaning they can be at different places in memory
[17:56:46] <RedNifre_> What's the situation with fleeing from Github to Gitlab? When Microsoft bought it, I started some new repos on Gitlab, but it seems Github still reigns supreme, huh?
[17:57:12] <deniska> most people didn't care much
[17:57:13] <Glumfish> your program treats it like you own all the memory addresses on the computer
[17:57:15] <decker> RedNifre_ github's still fine - I'm not a fan of the gitlab interface
[17:57:27] <Glumfish> the whole 64-bi adresss space
[17:57:30] <RedNifre_> Hrrrrrrrrrrrrrrrrrrrm
[17:57:38] <Glumfish> 64-bit**
[17:57:47] <mrig> RedNifre_: I am going to write my own gomodule server, use github mostly for that at the moment.
[17:58:09] *** RedNifre_ is now known as RedNifre
[17:58:16] <mrig> have it in mind to do, not got round to it yet.
[17:58:23] <Glumfish> teut: do you get a bit how it works
[17:58:37] <teut> so the stack memory requirement is sufficed by   the ram+cache+hard drive
[17:58:44] <Glumfish> thats how virtual memory address works and how programs don't interfere
[17:58:48] <Glumfish> teut: exactly
[17:58:50] <bjs> teut: "ram" is just what we call memory,  every program gets given a chunk of memory (like maybe from byte 0x10000 to byte 0x20000 or something).  Then "stack" and "heap" and everything else are just names for bits of that memory that the program uses for different things.
[17:58:52] <Glumfish> its transpacrent to you
[17:58:58] <Glumfish> transparent to you
[17:58:59] <decker> ( stack is rarely on hard drive - unless page swapped out )
[17:59:02] <Glumfish> and the processor really
[17:59:05] <RedNifre> I feel that Microsoft owning it taints it somewhat, but maybe I'm getting too old for idealism like that.
[17:59:08] <mrig> Never got into gitlab as it seemed to be to browser involved, could be that I haven't given it enough time yet.
[17:59:13] <Glumfish> the MMU takes care of mapping the addresses
[17:59:25] *** Quits: jinsun_ (~jinsun_@user/jinsun) (Read error: Connection reset by peer)
[17:59:29] <teut> the os just has bunch of addresses , we dont need to care of cache or ram or hard drive
[17:59:31] <Glumfish> to you the programmer and the programm its like you bascically use the whole computer on your own
[17:59:35] *** Quits: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi) (Ping timeout: 252 seconds)
[17:59:43] <Glumfish> and the same for other programms
[17:59:59] <bjs> teut: it's usually easier to start thinking about things as if caches, MMUs and hard drives don't exist
[18:00:08] <merijn> RedNifre: Seems like a shortsighted way to look at things. I recommend the approach of "Do I understand how they intend to profit of this?" and "Does that impact me?"
[18:00:08] <teut> yes bjs, that much I understood now , that's segmentation of addresses
[18:00:08] <Glumfish> this means as a programmer and the assembly code doen'st have to be careful not to collide with other programmers
[18:00:24] <Glumfish> teut: the cache is managed by the CPU on its own
[18:00:29] <Glumfish> its just "faster ram
[18:00:31] <merijn> RedNifre: Take Travis CI, the only way that would ever be profitable is by making users pay, after they had locked themselves into travis
[18:00:39] <Glumfish> some things will be there and faster to access
[18:00:52] <bjs> teut: and it's part of the OS's job to manage the mmu and the caches and such to make it so you don't even see them
[18:00:56] <beaky> the beginning of a new era linux being rewritten in rust https://lore.kernel.org/lkml/20210704202756.29107-1-ojeda@kernel.org/
[18:01:02] <Glumfish> only thing you can do as a programmer is to optimized cachability and make the cpu hold the sutff in cache
[18:01:11] <decker> I don't know M$ has profit intent... they had started using the services themselves for some projects (C# core, microsoft terminal, vscode, ... ) so rather than paying github for a corporate account, they decided to buy it :)
[18:01:16] <merijn> RedNifre: As far as I can tell there's 2 ways MS intends to monetize GitHub: 1) sell self-hosted GitHub enterprise and 2) make (and sell) tight integration with their Azure cloud
[18:01:19] <Glumfish> but then its up to the OS and cpu to do the hardware management
[18:01:25] <decker> so it's more of a 'not a loss' than 'make a profit' motive
[18:01:31] *** Joins: scabby (~scabby@user/scabootssca)
[18:01:37] <teut> Glumfish  , yes  so  stack instructions is faster to execute
[18:01:44] <teut> than what is on heap but
[18:01:45] <decker> and side services :)
[18:01:47] <Glumfish> yes because in the stack
[18:01:52] <RedNifre> merijn but it feels like using Github makes you complicit.
[18:01:56] <Glumfish> ** The stack is used all the time
[18:01:58] <merijn> Effectively, the business plans seems to be "run GitHub at a loss to sell other services and keep developers invested in MS ecosystem"
[18:01:59] <bjs> teut: "stack" and "heap" are just names for bits of memory, there's no difference in how fast they are to access
[18:02:01] <teut> yes stack uses offsets , heap uses  MMU mappings
[18:02:01] <Glumfish> for function calls and local variables
[18:02:05] <Arahael> merijn: Don't forget copilot.
[18:02:06] <RedNifre> Anybody here who has completely migrated away from Github?
[18:02:10] <Glumfish> thus its more liklely to be in cache
[18:02:17] <teut> I know that now  bjs
[18:02:19] <Glumfish> as its used often
[18:02:20] <merijn> RedNifre: And migrate where? :p
[18:02:34] <Glumfish> teut: keep in mind stack allocations are MUCH quicker than heap
[18:02:38] <merijn> RedNifre: Unless you self-host your locking yourself in as much with your new host as with github
[18:02:45] <RedNifre> merijn: I find Gitlab acceptable. I also have a bit on Bitbucket, but the interface weirds me out.
[18:02:57] <merijn> bitbucket is so incredibly terrible
[18:03:02] <merijn> It's mindboggling, really
[18:03:02] <Glumfish> because to allocate on the stack you just use one instruction (push, oversimplification, ignore plz)
[18:03:11] <RedNifre> merijn yeah, but if Gitlab turns bad you can actually host it yourself.
[18:03:22] <Glumfish> as you know ahead of time how much memory the allocation is going to be
[18:03:22] <teut> yes,  so the people say  something about  dynamic   allocation,  and that "classes"  are always created in the heap
[18:03:27] <Glumfish> so its essentially hard coded
[18:03:37] <Glumfish> while on the heap you call the OS
[18:03:40] <merijn> RedNifre: Gitlab is already bad >.>
[18:03:44] <Glumfish> and tell it gijve me more heap
[18:03:48] <merijn> In that it's terrible to use
[18:03:57] <Glumfish> then malloc manages all the block of data on the heap
[18:04:05] <merijn> Glumfish: That depends entirely on your allocator
[18:04:08] <Glumfish> so that when they don't fit in the size you are allowed to use
[18:04:13] <Glumfish> it asks the os for more
[18:04:20] <Glumfish> when you don't need as much it gives it back
[18:04:23] *** Joins: LiftLeft (~LiftLeft@212.102.59.186)
[18:04:26] <Glumfish> and it also manages where they are
[18:04:43] *** Joins: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[18:04:48] <Glumfish> so when you aks more memory it gives you and unused section
[18:04:56] <Glumfish> and not collide with other memory
[18:04:58] <d3x0r> they are ... instances of classes anyway; though you can also declare them local... in in many languages
[18:05:02] <Glumfish> teut: it depends
[18:05:09] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[18:05:12] <Glumfish> in C its up to you how to allocate
[18:05:22] <Arahael> merijn: I actually kind of prefer bitbucket to gitlab at the moment.
[18:05:35] <Glumfish> but to allocate on the stack (*not exactly true) you need to know the size of the allocation
[18:05:50] <Glumfish> so an int is 8bits for example
[18:05:57] <d3x0r> right... :) can't get factories to put stuff on your stack :)
[18:06:05] <merijn> Just implement your own malloc to learn how it works :p
[18:06:20] <teut> so  when you instantiate a class object,  a whole copy of that  class code has to be created , and  this copy, is stored in heap memory
[18:06:25] <Glumfish> teut: the stack is managed by the compiler , and is *Essentially* managed compile time
[18:06:27] <merijn> It's not like malloc is some dark voodoo
[18:06:36] <d3x0r> the code for it already exists
[18:06:57] <Glumfish> teut: it depends how that object gets allocated
[18:06:59] <d3x0r> dont' even need to do any additional fixups for it, it's already referenced by things using that class instance too
[18:07:07] <Glumfish> you can have a class with three ints for example
[18:07:15] <Glumfish> you can allocate that on the stack
[18:07:29] <Glumfish> since you know its 3 ints of size (sizeof(int) * 3)
[18:07:37] <Glumfish> if its a class with an array
[18:07:40] <Glumfish> which is not fixed size
[18:07:42] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:07:44] *** Joins: wovixo (~wovixo@128.104.205.49)
[18:07:47] <Glumfish> you need to allocated that dynamically
[18:07:48] <teut> Glumfish  : I can allocate them on the stack?  How do I know something is allocated on stack or heap?
[18:07:49] <Glumfish> on the headp
[18:07:56] <d3x0r> alloca
[18:07:57] <Glumfish> teut: it depends on the lanaugage
[18:08:00] <Glumfish> in C
[18:08:01] <teut> the os will favour stack to be using cache
[18:08:02] <Glumfish> its clear
[18:08:07] <teut> and heap to be using ram
[18:08:13] <bjs> teut: no no no, they're both ram
[18:08:16] <bjs> it's just ram
[18:08:18] <Glumfish> teut: The CPU manages ram
[18:08:20] <Glumfish> not the OS
[18:08:32] <Glumfish> if the cpu sees your'e using something often it will cache it
[18:08:36] <d3x0r> and favoring stack or heap is a compile time decision
[18:08:37] <merijn> teut: as far as the OS knows/cares there is no such thing as stack of heap
[18:08:39] <Glumfish> *oversimplicfication*
[18:08:42] <merijn> There's just "memory pages"
[18:09:01] <Glumfish> teut: in C for example
[18:09:04] <Glumfish> everything is on the stack
[18:09:11] <Glumfish> except whne you use malloc
[18:09:13] <d3x0r> not just if used 'often' if used 'at all' :)
[18:09:20] <Glumfish> or other forms of dyanmic allocation
[18:09:25] <bjs> teut: caches are irrelevant,  because software cannot even see that there are any caches. All software sees is "there is some ram, from address 0 to address 0x4000_0000" or whatever.
[18:09:26] <merijn> Glumfish: Eh
[18:09:39] <Glumfish> merijn: yeah?
[18:09:43] <merijn> Glumfish: "int foo[1024];" at the top level isn't stack nor is it malloc :p
[18:09:46] <teut> oh ok , so windows is written in c++, and that has a "register" keyword   so windows can atmost tell somevarible to be put in register
[18:09:50] <merijn> #Lawyered
[18:09:56] <teut> ok , cpu can only control ram
[18:10:01] <Glumfish> teut: thats an optimization keyword
[18:10:01] <teut> by the address bus
[18:10:03] <Glumfish> its a hint
[18:10:04] <d3x0r> register is deprecated :)
[18:10:08] <bjs> teut: it's up to the OS to split that ram up, give bits to different programs. then it's up to those programs to split it up even more, maybe into "stack" and "heap" sections.
[18:10:09] <Glumfish> the compiler can do whatever it wants
[18:10:21] <Glumfish> teut: so no one uses register in most code
[18:10:30] <teut> the compiler can do only what the programming language its written in supports
[18:10:34] <Glumfish> as the compile will put things where it wants
[18:10:38] <merijn> teut: That's not true
[18:10:39] <KillerWasp> unsigned char far * pnt = 0xb8000000;
[18:10:42] <Glumfish> compiler**
[18:10:57] <teut> python doesnt have a register keyword
[18:11:08] <merijn> Python doesn't have a compiler either >.>
[18:11:14] <Glumfish> the register keyword is an optimization hint
[18:11:20] <Glumfish> its not an instruction
[18:11:24] <Glumfish> python uses registers
[18:11:27] <merijn> You can implement a C compiler in python, despite python not having pointers
[18:11:31] <Glumfish> it puts things in registers
[18:11:46] <merijn> So "a compiler can only do what the language its written in" is clearly false
[18:11:48] <Glumfish> but you as the python programmer can't do such things
[18:11:50] <Glumfish> manaully
[18:12:04] *** Joins: arcatech (~arcatech@user/arcatech)
[18:12:05] <teut> what's the definition of compiler you are using?  A compiler is just a language translator
[18:12:21] <merijn> (I mean, realistically you can't implement a C compiler, because the C spec is a godawful mess that inspires madness...but let's suppose we had a sane, human-readable spec :p)
[18:12:24] <bjs> teut: they mean "ahead-of-time compiler", aka one that takes your program as input and produces another program as output.
[18:12:46] <KillerWasp> char*txt="Hello World!";int i=0,p=0;while(txt[i]){pnt[p]=txt[i++];p+=2;}
[18:12:52] <Glumfish> teut: you can implement most things in most things
[18:12:54] <bjs> teut: take a compiler that outputs native code (that is, assembly).  All those programs know about are registers and memory.
[18:12:55] <Glumfish> with limitations
[18:13:14] <d3x0r> KillerWasp you didn't set the attribute
[18:13:24] <KillerWasp> d3x0r# is the idea
[18:13:24] <Glumfish> langauges are just abstract definitions of you code this thing, this thing will happen
[18:13:28] <Glumfish> how exactly it happens
[18:13:29] <teut> if I write a compiler in assembly I can optimize it much more than one written in  c
[18:13:31] <Glumfish> is another question
[18:13:32] <teut> do you agree?
[18:13:38] <bjs> teut: why?
[18:13:39] <PlanckWalk> teut: No
[18:13:41] <Glumfish> **please don't kill me oversimplification to hell*
[18:13:47] <Glumfish> teut: theoretically yes
[18:13:50] <Glumfish> practically NO
[18:13:55] <Glumfish> definately NO
[18:14:02] <teut> practically NO, why so?
[18:14:04] <bjs> teut: it's not the language the compiler is written in that matters, but the language the compiler _output_s that matters
[18:14:13] <Glumfish> because modern compilers are smart as hell
[18:14:20] <Glumfish> and can see optimizations
[18:14:22] <Glumfish> that you won't
[18:14:30] <bjs> teut: what can you do in asm that the C compiler cannot do?  Remember that the C compiler could just have some C code that *generates the asm* you say is better
[18:14:40] <teut> but programming languages abstract out stuff
[18:14:44] <teut> they limit
[18:14:54] <Glumfish> and assembly is not easy to rewrite and move around to try every different implementation until its the fastest as possible
[18:14:57] <teut> like you cannnot use goto s in python
[18:15:01] <KillerWasp> unsigned int far*pnt=0xb8000000;char*txt="Hello World!";int i=0,p=0;while(txt[i]){pnt[p++]=txt[i++]|(pnt[p]&0xFF00);}
[18:15:11] <bjs> teut: you are confusing things,  you have the compiler program itself, but there's also the programs it outputs
[18:15:13] <Glumfish> teut: C is not python
[18:15:26] <Glumfish> in C most basic things have almost  a 1:1 mapping to hardware
[18:15:29] <Glumfish> and assemblu
[18:15:31] <bjs> teut: you could write a compiler in Python,  and the compiler itself cannot use gotos but it can generate asm which *does* have gotos in it
[18:15:32] <Glumfish> assembly**
[18:15:35] <teut> who said so, but python "misses" a feature
[18:15:38] <merijn> Ok, that's just nonsense
[18:15:38] <d3x0r> KillerWasp it could still be 0x00 (blakc on black doesn't show0
[18:15:40] <Arahael> teut: context is vital, we overload words all the time.
[18:15:46] <Glumfish> ((a lot of oversimplifications here))
[18:15:53] <merijn> C doesn't *remotely* resemble hardware in 2021
[18:15:54] <Glumfish> don't shout at me plz
[18:16:03] <KillerWasp> unsigned int far*pnt=0xb8000000;char*txt="Hello World!";int i=0,p=0;while(txt[i])pnt[p++]=txt[i++]|0x1E00;
[18:16:05] <merijn> Like, it's not even remotely close
[18:16:08] <Glumfish> merijn: eh yes and no
[18:16:09] <KillerWasp> d3x0r# better? :)
[18:16:13] <d3x0r> yup :)
[18:16:13] <teut> is there a way to copy all messages from this chat?
[18:16:15] *** Quits: gggp (~gggp@114.245.111.21) (Remote host closed the connection)
[18:16:20] <Glumfish> the basic instructions map logically
[18:16:27] <Glumfish> is it exact
[18:16:29] <Glumfish> not really
[18:16:30] <teut> I want to paste them in notepad , I couldnt read many due to the flow
[18:16:31] <d3x0r> teut ctrl-A ?
[18:16:33] <Glumfish> but roughly yes
[18:16:39] <merijn> C is roughly as close to modern hardware as python is
[18:16:44] *** Joins: gggp (~gggp@60.10.194.47)
[18:16:50] <merijn> That is "not at all"
[18:16:51] <bjs> Python might even be closer :P
[18:16:53] <Glumfish> merijn: Thats a stretch
[18:16:59] <teut> nope that selects the names of people and other stuff
[18:17:07] <Glumfish> C's memory model and operations are based on hardware operations
[18:17:19] <merijn> C's memory model
[18:17:24] <Glumfish> they are not exact no
[18:17:25] <merijn> That's cute
[18:17:28] <d3x0r> :) think it's the other way around
[18:17:31] <Glumfish> especially with optimizations
[18:17:35] <Arahael> Glumfish: *were* based on hardware. 3 decades ago
[18:17:35] <KillerWasp> Some things are never forgotten.
[18:17:50] <merijn> Like, C is such a hellish nightmare it didn;t *have* a memory model until C11, iirc
[18:18:00] <bjs> merijn: I think Glumfish means the memory object model
[18:18:03] <merijn> And it's certainly a very different model than what the hardware is
[18:18:07] <merijn> bjs: Even then
[18:18:30] <merijn> bjs: The imaginary memory model of C "where everything is a huge linear sequence of bytes" would be pretty close to the hardware
[18:18:32] <d3x0r> I don't think C even still has a memory model - it's very loosely specified
[18:18:45] *** Quits: gggp (~gggp@60.10.194.47) (Remote host closed the connection)
[18:18:47] <Glumfish> in C you use memory very directly
[18:18:50] <bjs> merijn: well,  that's not what C's objects say though
[18:18:53] <merijn> But the memory model defined by C is such a clusterfuck of complications that that view is definitely wrong
[18:18:57] *** Joins: ahungry (~user@99-40-9-245.lightspeed.livnmi.sbcglobal.net)
[18:18:57] <bjs> you don't have a linear map of bytes
[18:18:58] <bjs> right
[18:19:01] <merijn> bjs: Right, that's my point :p
[18:19:08] <Glumfish> bjs: wut?
[18:19:09] <bjs> But nobody cares what the actual C abstract machine really is
[18:19:13] *** Joins: gggp (~gggp@60.10.194.47)
[18:19:14] <bjs> Glumfish: wut what
[18:19:18] <merijn> bjs: I know
[18:19:24] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[18:19:27] <Glumfish> bjs: I don't get what you mean
[18:19:49] <merijn> bjs: Arguing with people who claim to like C is pointless, because they don't *actually* like C. They like the language they imagine C is :p
[18:20:01] <Glumfish> wtih "you don't have a linear map of bytes"
[18:20:10] <Glumfish> merijn: LOL
[18:20:12] <bjs> merijn: nobody knows what "C" actually is :)
[18:20:14] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[18:20:16] <merijn> bjs: True
[18:20:18] <Arahael> even what is the hardware machine code is iffy. its interpreters all the way down.
[18:20:21] <bjs> not even wg14 so im told..
[18:20:44] <merijn> Glumfish: In C you don't have a linear map of bytes, the real memory model of C is a hell of a lot more complicated and confusing than that
[18:20:58] <Glumfish> merijn: where can I read more on this?
[18:21:01] <merijn> If you don't have nightmares about strict aliasing rules, do you even program C >.>
[18:21:22] <PlanckWalk> It's especially funny since the hardware is so different from any programming language's model, but implements all sorts of layers to make it work to the programmer much differently.
[18:21:31] <merijn> Glumfish: The nightmare that is the ISO C11 standard >.> Lemme look up a free draft
[18:22:00] <merijn> Glumfish: The actual standard is like $100, but the drafts are available for free
[18:22:09] <merijn> Glumfish: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf
[18:22:51] <merijn> Relevant for the point of me and bjs is section 5.1
[18:23:24] <merijn> Which defines the C abstract machine
[18:23:50] <Glumfish> I'm having a look
[18:23:52] <merijn> All of the language specification (chapter 6) is defined in terms of "C abstract machine" operations. Which don't look very much like modern machines, sadly >.>
[18:24:56] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[18:25:32] <teut> in many  messages you wrote  "allocation"  Glumfish
[18:25:43] <teut> so is that allocation time consuming?
[18:25:54] <Glumfish> merijn: I'll read it more thouroughly a bit later
[18:26:11] <Glumfish> teut: if you allocate dynamically it could be
[18:26:12] <d3x0r> teut no - most of those were examples of fast allocations
[18:27:02] <Glumfish> merijn: in short what are some of the major differences between the abstract machine or what we use as programmers vs the actual hardware the compiled code runs on
[18:27:02] <beaky> what are modern machines like
[18:27:40] <d3x0r> allocating on the heap - usually requires getting a lock, because another thread might also be allocating, then scanning a list of already allocated by free objects, then making a new object in free space - or some combination of those plus other operations to get the block, and all of that scanning of the lists has to potentially page many different pages into the cache to get the final block
[18:27:40] <merijn> Glumfish: "strict aliasing" is one example, it's wrong in so much code that gcc doesn't even use it, because too much code would break
[18:27:53] <bjs> teut: "allocation" just means "give me a memory address that isn't being used right now", and that can be slow or fast depending on how it's done :)
[18:28:21] <merijn> Glumfish: The strict aliasing rules say that compilers are free to assume that pointers of different types (except for char!) never point to the same memory
[18:28:31] <teut> you allocate dynamically  one would need to create a whole copy of class so finding empty addresses and linking them ,  like  "how to reach from current to next location", that all stuff should take time i
[18:28:35] <beaky> one difference is hierarchical memory vs the appearance of flat memory in the abstract machine, another is the ordering of execution
[18:28:38] <teut> to*
[18:28:44] <d3x0r> if it's just some extra space in the stack for some local, short lived varaibles - it's as simple as just adding a number to a register
[18:29:00] <teut> in heap memory is not continuoous
[18:29:04] <merijn> Glumfish: In fact, all forms of type-punning (taking a pointer and casting it to another type, then accessing it. Like converting "int*" to "double*" are undefined per the spec)
[18:29:05] <teut> but in stack it is
[18:29:14] *** Quits: Crescendo (~Crescendo@user/crescendo) (Read error: Connection reset by peer)
[18:29:23] <teut> basically the adressing , not the memory
[18:29:38] <bjs> teut: if you want to allocate a class with 3 things in it, you have to allocate the 3 things, then allocate a bit of memory to hold the class with pointers to those 3 things.
[18:29:41] <bjs> it's very recursive
[18:30:02] <bjs> Or you can try allocate one thing that has enough space for all 3 things.
[18:30:24] <d3x0r> but - then something allocated on the heap can just be used over and over -pass a pointer as a paremter for the function to use - that object will often then be in cache, without worrying it's had some work done to allocate it
[18:30:39] <bjs> or... I mean, really, the language can do whatever it thinks it's best. It could put one part of the class over there, and put another bit here.  Remembering that "stack" and "heap" are just names for bits of memory that the program decides to put things in it
[18:30:46] <teut> you had said heap or stack memory are just labels bjs , right?
[18:30:49] <d3x0r> you could just always have a 'local stack veriables' object laying around instead of keeping them on the stack
[18:30:52] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[18:30:52] <Glumfish> merijn: I hope to god char pointers don't behave differently
[18:31:18] <d3x0r> teut it defines operations that are available too... a stack is packed, and not fragments vs a heap
[18:31:21] <teut> but heap memory has   address and the address to next location
[18:31:33] <bjs> teut: yes,  the program labels one bit of ram the "stack" and one bit the "heap".
[18:31:37] <Glumfish> merijn: I've tried to look into aliasing but haven't gotten to that stage yet
[18:31:46] <teut> yes  d3x0r  the heap is fragmented
[18:31:50] <merijn> Glumfish: Of course they do, compilers are required to assume char pointer are allowed to alias non-char pointers (and vice versa)
[18:32:06] <Glumfish> oh jeasus
[18:32:10] <teut>  yes,  the program labels one bit of ram the "stack" and one bit the "heap".  <   difficult
[18:32:12] <merijn> Glumfish: Oh, you think that's bad?
[18:32:21] <teut> difficult to understand I mean
[18:32:26] <Glumfish> I don't even get aliasing well at this point and now I have to learn how different types work
[18:32:35] <Glumfish> merijn: yes?
[18:32:37] <teut> oh ok , , clear now
[18:32:38] <bjs> teut: I mean the actual memory underneat is just the same. It's just different labels for the same thing,  it's just ram.  What's different is how the program uses it. The "stack" is often just literally a stack, each time you call a function it uses a bit more of the stack up to to store a "frame".
[18:32:53] <teut> yes yes understood a bit late  , sorry
[18:33:01] <merijn> Glumfish: Here's a question: "int main(int argc, char** argv) { char a = -18; printf("%d\n", a); return 0; }" <- what's this print?
[18:33:09] <bjs> teut: whereas the program often uses the "heap" like a big pool,  if it needs to store something "in memory" it just picks a location that's free in the heap and uses that.
[18:33:11] <d3x0r> aliasing is assignments that the compiler can do to make sure the type of the variable is consistent... it allows it to keep floats in floating registers and ints in ints and not worry about having to convert them or move them from one sub-processor to another
[18:33:13] <Glumfish> teut: all memory can be though of as a tape with cells
[18:33:16] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[18:33:23] *** Quits: freakazoid333 (~freakazoi@72.168.176.187) (Read error: Connection reset by peer)
[18:33:34] <d3x0r> and if you break those rules - you can have strange things happen, like calculate a float with a torn integer value..
[18:33:49] <teut> the memory allocation it was the OS who did it , correct?
[18:33:56] <d3x0r> it's not even something that should have been done - BUT, people did want to be able to optimize the code, and having those rules allows optimizers to make more assumptions
[18:34:01] <bjs> teut: this is why people say "stack is fast" and "heap is slow",  because when the program wants to put something in the bit of ram called the heap it has to find a location that isn't being used
[18:34:02] <Glumfish> merijn: I dont know?
[18:34:03] <merijn> d3x0r: Also, aliasing is a nightmare for automatic SIMD vectorisation
[18:34:04] <bjs> teut: no it's just the program
[18:34:08] <d3x0r> right
[18:34:08] <Glumfish> I would'nt do that lol
[18:34:11] *** Joins: Crescendo (~Crescendo@user/crescendo)
[18:34:13] <merijn> Glumfish: And neither do I!
[18:34:14] *** Joins: freakazoid333 (~freakazoi@72.168.176.187)
[18:34:25] <merijn> Glumfish: Because whether "char" is signed or unsigned is implementation defined!
[18:34:39] <sandman13> merijn: -18 :D
[18:34:48] <merijn> All integral types are "signed" by default, except char, where the signedness is implementation defined, because fuck you
[18:34:50] <Glumfish> well thats why we don't do such things right?
[18:34:51] <teut> yes bjs, searching for empty locations will be hard
[18:34:54] *** Quits: speckz (~speckz@2600:1700:ce0:bf00:7123:54fa:8f6d:4b56) (Quit: Textual IRC Client: www.textualapp.com)
[18:35:02] <d3x0r> started to do some simd versions of my new rotation vector code :)  then I leared that 256d registers have different oprations done than 128f registers
[18:35:03] <teut> but os keeps records of empty locations I think
[18:35:04] <Glumfish> in order to avoid problems
[18:35:08] <merijn> sandman13: Only on some C compilers :p
[18:35:09] <d3x0r> still not sure I have all of them right.
[18:35:14] <bjs> teut: at the most basic level the OS goes "here's 10k bytes of ram for you, do what you want with it".  Obviously in reality the OS knows that every program wants a stack, and every program wants a heap and somehow the program needs to start running at the start. So the OS does some of the work itself because it's faster.
[18:35:18] *** Quits: anahat (~anahat@116.74.190.238) (Quit: Connection closed)
[18:35:24] <Glumfish> thing with char is that its meant to hold value to be interpreted from devices or OS
[18:35:29] <sandman13> merijn: I only care about amd64
[18:35:37] <Glumfish> so I don't think it could be standardized easily
[18:35:43] <sandman13> and gcc/clang
[18:35:44] <bjs> teut: but you can make an OS that doesn't do that work, and literally drops the program off into a fresh bit of memory and says "do it yourself" and that'd be fine too (although *really annoying* to program in)
[18:35:46] <Glumfish> now we all use ascii or UTF-8/16
[18:35:50] <teut> yes got it, so the program always requests the os
[18:35:56] <teut> to run itself
[18:36:00] <d3x0r> and then there's the WASM VM that doesn't let you do anything with the stack - from a assmebly viewpoint you don't even have a stack just 'magic happens'
[18:36:15] <Glumfish> merijn: but there are macros and you can find out what it is like on the respective implementation
[18:36:22] <teut> yes understood now  bjs
[18:36:25] <sandman13> merijn: But you are right. C's abstract machine is too abstract and has weird requirements
[18:37:29] <teut> thanks for the info, I understood quite a lot just few confusions which may resolve with reading more
[18:37:58] <merijn> Also relevant, that one machine we had in the office where "sizeof(int) == 1" :p
[18:38:30] <sandman13> https://www.youtube.com/watch?v=QTiAWZ1YfzI
[18:38:33] <Glumfish> teut: its important to consider that there are differnet levels of abstractions and you must not confuse concepts between them
[18:38:59] <sandman13> merijn: you will find that useful :P
[18:39:15] <Glumfish> sandman13: looks funny will watch that once im off mobile data
[18:39:28] *** Joins: Akuli (~Akuli@213.216.211.152)
[18:39:28] <merijn> Can't watch it atm
[18:39:30] <teut> yes, I can try to not get confused but its quite hard
[18:39:56] <merijn> Forgot my headphones, because I'm not used to working at the office anymore >.>
[18:40:31] *** Joins: gggp_ (~gggp@60.10.194.47)
[18:40:40] <Glumfish> teut: Brian Will has some nice videos on youtube with a lot of nice info on operating systems
[18:40:44] <Glumfish> an languages
[18:40:47] <Glumfish> and hardware
[18:41:02] <Glumfish> (lookup Brian Will on YouTube)
[18:41:34] <teut> https://www.youtube.com/watch?v=9-KUm9YpPm0 this?
[18:41:57] <Glumfish> thats a good one
[18:42:01] <Glumfish> but there are lots
[18:42:05] <Glumfish> at different levels
[18:42:05] <teut> ok , thank you
[18:42:07] <Glumfish> at the hardware
[18:42:09] <Glumfish> OS
[18:42:11] <Glumfish> language
[18:42:11] <bjs> teut: there's lots to be confused by,  and as usual actually trying to do things yourself will always be the best.  Try make a binary on linux that you can actually run directly yourself,  you'll have to learn a lot about loaders and ELFs and things like that that'll really solidify what's actually happening when you "run" a program
[18:42:20] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[18:42:22] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 246 seconds)
[18:42:39] <teut> directly run ?  how do you do that?
[18:42:41] <Glumfish> teut: once you get the basic concepts a lot of things will make sense
[18:42:41] <d3x0r> just call exec() :)
[18:42:50] <teut> cmd   python xyz.py
[18:42:52] <Glumfish> its just that we are a very high level of abstarction right now
[18:42:57] <bjs> teut: I mean like,  you have a file and you go `./the_file` on linux right? and it runs?
[18:42:58] <Glumfish> so there is a big separation
[18:43:02] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 252 seconds)
[18:43:07] <Glumfish> and it may be hard to understand
[18:43:15] *** Joins: magla (~gelignite@55d4860d.access.ecotel.net)
[18:43:16] <Glumfish> and you have to build up a lot of knowledge
[18:43:43] <teut> i m on windows
[18:43:51] <Glumfish> teut: you don't have to know all the little details especially if you don't interact with those elements
[18:43:51] <d3x0r> CreateProcess
[18:43:56] <merijn> Fortunately virtual machines are cheap ;)
[18:44:06] <bjs> teut: Linux tends to be much better for learning this stuff,  Windows has a lot of added historical baggage and complexity
[18:44:06] <merijn> WSL is pretty good too
[18:44:10] <Glumfish> teut: as a lot of things will click once you get the basic concepts
[18:44:11] <teut> i dont know whats to be skipped and whats to be taken
[18:44:11] <d3x0r> the launch is enitrely different... linux you have to fork() youself first and then exec() some binary
[18:44:14] <Glumfish> merijn: very
[18:44:21] <Glumfish> especially if you dont need gui
[18:44:27] <merijn> d3x0r: You can just get WSL :p
[18:44:31] <Glumfish> you get up and running with good perf easily
[18:44:33] <bjs> teut: you never will know
[18:44:54] <Glumfish> bjs: totally agree
[18:44:58] <Glumfish> unix is simpler
[18:45:06] <Glumfish> and you can find a lot of free and open info
[18:45:07] <merijn> d3x0r: That's how I do the tiny bit of coding I do on windows
[18:45:08] <d3x0r> merijn I could... but why?  It can't open partitions mounted in folders... GWSL (x) doesn't handle the keypad keys correctly.
[18:45:08] <Glumfish> on the internet
[18:45:10] *** Joins: zubeida (~zubeida@59.88.28.67)
[18:45:15] <teut> but I require windows
[18:45:30] <teut> for college
[18:45:51] <teut> but yeah , soon I ll graduate , then i will use linux
[18:45:53] <merijn> d3x0r: In my case: "because I needed to do some coding on my Windows machine and I couldn't be arsed to learn something new and wanted to copy my *nix environment" :)
[18:46:21] <merijn> teut: You can download VirtualBox for free, it's a virtual machine program and then you can just install linux in a VM on your windows machine
[18:46:22] <bjs> teut: if you're doing anything "computer science"y or programming you'll do linux,  and anyway just because your college is using windows to do things doesn't mean you should close your eyes and refuse to look at linux
[18:46:22] <d3x0r> having gone to cmake a long time ago me to... install git, install cmake, install node, and presto
[18:46:35] <sandman13> merijn: Emacs!
[18:46:37] <sandman13> :D
[18:46:45] <sandman13> at least if you want an OS
[18:46:46] <merijn> d3x0r: Yeah, but I also needed SSH and vim and ripgrep and...
[18:47:08] <d3x0r> wordstar FTW :) hehe
[18:47:22] <teut> in linux too but you run python  file by  ,    python a.py
[18:47:31] <bjs> teut: okay... what's your point?
[18:47:33] <d3x0r> or 'node a.js'
[18:47:37] <teut> I dont even know what that "python" represemts
[18:47:45] <bjs> teut: there is a file on your computer called "python"
[18:47:47] <d3x0r> it's a program
[18:47:47] <teut> in windows its an exe file
[18:47:49] <d3x0r> that takes an argument
[18:47:56] <d3x0r> in lniux is't s elf executable too
[18:48:04] <bjs> teut: yeah it's like an .exe file, except linux doesn't have .exe at the end of executable files
[18:48:07] <teut> linux got exe?
[18:48:11] *** gggp_ is now known as gggp
[18:48:21] <d3x0r> ya ELF instead fo PE
[18:48:22] <teut> an exe is a zip file underneath
[18:48:26] <d3x0r> no
[18:48:27] <bjs> teut: an exe is not a zip file
[18:48:35] <d3x0r> could be, probably isn't
[18:48:37] *** Joins: terminalpusher (~terminalp@2a01:586:9006:1:2960:cd7c:21a:6a1e)
[18:48:42] <teut> you can extract it with 7zip
[18:48:47] <d3x0r> even if it is, it extracts to a real program unzipped and runs that
[18:48:57] <terminalpusher> Can there be a case where a program can read a file's content but not also its metadata like its size?
[18:49:09] <teut> is installer a zip file then?
[18:49:17] <d3x0r> that makes 7zip able to read the archvie, doesn't make it a zip... you can consider a EXE a archive of text, data, resource data
[18:49:25] <bjs> teut: no I think you're confused.  So, an .exe file is really just a blob of bytes that is a program
[18:49:33] <zubeida> if i want to redirect standard error to `/dev/null`, why does `2> /dev/null` work but `2 > /dev/null` throws an error? is it a bash syntax? i'm reading the manual and i can't find specific syntax for standard error file descriptors.
[18:49:45] <bjs> teut: just forget the zip stuff,  it's its own format.
[18:49:51] <teut> yes , sorry, exe is just bytes, installer  is a wrapper around a zip file
[18:49:59] <teut> ok , forgetting the zip
[18:50:00] <d3x0r> bjs but it has a defined format, that smart 'unzip everything' things can extract... there's also icons and resources in windows exe's
[18:50:01] <bjs> teut: no, just no zip files
[18:50:14] <bjs> teut: just forget about zip files for now
[18:50:20] <teut> yes yes
[18:50:27] <Glumfish> teut: in unix executables don't have extensions
[18:50:39] <Glumfish> generally extensions are only used for identification puposes
[18:50:42] <bjs> teut: an .exe is just a blob of bytes which has the program and some data and stuff, in some format that Windows knows how to load
[18:50:48] <teut> so "python" is a compiler , linked etc   c program
[18:50:52] <Glumfish> so you know that file does this thing
[18:50:53] <teut> and its the exe
[18:50:59] <bjs> teut: Linux has the same,  it doesn't call them .exe and isn't the same format but it's the same idea
[18:51:02] <d3x0r> not comipler, interpreter
[18:51:06] <Glumfish> teut: yeah python is an executable
[18:51:07] <bjs> teut: no it's not a compiler, it's just a program.
[18:51:10] <d3x0r> it's compiled but not a compiler
[18:51:20] <teut> yep, that was the confusion it doesnt calls them exe
[18:51:26] <Glumfish> teut: the filename doens't really do anything
[18:51:28] <teut> and windows calls installers to exe
[18:51:36] <bjs> teut: a program you can ask Linux to run. Linux reads the `python` file just like how Windows reads "python.exe" and loads it and runs it
[18:51:40] <bjs> teut: python.exe isn't an "installer"
[18:51:42] <bjs> it's just a program
[18:51:42] <teut> too*
[18:51:44] <d3x0r> you don't have to have an installer either
[18:51:46] <Glumfish> although some files have extensions to make knowing what you are doing easier
[18:52:11] <Glumfish> so when something has *.docx you always know its a word document
[18:52:15] <teut> yes Glumfish , os will open  .html  default with a browser
[18:52:16] <Glumfish> and not a music file
[18:52:27] <Glumfish> teut: what matters is the data in the file
[18:52:41] <Glumfish> thats what makes an executable an executable
[18:52:41] <d3x0r> teut not th OS... the file explorer interface... on windows's a program called 'explorer.exe'
[18:52:49] *** Quits: pandakekok9 (~job@user/job) (Remote host closed the connection)
[18:52:53] <Glumfish> on linux namely the ELF Header
[18:52:56] <teut> hmm, didnt know that
[18:52:59] <d3x0r> on linux... blowfish, enlightment, kde, gnome,....
[18:53:07] <d3x0r> all have desktop programs that doe that job too
[18:53:13] <d3x0r> that's not the OS though :)
[18:53:26] <Glumfish> teut: once you start working with the cli you will realize files are just files really
[18:53:35] <Glumfish> and filenames are just filenames
[18:53:41] <teut> so cmd is also an interface and so is linux's terminal
[18:53:43] <d3x0r> unless they're directory names
[18:53:54] <Glumfish> cmd is both a terminal emulator and shell
[18:54:00] <teut> I dont know what it does behind the scenes
[18:54:05] <Glumfish> in linux you also have terminal emulator
[18:54:08] <Glumfish> and shells
[18:54:11] <d3x0r> there's also powershell instead of cmd - itruns scripts .ps1 instead of .bat
[18:54:15] <teut> can you run a python code without  an os?
[18:54:16] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 246 seconds)
[18:54:18] <Glumfish> a shell is the program that takes the commands
[18:54:19] <d3x0r> or .sh that bash et al. run
[18:54:23] <Glumfish> and interprets them
[18:54:24] <d3x0r> teut yes.
[18:54:25] <Glumfish> and does tihngs
[18:54:28] <teut> how??
[18:54:34] <Glumfish> the terminal emulator prints the charcter on te screen
[18:54:40] <Glumfish> its what does the rendering
[18:54:44] <teut> and how will you even install the python interpreter?
[18:54:47] <d3x0r> adafruit has IOT hardware you write a python program dn download the bytecode to the thing and it runs it
[18:54:51] <d3x0r> there's basically 0 OS
[18:55:02] <d3x0r> it's built into the hardware
[18:55:16] <Glumfish> teut: python is a language there are different implementations
[18:55:24] <Glumfish> of the actual interpreter
[18:55:38] <teut> I know that , but hows that related to the answer?
[18:55:47] <Glumfish> you could probably run python on chrome if someone wrote and interpreter
[18:55:52] <deniska> micropython is one of them, and it doesn't require an OS
[18:55:53] <Glumfish> teut: you could run python on the hardware
[18:55:55] <Glumfish> its doable
[18:56:02] <Glumfish> much harder
[18:56:09] <Glumfish> because you have to do a lot of other things
[18:56:13] <Glumfish> which the os does for you
[18:56:25] <teut> the cpython I m talking about
[18:56:44] <Glumfish> no you cannot run cypthon on raw metal
[18:56:54] <d3x0r> https://pypi.org/project/pywasm/
[18:56:56] <Glumfish> its not meant to be run on raw metal
[18:56:57] <teut> that thats an exe there
[18:57:03] *** Joins: Shapeshifter (~Shapeshif@parakeet.ifi.uzh.ch)
[18:57:05] <teut> and exe is binary
[18:57:16] <Glumfish> yeah so?
[18:57:45] <teut> what magic does the terminal do?
[18:57:56] <Glumfish> just prints characters on the screen
[18:57:57] <teut> in running cpython
[18:58:06] <Glumfish> and interprets keyboard intput
[18:58:07] <teut> thats 1 thing
[18:58:07] *** Quits: varaindemian (~varaindem@86.124.22.149) (Quit: Client closed)
[18:58:14] <Glumfish> and a bunch of other things
[18:58:15] <teut> handle the io
[18:58:19] <Glumfish> but fundamentally thats what it does
[18:58:24] <Glumfish> pritns things
[18:58:25] <d3x0r> and mouse input which it converts to escape sequences
[18:58:27] <Glumfish> from the program
[18:58:34] <Glumfish> and then takes in your input
[18:58:38] <Shapeshifter> Can someone recommend a web application for managing users (say, for a company or club)? It should support additional objects (not just users and groups). Like, an admin should be able to define an object like "report", for which they create a new child every year, and every child has fields like "money spent" or "hours driven" and stuff like that. So, a bit like a CRM but simpler, a bit like
[18:58:44] <Shapeshifter> keycloak but with more complex attributes. And users should be able to log in and edit their own data.
[18:58:47] <Glumfish> obviously there are escape sequences
[18:58:48] <Glumfish> and colours
[18:58:51] <Glumfish> and mouse support
[18:58:55] <Glumfish> and the clipboard
[18:59:10] <Glumfish> but fundamentally aterminal is just an text interface to the user
[18:59:14] <Glumfish> its an abstraction
[18:59:25] <Glumfish> so in your program you don't have to worry how the text to the user
[18:59:29] <Glumfish> just what text
[18:59:31] *** Quits: kmh (~kmh@p200300df5f2d8b0075f9d28b18545808.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[18:59:32] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[18:59:36] <Glumfish> then its the terminal emulators job to print it
[18:59:42] *** Joins: kmh (~kmh@p200300df5f2d8b0075f9d28b18545808.dip0.t-ipconnect.de)
[18:59:43] <Glumfish> back in the day terminals were machines
[18:59:50] <Glumfish> with their own screen and keyboard
[18:59:53] <teut> https://bpa.st/VRLQ  if I give you the exe version of this file
[18:59:55] <Glumfish> now they are in software
[19:00:01] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[19:00:03] <Glumfish> thus there are emulators
[19:00:04] <merijn> Glumfish: Back in the day they were printers ;)
[19:00:07] <teut> can you run it on a pc without an os?
[19:00:08] <Glumfish> not actuall terminals
[19:00:12] <Glumfish> merijn: yeah before that
[19:00:15] <Glumfish> Teletypes
[19:00:32] <deniska> teut: don't forget that an OS is also just a program
[19:01:07] <deniska> teut: to write a file you need a file system driver, typically it's provided by an OS, but nothing prohibits you to implement your own filesystem driver
[19:01:19] *** Quits: magla (~gelignite@55d4860d.access.ecotel.net) (Quit: Stay safe!)
[19:01:38] <sandman13> deniska: somehow implementing your own fs is harder than it sounds
[19:01:42] <merijn> deniska: Sanity does ;)
[19:01:43] <teut> OS is a program but , I cant write windows, I dont even know what interface the hardware guys share by which I can touch the audio device, printer etc
[19:01:53] <teut> can you run your printer with c?
[19:01:54] <Glumfish> teut: thats why we have OSs
[19:01:56] <sandman13> makes me realize how much I take things for granted :D
[19:01:59] <Glumfish> somebody that knows better
[19:02:01] <Glumfish> does it for us
[19:02:04] <Glumfish> so we don't have to do it
[19:02:14] <teut> yes the os controls the drivers
[19:02:16] <Glumfish> thats computer science right ther
[19:02:22] <Glumfish> abstractions over abstractions
[19:02:23] <d3x0r> apparently python comes with UEFI... https://www.yumpu.com/en/document/view/38917347/edk-ii-python-users-manual-firmware-encoding-index
[19:02:28] <Glumfish> to make interfacingt with computers easier
[19:02:40] <d3x0r> but UEFI is pretty close to an OS... it's a modern sort of DOS with a flat 64 bit memory
[19:03:00] <sandman13> Imagine having to use a magnetic needle and a steady arm to change a bit :D
[19:03:19] <Glumfish> d3x0r: I wanna learn about UEFI and BIOS in detail one day
[19:03:27] <Glumfish> how the whole OS loading works
[19:03:32] <Glumfish> before we start execution
[19:03:40] <d3x0r> the same way as running a program :)
[19:03:46] <Glumfish> sadly there's little easy to digest info on that
[19:03:47] <deniska> and I think micropython supports reading and writing FAT32? Or at least it has hooks to plug an fs driver
[19:03:51] <teut> can you run an exe in c?
[19:03:51] <Glumfish> d3x0r: yeah in principle
[19:03:52] <d3x0r> create some segments, fill in content, transfer the PC/IP
[19:04:00] <teut> I think this question can help me best
[19:04:03] <Glumfish> teut: yes
[19:04:07] <teut> how how?
[19:04:20] <Glumfish> there is a system call in unix for example called exec
[19:04:23] <d3x0r> teut CreateProcess or exec() -
[19:04:25] <Glumfish> your program telmls the OS
[19:04:27] <teut> ok that exec
[19:04:27] <Glumfish> execute this
[19:04:29] *** Quits: kmh (~kmh@p200300df5f2d8b0075f9d28b18545808.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[19:04:31] <Glumfish> and the OS will do ti
[19:04:33] *** Joins: varaindemian (~varaindem@86.124.78.162)
[19:04:35] <Glumfish> it*
[19:04:36] <teut> someone wrote it above too
[19:04:42] <d3x0r> unless your in dos, then it'a a mov ax, something , ...int 0x21,
[19:04:48] <Glumfish> teut: exec is in the kernel
[19:04:52] <Glumfish> its a system call
[19:04:56] *** Joins: kmh (~kmh@p200300df5f2f120075f9d28b18545808.dip0.t-ipconnect.de)
[19:05:06] <teut> kernel , is that part of os?
[19:05:11] <teut> of hardware
[19:05:12] <Glumfish> its the core
[19:05:18] <Glumfish> it handles hardware
[19:05:21] *** Joins: wnbeser (~wnbeser@91-153-236-94.elisa-laajakaista.fi)
[19:05:21] <Glumfish> system calls
[19:05:24] <Glumfish> its software
[19:05:32] <teut> and who installed it?
[19:05:33] <Glumfish> there is kernel space and user space
[19:05:42] <Glumfish> the kernel controls hardware and manages
[19:05:47] <Glumfish> your programs while they run
[19:05:54] <teut> i mean does windows installs it?
[19:05:55] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:05:59] <Glumfish> the kernel is part of an OS
[19:06:03] <teut> ok
[19:06:05] <Glumfish> linux is strictly a kernel
[19:06:06] <Glumfish> not an OS
[19:06:11] *** Joins: gggp_ (~gggp@125.33.84.224)
[19:06:13] <Glumfish> windows runs the windows NT kernel
[19:06:19] <teut> yes linux has "grub"
[19:06:24] <Glumfish> no
[19:06:26] <sandman13> Glumfish: Stallman would like to interject xD
[19:06:28] <Glumfish> grub is aboot loader
[19:06:35] *** Quits: pyzozord (~pyzozord@user/pyzozord) (Quit: leaving)
[19:06:41] <Glumfish> sandman13: stallman says linux is only a kernel
[19:06:46] <Glumfish> and the whole system
[19:06:49] <Glumfish> is gnu/linux
[19:06:53] <d3x0r> https://github.com/d3x0r/NanoRTOS/blob/master/LOADER/LOADER.C#L1115  this bit loads .exe directly from disk, puts it in memory, and is able to run it - without a system call.  (but does run in DOS where I have full control of memory)
[19:06:54] <teut> yes windows NT kernel , quite a lot I have heard about it, but no idea of what is it
[19:07:08] <Glumfish> its what manages all programs running on the system
[19:07:08] <teut> is kernel written in c?
[19:07:12] <d3x0r> and assembly
[19:07:13] <teut> or c++
[19:07:23] <Glumfish> the kernel is what talks directly to the hardware
[19:07:27] <d3x0r> uhmm - linux even has some Rust support now
[19:07:30] <Glumfish> like drivers are "part of" the kernel
[19:07:39] <teut> yes so it will need the api what the hardware offers
[19:07:39] <Glumfish> not exectly
[19:07:44] <Glumfish> but they work at the same level
[19:07:57] <Glumfish> the kernel provides useful abstractions over the hardware
[19:08:03] <Glumfish> like virtual memory
[19:08:06] <Glumfish> file systems
[19:08:11] <Glumfish> device drivers
[19:08:21] <d3x0r> (sound,video,network,usb,...)
[19:08:31] <teut> so the kernel must be written by hardware guys
[19:08:32] <Glumfish> teut: kernels are usually written in C, C++ with some required assembly
[19:08:36] <Glumfish> and maybe even rust
[19:08:49] <Glumfish> teut: yeah you have to know the underlying hardware to write a kernel
[19:08:51] <teut> can you do it without assembly?
[19:08:53] <Glumfish> but it depends on the part
[19:08:58] *** Quits: gggp (~gggp@60.10.194.47) (Ping timeout: 240 seconds)
[19:09:11] <Glumfish> teut: not realy because you need a way ot interface directly with the hardware
[19:09:19] <Glumfish> theoretically you could
[19:09:28] <teut> yes this was the point I was asking
[19:09:29] <Glumfish> if a programming language did exactly what you wanted
[19:09:31] <teut> before
[19:09:36] <d3x0r> teut no... some assembly required - there's no language other than assembly that lets you use just any instruction (other than somehow other writing literal bytes to a stream and using that)
[19:09:59] <Glumfish> assmebly is text form of binary essentially
[19:10:06] <teut> but I missed the vocab of kernel, I knew that kernel is something but I didnt considered it much
[19:10:12] <Glumfish> your assembly gets translated to operations represetned by binary numbers
[19:10:22] <teut> yes by an assembler
[19:10:25] <d3x0r> but that would be an assembler of sorts - there is no 'assembly language' that is a whole family of lanagugaes that just translate mneumonics to bytes
[19:10:35] <Glumfish> assembly lets you decide exactly what the cpu does
[19:10:54] <Glumfish> while other languages do decide for you
[19:11:00] <teut> yes thats why I picked the book , so I m  on the right track
[19:11:03] <Glumfish> you tell them I want to do one thing
[19:11:13] <Glumfish> and they do it that thing in some way the deem best
[19:11:17] <d3x0r> it's easier to just use eval() is JS :)  rather than figuring out how to emit bytes for ARM, ARM64, AMD64, IA64, ...
[19:11:27] *** Joins: pulse (~pulse@user/pulse)
[19:11:31] <Glumfish> (how its defined and implemented by the compiler/implementation)
[19:11:32] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 252 seconds)
[19:11:41] <deniska> Linux maybe has 50 lines of assembly? I don't remember the number, but it's not big :)
[19:11:53] *** Quits: fweht (uid404746@id-404746.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:12:00] <Glumfish> deniska: its essentially only used in places where you really need it
[19:12:04] <teut> doing i t once would help me a lot probably
[19:12:07] <Glumfish> deniska: probably more than 50
[19:12:09] <merijn> Even boot loaders are generally not written in assmebly
[19:12:09] <d3x0r> deniska intrinsics count as assembly :)
[19:12:14] <Glumfish> teut: eh its a bit too hard I would say
[19:12:16] <Glumfish> to just
[19:12:17] <Glumfish> do
[19:12:27] <Glumfish> you can understand it without dioing it exactly
[19:12:29] <teut> I have wasted hours on accessing the sound drivers from python
[19:12:33] <Glumfish> brian will has a lot
[19:12:36] <Glumfish> on it actually
[19:12:42] <Glumfish> on such topics
[19:12:59] <d3x0r> OpenAL :)
[19:13:10] <teut> because of the awful libraries in python, none of the stackoverflow solutions worked
[19:13:29] <teut> knowing all this can save a lot of my time
[19:13:40] <teut> I wont need to depend on others then
[19:13:54] <teut> whats that?
[19:14:04] <teut> yes I ll watch them
[19:14:14] <Glumfish> teut: yes and no
[19:14:21] <Glumfish> programmers don't re impmlment everything manually
[19:14:32] <Glumfish> because it takes a shit load of time and knowledge
[19:14:41] <teut> i agree
[19:14:45] <Glumfish> usally people pick their field
[19:14:50] <Glumfish> some like to do kernel and drivers
[19:14:56] <Glumfish> some do applications
[19:14:57] *** Quits: freakazoid333 (~freakazoi@72.168.176.187) (Read error: Connection reset by peer)
[19:15:01] <Glumfish> and theres obviously in between
[19:15:09] <Glumfish> some do high level things in applications
[19:15:15] <Glumfish> some do the low level things
[19:15:17] <deniska> SerenityOS is a funky project
[19:15:20] *** Joins: freakazoid333 (~freakazoi@72.168.176.187)
[19:15:38] <deniska> the guy quit drinking and essentially wrote a nice little graphical unix-like OS :)
[19:15:50] <teut> but what to do when you are stuck because other guys libraries are broken?
[19:16:07] <deniska> teut: write your own, or fix their libraries if the source is available :P
[19:16:15] <Glumfish> deniska: TEMPLE OS EY
[19:16:29] <deniska> temple os is… a weird one
[19:16:31] <Glumfish> deniska: im sure you can find a decent sound lib
[19:16:31] <teut> and to do that, I need to know the  things
[19:16:46] <Glumfish> deniska: based on tis creator
[19:16:58] <Glumfish> teut: pick osmething popular and well recommened
[19:17:05] <Glumfish> so you can get good support
[19:17:08] <deniska> teut: likely a library like this is a relatively thin wrapper around whatever different OSes use to implement sound
[19:17:18] <Glumfish> yeah
[19:17:20] <deniska> if windows do that, if macos do this
[19:17:24] <Glumfish> as there are different ways
[19:17:26] <Glumfish> its handled
[19:17:31] <Glumfish> and different sound systems
[19:17:33] <teut> the worst thing about python is backwards compatibility
[19:17:35] <Glumfish> provided with each os
[19:17:40] <sandman13> deniska: that looks similar to Windows 98
[19:17:56] <teut> whether it be pyinstaller or pyaudio, all that stuff suck
[19:18:09] <deniska> sandman13: its GUI is heavily inspired by 90s, it says so on a tin :)
[19:18:18] *** Quits: EnterAPX (~user@host-81-161-204-182.oxylion.net.pl) (Quit: Leaving)
[19:19:12] <d3x0r> it's really just python that's the issue :) nothing can be any good for it if it's bad to start with
[19:19:21] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:19:25] <Glumfish> just c
[19:19:29] <Glumfish> very nice true me
[19:19:31] <teut> but there are some really great librarues too
[19:19:34] <Glumfish> trust**
[19:19:46] <Glumfish> teut: in everything theres good and bad
[19:19:53] <Glumfish> and there isn't good and bad reall
[19:20:03] <Glumfish> some thing are better for some applications and uses
[19:20:09] <Glumfish> and some for others
[19:20:21] <Glumfish> software design is all about making compromises
[19:20:22] *** Joins: arcatech (~arcatech@user/arcatech)
[19:20:24] <Glumfish> you can't have everything
[19:20:41] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[19:21:02] <d3x0r> :) right
[19:21:12] <teut> yeah, like where will you get an EmailMessage class like in python
[19:21:22] <teut> I didnt find one in c++
[19:21:23] <Glumfish> a what?
[19:21:40] <teut> like how would you send an email?
[19:21:50] <teut> with a programming language
[19:21:50] <Glumfish> you connect to a mail server
[19:21:56] <Glumfish> and it sends an email
[19:21:57] <teut> no not like that
[19:22:00] <Glumfish> or you are a mail server
[19:22:08] <teut> you need to know the headers
[19:22:13] <Glumfish> but why the heck would you make a mail server
[19:22:18] <teut> the textual interface
[19:22:29] <Glumfish> teut: there's a spec
[19:22:33] <Glumfish> (I think)
[19:22:35] <Glumfish> you read it
[19:22:38] <Glumfish> and then implement it
[19:22:43] <Glumfish> I gues
[19:22:45] <teut> yes the spec, (vocab)
[19:22:45] <Glumfish> s
[19:22:51] <d3x0r> socket(), ... send()... close()...
[19:22:55] <teut> ad its tough
[19:22:56] <Glumfish> the spec is probably an RFC
[19:23:00] <teut> like the http headers
[19:23:03] <Glumfish> google email spec lol
[19:23:44] <KillerWasp> What a strange conversation, I don't know if they are preaching or learning...
[19:23:56] <Glumfish> both?
[19:24:12] *** Quits: audgirka (~audgirka@2402:e280:3e16:e48:d5ba:7034:2ac9:4275) (Quit: Leaving)
[19:24:40] *** Quits: zubeida (~zubeida@59.88.28.67) (Quit: leaving)
[19:25:06] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:25:15] <KillerWasp> both? harder to broach the subject then...
[19:26:03] <Glumfish> I dont claim to be an expert
[19:26:34] <teut> i was just saying one of the good features
[19:26:41] <GeDaMo> https://en.wikipedia.org/wiki/Simple_Mail_Transfer_Protocol
[19:26:43] <KillerWasp> Glumfish# no one said about being an expert.
[19:26:49] <Glumfish> teut: just FYI a lot of web standards are confusing
[19:26:56] <Glumfish> and have changed a lot over time
[19:27:01] <Glumfish> so some things can be a mess
[19:27:05] <teut> https://weasyprint.org/
[19:27:07] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:27:10] <teut> another is this thing
[19:27:33] <rifl> dont be expert as it toturial to beginner enough
[19:27:33] *** Quits: wnbeser (~wnbeser@91-153-236-94.elisa-laajakaista.fi) (Quit: Leaving)
[19:27:53] <teut> I couldnt find anything like this in another language, these guys only have made a html  to pdf  parser  otherwise you will require pandoc
[19:28:06] <teut> a whopping 2.2 gigs
[19:28:47] <KillerWasp> It seems that at some point there has been talk about assembler, I have developed a 486 emulator with which I can play every day. At least it allows me to recycle my old knowledge about assembler. (If this adds something to the topic of the moment)
[19:29:04] *** Joins: arcatech (~arcatech@user/arcatech)
[19:29:07] <Glumfish> teut: if it ain't broke don't fix it?
[19:29:14] *** Joins: snake (~snake@user/snake)
[19:29:14] <Glumfish> KillerWasp: thats cool send link
[19:29:26] *** Quits: ixil (~ixil@82.197.178.137) (Remote host closed the connection)
[19:29:29] <KillerWasp> Glumfish# uh... i don't have a link...
[19:29:34] <deniska> teut: I personally used that last time I wanted to create PDF programmatically: https://wkhtmltopdf.org/
[19:29:45] *** Joins: ixil (~ixil@82.197.178.137)
[19:30:03] <Glumfish> deniska: you can also generate latex
[19:30:04] <Glumfish> x
[19:30:05] <deniska> sadly it's based on an annoyingly old version of webkit and doesn't know about flexbox
[19:30:07] <Glumfish> or markdown
[19:30:15] <Glumfish> markdown would be the easiest I guess
[19:30:15] *** Quits: arcatech (~arcatech@user/arcatech) (Client Quit)
[19:30:18] <KillerWasp> I have not uploaded anything to the web, and I can't think of how I could contribute with my 486 emulator to the public.
[19:30:30] <Glumfish> not even for the "flex"
[19:30:40] <Glumfish> KillerWasp: don't you keep the repo somewhere in the cloud?
[19:30:44] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 272 seconds)
[19:30:52] <Glumfish> I have mine on github
[19:30:55] <KillerWasp> Glumfish# no, it's all private...
[19:30:56] <Glumfish> not all are public htough
[19:31:02] <Glumfish> most are private
[19:31:06] <KillerWasp> all my source code at least
[19:31:13] <Glumfish> although im opening them up
[19:31:16] <KillerWasp> codes*
[19:31:56] <KillerWasp> Glumfish# where you put any source code in github, it's not private anymore :/
[19:32:10] <merijn> ugh...cmake isn't using -c for compiler invocations on macos and it's breaking my use of ccache >.<
[19:32:12] <Glumfish> since when lol?
[19:32:17] <Glumfish> i have many private repos
[19:32:27] <Glumfish> **correction 3-4
[19:32:34] *** Quits: Volund_ (~IceChat95@184-089-055-145.res.spectrum.com) (Ping timeout: 240 seconds)
[19:32:40] *** Quits: varaindemian (~varaindem@86.124.78.162) (Ping timeout: 246 seconds)
[19:32:40] <KillerWasp> Glumfish# nope, all microsoft can see you :P
[19:32:40] <Glumfish> merijn: NOICE
[19:32:45] <Glumfish> I use mac os
[19:32:55] <Glumfish> KillerWasp: :|
[19:33:18] <edgar-rft> microsoft can see your private parts
[19:33:26] <Glumfish> KillerWasp: I don't mind if billy g finds my code bad
[19:33:58] <teut> deniska but you need to install something for it
[19:34:27] <deniska> teut: it's just a single binary you can put anywhere near the program
[19:34:36] *** Quits: snake (~snake@user/snake) (Quit: Leaving)
[19:35:07] <KillerWasp> Since Microsoft likes to examine every source code on github, they should at least put a happy face pin if they like the code.
[19:35:14] <Glumfish> LOL
[19:35:18] <teut> but weasyprint suppoets flexbox I think
[19:35:30] <Glumfish> do you even HTML bro?
[19:35:35] *** Joins: varaindemian (~varaindem@86.124.22.149)
[19:35:38] <deniska> teut: it's just the first program I came across and it worked for my usecase
[19:35:41] *** Joins: Volund (~IceChat95@184-089-055-145.res.spectrum.com)
[19:35:47] <teut> ok
[19:36:09] <deniska> I guess nowadays people just instrument a headless chrome via something like puppeteer to make PDFs on the fly
[19:36:24] *** Joins: Thedarkb-Desktop (~beno@2001:bb6:b404:188f:7474:a5c3:ab91:d493)
[19:36:31] <teut> I can try your stuff , and you can try this one  =D
[19:36:48] <deniska> I'm not in the business of producing PDFs at the moment
[19:36:51] *** Joins: soapsudsxx (~soapsudsx@209.221.40.138)
[19:37:09] <Glumfish> teut: why do you want to make a PDF btw?
[19:37:14] *** Quits: mobidrop_ (~mobidrop@217-62-121-57.cable.dynamic.v4.ziggo.nl) (Remote host closed the connection)
[19:37:19] <teut> I wanted once
[19:37:31] <Glumfish> you can also use latex
[19:37:32] *** Joins: bytefire (~bytefire@51.19.235.161)
[19:37:38] <teut> and I faced quite a lot of difficulty
[19:37:59] <teut> the goal was to convert html to pdf
[19:38:30] <Glumfish> why do you pick such annoying (to do) tasks mate?
[19:38:35] <Glumfish> keep it simple
[19:38:51] *** Joins: inhahe_ (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net)
[19:39:19] <bytefire> rust officially in kernel now: https://lore.kernel.org/lkml/20210704202756.29107-1-ojeda@kernel.org/
[19:39:34] <Glumfish> bytefire: NOICE
[19:39:43] *** Quits: inhahe_ (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Client Quit)
[19:39:43] <Glumfish> thats cool asa hell
[19:39:56] <Glumfish> as*
[19:40:00] <Glumfish> how did linus approve this though?
[19:40:01] <deniska> rumors are hell is not cool :D
[19:40:11] <deniska> (well, it probably is, now)
[19:40:33] <edgar-rft> maybe satan hasn't paid the energy bill
[19:40:37] <bytefire> Glumfish: haha... with c++ it seems he didn't like its paradigm stuff
[19:40:52] <bytefire> Glumfish: you know rust? i have never used it
[19:41:15] <bytefire> deniska: haha what rumours?
[19:41:30] *** Quits: Beyondo (inhahe@107-213-219-122.lightspeed.miamfl.sbcglobal.net) (Ping timeout: 272 seconds)
[19:41:51] <teut> yes , report making is annoying , I know but just had to do it..
[19:42:24] <sandman13> Ah
[19:42:25] *** Quits: Joanna (uid57472@id-57472.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[19:42:42] <sandman13> Linus was concerned about panic() but they seem to have resolved it
[19:43:00] *** Joins: Palgorithm (~Palgorith@user/palgorithm)
[19:43:12] *** Quits: Palgorithm (~Palgorith@user/palgorithm) (Remote host closed the connection)
[19:44:05] *** Guest53 is now known as Guest50
[19:44:49] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[19:44:57] <mrig> support for drivers written in rust?
[19:45:21] <sandman13> apparently yes mrig
[19:45:23] <mrig> an interface I suppose.
[19:45:25] <mrig> cool
[19:45:34] *** Joins: arcatech (~arcatech@user/arcatech)
[19:45:42] *** Quits: wei2912 (~wei2912@112.199.250.21) (Quit: Lost terminal)
[19:45:55] *** Guest50 is now known as Guest53
[19:46:17] <sandman13> It would benefit both kernel and Rust
[19:46:38] <mrig> well the more drivers the merrier I'd say :)
[19:47:00] <mrig> I hope my dang wifi gets sorted out sometime soon!
[19:47:12] <bytefire> can rust modules be statically linked?
[19:47:38] <sandman13> they can be IIRC, not sure though
[19:48:10] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:48:17] <sandman13> I touched Rust like 1.5 years ago, found it too difficult and gave up.
[19:49:02] *** Quits: merijn (~merijn@145.100.116.221) (Ping timeout: 252 seconds)
[19:50:11] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[19:50:27] <bytefire> hmm... i never gave up on rust because i never tried it lol
[19:50:32] <mrig> I've not gotten round to looking yet, will do some day, a lot of other things to meditate on though.
[19:50:59] <bytefire> what does "Removed panicking allocations" part in the link above mean?
[19:51:00] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[19:51:52] <sandman13> bytefire: Rust's panic() would terminate the program. Linus was suggesting to use something like ENOMEM to handle it gracefully
[19:52:19] *** Joins: Glumfish (~Glumfish@user/glumfish)
[19:52:25] *** Joins: Donitz (~Donitz@85-156-203-108.elisa-laajakaista.fi)
[19:53:07] <mrig> You couldn't have a panicking driver in the kernels gears I suppose.
[19:53:16] <mrig> would want it to shut down.
[19:54:14] <mrig> no idea how rust panics, I am imagining that it is similar to panic in go
[19:54:41] <pulse> you know C64 called it kernal
[19:54:53] <pulse> i wonder why
[19:55:27] <mrig> Oh I suppose using 'fn(x) = ~' could be the expressive solution that I'm looking for.
[19:55:27] <pulse> heh. "The KERNAL was known as kernel[6] inside of Commodore since the PET days, but in 1980 Robert Russell misspelled the word as kernal in his notebooks. When Commodore technical writers Neil Harris and Andy Finkel collected Russell's notes and used them as the basis for the VIC-20 programmer's manual, the misspelling followed them along and stuck"
[19:55:59] <sandman13> kernail
[19:56:04] <mrig> heh
[19:56:21] <sandman13> curnail
[19:56:38] <mrig> is that transpilation?
[19:59:27] <bytefire> sandman13: i see...
[20:02:10] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 246 seconds)
[20:03:20] *** Joins: Glumfish (~Glumfish@user/glumfish)
[20:03:49] *** Joins: rsx (~dummy@ppp-188-174-148-148.dynamic.mnet-online.de)
[20:05:00] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:7133:e4e2:a4dd:98d5) (Quit: Leaving)
[20:05:16] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:7994:c120:c14c:c0fb) (Quit: Leaving)
[20:08:06] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[20:08:58] *** Joins: arcatech (~arcatech@user/arcatech)
[20:09:04] *** Joins: Glumfish (~Glumfish@user/glumfish)
[20:09:30] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:2848:d259:b7ae:bb80)
[20:09:46] *** Quits: varaindemian (~varaindem@86.124.22.149) (Ping timeout: 246 seconds)
[20:09:47] <Glumfish> bytefire: I don't know rust but I'm looking to learn it
[20:09:55] <Glumfish> as my second programming language with C
[20:09:58] <Glumfish> I haven't strated yet
[20:10:12] *** Joins: anahat (~anahat@116.74.190.238)
[20:11:01] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:7133:e4e2:a4dd:98d5)
[20:11:19] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[20:13:43] *** Quits: LiftLeft (~LiftLeft@212.102.59.186) (Ping timeout: 246 seconds)
[20:19:41] *** Joins: yaboiburner_ (~yaboiburn@c-69-180-160-103.hsd1.mn.comcast.net)
[20:21:53] *** Joins: recursiveNode (~recursive@ip-86-49-255-180.net.upcbroadband.cz)
[20:22:09] <ITD4004> OK
[20:22:10] <ITD4004> so
[20:22:27] <ITD4004> is it possible to implement entire hords of zlib code into a python script?
[20:22:53] <GeDaMo> You want to rewrite zlib in Python?
[20:23:05] <ITD4004> yeah
[20:23:20] <GeDaMo> Anything's possible :P
[20:23:49] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:25:25] *** Quits: odnes_ (~odnes@109-178-241-209.pat.ren.cosmote.net) (Read error: Connection reset by peer)
[20:26:25] <edgar-rft> Let's re-implement GCC in BASIC
[20:26:59] <KillerWasp> edgar-rft# what?...
[20:27:20] <edgar-rft> exactly that!
[20:27:37] *** Joins: LiftLeft (~LiftLeft@154.21.114.17)
[20:27:41] <recursiveNode> I'm coding a socket app to read/write entities via socket and to processes multiple entities into one.
[20:28:18] <recursiveNode> what's the highest performance way of doing this?
[20:28:53] <recursiveNode> message broker in the middle acting as a bus, or peer to peer to make each socket app connect point to point to other socket apps?
[20:29:41] <edgar-rft> I think the highest performance way would be increasing lightspeed to make electrons fly faster
[20:29:56] <KillerWasp> recursiveNode# what you consider best for your program. The variants are so many that it is difficult to tell you some.
[20:30:11] <recursiveNode> or a hybrid code that switches between peer to peer and bus, depending on the actual connections (which app connects where, how many other apps connect there)
[20:30:20] <KillerWasp> recursiveNode# also depend of the language and the libraries that you want to use
[20:30:24] <recursiveNode> Java
[20:30:45] <recursiveNode> ServerSocket, Threads, and (client) Socket
[20:30:58] <GeDaMo> edgar-rft: https://github.com/oriansj/stage0
[20:30:59] <KillerWasp> recursiveNode# java or js?
[20:30:59] *** Joins: magla (~gelignite@55d4860d.access.ecotel.net)
[20:31:02] *** Joins: gggp__ (~gggp@60.10.194.47)
[20:31:08] <recursiveNode> KillerWasp Java
[20:32:07] *** gggp__ is now known as gggp
[20:32:10] *** Quits: magla (~gelignite@55d4860d.access.ecotel.net) (Read error: Connection reset by peer)
[20:32:16] <recursiveNode> KillerWasp normally, people use a producer app, consumer app, and a message broker acting as a bus (as a server that the producer and the consumer connect to)
[20:32:51] *** Joins: federico_it (~textual@151.51.82.235)
[20:32:52] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 265 seconds)
[20:33:08] *** Joins: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr)
[20:33:10] <KillerWasp> recursiveNode# Are you doing a program for a company?
[20:33:15] *** Joins: magla (~gelignite@55d4860d.access.ecotel.net)
[20:33:26] <recursiveNode> KillerWasp no, I'm trying to innovate something for free
[20:33:29] *** Quits: absc (~absc@dynamic-adsl-94-34-217-240.clienti.tiscali.it) (Quit: Leaving.)
[20:33:29] *** Quits: gggp_ (~gggp@125.33.84.224) (Ping timeout: 252 seconds)
[20:35:30] <KillerWasp> recursiveNode# What's the real objective of the program?
[20:36:04] *** Joins: jhulten (~jhulten@c-67-185-71-124.hsd1.wa.comcast.net)
[20:37:28] <recursiveNode> KillerWasp the purpose is to incrementally process Java entities as they arrive, and analyze them via state machine for patterns of personal preference. For example, in trading, you'd be analyzing the bid price and the ask price for a > 10% increase over 30m. The state machine filters information and only notifies you when what you are subscribed for is found.
[20:37:37] *** Joins: Glumfish (~Glumfish@user/glumfish)
[20:38:56] *** Joins: lille_bitte_ven (~LilleVen@83-91-97-60-cable.dk.customer.tdc.net)
[20:39:04] <recursiveNode> KillerWasp normally, companies code a producer app to send Java entities via socket into a message broker. And a consumer app to read Java entities from a message broker, process them, and to write notifications of situations that interest you into some sink.
[20:39:47] <recursiveNode> KillerWasp but I'm thinking of doing it peer to peer instead, so that the Producer app will connect via socket directly to the Consumer app. And I'm thinking of performance as the only thing that needs to be innovated.
[20:41:04] *** Joins: Danishman (~Allan@2-104-144-110-cable.dk.customer.tdc.net)
[20:41:30] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[20:41:35] *** Quits: d3x0r (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[20:41:46] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 240 seconds)
[20:42:20] *** Joins: ollie (~ollie@2a01:4c8:461:f82a:6982:c131:3486:df1c)
[20:42:22] <recursiveNode> KillerWasp in terms of Java, it's a ServerSocket, Thread pool for connections, client Socket to connect to other such apps for reading or writing, and a state machine that can be configured from a file to process information for situation that personally interests you
[20:43:00] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[20:43:23] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[20:44:18] *** Joins: Glumfish (~Glumfish@user/glumfish)
[20:44:19] <recursiveNode> do you think there are any scenarios where a message broker is faster than peer to peer sockets?
[20:45:21] <jootoi> It is easier to scale, especially with multiple consumers
[20:45:52] <recursiveNode> what's easier to scale? A message broker?
[20:45:53] *** Quits: scabby (~scabby@user/scabootssca) (Ping timeout: 258 seconds)
[20:45:57] <jootoi> yes
[20:46:01] <recursiveNode> sure, it is
[20:46:09] <recursiveNode> but throughput and latency are what matters
[20:46:41] <recursiveNode> I will scale peer to peer in the same way that message brokers scale when I have to
[20:47:04] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[20:47:08] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[20:47:10] *** Joins: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com)
[20:47:33] *** Quits: Booster2ooo (~Booster2o@91.183.83.5) (Read error: Connection reset by peer)
[20:48:02] <recursiveNode> have you ever heard of a producer app and consumer app that would start as just one app doing both, and then at runtime it would dynamically start as a separate producer process on a different node, and as a different consumer process (in other words, it would be at first centralized, and if it wouldn't be able to catch up with traffic it would go distributed?)
[20:48:24] *** Joins: enoq (~enoq@194-208-146-143.lampert.tv)
[20:48:30] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[20:48:34] <enoq> hm, looking at https://www.infoq.com/news/2021/07/swiftui-3-beta/
[20:48:39] <enoq> ForEach(labels) { label in
[20:48:47] <enoq> could it be that Swift has it backwards?
[20:49:03] *** Joins: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca)
[20:49:04] <enoq> or do you also labels label in your stuff?
[20:49:25] <jootoi> recursiveNode: can't say I have
[20:49:49] <recursiveNode> jootoi should I code it then, and run a benchmark on it to see how it performs and scales?
[20:49:49] <GeDaMo> enoq: I think that translates to foreach label in labels ...
[20:50:42] <enoq> it does
[20:50:46] <enoq> https://www.hackingwithswift.com/books/ios-swiftui/creating-views-in-a-loop
[20:51:14] <enoq> I mean it's probably just a lambda parameter followed by an in
[20:51:44] <enoq> rubyesque like lambdas
[20:52:00] <jootoi> recursiveNode: I am still not quite sure how you will manage multiple consumers consuming same data, but it would be nice to see how much having the message broker in between increases latency
[20:52:49] *** Joins: scabby (~scabby@user/scabootssca)
[20:54:01] <recursiveNode> jootoi in the brokerless architecture, with only peer to peer, I will add multiple consumer apps and the producer will have to send only a shard of the overall data to each consumer app
[20:55:02] *** Joins: Pickchea (~private@user/pickchea)
[20:55:02] *** Quits: soulisson (~soulisson@105.156.250.67) (Quit: Leaving)
[20:55:36] <jootoi> what if you have two different apps consuming same feed? With message brokers you would increase resources for the brokers until all the consumers can consume and producers do not need to be scaled.
[20:55:45] <recursiveNode> jootoi so if there are 10 consumer apps, and 1 producer app, the producer will establish 10 socket connections and send to each app based on id 0..10. When the producer generates new data, it will do something like dataSequenceId % 10 to determine which consumer to send it to. This implements sharding. (10 partitions).
[20:55:51] *** Quits: Izem (~Izem@bras-base-london1483w-grc-42-65-95-172-41.dsl.bell.ca) (Quit: Connection closed)
[20:56:42] <recursiveNode> jootoi or did you mean multiple consumers consuming the same data? That can be via multicast socket. (I hope that's the highest performance)
[20:57:25] <recursiveNode> jootoi if I wouldn't setup 10 partitions upfront, I'd need the producer to rebalance
[20:57:54] <KillerWasp> recursiveNode# If many connect to one, it can no longer be peer to peer.
[20:58:10] <jootoi> I meant the second scenario
[20:58:15] <recursiveNode> jootoi i.e. when partitions aren't setup from the beginning to be 10, they are 1, then with every new consumer joining, the producer needs to rebalance (increase the number of partitions and make sure the state is correct)
[20:58:20] *** Quits: j0hnny (kadnsjkfnw@shell.xshellz.com) (Ping timeout: 252 seconds)
[20:58:56] <recursiveNode> KillerWasp One peer can write to number of other peers. One peer can read from any number of other peers. It's still peer to peer.
[20:59:19] <jootoi> scaling one application with multiple consumers is "easy"
[21:00:47] <recursiveNode> for the 2nd scenario, I'll try a multicast socket to see how it performs. And I'll compare its performance to a thread pool that writes into individual unicast sockets using LMAX disruptor as a bus
[21:01:25] *** Quits: scabby (~scabby@user/scabootssca) (Remote host closed the connection)
[21:01:49] *** Joins: scabby (~scabby@user/scabootssca)
[21:02:14] <recursiveNode> so it's unicast vs multicast socket performance
[21:03:16] *** Quits: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net) (Read error: Connection reset by peer)
[21:05:56] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 252 seconds)
[21:06:09] *** Joins: gggp_ (~gggp@125.33.95.57)
[21:07:45] *** Quits: gggp (~gggp@60.10.194.47) (Killed (NickServ (GHOST command used by gggp_!~gggp@125.33.95.57)))
[21:07:49] *** gggp_ is now known as gggp
[21:08:08] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 252 seconds)
[21:10:58] *** Quits: nolesswrong (~nolesswro@45.63.110.46) (Remote host closed the connection)
[21:10:59] *** Quits: freakazoid333 (~freakazoi@72.168.176.187) (Read error: Connection reset by peer)
[21:11:04] *** Joins: Glumfish (~Glumfish@user/glumfish)
[21:11:15] *** Joins: nolesswrong (~nolesswro@45.63.110.46)
[21:11:39] *** Joins: freakazoid333 (~freakazoi@72.168.176.196)
[21:11:58] *** Joins: j0hnny (kadnsjkfnw@shell.xshellz.com)
[21:13:35] *** Quits: soapsudsxx (~soapsudsx@209.221.40.138) (Remote host closed the connection)
[21:16:09] <teut> Uploaded file: https://uploads.kiwiirc.com/files/28fb1f5796d7241757df8ecc8bfbdbfe/image.png
[21:16:48] <teut> L1 latency is 4 cycles,     4 clock cycles  to get what?
[21:18:18] <GeDaMo> Latency is the time between the CPU asking for some data and receiving it
[21:18:21] *** Joins: rey (~reymond@23.81.176.120)
[21:18:48] *** Quits: cursey (uid186300@id-186300.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:18:57] <teut> and it will take 4 clock cycles?      not very clear
[21:19:36] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:20:22] <GeDaMo> http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/
[21:20:32] <teut> since there are many programs running, so  this process/program will be on the cache every 4 cycles?
[21:20:53] <GeDaMo> There can be multiple requests in progress
[21:21:07] <teut> nice link , thank
[21:21:09] <teut> s
[21:21:19] <GeDaMo> https://blog.codinghorror.com/the-infinite-space-between-words/
[21:22:32] *** Quits: chomwitt (~Pitsikoko@athedsl-16082.home.otenet.gr) (Ping timeout: 252 seconds)
[21:23:27] <teut> ok, so it's a measurement unit
[21:23:58] <GeDaMo> It's a measurement of time
[21:24:29] <teut> yes, like in physics we use
[21:24:52] *** Joins: sumthing1980 (~sumthing1@94.54.64.154)
[21:25:47] *** Quits: enoq (~enoq@194-208-146-143.lampert.tv) (Quit: enoq)
[21:27:36] *** Joins: AlexDelarge (~alexboy@user/alexdelarge)
[21:29:38] *** Quits: nolesswrong (~nolesswro@45.63.110.46) (Remote host closed the connection)
[21:29:46] *** Joins: nolesswrong (~nolesswro@45.63.110.46)
[21:29:55] *** Quits: amigojapan (uid86330@id-86330.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[21:31:07] *** droman is now known as stkw0
[21:31:22] *** Quits: ollie (~ollie@2a01:4c8:461:f82a:6982:c131:3486:df1c) (Ping timeout: 240 seconds)
[21:31:53] *** Quits: xff0x (~xff0x@2001:1a81:5361:2500:9aff:3f7d:a108:43b8) (Ping timeout: 252 seconds)
[21:31:59] *** Joins: locknet (~locknet@static.193.168.itcsa.net)
[21:32:53] *** Joins: xff0x (~xff0x@2001:1a81:5361:2500:809c:f58:ea4b:fa4b)
[21:34:36] *** Joins: chomwitt (~Pitsikoko@2a02:587:dc0b:0:d8f7:cdfe:4658:bec4)
[21:34:39] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:34:43] <locknet> Hi guys! Is it possible to create an endpoint like "http://localhost/openDoor" that when it's called it execute a function in python?
[21:35:03] <locknet> I don't know how to search for
[21:35:05] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 252 seconds)
[21:35:36] *** Quits: Guest53 (~textual@ool-43527ebe.dyn.optonline.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:35:43] *** Quits: death916 (~death916@user/death916) (Ping timeout: 258 seconds)
[21:35:48] *** Joins: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be)
[21:36:04] <GeDaMo> Which webserver are you using?
[21:36:05] *** Joins: Glumfish (~Glumfish@user/glumfish)
[21:37:08] <locknet> GeDaMo, that's where I'm confused, I would run this in a RPi, so I guess has to be done with flask or something else
[21:37:40] <GeDaMo> I think Python can run a simple webserver
[21:38:10] *** Quits: sumthing1980 (~sumthing1@94.54.64.154) (Quit: Leaving)
[21:38:58] *** Quits: anahat (~anahat@116.74.190.238) (Read error: Connection reset by peer)
[21:39:18] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:252a:1b39:e806:69c8) (Quit: Textual IRC Client: www.textualapp.com)
[21:39:31] *** Quits: rsx (~dummy@ppp-188-174-148-148.dynamic.mnet-online.de) (Quit: rsx)
[21:42:06] <deniska> locknet: I'd use something like flask or bottle
[21:43:24] *** Quits: kikijiki (~Thunderbi@user/kikijiki) (Quit: kikijiki)
[21:45:00] *** Quits: Pickchea (~private@user/pickchea) (Ping timeout: 272 seconds)
[21:45:35] <pikapika> The iron hand of GPL was a clear victory over the wishy washy BSD
[21:47:07] *** Quits: diophantoz (~dz@user/diophantoz) (Quit: leaving)
[21:47:28] <Donitz> jesus mf christ
[21:47:37] <Donitz> how do I disable the horizontal scroll wheel entirely in windows 10
[21:47:42] <Donitz> before I throw this mouse out the window
[21:50:29] *** Quits: gggp (~gggp@125.33.95.57) (Ping timeout: 252 seconds)
[21:52:40] <Donitz> I don't know why mx master is designed so the wheel touches your thumb during normal use
[21:56:55] *** Joins: lunarkitty (uid501895@user/pyra)
[21:57:51] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[22:00:41] *** Joins: death916 (~death916@c-67-182-183-147.hsd1.ca.comcast.net)
[22:01:49] <mrig> Donitz: that sounds pretty annoying, is there not a sensitivity setting for it?
[22:01:57] <Donitz> nope
[22:02:43] <mrig> well, there is always the keyboard?
[22:02:45] <mrig> :)
[22:03:14] <pikapika> The solution is easy: don't use a mouse with thousand buttons and flashing rainbow lights
[22:03:31] <pikapika> These are all money gouging tools anyways
[22:03:56] <Donitz> it's mx master
[22:04:02] <Donitz> it's an extremely solid and good quality mouse
[22:04:05] <Donitz> it's not some kind of "gamer" mouse
[22:04:34] *** Quits: \c (~\c@user/o/x-1005988) (Quit: Client closed)
[22:05:20] <mrig> It's pretty frustrating when UI devices are not well designed :|
[22:05:30] <mrig> Donitz: it does look the part.
[22:06:21] *** Quits: robyndrake (robyndrake@user/robyndrake) (Quit: WeeChat 2.9)
[22:06:33] <pikapika> Donitz, "gamer" was actually the word I had in mind but didn't write down. Good to see it doesn't fall in that trap.
[22:06:50] <Donitz> oh god no
[22:06:54] <Donitz> god I hate the "gamer" stuff
[22:07:19] <Donitz> hardware manufacturers think they can just throw in a ton of angled hollow plastic on cheaply made shit and have gamers eat it up
[22:07:21] <Donitz> AND IT WORKS
[22:07:58] <pikapika> Gamers are idiots
[22:08:04] <pikapika> See also audiophiles
[22:08:05] <Donitz> anyway, logitech mice has historically been THE standard for quality mice
[22:08:25] <mrig> I've got a wooden case on my recent keyboard, at least it is both long lasting and biodegradable.
[22:08:33] <mrig> looks nice too.
[22:08:47] <pulse> i've settled on steelseries sensei 310
[22:08:50] <pulse> best mouse i've used so far
[22:08:55] <pulse> maybe i'll get a few spare ones
[22:08:55] <pikapika> If I want to spend a good amount on a keyboard I'd rather make my own
[22:09:13] <pikapika> And I meant really actually make my own, not just do a craft project with pre-built electronics
[22:09:16] <Donitz> I use a mechnical keyboard with red switches
[22:09:21] <Donitz> or were they brown
[22:09:24] <Donitz> the non-clicky ones
[22:09:37] <mrig> pikapika: I decided to do that, so that I knew that all of the parts are replaceable and it will be the last one that I need to aquire.
[22:09:38] <pulse> red are linear
[22:09:40] <pikapika> And no using microcontrollers
[22:09:42] <pulse> brown are tactile
[22:09:46] <Donitz> then it's red
[22:09:54] <Donitz> I like them, but I can't be like https://www.youtube.com/watch?v=jO5IaAKTKsQ
[22:09:59] <pikapika> mrig, replacability/repairability is the important thing and main benefit
[22:10:08] <mrig> pikapika: absolutely.
[22:10:10] <pulse> lmao Donitz
[22:10:49] <pulse> i have two of the same keyboard, one has blues and one browns, i prefer browns
[22:11:16] <pulse> although blue are objectively better for typing, they're just too loud
[22:18:22] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-0dea-7cc3-4277-6a32.res6.spectrum.com)
[22:20:29] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[22:21:10] <teut> Uploaded file: https://uploads.kiwiirc.com/files/57dc3a1282f77fd9867ceb84d346c8ca/image.png
[22:22:43] <teut> in this code https://www.youtube.com/watch?v=WDIkqP4JbkE   47:07     , the "objects" will be stored in heap and heap memory is defragmented, so does a cache line gets the whole object from the ram pr whatever?
[22:22:50] <teut> or*
[22:24:48] *** Quits: iauc (~iauc@ti0061a400-1478.bb.online.no) (Quit: Client closed)
[22:25:42] <GeDaMo> A cache line is e.g. 64 bytes; when you read any byte on a cache line, the whole line is read in
[22:26:53] *** Joins: lucf117 (~lucf117@user/lucf117)
[22:26:57] *** Joins: lucf117_ (~lucf117@user/lucf117)
[22:27:22] <terminalpusher> is it possible in a Makefile to have spaces in rules? I want to be able to do `make run emulator` and have it run the program in wine and `make run native` to have it run it natively
[22:27:25] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 246 seconds)
[22:27:36] *** Quits: lucf117 (~lucf117@user/lucf117) (Remote host closed the connection)
[22:27:43] <terminalpusher> the program in an emulator* (not wine)
[22:28:12] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:28:24] *** Joins: odnes_ (~odnes@109-178-241-209.pat.ren.cosmote.net)
[22:29:03] <teut> so is it guaranteed that in those 64 bytes the  "isLive "   of that object  would be there?
[22:29:08] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[22:29:40] <teut> like is the data structure's size is > 64 bytes, then what happens?
[22:29:55] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[22:29:57] <GeDaMo> It would be split over more than one cache line
[22:30:06] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Quit: Leaving)
[22:30:36] <GeDaMo> terminalpusher: I think those would be seen as separate rules
[22:30:55] <terminalpusher> yeah do you know how that works? is underspaces how people do it?
[22:31:29] <terminalpusher> I wish there was like subrules so that `emulator` and `native` is the subrule of `run`
[22:31:53] <teut> ok so a "cache line" will be prepared from heap and loaded into the cache until the bool is not found, correct?
[22:32:04] *** Quits: lille_bitte_ven (~LilleVen@83-91-97-60-cable.dk.customer.tdc.net) (Ping timeout: 258 seconds)
[22:32:19] *** Joins: Glumfish (~Glumfish@user/glumfish)
[22:32:55] <GeDaMo> I'm not sure what you mean by "not found"
[22:33:13] <GeDaMo> The loop in your image processes all of the objects in the vector
[22:33:18] <teut> until there is a cache miss
[22:33:30] <teut> is I understand the vocab correctly
[22:33:33] <teut> if*
[22:33:34] <GeDaMo> If there's a cache miss, the CPU waits until the data arrives
[22:34:04] <teut> cache miss , I m visualizing that,   isLive is not found in the cache
[22:34:25] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Ping timeout: 246 seconds)
[22:34:26] *** Joins: caterfxo (~caterfxo@52.sub-174-253-195.myvzw.com)
[22:34:49] *** Joins: vitorgonc (~vitorgonc@2804:d55:580c:5e00:48d8:407c:dda6:167e)
[22:36:42] <GeDaMo> terminalpusher: maybe ask in ##workingset
[22:36:55] *** Joins: misnor (~misnor@156.57.153.38)
[22:37:04] <teut> if object   is of     78 bytes,   then first 64 bytes  would be fetched and isLive would be checked in it
[22:37:33] <terminalpusher> GeDaMo, got it, I now know that it's possible to pass arguments to `make` like so: `make clean VERY_CLEAN=1`
[22:37:35] <teut> if couldnt find then  65 - ..    bytes would be fetched
[22:38:27] <nitrix> Depends if you're reading the entire object or just that one field.
[22:38:27] <GeDaMo> The cache can detect when you're 'streaming' reading consecutive or strided addresses and will read ahead
[22:39:47] <teut> yes there is some vocab "prefetch" that they used
[22:40:04] <vdamewood> terminalpusher: Make will only interpret the first non-assignment argument as the rule, so you would need to quote anything with a space, make "run emulator"
[22:40:05] <teut> it seems you are talking about that thing too
[22:40:42] <GeDaMo> vdamewood: would you define it with quotes in the makefile too?
[22:40:47] <terminalpusher> ok maybe I will just use underscore rules
[22:41:03] <nitrix> A read for obj->member, where the member is at an offset of 75 bytes isn't going to produce two memory reads, it just needs the sizeof member at a particular location. If that location happens to fall within a cache line, lucky you.
[22:41:03] *** Joins: zoey (~zoey@2a02:8084:a080:9e00:3fae:994c:3fdc:274d)
[22:41:51] <teut> who said offset?  arent offsets only in stack?  but objects are on heap
[22:42:32] <GeDaMo> In a struct, the members are at an offset from the base of the struct
[22:42:42] *** Quits: freakazoid333 (~freakazoi@72.168.176.196) (Read error: Connection reset by peer)
[22:43:01] <teut> yes, in structs they are, ok , we can talk about structs then
[22:43:20] <teut> actually classes are just structs and pointers to functions
[22:43:27] <teut> i just remembered
[22:43:31] <vdamewood> GeDaMo: no, backslash escape the space
[22:43:37] <GeDaMo> Ah
[22:43:54] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 272 seconds)
[22:43:55] <vdamewood> run\ emulator:
[22:45:00] <teut> so does the hardware knows that   isLive of object  lies in the next  64 bytes  or the first 64 bytes  nitrix?
[22:45:20] <teut> or we just got the reference of start of the structure?
[22:46:14] *** Joins: dunkeln_ (~dunkeln@188.71.194.238)
[22:46:16] <teut> ok, what you said is clear now .
[22:46:16] *** Joins: Glumfish (~Glumfish@user/glumfish)
[22:46:28] <teut> thanks GeDaMo and nitrix
[22:46:42] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[22:46:57] *** Joins: freakazoid333 (~freakazoi@72.168.176.196)
[22:47:38] *** Joins: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net)
[22:48:30] <nitrix> If the object `obj` is at address 0x0 and the member `obj.member` is at address 0x4B, doing a fetch of a word at 0x4B will either (1) come from what's at offset 0xB of the cache line responsible for 0x40-0x80 or (2) come from what's in RAM at 0x4B.
[22:49:21] <teut> yes, I understood a bit late , but understood
[22:49:53] *** Quits: gitgood (~gitgood@80-44-9-45.dynamic.dsl.as9105.com) (Ping timeout: 252 seconds)
[22:50:10] <teut> but structures have structure padding too,  so there is wasted space
[22:50:14] *** Quits: Sauvin (~sauvin@about/linux/staff/sauvin) (Ping timeout: 272 seconds)
[22:50:20] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[22:50:23] <nitrix> "wasted".
[22:50:36] <teut> isnt it?
[22:50:42] <nitrix> The padding isn't there for fun, it's for alignment.
[22:50:55] <teut> sure
[22:51:01] *** Joins: eXistenZ (~biskit@bzq-79-179-125-183.red.bezeqint.net)
[22:54:53] *** Quits: codingcampbell (~codingcam@user/codingcampbell) (Quit: codingcampbell)
[22:55:21] *** Joins: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk)
[22:55:33] <nitrix> Un-aligned reads are much slower. Those require multiple reads and need to be recombined. Modern processors with microcode can emulate that, but it's extremely slow.
[22:55:55] <nitrix> Other processors will simply fault.
[22:56:19] *** Joins: usr123 (~usr123@124.253.108.128)
[22:57:18] *** Quits: otisolsen70_ (~otisolsen@xd4ed80b5.cust.hiper.dk) (Remote host closed the connection)
[22:59:02] <nitrix> Plus you have additional damage. Sometimes it's a bubble injected in the instruction pipeline, you can trigger cache line flushes and you can confuse the branch predictor.
[22:59:07] <usr123> This might be off topic, but I'm new to freelancing. There's a project written in Express JS with react frontend that needs to be ported to Golang (for no clear reason). It has some crud apis (with pagination), graphql integration, and the majority application being WebRTC based video chat (recording to be supported). I'm being asked to do this in about 24-30 days. Thoughts?
[22:59:35] <usr123> I've only dealt with basic crud apps in golang before. Some websocket stuff at the most.
[22:59:39] <teut> yes, I  do not know assembly but at the moment so I couldnt do the address calculations from the example you gave abov
[22:59:39] <teut> e
[22:59:44] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Ping timeout: 272 seconds)
[23:00:30] <teut> bubble?  looks like you are a core electrical engineer
[23:00:52] <nitrix> No, I'm unemployed.
[23:00:55] <teut> I ll need to read much more to get that
[23:01:42] <teut> but you know so much more than me. you are more eligible for any cs job more than me
[23:01:44] *** Quits: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:2848:d259:b7ae:bb80) (Quit: Leaving)
[23:02:04] *** Joins: BrianG61UK (~BrianG61U@2a02:8010:66b7:dddd:2848:d259:b7ae:bb80)
[23:02:50] *** Joins: pyzozord (~pyzozord@user/pyzozord)
[23:03:13] <pyzozord> is there a way to have manual control over stdout flush?
[23:03:30] <nitrix> teut, Instructions in a CPU aren't executed one after the other. Because there are 4 cycles (fetch, decode, execute, write-back), you would only be able to process one instruction every 4 cycles and that's not great.
[23:03:31] <pyzozord> meaning my printfs don't show up on screen until I fflush
[23:04:01] <kodah> pyzozord: what are you doing?
[23:04:03] <nitrix> teut, Instead, processors do pipelining. While something gets decoded, the next instruction can already be fetched, etc.
[23:04:04] <kodah> logging?
[23:04:06] <teut> ah, yes I read those things but it has been quite some time
[23:04:13] <jeaye> pyzozord: Don't write them until you want them shown, then flush at the end.
[23:04:17] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a) (Ping timeout: 252 seconds)
[23:04:36] <teut> yes Gary Explains told it
[23:04:46] <jeaye> I don't think you can get around buffer sizes in a portable way, so that seems like the wrong approach.
[23:05:04] <nitrix> teut, This leads into "pipelined execution", but that also means that any trouble (like having to do two fetches like earlier) during one of the steps must delay everything else to keep the rhythm just right, hence the bubble inserted.
[23:05:06] <nitrix> teut, https://upload.wikimedia.org/wikipedia/commons/thumb/6/67/Pipeline%2C_4_stage_with_bubble.svg/1024px-Pipeline%2C_4_stage_with_bubble.svg.png
[23:05:10] *** Quits: exvicesindaco (~exvicio@user/exvicesindaco) (Remote host closed the connection)
[23:05:28] <teut> is that the prefech thing?
[23:05:33] *** Quits: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:7133:e4e2:a4dd:98d5) (Quit: Leaving)
[23:05:45] <nitrix> No, prefetch is usually to do with prediction.
[23:06:16] <teut> the strange branch prediction thing?
[23:06:35] *** Joins: BrianG61UK_ (~BrianG61U@2a02:8010:66b7:dddd:7133:e4e2:a4dd:98d5)
[23:06:51] <nitrix> Modern processors can run instructions out of order, as long as the observable result is the same. In some cases, you can do your arithmetic upfront to calculate the address of a pointer.
[23:07:13] <teut> i cannot understand the image
[23:07:13] <pyzozord> kodah: doing a real time roguelike game https://ideone.com/Jmxha0
[23:07:14] <nitrix> And that lets you know ahead of time where you'll be fetching from, so you can put that earlier in the pipeline so that it's ready by the time you need it.
[23:07:34] <nitrix> But it's a regular fetch like everything else, you're just queueing it up earlier (planning ahead).
[23:07:34] <teut> what level of knowledge is required to understand that?
[23:08:12] <nitrix> Not much. The concept is trivial. How it's done in practice is absolute black magic.
[23:08:35] <kodah> oh i see, i think you'll need to flush each time you want to paint
[23:08:52] <teut> was bubble a metaphor there?
[23:09:36] <nitrix> teut, More or less. The "bubble" is the whole in the instruction pipeline. It's as if the processor executed a NOP instruction.
[23:09:41] <nitrix> *hole
[23:09:58] <pyzozord> jeaye: Look at line 166 https://ideone.com/Jmxha0 I'm doing putc a lot
[23:10:08] <teut> you mean "hole" I thing
[23:10:09] <teut> k
[23:10:20] <teut> oh ok
[23:10:46] <teut> got it
[23:11:01] <teut> if its a cache miss then its  time wasted
[23:11:04] <teut> a NOP
[23:11:10] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:2132:cd52:1e4a:f46a)
[23:12:27] <nitrix> Point is, the "wasteful padding" is there for a reason. You don't want unaligned reads to cause what they call a "hazard" and fixes like bubbles in the instruction pipeline.
[23:14:06] <immibis> nitrix: "Because there are 4 cycles you would only be able to process one instruction every 4 cycles" isn't really correct. babby's first CPU design puts all those in sequence and just makes the clock 4 times slower
[23:15:12] <immibis> but still processes 1 instruction per clock
[23:15:14] <nitrix> You're processing them at the same speed, you've just changed the clock rate.
[23:15:24] <immibis> yes, and "every 4 cycles" isn't correct
[23:15:27] <vdamewood> root, I hope the English language doesn't evolve in a way that 'babby' becomes the common word for 'baby'.
[23:15:38] <teut> Uploaded file: https://uploads.kiwiirc.com/files/8a08f22c07533e7ad0973745fba8625a/image.png
[23:15:45] <immibis> etymologists, how was "babby" formed?
[23:16:10] *** Joins: furrymcgee (~devuan@31.179.186.66)
[23:16:28] <vdamewood> immibis: Oh, root!
[23:16:42] <immibis> teut: it is simplistic. It really depends on the hardware architecture. On some CPU designs it works like your picture.
[23:16:44] <teut> in this, if the structure padding was done, c would had been in the second segment  , ie  2 places shifted
[23:16:44] <nitrix> immibis, It should say every cycle of 4 stages.
[23:17:14] <teut> so can in 1 clock cycle you can fetch   c?
[23:17:22] <immibis> on older ARM CPUs, for example, it would NOT access the second group of 4 and take 2 cycles. It would take 1 cycle, and it would get all the 4 bytes from the first segment, and jumble them up! It would actually fetch the *wrong bytes*!
[23:17:33] <teut> ignore latency
[23:17:48] <immibis> yes
[23:17:59] <immibis> if c was in the second segment, on that CPU design, it could be fetched in 1 cycle
[23:18:25] <teut> how, you only know the starting address of the  struct and size of int
[23:19:11] <teut> and there could be a possibilty that  int is in first  segment and characters in second
[23:19:15] <nitrix> I'm still baffled that you're stuck on the address part when the topic is so much much complex at the hardware execution pipeline level.
[23:19:22] *** Joins: Pickchea (~private@user/pickchea)
[23:19:30] <immibis> teut: because you told it char, char, padding, int
[23:19:41] <nitrix> Maybe you want to learn C and clear that confusion once and for all.
[23:19:41] <teut> who told?
[23:19:49] <teut> when did I tell?
[23:19:50] <immibis> struct abc {char a; char b; int c;}
[23:20:03] <teut> oh ok , ok , now I understood
[23:20:06] *** Quits: dunkeln_ (~dunkeln@188.71.194.238) (Ping timeout: 265 seconds)
[23:20:10] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 240 seconds)
[23:20:13] <immibis> it even says //4 bytes in the code
[23:20:23] <teut> so the order of char char int matters
[23:20:47] <nitrix> Of course.
[23:20:47] *** Quits: chance (~chance@user/chance) (Quit: Client closed)
[23:20:48] <immibis> Yes. You don't want to have char; int; char; int; char; int because it wastes padding (here 24 bytes). If you change the order, so it's char; char; char; int; int; int; now it's 16 bytes
[23:21:15] <immibis> (24 bytes for the whole struct, not 24 bytes for the padding)
[23:21:24] <teut> now that is some very cool stuff
[23:21:34] <nitrix> struct abc x; // The standard requires that &x.a < &x.b < &x.c, their addresses have to remain in order, but padding can be inserted.
[23:22:19] <teut> so if I do not pad, why cant it start reading the cache line  from  where c starts in the image?
[23:22:38] <nitrix> The cache line is completely orthogonal to this.
[23:23:25] <teut> adjective: orthogonal
[23:23:26] <teut>     of or involving right angles; at right angles.\
[23:23:38] <teut> how does this word fit here?
[23:24:06] <teut> catch line is perpendicular?
[23:24:09] <nitrix> The concepts are completely separated, they just happen to meet here.
[23:24:14] <teut> cache*
[23:24:22] <teut> ok , in that sense
[23:24:36] <nitrix> If the piece of data you want from memory happens to be stored within a cache line, good for you, it just makes your fetch faster.
[23:24:57] <teut> who defines the start and end of cache line?
[23:25:08] <teut> the compiler at the lowest level?
[23:25:14] <nitrix> When you make a fetch, the processor checks a table to know if the address you're fetching falls within the range of one of the lines.
[23:26:15] *** Quits: bytefire (~bytefire@51.19.235.161) (Quit: leaving)
[23:27:01] <GeDaMo> The hardware defines the cache line
[23:27:13] <nitrix> The lines are usually 64 bytes. They are copies of regions of 64 bytes of the RAM. How those regions are decided is complicated. It's usually the ones most recently used.
[23:27:20] *** Joins: Glumfish (~Glumfish@user/glumfish)
[23:28:17] *** Joins: dunkeln (~dunkeln@188.71.194.238)
[23:28:24] <teut> that was the misconception I had , I thought the  hardware magically picks the bytes
[23:28:36] <nitrix> But it can also be adjacent regions to places you've recently read, to help with code that has loops processing multiple elements sequentially, so prediction.
[23:28:38] <teut> but 64 bytes
[23:28:48] <teut> 64 bits*
[23:29:01] <teut> in x64 64 buts right?
[23:29:05] <teut> bits*
[23:29:14] <nitrix> The lines have a fixed size, but the lines don't always cover the same regions of RAM.
[23:29:28] <nitrix> They, obviously, cover the regions that are the most used, to get the best speed improvement.
[23:29:50] <nitrix> That constantly changes as programs run.
[23:31:00] <teut> the lines are defined on runtime you mean?
[23:31:24] <nitrix> If you access in your code the same variable over and over again, the processor might decide at some point that this region of memory where your variable is located would be useful enough to keep in cache, so it'll evict an old cache line, copy that region of memory there in the line and update a table to know that "from X to Y in memory, I have a cached, faster version, in line #Z".
[23:31:28] <teut> not like they are manuffactured while the  circuit board is printed?
[23:32:03] *** Joins: chance (~chance@user/chance)
[23:32:46] <teut> wow, looks quite magically to make some piece of metal to make it do that prediction.
[23:32:53] *** Quits: vitorgonc (~vitorgonc@2804:d55:580c:5e00:48d8:407c:dda6:167e) (Ping timeout: 252 seconds)
[23:32:55] <nitrix> You can think of it like another stick of RAM, but that one is faster. The processor has to do the work of figuring out what it wants to keep in that faster RAM, and where that corresponds to in the real RAM.
[23:33:18] *** Quits: dunkeln (~dunkeln@188.71.194.238) (Ping timeout: 272 seconds)
[23:34:10] <nitrix> To simplify the decision, that RAM is split into very small chunks (lines) of 64 bytes, so that something that hasn't been used recently can immediately be replaced by something more important.
[23:34:23] <teut> so there is some hardware algorithm b which the cache line regions are decided
[23:34:28] <teut> by*
[23:34:39] *** Quits: TheAceOfHearts (~TheAceOfH@24.41.239.76) (Quit: So long, and thanks for all the fish!)
[23:34:51] <nitrix> Right. Modern processors have microcode running in them to make those decisions.
[23:35:30] <deniska> caching algorithms aren't too clever
[23:35:30] <teut> microcode , wow , interesting vocab
[23:35:49] *** Quits: Booster2ooo (~Booster2o@host-213-189-163-54.dynamic.voo.be) (Read error: Connection reset by peer)
[23:35:58] <teut> where do you learn this stuff from?  books really?
[23:36:01] *** Quits: Glumfish (~Glumfish@user/glumfish) (Ping timeout: 246 seconds)
[23:36:16] <nitrix> They do pretty much everything with microcode. Even x86/x64 assembly is really just interpreted by those microcode programs.
[23:36:53] <deniska> "microcode" is a pretty old thing
[23:37:13] <nitrix> Once in a while, there's vulnerabilities like Spectre or Meltdown that companies like Intel have to release a firmware update to all the CPUs, but ideally the microcode doesn't change.
[23:37:53] <deniska> well, it's not like you can "reflash" an intel cpu into ARM or something
[23:38:05] *** Joins: Glumfish (~Glumfish@user/glumfish)
[23:38:10] <deniska> but they do allow to disable some features after the fact
[23:39:36] *** Quits: wedr (~wedr@pool-108-20-128-8.bstnma.fios.verizon.net) (Remote host closed the connection)
[23:39:57] <teut> thanks for the great  info, this much idea was important for me to understand certain parts of books on the computer hardware
[23:40:09] *** Joins: pavonia (~user@user/siracusa)
[23:40:19] *** Quits: freakazoid333 (~freakazoi@72.168.176.196) (Read error: Connection reset by peer)
[23:40:46] <mrig> In the case of the skylake and others that were susceptible to spectre, have they turned off the link between the two cores on a chip that was used to share the L2 cache?
[23:40:47] *** Joins: freakazoid333 (~freakazoi@72.168.176.196)
[23:41:19] <mrig> by way of the microcode I mean, or is this what the patches do?
[23:41:45] <deniska> teut: any combinational logic circuit can be implemented as ROM of big enough size
[23:42:04] <deniska> the idea of microcode is to make this ROM to be rewriteable :)
[23:43:30] <nitrix> I stopped caring about spectre. Seems to me like there's always some side-channel attack possible, if it's not spectre it's something else. At some point, you have to own your hardware and audit what runs on it if you really want peace of mind.
[23:44:09] <jeaye> Peace of mind. Modern computing. Not sure if that's a thing.
[23:44:25] <deniska> disable javascript and everything will be fine :)
[23:44:27] <mrig> I'm more intrigued as it still seems pretty neat to use if you are coding for specific hardware.
[23:44:58] <mrig> for data structures that are running with code designed to be in the cache.
[23:45:24] <deniska> meanwhile someone did made a computer using only memory chips: https://hackaday.com/2017/02/02/the-gray-1-a-computer-composed-entirely-of-rom-and-ram/
[23:45:45] <mrig> I mean you could have cores processing with data shared there that would take ages to be shared if it goes to another actual processor.
[23:47:05] <GeDaMo> http://web.archive.org/web/20170203220739/http://2x-1.net/ob/gray1/
[23:47:34] *** Joins: decker (~d3x0r@ip98-160-176-209.lv.lv.cox.net)
[23:47:50] *** MeatNit is now known as NeatNit
[23:48:10] *** Quits: Alex123 (~Adium@2603-8000-f640-d482-0dea-7cc3-4277-6a32.res6.spectrum.com) (Ping timeout: 240 seconds)
[23:49:37] *** Joins: Alex123 (~Adium@2603-8000-f640-d482-0dea-7cc3-4277-6a32.res6.spectrum.com)
[23:49:44] <mrig> Hum, looks like quite a sizable rabbit hole that one :)
[23:50:46] <immibis> nitrix: assembly isn't really "interpreted by microcode". Well, it can be in some CPUs. My CPU design is like that because it reduces the amount of logic gates.
[23:50:56] <decker> https://d3x0r.github.io/space-plasma.js/  how do I make the fog of visibility more... blocking?
[23:51:12] <immibis> AFAIK in modern CPUs, microcode is more of a look-aside table that the instruction decoder uses for particularly complex instructions
[23:51:24] <teut> does every computer has ROM, I only know about cd ROM
[23:51:35] <mrig> if eprom would those chips all flashed individually before construction?
[23:51:36] <teut> and that too also comes writable
[23:51:50] <immibis> here we are talking about digital logic circuits, not what you can see as a programmer
[23:51:55] <teut> so what is read only now?
[23:51:58] <immibis> every computer has ROM but that doesn't mean you can access it from your code
[23:52:08] <decker> teut not really - IOT ARM devices have enough smarts to trigger reading, but it's without a rom
[23:52:18] <decker> it's just deidicated that data will come from an SD card device
[23:52:40] <deniska> modern computers are nuts, they have a lot of "computers" inside
[23:52:41] <immibis> mrig: I wasn't aware they'd solved spectre?
[23:52:59] <immibis> teut: well, CD-ROM is read-only. CD-RW is not.
[23:53:03] <deniska> even intel CPUs have another CPU inside them for ME :)
[23:53:15] <teut> yes its SD card or pendrive , or hard drive for storage, and they are writable
[23:53:16] <decker> ROMs are rarely readonly anymore - what with rom updates
[23:53:26] <teut> CD-RW , I never noticed that
[23:53:27] <mrig> immibis: I was wondering if the pipeline between the cores was blocked or not, I suppose it cant be if it is not solved.
[23:53:37] <nitrix> deniska, A GPU is already a complete computer on its own. It has its own processor, own RAM, own motherboard, own power supply, own cooling, own chassis.
[23:53:50] <teut> and who even uses a CD now
[23:53:58] <deniska> Someone recently installed linux on a hard drive
[23:54:02] <vdamewood> I do
[23:54:10] <deniska> not, like, as a media to store files
[23:54:24] <deniska> but on actual chips which make a hard drive function :)
[23:54:38] <Rounin> Let's not forget the CPUs inside the CPUs... Like the Intel Management Engine
[23:54:39] <vdamewood> deniska: You mean on a hard drive controller?
[23:54:43] <deniska> teut: I started with 3.5" floppies as my removable media
[23:54:47] <deniska> vdamewood: yeah
[23:54:56] <Rounin> I find myself becoming more of a Luddite the more I work with technology
[23:55:04] <decker> cassette tapes :)
[23:55:06] <Rounin> Just give me a clay tablet and a stick
[23:55:11] <deniska> and optical discs are still somewhat common, for movies and such
[23:55:14] <vdamewood> I still buy music CD. I rip them, and put them in a box, never to see the light of day again.
[23:55:16] <teut> my father used floppies and cassetes long ago
[23:55:35] *** Joins: twomoon (~twomoon@ip72-199-58-150.sd.sd.cox.net)
[23:56:21] <deniska> tape is common for backup storage
[23:56:43] <teut> is or was?
[23:56:47] <Mathisen> was
[23:56:53] <teut> ok
[23:57:02] <mrig> I imagine that density of data on tape has increased significantly.
[23:57:17] <mrig> the possible density I mean.
[23:57:28] <deniska> you can get like 20TB tapes nowadays
[23:57:32] <mrig> hum an interesting though.
[23:57:34] <deniska> they're still used
[23:57:34] <mrig> thought.
[23:57:47] <mrig> I bet, still are the best way to store audio
[23:58:07] <deniska> nobody stores audio anymore, it's all spotify now :D
[23:58:16] <mrig> masters
[23:58:24] <immibis> theoretically a tape can be any length
[23:58:38] <immibis> there is no reason that all the tape has to be inside the drive
[23:58:38] <deniska> practically it should fit inside a casette :D
[23:58:51] <mrig> the original copy, even if recorded on digital, I bet that many archive with tape still.
[23:59:12] <mrig> it is used as a signal processing tool too, if you are rich enough.
[23:59:14] <deniska> I doubt audio tapes would be used for that
[23:59:41] <mrig> you may be surprised, it was still ten years ago.
[23:59:44] *** Quits: tkob (tkob@user/thekingofbandit) (Ping timeout: 252 seconds)
[23:59:56] <immibis> https://www.ibm.com/ibm/history/exhibits/storage/images/overlay/PH2401.jpg
