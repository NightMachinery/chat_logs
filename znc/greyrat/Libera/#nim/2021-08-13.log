[00:09:14] *** Quits: audiophile_ (~audiophil@user/audiophile) (Quit: Default Quit Message)
[00:29:45] *** Joins: beshr (~beshr@user/beshr)
[00:32:19] <FromDiscord> <j-james> What is the equivalent of `const float color[static 4]` in Nim?
[00:32:33] *** Joins: audiophile_ (~audiophil@user/audiophile)
[00:32:33] *** Quits: audiophile_ (~audiophil@user/audiophile) (Client Quit)
[00:32:45] <FromDiscord> <j-james> My best guess is `const color: array[4, float]` but I don't fully understand how `static` carries over
[00:33:39] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[00:34:35] <FromDiscord> <undersquire> In reply to @j-james "What is the equivalent": why is there a `static` in the first one
[00:35:25] <FromDiscord> <undersquire> your guess is correct, im unsure what the static does in the first one in that spot (is that C? if so ive never seen it used like that before)
[00:36:12] <FromDiscord> <undersquire> sent a code paste, see https://play.nim-lang.org/#ix=3vMh
[00:36:13] <FromDiscord> <undersquire> {.global.} is the equivelent of static in C
[00:37:11] <FromDiscord> <j-james> Ah, here's it in context
[00:37:23] <FromDiscord> <j-james> sent a code paste, see https://play.nim-lang.org/#ix=3vMi
[00:37:56] <FromDiscord> <undersquire> ive never seen static used like that before
[00:39:21] <FromDiscord> <undersquire> sent a code paste, see https://play.nim-lang.org/#ix=3vMj
[00:39:26] <FromDiscord> <undersquire> just a guess based on the C code, but that should be the equivelent
[00:44:28] <FromDiscord> <j-james> I see, thank you
[00:45:03] <FromDiscord> <j-james> What is `const` doing in the original C code? I'm not familiar with it on parameters
[00:50:39] <FromDiscord> <undersquire> its useless there
[00:50:47] <FromDiscord> <undersquire> i dont think it actually does anything in that code there
[00:51:47] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 245 seconds)
[01:01:25] <FromDiscord> <Ruggila> I think the original intented to color be unchangeable. In C, array access is just doing pointer arithmentic, so color is actually a pointer inside the clear() callback function. Now, C programmers often confuse how to make the pointer itself const, or the data where the pointer is pointing to const ...
[01:02:55] <FromDiscord> <Ruggila> and about the static in arrays in C99: see https://stackoverflow.com/questions/17559631/what-are-those-strange-array-sizes-and-static-in-c99 for examples and descriptions
[01:04:27] <FromDiscord> <Ruggila> or also here: https://stackoverflow.com/questions/3430315/what-is-the-purpose-of-static-keyword-in-array-parameter-of-function-like-char (basically. color is AT LEAST 4 elements long, and it is therefore also implicitly never NULL)
[01:13:53] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vMo
[01:14:48] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vMp
[01:15:27] <FromDiscord> <haxscramper> In reply to @j-james "What is the equivalent": Direct equvalent (not wrapper equvalent) would be just `array[4, float]`
[01:15:48] <FromDiscord> <haxscramper> Nim arguments are immutable by default, so you don't need to add anything here
[01:18:46] <FromDiscord> <System64 ~ Flandre Scarlet> @haxscramper alright I added sound player (both OPL3 emulation and GameMusicEmu), it works as expected, no crashes for now
[01:18:56] <FromDiscord> <undersquire> ah ok
[01:19:34] *** Quits: ecs (ecs@user/ecs) (Read error: Connection reset by peer)
[01:19:43] *** Joins: ecs (~ecs@d2evs.net)
[01:19:57] *** Quits: blackbeard420 (~blackbear@2600:3c03:e000:297::) (Quit: ZNC 1.8.2 - https://znc.in)
[01:20:07] *** ecs is now known as Guest780
[01:21:59] *** Guest780 is now known as ecs
[01:22:09] *** Joins: blackbeard420 (~blackbear@blackbeard420.me)
[01:22:18] *** Quits: ecs (~ecs@d2evs.net) (Changing host)
[01:22:18] *** Joins: ecs (~ecs@user/ecs)
[01:32:18] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[02:08:41] <FromDiscord> <System64 ~ Flandre Scarlet> > No stack traceback available↵> SIGSEGV: Illegal storage access. (Attempt to read from nil?)↵Ah it crashed
[02:13:04] <FromDiscord> <System64 ~ Flandre Scarlet> null pointer it seems
[02:30:51] *** Quits: max22- (~maxime@2a01cb0883359800dac1c33184607296.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[02:32:51] <FromDiscord> <lamersc.com 🐧> Anyone know how to limit available memory to program in windows?
[02:33:07] <FromDiscord> <lamersc.com 🐧> I’m trying to simulate an out of memory and attempt to handle it accordingly
[02:33:14] <FromDiscord> <lamersc.com 🐧> (edit) 04removed "an"
[02:33:32] <FromDiscord> <lamersc.com 🐧> I know how to do it on Ubuntu, but windows would be more convenient atm
[02:50:01] <FromDiscord> <undersquire> the only way I know is if you had a VM running windows and its ram set to like 2 GB max or something 😂
[02:50:13] <FromDiscord> <undersquire> there might be tools available for doing what your trying to test however
[03:03:45] <madprops> what's the point of "method" and why are  they limited to be used with objects?
[03:05:14] <FromDiscord> <undersquire> yeah i personally see no point to having the keyword `method`
[03:06:07] <FromDiscord> <undersquire> wait actually i think `method`s in nim relate to the type
[03:06:49] <FromDiscord> <undersquire> idk
[03:09:42] <FromDiscord> <zidsal> If you use method you get dynamic dispatch, which I think is the only reason to have it over a proc
[03:12:03] <FromDiscord> <undersquire> wdym dynamic dispatch
[03:12:15] <FromDiscord> <undersquire> like it calls the right one based on the type of object it is?
[03:15:17] <FromDiscord> <Dumb Dragon> Dynamic dispatch from what I recall means it's not as glitchy with inheritance. It's why in languages like C# you have to specify inheritable functions with "virtual". Let me see if I can find the article I read on it
[03:17:36] <FromDiscord> <zidsal> https://play.nim-lang.org/#ix=3vMV
[03:18:59] <FromDiscord> <zidsal> So in this example you can see that even thought we made a dog type as the variable is typed as animal it uses the method say from animal not dog. This is single dispatch. In dynamic dispatch the same code would call the dog say method not the animal method. dynamic dispatch has a small performance cost which is why it's not automatically enabled
[03:20:26] <FromDiscord> <undersquire> yeah
[03:20:37] <FromDiscord> <undersquire> ok then that makes sense
[03:49:15] <FromDiscord> <Ayy Lmao> What's the best way to deal with one header needing to be included before another? Are you forced to use `emit` in that case?
[03:54:58] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:15:41] <madprops> weird, if I send a number like 5 as an argument, which is received as var int, it complains 5 is not mutable
[04:17:33] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 268 seconds)
[04:18:43] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[04:19:02] <madprops> oh I guess var means mutate the original var outside the function
[04:19:11] <madprops> i thought it just allowed to change it inside the function
[04:20:26] <FromDiscord> <exelotl> nope, var arg affects the value outside the proc too, so you need to pass in something mutable
[04:24:06] *** Quits: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com) (Ping timeout: 272 seconds)
[04:24:24] *** Joins: Jjp137 (~Jjp137@2603-8000-2a01-3406-92fb-a6ff-fee2-6861.res6.spectrum.com)
[04:25:06] *** Quits: Helios (~dwaglemat@2001:470:69fc:105::5f8) (Ping timeout: 252 seconds)
[04:25:48] *** Quits: happycorsair[m] (~happycors@2001:470:69fc:105::205) (Ping timeout: 268 seconds)
[04:25:54] *** Quits: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1) (Ping timeout: 276 seconds)
[05:27:37] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[05:55:35] *** Joins: happycorsair[m] (~happycors@2001:470:69fc:105::205)
[06:07:02] <FromDiscord> <vevirit105>  https://media.discordapp.net/attachments/371759389889003532/875553502158528532/fd503064d92655844644f29f77fb4bbb.png
[06:07:17] <FromDiscord> <vevirit105>  https://media.discordapp.net/attachments/371759389889003532/875553559997980802/81067760_p0.png
[06:08:31] <FromDiscord> <vevirit105>  https://media.discordapp.net/attachments/371759389889003532/875553873727729664/sample-a5a114c6ddc515d6b861faf3813865c7.png
[06:40:30] *** Joins: Helios (~dwaglemat@2001:470:69fc:105::5f8)
[06:52:51] <FromDiscord> <impbox [ftsf]> if you want to mutate a variable passed in, but not mutate it outside, you can just declare in the function `var a = a` for example
[07:01:35] *** Joins: nixfreak_nim[m] (~reversem3@2001:470:69fc:105::33d1)
[07:16:38] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[08:02:04] <madprops> what is {'a', 'b'} ? seems to work like an array
[08:02:24] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[08:03:25] <nrds> <06Prestige99> A set
[08:04:23] <madprops> oh
[08:04:47] <madprops> so unique values
[08:08:29] <madprops> what could be the nicest way to get an array of a..z ?
[08:11:47] <madprops> I'm just doing a simple 'collect'
[08:12:04] <FromDiscord> <Elegantbeef> int -\> char or char -\> array?
[08:14:06] <FromDiscord> <Elegantbeef> cause you can do `var a: array['a'..'z', int]`
[08:16:00] <madprops> oh nice
[08:17:55] <madprops> don't think that works
[08:18:11] <madprops> oh nvm
[08:19:42] <madprops> hmm
[08:19:52] <madprops> not sure how to initialize that
[08:20:16] <madprops> with a..z
[08:20:44] <madprops> 'a', 'b', 'c' ...
[08:20:59] <FromDiscord> <Elegantbeef> `for c in 'a'..'z'`
[08:21:12] <madprops> yeah
[08:21:24] <madprops> was wondering if there was a oneliner
[08:21:38] <FromDiscord> <Elegantbeef> Init it to what though?
[08:22:47] <madprops> a seq of chars
[08:22:50] <madprops> or array i mean
[08:22:59] <FromDiscord> <lamersc.com 🐧> In reply to @Elegantbeef "Init it to what": abcdefghijklmnopqrstuvwxyz 🕶️
[08:23:16] <FromDiscord> <Elegantbeef> I dont quite know what you mean, you want an array of characters?
[08:23:25] <madprops> yeah from a to z
[08:23:52] <madprops> oh i guess i could just use a string
[08:23:54] <madprops> :)
[08:24:08] <madprops> but i would still want to generate that
[08:24:12] <madprops> instead of copying a long line
[08:24:48] <madprops> array is better though 
[08:25:40] <madprops> also seems 'collect' is new
[08:25:43] <madprops> since it's not available on 1.0
[08:28:10] <madprops> https://play.nim-lang.org/#ix=3vNL
[08:30:28] <FromDiscord> <Elegantbeef> There isnt a range to array method so this is pretty much the best you can do https://play.nim-lang.org/#ix=3vNM
[08:33:19] <madprops> didn't know you could return from a block like that, interesting
[08:33:32] <FromDiscord> <Elegantbeef> All flow control can be an expression
[08:35:20] <madprops> I knew about if/else
[08:35:26] <madprops> but didn't think of block
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[09:33:15] *** Quits: flynn (~mcbloch@user/flynn) (Read error: Connection reset by peer)
[09:34:21] *** Joins: flynn (~mcbloch@user/flynn)
[11:02:48] *** Joins: max22- (~maxime@2a01cb0883359800d08992febb3e164d.ipv6.abo.wanadoo.fr)
[11:14:49] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[11:52:32] <PMunch> Hmm, started looking at eink monitors again
[12:05:22] *** Joins: xet7 (~xet7@user/xet7)
[12:12:08] <PMunch> Every vacation I find myself wanting a small eink laptop which would work in direct sunlight, have insane battery life, and would allow me to code and use simple services on the go
[12:13:04] <FromDiscord> <Elegantbeef> Didnt realize there we eink monitors for external screens
[12:13:27] <FromDiscord> <Rika> There’s plenty
[12:13:48] <FromDiscord> <Rika> I own an e ink tablet and it’s pretty amazing for reading manga or books
[12:14:27] <PMunch> Yeah I have a small Kinda that's great for reading books. But I'd like something with an input :P
[12:15:49] <FromDiscord> <Rika> Kinda hahaha
[12:16:19] <FromDiscord> <Rika> They’re too niche and being usurped by other technologies with drawbacks other people are more fine with
[12:16:49] <FromDiscord> <Rika> Like faster refresh and colour but worse battery life and daylight visibility
[12:17:15] <FromDiscord> <Rika> But I think the manufacturer of the displays is called Dasung
[12:17:38] <FromDiscord> <Rika> No laptop for the aforementioned issues
[12:17:56] <FromDiscord> <Rika> Probably just easier to get a display and turn the main one off lol
[12:18:26] <FromDiscord> <Elegantbeef> pmunch has a 3D printer so clearly he'll modify his laptop to work with one of them
[12:23:33] <FromDiscord> <System64 ~ Flandre Scarlet> > SIGSEGV: Illegal storage access. (Attempt to read from nil?)↵File not found or null pointer?
[12:25:50] <FromDiscord> <Rika> Null pointer
[12:25:55] <FromDiscord> <Rika> Which could mean file not found lol
[12:27:07] <PMunch> @ElegantBeef, there is even a full 25.3" screen from Dasung that's coming at the end of the year. And the new ones have surprisingly good refresh rates, but still no colours
[12:27:22] <FromDiscord> <Rika> Well is colour a concern for you
[12:27:23] <PMunch> There are small ones with 7 colour displays, which would be great for syntax highlighting and such
[12:27:52] <PMunch> Colour would be nice, but definitely not a necessity
[12:28:04] <FromDiscord> <Rika> Well you could just go with underline bold italics and permutations
[12:28:39] <FromDiscord> <Rika> If you’re a bit crazy maybe also strikethrough
[12:28:45] <PMunch> ElegantBeef, I don't think I'd want to try and sacrifice my laptop for something like this. But there is a guy who is in the process of replacing the panel on his T480 (same laptop I have) with an eink display
[12:29:09] <PMunch> @Rika, for sure. I guess with a special purpose editor I could even do different fonts
[12:29:47] <FromDiscord> <Rika> Sounds like it’s time to make one
[12:29:50] <PMunch> @System64, hard to tell what's wrong without any code
[12:30:11] <PMunch> There are some small eink screens on ebay that's RPi compatible
[12:30:29] <PMunch> 9.7" and 10.3", which might be big enough for what I have in mind
[12:31:07] <FromDiscord> <Rika> That’s just as big as my tablet though
[12:31:21] <PMunch> Which tablet?
[12:31:28] <FromDiscord> <Rika> Some tablets can be used as monitors
[12:31:36] <FromDiscord> <Rika> Some Onyx Boox tablet
[12:31:56] <PMunch> Hmm, interesting
[12:32:20] <PMunch> I have the 6" Kindle, that would be a bit small. But apparently there is some jailbreak software that can turn it into a terminal
[12:32:31] <PMunch> But I want something I can customise a bit more
[12:32:47] <FromDiscord> <System64 ~ Flandre Scarlet> How can I disable the GC please?
[12:33:02] <FromDiscord> <Rika> Why?
[12:33:14] <PMunch> --gc:none
[12:33:25] <PMunch> @Rika, was that why for me or System64?
[12:33:35] <FromDiscord> <System64 ~ Flandre Scarlet> I try to figure out why I have a null pointer
[12:33:35] <FromDiscord> <Rika> System
[12:33:41] <FromDiscord> <System64 ~ Flandre Scarlet> ah thanks
[12:33:55] <FromDiscord> <Elegantbeef> GC doesnt magically give a null pointer
[12:33:57] <PMunch> @System64, hint: it's not the GC :P
[12:34:25] <PMunch> Yeah it's definitely not the GC giving you a null pointer exception, unless you're doing something really exotic
[12:34:35] <FromDiscord> <Rika> It could be they are using the memory allocation APIs wrong
[12:34:55] <FromDiscord> <Elegantbeef> or you know
[12:35:13] <FromDiscord> <Elegantbeef> !eval var a\: ref int; echo a[]
[12:35:16] <NimBot> Compile failed: /usercode/in.nim(1, 9) Error: ':' or '=' expected, but got 'keyword ref'
[12:35:37] <FromDiscord> <Rika> Yes but I assume that would have been weeded out early on the debugging process
[12:35:39] <PMunch> I would call that exotic in Nim-land
[12:35:46] <PMunch> Most people never has to deref anything
[12:35:49] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Elegantbeef "!eval var a\: ref": what's that?
[12:36:05] <FromDiscord> <Rika> I guess I’m not part of most people
[12:36:51] <FromDiscord> <proud linux user> :susPog:
[12:38:26] <FromDiscord> <Elegantbeef> That's purposely dereferencing a nil reference
[12:44:16] <FromDiscord> <System64 ~ Flandre Scarlet> even with GC off it crashes
[12:44:38] <FromDiscord> <Elegantbeef> It's a nil reference the GC isnt causing it
[12:45:30] <PMunch> Yeah, no big surprise there
[12:45:34] <FromDiscord> <System64 ~ Flandre Scarlet> and can a nil reference be caused by an extern lib?
[12:45:51] <FromDiscord> <Elegantbeef> It can be caused by anything that attempts to dereference a nil pointer
[12:45:52] <PMunch> Of course, if it's doing something weird, or you're passing it weird data
[12:54:03] <PMunch> Hmm, how easy would it be to interface with a keyboard in an old laptop?
[12:54:31] <PMunch> I've got a bunch of old laptops in the basement, so I could definitely reuse one of those as a case
[12:54:33] <FromDiscord> <Elegantbeef> They're usually designed to be interfaced with human hands, so easily! 😜
[12:55:39] <PMunch> Haha :P
[12:56:04] <PMunch> Hmm, I mean I have already written keyboard firmware. So if I just get the pins of the matrix I should be able to fairly easily do it :P
[12:56:25] <FromDiscord> <Elegantbeef> depends on the model of course but some old laptops just used ps/2 for trackpad/keyboard
[12:56:55] <PMunch> Hmm, I have some really old ones as well
[12:57:11] <PMunch> And I think they even have 4:3 monitors which is the same as the e-ink screen
[12:58:41] <PMunch> Problem with old laptops is that they are a bit chunky..
[13:03:10] <PMunch> I mean I have two old Lifebook B2154 laptops that might be perfect for this
[13:09:44] <PMunch> It has a 10.4" screen
[13:10:58] *** Quits: xet7 (~xet7@user/xet7) (Ping timeout: 272 seconds)
[13:11:17] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/blob/master/testing/nim/compilerapi/nims_template.nim#L62
[13:12:58] <FromDiscord> <haxscramper> [enthus1ast](https://matrix.to/#/@sn0re:matrix.code0.xyz)\:  Code before that is just a boilerplate that does not really have to change much, except for `conf.structuredErrorHook =` part - that's where you add your error handler, and I assume you would want something better than just `assert false`
[13:13:32] <FromDiscord> <haxscramper> Then you just pass ast to `processModule3` and it evaluates things in nimscript
[13:15:03] <FromDiscord> <haxscramper> `include compiler/passes` is needed due to `processTopLevelStmt` - it is not exported. There is an older version of this script where I tested things from code script and from node, (so you can eval text or eval AST) - https://github.com/haxscramper/hack/commit/3881ae5be6b63e7843299061a81a30b970f4b9bf#diff-b92c209186bfda7a25aae8b0d1fb3d876b9fe7e5f28007fbe2e9fcd4804d6937R131-R183
[13:16:01] <FromDiscord> <haxscramper> [Edit](https://discord.com/channels/371759389889003530/371759389889003532/875660267764187136): https://github.com/haxscramper/hack/blob/d2324554cff3d9c3401715700e67383bb4474771/testing/nim/compilerapi/nims_template.nim#L62
[13:22:59] *** Joins: xet7 (~xet7@user/xet7)
[13:32:27] <FromDiscord> <System64 ~ Flandre Scarlet> @haxscramper even with the rewritten version of my program it crashes
[13:34:41] <FromDiscord> <haxscramper> https://github.com/haxscramper/hack/commit/ac6941b3058d6cc36a4205c575e889ebd13ea30f also example of adding custom proc
[13:36:33] <FromDiscord> <haxscramper> In reply to @System64 "<@!608382355454951435> even with the": I didn't say rewriting it would make crash go away. Instead I suggested you to rewrite it in order to make it easier to spot the difference
[13:36:55] <FromDiscord> <haxscramper> So, if it crashes, then rewrite is not exact, and you need to figure out what changed
[13:37:37] <FromDiscord> <System64 ~ Flandre Scarlet> maybe the problem are from my bindings so I'll inspect that
[13:38:44] <FromDiscord> <System64 ~ Flandre Scarlet> I don't think it's from SDL (it's not from me and it's supposed to be stable)
[13:40:12] <FromDiscord> <haxscramper> You used `.cdecl, importc, dynlib: tilenginedll.` for bindings, so it makes sense to just look at the C code
[13:40:54] <FromDiscord> <haxscramper> You can "inspect" your binings however you like, but if you want to really see what is going on, and what is different, you should just take end result and compare them
[13:42:24] <FromDiscord> <System64 ~ Flandre Scarlet> the binding is based on the header file
[13:44:20] <FromDiscord> <haxscramper> whatever
[13:45:38] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3vRP
[13:45:54] <FromDiscord> <haxscramper> yes
[13:45:55] <FromDiscord> <System64 ~ Flandre Scarlet> (edit) "https://play.nim-lang.org/#ix=3vRP" => "https://play.nim-lang.org/#ix=3vRQ"
[13:46:50] <FromDiscord> <System64 ~ Flandre Scarlet> the thing is TLN_VideoCallback is a pointer in C
[13:47:48] <FromDiscord> <haxscramper> `typedef void(TLN_VideoCallback)(int scanline);` means `declare TLN_VideoCallback as pointer to function (int) returning void`
[13:48:09] <FromDiscord> <haxscramper> Nim `TLN_VideoCallback = proc(cint) {.cdecl.}` has the same effect
[13:48:23] <FromDiscord> <haxscramper> cdecl procvar is a pointer to proc
[13:48:41] <FromDiscord> <haxscramper> closure procvar is different, but if you have `{.cdecl.}` it would mean the same thing
[13:50:53] <FromDiscord> <System64 ~ Flandre Scarlet> sent a code paste, see https://play.nim-lang.org/#ix=3vRR
[13:51:50] <FromDiscord> <haxscramper> yes
[13:54:07] <FromDiscord> <System64 ~ Flandre Scarlet> So I don't know what's going on :/
[13:54:38] <FromDiscord> <haxscramper> So C code looks identical?
[13:54:58] <PMunch> What's the type of that callback?
[13:55:00] <FromDiscord> <haxscramper> `s/looks/is`
[13:55:09] <FromDiscord> <haxscramper> In reply to @PMunch "What's the type of": `void(TLN_VideoCallback)(int scanline);`
[13:55:23] <FromDiscord> <haxscramper> And it was wrapped as`proc (scanline: cint) {.cdecl, gcsafe.}`
[13:55:25] <FromDiscord> <System64 ~ Flandre Scarlet> my binding is accurate to the header so yeah
[13:55:30] <FromDiscord> <haxscramper> ffs
[13:55:51] <FromDiscord> <haxscramper> I'm sorry, but do you read what I just said? You need to look at the generated C
[13:56:11] <PMunch> That looks like it's correct
[13:56:11] <FromDiscord> <haxscramper> not just visuall inspect bindings and say "aha, it is the same so everything else is also identical"
[13:56:40] <FromDiscord> <haxscramper> it is highly unlikely the error is in the bindings
[13:58:01] <FromDiscord> <System64 ~ Flandre Scarlet> This is the generated C file https://media.discordapp.net/attachments/371759389889003532/875672032245846046/generated.c
[13:58:58] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[14:01:16] <FromDiscord> <haxscramper> yes, I know. I also mentioned you can use `--stacktrace:off` and `--linestrace:off` to get rid of `nimfr_("<%", "C:\\nim-1.4.8\\lib\\system\\comparisons.nim");` that pollutes everything
[14:01:35] <FromDiscord> <System64 ~ Flandre Scarlet> ah yeah, let me do that
[14:09:08] <FromDiscord> <System64 ~ Flandre Scarlet> normally it's cleaned up https://media.discordapp.net/attachments/371759389889003532/875674826466033745/generated.c
[14:27:09] <FromDiscord> <fae> Today has been fun. Figured out how to build enet, load up the dylib, connect a host and client using  https://github.com/c0ntribut0r/cat-400/blob/master/c4/lib/enet/enet.nim and got peer messages sending back and forth in response to keypress with SDL. Now to continue with multiplayer pong 😄 . Nim makes things very easy.
[14:28:05] <FromDiscord> <fae> The biggest thing that tripped me up was figuring out how to cast a `pointer` back to a string
[14:31:15] *** Joins: Vladar (~Vladar@46.162.2.53)
[14:32:17] <FromDiscord> <Paupi woodberg> In reply to @System64 "normally it's cleaned up":  https://media.discordapp.net/attachments/371759389889003532/875680650894671902/Screenshot_20210813-110136.png
[14:33:48] <FromDiscord> <System64 ~ Flandre Scarlet> you can't simply execute the code
[14:34:02] <FromDiscord> <Paupi woodberg> In reply to @System64 "you can't simply execute": Why
[14:34:05] <FromDiscord> <Paupi woodberg> ?
[14:34:34] <FromDiscord> <System64 ~ Flandre Scarlet> it's not a main function
[14:35:37] <FromDiscord> <Paupi woodberg> O!↵Am not really good in c!
[14:53:30] <PMunch> fae, how are you casting a pointer to string, that's potentially something that could trip you up and give you segfaults
[14:54:31] <PMunch> There is a command that generates a build script for the C output if you want to build the C sources. I think it's --genScript
[14:55:17] <FromDiscord> <Rika> Who is Fae
[14:55:30] <FromDiscord> <Rika> Ah I missed their message nvm
[14:57:25] <FromDiscord> <fae>  https://media.discordapp.net/attachments/371759389889003532/875686976496492574/Screen_Shot_2021-08-13_at_3.27.07_AM.png
[14:57:42] <FromDiscord> <Rika> Ah that is fine
[14:57:42] <FromDiscord> <fae> I'm sure it's unsafe, but not sure what else to do with a `ptr uint8`
[14:58:07] <FromDiscord> <Rika> Well you cannot avoid unsafe when interfacing with C (unless you aren’t)
[14:58:19] <FromDiscord> <dom96> ideally you should write a safe wrapper around this to isolate the unsafety
[14:58:34] <FromDiscord> <dom96> depends what you're doing though
[14:59:50] <FromDiscord> <fae> Just tinkering really, started messing with Nim only recently. I was happy the enet wrapper even worked at all.
[15:01:08] <FromDiscord> <fae> I had never used enet before directly (only indirectly love2d and godot) so being able to get it working so easily says a lot about how easy Nim makes it.
[15:01:23] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:10:32] <emery> if I put a C++ object into a `ref` type, is the constructor called when the Nim `ref object` is created ? is there simple way to force the constructor to be called?
[15:11:53] <FromDiscord> <haxscramper> you need to use placement new
[15:12:30] <emery> haxscramper: what is that?
[15:17:17] <emery> c++ is such a horrible language
[15:17:19] <PMunch> It would be nice if Nim had a built-in object type for cstring with size that could work like a string, was assumed to not be freed while you're using it (manually managed by the user), and didn't require copying..
[15:17:40] <PMunch> Something like a special case seq that didn't interact with the GC at all..
[15:19:50] <FromDiscord> <haxscramper> In reply to @emery "<@608382355454951435>: what is that?": C++ object can call constructor on already allocated memory
[15:19:51] <FromDiscord> <haxscramper> https://wandbox.org/permlink/qqpPSMM468EpLIpL
[15:20:05] <FromDiscord> <haxscramper> Nim allocates memory with `ref` and you call placement new here
[15:20:18] <FromDiscord> <haxscramper> Without placement new it will just allocate, but constructor won't be called
[15:21:06] <FromDiscord> <haxscramper> Though it seems like `new(result)` is sufficient, and destructor is called correctly
[15:22:10] <FromDiscord> <haxscramper> Nim `new` just does `    result = (Struct)newObj( (&NTIDzqc1yILohvRHG0NLsQ9aXw_), sizeof(Struct));`
[15:23:12] <FromDiscord> <haxscramper> In reply to @haxscramper "Though it seems like": Though I would not be so sure about that, and it is probably safer to still use destructor,
[15:23:17] <FromDiscord> <haxscramper> Or look into it in more detailk
[15:25:53] <FromDiscord> <haxscramper> `proc newImportAux() {.header: "<new>", importcpp: "//".}` is needed because placement new is declared in this header, but I can't use header and provide implementation in `newT`
[15:26:08] <FromDiscord> <haxscramper> This is a hack, i don't know what would be the correct workaround
[15:27:33] <FromDiscord> <haxscramper> `importcpp: "((void)0)".` is probably better
[15:29:21] <emery> haxscramper: I'll work something out, thanks
[15:29:45] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Read error: Connection reset by peer)
[15:31:49] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:36:16] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[15:37:21] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Read error: No route to host)
[15:37:41] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[15:41:43] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[15:50:00] <FromDiscord> <enthus1ast> sent a code paste, see https://play.nim-lang.org/#ix=3vSi
[15:50:01] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[15:50:50] <FromDiscord> <enthus1ast> i must carefully study the code you sent, have just skimmed through it yet.
[15:51:49] <FromDiscord> <haxscramper> Yes, I also wanted to addapt jinja templates, so it is naturally similar
[15:52:13] <FromDiscord> <enthus1ast> but you want to do it dynamic?
[15:52:29] <FromDiscord> <haxscramper> It would be possible to write an implementation that allows to have both dynamic and static templates
[15:52:40] <FromDiscord> <haxscramper> It is more involved though
[15:53:02] <FromDiscord> <haxscramper> There are actually three ways to do this
[15:53:40] <FromDiscord> <haxscramper> ● Nim macro that generates template code↵● Compiler-based logic that generates template code (not really different from macro)↵● Compiler-based, but directly evaluates code - this one allows for no-recompile template changes
[15:55:08] <FromDiscord> <haxscramper> I'm after latter one because it does not require user to import whole haxdoc source code in their template (\~200k sloc including all dependencies)
[15:55:35] <FromDiscord> <haxscramper> But at the same time compiled template is faster, so I can provide couple of default presets
[15:55:53] <FromDiscord> <haxscramper> For now I just wanted to show you an example of how dynamic one can be done
[15:55:58] <FromDiscord> <haxscramper> So you would have full overview of the possibilities
[15:57:12] <FromDiscord> <haxscramper> If you want I can think hyperhybrid one that allows to switch between all three solutions in a single code base
[15:58:02] <FromDiscord> <haxscramper> At least right now I feel like it would be possible
[15:59:08] <FromDiscord> <enthus1ast> yes i also had nr3 in mind, but it must be possible to use any nim functions also the ffi ones, i guess it could be possible to make ffi functions available in a custom compiler
[16:00:24] <FromDiscord> <enthus1ast> so one must be able to define functions that are later available in the templates, then maybe the compiler lib must be then compiled once and then is able to evaluate the templates dynamically
[16:01:41] <FromDiscord> <enthus1ast> yes, i'm looking forward to study your code
[16:05:33] <FromDiscord> <PsychoClay> is there a way to make `db_sqlite.exec` go faster, currently its takes ~17 seconds for about 7k inserts, on python this takes like half a second
[16:05:54] <FromDiscord> <haxscramper> Yes, that's how main nim vm does it -  just tons of `registerCallback()` calls for all procs https://github.com/nim-lang/Nim/blob/devel/compiler/vmops.nim#L69You can do https://en.wikipedia.org/wiki/Opaque_pointer by exposing opaque handlers to the objects, and making all template logic function via proc calls
[16:06:14] <FromDiscord> <haxscramper> nim just binds to sqlite3, so all optimizations apply equally https://avi.im/blag/2021/fast-sqlite-inserts/↵(@PsychoClay)
[16:06:31] <FromDiscord> <haxscramper> You can also use prepared queries etc.
[16:06:48] <FromDiscord> <haxscramper> I would start with prepared queries
[16:06:56] <FromDiscord> <PsychoClay> il try that
[16:07:01] <FromDiscord> <haxscramper> I suppose python implementation does this implicitly, or has default connection configurations
[16:08:48] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vSo
[16:09:39] <FromDiscord> <haxscramper> or `evalTemplateWithDb(db, getPrecompiledTemplate(hptNimDocStyle #[ or hptRustDocStype, or hptDoxygenStyle ]#)`
[16:10:02] <FromDiscord> <haxscramper> Latter one is already possible with your current implementation
[16:10:32] <FromDiscord> <haxscramper> I just need to find some time to test it
[16:11:15] <FromDiscord> <enthus1ast> @PsychoClay\:↵And maybe disable all foreign key checks\:↵PRAGMA ignore\_check\_constraints = boolean;and also insert your stuff in a transaction, then the index will be generated only once i guess
[16:14:30] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[16:22:01] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
[16:23:45] <FromDiscord> <PsychoClay> got it down to 8 secs
[16:24:13] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[16:27:40] <FromDiscord> <PsychoClay> now the slow part seems to be `strutils.replace`
[16:29:02] <FromDiscord> <PsychoClay> ok nvm
[16:29:27] <FromDiscord> <PsychoClay> it was 8 sec with vallgrind 0.6 without
[16:34:50] *** Quits: max22- (~maxime@2a01cb0883359800d08992febb3e164d.ipv6.abo.wanadoo.fr) (Ping timeout: 252 seconds)
[16:35:40] *** Joins: rockcavera (~rc@192.12.115.201)
[16:35:41] *** Quits: rockcavera (~rc@192.12.115.201) (Changing host)
[16:35:41] *** Joins: rockcavera (~rc@user/rockcavera)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:44:41] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[16:46:10] <FromDiscord> <System64 ~ Flandre Scarlet> @haxscramper Alright I found something very weird↵with ``--stacktrace:off --linetrace:off``, no crash, if I remove theses arguments, crashes
[16:46:48] <FromDiscord> <haxscramper> Crashes as in `SEGFAULT`, or you just get an exception?
[16:47:19] <FromDiscord> <System64 ~ Flandre Scarlet> ``Error: execution of an external program failed: 'C:\Users\nicol\Documents\programmation\testNim\newTest.exe '``
[16:47:24] <FromDiscord> <System64 ~ Flandre Scarlet> just that
[16:48:52] <FromDiscord> <System64 ~ Flandre Scarlet> and sometime the ``SIGSEGV: Illegal storage access. (Attempt to read from nil?)`` error
[16:52:57] <FromDiscord> <System64 ~ Flandre Scarlet> ``nim compile -r --nimcache:"./cache" --stacktrace:off --linetrace:off newTest.nim`` keeps runtime checks right?
[16:54:06] <FromDiscord> <haxscramper> yes, but C library does not have any
[16:54:14] <FromDiscord> <haxscramper> tilengine
[16:54:34] <FromDiscord> <System64 ~ Flandre Scarlet> yeah? what happens with Tilengine?
[16:55:01] *** Joins: rockcavera (~rc@user/rockcavera)
[16:56:04] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 268 seconds)
[16:56:34] <FromDiscord> <haxscramper> nothing
[16:56:46] <FromDiscord> <haxscramper> you use dynamic C dll with no runtime checks
[16:56:57] <FromDiscord> <haxscramper> Therefore it won't magically add runtime checks
[17:01:34] <FromDiscord> <System64 ~ Flandre Scarlet> ah I'm conscious of that, but it's weird it crashes if I remove theses  2 args
[17:05:23] <FromDiscord> <System64 ~ Flandre Scarlet> But I like how well Nim interops with C
[17:06:16] <FromDiscord> <System64 ~ Flandre Scarlet> you can even import raw C code
[17:08:36] <FromDiscord> <System64 ~ Flandre Scarlet> what'ss the difference between stacktrace and linetrace?
[17:12:35] <FromDiscord> <haxscramper> `stacktrace` adds calls to `nimfr_` and `popFrame()` at the start/end of each function↵`linetrace` without stracktrace does not do anyting, but if both are enabled calls to `nimln_(` are added so C code could provide exception positions that correspond to the nim code
[17:13:21] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vSB
[17:14:18] <FromDiscord> <System64 ~ Flandre Scarlet> Ah I see, but I dunno why they make my program crashing
[17:19:03] *** Joins: arkurious (~arkurious@user/arkurious)
[17:21:05] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[17:26:03] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Read error: No route to host)
[17:26:25] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[17:36:20] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 272 seconds)
[17:40:02] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Remote host closed the connection)
[17:44:44] *** Joins: PMunch (~PMunch@vpn.dualog.com)
[18:22:48] <FromDiscord> <Rika> might be a timing thing
[18:32:30] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @Rika "might be a timing": wdym?
[18:33:25] <FromDiscord> <Rika> wait this isnt threaded so maybe a memory layout thing
[18:33:28] <FromDiscord> <Rika> ?
[18:33:40] <FromDiscord> <Rika> well its one of those "debug works release doesnt" kinda issues
[18:34:19] <FromDiscord> <System64 ~ Flandre Scarlet> ah so it's Nim's fault?
[18:35:28] <PMunch> I had a weird issue like that with using a crypto library to read Keepass files
[18:35:40] <PMunch> It works perfectly in debug mode, but release mode breaks it
[18:37:03] *** Joins: max22- (~maxime@2a01cb08833598008129f6300dad089b.ipv6.abo.wanadoo.fr)
[18:37:16] *** Quits: PMunch (~PMunch@vpn.dualog.com) (Quit: Leaving)
[18:37:19] <FromDiscord> <System64 ~ Flandre Scarlet> In reply to @PMunch "It works perfectly in": Ah let me try in release
[18:40:07] <FromDiscord> <Rika> In reply to @System64 "ah so it's Nim's": no, its just one of those odd bugs that happen in pretty much any lang maybe save for rust
[18:40:21] <FromDiscord> <Rika> no, im sure rust has these issues as well
[18:40:39] <FromDiscord> <System64 ~ Flandre Scarlet> but why this bug occurs?
[18:40:56] <FromDiscord> <System64 ~ Flandre Scarlet> and I use callback functions, it's supposed to be threaded no?
[18:41:09] <FromDiscord> <konsumlamm> "it"?
[18:41:38] <FromDiscord> <System64 ~ Flandre Scarlet> callbacks
[18:46:39] <FromDiscord> <konsumlamm> and wdym by "supposed to be threaded"?
[18:53:51] <FromDiscord> <System64 ~ Flandre Scarlet> executed in parallel
[18:56:10] <FromDiscord> <Yardanico> In reply to @System64 "and I use callback": if tilengine doesn't run the callbacks on the same thread as your nim program and you don't use arc/orc you'll need to call setupForeignThreadGC at the start of any callback you pass to tilengine
[18:56:48] <FromDiscord> <Yardanico> although nowadays i'd just recommend you to use orc
[18:57:14] <FromDiscord> <System64 ~ Flandre Scarlet> what's the difference between Arc and Orc?
[18:57:25] <FromDiscord> <Yardanico> orc is arc with a cycle collector (so it can deal with cycles)
[18:57:53] <FromDiscord> <Yardanico> https://nim-lang.org/blog/2020/10/15/introduction-to-arc-orc-in-nim.html↵https://nim-lang.org/blog/2020/12/08/introducing-orc.html
[19:01:36] <FromDiscord> <System64 ~ Flandre Scarlet> I'll try that
[19:37:16] <FromDiscord> <System64 ~ Flandre Scarlet> But why it works without tracestack and traceline ?
[19:49:49] <FromDiscord> <haxscramper> probably due to some strackframe context that is not properly handled when callback is executed by another thread
[19:50:24] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[20:07:53] *** Quits: Vladar (~Vladar@46.162.2.53) (Remote host closed the connection)
[20:08:55] *** Joins: KurtGodel (~AdiIRC@180.150.11.50)
[20:32:27] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[20:48:15] <FromDiscord> <System64 ~ Flandre Scarlet> It crashes with --gc:orc
[20:58:45] <FromDiscord> <Ayy Lmao> sent a code paste, see https://play.nim-lang.org/#ix=3vTW
[20:58:57] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[20:59:47] *** Joins: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net)
[21:00:19] <FromDiscord> <Rika> use `WideCString`
[21:02:02] <FromDiscord> <Ayy Lmao> Interesting, didn't know about that type. How do I go about assigning a nim string to it? `var test: LPCWSTR = "Test"` doesn't work when I change it
[21:02:37] <FromDiscord> <Rika> `var test: LPCWSTR = newWideCString "Test"`?
[21:03:23] <FromDiscord> <Ayy Lmao> Sweet that seems to work. Thanks!
[21:03:59] <FromDiscord> <Ayy Lmao> Out of curiosity, would making a converter for that be considered a bad idea?
[21:05:00] <FromDiscord> <Rika> that's your call
[21:06:22] <FromDiscord> <Ayy Lmao> Also I've been wondering, there are some types that are imported with `system`, like `UncheckedArray` and `WideCString` that disobey the convention of nim builtin types starting with lower case. Is there a reason for this?
[21:06:57] *** Quits: Pyautogui (~Pyautogui@108-216-110-132.lightspeed.sndgca.sbcglobal.net) (Quit: Connection closed)
[21:08:49] <FromDiscord> <Rika> because theyre not "builtin" types
[21:10:07] <FromDiscord> <Ayy Lmao> So they are essentially made up of builtin types instead of being builtin themselves?
[21:10:56] <FromDiscord> <Ayy Lmao> Oh I found it in the nim source as `WideCString = ptr UncheckedArray[Utf16Char]`
[21:11:00] <FromDiscord> <Ayy Lmao> So that makes sense
[21:48:16] <madprops> does nim has that "feature" of rust where it caches stuff after builds, making some directories huge?
[21:48:30] <madprops> have to do 'cargo clean' after a while
[21:48:34] <madprops> or it grows to gigabytes
[21:49:07] <madprops> so far it seems only rust projects were huge like that
[21:49:30] <FromDiscord> <Rika> nim binaries are not characteristically large so even if it did it probably wouldnt grow as large
[21:49:47] <FromDiscord> <Rika> i believe the cache actually gets wiped periodically
[21:51:40] <FromDiscord> <islem> hi
[21:51:51] <FromDiscord> <rxx> @islem @islem hi cupcakes
[21:52:04] <FromDiscord> <islem> you know were in a professional discord server, you should meme here
[21:52:11] <FromDiscord> <islem> (edit) "were" => "we're"
[21:52:17] <FromDiscord> <islem> (edit) "should" => "shouldn't"
[21:52:18] <FromDiscord> <rxx> What
[21:52:23] <FromDiscord> <rxx> Idc
[21:52:43] <FromDiscord> <islem> ok lemme just free() your life real quick
[21:55:08] <FromDiscord> <Rika> okay
[21:55:12] <FromDiscord> <Gabryx86_64> In reply to @islem "you know we're in": he did in the osdev server too
[21:55:46] <FromDiscord> <rxx> Hi cupcakes @Gabryx86_64 😘 😘 😘 🥰
[21:55:56] <FromDiscord> <Gabryx86_64> please stop
[21:57:25] <FromDiscord> <islem> oh god
[22:10:38] *** Joins: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca)
[22:18:40] <FromDiscord> <haxscramper> `Error: typechecked nodes may not be modified` how can I get `typed` proc in the pragma, and then change its implementation?
[22:19:15] <FromDiscord> <haxscramper> Should I just `copyNimTree` whole implementation or there is simpler way around this?
[22:35:53] *** Quits: lain (~lain@172.16.254.xxx) (Ping timeout: 248 seconds)
[22:37:05] *** Joins: lain (~lain@172.16.254.xxx)
[22:49:13] <FromDiscord> <Sabena Sema> even with experimental:views I can't have a view type as a subobject of a record right?
[22:51:11] <madprops> is 1.4.0 still the stable version?
[22:51:36] <FromDiscord> <haxscramper> 1.4.8
[22:51:46] <FromDiscord> <haxscramper> I think you should be able to↵(@Sabena Sema)
[22:51:50] <madprops> hmm if I do 'choosenim stable' it says it's already at stable
[22:51:58] <FromDiscord> <haxscramper> (when they are ready)
[22:52:18] <FromDiscord> <Sabena Sema> and if I do I can't rebind the view type after creating said record? (I can't reassign to the variable)
[22:53:21] <FromDiscord> <haxscramper> `choosenim update stable`↵(<@709044657232936960_madprops=5b=49=52=43=5d>)
[22:53:23] <FromDiscord> <haxscramper> I'm not sure what you mean. If you have `field: openarray[T]` then you would be able to assign to it, like any other field
[22:53:47] <FromDiscord> <haxscramper> `openarray[T]` would be a start/end pointer, so nothing prevents you from assigning to it
[22:53:50] <madprops> oh I needed 'choosenim update stable'
[22:56:29] <FromDiscord> <haxscramper> Actually it works now
[22:56:32] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vUx
[22:57:06] <FromDiscord> <haxscramper> Not with `var openarray[int]` ` error: request for member ‘Field0’ in something not a structure or union test_prog_13.oa.Field0 = (NI)s1_prog_7->data+(((NI) 0)); test_prog_13.oa.Field1 = (((NI) 2))-(((NI) 0))+1;`
[22:57:37] <FromDiscord> <Elegantbeef> try with `--newRuntime` or `arc/orc`
[22:57:55] <FromDiscord> <Elegantbeef> I know in my experience toying with them the old runtime did not add enjoyment
[22:58:52] <FromDiscord> <haxscramper> `nim r --newRuntime --gc:arc test.nim` same issue
[23:00:01] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vUz
[23:00:03] <FromDiscord> <haxscramper> But not object with a variable
[23:00:20] <FromDiscord> <haxscramper> Fails with codegen
[23:00:23] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vUA
[23:00:40] <FromDiscord> <haxscramper> Probably a bug, and I think I've seen this somewhere
[23:01:51] <FromDiscord> <haxscramper> nope, at least nothing tagged as "view types"
[23:04:19] <FromDiscord> <undersquire> is it possible to `raise` values that are not objects of Exception ?
[23:05:09] <FromDiscord> <leorize> nope
[23:05:18] <FromDiscord> <undersquire> i wish it supported that
[23:05:32] <FromDiscord> <undersquire> it would be nice to be able to just raise any value
[23:05:32] *** Quits: max22- (~maxime@2a01cb08833598008129f6300dad089b.ipv6.abo.wanadoo.fr) (Ping timeout: 245 seconds)
[23:05:48] <FromDiscord> <haxscramper> You can write own exception
[23:06:01] <FromDiscord> <undersquire> or something
[23:06:03] <FromDiscord> <haxscramper> But it is a horrible idea to raise non-exception IMO
[23:06:09] <FromDiscord> <undersquire> sent a code paste, see https://paste.rs/AeP
[23:06:27] <FromDiscord> <haxscramper> And strings are no reference types, so
[23:06:40] <FromDiscord> <undersquire> wait it has to be a reference type
[23:06:41] <FromDiscord> <undersquire> (edit) "type" => "type?"
[23:07:15] <FromDiscord> <undersquire> wait so how do you obtain data from an exception type?
[23:07:32] <FromDiscord> <haxscramper> just like any other reference type?↵(@undersquire)
[23:07:42] <FromDiscord> <Elegantbeef> `except YourException as e`
[23:07:44] <FromDiscord> <haxscramper> reference type only means it is allocated on heap
[23:07:48] <FromDiscord> <undersquire> In reply to @Elegantbeef "`except YourException as e`": ah ty
[23:07:53] <FromDiscord> <haxscramper> and behaves like it is a pointer/reference
[23:08:11] <FromDiscord> <haxscramper> Nim string buffer is allocated on heap, but it does not behave like a reference
[23:08:13] <FromDiscord> <undersquire> In reply to @haxscramper "reference type only means": yeah i meant how do u get it from the `except` statement, but beef answered that
[23:08:23] <FromDiscord> <Elegantbeef> Explained here https://nim-lang.org/docs/manual.html#exception-handling-except-clauses
[23:08:34] <FromDiscord> <undersquire> so you can technically store any values in your exception
[23:08:54] <FromDiscord> <undersquire> thats all I wanted to be able to do, I thought you could only store a string with an exception
[23:09:55] <FromDiscord> <haxscramper> you can create a `VoidStarError` which has `pointer: payload`
[23:10:17] <FromDiscord> <haxscramper> Basically exceptions are `ref` to guarantee they outlive stack unwinding. I think
[23:10:21] <FromDiscord> <undersquire> sent a code paste, see https://play.nim-lang.org/#ix=3vUE
[23:10:36] <FromDiscord> <haxscramper> Just `object of CatchableError` is enoug↵(@undersquire)
[23:10:39] <FromDiscord> <undersquire> oh ok
[23:10:48] <FromDiscord> <haxscramper> For some veird reason `newException` requires just `object`
[23:10:48] <FromDiscord> <haxscramper> idk why
[23:11:11] <FromDiscord> <haxscramper> But internally it does `(ref Exception)(msg: "....")`
[23:11:20] <FromDiscord> <haxscramper> I personally write constructors for my exceptions, so it goes like `raise newArgumentError( ... )`
[23:11:38] <FromDiscord> <undersquire> ah ok
[23:11:44] <FromDiscord> <undersquire> ty this helps a lot
[23:12:08] <FromDiscord> <haxscramper> Oh, and your code is not fully valid as `newException` accepts second argument as exception message
[23:12:15] <FromDiscord> <haxscramper> So `10` is not going to go into `errorcode`
[23:13:11] <FromDiscord> <haxscramper> sent a code paste, see https://play.nim-lang.org/#ix=3vUF
[23:14:31] <FromDiscord> <undersquire> yeah
[23:14:42] <FromDiscord> <undersquire> sent a code paste, see https://play.nim-lang.org/#ix=3vUI
[23:14:59] <FromDiscord> <undersquire> oh you can just do ref MyException () ?
[23:15:49] <FromDiscord> <undersquire> sent a code paste, see https://play.nim-lang.org/#ix=3vUJ
[23:35:10] *** Joins: max22- (~maxime@2a01cb08833598008d8190374bd4676f.ipv6.abo.wanadoo.fr)
[23:58:01] *** Quits: auxym_ (~francis@modemcable027.118-81-70.mc.videotron.ca) (Ping timeout: 248 seconds)
