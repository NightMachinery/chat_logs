[00:01:13] *** Quits: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac) (Quit: Client closed)
[00:02:36] *** Joins: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac)
[00:02:37] *** Quits: zstix (~zstix@4.15.128.42) (Quit: Goodbye)
[00:06:21] *** Joins: yagamilito (~yagamilit@2601:642:4600:34b0:e4ee:8819:6d77:cf26)
[00:08:21] *** Joins: fmartingr (~fmartingr@user/fmartingr)
[00:13:51] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:1adc:3d2:276:f38c)
[00:13:52] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[00:17:27] *** Quits: ekathva (~ekathva@mobile-access-b04849-173.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:17:28] *** Quits: mud (~mud@user/kadoban) (Quit: quit)
[00:21:25] *** Quits: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[00:26:50] *** Joins: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net)
[00:27:37] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:1adc:3d2:276:f38c) (Ping timeout: 240 seconds)
[00:28:07] *** Quits: maroloccio (~marolocci@pousada3ja.mma.com.br) (Quit: WeeChat 3.0)
[00:29:33] *** Quits: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac) (Quit: Client closed)
[00:33:44] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[00:34:17] *** Quits: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[00:34:51] *** Joins: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac)
[00:35:32] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[00:36:06] *** Joins: ekathva (~ekathva@2001:999:409:7be:a7a9:6f90:81b8:5d9e)
[00:40:09] *** Joins: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net)
[00:41:46] *** Joins: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:41:50] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 260 seconds)
[00:42:28] *** Joins: X-Scale` (~ARM@219.206.137.78.rev.vodafone.pt)
[00:43:20] *** Joins: leah2_ (~leah@vuxu.org)
[00:43:22] *** Joins: theoceaniscool_ (~theoceani@93.177.120.22)
[00:43:38] *** Joins: martin__ (nobody@188.113.85.137)
[00:43:38] *** Quits: martin_ (nobody@188.113.85.137) (Killed (copper.libera.chat (Nickname regained by services)))
[00:43:38] *** martin__ is now known as martin_
[00:44:10] *** Quits: yagamilito (~yagamilit@2601:642:4600:34b0:e4ee:8819:6d77:cf26) (Quit: Client closed)
[00:45:20] *** Quits: X-Scale (~ARM@46.50.5.24) (Ping timeout: 272 seconds)
[00:45:21] *** X-Scale` is now known as X-Scale
[00:46:28] *** Quits: theoceaniscool (~theoceani@93.177.120.22) (Ping timeout: 260 seconds)
[00:46:28] *** Quits: leah2 (~leah@vuxu.org) (Ping timeout: 260 seconds)
[00:46:28] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 260 seconds)
[00:50:13] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[00:54:04] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:55:02] *** Quits: pieguy128_ (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Ping timeout: 252 seconds)
[00:57:40] *** Joins: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com)
[00:57:59] *** Quits: rogersm (~rogersm@90.166.180.250) (Ping timeout: 256 seconds)
[00:58:08] *** Quits: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca) (Max SendQ exceeded)
[00:58:13] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 256 seconds)
[00:58:36] *** Joins: pieguy128 (~pieguy128@bras-base-mtrlpq5031w-grc-35-70-24-248-224.dsl.bell.ca)
[00:59:14] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:3dd:a551:1de8:65bb)
[00:59:33] *** Joins: rogersm (~rogersm@90.166.180.250)
[01:01:25] *** Quits: ekathva (~ekathva@2001:999:409:7be:a7a9:6f90:81b8:5d9e) (Ping timeout: 240 seconds)
[01:01:46] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[01:01:57] *** Joins: ekathva__ (~ekathva@mobile-access-b04811-83.dhcp.inet.fi)
[01:03:23] *** Quits: ekathva__ (~ekathva@mobile-access-b04811-83.dhcp.inet.fi) (Read error: Connection reset by peer)
[01:04:47] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:3dd:a551:1de8:65bb) (Ping timeout: 256 seconds)
[01:04:49] *** Joins: ekathva__ (~ekathva@2001:999:409:7be:f8cc:6095:d7e0:c276)
[01:05:52] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[01:06:01] *** Quits: tyson2 (~user@bras-base-toroon0949w-grc-02-142-114-235-113.dsl.bell.ca) (Remote host closed the connection)
[01:06:09] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 256 seconds)
[01:06:18] *** Quits: ekathva__ (~ekathva@2001:999:409:7be:f8cc:6095:d7e0:c276) (Client Quit)
[01:07:02] *** Quits: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da) (Read error: Connection reset by peer)
[01:07:49] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[01:14:19] *** leah2_ is now known as leah2
[01:17:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[01:19:17] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com)
[01:19:34] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[01:25:27] *** Joins: absc (~absc@dynamic-adsl-94-34-200-127.clienti.tiscali.it)
[01:27:45] *** Joins: sebn (~sebn@c90-142-43-192.bredband.tele2.se)
[01:28:18] *** Quits: rogersm (~rogersm@90.166.180.250) (Quit: Leaving...)
[01:29:39] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[01:31:43] *** Joins: fef (~thedawn@user/thedawn)
[01:36:43] *** Quits: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac) (Quit: Client closed)
[01:39:35] *** Quits: absc (~absc@dynamic-adsl-94-34-200-127.clienti.tiscali.it) (Quit: Leaving)
[01:41:02] *** Quits: anessen976 (~Anessen97@host-87-9-169-73.retail.telecomitalia.it) (Read error: Connection reset by peer)
[01:41:26] *** Joins: anessen976 (~Anessen97@host-87-9-169-73.retail.telecomitalia.it)
[01:41:57] *** Joins: rawley (~rawley@142.99.241.242)
[01:46:36] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi) (Ping timeout: 245 seconds)
[01:50:49] *** Quits: rawley (~rawley@142.99.241.242) (Remote host closed the connection)
[02:02:53] *** Joins: mickey (~user@user/mickey)
[02:13:47] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[02:18:14] *** Quits: matoro (~matoro@2600:1700:4b10:9d80::2) (Quit: ZNC 1.8.2 - https://znc.in)
[02:18:39] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[02:19:42] *** Joins: matoro (~matoro@2600:1700:4b10:9d80::2)
[02:21:35] *** Quits: mug3n_ (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[02:21:50] *** Quits: aead (~aead@user/aead) (Remote host closed the connection)
[02:22:35] *** Joins: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac)
[02:23:57] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[02:24:55] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[02:25:40] *** Joins: aead (~aead@user/aead)
[02:29:16] *** Joins: rcernin (~rcernin@101.189.129.123)
[02:30:27] *** Quits: aead (~aead@user/aead) (Remote host closed the connection)
[02:32:02] *** Quits: yakiza (~yakiza@cpc91202-cmbg18-2-0-cust102.5-4.cable.virginm.net) (Ping timeout: 268 seconds)
[02:32:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:33:42] *** Joins: aead (~aead@user/aead)
[02:33:53] *** Joins: yakiza (~yakiza@66.90.72.170)
[02:36:58] *** Quits: aead (~aead@user/aead) (Remote host closed the connection)
[02:37:33] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[02:39:07] <_rgn> what exactly is the `less` function? https://pkg.go.dev/golang.org/x/exp/slices#SortStableFunc
[02:39:15] *** Joins: aead (~aead@user/aead)
[02:39:37] <_rgn> ok, thought about googling
[02:39:39] <_rgn> > The less function is a comparator function that reports whether the element at index i should sort before the element at index j
[02:40:55] <fizzie> I imagine it would also be the same as the Less method of sort.Interface: https://pkg.go.dev/sort#Interface
[02:41:23] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[02:41:40] *** Joins: paulgrmn_ (~paulgrmn@user/paulgrmn)
[02:42:46] *** Quits: aead (~aead@user/aead) (Remote host closed the connection)
[02:43:39] <_rgn> yeah. thanks fizzie
[02:43:48] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 240 seconds)
[02:43:53] <b0nn> _rgn: it's to allow comparisons of custom objects - if you wanted to sort struct { Name string; Amount int64} that less function allows you to determine which field to use
[02:46:16] *** Joins: aead (~aead@user/aead)
[02:46:22] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[02:47:21] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[02:50:57] *** Quits: paulgrmn_ (~paulgrmn@user/paulgrmn) (Ping timeout: 240 seconds)
[02:53:00] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 240 seconds)
[02:55:23] <fizzie> Heh. As a (trivial, but still) generics exercise, got inspired to write the "sort with a property accessor rather than a comparator" wrapper: https://go.dev/play/p/10B41WQMj_9
[02:55:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[02:56:54] <b0nn> hmm, I was wondering how it would handle pointers
[02:58:40] <dostoyevsky2> I liked learning Go months ago, because it hasn't changed for some years, and seemed fairly stable... but all these new features with generics and error handling in Go 2... Kind of makes it more unstable
[03:01:41] <b0nn> heh - it's been eventful lately huh
[03:02:17] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 240 seconds)
[03:04:10] *** Joins: dansan (~daniel@75.81.148.51)
[03:04:20] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:04:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:06:28] *** Quits: anessen976 (~Anessen97@host-87-9-169-73.retail.telecomitalia.it) (Read error: Connection reset by peer)
[03:06:34] *** Quits: yakiza (~yakiza@66.90.72.170) (Ping timeout: 272 seconds)
[03:09:06] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[03:10:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[03:11:21] *** Quits: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net) (Quit: WeeChat 3.4.1)
[03:12:27] *** Joins: k8yun (~k8yun@user/k8yun)
[03:13:24] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 240 seconds)
[03:13:52] <knusbaum> what error handling changes?
[03:20:00] <bpalmer> check statements were proposed and withdrawn; so maybe errors.Is/errors.As  ?
[03:22:04] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[03:22:26] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[03:24:06] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Read error: Connection reset by peer)
[03:24:29] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[03:28:33] *** Quits: lazysundaydreams (~mistr@ip-89-177-73-161.net.upcbroadband.cz) (Quit: Konversation terminated!)
[03:30:39] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Ping timeout: 260 seconds)
[03:31:24] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[03:33:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:34:16] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[03:34:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:39:41] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Quit: WeeChat 3.4)
[03:42:54] *** Quits: remote (~self@user/hackers) (Ping timeout: 260 seconds)
[03:43:07] *** Quits: adip (~adip@did158.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[03:45:06] *** Joins: adip (~adip@dii229.neoplus.adsl.tpnet.pl)
[03:46:46] *** Quits: Guest65 (~Guest65@2a02:c7f:582d:5100:19e6:2f1a:6de7:c6ac) (Quit: Client closed)
[03:47:16] *** Joins: Garb0 (~Garb0@user/garb0)
[03:48:01] *** Quits: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com) (Quit: csmiga)
[03:51:32] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[03:53:08] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[03:57:20] *** Quits: retux (~user@dyndsl-091-096-026-025.ewe-ip-backbone.de) (Remote host closed the connection)
[04:02:53] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4.1)
[04:05:35] *** Joins: monoxane1 (~monoxane@user/monoxane)
[04:06:44] *** Quits: monoxane (~monoxane@user/monoxane) (Ping timeout: 272 seconds)
[04:06:45] *** monoxane1 is now known as monoxane
[04:12:14] *** Joins: prologic (~prologic@mail.mills.io)
[04:12:26] <prologic> Q: How do we disable CORS with Go's wasm version of net/http ?
[04:12:57] <prologic> Setting headers.Add("js.fetch:mode", "no-cors") does not appear to be workign here
[04:13:08] <prologic> Even though the code path in the Go std lib says this should work
[04:13:30] <prologic> Can't even dump the outbound request either
[04:13:31] <prologic> error dumping request: net/http: fetch() failed: Failed to fetch
[04:14:51] <b0nn> You need to add some headers to your outbound
[04:14:57] <b0nn> https://go.dev/play/p/Jj6JMIOab12
[04:15:11] <b0nn> That's a middleware that does it, I forget where I stole it from
[04:16:12] <prologic> Hmm
[04:16:14] <prologic> AFAIK we are
[04:16:18] <prologic> But I'll double check my code
[04:16:20] <prologic> Thanks b0nn !
[04:16:46] <prologic> Oh noarb b0nn that's not what we're trying to achieve here
[04:16:52] <prologic> We in fact want to disable CORS altogether
[04:16:58] <prologic> We don't need it in this specific case
[04:17:08] <prologic> And specifically for the Wasm Fetch API impl
[04:17:40] <b0nn> Oh, I thought that default was to disallow CORS in Go
[04:17:48] <b0nn> my bad
[04:19:33] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[04:20:16] <prologic> Yeah we're having a lot of trouble with this
[04:20:20] <prologic> it's just not working /
[04:21:08] <prologic> https://stackoverflow.com/questions/36840396/fetch-gives-an-empty-response-body/40427882#40427882
[04:21:18] <prologic> According to this, even setting no-cors won't even work anyway :/
[04:21:26] <prologic> How is this so fucking stupid
[04:21:41] <prologic> If you don't need CORS at all, why are we forced to abide by it?!
[04:22:50] <prologic> https://stackoverflow.com/questions/68839122/http-request-on-wasm-returns-status-0-and-0-bytes-on-body
[04:23:58] <prologic> So... This is basically impossible?
[04:24:00] <foobaz> i don't know anything about WASM, but is it possible this is because the browser doesn't provide low-level sockets, but a higher level API with restrictions?
[04:24:15] <prologic> Who knows
[04:24:18] <prologic> But this is fucking stupid
[04:24:22] <prologic> Who designed this CORS shit anyway
[04:24:43] <prologic> having to be forced to add Cors response headers on your server when you don't need it is silly
[04:25:28] <dale> foobaz: (Sorry, long delayed reply from five hours ago) It doesn't have to be a different worker, but I was looking for a pattern that wasn't just "have the same worker retry it".
[04:26:11] <bpalmer> dale: do you simply want to return it to the pool, or do you want to actively ensure that the one worker that failed doesn't get the same task?
[04:26:41] <dale> foobaz: I am passing in a bidirectional channel, but then how do you know when it's safe to close the channel?  When you're done parceling out the jobs, how do you know none of the workers are going to be retrying a job, putting it back on the channel?  I solved it with a channel that the workers use to signal when they've actually completed a job and won't be returning it back to the channel for
[04:26:43] <dale> retry.
[04:26:57] <dale> bpalmer: The former.
[04:28:24] <foobaz> you could use a second channel to tell workers to shut down, instead of closing the single worker channel
[04:28:38] <dale> Yeah, that'd work too.
[04:29:06] <foobaz> that second channel could be a chan struct{}, you would never send anything on it, and the worker function would use select to receive on both channels
[04:29:22] <dale> I think Python's stdlib, for example, has a queue that lets workers explicitly signal that they have successfully completed an item, which probably addresses this problem.
[04:29:49] <bpalmer> yes, that's basically what I was going to suggest
[04:30:19] <dale> foobaz: I ran into chan struct{} but I hadn't quite worked it out.  As you've described it, then, the real use of this channel is closing it?
[04:30:43] <bpalmer> or , just have each worker output a SuccessOrError boolean as they finish each task; keep a count of how many jobs have been added and wait until that many successes are reached, then shut down everything.
[04:30:59] <dale> bpalmer: That last one there is what I ended up doing.
[04:31:27] <bpalmer> "keep a count ... have been added by something outside the system", I should say.
[04:31:31] <dale> Well, except there's no error, only success.  "Error" is just "I put it back on the channel for retry".  Any error more significant than that should just kill the whole program.
[04:36:35] *** Quits: zap (~zap@gateway/tor-sasl/zap) (Ping timeout: 240 seconds)
[04:37:23] *** Quits: Garb0 (~Garb0@user/garb0) (Remote host closed the connection)
[04:39:28] *** Joins: chandash (~chandash@ip-115-87.wireless.oberlin.edu)
[04:41:00] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 240 seconds)
[04:42:02] *** Joins: treeford (~charleste@user/treeford)
[04:46:35] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 256 seconds)
[04:49:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[05:05:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[05:11:33] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[05:14:30] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[05:18:17] *** Joins: fef (~thedawn@user/thedawn)
[05:22:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[05:23:38] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:25:38] *** Quits: Techcable (~Techcable@user/Techcable) (Remote host closed the connection)
[05:26:12] <aog> there was a command to display the support architectures for compiling, anyone remember what is it?
[05:27:06] *** Quits: BUSY (~BUSY@user/busy) (Remote host closed the connection)
[05:27:51] *** Joins: Techcable (~Techcable@user/Techcable)
[05:29:30] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Remote host closed the connection)
[05:30:02] *** Joins: mugen (~mugen@gateway/tor-sasl/mugen)
[05:30:32] <foobaz> aog: go tool dist list
[05:31:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[05:32:21] *** Joins: BUSY (~BUSY@user/busy)
[05:32:53] *** Joins: Batzy (~quassel@user/batzy)
[05:33:20] *** Quits: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[05:33:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[05:34:46] *** Quits: andlabs (~andlabs@2a00:79e1:abc:1a12:fd99:ee8e:cc46:2e99) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:37:58] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:38:19] *** Joins: mud (~mud@user/kadoban)
[05:38:54] *** Quits: k8yun (~k8yun@user/k8yun) (Quit: Leaving)
[05:39:17] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 256 seconds)
[05:39:28] *** Joins: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net)
[05:41:28] *** Joins: pepee (~pepee@user/pepee)
[05:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[05:47:36] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[05:51:29] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[05:54:41] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Read error: Connection reset by peer)
[05:56:45] *** Joins: shackra (~quassel@53.68.179.186.ufinet.co.cr)
[05:58:39] *** Parts: jsanford (~jsanford@user/jsanford) ()
[06:04:03] *** Joins: andlabs (~andlabs@2605:ef80:8090:8191:b5f7:5bcb:eb32:57d8)
[06:05:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[06:05:47] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:06:28] *** Joins: kodah (~kodah@user/kodah)
[06:09:24] *** Quits: andlabs (~andlabs@2605:ef80:8090:8191:b5f7:5bcb:eb32:57d8) (Ping timeout: 240 seconds)
[06:13:17] *** Joins: jsanford (~jsanford@user/jsanford)
[06:13:50] *** Quits: seds (sid492514@user/seds) ()
[06:14:04] *** Joins: seds (sid492514@user/seds)
[06:14:59] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:15:26] *** Joins: andlabs (~andlabs@2605:ef80:8099:6177:ecc4:5149:fbb2:aaf2)
[06:24:50] *** Quits: andlabs (~andlabs@2605:ef80:8099:6177:ecc4:5149:fbb2:aaf2) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:25:03] *** Quits: beholders_eye (~weechat@2804:1b3:70c1:d98c:d362:eb6f:cecd:43b0) (Ping timeout: 252 seconds)
[06:27:16] *** Joins: andlabs (~andlabs@2605:ef80:8099:6177:e1e4:4040:64fa:4127)
[06:34:24] *** Quits: shka (~herr@109.231.3.55) (Ping timeout: 252 seconds)
[06:34:56] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 272 seconds)
[06:39:18] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[06:49:55] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:50:56] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Read error: Connection reset by peer)
[06:51:30] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[06:54:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:55:12] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 272 seconds)
[06:56:02] *** Joins: Everything (~Everythin@37.115.210.35)
[07:03:27] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 260 seconds)
[07:05:47] *** Quits: neurocyte0917090 (~neurocyte@user/neurocyte) (Ping timeout: 260 seconds)
[07:08:58] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:a499:52e0:ad2c:b7df)
[07:16:57] *** Quits: andlabs (~andlabs@2605:ef80:8099:6177:e1e4:4040:64fa:4127) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:17:27] *** Quits: aead (~aead@user/aead) (Ping timeout: 260 seconds)
[07:17:47] *** Joins: aead (~aead@user/aead)
[07:30:46] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[07:33:14] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[07:35:49] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[07:36:35] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:a499:52e0:ad2c:b7df) (Ping timeout: 260 seconds)
[07:38:59] *** Joins: irontom (~user@69.174.103.168)
[07:40:00] *** Joins: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net)
[07:51:32] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[07:53:54] *** Joins: shtirlic_ (~shtirlic@184.22.191.187)
[07:54:15] *** Quits: rairden (~rairden@2603-9000-de04-9613-0000-0000-0000-1a20.inf6.spectrum.com) (Quit: rairden)
[07:56:53] *** Quits: shtirlic (~shtirlic@184.22.191.187) (Ping timeout: 252 seconds)
[07:59:39] *** Quits: shtirlic_ (~shtirlic@184.22.191.187) (Ping timeout: 252 seconds)
[08:08:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[08:15:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[08:27:02] *** Quits: eroux (~eroux@102-65-72-61.ftth.web.africa) (Ping timeout: 272 seconds)
[08:29:27] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:34:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[08:40:57] *** Quits: d42 (~root@user/d42) (Ping timeout: 240 seconds)
[08:44:46] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 272 seconds)
[08:50:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[08:57:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[08:57:19] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Ping timeout: 260 seconds)
[09:06:27] *** Joins: mlctrez (~mlctrez@071-011-117-022.res.spectrum.com)
[09:12:15] *** Quits: stuart (~stuart@55d4cb0f.access.ecotel.net) (Ping timeout: 252 seconds)
[09:13:34] *** Joins: _xor (~xor@74.215.232.169)
[09:14:06] *** Joins: stuart (~stuart@55d4cb80.access.ecotel.net)
[09:15:54] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[09:17:47] *** Quits: irontom (~user@69.174.103.168) (Ping timeout: 256 seconds)
[09:18:26] *** Joins: han-solo (~han-solo@user/han-solo)
[09:20:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:24:54] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[09:44:45] *** Joins: blinux (~blinux@pool-108-48-11-122.washdc.fios.verizon.net)
[09:45:54] *** Joins: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da)
[09:47:28] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 272 seconds)
[09:53:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:57:47] *** Quits: rvalue (~rvalue@user/rvalue) (Remote host closed the connection)
[09:58:12] *** Joins: rvalue (~rvalue@user/rvalue)
[09:58:14] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:26:04] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[10:26:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:31:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[10:35:32] *** Joins: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz)
[10:48:40] *** Joins: habamax (~habamax@user/habamax)
[10:50:12] *** Joins: R2robot (~R2robot@user/r2robot)
[10:53:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[10:57:45] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:59:38] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:07:28] *** Quits: chandash (~chandash@ip-115-87.wireless.oberlin.edu) (Quit: WeeChat 3.4)
[11:18:12] *** Joins: chenqisu1 (~chenqisu1@183.217.201.88)
[11:21:48] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[11:22:22] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (Quit: Connection closed for inactivity)
[11:33:49] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:34:48] *** Joins: saschagrunert (~saschagru@46.128.124.48)
[11:35:15] *** Joins: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk)
[11:37:40] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:42:31] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[11:45:16] *** Quits: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da) (Remote host closed the connection)
[11:45:35] *** Joins: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da)
[11:49:04] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Ping timeout: 272 seconds)
[11:49:24] *** Quits: Everything (~Everythin@37.115.210.35) (Ping timeout: 240 seconds)
[11:50:26] *** Joins: Everything (~Everythin@37.115.210.35)
[11:51:57] *** Joins: shka (~herr@109.231.3.55)
[11:54:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:56:16] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[11:59:50] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[12:00:00] *** Quits: BrunoFontes (~bruno@2a02:c207:2026:6264::1) (Quit: WeeChat 2.8)
[12:01:11] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Ping timeout: 260 seconds)
[12:07:10] *** Joins: rcernin_ (~rcernin@101.189.129.123)
[12:09:01] *** Quits: rcernin_ (~rcernin@101.189.129.123) (Client Quit)
[12:09:24] *** Joins: rcernin (~rcernin@101.189.129.123)
[12:11:10] *** Quits: casastorta (~casastort@neo2.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[12:33:42] *** Joins: casastorta (~casastort@neo2.krivokuca.net)
[12:34:06] *** Joins: rendar (~rendar@user/rendar)
[12:40:19] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[12:40:40] *** Joins: treeford (~charleste@user/treeford)
[12:41:43] *** Joins: xsteadfastx (~marv@94.31.99.245)
[12:43:06] *** Quits: Everything (~Everythin@37.115.210.35) (Quit: leaving)
[12:43:37] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Quit: The Lounge - https://thelounge.chat)
[12:43:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:45:06] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[12:48:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[12:49:13] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[12:53:58] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[12:57:41] <aLeSD[m]> hi all
[12:58:27] <aLeSD[m]> is there any way to mockup time.Now(): I have some code that uses it and the result is in unit testing failing randomly
[12:58:36] <aLeSD[m]> s/:/?/
[12:58:45] <aLeSD[m]> Or maybe is the code that is wrong ...
[12:59:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:59:05] <aLeSD[m]> in the sense : how do you handle testing time dependet code ?
[13:00:12] *** Joins: rcernin (~rcernin@101.189.129.123)
[13:02:12] *** Quits: caverton (~caverton@ercro.tech) (Quit: Ping timeout (120 seconds))
[13:02:13] *** Quits: greypw2546 (~greypw254@grey.pw) (Quit: Ping timeout (120 seconds))
[13:02:24] *** Joins: caverton (~caverton@ercro.tech)
[13:02:39] *** Joins: greypw2546 (~greypw254@grey.pw)
[13:03:12] *** Quits: alip (~alip@exherbo/developer/alip) (Remote host closed the connection)
[13:03:12] *** Quits: r0lh (~r0lh@offseclab.de) (Quit: kkthxbye)
[13:03:22] *** Joins: r0lh (~r0lh@offseclab.de)
[13:03:28] *** Joins: alip (~alip@exherbo/developer/alip)
[13:03:36] *** Quits: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de) (Remote host closed the connection)
[13:03:56] *** Joins: matthewcroughan (~quassel@static.211.38.12.49.clients.your-server.de)
[13:04:28] *** Quits: sebn (~sebn@c90-142-43-192.bredband.tele2.se) (Remote host closed the connection)
[13:04:41] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[13:05:01] *** Quits: xzr (xzar@shell.troopers.fi) (Ping timeout: 240 seconds)
[13:05:11] *** Joins: xzr (xzar@shell.troopers.fi)
[13:05:35] *** xzr is now known as Guest1832
[13:05:48] *** Joins: shtirlic (~shtirlic@184.22.191.187)
[13:07:02] <pyzozord> what tools and libraries do you use at work? I am wondering what should I know other than language itself to qualify as a golang web backend microservices engineer
[13:09:31] *** Quits: mrtazz (~mrtazz@portal.unwiredcouch.com) (Quit: Leaving.)
[13:10:55] *** Quits: shtirlic (~shtirlic@184.22.191.187) (Ping timeout: 256 seconds)
[13:15:21] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[13:16:42] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:16:54] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[13:17:26] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Quit: The Lounge - https://thelounge.chat)
[13:17:56] *** Joins: rcernin (~rcernin@101.189.129.123)
[13:22:10] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[13:23:37] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[13:24:17] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[13:25:46] *** Joins: moog_ (~moog@107.77.244.51)
[13:28:13] *** Quits: moog__ (~moog@98.97.84.79) (Ping timeout: 240 seconds)
[13:28:20] *** Joins: mrtazz (~mrtazz@portal.unwiredcouch.com)
[13:28:30] <b0nn> git, docker, CI/CD, cloud (AWS, GCP, or Azure)
[13:28:57] <b0nn> terraform
[13:30:29] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:31:54] <b0nn> oh, and datastores - NoSQL (Mongo, Redis, etc), SQL (Postgres, MySQL), Message Queues (RabbitMQ), Kafka  too
[13:34:44] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:38:10] <synthmeat> oh, wow. didn't know about encoding/gob
[13:38:18] <synthmeat> that looks marvelously usable
[13:39:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 252 seconds)
[13:41:02] *** Quits: Asgaroth (~Asgaroth@93.107.191.92) (Read error: Connection reset by peer)
[13:41:16] *** Quits: faceonkeyboard (~faceonkey@anquietas.itsh.dev) (Quit: Bridge terminating on SIGTERM)
[13:41:29] *** Joins: faceonkeyboard (~faceonkey@anquietas.itsh.dev)
[13:42:35] <pyzozord> b0nn: hmm I know git, docker CI/CD (gitlab runners). What cloud features do you think are the most basic/important to know? Regarding Postgres/MySQL I'm at the level of joins, views, maybe few custom indexes. Do I need to learn much more there? Message Queues I'm not familiar with, what do you recommend?
[13:43:21] <pyzozord> Also from other things kubernetes, prometheus, grafana
[13:43:26] *** Quits: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca) (Quit: Leaving)
[13:43:54] <pyzozord> what other tools?
[13:44:07] <pyzozord> also are there popular go libraries / frameworks that look good on cv?
[13:44:26] <pyzozord> I know few companies I worked for used that gorilla/mux and other gorilla libraries
[13:47:06] <b0nn> pyzozord: WRT SQL, you should know how to create, and normalise a schema, to 3nf; Indexing, you should understand when to put them on AND when not to (or what the costs and benefits are)
[13:47:48] <b0nn> In fact, that's SWE in a nutshell, know what the costs/benefits are of <thing> and how to get the highest benefit for the given problem
[13:48:45] <pyzozord> I've been a junior backend engineer, and for a longer time now senior frontend engineer
[13:49:01] *** Joins: zap (~zap@gateway/tor-sasl/zap)
[13:49:12] <pyzozord> I'm thinking about imporving my backend to the senior level so I can be both senior frontend and senior backend
[13:50:07] <pyzozord> so looking mostly for advice about specific technologies and techniques
[13:51:43] *** Quits: pepee (~pepee@user/pepee) (Ping timeout: 256 seconds)
[13:51:55] <synthmeat> learn htop :)
[13:52:26] <aLeSD[m]> do you use the go-playground/validator package ? Is it ok ?
[13:52:26] <aLeSD[m]>  
[13:52:34] <pyzozord> that tip about 3nf was a good one, I don't know much about database theory
[13:53:00] *** Joins: prologic (~prologic@mail.mills.io)
[13:53:26] <b0nn> I don't think I've ever sat in an interview in two different companies where the 'stack' they are using is the same
[13:53:42] <prologic> Hey again, anyone a proclaimed expert in Wasm and can help me figure out a bug I'm seeing on Safari / Mobile Safari? Failed to load resource: FetchEvent.respondWith received an error: TypeError: Load failed
[13:53:47] <pyzozord> yeah of course but usually they use "something like x"
[13:53:51] *** Quits: faceonkeyboard (~faceonkey@anquietas.itsh.dev) (Quit: Bridge terminating on SIGTERM)
[13:54:05] <b0nn> I mean, if the leads are ex-node, they tend to favour Mongo, for example
[13:54:19] <b0nn> but, if they're Java, they will laugh at the thought
[13:54:59] <b0nn> python guys 80% of the time are postgres people, 20% Mysql
[13:55:01] *** Quits: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net) (Quit: The Lounge - https://thelounge.chat)
[13:55:07] *** Quits: gnoirzox (~gnoirzox@178.170.103.136) (Ping timeout: 256 seconds)
[13:55:07] <pyzozord> don't matter, just focused on learning the most popular ones, after you learn one, learning another one is easy
[13:55:19] <prologic> Or alternatively, is there some way to tell the net/http.Client in Wasm to use XmlHttpRequest instead?
[13:55:24] *** Joins: endigma (~endigma@drmons0552w-134-41-91-32.dhcp-dynamic.fibreop.ns.bellaliant.net)
[13:55:44] <pyzozord> and I know some mysql (and used postgress for few years too)
[13:56:13] *** Joins: gnoirzox (~gnoirzox@178.170.103.136)
[13:56:25] <pyzozord> I'm not very performance oriented about databases, but I'm aware of explain, and I have basic understanding of tree data structures so I can read up on the details and loadtest if I need to
[13:57:59] <pyzozord> so it's really about: git, ci/cd, docker, kubernetes, prometheus/grafana, aws, grpc, mysql, redis, rabbitmq, kafka. What else? Also What go libraries.
[14:00:01] <pyzozord> this is probably something that should study quite hard https://cloud.google.com/apis/design/
[14:00:39] <pyzozord> probably this too https://docs.microsoft.com/en-us/azure/architecture/guide/
[14:00:46] <pyzozord> what else?
[14:01:35] *** Joins: anonfunc[m] (~idleganda@anquietas.itsh.dev)
[14:01:37] *** Joins: faceonkeyboard (~anonfuncs@anquietas.itsh.dev)
[14:02:06] <albertito> pyzozord: my 2c: it's less about a list of technologies, and more about your general experience and judgement. Technologies will evolve over time, and in any job you'll have to learn new ones anyway. So I would approach learning those things not as a checklist, but more "learning this things will make me get more experience in these areas", because the tools will change over time
[14:02:07] <pyzozord> or is that enough to look like a senior backend dev?
[14:02:38] <synthmeat> to look like a senior backend dev, you need to have production horror stories
[14:02:54] <pyzozord> albertito: yes yes, that's my point, I use these technologies as proxies to learning these subjects. But also recuriters are really keyword oriented
[14:03:09] <pyzozord> synthmeat: I do have some of those
[14:03:30] <synthmeat> (don't listen to me, i've never had a cv in my life)
[14:03:43] <pyzozord> oh ok
[14:03:48] <pyzozord> but it's a good advice
[14:04:15] <pyzozord> but my horror stories are more frontend specific like one time I wrote script that ddossed our backend accidentally
[14:04:29] <pyzozord> but our backend was on kubernetes and had HPA so it surivived
[14:04:32] <synthmeat> self ddos is a common one, yes :)
[14:04:56] <pyzozord> I quickly removed it but it lingered for weeks, turns out some pople don't close their browser for week or more
[14:05:06] <synthmeat> dns failing another good one
[14:05:36] <pyzozord> dns failing as in custom dns server failing?
[14:05:47] <pyzozord> or programmer failing to add correct records to dns :P
[14:06:11] <synthmeat> no, provider's. but horror is that it usually takes a while to figure out wth is wrong when it's dns
[14:06:32] <synthmeat> i have dozens of legit ddos/blackmail/ransom stories, most in the last 3 years
[14:08:05] <synthmeat> usually, i redirect all http1.1 to this https://www.youtube.com/watch?v=dROwEc4VyJA for an hour or two, and that takes care of it
[14:08:20] <pyzozord> let me guess: rickroll :D
[14:08:22] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:08:23] <synthmeat> no
[14:08:31] <pyzozord> oh no, this one is good too
[14:09:18] *** Quits: halden (~halden@lden.im) (Read error: Connection reset by peer)
[14:09:52] *** Joins: llorllale (~llorllale@198.98.119.85)
[14:12:11] *** Joins: halden (~halden@lden.im)
[14:13:01] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:17:01] *** Quits: gnoirzox (~gnoirzox@178.170.103.136) (Ping timeout: 240 seconds)
[14:18:17] <pyzozord> well, if anyone has other technologies, techniques or principles they think no senior backend should go without, please share
[14:18:24] *** Joins: gnoirzox (~gnoirzox@178.170.103.136)
[14:19:01] <pyzozord> I mean senior backend in a normal company, maybe junior or medior in a FAANG
[14:20:26] <pyzozord> I'm mostly looking for employable keywords, but if you have something that you think is truly important share that too
[14:20:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[14:22:15] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:695f:39aa:2b30:7e5b)
[14:23:59] *** Quits: ekathva (~ekathva@2001:999:409:7be:fdd8:9ce:be39:f4da) (Ping timeout: 260 seconds)
[14:29:19] *** Joins: sebn (~sebn@c90-142-43-192.bredband.tele2.se)
[14:30:48] *** Quits: marcel (~marcel@user/marcel) (Quit: The Lounge - https://thelounge.chat)
[14:31:00] *** Joins: marcel (~marcel@user/marcel)
[14:36:31] *** Joins: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com)
[14:43:06] *** Quits: greypw2546 (~greypw254@grey.pw) (Quit: I'll be back!)
[14:43:28] *** Quits: chenqisu1 (~chenqisu1@183.217.201.88) (Quit: Leaving)
[14:43:31] *** Joins: greypw2546 (~greypw254@grey.pw)
[14:54:55] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[14:56:20] *** Quits: ypszilon (~ypszilon@user/ypszilon) (Quit: ᮮ)
[14:56:48] *** Joins: ypszilon (~ypszilon@user/ypszilon)
[14:59:43] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:00:54] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[15:02:11] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:05:20] *** Quits: han-solo (~han-solo@user/han-solo) (Ping timeout: 252 seconds)
[15:07:23] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[15:09:57] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:695f:39aa:2b30:7e5b) (Ping timeout: 240 seconds)
[15:12:34] *** Joins: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net)
[15:14:00] <prologic> FYI I solved the problem. Had to set Access-Control-Allow-Origin and Access-Control-Allow-Headers no both my server's GET and OPTIONS handlers -- initially only had it on my GEt handler, so preflight checks were failing and that wasn't clear to me
[15:14:35] <prologic> I wish I could disable CORS entirely in my https://go-app.dev written Wasm app, but it seems I can't becase if I set the js.fetch.mode to no-cors the responses I get back are filtered out and otherwuse useless
[15:17:23] *** Quits: mohan43u (~mohan@user/mohan43u) (Quit: WeeChat 3.4.1)
[15:19:26] *** Joins: someone235 (uid419897@id-419897.ilkley.irccloud.com)
[15:21:00] *** Joins: han-solo (~han-solo@user/han-solo)
[15:21:14] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:22:59] <mickey> i need a very efficient way of crawling over a million web pages and fetching each page's <title> and/or "header". ideas?
[15:23:52] <bpalmer> look into parsing robots.txt to make sure you're allowed, and then see the HTTP HEAD method.
[15:24:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:24:18] <mickey> so it's 2 queries at least per url?
[15:25:08] <bpalmer> robots.txt is for an entire site
[15:25:15] <mickey> i assume it would make sense to cache the robots.txt of each domain
[15:25:38] <mickey> im mostly concerned about sites that use webpack or similar and would not have an easily scrapeable <title> or <h1>
[15:25:43] <bpalmer> (I mean, robots.txt is advisory, but it's the polite/well-behaved thing to do)
[15:26:03] <mickey> yeah well its for a research paper so politically correctness is needed here
[15:26:05] *** Joins: rcernin (~rcernin@101.189.129.123)
[15:26:16] <mickey> so thanks for that tip
[15:26:17] <bpalmer> oh, actually, you do need the body, so  a full GET is required
[15:26:34] <mickey> pft. what can i gather from a HEAD?
[15:26:36] <bpalmer> sorry, HEAD is for http headers, not the HTML headers. I don't know what I was thinking.
[15:26:53] <mickey> yeah thought so
[15:27:21] <mickey> that's gonna be a lot of traffic. would it make sense to only read the first n bytes though?
[15:27:45] <bpalmer> you can also take a look at commoncrawl.org
[15:29:08] <bpalmer> A million webpages shouldn't be *that* much traffic -- since you're programmatically requesting these, you dont' have to download things like external images/video/audio or javascript, which drastically cuts down on the bandwidth required.
[15:29:36] <mickey> and how would you handle webpack and alike?
[15:29:53] <mickey> you know these one-line extremely long js code that generates the page?
[15:30:11] *** Joins: toulene3 (~toulene@user/toulene)
[15:30:22] <bookworm> ignore, get on with your life? It's either that or js emulation
[15:30:55] <bookworm> Google has an indexer that runs some parts of js to index sites iirc
[15:31:03] <bookworm> might be publicly available
[15:31:22] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 272 seconds)
[15:31:23] *** toulene3 is now known as toulene
[15:32:16] <mickey> commoncrawl seems very interesting, but it requires storing many tb of data which i dont have the resources for
[15:32:43] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng32-54fbf8-224.dhcp.inet.fi)
[15:32:49] <mickey> ultimately i'm looking for a binary value if the page is accessible or not, and the page's title and/or header
[15:34:06] <albertito> mickey: I'd expect the vast majority of websites to have a decent title without requiring a lot of js on /. So I would do the lazy thing, do a pass, and only worry if you see a lot of sites with missing data
[15:35:40] <bpalmer> you can also just log the ones that are missing data to come back later and do a more expensive crawl (e.g., throwing a selenium instance at the problem)
[15:36:23] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[15:36:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:38:34] <zutt> a sidenote: many sites offer pre-rendered page for bots too, as it's more preferred by google/bing/whatever-bots
[15:38:58] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[15:39:01] <zutt> https://developers.google.com/search/docs/advanced/javascript/dynamic-rendering
[15:39:26] <zutt> ..but many sites opt out of this kind of SEO
[15:44:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:49:29] *** Parts: prologic (~prologic@mail.mills.io) (Textual IRC Client: www.textualapp.com)
[16:00:21] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 256 seconds)
[16:04:08] *** Joins: vimal (~vimal@2a02:a210:9641:8780:c1c8:67bc:35b:91da)
[16:04:18] <mickey> bpalmer are you aware of something like commoncrawl but for url shorteners? specifically twiter's t.co/ links? that would save me a large chunk of http requests
[16:05:00] *** Quits: llorllale (~llorllale@198.98.119.85) (Ping timeout: 240 seconds)
[16:05:20] <bpalmer> afraid not.
[16:05:27] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:05:49] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:06:06] *** Joins: retux (~user@dyndsl-085-016-037-042.ewe-ip-backbone.de)
[16:10:25] <retux> I have C++ library which I link into my Go binary. I use the following cgo directive: #cgo linux,amd64 LDFLAGS:  -L${SRCDIR} -L${SRCDIR}/linux-x86_64  -lm -lstdc++ -ltinysplinego   `tinysplinego` is my library. Because it is a static library I also need to link `m` and `stdc++`. For some reasons this works on my machine but in GitHub actions this fails with missing references to things in libstdc++ and libm. What could go wrong here?
[16:11:14] *** Joins: mohan43u (~mohan@user/mohan43u)
[16:11:37] <retux> Here is the link to the failing GitHub actions job: https://github.com/msteinbeck/tinyspline/runs/5691021464?check_suite_focus=true
[16:15:11] <fizzie> Could be an ordering issue. Traditional Unix linkers process `-lfoo` flags by only including objects that are referred by things seen *before* that on the command line, so if all the libm / libstdc++ references are in libtinysplinego, `-lm -lstdc++ -ltinysplinego` would just skip the first two, and you'd need `-ltinysplinego -lm -lstdc++` instead. (I don't know if that applies in a CGo context,
[16:15:13] <fizzie> but it's definitely a thing in general.)
[16:19:18] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[16:21:40] *** Joins: han-solo_ (~han-solo@user/han-solo)
[16:22:09] <fizzie> Compare a non-Go example: https://0x0.st/oNFj.txt
[16:22:14] *** Quits: han-solo (~han-solo@user/han-solo) (Killed (NickServ (GHOST command used by han-solo_)))
[16:22:19] *** han-solo_ is now known as han-solo
[16:24:12] <retux> fizzie: I will try that, thanks.
[16:26:50] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[16:32:08] *** Joins: whaley (~whaley@097-082-197-228.res.spectrum.com)
[16:32:10] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:32:25] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:34:14] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Quit: WeeChat 3.0)
[16:38:20] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:38:33] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:42:14] <Cork> i need to handle a set of different paths as different users. Anyone know of a decent way to do that in go without spawning child processes?
[16:45:41] *** Quits: rcernin (~rcernin@101.189.129.123) (Ping timeout: 256 seconds)
[16:49:01] *** Joins: rcernin (~rcernin@101.189.129.123)
[16:50:09] <retux> fizzie: Changing the link order fixes the issue. Thanks.
[16:51:12] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[16:53:09] *** Quits: muesli (~muesli@fribbledom.com) (Quit: NO CARRIER)
[16:53:09] *** Quits: penguwin (~penguwin@fribbledom.com) (Quit: NO CARRIER)
[16:53:42] *** Joins: muesli (~muesli@fribbledom.com)
[16:53:49] *** Joins: penguwin (~penguwin@fribbledom.com)
[16:54:47] *** Joins: Atque (~Atque@user/atque)
[17:03:59] *** Joins: ustedes (~whaley@097-082-197-228.res.spectrum.com)
[17:07:33] *** Quits: whaley (~whaley@097-082-197-228.res.spectrum.com) (Ping timeout: 256 seconds)
[17:14:08] *** Quits: rcernin (~rcernin@101.189.129.123) (Quit: WeeChat 3.4.1)
[17:20:03] *** Quits: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net) (Quit: WeeChat 3.4)
[17:20:17] *** Joins: ekathva (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[17:20:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:20:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:23:49] *** Joins: Maxattax (~max@50-195-160-193-static.hfc.comcastbusiness.net)
[17:29:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:31:11] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[17:32:21] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[17:35:33] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Ping timeout: 256 seconds)
[17:40:29] *** Quits: saschagrunert (~saschagru@46.128.124.48) (Remote host closed the connection)
[17:47:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[17:47:37] *** Joins: dr0n (~nabromov@97e36665.skybroadband.com)
[17:48:14] *** Joins: shtirlic (~shtirlic@184.22.191.187)
[17:52:41] *** Joins: csmiga (~Thunderbi@ec2-52-207-160-196.compute-1.amazonaws.com)
[17:58:25] *** Joins: treeford (~charleste@user/treeford)
[18:02:24] *** Joins: Compy_ (~compy@user/compy)
[18:02:57] *** Quits: moog_ (~moog@107.77.244.51) (Ping timeout: 240 seconds)
[18:02:59] *** Joins: lainon (~lainon@2601:7c0:c500:4d20::2ff6)
[18:06:14] *** Quits: Compy (~compy@user/compy) (Ping timeout: 260 seconds)
[18:06:21] *** Compy_ is now known as Compy
[18:12:53] <synthmeat> i'm still gobsmacked by gob, this thing is wonderful!
[18:13:46] *** Quits: andlabs (~andlabs@pool-72-69-84-9.nycmny.fios.verizon.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:17:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:17:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:22:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[18:23:11] *** Joins: warblr (~warblr@ip-67-213-71-181.fibre.fibrestream.ca)
[18:34:31] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:34:39] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 268 seconds)
[18:34:56] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[18:35:39] *** Joins: anarcat (~anarcat@user/anarcat)
[18:35:43] <anarcat> hi
[18:36:02] <anarcat> so i have this program i built for the Kobo ebook readers, which i've been able to build statically and run under there for a while
[18:36:06] *** Joins: ekathva_ (~ekathva@85-76-47-198-nat.elisa-mobile.fi)
[18:36:11] <anarcat> but since the Debian buster (?) upgrade, the build doesn't work anymore
[18:36:18] *** Quits: ekathva (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Remote host closed the connection)
[18:36:28] <anarcat> even if i really really build it completely static, the runtime complains about the kernel being too old (!)
[18:36:43] <anarcat> and yes, it's stupidly old (2.6!), but is there a workaround for this? maybe disable some knob or something?
[18:37:46] <siXy> You're running on kernel 2.6?!?!
[18:37:47] *** Joins: andlabs (~andlabs@2605:ef80:8087:1a5:a128:66b3:693c:ac1e)
[18:38:21] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Remote host closed the connection)
[18:38:58] *** Quits: idstam (~Thunderbi@194.103.157.17) (Ping timeout: 268 seconds)
[18:40:21] *** Quits: otis^ (~otis@96-91-136-49-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[18:45:28] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[18:46:06] <anarcat> i guess i am yeah
[18:46:11] <anarcat> many Kobo e-readers do
[18:46:14] <anarcat> it's disturbing
[18:46:31] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:47:04] <anarcat> https://wiki.mobileread.com/wiki/Aura is the actual device
[18:47:07] <siXy> I'm afraid that is unlikely to work. You could downgrade to a really old go version and give it a go, but that kernel is now old enough to vote.
[18:47:52] <anarcat> i know
[18:48:28] *** Quits: kochchef (~quassel@80.146.255.46) (Quit: brb)
[18:48:40] <anarcat> it seems the golang:stretch docker image is the one i'm currently building with
[18:48:51] *** Joins: moog (~moog@107.126.53.243)
[18:49:58] <MD87> Try golang:1.17-stretch?
[18:50:28] *** Joins: moog_ (~moog@98.97.84.79)
[18:50:32] <MD87> If you don't specify the version number you'll just get the latest, and Go 1.18's release notes say "Go 1.18 requires Linux kernel version 2.6.32 or later."
[18:50:59] *** Joins: kochchef (~quassel@80.146.255.46)
[18:51:42] <LawnGnome> Also worth noting that only x86 and x86-64 builds support kernel version 2.6 at all; other architectures have higher requirements, per https://github.com/golang/go/wiki/MinimumRequirements and https://github.com/golang/go/wiki/Linux.
[18:52:47] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 260 seconds)
[18:53:15] *** Quits: moog (~moog@107.126.53.243) (Ping timeout: 260 seconds)
[18:55:13] *** Quits: moldorcoder7 (~moldorcod@37.120.143.29) (Ping timeout: 256 seconds)
[18:55:55] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[18:56:31] *** Quits: andlabs (~andlabs@2605:ef80:8087:1a5:a128:66b3:693c:ac1e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:57:30] *** Quits: califax (~califax@user/califx) (Remote host closed the connection)
[18:59:26] <anarcat> MD87: oh i think that image still works
[18:59:38] <anarcat> what i'm saying is it doesn't work in buster or bullseye with more recent golang versions
[18:59:51] <anarcat> and i'm worried that i won't be able to build newer versions of deps with that older release
[19:00:05] <anarcat> LawnGnome: ah yeah, that might be my problem here: this is an arm box too
[19:00:31] *** Joins: ekathva__ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[19:00:55] *** Quits: m5zs7k (aquares@web10.mydevil.net) (Read error: Connection reset by peer)
[19:00:57] *** Quits: redlegion (sid429547@id-429547.ilkley.irccloud.com) ()
[19:01:00] *** Joins: m5zs7k_ (~m5zs7k@web10.mydevil.net)
[19:01:06] *** Joins: moldorcoder7 (~moldorcod@37.120.143.30)
[19:01:34] *** m5zs7k_ is now known as m5zs7k
[19:01:47] <anarcat> https://github.com/golang/go/wiki/Linux doesn't mention any "final version support" actually
[19:01:47] *** Joins: on^ (~on@96-91-136-49-static.hfc.comcastbusiness.net)
[19:01:49] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca)
[19:01:50] <anarcat> so there's a bit missing there
[19:02:19] <anarcat> maybe i should try GOARM=5 or =6 or something
[19:03:03] *** Quits: ekathva_ (~ekathva@85-76-47-198-nat.elisa-mobile.fi) (Ping timeout: 260 seconds)
[19:05:04] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:08:21] <anarcat> the kernel is actually Linux kobo 2.6.35.3-850-gbc67621+ #2049 PREEMPT Mon Jan 9 13:33:11 CST 2017 armv7l GNU/Linux
[19:08:28] <anarcat> and yes, that was built 5 years ago (!)
[19:09:43] <siXy> it was released like 18 years ago though
[19:09:52] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[19:09:52] <anarcat> yes
[19:09:58] <anarcat> it's not like i'm the upstream here
[19:10:16] <anarcat> i can't even find the kernel in the filesystem on that thing
[19:10:35] <siXy> that's fair. If you can build with go 1.17 obviously just do that, I don't think there will be much support for making go 1.18 work on such an old kernel sadly
[19:11:14] <anarcat> it's kind of amazing that docker image still exists at all
[19:11:21] *** Quits: habamax (~habamax@user/habamax) (Quit: WeeChat 3.0)
[19:11:46] *** Quits: avakand (~avakand@static.164.226.201.195.clients.your-server.de) (Remote host closed the connection)
[19:11:58] *** Joins: avakand_ (~avakand@static.164.226.201.195.clients.your-server.de)
[19:12:05] *** Quits: avakand_ (~avakand@static.164.226.201.195.clients.your-server.de) (Remote host closed the connection)
[19:12:16] *** Joins: avakand_ (~avakand@static.164.226.201.195.clients.your-server.de)
[19:12:51] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Quit: Y'all have a nice day.)
[19:13:36] <anarcat> oh weird, golang:stretch *is* golang 1.18
[19:13:47] <anarcat> i wonder if this still works then, i haven't actually tried a build for a while
[19:15:03] <anarcat> amazingly, this is the latest release for that device, from 2022-01-20
[19:15:20] <anarcat> i wonder how that works, they probably have that kernel binary sitting there
[19:15:31] <anarcat> or maybe they just don't ship a kernel at all and they can't update it after the device is sold
[19:15:53] *** Joins: kakysha (~kakysha@user/kakysha)
[19:17:07] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[19:17:18] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:17:20] *** Quits: shtirlic (~shtirlic@184.22.191.187) (Read error: Connection reset by peer)
[19:17:40] *** Joins: shtirlic (~shtirlic@184.22.191.187)
[19:21:22] <anarcat> damn i have been gone for a long time... golint is gone?
[19:22:05] <anarcat> oh nevermind
[19:22:05] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:22:47] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:24:00] *** Quits: kakysha (~kakysha@user/kakysha) (Quit: WeeChat 3.4.1)
[19:24:18] *** Joins: kakysha (~kakysha@user/kakysha)
[19:25:01] <anarcat> this code has not aged well
[19:26:22] *** Joins: hackers (~self@user/hackers)
[19:26:51] *** Quits: azidhaka (~azidhaka@user/azidhaka) (Quit: azidhaka)
[19:28:14] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[19:32:33] *** Quits: foxtrot (~foxtrot@user/foxtrot) (Quit: Goodbye)
[19:33:34] *** Joins: foxtrot (~foxtrot@user/foxtrot)
[19:35:34] <anarcat> good news: the code compiled under golang:1.18-stretch actually runs
[19:35:39] *** Quits: CaryHartline (~CaryHartl@cpe-76-185-112-162.tx.res.rr.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[19:35:50] <anarcat> so it seems it's really when golang compiles under kernel A and runs under kernel B that it's unhappy
[19:36:29] <anarcat> where kernel A is 5.16 and B is 2.6.35.3-850-gbc67621+omgwtfareyoudoing
[19:37:28] <siXy> hah
[19:37:31] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[19:37:39] <siXy> I mean, I wouldn't say that was particularly *surprising*...
[19:39:01] <anarcat> well no
[19:39:02] <anarcat> but still
[19:39:13] <anarcat> i would love to be able to run this regardless of the source kernel
[19:39:21] <anarcat> i can't help but think there's some magic knob that could do the right thing here
[19:39:35] <anarcat> i have another unrelated question...
[19:39:40] <anarcat> golint is complaining about: plato.go:23:30: expected ';', found 'IDENT' _532_800
[19:39:50] <anarcat> in const fat32EpochSeconds = 315_532_800
[19:39:57] <anarcat> what am i doing wrong?
[19:40:12] <anarcat> are _ separators unallowed now?
[19:40:54] <kakysha> why not use golangci-lint?
[19:40:57] <siXy> anarcat: I think something else is wrong: https://go.dev/play/p/HtXMlw3rwMx
[19:41:09] <siXy> the line you pasted works fine on the playground
[19:41:11] <kakysha> golint is deprecated
[19:41:39] <anarcat> kakysha: because i did not know it existed
[19:41:50] <kakysha> you welcome then :)
[19:41:51] <anarcat> kakysha: also it's not in debian stretch :p
[19:42:13] <anarcat> siXy: oh it works, it's just golint that's unhappy with it
[19:42:13] <kakysha> staticcheck?
[19:42:33] <anarcat> siXy: https://gitlab.com/anarcat/wallabako/-/blob/main/plato.go#L23 is the context
[19:42:45] <anarcat> kakysha: what's that?
[19:43:10] <kakysha> the replacement for golint that is adviced by the golint itself :p
[19:43:20] <anarcat> not *that* version of golint :p
[19:43:26] <anarcat> not in debian either, as far as i can tell
[19:43:40] <siXy> Oh, sorry I missed you were talking about the lint too. I'd use go vet instead.
[19:43:48] <siXy> tool*
[19:43:54] <anarcat> i use go vet too
[19:44:02] <anarcat> back in those days, you'd use both, iirc
[19:44:05] *** Joins: Guest87 (~Guest87@2a02:c7f:582d:5100:2df6:19c9:e0a:dc30)
[19:44:40] <kakysha> at this time, you use golangci-lint with ~10 linters enabled
[19:45:51] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com)
[19:46:06] *** Quits: ghost08 (~ghost08@adsl-dyn-50.95-102-48.t-com.sk) (Quit: WeeChat 3.4.1)
[19:46:22] <anarcat> thanks, but that is also not in debian (let alone debian stretch)
[19:46:30] <anarcat> i'm sorry i'm not being very collaborative am i :p
[19:46:35] <anarcat> the constraints on this project are ridiculous
[19:46:53] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[19:47:45] <kakysha> I mean its in go, can't you `go install` it?
[19:48:23] <anarcat> ... oh dear
[19:48:25] <anarcat> what's go install?
[19:48:29] <anarcat> isn't it go get anymore?
[19:48:37] <ikke> no
[19:48:42] <kakysha> they split it in two commands
[19:48:51] <anarcat> haha wow
[19:48:59] <ikke> go get is now just for adding modules as dependencies
[19:49:43] <kakysha> you've been buried for so long it seems :)
[19:50:07] *** ustedes is now known as whaley
[19:52:02] <anarcat> yeah, it's been years, it's weird
[19:52:14] <anarcat> especially considering the golang "it will still compile" garantees ;)
[19:52:15] <A_Dragon> theres now actual package manglement
[19:52:17] <anarcat> but i guess it *does* compile
[19:52:25] <A_Dragon> and generics!
[19:52:26] <anarcat> it just doesn't *run* :p
[19:52:29] <A_Dragon> it doesnt?
[19:52:32] <anarcat> oh dear yeah generics, i heard of that
[19:52:38] <anarcat> A_Dragon: not on a really, really old kernel
[19:52:40] <A_Dragon> if you found a backwards compat issue please report it
[19:52:45] <anarcat> *unless* it's *also* built on a really really old kernel
[19:52:53] <A_Dragon> oh yes well thats cgo stuff
[19:53:00] <A_Dragon> try CGO_ENABLED=0 go buikd ...
[19:53:10] <A_Dragon> build*
[19:53:18] <anarcat> A_Dragon: sqlite
[19:53:22] <anarcat> needs cgo, iirc
[19:53:31] <siXy> it does indeed
[19:53:31] <A_Dragon> good luck have fun backwards compat doesnt apply to external cgo
[19:53:37] <anarcat> yeep
[19:53:49] <anarcat> if anyone has suggestions for the sqlite stuff, i'm all ears :p
[19:53:58] <kakysha> https://github.com/cvilsmeier/sqinn-go
[19:54:23] <anarcat> uh!
[19:54:54] <anarcat> that uses a squinn binary
[19:55:01] <anarcat> good luck getting that to run on the kobo :p
[19:55:14] <anarcat> "SQLite in pure go" sounds a bit dishonest there
[19:55:30] <anarcat> you could probably make "sqlite in pure go" by shelling to the sqlite binary too, and that wouldn't solve my problem either :p
[19:55:45] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 252 seconds)
[19:56:19] <anarcat> https://github.com/alicebob/sqlittle seems more promising and fits my (readonly) use case
[19:56:34] <kakysha> your problem comes down to "how to cross-compile C" then
[19:56:54] <kakysha> or that ^
[19:57:00] <anarcat> yeah
[19:57:13] <anarcat> for now, tbh, docker works well enough :/
[19:57:19] <anarcat> it's punting the problem forward, but still
[19:57:23] *** Guest1832 is now known as xzr
[19:57:34] <ikke> Wasn't there a lib that transpiled sqlite in Go?
[19:57:45] <kakysha> also, (that is: deal with reading single tables; don't even try joins or SQL or query planning)
[19:57:55] <kakysha> not a SQLite anymore
[19:58:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:58:59] <ikke> https://pkg.go.dev/modernc.org/sqlite
[20:02:41] <anarcat> nice
[20:02:44] <anarcat> that looks very promising, thanks!
[20:02:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[20:05:09] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-08-70-29-36-27.dsl.bell.ca) (Ping timeout: 256 seconds)
[20:05:43] *** Quits: moldorcoder7 (~moldorcod@37.120.143.30) (Ping timeout: 256 seconds)
[20:11:01] *** Joins: moldorcoder7 (~moldorcod@37.120.143.28)
[20:14:59] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[20:15:41] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[20:15:51] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[20:20:50] *** Joins: treeford (~charleste@user/treeford)
[20:21:47] *** Joins: idstam (~Thunderbi@185.176.247.4)
[20:26:50] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com)
[20:30:57] *** Joins: independent56 (~independe@2.26.38.133)
[20:34:43] *** Quits: amigan (dramoray@dtvax.dynatron.me) (Remote host closed the connection)
[20:34:53] *** Joins: amigan (dramoray@dtvax.dynatron.me)
[20:35:01] <kakysha> TIL append mutates the provided slice if it has enough capacity to fit new value
[20:36:33] *** Joins: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net)
[20:38:20] *** Quits: xse (~xse@user/xse) (Remote host closed the connection)
[20:39:13] <seebs> yes
[20:40:06] *** Joins: xse (~xse@user/xse)
[20:41:03] <anarcat> btw i filed my compilation issue in https://gitlab.com/anarcat/wallabako/-/issues/43
[20:41:10] <kakysha> sounds reasonable, but the most common use case of appending to full slice makes you work out a bad habit that returned value of append is the only modified one
[20:41:15] <anarcat> and https://gitlab.com/cznic/sqlite seems the most promising one
[20:41:38] *** Joins: beholders_eye (~weechat@2804:1b3:70c2:55b8:132a:d761:dcab:904c)
[20:42:08] *** Quits: Guest87 (~Guest87@2a02:c7f:582d:5100:2df6:19c9:e0a:dc30) (Quit: Client closed)
[20:43:57] *** Quits: treeford (~charleste@user/treeford) (Ping timeout: 240 seconds)
[20:44:17] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:44:34] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[20:47:26] *** Quits: R2robot (~R2robot@user/r2robot) (Ping timeout: 252 seconds)
[20:48:43] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[20:52:27] <kakysha> also why can't you do the following: `append([]int{}, slice1..., slice2...)`
[20:53:00] <kakysha> seems like syntactic sugar is not sweet enough
[20:53:10] <seebs> append takes a destination slice and a source slice
[20:53:15] <seebs> it does not take multiple source slices
[20:53:43] <kakysha> it has variadic number of params, and I'm trying to append to one source slice
[20:53:44] <seebs> if you have multiple arguments, they have to be of the type-sliced, not of the slice type, and then it builds a slice of those to append.
[20:53:59] <seebs> okay, so, here's the trick: actually, the ... isn't the syntactic sugar form
[20:54:07] <seebs> the *non* ... form is the syntactic sugar
[20:54:22] <seebs> append(dst, a, b, c) is syntactic sugar for append(dst, []int{a, b, c}...)
[20:54:47] <seebs> the "real" type of a "variadic" function is a function with exactly one more argument, of slice type.
[20:55:11] <seebs> append takes exactly two slices. it allows you to write one of them as a bunch of values and it'll hide the slice-wrapping for you
[20:55:43] <kakysha> aha, I see, thank you
[20:56:06] *** Joins: Guest87 (~Guest87@2a02:c7f:582d:5100:2df6:19c9:e0a:dc30)
[20:57:04] *** Quits: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com) (Quit: My iMac has gone to sleep. ZZZzzz…)
[21:00:55] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[21:03:04] *** Joins: gpeskens (~gpeskens@2001:985:7aa4:1:5acf:73bc:fb6f:a19)
[21:06:54] *** Joins: tyson2 (~user@64.137.152.177)
[21:08:08] *** Quits: dr0n (~nabromov@97e36665.skybroadband.com) (Quit: WeeChat 3.3)
[21:11:28] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[21:14:56] *** Joins: R2robot (~R2robot@user/r2robot)
[21:14:56] *** Quits: shka (~herr@109.231.3.55) (Read error: Connection reset by peer)
[21:15:17] *** Joins: shka (~herr@109.231.3.55)
[21:19:56] *** Joins: treeford (~charleste@user/treeford)
[21:21:48] *** Joins: kakysha_ (~kakysha@user/kakysha)
[21:23:06] *** Joins: rawley (~rawley@142.99.241.242)
[21:24:34] *** Quits: kakysha (~kakysha@user/kakysha) (Ping timeout: 260 seconds)
[21:30:45] <pjs> I don't know how to ask what it is that I want to do so here's a snippet, is there a way to get the *Final instance in printMe() here? https://go.dev/play/p/AC-j7QIEavb
[21:36:53] *** Joins: Asgaroth (~Asgaroth@93.107.191.92)
[21:36:53] *** Quits: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net) (Read error: Connection reset by peer)
[21:38:05] *** Joins: ekathva_ (~ekathva@mobile-access-5672c1-60.dhcp.inet.fi)
[21:39:15] <GinjaNinja32> pjs, no; the embedded Bar's methods can be called as if they were defined on Final, but the methods can only see the Bar - if you make the type assertion `*Bar` it'll work, but that's as high up as you can go
[21:39:33] <lilgopher> The way I see it is that what you pass to printMe is not a Final, it is a Bar: https://go.dev/play/p/leZI9N4VhwK
[21:40:54] *** Quits: ekathva__ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Ping timeout: 260 seconds)
[21:41:12] *** Quits: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net) (Read error: Connection reset by peer)
[21:41:30] <pjs> thanks. That's what I thought. Was just hoping there was some magic I didn't know about
[21:41:36] *** Quits: tyson2 (~user@64.137.152.177) (Remote host closed the connection)
[21:41:37] *** Joins: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net)
[21:42:09] *** Quits: qzio_ (~qzio@198.167.223.200) (Ping timeout: 250 seconds)
[21:42:48] *** Joins: rek2 (~ReK2@static-237-119-226-77.ipcom.comunitel.net)
[21:46:49] *** Joins: shtirlic_ (~shtirlic@184.22.77.202)
[21:47:30] *** Joins: arosen (~arosen@136.146.65.33)
[21:49:59] *** Quits: shtirlic (~shtirlic@184.22.191.187) (Ping timeout: 256 seconds)
[21:50:00] <arosen> Hello I have simple question - I have this: func(idf IdfCheck) foo() int { }, then I am calling it with foo(); when I compile program I am getting  error undefined: foo.
[21:50:24] <arosen> if I define it as func foo() int {}  - it works fine without error.
[21:50:44] <albertito> arosen: that "foo() int {", the "foo()" part, what are you trying to say with it?
[21:51:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[21:51:18] <albertito> arosen: maybe you want to declare the function foo like: "func foo(idf IdfCheck) int {"
[21:53:50] <GinjaNinja32> either of those definitions will require an IdfCheck value to be passed, either as `idf.foo()` or `foo(idf)`, neither will accept just `foo()`
[21:54:38] *** Quits: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[21:55:13] *** Joins: xsteadfastx (~marv@94.31.99.245)
[21:57:10] <arosen> GinjaNinja32: that sounds right
[21:57:29] <arosen> thanks - i need to figure how to best create initial idf value.
[21:59:21] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:59:25] *** Joins: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net)
[22:04:14] *** Quits: rawley (~rawley@142.99.241.242) (Ping timeout: 260 seconds)
[22:04:55] <LambdaComplex> arosen: probably either make the zero value useful (if it's possible) or make a NewIdf() function
[22:05:56] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Ping timeout (120 seconds))
[22:06:10] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:06:34] <LambdaComplex> or, if the package is entirely dedicated to idf, it could even just be New()
[22:06:48] <LambdaComplex> i.e. invoked as idf.New()
[22:12:11] *** Quits: Guest87 (~Guest87@2a02:c7f:582d:5100:2df6:19c9:e0a:dc30) (Quit: Client closed)
[22:14:14] *** Joins: Guest87 (~Guest87@2a02:c7f:582d:5100:e93d:8ba1:b75c:de4e)
[22:15:41] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:15:57] *** Joins: bindu (~bindu@user/bindu)
[22:19:09] *** Quits: Guest87 (~Guest87@2a02:c7f:582d:5100:e93d:8ba1:b75c:de4e) (Quit: Client closed)
[22:20:39] <arosen> Thanks for the help I got it working :)
[22:22:47] *** Quits: xsteadfastx (~marv@94.31.99.245) (Ping timeout: 260 seconds)
[22:23:33] <arosen> I have next question - I have unit test and function like:  func(idf IdfCheck) foo(d *Data) { d.Logger.WithFields(...) } -> I have test setup where I can pass in d := Data{ Logger: LoggerMOCK() }
[22:24:04] <arosen> I am wondering how can i pass in a mock() for the Logger attribute so my mock is called?
[22:24:17] *** Joins: yakiza (~yakiza@cpc91202-cmbg18-2-0-cust102.5-4.cable.virginm.net)
[22:25:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[22:27:47] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[22:28:18] <ikke> What is calling IdfCheck.foo()?
[22:33:26] <arosen> ikke:  is getting called in tt.Run() {} for test
[22:34:04] <arosen> there I am passing in &d which has the Logger which can be patched with a mock logger there
[22:37:39] <ikke> soo
[22:37:45] <ikke> what's your question?
[22:41:10] *** Joins: Guest87 (~Guest87@2a02:c7f:582d:5100:7921:1c31:e1df:8102)
[22:42:50] *** Quits: jcajka (~jcajka@ip-86-49-255-10.net.upcbroadband.cz) (Quit: Leaving)
[22:51:45] *** Joins: tyson2 (~user@198.98.109.220)
[22:52:29] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:52:44] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:58:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:01:06] *** Quits: zstix (~zstix@c-76-115-137-165.hsd1.or.comcast.net) (Quit: Goodbye)
[23:02:12] *** Joins: liefer (~liefer@user/liefer)
[23:03:06] *** Quits: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[23:04:33] *** Quits: bertvvvs (~bertvvvs@user/bertvvvs) (Ping timeout: 256 seconds)
[23:05:43] *** Joins: LtHummus (~lthummus@97-126-97-69.tukw.qwest.net)
[23:05:57] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[23:07:34] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:08:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:10:26] *** Quits: kakysha_ (~kakysha@user/kakysha) (Ping timeout: 252 seconds)
[23:13:09] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:13:13] *** Joins: bertvvvs (~bertvvvs@user/bertvvvs)
[23:16:58] *** Joins: CaryHartline (~CaryHartl@2603-8080-6a0e-8d88-18f6-e9d1-2e71-ac11.res6.spectrum.com)
[23:18:03] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Quit: WeeChat 3.4)
[23:18:25] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:19:31] *** Quits: tyson2 (~user@198.98.109.220) (Ping timeout: 245 seconds)
[23:21:36] *** Quits: justOkay (~justache@user/justache) (Read error: Connection reset by peer)
[23:22:49] *** Joins: BrunoFontes (~bruno@2a02:c207:2026:6264::1)
[23:23:09] *** Joins: justOkay (~justache@user/justache)
[23:23:37] *** Joins: andlabs (~andlabs@2a00:79e1:abc:1a0a:8485:7d7a:d119:be7f)
[23:25:30] *** Joins: carlavilla (~carlavill@188.26.215.213)
[23:26:02] *** Quits: carlavilla (~carlavill@188.26.215.213) (Remote host closed the connection)
[23:27:25] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 240 seconds)
[23:27:50] *** Joins: carlavilla (~carlavill@2a0c:5a84:3808:de00:21f:16ff:fe0f:275a)
[23:32:06] *** Quits: ekathva_ (~ekathva@mobile-access-5672c1-60.dhcp.inet.fi) (Read error: Connection reset by peer)
[23:33:29] *** Joins: ekathva_ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051)
[23:34:29] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[23:35:08] *** Quits: ekathva_ (~ekathva@2001:999:409:7be:f8de:27d3:b79e:f051) (Client Quit)
[23:46:49] *** Joins: jpw (~jpw@user/jpw)
[23:49:32] *** Quits: teasea (~teasea@user/teasea) (Quit: teasea)
[23:50:07] *** Joins: teasea (~teasea@user/teasea)
