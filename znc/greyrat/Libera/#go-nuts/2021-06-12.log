[00:00:33] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[00:02:19] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 272 seconds)
[00:02:49] *** Joins: c10l (~c10l@89.34.167.207)
[00:03:35] *** Quits: dmathieu (~textual@pop.92-184-110-0.mobile.abo.orange.fr) (Ping timeout: 272 seconds)
[00:03:37] *** Quits: kindablue (znc@irc.tpurist.com) (Quit: System Rebooting..)
[00:04:29] *** Joins: kindablue (znc@irc.tpurist.com)
[00:15:01] *** Joins: Garb0 (~Garb0@user/garb0)
[00:16:50] *** Joins: Crassus (~Crassus@user/crassus)
[00:19:26] *** Joins: nahamu (~nahamu@tailscale/contributor/nahamu)
[00:20:04] <nahamu> What's the right avenue to explore to get the race detector built for solaris/illumos?
[00:21:12] <b0nn> If there's not a target already, then you need to ask on the golang-dev mailing list how to do it yourself, or raise an issue for them to consider doing it
[00:21:25] <nahamu> b0nn: thanks!
[00:21:48] *** Joins: dr0n (~nabromov@94.11.23.235)
[00:23:02] <b0nn> https://groups.google.com/g/golang-dev
[00:24:00] <b0nn> hmm - I wonder if the golang-nuts mailing list is the better place to start
[00:24:06] *** Joins: sgen (~sgen@142.186.76.30)
[00:24:32] <b0nn> -nuts is for how to /use/ Go, which this would fall under -dev is for how Go works, which this also kinda falls under
[00:26:12] *** Quits: edrocks (~Ed@user/edrocks) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:31:11] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1006) (Quit: ZNC 1.8.2 - https://znc.in)
[00:33:05] *** Quits: icholy (~icholy@68.71.18.45) (Quit: Lost terminal)
[00:43:15] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:44:33] *** Joins: andlabs (~andlabs@68.237.68.71)
[00:44:43] *** Quits: Garb0 (~Garb0@user/garb0) (Ping timeout: 244 seconds)
[00:45:01] *** Joins: Garb0 (~Garb0@user/garb0)
[00:45:09] <Garb0> He fellas.
[00:45:13] <Garb0> hey*
[00:45:26] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 244 seconds)
[00:48:48] <Garb0> If this is useful to anyone, a couple of ways to effectively reduce your binary's size all the way down
[00:49:51] <Garb0> if you're using regular go, build it with -ldflags="-s -w" then pack it with `upx --lzma --best`
[00:50:24] <Garb0> this reduced a 3.0MB binary all the way down to 500kb, pretty nice, but here's something better
[00:50:46] *** Joins: eck0__ (~Android@mobile-166-173-63-7.mycingular.net)
[00:50:49] <Garb0> switch up to gcc-go and just roll a ` -compiler gccgo -gccgoflags "-s -w"` along
[00:51:15] <Garb0> the result? a 50kb executable.
[00:51:55] <thinkofher> does gcc-go support cross compilation?
[00:52:24] <Garb0> Hell yeah brother, GOOS=windows gives a 49kb executable.
[00:52:57] <Garb0> in fact, you cannot upx the gccgo binary built for linux, but you can for windows!
[00:53:30] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 244 seconds)
[00:54:22] <Garb0> Actually, scratch that, you can use the --ultra-brute flag for UPX to bring it down to 15KB111
[00:54:55] <thinkofher> are there some downsides of these operations?
[00:55:50] <thinkofher> I mean, can these affect somehow how the program works?
[00:55:58] <Garb0> no idea, i have made this little reverse shell that uses `net` and `os` and it works
[00:56:22] <Garb0> on both linux and windows, in fact.
[00:56:37] <Garb0> i wouldn't worry about it for small stuff, thinkofher.
[00:57:35] <thinkofher> hmm, by small stuff you mean programs that use only stdlib
[00:57:40] <thinkofher> ?
[00:59:25] <Garb0> this fact is way even cooler: virustotal used to detect the regular binary, several hits, even.
[00:59:35] *** Quits: eck0__ (~Android@mobile-166-173-63-7.mycingular.net) (Read error: Connection reset by peer)
[00:59:42] <Garb0> after packing this thing to oblivion, no AV detects it!
[01:00:16] *** Joins: eck0 (~Android@mobile-166-173-63-7.mycingular.net)
[01:01:06] <tristero> Garb0: but with gccgo it will use DLLs, making it less likely to run on your target
[01:01:44] <src> when you type "close a channel" and somehow expect read about Go and not youtube
[01:01:52] <src> society got its priorities all wrong :P
[01:02:01] <src> *expect to
[01:02:10] <Garb0> tristero: tbh what are the odds, it works on both my winLTSC and winPro VMs
[01:02:38] <b0nn> src: I add "Golang" to all my searches, so much so that Google now asks me if I meant to add it
[01:03:09] <Garb0> b0nn: you have been studied by the botnet
[01:03:20] <src> I use ddg :D
[01:03:57] <b0nn> ddg == bing
[01:04:08] <src> afaik it's only semi true
[01:04:24] <src> they used to get their search results from bing, but I think it's a combination (they have their own web crawler as well)
[01:04:39] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:04:40] <src> plus what does it matter, it still doesn't bubble you, results are decent, and doesn't track you across the net
[01:05:39] <b0nn> DuckDuckGo's results are a compilation of "over 400" sources,[46] including Yahoo! Search BOSS, Wolfram Alpha, Bing, Yandex, its own web crawler (the DuckDuckBot) and others.[3][46][47][48] It also uses data from crowdsourced sites, including Wikipedia, to populate knowledge panel boxes to the right of the results
[01:05:48] <b0nn> ^ According to wikipedia
[01:06:54] <ikke> more than halve the time I still have to add !g to get decent results
[01:07:12] <b0nn> What's !g?
[01:07:22] <src> it sends the query to google search
[01:07:25] <Garb0> b0nn: 400 sources...and it's only good for porn.
[01:07:30] <b0nn> oh
[01:08:17] <b0nn> Search is deteriorating though - everyone keeps gaming the engines
[01:08:56] <src> I think it always was a cat and mouse game
[01:09:00] <src> and always will be for that matter
[01:10:13] <src> ikke: I use ddg almost exclusively and have no problem, hear that a lot though
[01:10:23] <b0nn> When I first used Google, 2002 I think, it was a dream come true compared to Yahoo! Alta Vista and Ask Jeeves
[01:10:28] <ikke> often you get very generic search results
[01:11:07] <KirkMcDonald> Let's not forget Excite!
[01:11:29] * b0nn doesn't remember Excite
[01:11:30] <src> ikke: I nerver use google with an account, I also block a lot when browsing (javascripts etc) ; so ddg vs google (not logged in, not being tracked across the net), I don't see that big a difference tbh
[01:11:38] <src> so that might be at play here partly
[01:11:51] <ikke> probably
[01:12:24] <src> ofc if you use google accounts at some points it will be able to customize the search results for you to an extreme level
[01:12:30] <src> and most likely be far superior than anything else
[01:12:37] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:ed84:fad8:49a1:17af) (Quit: Leaving)
[01:13:19] <ikke> it's effective
[01:13:27] <src> I know it is :P
[01:13:45] <ikke> it's anoyingly so
[01:13:54] *** Joins: HellHelix (~hederahel@2804:7f0:3988:65e9:98cc:df1f:8a6:7c25)
[01:16:45] *** Quits: HeraHelix (~hederahel@2804:7f0:3988:65e9:98cc:df1f:8a6:7c25) (Ping timeout: 244 seconds)
[01:18:58] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[01:19:42] *** Joins: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net)
[01:20:59] *** Joins: kwilczynski (sid379192@id-379192.highgate.irccloud.com)
[01:23:12] <qrpnxz> https://play.golang.org/p/ZqqPq7b0UMV
[01:24:17] <lazyreader> fun with RTL unicode points?
[01:25:18] <src> it's not go but obfuscated C https://www.youtube.com/watch?v=QMYfkOtYYlg but this video should've won some sort of youtube award, it's glorious :D
[01:27:11] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Ping timeout: 272 seconds)
[01:29:52] *** Joins: SebastianM (~seba@user/sebastianm)
[01:29:59] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[01:32:27] *** Quits: acidfu (~nicolasbo@2605:8d80:5c0:2815:f5b5:5836:dcfe:53c8) (Ping timeout: 272 seconds)
[01:36:00] *** Joins: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net)
[01:38:19] *** Joins: skrzyp (~skrzyp@skrzyp.net)
[01:40:37] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[01:40:49] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[01:42:18] *** Quits: arcatech (~arcatech@user/arcatech) (Ping timeout: 264 seconds)
[01:42:33] *** Quits: aleph (~aleph@pool-98-116-232-112.nycmny.fios.verizon.net) (Quit: WeeChat info:version)
[01:43:28] *** Quits: CorbaThe1eek (~peter@99-167-204-9.lightspeed.sntcca.sbcglobal.net) (Quit: leaving)
[01:43:31] *** Quits: xavpaice (~quassel@103-96-86-209.novaconnect.nz) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[01:44:36] *** Joins: xav (~quassel@103-96-86-209.novaconnect.nz)
[01:45:09] *** Joins: CorbaTheGeek (~peter@99-167-204-9.lightspeed.sntcca.sbcglobal.net)
[01:47:46] *** Joins: DeltaNova (~DeltaNova@user/deltanova)
[01:52:54] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[01:56:30] *** Quits: jhenson (~jhenson@user/jhenson) (Remote host closed the connection)
[01:58:57] *** Joins: jhenson (~jhenson@user/jhenson)
[02:00:49] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Quit: ZNC 1.8.2 - https://znc.in)
[02:01:55] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:02:13] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[02:03:19] *** Joins: andlabs (~andlabs@68.237.68.71)
[02:15:48] *** Joins: SincereFox (uid337158@user/sincerefox)
[02:16:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[02:18:15] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[02:26:02] *** Joins: absc (~absc@dynamic-adsl-94-34-175-4.clienti.tiscali.it)
[02:27:14] *** Quits: DeltaNova (~DeltaNova@user/deltanova) (Quit: WeeChat 3.0.1)
[02:27:18] *** Joins: cmj (~cmj@68.207.254.124)
[02:28:31] *** Joins: gilesc (~textual@2603-8001-3600-dad7-7061-e63c-c588-c394.res6.spectrum.com)
[02:33:20] *** Joins: Garb0 (~Garb0@user/garb0)
[02:36:52] *** Quits: absc (~absc@dynamic-adsl-94-34-175-4.clienti.tiscali.it) (Remote host closed the connection)
[02:43:25] *** Quits: HellHelix (~hederahel@2804:7f0:3988:65e9:98cc:df1f:8a6:7c25) (Quit: Leaving)
[02:58:30] *** Quits: shka (~herr@109.231.62.239) (Quit: Konversation terminated!)
[02:58:36] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.1)
[02:58:47] *** Parts: welt[m] (~weltspide@2001:470:69fc:105::15e2) ()
[02:58:51] *** Joins: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca)
[02:59:12] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:19] *** Joins: welt (~welt@willow.spiderden.net)
[03:00:50] *** Joins: andlabs (~andlabs@68.237.68.71)
[03:03:17] *** Quits: andlabs (~andlabs@68.237.68.71) (Client Quit)
[03:05:04] *** Joins: andlabs (~andlabs@68.237.68.71)
[03:05:18] *** Joins: shka (~herr@109.231.62.239)
[03:20:21] <src> is there a trustworthy golang pkg repository for ubuntu? to track stable versions maybe?
[03:22:03] *** Quits: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca) (Ping timeout: 252 seconds)
[03:22:39] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Read error: Connection reset by peer)
[03:24:32] *** Joins: farmstatejake (~farmstate@user/farmstatejake)
[03:25:31] <src> k, there seems to be a snap https://snapcraft.io/go for that
[03:25:32] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:c4d7:b125:fab8:31b0) (Ping timeout: 265 seconds)
[03:28:21] *** Quits: dr0n (~nabromov@94.11.23.235) (Ping timeout: 272 seconds)
[03:30:51] *** Quits: Progster (~blah@pool-72-80-87-95.nycmny.fios.verizon.net) (Ping timeout: 265 seconds)
[03:30:56] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 264 seconds)
[03:36:36] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:37:52] *** Joins: andlabs (~andlabs@68.237.68.71)
[03:46:19] *** Quits: belak51 (~belak@66.175.222.59) (Changing host)
[03:46:19] *** Joins: belak51 (~belak@user/belak)
[03:46:29] *** Quits: belak51 (~belak@user/belak) (Quit: ZNC 1.8.2 - https://znc.in)
[03:46:38] *** Joins: belak (~belak@66.175.222.59)
[03:46:46] *** Quits: belak (~belak@66.175.222.59) (Changing host)
[03:46:46] *** Joins: belak (~belak@user/belak)
[03:58:43] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:03:56] *** Quits: eck0_ (~eck0@047-007-119-133.res.spectrum.com) (Ping timeout: 264 seconds)
[04:09:34] *** Joins: brb (~brb@user/brb)
[04:17:18] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[04:23:32] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[04:25:15] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:26:18] *** Quits: belak (~belak@user/belak) (Quit: ZNC 1.8.2 - https://znc.in)
[04:26:30] *** Joins: belak (~belak@user/belak)
[04:28:50] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 268 seconds)
[04:38:49] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[04:41:39] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[04:43:28] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:44:21] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[04:44:42] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:47:08] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:47:32] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:23] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Client Quit)
[04:49:50] *** Quits: leah2 (~leah@vuxu.org) (Read error: Connection reset by peer)
[04:50:30] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[04:53:23] *** Joins: orthoplex64 (~crm@70.120.0.94)
[04:54:10] *** Joins: arcatech (~arcatech@user/arcatech)
[04:55:44] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[04:56:42] *** Quits: pupiw (~pupiw@2600:8801:f10c:7b00:fd85:2d29:6287:72b7) (Ping timeout: 264 seconds)
[04:58:26] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[05:05:22] *** Joins: yoonkn (~user@175.197.208.79)
[05:07:02] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Quit: Client closed)
[05:24:01] <src> forgive my ignorance, but I am reading about mutexes for the first time
[05:24:11] <src> and couldn't the same be achieved with a struct with a bool value in it
[05:24:23] <src> that could be set to true false if a shared value is used
[05:24:40] <src> the same thing? are mutexes just a built-in type so you don't have to set it up yourself?
[05:25:17] <src> or is there something inherently special about mutexes? I get unlock and lock are methods on the mutex type
[05:28:37] *** Quits: gilesc (~textual@2603-8001-3600-dad7-7061-e63c-c588-c394.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:36:10] <jemaclus> afaik it's a special built-in type that errors/panics if a two goroutines try to access the value while it's locked
[05:36:43] *** Quits: Torr (~Torr@170.83.146.97) (Ping timeout: 272 seconds)
[05:37:03] <jemaclus> you can read the source here: https://golang.org/src/sync/mutex.go
[05:38:28] <jemaclus> maybe "built-in type" is the wrong word, but it's definitely more complicated than a simple bool.
[05:39:54] <foobaz> it doesn't error or panic, it waits for the other goroutine to finish
[05:40:06] <src> jemaclus: awesome, it's 220 lines only and a considerable amount of that is comments
[05:40:19] <src> fairly readable, I will definitely look at that closely
[05:40:33] <jemaclus> foobaz: yep, I stand corrected. it's been a while since I used them
[05:40:52] <foobaz> src: how would you implement the wait using a bool? poll it repeatedly? that either consumes excessive cpu, or sleeps longer than necessary between checks
[05:41:31] <src> foobaz: true
[05:41:43] <DHowett> the principal benefit of using a provided mutex type instead of rolling your own is that the stdlib version is more "battle tested" and stands a higher chance of using intrinsics that make it safe (interlocked compare) or fast (kernel-provided "wait for address" fixtures, or fast locking/unlocking) or performant for other parts of the application (yielding thread time by not doing an idle spin or a
[05:41:45] <src> (there's no but following btw)
[05:41:50] <DHowett> while(locked) { })
[05:42:02] <DHowett> sorry - I kept writing that up atfer other people threw their hats in. Safely ignore if it's a repeat. :)
[05:42:17] <jemaclus> I was about to say what DHowett said better, so... that ^ :)
[05:42:36] <src> DHowett: thanks, makes sense
[05:45:14] <foobaz> src: if you access the same variable from multiple goroutines, like your struct bool, there are several things you need to do to make it work properly
[05:46:04] <foobaz> you need to make sure that you are actually accessing the variable in memory, not an individual cpu's local cache, which may not have changes made by other cpus yet
[05:46:22] *** Joins: iateadonut (~dan@121.177.17.154)
[05:46:34] <src> foobaz: yes I thought it through some more
[05:46:44] <src> foobaz: also thinking about possible hundreds of goroutines and many shared values
[05:46:45] <foobaz> and you need to prevent the compiler from optimizing your repeated checks into one
[05:46:55] <src> it quickly becomes quite a headache how to handle it
[05:47:22] <foobaz> if the compiler sees you accessing the same variable multiple times it will combine them into one load for performance, but this is incorrect if another goroutine could be modifying the variable behind your back
[05:48:13] <foobaz> and also you need to prevent the CPU from reordering instructions to make things faster
[05:48:43] <foobaz> if you don't handle that, two goroutines can have the lock at the same time due to the reordering
[05:50:28] <foobaz> mutex implementations handle these things by using special CPU instructions for fencing, atomic load/store, and also tie into the thread scheduler to wait efficiently
[05:51:22] *** Joins: pupiw (~pupiw@2600:8801:f10c:7b00:818a:3275:8aae:1ddf)
[05:51:34] *** Joins: sneak (~sneak@datavi.be)
[05:51:51] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[05:52:12] *** Quits: pupiw (~pupiw@2600:8801:f10c:7b00:818a:3275:8aae:1ddf) (Client Quit)
[05:56:30] <src> foobaz: thanks :)
[05:56:39] <src> that's the "documentation" I ended up with btw https://paste.ubuntu.com/p/cPp4NTbWSK/
[05:56:54] <src> (don't feel obligated to read it)
[05:59:14] <sneak> does anyone know good places to find some small, easy one-off golang projects (paid or free/oss) for someone intermediate to work on?  i manage pretty terrible ADD and can't stick to a project more than a few days, but want to hack on something useful.  i was thinking of trying to contribute to syncthing but even orienting myself in the codebase is daunting
[06:01:40] <src> sneak: I think there's an official repo even?
[06:02:28] <src> sneak: not many, but maybe some are interesting https://github.com/golang/example
[06:02:44] <foobaz> sneak: port this sorting algorithm to go https://github.com/scandum/quadsort
[06:03:19] <src> sneak: what also kind of itches me is implementing some of those games in Go https://github.com/coding-horror/basic-computer-games ; maybe that's something that would also be interesting to you
[06:03:19] <foobaz> use sort.Interface so it's easy for people to switch to it from the stdlib's sort
[06:03:47] <jemaclus> could poke around on Awesome Go (which, despite its name, contains a lot of not-awesome stuff) and contribute to something that sounds interesting to you https://github.com/avelino/awesome-go
[06:03:59] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[06:07:07] *** Quits: emcconville (~emcconvil@c-98-222-200-8.hsd1.in.comcast.net) (Quit: WeeChat 3.0.1)
[06:08:01] <sneak> jemaclus: this looks cool
[06:08:19] <sneak> src: i'm more interested in contributing something useful to a project or company than just a study project
[06:08:36] <src> sneak: yes sorry I noticed I kind of went past that
[06:08:40] <sneak> no worries :)
[06:08:55] *** Quits: hv99 (~hv99@wireguard/tunneler/hv99) (Quit: The Lounge - https://thelounge.chat)
[06:09:05] <src> although some well documented projects online might be a great learning resource for others
[06:09:15] <src> but whether that "counts" is up to you
[06:11:02] <sneak> i was working on this a while ago, it's sort of a base repo for an api or webapp server: https://git.eeqj.de/sneak/gohttpserver
[06:11:43] <sneak> maybe i should polish it more
[06:12:04] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[06:13:01] *** Joins: hv99 (~hv99@wireguard/tunneler/hv99)
[06:13:51] *** Quits: omegatron (~some@p5b056bc7.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[06:15:24] <pjs> sneak.berlin?
[06:15:30] <sneak> that's me
[06:15:53] <pjs> Nice. I enjoy your blog
[06:16:08] <sneak> oh, thank you! it's so lovely to hear that, i sometimes feel like i'm shouting into the void
[06:16:49] <pjs> hah yea, I hear that
[06:17:03] <sneak> i started a companion bbs if you're into such things, it's an indie community of ~100 so far and it's not readable without signup, so it's not in public web indices.  https://bbs.sneak.berlin
[06:19:20] <sneak> i am excited to wrap my brain around the generics syntax, the first time i looked at it it hurt my eyes but i'm sure i'll adjust
[06:21:27] <pjs> Cool. I'll check it out
[06:21:33] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:22:23] <sneak> i'm off to dinner but i will peruse this awesome-go list to see if there are some projects i might be able to help with. atwood's "don't go dark" post recently made me realize i am totally That Guy and i want to stop: https://blog.codinghorror.com/dont-go-dark/
[06:22:39] <pjs> if you're looking for a smaller/easier project I can always welcome patches/input on my first public Go project (I'm fairly new still myself, just a matter of finding time to work on it more). https://hg.code.netlandish.com/~petersanchez/tago
[06:23:12] <sneak> bookmarked as well
[06:24:01] <sneak> i read some article once that suggested avoiding a types.go and just putting your types with the things that use them (or naming the file after the type itself)
[06:24:06] <cmj> Is there a standardized template for microservices in Go? Preferably just a minimalist setup with gorilla/mux or something.
[06:24:51] <sneak> cmj: my boilerplate http might serve if you don't need grpc, it has metrics and a router and logging already. https://git.eeqj.de/sneak/gohttpserver
[06:24:53] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 244 seconds)
[06:25:31] <sneak> it doesn't do tls though, it expects that to be terminated out-of-process
[06:25:43] * sneak &
[06:25:52] <cmj> Nice license.
[06:26:17] <src> sneak: exploring your site, read two blog articles, skimming your links atm, seem interesting as well ; I guess thanks, some things to add to my rss reader :P
[06:28:04] <pjs> sneak: yea, I have a branch called refactor that I'm doing a lot of changes in. Part of that is re-organizing the code properly, etc.
[06:28:20] *** Joins: jespada (~jespada@90.254.242.55)
[06:36:45] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Ping timeout: 252 seconds)
[06:37:04] *** Joins: eck0_ (~Android@047-007-119-133.res.spectrum.com)
[06:40:11] *** Quits: eck0 (~Android@mobile-166-173-63-7.mycingular.net) (Ping timeout: 268 seconds)
[06:48:11] *** Quits: noteness (noteness@user/noteness) (Remote host closed the connection)
[06:50:08] *** Joins: noteness (noteness@gateway02.insomnia247.nl)
[06:50:32] *** noteness is now known as Guest1449
[06:50:49] *** Joins: SebastianM (~seba@user/sebastianm)
[07:00:49] *** Quits: farmstatejake (~farmstate@user/farmstatejake) (Quit: Leaving)
[07:08:01] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:09:19] *** Joins: andlabs (~andlabs@68.237.68.71)
[07:11:08] *** Quits: SebastianM (~seba@user/sebastianm) (Quit: Bye)
[07:15:22] *** Quits: arcatech (~arcatech@user/arcatech) (Remote host closed the connection)
[07:21:57] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[07:31:22] *** Joins: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca)
[07:35:00] *** Joins: eck0 (~Android@047-007-119-133.res.spectrum.com)
[07:37:32] *** Quits: eck0_ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 264 seconds)
[07:40:26] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:41:45] *** Joins: andlabs (~andlabs@68.237.68.71)
[07:41:59] *** Joins: eck0_ (~Android@047-007-119-133.res.spectrum.com)
[07:44:57] *** Quits: eck0 (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 252 seconds)
[07:50:35] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Quit: 404)
[07:51:52] *** Joins: arcatech (~arcatech@user/arcatech)
[07:53:37] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[07:57:11] <b0nn> WRT Mutexs - the issue is that to take ownership of a variable (the mutex) you need to do more than one thing. You need to read it's current state, and write to it that you want to own it (you cannot own it if someone else owns it, right)
[07:57:44] <b0nn> So if you read it, then write to it, in between those two ops another goroutine (or process) can write and claim ownership
[07:58:05] <b0nn> In software this race condition goes all the way to the silicon
[07:59:25] <b0nn> So, (most) CPUs have what's called a Test and Set lock (TSL) instruction, which -when called) tells the CPU that the two ops need to behave atomically, that is, once the read is done, nobody else is allowed to write
[08:00:08] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[08:00:18] <b0nn> Mutexes in most languages make the kernel call that emits that CPU opcode
[08:00:21] <seebs> obscure trivia: if you have a reliable (won't cause things to blow up) shared memory available, that you can read or write, and be confident that the read or write works, even if it's vulnerable to races, you can implement a mutex with that, but it's slow and inefficient.
[08:00:36] <seebs> i don't *think* that usually requires a kernel call?
[08:01:07] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[08:01:21] <seebs> there's also like three different kinds of locking/atomicity instruction that are commonly available. let's see. load-link/store-conditional, cmpxchg, and tsl, I think.
[08:01:32] <src> I think 90% of discussions like these go over my head and I only grasp some principles being discussed
[08:01:39] <src> but I love following along nevertheless
[08:02:23] <b0nn> This is Go making a C call that makes the CPU call https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/sync/mutex.go#L74
[08:04:54] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (Ping timeout: 265 seconds)
[08:05:40] <b0nn> Volume 3, Page 11 of this pdf describes the AMD64 TSL instruction https://www.amd.com/system/files/TechDocs/24594.pdf
[08:05:51] *** Joins: huf_ (~huf@user/huf)
[08:07:02] *** Quits: iateadonut (~dan@121.177.17.154) (Ping timeout: 252 seconds)
[08:08:41] *** Quits: huf (~huf@user/huf) (Ping timeout: 252 seconds)
[08:08:50] *** huf_ is now known as huf
[08:12:38] <b0nn> https://en.wikipedia.org/wiki/Test-and-set
[08:14:19] <seebs> it's not a C call
[08:14:42] <seebs> it resolves ultimately to code in runtime/internal/atomic/asm_amd64.s, and it's inline assembly
[08:14:57] <b0nn> Sure. ASM not C
[08:15:12] <seebs> https://github.com/golang/go/blob/2ebe77a2fda1ee9ff6fd9a3e08933ad1ebaea039/src/runtime/internal/atomic/asm_amd64.s#L17
[08:15:17] <seebs> note, though, not a kernel call
[08:15:20] <seebs> just inline instructions
[08:15:25] <b0nn> and it should resolve to multiple targets (depending on the compiler target the asm is going to differ)
[08:15:28] <seebs> in theory the compiler could just generate those instructions
[08:15:57] <b0nn> Yeah I'm not sure why I have the kernl in my head passing instructions to the cpu
[08:16:33] <seebs> there's some things that do have to be done through the kernel usually, but this particular class of instruction isn't that magic, i think
[08:16:49] <b0nn> the LOCK prefix in the CPU is the key
[08:16:58] <src> is there something smaller than nanoseconds in the time package?
[08:16:59] <b0nn> without it mutexes are racy AF
[08:17:01] <src> I guess not
[08:17:06] <seebs> compare with the compiler magic used for bits.OnesCount64, which generates (for amd64) a conditional test against CPU type followed by a popcnt instruction for CPUs that have it.
[08:17:45] <b0nn> seebs: You're welcome to link to whatever it is you're talking about so we can see too
[08:17:49] <seebs> yeah. but as noted, there *is* a way to implement a mutex without lock on amd64.
[08:18:04] <seebs> i don't remember where it is, it's actually in the compiler's code generation magic, though, as opposed to in the source for the runtime.
[08:18:31] <seebs> i'm not 100% sure why, but some function calls don't actually generate function calls at runtime, and just get inlined by the compiler.
[08:18:46] <b0nn> Also, I'd love to see this racy mutex implementation
[08:19:38] <b0nn> I have a vague memory of someone talking about it when I was researching mutexes, but I've not seen an implementation - which would be awesaome if used in anger
[08:20:30] <gilesc> Q: Whats the go-to services style framework for go? (or is it mostly about finding packages and gluing together things you care about, like metrics, zipkin tracing, load balancing, etc?)
[08:20:52] <b0nn> gilesc: whats a services?
[08:21:01] <b0nn> like go-kit for microservices?
[08:21:31] <gilesc> i hate the term microservices, but yes something like that. Honestly the things i'd be building are quite a bit bigger than microservices, but similar in idea.
[08:21:36] *** Quits: xy (znc@user/icy) (Quit: ZNC 1.9.x-nightly-20210409-e0ffdddd - https://znc.in)
[08:21:44] <seebs> https://github.com/golang/go/blob/release-branch.go1.15/src/cmd/compile/internal/gc/ssa.go#L3857
[08:21:46] <seebs> moved in 1.16
[08:21:55] <seebs> or at least i can't find it there
[08:22:04] <seebs> but yeah, the compiler has internal magic to generate OnesCount64 directly
[08:24:01] <seebs> oh, wait. 1.17 or something. 1.16 still has it.
[08:26:54] <b0nn> So, popcount - that's a TSL?
[08:27:03] * b0nn missed the relvance
[08:27:29] <b0nn> According to https://vaibhavsagar.com/blog/2019/09/08/popcount/ it's the NSA opcode
[08:28:12] <b0nn> gilesc: WRT go-kit - I have never used it for my microservices, but I know a company here that does
[08:28:41] <seebs> no, popcount is just "count the 1 bits in a word", but *only some CPUs have it*.
[08:28:46] <seebs> like, not all amd64 does
[08:29:03] <gilesc> the docs seems a little to prescriptive but i'll play around with it and see if it works or if i can borrow parts of it without the whole thing
[08:29:10] <seebs> so the compiler generates code for "if runtime's CPU flag set doesn't include popcount, jump to the popcount implementation, otherwise use this instruction"
[08:29:20] <b0nn> honestly, though, I don't see the point, you're supposed to be building services that interact with other services in unique ways (ie. gRPC might be valid for one usecase, but not for another where an MQ or Event log is more appropriate)
[08:30:15] <b0nn> seebs: Penultimate paragraph: popcount has become so pervasive that both GCC and Clang will detect an implementation of popcount and replace it with the built-in instruction. Imagine Clippy going “I see you are trying to implement popcount, let me go ahead and fix that for you”! The relevant LLVM code is here.
[08:30:36] <b0nn> That cracked me up :)
[08:30:52] <seebs> heh
[08:31:25] <b0nn> https://github.com/llvm-mirror/llvm/blob/f36485f7ac2a8d72ad0e0f2134c17fd365272285/lib/Transforms/Scalar/LoopIdiomRecognize.cpp#L960
[08:33:19] <lemmi> seebs: the whole crypto and math libs are full of runtime decisions for choosing vecorized code paths or accelerated encryption for example
[08:33:56] <lemmi> the map impelementation will use aes-ni instructions to speed up hashing for example
[08:35:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[08:37:17] <b0nn> That reminds me, what's the hashing algorithm used for hashmaps?
[08:37:26] <b0nn> I *think* Rust uses SipHash?
[08:41:12] <Sam> Rusts can be changed out. I don't recall the default.
[08:41:24] <lemmi> go is arch dependant
[08:41:44] *** Quits: acidsys (~LSD@2.lsd.systems) (Quit: I love you.)
[08:43:40] *** Quits: cmj (~cmj@68.207.254.124) (Quit: Leaving)
[08:48:25] <b0nn> Wikipedia links to https://github.com/rust-lang/rust/commit/fada46c4214f26dbdc0fd150a713aced476e75b5
[08:48:51] <b0nn> Not sure if it's still relevant though (the change was almost 10 years ago)
[08:49:33] <b0nn> Sam: Is the channel going to get a logbot?
[08:49:49] *** Joins: sudden (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[08:50:29] <Sam> I wasn't doing any work in that direction
[08:51:26] <b0nn> Hmm, I'm not sure if there is a ubiquitous logbot for libera, like there was for freenode
[08:56:16] *** Joins: LSD (~LSD@2.lsd.systems)
[09:01:41] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[09:09:55] *** Quits: src (~src@user/src) (Quit: leaving)
[09:22:52] *** Joins: iateadonut (~dan@121.177.17.154)
[09:30:14] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[09:34:50] *** Joins: Crassus (~Crassus@user/crassus)
[09:41:31] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[09:43:32] *** Joins: Kyros (~kyros@user/kyros)
[09:50:08] *** Quits: endigma (~endigma@134.41.107.148) (Ping timeout: 264 seconds)
[09:51:17] *** Joins: endigma (~endigma@134.41.107.148)
[10:03:00] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[10:03:05] *** Quits: endigma (~endigma@134.41.107.148) (Ping timeout: 252 seconds)
[10:04:35] *** Quits: jld (~jld@c-24-9-144-115.hsd1.co.comcast.net) (Quit: jld)
[10:23:55] <b0nn> https://en.wikipedia.org/wiki/Mutual_exclusion#Software_solutions
[10:25:28] <b0nn> According to the first paragraph, the memory only soltuion depends on fixed ordered instruction evaluation
[10:25:55] <b0nn> Which I *think* means "No branch predicition in the CPU"
[10:54:04] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[11:03:06] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:04:18] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[11:08:51] *** Joins: mrig (~mrig@user/mrig)
[11:09:54] *** veegee_ is now known as veegee
[11:18:46] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[11:24:08] <b0nn> There's no "Invert" bitwise operator :\
[11:36:37] *** Joins: shka (~herr@109.231.62.239)
[11:37:42] *** Joins: icy (~icy@user/icy)
[11:41:29] *** Quits: shka (~herr@109.231.62.239) (Read error: Connection reset by peer)
[11:47:56] *** Joins: shka (~herr@109.231.62.239)
[11:50:29] <mrig> Hello :)
[11:51:11] <mrig> Oh bitwise operators are fun, sorry I didn't catch the question, you can invert by using a mask https://play.golang.org/p/owzRciIzjIn
[11:51:34] *** Joins: meinside (uid24933@id-24933.brockwell.irccloud.com)
[11:52:22] <mrig> b0nn: I thought of a nice solution to the display issue for devanagari script from the other day; The client should default to displaying a consonant using the a vowel, as is done when using the script normally.
[11:53:13] <mrig> So the browsers or terminal being used should know that this be the case, that you can not make a consonant sound without a vowel, it would not have any noise otherwise :)
[11:53:18] <b0nn> WRT mask, oh, of course
[11:53:50] <b0nn> WRT the script, I cannot comment at all on the grounds that I don't know the language at all
[11:54:21] <b0nn> It just happened to be the example stuff on the Rust page for strings and their properties
[11:55:18] <b0nn> I am planning on having a closer look (it was going to be next week, but porting something from C to Go is proving to be a lot more difficult than I had imagined - C++ to Go is almost trivial, C to Go isn't proving to be as easy)
[11:56:33] <mrig> Oh why so; Ownership of memory, perhaps?
[11:56:45] <mrig> To play with the GC.
[11:57:01] *** Joins: arcatech (~arcatech@user/arcatech)
[11:57:31] <mrig> I've ported one lib from C but it is not tidied up yet, and I've not had the time to make certain that the way that I've used cgo is correct.
[11:57:32] <b0nn> I'm just a bit rusty I think
[11:58:12] <b0nn> Also, I can use the ^ for bitwise 2s complement
[11:58:24] <b0nn> I wonder if I can replace the ~ with a ^
[12:00:23] *** Joins: eck0 (~eck0@047-007-119-133.res.spectrum.com)
[12:02:42] *** Quits: pepee (~user@user/pepee) (Ping timeout: 268 seconds)
[12:04:39] *** Quits: eck0 (~eck0@047-007-119-133.res.spectrum.com) (Ping timeout: 244 seconds)
[12:05:07] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[12:06:09] *** Joins: endigma (~endigma@drmons0552w-134-41-82-6.dhcp-dynamic.fibreop.ns.bellaliant.net)
[12:19:27] <mrig> Would you not just use the - unary operator for that?
[12:21:07] <mrig> oh right you need the offset.
[12:23:17] <mrig> the fmt %b verb is really nice, it was a pain to code something to do this in C :)
[12:24:19] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[12:29:06] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 264 seconds)
[12:33:47] *** Quits: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[12:48:13] <avoozl> does anyone have a good pointer to a sane way of calling rust from go? I have a go application that currently uses bluge, but I'm interested in using tantivy, which is written in rust.. I have read https://blog.filippo.io/rustgo/ but that seems like a rather low-level hack. I don't think my call out is performance critical, so I'm ok with a slower but more readable approach
[12:49:20] *** Joins: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it)
[12:55:43] *** Quits: absc (~absc@dynamic-adsl-94-34-192-209.clienti.tiscali.it) (Remote host closed the connection)
[13:00:57] <j416> avoozl: execute it like a normal program?
[13:01:25] <avoozl> j416: yeah I could,  but I'd rather use the library functions or provides
[13:02:08] <avoozl> The stand alone program doesn't have the same functionality as the library,  so using exec is going to require changes on both sides
[13:06:58] <avoozl> I can take the cgo route,  but I'll need to brush up on my rust to get that going
[13:18:50] *** Joins: jolof (~jolof@user/jolof)
[13:25:57] *** Quits: milosz (~milosz@user/milosz) (Ping timeout: 252 seconds)
[13:28:42] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[13:29:39] *** Quits: L1Cafe (~L1Cafe@user/l1cafe) (Quit: The Lounge - https://thelounge.chat)
[13:33:07] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 256 seconds)
[13:37:53] *** Joins: yangby (~secret@115.199.110.48)
[13:39:03] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[13:50:14] *** Quits: yangby (~secret@115.199.110.48) (Quit: Go out for a walk and buy a drink.)
[13:56:25] *** feuerrot_ is now known as feuerrot
[13:58:47] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[14:01:09] *** Quits: meinside (uid24933@id-24933.brockwell.irccloud.com) (Quit: Connection closed for inactivity)
[14:02:31] *** Joins: be3uykpy (~be3uykpy@141.226.9.247)
[14:03:31] *** Joins: leah2 (~leah@vuxu.org)
[14:05:03] *** Joins: oxum (~oxum@106.201.113.95)
[14:09:32] *** Joins: Garb0 (~Garb0@user/garb0)
[14:11:30] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[14:14:13] *** Joins: jinie (~jimmy@188.114.173.37)
[14:29:07] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[14:36:55] *** Joins: jinie (~jimmy@188.114.173.37)
[14:47:31] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 265 seconds)
[14:48:39] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[14:49:27] *** Joins: jespada (~jespada@90.254.242.55)
[14:53:30] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: No route to host)
[14:55:04] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[14:56:58] *** Joins: Crassus (~Crassus@user/crassus)
[15:07:52] *** Joins: souvik_ (~souvik@103.200.84.156)
[15:11:24] *** Quits: souvik (~souvik@103.199.182.67) (Ping timeout: 268 seconds)
[15:12:31] *** Quits: sono (~sono@107-209-210-210.lightspeed.sntcca.sbcglobal.net) (Quit: When You're Taught Through Feelings~♪)
[15:12:36] *** Quits: ibejohn (~ibejohn@104.4.30.169) (Quit: Ping timeout (120 seconds))
[15:12:51] *** Joins: souvik (~souvik@103.199.182.163)
[15:12:51] *** Quits: souvik_ (~souvik@103.200.84.156) (Ping timeout: 256 seconds)
[15:18:00] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:18:33] *** Joins: eck0 (~Android@mobile-166-173-63-55.mycingular.net)
[15:19:20] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[15:20:54] *** Quits: eck0_ (~Android@047-007-119-133.res.spectrum.com) (Ping timeout: 252 seconds)
[15:32:10] *** Joins: oxum (~oxum@106.201.113.95)
[15:34:30] *** Quits: oxum (~oxum@106.201.113.95) (Remote host closed the connection)
[15:36:47] *** Joins: oxum (~oxum@106.201.113.95)
[15:41:48] *** Quits: oxum (~oxum@106.201.113.95) (Ping timeout: 252 seconds)
[15:53:32] *** Quits: georg__ (~georg@96.92-221-82.customer.lyse.net) (Quit: Leaving)
[15:54:27] *** Quits: jolof (~jolof@user/jolof) (Ping timeout: 252 seconds)
[15:55:48] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:00:42] *** Joins: eck0_ (~eck0@047-007-119-133.res.spectrum.com)
[16:01:52] *** Joins: Vukan (~drazen@62.240.24.100)
[16:05:33] *** Quits: eck0_ (~eck0@047-007-119-133.res.spectrum.com) (Ping timeout: 256 seconds)
[16:06:15] *** Joins: andlabs (~andlabs@68.237.68.71)
[16:12:01] *** Joins: Kane (~Kane@2a01:e34:ee89:5d90:ed84:fad8:49a1:17af)
[16:15:48] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[16:19:56] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Quit: Leaving)
[16:20:18] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 252 seconds)
[16:21:23] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[16:24:49] *** Quits: theoceaniscool (~theoceani@188.127.173.202) (Remote host closed the connection)
[16:27:38] *** Joins: dyslexicat (~dyslexica@212.253.59.190)
[16:28:25] *** Quits: Vukan (~drazen@62.240.24.100) (Ping timeout: 272 seconds)
[16:28:36] *** Joins: theoceaniscool (~theoceani@188.127.173.202)
[16:30:12] *** Joins: Garb0 (~Garb0@user/garb0)
[16:32:11] *** Quits: dyslexicat (~dyslexica@212.253.59.190) (Ping timeout: 256 seconds)
[16:36:45] *** Joins: goldfish (~goldfish@user/goldfish)
[16:38:36] *** Joins: tachoknight (~tachoknig@2601:248:c580:3ac0:1c2:b100:86fe:7731)
[16:45:30] *** Joins: NotKyros (~kyros@user/kyros)
[16:46:59] *** Quits: Kyros (~kyros@user/kyros) (Ping timeout: 268 seconds)
[16:46:59] *** NotKyros is now known as Kyros
[16:47:24] *** Joins: Crassus (~Crassus@user/crassus)
[16:48:41] *** Joins: jolof (~jolof@user/jolof)
[16:48:49] *** Joins: SincereFox (uid337158@user/sincerefox)
[16:54:31] *** Joins: masoudd (~masoudd@user/masoudd)
[16:54:57] *** Quits: c10l (~c10l@89.34.167.207) (Ping timeout: 252 seconds)
[16:55:38] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:31d0:be79:8bea:8cd9)
[16:55:43] *** Joins: c10l (~c10l@89.34.167.207)
[16:56:38] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[16:59:35] *** Quits: tachoknight (~tachoknig@2601:248:c580:3ac0:1c2:b100:86fe:7731) (Quit: Some random bits)
[17:00:13] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (Read error: No route to host)
[17:00:50] *** Joins: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:04:25] *** Joins: tachoknight (~tachoknig@2601:248:c580:3ac0:946a:d7b1:2d83:d4cc)
[17:06:17] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[17:06:46] *** Joins: goldfish (~goldfish@user/goldfish)
[17:11:10] *** Joins: davidkrauser (~davidkrau@user/davidkrauser)
[17:12:54] *** Quits: tachoknight (~tachoknig@2601:248:c580:3ac0:946a:d7b1:2d83:d4cc) (Ping timeout: 264 seconds)
[17:13:36] *** Quits: jinie (~jimmy@188.114.173.37) (Quit: ZNC 1.8.2 - https://znc.in)
[17:14:52] *** Joins: Vukan (~drazen@62.240.24.100)
[17:15:19] *** Joins: jinie (~jimmy@188.114.173.37)
[17:15:37] *** Quits: ninjin (~ninjin@momey.cs.ucl.ac.uk) (Changing host)
[17:15:37] *** Joins: ninjin (~ninjin@user/ninjin)
[17:29:52] *** Joins: michelem (~Adium@213.55.225.31)
[17:31:32] <michelem> Hi folks. How do you use protobuf "message" types? Do you have modules define their structs, and then replicate those structs in protobuf "messages", or do you import the protobuf definitions into the modules using that data?
[17:33:33] <michelem> Gotta go offline, will ask later tonight. Please don't bother answering now.
[17:33:35] *** Quits: michelem (~Adium@213.55.225.31) (Client Quit)
[17:37:39] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Remote host closed the connection)
[17:38:22] *** Joins: masoudd_ (~masoudd@user/masoudd)
[17:38:47] *** Quits: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net) (Ping timeout: 268 seconds)
[17:38:58] *** Joins: goldfish_ (~goldfish@user/goldfish)
[17:39:34] *** Joins: lungaro_ (~lungaro@99-117-118-33.lightspeed.sndgca.sbcglobal.net)
[17:39:42] *** Quits: goldfish (~goldfish@user/goldfish) (Killed (NickServ (GHOST command used by goldfish_)))
[17:40:00] *** goldfish_ is now known as goldfish
[17:41:15] *** Joins: c10l9 (~c10l@89.34.167.207)
[17:41:47] *** Joins: eck0_ (~Android@mobile-166-173-63-55.mycingular.net)
[17:43:02] *** Joins: mikoto-c1 (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be)
[17:43:59] *** Quits: Vukan (~drazen@62.240.24.100) (Ping timeout: 252 seconds)
[17:44:19] *** Quits: paruh (~paruh@92.60.39.18) (Quit: paruh)
[17:46:05] *** Quits: adanwan (~adanwan@gateway/tor-sasl/adanwan) (Remote host closed the connection)
[17:46:19] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[17:47:12] *** Quits: masoudd_ (~masoudd@user/masoudd) (Ping timeout: 244 seconds)
[17:47:12] *** Joins: souvik_ (~souvik@103.199.182.163)
[17:47:56] *** Joins: paruh (~paruh@92.60.39.18)
[17:48:14] *** Quits: mikoto-chan (~mikoto-ch@ip-213-49-189-31.dsl.scarlet.be) (*.net *.split)
[17:48:14] *** Quits: c10l (~c10l@89.34.167.207) (*.net *.split)
[17:48:14] *** Quits: masoudd (~masoudd@user/masoudd) (*.net *.split)
[17:48:14] *** Quits: SincereFox (uid337158@user/sincerefox) (*.net *.split)
[17:48:14] *** Quits: eck0 (~Android@mobile-166-173-63-55.mycingular.net) (*.net *.split)
[17:48:14] *** Quits: souvik (~souvik@103.199.182.163) (*.net *.split)
[17:48:14] *** Quits: leah2 (~leah@vuxu.org) (*.net *.split)
[17:48:14] *** c10l9 is now known as c10l
[17:51:35] *** Joins: tachoknight (~tachoknig@73.9.246.255)
[17:55:32] *** Joins: leah2 (~leah@vuxu.org)
[18:00:44] *** Joins: cmj (~cmj@68.207.254.124)
[18:03:17] *** Quits: Kahn (~Kahn@user/kahn) (Read error: Connection reset by peer)
[18:05:03] *** Quits: avakand (~root@static.164.226.201.195.clients.your-server.de) (Quit: WeeChat 3.1)
[18:05:19] *** Joins: avakand (~root@static.164.226.201.195.clients.your-server.de)
[18:06:55] *** Joins: SincereFox (uid337158@user/sincerefox)
[18:07:04] *** Joins: Kahn (~Kahn@user/kahn)
[18:07:22] *** Joins: SebastianM (~seba@user/sebastianm)
[18:07:27] *** Quits: SebastianM (~seba@user/sebastianm) (Client Quit)
[18:08:47] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:11:10] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[18:16:37] *** Joins: tg (~tg@rockylinux/infra/tg)
[18:19:00] *** Quits: nmollerup (~nmm@customer-2a00-7660-1612-0168-f5eb-be89-70e6-4ebd.ip6.gigabit.dk) (Remote host closed the connection)
[18:19:02] *** Joins: kayprish (~kayprish@46.240.143.86)
[18:19:07] *** Quits: kayprish (~kayprish@46.240.143.86) (Client Quit)
[18:19:17] *** Joins: nmollerup (~nmm@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[18:20:09] *** Joins: Torr (~Torr@170.83.146.97)
[18:21:20] *** Quits: Guest1449 (noteness@gateway02.insomnia247.nl) (Changing host)
[18:21:20] *** Joins: Guest1449 (noteness@user/noteness)
[18:21:20] *** Guest1449 is now known as noteness
[18:21:29] *** Joins: amahl (~amahl@87-95-128-122.bb.dnainternet.fi)
[18:26:25] *** Quits: jolof (~jolof@user/jolof) (Ping timeout: 272 seconds)
[18:28:30] *** Quits: jespada (~jespada@90.254.242.55) (Ping timeout: 264 seconds)
[18:28:40] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:29:30] *** Joins: jespada (~jespada@90.254.242.55)
[18:29:53] *** Joins: pepee (~user@user/pepee)
[18:30:31] *** Quits: ente_ (~ente@p200300dc5f4037016fbea028d47fea8e.dip0.t-ipconnect.de) (Quit: WeeChat 3.1)
[18:31:55] *** Joins: andlabs (~andlabs@68.237.68.71)
[18:32:23] *** Joins: dmathieu (~textual@pop.92-184-110-103.mobile.abo.orange.fr)
[18:34:41] *** Quits: iateadonut (~dan@121.177.17.154) (Read error: Connection reset by peer)
[18:35:58] *** Joins: iateadonut (~dan@121.177.17.154)
[18:38:54] *** Quits: dmathieu (~textual@pop.92-184-110-103.mobile.abo.orange.fr) (Ping timeout: 252 seconds)
[18:41:49] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[18:49:39] *** Joins: tofran2 (~tofran@37.189.158.134)
[18:50:29] *** Quits: ninjin (~ninjin@user/ninjin) (Ping timeout: 252 seconds)
[18:50:47] *** Joins: ninjin (~ninjin@momey.cs.ucl.ac.uk)
[18:51:01] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[18:51:01] *** Quits: tofran (~tofran@37.189.158.134) (Ping timeout: 252 seconds)
[18:51:01] *** tofran2 is now known as tofran
[18:51:06] *** Joins: noteness_ (noteness@user/noteness)
[18:51:06] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[18:51:34] *** Quits: noteness (noteness@user/noteness) (Ping timeout: 252 seconds)
[18:51:58] *** Joins: cim6 (~cim@205.185.117.110)
[18:51:58] *** Quits: iateadonut (~dan@121.177.17.154) (Read error: Connection reset by peer)
[18:52:06] *** Quits: chilversc (~chilversc@user/chilversc) (Ping timeout: 252 seconds)
[18:52:06] *** Quits: lemmi (~lemmi@user/lemmi) (Ping timeout: 252 seconds)
[18:52:28] *** Joins: mrig (~mrig@user/mrig)
[18:53:12] *** Quits: hendry (~hendry@210.23.22.2) (Ping timeout: 252 seconds)
[18:53:31] *** Joins: lemmi (~lemmi@user/lemmi)
[18:53:37] *** Quits: cim (~cim@205.185.117.110) (Read error: Connection reset by peer)
[18:53:37] *** cim6 is now known as cim
[18:53:55] *** Joins: hendry (~hendry@210.23.22.2)
[18:53:58] *** Joins: iateadonut (~dan@121.177.17.154)
[18:54:04] *** Joins: chilversc (~chilversc@user/chilversc)
[18:58:44] *** Joins: dkmueller (~dkmueller@2a01:c22:7262:e300:7229:8c74:cc39:3a35)
[19:03:46] *** Parts: iateadonut (~dan@121.177.17.154) ()
[19:04:37] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:06:08] *** Joins: andlabs (~andlabs@68.237.68.71)
[19:09:27] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:11:15] *** Joins: r[]n|n (~r]n|n@131.228.48.95)
[19:13:16] *** Quits: kshockey (~kyshoc@user/kyshoc) (Quit: ZNC 1.8.0 - https://znc.in)
[19:17:27] *** Quits: yoonkn (~user@175.197.208.79) (Remote host closed the connection)
[19:26:46] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[19:27:45] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[19:28:55] *** Quits: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca) (Ping timeout: 272 seconds)
[19:36:00] *** Quits: dkmueller (~dkmueller@2a01:c22:7262:e300:7229:8c74:cc39:3a35) (Quit: WeeChat 3.1)
[19:42:59] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:42:59] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:42:59] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[19:43:11] *** Joins: mambang (~mambang@user/mambang)
[19:43:26] *** Quits: davidkrauser (~davidkrau@user/davidkrauser) (Quit: Leaving)
[19:45:47] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Client Quit)
[19:48:08] *** Joins: SincereFox (uid337158@user/sincerefox)
[19:49:19] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[19:49:19] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[19:49:19] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[19:55:04] *** Quits: bougyman (~bougyman@user/bougyman) (Quit: ZNC 1.6.4 - http://znc.in)
[19:55:16] *** Joins: bougyman (~bougyman@user/bougyman)
[19:55:21] *** Quits: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net) (Quit: ZNC 1.8.2 - https://znc.in)
[20:06:11] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Ping timeout: 244 seconds)
[20:07:05] *** Joins: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca)
[20:09:20] *** Joins: LtHummus (~lthummus@174-21-28-50.tukw.qwest.net)
[20:12:26] *** Quits: Crassus (~Crassus@user/crassus) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[20:12:49] *** Quits: acidfu (~nicolasbo@bras-base-ctldpq2802w-grc-07-184-148-246-9.dsl.bell.ca) (Ping timeout: 272 seconds)
[20:14:10] *** Quits: TFKyle (~kyle@64.201.205.70) (Quit: :q!)
[20:19:06] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 244 seconds)
[20:19:59] *** Joins: seabass (~sebastian@user/seabass)
[20:35:16] *** Quits: mambang (~mambang@user/mambang) (Quit: Leaving)
[20:36:18] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[20:38:59] *** Joins: fef (~thedawn@user/thedawn)
[20:46:43] *** Joins: VaniaPy (~VaniaPy@46.12.111.76.dsl.dyn.forthnet.gr)
[20:47:36] <VaniaPy> Hello,i'm  trying to dockerize a golang app and i'm getting the following error "go: go.mod file not found in current directory or any parent directory; see 'go help modules' "
[20:52:10] <rewt> go build outside, and put the resulting binary into the docker image
[20:54:54] *** Quits: Garb0 (~Garb0@user/garb0) (Quit: Garb0)
[20:58:23] *** Joins: arcatech (~arcatech@user/arcatech)
[21:00:04] *** Joins: NotKyros (~kyros@user/kyros)
[21:00:57] *** Quits: Kyros (~kyros@user/kyros) (Ping timeout: 272 seconds)
[21:00:57] *** NotKyros is now known as Kyros
[21:02:18] *** Joins: src (~src@user/src)
[21:02:52] *** Joins: Crassus (~Crassus@user/crassus)
[21:04:18] *** Joins: NotKyros (~kyros@user/kyros)
[21:05:12] *** Quits: Kyros (~kyros@user/kyros) (Ping timeout: 252 seconds)
[21:05:13] *** NotKyros is now known as Kyros
[21:06:00] <VaniaPy> rewt when you're saying outside?
[21:07:28] *** Quits: r[]n|n (~r]n|n@131.228.48.95) (Quit: leaving)
[21:07:37] <rewt> outside the docker container
[21:08:07] <rewt> i don't have a lot to go on here, so just throwing out ideas
[21:08:30] <ikke> VaniaPy: You have to give a bit more details
[21:08:48] <ikke> go 1.16 by default expects go modules, so it looks for a go.mod file
[21:08:57] <ikke> This error means that file is not found
[21:09:06] <ikke> How are you trying to build the binary?
[21:10:15] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 244 seconds)
[21:12:48] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[21:16:07] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[21:17:40] <VaniaPy> ikke check the docker file https://dpaste.org/CZYe
[21:18:19] *** Joins: moog (~moog@107.242.124.101)
[21:22:03] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[21:24:49] *** Joins: Patch (~Patch@pool-108-51-126-77.washdc.fios.verizon.net)
[21:24:55] *** Quits: keiser009 (~keiser@83.25.214.136.ipv4.supernova.orange.pl) (Quit: The Lounge - https://thelounge.chat)
[21:25:26] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[21:25:26] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[21:25:26] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[21:25:56] *** Joins: keiser009 (~keiser@83.25.214.136.ipv4.supernova.orange.pl)
[21:32:48] *** Joins: dyslexic1t (~dyslexica@ymir.whatbox.ca)
[21:33:45] *** Quits: Torr (~Torr@170.83.146.97) (Quit: Lost terminal)
[21:34:54] *** Quits: dyslexicat (~dyslexica@ymir.whatbox.ca) (Ping timeout: 252 seconds)
[21:38:24] <ikke> I would recommend doing this in 2 steps
[21:38:28] <ikke> VaniaPy: ^
[21:38:47] <ikke> in any case, this does not tell about the go project
[21:51:54] *** Quits: Crassus (~Crassus@user/crassus) (Ping timeout: 264 seconds)
[21:54:57] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 264 seconds)
[21:55:38] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:58:09] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[22:06:47] *** Quits: SincereFox (uid337158@user/sincerefox) (Quit: Connection closed for inactivity)
[22:08:57] *** Joins: Torr (~Torr@170.83.146.97)
[22:16:58] <llorllale> VaniaPy: have you mounted the volume where the source code is?
[22:17:24] <llorllale> Also what version of Go are you using?
[22:19:32] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: Ping timeout (120 seconds))
[22:20:45] <llorllale> ah - I hadn't seen your dockerfile
[22:20:53] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[22:28:21] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:32:35] *** Joins: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com)
[22:35:21] *** Quits: VaniaPy (~VaniaPy@46.12.111.76.dsl.dyn.forthnet.gr) (Quit: Connection closed)
[22:37:33] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[22:49:07] *** Joins: SebastianM (~seba@user/sebastianm)
[22:51:59] *** Quits: crowbar (~user@user/crowbar) (Ping timeout: 252 seconds)
[22:56:38] *** Quits: be3uykpy (~be3uykpy@141.226.9.247) (Read error: Connection reset by peer)
[22:57:34] *** Joins: dyslexicat (~dyslexica@ymir.whatbox.ca)
[22:57:50] *** Joins: Ohlov389517490 (~Ohlov3@dyndsl-085-016-106-106.ewe-ip-backbone.de)
[23:00:05] *** Quits: kn100 (~kn100@wireguard/tunneler/kn100) (Remote host closed the connection)
[23:00:09] *** Quits: dyslexic1t (~dyslexica@ymir.whatbox.ca) (Ping timeout: 252 seconds)
[23:01:17] *** Quits: Ohlov38951749 (~Ohlov3@host-091-097-116-035.ewe-ip-backbone.de) (Ping timeout: 272 seconds)
[23:03:38] *** Joins: kn100 (~kn100@wireguard/tunneler/kn100)
[23:06:51] *** Quits: souvik_ (~souvik@103.199.182.163) (Ping timeout: 268 seconds)
[23:07:30] *** Joins: souvik (~souvik@103.199.182.163)
[23:09:00] *** Quits: src (~src@user/src) (Quit: leaving)
[23:09:14] *** Joins: src (~src@user/src)
[23:10:02] *** Quits: src (~src@user/src) (Client Quit)
[23:10:28] *** Joins: src (~src@user/src)
[23:12:00] *** Quits: Skyz (~Skyz@ool-43538427.dyn.optonline.net) (Ping timeout: 250 seconds)
[23:12:53] *** Quits: src (~src@user/src) (Client Quit)
[23:17:03] *** Joins: src (~src@user/src)
[23:17:26] *** Joins: bodhi1 (~bodhi@c-73-93-87-220.hsd1.ca.comcast.net)
[23:17:26] *** Quits: src (~src@user/src) (Client Quit)
[23:17:39] *** Quits: betelgeuse (~john2gb@94-225-47-8.access.telenet.be) (Quit: Ping timeout (120 seconds))
[23:18:20] *** Joins: Skyz (~Skyz@ool-43538427.dyn.optonline.net)
[23:18:34] *** Joins: src (~src@user/src)
[23:19:00] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[23:23:20] *** Quits: whoami (~whoami@d118-75-90-9.try.wideopenwest.com) (Ping timeout: 252 seconds)
[23:25:38] *** Joins: whoami (~whoami@d118-75-90-9.try.wideopenwest.com)
[23:30:53] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[23:31:03] *** Quits: SebastianM (~seba@user/sebastianm) (Read error: Connection reset by peer)
[23:32:39] *** Joins: BenLubar (~ben@cpe-65-28-175-139.wi.res.rr.com)
[23:32:45] <BenLubar> has anyone gotten cgo working with js/wasm?
[23:33:19] *** Quits: arcatech (~arcatech@user/arcatech) (Quit: Bye.)
[23:36:16] *** Joins: SebastianM (~seba@user/sebastianm)
[23:41:42] *** Joins: tg (~tg@rockylinux/infra/tg)
[23:45:15] *** Quits: gilesc (~textual@cpe-172-112-18-165.socal.res.rr.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:47:12] *** Quits: ddevault (znc@sourcehut/staff/ddevault) (Quit: taking a break)
[23:51:45] *** Quits: andlabs (~andlabs@68.237.68.71) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:54:14] *** Joins: Garb0 (~Garb0@user/garb0)
