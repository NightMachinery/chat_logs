[00:06:35] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 260 seconds)
[00:10:12] *** Joins: TCZ (~tcz@ip-91.246.66.101.skyware.pl)
[00:13:45] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[00:16:20] *** Joins: badkins (~badkins@136.56.92.199)
[00:22:36] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[00:24:08] *** Joins: badkins (~badkins@136.56.92.199)
[00:26:44] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[00:28:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[00:36:19] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:b7bf:f2e4:8adb:82c9) (Quit: Client closed)
[00:36:40] <dpk> hey look, Python is getting compound conditions https://bas.codes/posts/new-features-python-3-11#exception-groups--except
[00:36:54] <dpk> does that mean people won't bitch about us adding them to R7RS?
[00:37:24] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[00:37:54] <Franciman> lol
[00:39:37] <aeth> doesn't Python have a TOML parser? When is r7rs getting one?
[00:40:02] <aeth> In case no one has heard of it because it's not JSON or YAML. https://en.wikipedia.org/wiki/TOML
[00:41:24] <Franciman> :)
[00:41:32] <Franciman> aeth: does r7rs have a json parser?
[00:42:04] <aeth> there's SRFI 180, meaning you could probably create a heated flamewar on the r7rs-large mailing list
[00:42:12] <aeth> or maybe that's happened already, I should check
[00:42:30] <Franciman> looool
[00:42:33] <Franciman> inlove
[00:43:12] <aeth> perhaps it has happened. https://github.com/johnwcowan/r7rs-work/blob/master/JsoCowan.md
[00:43:21] <aeth> > See SRFI 180
[00:43:51] <aeth> https://github.com/johnwcowan/r7rs-work/blob/1376e07e491fe603229da5fa31f01b6fd5d25e5e/CommitteeBDockets.md#hypnos-docket-portable-srfis
[00:43:52] <rudybot> https://teensy.info/6Wq01Wc7iH
[00:45:05] <amazigh> add me to the list :p
[00:47:11] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[00:47:40] <amazigh> my rationale outside social pressure is: R7RS should offer guidelines on what is in, and what is out, such as: a) that is a common case, b) that is schemey c) that is handy d) that is generic enough
[00:47:56] <amazigh> but SRFI-180 is trying to solve a problem nobody has (or should have)
[00:48:18] <amazigh> in the spirit of side-effect-poisoning
[00:48:26] <amazigh> who read bigger than RAM JSON?!
[00:48:54] <dpk> ah, i see you've become a member of the Your Dataset Fits In Memory Party
[00:49:32] <dpk> you can get people to hire you as a Big Data consultant and charge them unreasonable amounts per hour for you to tell them that 1TB of RAM is actually quite cheap
[00:49:52] <amazigh> another example, but some may disagree, converting to ad-hoc records in one pass... is early optimization.
[00:50:04] <amazigh> dpk: true story
[00:50:48] <dpk> (actually, may not be as cheap as it was when i first heard that joke, because of microchip shortage etc)
[00:51:30] <amazigh> Someone on #lisp told me they use RAM for all their dataset, and they have a database...
[00:51:41] <amazigh> MongoDB too
[00:51:56] <amazigh> but JSON is not the tool for those usecase
[00:52:14] <dpk> i was going to ask if it was ITA Software, but i don't think they'd be caught dead within ten miles of MongoDB
[00:52:27] <dpk> (they're probably deeply tied to the Googlestack these days anyway)
[00:52:49] <amazigh> it is not ITA, but a company dedicated in RDF / semantic databases
[00:52:54] <ChoHag> Nothing wrong with RAM for a backing store.
[00:53:02] <ChoHag> Telcos do it.
[00:53:09] <amazigh> yes and no :) it depends on your use case.
[00:53:43] <aeth> consider video games because they're an interesting exception to how things are usually structured
[00:53:54] <aeth> not unusual to have all of the world state in RAM except when periodically saving
[00:54:17] <amazigh> their database is TBs
[00:54:26] <amazigh> not a regular game database
[00:55:05] <aeth> well, yeah, a game has to fit in 8-16 GB of RAM as you have to write to the normal minimum spec of your users' machines... and you need spare RAM to load massive graphical assets just to unload them once the GPU gets them
[00:55:10] <amazigh> but I know expert of games, I guess it is a normal consumer game
[01:03:35] <ChoHag> Games these days are enormous.
[01:04:03] <ChoHag> Somehow Microsoft and their allies have managed to bloat Doom to a GB or so.
[01:04:52] <ChoHag> The average download I see going through an Xbox these days is never measured in less than 10s of gigabytes. 100+ is extremely common.
[01:05:22] <ChoHag> I honestly have no idea what they're putting in there.
[01:07:40] <ChoHag> But I'm pleased to see that SimSysAdmin is being built in to all gaming devices these days. That game's given me much joy (money) throughout my life so I'm glad the general masses can also have so much fun. Whether they like it or not.
[01:07:43] <amazigh> they put textures for various resolutions
[01:08:10] <aeth> ChoHag: games are enormous, yes, but that's mostly just things like textures, which are loaded into VRAM on the graphics card for the GPU
[01:08:33] *** Joins: badkins (~badkins@136.56.92.199)
[01:08:46] <ChoHag> I'm sorry but when Doom is being measured in gigabytes we have a problem.
[01:08:50] <aeth> ChoHag: the actual world state in modern games might be simpler than old video games... for instance, I've noticed a lot of the time, all of the props on a level are "glued", while the '00s experimented with physics props and maybe even fully destructable environments
[01:09:18] <aeth> compare Counter-Strike: Source's cs_office with CS:GO's cs_office
[01:09:32] <aeth> the latter, newer, game glues all of the props for performance and so you can't push them around for a competitive advantage
[01:09:42] <aeth> in the former game, you could shoot shelves and stuff
[01:10:26] <ChoHag> From what I see --- I don't play much --- game designers a floundering with little clue what to do with the technology.
[01:10:40] <aeth> (Counter-Strike is a good example of the evolution of games over time because it just continually remakes its old, late-90s maps. Most franchises go for new content in new releases.)
[01:10:41] <ChoHag> Many games seem to be basically rogue++.
[01:11:55] <ChoHag> Rub an FPS on it.
[01:11:57] <aeth> ChoHag: it's because the main thing that has improved over the past 15 years is the GPU
[01:12:09] <aeth> so the main thing that games have done over the past 15 years is improve the graphics
[01:12:17] <aeth> it really follows hardware
[01:12:54] <aeth> The only place where games have to experiment right now is VR
[01:13:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[01:14:44] <ChoHag> Games could begin to take advantage of machine learning.
[01:14:59] <aeth> You can see this with the Steam Deck. Turn down the graphics (sometimes not even that) and target 800p (the 16:10 version of the 16:9 720p) instead of 4k and you get to play brand new games on a handheld in 15W
[01:15:19] <aeth> So games really, really haven't done anything but up the graphics and up the resolution and framerate
[01:15:37] <aeth> Otherwise you couldn't play new games on what's effectively the equivalent of 8 year old hardware (the Steam Deck)
[01:15:44] <ChoHag> They used to push technology.
[01:19:28] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[01:19:54] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[01:20:04] <aeth> oh, and I think they do use machine learning, but just to upscale
[01:20:18] <aeth> render at 1080p, machine learning upscale to 4k
[01:21:35] <ChoHag> They use machine learning in the in-game marketplace.
[01:22:01] <aeth> I mean, yeah, that's the main place where gaming is unrecognizable to a 2008 gamer... all of the monetization
[01:22:14] <aeth> but even that isn't really unrecognizable, they'd probably just go "everyone copied Zynga???"
[01:24:22] <aeth> and then Facebook controls VR right now so you know where they want to go with that
[01:25:00] *** Joins: madsy (~madsy@223.239.164.82.customer.cdi.no)
[01:28:56] <aeth> but all of this is getting sidetracked from the original point, that a game's world state is effectively just an in-memory database
[01:29:36] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[01:31:29] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:31:43] *** Joins: badkins (~badkins@136.56.92.199)
[01:35:57] *** Quits: epony (epony@user/epony) (Quit: QUIT)
[01:36:11] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[01:38:21] *** Quits: m455 (~m455@user/m455) (Quit: WeeChat 3.0)
[01:39:56] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 245 seconds)
[01:40:35] *** Joins: m455 (~m455@user/m455)
[01:40:43] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:42:01] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[01:43:50] *** Joins: eddof13 (~textual@189.178.17.205)
[01:45:09] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:f96:57c8:3ffe:163)
[01:52:51] *** Joins: badkins (~badkins@136.56.92.199)
[01:57:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:00:36] *** Quits: madsy (~madsy@223.239.164.82.customer.cdi.no) (Quit: madsy)
[02:01:26] *** Joins: Madsy (~madsy@223.239.164.82.customer.cdi.no)
[02:07:32] *** Quits: TCZ (~tcz@ip-91.246.66.101.skyware.pl) (Quit: Leaving)
[02:12:55] *** Quits: wyrd (~wyrd@gateway/tor-sasl/wyrd) (Ping timeout: 240 seconds)
[02:15:07] *** Joins: wyrd (~wyrd@gateway/tor-sasl/wyrd)
[02:21:46] *** Joins: badkins (~badkins@136.56.92.199)
[02:27:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[02:36:04] *** Joins: badkins (~badkins@136.56.92.199)
[02:40:25] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[02:55:25] *** Joins: badkins (~badkins@136.56.92.199)
[02:55:30] *** Joins: seninha (~seninha@user/seninha)
[03:00:11] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[03:12:37] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[03:21:09] *** Quits: mala (~mala@user/malaclyps) (Read error: Connection reset by peer)
[03:22:49] *** Joins: mala (~mala@user/malaclyps)
[03:29:00] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Read error: Connection reset by peer)
[03:30:07] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 246 seconds)
[03:37:56] *** Quits: Avichi (~Avichi@2001:980:1b5c:1:f96:57c8:3ffe:163) (Ping timeout: 250 seconds)
[03:41:59] *** Quits: eddof13 (~textual@189.178.17.205) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:13:18] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 260 seconds)
[04:14:50] *** Joins: johnjaye (~pi@173.209.64.74)
[04:17:19] *** Joins: badkins (~badkins@136.56.92.199)
[04:21:48] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[04:23:08] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[04:25:29] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[04:26:11] *** Joins: jrincayc1 (~Thunderbi@38.70.240.202.sumofiber.net)
[04:26:12] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Read error: Connection reset by peer)
[04:26:13] *** jrincayc1 is now known as jrincayc
[04:28:39] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[04:45:20] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[04:48:26] *** Joins: badkins (~badkins@136.56.92.199)
[04:53:35] *** Quits: madage (~madage@user/madage) (Ping timeout: 240 seconds)
[04:54:14] *** Joins: madage (~madage@user/madage)
[04:59:01] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[05:00:10] *** Joins: badkins (~badkins@136.56.92.199)
[05:08:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:09:07] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[05:09:30] *** Joins: badkins (~badkins@136.56.92.199)
[05:10:10] *** Joins: Zipheir (~wcm@98.4.178.27)
[05:13:01] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 246 seconds)
[05:13:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[05:16:04] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[05:33:05] *** Joins: badkins (~badkins@136.56.92.199)
[05:37:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[05:45:09] *** Joins: zacque (~zacque@1.32.90.32)
[05:49:13] *** Joins: badkins (~badkins@136.56.92.199)
[05:53:35] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[05:53:47] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[06:01:15] *** Joins: livoreno (~livoreno@user/notzmv)
[06:09:05] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[06:33:32] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[06:33:43] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Client Quit)
[06:35:45] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
[06:44:39] *** Joins: badkins (~badkins@136.56.92.199)
[06:49:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[06:56:38] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[07:19:56] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[07:31:18] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Quit: leaving)
[07:36:45] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[07:37:22] <Aurora_v_kosmose> Gambit Scheme has a backend for javascript output... but it seems to have no documented API/FFI for interacting with that javascript environment.
[07:37:30] <Aurora_v_kosmose> Am I missing something?
[07:42:28] *** Quits: daviid (~user@179.210.58.162) (Ping timeout: 246 seconds)
[07:42:29] <Aurora_v_kosmose> If it is missing such, then am I not better off simply compiling it to C and using emscriptem?
[07:45:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[07:46:35] *** Quits: Aurora_v_kosmose (~LispyLigh@user/lispylights) (Ping timeout: 240 seconds)
[07:50:29] *** Quits: poselyqualityles (~whirl@user/poselyqualityles) (Ping timeout: 256 seconds)
[07:52:44] *** Joins: Aurora_v_kosmose (~LispyLigh@user/lispylights)
[07:54:10] *** Joins: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:05:31] <mdhughes> Most games keep only the current level/zone/a few nearby chunks in RAM, everything else is kept on disk.
[08:06:36] <Aurora_v_kosmose> How well they do that and what they choose to keep loaded impacts performance a lot. See how >100fps on low-end hardware is easily achieved in Doom Eternal vs other games.
[08:06:38] <mdhughes> And while the world models often aren't that mutable or complex, modern 3D games have massively more polys & textures than old/2D games.
[08:06:46] *** Joins: daviid (~user@2804:18:5827:2b81:cd9a:8e53:ca93:2124)
[08:07:31] <mdhughes> Doom was fast because the levels are smallish and very carefully constrained, they have a limited texture set, and they pre-bake the lighting & BSP tree, it used to take hours to compile a level.
[08:08:17] <Aurora_v_kosmose> There's a publicly available SDK for Doom Eternal?
[08:08:44] <mdhughes> I mean real DOOM, not the shitty modern 3D versions.
[08:09:17] <mdhughes> Modern 3D stuff is entirely done at runtime, on the GPU. If you don't have a good GPU, you get no game.
[08:09:26] <gwatt> doom 2016 was pretty great. got bored with eternal though
[08:09:55] *** Quits: lumberjack123 (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[08:10:03] <mdhughes> DOOM is only 2.5D. DOOM 2, Heretic, Hexen, maybe Rise of the Triad, fine. I reject modernity.
[08:11:15] <mdhughes> But my point is, you don't pull in an entire game world to RAM, just the parts you absolutely have to have. If you travel between zones, you fake the edges of the neighbor zone and teleport the player over when they go inside.
[08:14:29] <gwatt> You can see how it works if you play minecraft, especially on a server
[08:14:58] <Aurora_v_kosmose> I wonder how differently minetest does it.
[08:17:04] <mdhughes> Right, MC used to be *really* bad about chunk loading, now it only happens if you run ahead too fast in a slow server.
[08:18:12] *** Joins: badkins (~badkins@136.56.92.199)
[08:19:29] *** Joins: alMalsamo (~alMalsamo@gateway/tor-sasl/almalsamo)
[08:22:22] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[08:26:24] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[08:34:35] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[08:56:20] *** Quits: lockywolf (~lockywolf@public.lockywolf.net) (Quit: ZNC 1.8.2 - https://znc.in)
[09:03:35] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[09:09:15] *** Joins: badkins (~badkins@136.56.92.199)
[09:13:59] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[09:16:26] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[09:17:03] *** alMalsamo is now known as littlebobeep
[09:32:37] *** Quits: Kooda (~kooda@natsu.upyum.com) (Remote host closed the connection)
[09:35:19] *** Joins: Kooda (~kooda@natsu.upyum.com)
[09:46:39] *** Quits: daviid (~user@2804:18:5827:2b81:cd9a:8e53:ca93:2124) (Ping timeout: 260 seconds)
[09:55:35] *** Quits: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net) (Read error: Connection reset by peer)
[09:56:48] <aeth> mdhughes: yes, but many visual polygons doesn't mean that the hitbox is anywhere near as complicated.
[09:56:57] <aeth> only the graphics card cares about the visual stuff
[10:00:29] <aeth> Afaik, you can have a 3D action game (FPS or third person) that has basically no difference between 2004 and now except for the textures and shaders... I'm guessing Doom Eternal falls in that category. Some games try to have very open worlds or tons of enemies or whatever.
[10:01:15] <aeth> Definitely doable to write something like this in Scheme because even if it's 5x slower than C, nobody's going to notice because the GPU does everything. Contrast with, say, Factorio. There the CPU does everything.
[10:07:04] <aeth> Very counterintuitive when you think about it because Doom Eternal looks more impressive, visually, but that's all on the GPU.
[10:13:04] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[10:49:23] *** Joins: badkins (~badkins@136.56.92.199)
[10:52:04] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[10:53:34] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[11:03:23] *** Quits: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net) (Ping timeout: 256 seconds)
[11:06:12] *** Quits: mala (~mala@user/malaclyps) (Quit: ZNC 1.6.1 - http://znc.in)
[11:06:25] *** Joins: mala (~mala@user/malaclyps)
[11:08:14] *** Quits: zwr (~zwr@2804:d45:b966:fb00:2e8a:1439:b3aa:fa15) (Ping timeout: 252 seconds)
[11:09:11] *** Joins: zwr (~zwr@2804:d45:b966:fb00:c58b:a714:9f5b:c7e1)
[11:26:12] *** Joins: civodul (~user@guix/contributor/civodul)
[11:31:01] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Ping timeout: 246 seconds)
[11:34:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[11:39:06] <mdhughes> The issue is the amount of content you're pushing thru, and keeping in memory. The GPU has to be loaded from your main RAM, and modern models have massively more data than they used to.
[11:40:50] <mdhughes> Factorio or any other 2D game certainly doesn't do it all in CPU, either, they use a GPU-backed renderer like SDL.
[11:49:11] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[11:53:03] <amazigh> Aurora_v_kosmose: here is an example https://git.sr.ht/~amirouche/gambit-scheme-pawns#how-to-compile-scheme-to-javascript
[11:56:51] *** Joins: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane)
[12:04:16] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Ping timeout: 246 seconds)
[12:09:17] *** Quits: johnjaye (~pi@173.209.64.74) (Ping timeout: 252 seconds)
[12:10:04] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:2b26:10cb:f0bf:5e24)
[12:12:15] *** Joins: johnjaye (~pi@173.209.64.74)
[12:24:18] *** Joins: clacke (88d96f2df3@knopi.disroot.org)
[12:47:01] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[13:07:10] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[13:12:44] *** Quits: sjamaan (~sjamaan@chicken/developer/sjamaan) (Quit: brb)
[13:13:23] *** Joins: sjamaan (~sjamaan@chicken/developer/sjamaan)
[13:15:21] *** Joins: gproto23 (~gproto23@user/gproto23)
[13:16:22] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 260 seconds)
[13:28:26] *** Quits: X-Scale (~ARM@231.197.28.37.rev.vodafone.pt) (Ping timeout: 272 seconds)
[13:31:40] *** Joins: daviid (~user@179.210.58.162)
[13:39:13] *** Quits: _________ (~nobody@user/noodly) (Ping timeout: 256 seconds)
[13:42:12] *** Quits: Oshawott (~archenoth@2604:3d09:681:f00:c43:c097:cf3e:e138) (Ping timeout: 240 seconds)
[13:51:01] *** Joins: civodul (~user@guix/contributor/civodul)
[13:52:24] <dTal> I am curious how common it is to be able to optimize (let ((g (lambda (y) (lambda (x) (+ x )))) (f (lambda (x y) ((g y) x)))) f) into (lambda (x y) (+ x y))
[13:52:56] <dTal> Chez Scheme doesn't
[13:56:33] <dTal> I think I will cross-post this into #lisp actually as well - not that I'm only interested in lispy languages, but the problem is easiest to state in lispy languages and also it's the community most likely to have something interesting to say about it
[14:05:25] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:07:41] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:14:04] *** Quits: daviid (~user@179.210.58.162) (Read error: Connection reset by peer)
[14:14:33] *** Joins: daviid (~user@179.210.58.162)
[14:22:57] *** Joins: schulze (~schulze@dynamic-077-006-151-205.77.6.pool.telefonica.de)
[14:25:37] *** Quits: amk (~amk@109.255.169.126) (Ping timeout: 240 seconds)
[14:27:38] *** Joins: amk (~amk@109.255.169.126)
[14:28:54] *** Joins: amk_ (~amk@109.255.169.126)
[14:33:37] *** Joins: s-liao (~s-liao@101.86.164.158)
[14:34:53] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 250 seconds)
[14:37:07] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[14:47:54] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Remote host closed the connection)
[14:48:17] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[14:50:35] *** Joins: badkins (~badkins@136.56.92.199)
[14:55:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[14:55:55] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[14:57:13] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:06:30] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[15:19:11] *** Joins: s-liao (~s-liao@101.86.164.158)
[15:23:15] *** Quits: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo) (Ping timeout: 240 seconds)
[15:23:17] *** Quits: livoreno (~livoreno@user/notzmv) (Remote host closed the connection)
[15:30:10] *** Joins: littlebobeep (~alMalsamo@gateway/tor-sasl/almalsamo)
[15:30:17] *** Joins: livoreno (~livoreno@user/notzmv)
[15:35:58] *** Quits: s-liao (~s-liao@101.86.164.158) (Ping timeout: 250 seconds)
[15:41:59] *** Joins: archenoth (~archenoth@2604:3d09:681:f00:35f1:5197:30da:36a6)
[16:06:41] *** Joins: Riastradh (~riastradh@netbsd/board/riastradh)
[16:08:06] <Riastradh> ns12: (letrec* ((x E) (y F)) ...) can be (let ((x) (y)) (set! x E) (set! x F) ...), whereas for letrec it must be (let ((x) (y)) (let ((a E) (b F)) (set! x a) (set! y b)) ...).  letrec is kinda more complicated, yes.
[16:14:54] *** Joins: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net)
[16:23:17] *** Joins: badkins (~badkins@136.56.92.199)
[16:25:47] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 272 seconds)
[16:27:28] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[16:27:36] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[16:35:53] *** Joins: s-liao (~s-liao@101.86.164.158)
[16:37:03] *** Quits: aeth (~aeth@user/aeth) (Ping timeout: 260 seconds)
[16:38:52] *** Joins: aeth (~aeth@user/aeth)
[16:52:43] *** Quits: jrincayc (~Thunderbi@38.70.240.202.sumofiber.net) (Ping timeout: 260 seconds)
[16:55:54] <ns12> Thank you Riastradh.
[16:57:29] <ns12> Isn't (let ((x) (y)) ...) invalid, since x and y are missing their values?
[17:15:01] <ns12> I guess this is just like (define x) (define y) which is not standard Scheme.
[17:23:05] <sham1> Well I'd imagine that (let ((x)) x) would just evaluate to nil
[17:23:10] <sham1> Well, ()
[17:23:31] *** Quits: livoreno (~livoreno@user/notzmv) (Ping timeout: 260 seconds)
[17:25:27] <sham1> Although actually not
[17:25:52] <sham1> Since the pattern is ((var val) ...)
[17:33:03] *** Quits: zacque (~zacque@1.32.90.32) (Quit: Goodbye :D)
[17:48:54] <Riastradh> ns12: yeah, nonstandard, means `create a variable x but make it an error for anything to try to use its value before it has been assigned'
[17:54:09] <Riastradh> sham1: (let ((x)) x) is an error
[17:54:14] <Riastradh> 1 ]=> (let ((x)) x)
[17:54:14] <Riastradh> ;Unassigned variable: x
[17:54:14] <Riastradh> ;To continue, call RESTART with an option number:
[17:54:14] <Riastradh> ; (RESTART 3) => Specify a value to use instead of x.
[17:54:14] <Riastradh> ; (RESTART 2) => Set x to a given value.
[17:54:16] <Riastradh> ; (RESTART 1) => Return to read-eval-print level 1.
[17:54:17] <sham1> I know
[17:54:19] <Riastradh> 2 error> 
[17:54:51] <sham1> I realized my mistake latee
[17:56:32] <Riastradh> (let ((x)) ...) is a MIT Scheme extension -- that's not the error part; it's trying to use the value of x that's an error.
[17:57:46] *** Joins: Avichi (~Avichi@2001:980:1b5c:1:37d8:17fb:6a:a772)
[17:58:10] *** Joins: badkins (~badkins@136.56.92.199)
[18:02:43] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[18:14:36] <wasamasa> huh
[18:14:42] <wasamasa> so it's kind of like (defvar x) in elisp?
[18:16:31] <Aurora_v_kosmose> amazigh: Ah, so the infix way is how. Thanks.
[18:17:54] *** Joins: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03)
[18:22:31] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:2b26:10cb:f0bf:5e24) (Quit: WeeChat 2.8)
[18:33:45] *** Joins: badkins (~badkins@136.56.92.199)
[18:37:39] *** Quits: rx80 (~quassel@user/rx80) ()
[18:39:48] *** Joins: rx80 (~quassel@user/rx80)
[18:42:40] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Quit: ec)
[18:47:24] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[18:52:52] *** Joins: jao (~jao@cpc103048-sgyl39-2-0-cust502.18-2.cable.virginm.net)
[19:03:26] *** Joins: badkins (~badkins@136.56.92.199)
[19:07:46] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 246 seconds)
[19:14:34] <Riastradh> wasamasa: not quite, because (aside from the semantics if x is already defined) after (defvar x) you can still use the value of x, and it's nil; with (let ((x)) ...), merely trying to use the value of x raises an error.
[19:20:29] *** Quits: s-liao (~s-liao@101.86.164.158) (Quit: Client closed)
[19:22:34] <amazigh> 'gambit scheme pawns' page moved to http://hyper.dev/n/gambit-scheme-pawns/
[19:25:10] <amazigh> I am gathering ideas about a revision of the 'hyper' http server at https://hyper.dev/n/compendium-of-web-patterns/ 
[19:25:13] <amazigh> change log: a) drop support for bigger than memory http response, b) support both html5, and json c) expose HTTP headers to the `proc` handler, and accept HTTP headers in response
[19:25:36] <amazigh> previous hyper http server was meant to support only single page application aka. REST APIs.
[19:26:42] <amazigh> now it support both one page per HTTP request, where the frontend HTML is rendered by the backend, and JSON over HTTP aka. REST API.
[19:28:08] <gwatt> dTal: the reason that's not optimized is that you're using let. You need to use let* or letrec
[19:28:53] <dTal> yeah I noticed - I also had an old version of g in my repl that made it not die
[19:29:12] <dTal> there was some good discussion in #lisp about it
[19:29:12] <amazigh> how do you check what it is compiled to?
[19:29:43] <amazigh> do you pass through `expand` or look at the generated assembly? maybe there is something in between?
[19:29:59] <gwatt> expand/optimize
[19:30:18] <dTal> you can also tell the difference just with (time)
[19:30:36] <dTal> since the nested function version allocates, and the inlined version doesn't
[19:31:04] <gwatt> true, but that seems harder than just running the code through expand/optimize
[19:31:28] <dTal> I didn't know about expand, I was using (#%$assembly-output #t) in Chez which is not easy to interpret
[19:32:41] <gwatt> expand just runs macro expansion. expand/optimize does macro expansion and the optimizer pass. In almost all cases, it will show the final product of what gets sent to the compiler.
[19:32:58] <amazigh> I have somewhere the paper about cp0
[19:33:24] <gwatt> Some syntactic definitions just expand (void)
[19:33:36] <gwatt> * expand to void
[19:34:25] <dTal> I can't make head nor tail out of its output
[19:34:44] <dTal> this means nothing to me (lambda (#{x kwib5yaak0spytqysxho0833d-0}  #{y kwib5yaak0spytqysxho0833d-1})   #{x kwib5yaak0spytqysxho0833d-0})
[19:34:53] <gwatt> You might want to use (print-gensym #f) or (print-gensym 'pretty/suffix)
[19:35:12] <dTal> also it doesn't seem to work on functions, you have to pass it forms
[19:35:17] <gwatt> That's chez's gensym literal syntax
[19:35:23] <amazigh> Oscar Waddell PhD thesis
[19:35:41] <gwatt> Yes, you need to pass expand or expand/optimize a quoted expression
[19:35:45] <dTal> which I mean, fine, but I don't know where you're getting that it's easier than just calling (time) :P
[19:35:57] <amazigh> ^_^'
[19:36:23] <gwatt> because I can actually see what the code is and I dont' have to guess at why it might be taking longer or performing more allocations
[19:36:32] <dTal> more powerful, for certain
[19:36:38] <dTal> but you see I am a bear of very little brain
[19:37:12] <amazigh> herbey dTal shall be known as the bear assembly reader.
[19:37:22] <gwatt> You can turn off the pretty-printing of gensyms, and just see the basic symbol if you don't care about checking for hygiene
[19:37:31] *** Joins: badkins (~badkins@136.56.92.199)
[19:38:06] <amazigh> good tip
[19:38:15] <dTal> yes that's much nicer!
[19:38:43] *** Parts: Riastradh (~riastradh@netbsd/board/riastradh) ()
[19:38:45] <amazigh> you can also read cp0 in one breath :)
[19:38:51] <dTal> so the message I got from #lisp this morning is that global scope is important
[19:38:57] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[19:39:05] *** Joins: badkins (~badkins@136.56.92.199)
[19:39:09] <dTal> this all works because it's inside a let-expression, so (g) can't change
[19:39:25] <dTal> but if (g) is global, it doesn't get optimized
[19:39:43] <amazigh> the REPL change stuff also like you already noticed.
[19:40:04] <amazigh> global in scheme is the same as a static variable in C
[19:40:29] <gwatt> erm, no?
[19:40:38] <gwatt> oh, you mean a static in a function?
[19:40:40] <amazigh> yes no, forgot to NOT
[19:40:46] <amazigh> global in scheme is NOT the same as a static variable in C
[19:41:46] <edgar-rft> beware, if you touch a static variable you'll get zapped!
[19:41:50] <amazigh> btw, I am wondering why the chez user manual recommends against side-effects at the top level of libraries, instead IIRC it is written to call an init procedure
[19:42:05] <dTal> What prompted this line of inquiry for me was the observation that Julia does indeed optimize this, *even if g is global*
[19:43:21] <gwatt> amazigh: libraries can be lazily loaded and their bodies run at odd times. If you need explicit initialization order, having an init procedure allows that
[19:44:14] <amazigh> dTal: what is global in Julia?
[19:44:33] <amazigh> what is the semantic associated with a global procedure?
[19:45:10] <amazigh> is it imported from a library? can you monkeypatch the procedure and then that monkeypatch is visible in other libraries?
[19:46:40] <amazigh> afaiu the definition that is done at top-level, can still be changed that's why it is not optimized.
[19:50:23] *** Joins: klovett (~klovett@107.116.92.147)
[19:50:32] *** Quits: klovett (~klovett@107.116.92.147) (Client Quit)
[19:51:01] <dTal> I think the key difference is that no, Julia does not expect you to redefine functions
[19:51:34] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[19:52:51] <dTal> although... testing it in a repl... it works
[19:52:53] <Zipheir> ns12: I'm reading EoPL at the moment, and there is *extensive* work on letrec in that book.  Interestingly, they don't give you a "lets-and-sets" implementation to start with.
[19:53:14] <dTal> this is extremely cunning, how does it do this?
[19:53:51] <tokie> Aurora_v_kosmose: https://lips.js.org/
[19:54:00] <dTal> I redefined (g) (to include a +1) and then the assembly dump of (f) automatically updated...
[19:54:21] <dTal> I wonder if Julia does dependency tracking, and recompiles if anything changes
[19:54:42] <ns12> Zipheir: What do they start with?
[19:54:45] <dTal> It has to do a lot of that sort of bookkeeping anyway because of multiple dispatch
[19:57:52] <dTal> https://bpa.st/PL2A
[19:58:34] <dTal> amazigh: ^ yes you can indeed monkeypatch the definition
[19:59:20] *** Quits: gproto23 (~gproto23@user/gproto23) (Read error: Connection reset by peer)
[20:00:28] <Zipheir> ns12: They have environments that indicate vanilla and recursive bindings, and, when the interpreter finds a letrec, it constructs the closure on-the-fly.
[20:01:34] <Zipheir> ns12: No wonky dummy variables.  The downside is that a new closure is constructed each time a letrec procedure is applied.  (It's also a simplified letrec that only binds procedures.)
[20:02:02] <Zipheir> It's a good implementation to present the idea with, though.
[20:02:58] <ns12> Zipheir: Does it behave the same as the MIT Scheme implementation?
[20:03:14] <Zipheir> The way you compile letrecs to the Nameless (de-Bruijned) language is actually quite cool.
[20:03:21] <Zipheir> ns12: No idea.
[20:03:32] * Zipheir reads the scrollback.
[20:04:46] <Zipheir> ns12: You mean the (let ((x)) ...) thing?
[20:06:08] <ns12> Zipheir: I mean the implementation of "letrec" and "letrec*".
[20:07:15] *** Joins: _________ (~nobody@user/noodly)
[20:08:48] <Zipheir> ns12: EoPL's letrec is *really* simple.  The only form provided would be equivalent to scheme (letrec ((f (lambda (x) exp1))) exp2)
[20:09:21] <Zipheir> All the extensions are left as exercises (with no solutions, of course).  *grumble*
[20:10:24] <Zipheir> I wish publishers would "strongly discourage" CS/math/etc. authors from that habit.
[20:10:49] <sham1> Having something be an exercise is one thing, but yeah, one should also get the solutions
[20:11:20] <sham1> What use is the exercise if I can't even check that I'm correct
[20:12:43] <Zipheir> Or maybe you got stuck and want to understand what you're missing.
[20:13:00] <sham1> Yeah
[20:14:26] <Zipheir> Amusingly, I chased down the solutions manual for the notoriously-obscure Algebra of Programming, and many of the solutions were literally marked "TODO" by the authors. :)
[20:15:42] <sham1> Oh that's just stupid 
[20:16:52] <Zipheir> Hah, I wouldn't be surprised if various famous books without solutions were heavily TODO'd behind the scenes...
[20:18:08] <Zipheir> Indeed, https://abstrusegoose.com/12
[20:18:59] *** Quits: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475) (Ping timeout: 260 seconds)
[20:20:45] *** Joins: mon_aaraj (~MonAaraj@user/mon-aaraj/x-4416475)
[20:21:43] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[20:27:34] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[20:33:07] *** Joins: wnklmnn (~wnklmnn@2a02:908:4e2:9740:4e5c:55ba:86d1:512)
[20:33:50] <mdhughes> amazigh: Returning a bytevector's not great in practice, it should be a port the proc writes to. Otherwise you're filling up RAM when returning, say, a 16GB image.
[20:35:15] <mdhughes> I don't think exceptions are that expensive in most Schemes, esp. compared to slow network traffic. Would really want to benchmark that.
[20:36:33] <mdhughes> Anything that takes more than a few positional arguments, I always want to put in a record. Request/Response records/objects are very common in web frameworks.
[20:39:46] <Zipheir> Master Perlis says: "If you have a procedure with ten parameters, you probably missed some."
[20:40:31] <LeoNerd> Anything beyond about 2 or maybe 3 params, you probably wanted to name them
[20:41:18] <mdhughes> Obj-C encouraged a lot of positional named params, because that's all messages are, but doing that without mandatory keywords is icky. And you have to remember the order/copy-paste from docs every time.
[20:43:34] <amazigh> thanks for the feedback, replying here *then* I will update the page.
[20:43:39] <amazigh> ref: https://www.robinsloan.com/notes/home-cooked-app/
[20:43:50] <amazigh> mdhughes: I forgot to mention that my plan is NOT to cover all possible use case of HTTP server. My goal with for that library is to ease the practice of... well.. home cooked apps, see ^
[20:44:30] <amazigh> for use cases that require a very large request body, or very large reponse body there will be the low level http reader / writer
[20:44:44] <amazigh> (tho at this time, you can interop with the hyper server)
[20:45:41] <amazigh> you can NOT interop the http1.1 library with the hyper server to support bigger than memory requests or response
[20:46:08] <amazigh> rudybot: remind me to proof-read myself before hiting enter.
[20:46:11] <rudybot> amazigh: I've been hiting C-x k to exit those debugger buffers, whoops
[20:47:05] <amazigh> re the number of arguments of the request handler called `proc` is too big indeed, thanks for noticing.
[20:51:15] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[20:54:12] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Ping timeout: 240 seconds)
[21:04:55] *** Quits: jobol (~jobol@2a01:e34:ee5c:ee50:d6be:d9ff:fea3:db03) (Quit: Leaving)
[21:10:26] *** Quits: Zipheir (~wcm@98.4.178.27) (Quit: BRB)
[21:11:11] *** Quits: zwr (~zwr@2804:d45:b966:fb00:c58b:a714:9f5b:c7e1) (Ping timeout: 256 seconds)
[21:11:52] *** Joins: zwr (~zwr@2804:d45:b966:fb00:218f:feb0:93c2:196c)
[21:13:07] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[21:14:53] *** Joins: Zipheir (~wcm@98.4.178.27)
[21:18:01] *** Quits: Zipheir (~wcm@98.4.178.27) (Client Quit)
[21:18:03] *** Joins: karlosz_ (~karlosz@47.151.152.149)
[21:18:23] *** Quits: karlosz_ (~karlosz@47.151.152.149) (Remote host closed the connection)
[21:18:35] <amazigh> NB: they are existing http libraries / frameworks even for Scheme
[21:19:33] *** Quits: clacke (88d96f2df3@knopi.disroot.org) (Remote host closed the connection)
[21:19:55] *** Joins: ahungry (~user@c-68-51-134-46.hsd1.mi.comcast.net)
[21:21:57] *** Quits: badkins (~badkins@136.56.92.199) (Remote host closed the connection)
[21:25:11] *** Joins: nishant (~nishant@2405:201:f005:c007:3ab2:bee7:6ff3:39cb)
[21:28:25] *** Joins: Zipheir (~wcm@98.4.178.27)
[21:35:13] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[21:36:40] *** Joins: badkins (~badkins@136.56.92.199)
[21:37:46] *** Joins: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de)
[21:43:00] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[21:46:09] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[21:46:28] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[22:06:52] *** Joins: badkins (~badkins@136.56.92.199)
[22:11:27] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 260 seconds)
[22:13:55] <sonny> What character is #\#?
[22:15:43] <Zipheir> #
[22:18:31] <sonny> Odd. That was the error I got as a missing match when there is no # in the file.
[22:18:34] * sonny shrugs
[22:19:04] <Franciman> Zipheir: are you into algebraic effect systems?
[22:21:12] <Zipheir> Franciman: Yes, although I haven't had time to research them recently.
[22:21:25] <Franciman> i am so in want of understanding them
[22:21:30] <Franciman> do you think they are a cool alternative to monads?
[22:22:06] <Zipheir> Some uses of monads, yeah.  Algebraic effects compose nicely, whereas monads don't in general.
[22:23:02] <Zipheir> IIUC you don't get the "big stack of monad transformers" problem with an AE model.
[22:23:26] <Franciman> that's neat, and i wonder what downside do we have that monads don't have?
[22:25:04] <Zipheir> It's not quite as nice a model.  You have to have an operational model of effect handlers, denotational won't cut it.
[22:27:06] <Zipheir> Or, at least you need a new kind of denotational model.  According to Oleg, the key paper here is Felleisen & Cartwright, Extensible Denotational Language Specifications http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.25.5941
[22:27:24] <johnjaye> Zipheir: what is EoPL
[22:27:32] <Zipheir> Franciman: Have you seen Oleg's Having an Effect lecture?
[22:27:50] <Franciman> i haven't
[22:28:04] <Franciman> i'll look it up
[22:28:06] <Franciman> thanks
[22:28:22] <Zipheir> johnjaye: Essentials of Programming Languages https://en.wikipedia.org/wiki/Essentials_of_Programming_Languages, by Dan Friedman of Little books fame and Mitch Wand.
[22:28:48] <johnjaye> heh. i feel bad. i googled it and did get that result
[22:28:55] <johnjaye> it looks like it's part of the racket doc though
[22:29:03] <Zipheir> Franciman: It's good, though Oleg thinks very fast.  https://www.youtube.com/watch?v=GhERMBT7u4w
[22:29:13] <Zipheir> johnjaye: Yeah, Racket's got a package for it.
[22:29:34] <Franciman> thanks
[22:30:01] *** Quits: ns12 (~ns12@user/ns12) (Quit: bye)
[22:30:08] <Zipheir> johnjaye: It's a very good book, more hands-on than PLFA or TaPL, but, as I said, I get annoyed at their tendency to stuff important details into exercises with no solutions.
[22:30:09] *** Quits: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[22:31:16] *** Joins: ns12 (~ns12@user/ns12)
[22:31:32] <johnjaye> i see
[22:31:36] <Zipheir> Funny thing about that Having an Effect video--watch for the *one* guy in the audience who looks totally into it.
[22:32:07] <sham1> He's certainly having an effect on the viewing experience
[22:33:02] <sonny> https://bpa.st/36DQ -- Is there any reason for an infinite loop in keyword or parse; I'm reviewing advent day 3
[22:33:48] <sonny> sorry, day 2
[22:34:46] <sonny> which is just parsing a file of vectors and producing the sum. The file looks like `forward 10\ndown 3...`
[22:35:09] <Zipheir> sonny: Why are you passing the input file as the next loop argument?
[22:35:15] <Zipheir> sonny: Don't you want a character?
[22:35:31] <sonny> oh course!
[22:35:33] <Zipheir> sonny: I think that's your problem.  eof-object? is never true of a port.
[22:35:38] <sonny> what a mistake
[22:35:55] <sonny> I guess this is what types are for :P
[22:36:17] <Zipheir> Yeah. :)
[22:37:11] <sonny> Is there no char->number?
[22:37:35] <johnjaye> i'd be suprised if scheme didn't treat chars as numbers
[22:37:47] <sonny> ah it's char->integer
[22:37:54] <johnjaye> ok i'm surprised then
[22:38:09] <sonny> I don't know if it does, I'm using racket
[22:38:19] <Zipheir> johnjaye: It doesn't.
[22:38:45] <sonny> I just saw char->integer in the fixum days document <https://ds26gte.github.io/tyscheme/index-Z-H-1.html#TAG:__tex2page_toc>
[22:39:09] <sonny> oof
[22:39:13] <Franciman> Zipheir: i have a question. Why do we care about Monads/Algebraic Effects? Can't we just put effects in, like we do with C and other impure languages?
[22:39:14] <Zipheir> johnjaye: In fact, a standards-compliant Scheme implementation can't have (number? #\a) => #t .
[22:39:26] <sonny> that is not what I expected xD
[22:40:13] <Zipheir> Franciman: Obviously yes, you can, but the question is, do you want side effects?
[22:42:51] *** Quits: atka (~atka@static-198-54-131-84.cust.tzulo.com) (Quit: WeeChat 3.4)
[22:43:21] <Zipheir> Side effects trash the semantics of programs, since you can use them to redefine anything.  So the idea is to provide controlled effects with regular semantics.
[22:44:06] <Zipheir> IMO a big question of the future in programming languages is not "pure" vs. "effectful", but "how do you control effects?"
[22:45:55] <johnjaye> Zipheir: i guess i shouldn't blindly apply my elisp intuition to scheme then
[22:46:21] <Franciman> so Zipheir they are mostly sandboxes
[22:48:24] *** Quits: kjak (~kjak@pool-108-45-56-21.washdc.fios.verizon.net) (Ping timeout: 252 seconds)
[22:50:32] <amazigh> sonny: #; is a thing
[22:50:36] *** Joins: casaca (~casaca@user/casaca)
[22:50:59] <amazigh> nvm that was another issue
[22:51:20] <sonny> my code is incorrect anyways, I just have a list of mostly #void
[22:51:43] <sonny> which means matching is failing and my keyword code isn't right
[22:52:03] <amazigh> (FYI #; starts a multiple comment, that ends at the end of the exp e.g. #;(foo bar baz) but over multiple lines)
[22:52:35] <sonny> ah
[22:55:44] <sonny> Zipheir how do I recurse? Using `(loop (read-char ip))` will not work. <https://bpa.st/AWNQ>
[22:56:35] *** Quits: wonko-the-sane (~wonk-the-@gateway/tor-sasl/wonko-the-sane) (Ping timeout: 240 seconds)
[23:02:37] *** Quits: mnieper (~user@ipbcc1ad82.dynamic.kabel-deutschland.de) (Ping timeout: 260 seconds)
[23:05:06] *** Quits: nishant (~nishant@2405:201:f005:c007:3ab2:bee7:6ff3:39cb) (Quit: Leaving)
[23:06:01] *** Joins: badkins (~badkins@136.56.92.199)
[23:07:08] <Zipheir> Franciman: I suppose you could say that... but then, monads are burritos, right? :)
[23:07:13] <Zipheir> sonny: Why not?
[23:07:35] <sonny> still thinking about it, not sure why the parsing is off yet
[23:07:43] <Franciman> ahah
[23:07:47] <Franciman> i have a long way
[23:07:51] <Franciman> to learn
[23:07:58] <Franciman> i wanted to read moggi's papers too
[23:08:03] <Franciman> to see if i get any insights
[23:08:13] <Zipheir> sonny: I'd suggest avoiding reading in two different procedures.  It'll make the loop more comprehensible.
[23:08:33] <Zipheir> Franciman: I haven't read Moggi's monad paper, just Wadler's.  Let me know what you think :)
[23:09:01] <Zipheir> Apparently Spivey wrote about monads in FP before both Moggi and Wadler.
[23:09:04] <Franciman> i wish he wrote them in italian
[23:09:19] <Franciman> Zipheir: oh and did you see Landin talking about the state monad in 1965? :)
[23:09:24] <Zipheir> Hah, he probably could've.
[23:09:37] <Franciman> err IO monad*
[23:09:38] <Zipheir> Franciman: No, link?
[23:09:53] <Zipheir> It's a little like continuations.  They've been discovered many times.
[23:10:12] *** Quits: badkins (~badkins@136.56.92.199) (Ping timeout: 240 seconds)
[23:10:33] <Franciman> https://okmij.org/ftp/Computation/IO-monad-history.html <- Zipheir 
[23:10:41] <Zipheir> Ah, more Oleg.
[23:11:33] *** Joins: atka (~atka@static-198-54-131-84.cust.tzulo.com)
[23:11:40] <Zipheir> Wow, yeah, Landin figured it out.  The I/O pseudomonad, that is.
[23:12:46] <Zipheir> "Each statement is rendered as a 0-list- transformer, i.e. a none-adic function producing the null list for its result. It achieves by side-effects a transformation of the current state of evaluation."
[23:21:46] *** Joins: civodul` (~user@guix/contributor/civodul)
[23:23:16] *** Quits: civodul (~user@guix/contributor/civodul) (Ping timeout: 246 seconds)
[23:23:38] <Zipheir> Oh, happy birthday, J.S. Bach.
[23:24:18] <Franciman> \o/
[23:24:28] <Franciman> yes Zipheir it's scarily the same as Haskell's IO Monad :)
[23:24:30] <Zipheir> There is a story in _Hackers_ that one of the early MIT hackers wrote a 5K+-line program with only a single comment on line 1750: % RIPJSB
[23:24:39] *** Joins: eddof13 (~textual@2806:102e:12:64:fc28:4274:975a:af3c)
[23:24:41] <Franciman> :)
[23:27:03] <Zipheir> Franciman: It's probably not a monad, in fact.  Conal Elliott argued that there's no coherent way to define equality on IO values in Haskell.
[23:28:22] <Zipheir> e.g. are (print "foo") and (print "bar") the "same" IO values?  In Haskell they'd both be of type IO (), which has exactly one member, so "yes".  But that's wonky, since they "change the world in different ways".
[23:29:08] <Zipheir> I don't think anyone has resolved this.
[23:34:50] *** Quits: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca) (Ping timeout: 246 seconds)
[23:34:53] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170)
[23:34:53] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:e59a:4251:16bb:b170) (Changing host)
[23:34:53] *** Joins: skapata (~Skapata@user/skapata)
[23:39:00] *** Joins: sonny (~sonny@bras-base-toroon0812w-grc-02-142-114-221-234.dsl.bell.ca)
[23:40:03] <Aurora_v_kosmose> tokie: thanks
[23:46:30] <dpk> mnieper and i agree on surprisingly many things, but those wanting to see the bloodbath when we disagree can see #18 on the R7RS issue tracker
[23:49:59] *** Parts: Aurora_v_kosmose (~LispyLigh@user/lispylights) ()
[23:51:50] <ChoHag> Is there "a" mailing list for scheme/srfi discussion? I see the after-effects of the SRFI process but everything seems compartmentalised.
[23:53:15] <ChoHag> I'm more or less at the point where I can participate with some skin in the game so I'd like to start to get involved.
[23:53:31] <Zipheir> srfi-discuss is the main list for that SRFI-specific topics.
[23:54:19] <Zipheir> https://srfi.schemers.org/about.html
[23:56:17] *** Joins: poselyqualityles (~whirl@user/poselyqualityles)
