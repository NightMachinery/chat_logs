[00:00:30] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[00:01:04] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 265 seconds)
[00:02:25] <j416> ah, found where I read about nil vs empty
[00:02:32] <j416> > avoid making a distinction between a nil slice and a non-nil, zero-length slice
[00:02:33] <j416> https://github.com/golang/go/wiki/CodeReviewComments
[00:02:40] <j416> novns: ^
[00:02:46] *** Joins: darkapex (~darkapex@user/darkapex)
[00:04:14] <novns> <j416> then why'd you comment? o_O
[00:04:19] <novns> just did
[00:06:28] <novns> j416, if some 3rd party libraries make his distinction because they have to, it should be preserved in the standard library
[00:06:39] *** Quits: jpw (~jpw@user/jpw) (Remote host closed the connection)
[00:06:50] <novns> or everything is meaningless
[00:12:02] <novns> and the entropy of the universe is increasing faster
[00:16:02] *** Joins: darkapex_ (~darkapex@user/darkapex)
[00:17:07] *** Quits: darkapex (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[00:18:05] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.3)
[00:18:20] *** Joins: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au)
[00:21:07] *** Joins: wolfdale6 (~wolfdale@ec2-54-169-159-210.ap-southeast-1.compute.amazonaws.com)
[00:21:22] *** Joins: wolfdale85 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[00:22:20] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[00:22:24] *** Quits: shka (~herr@83.175.151.96.piasta.pl) (Ping timeout: 245 seconds)
[00:22:53] *** Quits: wolfdale (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 264 seconds)
[00:22:53] *** wolfdale6 is now known as wolfdale
[00:23:10] *** Quits: wolfdale8 (~wolfdale@ec2-3-0-147-70.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[00:23:10] *** wolfdale85 is now known as wolfdale8
[00:33:23] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.3)
[00:34:40] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:34:40] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:34:40] *** Joins: wroathe (~wroathe@user/wroathe)
[00:34:41] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[00:43:05] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[00:43:13] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[00:43:33] *** Joins: alzgh (~alzgh@user/alzgh)
[00:46:32] *** Quits: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[00:46:58] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[00:47:11] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[00:48:05] *** Joins: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[00:54:30] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[00:54:45] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[01:01:14] *** Joins: Torr (~Torr@user/torr)
[01:06:38] *** Quits: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[01:07:54] *** Joins: mickey8 (~user@user/mickey)
[01:08:12] *** Joins: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[01:10:23] *** Quits: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261) (Remote host closed the connection)
[01:13:54] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[01:15:49] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[01:16:00] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[01:16:20] *** Joins: alzgh (~alzgh@user/alzgh)
[01:17:52] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[01:20:55] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[01:23:41] *** Joins: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261)
[01:25:27] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[01:28:41] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 265 seconds)
[01:29:41] *** Quits: Kane (~Kane@portal.yarg.fr) (Quit: quit)
[01:30:13] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[01:33:13] *** Joins: Kane (~Kane@portal.yarg.fr)
[01:33:18] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 268 seconds)
[01:34:22] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[01:35:49] <dostoyevsky2> The document on generics is like 200 pages?  https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md  ... have they invented the next C++?
[01:37:03] <SmokedCheese> main thing of C++ is UB, go doesn't have that yet
[01:37:25] *** Joins: xapiens (~xapiens@201.240.60.30)
[01:38:33] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Quit: The Lounge - https://thelounge.chat)
[01:41:00] <lemmi> dostoyevsky2: it's also the proposal with all sorts of references to other languages explanations and examples.
[01:41:14] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[01:41:27] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[01:47:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[01:49:28] *** Joins: fikran (~fikran@user/fikran)
[01:53:29] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[01:55:58] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[01:58:47] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 250 seconds)
[02:04:37] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[02:05:08] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[02:05:22] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:06:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 265 seconds)
[02:06:28] *** Joins: nullheroes (~nullheroe@168.235.66.22)
[02:06:52] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 265 seconds)
[02:07:21] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[02:08:03] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[02:08:09] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[02:10:32] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:12:01] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:12:04] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[02:13:30] *** Quits: seabass (~seabass@user/seabass) (Ping timeout: 265 seconds)
[02:14:57] *** crm is now known as orthoplex64
[02:15:56] *** Joins: src_ (~src@user/src)
[02:16:45] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[02:17:58] *** Quits: src_ (~src@user/src) (Client Quit)
[02:19:13] *** Quits: src (~src@user/src) (Ping timeout: 252 seconds)
[02:22:33] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[02:23:25] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[02:24:59] *** Quits: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261) (Remote host closed the connection)
[02:27:11] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[02:27:35] *** Joins: mickey8 (~user@user/mickey)
[02:30:47] *** Joins: src (~src@user/src)
[02:32:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[02:34:43] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:34:46] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 265 seconds)
[02:38:25] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[02:40:33] *** Quits: nullheroes (~nullheroe@168.235.66.22) (Quit: WeeChat 2.3)
[02:47:21] <b0nn> Nice little Microoptimisation story https://philpearl.github.io/post/perf_time/
[02:49:14] *** Quits: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi) (Remote host closed the connection)
[02:51:28] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[02:54:42] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 268 seconds)
[02:57:45] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[03:01:24] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[03:01:37] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:02:46] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 260 seconds)
[03:02:46] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[03:04:15] <seebs> Go has always had undefined behavior, it's called "data races"
[03:08:03] *** Quits: bkircher (~bkircher@2001:a61:252b:1601:507a:3765:2a05:b98f) (Ping timeout: 268 seconds)
[03:08:16] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Quit: Client closed)
[03:08:29] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[03:13:59] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[03:15:03] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[03:15:24] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[03:15:25] *** Quits: vxi (~user@styria.daemonized.org) (Quit: vxi)
[03:24:36] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[03:24:55] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[03:27:24] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Read error: Connection reset by peer)
[03:27:37] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 250 seconds)
[03:28:04] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[03:29:02] <SmokedCheese> data races is not UB
[03:29:27] <SmokedCheese> it's well defined behavior
[03:29:54] <SmokedCheese> SNAFU
[03:30:21] *** Quits: independent56 (~independe@2.31.88.37) (Ping timeout: 265 seconds)
[03:32:58] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:34:39] *** Joins: gggpkm (~gggpkm@111-251-122-246.dynamic-ip.hinet.net)
[03:38:18] *** Joins: Torr (~Torr@user/torr)
[03:38:44] *** Quits: Torr (~Torr@user/torr) (Remote host closed the connection)
[03:41:58] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[03:45:05] *** Joins: frost (~frost@59.71.244.36)
[03:45:25] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Read error: Connection reset by peer)
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:46:10] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com)
[03:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:48:05] *** Joins: Torr (~Torr@user/torr)
[03:50:34] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[03:53:27] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[03:57:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[03:58:28] <zsnes> always nice to store timestamps as unix epoch time in seconds
[03:58:34] <zsnes> no parsing needed then
[03:58:48] *** Joins: fikran (~fikran@user/fikran)
[03:58:59] <zsnes> plus you can apply whatever local you want, without having to convert an existing timezone to another timezone
[03:59:05] <zsnes> locale*
[03:59:16] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 245 seconds)
[04:00:18] *** Joins: darkapex (~darkapex@user/darkapex)
[04:02:04] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[04:04:20] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[04:07:54] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[04:10:25] *** Joins: _xor (~xor@72.49.199.147)
[04:10:55] *** Quits: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt) (Ping timeout: 252 seconds)
[04:11:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[04:12:47] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[04:12:55] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[04:13:09] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[04:14:15] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com) (Ping timeout: 268 seconds)
[04:17:36] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 245 seconds)
[04:23:31] *** Quits: xapiens (~xapiens@201.240.60.30) (Ping timeout: 252 seconds)
[04:24:20] *** Joins: X-Scale (~ARM@50.77.166.178.rev.vodafone.pt)
[04:27:00] *** Joins: sono (~sono@dslb-188-104-041-133.188.104.pools.vodafone-ip.de)
[04:30:06] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[04:30:11] *** Joins: iateadonut (~dan@121.177.17.154)
[04:30:22] *** Parts: iateadonut (~dan@121.177.17.154) ()
[04:30:30] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Read error: Connection reset by peer)
[04:30:37] <sono> guys please i need your help. i'm trying to run https://github.com/bouffalolab/BLOpenFlasher which contains a go script, a local package utils/ in which it includes dependencies that are supposed to be pulled in by go get. my gopath is set, the dependencies are now residing in ~/go/pkg/mod/ and my gopath is set to ~/go/. i don't really know go, i don't know what it expects. all i know is that this project
[04:30:43] <sono> structure is apparently messed up.
[04:30:43] *** Joins: iateadonut (~dan@121.177.17.154)
[04:30:57] <sono> $ go run flash_tool.go just gives me utils/util_program.go:17:5: cannot find package
[04:31:01] <sono> how can i fix this?
[04:31:15] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com)
[04:31:59] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 245 seconds)
[04:37:47] <sono> i tried creating what should be a valid project structure according to "how to write go code" and just ended up with a bunch of type errors (is pointer to interface, not interface)
[04:37:53] <sono> i think my night might be cursed tbh
[04:44:26] <b0nn> oh god no
[04:45:07] <b0nn> sono: there's no go.mod, so you will have to install that in $GOPATH/src//github.com/bouffalolab/BLOpenFlasher
[04:47:49] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 245 seconds)
[04:49:44] <sono> ok uhm i tried that, and scratched my head for a minute, i mean .. nothing changed from what i can tell
[04:50:09] <sono> also the script is not named correctly?
[04:53:19] *** Joins: khrbt (~znc@user/khrbt)
[04:53:59] <sono> so i have these amazing RISC-V PineNuts but i can't write the device tree because third party tools dont support it, nothing is documented, and the primary tool to do it is written in broken go
[04:54:09] <sono> i guess i will just go to bed and learn enough go to fix this tomorrow
[04:54:31] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[04:54:54] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[04:59:49] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 252 seconds)
[05:00:55] <fizzie> Might be worth trying to just uplift it into module-aware mode; with luck that's just `go mod init github.com/bouffalolab/BLOpenFlasher; go mod tidy` in that repository root, at which point it should no longer need to live under $GOPATH/src. Though that relative import of "./utils" in the script worries me regarding that plan; it'd probably need to be using the full github.com import path (even
[05:00:57] <fizzie> when coming from the same module).
[05:01:59] <iateadonut> i'm trying to test a channel that has a timer in a test.  `app` is my application state struct.  when i do `go timer(app, d)`, i get panic: runtime error: invalid memory address or nil pointer dereference
[05:02:11] <iateadonut> but i'm able to run timer(app,d) without it.
[05:02:47] <sono> fizzie: i tried that, but then i end up with a bunch of type errors like
[05:02:48] *** Joins: k0ta (~k0ta@103.108.94.37)
[05:02:51] <sono> utils/util_program.go:22:16: s.Write undefined (type *serial.Port is pointer to interface, not interface)
[05:02:58] <iateadonut> i mean, i'm able to run timer(app,d) without the 'go'
[05:03:03] <sono> so i guess i will have to look into that tomorrow
[05:04:11] <sono> is that indicative of an older version of go or sth?
[05:04:21] <fizzie> That *might* just have been an incompatible change in one of the dependencies.
[05:04:37] <sono> i wouldn't be surprised
[05:04:52] <fizzie> If so, you could try in version numbers into the go.mod file that date to around when the code was written.
[05:05:21] <fizzie> After go mod tidy, it'll have require statements for the latest versions.
[05:05:24] <sono> yea, i'm looking into that now
[05:05:29] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 264 seconds)
[05:10:47] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[05:13:26] *** Quits: burningserenity (~burningse@142-196-178-216.res.spectrum.com) (Quit: ZNC 1.8.2 - https://znc.in)
[05:17:58] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[05:19:25] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[05:23:10] *** Quits: darkstardevx (~darkstard@c-24-21-53-33.hsd1.or.comcast.net) (Quit: Leaving)
[05:23:40] *** Joins: darkstardevx (~darkstard@2601:1c2:300:c8a0::6c32)
[05:24:26] <fizzie> sono: Now that I'm at a real computer and can look things up, I'm guessing that type error is from the difference in github.com/albenik/go-serial module versions v1 and v2; in v1 serial.Port is an interface, but in v2 serial.Port is a struct, so the code's use of a pointer (`*serial.Port`) makes more sense.
[05:24:29] <fizzie> sono: So what I'm guessing is, when you switch it to module mode it starts following the modern rules where an import of "github.com/albenik/go-serial" uses the v1 version. To get v2 in module mode, what you'd need to do is to change that import to "github.com/albenik/go-serial/v2" instead.
[05:24:37] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 252 seconds)
[05:24:43] <fizzie> Of course that might just get you to the next problem.
[05:25:11] *** Joins: Guest8630 (~Guest86@c-73-67-246-107.hsd1.or.comcast.net)
[05:25:34] *** Parts: Guest8630 (~Guest86@c-73-67-246-107.hsd1.or.comcast.net) ()
[05:26:58] <fizzie> FWIW I did get it all to build by (a) changing that import path to /v2, (b) changing the script's "./utils" import path to "github.com/bouffalolab/BLOpenFlasher/utils" and (c) doing that go mod init + go mod tidy step.
[05:27:05] <sono> yea thanks, i was trying to do that myself but didn't realize how exactly and messed around in the module definition file
[05:27:13] <sono> yea
[05:27:17] <sono> just got that done myself
[05:27:24] <sono> <3
[05:27:39] <sono> that v2 thing is a bit confusing
[05:29:01] <sono> what a horrible little script this is, though.
[05:29:29] <sono> you guys are the best though, thanks for all the help
[05:29:55] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[05:31:13] <fizzie> The context for the v2 thing is basically, code being developed as modules is supposed to be using semver and bump the major version on every backwards-incompatible change. That *plus* having the major version be included in the import path is what allows the version selection algorithm Go uses (https://golang.org/ref/mod#minimal-version-selection) to usually take care of keeping dependencies more
[05:31:15] <fizzie> or less fresh without breaking builds. And in larger builds for different major versions to coexist, in case some of your dependencies require a v1 and others v2.
[05:32:09] <sono> i guess it makes sense if you know the ecosystem well enough
[05:33:11] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com) (Ping timeout: 268 seconds)
[05:33:27] *** Joins: khrbt (~znc@user/khrbt)
[05:33:41] <fizzie> Not saying it's not little optimistic and unintuitive. And since that script wasn't being developed in module-aware mode, it didn't used to need that "v2" import path component to get the v2 code, that's probably why it worked for whoever wrote it.
[05:33:58] <sono> ah yea
[05:35:27] <iateadonut> https://play.golang.org/p/mLBrI9Cfygk
[05:35:39] <iateadonut> why doesn't the go routine modify the value of app.c_timer?
[05:35:44] <fizzie> (Probably it would've been possible to get it to work in $GOPATH mode still, but I couldn't say exactly how, I picked up Go for reals only post-modules. Guessing it'd involve at least setting GO111MODULE=off and then fetching all the dependencies under $GOPATH/src with go get. But since you got it to build already, that's pretty academic.)
[05:36:27] *** Joins: lishanhui (~lishanhui@072-182-050-007.res.spectrum.com)
[05:36:59] *** Quits: koo6 (~koo6@89-24-13-235.customers.tmcz.cz) (Ping timeout: 245 seconds)
[05:37:03] <fizzie> iateadonut: You don't wait for it to run, so it doesn't get a chance to. It does if you do something like https://play.golang.org/p/qmL868hMWaF
[05:37:17] <b0nn> iateadonut: race condition
[05:37:38] <sono> im just scared by the fact that this is an official tool released only 11 months ago and also by the way it uses reflection and returning method names as strings.. i should go to sleep before i end up getting nightmares
[05:37:49] <b0nn> the outcome of your code is determined by a race between the "main" goroutine and the goroutine
[05:38:02] <iateadonut> thanks
[05:39:05] <fizzie> sono: Well, the README.md does say "now, there are other better options for cross platform requirement" referring to the Python and Rust versions. I wouldn't expect them to be any more elegant though.
[05:39:41] <sono> the rust version works well for writing the main image.. but.. there are other issues. i arrvied here on a train of wtf's
[05:40:40] <fizzie> I've been looking at embedded things a little bit lately (just informally for fun), and the whole domain seems to be approximately as terrible as consumer-grade networking equipment, as far as quaint things like "quality" go.
[05:40:52] <sono> it's a horror show
[05:44:29] *** Joins: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:1115:e06d:eb09:5d18)
[05:44:48] *** Quits: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de) (Remote host closed the connection)
[05:49:41] <iateadonut> fizzie, so i was able to use time.Sleep(1) for the same results in that script.  BUT, when i did time.Sleep(1) in a test it did not work.
[05:49:59] <iateadonut> so i'm wondering why that is, and if there is a playground for tests?
[05:51:03] <iateadonut> sorry.  i see it there.  i'll update it to see if i can show you how it doesn't work in a test.
[05:51:51] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[06:05:52] *** Quits: dch (sid1310@couchdb/committer/dch) (Ping timeout: 252 seconds)
[06:06:09] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[06:06:10] *** Quits: eric_hill (sid323132@id-323132.tinside.irccloud.com) (Ping timeout: 260 seconds)
[06:06:25] *** Quits: dreistadt (sid501648@id-501648.lymington.irccloud.com) (Ping timeout: 252 seconds)
[06:06:36] *** Quits: Memory (sid459764@user/memory) (Ping timeout: 265 seconds)
[06:06:58] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Ping timeout: 252 seconds)
[06:06:58] *** Quits: pombreda (sid227801@id-227801.tinside.irccloud.com) (Ping timeout: 252 seconds)
[06:06:58] *** Quits: telemachus (sid2004@id-2004.helmsley.irccloud.com) (Ping timeout: 252 seconds)
[06:07:34] *** Quits: chimeracoder (sid230642@id-230642.helmsley.irccloud.com) (Ping timeout: 260 seconds)
[06:07:34] *** Quits: Balooga_ (sid407689@id-407689.lymington.irccloud.com) (Ping timeout: 260 seconds)
[06:08:09] *** Joins: fikran (~fikran@user/fikran)
[06:08:26] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[06:08:30] *** Quits: gggpkm (~gggpkm@111-251-122-246.dynamic-ip.hinet.net) (Remote host closed the connection)
[06:08:58] *** Joins: telemachus (sid2004@helmsley.irccloud.com)
[06:09:04] *** Joins: dch (sid1310@couchdb/committer/dch)
[06:09:23] *** Joins: Memory (sid459764@user/memory)
[06:09:29] *** Joins: pombreda (sid227801@5.254.36.57)
[06:09:35] *** Joins: Balooga_ (sid407689@lymington.irccloud.com)
[06:09:45] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[06:09:47] *** Joins: dreistadt (sid501648@lymington.irccloud.com)
[06:11:05] *** Joins: chimeracoder (sid230642@helmsley.irccloud.com)
[06:12:28] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:b1cf:9ce0:ed9a:29a3)
[06:13:37] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[06:14:58] <iateadonut> https://play.golang.org/p/b300XsGjua8
[06:16:18] <iateadonut> if you comment out both of those: <-app.c_timer.C, then it passes.
[06:16:41] <iateadonut> but if you keep them in then it fails.
[06:17:04] <iateadonut> i though that both of those lines would be executed at the same time, both of the <-app.c_timer.C
[06:18:36] <bpalmer> lines 13 and 24, you mean?
[06:18:51] <iateadonut> so app.c_timer = nil should happen immediately after that and then time.Sleep should wait for that to surely be executed
[06:18:56] <iateadonut> yes, lines 13 and 24
[06:20:26] <bpalmer> if you have two goroutines, and each one reads a single element from the timer ("<-app.c_timer.C"), only one of them will succeed; the other will block until the next element is available.
[06:20:51] <bpalmer> a channel provides a synchronization point between two concurrent goroutines, so that there is an ordering.
[06:21:53] *** Joins: eric_hill (sid323132@5.254.36.57)
[06:22:46] <iateadonut> hmmm... i guess what i'm trying to do is close the channel.  but when i do it says: (cannot close receive-only channel)
[06:23:13] <bpalmer> you call Stop() on the timer.
[06:23:22] <iateadonut> so if i want to do this, i should just make my own timer, i guess, something that just sleeps in the goroutine.
[06:23:34] <bpalmer> That doesn't close the channel; you never want to close  a time rchannel because then reading from it always succeeds
[06:24:17] <bpalmer> iateadonut: at any rate, if you have two concurrent things, you have to have an explicit sync point to express that something happens before another, which also is likely to flush memory
[06:24:25] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[06:24:53] <iateadonut> waitgroups work the way i'm trying to make a channel work, though, right?  so they sync up and then start executing at the same time?
[06:28:50] <bpalmer> iateadonut: consider the case on the playground that, in TestTimer, you do "time.Sleep(1100*time.Millisecond); <- app.c_timer.C" (so sleep, then read); compare with "time.Sleep(time.Second); <- app.c_timer.C"
[06:29:02] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 260 seconds)
[06:29:22] <bpalmer> the one case I get a panic because c_timer is nil, the other I get a deadlock
[06:29:44] *** Quits: src (~src@user/src) (Quit: Leaving)
[06:29:50] <bpalmer> there's inherently a race condition when you're doing this sort of assignment across the goroutines.
[06:29:59] <seebs> ... no, waitgroups do not "start executing at the same time"
[06:30:12] <iateadonut> there's no way to close a timer channel, right?
[06:30:12] <bpalmer> iateadonut: waitgroups don't start executin gat the same time; they provide a pause point at which they're all *done* at the same time
[06:30:22] <bpalmer> iateadonut: right.
[06:30:36] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[06:30:41] <seebs> you can close your own channels, and if you want a bunch of things to wait, and then all in principle suddenly become runnable at once, have them all be waiting on a channel that you then close
[06:30:46] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[06:31:22] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[06:31:39] <bpalmer> if you want to try to guarantee (and there is no guarantee, because you might only have a single core) that two goroutines are working "at the same time", you could do something like 'ch := make(chan struct{}); go foo(ch); go bar(ch); close(ch);" and then func foo(ch chan struct{}) { <-ch; ... }
[06:31:43] <iateadonut> i see.  and for a wait group, can you detect in several goroutines when the waitgroup is done?
[06:32:08] <bpalmer> because <-ch  will succeed immediately and forever as soon as ch is closed.
[06:33:46] <bpalmer> you can call Wait() on a *sync.WaitGroup  in multiple go routines, sure.
[06:33:54] <iateadonut> thanks.
[06:34:14] <bpalmer> But, again, shared memory across goroutines requires some sort of memory barrier and concurrent communication.
[06:34:25] <iateadonut> so...?
[06:34:47] <bpalmer> so it's not just about whether things happen "simultaneously", but if you are writin to a variable in one goroutine, it may not be visible to another goroutine until you insert an explicit memory barrier
[06:35:01] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 252 seconds)
[06:35:06] <seebs> okay, i think this feels like an XY problem
[06:35:10] <seebs> what is the actual *goal*
[06:35:23] <seebs> not the immediate thing of "want several goroutines synced", but what are you thinking that will *accomplish*?
[06:35:25] <iateadonut> the goal is to learn about golang, really.
[06:35:42] <seebs> okay, so, a thing to think about:
[06:35:45] <iateadonut> i think i know how i'm going to do what i want to do.  now i'm trying to dive deeper.
[06:35:51] <seebs> go does not provide any tools for how to make things happen at the same time
[06:35:57] *** Joins: frost (~frost@59.71.244.36)
[06:35:57] <seebs> in fact, it explicitly *avoids* providing this
[06:36:02] <iateadonut> so how do we "insert an explicit memory barrier"?
[06:36:05] <seebs> what it provides is tools for making sure things happen *not* at the same time
[06:36:24] <seebs> channels and the like are tools for ensuring that one thing definitively happens either *before* or *after* another thing
[06:36:29] <seebs> nothing is for making things happen at the same time
[06:36:30] <seebs> you can't
[06:36:42] <seebs> there is no actual guarantee that a goroutine which is ready to run and has work to do will run in the next minute
[06:36:52] <iateadonut> i see.  i will actually write that down as a note.
[06:37:25] <bpalmer> https://golang.org/ref/mem is good reading.
[06:37:26] <seebs> and yes i have seen a goroutine need over a minute to perform *any task at all* because there were something like 10k goroutines with active work they could do, many of them having work to do that wasn't preempted by the scheduler at that time, and only about 16 cores.
[06:37:41] <seebs> there are still single-core chips out there!
[06:37:55] <seebs> it is sometimes *genuinely not possible* for two things to happen simultaneously
[06:38:00] <seebs> but also it would nearly always be disasterously bad
[06:38:09] <seebs> so instead we have tools for imposing an ordering on events
[06:38:31] <seebs> "memory barriers", if you're not working in assembly, are mostly things at the level of, say, channel sends, or mutex locks, or *sometimes* atomic ops.
[06:38:47] <seebs> (but i think strictly speaking it is permissible for atomic ops to have an ordering but not generally impose memory barriers, etc.)
[06:41:11] <bpalmer> I think you're right.
[06:42:07] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[06:44:16] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 245 seconds)
[06:44:59] <bpalmer> Re-reading what I wrote, I wrote "insert an explicit memory barrier" and I should have written "written synchronization code that results in a memory barrier" ; there's nothing quite so explicit as C++'s std::atomic_thread_fence()
[06:45:30] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com)
[06:46:10] *** Joins: k0ta (~k0ta@151.210.173.22)
[06:48:25] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 268 seconds)
[06:49:35] *** Joins: freakazoid343 (~matt@35.136.210.185)
[06:52:02] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com) (Ping timeout: 265 seconds)
[06:54:40] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[06:55:01] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[06:57:08] <iateadonut> i'll read the memory reference someday; thanks.  i especially like the advice, "don't be clever."
[06:58:19] <iateadonut> to answer your question about what i'm trying to do; i was building a timer by using a self-made channel, but the i discovered time.timer in the docs... so here we are.
[07:00:36] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[07:01:30] <iateadonut> but i think i'm going to use a waitgroup.  thanks, lads.
[07:02:33] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 250 seconds)
[07:04:10] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[07:06:12] *** Joins: xapiens (~xapiens@201.240.60.30)
[07:09:35] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[07:11:51] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 268 seconds)
[07:13:55] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com)
[07:15:33] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 268 seconds)
[07:17:05] *** Joins: freakazoid343 (~matt@35.136.210.185)
[07:20:04] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-a8c8-e13c-8d77-7d71.inf6.spectrum.com) (Ping timeout: 265 seconds)
[07:25:53] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[07:33:26] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[07:37:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:54:16] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[07:57:07] *** Quits: xapiens (~xapiens@201.240.60.30) (Quit: Leaving)
[08:05:16] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:09:33] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[08:12:41] <iateadonut> if you have flags on your command line function, do you save the values in your app struct in order to test your functions that depend on it?  or do you just test the main() function directly?  or do you just never test your main() function directly even when creating a command line utility?
[08:13:50] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[08:14:53] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[08:15:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[08:17:28] *** Joins: fikran (~fikran@user/fikran)
[08:19:21] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[08:21:52] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71)
[08:24:37] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 268 seconds)
[08:25:11] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[08:25:38] *** Quits: ente_ (~ente@p200300dc5f2e8500056745c22255634d.dip0.t-ipconnect.de) (Quit: WeeChat 3.2)
[08:32:38] *** Joins: jpw (~jpw@user/jpw)
[08:33:32] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[08:35:53] <iateadonut> if you have a command line application, do you put everything except configuration (from flags) in another function like run(app) or something and then run that?
[08:37:01] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:a8c8:e13c:8d77:7d71) (Ping timeout: 250 seconds)
[08:38:13] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[08:43:03] *** Quits: opcode (~nathan@user/opcode) (Quit: WeeChat 3.3)
[08:43:37] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[08:44:13] *** Joins: wolfdale3 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[08:46:12] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 268 seconds)
[08:51:06] *** Joins: opcode (~nathan@user/opcode)
[08:54:37] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[08:55:08] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[08:58:14] *** Quits: lishanhui (~lishanhui@072-182-050-007.res.spectrum.com) (Ping timeout: 245 seconds)
[09:00:24] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[09:01:24] <b0nn> gah, every time I try to blog about concurrency at the moment I end up with - ownership is the key to safety
[09:01:31] *** Joins: thing (~thing@user/thing)
[09:10:31] <bpalmer> iateadonut: typically, I don't test the main() function.
[09:10:37] *** Joins: freakazoid343 (~matt@35.136.210.185)
[09:11:56] <bpalmer> something like run(app) for something complicated is one way, or just have main() do a bunch of sequential things that are all themselves tested, and possibly a non-go unit test that exercises the command line
[09:13:02] <bpalmer> for example, a shell script that tests 'go build foo && foo < input.txt > /tmp/output.txt && diff /tmp/output.txt golden_output.txt' (but better written)
[09:13:20] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 268 seconds)
[09:35:38] *** Quits: henry40408 (~henry4040@112.104.97.56) (Quit: The Lounge - https://thelounge.chat)
[09:37:06] *** Quits: LiftLeft (~LiftLeft@191.96.185.14) (Ping timeout: 260 seconds)
[09:43:22] *** Joins: henry40408 (~henry4040@112-104-97-56.adsl.dynamic.seed.net.tw)
[09:45:24] *** Joins: mmfood (~mmfood@45.135.187.149)
[09:49:05] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[09:49:23] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 250 seconds)
[09:52:05] <HisShadow> hmm, if you get EOF while reading net.TCPConn, will write necesserily fail as well or are there cases where this isn't true?
[09:54:37] <bpalmer> a TCP connection can be closed in one direction and not the other
[09:54:38] <iateadonut> i'm using this prompt package: https://github.com/manifoldco/promptui - one of the PR's says it allows you to set Stdin and Stdout so you can test... i'm not sure how to do that though; or what i would set to Stdin/out in a test to make the test interact as if it were the command line.
[09:56:23] <bpalmer> iateadonut: if you look at type Prompt, you'll see it has a Stdin and Stdout field that are ReadCloser and WriteCloser respectively
[09:56:44] <iateadonut> yes, i see that.  i don't know what those values should be from within a test.
[09:57:04] *** Quits: rcernin (~rcernin@188.146.148.122.sta.wbroadband.net.au) (Quit: WeeChat 3.3)
[09:57:52] <bpalmer> iateadonut: anything that supports both Write() and Close(). So, for example, you might make a simple struct that uses a strings.Builder to delegate Writes
[09:59:55] *** Quits: Kyros (~kyros@user/kyros) (Quit: WeeChat 3.2.1)
[10:00:07] *** Quits: mmfood (~mmfood@45.135.187.149) (Ping timeout: 252 seconds)
[10:00:17] <bpalmer> Something like 'type TestStdout struct { *strings.Builder }  func (ts TestStdout) Close() error { return nil }   and you do p.Stdout = TestStdout{new(strings.Builder)} '
[10:00:30] *** Joins: Kyros (~kyros@user/kyros)
[10:01:01] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[10:01:53] *** Joins: mmfood (~mmfood@45.135.187.149)
[10:02:07] <HisShadow> bpalmer: when CloseRead or CloseWrite is invoked, does it do any notification on the network, or is it just notifier for the kernel?
[10:03:23] *** Quits: Kyros (~kyros@user/kyros) (Client Quit)
[10:04:42] *** Joins: Kyros (~kyros@user/kyros)
[10:04:42] <bpalmer> HisShadow: I believe it will send a FIN packet
[10:04:48] <bpalmer> but that's all in the socket layer
[10:05:25] <iateadonut> so i'd have to create a new 'p' in the test and send that to the function.
[10:05:44] <iateadonut> so in the functions in the program that use 'p', i couldn't create 'p' within that function, but would have to pass it in.
[10:06:08] <iateadonut> bpalmer, is that correct?
[10:06:11] *** Joins: mickey8 (~user@user/mickey)
[10:07:12] <bpalmer> iateadonut: you could modify an existing Prompt variable
[10:07:37] <bpalmer> (I have no idea what a promptui package looks like, so precisely how it's created is up to you. and maybe there are other approaches)
[10:08:24] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[10:11:11] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[10:11:38] *** Quits: norbinaa (~be3uykpy@2a00:a040:19a:b060:51b1:8a0f:be39:daa0) (Read error: Connection reset by peer)
[10:12:49] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 252 seconds)
[10:13:11] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:5132:c96d:e523:4e98)
[10:14:06] *** Joins: freakazoid343 (~matt@35.136.210.185)
[10:15:32] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[10:15:51] *** Joins: mickey8 (~user@user/mickey)
[10:16:09] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[10:16:51] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 268 seconds)
[10:17:28] *** Joins: mrig (~mrig@user/mrig)
[10:20:52] *** Joins: mei (~mei@user/mei)
[10:21:08] <HisShadow> bpalmer: according to wireshark nothing happens when I do CloseRead. No FIN.
[10:21:57] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Read error: Connection reset by peer)
[10:22:08] <bpalmer> HisShadow: ah. OK, I stand corrected.
[10:22:25] <bpalmer> TCP sockets themselves do support a half-closed state where a single FIN is exchanged.
[10:24:36] *** Joins: seuiterut (~seuiterut@89-74-151-192.dynamic.chello.pl)
[10:24:55] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[10:26:35] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[10:26:48] *** Joins: fikran (~fikran@user/fikran)
[10:26:50] *** Joins: thing (~thing@user/thing)
[10:26:51] *** Quits: Kyros (~kyros@user/kyros) (Quit: WeeChat 3.2.1)
[10:27:27] *** Joins: Kyros (~kyros@user/kyros)
[10:29:11] <HisShadow> bpalmer: so let me be more specific now: I have this https://gist.github.com/DuratarskeyK/c43e83324a3589bf7b14de26537a9ad3 The problem with this code is that it leaves a bunch of CLOSE_WAIT connections, they go away eventually after some time, but I'm trying to figure out how to get rid of them immediately. errChan almost always returns nil, so EOF. The connections are closed when the function where go
[10:29:17] <HisShadow> proxy(...) is invoked returns.
[10:31:55] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:5132:c96d:e523:4e98) (Read error: Connection reset by peer)
[10:32:56] <HisShadow> I can't reproduce this locally too, no idea what exactly could go wrong
[10:33:57] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:68a8:7f6b:10c0:1405)
[10:34:20] *** Quits: me-sudoer-dentne (~me-sudoer@2405:204:549a:c220:1115:e06d:eb09:5d18) (Quit: Leaving)
[10:35:21] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[10:35:31] <bpalmer> Hmm. It's beyond me, definitely at this time of day for me.
[10:37:47] *** Joins: kayprish (~kayprish@cable-188-2-246-223.dynamic.sbb.rs)
[10:38:47] *** Quits: seuiterut (~seuiterut@89-74-151-192.dynamic.chello.pl) (Quit: Client closed)
[10:40:05] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[10:41:48] *** Quits: thing (~thing@user/thing) (Ping timeout: 276 seconds)
[10:44:34] *** Joins: _xor (~xor@72.49.199.147)
[10:48:49] *** Joins: shka (~herr@83.175.151.96.piasta.pl)
[10:50:22] *** Quits: k0ta (~k0ta@151.210.173.22) (Ping timeout: 260 seconds)
[10:51:46] *** Joins: k0ta (~k0ta@103.108.94.37)
[10:53:47] *** Joins: thing (~thing@user/thing)
[10:54:20] *** Quits: casastorta (~casastort@dc4.krivokuca.net) (Quit: ZNC 1.8.2 - https://znc.in)
[10:54:26] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[10:54:42] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[10:55:46] *** Joins: danmurf (~danmurf@user/danmurf)
[10:56:03] *** Joins: casastorta (~casastort@dc4.krivokuca.net)
[10:57:42] <HisShadow> Maybe someone's already written a module like that for copying data from one socket and back without this problem, but I can't seem to find much.
[11:04:22] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[11:04:31] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[11:05:50] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[11:09:25] *** Quits: sono (~sono@dslb-188-104-041-133.188.104.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[11:10:57] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[11:14:27] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[11:16:21] *** Quits: danmurf (~danmurf@user/danmurf) (Remote host closed the connection)
[11:17:21] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 250 seconds)
[11:18:27] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-7c6a-0e0f-af6d-0eb4.inf6.spectrum.com)
[11:19:23] *** Joins: bkircher (~bkircher@2001:a61:2531:8601:65a6:d38:5485:940b)
[11:19:31] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 250 seconds)
[11:21:31] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[11:21:39] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[11:23:38] *** Joins: freakazoid12345 (~matt@35.136.210.185)
[11:24:25] *** Quits: thing (~thing@user/thing) (Quit: thing)
[11:24:37] *** Joins: thing_ (~thing@user/thing)
[11:24:41] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-7c6a-0e0f-af6d-0eb4.inf6.spectrum.com) (Ping timeout: 268 seconds)
[11:25:56] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 245 seconds)
[11:26:12] *** thing_ is now known as thing
[11:26:53] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 250 seconds)
[11:32:17] <b0nn> HisShadow: Curious if you ever see a FIN packet on that socket - like after some timeout
[11:36:46] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[11:37:42] *** Quits: kayprish (~kayprish@cable-188-2-246-223.dynamic.sbb.rs) (Remote host closed the connection)
[11:38:02] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[11:50:08] *** Joins: Diego (~textual@user/diego)
[11:56:26] <iateadonut> bpalmer, thanks.  i took a break, watched some tv and took a shower.  i feel like i had a 'eureeka' moment then, when i realized how if i loaded all the lines to read into a bufio.writer (or something), that's how it would work.
[11:56:46] <iateadonut> i don't know if it will, but i like the feeling of when i "get" how something works.
[12:00:44] *** Joins: kayprish (~kayprish@cable-188-2-246-223.dynamic.sbb.rs)
[12:02:45] *** Quits: kayprish (~kayprish@cable-188-2-246-223.dynamic.sbb.rs) (Remote host closed the connection)
[12:12:17] *** Joins: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net)
[12:13:40] *** Quits: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net) (Quit: Textual IRC Client: www.textualapp.com)
[12:14:10] *** Joins: independent56 (~independe@2.31.88.37)
[12:17:25] *** Quits: foobaz212 (~foobaz212@cpc147290-walt27-2-0-cust197.13-2.cable.virginm.net) (Ping timeout: 256 seconds)
[12:18:48] *** Joins: mosen (~mosen@159-196-125-15.9fc47d.syd.static.aussiebb.net)
[12:21:46] *** Quits: k0ta (~k0ta@103.108.94.37) (Ping timeout: 245 seconds)
[12:27:35] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-7c6a-0e0f-af6d-0eb4.inf6.spectrum.com)
[12:30:14] *** Quits: freakazoid12345 (~matt@35.136.210.185) (Ping timeout: 265 seconds)
[12:31:08] *** Joins: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261)
[12:33:10] *** Quits: braxas (sid508886@lymington.irccloud.com) (Ping timeout: 260 seconds)
[12:34:07] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[12:34:22] *** Joins: braxas (sid508886@id-508886.lymington.irccloud.com)
[12:35:50] *** Quits: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261) (Ping timeout: 260 seconds)
[12:36:08] *** Joins: fikran (~fikran@user/fikran)
[12:36:23] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[12:39:38] *** Quits: thing (~thing@user/thing) (Quit: thing)
[12:40:02] *** Joins: thing (~thing@user/thing)
[12:42:24] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 245 seconds)
[12:44:53] *** Quits: andlabs (~andlabs@70.107.171.168) (Read error: Connection reset by peer)
[12:45:17] *** Joins: andlabs (~andlabs@70.107.171.168)
[12:53:04] *** Joins: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[12:53:06] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[12:55:30] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-7c6a-0e0f-af6d-0eb4.inf6.spectrum.com) (Ping timeout: 265 seconds)
[12:55:54] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Read error: Connection reset by peer)
[12:56:34] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[12:57:10] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[12:58:20] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[13:00:42] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Read error: Connection reset by peer)
[13:01:30] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[13:06:26] *** Joins: freakazoid343 (~matt@35.136.210.185)
[13:09:31] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 268 seconds)
[13:11:09] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Ping timeout: 268 seconds)
[13:12:16] *** Joins: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com)
[13:13:30] <iateadonut> i was able to mock a first input string: https://play.golang.org/p/-mSgjY2kAw- ,  but not a second one
[13:13:43] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Quit: Leaving.)
[13:15:11] <iateadonut> https://play.golang.org/p/MRjOn_JcwsS
[13:15:46] <j416> iateadonut: in case you missed it, there's ioutil.NopCloser
[13:16:27] <j416> iateadonut: https://play.golang.org/p/2rdJuphACxQ
[13:17:01] <iateadonut> yes, thanks, j416
[13:17:10] <iateadonut> what if i had two prompts and wanted to test both?
[13:18:22] <iateadonut> as in: https://play.golang.org/p/MRjOn_JcwsS
[13:18:58] <iateadonut> (j416, i did see nopcloser in a comment; thanks for demonstrating it.)
[13:19:32] *** Joins: src (~src@user/src)
[13:19:44] *** Quits: sizeof_void34 (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: sizeof_void34)
[13:23:27] <j416> o/
[13:23:50] <iateadonut> ah dangit.  is that a guy waving "goodbye".
[13:24:24] <j416> it's a guy waving you're welcome
[13:26:32] <Hanicef> iateadonut: not sure how much control you have over your code, but you can always wrap it in a custom struct that does just that
[13:26:55] <iateadonut> there is an Stdout field as well.
[13:29:13] <Hanicef> also, you *might* be able to use io.MultiReader, one connected to the mock and one to stdin
[13:33:58] *** Joins: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu)
[13:35:42] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[13:36:01] *** Joins: mickey8 (~user@user/mickey)
[13:37:31] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[13:39:29] *** Quits: independent56 (~independe@2.31.88.37) (Ping timeout: 245 seconds)
[13:44:13] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[13:44:53] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[13:45:36] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4)
[13:46:47] *** Quits: Kaivo (~quassel@user/kaivo) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[13:47:34] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[13:48:03] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 265 seconds)
[13:48:58] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 252 seconds)
[13:49:32] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[13:50:07] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:7c6a:e0f:af6d:eb4) (Ping timeout: 265 seconds)
[13:51:33] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Quit: dalan6236)
[13:52:32] *** Joins: dalan6236 (~dalan@110-175-157-10.tpgi.com.au)
[14:00:19] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[14:01:56] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[14:02:14] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[14:05:32] *** Quits: Alina-malina (~Alina-mal@user/alina-malina) (Quit: !be back soon)
[14:06:53] *** Joins: Alina-malina (~Alina-mal@user/alina-malina)
[14:07:51] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[14:12:26] *** Quits: Diego (~textual@user/diego) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[14:27:25] <iateadonut> this was a problem with the 3rd party library: https://play.golang.org/p/ElPysYq8aM1 - that's the solution.
[14:27:39] <iateadonut> if anyone cares, the details are here: https://stackoverflow.com/questions/53306447/how-do-i-unit-test-this-promptui-package-written-in-golang/69505423#69505423
[14:29:29] *** Joins: independent56 (~independe@2.31.88.37)
[14:29:47] <HisShadow> b0nn: I probably do, because ReadFrom seems to stop after some time. I can't do wireshark/tcpdump since the server is heavily loaded and nothing gets captured :(
[14:29:56] *** Quits: independent56 (~independe@2.31.88.37) (Read error: Connection reset by peer)
[14:31:11] *** Joins: independent56 (~independe@51.158.144.31)
[14:34:22] *** Joins: independent_ (~independe@2.31.88.37)
[14:35:49] *** Quits: independent56 (~independe@51.158.144.31) (Read error: Connection reset by peer)
[14:36:17] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[14:39:49] *** Joins: dalan62369 (~dalan@59-102-54-91.tpgi.com.au)
[14:41:46] *** Quits: dalan6236 (~dalan@110-175-157-10.tpgi.com.au) (Ping timeout: 252 seconds)
[14:41:46] *** dalan62369 is now known as dalan6236
[14:43:42] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[14:45:28] *** Joins: fikran (~fikran@user/fikran)
[14:51:26] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:52:43] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[14:54:28] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[14:54:49] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[14:55:53] *** Joins: alzgh (~alzgh@user/alzgh)
[15:07:25] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:07:54] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:16:23] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:16:37] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[15:17:06] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:19:10] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[15:25:31] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[15:25:36] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:26:30] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:37:55] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:38:26] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:42:24] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 245 seconds)
[15:43:05] *** Quits: mmfood (~mmfood@45.135.187.149) (Ping timeout: 265 seconds)
[15:43:30] <Hanicef> does anyone know why this doesnt work: https://play.golang.org/p/io48OjfgGSD
[15:43:37] <Hanicef> but this does: https://play.golang.org/p/gfx4G7wn67x
[15:47:45] <Hanicef> wrapping it in a parethesis seems to work, too: https://play.golang.org/p/l3FctmHd6Nd
[15:48:08] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:48:20] <Sam> It thinks the {} is part of the if statement. Only simple statements are allowed at the start of the if.
[15:48:37] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[15:49:02] <Hanicef> how is a struct not a simple statement? and that doesn't explain why wrapping it in a parenthesis fixes it
[15:49:04] <Sam> Well, maybe it's still a simple statement, I dunno; the () makes the parse order work anyways.
[15:49:20] <Hanicef> looks like a bug to me imo
[15:49:29] <bpalmer> Hanicef: it starts parsing it as if t := test   {  doThing() }
[15:49:34] <Sam> It's not, but it's been a while since I've looked at this
[15:50:16] <Sam> SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
[15:50:21] <bpalmer> but (with | where the parse is) if t := (test|   <-- clearly that can't be about to start the body of the if, so it knows it's struct initialization
[15:50:28] <Hanicef> Sam: might be a good idea to document this as a gotcha, then
[15:50:53] <bpalmer> Hanicef: it is documented. see https://golang.org/ref/spec and search for "parsing ambiguity"
[15:51:47] <Sam> yah, nevremind, the simple statement thing is a red herring, ignore that. Either way it's just a minor parsing ambiguity that the () fixes by making the intent clear.
[15:51:59] *** Quits: dalan6236 (~dalan@59-102-54-91.tpgi.com.au) (Quit: dalan6236)
[15:52:38] <Hanicef> bpalmer: ah, ok. it's kinda hidden, though; i feel like stuff like that deserves their own page that clearly outlines these issues
[15:52:41] <Sam> See also the last paragraph in https://golang.org/ref/spec#Composite_which is what bpalmer is referencing
[15:52:56] <Hanicef> Sam: yeah, i saw that
[15:54:11] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Quit: Leaving.)
[15:56:23] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[15:57:09] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[15:57:48] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:03:02] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[16:06:17] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:07:10] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:07:21] <iateadonut> i keep calling the things you save in play.golang 'fiddles' - what should they actually be called?
[16:10:37] <mikoto-chan> it seems like chi router can does refuse invalid HTTP methods but it doesn't tell which ones are allowed, is it good practice to inform the user of the allowed methods?
[16:11:42] <Hanicef> mikoto-chan: i think it's mandatory by the standard, assuming a 405 method not allowed was returned
[16:11:54] <Hanicef> https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/405 - The server must generate an Allow header field in a 405 response containing a list of the target resource's currently supported methods
[16:11:55] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Ping timeout: 252 seconds)
[16:12:44] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[16:15:41] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:16:39] <mikoto-chan> Hanicef: thanks, some routers do and some routers don't do this by default it seems ://
[16:17:03] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:18:31] *** Quits: Kane (~Kane@portal.yarg.fr) (Ping timeout: 252 seconds)
[16:18:39] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[16:25:26] *** Joins: Kane (~Kane@portal.yarg.fr)
[16:25:32] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:25:44] <iateadonut> i'm writing some software that goes like, "if 'y', do this; if 'no', do that", in long chains.
[16:26:31] <iateadonut> i'm wondering the best way to organize this.  it seems like the loops i'm doing might get unwieldy after some time.
[16:27:05] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:29:41] *** Joins: dalan6236 (~dalan@59-102-54-91.tpgi.com.au)
[16:36:13] <rawtaz> without more specific information the general answer is to use a switch statement: https://tour.golang.org/flowcontrol/9
[16:37:23] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:37:52] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:39:15] <rawtaz> iateadonut: in particular see this: https://tour.golang.org/flowcontrol/11
[16:39:29] <rawtaz> in case you want to test different things
[16:42:57] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[16:47:31] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:47:59] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:48:28] *** Quits: zwr (~zwr@2804:d45:b966:fb00:98cf:1718:f7dd:cb4) (Ping timeout: 265 seconds)
[16:49:05] *** Joins: zwr (~zwr@2804:d45:b966:fb00:df78:af34:e6ea:4e48)
[16:52:27] *** Joins: xiongxin (~quassel@113.116.34.18)
[16:52:49] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[16:52:54] <j416> iateadonut: state machine
[16:54:09] <mikoto-chan> hmmm
[16:54:27] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[16:54:48] *** Joins: fikran (~fikran@user/fikran)
[16:54:58] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[16:55:20] <mikoto-chan> Hanicef: I noticed that chi doesn't do this, what would be the correct way to implement this behavior manually? middleware?
[16:56:30] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[16:56:44] <j416> mikoto-chan: if r.Method != http.MethodFoo { w.Header().Set(...); http.Error(...); return; }
[16:57:11] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[16:57:36] <mikoto-chan> j416: I have that in my handler but the problem with chi is that it checks the method *before* running the function
[16:57:44] <j416> mikoto-chan: whether or not you want to group this into a middleware or wrapping handler of some sort would depend on the rest of your code. Do what is readable.
[16:58:05] <j416> mikoto-chan: in that case, I'd avoid chi then.
[16:58:16] <mikoto-chan> and I need to implement 2 different methods on the same path
[16:58:19] <j416> mikoto-chan: if you must use it, you can work around it by wrapping its handler in a middleware indeed
[16:58:39] <mikoto-chan> okay c:
[16:59:05] <j416> unless that's internal to it; perhaps it's difficult.
[16:59:13] <j416> I've no experience with chi.
[17:02:57] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[17:03:25] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[17:05:35] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:06:00] <mikoto-chan> j416: https://github.com/go-chi/chi/issues/446
[17:06:15] <mikoto-chan> our dear friend Alex Edwards was nice enough to open a bug report c:
[17:06:29] <mikoto-chan> I can't believe how much I learnt from his blogs and books
[17:06:34] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[17:06:36] *** Joins: LiftLeft (~LiftLeft@191.96.185.36)
[17:08:37] *** Quits: wolfdale3 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Ping timeout: 252 seconds)
[17:08:50] <j416> mikoto-chan: what's your use-case for the Allow header?
[17:09:46] <mikoto-chan> j416: I have a pattern which needs to match both GET and POST
[17:10:14] <mikoto-chan> so if the user sends i.e. DELETE I send the "Not Allowed" with the allowed methods
[17:10:28] *** Joins: wolfdale4 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com)
[17:11:07] <j416> yes but, why do you need the header? I get that it follows the RFC and all but, why do you need it?
[17:12:38] <mikoto-chan> no reason really, I just want it to follow the standard
[17:12:52] <mikoto-chan> and it's a fun challenge c:
[17:13:03] <j416> I see.
[17:13:16] <j416> there's probably a reason; I don't know it, so just curious
[17:13:30] <j416> (I never bother to set the Allow header, maybe I could learn why it's useful)
[17:14:59] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:16:12] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[17:24:35] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:26:20] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[17:27:48] *** Parts: iateadonut (~dan@121.177.17.154) ()
[17:30:20] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[17:32:07] *** Quits: frost (~frost@59.71.244.36) (Quit: Connection closed)
[17:34:36] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:34:36] *** Quits: Hanicef (~gustaf@81-229-9-108-no92.tbcn.telia.com) (Quit: leaving)
[17:35:15] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[17:39:01] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[17:39:25] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[17:40:50] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Client Quit)
[17:41:13] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[17:42:09] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 250 seconds)
[17:43:08] *** Quits: thing (~thing@user/thing) (Remote host closed the connection)
[17:44:19] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 250 seconds)
[17:45:10] *** Joins: thing (~thing@user/thing)
[17:45:29] *** Joins: freakazoid333 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com)
[17:46:03] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 250 seconds)
[17:46:43] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com)
[17:47:27] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:47:56] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[17:50:20] *** Quits: freakazoid333 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com) (Ping timeout: 265 seconds)
[17:53:46] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[17:54:44] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[17:56:21] *** Joins: hexfive (~eric@50.35.83.177)
[17:56:27] *** Quits: martin_ (nobody@188.113.85.137) (Quit: WeeChat 3.0)
[17:56:36] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[17:57:17] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:00:32] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[18:05:38] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:06:37] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:06:52] *** Joins: martin_ (nobody@188.113.85.137)
[18:06:55] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com) (Read error: Connection reset by peer)
[18:07:06] *** somebody is now known as ninjin
[18:07:34] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com)
[18:09:27] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com)
[18:10:31] *** Quits: Kyros (~kyros@user/kyros) (Quit: ZNC 1.8.2 - https://znc.in)
[18:11:28] *** Joins: Kyros (~kyros@user/kyros)
[18:12:55] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com) (Ping timeout: 268 seconds)
[18:13:25] *** Joins: freakazoid343 (~matt@35.136.210.185)
[18:13:52] *** Quits: hexfive (~eric@50.35.83.177) (Quit: WeeChat 3.0.1)
[18:15:01] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:15:50] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[18:16:12] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:16:37] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com) (Ping timeout: 268 seconds)
[18:18:53] *** Joins: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de)
[18:20:06] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[18:24:37] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:26:17] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:32:00] *** Joins: normen_ (~normen@p200300d717418900604dfc52d02b03be.dip0.t-ipconnect.de)
[18:32:11] *** Quits: normen (~normen@p200300d717246e00b48bfc3ab121bcb8.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[18:32:13] *** normen_ is now known as normen
[18:34:31] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:35:13] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:39:33] *** Quits: wolfdale (~wolfdale@ec2-54-169-159-210.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[18:39:34] *** wolfdale4 is now known as wolfdale
[18:40:57] *** Joins: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com)
[18:41:46] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[18:42:06] *** Joins: mickey8 (~user@user/mickey)
[18:44:22] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 268 seconds)
[18:44:22] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:44:22] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:44:22] *** Joins: wroathe (~wroathe@user/wroathe)
[18:46:08] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[18:46:53] *** Quits: freakazoid12345 (~matt@2603-9000-cf0f-80e3-89de-933f-c249-2dc8.inf6.spectrum.com) (Ping timeout: 265 seconds)
[18:47:02] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:47:31] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:54:29] *** Quits: src (~src@user/src) (Ping timeout: 265 seconds)
[18:54:29] *** Quits: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net) (Remote host closed the connection)
[18:55:03] *** Joins: oldgalileo (~oldgalile@host-212-18-2-82.customer.m-online.net)
[18:55:57] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[18:56:27] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[18:56:41] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[18:57:10] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[18:59:08] *** Quits: xiongxin (~quassel@113.116.34.18) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:59:27] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 265 seconds)
[19:02:11] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 245 seconds)
[19:02:11] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[19:04:08] *** Joins: fikran (~fikran@user/fikran)
[19:05:03] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:06:06] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:08:26] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:10:24] *** Quits: wolfdale8 (~wolfdale@ec2-3-1-90-26.ap-southeast-1.compute.amazonaws.com) (Quit: The Lounge - https://thelounge.chat)
[19:11:30] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 268 seconds)
[19:14:20] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:14:55] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Read error: Connection reset by peer)
[19:15:34] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:15:40] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:17:24] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Read error: Connection reset by peer)
[19:17:25] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[19:18:04] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:20:39] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:20:42] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[19:24:01] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:24:25] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 250 seconds)
[19:24:26] *** Quits: buffet (~buffet@buffet.sh) (Quit: The Lounge - https://thelounge.chat)
[19:24:26] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[19:24:34] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Remote host closed the connection)
[19:24:56] *** Joins: buffet (~buffet@buffet.sh)
[19:25:05] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:25:52] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:28:17] *** foxes is now known as xfnw2
[19:29:26] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[19:32:28] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 268 seconds)
[19:33:28] *** Joins: freakazoid343 (~matt@35.136.210.185)
[19:34:09] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:34:49] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:35:15] *** Quits: fentanyl (~ryan@user/sapi01) (Quit: leaving)
[19:35:28] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[19:36:15] *** Joins: Praise (~Fat@user/praise)
[19:36:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[19:36:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[19:36:24] *** Joins: wroathe (~wroathe@user/wroathe)
[19:36:47] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 268 seconds)
[19:37:02] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[19:38:41] *** Joins: Compy_ (~compy@user/compy)
[19:41:21] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[19:41:34] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 245 seconds)
[19:46:35] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:47:04] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:55:26] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[19:56:07] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[19:59:01] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Quit: Client closed)
[20:04:00] *** Joins: lilgopher (~textual@2601:241:8000:38f0:90d9:b099:7727:746d)
[20:04:25] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[20:04:27] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:05:24] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:05:40] *** Quits: rockyh (~rockyh@user/rockyh) (Ping timeout: 252 seconds)
[20:07:00] *** Quits: freakazoid343 (~matt@35.136.210.185) (Ping timeout: 268 seconds)
[20:08:49] *** Joins: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261)
[20:10:36] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[20:12:40] *** Joins: rockyh (~rockyh@user/rockyh)
[20:13:25] *** Quits: internut (~internut@2601:280:4e00:7b70:987c:61de:312:2261) (Ping timeout: 252 seconds)
[20:13:43] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:14:55] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:15:34] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[20:22:56] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[20:23:14] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:23:26] <novns> my first unwanted open source project is almost ready
[20:23:54] <novns> it's an example of a personal blog website using fasthttp, quicktemplate and other libs
[20:24:47] <novns> https://github.com/novns/sumbur
[20:25:07] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:25:15] <novns> I created it for my own website, and I have to write some README
[20:28:11] <novns> it's useful because good examples are rare
[20:28:51] <novns> and things like template inheritance is painful when you do it first time
[20:29:46] *** Joins: khrbt (~znc@user/khrbt)
[20:32:03] *** Quits: independent_ (~independe@2.31.88.37) (Remote host closed the connection)
[20:32:11] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[20:32:21] *** Joins: independent_ (~independe@2.31.88.37)
[20:33:20] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:34:04] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:36:57] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[20:45:18] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:45:49] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:50:33] *** Joins: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de)
[20:51:57] <albertito> novns: how is it unwanted?
[20:52:07] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[20:52:20] <novns> albertito, I have shared the code, but who will use it
[20:52:36] <albertito> novns: ah! well, you never know! congratulations in any case
[20:54:10] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[20:54:29] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 265 seconds)
[20:54:52] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[20:58:28] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[21:03:11] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:03:34] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 260 seconds)
[21:04:09] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:05:44] *** Quits: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com) (Ping timeout: 245 seconds)
[21:07:35] *** Joins: lux0r (~lux0r@65.56.68.34.bc.googleusercontent.com)
[21:09:20] *** Quits: __alex (~alex@ip5f5afef3.dynamic.kabel-deutschland.de) (Ping timeout: 265 seconds)
[21:11:43] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[21:12:28] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:13:28] *** Joins: fikran (~fikran@user/fikran)
[21:13:36] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:14:56] <novns> albertito, thanks!
[21:15:40] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[21:19:23] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8)
[21:19:50] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[21:20:31] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[21:21:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[21:21:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[21:21:10] *** Joins: wroathe (~wroathe@user/wroathe)
[21:21:57] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:22:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 265 seconds)
[21:23:47] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:24:16] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 245 seconds)
[21:32:05] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:32:47] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:34:05] *** Quits: PedroG2 (~android@45.77.216.181) (Quit: Got you)
[21:34:45] *** Joins: PedroG1 (~android@45.77.216.181)
[21:44:04] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:44:34] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:49:11] *** Quits: chasmo77 (~chas77@71.63.241.168) (Quit: It's just that easy)
[21:53:18] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[21:53:59] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[21:55:54] *** Joins: ahappydeath (~silbermm@user/ahappydeath)
[21:56:59] *** Quits: nekron (~nekron@noordsee.de) (Quit: ZNC 1.8.2 - https://znc.in)
[21:57:13] *** Joins: nekron (~nekron@noordsee.de)
[21:57:29] *** Quits: hwm4rgs (~hwm4rgs@user/hwm4rgs) (Quit: Ping timeout (120 seconds))
[21:57:29] *** Quits: marcel (~marcel@user/marcel) (Quit: Ping timeout (120 seconds))
[21:57:41] *** Joins: hwm4rgs (~hwm4rgs@user/hwm4rgs)
[21:57:49] *** Joins: marcel (~marcel@user/marcel)
[21:57:50] *** Quits: LawnGnome (~LawnGnome@user/lawngnome) (Remote host closed the connection)
[21:58:03] *** Joins: LawnGnome (~LawnGnome@user/lawngnome)
[21:58:07] *** Joins: independent56 (~independe@2.31.88.37)
[21:58:25] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[21:58:26] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[21:58:35] *** Joins: kiril (~kiril@85.91.153.163)
[21:58:42] *** Joins: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[21:59:04] *** Quits: gjnoonan (sid95422@lymington.irccloud.com) (Ping timeout: 245 seconds)
[22:00:04] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[22:00:19] *** Quits: independent_ (~independe@2.31.88.37) (Ping timeout: 245 seconds)
[22:00:24] *** Joins: gjnoonan (sid95422@id-95422.lymington.irccloud.com)
[22:00:40] *** Quits: ahappydeath (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[22:02:25] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:03:19] *** Joins: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:06:21] *** Quits: Tv_ (uid62079@user/tv/x-3144562) (Read error: Connection reset by peer)
[22:06:29] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[22:06:33] *** Joins: lishanhui (~lishanhui@rrcs-71-42-233-146.sw.biz.rr.com)
[22:07:43] *** Quits: omegatron (~some@p5b056a70.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:09:05] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[22:10:11] *** Joins: chripell_ (~chripell@109.255.230.3)
[22:10:18] *** Joins: lazyreader8 (~lazyreade@user/lazyreader)
[22:10:59] *** Joins: ofh (~felix@61.69.196.50)
[22:11:00] *** Joins: markkuit_ (~markkuit@93-43-234-84.ip94.fastwebnet.it)
[22:11:30] *** Joins: RaySl (~raysl@sdf1.xen.prgmr.com)
[22:11:43] *** Quits: monoxane7 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:11:55] *** Quits: lazyreader (~lazyreade@user/lazyreader) (Killed (NickServ (GHOST command used by lazyreader8)))
[22:11:55] *** lazyreader8 is now known as lazyreader
[22:12:07] *** Joins: Kane_ (~Kane@portal.yarg.fr)
[22:12:44] *** Joins: Bitflux (~byte@byteflux.net)
[22:12:52] *** Quits: chripell (~chripell@109.255.230.3) (Remote host closed the connection)
[22:12:52] *** Quits: yelnah (~felix@61.69.196.50) (Quit: ZNC 1.8.2 - https://znc.in)
[22:12:52] *** Quits: markkuit (~markkuit@93-43-234-84.ip94.fastwebnet.it) (Quit: marqquit)
[22:12:52] *** Quits: RayS (~raysl@sdf1.xen.prgmr.com) (Quit: ZNC 1.8.2 - https://znc.in)
[22:12:52] *** Quits: Kane (~Kane@portal.yarg.fr) (Remote host closed the connection)
[22:12:52] *** Quits: Byteflux (~byte@byteflux.net) (Quit: ZNC - https://znc.in)
[22:12:53] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Ping timeout: 245 seconds)
[22:13:17] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:19:50] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[22:21:16] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:22:54] *** Kane_ is now known as Kane
[22:22:55] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:31:14] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:31:48] *** Joins: fentanyl (~ryan@user/sapi01)
[22:32:00] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:32:17] <fentanyl> Could someone tell me why I cannot do == operation for uint32? https://gcdn.pbrd.co/images/LC8bSjJAOZF4.png?o=1 Not sure why it's complaining.
[22:32:46] <Tv_> it can, that ain't a uint32
[22:32:51] <Tv_> read the error message
[22:33:06] <fentanyl> But it does returns a uint32
[22:33:08] <fentanyl> oh, wait
[22:33:33] <fentanyl> sorry, I was mistaken `ID` as a struct member.
[22:42:33] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[22:42:38] *** Joins: freakazoid343 (~matt@2603-9000-cf0f-80e3-6034-c436-2d1e-0b4a.inf6.spectrum.com)
[22:42:50] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:43:20] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:43:24] *** Quits: paruh (~paruh@92.60.39.18) (Quit: paruh)
[22:45:02] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[22:46:33] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:115:38fe:cdac:ba87)
[22:46:37] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:89de:933f:c249:2dc8) (Ping timeout: 265 seconds)
[22:48:18] *** Joins: paulgrmn (~paulgrmn@user/paulgrmn)
[22:52:55] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[22:53:25] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[22:55:40] *** Quits: bkircher (~bkircher@2001:a61:2531:8601:65a6:d38:5485:940b) (Ping timeout: 252 seconds)
[23:01:37] *** DHowett_ is now known as DHowett
[23:03:01] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:03:12] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[23:03:30] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:06:16] <dostoyevsky2> Does go have andything to manage os clocks in a distributed system?  If you want to keep a log of actions taken, it's easy to just use .e.g a millisecond timestamp, and you can replay that log later, even if the state was changed across mulitple servers... if your clocks are not enough in sync... it's a lot harder  .. I heard that google uses atomic clocks in their hardware to solve that... is there
[23:06:22] <dostoyevsky2> anything that would work with normal hardware?
[23:09:48] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Remote host closed the connection)
[23:11:50] *** Joins: freakazoid12345 (~matt@2603:9000:cf0f:80e3:6034:c436:2d1e:b4a)
[23:11:58] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:12:15] <fizzie> Isn't the standard approach just to run NTP / SNTP on everything -- with something like https://chrony.tuxfamily.org/ -- so that the clocks are in sync?
[23:12:39] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:13:55] <albertito> dostoyevsky2: as fizzie say the best "normal" thing is to run ntp to minimize the discrepancies between servers. Doing this at the OS level is better because then all processes benefit from it, and you don't get differences between processes on the same machine
[23:14:39] *** Quits: freakazoid343 (~matt@2603-9000-cf0f-80e3-6034-c436-2d1e-0b4a.inf6.spectrum.com) (Ping timeout: 265 seconds)
[23:17:17] <albertito> (also, the google example is much more tricky in practice, it's not about direct replay of logs assuming consistent time across servers)
[23:19:04] *** Quits: moto (~moto@user/moto) (Ping timeout: 245 seconds)
[23:19:20] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[23:19:54] *** Joins: moto (~moto@user/moto)
[23:20:55] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[23:20:58] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[23:21:06] *** Quits: mei (~mei@user/mei) (Quit: mei)
[23:21:18] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:22:16] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:22:24] *** Quits: LiftLeft (~LiftLeft@191.96.185.36) (Ping timeout: 245 seconds)
[23:22:49] *** Joins: fikran (~fikran@user/fikran)
[23:23:08] *** Joins: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net)
[23:24:11] *** Quits: lishanhui (~lishanhui@rrcs-71-42-233-146.sw.biz.rr.com) (Ping timeout: 265 seconds)
[23:26:19] *** Joins: paruh (~paruh@92.60.39.18)
[23:30:37] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:31:56] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:32:56] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:b1cf:9ce0:ed9a:29a3) (Quit: WeeChat 3.3)
[23:34:22] *** Joins: lishanhui (~lishanhui@rrcs-71-42-233-146.sw.biz.rr.com)
[23:35:25] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:6034:c436:2d1e:b4a)
[23:35:42] *** Joins: LiftLeft (~LiftLeft@191.96.185.36)
[23:36:22] *** Quits: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net) (Ping timeout: 252 seconds)
[23:36:55] *** Quits: paulgrmn (~paulgrmn@user/paulgrmn) (Ping timeout: 252 seconds)
[23:38:21] *** Quits: freakazoid12345 (~matt@2603:9000:cf0f:80e3:6034:c436:2d1e:b4a) (Ping timeout: 250 seconds)
[23:39:06] *** Joins: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net)
[23:42:48] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:43:04] *** Joins: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22)
[23:43:18] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:43:33] *** Quits: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net) (Ping timeout: 250 seconds)
[23:45:11] <dostoyevsky2> I guess I might be able to configure ntp to minimize the time differences between servers in my cluster down to a certain tolerance
[23:47:36] *** Quits: internut (~internut@2601:280:4e00:7b70:f14a:b0a:9112:6e22) (Ping timeout: 245 seconds)
[23:47:36] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 245 seconds)
[23:47:52] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Read error: Connection reset by peer)
[23:48:10] <dostoyevsky2> So in this example for raft they just setup ntp and chrony: https://notebook.yasithab.com/centos/hashicorp-vault-ha-cluster-with-raft-and-aws-kms-on-centos-7/
[23:49:16] *** Joins: rcernin (~rcernin@144.132.194.137)
[23:51:09] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[23:51:44] *** Quits: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net) (Remote host closed the connection)
[23:52:26] *** Joins: monoxane75 (~monoxane@119-18-17-227.771211.mel.static.aussiebb.net)
[23:54:00] *** Joins: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net)
[23:54:05] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[23:54:14] <MrElendig> note: ntp will give you a few ms of jitter
[23:54:45] <MrElendig> would need something like ieee1588 for sub-ms accuracy
[23:55:40] <dostoyevsky2> MrElendig: I also see that chrony basically replaces ntp...
[23:56:03] <MrElendig> dostoyevsky2: it doesn't, it is a ntp implementation
[23:56:12] <MrElendig> unless you ment ntp(1)
[23:56:21] <MrElendig> instead of the actual protocol itself
[23:56:31] <dostoyevsky2> https://chrony.tuxfamily.org/comparison.html
[23:56:51] <dostoyevsky2> It seems to have more features that other ntp implementations... so maybe good enough for a cluster setup
[23:58:22] *** Joins: silbermm (~silbermm@user/ahappydeath)
[23:58:26] *** Quits: ahappydeath (~silbermm@dsl-74-83-53-157.fuse.net) (Ping timeout: 245 seconds)
