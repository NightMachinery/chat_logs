[00:02:46] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:04:57] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:07:49] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:10:02] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:19:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[00:21:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:22:17] *** Quits: shiranaihito_ (~textual@123-192-192-149.dynamic.kbronet.com.tw) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[00:23:26] *** Joins: xulfer (uid452788@id-452788.ilkley.irccloud.com)
[00:26:35] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:26:36] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:26:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[00:27:19] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:29:21] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:30:04] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:31:52] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:34:36] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:36:48] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[00:36:53] *** Quits: struchu (~struchu@staticline-31-183-165-226.toya.net.pl) (Quit: WeeChat 3.3)
[00:39:01] *** Joins: joe_colben (~joe____co@185.190.112.211)
[00:41:40] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:41:43] *** Joins: matty_ma1 (~matt@129.222.239.110)
[00:43:01] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:44:47] *** Joins: struchu (~struchu@staticline-31-183-165-226.toya.net.pl)
[00:46:14] *** Joins: v3ga (~v3ga@2603-6080-5204-3b35-0000-0000-0000-18ad.res6.spectrum.com)
[00:51:01] *** Quits: euandreh (~euandreh@2804:14c:33:9fe5:fd9c:24e7:5ea:6f47) (Ping timeout: 240 seconds)
[00:52:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:53:02] *** Joins: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060)
[00:53:05] *** Joins: euandreh (~euandreh@2804:14c:33:9fe5:58c5:6207:2988:1b06)
[00:59:29] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:01:05] *** Quits: struchu (~struchu@staticline-31-183-165-226.toya.net.pl) (Quit: WeeChat 3.3)
[01:02:12] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[01:04:05] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:09:49] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:23:05] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:26:07] *** Quits: jespada (~jespada@87.74.33.157) (Ping timeout: 256 seconds)
[01:27:02] *** Joins: atw` (~user@2601:5c2:c500:76b0::4266)
[01:27:59] *** Joins: jespada (~jespada@87.74.32.18)
[01:28:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[01:46:45] *** Joins: matty_ma1 (~matt@129.222.239.110)
[01:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[01:55:09] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[01:57:07] *** Quits: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch) (Remote host closed the connection)
[01:59:03] *** Quits: eddof13 (~textual@2806:102e:12:4fba:a0ad:8e00:9345:9060) (Quit: Textual IRC Client: www.textualapp.com)
[02:01:03] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:03:30] *** Joins: wickedshell (~wickedshe@wsip-72-210-12-47.ph.ph.cox.net)
[02:06:22] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Quit: leaving)
[02:06:29] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[02:08:00] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[02:08:20] *** Joins: matty_matt (~matt@129.222.239.110)
[02:14:31] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:18:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[02:19:17] *** Quits: wickedshell (~wickedshe@wsip-72-210-12-47.ph.ph.cox.net) (Remote host closed the connection)
[02:30:24] *** Quits: joe_colben (~joe____co@185.190.112.211) (Remote host closed the connection)
[02:33:37] *** Quits: atw` (~user@2601:5c2:c500:76b0::4266) (Ping timeout: 240 seconds)
[02:37:26] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:45:31] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[02:50:17] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Ping timeout: 240 seconds)
[02:55:20] *** Joins: matty_ma1 (~matt@129.222.239.110)
[02:56:25] *** Joins: atw` (~user@2601:5c2:c500:76b0::a3c3)
[02:59:10] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:59:45] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:00:43] *** Joins: snystrom_ (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[03:07:28] *** Joins: schmudde1 (~schmudde@216.169.6.249)
[03:12:34] *** Joins: mrmr (~mrmr@user/mrmr)
[03:14:54] *** Joins: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef)
[03:21:35] *** Quits: eddof13 (~textual@2806:102e:12:4fba:418f:f2de:a11c:32ef) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:22:57] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[03:25:17] *** Quits: atw` (~user@2601:5c2:c500:76b0::a3c3) (Ping timeout: 240 seconds)
[03:26:43] *** Joins: matty_ma1 (~matt@129.222.239.110)
[03:36:32] *** Quits: Trieste (T@user/pilgrim) (Ping timeout: 240 seconds)
[03:37:18] *** Joins: wickedshell (~wickedshe@wsip-72-210-12-47.ph.ph.cox.net)
[03:37:45] *** Joins: Trieste (T@user/pilgrim)
[03:39:59] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[03:40:35] *** Quits: wickedshell (~wickedshe@wsip-72-210-12-47.ph.ph.cox.net) (Client Quit)
[03:42:51] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Remote host closed the connection)
[03:49:37] *** Quits: schmudde1 (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[03:51:11] <selfsymmetric-mu> I used to have coworkers who practiced what I called -s-driven development, where they would alias `map foo` to `foos` everywhere.
[03:51:27] <selfsymmetric-mu> It actually worked out okay.
[04:05:41] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:06:31] <ToxicFrog> So like, `(def incs (partial map inc))` and such?
[04:10:15] <jeaye> Hm, how often do you have a single fn name you're mapping with?
[04:10:32] <jeaye> I typically map over one-off fns or keywords, if I had to guess.
[04:10:47] <technomancy> I almost always use `for` if I'm not mapping a single function
[04:11:03] <technomancy> or a partial with a single arg
[04:11:08] <jeaye> one-off as in either anonymous or a def that's only used in that one place.
[04:11:52] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[04:12:20] <jeaye> technomancy: Interesting. I only use for if I want nesting or maybe its :when syntax.
[04:12:37] <technomancy> almost every #() map is better as a for
[04:13:05] <jeaye> I think it makes sense.
[04:13:47] <jeaye> Though I wonder if using for would fuck with my new clj programmer's minds too much. They're all so used to javascript for loops, so trying to get them to think in terms of map/filter/reduce is tought work.
[04:14:03] <jeaye> s/ght/gh/
[04:14:34] <sobel> make them use map/filter/reduce in js
[04:14:46] <jeaye> They're writing cljs, not js.
[04:14:50] <technomancy> we have a lot of code in our ugly monolith that's written by people who were both A) clearly learning clojure and B) seemingly unaware of the existence of `for`
[04:14:55] <jeaye> But they were js programmers before joining the team.
[04:14:59] <sobel> oic
[04:15:21] <jeaye> technomancy: for is largely forgotten in clj, I think.
[04:15:33] <sobel> technomancy: my biggest chunk of professional clojure contains my entire learning curve
[04:16:18] <jeaye> It almost like I wrote about this half a decade ago.
[04:16:21] <sobel> if i have to fix a bug i usually upgrade the implementation at the same time
[04:17:53] *** Quits: op2 (~op2@user/op2) (Ping timeout: 250 seconds)
[04:18:01] <jeaye> https://blog.jeaye.com/2016/07/27/clojure-for/ there it is.
[04:18:18] <technomancy> haha nice
[04:19:50] <technomancy> it's just weird that it's so obscure because like ... it's exactly the same as doseq, just for seqs instead of side-effects
[04:20:33] <jeaye> doseq doesn't support :let and :when and :while, does it?
[04:20:56] <technomancy> no, it does. it's all the same
[04:21:14] <jeaye> Oh, wow. I've never seen anything other than a barebones doseq.
[04:21:56] <technomancy> it's a lot more useful in `for` because you can't use clojure.core/when but it still works
[04:26:15] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[04:30:11] *** Quits: seschwar (~seschwar@user/seschwar) (Quit: :wq)
[04:43:10] *** Quits: xulfer (uid452788@id-452788.ilkley.irccloud.com) (Quit: Connection closed for inactivity)
[04:44:35] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[04:46:28] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Error))
[04:47:05] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[04:49:07] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[04:50:43] *** Joins: matty_matt (~matt@129.222.239.110)
[04:51:10] *** Joins: AlaskanEmily (~AlaskanEm@user/alaskanemily)
[04:52:09] *** Joins: matty_ma1 (~matt@129.222.239.110)
[04:57:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[04:58:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[04:59:45] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 256 seconds)
[05:01:35] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Ping timeout: 256 seconds)
[05:08:35] *** Joins: matty_matt (~matt@129.222.239.110)
[05:16:31] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:19:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[05:23:07] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:23:57] *** Quits: karthink[m] (~karthinkm@2001:470:69fc:105::d777) (Quit: Client limit exceeded: 20000)
[05:29:55] *** Quits: snystrom_ (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (Ping timeout: 256 seconds)
[05:33:51] *** Joins: matty_matt (~matt@129.222.239.110)
[05:34:00] *** Joins: schmudde1 (~schmudde@216.169.6.249)
[05:39:56] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:45:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[05:47:29] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:48:53] *** Joins: matty_matt (~matt@129.222.239.110)
[05:51:46] *** Joins: matty_ma1 (~matt@129.222.239.110)
[05:53:57] *** Joins: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[05:54:09] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[05:55:25] *** Quits: schmudde1 (~schmudde@216.169.6.249) (Ping timeout: 256 seconds)
[05:55:59] *** Joins: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz)
[05:56:02] *** Quits: libertyprime (~libertypr@118-92-72-229.dsl.dyn.ihug.co.nz) (Client Quit)
[05:56:23] *** Joins: matty_matt (~matt@129.222.239.110)
[05:57:33] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 256 seconds)
[06:16:15] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[06:16:42] *** Joins: sss777sss (~ss@181.30.228.235)
[06:17:57] *** Quits: snystrom (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (Ping timeout: 256 seconds)
[06:18:48] *** Joins: evocatus (~evocatus@62.182.77.224)
[06:19:10] <evocatus> hi
[06:19:22] *** Joins: karthink[m] (~karthinkm@2001:470:69fc:105::d777)
[06:21:47] *** Quits: sss777sss (~ss@181.30.228.235) (Quit: Leaving.)
[06:21:55] *** Quits: TonyStone (~TonyStone@cpe-74-76-51-197.nycap.res.rr.com) (Ping timeout: 256 seconds)
[06:22:20] <evocatus> are there any practical advantages in using Cli tools over Leiningen as of now?
[06:29:12] <technomancy> haha
[06:34:51] *** Joins: snystrom_ (~snystrom@cpe-98-26-26-26.nc.res.rr.com)
[06:35:25] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[06:38:00] <evocatus> @technomancy, could you elaborate?
[06:47:11] *** Joins: matty_ma1 (~matt@129.222.239.110)
[06:47:57] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[06:53:39] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[07:07:10] *** Joins: matty_matt (~matt@129.222.239.110)
[07:09:46] *** Joins: mbuf (~Shakthi@122.173.251.205)
[07:16:17] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[07:27:07] *** Joins: schmudde1 (~schmudde@216.169.6.249)
[07:38:45] *** Joins: sss777sss (~ss@181.30.228.235)
[07:40:32] <TimMc> Leiningen is a CLI tool, so I'm not clear on the distinction you're trying to draw.
[07:41:23] *** Quits: snystrom_ (~snystrom@cpe-98-26-26-26.nc.res.rr.com) (Ping timeout: 256 seconds)
[07:42:57] *** Quits: jespada (~jespada@87.74.32.18) (Ping timeout: 240 seconds)
[07:45:09] *** Joins: jespada (~jespada@87.74.32.18)
[07:45:58] <technomancy> evocatus: I have no idea if there are any advantages to tools.cli; I just think it's funny how often that question has been asked in here recently.
[07:46:43] *** Quits: evocatus (~evocatus@62.182.77.224) (Quit: Leaving)
[07:57:26] <TimMc> oh, tools.cli
[08:06:30] *** Joins: matty_ma1 (~matt@129.222.239.110)
[08:11:25] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[08:18:35] *** Joins: atw` (~user@2601:5c2:c500:76b0::314d)
[08:21:49] *** Joins: matty_matt (~matt@129.222.239.110)
[08:52:29] *** Joins: matty_ma1 (~matt@129.222.239.110)
[09:00:43] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[09:01:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[09:05:17] *** Quits: schmudde1 (~schmudde@216.169.6.249) (Ping timeout: 240 seconds)
[09:05:46] *** Quits: sss777sss (~ss@181.30.228.235) (Quit: Leaving.)
[09:14:20] *** Joins: shiranaihito (~textual@2001-b011-4000-3067-5c33-ebce-52df-f6d2.dynamic-ip6.hinet.net)
[09:35:43] *** Quits: perro_ (~perro@072-191-245-069.res.spectrum.com) (Ping timeout: 256 seconds)
[09:48:57] *** Quits: atw` (~user@2601:5c2:c500:76b0::314d) (Ping timeout: 240 seconds)
[09:57:22] *** Joins: matty_ma1 (~matt@129.222.239.110)
[09:59:48] *** Joins: perro_ (~perro@072-191-245-069.res.spectrum.com)
[10:01:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[10:33:58] *** Joins: schmudde1 (~schmudde@216.169.6.249)
[10:36:06] *** Joins: struchu (~struchu@staticline-31-183-182-103.toya.net.pl)
[10:43:32] *** Quits: schmudde1 (~schmudde@216.169.6.249) (Quit: WeeChat 3.2)
[11:03:14] *** Joins: puchka (~marius@165.73.240.150)
[11:10:51] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[11:59:33] *** Joins: matty_ma1 (~matt@129.222.239.110)
[12:05:37] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[12:18:57] *** Joins: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi)
[12:26:20] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[12:35:55] *** Joins: op2 (~op2@user/op2)
[12:36:03] *** Joins: Nahra (~user@static.161.95.99.88.clients.your-server.de)
[12:36:18] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:02:42] *** Joins: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e)
[13:03:38] <wink> tools.what? *goes to the docs*
[13:03:47] <wink> look, clojure 1.2 sitll works perfectly fine.
[13:21:04] *** Quits: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net) (Ping timeout: 268 seconds)
[13:21:27] *** Joins: selfsymmetric-mu (~matt@c-73-10-148-139.hsd1.nj.comcast.net)
[13:56:53] *** Quits: AlaskanEmily (~AlaskanEm@user/alaskanemily) (Remote host closed the connection)
[13:58:50] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC)
[13:59:39] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[14:20:06] *** Joins: matty_ma1 (~matt@129.222.239.110)
[14:21:01] *** Joins: seschwar (~seschwar@user/seschwar)
[14:24:17] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[14:40:35] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[15:45:46] *** Joins: matty_ma1 (~matt@129.222.239.110)
[15:47:33] *** Quits: Kyuvi (~Kyuvi@dsl-hkibng31-58c38d-219.dhcp.inet.fi) (Quit: Client closed)
[15:52:04] *** Quits: unyu (~pyon@user/pyon) (Quit: WeeChat 3.3)
[16:04:59] <TimMc> Now I'm *really* confused. tools.cli vs. lein is just a category error.
[16:30:29] *** Quits: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru) (Remote host closed the connection)
[16:31:29] *** Joins: uncleyear (~ian@pppoe.178-66-158-61.dynamic.avangarddsl.ru)
[16:37:49] <Para> tools.cli is just a clioid in the category of endointerfaces
[16:37:55] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[16:43:11] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: -now)
[16:48:57] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[16:56:35] *** Joins: Afroboy (~afroboy@41.200.62.66)
[17:00:37] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[17:05:09] <wink> nice one
[17:18:13] *** Quits: shiranaihito (~textual@2001-b011-4000-3067-5c33-ebce-52df-f6d2.dynamic-ip6.hinet.net) (Ping timeout: 240 seconds)
[17:20:37] *** Quits: gonewest818[m] (~gonewest8@2001:470:69fc:105::f38b) (Ping timeout: 240 seconds)
[17:22:52] *** Joins: shiranaihito (~textual@2001-b011-4000-3067-5c33-ebce-52df-f6d2.dynamic-ip6.hinet.net)
[17:23:13] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Ping timeout: 256 seconds)
[17:23:16] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[17:23:26] *** Joins: dalek-caan (~Thunderbi@109.252.124.86)
[17:34:20] <TimMc> lol
[17:34:51] <TimMc> always dangerous to say "category error" in a functional programming channel
[17:38:40] *** Joins: gonewest818[m] (~gonewest8@2001:470:69fc:105::f38b)
[17:48:11] *** Quits: sub0 (~bc8147f2@cerf.good1.com) (Quit: CGI:IRC (Ping timeout))
[17:49:37] *** Quits: puchka (~marius@165.73.240.150) (Ping timeout: 240 seconds)
[17:50:36] *** Joins: puchka (~marius@165.73.242.13)
[17:56:45] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[17:57:25] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[18:02:44] *** Joins: unyu (~pyon@user/pyon)
[18:15:09] *** Joins: nighcoder (~ciumbi@206.176.143.59)
[18:45:51] *** Joins: matty_ma1 (~matt@129.222.239.110)
[18:46:02] *** Joins: cranium (~cranium@user/cranium)
[18:50:29] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[18:51:37] *** Quits: MajorBiscuit (~MajorBisc@2a02:a461:129d:1:193d:75d8:745d:e91e) (Ping timeout: 240 seconds)
[18:53:07] *** Joins: sub0 (~bc8147f2@cerf.good1.com)
[18:53:57] *** Joins: MajorBiscuit (~MajorBisc@c-001-023-057.client.tudelft.eduvpn.nl)
[19:03:50] *** Quits: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net) (Quit: ZNC 1.8.2 - https://znc.in)
[19:05:36] *** Joins: cognemo (~cognemo@cpe-46-164-24-121.dynamic.amis.net)
[19:09:07] *** Quits: struchu (~struchu@staticline-31-183-182-103.toya.net.pl) (Quit: WeeChat 3.3)
[19:29:48] *** Joins: eddof13 (~textual@177.241.57.17)
[19:30:40] *** Quits: puchka (~marius@165.73.242.13) (Quit: leaving)
[19:31:15] *** Quits: Afroboy (~afroboy@41.200.62.66) (Remote host closed the connection)
[19:35:20] *** Joins: zmt00 (~zmt00@user/zmt00)
[19:36:47] *** shem_ is now known as shem
[19:37:01] *** Joins: morte_ (~user@190.104.116.153)
[19:42:03] *** Joins: mwnaylor (~user@2601:5ce:4300:5560::68b3)
[19:44:50] *** Joins: sss777sss (~ss@181.30.228.235)
[19:47:36] *** Joins: egli (~user@193-47-178-139.dyn.fiber.qlnet.ch)
[20:00:26] *** Quits: cranium (~cranium@user/cranium) (Quit: Leaving)
[20:16:33] <technomancy> 1.2 *was* really good, but I would insist on at least 1.4
[20:17:29] *** Joins: matty_matt (~matt@129.222.239.110)
[20:17:58] <technomancy> I think in 1.2 everyone was still using :use
[20:18:23] <technomancy> lmao the changelog only goes back to 1.9.0-alpha1 https://clojure.org/releases/devchangelog
[20:18:25] <technomancy> come on
[20:22:37] *** Quits: cmiles74 (~miles@068-184-030-013.res.spectrum.com) (Ping timeout: 240 seconds)
[20:22:59] <ridcully> the one on GH goes back to 1.3
[20:23:08] <ridcully> the link is in the first paragraph of that page
[20:24:22] *** Quits: mbuf (~Shakthi@122.173.251.205) (Quit: Leaving)
[20:25:17] <technomancy> I guess if you want to know about 1.2 you just had to be there
[20:28:30] <TimMc> Didn't 1.3 remove the implicit numeric tower?
[20:30:54] <technomancy> yeah, plus it changed the behavior of binding so you have to declare ^:dynamic
[20:31:06] <technomancy> it was a pretty breaky change
[20:34:09] *** Quits: sss777sss (~ss@181.30.228.235) (Quit: Leaving.)
[20:35:04] <TimMc> I'm still a little fussed about the numerics.
[20:35:46] <technomancy> I think it was mostly that math used to be safe by default and now if you want safe math you have to ask for it specifically with +' and friends
[20:36:30] <technomancy> because rich got tired of people publishing benchmarks comparing safe math with unsafe math and making clojure look bad, I guess
[20:36:40] * technomancy shakes his fist at superficial benchmarkers
[20:36:43] <technomancy> always ruining everything
[20:37:48] *** Quits: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net) (Read error: Connection reset by peer)
[20:38:51] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[20:40:18] *** Joins: logiz (~otter@pool-100-2-192-142.nycmny.fios.verizon.net)
[20:45:58] *** Joins: cmiles74 (~miles@068-184-030-013.res.spectrum.com)
[21:07:16] <sobel> maybe this will be the year i learn FP abstractions a little better
[21:21:58] <logiz> sobel: you can do it!
[21:22:21] <Para> I still don't get the difference between :require and :use and at this point I'm kinda too afraid to ask.
[21:25:13] <technomancy> :use is bad; that's all you have to know =)
[21:25:15] <ridcully> use gets you anything (e.g. like you usually have clojure.core available).  refer is is (nearly) always the better choice
[21:30:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[21:35:18] *** Quits: eddof13 (~textual@177.241.57.17) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:36:52] *** Quits: MajorBiscuit (~MajorBisc@c-001-023-057.client.tudelft.eduvpn.nl) (Ping timeout: 268 seconds)
[21:37:13] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[21:38:34] <Solid> even for internal modules?  this is something that I always ignored clj-kondo telling me during AOC 
[21:38:44] <Solid> I want my to import my utils module unqualified!
[21:38:48] *** Joins: matty_matt (~matt@129.222.239.110)
[21:38:55] <technomancy> too bad =P
[21:39:24] <technomancy> the only reason :require :refer :all exists is for clojure.test in test namespaces
[21:42:52] <Para> "I sure made this ns cumbersome to use, instead of fixing it I guess I'll just create an 'import everything' thing" ?
[21:44:08] <technomancy> potemkin!
[21:45:44] <Para> Now that I think of it, I don't think I've seen any clojure.test utilizing project which would use anything beyond deftest, testing, is and seldomly that exception assertion I can't even remember right now.
[21:46:07] <technomancy> Para: run-tests, in the repl
[21:46:34] <Para> yes, that
[21:46:44] <technomancy> that's one where the linter is extremely stupid
[21:46:47] <Para> Wow, that's five things. Sure is worth `:refer :all`
[21:47:17] <technomancy> it wants you to list out everything you use, but if you put run-tests, it's like "but you aren't using that in the code" and I'm like "it's not in the code dummy" but it doesn't understand
[21:48:07] <Para> yesql/jeesql also has similar issues
[21:48:24] <Para> It autogenerates symbols based on .sql files which for linters of course is totally wild and unexpected.
[21:48:47] <Para> How dare you have runtime specified symbols in a dynamic language.
[21:48:49] <technomancy> any linter that doesn't do macroexpansion isn't worth much
[21:49:26] <Para> Which is also why codox evaluates code.
[21:49:35] <Para> Which...well, I guess it works.
[21:50:02] <Para> Too bad I lost my tools.reader based project which did sort of the same thing as codox, did macroexpansion without eval.
[21:50:02] <technomancy> this is why Fennel defaults to evaluating macros in a sandboxed environment
[21:50:21] <Para> (I literally have no idea what happened to the project source)
[21:50:34] <technomancy> the whole idea of "you can't lint this without compiling it, but you can't compile it without opening yourself up to literally any code evaluation" is a real bad place to be
[21:51:19] <aphyr> Huh. I think arbitrary code eval during compilation is actually a good thing
[21:51:37] <technomancy> aphyr: macros should be pure functions by default
[21:51:38] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
[21:51:42] <aphyr> Oh, strong disagree!
[21:52:04] <aphyr> One of my favorite techniques is macros which compile parsers from language specifications in resource files
[21:52:08] <Para> IMO it should be so that you can tell it to macroexpand/unroll everything up to the maximum point until it's impossible to continue without proper evaluation.
[21:52:30] <aphyr> Or which e.g. automatically generate wrappers for protobufs
[21:52:42] <technomancy> aphyr: 99% of macros are pure; you can specially annotate your compilers which take file input
[21:53:00] <aphyr> Do you count gensym as a side effect?
[21:53:48] <technomancy> haha, I would if I were a Haskeller, but my definition is pretty loose
[21:54:00] <technomancy> actually Fennel even allows printing from macros
[21:54:12] <aphyr> Yeah, I think I'm with you on that
[21:54:38] <aphyr> I can see an argument for flagging those specially for linters, but like... oh, it's *so* useful to be able to do compile-time side effects
[21:54:56] <technomancy> we're working on more fine-grained controls so you could say that a compiler macro should have access to the filesystem, but it's better to set the defaults strict and loosen them over time than to go the other way.
[21:55:09] <aphyr> I had to interoperate with some truly hot garbage ethereum client library recently which involved shelling out to the solidity compiler during macroexpansion
[21:55:46] <Para> I'd kinda like having infectious metadata; if a functions calls another which is marked eg. unpure, blocking, IO utilizing etc. it could be useful to be able to detect that during evaluation.
[21:56:04] <Para> This probably has a better name as well.
[21:56:38] <aphyr> Perl had the notion of "taint"
[21:57:12] <aphyr> and yeah, Haskell constrains a lot of this at the type level. There's also effect systems ala Eiffel
[21:57:45] <technomancy> yeah I'm not saying you should never have side effects in macros; just that they should be opt-in.
[21:58:32] <aphyr> Valid!
[21:58:39] <Para> It is of course possible to write your code so that all these dangerous things are behind an abstraction; several time libraries in fact allow you to inject "clocks" for testing and whatnot :)
[21:58:46] <Para> But then you'd have to remember to use said abstractions.
[22:00:07] <technomancy> aphyr: out of curiosity, what kind of sandbox escapes would you like to see beyond reading files and shelling out?
[22:00:52] <technomancy> trying to think of how to design our fine-grained compiler side-effect opt-in stuff; right now it's just all-or-nothing which is definitely not ideal
[22:02:13] <aphyr> Oh! Yeah, files and resources, for sure. Shelling out is really nice when you're trying to wrap third-party code in other languages--in the ethereum example I shelled out to the compiler to compile ethereum programs and also to statically generate typed wrapper functions for calling their methods--the solidity compiler tooling emitted JSON stuff. Actually a little fuzzy on how much macro magic was involved 
[22:02:20] <aphyr> there.
[22:03:18] <aphyr> I think access to the JVM reflection tooling is important--often I'm using macros to generate typesafe non-reflective wrappers around JVM types. Oh, and forcing classes that declare everything private to make things public.
[22:03:28] <technomancy> at first I was thinking the opt-out would be like "this macro is allowed access to io.read and io.popen" but now I'm thinking it would be better to be even *more* fine-grained
[22:03:46] <technomancy> like "this macro is allowed access to the resources/ directory and this macro is allowed to io.popen this exact string only"
[22:04:24] <aphyr> If I were being *really* pathological I might say network access; there have been a few times I've considered auto-generating API functions based on a machine-readable specification available online.
[22:04:51] <technomancy> haha network access is already a 3rd-party library in Fennel anyway so that's easy
[22:05:11] <Para> Does it allow limiting to specific interfaces?)
[22:05:18] <aphyr> I definitely want to compile code as a side effect in macros, so I'd say at a minimum runtime compilation access, and ideally being able to write to the FS too.
[22:05:31] <Para> As in "this piece of code can use en0 to talk to [whatever CIDR]"
[22:06:01] <technomancy> Para: there are multiple 3rd-party networking libraries so you can't really generalize
[22:06:24] <aphyr> (Fully recognize this is Iffy and potentially non-portable; a lot of this I could pull back into stateful-memoized functions and use of eval)
[22:06:33] <lagash> technomancy: have a look at SELinux /s 
[22:06:42] <technomancy> aphyr: yeah, writing would be done in the same way, like; we will expose a version of io.open which can write but it checks to make sure the path is inside what you've declared first
[22:08:26] <aphyr> Does expanding to `do` count as impure?
[22:08:33] <technomancy> nah
[22:09:09] <technomancy> the sandbox in fennel just means that macros run in an environment that has no access to certain globals
[22:09:10] <aphyr> Because one thing I've done often is using defmacro to spew out a whole bunch of related fns ala `(def int8 [x] ...) (def int16 [x] ...)`
[22:09:33] <technomancy> "pure" just means "takes forms in and spits forms out"
[22:09:49] <aphyr> Right, right. It's that I'm using def for side effects there.
[22:10:16] <technomancy> that's more like the macro telling the compiler to side-effect rather than side-effecting itself
[22:10:18] <technomancy> but you know that
[22:10:43] <aphyr> yeah
[22:11:31] <technomancy> it's been fun to take little complaints I've had with Clojure and make sure they aren't problems in Fennel
[22:11:52] <technomancy> like those damn literals that have a space inside them despite being only a single piece of data ಠ_ಠ
[22:12:12] <technomancy> I hate that so much
[22:12:25] <aphyr> literals with spaces, huh?
[22:12:41] <technomancy> like #inst "2022"
[22:12:47] <technomancy> it's two tokens but it's one datum
[22:12:49] <technomancy> bbad
[22:12:55] <aphyr> Ah, right, the reader directives
[22:13:04] <aphyr> Also #_
[22:13:23] <technomancy> I don't hate that one as much but I did leave it out anyway =)
[22:13:36] <aphyr> How do you feel about having a programmable reader?
[22:13:47] <Para> I was just about to say that :D
[22:13:52] <aphyr> (I feel like this is one bit of lisp wizardry I've never really felt the need for, but friends have told me it's delightful)
[22:14:09] <Para> Like allow providing macros through programmable readers without all the quoting or smth
[22:14:42] <technomancy> aphyr: I value transparency and predictability too much to allow arbitrarily reprogramming the reader a la CL or Racket
[22:15:06] <technomancy> tagging data that's already valid isn't so bad but I haven't found a way to do it gracefully in Fennel yet
[22:16:28] <jeaye> #_ is really handy.
[22:17:47] <jeaye> Having to drop surrounding ) so I can ; would be annoying.
[22:18:28] <technomancy> paredit tho
[22:19:16] <jeaye> So you'd rather require fennel devs use paredit.
[22:19:52] <technomancy> no, people can use ;; or (comment) just fine if they don't want to make things easy on themselves
[22:20:26] <jeaye> Does fennel require ;; rather than ; ?
[22:20:35] <technomancy> no, that's just a style thing
[22:21:14] <technomancy> single semicolors are for inline comments
[22:21:17] <jeaye> I see people do that in clojure. Doesn't make any sense to me. "One will do, but two is nice, isn't it?"
[22:21:23] <technomancy> that convention is like ... older than clojure itself
[22:21:42] <technomancy> http://mumble.net/~campbell/scheme/style.txt
[22:22:22] <jeaye> Doesn't mean it's a sensible one. Just means it's old. :)
[22:22:54] <technomancy> it's nice to be able to use different numbers of semicolons to communicate things
[22:23:00] <technomancy> like section headers
[22:24:11] <technomancy> the one that gets me is when people use `when` for non-side-effecty things
[22:24:37] <technomancy> like ... if crusty 1990s CL programmers care more about separating values from side-effects than you do, then you should probably rethink what you're doing.
[22:25:04] <jeaye> (merge foo (when bar? meow)) ; such a common pattern
[22:25:18] <technomancy> it's bad
[22:25:19] <technomancy> use if
[22:26:41] <jeaye> There's nothing about when which implies it's for side effects. Nothing in the docs, nothing in the literature. If crusty CL programmers used it that way, that doesn't mean we should.
[22:26:53] <technomancy> implicit do
[22:27:17] <aphyr> Huh, I understood when to signal side effects too! At least culturally
[22:27:32] <jeaye> Using when is a great way of indicating you didn't forget the else form in the if. In fact, any modern clj linter will provide a warning for that and tell you to use a do.
[22:27:46] <jeaye> So clearly the tooling developers are in alignment.
[22:27:46] <technomancy> yeah but those linters are junk
[22:27:50] <jeaye> hehe
[22:27:56] <aphyr> haha
[22:28:02] <aphyr> The eternal refrain :D
[22:28:13] <technomancy> if `if` was supposed to require an else clause then it should have been a compile error
[22:28:18] <technomancy> like racket
[22:28:27] <aphyr> If it was meant to be illegal, it would have been unrepresentable! ;-)
[22:28:46] <aphyr> (I say, embedding unicode HALF_WIDTH_SPACE in the middle of variable names "for readability")
[22:28:46] <jeaye> It's protection against a common mistake.
[22:30:13] <technomancy> if you have two constructs that do exactly the same thing but one has an implicit do and the other doesn't, obviously that signals something about what it's for
[22:30:42] <jeaye> If you have two constructs, one which is binary, one which is unary, it obviously signals something about what it's for.
[22:30:55] <technomancy> theyre both unary
[22:31:34] <jeaye> :)
[22:31:47] <aphyr> Come to think of it, let and fn also have implicit do, but they don't signal side effects
[22:32:50] <jeaye> Yeah, what is it with people using let for pure code? Stick with recursion, as it was done decades ago.
[22:33:18] <technomancy> hypothetically if a non-do let existed, and someone chose the do-let version, it would definitely signal side-effects
[22:34:09] <jeaye> Well, that was fun.
[22:34:33] <jeaye> Back to struggling with ring and reitit to adapt some middleware for core.async
[22:34:43] <technomancy> anyway I made sure to fix the docstring in fennel's when so it's clear to everyone =)
[22:43:57] *** Quits: mwnaylor (~user@2601:5ce:4300:5560::68b3) (Ping timeout: 240 seconds)
[22:46:59] *** Joins: matty_ma1 (~matt@129.222.239.110)
[22:51:27] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:54:32] <TimMc> a macro that pops up a dialog box asking how much you want it to optimize your code today
[22:57:33] <Para> Non-ironically my mom still wants a cartoon cat to tell her how a computer works.
[22:58:49] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[22:59:53] <ridcully> i want that too.  nerdy, the cat.  like clippy.
[23:00:47] *** Quits: shiranaihito (~textual@2001-b011-4000-3067-5c33-ebce-52df-f6d2.dynamic-ip6.hinet.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[23:03:55] <goodger> there was a cat in office 97 and 2000
[23:07:14] <ridcully> too bad i never used that... or maybe not...
[23:11:36] *** Joins: matty_matt (~matt@129.222.239.110)
[23:16:37] *** Quits: morte_ (~user@190.104.116.153) (Ping timeout: 240 seconds)
[23:22:26] *** Joins: morte_ (~user@190.104.116.153)
[23:25:39] *** Joins: struchu (~struchu@staticline-31-183-165-226.toya.net.pl)
[23:48:25] *** Quits: dalek-caan (~Thunderbi@109.252.124.86) (Quit: dalek-caan)
[23:50:28] *** Joins: matty_ma1 (~matt@129.222.239.110)
[23:54:37] *** Quits: matty_matt (~matt@129.222.239.110) (Ping timeout: 240 seconds)
[23:54:55] *** Quits: matty_ma1 (~matt@129.222.239.110) (Ping timeout: 256 seconds)
[23:56:28] *** Quits: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:57:08] *** Joins: eddof13 (~textual@2806:102e:12:4fba:19f8:d24b:c7d4:55c6)
