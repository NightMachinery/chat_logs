[00:03:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[00:15:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[00:30:21] *** Quits: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52) (Remote host closed the connection)
[00:48:59] *** Quits: bigGopher (~dan@207.98.176.66) (Quit: bigGopher)
[00:56:07] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[01:14:29] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[01:15:08] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 272 seconds)
[01:15:57] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:26:18] *** Quits: zer0bitz (~zer0bitz@2001:2003:f74d:b800:4d3e:ae3:d6a0:1183) (Read error: Connection reset by peer)
[01:29:55] *** Quits: zanshin (~zanshin@user/zanshin) (Ping timeout: 250 seconds)
[01:30:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[01:35:24] *** Joins: lack (~lack@user/lack)
[01:36:40] *** Quits: theo (~theo@user/theo) (Ping timeout: 272 seconds)
[01:39:12] *** Quits: nostalgia (~nostalgia@c-24-13-122-176.hsd1.in.comcast.net) (Ping timeout: 272 seconds)
[01:50:23] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[01:52:36] *** Quits: normen (~normen@p200300d71749cc0024fd90d4a307ad17.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[01:53:08] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[01:54:36] *** Joins: yonson (~yonson@2600:8801:d900::1962)
[02:05:01] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:11:34] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[02:17:31] *** Joins: normen (~normen@p200300d71749cc0024fd90d4a307ad17.dip0.t-ipconnect.de)
[02:24:01] *** Joins: troseman (~troseman@c-75-70-98-121.hsd1.co.comcast.net)
[02:26:59] *** Joins: WilliamH (~william@gentoo/developer/williamh)
[02:28:38] <WilliamH> Hey folks, is there a reason go build would readch out to the net if a vendor directory exists in a project?
[02:30:41] <WilliamH> I"m trying to build http://git.sr.ht/~rjarry/aerc.git v0.8.2 after running "go mod vendor" and it is still contacting the network.
[02:31:11] <WilliamH> I am working on packaging it, and we can't reach out to the net during package builds.
[02:31:27] <fizzie> The module's `go.mod` file lists "go 1.13", which requires enabling vendoring explicitly.
[02:31:44] <fizzie> https://go.dev/ref/mod#vendoring "If the vendor directory is present in the main module’s root directory, it will be used automatically if the go version in the main module’s go.mod file is 1.14 or higher."
[02:31:54] <fizzie> Since 1.13 isn't "1.14 or higher", it's not.
[02:32:02] <WilliamH> This is with go 1.17.7/linux/amd64
[02:32:20] <fizzie> Yes, but it's about the Go version declaration in the main module's go.mod file, not the Go version you're using.
[02:32:25] <WilliamH> ah ok.
[02:32:49] <WilliamH> Will it break the package if I use go mod edit to fix that?
[02:33:55] <fizzie> It probably wouldn't. But as an alternative, you can do `go build -mod=vendor ...` explicitly.
[02:35:08] <WilliamH> Ok, I'll figure out how to do that in my build script.
[02:35:13] <WilliamH> Thanks. :-)
[02:36:02] *** Parts: WilliamH (~william@gentoo/developer/williamh) ()
[02:36:20] *** Joins: Ergo^ (~ergo@91.238.59.144)
[02:39:13] *** Joins: Torr (~Torr@user/torr)
[02:44:54] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:47:15] *** Joins: WilliamH (~william@gentoo/developer/williamh)
[02:48:46] <WilliamH> fizzie: Hmm, now it is failing for another reason... paste incomming.
[02:51:21] <WilliamH> http://dpaste.com/5FBL9H7A7
[02:51:43] <WilliamH> But, that error doesn't make sense, if I build it without vendoring it builds.
[02:59:00] <b0nn> WilliamH: https://github.com/golang/go/issues/26366
[02:59:12] <fizzie> Hmm, I feel like possibly that module's doing a thing where it expects some non-Go source files to be in its sources.
[03:01:08] *** Joins: rcernin (~rcernin@124.190.132.36)
[03:01:08] <fizzie> Specifically, https://github.com/ddevault/go-libvterm/blob/master/vterm.go#L4 tries to add -I"${SRCDIR}/libvterm/include/" but that issue b0nn linked to suggests that directory wouldn't be included by `go mod vendor` because it's not a Go package.
[03:05:20] *** Joins: yoonkn (~user@175.197.208.79)
[03:06:55] <b0nn> WilliamH: Because CGO is involved Go has problems - firstly which C files get used for the target OS/arch; Go isn't a C compiler/processor, so it throws it's hands in the air
[03:07:11] <b0nn> it's its!
[03:08:48] *** Quits: justsomeguy (~justsomeg@user/justsomeguy) (Quit: WeeChat 3.4)
[03:09:17] *** Quits: orthoplex64 (~crm@70.120.0.94) (Ping timeout: 240 seconds)
[03:09:18] *** Joins: crm (~crm@70.120.0.94)
[03:09:44] <WilliamH> b0nn: Why does it work when you don't vendor though?
[03:10:46] <b0nn> TBH - I'm just guessing - but I'm thinking that the local C compiler that CGO calls is doing the heavy lifting
[03:13:50] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[03:16:05] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[03:18:13] *** Joins: orthoplex64 (~crm@70.120.0.94)
[03:19:54] *** Quits: crm (~crm@70.120.0.94) (Ping timeout: 272 seconds)
[03:21:49] <fizzie> I imagine it would work when you don't vendor because you get a copy of the entire source tree as a checkout.
[03:22:03] <fizzie> While the vendoring will, as mentioned, omit the directories that aren't Go packages.
[03:22:26] *** Quits: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald) (Ping timeout: 272 seconds)
[03:33:36] *** Joins: KirkMcDonald (~Kirk@python/site-packages/KirkMcDonald)
[03:39:41] <WilliamH> I just commented on the issue.
[03:42:18] <WilliamH> Unfortunately not vendoring isn't an option for our package manager.
[03:51:34] <fizzie> If you're looking for workaround, any sort of ad-hoc step to add the "missing" files into the vendor directory might be an (unfortunately brittle) option.
[03:52:09] <WilliamH> It would be nice if they fix it in the future too ;-)
[03:52:48] <WilliamH> I strongly suspect that our package manager team is not going to ever change their way of thinking about go et al.
[03:53:20] *** Joins: admin123 (~harrymore@ool-2f12f5b1.dyn.optonline.net)
[03:53:38] <fizzie> Not sure if those two comments were related.
[03:54:16] <WilliamH> Well, it would be nice if upstream go fixes this in the future so vendoring doesn't nuke things.
[03:54:57] <WilliamH> The other side of it is that in our package manager there's only one point in the build process where we have access to the network and that is to download the source tarball.
[03:55:17] <WilliamH> Other than that, the network is blocked off during the build.
[03:55:46] <fizzie> Yes, well, I was suggesting putting everything necessary into that tarball.
[03:56:04] <WilliamH> fizzie: How do I figure out what's missing though?
[03:56:33] <fizzie> Well, that *specific* error seemed clear enough.
[03:56:39] <WilliamH> "go mod vendor" is how I'm creating a secondary tarball that has all of the vendored data in it.
[03:57:11] *** Joins: Techcable (~Techcable@168.235.93.147)
[03:59:39] *** Quits: Ergo^ (~ergo@91.238.59.144) (Remote host closed the connection)
[04:00:12] *** Quits: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[04:00:16] <WilliamH> Then I download that secondary tarball and unpack the vendor directory into the right location.
[04:01:10] *** Joins: bigGopher (~dan@207.98.176.66)
[04:03:33] <fizzie> Yeah, my proposal was to augment that `go mod vendor` step to add the two missing directories in that secondary tarball.
[04:03:43] <fizzie> `go build -mod=vendor` works for me if I do that manually.
[04:05:15] <fizzie> (The two missing directories being ./vendor/github.com/ddevault/go-libvterm/{encoding,libvterm}, which `go mod vendor` drops because they're not Go packages, and cgo does not support code in subdirectories.)
[04:05:39] *** Joins: j3s (~j3s@cyberia.club/member/j3s)
[04:10:43] <fizzie> Alternatively, sounds like some people are using https://github.com/nomad-software/vend instead of `go mod vendor`, which at least would be a less "custom" workaround.
[04:11:57] *** Joins: X-Scale` (~ARM@31.22.162.17)
[04:13:24] *** Quits: X-Scale (~ARM@135.232.28.37.rev.vodafone.pt) (Ping timeout: 240 seconds)
[04:13:25] *** X-Scale` is now known as X-Scale
[04:15:24] *** Quits: rvalue (~rvalue@user/rvalue) (Ping timeout: 265 seconds)
[04:19:46] *** Joins: rvalue (~rvalue@user/rvalue)
[04:22:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[04:23:13] <WilliamH> Ok, I'll take a look at packaging that.
[04:25:50] <fizzie> To be clear, it's not needed when building, it's just needed for preparing the package. (But I imagine you'd want that to be automated too.)
[04:28:13] <WilliamH> fizzie: Package maintainers will have to use it when they prepare new packages or new versions of packages. Most of that is done manually.
[04:32:56] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[04:35:05] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[04:36:33] *** Quits: off^ (~off@50-202-219-146-static.hfc.comcastbusiness.net) (Remote host closed the connection)
[04:37:47] *** Joins: rcernin (~rcernin@124.190.132.36)
[04:38:48] *** Quits: j3s (~j3s@cyberia.club/member/j3s) (Remote host closed the connection)
[04:39:02] *** Quits: normen (~normen@p200300d71749cc0024fd90d4a307ad17.dip0.t-ipconnect.de) (Ping timeout: 240 seconds)
[04:39:06] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[04:46:01] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[04:46:16] *** Quits: R2robot (~R2robot@user/r2robot) (Quit: Pull the lever, Kronk.  Wrong leverrrrrrr!)
[04:47:38] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[04:48:12] *** Quits: goldfish (~goldfish@user/goldfish) (Ping timeout: 240 seconds)
[04:51:15] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Ping timeout: 256 seconds)
[04:52:05] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 256 seconds)
[04:54:32] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:54:48] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[04:55:13] *** Joins: R2robot (~R2robot@user/r2robot)
[04:55:43] *** Joins: rcernin (~rcernin@124.190.132.36)
[04:59:27] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:00:12] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Read error: Connection reset by peer)
[05:09:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[05:13:29] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[05:14:45] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[05:20:27] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[05:24:08] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Client Quit)
[05:24:22] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[05:28:55] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[05:33:30] *** Quits: Torr (~Torr@user/torr) (Quit: leaving)
[05:36:06] *** Joins: ejjfunky (~ejjfunky@125.164.20.98)
[05:38:36] *** Quits: haniaF (~haniaF@83.24.216.182.ipv4.supernova.orange.pl) (Ping timeout: 272 seconds)
[05:38:45] *** Joins: haniaF_ (~haniaF@83.24.224.152.ipv4.supernova.orange.pl)
[05:46:25] *** Quits: xb0o2 (~xb0o2@user/xb0o2) (Read error: Connection reset by peer)
[06:09:17] *** Quits: justAstache (~justache@user/justache) (Remote host closed the connection)
[06:10:48] *** Joins: justAstache (~justache@user/justache)
[06:12:22] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[06:14:02] *** Quits: nutzz (~nutzz@2a02:2f0e:5b01:9e00:b9c8:15d5:41bc:20ba) (Quit: Client closed)
[06:16:50] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:17:39] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:21:40] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[06:24:57] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Remote host closed the connection)
[06:26:03] *** Joins: ejjfunky0 (~ejjfunky2@125.164.16.18)
[06:40:21] *** Joins: j3s (~j3s@cyberia.club/member/j3s)
[06:41:50] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[06:49:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[06:50:32] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[06:54:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[06:55:37] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:56:14] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:07:44] *** Joins: Azem (~haise01@user/haise01)
[07:10:55] *** Quits: Emet-Selch (~haise01@user/haise01) (Ping timeout: 256 seconds)
[07:17:55] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[07:18:41] *** Joins: rcernin (~rcernin@124.190.132.36)
[07:19:02] *** Quits: rcernin (~rcernin@124.190.132.36) (Client Quit)
[07:35:14] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[07:54:55] *** Quits: adanwan_ (~adanwan@gateway/tor-sasl/adanwan) (Ping timeout: 240 seconds)
[07:55:09] *** Joins: adanwan (~adanwan@gateway/tor-sasl/adanwan)
[07:55:56] *** Quits: leonardo (~leonardo@user/leonardo) (Quit: WeeChat 3.4)
[07:57:24] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[08:14:50] *** Quits: bigGopher (~dan@207.98.176.66) (Quit: bigGopher)
[08:15:36] *** Joins: bigGopher (~dan@207.98.176.66)
[08:20:09] *** Joins: ekathva (~ekathva@n2gvphjzi3l3fwqfx-1.v6.elisa-mobile.fi)
[08:27:01] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[08:28:47] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[08:32:08] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[08:45:37] *** Quits: moonwiki (~moonwiki@152.97.181.247) (Ping timeout: 240 seconds)
[08:45:54] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[08:51:26] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[08:53:58] *** Quits: Compy (~compy@user/compy) (Remote host closed the connection)
[08:56:19] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:01:12] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:06:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[09:07:07] *** Quits: j3s (~j3s@cyberia.club/member/j3s) (Remote host closed the connection)
[09:12:27] *** Joins: mug3n (~mugen@gateway/tor-sasl/mugen)
[09:14:15] *** Quits: mugen (~mugen@gateway/tor-sasl/mugen) (Ping timeout: 240 seconds)
[09:17:25] *** Quits: Midjak (~Midjak@82.66.147.146) (Quit: This computer has gone to sleep)
[09:22:24] *** Joins: bluedust (~bluedust@103.148.21.74)
[09:36:18] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:39:02] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[09:39:16] *** Joins: rvalue (~rvalue@user/rvalue)
[09:39:41] *** Joins: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr)
[09:40:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[09:46:48] *** Quits: ejjfunky0 (~ejjfunky2@125.164.16.18) (Quit: Leaving)
[09:49:02] *** Joins: Fuzai (~quassel@50.54.159.160)
[09:53:29] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[09:53:33] *** Joins: rcernin (~rcernin@124.190.132.36)
[10:00:38] *** Joins: j3s (~j3s@cyberia.club/member/j3s)
[10:01:26] *** Joins: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru)
[10:03:20] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[10:11:25] *** Quits: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[10:11:34] *** Quits: rcernin (~rcernin@124.190.132.36) (Ping timeout: 272 seconds)
[10:13:05] *** Joins: rcernin (~rcernin@124.190.132.36)
[10:13:23] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 256 seconds)
[10:20:43] *** Joins: Fuzai (~quassel@50.54.159.160)
[10:24:49] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[10:27:39] *** Joins: gevreeen (~gevreeen@2001:470:67:326:7c6b:19ca:beb4:741f)
[10:28:57] *** Joins: noarb (~noarb@user/noarb)
[10:30:39] *** Joins: normen (~normen@pd9eecc5a.dip0.t-ipconnect.de)
[10:32:33] *** Joins: noarb- (~noarb@user/noarb)
[10:33:36] *** Quits: mickey8 (~user@user/mickey) (Remote host closed the connection)
[10:34:00] *** Joins: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr)
[10:34:05] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[10:34:52] *** Joins: mickey8 (~user@user/mickey)
[10:35:29] *** Quits: normen (~normen@pd9eecc5a.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[10:42:01] *** Joins: bluedust_ (~bluedust@89.238.130.70)
[10:45:41] *** Quits: bluedust (~bluedust@103.148.21.74) (Ping timeout: 256 seconds)
[10:49:38] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[10:49:49] *** Joins: fef (~thedawn@user/thedawn)
[10:52:20] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[10:53:23] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 256 seconds)
[10:54:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[10:55:50] *** Joins: rendar (~rendar@user/rendar)
[10:56:42] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[10:57:35] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[10:59:49] *** Joins: bluedust (~bluedust@103.148.21.74)
[11:03:15] *** Quits: bluedust_ (~bluedust@89.238.130.70) (Ping timeout: 256 seconds)
[11:04:31] *** Quits: crashrep (~crashrep@user/crashrep) (Quit: WeeChat 3.4)
[11:04:57] *** Quits: j3s (~j3s@cyberia.club/member/j3s) (Ping timeout: 256 seconds)
[11:09:40] *** Quits: bluedust (~bluedust@103.148.21.74) (Remote host closed the connection)
[11:21:08] *** Joins: tg (~tg@rockylinux/infra/tg)
[11:23:39] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[11:25:29] *** Joins: noarb (~noarb@user/noarb)
[11:28:28] *** Quits: tripfandango (~tripfanda@2a00:a040:19e:72a1:2c86:7fb3:3930:3639) (Read error: Connection reset by peer)
[11:29:05] *** Joins: noarb- (~noarb@user/noarb)
[11:30:00] *** Joins: tripfandango (~tripfanda@5.29.15.59)
[11:30:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 260 seconds)
[11:33:59] *** Joins: iryith1 (~iryith3@207.81-166-89.customer.lyse.net)
[11:34:01] *** Joins: _xor (~xor@dsl-50-5-233-169.fuse.net)
[11:35:17] *** Quits: iryith (~iryith3@user/iryith) (Ping timeout: 240 seconds)
[11:36:45] *** Joins: RhinosF1 (uid339563@miraheze/RhinosF1)
[11:39:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[11:43:24] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[11:44:40] *** Joins: noarb (~noarb@user/noarb)
[11:45:45] *** Quits: noarb- (~noarb@user/noarb) (Ping timeout: 256 seconds)
[11:56:19] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:00:36] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[12:01:02] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[12:03:37] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 256 seconds)
[12:20:21] *** Joins: han-solo (~han-solo@user/han-solo)
[12:21:05] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[12:21:06] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[12:24:56] *** Joins: ejjfunky2 (~ejjfunky@125.164.17.87)
[12:26:18] *** Joins: ejjfunky3 (~ejjfunky@125.164.20.45)
[12:26:53] *** Quits: ejjfunky (~ejjfunky@125.164.20.98) (Ping timeout: 256 seconds)
[12:29:23] *** Quits: ejjfunky2 (~ejjfunky@125.164.17.87) (Ping timeout: 256 seconds)
[12:31:44] *** Joins: mrig (~mrig@user/mrig)
[12:33:16] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[12:33:56] *** cp--- is now known as cp-
[12:38:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[12:53:11] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[12:54:01] *** Joins: Fuzai (~quassel@50.54.159.160)
[12:58:17] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[12:59:30] *** Quits: ejjfunky3 (~ejjfunky@125.164.20.45) (Quit: Leaving)
[13:00:26] *** Joins: ejjfunky (~ejjfunky@125.164.16.97)
[13:03:23] *** Joins: normen (~normen@p200300d71749cc0024fd90d4a307ad17.dip0.t-ipconnect.de)
[13:04:12] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 240 seconds)
[13:09:07] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:09:18] *** Quits: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[13:11:11] *** Joins: Atque (~Atque@user/atque)
[13:12:50] *** Joins: Fuzai (~quassel@50.54.159.160)
[13:13:41] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[13:16:09] *** Joins: vimal (~vimal@2a02:a210:9600:1f00:cf25:5fe2:fd13:9e52)
[13:18:15] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[13:22:01] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 245 seconds)
[13:25:19] *** Joins: Fuzai (~quassel@50.54.159.160)
[13:27:48] *** Quits: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr) (Ping timeout: 240 seconds)
[13:28:24] *** Joins: jespada (~jespada@148.252.133.30)
[13:30:06] *** Quits: kyshoc (~kyshoc@user/kyshoc) (Read error: Connection reset by peer)
[13:30:41] *** Joins: shtirlic (~shtirlic@95-55-25-160.dynamic.avangarddsl.ru)
[13:33:12] *** Joins: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net)
[13:33:12] *** Quits: kyshoc (~kyshoc@adsl-99-93-208-248.dsl.mtry01.sbcglobal.net) (Changing host)
[13:33:12] *** Joins: kyshoc (~kyshoc@user/kyshoc)
[13:33:51] *** Quits: jespada (~jespada@148.252.133.30) (Read error: Connection reset by peer)
[13:35:05] *** Quits: kcrk (~kcrk@user/kcrk) (Quit: http://quassel-irc.org - Chat comfortably. Anywhere.)
[13:35:35] *** Joins: kcrk (~kcrk@user/kcrk)
[13:39:27] *** Joins: fef (~thedawn@user/thedawn)
[13:42:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[13:43:41] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[13:47:17] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[13:58:46] *** Quits: dalek_caan (~Thunderbi@109-252-124-86.nat.spd-mgts.ru) (Quit: dalek_caan)
[13:59:35] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[14:01:48] *** Joins: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr)
[14:16:43] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[14:21:00] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[14:24:45] *** Quits: RhinosF1 (uid339563@miraheze/RhinosF1) (Quit: Connection closed for inactivity)
[14:25:29] *** Joins: arinov (~arinov@213.194.126.155)
[14:34:55] *** Quits: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[14:48:13] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[14:48:46] *** Quits: rcernin (~rcernin@124.190.132.36) (Quit: WeeChat 3.4)
[14:56:08] *** Joins: Atque (~Atque@user/atque)
[14:59:56] *** Joins: xb0o2 (~xb0o2@user/xb0o2)
[15:00:02] *** Quits: henry40408 (~henry4040@175.181.176.30) (Ping timeout: 260 seconds)
[15:00:22] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 272 seconds)
[15:01:48] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 240 seconds)
[15:03:03] *** Joins: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca)
[15:04:02] *** Joins: Midjak (~Midjak@82.66.147.146)
[15:05:52] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[15:10:37] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[15:15:50] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[15:22:49] *** Joins: henry40408 (~henry4040@175.181.176.30)
[15:28:43] *** Joins: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr)
[15:35:26] *** Joins: independent56 (~independe@2.26.38.138)
[15:40:36] *** Joins: jackneilll (~jackneill@86FF4560.dsl.pool.telekom.hu)
[15:41:35] *** Quits: jackneill (~jackneill@20014C4E18117700515436677E01F7A4.dsl.pool.telekom.hu) (Remote host closed the connection)
[15:48:17] *** Quits: Techcable (~Techcable@168.235.93.147) (Ping timeout: 256 seconds)
[15:50:27] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[15:56:49] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[15:56:49] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[15:56:49] *** Joins: tane (~tane@user/tane)
[15:58:55] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:02:21] *** Joins: stackbeard (uid543178@id-543178.uxbridge.irccloud.com)
[16:03:25] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[16:04:59] *** Joins: bluedust (~bluedust@103.148.21.74)
[16:16:05] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[16:20:26] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 250 seconds)
[16:22:28] *** Joins: resamvi (~resamvi@p200300f6170573004c07b28069335fd8.dip0.t-ipconnect.de)
[16:22:28] *** Quits: resamvi (~resamvi@p200300f6170573004c07b28069335fd8.dip0.t-ipconnect.de) (Changing host)
[16:22:28] *** Joins: resamvi (~resamvi@user/resamvi)
[16:24:49] <resamvi> I am planning to introduce sentinel errors in my package, because some functions can fail in different ways that need to be checked. But is this considered something bad?
[16:26:22] <mrig> Hello.
[16:26:36] <mrig> Will generics slow down the go compiler?
[16:27:53] <mrig> resamvi: I'm working on a nice communication protocol at the moment that will pass through the errors type. I'll let you know if it is a disaster, but seems like a great idea at the moment.
[16:28:35] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[16:28:47] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:29:17] *** Quits: independent56 (~independe@2.26.38.138) (Remote host closed the connection)
[16:29:36] *** Joins: independent56 (~independe@2.26.38.138)
[16:33:37] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:39:29] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[16:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[16:42:41] *** Quits: adip_ (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[16:42:41] *** Quits: adip (~adip@den37.neoplus.adsl.tpnet.pl) (Ping timeout: 256 seconds)
[16:48:34] <andlabs> sentinel errors are used in several places in the standard library
[16:48:53] <andlabs> and sometimes io.EOF is *the* sentinel for certain types of operations
[16:49:26] *** Joins: adip (~adip@den37.neoplus.adsl.tpnet.pl)
[16:49:35] *** Joins: adip_ (~adip@den37.neoplus.adsl.tpnet.pl)
[16:50:52] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:52:47] *** Joins: Fuzai (~quassel@50.54.159.160)
[17:03:53] *** Quits: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net) (Read error: Connection reset by peer)
[17:05:00] *** Joins: salem (~salem@pool-98-111-206-141.pitbpa.fios.verizon.net)
[17:06:32] *** Joins: Koje (~Kohe@46.12.229.55.dsl.dyn.forthnet.gr)
[17:07:49] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[17:08:05] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:08:22] *** Quits: Kohe (~Kohe@79.103.22.84.dsl.dyn.forthnet.gr) (Ping timeout: 260 seconds)
[17:10:24] *** Quits: fef (~thedawn@user/thedawn) (Remote host closed the connection)
[17:10:53] *** Joins: fef (~thedawn@user/thedawn)
[17:11:15] *** Quits: fef (~thedawn@user/thedawn) (Client Quit)
[17:13:51] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:20:26] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 252 seconds)
[17:23:17] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:27:28] *** Joins: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de)
[17:27:48] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[17:30:49] *** Quits: KainAlive (~KainAlive@ip5f5bd0bf.dynamic.kabel-deutschland.de) (Client Quit)
[17:32:24] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:36:05] *** Joins: Fuzai (~quassel@50.54.159.160)
[17:39:42] *** Joins: Torr (~Torr@user/torr)
[17:39:55] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[17:42:36] *** Joins: independent_ (~independe@2.26.38.138)
[17:43:22] *** Quits: han-solo (~han-solo@user/han-solo) (Quit: leaving)
[17:46:09] *** Quits: independent56 (~independe@2.26.38.138) (Ping timeout: 256 seconds)
[17:46:33] *** Joins: fef (~thedawn@user/thedawn)
[17:50:07] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[17:56:46] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[17:57:51] *** Joins: arkurious (~arkurious@user/arkurious)
[17:58:20] *** Joins: imm__ (~imm_@user/imm/x-3405860)
[17:58:20] *** Joins: danmurf (uid480399@user/danmurf)
[17:58:57] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 256 seconds)
[18:01:49] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[18:07:57] *** Joins: bluedust_ (~bluedust@185.248.85.10)
[18:11:01] *** Quits: bluedust (~bluedust@103.148.21.74) (Ping timeout: 240 seconds)
[18:14:52] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[18:15:38] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[18:16:55] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[18:17:17] *** Quits: tane (~tane@user/tane) (Ping timeout: 240 seconds)
[18:20:27] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 256 seconds)
[18:23:17] *** Joins: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk)
[18:29:43] *** Joins: fef (~thedawn@user/thedawn)
[18:33:39] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 250 seconds)
[18:42:41] *** Joins: whaley (~whaley@2603-6080-a301-33d1-b00a-caf2-c054-9cbb.res6.spectrum.com)
[18:44:27] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:47:37] *** Quits: knkay (~knkay@213.190.30.120) (Quit: ZNC 1.8.2 - https://znc.in)
[18:47:44] *** Joins: dalek_caan (~Thunderbi@109.252.124.86)
[18:49:41] <dostoyevsky2> https://gist.github.com/rpaul-stripe/82e34d107b0f8624ee46109a3d841990 <- go always has these 50 LoC examples for everything
[18:51:37] <geep> newb, I'd like to 'override' the default String() method for a type to add a prefix to the output string. Basically I want to return "PREFIX" + [default String()].  Any pointers to relevant docs? It is kind of similar to calling the superclass in OOP.
[18:54:05] *** Joins: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de)
[18:54:05] *** Quits: tane (~tane@dslb-002-201-234-175.002.201.pools.vodafone-ip.de) (Changing host)
[18:54:05] *** Joins: tane (~tane@user/tane)
[18:56:36] <bookworm> geep: you can't override the method of a type that is in another packgage
[18:57:17] <bookworm> what you can do is derive from the type, and then do whatever you want in the new type, however any caller needs to use your derived type then
[18:58:22] <dostoyevsky2> bookworm: could one even override functions that way?  or just add new functions in the new type?
[19:00:15] <bookworm> new function in the new type, meaning func (t newtype) String() string { return "prefix: " + t.derived.String() }
[19:00:17] <bookworm> things like that
[19:03:02] *** Joins: bluedust (~bluedust@103.148.21.74)
[19:06:03] *** Quits: whaley (~whaley@2603-6080-a301-33d1-b00a-caf2-c054-9cbb.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:06:44] *** Quits: bluedust_ (~bluedust@185.248.85.10) (Ping timeout: 272 seconds)
[19:07:38] *** Joins: Fuzai (~quassel@50.54.159.160)
[19:07:50] *** Joins: neurocyte0917090 (~neurocyte@IP-185238252134.dynamic.medianet-world.de)
[19:07:50] *** Quits: neurocyte0917090 (~neurocyte@IP-185238252134.dynamic.medianet-world.de) (Changing host)
[19:07:50] *** Joins: neurocyte0917090 (~neurocyte@user/neurocyte)
[19:13:02] *** Joins: whaley (~whaley@2603-6080-a301-33d1-b00a-caf2-c054-9cbb.res6.spectrum.com)
[19:13:14] <geep> And so consequently no way to custom format based  on %#v and %+v? Or is that a whole other thing?
[19:15:59] *** Quits: Fuzai (~quassel@50.54.159.160) (Ping timeout: 256 seconds)
[19:16:10] <geep> I see there is the GoStringer interface... took a bit of searching to find. Reading now.
[19:20:02] *** Quits: ejjfunky (~ejjfunky@125.164.16.97) (Ping timeout: 240 seconds)
[19:22:55] *** Joins: independent56 (~independe@2.26.38.133)
[19:23:12] *** Quits: independent_ (~independe@2.26.38.138) (Ping timeout: 272 seconds)
[19:30:06] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: You have been kicked for being idle)
[19:30:15] *** Quits: whaley (~whaley@2603-6080-a301-33d1-b00a-caf2-c054-9cbb.res6.spectrum.com) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[19:31:48] *** Quits: moog_ (~moog@107.126.53.115) (Remote host closed the connection)
[19:32:13] *** Joins: moog_ (~moog@107.126.53.115)
[19:32:48] *** Quits: yoonkn (~user@175.197.208.79) (Read error: Connection reset by peer)
[19:34:33] *** Joins: dsrt^ (~dsrt@50-202-219-146-static.hfc.comcastbusiness.net)
[19:42:37] *** Joins: shka (~herr@109.231.3.55)
[19:42:56] *** Joins: goldfish (~goldfish@user/goldfish)
[19:43:24] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[19:45:38] *** Joins: goldfish (~goldfish@user/goldfish)
[19:46:21] <seebs> there's a Formatter interface but it's sort of bad
[19:47:32] *** Quits: cync (~blah@192.180.187.81.in-addr.arpa) (Quit: No Ping reply in 180 seconds.)
[19:48:44] *** Joins: cync (~blah@192.180.187.81.in-addr.arpa)
[19:59:36] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[20:02:33] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[20:02:46] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[20:02:53] *** Joins: crashrep (~crashrep@user/crashrep)
[20:02:57] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[20:03:21] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[20:03:52] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[20:04:41] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[20:10:05] *** Quits: avemestr (~avemestr@static.125.80.9.5.clients.your-server.de) (Quit: WeeChat 3.2.1)
[20:10:41] *** Joins: jjido (~Denis@94.4.149.217)
[20:13:51] *** Quits: yonson (~yonson@2600:8801:d900::1962) (Remote host closed the connection)
[20:16:24] *** Joins: yonson (~yonson@2600:8801:d900::1962)
[20:19:20] <zwischenzug> Hello.  I've once again fallen victim to the "half-nil interface != nil" footgun (https://go.dev/play/p/jUMLWrKLo2W), and was curious whether anyone had proposed to change this for go2 (https://go.dev/blog/go2-here-we-come).  Didn't see anything in the issue tracker (https://github.com/golang/go/issues?q=label%3AGo2+nil+interface), but maybe I'm missing something?
[20:20:06] <zwischenzug> Has this ever been discussed before?
[20:21:08] *** Joins: avemestr (~avemestr@static.125.80.9.5.clients.your-server.de)
[20:21:25] *** Joins: Fuzai (~quassel@50.54.159.160)
[20:21:49] <bookworm> to be honest I'm not sure there's ever gonna be a go2 split... would be exactly as bad as with Python and nobody wants to do *that* again
[20:22:44] *** Quits: grantbow_ (~grantbow@tatooine.princessleia.com) (Quit: leaving)
[20:22:55] *** Joins: grantbow (~grantbow@tatooine.princessleia.com)
[20:24:16] <seebs> People have talked about wanting changes for it, but it's actually very hard to change cleanly.
[20:28:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[20:29:17] <zwischenzug> seebs, are you saying that people want changes to the "half nil interface"?  Do you mind pointing me to any discussion you've seen on it?
[20:29:24] <dostoyevsky2> zwischenzug: Why can one actually assign `var err error = merr'?
[20:29:44] <seebs> I don't remember where I've seen it, I just know it's a thing people get bitten by occasionally, but like. What would the change *look* like?
[20:29:58] <seebs> keep in mind that a non-nil-interface with a nil concrete-type value *may be a valid value*.
[20:30:22] <dostoyevsky2> > fatal error: panic while printing panic value
[20:31:17] <zwischenzug> dostoyevsky2, Are you asking why one would do this?  Or why it's permitted by the go language?
[20:32:57] <dostoyevsky2> zwischenzug: The code works because there is a `func (err *MyError) Error() string' ... I figured it out now
[20:33:30] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[20:35:06] <zwischenzug> seebs, My suggestion would be to treat an interface value with a nil concrete-type value as equivalent to nil.  Is there any example in std lib where a non-nil-interface with a nil concrete-type value is used as a valid value?  That pattern strikes me as a bit dubious (although it's certainly allowed by Go)
[20:36:42] <seebs> i don't know for sure about stdlib, stdlib is enormous and i haven't read all of it
[20:37:10] <seebs> but it's pretty easy to make things which are nil and obviously valid. a nil slice is a perfectly good slice.
[20:37:20] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[20:39:11] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[20:39:34] <zwischenzug> Agreed, but I'd expect a nil slice to always == nil (which it does).  But a "nil interface" != nil, which is the surprising part.
[20:39:53] <seebs> type MaybeErr int; func (m *MaybeErr) Error() string { if m != nil || *m < 0 || *m > errMax { return "unknown error" } return errStrings[*m] }
[20:40:22] <seebs> i don't think it's surprising, though, because there's a difference between "return nil" and "return a thing which has a specific type, but which happens to internally compare equal to nil"
[20:40:41] <seebs> Like, at this point, it's probably impossible to change because of Compatibility Promise.
[20:41:03] <seebs> but i'm also not convinced that the language where it worked that way would actually be a better language, because it would break a lot of types. right now, i *can* check for both things.
[20:41:23] <seebs> if i can't check for "we didn't even pick a type" distinct from "we have a type but the value of that type is nil", then i lose expressiveness.
[20:44:18] <dostoyevsky2> zwischenzug: I am browsing through Go, it's uncommon to have a `func (e *E) Error() string' ... they are value functions instead, the error object can't actually be nil, could that be a solution?
[20:45:32] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Read error: Connection reset by peer)
[20:45:36] *** Joins: zwischenzug_ (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[20:45:48] <dostoyevsky2> For example: https://github.com/golang/go/blob/master/src/net/http/h2_bundle.go#L1244
[20:46:10] *** Quits: zwischenzug_ (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Remote host closed the connection)
[20:46:27] *** Joins: zwischenzug_ (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[20:46:35] *** Quits: bluedust (~bluedust@103.148.21.74) (Remote host closed the connection)
[20:46:46] *** zwischenzug_ is now known as zwischenzug
[20:47:47] *** Quits: henry40408 (~henry4040@175.181.176.30) (Ping timeout: 256 seconds)
[20:49:03] <dostoyevsky2> and then you have code like this which does take a reference... seems like an accident waiting to happen: https://github.com/golang/go/blob/master/src/encoding/csv/reader.go#L73
[20:57:06] <zwischenzug> I don't think it's about expressiveness, just semantics.  "What does it mean that an interface is nil"  Intuitively, I'd think it means the concrete type is nil.  But the language specifies it as "the interface value has no concrete type".
[20:57:25] *** Quits: jjido (~Denis@94.4.149.217) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[20:58:18] <zwischenzug> This disconnect between "programmer intuition" and "language implementation" is what makes it somewhat dangerous.  I'd prefer the language implementation match programmer intuition, unless there's a really compelling reason otherwise.
[20:59:48] <zwischenzug> So I'm curious about these "compelling reasons".  Why would you ever want a "nil concrete value interface" to != nil?
[21:00:02] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Quit: Client closed)
[21:00:18] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[21:00:23] <seebs> because it's a valid thing of a type that implements the interface
[21:00:23] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[21:00:27] *** Quits: synfinatic (~synfinati@mail.synfin.net) (Quit: Goodbye cruel world!)
[21:00:33] <seebs> because for many types, a nil is a valid value that you can use
[21:00:42] *** Joins: synfinatic (~synfinati@mail.synfin.net)
[21:00:48] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[21:01:18] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[21:02:24] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:02:54] <zwischenzug> I'm not saying it's invalid.  I'm saying that it's valid, just that it should "== nil" when used in a comparison.
[21:05:17] <fizzie> How'd you test specifically for the condition where an interface is currently nil (i.e., no value of any type was set) then?
[21:06:56] *** Joins: zwischenzug_ (~zwischenz@45.231.169.155)
[21:07:08] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Read error: Connection reset by peer)
[21:07:10] *** zwischenzug_ is now known as zwischenzug
[21:07:42] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 272 seconds)
[21:10:21] <zwischenzug> fizzie, You could do a type switch/assertion, but if half-nil interface values == nil, you would lose the ability to easily check if the interface value was set.
[21:10:22] <seebs> the distinction of "== nil" is "do i actually have a thing or do i not have a thing"
[21:10:40] <seebs> if i have a half-nil interface type, i may validly have a thing that was intentionally provided to me with intent that i use it
[21:10:59] <seebs> as contrasted with a literal-nil interface type, which is a non-value that can't be used
[21:12:05] <zwischenzug> fizzie, But there's currently no easy way to check if my half-nil interface's concrete type is nil, which I'd argue is the vastly more common use (used in every err != nil statement)
[21:16:44] <zwischenzug> seebs, Good point.  Still, not sure if that's enough to forgive the non-obviousness that "half-nil interface != nil" as demonstrated in my play snippet.
[21:17:32] <seebs> So, there's an argument we have sometimes legally about things that *could* be used to commit crimes, and the usual answer we end up as is, the thing itself isn't illegal if it has valid non-crime uses.
[21:17:53] <seebs> Which is why you're allowed to own a device that can record video: Because it *could* be used legally, even if many uses of it are theoretically copyright infringement.
[21:18:19] <seebs> The thing is, in "if err != nil", what you *want* to check for is "do I have No Error here".
[21:18:32] <seebs> It's *possible* that a concrete-type-nil is still a *valid error* and should be considered an error and reported.
[21:19:54] <seebs> type errWithDetails string; func (s *errWithDetails) Error() string { if s != nil { return "unknown error" } return fmt.Sprintf("an error occurred; details %s", *s) }
[21:20:18] *** Joins: theo (~theo@user/theo)
[21:20:36] <seebs> in this case, if i return errWithDetails(nil) from a function returning error, that *is* an error. and if someone checking "if err != nil" gets told that it's nil, they're *not noticing the error*.
[21:21:13] <truehumandesign> Stdlib/Zerolog/Zap/Logrus? Which Logging Framework do you prefer and why?
[21:21:17] *** Quits: zwischenzug (~zwischenz@45.231.169.155) (Ping timeout: 240 seconds)
[21:21:25] <seebs> so, like. yeah, it's a design wart and you have to be warned about it, but i'm pretty sure that, in most cases, if i'm checking "if iface != nil", i want a concrete-typed nil value to be non-nil, and only a no-concrete-type to test as nil.
[21:21:47] <seebs> i hate all logging libraries but tend to use stdlib. i have ever used log15 and didn't hate it hugely.
[21:21:59] <seebs> i give logrus credit for the Nine Princes In Amber reference but i have no idea about its technical qualities
[21:24:27] *** Quits: mrus (~mrus@2001:19f0:5:1535:5400:3ff:fe7d:10ae) (Quit: Surfing the great wave off Kanagawa)
[21:28:15] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[21:28:16] <resamvi> truehumandesign: if stdlib had levels I'd use that that's why the next best thing was zerolog for me
[21:29:52] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 272 seconds)
[21:30:14] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:31:06] *** Quits: gevreeen (~gevreeen@2001:470:67:326:7c6b:19ca:beb4:741f) (Quit: gevreeen)
[21:34:31] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[21:36:12] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[21:37:36] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[21:38:08] <adip_> Hi, I have issue unmarshalling json file. Fields from first object work but objects and arrays inside it are blank.
[21:38:10] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[21:38:29] <adip_> Are there any obvious errors I could've made?
[21:38:55] <adip_> All my fields start with capital letter, it should work
[21:39:37] *** Quits: mikoto-chan (~mikoto-ch@213.177.151.239) (Ping timeout: 256 seconds)
[21:41:10] <ikke> Maybe you can show an example?
[21:42:03] *** Joins: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble)
[21:42:12] <adip_> My json file https://a.uguu.se//EySoHcL.json My code https://a.uguu.se//hcakmShH.go
[21:43:07] *** Joins: mikoto-chan (~mikoto-ch@213.177.151.239)
[21:44:12] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[21:45:51] *** Quits: Koje (~Kohe@46.12.229.55.dsl.dyn.forthnet.gr) (Ping timeout: 256 seconds)
[21:46:54] *** Kane is now known as Kane_
[21:48:55] <Torr> Hey
[21:49:13] <Torr> Any of u use a module proxy aside from Google's?
[21:50:17] <Torr> Or a mirror.
[21:51:56] *** Joins: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de)
[21:52:20] *** Kane_ is now known as Kane
[21:56:34] *** Quits: danmurf (uid480399@user/danmurf) (Quit: Connection closed for inactivity)
[22:02:14] *** Quits: ramblebamble (ramblebamb@gateway/vpn/protonvpn/ramblebamble) (Quit: WeeChat 3.4)
[22:06:44] <Torr> adip_: U have an unmarshalling error: parsing time "\"Sun Feb 27 13:16:35 2022\"" as "\"2006-01-02T15:04:05Z07:00\"": cannot parse "Sun Feb 27 13:16:35 2022\"" as "2006"
[22:07:48] <seebs> after many encounters with logging, i've concluded that in general, "log levels" are at best part of the right concept, "log topics" are more useful.
[22:09:46] *** Joins: jjido (~Denis@2a02:c7f:5c91:e700:d0d7:ba7d:5a5a:630f)
[22:10:36] *** Quits: paddymahoney (~paddymaho@cpe9050ca207f83-cm9050ca207f80.cpe.net.cable.rogers.com) (Ping timeout: 240 seconds)
[22:14:02] *** Quits: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr) (Ping timeout: 250 seconds)
[22:14:58] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Quit: Client closed)
[22:15:11] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[22:15:27] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[22:15:46] *** Joins: foobaz2124317 (~foobaz212@109.249.187.66)
[22:16:15] *** Quits: foobaz2124317 (~foobaz212@109.249.187.66) (Client Quit)
[22:23:03] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:24:58] *** Joins: Atque (~Atque@user/atque)
[22:27:25] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[22:30:19] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[22:31:08] <adip_> Torr: thanks you, it works now. :)
[22:31:18] <Torr> ^^
[22:34:28] *** Quits: __alex (~alex@ip5f5be2d7.dynamic.kabel-deutschland.de) (Ping timeout: 272 seconds)
[22:37:10] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[22:37:38] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Remote host closed the connection)
[22:37:56] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[22:40:16] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[22:40:52] *** Quits: tane (~tane@user/tane) (Quit: Leaving)
[22:42:11] *** Joins: tane (~tane@user/tane)
[22:46:35] *** Joins: stealth[] (~stealth]@2001:9e8:36da:c400:477:3762:6e32:dbc7)
[22:51:50] *** Joins: piwu (jtagcat@193.40.103.110)
[22:52:45] <piwu> How do I get the name of a var struct inside an another var struct? https://pastebin.com/ti4DgFzM
[22:52:45] <piwu> I'd like to get "x" and "y" as strings (using example[index])
[22:55:11] <fizzie> That's missing an `=` if you want to initialize the variable. See e.g. https://go.dev/play/p/erI-G7HxzdP
[22:55:17] *** imm__ is now known as imm_
[22:56:13] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[22:56:47] <piwu> yeah indeed, but how do I get x and y as strings (likely reflect something?)
[22:58:06] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 268 seconds)
[22:58:32] <piwu> https://go.dev/play/p/KnTUyPUz45T
[22:58:51] <piwu> ^ would like to not use the manual proxy of exampleAsString
[22:59:05] <piwu> I'm looking to get/set map via it
[23:00:32] <piwu> https://go.dev/play/p/eKB5x6yYZvt creating indexes for strings
[23:00:35] *** Quits: fef (~thedawn@user/thedawn) (Ping timeout: 240 seconds)
[23:00:46] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 245 seconds)
[23:00:53] *** Joins: rickybob (~rickybob@gateway/vpn/pia/rickybob)
[23:03:41] <piwu> flow is: 1. from var example, get what var is going to be used
[23:03:41] <piwu> for encode, it was example[i][z] (where z was int), returning a string
[23:03:41] <piwu> for decode: example[i]["string"] (not possible), so thus creating a map out of everything under example, providing indexes (map[string]int]
[23:03:41] <piwu> but I need a way to pre-generate, and later fetch map of example[i]
[23:03:48] *** Joins: Atque (~Atque@user/atque)
[23:04:09] <fizzie> I don't think Go reflection reaches that far. I'd even be slightly suspicious that the variable names like `x` and `y` exist any more at runtime, except perhaps in debug information. At any rate, what's stored in the [][]string are the []string values, not references to variables.
[23:04:12] <piwu> converting inside of var example to string, and use it as a map key sounds like the way to do it
[23:04:32] <piwu> so I'm better off copy-pasting and duplicating code?
[23:04:51] <piwu> ..and hoping the copies are edited together
[23:06:55] <fizzie> I imagine you're better off in sticking with string-keyed maps rather than package variables, if you want to refer to things using strings. But I can't say I'm following the entire thing, and have to go see about dinner instead.
[23:07:32] *** Joins: nicks (~igloo@213.205.242.174)
[23:08:02] *** Quits: nicks (~igloo@213.205.242.174) (Client Quit)
[23:08:31] *** Joins: nickds (~igloo@213.205.242.174)
[23:08:55] *** Joins: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx)
[23:11:35] *** Joins: leonardo (leonardo@user/leonardo)
[23:13:24] *** Quits: zwischenzug (~zwischenz@host-45-231-169-155.broadbandcancun.mx) (Ping timeout: 240 seconds)
[23:14:38] *** Quits: independent56 (~independe@2.26.38.133) (Ping timeout: 252 seconds)
[23:15:13] *** Quits: nickds (~igloo@213.205.242.174) (Remote host closed the connection)
[23:22:52] <b0nn> piwu: am curious about your problem, you are creating data and have no idea what the name of the variable is?
[23:23:27] <b0nn> or are you receiving data from another source and want to dynamically generate names for it?
[23:23:30] *** Joins: rogersm (~rogersm@90.166.180.250)
[23:27:10] *** Joins: absc (~absc@dynamic-adsl-94-34-165-20.clienti.tiscali.it)
[23:37:27] *** Joins: nuclearg1 (~nucleargr@user/nuclearg1)
[23:40:37] *** Quits: tyson2 (~user@bras-base-toroon0624w-grc-17-50-101-91-98.dsl.bell.ca) (Ping timeout: 240 seconds)
[23:42:08] *** Joins: boof (~rickybob@gateway/vpn/pia/rickybob)
[23:42:11] *** Quits: rickybob (~rickybob@gateway/vpn/pia/rickybob) (Ping timeout: 250 seconds)
[23:45:30] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 2.8)
[23:47:32] *** Quits: nuclearg1 (~nucleargr@user/nuclearg1) (Ping timeout: 240 seconds)
[23:50:02] <Mathisen> so im trying to learn go. im sooo confused how it works with multiple files. i have 2 files now main.go and hello.go im calling my hello function from main.go but it just sys that hello function is undelacred.
[23:50:24] <Mathisen> is not enough to use 2 files and use package main in both
[23:50:33] <Mathisen> using go 1.17.7
[23:50:34] <foobaz> are you running your program with "go run" by any chance?
[23:50:52] <Mathisen> yes i am
[23:51:13] <foobaz> now that you have multiple source files, it's probably time to switch to "go build" instead
[23:51:35] *** Joins: mrig (~mrig@user/mrig)
[23:51:35] <foobaz> but if you must keep using "go run", you will need to specify both source files, e.g. "go run main.go hello.go"
[23:51:39] *** Joins: __abbe__ (oxanilic@wireguard/tunneler/abbe)
[23:52:18] <__abbe__> o/
[23:53:00] *** Quits: dalek_caan (~Thunderbi@109.252.124.86) (Quit: dalek_caan)
[23:54:03] *** Quits: yonson (~yonson@2600:8801:d900::1962) (Remote host closed the connection)
[23:54:17] <__abbe__> I've a question. I've a struct which is saved/loaded from xml using xml tags, which works mostly fine. The thing that's missing is a constraint where I would like one of its fields which is also mapped to an XML attribute to be required, such that, if that field is absent in xml, it should return an error.
[23:55:03] <__abbe__> Am I right in understanding that to implement this behaviour, I need to implement Unmarshaler for my struct type ?
[23:55:16] *** Quits: foobaz2124317 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:55:31] *** Joins: foobaz2124317 (~foobaz212@152.37.103.80)
[23:55:33] *** Joins: yonson (~yonson@ip68-105-113-161.sd.sd.cox.net)
[23:56:20] <foobaz> another way would be to check the value of that field after unmarshaling it
[23:57:09] <foobaz> but if you unmarshal that type in several places, there would be duplicated code, and implementing Unmarshaler would centralize the check and eliminate duplication
[23:57:22] *** Joins: Techcable (~Techcable@168.235.93.147)
[23:57:29] *** Joins: Kohe (~Kohe@46.12.214.37.dsl.dyn.forthnet.gr)
[23:57:50] <__abbe__> thanks for confirming, foobaz, that's what I concluded too
