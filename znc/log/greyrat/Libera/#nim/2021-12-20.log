[00:07:13] <NimEventer> New thread by Gcao: Geniune question about JS backend support, see https://forum.nim-lang.org/t/8727
[00:57:16] <FromDiscord> <qb> Does nim have that somewhere? https://docs.rs/linux-raw-sys/0.0.5/linux_raw_sys/v5_11/general/constant.NR_exit.html
[00:58:06] <FromDiscord> <qb> Basically looking for the syscall table
[01:00:16] <FromDiscord> <Elegantbeef> https://github.com/def-/nim-syscall only package on nimble that comes up from `syscall`
[01:04:23] <FromDiscord> <qb> Yea that enum is what I'm looking for https://github.com/def-/nim-syscall/blob/master/src/linux_x86_64/nr.nim
[01:12:24] <FromDiscord> <TryAngle> is there a way to inherit in new-style concepts?
[01:12:48] <FromDiscord> <Elegantbeef> Nope they're sadly more limited
[01:13:06] <FromDiscord> <TryAngle> I see, and mixing them is not possible either?
[01:13:07] <FromDiscord> <Elegantbeef> I assume you want A is Y and procedures?
[01:14:48] <FromDiscord> <TryAngle> ah, mixing seems actually possible lol
[01:15:40] <FromDiscord> <TryAngle> In reply to @Elegantbeef "Nope they're sadly more": but the "old-style" will be kept right?
[01:15:54] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IT3
[01:16:08] <FromDiscord> <Elegantbeef> For now atleast it'll be kept
[01:16:58] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3IT4
[01:17:08] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IT5
[01:17:24] <FromDiscord> <TryAngle> thx
[01:17:52] <FromDiscord> <Elegantbeef> But you of course can always use the concept method, if you prefer(though might be more likely to hit a concept recurse limit)
[01:18:33] <FromDiscord> <TryAngle> In reply to @Elegantbeef "But you of course": oh, what is the limit?
[01:19:07] <FromDiscord> <Elegantbeef> I dont know the compiler will bitch at you when you reach it
[01:19:34] <FromDiscord> <TryAngle> hmmm I think the max that I will hit in the whole project will be 10
[01:19:39] <FromDiscord> <TryAngle> so I think that should be fine
[01:19:42] <FromDiscord> <Elegantbeef> Though if you're using new concepts that's less of an issue afaik, since the old method used `when compiles` internally
[01:19:53] <FromDiscord> <Elegantbeef> The new method uses more sensible reasoning afaik
[01:35:27] <FromDiscord> <jfmonty2> sent a code paste, see https://play.nim-lang.org/#ix=3ITb
[01:35:34] <FromDiscord> <jfmonty2> but I get an error because I'm attempting to redefine the `len` field
[01:36:04] <FromDiscord> <Elegantbeef> use `elif` instead of `when, when, else`
[01:36:24] <FromDiscord> <Elegantbeef> should be `when, elif, else`
[01:36:31] <FromDiscord> <jfmonty2> oh
[01:36:40] <FromDiscord> <jfmonty2> huh, didn't know that
[01:36:49] <FromDiscord> <qb> I'm trying to inject a syscall into a process with ptrace. I've found some usable cpp code but the nim version doesn't works yet. Am I missing something? https://play.nim-lang.org/#ix=3ITa
[01:37:53] <FromDiscord> <Elegantbeef> Ugh is today the day i read C++ 😛
[01:38:41] <FromDiscord> <Elegantbeef> Dont `cast` those valuse do `clong syscall_n` ....
[01:38:47] <FromDiscord> <Elegantbeef> or how ever you prefer that call
[01:39:39] <FromDiscord> <Elegantbeef> Also what compiler are you using?
[01:40:48] <FromDiscord> <metamuffin> https://youtu.be/B6ftyLpyono
[01:42:36] <FromDiscord> <qb> In reply to @Elegantbeef "Also what compiler are": gcc
[01:46:01] <FromDiscord> <qb> Gonna get some sleep. Gonna fix that casts. Thats the result of dumb copying cpp code to nim 😄
[01:46:18] <FromDiscord> <qb> (edit) "Gonna" => "I'm going to"
[01:55:35] <FromDiscord> <TryAngle> wait how do I import from a module that is above?↵import ../name↵seems to not be the correct one 😂
[01:55:43] <FromDiscord> <TryAngle> (edit) "above?↵import ../name↵seems" => "above?↵`import ../name`↵seems"
[01:56:11] <FromDiscord> <Elegantbeef> That is the proper way to import it
[01:56:48] <FromDiscord> <TryAngle> ah
[01:57:01] <FromDiscord> <TryAngle> ../↵is not compatible↵with [name1, name2]
[02:00:58] <FromDiscord> <Solitude> `".." ` as a workaround
[02:16:21] <FromDiscord> <TryAngle> does nim allow to define 3-ary operators?
[02:34:58] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3ITk
[02:53:01] <FromDiscord> <Elegantbeef> `SomeSignedInt` and `SomeUnsignedInt` exist btw
[02:54:30] <FromDiscord> <Elegantbeef> The issue is it's ambiguous
[02:54:41] <FromDiscord> <Elegantbeef> `3` can be both `uint` or `int` depending on context
[02:55:00] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ITp
[02:55:47] <FromDiscord> <Elegantbeef> @TryAngle\: ^
[02:58:59] <FromDiscord> <TryAngle> ah I see
[02:59:32] <FromDiscord> <TryAngle> so it would work in cases like this if I specifiy if it's int or uint when calling the Test function like you did?
[03:00:27] <FromDiscord> <TryAngle> but why does it work then if I manually implement all via a template?
[03:01:10] <FromDiscord> <Elegantbeef> Example?
[03:01:19] <FromDiscord> <Elegantbeef> The reason the float works btw is `1.0` is float64
[03:01:34] <FromDiscord> <Elegantbeef> Unless there is only a float32 proc i should say
[03:02:20] <FromDiscord> <TryAngle> sent a code paste, see https://play.nim-lang.org/#ix=3ITt
[03:03:40] <FromDiscord> <Elegantbeef> Not having a typeclass is my wager, with a type class it's ambiguous if it's SomeSignedInt or SomeUnsignedInt, without type class it prefers `int`
[03:04:38] <FromDiscord> <TryAngle> hmmm should I add a PR for that or is that intended behavior? looks a bit sus
[03:05:48] <FromDiscord> <Elegantbeef> I think it's just how it works, conversions arent done to typeclasses, it is confusing though
[03:05:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3ITv
[03:05:59] <FromDiscord> <Elegantbeef> I have to shovel some snow so if you have follow up questions it'll be delayed
[03:07:56] <FromDiscord> <TryAngle> so it's intended?
[03:15:12] <FromDiscord> <Elegantbeef> It maybe, i think when there are overloaded calls if all are typeclasses it wants explicit
[03:30:13] *** Quits: tk (~tk@ircpuzzles/staff/tk) (Quit: Well, this is unexpected.)
[03:30:39] *** Joins: tk (~tk@ircpuzzles/staff/tk)
[04:02:12] *** Quits: krux02 (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de) (Remote host closed the connection)
[04:33:17] *** Quits: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net) (Ping timeout: 240 seconds)
[04:42:23] *** Joins: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net)
[04:46:23] *** Quits: syl (~z@user/syl) (Quit: ZNC 1.8.2 - https://znc.in)
[04:47:01] *** Joins: syl (~z@user/syl)
[05:28:06] *** Quits: noeontheend (~noeonthee@c-73-110-212-91.hsd1.il.comcast.net) (Ping timeout: 268 seconds)
[05:56:43] <FromDiscord> <TryAngle> hmm I ran into a "weird issue"↵my goal↵implement something that requires division of two numbers but I want it for float and ints
[05:58:32] <FromDiscord> <TryAngle> I think a quick fix is implementing a "unified" div ↵or a div for floats lol
[05:59:15] <FromDiscord> <TryAngle> is there a reason that there is no `div` for floats?
[05:59:48] <FromDiscord> <Rika> because it makes no sense?
[06:02:41] *** Joins: rockcavera (~rc@192.12.113.71)
[06:02:41] *** Quits: rockcavera (~rc@192.12.113.71) (Changing host)
[06:02:41] *** Joins: rockcavera (~rc@user/rockcavera)
[06:03:12] <FromDiscord> <impbox [ftsf]> because there is `/` for floats
[06:03:20] <FromDiscord> <TryAngle> In reply to @Rika "because it makes no": o_O ↵I might misunderstand the intention of div
[06:03:45] <FromDiscord> <TryAngle> In reply to @impbox "because there is `/`": yes but `/` for ints produces floats
[06:03:49] <FromDiscord> <Rika> integer division when you do not want floats
[06:04:00] <FromDiscord> <impbox [ftsf]> `div` computes integer division
[06:04:11] <FromDiscord> <impbox [ftsf]> i guess you might want integer division of floats
[06:04:14] <FromDiscord> <Rika> there are scenarios where you do not want float division
[06:04:29] <FromDiscord> <impbox [ftsf]> and float division of ints
[06:04:37] <FromDiscord> <impbox [ftsf]> but both would use internal conversions
[06:05:09] <FromDiscord> <impbox [ftsf]> but you could define them if you want them
[06:05:17] <FromDiscord> <TryAngle> In reply to @impbox "i guess you might": I want to write an algorithm that works for ints aswell as for floats that requires a division that produces the respective type
[06:05:17] <FromDiscord> <impbox [ftsf]> but their use case is pretty niche
[06:05:36] <FromDiscord> <impbox [ftsf]> @TryAngle you can use `when x is SomeFloat:`
[06:05:41] <FromDiscord> <impbox [ftsf]> to use / else div
[06:05:43] <FromDiscord> <Rika> In reply to @TryAngle "I want to write": when T is int: ...div... elif T is float: .../...
[06:06:06] <FromDiscord> <TryAngle> ah true that works 🤔
[06:06:13] <FromDiscord> <impbox [ftsf]> but you might want to use / in either case and convert to float and back for ints
[06:06:18] <FromDiscord> <impbox [ftsf]> depending on your requirements
[06:09:37] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[06:11:55] <FromDiscord> <TryAngle> ok I guess I add "div" for floats lol
[06:28:34] <FromDiscord> <Rosen> you want it to return a int or a float?
[06:29:34] <FromDiscord> <Rika> In reply to @TryAngle "I want to write": this
[06:29:39] <FromDiscord> <Rika> ints for int, floats for float
[06:29:57] <FromDiscord> <Rika> In reply to @TryAngle "ok I guess I": i would highly suggest not doing this if you are releasing this as a library
[06:35:38] <FromDiscord> <TryAngle> In reply to @Rika "i would highly suggest": hmm ok I reconsider this then, I thought div would be same type while / is a conventient way to write fractions lol
[06:35:52] <FromDiscord> <TryAngle> (edit) "div" => "`div`" | "/" => "`/`"
[06:36:06] <FromDiscord> <Rika> well it isnt
[06:36:29] <FromDiscord> <Rika> what function are you making that needs int -> int and float -> float and ALSO does division?
[06:36:42] <FromDiscord> <TryAngle> when I want to use something like fmod from c (modulo for floats)↵nim has nothing like that right?↵so the simplest thing would just use importc progma?
[06:37:39] <FromDiscord> <leorize> @TryAngle\: I suppose you're looking for this? https://nim-lang.github.io/Nim/math#floorMod%2CT%2CT
[06:38:09] <FromDiscord> <Elegantbeef> nah `math.mod` is `fmod`
[06:38:26] <FromDiscord> <Elegantbeef> Like it's `fmod` imported from C's `math.h` 😀
[06:38:38] <FromDiscord> <Rika> speaking of which it's strange that we dont have fused divmod
[06:39:52] <FromDiscord> <TryAngle> I wanted to implement gcd and lcm↵I didn't know it was in std/math already lol
[06:40:08] <FromDiscord> <TryAngle> In reply to @leorize "<@147447489316913152>\: I suppose you're": just saw after I clicked on this link
[06:40:17] <FromDiscord> <Rika> please use the search box xd
[06:40:21] <FromDiscord> <Rika> saves a lot of time
[06:40:26] <FromDiscord> <Rika> <-- speaking from experience
[06:40:37] <FromDiscord> <TryAngle> I thought yeah this would be in std/algorithms if it was there
[06:40:49] <FromDiscord> <TryAngle> pressed control + f and didn't find
[06:41:03] <FromDiscord> <TryAngle> totally forgot std/math exists o_O
[06:41:25] <FromDiscord> <TryAngle> In reply to @Rika "please use the search": will do in futurel ol
[07:10:13] *** Quits: arkurious (~arkurious@user/arkurious) (Quit: Leaving)
[07:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[07:36:32] *** Joins: supakeen (~user@python/site-packages/supakeen)
[07:45:20] *** Quits: rockcavera (~rc@user/rockcavera) (Remote host closed the connection)
[07:59:56] <FromDiscord> <huantian> hey, what times.parse format do I use to parse this? `2019-11-12T16:37:40.000Z`↵The main part I'm not sure about is the .000Z at the end
[08:00:18] <FromDiscord> <huantian> is that miliseconds or utc offset
[08:03:51] <FromDiscord> <huantian> I think actually `"yyyy-MM-dd'T'HH:mm:ss'.'fffz"` should be correct
[08:06:18] <FromDiscord> <Rika> Milliseconds
[08:06:23] <FromDiscord> <Rika> Z denotes offset
[08:06:56] <FromDiscord> <Rika> https://en.m.wikipedia.org/wiki/List_of_UTC_time_offsets
[08:12:18] <FromDiscord> <huantian> Thank 🙏
[08:22:23] <FromDiscord> <Rika> I think this should be useful maybe
[08:22:24] <FromDiscord> <Rika> https://en.m.wikipedia.org/wiki/ISO_8601
[08:24:18] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[08:27:55] <FromDiscord> <huantian> ah cool
[08:43:09] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[10:00:57] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[10:47:43] <FromDiscord> <Michal58> I feel like it should be possible to return a proc without the return keyword.
[10:51:24] <FromDiscord> <Elegantbeef> What do you mean?
[10:54:17] *** Joins: PMunch (~PMunch@user/pmunch)
[10:57:39] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3IV0
[10:58:20] <FromDiscord> <Elegantbeef> Ah i dont use lambdas so make sense why this hasnt bothered me
[10:58:32] <FromDiscord> <Elegantbeef> Yea i mean it should be an R val so it should be returned
[11:00:12] <FromDiscord> <Elegantbeef> Seems it's a parse error afaict
[11:01:03] <FromDiscord> <Michal58> In reply to @Elegantbeef "Seems it's a parse": yeah, it doesn't parse
[11:01:29] <FromDiscord> <Michal58> it is possible to return a proc as the last expression just not in the way like above
[11:01:50] <FromDiscord> <Michal58> sent a code paste, see https://play.nim-lang.org/#ix=3IV2
[11:01:51] <FromDiscord> <Elegantbeef> Yea i know
[11:01:59] <FromDiscord> <Elegantbeef> I know this bug, it just doesnt bother me
[11:02:09] <FromDiscord> <Elegantbeef> you can also do `result =`
[11:11:06] <FromDiscord> <Elegantbeef> Do you know if there is an issue made?
[11:36:35] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: Leaving)
[11:37:21] *** Joins: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de)
[11:37:21] *** Quits: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de) (Changing host)
[11:37:21] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[11:41:25] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[11:50:35] <FromDiscord> <Michal58> I don't
[11:50:50] <FromDiscord> <Michal58> I wanted to ask here first before making it
[12:22:05] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVq
[12:23:36] <FromDiscord> <KatrinaKitten> (edit) "https://play.nim-lang.org/#ix=3IVq" => "https://play.nim-lang.org/#ix=3IVr"
[12:27:04] <FromDiscord> <Elegantbeef> What is `Parser[T]`?
[12:28:20] <FromDiscord> <KatrinaKitten> It's a `proc(input: string): ParseResult[T]`, where `ParseResult` is just an `object`.
[12:28:27] <FromDiscord> <Elegantbeef> Ok
[12:33:35] *** Joins: Vladar (~Vladar@46.162.2.53)
[12:35:24] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVt
[12:36:56] <FromDiscord> <KatrinaKitten> No, it still gives the same `undeclared identifier: 'input'` error.
[12:37:11] <FromDiscord> <Elegantbeef> `nim -v`?
[12:37:45] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVu
[12:38:03] <FromDiscord> <Elegantbeef> I mean the above work fine for me, so we'll need more i guess
[12:39:24] <FromDiscord> <KatrinaKitten> Here's a playground link for the full actual file. https://play.nim-lang.org/#ix=3IVv
[12:40:19] <FromDiscord> <Elegantbeef> Oh there is a second step of indirection
[12:40:35] <FromDiscord> <KatrinaKitten> The `s` func on its own seems to work, but `|` creates a compilation error because `input` isn't declared.
[12:43:55] <FromDiscord> <Elegantbeef> Well i removed some of what made it less readable to me but seems if you pass the type as a parameter instead of use it like a generic it seems to work https://play.nim-lang.org/#ix=3IVw
[12:44:13] <FromDiscord> <Elegantbeef> I also added `{.dirty.}` which makes the template not hygenic, but for this example it seems fine
[12:45:45] <FromDiscord> <KatrinaKitten> Hmm, very odd. That error is resolved now, need to do some finegling to clean up other issues now but I should be able to work it out now I'm past that roadblock. Thanks!
[12:46:01] <FromDiscord> <Elegantbeef> No problem
[12:46:59] <FromDiscord> <Elegantbeef> I think i see why with dirty one needs to pass a typedesc as a parameter, since it's dirty the T isnt injected as a symbol i assume
[12:47:31] <FromDiscord> <Elegantbeef> Nope that's not right 😀
[12:47:45] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVx
[12:47:56] <FromDiscord> <KatrinaKitten> After a little playing it works just fine continuing to use `{.inject.}` instead of `{.dirty.}`, so long as it's a `typedesc` instead of a generic.
[12:48:10] <FromDiscord> <Elegantbeef> Odd
[12:48:22] <FromDiscord> <Elegantbeef> I need to find the mechanism that causes this and see how easy it is to fix
[12:56:30] *** Quits: Lord_Nightmare (Lord_Night@user/lord-nightmare/x-3657113) (Ping timeout: 260 seconds)
[12:56:32] <FromDiscord> <Elegantbeef> Ah i've got it!
[12:57:17] <FromDiscord> <Elegantbeef> It's actually a generic issue not a template issue
[12:59:35] <FromDiscord> <Elegantbeef> Oh methinks i see the issue, it's attempting to semantically check this call and as such `echo(input)` fails as the generic messes with the logic
[12:59:51] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVy
[13:00:10] <FromDiscord> <KatrinaKitten> Interesting 🤔
[13:02:55] <FromDiscord> <qb> Elegantbeef is a great nim support bot 😄
[13:03:16] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVz
[13:03:20] <FromDiscord> <qb> Are you `ba0f3` on github btw?
[13:03:28] <FromDiscord> <Elegantbeef> We can actually make your code work
[13:03:30] <FromDiscord> <Elegantbeef> Me?
[13:03:34] <FromDiscord> <qb> Yups
[13:03:44] <FromDiscord> <Elegantbeef> Nah beef331
[13:03:53] <FromDiscord> <qb> Alright
[13:04:19] <FromDiscord> <Elegantbeef> Line 38 katrina https://play.nim-lang.org/#ix=3IVA
[13:04:31] <FromDiscord> <Elegantbeef> Forces `input` to remain open until the instantiation of the generic
[13:05:02] <FromDiscord> <Elegantbeef> I dont think it's possible to constrain like that
[13:05:41] <FromDiscord> <Elegantbeef> It makes 100% sense now why it errors and i think it's technically "right" though i dont know
[13:06:56] <FromDiscord> <Elegantbeef> Actually i'm wrong
[13:06:59] <FromDiscord> <Elegantbeef> You can constrain them
[13:07:10] <FromDiscord> <Elegantbeef> `[X, Y; Z: X or Y`
[13:07:23] <FromDiscord> <Elegantbeef> Or `X | Y` if you're a degenerate that likes farts or some jovial insult
[13:07:56] <FromDiscord> <KatrinaKitten> Ahhh the `;`, that makes sense. `mixin` seems to have the desired effect in this case, but I'm guessing is less typesafe?
[13:08:40] <FromDiscord> <Elegantbeef> Well `mixin` will allow selecting any variables into the scope
[13:08:54] <FromDiscord> <Elegantbeef> It's not a typesafe thing as a selecting of symbols
[13:09:27] <FromDiscord> <Elegantbeef> So basically when you instantiate a generic with `mixin` in it'll be capable of selecting any in scope, but it should always pick the one in the template
[13:09:42] <FromDiscord> <KatrinaKitten> Cool!
[13:10:37] <FromDiscord> <Elegantbeef> I'm apparently wrong, it'll crash if there is another input in scope
[13:10:53] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVD
[13:11:07] <FromDiscord> <Elegantbeef> Oh wait i'm dumb
[13:11:20] <FromDiscord> <Elegantbeef> There we go
[13:11:22] <FromDiscord> <Elegantbeef> That runs
[13:11:22] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVE
[13:11:38] <FromDiscord> <Elegantbeef> The input before was erroring since forcing the symbol open made it go "Yep this really doesnt work
[13:14:39] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVF
[13:15:10] <FromDiscord> <KatrinaKitten> Typecasts being there or not makes no apparent difference.
[13:15:12] <FromDiscord> <Elegantbeef> Ah maybe instantiating types with the parameters doesnt work
[13:16:30] <FromDiscord> <Elegantbeef> Uhh you wrote a custom `as`?
[13:17:02] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVG
[13:17:17] <FromDiscord> <KatrinaKitten> Ah, no, that was just my offhand guess. The documentation is a pain to search through.
[13:17:27] <FromDiscord> <Elegantbeef> Nah it's just `Parser[V] (t)`
[13:17:37] <FromDiscord> <Elegantbeef> Space isnt required that's me being dumb
[13:17:44] <FromDiscord> <Elegantbeef> Any form of call works for it
[13:18:18] <FromDiscord> <Elegantbeef> I have a hypothesis for the issue so give me a moment
[13:19:06] <FromDiscord> <KatrinaKitten> That gives the same error, even if I wrap it in `cast`. I'm guessing the issue is I'm trying to get it to infer the generics and it's freaking out at `V` not having an explicitly inferable definition, even though it has a constraint that should be inferable.
[13:19:49] <FromDiscord> <KatrinaKitten> I.e. I'm calling it as `doThing(<params>)` not `doThing[<types>](<params>)`.
[13:20:03] <FromDiscord> <KatrinaKitten> (edit) "`doThing[<types>](<params>)`." => "`doThing[<types>](<params>)`, in part because of operator syntax."
[13:20:44] <FromDiscord> <Elegantbeef> Hmm
[13:20:52] <FromDiscord> <Elegantbeef> Nah i dont think so
[13:21:06] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVI
[13:21:42] <FromDiscord> <Elegantbeef> Can you pass the full file again?
[13:22:34] <FromDiscord> <KatrinaKitten> Ah, see, I don't have any parameters that use `V` in their type. https://play.nim-lang.org/#ix=3IVJ
[13:23:01] <FromDiscord> <KatrinaKitten> It's only used in the output type and as a parameter to the `createParserTo` template, not in any of the input parameter types.
[13:23:02] <FromDiscord> <Elegantbeef> Yea that's the issue
[13:23:32] <FromDiscord> <Elegantbeef> You can just do `Parser[T or U]` i think
[13:23:54] <FromDiscord> <KatrinaKitten> That would work, but I also
[13:24:19] <FromDiscord> <KatrinaKitten> That would work, but on passing `T or U` to `createParserTo`, it complains that it's getting a type node rather than a `typedesc`.
[13:24:34] <FromDiscord> <Elegantbeef> I meant just as the return type
[13:25:06] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVK
[13:25:28] <FromDiscord> <Elegantbeef> Ah yea just do `Parser` than
[13:25:46] <FromDiscord> <Elegantbeef> sent a code paste, see https://play.nim-lang.org/#ix=3IVL
[13:27:12] <FromDiscord> <KatrinaKitten> Hmm... Let me play around a little and see if I can get it to work along those lines.
[13:27:12] <FromDiscord> <Elegantbeef> You cant really constrain return types that well
[13:27:21] <FromDiscord> <KatrinaKitten> If not, `mixin` may have to do, which is fine.
[13:27:48] <FromDiscord> <Elegantbeef> And btw `cast` is a lowlevel bit for bit cast
[13:27:55] <FromDiscord> <Elegantbeef> So it's almost never what you want
[13:28:48] <FromDiscord> <Elegantbeef> !eval echo cast[float](256)
[13:28:51] <NimBot> 1.264808053353591e-321
[13:28:55] <FromDiscord> <Elegantbeef> damn bridge
[13:28:58] <FromDiscord> <Elegantbeef> Wait it worked 😀
[13:29:16] <FromDiscord> <Elegantbeef> that's `echo cast[float](256)` since it got destroyed
[13:29:58] <FromDiscord> <KatrinaKitten> Yeah, it doesn't like me trying to work around it that way since I need to wrap that entire body in a template call, rather than just the result.
[13:34:23] <FromDiscord> <KatrinaKitten> sent a code paste, see https://play.nim-lang.org/#ix=3IVN
[13:34:44] <FromDiscord> <KatrinaKitten> (edit) "https://play.nim-lang.org/#ix=3IVN" => "https://play.nim-lang.org/#ix=3IVO"
[13:36:42] <FromDiscord> <Elegantbeef> Yea it's too late for me to think about this
[13:36:55] <FromDiscord> <KatrinaKitten> Mood. Thanks for all the help, I should probably head to bed myself.
[13:37:12] <FromDiscord> <Elegantbeef> I can only say "probably give up the idea of constraining result"
[13:37:22] <FromDiscord> <Elegantbeef> Just make it a `Parser` and call it a day there
[13:37:40] <FromDiscord> <Elegantbeef> It's a generic so it can only return 1 possible type at a time
[13:38:17] <FromDiscord> <KatrinaKitten> Yeah, I may just have to make it so combinators like `|` can't combine parsers which return differing types.
[13:38:49] <FromDiscord> <Elegantbeef> I mean if you want to combine them you'd just need to use a tagged union
[13:38:53] <FromDiscord> <Elegantbeef> Or as Nim calls them object variants
[13:39:10] <FromDiscord> <Elegantbeef> Anyway i'm out
[14:39:40] <NimEventer> New Nimble package! flower - A pure Nim bloom filter., see https://github.com/dizzyliam/flower
[14:48:25] *** Joins: xet7 (~xet7@user/xet7)
[15:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.4)
[15:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:20:15] <Amun-Ra> I like seeing "The `.raises` requirements differ." without disclosing any details
[17:10:08] *** Joins: rockcavera (~rc@192.12.113.71)
[17:10:08] *** Quits: rockcavera (~rc@192.12.113.71) (Changing host)
[17:10:08] *** Joins: rockcavera (~rc@user/rockcavera)
[17:30:10] *** Joins: arkurious (~arkurious@user/arkurious)
[17:41:38] <Amun-Ra> is there alternative that'd work here? https://play.nim-lang.org/#ix=3IWK
[17:43:59] <FromDiscord> <Yardanico> i don't think so
[17:44:04] <FromDiscord> <Yardanico> one alternative you can do is create a compile time seq
[17:44:08] <FromDiscord> <Yardanico> and then convert it into an array
[17:46:13] <Amun-Ra> thanks
[17:46:13] <FromDiscord> <tbrekalo> what could I try to build over a weekend to get a grasp on nim's metaprogramming? something with a heavy macro/template use?
[17:57:09] <FromDiscord> <haxscramper> In reply to @tbrekalo "what could I try": DSL for some repetitive task you have to do
[17:57:15] <FromDiscord> <haxscramper> Or just html generator DSL
[18:00:21] <FromDiscord> <exelotl> `use` keyword is a fun exercise: https://youtu.be/QM1iUe6IofM?t=2470
[18:04:04] <FromDiscord> <tbrekalo> Okay; thanks; Will try something like that 🙂
[18:08:50] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3IWZ
[18:12:15] <FromDiscord> <haxscramper> `when t is int`, `elif t is string`
[18:13:32] <FromDiscord> <sigmasd> That's nice, thanks!
[18:30:53] <Amun-Ra> I'm trying to convert seq to array (compile time) and I hit compiler error: https://play.nim-lang.org/#ix=3IX6
[19:08:46] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3IXp
[19:14:10] <FromDiscord> <SolitudeSF> you can write a for loop macro for that
[19:30:43] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3IXx
[19:38:31] <FromDiscord> <sigmasd> replacing r with r = newStmtList() seems to work
[19:44:52] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[19:49:10] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Remote host closed the connection)
[19:56:05] <FromDiscord> <sigmasd> sent a code paste, see https://play.nim-lang.org/#ix=3IXJ
[19:57:16] <arkanoid> Is nim forum broken?
[19:58:44] <nrds> <06Prestige99> It's up for me
[20:00:45] <FromDiscord> <SolitudeSF> try `ident Extra`
[20:00:57] <FromDiscord> <SolitudeSF> in quotes ofc
[20:10:41] <FromDiscord> <sigmasd> `proc \`ident Extra\`  ()=\` is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:10:55] <FromDiscord> <sigmasd> proc `ident Extra`  ()=↵is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:11:02] <FromDiscord> <sigmasd> proc \`ident Extra\`  ()=↵is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:11:07] <FromDiscord> <sigmasd> `proc `ident Extra`  ()=`↵is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:11:11] <FromDiscord> <sigmasd> proc `ident Extra`  ()=↵is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:11:18] <FromDiscord> <sigmasd> proc \`ident Extra\`  ()=↵is accepted by the compiler but its seems to ignore the extra and only quote the ident
[20:13:17] <FromDiscord> <SolitudeSF> well, you are already in a macro, you can always construct new identifier
[20:15:30] <FromDiscord> <sigmasd> nice! ident(fmt( works
[20:19:32] *** Quits: PMunch (~PMunch@user/pmunch) (Quit: Leaving)
[20:19:55] *** Quits: xet7 (~xet7@user/xet7) (Quit: Leaving)
[20:41:43] <FromDiscord> <kevin> Is there a preferred way to check if a seq is empty?
[20:41:59] <FromDiscord> <kevin> Python has `if(not myList):`
[20:42:23] <FromDiscord> <Rika> if sq.len == 0
[20:42:41] <FromDiscord> <kevin> gotcha. Wasnt' sure if there was a simpler way, thanks
[20:43:14] <FromDiscord> <Rika> nim isnt a supporter of "truthiness"
[20:43:32] <FromDiscord> <kevin> damn thats unlucky
[20:44:24] <nrds> <06Prestige99> I think it's easier to read
[20:47:21] <nrds> <06Prestige99> Truthiness can be very different between languages (see JavaScript) so I like that we just check the length in this case
[20:47:50] <nrds> <06Prestige99> E.g. in js if (myList) would be true if the array were empty
[20:48:13] <FromDiscord> <retkid> oii
[20:48:34] <FromDiscord> <retkid> i forget, how do i safe a hex string to a encoded file
[20:48:44] <FromDiscord> <retkid> like, not as text but as the binary of the file itself
[20:52:06] <FromDiscord> <retkid> i got it
[20:52:14] <FromDiscord> <retkid> (edit) "i got ... itas" 03added "it, had to parse" | "it, had to parseit ... " 03added "as a hex string <3"
[20:58:53] <FromDiscord> <retkid> when i convert ints to hex im getting leading 0s?
[20:58:58] <FromDiscord> <retkid> why/
[20:59:00] <FromDiscord> <retkid> (edit) "why/" => "why?"
[21:16:33] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3IXZ
[21:16:37] <FromDiscord> <hmmm> someone told me by I forgot 🤔
[21:18:52] *** Joins: tiorock (~rc@192.12.113.71)
[21:18:53] *** Quits: tiorock (~rc@192.12.113.71) (Changing host)
[21:18:53] *** Joins: tiorock (~rc@user/rockcavera)
[21:18:53] *** Quits: rockcavera (~rc@user/rockcavera) (Killed (zirconium.libera.chat (Nickname regained by services)))
[21:18:53] *** tiorock is now known as rockcavera
[21:18:59] <nrds> <06Prestige99> var mySeq
[21:19:09] <FromDiscord> <hmmm> ye ok but why
[21:19:11] <FromDiscord> <Rosen> declare it as var seq[string] to have the mutations persist out of the scope of the function, or make a var copy if you want to only mutate it in the function
[21:20:51] <FromDiscord> <IsaacPaul> In reply to @retkid "i forget, how do": Translate the string to a byte array and write that to a file
[21:21:37] <nrds> <06Prestige99> @hmmm variables are immutable by default
[21:22:20] <FromDiscord> <hmmm> yea but why, does Araq hates mutable variables or there is some important reason for it
[21:23:03] <FromDiscord> <IsaacPaul> In reply to @retkid "when i convert ints": https://nim-lang.org/docs/strutils.html#toHex%2CT↵The second parameter in toHex is the length
[21:24:19] <FromDiscord> <IsaacPaul> In reply to @hmmm "yea but why, does": immutable reduces cognitive load of the developer. You know that data can't change so you don't have to worry about it.
[21:24:43] <FromDiscord> <hmmm> hmm, this seems like a good reason
[21:25:57] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[21:31:01] *** Joins: xet7 (~xet7@user/xet7)
[21:36:57] <FromDiscord> <jfmonty2> fighting with the compiler about static generics\: https://play.nim-lang.org/#ix=3IY0
[21:37:12] <FromDiscord> <jfmonty2> this compiles and runs just fine, in particular it is correctly choosing the type for `len` based on `Size`
[21:38:03] <FromDiscord> <jfmonty2> but as soon as I try to define a proc that takes a `FixedSeq` as a parameter, it spits out a compile error "Cannot generate code for\: Size"
[21:42:36] <nrds> <06Prestige99> Don't you need to provide the generics?
[21:42:41] <nrds> <06Prestige99> e.g. proc doSomething(s: FixedSeq[8, int]) =
[21:44:03] <nrds> <06Prestige99> although the defeats the purpose
[21:44:09] <nrds> <06Prestige99> s/the/that/
[21:46:13] <nrds> <06Prestige99> https://play.nim-lang.org/#ix=3IY7
[21:47:22] <nrds> <06Prestige99> For some reason it semes to be printing uint8 on line 23 for me, but then uint16 on line 25 🤔
[21:47:29] <nrds> <06Prestige99> @jfmonty2 ^
[21:50:24] <FromDiscord> <Abi> sent a code paste, see https://play.nim-lang.org/#ix=3IYb
[21:50:43] <FromDiscord> <Abi> (edit) "https://play.nim-lang.org/#ix=3IYb" => "https://play.nim-lang.org/#ix=3IYc"
[21:51:26] <FromDiscord> <Yardanico> but splitLines returns either a seq[string] if it's a func or a string if it's an iterator
[21:51:31] <FromDiscord> <jfmonty2> Right, that's intentional because the size is 256 the second time↵(<@709044657232936960_nrds=5b=49=52=43=5d>)
[21:51:33] <FromDiscord> <Abi> (edit) "https://play.nim-lang.org/#ix=3IYc" => "https://play.nim-lang.org/#ix=3IYe"
[21:51:39] <FromDiscord> <Yardanico> if you want to call `pairs` on something it needs to have that function defined for it obviously
[21:51:45] <FromDiscord> <Yardanico> and there's no pairs for seq[string] or string
[21:52:03] <FromDiscord> <Yardanico> ah i see what you mean
[21:52:14] <FromDiscord> <Yardanico> yeah it's because in this case nim thinks splitLines is an iterator or something
[21:52:20] <FromDiscord> <Abi> In reply to @Yardanico "and there's no pairs": https://nim-lang.org/docs/iterators.html#pairs.i%2Cseq%5BT%5D ?
[21:52:42] <FromDiscord> <Yardanico> yeah that's the general pairs
[21:52:50] <nrds> <06Prestige99> @jfmonty2 oh I didn't see you were echoing fs and not fs2
[21:52:56] *** Joins: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de)
[21:52:56] *** Quits: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de) (Changing host)
[21:52:56] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[21:52:57] <FromDiscord> <Abi> which should apply to `seq[string]`, I'd have thought
[21:53:25] <FromDiscord> <Yardanico> well in your case it's weird
[21:53:31] <FromDiscord> <Yardanico> splitLines returns seq[string] _once_
[21:53:45] <FromDiscord> <Yardanico> and yeah i think it doesn't work in 2nd case because nim takes splitLines iterator overload
[21:53:56] <FromDiscord> <Yardanico> instead of the seq[string] overload
[21:54:05] <FromDiscord> <Abi> this is what I assumed, but I thought I'd check
[21:54:10] <FromDiscord> <Yardanico> just saying - if you need indexes, just use std/enumerate for iterators :)
[21:54:12] <FromDiscord> <krisppurg> Has anyone used jsony?#
[21:54:18] <FromDiscord> <Yardanico> @Solitude has
[21:54:20] <FromDiscord> <krisppurg> (edit) "jsony?#" => "jsony?"
[21:54:22] <FromDiscord> <Yardanico> In reply to @0xAb1 "this is what I": https://nim-lang.org/docs/enumerate.html
[21:54:34] <FromDiscord> <Abi> that's weird though, I feel like it should have worked like in part two
[21:54:51] <FromDiscord> <Yardanico> sent a code paste, see https://play.nim-lang.org/#ix=3IYj
[21:55:07] <FromDiscord> <Yardanico> and this is more efficient too
[21:55:11] <FromDiscord> <Abi> gahhh i never liked `enumerate` in Python, it's always felt somewhat cumbersome lol
[21:55:19] <FromDiscord> <Yardanico> since you don't need to preallocate a new seq for storing split strings
[21:55:27] <FromDiscord> <Abi> either way - ty for your help!
[21:56:01] <FromDiscord> <Abi> (edit) "it" => "part two" | 04removed "like in part two"
[21:59:06] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 256 seconds)
[22:02:48] *** Joins: krux02__ (~krux02@p200300e8172499004cdf065c4ed80e7b.dip0.t-ipconnect.de)
[22:06:50] *** Joins: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de)
[22:06:50] *** Quits: neurocyte0132889 (~neurocyte@IP-045136168122.dynamic.medianet-world.de) (Changing host)
[22:06:50] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[22:06:56] <FromDiscord> <exelotl> In reply to @IsaacPaul "immutable reduces cognitive load": I like this succinct explanation ^^
[22:12:14] <FromDiscord> <krisppurg> sent a code paste, see https://play.nim-lang.org/#ix=3IYk
[22:12:19] <FromDiscord> <krisppurg> sorry for huge message
[22:13:38] <FromDiscord> <theangryepicbanana> it probably expects an array of flags rather than a number representing a bitset
[22:13:47] <FromDiscord> <theangryepicbanana> (edit) "a bitset" => "bitflags"
[22:14:11] *** Joins: tiorock (~rc@192.12.113.71)
[22:14:11] *** Quits: tiorock (~rc@192.12.113.71) (Changing host)
[22:14:11] *** Joins: tiorock (~rc@user/rockcavera)
[22:14:11] *** rockcavera is now known as Guest6759
[22:14:11] *** Quits: Guest6759 (~rc@user/rockcavera) (Killed (strontium.libera.chat (Nickname regained by services)))
[22:14:11] *** tiorock is now known as rockcavera
[22:14:48] <FromDiscord> <Yardanico> In reply to @krisppurg "So, I was looking": i think it's fair to just ping treeform or open an issue in jsony so he can respond quicker
[22:15:38] <FromDiscord> <Yardanico> also I don't understand why do you use `JsonNode` if you want to use jsony and have better performance
[22:16:00] <FromDiscord> <Yardanico> ah, to change public_flags later I guess
[22:18:37] <FromDiscord> <krisppurg> @treeform
[22:20:49] <FromDiscord> <krisppurg> In reply to @Yardanico "also I don't understand": well if I do also change it to string, I would have to go through parts where I call `.newUser` on other files and it would be a long tedious process to change since they are called commonly.
[22:21:02] <FromDiscord> <Yardanico> have you tried packedjson at least though?
[22:21:03] <FromDiscord> <krisppurg> (edit) "In reply to @Yardanico "also I don't understand": well if I do also change it to string, I would have to go through parts where I call `.newUser` on other files and it would be a long tedious process to change ... since" 03added "the json to string"
[22:21:07] <FromDiscord> <krisppurg> packedjson?
[22:21:10] <FromDiscord> <Yardanico> yes?
[22:21:16] <FromDiscord> <Yardanico> https://github.com/Araq/packedjson
[22:21:47] <FromDiscord> <Yardanico> also why specifically optimize json? is that the slowest part of dimscord?
[22:22:25] <FromDiscord> <krisppurg> not just optimising but to shorten objects.nim
[22:22:36] <FromDiscord> <krisppurg> since it is getting repetitive and long
[22:22:49] <FromDiscord> <Yardanico> i thought you were already using json.to?
[22:23:07] <FromDiscord> <krisppurg> json.to is not the best
[22:23:12] <FromDiscord> <krisppurg> I do use at some
[22:23:18] <FromDiscord> <krisppurg> (edit) "I do use at some ... " 03added "parts of the code"
[22:23:24] <FromDiscord> <Yardanico> In reply to @krisppurg "json.to is not the": you can create custom procs for some types too
[22:23:35] <FromDiscord> <krisppurg> wdym
[22:23:37] <FromDiscord> <Yardanico> https://nim-lang.org/docs/jsonutils.html
[22:23:41] <FromDiscord> <Yardanico> if you mean you can'
[22:23:46] <FromDiscord> <Yardanico> (edit) "can'" => "can't use it with set[Type]"
[22:26:05] <FromDiscord> <treeform> In reply to @krisppurg "<@!107140179025735680>": Give me a small example and i'll figure it out. I think set[Foo] expects [1,2,3] not 6. But one can write a custom hook for set[UserFlags] thats bit based?
[22:28:19] <FromDiscord> <treeform> I need sample of your json and your nim object
[22:30:08] <FromDiscord> <krisppurg> bare with me in a sec
[22:30:19] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[22:31:03] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3IYu
[22:31:27] <FromDiscord> <treeform> I can write one for you if you provide the more info
[22:32:08] <FromDiscord> <krisppurg> https://play.nim-lang.org/#ix=3IYv
[22:32:17] <FromDiscord> <krisppurg> here is minimal example
[22:40:32] <FromDiscord> <retkid> alright so
[22:40:52] <FromDiscord> <retkid> im generating around 37324800000 or 37 billion random numbers between 0 and 255
[22:41:03] <FromDiscord> <retkid> is there anyway to speed that up?
[22:42:14] <FromDiscord> <retkid> well holy shit my computer doesn't have enough space for this data
[22:45:23] <nrds> <06Prestige99> Could do it in parallel but idk what your use case is
[22:45:57] <FromDiscord> <retkid> i guess
[22:46:02] <FromDiscord> <retkid> race conditions be crazy tho
[22:46:18] <nrds> <06Prestige99> What race conditions?
[22:46:32] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3IYx
[22:46:35] <FromDiscord> <treeform> But am not sure your cast to flags it correct
[22:46:42] <FromDiscord> <treeform> how is it supposed to work?
[22:46:59] <FromDiscord> <treeform> set is an array to nim? you can't just cast a number to it?
[22:47:00] <FromDiscord> <retkid> anyway, the nim side of the equation is the least bottlenecked
[22:47:47] <FromDiscord> <treeform> In reply to @krisppurg "https://play.nim-lang.org/#ix=3IYv": https://play.nim-lang.org/#ix=3IYz
[22:48:17] <FromDiscord> <hmmm> sent a code paste, see https://play.nim-lang.org/#ix=3IYA
[22:48:27] <FromDiscord> <hmmm> oh noes it didn't format! 😦
[22:49:07] <FromDiscord> <treeform> In reply to @krisppurg "https://play.nim-lang.org/#ix=3IYv": I don't think your flag format can be decomposed like this. You have flags=256 but your enums are not power of 2, so they can't be packed into an integer C style...
[22:49:16] <FromDiscord> <krisppurg> In reply to @treeform "how is it supposed": user flags is bitwise.
[22:49:23] <FromDiscord> <treeform> but your enums are not?
[22:49:29] <FromDiscord> <krisppurg> they are
[22:49:39] <FromDiscord> <krisppurg> just doesn't look like it
[22:50:03] <FromDiscord> <krisppurg> ufHouseBravery is the same as saying 2^6
[22:50:08] <FromDiscord> <krisppurg> (edit) "ufHouseBravery ... is" 03added "= 6"
[22:50:24] <FromDiscord> <treeform> ufNone is 0,  ufDiscordEmployee is 1,    ufPartneredServerOwner is 2, ufHypesquadEvents, is 3
[22:50:34] <FromDiscord> <krisppurg> well technically yes
[22:50:42] <FromDiscord> <treeform> 2^6 is 64 ?
[22:50:46] <FromDiscord> <treeform> not 6
[22:50:52] <FromDiscord> <krisppurg> yes
[22:51:23] <FromDiscord> <krisppurg> if you do cast[uint]({ufHouseBravery})
[22:51:40] <FromDiscord> <treeform> well you are casting a set which is an array?
[22:51:46] <FromDiscord> <Solitude> its not an array
[22:52:02] <FromDiscord> <Solitude> bitarray i guess
[22:52:38] <FromDiscord> <Solitude> whats wrong with doing that? thats the data he expects
[22:52:54] <FromDiscord> <treeform> if it works it works, I just did not know sets worked like this
[22:53:17] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 240 seconds)
[22:54:22] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[22:54:35] <FromDiscord> <treeform> the more you know!
[22:54:37] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3IYE
[22:54:45] <FromDiscord> <treeform> Then the code I posted earlier is correct.
[22:54:54] <FromDiscord> <treeform> https://play.nim-lang.org/#ix=3IYz
[22:57:01] *** Quits: joshbaptiste (~josh@2001:470:1f07:4d5:24::c2b5) (Ping timeout: 245 seconds)
[22:58:52] <FromDiscord> <krisppurg> also treeform is there any other examples for your jsony library? I've read your readme btw
[22:58:53] *** Joins: joshbaptiste (~josh@192.210.151.34)
[22:59:00] <FromDiscord> <krisppurg> (edit) "your" => "the"
[23:00:06] <FromDiscord> <krisppurg> and what does the argument `i` in `parseHook` supposed to represent?
[23:04:02] <FromDiscord> <retkid> whats this thing with genetic tyes?
[23:04:22] <FromDiscord> <retkid> nvm
[23:04:28] <FromDiscord> <retkid> misnomer
[23:06:34] <FromDiscord> <krisppurg> @treeform?
[23:13:05] <FromDiscord> <Solitude> current position of parser
[23:13:19] <FromDiscord> <Solitude> @krisppurg
[23:13:44] <FromDiscord> <krisppurg> something like how many chars left?
[23:13:55] <FromDiscord> <Solitude> something like which character is next
[23:14:05] <FromDiscord> <treeform> In reply to @krisppurg "and what does the": index in into the string, just pass it through
[23:15:29] <FromDiscord> <krisppurg> alright
[23:18:36] *** Joins: Lord_Nightmare (~Lord_Nigh@user/lord-nightmare/x-3657113)
[23:29:56] *** Quits: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com) (Quit: Ping timeout (120 seconds))
[23:30:14] *** Joins: Onionhammer (~onionhamm@23-88-146-29.fttp.usinternet.com)
[23:35:53] *** Quits: Vladar (~Vladar@46.162.2.53) (Quit: Leaving)
[23:38:22] *** Joins: neurocyte0132889 (~neurocyte@user/neurocyte)
[23:38:37] *** Quits: noeontheend (~noeonthee@207.237.194.194) (Ping timeout: 240 seconds)
[23:46:47] <FromDiscord> <krisppurg> In reply to @treeform "I got everything to": wait what what if flags in json were strings like `"512"` or `"256"`
[23:47:05] <FromDiscord> <treeform> then parse it as a string and cast?
[23:47:18] <FromDiscord> <krisppurg> in parseHook?
[23:48:03] <FromDiscord> <treeform> yeah, here you go: https://play.nim-lang.org/#ix=3IYR
[23:48:26] *** Joins: noeontheend (~noeonthee@207.237.194.194)
[23:48:33] <FromDiscord> <treeform> sent a code paste, see https://play.nim-lang.org/#ix=3IYT
[23:48:57] <FromDiscord> <treeform> basically says when you need a `set[UserFlags]`, parse it as a string first, then cast/parseInt it.
[23:49:01] <FromDiscord> <krisppurg> Well I want it as parseBiggestInt, but thanks I got the gist of it I think
[23:49:10] <FromDiscord> <treeform> yeah that would work
[23:50:30] <FromDiscord> <treeform> For json its very common to encode things in strings
[23:50:49] <FromDiscord> <treeform> timestamps, urls, addresses, emails etc....
[23:51:04] <FromDiscord> <treeform> so you can parse then as a string, then convert to a richer type
[23:53:46] <FromDiscord> <krisppurg> interesting
[23:56:18] <FromDiscord> <hmmm> jsony is gud stuff treeformy, I was amazed when the first time I used it it worked at first try and been a fan ever since 💪
