[00:01:06] <cbreak> CarloWood: how is a fuzzy bool better than one that returns true or false exactly?
[00:01:23] *** Joins: meicceli (meicceli@kapsi.fi)
[00:01:24] <cbreak> is it just semantic annotation, or additional guarantees?
[00:02:25] <cbreak> (or, compared to an atomic<bool> is probably more appropriate)
[00:04:41] <CarloWood> In combination with the checks like is_transitory_true() or is_momentary_false(), you can guarantee that you are taking to expected/right action without looking at the value of the fuzzy boolean. At that point it is still just semantic I guess (since in practise I really only have two valued variables), but you CAN do also boolean arithmetic with multiple such (fuzzy) booleans and still do the right thing.
[00:05:22] <CarloWood> taking the* expected..
[00:06:12] <cbreak> In machine learning, we're sometimes working with probabilities / probability distributions
[00:06:15] <rpav> so it does nothing different, but it's more complicated
[00:06:20] <cbreak> but this seems different
[00:06:39] <CarloWood> It doesn't have anything to do with probability no.
[00:06:45] <CarloWood> That is...
[00:07:01] <CarloWood> I use it a lot for choosing the right "fast path".
[00:07:20] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[00:07:21] <CarloWood> Maybe fuzzy isn't the right word.
[00:07:41] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[00:08:23] <CarloWood> But anyway, I read a FuzzyBool and then when I see wasFalse it is at least likely that it will stay false for a while - so then I can assume it will be in the near future and enter a code path that will be efficient when it is.
[00:08:31] <CarloWood> Kinda like a pipeline prediction.
[00:08:35] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 250 seconds)
[00:08:46] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[00:08:46] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:08:53] <CarloWood> Then inside I lock a mutex (and other "expensive" things) and test the boolean again.
[00:09:49] <CarloWood> In most cases it would still be false, so then I did the right thing; you could call that probability I guess.  Hence (at the top of the linked file) I also call wasFalse "Unlikely" and wasTrue "Likely".
[00:10:27] <CarloWood> But the more important use is to make sure things are thread-safe and there aren't any race conditions.
[00:10:41] <CarloWood> (pure semantics in that case)
[00:10:50] <cbreak> an atomic<bool> that gives you false or true also just means that it was false or true when you read it, and it could have changed since then.
[00:11:11] <cbreak> hmm...
[00:11:16] <CarloWood> https://github.com/CarloWood/ai-utils/blob/master/AtomicFuzzyBool.h
[00:11:23] <CarloWood> We have one for atomic too :P
[00:13:59] *** Joins: badone (~badone@209.132.189.136)
[00:14:40] *** Quits: AmR (~AmREiSa@156.199.223.24) (Ping timeout: 264 seconds)
[00:14:58] <CarloWood> cbreak: here is an example where it is used (I just picked any): https://github.com/CarloWood/ai-statefultask/blob/master/AIStatefulTaskMutex.h#L96
[00:16:02] <CarloWood> Basically that page of comment is compressed in the returned value.. That helps to make code more robust :)
[00:18:59] *** Quits: paul424 (~tom@ip-31-0-126-244.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:19:24] <cbreak> this sequence of operations doesn't look threadsafe at a first glance :/
[00:20:18] <cbreak> the comments probably explain why it is
[00:22:32] <CarloWood> It would be a nightmare to have a lot of code like this with bugs, so I always make sure it really works and I will never have to look at it again.
[00:23:06] <rpav> ðŸ¤”
[00:23:07] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[00:23:35] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[00:23:35] *** Quits: dld (~dld@2620:6e:6000:2900:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[00:23:46] <cbreak> if I wanted a threadsafe queue, I'd probably use compare-exchange in some form. Or mutexes :)
[00:24:31] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (Ping timeout: 268 seconds)
[00:24:45] <CarloWood> The algorithm isn't mine.
[00:25:39] *** Joins: KombuchaKip (~kip@192.252.230.5)
[00:25:53] <CarloWood> (but I did check it)
[00:28:48] <CarloWood> I think it was based on this: https://www.1024cores.net/home/lock-free-algorithms/queues/intrusive-mpsc-node-based-queue
[00:29:25] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[00:30:06] <CarloWood> And then fixed by me to use weakly order atomics etc... that guy uses 'volatile' at most lol.
[00:30:32] <cbreak> :/
[00:31:05] <cbreak> I wouldn't trust anyone who thinks volatile is related to thread safety, without writing hardware and compiler specific code
[00:32:02] <CarloWood> I am sure he wrote it before the C++ memory model existed.
[00:33:49] <CarloWood> As you might know (at least, I mentioned it before), I have spent a FULL year on studying the C++ memory model. Doing nothing else. I am very disappointed about what did stuck, but at least I can say that was pretty much a real expert ;).
[00:34:39] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 256 seconds)
[00:34:45] *** Quits: Simplar (~Simplar@188.163.92.225) (Quit: Going offline, see ya! (www.adiirc.com))
[00:34:57] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[00:35:02] *** Quits: SuperNintendoSUX (~sjw@69.206.48.64) (Remote host closed the connection)
[00:36:14] *** Joins: SuperNintendoSUX (~sjw@69.206.48.64)
[00:36:46] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[00:37:43] <rpav> https://thumbs.gfycat.com/DeadlyUniqueAiredale-size_restricted.gif
[00:38:06] *** Quits: sysctl (~user@88.215.77.255) (Quit: Konversation terminated!)
[00:45:33] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:45:38] *** Quits: meator (~meator@user/meator) (Quit: Leaving)
[00:51:28] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[00:53:07] *** Quits: proller (~p@2a02:6b8:b081:8813::1:21) (Ping timeout: 252 seconds)
[00:55:16] *** Quits: udet (~udet@ve603.venus.servdiscount-customer.com) (Ping timeout: 265 seconds)
[00:55:29] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 252 seconds)
[01:10:14] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[01:10:14] *** Quits: Raziel (~Raziel@user/raziel) (*.net *.split)
[01:10:14] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (*.net *.split)
[01:10:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[01:10:14] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[01:10:14] *** Quits: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de) (*.net *.split)
[01:10:14] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (*.net *.split)
[01:10:14] *** Quits: Colt (~Colt@user/colt) (*.net *.split)
[01:10:14] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (*.net *.split)
[01:10:14] *** Quits: letto2 (~letto@188.25.118.240) (*.net *.split)
[01:10:14] *** Quits: Burgundy (~yomon@79.115.213.171) (*.net *.split)
[01:10:14] *** Quits: plastico (~plastico@neomutt/plastico) (*.net *.split)
[01:10:14] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (*.net *.split)
[01:10:14] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[01:10:14] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[01:10:15] *** Quits: KombuchaKip (~kip@192.252.230.5) (*.net *.split)
[01:10:15] *** Quits: badone (~badone@209.132.189.136) (*.net *.split)
[01:10:15] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (*.net *.split)
[01:10:15] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (*.net *.split)
[01:10:15] *** Quits: robod34 (Username@79.113.195.239) (*.net *.split)
[01:10:15] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (*.net *.split)
[01:10:15] *** Quits: Leone (~Leo@216.154.50.172) (*.net *.split)
[01:10:15] *** Quits: Roughy (~mdaw45ns@user/roughy) (*.net *.split)
[01:10:15] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[01:10:15] *** Quits: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com) (*.net *.split)
[01:10:15] *** Quits: markong (~kvirc@213.146.188.203) (*.net *.split)
[01:10:15] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (*.net *.split)
[01:10:15] *** Quits: cursey (~cursey@user/cursey) (*.net *.split)
[01:10:15] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (*.net *.split)
[01:10:15] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[01:10:15] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[01:10:15] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[01:10:15] *** Quits: undeclared (nullx@user/undeclared) (*.net *.split)
[01:10:15] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[01:10:16] *** Quits: hackinghorn (~hackingho@user/hackinghorn) (*.net *.split)
[01:10:16] *** Quits: ville (~ville@82-181-178-111.bb.dnainternet.fi) (*.net *.split)
[01:10:16] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (*.net *.split)
[01:10:16] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[01:10:16] *** Quits: sonic (~sonic@user/sonic) (*.net *.split)
[01:10:16] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (*.net *.split)
[01:10:17] *** Quits: EdFletcher (~PKD@user/edfletcher) (*.net *.split)
[01:10:17] *** Quits: mintograde (~mintograd@47.201.5.61) (*.net *.split)
[01:10:17] *** Quits: fluter (~fluter@user/fluter) (*.net *.split)
[01:10:17] *** Quits: Praise (~Fat@user/praise) (*.net *.split)
[01:10:17] *** Quits: Alipha (~AliphaX@user/alipha) (*.net *.split)
[01:10:17] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[01:10:17] *** Quits: Moult (~sevenstro@sevenstrokes.net) (*.net *.split)
[01:10:17] *** Quits: Cyp_ (~cyp@213.237.85.9) (*.net *.split)
[01:10:17] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[01:10:17] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[01:10:17] *** Quits: BucetaPeluda (~istupy@2620:0:1003:206:9819:cc89:d061:6815) (*.net *.split)
[01:10:17] *** Quits: HvszrStykp (~X@81.171.62.87) (*.net *.split)
[01:10:17] *** Quits: pa (~pah@user/pah) (*.net *.split)
[01:10:17] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (*.net *.split)
[01:10:17] *** Quits: jiffe (~jiffe@mail.nsab.us) (*.net *.split)
[01:10:17] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[01:10:17] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[01:10:17] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[01:10:17] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (*.net *.split)
[01:10:17] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[01:10:17] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[01:10:17] *** Quits: xcm_ (~xcm@user/xcm) (*.net *.split)
[01:10:17] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[01:10:18] *** Quits: headline (sid102736@tinside.irccloud.com) (*.net *.split)
[01:10:18] *** Quits: Youmu (uid129469@user/condy) (*.net *.split)
[01:10:18] *** Quits: immibis (~hexchat@62.156.144.218) (*.net *.split)
[01:10:18] *** Quits: derwolf (~DerWolf@2a01:4f8:c0c:554a::1) (*.net *.split)
[01:10:18] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[01:10:18] *** Quits: ethoxy_ (~caretaker@cx21.havox.ru) (*.net *.split)
[01:10:18] *** Quits: eck (~root@user/eck) (*.net *.split)
[01:10:18] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[01:10:18] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[01:10:18] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[01:10:18] *** Quits: flynn (~mcbloch@user/flynn) (*.net *.split)
[01:10:18] *** Quits: Fairy (~Fairy@2001:464a:4992:0:78b9:dd77:b9a4:c92d) (*.net *.split)
[01:10:19] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[01:10:19] *** Quits: bv (~bv@user/bv) (*.net *.split)
[01:10:19] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[01:10:19] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[01:10:19] *** Quits: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b) (*.net *.split)
[01:10:19] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (*.net *.split)
[01:10:19] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (*.net *.split)
[01:10:19] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (*.net *.split)
[01:10:19] *** Quits: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl) (*.net *.split)
[01:10:19] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[01:10:19] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[01:10:19] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[01:10:19] *** Quits: Brewster (~Brewster@104.145.226.5) (*.net *.split)
[01:10:19] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[01:10:19] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[01:10:20] *** Quits: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com) (*.net *.split)
[01:10:20] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[01:10:20] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (*.net *.split)
[01:10:20] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (*.net *.split)
[01:10:20] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (*.net *.split)
[01:10:20] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (*.net *.split)
[01:10:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[01:10:20] *** Quits: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca) (*.net *.split)
[01:10:20] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[01:10:20] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[01:10:20] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1) (*.net *.split)
[01:10:20] *** Quits: Terminus (~null@user/terminus) (*.net *.split)
[01:10:20] *** Quits: shad0w (~shad0w@user/xshadow) (*.net *.split)
[01:10:20] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[01:10:20] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[01:10:21] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[01:10:21] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[01:10:21] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[01:10:21] *** Quits: emerent (~quassel@p200300cd571578eaba27ebfffed28a59.dip0.t-ipconnect.de) (*.net *.split)
[01:10:21] *** Quits: Rayke (rayke@user/rayke) (*.net *.split)
[01:10:21] *** Quits: biberu (~biberu@user/biberu) (*.net *.split)
[01:10:21] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[01:10:21] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[01:10:21] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[01:10:21] *** Quits: smeso (~smeso@user/smeso) (*.net *.split)
[01:10:21] *** Quits: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (*.net *.split)
[01:10:22] *** Quits: Kebianiz` (~Kebianiza@188.127.164.127) (*.net *.split)
[01:10:22] *** Quits: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com) (*.net *.split)
[01:10:22] *** Quits: DrMax_ (~DrMax@132.215.96.36) (*.net *.split)
[01:10:22] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (*.net *.split)
[01:10:22] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[01:10:22] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[01:10:22] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[01:10:22] *** Quits: edr (~edr@user/edr) (*.net *.split)
[01:10:22] *** Quits: BrandonArnold (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com) (*.net *.split)
[01:10:22] *** Quits: noent (~quassel@squint.a-oben.org) (*.net *.split)
[01:10:22] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[01:10:22] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[01:10:22] *** Quits: purplex_ (~purplex@user/purplex) (*.net *.split)
[01:10:23] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[01:10:23] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[01:10:23] *** Quits: celphi_ (sid97751@user/celphi) (*.net *.split)
[01:10:23] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (*.net *.split)
[01:10:23] *** Quits: BluesBoy (~bboy@user/bluesboy) (*.net *.split)
[01:10:23] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[01:10:23] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[01:10:23] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[01:10:23] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[01:10:23] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[01:10:24] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[01:10:24] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[01:10:24] *** Quits: ivan (~ivan@user/ivan) (*.net *.split)
[01:10:24] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[01:10:24] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (*.net *.split)
[01:10:25] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: kristjansson_ (sid126207@id-126207.tinside.irccloud.com) (*.net *.split)
[01:10:25] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[01:10:25] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[01:10:25] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (*.net *.split)
[01:10:25] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[01:10:25] *** Quits: miklcct (~quassel@vps2.miklcct.com) (*.net *.split)
[01:10:25] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[01:10:26] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[01:10:26] *** Quits: wyre (~wyre@user/wyre) (*.net *.split)
[01:10:26] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (*.net *.split)
[01:10:26] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[01:10:26] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[01:10:26] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[01:10:26] *** Quits: oj (oj@user/oj) (*.net *.split)
[01:10:26] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (*.net *.split)
[01:10:26] *** Quits: hackkitten (~hackkitte@94.31.103.136) (*.net *.split)
[01:10:26] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[01:10:26] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[01:10:27] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[01:10:27] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (*.net *.split)
[01:10:27] *** Quits: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4) (*.net *.split)
[01:10:27] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[01:10:27] *** Quits: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9) (*.net *.split)
[01:10:27] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[01:10:27] *** Quits: Latexi95 (late@banhammer.fi) (*.net *.split)
[01:10:27] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[01:10:28] *** Quits: klys_ (~mdasoh@show.op8.us) (*.net *.split)
[01:10:28] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[01:10:28] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[01:10:28] *** Quits: scoobydoo (~scooby@user/scoobydoo) (*.net *.split)
[01:10:28] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[01:10:28] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[01:10:28] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[01:10:28] *** Quits: naur___ (naur@user/naur) (*.net *.split)
[01:10:28] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: nightstrike (uid487@id-487.uxbridge.irccloud.com) (*.net *.split)
[01:10:28] *** Quits: Trollmann (~Trollmann@user/trollmann) (*.net *.split)
[01:10:29] *** Quits: m1cl[m] (~m1cl@2001:470:69fc:105::2d57) (*.net *.split)
[01:10:29] *** Quits: beanzilla (beanzilla@user/beanzilla) (*.net *.split)
[01:10:29] *** Quits: phoenix (phoenix@user/phoenix) (*.net *.split)
[01:10:29] *** Quits: malinus (~malinus@172.245.158.16) (*.net *.split)
[01:10:29] *** Quits: rpav (~rpav@user/rpav) (*.net *.split)
[01:10:30] *** Quits: great_taste (~great_tas@190.32.235.20) (*.net *.split)
[01:10:30] *** Quits: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao) (*.net *.split)
[01:10:30] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[01:10:30] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[01:11:51] *** Joins: proller (~p@2a02:6b8:b081:7202::1:36)
[01:13:51] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[01:14:08] *** Joins: badone (~badone@209.132.189.136)
[01:14:15] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[01:14:15] *** Joins: Colt (~Colt@user/colt)
[01:14:15] *** Joins: fdgfe (~fdgfe@178.49.152.151)
[01:14:15] *** Joins: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net)
[01:14:15] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[01:14:15] *** Joins: KombuchaKip (~kip@192.252.230.5)
[01:14:15] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[01:14:15] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[01:14:15] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[01:14:15] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[01:14:15] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[01:14:15] *** Joins: Raziel (~Raziel@user/raziel)
[01:14:15] *** Joins: great_taste (~great_tas@190.32.235.20)
[01:14:15] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[01:14:15] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:14:15] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[01:14:15] *** Joins: robod34 (Username@79.113.195.239)
[01:14:15] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[01:14:15] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[01:14:15] *** Joins: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de)
[01:14:15] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[01:14:15] *** Joins: Roughy (~mdaw45ns@user/roughy)
[01:14:15] *** Joins: CalamityBlue (~CalamityB@cpe-108-185-144-94.socal.res.rr.com)
[01:14:15] *** Joins: markong (~kvirc@213.146.188.203)
[01:14:15] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[01:14:15] *** Joins: cursey (~cursey@user/cursey)
[01:14:15] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[01:14:15] *** Joins: letto2 (~letto@188.25.118.240)
[01:14:15] *** Joins: Burgundy (~yomon@79.115.213.171)
[01:14:15] *** Joins: plastico (~plastico@neomutt/plastico)
[01:14:15] *** Joins: LiaoTao (~LiaoTao@gateway/tor-sasl/liaotao)
[01:14:15] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[01:14:15] *** Joins: luizfrds1 (~Luiz@152.250.243.147)
[01:14:15] *** Joins: hackinghorn (~hackingho@user/hackinghorn)
[01:14:15] *** Joins: teepee (~teepee@openscad/teepee)
[01:14:15] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[01:14:15] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[01:14:15] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[01:14:15] *** Joins: markand (~markand@markand.fr)
[01:14:15] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[01:14:15] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[01:14:15] *** Joins: deepy (deepy@user/deepy)
[01:14:15] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[01:14:15] *** Joins: Dijky (~Dijky@user/dijky)
[01:14:15] *** Joins: undeclared (nullx@user/undeclared)
[01:14:15] *** Joins: dextaa (~DV@user/dextaa)
[01:14:15] *** strontium.libera.chat sets mode: +vv npaperbot nolyc
[01:14:15] *** Joins: urdh (~urdh@user/urdh)
[01:14:15] *** Joins: raekye (~raekye@creatifcubed.com)
[01:14:15] *** Joins: sonic (~sonic@user/sonic)
[01:14:15] *** Joins: Brewster (~Brewster@104.145.226.5)
[01:14:15] *** Joins: tobs (~tobs@taboege.de)
[01:14:15] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[01:14:15] *** Joins: cncr04s (~cncr04s@afxr.net)
[01:14:15] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[01:14:15] *** Joins: shailangsa (~shailangs@host86-162-150-209.range86-162.btcentralplus.com)
[01:14:15] *** Joins: manuels (~manuel@80.211.205.88)
[01:14:15] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[01:14:15] *** Joins: freakazoid343 (~matt@2603:9000:cf0f:80e3:ca4:2f26:b042:b2f1)
[01:14:15] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[01:14:15] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[01:14:15] *** Joins: ville (~ville@82-181-178-111.bb.dnainternet.fi)
[01:14:15] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:14:15] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[01:14:15] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:14:15] *** Joins: Terminus (~null@user/terminus)
[01:14:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:14:15] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[01:14:15] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[01:14:15] *** Joins: mintograde (~mintograd@47.201.5.61)
[01:14:15] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[01:14:15] *** Joins: hackkitten (~hackkitte@94.31.103.136)
[01:14:15] *** Joins: shad0w (~shad0w@user/xshadow)
[01:14:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[01:14:15] *** Joins: fluter (~fluter@user/fluter)
[01:14:15] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[01:14:15] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[01:14:15] *** Joins: Praise (~Fat@user/praise)
[01:14:15] *** Joins: celphi_ (sid97751@user/celphi)
[01:14:15] *** Joins: buhman (sid411355@user/buhman)
[01:14:15] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[01:14:15] *** Joins: greyblue9 (sid500829@id-500829.ilkley.irccloud.com)
[01:14:15] *** Joins: kristjansson_ (sid126207@id-126207.tinside.irccloud.com)
[01:14:15] *** Joins: computerquip (sid423484@user/computerquip)
[01:14:15] *** Joins: causative (~halberd@user/causative)
[01:14:15] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[01:14:15] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[01:14:15] *** Joins: BluesBoy (~bboy@user/bluesboy)
[01:14:15] *** Joins: greenbagels (~gb@user/greenbagels)
[01:14:15] *** Joins: Alipha (~AliphaX@user/alipha)
[01:14:15] *** Joins: Dragoon (~Dragoon@user/dragoon)
[01:14:15] *** Joins: Moult (~sevenstro@sevenstrokes.net)
[01:14:15] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[01:14:15] *** Joins: tinloaf (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[01:14:15] *** Joins: smeso (~smeso@user/smeso)
[01:14:15] *** Joins: HeTo (henkka@beer.modeemi.fi)
[01:14:15] *** Joins: Kebianiz` (~Kebianiza@188.127.164.127)
[01:14:15] *** Joins: m42e (~m42e@pb42.de)
[01:14:15] *** Joins: ethoxy_ (~caretaker@cx21.havox.ru)
[01:14:15] *** Joins: eck (~root@user/eck)
[01:14:15] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[01:14:15] *** Joins: jkl1337 (~jkl@user/jkl)
[01:14:15] *** Joins: flynn (~mcbloch@user/flynn)
[01:14:15] *** Joins: Cienisty (Cienisty@user/cienisty)
[01:14:15] *** Joins: Fairy (~Fairy@2001:464a:4992:0:78b9:dd77:b9a4:c92d)
[01:14:15] *** Joins: Cyp_ (~cyp@213.237.85.9)
[01:14:15] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[01:14:15] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[01:14:15] *** Joins: joilerv (~joilerv@host86-191-93-41.range86-191.btcentralplus.com)
[01:14:15] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[01:14:15] *** Joins: taiyu (~taiyu@user/taiyu)
[01:14:15] *** Joins: BucetaPeluda (~istupy@2620:0:1003:206:9819:cc89:d061:6815)
[01:14:15] *** Joins: HvszrStykp (~X@81.171.62.87)
[01:14:15] *** Joins: pa (~pah@user/pah)
[01:14:15] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[01:14:15] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[01:14:15] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:14:15] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[01:14:15] *** Joins: imMute (~immute@user/immute)
[01:14:15] *** Joins: naur___ (naur@user/naur)
[01:14:15] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[01:14:15] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[01:14:15] *** Joins: InPhase (~InPhase@openscad/inphase)
[01:14:15] *** Joins: Ara (~Ara@user/ara)
[01:14:15] *** Joins: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu)
[01:14:15] *** Joins: elemongw (~elemongw@20.107.36.50)
[01:14:15] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[01:14:15] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[01:14:15] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[01:14:15] *** Joins: renopt (~renopt@lisp.us.to)
[01:14:15] *** Joins: xcm_ (~xcm@user/xcm)
[01:14:15] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[01:14:15] *** Joins: Trollmann (~Trollmann@user/trollmann)
[01:14:15] *** Joins: headline (sid102736@tinside.irccloud.com)
[01:14:15] *** Joins: Youmu (uid129469@user/condy)
[01:14:15] *** Joins: immibis (~hexchat@62.156.144.218)
[01:14:15] *** Joins: derwolf (~DerWolf@2a01:4f8:c0c:554a::1)
[01:14:15] *** Joins: bv (~bv@user/bv)
[01:14:15] *** Joins: d12fk (~heiko@exit0.net)
[01:14:15] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[01:14:15] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[01:14:15] *** Joins: roxlu (~roxlu@2a01:7c8:aac0:286:8c3a:b01c:3830:245b)
[01:14:15] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[01:14:15] *** Joins: geordi (~geordi@tinodidriksen.com)
[01:14:15] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[01:14:15] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[01:14:15] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[01:14:15] *** Joins: emerent (~quassel@p200300cd571578eaba27ebfffed28a59.dip0.t-ipconnect.de)
[01:14:15] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[01:14:15] *** Joins: miklcct (~quassel@vps2.miklcct.com)
[01:14:15] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[01:14:15] *** Joins: Rayke (rayke@user/rayke)
[01:14:15] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[01:14:15] *** Joins: m1cl[m] (~m1cl@2001:470:69fc:105::2d57)
[01:14:15] *** Joins: arconte[m] (~arcontema@2001:470:69fc:105::1:2fe4)
[01:14:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:14:15] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[01:14:15] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[01:14:15] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[01:14:15] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[01:14:15] *** Joins: pieguy128 (~pieguy128@bas1-quebec14-67-70-102-17.dsl.bell.ca)
[01:14:15] *** Joins: slavfox (~slavfox@ipv4-93-158-232-111.net.internetunion.pl)
[01:14:15] *** Joins: Oxyd (~oxyd@user/oxyd)
[01:14:15] *** Joins: rpav (~rpav@user/rpav)
[01:14:15] *** Joins: Karyon (~Karyon@user/karyon)
[01:14:15] *** Joins: klys_ (~mdasoh@show.op8.us)
[01:14:15] *** Joins: chris123123 (~bnc123@streuwerte.de)
[01:14:15] *** Joins: Latexi95 (late@banhammer.fi)
[01:14:15] *** Joins: Artea (~Lufia@artea.com.pt)
[01:14:15] *** Joins: fruitypunk (~user@2a01:7c8:aaaa:12:5054:ff:fe69:1df9)
[01:14:15] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[01:14:15] *** Joins: oj (oj@user/oj)
[01:14:15] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[01:14:15] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[01:14:15] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[01:14:15] *** Joins: ivan (~ivan@user/ivan)
[01:14:15] *** Joins: MaddHatter (~maddhatt@user/maddhatter)
[01:14:15] *** Joins: wyre (~wyre@user/wyre)
[01:14:15] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[01:14:15] *** Joins: andreyv (~andrey@user/andreyv)
[01:14:15] *** Joins: orkim (~orkim@user/orkim)
[01:14:15] *** Joins: purplex_ (~purplex@user/purplex)
[01:14:15] *** Joins: talisein (~talisein@user/talisein)
[01:14:15] *** Joins: dzz007 (~dzz007@user/dzz007)
[01:14:15] *** Joins: noent (~quassel@squint.a-oben.org)
[01:14:15] *** strontium.libera.chat sets mode: +v geordi
[01:14:15] *** Joins: BrandonArnold (~brandon@ec2-52-27-188-210.us-west-2.compute.amazonaws.com)
[01:14:15] *** Joins: edr (~edr@user/edr)
[01:14:15] *** Joins: biberu (~biberu@user/biberu)
[01:14:15] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[01:14:15] *** Joins: Friithian (gunqqer@friithian.dev)
[01:14:15] *** Joins: malinus (~malinus@172.245.158.16)
[01:14:15] *** Joins: phoenix (phoenix@user/phoenix)
[01:14:15] *** Joins: beanzilla (beanzilla@user/beanzilla)
[01:14:29] *** Quits: Spydar007 (~spydar007@user/spydar007) (Max SendQ exceeded)
[01:14:29] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[01:15:14] *** Joins: Spydar007 (~spydar007@user/spydar007)
[01:15:52] *** Quits: Colt (~Colt@user/colt) (Remote host closed the connection)
[01:16:16] *** Joins: Colt (~Colt@user/colt)
[01:19:19] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[01:21:00] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[01:24:42] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:27:49] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.3)
[01:28:28] *** Quits: badone (~badone@209.132.189.136) (Ping timeout: 264 seconds)
[01:29:02] *** Joins: badone (~badone@209.132.189.146)
[01:33:34] *** Joins: Simplar (~Simplar@188.163.92.225)
[01:36:21] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:36:59] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[01:37:49] *** Quits: Simplar (~Simplar@188.163.92.225) (Client Quit)
[01:38:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:39:00] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:39:00] *** ChanServ sets mode: +v npaperbot
[01:39:16] *** Joins: RPNX (RPNX@gateway/vpn/protonvpn/rpnx)
[01:41:39] *** Joins: seninha (~seninha@user/seninha)
[01:45:49] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[01:58:11] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 252 seconds)
[02:07:20] *** PJBoy is now known as Guest3059
[02:07:20] *** Quits: Guest3059 (~PJBoy@user/pjboy) (Killed (tantalum.libera.chat (Nickname regained by services)))
[02:07:23] *** Joins: PJBoy (~PJBoy@user/pjboy)
[02:08:03] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[02:10:36] *** Joins: seninha (~seninha@user/seninha)
[02:17:26] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 252 seconds)
[02:37:37] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[02:49:53] *** Quits: kylese (~kylese@p5dd8b8e5.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[02:53:08] *** Joins: dld (~dld@107.126.252.194)
[02:58:28] *** Quits: badone (~badone@209.132.189.146) (Ping timeout: 264 seconds)
[03:01:50] *** Joins: badone (~badone@209.132.189.152)
[03:02:19] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.3)
[03:02:40] *** Quits: proller (~p@2a02:6b8:b081:7202::1:36) (Ping timeout: 264 seconds)
[03:08:04] *** Quits: dld (~dld@107.126.252.194) (Ping timeout: 264 seconds)
[03:08:33] *** Joins: dld (~dld@107.126.253.134)
[03:16:25] *** Joins: proller (~p@80.240.216.69)
[03:19:33] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[03:21:47] *** Quits: Burgundy (~yomon@79.115.213.171) (Ping timeout: 252 seconds)
[03:24:01] *** Joins: rpnx_ (~rpnx@2601:c9:c000:20a8:d5e4:57a3:667c:15d6)
[03:42:05] *** Joins: chozorho (~chozorho@2601:146:300:c30::d03)
[03:50:23] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:51:45] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Read error: Connection reset by peer)
[03:51:58] *** Joins: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143)
[03:54:16] *** Quits: dld (~dld@107.126.253.134) (Ping timeout: 264 seconds)
[03:57:25] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[04:02:40] *** Quits: jkaye (~jkaye@2601:281:8300:7530:7309:f677:c771:6123) (Ping timeout: 264 seconds)
[04:05:54] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[04:07:03] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:07:10] *** Quits: great_taste (~great_tas@190.32.235.20) (Ping timeout: 256 seconds)
[04:08:44] *** Joins: malloy (~jimery@116.30.222.115)
[04:16:10] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[04:16:28] *** Quits: Guest17 (~Guest17@eth-west-pareq2-46-193-4-100.wb.wifirst.net) (Quit: Client closed)
[04:18:16] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 264 seconds)
[04:20:58] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:26:54] *** Joins: geistes_ (~geistes@072-180-226-050.res.spectrum.com)
[04:29:40] *** Quits: geistes (~geistes@2603-8080-f000-e5bc-0000-0000-0000-0136.res6.spectrum.com) (Ping timeout: 264 seconds)
[04:32:02] *** Joins: frost (~frost@user/frost)
[04:32:57] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:853e:1440:14f7:dc92) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[04:43:59] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 256 seconds)
[04:44:49] <MaddHatter> what would you throw for a disallowed enum value? That is, a value of the underlying type that is not part of the enum. out_of_range? domain_error?
[04:51:24] <RandomReader> not out_of_range, probably either domain_error or range_error
[04:56:01] *** Quits: geistes_ (~geistes@072-180-226-050.res.spectrum.com) (Quit: Leaving)
[05:00:57] *** Joins: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:854e:d334:a63f:e8ed)
[05:01:15] *** Quits: frost (~frost@user/frost) (Quit: Ping timeout (120 seconds))
[05:05:13] *** Joins: frost (~frost@user/frost)
[05:07:18] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[05:08:50] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[05:20:17] <RPNX> Thoughts on... async service, has a "mainaction" associated with each binding/async action, what should it do if the action throws an exception?
[05:23:05] <RPNX> my thought was... terminate... one of the built in actions is transferring it to a queue, which could throw bad_alloc. So the default implementation would terminate on bad_alloc... but I am not sure what a better way to handle would be.
[05:23:14] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91)
[05:23:30] <SuperNintendoSUX> i didn't know about range error
[05:24:37] *** Joins: badone_ (~badone@209.132.189.146)
[05:25:28] *** Quits: badone (~badone@209.132.189.152) (Ping timeout: 264 seconds)
[05:28:38] *** Joins: badone (~badone@209.132.189.152)
[05:29:40] *** Quits: badone_ (~badone@209.132.189.146) (Ping timeout: 264 seconds)
[05:38:48] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:38:56] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:38:56] *** ChanServ sets mode: +v npaperbot
[05:57:16] *** Joins: arandomcomrade (~arandomco@user/arandomcomrade)
[05:57:19] *** Quits: asen (~asen@2408:821b:618:2ef0:ab85:814b:bf8f:a143) (Quit: Leaving)
[06:11:42] *** Quits: chozorho (~chozorho@2601:146:300:c30::d03) (Ping timeout: 268 seconds)
[06:12:24] *** Joins: chozorho (~chozorho@2601:146:300:c30::de41)
[06:17:21] <KombuchaKip> I am experiencing a pretty nasty space leak with my application. The usual valgrind (massif), AddressSanitizer, and MemorySanitizer aren't helpful. The latter two can't detect space leaks. Massif could, in theory, but valgrind slows the process down to the point where it would take far too long to restore the application to the state where substantial memory appears to be lost. Suggestions welcome from anyone.
[06:24:45] <Alipha> KombuchaKip: by "MemorySanitizer", you mean -fsanitize=leak ?
[06:25:23] <KombuchaKip> Alipha: Yes, and -fsanitize=address too.
[06:25:42] <Alipha> if the leak sanitizer isn't detecting anything, then that means you have unncessarily-high memory usage while the program is running, but when it ends, everything gets cleaned up?
[06:27:46] <KombuchaKip> Alipha: Exactly. Hence why it is a space leak, and not a memory leak. It's much more uncommon with C++ than with a language like Haskell. Memory leaks on the other hand have useful tools for them, like those we just discussed. But space leaks are a lot harder to track down because as far as the usual tools are concerned, nothing bad happened.
[06:33:59] <Alipha> KombuchaKip: i'm not sure what tooling there is for that, unfortunately. i'd look at globals or objects created in main (or whatever leads up to your "main loop" function). shared_ptrs are probably especially suspect (though a cycle would be caught by leak sanitizer). also note that vectors, strings, deques, and unordered_* containers don't free their memory when you clear them or reduce their size.
[06:34:59] <KombuchaKip> Alipha: As in you mean the reserve buffer inside of containers stays allocated even if size() is zero?
[06:35:00] *** Joins: ferdna (~ferdna@user/ferdna)
[06:35:37] <Alipha> KombuchaKip: yes
[06:35:51] <Alipha> { std::vector<int> v(1000); v.clear(); std::cout << v.capacity(); }
[06:35:52] <geordi> 1000
[06:36:04] <Alipha> { std::vector<int> v(1000); v.clear(); v.shrink_to_fit(); std::cout << v.capacity(); }
[06:36:05] <geordi> 0
[06:36:16] * KombuchaKip nods
[06:36:17] <SuperNintendoSUX> v.really_clear();
[06:36:57] <KombuchaKip> Alipha: Yeah, I already suspected that and checked unfortunately. And even if the reserve buffer wasn't being freed, it still wouldn't explain the size of memory being used.
[06:37:59] *** Joins: jkaye (~jkaye@2601:281:8300:7530:a6c:9e86:10cd:6e96)
[06:39:50] <Alipha> KombuchaKip: it would be a huge pain in the ass (probably prohibitively so), but you could create custom allocators which keep track of how much memory they have allocated and go around and give different containers different allocators and see which ones use the most memory
[06:45:44] <KombuchaKip> Alipha: I could do that, but then it assumes that the problem is in some STL container and not, say, some database handles doing something naughty or whatever.
[06:46:54] <KombuchaKip> Alipha: I just wish there was some way that I could take a core dump snapshot when the process has ballooned to 10GB and then generate a diagram of the dump that says, hey, 95 % of the memory used was allocated over here. But I can't find anything that can do that in this situation.
[06:56:45] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[07:00:01] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:15:16] *** Quits: jkaye (~jkaye@2601:281:8300:7530:a6c:9e86:10cd:6e96) (Ping timeout: 264 seconds)
[07:17:33] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Ping timeout: 256 seconds)
[07:19:30] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[07:19:38] *** Quits: Neal__ (~nshire@47.146.41.156) (Quit: Leaving)
[07:24:11] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 265 seconds)
[07:24:57] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[07:28:41] *** Quits: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net) (Quit: ZNC 1.7.3 - https://znc.in)
[07:28:56] *** Joins: alex88 (~alex88@ip72-207-140-105.lv.lv.cox.net)
[07:49:43] <Hello71> this is not called "space leak", so you do not need a leak detector, you need a memory profiler
[07:50:38] <Hello71> (as it says in the massif manual title: 9. Massif: a heap profiler)
[07:51:51] <Hello71> there are a number of memory profilers for linux, all of which suck in different ways. heaptrack requires kde and crashes and seems to lose data, massif is extremely slow, tcmalloc and jemalloc need you to use their malloc
[07:52:01] <Hello71> and also have crappy interfaces
[07:52:11] *** Joins: great_taste (~great_tas@190.32.235.20)
[07:53:15] <Hello71> i've been meaning to write a standalone memory profiler like heaptrack but with better reliability and not requiring huge kde libraries
[07:55:03] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[07:59:09] *** Joins: dld (~dld@73.61.8.208)
[08:01:24] *** Joins: smeso (~smeso@user/smeso)
[08:06:48] <SuperNintendoSUX> how is your progress so far?
[08:06:52] *** Quits: dld (~dld@73.61.8.208) (Ping timeout: 264 seconds)
[08:08:30] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[08:17:41] *** Quits: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51) (Ping timeout: 252 seconds)
[08:22:10] *** Quits: fdgfe (~fdgfe@178.49.152.151) (Ping timeout: 256 seconds)
[08:27:02] *** Joins: byku (~byku@host-92-11-33-142.as13285.net)
[08:28:04] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[08:28:12] *** Quits: byku (~byku@host-92-11-33-142.as13285.net) (Client Quit)
[08:35:48] *** Quits: QuaternionsRock (~Quaternio@2601:197:a7f:79d6:854e:d334:a63f:e8ed) (Quit: Client closed)
[08:41:30] *** Quits: great_taste (~great_tas@190.32.235.20) (Changing host)
[08:41:30] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[08:50:40] *** Quits: arandomcomrade (~arandomco@user/arandomcomrade) (Quit: Leaving)
[08:51:05] <kalven> KombuchaKip: tcmalloc can do that - https://gperftools.github.io/gperftools/heapprofile.html
[08:51:56] <KombuchaKip> kalven: Gold. I'll check it out. Thank you.
[09:02:43] *** Joins: reumeth (~reumeth@user/reumeth)
[09:09:06] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[09:10:29] <smallville7123> i wish skia supported cmake :(
[09:13:08] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[09:16:13] <kalven> me too
[09:17:54] *** Quits: malloy (~jimery@116.30.222.115) (Ping timeout: 250 seconds)
[09:18:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[09:19:06] *** Joins: Cyp_ (~cyp@213.237.85.9)
[09:20:08] *** Joins: malloy (~jimery@116.30.222.115)
[09:21:14] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[09:22:15] *** Quits: reumeth (~reumeth@user/reumeth) (Ping timeout: 268 seconds)
[09:29:17] *** Quits: nickel8448 (~rahulwadh@147.80.76.34.bc.googleusercontent.com) (Quit: WeeChat 3.3)
[09:38:42] *** Joins: nshire (~nshire@user/nshire)
[09:38:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:38:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:38:57] *** ChanServ sets mode: +v npaperbot
[09:38:59] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:45:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[09:47:26] *** Joins: xkuru (~xkuru@user/xkuru)
[09:47:52] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:00:05] *** Joins: PJBoy (~PJBoy@user/pjboy)
[10:13:22] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[10:18:20] *** Joins: pulse (~pulse@user/pulse)
[10:32:46] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:33:52] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 264 seconds)
[10:39:49] *** Quits: chozorho (~chozorho@2601:146:300:c30::de41) (Quit: good night again)
[10:44:55] *** Quits: ethoxy_ (~caretaker@cx21.havox.ru) (Quit: leaving)
[10:45:23] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[10:56:34] *** Quits: pulse (~pulse@user/pulse) (Quit: Don't think of the green elephant)
[10:57:31] *** Joins: pulse (~pulse@user/pulse)
[10:59:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:05:34] *** Joins: Cyp (~cyp@213.237.85.9)
[11:05:47] *** Quits: Cyp_ (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:06:29] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Ping timeout: 256 seconds)
[11:11:20] *** Quits: Furai (~Furai@cookiehoster.furai.pl) (Quit: WeeChat 3.3)
[11:13:08] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:e5d7:faad:1e0:85dd)
[11:14:22] *** Joins: undeclared0 (nullx@user/undeclared)
[11:14:36] *** Joins: Furai (~Furai@cookiehoster.furai.pl)
[11:14:37] *** Joins: kylese (~kylese@p5dd8b511.dip0.t-ipconnect.de)
[11:16:41] *** Quits: undeclared (nullx@user/undeclared) (Ping timeout: 256 seconds)
[11:16:41] *** undeclared0 is now known as undeclared
[11:43:18] *** Joins: andreasbuhr (~quassel@p548dda01.dip0.t-ipconnect.de)
[11:43:18] *** Quits: andreasbuhr (~quassel@p548dda01.dip0.t-ipconnect.de) (Client Quit)
[11:44:44] *** Quits: Cyp (~cyp@213.237.85.9) (Read error: Connection reset by peer)
[11:45:00] *** Joins: Cyp (~cyp@213.237.85.9)
[11:50:03] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[11:52:19] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[11:52:35] *** Joins: frost (~frost@user/frost)
[11:58:53] *** Joins: Burgundy (~yomon@79.115.213.171)
[11:58:53] *** Joins: JohnMS_WORK (~kvirc@185.73.229.242)
[12:00:19] *** Quits: luizfrds1 (~Luiz@152.250.243.147) (Ping timeout: 256 seconds)
[12:01:29] *** Joins: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au)
[12:14:14] *** Quits: pulse (~pulse@user/pulse) (Quit: Don't think of the green elephant)
[12:14:31] *** Joins: pulse (~pulse@user/pulse)
[12:17:46] <smallville7123> https://gist.github.com/mgood7123/3f64e914a64ba0e508f1c99c480bf42c Skia hates my hard drive
[12:18:16] <smallville7123> it also hates being building fast
[12:23:03] *** Quits: kylese (~kylese@p5dd8b511.dip0.t-ipconnect.de) (Quit: Leaving)
[12:25:28] <LordKalma> !rq
[12:25:28] <nolyc> LordKalma: <PJBoy> "The laughter context is a set of points within the program that determines which humour declarations are found by tickle-dependent name lookup and which are reachable ([module.reach]) in the context of a particular joke or template comedy"
[12:26:08] <Haohmaru> [X] I want to know more
[12:31:36] <TinoDidriksen> Build folders compress very nicely, so just use a filesystem with transparent compression. For macOS there's https://apple.stackexchange.com/a/360124
[12:34:01] *** Joins: robod34 (Username@79.113.195.239)
[12:34:18] <TinoDidriksen> Apple is so far behind in so many ways. NTFS, zfs, and btrfs have supported user-controlled transparent compression for decades, but HFS+ and APFS don't expose any of that to the user and don't maintain it on write.
[12:35:38] <Haohmaru> transparent?
[12:36:19] <RandomReader> file APIs work as normal, it's just compressed on disk
[12:36:28] <Haohmaru> oh
[12:36:52] <TinoDidriksen> Yeah. Filesystem handles all compression details. Things are compressed, but programs don't know or care.
[12:36:53] <Haohmaru> i used btrfs once, was a bad idea
[12:38:20] <Haohmaru> i wonder what happens to files where are being kept open and appended to
[12:38:24] <smallville7123> !rq
[12:38:24] <nolyc> smallville7123: <Raziel> PJBoy, and autotools is a clone army, but all the clones are of jar jar binks?
[12:38:27] <Haohmaru> * which
[12:38:46] <TinoDidriksen> Compression is done in blocks of 64-256 KB.
[12:40:24] <Haohmaru> this guy with the infinite compression algorithm should make a filesystem
[12:40:26] <Haohmaru> ;P~
[12:47:56] <TinoDidriksen> I use transparent compression on all my computers and servers. E.g., got 922 GB mixed data (Windows, music, documents, games, builds, VMs) only using 746 GB actual space.
[12:49:12] <Haohmaru> i'm sure he can compress all that to 1 byte
[12:49:26] <Haohmaru> his compressor will probably be 1TB big tho
[12:49:27] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[13:06:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:18:09] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[13:24:23] <LordKalma> you know someone fucked up when NFTS is a good example
[13:29:06] <Haohmaru> <true_story.jpg>
[13:38:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:38:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:38:57] *** ChanServ sets mode: +v npaperbot
[13:41:38] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[13:49:15] <Raziel> NFTs? *right click downloads*
[13:53:05] *** Quits: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net) (Quit: Going offline, see ya! (www.adiirc.com))
[13:54:44] <cbreak> Raziel: amateur
[13:54:52] <cbreak> wget all the things
[14:04:01] *** Quits: flynn (~mcbloch@user/flynn) (Quit: Ping timeout (120 seconds))
[14:04:10] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[14:16:36] <Haohmaru> !fact
[14:16:37] <nolyc> Haohmaru: An lvalue is modifiable unless its type is const-qualified or is a function type.
[14:17:12] <cbreak> hmm... there are function lvalues?
[14:17:26] <cbreak> that makes it even more clear that the name lvalue was dumb.
[14:17:36] <Haohmaru> i don't even.
[14:17:38] <Latexi95> function reference?
[14:18:02] <Haohmaru> but it said function type
[14:21:01] <shailangsa> does anybody know whether higher RAM frequency in contrast to lower timings result in better build times?
[14:25:16] *** Joins: proller (~p@2a02:6b8:0:51e:5942:3b72:6869:a157)
[14:29:40] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:9d48:1520:34dc:be91) (Quit: Leaving)
[14:33:25] <Haohmaru> what are those timings about?
[14:33:39] <shailangsa> RAM latency?
[14:38:49] *** Joins: snikulov (~snikulov@109-252-86-189.nat.spd-mgts.ru)
[14:40:06] <Raziel> shailangsa, ram frequency x timings directly equates to its actual latency. there used to be nice tables showing the different common combinations of frequencies and latencies and what the resulting latency would be
[14:40:38] <Raziel> as for whether one or the other would affect compile times more, given the same actual latency resulting from then, idk
[14:40:46] <Raziel> it would make for an interesting test :p
[14:41:13] <shailangsa> it seems 4400mhz are not available in lower than c19 though
[14:41:37] <Raziel> ddr5? it's still new, it'll take a while to push it
[14:42:27] <shailangsa> ddr5
[14:42:30] <shailangsa> ddr4*
[14:42:38] <Raziel> that still seems quite good, considering ddr4 at 3600 cl16 is considered pretty top end shit
[14:42:49] <Raziel> ah. then, yeah, that's pretty good still.
[14:43:32] <Raziel> not that with ryzen... you might wanna also try to sync the ram frequency with the infinity fabric stuff. which means between 3600-4000 is optimal (and only 3600 is decently guaranteed)
[14:44:12] <shailangsa> does it make a difference whether 4x16GB 4400mhz DDR is used? motherboard says "dual channel" not sure what that means https://www.msi.com/Motherboard/PRO-Z690-A-WIFI-DDR4/Specification
[14:45:07] <Raziel> dual channel means it can address two sticks at once. so using 1 or 3 would be a bad idea, for speed. 2 or 4 is optimal.
[14:46:45] <Raziel> also, should be obvious but don't mix different kinds of sticks, and preferably don't mix different chips either (some ram kits may use different chips depending on even just the batch... which is bad)
[14:47:28] <shailangsa> hmm address two sticks at once? the thing is i can get 4x16GB DDR4 4400MHz, but was thinking of getting 2x32GB DDR4 at 3600mhz for ease of upgradeability in the future
[14:48:17] <Raziel> well that's up to you, either of those two setups are fine.
[14:48:20] * Haohmaru is still on DDR2
[14:48:32] <Raziel> I use 4x32gb at 3600 in here
[14:48:54] <shailangsa> which RAM?
[14:50:03] <Raziel> I have... https://www.gskill.com/product/165/326/1580796223/F4-3200C16Q-128GTZNTrident-Z-NeoDDR4-3200MHz-CL16-18-18-38-1.35V128GB-(4x32GB)
[14:50:08] <Raziel> this kit, on a ryzen 5950x
[14:50:26] <Raziel> wait no that's 3200
[14:50:41] <shailangsa> hmm what sort of timings are you using at 3600?
[14:51:39] <Raziel> https://www.gskill.com/product/165/326/1601285269/F4-3600C16Q-128GTZN it's this one akshully
[14:51:55] <Raziel> and I'm just using the xmp, didn't try to push it further because bloody hell that's such a time consuming pain
[14:52:31] <shailangsa> ok, are you building android?
[14:53:22] <Raziel> no :p and I'm not sure if I want to try lol
[15:00:16] *** Quits: RPNX (RPNX@gateway/vpn/protonvpn/rpnx) (Ping timeout: 264 seconds)
[15:00:53] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[15:01:22] <cbreak> I use https://www.kingston.com/de/memory/search?partId=KSM26ED8%2F16ME, it's quite ok.
[15:02:22] *** Quits: JohnMS_WORK (~kvirc@185.73.229.242) (Read error: Connection reset by peer)
[15:02:38] <shailangsa> hmm what is dual rank as opposed to dual channel?
[15:02:50] <Haohmaru> i bought my RAM from some random guy on ebay ;P~
[15:03:14] <Raziel> dual rank refers to how the chips are laid out on the actual stick
[15:03:25] <shailangsa> does that matter?
[15:03:38] <Raziel> it can, but mostly for compatibility rather than anything else
[15:03:41] <cbreak> shailangsa: dual rank / single rank is different from channels
[15:03:43] <Raziel> some mobos might choke on dual rank
[15:03:49] <Haohmaru> the electrons travel differently ;P~
[15:03:52] <Raziel> but 32gb sticks afaik are dual-rank only
[15:03:56] <Raziel> cause they can't fit that much in single rank
[15:04:22] <Raziel> with current ddr4 chips anyway
[15:04:24] <shailangsa> hmm so its better to use 4x16GB?
[15:04:33] <cbreak> depends.
[15:04:34] <Raziel> I mean
[15:04:38] <Raziel> do you need 128gb or not? :p
[15:04:48] <shailangsa> lol
[15:04:50] <cbreak> shailangsa: the most important aspect of RAM is: Do you value your data integrity?
[15:05:06] <cbreak> if you care about your data integrity: How much do you care?
[15:05:15] <shailangsa> data integrity is related to RAM?
[15:05:22] <cbreak> yeah... of course
[15:05:28] <shailangsa> how?
[15:05:29] <Haohmaru> [#########_] <- this much
[15:05:45] <cbreak> you can't have data integrity if your RAM doesn't give you the same value back that you stored in it, can you?
[15:06:16] <Haohmaru> that's when programs begin to do funky things
[15:06:18] <Raziel> I have had bad ram (and/or incompatibilities that led to ram errors) corrupt stuff on permanent storage too, yes.
[15:06:39] <shailangsa> for data integrity what RAM setup is best?
[15:06:39] <cbreak> if you don't care too much about getting the correct data back, you can get normal gamer memory
[15:06:50] <Raziel> shailangsa, buffered ECC. :p
[15:06:51] <Haohmaru> muhaha
[15:06:51] <cbreak> if you care about your data, get ECC memory
[15:07:15] <Haohmaru> i think mine is without ECC :/
[15:07:17] <cbreak> of course, you can't use ECC memory if you don't have a good CPU
[15:07:41] <Raziel> it's usually not about "good" as much as it is about "an actual workstation platform"
[15:07:45] <cbreak> there are plenty of crappy CPUs out there unfortunately :(
[15:07:49] <Raziel> which is usually excessively expensive just for the sake of it
[15:07:51] <shailangsa> it seems most desktop RAM in retail are non ECC though
[15:07:55] <cbreak> Raziel: it's not that bad
[15:08:14] <cbreak> shailangsa: yes. Gamer RAM vs. Professional RAM
[15:08:25] <Raziel> cbreak, it's better now with threadripper existing, I suppose
[15:08:29] <Raziel> it used to be a lot worse
[15:08:38] <shailangsa> what price range is ECC for 32GB sticks of DDR4 and what frequency do they run at?
[15:08:39] <cbreak> threadripper is too expensive for me :)
[15:08:44] <Raziel> like, xeons are overpriced to shit compared to equivalent non-xeon intel cpus
[15:08:48] <cbreak> I just have a lowly Ryzen 5800X
[15:09:05] <Raziel> right, ryzens can do ecc too now can't they?
[15:09:08] <Raziel> just need a mobo that can too
[15:09:12] <cbreak> Raziel: unfortunately, normal Intel CPUs are shit
[15:09:25] <cbreak> yes, at least they claim to :)
[15:09:28] <cbreak> I've never had a memory error
[15:09:44] <shailangsa> same, only file system errors
[15:10:01] <Haohmaru> /me want's a ryzen too
[15:10:04] <Raziel> shailangsa, you can't really have memory errors without ecc. because they never show up as memory errors.
[15:10:05] <Haohmaru> * wants
[15:10:13] <Raziel> they show up as literally anything else.
[15:10:14] <Raziel> >_>
[15:10:16] <Latexi95> filesystem errors can be caused by a random memory error :)
[15:10:26] <shailangsa> hmm
[15:10:43] <cbreak> without ECC RAM, you can not easily identify RAM errors
[15:10:53] <cbreak> only persistent ones, while running something like Memcheck86
[15:10:55] <LordKalma> I have ryzen on my laptop
[15:11:11] <Haohmaru> Latexi95 a badly read byte from the harddisk could end up badly written to RAM and it could correct itself ;P~
[15:11:13] <LordKalma> they do say the recently released gen of intel is pretty competitive
[15:11:15] <LordKalma> anyhow
[15:11:16] <Raziel> cbreak, yep, and it fuckin sucks and I wish proper ecc was just mandatory for every platform. but alas.
[15:11:18] <cbreak> but ephemeral memory corruption wouldn't show up that way
[15:11:29] <LordKalma> I've had bad ram sticks that made memtestx86 look like a xmas tree
[15:11:34] <shailangsa> guessing ECC memory will run at lower frequency and higher latency though
[15:11:49] <Raziel> memtest can look like an xmas tree even if the sticks are perfectly fine.
[15:12:02] <cbreak> shailangsa: that's why it's gamer memory vs professional memory
[15:12:05] <Raziel> I've had it do that only when fully saturating the slots, for example. while those sticks individually tested were all fine.
[15:12:13] <cbreak> want to have your data fast? or correctly? chose one :)
[15:12:35] <LordKalma> system reboot brb
[15:12:49] <shailangsa> fast and correctly majority of the time :P
[15:12:51] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[15:13:07] <Raziel> cbreak, if there was an actual market for fast expensive ecc ram, it would be made. but there isn't.
[15:13:17] <Raziel> if gamer platforms used ecc, then it would be made :p
[15:13:19] <Haohmaru> get some SAFE ram, and avoid running slow-a$$ programs
[15:13:23] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[15:13:36] <cbreak> Haohmaru: that's what I do :)
[15:13:55] <Haohmaru> same, except my ram isn't .. safe
[15:14:05] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Remote host closed the connection)
[15:14:27] <cbreak> one of the many reasons I switched away from intel: Their CPUs just suck at correctness guarantees :(
[15:14:36] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[15:14:59] <Haohmaru> my "best" machine has a core2quad cpu :/
[15:14:59] <Latexi95> DDR5 has mandatory on-chip ECC, but that is only for detecting and correcting on-chip bit flips and can't detect bit flips in transfer between CPU and RAM like proper ECC
[15:15:14] <Raziel> big potato oof noises
[15:15:32] <Raziel> you can get very silly servers that are better than that for cheapo
[15:15:38] <Raziel> if you don't mind jet engine noises
[15:16:02] <Haohmaru> i do mind the noise, because i sleep there and i deal with music too
[15:16:11] <Raziel> welp
[15:16:32] <shailangsa> if building AOSP takes 1 hour 40 minutes on 32GB of ram with 8 cores, would doubling the cores or doubling the ram decrease the build time?
[15:16:35] *** Quits: snikulov (~snikulov@109-252-86-189.nat.spd-mgts.ru) (Remote host closed the connection)
[15:16:50] <Raziel> shailangsa, is the ram actually getting full?
[15:17:05] <Haohmaru> if you're hitting the swap, things will get slower
[15:17:18] <shailangsa> hmm wasnt able to check, as was using ubuntu and didnt know
[15:17:36] <Haohmaru> if things can't be compiled any more parallel than that, then more cpu cores probably won't help
[15:17:42] <Raziel> well, as Haohmaru said, hitting swap will make it slower. hitting swap happens when the ram is (close to) full.
[15:17:47] <Raziel> so check that.
[15:18:02] <shailangsa> google states CPU with more cores builds faster though https://source.android.com/setup/build/requirements
[15:18:12] <Haohmaru> i always have some "system resource meters" in the taskbar and i eyeball them
[15:18:12] <Raziel> as for cores... idk, most decent cpp codebases can be parallel built to pretty silly levels
[15:18:17] <Raziel> but it does depend
[15:19:17] <Latexi95> Hitting swap will tank the performance, so as long as it doens't happen, large projects benefit adding more cores
[15:20:15] <Haohmaru> hm
[15:20:40] *** Joins: Simplar (~Simplar@188.163.93.76)
[15:20:50] <Haohmaru> i wonder if you can make a fake "filesystem" in RAM, and then put all your source codez in it, and build it there
[15:21:03] <Raziel> you can make a ramdisk, yes
[15:21:22] <Raziel> but I doubt it'll accelerate much in the build case, since disk i/o is rarely the bottleneck there
[15:21:39] <Haohmaru> true
[15:22:27] <shailangsa> these are linaro build times https://docs.google.com/spreadsheets/d/1rqnHgPrG059fpOjArpc_nFSDVG1dsjw6y3o9ujf4hro/edit#gid=0
[15:23:21] <Raziel> shailangsa, those are theoretical, yes?
[15:23:36] <Raziel> otherwise, where can I get this legendary 4800mhz cl7 kit? :p
[15:24:59] <shailangsa> not sure maybe tested ?
[15:25:13] <Raziel> maybe the ones with the bold outlines are actual tested, and others are extrapolated
[15:26:09] *** Joins: snikulov (~snikulov@109-252-86-189.nat.spd-mgts.ru)
[15:28:07] <Raziel> cause there's combinations there that I'm pretty sure are unachievable even in extreme OC scenarios
[15:31:26] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[15:32:51] <very_sneaky> Haohmaru: isn't that just giving tmpfs a mountpoint somewhere
[15:33:10] <Haohmaru> no idea, i'm no linux h4x0r
[15:34:12] <Haohmaru> !fact
[15:34:13] <nolyc> Haohmaru: The mutex types shall meet the Lockable requirements.
[15:34:21] <very_sneaky> you too could run `neofetch` in a terminal
[15:34:27] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[15:41:08] <shailangsa> going to buy https://uk.crucial.com/memory/ddr4/blm2k16g44c19u4b
[15:42:02] <shailangsa> 2 sets of those lol
[15:42:02] <Haohmaru> your decision is.. crucial
[15:48:08] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 252 seconds)
[15:52:16] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:56:50] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[15:58:08] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:00:28] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:8dbb:aeac:23a6:f8d)
[16:00:59] *** Joins: AmR (~AmREiSa@156.199.223.24)
[16:04:49] *** Joins: Leone (~Leo@216.154.50.172)
[16:05:59] <mort> uh why does clang warn that lock_guard may not intend to support class template argument deduction
[16:06:03] <mort> does lock_guard intend to support ctad?
[16:06:08] <mort> shouldn't this be knowable
[16:09:59] *** Joins: markong (~kvirc@213.146.188.203)
[16:10:50] <shailangsa> does anybody know what 1DPC 1R Max speed up to 5200+ MHz/1DPC 2R Max speed up to 4800+ MHz/2DPC 1R Max speed up to 4400+ MHz/2DPC 2R Max speed up to 4000+ MHz means?
[16:11:25] <Haohmaru> dafuq
[16:11:47] <mort> I don't know what DPC and R refers to
[16:11:59] <shailangsa> for ram https://www.msi.com/Motherboard/MAG-Z690-TOMAHAWK-WIFI-DDR4/Specification
[16:12:20] <mort> apparently dpc is dims per channel
[16:12:26] <cbreak> shailangsa: it means the gamer mainboard manufacturer's playing buzzword bingo
[16:12:27] <Raziel> and R is rank
[16:12:27] <Haohmaru> why dafuq is there "WIFI" in the name ;P~
[16:12:29] <Raziel> single/dual rank
[16:12:38] <Raziel> Haohmaru, cause it has an integrated wifi card/chip
[16:12:40] <Raziel> vv:
[16:12:44] <Haohmaru> x_x
[16:13:01] <Raziel> idk why anyone in their right mind would use wifi on a desktop except for emergencies/testing
[16:13:04] <Raziel> but hey, it's there. :p
[16:13:05] <shailangsa> but how would https://uk.crucial.com/memory/ddr4/blm2k16g44c19u4b be overclocked on the motherboard given they mentioned those figures for 4400 mhz?
[16:13:31] <mort> I don't like that I have to add -lpthread when using std::thread
[16:13:37] <cbreak> Raziel: the bluetooth part isn't too bad
[16:13:47] <cbreak> mort: use cmake then :D
[16:13:48] <Haohmaru> wireless in general shall be avoided
[16:13:51] <mort> no
[16:13:54] <Haohmaru> use cables
[16:13:59] <Raziel> cbreak, true, the bluetooth is useful sometimes, and these usually use the same antenna for bluetooth and wifi
[16:14:08] <Raziel> so, there ya go
[16:14:13] <mort> maybe meson or build2 or bazel or something like that
[16:14:17] <mort> but I won't use cmake
[16:14:25] <cbreak> mort: if you don't want convenience, then don't complain :)
[16:14:32] <mort> I don't want inconvenience
[16:14:37] <shailangsa> anybody?
[16:14:38] <mort> hence no cmake
[16:14:53] <Raziel> shailangsa, probably just like anything gets OCed
[16:14:55] <cbreak> shailangsa: everything above jdec spec is overclocked
[16:15:06] <Raziel> outside of what the manufacturer says is supported or tested
[16:15:21] <shailangsa> yes but 2DPC 1R Max speed up to 4400+ MHz ?
[16:15:24] <shailangsa> wtf..
[16:15:30] <mort> yes
[16:15:36] <Raziel> yes, and this is 2R, so it should only work up to 4000mhz on this board
[16:15:38] <cbreak> read the mainboard manual, maybe they go into more detail
[16:15:44] <Raziel> now, whether it will or not...
[16:15:47] <Raziel> who the fuck knows.
[16:15:54] <mort> RAM manufacturers clock their RAM sticks pretty high, there's no problem with that
[16:15:58] <Raziel> wait, no, this isn't 2R
[16:16:09] <shailangsa> but how does 1DPC 2R Max speed up to 4800+ MH differ to 2DPC 1R Max speed up to 4400+ MHz ?
[16:16:12] <cbreak> mort: other than potential reliability issues
[16:16:18] <cbreak> which are impossible to diagnose properly without ECC
[16:16:40] <mort> true, but if one doesn't want the high clocks one can just not enable xmp in bios
[16:16:43] <Raziel> shailangsa, basically, the more you saturate a board (with sticks and/or individual chips in multiple ranks), the more likely it is to choke.
[16:16:55] <Raziel> ergo they recommend less speed for better chances of stability when saturating with more sticks.
[16:16:56] <Raziel> v:
[16:17:10] <cbreak> mort: yes. And you still don't get ECC out of it. That mainboard's not made for professional use.
[16:17:30] <mort> if you have 1 RAM stick per RAM channel, you can run your sticks at 4800MHz, if you have 2 RAM sticks per channel you can run your sticks at 4400MHz, seems fairly comprehensible
[16:17:36] <mort> cbreak: nothing has ECC
[16:17:53] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[16:17:53] <mort> if you want ECC you have to pay a billion dollars for a high-end xeon
[16:17:58] <cbreak> nah
[16:18:01] <mort> yah
[16:18:03] <cbreak> that's not really true
[16:18:07] <mort> it kind of is
[16:18:09] *** Quits: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi) (Ping timeout: 256 seconds)
[16:18:20] <cbreak> I paid 450 for my CPU, and 300 for my als-gamer-mainboard
[16:18:22] <cbreak> https://www.asrock.com/mb/AMD/X570%20Taichi/index.asp
[16:18:24] <cbreak> it supports ECC
[16:18:48] <cbreak> it's not really professional grade, but still far above that intel junk
[16:18:51] <mort> does it support ECC without AMD's server or HETD chips
[16:18:59] <cbreak> yes
[16:19:14] <cbreak> I use it with a normal Ryzen 5800X
[16:19:15] <Raziel> cbreak, only unbuffered ecc tho
[16:19:16] <Raziel> sadface
[16:19:19] *** Joins: gehn (~gehn@user/gehn)
[16:19:27] <mort> huh, I didn't realize AMD doesn't limit ECC to their ridiculously expensive chips
[16:19:28] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[16:19:28] <shailangsa> mort: im confused, regarding sticks per channel part, can you elaborate? the motherboard states it supports dual channel
[16:19:29] <cbreak> Raziel: enough for 64GB RAM :)
[16:19:43] <mort> well, in the Intel world nobody could use ECC because you had to spend a billion dollars for a high-end xeon
[16:19:55] <mort> maybe AMD changes the equation, which is nice
[16:20:05] <cbreak> mort: before this thing, I had an intel based small form factor server with ECC memory
[16:20:17] <cbreak> an Atom C2750 somethingsomething
[16:20:18] <mort> looks like shailangsa is looking at intel boards tho, which makes ECC not an option
[16:20:31] <shailangsa> 1R is 1 rank?
[16:20:36] <cbreak> shailangsa: take a guess...
[16:20:40] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 264 seconds)
[16:20:45] <Raziel> as an owner and user for x570 boards myself, x570 is a shit platform for workstation/hedt use anyway
[16:21:06] <mort> shailangsa: the motherboard probably has 4 RAM slots, and it probably has 2 channels
[16:21:07] <Raziel> never enough pcie lanes/slots, the usb controllers choke hard easily, still only dual channel :p
[16:21:12] <cbreak> Raziel: possibly, but I've not had issues that I've been able to pin on it :)
[16:21:22] <cbreak> and still better than anything intel offers in that price range
[16:21:25] <mort> usually the RAM slots are differently colored, like two RAM slots being blue and two being black, the same color is the same channel
[16:21:45] <Raziel> yeah intel's platforms are shit too. their hedt stuff (x299) was fine, but it's years out of date at this point
[16:21:46] <mort> so if you put one RAM stick into a blue slot and one RAM stick into a black slot, you're running with two sticks of RAM, but one stick per channel
[16:21:54] <shailangsa> ok so if i have 4x16GB sticks, they will run at dual channel which is 2DPC right?
[16:22:02] <mort> if you put a RAM slot into each of the blue slots, you have two sticks per channel
[16:22:03] <Raziel> shailangsa, yes
[16:22:17] <shailangsa> ok but what about the 1R?
[16:22:30] <Raziel> that's single rank. 16gb sticks are probably single rank. but you should check.
[16:22:43] <mort> shailangsa: do you already have a CPU or are you looking to get a whole new motherboard+CPU+RAM combo
[16:22:45] <Raziel> since there were both kinds (1R and 2R) for 16gb sticks
[16:23:04] <shailangsa> going to get motherboard+CPU+RAM, already got the 12700K though
[16:23:07] <Raziel> nowadays they should be 1R, specially for the higher end ones, but fuck knows :p
[16:23:11] <mort> ah
[16:23:13] <cbreak> my 16 GB modules are dual-rank. It depends on which chips are used and how many of them
[16:23:26] <mort> if you didn't have the CPU already I'd really suggest considering listening to cbreak and getting an AMD system with ECC
[16:23:42] <mort> but if you already have the CPU you're locked out of ECC
[16:23:50] <shailangsa> lol next time perhaps
[16:24:13] <shailangsa> by the way i dont see anything about 1 rank on the ram stick i bought https://uk.crucial.com/memory/ddr4/blm2k16g44c19u4bl , guessing its 1R by default as its 16GB?
[16:24:50] <Raziel> my mobo says Support for non-ECC Un-buffered DIMM 1Rx8/2Rx8/1Rx16 memory modules
[16:25:12] <Raziel> but the actual compatibility/tested kits list has several 2Rx32 sticks and probably 2Rx16 too
[16:25:15] <Raziel> it's all a bit bs
[16:25:22] <cbreak> shailangsa: they don't even write which chips they use
[16:25:25] <Raziel> and I am using 2Rx32 on it v:
[16:25:55] <cbreak> Raziel: 2Rx32 chips?
[16:25:58] <Raziel> also, apparently my mobo supports unbuffered ecc too. maybe I should found some of those instead.
[16:26:02] <Raziel> cbreak, dual rank 32gb sticks
[16:26:14] <cbreak> so probably 2Rx16
[16:26:17] <cbreak> with 2GB chips
[16:26:29] <Raziel> well... 2Rx16 would be dual rank 16gb sticks
[16:26:30] <mort> ime there are so many sources of instability in a normal desktop system that I can't imagine ECC matters much
[16:26:31] <shailangsa> cbreak they do https://www.msi.com/Motherboard/MAG-Z690-TOMAHAWK-WIFI-DDR4/Specification
[16:26:53] <mort> just having the giant buggy pile of garbage nvidia calls their GPU drivers surely outweighs anything related to memory bit flips
[16:26:55] <cbreak> shailangsa: no
[16:27:13] <cbreak> shailangsa: the memory module specs don't list which chips they use
[16:27:23] <shailangsa> 5200(OC)/ 5066(OC)/ 5000(OC)/ 4800(OC)/ 4600(OC)/ 4400(OC)/ 4266(OC)/ 4200(OC)/ 4133(OC)/ 4000(OC)/ 3800(OC)/ 3733(OC)/ 3600(OC)/ 3466(OC)/ 3400(OC)/ 3333(OC)/ 3200(OC)/ 3200(JEDEC)/ 2933(JEDEC)/ 2666(JEDEC)/ 2400(JEDEC)/ 2133(JEDEC) MHz
[16:27:29] <cbreak> that's not a chip.
[16:27:39] <Raziel> indeed
[16:27:41] <cbreak> those are frequencies.
[16:28:19] <Raziel> gotta be honest, RAM is a confusing mess of absolute shit currently. if you wanna know if anything high-end or super saturated is gonna work with a certain mobo, you might as well just pray for a sign
[16:28:21] <Latexi95> You are wrong about the coloring of RAM slots. They aren't colored by the channels (because average user doesn't understand those). Instead they are colored so that same color slots belong to the different channels so that the instructions can say that if you have 2 sticks, put them to black slots of what ever.
[16:28:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e)
[16:28:33] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:d1b6:b8ac:f1fb:836e) (Changing host)
[16:28:33] *** Joins: skapata (~Skapata@user/skapata)
[16:28:38] <mort> Latexi95: huh, TIL
[16:28:45] <shailangsa> hmm chips? can you give an example? cant see what other information is relevant apart from the motherboard requiring DDR4
[16:28:48] <mort> I always assumed the same color was the same channel
[16:28:54] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:29:04] <mort> I've always filled all my slots anyways so it hasn't bitten me but good to know
[16:29:20] <cbreak> Raziel: I use https://www.kingston.com/dataSheets/KSM26ED8_16ME.pdf, those are dual-rank modules with 8 chips, 2Rx8
[16:29:29] <cbreak> 16 GB per module
[16:29:35] <cbreak> the x8 means 8 chips, not 8GB
[16:29:58] <Raziel> cbreak, oh i c
[16:30:00] *** Quits: AmR (~AmREiSa@156.199.223.24) (Quit: Konversation terminated!)
[16:30:38] <Raziel> so are 32gb sticks still 2Rx8 with higher capacity chips or are they, like, 2Rx16?
[16:30:41] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Remote host closed the connection)
[16:30:46] <cbreak> shailangsa: you should at least know the layout of chips on the memory module, maybe the manufacturer
[16:31:06] <shailangsa> im sure when setting the xmp profile only the dimms per channel really matters given that we have no control over the ranks of the sticks nor the chips
[16:31:13] <cbreak> Raziel: both is possible, if 4GB chips exist :)
[16:31:29] <cbreak> shailangsa: you have control over that
[16:31:38] <cbreak> by buying different modules
[16:31:46] <cbreak> and ideally you buy modules that work together
[16:31:48] <mort> the rank is a property of the RAM stick
[16:32:05] <mort> the dpc is a property of how you insert sticks into your ram slots
[16:32:06] <shailangsa> but retalers dont even specify the ranks or the chips per module
[16:32:09] <cbreak> my mainboard lists exactly which combination of single-rank / dual-rank modules are supported at which load
[16:32:11] <Raziel> shailangsa, trying to buy kits with certain chips is absolute bullshit. and unfortunately it does matter.
[16:32:27] <cbreak> typically, you will only reach high frequencies with one or two modules
[16:32:53] <Raziel> some kits do only use specific chips and tell you what they use, but a lot don't tell you what they use and can even use different chips between batches, so you're shit outta luck until you can physically inspect them
[16:33:34] <shailangsa> but theyll still work right?
[16:33:44] <cbreak> maybe.
[16:33:55] <shailangsa> albeit at the frequency of the lesser stick
[16:34:00] <Raziel> using sticks with different chips on them on the same mobo significantly increases the chance of shit going wrong
[16:34:05] <Raziel> even if they are the same freq and timings
[16:34:21] <cbreak> it might work if they're in different banks
[16:34:26] <cbreak> or not.
[16:34:26] <mort> interesting, my sticks don't document their rank either
[16:34:33] <mort> https://www.kingston.com/en/gaming/hyperx-predator-ddr4-rgb
[16:34:51] <mort> (yes ik fuck RGB, they were the best performance and size per price they had)
[16:35:07] <Raziel> mort, that's not a specific model tho, that's an entire family
[16:35:16] <Raziel> different models in that family may and probably do use different rank
[16:35:34] <cbreak> mort: got linux?
[16:35:42] <Haohmaru> why would you put RGB crap on a stick of RAM
[16:35:48] <Haohmaru> or on anything
[16:35:56] <cbreak> Haohmaru: led-blink-debugging
[16:36:03] <Haohmaru> really?
[16:36:07] <cbreak> ... no...
[16:36:07] <Raziel> lol
[16:36:39] <cbreak> mort: dmidecode might tell you more about your modules
[16:36:41] <Raziel> Haohmaru, it's so you can have aurora borealis localized entirely within your computer case
[16:36:41] <Haohmaru> if your RGB doesn't work, your gaming experience goes negative
[16:36:48] <mort> Raziel: I don't see where they document the specific models either tho
[16:37:02] <Raziel> mort, they definitely have to somewhere v:
[16:37:30] <mort> dmidecode says rank 2
[16:37:48] <Haohmaru> Raziel ever since this RGB LED madness, i've never seen anything beautiful being displayed on them, apart from fuggly HSL/HSV 100% saturated "rainbow"
[16:38:12] <mort> Haohmaru: I don't like it myself
[16:38:18] <shailangsa> only bought RGB because non RGB sold out
[16:38:20] <Raziel> Â¯\_(ãƒ„)_/Â¯
[16:38:26] <Raziel> nothin wrong with people liking their rainbows
[16:38:29] <mort> but in my case, the RAM sticks are completely covered by the white metal case so I don't have to look at it
[16:38:31] <cbreak> as long as it can be disabled
[16:38:46] <Haohmaru> Raziel they should learn how to make a rainbow with RGB
[16:39:02] <cbreak> it's obvious that a 2W set of LEDs increase heat load of 4W RAM by 50%
[16:39:03] <Haohmaru> not this ugly HSL crap
[16:39:07] <cbreak> so it's bad for cooling and performance
[16:39:17] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Ping timeout: 252 seconds)
[16:39:28] <Raziel> Haohmaru, I've done some rgb programming myself and hsl is a lot nicer to work with for that purpose
[16:39:44] <mort> hsluv > hsl
[16:39:47] <Haohmaru> it's wrong tho
[16:39:57] <Haohmaru> i mean, it's an ugly compromise
[16:39:58] <Raziel> now, the fact that they can't get creative with their patterns or such, that's their problem :p
[16:39:58] <mort> you gotta have visually uniform hue
[16:40:35] <cbreak> any color space that can represent black is fine.
[16:40:47] <mort> well, yes
[16:41:26] <Raziel> hsl and rgb do losslessly convert between eachother across the entire spectrum
[16:41:37] <Raziel> so it's not a limitation of hsl that rgb doesn't have or anything
[16:41:51] *** Joins: uzer1 (~uzer@dsl-trebng11-54f912-114.dhcp.inet.fi)
[16:42:15] <mort> wait let me whip up an example of problems with hsl
[16:43:02] <Haohmaru> f*ck it, HSL/HSV is just "meh" and wrong
[16:43:10] <Haohmaru> HSB too
[16:43:14] <Raziel> the main point of hsl is it makes it far easier/nicer to programmatically make smooth transitions, as far as I've seen
[16:43:27] <Haohmaru> except, they're not smooth
[16:43:35] <Haohmaru> they are junk in the middle, usually
[16:44:48] <Raziel> the LEDs themselves usually want rgb signals, or rgbw if they're fancy
[16:45:02] <Haohmaru> that's totally fine
[16:47:20] <Raziel> so what representation model or such do you think would be better for nice mathematical/programmatic manipulation, if not hsl?
[16:48:36] <cbreak> Raziel: xyz :D
[16:48:45] <cbreak> or linear RGB
[16:50:33] <mort> Raziel: https://s.mort.coffee/hslbad/ check this out
[16:50:55] <mort> the top is hsl, the bottom is hsluv, both are going through the hue circle with saturation=1 luminance=0.6
[16:51:21] <mort> the hsluv one is more or less uniform, the hsl one varies wildly in light intensity, from very bright green to very dark blue
[16:52:02] <Raziel> they both look pretty bad tbh. v:
[16:52:43] <mort> neither is a pretty rainbow I agree
[16:53:28] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[16:54:12] <Haohmaru> rainbows are difficult
[16:54:41] <cbreak> for nice rainbows, use frequency encoding.
[16:54:45] <Haohmaru> yeah
[16:54:58] <mort> huh?
[16:55:06] <Haohmaru> iirc there should be formulas for frequency -> XYZ maybe
[16:55:25] <Haohmaru> or xyY
[16:55:34] <Raziel> isn't xyz a color space rather than a model?
[16:55:50] <Haohmaru> it's a colorspace
[16:56:13] <Haohmaru> it's kinda used as the one that can bridge all others together
[16:56:24] <Haohmaru> or something like that
[16:56:34] <Haohmaru> xyY is also very related to it
[16:56:58] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[16:57:07] <Raziel> we don't really care about the color space though, don't we? we want a nice way to represent color mathematically that makes it nice to manipulate it
[16:57:15] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[16:57:15] <Raziel> the color space is gonna different with the hardware anyway
[16:57:19] <Haohmaru> if you wanna make your own colorspace, you just need to be able to convert it to and from XYZ and you're good
[16:57:30] <Raziel> differ* even
[16:57:35] <mort> if you wanna manipulate colors you probably want something linear
[16:57:41] <mort> well
[16:57:44] <mort> depends on the manipulations
[16:58:00] <mort> if you do light math in a game or something, stuff like adding together light sources, you probably want a linear color space
[16:58:34] <Haohmaru> you ALWAYS want linear color space for any kind of processing
[16:58:54] *** Joins: JohnMS_AWAY (~kvirc@213.134.183.29)
[16:58:59] <mort> and most processing is done in something approximating sRGB
[16:59:02] <Haohmaru> the gamma compression sh*t comes as a cheat because of how humans see
[16:59:11] <mort> so most color processing is broken
[16:59:19] <Haohmaru> yes
[16:59:33] <cbreak> the only reason I see to not use linear colorspaces is if you want to work perceptually
[16:59:36] <Raziel> well cheating according to how humans see is the only thing we care about if we want to make a nice rainbow to be perceived by humans
[16:59:46] <Haohmaru> even basic sh*t like resizing an image is done wrong in most graphics apps
[16:59:54] <cbreak> and if you want to do that, you'd want to use a perceptual color space like CieLAB
[16:59:56] <mort> gamma correction is a form of compression, nothing more
[17:00:04] <Haohmaru> Raziel no
[17:00:07] <mort> makes it possible to represent colors in 8 bits per channel without it looking *too* garbage
[17:00:31] <mort> ideally we'd be using linear rgb everywhere and store data in floats
[17:00:41] <mort> or maybe half floats
[17:00:51] <LordKalma> 32 bit depth? damn son
[17:01:19] <mort> ye hence the "maybe half floats"
[17:01:28] <Haohmaru> yeah, ideally we'd store linear RGB
[17:01:30] <Raziel> I do store rgb in normalized floats sometimes
[17:01:34] <Raziel> some things can even take it as such :p
[17:01:47] <LordKalma> a normalized -1,1 float is about 28 bit-ish
[17:01:48] <LordKalma> iirc
[17:02:06] <cbreak> mort: welcome to EXR :)
[17:02:08] <mort> hmm I feel like you'd usually want [0-1]
[17:02:11] <Raziel> for this I'd imagine 0 to 1 makes more sense
[17:02:14] <Raziel> but yeah
[17:02:16] <mort> but then you're wasting like 3/4 of the space
[17:02:25] <LordKalma> I know that fact about -1,1 because it's common in DSP
[17:02:36] <LordKalma> and I know it's about 28 bits of dynamic range
[17:02:37] <cbreak> almost all the image data I work with at work is EXR, in 16 bit or 32 bit float
[17:02:39] <mort> [-1,1] only wastes about half of all possible float values afaik
[17:03:01] <mort> well that doesn't make sense if it's 28 bits
[17:03:09] <Raziel> fuck it, shove it in a double :^)
[17:03:21] <mort> I keep all my color channels in long doubles, don't you?
[17:03:43] <Haohmaru> i use rgb float ;P~
[17:03:45] <LordKalma> I've used a >600fps camera at work, via an USB 3 bus
[17:03:50] <LordKalma> with long doubles... it would be interesting
[17:03:50] <cbreak> often, 16 bit is enough for color, but you'd want 32 bit for depth or sample count
[17:03:51] <LordKalma> haha
[17:03:52] <Haohmaru> or anything float
[17:04:10] <mort> GPUs deal in vectors of 4 floats to represent colors
[17:04:28] <mort> tho usually they're using 4 floats to represent non-linear color >.>
[17:04:34] <LordKalma> GPUs have optimized pipelines beyond mortal comprehension
[17:04:34] <cbreak> mort: for HDR, the values can go past 1
[17:04:37] <Raziel> GPUs deal in floats, pretty much period
[17:04:46] <cbreak> and when artists are being artists, values can go below 0...
[17:04:46] <Raziel> if you declare an int in a shader, it'll probably actually be a float
[17:05:03] <mort> I wish HDR was just... more bits to represent the range [0,1]
[17:05:14] <Haohmaru> cbreak some color conversions can produce negative values
[17:05:23] <Haohmaru> ;P~
[17:05:25] <mort> Haohmaru: that's what we call a bug
[17:05:26] <LordKalma> mort, that would break existing films
[17:05:29] <Raziel> it's not like normalizing to any random range you'd like is difficult, but yeah
[17:05:35] <Haohmaru> mort no, it's mathz
[17:05:39] <cbreak> 1 is standard maximum luminance, values above that are past the limit :)
[17:05:40] <mort> LordKalma: turn down the brightness?
[17:05:41] <LordKalma> you'd be compressing everything in existance instead of expanding new videos
[17:06:10] <mort> ugh I do get it though
[17:06:17] <cbreak> that way, the "exposure" is kind of encoded in the image data
[17:06:20] <mort> it's just so annoying to deal with
[17:06:23] <LordKalma> mort, what I mean is, you have old videos with a certain notion of what it meant to be [0,1]. If you expand that definition you're compressing the dynamic range of the old ones
[17:06:28] <mort> I have a PR for one of my projects to support HDR and I'm kind of dreading it
[17:07:45] <mort> sometimes I wonder if 8 bits is the correct unit of information, if maybe having 10- or 12-bit bytes would've made a lot of thins a whole lot easier
[17:07:58] <Raziel> from 8 bits to 12 bytes eh? that's a leap
[17:07:59] <Raziel> :^)
[17:08:00] <LordKalma> well, thank history for that I guess
[17:08:12] <Raziel> I guess there were 7bit systems...
[17:09:06] <Raziel> but, I don't really see how 8bit being the "base" unit actually limits anything bigger, except for how at points you'll be wasting some bits
[17:09:13] <Raziel> but wasting some bits is gonna happen with any base other than 1
[17:10:08] <LordKalma> I propose we use BCD for everything
[17:10:32] <mort> hmm using 4-bit bytes could be interesting actually
[17:11:15] <mort> each "byte" would be 1:1 to a hex character, and we would never had thought "oh but with this hack we can store one color channel per byte and it looks good"
[17:11:17] <mort> eh
[17:11:38] <mort> we would probably have said "oh but with this hack we can store one color channel per 2 bytes and it looks good", not just go straight to 12 bits per channel
[17:11:45] <cbreak> mort: 8 bit bytes is not a problem
[17:12:01] <cbreak> my camera gives 10bit/pixel RAW files
[17:12:03] <Raziel> I don't think anyone was thinking about color spaces when they made cpus work on 8 bits of data at a time, to be honest
[17:12:04] <Raziel> lol
[17:12:13] <mort> 10 bits/channel is hard to work with though
[17:12:21] <cbreak> it's just for storage
[17:12:23] <Haohmaru> why?
[17:12:35] <cbreak> in RAM it's obviously unpacked
[17:12:36] <Haohmaru> you convert it to float and you forget how many bits it was
[17:12:40] <mort> you can expand it to 16 bits per channel in memory but that's a lot of wasted ram
[17:12:55] <Raziel> it's not *that* much wasted ram
[17:12:58] <mort> true
[17:13:06] *** Quits: frost (~frost@user/frost) (Quit: Connection closed)
[17:13:09] <Raziel> and besides, all those zeroes? they get compressed whenever they're in an actual file :p
[17:13:11] <Haohmaru> proper color processing eats RAM, yeah, so don't write such apps in silly languages like snek script
[17:13:22] <Raziel> they only get expanded whilst buffering
[17:13:38] <mort> I bet python is pretty good when it comes to ram usage, you would use numpy for packed arrays of u16
[17:13:55] <mort> performance for anything which has to iterate through pixels is where you'd encounter issues
[17:13:58] <Raziel> "I bet python is pretty good when it comes to ram usage, when it uses C++/CUDA"
[17:13:59] <Raziel> lol
[17:14:04] <mort> yes
[17:14:08] <LordKalma> numpy is pretty much a C array in disguise
[17:14:11] <mort> yes
[17:14:15] <LordKalma> but if you want to bitch about it
[17:14:25] <LordKalma> python does have memory contiguous arrays in the stdlib
[17:14:43] <mort> TIL, never seen anyone use that
[17:14:45] <mort> everyone uses numpy
[17:14:51] <LordKalma> indeed
[17:14:54] <Haohmaru> is numpy like a .dll thing?
[17:15:00] <LordKalma> it's a python package
[17:15:00] <Haohmaru> written in a proper language
[17:15:02] <LordKalma> (pip)
[17:15:03] <rpav> if you're iterating over pixels in anything on the cpu you probably don't care _that_ much about performance ;)
[17:15:09] <LordKalma> yes it has parts in C(++) an fortran
[17:15:19] <Haohmaru> so then it doesn't count
[17:15:21] <mort> there are pretty good reasons to iterate over pixels on the CPU sometimes
[17:15:21] <Raziel> parts being most of it
[17:15:26] <LordKalma> there: https://docs.python.org/3/library/array.html
[17:15:37] <rpav> that is not mutually exclusive with what i said
[17:15:39] <Raziel> mort, such as?
[17:15:45] <cbreak> rpav: I've done it in performance critical code. It's not that bad, if you use parallelization via OpenMP, and have a good compiler
[17:15:53] <Raziel> any "iterate over pixels" operations I've seen can be done faster on a gpu
[17:15:54] <mort> I wrote an algorithm which adds sort of blurred letterboxes to the sides or top/bottom of an image to make it fit a particular aspect ratio
[17:15:55] <rpav> i have a JS library that iterates over pixels quite a bit and writes tilemaps etc .. it's even pretty snappy
[17:15:57] <Haohmaru> i could make a mirc dll too but that's cheating, i generally wouldn't do anything serious with color processing in mirc scripts
[17:16:05] <mort> the weak embedded CPU can do it in like 100ms iirc
[17:16:16] <mort> and it means we have a stupid pixel buffer which we can do whatever we want with
[17:16:17] <Raziel> 100ms would be unacceptable for anything realtime
[17:16:35] <mort> this just has to do it once then display the image for a bunch of seconds then maybe go to the next one
[17:16:40] <LordKalma> Haohmaru, not sure I agree with the point.  Using well established libraries isn't cheating in any way
[17:16:41] <rpav> cbreak: "but threads" doesn't get you _that_ much speedup _and_ you have to be careful, but sure
[17:16:47] <LordKalma> by that reasoning you can't use CUDA then
[17:16:48] <mort> "a bunch of seconds" meaning 20 to 60*5 ish
[17:16:53] <Raziel> butt threads?
[17:17:14] <Haohmaru> rpav iterating over pixels can mean different things, if you do proper color processing there's a lot involved
[17:17:16] <Raziel> LordKalma, I think it's only cheating in the sense that we like to shit on python
[17:17:21] <mort> Haohmaru: when you're using numpy, you're not writing your code in C and calling it from python
[17:17:23] <Raziel> and that anything fast in python is actually C/C++
[17:17:28] <cbreak> rpav: with OpenMP it was rather ok. The processing is embarassingly easy to parallelize
[17:17:36] <mort> Haohmaru: when you're using numpy, you're writing all your code in python, the python code just ends up calling existing C functions under the hood
[17:17:38] <LordKalma> Python is surprisingly fast as regexing for some reason
[17:17:47] <LordKalma> I saw a benchmark and it was on par with pure C
[17:17:48] <LordKalma> go figure
[17:17:48] <LordKalma> hahah
[17:17:50] <mort> python's regex match is probably also just a call to a C function
[17:17:52] <Haohmaru> mort yes, same sh*t
[17:17:58] <mort> Haohmaru: no, not same shit
[17:18:10] <Haohmaru> ..as if i made a dll for mirc
[17:18:11] <mort> Haohmaru: in one case you're writing C and calling it from python, in the other case you're writing python
[17:18:14] <rpav> Haohmaru: i _didn't_ say there's _no reason_ to do pixel work on the cpu :P
[17:18:31] <LordKalma> mort, still you have to pay for the byte-code shennanigans in the meanwhile
[17:18:32] <rpav> just that you probably don't have like nanosecond-scale considerations if you are
[17:18:38] <mort> LordKalma: yes
[17:18:44] <LordKalma> the problem with python is that it's slow, yes, of course it is
[17:18:53] <Haohmaru> mort in fact i do have a dll which adds math functions like atan2() and such
[17:18:53] <LordKalma> even node.js is faster
[17:18:58] <mort> python is pretty good at orchestrating fast components written in C or fortran
[17:19:00] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[17:19:04] <LordKalma> mort, exactly
[17:19:15] <LordKalma> I see python as an orchestration language
[17:19:20] <Raziel> the actual problem with python is that it doesn't run if your tabs aren't exactly as long as it wants. :^)
[17:19:23] <mort> and when someone else is writing those fast components, python becomes a valuable tool to do fast number crunching actually
[17:19:34] <Haohmaru> it's still interpreted, isn't it?
[17:19:37] <LordKalma> Raziel, you just have to be consistent inside the same level, ffs
[17:19:51] <mort> python is compiled to bytecode and then a vm type thing executes the bytecode
[17:19:52] <LordKalma> Python is *the* data science language atm
[17:19:55] <Haohmaru> maybe it's not as slow as mirc script
[17:20:05] <Haohmaru> oh
[17:20:09] <Haohmaru> okay then
[17:20:23] <Haohmaru> i thought it's interpreted
[17:20:29] <mort> my own bytecode interpreted language that's very very slow due to design decisions is 5x slower than python in most tests I've done, I'd expect it to be orders of magnitude
[17:20:32] <LordKalma> and it is, read line by line
[17:20:48] <LordKalma> but each "Interpretation" is a translation into byte code
[17:20:49] <cbreak> if you use tensorflow or pytorch, there are all kinds of nasty hacks translating that python code to an optimized graph, or optimizable intermediat elanguage
[17:21:01] <mort> LordKalma: no, I'm pretty sure it's just literally compiled ahead of time
[17:21:07] <cbreak> hacks that are hidden until they blow up in your face
[17:21:07] <LordKalma> there's numba to literally compile python
[17:21:09] <mort> to bytecode, not machine code
[17:21:21] <Raziel> Why is python the data science language, and why is it because data scientists can't actually code?
[17:21:36] <LordKalma> mort, now that you mention it, yeah, files are indeed parsed once before executing
[17:21:48] <cbreak> why? Because scientists like it, and other scientists do what the scientists before them did
[17:21:49] <LordKalma> but on the other hand, you do have the RPL
[17:21:59] <LordKalma> *REPL
[17:22:02] <Haohmaru> we should teach scientists to C++
[17:22:03] <Raziel> cbreak, I thought scientists were supposed to be about innovation
[17:22:07] <mort> I'd guess the repl just compiles your input to bytecode and then executes that?
[17:22:10] <mort> that's how my repl works at least
[17:22:27] <Raziel> Haohmaru, good luck
[17:22:30] <LordKalma> Raziel, scientists are busy innovating and advancing their fields
[17:22:33] <cbreak> Raziel: incremental innovation based on copy & pasted hacky code from some previous paper :/
[17:22:33] <LordKalma> not writing tooling
[17:22:43] <LordKalma> I wouldn't do any of my daytime job work in C++
[17:22:48] <mort> https://github.com/mortie/gilia/blob/main/cmd/main.c#L130 I hate this code, and it's C, but it's an example of a repl which works in a language which compiles to bytecode
[17:22:51] <Haohmaru> Raziel bring me a crowd of scientists into this channel
[17:22:52] <Haohmaru> ;P~
[17:22:56] <LordKalma> it would be a very dumb decision
[17:23:01] *** Joins: Simplar (~Simplar@188.163.93.76)
[17:23:02] * LordKalma is a scientist
[17:23:04] <LordKalma> still uses python
[17:23:08] <Haohmaru> LordKalma LISTEN HERE
[17:23:19] <Raziel> LordKalma, my daytime job is in C++ and it does sometimes involve big data crunching. it's fun. :p
[17:23:36] * Haohmaru aggressively deletes LordKalma's snek runtime sh*t
[17:23:46] <LordKalma> It's so easy and good to use a notebook to just orchestrate VISA equipment
[17:23:51] <LordKalma> and then process somet things
[17:24:00] <LordKalma> and get it wrong and not having to rebuild and restart
[17:24:07] <LordKalma> it's a great bodging ecosystem
[17:24:13] <Raziel> then again, I could've chosen any languages and frameworks I wanted for that big data crunching, and I chose to do it in C++ rather than python or such.
[17:24:17] <Raziel> so maybe I'm just a masochist.
[17:24:23] *** Quits: proller (~p@2a02:6b8:0:51e:5942:3b72:6869:a157) (Ping timeout: 252 seconds)
[17:24:24] <LordKalma> you definitely are
[17:26:02] <mort> I sometimes feel like "python for data analysis" is a very different (and much harder) language than normal python
[17:26:11] *** Quits: Simplar (~Simplar@188.163.93.76) (Client Quit)
[17:26:27] <LordKalma> it's a different idiom
[17:26:29] <mort> exactly since you're just massaging data for numpy to deal with and you can't do any of the stuff you can in C++ like just iterating through the data and doing whatever you want
[17:26:42] <LordKalma> you have to learn to be declarative
[17:26:46] <mort> yeah
[17:26:48] <LordKalma> and not double-for things
[17:26:57] <Haohmaru> on the topic of most graphics processing being wrong, i also say most displays are wrong too
[17:27:10] <Haohmaru> like LCD sh*t
[17:27:29] <mort> I think displays are excused at least for the sRGB stuff, you want to compress the data going over the wire somehow
[17:27:43] <mort> so both YUV420 and gamma correction makes sense there
[17:27:55] <mort> tho you may be referring to something else, not sure what LCD shit entails
[17:28:02] <Haohmaru> no, this is not because of sRGB but about image reproduction
[17:28:21] <Haohmaru> and pixel geometry and sh*t
[17:28:47] <mort> aren't LCD pixels mostly just squares with rectangular subpixels
[17:28:48] <Haohmaru> due to all that we get crap like "sub-pixel" rendering which is completely bullsh*t wrong
[17:29:00] <mort> well
[17:29:20] <mort> sub-pixel rendering is a software hack to get more horizontal resolution at the price of color accuracy
[17:29:32] <Raziel> Haohmaru, well when you can make a screen that has infinite pixels, subpixel rendering is going to correctly map to the hardware too
[17:29:36] <mort> I don't think macOS has done subpixel rendering for ages, not sure how the state is on other systems
[17:29:51] <Haohmaru> thing is, as far as i understand "digital sampling" and sh*t, the pixels on a monitor should NOT be "a square with a solid color"
[17:30:02] <mort> yeah they should definitely be some kind of blue noise
[17:30:11] <mort> to avoid moire patterns
[17:30:17] <mort> same with cameras
[17:30:38] <Raziel> subpixel rendering as far as *actual renderers* goes has a different meaning
[17:30:58] <Haohmaru> it should be more like infinitely small dots of light, surrounded by black, and then a sinc()-grade optical lowpass filter
[17:31:05] <mort> HiDPI screens are effectively "infinite pixels" for the purposes of font rendering I feel
[17:31:08] <Raziel> it refers to the fact that, well, the rendering space does not work on pixels, it works on a float coord system that has to then be mapped to the actual monitor resolution
[17:31:09] <Haohmaru> that's gonna be difficult to make, so you approximate it
[17:31:38] *** Joins: reumeth (~reumeth@user/reumeth)
[17:32:31] <mort> Raziel: subpixel rendering when talking about text rendering refers to treating each pixel as essentially 3 pixels laid out horizontally, since you can control which sub-pixel is enabled by controlling the color of the pixel
[17:32:54] <Haohmaru> mort yeah but that's wrong and bad
[17:32:57] <Raziel> mort, that's a bullshit marketing term coined by whoever implemented that variant of text rendering
[17:33:11] <mort> Raziel: no, it's very accurate to what it does, it renders using sub-pixels
[17:33:19] <mort> https://ak.picdn.net/shutterstock/videos/1861414/thumb/1.jpg this is a common layout for LCD screens
[17:33:23] <LordKalma> Well, for years MS has a very large edge in text rendering thanks to TrueType
[17:33:28] <mort> you can control each subpixel individually
[17:33:31] <LordKalma> iirc now FreeType on free implementations
[17:33:34] <Haohmaru> this sort of thing is some compromise-based post-processing thing which should NOT be done to images
[17:33:49] <Haohmaru> it could be done by the $display
[17:34:03] <Haohmaru> but i still say f*ck it and forget it
[17:34:20] <mort> if you want a character to be drawn such that the rightmost 2/3 of the pixel is on and the leftmost third is off, you draw the pixel with r=0 g=255 b=255
[17:34:32] <Raziel> but that's dumb.
[17:34:37] <mort> that might be
[17:34:38] <Raziel> because then you'll get a fuckin colored pixel.
[17:34:40] <Haohmaru> mort that's wrong
[17:34:41] <mort> yes
[17:34:47] <Haohmaru> you get fringing
[17:35:00] <mort> Haohmaru: is it a wrong description of subpixel rendering or is it your opinion that one shouldn't do subpixel rendering
[17:35:05] <Haohmaru> not to mention that you seem to start to think that you have 3x the horizontal resolution
[17:35:10] <Haohmaru> but you.. don't
[17:35:29] <Haohmaru> so you violate the nyquist theorem
[17:35:30] <Raziel> Haohmaru, I guess you do if all your users start seeing in black and white
[17:35:37] <mort> Haohmaru: but is it a wrong description of subpixel rendering or is it your opinion that one shouldn't do subpixel rendering
[17:35:37] <Raziel> and they also normalize any color to white
[17:35:40] <Haohmaru> or however it was called
[17:35:45] <Raziel> >_>
[17:36:07] <mort> because my description of subpixel rendering isn't supposed to be normative, I'm not saying it's good or bad, just trying to accurately describe what it is
[17:36:31] <Haohmaru> mort yes, your description is right, the whole idea is wrong and bad
[17:36:45] <mort> alright
[17:37:10] *** Joins: proller (~p@2a02:6b8:b081:6404::1:8)
[17:37:26] <mort> well, the hypothesis behind it is that humans are more sensitive to resolution than to color, so on low-res screens it's okay to sacrifice some color accuracy to gain some resolution
[17:37:37] <mort> but that doesn't mean one has to like it
[17:37:40] <cbreak> subpixel rendering makes sense, kind of
[17:37:47] <cbreak> it's the opposite of debayering
[17:37:49] <mort> I don't think I've used a system with subpixel text rendering in a long time
[17:38:06] <Haohmaru> you don't have 3x more resolution in one axis, you cannot make "finer details", you are only making sh*t fringy and ugly, and now this final image will look wrong on my other displays
[17:38:16] <Haohmaru> ..if it looked "good" on yours
[17:38:36] <cbreak> Haohmaru: normally, subpixel rendering is done for your display only, i.e. for UI text rendering
[17:38:49] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:38:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:38:57] *** ChanServ sets mode: +v npaperbot
[17:39:02] <Haohmaru> it makes sense but it's wrong
[17:39:17] <Haohmaru> and our displays are wrong
[17:39:24] <cbreak> Linux with KDE supports it
[17:39:44] <cbreak> android also supports it I think
[17:39:57] <cbreak> and OLED screens are even weirder, they can have a hexagonal color pattern
[17:40:02] <cbreak> not just rectangles like LCDs
[17:40:27] <Raziel> aw man now I turned off cleartype and most fonts that used it look like ass
[17:40:28] <Haohmaru> hex grid pattern is probably the best chance for proper image reproduction we can do
[17:40:48] <Haohmaru> however, it'd be kinda inconvenient to deal with
[17:42:16] *** Quits: proller (~p@2a02:6b8:b081:6404::1:8) (Ping timeout: 264 seconds)
[17:42:36] <Haohmaru> and because of the bayer pattern thing in most camera sensors, you often get a lot of attention to aliasing/moire/sharpness tests in camera reviews
[17:42:39] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Remote host closed the connection)
[17:42:57] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[17:42:59] <Haohmaru> there were iirc sensors which didn't use bayer pattern but it's rare
[17:43:49] <Haohmaru> but perhaps a decent optical lowpass filter can make things better there, you'd put one on a decent camera
[17:43:57] <Latexi95> OLEDs also may have more subpixels for blue(?) color because it is harder to get the same brightness
[17:44:14] <Haohmaru> nah
[17:44:21] <cbreak> Haohmaru: that's all normal
[17:44:25] <Haohmaru> our eyes are less sensitive to blue
[17:44:47] <Haohmaru> but they don't put optical lowpass on displays ;P~
[17:44:54] <Haohmaru> or at least i haven't seen one
[17:45:04] <Haohmaru> nobody talks about the aliasing of displays
[17:45:12] <cbreak> I have a Sony AR2, a "resolution" camera. It doesn't have a low-pass filter. But many other A7 do have a low pass
[17:45:15] <mort> https://en.wikipedia.org/wiki/PenTile_matrix_family#/media/File:Nexus_one_screen_microscope.jpg this shows the subpixels for an amoled screen
[17:45:24] <cbreak> an actual optical diffusion layer in front of the sensor
[17:45:24] <Haohmaru> instead, they decided to hide the ugliness via high DPI
[17:45:25] <mort> little green, a lot of blue
[17:45:45] <cbreak> my camera still has a bayer filter and an IR filter. But there are companies that remove both for you
[17:45:52] <Raziel> mort, pentile matrix screens were shat on by everyone with working eyes
[17:45:58] <mort> yes
[17:45:59] <cbreak> which will give you a bayer-pattern free sensor capable to capture a wide spectrum of colors
[17:46:05] <cbreak> you just won't know which colors it captured :D
[17:46:30] <mort> https://www.displaymate.com/iPhone_13Pro_Diamond_Pixels_1M.jpg this is apparently the subpixels for an oled iphone
[17:46:59] <cbreak> mort: suspiciously looksl ike a 45 degree rotated bayer pattern to me
[17:47:42] <Haohmaru> just to be different ;P~
[17:48:17] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[17:48:42] <Haohmaru> high DPI is the other bullsh*t i hate
[17:48:57] <mort> why would you hate screens with high enough DPI to not require subpixel rendering
[17:49:20] <Haohmaru> now you have 4x faster GPU? oh how exciting, but wait, you bought a monitor which needs 8x more resolution, aww
[17:49:47] <mort> the obvious resolution is to do gaming at a lower resolution and upscale and do everything else at native high resolution
[17:50:18] <mort> sadly upscaling algorithms have sucked for a long time
[17:50:33] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[17:50:34] <mort> but things like amd's fxr make that less of a problem
[17:50:35] <Haohmaru> subpixel rendering isn't a cure for low DPI
[17:50:51] <mort> subpixel rendering is a hack to get more horizontal resolution at the price of color accuracy
[17:51:02] <mort> it does genuinely work for what it's designed for
[17:51:09] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[17:51:15] <mort> it just fucks up colors so it's nicer not to have to do it to get reasonable horizontal resolution
[17:51:42] <Haohmaru> you should just use proper antialiasing without subpixel bullsh*t
[17:52:00] <Raziel> amd fsr doesn't really fix anything, it still looks like ass compared to native rendering
[17:52:08] <Haohmaru> your display being wrong makes proper antialiasing difficult tho
[17:52:30] <Haohmaru> makes it look wrong
[17:52:56] <Haohmaru> so some change the font antialiasing algo to "compensate" for the wrong'ness of the display
[17:52:58] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Read error: Connection reset by peer)
[17:53:09] <Haohmaru> windows calls that "font antialiasing callibration" or some such
[17:53:17] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[17:53:35] <Haohmaru> that's wrong too.. it results in the creation of wrong images
[17:53:53] <Raziel> of course it's technically wrong, it just asks "which looks better/more readable to you"
[17:54:03] <Haohmaru> one day if we have good image reproduction displays, all those screenshots from today will look wrong (as they really are)
[17:55:01] <Haohmaru> ..or if the wrong'ness of displays changes
[17:55:35] *** Joins: AmR (~AmREiSa@156.199.223.24)
[17:56:22] <Haohmaru> i'd like to have proper antialiasing, so that the actual image is "right", if that then looks bad on the monitor - f*ck that monitor, i will curse at it and i'll try to get a better one
[17:56:47] <Haohmaru> (it will look bad, of course, the LCDs i have are lousy)
[17:56:53] *** Joins: seninha (~seninha@user/seninha)
[17:57:27] <LordKalma> we should just go back to dot matrix printer-based terminals
[17:57:42] <Raziel> what does proper antialiasing mean?
[17:57:50] <Haohmaru> nah, CRT monitors with the hex grid were better
[17:58:02] <Raziel> the whole purpose of it is to minimze certain distortions that occur because of imperfect hardware
[17:58:10] <Haohmaru> Raziel there's DSP and formulas and sh*t
[17:58:23] <Haohmaru> no
[17:58:38] <Haohmaru> the purpose of antialiasing is to NOT violate the sampling theorem
[17:58:39] *** Joins: proller (~p@2a00:1fa0:493:ac5d:29dc:15db:e56a:2585)
[17:59:03] <Haohmaru> more like, you should be doing band-limited image synthesis, or however it's actually called
[17:59:19] <Haohmaru> antialiasing is a way to prevent aliasing
[18:02:12] <smallville7123> https://gist.github.com/3aaf2aad1f101846a4659532680339fc how can i draw my canvas into my other canvas without needing to read it's pixels, as a bitmap just isnt fast enough
[18:02:48] <Haohmaru> or to reduce them
[18:03:01] <mort> in general, it's possible using OpenGL to render to a texture, and then you can probably download the texture into a buffer on your CPU
[18:03:10] <mort> that'd avoid having to copy on the CPU
[18:03:21] <Raziel> right, but aliasing *is* a sampling artifact. it would be reduced naturally if the hardware was capable of higher sampling rates.
[18:03:33] <Raziel> in the case of displays, that's dpi. v:
[18:03:46] <mort> I like my high DPIs
[18:03:51] <Haohmaru> Raziel aliasing means you did not band-limit your sh*t properly
[18:03:53] <mort> GPUs just have to be powerful
[18:04:07] <Haohmaru> if you did, you won't have it
[18:04:15] <Raziel> yeahhhh, no
[18:04:24] <Raziel> aliasing can happen just fine if you do that.
[18:04:39] <Haohmaru> i'm talking about the digital image here
[18:05:21] <Raziel> so how would that actually work for images/displays then?
[18:05:26] <Raziel> cause I know how it works for audio
[18:05:49] <Haohmaru> similarly to how you do it with audio
[18:06:11] <Raziel> only use half the... pixels? half the colorspace? half the refresh rate?
[18:06:32] <Haohmaru> either you generate the contend in a band-limited way (so you don't have freq content above nyquist) or you do some sort of antialiasing, like multisampling or whatever
[18:06:52] *** Quits: proller (~p@2a00:1fa0:493:ac5d:29dc:15db:e56a:2585) (Ping timeout: 264 seconds)
[18:07:22] <mort> anti-aliasing looks like crap when the screen you're rendering to is low res
[18:07:30] <mort> it's not like we're not multisampling
[18:07:31] <Haohmaru> for stuff like Cycles (blender) they already have to run a PILE of samples per pixel, so you get natural multi-sampling there
[18:07:34] <mort> it just doesn't look good
[18:08:00] <Haohmaru> mort that means either the antialiasing is sh*t or the monitor, or both
[18:08:12] <mort> the monitor is a grid of squares
[18:08:19] <Haohmaru> that's wrong then ;P~
[18:08:22] <mort> anti-aliasing to make a grid of coarse-grained squares look good isn't possible
[18:08:33] <Raziel> Haohmaru, right, I can set the renderer to MSAA 16x everything, and then I can also supersample everything by internally rendering at many times over the actual display res, assuming the hardware doesn't fukken die of old age before a frame is done
[18:08:35] <mort> what layout would you suggest
[18:08:51] <Raziel> but it still won't change the fact that the monitor doesn't have enough pixels to smoothly display this thin fuckin cable
[18:09:37] <Haohmaru> if you're trying to display a very thin line, thinner than the pixel pitch, then you CANNOT do that, of course
[18:09:45] <Raziel> :p
[18:09:55] <Haohmaru> the line will start becoming fainter and fainter the thinner it goes
[18:10:01] <Haohmaru> that's normal
[18:10:01] <Raziel> well that's one of the most common artifacts, in games at least. shimmering on thin shit.
[18:10:05] <Raziel> so how do we fix that?
[18:10:13] <mort> you can't just make the wire transparent, because it's not
[18:10:17] <Haohmaru> games are f*cking full of cheats and other wrongness
[18:10:32] *** Joins: luizfrds (~Luiz@152.250.243.147)
[18:10:37] <Raziel> yeah, mostly because without the cheats we'd be waiting a day for every frame, and that just won't do
[18:10:43] <Haohmaru> mort it's not transparent, but it would look like getting transparent
[18:10:45] <Raziel> so it is a hardware limitation v:
[18:10:58] <mort> Haohmaru: you would take an opaque cable and render it transparently
[18:11:34] <mort> with higher resolution, you can get much farther away from the cable before it starts getting transparent (or shimmery if you're doing it wrong)
[18:12:47] <Haohmaru> take a picture of a black cable on a bright background with a camera from far enough, and the cable should start to become fainter
[18:12:51] <Haohmaru> that's normal
[18:13:01] <Haohmaru> it should NOT become aliased tho
[18:13:18] <Haohmaru> (it can, if the camera is lousy enough)
[18:13:19] <mort> the cable becomes fainter as an artifact of quantization
[18:13:22] <mort> it's not how our eyes see
[18:13:36] <Haohmaru> uh, no
[18:14:24] <Haohmaru> if you print some black/white "noise" pixels on an A4 sheet, and look at it from far enough, it will eventually look gray-ish
[18:14:36] <Haohmaru> it won't look aliased-as-f*ck
[18:14:52] <Haohmaru> or a checkerboard pattern
[18:14:56] <mort> that's true
[18:15:28] <mort> apparently, part of the reason for that is that our eyes' light receptors are arranged in a blue noise pattern rather than a rigid patterns like they are with cameras and screens
[18:15:30] <Haohmaru> that's because you effectively have a blur (lowpass) effect
[18:15:59] <mort> well what I said is part of the reason it doesn't become a moire pattern not part of the reason why it looks grey I suppose
[18:16:15] <mort> so nvm me
[18:16:31] *** Joins: proller (~p@2a02:6b8:b081:8807::1:2d)
[18:17:09] <Haohmaru> make a thin black cable on a white background in blender (cycles) and make it so thin that it's thinner than 1 pixel
[18:17:10] <mort> anyways, with a higher resolution, you can render the cable correctly from further away
[18:17:21] <Haohmaru> it should start turning fainter
[18:17:39] <mort> yes, and the higher resolution you have, the longer it can stay opaque
[18:17:44] <Haohmaru> with enough "sampling" it should NOT get aliased
[18:18:00] <Haohmaru> not looking opaque isn't a problem
[18:18:11] <mort> I thought you complained about hidpi taxing the gpu earlier btw
[18:18:21] <mort> and now you're suggesting aggressive multisampling
[18:18:30] <Haohmaru> no
[18:18:49] <mort> I'd think the amount of samples per pixel you need decreases as the dpi increases?
[18:19:23] <Haohmaru> cycles (and similar) naturally have to sample A LOT for each pixel already, so they just don't have an additional "antialiasing" sh*t because they aren't faking it like games do
[18:19:55] <mort> yeah I know, there's a reason cycles produces great-looking images, and there's a reason cycles can't run realtime
[18:20:14] <Haohmaru> yes, because proper rendering is expensive
[18:20:17] <mort> yes
[18:20:21] <mort> so games aren't gonna do it
[18:20:27] *** Quits: luizfrds (~Luiz@152.250.243.147) (Read error: Connection reset by peer)
[18:20:53] <mort> a game has 7ms to do everything it has to do for the entire frame
[18:21:50] <imMute> 7ms ?
[18:21:58] <mort> for 144 FPS
[18:22:08] <Haohmaru> <tetris.exe>
[18:22:24] <Raziel> let's say under 16.6ms for the patricians to not yell at you
[18:22:25] <Raziel> :p
[18:22:29] *** Joins: r-g (~r-g@195-154-105-157.rev.poneytelecom.eu)
[18:22:52] <mort> but 60FPS very often isn't the target anymore, and that's actually a reality
[18:23:15] <Raziel> or under 33.3ms if you're running on shitty hardware and know the market eats any trash up anyway, like nintendo
[18:23:18] * Raziel runs away
[18:23:31] <mort> if you're targeting a mac, or an iPad, or an iPhone, you better have your frame ready in 8ms since they're running at 120Hz
[18:24:21] <Raziel> mort, you're definitely gonna get yelled at if you can't run over 60fps on pc too
[18:24:48] <Raziel> not that familiar with the phone market but I can see why most simple games there would have no issues running higher anyway
[18:24:49] <mort> yeah, the 144Hz is with PC in mind since that's an extremely common refresh rate these days
[18:24:54] <Haohmaru> so if your font has very thin details, thinner than a pixel, it should start turning fainter.. if it's done properly
[18:25:09] <Raziel> Haohmaru, yeah, because fuck reading that shit anyway
[18:25:11] <Raziel> :p
[18:25:22] <Haohmaru> it should not alias, and you should not use silly "subpixel" crap
[18:25:42] <Raziel> I agree, but we still have the practical problem of a "fainter" piece of text being less readable
[18:25:56] <Haohmaru> if you need very detailed font that has finer-pitch details than the resolution you're using, either zoom in or live with it
[18:26:00] <mort> if most people have an easier time reading text which is rendered with 3x the horizontal resolution but with less accurate colors
[18:26:05] <mort> why shouldn't you subpixel render
[18:26:23] <Raziel> mort, yeah, I had to turn cleartype back on after I turned it off earlier
[18:26:25] <mort> notice the *if* there, I don't know that it's the case
[18:26:28] <Raziel> wikipedia was fuckin hurting my eyes
[18:26:44] <Haohmaru> wanna see your subpixel rendering work on a green-on-black text ;P~
[18:27:04] <Haohmaru> or on a monitor with a different RGB-order
[18:27:12] <Raziel> I feel like it's partly the font's fault too. exactly one pixel thin lines for everything on any monitor seems... weird
[18:27:19] <Haohmaru> i'm here with a rotated monitor btw
[18:27:23] <cbreak> Haohmaru: on linux, you can change the RGB order :)
[18:27:32] <mort> the subpixel order issue isn't really related to this discussion
[18:27:41] <mort> I mean it's one practical challenge with subpixel rendering
[18:27:54] <Haohmaru> cbreak yes, but there's nothing you can do after that image has been synthesized.. if i save a screenshot - the damage has been done
[18:28:00] <mort> but it doesn't really affect whether subpixel rendering looks better or worse in the abstract
[18:29:30] *** Joins: riksteri (riksteri@gateway/vpn/airvpn/riksteri)
[18:29:34] <Haohmaru> if you are "taking advantage" of having "3x the resolution" in one axis, and rendering finer details (higher frequencies) then you are synthesizing aliased digital images
[18:29:42] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[18:29:46] <Haohmaru> with a particular type of fringing-like aliasing
[18:30:13] <Haohmaru> this is probably the best i can say it
[18:30:42] <mort> I don't know exactly how the argument works that you're introducing aliasing by rendering with subpixels
[18:30:55] <mort> but assuming it's true: does it matter, if people have an easier time reading the more aliased, finer grained text?
[18:31:18] <Raziel> it matters in that it's technically incorrect
[18:31:22] <mort> notice the *if*, I'm not claiming people have an easier time reading subpixel rendered text, I don't have access to those studies
[18:31:23] <Raziel> but if the font is shit in the first place, ehm
[18:31:36] <mort> or well I haven't read those studies, they are probably out there
[18:31:41] <Raziel> I guess it's a polishing of the turd situation
[18:32:01] <Haohmaru> it's incorrect, and whether it *really* makes reading easier is perhaps a difficult question because it involves humans which are sometimes easier to get fooled
[18:32:32] <Raziel> getting fooled is very irrelevant in this specific situation
[18:32:49] <mort> I'm sure we could measure objective things like reading speed and reading comprehension, as well as ask about subjective things like reading fatigue after hours of reading
[18:32:52] <Raziel> it's either more readable for a specific person, or it's not. that can be pretty easy to actually test with an eye test kind of deal
[18:32:56] <Haohmaru> however, if you have subpixel crap enabled and your font looks "better" with it, and you're reading it "better", and you then send me a screenshot - i will probably read it "worse" because i'm in portrait mode here
[18:33:19] <mort> I could imagine designing some good, conclusive studies for whether subpixel rendering helps or hurts reading speed/comfort/comprehension on low-resolution screens
[18:33:33] <Haohmaru> a properly synthesized digital image should NOT look aliased when rotated 90Â°
[18:33:35] *** Quits: JohnMS_AWAY (~kvirc@213.134.183.29) (Ping timeout: 256 seconds)
[18:33:47] <Raziel> if screenshots are the issue, maybe taking a screenshot should just disable that for a frame while it takes the screenshot v:
[18:33:49] <Haohmaru> nor fringed
[18:34:24] <Haohmaru> mort are you gonna make a test with black-on-white text?
[18:34:36] <Haohmaru> ;P~
[18:34:42] <Haohmaru> if you could, i mean
[18:34:47] <cbreak> the point of subpixel rendering isn't to make it look good everywhere, just on your output device
[18:34:55] <mort> the easiest would be to just test one kind of text yes
[18:34:55] <cbreak> it is not device independent by design
[18:34:59] <cbreak> and screenshots aren't either
[18:35:01] <mort> but you could probably test many different bg/fg combos
[18:35:10] <mort> maybe throw in some syntax highlighted text
[18:35:20] <Haohmaru> mort then just try green-on-black ;P~
[18:36:02] <mort> it seems completely possible to me that subpixel rendering improves readability of black-on-white text and hurts it on green-on-black or white-on-green or other color combos
[18:36:15] <Haohmaru> exactly
[18:36:18] <Haohmaru> it's wrong
[18:36:27] <Raziel> https://i.imgur.com/DWRvmy4.png behold, the wild wild west of cleartype
[18:36:31] <Raziel> looks great on my screen. :p
[18:36:38] <mort> in which case, the conclusion would presumably be: use subpixel rendering if you're rendering black-on-white text, don't do it if you're rendering green text
[18:36:43] <Haohmaru> but a TON of people think it makes perfect sense and it's "right"
[18:37:02] <cbreak> subpixel rendering can't affect green-on-black
[18:38:01] <Haohmaru> with green-on-black, the red and blue channels are practically gone, thus gone is also the 3x-resolution illusion
[18:38:06] <Raziel> if you zoom in on that make sure you use nearest neighbour or such, cause otherwise you won't really see what the subpixel rendering is doing
[18:38:41] <mort> Haohmaru: if you're trying to convince me that subpixel rendering works best if you're rendering white-on-black or black-on-white, I'm not gonna disagree with you, my hunch is that you're correct in that
[18:39:43] <Haohmaru> if you accept the fringing, then yes, you could pretend to have 3x the resolution
[18:39:51] <mort> yes
[18:39:57] <Haohmaru> that only works when you have content on all 3 channels
[18:40:08] <mort> yes
[18:40:13] <Haohmaru> which.. you only have when the colors are gray-ish-scale
[18:40:36] <mort> I'm also gonna assume that there have been bad systems in the past which try to do subpixel rendering even though one or two of the channels are essentially missing, and that those look like garbage
[18:40:41] <Raziel> Haohmaru, in my screenshot it's clear it's doing that even with non-gray-ish-scale text
[18:40:50] <Raziel> you can see green pixels around the bright teal stuff for example
[18:40:52] <mort> those issues just don't invalidate the idea of subpixel rendering
[18:40:59] <Raziel> and orange-ish around the purple
[18:41:06] <Haohmaru> Raziel your colorful text is very unsaturated
[18:41:15] <Haohmaru> i was talking about eye-poking green
[18:41:21] <Haohmaru> like 0,255,0
[18:41:26] <Raziel> oof
[18:41:45] <Haohmaru> that's what i use in my IRC client ;P~
[18:41:54] <Raziel> why would you do that in the first place. but also, I suppose it wouldn't be hard to check
[18:41:56] *** Quits: proller (~p@2a02:6b8:b081:8807::1:2d) (Ping timeout: 252 seconds)
[18:42:12] *** Quits: Tokamak (~Tokamak@172.58.191.55) (Quit: My MacBook has gone to sleep. ZZZzzzâ€¦)
[18:42:18] <Haohmaru> because <the_matrix.gif>
[18:42:33] <Haohmaru> don't ask me why.. i have a color picker, i can pick any color
[18:42:40] <mort> oo you use entt
[18:42:42] <Haohmaru> why not green
[18:42:44] <mort> interesting
[18:42:48] <Raziel> I do like the matrix, but I like my eyes not burning more
[18:43:10] <Raziel> mort, still getting used to it and trying to figure out what good designs and patterns are within something like that, but yes
[18:43:33] <mort> one thing I don't get about entt is that it calls itself an "entity component system", as if entt is the "system"
[18:43:54] <mort> but my understanding of ecs is that the systems are part of the game, like a physics system and a weather system and such
[18:44:20] <Raziel> mort, it calls itself an entity component system *library* :p
[18:44:32] <Raziel> or at least, that would be technically correct
[18:44:55] <Raziel> sometimes the terminology does get a bit loose lol
[18:45:17] <mort> entt claims to be "a fast and reliable entity component system"
[18:45:22] <Raziel> the systems are basically just functions that work on the data (wherein the components are the data)
[18:45:23] <mort> not "a fast and reliable entity component system library"
[18:45:51] <Raziel> yeah, that's a bit loose with the syntax there. lol
[18:46:29] <Raziel> I guess ECS can just be used as both an adjective and a noun now, to refer to an ECS framework or library
[18:46:31] <Raziel> iunno
[18:47:10] <Raziel> because ecs itself is a pattern or paradigm
[18:47:20] <rpav> people definitely put too much emphasis on the EC part and not enough on the S ;/ entt definitely has useful tools for systems, but
[18:47:23] <mort> it feels a bit like saying "this library is a model view controller"
[18:47:31] <mort> rather than "this library is a model view controller library"
[18:47:33] <Raziel> yep :p
[18:47:35] <mort> as if the library is the controller
[18:47:43] <cbreak> https://postimg.cc/qN2hXxQk here
[18:48:25] <cbreak> without upscaling, the color issues are not perceptible
[18:49:07] <mort> I can see that the left edge of your h is a bit dimmer than the rest
[18:49:07] <Haohmaru> cbreak this is huge-size font
[18:49:30] <cbreak> Haohmaru: I resized the image to 800%
[18:49:49] <cbreak> it's Hack 10 Pt
[18:50:05] <Raziel> that's 10pt? it definitely looks a lot bigger
[18:50:12] <Raziel> does look fine tho
[18:50:21] <mort> it looks bigger because it's upscaled
[18:50:46] *** Joins: cart_man (~rynot@host-78-144-121-71.as13285.net)
[18:51:00] <cbreak> it's 10 Pt at 162 dpi
[18:51:20] <Raziel> rpav, entt does leave the systems part very open-ended. which can lead to shitty designs overall, if people don't know what they should be doing with that
[18:51:32] <Raziel> and the lack of real examples doesn't help with people not knowing what they should do with that
[18:52:03] <mort> I enjoy thinking about entities as single objects, so that's what I usually do
[18:52:10] <mort> don't tell rpav, he's ultra elitist about these things
[18:52:14] <Raziel> lol
[18:52:34] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:53:11] *** Joins: proller (~p@2a02:6b8:0:51e:5fe4:aa48:1b14:5a20)
[18:54:05] <Haohmaru> here's my chat here, but i only use the green as highlight, at home i use the green for normal color and white for highlight: https://i.imgur.com/5EVJtm2.png
[18:54:17] <Haohmaru> (that's an old pic)
[18:54:26] <rpav> Raziel: yeah there's not a lot of good theory/example in the area ;/
[18:54:33] <cbreak> that looks awfully pixely
[18:54:41] <Haohmaru> because it's a bitmap font
[18:55:03] <Raziel> Haohmaru, that's basically unreadable without zooming/resizing on my 4k screen. and barely readable on my 1440p.
[18:55:10] <Haohmaru> getting a vector font at this size to not look ugly is difficult
[18:55:43] <Raziel> not necessarily because of the shape/rendering though, it's just too damn small
[18:55:52] *** Joins: Tokamak (~Tokamak@172.58.191.55)
[18:56:09] <Raziel> rpav, agreed, I'm struggling with how to "properly" do some things within an ECS paradigm too
[18:56:17] <Haohmaru> just like with audio, when you go near nyquist, the uglyness of algorithms and signal reproduction start to slap you in the face
[18:56:46] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[18:56:59] <rpav> Raziel: yeah i think it's a head scratcher in some cases until you hit an "aha" moment and/or just build your toolbox of "how to do X"
[18:57:51] <Raziel> in C++ specifically, some better support for meta/reflection would make some things a lot easier within an ECS context
[18:57:52] <Raziel> but alas :p
[18:58:07] <rpav> i haven't found that, but what are you trying to do
[18:58:54] <rpav> the ability to iterate sets of components is sortof the big tool, but things need designed to take advantage
[19:00:27] <Raziel> well some things I'd ran into that I'm iffy on are things like... mapping enums to data without duplicating so much code, or aggregating systems together without duplicating so much code
[19:00:42] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 268 seconds)
[19:01:47] <rpav> oh enums to data ought to be straightforward .. map or vector?
[19:01:49] <Raziel> in some cases, my design is bad because it couldn't be extended in the way I imagined (I used namespaces for some things without realizing working across namespaces is impossible in any dynamic way)
[19:02:03] <rpav> you'd have to be specific about aggregating systems
[19:02:10] <Raziel> rpav, yeah, I just mean it'd be nice to do that straight-up instead of making an enum and then also making a map for it
[19:02:26] *** Joins: xkuru (~xkuru@user/xkuru)
[19:02:45] <rpav> well, struct E { static constexpr auto K = ...; }; ;)
[19:03:06] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[19:03:14] <Raziel> I suppose that works too
[19:03:19] <rpav> or just `constexpr K = ...;` .. though if you're trying to map _strings_ to data, that's a different problem
[19:03:43] <Raziel> in the case of assets, I do have to map strings to them for the initializers/loaders :p
[19:03:45] <rpav> i have an enum_class thing that makes a _real_ class for enums, and provides tools for strings and stuff, but
[19:03:47] <Raziel> for the path
[19:03:49] <rpav> yea
[19:04:04] <rpav> that's where the real annoyance lies and where reflection would definitely be nice
[19:04:19] <Raziel> yeah to be honest I think that is the main one here too
[19:04:26] <rpav> i'm still contemplating building a 'cpp-reflgen' tool based on clang/c2ffi stuff
[19:04:43] <Raziel> since I have a lot of different... skins, let's say? each one uses the same asset types but for each skin each of those assets can have a different path
[19:05:02] <rpav> well ideally that level of configuration _also_ ought to be loaded
[19:05:10] <Raziel> obviously also has different sizes and positionings and such but
[19:06:28] <Raziel> so then each of those skins needs its own map of the assets to their path, and maps or such of the proper size and position of those for that specific skin
[19:06:43] <Raziel> and that's a lotta maps. and then I also have to associate those maps with the skin in a way that doesn't suck
[19:06:56] <Raziel> (and namespaces, as it turns out, is a way that sucks!)
[19:08:53] *** Quits: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe) (Ping timeout: 252 seconds)
[19:09:03] <rpav> yeah you should definitely be able to load things such that code isn't structured to care about skins
[19:09:47] *** Joins: rnsanchez (~rnsanchez@2804:14d:8a81:94a4:8ccf:d40:d4e6:2ebe)
[19:10:05] <rpav> like your visual assets can be sortof the thinnest layer on top of the program; your components should let you configure modular bits of functionality
[19:11:14] <rpav> some entity description can be like "model = 'path/to/m...'; tex = 'path/to/t...'; components = { a: { ..config.. }, b: { ..config.. } }` or whatever and you can build anything in your game that way
[19:11:34] <Raziel> right, and that is what happens currently. it's just there's still too much static boilerplate-ish stuff required for each skin, currently. I am gonna try some different ways of doing things, I feel like some more of that data could actually be components and then the composition would spare me some crap
[19:12:05] <rpav> yeah could
[19:13:58] <Raziel> if done right all that const skin data is gonna also be easy to just move to being loaded from files, rather than being const data in actual cpp code :p
[19:16:29] <rpav> oooh yeah
[19:17:05] <rpav> dealing with data in c++ is a bit of a pita, though i guess you could sortof "load" it just like anything, or structure it similarly to how it would be loaded
[19:17:15] <Raziel> yeah
[19:33:30] *** Joins: dkdjsm (~dkdjsm@178.49.152.151)
[19:55:00] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[19:56:08] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:57:14] *** Joins: dld (~dld@2601:197:600:1210:4c8f:59ca:20e7:8c51)
[20:01:23] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:8dbb:aeac:23a6:f8d) (Quit: Leaving)
[20:01:55] <lru> "dealing with data"?  what are you comparing it to?
[20:12:42] *** Joins: kaichiuc1u (~kaichiuch@user/kaichiuchu)
[20:12:50] *** Quits: baltazar (~baltazar@94-21-222-223.pool.digikabel.hu) (Ping timeout: 268 seconds)
[20:13:01] *** Joins: radu2424072 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[20:13:27] *** Quits: mitch0 (~mitch@94-21-222-223.pool.digikabel.hu) (Ping timeout: 268 seconds)
[20:13:55] *** Joins: noarb- (~noarb@user/noarb)
[20:14:30] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: kaichiuchu (~kaichiuch@user/kaichiuchu) (Ping timeout: 256 seconds)
[20:14:30] *** Quits: noarb (~noarb@user/noarb) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: yolo (~xxiao@159.89.184.51) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: radu242407 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[20:15:05] *** Quits: obiwahn (~heini@user/obiwahn) (Ping timeout: 256 seconds)
[20:15:05] *** radu2424072 is now known as radu242407
[20:16:14] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[20:16:29] *** Joins: yolo (~xxiao@159.89.184.51)
[20:18:10] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Read error: Connection reset by peer)
[20:18:29] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:19:24] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:19:45] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:20:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:24:38] *** Joins: baltazar (~baltazar@185-29-82-78.pool.digikabel.hu)
[20:24:39] *** Joins: mitch0 (~mitch@185-29-82-78.pool.digikabel.hu)
[20:26:41] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:28:46] *** Joins: obiwahn (~heini@user/obiwahn)
[20:30:10] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[20:32:09] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[20:33:56] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (Remote host closed the connection)
[20:34:17] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[20:38:27] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[20:39:57] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Ping timeout: 256 seconds)
[20:43:46] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[20:44:35] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[20:47:58] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[20:51:23] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[20:55:56] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[21:02:02] *** Quits: smallville7123 (~smallvill@cpe-172-193-72-46.qld.foxtel.net.au) (Read error: Connection reset by peer)
[21:06:16] *** Quits: proller (~p@2a02:6b8:0:51e:5fe4:aa48:1b14:5a20) (Ping timeout: 264 seconds)
[21:14:55] *** Joins: givemeyourpies (~givemeyou@c-66-235-2-202.sea.wa.customer.broadstripe.net)
[21:15:54] *** Joins: Nov28 (~weechat@user/nov28)
[21:16:32] *** Joins: paul424 (~tom@ip-37-248-154-168.multi.internet.cyfrowypolsat.pl)
[21:23:05] *** Quits: cart_man (~rynot@host-78-144-121-71.as13285.net) (Quit: Konversation terminated!)
[21:24:20] *** Joins: TheGuestMovie (~TheGuestM@173.231.114.74)
[21:26:56] *** Joins: ravan (~ravan@user/ravan)
[21:27:08] <TheGuestMovie> When you see some retarded BS in an app you wrote, run git blame, and it was a contribution from someone else https://i.imgur.com/ZBRaUsd.png
[21:27:39] <TheGuestMovie> (I mean, I thought it was old me)
[21:30:00] *** Joins: seninha (~seninha@user/seninha)
[21:38:50] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:38:57] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:38:57] *** ChanServ sets mode: +v npaperbot
[21:45:02] *** Quits: gnomesort (~gnomesort@user/gnomesort) (Quit: ZNC - https://znc.in)
[21:45:17] *** Quits: Nov28 (~weechat@user/nov28) (Quit: Nov28)
[21:46:11] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[21:47:41] *** Joins: Gaboradon (~Gaboradon@cpe-86-58-57-5.static.triera.net)
[21:50:18] *** Joins: Simplar (~Simplar@188.163.93.76)
[21:55:47] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:57:24] <ville> never quite understod the reason why libraries export a multiplexing interface rather than the individual functions. something along the lines of: void f(fun_name fn, void* data); and that function ends up dispatching based on fn and then of course data is interpreted and all type safety is out the window
[21:58:54] <LordKalma> what libraries do that?
[21:59:30] <ville> scintilla, win32, linux kernel... opengl...
[22:00:26] <ville> of course not the exact same signature as above but something along those lines
[22:01:04] <Simplar> So I'm going to ask you to tell me if there is more optimized way to code that solution in C++. As the task is LOOOONG and no one wants to read a heck ton IRC messages, I've put it in a file task.txt under the same paste on wandbox. Here is the code itself: https://wandbox.org/permlink/UbL6XlUtX3ACLefU
[22:01:45] <rpav> lru: lore
[22:01:52] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[22:05:40] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 264 seconds)
[22:10:24] <paul424> I have several methods  which would be used only if flag mIsDraggableTileContainer==true ( which is set from ctor) , is that a good point to create a new class DraggableTileContainer from GameMap ?
[22:11:26] <ville> Simplar: presumably each query whether the grid can be visited starting from (x,y) are independent, so you could look at multithreading in that way if it gives you a speedup
[22:14:10] <ville> but you could also probably go wide as well, although that would require some thinking
[22:18:24] <yolo> can I combine multiple .o files into one .o?
[22:18:28] *** Quits: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) (Quit: Leaving.)
[22:18:55] <rpav> paul424: perhaps think more in terms of "tools that can apply to a tile space" and the tile part of your map is such
[22:19:54] <kalven> yolo: you can combine multiple .o files into one .a file
[22:19:59] <rpav> though really if your "game map" is a single flat tile map you're probably going to need to rethink this already
[22:20:19] *** Joins: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it)
[22:21:53] <yolo> kalven: how? I found this though: `ld -relocatable a.o b.o -o c.o; gcc c.o other.o -o executable`
[22:22:14] <yolo> sorry, yes I know ar for .a
[22:23:07] <kalven> so first, why do you want to combine them to a single .o, and would an .a (which would just be a collection of .o files) suffice instead?
[22:25:13] <paul424> rpav, yes it is a single flat tile ... now I have methods which would  apply only if gameMap is that tiny bit ... like moveDelta, or setPosition
[22:28:30] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Ping timeout: 265 seconds)
[22:28:48] <yolo> kalven: customer requests :(, their tool only takes in one .o but they have multiple, anyway I will update their tool(python scripts) instead of hacking .o
[22:29:02] <kalven> ah
[22:30:52] *** Quits: snikulov (~snikulov@109-252-86-189.nat.spd-mgts.ru) (Remote host closed the connection)
[22:36:18] <Simplar> ville: multithreading is quite a nice idea
[22:45:06] <rpav> multithreading; a nondeterministic tapestry of pain and suffering
[22:45:08] <rpav> or something
[22:49:35] *** Quits: Rayke (rayke@user/rayke) (Quit: WeeChat 3.3)
[22:51:49] *** Joins: Rayke (rayke@user/rayke)
[22:53:17] *** Quits: riksteri (riksteri@gateway/vpn/airvpn/riksteri) (Quit: riksteri)
[22:53:24] *** Joins: msk_ (~msk@185.124.240.158)
[22:54:00] *** Quits: msk_ (~msk@185.124.240.158) (Read error: Connection reset by peer)
[23:02:43] *** Joins: proller (~p@80.240.216.69)
[23:06:05] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[23:09:39] *** Parts: blackout69 (~blackout6@net-31-156-121-187.cust.vodafonedsl.it) ()
[23:10:24] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:10:36] *** Quits: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian) (Killed (NickServ (GHOST command used by Friithian!gunqqer@friithian.dev)))
[23:10:48] *** Joins: GunqqerFriithian (~gunqqer@gateway/vpn/pia/gunqqerfriithian)
[23:17:20] <leonardus> what book should I read to transition from c++98 to c++20?
[23:26:29] <ashafq> leonardus: The C++ Book from Stroustrup, 4th Ed.
[23:27:53] <ashafq> leonardus: Also, A Tour of C++, 2nd Ed
[23:29:11] <leonardus> thanks
[23:37:53] <rpav> leonardus: if you know 98 you could really just read the new features lists on cppreference.com
[23:37:56] <rpav> that's what i did
[23:38:05] <rpav> and then write a lot of code
[23:38:33] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e)
[23:38:34] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:c5ed:3c67:1c78:cc2e) (Changing host)
[23:38:34] *** Joins: skapata (~Skapata@user/skapata)
[23:38:44] *** Quits: paul424 (~tom@ip-37-248-154-168.multi.internet.cyfrowypolsat.pl) (Remote host closed the connection)
[23:39:19] <rpav> probably the big WTFs are `auto x = ..` and `for(auto&& x : y)` .. variadic templates are the shit, and move semantics, and with those you have the basis for most of modern c++ i think ðŸ¤”
[23:39:26] <Simplar> rpav: is 98 really that much different from 20?
[23:39:27] <rpav> also lambdas and constexpr
[23:39:35] <LordKalma> Simplar, like night and day
[23:39:37] <LordKalma> or better
[23:39:40] <rpav> Simplar: it's basically an entirely different language
[23:39:42] <LordKalma> like bananas and saturn
[23:39:43] <Simplar> lambdas are the niftiest thing I've seen
[23:39:54] <Simplar> I've ever* seen
[23:40:04] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[23:40:11] <rpav> lacking constexpr, variadic templates, and move, you basically lack most of the useful toys/tools
[23:40:36] <rpav> lacking lambdas is maybe not the end of the world, but it definitely would suck for a lot of things
[23:41:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:41:42] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[23:41:58] <rpav> oh and folding expressions while technically maybe not _necessary_ make things _vastly_ easier to write, especially folding comma
[23:42:22] <rpav> i hear concepts are similarly "next step" in making expressing various things much easier but sadly i have not played
[23:42:54] <LordKalma> c++98 is C with classes
[23:42:59] <LordKalma> and we mock that all the time :p
[23:43:05] <LordKalma> also no smart pointers in the stdlib
[23:43:09] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[23:46:07] *** Joins: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de)
[23:46:36] <LordKalma> bahhh the problem with building something at the same time you learn the tooling is how long you take to get anything done
[23:47:28] <rpav> i think smart pointers could be done OK with 98 if you had like, some move(C&)
[23:47:37] <rpav> like i think you can soft-implement move semantics but i'm not 100% sure
[23:48:27] <rpav> consider a `C(Moving<C>&)` ctor and `Moving<C> move(C&)` or something, not sure
[23:49:07] <rpav> the error messages would suck a bit since you'd be hiding copy constructors where you wanted move-only.. but i'm pretty sure they suck anyway so
[23:49:42] <Alipha> The issue is containers would need to be aware of it
[23:49:58] <LordKalma> boost::intrusive_vector ? :D
[23:50:00] <rpav> ah also you'd need explicit return handling
[23:50:13] <LordKalma> outargs!
[23:50:14] <rpav> Alipha: they still do though?
[23:50:37] <LordKalma> rpav, with a magic Moving<C>& you can't have move-aware containers
[23:50:48] <LordKalma> with rvalue refs anything goes automagically
[23:50:51] <rpav> like, the _mechanics_ of "std::move does nothing except T&& the input" differ, but e.g. vector still _has_ to explicitly move
[23:51:16] <Alipha> rpav: indeed
[23:51:27] <LordKalma> it does? interesting
[23:51:28] <rpav> LordKalma: i'm not sure why you couldn't ahve move-aware containers
[23:51:37] <rpav> the mechanics would be slightly different but
[23:51:43] <LordKalma> I guess you could sfinae it
[23:51:56] <LordKalma> both in the academic discussion and in the current implementations
[23:52:03] <rpav> e.g. you'd need check-and-move/else-copy i think, vs "move, defaulting to copy"
[23:52:53] *** Quits: voltron (~voltrin_@ip4d16bdc6.dynamic.kabel-deutschland.de) (Remote host closed the connection)
[23:52:53] <LordKalma> yeah, I guess you could sfinae something like that?
[23:52:59] <LordKalma> by asking for the move constructor
[23:53:25] <rpav> oh yeah you could probably have like Moving<C> default to a copy, though that might result in a double-copy
[23:53:34] <rpav> well
[23:53:59] <rpav> Moving<C> should probably-actually be a wrapped reference to the original, and the ctor does the moving
[23:54:35] <rpav> i guess then you could have move_to(C0, C1) which defaults to copy ;)
[23:54:42] <LordKalma> you could have your container check if the class had a .move() simply...
[23:54:46] <LordKalma> with sfinae
[23:55:13] <rpav> you could .. i think avoiding having a required method for moving in a class is probably desirable though
[23:55:23] <LordKalma> yes, indeed
[23:55:28] <LordKalma> anyway
[23:55:33] <LordKalma> glad those are bygone times
[23:55:53] <rpav> but it's fun to consider, in the case you're trapped in the 90s
[23:55:58] <rpav> ;)
