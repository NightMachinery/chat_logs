[00:00:16] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.114) (Ping timeout: 258 seconds)
[00:02:01] *** Joins: mikoto-chan (~mikoto-ch@185.237.102.122)
[00:02:25] *** Quits: mikoto-chan (~mikoto-ch@185.237.102.122) (Client Quit)
[00:07:04] *** Quits: connrs (~connrs@conners.plus.com) (Quit: ZNC 1.8.2 - https://znc.in)
[00:08:01] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[00:08:14] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[00:08:17] *** Joins: connrs (~connrs@conners.plus.com)
[00:09:42] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[00:16:24] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb879d3ec1aa44300f05.dip0.t-ipconnect.de)
[00:16:47] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[00:19:49] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb87055cde397d58ef4b.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[00:24:00] *** Joins: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net)
[00:25:35] <monochrom> > isNan (sqrt (-1))
[00:25:37] <lambdabot>  error:
[00:25:37] <lambdabot>      • Variable not in scope: isNan :: t0 -> t
[00:25:37] <lambdabot>      • Perhaps you meant ‘isNaN’ (imported from Prelude)
[00:25:45] <monochrom> > isNaN (sqrt (-1))
[00:25:47] <lambdabot>  True
[00:25:51] <monochrom> > isNaN (1 + sqrt (-1))
[00:25:52] <lambdabot>  True
[00:25:54] <monochrom> :)
[00:26:11] <fawful> :)
[00:27:28] <monochrom> I am not very sympathetic to "you can't use (==)".  If I have x :: [Int->Int], you can't use "x == []" either.  You are supposed to use null.
[00:30:33] *** Quits: takuan (~takuan@178-116-218-225.access.telenet.be) (Remote host closed the connection)
[00:32:24] <sm> sshine: you can look at https://github.com/commercialhaskell/stackage/blob/master/build-constraints.yaml , eg for a line like https://github.com/commercialhaskell/stackage/blob/master/build-constraints.yaml#L6535
[00:32:52] <sm> and there might be an issue discussing it
[00:34:50] *** Quits: peterhil (~peterhil@mobile-access-56734e-227.dhcp.inet.fi) (Ping timeout: 260 seconds)
[00:34:53] *** Quits: Megant (megant@user/megant) (Ping timeout: 264 seconds)
[00:34:53] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 264 seconds)
[00:36:22] *** Joins: aln448 (~aln448@2a00:23c7:3480:b700:fdb9:39e2:1024:88b1)
[00:36:32] *** Joins: acidjnk_new (~acidjnk@pd9e0b933.dip0.t-ipconnect.de)
[00:37:23] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[00:37:40] <aln448> fluent in maths and functional programming. wrote a postgrad thesis on a maths topic in haskell, but haven't touched and barely thought about FP in close to a decade. looking to play with it again, but can't think of a toy project to implement - any ideas?
[00:37:54] <sm> (I didn't find it, otherwise dig in the history to find out who done it)
[00:37:58] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[00:38:15] *** Joins: Moyst (~moyst@user/moyst)
[00:38:40] <aln448> not looking for anything flashy, no 'how to develop a game in x days' - i used to enjoy solving maths problems, deriving logic from first principles (played around with idris etc a lot)
[00:38:58] <aln448> agda with few to no libraries, etc
[00:39:08] <fawful> :)
[00:39:22] <aln448> can anyone suggest something fun that might pique my interest and give me a reason to re-learn FP paradigm?
[00:39:31] <fawful> do you like visual art
[00:39:32] <sm> project euler problems
[00:39:45] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb879d3ec1aa44300f05.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[00:39:56] <aln448> fawful: i'm afraid not
[00:40:16] <fawful> I find creative projects to motivate me, but you might be different
[00:40:24] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[00:40:28] <aln448> sm: have done this in a dozen programming languages a dozen times, they get boring. i'd like something that allows me to rely on my own intuition and be a little creative
[00:40:32] <monochrom> Parsing or interpreting of a toy language.
[00:40:39] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[00:40:57] <sm> aln448: ok, then the christmas puzzles.. darn what's it called
[00:41:03] <fawful> try to create a mind out of code
[00:41:08] <c_wraith> advent of code
[00:41:18] <aln448> cannot count how many times i've started writing a lisp but gotten bored half-way through :(  been a long time since i've done it functionally, but still looking for something more 'fresh'
[00:41:22] <sm> ^^
[00:41:22] <fawful> maybe you will succeed who knows
[00:41:25] <aln448> advent of code is coming up, that's right
[00:41:29] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:41:41] <monochrom> No, interpreting lisp is boring. Try interpreting a toy prolog.
[00:41:55] <c_wraith> if you go back to the year with intcode and try to build your interpreter in a really reusable way, that's an interesting challenge.
[00:42:18] <geekosaur> interpret a toy sml and confuse everyone :þ
[00:42:22] <aln448> hah
[00:42:33] <monochrom> intepret C, and turn the table around :)
[00:42:43] <aln448> was thinking maybe a static site generator, pushing the 'practical' element here
[00:42:45] <monochrom> In fact it would turn two tables around.
[00:43:07] <awpr> or a language with linear logic at its core.  that's similar enough to Haskell's core to have something to draw inspiration from, but novel enough to have room for creativity
[00:43:15] <aln448> would be interested in anything involved in prop/first/maybe even second (been a while) level logic though
[00:43:38] <aln448> i kinda missed out on hott the first time around and from blog posts at least, it sounds interesting
[00:43:46] <monochrom> theorem prover?
[00:43:51] <sm> if you want practical, how about some new accounting/investing reports for hledger
[00:44:26] <monochrom> HOL4 is a theorem prover written in SML. So implement an SML interpreter, there you have it?
[00:45:34] <monochrom> OTOH a theorem prover in Haskell directly has its upsides too. In particular, tactical theorem proving is a monad. HOL4 misses out on that.
[00:46:48] <aln448> perhaps i could implement prelude in some other language?
[00:46:58] <monochrom> StateT Goal [] to be exact.
[00:48:55] <monochrom> Err oops, no, more complicated than StateT Goal []
[00:49:35] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 264 seconds)
[00:49:57] <aln448> thanks for the thoughts here guys, some nice ideas
[00:50:35] <geekosaur> you could also consider contributing to a project; hledger was already mentioned, and xmonad-contrib is always open to new submissions
[00:51:44] <aln448> i'm familiar with xmonad, and daily-drive dwm, have contributed a bunch of stuff (C though)
[00:52:01] <aln448> that's perhaps a nice idea - i'm sure there are some plugins for dwm that i could port to xmonad
[00:54:54] *** Quits: cjay (cjay@nerdbox.nerd2nerd.org) (Quit: peepoLeave)
[00:55:15] *** Joins: cjay (cjay@nerdbox.nerd2nerd.org)
[00:56:04] *** Joins: boxscape_ (~boxscape_@p54a3581e.dip0.t-ipconnect.de)
[00:56:14] <aln448> thanks, people - i should head off now, but one last question given i'm here and there's a good chance someone here will know
[00:57:19] <aln448> is conor mcbride still active/around? last i heard from a friend was that he was having some health problems, but the only contact i had with him was on twitter, and i believe he was banned/left/deactivated from the platform a while back
[01:01:05] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[01:01:16] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[01:01:32] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[01:01:45] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[01:05:39] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[01:05:46] *** Quits: fendor_ (~fendor@178.115.49.60.wireless.dyn.drei.com) (Remote host closed the connection)
[01:10:27] *** Quits: random-jellyfish (~random-je@user/random-jellyfish) (Quit: Client closed)
[01:12:14] *** Quits: michalz (~michalz@185.246.204.77) (Remote host closed the connection)
[01:13:16] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[01:14:32] <dsal> aln448: A couple years ago AoC was basically a course in interpretation and stuff.  I tend to write more parsers than necessary, but you had to build an interpreter, then you'd get puzzles that were built for programs your interpreter's language and you had to build solutions on top of that runtime with foreign programs.  It was pretty good.
[01:14:42] <dsal> I think a few from last year were solved almost entirely in the parser.
[01:15:01] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[01:19:02] *** Joins: pavonia (~user@user/siracusa)
[01:19:38] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 265 seconds)
[01:23:04] *** Quits: pmk (~user@2a02:587:9418:a234:40de:ca53:4e3:4a70) (Ping timeout: 258 seconds)
[01:24:12] *** Quits: ubert (~Thunderbi@91.141.50.28.wireless.dyn.drei.com) (Remote host closed the connection)
[01:29:28] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[01:30:02] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[01:30:40] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[01:30:45] *** Quits: jess (~jess@libera/staff/jess) (Quit: Lost terminal)
[01:30:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:31:10] *** Joins: jess (~jess@libera/staff/jess)
[01:32:00] *** Quits: max22- (~maxime@2a01cb0883359800342ef13833bd6f3b.ipv6.abo.wanadoo.fr) (Quit: Leaving)
[01:34:34] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[01:37:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[01:37:44] *** Quits: aln448 (~aln448@2a00:23c7:3480:b700:fdb9:39e2:1024:88b1) (Quit: Client closed)
[01:38:09] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[01:41:00] *** Joins: ph88 (~ph88@2a02:8109:9e00:7e5c::3d56)
[01:41:57] *** Quits: meltedbrain_y2k (~tekserf@94.73.36.197) (Read error: Connection reset by peer)
[01:43:56] <janus> mcbride is still active: https://github.com/pigworker
[01:47:03] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[01:47:07] <shapr> What's the status of GHC on M1 macs? Does anyone know if it's fully supported?
[01:47:40] <shapr> Is there anything more recent than https://www.haskell.org/ghc/blog/20210309-apple-m1-story.html ?
[01:47:40] <geekosaur> via llvm only in 8.10.7, to be fully supported in 9.2.1
[01:47:41] <dsal> shapr: I was able to build most of my projects.
[01:47:49] <shapr> dsal: most?
[01:47:57] <shapr> We have a 500kloc codebase, most worries me
[01:48:10] <dsal> The latest stack LTS has an older `network` library.  I didn't go through and redo them all.
[01:48:18] <dsal> But my gopro project has all the deps and that one worked.
[01:48:30] <dsal> /Users/dustin/.local/bin/gopro: Mach-O 64-bit executable arm64
[01:49:33] <dsal> `network` was the only thing I tripped up on, and it was already fixed.
[01:49:39] <dsal> Also, there are a bunch of annoying warnings while stuff builds.
[01:50:38] <dsal> I just found out I can replace my mac with one that's about the same size, but with 10 cores and 64GB of RAM…
[01:53:13] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Quit: Leaving)
[01:54:49] <shapr> dsal: thanks for the info
[01:55:28] <dsal> I switched my nix over two days ago to try that, so it's fresh on my mind.  :)
[01:56:26] <dsal> I switched it back, though.  It's a little annoying to override `network` just for that.
[01:58:19] <shapr> dsal: are you using ghc 8.10.7 ? or ghc 9?
[02:01:35] *** Joins: Megant (megant@user/megant)
[02:03:31] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[02:03:48] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[02:04:05] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[02:04:19] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Read error: Connection reset by peer)
[02:04:39] <dsal> I just ran stack LTS-18.13
[02:05:33] <dsal> LTS 18.13 for ghc-8.10.7
[02:05:44] <dsal> I may have tried a nightly.  I'll do that real quick and see what happens.
[02:06:38] <dsal> It's downloading 9.0.1…  Nothing can go wrong now.
[02:09:22] *** Joins: slack1256 (~slack1256@45.4.2.52)
[02:10:00] *** Quits: theproffesor (~theproffe@user/theproffesor) (Ping timeout: 268 seconds)
[02:12:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[02:12:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.3)
[02:16:34] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 260 seconds)
[02:17:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 264 seconds)
[02:18:20] *** Joins: vicfred (~vicfred@user/vicfred)
[02:19:18] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[02:21:23] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 264 seconds)
[02:22:04] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[02:24:14] *** Quits: voldial (~user@195.179.201.175) (Changing host)
[02:24:14] *** Joins: voldial (~user@user/voldial)
[02:27:56] *** Quits: tomsmeding (~tomsmedin@tomsmeding.com) (Ping timeout: 265 seconds)
[02:28:37] *** Quits: beaky (~beaky@198.211.118.219) (Ping timeout: 252 seconds)
[02:29:00] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[02:29:14] *** Quits: quintasan (~quassel@quintasan.pl) (Ping timeout: 265 seconds)
[02:29:23] *** Quits: Dykam (Dykam@dykam.nl) (Ping timeout: 265 seconds)
[02:29:31] *** Quits: synthmeat (~synthmeat@user/synthmeat) (Ping timeout: 268 seconds)
[02:29:34] *** Parts: voldial (~user@user/voldial) (WeeChat 1.6)
[02:30:35] *** Joins: dsrt^ (~dsrt@68.101.53.15)
[02:32:42] <shapr> dsal: is it still downloading?
[02:34:08] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[02:34:30] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[02:39:04] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[02:39:37] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[02:39:57] *** Joins: alzgh (~alzgh@user/alzgh)
[02:40:02] <Cajun> so im looking into a small project of changing a program from a pretty unorganized mtl stack (abusing a lot of state changing stuff) to some effect system and im wondering which library is the library of choice? fused-effects, polysemy, and freer-simple all look like good options
[02:41:08] <Cajun> s/?/.
[02:43:30] *** Quits: lavaman (~lavaman@98.38.249.169) (Remote host closed the connection)
[02:48:27] <oak-> I think polysemy had some problems with performance in the past (if that is a concern), but I'm not sure if it is already fixed. I think in the past it needed some GHC-patch
[02:49:05] *** Quits: elmoloko (~Adium@2600:6c64:4a7f:faa6:2863:d742:7416:5b9e) (Quit: Leaving.)
[02:49:57] <ph88> I have a function [b] -> (Maybe a, [b]) what helper function can i use to keep my function running on [b] (using the output again as input) until i find Nothing and then returning ([Just a], [b]).  I don't think i can use a normal foldl' here because the input is determined from the output of previous call
[02:51:07] <geekosaur> unfoldr?
[02:53:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[02:53:49] <Cajun> well what inspired the project was this (https://reasonablypolymorphic.com/blog/porting-to-polysemy/index.html) post, and it seems like a very interesting system. i have no performance concerns (as long as it can still work at ~13fps in a console window, not a high bar)
[02:57:25] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[02:57:41] *** Joins: synthmeat (~synthmeat@user/synthmeat)
[02:57:45] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[02:57:54] *** Joins: tomsmeding (~tomsmedin@tomsmeding.com)
[02:58:29] *** Joins: quintasan (~quassel@quintasan.pl)
[02:58:41] <ph88> geekosaur, that function looks pretty neat thanks
[03:06:47] *** Joins: hexology (~hexology@user/hexology)
[03:09:14] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[03:12:01] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[03:12:10] *** Joins: beaky (~beaky@2a03:b0c0:0:1010::1e:a001)
[03:13:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[03:13:58] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[03:14:13] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:17:16] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[03:18:49] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:19:01] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[03:19:37] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[03:19:41] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 245 seconds)
[03:20:06] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:22:29] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[03:22:42] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Quit: Lost terminal)
[03:23:10] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[03:24:06] *** Quits: pragma- (~chaos@user/pragmatic-chaos) (Client Quit)
[03:24:38] <dsal> shapr: oops.  it broke because of libs.  Got a call.  Gonna try again.
[03:25:35] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[03:25:51] <dsal> Oh yes.  I remember now.
[03:25:59] <shapr> dsal: oh?
[03:26:43] <dsal> Pages of this sort of thing: https://usercontent.irccloud-cdn.com/file/sZpPstHP/errs.png
[03:26:52] *** Quits: ystael (~ystael@user/ystael) (Ping timeout: 252 seconds)
[03:28:02] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[03:28:31] *** Joins: ystael (~ystael@user/ystael)
[03:29:39] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 265 seconds)
[03:31:26] <shapr> dsal: sounds like ghc 9 is not ready on M1 mac?
[03:31:41] <dsal> Yeah, didn't go well in my attempt.
[03:32:14] <shapr> so, ghc 8.10.7 on M1 mac, as long as you're using a newer version of networking if stack is involved
[03:32:36] <shapr> but not yet ghc 9 on M1 mac
[03:35:40] <dsal> Yeah, I've not had any problem with 8.10.7
[03:36:12] <dsal> Other than https://github.com/haskell/network/pull/510
[03:37:14] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[03:38:25] *** Quits: abhixec (~abhixec@c-67-169-139-16.hsd1.ca.comcast.net) (Quit: leaving)
[03:40:13] <geekosaur> my u7nderstanding is 9.0.1 if it has any support at all is badly broken, and you need a newer 9.2 than the existing prerelease to get a working one
[03:40:38] <geekosaur> 8.10.7 aside from libs that need updates works, but goes via llvm instead of native code
[03:41:02] <shapr> geekosaur: thanks for the info
[03:41:36] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[03:41:36] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[03:41:36] *** Joins: wroathe (~wroathe@user/wroathe)
[03:41:41] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[03:42:06] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[03:42:35] <geekosaur> they had a lot of trouble getting the new sized stuff working, since apple's aarch64 abi requires things be passed as their actual sizes and not "rounded up" to a word like standard aarch64 or indeed most other abis
[03:42:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[03:42:59] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[03:43:35] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 264 seconds)
[03:43:41] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[03:44:17] *** Joins: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net)
[03:44:59] *** Lord_of_Life_ is now known as Lord_of_Life
[03:45:38] *** Quits: emf (~emf@2620:10d:c090:400::5:c0de) (Quit: emf)
[03:46:14] <dsal> Oh weird.
[03:53:20] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 258 seconds)
[03:53:31] *** Quits: alx741 (~alx741@186.178.109.50) (Quit: alx741)
[03:54:00] *** Joins: MQ-17J (~MQ-17J@8.21.10.23)
[03:54:11] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[03:55:13] *** Joins: alx741 (~alx741@186.178.109.50)
[03:55:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[03:58:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[04:00:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[04:00:59] *** Quits: MQ-17J (~MQ-17J@8.21.10.23) (Ping timeout: 264 seconds)
[04:03:54] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:03:59] *** Quits: myShoggoth (~myShoggot@97-120-70-214.ptld.qwest.net) (Ping timeout: 264 seconds)
[04:10:39] *** Joins: fluffyballoon (~user@131.93.208.196)
[04:14:09] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[04:17:55] *** Joins: theproffesor (~theproffe@2601:282:847f:8010::be7d)
[04:17:55] *** Quits: theproffesor (~theproffe@2601:282:847f:8010::be7d) (Changing host)
[04:17:55] *** Joins: theproffesor (~theproffe@user/theproffesor)
[04:19:25] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[04:23:47] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 265 seconds)
[04:36:16] *** Quits: acidjnk_new (~acidjnk@pd9e0b933.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[04:36:50] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 265 seconds)
[04:36:55] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:38:44] *** Joins: alzgh (~alzgh@user/alzgh)
[04:39:51] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:40:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[04:40:53] *** Quits: Guest372 (~xxx@47.245.54.240) (Remote host closed the connection)
[04:41:54] *** Quits: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8) (Remote host closed the connection)
[04:41:59] *** Joins: Guest372 (~xxx@47.245.54.240)
[04:42:57] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[04:43:01] *** Joins: albet70 (~xxx@2400:8902::f03c:92ff:fe60:98d8)
[04:43:06] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[04:44:11] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 264 seconds)
[04:44:28] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:44:57] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[04:47:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[04:51:30] *** Quits: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net) (Ping timeout: 260 seconds)
[04:52:26] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[04:52:43] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[04:53:04] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[04:56:32] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:56:32] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:56:32] *** Joins: wroathe (~wroathe@user/wroathe)
[04:57:12] *** Quits: mmhat (~mmh@55d45bcb.access.ecotel.net) (Quit: WeeChat 3.3)
[04:58:13] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[04:58:14] *** Quits: gentauro (~gentauro@user/gentauro) (Read error: Connection reset by peer)
[04:58:33] *** Joins: gentauro (~gentauro@user/gentauro)
[05:00:50] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[05:00:56] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 245 seconds)
[05:01:13] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:05:09] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[05:07:37] *** Quits: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[05:08:34] *** Joins: slack1256 (~slack1256@45.4.2.52)
[05:15:53] *** Joins: Hima (~Hima_Bind@49.204.226.177)
[05:20:34] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[05:22:23] *** Joins: _xor (~xor@72.49.199.147)
[05:22:37] <Hima> hi there! I am quiet new here, please let me know if do something against code of conduct, I just want to know if anyone know how can i join #haskell-gsoc channel which is on freenode? I think it's no more on freenode.
[05:23:21] <Axman6> if it's anywhere, it should be here on libera - have you tried joining #freenode-gsoc?
[05:23:30] <Axman6> uh, #haskell-gsoc
[05:23:37] <Hima> no i will join rn
[05:23:46] <Hima> oh yes i did
[05:23:57] <Axman6> looks like it's not a thing
[05:24:05] <Hima> there's no one, and i am the op so i think it's no more the official room
[05:24:21] <Axman6> yeah it was created by you joining it (I did the same thing)
[05:24:41] *** Quits: xff0x (~xff0x@2001:1a81:5338:8400:382c:44d1:e85b:95f9) (Ping timeout: 245 seconds)
[05:25:19] <Hima> haha, but they mentioned to join "There is also a relatively active IRC channel called #haskell-gsoc on freenode where you can ask for help."
[05:25:37] <Axman6> that was in the before times
[05:25:52] <Hima> by the way is this Haskell's official server? 
[05:26:09] <Hima> yes, axman6 got it.
[05:26:20] <Axman6> well, it's where the freenode channel moved, so I guess so...
[05:26:37] *** Joins: xff0x (~xff0x@2001:1a81:5213:b200:9d6e:5b31:ca1b:5892)
[05:26:48] <Axman6> I don't know who deems something official
[05:27:02] <Hima> okay 
[05:27:23] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 264 seconds)
[05:33:25] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[05:35:03] *** Parts: Hima (~Hima_Bind@49.204.226.177) ()
[05:41:41] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[05:42:12] *** Quits: fluffyballoon (~user@131.93.208.196) (Ping timeout: 258 seconds)
[05:42:37] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:47:02] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[05:47:30] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[05:50:30] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Quit: k60)
[05:50:38] *** Quits: slack1256 (~slack1256@45.4.2.52) (Ping timeout: 258 seconds)
[05:50:46] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[05:57:33] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 265 seconds)
[06:05:21] <sm> yes, it's the official IRC channel. there's also a matrix channel, slack channels, etc.
[06:06:03] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 276 seconds)
[06:07:33] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:13:01] *** Quits: td_ (~td@muedsl-82-207-238-089.citykom.de) (Ping timeout: 265 seconds)
[06:13:05] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Remote host closed the connection)
[06:13:58] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[06:14:24] *** Joins: td_ (~td@94.134.91.144)
[06:15:58] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Ping timeout: 260 seconds)
[06:17:54] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[06:20:03] <DigitalKiwi> in my (github sponsors (1/10x dev gimmick)) contract it says i get 10k/mo for being in the channel but they haven't paid :( been here >10 years so back pay should be substantial if they do!
[06:20:29] <DigitalKiwi> https://github.com/sponsors/Kiwi/
[06:21:51] <DigitalKiwi> in haskell foundation slack too should be living large any day now!
[06:22:10] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[06:28:03] *** Joins: trillp (~trillp@69.233.98.238)
[06:28:58] *** Quits: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca) (Ping timeout: 258 seconds)
[06:32:31] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[06:33:40] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Read error: Connection reset by peer)
[06:35:25] *** Joins: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net)
[06:37:24] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[06:37:50] *** Quits: alx741 (~alx741@186.178.109.50) (Quit: alx741)
[06:40:50] *** Parts: pragma- (~chaos@user/pragmatic-chaos) (Bye!)
[06:43:32] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[06:43:46] *** Joins: lavaman (~lavaman@98.38.249.169)
[06:44:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:48:21] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[06:48:23] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 264 seconds)
[06:49:10] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[06:53:43] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[06:57:32] *** Quits: econo (uid147250@user/econo) (Quit: Connection closed for inactivity)
[07:03:07] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Read error: Connection reset by peer)
[07:05:30] *** Joins: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com)
[07:06:42] *** Joins: stengah (~stengah@user/stengah)
[07:09:13] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 258 seconds)
[07:18:58] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[07:24:23] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[07:33:22] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[07:38:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 245 seconds)
[07:44:33] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[07:44:43] *** Quits: monochrom (trebla@216.138.220.146) (Quit: NO CARRIER)
[07:45:05] <conjunctive> Hi, does anyone have an example on how to parse a 32-bit float in BE from a ByteString with Attoparsec?
[07:47:11] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:47:11] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:47:11] *** Joins: wroathe (~wroathe@user/wroathe)
[07:47:52] <pavonia> Workaround: Parse 4 bytes and feed the result to the appropriate Data.Binary.Get function
[07:48:56] *** Quits: fawful (~guy@c-76-104-217-93.hsd1.wa.comcast.net) (Quit: WeeChat 3.2)
[07:49:11] <pavonia> conjunctive: Or even better, use https://hackage.haskell.org/package/attoparsec-binary-0.2/docs/Data-Attoparsec-Binary.html
[07:53:58] *** Quits: boxscape_ (~boxscape_@p54a3581e.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[07:54:58] *** Joins: bitmapper (uid464869@id-464869.lymington.irccloud.com)
[07:56:43] <conjunctive> Hmm I don't see any float-specific functions in attoparsec-binary. I know there's a way to use scientific and convert to a float afterwards, but was hoping to find something more direct.
[07:56:56] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 265 seconds)
[07:57:19] *** Joins: mbuf (~Shakthi@122.178.207.237)
[07:59:32] *** Joins: monochrom (trebla@216.138.220.146)
[08:00:59] *** Quits: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com) (Ping timeout: 264 seconds)
[08:03:14] *** Joins: [Kalisto] (~nico@user/kalisto/x-8968079)
[08:03:25] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[08:08:19] *** Joins: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com)
[08:08:54] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[08:09:58] *** Parts: trillp (~trillp@69.233.98.238) ()
[08:14:01] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 252 seconds)
[08:15:45] <pavonia> Oh floats, sorry
[08:16:39] <conjunctive> no worries! appreciate the suggestion :)
[08:17:37] <pavonia> Looks like Data.Binary just does a casting from Int to Float internally with the read bytes: https://hackage.haskell.org/package/binary-0.10.0.0/docs/src/Data.Binary.FloatCast.html#wordToFloat
[08:17:56] <pavonia> So it should be easy to adapt this for attoparsec
[08:24:23] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[08:30:33] <dsal> Man.  Amazonka changed a lot.
[08:30:43] <dsal> The changelog doesn't do it justice.
[08:33:16] *** Joins: NataSa23F (~KELEBEK@188.119.58.106)
[08:35:05] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Ping timeout: 258 seconds)
[08:38:38] *** Joins: aa (~douglasco@200.146.85.128.static.gvt.net.br)
[08:38:53] *** Quits: ChaiTRex (~ChaiTRex@user/chaitrex) (Quit: ChaiTRex)
[08:39:25] *** Quits: NataSa23F (~KELEBEK@188.119.58.106) (K-Lined)
[08:40:40] *** Joins: ChaiTRex (~ChaiTRex@user/chaitrex)
[08:41:08] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[08:41:08] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[08:41:08] *** Joins: wroathe (~wroathe@user/wroathe)
[08:41:34] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[08:42:23] *** Quits: douglascorrea_io (~douglasco@200.146.85.128.static.gvt.net.br) (Ping timeout: 264 seconds)
[08:44:17] *** Quits: jlamothe (~jlamothe@198.251.61.229) (Ping timeout: 258 seconds)
[08:45:46] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[08:45:49] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae) (Ping timeout: 258 seconds)
[08:47:35] *** Joins: [Kalisto]_ (~nico@user/kalisto/x-8968079)
[08:47:38] *** Quits: [Kalisto] (~nico@user/kalisto/x-8968079) (Ping timeout: 260 seconds)
[08:47:55] * Hecate is the proud parent of a newborn library https://github.com/Kleidukos/display/
[08:52:19] *** Joins: Moyst_ (~moyst@user/moyst)
[08:54:10] *** Quits: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi) (Ping timeout: 260 seconds)
[08:54:43] *** Quits: Moyst (~moyst@user/moyst) (Ping timeout: 252 seconds)
[08:54:43] <awpr> nice, that sounds like the perfect complement to `portray`
[08:55:10] <awpr> user-facing, pretty, and not Haskell syntax, vs. developer-facing, pretty, and Haskell syntax
[09:02:12] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:02:12] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:02:12] *** Joins: wroathe (~wroathe@user/wroathe)
[09:06:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 258 seconds)
[09:07:50] *** Joins: takuan (~takuan@178-116-218-225.access.telenet.be)
[09:08:10] *** Quits: remexre (~nathan@user/remexre) (Quit: WeeChat 3.1)
[09:08:19] *** Joins: remexre (~nathan@207-153-38-50.fttp.usinternet.com)
[09:09:06] *** Quits: remexre (~nathan@207-153-38-50.fttp.usinternet.com) (Client Quit)
[09:09:23] *** Joins: remexre (~remexre@user/remexre)
[09:10:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:13:02] *** Joins: Cajun (~Cajun@user/cajun)
[09:15:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[09:19:17] *** Joins: lavaman (~lavaman@98.38.249.169)
[09:24:02] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[09:25:48] *** Joins: mei (~mei@user/mei)
[09:30:52] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[09:31:20] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[09:32:40] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[09:39:58] *** Joins: fendor (~fendor@91.141.32.154.wireless.dyn.drei.com)
[09:43:17] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[09:43:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:48:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 265 seconds)
[09:51:46] *** Quits: falafel (~falafel@2603-8000-d800-688c-c469-52c4-b20d-779e.res6.spectrum.com) (Ping timeout: 245 seconds)
[09:52:40] *** Quits: Sgeo (~Sgeo@user/sgeo) (Read error: Connection reset by peer)
[09:55:13] *** Quits: stiell (~stiell@gateway/tor-sasl/stiell) (Remote host closed the connection)
[09:56:28] *** Joins: stiell (~stiell@gateway/tor-sasl/stiell)
[09:58:58] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[09:59:13] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[10:02:19] *** Joins: michalz (~michalz@185.246.204.93)
[10:06:27] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[10:13:54] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:8daf:444e:9c84:5148)
[10:17:22] *** Joins: rkrishnan (~user@2402:e280:215c:2cd:d6b1:e062:567:7a9c)
[10:19:39] *** Joins: dhouthoo (~dhouthoo@178-117-36-167.access.telenet.be)
[10:21:46] *** Quits: jonathanx (~jonathan@dyn-8-sc.cdg.chalmers.se) (Ping timeout: 245 seconds)
[10:22:45] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[10:27:04] *** Joins: dextaa3 (~DV@user/dextaa)
[10:27:09] *** Joins: jumper149 (~jumper149@80.240.31.34)
[10:27:12] <Inst_> wow
[10:27:18] <Inst_> the Cambridge Haskell textbook is great
[10:27:20] <Inst_> it's only 127 pages
[10:27:32] <Inst_> I think it teaches no concepts, but that actualyl makes it better.
[10:27:32] *** Joins: jonrh_ (sid5185@id-5185.ilkley.irccloud.com)
[10:27:33] *** Inst_ is now known as Inst
[10:27:34] *** Joins: ircbrowse_tom_ (~ircbrowse@static.162.49.55.162.clients.your-server.de)
[10:27:56] *** Joins: amir_ (sid22336@user/amir)
[10:28:02] *** Joins: ikex1 (ash@user/ikex)
[10:28:06] *** Joins: davl (~davl@207.154.228.18)
[10:28:20] *** amir_ is now known as Guest6318
[10:28:23] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[10:28:30] *** Joins: codolio (~dolio@130.44.130.54)
[10:29:02] *** Joins: mei (~mei@user/mei)
[10:29:15] *** Joins: jonathanx (~jonathan@178.174.176.109)
[10:29:34] *** Joins: piele_ (~piele@tbonesteak.creativeserver.net)
[10:30:10] *** Joins: platz_ (~platz@40.122.118.113)
[10:30:12] *** Joins: Tordek_ (tordek@triton.blinkenshell.org)
[10:30:17] *** Joins: opqdonut_ (opqdonut@pseudo.fixme.fi)
[10:30:22] *** Joins: some02_ (~cat@h-98-128-128-173.A351.priv.bahnhof.se)
[10:30:34] *** Joins: ski_ (~ski@remote12.chalmers.se)
[10:30:39] *** Joins: Rembane_ (~Rembane@li346-36.members.linode.com)
[10:30:42] *** Joins: nckx_ (~nckx@tobias.gr)
[10:31:07] *** Joins: urdh_ (~urdh@user/urdh)
[10:33:05] *** Joins: sm[i]_ (~user@li229-222.members.linode.com)
[10:35:18] *** Joins: acowley_ (~acowley@c-68-83-22-43.hsd1.nj.comcast.net)
[10:37:59] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Quit: Leaving)
[10:39:03] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Read error: Connection reset by peer)
[10:39:50] *** Quits: ikex (~ash@user/ikex) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Franciman (~Franciman@mx1.fracta.dev) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: davl_ (~davl@207.154.228.18) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ircbrowse_tom (~ircbrowse@2a01:4f8:1c1c:9319::1) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: kosmikus[m] (~andresloe@2001:470:69fc:105::95d) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: monadfritz[m] (~ahdytmatr@2001:470:69fc:105::e1f1) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: stoicswe[m] (~deadlette@2001:470:69fc:105::d277) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Orbstheorem (~orbstheor@2001:470:69fc:105::a56) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: schuelermine[m] (~schuelerm@user/schuelermine) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: carmysilna (~brightly-@2001:470:69fc:105::2190) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: dolio (~dolio@130.44.130.54) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: amir (sid22336@user/amir) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: jonrh (sid5185@ilkley.irccloud.com) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: opqdonut (opqdonut@pseudo.fixme.fi) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Tordek (tordek@triton.blinkenshell.org) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: some02 (~cat@h-98-128-128-173.A351.priv.bahnhof.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: deni (~deni@mail.denibertovic.com) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Unhammer (~Unhammer@user/unhammer) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: platz (~platz@user/platz) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: nckx (~nckx@tobias.gr) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ski (~ski@remote12.chalmers.se) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: acowley (~acowley@c-68-83-22-43.hsd1.nj.comcast.net) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: oak- (~oakuniver@2001:470:69fc:105::fcd) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: ixlun (~ixlun@2001:470:69fc:105::41b3) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: moats (~oats@user/oats) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: dextaa (~DV@user/dextaa) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: piele (~piele@tbonesteak.creativeserver.net) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: urdh (~urdh@user/urdh) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: sm[i] (~user@plaintextaccounting/sm) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: Rembane (~Rembane@li346-36.members.linode.com) (Ping timeout: 260 seconds)
[10:39:50] *** Quits: niko (~niko@libera/staff/niko) (Ping timeout: 615 seconds)
[10:39:50] *** ikex1 is now known as ikex
[10:39:50] *** Guest6318 is now known as amir
[10:39:50] *** jonrh_ is now known as jonrh
[10:39:50] *** dextaa3 is now known as dextaa
[10:39:51] *** nckx_ is now known as nckx
[10:39:51] *** urdh_ is now known as urdh
[10:40:17] *** Quits: tzh (~tzh@c-24-21-73-154.hsd1.or.comcast.net) (Quit: zzz)
[10:40:21] *** Joins: Franciman (~Franciman@mx1.fracta.dev)
[10:40:42] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[10:40:50] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[10:40:52] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Read error: Connection reset by peer)
[10:41:38] *** Joins: deni (~deni@mail.denibertovic.com)
[10:41:45] *** Joins: niko (~niko@libera/staff/niko)
[10:41:47] *** Joins: stoicswe[m] (~deadlette@2001:470:69fc:105::d277)
[10:41:59] *** Joins: Unhammer (~Unhammer@user/unhammer)
[10:42:02] *** deni is now known as Guest9608
[10:42:02] *** Joins: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[10:42:21] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 258 seconds)
[10:42:42] *** Joins: superbil (~superbil@1-34-176-171.hinet-ip.hinet.net)
[10:43:28] *** Joins: schuelermine[m] (~schuelerm@user/schuelermine)
[10:43:32] *** Joins: Orbstheorem (~orbstheor@2001:470:69fc:105::a56)
[10:43:52] *** Joins: kevin[m]1 (~pnotequal@2001:470:69fc:105::a54)
[10:44:20] *** Joins: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl)
[10:44:21] *** Joins: monadfritz[m] (~ahdytmatr@2001:470:69fc:105::e1f1)
[10:45:01] *** Joins: ubert1 (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[10:45:50] *** Joins: kosmikus[m] (~andresloe@2001:470:69fc:105::95d)
[10:45:54] *** Joins: carmysilna (~brightly-@2001:470:69fc:105::2190)
[10:46:42] *** Joins: moats (~oats@user/oats)
[10:47:03] *** Joins: oak- (~oakuniver@2001:470:69fc:105::fcd)
[10:48:03] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[10:48:11] *** Joins: ixlun (~ixlun@2001:470:69fc:105::41b3)
[10:52:58] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[10:53:28] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Remote host closed the connection)
[10:54:19] *** Joins: chele (~chele@user/chele)
[10:56:49] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:75c6:cb1e:9970:92ae)
[11:00:30] <DigitalKiwi> Hecate: can you write kommissar with it
[11:02:40] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Ping timeout: 258 seconds)
[11:03:30] *** Quits: natechan (~nate@108-233-125-227.lightspeed.sntcca.sbcglobal.net) (Ping timeout: 265 seconds)
[11:06:22] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[11:07:55] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[11:09:03] *** Joins: cfricke (~cfricke@user/cfricke)
[11:11:29] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Ping timeout: 258 seconds)
[11:12:59] *** Quits: renzhi (~xp@2607:fa49:6500:b100::6e7f) (Ping timeout: 264 seconds)
[11:13:40] *** Quits: cfricke (~cfricke@user/cfricke) (Ping timeout: 260 seconds)
[11:16:09] <dminuoso> Axman6: So what do you want to know about our SDN compiler?
[11:17:36] <dminuoso> It's nothing fancy. Very broadly you configure some edge port to be in some L3 or L2 domain in our DCIM/IPAM tool (netbox), and our haskell program takes the entire description, turns it into intermediate representations, does some graph things, validates certain properties, turns into vendor agnostic specification, which are turned into vendor specific configurations.
[11:17:49] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:17:59] <dminuoso> All under the assumption that we have a semantic underlay
[11:18:30] <dminuoso> And then we throw that into the entirety of our core network, run `ifreload -a`, and then go on with our coffee.
[11:25:05] *** Joins: phma_ (~phma@host-67-44-209-75.hnremote.net)
[11:26:30] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[11:27:15] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (Quit: Changing server)
[11:27:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Remote host closed the connection)
[11:27:46] *** Joins: cfricke (~cfricke@user/cfricke)
[11:28:10] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[11:28:21] *** Quits: absence (torgeihe@hildring.pvv.ntnu.no) (Client Quit)
[11:28:44] *** Quits: phma (~phma@host-67-44-209-75.hnremote.net) (Ping timeout: 258 seconds)
[11:36:00] *** Joins: jlamothe (~jlamothe@198.251.61.229)
[11:36:50] *** Joins: fef (~thedawn@user/thedawn)
[11:39:17] *** Joins: hendursa1 (~weechat@user/hendursaga)
[11:42:45] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[11:47:29] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[11:47:30] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[11:47:54] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[11:53:21] <Franciman> do you know of any wiki written in haskell?
[11:54:30] *** Joins: kayprish (~kayprish@46.240.130.158)
[11:56:16] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb955960125781424a48.dip0.t-ipconnect.de)
[11:56:56] *** Quits: shriekingnoise (~shrieking@186.137.144.80) (Quit: Quit)
[11:58:52] *** Joins: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7)
[12:04:03] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[12:05:10] *** Quits: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[12:08:16] *** Quits: Teacup (~teacup@user/teacup) (Ping timeout: 265 seconds)
[12:08:46] *** Quits: coot (~coot@37.30.48.91.nat.umts.dynamic.t-mobile.pl) (Ping timeout: 260 seconds)
[12:10:17] <dhouthoo> Franciman: gitit
[12:10:38] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:11:02] <Franciman> dhouthoo: https://en.wikipedia.org/wiki/Gitit_(software) <- ?
[12:11:43] <dhouthoo> yes
[12:11:51] <Franciman> thanks
[12:12:01] <Franciman> I freaking love the image of the dog with the freesbie
[12:12:04] <Franciman> T.T
[12:12:21] *** Joins: kuribas (~user@ptr-25vy0i7zawtky0bq46n.18120a2.ip6.access.telenet.be)
[12:13:02] <kuribas> isn't there a point where you abolish the combinatory cleverness, and just write something slightly verbose, but easy to write?
[12:13:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:14:06] *** Quits: bitmapper (uid464869@id-464869.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[12:14:33] *** Joins: Teacup (~teacup@user/teacup)
[12:15:51] *** Joins: __monty__ (~toonn@user/toonn)
[12:19:02] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[12:28:01] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[12:30:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[12:30:34] *** Quits: zaquest (~notzaques@5.128.210.178) (Remote host closed the connection)
[12:32:31] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 252 seconds)
[12:32:39] *** Joins: zaquest (~notzaques@5.128.210.178)
[12:35:11] <kuribas> concise code can be elegant, but for production I sometimes just want it to work.
[12:35:21] <kuribas> Even if there is a potentially much more clever solution.
[12:36:50] *** Joins: phma (~phma@host-67-44-209-75.hnremote.net)
[12:40:02] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb955960125781424a48.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[12:40:02] *** Quits: phma_ (~phma@host-67-44-209-75.hnremote.net) (Ping timeout: 260 seconds)
[12:46:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[12:46:24] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb955960125781424a48.dip0.t-ipconnect.de)
[12:50:46] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[12:50:48] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Remote host closed the connection)
[12:51:24] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[12:51:36] *** Joins: stengah (~stengah@user/stengah)
[12:55:56] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Ping timeout: 245 seconds)
[12:56:28] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[12:56:52] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[12:58:32] *** Joins: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3)
[13:01:55] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:02:12] *** Quits: o1lo01ol1o (~o1lo01ol1@2001:8a0:6d7a:df01:d1f9:60a1:52fb:92f3) (Remote host closed the connection)
[13:05:04] *** Parts: some02_ (~cat@h-98-128-128-173.A351.priv.bahnhof.se) ()
[13:06:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[13:09:43] <Inst> Can I ask a question about Haskell?
[13:09:52] <Inst> How good is the Haskell library support?
[13:14:28] *** Joins: sudden (~cat@user/sudden)
[13:14:39] <kuribas> Do you mean if there are many libraries?
[13:21:09] <Inst> I want to use Haskell as a general purpose language, i.e, do most of my programming in Haskell
[13:21:33] <yushyin> https://github.com/Gabriel439/post-rfc/blob/main/sotu.md maybe this helps
[13:21:35] <Inst> it'd have to beat C++ and Python / Javascript for general purpose programming, i.e, C++ gets picked up
[13:21:52] <Inst> for performance, Javascript for web development
[13:22:00] <Inst> Thanks
[13:22:04] <kuribas> Inst: why would it?
[13:22:39] <Inst> I just want to have a use case for Haskell
[13:22:40] <maerwald> beating C++ and python ecosystem isn't what Haskell can offer
[13:22:55] <kuribas> Inst: you use haskell because you want good performance and robustness.
[13:23:37] <kuribas> Inst: neither C++ or Python give you robustness, and Python is only performant if you use C library bindings.
[13:24:00] <maerwald> python can satisfy high-performance applications
[13:24:21] <maerwald> kuribas: well, same goes for haskell
[13:24:45] <Inst> I want to reasonably do most of my code in Haskell
[13:24:52] <maerwald> e.g. I just switched from yaml (where the core is C) to HsYAML (pure haskell) and the performance got 10 times worse
[13:25:00] <Inst> erm, be justified if I opt to be primarily a Haskell programmer
[13:25:15] <troydm> trying to write a stack.yml file for an existing haskell project and I'm having trouble compiling it with issues like 
[13:25:26] <troydm> Cabal-simple_mPHDZzAJ_3.2.1.0_ghc-8.10.7: The program 'c2hs' version >=0.15 is
[13:25:39] <kuribas> Inst: if it's for hobby, then haskell could be all you need.
[13:25:45] <troydm> isn't c2hs part of ghc distribution in Haskell and should be added to PATH?
[13:26:00] <Inst> kuribas: that's sort of the argument I'm making and getting lots of pushback on
[13:26:14] <Inst> that Haskell is an ideal hobbyist / non-professional language
[13:26:37] <kuribas> Inst: it's not ideal IMO.  Python is better for hobbyists.
[13:26:59] <Inst> except Python doesn't produce robust code except with extensive testing?
[13:27:16] <kuribas> Which is usually not a priority for hobbyists.
[13:27:40] <maerwald> troydm: no it isn't
[13:27:49] <Inst> should it be a priority?
[13:28:08] <maerwald> troydm: hsc2hs is
[13:28:20] <lortabac> if it's a hobby, you can do whatever you want
[13:28:21] <troydm> ./snapshots/x86_64-linux-tinfo6/a9e764900658a3a32616042d51034aed40b88e23187d2aa53933d7c0f2be2a09/8.10.7/bin/c2hs
[13:28:29] <troydm> it's from .stack dir
[13:28:31] <kuribas> Inst: by definition of "hobbyist", there isn't.  You do what you want as long as you enjoy it.
[13:28:33] <lortabac> just use whatever language you feel like using
[13:28:37] <troydm> so program itself is installed
[13:28:45] <maerwald> troydm: so?
[13:28:55] <lortabac> I do all my hobby projects in Prolog, just because I can
[13:29:01] <maerwald> c2hs is not part of ghc distribution
[13:29:16] <maerwald> what stack does is something orthogonal
[13:29:20] <Inst> also, a question
[13:29:29] <Inst> how much faster is Haskell to develop in
[13:29:34] <Inst> compared to other languages?
[13:29:42] <maerwald> Inst: usually slower in the beginning
[13:29:56] <kuribas> Inst: I'd say faster when you experienced, slower when you start out.
[13:29:57] <troydm> maerwald: okey so how do I make it so it would be dependency and added to PATH during compilation?
[13:30:10] <maerwald> troydm: add it to build-depends in your cabal file
[13:30:32] <maerwald> https://cabal.readthedocs.io/en/latest/cabal-package.html?highlight=build-tool#pkg-field-build-tool-depends
[13:30:34] <kuribas> Inst: also, it's only faster if you count testing and quality assurance.  Often people get out programs quickly, which then are full of bugs.
[13:30:58] <Inst> put another way, say a manager has the brainpower needed to get good at haskell
[13:31:14] <maerwald> when all I do is *prototype*, then I don't have a difference of number in bugs, no matter wheter I use Haskell, python or rust
[13:31:33] <maerwald> when I maintain a project for a longer period of time, then that number becomes different across languages
[13:31:34] <Inst> does haskell have a use-case, i.e, if s/he wants the IT department to recycle his or her code
[13:31:46] <Inst> it's less likely to be garbage that has to be completely reimplemented?
[13:31:52] <troydm> what's the difference between hsc2hs and c2hs?
[13:32:22] <troydm> I see that hsc2hs is listed as build-tools 
[13:32:35] <troydm> so it seems like it should actually work, but it's not
[13:32:37] <maerwald> Inst: I don't understand the question
[13:32:49] <kuribas> Inst: it forces you to think about program structure and state, so yes :)
[13:32:55] <yushyin> troydm: http://blog.ezyang.com/2010/06/the-haskell-preprocessor-hierarchy/
[13:33:19] <kuribas> Inst: as in, you either produce something that is well structured, or you give up in tears.
[13:33:22] <Inst> maerwald: let's say someone is a hobbyist programmer, but they're working for a small organization that doesn't have development resources out the wazoo
[13:33:28] <maerwald> Haskell doesn't solve your engineering problems if you have poor engineers
[13:33:31] <troydm> yushyin: okey, this suddenly gotten weirdly complicated
[13:33:51] <kuribas> maerwald: haskell doesn't solve any engineering problem.
[13:34:04] <kuribas> It just provide tools and means to abstract your engineering problem.
[13:34:16] <kuribas> It assumes you have solved the problem already.
[13:34:30] <maerwald> invest in good engineers, then let them worry about language choice
[13:34:45] <kuribas> With the abstractions you can structure it in a nice way that makes the business logic more clear.
[13:35:07] <Inst> they end up producing the initial code for a project before IT takes over
[13:35:36] <maerwald> Inst: write the code in the simplest possible language if non-programmers or devops have to take it over
[13:35:37] <yushyin> troydm: It is not complicated, but gives a good overview. It is not a long read.
[13:35:43] <Inst> i see
[13:36:07] *** Joins: Guest2920 (~Guest29@net-93-151-133-175.cust.dsl.teletu.it)
[13:36:07] <Inst> yeah, the problem with this use case is assuming the It department knows Haskell and can evaluate whether the code can be reused or if it has to be junked
[13:36:20] <Inst> more likely it'll be junked because the IT department doesn't know Haskell and can't properly evaluate it
[13:37:02] <maerwald> then it's a bad choice
[13:40:13] <troydm> yushyin: thx, I think i've got it without reading entire article, but I'll read it later anyway when I'll have time
[13:40:42] <kuribas> Inst: haskell is a hard sell unless several people are in on it.
[13:41:34] <maerwald> if you introduce Haskell to a company you better stay there for a year at least... everything else is irresponsible, imo
[13:42:06] <maerwald> not something you experiment and let others pick up
[13:42:52] <maerwald> I did that with coconut once (a python dialect) and I'm confident they still hate me
[13:43:51] <maerwald> well, that was because someone before me did that with me... rewrote something in Scala and then let the new joiner pick up the pieces
[13:44:03] <maerwald> so I kept the tradition
[13:44:11] <kuribas> maerwald: I am allowed to write haskell now "because it makes me happy".
[13:44:25] <kuribas> maerwal: I'll probably need to rewrite it once it's done.
[13:44:37] <kuribas> But fine be me :)
[13:45:07] <Inst> well, thanks for entertaining the troll (me)
[13:45:08] * Inst sighs
[13:45:16] <kuribas> I am just wondering how I can rewrite my nice batching effect in clojure.
[13:45:19] <maerwald> when I'm working for someone, I don't write code for myself, so my first thought when doing anything is: "who comes after me?"
[13:45:25] <kuribas> Inst: that didn't sound like trolling.
[13:45:30] <Inst> the only good thing i can say is that the haskell materials i've been exposed to right now
[13:45:42] <Inst> seem better written than the equivalent C++ material
[13:46:13] <kuribas> it's not such a great idea to introduce haskell in a company, unless the majority is enthousiastic.
[13:46:13] <maerwald> and even in open source, I'm starting to shift away from writing code for myself, because that usually means I'm the only one maintaining anything
[13:46:50] <kuribas> Much better would be to teach them how to write clean java/JS/whatever.
[13:47:00] <kuribas> Using the principles learned from haskell.
[13:47:04] <yushyin> golang
[13:48:29] <maerwald> Yeah, you can do great functional code in TypeScript
[13:49:05] *** Joins: dut (~dut@user/dut)
[13:49:18] <Inst> my shtick, kuribas, is trying to convince people that
[13:49:22] <Inst> we should replace Python with Haskell
[13:49:27] <Inst> for hobbyists
[13:49:39] <maerwald> why convince anyone?
[13:49:45] <Inst> to grow the Haskell community
[13:50:18] <maerwald> Inst: does your employer pay you for that?
[13:50:52] <LiaoTao> Inst, I don't think it's that easy to make Haskell appealing to the lowest common denominator of programmers
[13:51:02] <LiaoTao> Purely because of terminology, category theory and historical reasons
[13:51:19] *** Quits: dut (~dut@user/dut) (Read error: Connection reset by peer)
[13:51:42] *** Joins: dut (~dut@user/dut)
[13:51:52] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Remote host closed the connection)
[13:52:13] *** Quits: dut (~dut@user/dut) (Client Quit)
[13:53:19] <kuribas> Inst: we don't need to grow the Haskell community.
[13:56:06] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252)
[13:56:16] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@2.95.44.252) (Remote host closed the connection)
[13:57:07] *** Joins: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru)
[13:59:09] <Inst> That's to say, the language is academic, its target audience is to provide a unified language for computer science researchers, and that people like me are unnecessary?
[13:59:46] <Inst> That it's nice that Target and Goldmach Sachs (iirc) have Haskell-based applications running on their business platforms, but they're strictly unnecessary?
[14:04:50] *** Joins: Guest13 (~Guest13@cust190-dsl55.idnet.net)
[14:05:59] *** Joins: acidjnk_new3 (~acidjnk@p200300d0c703cb959894c42690fc4f0f.dip0.t-ipconnect.de)
[14:06:08] <kuribas> Inst: no language is necessary, you can just use assembly for everything if you want.
[14:06:09] <Inst> LiaoTao: well, I meet LCD requirements because I'm currently a non-programmer and I don't know cat theory nor do I have the intellectual apparatus needed to know category theory at this time
[14:06:20] <dminuoso> Say I have some `f :: IO (Maybe T)`, and inside of that I hold some `Maybe S` in my hand. How can I elegantly lift/apply some `S -> IO T` to that?
[14:06:38] *** Joins: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de)
[14:06:43] <dminuoso> Is there some kind of lift1 for MaybeT?
[14:09:21] *** Quits: acidjnk_new (~acidjnk@p200300d0c703cb955960125781424a48.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[14:12:07] <Inst> LiaoTao: not necessarily LCD, but perhaps non-programmers. I am telling people I know to go learn Haskell, even people with no prior programming background, on the belief that it has a valid hobbyist use case.
[14:12:19] <dminuoso> I mean I can do something like `runMaybeT $ do { r <- MaybeT foo; lift (g r) }`
[14:12:29] <dminuoso> Perhaps that's really what I want mmm
[14:14:52] *** Joins: peterhil (~peterhil@dsl-hkibng32-54fb56-2.dhcp.inet.fi)
[14:17:34] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 260 seconds)
[14:17:53] <maerwald> starting to learn and use a language for ego reasons (growing, reinformecent that you can take challenges etc) is great... but having that influence decisions in industry is a controversial thing
[14:18:28] *** Joins: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438)
[14:18:33] *** Quits: kayprish (~kayprish@46.240.130.158) (Read error: Connection reset by peer)
[14:19:13] *** Joins: mmhat (~mmh@55d4469f.access.ecotel.net)
[14:19:32] *** Quits: enoq (~enoq@2a05:1141:1f5:5600:b9c9:721a:599:bfe7) (Quit: enoq)
[14:20:46] <maerwald> and learning is absolutely about ego
[14:20:55] <maerwald> no negative connotation there
[14:22:14] <kuribas> Inst: you cannot do everything, you need to pick your own hobbies.
[14:22:41] <kuribas> Inst: would you like someone telling you that you absolutely need to learn gardening?
[14:22:56] <maerwald> only if you live in the UK
[14:23:12] <Inst> w/e, i'm effectively trolling right now, back to my textbooks. I'm a bit disappointed, but if this is how the Haskell community thinks, it's noted.
[14:23:42] <kuribas> Inst: I am not "the haskell community" :)
[14:24:05] <maerwald> Inst: the Haskell Foundation wants to broaden Haskell adoption in industry
[14:24:11] <maerwald> it sounds like that aligns with your goals
[14:24:26] <Inst> I'm more interested in broadening Haskell adoption overall, not necessarily in industry
[14:24:31] <kuribas> But to think that you need to convert everyone to use something, in order to enjoy it yourself, is not very productive.
[14:24:31] <maerwald> I'm still alienated by that goal, but it's a fair game
[14:24:32] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[14:24:34] <Franciman> my goal is to have a programming language strongly focused on wikis
[14:24:42] <Franciman> that's what my language is going to do
[14:24:47] <Franciman> be in symbiosis with the wiki
[14:24:49] <Inst> kuribas: how familiar are you with the concept of ecosystem?
[14:25:07] <Franciman> Inst: imho no language today has a good wiki
[14:25:10] <kuribas> Inst: as in biological?
[14:25:14] <Franciman> and it is not integrated in the language
[14:25:18] <Franciman> my language is doing it
[14:25:22] <Inst> more like social and economic
[14:25:33] <Franciman> is it broadening?
[14:25:41] <Inst> i guess you guys are more oriented toward the quality of the ecosystem, i.e, the people who hang around are like-minded, civil, and highly educated
[14:25:53] <Inst> trying to broaden the ecosystem perhaps sounds like "Success at All Costs"
[14:26:18] <Franciman> no the HF is going in that road you like
[14:26:20] <Franciman> don't worry
[14:26:29] <Franciman> have you read their mission and vision?
[14:26:34] <Franciman> I find many common words
[14:26:45] <Franciman> w-wait i find the suitable links for you to read
[14:26:45] <kuribas> I am only interested in "broadening the ecosystem" as far as that improve the quality of the tooling.
[14:27:23] <Inst> An independent, non-profit organization dedicated to broadening the adoption of Haskell, by supporting its ecosystem of tools, libraries, education, and research.
[14:27:29] <Franciman> Inst: https://haskell.foundation/vision/
[14:27:33] <Inst> i'm already on their site
[14:27:37] <Franciman> oh nice
[14:27:45] <maerwald> Franciman: well, better than no Haskell Foundation
[14:27:57] <Franciman> ?
[14:28:25] <maerwald> I mean... although I don't completely agree with that vision, I think it's fair that they follow that.
[14:28:34] *** Joins: stengah (~stengah@user/stengah)
[14:28:34] <Franciman> ah not judging that no
[14:28:37] <maerwald> there will be positive side effects
[14:28:42] <Franciman> I just said that Inst could be satisfied
[14:28:45] <Franciman> by the HF
[14:29:05] *** Quits: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk) (Ping timeout: 260 seconds)
[14:29:08] <Inst> there will also be negative ones, i.e, kiddies running around with bad manners, more bad code entering the ecosystem, etc
[14:29:49] <maerwald> not sure... current industry that uses Haskell isn't that bad
[14:30:09] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[14:30:15] <maerwald> but I'm not holding my breath for them to fix our problems
[14:30:42] *** Joins: alx741 (~alx741@186.178.109.50)
[14:30:43] <Franciman> what haskell is not fixing is that it is not becoming a wiki based language. But we can't blame anyone for that
[14:30:52] <Franciman> I just write my wiki based language and see how it goes
[14:31:27] <kuribas> Inst: scala is an example of what happens if you try to make a language that is both popular and cutting edge: a big mess.
[14:31:31] <Franciman> it can't make everyone happy
[14:31:37] <kuribas> Not that haskell isn't a big mess :)
[14:31:50] <Inst> kuribas: I just don't see why being popular has to be against being cutting edge.
[14:32:09] <kuribas> Inst: just look at scala
[14:32:09] <Inst> If someone wants to compromise "Avoid Success at All Costs", they can just fork the language.
[14:32:17] <maerwald> kuribas: with DH and linear types... it'll become a big mess soon. But there will always be a subset of maintainers that keep being sane and use it sparingly.
[14:32:18] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[14:32:28] <Inst> The language and its philosophy is fine as is; the language designers do not need to design the language to appeal to the masses.
[14:32:31] <Franciman> one difficult matter is that being cutting edge could mean less stability
[14:32:40] <Franciman> while mainstream means you want realiability as a company
[14:32:53] <Inst> I'm just saying expanding the ecosystem can be done without having to cut corners; the effort being made is in evangelization and education, as opposed to dumbing down Haskell.
[14:33:06] <Inst> Or making it ugly, for that matter.
[14:33:15] <kuribas> But haskell is messy because it is getting old, and accumulating features it wasn't designed for (dependent types).
[14:33:20] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[14:33:39] *** Quits: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi) (Read error: Connection reset by peer)
[14:33:44] <kuribas> Inst: trying to make haskell by telling people they have to use it is not very productive.
[14:33:57] <Inst> I don't think it's "forcing" people to use it.
[14:34:11] <Inst> Just telling them Haskell is interesting, it's cool, and I tihnk you're smart enough to learn it, is what I have more in mind.
[14:34:16] <Franciman> Inst: sorry I didn't quite understand what you mean
[14:34:33] <Franciman> you mean broadening haskell usage, right?
[14:34:34] <maerwald> using haskell in industry isn't that much better than any other language, because it's widely known amongst managers that you can "iterate quickly" on Haskell codebases
[14:34:35] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 264 seconds)
[14:34:37] <maerwald> so the pressure is real
[14:34:59] <Franciman> also haskell can be very solid on some things, and super brittle on others
[14:35:02] <Franciman> if you are not experienced 
[14:35:04] <Inst> I see.
[14:35:05] <Franciman> you can fall so easily
[14:35:08] <Franciman> lol
[14:35:15] <Inst> I just got confused a bit by the hype etc surrounding Haskell
[14:35:17] <Franciman> but that is getting very much better now
[14:35:17] *** Joins: Vajb (~Vajb@hag-jnsbng11-58c3a8-176.dhcp.inet.fi)
[14:35:24] <Franciman> it is getting better
[14:35:29] <Franciman> the ecosystem is getting much better
[14:35:29] *** Joins: jespada (~jespada@2803:9800:9842:7a62:5d33:6404:2aef:9813)
[14:35:42] <Franciman> we even have a language server implementation
[14:35:52] <Franciman> there are plenty of great libraries
[14:35:56] <Franciman> for doing webserver etc
[14:36:23] <Inst> If, say, a firm decides to mandate haskell development (and haskell isn't optimal for all use cases), that's up to them, based on their use-case, Haskell's propensities, and the capabilities of their existing staff.
[14:36:49] <Inst> I'm not saying force everyone to use haskell, unless there's an existing business case for having multi-language programmers work in haskell as opposed to other languages
[14:36:59] *** Quits: dsrt^ (~dsrt@68.101.53.15) (Ping timeout: 264 seconds)
[14:38:20] *** Quits: pavonia (~user@user/siracusa) (Quit: Bye!)
[14:38:21] <maerwald> Good Haskellers are rather expensive. There are a couple interesting startups that do Haskell, but the real space lies in fintech, where they have enough bucks for the star engineers and let them do their thing.
[14:38:48] <maerwald> And some companies absolutely pick haskell for both a) marketing and b) access to smart engineers.
[14:39:58] <maerwald> If you're a green startup in sweden with european wages... you'll maybe get a few students before they leave for the big bucks.
[14:40:23] <maerwald> something to consider when you wanna introduce haskell to your company :p
[14:41:30] <Inst> I have an idea for a start-up based around wearables, i.e, intersection of technology and fashion.
[14:41:40] <Inst> It's probably at least a few years before I can implement
[14:41:59] <maerwald> I want to write a dating app in Haskell. It's gonna be great.
[14:42:06] *** Joins: AlexNoo_ (~AlexNoo@178.34.160.45)
[14:42:19] <Inst> You're mocking me?
[14:42:42] <Inst> I don't see a particular use case for Haskell in such an environment, though, since it'd more likely be based around an Android ecosystem.
[14:42:50] <maerwald> I mean... I had the idea when I was drunk, but with some funding I might actually do it :p
[14:42:55] *** Joins: Guest|41 (~Guest|41@31-187-0-247.dynamic.upc.ie)
[14:43:07] <Inst> On the other hand, knowing Haskell might be good as a way to attract good developers.
[14:43:08] <maerwald> until I burned through the cash
[14:43:09] <Franciman> maerwald: a dating app for haskellers?
[14:43:31] <Franciman> a wiki can do it better
[14:43:38] <Franciman> collaborating to a wiki gets the best dates out
[14:43:47] <maerwald> Franciman: nah, an FRP based frontend that's snappy and reliable
[14:44:31] *** Quits: Alex_test (~al_test@94.233.240.148) (Ping timeout: 252 seconds)
[14:44:34] <Inst> maerwald: I'd be orienting the firm in China
[14:44:35] <maerwald> I've also been thinking for a long time about the "misclick" problem... how can a UI minimize misclicks
[14:44:49] <maerwald> reducing animations sure, but there's more
[14:44:52] <Inst> whatever happened to radial menus?
[14:45:00] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 258 seconds)
[14:45:03] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[14:45:04] *** Quits: AlexZenon (~alzenon@94.233.240.148) (Ping timeout: 252 seconds)
[14:45:27] <Inst> maerwald: you can probably remove misclicks via a click + mouse gesture combo
[14:45:34] *** Quits: AlexNoo (~AlexNoo@94.233.240.148) (Ping timeout: 252 seconds)
[14:46:02] *** Joins: alzgh (~alzgh@user/alzgh)
[14:46:07] <LiaoTao> That sounds like a surefire way to make everyone hate your UI
[14:46:52] <Inst> I mean a lot of apps require swipes already.
[14:47:28] <maerwald> you still want animations, but you could e.g. detect that your finger (pre-touch detection) switched context during an animation and have thresholds that block an action under certain circumstances
[14:48:28] <maerwald> I mean, you still need to support mass-swipes etc, so it's not an easy problem
[14:49:12] *** Joins: mzan (~quassel@mail.asterisell.com)
[14:49:21] <maerwald> and that technology could be somewhat extended to websites... I hate it when I click and due to an element that just finished loading, the layout changed and I hit some random button
[14:49:54] *** Joins: Alex_test (~al_test@178.34.160.45)
[14:49:58] *** Joins: AlexZenon (~alzenon@178.34.160.45)
[14:50:03] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[14:50:38] <Inst> Only matters if you're on a slow system; I have a decent connection and a decent workstation computer
[14:50:46] <Inst> sometimes I wish loading might be actually slower
[14:51:45] <maerwald> one idea on the desktop would be to block layout changes as long as the mouse is moving
[14:52:03] <maerwald> but that'll need more refinement
[14:53:17] <Franciman> Inst: are you on reddit too?
[14:54:22] <Inst> that post is mine
[14:55:09] <Franciman> which post?
[14:55:51] <Franciman> ah found
[14:56:04] <Franciman> Instrume, I-I had seen Inst somewhere else
[14:56:37] <Inst> I'm dropping the issue, I wrote an e-mail to HF about whether or not it'd be viable to try to espouse Haskell among non-programmers.
[14:56:57] <Franciman> it sure is a great idea
[14:57:09] <Inst> the average person is both smarter and dumber than you think, i.e, with the right education, they can do incredible things, but at the same time they often have really dumb ideas
[14:58:10] <Franciman> yeah people are interesting
[14:58:30] <Franciman> being dumb can just be a lack of something
[14:58:52] <Franciman> I wish we didn't have mass teaching as the only method 
[14:58:55] <Franciman> it is good
[14:59:11] <Franciman> but treating anybody as a individual can get a lot of benefits
[14:59:53] <LiaoTao> On the other hand some people are just plain dumb and can't be taught skills like extrapolation from known data.
[14:59:54] <Franciman> Inst: i recall projects teaching functional languages as first language
[15:00:27] <Inst> LiaoTao: was it Xun Zi or Mencius?
[15:00:45] <LiaoTao> Inst, LiaoTao
[15:00:46] <Inst> I forget, via Feng Youlan, some people are born sages, some are utterly incorrigible, most people are somewhere in between
[15:01:00] <Inst> and thus educable
[15:01:21] <Franciman> that's always the swingers being the most important
[15:01:38] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[15:02:10] <lortabac> I'm pretty sure dumb people don't exist, find something they are really interested in and they'll surprise you
[15:02:25] <Inst> umm, people with real physiological disabilities
[15:02:35] <Inst> someone with a chromosomal abnormality, for instance
[15:02:42] <lortabac> ok that's a different problem
[15:03:03] <Franciman> even in that case, let them be happy, and they'll find a way to be accomplished
[15:03:09] <LiaoTao> lortabac, That's a very generous view and not something I've been able to corroborate with reality
[15:03:13] <LiaoTao> Which is sad, but nevertheless
[15:03:37] <lortabac> think of how much intelligence it takes to do things like driving, yet most people can do it
[15:04:22] <LiaoTao> Someone more glib would ask you to take a look at your average roundabout during peak traffic hours
[15:04:56] <lortabac> anyway it's offtopic
[15:05:20] <LiaoTao> Right
[15:05:43] <Franciman> let's get back about how wiki as documentation is cool
[15:06:21] <lortabac> Franciman: welcome to 1990 :P
[15:06:30] <Franciman> *.*
[15:06:41] * Franciman puts eiffel65 on
[15:06:53] * hpc puts portlandia on :D
[15:06:59] <Franciman> *.*
[15:07:05] * LiaoTao puts macarena on
[15:07:14] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 258 seconds)
[15:07:21] <hpc> they didn't call it a wiki until 2005
[15:12:35] <Inst> @franciman: apparently there's a school in India that does Haskell first, Oxford does Haskell first, Haskell is included in first languages at Imperial College, Cambridge (at least sometimes) does Haskell first
[15:12:35] <lambdabot> Unknown command, try @list
[15:13:52] *** Joins: off^ (~off@68.101.53.15)
[15:14:30] <Inst> https://wiki.haskell.org/Haskell_in_education
[15:14:58] <Franciman> uh a wiki
[15:15:06] <Franciman> ty
[15:15:59] *** Quits: Guest|41 (~Guest|41@31-187-0-247.dynamic.upc.ie) (Ping timeout: 264 seconds)
[15:17:04] <LiaoTao> Some adventurous CS lecturer at Chalmers uses Haskell too
[15:18:26] <LiaoTao> We suddenly had lots of applications with Haskell on the resume, and I thought "Darn, maybe finally the year of FP is upon us", but as it turns out they had all just used it for a university course
[15:18:41] <sshine> they use Haskell on the 1st MSc course at University of Copenhagen. they used to use SML for the 1st BSc course, but I think they switched to F# now.
[15:21:27] *** Joins: lavaman (~lavaman@98.38.249.169)
[15:23:41] *** Joins: acidjnk_new (~acidjnk@pd9e0b933.dip0.t-ipconnect.de)
[15:24:21] <kuribas> Why don't they teach dependent types?
[15:24:43] <sshine> kuribas, imagine what that would make people feel when they get their first job.
[15:25:08] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 265 seconds)
[15:25:24] <dminuoso> kuribas: You have plenty cassava experience right?
[15:25:39] <dminuoso> Is there a way to have cassava mention the column name a particular field couldn't be parsed in?
[15:26:10] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 260 seconds)
[15:26:33] <dminuoso> It's quite frustrating to just get some: Failed reading: conversion error: expected Int, got "" (not enough input)
[15:26:47] *** Quits: acidjnk_new3 (~acidjnk@p200300d0c703cb959894c42690fc4f0f.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[15:26:55] <kuribas> dminuoso: https://github.com/haskell-hvr/cassava/pull/197
[15:27:11] <dminuoso> I knew I was asking the right person. :-)
[15:27:12] <dminuoso> Cheers
[15:27:34] <kuribas> I didn't get any update on this PR sadly...
[15:27:46] *** Parts: jakalx (~jakalx@base.jakalx.net) (Error from remote client)
[15:27:55] *** Joins: jakalx (~jakalx@base.jakalx.net)
[15:28:46] <dminuoso> kuribas: It's also frustrating that none of these FromField  instances do a BS.null check
[15:29:01] <kuribas> dminuoso: yeah
[15:29:49] <kuribas> I am considering reimplementing most of the functionality, and just using cassava as "ByteString -> [Map Text Text]"
[15:30:07] <dminuoso> Well it should be ByteString for general use
[15:30:09] <dminuoso> But yeah
[15:30:28] <dminuoso> I mean there's an alternate way
[15:30:35] <dminuoso> You can also parse into tuples of bytestrings
[15:31:04] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[15:31:37] <kuribas> Isn't csv utf8?
[15:32:00] <dminuoso> kuribas: But really it seems the best way is to have cassava parse into `data RecordRaw = RecordRaw { rawSalary :: ByteString, rawName :: ByteString }`, with some matching `data Record = Record { salary :: Int, name :: Text }`, and then write some generic code turning RecordRaw into Record, producing legigble errors..
[15:32:06] <dminuoso> csv isnt even well defined really
[15:32:36] <dminuoso> There's a lot of programs that rapidly produce latin encoded csvs instead
[15:32:48] <dminuoso> SqlDeveloper is very liberal
[15:32:53] <dminuoso> Pretty sure Excel is as well
[15:33:38] *** Joins: burnsidesLlama (~burnsides@dhcp168-039.wadham.ox.ac.uk)
[15:37:43] <kuribas> dminuoso: but then I have to make a Raw* record for each of my records?
[15:38:44] <dminuoso> Bah you know what, I think what Ill do
[15:38:47] <dminuoso> got a better idea
[15:41:36] <kuribas> make a new csv library?
[15:42:45] <kuribas> you could copy the low level parsing stuff from cassava.
[15:44:09] <dminuoso> Im going to quickly ruin its performance (not relevant to my case), and simply bolt on variants of (.:)
[15:44:14] <dminuoso> So I have .:: and .:!
[15:44:34] <dminuoso> Which would both include field names in errors, and .:! would assert the field be non empty
[15:46:39] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[15:47:41] *** Quits: Guest13 (~Guest13@cust190-dsl55.idnet.net) (Quit: Client closed)
[15:53:11] *** Quits: off^ (~off@68.101.53.15) (Ping timeout: 264 seconds)
[15:54:28] <zincy> Opinions on testing validity of generators in property based testing?
[15:55:55] *** Quits: k60 (~k60@broadband-95-84-168-218.ip.moscow.rt.ru) (Ping timeout: 265 seconds)
[15:57:42] *** Joins: machinedgod (~machinedg@135-23-192-217.cpe.pppoe.ca)
[15:58:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[16:00:24] <kuribas> zincy: add properties which validate your generators.
[16:00:47] <kuribas> you can get statistics that not all properties are trivial for example.
[16:01:36] <zincy> cover?
[16:02:10] <zincy> Yeah so testing your tests is ok in moderation
[16:04:13] <kuribas> Or I write a property that should fail, then remove it when I see the generator is catching those.
[16:04:39] <kuribas> Getting the generators right is also important.
[16:07:10] <zincy> So the coverage combinators for hedgehog are designed to help you get generators right
[16:07:14] <zincy> very cool
[16:07:35] <zincy> kuribas: Have you tried the state machine feature?
[16:07:41] <zincy> Wondering if it is worth a go
[16:07:49] <kuribas> zincy: no, I just recently learned that it exists.
[16:07:55] *** Quits: Guest2920 (~Guest29@net-93-151-133-175.cust.dsl.teletu.it) (Quit: Client closed)
[16:08:06] <kuribas> I didn't need it yet, but I might in the future.
[16:10:33] *** Joins: xiongxin (~quassel@119.123.103.160)
[16:11:01] <dminuoso> kuribas: https://gist.github.com/dminuoso/08e7b1aca8bb92fe84345adf3e0f1a10
[16:11:16] <dminuoso> Here, a dirty drop in solution for all my problems.
[16:11:47] <kuribas> why is that slow?
[16:12:21] *** Joins: Guest55 (~Guest55@78.198.4.122)
[16:12:36] <dminuoso> That (potentially doubly nested) runParser will defeat the deforestration technique 
[16:12:41] <dminuoso> Parser uses continuations internally
[16:12:45] <dminuoso> I turn that back into case-of
[16:13:01] <dminuoso> Bah, I can probably simply break Parser open and use those continuations manually
[16:13:03] <dminuoso> Maybe I shoulld
[16:13:38] <dminuoso> Ah wait, its not exported
[16:14:02] <dminuoso> So yeah, aside of `unsafeCoerce'ing` my way through, this is not going to play nice with large csvs
[16:14:06] <dminuoso> but the ones I deal with are small anyway
[16:14:56] *** AlexNoo_ is now known as AlexNoo
[16:15:50] <Guest55> Hey, Could someone help me understand the error that i'm having on this simple program: https://paste.tomsmeding.com/LL1aSDyt
[16:16:25] *** Joins: stengah (~stengah@user/stengah)
[16:16:57] <dminuoso> Guest55: Hey yes.
[16:17:00] *** Quits: xiongxin (~quassel@119.123.103.160) (Read error: Connection reset by peer)
[16:17:00] <lortabac> Guest55: you apply (.) on things that are not functions
[16:17:03] <dminuoso> % :t lines
[16:17:04] <yahb> dminuoso: String -> [String]
[16:17:25] <dminuoso> Or well, what lortabac said.
[16:17:58] <lortabac> :t (.)
[16:17:59] <lambdabot> (b -> c) -> (a -> b) -> a -> c
[16:18:04] *** Joins: xiongxin (~quassel@119.123.100.49)
[16:18:30] <Guest55> Could you elaborate? (... . lines str) isn't valid?
[16:19:07] <dminuoso> Guest55: You already applied lines to str.
[16:19:16] <dminuoso> So the expression `lines str` is of type [String]`
[16:19:50] <dminuoso> So if we take `f . lines str`, you're trying to compose `f` with .. uh well a list of strings. But if you look at the type of (.) above, you can see that (.) demands its second argument to be a function.
[16:20:36] <Guest55> Oh I see. So maybe `... . lines $ str` should do it?! And it seems to!
[16:21:10] *** Joins: lbseale (~lbseale@user/ep1ctetus)
[16:21:24] <Guest55> Thanks dminuoso !
[16:21:34] <lortabac> alternatively, you can remove 'str' both before and after the =
[16:21:37] *** Quits: mbuf (~Shakthi@122.178.207.237) (Quit: Leaving)
[16:21:50] <dminuoso> ^- and that would be the idiomatic thing to do, even. :)
[16:22:08] <Guest55> Ah yes point free style :)
[16:22:51] <dminuoso> Yeah. Though point free is not the ultimate goal, for simple function composition this is very idiomatic.
[16:23:28] <Guest55> I see, thanks!
[16:24:04] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:24:49] <lortabac> mixing (.) and ($) works too, but I find it a little confusing
[16:25:44] <Guest55> Now for the most difficult part (imho), how does one go from the error message to this conclusion? Supposing the error wasn't obvious at first sight, and you had to understand the error message, how would you link it to '.' ? Is it "In the second argument of ‘(.)’, namely ‘lines str’" that gives it away?
[16:26:18] <Guest55> Personally I was focused on the first part "Possible cause: ‘lines’ is applied to too many arguments"
[16:27:30] <lortabac> yes, the hint is correct
[16:27:47] <lortabac> lines is applied to too many arguments (1 instead of zero)
[16:29:04] <lortabac> unfortunately I don't think there is a simple universal method to understand the error messages
[16:29:16] <Guest55> Oh I see. GHC knows we're in a '.' composition context and hence knows that lines should have 0 (1 less than normal) argument ?
[16:29:55] <Guest55> lortabac: Yeah I find most of them quite cryptic, but i'm trying to train myself to understand them better!
[16:31:23] <lortabac> yes, (.) expects a function as a second argument, but you gave it a function applied to an argument, which resulted in a String
[16:31:51] <lortabac> so it deduced that you probably shouldn't have applied it
[16:31:52] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[16:32:24] <lortabac> but remember that these "possible causes" are just hints, they are not right 100% of the times
[16:33:52] <Guest55> Oh right, there's often more than one solution so the compiler certainly just tries to enumerate them.
[16:34:03] <Guest55> Thank you very much lortabac !
[16:34:18] *** Quits: AlexZenon (~alzenon@178.34.160.45) (Quit: ;-)
[16:34:22] *** Quits: Alex_test (~al_test@178.34.160.45) (Quit: ;-)
[16:34:26] *** Quits: AlexNoo (~AlexNoo@178.34.160.45) (Quit: Leaving)
[16:35:47] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[16:36:21] *** Quits: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc) (Ping timeout: 245 seconds)
[16:36:45] *** Joins: mei (~mei@user/mei)
[16:38:05] *** Quits: CiaoSen (~Jura@p200300c95730dd002a3a4dfffe84dbd5.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[16:38:45] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[16:40:02] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Quit: ZNC - https://znc.in)
[16:41:09] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Ping timeout: 258 seconds)
[16:41:37] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[16:41:54] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[16:46:05] *** Joins: off^ (~off@68.101.53.15)
[16:47:05] *** Joins: _bo (~bo@217.18.216.247)
[16:49:18] *** Joins: slack1256 (~slack1256@45.4.2.52)
[16:49:36] *** Joins: Farzad (~FarzadBek@178.131.24.144)
[16:50:32] <dminuoso> kuribas: But yeah, cassava is not very good in a lot of ways
[16:51:07] <_bo> Can someone please help me understand how to think about task of splitting string into substrings? I understand concept of maps and reduces, but how do I apply it here?
[16:51:20] *** Joins: renzhi (~xp@2607:fa49:6500:b100::6e7f)
[16:51:38] <dminuoso> _bo: What's the specific problem you are trying to solve?
[16:51:47] <_bo> "aaabbba" -> ["aaa", a], this is an example
[16:52:23] <_bo> dminuoso: If I'm completely transparent: https://www.codewars.com/kata/59c633e7dcc4053512000073
[16:52:30] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Ping timeout: 260 seconds)
[16:52:45] *** Joins: AlexZenon (~alzenon@178.34.160.45)
[16:52:47] *** Joins: MQ-17J (~MQ-17J@2607:fb90:1d89:67a9:1cd1:a18:a57f:e102)
[16:53:00] *** Joins: AlexNoo (~AlexNoo@178.34.160.45)
[16:53:23] <dminuoso> _bo: Okay, Im really not sure how you come from that kata to the example you provided.
[16:53:30] <_bo> I thought that I can approach this task by mapping string to sub-arrays of continuous consonants, then just replacing chars with numbers, then just summing sub-arrays and selecting the biggest
[16:53:39] <dminuoso> But oh well I think I get it.
[16:53:55] <dminuoso> _bo: Sounds about right. 
[16:54:35] <dminuoso> _bo: You can use `groupBy` from Data.List
[16:54:45] <dminuoso> Incidentally its non-sorting behavior will fit your usage pattern nicely
[16:55:09] <_bo> Grouping by "being consonant"? Clever
[16:55:24] <dminuoso> yeah, it will require additional processing. it's just one of many solutions.
[16:55:45] <dminuoso> _bo: Am I right in presuming you're just using these katas as ways to learn Haskell?
[16:55:51] <_bo> But then how do I implement this group myself? I like solving katas without any libraries
[16:56:01] <dminuoso> groupBy is part of base
[16:56:07] <dminuoso> % :t groupBy
[16:56:07] <yahb> dminuoso: (a -> a -> Bool) -> [a] -> [[a]]
[16:56:11] <dminuoso> % :t Data.List.groupBy
[16:56:11] <yahb> dminuoso: (a -> a -> Bool) -> [a] -> [[a]]
[16:56:16] *** Joins: Alex_test (~al_test@178.34.160.45)
[16:56:23] <dminuoso> But if you like, you can just write it yourself
[16:56:30] <dminuoso> It's a neat little challenge if you dont know how
[16:56:36] <_bo> Yes, you are 100% correct. I can't write any apps yet, so I'm starting with katas
[16:56:42] <dminuoso> _bo: at any rate.
[16:56:49] <dminuoso> _bo: The key primitives you are looking for is this:
[16:56:51] <dminuoso> % :t span
[16:56:51] <yahb> dminuoso: (a -> Bool) -> [a] -> ([a], [a])
[16:56:54] <dminuoso> % :t break
[16:56:54] <yahb> dminuoso: (a -> Bool) -> [a] -> ([a], [a])
[16:57:02] <dminuoso> A lot of string processing revolves around these two
[16:57:06] <dminuoso> Or list processing, rather.
[16:57:23] <dminuoso> % span (>5) [1,2,3,4,5,6,7]
[16:57:23] <yahb> dminuoso: ([],[1,2,3,4,5,6,7])
[16:57:28] <dminuoso> % span (<5) [1,2,3,4,5,6,7]
[16:57:28] <yahb> dminuoso: ([1,2,3,4],[5,6,7])
[16:57:46] <_bo> Seems like a takeWhile
[16:58:09] <dminuoso> Yeah, except `span` will also return the other list
[16:58:34] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 260 seconds)
[16:58:40] <dminuoso> So you can simply use `span` in some recursive manner, where you repeatedly work on the second remainder of the tuple
[16:59:38] *** Joins: Profpatsch (~Profpatsc@static.88-198-193-255.clients.your-server.de)
[17:00:00] <Profpatsch> chaining Wai.Middlewares means the last one receives the request first, right?
[17:00:14] <dminuoso> Profpatsch: what does "last" mean?
[17:00:14] <_bo> I see the idea, thanks! Will also try to write span myself
[17:00:24] <dminuoso> Profpatsch: or "chaining"
[17:00:25] <Profpatsch> middleware1 . middleware2  should pass the request to 1 first and 2 last
[17:00:29] <dminuoso> Profpatsch: Yes.
[17:00:32] <Profpatsch> Ah, okay
[17:00:35] <dminuoso> Profpatsch: Consider this:
[17:00:38] <dminuoso> type Middleware = Application -> Application
[17:00:40] <Profpatsch> I used  middleware2 >>> middleware1
[17:00:45] <dminuoso> And:
[17:00:46] <Profpatsch> So the order is reversed
[17:00:48] <dminuoso> type Application = Request -> (Response -> IO ResponseReceived) -> IO ResponseReceived 
[17:00:53] <xsperry> _bo going by the question on codewars link, you don't need group*, just filter, maximum and isConsonant :: Char -> Bool. you can write filter/maximum yourself if you want
[17:01:18] <dminuoso> xsperry: no, you need either some form of group or span
[17:01:29] <dminuoso> Or something similar in spirit
[17:01:38] <Profpatsch> dminuoso: I remember stumbling over this a while ago, thanks for confirming
[17:01:40] <dminuoso> The task is just poorly phrased
[17:01:56] <Profpatsch> So i’d use . instead of >>> and the order should be top-to-bottom or left-to-rigth
[17:02:00] <xsperry> dminuoso, how so? solve("zodiacs") = 26. value of z is 26. filter, maximum, and function that maps consonant to Int is all you need
[17:02:18] *** Quits: acidjnk_new (~acidjnk@pd9e0b933.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[17:02:29] <dminuoso> xsperry: you take the largest consecutive sequence of consonants, and then add their ascii values together
[17:02:49] <dminuoso> and the chunk of consequtive consonants with the highest such sum is what this kata is after
[17:02:59] *** Quits: rkrishnan (~user@2402:e280:215c:2cd:d6b1:e062:567:7a9c) (Remote host closed the connection)
[17:03:04] <xsperry> dminuoso, ah, my mistake. group will be useful then
[17:03:38] <dminuoso> Profpatsch: Mmm I think you have that the wrong way
[17:04:57] <dminuoso> Profpatsch: Consider for a second a simple response time logging middleware.
[17:05:08] <dminuoso> So you might have `profile :: Application -> Application`, or `profile :: Middleware`
[17:05:28] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[17:05:31] <dminuoso> You use this by simply applying this to your app `yourApp :: Application`, with `profile yourApp :: Application`
[17:06:17] <dminuoso> Since this is just a function, composing `profile` with `logging` in `profile . logging` will first apply the logging middleware, and then the profiling middleware.
[17:06:51] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:06:51] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:06:51] *** Joins: wroathe (~wroathe@user/wroathe)
[17:06:57] <dminuoso> Note that the order of middlewares is not necessarily reflecting on the relative order in which effects actually occur.
[17:07:14] <Profpatsch> logging (profile app)
[17:07:28] <Profpatsch> Won’t the request be passed to `logging` firts?
[17:07:44] <dminuoso> Profpatsch: Perhaps its best to simply write a middleware yourself.
[17:07:47] *** Quits: mei (~mei@user/mei) (Read error: Connection reset by peer)
[17:09:10] <Profpatsch> dminuoso: I have a bunch of self-written middlewares heer
[17:09:18] <Profpatsch> doesn’t mean I can understand the order in which things run :)
[17:09:36] <Profpatsch> I mean that would be a prime example of what good Wai documentation should have as an example
[17:09:41] <dminuoso> Profpatsch: Ah I think there's a mismatch between what you wrote and I understood.
[17:09:44] <dminuoso> Yes.
[17:10:23] <dminuoso> The "outer" middleware gets to hook *before* the inner middleware gets a request, and *after* the inner middleware sends a response.
[17:10:42] <dminuoso> Perhaps "middleware" is a very misleading name, since it's rather like an onion layer
[17:10:51] <dminuoso> it sits *around* an application, rather than in the middle..
[17:11:01] <Profpatsch> Yeah.
[17:11:13] <Profpatsch> Pretty close to just forking wai and improving the docs :)
[17:11:18] <Profpatsch> I mean I guess why not
[17:11:23] *** Joins: max22- (~maxime@2a01cb0883359800cd1fff3f97961f02.ipv6.abo.wanadoo.fr)
[17:11:32] <Profpatsch> I did the same to Servant.Foreign https://hackage.haskell.org/package/servant-foreign-0.15.4/docs/Servant-Foreign.html
[17:11:47] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 264 seconds)
[17:12:05] <dminuoso> Or you can just improve the official documentation?
[17:12:11] <dminuoso> Im sure if you made a PR, it would be welcomed.
[17:12:56] <Profpatsch> yep
[17:14:26] *** Quits: tomku (~tomku@user/tomku) (Quit: Lost terminal)
[17:16:18] <Profpatsch> Okay, I tried it out with badMid a req resp = error "oh no"  and  logMid a req resp = putStrLn "hi" >> a req resp 
[17:16:20] *** Joins: jollygood2 (~bc8165b6@217.29.117.252)
[17:16:25] *** Quits: xiongxin (~quassel@119.123.100.49) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[17:16:34] <Profpatsch> And  logMid . badMid  prints hi\noh no
[17:16:43] <Profpatsch> And badMid . logMid only "oh no"
[17:16:50] <Profpatsch> So the outer one runs “first”
[17:17:06] *** Joins: stengah (~stengah@user/stengah)
[17:17:20] <Profpatsch> Since all of this is in IO, you can actually determine what is first and what is later :
[17:18:38] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[17:19:11] <dminuoso> In the absence of forkIO :>
[17:19:44] <Profpatsch> na na na I can’t hear you
[17:19:57] <dminuoso> forkIO really ruins a lot of naive interpretations of IO too :(
[17:20:59] <Profpatsch> I bet terrorjack can tell a story or two about IO and implementing a runtime :P
[17:21:54] *** Quits: stengah (~stengah@user/stengah) (Ping timeout: 260 seconds)
[17:22:54] *** Quits: MQ-17J (~MQ-17J@2607:fb90:1d89:67a9:1cd1:a18:a57f:e102) (Read error: Connection reset by peer)
[17:23:13] *** Joins: MQ-17J (~MQ-17J@35.50.77.148)
[17:24:24] *** Joins: mei (~mei@user/mei)
[17:25:40] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[17:26:24] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:26:24] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[17:26:24] *** Joins: wroathe (~wroathe@user/wroathe)
[17:30:52] *** Joins: mc47 (~mc47@xmonad/TheMC47)
[17:31:13] *** Quits: fef (~thedawn@user/thedawn) (Quit: Leaving)
[17:32:53] <Profpatsch> lol nobody has touched this documentation since Greg Weber in 2015
[17:33:26] * geekosaur thanks you in advance
[17:33:38] <Profpatsch> Though I don’t understand the existing docstring, at all
[17:33:48] <Profpatsch> -- string map \[(String, String)\]. A logical type signature for this middleware
[17:33:48] <geekosaur> every time I hit the documentation for wai I bounce hard :(
[17:33:50] <Profpatsch> -- might be:
[17:33:52] <Profpatsch> --
[17:33:54] <Profpatsch> -- @ loadSession :: ([(String, String)] -> Application) -> Application @
[17:34:08] <Profpatsch> Why is it left-bracketed
[17:34:37] <Profpatsch> cause of ([…] -> Req -> Respond -> IO …) -> (Req -> Respond -> IO …)
[17:35:42] *** Joins: lbseale_ (~lbseale@user/ep1ctetus)
[17:35:47] <dminuoso> Profpatsch: Because that's how things are associated?
[17:35:58] <dminuoso> They are a bit redundant, perhaps some personal style?
[17:36:15] <dminuoso> That is [(String, String)] -> Application -> Application means the same thing. :)
[17:36:27] <dminuoso> And yeah, perhaps this is just some refactoring artifact
[17:36:37] <dminuoso> Perhaps originally this was
[17:36:58] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:8daf:444e:9c84:5148) (Quit: WeeChat 2.8)
[17:37:03] <Profpatsch> Is it though?  a -> b -> b is  a -> (b -> b) no?
[17:37:10] <Profpatsch> Wheras this is (a -> b) -> b
[17:37:14] <dminuoso> uh hold on
[17:37:24] <dminuoso> This is embarrassing.
[17:37:26] <dminuoso> :)
[17:37:35] <Profpatsch> But yeah, we def need good examples in the docs
[17:37:36] <dminuoso> Yeah you're right
[17:37:41] <Profpatsch> That is targeted at haskell newbs
[17:37:47] <Profpatsch> because that’s who would like to write webservers
[17:37:49] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-204.002.203.pools.vodafone-ip.de)
[17:38:03] <Profpatsch> So Wai is in a sense one of the most important Haskell modules
[17:38:07] <dminuoso> kuribas: Gosh I really hate cassava now. :(
[17:38:15] <dminuoso> I wish errors worked like this:
[17:38:51] <dminuoso> a) Id like the option to include the entire row in an error, or b) include some primary key (from the row) in an error
[17:38:54] *** Joins: tomku (~tomku@user/tomku)
[17:38:56] <dminuoso> Such that you could write:
[17:39:10] *** Quits: lbseale (~lbseale@user/ep1ctetus) (Ping timeout: 260 seconds)
[17:39:39] <Profpatsch> Can I modify a response with a Middleware? I don’t think so right?
[17:39:45] <dminuoso> parseRow = do key <- rec .: "key"; context (show key) $ Record key <$> rec .: "foo" <*> rec .: "bar" <*> rec .: "quux"
[17:39:54] <dminuoso> Profpatsch: Yes you can.
[17:40:13] <Profpatsch> Oh you can, you just have to create a new (Response -> IO ResponseReceived) and pass it into the next middleware
[17:40:18] <dminuoso> Indeed.,
[17:40:23] <dminuoso> It's just very disgusting to do
[17:40:46] <Profpatsch> So I guess there should be two examples, one how to adjust the Request and one the response
[17:40:54] <Profpatsch> dminuoso: why is that? e.g. you need it for gzipping 
[17:41:06] <dminuoso> Profpatsch: for that I'd simply put nginx in front
[17:41:09] <Profpatsch> Iterate over the responseBody chunker and gzip the chunks
[17:41:11] <dminuoso> Which I'd have in any case for tls termination
[17:41:14] <dminuoso> and other things
[17:41:15] <Profpatsch> dminuoso: ah, that’s true
[17:42:10] *** Joins: Sgeo (~Sgeo@user/sgeo)
[17:42:40] *** Parts: razor[m] (~razormone@2001:470:69fc:105::f048) ()
[17:42:53] *** Joins: absence (torgeihe@hildring.pvv.ntnu.no)
[17:43:58] <absence> in a project where "-F -pgmF=record-dot-preprocessor" is added to ghc options in the .cabal file, how can i disable this preprocessor in a specific file using a pragma?
[17:46:27] <dminuoso> Profpatsch: And regarding modifying the response, the problem is that Response is a very internal type
[17:46:41] <dminuoso> Profpatsch: So in order to *modify* it, you have to do a lot of highly annoying work
[17:47:54] <dminuoso> You'd likely use responseToStream, and then some real annoying work starts.
[17:48:20] <dminuoso> Profpatsch: And btw, wai provides some modifyResponse helper
[17:48:25] <dminuoso> modifyResponse :: (Response -> Response) -> Middleware 
[17:48:34] <dminuoso> Modifying status and headers is easy
[17:48:38] <dminuoso> Modifying the body is annoying.
[17:48:51] <dminuoso> You'd have to create a custom type StreamingBody = (Builder -> IO ()) -> IO () -> IO () 
[17:49:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[17:50:22] *** Quits: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Remote host closed the connection)
[17:50:40] <dminuoso> And then using that custom StreamingBody, that would write these chunks into some buffer of your choosing, process it, and then create a separate StreamingBody, and feed those processed chunks into that. 
[17:50:56] *** Quits: grfn (sid449115@id-449115.helmsley.irccloud.com) (Ping timeout: 245 seconds)
[17:50:56] *** Quits: ehamberg (sid18208@id-18208.hampstead.irccloud.com) (Ping timeout: 245 seconds)
[17:51:23] *** Quits: kupi (uid212005@id-212005.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:51:23] *** Quits: astra` (sid289983@user/amish) (Ping timeout: 264 seconds)
[17:51:41] *** Quits: sclv (sid39734@haskell/developer/sclv) (Ping timeout: 258 seconds)
[17:51:41] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[17:51:46] *** Quits: tritlo (sid58727@user/tritlo) (Ping timeout: 245 seconds)
[17:52:04] *** Quits: amir (sid22336@user/amir) (Ping timeout: 258 seconds)
[17:52:04] *** Quits: jonrh (sid5185@id-5185.ilkley.irccloud.com) (Ping timeout: 258 seconds)
[17:52:12] *** Quits: ubert1 (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Quit: ubert1)
[17:52:27] *** Quits: elvishjerricco (sid237756@id-237756.helmsley.irccloud.com) (Ping timeout: 258 seconds)
[17:52:35] *** Joins: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[17:52:35] *** Quits: dmj` (sid72307@id-72307.hampstead.irccloud.com) (Ping timeout: 264 seconds)
[17:52:35] *** Quits: SrPx (sid108780@id-108780.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:52:50] <dminuoso> That separate streaming body/lazy bytestring/builder can then be used to reconstruct a Response via responseLBS/responseStream/responseBuilder
[17:53:11] *** Quits: Boarders (sid425905@id-425905.lymington.irccloud.com) (Ping timeout: 264 seconds)
[17:53:11] *** Quits: etrepum (sid763@id-763.uxbridge.irccloud.com) (Ping timeout: 264 seconds)
[17:53:29] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[17:53:32] *** Joins: SrPx (sid108780@uxbridge.irccloud.com)
[17:53:40] *** Joins: grfn (sid449115@helmsley.irccloud.com)
[17:53:41] *** Joins: etrepum (sid763@uxbridge.irccloud.com)
[17:53:47] *** Joins: elvishjerricco (sid237756@helmsley.irccloud.com)
[17:53:47] *** Joins: jonrh (sid5185@ilkley.irccloud.com)
[17:53:47] *** Joins: amir (sid22336@user/amir)
[17:53:56] *** Joins: tritlo (sid58727@user/tritlo)
[17:53:56] *** Joins: astra` (sid289983@user/amish)
[17:53:57] *** Joins: dmj` (sid72307@hampstead.irccloud.com)
[17:53:58] *** Joins: kupi (uid212005@hampstead.irccloud.com)
[17:54:00] *** Joins: ehamberg (sid18208@hampstead.irccloud.com)
[17:54:39] *** Quits: kupi (uid212005@hampstead.irccloud.com) (Client Quit)
[17:55:09] *** Joins: sclv (sid39734@haskell/developer/sclv)
[17:55:26] *** Joins: Boarders (sid425905@id-425905.lymington.irccloud.com)
[17:56:04] *** Joins: stengah (~stengah@user/stengah)
[17:56:11] *** Joins: ub (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[17:56:28] <geekosaur> absence, by the time it reads the pragma it's already been through the preprocessor
[17:56:39] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[17:56:54] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[17:56:57] *** Joins: shriekingnoise (~shrieking@186.137.144.80)
[17:58:05] <Profpatsch> dminuoso: yeah, I remember. I think the thing is that it was expected only a server would ever consume the Response type
[17:58:14] <Profpatsch> So no helpers exist to make consuming it very nice
[17:58:38] <Profpatsch> I wrote a “pure” Application caller here, I should open source it actually, which is nice in tests
[17:58:44] <dminuoso> Profpatsch: No, the problem is that the output is streamed.
[17:58:46] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[17:59:02] <dminuoso> If processing that output was desirable, you'd need an appropriate streaming library 
[17:59:06] <Profpatsch> It just reads the response body chunks into a binary builder and/or an ioref
[18:00:49] *** Quits: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net) (Ping timeout: 252 seconds)
[18:02:33] *** Joins: pbrisbin (~patrick@199.66.179.206)
[18:03:31] *** Quits: slack1256 (~slack1256@45.4.2.52) (Remote host closed the connection)
[18:04:52] *** Joins: jgeerds (~jgeerds@55d4da80.access.ecotel.net)
[18:05:31] <absence> geekosaur: ah, that's unfortunate, but makes sense. thanks!
[18:06:02] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:06:02] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:06:02] *** Joins: wroathe (~wroathe@user/wroathe)
[18:07:19] *** Quits: Inst (~Inst@2601:6c4:4080:3f80:6134:7ceb:5f94:e843) (Remote host closed the connection)
[18:07:36] *** Joins: Inst (~Inst@2601:6c4:4080:3f80:887d:efb8:1cec:d51f)
[18:10:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[18:11:41] *** Quits: max22- (~maxime@2a01cb0883359800cd1fff3f97961f02.ipv6.abo.wanadoo.fr) (Remote host closed the connection)
[18:12:15] *** Quits: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291) (Remote host closed the connection)
[18:12:40] *** Joins: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr)
[18:12:59] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[18:16:04] *** Quits: geekosaur (~geekosaur@xmonad/geekosaur) (Remote host closed the connection)
[18:18:08] *** Joins: geekosaur (~geekosaur@xmonad/geekosaur)
[18:18:12] *** Quits: timCF (~timCF@200-149-20-81.sta.estpak.ee) (Quit: leaving)
[18:19:33] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[18:20:05] *** Quits: ub (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Ping timeout: 260 seconds)
[18:20:06] *** Joins: iteratee (~kyle@162.218.222.107)
[18:20:12] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[18:20:45] *** Joins: hendursaga (~weechat@user/hendursaga)
[18:22:29] *** Joins: timCF (~timCF@200-149-20-81.sta.estpak.ee)
[18:22:52] *** Quits: MQ-17J (~MQ-17J@35.50.77.148) (Ping timeout: 252 seconds)
[18:23:34] *** Joins: Nosrep (~archbox@user/nosrep)
[18:24:17] *** Joins: hnOsmium0001 (uid453710@id-453710.hampstead.irccloud.com)
[18:24:48] *** Joins: MQ-17J (~MQ-17J@2607:fb90:1d89:67a9:1cd1:a18:a57f:e102)
[18:26:01] <timCF> Hello! I have a question about Async. When I'm doing high-level `withAsync task inner`, do I need to call `link pid` inside the inner to allow expection from `task` thread propagete immediately to parent thread? 
[18:26:42] <timCF> Of course there is source, but I'm not sure I do fully understand it https://hackage.haskell.org/package/async-2.2.4/docs/src/Control.Concurrent.Async.html#withAsyncUsing
[18:27:59] *** Quits: tinhatcat (~manjaro-g@2620:103:a000:2201:8e4c:af6a:e11c:11a1) (Quit: Leaving)
[18:30:11] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:e2c3:1bcc:edee:e9f1)
[18:30:46] <_bo> Guys, I'm trying to write my own `span` and the following code gives me ` Occurs check: cannot construct the infinite type: a ~ [a]
[18:30:46] <_bo>  * In the expression: left`: https://gist.github.com/MidasBetankor/84c8951af333a382ed386c7de3529831 can someone see why?
[18:31:40] <_bo> Tried to think of span as: "it's an array of two sub-arrays, where left one has all values that satisfy predicate and right one has rest of elements after first time predicate misses"
[18:31:45] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[18:32:03] <_bo> But still can't see what's so infinite about `left` sub-array in the snippet above
[18:33:23] <Inst> hi, could I have some help?
[18:33:31] <Franciman> hi Inst ofc
[18:33:31] <Inst> what does 50 :: Num a => a mean?
[18:33:47] <Inst> "if a is one of the types of number, then 50 can have type a"
[18:33:51] <Inst> that's what the textbook says
[18:34:12] <Inst> the reason it's confusing is because it can be read as "but a might not be a type of number"
[18:34:21] <Franciman> Num a => a
[18:34:36] <Inst> on :type 50, which really should just be :t 50
[18:34:36] <Franciman> did you do typeclasses?
[18:34:36] <geekosaur> basically you can pretend that the compiler sees fromInteger (50 :: Integer)
[18:34:54] <Inst> I'm just wondering what it means mathematically
[18:35:09] <Inst> if a is within the Set "number"
[18:35:15] <Inst> but then it's cat theory not set theory
[18:35:46] <geekosaur> it doesn't mean anything strictly mathematically, it's just a convenience so you don';t have to annotate every numeric literal with its intended type
[18:35:54] <iteratee> It's programmatic, not mathematic. If there is an active instance of "Num" for a, then 50 can be of type a.
[18:36:28] <Inst> what is meant by active instance of "num", i.e, by saying active you're implying it can also be inactive
[18:36:44] <iteratee> It has to be imported somehow.
[18:37:37] <Inst> so the type has to be declared into the program, but num is a fundamental type of Haskell
[18:37:58] <Inst> say, let's assume there is some type that's not implemented
[18:38:07] <Inst> for whatever reason :t gives that type
[18:38:24] <Inst> but it's stating that the expression will fail if that type isn't active?
[18:39:36] <iteratee> No. (Num a => a) means that for any type the compiler knows is a Num, the expression can be evaluated as that type.
[18:41:02] <_bo> > can't see what's so infinite about `left` < Please disregard, figured it out
[18:41:04] <lambdabot>  <hint>:1:43: error: parse error on input ‘<’
[18:41:07] <Inst> bleh, i'll reread the section, i skimmed it first after i couldn't understand what the "if a is one of the types of number, then 50 can have type a"
[18:42:02] <iteratee> It's probably easier to understand "IsString" with the OverloadedStrings extension.
[18:42:12] <iteratee> Num is doing something similar.
[18:42:34] <monochrom> Inst: I think my http://www.cs.utoronto.ca/~trebla/CSCC24-2021-Summer/04-haskell-types-2.html helps.  I am not going to commit to wordings like "set of types" or "set of methods" though (you see the problem?).
[18:43:25] <iteratee> > 50 :: Rational
[18:43:27] <lambdabot>  50 % 1
[18:43:33] <iteratee> > 50 :: Double
[18:43:34] <lambdabot>  50.0
[18:43:38] <iteratee> > 50 :: String
[18:43:40] <lambdabot>  error:
[18:43:40] <lambdabot>      • No instance for (Num String) arising from the literal ‘50’
[18:43:40] <lambdabot>      • In the expression: 50 :: String
[18:44:59] <jollygood2> you could write a (completely silly) Num instance for String, and then 50 :: String would compile. you could also write it for your own, say, bignum type, and you could use numerical literals and all the math operators with it
[18:45:21] <iteratee> @jollygood2 exactly
[18:45:22] <lambdabot> Unknown command, try @list
[18:45:53] <geekosaur> there is such an instance in one of the "acme" packages
[18:46:16] <geekosaur> there's also an instance for Applicatives that is occasionally loaded into the bot
[18:47:04] *** Quits: MQ-17J (~MQ-17J@2607:fb90:1d89:67a9:1cd1:a18:a57f:e102) (Read error: Connection reset by peer)
[18:47:28] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[18:48:34] *** Parts: stengah (~stengah@user/stengah) ()
[18:55:33] *** Quits: lortabac (~lortabac@2a01:e0a:541:b8f0:e2c3:1bcc:edee:e9f1) (Quit: WeeChat 2.8)
[18:55:41] *** Joins: Guest87 (~Guest87@211.165.185.81.rev.sfr.net)
[18:56:41] *** Quits: Farzad (~FarzadBek@178.131.24.144) (Ping timeout: 265 seconds)
[18:58:31] <Guest87> hello, I'm trying to choose a pretty printing library, my requirements are basically a nice way to handle indentation (think JSON). custom formatting for data types would be nice
[18:59:09] *** Joins: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi)
[18:59:38] <Guest87> prettyprinter seems to be the "default" choice?
[19:01:11] <lyxia> yes
[19:07:10] <ph88> when i set the max memory option on the runtime system is the garbage collector doing extra effort to clear up memory once the limit is hit ?
[19:09:40] *** Quits: Guest55 (~Guest55@78.198.4.122) (Quit: Client closed)
[19:10:29] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[19:11:33] *** Quits: emliunix (~emliunix@101.88.126.148) (Remote host closed the connection)
[19:13:12] *** Quits: gehmehgeh (~user@user/gehmehgeh) (Ping timeout: 276 seconds)
[19:13:46] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[19:13:47] *** Quits: Guest87 (~Guest87@211.165.185.81.rev.sfr.net) (Quit: Client closed)
[19:14:26] *** Joins: _ht (~quassel@82-169-194-8.biz.kpn.net)
[19:15:01] *** Joins: gehmehgeh (~user@user/gehmehgeh)
[19:15:03] *** Joins: eggplantade (~Eggplanta@2600:1700:bef1:5e10:9105:355e:98db:81cc)
[19:15:13] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[19:15:43] *** Joins: lavaman (~lavaman@98.38.249.169)
[19:16:15] *** Joins: emliunix (~emliunix@101.88.126.148)
[19:18:27] *** Joins: tzh (~tzh@c-24-21-73-154.hsd1.wa.comcast.net)
[19:21:23] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[19:22:26] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[19:24:06] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[19:26:33] <janus> i would argue 'pretty' is more default since it is in the haskell org?
[19:26:49] *** Quits: rond_ (~rond_@2a02:a31a:a23c:f480:2fd7:e087:5546:a438) (Quit: Client closed)
[19:27:17] <janus> tree-diff uses pretty and i like tree-diff
[19:27:32] <Franciman> @hackage tree-diff
[19:27:33] <lambdabot> https://hackage.haskell.org/package/tree-diff
[19:27:33] *** Quits: pbrisbin (~patrick@199.66.179.206) (Read error: Connection reset by peer)
[19:27:43] <Franciman> so neado
[19:27:46] <Franciman> tusen takk
[19:27:48] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[19:28:11] *** Joins: emf (~emf@2620:10d:c090:400::5:7558)
[19:28:28] *** Joins: unit73e (~emanuel@2001:818:e8dd:7c00:32b5:c2ff:fe6b:5291)
[19:28:33] *** Joins: ec (~ec@gateway/tor-sasl/ec)
[19:29:27] <monochrom> pretty has the convenience factor that it comes with GHC.
[19:29:45] <Franciman> but if you use cabal, that is not so important
[19:30:06] *** Quits: hjulle[m] (~hjullemat@2001:470:69fc:105::1dd) (Quit: You have been kicked for being idle)
[19:30:06] *** Quits: dualinverter[m] (~dualinver@2001:470:69fc:105::16a7) (Quit: You have been kicked for being idle)
[19:30:14] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[19:31:32] *** Quits: _bo (~bo@217.18.216.247) (Read error: Connection reset by peer)
[19:33:50] *** Joins: pbrisbin (~patrick@pool-173-49-152-45.phlapa.fios.verizon.net)
[19:34:35] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 264 seconds)
[19:35:17] *** Joins: segfaultfizzbuzz (~segfaultf@135-180-0-138.static.sonic.net)
[19:36:28] *** Joins: kupi (uid212005@id-212005.hampstead.irccloud.com)
[19:42:20] *** Joins: Farzad (~FarzadBek@37.49.149.40)
[19:43:42] *** Quits: jgeerds (~jgeerds@55d4da80.access.ecotel.net) (Remote host closed the connection)
[19:45:15] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:45:42] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[19:46:15] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:46:54] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[19:47:11] *** Quits: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee) (Ping timeout: 246 seconds)
[19:47:11] *** Quits: ec (~ec@gateway/tor-sasl/ec) (Remote host closed the connection)
[19:47:23] *** Joins: hendursaga (~weechat@user/hendursaga)
[19:47:36] *** Quits: awth13 (~awth13@user/awth13) (Quit: ZNC 1.8.2 - https://znc.in)
[19:47:47] <dminuoso> To be fair, prettyprinter has a fair lightweight dependency footprint. It's very likely it wont introduce additional transitive dependencies for most projects.
[19:47:51] *** Joins: tommd (~tommd@75-164-130-101.ptld.qwest.net)
[19:48:00] *** Joins: FarzadBekran_ (~FarzadBek@37.49.149.40)
[19:48:30] *** Quits: FarzadBekran_ (~FarzadBek@37.49.149.40) (Remote host closed the connection)
[19:49:19] *** Joins: pooryorick (~pooryoric@87-119-174-173.tll.elisa.ee)
[19:49:22] *** Joins: hyiltiz (~quassel@31.220.5.250)
[19:49:43] <dminuoso> And it addresses certain issues that pretty has
[19:50:54] *** Quits: Farzad (~FarzadBek@37.49.149.40) (Ping timeout: 258 seconds)
[19:51:40] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[19:52:01] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:53:59] *** Joins: ub (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[19:54:41] *** Joins: awth13 (~awth13@user/awth13)
[19:55:56] *** Quits: ArtVandelayer (~ArtVandel@ip174-68-147-20.lv.lv.cox.net) (Ping timeout: 245 seconds)
[19:57:05] *** Quits: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Quit: ubert)
[19:57:06] *** ub is now known as ubert
[19:57:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[19:57:29] *** Joins: ubert1 (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[19:58:02] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:58:34] *** Quits: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Remote host closed the connection)
[19:58:34] *** ubert1 is now known as ubert
[20:00:01] <Profpatsch> dminuoso: geekosaur https://github.com/yesodweb/wai/pull/858
[20:01:56] <Profpatsch> Oh how I wish for haddock to have comments haha
[20:02:11] <Profpatsch> Maybe there is a way to add them via a third-party server and a browser plugin
[20:02:31] <Profpatsch> The PHP doc comments are such a chaotic good feature
[20:03:22] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:03:42] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:04:03] *** Quits: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl) (Quit: coot)
[20:05:56] *** Joins: timCF_ (~timCF@m91-129-111-87.cust.tele2.ee)
[20:06:46] *** Quits: emliunix (~emliunix@101.88.126.148) (Remote host closed the connection)
[20:09:37] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[20:10:12] *** Quits: jumper149 (~jumper149@80.240.31.34) (Quit: WeeChat 3.2)
[20:12:29] *** Joins: seer (~delicacie@c-98-208-218-119.hsd1.fl.comcast.net)
[20:12:38] *** seer is now known as InstX1
[20:12:40] <InstX1> hi guys
[20:12:51] *** Quits: Tuplanolla (~Tuplanoll@91-159-69-50.elisa-laajakaista.fi) (Quit: Leaving.)
[20:12:54] <InstX1> i got a message back from the Haskell Foundation, some nice resources for non-professional programmers
[20:12:55] <InstX1> https://github.com/haskellfoundation/HaskellSchool
[20:13:27] <InstX1> there's also Professor Graham Hutton's lectures on Haskell
[20:13:41] <InstX1> https://www.youtube.com/watch?v=TdpBqhlgqGI
[20:13:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:14:32] <InstX1> They seem to be more concerned about supporting and retaining existing Haskell programmers, though
[20:14:40] <InstX1> and I can understand why they can make it an emphasis
[20:15:08] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:15:56] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:16:16] *** Joins: alzgh (~alzgh@user/alzgh)
[20:18:29] <InstX1> they feel like the ecosystem etc and ide isn't sufficient to keep new haskellers, though
[20:18:30] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 260 seconds)
[20:19:20] *** Quits: lavaman (~lavaman@98.38.249.169) (Ping timeout: 265 seconds)
[20:20:01] *** Quits: xff0x (~xff0x@2001:1a81:5213:b200:9d6e:5b31:ca1b:5892) (Ping timeout: 252 seconds)
[20:20:07] <unit73e> InstX1, meaning the ecosystem and IDEs are kind of lacking?
[20:20:33] <InstX1> i can't even get a proper install of the IDE on windows
[20:20:35] <unit73e> vscode does a good job for beginners imo
[20:20:41] <InstX1> there used to be a nice setup thing
[20:20:46] *** Joins: xff0x (~xff0x@2001:1a81:5213:b200:3795:60dd:993c:5506)
[20:20:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:20:54] <unit73e> hum I don't use windows so I wouldn't know
[20:20:54] <InstX1> yeah ut beginners need ghci or another interpreter
[20:21:02] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[20:21:06] <unit73e> there's also IntelliJ
[20:21:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:21:22] <unit73e> but I feel like vscode does a better job
[20:21:34] <unit73e> regardless, imo that's the least of a beginners worries
[20:22:09] <InstX1> textbooks seem fine, i'm really enjoying the basics book written by a guy teaching at cambridge, though
[20:22:20] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:22:33] *** Quits: Cajun (~Cajun@user/cajun) (Quit: Client closed)
[20:22:55] <InstX1> the problem is, though, is that it seems equivalent to the first third or first half of a proper textbook, monads don't show up in the index
[20:23:03] <unit73e> doing things different is perhaps the biggest stop gap of all, like having to do IO in an IO monad, or learning that you can't just have state out of nowhere, and so on
[20:23:39] <unit73e> I think state is the next big problem for new users
[20:24:03] <unit73e> because you have to carry it around and for imperative programmers that's not a thing
[20:24:09] <InstX1> the target audience i'm talking about
[20:24:17] <InstX1> doesn't even know what state is
[20:24:41] <InstX1> i'm coming from effectively a non-programmer paradigm, so i annoyed people by arguing that haskell should target non-coders etc
[20:25:19] <unit73e> you do have to start somewhere
[20:25:57] <yushyin> every time i look into this channel it's the same discussion on and on :D
[20:26:18] <unit73e> for a non-programmer it doesn't really matter which you choose first I think but haskell is obviously structured differently, by "joining functions"
[20:26:29] *** Quits: cfricke (~cfricke@user/cfricke) (Quit: WeeChat 3.3)
[20:26:46] <unit73e> yushyin, lol yeah. I use it mostly for questions and to show my SDL examples
[20:29:34] <zincy> Is it normal for Haskell packages to rely on types of other packages? Someone is asking me to "unify" the types with their library and I just don't feel I have the experience to know if it is a good idea or not.
[20:29:48] <zincy> https://github.com/therewillbecode/poker-maison/issues/20
[20:31:05] <geekosaur> if you use other packages you generally have to use their types
[20:31:36] <zincy> Yeah so the question is really should I use this other package then
[20:32:17] <geekosaur> depends. they're trying to build a poker ecosystem; up to you whether you want to contribute to that ecosystem
[20:32:30] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:32:38] <maerwald> that's where weak types have an advantage... they're more compatible
[20:32:43] <geekosaur> in general not duplicating effort is a good thing, it's just annoying for existing packages
[20:32:48] <maerwald> compare lazy bytestring with streaming types
[20:33:43] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:34:41] *** Quits: chele (~chele@user/chele) (Remote host closed the connection)
[20:35:25] *** Quits: xff0x (~xff0x@2001:1a81:5213:b200:3795:60dd:993c:5506) (Ping timeout: 260 seconds)
[20:35:57] *** Joins: zebrag (~chris@user/zebrag)
[20:35:59] *** Joins: xff0x (~xff0x@port-92-195-26-90.dynamic.as20676.net)
[20:38:44] *** Joins: ub (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[20:39:18] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:40:10] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:41:44] <zincy> Cheers!
[20:41:59] *** Joins: wonko (~wjc@62.115.229.50)
[20:42:02] *** Joins: benin (~benin@183.82.179.164)
[20:42:15] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:42:45] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[20:45:14] *** Joins: econo (uid147250@user/econo)
[20:45:20] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:46:25] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:47:08] *** Quits: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Remote host closed the connection)
[20:49:24] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[20:49:57] *** Joins: cads (~asdf@ip-64-72-99-234.lasvegas.net)
[20:50:19] *** Quits: ub (~Thunderbi@91.141.37.135.wireless.dyn.drei.com) (Ping timeout: 258 seconds)
[20:50:41] *** Joins: suryasiva (~suryasiva@49.206.117.198)
[20:51:45] *** Quits: suryasiva (~suryasiva@49.206.117.198) (Client Quit)
[20:51:54] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:51:58] <cads> hey all, a strong monad M has a strength transform S_A,B : A x SB -> S(AxB) which makes M compatible with the underlying product operation "In one way"
[20:52:27] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:53:40] *** Joins: suryasiva (~suryasiva@49.206.117.198)
[20:53:55] <cads> the strength transform is usually expressed via its components S_(A, B). But what are the two functors that S transforms between?
[20:57:58] *** Quits: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com) (Read error: Connection reset by peer)
[20:58:10] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[20:58:26] *** Joins: aegon (~mike@174.127.249.180)
[20:58:37] <ManofLetters[m]> are you offending us?
[20:58:50] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[20:58:57] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[20:59:17] *** Joins: alzgh (~alzgh@user/alzgh)
[20:59:54] <cads> ManofLetters[m], no offense is meant, I am trying to understand strong monads because as far as I can tell, they are the "mathy" version of applicative functors
[21:00:38] *** Quits: suryasiva (~suryasiva@49.206.117.198) (Quit: suryasiva)
[21:02:34] *** Joins: MQ-17J (~MQ-17J@d192-24-122-179.try.wideopenwest.com)
[21:03:11] <awpr> a) looks to me like it's `_1 x M _2` ~> `M (_1 x _2)` (both of those being functors from HaskxHask to Hask); b) applicative <=> lax monoidal functor; and c) all Haskell `Functor`s are "strong" in this way, because `\x fy -> fmap (x,) fx`
[21:03:22] <ManofLetters[m]> is S_A is a natural transformation with signature S_A : A x SB -> S(AxB), then it's a natural transformation from functor \K . K x S(B_ to functor \K . S(K x B), where is S is, probably, an arbitrary functor
[21:03:41] <ManofLetters[m]> * \K . K x S(B)
[21:04:07] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 258 seconds)
[21:04:07] <ManofLetters[m]> and I didn't say what B is and where it's quantified; hmm
[21:04:30] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 258 seconds)
[21:04:40] <ManofLetters[m]> so probably awpr has a fuller picture
[21:04:42] <awpr> if we're talking about functor strength, the `M` (which I renamed from `S` should be fixed to the particular functor we have a strength for)
[21:04:56] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:05:01] <awpr> parens in the wrong place, but close enough
[21:05:23] *** Joins: hyiltiz (~quassel@31.220.5.250)
[21:06:29] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[21:07:30] <cads> I think I have conflated the notion of Strong Monad, with the notion of a Lax Functor With Strength. The Strong Lax Functor is already an applicative, even if it has no monadic multiplication and unit transforms.
[21:08:03] <ph88> anyone know if it's possible to get the remainder of the unparsed text with megaparsec ?
[21:09:12] <ManofLetters[m]> cads:  so, for any functor S, the 2-category has S-strength (the functor S is a strong lax functor?), if for any 1-object B, there is a natural transformation from functor \K . K x S(B) to \K . S(K x B) ???
[21:09:21] *** Joins: meltedbrain_y2k (~tekserf@94.73.36.197)
[21:10:06] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:10:06] <ManofLetters[m]> (putting aside Hask)
[21:10:54] <cads> ManofLetters[m], I can't understand 2-categorical or delooped definitions of strength yet - I am trying to work with the naive "concrete" definition here, which defines the strength transform within the monoidal category itself https://ncatlab.org/nlab/show/strong+monad#concrete_definition
[21:11:07] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:11:08] <ManofLetters[m]> and I guess, in case of Hask, it means that the real Haskell functors can handle free variables quantified somewhere outside
[21:11:23] <ManofLetters[m]> ok, have fun :)
[21:12:04] <ManofLetters[m]> (where S(B) would be the free variables)
[21:12:20] <ManofLetters[m]> (or, rather, B would be the free variables)
[21:14:46] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:15:05] *** Joins: alzgh (~alzgh@user/alzgh)
[21:15:57] <cads> One thing we know about the transform: its components are indexed by two objects A, B of the underlying category.
[21:16:41] <cads> The components of the transform of an ordinary functor have one one index. This suggests that the strength could be a transform on a bifunctor
[21:16:50] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:16:54] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[21:17:06] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[21:17:34] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[21:18:07] <ManofLetters[m]> if B (or A) is fixed, it's an ordinary functor
[21:18:33] <awpr> yeah, I wrote that bifunctor earlier
[21:18:56] <awpr> (a bifunctor is an ordinary functor, just that its source is a product category)
[21:19:59] <ManofLetters[m]> isn't it usually contravariant on the second argument, though?
[21:20:12] <awpr> no, that's profunctor, and the first argument
[21:20:19] <cads> awpr, did you you didn't write the bifunctor's signature? I missed that / could not parse your speech
[21:20:39] <cads> err s/you didn't//
[21:20:57] <awpr> I used the admittedly confusing "type expression with holes" notation that pops up in ncatlab a lot
[21:21:05] *** Joins: _xor (~xor@72.49.199.147)
[21:21:08] <ManofLetters[m]> apparently naming differs between people: https://en.wikipedia.org/wiki/Functor#Bifunctors_and_multifunctors
[21:21:34] <ManofLetters[m]> afk
[21:22:13] <cads> I guess the domain of the transform is the bifunctor   Prod_H . (1_h x T)
[21:22:59] <cads> this takes an object A and an TB into the product A x TB
[21:23:13] <awpr> sorry, got distracted
[21:23:29] *** Joins: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi)
[21:23:32] <cads> and the codomain of the transform is the bifunctor   T . Prod_H
[21:23:54] <cads> taking products  A x B into T(A x B)
[21:23:56] <awpr> `\A B -> A x T B` which is HaskxHask -> Hask
[21:24:15] <awpr> it's a composition of two functors
[21:24:21] <cads> correct
[21:24:44] <cads> can you confirm I have the codomain right?
[21:25:34] <awpr> looks right, when looking at it as taking product objects to Hask objects
[21:26:11] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Ping timeout: 264 seconds)
[21:28:27] <cads> to sum up, we have that a T strength on an H-endofunctor T is a natural transform of type M : (1_H x T);Prod_h -> Prod_h;T, where Prod_H : H^2 -> H is the H product.
[21:28:52] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[21:29:33] <cads> that is way less painful than I thought! 
[21:30:51] *** Joins: Cajun (~Cajun@user/cajun)
[21:31:51] <cads> thanks for the help, awpr ManofLetters[m]. Sorry for the impedance mismatch between category speech and hask speech, and sorry for my difficulty understanding hask-speech. I think awpr as good as gave me this exact answer, but I couldn't really parse it. In that case, sorry for 'catsplaning' this topic, lol
[21:32:38] * cads 's goal is to improve the nlab and wikipedia entries on strengths, applicatives, and strong monads
[21:36:02] *** Quits: Skyfire (~pyon@user/pyon) (Quit: WeeChat 3.3)
[21:36:39] <ManofLetters[m]> a lofty goal
[21:36:39] *** Joins: coot (~coot@37.30.49.107.nat.umts.dynamic.t-mobile.pl)
[21:37:38] <maerwald> strong monads, super monads, ...
[21:37:44] <maerwald> we have them all
[21:39:22] <cads> more of a nitpick - those articles all define monadic strength via its components rather than pointing out which functors we are transforming between
[21:39:45] <cads> A skilled reader like awpr can immediately see that we are transforming between two T-modified versions of the underlying category's product bifunctor
[21:40:06] <cads> I am going to paint that picture explicitly, for the benefit of readers that can't do that functorial gymnastics just yet
[21:40:54] <cads> probably gonna piss off the article maintainters because they probably think the translation is trivial.. but it's tripped me up for quite a while, lol
[21:41:35] <monochrom> That is the same tension between speaking like "x + c*y where the variables are x and y" and speaking like "define f(x,y) = x + c*y".
[21:42:32] <cads> monochrom, right, in your example we're backgrounding the lambda operator, while in my example we're backgrounding the product bifunctor
[21:43:33] <monochrom> And between "f :: (Int,a) -> Either a Bool, natural in a and b" and "define F(a) = (Int,a), define G(a) = Either a Bool, so f is natural from F to G"
[21:44:02] *** Joins: ubert (~Thunderbi@91.141.37.135.wireless.dyn.drei.com)
[21:44:04] <monochrom> s/ and b/
[21:46:35] *** Quits: max22- (~maxime@lfbn-ren-1-762-224.w81-53.abo.wanadoo.fr) (Ping timeout: 260 seconds)
[21:47:45] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 260 seconds)
[21:50:56] <cads> I guess there are two ways about it. First we could depend on readers to immediately recognize components of transform between a modified bifunctor, to immediately recognize which bifunctor was modified, and how. Since the choice of bifunctor is 'obvious', and the way that functor is modified is 'apparent', that is the choice the authors have made.
[21:52:21] <monochrom> On the bright side, it is mechanical.
[21:52:27] *** Quits: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com) (Remote host closed the connection)
[21:52:41] <cads> monochrom, mechanical as in "there are these components and they only fit one way"?
[21:53:32] <monochrom> Also recall that people don't have problem with "∂(x + y*c)/∂y = c" without being told, without even caring about, \x y -> x + y*c.
[21:54:50] <monochrom> I don't know about only one way. But I know about mechanical.
[21:58:55] <monochrom> In contrast, there is only one function from programs to "does it halt?", and it is not mechanical.
[21:59:09] <cads> In the second approach, we mention the M: Prod.(Id, T) -> T.Prod  signature. Then we write its action on the component variables, as before.
[22:00:24] <cads> and I don't think this is so obvious or mechanical, since when I asked about the signature it led to a bunch of hask-handwaving, rather than a clear and simple answer
[22:01:22] <monochrom> But I don't write like Prod.(Id, T) or  T.Prod.
[22:01:44] <monochrom> I just define, if necessary, F(A,B) = AxTB, G(A,B) = T(AxB).
[22:04:42] *** Quits: haritz (~hrtz@user/haritz) (Ping timeout: 265 seconds)
[22:05:16] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[22:05:21] *** Joins: tremon (~tremon@217-63-61-89.cable.dynamic.v4.ziggo.nl)
[22:06:06] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[22:06:37] <monochrom> "s :: ∀a,b. a x T b -> T (axb)" is no less readable than "unzip :: ∀a,b. [(a,b)] -> ([a],[b])"
[22:08:22] <cads> lol, if we applied readability metrics to those senstences, we would find that both sentences are about equally hellish
[22:08:27] *** Joins: hgolden (~hgolden2@cpe-172-114-81-123.socal.res.rr.com)
[22:08:49] <mrianbloom> Is there an easy way to convert between Massiv and Accelerate host arrays?
[22:09:06] <monochrom> Um, talk to programmers? Who here finds "unzip :: ∀a,b. [(a,b)] -> ([a],[b])" hellish?
[22:09:45] <monochrom> In fact, even stronger: Who here finds "unzip :: [].Prob => Prob.([], [])" better?
[22:09:48] <cads> monochrom, can we agree that programmers are very poor judges of readability, or else they would be making a living writing prose?
[22:10:06] <monochrom> But prose is not formula.
[22:10:54] <monochrom> Or how about you? Do you prefer "unzip :: [].Prob => Prob.([], [])"?  Seriously?
[22:11:35] <monochrom> Below this the undertone is "how far do you go in writing functors in pointfree form?"
[22:12:02] *** Joins: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220)
[22:12:02] *** Quits: haritz (~hrtz@2a02:8010:65b5:0:6009:6384:e3cb:2220) (Changing host)
[22:12:02] *** Joins: haritz (~hrtz@user/haritz)
[22:12:23] * cads is thinking of a readability metric that can judge between a good prose explanation of a function, and a bad formulaic explanation
[22:12:47] <cads> but the reader is more important than the text and drives the metric
[22:13:59] <monochrom> The major readers of ncatlab are mathematicians and programmers, neither group appreciating T.Prod.
[22:14:22] *** Quits: zer0bitz_ (~zer0bitz@dsl-hkibng31-54fae3-116.dhcp.inet.fi) (Read error: Connection reset by peer)
[22:14:45] <monochrom> Instead, the mathematician group appreciates leaving "A x T B" as is, and the programmer group appreciates introducing an intermediate "F(A,B) = A x T B".
[22:14:48] *** Joins: max22- (~maxime@2a01cb0883359800fe2c7b136063d78c.ipv6.abo.wanadoo.fr)
[22:14:56] <cads> monochrom, I appreciate it, though I'll grant that the reason I appreciate it is that before understanding it, I couldn't understand the article
[22:15:44] <cads> but the reason I couldn't understand the article didn't have to do with that specific definition, but rather inexperience with manipulating bifunctor and their natural transforms
[22:15:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:17:19] <cads> Now, if I modify the article to be more explicit about the bifunctor, it would definitely help my former self. But without knowing how representative of other readers my own confusion was, the value I add is dubious.
[22:17:24] *** Quits: kuribas (~user@ptr-25vy0i7zawtky0bq46n.18120a2.ip6.access.telenet.be) (Quit: ERC (IRC client for Emacs 26.3))
[22:17:32] <cads> I will likely do it, to see if the other editors hate it.
[22:19:35] *** Quits: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net) (Ping timeout: 264 seconds)
[22:19:42] <cads> monochrom, remember when you said that refactoring should not remove important context, just because my inexperience makes the extra context hard to keep track of?
[22:19:48] *** Parts: oats (~thomas@user/oats) (Leaving)
[22:20:27] <cads> Here I am likely doing the opposite - refactoring to add context or dubious value, again because of inexperience. My inexperience makes me think other readers need that context.
[22:23:19] <unit73e> I find haskell to be very mathematical
[22:23:20] *** Quits: hyiltiz (~quassel@31.220.5.250) (Ping timeout: 260 seconds)
[22:24:04] <geekosaur> discrete math helps a bit. CT not necessary, really
[22:24:44] <monochrom> school algebra skills. or even respect.
[22:25:49] *** Joins: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net)
[22:30:55] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Ping timeout: 260 seconds)
[22:31:42] *** Joins: hyiltiz (~quassel@31.220.5.250)
[22:33:05] *** Joins: Farzad (~FarzadBek@37.49.149.40)
[22:34:28] *** Quits: mc47 (~mc47@xmonad/TheMC47) (Remote host closed the connection)
[22:34:42] <maerwald> @hoogle respect
[22:34:43] <lambdabot> Network.AWS.AutoScaling.SetInstanceHealth sihShouldRespectGracePeriod :: Lens' SetInstanceHealth (Maybe Bool)
[22:34:43] <lambdabot> Ormolu.Printer.Meat.Declaration p_hsDeclsRespectGrouping :: FamilyStyle -> [LHsDecl GhcPs] -> R ()
[22:35:02] <[exa]> F
[22:35:56] <cads> monochrom,  The other reason I appreciate  P(1xT) -> TP is because it better shows the symmetry between the domain and codomain of the transform. It's like the strength lets us "semicommute" an instance of (1xT) left through P to obtain TP, but it only works in this one direction.
[22:36:20] <cads> I don't see this algebraic "motion" based description as clearly looking (A x TB) -> T(A x B).
[22:37:25] <[exa]> cads: you can help the readers a bit by avoiding the symmetrical `x` symbol
[22:38:45] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[22:38:56] <cads> [exa], how would you do that?
[22:39:52] <[exa]> (A -x TB) -> T(A -x B)    -- looks almost like functions
[22:40:34] <[exa]> ( btw this might be off, I didn't read much of the scrollback :] )
[22:40:46] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[22:41:29] <cads> I was thinking of using the (A x -) functor, but doing it wasn't going to make things easier to understand
[22:44:44] <cads> [exa], I don't think you should waste much time on the scroll back, I was picking nits which live on the back of a flea which lives on the back of a verminous plague rat
[22:45:51] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[22:49:07] <[exa]> ok good. :D
[22:50:41] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[22:51:48] *** Joins: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net)
[22:52:33] *** Joins: guydb89 (~guy@98.198.128.24)
[22:53:51] *** Joins: myShoggoth (~myShoggot@97-120-85-195.ptld.qwest.net)
[22:55:07] *** Quits: dschrempf (~dominik@070-207.dynamic.dsl.fonira.net) (Client Quit)
[22:58:45] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[22:59:24] *** Joins: lortabac (~lortabac@2a01:e0a:541:b8f0:5edd:2a99:160f:84d2)
[23:00:13] *** Joins: ec_ (~ec@gateway/tor-sasl/ec)
[23:03:59] <InstX1> i'm so giddy
[23:04:03] <InstX1> for christ's sake
[23:04:37] <cads> InstX1, por why?
[23:04:40] <InstX1> i've tried learning programming with a metric ton of languages, this is the first time i've gotten through so much in so little time
[23:04:52] <monochrom> Oh congrats.
[23:05:14] <cads> v. nice!
[23:05:37] <InstX1> haskell is going significantly faster than the C++ for dummies book I had, and I spent like 2-3 weeks on Stroustrup's intro programming with C++ book
[23:05:41] <monochrom> Yes one of Haskell's strength (and FP's, and Logo's) is that if imperative programming fails you, Haskell can help.
[23:06:04] <InstX1> iirc that was why Lisp was big as a teaching language, no?
[23:06:15] <[exa]> yep
[23:06:16] <monochrom> Although, I am not sure that Stroustrup's is really all that intro level.
[23:06:38] <monochrom> Or K&R
[23:06:40] <InstX1> he has an intro-level book
[23:07:27] <[exa]> InstX1: the best way to learn c++ is by need, you first learn assembly and then try to save code volume by expressing stuff in the code generators (C, C with RAII, objects, templates, and suddenly you know a pretty practical subset of C++)
[23:07:51] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[23:07:59] <[exa]> I wouldn't recommend anyone to take serious C++ before knowing a functional language
[23:08:01] <InstX1> like, for C++, "The C++ Programming Language" (advanced / intermediate), "Programming: Principles and Practice Using C++" (beginner), "A Tour of C++" (iirc, he has a tour book that covers C++17
[23:08:14] <InstX1> it's more a problem with his style
[23:08:20] <InstX1> i have an easier C++ for beginners book
[23:08:31] <InstX1> i could breeze through it, but i'm told that one gives you bad habit
[23:08:32] <InstX1> s
[23:09:00] <InstX1> Stroustrup basically treats his intro textbook as if he were giving a lecture
[23:09:11] <InstX1> unless you were talking about Programming: Principles and Practice @Monochrom
[23:09:14] <monochrom> But I love lectures.
[23:09:29] <monochrom> I had "The C++ Programming Language" in mind.
[23:09:47] <InstX1> i mean more, I know Carnegie Mellon uses his intro book
[23:10:09] *** Quits: __monty__ (~toonn@user/toonn) (Quit: leaving)
[23:10:32] <InstX1> it's more, with a textbook, you want to be able to read stuff out of order, skim for key information, and so on
[23:11:07] <monochrom> There are two sides of "out of order".
[23:11:08] <InstX1> he just combines ideas and digresses (fruitfully, in an actual lecture setting) so it's hard to parse his stuff
[23:11:41] <InstX1> i like to read textbooks like a windows file transfer time estimator
[23:11:50] <InstX1> read ahead, read back, review, etc
[23:12:07] <[exa]> stop at 99% and try to find the last piece
[23:12:12] <monochrom> I mean, sometimes it is unrealistic to. Dependencies exist. Intrinsic one.
[23:12:13] <[exa]> yes, good. :D
[23:12:36] <monochrom> For example, good luck with "read Functor before type classes", obviously.
[23:13:16] <monochrom> Foldable and Functor could be in whatever order you like, sure.
[23:13:28] <InstX1> i'll put in an example, i'm trying to learn classes, etc, but he gives you an introduction to classes in a chapter completely unrelated to classes
[23:13:39] <monochrom> But good luck with "Foldable before Monoid", too.
[23:13:41] <[exa]> monochrom: that can be done, with a bit of heresy you can get the idea to e.g. C# people with IFunctor, IFoldable
[23:13:43] <InstX1> it's well-woven together, arguably a piece of art if treated purely sequentially
[23:13:49] *** Quits: mei (~mei@user/mei) (Ping timeout: 252 seconds)
[23:13:55] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[23:14:09] <InstX1> and when you get to the actual classes chapter
[23:14:19] <InstX1> you have to know about the introduction, which you can only find via index
[23:14:53] <monochrom> But the IFunctor interface cannot be expressed in Haskell. (Nor the Functor class in C#.)
[23:15:13] <monochrom> In a category theory book for mainstream programmers, I would use IFunctor, yes.
[23:15:35] *** Joins: slack1256 (~slack1256@45.4.2.52)
[23:15:38] <monochrom> But in a Haskell book? I'd better talk about things that can be written in Haskell.
[23:16:22] <monochrom> Fortunately, there is no market for a category theory book for mainstream programmers, so trying to use IFunctor remains hypothetical!
[23:16:28] <slack1256> Is there a type level `elem` function defined somewhere on base? Just for type level lists.
[23:17:25] <[exa]> monochrom: well at worst it allows you to motivate the people with something like "see how much this sucks?"
[23:18:45] <[exa]> the main target is to reduce the gap before the moment when it clicks for as many people as possible
[23:20:03] <monochrom> OK, the difference is between "functor" and "Functor".
[23:23:09] <InstX1> by the way, just curious
[23:23:21] <InstX1> has there been any attempts to teach haskell starting from main / do?
[23:24:02] <InstX1> i'm also wondering if imperative languages might be more interesting if they were taught starting from abstractions, tbh
[23:24:13] *** Joins: random-jellyfish (~random-je@user/random-jellyfish)
[23:24:34] <lortabac> slack1256: not in base, AFAIK, but there are several on Hackage
[23:24:38] <[exa]> (implying imperative languages have reasonable abstractions)
[23:24:42] <[exa]> InstX1: ^
[23:24:52] *** Quits: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477) (Remote host closed the connection)
[23:25:32] <monochrom> Modula-3 and Ada do.
[23:25:54] <InstX1> i'd have taken far easier to C++ if they started by teaching classes asap
[23:26:22] *** Quits: raehik (~raehik@cpc95906-rdng25-2-0-cust156.15-3.cable.virginm.net) (Ping timeout: 260 seconds)
[23:27:07] <monochrom> I have seen 1st-year 1st-language courses teaching classes very early. It's a failure. Students get all the wrong ideas.
[23:27:58] <monochrom> Then again, that may be in total agreement with "asap", i.e., 1st-year 1st-language early is earlier than "p".
[23:28:10] <[exa]> ah good point about modula.
[23:28:14] <InstX1> i guess it depends on the person, #1, #2, then why do we keep on starting haskell with abstractions?
[23:28:32] <monochrom> But we don't start Haskell with abstractions.
[23:28:38] <InstX1> or perhaps at an earlier stage, people were trying the Haskell Hello World route
[23:28:44] <monochrom> Functions? Yes. Abstractions? No.
[23:28:45] <InstX1> Haskell starts with expressions
[23:28:55] <monochrom> That is not an abstraction.
[23:29:13] <monochrom> Not in the "functor is a abstraction" sense.
[23:29:28] <monochrom> C also starts with expressions.
[23:29:37] <monochrom> In fact, C has nothing except expressions.
[23:29:51] *** Quits: _ht (~quassel@82-169-194-8.biz.kpn.net) (Remote host closed the connection)
[23:30:14] <monochrom> printf("hello world\n") is an expression.
[23:30:48] <monochrom> and also a function call, etc etc.  Not so different from Haskell's "double 1.5"
[23:30:48] *** Joins: Null_A (~null_a@2601:645:8700:2290:a94b:e46c:6690:e477)
[23:31:29] <[exa]> InstX1: I was starting the course with quick practical demystifiers so that people don't consider `do` to be magicks and the typeclass overloading seems natural. Interleaved with samples from gloss.
[23:31:47] <InstX1> which course?
[23:31:56] <[exa]> the one I was teaching. :D
[23:31:57] *** Quits: slack1256 (~slack1256@45.4.2.52) (Remote host closed the connection)
[23:32:20] <InstX1> how did that work?
[23:32:41] <[exa]> anyway, I'm really not sure how to structure the stuff right either. This IMO worked (student feedback was very good)
[23:32:49] <InstX1> also, i'm curious
[23:33:06] <InstX1> i wrote some ignorant gobbledegook about how it might be interesting to start with main/do
[23:33:19] <InstX1> then move into concepts etc and return to make do etc like an imperative language course
[23:33:27] <InstX1> but one big advantage might be, you go over IO early
[23:33:37] <InstX1> is haskell very good for image processing?
[23:33:48] <[exa]> there's an inconvenient balance between doing it right and not boring the usual late-teenagers and early-20ers to death
[23:34:19] <InstX1> like, one of the annoyances i had with imperative languages is how long it takes for you to get to IO
[23:34:32] <InstX1> IO-ing a file and then transforming it somehow might be a cool party trick
[23:34:36] <[exa]> re image processing, I'd say the ecosystem around repa is cool but afaik there's no big community
[23:34:59] <InstX1> but it'd have to be something haskell is good at and can impress the kiddies
[23:35:01] <[exa]> anyway you can literally write a function that does something like `interact`, just for an image, and give it to the students
[23:35:07] <InstX1> when you're dealing with kids, they want to make games
[23:35:09] *** Quits: juhp (~juhp@128.106.188.220) (Ping timeout: 258 seconds)
[23:35:16] <[exa]> +1, Gloss helps
[23:35:21] <InstX1> when you're dealing with people who are somewhat older
[23:35:36] <InstX1> what they really want is file manipulation
[23:36:04] <InstX1> fastest way to show it's practical might be to have a template for a resume etc or something you want to add to a bunch of MS Word files
[23:36:14] <[exa]> they sometimes get sold on the fact that `interact $ show . length . lines` won't run out of memory
[23:36:30] <InstX1> i don't get what it means ::sheepish::
[23:37:07] <[exa]> for elders it's actually nice to show the monads as overloaded semicolons, they appreciate how much if()s and other repeated nonsense can be saved
[23:38:06] <[exa]> finally, hardcore compsci people are sold by standard library, namely definitions like this: https://hackage.haskell.org/package/containers-0.6.5.1/docs/src/Data.Graph.html#scc
[23:38:22] *** Joins: juhp (~juhp@128.106.188.220)
[23:40:40] <InstX1> i see
[23:41:01] *** Quits: fendor (~fendor@91.141.32.154.wireless.dyn.drei.com) (Remote host closed the connection)
[23:41:21] <InstX1> how hard is it, say, to get to the point where you can IO a jpeg/png, then use haskell to do a cool post-process so that your students can post it onto instagram?
[23:42:15] <[exa]> comparatively easy
[23:42:51] <[exa]> you need to know vectors (which is moreless trivial for whoever already did some programming) and e.g. JuicyPixels
[23:43:24] *** Joins: Guest38 (~Guest38@pool-100-19-29-41.phlapa.fios.verizon.net)
[23:43:27] <[exa]> this is full of effects https://github.com/RaphaelJ/friday
[23:43:47] *** ski_ is now known as ski
[23:44:32] <Guest38> @lamb
[23:44:32] <lambdabot> Unknown command, try @list
[23:44:42] <Guest38> @lambdabot help
[23:44:42] <lambdabot> Unknown command, try @list
[23:45:21] *** Quits: jollygood2 (~bc8165b6@217.29.117.252) (Quit: http://www.okay.uz/ (Session timeout))
[23:45:38] <[exa]> Guest38: you can /query lambdabot and try the commands privately
[23:47:38] *** Quits: Guest38 (~Guest38@pool-100-19-29-41.phlapa.fios.verizon.net) (Client Quit)
[23:48:17] <InstX1> what i had more in mind was to figure out how to custom craft an effect based on the more abstract material you were teaching your students
[23:49:03] <[exa]> nah, really just read the docs of `friday` package
[23:49:31] <InstX1> no, i mean, have the students custom craft them
[23:49:43] <[exa]> do they know some of the pixel graphics practice?
[23:50:28] <[exa]> with juicypixels there's a literal `pixelMap` function they can use to change the colors as they want
[23:50:47] <[exa]> (ok maybe the name is different)
[23:51:04] <[exa]> ah nope. https://hackage.haskell.org/package/JuicyPixels-3.3.6/docs/Codec-Picture.html#v:pixelMap
[23:51:26] <[exa]> the example there is a brightness filter
[23:51:30] *** Joins: acidjnk_new (~acidjnk@p200300d0c703cb959894c42690fc4f0f.dip0.t-ipconnect.de)
[23:53:07] *** Joins: Pdroman_ (~Android@93.red-79-156-174.staticip.rima-tde.net)
[23:53:58] *** Quits: wonko (~wjc@62.115.229.50) (Ping timeout: 252 seconds)
[23:55:44] <InstX1> also, if you might consider my idea, just don't have them do transforms in real time or in demonstrations because if the algorithms produce something unexpected, it might be embarrassing or dangerous on a professional level
[23:56:40] *** Joins: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru)
[23:57:28] *** Quits: ArctVaulMarsHMPJ (~pjetcetal@128-71-225-36.broadband.corbina.ru) (Read error: Connection reset by peer)
[23:57:54] *** Quits: hololeap (~hololeap@user/hololeap) (Ping timeout: 276 seconds)
[23:58:21] *** Joins: hololeap (~hololeap@user/hololeap)
[23:58:36] *** Joins: floridmarshmallo (~nate@pool-100-19-29-41.phlapa.fios.verizon.net)
[23:58:48] <[exa]> ah like I'd have the students code some dope instagram filters :]
[23:58:54] <[exa]> could work.
[23:59:09] <[exa]> might make a good homework
