[00:13:39] *** rwb is now known as rb
[00:22:31] *** Joins: sonic1 (~sonic@user/sonic)
[00:33:57] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 240 seconds)
[00:39:55] <xkoncek> are there any syntactic problems with introducing operators `->()` and `->[]`?
[00:41:21] <InPhase> xkoncek: With x->() meaning (*x)() ?
[00:41:23] <xkoncek> this->(args...);
[00:41:31] <xkoncek> yes
[00:41:45] <xkoncek> this->operator()(args...)
[00:42:02] <InPhase> Doesn't sound like it introduces anything harmful, but it would be a pain to have to implement yet another operator to do the same sort of thing.
[00:44:09] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[00:49:49] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:ac88:7faa:71ea:c5f2) (Ping timeout: 240 seconds)
[00:50:38] *** Joins: gehn (~gehn@user/gehn)
[00:53:09] <Alipha> why stop there?? x->++; --<-x
[00:53:33] <c4017w__> Can someone explain why this _doesn't_ throw a 'incomplete type' error for Base::Map? https://wandbox.org/permlink/kGtenvBDjEN9xEUK
[00:56:02] <c4017w__> In the end I want `Base` to not be a template class, but I don't see any way for it to store an array of `Derived` otherwise
[01:01:18] <xkoncek> {int x = 0; while (x < 5) {++x;} else {cout << x;} }
[01:01:18] <geordi> error: 'else' without a previous 'if'
[01:02:38] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Quit: elastic_dog)
[01:03:07] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[01:07:22] <PJBoy> c4017w__, https://wandbox.org/permlink/2OzDkCHOe9uLW9VN
[01:07:34] <PJBoy> you only need the complete type for the definition of something
[01:07:57] <PJBoy> the definition of your Map is in Base.cpp, and you need the definition of `get` in there too
[01:08:17] <PJBoy> if you were to declare Map as an inline static, then you would get an incomplete type error as desired
[01:09:13] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:13:55] *** Quits: magla (~gelignite@55d453bf.access.ecotel.net) (Quit: Stay safe!)
[01:13:57] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (Ping timeout: 240 seconds)
[01:13:58] <c4017w__> PJBoy, I'm sure I must have tried that as well and run into another problem... I'll try again in my real code
[01:19:54] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:19:58] <c4017w__> Hmm, seems to compile so far
[01:24:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[01:28:20] <yolo> { int type=1; switch(type) { case 1: break; default: static_assert(false); break;}}
[01:28:20] <geordi> error: static assertion failed
[01:29:05] <yolo> here static_assert is to make sure you must supply a valid *type* value, however static_assert outwits me, is it too smart?
[01:30:07] <yolo> you fail my logic, but not my random one liner like there is no logic in my code
[01:30:45] *** Quits: robod34 (Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:32:31] *** Quits: chris64 (~chris@user/chris64) (Quit: leaving)
[01:32:43] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[01:32:54] <cbreak> yolo: static assertions assert something at compile time
[01:33:01] <cbreak> you assert false, which is obviously always false
[01:33:03] <cbreak> so it fails
[01:34:47] <yolo> i thought static_assert can replace assert, like what c++ typecast does to c casting, apparently for assert, cassert and static_assert are not replacing each other
[01:35:04] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[01:35:23] <cbreak> static_assert can replace some things
[01:35:27] <cbreak> but not runtime assertions.
[01:35:49] <cbreak> yolo: what you should do is: remove the default
[01:36:10] <cbreak> switch over an enum, and NOT an int
[01:36:21] <yolo> ok. so static_assert for compile-time check, assert for runtime
[01:36:22] <cbreak> then the compiler should give at least a warning if you forget to handle a case in the enum
[01:36:33] <cbreak> and maybe in other cases
[01:36:57] <yolo> yes i use enum class indeed, shorten it for geordi here
[01:37:10] <cbreak> if you want to keep the default, you can put a runtime thing in there, like throw logic_error("fool passed invalid value");
[01:38:13] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 240 seconds)
[01:38:57] <yolo> that's another way yes, not using exception here though
[01:39:17] <PJBoy> it would be very exceptional tbf
[01:39:19] <ville> yolo: if you want to "delay" static_assert you can if you make it depend on template argument
[01:39:26] <cbreak> yolo: I would recommend exceptions
[01:39:31] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:39:37] <cbreak> but you can also just std::terminate, maybe after complaining via a logger
[01:39:43] <PJBoy> but terminate/abort or whatever-- ^
[01:40:11] <cbreak> (I would not do that in a library, ever. Libraries should throw, or signal errors in some other form, to give users a chance to recover)
[01:40:12] <PJBoy> or just an assert
[01:40:26] <cbreak> libraries that assert or abort are junk.
[01:40:30] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:40:36] <PJBoy> agreed
[01:40:39] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:40:39] *** ChanServ sets mode: +v npaperbot
[01:40:40] <PJBoy> but for a logic error?
[01:40:48] <cbreak> there's an exception for that.
[01:40:49] <PJBoy> I like assert for asserting logic
[01:41:11] <yolo> agree, all libraries should return a pair these days (result,error_code) that is
[01:41:12] <PJBoy> you could have both of course
[01:41:33] <ville> or let the user configure your library with the mechanism of their choice through a pointer-to-function
[01:41:42] <cbreak> a callback?
[01:41:47] <cbreak> sure, I guess... that's a way...
[01:41:59] <cbreak> you could do it the bost::asio way
[01:42:04] <cbreak> and do everything!
[01:42:04] <PJBoy> I don't like the idea that you can catch logic_error in your generic std::exception catch when doing development
[01:42:31] <cbreak> PJBoy: that's why my generic catch is #ifndef NDEBUG :D
[01:42:42] <PJBoy> holy shit what a good idea
[01:43:25] <ville> i am not sure if i would call it a callback. it's just to configure the kind of error mechansim the user wants. they can then assert, thrown an exception or return
[01:44:21] <cbreak> ville: well, it's a callback mechanically. I think I've seen that rarely, in C libs
[01:44:27] <PJBoy> that sounds like a lot of work for the library dev
[01:44:28] <cbreak> it's probably an OK solution
[01:44:55] <ville> my result-like uses one for access checking for example. to see that -> and * are used to access only when value is held. it's easy to to choose a noop, assert in debug builds, or always assert or...
[01:44:57] <cbreak> (other than not being exception compatible when actual C devs use it :)
[01:45:53] <ville> it's hardly any work. it's one line. equals to having written assert()
[01:45:53] <PJBoy> would it be OK for a library function A to call another library function B where by can throw, provided A catches and returns an error code?
[01:46:07] <PJBoy> s/by/B/
[01:46:32] <xkoncek> is C++23 executors proposal suggesting a bunch of new keywords?
[01:46:53] <PJBoy> it'd be a lot of work because you'd have to change all the return types of everything
[01:47:05] <PJBoy> and you'd have to propogate error codes *and* do exception stuff
[01:47:58] <PJBoy> I guess you can mitigate some of that with auto return type and function-try catch blocks
[01:49:06] <PJBoy> though that opens a question of how to deal with exceptions not thrown by the library directly
[01:49:18] <PJBoy> such as bad_alloc or exceptions thrown by a user provided callback
[01:49:52] <cbreak> PJBoy: error signaling translation?
[01:49:59] <cbreak> happens all the time at API boundaries
[01:50:09] <cbreak> usually I translate from error codes to proper exceptions though :)
[01:50:16] <PJBoy> I was thinking that, yeah
[01:50:31] <cbreak> but the opposite is of course also possible. I think boost::asio does something like that
[01:50:36] <PJBoy> I stand by that last question though
[01:51:14] <PJBoy> could just leave it as "UB" if one of those circumstances happen and you "opt in" to an error code build
[01:51:23] <cbreak> if you translate exceptions, just translate all of them
[01:51:37] <PJBoy> but std::filesystem doesn't do that(!)
[01:53:02] <cbreak> I've yet to look at that API
[01:53:25] <PJBoy> tldr is that bad_alloc can get thrown in the error_code overloads
[01:53:54] <PJBoy> meaning for several functions in that API, exception-free is a stretch of truth
[01:58:38] <cbreak> they're not noexcept()?
[01:59:35] <PJBoy> indeed
[02:00:36] <PJBoy> e.g. https://en.cppreference.com/w/cpp/filesystem/absolute
[02:00:49] <ville> cbreak: filesystem does not translate exceptions to error codes
[02:01:14] <PJBoy> some of them genuinely are noexcept https://en.cppreference.com/w/cpp/filesystem/rename
[02:01:37] <cbreak> probably those that wrap some low level posix api :)
[02:01:47] <cbreak> ... well, thinly wrap...
[02:02:12] <ville> the purpose of the error_code versions are a complete mystery to me. people who use exceptions won't use them, and people who don't use exceptions won't use them either because they may throw anyway
[02:02:43] <PJBoy> some people use TCMalloc or whatever, so they know that bad_alloc will never happen
[02:03:07] <ville> and they tried to get the dual interface for networking
[02:03:43] <PJBoy> I've not been keeping up with networking proposal, but isn't that still the idea?
[02:03:52] <ville> it's dead as is
[02:04:15] <ville> the current idea is that it needs to be rewritten to fit the executors model
[02:04:46] <cbreak> does it have to fit that thing? :/
[02:04:49] <ville> ...or i guess more accurately that's the current battlefield. will it or won't it be, but seems like it's not going to make it through in the current asio model
[02:05:40] <cbreak> boost::asio has had its own "executor" / context thingie, which worked okish :/
[02:05:41] <PJBoy> not familiar with the executors stuff either
[02:05:49] <cbreak> but I guess the std people want to reinvent their bikeshed
[02:06:19] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[02:07:15] <ville> anyways it's not making 23 is my call
[02:09:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (Quit: WeeChat 3.4)
[02:10:04] <ville> even if the asio author manages to convince the committee to stick with the asio model
[02:20:35] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:21:32] *** Quits: immibis (~hexchat@62.156.144.218) (Ping timeout: 252 seconds)
[02:22:32] *** Quits: AmR (~AmREiSa@156.199.28.131) (Quit: Konversation terminated!)
[02:24:37] <xkoncek> 40 years after creating C++ is still too soon to be able to write nice servers
[02:25:18] <xkoncek> i was really just about to delve into that stuff, now i don't know whether wait, stick with boost::asio or use somethin else completely
[02:26:20] <xkoncek> for some reason i think that at least some parts of server infrastructure are just better fit for managed languages
[02:26:39] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Ping timeout: 256 seconds)
[02:26:52] *** Joins: immibis (~hexchat@62.156.144.218)
[02:27:28] *** Joins: ahlk (~user@2600:1700:31c0:3a10::43)
[02:38:30] <PJBoy> well, with network stuff the cost of operations is compared relative to network speed
[02:38:48] <PJBoy> so the high performance of C++ isn't worth anywhere near as much
[02:39:22] <PJBoy> a good async python server is generally good enough
[02:44:48] <OnlineCop> My library is typically compiled with c++17, so I'm using `if constexpr (std::is_same_v<T, int>)`. However, a few wrappers compile it with c++14, and I'm trying to understand how to write so both can use it.
[02:45:28] <OnlineCop> https://wandbox.org/permlink/xswxYtmSkm7Wuy6C within the Parameters.cpp file.
[02:46:42] <xkoncek> PJBoy + the cost of invoking native functions if the backend functionality is indeed written in C++
[02:46:49] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:54:20] <xkoncek> did anyone ever touch Boost Python?
[02:55:47] <xkoncek> i think i want the other way around anyway
[02:57:27] <xkoncek> now the question whether python or java for interfacing with c++
[03:06:43] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e84d:6d3f:dfc4:9c54)
[03:06:54] *** Quits: bobb_ (~bobb_@dslb-088-065-184-211.088.065.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[03:08:01] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 256 seconds)
[03:10:42] <cbreak> xkoncek: I did
[03:10:44] <cbreak> it's not bad
[03:11:13] <cbreak> lately I've been using pybind11, which is very similar (seems heavily inspired by boost::python), but also offers better support for numpy.
[03:11:25] <cbreak> I'd stay away from java
[03:11:27] <cbreak> it's junk
[03:11:38] <cbreak> very heavy, expensive junk, that'll just get you sued by oracle
[03:15:57] <xkoncek> i am biased, i work more closely along with people working with Java
[03:16:14] <xkoncek> but i may just ditch it and go with posix sockets
[03:17:19] <xkoncek> i can't for the god remember the name of that one linux-specific function which is used to efficiently get... something like sockets where a buffer is ready to be read?
[03:17:42] <cbreak> I'd stay away from java. Oracle now requires you to pay for a commercial license if you want to use it...
[03:17:43] *** Joins: ferdna (~ferdna@user/ferdna)
[03:17:54] <cbreak> xkoncek: kqueue?
[03:18:01] <cbreak> hmm... no, that's macos... epoll?
[03:18:08] <xkoncek> of course
[03:18:38] <xkoncek> kqueue is BSD in general, isn't it?
[03:18:52] <cbreak> possible
[03:23:24] <xkoncek> why 3rd party libs (like GLFW) use conditional `extern "C"` guard whereas <sys/epoll.h> doesn't bother?
[03:24:08] <xkoncek> how does it link then?
[03:24:40] <xkoncek> my bad, it is just macroed as `__BEGIN_DECLS`
[03:27:15] <Alipha> cbreak: my work uses adoptOpenJDK. Free and works fine
[03:29:55] <cbreak> xkoncek: glfw is C++ compatible, system headers are just C
[03:30:05] <cbreak> you probably have to include them in an extern "C" { block }
[03:30:51] <cbreak> Alipha: until oracle sues you for patent infrigment... they won against google, and google has deeper pockets than I'd be able to rely on, if I'd get sued :(
[03:31:43] *** Joins: pulse_ (~pulse@user/pulse)
[03:31:51] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[03:31:56] <xkoncek> cbreak `extern "C"` is used in both cases, in system headers it is just hidden behind a macro
[03:32:41] <cbreak> that's also ok
[03:33:06] <xkoncek> # define __BEGIN_DECLS	extern "C" {
[03:33:51] <xkoncek> #define begin { << look i made c++ into Pascal
[03:34:47] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[03:39:52] <kalven> xkoncek: kqueue was first added to freebsd
[03:47:08] *** pulse_ is now known as pulse
[03:49:36] <kalven> ville: good talk, thanks for the link
[03:56:03] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[04:03:34] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[04:09:21] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:11:10] *** Quits: xkuru (~xkuru@user/xkuru) (Read error: Connection reset by peer)
[04:15:17] *** Quits: Tokamak (~Tokamak@172.58.191.63) (Ping timeout: 240 seconds)
[04:16:24] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Remote host closed the connection)
[04:17:42] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:e84d:6d3f:dfc4:9c54) (Ping timeout: 268 seconds)
[04:17:51] *** Joins: Tokamak (~Tokamak@172.58.188.17)
[04:18:24] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[04:24:05] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Quit: Oh freddled gruntbuggly | Thy micturations are to me | As plurdled gabbleblotchits | On a lurgid bee)
[04:25:27] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Remote host closed the connection)
[04:47:22] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[04:52:19] *** Joins: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[04:52:20] *** Quits: fcc977 (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Remote host closed the connection)
[04:52:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[05:04:29] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[05:40:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:40:44] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:40:45] *** ChanServ sets mode: +v npaperbot
[05:44:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[05:45:38] *** Joins: Xardas (~Xardas@149.233.51.127)
[05:47:20] *** Quits: Tokamak (~Tokamak@172.58.188.17) (Read error: Connection reset by peer)
[05:48:01] *** Joins: Tokamak (~Tokamak@172.58.188.17)
[05:48:42] <Xardas> How do I configure VScode for using --std=c++11 when compiling ? How do I even know which c++ is being used under my vscode ?
[06:06:46] <OnlineCop> Xardas: That probably depends on which C/C++ IntelliSense you have installed. There might be a hint in the .vscode/c_cpp_properties.json file, since the version you're using is often project-dependent.
[06:07:13] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[06:14:40] <Xardas> Are you using VScode ?
[06:15:11] <Xardas> I actually found the file for the default g++ command and I added -std=c++11
[06:15:19] <Xardas> to it
[06:29:54] *** Quits: Tokamak (~Tokamak@172.58.188.17) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:34:37] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 240 seconds)
[06:36:07] *** Quits: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[06:42:35] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:42:56] *** Joins: gehn (~gehn@user/gehn)
[06:43:06] *** Quits: gehn (~gehn@user/gehn) (Remote host closed the connection)
[06:43:26] *** Joins: gehn (~gehn@user/gehn)
[06:51:55] *** Quits: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com) (Read error: Connection reset by peer)
[06:55:03] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[07:11:13] *** Joins: frost (~frost@user/frost)
[07:14:20] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[07:17:20] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[07:18:25] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[07:20:34] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[07:23:35] *** Joins: Tokamak (~Tokamak@172.58.188.17)
[07:25:09] <very_sneaky> Xardas: how do you manage your builds?
[07:27:30] *** Quits: Tokamak (~Tokamak@172.58.188.17) (Client Quit)
[07:27:31] *** Joins: adeliktas8 (~adeliktas@i59F5FB64.versanet.de)
[07:28:49] <Xardas> very_sneaky what do you mean by builds ?
[07:28:57] *** Quits: adeliktas (~adeliktas@i59F5F686.versanet.de) (Ping timeout: 240 seconds)
[07:28:57] *** adeliktas8 is now known as adeliktas
[07:29:44] <Xardas> some terms are unknown to me as am new to cpp
[07:29:48] <very_sneaky> Xardas: presumably when you build/compile your program, you've specified somehow that you want it to give you an executable, or a static lib, or shared lib?
[07:30:26] <Xardas> it's a .json file
[07:30:40] <Xardas> has a command to compile my code
[07:30:56] <very_sneaky> ah, so you're not using a build system
[07:31:01] <very_sneaky> what's the command?
[07:31:35] <Xardas> I'm using an extension "Code Runner" that runs my code
[07:32:11] <Xardas> "cd $dir && g++ *.cpp -o -std=c++11 $fileNameWithoutExt && $dir$fileNameWithoutExt"
[07:32:25] <Xardas> i added the -std=c++11 parameter
[07:33:08] <very_sneaky> yeah, gotcha. if that's all you've got then that sounds like the right way to do it
[07:34:00] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[07:35:07] <Xardas> Yeah, I solved the problem.
[07:35:12] <Xardas> thanks anyway:D
[07:36:09] <Xardas> Do you do cp ?
[07:36:22] <very_sneaky> cp?
[07:36:31] <Xardas> competitive programming
[07:36:37] <very_sneaky> no
[07:37:23] <Xardas> gotcha
[07:54:46] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[07:55:03] *** Quits: pulse (~pulse@user/pulse) (Quit: Join a gamedev community @ https://indiedevs.net/)
[08:01:55] <johnny> Xardas, most of us work on projects with multiple files and multiple dependencies, so that kind of setup doesn't generally get used for those
[08:02:19] <Xardas> Wow
[08:03:17] <Xardas> Well it's hard to get a c++ job right ?
[08:04:06] <very_sneaky> as hard or as easy as any job - really depends on the specific role and how well your skills match the requirements
[08:04:16] <Stryyker> A particular game publisher seems to have issues retaining programmers
[08:06:05] <kalven> just one?
[08:06:14] <Xardas> I hate game development, as I think making games is useless
[08:07:53] <Xardas> It's also hard
[08:08:01] <Xardas> and competitive
[08:08:35] <Stryyker> I was being elusive about a news story about the publisher across many of its studios had a lot of people walk out in the last 3 months
[08:29:05] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[08:33:26] <Xardas> Sorry there might be people working as game devs here i was rude lol
[08:47:51] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[08:48:13] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[08:48:57] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:56:51] *** Quits: DSpider (~DSpider@82.79.237.5) (Quit: Leaving)
[08:59:51] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[09:06:02] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[09:25:06] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[09:26:41] *** Quits: scoobydoo (~scooby@user/scoobydoo) (Ping timeout: 256 seconds)
[09:40:31] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:40:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:40:40] *** ChanServ sets mode: +v npaperbot
[09:42:26] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:6ebd:e967:bab2:d4bc:3c08)
[09:45:22] *** Quits: ville (~ville@user/ville) (Quit: ville)
[09:45:37] *** Quits: p-i- (~Ohmu@2403:6200:8978:6ebd:d904:b477:8a7f:db46) (Ping timeout: 240 seconds)
[09:46:48] *** Joins: ville (~ville@user/ville)
[10:05:10] <johnny> i have trouble grasping this concept of competitive programming
[10:05:11] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[10:05:11] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[10:05:11] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[10:05:11] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[10:05:11] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[10:05:11] *** Joins: wielding (~wielding@user/wielding)
[10:05:11] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[10:05:12] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[10:05:12] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[10:05:12] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[10:08:34] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:08:54] <kalven> people compete in all kinds of things
[10:10:56] <johnny> indeed they do
[10:22:24] *** Quits: skapata (~Skapata@user/skapata) (Read error: Connection reset by peer)
[10:24:34] *** Quits: teepee (~teepee@openscad/teepee) (Remote host closed the connection)
[10:25:25] *** Joins: teepee (~teepee@openscad/teepee)
[10:26:05] *** Quits: Fairy (~Fairy@ti0004a400-3806.bb.online.no) (Ping timeout: 252 seconds)
[10:37:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[11:03:42] <johnny> i was never into code golf or the obfuscated programming contests of the past
[11:04:50] <kalven> me neither
[11:06:20] <johnny> i guess i'm finally seeing a project built with conan
[11:07:54] *** Joins: namo (~nomo@95.87.208.95)
[11:24:20] *** Joins: andreasbuhr (~quassel@p549db966.dip0.t-ipconnect.de)
[11:24:20] *** Quits: andreasbuhr (~quassel@p549db966.dip0.t-ipconnect.de) (Client Quit)
[11:44:56] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[11:50:17] *** Quits: chozorho (~chozorho@2601:146:300:c30::58f0) (Quit: good night, stay safe)
[12:01:51] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[12:04:56] <very_sneaky> what do competitive programmers compete in?
[12:05:10] <very_sneaky> like, is it "solve this problem for time"?
[12:05:42] <very_sneaky> i mean, if nothing else it sounds like a good way to remember a bunch of algorithms
[12:06:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[12:06:46] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:07:53] *** Joins: useful_idiot2 (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[12:08:17] <ville> resource utilization seems like an obvious thing. highest data/time wins
[12:08:57] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 240 seconds)
[12:08:57] *** useful_idiot2 is now known as useful_idiot
[12:11:46] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[12:14:16] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[12:14:41] <very_sneaky> ville: is that what the competitions measure on?
[12:16:45] *** Joins: robod34 (Username@79.113.195.239)
[12:20:07] <ville> no idea, but seems like the simplest thing
[12:22:16] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[12:25:55] *** Joins: traxex (traxex@user/traxex)
[12:29:17] *** Joins: malloy (~jimery@116.30.220.175)
[12:29:27] <johnny> wikipedia says
[12:29:30] <johnny> " programming competition generally involves the host presenting a set of logical or mathematical problems, also known as puzzles, to the contestants (who can vary in number from tens to several thousands), and contestants are required to write computer programs capable of solving each problem. Judging is based mostly upon number of problems solved and time spent for writing successful solutions, but may also include other factors (quality of output
[12:29:30] <johnny> produced, execution time, program size, etc.) "
[12:30:06] <johnny> so code golf can also be a part of it
[12:31:59] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Ping timeout: 256 seconds)
[12:32:30] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:40:07] *** Quits: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4) (Read error: Connection reset by peer)
[12:40:08] <ville> time to solve seems problematic and particularly easy to game. unless the pool of problems is huge, but then comparing to others who got different picks from the pool...
[12:40:25] *** Joins: thad_the_man (~tlophd_be@2600:1700:3051:4370:21d:9ff:fe33:51f4)
[12:41:37] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[12:41:40] *** Quits: malloy (~jimery@116.30.220.175) (Ping timeout: 250 seconds)
[12:42:02] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[12:42:43] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[12:43:36] *** Joins: malloy (~jimery@116.30.220.175)
[12:43:41] <johnny> well it'd probably best to look at an actual competition's rule rather than such a broad description
[12:44:09] <johnny> i'm sure Xardas could hvae linked one if they were still around :(
[12:49:40] <LordKalma> !fact
[12:49:41] <nolyc> LordKalma: A non-const reference shall not be bound to a bit-field.
[12:49:41] *** Quits: robod34 (Username@79.113.195.239) (Remote host closed the connection)
[12:50:25] *** Joins: robod34 (Username@79.113.195.239)
[12:50:48] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[12:53:38] *** Joins: useful_idiot2 (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[12:55:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:5c16:538b:70f3:1b3) (Ping timeout: 240 seconds)
[12:55:39] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (Ping timeout: 256 seconds)
[12:55:39] *** useful_idiot2 is now known as useful_idiot
[13:00:45] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[13:02:40] *** Joins: jokoon (~jokoon@136.252.163.126)
[13:03:57] <jokoon> people using MSVC with large (large) codebase, do you entirely disable intellisense, or do you know some options to make like a little better? It's constantly processing and probably increasing my power bill
[13:04:07] <jokoon> make it*
[13:08:52] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[13:12:46] <comrad> what is large for you?
[13:12:54] <comrad> to you?
[13:13:01] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[13:13:31] *** Joins: plastico (~plastico@neomutt/plastico)
[13:13:37] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f) (Quit: Quit)
[13:14:03] <jokoon> LOC in the millions
[13:14:33] <jokoon> or at least several 100k
[13:23:49] *** Joins: op0x0f05 (uid512716@id-512716.tinside.irccloud.com)
[13:24:27] *** Joins: xkuru (~xkuru@user/xkuru)
[13:24:41] <comrad> okay, thats huge :)
[13:25:09] <comrad> doesnt support visual studio ccache?
[13:25:32] *** Quits: pa (~pah@user/pah) (Ping timeout: 240 seconds)
[13:25:37] *** Quits: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch) (Ping timeout: 240 seconds)
[13:25:47] <jokoon> ccache?
[13:25:53] <jokoon> what's this?
[13:26:29] <comrad> compiler-cache
[13:26:31] *** Joins: pah (~pah@user/pah)
[13:26:38] *** Joins: tct (~tct@8.200.173.83.static.wline.lns.sme.cust.swisscom.ch)
[13:26:39] <comrad> https://ohalzov.blogspot.com/2020/02/clcache-to-speed-up-rebuilds-of-large.html
[13:29:05] <jokoon> I don't care about rebuild, I care about intellisense constantly revving my CPU
[13:31:55] <comrad> they say that in vs2019 its all faster
[13:31:55] *** Quits: Praise (~Fat@user/praise) (Ping timeout: 256 seconds)
[13:32:02] *** Joins: Praise- (~Fat@user/praise)
[13:34:27] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:40:32] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:40:40] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:40:40] *** ChanServ sets mode: +v npaperbot
[13:42:13] *** Quits: cvitak (~cvitak@83-245-250-171-nat-p.elisa-mobile.fi) (Ping timeout: 240 seconds)
[13:42:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[13:43:06] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[13:48:08] *** Joins: biberu\ (~biberu@user/biberu)
[13:48:43] *** Joins: oknenavin (~nomo@95.87.208.95)
[13:49:49] *** Joins: kaichiuchu (~kaichiuch@user/kaichiuchu)
[13:50:17] *** Quits: shailangsa (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (Ping timeout: 240 seconds)
[13:50:18] *** Quits: kaichiuc1u (~kaichiuch@user/kaichiuchu) (Read error: Connection reset by peer)
[13:50:24] *** Quits: Plazma (~Plazma@user/plazma) (Quit: ZNC 1.7.5 - https://znc.in)
[13:50:37] *** Quits: traxex (traxex@user/traxex) (Ping timeout: 240 seconds)
[13:50:37] *** Joins: Plazma_ (~Plazma@2607:5300:60:41a::1)
[13:50:47] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[13:50:52] *** Quits: etolier (~somewhere@202-144-174-137.ip4.superloop.com) (Remote host closed the connection)
[13:50:57] *** Quits: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net) (Ping timeout: 240 seconds)
[13:50:57] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 240 seconds)
[13:51:11] *** Joins: lmat (~Lmat@c-68-58-60-231.hsd1.in.comcast.net)
[13:51:17] *** Quits: undeclared (nullx@user/undeclared) (Ping timeout: 240 seconds)
[13:51:17] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: namo (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[13:51:37] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[13:51:37] *** Joins: undeclared (nullx@user/undeclared)
[13:51:38] *** biberu\ is now known as biberu
[13:52:06] *** Joins: etolier (~somewhere@202-144-174-137.ip4.superloop.com)
[13:52:20] *** Joins: traxex (traxex@user/traxex)
[13:52:20] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[13:54:01] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Ping timeout: 256 seconds)
[13:54:10] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:54:10] *** ChanServ sets mode: +v npaperbot
[13:54:21] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[14:00:09] *** Quits: barix (~barix@user/barix) (Quit: Lost terminal)
[14:07:53] *** Quits: jokoon (~jokoon@136.252.163.126) (Quit: Client closed)
[14:15:30] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[14:16:47] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[14:25:01] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[14:32:13] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[14:32:52] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[14:36:49] *** Joins: seninha (~seninha@user/seninha)
[14:37:00] *** Joins: oknenavin (~nomo@95.87.208.95)
[14:37:14] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[14:37:38] *** Joins: seninha (~seninha@user/seninha)
[14:37:48] <Haohmaru> !rq
[14:37:48] <nolyc> Haohmaru: <PJBoy> Guest53, does anyone treat linux as a first class citizen?
[14:38:10] <Haohmaru> >:/
[14:39:56] *** Joins: jokoon (~jokoon@136.252.163.126)
[14:46:30] <very_sneaky> comrad: their website indicates that msvc isn't supported by ccache: https://ccache.dev/platform-compiler-language-support.html, however, they link to a pr that apears to have been merged.. so :shrug: https://github.com/ccache/ccache/pull/506
[14:57:38] *** Joins: nshire (~nshire@user/nshire)
[14:59:11] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[14:59:45] *** Quits: Neal__ (~nshire@47.146.41.156) (Ping timeout: 256 seconds)
[15:08:13] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:80e0:7916:1f5b:8b55)
[15:08:52] *** Stryykert is now known as Stryyker
[15:41:14] *** Joins: john99 (~johnny@138.62.221.87.dynamic.jazztel.es)
[15:49:28] *** Joins: Furai (~Furai@furai.pl)
[15:52:56] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[15:53:26] *** Quits: op0x0f05 (uid512716@id-512716.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[15:56:09] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:14:02] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[16:14:34] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[16:16:18] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Remote host closed the connection)
[16:16:46] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[16:17:25] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[16:22:20] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[16:27:43] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[16:28:06] *** Quits: Plazma_ (~Plazma@2607:5300:60:41a::1) (Changing host)
[16:28:06] *** Joins: Plazma_ (~Plazma@user/plazma)
[16:28:08] *** Plazma_ is now known as Plazma
[16:30:41] <LordKalma> https://www.reddit.com/r/cpp/comments/rw93sj/added_stdregex_to_a_regex_shootout_and_the/
[16:33:01] <LordKalma> I've seen benchmarks having Python's `re` comparable to some C implementation
[16:37:24] <jsbach> Hi, i am looking for some tool to understand how a compiler treats variables and constants as lvalues or rvalues. I've been on godbolt.org, but couldn't really get it work for a clear understanding. Are there any you can recommend?
[16:42:53] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Ping timeout: 256 seconds)
[16:43:18] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[16:44:00] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[16:45:31] <PJBoy> !&&
[16:45:32] <nolyc> http://thbecker.net/articles/rvalue_references/section_01.html explains rvalue references, moving and forwarding.
[16:46:33] <PJBoy> also https://en.cppreference.com/w/cpp/language/value_category if you haven't already seen it
[16:47:24] <PJBoy> note that value category is a property of expressions (that possibly name variables/constants), and not of declarations of variables/constants
[16:48:13] <PJBoy>  geordi can help with value categories too with its TYPE macro
[16:48:21] <rond_> I want to have a recursive lambda - what's the best way? Is something like this: https://paste.mozilla.org/GUhtSY4z  a way to go?
[16:48:34] <PJBoy> rond_, recursive lambdas aren't possible until C++23
[16:48:51] <rond_> what about the one in the link then?
[16:48:57] <PJBoy> what about it?
[16:48:58] <rond_> (I know it's a bit cheating, but...)
[16:49:04] <PJBoy> it doesn't compile
[16:49:05] <rond_> you pass reference to the lambda when you call it
[16:50:22] <rond_> PJBoy https://godbolt.org/z/7sads8Gox
[16:50:23] <rond_> it does
[16:50:31] <PJBoy> oh it does compile
[16:50:34] <PJBoy> I just called it wrong
[16:50:44] <PJBoy> well that's as good as it gets prior to C++23 then
[16:51:11] <LordKalma> what does c++23 doe sit?
[16:51:13] <LordKalma> does it*?
[16:51:38] <LordKalma> have you noticed that at every standard we say "oh, the next standard will be *the* shit". And it's always without *the* :)
[16:51:40] <rond_> is it cheap? (when compared to naming the function? I want to avoid it as I'd need to pas  ~6 arguments all the time instead of taking them by closure)
[16:51:43] <PJBoy> "what does C++23 does it" /r/titlegore
[16:51:57] <LordKalma> more like /r/ihadastroke
[16:52:11] <PJBoy> the "deducing this" has syntax for it
[16:52:27] <LordKalma> I hope deducing this (and explicit this) gets in
[16:52:28] <rond_> PJBoy basically, my question is: is it okay to use this construct?
[16:52:32] <PJBoy> it's already in
[16:53:16] <LordKalma> cool
[16:53:52] <PJBoy> it looks like `auto factorial = [](this auto self, unsigned n) { return n == 1 : 1 ? n * self(n-1); }`
[16:54:08] <rond_> it'll be cool
[16:54:28] <LordKalma> sounds good to me
[16:54:45] <PJBoy> rond_, I imagine your thing would be fine provided the lambda isn't mutable
[16:54:57] <LordKalma> assuming I don't give up on c++ :D
[16:55:07] <PJBoy> and even if its mutable it's probably fine, I'm just not as sure
[16:55:23] <LordKalma> declare as const just in case :p
[16:55:28] <PJBoy> should probably check godbolt either way
[16:55:46] <PJBoy> I think `this` is bizarre syntax to add to lambdas
[16:56:34] <rond_> c++ is fucked up sometimes
[16:56:49] <PJBoy> `auto f = [this](this auto self) { return this->f() + self.f(); }` :/
[16:57:15] <PJBoy> I mean I used self wrong there, but you catch my drift
[16:57:39] <PJBoy> I guess lambdas are classes though
[16:57:58] <PJBoy> so maybe it actually makes sense?
[16:58:10] <LordKalma> rond_, https://godbolt.org/z/GMn4KTYWs
[16:58:25] <LordKalma> gcc realized it was a recursive factorial and solved it
[16:58:28] <LordKalma> as with a function
[16:58:29] <LordKalma> so it's fine
[16:59:25] <LordKalma> https://godbolt.org/z/8e6hYhEcj
[16:59:30] <LordKalma> exact same implementations
[17:00:49] <rond_> I wonder if this would apply to any recursive lambda
[17:01:00] <LordKalma> YMMV
[17:01:43] <rond_> c++ sucks
[17:01:54] <LordKalma> yes
[17:02:36] <PJBoy> something a bit more testing https://godbolt.org/z/bszTKeEE9
[17:05:00] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[17:05:00] <leduyquang753> PJBoy A lambda is an instance of an autogenerated class.
[17:05:33] *** Quits: jokoon (~jokoon@136.252.163.126) (Ping timeout: 256 seconds)
[17:09:51] <PJBoy> yeah
[17:11:02] <PJBoy> so yeah I guess it's actually consistent that lambdas get a this-self parameter
[17:11:19] <PJBoy> not to be confused with a captured this
[17:12:41] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f)
[17:14:55] *** Joins: pulse (~pulse@user/pulse)
[17:28:42] *** Quits: yates (~user@fv-nc-f7af8b91e1-234237-1.tingfiber.com) (Remote host closed the connection)
[17:34:20] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74)
[17:36:56] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[17:38:08] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:f439:b353:9768:d2)
[17:38:08] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:f439:b353:9768:d2) (Changing host)
[17:38:08] *** Joins: skapata (~Skapata@user/skapata)
[17:40:23] *** Joins: DSpider (~DSpider@82.79.237.61)
[17:40:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:40:42] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:40:42] *** ChanServ sets mode: +v npaperbot
[17:40:49] *** Quits: frost (~frost@user/frost) (Ping timeout: 256 seconds)
[17:50:26] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075)
[17:51:56] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[17:52:54] <rond_> PJBoy btw, in this recurisve lambda example, why rvalue reference to self? (I found it somewhere on the internet, but i'm not sure why it's && instead of &&)
[17:52:58] *** Joins: Furai (~Furai@furai.pl)
[17:52:58] <rond_> instead of "&")
[17:53:05] *** Joins: tbe_loki (~loki@loki.codes)
[17:53:21] <PJBoy> it's a forwarding reference
[17:53:39] <PJBoy> it deduces the "right kind of reference" for the value you provide
[17:53:45] <rond_> OK
[17:53:58] <PJBoy> i.e. lvalue reference if you pass an lvalue, rvalue reference if you pass an rvalue
[17:54:05] <rond_> so, for example, implemeneting DFS with such construct would be okay?
[17:54:13] <rond_> should be, ok, thank
[17:54:14] <rond_> s
[17:54:35] <PJBoy> IMO recursion is never ok
[17:55:00] <PJBoy> but as far as recursion goes, that approach seems no worse than any other
[17:55:08] <rond_> gotcha. thanks!
[17:55:38] *** Joins: rond_13 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[17:55:53] <rond_13> btw, I guess you're not a fan of functional languages, are you?
[17:56:37] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 240 seconds)
[17:56:53] *** Joins: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[17:57:09] <PJBoy> I don't hate them
[17:57:36] <PJBoy> did about two months of haskell in uni
[17:58:05] *** Joins: magla (~gelignite@55d4ca9b.access.ecotel.net)
[17:58:08] <PJBoy> I hate how other people write haskell, sure
[17:58:48] <PJBoy> cryptic abbreviations and category theory
[17:59:23] <PJBoy> but it had cool pattern matching and a very impressive fixed point operator
[17:59:39] <PJBoy> I would never take up a haskell job though
[17:59:58] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Ping timeout: 256 seconds)
[18:00:26] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[18:01:06] *** Quits: rond_13 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Ping timeout: 256 seconds)
[18:01:20] <rond_42> sometimes OCaml seems to be in a sweet point
[18:01:24] <rond_42> spot*
[18:04:42] <Plazma> purr like a camel
[18:05:01] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[18:06:29] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:06:49] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Client Quit)
[18:08:20] *** Joins: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net)
[18:11:59] <ashafq> Anyone into intel intrinsics (immintrin.h)?
[18:14:05] <ashafq> Suppose I have a vector like [x0,x1,....x7] and I want [x0,x1,x4,x5] in one register and [x2,x3,x6,x7] in another register. How do I get that?
[18:14:25] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[18:19:47] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Ping timeout: 256 seconds)
[18:21:28] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:27:03] *** Quits: john99 (~johnny@138.62.221.87.dynamic.jazztel.es) (Remote host closed the connection)
[18:28:57] <ville> not too long ago i crossed upon a web page with nice pictures of all kinds of swizzles and what the corresponding intrinsics were
[18:32:23] *** Joins: TheSchaf (~TheSchaf@p54833485.dip0.t-ipconnect.de)
[18:34:17] <ville> but best i can come up with now is: http://const.me/articles/simd/simd.pdf it's got some nice pictures for some, perhaps you can get started with those
[18:35:29] *** Quits: jns (~x@user/jns) (Ping timeout: 268 seconds)
[18:39:44] *** Joins: jns (~x@comlink.adminking.com)
[18:39:45] *** Quits: jns (~x@comlink.adminking.com) (Changing host)
[18:39:45] *** Joins: jns (~x@user/jns)
[18:42:02] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[18:45:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:47:07] *** Quits: jns (~x@user/jns) (Ping timeout: 256 seconds)
[18:52:33] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
[18:58:13] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[19:00:13] *** Quits: TheSchaf (~TheSchaf@p54833485.dip0.t-ipconnect.de) (*.net *.split)
[19:00:13] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (*.net *.split)
[19:00:13] *** Quits: Furai (~Furai@furai.pl) (*.net *.split)
[19:00:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (*.net *.split)
[19:00:13] *** Quits: skapata (~Skapata@user/skapata) (*.net *.split)
[19:00:13] *** Quits: pulse (~pulse@user/pulse) (*.net *.split)
[19:00:13] *** Quits: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net) (*.net *.split)
[19:00:14] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (*.net *.split)
[19:00:14] *** Quits: Roughy (~mdaw45ns@user/roughy) (*.net *.split)
[19:00:14] *** Quits: jsbach (~jsbach@2a02:810a:1440:4cec:80e0:7916:1f5b:8b55) (*.net *.split)
[19:00:14] *** Quits: nshire (~nshire@user/nshire) (*.net *.split)
[19:00:14] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (*.net *.split)
[19:00:14] *** Quits: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com) (*.net *.split)
[19:00:14] *** Quits: xkuru (~xkuru@user/xkuru) (*.net *.split)
[19:00:14] *** Quits: robod34 (Username@79.113.195.239) (*.net *.split)
[19:00:14] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (*.net *.split)
[19:00:14] *** Quits: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it) (*.net *.split)
[19:00:14] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (*.net *.split)
[19:00:14] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (*.net *.split)
[19:00:14] *** Quits: sonic1 (~sonic@user/sonic) (*.net *.split)
[19:00:14] *** Quits: unyu (~pyon@user/pyon) (*.net *.split)
[19:00:14] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34) (*.net *.split)
[19:00:14] *** Quits: syrius (syrius@titan.stormtek.net) (*.net *.split)
[19:00:14] *** Quits: zoraj (~zoraj@209.126.81.159) (*.net *.split)
[19:00:14] *** Quits: zvijezda (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net) (*.net *.split)
[19:00:14] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (*.net *.split)
[19:00:15] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (*.net *.split)
[19:00:15] *** Quits: RandomReader (~RandomRea@user/randomreader) (*.net *.split)
[19:00:15] *** Quits: greenbagels (~gb@user/greenbagels) (*.net *.split)
[19:00:15] *** Quits: kkd (~kkd@255.205.154.104.bc.googleusercontent.com) (*.net *.split)
[19:00:15] *** Quits: chris123123 (~bnc123@streuwerte.de) (*.net *.split)
[19:00:15] *** Quits: HeTo (henkka@beer.modeemi.fi) (*.net *.split)
[19:00:15] *** Quits: Sevalecan (~sevalecan@user/sevalecan) (*.net *.split)
[19:00:15] *** Quits: obiwahn (~heini@user/obiwahn) (*.net *.split)
[19:00:15] *** Quits: ethoxy (~caretaker@cx21.havox.ru) (*.net *.split)
[19:00:15] *** Quits: Spydar007 (~spydar007@user/spydar007) (*.net *.split)
[19:00:15] *** Quits: dblsaiko (~saiko@crispy.dblsaiko.net) (*.net *.split)
[19:00:16] *** Quits: seninha (~seninha@user/seninha) (*.net *.split)
[19:00:16] *** Quits: Praise- (~Fat@user/praise) (*.net *.split)
[19:00:16] *** Quits: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899) (*.net *.split)
[19:00:16] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (*.net *.split)
[19:00:16] *** Quits: adeliktas (~adeliktas@i59F5FB64.versanet.de) (*.net *.split)
[19:00:16] *** Quits: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com) (*.net *.split)
[19:00:16] *** Quits: letto (~letto@188.25.113.229) (*.net *.split)
[19:00:16] *** Quits: rb (~augh@theguntretort.com) (*.net *.split)
[19:00:16] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (*.net *.split)
[19:00:16] *** Quits: dextaa (~DV@user/dextaa) (*.net *.split)
[19:00:16] *** Quits: ravan (~ravan@user/ravan) (*.net *.split)
[19:00:16] *** Quits: rnsanchez (~rnsanchez@179.233.249.52) (*.net *.split)
[19:00:16] *** Quits: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl) (*.net *.split)
[19:00:16] *** Quits: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060) (*.net *.split)
[19:00:16] *** Quits: simpl_e (~user@user/simpl-e/x-8589812) (*.net *.split)
[19:00:16] *** Quits: LangerJan (~jan@user/langerjan) (*.net *.split)
[19:00:16] *** Quits: Oxyd (~oxyd@user/oxyd) (*.net *.split)
[19:00:16] *** Quits: beanzilla (~beanzilla@user/beanzilla) (*.net *.split)
[19:00:16] *** Quits: lru (~lru@240.ip-51-79-50.net) (*.net *.split)
[19:00:16] *** Quits: Leo_V (~Leo@157.52.18.77) (*.net *.split)
[19:00:16] *** Quits: xcm___ (~xcm@user/xcm) (*.net *.split)
[19:00:16] *** Quits: Cyp (~cyp@213.237.85.9) (*.net *.split)
[19:00:16] *** Quits: c4017w__ (~c4017@209.52.68.8) (*.net *.split)
[19:00:17] *** Quits: jkl1337 (~jkl@user/jkl) (*.net *.split)
[19:00:17] *** Quits: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi) (*.net *.split)
[19:00:17] *** Quits: malinus_ (~malinus@172.245.158.16) (*.net *.split)
[19:00:17] *** Quits: causative (~halberd@user/causative) (*.net *.split)
[19:00:17] *** Quits: rpav (~rpav@user/rpav) (*.net *.split)
[19:00:17] *** Quits: bdt (~bdt@155.51-174-24.customer.lyse.net) (*.net *.split)
[19:00:17] *** Quits: mathu (~matt@user/mathu) (*.net *.split)
[19:00:17] *** Quits: gnomesort (~gnomesort@user/gnomesort) (*.net *.split)
[19:00:17] *** Quits: ZeroKnight (zeroknight@dimensionzero.net) (*.net *.split)
[19:00:17] *** Quits: Dijky (~Dijky@user/dijky) (*.net *.split)
[19:00:17] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (*.net *.split)
[19:00:17] *** Quits: wielding (~wielding@user/wielding) (*.net *.split)
[19:00:17] *** Quits: Ameisen (~ameisen@digitalcarbide.com) (*.net *.split)
[19:00:17] *** Quits: barometz (~dvanb@i117058.upc-i.chello.nl) (*.net *.split)
[19:00:17] *** Quits: Artea (~Lufia@artea.com.pt) (*.net *.split)
[19:00:17] *** Quits: buhman (sid411355@user/buhman) (*.net *.split)
[19:00:17] *** Quits: Argorok (sid195487@id-195487.hampstead.irccloud.com) (*.net *.split)
[19:00:17] *** Quits: raekye (~raekye@creatifcubed.com) (*.net *.split)
[19:00:17] *** Quits: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: Moult (~sevenstro@sevenstrokes.net) (*.net *.split)
[19:00:18] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[19:00:18] *** Quits: scruffyfurn (scruffyfur@turbous.xshellz.com) (*.net *.split)
[19:00:18] *** Quits: InPhase (~InPhase@openscad/inphase) (*.net *.split)
[19:00:18] *** Quits: Ara (~Ara@user/ara) (*.net *.split)
[19:00:18] *** Quits: TingPing (sid2800@id-2800.helmsley.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com) (*.net *.split)
[19:00:18] *** Quits: renopt (~renopt@lisp.us.to) (*.net *.split)
[19:00:18] *** Quits: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1) (*.net *.split)
[19:00:18] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (*.net *.split)
[19:00:18] *** Quits: kapil- (~kapil@2a01:4f9:c010:c9c3::1) (*.net *.split)
[19:00:18] *** Quits: Terminus (~null@user/terminus) (*.net *.split)
[19:00:19] *** Quits: hfsoulz (~hfsoulz@user/hfsoulz) (*.net *.split)
[19:00:19] *** Quits: klys (~mdasoh@show.op8.us) (*.net *.split)
[19:00:19] *** Quits: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a) (*.net *.split)
[19:00:19] *** Quits: Dragoon (~Dragoon@user/dragoon) (*.net *.split)
[19:00:19] *** Quits: m42e (~m42e@pb42.de) (*.net *.split)
[19:00:19] *** Quits: antto (~pewpew@imightbe.antonsavov.net) (*.net *.split)
[19:00:19] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[19:00:19] *** Quits: Cienisty (Cienisty@user/cienisty) (*.net *.split)
[19:00:19] *** Quits: bv (~bv@user/bv) (*.net *.split)
[19:00:19] *** Quits: d12fk (~heiko@exit0.net) (*.net *.split)
[19:00:19] *** Quits: Soliton (~Soliton@wesnoth/developer/soliton) (*.net *.split)
[19:00:20] *** Quits: deepy (deepy@user/deepy) (*.net *.split)
[19:00:20] *** Quits: tobs (~tobs@taboege.de) (*.net *.split)
[19:00:20] *** Quits: zinc_ (~zinc@163.ip-51-254-203.eu) (*.net *.split)
[19:00:20] *** Quits: manuels (~manuel@80.211.205.88) (*.net *.split)
[19:00:20] *** Quits: rdrg109 (~rdrg109@user/rdrg109) (*.net *.split)
[19:00:20] *** Quits: ghenry (~ghenry@ghenry.plus.com) (*.net *.split)
[19:00:20] *** Quits: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196) (*.net *.split)
[19:00:20] *** Quits: yolo (~xxiao@li1120-73.members.linode.com) (*.net *.split)
[19:00:21] *** Quits: miklcct (~quassel@vps.miklcct.com) (*.net *.split)
[19:00:21] *** Quits: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com) (*.net *.split)
[19:00:21] *** Quits: DrMax (~DrMax@node-1w7jra94757fzqkincqfc6jpy.ipv6.telus.net) (*.net *.split)
[19:00:21] *** Quits: epony (epony@user/epony) (*.net *.split)
[19:00:21] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (*.net *.split)
[19:00:21] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (*.net *.split)
[19:00:21] *** Quits: tbe_loki (~loki@loki.codes) (*.net *.split)
[19:00:21] *** Quits: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net) (*.net *.split)
[19:00:21] *** Quits: lhtseng (sid15322@id-15322.helmsley.irccloud.com) (*.net *.split)
[19:00:21] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[19:00:21] *** Quits: cncr04s (~cncr04s@afxr.net) (*.net *.split)
[19:00:22] *** Quits: kalven (~calvin@2a02:470:84:102::24) (*.net *.split)
[19:00:22] *** Quits: Karyon (~Karyon@user/karyon) (*.net *.split)
[19:00:22] *** Quits: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt) (*.net *.split)
[19:00:22] *** Quits: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird) (*.net *.split)
[19:00:22] *** Quits: DrMax_ (~DrMax@132.215.96.36) (*.net *.split)
[19:00:23] *** Quits: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi) (*.net *.split)
[19:00:23] *** Quits: xkoncek (xkoncek@lounge.fi.muni.cz) (*.net *.split)
[19:00:23] *** Quits: mgot (~mgot@vps-35cddd71.vps.ovh.net) (*.net *.split)
[19:00:23] *** Quits: Latexi95 (late@banhammer.fi) (*.net *.split)
[19:00:23] *** Quits: Friithian (gunqqer@friithian.dev) (*.net *.split)
[19:00:23] *** Quits: edr (~edr@user/edr) (*.net *.split)
[19:00:24] *** Quits: dzz007 (~dzz007@user/dzz007) (*.net *.split)
[19:00:24] *** Quits: talisein (~talisein@user/talisein) (*.net *.split)
[19:00:24] *** Quits: purplex (~purplex@user/purplex) (*.net *.split)
[19:00:24] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (*.net *.split)
[19:00:24] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (*.net *.split)
[19:00:24] *** Quits: djinni (~djinni@static.38.6.217.95.clients.your-server.de) (*.net *.split)
[19:00:24] *** Quits: noarb (~noarb@user/noarb) (*.net *.split)
[19:00:24] *** Quits: jancoow (~jancoow@user/jancoow) (*.net *.split)
[19:00:25] *** Quits: mitch0 (~mitch@84-236-61-122.pool.digikabel.hu) (*.net *.split)
[19:00:25] *** Quits: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu) (*.net *.split)
[19:00:25] *** Quits: eck (~root@user/eck) (*.net *.split)
[19:00:25] *** Quits: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi) (*.net *.split)
[19:00:25] *** Quits: FLHerne (flh@flherne.uk) (*.net *.split)
[19:00:25] *** Quits: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu) (*.net *.split)
[19:00:25] *** Quits: markand (~markand@markand.fr) (*.net *.split)
[19:00:25] *** Quits: geordi (~geordi@tinodidriksen.com) (*.net *.split)
[19:00:25] *** Quits: mcfrdy (~mcfrdy@user/mcfrdy) (*.net *.split)
[19:00:26] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (*.net *.split)
[19:00:26] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (*.net *.split)
[19:00:26] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (*.net *.split)
[19:00:26] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (*.net *.split)
[19:00:26] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (*.net *.split)
[19:00:26] *** Quits: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000) (*.net *.split)
[19:00:27] *** Quits: celphi (sid97751@user/celphi) (*.net *.split)
[19:00:27] *** Quits: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca) (*.net *.split)
[19:00:27] *** Quits: imMute (~immute@user/immute) (*.net *.split)
[19:00:27] *** Quits: xisop (~xisop@bnull.net) (*.net *.split)
[19:00:27] *** Quits: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi) (*.net *.split)
[19:00:27] *** Quits: tabakhase (tabakhase@user/tabakhase) (*.net *.split)
[19:00:27] *** Quits: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7) (*.net *.split)
[19:00:27] *** Quits: Svitkona (~Svitkona@157.245.38.135) (*.net *.split)
[19:00:27] *** Quits: adeliktas7 (~adeliktas@v15153.1blu.de) (*.net *.split)
[19:00:27] *** Quits: Flonk (~Flonk@vps-zap441517-1.zap-srv.com) (*.net *.split)
[19:00:27] *** Quits: kurfen (~kurfen@176.119.195.10) (*.net *.split)
[19:00:27] *** Quits: urdh (~urdh@user/urdh) (*.net *.split)
[19:00:27] *** Quits: Kebianizao (~Kebianiza@188.127.160.11) (*.net *.split)
[19:00:27] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (*.net *.split)
[19:00:27] *** Quits: elemongw (~elemongw@20.107.36.50) (*.net *.split)
[19:00:28] *** Quits: riksteri (d20812115c@2604:bf00:561:2000::1e6) (*.net *.split)
[19:00:28] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (*.net *.split)
[19:00:28] *** Quits: sonOfRa (sonOfRa@user/sonofra) (*.net *.split)
[19:00:28] *** Quits: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io) (*.net *.split)
[19:00:28] *** Quits: computerquip (sid423484@user/computerquip) (*.net *.split)
[19:00:28] *** Quits: orkim (~orkim@user/orkim) (*.net *.split)
[19:00:28] *** Quits: andreyv (~andrey@user/andreyv) (*.net *.split)
[19:00:28] *** Quits: Hobbyboy (Hobbyboy@hobbyboy.co.uk) (*.net *.split)
[19:00:28] *** Quits: shenghi (~shenghi@chrysocolla.mutablevoid.org) (*.net *.split)
[19:00:28] *** Quits: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (*.net *.split)
[19:00:28] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (*.net *.split)
[19:00:28] *** Quits: teepee (~teepee@openscad/teepee) (*.net *.split)
[19:00:28] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (*.net *.split)
[19:00:28] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (*.net *.split)
[19:01:13] *** Joins: TheSchaf (~TheSchaf@p54833485.dip0.t-ipconnect.de)
[19:01:13] *** Joins: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070)
[19:01:13] *** Joins: Furai (~Furai@furai.pl)
[19:01:13] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[19:01:13] *** Joins: skapata (~Skapata@user/skapata)
[19:01:13] *** Joins: pulse (~pulse@user/pulse)
[19:01:13] *** Joins: dextercd (~dexter@2a02-a450-f25d-1-76d4-35ff-fefe-34c.fixed6.kpn.net)
[19:01:13] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[19:01:13] *** Joins: Roughy (~mdaw45ns@user/roughy)
[19:01:13] *** Joins: jsbach (~jsbach@2a02:810a:1440:4cec:80e0:7916:1f5b:8b55)
[19:01:13] *** Joins: nshire (~nshire@user/nshire)
[19:01:13] *** Joins: shailangsa_ (~shailangs@host86-162-150-202.range86-162.btcentralplus.com)
[19:01:13] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[19:01:13] *** Joins: xkuru (~xkuru@user/xkuru)
[19:01:13] *** Joins: robod34 (Username@79.113.195.239)
[19:01:13] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[19:01:13] *** Joins: kaph (~kaph@net-2-38-107-19.cust.vodafonedsl.it)
[19:01:13] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[19:01:13] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[19:01:13] *** Joins: sonic1 (~sonic@user/sonic)
[19:01:13] *** Joins: unyu (~pyon@user/pyon)
[19:01:13] *** Joins: sprout (~quassel@2a02:a467:ccd6:1:48c8:920f:83dd:ae34)
[19:01:13] *** Joins: syrius (syrius@titan.stormtek.net)
[19:01:13] *** Joins: zoraj (~zoraj@209.126.81.159)
[19:01:13] *** Joins: zvijezda (~Foobar@c-98-203-220-45.hsd1.wa.comcast.net)
[19:01:13] *** molybdenum.libera.chat sets mode: +v npaperbot
[19:01:47] *** Joins: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd)
[19:01:49] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 240 seconds)
[19:01:57] *** Joins: Karyon (~Karyon@user/karyon)
[19:01:57] *** Joins: m_tadeu (~quassel@bl11-135-102.dsl.telepac.pt)
[19:01:57] *** Joins: DrinkyBird (~drinkybir@idlerpg/player/DrinkyBird)
[19:01:57] *** Joins: DrMax_ (~DrMax@132.215.96.36)
[19:01:57] *** Joins: Munnu (~timo@81-197-121-83.elisa-laajakaista.fi)
[19:01:57] *** Joins: xkoncek (xkoncek@lounge.fi.muni.cz)
[19:01:57] *** Joins: mgot (~mgot@vps-35cddd71.vps.ovh.net)
[19:01:57] *** Joins: Latexi95 (late@banhammer.fi)
[19:01:57] *** Joins: Friithian (gunqqer@friithian.dev)
[19:01:57] *** Joins: edr (~edr@user/edr)
[19:01:57] *** Joins: dzz007 (~dzz007@user/dzz007)
[19:01:57] *** Joins: talisein (~talisein@user/talisein)
[19:01:57] *** Joins: purplex (~purplex@user/purplex)
[19:02:02] *** Joins: deepy (deepy@user/deepy)
[19:02:02] *** Joins: tobs (~tobs@taboege.de)
[19:02:02] *** Joins: zinc_ (~zinc@163.ip-51-254-203.eu)
[19:02:02] *** Joins: manuels (~manuel@80.211.205.88)
[19:02:02] *** Joins: rdrg109 (~rdrg109@user/rdrg109)
[19:02:07] *** Joins: tbe_loki (~loki@loki.codes)
[19:02:07] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[19:02:07] *** Joins: dld (~davidlowr@2601:197:600:1210:31ff:a804:81e3:5196)
[19:02:07] *** Joins: yolo (~xxiao@li1120-73.members.linode.com)
[19:02:07] *** Joins: miklcct (~quassel@vps.miklcct.com)
[19:02:07] *** Joins: rmd (~rm@ec2-52-202-15-104.compute-1.amazonaws.com)
[19:02:07] *** Joins: DrMax (~DrMax@node-1w7jra94757fzqkincqfc6jpy.ipv6.telus.net)
[19:02:07] *** Joins: epony (epony@user/epony)
[19:02:07] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[19:02:07] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[19:02:07] *** Joins: unixpro1970 (~unixpro19@c-73-181-185-205.hsd1.wa.comcast.net)
[19:02:07] *** Joins: lhtseng (sid15322@id-15322.helmsley.irccloud.com)
[19:02:07] *** Joins: nolyc (~nolyc@tinodidriksen.com)
[19:02:07] *** Joins: cncr04s (~cncr04s@afxr.net)
[19:02:07] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[19:02:07] *** molybdenum.libera.chat sets mode: +v nolyc
[19:02:13] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[19:02:13] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[19:02:13] *** Joins: djinni (~djinni@static.38.6.217.95.clients.your-server.de)
[19:02:13] *** Joins: noarb (~noarb@user/noarb)
[19:02:13] *** Joins: jancoow (~jancoow@user/jancoow)
[19:02:13] *** Joins: mitch0 (~mitch@84-236-61-122.pool.digikabel.hu)
[19:02:13] *** Joins: baltazar (~baltazar@84-236-61-122.pool.digikabel.hu)
[19:02:13] *** Joins: eck (~root@user/eck)
[19:02:13] *** Joins: Adrinael (adrinael@dsl-hkibng21-54f8c5-237.dhcp.inet.fi)
[19:02:13] *** Joins: FLHerne (flh@flherne.uk)
[19:02:13] *** Joins: Khoyo_ (~khoyo@ns328946.ip-37-187-115.eu)
[19:02:13] *** Joins: markand (~markand@markand.fr)
[19:02:13] *** Joins: mcfrdy (~mcfrdy@user/mcfrdy)
[19:02:13] *** Joins: geordi (~geordi@tinodidriksen.com)
[19:02:13] *** Joins: Nixx (~quassel@bulbasaur.sjorsgielen.nl)
[19:02:13] *** molybdenum.libera.chat sets mode: +v geordi
[19:02:19] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[19:02:19] *** Joins: Guest8100 (~tinloaf@2a03:94e0:163c:57e:bc51:5c66:86e7:1)
[19:02:19] *** Joins: kapil- (~kapil@2a01:4f9:c010:c9c3::1)
[19:02:19] *** Joins: Terminus (~null@user/terminus)
[19:02:19] *** Joins: hfsoulz (~hfsoulz@user/hfsoulz)
[19:02:19] *** Joins: klys (~mdasoh@show.op8.us)
[19:02:19] *** Joins: blackbeard420 (blackbeard@2600:3c03::f03c:91ff:fe92:3f2a)
[19:02:19] *** Joins: Dragoon (~Dragoon@user/dragoon)
[19:02:19] *** Joins: tonitch (~tonitch@user/tonitch)
[19:02:19] *** Joins: m42e (~m42e@pb42.de)
[19:02:19] *** Joins: antto (~pewpew@imightbe.antonsavov.net)
[19:02:19] *** Joins: Cienisty (Cienisty@user/cienisty)
[19:02:19] *** Joins: bv (~bv@user/bv)
[19:02:19] *** Joins: d12fk (~heiko@exit0.net)
[19:02:19] *** Joins: Soliton (~Soliton@wesnoth/developer/soliton)
[19:02:26] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[19:02:26] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[19:02:26] *** Joins: RandomReader (~RandomRea@user/randomreader)
[19:02:26] *** Joins: greenbagels (~gb@user/greenbagels)
[19:02:26] *** Joins: kkd (~kkd@255.205.154.104.bc.googleusercontent.com)
[19:02:26] *** Joins: chris123123 (~bnc123@streuwerte.de)
[19:02:26] *** Joins: HeTo (henkka@beer.modeemi.fi)
[19:02:26] *** Joins: Sevalecan (~sevalecan@user/sevalecan)
[19:02:26] *** Joins: obiwahn (~heini@user/obiwahn)
[19:02:26] *** Joins: ethoxy (~caretaker@cx21.havox.ru)
[19:02:26] *** Joins: Spydar007 (~spydar007@user/spydar007)
[19:02:26] *** Joins: dblsaiko (~saiko@crispy.dblsaiko.net)
[19:02:31] *** Joins: jokoon (~jokoon@136.252.163.126)
[19:02:43] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:02:43] *** Joins: teepee (~teepee@openscad/teepee)
[19:02:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:02:43] *** Joins: Hello71 (~Hello71@wireguard/contributor/hello71)
[19:02:48] *** Joins: wielding (~wielding@user/wielding)
[19:02:48] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[19:02:48] *** Joins: Ameisen (~ameisen@digitalcarbide.com)
[19:02:48] *** Joins: barometz (~dvanb@i117058.upc-i.chello.nl)
[19:02:48] *** Joins: Artea (~Lufia@artea.com.pt)
[19:02:48] *** Joins: buhman (sid411355@user/buhman)
[19:02:48] *** Joins: Argorok (sid195487@id-195487.hampstead.irccloud.com)
[19:02:48] *** Joins: raekye (~raekye@creatifcubed.com)
[19:02:48] *** Joins: ullbeking_ (sid5364@id-5364.ilkley.irccloud.com)
[19:02:48] *** Joins: Moult (~sevenstro@sevenstrokes.net)
[19:02:48] *** Joins: taiyu (~taiyu@user/taiyu)
[19:02:48] *** Joins: scruffyfurn (scruffyfur@turbous.xshellz.com)
[19:02:48] *** Joins: InPhase (~InPhase@openscad/inphase)
[19:02:48] *** Joins: Ara (~Ara@user/ara)
[19:02:48] *** Joins: TingPing (sid2800@id-2800.helmsley.irccloud.com)
[19:02:48] *** Joins: Bodger1234_ (sid503511@id-503511.uxbridge.irccloud.com)
[19:02:48] *** Joins: renopt (~renopt@lisp.us.to)
[19:02:51] *** Quits: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d) (Ping timeout: 245 seconds)
[19:03:04] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[19:03:04] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[19:03:04] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[19:03:04] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[19:03:04] *** Joins: gothicserpent (~gothicser@2604:a880:4:1d0::176:6000)
[19:03:04] *** Joins: pieguy12- (~pieguy128@bras-base-mtrlpq5031w-grc-48-67-70-102-17.dsl.bell.ca)
[19:03:04] *** Joins: celphi (sid97751@user/celphi)
[19:03:04] *** Joins: imMute (~immute@user/immute)
[19:03:04] *** Joins: xisop (~xisop@bnull.net)
[19:03:04] *** Joins: jzsinatra (~jzsinatra@88-114-238-31.elisa-laajakaista.fi)
[19:03:04] *** Joins: tabakhase (tabakhase@user/tabakhase)
[19:03:04] *** Joins: jbalint_ (~jbalint@2600:6c44:117f:e98a:816a:9488:fb1:7b7)
[19:03:04] *** Joins: Svitkona (~Svitkona@157.245.38.135)
[19:03:04] *** Joins: adeliktas7 (~adeliktas@v15153.1blu.de)
[19:03:04] *** Joins: Flonk (~Flonk@vps-zap441517-1.zap-srv.com)
[19:03:04] *** Joins: kurfen (~kurfen@176.119.195.10)
[19:03:04] *** Joins: urdh (~urdh@user/urdh)
[19:03:04] *** Joins: Kebianizao (~Kebianiza@188.127.160.11)
[19:03:04] *** Joins: LordKalma (~LordKalma@server.ruilvo.com)
[19:03:04] *** Joins: elemongw (~elemongw@20.107.36.50)
[19:03:04] *** Joins: riksteri (d20812115c@2604:bf00:561:2000::1e6)
[19:03:04] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[19:03:04] *** Joins: sonOfRa (sonOfRa@user/sonofra)
[19:03:04] *** Joins: tm604 (~tom@perlsite.default.entitypark.uk0.bigv.io)
[19:03:04] *** Joins: computerquip (sid423484@user/computerquip)
[19:03:04] *** Joins: orkim (~orkim@user/orkim)
[19:03:04] *** Joins: andreyv (~andrey@user/andreyv)
[19:03:04] *** Joins: Hobbyboy (Hobbyboy@hobbyboy.co.uk)
[19:03:04] *** Joins: shenghi (~shenghi@chrysocolla.mutablevoid.org)
[19:03:07] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Max SendQ exceeded)
[19:03:08] *** Joins: seninha (~seninha@user/seninha)
[19:03:08] *** Joins: Praise- (~Fat@user/praise)
[19:03:08] *** Joins: useful_idiot (~useful_id@gateway/vpn/pia/usefulidiot/x-43226899)
[19:03:08] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[19:03:08] *** Joins: adeliktas (~adeliktas@i59F5FB64.versanet.de)
[19:03:08] *** Joins: woggle (~charles@c-va-26578d734e-1840-1.tingfiber.com)
[19:03:08] *** Joins: letto (~letto@188.25.113.229)
[19:03:08] *** Joins: rb (~augh@theguntretort.com)
[19:03:08] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[19:03:08] *** Joins: dextaa (~DV@user/dextaa)
[19:03:08] *** Joins: ravan (~ravan@user/ravan)
[19:03:08] *** Joins: rnsanchez (~rnsanchez@179.233.249.52)
[19:03:08] *** Joins: _flood (flooded@gateway/vpn/protonvpn/flood/x-43489060)
[19:03:08] *** Joins: simpl_e (~user@user/simpl-e/x-8589812)
[19:03:08] *** Joins: LangerJan (~jan@user/langerjan)
[19:03:08] *** Joins: Oxyd (~oxyd@user/oxyd)
[19:03:08] *** Joins: beanzilla (~beanzilla@user/beanzilla)
[19:03:08] *** Joins: lru (~lru@240.ip-51-79-50.net)
[19:03:08] *** Joins: Leo_V (~Leo@157.52.18.77)
[19:03:08] *** Joins: xcm___ (~xcm@user/xcm)
[19:03:08] *** Joins: Cyp (~cyp@213.237.85.9)
[19:03:08] *** Joins: c4017w__ (~c4017@209.52.68.8)
[19:03:08] *** Joins: jkl1337 (~jkl@user/jkl)
[19:03:08] *** Joins: jaakkos_ (~jaakkos@88-113-244-153.elisa-laajakaista.fi)
[19:03:08] *** Joins: malinus_ (~malinus@172.245.158.16)
[19:03:08] *** Joins: causative (~halberd@user/causative)
[19:03:08] *** Joins: rpav (~rpav@user/rpav)
[19:03:08] *** Joins: bdt (~bdt@155.51-174-24.customer.lyse.net)
[19:03:08] *** Joins: mathu (~matt@user/mathu)
[19:03:08] *** Joins: gnomesort (~gnomesort@user/gnomesort)
[19:03:08] *** Joins: ZeroKnight (zeroknight@dimensionzero.net)
[19:03:08] *** Joins: Dijky (~Dijky@user/dijky)
[19:03:16] *** Quits: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016) (Ping timeout: 268 seconds)
[19:03:19] *** Quits: ravan (~ravan@user/ravan) (Max SendQ exceeded)
[19:03:19] *** Joins: dostoyevsky2 (~sck@user/dostoyevsky2)
[19:03:23] *** Quits: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4) (Ping timeout: 250 seconds)
[19:03:25] *** Joins: xcm (~xcm@user/xcm)
[19:03:34] *** Quits: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76) (Ping timeout: 260 seconds)
[19:03:34] *** Quits: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21) (Ping timeout: 260 seconds)
[19:03:38] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Ping timeout: 252 seconds)
[19:03:38] *** Quits: ambasta (~ambasta@2001:470:69fc:105::1:3973) (Ping timeout: 252 seconds)
[19:03:41] *** Quits: wielding (~wielding@user/wielding) (Ping timeout: 245 seconds)
[19:03:52] *** Quits: scjg (~scjgmatri@2001:470:69fc:105::f5d6) (Ping timeout: 268 seconds)
[19:03:56] *** Joins: ravan (~ravan@user/ravan)
[19:04:28] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075) (Ping timeout: 268 seconds)
[19:05:40] *** Joins: CarloWood (~LdK13@212-127-230-18.cable.dynamic.v4.ziggo.nl)
[19:06:15] *** Quits: xcm___ (~xcm@user/xcm) (Ping timeout: 256 seconds)
[19:06:49] *** Quits: Oxyd (~oxyd@user/oxyd) (Ping timeout: 256 seconds)
[19:10:04] *** Joins: Oxyd (~oxyd@user/oxyd)
[19:13:31] <xkoncek> considering ditching boost asio in favor of libevent
[19:18:51] <Haohmaru> does libevent have cross-platform serial port stuff?
[19:19:56] *** Joins: avisiedo (~avisiedo@91.red-81-39-69.dynamicip.rima-tde.net)
[19:23:56] *** Quits: avisiedo (~avisiedo@91.red-81-39-69.dynamicip.rima-tde.net) ()
[19:25:14] *** Joins: jns (~x@comlink.adminking.com)
[19:25:14] *** Quits: jns (~x@comlink.adminking.com) (Changing host)
[19:25:14] *** Joins: jns (~x@user/jns)
[19:25:43] *** Joins: Burgundy (~yomon@5-12-10-45.residential.rdsnet.ro)
[19:30:28] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:32:55] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:37c4:e64:8064:e9e3)
[19:32:55] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:37c4:e64:8064:e9e3) (Changing host)
[19:32:55] *** Joins: RoKenn (~RoKenn@user/rokenn)
[19:37:46] *** Joins: aesth[m] (~aesthmatr@2001:470:69fc:105::1:57c1)
[19:37:47] *** Joins: shtumf[m] (~shtumfmat@2001:470:69fc:105::1:1b21)
[19:39:24] *** Joins: hnOsmium0001[m] (~hnosmium0@2001:470:69fc:105::15d4)
[19:40:49] *** Joins: pulse (~pulse@user/pulse)
[19:42:05] *** Quits: orkim (~orkim@user/orkim) (Read error: Connection reset by peer)
[19:42:25] *** Joins: orkim (~orkim@user/orkim)
[19:43:09] *** Joins: AmR (~AmREiSa@156.199.28.131)
[19:47:21] *** Quits: orkim (~orkim@user/orkim) (Read error: Connection reset by peer)
[19:49:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[19:52:31] *** Joins: aleko1[m] (~aleko1@2001:470:69fc:105::1:1016)
[20:00:23] *** Joins: scjg (~scjgmatri@2001:470:69fc:105::f5d6)
[20:00:27] *** Joins: ambasta (~ambasta@2001:470:69fc:105::1:3973)
[20:00:29] *** Joins: milia[m] (~mlliarmma@2001:470:69fc:105::1:4631)
[20:01:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[20:03:31] <jokoon> Anybody knows how to make the visual studio window border a bit larger? It's very difficult to grab it with the mouse.
[20:04:52] <Haohmaru> aww
[20:05:07] <Haohmaru> tell M$
[20:05:41] <Alipha> You're supposed to use the mouse scroll wheel, c'mon ;-)
[20:05:46] <AmR> I want learn how use hex editor any one know good tutorial for that ?
[20:06:20] <Haohmaru> a hex is used to view/edit binary files.. or is there more?
[20:06:26] <Haohmaru> * hex editor
[20:06:26] <jokoon> the scroll wheel? what?
[20:06:49] <LordKalma> Alipha misunderstood the border for the scrollbar
[20:06:50] <OnlineCop> My personal favorite has been UltraEdit for hex editing. But that was a long time ago that I've actually used it...
[20:07:11] <Alipha> Oh, heh
[20:07:20] <Haohmaru> i think i use wxHexEditor
[20:07:37] <Haohmaru> but i don't often fiddle with such things
[20:07:40] *** Joins: seninha (~seninha@user/seninha)
[20:07:49] *** Joins: epiktitos[m] (~epiktitos@2001:470:69fc:105::f76)
[20:07:49] <LordKalma> https://i.gyazo.com/958f05c3b57028786948aecf69ee716f.png // all of this is clickable area to drag the window
[20:08:18] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[20:08:52] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[20:09:08] <Haohmaru> is that a f*cking bell icon with a red circle and a white '1' in it?
[20:09:18] <LordKalma> it's an update notification
[20:09:22] <Led_Zeppelin2> Hello. If I would distribute a dynamic library. Is it necessary I also distrbute the header files?
[20:09:28] <LordKalma> Led_Zeppelin2, yes
[20:09:41] <Led_Zeppelin2> thanks mate.
[20:09:45] <LordKalma> (generally)
[20:10:13] <Haohmaru> only if you expect people to be able to #include stuff from that header
[20:10:22] <Led_Zeppelin2> trying to write up some best pratices.
[20:10:36] <Haohmaru> best practices: ask LordKalma on IRC
[20:10:37] <Led_Zeppelin2> yes, I expect people to use these libraries that way. They include it.
[20:10:50] <LordKalma> probably best to read a book or some docs on packaging and distribution
[20:11:10] <Led_Zeppelin2> we already release a dynamic library, so I will include the headers (.hpp and .cpp) files.
[20:11:18] <LordKalma> if you use cmake that's all very easy :p
[20:11:23] <LordKalma> .cpp files aren't headers
[20:11:26] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:6dc4:e68d:fe69:c13f) (Quit: Quit)
[20:11:28] <LordKalma> you only need the #include's and the dll
[20:11:29] <Haohmaru> .cpp isn't a header btw
[20:11:29] <Led_Zeppelin2> LordKalma, can you recommend a good resource for packaing and distributions?
[20:11:37] <LordKalma> no
[20:11:48] <Led_Zeppelin2> sorry, i didn't mean .cpp
[20:11:52] <LordKalma> depends on the build system :)
[20:11:55] <OnlineCop> The actual implementation (which goes in .cpp) don't need to be distributed with the library. Just the declarations, so their compilers know the function signatures.
[20:12:48] <LordKalma> since I'm a cmake user, Professional CMake covers pretty much everything
[20:12:51] <LordKalma> other than that, idk
[20:13:24] *** Joins: orkim (~orkim@user/orkim)
[20:14:37] <Led_Zeppelin2> when releasing the .so, is there anything particular I should be aware of? I want to make it very compatable for other users.
[20:14:44] <LordKalma> yes
[20:14:50] <LordKalma> you should learn how to version .so's
[20:15:16] <LordKalma> eg that libfoo.so.6
[20:15:19] <Led_Zeppelin2> damn. thats a good point.
[20:15:22] <ville> unfortunately you probably can't. at least for large values of "very"
[20:15:30] <Led_Zeppelin2> sounds subtle but I think its more complicated than it sounds.
[20:15:45] <LordKalma> Again, professional cmake tells you how to do it with cmake
[20:16:00] <Led_Zeppelin2> how do you do that without Cmake? I make sure with make you can do it.
[20:16:04] <LordKalma> versioning .so's is important if you're serious about shipping
[20:16:11] <LordKalma> pretty sure you can, I just don't know it :)
[20:16:15] <ville> the best you can do is to use some reasonable build system how you build your library and then select a linux distro or two for which you provide a package for
[20:16:32] <ville> prebuilt package that is
[20:17:08] <LordKalma> Led_Zeppelin2, also "make install", if that's what you're going for also, should put things in the right places
[20:17:20] <LordKalma> headers in /urs/include/<libfoo>/
[20:17:35] <LordKalma> AND PLEASE do include the  <libfoo>/ bit
[20:17:56] <LordKalma> and make users #include with #include "libfoo/something.hpp"
[20:18:01] <LordKalma> namespacing headers is good
[20:19:26] <Haohmaru> !fact
[20:19:26] <nolyc> Haohmaru: Declarations of other static data members shall not specify a brace-or-equal-initializer.
[20:20:42] *** Joins: popocka[m] (~popockama@2001:470:69fc:105::1:546e)
[20:20:45] *** Joins: wielding (~wielding@user/wielding)
[20:25:38] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[20:32:35] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[20:38:57] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[20:39:06] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[20:39:29] *** Quits: jokoon (~jokoon@136.252.163.126) (Remote host closed the connection)
[20:41:25] *** Joins: drakever[m] (~xldrake12@2001:470:69fc:105::1:5e2d)
[20:48:45] *** Joins: night_wulfe (~wulfe@cpe-174-103-156-213.cinci.res.rr.com)
[20:52:17] <ashafq> ville: thanks for the link to pdf
[20:52:56] <ville> ashafq: i do seem to recall there was a website with more of them explained graphically like that
[20:53:29] *** Quits: rond_42 (~rond_@2a01:115f:943:5e00:d97e:b793:ae8f:1ddd) (Quit: Client closed)
[20:53:30] <ashafq> ville: I got 4 point FFT down to like 11 instructions https://godbolt.org/z/GoTTr56Gn
[20:53:52] <ashafq> probably could be faster, but idk :(
[20:54:50] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[20:55:23] <ville> well just make sure you got a nice boost for going wide over the regular implementation
[20:55:38] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) ()
[20:55:52] <LordKalma> thank you C++ for telling me what's the name of "reduce" :D
[20:56:31] <ashafq> ville: The idea is to do a 16 point FFT by 4x4 composition
[20:56:46] <ashafq> and then do a 256 point fft with 16x16
[20:57:33] <LordKalma> ashafq, https://github.com/DEWETRON/otfft
[20:57:40] <LordKalma> this talks about the Stockham's algorithm
[20:57:46] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[20:57:47] <LordKalma> might be soemthing you want to read about?
[20:57:54] <LordKalma> no idea if that algo is good or not
[20:57:57] <LordKalma> just making you aware of it
[20:58:53] <ashafq> LordKalma: I tend to use other peoples FFT in production. I write FFTs to "relax"
[20:59:18] <LordKalma> yes, that's why I'm not explicitly not recomending the library
[20:59:20] <LordKalma> only the algorithm
[20:59:21] <kalven> I mean who doesn't like to unwind with godbolt?
[20:59:24] <LordKalma> for a reading :)
[20:59:32] <LordKalma> !grab kalven
[20:59:33] <nolyc> LordKalma: The operation succeeded.
[21:00:32] <ville> kalven: you can get rmsbolt for emacs in case i've forgot to point it out
[21:01:17] <ashafq> LordKalma: I was thinking of using "4 step" algorithm for FFT
[21:01:44] <ashafq> since 256 maps nicely to 16*4*4
[21:02:12] <kalven> ville: ah, neat
[21:02:16] <ashafq> 1024 maps nicely to 32*32
[21:02:35] <ville> also the author sounded receptive to implementing hyperlinks to instructions' documentation, so you can get latencies and stuff
[21:03:14] <ashafq> LordKalma: But for a typical audio codec processing, the typical size is 512 real samples --> 256 complex samples
[21:03:25] *** Quits: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc) (Ping timeout: 240 seconds)
[21:04:42] <ashafq> LordKalma: https://www.davidhbailey.com/dhbpapers/fftq.pdf this is the paper
[21:06:05] <ashafq> LordKalma: Imagine having access to a Cray Y-MP in 1989
[21:06:49] <ashafq> ville: Thanks again for the link
[21:08:35] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[21:13:34] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075)
[21:18:17] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075) (Ping timeout: 240 seconds)
[21:20:43] *** Joins: pulse_ (~pulse@user/pulse)
[21:23:53] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 252 seconds)
[21:26:21] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[21:28:56] *** Quits: RoKenn (~RoKenn@user/rokenn) (Remote host closed the connection)
[21:29:17] *** Joins: RoKenn (~RoKenn@2001:a61:3432:ab01:37c4:e64:8064:e9e3)
[21:29:17] *** Quits: RoKenn (~RoKenn@2001:a61:3432:ab01:37c4:e64:8064:e9e3) (Changing host)
[21:29:17] *** Joins: RoKenn (~RoKenn@user/rokenn)
[21:34:39] *** Joins: Inline (~Inline@aftr-37-201-240-204.unity-media.net)
[21:38:39] *** Joins: Figworm (~inoor@user/figworm)
[21:39:39] *** Quits: CodeMouse92 (~CodeMouse@user/codemouse92) (Remote host closed the connection)
[21:40:33] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:40:43] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:40:44] *** ChanServ sets mode: +v npaperbot
[21:49:29] *** Quits: magla (~gelignite@55d4ca9b.access.ecotel.net) (Quit: Stay safe!)
[21:49:57] *** pulse_ is now known as pulse
[21:53:30] <Led_Zeppelin2> what did people use before vcpkg?
[21:55:12] *** Joins: blyat-73 (~hjgkjhgkj@46.235.96.249)
[21:55:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[21:56:24] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[21:57:58] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[21:59:31] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075)
[22:00:23] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57)
[22:00:54] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:01:31] <rond_> I have a function that returns const reference. However, I'd like to bypass this constness. how to do it? is there any way to do it?
[22:01:51] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[22:02:46] <rond_> const_cast?
[22:03:37] *** Quits: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net) (Ping timeout: 256 seconds)
[22:04:54] *** Joins: ashafq (~ashafq@pool-96-237-238-252.bstnma.fios.verizon.net)
[22:06:23] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Ping timeout: 268 seconds)
[22:08:06] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[22:09:40] <Alipha> rond_: that's generally a bad idea, but yes, const_cast. If the object that the reference refers to is actually const, then that's Undefined Behavior though
[22:10:29] *** Quits: rpav (~rpav@user/rpav) (Quit: rpav)
[22:10:30] <rond_> wdym by "is actually const"?
[22:11:02] *** Joins: winning-luser (~wl@2601:8c1:80:70d0::414b)
[22:12:11] <Alipha> int x = 3; const int &cr = x; int &r = const_cast<int&>(cr); r = 5; // this is okay because `r = 5` modifies x and x is not const
[22:12:35] <Alipha> const int x = 3; const int &cr = x; int &r = const_cast<int&>(cr); r = 5; // this is NOT okay because `r = 5` modifies x and x is const
[22:12:36] <rond_> like, compiler might do some optimizations and using const_cast and modifiiying an underyling object would result in incorrectness of such optimizations, which might break the code?
[22:14:03] <Alipha> rond_: yes, the compiler may do optimizations, assuming the object's value cannot change. Or the const object may be stored in read-only memory, in which modifying it will cause a access violation
[22:14:32] <rond_> const FooStruct& foo() {return fooStruct;} ... const_cast<FooStruct&>(foo()).NonConstMethod()    <- does it smell?
[22:14:36] <rond_> or is it okay?
[22:15:18] <rond_> (it's for a test case, so I might abandon a good practice here and there, so don't worry about it this time)
[22:16:57] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[22:19:32] <Alipha> rond_: it's only okay if fooStruct is not const
[22:20:19] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[22:20:21] <Alipha> And yes, it smells. You shouldn't have to use const_cast, unless you're working with const-incorrect code that you can't fix
[22:21:24] <Alipha> Or it's okay if NonConstMethod doesn't actually modify fooStruct (in which case, why is NonConstMethod non-const?)
[22:22:19] <Alipha> And by "okay", I mean, doesn't cause UB. It still smells, heh
[22:27:34] <Alipha> rond_: https://wandbox.org/permlink/gpljoQmpSNcJQZZ6
[22:30:09] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[22:32:08] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[22:32:37] <rond_> Alipha  that's a very good example, thank you!
[22:35:25] *** Quits: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57) (Quit: Client closed)
[22:35:59] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[22:36:04] <Alipha> too bad he left before my other example: https://wandbox.org/permlink/k0HhNKOjDKW7KuDD
[22:36:29] <Alipha> and apparently i can't spell "print"
[22:38:37] *** Quits: jehelset (~jeh@2001:4644:4144:0:e2d4:e8ff:fedf:f070) (Ping timeout: 240 seconds)
[22:42:51] *** Joins: Inline__ (~Inline@aftr-37-201-240-204.unity-media.net)
[22:42:55] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Remote host closed the connection)
[22:43:06] *** Joins: namo (~nomo@95.87.208.95)
[22:43:25] *** Quits: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de) (Ping timeout: 256 seconds)
[22:45:07] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[22:54:05] *** Joins: Rayke (rayke@user/rayke)
[22:54:27] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[22:54:43] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Remote host closed the connection)
[22:54:46] *** Joins: _Hokedli_ (~lasliedv@gateway/tor-sasl/hokedli)
[22:59:29] *** Joins: Fairy (~Fairy@2001:464a:4992:0:bdfd:8ef1:211a:77dc)
[23:01:06] *** Quits: letto (~letto@188.25.113.229) (Quit: Konversation terminated!)
[23:07:33] *** Joins: skapate (~Skapata@2804:14c:87b0:a6f9:4c57:7bc8:1484:fbaf)
[23:07:33] *** Quits: skapate (~Skapata@2804:14c:87b0:a6f9:4c57:7bc8:1484:fbaf) (Changing host)
[23:07:33] *** Joins: skapate (~Skapata@user/skapata)
[23:08:13] *** Quits: skapata (~Skapata@user/skapata) (Ping timeout: 240 seconds)
[23:11:14] *** Joins: Jupp_S (~quassel@ip-88-153-154-129.hsi04.unitymediagroup.de)
[23:12:01] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075) (Ping timeout: 245 seconds)
[23:21:05] *** Quits: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) (Quit: Leaving.)
[23:23:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[23:24:21] *** Joins: magla (~gelignite@55d4ca9b.access.ecotel.net)
[23:25:50] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[23:29:01] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:acd5:fce0:a19c:de74) (Ping timeout: 268 seconds)
[23:29:03] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[23:29:36] *** Quits: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net) (Quit: BE VIGILANT.)
[23:31:07] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:3816:cf49:9a39:c075)
[23:32:08] *** Joins: mackal (~mackal@pool-96-237-249-63.bstnma.fios.verizon.net)
[23:40:40] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[23:43:51] *** Quits: LordKalma (~LordKalma@server.ruilvo.com) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[23:45:35] *** Quits: _Hokedli_ (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[23:47:05] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Remote host closed the connection)
[23:47:48] *** Joins: rond_ (~rond_@2a01:115f:943:5e00:b66:5768:df7:4b57)
[23:48:14] <rond_> In a FileName.cpp file, should #include "FileName.hpp" be the first or the last include?
[23:48:32] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[23:48:41] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[23:50:09] <OnlineCop> rond_ I usually put the `#include "FileWithSameName.hpp"` as the first include, then everything else after it.
[23:50:21] <ville> rond_: it shouldn't matter. you should aim to make your includes order-independent
[23:50:59] <ville> that in mind. flip a coin
[23:51:19] <rond_> ville I know. asking about good practices
[23:51:31] <ville> there is no good practice beyond that
[23:51:39] <ville> the rest is just nonsense that doesn't matter
[23:51:42] <Hello71> but consistently ordering includes by increasing scope improves the odds of proper include cleanliness
[23:51:58] <Hello71> s/improves the odds of/makes it easier to ensure/
[23:52:33] <rond_> Hello71 so #include <vector> before or after #include "Filenamep.hpp"?
[23:52:34] <OnlineCop> I think that including FileWithSameName at the top of each file makes for pretty good consistency in large projects. If that's not the first (non-copyright/non-comment) line, there usually needs to be a compelling justification.
[23:53:17] <OnlineCop> I'd put `#include "Filename.hpp"` before `#include "other_files.hpp"` which would come before `#include <...anything...>`.
[23:53:19] <Hello71> if you put #include <vector> after, then you cannot accidentally use std::vector in hpp without including it
[23:53:49] <Hello71> but some would argue that iwyu and similar tools obviate this need
[23:53:50] <rond_> OnlineCop okay. I've been doing just the opposite
[23:53:56] <rond_> thanks!
[23:54:04] <Alipha> rond_: same name first, followed by headers in the same project, followed by third party headers, followed by std headers. Order alphabetically within each group
[23:54:34] <rond_> cool, thanks!
[23:54:37] <OnlineCop> If the .hpp uses vectors, it will usually `#include <vector>` itself, so it's redundant for me. But if it doesn't, then I want to be sure that my file.hpp will compile _just fine_ if I don't first include system files (like <vector>, <string>, etc.).
[23:54:54] <OnlineCop> ^ I agree with Alipha on this.
[23:55:36] <Alipha> And a file shouldn't make any assumptions about what other included files include. So I would include <vector> in both the hpp and cpp
[23:55:48] *** Joins: gehn (~gehn@user/gehn)
[23:56:15] *** Joins: chozorho (~chozorho@2601:146:300:c30::b973)
[23:56:25] <rond_> interesting
[23:57:32] <BurumaSerafuku> I would only include <vector> in a cpp file if I have vector declarations there
[23:57:51] <OnlineCop> What if your header uses vectors?
[23:58:03] <BurumaSerafuku> then I include <vector> in the header file
[23:58:27] <OnlineCop> So you include <vector> in both header and source files? I see no problem with that.
[23:58:42] <BurumaSerafuku> me too. but only when there are declarations
[23:59:09] <BurumaSerafuku> header file declares vector in some data members and source file declares local vector variables, for example
[23:59:37] *** Quits: winning-luser (~wl@2601:8c1:80:70d0::414b) (Quit: Leaving)
