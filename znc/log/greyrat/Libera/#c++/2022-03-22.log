[01:05:49] *** Quits: wyre (~wyre@user/wyre) (Quit: ZNC 1.8.2 - https://znc.in)
[01:06:04] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[01:06:06] *** Joins: sobkas (~sobkas@95.175.17.217)
[01:07:39] *** Joins: wyre (~wyre@user/wyre)
[01:08:08] *** Joins: KAHR-Alpha (~Alpha@2a01cb0d024a6600d55f0fac2be013ce.ipv6.abo.wanadoo.fr)
[01:08:09] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[01:08:37] *** Quits: foul_owl (~kerry@23.82.193.87) (Ping timeout: 240 seconds)
[01:10:06] *** Joins: evilpyro (~evilpyro@user/evilpyro)
[01:12:01] *** Quits: newpy (~newpy@2601:280:4381:1390:c31c:7c32:bc2a:a52e) (Ping timeout: 245 seconds)
[01:14:22] *** Quits: orbisvicis (~orbisvici@user/orbisvicis) (Quit: Leaving)
[01:22:46] *** Joins: foul_owl (~kerry@174-21-69-110.tukw.qwest.net)
[01:23:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[01:25:37] *** Joins: Intelo (~Intelo@user/Intelo)
[01:25:45] <Intelo> hi, I asked in c too.
[01:25:46] <Intelo> how to getElementById in wasm or make an even listner etc? No need for JS then. right?
[01:26:01] <hagabaka> Hi, I'm getting an error when compiling a project with the code `std::abs<float>()`, but apparently it works for most other people. Anyone know why? https://www.youtube.com/watch?v=Hlp8XD0R5qo
[01:26:02] <TinoDidriksen> That's entirely off topic - ask a JS channel.
[01:26:13] <TinoDidriksen> Maybe there is a #wasm ?
[01:26:16] <Intelo> they don't know
[01:26:37] <Intelo> they dont' exist (kind of)
[01:26:37] <hagabaka> oops
[01:26:45] <hagabaka> https://wandbox.org/permlink/Ckdc7FkXz1YIhWF5
[01:28:38] <Raziel> hagabaka, what makes you think abs is templated?
[01:28:53] <Raziel> I think it's just overloaded, std::abs(0.1) without the <float> works fine
[01:29:25] *** Parts: Intelo (~Intelo@user/Intelo) ()
[01:29:48] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[01:30:29] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:31:02] <hagabaka> It's not my code, but from a project. But that line has been there unchanged for years, and it used to compile for me, and apparently still does for other people but not me https://github.com/anura-engine/anura/blob/trunk/src/sound.cpp#L1232
[01:31:24] *** Quits: darkbit (~db@152.32.100.99) (Ping timeout: 240 seconds)
[01:31:27] <TinoDidriksen> It shouldn't compile. abs() is not a template.
[01:31:38] <hagabaka> in <complex> there is a templated std::abs, but this file includes <cmath> not <complex>
[01:32:10] <anyone> it's a limited template, though
[01:32:11] <TinoDidriksen> If you want to pick the float version, static_cast<float>() the argument.
[01:32:13] *** Joins: Tokamak (~Tokamak@107.116.82.97)
[01:32:25] <hagabaka> OK
[01:32:36] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Remote host closed the connection)
[01:32:42] <Raziel> maybe one of the many other includes there have a templated abs
[01:32:51] <Raziel> hard to tell v:
[01:32:52] <anyone> if anything, std::abs<float>(4) could cause conversion of 4 to complex<float>, which may not be what you want
[01:33:10] *** Joins: HvszrStykp (~X@81.171.62.87)
[01:33:22] *** Quits: Hokedli (~lasliedv@gateway/tor-sasl/hokedli) (Quit: Konversation terminated!)
[01:34:23] *** Quits: ___nick___ (~quassel@cpc68286-cdif17-2-0-cust533.5-1.cable.virginm.net) (Ping timeout: 252 seconds)
[01:34:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[01:35:02] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[01:36:42] <hagabaka> Is there a website that compiles C++ code using different versions of compilers? I thought there was one
[01:36:54] <TinoDidriksen> hagabaka, https://gcc.godbolt.org/
[01:38:55] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[01:38:59] <hagabaka> thanks
[01:50:05] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[01:51:37] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[01:51:38] *** Joins: kleiner (uid540109@id-540109.uxbridge.irccloud.com)
[01:55:24] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:6469:70ea:b962:2f9) (Remote host closed the connection)
[01:55:47] *** Joins: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd)
[01:57:02] *** Quits: magla (~gelignite@d5363125.access.ecotel.net) (Quit: Stay safe!)
[01:59:32] *** Joins: seninha (~seninha@user/seninha)
[02:02:13] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[02:04:15] *** Quits: rendar (~rendar@user/rendar) (Quit: Leaving)
[02:09:24] *** Joins: Zogatribe (Zogatribe@user/zogatribe)
[02:10:33] *** Joins: newpy (~newpy@2601:280:4381:1390:2ddc:61c2:abe8:a959)
[02:12:45] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[02:12:49] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[02:15:02] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[02:15:18] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[02:16:34] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:17:11] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[02:18:21] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:18:51] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Client Quit)
[02:19:17] *** Joins: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[02:23:02] *** Joins: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[02:28:37] *** Quits: trumae (~trumae@2804:431:c7c1:c8d4:3473:e0f9:d8:6df3) (Ping timeout: 240 seconds)
[02:29:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[02:29:25] *** Joins: trumae (~trumae@2804:18:8ba:e036:1:0:9c70:3a6e)
[02:32:02] *** Quits: LuckyFire (~LuckyFire@79.125.173.139) (Ping timeout: 260 seconds)
[02:32:45] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[02:43:08] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:44:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[02:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[02:44:23] *** ChanServ sets mode: +v npaperbot
[02:50:57] *** Joins: Atque (~Atque@user/atque)
[02:51:34] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[02:53:02] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[02:54:09] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 252 seconds)
[02:54:50] *** Joins: wakeup (~wakeup@user/wakeup)
[02:55:25] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[02:55:51] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.4.1)
[02:56:04] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[03:05:15] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[03:05:17] *** Joins: Enitin (~Enitin@82.180.145.230)
[03:05:38] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[03:07:24] *** Quits: Tokamak (~Tokamak@107.116.82.97) (Ping timeout: 240 seconds)
[03:10:37] *** Joins: Tokamak (~Tokamak@172.58.188.41)
[03:13:36] *** Quits: proller (~p@2a02:6b8:b081:20::1:21) (Ping timeout: 268 seconds)
[03:15:02] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[03:16:03] *** Joins: moose (~moose@user/moose)
[03:17:59] *** Joins: badone (~badone@209.132.189.152)
[03:18:31] *** Joins: ferdna (~ferdna@user/ferdna)
[03:19:34] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[03:19:37] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Remote host closed the connection)
[03:21:08] *** Joins: Xardas (~Xardas@149.233.51.127)
[03:21:45] <Xardas>  int *i[10];
[03:21:45] <Xardas>  int *(*p)[10] = &i; // why simply not i instead of &i
[03:21:52] <Xardas> isn't &i the same as i ?
[03:22:33] <Xardas> &i is simply &i[0]
[03:22:37] <Xardas> i is also &i[0]
[03:22:39] <anyone> no
[03:22:57] <anyone> { cout << TYPE(i) << " " << TYPE(&i); } int *i[10];
[03:22:58] <geordi> lvalue int* [10] prvalue int* (*)[10]
[03:23:26] <Xardas> I thought when we use the name of an array it gets automatically converted to a pointer to it's first element
[03:24:14] <anyone> only in limited circumstances, namely conversion.
[03:24:36] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:24:45] <Xardas> { cout << i <<" " &i; }
[03:24:45] <geordi> error: 'i' was not declared in this scope
[03:24:51] <Xardas> they have the same address too !
[03:25:04] <Xardas> That's what confused me
[03:26:16] <anyone> why wouldn't it. struct S { int a; }; also has  (char*)&S == (char *)&S->a , but that does not make S the same as S.a
[03:27:51] <Xardas> Well yes
[03:28:16] <Xardas> an array gets converted to a pointer when it's used a value
[03:28:30] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:28:36] <Xardas> I read this on stackoverflow
[03:28:48] <Xardas> I'm using it here as a value
[03:29:48] <ncwbqcfe> arrays decay to pointers
[03:29:59] <ncwbqcfe> but not arrays in pointer to arrays.
[03:32:38] *** Quits: pizdets_ (~pizdets@183.182.114.133) (Ping timeout: 252 seconds)
[03:33:32] <ncwbqcfe> there's a proper language theoretic term for this, it should be related to https://en.wikipedia.org/wiki/Covariance_and_contravariance_%28computer_science%29
[03:33:49] <anyone> std::decay
[03:33:58] *** Joins: pizdets (~pizdets@183.182.115.102)
[03:34:32] <anyone> ncwbqcfe: the article describes implicit-conversion-to-base - since array have no base, it does not strictly apply
[03:35:03] *** Joins: proller (~p@80.240.216.69)
[03:36:21] *** NyB_ is now known as NyB
[03:36:53] <anyone> converting Cat c[10]; to Animal *a also has the problem that a[1] does not necessarily specify the 2nd cat, but is UB because it's possible for sizeof(Animal)!=sizeof(Cat).
[03:37:04] <Alipha> Xardas: i is &i[0]. &i is NOT &i[0] (they have different types)
[03:37:19] *** Quits: ckdCreations (~ckdCreati@147.55.133.139) (Read error: Connection reset by peer)
[03:37:25] <Xardas> oh yes sorry
[03:37:39] <Xardas> &i[0] gives an int
[03:37:39] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[03:37:50] <Alipha> &i[0] is an int*
[03:37:57] <Alipha> wait
[03:37:59] <Xardas> yes
[03:38:03] <Xardas> I forgot
[03:38:09] <Alipha> i[0] is an int*. so &i[0] is an int**
[03:38:09] <Xardas> since it's an array of pointers
[03:38:31] <Alipha> `int **p = i;` would work
[03:39:25] <Xardas> is int **p and int *(*p)[10] not the same ?
[03:39:47] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[03:39:59] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[03:40:48] <Alipha> no
[03:41:32] <Xardas> int *(*p)[10] is a pointer to an array of 10 pointers to int
[03:41:47] <Xardas> the array of 10 pointers to int decay to a pointer
[03:41:51] <ncwbqcfe> look this:
[03:41:54] <ncwbqcfe> {int *i[10]; [](int *(*p)[10]){}(i);}
[03:41:54] <geordi> error: no match for call to '(main(int, char**)::<lambda(int* (*)[10])>) (int* [10])'
[03:41:56] <Xardas> that's my reasoning
[03:41:59] <ncwbqcfe> now this
[03:41:59] *** Joins: N4buc0 (~N4buc0@2804:7f4:348b:29b4:405b:8c0c:8ef5:14ae)
[03:42:01] <Xardas> was*
[03:42:04] <ncwbqcfe> {int *i[10]; [](int *p[10]){}(i);}
[03:42:05] <geordi>  
[03:42:05] <Alipha> Xardas: only top-level arrays decay to pointers
[03:42:19] <ncwbqcfe> and I gave the example
[03:42:43] <ncwbqcfe> the latter decays, the former doesn't
[03:43:15] <ncwbqcfe> why? cuz it decays on top, not when in the middle of the type.
[03:43:53] <Alipha> with `int **p;` then p[0][0] gives an int. with `int *(*p)[10];` then p[0][0][0] gives an int
[03:44:32] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[03:45:41] *** Quits: dansan (~daniel@75.81.148.51) (Ping timeout: 256 seconds)
[03:48:57] <ncwbqcfe> wops, indeed my "non-decaying" was not right.
[03:49:03] <ncwbqcfe> {int *i[10]; [](int *p[10]){}(&i);}
[03:49:04] <geordi> error: no match for call to '(main(int, char**)::<lambda(int**)>) (int* (*)[10])'
[03:49:08] <ncwbqcfe> ops
[03:49:16] <ncwbqcfe> {int *i[10]; [](int *(*p)[10]){}(&i);}
[03:49:17] <geordi>  
[03:49:27] <ncwbqcfe> it works, but there's no decaying
[03:50:29] <ncwbqcfe> as Alipha said, 3 indirections there, as opposed to two indirections in the other working example.
[03:51:01] <ncwbqcfe> the one with 2 has a decaying though, the one with 3 has not.
[03:51:50] *** Quits: PlasmaHH (~PlasamaHH@user/plasmahh) (Ping timeout: 268 seconds)
[03:52:05] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:52:13] <Xardas> What is meant by top-level arrays ?
[03:54:16] *** Joins: arch_angel (~arch-ange@user/arch-angel)
[03:54:36] <Zogatribe> perhaps you mean low-level or C-style?
[03:54:39] <Alipha> if you say, "foo is a [something]", then "something" is the "top-level type". so you said `int *(*p)[10] is a pointer to an array of 10 pointers to int`. so p is a pointer. the top-level type qualifier is a pointer.
[03:55:13] <Alipha> `int *i[10]` is an array of pointers to int. so i is an array. the top-level qualifier is an array
[03:55:46] <Zogatribe> just use std::array
[03:55:57] *** Quits: Tokamak (~Tokamak@172.58.188.41) (Ping timeout: 240 seconds)
[03:56:06] <Xardas> Well I truly want to understand pointers
[03:56:11] <Xardas> that's why Zogatribe
[03:56:23] <Alipha> `int x[10][5]` decays to `int(*)[5]` but not to `int**` because only the top-level array decays
[03:57:00] <Xardas> Yes sure
[03:57:49] *** Joins: Tokamak (~Tokamak@107.116.82.179)
[03:58:09] <Xardas> to in my case I have a pointer to an int* i[10] so i need to assign a pointer to the whole array
[03:58:14] <Alipha> ... and `int ***p;` and `int *(*p)[10];` are not the same because if you look at p + 1, the former will adjust the pointer sizeof(int**) bytes (8 bytes, on a 64-bit machine) while the latter will adjust the pointer by sizeof(int*[10]) bytes (80 bytes, on a 64-bit machine)
[03:58:14] <Xardas> so*
[03:58:32] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 240 seconds)
[03:59:16] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[04:00:45] <Xardas> So that's why we need to take &i instead of i
[04:01:18] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[04:01:30] *** Joins: Xardas (~Xardas@149.233.51.127)
[04:01:58] <Xardas> Alipha I do get what you mean
[04:02:10] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:02:11] *** Joins: LBV_User (~leonardo@45.183.248.98)
[04:02:19] <Xardas> It's because each time we increment by 10*8
[04:02:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:02:32] <Xardas> for the latter example
[04:02:58] <Xardas> But what's really confusing why does i and &i have the same address
[04:06:06] <Alipha> int x[] = {5, 2, 10};  // &x is the address of `{5, 2, 10}` and x (which is the same as &x[0]) is the address of the 5.
[04:06:56] *** Quits: sobkas (~sobkas@95.175.17.217) (Quit: sobkas)
[04:07:13] <Alipha> 5 is at the start of the array, so it naturally has the same starting address as the whole array
[04:07:34] <Alipha> struct foo { int b; int c; }; foo f{8, 9}; // &f == &f.b
[04:07:50] <Alipha> (but with different types)
[04:08:11] <Alipha> (&f is a foo* and &f.b is an int*, but point to the same address)
[04:08:21] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:10:17] *** Joins: TastyWiener95 (~uhhh3@user/tastywiener95)
[04:10:57] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[04:11:15] *** Quits: TastyWiener95 (~uhhh3@user/tastywiener95) (Client Quit)
[04:12:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:13:24] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 240 seconds)
[04:14:06] <Xardas> That's exactly what i was looking to for
[04:14:27] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 250 seconds)
[04:14:27] <Xardas> the whole confusing was because of me thinking &f is same as &f[0]
[04:14:46] <Xardas> That's for the detailed explanation
[04:14:51] <Xardas> I really needed this
[04:15:07] <Xardas> You know what's funny ? I used to know this:D   but I forgot it !
[04:15:43] <Xardas> Alipha thx dude I appreciate your help.
[04:15:53] <Alipha> No problem
[04:16:27] <Xardas> confusion* Thanks*
[04:19:20] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[04:19:32] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[04:19:48] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d)
[04:19:48] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:964:33b9:5b34:486d) (Changing host)
[04:19:48] *** Joins: skapata (~Skapata@user/skapata)
[04:20:32] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 240 seconds)
[04:20:54] *** Joins: proller (~p@2a02:6b8:b081:b407::1:10)
[04:21:15] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[04:21:15] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[04:21:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[04:21:49] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[04:23:15] <Xardas>  cout << typeid(&i[0]).name() <<space << typeid(&i).name();
[04:23:26] <Xardas> PPi     PA10_Pi
[04:25:30] *** Quits: Fozzworth (~Fozzworth@user/fozzworth) (Read error: Connection reset by peer)
[04:25:41] *** Quits: evangeline (~Eleanor@178.79.105.181) (Ping timeout: 256 seconds)
[04:27:46] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Read error: Connection reset by peer)
[04:28:45] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[04:29:19] *** Quits: Zogatribe (Zogatribe@user/zogatribe) (Read error: Connection reset by peer)
[04:29:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[04:33:50] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Ping timeout: 260 seconds)
[04:34:29] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[04:35:01] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[04:36:30] *** Joins: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net)
[04:37:47] *** Joins: chenqisu1 (~chenqisu1@183.217.201.47)
[04:38:51] *** Joins: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96)
[04:38:57] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Ping timeout: 256 seconds)
[04:42:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[04:44:24] *** Quits: ivii (~ivan@user/ivii) (Remote host closed the connection)
[04:47:36] *** Quits: Brainium (~brainium@user/brainium) (Quit: Konversation terminated!)
[04:49:35] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[04:51:26] *** Quits: N4buc0 (~N4buc0@2804:7f4:348b:29b4:405b:8c0c:8ef5:14ae) (Remote host closed the connection)
[04:51:39] *** Joins: N4buc0 (~N4buc0@201.22.40.19.dynamic.adsl.gvt.net.br)
[05:03:37] *** Quits: foul_owl (~kerry@174-21-69-110.tukw.qwest.net) (Ping timeout: 240 seconds)
[05:07:08] *** Quits: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[05:09:01] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[05:09:56] *** Joins: kaiseisei (~Thunderbi@user/kaiseisei)
[05:11:07] *** Quits: vicfred (~vicfred@user/vicfred) (Quit: Leaving)
[05:11:46] *** Joins: Coldberg (~C-Man@78.31.190.82)
[05:11:56] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:15:17] *** Quits: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de) (Ping timeout: 240 seconds)
[05:16:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:17:53] *** Joins: foul_owl (~kerry@23.82.193.88)
[05:23:51] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[05:24:34] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[05:25:38] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:25:59] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:26:22] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:26:43] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:26:46] *** Joins: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net)
[05:27:07] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:27:30] *** Quits: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br) (Max SendQ exceeded)
[05:27:53] *** Joins: Linux77 (~LinuMage@189-48-140-124.user3p.veloxzone.com.br)
[05:30:21] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 252 seconds)
[05:40:09] *** Quits: bebyx (~Thunderbi@user/bebyx) (Ping timeout: 256 seconds)
[05:40:13] *** Quits: cosimone (~user@93-44-187-176.ip98.fastwebnet.it) (Quit: ERC (IRC client for Emacs 27.1))
[05:41:01] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 240 seconds)
[05:44:35] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308) (Quit: Textual IRC Client: www.textualapp.com)
[05:45:06] *** Joins: kaichiuchi (uid547644@id-547644.uxbridge.irccloud.com)
[05:49:58] *** Quits: kaichiuchi (uid547644@id-547644.uxbridge.irccloud.com) (Changing host)
[05:49:58] *** Joins: kaichiuchi (uid547644@user/kaichiuchi)
[05:52:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[05:52:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[05:55:10] *** Joins: abode_ (~abode@94.59.225.33)
[05:56:37] *** Parts: LBV_User (~leonardo@45.183.248.98) (Konversation terminated!)
[05:57:47] *** Quits: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Ping timeout: 250 seconds)
[05:58:47] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:02:04] *** Joins: seninha (~seninha@user/seninha)
[06:04:55] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:18] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:07:32] *** Quits: seninha (~seninha@user/seninha) (Ping timeout: 240 seconds)
[06:07:51] *** Joins: seninha_ (~seninha@user/seninha)
[06:07:56] *** Joins: Stryykert (~stryyke1@about/windows/staff/stryyker)
[06:08:52] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Ping timeout: 250 seconds)
[06:10:13] *** Quits: seninha_ (~seninha@user/seninha) (Remote host closed the connection)
[06:11:42] *** Joins: seninha (~seninha@user/seninha)
[06:11:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[06:12:52] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[06:13:50] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:16:41] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[06:18:43] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308)
[06:22:27] *** Joins: seninha (~seninha@user/seninha)
[06:22:58] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[06:23:11] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[06:24:18] *** Joins: palindrome (~thais@cpe-75-82-64-80.socal.res.rr.com)
[06:25:04] *** Quits: palindrome (~thais@cpe-75-82-64-80.socal.res.rr.com) (Client Quit)
[06:26:52] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[06:30:01] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[06:31:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[06:34:00] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[06:39:40] *** Quits: CodePoint (~CodePoint@107-208-128-79.lightspeed.tukrga.sbcglobal.net) (Quit: CodePoint struts into the sunset on the beach.)
[06:40:39] *** Quits: ncwbqcfe (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: ncwbqcfe)
[06:44:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[06:44:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[06:44:22] *** ChanServ sets mode: +v npaperbot
[06:46:15] *** Quits: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net) (Ping timeout: 252 seconds)
[06:47:30] *** Quits: evilpyro (~evilpyro@user/evilpyro) (Remote host closed the connection)
[06:57:45] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:04:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[07:10:32] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:a0a3:96a0:478:e308) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:15:15] *** Quits: spithash (~spithash@user/spithash) (Ping timeout: 240 seconds)
[07:17:14] *** Joins: spithash (~spithash@user/spithash)
[07:17:48] *** Joins: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[07:18:09] *** Quits: lxsameer (~lxsameer@user/lxsameer) (Ping timeout: 252 seconds)
[07:18:57] *** Joins: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net)
[07:19:48] *** Joins: zer0x_ (~zer0x@42.113.144.44)
[07:19:48] *** Quits: KimK (~KimK@ip98-186-40-208.ks.ks.cox.net) (Ping timeout: 240 seconds)
[07:19:56] *** Quits: Inline (~Inline@p200300cd4709f600befffe6df48235ec.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:20:48] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 250 seconds)
[07:22:40] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[07:22:54] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Quit: leaving)
[07:23:29] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[07:25:29] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[07:26:40] *** Joins: nshire (~nshire@user/nshire)
[07:31:36] *** Quits: mags (~mags@097-091-082-103.res.spectrum.com) (Quit: leaving)
[07:31:52] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[07:33:09] *** Joins: mags (~mags@097-091-082-103.res.spectrum.com)
[07:36:53] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[07:40:49] *** Joins: Norkle_ (~norkle@admin.nasa-g0v.com)
[07:40:55] *** Joins: anyone_ (~filler@a4.inai.de)
[07:40:57] *** Joins: Schoentoon_ (~Schoentoo@2a01:4f8:171:20d2::1)
[07:40:58] *** Joins: ericP_ (~eric@jay.w3.org)
[07:41:00] *** Joins: JakeSays_ (~jake@c-67-182-197-230.hsd1.ut.comcast.net)
[07:41:00] *** Joins: tonitch_ (~tonitch@user/tonitch)
[07:41:03] *** Joins: paulo_ (paulo@user/paulo/x-9032687)
[07:41:07] *** Joins: DrMax__ (~DrMax@132.215.96.30)
[07:41:13] *** Joins: nolyc_ (~nolyc@tinodidriksen.com)
[07:41:13] *** ChanServ sets mode: +v nolyc_
[07:41:23] *** Joins: vin1 (~vin@user/crash)
[07:41:24] *** Joins: merced_ (merced@user/merced)
[07:41:29] *** Quits: ericP (~eric@jay.w3.org) (*.net *.split)
[07:41:29] *** Quits: anyone (~filler@a4.inai.de) (*.net *.split)
[07:41:29] *** Quits: JakeSays (~jake@c-67-182-197-230.hsd1.ut.comcast.net) (*.net *.split)
[07:41:29] *** Quits: vin (~vin@user/crash) (*.net *.split)
[07:41:29] *** Quits: tonitch (~tonitch@user/tonitch) (*.net *.split)
[07:41:29] *** Quits: DrMax_ (~DrMax@132.215.96.30) (*.net *.split)
[07:41:29] *** Quits: Norkle (~norkle@admin.nasa-g0v.com) (*.net *.split)
[07:41:29] *** Quits: taiyu (~taiyu@user/taiyu) (*.net *.split)
[07:41:29] *** Quits: Schoentoon (~Schoentoo@2a01:4f8:171:20d2::1) (*.net *.split)
[07:41:29] *** Quits: paulo (paulo@user/paulo/x-9032687) (*.net *.split)
[07:41:29] *** Quits: merced (merced@user/merced) (*.net *.split)
[07:41:29] *** Quits: lawt (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9) (*.net *.split)
[07:41:29] *** Quits: judabuda (kowbunga@user/judabuda) (*.net *.split)
[07:41:29] *** Quits: nolyc (~nolyc@tinodidriksen.com) (*.net *.split)
[07:41:29] *** Schoentoon_ is now known as Schoentoon
[07:41:29] *** nolyc_ is now known as nolyc
[07:41:33] *** Joins: lawt2 (~lawt@2601:200:8101:f140:dea6:32ff:fea1:adf9)
[07:42:03] *** JakeSays_ is now known as JakeSays
[07:42:11] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[07:42:33] *** Joins: taiyu (~taiyu@user/taiyu)
[07:43:43] *** Norkle_ is now known as Norkle
[07:47:30] *** Joins: judabuda (kowbunga@kowbunga.thunderirc.net)
[07:50:32] *** Quits: zer0x_ (~zer0x@42.113.144.44) (Ping timeout: 240 seconds)
[07:51:45] *** Quits: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca) (Remote host closed the connection)
[07:55:40] *** Quits: millido (~millido@84.210.150.128) (Read error: Connection reset by peer)
[08:04:51] *** Joins: Fairy (~Fairy@2001:464a:4992:0:5813:fe5c:3e8c:63aa)
[08:07:25] *** Quits: Fairy97 (~Fairy@2001:464a:4992:0:f470:9081:bd76:4326) (Ping timeout: 240 seconds)
[08:08:27] *** anyone_ is now known as zz
[08:09:15] *** Quits: teepee (~teepee@openscad/teepee) (Ping timeout: 240 seconds)
[08:09:53] *** Joins: teepee (~teepee@openscad/teepee)
[08:09:54] *** Joins: millido (~millido@84.210.150.128)
[08:16:48] *** Quits: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br) (Quit: leaving)
[08:23:03] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[08:27:35] *** Joins: newpy_ (~newpy@c-73-229-15-176.hsd1.co.comcast.net)
[08:29:48] *** Quits: newpy (~newpy@2601:280:4381:1390:2ddc:61c2:abe8:a959) (Ping timeout: 240 seconds)
[08:34:31] *** merced_ is now known as merced
[08:36:37] *** Quits: abode_ (~abode@94.59.225.33) (Remote host closed the connection)
[08:37:17] *** Quits: pulse (~pulse@user/pulse) (Quit: { https://indiedevs.net/ })
[08:38:57] *** Joins: abode_ (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[08:39:26] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[08:41:07] *** Quits: trumae (~trumae@2804:18:8ba:e036:1:0:9c70:3a6e) (Remote host closed the connection)
[08:43:02] *** Quits: abode_ (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Ping timeout: 240 seconds)
[08:49:03] *** Joins: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[08:54:08] *** Joins: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78)
[08:55:06] *** Quits: smeso (~smeso@user/smeso) (Quit: smeso)
[08:58:49] *** Joins: zer0x_ (~zer0x@42.113.144.44)
[09:01:11] *** Joins: nicbk (~nicbk@user/nicbk)
[09:01:53] *** Joins: smeso (~smeso@user/smeso)
[09:03:26] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[09:07:39] *** Joins: dansan (~daniel@75.81.148.51)
[09:11:17] *** Quits: jsbach (~jsbach@2a01:c23:6148:1d00:b546:c5e3:316a:a) (Ping timeout: 256 seconds)
[09:16:42] <Batzy> https://www.tutorialspoint.com/binary-search-in-cplusplus is this actually a good implemenation of binary search?
[09:17:02] <Batzy> i can't use std::binary_search because i need to transform the values in my array as i look at them
[09:17:56] <bpalmer> Batzy: don't you just need to transform one value at a time, as you look at it?
[09:18:02] <Batzy> yes
[09:19:05] <bpalmer> Batzy: then can't you just write a comparable function that does just that?
[09:19:22] <Batzy> what do you mean a comparable function?
[09:19:27] <Batzy> to what i linked?
[09:19:48] <Batzy> yes that's what i was saying
[09:20:00] <Batzy> I was just asking if the implementation is good, like as fast as std::binary_search
[09:20:14] *** Quits: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb) (Ping timeout: 252 seconds)
[09:20:28] <Batzy> with the exception of the transform of course :^)
[09:20:51] <bpalmer> Batzy: std::binary_search can take a final parameter that handles the comparison.
[09:21:05] <bpalmer> (I should have written comparison function, not comparable function)
[09:22:28] <Batzy> :D
[09:22:29] <Batzy> really
[09:22:41] <bpalmer> bool less_city(const std::string& city_name, const StreetAddress& address) { return city_name < Transform(address).city_name; };  where Transform is whatever transformation you're doing.
[09:23:29] <Batzy> okay good, yeah so it's just some function which returns a bool and takes in an "item" from my array
[09:23:42] <bpalmer> sure.
[09:24:04] *** Joins: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064)
[09:24:05] <Batzy> oh wait
[09:24:06] <Batzy> it's not a bool
[09:24:15] <Batzy> oh wait it is a bool
[09:24:17] <Batzy> ok
[09:24:30] <Batzy> sorry i thought it'd be a transform func but it isn't, very good
[09:24:31] <Batzy> thanks
[09:24:48] <Batzy> wait
[09:25:00] *** Quits: hashfunc569 (~user@2601:5c0:c280:7090:78e9:5f82:1899:8c96) (Ping timeout: 240 seconds)
[09:25:02] <Batzy> bpalmer: my function takes in two arguments.. right?
[09:25:17] <Batzy> the two values being compared? does it have to be in special order or anything?
[09:25:19] <bpalmer> Oh, there may be a requirement on the convertible.
[09:25:21] *** Quits: sreve (~quassel@p4ff44c5a.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:25:29] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[09:25:59] <bpalmer> see https://en.cppreference.com/w/cpp/algorithm/binary_search for the actual details.
[09:26:00] *** Joins: sreve (~quassel@p4ff44c40.dip0.t-ipconnect.de)
[09:26:58] <bpalmer> but the basic function thta you linked to looks like a basic binary search. Just be careful: binary searches can easily get an off by one error, so you'll want to make sure to test things.
[09:27:32] <Batzy> bpalmer: well you're suggesting for me to use the std::binary_search
[09:27:35] <Batzy> with my own compare
[09:27:39] <bpalmer> you can still use std::binary_search, but you might (depending on the transformations involved) need to make a new type to handle converting them to Type1 and Type2
[09:27:47] <bpalmer> Yes.
[09:28:41] <Batzy> i have an array of unsigned int128s
[09:28:49] <Batzy> the transform is just a shift of 64 bits
[09:31:58] <Batzy> bpalmer: https://en.cppreference.com/w/cpp/named_req/BinaryPredicate it says it needs to be like this, but i dont get why i need an iter as opposed to 2 values
[09:33:00] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[09:33:32] <vin1> Why does this happen https://imgur.com/a/0cOdx2L ? I am trying to access an index in the vector but get the following error. "Attempt to take address of value not located in memory." This is in gdb
[09:35:20] <Batzy> it says ill either have two iters or an iter and value..
[09:35:22] <Batzy> i dont get it
[09:37:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[09:38:20] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[09:38:31] *** Joins: spithash (~spithash@user/spithash)
[09:39:50] *** Quits: zer0x_ (~zer0x@42.113.144.44) (Read error: Connection reset by peer)
[09:42:39] <bpalmer> Batzy: the iterator is coming from the container that you're working with.
[09:43:41] <kalven> Batzy: you dont have to worry about iterators if you're writing a comparator, it'll get passed elements
[09:43:44] <bpalmer> Batzy: that's irrelevant to the predicate, though, because it's being called with the iterator dereferneced.
[09:44:21] <bpalmer> Batzy: it's either bin_pred(*iter1, *iter2); or bin_pred(*iter, value);   You'll just see some of the standard library functions work with two iterators and some with one and a value.
[09:45:09] <Batzy> also, what do i pass into an binary_search as the first and last iterator for an array? ill paste my code real quick
[09:45:12] *** Joins: abode_ (~abode@94.59.225.33)
[09:45:28] <bpalmer> something like std::begin(a) and std::end(a) might do.
[09:45:38] <Batzy> https://bpa.st/OMNA
[09:45:41] <Batzy> oh
[09:46:27] *** Quits: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Read error: Connection reset by peer)
[09:46:48] <Batzy> ok i think it's working
[09:47:02] <Batzy> there a reason to return a < b as opposed to a <= b in my comparator?
[09:49:28] <bpalmer> that's the requirement that std::binary_search imposes
[09:52:41] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[09:57:01] <Batzy> ok
[09:57:07] <bpalmer> Batzy: when working wtih binary search, btw, make sure that the array you're searching is sorted according to your transformation.
[09:57:11] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[09:57:14] <Batzy> yes
[09:57:21] <Batzy> it will be
[09:57:29] <Batzy> although now im questioning the int128 type :\
[10:01:12] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[10:01:26] <Batzy> https://bpa.st/CJJQ why does this not return the lower 64 bits?
[10:01:53] <bpalmer> Batzy: your comparison function is using int parameters.
[10:02:09] <bpalmer> try bool comparison(int128 a, int128 b)
[10:02:19] <Batzy> bpalmer: im not using comparison here
[10:03:24] <Batzy> im just saying the int128 seems
[10:03:27] <Batzy> to not be workig
[10:03:29] <Batzy> working*
[10:03:33] <Batzy> like the datatype
[10:05:39] *** Joins: ElectronApps (~ElectronA@user/electronapps)
[10:08:47] *** Quits: dansan (~daniel@75.81.148.51) (Quit: The C preprocessor is a pathway to many abilities some consider to be unnatural.)
[10:13:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 256 seconds)
[10:14:29] *** Joins: toulene (~toulene@user/toulene)
[10:15:05] <Batzy> what i just linked you shouldnt be printing 0 but it is
[10:19:01] <bpalmer> shouldn't it?
[10:19:06] *** Quits: mudzap (~mudzap@2806:107e:f:64c7:945a:364:ecf7:ff43) (Ping timeout: 268 seconds)
[10:20:14] <Batzy> ahhh
[10:20:20] <Batzy> you are correct
[10:20:21] <Batzy> ok
[10:20:59] *** Quits: nq (~nq@2a02:2f08:e015:a900:7e72:2af9:f526:1e8f) (Quit: Leaving)
[10:21:56] <Batzy> bpalmer: what about printing the upper 64 bits? so someval >> 64. that is returning ( i think ) the wrong number
[10:24:08] <bpalmer> You can probe the bits if you'd like using char* to probe the value, but be aware of endianness concerns
[10:24:49] <Batzy> endianness?
[10:25:29] <bpalmer> how the  int128 , when looked at a byte at a time, stores its bits.
[10:25:42] <bpalmer> someval >> 64   would normally let you ignore this ,but if you're skeptical of the type itself...
[10:25:55] <Batzy> do you know anything about int128?
[10:26:08] <Batzy> so someval >> 64 returns some value starting with a 4
[10:26:21] <Batzy> bot (2^63)^2 starts with a 9
[10:26:29] <Batzy> sorry with an 8
[10:26:52] <bpalmer> 8*8 = 64  which is 0x40  , so that seems like what you'd end up with given 0x8 many 0s * 0x8 many 0s
[10:27:46] <bpalmer> I'm not giving the math enough attention to swear to things, but a hexadecimal 4 in the top 64 bits and all 0s in the bottom 64 bits seems right
[10:28:42] <Batzy> oh it's printing the hex value?
[10:28:49] <bpalmer> Btw, I'm not sure how you're examining things; you may want to make sure to use the std::hex iostream manipulator
[10:29:22] <bpalmer> I was assuming it but I see now you're not
[10:30:06] <bpalmer> but I've got to go; good luck
[10:30:08] <Batzy> i didnt int128 would be giving me hex values
[10:30:10] <Batzy> thanks
[10:30:17] <Batzy> at least it sounds like i can be confident
[10:30:45] <bpalmer> don't be confident based on anything I've said; I have not been paying enough attention to this.
[10:32:16] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[10:32:36] *** Quits: KAHR-Alpha (~Alpha@2a01cb0d024a6600d55f0fac2be013ce.ipv6.abo.wanadoo.fr) (Ping timeout: 240 seconds)
[10:35:10] *** Quits: badone (~badone@209.132.189.152) (Quit: ZNC 1.7.5 - https://znc.in)
[10:43:12] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:44:14] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[10:44:22] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[10:44:22] *** ChanServ sets mode: +v npaperbot
[10:49:02] *** Joins: Xardas (~Xardas@149.233.51.127)
[10:50:46] *** Quits: malloy (~jimery@116.30.221.173) (Ping timeout: 265 seconds)
[10:52:36] *** Joins: malloy (~jimery@116.30.221.173)
[10:55:02] *** Quits: N4buc0 (~N4buc0@201.22.40.19.dynamic.adsl.gvt.net.br) (Ping timeout: 240 seconds)
[10:56:15] *** Quits: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon) (Ping timeout: 240 seconds)
[10:56:30] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 252 seconds)
[10:57:15] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[10:57:32] *** Joins: crankslider (~slidercra@user/slidercrank)
[11:01:37] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 240 seconds)
[11:05:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[11:06:08] <fluter> hi, i'm using ubsan
[11:06:15] <fluter> and i saw a few such errors: runtime error: load of misaligned address 0x0000018cce5a for type 'const unsigned int', which requires 4 byte alignment
[11:06:30] <fluter> the code just looks normal
[11:06:41] <fluter> what should i change?
[11:13:02] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[11:16:39] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[11:19:01] *** Joins: pulse (~pulse@user/pulse)
[11:21:42] *** Joins: Enitin (~Enitin@82.180.145.223)
[11:22:02] *** Quits: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78) (Ping timeout: 240 seconds)
[11:26:47] *** Quits: Batzy (~quassel@user/batzy) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[11:27:20] *** Joins: msk (~Thunderbi@89.205.124.59)
[11:27:56] *** Joins: Batzy (~quassel@user/batzy)
[11:28:24] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 252 seconds)
[11:28:32] *** Joins: Enitin (~Enitin@82.180.145.230)
[11:30:11] *** Quits: newpy_ (~newpy@c-73-229-15-176.hsd1.co.comcast.net) (Quit: Leaving)
[11:33:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[11:35:08] *** Joins: evangeline (~Eleanor@178.79.105.181)
[11:35:13] *** Quits: emerent (~quassel@p200300cd5743c3adba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[11:35:19] *** Joins: emerent (~quassel@p200300cd5743c3f3ba27ebfffed28a59.dip0.t-ipconnect.de)
[11:37:25] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[11:38:17] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[11:39:12] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[11:39:35] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[11:41:42] *** Joins: nicbk (~nicbk@user/nicbk)
[11:43:00] *** Joins: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com)
[11:43:02] *** Quits: Coldberg (~C-Man@78.31.190.82) (Ping timeout: 240 seconds)
[11:48:15] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[11:51:19] *** Joins: GNUmoon (~GNUmoon@gateway/tor-sasl/gnumoon)
[12:00:28] *** Joins: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78)
[12:00:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[12:01:47] <ville> fluter: placement new used anywhere? packed attribute used anywhere?
[12:01:57] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:05:42] *** Joins: ville (~ville@user/ville)
[12:08:42] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:09:40] *** Joins: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de)
[12:11:43] <ville> fluter: as per usual testcase is the right way to go
[12:13:37] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:1544:a8b3:4801:36b5)
[12:20:53] <fluter> ville: it's the packed attribute, so this is a tcp program that the messages are just overlay of buffers, and all the message definitions are packed to 1 byte
[12:21:18] *** Joins: jellie (~luv_panda@user/jellie)
[12:25:14] *** Joins: Guest78 (~Guest78@155.190.35.5)
[12:25:43] <Guest78> Hi Cpp Folks
[12:25:47] <ville> there you go then
[12:26:57] *** Quits: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net) (Ping timeout: 240 seconds)
[12:27:22] <fluter> what to do?
[12:27:45] <ville> !give fluter general
[12:27:46] <nolyc> fluter: #C++-general for algorithms, libraries, practices, projects, tools etc.
[12:28:18] <fluter> this isn't issue about algorithms, libraries, practices, projects, tools
[12:28:38] <ville> it is. you're using a non-standard mechanism and asking how to get a tool not to complain about your code
[12:28:59] <ville> if you want the standard-compliant answer: stop using packed
[12:29:23] <fluter> okay
[12:30:44] *** Joins: tapeworm (~tapeworm@188.168.50.119)
[12:32:20] *** Quits: les (znc@user/les) (Quit: Adios)
[12:32:39] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[12:33:00] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[12:33:04] *** Joins: Forsaken87 (~quassel@ip-037-201-193-116.um10.pools.vodafone-ip.de)
[12:33:41] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 245 seconds)
[12:34:14] *** Joins: les (znc@user/les)
[12:36:17] <Guest78> could someone have a look at that https://wandbox.org/permlink/4yrgQgOCrwmhGKKd ?
[12:36:37] <Guest78> why the second specialization doesn't work ?
[12:36:53] <Guest78> could someone tell me how to make it work ?
[12:37:54] *** ChanServ sets mode: +o ville
[12:38:35] *** Joins: joeyzheng5403_ (~kerwin@124.126.18.162)
[12:38:41] *** ville changes topic to 'Standard C++ specifications and code. || Current standard: ISO/IEC 14882:2020 (a.k.a. C++20) || https://isocpp.org/faq || pastes: https://godbolt.org || stats/logs: https://i.pjj.cc/lb || other channels: #c++-general #c++-basic #c++-social #geordi'
[12:38:57] *** ville sets mode: -o ville
[12:40:23] *** Joins: tapeworm116 (~tapeworm@188.168.50.119)
[12:43:23] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[12:43:43] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[12:44:35] *** Quits: tapeworm (~tapeworm@188.168.50.119) (Ping timeout: 256 seconds)
[12:54:11] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 252 seconds)
[12:54:37] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.4.1)
[12:56:14] *** Joins: fengdaolong (~fengdaolo@171.43.210.166)
[13:04:55] *** Quits: Xardas (~Xardas@149.233.51.127) (Quit: Client closed)
[13:05:52] <fluter> why not wandbox.org?
[13:06:07] <fluter> it was used a lot..
[13:07:42] <TinoDidriksen> Nobody is stopping you from using that, or any other compiling pastebin.
[13:07:51] <ville> fluter: wandbox is broken
[13:08:03] <fluter> TinoDidriksen: i mean, ville just changed the topic
[13:08:13] <fluter> ville: oh, wasn't aware of that. ok
[13:09:14] <TinoDidriksen> The topic mentions a preference - we can't link everything from there due to message length.
[13:10:05] *** Quits: fengdaolong (~fengdaolo@171.43.210.166) (Read error: Connection reset by peer)
[13:10:23] <ville> however i am going to claim a correlation in the likelyhood of links being opened and whether it's in the topic or at least a known-reasonable pastebin otherwise
[13:12:45] *** Joins: rendar (~rendar@user/rendar)
[13:15:39] *** Joins: fengdaolong (~fengdaolo@171.43.210.166)
[13:16:10] *** Joins: lxsameer (~lxsameer@user/lxsameer)
[13:21:43] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:23:00] *** Joins: zer0x (~zer0x@42.113.144.44)
[13:23:16] *** Quits: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch) (Quit: ZNC - https://znc.in)
[13:23:24] *** Joins: zeenk (~zeenk@2a02:2f04:a110:7d00:2011:cfed:bad7:3c94)
[13:25:05] *** Joins: cbreak (~cbreak@77-58-201-132.dclient.hispeed.ch)
[13:26:00] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Client Quit)
[13:26:05] *** Quits: ElectronApps (~ElectronA@user/electronapps) (Quit: Leaving)
[13:26:09] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[13:27:21] *** Quits: martiert_work (~martiert_@2001:420:44c1:2617:cbd6:972c:422:e9e3) (Quit: WeeChat 3.3)
[13:28:17] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:29:05] *** Joins: Guest5684 (~martiert_@2001:420:44c1:2617:d151:e9c4:bc77:95e1)
[13:34:32] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[13:39:33] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[13:39:49] *** Quits: chenqisu1 (~chenqisu1@183.217.201.47) (Quit: Leaving)
[13:40:55] *** Guest5684 is now known as martiert_work
[13:47:47] *** Quits: Guest78 (~Guest78@155.190.35.5) (Quit: Client closed)
[13:50:32] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4.1)
[13:50:54] *** Joins: PlasmaHH (~PlasamaHH@user/plasmahh)
[13:51:53] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[13:53:41] *** Joins: Furai (~Furai@furai.pl)
[13:58:01] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[14:06:39] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Ping timeout: 268 seconds)
[14:06:39] *** Joins: JohnMS_WORK (~kvirc@194.110.240.100)
[14:07:25] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[14:13:03] *** Joins: plastico (~plastico@neomutt/plastico)
[14:15:14] *** Quits: martiert_work (~martiert_@2001:420:44c1:2617:d151:e9c4:bc77:95e1) (Quit: WeeChat 3.4.1)
[14:15:34] *** Joins: Guest4782 (~martiert_@2001:420:44c1:2617:d151:e9c4:bc77:95e1)
[14:15:56] *** gentooclimax is now known as climax
[14:16:54] *** climax is now known as gentooclimax
[14:20:00] *** Joins: LucaTM (~LucaTM@user/lucatm)
[14:22:51] *** Quits: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com) (Ping timeout: 250 seconds)
[14:23:48] *** Joins: Flannel (~flannel@cpe-76-175-193-181.socal.res.rr.com)
[14:25:52] *** Quits: whatsupdoc (uid509081@id-509081.hampstead.irccloud.com) (Quit: Connection closed for inactivity)
[14:26:35] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[14:27:22] *** Joins: Enitin (~Enitin@82.180.145.230)
[14:31:02] *** Joins: TheHermann (~TheHerman@gateway/tor-sasl/thehermann)
[14:34:53] *** gentooclimax is now known as climax
[14:36:36] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 240 seconds)
[14:37:01] *** Joins: mattallmill (~mattallmi@ip68-103-130-85.ks.ok.cox.net)
[14:42:30] *** Quits: FergusL (~freenode4@user/fergusl) (Quit: Ping timeout (120 seconds))
[14:42:43] *** Joins: FergusL (~freenode4@23.247.118.78.rev.sfr.net)
[14:43:10] *** Joins: jellie (~luv_panda@user/jellie)
[14:44:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[14:44:23] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[14:44:23] *** ChanServ sets mode: +v npaperbot
[14:45:20] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[14:45:29] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[14:45:51] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 256 seconds)
[14:46:09] *** Joins: toulene (~toulene@user/toulene)
[14:49:14] *** Joins: Enitin (~Enitin@82.180.145.230)
[14:50:53] *** Quits: chir4gm (~chir4gm@user/chir4gm) (Quit: The Lounge - https://thelounge.chat)
[14:51:16] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[14:51:23] *** Quits: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it) (Read error: Connection reset by peer)
[14:54:12] *** Joins: unknow (~i.am@user/marlboro)
[14:55:20] *** climax is now known as gentooclimax
[14:55:37] *** Quits: Enitin (~Enitin@82.180.145.230) (Ping timeout: 240 seconds)
[14:57:16] *** Joins: ivii (~ivan@user/ivii)
[14:59:55] *** Quits: nicbk (~nicbk@user/nicbk) (Ping timeout: 240 seconds)
[15:01:16] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:03:58] *** Quits: chir4gm (~chir4gm@user/chir4gm) (Quit: The Lounge - https://thelounge.chat)
[15:04:19] *** Joins: chir4gm (~chir4gm@user/chir4gm)
[15:04:55] *** Quits: toulene (~toulene@user/toulene) (Quit: Ping timeout (120 seconds))
[15:04:56] *** Quits: abode_ (~abode@94.59.225.33) (Remote host closed the connection)
[15:05:46] *** Joins: toulene (~toulene@user/toulene)
[15:06:07] *** Joins: Enitin (~Enitin@82.180.145.223)
[15:06:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[15:09:25] *** Quits: fengdaolong (~fengdaolo@171.43.210.166) (Ping timeout: 256 seconds)
[15:11:00] *** Quits: robert_ (~robert_@47.203.169.95) (Read error: Connection reset by peer)
[15:11:07] *** Quits: zen_coder (~zen_coder@2a02:8109:a280:2d8d:699f:6e20:195b:1ccd) (Ping timeout: 256 seconds)
[15:13:26] *** Quits: FergusL (~freenode4@23.247.118.78.rev.sfr.net) (Changing host)
[15:13:26] *** Joins: FergusL (~freenode4@user/fergusl)
[15:15:39] *** Quits: kaiseisei (~Thunderbi@user/kaiseisei) (Ping timeout: 256 seconds)
[15:18:04] *** Joins: nq (~nq@2a02:2f08:e015:a900:99af:f5ee:ecd5:7377)
[15:20:37] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[15:22:19] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[15:22:20] *** Joins: wakeup (~wakeup@user/wakeup)
[15:23:11] *** Joins: kaph (~kaph@net-109-116-124-149.cust.vodafonedsl.it)
[15:24:18] *** Quits: Carbonflux (~Carbonflu@c-66-235-54-179.sea.wa.customer.broadstripe.net) (Quit: When all you have are solutions, everything is a problem.)
[15:26:05] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[15:26:57] *** Joins: seninha (~seninha@user/seninha)
[15:27:30] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[15:31:28] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:36:40] *** Joins: bebyx (~Thunderbi@user/bebyx)
[15:44:24] *** Joins: the_lanetly_052 (~the_lanet@194.135.167.45)
[15:44:42] *** Quits: ville (~ville@user/ville) (Ping timeout: 268 seconds)
[15:49:46] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[15:54:55] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[15:55:07] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[15:56:05] <the_lanetly_052> Hi, how can I return std::vector<int> from std std::vector<int>*?
[15:59:13] <PJBoy> example?
[16:00:39] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:00:53] <the_lanetly_052> std::vector<int> getfn(std::unique_ptr<std::vector<int>> val) { std::vector<int>* ptr_vec = val.get(); return *ptr_vec; }
[16:02:37] *** Quits: Enitin (~Enitin@82.180.145.223) (Ping timeout: 240 seconds)
[16:03:45] <the_lanetly_052> I used ptr dereference here. is there any other alternative way?
[16:04:05] <PJBoy> there's lots of crazy ways
[16:04:06] *** Quits: dhch (~dhch@185.213.154.165) (Quit: The Lounge - https://thelounge.chat)
[16:04:15] <PJBoy> that's the most straight forward and sensible way
[16:04:35] *** Joins: Enitin (~Enitin@82.102.22.84)
[16:05:16] <PJBoy> possibly `return std::move(*ptr_vec);` is better
[16:06:55] <the_lanetly_052> all right, thanks
[16:16:21] *** Joins: ville (~ville@user/ville)
[16:25:11] *** Quits: joeyzheng5403_ (~kerwin@124.126.18.162) (Remote host closed the connection)
[16:25:24] *** Quits: proller (~p@2a02:6b8:b081:b407::1:10) (Ping timeout: 252 seconds)
[16:25:46] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 245 seconds)
[16:26:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[16:29:39] *** Joins: fflam (~mdt@ip72-220-60-77.sd.sd.cox.net)
[16:31:18] *** Quits: toulene (~toulene@user/toulene) (Read error: Connection reset by peer)
[16:31:33] *** Joins: toulene (~toulene@user/toulene)
[16:33:23] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[16:36:03] *** Joins: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net)
[16:36:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[16:38:03] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[16:41:41] *** Joins: Masklin__Gurder (~joel@pool20.nat.lunet.lu.se)
[16:41:53] <Masklin__Gurder> Hello
[16:42:02] <Masklin__Gurder> I'm trying to troubleshoot a cpp program that someone else wrote
[16:42:04] <Masklin__Gurder> Assertion `variantSpec.classification().type == VariantType::kRepeat' failed.
[16:42:07] <Masklin__Gurder> What does that mean?
[16:42:18] <Masklin__Gurder> (I don't know cpp or c)
[16:44:48] <PJBoy> means someone checked if classification type was some constant kRepeat
[16:44:51] <PJBoy> and it wasn't
[16:47:34] <Masklin__Gurder> Hmm
[16:47:38] <Masklin__Gurder> That is unfortunate
[16:50:33] *** Masklin__Gurder is now known as Masklin
[16:54:50] <zz> still in the denial phase, eh
[16:56:56] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Remote host closed the connection)
[16:58:32] *** Joins: m_ben (~m_ben@user/m-ben/x-7429725)
[17:01:10] *** Joins: john99 (~john99@102.246.103.34.bc.googleusercontent.com)
[17:03:16] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[17:07:14] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[17:07:41] *** Joins: jokoon (~eio@2a01:e0a:542:e160:717a:dffa:a9a:49b5)
[17:08:17] *** Joins: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de)
[17:10:42] <Masklin> zz: top be honesty I'm not sure what you mean
[17:10:47] <Masklin> :3
[17:12:32] <zz> The five stages of grief
[17:14:05] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[17:26:23] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:26:27] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 252 seconds)
[17:28:34] *** Joins: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl)
[17:28:59] *** Joins: mrgz (~mrgz@201-42-0-191.dsl.telesp.net.br)
[17:30:21] *** Joins: Guest78 (~Guest78@155.190.35.5)
[17:30:50] *** Joins: mudzap (~mudzap@2806:107e:f:64c7:ef6d:b82a:36c:d8f6)
[17:31:02] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[17:33:10] <Masklin> Right but how do those connect to my problem? I am not upset I swear on me mum.
[17:33:16] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Client Quit)
[17:37:51] *** Quits: JohnMS_WORK (~kvirc@194.110.240.100) (Ping timeout: 250 seconds)
[17:37:52] <Guest78> Hi
[17:37:58] <Guest78> please have  alook at https://wandbox.org/permlink/3mpE7AYBLou22JY0
[17:38:51] <Guest78> am trying to find out how can I do a partial/full specialization for the type struct
[17:39:07] <Guest78> the same way i did for the type vector
[17:40:45] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 252 seconds)
[17:42:37] *** Quits: toulene (~toulene@user/toulene) (Ping timeout: 240 seconds)
[17:43:55] *** Joins: toulene (~toulene@user/toulene)
[17:44:03] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[17:44:26] *** Joins: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3)
[17:45:28] *** Quits: Ali_A (~Ali_A@dslb-088-070-113-094.088.070.pools.vodafone-ip.de) (Quit: Connection closed)
[17:47:14] *** Joins: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net)
[17:48:00] <Alipha> Guest78: a full specialization would be: template<> class TypeSerializer<A> {
[17:48:41] <Alipha> Guest78: why are you templating TypeSerializer as: `template <typename T = void, typename... Targs>` btw?
[17:49:55] <Alipha> and not just: template <typename T>  (or rather, if you intend to do partial specialization, `template <typename T, typename = void>`)
[17:50:01] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[17:51:29] <Alipha> https://wandbox.org/permlink/ULGMVJ5qrN45v9kd
[17:52:20] <Alipha> the_lanetly_052: why do you have a std::unique_ptr<std::vector<int>> in the first place? having a std::unique_ptr to a container is unusual.
[17:56:07] *** Quits: ironman (~ironman@2405:201:1010:b026:5f00:b63f:4116:bd78) (Quit: Leaving)
[17:56:47] *** Joins: darkbit (~db@152.32.100.99)
[17:58:03] *** Joins: rootx74 (~rootx74@user/rootx74)
[17:59:43] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Quit: very_sneaky)
[18:02:33] *** Joins: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl)
[18:03:48] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:05:39] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 256 seconds)
[18:06:25] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[18:09:06] <Guest78> [2:18:00 PM] <Alipha> Guest78: a full specialization would be: template<> class TypeSerializer<A> {
[18:09:07] <Guest78> In fact i would like to do a specialization (partial or full i don't care for the moment) for all kind of struct not for struct A
[18:09:46] <Alipha> Guest78: my wandbox has the solution for that
[18:10:38] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Read error: Connection reset by peer)
[18:11:07] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[18:11:42] <Guest78> oh let me try it out
[18:11:53] <Guest78> many thanks.. am coming back
[18:12:09] <Alipha> fluter: are you opposed to #c++-general for some reason? and indeed, the standard solution would be to not reinterpret_cast the message bytes as a struct, but to properly serialize/deserialize each struct member. in which case, then the struct doesn't need to be packed, and you also don't have to worry about things like endianness
[18:12:52] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Read error: Connection reset by peer)
[18:14:45] <fluter> Alipha: i'm not opposed, just seems that channel is less popular
[18:15:08] <fluter> Alipha: that will involes at least one more copy. while struct overlay we don't need to copy anything
[18:17:02] *** Joins: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net)
[18:17:29] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[18:17:30] <Alipha> fluter: less popular by what metric? on average, more messages/day occur in #c++-general
[18:17:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[18:18:10] <PJBoy> by a large margin
[18:19:07] *** Quits: judabuda (kowbunga@kowbunga.thunderirc.net) (Changing host)
[18:19:07] *** Joins: judabuda (kowbunga@user/judabuda)
[18:20:42] *** Quits: CatCow (~wtf_over@c-73-96-109-206.hsd1.or.comcast.net) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[18:21:10] <Alipha> surprisingly, according to my log files, #c++ is 27250529 bytes and general is 31108216 bytes. that's not as big of a margin as i thought
[18:23:40] <Alipha> #c++ is 290804 lines and general is 333139 lines. i should figure out how to remove joins/parts/quits though
[18:24:46] <urdh> yeah those would probably add a fairly similar offset to both of those
[18:27:37] <Alipha> urdh: or not
[18:27:55] <Alipha> cat irc.libera.#c++.weechatlog | grep -v " has quit" | grep -v " has joined" | wc -l  ==> 75852
[18:28:14] <Alipha> cat irc.libera.#c++-general.weechatlog | grep -v " has quit" | grep -v " has joined" | wc -l  ==> 207024
[18:28:38] <Alipha> that's more of the ratio i was looking for
[18:29:21] <TinoDidriksen> There are public stats for both channels: https://tinodidriksen.com/pisg/libera/cpp.html , https://tinodidriksen.com/pisg/libera/cpp-general.html
[18:29:39] <Alipha> TinoDidriksen: well, that's no fun ;-)
[18:29:57] <urdh> those results surprise me, I've always thought both channels have a pretty similar set of idlers
[18:30:28] <Alipha> here has 553 nicks while general only has 296 nicks
[18:30:54] <urdh> i must not be paying attention :<
[18:31:53] *** Quits: treble (~treble@user/treble) (Ping timeout: 252 seconds)
[18:32:26] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 245 seconds)
[18:33:21] <Guest78> Alipha: This is reason why am using variadic templates
[18:33:22] <Guest78> https://wandbox.org/permlink/vuHbpgrHz6qb50DK
[18:34:06] *** Joins: treble (~treble@user/treble)
[18:34:21] <Guest78> now question is: could we still achieve the specialization for the type "struct" without introducing the "void" as template argument ?
[18:35:41] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[18:39:26] *** Joins: rootx74 (~rootx74@user/rootx74)
[18:40:47] *** Quits: treble (~treble@user/treble) (Ping timeout: 256 seconds)
[18:44:15] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[18:44:24] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[18:44:24] *** ChanServ sets mode: +v npaperbot
[18:46:15] *** Joins: zer0x (~zer0x@42.113.144.44)
[18:50:30] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[18:51:34] <Alipha> Guest78: when you're doing partial specialization, you can actually specify as many template arguments as you'd like. e.g.: https://wandbox.org/permlink/xS6s3gf89ErrybfS
[18:52:30] <Guest78> nice
[18:52:51] <Alipha> Guest78: if you can use c++20, then you can use Concepts to avoid the default void template argument. otherwise, no, you can't do partial specialization without that extra void template argument
[18:52:52] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[18:53:06] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[18:53:10] <Guest78> very nice
[18:53:41] <Guest78> good.. my current compiler is quite poor... it supports only c++17
[18:54:32] <Guest78> i also removed the "void" when specializing for vector
[18:54:33] <Guest78> https://wandbox.org/permlink/D0f6rpXIodbWhyEn
[18:54:35] *** Quits: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: jdavfsxd)
[18:55:12] <Alipha> i guess the void isn't needed for that, yeah
[18:55:15] *** Joins: jsbach_ (~jsbach@2a01:c22:a861:c200:b455:8fb0:343e:163a)
[18:55:16] <Alipha> c++20 btw: https://wandbox.org/permlink/XSsGxvVxwSuwqHrO
[18:56:01] <Alipha> brb
[18:56:13] *** Quits: jsbach (~jsbach@2a01:c22:a861:c200:a1b8:256b:efc8:e064) (Ping timeout: 240 seconds)
[18:56:17] *** Quits: Alipha (~AliphaX@user/alipha) (Quit: WeeChat 1.0.1)
[18:58:35] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:00:58] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[19:02:13] *** Joins: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net)
[19:02:13] *** Quits: Alipha (~AliphaX@75-168-143-77.mpls.qwest.net) (Changing host)
[19:02:13] *** Joins: Alipha (~AliphaX@user/alipha)
[19:02:37] *** Joins: treble (~treble@user/treble)
[19:04:09] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[19:05:29] <Guest78> [3:25:16 PM] <Alipha> c++20 btw: https://wandbox.org/permlink/XSsGxvVxwSuwqHrO
[19:05:30] <Guest78> cool
[19:06:11] <Alipha> i finally moved my raspberrypi closer to my router. download speedtest went from 1.65 Mbps to 23.74 Mbps, heh. and so far i haven't felt any latency when typing and such.
[19:06:30] <Alipha> (my rpi is hosting weechat)
[19:06:43] *** Joins: jplejacq (~jplejacq@24.224.90.176)
[19:08:15] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:08:33] *** Quits: TheHermann (~TheHerman@gateway/tor-sasl/thehermann) (Remote host closed the connection)
[19:08:46] *** Quits: Inline__ (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de) (Read error: Connection reset by peer)
[19:09:16] *** Joins: Inline (~Inline@p200300cd470e6400705287adc1f2aa0f.dip0.t-ipconnect.de)
[19:09:55] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Ping timeout: 240 seconds)
[19:10:32] *** Quits: wakeup (~wakeup@user/wakeup) (Quit: Client closed)
[19:11:42] *** Joins: Coldberg (~C-Man@static.187.59.243.136.clients.your-server.de)
[19:12:04] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[19:14:47] *** Quits: C-Man (~C-Man@static.187.59.243.136.clients.your-server.de) (Ping timeout: 256 seconds)
[19:16:18] <Guest78> [3:36:30 PM] <Alipha> (my rpi is hosting weechat):D
[19:16:43] <Guest78> :') =$ 8)
[19:21:00] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[19:23:02] *** Quits: rootx74 (~rootx74@user/rootx74) (Ping timeout: 252 seconds)
[19:25:23] <m_ben> Alipha: that's a quite old weechat version you're having 1.0.1
[19:25:23] <Guest78> Alipha: now i've introduced a bit of static polymorphism
[19:25:35] <Guest78> https://wandbox.org/permlink/tcmMus7Ivj9gWD7r
[19:25:53] <Guest78> for which i would like to add a little safety
[19:26:18] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[19:27:21] <Guest78> do you know how can ensure in line 13 that the actual instance should have an implemented function called "marshall"
[19:27:47] *** Joins: xkuru (~xkuru@user/xkuru)
[19:28:26] <Alipha> m_ben: :-/ `apt upgrade` isn't suggesting any newer version. *shrugs*
[19:28:34] *** Quits: whupdup (~whupdup@pool-173-76-128-81.bstnma.fios.verizon.net) (Quit: Going offline, see ya! (www.adiirc.com))
[19:28:37] *** Quits: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro) (Ping timeout: 256 seconds)
[19:30:50] *** Quits: hesse (~TheHerman@gateway/tor-sasl/thehermann) (Quit: Leaving)
[19:31:01] *** Joins: hesse (~TheHerman@gateway/tor-sasl/thehermann)
[19:31:05] <m_ben> hmm, weechat --version says 3.4.1 on my computer. maybe your quit message is just outdated
[19:31:27] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[19:31:35] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:31:47] <Alipha> Guest78: simply don't provide a marshall function inside Serializable? (get rid of lines 15-17?)
[19:32:27] *** Quits: rootx74 (~rootx74@user/rootx74) (Remote host closed the connection)
[19:32:54] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:33:00] <Guest78> waw ... as simple as that (y)
[19:33:11] *** Coldberg is now known as C-Man
[19:33:23] *** hesse is now known as TheHermann
[19:34:01] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:34:26] *** Quits: unknow (~i.am@user/marlboro) (Quit: a pentium 100 "running" windows 11 trying to play Last of Us II at ps4emu... that's my brain trying understand 0->R->R->R/2R->0)
[19:34:28] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:34:37] *** Quits: zer0x (~zer0x@42.113.144.44) (Ping timeout: 240 seconds)
[19:35:40] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:36:09] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:36:56] *** Quits: rootx74 (~rootx74@user/rootx74) (Max SendQ exceeded)
[19:37:40] *** Joins: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de)
[19:39:45] *** Quits: jokoon (~eio@2a01:e0a:542:e160:717a:dffa:a9a:49b5) (Quit: Leaving)
[19:41:30] *** Quits: crankslider (~slidercra@user/slidercrank) (Ping timeout: 268 seconds)
[19:42:12] *** Quits: Tokamak (~Tokamak@107.116.82.179) (Ping timeout: 240 seconds)
[19:43:35] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:44:17] *** Joins: pulse (~pulse@user/pulse)
[19:44:54] *** Quits: Guest78 (~Guest78@155.190.35.5) (Quit: Client closed)
[19:45:47] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[19:46:19] *** Joins: Tokamak (~Tokamak@107.116.82.179)
[19:46:54] *** Joins: Yruama (~Yruama@2a01:cb15:8128:c100:6c61:6a53:9bf0:64ca)
[19:48:09] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Read error: Connection reset by peer)
[19:52:55] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3)
[19:52:55] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 240 seconds)
[19:53:25] *** Joins: Viewday1152 (~Viewday@user/viewday)
[19:54:56] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[19:54:56] *** Viewday1152 is now known as Viewday115
[19:55:57] *** Quits: ma7mad (~ma7mad@ip5f5af6bb.dynamic.kabel-deutschland.de) (Quit: Client closed)
[19:56:37] *** Joins: Tokamak_ (~Tokamak@172.58.188.152)
[19:56:54] *** Quits: JohnMS_WORK (~kvirc@89-64-70-205.dynamic.chello.pl) (Ping timeout: 260 seconds)
[19:57:19] *** Joins: rootx74 (~rootx74@user/rootx74)
[19:57:42] *** Quits: m_ben (~m_ben@user/m-ben/x-7429725) (Quit: WeeChat 3.4.1)
[19:57:57] *** Quits: Tokamak (~Tokamak@107.116.82.179) (Ping timeout: 240 seconds)
[19:59:24] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901::4d3) (Ping timeout: 240 seconds)
[19:59:48] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[20:00:07] *** Joins: bindu (~bindu@user/bindu)
[20:00:15] *** Quits: drbeco (~beco@user/beco) (Quit: Leaving)
[20:00:15] *** Joins: fengdaolong (~fengdaolo@2409:8a4d:c46:9901:727a:e2b3:eaf2:a73a)
[20:00:37] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 268 seconds)
[20:01:01] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[20:02:40] *** Joins: Tokamak (~Tokamak@166.205.152.100)
[20:03:00] *** Quits: Tokamak_ (~Tokamak@172.58.188.152) (Ping timeout: 240 seconds)
[20:04:45] *** Quits: MajorBiscuit (~MajorBisc@wlan-145-94-218-48.wlan.tudelft.nl) (Ping timeout: 250 seconds)
[20:10:22] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:10:58] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Read error: Connection reset by peer)
[20:11:30] *** Joins: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net)
[20:11:34] *** Joins: tapeworm (~tapeworm@188.168.50.119)
[20:12:39] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[20:14:10] *** Quits: rootx74 (~rootx74@user/rootx74) (Quit: Leaving)
[20:14:12] *** Quits: tapeworm116 (~tapeworm@188.168.50.119) (Ping timeout: 252 seconds)
[20:15:04] *** Joins: rootx74 (~rootx74@user/rootx74)
[20:17:50] *** Joins: pah (~pah@user/pah)
[20:18:03] *** Quits: pa (~pah@user/pah) (Ping timeout: 252 seconds)
[20:18:07] *** Joins: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a)
[20:18:07] *** Quits: skapata (~Skapata@2804:14c:87b0:9d2e:f52e:1e16:af5a:322a) (Changing host)
[20:18:07] *** Joins: skapata (~Skapata@user/skapata)
[20:20:14] *** pah is now known as pa
[20:21:54] *** Quits: zibolo (~quassel@global-deiInside018.dei.polimi.it) (Ping timeout: 252 seconds)
[20:22:32] *** Quits: millido (~millido@84.210.150.128) (Ping timeout: 240 seconds)
[20:23:15] *** Joins: millido (~millido@84.210.150.128)
[20:23:30] *** Quits: arch_angel (~arch-ange@user/arch-angel) (Ping timeout: 260 seconds)
[20:25:40] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:27:29] <Batzy> i'm trying to use std::begin() on an array however i'm getting an array because this is an array of int128s. What can I do? I'm just trying to get a start iterator which i can pass into std::binary_search
[20:29:33] <Alipha> !give Batzy testcase
[20:29:34] <nolyc> Batzy: A testcase is the _least_ amount of code that replicates your problem. Paste it to: https://godbolt.org/ and make sure it really does replicate your problem. This does not mean that you dump all your code there. You _must_ use that website. Do _not_ use a different website. Do _not_ paste code to the channel. See the testcase checklist at http://eel.is/iso-c++/testcase/
[20:29:46] <Batzy> uh sure
[20:29:48] <Batzy> sec
[20:30:22] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[20:31:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[20:32:12] <Batzy> Alipha: https://bpa.st/QLQQ here ya go
[20:33:47] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 250 seconds)
[20:34:56] *** Quits: ckdCreations (~ckdCreati@c-73-140-151-116.hsd1.wa.comcast.net) (Ping timeout: 245 seconds)
[20:35:47] *** Joins: Moosadee (~Moosadee@198.248.38.27)
[20:39:44] <urdh> Batzy: that's using std::begin on a pointer, not on an array
[20:40:27] <urdh> when you use new[], you need to keep track of the size manually
[20:40:39] <Alipha> `int128 arr[4];` would work. or if you need to dynamically allocate (why aren't you using std::vector???) then `std::binary_search(arr, arr + 4, 3);`
[20:40:41] <urdh> (ideally, use a container instead)
[20:41:43] *** Joins: Atque_ (~Atque@user/atque)
[20:42:25] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[20:42:33] *** Quits: Atque_ (~Atque@user/atque) (Remote host closed the connection)
[20:42:44] *** Joins: Viewday115 (~Viewday@user/viewday)
[20:42:55] *** Quits: Atque (~Atque@user/atque) (Ping timeout: 240 seconds)
[20:43:22] *** Joins: Atque (~Atque@user/atque)
[20:46:58] *** Joins: gproto23 (~gproto23@user/gproto23)
[20:51:06] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Remote host closed the connection)
[20:53:38] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[20:53:46] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[21:00:50] *** Quits: ckdCreations (~ckdCreati@147.55.130.35) (Read error: Connection reset by peer)
[21:01:07] <Batzy> sorry i missed this
[21:01:15] *** Joins: ckdCreations (~ckdCreati@147.55.130.35)
[21:01:17] <Batzy> Alipha: you asked for a minimal example man
[21:01:28] <Batzy> i am using an array in my actual case
[21:01:43] *** Joins: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net)
[21:02:03] <Batzy> idk the different between new[] and int128 arr[4] tbh
[21:02:13] <Batzy> anyways let me try your arr, arr+4 suggestion
[21:06:41] <Alipha> or use std::array instead of raw arrays
[21:08:03] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[21:12:35] <Batzy> Alipha: is there something wrong with arr, and arr+4?
[21:12:37] <Batzy> it works fine
[21:12:48] <Batzy> im not sure what the difference with std::array would be
[21:13:08] <Batzy> im not really a c++ programmer as you can tell, but there are sections of my code i need to port to be "high performance" so here i am
[21:14:50] <Alipha> Batzy: what happens if you later change the array size to 3 and forget to change arr+4 to arr+3? c++ gives you better tools to reduce the chance of errors (like using std::array or std::vector and using begin/end with them)
[21:15:12] <Batzy> std::array is a dynamically sized array or what?
[21:15:27] <ville> Batzy: no
[21:15:35] <Alipha> no. std::array is a very thin wrapper around a raw array, so there should be no performance difference with optimizations turned on
[21:15:42] <Alipha> std::array<int128, 4> arr;
[21:15:48] <Batzy> I see
[21:16:00] <Batzy> and you're saying the advantage of it is what? that i can use std::begin on it?
[21:16:19] <Alipha> yep
[21:16:24] <Batzy> vector also has slower performance than array btw right?
[21:16:38] <PJBoy> depends
[21:16:39] <Alipha> vector does dynamically allocate, so yes
[21:16:45] <Batzy> yeah
[21:16:51] <Batzy> PJBoy: if im doing a lot of write and access operations
[21:16:52] <PJBoy> vectors can be moved just by copying three values
[21:17:03] <PJBoy> arrays moves require moving every single element
[21:17:42] <Batzy> ok ok i will give std::array a try btw
[21:17:47] <Alipha> writing/accessing a std::vector shouldn't be any slower than an array. it's the construction and destruction that would be slower because of the dynamic allocation
[21:18:25] <Alipha> (though the non-locality can be slower in some cases)
[21:18:26] <PJBoy> whether it's dynamically allocated or not could play into memory locality and cache
[21:18:36] *** Quits: unlink2 (~unlink@p200300ebcf19f600f31648a859b660c5.dip0.t-ipconnect.de) (Remote host closed the connection)
[21:18:38] <PJBoy> but you'd have to start measuring at the point
[21:19:02] <Batzy> also i can google it but if anyone wants to tell me
[21:19:19] <Batzy> whats the difference between std::array<int128, size> arr; and arr = new int128[size]?
[21:19:25] <Batzy> like when should i use one vs the other?
[21:19:35] *** Joins: Enitin (~Enitin@82.180.145.230)
[21:19:54] <PJBoy> `std::array<T, n> var;` is roughly the same as `T var[n];`
[21:20:03] <Alipha> well, in the former, `size` has to be a compile-time constant (same as `int128 arr[size];`)
[21:20:25] <PJBoy> whereas `T* var = new T[n];` is roughly the same as `std::array<T, n>* var = new std::array<T, n>;`
[21:20:29] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[21:21:08] <PJBoy> i.e. `new` does dynamic allocation, and usually you only do that when you need to
[21:21:30] *** Joins: bolovanos (~bolovanos@user/bolovanos)
[21:21:45] <Alipha> yeah. if you're doing `T* var = new T[n];` then you might as well just do `std::vector<T> var(n);` instead because you're already doing dynamic allocation
[21:21:50] *** Joins: jimbzy_ (~gem@hwsrv-458174.hostwindsdns.com)
[21:22:07] <PJBoy> and whether you use new or not, std::array is generally more capable than T[n]
[21:23:01] *** Quits: jimbzy (~gem@user/jimbzy) (Ping timeout: 240 seconds)
[21:23:18] <Batzy> hm
[21:23:37] <PJBoy> so having been given all the advice, it's pretty much "do I use std::array or std::vector"
[21:23:51] <PJBoy> and the answer usually depends on if the array size is a compile time constant or not
[21:25:07] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 256 seconds)
[21:26:01] <Batzy> so vector is only noticably slower if i have to pass it around/copy it?
[21:26:13] <Batzy> since its call be value as opposed to call by pointer for an array?
[21:26:29] <PJBoy> nah
[21:26:36] *** Quits: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu) (Ping timeout: 245 seconds)
[21:26:45] <PJBoy> array and vector will copy in the same way, and vector will move faster
[21:26:58] <PJBoy> and either way you can take a pointer or reference to an array or vector
[21:27:35] <Batzy> ok so why would i use an array
[21:28:21] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[21:28:31] <PJBoy> to not allocate data on the heap
[21:28:48] <PJBoy> which costs memory and potentially has worse memory locality
[21:28:49] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[21:29:29] <Batzy> ah, you see
[21:29:37] <Batzy> some of my arrays may get very large
[21:29:50] <Alipha> large arrays may also overflow the stack
[21:30:16] <PJBoy> giant arrays are a good usecase for std::vector
[21:30:53] <Batzy> so i still dont understand
[21:30:56] <Batzy> why id ever use arrays then
[21:31:36] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Ping timeout: 245 seconds)
[21:31:59] *** Joins: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be)
[21:32:03] *** Joins: Burgundy (~NA@5-12-91-184.residential.rdsnet.ro)
[21:32:11] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[21:32:16] <Batzy> back to using the new keyword btw: what if i need to initialize a pointer to an array?
[21:32:53] <Alipha> you'd use std::array for non-large arrays of known compile-time size. and in modern c++, you'd ideally never use raw arrays :-)
[21:33:20] <Alipha> int128 arr[4]; int128 *p = arr;
[21:33:37] *** Joins: jdavfsxd (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[21:33:46] <Batzy> i suppose i cant do std::array<int128,size>* arr;?
[21:34:35] *** Joins: peeps (~peepsalot@openscad/peepsalot)
[21:34:44] <Batzy> wait Alipha what you just said is a raw array
[21:34:57] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:35:35] *** Quits: peeps[zen] (~peepsalot@openscad/peepsalot) (Ping timeout: 252 seconds)
[21:35:48] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 240 seconds)
[21:35:51] <PJBoy> if you had some std::array<T, n> and you wanted a pointer to T?
[21:36:09] <PJBoy> and that std::array was called `var`
[21:36:27] <PJBoy> then you'd use `T* pointer = var.data()`
[21:36:30] <Batzy> not to t
[21:36:32] <Batzy> to the var
[21:36:39] <Batzy> i guess same thing?
[21:36:51] <PJBoy> depends on the type you want a pointer to
[21:37:35] <PJBoy> like if you're dealing with an API that wants a data pointer + size pair, it usually wants a pointer to the first element and the size
[21:37:55] <PJBoy> if not then it's a question of what you even want a pointer for
[21:38:05] <Batzy> right now i have int128* arr; new_mat = new int128[SIZE2];
[21:38:11] *** Quits: j0hn_mc_clane (~j0hn_mc_c@ptr-fqhhm12iua58a0gd4hj.18120a2.ip6.access.telenet.be) (Remote host closed the connection)
[21:38:19] <TinoDidriksen> For that you should definitely use vector instead.
[21:39:04] *** Joins: imi (~imi@catv-89-132-115-236.catv.fixed.vodafone.hu)
[21:39:28] <Alipha> and SIZE2 is a runtime value?
[21:39:56] <Batzy> and i can pass the point to vector as a function argument
[21:40:17] <TinoDidriksen> Yup, pass vector.data()
[21:40:40] <Batzy> vector.data() is pointer i guess?
[21:40:50] <Batzy> TinoDidriksen: that helps a lot though
[21:40:57] <TinoDidriksen> It returns a non-owning pointer to the first element.
[21:41:16] <Batzy> ok
[21:41:23] <Batzy> man you guys are great
[21:41:29] <Batzy> i dont think the person im working with knows this
[21:41:57] <Alipha> it's amazing how many c++ programmers are stuck in the 90's
[21:42:06] <Batzy> lol yeah well
[21:42:09] <Batzy> it's a huge language
[21:42:31] <Batzy> what if i know the size at compile time?
[21:42:40] <Batzy> in my case it's just a matrix
[21:42:46] <Batzy> oh wait
[21:42:48] <Batzy> not compile time
[21:42:52] <Batzy> ok so vectors again
[21:43:04] *** Joins: peeps[zen] (~peepsalot@openscad/peepsalot)
[21:44:13] *** Quits: peeps (~peepsalot@openscad/peepsalot) (Ping timeout: 240 seconds)
[21:44:56] *** Quits: Kasreyn (~i@h5ef52142.selulun.dyn.perspektivbredband.net) (Read error: Connection reset by peer)
[21:45:07] *** jimbzy_ is now known as jimbzy___
[21:45:31] <Batzy> you guys are really great
[21:45:52] *** Quits: vin1 (~vin@user/crash) (Quit: WeeChat 2.8)
[21:48:00] *** jimbzy___ is now known as jimbzy
[21:48:00] *** Quits: jimbzy (~gem@hwsrv-458174.hostwindsdns.com) (Changing host)
[21:48:00] *** Joins: jimbzy (~gem@user/jimbzy)
[21:48:55] *** Joins: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2)
[21:49:53] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[21:50:23] *** Joins: Viewday115 (~Viewday@user/viewday)
[21:52:51] *** Quits: Moosadee (~Moosadee@198.248.38.27) (Ping timeout: 245 seconds)
[21:53:24] *** Joins: Viewday1159 (~Viewday@user/viewday)
[21:53:40] *** Joins: magla (~gelignite@55d4decd.access.ecotel.net)
[21:54:03] *** Joins: sobkas (~sobkas@95.175.17.217)
[21:55:09] *** Quits: Viewday115 (~Viewday@user/viewday) (Ping timeout: 256 seconds)
[21:55:10] *** Viewday1159 is now known as Viewday115
[21:58:05] *** Quits: bitmask (~bitmask@c-73-215-237-27.hsd1.nj.comcast.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[21:58:31] *** Quits: john99 (~john99@102.246.103.34.bc.googleusercontent.com) (Quit: Client closed)
[22:05:55] *** Quits: fengdaolong (~fengdaolo@2409:8a4d:c46:9901:727a:e2b3:eaf2:a73a) (Ping timeout: 256 seconds)
[22:10:52] *** Joins: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net)
[22:17:31] *** Quits: Viewday115 (~Viewday@user/viewday) (Quit: Ping timeout (120 seconds))
[22:17:57] *** Joins: Viewday115 (~Viewday@user/viewday)
[22:19:17] *** Quits: Tokamak (~Tokamak@166.205.152.100) (Ping timeout: 240 seconds)
[22:19:44] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:19:54] *** Joins: john99 (~john99@102.246.103.34.bc.googleusercontent.com)
[22:19:57] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:21:42] *** Joins: Tokamak_ (~Tokamak@107.116.82.163)
[22:21:44] *** Joins: jotoho (~jotoho@user/jotoho)
[22:22:06] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[22:27:03] *** Quits: rgrinberg (~textual@fixed-187-191-8-46.totalplay.net) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:30:59] *** Joins: geowiesnot (~user@5-51-190-244.abo.bbox.fr)
[22:31:59] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:32:01] *** Quits: bindu (~bindu@user/bindu) (Remote host closed the connection)
[22:32:12] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:32:22] *** Joins: bindu (~bindu@user/bindu)
[22:33:38] *** Quits: jotoho (~jotoho@user/jotoho) (Quit: Closing client)
[22:34:12] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Client Quit)
[22:34:25] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:35:31] *** Joins: cosimone (~user@93-44-187-176.ip98.fastwebnet.it)
[22:38:32] *** Joins: mgaunard (~mgaunard@ec2-52-210-158-23.eu-west-1.compute.amazonaws.com)
[22:39:36] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[22:39:51] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:40:38] *** Joins: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5)
[22:40:48] *** Joins: Dizidentu (~aresg@modemcable151.154-19-135.mc.videotron.ca)
[22:41:30] *** Joins: wakeup (~wakeup@user/wakeup)
[22:41:55] *** Joins: duds- (~duds-@user/duds)
[22:44:16] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[22:44:25] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[22:44:26] *** ChanServ sets mode: +v npaperbot
[22:44:41] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[22:45:36] *** Joins: vicfred (~vicfred@user/vicfred)
[22:46:37] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[22:47:58] <CarloWood> I have a template<Timer::time_point::rep count, typename Unit> struct Interval; that contains no members - sizeof() is 0 (if that was allowed :P).  It *does* contain a few static members however, and the class exists because of the side effects the constructors of those members have.
[22:49:15] <CarloWood> What I now need is, after reaching main() (when all of the above objects already have been constructed), access a bunch of those objects by 'index' - as if they were members of an array.
[22:50:08] <CarloWood> Obviously can't put them in an array though, because they all have different types...
[22:52:21] <CarloWood> I need them with full type in order to call this member function of the template struct `Interval`:
[22:52:24] <CarloWood>   operator Timer::Interval() const { return {TimerQueueIndex(index), Timer::time_point::duration{period}}; }
[22:53:32] <CarloWood> Where `period` is a constexpr member calculated from the template parameters and `index` is a static member.
[22:53:54] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:1544:a8b3:4801:36b5) (Ping timeout: 268 seconds)
[22:55:11] <CarloWood> Does anyone have any ideas how to tackle this problem? That is, convert an int index to a Timer::Interval as-if calling the above operator Timer::Interval on an "array" of such Interval template objects?
[22:57:18] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:18b3:ab56:6ddb:c942)
[22:59:42] *** Quits: rvalue (~rvalue@user/rvalue) (Read error: Connection reset by peer)
[22:59:44] *** Quits: proller (~p@2a02:6b8:0:408:eafc:afff:fec7:a7a3) (Ping timeout: 252 seconds)
[23:00:16] *** Joins: rvalue (~rvalue@user/rvalue)
[23:02:12] *** Quits: eelstrebor (~eelstrebo@198-178-29-136.scb.ne.static.allophone.net) (Quit: Ex-Chat)
[23:07:01] *** Quits: jellie (~luv_panda@user/jellie) (Ping timeout: 245 seconds)
[23:07:14] *** Quits: gproto23 (~gproto23@user/gproto23) (Remote host closed the connection)
[23:07:38] *** Joins: gproto23 (~gproto23@user/gproto23)
[23:10:28] <kalven> any reason why you need different reps/units for all of them?
[23:11:28] <CarloWood> That's the whole reason for their existence, that they are different. If they weren't different, then I only needed one no?
[23:12:28] <kalven> yeah, that seems like a better option
[23:12:46] *** Quits: sa02irc (~mbax@155-079-043-212.ip-addr.inexio.net) (Quit: Konversation terminated!)
[23:13:28] <CarloWood> lol
[23:13:36] *** Joins: Moosadee (~Moosadee@198.248.38.27)
[23:14:10] <CarloWood> Woke-kalven - even timer intervals all have to be the same :P
[23:14:45] <CarloWood> So, shall I always wait 1 millisecond, or always one second? What you think?
[23:14:52] *** Quits: abode (~abode@2001:8f8:1263:f81:8230:49ff:fe6e:36b5) (Remote host closed the connection)
[23:16:16] <kalven> no, but 1000ms makes a good stand-in for 1s
[23:17:08] <CarloWood> That's just the Unit - still have the reps different then (1 or 1000).
[23:17:23] <CarloWood> the 'count' thus.
[23:17:33] <CarloWood> template<Timer::time_point::rep count, typename Unit> struct Interval;
[23:17:45] <CarloWood> No reason to drop one template parameter.
[23:18:59] *** Quits: the_lanetly_052 (~the_lanet@194.135.167.45) (Ping timeout: 252 seconds)
[23:20:29] *** Joins: luizfrds (~Luiz@152.250.243.147)
[23:23:08] *** Joins: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net)
[23:24:17] *** Quits: geowiesnot (~user@5-51-190-244.abo.bbox.fr) (Ping timeout: 240 seconds)
[23:25:22] <CarloWood> I solved it by adding a non-template struct that can contain the static state of the template objects with automatic conversions; then I can just use the new type in the array and everything works again.
[23:26:20] <CarloWood> struct NonTemplateInterval { detail::Index* index; Timer::time_point::rep period; operator Timer::Interval() const { return {TimerQueueIndex(*index), Timer::time_point::duration{period}}; } };
[23:27:10] <CarloWood> And added `operator NonTemplateInterval() const { return {&index, period}; }` to the template class.
[23:29:03] *** Joins: xbkkd (~F0@user/xbkkd)
[23:29:31] *** Quits: senoraraton (~senorarat@c-67-160-210-246.hsd1.ca.comcast.net) (Ping timeout: 245 seconds)
[23:31:24] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Quit: Client closed)
[23:31:39] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:36:15] *** Quits: foobaz212 (~foobaz212@152.37.103.80) (Ping timeout: 256 seconds)
[23:37:39] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[23:41:09] *** Joins: crankslider (~slidercra@user/slidercrank)
[23:42:05] *** Joins: foobaz212 (~foobaz212@152.37.103.80)
[23:45:57] *** Quits: bolovanos (~bolovanos@user/bolovanos) (Ping timeout: 240 seconds)
[23:47:35] *** Quits: jplejacq (~jplejacq@24.224.90.176) (Ping timeout: 256 seconds)
[23:51:53] *** Joins: rgrinberg (~textual@2806:102e:18:c0c1:a896:63f7:5249:df28)
[23:52:32] *** Quits: KimK (~KimK@2600:8803:740b:4700:4a5b:39ff:fe0b:57d2) (Ping timeout: 252 seconds)
[23:52:46] *** Quits: LuckyFire (~LuckyFire@46.217.40.44) (Remote host closed the connection)
[23:53:08] *** Joins: LuckyFire (~LuckyFire@46.217.40.44)
[23:53:24] *** Joins: Viewday1153 (~Viewday@user/viewday)
[23:53:51] *** Quits: magla (~gelignite@55d4decd.access.ecotel.net) (Quit: Stay safe!)
[23:54:55] *** Quits: Viewday115 (~Viewday@user/viewday) (Read error: Connection reset by peer)
[23:54:55] *** Viewday1153 is now known as Viewday115
[23:57:27] *** Quits: bebyx (~Thunderbi@user/bebyx) (Quit: bebyx)
