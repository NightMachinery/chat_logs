[00:08:57] *** Joins: Lycurgus (~juan@98.4.112.204)
[00:15:48] *** Joins: tyson2 (~user@72.142.96.152)
[00:17:18] <hendursaga> I wish arrows' -> didn't clash with serapeum.. :(
[00:18:46] *** Joins: akoana (~ah@user/akoana)
[00:20:53] *** Quits: cage (~cage@dynamic-adsl-78-15-36-212.clienti.tiscali.it) (Quit: rcirc on GNU Emacs 27.1)
[00:21:02] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Read error: Connection reset by peer)
[00:21:32] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[00:22:24] *** Quits: azimut_ (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[00:22:41] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:31:58] *** Joins: cosimone (~user@93-34-133-37.ip49.fastwebnet.it)
[00:39:46] *** Quits: Cymew (~ante@c-e989225c.023-1144-7570702.bbcust.telenor.se) (Ping timeout: 260 seconds)
[00:40:45] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Remote host closed the connection)
[00:41:03] *** Joins: azimut (~azimut@gateway/tor-sasl/azimut)
[00:41:35] *** Quits: tyson2 (~user@72.142.96.152) (Quit: ERC (IRC client for Emacs 27.2))
[00:42:26] *** Joins: Guest82 (~Guest82@2601:86:400:b18::1d67)
[00:42:58] *** Quits: Guest82 (~Guest82@2601:86:400:b18::1d67) (Client Quit)
[00:43:06] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[00:48:49] *** Quits: shka (~herr@109.231.62.239) (Ping timeout: 265 seconds)
[00:49:58] *** Parts: pranavats (3fba1d1b34@jabberfr.org) (Disconnected: Replaced by new connection)
[00:50:10] *** Joins: pranavats (3fba1d1b34@jabberfr.org)
[01:01:48] *** Quits: skyl4rk (~tlvb@user/tlvb) (Quit: WeeChat 3.1)
[01:09:55] <phoe> stylewarning: is ##coalton a thing yet?
[01:10:38] <phoe> also, in the example at https://coalton-lang.github.io/20211010-introducing-coalton/ where you (define (hello name) ...) you have "these lines are Common Lisp" - what is the variable UNIT, where does it come from?
[01:11:19] <stylewarning> Unit is a type and a value defined in the standard library
[01:11:37] <stylewarning> It’s like the Common Lisp type (member coalton:Unit)
[01:12:22] <phoe> Oh - so I can think of it as a CL constant of some sort?
[01:12:41] <stylewarning> Yes it’s exactly that
[01:12:53] <phoe> OK - so it's a predefined constant, understood
[01:13:37] <stylewarning> This may only increase confusion but https://github.com/coalton-lang/coalton/blob/main/src/library/types.lisp#L6
[01:14:58] <phoe> looks to me like COALTON:UNIT is a self-evaluating symbol, and you also described that (deftype unit () '(eql unit))
[01:15:02] <phoe> (if I got it correctly)
[01:19:59] *** Joins: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b)
[01:20:54] <lotuseater> with coalton a bit of Haskell feeling comes up :) but it's more inspired by SML iirc
[01:26:55] <stylewarning> phoe: from Coalton’s perspective, Unit is a type with one value, Unit. There’s no concept of a symbol in Coalton. In Lisp, though, Unit is implemented as a symbol, so indeed it just looks like a self-evaluating symbol. (Very pedantic of course.)
[01:27:33] <stylewarning> It’s logically equivalent to the pure Coalton code: (define-type Unit Unit) — but isn’t that way because it needed to be “bootstrapped”
[01:27:47] *** Quits: saturn2 (~visitant@c-75-72-230-238.hsd1.mn.comcast.net) (Changing host)
[01:27:47] *** Joins: saturn2 (~visitant@user/clone-of-saturn/x-1551297)
[01:28:21] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[01:28:50] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 252 seconds)
[01:29:37] *** Lord_of_Life_ is now known as Lord_of_Life
[01:32:02] *** Quits: Jach (~Jach@2601:600:8600:307:7e31:e7a7:f1f3:a96b) (Ping timeout: 260 seconds)
[01:35:02] *** Joins: fitzsim (~user@69-165-165-189.dsl.teksavvy.com)
[01:35:46] *** Quits: copec (~copec@schrodbox.unaen.org) (Ping timeout: 260 seconds)
[01:36:37] <phoe> stylewarning: OK, I think I get it so far
[01:36:48] <phoe> congrats for the post, and thanks for your Coalton work! I'll digest it (in due time)
[01:37:06] <fitzsim> yeah, good to see Coalton kept being developed!
[01:37:21] <fitzsim> I had been pulling from the old repo from time to time and thought development had stopped
[01:38:03] <fitzsim> just subscribed to the new blog's RSS feed
[01:39:26] <phoe> stylewarning: in define-type binary-tree, is (Leaf) supposed not to have any value in it?
[01:39:46] <phoe> or is data stored only in a Node?
[01:39:55] <stylewarning> It probably should have a value but it can be either way
[01:40:12] <phoe> asking because (Node :a ... ...) looks like nodes hold values rather than leaves
[01:40:23] <stylewarning> I like to think of Leaf as like Nil
[01:40:25] <phoe> which, sure, these are equivalent - just double-checking my interpretation
[01:40:30] <phoe> oh, OK - so I understood it well
[01:40:33] <stylewarning> You’re correct
[01:41:34] <phoe> Coalton is case-insensitive by default since it uses the standard Lisp readtable - is that correct?
[01:43:19] *** Quits: gxt (~gxt@gateway/tor-sasl/gxt) (Remote host closed the connection)
[01:43:44] *** Joins: gxt (~gxt@gateway/tor-sasl/gxt)
[01:44:22] <stylewarning> Correct, it’s just convention
[01:46:09] *** Joins: skyl4rk (~tlvb@user/tlvb)
[01:46:15] <phoe> how do you create global lexical variables? global-vars, or something custom-made?
[01:47:42] *** Joins: Jach (~Jach@c-73-193-76-63.hsd1.wa.comcast.net)
[01:49:45] *** Joins: pillton (~user@220-244-154-254.tpgi.com.au)
[01:50:11] <phoe> also, beach is gonna scold you about the use of term "CLOS classes" once he wakes up; you may want to change that to "standard classes" :D
[01:50:23] <stylewarning> phoe: symbol macro backed by a global static var
[01:50:35] <stylewarning> Shh don’t tell beach
[01:50:36] *** Quits: pillton (~user@220-244-154-254.tpgi.com.au) (Client Quit)
[01:51:14] <lisp123> https://www.cliki.net/on%20lisp
[01:51:22] <White_Flame> as his name is likely all highlighted now on his client ;)
[01:51:32] <moon-child> phoe: do you suppose he will acknowledge something that has not a formal specification?
[01:51:33] <lisp123> (defvar *actual-cont* #'values) (define-symbol-macro *cont* *actual-cont*)
[01:52:06] *** Quits: ec_ (~ec@gateway/tor-sasl/ec) (Ping timeout: 276 seconds)
[01:52:10] <lotuseater> I think he's asleep at the moment for the next few hours. :)
[01:53:05] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[01:54:24] *** Joins: lisp123 (~lisp123@5.30.23.247)
[01:55:22] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[01:55:46] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[01:59:16] <hayley> stylewarning: Dumb question, are you aware of the work on the Strongtalk type system?
[01:59:35] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[01:59:48] <stylewarning> hayley: I know it exists, that’s all
[01:59:54] <stylewarning> I’m not a PL scholar ):
[01:59:58] <hayley> I see Coalton went down an ML-esque route, but they could type Smalltalk while preserving the dynamicism of it.
[02:00:36] <hayley> I'm not a type theorist either :(
[02:00:40] <stylewarning> I wonder what it’s type language looks like and what invariants it can express
[02:01:24] <hayley> From the demos I've seen, it looked eerily similar to Java but with mixins.
[02:02:57] <hayley> https://upload.wikimedia.org/wikipedia/commons/thumb/3/3c/Strongtalk-system.png/781px-Strongtalk-system.png Looks to have parametric polymorphism at least.
[02:03:00] <jcowan> I worked on a project called Steme which was like Coalton but for Scheme.  Unfortunately it broke down on irreconcilable design differences.  (We didn't learn about Coalton until near the end.)  I think my insistence that Steme should be pure was probably a mistake, but the idea of interoperating co-languages was there.
[02:03:19] <jcowan> oops, ww
[02:03:26] <stylewarning> Very neat
[02:03:38] <stylewarning> Schemers are always up to mischief
[02:03:46] <jcowan> oh well, it fits here fine
[02:04:15] <moon-child> raku's runtime is intended to permit interoperation of disparate languages.  Currently it only hosts raku and its bootstrapping subset, but there's no reason others couldn't be added
[02:04:57] <fitzsim> "See the eval example above.": the list-length example of match shows the use of the wildcard, where the eval example doesn't
[02:05:32] <stylewarning> I think I just meant as an example of MATCH but maybe the language could be clearer
[02:05:44] <stylewarning> I figured wildcards aren’t *that* interesting
[02:05:51] <fitzsim> hehe, yeah, makes sense
[02:06:12] <fitzsim> no biggie; it made me jump back to both examples, so maybe it's better as-is
[02:07:02] <jcowan> no need for explicit bridges, though; you could write the type of a Scheme function in a Steme declaration, provided you certified its purity, and Scheme could call Steme directly.
[02:10:14] <stylewarning> That’s true with Coalton too
[02:10:39] <stylewarning> But I’d still implore the user to use the bridge for addl safety (:
[02:10:59] <stylewarning> (At no cost but a few extra characters typed and microseconds spent compiling)
[02:12:25] <jcowan> If your Coalton function calls a lot of Lisp code or vice versa, it's harder to read with explicit bridging.  The Steme idea was to define a bridge just once, not every time it is used.
[02:12:38] <stylewarning> I see
[02:12:56] <jcowan> essentially an FFI for Steme
[02:15:21] *** Quits: cosimone (~user@93-34-133-37.ip49.fastwebnet.it) (Ping timeout: 265 seconds)
[02:19:52] *** Joins: scymtym (~user@ip-94-114-248-79.unity-media.net)
[02:35:23] *** Joins: lisp123 (~lisp123@5.30.23.247)
[02:38:05] *** Quits: frgo (~frgo@p200300deef0cee00f40feeaddfdc708b.dip0.t-ipconnect.de) (Remote host closed the connection)
[02:38:32] *** Joins: frgo (~frgo@p200300deef0cee00f40feeaddfdc708b.dip0.t-ipconnect.de)
[02:42:36] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[02:49:52] *** Quits: yitzi_ (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[02:52:12] *** Quits: Alfr (~Alfr@user/alfr) (Quit: Leaving)
[03:10:55] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 265 seconds)
[03:17:50] *** Quits: akoana (~ah@user/akoana) (Quit: leaving)
[03:21:35] *** Joins: gioyik_ (~gioyik@gateway/tor-sasl/gioyik)
[03:25:42] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[03:27:18] *** Quits: Fare (~fare@2601:184:4a7f:995c:c738:4aa0:22fb:7b1f) (Ping timeout: 260 seconds)
[03:33:34] *** Quits: pve (~pve@37-136-217-44.rev.dnainternet.fi) (Quit: leaving)
[03:39:43] *** Joins: Fare (~fare@2601:184:4a7f:995c:31b9:df40:cbac:1cbe)
[03:48:59] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[04:00:11] *** Joins: Alfr (~Alfr@user/alfr)
[04:04:55] <Josh_2> stylewarning: Coalton is very cool. Nice work :)
[04:14:01] <stylewarning> Thanks! It’s neat to finally release it.
[04:23:51] *** Joins: gioyik (~gioyik@gateway/tor-sasl/gioyik)
[04:26:48] *** Quits: gioyik_ (~gioyik@gateway/tor-sasl/gioyik) (Ping timeout: 276 seconds)
[04:35:25] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[04:49:10] <aeth> stylewarning: oh, you did that? Shouldn't you be typeerror instead of stylewarning, then?
[04:49:33] <stylewarning> ;-)
[04:52:35] *** Joins: dre (~dre@2001:8003:c932:c301:8aa:c32b:4a32:5b41)
[04:54:17] *** Joins: karlosz (~karlosz@12.196.174.98)
[04:56:37] *** Quits: karlosz (~karlosz@12.196.174.98) (Client Quit)
[05:08:06] *** Quits: random-nick (~random-ni@87.116.165.220) (Ping timeout: 260 seconds)
[05:08:27] *** Joins: lisp123 (~lisp123@5.30.23.247)
[05:10:15] *** Quits: gioyik (~gioyik@gateway/tor-sasl/gioyik) (Quit: WeeChat 3.1)
[05:18:22] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[05:24:16] *** Quits: pjb (~pjb@user/pjb) (Ping timeout: 252 seconds)
[05:27:22] *** Quits: Zianic (~12602@user/zianic) (Ping timeout: 250 seconds)
[05:42:03] *** Joins: Oladon (~olad@98.43.81.226)
[06:03:11] *** Quits: edgar-rft (~edgar-rft@HSI-KBW-109-193-249-223.hsi7.kabel-badenwuerttemberg.de) (Quit: Leaving)
[06:27:02] *** Quits: dre (~dre@2001:8003:c932:c301:8aa:c32b:4a32:5b41) (Quit: Leaving)
[06:28:28] *** Quits: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net) (Ping timeout: 252 seconds)
[06:28:50] *** Joins: Qwnavery (~Qwnavery@user/qwnavery)
[06:37:18] *** Quits: gaqwas (~john@dynamic-077-002-106-116.77.2.pool.telefonica.de) (Ping timeout: 265 seconds)
[06:38:01] *** Quits: Qwnavery (~Qwnavery@user/qwnavery) (Quit: WeeChat 3.2)
[06:38:45] *** Joins: kakuhen (~kakuhen@user/kakuhen)
[06:41:12] *** Quits: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca) (Quit: WeeChat 3.2)
[06:47:02] *** Quits: Fare (~fare@2601:184:4a7f:995c:31b9:df40:cbac:1cbe) (Ping timeout: 260 seconds)
[06:52:03] *** Joins: CrashTestDummy (~CrashTest@ool-ad02813b.dyn.optonline.net)
[06:54:58] *** Quits: CrashTestDummy3 (~CrashTest@ool-ad02813b.dyn.optonline.net) (Ping timeout: 260 seconds)
[07:29:23] *** Joins: Devon (~devon@c-24-2-157-5.hsd1.ma.comcast.net)
[07:31:34] <beach> Good morning everyone!
[07:35:33] <Devon> Good evening beach
[07:38:08] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[07:40:53] *** Joins: robin (~robin@user/terpri)
[07:49:54] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[07:50:32] *** Joins: lisp123 (~lisp123@5.30.23.247)
[07:53:04] *** Joins: robin (~robin@user/terpri)
[07:54:58] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 252 seconds)
[07:56:06] *** Quits: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd) (Ping timeout: 260 seconds)
[07:56:07] *** Joins: Fare (~fare@2601:184:4a7f:995c:7a82:10de:66b0:24a5)
[08:03:27] *** Joins: igemnace (~ian@user/igemnace)
[08:06:13] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[08:09:26] *** Joins: robin (~robin@user/terpri)
[08:17:13] *** Joins: robin_ (~robin@user/terpri)
[08:18:02] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[08:22:14] *** Quits: semz (~none@user/semz) (Ping timeout: 260 seconds)
[08:30:44] <Devon> https://directory.FSF.org lists Emacs CL, Gnu CL and SBCL listed but not ABCL, CCL, Clasp, CLISP nor ECL.  Perhaps these unlisted maintainers would like to provide a blurb for the directory.
[08:33:26] *** Quits: robin_ (~robin@user/terpri) (Ping timeout: 260 seconds)
[08:34:18] *** Joins: robin (~robin@user/terpri)
[08:35:30] *** Joins: semz (~none@user/semz)
[08:39:38] *** Joins: molson__ (~molson@2001-48F8-704A-CA1-0-0-75F-101C-static.midco.net)
[08:39:49] *** Joins: azimut_ (~azimut@gateway/tor-sasl/azimut)
[08:40:57] *** Quits: azimut (~azimut@gateway/tor-sasl/azimut) (Ping timeout: 276 seconds)
[08:42:49] *** Quits: molson_ (~molson@2001-48F8-704A-CA1-0-0-75F-1015-static.midco.net) (Ping timeout: 252 seconds)
[08:47:13] *** Joins: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de)
[08:49:03] *** Quits: Fare (~fare@2601:184:4a7f:995c:7a82:10de:66b0:24a5) (Ping timeout: 260 seconds)
[08:52:35] *** Quits: Bike (~Glossina@71.69.170.70) (Quit: Lost terminal)
[09:00:03] *** Quits: igemnace (~ian@user/igemnace) (Remote host closed the connection)
[09:00:42] *** Joins: Fare (~fare@2601:184:4a7f:995c:7a99:aafd:24ad:128a)
[09:12:10] *** Quits: Fare (~fare@2601:184:4a7f:995c:7a99:aafd:24ad:128a) (Ping timeout: 260 seconds)
[09:31:51] *** Quits: Oladon (~olad@98.43.81.226) (Quit: Leaving.)
[09:38:37] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[09:38:46] *** Parts: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1) ()
[09:43:05] *** Joins: robin (~robin@user/terpri)
[09:50:04] *** Joins: contrapunctus (a75f5b1571@2a00:c70:1:178:170:40:189:1)
[09:50:26] *** Quits: nature_ (~nature@mail.blazebone.com) (Ping timeout: 260 seconds)
[09:51:16] *** Joins: neocron (~NeoCron@p200300c4cf3ba70012c3036b63257be6.dip0.t-ipconnect.de)
[09:51:22] *** Quits: robin (~robin@user/terpri) (Ping timeout: 260 seconds)
[09:51:41] *** Joins: robin (~robin@user/terpri)
[09:53:46] *** Quits: Doraemon (~NeoCron@p200300c4cf1c7e009d03f50373ebe753.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[10:15:37] *** Joins: lisp123 (~lisp123@5.30.23.247)
[10:27:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:30:09] *** Joins: robin (~robin@user/terpri)
[10:41:04] *** Quits: d4ryus (~d4ryus@ppp-188-174-50-104.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[10:46:05] *** Joins: d4ryus (~d4ryus@ppp-188-174-50-104.dynamic.mnet-online.de)
[10:47:26] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[10:50:11] *** Joins: robin (~robin@user/terpri)
[10:53:26] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 260 seconds)
[10:56:10] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[10:58:06] *** Joins: pve (~pve@37-136-10-145.rev.dnainternet.fi)
[10:59:46] *** Quits: lisp123 (~lisp123@5.30.23.247) (Remote host closed the connection)
[10:59:58] *** Joins: lisp123 (~lisp123@5.30.23.247)
[11:00:10] *** Joins: Lycurgus (~juan@98.4.112.204)
[11:10:35] *** Quits: d4ryus (~d4ryus@ppp-188-174-50-104.dynamic.mnet-online.de) (Quit: WeeChat 3.2)
[11:16:31] *** Joins: d4ryus (~d4ryus@ppp-188-174-50-104.dynamic.mnet-online.de)
[11:36:05] *** Joins: shka (~herr@109.231.62.239)
[11:40:21] *** Quits: amb007 (~a_bakic@23.184.126.78.rev.sfr.net) (Ping timeout: 265 seconds)
[11:41:19] *** Joins: amb007 (~a_bakic@120.135.22.93.rev.sfr.net)
[11:45:47] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[11:50:10] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[11:53:31] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:55:46] *** Joins: robin (~robin@user/terpri)
[11:56:07] *** Quits: robin (~robin@user/terpri) (Remote host closed the connection)
[11:57:56] *** Joins: robin (~robin@user/terpri)
[12:15:09] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[12:21:22] *** Joins: cosimone` (~user@5.171.24.60)
[12:23:22] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[12:36:20] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:38:51] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 276 seconds)
[12:42:35] *** Quits: abraham (~abraham@143.244.185.86) (Quit: The Lounge - https://thelounge.chat)
[12:43:42] *** Joins: abraham (~abraham@143.244.185.86)
[12:44:31] *** Joins: scymtym_ (~user@ip-94-114-248-79.unity-media.net)
[12:45:37] *** Quits: scymtym (~user@ip-94-114-248-79.unity-media.net) (Ping timeout: 265 seconds)
[12:47:18] *** Quits: amb007 (~a_bakic@120.135.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[12:48:59] *** Quits: cosimone` (~user@5.171.24.60) (Ping timeout: 265 seconds)
[12:54:53] <fiddlerwoaroof> stylewarning: congratulations!
[12:56:44] <fiddlerwoaroof> I guess there's not a #coalton yet :)
[13:03:00] <fiddlerwoaroof> hi everyone!
[13:04:02] *** Joins: amb007 (~a_bakic@151.151.22.93.rev.sfr.net)
[13:04:35] <beach> Hello fiddlerwoaroof.
[13:07:56] <fiddlerwoaroof> I've been writing a lot less lisp than I'd like
[13:12:05] <beach> That's not good.
[13:15:51] <stylewarning> fiddlerwoaroof: thanks! Maybe when communication needs hit a threshold a channel can be made.
[13:16:22] <fiddlerwoaroof> stylewarning: have you thought at all about the representation of phantom type variables?
[13:17:23] <stylewarning> Just a little but not much
[13:18:00] *** Quits: amb007 (~a_bakic@151.151.22.93.rev.sfr.net) (Ping timeout: 260 seconds)
[13:21:19] <fiddlerwoaroof> It's one of my favorite tricks available with a nominal type system to help propagate information with no runtime cost
[13:22:09] *** Joins: amb007 (~a_bakic@69.135.22.93.rev.sfr.net)
[13:22:44] <stylewarning> fiddlerwoaroof: yeah I agree
[13:22:58] <fiddlerwoaroof> But, it's a bit weird that there's no way to introspect the missing variable (afaict)
[13:30:10] <fiddlerwoaroof> Reifying them somehow would also let the constraints pass through untyped code
[13:33:54] *** Joins: kstuart (~kstuart@85.203.46.113)
[13:34:13] *** Joins: ln43 (~ln43@user/ln43)
[13:45:49] *** Quits: kakuhen (~kakuhen@user/kakuhen) (Read error: Connection reset by peer)
[13:49:09] *** Quits: froggey (~froggey@cpc96342-rdng26-2-0-cust314.15-3.cable.virginm.net) (Quit: leaving)
[13:49:15] *** froggey-1 is now known as froggey
[13:50:44] *** Quits: kstuart (~kstuart@85.203.46.113) (Quit: rcirc on GNU Emacs 28.0.50)
[13:52:40] *** Joins: kstuart (~kstuart@85.203.46.113)
[13:55:13] *** Quits: amb007 (~a_bakic@69.135.22.93.rev.sfr.net) (Ping timeout: 252 seconds)
[13:56:08] *** Joins: amb007 (~a_bakic@220.14.23.93.rev.sfr.net)
[14:00:48] *** Joins: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it)
[14:02:32] *** Quits: amb007 (~a_bakic@220.14.23.93.rev.sfr.net) (Ping timeout: 245 seconds)
[14:04:10] *** Joins: amb007 (~a_bakic@93.150.22.93.rev.sfr.net)
[14:09:13] *** Quits: ln43 (~ln43@user/ln43) (Quit: ln43)
[14:09:26] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[14:18:29] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Quit: Leaving)
[14:22:51] *** Quits: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it) (Remote host closed the connection)
[14:23:33] *** Joins: cage (~cage@dynamic-adsl-78-15-41-207.clienti.tiscali.it)
[14:27:27] *** Joins: pjb (~pjb@user/pjb)
[14:31:49] *** Joins: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3)
[14:36:01] *** Joins: cosimone` (~user@5.171.24.60)
[14:37:07] *** Quits: frgo (~frgo@p200300deef0cee00f40feeaddfdc708b.dip0.t-ipconnect.de) (Remote host closed the connection)
[14:37:34] *** Quits: cosimone (~user@2001:b07:ae5:db26:a7aa:8027:6b4e:2fb3) (Ping timeout: 252 seconds)
[14:37:35] *** Joins: frgo (~frgo@p200300deef0cee0045414188b4ff4040.dip0.t-ipconnect.de)
[14:39:25] *** Quits: cosimone` (~user@5.171.24.60) (Remote host closed the connection)
[14:39:58] *** Joins: cosimone (~user@5.171.24.60)
[14:42:00] *** Quits: cosimone (~user@5.171.24.60) (Remote host closed the connection)
[14:42:18] *** Joins: cosimone (~user@5.171.24.60)
[14:57:37] *** Joins: lisp123_ (~lisp123@45.130.83.218)
[15:01:14] *** Quits: lisp123 (~lisp123@5.30.23.247) (Ping timeout: 260 seconds)
[15:09:22] *** Quits: cosimone (~user@5.171.24.60) (Remote host closed the connection)
[15:13:55] *** Joins: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431)
[15:23:52] *** Quits: Inline (~Inline@2a02:908:1252:7a80:c035:deeb:51be:5431) (Remote host closed the connection)
[15:28:40] *** Joins: random-nick (~random-ni@87.116.165.220)
[15:29:27] *** Joins: cosimone (~user@93-34-133-37.ip49.fastwebnet.it)
[15:30:10] *** Joins: lisp123 (~lisp123@5.30.23.247)
[15:33:47] *** Quits: lisp123_ (~lisp123@45.130.83.218) (Ping timeout: 245 seconds)
[15:36:57] *** Joins: Inline (~Inline@aftr-37-201-241-102.unity-media.net)
[15:39:23] <jcowan> You can discuss Coalton here, or of course in #lisp: it is a Lisp, so on-topic there
[15:50:01] *** Quits: kstuart (~kstuart@85.203.46.113) (Ping timeout: 252 seconds)
[16:26:08] *** Quits: cosimone (~user@93-34-133-37.ip49.fastwebnet.it) (Remote host closed the connection)
[16:58:51] *** Quits: amb007 (~a_bakic@93.150.22.93.rev.sfr.net) (Read error: Connection reset by peer)
[16:59:08] *** Joins: amb007 (~a_bakic@23.184.126.78.rev.sfr.net)
[17:14:48] *** Quits: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de) (Remote host closed the connection)
[17:30:20] *** Joins: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de)
[17:31:00] *** Joins: Lycurgus (~juan@98.4.112.204)
[17:31:45] *** Joins: yitzi (~yitzi@173-27-106-188.client.mchsi.com)
[17:32:37] <shka> jcowan: coalton looks like a very useful thing for certain applications
[17:33:10] <shka> if i understand correctly, the whole point is to employ static type safety
[17:33:21] <shka> it is not about the performance whatsoever
[17:36:13] *** Quits: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de) (Remote host closed the connection)
[17:42:27] *** Quits: hendursa1 (~weechat@user/hendursaga) (Quit: hendursa1)
[17:42:44] *** Joins: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de)
[17:42:53] *** Joins: hendursaga (~weechat@user/hendursaga)
[17:45:11] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[17:50:10] *** Joins: igemnace (~ian@user/igemnace)
[18:09:27] *** Joins: perrierjouet (~perrier-j@modemcable012.251-130-66.mc.videotron.ca)
[18:19:29] *** Quits: lisp123 (~lisp123@5.30.23.247) (Quit: Leaving...)
[18:24:58] *** Joins: Fare (~fare@2601:184:4a7f:995c:9a37:dfdd:f81a:20fa)
[18:31:30] *** Joins: waleee (~waleee@2001:9b0:216:8200:d457:9189:7843:1dbd)
[18:37:23] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[18:38:16] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[18:39:36] *** Joins: aleamb (~aleamb@81.61.187.171.dyn.user.ono.com)
[18:42:26] *** Quits: kulernil (~kulernil@gateway/tor-sasl/kuler) (Remote host closed the connection)
[18:42:48] *** Joins: kulernil (~kulernil@gateway/tor-sasl/kuler)
[18:43:29] *** Joins: abrantesasf (abrantesas@gateway/vpn/protonvpn/abrantesasf)
[18:47:27] <Josh_2> Good afternoon everyone
[18:47:39] *** Quits: Inline (~Inline@aftr-37-201-241-102.unity-media.net) (Quit: Leaving)
[18:50:44] <beach> Hello Josh_2.
[18:52:14] *** Quits: Fare (~fare@2601:184:4a7f:995c:9a37:dfdd:f81a:20fa) (Ping timeout: 260 seconds)
[19:01:32] *** Joins: karlosz (~karlosz@12.196.174.98)
[19:19:14] *** Joins: sjl (~sjl@cpe-66-66-5-59.rochester.res.rr.com)
[19:35:00] *** Quits: Alfr (~Alfr@user/alfr) (Ping timeout: 265 seconds)
[19:40:38] *** Quits: mariari (~mariari@user/mariari) (Quit: WeeChat 3.2)
[19:43:48] *** Joins: mariari (~mariari@user/mariari)
[19:47:37] *** Quits: frgo (~frgo@p200300deef0cee0045414188b4ff4040.dip0.t-ipconnect.de) (Quit: Leaving...)
[19:55:09] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[19:55:23] *** Joins: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20)
[20:19:40] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[20:21:40] *** Joins: sander (~sander@user/sander)
[20:23:36] *** Joins: frgo (~frgo@p200300deef0cee009d753a206e639554.dip0.t-ipconnect.de)
[20:25:34] *** Quits: frgo (~frgo@p200300deef0cee009d753a206e639554.dip0.t-ipconnect.de) (Client Quit)
[20:26:30] *** Quits: khrbt_ (~znc@user/khrbt) (Ping timeout: 260 seconds)
[20:29:23] *** Quits: Lycurgus (~juan@98.4.112.204) (Quit: Exeunt)
[20:29:45] *** Joins: khrbt (~znc@user/khrbt)
[20:44:22] *** Joins: Alfr (~Alfr@user/alfr)
[20:44:43] *** Joins: lisp123 (~lisp123@5.30.23.247)
[20:47:09] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[20:47:50] <lisp123> Is there a optimal way to create a hash table with a custom test function, without defining your own hash function to go alongside the test condition?
[20:48:18] <lisp123> I can't imagine there is..
[20:48:29] <beach> No, no programming system can guess a hash function from an equality test.
[20:48:57] <lisp123> Thought so, thanks
[20:56:06] <pjb> lisp123: what do you mean by "optimal"?
[20:57:20] <pjb> You can create a hash-table with a test function AND a hash function.  Note that sxhash is provided, but 1- it's not generic, 2- it's not necessarily good for your objects, 3- it's not used by CL hash-tables (or at least, it's implementation dependent whether it's used or not).
[20:57:55] <lisp123> Unfortunately I do not have a hash function
[20:58:01] <pjb> If by "optimal" you mean with minimal programmer effort, then you can create a hash-table as a wrapper with a custom test and hash-function using cl:hash-table to avoid having to re-implement everything.
[20:58:28] <pjb> lisp123: then, perhaps you have all the keys in advance? There are algorithms to create perfect hash-functions given a known list of keys.
[20:58:36] *** Quits: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de) (Remote host closed the connection)
[20:59:00] <lisp123> No, unfortunately not
[20:59:20] <pjb> Then, as beach said, the answer is no.
[20:59:27] <lisp123> Issue is I want to match (1 * 3) to any list where (1 2 3), (1 4 3), etc.
[20:59:34] <lisp123> Thanks, thought so
[20:59:40] <pjb> Oh, you want a pattern matcher!
[20:59:42] *** Joins: gaqwas (~john@dynamic-095-114-050-136.95.114.pool.telefonica.de)
[21:00:28] <pjb> Or you can write a wrapper computing the key: (defun get-my-key (list) (list (first list) (third list)))    (setf (gethash (get-my-key (my-object-list object)) table) object)
[21:00:47] <pjb> Using an 'equal cl:hash-table.
[21:01:12] <lisp123> Unfortunately that was but an example
[21:01:25] <lisp123> I equally want to be able to filter on (1 2 *) and so forth
[21:02:05] <lisp123> I have a function which can match two lists and disregard any discrepancies where there is a *
[21:02:39] <pjb> lisp123: if you have a finite number of combinations,  you can have multiple entries in the hash-table.
[21:03:05] <pjb> (dolist (combination (compute-keys object)) (setf (gethash combination) table) object)
[21:03:23] <lisp123> That's a good idea
[21:03:41] <pjb> You can use keys such as: (1 2 *) (1 * 3) (* 2 3)
[21:04:07] <pjb> And since possibly each pattern can match several object, you'd rather use push than setf.
[21:04:19] <pjb> (dolist (combination (compute-keys object)) (push object (gethash combination '()) table))
[21:04:47] <pjb> or pushnew.
[21:04:59] <lisp123> I would need to create an entry for each combination, yes?
[21:05:49] <pjb> yes.
[21:06:39] <lisp123> Thanks, that could work (up to a certain list size)
[21:08:52] <pjb> Yes.
[21:09:31] <pjb> Then if you have lists, or similarly structured keys, you could have a tree of hash-tables.
[21:09:45] <lisp123> I was thinking just that
[21:11:02] <lisp123> The alternative is to memoize each call
[21:11:23] <pjb> (defun select (key table) (cond ((null table) nil) ((null key) table) ((eql '* (first key)) (mapcan (lambda (table) (select (rest key) table)) (hash-table-elements table))) (t (select (rest key) (gethash (first key) table)))))
[21:11:37] <pjb> (select '(1 * 2) table-of-tables)
[21:11:39] <lisp123> (but that doesn't work if the hash table increases)
[21:12:01] <lisp123> thanks - that might be the best way!
[21:12:05] <lisp123> a tree of hash tables
[21:14:43] <lisp123> That's very elegant code
[21:18:02] *** Joins: karlosz (~karlosz@12.196.174.98)
[21:20:02] <pve> I'm probably wrong, but is mapcan appropriate there?
[21:22:18] *** Quits: yitzi (~yitzi@173-27-106-188.client.mchsi.com) (Quit: Leaving)
[21:29:20] <pjb> pve: it may lack a ensure-list somewhere but the idea is that when there's a *, there may be multiple hits. So we return a list of results.
[21:29:40] <pjb> pve: of course we must ensure that all the lists are built in select.
[21:30:52] <pve> pjb: alright, i see
[21:36:53] *** Quits: sander (~sander@user/sander) (Quit: So long! :))
[21:41:07] <pjb> pve: https://termbin.com/9tuu
[21:41:09] <pjb> lisp123: https://termbin.com/9tuu
[21:43:20] <pjb> pve: you're right, I need to copy the list build by pushnew, otherwise it's made circular…
[21:44:28] *** Joins: markthom_ (~markthom_@2604:3d09:3e7e:e32e:3b:371e:5b3f:2887)
[21:45:34] <pjb> pve: https://termbin.com/1pi8
[21:45:36] <pjb> lisp123: https://termbin.com/1pi8
[21:47:54] <pjb> with (setf select) you cannot have a wildcard. (* is just taken as a key, but it couldn't be retrieved alone with (select).
[21:48:19] *** Quits: cosimone (~user@2001:b07:ae5:db26:c24a:d20:4d91:1e20) (Remote host closed the connection)
[21:52:38] *** Quits: karlosz (~karlosz@12.196.174.98) (Quit: karlosz)
[21:59:52] *** Joins: ln43 (~ln43@user/ln43)
[22:00:13] <pve> pjb: that's great!
[22:03:03] *** Joins: Bi[m] (~bimatrixo@2001:470:69fc:105::109a)
[22:06:05] <lisp123> pjb: Thanks!
[22:06:59] <ln43> hi all: is there an updated version of AIMA (4th edition) using CL?
[22:07:17] *** Joins: sander (~sander@user/sander)
[22:41:27] *** Joins: Oladon (~olad@98.43.81.226)
[22:49:23] *** Joins: hexology (~hexology@user/hexology)
[22:50:48] *** Joins: vats (~vats@103.70.83.191)
[22:57:53] *** Joins: test_user (~test_user@2a02:908:1252:7a80:7b8c:52d6:562c:de3a)
[23:00:29] <pjb> ln43: yes, it's called PAIP.
[23:01:57] <pjb> PAIP = Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp
[23:03:39] <ln43> ok... i was starting reading paip but aima is the recommended book for AI looking around
[23:04:26] <ln43> anyway ok... i will try to read both but is better start from only one to avoiid any possible confusion
[23:10:01] <ln43> but looking at the contents of PAIP is not almost the same as AIMA4e ... at least all the algorithms are not included
[23:10:45] <pjb> It would have been too big to include all of them.  And so, they're left as an exercise for the reader.
[23:10:47] <pjb> Have fun!
[23:11:35] <ln43> ok, I was asking just to know if there was an interest in the CL community to have the code available for further exploration using M-. and M-, that is the approach i'm currently using
[23:12:20] <pjb> ln43: the code for paip is available.
[23:12:32] <pjb> https://github.com/norvig/paip-lisp
[23:12:43] <ln43> yes i was looking to that too
[23:12:45] <_death> AIMA is very different from PAIP, but both have CL source code associated with them.. I don't know about the fourth edition specifically
[23:13:05] <ln43> ok but there is no code for AIMA4e available
[23:13:22] <ln43> only implementations in other languages
[23:13:26] <_death> https://github.com/aimacode/aima-lisp/
[23:13:32] <_death> are you aware of this?
[23:14:06] <ln43> it's not full-featured as the aima-other-language
[23:14:08] <_death> maybe you can take it as an exercise to update it
[23:14:18] <ln43> yes i'm aware since i would try to learn something
[23:14:36] <pjb> Oh! This aima-lisp is implemented by Norvig too.
[23:15:07] <ln43> yes according to the first edition of the book printed in the 1995
[23:15:21] <pjb> Well, eventually Norvig turned to Python, for the money in it, so obviously he didn't maintain the lisp code for the newer editions.
[23:15:47] <ln43> ok, but look how many mantainers there are, it's not only him
[23:16:17] <pjb> Indeed. Now you can fork, contribute, and send a PR, but somehow I doubt it'd be merged soon.
[23:16:54] <pjb> At least it's MIT-licensed.
[23:17:06] <Josh_2> How do you open the inspector in SLIME? Normally I just click on an object in sly and it opens up.
[23:17:24] <ln43> only 1 contributor to only port all that is contained in https://github.com/aimacode/aima-pseudocode is not enough
[23:17:40] <ln43> it's a full time job ... for some months
[23:18:00] <ln43> for only 1 experienced person... and for a learner maybe 1 year or more
[23:18:00] <_death> ln43: this would make for a good way to learn
[23:18:36] <_death> ln43: if it takes some months, so be it..
[23:18:44] <pjb> https://github.com/aimacode/aima-lisp/ not -pseudocode.
[23:20:04] <ln43> yes but the pseudo code version adheres to the last version of the book
[23:20:09] <ln43> i suppose
[23:28:10] *** Quits: ln43 (~ln43@user/ln43) (Quit: Connection closed)
[23:56:25] *** Joins: nature_ (~nature@mail.blazebone.com)
