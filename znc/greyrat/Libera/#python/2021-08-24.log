[00:00:18] *** Joins: besnn (~besnn@user/besnn)
[00:00:39] *** Joins: kmh_ (~kmh@p2e5117f2.dip0.t-ipconnect.de)
[00:01:08] <alguien> ChrisWarrick, because https://www.oreilly.com/library/view/fluent-python/9781491946237/ch04.html#idm139636560305520 promises that "ß" becomes “ss” and I don't see how one codepoint could become two there
[00:01:21] *** Joins: fikran (~fikran@user/fikran)
[00:01:39] *** Parts: ChrisEnglish (~Chris@185.215.215.245) ()
[00:02:11] <ChrisWarrick> alguien: why couldn’t it become two? there are lookup tables involved with case conversions, and nothing is stopping them from mapping one character to many.
[00:02:32] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:03:02] *** Joins: derelict (~derelict@user/derelict)
[00:03:03] <ChrisWarrick> alguien: https://www.unicode.org/Public/13.0.0/ucd/CaseFolding.txt
[00:03:17] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[00:03:46] *** Parts: chris_99 (uid26561@id-26561.tooting.irccloud.com) ()
[00:07:18] <alguien> That's exactly what I'm looking for, thanks! Is _PyUnicode_ExtendedCase a lookup table though? Looks like its result is assigned to a single element of res
[00:09:47] *** Quits: daoudr_ (~daoudr@178.197.213.56) (Ping timeout: 240 seconds)
[00:09:54] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[00:09:55] <aphysically> whoa memoization is interesting
[00:10:44] <aphysically> is @cache of an instance method local to an instance?
[00:10:46] <aphysically> I guess I can just test
[00:11:25] *** Joins: koperak (~koperak@user-5-173-139-43.play-internet.pl)
[00:11:25] *** Quits: koperak (~koperak@user-5-173-139-43.play-internet.pl) (Read error: Connection reset by peer)
[00:12:04] *** Quits: falk689 (~falk689-q@gateway/tor-sasl/falk689) (Remote host closed the connection)
[00:12:19] *** Joins: falk689 (~falk689-q@gateway/tor-sasl/falk689)
[00:12:29] <rama> nedbat: i chatted with a colleague about the idea, they stated that its to prevent attributes from being partially initialized.
[00:13:16] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[00:13:51] <ChrisWarrick> alguien: res is the array with the output of casefolding a single character, note there's also a for loop
[00:14:10] <SnoopJ> aphysically, the cache is created at decorator call time, which is when the method is being defined. I believe the cache is shared between instances.
[00:14:14] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 250 seconds)
[00:14:19] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[00:14:24] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[00:14:33] *** Lord_of_Life_ is now known as Lord_of_Life
[00:15:56] *** Quits: freeworld (~vit@chello085216193138.chello.sk) (Quit: Konversation terminated!)
[00:16:15] <aphysically> huh that's a shame
[00:16:29] <alguien> ChrisWarrick, apparently my eyes have not yet adjusted to C, it's been a while, thanks
[00:16:52] <ChrisWarrick> alguien: yeah, it can be intimidating sometimes
[00:17:11] <alguien> ChrisWarrick, been looking for what you linked for hours, thanks :)
[00:17:29] <alguien> (the unicode doc)
[00:18:23] *** Quits: venue (~venue@user/venue) (Quit: was tired)
[00:19:29] <SnoopJ> aphysically, oh, but I forgot that `self` plays into this. So it'll be shared, yes, but each instance basically has its own subspace of that cache because of this
[00:19:40] *** Quits: pro_z (~pro_z@37.214.45.81) (Ping timeout: 240 seconds)
[00:19:47] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[00:20:03] <aphysically> oh that's not so bad, so it's just a memory leak but not impossible to use together
[00:20:09] <SnoopJ> it's not a "memory leak," no
[00:20:21] <SnoopJ> an infinite cache can use an arbitrary amount of memory, though
[00:20:29] <aphysically> err, I just mean
[00:20:37] <aphysically> if I clear an instance the cache won't clear
[00:21:04] <SnoopJ> the cache will hold onto that stuff cached on that instance's behalf until all instances have disappeared, if that's what you mean
[00:21:15] *** Joins: Lope (~lope@user/lope)
[00:21:22] *** Quits: mei (~mei@user/mei) (Ping timeout: 258 seconds)
[00:21:23] <Lope> running debian bullseye
[00:21:33] <Lope> when I type python, I get command not found
[00:21:39] <Lope> but I do have python3 installed
[00:22:12] <Lope> `python3 --version` shows it's installed.
[00:22:28] <Lope> Do I need to somehow symlink python to python3 in /usr/sbin or whatever?
[00:22:36] *** Parts: brownan (~brownan@2001:470:69fc:105::e01b) ()
[00:22:46] <nedbat> rama: hmm, that's an interesting angle.  But "partially initialized" would only happen if an exception happened in __init__.  presumably, the exception would cause the object to be unused.
[00:22:48] <SnoopJ> aphysically, if you wanted it to be truly isolated per-instance, you'd probably want to do something like `self.method = cache(self.method)` in __init__ or maybe write your own decorator
[00:22:54] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 250 seconds)
[00:23:23] *** Joins: aeadio (~aead@user/aead)
[00:23:36] <SnoopJ> Lope, you can install the python-is-python3 package which basically does that for you, or use update-alternatives.
[00:23:44] *** Quits: aeadio (~aead@user/aead) (Client Quit)
[00:23:47] <Lope> SnoopJ, ur my hero.
[00:23:49] <SnoopJ> (or just use `python3` instead of `python`)
[00:24:21] *** Quits: jug (~jug@user/jug) (Quit: WeeChat 3.2)
[00:24:53] *** Joins: oriba (~oriba@dynamic-077-013-016-203.77.13.pool.telefonica.de)
[00:25:11] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:ffcb:261e:d71f:6f71) (Ping timeout: 250 seconds)
[00:26:15] <aphysically> SnoopJ: https://bugs.python.org/issue19859 yeah ok
[00:26:18] *** Joins: rakoon (~rakoon@2a02:2149:824f:5900:2829:2f58:51c5:3a2c)
[00:26:38] <aphysically> so even when I no longer have a reference to an instance with a cached instance method, the instance will be kept alive for the lifetime of the program
[00:27:17] <aphysically> but because of 'self' at least we get no conflicts between instances
[00:27:18] <SnoopJ> there will be a reference in the cache, and it only takes one to keep an object alive
[00:27:26] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:27:36] <aphysically> yeah, okay
[00:29:06] *** Joins: nips_ (~nips@abv84.internetdsl.tpnet.pl)
[00:29:24] *** Quits: computeiro (~Wender@189.37.66.42) (Ping timeout: 250 seconds)
[00:29:31] *** Quits: manin (~x@185.242.190.95) (Ping timeout: 250 seconds)
[00:29:40] *** Quits: nips (~nips@abv84.internetdsl.tpnet.pl) (Ping timeout: 240 seconds)
[00:31:27] *** Quits: alguien (~alguien@user/alguien) (Ping timeout: 240 seconds)
[00:31:47] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) (Client Quit)
[00:32:48] *** Joins: qlixed (~qlixed@181.44.129.13)
[00:33:25] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 250 seconds)
[00:33:25] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 250 seconds)
[00:34:57] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:35:22] <mike18> hi how can i output all python logging data to a text file? make run > out.txt seems not to foward all logging data to that file...
[00:36:31] *** Joins: MikZyth (~MikZyth@188.65.242.202)
[00:38:14] *** Joins: computeiro (~Wender@189.37.66.42)
[00:41:00] *** Joins: Naan` (~Naan@user/naan)
[00:45:08] *** Quits: Haxxa (~Haxxa@122.199.46.17) (Quit: Haxxa flies away.)
[00:46:16] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[00:46:39] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:47:07] <stemid_> mike18: try redirecting both stderr and stdout. you can redirect stderr to stdout in bash like this I believe 2>&1
[00:47:25] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[00:47:37] *** Joins: Haxxa (~Haxxa@122.199.46.17)
[00:47:41] *** Joins: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl)
[00:47:41] <Wooble> probably better to just configure the logger to log to a file...
[00:47:49] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) ()
[00:48:03] *** Joins: p4rpc (~p4rpc@89-69-17-47.dynamic.chello.pl)
[00:48:15] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:48:24] *** Quits: wootehfoot (~wootehfoo@user/wootehfoot) (Read error: Connection reset by peer)
[00:49:18] *** Joins: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net)
[00:53:15] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:53:35] *** Quits: yaalon (~yaalon@201.170.112.29.dsl.dyn.telnor.net) (Client Quit)
[00:53:38] *** Joins: gruuf (~gruuf@94.31.99.29)
[00:53:40] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860)
[00:53:47] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 250 seconds)
[00:54:08] *** Joins: thiras (~thiras@user/thiras)
[00:54:13] *** Quits: yogoyo (~paddy@user/yogoyo) (Quit: WeeChat 3.2)
[00:54:43] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[00:54:47] *** Quits: GiLgAmEzH (~gilgamezh@a210077.upc-a.chello.nl) (Ping timeout: 240 seconds)
[00:55:34] *** Joins: emika2 (~emika@185.207.249.215)
[00:55:47] *** Quits: emika (~emika@83.136.182.157) (Ping timeout: 240 seconds)
[00:55:47] *** emika2 is now known as emika
[00:57:04] <rama> nedbat: I was thinking if the exception was raised during __init__ it seems unlikely that the instance would continue to live on within the runtime...
[00:57:15] <nedbat> rama: yes, exactly.
[00:57:41] <nedbat> rama: the idea of waiting to assign any attributes until the end seems like defending against a problem that doesn't happen.
[00:57:54] *** Joins: Hokedli (~lasliedv@gateway/tor-sasl/hokedli)
[00:59:06] *** Joins: fanis30 (~fanis30@adsl-11.37.6.3.tellas.gr)
[01:00:26] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860) (Read error: Connection reset by peer)
[01:00:27] *** Joins: txtsd (~txtsd@user/txtsd)
[01:00:45] *** Joins: koperak (~koperak@79.191.247.120.ipv4.supernova.orange.pl)
[01:00:49] *** Joins: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860)
[01:02:38] *** Joins: orbatos (~orbatos@user/orbatos)
[01:02:43] *** Quits: orbatos (~orbatos@user/orbatos) (Remote host closed the connection)
[01:03:07] *** Joins: orbatos (~orbatos@user/orbatos)
[01:04:23] <mike18> stemid_: make run >> out.txt 2>&1
[01:04:25] <mike18> like that?
[01:05:40] *** Quits: the-mask (~the-mask@user/the-mask) (Ping timeout: 240 seconds)
[01:07:17] *** Joins: abrantesasf (~abrantesa@2804:14d:b086:4b3c:2e56:dcff:fedb:62f)
[01:07:25] *** Quits: rany (~rany@user/rany) (Ping timeout: 252 seconds)
[01:07:46] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[01:09:00] *** Quits: rpkilby_ (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[01:09:27] *** Quits: rakoon (~rakoon@2a02:2149:824f:5900:2829:2f58:51c5:3a2c) (Ping timeout: 240 seconds)
[01:09:35] *** Joins: rpkilby (~rpkilby@ec2-34-252-84-235.eu-west-1.compute.amazonaws.com)
[01:09:41] *** Quits: Powerhouse6666 (~Powerhous@2604:3d08:5b7f:f6fd:db20:288a:d0ba:f860) (Remote host closed the connection)
