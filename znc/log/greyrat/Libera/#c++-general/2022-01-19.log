[00:02:27] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[00:11:19] *** Joins: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349)
[00:12:30] <PJBoy> all of life is just exchanging numbers for other numbers
[00:12:33] <great_taste> can I use the value of an entry in an enum class as the size of an std::array?
[00:12:54] <PJBoy> absolutely
[00:13:29] <great_taste> enum class E { one, count }; std::array<int, E::count> arr;
[00:13:46] <LordKalma> you have to cast them
[00:13:52] *** Joins: Tokamak (~Tokamak@172.58.188.35)
[00:13:53] <rpav> or dont' use enum class
[00:14:31] <rpav> { array<int, E::count> a; } struct E { enum { one, count }; };
[00:14:32] <geordi>  
[00:14:50] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:7d95:2034:27f9:a41b)
[00:14:51] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:7d95:2034:27f9:a41b) (Changing host)
[00:14:51] *** Joins: RoKenn (~RoKenn@user/rokenn)
[00:15:09] <great_taste> ok already changed my mind, I don't need an enum anymore :P
[00:15:20] <LordKalma> { array<int, static_cast<size_t>(E::count)> a; } enum class E: size_t { one, count }
[00:15:20] <geordi> error: new types may not be defined in a return type
[00:15:48] <LordKalma> { array<int, static_cast<size_t>(E::count)> a; } enum class E { one, count }
[00:15:48] <geordi> Same error.
[00:15:57] <PJBoy> { array<int, static_cast<size_t>(E::count)> a; } enum class E: size_t { one, count };
[00:15:58] <geordi>  
[00:16:02] <rpav> enum class: making enums less useful in return for making them still not classes
[00:16:23] <LordKalma> ah I missed the end;
[00:16:29] <PJBoy> they're good for when you need arbitrary names and not named numbers
[00:16:41] <rpav> not really
[00:16:44] <rpav> use types for this
[00:16:48] <great_taste> ok I see, thanks
[00:16:59] <PJBoy> like enum struct colour { red, blue, green };
[00:17:06] <rpav> you don't need that
[00:17:16] <PJBoy> you don't need much of anything
[00:17:30] <PJBoy> just decrement and branch if not zero
[00:17:48] <rpav> you can either use types, or you should be using a numeric enum; having enum convert _to number_ is its primary useful feature (though you don't want arbitrary numbers converting _to it_)
[00:18:32] <PJBoy> an enum class' primary feature is that it doesn't implicitly convert to a number
[00:18:38] <rpav> yes, thus it is shit
[00:18:46] <PJBoy> nah it's good for that colour enum
[00:18:46] <rpav> ill-conceived and idiotic
[00:18:53] <rpav> that color enum is useless shit
[00:18:55] <PJBoy> and other categorisational enumerations
[00:18:56] <rpav> no one does that
[00:19:05] <PJBoy> citation needed
[00:19:18] <LordKalma> qt has lots of enums for various crap
[00:19:25] <rpav> i think you need to cite where such a thing is actually useful, rather than actually mapping Red,Green,Blue to an element number
[00:19:51] <PJBoy> it's useful to store a colour
[00:19:56] <rpav> what might also be useful, but probably isn't, is struct Color { struct Red {}; struct Green {}; struct Blue {}; }; for something purely categorical
[00:19:59] <rpav> PJBoy: it is not
[00:20:03] <PJBoy> you can then use that colour as part of a switch for example
[00:20:16] <rpav> what is useful for a color is struct { float r, g, b, a; }; or similar
[00:20:19] <PJBoy> problem with struct Color { ... }; is you can't change the colour
[00:20:37] <rpav> or struct { float c[4]; };
[00:20:38] <PJBoy> problem with struct { rgb}  is that it's a number
[00:20:43] <LordKalma> class color_8bit {std::byte r,g,b;};
[00:20:49] <PJBoy> what if I just wanted traffic light colours
[00:20:59] <PJBoy> or colours selectable for a dropdown box
[00:21:05] <rpav> but realistically everyone just does { float r, g, b, a; } because you don't really need to interate thme numerically
[00:21:08] <LordKalma> then I'd enum them :D
[00:21:50] <PJBoy> anything that isn't numeric, but is enumerable, is suitable for enum classes
[00:22:10] <rpav> or index them numerically, even with a dropdown, because you don't really put _the color element_ in the dropdown, and if you did you still need to map it to some function which does something useful (such as filter a channel) for a particular element, and _then_ you probably have separate channelized image data, so you have an index _there_
[00:23:01] <rpav> even if you _did_ have an enum that _did_ index, we've determined that it doesn't convert to a number, and would thus be useless in this case over a regular enum / struct { enum }
[00:23:17] <rpav> or "less useful" as i originally said
[00:23:43] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[00:24:21] <rpav> so basically, unlike the people who came up with `enum class`, and the long chain of failure that followed and allowed it into the language, one should actually look at what's useful, what's actually used, and maybe model based off that and not hypothetical "categorical" `{ Red, Green, Blue }`
[00:25:03] * great_taste misses Swift enums
[00:25:50] <PJBoy> they probably did look into it as such
[00:25:57] <PJBoy> as it does turn out to be useful
[00:26:40] *** Joins: EdFletcher (~PKD@user/edfletcher)
[00:28:03] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[00:28:19] <rpav> simply making unsubstantiated claims as such does not make it so
[00:28:29] *** Joins: gehn (~gehn@user/gehn)
[00:28:39] <PJBoy> https://wg21.link/N2347
[00:28:44] <rpav> struct { enum { .. } }; is vastly more useful for all the reasons .. you can prevent implicit conversion-to, provide actual methods, etc
[00:29:11] *** Quits: Kerr (~Kerr@c-73-193-43-154.hsd1.wa.comcast.net) (Quit: Client closed)
[00:29:31] <PJBoy> hey they even use the colour example
[00:29:33] <rpav> the paper simply claims these things are problems and has similar uselessly academic cases
[00:29:44] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc9:6189:5e0d:b006) (Quit: Quit)
[00:30:02] *** Quits: Ivii (~Ivyy@2001:a62:4c3:8e01:6d96:190f:824f:1d2) (Quit: Leaving)
[00:30:50] <PJBoy> it explains why it's better than your solution
[00:30:53] <rpav> it does not
[00:30:58] <PJBoy> yeah it does
[00:31:15] <rpav> it simply claims a thing is a problem and has a contrived example
[00:31:22] <PJBoy> no it doesn't
[00:31:28] <rpav> "nuh uh!"
[00:31:33] <PJBoy> it specifies the problem and goes into detail
[00:31:38] <PJBoy> it talks about your solution
[00:31:49] <rpav> that's niuce
[00:33:28] <rpav> "this thing is a problem because this contrived yet somehow dubious-still example seems to be a problem, even though there is no evidence that this is, in fact, something error-prone in practice, and this other thing doesn't fix the non-problem, so this is better"
[00:34:05] <rpav> what _is_ error-prone in practice is anything dealing with unit quantities, and adding a unit system to the language would be pretty nice
[00:34:07] <yolo> what does tuple bring as struct does all it do plus more readable
[00:34:34] <PJBoy> a tuple can hold an arbitrary number of arbitrary types
[00:34:39] <rpav> not for _conversion_, though that's an easy/gee-whiz side effect and you can do neat tricks with types and operators, but _mostly_ preventing implicit conversions between them
[00:34:40] <PJBoy> it's useful for template metaprogramming
[00:34:40] *** Joins: Itaru (~Itaru@185.65.135.251)
[00:34:56] <rpav> though likely they'd fuck it up and allow implicit unit conversions
[00:35:19] <rpav> yolo: a tuple can be more trivially generated than a struct
[00:35:43] <yolo> i c, thanks!
[00:36:07] <LordKalma> do not use tuples unless you're making TMP
[00:36:12] <LordKalma> use structs with *NAMES*
[00:36:18] <PJBoy> yeah
[00:36:22] <rpav> eh
[00:36:29] <PJBoy> or unless the tuple is kinda incidentally there
[00:36:31] <rpav> they can be useful for mulitple return values
[00:36:33] <PJBoy> like with std::tie
[00:36:37] <LordKalma> yolo, tuple is a convenient construct in template programming
[00:36:41] <LordKalma> rpav, nope, still struct
[00:37:08] <LordKalma> any API with tuples is shit
[00:37:09] <jkaye> Tuple is completely fine if you mean for a return value to be destructured
[00:37:21] <jkaye> Dogma is bad
[00:37:28] <jkaye> Only a Sith deals in absolutes
[00:37:29] <jkaye> etc etc.
[00:37:32] <PJBoy> nah it's trash
[00:37:45] <LordKalma> I accept nuance every time it makes sense
[00:37:51] <LordKalma> but it's just non-self-documenting code
[00:37:52] <rpav> LordKalma: while that's probably the case in theory, making a unique struct for a return type sucks as much as making one for a parameter type
[00:37:57] <LordKalma> terrible across api boundaries
[00:38:00] <jkaye> Every time /you decide/ it makes sense
[00:38:20] <rpav> and i mean, plenty of stuff uses pair<> returns which is at least as bad, so it's fairly idiomatic
[00:38:30] <PJBoy> pair stuff is just as bad
[00:38:34] <LordKalma> indeed it is
[00:38:43] <PJBoy> hence why stdlib is moving away from that idea
[00:38:48] <rpav> personally i think it's worse, but pair predates tuple so not much choice
[00:38:58] <LordKalma> yes, i would make 5000 small structs if I had to
[00:39:07] <LordKalma> just because it makes for an expressive api
[00:39:21] <rpav> not really as much as you'd think
[00:39:37] <rpav> like, you can't bind names, so it's not really that much value on returns
[00:39:57] <PJBoy> you wouldn't take a tuple as your argument type
[00:40:08] <LordKalma> yes, that is a problem with the language. but still, if you return  tuple you're saing "fuck you read the docs"
[00:40:12] <PJBoy> so why would you return a tuple
[00:40:14] <rpav> well ideally tuple _is_ the argument type for any function without named arguments
[00:40:30] *** Quits: paul424 (~tom@ip-5-172-237-8.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[00:41:10] <rpav> like really, every function should be `R f A` where R is the return-type and A is the argument-type, and A can be a struct or tuple or whatever makes sense
[00:41:51] <rpav> (e.g. `auto v = make_vector(1, 2, 3, ...)` you probably want a tuple)
[00:42:21] <LordKalma> do you?
[00:42:23] <PJBoy> multiple function parameters is a holdover from C
[00:42:28] <PJBoy> :)
[00:42:29] <rpav> LordKalma: yes
[00:42:40] <rpav> PJBoy: basically
[00:42:40] <LordKalma> you'd have to template that anyway since tuple has a compile-time fixed size
[00:42:46] <LordKalma> and at that point you can just use T...
[00:43:13] <rpav> LordKalma: right but it doesn't matter, because in this model there is only one parameter to any given function
[00:43:35] <rpav> (and you bootstrap it with tuple)
[00:45:12] <rpav> you get neat things when calls and returns are symmetric, and you can map one to the other and stuff
[00:45:20] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Quit: sord937)
[00:53:30] *** Quits: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) (Quit: Client closed)
[00:56:38] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc9:6189:5e0d:b006)
[00:59:13] *** Quits: jsbach (~jsbach@2a01:c23:5cd4:5d00:242d:9ac5:ca5a:20b9) (Ping timeout: 268 seconds)
[01:01:36] *** Joins: NoXzema_ (~cq-work@user/cq-work)
[01:01:36] *** NoXzema_ is now known as NoXzema
[01:02:11] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[01:02:28] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[01:05:34] *** Joins: EdFletcher (~PKD@user/edfletcher)
[01:06:48] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[01:07:17] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[01:07:43] *** Joins: RoKenn (~RoKenn@2001:a61:35b1:ca01:2348:4014:f84d:cc8)
[01:07:44] *** Quits: RoKenn (~RoKenn@2001:a61:35b1:ca01:2348:4014:f84d:cc8) (Changing host)
[01:07:44] *** Joins: RoKenn (~RoKenn@user/rokenn)
[01:09:12] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Client Quit)
[01:09:20] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[01:09:38] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[01:15:03] <kalven> how neat is it?
[01:15:15] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[01:18:28] *** Quits: robod34 (~Username@79.113.195.239) (Quit: Goe offline! ( http://marius.sucan.ro/ ))
[01:18:28] *** Joins: johnny (~johnny@user/johnny)
[01:20:38] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Quit: leaving)
[01:23:02] *** Quits: malloy (~jimery@113.116.52.211) (Ping timeout: 250 seconds)
[01:23:36] *** Quits: Tokamak (~Tokamak@172.58.188.35) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:23:37] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[01:25:06] *** Joins: malloy (~jimery@113.116.52.22)
[01:33:25] *** Quits: magla (~gelignite@55d4217a.access.ecotel.net) (Quit: Stay safe!)
[01:41:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[01:41:18] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[01:41:18] *** ChanServ sets mode: +v npaperbot
[01:41:39] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: Life beckons)
[01:42:13] <ville> yellow
[01:44:45] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[01:45:36] *** Joins: jsbach (~jsbach@dynamic-077-191-115-085.77.191.pool.telefonica.de)
[01:48:31] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[01:49:36] *** Quits: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz) (Remote host closed the connection)
[01:50:53] *** Joins: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net)
[01:58:41] *** Quits: OnlineCop (~OnlineCop@user/onlinecop) (Remote host closed the connection)
[01:58:50] *** Joins: OnlineCop (~OnlineCop@user/onlinecop)
[01:59:27] *** Quits: AmR (~AmREiSa@41.36.185.103) (Quit: Konversation terminated!)
[02:03:11] *** Quits: Danishman (~Danishman@2-104-144-110-cable.dk.customer.tdc.net) (Quit: Leaving)
[02:04:49] *** Quits: mintograde (~mintograd@47.201.5.61) (Read error: Connection reset by peer)
[02:05:14] *** Joins: mintograde (~mintograd@47.201.5.61)
[02:06:26] *** Quits: proller (~p@2a02:6b8:b081:8824::1:3) (Ping timeout: 268 seconds)
[02:16:16] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[02:17:09] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[02:17:45] *** Quits: RoKenn (~RoKenn@user/rokenn) (Quit: NSA proxy service interrupted)
[02:18:45] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[02:18:58] *** Joins: proller (~p@80.240.216.69)
[02:21:17] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Quit: leaving)
[02:23:23] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[02:24:00] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[02:24:15] *** Quits: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net) (Remote host closed the connection)
[02:37:17] *** Joins: ferdna (~ferdna@user/ferdna)
[02:39:16] *** Quits: Cyp (~cyp@213.237.88.120) (Ping timeout: 250 seconds)
[02:41:27] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[02:43:57] *** Quits: mIGu (mig21@user/naur) (Ping timeout: 256 seconds)
[02:50:55] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 256 seconds)
[02:56:27] *** Quits: unyu (~pyon@user/pyon) (Quit: Reboot.)
[02:56:56] *** Joins: Cyp (~cyp@213.237.88.120)
[02:57:03] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.4)
[02:57:27] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[02:58:29] *** Joins: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net)
[02:59:15] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[02:59:48] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[03:03:10] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 268 seconds)
[03:04:24] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc9:6189:5e0d:b006) (Ping timeout: 268 seconds)
[03:04:28] *** Joins: mIGu (mig21@user/naur)
[03:10:32] *** Quits: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net) (Quit: The Lounge - https://thelounge.chat)
[03:10:57] *** Joins: radu242407821 (~radu242@pool-96-250-79-242.nycmny.fios.verizon.net)
[03:15:56] *** Joins: proller (~p@2a02:6b8:b081:7206::1:35)
[03:17:03] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[03:23:25] *** Quits: ethoxy (~root@bison.sh3ll.ru) (Ping timeout: 240 seconds)
[03:24:18] *** Quits: DSpider (DSpider@2a02:2f00:4ff:ffff::646c:60e9) (Quit: Leaving)
[03:33:22] <sprout> is using 'uint_t' in c++ considered bad practice?
[03:34:27] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[03:37:02] *** Quits: jkaye (~jkaye@2601:281:200:1958:2b64:9a7d:6899:8349) (Ping timeout: 240 seconds)
[03:38:55] <kalven> that's not a standard typedef
[03:39:40] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[03:39:47] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:7907:7dad:41ed:706e) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[03:40:02] *** Joins: seninha (~seninha@user/seninha)
[03:46:02] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 240 seconds)
[03:50:08] *** Quits: nojhan (uid443807@id-443807.lymington.irccloud.com) (Quit: Connection closed for inactivity)
[03:50:09] *** Joins: vdamewood (~vdamewood@fedora/vdamewood)
[03:57:56] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[04:00:08] *** Joins: vinleod (~vdamewood@fedora/vdamewood)
[04:00:32] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Ping timeout: 240 seconds)
[04:00:37] *** vinleod is now known as vdamewood
[04:01:48] *** Parts: Burgundy (~NA@86.121.143.206) ()
[04:05:25] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[04:11:00] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 268 seconds)
[04:11:27] *** Joins: hexingb (~hexingb@36.155.28.143)
[04:15:39] *** Joins: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f)
[04:17:37] *** Quits: jsbach (~jsbach@dynamic-077-191-115-085.77.191.pool.telefonica.de) (Ping timeout: 256 seconds)
[04:23:43] *** Joins: unyu (~pyon@user/pyon)
[04:24:34] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Quit: Konversation terminated!)
[04:25:26] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Remote host closed the connection)
[04:31:32] *** Quits: mIGu (mig21@user/naur) (Ping timeout: 240 seconds)
[04:32:55] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[04:36:09] *** Joins: mIGu (~mig21@user/naur)
[04:52:26] *** Joins: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse)
[04:56:38] *** Quits: hexingb (~hexingb@36.155.28.143) (Ping timeout: 250 seconds)
[04:56:52] *** Joins: hexingb (~hexingb@2409:8902:78c3:cc86:eced:bc9a:1d05:4a8f)
[04:58:20] *** Joins: Hello72 (~Hello71@wireguard/contributor/hello71)
[04:59:45] *** Quits: Hello71 (~Hello71@wireguard/contributor/hello71) (Ping timeout: 276 seconds)
[05:00:57] *** Quits: hexingb (~hexingb@2409:8902:78c3:cc86:eced:bc9a:1d05:4a8f) (Ping timeout: 240 seconds)
[05:01:29] *** Joins: hexingb (~hexingb@111.32.64.41)
[05:02:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 268 seconds)
[05:03:31] *** Quits: mIGu (~mig21@user/naur) (Ping timeout: 256 seconds)
[05:07:53] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 256 seconds)
[05:13:06] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[05:13:33] *** Joins: KombuchaKip (~kip@192.252.230.5)
[05:19:02] *** Joins: mIGu (mig21@user/naur)
[05:22:00] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[05:23:33] *** Quits: seninha (~seninha@user/seninha) (Quit: Leaving)
[05:32:19] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[05:34:52] <johnny> reminds me of the time i was using uint not realizing it came from Qt initially :(
[05:37:05] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[05:38:37] *** Joins: EdFletcher (~PKD@user/edfletcher)
[05:40:14] *** Parts: jimmio92 (~jimmio92@pool-96-227-111-47.phlapa.fios.verizon.net) ()
[05:41:11] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[05:41:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[05:41:20] *** ChanServ sets mode: +v npaperbot
[05:57:00] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[05:58:54] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[06:04:55] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Remote host closed the connection)
[06:07:19] *** Quits: hexingb (~hexingb@111.32.64.41) (Read error: Connection reset by peer)
[06:07:19] *** Quits: Stryyker (~stryyke1@about/windows/staff/stryyker) (Remote host closed the connection)
[06:08:14] *** Joins: hexingb (~hexingb@111.32.64.41)
[06:15:55] *** Joins: Stryyker (~stryyke1@about/windows/staff/stryyker)
[06:19:56] *** Quits: Roughy (~mdaw45ns@user/roughy) (Quit: Meadow Fresh milk)
[06:20:08] *** Quits: gehn (~gehn@user/gehn) (Quit: Leaving)
[06:22:58] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:25:02] *** Quits: zmt01 (~zmt00@user/zmt00) (Read error: Connection reset by peer)
[06:26:16] *** Joins: zmt01 (~zmt00@user/zmt00)
[06:26:20] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[06:56:43] *** Quits: p-i- (~Ohmu@2403:6200:8978:2a76:dd5f:304c:a7ec:7c34) (Read error: Connection reset by peer)
[06:57:24] *** Joins: p-i- (~Ohmu@2403:6200:8978:7bf1:f561:19e3:efdc:bc1d)
[06:58:39] *** Joins: varioust (~varioust@gateway/tor-sasl/varioust)
[07:06:29] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[07:07:33] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[07:12:27] *** Quits: z8z (~x@ac255238.ppp.asahi-net.or.jp) (Quit: Quitting)
[07:13:37] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[07:14:40] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:16:02] *** Joins: adeliktas6 (~adeliktas@i59F52CE1.versanet.de)
[07:17:02] *** Quits: zmt00 (~zmt00@user/zmt00) (Client Quit)
[07:18:23] *** Quits: adeliktas (~adeliktas@i59F4A1E6.versanet.de) (Ping timeout: 256 seconds)
[07:18:24] *** adeliktas6 is now known as adeliktas
[07:18:51] *** Quits: varioust (~varioust@gateway/tor-sasl/varioust) (Ping timeout: 276 seconds)
[07:19:36] *** Joins: zmt00 (~zmt00@user/zmt00)
[07:41:55] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:c931:b07d:80ed:31cb)
[07:43:53] *** Quits: hexingb (~hexingb@111.32.64.41) (Ping timeout: 256 seconds)
[07:46:50] *** Quits: Tobbi (~Tobbi@2a02:8108:1240:48ec:c931:b07d:80ed:31cb) (Ping timeout: 268 seconds)
[07:48:48] *** Joins: z8z (~x@ac255238.ppp.asahi-net.or.jp)
[08:01:30] *** Joins: zmt01 (~zmt00@user/zmt00)
[08:04:42] *** Quits: zmt00 (~zmt00@user/zmt00) (Ping timeout: 250 seconds)
[08:05:20] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 268 seconds)
[08:06:54] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[08:32:14] *** Quits: ferdna (~ferdna@user/ferdna) (Quit: Leaving)
[08:38:41] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Ping timeout: 256 seconds)
[08:55:37] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293) (Ping timeout: 240 seconds)
[08:57:38] *** Quits: skapata (~Skapata@user/skapata) (Remote host closed the connection)
[09:00:50] *** Joins: Burgundy (~NA@86.121.143.206)
[09:09:18] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[09:20:55] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:dc9:6189:5e0d:b006)
[09:28:35] *** Joins: kraa (~kraa@107-190-7-216.cpe.teksavvy.com)
[09:32:44] *** Quits: kraa (~kraa@107-190-7-216.cpe.teksavvy.com) (Client Quit)
[09:33:28] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[09:36:02] *** Quits: Burgundy (~NA@86.121.143.206) (Ping timeout: 240 seconds)
[09:36:03] *** Joins: EdFletcher (~PKD@user/edfletcher)
[09:36:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[09:41:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[09:41:20] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[09:41:20] *** ChanServ sets mode: +v npaperbot
[09:43:03] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[09:57:21] <amosbird> What clang-tidy rule will give a warning when doing double and uint64_t max comparison?:  void foo(double d) { if (d >= std::numeric_limits<uint64_t>::max()) { ... } }
[09:57:38] <amosbird> I remember seeing one but don't understand why
[10:00:41] *** Quits: EdFletcher (~PKD@user/edfletcher) (Quit: Quit.)
[10:02:02] <TinoDidriksen> If nothing else, that's signed-unsigned comparison.
[10:04:25] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[10:04:32] *** Quits: zmt01 (~zmt00@user/zmt00) (Ping timeout: 240 seconds)
[10:05:36] *** Joins: EdFletcher (~PKD@user/edfletcher)
[10:06:05] *** Quits: great_taste (~great_tas@user/great-taste/x-5798414) (Quit: Client closed)
[10:06:27] *** Quits: imi (~imi@catv-89-132-115-236.catv.broadband.hu) (Quit: Leaving)
[10:08:12] *** Quits: emerent (~quassel@p200300cd570443e6ba27ebfffed28a59.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[10:08:31] *** Joins: emerent (~quassel@p200300cd5704432fba27ebfffed28a59.dip0.t-ipconnect.de)
[10:17:15] *** Quits: sord937 (~sord937@gateway/tor-sasl/sord937) (Remote host closed the connection)
[10:17:47] *** Joins: sord937 (~sord937@gateway/tor-sasl/sord937)
[10:18:25] *** Quits: badone (~badone@209.132.189.152) (Ping timeout: 256 seconds)
[10:24:20] *** Quits: Itaru (~Itaru@185.65.135.251) (Quit: See Ya Later!)
[10:27:21] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[10:28:31] *** Joins: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse)
[10:32:04] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[10:37:08] *** Joins: ravan (~ravan@user/ravan)
[10:45:16] *** Joins: luizfrds (~Luiz@152.250.243.147)
[10:47:32] *** Joins: lockywolf (~lockywolf@public.lockywolf.net)
[10:48:04] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[10:59:47] *** Quits: chozorho (~chozorho@c-69-250-72-103.hsd1.md.comcast.net) (Quit: gtg)
[11:02:43] *** Joins: rayw (~ray@cpc83999-pool15-2-0-cust1.15-1.cable.virginm.net)
[11:11:27] *** Joins: Itaru (~Itaru@185.65.135.251)
[11:13:04] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[11:19:00] *** Joins: nojhan (uid443807@id-443807.lymington.irccloud.com)
[11:19:50] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[11:26:34] *** Joins: oknenavin (~nomo@95.87.208.95)
[11:30:00] *** Joins: jsbach (~jsbach@2a01:c22:a45c:8f00:f2aa:ffa:d568:c4df)
[11:31:31] *** Quits: oknenavin (~nomo@95.87.208.95) (Ping timeout: 256 seconds)
[11:33:06] <arch-angel> let's say I have a graph with no nodes that are in a cycle, how should I use depth-first search to find the path from node a to node b?
[11:33:42] <arch-angel> I'm really confused at the part where I'm supposed to record the path
[11:35:03] *** Joins: interop_madness (~interop_m@user/interop-madness/x-0950004)
[11:37:13] <leduyquang753> Use a stack to keep track of the current path.
[11:38:32] <arch-angel> I'm thinking of something like using dfs to search till I find the target node, then backtrack the path from there
[11:40:25] <leduyquang753> That's also something you can do yes.
[11:41:25] *** Quits: Furai (~Furai@furai.pl) (Quit: WeeChat 3.4)
[11:43:32] *** Joins: Furai (~Furai@furai.pl)
[11:53:16] *** Joins: bobb_ (~bobb_@dslb-088-065-184-061.088.065.pools.vodafone-ip.de)
[11:55:53] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[12:00:32] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 240 seconds)
[12:03:49] <ville> arch-angel: just -fconversion on your compiler?
[12:03:54] <ville> err amosbird
[12:05:21] <ville> amosbird: sign-change as TinoDidriksen said and not all values of u64 are exactly-representable by f64
[12:06:02] <amosbird> ville: Lemme check if it's -fconversion
[12:06:16] <very_sneaky> i just discovered conan's deploy generator. Really useful for installing packages from source in lieu of a proper package manager. just installed doxygen that way
[12:07:36] *** Quits: ville (~ville@user/ville) (Quit: ville)
[12:08:37] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Read error: Connection reset by peer)
[12:09:03] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[12:09:07] <LordKalma> I've used that generator as well
[12:09:13] <LordKalma> convenient for just getting stuff downloaded
[12:10:22] *** Quits: andreyv (~andrey@user/andreyv) (Quit: ZNC - http://znc.in)
[12:10:46] *** Joins: ville (~ville@user/ville)
[12:13:31] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[12:15:32] <very_sneaky> yep, bypassing those pesky UAC prompts on windows whenever i want to install anything too
[12:15:50] <LordKalma> hahah u have uac enabled? bah
[12:16:03] <very_sneaky> corporate policy, lol
[12:18:18] *** Joins: Haohmaru (~Haohmaru@195.24.53.110)
[12:30:09] *** Quits: popocka[m] (~popockama@2001:470:69fc:105::1:546e) (Quit: You have been kicked for being idle)
[12:32:17] *** Joins: robod34 (~Username@79.113.195.239)
[12:32:21] *** Quits: Itaru (~Itaru@185.65.135.251) (Ping timeout: 268 seconds)
[12:33:04] <TinoDidriksen> UAC is fine these days. The default setting only asks you when it's needed.
[12:44:58] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[12:46:30] *** Quits: slavfox (~slavfox@93.158.232.111) (Ping timeout: 256 seconds)
[12:54:10] *** Quits: luizfrds (~Luiz@152.250.243.147) (Ping timeout: 250 seconds)
[12:55:21] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:dc9:6189:5e0d:b006) (Quit: Quit)
[12:58:56] *** Quits: johnny (~johnny@user/johnny) (Ping timeout: 250 seconds)
[13:06:11] *** Joins: seninha (~seninha@user/seninha)
[13:09:59] *** Joins: slavfox (~slavfox@93.158.232.111)
[13:12:07] *** Joins: johnny (~johnny@user/johnny)
[13:13:43] *** Joins: plastico (~plastico@neomutt/plastico)
[13:15:40] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:20:34] *** Joins: sprout_ (~quassel@2a02:a467:ccd6:1:5d8f:20db:5ddd:bcf4)
[13:21:32] *** Quits: sprout (~quassel@2a02:a467:ccd6:1:798d:4129:9f07:fe5b) (Ping timeout: 240 seconds)
[13:22:09] *** Quits: AbleBacon (~AbleBacon@user/AbleBacon) (Read error: Connection reset by peer)
[13:34:14] <very_sneaky> my point was just that our corporate policy triggers UAC to run installers, and i don't have the admin privs required to authorize it
[13:34:24] <very_sneaky> conan deploy gets around that
[13:34:50] <very_sneaky> in this case, makes it a pain to install things
[13:41:12] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[13:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[13:41:21] *** ChanServ sets mode: +v npaperbot
[13:47:35] *** Quits: PJBoy (~PJBoy@user/pjboy) (Killed (erbium.libera.chat (Nickname regained by services)))
[13:47:41] *** Joins: PJBoy (~PJBoy@user/pjboy)
[13:48:49] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[13:51:21] *** Joins: spaceangel (~spaceange@ip-78-102-216-202.net.upcbroadband.cz)
[13:51:29] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[14:04:00] <PJBoy> :(
[14:04:11] <PJBoy> tried enabling ubuntu apport
[14:04:23] <PJBoy> and it stopped by ctrl+\ from killing `sleep 30`
[14:04:26] <PJBoy> *my
[14:05:02] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[14:05:45] *** Joins: ravan_ (~ravan@user/ravan)
[14:05:55] <PJBoy> ok works fine now
[14:06:03] <PJBoy> must have just been massive lag
[14:06:56] *** Joins: Burgundy (~NA@86.121.143.206)
[14:07:36] *** Quits: ravan_ (~ravan@user/ravan) (Max SendQ exceeded)
[14:08:01] *** Joins: ravan_ (~ravan@user/ravan)
[14:08:16] *** Quits: ravan (~ravan@user/ravan) (Ping timeout: 250 seconds)
[14:11:12] <Haohmaru> dafuq are you doing PJBoy?
[14:11:53] <LordKalma> not using linux properly
[14:12:25] <PJBoy> spending my second day on getting core dumps D:
[14:12:34] <PJBoy> it's a sad life
[14:14:00] <PJBoy> this thing seems to only allow coredumps via systemd thing
[14:14:06] <PJBoy> and the systemd thing really sucks
[14:14:55] <PJBoy> I just figured out that my apport coredumps have been going to /var/lib/apport/coredump rather than /var/crash
[14:15:12] <PJBoy> contrary to everything I've read on the internet :(
[14:15:29] <PJBoy> I don't get why this is so damn hard
[14:15:57] <Haohmaru> PJBoy are you reading the old side of the internetz?
[14:16:00] <PJBoy> like this is building-an-open-source-project difficult
[14:16:54] *** Quits: Burgundy (~NA@86.121.143.206) (Remote host closed the connection)
[14:17:22] <PJBoy> ok making progress
[14:17:31] <PJBoy> my apport log says "executable does not belong to a package, ignoring"
[14:17:36] <PJBoy> what an asshole
[14:17:38] *** Joins: Burgundy (~NA@86.121.143.206)
[14:19:14] <PJBoy> because it tries to upload all errors to the ubuntu bug servers?
[14:19:17] <PJBoy> that's fucked up
[14:19:36] <Haohmaru> dafuq
[14:26:38] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[14:27:02] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 240 seconds)
[14:28:04] <ville> PJBoy: stop using developer hostile distributions?
[14:28:08] <PJBoy> alrighty, I got it to make some crash files
[14:28:17] <PJBoy> that ended up in /var/crash o_O
[14:28:55] <PJBoy> every environment is developer hostile
[14:29:25] <PJBoy> but yeah this one is taking it to the next level
[14:30:31] <PJBoy> as well as some "upload" and "uploaded" files :/
[14:30:53] * PJBoy tries uninstalling whoopsie
[14:32:20] <PJBoy> yup that worked
[14:34:09] <PJBoy> and the crash file isn't a coredump D:
[14:34:43] *** Joins: AmR (~AmREiSa@41.36.185.103)
[14:35:27] * PJBoy removes apport again
[14:37:10] <PJBoy> think I'm just gonna have to live with the systemd crap
[14:39:04] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[14:42:28] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 268 seconds)
[14:47:27] <LordKalma> if only there was a way to have a reproduceable system to make stuff on... a container of sorts
[14:47:45] <LordKalma> that you would be able to dock into your OS... and maybe compose said containers
[14:48:09] * PJBoy installs kubernetes
[14:48:26] <LordKalma> THATS NOT WHAT I MEANT
[14:48:30] <PJBoy> ahahaha
[14:48:59] <Haohmaru> i heard std::vector is a container
[14:49:12] <PJBoy> the standard would have you boolieve that
[14:49:28] <Haohmaru> no, i heard it on the street
[14:50:10] *** Joins: aakashi2001 (~aakashi20@103.61.255.0)
[14:50:10] *** Quits: aakashi2001 (~aakashi20@103.61.255.0) (Changing host)
[14:50:10] *** Joins: aakashi2001 (~aakashi20@user/aakashi2001)
[14:50:10] <LordKalma> kubernetes is just docker orchestration anyway
[14:50:12] <LordKalma> but good joke
[14:53:50] <AmR> Any one have macos and vmware ?
[14:58:07] <Haohmaru> <crickets.aiff>
[15:00:58] <very_sneaky> ville: what makes a distribution hostile to developers? i've had basically the same experience on every linux distro i've tried
[15:02:18] <very_sneaky> i always thought virtualbox was the better choice on macos, isn't vmware paid on macos?
[15:02:29] <LordKalma> vmware player is free
[15:02:42] <very_sneaky> it is on windows, i don't think they made that available to macos
[15:02:47] <LordKalma> ah ok ok
[15:02:54] <very_sneaky> i think i might be thinking of workstation though
[15:03:47] <ville> very_sneaky: if nothing else then documentation
[15:04:15] <ville> very_sneaky: but there's usually an inverse correlation to how user-friendly it is
[15:04:59] <ville> which incidentally seems to also be mirrored in how their documentation is written
[15:05:25] <very_sneaky> yeah, perhaps it's warranted to some degree. i hate writing extensive documentation to have people come and ask me questions that they could have resolved if they bothered ot open it up and use the search feature
[15:05:45] *** Joins: cart_man (~rynot@host-78-144-125-214.as13285.net)
[15:06:50] <very_sneaky> idk though, maybe i haven't used enough flavours. all of the debian based ones can prety much canabilse documentation from the others, arch is pretty good
[15:07:09] <very_sneaky> maybe because i'm not trying the more esoteric distros
[15:07:45] *** Quits: proller (~p@2a02:6b8:b081:7206::1:35) (Ping timeout: 268 seconds)
[15:08:27] *** Joins: paul424 (~tom@ip-5-172-233-223.multi.internet.cyfrowypolsat.pl)
[15:09:17] <Haohmaru> i like being able to answer questions by tossing a url.html#exact_place where it's explained
[15:10:17] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 240 seconds)
[15:13:08] *** Joins: Simplar (~Simplar@188.163.93.76)
[15:18:37] <Haohmaru> !fact
[15:18:38] <nolyc> Haohmaru: The intention is to prevent lambdas from appearing in a signature.
[15:19:36] <Haohmaru> pesky lambdas, they get everywhere
[15:20:55] *** Joins: supernova (~quassel@2405:9800:ba11:6207:5c0:30f8:5ca6:2f7)
[15:21:22] <very_sneaky> that is handy
[15:21:33] <very_sneaky> i wish more documentation used examples
[15:21:49] <very_sneaky> reference documentation is very hard to understand what to do with
[15:21:58] <very_sneaky> if you've never been exposed to it before, at least
[15:29:48] <PJBoy> ubuntu 20.04 is dev hostile because it has this coredump crap
[15:29:57] <PJBoy> and a bunch of telemetry on by default
[15:30:10] <PJBoy> and fairly old releases of dev tools
[15:30:43] *** Joins: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl)
[15:30:50] <PJBoy> it has some annoying keyring thing that was stopping my svn commands from working
[15:31:22] *** Quits: paul424 (~tom@ip-5-172-233-223.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[15:32:08] <Haohmaru> spybuntu
[15:32:55] <TinoDidriksen> Xubuntu is much nicer. Still official Ubuntu, just with a nicer UI.
[15:33:28] <Haohmaru> debian+lxde for me
[15:34:33] <PJBoy> bruh
[15:34:39] <LordKalma> U like xubuntu core for VMs https://unit193.net/xubuntu/core/
[15:34:41] <PJBoy> `sudo lz4 -d /var/lib/systemd/coredump/* core` doesn't work
[15:34:43] <LordKalma> *I likr
[15:34:47] <AmR> I try build openssl and I got errors https://pastebin.com/TtD5Gvtf my config command " perl Configure enable-static-engine VC-WIN32 no-shared no-asm no-stdio no-sock --prefix=F:\Build\OpenSSL " then " ms\do_ms " then " nmake -f ms\nt.mak " I use VC 2010
[15:34:52] <LordKalma> *I like, fuck
[15:34:57] <PJBoy> it interprets the * literally instead of as a glob
[15:35:24] <PJBoy> I need a vacation away from ubuntu
[15:36:08] <Haohmaru> a vacation to the wonderful debian islands would fix you
[15:36:17] <PJBoy> I can work around it with a for loop
[15:36:30] <cart_man> So has anyone ever ran into the issue of one application launching multiple CMD commands and all the commands are trying to use the same port. That will then count as one process trying to open the same port right. Therefore it wont be able to give every CMD command its own port?
[15:36:52] <AmR> Any one Can help me with openssl build ?
[15:37:41] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[15:37:57] <PJBoy> trying to build openssl is a pain that never ends
[15:38:08] <PJBoy> looks like it wants the posix sockets stuff
[15:38:56] <PJBoy> you're not on windows XP are you?
[15:39:47] <AmR> nop, I build that on win 11
[15:40:00] <PJBoy> with visual studio 2010?
[15:40:08] <AmR> yes
[15:40:23] <PJBoy> sus
[15:42:06] <ville> very_sneaky: the top three documentation-wise are: arch, debian and gentoo. unfortunately ubuntu then goes and adds their own "enterprise level" things
[15:43:06] <supernova> need instruction for iphone or android how to install quassel
[15:43:16] <supernova> im running in circles regarding this :0
[15:43:34] <very_sneaky> ville: how are centos/redhat? i'd have thought theirs would be pretty good
[15:43:39] <very_sneaky> haven't used either though
[15:44:21] *** Joins: Roughy (~mdaw45ns@user/roughy)
[15:44:49] <ville> i wouldn't know. i've not used redhat since ~97. but they are/were in similar to ubuntu with their own "improvements", but now they've managed to inflict on the rest of the ecosystem in the form of systemd and pulseaudio
[15:45:38] <AmR> PJBoy: Can You help me, with that or don't have time ??
[15:45:50] <PJBoy> I don't have a clue
[15:46:08] <PJBoy> building code is not my forte
[15:47:45] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6047)
[15:48:21] *** Joins: pulse (~pulse@user/pulse)
[15:51:50] *** Quits: supernova (~quassel@2405:9800:ba11:6207:5c0:30f8:5ca6:2f7) (Ping timeout: 250 seconds)
[15:53:28] <very_sneaky> AmR: `conan install openssl/3.0.1@ --install-folder=build -g deploy`
[15:53:50] <very_sneaky> will build and place the library in the directory `build/openssl` - can then move it wherever you need
[15:54:16] <AmR> Ok I will try that
[15:54:31] <PJBoy> assuming openssl 3
[15:58:26] <very_sneaky> you'll probably need to `pip install conan` and `conan profile new --detect default` first if you haven't got it installed
[15:58:27] *** Quits: seninha (~seninha@user/seninha) (Remote host closed the connection)
[15:59:13] <very_sneaky> details: https://docs.conan.io/en/latest/reference/generators/deploy.html
[15:59:48] <PJBoy> and probably need to modify that default profile
[16:03:44] <very_sneaky> don't scare him away :P
[16:03:54] <very_sneaky> fwiw, i've had good experiences with the default detections
[16:05:54] <PJBoy> `compiler=Visual Studio` and `compiler.version=something`
[16:06:09] <PJBoy> I haven't managed to figure out what vs2010 version is
[16:07:53] <PJBoy> whatever it is, it's less than 16
[16:09:04] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[16:09:41] *** Joins: proller (~p@2a02:6b8:0:40c:159c:f811:f62c:1848)
[16:12:41] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[16:13:02] *** Joins: greyrat_ (~greyrat@ip202.ip-51-178-215.eu)
[16:13:03] *** Joins: derwolf_ (~DerWolf@2a01:4f8:c0c:554a::1)
[16:13:06] <PJBoy> but then it lists 19 for cl and references directories with the version number 14 in them
[16:13:07] *** Joins: tct_ (~tct@user/tct)
[16:13:33] *** Joins: VShell (~shell@user/shell)
[16:13:51] *** Quits: NoXzema (~cq-work@user/cq-work) (Remote host closed the connection)
[16:14:03] *** Joins: rpav_ (~rpav@user/rpav)
[16:14:10] *** Joins: Kakurady_ (~nekoyasha@2607:f2c0:eac8:3297:4498:af79:9c16:5928)
[16:14:15] *** Joins: NoXzema (~cq-work@user/cq-work)
[16:14:17] *** Quits: ghenry (~ghenry@ghenry.plus.com) (Ping timeout: 256 seconds)
[16:14:19] <PJBoy> yeah that SO is dealing the wrong version numbers
[16:14:23] *** Joins: Nixx_ (~quassel@bulbasaur.sjorsgielen.nl)
[16:14:23] *** Joins: mattgirv (quassel@apps.fossgalaxy.com)
[16:14:24] <PJBoy> w.r.t. what conan wants
[16:14:27] *** Server sets mode: +Fcnt 
[16:14:27] *** Joins: oj_ (oj@user/oj)
[16:14:32] *** Joins: comrad_ (~quassel@holarse/comrad)
[16:14:39] *** Joins: ahlk` (~user@2600:1700:31c0:3a10::43)
[16:14:53] *** Joins: jackblasted_ (~quassel@45.131.194.235)
[16:15:01] *** Joins: Karyon_ (~Karyon@user/karyon)
[16:15:02] *** Joins: dostoyev1ky2 (~sck@user/dostoyevsky2)
[16:15:04] *** Joins: niska` (~niska@static.38.6.217.95.clients.your-server.de)
[16:15:11] <PJBoy> I think 10 is the compiler.version that conan would want
[16:15:13] *** Joins: segnior_ (segnior@user/segnior)
[16:15:14] *** Joins: Latexi95 (late@banhammer.fi)
[16:15:16] *** Joins: naur_ (naur@user/naur)
[16:15:35] *** Joins: MaddHatt1r (~maddhatt@user/maddhatter)
[16:15:35] <PJBoy> and hopefully the conan recipe for openssl supports ancient msvc
[16:15:49] *** Joins: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[16:15:59] *** Quits: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de) (Ping timeout: 256 seconds)
[16:16:05] *** Quits: Roughy (~mdaw45ns@user/roughy) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: cncr04s_ (~cncr04s@afxr.net) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyblue9 (sid500829@id-500829.ilkley.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Karyon (~Karyon@user/karyon) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: tct (~tct@user/tct) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: niska (~niska@static.38.6.217.95.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: mIGu (mig21@user/naur) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: segnior (segnior@user/segnior) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kristjansson (sid126207@id-126207.tinside.irccloud.com) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Kakurady (~nekoyasha@2607:f2c0:eac8:3297:b838:af46:b551:85b) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: notevil (~notevil@user/notevil) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: dostoyevsky2 (~sck@user/dostoyevsky2) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: ivan (~ivan@user/ivan) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: naur (naur@user/naur) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Alipha (~AliphaX@user/alipha) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6047) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: kalven (~calvin@2a02:470:84:102::24) (Ping timeout: 240 seconds)
[16:16:06] *** Quits: Shell (~shell@user/shell) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: jackblasted (~quassel@45.131.194.235) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: ahlk (~user@2600:1700:31c0:3a10::43) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Nixx (~quassel@bulbasaur.sjorsgielen.nl) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: comrad (~quassel@holarse/comrad) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Inline (~Inline@aftr-37-201-240-204.unity-media.net) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: nshire (~nshire@user/nshire) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: biberu (~biberu@user/biberu) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: MaddHatter (~maddhatt@user/maddhatter) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: Latexi95_ (late@banhammer.fi) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: mattgirv_ (quassel@apps.fossgalaxy.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: montpol (montpol@fine.mouses.xyz) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: raekye (~raekye@creatifcubed.com) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: rpav (~rpav@user/rpav) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: undeclared (nullx@user/undeclared) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: veverak (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: oj (oj@user/oj) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: derwolf (~DerWolf@static.143.125.47.78.clients.your-server.de) (Ping timeout: 240 seconds)
[16:16:07] *** Quits: miklcct_ (quasselcor@vps.miklcct.com) (Ping timeout: 240 seconds)
[16:16:08] *** Quits: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com) (Ping timeout: 240 seconds)
[16:16:08] *** Joins: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6047)
[16:16:08] *** Joins: kalven (~calvin@2a02:470:84:102::24)
[16:16:08] *** mIGu_ is now known as mIGu
[16:16:08] *** undeclared8 is now known as undeclared
[16:16:13] *** raekye3 is now known as raekye
[16:16:13] *** greyblue9_ is now known as greyblue9
[16:16:13] *** kristjansson_ is now known as kristjansson
[16:16:13] *** montpol4 is now known as montpol
[16:16:14] *** Joins: Roughy- (~mdaw45ns@ti0090a400-4467.bb.online.no)
[16:16:38] *** Joins: biberu (~biberu@user/biberu)
[16:16:38] *** Joins: Alipha (~AliphaX@user/alipha)
[16:16:42] *** Joins: Led_Zeppelin2 (~user@cpe-68-172-241-89.nj.res.rr.com)
[16:16:49] *** Joins: onizu (uid373383@id-373383.uxbridge.irccloud.com)
[16:16:50] *** Joins: miklcct (quasselcor@vps.miklcct.com)
[16:17:15] *** Joins: ivan (~ivan@user/ivan)
[16:17:24] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[16:18:23] *** Quits: NoXzema (~cq-work@user/cq-work) (Remote host closed the connection)
[16:18:47] *** Joins: NoXzema (~cq-work@user/cq-work)
[16:19:19] *** Joins: cncr04s (~cncr04s@afxr.net)
[16:19:42] *** VShell is now known as Shell
[16:19:57] *** Quits: Latexi95 (late@banhammer.fi) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: segnior_ (segnior@user/segnior) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: ethoxy (~root@bison.alphaw0lf.xyz) (Ping timeout: 256 seconds)
[16:19:57] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: Roughy- (~mdaw45ns@ti0090a400-4467.bb.online.no) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: naur_ (naur@user/naur) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: niska` (~niska@static.38.6.217.95.clients.your-server.de) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: biberu\ (~biberu@user/biberu) (Ping timeout: 256 seconds)
[16:20:31] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Ping timeout: 256 seconds)
[16:20:54] <very_sneaky> PJBoy: i think you can provide either
[16:21:04] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[16:21:09] <very_sneaky> you just have to use "msvc" instead of "Visual Studio", or vice versa
[16:21:16] <PJBoy> nah msvc doesn't work
[16:21:18] <LordKalma> no
[16:21:20] <very_sneaky> though i have seen msvc is experimental
[16:21:21] <LordKalma> different stuff
[16:21:21] <PJBoy> not with openssl anyway
[16:21:22] *** Joins: naur (naur@user/naur)
[16:21:24] <LordKalma> yes
[16:21:27] *** Joins: Latexi95 (late@banhammer.fi)
[16:21:37] *** Joins: ethoxy (~root@bison.alphaw0lf.xyz)
[16:21:43] <very_sneaky> as in, the principle is wrong? arne't those the two versions you're talking about?
[16:21:47] <very_sneaky> visual studio and msvc
[16:21:50] <LordKalma> and we've already discussed here that msvc as compiler craps on MANY recipes that hardcode like if compiler=="Visual Studio"
[16:22:01] *** Joins: veverak1 (~veverak@ip-89-102-98-161.net.upcbroadband.cz)
[16:22:01] <PJBoy> ^
[16:22:01] <LordKalma> that's an experimental conan 2.0 feature
[16:22:10] <LordKalma> and one of the things we'll have to do a crapton on work about
[16:22:13] <PJBoy> msvc is still a dream for the time being
[16:22:17] <very_sneaky> okay, so i'm right then - the version number does apply to that, just recipes aren't supporting it properly
[16:22:20] <LordKalma> I'll have to fully re-learn conan
[16:22:22] *** tct_ is now known as tct
[16:22:38] <PJBoy> in spite of the fact that the default conan profile spits out compiler=msvc
[16:22:38] <LordKalma> making recipes is becoming impossible, they neem seriously improvement to their docs
[16:22:39] *** Joins: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no)
[16:22:41] *** Quits: Roughy (~mdaw45ns@ti0090a400-4467.bb.online.no) (Changing host)
[16:22:41] *** Joins: Roughy (~mdaw45ns@user/roughy)
[16:22:51] <LordKalma> and I hope conan fucking stabilizes for a while
[16:22:57] <LordKalma> we have 1000 recipes to fix
[16:23:01] *** Joins: niska (~niska@static.38.6.217.95.clients.your-server.de)
[16:24:18] <very_sneaky> idk, it will probably just be a sed s/self.settings.compiler\ == \"Visual\ Studio\"/str(self.settings.compiler)\ in\ \[\"Visual\ Studio\"\,\"msvc\"]/g conanfile.py
[16:25:16] *** Joins: segnior (segnior@user/segnior)
[16:25:23] <very_sneaky> yeah i think their problem is that they're not enforcing documentation updates with the features they're adding
[16:25:33] <LordKalma> conan docs suck since day 0
[16:25:46] <very_sneaky> i mean.. yes and no
[16:25:51] <LordKalma> yes yes
[16:26:06] <very_sneaky> i don't think the way they present the info is clear, but it _is_ all there, if you can find it and comprehend it
[16:26:10] <very_sneaky> and they have examples which i like
[16:26:25] <very_sneaky> ignoring the fact that some of it's wrong
[16:26:37] <LordKalma> dude, takes ages to find basic crap
[16:26:44] <very_sneaky> yeah, agree with that
[16:26:51] <very_sneaky> but i think it's better than cmake's, for example
[16:27:05] <LordKalma> I had this page bookmarked: https://docs.conan.io/en/1.36/reference/config_files/settings.yml.html
[16:27:09] <LordKalma> because it's so hard to get to
[16:27:15] *** Joins: ghenry (~ghenry@ghenry.plus.com)
[16:27:34] <very_sneaky> i think i'm working out where everything is on their site and how to navigate it
[16:27:42] <very_sneaky> that's exactly where i would have looked for that
[16:27:50] <very_sneaky> but, i've spent a disproportional amount of time on it
[16:28:28] <LordKalma> since I already know cmake, their docs are pretty fine to me
[16:28:40] <very_sneaky> yeah, that's what i'm told they're good for
[16:28:48] <very_sneaky> i appreciate examples though. like, a lot.
[16:28:50] <LordKalma> after you read Professional CMake, cmake docs are really good actually
[16:29:02] <LordKalma> Qt is still the benchmark for good docs
[16:29:04] <LordKalma> and numpy
[16:29:31] <LordKalma> Qt's are slightly more discoverable
[16:29:47] <very_sneaky> i think one thing they haven't done very well, though seem to be getting better at, is deprecating options and allowing for a graceful transition between features
[16:29:52] <very_sneaky> the conan api is unstable af
[16:30:01] <LordKalma> break fast and move things
[16:30:09] <LordKalma> I've ranted that with them already
[16:30:25] <LordKalma> Hipony replied that I should think of that as a good thing
[16:30:26] <LordKalma> I don't
[16:30:36] <very_sneaky> lol, yeah.
[16:30:44] <very_sneaky> people want to write a recipe once and have it continue to work
[16:30:51] <very_sneaky> nobody wants to be refactoring package recipes all the time
[16:30:58] <LordKalma> yes
[16:31:06] <very_sneaky> except to account for changes in the package ofc
[16:31:17] *** Quits: Simplar (~Simplar@188.163.93.76) (Quit: Going offline, see ya! (www.adiirc.com))
[16:31:19] *** comrad_ is now known as comrad
[16:31:21] <LordKalma> recipes already have a big entry point
[16:31:23] *** Joins: seninha (~seninha@user/seninha)
[16:31:34] <LordKalma> and it's so annoying they decided to not support recipes-in-repository
[16:31:40] <LordKalma> and thus barbarian was born
[16:31:44] <LordKalma> but who cares for barbarian
[16:32:10] <LordKalma> "Docs will be updated for 2.0, right now 1.x docs still reference/recommend old things , as it's too tedious to keep up with all the changes happing , so it's easier to just update it once and for everything "
[16:32:13] <LordKalma> official reply
[16:35:04] <very_sneaky> i hate that
[16:35:14] <very_sneaky> it may be tedious but we need those docs mf
[16:35:15] <very_sneaky> lol
[16:35:42] <very_sneaky> that's actually my biggest frustration with bamboo's yaml specs
[16:35:53] <very_sneaky> the docs are wrong so i spend hours bashing my head against a wall working syntax problems out
[16:36:56] <LordKalma> speaking of yaml spec
[16:37:20] <LordKalma> I don't understand what exactly is the multiline-string control char to break strings ignoring starting space
[16:37:28] <LordKalma> PJBoy, you know yaml, do you know which one is it?
[16:37:34] <very_sneaky> i think it's |
[16:37:43] <very_sneaky> or >
[16:37:52] <PJBoy> > is the one I used for my clang-tidy
[16:38:06] <LordKalma> https://github.com/ruilvo/aether_sdr/blob/master/.clang-format#L29
[16:38:12] <LordKalma> I want to break this string
[16:38:52] <PJBoy> yeah I think you want >
[16:41:04] <LordKalma> thanks
[16:41:27] <PJBoy> fwiw wikipedia is a fine reference for YAML
[16:41:46] <PJBoy> ( https://en.wikipedia.org/wiki/YAML#Syntax )
[16:42:57] <LordKalma> optional modifiers to preserve (|) or fold (>) newlines.
[16:43:00] <LordKalma> but do they keep space?
[16:43:07] *** Joins: Jupp_S (~quassel@ip-088-153-154-129.um27.pools.vodafone-ip.de)
[16:43:25] <PJBoy> > Folded text converts newlines to spaces and removes leading whitespace.
[16:43:51] <PJBoy> much like the C preprocessor
[16:44:01] <LordKalma> https://stackoverflow.com/a/21699210/5168563
[16:44:07] <very_sneaky> LordKalma: https://en.wikipedia.org/wiki/YAML#Features
[16:44:24] <very_sneaky> oh, envermind. I thought that had indentation but i misread it
[16:44:24] <LordKalma> "Extra leading space" so only space after the indentation level is added
[16:48:10] *** Quits: aakashi2001 (~aakashi20@user/aakashi2001) (Ping timeout: 250 seconds)
[16:51:41] *** Quits: lh_ideapad (~lh_mouse@mingw-w64/developer/lhmouse) (Remote host closed the connection)
[16:53:03] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Read error: Connection reset by peer)
[16:56:51] *** rpav_ is now known as rpav
[17:00:11] *** Quits: pulse (~pulse@user/pulse) (Ping timeout: 256 seconds)
[17:01:48] <very_sneaky> jeez, the conan team must really be under the pump
[17:02:10] <very_sneaky> i really don't like their philosophy of "we're working hard on 2.0 so everything else is abandoned until we get that out"
[17:02:35] <very_sneaky> the visual studio extension is broken in vs2022 and crashes solutions from vs2017 onwards?
[17:02:50] <very_sneaky> but "I am afraid at the moment this extension is on "stand-by". Until we release Conan 2.0 GA (we are in alpha now, it will take a few months, beta, etc), we will most likely not have time to resume working on this extension to update it."
[17:03:01] <very_sneaky> that doesn't fill me with a heap of confidence
[17:05:09] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Quit: Quit)
[17:05:58] <rpav> very_sneaky: yeah "giant <probably-breaking> update" often goes poorly
[17:06:06] <LordKalma> probably? HAHAHAH
[17:06:31] <LordKalma> conan breaks API in minors
[17:06:38] <rpav> oh, conan specifically yeah
[17:06:38] <LordKalma> it's not semver at all
[17:06:49] <LordKalma> if it was, we'd be on 86.3
[17:07:02] *** Quits: adeliktas (~adeliktas@i59F52CE1.versanet.de) (Ping timeout: 240 seconds)
[17:07:03] <very_sneaky> in my mind, it should go slowly - keep all your current shit maintained and work on new features in slow time
[17:07:14] <LordKalma> they are move fast and break things guys
[17:07:31] *** Joins: bobb_ (~bobb_@dslb-088-065-184-061.088.065.pools.vodafone-ip.de)
[17:07:38] <rpav> they're kinda more move slowly and break things
[17:07:49] <very_sneaky> this isn't an attitude that is all that compatible with enterprise
[17:08:03] <rpav> my guess is most of the issues i had using it are still issues
[17:08:26] <rpav> e.g. being large, clunky, and sortof needing additional tooling to manage things too
[17:09:03] <very_sneaky> what do large and clunky mean in this context?
[17:09:30] *** Quits: AmR (~AmREiSa@41.36.185.103) (Read error: Connection reset by peer)
[17:09:39] <rpav> it requires a lot of setup and infrastructure for something otherwise fairly simple
[17:09:55] <rpav> clunky being it takes a lot of poorly-documented steps to do any given thing
[17:10:26] <LordKalma> yes it does
[17:10:27] <very_sneaky> i'll agree it's poorly documented but now that i have a grasp on things it's actually reasonably concise
[17:10:42] <LordKalma> CPM almost wins haha
[17:10:44] <rpav> targeted at "very enterprisey" environments written probably by people used to working on "enterprise-standard" software (i.e. it can be clunky, it's internal! it works for our specific configuration given a team that supports it...)
[17:10:50] <very_sneaky> it doesn't add much on top of what you would already be doing with cmake or another build system
[17:11:09] <rpav> if only spack targeted windows
[17:11:36] <very_sneaky> that seemed to have a much worse artifact management philosophy
[17:11:45] <rpav> though i havne't actually used that either, it just seemed nicer
[17:11:51] <very_sneaky> "worse" in the sense of "less compatible with devops pipelines"
[17:11:57] <rpav> spack? ah
[17:11:59] <rpav> dunno
[17:12:04] <very_sneaky> it's basically just a git repo
[17:12:16] <very_sneaky> and for artifact storage they were like "just get an s3 bucket"
[17:12:34] <very_sneaky> but yes, it did look like it had some nice features
[17:12:45] <rpav> i'd rather that than "just get a machine with 8-16GB of ram to run our giant java backend to store your 4k header-only library"
[17:13:14] <rpav> this is why i switched to CPM for most things .. no extra reqs on anyone
[17:13:14] <very_sneaky> they have a free cloud option, not too dissimilar from setting up a github account
[17:13:33] <rpav> yeah but what i was building wasn't open source
[17:13:36] <very_sneaky> no setup requirements
[17:14:14] <very_sneaky> idk, i found artifactory reasonably straight forward to self host, as far as self hosting things goes
[17:14:17] <rpav> reading the tutorial spack seems to maybe not have the best docs either heh
[17:14:33] <rpav> it has massive requirements, it's not reasonably by any stretch
[17:15:00] <rpav> especially since it doesn't need to _do_ anything but serve blobs
[17:15:03] <very_sneaky> the yardstick by which i measure "easy to set up" isn't "takes almost no resources"
[17:15:08] <rpav> i just used their python reference server
[17:15:25] <rpav> very_sneaky: it's not easy to set up if you have to build a new machine to host it
[17:15:37] <rpav> if you're not counting infrastructure cost, you're not fully accounting
[17:16:21] <very_sneaky> rpav: i have it in a vm that has 4GB of RAM and 1 vCPU
[17:16:24] <very_sneaky> runs fine
[17:16:30] <rpav> even that is pretty insane
[17:16:48] <very_sneaky> currently idling at 2GB of ram
[17:16:50] <rpav> it doesn't need to be more than a tiny webserver .. it shouldn't even _need_ more than a tiny webserver
[17:16:52] <rpav> it _does nothing_
[17:17:17] <rpav> and even if it has fancy configuration shit, a little bit of js+rest is more than adequate
[17:17:46] <very_sneaky> depends on what you want out of it - it has xray, which provides built in malware scanning, and a bunch of other apps that you can buy for it
[17:18:09] <rpav> "idles at 2GB for serving tiny binary blobs" is sortof indicative of all of conan
[17:18:18] <very_sneaky> as far as VMs go though, these resources are almost nothing
[17:18:49] <rpav> like, distributing configuration .. well, that's up to you .. i asked about integrating "local" configuration so one wouldn't have to merge customizations _every release_ and "well, that'd be hard"
[17:18:53] <very_sneaky> this is only if you want to have your own artifact store though, you could easily host them on gitlab, conan_server or just keep a local cache - artifactory isn't _necessary_
[17:19:10] <rpav> like i said .. large, clunky
[17:19:29] <rpav> very_sneaky: yeah i used conan_server
[17:19:48] <very_sneaky> eh, i think your definition of large and clunky is overly constrained
[17:19:53] <rpav> very_sneaky: it should be sortof an indication of how big a disaster artifactory is that a python server of a few K does everything you need
[17:20:41] <rpav> and if it's like, "well, it's not as fast as it could be for serving thousands of devs with gigabytes of data," well .. solve _that_, and for that you don't need "idles at 2GB java server"
[17:21:16] <rpav> though maybe "our C++ package management solution promotes a java backend" is probably an indication of failure itself
[17:26:11] <very_sneaky> lol wow
[17:27:16] <very_sneaky> java's spring boot is pretty well established as a web backend framework
[17:27:50] <very_sneaky> much more so than any C++ web framework - I would expect them to choose the right tool for the job, not get hung up on language elitism
[17:30:09] <very_sneaky> artifactory was relatively easy to install, doesn't require a prohibitive amount of resources, it works, the fact that it's using java in the backend and node in the front end doesn't play into my consideration at all here - does it have a reasonable user experience? yes. that's all i really care about
[17:32:07] <very_sneaky> it provides me with a place to store my own internal conan packages and generic binaries, a rest api with which i can access them, malware scanning, a range of authentication options and integrations with a number of popular devops tools. And it was free
[17:32:27] <very_sneaky> i didn't have to do any development work to get it up and running - sounds like nothing but positives to me
[17:33:15] *** Joins: Ivii (~Ivyy@2001:a62:4c3:8e01:1619:ead6:822:30d1)
[17:40:29] *** Joins: Simplar (~Simplar@188.163.93.76)
[17:41:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[17:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[17:41:21] *** ChanServ sets mode: +v npaperbot
[17:42:08] *** Joins: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba)
[17:44:28] *** Joins: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be)
[17:47:22] *** Quits: betelgeuse9 (~betelgeus@94-225-47-8.access.telenet.be) (Client Quit)
[17:48:21] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[17:50:15] <LordKalma> https://i.gyazo.com/1daf1a911d725d1d6bb70809fced6fc4.png
[17:50:21] <LordKalma> see? it's adding space I don't want
[17:51:26] <very_sneaky> you have no whitespace characters in your terminal? you maniac
[17:51:57] *** Quits: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr) (Client Quit)
[17:54:32] <LordKalma> anyway, figured it out, one sec
[17:55:32] <very_sneaky> s/terminal/editor
[17:57:43] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[17:58:34] <LordKalma> https://github.com/ruilvo/aether_sdr/blob/master/.clang-format#L29
[17:58:35] <LordKalma> there we go
[17:58:38] <LordKalma> it's the only way
[18:00:26] <LordKalma> basically, it's with "" and \ at the end of breaking lines. forces you to escape actual \
[18:04:34] <very_sneaky> ah yes, i did see there was a multiline string method
[18:07:15] *** Joins: x_kuru (~xkuru@user/xkuru)
[18:10:17] *** Quits: xkuru (~xkuru@user/xkuru) (Ping timeout: 268 seconds)
[18:14:32] *** Quits: lh_mouse (~lh_mouse@mingw-w64/developer/lhmouse) (Read error: Connection reset by peer)
[18:19:03] *** Joins: kraa (~kraa@107.190.7.216)
[18:22:58] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[18:36:02] *** Quits: JohnMS_WORK (~kvirc@89-64-83-123.dynamic.chello.pl) (Ping timeout: 240 seconds)
[18:36:49] *** jaakkos_ is now known as jaakkos
[18:39:18] *** Joins: adeliktas (~adeliktas@i59F52CE1.versanet.de)
[18:42:50] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[18:43:43] *** Joins: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx)
[18:55:01] *** Quits: Juliu (~Juliu@2a02:810b:c640:3ec0:a176:9308:1a64:1dba) (Ping timeout: 240 seconds)
[18:55:07] *** Quits: rpnx-phone (rpnx-phone@gateway/vpn/protonvpn/rpnx) (Read error: Connection reset by peer)
[18:58:44] *** Joins: pulse (~pulse@user/pulse)
[19:02:35] *** Quits: Cheaterm1n (~Cheaterma@user/cheaterman) (Ping timeout: 256 seconds)
[19:04:34] *** Joins: Cheaterman (~Cheaterma@user/cheaterman)
[19:15:22] <Haohmaru> !fact
[19:15:23] <nolyc> Haohmaru: A conversion to void does not invoke any conversion function.
[19:18:22] *** Joins: AmR (~AmREiSa@156.199.9.4)
[19:19:06] *** Quits: dld (~davidlowr@2601:197:600:1210:aca6:8c80:35d5:4f3c) (Ping timeout: 245 seconds)
[19:19:27] <OnlineCop> `void foo(int unused_a, string unused_b) { (void)unused_a; (void)unused_b; }`
[19:20:20] <OnlineCop> Or is it typically better to actually create an `UNUSED()` function?
[19:20:24] *** Joins: dld (~davidlowr@2601:197:600:1210:88d:2354:617:54b5)
[19:20:54] *** Quits: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca) (Ping timeout: 256 seconds)
[19:21:20] <rpav> or you could just `void foo(int, string) { ... }`
[19:22:52] <OnlineCop> I'm thinking more of `#if DEBUG...#endif` blocks which actually use those variables, but non-DEBUG would not.
[19:23:43] <rpav> seems dubious but i'm sure you could come up with something
[19:23:58] <rpav> `if constexpr(DEBUG) ...` would maybe not trigger unusued
[19:24:55] *** Quits: kenanmarasli (~kenanmara@user/kenanmarasli) (Quit: Leaving)
[19:28:20] <rpav> { S s; (vοid)s; } struct vοid {}; struct S { operator vοid() { cout << "!"; return {}; } };
[19:28:21] <geordi> !
[19:28:37] *** Quits: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090) (Read error: Connection reset by peer)
[19:29:14] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[19:29:53] <NoXzema> How does one get the exception type of the exception caught by gdb
[19:30:00] <rpav> utf-8 is clearly a security issue, let's all go back to 7-bit ascii
[19:30:39] <rpav> NoXzema: doesn't it tell you? the exception should break at the point of throw
[19:30:53] <rpav> so that should also be semi-obvious and/or available as a value
[19:31:06] *** Joins: packet_lozenge (~packet_lo@user/packet-lozenge/x-7125090)
[19:31:15] <NoXzema> It's on an uncaught exception
[19:31:45] <NoXzema> The throw is in some code I don't have symbols for
[19:31:47] <rpav> right, so you're making gdb break on exceptions right
[19:32:10] <rpav> i'm not sure if that matters or not
[19:32:18] <OnlineCop> Maybe `catch throw <exceptname>`? https://stackoverflow.com/a/6836167
[19:33:31] <rpav> right you should have done `catch throw`.. but i'm not sure if it depends on debug info in the throwing library
[19:34:35] <PJBoy> OnlineCop, this is what [[maybe_unused]] was made for
[19:34:45] <rpav> the documentation is not clear on this .. though it does mention a way to break on ABI throw .. https://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_30.html
[19:34:59] *** Joins: great_taste (~great_tas@user/great-taste/x-5798414)
[19:37:10] *** Quits: arch-angel (~arch-ange@2001:e68:5400:628:98f4:a0ee:dd7:976f) (Ping timeout: 250 seconds)
[19:38:06] <rpav> oh yeah [[maybe_unused]]
[19:38:22] <OnlineCop> PJBoy: I agree. Some of my code, though, is c++14, so I'm trying out alternatives.
[19:38:24] <rpav> now if only these things were part of the type, so you could go `if(was_used(x)) ...`
[19:38:25] * rpav runs
[19:38:28] *** Quits: Cheaterman (~Cheaterma@user/cheaterman) (Ping timeout: 256 seconds)
[19:38:56] <PJBoy> fair
[19:39:02] <PJBoy> I hate maybe_unused anyway
[19:39:17] <PJBoy> I'd go for the void cast and not look back
[19:39:19] <rpav> i will give you it's a bit ugly
[19:39:19] <OnlineCop> I've seen online tools like godbolt and its comparisons using UNUSED() or similar (I forget the exact notation), and wondered whether calling an "empty" function would be optimized away.
[19:39:50] <PJBoy> unused macros are usually just void casts
[19:40:18] <rpav> OnlineCop: you could perhaps `void foo(int DEBUG_USE(x), ...)`
[19:40:27] <PJBoy> sometimes they're extra special void casts
[19:40:39] <PJBoy> for when GCC ignores your void cast and warns you anyway
[19:45:21] *** Quits: bobb_ (~bobb_@dslb-088-065-184-061.088.065.pools.vodafone-ip.de) (Quit: Client closed)
[19:47:02] <NoXzema> Yeah, it's useless without debug symbols.
[19:47:15] <NoXzema> Honestly, I should just make sure I have debug symbols...
[19:48:17] *** Quits: DSpider (DSpider@2a02:2f00:1ff:ffff::646c:6047) (Ping timeout: 240 seconds)
[19:48:47] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[20:00:57] *** Joins: geranim0 (~geranim0@modemcable242.171-178-173.mc.videotron.ca)
[20:03:06] *** Joins: grmbl (~grmr@user/grmr)
[20:04:42] <grmbl> Hello there. I've noticed a strange segfault in C++ code I wrote and I'm feeling out of my depth. There is a structure defined inside a class in a file a colleague wrote, and I want to make a file-local global vector of this in another file
[20:05:57] <cbreak> grmbl: globals :(
[20:06:10] <grmbl> When writing std::vector<Class::Struct> foo;, my program segfaults in std::vector's code, during  __static_initialization_and_destruction_0
[20:06:30] <grmbl> What I don't understand is why that segfault goes away if I add the keyword "static"
[20:07:00] <cbreak> where do you define this global variable?
[20:07:05] <cbreak> in a source file or a header?
[20:07:14] <grmbl> in a source file
[20:07:22] <cbreak> how is that struct defined? does its constructor depend on outside state?
[20:07:32] <cbreak> global variables are very problematic with respect to initialization order
[20:07:35] <cbreak> avoid them if you can
[20:07:43] <cbreak> even singletons are easier to reason about, when done properly
[20:08:06] <grmbl> i know that, there's a reason i did things like this and i'm willing to discuss it afterwards :)
[20:08:43] <grmbl> this struct isn't weird, it doesn't depend on outside state. it has a bunch of struct timespec foo = {} and size_t derp = 0 though
[20:08:59] <Haohmaru> hm, was there some attribute to suggest to gcc the priority of initialization or am i imagining it?
[20:10:10] <grmbl> Haohmaru: i'd rather not have to resort to this, i'm mainly trying to understand exactly why that segfaults, because i'm not a good c++ programmer. i'm a c person, forced to use C++ libraries written by colleagues, and trying to avoid entwining our codebases too tightly
[20:11:05] <grmbl> so, why I did this: $colleagues wrote a time statistics library, that are supposed to track how much time each step in their code took
[20:11:40] <NoXzema> Is the vector written in a header?
[20:12:05] *** notevil_ is now known as NOTevil
[20:12:25] <cbreak> grmbl: can you reproduce the crash on godbolt?
[20:12:44] <cbreak> can you reproduce it in a debugger, and look at the exact stack trace?
[20:12:52] <grmbl> their code is very OOPy and has cthulhoid dependencies throughout the codebase, whereas i try to stick to very simple interfaces (this is embedded code, theirs is regular c++, hence why i try to avoid letting their stuff permeate my codebase)
[20:12:58] <Haohmaru> yeah this is debugger candidate
[20:13:29] <grmbl> cbreak: i've got the exact stack trace, i don't understand it though. i wasn't able to write a single-file example that segfaults though
[20:14:07] <grmbl> lemme gather that, anonymize some stuff and i'll give you a pastebin link
[20:14:21] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[20:16:01] <LordKalma> https://www.reddit.com/r/linuxmemes/comments/s7nmn7/chad_lfs/
[20:18:33] *** Joins: zmt01 (~zmt00@user/zmt00)
[20:20:05] <grmbl> cbreak: http://paste.awesom.eu/dytM&ln it looks like this
[20:20:28] <grmbl> sadly, this example does not crash, but i wrote it in a single file, maybe it would if written as two files
[20:20:37] <cbreak> the struct on line 11 is pointless
[20:21:14] <cbreak> but this shouldn't be problematic, apart from being a global
[20:21:51] <grmbl> it's pointless but that's how that struct looks like
[20:21:52] <cbreak> you do compile the program as c++, right?
[20:21:58] <grmbl> yup
[20:22:03] <cbreak> and you do link it with g++ or clang++?
[20:22:10] <grmbl> g++
[20:23:26] <imMute> wait, is Foo::Bar defined in a.cpp (as in in a .cpp file)?  if so, how does b.cpp see that definition??
[20:23:42] <grmbl> yeah, sorry, that's a.h
[20:23:51] <grmbl> i'm a bit tired, wrote that way too quickly
[20:24:24] *** Joins: markong (~kvirc@213.146.188.203)
[20:24:27] <cbreak> the debugger doesn't give a crash reason?
[20:24:51] *** Joins: badone (~badone@209.132.189.152)
[20:25:05] <Haohmaru> i think he said segfault
[20:25:37] <cbreak> there are many ways a program can segfault :/
[20:25:41] <Haohmaru> but the debugger should show where/when it sh*ts the pants
[20:25:48] *** Joins: gareppa (~gareppa@user/gareppa)
[20:26:07] <cbreak> like due to a bad instruction, a bad address, bad alignment, bad values, ...
[20:26:20] <grmbl> cbreak: it tells me that this is a segfault, and i pasted a stacktrace below the code
[20:26:31] <grmbl> i don't know how to give you more information
[20:26:59] *** Quits: gareppa (~gareppa@user/gareppa) (Remote host closed the connection)
[20:27:02] <grmbl> for instance, frame #0 is weird, lemme show you
[20:27:12] <Haohmaru> from that my nose can only figure out it's probably at the construction of the vector, which probably tries to construct your object(s)
[20:27:26] <grmbl> Haohmaru: that's what mine says as well
[20:27:47] <PJBoy> `list` will give you some context on the topmost frame
[20:27:48] <Haohmaru> the vector would dynamically allocate the needed memory and construct your object(s)
[20:27:51] <grmbl> _Vector_impl() seems to be an empty constructor
[20:28:02] <cbreak> I would try making it into a lazy singleton to see if it still fails (delaying allocation until later)
[20:28:38] <PJBoy> does seem like it's probably an ODR issue somehow
[20:29:05] <noent> Heya. I have an issue with gtest and templated opertor<<. The code base contains a 'catch all' operator<< for enums and some enums should have a custom operator<< to further improve output. This all works well until I start using those enums in a test. A minimal failing example is here: https://godbolt.org/z/oEPc7nT4a
[20:29:05] <noent> Removing the templated operator<< is not an option, because the code base is large and I am pretty sure there are tons of places where it is required. So I need to somehow alter the template so it 'works' with gtest. Oh and I cannot use anything other that c++11 (transition to 17 is starting soon, but for now it has to work with 11).
[20:29:20] <grmbl> 88		_Vector_impl()
[20:29:20] <grmbl> 89		: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
[20:29:20] <grmbl> 90		{ }
[20:29:20] <grmbl> 91	
[20:29:26] <grmbl> line 89 is the culprit
[20:29:33] <grmbl> that doesn't tell me much, does it ?
[20:29:44] <PJBoy> not really
[20:29:45] <grmbl> also, what's ODR ?
[20:29:52] <Haohmaru> one-definition-rule
[20:29:53] <PJBoy> `p this`
[20:30:46] <PJBoy> ODR issues are where you define something in multiple translation units with the same name without using the proper technique
[20:31:01] <PJBoy> basically linker based issues
[20:31:13] <LordKalma> !odr
[20:31:14] <nolyc> The One Definition Rules state (1) that no translation unit (see !tu) shall contain more than one definition of any variable, function, class type, enumeration type or template, and (2) that every program shall contain exactly one deﬁnition of every non-inline function or object that is used in that program.
[20:31:17] <grmbl> that could be it, since adding static removes the issue (it probably wouldn't export the symbol)
[20:31:18] <PJBoy> would be interested to see your original files
[20:31:33] <PJBoy> sounds like you've defined this global `baz` in a header
[20:31:39] <grmbl> PJBoy: i'm afraid i can't do that, this is $work stuff
[20:31:40] <imMute> nolyc: put the SomeEnum operator<< in the same namespace as SomeEnum.
[20:31:40] <nolyc> imMute: An error has occurred and has been logged. Please contact this bot's administrator for more information.
[20:31:51] <imMute> noent: sorry that was for you
[20:31:51] <grmbl> no, it's not in a header, only in a .cpp file
[20:31:59] *** Quits: interop_madness (~interop_m@user/interop-madness/x-0950004) (Quit: Leaving)
[20:32:07] <grmbl> (also, you'd sue me for the damage done to your retina :p)
[20:32:09] <Haohmaru> shh, don't exploit the nolyc
[20:32:11] <PJBoy> but static makes it work, huh
[20:32:28] <PJBoy> you might have another entity called `baz` somewhere then
[20:32:37] <cbreak> noent: doesn't gtest support output suppression / customization?
[20:33:05] *** Quits: cart_man (~rynot@host-78-144-125-214.as13285.net) (Quit: Konversation terminated!)
[20:33:20] <noent> imMute: uh, how does that fix it? I mean, it does (at least on godbolt; need to try it in project tomorrow), but I don't get why
[20:33:23] <cbreak> noent: http://google.github.io/googletest/advanced.html
[20:33:30] <PJBoy> grmbl, by original I mean the a.cpp/b.cpp testcase that you wrote
[20:33:31] <cbreak> http://google.github.io/googletest/advanced.html#teaching-googletest-how-to-print-your-values
[20:33:33] <PJBoy> that does presumably crash
[20:33:44] <imMute> noent: ADL I think?
[20:33:59] <cbreak> in particular the PrintTo() function
[20:34:09] *** Joins: RabidToaster (~Thunderbi@bras-base-otwaon234vw-grc-15-50-100-215-56.dsl.bell.ca)
[20:34:10] *** Joins: AbleBacon (~AbleBacon@user/AbleBacon)
[20:34:53] <grmbl> PJBoy: you wouldn't be able to reproduce since it has heavy dependencies all over the place
[20:35:04] <PJBoy> alright
[20:35:08] <cbreak> and yes, do NOT define operator overloads in global namespace
[20:35:16] <noent> so.. just do get this straigt: is it a good idea in general to define operator<< in the same namespace as the type?
[20:35:19] <grmbl> it's one of these codebases that has overcomplicated dependencies all over the place, sadly
[20:35:29] <cbreak> noent: it's basically required for operator overloads to work properly
[20:35:37] <grmbl> that's one of the reasons why I fight re-using their code with tooth and nail
[20:35:57] <noent> uh, when don't they work properly?
[20:36:03] <grmbl> they made me reuse their internal json parser with an awful API whereas i was using nlohmann's json without any problems
[20:36:14] <PJBoy> oh I know that pain
[20:36:15] <noent> I had no problem so far with putting them in the global namespace
[20:36:23] <cbreak> it won't be found via adl
[20:36:32] <noent> thanks, imMute, thanks cbreak!
[20:36:39] <noent> I'll read up on it
[20:36:46] <cbreak> it might collide with other implementations
[20:37:00] <cbreak> I think user code should stay out of the global namespace, if possible
[20:37:06] *** Joins: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it)
[20:37:13] <cbreak> especially library code.
[20:37:42] <noent> alright, thank you!
[20:39:44] <NoXzema> Oo, that reimplementation of the json wheel, hits close.
[20:40:00] <NoXzema> 1000 json implementations on the internet but nah, let's make a new one.
[20:40:24] <grmbl> PJBoy: that's the main reason why I don't like C++, having to use so much bad C++ code. i wish one day i'll work at a place that writes clean and simple C++ code
[20:40:51] <grmbl> it gives too many footguns to people and man, are they trigger-happy
[20:41:07] <PJBoy> I find that holds with the other programming languages too
[20:41:11] <grmbl> sure
[20:41:26] <PJBoy> life is hard
[20:41:32] <NoXzema> Moral of the story: Programmers are all awful.
[20:41:39] <rpav> any sufficiently-used language is evidently shit
[20:41:40] <NoXzema> :P
[20:41:53] <grmbl> i have an easier time with bad C code because i'm way more used to it and there are fewer possibilities for overcomplicating things
[20:41:59] <PJBoy> C++ has obnoxious linking and build issues
[20:42:05] <PJBoy> but it has fairly decent tooling
[20:42:10] <grmbl> rpav: turing-completeness implies complete-shitness
[20:42:10] <LordKalma> ytet another day we reach the conclusion everything sucks balls
[20:42:14] <PJBoy> you could try running an address sanitizer build
[20:42:22] <NoXzema> I don't think C is immune to over-complication though.
[20:42:28] <rpav> grmbl: only in some respects .. there can easily be obtuse and overcomplicated C apis
[20:42:32] <PJBoy> -fsanitize=address on gcc/clang
[20:42:36] <LordKalma> with C you just pass the complication downstream
[20:42:37] <cbreak> noent: https://godbolt.org/z/3xheWMjr4, if you care
[20:42:45] <PJBoy> on both the CFLAGS and LDFLAGS
[20:42:49] <grmbl> it's not, but you can't have overcomplicated multiple inheritance schemes
[20:43:05] <grmbl> oh, I could try that, cheers
[20:43:06] <rpav> well, you can, they're just different
[20:43:17] <LordKalma> there are many vtable implementations for C
[20:43:22] <grmbl> i've seen them
[20:43:36] <grmbl> i've done some kernel stuff and there is object-oriented C code all over the place
[20:43:39] <NoXzema> COM and you can have aggregate inheritance in C
[20:43:47] <NoXzema> I don't think that's any better than what you'll see in C++
[20:43:51] <PJBoy> aggregate inheritance is a scary term
[20:43:51] <rpav> then it's, not only do you have to manage the complexity, you have to manually manage it, because no C automation
[20:44:01] <cbreak> grmbl: I've seen extremely overcomplicated things in C, for example inside ffmpeg, or zfs kernel module :D
[20:44:26] <grmbl> heh fair
[20:44:58] <grmbl> i know a vlc dev who's got loads to say about ffmpeg :p
[20:45:17] <cbreak> I'm happy I only interface with it, and don't have to change its innards
[20:45:24] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[20:48:01] <grmbl> i know that feeling
[20:49:12] *** Joins: riebers (~riebers@185.107.25.45)
[20:50:38] <Haohmaru> i've seen some C peripheral libraries or HALs
[20:50:43] <Haohmaru> f*ck that sh*t
[20:50:52] *** dostoyev1ky2 is now known as dostoyevsky2
[20:50:58] <grmbl> Haohmaru: yeah, so have i
[20:51:01] <Haohmaru> layers of crap and macros
[20:51:01] <grmbl> they're utter crap
[20:51:16] <Haohmaru> preprocessor macros
[20:51:20] <grmbl> at $work, i've even seen people write layers of crap and macros, but in c++
[20:51:31] <grmbl> this way you get the worst of both worlds :D
[20:51:43] <Haohmaru> i've seen crapduino
[20:51:50] <Haohmaru> but only slightly
[20:52:15] <rpav> if you're not that familiar with C++, i'm not sure your "crap-or-not"-o-meter is well-tuned
[20:52:20] <Haohmaru> today i saw some .cpp where some pointer gets initialized to NULL, yet slightly below that there were some lambdas
[20:52:37] <LordKalma> arduino is weird
[20:52:40] <LordKalma> just use gcc
[20:52:56] <grmbl> rpav: that's a fair concern. my crap-o-meter is mostly based on noticing layers upon layers of classes, and C-style C++
[20:53:56] <grmbl> and also on code that's really hard to read
[20:53:56] <Haohmaru> !fact
[20:53:58] <nolyc> Haohmaru: Bit-fields are assigned right-to-left on some machines, left-to-right on others.
[20:54:01] <rpav> grmbl: it's hard to tell if hte former is a problem without context, though "C with some plus" is .. though, _modern_ C++ is probably a lot less "evidently OOP" than it used to be
[20:54:42] <grmbl> rpav: yeah, that's what i mean. i'm not very familiar with c++ but enough to recognize modern c++ practices and we definitely have a lot of legacy c++03 code
[20:55:09] <rpav> that's definitely icky ;/
[20:55:10] <grmbl> a lot of naked pointers, code reinventing range-based iterators, etc
[20:55:20] <rpav> that's .. not clearly so
[20:55:24] <rpav> nothing wrong with "naked pointers"
[20:55:49] <Haohmaru> (18+)
[20:55:55] <rpav> also since c++20 ranges aren't a thing until 20, and dealing with iterators sucks, having something to deal with them is probalby handy
[20:56:01] <rpav> Haohmaru: ;)
[20:56:20] <Haohmaru> nude_ptr_t
[20:56:37] <grmbl> what they wrote was a function that takes a lambda and calls it with each list element as an argument
[20:56:53] <grmbl> instead of writing something that allows you to write for (auto x: derp)
[20:57:05] <rpav> not terrible but perhaps legacy
[20:57:24] <rpav> neither one on its own are composable which is pretty annoying
[20:57:31] <grmbl> OTOH, for their JSON parser, there was a LOT of type-casting
[20:57:57] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41)
[20:57:57] <grmbl> you had a lot of casting to Json::Value* to stuff, then back to value, etc
[20:58:02] *** Quits: Haohmaru (~Haohmaru@195.24.53.110) (Remote host closed the connection)
[20:58:13] <rpav> i'm not sure that's unusual
[20:58:26] <grmbl> nlohmann's json does that in a "hidden" way, so you can easily write foo[0]["bleh"][stuff]
[20:58:32] <rpav> though writing one's own json parser is a bit of a bad sign, depending on when it was written
[20:58:39] <grmbl> 2019
[20:59:02] <cbreak> there have been simple json parsers even a decade ago
[20:59:05] <grmbl> and i was told it was due to avoidance of external code, even BSD-licensed code
[20:59:05] <cbreak> no point writing your own
[20:59:08] <rpav> eh .. nlohmann has a fair bit of casting; any values you get out of it without are value copies which can be expensive
[20:59:15] <cbreak> parsers are always trouble
[20:59:22] <rpav> yeah there is definitely not a good reason to write a json parser in C++ in 2019
[20:59:23] <grmbl> that they are
[20:59:25] <cbreak> unless you want to introduce security holes, it's best avoided
[20:59:35] <grmbl> i never write parsers if i can avoid them
[21:00:02] <grmbl> and if i have to, it's either going to be using a lexer and parser generator, or parser combinators
[21:00:28] <NoXzema> I don't think writing parsers themselves are bad, it's just that json specifically is used as a wire format which means it needs to be hardened.
[21:00:30] <cbreak> try boost::spirit :D
[21:00:32] <grmbl> i've written a smol compiler with llvm and bison before, that was fun
[21:00:32] * rpav is writing a parser .. but there isn't another great option, and it's using a parser generator
[21:00:40] <NoXzema> Writing secure code in general is hard.
[21:00:46] <rpav> also for a "language"/shell so i mean you kinda have to
[21:01:09] <rpav> grmbl: cool .. i noticed bison is GPL-excepted now which is nice
[21:01:16] <noent> cbreak: what do I see in your godbolt?
[21:01:19] <rpav> i will probably try porting this to bison/c++ at some point
[21:01:33] <cbreak> noent: that the wrong overload is matched
[21:01:40] <grmbl> i'm a bit sad that my c++ classes were utter shite
[21:01:46] <cbreak> but if you move it into the right namespace, the right one is called
[21:01:53] <cbreak> (see the commented out variant)
[21:02:25] <grmbl> that compilers class was fun and enforced good C++ code (the teacher was actually a good C++ programmer) but otherwise i've never had a good c++ class
[21:02:45] <grmbl> my normal c++ classes were about as good as your average java introductory class
[21:03:07] <grmbl> are there any books that are considered good references for modern C++ ?
[21:03:09] <noent> cbreak: I am too stupid to see that. How do you know which overload is matched? I only see some assembler and a linker error
[21:03:40] <noent> oh, you mean test() should have the same mov statement as foo?
[21:04:03] *** Joins: DSpider (~DSpider@82.79.237.112)
[21:05:15] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
[21:06:38] *** Joins: paul424 (~tom@ip-5-172-237-133.multi.internet.cyfrowypolsat.pl)
[21:08:07] *** Quits: peepsalot (~peepsalot@openscad/peepsalot) (Quit: Connection reset by peep)
[21:09:36] <PJBoy> !books
[21:09:38] <nolyc> A nice C++ book guide and list can be found at http://stackoverflow.com/q/388242/1090079
[21:09:48] <grmbl> cheers
[21:10:17] *** Joins: peepsalot (~peepsalot@openscad/peepsalot)
[21:13:13] <grmbl> PJBoy: fwiw, you were right. it was an ODR problem, i renamed the global variable to a stupid name that couldn't possibly exist elsewhere and the issue went away
[21:13:22] <grmbl> thanks !
[21:15:35] *** Joins: lkor (~lionkor@beammp/staff/lionkor)
[21:16:19] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 256 seconds)
[21:21:04] *** Joins: Xardas (~Xardas@149.233.51.127)
[21:28:13] *** Quits: ezzieyguywuf (~Unknown@user/ezzieyguywuf) (Ping timeout: 256 seconds)
[21:29:57] <cbreak> noent: that's what the function returns, yes
[21:31:51] *** Joins: gentooclimax (~gentoocli@81-64-65-213.rev.numericable.fr)
[21:33:02] *** Joins: kenanmarasli (~kenanmara@user/kenanmarasli)
[21:36:10] *** Quits: Figworm (FiggyWitIt@user/figworm) (Quit: Figworm)
[21:39:01] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[21:39:20] *** Quits: lkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 268 seconds)
[21:41:13] *** Quits: npaperbot (~npaperbot@dodecahedron.m-ou.se) (Remote host closed the connection)
[21:41:21] *** Joins: npaperbot (~npaperbot@dodecahedron.m-ou.se)
[21:41:21] *** ChanServ sets mode: +v npaperbot
[21:42:33] <noent> ah, makes sense
[21:45:52] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 250 seconds)
[21:46:17] *** Quits: n3rdy1 (~n3rdy1@2600:1700:4570:3480::41) (Ping timeout: 240 seconds)
[21:48:31] *** Joins: sh00p (~z@h-213-164-223-180.A498.priv.bahnhof.se)
[21:52:13] *** Joins: Itaru (~Itaru@185.65.135.251)
[21:54:36] *** Joins: p-i-_ (~Ohmu@2403:6200:8978:84e4:6ca6:2acc:8b3a:8bbc)
[21:54:56] *** Joins: Tobbi (~Tobbi@2a02:8108:1240:48ec:bc04:150b:5ca9:e842)
[21:56:42] *** Quits: p-i- (~Ohmu@2403:6200:8978:7bf1:f561:19e3:efdc:bc1d) (Ping timeout: 250 seconds)
[21:59:52] *** Joins: n3rdy1 (~n3rdy1@2600:1700:4570:3480:1b88:50f:dae0:9293)
[22:02:46] *** Quits: proller (~p@2a02:6b8:0:40c:159c:f811:f62c:1848) (Ping timeout: 268 seconds)
[22:03:32] *** Quits: jkaye (~jkaye@2601:281:200:1958:cc69:95b3:52f2:6773) (Ping timeout: 240 seconds)
[22:19:49] *** Quits: lionkor (~lionkor@beammp/staff/lionkor) (Ping timeout: 240 seconds)
[22:19:50] *** Joins: ezzieyguywuf (~Unknown@user/ezzieyguywuf)
[22:22:26] *** Quits: Tokamak (~Tokamak@172.58.188.238) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[22:24:03] *** Joins: Tokamak (~Tokamak@172.58.188.238)
[22:25:29] *** Quits: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl) (Read error: Connection reset by peer)
[22:25:45] *** Joins: Serpent7776 (~Serpent77@90-156-31-193.internetia.net.pl)
[22:31:57] *** Joins: magla (~gelignite@55d4c25e.access.ecotel.net)
[22:36:14] *** Joins: kevr (~kevr@user/kevr)
[22:36:18] <kevr> hello.
[22:36:31] *** Joins: Figworm (~inoor@user/figworm)
[22:36:38] <kevr> does anybody know a way to define some extra flags for meson's coverage lcov executions?
[22:36:52] <kevr> i'd like to omit *.test.cpp files from being reported.
[22:36:54] *** Quits: Figworm (~inoor@user/figworm) (Client Quit)
[22:37:09] *** Parts: grmbl (~grmr@user/grmr) ()
[22:38:51] *** Joins: Figworm (FiggyWitIt@user/figworm)
[22:39:03] <kevr> shit, doesn't look like there is a way.
[22:40:23] *** veverak1 is now known as veverak
[22:42:32] *** Quits: KombuchaKip (~kip@192.252.230.5) (Quit: Leaving.)
[22:44:55] *** Quits: Friithian (~gunqqer@friithian.dev) (Quit: Lost terminal)
[22:45:00] <PJBoy> grmbl, yo happy to hear it
[22:46:35] <kevr> or maybe there's an lcov env var i can use for omit?
[22:49:15] *** Quits: riebers (~riebers@185.107.25.45) (Ping timeout: 256 seconds)
[23:00:25] *** Joins: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d)
[23:00:25] *** Quits: skapata (~Skapata@2804:14c:87b0:a6f9:1cb:469c:e868:928d) (Changing host)
[23:00:25] *** Joins: skapata (~Skapata@user/skapata)
[23:00:51] *** Joins: proller (~p@80.240.216.69)
[23:00:52] *** Quits: paul424 (~tom@ip-5-172-237-133.multi.internet.cyfrowypolsat.pl) (Quit: Leaving)
[23:01:15] *** Joins: lionkor (~lionkor@beammp/staff/lionkor)
[23:02:23] *** Joins: Friithian (~gunqqer@friithian.dev)
[23:05:17] *** Quits: markong (~kvirc@213.146.188.203) (Ping timeout: 240 seconds)
[23:07:16] *** Joins: KombuchaKip (~kip@192.252.230.5)
[23:07:20] *** Quits: proller (~p@80.240.216.69) (Ping timeout: 250 seconds)
[23:10:13] <BurumaSerafuku> kevr: is meson a build system?
[23:11:36] <AmR> how to apply a patch file ? And did I need git ver fro project or not ?
[23:11:51] <rpav> patch -p1 < p.patch
[23:12:03] <ville> the exact command line depends on the patch fil
[23:12:06] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[23:12:10] <rpav> but generally it's that
[23:12:21] <imMute> and you need whatever version the patch was made against (others may work but they might not too)
[23:12:31] *** Joins: Codaraxis_ (~Codaraxis@user/codaraxis)
[23:14:26] <kevr> interesting, in their code.. they seem to just have it hardcoded, there's no option to include custom flags.
[23:14:33] <kevr> https://github.com/mesonbuild/meson/pull/9848/files
[23:14:42] *** Joins: Codaraxis__ (~Codaraxis@user/codaraxis)
[23:14:58] <kevr> BurumaSerafuku: yeah, it is.
[23:15:26] *** Joins: jkaye (~jkaye@2601:281:200:1958:837d:401b:4a0:3b8f)
[23:16:15] <BurumaSerafuku> kevr: your life would be easier if you used Bazel instead ;-)
[23:16:30] <kevr> but ninja sounds so neat!
[23:16:31] <kevr> :P
[23:16:38] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:17:46] *** Quits: Codaraxis_ (~Codaraxis@user/codaraxis) (Ping timeout: 256 seconds)
[23:20:32] <rpav> i smell CppCon in disguise
[23:21:02] *** Joins: proller (~p@2a02:6b8:b081:12::1:2e)
[23:22:30] *** Quits: sbrothy (~sbrothy@192038130004.mbb.telenor.dk) (Ping timeout: 250 seconds)
[23:36:07] <LordKalma> cmake team :D
[23:36:32] <LordKalma> also ninja is a build system most build system generators support
[23:36:57] <pulse> no to all of the above
[23:37:11] <pulse> i choose the green visual studio "Play" button
[23:37:15] <LordKalma> hjahaha
[23:37:20] *** Joins: Guest19 (~Guest19@2601:647:5280:2a50:5006:f150:c832:5e73)
[23:40:42] <rpav> msbuild is still a build system
[23:40:50] <rpav> unclear how good
[23:41:07] <imMute> extremely customizable.  which I put in both the pro and con columns.
[23:42:16] <rpav> be a pro and a con; you too can get paid to break the law
[23:42:44] <imMute> in all honesty, if you can figure out how to hook into the build system to do the thing you need, it works really well.
[23:42:53] <imMute> but, like cmake, it's really hard to figure out what the "right" way to do things is.
[23:43:22] <rpav> well i think they use it internally, like VS, so it probably works reasonably well
[23:43:52] <imMute> yeah VS uses MSBuild internally
[23:44:26] <rpav> no i mean MS uses VS/MSBuild internally
[23:44:26] <imMute> at least for the older project types.  the newer stuff they've been inventing the last couple years, idk if that uses MSBuild or not
[23:44:42] <rpav> like i wonder if they build windows with msbuild; that would be a pretty good sell
[23:44:50] <imMute> oh, absolutely.  it's the reason VS is the only program that doesn't use the Office Ribbon
[23:45:54] <rpav> also no edit > preferences iirc
[23:46:23] <LordKalma> VS is more than half C# at this point
[23:47:04] <LordKalma> I'm not sure if vcsproj's are also msbuild or nit
[23:47:06] <LordKalma> not*
[23:47:35] <imMute> if it's XML it probably is.
[23:47:50] <LordKalma> of course it is
[23:47:54] <LordKalma> MS can't get enough of XML
[23:49:23] <imMute> XML is great when you use it right.  (which in some cases is *not* using it)
[23:49:39] <imMute> step one is have an actual schema that you validate against obsessively.
[23:50:36] *** Parts: blackout69 (~blackout6@net-109-117-245-237.cust.vodafonedsl.it) ()
[23:51:11] <LordKalma> they love that XAML stuff for UI libraries
[23:51:17] <LordKalma> all use them, even the third party ones
[23:51:55] *** PJBoy is now known as Guest8943
[23:51:55] *** Quits: Guest8943 (~PJBoy@user/pjboy) (Killed (lithium.libera.chat (Nickname regained by services)))
[23:52:01] *** Joins: PJBoy (~PJBoy@user/pjboy)
[23:54:36] *** Joins: sbrothy (~sbrothy@192038130004.mbb.telenor.dk)
[23:58:32] *** Quits: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net) (Quit: williampiv)
[23:59:34] *** Joins: williampiv (~williampi@ip24-254-86-223.sb.sd.cox.net)
