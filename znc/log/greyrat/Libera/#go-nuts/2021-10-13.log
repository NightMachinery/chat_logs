[00:01:05] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[00:02:53] *** Joins: fikran (~fikran@user/fikran)
[00:05:06] *** Joins: k0ta (~k0ta@151.210.174.146)
[00:07:12] *** Quits: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7) (Remote host closed the connection)
[00:07:23] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[00:07:46] *** Joins: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7)
[00:08:07] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[00:08:09] *** Joins: krux02 (~krux02@p5493265d.dip0.t-ipconnect.de)
[00:08:39] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Ping timeout: 245 seconds)
[00:12:33] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[00:13:18] *** Joins: normen (~normen@pd9eece5f.dip0.t-ipconnect.de)
[00:16:13] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[00:16:13] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[00:16:13] *** Joins: wroathe (~wroathe@user/wroathe)
[00:17:49] *** Quits: normen (~normen@pd9eece5f.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[00:19:34] *** Joins: normen (~normen@2a00:20:7042:72b7:d869:7dea:6493:e8a5)
[00:20:54] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 260 seconds)
[00:29:21] *** Joins: bpalmer (~user@user/bpalmer)
[00:31:39] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[00:31:44] *** Quits: ibrahimk9000 (~ibrahimk9@105.110.165.221) (Quit: Ping timeout (120 seconds))
[00:37:42] *** Joins: VSpike (~johncc@2001:bc8:47ac:1a22::1)
[00:38:24] *** Joins: dza (~dza@user/dza)
[00:38:43] *** Quits: arinov (~arinov@188.58.26.189) (Ping timeout: 252 seconds)
[00:39:40] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[00:49:43] *** Quits: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi) (Ping timeout: 252 seconds)
[00:50:26] *** Joins: normen_ (~normen@p54b353b6.dip0.t-ipconnect.de)
[00:51:07] <VSpike> Hi! Is it idiomatic in Golang to have a builder type where you start with an instance of it and keep calling modifier methods that return a copy of it? e.g https://play.golang.org/p/-gigTa1Gu5d
[00:51:44] <ikke> aka fluid interface
[00:51:47] <VSpike> I'm wondering which approach is "better". The second one seems to work more ways and should be more efficient
[00:52:25] *** Quits: normen (~normen@2a00:20:7042:72b7:d869:7dea:6493:e8a5) (Ping timeout: 260 seconds)
[00:52:27] *** normen_ is now known as normen
[00:53:26] <VSpike> I was looking at a more complex real piece of code that uses the first approach (returning a copy and not modifying the original) and it's always used in a long chain with a `.Build()` call at the end which returns the final result so it works
[00:53:58] <VSpike> However, the struct would be copied many times in that process
[00:54:01] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[00:54:36] <VSpike> I haven't used Go much so I'm wondering which would be the least surprising to you if you encountered it
[00:56:09] *** Quits: sshow (~sshow@neo.hackeriet.no) (Remote host closed the connection)
[00:56:49] <ikke> VSpike: depends how often it's executed
[00:57:21] <bpalmer> I have more often seen either (a) mutators on (*T) that modify the pointed-to object and also return the pointer for convenience; or (b) a builder that just is modifying an internal struct/variables and then copies it only on the .Build()
[00:59:42] *** Joins: itsalexjones (~itsalexjo@82.4.99.241)
[01:02:18] *** Quits: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7) (Remote host closed the connection)
[01:02:30] *** Joins: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7)
[01:06:17] *** Joins: rcernin (~rcernin@144.132.209.31)
[01:20:01] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[01:21:41] *** Joins: ztx (~ztx@user/ztx)
[01:22:09] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 265 seconds)
[01:26:10] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[01:26:10] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[01:26:10] *** Joins: wroathe (~wroathe@user/wroathe)
[01:30:22] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[01:30:51] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[01:30:52] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Remote host closed the connection)
[01:31:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 252 seconds)
[01:34:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:36:18] *** Joins: khrbt (~znc@user/khrbt)
[01:37:43] <b0nn> VSpike: If you modify you need to ensure that it's thread safe
[01:38:20] <b0nn> That's why FP passes copies around, modifying in-place is a concurrency nightmare
[01:39:18] <b0nn> OO takes a different approach where the actual data is encapsulated (preventing outsiders from direct access) where the synchronisation is baked in (hopefully) into the accessors
[01:40:31] *** Quits: TheCoffeMaker (~TheCoffeM@user/thecoffemaker) (Ping timeout: 265 seconds)
[01:41:35] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[01:41:54] <bpalmer> ideally a builder is so lightweight nobody ever bothers sharing it
[01:42:15] *** Joins: TheCoffeMaker (~TheCoffeM@user/thecoffemaker)
[01:42:46] <b0nn> (The "ownership" pattern that's becoming prevalent is just a fancy way of saying "Only the owner is allowed to modify this" - which really means (in something like rust) that methods tell you upfront (with the 'mut' keyword) if a method wants to modify the data it's given, which gives the caller fair warning on whether to pass ownership, or a copy
[01:45:25] <b0nn> bpalmer: ideally programmers would write threadsafe code from the get-go :P
[01:51:12] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[01:53:02] *** Quits: mrig (~mrig@user/mrig) (Quit: WeeChat 3.3)
[01:53:35] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[01:53:53] *** Quits: normen (~normen@p54b353b6.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[01:54:28] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4)
[01:54:47] <awmv> Is this also for traefik related quetions?
[01:55:04] <awmv> I'm stuck and I'm desperate
[01:56:32] *** Joins: chasmo77 (~chas77@71.63.241.168)
[01:56:42] *** Quits: itsalexjones (~itsalexjo@82.4.99.241) (Quit: Leaving)
[01:57:15] <bpalmer> the easiest way to write thread-safe code is to not share memory.
[01:57:41] <bpalmer> go has no particular support for declaring that, other than just documenting in a comment: "Hey, make your own builder. They're really cheap."
[01:58:47] *** Joins: mrmanner (~jmanner@user/mrmanner)
[01:59:45] *** xfnw2 is now known as vulpine`
[01:59:58] <b0nn> Yeah, to an extent, although you can overlay an OO pattern of keeping the data in an unexported type
[02:00:53] <b0nn> awmv: there's #traefik; have you tried in there?
[02:01:14] *** Quits: attila_lendvai (~alendvai@catv-213-222-131-28.catv.broadband.hu) (Ping timeout: 260 seconds)
[02:01:17] <awmv> b0nn: Yeah, before I asked here
[02:01:41] <b0nn> What's the problem, I doubt that I can help, but ... rubber ducky and all that
[02:03:17] <awmv> This repo https://github.com/jfroment/seedbox uses Traefik v2 for a reverse proxy for docker containers. I don't know how to set up my DNS records at Porkbun for this
[02:04:03] <awmv> I found this https://go-acme.github.io/lego/dns/porkbun/ but that didn't really help
[02:04:59] <b0nn> OIC, you want to set up a "Seed box" on Porkbun?
[02:05:30] <awmv> It's just the registrar
[02:05:49] <b0nn> I'm not judging, I'm just coming to grips with what you're up to
[02:06:21] <b0nn> So, the problem is internal DNS, or DNS that points to the traefik endpoints?
[02:08:42] <awmv> I'd think the wildcard DNS that points to traefik? Not really familiar with traefik, though :)
[02:09:09] <b0nn> Glad I could help :)
[02:10:01] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[02:10:10] <b0nn> maybe try #docker?
[02:11:38] *** Quits: mrmanner (~jmanner@user/mrmanner) (Read error: Connection reset by peer)
[02:12:00] *** Joins: mrmanner (~jmanner@h-98-128-201-128.A785.priv.bahnhof.se)
[02:12:14] *** Joins: fikran (~fikran@user/fikran)
[02:16:07] <awmv> b0nn: https://i.imgur.com/SvDaNQt.png
[02:16:58] <awmv> I guess that gives you more info
[02:18:01] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 245 seconds)
[02:24:36] *** Quits: mrmanner (~jmanner@h-98-128-201-128.A785.priv.bahnhof.se) (Changing host)
[02:24:36] *** Joins: mrmanner (~jmanner@user/mrmanner)
[02:29:21] *** Joins: analbleeding (6bbd1e16@67.205.143.82)
[02:31:09] *** Parts: analbleeding (6bbd1e16@67.205.143.82) ()
[02:33:40] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[02:41:22] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[02:42:41] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[02:44:17] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[02:50:38] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[02:50:38] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[02:50:38] *** Joins: wroathe (~wroathe@user/wroathe)
[02:55:26] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[02:58:17] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Quit: WeeChat 3.3)
[03:00:47] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[03:01:02] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[03:01:43] *** Quits: mika (~mika@odysseus.grml.info) (Ping timeout: 252 seconds)
[03:03:01] *** Quits: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt) (Quit: Lost terminal)
[03:03:05] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4) (Quit: Client closed)
[03:06:47] *** Joins: normen (~normen@pd9eec54e.dip0.t-ipconnect.de)
[03:10:09] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[03:10:34] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[03:12:13] *** Quits: normen (~normen@pd9eec54e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[03:14:39] *** Quits: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de) (Remote host closed the connection)
[03:17:42] *** Joins: internut_ (~internut@98.38.226.136)
[03:18:37] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[03:20:13] *** Quits: internut (~internut@2601:280:4e00:7b70:41f3:85d5:4dca:75a7) (Ping timeout: 265 seconds)
[03:20:27] *** Joins: INeedAHandle (~INeedAHan@211.192.133.205)
[03:25:24] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[03:31:59] *** Joins: theplushfrog (~theplushf@2601:43:8200:f8e0:64f6:274:b204:b078)
[03:33:12] *** Parts: theplushfrog (~theplushf@2601:43:8200:f8e0:64f6:274:b204:b078) ()
[03:37:52] <pinky_> anyone have any good examples of using viper and cobra together without global variables? is it actually required to call viper.BindPFlags in init() ?
[03:46:02] *** Quits: predmijat (~predmijat@mail.strogopro.com) (Quit: bye)
[03:47:37] *** Joins: predmijat (~predmijat@mail.strogopro.com)
[03:57:19] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 252 seconds)
[03:57:32] *** Quits: unmanbearpig (~unmanbear@user/unmanbearpig) (Remote host closed the connection)
[03:57:55] *** Joins: unmanbearpig (~unmanbear@user/unmanbearpig)
[03:58:38] <pinky_> i'm not even sure what it means to bind flags to viper, that means the flags override the config file if they are set?
[04:02:11] *** Joins: chpar (~chpar@node-1w7jra2bl9lr0nstpq07d1mxw.ipv6.telus.net)
[04:02:33] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[04:04:08] <chpar> dingus
[04:08:58] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4)
[04:12:25] *** ahappydeath is now known as Guest7323
[04:12:25] *** Quits: Guest7323 (~silbermm@user/ahappydeath) (Killed (molybdenum.libera.chat (Nickname regained by services)))
[04:12:50] *** Joins: Guest7323 (~silbermm@user/ahappydeath)
[04:15:12] <b0nn> !ops
[04:19:52] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[04:20:02] *** Joins: brainfreeze (~brainfree@2a03:1b20:4:f011::20d)
[04:21:35] *** Joins: fikran (~fikran@user/fikran)
[04:22:41] *** Joins: burningserenity (~burningse@2603:9001:f01:ad99::1004)
[04:25:02] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[04:25:44] *** Joins: int3l (~int3l@78-83-119-37.spectrumnet.bg)
[04:26:06] *** Quits: int3l (~int3l@78-83-119-37.spectrumnet.bg) (Client Quit)
[04:27:12] <pinky_> oh crap, this was exactly my issue, i have something similar and accidentally had called viper package functions instead of the method on v
[04:27:14] <pinky_> https://www.reddit.com/r/golang/comments/77f9lb/viper_config_from_a_file/
[04:30:32] *** Joins: ahappydeath (~ahappydea@dsl-74-83-53-157.fuse.net)
[04:35:53] *** Quits: ahappydeath (~ahappydea@dsl-74-83-53-157.fuse.net) (Quit: WeeChat 3.2.1)
[04:36:30] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[04:38:00] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[04:38:00] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[04:38:00] *** Joins: wroathe (~wroathe@user/wroathe)
[04:42:38] *** Joins: idkfa (~idkfa@user/idkfa)
[04:45:02] *** Quits: be3uykpy (~be3uykpy@2a00:a040:19a:b060:e86c:be50:e673:c005) (Read error: Connection reset by peer)
[04:49:27] *** Joins: Compy_ (~compy@user/compy)
[04:56:21] *** Quits: neurocyte0132889 (~neurocyte@user/neurocyte) (Ping timeout: 245 seconds)
[04:59:21] *** Joins: gggpkm (~gggpkm@60.10.194.44)
[05:06:51] *** Quits: burningserenity (~burningse@2603:9001:f01:ad99::1004) (Quit: ZNC 1.8.2 - https://znc.in)
[05:11:09] *** Joins: gggpkm_ (~gggpkm@60.10.23.168)
[05:11:20] *** Quits: kiril (~kiril@85.91.153.163) (Quit: ZNC - https://znc.in)
[05:11:32] *** Joins: kiril (~kiril@85.91.153.163)
[05:14:19] *** Quits: gggpkm (~gggpkm@60.10.194.44) (Ping timeout: 252 seconds)
[05:16:08] *** Quits: dreamreal (~dreamreal@about/java/dreamreal) (Quit: dreamreal)
[05:21:14] <Seirdy> anyone have examples of testing panics caused by hard-to-simulate scenarios (e.g. crypto/rand.Int or /x/term.ReadPassword returning an error)? looking into fault injection rn
[05:21:54] <Seirdy> s/panics/panics and errors/
[05:24:10] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:30:06] *** Quits: whoami (~whoami@d118-75-170-49.try.wideopenwest.com) (Ping timeout: 265 seconds)
[05:34:33] *** Joins: whoami (~whoami@d118-75-170-49.try.wideopenwest.com)
[05:35:46] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[05:35:46] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[05:35:46] *** Joins: wroathe (~wroathe@user/wroathe)
[05:39:17] *** Quits: dza (~dza@user/dza) (Ping timeout: 265 seconds)
[05:39:44] <bpalmer> Seirdy: often, you just set up a fake function. E.g., in your package, 'var readPassword = term.ReadPassword'  and then in your test, 'original = readPassword; readPassword = func() (string, error) { return "", errors.New("something went wrong") } ; defer func() { readPassword = original }()'
[05:40:00] <bpalmer> and your code just calls readPassword()
[05:40:43] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[05:42:19] *** Quits: k0ta (~k0ta@151.210.174.146) (Read error: Connection reset by peer)
[05:43:23] *** Joins: dza (~dza@user/dza)
[05:44:18] *** Joins: elastic_dog (~elastic_d@2a01:118f:822:9c00:f583:aa51:9ad4:d4fb)
[05:46:23] <seebs> i am sort of unfond of that mechanism and i distrust it and tests that rely too much on it
[05:51:23] *** Joins: normen (~normen@pd9eec54e.dip0.t-ipconnect.de)
[05:56:37] *** Quits: normen (~normen@pd9eec54e.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[05:56:56] <bpalmer> I don't know of a particular better way, although sometimes you can mask it behind an interface
[06:01:04] *** Quits: ahappydeath (~ahappydea@user/ahappydeath) (Ping timeout: 252 seconds)
[06:01:24] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4) (Quit: Client closed)
[06:02:51] *** Joins: Atque (~Atque@user/atque)
[06:08:46] *** Quits: rcernin (~rcernin@144.132.209.31) (Ping timeout: 252 seconds)
[06:20:53] *** Quits: INeedAHandle (~INeedAHan@211.192.133.205) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[06:21:39] *** Joins: rcernin (~rcernin@2001:8003:6803:db00:c40b:e92a:acbd:63a2)
[06:23:17] *** Quits: rcernin (~rcernin@2001:8003:6803:db00:c40b:e92a:acbd:63a2) (Client Quit)
[06:23:37] *** Joins: rcernin_ (~rcernin@144.132.209.31)
[06:28:51] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[06:30:56] *** Joins: fikran (~fikran@user/fikran)
[06:33:13] *** Quits: idkfa (~idkfa@user/idkfa) (Quit: Leaving)
[06:33:40] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[06:34:13] *** Quits: tg (~tg@rockylinux/infra/tg) (Quit: tg)
[06:38:59] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[06:42:46] *** Joins: yelnah (~felix@203.221.122.90)
[06:43:05] *** Quits: ofh (~felix@61.69.196.50) (Ping timeout: 265 seconds)
[06:48:42] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 260 seconds)
[06:53:39] *** Joins: gggpkm__ (~gggpkm@60.10.194.44)
[06:54:29] *** Quits: martinkennelly (~martinken@84.203.20.92) (Remote host closed the connection)
[06:57:04] <Seirdy> bpalmer, seebs: looking at the gopass source code, you can also temporarily set crypto/rand.Reader to something deterministic, triggering an error when calling the csprng. that seems like a much cleaner way to handle crypto/rand errors.
[06:57:07] *** Quits: gggpkm_ (~gggpkm@60.10.23.168) (Ping timeout: 252 seconds)
[06:57:19] <Seirdy> seebs: do you know of any alternatives?
[06:59:11] *** Joins: gggpkm_ (~gggpkm@60.10.194.44)
[07:02:01] *** Joins: martinkennelly (~martinken@84.203.20.92)
[07:02:25] *** Quits: gggpkm__ (~gggpkm@60.10.194.44) (Ping timeout: 265 seconds)
[07:03:00] * b0nn votes for the fake function style - it's dead easy to implement, and ensure that you get deterministic values for testing
[07:05:27] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[07:08:34] *** Joins: k0ta (~k0ta@151.210.174.146)
[07:21:19] <seebs> i don't know, i have just spent a lot of time recently debugging code which never worked but which had some crazy workarounds "to allow us to test without having to fully instantiate things" and it turns out that those crazy workarounds also happen in real usage sometimes, and at least one of the functions involved *can't work without them*.
[07:21:35] <seebs> like, it has a parameter which does not admit any value actually being correct and usable
[07:22:46] <b0nn> Your complaint is that its been done badly on your codebase?
[07:25:23] *** Quits: Compy_ (~compy@user/compy) (Quit: Going offline, see ya! (www.adiirc.com))
[07:26:16] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 252 seconds)
[07:30:18] <Seirdy> aite by emulating what gopass did, here's my crypto/rand panic test: https://termbin.com/ttx1
[07:30:41] <Seirdy> looks like the test for ReadPassword is gonna need to use a fake function
[07:38:38] *** Joins: frost (~frost@59.71.244.189)
[07:43:40] *** Joins: gggpkm__ (~gggpkm@60.10.23.168)
[07:44:20] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[07:44:20] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[07:44:20] *** Joins: wroathe (~wroathe@user/wroathe)
[07:45:10] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[07:46:40] *** Quits: gggpkm_ (~gggpkm@60.10.194.44) (Ping timeout: 252 seconds)
[07:58:07] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[08:02:18] *** Joins: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de)
[08:06:13] *** Joins: mika (~mika@odysseus.grml.info)
[08:06:46] *** Quits: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[08:09:07] *** Quits: danderson (~dave@tailscale/danderson) (Quit: WeeChat 3.3)
[08:09:37] *** Joins: fernand (~fernand@179.156.35.4)
[08:10:24] *** Joins: danderson (~dave@tailscale/danderson)
[08:10:24] *** ChanServ sets mode: +v danderson
[08:12:28] *** fernand is now known as Fernanda
[08:14:55] *** Quits: LiftLeft (~LiftLeft@191.96.185.109) (Ping timeout: 265 seconds)
[08:17:28] *** Quits: lilgopher (~textual@2601:241:8000:38f0:91b6:1448:b1dc:d7cc) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[08:18:02] *** Quits: freakazoid343 (~matt@2603:9000:cf0f:80e3:a487:1497:3511:a6b2) (Read error: Connection reset by peer)
[08:19:39] *** Joins: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be)
[08:19:56] *** Joins: lilgopher (~textual@2601:241:8000:38f0:91b6:1448:b1dc:d7cc)
[08:20:55] *** Parts: Fernanda (~fernand@179.156.35.4) ()
[08:21:36] *** Joins: bugtrial6 (bugtrial@gateway/vpn/protonvpn/bugtrial)
[08:23:01] *** Quits: bugtrial (bugtrial@gateway/vpn/protonvpn/bugtrial) (Ping timeout: 245 seconds)
[08:23:01] *** bugtrial6 is now known as bugtrial
[08:24:37] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[08:28:36] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[08:30:04] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[08:33:14] *** Quits: INeedAHandle (~INeedAHan@39.124.72.106) (Ping timeout: 260 seconds)
[08:38:19] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[08:38:58] *** Joins: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de)
[08:39:46] *** Joins: vaginaldischarge (b9dc66f8@67.205.143.82)
[08:40:18] *** Joins: fikran (~fikran@user/fikran)
[08:41:21] *** Parts: vaginaldischarge (b9dc66f8@67.205.143.82) ()
[08:44:15] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[08:44:15] *** Quits: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[08:44:28] *** Quits: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl) (Remote host closed the connection)
[08:46:08] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[08:53:06] *** Joins: gggpkm_ (~gggpkm@60.10.194.44)
[08:56:28] *** Quits: gggpkm__ (~gggpkm@60.10.23.168) (Ping timeout: 252 seconds)
[08:59:09] *** Joins: gggpkm__ (~gggpkm@60.10.194.44)
[09:02:34] *** Quits: gggpkm_ (~gggpkm@60.10.194.44) (Ping timeout: 252 seconds)
[09:06:39] *** Joins: gggpkm_ (~gggpkm@123.113.177.190)
[09:09:41] *** Quits: gggpkm__ (~gggpkm@60.10.194.44) (Ping timeout: 245 seconds)
[09:11:00] *** Joins: Doraemon (~NeoCron@p200300c4cf1964009b5b3ef502cc8e57.dip0.t-ipconnect.de)
[09:12:29] *** Quits: martinkennelly (~martinken@84.203.20.92) (Remote host closed the connection)
[09:13:17] *** Quits: NeoCron (~NeoCron@p200300c4cf195d00df9b3d9f9a455325.dip0.t-ipconnect.de) (Ping timeout: 250 seconds)
[09:13:57] *** Joins: martinkennelly (~martinken@84.203.20.92)
[09:18:32] *** Joins: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de)
[09:21:08] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[09:22:29] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[09:25:18] *** Quits: eNV25 (~quassel@user/env25) (Quit: 😳)
[09:26:44] *** Joins: eNV25 (~quassel@user/env25)
[09:26:58] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[09:26:58] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[09:26:58] *** Joins: wroathe (~wroathe@user/wroathe)
[09:27:36] *** Quits: normen (~normen@p200300d7173139001ceb5bc8fed52134.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[09:32:15] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 265 seconds)
[09:41:30] *** Joins: normen (~normen@p200300d717349100c9f2b9197737a949.dip0.t-ipconnect.de)
[09:46:58] *** Quits: normen (~normen@p200300d717349100c9f2b9197737a949.dip0.t-ipconnect.de) (Ping timeout: 260 seconds)
[09:54:23] *** Joins: eNV25_ (~quassel@user/env25)
[09:54:24] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[09:54:46] *** Quits: eNV25 (~quassel@user/env25) (Ping timeout: 252 seconds)
[09:57:36] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[10:01:35] *** Joins: kiril (~kiril@85.91.153.163)
[10:03:38] *** Quits: girafe (~girafe@176-147-142-235.abo.bbox.fr) (Read error: Connection reset by peer)
[10:10:57] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[10:11:11] *** Joins: gggpkm__ (~gggpkm@60.10.194.44)
[10:11:40] *** Joins: sshow (~sshow@neo.hackeriet.no)
[10:13:57] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 250 seconds)
[10:14:09] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[10:14:14] *** Joins: gggpkm (~gggpkm@60.10.194.44)
[10:14:26] *** Quits: gggpkm_ (~gggpkm@123.113.177.190) (Ping timeout: 265 seconds)
[10:16:43] *** Quits: gggpkm__ (~gggpkm@60.10.194.44) (Ping timeout: 265 seconds)
[10:17:19] *** Joins: mrig (~mrig@user/mrig)
[10:18:09] *** Joins: gggpkm_ (~gggpkm@60.10.194.44)
[10:21:33] *** Quits: gggpkm (~gggpkm@60.10.194.44) (Ping timeout: 265 seconds)
[10:22:52] *** Quits: mrmanner (~jmanner@user/mrmanner) (Ping timeout: 252 seconds)
[10:23:40] *** Joins: on^ (~on@wsip-70-165-23-55.mc.at.cox.net)
[10:24:16] *** Joins: jcajka (~jcajka@89-24-144-111.customers.tmcz.cz)
[10:25:31] *** Quits: rcernin_ (~rcernin@144.132.209.31) (Ping timeout: 245 seconds)
[10:26:38] *** Joins: gggpkm__ (~gggpkm@123.113.177.190)
[10:29:41] *** Quits: gggpkm_ (~gggpkm@60.10.194.44) (Ping timeout: 245 seconds)
[10:32:01] *** Joins: rcernin_ (~rcernin@144.132.209.31)
[10:32:43] *** Joins: saschagrunert (~saschagru@46.128.124.46)
[10:35:47] *** Quits: brainfreeze (~brainfree@2a03:1b20:4:f011::20d) (Remote host closed the connection)
[10:47:39] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[10:48:14] *** Joins: theoceaniscool (~theoceani@119.12.232.133)
[10:49:33] *** Quits: gggpkm__ (~gggpkm@123.113.177.190) (Read error: Connection reset by peer)
[10:49:38] *** Joins: fikran (~fikran@user/fikran)
[10:53:38] *** Quits: greyrat (~greyrat@ip202.ip-51-178-215.eu) (Bye)
[11:53:51] *** Joins: greyrat (~greyrat@ip202.ip-51-178-215.eu)
[11:54:02] *** Joins: kochchef_ (~quassel@80.146.255.46)
[11:54:18] *** Joins: chameleon (~chameleon@62.ip-51-89-164.eu)
[11:54:45] *** Joins: lucerne (~lucerne@ip202.ip-51-178-215.eu)
[11:55:11] *** Server sets mode: +Ccnt 
[11:55:20] *** Joins: ws2k3 (znc@vps.freegamehosting.eu)
[11:55:55] *** Joins: dvdmuckle (~dvdmuckle@user/dvdmuckle)
[11:56:32] *** Joins: alrs (alrs@tilde.team)
[11:56:33] *** Joins: L1Cafe (~L1Cafe@user/l1cafe)
[11:57:00] *** Quits: kochchef (~quassel@80.146.255.46) (*.net *.split)
[11:57:00] *** Quits: strubbl891941988 (~strubbl@ipbcc0b2d1.dynamic.kabel-deutschland.de) (*.net *.split)
[11:57:00] *** Quits: meinside (uid24933@id-24933.helmsley.irccloud.com) (*.net *.split)
[11:57:00] *** Quits: hhes (sid420846@id-420846.ilkley.irccloud.com) (*.net *.split)
[11:57:00] *** Quits: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com) (*.net *.split)
[11:57:00] *** Quits: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d) (*.net *.split)
[11:57:00] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (*.net *.split)
[11:57:00] *** Quits: tpr (~tpr@user/tpr) (*.net *.split)
[11:57:00] *** Quits: pez (~pez@user/pez) (*.net *.split)
[11:57:00] *** Quits: leonardo (~leonardo@user/leonardo) (*.net *.split)
[11:57:00] *** Quits: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070) (*.net *.split)
[11:58:05] *** Joins: jakesyl_ (sid56879@id-56879.hampstead.irccloud.com)
[11:58:18] *** Quits: Kane (~Kane@2a01:e34:ee89:5d90:a530:aa0b:8923:2e0f) (Quit: Leaving)
[11:58:21] *** Quits: kochchef_ (~quassel@80.146.255.46) (Client Quit)
[11:58:30] *** Joins: kochchef (~quassel@80.146.255.46)
[11:58:31] *** Joins: pl (sid98063@id-98063.helmsley.irccloud.com)
[11:58:31] *** Quits: mrig (~mrig@user/mrig) (Ping timeout: 252 seconds)
[11:59:20] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[12:00:54] *** Joins: Artea (~Lufia@artea.com.pt)
[12:02:40] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[12:03:20] *** Joins: KDDLB (kevin@user/kddlb)
[12:03:41] *** Joins: Tv__ (uid62079@2a03:5180:f:1::f27f)
[12:03:41] *** Joins: bw__ (sid2730@2a03:5180:f:3::aaa)
[12:03:41] *** Joins: obviyus_ (sid415299@2a03:5180:f:5::6:5643)
[12:03:41] *** Joins: tylerchambers_ (sid511381@2a03:5180:f:1::7:cd95)
[12:03:41] *** Joins: hdm_ (sid500490@2a03:5180:f:4::7:a30a)
[12:03:41] *** Joins: meinside (uid24933@id-24933.helmsley.irccloud.com)
[12:03:41] *** Joins: hhes (sid420846@id-420846.ilkley.irccloud.com)
[12:03:41] *** Joins: jimcroft_______ (sid148498@id-148498.uxbridge.irccloud.com)
[12:03:41] *** Joins: orn (~orn@2a01:6f00:2:a51d:468a:5bff:fea5:bf9d)
[12:03:41] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[12:03:41] *** Joins: tpr (~tpr@user/tpr)
[12:03:41] *** Joins: pez (~pez@user/pez)
[12:03:41] *** Joins: leonardo (~leonardo@user/leonardo)
[12:03:41] *** Joins: earthbreaker (earthbreak@2600:3c03::f03c:91ff:fece:9070)
[12:05:15] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[12:05:35] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[12:11:00] *** Joins: Byteflux (~byte@byteflux.net)
[12:14:01] *** Joins: DaGo (~dago@85.ip-37-59-103.eu)
[12:14:01] *** Joins: Shimmy (~Shimmy@user/shimmy)
[12:14:25] *** Joins: ziofork (~ziofork@fr.worn.eu)
[12:14:36] *** Joins: azidhaka (~azidhaka@user/azidhaka)
[12:14:57] *** Joins: Kane (~Kane@portal.yarg.fr)
[12:20:32] *** Joins: ddevault (e7b4bb6755@sourcehut/staff/ddevault)
[12:20:32] *** Joins: samhza (sam@2600:3c03::f03c:92ff:fe40:814c)
[12:20:34] *** Joins: nebiros (nebiros@2600:3c03::f03c:91ff:fe7e:a08a)
[12:20:35] *** Joins: mmk2410 (~mmk2410@user/mmk2410)
[12:20:35] *** Joins: lofiguy (~lofiguy@87-207-104-205.dynamic.chello.pl)
[12:20:36] *** Joins: welt (~welt@willow.spiderden.net)
[12:20:37] *** Joins: zwr (~zwr@2804:d45:b966:fb00:daf:bd40:117d:c6e9)
[12:20:38] *** Joins: averell (~averell@irc.nf3.eu)
[12:20:38] *** Joins: zopsi (zopsi@2600:3c00::f03c:91ff:fe14:551f)
[12:20:38] *** Joins: mweckbecker (~matthias@weckbecker.name)
[12:20:41] *** Joins: Compy (compy@2600:3c00::f03c:91ff:fe83:6d49)
[12:20:41] *** Joins: nikos[work] (~ntsipinak@tsipinakis.cern.ch)
[12:20:41] *** Joins: gueorgui (~gueorgui@user/gueorgui)
[12:20:42] *** Joins: nostalgia (~nostalgia@2601:243:c600:95f0:22f1:3efe:9b37:299c)
[12:20:43] *** Quits: averell (~averell@irc.nf3.eu) (Changing host)
[12:20:43] *** Joins: averell (~averell@user/averell)
[12:20:44] *** Joins: mgubyt (u@mgub.yt)
[12:20:45] *** Joins: itok_ (sid418430@id-418430.ilkley.irccloud.com)
[12:20:46] *** Joins: eruditass_ (uid248673@id-248673.uxbridge.irccloud.com)
[12:20:48] *** Joins: jjakob (~quassel@2a01:260:8028:10f0::62)
[12:20:50] *** Joins: batdog (batdog@lnsq.elkins.co)
[12:20:51] *** Joins: dragonmaster (dragonmast@mail4.animalcules.com)
[12:20:53] *** Quits: nebiros (nebiros@2600:3c03::f03c:91ff:fe7e:a08a) (Changing host)
[12:20:53] *** Joins: nebiros (nebiros@user/nebiros)
[12:20:59] *** Joins: lechner (~lechner@letbox-vps.us-core.com)
[12:21:02] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[12:21:06] *** Quits: lechner (~lechner@letbox-vps.us-core.com) (Changing host)
[12:21:06] *** Joins: lechner (~lechner@debian/lechner)
[12:21:09] *** Joins: nmollerup (~nmollerup@customer-2a00-7660-1612-0168-cfa8-be86-5a22-ee27.ip6.gigabit.dk)
[12:21:11] *** Joins: derfj (sid19429@id-19429.tinside.irccloud.com)
[12:21:52] *** Quits: dragonmaster (dragonmast@mail4.animalcules.com) (Changing host)
[12:21:52] *** Joins: dragonmaster (dragonmast@user/dragonmaster)
[12:21:57] *** Joins: bugtrial0 (bugtrial@gateway/vpn/protonvpn/bugtrial)
[12:22:48] *** Joins: arinov (~arinov@213.194.126.155)
[12:23:25] *** Quits: bugtrial (bugtrial@gateway/vpn/protonvpn/bugtrial) (Read error: Connection reset by peer)
[12:23:25] *** bugtrial0 is now known as bugtrial
[12:24:29] *** Joins: asm_ (~alexander@burner.asm89.io)
[12:28:19] *** Joins: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de)
[12:28:31] *** Quits: menace (~someone@ppp-93-104-164-149.dynamic.mnet-online.de) (Changing host)
[12:28:31] *** Joins: menace (~someone@user/menace)
[12:28:37] *** Joins: tuskkk____ (uid18470@id-18470.tinside.irccloud.com)
[12:29:15] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:31:42] *** Quits: rcernin_ (~rcernin@144.132.209.31) (Ping timeout: 265 seconds)
[12:32:37] *** Quits: jlaffaye (~jlaffaye@user/jlaffaye) (Ping timeout: 252 seconds)
[12:32:50] *** Joins: jlaffaye (~jlaffaye@user/jlaffaye)
[12:33:10] *** Quits: xMopx (~xMopx-lib@192.95.23.134) (Ping timeout: 252 seconds)
[12:34:24] *** Joins: xMopx (~xMopx-lib@192.95.23.134)
[12:35:47] <iivvoo> roxlu go as a language didn't change that significantly in the 1.x releases as far as I know, though I didn't do go in 20215 yet
[12:36:01] <iivvoo> you could also just try the online resources, tour.golang.org etc
[12:36:22] <roxlu> iivvoo: thanks! yes, I'm walking through the tutorials atm.
[12:38:01] *** Quits: lilgopher (~textual@2601:241:8000:38f0:91b6:1448:b1dc:d7cc) (Ping timeout: 245 seconds)
[12:38:11] <iivvoo> as an "experienced programmer", your main struggles will probably grasping that interfaces and structs are not OO and you can simulate part of it, but it will not work as you expect with a traditional OO mindset. And understanding how to use channels, goroutines to your advantage
[12:38:44] <iivvoo> don't try to do it the pythonic (or java, c++, ruby, whatever) way in go
[12:39:14] <iivvoo> and accept that it has its quirks, weirdnesses and inconsistencies. Oh, and errors
[12:39:44] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[12:39:47] *** Joins: PortableDave (~portabled@194-223-17-29.tpgi.com.au)
[12:39:52] <iivvoo> and I think a 2015 book should still cover all those things - that hasn't changed much (though there may be more errors support stuff in the stdlib now, for example)
[12:40:26] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[12:42:58] *** Joins: mrig (~mrig@user/mrig)
[12:42:58] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Quit: WeeChat 3.2)
[12:44:29] *** Quits: Wouter0100 (~Wouter010@entry.nbg.netvos.nl) (Read error: Connection reset by peer)
[12:44:38] *** Joins: Wouter0100 (~Wouter010@entry.nbg.netvos.nl)
[12:48:26] *** Joins: mari0 (~mario@user/mari0)
[12:48:54] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5)
[13:00:33] *** Quits: obviyus_ (sid415299@2a03:5180:f:5::6:5643) (Changing host)
[13:00:33] *** Joins: obviyus_ (sid415299@user/obviyus)
[13:00:52] *** Joins: Atque (~Atque@user/atque)
[13:01:11] *** Quits: obviyus_ (sid415299@user/obviyus) ()
[13:01:32] *** Joins: obviyus_ (sid415299@id-415299.uxbridge.irccloud.com)
[13:04:12] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[13:04:50] *** Quits: bw__ (sid2730@2a03:5180:f:3::aaa) ()
[13:05:09] *** Joins: bw__ (sid2730@id-2730.ilkley.irccloud.com)
[13:06:44] *** Parts: bw__ (sid2730@id-2730.ilkley.irccloud.com) ()
[13:07:53] *** Joins: bw (sid2730@user/betawaffle)
[13:10:15] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[13:14:42] *** Joins: AquaL1te (~AquaL1te@user/aqual1te)
[13:15:31] *** Quits: bbear_ (~znc@21212.s.t4vps.eu) (Ping timeout: 245 seconds)
[13:16:21] *** Quits: dza (~dza@user/dza) (Ping timeout: 245 seconds)
[13:16:22] *** Joins: bbear (~znc@21212.s.t4vps.eu)
[13:17:45] *** Parts: jla (~jordi@tao.ddns.jazztel.es) ()
[13:20:42] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[13:20:55] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[13:22:16] *** Quits: normen (~normen@p200300d717349100c9f2b9197737a949.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:23:18] *** Joins: martinkennelly_ (~martinken@212.129.72.224)
[13:23:34] *** Joins: normen (~normen@p200300d7173d3d00d86f6409cd987006.dip0.t-ipconnect.de)
[13:23:50] *** Quits: PortableDave (~portabled@194-223-17-29.tpgi.com.au) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[13:25:36] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Quit: bye)
[13:25:58] *** Quits: martinkennelly (~martinken@84.203.20.92) (Ping timeout: 252 seconds)
[13:26:27] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 268 seconds)
[13:26:53] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[13:28:10] *** Quits: c10l (~c10l@user/c10l) (Ping timeout: 252 seconds)
[13:28:17] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[13:28:42] *** Joins: c10l (~c10l@user/c10l)
[13:29:16] *** Quits: freswa (~freswa@2001:470:69fc:105::c1ec) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: happy-dude (~happy-dud@2001:470:69fc:105::b4d7) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: kadoban (~kadoban@user/kadoban) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: spudly[m] (~spudly@2001:470:69fc:105::18) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: psydroid (~psydroid@user/psydroid) (Quit: Bridge terminating on SIGTERM)
[13:29:16] *** Quits: bloony (~tjellomat@2001:470:69fc:105::3aac) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: meain (~meain@2001:470:69fc:105::2db) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: securethemews (~securethe@2001:470:69fc:105::9b6d) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Bridge terminating on SIGTERM)
[13:29:17] *** Quits: mambang[m] (~mambang@user/mambang) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: tusf[m] (~tusf@2001:470:69fc:105::eff9) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: bat[m] (~batdice-t@2001:470:69fc:105::19b8) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: dngray[m] (~dngray@user/dngray) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: miquella[m] (~miquellam@2001:470:69fc:105::1:980) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: dec (~dec@2001:470:69fc:105::3204) (Quit: Bridge terminating on SIGTERM)
[13:29:18] *** Quits: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987) (Quit: Bridge terminating on SIGTERM)
[13:29:21] *** Quits: fugkco (~fugkcomat@2001:470:69fc:105::c70d) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: dung[m] (~dungbrocc@2001:470:69fc:105::d25b) (Quit: Bridge terminating on SIGTERM)
[13:29:22] *** Quits: TcM1911 (~tcm1911@2001:470:69fc:105::3649) (Quit: Bridge terminating on SIGTERM)
[13:29:28] *** Quits: johncs (~johncs@2604:a880:2:d0::216b:f001) (Client Quit)
[13:30:06] *** Quits: espero_ (~espero@ucitelonline.pedf.cuni.cz) (Quit: Leaving)
[13:30:21] *** Joins: _xor (~xor@72.49.199.147)
[13:31:10] *** Joins: espero (~espero@ucitelonline.pedf.cuni.cz)
[13:31:28] *** Joins: johncs (~johncs@2604:a880:2:d0::216b:f001)
[13:31:42] *** Quits: endigma (~endigma@134.41.124.82) (Quit: Ping timeout (120 seconds))
[13:31:59] *** Joins: endigma (~endigma@134.41.124.82)
[13:32:18] *** Joins: spudly[m] (~spudly@2001:470:69fc:105::18)
[13:33:02] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 246 seconds)
[13:34:37] *** Parts: espero (~espero@ucitelonline.pedf.cuni.cz) ()
[13:35:27] *** Joins: kadoban (~kadoban@user/kadoban)
[13:35:27] *** Joins: freswa (~freswa@2001:470:69fc:105::c1ec)
[13:35:27] *** Joins: mambang[m] (~mambang@user/mambang)
[13:35:27] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[13:35:27] *** Joins: sordidwhiskey[m] (~sordidwhi@2001:470:69fc:105::c94e)
[13:35:27] *** Joins: happy-dude (~happy-dud@2001:470:69fc:105::b4d7)
[13:35:27] *** Joins: psydroid (~psydroid@user/psydroid)
[13:35:27] *** Joins: bloony (~tjellomat@2001:470:69fc:105::3aac)
[13:35:27] *** Joins: securethemews (~securethe@2001:470:69fc:105::9b6d)
[13:35:27] *** Joins: dngray[m] (~dngray@user/dngray)
[13:35:27] *** Joins: alwaysr[m] (~alwaysrma@2001:470:69fc:105::50a8)
[13:35:27] *** Joins: meain (~meain@2001:470:69fc:105::2db)
[13:35:39] *** Joins: Celeste[m] (~sleprainb@2001:470:69fc:105::3f4a)
[13:35:39] *** Joins: AshLeece[m] (~ashleecei@2001:470:69fc:105::c987)
[13:35:39] *** Joins: fugkco (~fugkcomat@2001:470:69fc:105::c70d)
[13:35:39] *** Joins: miquella[m] (~miquellam@2001:470:69fc:105::1:980)
[13:35:39] *** Joins: dung[m] (~dungbrocc@2001:470:69fc:105::d25b)
[13:35:40] *** Joins: TcM1911 (~tcm1911@2001:470:69fc:105::3649)
[13:35:41] *** Joins: dec (~dec@2001:470:69fc:105::3204)
[13:35:41] *** Joins: bat[m] (~batdice-t@2001:470:69fc:105::19b8)
[13:35:41] *** Joins: tusf[m] (~tusf@2001:470:69fc:105::eff9)
[13:41:15] *** Joins: Diego (~textual@user/diego)
[13:43:05] *** Quits: phylaz (~phylaz@219.92-221-176.customer.lyse.net) (Ping timeout: 265 seconds)
[13:44:33] *** Quits: bluebird (~bluebird@user/bluebird) (Ping timeout: 250 seconds)
[13:45:13] *** Quits: darkapex_ (~darkapex@user/darkapex) (Ping timeout: 252 seconds)
[13:46:02] *** Joins: holgersson (~quassel@user/holgersson)
[13:46:30] *** Joins: bluebird (~bluebird@user/bluebird)
[13:46:43] *** Quits: betelgeuse (~betelgeus@94-225-47-8.access.telenet.be) (Ping timeout: 250 seconds)
[13:46:48] *** Joins: darkapex (~darkapex@user/darkapex)
[13:47:18] *** Joins: phylaz (~phylaz@219.92-221-176.customer.lyse.net)
[13:48:35] *** Joins: llorllale (~llorllale@2607:9880:3a18:69:9d6e:e820:71f6:16ee)
[13:49:34] *** Joins: silbermm (~silbermm@user/ahappydeath)
[13:49:47] *** Quits: mikeputnam (~mikeputna@wilug/mikeputnam) (Ping timeout: 240 seconds)
[13:51:07] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[13:51:24] *** Joins: mikeputnam (~mikeputna@wilug/mikeputnam)
[13:52:09] *** Joins: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4)
[13:52:31] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 252 seconds)
[13:53:32] *** Quits: sshow (~sshow@neo.hackeriet.no) (Remote host closed the connection)
[13:54:19] *** Joins: fikran (~fikran@user/fikran)
[13:54:40] *** Quits: holgersson (~quassel@user/holgersson) (Ping timeout: 260 seconds)
[13:56:17] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[13:56:30] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[13:58:24] *** Joins: silbermm (~silbermm@user/ahappydeath)
[13:58:35] *** Joins: sshow (~sshow@neo.hackeriet.no)
[13:58:44] *** Joins: holgersson (~quassel@user/holgersson)
[13:59:00] *** Joins: kiril (~kiril@85.91.153.163)
[14:02:50] *** aram_ is now known as aram
[14:03:45] *** Quits: endigma (~endigma@134.41.124.82) (Quit: Ping timeout (120 seconds))
[14:04:24] *** Joins: LTCD (~LTCD@2a02:c7f:dd1c:b600:6d28:5de2:de22:b753)
[14:04:37] *** Joins: endigma (~endigma@134.41.124.82)
[14:07:53] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[14:08:07] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Quit: Reconnecting)
[14:08:27] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[14:09:18] *** Quits: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4) (Client Quit)
[14:09:40] *** Joins: hsiktas[m] (~hsiktasma@2001:470:69fc:105::30d4)
[14:09:41] *** Joins: eyJhbV2 (~eyJhb@user/eyjhb)
[14:09:58] *** Quits: eyJhb (~eyJhb@user/eyjhb) (Ping timeout: 252 seconds)
[14:10:28] *** eyJhbV2 is now known as eyJhb
[14:11:11] <LTCD> Hey. What does it mean when a function has brackets after func? I know the other two are arguments and return values.   func (s *server) SayHelloAgain(ctx context.Context, in *pb.HelloRequest) (*pb.HelloReply, error) {
[14:11:39] <eyJhb> LTCD: They are attached to a struct
[14:12:02] <eyJhb> LTCD: https://www.golang-book.com/books/intro/9
[14:16:35] <deepy> Do people write FooUrl or FooURL in go? I can't seem to find a definitive answer from any style guide
[14:17:04] <LTCD> theFooURL
[14:18:08] <sztanpet> deepy https://github.com/golang/go/wiki/CodeReviewComments has a definitive answer
[14:18:30] <sztanpet> see Initialisms
[14:18:39] *** Quits: sshow (~sshow@neo.hackeriet.no) (Quit: rebootz)
[14:19:08] <deepy> Great, thanks!
[14:19:37] <deepy> our java background here really pushes for Url so it's great to have a reference :-)
[14:20:43] <sztanpet> LTCD also https://tour.golang.org/methods/1
[14:22:25] <LTCD> sztanpet That was really helpful, cheers!
[14:23:42] <sztanpet> yea, the tour is great
[14:25:03] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[14:26:30] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[14:27:34] *** Quits: imm_ (~imm_@user/imm/x-3405860) (Ping timeout: 252 seconds)
[14:27:37] *** Joins: adip (~adip@apn-37-248-217-85.dynamic.gprs.plus.pl)
[14:28:02] *** frobnitz_ is now known as frobnitz
[14:29:26] *** Joins: imm_ (~imm_@user/imm/x-3405860)
[14:33:10] *** Joins: jjonah (~jjonah@p200300d5d7058900dea632fffeb3342f.dip0.t-ipconnect.de)
[14:34:44] *** Quits: adip (~adip@apn-37-248-217-85.dynamic.gprs.plus.pl) (Read error: Connection reset by peer)
[14:36:14] *** Quits: asm_ (~alexander@burner.asm89.io) (Quit: WeeChat 1.7.1)
[14:36:32] *** Joins: asm (~alexander@burner.asm89.io)
[14:36:34] *** Joins: silbermm (~silbermm@user/ahappydeath)
[14:36:46] *** Quits: asm (~alexander@burner.asm89.io) (Changing host)
[14:36:46] *** Joins: asm (~alexander@user/asm)
[14:36:55] *** Quits: LTCD (~LTCD@2a02:c7f:dd1c:b600:6d28:5de2:de22:b753) (Quit: Client closed)
[14:38:55] *** Joins: zer0bitz (~zer0bitz@dsl-hkibng31-54fafc-123.dhcp.inet.fi)
[14:39:04] *** Joins: sshow (~sshow@neo.hackeriet.no)
[14:44:28] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 265 seconds)
[14:45:31] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 245 seconds)
[14:45:46] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[14:49:01] *** Quits: krux02 (~krux02@p5493265d.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[14:49:56] *** Quits: chpar (~chpar@node-1w7jra2bl9lr0nstpq07d1mxw.ipv6.telus.net) (Ping timeout: 265 seconds)
[14:50:37] *** Joins: seabass (~seabass@user/seabass)
[14:54:41] *** Quits: tuskkk____ (uid18470@id-18470.tinside.irccloud.com) (Quit: Connection closed for inactivity)
[14:54:51] *** Parts: Guest6492 (~puck@undernet.hu) ()
[14:57:55] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:00:29] *** Joins: kiril (~kiril@85.91.153.163)
[15:00:59] *** Joins: krux02 (~krux02@p200300e81728d600319fb3a709c9a336.dip0.t-ipconnect.de)
[15:01:52] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 265 seconds)
[15:02:07] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:05:30] <seabass> Hello!
[15:05:34] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[15:05:42] <seabass> I've just noticed that arguments are mutable within the function that they're passed to.
[15:05:51] *** Joins: kiril (~kiril@85.91.153.163)
[15:06:19] <seabass> Is there anything to watch out for when using this? Does it reduce memory utilisation over simply creating a new variable within the function?
[15:07:01] <sztanpet> all arguments are copied
[15:07:48] <sztanpet> they are new variables, all of them, maybe its a pointer and thus references the same memory as what called said function but its still a copy
[15:07:59] <seabass> so I'm just wasting memory by copying them again within the function?
[15:09:17] <sztanpet> i have no idea what you are trying to do, or why mutability of variables is a bad thing
[15:09:20] <fizzie> Whether you're wasting memory or not probably depends on how clever the compiler feels like. If the only use of a parameter is to store it in a local variable, I don't think it's *required* to waste that memory. But it might.
[15:09:39] <seabass> sztanpet: hehe I've been doing too much Clojure ;)
[15:09:52] <seabass> fizzie: ah, interesting. Let me share an example
[15:09:57] * seabass opens play.golang.org
[15:11:54] <fizzie> seabass: Well, while you're doing that, here's also a (trivial) example, where the absence or presence of "extra" local variables makes no difference whatsoever in the generated code: https://gcc.godbolt.org/z/sezYzs5en
[15:12:08] <fizzie> (You probably wouldn't write either of those functions, that's just for the sake of example.)
[15:12:58] *** Joins: martinkennelly (~martinken@84.203.20.92)
[15:14:55] *** Quits: martinkennelly_ (~martinken@212.129.72.224) (Ping timeout: 265 seconds)
[15:15:18] *** Quits: menace (~someone@user/menace) (Quit: menace)
[15:15:27] *** Joins: silbermm (~silbermm@user/ahappydeath)
[15:15:57] <seabass> fizzie, sztanpet: https://play.golang.org/p/XcihPGntIRt as an example of mutating the parameter
[15:16:13] *** Quits: arinov (~arinov@213.194.126.155) (Ping timeout: 268 seconds)
[15:16:24] *** Joins: tebruno998 (~tebruno99@user/tebruno99)
[15:16:29] <seabass> fizzie: whooo, an interactive compiler-assembler-thingy? nice :)
[15:17:43] *** Quits: tebruno99 (~tebruno99@user/tebruno99) (Ping timeout: 250 seconds)
[15:17:43] *** tebruno998 is now known as tebruno99
[15:19:29] *** Joins: ahappydeath (~ahappydea@user/ahappydeath)
[15:21:08] *** Joins: sizeof_void34 (~Thunderbi@109.252.124.86)
[15:22:01] *** Quits: xzr (xzar@shell.troopers.fi) (Ping timeout: 252 seconds)
[15:22:07] *** Joins: xzr (xzar@shell.troopers.fi)
[15:22:32] *** xzr is now known as Guest3389
[15:23:33] <sztanpet> yea, i just think your expectations were wrong
[15:24:18] <seabass> yup, probably :) Thanks for your help; I do need to go AFK now though.
[15:25:17] <sztanpet> maybe it will be worth looking at the reference types where you might also encounter unexpected behaviour, like with slices/maps
[15:31:37] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[15:33:04] *** Quits: bkircher (~bkircher@2001:a61:25b1:b301:38c4:d8e7:23b0:bde5) (Ping timeout: 252 seconds)
[15:34:42] *** Joins: xiongxin (~quassel@113.116.224.79)
[15:34:43] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 252 seconds)
[15:37:50] *** Quits: tnez_ (~el@179.50.90.141) (Changing host)
[15:37:50] *** Joins: tnez_ (~el@user/tnez)
[15:39:39] *** Quits: zanshin (~zanshin@user/zanshin) (Quit: WeeChat 3.0)
[15:40:43] *** Quits: k0ta (~k0ta@151.210.174.146) (Ping timeout: 252 seconds)
[15:43:35] *** Joins: zanshin (~zanshin@user/zanshin)
[15:44:45] *** Joins: INeedAHandle (~INeedAHan@39.124.72.106)
[15:46:12] *** Joins: bkircher (~bkircher@2001:a61:25b1:b301:4c05:743e:8f19:2b8c)
[15:46:57] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Ping timeout: 276 seconds)
[15:47:24] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[15:47:51] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[15:48:39] *** marler8997_ is now known as marler8997
[15:49:16] *** Quits: dante4431 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340) (Ping timeout: 245 seconds)
[15:50:36] *** Joins: kiril (~kiril@85.91.153.163)
[15:51:24] *** Joins: dante4431 (~dante443@2600:1702:7a0:9a40:6e62:6dff:fe5d:c340)
[15:51:31] *** Joins: marlinc_ (~marlinc@user/marlinc)
[15:51:52] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[15:52:11] *** Quits: marlinc (~marlinc@user/marlinc) (Ping timeout: 245 seconds)
[15:54:07] *** Quits: dtman34_ (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net) (Ping timeout: 250 seconds)
[15:55:40] *** Joins: dtman34 (~dtman34@c-73-62-246-247.hsd1.mn.comcast.net)
[15:56:40] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Ping timeout: 252 seconds)
[15:57:00] *** Joins: marler8997_ (~marler899@204.229.3.4)
[15:57:01] *** Quits: marler8997 (~marler899@204.229.3.4) (Read error: Connection reset by peer)
[15:57:14] *** marler8997_ is now known as marler8997
[15:59:04] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[15:59:30] *** Quits: nikos[work] (~ntsipinak@tsipinakis.cern.ch) (Remote host closed the connection)
[16:01:50] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 260 seconds)
[16:02:14] *** Quits: frost (~frost@59.71.244.189) (Quit: Connection closed)
[16:03:39] *** Joins: fikran (~fikran@user/fikran)
[16:04:41] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[16:09:25] *** Joins: Torr (~Torr@user/torr)
[16:12:06] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:12:07] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 268 seconds)
[16:13:53] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 265 seconds)
[16:14:29] *** Quits: xlei (akans@pool-68-129-84-118.nycmny.fios.verizon.net) (Ping timeout: 245 seconds)
[16:15:01] *** Quits: awmv (~awmv@2a02:21b0:644f:c181:6c4f:4ea7:720c:ec4) (Ping timeout: 256 seconds)
[16:15:47] *** Joins: martinkennelly_ (~martinken@212.129.78.248)
[16:15:57] *** Joins: kiril (~kiril@85.91.153.163)
[16:16:28] *** Quits: martinkennelly (~martinken@84.203.20.92) (Ping timeout: 252 seconds)
[16:18:36] *** Joins: awmv (~awmv@178.197.209.205)
[16:21:34] *** Joins: Torr (~Torr@user/torr)
[16:23:30] *** Joins: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de)
[16:25:49] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 252 seconds)
[16:26:42] *** Joins: belak51 (~belak@user/belak)
[16:26:58] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[16:27:29] *** Quits: belak (~belak@user/belak) (Ping timeout: 250 seconds)
[16:30:28] *** Joins: jesk_ (~jesk@stakka.errxtx.net)
[16:31:51] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:33:17] *** Joins: LtHummus_ (~lthummus@97.126.106.255)
[16:33:51] *** Quits: LtHummus (~lthummus@97.126.106.255) (Ping timeout: 245 seconds)
[16:34:03] *** Quits: jesk_ (~jesk@stakka.errxtx.net) (Quit: Reconnecting)
[16:34:09] *** Joins: jesk (~jesk@stakka.errxtx.net)
[16:35:14] <jesk> can anyone suggest a library for IP/CIDR functions/operations?
[16:35:28] <jesk> I need to aggregate as good as possible a list of CIDR networks
[16:35:53] *** Quits: Teckla (~Teckla@user/teckla) (Quit: leaving)
[16:35:57] <jesk> I tried 	"github.com/mikioh/ipaddr"
[16:36:36] *** Joins: Torr (~Torr@user/torr)
[16:36:42] <jesk> but running into problems (segmentation violation)
[16:38:07] *** Joins: Teckla (~Teckla@user/teckla)
[16:38:51] *** Quits: qwedfg (~qwedfg@user/qwedfg) (Ping timeout: 245 seconds)
[16:39:00] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[16:40:12] *** Joins: qwedfg (~qwedfg@user/qwedfg)
[16:40:27] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[16:40:43] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 252 seconds)
[16:40:55] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Read error: Connection reset by peer)
[16:41:36] <Sam> I think most people use https://pkg.go.dev/inet.af/netaddr
[16:43:10] <Sam> (this may eventually be pulled into the standard library too, so if you're already using it the migration will be easier later: https://golang.org/issue/46518)
[16:43:34] *** Quits: llorllale (~llorllale@2607:9880:3a18:69:9d6e:e820:71f6:16ee) (Ping timeout: 268 seconds)
[16:43:37] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:45:53] *** Joins: kiril (~kiril@85.91.153.163)
[16:46:49] *** Quits: sono (~sono@dslb-178-010-208-031.178.010.pools.vodafone-ip.de) (Read error: Connection reset by peer)
[16:50:08] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[16:51:44] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[16:52:12] *** Quits: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com) (Quit: Leaving)
[16:54:18] *** Joins: saml (~saml@cpe-74-73-80-162.nyc.res.rr.com)
[16:55:56] *** Quits: kodah (~kodah@user/kodah) (Ping timeout: 245 seconds)
[16:56:52] *** Joins: kodah (~kodah@user/kodah)
[16:57:14] <pinky_> viper.ConfigFileNotFoundError is apparently not a thing depending on your Go version, this seems absolutely insane
[16:57:52] <pinky_> https://github.com/spf13/viper/blob/master/viper_go1_15.go#L26
[16:58:04] *** Joins: xlei (akans@pool-68-129-84-118.nycmny.fios.verizon.net)
[16:59:24] <pinky_> how does this even work on 1.17? https://github.com/spf13/viper/blob/master/viper.go#L2102
[16:59:45] <pinky_> clicking that method says its present in just the two versioned files for 1.15 and 1.16
[17:01:22] <Sam> That means "1.16+", not just 1.16
[17:01:33] <pinky_> ahh ok
[17:01:47] <pinky_> actually i'm using 1.7.1 so now i'm looking at the source for that
[17:04:15] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:05:07] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[17:06:46] *** Quits: ztx (~ztx@user/ztx) (Ping timeout: 245 seconds)
[17:07:04] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[17:07:41] *** Quits: awmv (~awmv@178.197.209.205) (Quit: Client closed)
[17:08:21] *** Joins: alip (~alip@exherbo/developer/alip)
[17:08:41] *** Joins: arinov (~arinov@176.219.204.250)
[17:08:44] *** Joins: ztx (~ztx@user/ztx)
[17:12:05] *** Quits: arinov (~arinov@176.219.204.250) (Remote host closed the connection)
[17:12:30] *** Joins: PichuChen (~PichuChen@36-230-224-176.dynamic-ip.hinet.net)
[17:13:06] <pinky_> how do you import a specific version again?
[17:14:14] <sztanpet> https://golang.org/ref/mod
[17:14:23] <sztanpet> # Upgrade or downgrade to a specific version of a module.
[17:14:24] <sztanpet> $ go get -d golang.org/x/text@v0.3.2
[17:14:49] <pinky_> ah thanks, but you can't have different versions present in go.mod at the same time?
[17:15:14] <sztanpet> sure you can, they just have to be different major versions
[17:15:31] <pinky_> ah :( so 1.9.0 and 1.7.1 are the same major version?
[17:15:34] <pinky_> :tableflip:
[17:16:01] <sztanpet> different major version -> differing import paths -> diamond dependency problem "solved"
[17:16:16] <pinky_> lol
[17:16:20] <pinky_> ok thanks
[17:16:54] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[17:16:55] *** Quits: PichuChen (~PichuChen@36-230-224-176.dynamic-ip.hinet.net) (Remote host closed the connection)
[17:22:58] *** Quits: _xor (~xor@72.49.199.147) (Read error: Connection reset by peer)
[17:24:59] *** tnez_ is now known as tnez
[17:25:01] *** Quits: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5) (Quit: Leaving)
[17:25:33] *** Joins: _xor (~xor@72.49.199.147)
[17:27:55] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[17:29:29] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 264 seconds)
[17:31:42] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[17:32:41] *** Joins: wroathe (~wroathe@user/wroathe)
[17:35:55] *** Joins: redquasar_ (~redquasar@redquasar.xyz)
[17:36:21] *** Quits: redquasar (~redquasar@redquasar.xyz) (Ping timeout: 245 seconds)
[17:36:52] *** redquasar_ is now known as redquasar
[17:38:20] *** Joins: kiril (~kiril@85.91.153.163)
[17:40:06] *** Quits: deniska (~denis@user/deniska) (Ping timeout: 245 seconds)
[17:41:48] *** Joins: deniska (~denis@user/deniska)
[17:44:53] *** ox is now known as oz
[17:45:13] <sztanpet> the fact taht you want to differentiate between minor versions implies the devs developing your module are not adhering to semver pinky_ which should be a big red flag for using said module
[17:47:47] *** Joins: alzgh (~alzgh@user/alzgh)
[17:51:50] <pinky_> yeah, i like Cobra but Viper seems icky ..
[17:52:32] *** Joins: wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[17:53:05] *** Quits: on^ (~on@wsip-70-165-23-55.mc.at.cox.net) (Remote host closed the connection)
[17:55:06] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 245 seconds)
[17:58:16] *** Joins: khyr0n (~khyr0n@2806:2f0:9140:56ec:93f7:805d:a273:a1c5)
[17:59:07] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[17:59:48] *** Joins: LiftLeft (~LiftLeft@102.165.16.134)
[18:00:58] *** Quits: Yukkuri (~user@mayoinochikurin.eientei.org) (Ping timeout: 252 seconds)
[18:01:06] *** Joins: Yukkuri (~user@mayoinochikurin.eientei.org)
[18:02:26] <jesk> Sam, thanks, will have a look at it.
[18:04:46] *** Joins: kiril (~kiril@85.91.153.163)
[18:08:26] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 265 seconds)
[18:11:20] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 265 seconds)
[18:13:00] *** Joins: fikran (~fikran@user/fikran)
[18:16:25] *** Quits: wroathe_ (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Ping timeout: 252 seconds)
[18:17:02] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[18:24:19] *** Joins: achillion (~ach@user/achilleas)
[18:24:41] *** Quits: achilleas (ach@user/achilleas) (Ping timeout: 245 seconds)
[18:25:18] *** achillion is now known as achilleas
[18:26:39] *** Joins: Jackal-o-lantern (~quassel@173.195.145.98)
[18:26:42] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[18:27:37] *** Joins: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net)
[18:27:37] *** Quits: wroathe (~wroathe@c-68-54-25-135.hsd1.mn.comcast.net) (Changing host)
[18:27:37] *** Joins: wroathe (~wroathe@user/wroathe)
[18:28:35] <Jackal-o-lantern> Hello, I'm trying to install singularity. I'm not too familiar with Go package management. I've run the install command for a dependency. There appear to be some (warnings? errors?) in the output? I can't immediately tell if this command was successful installing the dependency or not: https://bpa.st/42RA
[18:32:19] *** Quits: wroathe (~wroathe@user/wroathe) (Ping timeout: 252 seconds)
[18:32:43] *** Quits: alzgh (~alzgh@user/alzgh) (Ping timeout: 256 seconds)
[18:33:45] *** Joins: mei6 (~mei@user/mei)
[18:34:32] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 265 seconds)
[18:35:02] *** Joins: arcatech (~arcatech@user/arcatech)
[18:38:22] *** Joins: alzgh (~alzgh@user/alzgh)
[18:41:29] <seebs> those are errors and something probably didn't build, but also i vaguely thought that dep was deprecated at this point because of go modules?
[18:41:51] <siXy> It is.
[18:42:01] *** Quits: Torr (~Torr@user/torr) ()
[18:42:08] *** Joins: The_Loko (~The_Loko@86.127.244.35)
[18:42:08] <siXy> Jackal-o-lantern: I have no idea what singularity is, but those instructions sound very out of date.
[18:42:12] *** Joins: Torr (~Torr@user/torr)
[18:42:13] *** Quits: xiongxin (~quassel@113.116.224.79) (Ping timeout: 252 seconds)
[18:42:20] <siXy> Or perhaps it's abandoned, whatever it is?
[18:43:04] *** Joins: xiongxin (~quassel@113.116.224.79)
[18:43:12] <Jackal-o-lantern> They had a release sept 1st..
[18:44:20] <Jackal-o-lantern> IT would be useful to have a clear line which says something like "ERROR" or "FATAL" just to there isn't doubt.
[18:45:17] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[18:45:48] *** Quits: Tv__ (uid62079@2a03:5180:f:1::f27f) ()
[18:46:03] *** Joins: Tv__ (uid62079@id-62079.helmsley.irccloud.com)
[18:46:08] *** Quits: ddevault (e7b4bb6755@sourcehut/staff/ddevault) (Remote host closed the connection)
[18:46:16] *** Joins: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006)
[18:46:45] *** Quits: Tv__ (uid62079@id-62079.helmsley.irccloud.com) (Client Quit)
[18:47:02] *** Joins: Tv_ (uid62079@user/tv/x-3144562)
[18:48:07] <jla> nice to be here ...sharing cyber-space-time ?
[18:50:32] *** Quits: todd (~todd@gateway/tor-sasl/toddf) (Remote host closed the connection)
[18:51:19] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[18:51:53] <siXy> Jackal-o-lantern: You'd likely be better asking their support channel, whatever it is - we unfortunately don't know everything about every single project that happens to be written in Go.
[18:52:03] *** Joins: sudoforge (~sudoforge@wireguard/tunneler/sudoforge)
[18:52:39] <seebs> singularity had a channel on gopher slack at one point, anyway?
[18:53:10] <seebs> i don't think they're abandoned or anything, but it's possible the instructions are outdated, I think most projects have moved to modules, because modules showed up in around 1.11.
[18:53:58] <seebs> note that `golang/dep` is not an Official Go Thing, it's a third-party project that was basically *replaced* by modules.
[18:54:11] * jla comes from the Ruby lands ...
[18:55:38] *** Joins: todd (~todd@gateway/tor-sasl/toddf)
[18:55:56] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 245 seconds)
[18:57:31] *** Joins: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl)
[18:58:29] <novns> the Ruby lands where memory is never enough
[18:59:00] <novns> a small Ruby program eats 64GB at leat
[18:59:04] <novns> *least
[18:59:42] *** Quits: xiongxin (~quassel@113.116.224.79) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[19:00:06] *** Quits: keiser0091075852 (~keiser@83.25.88.6.ipv4.supernova.orange.pl) (Ping timeout: 245 seconds)
[19:05:39] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[19:07:49] *** Quits: Jigsy (~Jigsy@user/jigsy) (Ping timeout: 245 seconds)
[19:08:27] *** Joins: kiril (~kiril@85.91.153.163)
[19:10:31] *** Quits: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006) (Ping timeout: 245 seconds)
[19:10:38] *** Joins: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006)
[19:12:28] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[19:13:10] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 260 seconds)
[19:14:41] *** Quits: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006) (Ping timeout: 245 seconds)
[19:15:11] *** Quits: saschagrunert (~saschagru@46.128.124.46) (Remote host closed the connection)
[19:15:45] *** Joins: khrbt (~znc@user/khrbt)
[19:16:29] *** Joins: Jigsy (~Jigsy@user/jigsy)
[19:17:07] *** clarjon_1 is now known as clarjon1
[19:18:28] *** Quits: clarjon1 (~clarjon1@user/clarjon1) (Quit: clarjon1)
[19:18:53] *** Joins: achillion (ach@user/achilleas)
[19:19:04] *** Quits: silbermm (~silbermm@user/ahappydeath) (Ping timeout: 252 seconds)
[19:19:37] *** Quits: achilleas (~ach@user/achilleas) (Ping timeout: 252 seconds)
[19:19:55] *** achillion is now known as achilleas
[19:20:10] *** Joins: silbermm (~silbermm@user/ahappydeath)
[19:27:19] *** Quits: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net) (Ping timeout: 250 seconds)
[19:28:07] *** Joins: anticw (~anticw@157-131-246-230.fiber.dynamic.sonic.net)
[19:28:38] *** Quits: Diego (~textual@user/diego) (Quit: My MacBook Air has gone to sleep. ZZZzzz…)
[19:33:03] *** Quits: AquaL1te (~AquaL1te@user/aqual1te) (Quit: leaving)
[19:34:12] *** jay_wild_ is now known as jay_wild
[19:34:42] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[19:47:15] *** Joins: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl)
[19:47:46] <jla> yes indeed ... they 're making progress ... on this, when ruby 3.0.1 ( and the so called 3x3 Matz 's initiative )
[19:48:13] <jla> that's one of the reasons why i'm here ...
[19:51:30] *** Quits: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl) (Client Quit)
[19:51:34] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[19:52:04] *** Quits: adip (~adip@aedv46.neoplus.adsl.tpnet.pl) (Ping timeout: 252 seconds)
[19:52:22] *** Joins: ddevault (~ddevault@lfbn-idf2-1-1282-182.w92-169.abo.wanadoo.fr)
[19:52:41] *** Quits: ddevault (~ddevault@lfbn-idf2-1-1282-182.w92-169.abo.wanadoo.fr) (Remote host closed the connection)
[19:52:47] *** Joins: keiser0091075852 (~keiser@83.25.208.187.ipv4.supernova.orange.pl)
[19:53:02] *** Joins: adip (~adip@aedv46.neoplus.adsl.tpnet.pl)
[19:55:28] *** Joins: awmv (~awmv@213.55.225.117)
[19:55:55] *** Quits: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 252 seconds)
[19:57:27] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[19:58:26] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 245 seconds)
[20:00:21] *** Quits: awmv (~awmv@213.55.225.117) (Client Quit)
[20:02:01] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[20:05:41] *** Joins: NCS_One (~NCS_One@bl11-90-133.dsl.telepac.pt)
[20:05:48] *** belak51 is now known as belak
[20:06:27] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[20:11:19] *** Quits: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 252 seconds)
[20:13:07] *** Joins: freakazoid333 (~matt@2603:9000:cf0f:80e3:c01a:9ec0:b55f:9f89)
[20:14:23] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[20:16:35] *** purpleid1a is now known as purpleidea
[20:16:38] *** Joins: cmagina (sid286142@user/cmagina)
[20:16:56] *** Joins: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006)
[20:17:47] <krux02> what is the recommended way to write an int to a string builder?
[20:18:06] <krux02> I thought there would be a WriteInt for it, but there isn't
[20:18:21] <ikke> Sprintf I suppose
[20:18:50] *** Quits: freakazoid333 (~matt@2603:9000:cf0f:80e3:c01a:9ec0:b55f:9f89) (Quit: Leaving)
[20:19:01] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[20:19:06] <krux02> ikke, but that does an allocation
[20:19:16] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 245 seconds)
[20:19:22] <krux02> at least that is what I assume
[20:19:48] <krux02> I would like to have an option that doesn't create temporary strings that need to be gc ed away
[20:20:06] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[20:22:11] *** Quits: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006) (Ping timeout: 245 seconds)
[20:22:21] *** Joins: fikran (~fikran@user/fikran)
[20:24:41] <krux02> ikke, so I have to write my own loop then?
[20:24:53] *** Quits: sizeof_void34 (~Thunderbi@109.252.124.86) (Quit: sizeof_void34)
[20:30:21] <siXy> krux02: https://pkg.go.dev/strings#Builder
[20:30:31] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:788e:dd09:b823:d1c0)
[20:30:41] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 264 seconds)
[20:31:11] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[20:31:30] <siXy> oh sorry misread question - no you'd need to use strconv to do the int conversion.
[20:32:57] *** Quits: LiftLeft (~LiftLeft@102.165.16.134) (Ping timeout: 265 seconds)
[20:35:11] *** Joins: girafe (~girafe@176-147-142-235.abo.bbox.fr)
[20:38:01] <tristero> krux02: fmt.Fprint ?
[20:38:39] <tristero> (since a strings.Builder is an io.Writer)
[20:42:48] *** Joins: rbn (~rbn@user/rbn)
[20:46:18] *** Joins: LiftLeft (~LiftLeft@102.165.16.73)
[20:48:23] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 268 seconds)
[20:54:53] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[21:00:31] *** r0bby is now known as r0bby[m]
[21:01:10] *** r0bby[m] is now known as r0bby
[21:08:01] *** Joins: ddevault (e7b4bb6755@2604:bf00:710:0:5054:ff:feea:5006)
[21:08:02] *** Quits: martinkennelly_ (~martinken@212.129.78.248) (Read error: Connection reset by peer)
[21:08:11] *** Joins: martinkennelly_ (~martinken@84.203.20.92)
[21:12:20] *** Quits: Natch (~natch@c-e070e255.014-297-73746f25.bbcust.telenor.se) (Remote host closed the connection)
[21:17:56] *** Joins: arinov (~arinov@31.142.50.8)
[21:24:35] *** Joins: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se)
[21:26:49] <krux02> tristero, oh I did not know that, thanks a lot it works as I expected (after I implemented my own WriteString proc)
[21:26:58] <krux02> (sorry I mean WriteInt)
[21:28:12] <siXy> krux02: erm, if you're worried about the microscopic allocation of a temporary string, fmt shouldn't even be an option
[21:28:17] *** Joins: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net)
[21:28:24] <siXy> given that, I suspect you're solving problems you don't have.
[21:30:56] <siXy> Why do you think you need to care about this at all? builder.WriteString(strconv.FormatInt(...)) should be fine.
[21:31:16] <siXy> If you think that's not good enough, you need to explain why, and you definitely cannot use fmt.*
[21:31:33] <krux02> siXy, what is the problem with fmt.*?
[21:32:41] <siXy> before I go into that, explain what's wrong with the strconv and why you are so concerned about temporary string allocations.
[21:32:43] *** Quits: lishanhui (~lishanhui@104-184-3-133.lightspeed.austtx.sbcglobal.net) (Ping timeout: 252 seconds)
[21:32:58] <krux02> siXy, microallocations are my problem
[21:33:09] <siXy> Why do you think that?
[21:33:25] <siXy> And why would you assume that fmt.Fprint (or any of the fmt.* functions) are allocation free?
[21:33:43] <krux02> well, go has escape analysis, it might be that the allocation is made on the stack, but I doubt it.
[21:34:17] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Ping timeout: 264 seconds)
[21:34:46] <krux02> siXy, I don't know if they are allocation free, I assume that they are allocation free, because they are structured to allow an allocation free implementation.
[21:35:25] <siXy> this all sounds like absolutely WILD amounts of premature optimisation
[21:35:50] <krux02> nope
[21:35:52] <siXy> stop worrying so much about small memory allocations. It'll make you a better programmer.
[21:35:54] *** Quits: alzgh (~alzgh@user/alzgh) (Remote host closed the connection)
[21:36:04] *** Joins: alzgh (~alzgh@user/alzgh)
[21:36:05] <krux02> it's just experience being applied
[21:36:29] <krux02> actually caring about small memory allocations and trying to avoid them made me a better programmer.
[21:36:40] <siXy> No, it's made you do damn silly things for no good reason.
[21:36:50] *** Joins: hexfive (~eric@50.35.83.177)
[21:36:54] <siXy> fmt is FAR FAR more expensive than the strconv version I suggested above.
[21:37:06] <krux02> so how do you know?
[21:37:36] <siXy> fmt uses runtime reflection to work out what you've passed to it, for a start.
[21:37:44] <krux02> and?
[21:38:04] <krux02> it is just a pointer that is passed as an argument
[21:38:10] <siXy> ...
[21:38:11] <krux02> and then then format string is parsed
[21:38:15] *** Quits: jaca122 (~Thunderbi@89-65-136-254.dynamic.chello.pl) (Quit: jaca122)
[21:38:18] <krux02> wich is pretty trivial.
[21:38:22] *** Quits: hexfive (~eric@50.35.83.177) (Client Quit)
[21:38:49] <krux02> maybe you are right and an allocation is cheaper here in go land. After all I don't have that much experience with it.
[21:38:57] <siXy> I think you don't understand how computers work. Pointer indirection has a cost. Runtime reflection has a VERY LARGE cost. And if you think that fmt is allocation free, you are horribly mistaken.
[21:39:30] <alb> krux02: IIRC, fmt will end up using strconv anyway. So if you want to minimize allocations, strconv by hand might end up saving a bit
[21:40:08] <krux02> alb, I will look that up
[21:40:32] <siXy> This is a really really common anti-pattern - when people start progressing a bit, they have a tendancy to take one thing and fixate on it to a totally inappropriate amount. For some reason, tiny memory allocations is a really common one. In fact, small memory allocations (esp on the stack, as here) are very cheap in comparison to all the hundreds of things fmt.Fprint does.
[21:40:44] <krux02> the point is, all my code is written in a way that the output is always directly generated where it belongs, no intermediate strings
[21:41:16] <krux02> an old project of me had many problems because there were too many intermediate strings allocated and I just try to avoid them
[21:41:19] <alb> krux02: if your code is extremely performance sensitive, and you have analyzed it well (e.g. runtime profiling, etc) to know this is a concern for you, sure, go for it!
[21:41:35] <siXy> You should really let go of this ideal that memory allocation is a bad thing - it's not. It's normal. You need to understand the cost of it, but that means understanding the REAL cost of it, in comparison to all other things that also have costs. E.g. following a pointer.
[21:41:47] *** Quits: gcd (gd@104-9-69-236.lightspeed.nsvltn.sbcglobal.net) (Remote host closed the connection)
[21:41:50] <krux02> when FPrintf does intermediate strings on its own (which it shouldn't need) then there is no point in using it.
[21:42:07] <alb> krux02: the reason for the "skepticism" is that most folks that are concerned about allocations, are doing so prematurely, and their performance bottlenecks aren't there
[21:42:43] <krux02> alb, of course not, after all the allocations were optimized away ;)
[21:42:56] <siXy> you're wildly over-fixating on memory allocations, and ignoring all other costs. That's leading you to write bad code, because you're putting far too high a premium on a thing that's not as important as you've been led to believe.
[21:43:26] <siXy> But you can benchmark all this if you don't want to accept it on faith.
[21:43:51] <krux02> siXy, I am doing a rewrite of a project in a new programming language, so my assumptions about go are certainly tainted
[21:44:07] <krux02> but my problems that I had in my old codebase were very very real problems.
[21:44:14] <krux02> not som hypothetical problems
[21:44:32] <krux02> I am just structuring my program so that I won't run into the same problem again.
[21:45:00] <krux02> and my design goal is, no temporary allocations when they can be avoided
[21:45:17] <siXy> This is true of computers generally, not the go language specifically. That said... some high level languages have a bunch of runtime in the way that makes some things that should be cheap, very costly. E.g. for loops - a lot of folks with experience in hihg-level interpreted langs try to avoid looping through things, because they mistake "horribly slow runtime" for "loops are bad". In langs like go, for
[21:45:23] <siXy> loops are not slow.
[21:45:54] <krux02> I am only doing languages with low level access
[21:45:55] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[21:45:59] <krux02> direct memory control
[21:46:08] <krux02> layouting memory for cache optimizations.
[21:46:13] <siXy> that's the wrong design goal. You're over-fixating on the one thing you know about. Your first goal should be to write good, readable and maintainable code. Your second goal is performance but only where it matters. And performance is *NOT* a function of "how much memory did I allocate"
[21:46:14] <krux02> stuff like that
[21:47:05] *** Joins: CoolerX (~CoolerX@user/coolerx)
[21:47:23] <krux02> siXy, how is my code not maintainable?
[21:48:13] <krux02> performance as a lot to do how a program is structured. Structure a program the wrong way, you can't make it fast without a complete redesign of the program.
[21:48:23] <krux02> The structure is key
[21:48:40] *** Quits: aml (~antoon_i@h-85-24-213-163.a392.priv.bahnhof.se) (Ping timeout: 252 seconds)
[21:49:11] <siXy> You're not reading carefully enough. I didn't say that your code is not maintainable - how could I, since you haven't shown us what it looks like? I just told you you're focussing on the wrong things, for the wrong reasons.
[21:50:27] <krux02> siXy, and I can tell you, I wasted more time trying to explain to you that I actually know what I am doing, than on implementing my own WriteInt procedure
[21:51:12] <krux02> my own WriteInt seems so wrong though, in a language that is very established by now.
[21:51:20] <siXy> I'm not quite sure why you're so confident that you know what you're doing when you need to ask questions like you've been doing. But sure, have fun I guess.
[21:51:41] * siXy &
[21:51:58] *** Quits: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606) (Ping timeout: 252 seconds)
[21:52:08] <krux02> siXy, I am just not very familiar with Go
[21:52:12] <krux02> that is all
[21:52:18] *** Joins: khrbt (~znc@user/khrbt)
[21:52:32] <krux02> I know C C++ Scala Java Haskell and Nim
[21:53:44] *** Joins: CoolerY (~CoolerX@user/coolerx)
[21:54:30] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[21:54:41] *** Quits: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net) (Ping timeout: 245 seconds)
[21:56:55] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[21:57:28] *** Quits: CoolerX (~CoolerX@user/coolerx) (Ping timeout: 252 seconds)
[22:00:09] *** Parts: jasper_ (~user@styria.daemonized.org) ()
[22:00:47] *** Joins: normen_ (~normen@p200300d7174cfe00c80abff6b24b4359.dip0.t-ipconnect.de)
[22:01:45] <Awoobis> (eeking in at the end) that doesnt mean you know go and what gotchas go may have
[22:01:55] *** Quits: normen (~normen@p200300d7173d3d00d86f6409cd987006.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[22:02:24] <Awoobis> this smells premature optimisationish already
[22:03:06] <Awoobis> fmt is far heavier than strconv, because fmt uses reflection to figure out what you passed it (and IIRC uses strconv under the hood)
[22:03:31] <Awoobis> also go is GCed and you're not gonna notice tiny allocs
[22:03:42] <Awoobis> especially with strings there is no choice
[22:04:56] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[22:05:28] *** Quits: normen_ (~normen@p200300d7174cfe00c80abff6b24b4359.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[22:05:43] <alb> krux02: https://pkg.go.dev/strconv#AppendInt may also be your friend if you want to minimize allocations
[22:06:51] <Awoobis> though that itself may also alloc if the buffer given isnt large enough
[22:07:23] <alb> yes, you'd need to use that in combination with a carefully managed buffer, and/or careful reuse
[22:07:47] <Awoobis> though again, you're not gonna feel it
[22:07:51] <alb> krux02: I think you'll find that in Go allocations are rarely that problematic, but hey, you do you, you know your code
[22:08:13] <Awoobis> unless you append to a 1 << 32 length buffer and it needs to actually expand it, you're really not even gonna know
[22:08:36] <alb> well, in fairness it's uncommon but it's not completely bananas. Some workloads do benefit from optimizing allocations a bit, let's give krux02 the benefit of the doubt since there's no point on arguing on code we are not familiar with
[22:09:05] *** Joins: normen_ (~normen@p200300d7174d30001d1b46deca9fd826.dip0.t-ipconnect.de)
[22:09:23] <Awoobis> this is true
[22:09:46] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 265 seconds)
[22:09:50] <Awoobis> but as they said they're new to go Im assuming, which I ought not to, that they're being a bit silly, but yeah Append* is likely what you want
[22:10:04] <Awoobis> it wont alloc unless the buffer isnt large enough (much like append())
[22:12:19] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
[22:13:16] *** Quits: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de) (Quit: Leaving)
[22:16:29] *** Joins: khrbt (~znc@user/khrbt)
[22:16:44] *** normen_ is now known as normen
[22:18:34] *** Quits: The_Loko (~The_Loko@86.127.244.35) (Quit: Leaving)
[22:19:58] *** Quits: omegatron (~some@p5b056a70.dip0.t-ipconnect.de) (Quit: What happened? You quit!)
[22:22:14] *** Joins: rek2 (~ReK2@47.62.9.10)
[22:22:36] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 245 seconds)
[22:22:45] *** Joins: omegatron (~some@p5b056a70.dip0.t-ipconnect.de)
[22:24:35] *** Quits: normen (~normen@p200300d7174d30001d1b46deca9fd826.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[22:26:15] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:26:24] *** Joins: normen (~normen@p200300d7174d7900857d4197ebb2e74b.dip0.t-ipconnect.de)
[22:26:38] *** Joins: mickey8 (~user@user/mickey)
[22:29:08] *** Joins: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se)
[22:29:41] *** Quits: fikran (~fikran@user/fikran) (Ping timeout: 245 seconds)
[22:31:42] *** Joins: fikran (~fikran@user/fikran)
[22:39:35] *** Quits: Scarecr0w (scarecr0w@user/scarecr0w) (Remote host closed the connection)
[22:40:33] *** Quits: aml (~antoon_i@h-85-24-213-163.A392.priv.bahnhof.se) (Ping timeout: 265 seconds)
[22:40:59] *** Quits: mei6 (~mei@user/mei) (Read error: Connection reset by peer)
[22:43:03] *** Joins: sudoforg1 (~sudoforge@wireguard/tunneler/sudoforge)
[22:45:52] *** Quits: sudoforge (~sudoforge@wireguard/tunneler/sudoforge) (Ping timeout: 265 seconds)
[22:46:44] *** Joins: dza (~dza@user/dza)
[22:48:01] *** Quits: bookworm (~bookworm@neomutt/bookworm) ()
[22:48:26] *** Quits: mickey8 (~user@user/mickey) (Quit: Ping timeout (120 seconds))
[22:48:46] *** Joins: mickey8 (~user@user/mickey)
[22:49:21] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[22:49:59] *** Joins: bookworm (~bookworm@neomutt/bookworm)
[22:50:26] *** Quits: CoolerY (~CoolerX@user/coolerx) (Remote host closed the connection)
[22:50:36] <krux02> alb, thanks for the information about AppendInt, unfortunately I do not work a []byte, but a *strings.Builder
[22:50:50] *** Joins: CoolerY (~CoolerX@user/coolerx)
[22:53:12] <krux02> alb, Awoobis: I've worked in many programming languages and also did a lot of optimizations. Just removing tiny allocations often resulted in a performance gain of 10x and it doesn't matter if the languaeg was GC or not.
[22:53:15] *** Joins: mrmanner (~jmanner@h-98-128-201-128.A785.priv.bahnhof.se)
[22:53:44] <krux02> Either the allocation is expensive (C++) or the GC that is triggered by the allocation (Java) is expensive.
[22:54:10] <krux02> also fresh allocated memory is never in the cache.
[22:54:21] *** Joins: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be)
[22:54:31] *** Joins: kiril (~kiril@85.91.153.163)
[22:54:42] *** Joins: tane (~tane@dslb-002-201-234-068.002.201.pools.vodafone-ip.de)
[22:56:48] <krux02> anyway, I think we all said our points.
[22:57:36] *** Quits: dza (~dza@user/dza) (Ping timeout: 245 seconds)
[22:58:20] *** Joins: dza (~dza@user/dza)
[22:58:42] *** Joins: Scarecr0w (scarecr0w@user/scarecr0w)
[23:01:09] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[23:02:37] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:02:51] <fentanyl> I'm using http.ResponseWriter.Write() method to write response in byte slice to a client (the response are bytes or text read from files), but when I run the server, cURL treats it as a binary output (although I explicitly included a "content-type" of "text/plain"). Is there a way I can fix this issue? Here is the code if that helps, the response is writen on line 72 https://termbin.com/t834
[23:03:37] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[23:03:50] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:04:50] *** Quits: mrmanner (~jmanner@h-98-128-201-128.A785.priv.bahnhof.se) (Changing host)
[23:04:50] *** Joins: mrmanner (~jmanner@user/mrmanner)
[23:12:54] *** Quits: jla (~jordi@tao.ddns.jazztel.es) (Read error: Connection reset by peer)
[23:13:08] *** Joins: jla (~jordi@tao.ddns.jazztel.es)
[23:14:54] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[23:15:09] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:17:06] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[23:17:11] *** Quits: Torr (~Torr@user/torr) (Ping timeout: 245 seconds)
[23:18:35] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Client Quit)
[23:18:48] *** Joins: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263)
[23:25:06] *** Quits: arinov (~arinov@31.142.50.8) (Ping timeout: 245 seconds)
[23:32:08] *** Quits: nattiestnate (~nate@2001:448a:20a0:4134:25e:715f:d637:5263) (Quit: WeeChat 3.3)
[23:32:30] *** Joins: burningserenity (~burningse@142-196-178-216.res.spectrum.com)
[23:35:37] *** Quits: CoolerY (~CoolerX@user/coolerx) (Quit: Leaving)
[23:39:58] *** Joins: mooff (mooff@awful.cooking)
[23:40:04] <Awoobis> krux02: my point is that until you need those optimisations, ie, the program is running slow enough to impact its job, any optimisations decrease readability for no gain
[23:40:27] <Awoobis> fentanyl: have you verified that your content type is being sent?
[23:40:49] *** Quits: mooff (mooff@awful.cooking) (Remote host closed the connection)
[23:42:26] *** Joins: connor_goodwolf (~connor@user/connor-goodwolf/x-2615606)
[23:43:55] <fentanyl> yes, it does send in response headers
[23:44:20] <Awoobis> you have verified this on cURLs end?
[23:44:36] *** Joins: arinov (~arinov@213.194.126.155)
[23:44:44] <fentanyl> i did, like i mentioned.
[23:45:37] <Awoobis> then its cURL likely not doing as you expect
[23:46:10] *** Joins: CoolerX (~CoolerX@user/coolerx)
[23:46:37] <fentanyl> i don't think it's curl. something is wrong with my code part.
[23:48:13] *** Quits: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net) (Ping timeout: 265 seconds)
[23:49:16] *** Quits: mrmanner (~jmanner@user/mrmanner) (Ping timeout: 245 seconds)
[23:49:29] <Awoobis> you set the headers as I believe they should be
[23:49:37] <Awoobis> not sure what else but Im also not an expert in this field
[23:51:24] *** Joins: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net)
[23:51:42] *** Joins: dsrt^ (~dsrt@wsip-70-165-23-55.mc.at.cox.net)
[23:52:18] *** Quits: AndyH (~andyh@cpc160881-lutn15-2-0-cust237.9-3.cable.virginm.net) (Client Quit)
[23:52:34] <fizzie> I don't think curl's "binary output can mess up your terminal" warning has anything to do with content-type, and everything to do with having some unprintable control characters in it.
[23:52:47] *** Joins: Torr (~Torr@user/torr)
[23:53:00] <fizzie> So perhaps ask curl to write the output to a file, and do a hexdump of its contents, and look for example for stray '\0' bytes from somewhere.
[23:53:00] *** Quits: kiril (~kiril@85.91.153.163) (Read error: Connection reset by peer)
[23:53:16] *** Joins: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89)
[23:54:53] <fentanyl> fizzie: But, I'm reading from a text file on line 68 as bytes (since resopnse_writer.Write()) also accepts bytes, I'm not sure why how there's an unprintable char.
[23:56:00] <fentanyl> (that text file's contents are ASCII btw)
[23:56:40] *** Quits: mikoto-chan (~mikoto-ch@ip-83-134-2-136.dsl.scarlet.be) (Ping timeout: 260 seconds)
[23:57:00] <fentanyl> (the file is also standalone and anyone can run it to test it out, jsut to mention)
[23:57:11] <fizzie> Well, maybe your buffer_size is more than the size of the file?
[23:57:23] <fizzie> You'd get those extra '\0' bytes at the end of your []byte, which count as binary data.
[23:57:36] *** Quits: rcernin_ (~rcernin@2001:8003:6803:db00:94a6:c64a:503d:8e89) (Ping timeout: 245 seconds)
[23:58:04] <fentanyl> I set a higher buffer size so that we've enough space to read varrying file sizes.
[23:58:14] *** Joins: kiril (~kiril@85.91.153.163)
[23:58:18] <fizzie> You want to write to the response only num_bytes_read bytes, not the entire slice.
[23:58:36] <fizzie> (Also, the suggestion about checking what exactly you get as the response would mean you don't have to guess.)
[23:59:01] *** Quits: khrbt (~znc@user/khrbt) (Ping timeout: 252 seconds)
