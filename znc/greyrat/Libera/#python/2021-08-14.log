[00:00:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:02:31] *** Quits: han-solo (~hanish@user/han-solo) (Quit: leaving)
[00:04:01] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Ping timeout: 244 seconds)
[00:04:03] *** Quits: audiocat (~audio@2603-8081-1800-00ad-e688-c570-cb5d-95fb.res6.spectrum.com) (Remote host closed the connection)
[00:04:13] *** Joins: junktext (~junktext@77.247.181.215)
[00:04:21] *** Joins: audiocat (~audio@2603-8081-1800-00ad-d77e-72fd-0a54-a07a.res6.spectrum.com)
[00:04:42] *** Joins: gildasio (~gildasio@gateway/tor-sasl/gildasio)
[00:04:59] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[00:04:59] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[00:05:13] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[00:05:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[00:05:52] *** Joins: wyclif (~wyclif@user/wyclif)
[00:05:59] *** Joins: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com)
[00:06:17] <lpapp> hi, has anyone managed to click on a captured screenshot of a GUI with pyautogui?
[00:08:26] *** Joins: goldfish (~goldfish@user/goldfish)
[00:08:47] *** Quits: goldfish (~goldfish@user/goldfish) (Remote host closed the connection)
[00:10:06] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[00:10:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:10:57] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 245 seconds)
[00:11:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:12:29] *** Joins: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883)
[00:13:10] *** Quits: Steeve (~steve@user/steeve) (Quit: end)
[00:13:22] <ska> jinsun: I had to test against the [c.__name__ for c in cls.subclasses] because each subclass gets recreated with new stack memory. Maybe my registry should just be the class names.. I'm trying to avoid re-registering a subclass if its already there.
[00:13:30] <ska> Does that sound right?
[00:14:47] <bpalmer> what is the purpose of this registry?
[00:15:15] *** Joins: Naan (~Naan@user/naan)
[00:16:02] <ska> To ensure that one and only one definative subclass has been created.. IE. Don't allow someone to overwrite that class.
[00:16:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:16:35] *** Quits: jdmark (~jdmark@67.8.137.130) (Quit: Leaving)
[00:16:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:17:03] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[00:17:19] <ska> bpalmer: is that an unreasonable goal?
[00:18:10] *** Joins: onexused (~onexused@user/onexused)
[00:18:17] *** Quits: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net) (Ping timeout: 248 seconds)
[00:18:54] <bpalmer> I don't see the sense of it, so I don't know.
[00:19:01] *** Quits: Hanii (~textual@2a00:23c5:c587:6d00:2199:36df:aa1:f55) (Quit: Textual IRC Client: www.textualapp.com)
[00:19:26] <Wooble> who is the "someone" who might overwrite it, and what will go wrong if they do?
[00:19:56] *** Joins: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net)
[00:20:06] <bpalmer> For most classes, if somebody makes a new class named the same, no harm is done; there's no work until somebody instantiates the class.
[00:20:48] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[00:21:14] *** Joins: jdmark (~jdmark@67.8.137.130)
[00:21:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:22:01] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Ping timeout: 248 seconds)
[00:22:04] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[00:22:24] *** Joins: wyclif (~wyclif@user/wyclif)
[00:22:45] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[00:22:45] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[00:23:11] <jinsun> ska: I didn't get what you want and why what you tried is not worrking, I thought you wanted something like this https://bpa.st/GBOQ
[00:24:34] <ska> jinsun: It works, as long as I use the cls__name__ to compare . ie,  compare cls.__name__ to [c.__name__ for c in cls.subclasses]
[00:24:35] *** Joins: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs)
[00:24:59] *** Joins: hafat (~hafat@159.146.87.68)
[00:25:09] *** Quits: i0e (~is0ke3@user/is0ke3) (Quit: Zzzzzz.....)
[00:25:57] <bpalmer> oh, sure, because the class objects are different for different definitions.
[00:26:32] *** Quits: dev4449 (~dev4449@172.98.68.20) (Quit: Client closed)
[00:26:46] <nedbat> ska: can you tell us more about how will these class be used? Why register them? What will look them up in the registry?
[00:27:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:27:54] *** Joins: wyclif (~wyclif@user/wyclif)
[00:27:57] <ska> nedbat: bpalmer: One reason I want to do this is to avoid users from shortcutting certain auth checks, which are implemented via properties and methods.  For example they might be able to re-create the class without some validation.
[00:28:19] <ska> I want to dis-allow that re-creation.
[00:28:38] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:908f:abc5:8c06:be43) (Ping timeout: 272 seconds)
[00:28:46] <bpalmer> ska: I don't think python lets you get in a fight that you can win with later developers and users.
[00:28:50] <nedbat> ska: can't they just make a new class with a new name, and neuter those methods?  Why would they do that in the first place? Who are these users?
[00:29:01] *** Quits: gusto (~Augustus@109.255.100.54) (Quit: Textual IRC Client: www.textualapp.com)
[00:29:06] <nedbat> ska: this sounds really defensive against people writing code, which is difficult.
[00:29:20] <grym> difficult both to do, and also to work with later
[00:29:38] <bpalmer> ska: also, libraries that rely on users subclassing types seem to be really awkward, in my experience.
[00:30:06] *** Joins: schumaml (~schumaml@p200300e2ef257a0053c1821a43d17d29.dip0.t-ipconnect.de)
[00:30:12] <ska> bpalmer: the users should never be subclassing anything. They only need to create instances.
[00:30:38] *** Quits: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy) (Quit: Client closed)
[00:32:29] <grym> ska: so make it nice to make instances, and don't worry about what happens if the user goes bonkers
[00:33:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[00:33:27] *** Joins: wyclif (~wyclif@user/wyclif)
[00:33:27] *** Quits: audiocat (~audio@2603-8081-1800-00ad-d77e-72fd-0a54-a07a.res6.spectrum.com) (Ping timeout: 245 seconds)
[00:34:00] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[00:34:02] *** Joins: magla (~gelignite@55d4fe02.access.ecotel.net)
[00:34:14] *** Quits: jetchisel (jetchisel@user/jetchisel) (Quit: Unfortunately time is always against us -- [Morpheus])
[00:34:54] *** Joins: riposte (~finalripo@2403-5800-3200-5c02--310.ip6.aussiebb.net)
[00:35:13] *** Quits: onexused (~onexused@user/onexused) (Quit: Leaving)
[00:35:30] *** Quits: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e) (Remote host closed the connection)
[00:35:50] *** Joins: audiocat (~audio@2603-8081-1800-00ad-e0dc-3252-de00-d489.res6.spectrum.com)
[00:36:19] *** Joins: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e)
[00:36:26] *** Quits: Naan (~Naan@user/naan) (Remote host closed the connection)
[00:36:57] *** Joins: Naan (~Naan@user/naan)
[00:38:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:38:34] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8)
[00:38:57] *** Joins: wyclif (~wyclif@user/wyclif)
[00:39:17] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[00:40:02] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[00:41:00] <thm> what is the correct version specifier if 1.3 or later is fine, but 2.X is not? "~=1.3" ?
[00:41:15] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-21c9-e4ab-6d46-2eb6.res6.spectrum.com)
[00:41:59] <grym> thm: ^1.3, i .. think
[00:42:04] <grym> ^=, rather
[00:42:12] <grym> "minor and patch are fine, not major"
[00:42:45] <thm> hm, pep440 doesn't mention ^
[00:42:50] *** Joins: markb1 (~markb1@2600:1700:eb40:7ecf:991b:cbde:e8e2:bbb2)
[00:42:53] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-21c9-e4ab-6d46-2eb6.res6.spectrum.com) (Client Quit)
[00:42:56] <matsaman> you can use * too
[00:43:32] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[00:44:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:44:28] *** Joins: wyclif (~wyclif@user/wyclif)
[00:46:06] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[00:46:59] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[00:47:47] *** Quits: poorboy (~poorboy@104.131.46.87) (Read error: Connection reset by peer)
[00:48:51] *** Joins: poorboy (~poorboy@104.131.46.87)
[00:49:34] *** Joins: mci64 (~x@185.242.190.95)
[00:49:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[00:49:59] *** Joins: wyclif (~wyclif@user/wyclif)
[00:51:31] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 268 seconds)
[00:54:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[00:55:31] *** Joins: wyclif (~wyclif@user/wyclif)
[00:56:44] *** Quits: Naan (~Naan@user/naan) (Quit: Leaving)
[00:58:05] <nedbat> ska: if the users don't make classes, then what did you mean by "i want to avoid users .. re-creating the class without some validation"?
[00:58:27] *** Quits: wereii (~wereii@37.205.14.89) (Ping timeout: 245 seconds)
[01:00:00] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[01:00:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[01:01:05] *** Joins: wyclif (~wyclif@user/wyclif)
[01:03:43] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[01:04:09] *** Quits: Vonter (~Vonter@user/vonter) (Ping timeout: 248 seconds)
[01:05:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[01:06:37] *** Joins: wyclif (~wyclif@user/wyclif)
[01:07:03] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[01:07:08] *** Quits: wgwz (~wgwz@45.55.193.150) (Ping timeout: 250 seconds)
[01:07:35] *** Quits: acnebs (~acnebs@2604:a880:400:d0::1a64:c001) (Quit: ZNC 1.7.5+deb4 - https://znc.in)
[01:07:50] *** Quits: trashcatt_ (~trashcatt@znc.trashcat.xyz) (Ping timeout: 258 seconds)
[01:07:53] *** Joins: wereii (~wereii@2a03:3b40:fe:4f::1)
[01:07:54] *** Joins: acnebs (~acnebs@2604:a880:400:d0::1a64:c001)
[01:08:10] *** Quits: mgocobachi (~m@ancrae.com) (Ping timeout: 240 seconds)
[01:08:26] *** Quits: laretta (~laretta@user/laretta) (Ping timeout: 250 seconds)
[01:08:26] *** Quits: graphitemaster (~graphitem@user/graphitemaster) (Ping timeout: 250 seconds)
[01:08:32] *** Quits: ilmostro (~ilmostro@user/ilmostro) (Ping timeout: 252 seconds)
[01:08:32] *** Quits: akspecs (~akspecs@165.227.127.54) (Ping timeout: 252 seconds)
[01:08:32] *** Quits: dstufft (~dstufft@shitbird.caremad.io) (Ping timeout: 252 seconds)
[01:08:34] *** Quits: libera- (~utunbu@user/utunbu) (Ping timeout: 240 seconds)
[01:08:36] *** Quits: byzandula (~byzandula@beerbq.net) (Ping timeout: 258 seconds)
[01:08:42] *** Quits: dftrace (~dftrace@hopper.lethalbit.com) (Ping timeout: 276 seconds)
[01:08:47] *** Quits: whaley (~whaley@159.65.32.34) (Ping timeout: 268 seconds)
[01:08:52] *** Quits: northernsage (~dobox@138.197.11.208) (Ping timeout: 250 seconds)
[01:08:52] *** Quits: bkhl (~bkhl@user/bkhl) (Ping timeout: 250 seconds)
[01:08:53] *** Quits: krjst (~krjst@2604:a880:800:c1::16b:8001) (Ping timeout: 250 seconds)
[01:08:55] *** Joins: cedric (~cedric@2a01:cb11:867:c200:716c:ec7b:63d6:6a02)
[01:08:58] *** Quits: shugo (~shugo@user/shugo) (Ping timeout: 240 seconds)
[01:08:59] *** Quits: optimant (quasselcor@user/optimant) (Ping timeout: 258 seconds)
[01:09:05] *** Quits: tkazi (~tkazi@user/tkazi) (Ping timeout: 252 seconds)
[01:09:14] *** Quits: Vultyre (~vultyre@user/vultyre) (Ping timeout: 256 seconds)
[01:09:14] *** Quits: jiffe (~jiffe@mail.nsab.us) (Ping timeout: 256 seconds)
[01:09:18] *** Quits: leosilva (~leosilva@canonical/leosilva) (Ping timeout: 250 seconds)
[01:09:24] *** Quits: poorboy (~poorboy@104.131.46.87) (Ping timeout: 268 seconds)
[01:09:33] *** Joins: graphitemaster (~graphitem@user/graphitemaster)
[01:09:37] *** Quits: oisota (~oisota@user/oisota) (Ping timeout: 268 seconds)
[01:09:48] *** Quits: energizer (~energizer@user/energizer) (Ping timeout: 272 seconds)
[01:10:00] *** Quits: zoid (~zoid@user/taxationistheft) (Ping timeout: 276 seconds)
[01:11:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[01:11:44] *** Joins: dstufft (~dstufft@shitbird.caremad.io)
[01:12:07] *** Joins: ssbr (~ssbr@python/site-packages/ssbr)
[01:12:09] *** Joins: wyclif (~wyclif@user/wyclif)
[01:12:10] *** Joins: krjst (~krjst@2604:a880:800:c1::16b:8001)
[01:13:06] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[01:13:30] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:14:09] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:57fa:c99f:96ed:ee89)
[01:14:58] *** Joins: wgwz (~wgwz@45.55.193.150)
[01:15:10] *** Joins: tkazi (~tkazi@user/tkazi)
[01:15:21] *** Joins: utunbu_ (~utunbu@user/utunbu)
[01:16:18] *** Joins: poorboy (~poorboy@104.131.46.87)
[01:16:39] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[01:16:54] *** Joins: leosilva (~leosilva@canonical/leosilva)
[01:17:05] *** Joins: bkhl (~bkhl@user/bkhl)
[01:17:08] *** Joins: dftrace (~dftrace@hopper.lethalbit.com)
[01:17:22] *** Joins: mgocobachi (~m@ancrae.com)
[01:17:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[01:17:25] *** Joins: Vultyre_ (~vultyre@user/vultyre)
[01:17:32] *** Joins: Fiji (~Fiji@user/fiji)
[01:17:36] *** Joins: trashcatt (~trashcatt@znc.trashcat.xyz)
[01:17:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:17:52] *** Joins: optimant (quasselcor@user/optimant)
[01:18:06] *** Joins: laretta (~laretta@user/laretta)
[01:18:22] *** Joins: zoid (~zoid@user/taxationistheft)
[01:18:43] *** Joins: jiffe (~jiffe@mail.nsab.us)
[01:18:45] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:18:52] *** Vultyre_ is now known as Vultyre
[01:18:52] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:57fa:c99f:96ed:ee89) (Ping timeout: 256 seconds)
[01:19:16] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[01:19:53] *** Quits: IceMichael (~IceMichae@dynamic-046-114-157-178.46.114.pool.telefonica.de) (Ping timeout: 268 seconds)
[01:20:09] *** Joins: akspecs (~akspecs@165.227.127.54)
[01:21:05] *** Joins: shugo (~shugo@user/shugo)
[01:21:11] *** Joins: whaley (~whaley@159.65.32.34)
[01:21:16] *** Quits: upsala2 (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[01:21:24] *** Joins: oisota (~oisota@user/oisota)
[01:21:44] *** Joins: northernsage (~dobox@138.197.11.208)
[01:21:45] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[01:22:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:22:26] *** Quits: gildasio (~gildasio@gateway/tor-sasl/gildasio) (Quit: gildasio)
[01:22:45] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[01:23:17] *** Joins: energizer (~energizer@user/energizer)
[01:23:28] *** Joins: byzandula (~byzandula@beerbq.net)
[01:23:36] *** Joins: wyclif (~wyclif@user/wyclif)
[01:24:15] *** Joins: y1n (~y1n@84-115-64-170.wifi.dynamic.surfer.at)
[01:24:32] *** Joins: Moosadee (~Moosadee@136.32.155.193)
[01:26:09] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:26:23] *** Joins: CombatVet (~c4@user/combatvet)
[01:27:08] *** Joins: Adoi (~Adoi@user/adoi)
[01:27:44] *** Joins: ovnicraft (~ovnicraft@179.49.44.28)
[01:28:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[01:29:10] *** Joins: wyclif (~wyclif@user/wyclif)
[01:29:26] *** Quits: __jmcantrell__ (~weechat@user/jmcantrell) (Ping timeout: 252 seconds)
[01:29:28] *** Quits: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215) (Quit: Leaving)
[01:29:36] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b48e:79ae:3433:f3d0)
[01:30:28] *** Joins: csevast (~csevast@89-64-113-198.dynamic.chello.pl)
[01:31:13] *** Quits: ovnicraft (~ovnicraft@179.49.44.28) (Client Quit)
[01:31:45] *** Quits: csevast (~csevast@89-64-113-198.dynamic.chello.pl) (Client Quit)
[01:31:53] *** Quits: mertyildiran (~mertyildi@88.234.29.56) (Ping timeout: 248 seconds)
[01:31:56] *** Quits: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e) (Remote host closed the connection)
[01:32:11] *** Joins: mertyildiran (~mertyildi@157.230.123.143)
[01:32:53] *** Joins: csevast (~csevast@89-64-113-198.dynamic.chello.pl)
[01:34:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[01:34:44] *** Joins: wyclif (~wyclif@user/wyclif)
[01:35:19] *** Quits: csevast (~csevast@89-64-113-198.dynamic.chello.pl) (Client Quit)
[01:36:14] *** Quits: Adoi (~Adoi@user/adoi) (Quit: Leaving)
[01:36:30] *** Quits: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57) (Quit: Client closed)
[01:37:13] *** Quits: gloomy_desktop (~ldorigo@81.161.149.37) (Ping timeout: 248 seconds)
[01:37:22] *** Joins: stemid (~nocturnal@i-lands.anark.ist)
[01:37:38] <stemid> hey someone please help me think, how do I avoid doing two loops on line 19 here? https://paste.centos.org/view/a872998e
[01:37:40] *** Quits: mertyildiran (~mertyildi@157.230.123.143) (Ping timeout: 272 seconds)
[01:38:19] *** Joins: Popzi (~Popzi@user/popzi)
[01:39:02] <Popzi> https://i.imgur.com/y4qnwt8.png How do I mate matplotlib display the data that I'm actually giving it, instead of auto generating stuff that isn't bloody there?
[01:39:06] <Popzi> make*
[01:39:18] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[01:39:30] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[01:40:18] <Repiphany> stemid: You can replace line 20 with `plots[(name := row['Name'])] = {` and delete lines 25/26 maybe
[01:40:19] *** Joins: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e)
[01:40:57] <SnoopJ> Popzi, pass `linestyle='none'` in your plot() command to turn off the line. You probably should also pass `marker='o'` or some other marker specification. I usually plot with style 'bo-' or somesuch for a plot that shows the actual data points along with the linear interpolation
[01:41:39] *** Joins: torandu (~sean@94.10.125.197)
[01:42:11] *** Joins: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec)
[01:42:15] <SnoopJ> if you want to interpolate everywhere but the big gap, you'd probably need to identify the gap and split the data there.
[01:42:50] *** Joins: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net)
[01:42:57] <Repiphany> If you can put a nan in the gap, it won't linearly interpolate between those points
[01:43:20] <Popzi> SnoopJ, that's the thing... the data for the straight white line literally doesn't exist...
[01:43:34] <Popzi> It's automatically generating and filling it
[01:43:34] <SnoopJ> Popzi, the data for a line never does, that's literally the point of the line
[01:43:35] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Quit: thimslugga)
[01:43:51] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[01:43:54] <SnoopJ> Matplotlib's behavior if it draws a line is to perform linear intepolation between the data
[01:44:06] <Popzi> SnoopJ, what I need to figure out is how to tell Matplot to stop generating dates and just put the dates I've given it across the x axist
[01:44:08] <SnoopJ> (nothing else would be a very sane default)
[01:44:27] <SnoopJ> Popzi, you should re-read the first message I sent you, wherein I told you exactly how to do that, then.
[01:44:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[01:44:44] <Popzi> SnoopJ, your message just makes the line dotted instead? lol
[01:44:54] <SnoopJ> no, it disables the line
[01:44:56] <Popzi> https://i.imgur.com/glmVA4v.png
[01:44:59] <SnoopJ> it might appear to be a dotted line if your data are very dense
[01:45:13] <SnoopJ> yea, that's not a "dotted line," that's putting a point on each datum
[01:45:22] <SnoopJ> which is...what you're asking for, if I understand correctly
[01:45:45] <SnoopJ> it's not like it's not "making up" stuff that doesn't exist when it's interpolating the smaller gaps
[01:45:49] <Popzi> SnoopJ, Nope, I'm trying to get rid of the massive straight line that matplot is automatically putting in
[01:45:56] <SnoopJ> Popzi, you did, when you turned off the linestyle
[01:46:03] <SnoopJ> which turns it off *everywhere*
[01:46:17] *** Quits: kujo2 (~kujo@188.166.12.52) (Ping timeout: 248 seconds)
[01:46:36] <SnoopJ> if you want to only disable it in the gap, you'll need to identify the gap (probably np.ediff1d() on your dataframe's index or something similar can identify the large breaks)
[01:46:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 256 seconds)
[01:46:42] <Popzi> SnoopJ, alright, lemme rephrase - I'm trying to get matplotlib to put the dates that it's been given across the X axis, instead of having it auto generate dates it's not been given
[01:47:04] *** Joins: kujo2 (~kujo@188.166.12.52)
[01:47:26] *** Joins: Enitin (~Enitin@82.102.22.84)
[01:47:28] <stemid> Repiphany: what is that syntax called so I can google it? plots[(name := row['Name'])]
[01:47:48] <jinsun> Popzi: so you just want to treat the dates as strings?
[01:47:48] <SnoopJ> Popzi, I'm out of ways to explain that it does no such generation, but draws a line between consecutive data points
[01:47:49] *** Joins: Julian (~tos9@python/site-packages/Julian)
[01:47:52] <Repiphany> stemid: Assignment expression
[01:48:24] <SnoopJ> Popzi, it's "making up" dates that don't exist in the bottom plot, too, it's just that the gaps are small enough that you don't mind it. Matplotlib doesn't have a "only do this when the gap is of such-and-such size" feature, you have to do this for yourself
[01:48:37] *** Quits: Julian (~tos9@python/site-packages/Julian) (Client Quit)
[01:48:55] <Repiphany> Popzi: plt.plot(np.array([1,2,3,4,5,6,7]), np.array([1,6,3,np.nan,2,6,5]))
[01:48:59] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[01:49:28] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 268 seconds)
[01:49:31] <SnoopJ> Repiphany, I think they are saying that the dates in the gap are not part of the dataframe's index at all. It would be creating new rows to fill with NaN
[01:50:09] <Popzi> SnoopJ, right, but If i swap the dates out for numbers, or strings of a b c, it plots them next to one another, with this date index it's spreading them out along the x axis and interpolating as you say
[01:50:09] *** Joins: wyclif (~wyclif@user/wyclif)
[01:50:19] <Repiphany> Yes, adding new rows at least just in the plot is the easiest way to make a gap
[01:50:29] *** Quits: magla (~gelignite@55d4fe02.access.ecotel.net) (Quit: Stay safe!)
[01:50:38] <SnoopJ> I dunno about easiest, it seems like it's about the same effort as just identifying the gap and calling plot() twice for the two subsets
[01:51:15] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[01:51:16] <Repiphany> They wouldn't have the same line properties though like labels or whatever
[01:51:25] <SnoopJ> that's true
[01:51:37] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[01:51:42] <coc0nut> when you call a defined function from a document called 3_functions.py and importing that in another document in the same folder "from 3_functions import created_devices" <- it doesnt work ? because its calling the number 3 a decimal? or should it be working?
[01:51:45] *** Quits: wovixo (~wovixo@128.104.205.49) (Quit: Leaving)
[01:51:50] <SnoopJ> Popzi, it doesn't really matter what the dtype is, this is just what matplotlib does when it's drawing a line. If you only want to see data where it actually exists, that's what markers are for.
[01:52:37] *** Quits: slav0nic (slav0nic@python.su) (Ping timeout: 245 seconds)
[01:53:31] <Popzi> I'm confused... I don't get why this is such a hard request ... https://i.imgur.com/pnRIRKB.png
[01:53:36] *** Quits: darksun (~darksun@user/darksun) (Quit: leaving)
[01:53:40] *** Quits: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be) (Quit: ZNC 1.8.2 - https://znc.in)
[01:54:17] *** Quits: GenTooMan (~cyberman@2601:547:437f:e5c6:21f:5bff:fefe:a883) (Ping timeout: 245 seconds)
[01:54:29] <SnoopJ> apparently not
[01:54:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[01:54:57] <jinsun> Popzi: `plt.plot(df2.index.strftime("%Y-%m-%d"), df2["Close"].values)` ?
[01:55:19] <SnoopJ> jinsun, I thought about this, but I think it's just gonna interpolate
[01:55:27] *** Joins: jrjsmrtn (~jrjsmrtn@ip-83-134-41-235.dsl.scarlet.be)
[01:55:27] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[01:55:41] *** Joins: wyclif (~wyclif@user/wyclif)
[01:55:41] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[01:55:48] <SnoopJ> there is to my knowledge no feature that lets you say "don't draw a line right here," short of doing two draws or inserting NaNs as Repiphany described
[01:56:23] *** Quits: blindguard (~blindguar@2a02:908:1864:c200::682e) (Quit: Konversation terminated!)
[01:56:38] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:56:39] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Killed (copper.libera.chat (Nickname regained by services)))
[01:56:39] *** __jmcantrell__ is now known as jmcantrell
[01:57:22] *** Quits: qlixed (~qlixed@181.44.129.13) (Ping timeout: 248 seconds)
[01:57:22] <Repiphany> Something like https://bpa.st/U3IA
[01:57:35] <SnoopJ> probably easier to just resample the dataframe's index
[01:57:55] <SnoopJ> and fill those new rows with NaN across all columns
[01:58:04] <SnoopJ> (or whatever sentinel makes sense in non-numeric cols)
[01:58:19] <Repiphany> Was in case they didn't want to mess with the original dataframe
[01:58:40] <SnoopJ> well, that's where the nice datetime representation lives
[01:58:43] <Popzi> mmmmm, I need it to stop scaling the dates based on their values, and treat them like an entry
[01:58:46] *** Joins: __jmcantrell__ (~weechat@user/jmcantrell)
[01:58:49] <Repiphany> (also I don't really use pandas at all)
[01:59:08] <SnoopJ> Popzi, you would do well to stop attributing behaviors to matplotlib that it doesn't have, and understand the ones it does have. It's a frustrating enough library when you *do* know what's happening
[01:59:52] <SnoopJ> Or perhaps you can tell us why these suggestions don't appeal to you
[02:00:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[02:00:19] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[02:00:21] <Popzi> like it's treating it as 1 to 100 and scaling that, where as I need it to treat it like 1,100,30,40,50 etc - if that makes any sense
[02:00:22] <SnoopJ> no, it doesn't
[02:00:32] <Popzi> I need it to just put the dates on the x axis that it's been given
[02:00:57] * SnoopJ shrugs
[02:00:58] <Repiphany> plt.plot_data(x_times, y_values)
[02:01:10] <SnoopJ> ^ note: this will give you pretty much what you started with
[02:01:13] *** Joins: wyclif (~wyclif@user/wyclif)
[02:01:26] *** Joins: extropiator (~extropiat@187.250.205.19.dsl.dyn.telnor.net)
[02:01:28] <Repiphany> s/data/date/
[02:01:45] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 248 seconds)
[02:01:55] <SnoopJ> oh, the default for that is markers-only apparently, I take it back
[02:02:16] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Read error: Connection reset by peer)
[02:02:24] <freeman_h> hi all hope we are all well.
[02:03:03] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[02:03:13] <freeman_h> https://bpa.st/4IDA how can i make it run every 10 seconds?
[02:03:41] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[02:03:57] *** Quits: decimuscorvinus (~jimmy@136.37.105.112) (Quit: Will return)
[02:04:24] <jinsun> freeman_h: change 300 to 10?
[02:04:28] <Popzi> SnoopJ, if I iterate over the dataframe, move all the datetimes into a list as a string, that somewhat solves the problem...
[02:04:42] <Repiphany> That code snippet seems familiar
[02:04:53] <SnoopJ> Popzi, I'm not sure what's wrong with our suggestions, so I think we're at an impasse here. Best of luck.
[02:05:32] <Popzi> I think so too... matplot tries to plot data it's not been given and there's no simple way of just telling it not to
[02:05:57] <Repiphany> 1 second in matplotlib.dates world is 1.157e-5 btw so gap should be around that scale
[02:06:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:06:12] <SnoopJ> I can tell you you'll be looking for that feature for a very long time since that's *not* what it's doing
[02:06:17] *** Quits: Barones (~Barones@2804:48dc:8500:0:691c:d4bc:61a9:4bf5) (Quit: Leaving)
[02:06:28] *** Quits: mantiX (~manti7@176.10.104.94) (Quit: WeeChat 3.1)
[02:06:30] <Popzi> well it is because I've just converted all the datetimes to strings and it's stopped being an ass about it
[02:06:31] *** __jmcantrell__ is now known as jmcantrell
[02:06:44] <freeman_h> hi guys https://bpa.st/AJOQ why does it still pass the if conditions?
[02:06:46] *** Joins: wyclif (~wyclif@user/wyclif)
[02:07:29] <nedbat> freeman_h: it won't
[02:07:39] <freeman_h> nedbat, it does
[02:07:41] <freeman_h> basically I am dealing with cypto currency which some of them are be 0.0000000 or 00000.000 or 0 or 0.00 or 0.000 basically does not have any numbers apart from it
[02:07:52] <nedbat> freeman_h: can you show us the real code?
[02:07:53] <freeman_h> i have added the condition but it still passes
[02:08:01] *** Joins: securethemews (~securethe@2a00:23c4:1e9b:7b00::1)
[02:08:30] <nedbat> freeman_h: my guess is that val is actually a string
[02:08:55] *** Joins: Barones (~Barones@2804:48dc:8500:0:691c:d4bc:61a9:4bf5)
[02:08:56] <freeman_h> nedbat, cant really show the full code but here is part of it https://bpa.st/XPDA
[02:08:59] *** Joins: morteza24 (~morteza24@37.98.68.187)
[02:09:02] <freeman_h> line 12 and 18
[02:09:32] <nedbat> freeman_h: print(repr(coin["lastPrice"]))
[02:09:37] <freeman_h> I am getting this error
[02:09:38] <freeman_h>     coin['price_change'] = round((100*((decimal.Decimal(coin['lastPrice']) - decimal.Decimal(ins['lastPrice'])) /decimal.Decimal(ins['lastPrice']))),2)
[02:09:38] <freeman_h> decimal.InvalidOperation: [<class 'decimal.DivisionUndefined'>]
[02:10:07] <Popzi> SnoopJ, https://i.imgur.com/PLA7DXP.png hopefully that clears that up, but anyways
[02:10:18] <Repiphany> You're checking the string against != 0, not converted to decimal yet
[02:10:33] <freeman_h> nedbat, '0.00000000'
[02:10:44] <nedbat> freeman_h: right, it's a string
[02:10:57] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Ping timeout: 245 seconds)
[02:11:08] <freeman_h> Repiphany, line 12 https://bpa.st/XPDA#1L12
[02:11:26] <freeman_h> nedbat, what is the best way to handle it>
[02:11:40] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:11:50] *** Joins: qlixed (~qlixed@181.44.129.13)
[02:11:53] *** Quits: y1n (~y1n@84-115-64-170.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[02:12:08] <Repiphany> Get all the values you need as decimals in line 3 and use those variables for the numerical checks
[02:12:14] <nedbat> freeman_h: convert your strings to numbers of some sort, and then start doing things with them
[02:12:18] <SnoopJ> Popzi, I can't help you without more information about why our suggestions don't address your question.
[02:12:19] *** Joins: wyclif (~wyclif@user/wyclif)
[02:13:00] <freeman_h> nedbat, has its cypto the value are sometimes in decimals with leading zeros
[02:13:08] *** Joins: jmcantrell (~weechat@user/jmcantrell)
[02:13:10] <freeman_h> I am scan over 10,000 cypo every 5 mins
[02:13:16] *** Quits: dld (~davidlowr@2601:197:600:1210:90d2:efa1:6a80:6389) (Ping timeout: 256 seconds)
[02:13:19] <freeman_h> and each of them are different
[02:13:33] <nedbat> freeman_h: i don't understand what you are saying.  Don't you want 000.0 and 0.000 to be treated as zero?
[02:13:34] <Popzi> SnoopJ, your suggestions do not appear to do anything with the gap matplot is displaying from data it's not been given, the suggestions only seem to change the look of the line unfortunately
[02:13:44] <freeman_h> I need to maintan the original value
[02:13:52] *** Joins: dld (~davidlowr@2601:197:600:1210:2489:889a:8f43:c8c4)
[02:14:03] <freeman_h> however if its all zeros i want to ignore it
[02:14:17] <SnoopJ> Popzi, the look of the line and drawing data where it does not exist are inseparable properties. This is an intrinsic feature of putting a continuous curve through discrete data.
[02:14:22] *** Quits: Barones (~Barones@2804:48dc:8500:0:691c:d4bc:61a9:4bf5) (Quit: Leaving)
[02:14:29] <freeman_h> by all zeros i mean if its  0.0000000 or 00000.000 or 0 or 0.00 or 0.000
[02:14:41] <SnoopJ> By definition the curve will be passing through regions where the sampled data doesn't exist
[02:15:25] <SnoopJ> Which is why turning it off seemed appropriate, but it sounds like you want to just not draw the line in the gap. As we said before, there are at least two ways to do that: split the data into two draws, or fill the offending region with null data (NaN here)
[02:15:26] <Popzi> SnoopJ, right there, I understand what you're saying, but go back a step and think about how it's spreading out the x axis
[02:15:33] <SnoopJ> Popzi, I really don't think you do
[02:15:36] <nedbat> freeman_h: when you want to treat it as a number (like:  if val != 0), it has to be a number. You have to convert the strings into numbers for that.
[02:16:59] *** Joins: decimuscorvinus (~jimmy@136.37.105.112)
[02:17:06] <freeman_h> hmmm
[02:17:13] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:17:30] <nedbat> freeman_h: if you also need to later show the price with the exact original digits, then you need to also keep the string
[02:17:45] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 248 seconds)
[02:17:51] *** Joins: wyclif (~wyclif@user/wyclif)
[02:17:51] <freeman_h> in php I can do something like int('0.0000') and it will give me 0 and int('0.00020') and it will give me 20 i think
[02:17:52] <Popzi> SnoopJ, it's treating the dates as something that should be equally scaled across the x axis, whereas it should be treating them as nodes, like random text, in order
[02:18:03] <SnoopJ> Popzi, it is not doing that
[02:18:10] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[02:18:14] <SnoopJ> And like I said, I can't help you without the information I asked for
[02:18:22] <freeman_h> if i do the same in python I get
[02:18:23] <freeman_h> ValueError: invalid literal for int() with base 10: '0.00000'
[02:18:32] <Popzi> SnoopJ, converting the index to strings appears to show that it is though
[02:18:35] <nedbat> freeman_h: use float()
[02:18:52] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 245 seconds)
[02:18:54] <nedbat> freeman_h: btw, this line doesn't do what you want:    ` if  (d['symbol'] == symbol for d in self.instruments)  `
[02:19:42] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[02:19:46] *** lukedashjr is now known as luke-jr
[02:20:41] <SnoopJ> Popzi, "appears" is a very appropriate choice of word considering the impasse we've reached about what matplotlib does
[02:21:13] <freeman_h> nedbat, what you think of this
[02:21:14] <freeman_h> https://bpa.st/L7SA#1L12
[02:21:50] <Repiphany> Popzi: https://i.imgur.com/bWnAs1F.png
[02:22:12] <nedbat> freeman_h: I would convert the value with Decimal just once, and use it for all the number operations
[02:22:44] <nedbat> freeman_h: on line 18 you convert the same value to Decimal twice
[02:22:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:22:51] *** Joins: Nact (~l@host-85-27-122-107.dynamic.voo.be)
[02:23:06] *** Joins: Adoi (~Adoi@user/adoi)
[02:23:45] <Adoi> hello, I am getting "RecursionError: maximum recursion depth exceeded"
[02:24:01] *** Quits: jmcantrell (~weechat@user/jmcantrell) (Quit: WeeChat 3.2)
[02:24:10] *** Joins: wyclif (~wyclif@user/wyclif)
[02:24:10] <KirkMcDonald> Adoi: Yes. The max recursion depth is 1000.
[02:24:39] <Adoi> I tried importing sys and adding "sys.setrecursionlimit(1500)"
[02:24:46] <KirkMcDonald> Adoi: Usually you only run into it if you write something infinitely recursive.
[02:24:49] <Adoi> but didnt change the error
[02:24:50] <nedbat> Adoi: don't do that, it will make things crash
[02:24:59] <Adoi> oh ok
[02:25:01] <nedbat> Adoi: can you link us to your code?
[02:25:07] <KirkMcDonald> Adoi: The max recursion depth exists for a reason. Set it too high and your program will just segfault instead.
[02:25:10] *** Guest330 is now known as jmcantrell
[02:25:13] <Adoi> sure
[02:26:17] *** Quits: junktext (~junktext@77.247.181.215) (Ping timeout: 248 seconds)
[02:26:47] <Adoi> here it is: https://bpa.st/PJAQ
[02:26:56] <freeman_h> nedbat, what is the best way to do this in python. Basically in for loop if one of the process errors out it kill the whole loop
[02:27:28] <freeman_h> is it possible to just log the one with issue and then continue the loop?
[02:27:30] *** Joins: Nivlac (~gabriel@181.223.203.212)
[02:27:43] <nedbat> Adoi: get_balance calls withdraw? I don't want to use your ATM
[02:27:54] *** Joins: georgios (~georgios@user/georgios)
[02:28:06] *** Joins: computeiro (~Wender@189.37.69.27)
[02:28:16] <Repiphany> Adoi: get_balance -> withdraw -> check_funds -> get_balance -> ...
[02:28:24] *** Quits: otisolsen70 (~otisolsen@xd4ed80b5.cust.hiper.dk) (Quit: Leaving)
[02:28:28] <nedbat> freeman_h: you might want a try/except block
[02:28:30] <Adoi> nedbat, but it calls deposit, too, and balance both :)
[02:28:53] <nedbat> Adoi: it can't be right that "get_balance" calls "withdraw" and "deposit".  Just think about those verbs
[02:29:11] <freeman_h> nedbat, in the except block it just seems to just log that and then move on
[02:29:15] <Repiphany> Why are you even checking `if self.deposit`
[02:29:22] <Repiphany> self.deposit is a function so it will always return True
[02:29:28] <freeman_h> by move on i mean doesnt run everything else
[02:29:29] *** Quits: wender (~Wender@179.104.252.191) (Ping timeout: 248 seconds)
[02:29:38] <nedbat> freeman_h: you can put whatever code you want in the except block
[02:30:57] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:2cfe:4c51:9bb2:8518)
[02:31:19] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:2cfe:4c51:9bb2:8518) (Remote host closed the connection)
[02:31:29] <Repiphany> Adoi: Even without the unintended recursion, `Total` in get_balance is always going to be 0
[02:32:52] <Repiphany> You need to stop reusing names for variables and functions too, in line 38 of self.withdraw, you have `self.withdraw == False` which is a statement that does nothing
[02:34:14] *** Quits: kosh (~kosh@user/kosh) (Ping timeout: 256 seconds)
[02:34:20] *** Joins: Naan (~naan@user/naan)
[02:34:22] <Repiphany> Presumably that was supposed to be `self.withdraw = False`, but that breaks your code even more by overwriting the function
[02:39:56] *** Joins: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5)
[02:40:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:40:21] *** Quits: Dotz0cat (~Dotz0cat@h186.236.31.71.dynamic.ip.windstream.net) (Ping timeout: 276 seconds)
[02:40:46] *** Joins: wyclif (~wyclif@user/wyclif)
[02:41:22] *** Quits: Akuli (~Akuli@87-94-111-179.bb.dnainternet.fi) (Quit: Leaving)
[02:41:28] <Popzi> SnoopJ, Repiphany - https://i.imgur.com/v9HMJXa.png - done, apologies if I gave you a bit of a run-around, I appreciate the time and effort put in to trying to help us
[02:41:49] *** Quits: extropiator (~extropiat@187.250.205.19.dsl.dyn.telnor.net) (Ping timeout: 246 seconds)
[02:42:08] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Ping timeout: 258 seconds)
[02:42:08] <SnoopJ> Popzi, I see, so you *want* the time axis to be non-uniformly spaced?
[02:42:25] <Popzi> SnoopJ, correct, perhaps I didn't make that clear enough
[02:43:12] *** Quits: Liblx (~Alex@2a02:810c:280:59c:3581:6527:4f24:5729) (Quit: WeeChat 3.2)
[02:43:20] <SnoopJ> No, it wasn't clear. Your solution looks fine, but I'd probably not bother with all that conversion and would set the labels directly with set_xlabel() on the corresponding Axes object or something.
[02:44:12] *** Joins: extropiator (~extropiat@23.106.85.249)
[02:44:50] <Popzi> SnoopJ, apologies, understood, I'll do as you suggest instead :-) and sorry if I appeared to be a little mad, I wasn't in a particularly good state having just spent an hour looking for data matplot was giving the impression was there lol
[02:44:55] <SnoopJ> I see what you mean about scaling the x-axis now, though. That *is* something the library does, because most plotting contexts want linear correspondence between data coordinates and pixel coordinates (and if you don't, you go around like this)
[02:45:01] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[02:45:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[02:46:19] *** Joins: wyclif (~wyclif@user/wyclif)
[02:46:30] *** Joins: ice9 (~ice9@user/ice9)
[02:46:39] *** Joins: Lando-HoloNet (~Lando@user/lando-spacepimp)
[02:46:45] <Popzi> SnoopJ, yea, I see the reason why they've done it, however I think it may've been abit of an oversight to not include a simple flag to disable this 'automatic feature'
[02:48:52] *** Joins: dob1_ (~dob1@user/dob1)
[02:49:04] <SnoopJ> Popzi, there's not really any point in it since there isn't one obvious other way to do it. They just make the tools available to the user to say "let me just do this myself"
[02:49:17] *** Quits: dob1 (~dob1@user/dob1) (Ping timeout: 245 seconds)
[02:49:50] *** Quits: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 252 seconds)
[02:50:03] <SnoopJ> I guess doing it as a 1D dataset as you did at first is about the best way to go about that, since it just discards the independent axis altogether and locates them by index
[02:50:33] <Popzi> we got there in the end :)
[02:50:34] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 258 seconds)
[02:51:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[02:51:50] *** Joins: wyclif (~wyclif@user/wyclif)
[02:54:48] *** Quits: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5) (Remote host closed the connection)
[02:55:07] *** Joins: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5)
[02:56:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[02:57:12] <SnoopJ> Popzi, here's what Repiphany's solution looks like: https://bpa.st/ZDPQ (output: https://jamesgerity.com/bad.png and https://jamesgerity.com/good.png)
[02:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[02:57:27] *** Quits: cedric (~cedric@2a01:cb11:867:c200:716c:ec7b:63d6:6a02) (Quit: Konversation terminated!)
[02:57:37] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Read error: Connection reset by peer)
[02:58:37] *** Quits: PocketKiller (PacKetIV@user/packetiv) (Ping timeout: 258 seconds)
[02:58:41] <SnoopJ> but I guess it doesn't really solve your problem since we had some miscommunication there. I would generally prefer to keep the gap visible, but I suppose I can see why it would be annoying to do this in trading data
[02:59:13] *** Joins: torandu (~sean@94.10.125.197)
[03:00:01] *** Quits: extropiator (~extropiat@23.106.85.249) (Ping timeout: 246 seconds)
[03:00:09] *** Joins: PocketKiller (PacKetIV@user/packetiv)
[03:00:31] *** Joins: extropiator (~extropiat@192.252.220.8)
[03:00:44] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[03:00:59] *** Quits: Nivlac (~gabriel@181.223.203.212) (Quit: leaving)
[03:01:40] *** Joins: jarthur_ (~jarthur@2603-8080-1540-002d-b485-c402-7731-8036.res6.spectrum.com)
[03:02:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[03:02:40] *** Joins: philipp64|work (~philipp64@174.27.28.163)
[03:02:55] *** Joins: wyclif (~wyclif@user/wyclif)
[03:04:26] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-689a-ca8a-2763-8a94.res6.spectrum.com) (Ping timeout: 272 seconds)
[03:04:59] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[03:05:32] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 245 seconds)
[03:05:34] <stemid> Repiphany: hey just wanted to say thanks for showing me assignment expressions, I managed to rework the script like this https://paste.centos.org/view/443bae97
[03:05:42] *** Quits: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6860-c946-993e-2148.res6.spectrum.com) (Read error: Connection reset by peer)
[03:07:49] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[03:07:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[03:08:29] *** Joins: wyclif (~wyclif@user/wyclif)
[03:08:39] *** Joins: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net)
[03:08:58] *** Joins: korg815 (~korg815@user/korg815)
[03:13:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:14:00] *** Joins: wyclif (~wyclif@user/wyclif)
[03:15:46] *** Joins: ice99 (~ice9@user/ice9)
[03:15:50] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:b48e:79ae:3433:f3d0) (Ping timeout: 272 seconds)
[03:17:15] *** Quits: winterflaw (~winterfla@gateway/tor-sasl/winterflaw) (Ping timeout: 244 seconds)
[03:18:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[03:18:53] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Read error: Connection reset by peer)
[03:18:53] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[03:18:55] *** Quits: Narrat (~omnius@p200300df5f13268f06ea56fffe2e7cdc.dip0.t-ipconnect.de) (Quit: They say a little knowledge is a dangerous thing, but it's not one half so bad as a lot of ignorance.)
[03:19:32] *** Joins: wyclif (~wyclif@user/wyclif)
[03:20:50] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[03:22:55] *** Quits: somlis (~somlis@user/somlis) (Quit: WeeChat 3.2)
[03:23:21] *** Joins: pycurious (~Adium@user/pycurious)
[03:23:33] *** Joins: goepsilongo (~goepsilon@2603-7000-ab00-62ed-95a9-15a9-30f0-cc26.res6.spectrum.com)
[03:23:49] <pycurious> I just installed pyenv - selected 3.8.10 as my default version - but neither python nor python3 point to that version in bash - anyone has seen this?
[03:24:12] <pycurious> pyenv versions -> * 3.8.10 (set by /home/uname/.pyenv/version)
[03:24:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:24:34] <pycurious> but python or python3 dont point to 3.8.10
[03:24:35] <SnoopJ> pycurious, have you executed pyenv's bash hook in your shell?
[03:25:04] *** Quits: mci64 (~x@185.242.190.95) (Ping timeout: 258 seconds)
[03:25:05] *** Joins: wyclif (~wyclif@user/wyclif)
[03:25:08] <pycurious> SnoopJ: I dont have a .bashrc - I was hoping the installer would add that - but it did not
[03:25:39] *** Joins: somlis (~somlis@user/somlis)
[03:26:30] <SnoopJ> pycurious, I don't know which "installer" you mean,
[03:26:49] <SnoopJ> pyenv itself doesn't have one, and the install step for the Pythons that it builds end up in $PYENV_ROOT
[03:26:58] <pycurious> I tried the curl … | bash -> Then added the 3 lines in .bashrc - that doesnt help
[03:27:27] <SnoopJ> The canonical addition of pyenv to your shell init is `echo 'eval "$(pyenv init --path)"' >> ~/.profile`
[03:27:40] <pycurious> SnoopJ: this is my .bashrc - > https://paste.ubuntu.com/p/t9GWrws53p/
[03:28:03] <SnoopJ> pycurious, did you remember to source it after updating it?
[03:28:35] <pycurious> yes - the default shell is Zsh - I manually am moving to bash then doing all this - is that an issue?
[03:28:53] <SnoopJ> it will be an issue if you expect to use the shims from zsh
[03:29:13] *** Joins: zeden (~zeden@user/zeden)
[03:29:13] <SnoopJ> but the project has installation instructions for zsh too if that's something you want to do
[03:29:16] <pycurious> I'm just tring to make it work in bash
[03:29:35] <pycurious> Let me reinstall
[03:29:46] <SnoopJ> As long as the shims are on PATH before wherever the other pythons live, pyenv will be first in line
[03:29:52] *** Joins: mrgz_ (~mrgz@201-42-0-191.dsl.telesp.net.br)
[03:30:13] <SnoopJ> so if pyenv isn't first, check $PATH, check `which -a python3`, etc.
[03:30:31] <pycurious> curl https://pyenv.run | bash -> This does not tell me to add anything to .bashrc
[03:30:49] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 248 seconds)
[03:31:02] <pycurious> once i run that command, "pyenv" is in path and versions shows system python
[03:31:24] *** Quits: fofoni (~fofoni@user/fofoni) (Remote host closed the connection)
[03:31:59] <SnoopJ> did you select the pyenv python that you want after installing it? via `pyenv local` or `pyenv global`? Just installing a version doesn't modify what versions it will provide.
[03:32:25] *** Quits: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk) (Ping timeout: 248 seconds)
[03:33:04] <pycurious> pyenv install 3.8.10 - now
[03:33:30] <SnoopJ> that will install 3.8.10, but it will not change what the shim provides
[03:33:53] *** Joins: ice9 (~ice9@user/ice9)
[03:33:55] <SnoopJ> you'd have to `pyenv global 3.8.10 system` to tell pyenv "give me 3.8.10 if you can, give me system python if that doesn't work out"
[03:34:15] <pycurious> SnoopJ:  I already updated the .bashrc with those 3 lines and .profile with the 1 line you gave. Then I'll do pyenv global 3.8.10 - then logout, login back again
[03:34:33] <SnoopJ> pycurious, if pyenv is on your $PATH you're doing init fine probably
[03:34:55] <pycurious> SnoopJ: pyenv global 3.8.10 - correct? not system ?
[03:35:17] <SnoopJ> pycurious, `pyenv global` accepts an arbitrary number of versions in the order you want them.
[03:35:19] *** Joins: Fluxx (~Fluxx@user/fluxx)
[03:35:24] <pycurious> pyenv versions now shows * 3.8.10 and not the star on the system
[03:35:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[03:35:31] <pycurious> i see
[03:35:47] <SnoopJ> the asterisk indicates which versions are ones it will try for one of the shimmed commands (like `python3`)
[03:35:58] *** Joins: aifa[m] (~aifamatri@2001:470:69fc:105::d06e)
[03:36:05] <pycurious> pyenv global 3.8.10 + pyenv versions -> Shows * 3.8.10 — but python or python3 still show/point to /usr/bin/python3
[03:36:09] *** Quits: ice99 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[03:36:10] *** Joins: wyclif (~wyclif@user/wyclif)
[03:36:27] <SnoopJ> pycurious, what does `which -a python3` show?
[03:36:52] <pycurious> $PATH = /home/uname/.pyenv/plugins/pyenv-virtualenv/shims:/home/uname/.pyenv/bin:
[03:37:10] <pycurious> SnoopJ: 	/usr/bin/python3
[03:38:10] *** Quits: LucaTM (~LucaTM@user/lucatm) (Quit: Textual IRC Client: www.textualapp.com)
[03:38:27] *** Quits: schumaml (~schumaml@p200300e2ef257a0053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[03:38:37] <pycurious> If I do -> source /home/uname/.pyenv/plugins/pyenv-virtualenv/shims/activate —— I see this - pyenv-virtualenv: version `3.8.10' is not a virtualenv
[03:38:45] <SnoopJ> and indeed it is not a virtualenv
[03:38:55] <SnoopJ> let's not worry about the virtualenv piece of it until you have your pyenv working
[03:39:12] <SnoopJ> it looks like the shims aren't on your $PATH, they should live at `/home/uname/.pyenv/shims/`
[03:40:11] <pycurious> yup that is the issue. I'm guessing this -> eval "$(pyenv init -)" — was supposed to do that
[03:40:37] *** Quits: extropiator (~extropiat@192.252.220.8) (Ping timeout: 246 seconds)
[03:40:51] *** Joins: schumaml (~schumaml@p57b7e0fa.dip0.t-ipconnect.de)
[03:41:06] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:41:09] *** Quits: goepsilongo (~goepsilon@2603-7000-ab00-62ed-95a9-15a9-30f0-cc26.res6.spectrum.com) (Quit: Textual IRC Client: www.textualapp.com)
[03:41:43] *** Joins: wyclif (~wyclif@user/wyclif)
[03:41:49] *** Quits: morteza24 (~morteza24@37.98.68.187) (Quit: Leaving)
[03:45:30] <SnoopJ> implicitly via the `command pyenv rehash`, I think
[03:45:30] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[03:45:44] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[03:46:39] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:46:43] *** Quits: jarthur_ (~jarthur@2603-8080-1540-002d-b485-c402-7731-8036.res6.spectrum.com) (Quit: jarthur_)
[03:47:03] <pycurious> SnoopJ: still the same problem - path didnt change
[03:47:14] *** Joins: wyclif (~wyclif@user/wyclif)
[03:47:47] <SnoopJ> hmm, yea the eval doesn't change it. I'm not actually sure how pyenv gets the shims there as I think about it
[03:47:59] <Repiphany> `eval "$(pyenv init --path)"` is recommended over `eval '$(pyenv init -)'` now, if that makes a difference
[03:48:05] <pycurious> SnoopJ: If I manually alter the path - things work
[03:48:12] <SnoopJ> yes, of course
[03:48:22] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[03:48:32] <SnoopJ> Repiphany, ah, yes, that would account for the difference.
[03:48:34] *** Quits: dcaro (~dcaro@user/dcaro) (Quit: ZNC 1.8.2 - https://znc.in)
[03:48:49] <pycurious> yup that works!
[03:48:53] *** Joins: dcaro (~dcaro@user/dcaro)
[03:48:58] *** Joins: Deaygo7 (~Deaygo@let.deaygo.in)
[03:49:01] *** Joins: harleypig5 (thelounge@harleypig.com)
[03:49:06] *** Joins: frat3rius7 (~frat3rius@host-85.14.84.172.static.3s.pl)
[03:49:06] *** Joins: daniel-k2 (~daniel-k@192.241.135.211)
[03:49:17] *** Joins: jancoow1 (~jancoow@user/jancoow)
[03:49:19] *** Joins: SoF6 (~skius@user/skius)
[03:49:19] *** Joins: tofran3 (~tofran@37.189.158.134)
[03:49:30] *** Joins: phlixi_ (~phlixi@aftr-62-216-205-171.dynamic.mnet-online.de)
[03:49:38] <SnoopJ> I see in my .bashrc that I set PYENV_ROOT before the eval, dunno if that makes it do something different
[03:49:57] *** Joins: strungout (znc@mutant.penguin.fyi)
[03:49:58] *** Joins: fxrs_ (~fxrs@192.227.212.130)
[03:50:10] *** Joins: cache (~cache@user/cacheyourdreams)
[03:50:14] *** Joins: Noisytoot_ (~noisytoot@sourcehut/user/noisytoot)
[03:50:41] *** Joins: ElimGarak (dgw@sopel/admin/dgw)
[03:50:47] *** Quits: Deaygo (~Deaygo@let.deaygo.in) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: daniel-k (~daniel-k@192.241.135.211) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: harleypig (thelounge@harleypig.com) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: frat3rius (~frat3rius@host-85.14.84.172.static.3s.pl) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: SoF (~skius@user/skius) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: jancoow (~jancoow@user/jancoow) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: tofran (~tofran@37.189.158.134) (Quit: Ping timeout (120 seconds))
[03:50:47] *** Quits: phlixi (~phlixi@aftr-62-216-205-171.dynamic.mnet-online.de) (Read error: Connection reset by peer)
[03:50:47] *** Quits: suffer (znc@mutant.penguin.fyi) (Quit: ZNC - https://znc.in seek the truth or pay the price)
[03:50:47] *** Quits: fxrs (~fxrs@192.227.212.130) (Quit: ZNC 1.7.x-git-653-187f617 - http://znc.in)
[03:50:47] *** Quits: dartmouthed (~blackunsp@li761-35.members.linode.com) (Quit: ZNC 1.8.2 - https://znc.in)
[03:50:47] *** Quits: dgw (dgw@sopel/admin/dgw) (Remote host closed the connection)
[03:50:47] *** Quits: cacheyourdreams (~cache@user/cacheyourdreams) (Quit: left)
[03:50:47] *** Quits: shan (shan@cyblog/maintainer/shan) (Quit: https://shantaram.xyz)
[03:50:47] *** Quits: NightMonkey (~NightMonk@user/nightmonkey) (Quit: ZNC - http://znc.in)
[03:50:47] *** Quits: Noisytoot (~noisytoot@sourcehut/user/noisytoot) (Remote host closed the connection)
[03:50:47] *** daniel-k2 is now known as daniel-k
[03:50:47] *** SoF6 is now known as SoF
[03:50:47] *** jancoow1 is now known as jancoow
[03:50:47] *** tofran3 is now known as tofran
[03:50:47] *** harleypig5 is now known as harleypig
[03:50:48] *** frat3rius7 is now known as frat3rius
[03:50:48] *** Deaygo7 is now known as Deaygo
[03:50:59] *** Joins: shantaram (shan@cyblog/maintainer/shan)
[03:51:49] *** ElimGarak is now known as dgw
[03:52:07] *** Quits: qlixed (~qlixed@181.44.129.13) (Quit: That's all folks!!)
[03:52:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[03:52:46] *** Joins: wyclif (~wyclif@user/wyclif)
[03:53:00] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 256 seconds)
[03:53:10] *** Joins: NightMonkey (~NightMonk@user/nightmonkey)
[03:53:13] *** audiocat is now known as audiobirb
[03:53:29] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[03:54:49] *** Quits: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs) (Ping timeout: 248 seconds)
[03:55:53] *** Quits: rubion (~rubion@cpc124306-ayle4-2-0-cust188.15-2.cable.virginm.net) (Ping timeout: 248 seconds)
[03:57:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[03:58:18] *** Joins: wyclif (~wyclif@user/wyclif)
[03:59:02] *** Joins: irreitug (uid23254@id-23254.tooting.irccloud.com)
[04:00:32] *** Joins: Wulf4 (~Wulf@user/wulf)
[04:00:40] *** Quits: greedom (~greedom@2001:16b8:320e:e400:60c5:d210:b0db:9d2e) (Remote host closed the connection)
[04:01:51] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[04:01:53] *** Quits: ovnicraft (~ovnicraft@corp-179-49-44-28.uio.puntonet.ec) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[04:02:38] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 258 seconds)
[04:03:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[04:03:52] *** Joins: wyclif (~wyclif@user/wyclif)
[04:03:58] *** Quits: Wulf (~Wulf@user/wulf) (Ping timeout: 272 seconds)
[04:03:58] *** Wulf4 is now known as Wulf
[04:05:06] *** Quits: georgios (~georgios@user/georgios) (Quit: Konversation terminated!)
[04:06:07] *** Noisytoot_ is now known as Noisytoot
[04:07:50] *** Joins: y3k (~Thunderbi@user/y3k)
[04:08:11] *** Quits: Auron (~Auron956@user/auron) (Remote host closed the connection)
[04:08:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[04:09:26] *** Joins: wyclif (~wyclif@user/wyclif)
[04:09:40] *** Joins: female_student_4 (~female_st@2a01:388:475:150::1:b3)
[04:09:44] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Quit: Hay te huacho!)
[04:13:27] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[04:14:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:14:59] *** Joins: wyclif (~wyclif@user/wyclif)
[04:15:05] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 248 seconds)
[04:16:03] *** Joins: death916 (~death916@user/death916)
[04:18:30] *** Quits: jstein (~jstein@gentoo/developer/jstein) (Ping timeout: 256 seconds)
[04:18:44] *** Joins: schumaml1 (~schumaml@p200300e2ef2bb100af2863e84f2e9720.dip0.t-ipconnect.de)
[04:18:56] *** Quits: bomb-on (~bomb-on@194.144.47.113) (Quit: aллилѹіа!)
[04:19:19] *** Quits: schumaml (~schumaml@p57b7e0fa.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[04:19:27] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[04:19:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[04:20:32] *** Joins: wyclif (~wyclif@user/wyclif)
[04:22:25] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[04:22:33] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[04:22:51] *** Joins: iomari891 (~iomari891@105.112.138.38)
[04:23:03] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Quit: Leaving)
[04:24:13] *** Joins: ice9 (~ice9@user/ice9)
[04:25:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[04:25:49] *** Joins: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9d83:6e81:31c6:ed7)
[04:26:09] *** Joins: wyclif (~wyclif@user/wyclif)
[04:28:33] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[04:28:42] *** Quits: Seirdy (~Seirdy@sourcehut/user/seirdy) (Quit: exiting 3.3-dev)
[04:29:50] *** Quits: Moosadee (~Moosadee@136.32.155.193) (Ping timeout: 252 seconds)
[04:30:51] <nomic> how do i get the current python version from within pdb
[04:30:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[04:31:42] *** Joins: wyclif (~wyclif@user/wyclif)
[04:31:47] <nomic> sys.ver
[04:32:35] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 252 seconds)
[04:32:51] *** Leonarbro_ is now known as Leonarbro
[04:32:52] *** Joins: torandu (~sean@94.10.125.197)
[04:33:56] *** Joins: vicfred (~vicfred@user/vicfred)
[04:35:10] <nedbat> sys.version, or .hexversion, or .version_info
[04:37:18] <SnoopJ> version_info +1
[04:38:20] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 256 seconds)
[04:45:58] <SnoopJ> pycurious, oh, I think the `pyenv init -` bit *is* supposed to add the shims to your PATH, but it was behaving a little strangely for me because I was inheriting $PATH from the parent shell of my tmux process
[04:46:33] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[04:47:09] <SnoopJ> the rehash command handles the shims and is called by the eval bit. Probably the --path spelling is better though
[04:48:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8) (Quit: Leaving)
[04:49:34] *** Quits: shodan45 (~quassel@107.161.22.155) (Remote host closed the connection)
[04:49:44] *** Quits: y3k (~Thunderbi@user/y3k) (Quit: y3k)
[04:50:43] *** Joins: shodan45 (~quassel@107.161.22.155)
[04:51:28] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 272 seconds)
[04:52:19] *** Quits: JavaBean (~JavaBean@user/javabean) (Read error: Connection reset by peer)
[04:53:24] *** Joins: ackyshake (~ackyshake@user/ackyshake)
[04:59:45] *** Quits: ackyshake (~ackyshake@user/ackyshake) (Ping timeout: 258 seconds)
[05:03:02] *** Quits: schumaml1 (~schumaml@p200300e2ef2bb100af2863e84f2e9720.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[05:04:59] *** Joins: schumaml1 (~schumaml@p200300e2ef2c6e00311977a6b18b8fa8.dip0.t-ipconnect.de)
[05:05:21] *** Joins: justsomeguy (~justsomeg@user/justsomeguy)
[05:10:58] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[05:12:52] *** Quits: ano (~weechat@user/ano) (Remote host closed the connection)
[05:12:53] *** Quits: freeman_h (~freeman_h@2a02:c7f:fc54:ba00:9d83:6e81:31c6:ed7) (Quit: Leaving)
[05:12:59] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Ping timeout: 244 seconds)
[05:13:21] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[05:13:43] *** Joins: Seirdy (~Seirdy@sourcehut/user/seirdy)
[05:14:00] <cluelessperson> SnoopJ, my bashrc doesn't set pyenv_root at all.
[05:15:27] <SnoopJ> cluelessperson, yea, I don't think that step is necessary or anything, I just have it in mine for...whatever reason
[05:15:42] <SnoopJ> might even be clobbered by pyenv itself
[05:16:14] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 258 seconds)
[05:17:48] *** Joins: ano (~weechat@user/ano)
[05:22:01] *** Joins: bigRoo (~user@73.181.dsl.syd.iprimus.net.au)
[05:22:41] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[05:22:47] *** Lando-HoloNet is now known as Lando-SpacePimp
[05:23:57] <cluelessperson> SnoopJ, oh,  perhaps the eval sets pyenv root.
[05:24:03] <cluelessperson> I feel out of sorts.
[05:25:57] *** Quits: plastico (~plastico@neomutt/plastico) (Quit: WeeChat 3.2)
[05:25:57] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Remote host closed the connection)
[05:26:09] *** Quits: ice9 (~ice9@user/ice9) (Quit: Leaving)
[05:27:20] *** Joins: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com)
[05:27:26] *** Quits: devcpu (~rusty@ec2-35-183-244-153.ca-central-1.compute.amazonaws.com) (Client Quit)
[05:27:30] *** Joins: jazzy (~jaziz@2600:380:466e:dec7:a848:25a6:1ecc:8634)
[05:28:15] *** Parts: justsomeguy (~justsomeg@user/justsomeguy) (WeeChat 3.2)
[05:28:20] *** Joins: devcpu (~rusty@108.162.160.184)
[05:28:32] *** Joins: kill (~killown@user/killown)
[05:28:40] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[05:28:51] <kill> f.add_done_callback(callback)  how can I pass arguments to the callback?
[05:29:13] <kill> I am using from concurrent.futures import ThreadPoolExecutor as Pool
[05:30:25] *** Quits: schumaml1 (~schumaml@p200300e2ef2c6e00311977a6b18b8fa8.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[05:30:35] *** Quits: vlm (~vlm@user/vlm) (Quit: "")
[05:31:10] *** Joins: Gerula (~Gerula@user/gerula)
[05:31:52] *** Joins: matsaman (~matsaman@user/matsaman)
[05:32:13] *** Joins: schumaml1 (~schumaml@p579aaba8.dip0.t-ipconnect.de)
[05:32:58] <cluelessperson> kill, https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor
[05:33:13] <cluelessperson> kill, there's an "initargs" argument.
[05:34:06] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[05:34:19] *** Joins: brabrax_ (~brabrax@user/brabrax)
[05:34:20] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[05:34:47] *** Joins: vlm (~vlm@user/vlm)
[05:34:48] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[05:35:34] *** Quits: brabrax (~brabrax@user/brabrax) (Ping timeout: 256 seconds)
[05:35:34] *** brabrax_ is now known as brabrax
[05:36:27] *** Quits: Midjak (~Midjak@82-65-111-221.subs.proxad.net) (Quit: This computer has gone to sleep)
[05:36:44] <dale> cluelessperson: Doesn't that just get passed to the thread pool initializer function, not the individual jobs?
[05:37:23] <dale> kill: I haven't used that API much, but I think I'd use a lambda or functools.partial.
[05:37:39] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[05:37:41] <kill> dale, thank you for that information
[05:37:48] <dale> kill: Ex. f.add_done_callback(lambda: callback(arg1, arg2, arg3))
[05:38:09] <dale> Er, I guess lambda fut: callback(arg1, arg2, arg3, fut) or what-have-you.
[05:38:35] *** Quits: ssbr (~ssbr@python/site-packages/ssbr) (Ping timeout: 252 seconds)
[05:39:21] *** Joins: Fiji (~Fiji@user/fiji)
[05:39:24] *** Quits: PantelicGR (~PantelicG@user/pantelicgr) (Quit: Leaving)
[05:40:47] *** Quits: MikZyth (~MikZyth@188.65.242.174) (Quit: WeeChat 3.1)
[05:41:42] *** Joins: bitdex (~bitdex@gateway/tor-sasl/bitdex)
[05:42:57] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[05:43:09] <foo> Trying to figure out how to have Python read email. I can use IMAP libraries. In the past, like 20 years ago, I used procmail recipes to pipe email to a script. Any suggestions for a relatively simple way to set this up?
[05:43:46] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[05:45:13] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[05:46:44] *** Joins: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:b1a6:b8b8:b290:fea6)
[05:46:54] *** Quits: LiftLeft (~LiftLeft@154.21.114.116) (Ping timeout: 258 seconds)
[05:47:36] *** Joins: c10l (~c10l@89.34.167.207)
[05:47:41] *** Joins: YoungPrince (~DrBrownbe@apollo.omarsadiq.com)
[05:48:49] *** Quits: YoungPrince (~DrBrownbe@apollo.omarsadiq.com) (Remote host closed the connection)
[05:49:36] *** Joins: ideopathic (~ideopathi@99-6-12-70.lightspeed.irvnca.sbcglobal.net)
[05:51:22] *** Quits: DrBrownBear (~DrBrownbe@2600:1700:9aa1:6bc0:b1a6:b8b8:b290:fea6) (Ping timeout: 245 seconds)
[05:51:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[05:53:19] *** Joins: wyclif (~wyclif@user/wyclif)
[05:53:42] <foo> The only issue with IMAP is I'd need to fetch email like every minute, I think.
[05:54:34] *** Joins: monkey_ (~user@190.104.116.134)
[05:56:54] *** Quits: fjmorazan (~quassel@user/fjmorazan) (Quit: fjmorazan)
[05:57:36] *** Joins: fjmorazan (~quassel@user/fjmorazan)
[05:58:03] <SnoopJ> foo, if your server has the IMAP IDLE feature, you could maybe use that? Or perhaps something with Push-IMAP
[05:58:51] <foo> SnoopJ: Thanks for chiming in. I'm still thinking through options here. I currently use Gmail to host my email... but I could set something up if it made sense. /me googles IMAP IDLE
[05:58:56] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 252 seconds)
[05:59:32] <SnoopJ> this thingy https://datatracker.ietf.org/doc/html/rfc2177
[05:59:59] *** Joins: LiftLeft (~LiftLeft@154.21.23.99)
[06:00:59] <foo> SnoopJ: thank you.
[06:01:06] <foo> SnoopJ: /me looks for IMAP-IDLE in a python library
[06:02:12] *** Quits: {HD} (~{HD}@102.165.16.72) (Ping timeout: 256 seconds)
[06:04:19] *** Joins: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp)
[06:04:22] <SnoopJ> foo, here's an example of someone writing it on top of what stdlib's imaplib provides: https://github.com/athoune/imapidle/
[06:04:46] <foo> SnoopJ: well geez, that looks easy.
[06:05:09] <foo> SnoopJ: I think I'll give that a shot to see if it's support... it looks like gmail might support it. That would definitely solve what I'm after. Grateful for that snippet, I was looking through a few but don't think I came across that one
[06:05:19] <SnoopJ> foo, and it looks like imaplib2 might speak it out of the box. https://imaplib2.readthedocs.io
[06:05:29] *** Quits: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net) (Ping timeout: 248 seconds)
[06:06:07] <SnoopJ> https://imaplib2.readthedocs.io/en/latest/index.html?highlight=idle#imap4-objects has the idle() method
[06:06:35] *** Joins: lmv (vml@onyx.moon-station.us)
[06:06:38] <SnoopJ> but yea, the protocol itself is relatively straightforward, and the idea of the IDLE extension is, too
[06:07:05] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[06:07:32] *** Joins: schumaml2 (~schumaml@p579aa6cd.dip0.t-ipconnect.de)
[06:08:41] *** Quits: schumaml1 (~schumaml@p579aaba8.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[06:09:44] <lmv> hi guys, i'm looking for some robot on wheels or tank-like with robotic arm and various sensors and maybe with possibility to buy and install extra features over time - programmable via python, any advices?
[06:10:00] <foo> SnoopJ: thanks, I wonder if it makes sense to go with imapidle or imapidle2
[06:10:11] <foo> SnoopJ: oh wait...
[06:10:19] *** Joins: fabs (~fabs@c-66-31-20-19.hsd1.ma.comcast.net)
[06:10:30] <SnoopJ> foo, not familiar with either of those, but imaplib2 looks pretty good and I would pretty happily use it I think
[06:10:33] <foo> SnoopJ: https://github.com/athoune/imapidle/ is a ... ok, nevermind. It's possible I can find that same functionality with imaplib2
[06:10:36] <SnoopJ> Looks like "imaplib, but with the other parts too"
[06:10:44] <foo> SnoopJ: thanks, agree. I'll start there
[06:11:02] <SnoopJ> imapidle is a hack by its own admission :)
[06:11:40] *** Joins: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj)
[06:13:06] <foo> SnoopJ: :) Yeah, I think imaplib2 is more official.
[06:14:57] *** Joins: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com)
[06:15:57] <SnoopJ> it's more organized/built out, at any rate
[06:16:04] *** Quits: FluffyMask (~masque@user/fluffymask) (Quit: WeeChat 3.2)
[06:17:05] *** Quits: kmh (~kmh@p200300df5f0ef400f4ee0f98c3b51916.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:17:20] *** Quits: noarb- (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[06:17:54] *** Joins: schumaml3 (~schumaml@p200300e2ef309c00658952546e4097cd.dip0.t-ipconnect.de)
[06:18:22] *** Joins: {HD} (~{HD}@37.19.197.232)
[06:18:30] *** Quits: dez (uid92154@user/dez) (Quit: Connection closed for inactivity)
[06:18:42] <female_student_4> Hi, I have a stupid question
[06:19:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[06:19:15] <female_student_4> if I have a two for loops inside a while loop in order to determine some matrix via multiplying elements simultaneously, is this considered dynamic programming?
[06:19:28] <grym> female_student_4: do you memoize and recurse?
[06:19:46] *** Quits: schumaml2 (~schumaml@p579aa6cd.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[06:19:50] <grym> (if not, then, no, i don't think so)
[06:20:35] <female_student_4> Aaah ok
[06:22:44] *** Joins: noarb (~noarb@user/noarb)
[06:24:32] *** Joins: JavaBean (~JavaBean@user/javabean)
[06:25:57] <pycurious> SnoopJ:  Thanks for the help on pyenv.
[06:28:13] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Ping timeout: 268 seconds)
[06:28:14] *** Quits: dcaro (~dcaro@user/dcaro) (Read error: Connection reset by peer)
[06:28:30] <SnoopJ> female_student_4, that sounds more like numerics code than it does like dynamic programming (which usually refers to a "dynamic" element in the solution to the problem, like memoization)
[06:28:48] *** Joins: dcaro (~dcaro@user/dcaro)
[06:29:16] <SnoopJ> pycurious, sure thing. I always like poking around in there, it's a nice little tool and I don't know as much of it as I'd probably like
[06:30:33] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 248 seconds)
[06:30:35] *** Quits: driib (~driib@185.195.233.162) (Read error: Connection reset by peer)
[06:30:59] *** Joins: driib (~driib@185.195.233.162)
[06:31:10] *** Joins: dcaro_ (~dcaro@user/dcaro)
[06:33:32] *** Joins: dcaro- (~dcaro@user/dcaro)
[06:33:51] *** Quits: lmv (vml@onyx.moon-station.us) (Quit: leaving)
[06:34:23] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[06:34:28] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-c9a4-4b13-12b4-5845.res6.spectrum.com)
[06:35:24] *** Joins: dcaro (~dcaro@user/dcaro)
[06:35:25] <female_student_4> SnoopJ aah okay, basically the way I'm doing makes the numbers approximate as opposed to exact because of this coding set up
[06:35:44] *** Quits: Codaraxis (~Codaraxis@user/codaraxis) (Quit: Leaving)
[06:35:56] *** Joins: torandu (~sean@94.10.125.197)
[06:36:50] *** Quits: dcaro_ (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[06:38:34] *** Joins: dcaro_ (~dcaro@user/dcaro)
[06:38:42] *** Quits: dcaro- (~dcaro@user/dcaro) (Ping timeout: 268 seconds)
[06:39:18] <SnoopJ> yes, that sounds very much like numerics :)
[06:40:05] *** Joins: VimVim (~VimVim@85.191.2.219)
[06:40:34] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[06:40:42] *** Quits: kill (~killown@user/killown) (Quit: Leaving)
[06:41:00] *** Joins: nergar (~Nergar@177.225.152.13)
[06:41:37] *** Quits: bitdex (~bitdex@gateway/tor-sasl/bitdex) (Quit: = "")
[06:41:43] *** Quits: dcaro (~dcaro@user/dcaro) (Ping timeout: 258 seconds)
[06:41:43] *** dcaro_ is now known as dcaro
[06:42:10] <female_student_4> What do you mean by numerics tho?
[06:42:35] <grym> doing math with floats
[06:43:29] *** Quits: schumaml3 (~schumaml@p200300e2ef309c00658952546e4097cd.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[06:43:37] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 268 seconds)
[06:44:38] <SnoopJ> female_student_4, https://en.wikipedia.org/wiki/Numerical_analysis
[06:44:51] <SnoopJ> tl;dr approximate, but do it *well*
[06:45:48] *** Joins: schumaml3 (~schumaml@p200300e2ef31f40087a2208ac5363287.dip0.t-ipconnect.de)
[06:45:55] <SnoopJ> When I was a kid I used to wonder how something like sqrt(2) was evaluated on a computer. Then I took a course in that and many light-bulbs went off in my head
[06:46:27] <foo> SnoopJ: looks like this uses imaplib2 https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb but it doesn't use imaplib2's default .idle() if I'm following this code
[06:47:00] <matsaman> yeah it's interesting to look up how humans used to figure out square roots
[06:47:09] <SnoopJ> foo, it uses it here: https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb#file-gistfile1-py-L37-L39
[06:47:12] <matsaman> and how it's still a cool approach to figuring things out in programming
[06:47:57] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[06:47:58] <matsaman> https://greenteapress.com/thinkpython2/html/thinkpython2008.html#sec86
[06:48:01] <SnoopJ> sqrt() looks easy in light of all the other questions I got resolved that I didn't even fully realize I had
[06:48:51] <foo> SnoopJ: oh, facepalm, totally missed that. Thanks. I'm currently in here: in https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb#file-gistfile1-py-L56 in pdb; pdb.set_trace() - but I don't see a way to access the message. It's possible I need to sync everything and determine which messages are new, whereas I'm currently expecting the msg to be available in the idle - I may be confused
[06:49:05] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[06:50:07] *** Quits: webmind (~webmind@user/webmind) (Ping timeout: 245 seconds)
[06:51:16] *** Joins: webmind (~webmind@user/webmind)
[06:51:37] *** Joins: hendursaga (~weechat@user/hendursaga)
[06:52:26] *** Quits: schumaml3 (~schumaml@p200300e2ef31f40087a2208ac5363287.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[06:52:31] <SnoopJ> foo, if I'm reading the code right, the message is passed to whatever you give as the callback. If you wanted the messages received I guess you'd want to put them into a data structure of some sort, probably a list or a deque, then access that (and maybe clear it as appropriate)
[06:52:38] *** Quits: nyah (~nyah@51.146.30.113) (Ping timeout: 256 seconds)
[06:53:23] *** Quits: hendursaga (~weechat@user/hendursaga) (Client Quit)
[06:53:29] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[06:53:49] <foo> SnoopJ: Thanks for reading the code. I'm expecting it to be in self, like self.msg in https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb#file-gistfile1-py-L56 or such. How are you seeing "the message is passed to whatever I give as callback" ? (I assume that dosync() is the current default / dummy callback)
[06:54:02] *** Joins: schumaml3 (~schumaml@p200300e2ef322200170c8a7e005d8d33.dip0.t-ipconnect.de)
[06:54:24] <foo> SnoopJ: eg. I'm stepping through the code right now and I do dir(self) but I don't see anywhere I can access a message of sorts or even what tripped the idle
[06:54:31] <SnoopJ> it's calling `self.M.idle(callback=callback)` on line 39, and I think self.M there is the connection the Idler was initialized with (like at line 62-68)
[06:55:22] *** Joins: finn_elija (~finn_elij@user/finn-elija/x-0085643)
[06:55:22] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Killed (osmium.libera.chat (Nickname regained by services)))
[06:55:22] *** finn_elija is now known as FinnElija
[06:55:56] <SnoopJ> foo, this example looks kinda barebones, it could be that the actual information you want in real code is in the args to that callback. However, this code does not seem to align with the documentation I linked, it could be that there was a fork of this name, or it's just changed structurally in the last 4 years
[06:55:58] *** Joins: sydbarret (~anton@static-186-121-195-38.acelerate.net)
[06:56:05] <SnoopJ> the signature of idle() on RTD is idle(timeout=None)
[06:56:09] *** Parts: sydbarret (~anton@static-186-121-195-38.acelerate.net) ()
[06:56:44] <foo> SnoopJ: What's RTD? (Thanks, still investigating this callback, I see what you're saying
[06:57:43] <SnoopJ> RTD = readthedocs
[06:57:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[06:57:46] <foo> SnoopJ: ok when I send an email and run this and watch, I can see in callback the args equal (('OK', [b'IDLE terminated (Success)']), None, None)
[06:58:16] <foo> SnoopJ: I'm expecting a msg dict or a plain text email header or such. *continues to investigate
[06:58:52] *** Joins: wyclif (~wyclif@user/wyclif)
[06:59:10] *** Joins: emerent_ (~quassel@p200300cd57058cf5ba27ebfffed28a59.dip0.t-ipconnect.de)
[06:59:10] *** Quits: emerent (~quassel@p200300cd57058c2aba27ebfffed28a59.dip0.t-ipconnect.de) (Killed (platinum.libera.chat (Nickname regained by services)))
[06:59:10] *** emerent_ is now known as emerent
[06:59:50] <SnoopJ> interesting, it looks like imaplib2 has callback functionality that just isn't documented
[07:00:38] <SnoopJ> the true signature is `idle(self, timeout=None, **kw)` and there's stuff downstream that knows what to do with the callback kwarg
[07:01:04] <foo> SnoopJ: where are you seeing that?
[07:01:22] *** Quits: schumaml3 (~schumaml@p200300e2ef322200170c8a7e005d8d33.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:02:10] <SnoopJ> foo, in the imaplib2 source, here: https://github.com/jazzband/imaplib2/blob/master/imaplib2/imaplib2.py#L890-L901 and here: https://github.com/jazzband/imaplib2/blob/master/imaplib2/imaplib2.py#L1697-L1703
[07:02:36] <foo> SnoopJ: bah, thanks. I was trying to find the github link from the RTD but I couldn't see it linked or else I missed it, was looking for this to dig more
[07:02:40] *** Joins: hendursaga (~weechat@user/hendursaga)
[07:03:17] *** Joins: schumaml3 (~schumaml@p200300e2ef32570053c1821a43d17d29.dip0.t-ipconnect.de)
[07:03:17] <SnoopJ> so imaplib2 is doing all the lifting to notify via that callback, so yea, I think you just consume args there and do something with it, and I guess the event generated by the response to the IDLE command is terminating it...?
[07:03:33] <SnoopJ> I'd have to hop into a debugger and watch it I think :)
[07:04:01] *** Quits: Sheilong (uid293653@id-293653.charlton.irccloud.com) ()
[07:04:50] <SnoopJ> (I can enthusiastically recommend pudb for climbing around inside unfamiliar code)
[07:05:43] <foo> SnoopJ: :) really appreciate you co-thinking on this one with me. I'd expect to see the args as simple as https://github.com/athoune/imapidle/#example - eg. a msg arg of sorts, but I'm not seeing it. Also, I haven't used pudb, I've just been using pdb - thanks. Will need to look into pudb
[07:05:49] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[07:06:24] <foo> SnoopJ: yeah, in the callback after I send an email and read it via imap idle I see this: args = (('OK', [b'IDLE terminated (Success)']), None, None)
[07:07:10] <SnoopJ> foo, yea I'm guessing that's because the logic in that sample doesn't care *what* the first message received is, it just sets the event and terminates the loop.
[07:07:20] <foo> SnoopJ: Unless Gmail's IMAP doesn't support IDLE but from what I saw it does
[07:07:24] <SnoopJ> it doesn't appear to care about the content of the event at all
[07:07:35] <SnoopJ> foo, I think it's a requirement for Push-IMAP, which is what a lot of phones speak
[07:07:37] <foo> SnoopJ: as in, I need to pass an arg in or suc?
[07:07:39] *** Joins: Dotz0cat (~Dotz0cat@h41.199.117.75.dynamic.ip.windstream.net)
[07:07:42] <foo> Aha
[07:07:52] <SnoopJ> foo, no I'm saying the `callable(args)` in that code doesn't use `args`
[07:07:58] <foo> SnoopJ: oh.
[07:08:07] <SnoopJ> so it isn't using information in the event to decide to exit and set that flag
[07:08:17] <SnoopJ> it just decides "okie doke, got an event, time to shut down"
[07:08:35] <SnoopJ> and I think this will always be the case, because the OK (or NO/BAD) response is part of the protocol
[07:08:41] <foo> SnoopJ: so, if I'm following - the question I should be asking is - how can I get this sample code to care about the information from the event
[07:10:07] <foo> SnoopJ: I surprised nobody else has asked this question, I feel like I'm missing something obvious. heh.
[07:12:23] *** Quits: jarthur (~jarthur@2603-8080-1540-002d-c9a4-4b13-12b4-5845.res6.spectrum.com) (Ping timeout: 258 seconds)
[07:12:34] <foo> SnoopJ: unless I need some logic like this - https://code.delx.net.au/offlineimap/blob/3847d0ba9d17f42cbb4ae15ea9cfb97aca2029ca:/offlineimap/imapserver.py#l408 - to actually sync the mailbox when it detects a new event and the message is in fact not "automatically passed down via idle"
[07:12:49] <SnoopJ> foo, here's a dummy doodle: `def callback(args): cmd, *rest = args; if cmd.startswith("*"): store_email(rest)`
[07:13:43] *** Quits: heco (~redrum@user/redrum88) (Quit: Going offline, see ya! (www.adiirc.com))
[07:13:48] <foo> SnoopJ: thanks, will give that a whirl. /me curious
[07:13:57] <SnoopJ> foo, the message ID is in the message, but imaplib2 is just passing it along, it's up to your software to keep track of the new-message IDs seen from the server. You can push them into a list, for instance.
[07:15:14] <SnoopJ> or since this code is threaded, maybe a Queue consumed by another thread or something
[07:15:19] <foo> SnoopJ: if I got to a place where I can see the message ID I think I can do the rest but let's see.
[07:15:29] * foo sends himself an email to trigger this
[07:15:57] *** Quits: haise01 (~haise01@213-191-130-226.dsl.iskon.hr) (Ping timeout: 245 seconds)
[07:16:20] <SnoopJ> foo, I think IDLE works basically like this: the client says "I'd like to IDLE," and the server says either "NO" or "BAD" or "OK". If it says "OK", you're idling, and the server will when necessary say "* N EXISTS" or "* N EXPUNGED" where N is some message ID
[07:16:29] <SnoopJ> err, EXPUNGE*
[07:16:52] <SnoopJ> and if the client says "DONE" at some point, the server hangs up and says "OK" if it went alright I guess
[07:17:01] <foo> SnoopJ: OHHH... maybe I didn't give this code long enough and all I see is the OK. eg. I see (Pdb) p cmd ('OK', [b'IDLE terminated (Success)']) (Pdb) p rest [None, N…
[07:17:22] <SnoopJ> The idle does have a default timeout of I think 30 minutes, but that's an awful long time relative to what your test code sounds like
[07:17:39] <SnoopJ> but yea, looks like you got the terminated end of the exchange
[07:17:40] <foo> SnoopJ: well I just continued the execution of the code from within my pdb and it just killed the connection. /me tries again
[07:17:57] *** Quits: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com) (Remote host closed the connection)
[07:18:20] <foo> SnoopJ: I thought that the OK was coming across when I actually sent an email, but perhaps it takes a few seconds to actually connect and I coincidentally was seeing the OK after sending an email to myself
[07:18:55] <SnoopJ> foo, well, you should be testing this with at least two connections, one that's doing the listening and one that's doing the sending
[07:19:23] <SnoopJ> IDLE is an exclusive state of this protocol: you enter IDLE, and then you're in IDLE until you stop IDLE
[07:19:27] <foo> SnoopJ: the "sending" is me sending an email to my gmail account with IMAP enabled
[07:19:32] *** Joins: jarthur (~jarthur@2603-8080-1540-002d-b485-c402-7731-8036.res6.spectrum.com)
[07:19:45] <foo> ... unless again, I'm missing something obvious here.
[07:19:50] <SnoopJ> foo, right, just saying that if you're not doing this on more than one connection, it could be that imaplib2 is cutting off the IDLE *because* you're sending a message
[07:19:54] *** Joins: TonyStone (~TonyStone@2603-7080-8607-c36a-9cdb-69bc-753b-1e50.res6.spectrum.com)
[07:20:07] *** Quits: death916 (~death916@user/death916) (Ping timeout: 245 seconds)
[07:20:12] <SnoopJ> because you can't do *anything* but idle when you're in the IDLE state: the client sits there and waits for the server to burb out something interesting
[07:20:16] <foo> SnoopJ: that probably explains exactly what I'm seeing since I've seen the connection get killed twice now when I send an email
[07:20:33] <SnoopJ> but if the client has to go to the little client's room, it has to leave the IDLE state to perform another action
[07:20:57] <SnoopJ> and the library might well know how to handle that kind of state transition so that the user just idle()s and doesn't have to worry about treading carefully to go from idle to not-idle
[07:21:22] *** Quits: schumaml3 (~schumaml@p200300e2ef32570053c1821a43d17d29.dip0.t-ipconnect.de) (Ping timeout: 245 seconds)
[07:21:28] <foo> SnoopJ: "well, you should be testing this with at least two connections, one that's doing the listening and one that's doing the sending" -> when you say "sending" - are you saying "sending email to the account with IMAP" or are you saying "sending the message to get processed after it's captured via IDLE" ?
[07:21:42] * enyc meows
[07:21:44] <SnoopJ> foo, the first one
[07:21:44] <foo> SnoopJ: I may have some misconceptions here, appreciate your patience with my delayed understanding - I still feel like I'm missing something
[07:22:01] <enyc> hrrm, no  'pydesigner'  here ?
[07:22:10] <foo> SnoopJ: aha, ok. So, if I run this script, and then I see it getting killed off when I send a message to my account, what needs to happen to not get it killed off?
[07:22:23] <SnoopJ> foo, that depends on whether it's one or two connections.
[07:22:28] <SnoopJ> If it's one, you don't.
[07:22:40] <foo> SnoopJ: "two connections" as in, running this script twice?
[07:22:52] <SnoopJ> foo, hang on let me see if I can find the state diagram
[07:23:03] <foo> SnoopJ: thanks, really appreciate it - my hunch is I'm missing something obvious here.
[07:23:31] *** Joins: schumaml3 (~schumaml@p4ff91e92.dip0.t-ipconnect.de)
[07:26:18] <SnoopJ> foo, hmm, I can't actually find one that shows this extension (in protocol jargon it's a "capability" of the server if it knows how to IDLE)
[07:26:39] <SnoopJ> foo, but my point is that IMAP looks like this: https://www.researchgate.net/profile/Joao-Antunes-2/publication/220070255/figure/fig6/AS:277199388200967@1443100892521/Finite-state-machine-of-the-protocol-IMAP.png
[07:26:39] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[07:27:41] <SnoopJ> each one of the grey boxes is a state, the arrows show commands transitioning between states (LOGIN to go from notauth'd to auth'd and so on)
[07:27:41] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[07:27:55] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[07:28:05] *** Joins: extropiator (~extropiat@162.253.68.207)
[07:28:19] <SnoopJ> IDLE would be a little box budding off of the authenticated state: it's another state you enter (as a client) using the IDLE command and exit with DONE
[07:28:57] <enyc> SnoopJ: aah yes i was about to ask about server to client notifications
[07:29:06] <enyc> SnoopJ: IDLE used to enter a state where server can notify back, or so
[07:29:44] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[07:29:45] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 248 seconds)
[07:29:54] <SnoopJ> enyc, yes but I think only the client can hang up, or would be interested in doing so?
[07:30:09] <SnoopJ> or if the server would be maybe it'd just dump the connection
[07:30:12] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[07:30:17] <SnoopJ> (BYE, I think?)
[07:30:36] * SnoopJ doesn't speak IMAP, but it's not far from IRC
[07:31:01] <SnoopJ> I guess IRC isn't really stateful. Let's say FTP, then.
[07:31:21] *** Quits: cheater (~Username@user/cheater) (Ping timeout: 248 seconds)
[07:31:40] *** Joins: cheater (~Username@user/cheater)
[07:31:44] <SnoopJ> enyc, AFAIK pydsigner is running the channel of the same name as this one on the "freenode autonomous zone"
[07:32:52] *** Quits: schumaml3 (~schumaml@p4ff91e92.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:33:14] <foo> SnoopJ: /me thinking through this
[07:34:16] <SnoopJ> foo, the less digression-heavy version: IDLE is a state and you are either in that state or not-in it. The server will only notify you like this if you're in the state with it. I think the library might "help" you out of the state if you try to do something other that can't be done from the IDLE state (like send a message)
[07:34:20] <foo> SnoopJ: aha, so when the IMAP connection is in a IDLE state then I can issue commands to fetch new messages, perhaps?
[07:34:44] *** Joins: schumaml3 (~schumaml@p4ff91de9.dip0.t-ipconnect.de)
[07:34:46] *** Quits: extropiator (~extropiat@162.253.68.207) (Ping timeout: 246 seconds)
[07:34:55] <SnoopJ> If you are using one command to both send your message to yourself *and* receive it, you're kind of in a race to transition between states before the message "arrives" (which may be quite quick!)
[07:35:16] *** Parts: kulernil (~kulernil@gateway/tor-sasl/kuler) (Leaving)
[07:35:22] <foo> SnoopJ: I feel like seeing https://github.com/athoune/imapidle/#example made me dumb because I'm expecting it to be as simple as that... hang out in idle state, when new message, iterate and process that message, when done go back to idle
[07:35:32] <gambl0re> is this place still active?
[07:35:56] <SnoopJ> foo, it is, but if you're only using *one connection* to do *two jobs*, then the one that isn't idling will be booting you out of IDLE
[07:36:15] <grym> gambl0re: libera is very active, yes
[07:36:33] <SnoopJ> so if you *are* using one connection (and I still don't know!) then this is definitely going to cause you to hang-up your IDLE because you can't chew gum and IDLE at the same time
[07:36:38] <gambl0re> this chan used to be poppin. i guess the freenode split messed things up
[07:36:50] <SnoopJ> gambl0re, it's been about the same
[07:37:17] <gambl0re> maybe. i'm not in here that often but from what i remembered, i wasn't even able to catch up with the chat before
[07:37:19] <foo> SnoopJ: Hmph, ok – I think I'm following. Is it reasonable to assume, if I did this with one connection that I can pause the idle while fetching a new message?
[07:37:24] <grym> ugh, now i'm wondering what horrible grep | cut | wc -l incantation would help my log stats generator
[07:37:31] <SnoopJ> foo, yes, it is *very* wrong
[07:37:34] <foo> SnoopJ: eg. I can do one or two connections, I'm simply trying to test process a message
[07:37:35] <gambl0re> sucks though...anyway
[07:37:45] <foo> SnoopJ: aha, ok, so if it's in that state it needs to stay in that state
[07:37:56] <SnoopJ> foo, well, there is exactly one thing the client can do in that state: idle.
[07:38:03] <SnoopJ> well, two: it can leave IDLE
[07:38:39] <SnoopJ> but the point of being in that state is that the client isn't doing anything but waiting for the server to say something it might be interested in
[07:38:42] *** Quits: pycurious (~Adium@user/pycurious) (Quit: Leaving.)
[07:38:46] <SnoopJ> like "hey, new message!"
[07:38:49] <foo> SnoopJ: so ideally (err, and I apologize if I'm repeating things you've already said): one connetion idles, and when there's a new event that connection spins up another thread to do some logic (but it's a thread so it's not leaving idle state)
[07:38:54] *** Joins: torandu (~sean@94.10.125.197)
[07:39:21] <SnoopJ> foo, yea basically. I would just write a separate test script that makes a new connection to send a message and test this separately that way. Mixing that kind of self-check code into the whole thing will make a mess out of it
[07:40:14] *** Quits: schumaml3 (~schumaml@p4ff91de9.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[07:40:39] <foo> SnoopJ: and by "send a message", I'm wanting to proces an inbound message not send anything. So I think it looks like this: A) I run the idler connection, B) I send an email to my gmail account which the idler is connected to via IMAP, C) I have a separate connection that processes the inbound messages that I sent
[07:43:17] <SnoopJ> especially if my guess about the library "helping" you out of the state is correct
[07:43:26] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[07:45:14] <SnoopJ> foo, yes, a separate connection for doing anything that _isn't_ idling
[07:45:18] *** Joins: schumaml3 (~schumaml@p4ff91c4d.dip0.t-ipconnect.de)
[07:45:35] *** Quits: xrogaan (~xrogaan@user/xrogaan) (Quit: Leaving)
[07:46:38] <SnoopJ> or think about the idle receiver as the "separate" one, just sitting there being passive to receive messages, while the other connection does something interesting (and event-generating) like sending/deleting mail
[07:46:41] <foo> SnoopJ: in that scenario, is the value of idling to simply tell the other connection to process the new email?
[07:46:58] <SnoopJ> foo, the only purpose of IDLE is to wait for the server to tell you about new things without having to ask first.
[07:47:32] <foo> SnoopJ: aha, ok, I think I'm following. So this example code really is just the idler itself, the receiver/processing connection needs to bew ritetn
[07:47:33] <SnoopJ> IDLE means "I am ready to sit here quietly and wait for you to say things to me, but only if you say OK"
[07:48:11] <SnoopJ> and DONE means "I am no longer ready to hear those things, please do not say any more, we'll go back to the call-and-response thing in the AUTHENTICATED state, please."
[07:48:32] <SnoopJ> (and the server acknowledges that with an OK because stateful protocols like this are very polite like that)
[07:50:28] <foo> SnoopJ: Really appreciate your patience with me. If I'm following, does the idle connection need to talk to the other connection somehow so it knows to "tip off" the other connection on "when to process mail" ? eg. set a database flag or suc
[07:50:32] <foo> such
[07:52:34] <SnoopJ> foo, nope, it just sits there waiting for the server to say "ooh, message here!"
[07:53:04] <SnoopJ> foo, I'm assuming the sender here is a dummy to simulate your program's operating environment. If that's not the case, maybe you should tell us more about this program that is sending itself e-mail for load-bearing reasons.
[07:54:40] <foo> SnoopJ: thanks. At a high level, I'm looking to send an email to my gmail account, with IMAP enabled, and process the email – eg. strip out the subject/body, and then "do something"
[07:56:01] <SnoopJ> foo, your program's as-designed behavior is to both send and receive email on the same server?
[07:56:24] *** Quits: VimVim (~VimVim@85.191.2.219) (Ping timeout: 268 seconds)
[07:56:25] <foo> SnoopJ: my program won't send email, it'll just receive. Random people will send in email
[07:57:09] <SnoopJ> foo, right, and what I'm saying about this being a separate program is that testing it this way matches best "random people will send in email," in a way testing it from the program itself kinda doesn't
[07:58:03] <SnoopJ> I guess it could be a helper class or something, but I usually write that kind of "while I'm developing this" thing as a separate program that I run to simulate input to the main program (or whatever it is I'm doing)
[07:59:29] <foo> SnoopJ: Again, I really appreciate you trying to help. I'm sorry, I'm simply not understanding. I'm building this from scratch, whether it's the same program or two different programs (eg. python mods), one to hold the IDLE and another to process the incoming mail and keep track of last email fetched, then yes - two separate python mods are needed for me to build this. But I'm still not sure I'm following
[08:00:04] <SnoopJ> foo, I'm saying that trying to send messages from the same connection that is receiving them is letting your testing tool get *way* too close to the guts of your main program.
[08:00:27] <SnoopJ> The receiver code should not care where the messages came from etc., just that the server says "hey, message here"
[08:01:24] <foo> SnoopJ: errr, I think I see the confusion: 20:07 < foo> SnoopJ: eg. I can do one or two connections, I'm simply trying to test process a message ... I'm not writing tests, I'm simply trying to mimic the behavior I want here. Not writing a test to test the connection here. I'm simply trying to simulate the functionaity I'm after with some dummy code
[08:01:34] <foo> My bad
[08:01:44] <SnoopJ> Okay, your simulator code, then
[08:02:27] <foo> SnoopJ: > "The receiver code should not care where the messages came from etc., just that the server says "hey, message here"" -> but when the server says "hey, message here" -> Doesn't it need to fire off a process and/or tell another process to "began doing work on that new message"
[08:03:04] <SnoopJ> well, it could and probably ought to, just to save all the bother of entering/exiting IDLE if it's done some other way.
[08:03:28] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[08:03:48] <SnoopJ> but there's no reason it couldn't leave IDLE, handle the message(s) it was notified about, and return to IDLE once done. This is basically what that sample code was doing, where "handle" the messages just meant "lol bye, example program is over"
[08:05:17] <foo> SnoopJ: this probably sums up what you've been trying to tell me: https://stackoverflow.com/questions/5359134/how-to-tell-whether-imaplib2-idle-response-resulted-from-timeout
[08:08:44] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[08:09:31] <foo> SnoopJ: eg. the second connection needs to keep track of a list of message ids to know which ones are the new messages
[08:09:34] <foo> I believe
[08:09:54] <SnoopJ> foo, after a few passes at it, I have...no idea what is going on in that post! It looks like both of those samples are hanging up with a DONE
[08:10:56] <SnoopJ> I guess one of them is a timeout, the other has `* 1 EXISTS` notifying of a new message with ID 1. I don't know why the DONE there is being issued
[08:11:27] <foo> SnoopJ: I didn't see any * 1 EXISTS in my tests, it sounds like you did since your short code snippet you shared to me accounted for that
[08:12:11] <SnoopJ> foo, I didn't do any tests, just read that off the description of the extension
[08:13:03] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 268 seconds)
[08:13:13] *** Quits: Naan (~naan@user/naan) (Read error: Connection reset by peer)
[08:13:19] <foo> SnoopJ: so, I'll try to talk through this one more time. I still have a tiny feeling of I'm missing something foundational here: I want 2 python modules. 1 of them is the IDLE connection. In that connection, the IDLE writes to database flag new_messages=True. Another process can say "if flag is set, then fetch the latest messages and process any message IDs that have not been processed yet" -> does this sound
[08:13:25] <foo> about right?
[08:13:32] * foo is waiting to get slapped because he's still missing something conceptually
[08:15:54] *** Quits: zaquest (~notzaques@5.128.210.178) (Quit: Leaving)
[08:16:22] <SnoopJ> foo, well, if you use a Queue to exchange the information between threads, you wouldn't even have to pass a flag that wakes up the other end, the processing side just waits for data from the receiver on the other side of the Queue and does its work when it has something to get from it
[08:16:40] <SnoopJ> but what you describe sounds fine, too
[08:16:50] <SnoopJ> a little more complicated of a hand-off of data
[08:17:32] <foo>  SnoopJ: are you referring to a thread Queue or a queue like rq ?
[08:20:45] *** Joins: zaquest (~notzaques@5.128.210.178)
[08:21:20] <SnoopJ> the former
[08:22:08] <foo> SnoopJ: ok, if a thread Queue, doesn't that mean that all of the code needs to be in the same python module? /me double checks the example
[08:22:52] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[08:23:05] *** Quits: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655) (Quit: WeeChat 3.2)
[08:23:55] <SnoopJ> foo, as long as the worker and producer both get the same Queue in the end, it doesn't really matter how that happens.
[08:24:09] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[08:24:09] *** Quits: PJBoy (~PJBoy@user/pjboy) (Ping timeout: 248 seconds)
[08:24:22] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[08:25:16] <foo> SnoopJ: ok, so to update my original concept here: I run this test code to initiate an IMAP IDLE connection, when the IDLE connection indicates a new email comes in, add an item to the thread Queue and then have the thread Queue separately get processed. I can store a list of message ids that have been processed and process the ones that haven't been processed. I think this sounds better?
[08:25:18] *** Joins: wyclif (~wyclif@user/wyclif)
[08:28:25] <SnoopJ> foo, the details of the application are something you can change your mind about a good deal. The protocol you're stuck with. So as long as you understand that it's stateful and that IDLE is something you're doing or not-doing, the rest you can figure out as you go.
[08:28:39] <SnoopJ> Have to run now, but maybe you'll let me know how it goes :)
[08:28:48] *** Joins: securethemews_ (~securethe@2a00:23c4:1e9b:7b00::1)
[08:29:20] <foo> SnoopJ: thank you, super appreciate your patience with me on this one. I feel like it took me longer to wrap my head around this than other things. Enjoy the weekend!
[08:29:40] *** Joins: death916 (UserNick@user/death916)
[08:30:23] *** Joins: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net)
[08:30:36] *** Quits: securethemews (~securethe@2a00:23c4:1e9b:7b00::1) (Ping timeout: 272 seconds)
[08:33:18] *** Joins: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net)
[08:33:58] *** Quits: CombatVet (~c4@user/combatvet) (Ping timeout: 244 seconds)
[08:34:13] *** Joins: Atque (~Atque@user/atque)
[08:35:15] *** Quits: rpkilby (~rpkilby@c-24-20-208-106.hsd1.or.comcast.net) (Ping timeout: 268 seconds)
[08:35:59] *** Joins: CombatVet (~c4@user/combatvet)
[08:36:01] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[08:36:28] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[08:36:30] *** Joins: supakeen (~user@python/site-packages/supakeen)
[08:38:08] *** Quits: zebrag (~chris@user/zebrag) (Quit: Konversation terminated!)
[08:38:50] *** Quits: mertyildiran (~mertyildi@88.234.29.56) (Ping timeout: 272 seconds)
[08:39:38] *** Quits: m1n10n (georgecloo@cpe-76-184-204-251.tx.res.rr.com) (Remote host closed the connection)
[08:39:53] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[08:43:03] <catbeard> what's a quick way to pop the first elements of a list into an array in a fixed size for loop based on n, say i have 4 processes getting parts of a list, and i have list ['1', '2', '3', '4', '5', ..., '40'] i want the first process to get a chunk ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] and the next chunk to get ['11', '12', '13', '14', '15', '16', '17', '18', '19', '20'] so so on and so
[08:43:05] <catbeard> forth - considering the following code - https://kopy.io/xkc4A#RRWcm9OpWd4rRZ
[08:45:38] <matsaman> heh
[08:46:01] *** Quits: gvsa123 (~gvsa123@d23-17-233-182.abhsia.telus.net) (Quit: Leaving)
[08:49:40] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[08:50:37] <hexology> is there any proposal out there to do be able to "copy" a the type annotations in function signature from one function to the **kwargs of another? something like this: https://bpa.st/ACAA
[08:51:45] <hexology> obviously paramspec helps with a case like `apply(f: Callable[P, T], *args: P.args, **kwargs: P.kwargs)` but something like `ParamSpecOf[func]` would be really useful, i think. especially when you need to wrap or abstract over 3rd party code
[08:52:04] *** Joins: y1n (~y1n@84-115-65-20.wifi.dynamic.surfer.at)
[08:53:38] <InPhase> catbeard: [L[i*len(L)//4:(i+1)*len(L)//4] for i in range(4)]
[08:54:43] <catbeard> InPhase: what var is that listcomp being assigned to
[08:54:56] <catbeard> and also the workers count is variable
[08:54:59] *** Quits: irreitug (uid23254@id-23254.tooting.irccloud.com) (Quit: Connection closed for inactivity)
[08:55:08] <catbeard> so not always going to be 4, but defaults to 4
[08:55:18] <InPhase> catbeard: Well I was kind of hoping you know how to change those parts.  It's a demonstration of technique.
[08:56:01] <catbeard> so [passes[i*len(passes)//args.workers:(i+1)*len(passes)//args.workers] for i in range(args.workers)]
[08:56:29] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[08:56:35] <InPhase> In proper code I'd precalculate some of those instead of repeating.
[08:56:39] *** Quits: mefistofeles (~mefistofe@user/mefistofeles) (Ping timeout: 258 seconds)
[08:58:11] *** Quits: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl) (Quit: Leaving)
[08:58:45] *** Joins: Metalsutton (~Metalsutt@101.100.153.131)
[09:01:00] *** Joins: mci64 (~x@185.242.190.95)
[09:01:50] *** Quits: Maikel (~Maikel@130.61.63.136) (Quit: The Lounge - https://thelounge.chat)
[09:02:59] *** Quits: noarb (~noarb@user/noarb) (Quit: ZNC 1.8.2 - https://znc.in)
[09:03:41] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[09:03:49] *** Joins: noarb (~noarb@user/noarb)
[09:04:33] *** Quits: envex (~envex@cpe-173-91-189-33.neo.res.rr.com) ()
[09:05:41] *** Quits: noarb (~noarb@user/noarb) (Client Quit)
[09:06:32] *** Joins: Maikel (~Maikel@130.61.63.136)
[09:08:34] <matsaman> [list[i:i+10] for i in range(0,len(list),10)]
[09:08:58] *** Joins: upsala (~zcb@185.213.155.160)
[09:10:45] *** Joins: noarb (~noarb@user/noarb)
[09:14:49] *** Quits: y1n (~y1n@84-115-65-20.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[09:15:20] *** Quits: thimslugga (~thimslugg@70.18.231.28) (Ping timeout: 268 seconds)
[09:18:37] *** Quits: slowButPresent (~slowButPr@user/slowbutpresent) (Quit: leaving)
[09:20:02] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[09:20:15] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[09:20:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[09:21:37] *** Joins: wyclif (~wyclif@user/wyclif)
[09:23:57] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[09:27:42] *** Joins: Vonter (~Vonter@user/vonter)
[09:28:21] *** Joins: y1n (~y1n@84-115-65-20.wifi.dynamic.surfer.at)
[09:31:50] *** Quits: penguino (~mrpenguin@user/mrpenguin) (Ping timeout: 244 seconds)
[09:36:35] <lpapp> hi, has anyone got pyautogui.click work with a captured image to recognise it on the screen? I only got it working with black and white captures
[09:37:13] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[09:37:33] *** Joins: extropiator (~extropiat@162.253.68.187)
[09:39:27] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[09:39:49] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[09:39:58] *** Joins: torandu (~sean@94.10.125.197)
[09:40:06] <catbeard> what if there isn't 10 elements left to pop
[09:44:09] *** Quits: mertyildiran (~mertyildi@88.234.29.56) (Ping timeout: 248 seconds)
[09:44:27] *** Joins: mertyildiran (~mertyildi@157.230.123.143)
[09:45:36] *** Quits: female_student_4 (~female_st@2a01:388:475:150::1:b3) (Quit: Client closed)
[09:45:43] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 258 seconds)
[09:46:22] *** Joins: netsan (~netsan@user/netsan)
[09:48:50] *** Quits: korros (korros@2600:3c03::f03c:92ff:febf:689a) (Ping timeout: 268 seconds)
[09:49:17] *** Joins: korros (~korros@li1845-92.members.linode.com)
[09:51:34] <graingert[m]> <hexology> "is there any proposal out..." <- ParamSpec is currently blocked in mypy, there's not going to be much new stuff until it's done
[09:52:35] <graingert[m]> <SnoopJ> "foo, it uses it here: https://..." <- Hey look it's imaplib2
[09:53:44] *** Joins: chowmeined (~chowmeine@user/chowmeined)
[09:54:15] *** Quits: zamba (~marius@5.226.162.54) (Read error: Connection reset by peer)
[09:54:21] *** Quits: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5) (Remote host closed the connection)
[09:56:51] *** Joins: amirouche (~amirouche@user/amirouche)
[09:57:22] <amirouche> hello, any idea what is the origin of that error: https://wyz.fr/0M-2X
[09:57:24] <amirouche> ?
[09:57:45] *** Quits: Roey (~Roey@user/Roey) (Quit: Client exiting)
[09:57:47] <amirouche> The same error appears with python 3.7 and python 3.9
[09:58:04] <amirouche> I do not know where even to start to debug this.
[09:58:10] <amirouche> It was working fine yesterday..
[10:05:21] *** Joins: jpw (~jpw@user/jpw)
[10:06:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[10:06:49] *** Joins: wyclif (~wyclif@user/wyclif)
[10:08:08] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[10:12:06] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 256 seconds)
[10:13:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[10:14:36] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[10:14:56] *** Joins: wyclif (~wyclif@user/wyclif)
[10:15:14] *** Quits: y1n (~y1n@84-115-65-20.wifi.dynamic.surfer.at) (Ping timeout: 258 seconds)
[10:16:31] *** Joins: astrocat (~astrocat@112.134.13.251)
[10:16:31] *** Joins: domhnall (~developer@user/domhnall/x-2887755)
[10:17:00] *** Quits: mertyildiran (~mertyildi@157.230.123.143) (Ping timeout: 272 seconds)
[10:17:55] <amirouche> print works fine :)
[10:17:55] *** Quits: Samian (~Sami@2620:10d:c091:480::1:d469) (Ping timeout: 258 seconds)
[10:18:38] <graingert[m]> <amirouche> "The same error appears with..." <- Show your code and more Traceback?
[10:18:46] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[10:20:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:20:18] <amirouche> that's the full traceback.
[10:20:26] *** Joins: wyclif (~wyclif@user/wyclif)
[10:20:52] <amirouche> The bug was that _loop.call_soon_threadsafe(aio_future.set_result, None) was missing `None` as argument.
[10:20:55] *** Joins: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net)
[10:21:26] <amirouche> hence Future.set_result was called without argument by the event loop.
[10:23:21] *** Quits: domhnall (~developer@user/domhnall/x-2887755) (Quit: leaving)
[10:25:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:25:54] *** Joins: wyclif (~wyclif@user/wyclif)
[10:28:42] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[10:28:50] *** Joins: y1n (~y1n@84-115-65-216.wifi.dynamic.surfer.at)
[10:29:50] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[10:30:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[10:31:04] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:31:10] *** Quits: extropiator (~extropiat@162.253.68.187) (Ping timeout: 246 seconds)
[10:31:32] *** Joins: wyclif (~wyclif@user/wyclif)
[10:31:50] *** Joins: aakashi2001 (~aakashi20@103.61.255.3)
[10:32:03] <aphysically> spent a little bit more time this evening converting that long bash script to python
[10:32:46] *** Joins: Hanii (~textual@host86-138-112-34.range86-138.btcentralplus.com)
[10:35:10] *** Quits: niv (~niv@limbo.cypherpunks.io) (Quit: Powered by LunarBNC: https://LunarBNC.net)
[10:35:28] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Quit: Free ZNC ~ Powered by LunarBNC: https://LunarBNC.net)
[10:36:00] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 272 seconds)
[10:36:26] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[10:36:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:37:06] *** Joins: wyclif (~wyclif@user/wyclif)
[10:37:58] *** Quits: Zeturic (~Orimendix@50-25-46-156.krmtcmta02.res.dyn.suddenlink.net) (Quit: Leaving)
[10:39:23] <df_data> Hi all, I’m trying to login using mechanical soup to a website that has a login promt (behind VPN), here is what it looks like https://stackoverflow.com/questions/34370766/python-login-page-with-pop-up-windows anyone know how to do this with mechanical soup?
[10:39:57] *** Joins: Enitin (~Enitin@82.102.22.84)
[10:40:08] *** Joins: mattil (~mattilinn@84-253-224-16.bb.dnainternet.fi)
[10:40:25] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[10:41:13] *** Quits: mattil (~mattilinn@84-253-224-16.bb.dnainternet.fi) (Remote host closed the connection)
[10:42:16] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:42:38] *** Joins: wyclif (~wyclif@user/wyclif)
[10:43:21] *** Quits: LiftLeft (~LiftLeft@154.21.23.99) (Ping timeout: 248 seconds)
[10:46:05] *** Quits: seednode8 (~seednode@user/seednode) (Quit: Nihil supernum.)
[10:46:38] *** Joins: seednode8 (~seednode@user/seednode)
[10:46:51] *** Joins: Adoi (~Adoi@user/adoi)
[10:47:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[10:47:27] <amirouche> hey, another question, is there is there readily available AsyncPoolExecutor, kind of like ThreadPoolExecutor but for the purpose of running asyncio functions
[10:47:31] <amirouche> ref: https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor
[10:48:11] *** Joins: wyclif (~wyclif@user/wyclif)
[10:48:11] <amirouche> What I need to use it as `pool` in something like https://discuss.python.org/t/request-for-review-pool-for-each-par-map/7384
[10:48:15] <amirouche> to limit concurrency.
[10:48:17] <jarthur> amirouche, anyio's TaskGroup works kinda like that.
[10:48:34] <amirouche> I can use asyncio.gather, it should yield more troughtput.
[10:49:25] <jarthur> Both TaskGroup and gather are unbound, concurrency wise, I believe.
[10:49:34] <jarthur> If you want some limits, https://github.com/CaliDog/asyncpool is also available
[10:51:16] *** Quits: mertyildiran (~mertyildi@88.234.29.56) (Ping timeout: 258 seconds)
[10:51:38] <amirouche> yeah! It look like the latter.
[10:51:51] * enyc meows =)
[10:53:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[10:53:44] *** Joins: wyclif (~wyclif@user/wyclif)
[10:53:52] <hexology> graingert[m]: i'd be curious even about totally hypothetical proposals, PEPs, mailing list threads, etc.
[10:54:03] <amirouche> yes gather is unbound as long as there is enough memory / fd, I have top loop buids chunks of coroutines, and execute a chunk with gather.
[10:54:12] <graingert[m]> hexology: in regards to?
[10:54:13] * amirouche looking into asyncpool
[10:54:45] *** Quits: Fiji (~Fiji@user/fiji) (Quit: Leaving)
[10:54:50] <graingert[m]> <amirouche> "hey, another question, is..." <- there's aiometer
[10:55:05] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[10:55:05] <hexology> graingert[m]: sorry, in regards to the ability to "copy" args/kwargs/return annotations from an existing function, in cases where ParamSpec wouldn't be possible
[10:55:09] <graingert[m]> you can also use a task group with start and a semaphore
[10:55:29] <graingert[m]> hexology: ah I see
[10:56:30] *** Quits: aakashi2001 (~aakashi20@103.61.255.3) (Read error: Connection reset by peer)
[10:57:55] <amirouche> aiometer looks great too. Tx!
[10:58:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[10:58:32] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[10:59:16] *** Joins: wyclif (~wyclif@user/wyclif)
[10:59:33] *** Quits: Lando-SpacePimp (~Lando@user/lando-spacepimp) (Ping timeout: 268 seconds)
[10:59:45] *** Joins: Lord_of_Life_ (~Lord@user/lord-of-life/x-2819915)
[11:00:36] <netsan> I like we finally getting switch case pattern in Python, it tooks years and fights but here we go
[11:00:42] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[11:00:58] *** stoiclunch is now known as stoiclunchbox
[11:01:37] *** Quits: Lord_of_Life (~Lord@user/lord-of-life/x-2819915) (Ping timeout: 258 seconds)
[11:01:38] *** Lord_of_Life_ is now known as Lord_of_Life
[11:02:00] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 258 seconds)
[11:02:34] <amirouche> ^^'
[11:04:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:04:48] *** Joins: wyclif (~wyclif@user/wyclif)
[11:05:01] *** Joins: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs)
[11:06:35] *** Quits: rajkosto (~rajkosto@178-221-251-243.dynamic.isp.telekom.rs) (Client Quit)
[11:07:04] *** Joins: schumaml4 (~schumaml@p4ff917e6.dip0.t-ipconnect.de)
[11:07:26] *** Joins: akaWolf (~akaWolf@akawolf.org)
[11:07:33] *** Joins: Jabberwack (~Jabberwac@191.96.67.97)
[11:08:48] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:08:54] *** Quits: dyCrazyEd (crazyed@2603:300a:1d10:c000:de4a:3eff:fe88:cc5f) (Ping timeout: 258 seconds)
[11:08:57] *** Quits: schumaml3 (~schumaml@p4ff91c4d.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[11:09:13] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:09:29] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:10:22] *** Joins: wyclif (~wyclif@user/wyclif)
[11:11:22] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[11:11:36] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[11:13:04] <nanonyme> Too bad they also dropped Win 7 support in the meantime preventing it from being taken into use in many places...
[11:14:45] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[11:14:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:14:49] *** Joins: kosh (~kosh@user/kosh)
[11:15:09] *** Joins: BSaboia (~bsaboia@188-178-217-166-cable.dk.customer.tdc.net)
[11:15:21] *** Quits: y1n (~y1n@84-115-65-216.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[11:15:48] *** Quits: FH_thecat (~FH_thecat@75.11.25.212.ftth.as8758.net) (Quit: Leaving)
[11:16:02] *** Joins: wyclif (~wyclif@user/wyclif)
[11:17:20] *** Joins: winterflaw (~winterfla@gateway/tor-sasl/winterflaw)
[11:17:44] <BSaboia> how to generate the natural numbers in a pythonic way? I am trying to get a small (preferable one-liner) code to show all the even numbers "ad infinitum"
[11:17:53] *** Joins: jaberwack (~Jabberwac@c-73-243-250-212.hsd1.co.comcast.net)
[11:17:57] <netsan> nanonyme, not sure what you are talking about... but not too late for you to use Linux
[11:18:01] *** Quits: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de) (Ping timeout: 248 seconds)
[11:18:29] *** Quits: Karel (~Karel@ptr-9091p58zj2jou4kni9t.18120a2.ip6.access.telenet.be) (Ping timeout: 252 seconds)
[11:19:53] *** Joins: i0e (~is0ke3@user/is0ke3)
[11:20:01] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[11:20:11] <nanonyme> netsan, I totally use Linux anywhere where I can choose
[11:20:16] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[11:20:40] <matsaman> same. Also anywhere I "can't" =)
[11:20:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:21:07] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[11:21:31] *** Joins: wyclif (~wyclif@user/wyclif)
[11:21:33] *** Quits: Jabberwack (~Jabberwac@191.96.67.97) (Ping timeout: 258 seconds)
[11:21:35] *** Quits: WarpedAI (~Warped@user/warped) (Quit: We Gone! Bye Bye)
[11:21:55] <nanonyme> That is a great way to lose your job
[11:22:03] *** Joins: jabberwack1 (~Jabberwac@181.214.227.30)
[11:22:11] *** Joins: Warped (~Warped@user/warped)
[11:22:55] *** Quits: jabberwack1 (~Jabberwac@181.214.227.30) (Client Quit)
[11:23:01] <matsaman> how would they know (how would they know)
[11:23:10] *** Joins: schumaml (~schumaml@p4ff9173f.dip0.t-ipconnect.de)
[11:23:21] *** Quits: schumaml4 (~schumaml@p4ff917e6.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[11:23:28] *** Joins: Jabberwack (~Jabberwac@181.214.227.30)
[11:24:02] *** Joins: xa0s (~xa0s@mab.sdf.org)
[11:24:49] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[11:25:15] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[11:26:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:26:04] *** Quits: jaberwack (~Jabberwac@c-73-243-250-212.hsd1.co.comcast.net) (Ping timeout: 268 seconds)
[11:26:50] *** Joins: mattil (~mattilinn@84-253-224-16.bb.dnainternet.fi)
[11:27:01] *** Joins: wyclif (~wyclif@user/wyclif)
[11:27:07] <amirouche> what does slash / means in function signature such as: def submit(self, fn, /, *args, **kwargs):
[11:28:45] *** Joins: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at)
[11:29:02] *** Quits: Jabberwack (~Jabberwac@181.214.227.30) (Changing host)
[11:29:02] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[11:29:06] <amirouche> got it at https://stackoverflow.com/q/24735311
[11:29:15] <amirouche> useless to me if you ask.
[11:30:23] *** Joins: Julian (~tos9@python/site-packages/Julian)
[11:30:37] <graingert[m]> amirouche: It means positional only
[11:30:54] <graingert[m]> It's so you can pass pool.submit(fn, fn=fn)
[11:31:35] *** Parts: Jabberwack (~Jabberwac@user/jabberwack) (Leaving)
[11:31:44] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[11:31:50] <KirkMcDonald> The syntax basically exists because Python functions written in C could do it, and it made sense to open it up so Python code could do it, too.
[11:32:00] <KirkMcDonald> So that you could document everything consistently.
[11:32:04] *** Quits: Jabberwack (~Jabberwac@user/jabberwack) (Quit: Leaving)
[11:32:13] <graingert[m]> Yeah it blocked asyncio.to_thread
[11:32:14] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:32:26] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[11:32:31] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[11:32:33] <graingert[m]> As in blocked its inclusion not blocking its execution at runtime
[11:32:34] *** Joins: wyclif (~wyclif@user/wyclif)
[11:32:58] *** Joins: netsan (~netsan@user/netsan)
[11:32:58] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[11:35:52] *** Quits: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net) (Quit: leaving)
[11:36:36] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[11:37:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:38:09] *** Joins: wyclif (~wyclif@user/wyclif)
[11:39:21] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 248 seconds)
[11:39:33] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[11:40:03] *** Joins: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57)
[11:40:10] *** Parts: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57) ()
[11:40:19] *** Joins: mci64 (~x@185.242.190.95)
[11:40:22] *** Joins: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57)
[11:42:20] *** Joins: torandu (~sean@94.10.125.197)
[11:42:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[11:43:20] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[11:43:41] *** Joins: wyclif (~wyclif@user/wyclif)
[11:43:59] *** Joins: Enitin (~Enitin@82.102.22.84)
[11:45:37] *** Joins: ice9 (~ice9@user/ice9)
[11:45:51] *** Joins: IgIgOrzoy (~IgIgOrzoy@user/igigorzoy)
[11:46:49] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 248 seconds)
[11:48:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:49:15] *** Joins: wyclif (~wyclif@user/wyclif)
[11:53:30] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[11:54:11] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[11:54:17] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[11:54:26] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[11:54:48] *** Joins: wyclif (~wyclif@user/wyclif)
[11:55:57] *** Joins: rsx (~dummy@ppp-188-174-158-108.dynamic.mnet-online.de)
[11:56:22] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 256 seconds)
[11:56:30] *** Quits: noctavian (~noctavian@gateway/tor-sasl/noctavian) (Ping timeout: 244 seconds)
[11:56:57] *** resmo_ is now known as resmo
[11:57:23] *** Joins: trace987 (~trace@ip5f5a6a70.dynamic.kabel-deutschland.de)
[11:57:31] *** Joins: bindu (bindu@user/bindu)
[11:57:46] *** Joins: dhanesh (~Dhanesh@117.223.140.227)
[11:58:44] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 268 seconds)
[11:59:22] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 268 seconds)
[11:59:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:00:19] *** Joins: wyclif (~wyclif@user/wyclif)
[12:01:20] *** Joins: jpw (~jpw@user/jpw)
[12:02:20] *** Joins: euouae (~euouae@user/euouae)
[12:02:34] <euouae> Hello how can I provide plug-in functionality in my program ?
[12:02:37] *** Joins: netsan_ (~netsan@user/netsan)
[12:03:10] <euouae> ie suppose my program creates a class of a Person with a name and age. How can I pass this information to a user created plugin?
[12:03:14] *** Joins: goofygoober2 (~goofygoob@23-119-165-251.lightspeed.mtryca.sbcglobal.net)
[12:03:35] *** Joins: kmh_ (~kmh@p5dcc649e.dip0.t-ipconnect.de)
[12:03:37] <goofygoober2> hello
[12:03:38] *** Quits: fedenix (~fedenix@gateway/tor-sasl/fedenix) (Remote host closed the connection)
[12:03:40] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[12:03:42] <euouae> Hu
[12:03:50] <euouae> Hi
[12:04:06] *** Joins: fedenix (~fedenix@gateway/tor-sasl/fedenix)
[12:04:19] <goofygoober2> I'm really struggling to get `sounddevice` imported into a venv for the special edition of tensorflow for apple silicon macs
[12:05:30] *** Quits: EvilDMP (~textual@django/moderator/EvilDMP) (Quit: My MacBook has gone to sleep. ZZZzzz…)
[12:05:31] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:05:41] <matsaman> goofygoober2: yeah?
[12:05:41] <euouae> What’s the issue?
[12:05:55] *** Joins: wyclif (~wyclif@user/wyclif)
[12:06:02] <goofygoober2> I'd really appreciate any help getting it working. I've written up my attempts here: https://developer.apple.com/forums/thread/687873#687873021 matsaman
[12:06:27] <goofygoober2> I can also post that here if you're not comfortable navigating away
[12:06:38] <lambda> that link is dead
[12:07:02] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[12:07:09] <goofygoober2> wait, really?
[12:07:17] <euouae> It’s for an alpha version, so it’s expected that you get issues . Link works
[12:07:33] *** Joins: jpw_ (~jpw@user/jpw)
[12:07:37] <amirouche> KirkMcDonald: makes sense :)
[12:07:56] <lambda> just shows a generic error page for me
[12:07:59] *** Quits: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte) (Ping timeout: 268 seconds)
[12:08:12] <euouae> You’re not following it correctly
[12:08:28] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 272 seconds)
[12:08:48] <goofygoober2> any ideas going forward to resolve those errors?
[12:08:54] <lambda> works now, very weird
[12:09:25] <euouae> It’s an alpha version you’re going to get errors
[12:09:30] *** Quits: upsala (~zcb@185.213.155.160) (Quit: WeeChat 3.2)
[12:09:32] <euouae> why are you interested in using it?
[12:10:12] <BSaboia> for x in iter(int, 1): print(x) <- can I modify this to increment x on every step of iter?
[12:10:22] <goofygoober2> yeah errors are definitely expected, I'm trying to setup an ML project
[12:10:37] *** Joins: torandu (~sean@94.10.125.197)
[12:11:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:11:12] *** Joins: MarderIII (~MarderIII@2001:985:e889:1:f0ad:6854:e73:20d8)
[12:11:27] *** Joins: wyclif (~wyclif@user/wyclif)
[12:11:50] <lambda> BSaboia: what are you trying to do there?
[12:12:00] *** Quits: MarderIII (~MarderIII@2001:985:e889:1:f0ad:6854:e73:20d8) (Client Quit)
[12:12:05] <matsaman> goofygoober2: it's portaudio from brew install portaudio?
[12:12:18] *** Quits: jpw_ (~jpw@user/jpw) (Ping timeout: 268 seconds)
[12:12:42] <goofygoober2> matsaman: yes, that's how I installed it
[12:13:00] <BSaboia> lambda, I want to print all natural numbers until I stop the application or memory overflow
[12:13:40] <lambda> BSaboia: https://docs.python.org/3.8/library/itertools.html#itertools.count
[12:14:16] <BSaboia> lambda, thanks
[12:14:19] <goofygoober2> matsaman: I thought the lines ``` /usr/local/lib/libportaudio.dylib: mach-o, but wrong architecture
[12:14:20] <goofygoober2> 	/usr/local/Cellar/portaudio/19.7.0/lib/libportaudio.2.dylib: mach-o, but wrong architecture``` were most interesting
[12:14:25] *** Joins: stoiclun1 (~stoiclunc@user/stoiclunchbox)
[12:14:33] <goofygoober2> whoops, I messed up that formatting
[12:14:40] *** stoiclunchbox is now known as stoiclunch
[12:14:45] *** Joins: jpw (~jpw@user/jpw)
[12:15:00] *** stoiclun1 is now known as stoiclunchbox
[12:15:05] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[12:15:07] <matsaman> goofygoober2: know if you're on the old or new rosetta?
[12:15:23] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:15:26] *** Quits: torandu (~sean@94.10.125.197) (Ping timeout: 272 seconds)
[12:15:28] <goofygoober2> matsaman: I don't know, how can I check?
[12:15:37] *** Quits: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[12:16:07] <goofygoober2> matsaman: pretty sure its Rosetta 2
[12:16:16] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[12:16:39] *** Joins: mci64 (~x@185.242.190.95)
[12:16:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[12:17:00] *** Joins: wyclif (~wyclif@user/wyclif)
[12:17:49] <matsaman> hrmmm
[12:18:47] <goofygoober2> matsaman: haven't tried installing portaudio with arch x86_64
[12:18:51] <goofygoober2> lemme see what happens
[12:19:07] <matsaman> goofygoober2: you using python from homebrew?
[12:19:15] *** Quits: scoobydoo (~scooby@138.199.59.36) (Changing host)
[12:19:15] *** Joins: scoobydoo (~scooby@user/scoobydoo)
[12:19:56] <goofygoober2> matsaman: no
[12:20:20] *** Joins: manti7 (~manti7@176.10.104.94)
[12:21:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[12:21:48] <matsaman> yeah maybe sounddevice is non-arm only
[12:22:05] <goofygoober2> matsaman: I'm trying `arch -x86_64 /usr/local/bin/brew install portaudio` now
[12:22:14] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[12:22:28] *** Quits: milosz__ (~milosz@user/milosz) (Ping timeout: 272 seconds)
[12:22:35] *** Joins: wyclif (~wyclif@user/wyclif)
[12:22:44] <matsaman> I'm guessing some explicit arch combination will work
[12:23:09] <goofygoober2> yeah, that command installed portaudio just fine
[12:23:21] *** Joins: mci64 (~x@185.242.190.95)
[12:23:34] *** Joins: amahl (~amahl@dsl-jklbng12-54fbca-64.dhcp.inet.fi)
[12:24:09] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 248 seconds)
[12:24:13] <matsaman> goofygoober2: you using a terminal multiplexer?
[12:24:21] *** Joins: torandu (~sean@94.10.125.197)
[12:24:35] <goofygoober2> yeah
[12:24:39] <matsaman> goofygoober2: I think ...
[12:24:46] <matsaman> you should try using python from homebrew
[12:25:00] <matsaman> who knows what nonsense Apple is shipping
[12:25:47] <goofygoober2> matsaman: for sure, I'll give that a try. Only thing is that it needs to comply with the tensorflow init script. (you pass it a path to a python binary)
[12:26:25] <matsaman> should be fine
[12:26:39] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[12:26:45] <goofygoober2> you'd think, but it was very particular before
[12:26:46] *** Quits: bindu (bindu@user/bindu) (Quit: WeeChat 3.2)
[12:27:11] <matsaman> I mean, you should be able to pass it the absolute path to the brew-provided python executable
[12:27:12] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[12:27:45] *** Joins: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at)
[12:27:48] <goofygoober2> gotcha
[12:28:06] *** Joins: wyclif (~wyclif@user/wyclif)
[12:28:59] *** Quits: Metalsutton (~Metalsutt@101.100.153.131) (Ping timeout: 260 seconds)
[12:29:33] *** Joins: leduyquang753 (~leduyquan@user/leduyquang753)
[12:29:35] <goofygoober2> matsaman: aight I'm gonna give your idea to use homebrew python a try.
[12:29:44] <goofygoober2> my efforts came up fruitless
[12:29:56] *** Parts: euouae (~euouae@user/euouae) ()
[12:30:10] *** jpw is now known as jpw_
[12:30:13] *** jpw_ is now known as jpw
[12:30:33] <matsaman> homebrew python, or that's what you're going to try now? =)
[12:31:13] <goofygoober2> matsaman: I'm going to try installing homebrew python and using that now
[12:31:22] *** Joins: gloomy_desktop (~ldorigo@81.161.149.37)
[12:31:23] <goofygoober2> fingers crossed
[12:31:25] <matsaman> yeah
[12:31:35] <matsaman> honestly I think that makes the most sense to do even if you aren't having problems
[12:31:49] *** Joins: EvilDMP (~textual@django/moderator/EvilDMP)
[12:32:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:33:15] *** Joins: LucaTM (~LucaTM@user/lucatm)
[12:33:41] *** Joins: wyclif (~wyclif@user/wyclif)
[12:34:34] *** Joins: wender (~Wender@189.37.64.7)
[12:35:09] *** Quits: very_sneaky (~very_snea@user/very-sneaky/x-7432109) (Ping timeout: 258 seconds)
[12:35:31] *** Quits: nergar (~Nergar@177.225.152.13) (Read error: Connection reset by peer)
[12:35:36] *** Joins: hendursa1 (~weechat@user/hendursaga)
[12:35:49] *** Joins: schumaml1 (~schumaml@p200300e2ef36230094c3553174c24b63.dip0.t-ipconnect.de)
[12:36:25] *** Quits: schumaml (~schumaml@p4ff9173f.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[12:37:06] *** Joins: very_sneaky (~very_snea@user/very-sneaky/x-7432109)
[12:37:12] *** Quits: audiobirb (~audio@2603-8081-1800-00ad-e0dc-3252-de00-d489.res6.spectrum.com) (Ping timeout: 245 seconds)
[12:38:01] *** Quits: computeiro (~Wender@189.37.69.27) (Ping timeout: 248 seconds)
[12:38:40] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[12:38:50] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:38:50] *** Quits: inom (~inom@176.59.119.1) (Remote host closed the connection)
[12:38:52] *** Quits: hendursaga (~weechat@user/hendursaga) (Ping timeout: 244 seconds)
[12:39:02] *** Joins: oz4ga (~tim@93.90.4.233)
[12:39:18] *** Joins: wyclif (~wyclif@user/wyclif)
[12:39:49] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[12:40:29] *** Joins: mci64 (~x@185.242.190.95)
[12:40:38] *** Joins: inom (~inom@176.59.119.1)
[12:41:14] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[12:41:33] *** Joins: VimVim (~VimVim@85.191.5.103)
[12:44:23] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[12:44:39] <goofygoober2> matsaman: so I tried using python from /usr/local/bin/python3.8
[12:44:47] *** Joins: wyclif (~wyclif@user/wyclif)
[12:44:59] <goofygoober2> as the python interpreter for the GitHub tensorflow virtual environment initialization script
[12:45:19] <goofygoober2> Uploaded file: https://uploads.kiwiirc.com/files/bc9374452d950adf32deb0674d7e7549/pasted.txt
[12:45:22] <goofygoober2> but it failed, giving me a similar architecture error:
[12:46:32] *** Parts: lpapp (~lpapp@ec2-15-161-137-233.eu-south-1.compute.amazonaws.com) ()
[12:48:06] <cloudcell> Hello everyone, do you have any ideas how I could speed up this code? https://www.irccloud.com/pastebin/OHDcMfFW/
[12:48:33] <matsaman> goofygoober2: that's a new venv?
[12:49:06] <goofygoober2> matsaman: yeah I even re-downloaded the latest GitHub release to make sure it was fresh
[12:49:43] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[12:49:52] *** Joins: lorenzosu (~lorenzosu@user/lorenzosu)
[12:50:00] <matsaman> bummer
[12:50:08] <matsaman> goofygoober2: I read some other random workarounds here: https://github.com/apple/tensorflow_macos/issues/146
[12:50:20] *** Joins: blindguard (~blindguar@2a02:908:1864:c200::682e)
[12:50:21] *** Joins: wyclif (~wyclif@user/wyclif)
[12:50:33] <matsaman> if you're still having trouble tomorrow I might have time to get an M1 out
[12:50:39] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[12:51:22] *** Joins: nyah (~nyah@51.146.30.113)
[12:51:47] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 245 seconds)
[12:51:47] <goofygoober2> matsaman: thank you dude, you're very kind. your username is super familiar, I think you've helped me out before.
[12:52:07] <goofygoober2> have a nice one
[12:52:11] <matsaman> & you
[12:52:17] <matsaman> there is someone also, I forget who
[12:52:25] <matsaman> in #macosx, who plays with python stuff on an M1
[12:52:50] <goofygoober2> for sure, I'll drop a message there
[12:53:11] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:53:36] *** Joins: greedom (~greedom@2001:16b8:2ef5:8c00:6563:b4f0:1590:f000)
[12:55:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[12:55:26] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[12:55:28] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[12:55:53] *** Joins: wyclif (~wyclif@user/wyclif)
[12:55:55] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[12:55:57] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[12:56:48] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[12:57:17] *** Joins: mci64 (~x@185.242.190.95)
[12:57:45] *** Quits: y1n (~y1n@84-115-65-90.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[12:57:57] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[12:58:22] *** Joins: Enitin (~Enitin@82.102.22.84)
[12:59:24] *** Joins: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk)
[13:00:02] *** Quits: astrocat (~astrocat@112.134.13.251) (Quit: Leaving)
[13:00:31] <goofygoober2> matsaman: thanks for that link, I'm following https://github.com/apple/tensorflow_macos/issues/146#issuecomment-787429443 so far so good
[13:00:44] *** Joins: bomb-on (~bomb-on@194.144.47.113)
[13:00:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[13:01:25] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[13:01:40] *** Joins: wyclif (~wyclif@user/wyclif)
[13:01:40] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[13:01:53] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[13:02:13] *** Joins: ppw (~ppw@user/ppw)
[13:02:18] <ppw> hey
[13:02:51] <ppw> is there a trick I can use in a python script to show output without using print()?
[13:02:52] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Quit: Connection closed for inactivity)
[13:03:41] <goofygoober2> ppw: sys.stdout.write("hello world\n")
[13:04:34] <ppw> goofygoober2: I meant like in a console. You input 2*2 and it prints out the result. Can I achieve the same behavior in a script?
[13:05:01] <goofygoober2> oh ok gotcha
[13:05:07] <goofygoober2> I'm sorry, I don't know
[13:05:11] *** Quits: schumaml1 (~schumaml@p200300e2ef36230094c3553174c24b63.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[13:05:15] *** Joins: Voyager2Spirit (~Voyager2S@176.45.61.68)
[13:05:31] *** Quits: Voyager2Spirit (~Voyager2S@176.45.61.68) (Remote host closed the connection)
[13:06:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:06:44] *** Joins: darksun (~darksun@user/darksun)
[13:07:10] <BSaboia> ppw, why are you avoiding print() ?
[13:07:20] *** Joins: wyclif (~wyclif@user/wyclif)
[13:07:22] <goofygoober2> ppw: maybe a jupyter notebook or some kind of iPython is what you're looking for? Its not exactly what you're asking for
[13:07:56] <ppw> BSaboia:  I guess I should say it. there's a python course that's using jupyter notebooks and I find them a complete hassle, so I just try to do everything in pycharm.
[13:08:15] <ppw> the problem is he just keeps ramping out examples without using print()
[13:08:29] <ppw> jupyter is neat because it always shows the output
[13:08:35] <BSaboia> ppw, you could use the interactive console then I guess
[13:09:28] <jinsun> ppw: pycharm probably has some shortcut to send the current line or the selcted text to repl, in vscode you can do that with jupyter extension and shift+enter
[13:09:29] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[13:09:54] *** Quits: nac (~nac@user/nac) (Ping timeout: 240 seconds)
[13:10:13] <ppw> jinsun: yes, that's what I'm hoping to find, or at least some switch on the interpreter to show all output always when I click 'Run Script'
[13:10:25] *** Quits: cluelessperson (~cluelessp@user/cluelessperson) (Ping timeout: 258 seconds)
[13:10:33] *** Joins: schumaml1 (~schumaml@p4ff91472.dip0.t-ipconnect.de)
[13:10:34] <jinsun> that works like copy paste, so you will get the usual behavior of the repl, that it prints without putting print() around the expression
[13:10:59] *** Joins: y1n (~y1n@84-115-64-190.wifi.dynamic.surfer.at)
[13:11:26] <jinsun> the interpreter has no switch to add print() around each line, because 99.99% of the time you don't want that
[13:11:59] <jinsun> so you'll have to find the pycharm shortcut
[13:12:49] <jinsun> ppw: this maybe, https://stackoverflow.com/a/42953109
[13:13:20] *** Joins: Midjak (~Midjak@82-65-111-221.subs.proxad.net)
[13:13:34] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:13:49] <ppw> jinsun: oof, works like a charm, pun not intended
[13:13:57] <ppw> thanks
[13:14:06] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[13:14:36] *** Quits: goofygoober2 (~goofygoob@23-119-165-251.lightspeed.mtryca.sbcglobal.net) (Quit: Connection closed)
[13:14:38] *** Joins: mci64 (~x@185.242.190.95)
[13:15:05] *** Quits: catbeard (~noise@user/catbeard) (Ping timeout: 252 seconds)
[13:16:03] *** Joins: catbeard (~noise@user/catbeard)
[13:16:50] *** Quits: Quaking_ (~Quaking@2601:245:c500:7fa0:6c62:5c1a:f584:3e6) (Ping timeout: 256 seconds)
[13:16:57] *** Quits: schumaml1 (~schumaml@p4ff91472.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[13:18:38] *** Joins: schumaml1 (~schumaml@p4ff91b64.dip0.t-ipconnect.de)
[13:18:48] *** Quits: nickodd (~nickodd@user/nickodd) (Quit: nickodd)
[13:19:08] *** Joins: nickodd (~nickodd@user/nickodd)
[13:19:40] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 256 seconds)
[13:20:09] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[13:20:36] *** Joins: nac (~nac@user/nac)
[13:20:41] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[13:21:24] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:23:54] *** Quits: ppw (~ppw@user/ppw) (Quit: ppw)
[13:24:30] *** Joins: Adois (~Adoi@user/adoi)
[13:24:44] *** Joins: schumaml2 (~schumaml@p4ff91a73.dip0.t-ipconnect.de)
[13:25:05] *** Quits: schumaml1 (~schumaml@p4ff91b64.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:28:09] *** Quits: Adoi (~Adoi@user/adoi) (Ping timeout: 268 seconds)
[13:28:46] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:29:32] *** Joins: wyclif (~wyclif@user/wyclif)
[13:30:31] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[13:32:28] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[13:32:37] *** Quits: rany (~rany@user/rany) (Ping timeout: 245 seconds)
[13:32:47] *** Quits: cyphase (~cyphase@user/cyphase) (Ping timeout: 252 seconds)
[13:33:04] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:34:27] *** Joins: besnn (~besnn@user/besnn)
[13:34:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:35:06] *** Joins: wyclif (~wyclif@user/wyclif)
[13:36:32] *** Joins: Seiryuu (~Seiryuu@ip174-103-176-143.adsl2.static.versatel.nl)
[13:37:51] *** Joins: rany (~rany@user/rany)
[13:38:02] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[13:38:19] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:39:02] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[13:39:56] *** Joins: tims (~tims@61.69.131.46)
[13:43:31] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8)
[13:43:32] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[13:45:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[13:46:10] *** Joins: wyclif (~wyclif@user/wyclif)
[13:47:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[13:48:09] <cloudcell> ok, let me rephrase my question: I have a list of sets which I need to group based on overlaps among these sets. What is the most efficient way of doing this? I.e. how to detect overlaps and perform a union on each pair of sets most efficiently?
[13:48:15] *** Joins: Enitin (~Enitin@82.102.22.84)
[13:48:35] *** Joins: schumaml3 (~schumaml@p579aaf04.dip0.t-ipconnect.de)
[13:49:08] *** Quits: schumaml2 (~schumaml@p4ff91a73.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[13:49:22] <cloudcell> currently my list contains 13 million sets and it takes 21 hours
[13:49:36] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[13:50:33] *** Leonarbro_ is now known as Leonarbro
[13:51:00] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[13:51:05] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[13:51:43] *** Joins: wyclif (~wyclif@user/wyclif)
[13:52:00] *** Joins: rendar (~rendar@user/rendar)
[13:52:49] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[13:56:25] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[13:56:30] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[13:57:16] *** Joins: wyclif (~wyclif@user/wyclif)
[13:57:56] <hexnewbie> cloudcell: Is what you're doing a known algorithm in some field, e.g. clustering? Try looking up if a named problem matching yours exists, and what's the most efficient algorithm to solve it.
[13:58:27] <hexnewbie> cloudcell: Your description is a bit unspecific, as it does match *any* merging of existing clustering in a imaginary clustering algorithm.
[13:58:28] <cloudcell> thanks hexnewbie ! 'clustering' is the right term for this :)
[13:59:00] <hexnewbie> It also matches clustering of objects where the objects are themselves sets.
[13:59:05] *** Quits: y1n (~y1n@84-115-64-190.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[13:59:12] <cloudcell> the objects are sets
[13:59:15] <hexnewbie> With overlap size instead of distance being used for the clustering, potentially
[13:59:57] <cloudcell> 'clustering' is the right term, i was googling it wrong
[14:02:14] *** Quits: inom (~inom@176.59.119.1) (Remote host closed the connection)
[14:02:15] <hexnewbie> Oh, I can think of one quick optimization that will turn this from O(n²m) into O(nm) should  the number of overlaps (edges) is O(n) itself.
[14:02:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[14:02:48] *** Joins: wyclif (~wyclif@user/wyclif)
[14:02:51] *** Joins: yetoo (~yetoo@user/yetoo)
[14:02:59] <hexnewbie> Create a huge dictionary - defaultdict(list) - mapping each set element to all sets containing it. That's O(nm). Then you can use that for lookups of which sets to compare, and cut that number to... however little is possible
[14:03:00] <cloudcell> what is it?
[14:03:13] *** Joins: Samian (~Sami@174.27.107.153)
[14:03:26] <cloudcell> thanks hexnewbie !
[14:03:40] *** Joins: entuland (~entuland@user/entuland)
[14:04:18] <yetoo> How do I make a variable dictionary key without eval. Eval is dangerous and I'm reading values from a file.
[14:06:28] *** Joins: inom (~inom@176.59.119.1)
[14:06:55] <hexnewbie> yetoo: What is a variable-key dictionary? Alternatively, how do you make one *with* eval?
[14:07:05] <hexnewbie> Er, variable dictionary key
[14:07:35] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[14:07:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[14:08:21] *** Joins: wyclif (~wyclif@user/wyclif)
[14:08:36] <yetoo> hexnewbie: to make a new key in a dictionary you need to dictionaryname["key"] = value. By assigning a value a new key is made. But I get keyvalue error if I just put a variable that's a string where "key" is
[14:10:07] <hexnewbie> yetoo: Can you post an example of what you mean at https://bpa.st/+python ? There is no difference if the key is a variable. It looks up the value of that variable in the dict.
[14:10:44] <hexnewbie> yetoo: And what does eval solve here? Are you trying to parse the quotes?
[14:11:34] <hexnewbie> Is the file you're reading from json?
[14:12:01] <yetoo> hexnewbie: I see from searching that eval or literal_eval is components of the solution. The file is not json.
[14:12:21] *** Joins: y1n (~y1n@84-115-65-36.wifi.dynamic.surfer.at)
[14:12:32] <yetoo> hexnewbie: https://bpa.st/AGAQ
[14:12:55] *** Quits: Betal (~Betal@user/betal) (Quit: WeeChat 3.2)
[14:12:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[14:13:39] <yetoo> hexnewbie: the exact error that I'm getting is KeyError: 'keyname' (on the code im working on i didnt test output of the paste)
[14:13:42] *** Joins: MikZyth (~MikZyth@188.65.242.174)
[14:13:53] *** Joins: wyclif (~wyclif@user/wyclif)
[14:14:30] *** Quits: hafat (~hafat@159.146.87.68) (Ping timeout: 272 seconds)
[14:14:30] <yetoo> let me fix paste so its closer to what I'm working on
[14:14:31] <hexnewbie> yetoo: This works for me: https://bpa.st/DDGQ ; Also, eval() and ast.literal_eval() and json.loads() are not solutions for putting things in a dictionary, they are tools for parsing something in some format
[14:14:46] <yetoo> yes I know
[14:17:16] *** Joins: nomic2 (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8)
[14:17:22] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8) (Remote host closed the connection)
[14:18:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[14:19:25] *** Joins: wyclif (~wyclif@user/wyclif)
[14:20:07] <yetoo> there isnt a way to get python to show column along with width where syntax error is at right
[14:20:56] *** Joins: NIXKnight (~NIXKnight@198.98.57.76)
[14:21:00] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[14:21:11] <hexnewbie> It points to it with ^
[14:21:47] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 245 seconds)
[14:22:24] *** Joins: f8l12 (~f8l12@154.3.42.29)
[14:22:47] <hexnewbie> yetoo: SyntaxError has an offset attribute too
[14:23:30] <yetoo> where do you set it
[14:23:42] <yetoo> or what does it do I should ask
[14:23:49] *** Quits: Samian (~Sami@174.27.107.153) (Quit: Textual IRC Client: www.textualapp.com)
[14:25:00] <hexnewbie> yetoo: https://bpa.st/RJUA
[14:25:24] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 256 seconds)
[14:25:30] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[14:25:39] *** Quits: NIXKnight (~NIXKnight@198.98.57.76) (Quit: ZNC 1.8.2 - https://znc.in)
[14:26:11] <yetoo> so what is offset doing there
[14:26:58] <hexnewbie> column
[14:27:56] *** Quits: Jabberwack (~Jabberwac@user/jabberwack) (Quit: Leaving)
[14:28:10] *** Joins: Jabberwack (~Jabberwac@user/jabberwack)
[14:28:29] <yetoo> does that mean column as in how many tabs to beginning of line inclusive or actual character positions
[14:29:09] <hexnewbie> The default handler prints the ^ at the correct spot
[14:29:19] *** Joins: NIXKnight (~NIXKnight@198.98.57.76)
[14:30:03] *** Joins: noctavian (~noctavian@gateway/tor-sasl/noctavian)
[14:31:18] *** Quits: rexbinary (~rexbinary@user/rexbinary) (Ping timeout: 258 seconds)
[14:31:22] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Ping timeout: 245 seconds)
[14:31:26] <yetoo> because what I'm trying to do is add a value to a key in a dictionary with the value of that key so when I'm calling that key to add, it's not finding the key because it hasn't been created. But, the syntax error didn't point ^ to the erroneous usage
[14:31:41] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Ping timeout: 258 seconds)
[14:32:36] <hexnewbie> That's not a syntax eror
[14:32:56] <yetoo> so exceptions dont get the carrot treatment
[14:33:18] <hexnewbie> Newlines are cheap, use them
[14:33:30] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 272 seconds)
[14:33:30] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[14:33:51] *** Joins: rexbinary (~rexbinary@user/rexbinary)
[14:34:11] *** Quits: jinsun (~quassel@user/jinsun) (Read error: Connection reset by peer)
[14:34:14] *** Joins: mci64 (~x@185.242.190.95)
[14:34:32] *** Joins: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net)
[14:35:28] <catbeard> would something like this work for parallel processes - https://kopy.io/qkEGR#e2RdjnQ3mKxspl
[14:36:10] *** Quits: schumaml3 (~schumaml@p579aaf04.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[14:36:42] *** Quits: NIXKnight (~NIXKnight@198.98.57.76) (Quit: ZNC - https://znc.in)
[14:36:44] <f8l12> does anyone know why i get 4 NaNs off the end of a pandas timeseries with rolling(10, center=True) starting with 11 elements? shouldn't it be 5 NaNs from the end? code: https://dpaste.org/NhwF  and it prints this: https://dpaste.org/YQ1H
[14:37:13] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[14:38:34] *** Joins: schumaml3 (~schumaml@p200300e2ef371100c3527196f4f23fdb.dip0.t-ipconnect.de)
[14:39:08] *** nomic2 is now known as nomic
[14:39:25] *** Quits: dude-x (~textual@pool-173-70-158-124.nwrknj.fios.verizon.net) (Read error: Connection reset by peer)
[14:39:26] <yetoo> whenever I run into a syntax error on fedora 33, python takes a long time to generate it and so it runs for a minute and ctrl+c and ctrl+d don't work. Is there a way to have a timeout or shorten the time when encountering a syntax error
[14:40:03] *** Quits: netsan_ (~netsan@user/netsan) (Remote host closed the connection)
[14:40:37] *** Joins: netsan (~netsan@user/netsan)
[14:41:10] *** Joins: NIXKnight (~NIXKnight@198.98.57.76)
[14:42:39] *** Joins: jinsun (~quassel@user/jinsun)
[14:42:40] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Quit: Leaving)
[14:43:31] <df_data> Anyone know much about mechanical soup and or using it with requests to get past a auth login prompt (either ntml or basic HTTP auth, digest HTTP  I'm unsure)
[14:43:35] <df_data> ?
[14:44:25] *** Quits: death916 (UserNick@user/death916) (Ping timeout: 248 seconds)
[14:51:06] *** Quits: lorogue (~lorogue@5.103.210.179.dhcp.fibianet.dk) (Read error: Connection reset by peer)
[14:52:30] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8) (Quit: Leaving)
[14:52:48] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8)
[14:52:48] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[14:53:02] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[14:53:34] <jinsun> requests alone can do http basic auth easily, https://docs.python-requests.org/en/master/user/authentication/#basic-authentication
[14:54:16] <stemid> hey is there some other library that can handle gnupg encrypted files? python-gnupg works fine but it calls the cli. I am wondering if there is something like pynacl that can handle asymetric key encryption instead of gnupg. I can't find a way to import a gnupg private key in pynacl. only to generate one.
[14:54:23] <jinsun> no idea about mechanical soup though, probably it allows to pass auth parameter to the requests session somehow
[14:58:07] <stemid> https://pynacl.readthedocs.io/en/latest/public/#nacl.public.PrivateKey or maybe private_key (bytes) can be a gnupg key read in binary. I'll give it a shot.
[14:58:49] *** Quits: y1n (~y1n@84-115-65-36.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[14:59:06] *** Joins: Atque (~Atque@user/atque)
[14:59:21] *** Quits: akaWolf (~akaWolf@akawolf.org) (Ping timeout: 248 seconds)
[15:00:14] *** Joins: akaWolf (~akaWolf@akawolf.org)
[15:00:22] <Wulf> stemid: if you want to handle gnupg formats yourself, you need a parser for the format (it's documented). It somewhere contains your private key as bytes, and this you can import in other crypto libs.
[15:01:12] <stemid> oic, thanks Wulf.
[15:02:08] <Wulf> I wonder if there is a gnupg parser package for python already. If not, it could be fun to write.
[15:02:28] *** Joins: philectro (~quassel@2a02:2788:9a4:9f0:71cf:b6b4:bac1:f3ea)
[15:02:32] *** Joins: jmg71 (~root@static-3-122-61-95.ipcom.comunitel.net)
[15:02:38] <stemid> I think it's needed. every result I see is using python-gnupg and all that does is call the gnupg binary. it's about time someone does a python only library.
[15:02:50] <Wulf> stemid: someone? you!
[15:02:52] *** Joins: xrogaan (~xrogaan@user/xrogaan)
[15:03:56] *** Quits: schumaml3 (~schumaml@p200300e2ef371100c3527196f4f23fdb.dip0.t-ipconnect.de) (Ping timeout: 256 seconds)
[15:05:40] <bjs> yetoo: a syntax error taking a long time?  that's odd
[15:05:43] *** Joins: zeden (~zeden@user/zeden)
[15:05:49] *** Joins: schumaml3 (~schumaml@p4ff9116d.dip0.t-ipconnect.de)
[15:05:56] <bjs> yetoo: do you have an example of such an SyntaxError that takes a long time to generate?
[15:11:03] <stemid> Wulf: there are apparently three different formats of keys :D I guess I could focus on the latest one 2.3+ which seems the most readable. but my own key seems to be in the oldest format because it's old...
[15:11:05] *** Quits: schumaml3 (~schumaml@p4ff9116d.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[15:11:14] *** Joins: schumaml3 (~schumaml@p4ff91189.dip0.t-ipconnect.de)
[15:11:50] *** Quits: jmg71 (~root@static-3-122-61-95.ipcom.comunitel.net) (Quit: leaving)
[15:11:53] *** Joins: sazawal (~sazawal@122.161.189.200)
[15:12:21] *** Joins: y1n (~y1n@84-115-64-86.wifi.dynamic.surfer.at)
[15:12:30] <rendar> i'm watching a talk on youtube where the presenter is doing `asyncio.create_task(queue.put(..))` isn't this code wrong since the task created is never awaited?!
[15:13:35] <yetoo> bjs: all of them, it seems to run faster on successive runs because something seems to be cached, but first syntax encounter is slow. It's not slow on python interpreter it's via scrip with #!/usr/bin/python3.9
[15:13:39] <yetoo> at top
[15:14:36] <yetoo> and running script via python script.py
[15:14:44] <bjs> rendar: how do you know it's not awaited?
[15:14:50] <bjs> or at least, I cannot see the rest of the code to tell
[15:15:11] <hexnewbie> yetoo: If it's all of them, there surely has to be a minimal example we can look at.
[15:15:11] <bjs> yetoo: running `python script.py` and you get an error and it's slow?
[15:15:22] <bjs> yetoo: can you share the error so we can see what part of the process Python got to?
[15:15:39] <rendar> bjs: https://imgur.com/G7nDMtl
[15:16:41] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Quit: ZNC - http://znc.sourceforge.net)
[15:16:43] <bjs> rendar: to be fair (1) she appears to be live-coding which is always a case where you have to make some trade-offs for simplicity and (2) there is a `while True` there with an await in it
[15:17:33] <bjs> but yes in a "real" program you probably want to collect the tasks and gather them or await them somewhere, to make sure everything joins up nicely and any errors get reported etc
[15:17:43] <rendar> 1) ok, right, but that not an excuse to publish wrong code 2) oh.. but isn't that an await for sleep()? so the 'await' keyword can also await another thing, and it will "Flush" all the other stuff?
[15:17:56] <bjs> rendar: it's not "wrong" it's just not ideal
[15:18:14] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[15:18:19] <bjs> rendar: await awaits the thing you say to await, suspend execution and come back when the thing you're awaiting is done
[15:18:24] <bjs> when you're suspended other tasks can execute
[15:18:31] <rendar> bjs: hmm, but sometimes i received from python exception/warnings (don't remember which one) in the likes of : Task abc never awaited!
[15:18:32] *** Quits: MikZyth (~MikZyth@188.65.242.174) (Ping timeout: 268 seconds)
[15:19:04] <rendar> so i wonder how she didn't get an exception like that for that create_task() called
[15:19:08] <bjs> rendar: you only get those at the end of the program
[15:19:11] <bjs> and that program never ends
[15:19:24] <rendar> wtf...
[15:19:28] <bjs> rendar: what?
[15:19:52] <rendar> i can't get this.. ok there is a `while True:` loop, but sooner or later, you have to code a gracefully exit..
[15:20:38] <bjs> rendar: why?  lots of programs don't have a "graceful exit",  but sure in a _real_ application you might want to program a "close program" function and then *there* you would want to await everything and clean up
[15:20:49] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Client Quit)
[15:20:57] <bjs> her program doesn't _have_ anywhere to `await` the task even if she wanted to clean up nicely
[15:20:58] *** Joins: dudek (~dudek@185.150.236.112)
[15:21:29] *** Joins: schumaml4 (~schumaml@p4ff9146c.dip0.t-ipconnect.de)
[15:22:16] *** Quits: schumaml3 (~schumaml@p4ff91189.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[15:22:39] *** Joins: luke-jr (~luke-jr@user/luke-jr)
[15:23:18] <bjs> rendar: obviously ideally everytime anyone shows any program it should be 700 lines of perfectly written code that handles all the edge cases and cleans up everything and has proper entry/exit and logging and user validation and everything
[15:23:42] <bjs> but like nobody is ever going to do that, you're always going to see snippets that skip parts
[15:26:03] <rendar> bjs: i see
[15:26:55] <rendar> bjs: so it is legit not to await everything in some exceptional circumstance
[15:27:27] <bjs> rendar: well I mean in a "real" program there should be a place where everything gets joined together and you await in one way or another everything
[15:27:39] <rendar> yes
[15:27:40] <bjs> but you can't fit "real" programs on slides in talks on YouTube
[15:27:45] <bjs> or whatever
[15:27:53] *** Joins: Tier (~tier@37.214.52.86)
[15:29:13] *** Quits: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de) (Ping timeout: 248 seconds)
[15:29:39] *** Quits: mci64 (~x@185.242.190.95) (Ping timeout: 268 seconds)
[15:30:23] *** Quits: catbeard (~noise@user/catbeard) (Ping timeout: 252 seconds)
[15:31:17] *** Joins: catbeard (~noise@user/catbeard)
[15:32:58] <rendar> bjs: ok far enough, now a question: if i call create_task() like that, without awaiting the task there, there is a way to await all pending tasks? e.g. something like asyncio.wait_all() or something?
[15:33:01] *** Quits: cmc (~methos@gateway/tor-sasl/cmc) (Remote host closed the connection)
[15:33:16] <bjs> rendar: https://docs.python.org/3/library/asyncio-task.html#asyncio.all_tasks
[15:33:33] <bjs> but generally you want to be more structured and clean up from the bottom up
[15:33:41] *** Joins: cmc (~methos@gateway/tor-sasl/cmc)
[15:34:07] *** Joins: Brocker (~NoBody@user/brocker)
[15:34:33] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 248 seconds)
[15:34:35] *** Quits: Jabberwack (~Jabberwac@user/jabberwack) (Ping timeout: 268 seconds)
[15:34:40] <rendar> bjs: for 'bottom up' you mean await the task when i call create_task() ?
[15:35:00] *** Quits: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net) (Ping timeout: 272 seconds)
[15:35:05] <bjs> rendar: I mean if you think about a real program you'll have tasks and those tasks will make sub-tasks and those sub-tasks will make their own sub-sub-tasks etc
[15:35:26] <bjs> and you'll generally need to join up all the sub-sub-tasks and do some cleanup before you can join the sub-task itself, and so on
[15:37:33] <rendar> oh, right
[15:38:51] <rendar> bjs: another thing that bugs me: i saw that many async libraries e.g. asyncpg doesn't work with trio, then there are their trio version e.g. triopg, now: in a production project, do yuo think it's better to use asyncio+anyio or trio+anyio? asyncio seems more mature and with the support of anyio i get all the fancy stuff
[15:38:55] *** Joins: thrillgore (~ZugZug@69-225-55-100.lightspeed.nsvltn.sbcglobal.net)
[15:39:06] <rendar> with trio i risk that there isn't the trio<my_program> version of the library...
[15:39:48] *** Joins: Pixi_ (~Pixi@user/pixi)
[15:41:30] <bjs> rendar: well you can use anyio with asyncio I guess, you get a trio-like interface (esp task groups)
[15:41:34] *** Quits: YuGiOhJCJ (~YuGiOhJCJ@gateway/tor-sasl/yugiohjcj) (Quit: YuGiOhJCJ)
[15:41:49] <bjs> you're far more likely to find libraries that support asyncio
[15:41:59] <enrh> If you define something in your package's __init__.py will those things automatically be available in modules within the package?
[15:42:11] <rendar> bjs: yes that's my point
[15:42:31] <bjs> enrh: when you `import package` this line runs `package/__init__.py` and so `package.foo` is the `foo` from the __init__.py
[15:42:35] *** Quits: Pixi (~Pixi@user/pixi) (Ping timeout: 268 seconds)
[15:42:36] <supakeen> Every asynchronous runtime tends to have its own slew of libraries with it; sometimes they interact sometimes you fiddle your own layer with anyio.
[15:42:53] <bjs> enrh: what you mean by "automatically be available" is hard to answer because I don't know what you mean exactly
[15:42:59] *** Joins: MikZyth (~MikZyth@188.65.242.174)
[15:43:16] <enrh> Yeah I think I can just test this out, sorry for the confusion..
[15:43:19] <enrh> Thank you bjs
[15:43:30] <yetoo> bjs: it occurs with a script as simple as this: https://bpa.st/OEHA. Whenever I tried using time command there is no pause and syntax error output appears promptly as expected so I couldn't get you time output of behavior. When I try running command without time after running it with time, it also runs without delays, but if I wait for a bit (or so it seemed) and then run the command (without time) it slows down and pauses before syntax error is printed. (just
[15:43:30] <yetoo> to clarify it slowsdown/takes a long time before outputting syntax error when i didn't use time command in first place)
[15:43:53] <yetoo> *script with error simple as this
[15:44:26] *** Quits: qk1z (~qk1z@193-82-226-146.tpgi.com.au) (Ping timeout: 272 seconds)
[15:45:04] *** Joins: nomic2 (~nomic@host81-157-78-183.range81-157.btcentralplus.com)
[15:45:54] <bjs> yetoo: that is very odd
[15:46:14] <yetoo> fedora has a feature where typing in a command that doesn't exist will cause it to search the package through repositories, although I think I have it disabled. If it's not I don't know why it would be doing it for the script
[15:46:21] *** Joins: besnn (~besnn@user/besnn)
[15:46:51] <supakeen> Does fedora use any programs to automatically create say, bug reports, from failed programs and such?
[15:47:34] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:11df:eb76:94e3:a0e8) (Ping timeout: 256 seconds)
[15:48:15] <yetoo> I disabled that, but by default yes. then again, assuming that feature was turned off, when I type in a series of random letters it takes a while to search for the command so maybe its searching for the python command path I gave it
[15:48:17] *** Joins: schumaml (~schumaml@p4ff91090.dip0.t-ipconnect.de)
[15:48:19] *** nomic2 is now known as nomic
[15:48:39] <bjs> yetoo: if you're saying `python ...` the shebang shouldn't be used no?
[15:50:01] *** Quits: schumaml4 (~schumaml@p4ff9146c.dip0.t-ipconnect.de) (Ping timeout: 248 seconds)
[15:50:24] <yetoo> bjs: correct, but it seems like python ... doesn't matter becausse I just changed permissions on the file so I could run it and utilize the shebang and it took a long time like the other times
[15:50:58] <bjs> yetoo: I just mean that if you say `python script.py` it won't look at the shebang and the (executable) permissions shouldn't matter
[15:51:06] <bjs> but okay
[15:52:41] *** Quits: dhanesh (~Dhanesh@117.223.140.227) (Quit: Leaving)
[15:54:41] *** Quits: netsan (~netsan@user/netsan) (Remote host closed the connection)
[15:54:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[15:55:17] *** Joins: wyclif (~wyclif@user/wyclif)
[15:58:10] <yetoo> bjs: I know, I just had a disconnect of conflicting interests that caused me to forget to utilize the shebang properly
[15:58:34] *** Quits: mattil (~mattilinn@84-253-224-16.bb.dnainternet.fi) (Remote host closed the connection)
[15:59:05] *** Quits: y1n (~y1n@84-115-64-86.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[15:59:14] <yetoo> cognitive dissonance
[16:00:28] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[16:00:46] *** Joins: wyclif (~wyclif@user/wyclif)
[16:01:46] *** Joins: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012)
[16:02:29] *** Joins: thimslugga (~thimslugg@70.18.231.28)
[16:02:55] <yetoo> bjs: but for sure the shebang has nothing to do with it either because I removed it and ran with python ... and it till experiences behavior
[16:04:11] *** Joins: georgios (~georgios@user/georgios)
[16:05:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[16:05:53] *** Quits: FFY00 (~FFY00@archlinux/trusteduser/ffy00) (Remote host closed the connection)
[16:06:12] *** Joins: FFY00 (~FFY00@archlinux/trusteduser/ffy00)
[16:06:15] *** Joins: wyclif (~wyclif@user/wyclif)
[16:06:56] *** Joins: pycurious (~Adium@user/pycurious)
[16:06:59] <supakeen> if it never happens when using `time` it's likely because something in the shell is doing something on an unsuccesful exit code and inspecting $whatever, with time it's time that forks again and time gets inspected
[16:07:02] <supakeen> so far, my crystal orb
[16:08:42] *** Joins: manti7 (~manti7@176.10.104.94)
[16:09:32] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:11:18] *** Joins: y1n (~y1n@84-115-64-86.wifi.dynamic.surfer.at)
[16:12:11] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[16:12:13] *** Joins: ouzel8_ (~ouzel8_@110.148.212.146)
[16:13:09] *** Joins: wyclif (~wyclif@user/wyclif)
[16:14:23] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 252 seconds)
[16:15:34] *** Quits: greedom (~greedom@2001:16b8:2ef5:8c00:6563:b4f0:1590:f000) (Remote host closed the connection)
[16:17:19] *** Quits: PJBoy (~PJBoy@user/pjboy) (Quit: Ping timeout: 252 seconds)
[16:17:44] *** Joins: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl)
[16:18:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[16:19:12] *** Joins: Naan (~naan@user/naan)
[16:19:15] *** Joins: wyclif (~wyclif@user/wyclif)
[16:21:35] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[16:21:52] *** Joins: PJBoy (~PJBoy@user/pjboy)
[16:22:01] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 248 seconds)
[16:24:10] *** Quits: MikZyth (~MikZyth@188.65.242.174) (Quit: WeeChat 3.1)
[16:29:14] *** Joins: igghibu (~igghibu@91.193.5.28)
[16:29:21] *** Quits: igghibu (~igghibu@91.193.5.28) (Client Quit)
[16:30:18] *** Joins: schumaml1 (~schumaml@p200300e2ef37d0007f16c14edc59054a.dip0.t-ipconnect.de)
[16:30:27] *** Joins: roadt (~roadt@36.7.132.7)
[16:30:31] *** Quits: schumaml (~schumaml@p4ff91090.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[16:30:42] *** Quits: djhankb (~djhankb@208.113.164.68) (Remote host closed the connection)
[16:31:18] *** Joins: djhankb (~djhankb@208.113.164.68)
[16:32:21] *** Joins: nyuszika7h (~nyuszika7@lykos/dev/nyuszika7h)
[16:33:34] <nyuszika7h> I'm using langcodes and I can get territory names such as "Brazil", "Latin America", "United Kingdom" from language codes, but is there a pre-existing library that would return those in the form "Brazilian", "Latin American", "British", or would I have to hardcode my own list?
[16:35:16] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[16:36:02] *** Quits: supakeen (~user@python/site-packages/supakeen) (Quit: WeeChat 3.2)
[16:36:31] *** Joins: supakeen (~user@python/site-packages/supakeen)
[16:36:56] *** Quits: schumaml1 (~schumaml@p200300e2ef37d0007f16c14edc59054a.dip0.t-ipconnect.de) (Ping timeout: 252 seconds)
[16:37:03] *** Quits: spithash (~spithash@user/spithash) (Remote host closed the connection)
[16:37:17] *** Joins: spithash (~spithash@user/spithash)
[16:38:11] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[16:40:10] *** Joins: drd (~drd@93-39-151-19.ip76.fastwebnet.it)
[16:41:54] *** Joins: schumaml1 (~schumaml@p200300e2ef37dd0034e73cdd5b18e986.dip0.t-ipconnect.de)
[16:44:03] *** Quits: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net) (Quit: The Lounge - https://thelounge.chat)
[16:44:08] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[16:44:22] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[16:44:52] *** Joins: dev4449 (~dev4449@172.98.71.199)
[16:46:34] *** Joins: shokohsc (~shokohsc@161.88.195.77.rev.sfr.net)
[16:46:56] *** Joins: trace1918 (~trace1918@94-137-125-182.customers.ownit.se)
[16:47:37] *** Joins: veek (~veek@223.226.103.200)
[16:48:16] *** Quits: philectro (~quassel@2a02:2788:9a4:9f0:71cf:b6b4:bac1:f3ea) (Remote host closed the connection)
[16:48:49] *** Quits: veek (~veek@223.226.103.200) (Client Quit)
[16:49:00] *** Quits: joshcom (~joshcom@2600:8800:a706:2b00:5be3:4224:17a3:9012) (Quit: Leaving)
[16:53:32] *** Quits: schumaml1 (~schumaml@p200300e2ef37dd0034e73cdd5b18e986.dip0.t-ipconnect.de) (Ping timeout: 272 seconds)
[16:55:03] *** dob1_ is now known as dob1
[16:55:04] *** Quits: stoiclunch (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[16:55:14] *** Joins: stoiclunch (~stoiclunc@user/stoiclunchbox)
[16:55:40] *** Joins: stoiclun1 (~stoiclunc@user/stoiclunchbox)
[16:55:43] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[16:56:07] *** Joins: schumaml1 (~schumaml@p57b7e8ce.dip0.t-ipconnect.de)
[16:56:23] *** Quits: stoiclunch (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[16:56:39] *** Joins: stoiclunch (~stoiclunc@user/stoiclunchbox)
[16:56:42] *** Quits: stoiclun1 (~stoiclunc@user/stoiclunchbox) (Read error: Connection reset by peer)
[16:56:45] *** Joins: demo-test (~b0urne@36.57.134.158)
[16:57:11] *** Joins: stoiclun1 (~stoiclunc@user/stoiclunchbox)
[16:57:40] *** stoiclun1 is now known as stoiclunchbox
[16:57:58] *** Quits: stoiclunch (~stoiclunc@user/stoiclunchbox) (Client Quit)
[16:57:58] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (K-Lined)
[16:58:49] *** Quits: y1n (~y1n@84-115-64-86.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[17:02:12] *** Joins: bandit_za (~bandit_za@2c0f:ed28:b016:7760::1ed)
[17:03:19] *** Quits: matsaman (~matsaman@user/matsaman) (Quit: leaving)
[17:03:27] *** Quits: zeden (~zeden@user/zeden) (Quit: WeeChat 3.0.1)
[17:03:28] *** Joins: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f)
[17:04:01] *** Quits: me-sudoer-dentne (~me-sudoer@2402:e280:3d25:53d:14e4:a16a:66ca:906f) (Remote host closed the connection)
[17:04:07] *** Joins: timdiels (~user@78-22-205-207.access.telenet.be)
[17:05:51] <timdiels> Hi, how do you run and wait for a coroutine when inside a sync, not async, function? There is a running loop on the thread.
[17:06:46] <gloomy> Hey :) If I have an iterator that yields tuples `(a,b)`, what's the simplest way to get two iterators that yield single elements `a` and `b`?
[17:06:50] *** Joins: SamuelMarks (~samuel@user/samuelmarks)
[17:07:39] <bandit_za> gloomy: what are you trying to achieve?
[17:08:23] *** Joins: plastico (~plastico@neomutt/plastico)
[17:08:48] *** Quits: devcpu (~rusty@108.162.160.184) (Quit: leaving)
[17:09:16] *** Joins: devcpu (~rusty@108.162.160.184)
[17:09:33] *** Quits: drd (~drd@93-39-151-19.ip76.fastwebnet.it) (Ping timeout: 268 seconds)
[17:09:35] <gloomy> I guess I could do `it_1, it_2 = itertools.tee(tuple_iterator); iterator_a = (a for a, b in it_1); iterator_b = (b for a, b in it_2)`
[17:09:46] <SamuelMarks> hi
[17:09:53] <gloomy> But it feels like there should be a more elegant way :p
[17:10:49] <gloomy> bandit_za: what's unclear in my question?
[17:12:16] <timdiels> gloomy: If you read it_1 til the end then it will load it_2 entirely into memory.
[17:12:31] *** Joins: y1n (~y1n@84-115-64-21.wifi.dynamic.surfer.at)
[17:12:57] <gloomy> timdiels: yup, but can't think of a better way to do it....
[17:13:40] <gloomy> (and I guess there isn't - if I want to progress in it_1 I have no choice but to get the second element as well)
[17:14:08] <SamuelMarks> Why does `pip install` have such a different directory structure to a manual `sys.path.insert(0, mod_path)`? - My setup.py just has `packages=find_packages(),package_dir={package_name: package_name}` but nothing else fancy
[17:14:09] <rendar> bjs: apparently, tasks *must not* be awaited: if the program exists before any task awaiting, it simply cancels the task, is that right?
[17:14:18] <SamuelMarks> Yhg1s - https://dpaste.org/zJrz
[17:14:25] <rendar> must not = you can await them or even not
[17:15:10] <timdiels> gloomy: https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.unzip
[17:15:42] <gloomy> beautiful, thanks :)
[17:16:27] <gloomy> looks like it does the same thing as me under the hood, but at least it looks neat :-)
[17:17:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:17:57] *** Joins: wyclif (~wyclif@user/wyclif)
[17:18:35] *** Joins: ice9 (~ice9@user/ice9)
[17:19:06] <bjs> rendar: that doesn't sound like "must"
[17:19:26] <bjs> rendar: but like I said earlier in real program it's almost never correct, because you will have sub-sub-tasks that need to finish before the sub-task can finish etc
[17:19:33] <rendar> yes
[17:20:43] <SamuelMarks> bjs Any idea how to replicate a `pip install` without using `pip` for my test mocking purposes? - 3.7 and 3.10 output, showing comparison in layout of `sys.path` added variant to one installed with `pip`: https://dpaste.org/Ye7k
[17:20:45] <bjs> timdiels: start an event loop and run the async thing inside that event loop.  But this will block other async things
[17:21:05] <bjs> SamuelMarks: you mentioned something about this mocking stuff before but I didn't understand at all
[17:21:16] <SamuelMarks> Here you can see an error related to file existence from the non pip installed version - https://github.com/offscale/cdd-python/runs/3321736242?check_suite_focus=true#step:5:535
[17:21:18] <bjs> why are you trying to mock away pip install?
[17:21:28] <SamuelMarks> bjs - To speed up my tests
[17:21:54] <timdiels> gloomy: I had to do a double take on its claim that it can do it without reading iterable into memory but I guess what they mean is that with zip(*iterable) even so much as reading the first elem of either iterable will cause it to evaluate the whole thing as zip returns tuples, not iterables. In the end unless you alternate between the 2 iterables it probably won't make a huge difference except for
[17:22:00] <timdiels> constructing intermediate tuples I suppose.
[17:22:10] <SamuelMarks> bjs - I have a test which creates a new python package, on disk, then installs it, so that the mock can properly test whether it can use an installed module to generate a set of interfaces from it (using `improt ast`)
[17:22:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[17:23:00] <bjs> SamuelMarks: I mean if the test is "Can I use this module on a `pip install`d thing?"  then probably the test should *actually* use pip to install it
[17:23:26] *** Joins: wyclif (~wyclif@user/wyclif)
[17:23:30] <SamuelMarks> bjs - But it's so slow. Considering it doesn't have any dependencies there must be a better way
[17:24:05] <SamuelMarks> See https://github.com/offscale/cdd-python/blob/235f564/cdd/tests/test_exmod.py#L46
[17:24:09] <bjs> SamuelMarks: how many of your tests do this? I mean I might expect you have a couple of tests that actually try do something with the real pip and real pip isn't that slow, especially if the module is actually cached
[17:24:30] <SamuelMarks> bjs - Each test generates its own package and module and installs it and cleans it up
[17:24:37] <bjs> *every* test?
[17:24:53] <SamuelMarks> (just in that file though, so only 6 of my >200 tests)
[17:25:02] *** Quits: devcpu (~rusty@108.162.160.184) (Quit: leaving)
[17:25:09] <SamuelMarks> *249 tests
[17:25:16] <timdiels> bjs: that code used to run synchronous so I guess starting its own event loop would be equivalent to what I had before, sounds good.
[17:25:21] * SamuelMarks has 100% test coverage
[17:26:41] <SamuelMarks> profiling, I have 79% of my test time taken up by posix.waitpid
[17:27:10] *** Quits: Pyt001 (~Pyt001@2402:e280:3d22:227:d936:8b77:a34a:6b57) (Quit: Client closed)
[17:27:18] <bjs> SamuelMarks: I mean you can make a venv and install the thing into it and then future test runs can just copy the venv that was made before
[17:27:41] <bjs> but if you actually want to do anything that looks like a real "pip install" , yeah it's going to be slow
[17:27:44] <SamuelMarks> bjs - No I need it to be a clean environment
[17:27:47] *** Joins: thiras (~thiras@user/thiras)
[17:27:50] <bjs> SamuelMarks: a venv is a clean environment?
[17:28:01] <SamuelMarks> yeah, and since new versions of pip don't want you to use anything other than subprocess to access it
[17:28:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[17:28:08] <SamuelMarks> (I used to construct an INstallCommand)
[17:28:10] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
[17:28:55] *** Joins: wyclif (~wyclif@user/wyclif)
[17:28:58] <SamuelMarks> Like I did back in 2014 https://stackoverflow.com/a/21361820
[17:29:50] <timdiels> bjs: I tried asyncio.run but it won't let me start another loop "asyncio.run() cannot be called from a running event loop"
[17:30:27] <bjs> timdiels: this synchronous function is running from inside another async one?
[17:30:36] *** Joins: heco (~redrum@user/redrum88)
[17:31:18] <graingert[m]> timdiels: Use await instead of asyncio.run
[17:31:35] *** Joins: schumaml2 (~schumaml@p4ff91c2f.dip0.t-ipconnect.de)
[17:31:53] <bjs> timdiels: if you have async functions "above" you it's probably easier just to make this one async too then use `await ...`
[17:31:55] <timdiels> bjs: asyncio.get_running_loop() returns a loop so I think so. My code is a module, a bokeh app, which gets 'called' by bokeh server.
[17:32:08] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[17:32:41] *** Joins: MaximB (~MaximB@87.68.164.26)
[17:33:06] <timdiels> So I can't turn my code into async, the caller code is third party
[17:33:06] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[17:33:12] <timdiels> *async def
[17:33:35] *** Quits: bigRoo (~user@73.181.dsl.syd.iprimus.net.au) (Read error: Connection reset by peer)
[17:33:35] *** Quits: schumaml1 (~schumaml@p57b7e8ce.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:33:48] <MaximB> Hi, I have a question regarding this small script:  https://paste.debian.net/1207661/  ,why it inserts the number "1" inside the list? why v=1?
[17:34:01] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Ping timeout: 248 seconds)
[17:34:57] <timdiels> Basically this is what I have to work with https://docs.bokeh.org/en/latest/docs/user_guide/server.html#single-module-format
[17:35:02] <bjs> MaximB: v is 0, 1 then 2
[17:35:20] *** Joins: Enitin (~Enitin@82.102.22.84)
[17:35:30] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[17:35:36] <MaximB> bjs
[17:35:39] <bjs> MaximB
[17:35:49] <MaximB> but it doesn't seems to insert the number 0 at all
[17:35:59] <bjs> MaximB: you don't insert 0
[17:36:16] <grym> MaximB: you tell it to insert 1, three times.
[17:36:29] <bjs> MaximB: on the first iteration, v=0 then on the next v=1 and then on the next v=2.  You're not inserting v, you're inserting lst[v]. But you're inserting lst[v] into lst
[17:36:41] *** Joins: sebastianos (~sebastian@user/sebastianos)
[17:36:55] <MaximB> but how\why if v is 0,1,2 it only inserts 1?
[17:37:02] <bjs> MaximB: you're not inserting v
[17:37:16] <SamuelMarks> bjs - Any further ideas on my end?
[17:37:17] *** Quits: schumaml2 (~schumaml@p4ff91c2f.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[17:37:20] <bjs> MaximB: you're inserting lst[v]
[17:37:34] <bjs> SamuelMarks: I really have no idea what you're trying to do or why your test seems to be running `pip install .`
[17:37:49] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[17:38:01] <MaximB> but why lst[v] = 1 ?
[17:38:05] <bjs> MaximB: on the first iteration lst=[1,2,3], v=0, lst[v]=lst[0]=1
[17:38:07] <bjs> so you insert 1
[17:38:27] <bjs> (and now lst=[1,1,2,3])
[17:38:53] *** Joins: schumaml2 (~schumaml@p579aa692.dip0.t-ipconnect.de)
[17:39:54] *** Quits: rany (~rany@user/rany) (Ping timeout: 258 seconds)
[17:40:15] <SamuelMarks> bjs - My mock generates an entire package, setup.py, __init__.py, and everything else. Then I install it and test against it
[17:40:32] *** Joins: Ivyy (~Ivyy@2001:a61:135b:5001:2f7:1249:bb6d:2b80)
[17:41:12] * SamuelMarks is currently debugging a `OSError: could not get source code` which only occurs when all tests are run concurrently, and succeeds when `test_exmod_whitelist` runs independently.
[17:41:29] <bjs> SamuelMarks: say you do manage to remove pip install and make it fast,  wouldn't that mean you have no tests that actually test it works with pip?
[17:41:32] <SamuelMarks> So I was thinking that `pip` might be doing something weird so lets install it manually
[17:41:34] <bjs> which is after all, the thing you want to test here?
[17:41:45] <bjs> SamuelMarks: oh it's not the slowness you're worried about but you were getting an error?
[17:41:54] <SamuelMarks> the slowness is an afterthought
[17:42:01] <SamuelMarks> but yeah it'd be nice if my tests were fast (again)
[17:42:11] *** Joins: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks)
[17:42:23] *** Joins: stoiclunchbox (~stoiclunc@user/stoiclunchbox)
[17:42:33] <SamuelMarks> Removing `pip` from the mock bootstrap means it'll be easier to find these bugs (hopefully) and fix them
[17:43:21] <bjs> SamuelMarks: but if the point of the test is to test whether your tool/library works with some `pip install`d package then doesn't removing `pip` from that process sort of... make the test a bit pointless?
[17:43:33] <bjs> I mean it'd be faster yeah but would it actually test the thing you wanted?
[17:43:35] <az> hi, why in line 21 length is not set as an int? I have to strictly set it in each mention https://dpaste.org/H4Ro#L
[17:43:55] <SamuelMarks> bjs - Not really, the test is more checking if `import foo` works, such that `expose_module --name='foo'` works
[17:44:01] <bjs> az: well type(int(length)) is always going to be int even if length isn't an int
[17:44:04] <bjs> because you int(...) it
[17:44:05] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 268 seconds)
[17:45:09] <az> why it's not int by default?
[17:45:11] *** Quits: c10l (~c10l@89.34.167.207) (Read error: Connection reset by peer)
[17:45:53] *** Joins: slowButPresent (~slowButPr@user/slowbutpresent)
[17:45:55] <az> like it lost it's integer type when put inside a function
[17:46:47] <grym> az: type hints are not used by the interpreter
[17:46:54] <bjs> az: "by default"?  I mean the default 8 there will be an int, but that doesn't stop cherrypy passing something that isn't an int to it
[17:47:08] <grym> (and "8" is not 8)
[17:47:11] *** Quits: schumaml2 (~schumaml@p579aa692.dip0.t-ipconnect.de) (Ping timeout: 258 seconds)
[17:47:21] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[17:47:28] <az> so it's cherrypy thing
[17:47:29] <grym> az: on line 14, what if you change value="8" to value=8
[17:47:29] <bjs> az: e.g. from the user/url, it'll probably come as a string.
[17:47:35] *** Joins: c10l (~c10l@89.34.167.207)
[17:47:40] <grym> az: ...ignore that last from me
[17:47:46] <grym> (i think)
[17:48:16] *** Quits: thiras (~thiras@user/thiras) (Remote host closed the connection)
[17:48:19] *** Joins: teut (~teut@182.69.87.27)
[17:48:20] <az> bjs, got it thanks
[17:48:26] <bjs> az: yes I'm guessing cherrypy just passes everything as strings directly from the user
[17:48:28] <bjs> without converting
[17:49:15] *** Joins: pretty_dumm_guy (trottel@gateway/vpn/protonvpn/prettydummguy/x-88029655)
[17:49:40] *** Joins: pragma- (~chaos@user/pragmatic-chaos)
[17:49:53] <az> I set the limit to 20 as I get errors if I put numbers higher than 25. what is limiting the generation of longer random hex?
[17:50:17] *** Joins: georgios (~georgios@user/georgios)
[17:50:20] <az> ValueError: Sample larger than population or is negative
[17:50:29] <teut> https://wiki.python.org/moin/TimeComplexity how is inserting in a dict  O(1)?
[17:50:57] <teut> you always add the hash at the end of the list?
[17:50:57] *** Joins: thiras (~thiras@user/thiras)
[17:51:06] <teut> array*
[17:51:23] <az> I guess this answer my last question https://stackoverflow.com/questions/20861497/sample-larger-than-population-in-random-sample-python
[17:51:24] <bjs> az: you can't take a sample of 25 hex characters as there are only 22 of them
[17:51:30] <bjs> az: 0-9a-zA-Z
[17:51:40] <az> yeah
[17:52:00] <bjs> teut: no that is not how a dict works
[17:52:13] <bjs> teut: dicts are hashtables, you use the hash() to figure out where it goes in th table
[17:53:14] *** Joins: fassl (~fassl@2a02:8388:1987:9380:c4ee:81c5:625a:a215)
[17:53:40] <teut> and deletion says O(1) too.  Once you delete afaik , you have to insert all keys back
[17:53:47] <bjs> teut: what do you mean?
[17:54:17] <bjs> teut: again dicts aren't just an array you have to search through, they're hashtables. The hash() tells you where in the table the thing is (is the basic idea)
[17:55:02] <teut> https://benhoyt.com/writings/hash-table-in-c/  like this?
[17:55:20] <teut> the hash is a math function
[17:55:28] *** Joins: schumaml2 (~schumaml@p57b7eaea.dip0.t-ipconnect.de)
[17:55:38] <bjs> teut: for example, for me hash("teut") is 3214539008046166137, if I had a dict with 32 slots, then I know the value is at index 25 (since 3214539008046166137 % 32 == 25).
[17:55:43] <teut> so the key once passes the hash function and tells the array location
[17:56:01] <bjs> So I can just go straight there and if it's empty I can just put "teut" there immediately.
[17:56:10] <bjs> And then to delete I do the same, except if it's got "teut" there I just remove it.
[17:56:16] <teut> and what if the number of keys are more than 32?
[17:56:22] <bjs> teut: then you need a bigger table
[17:56:35] <teut> sure, and that's the usual case
[17:57:00] <bjs> teut: well, Python does it automatically for you. If you try insert more than the table has slots it makes a bigger table for you.
[17:57:01] *** Joins: lilibyte (lilibyte@gateway/vpn/protonvpn/lilibyte)
[17:57:43] <teut> and there it will have to reinsert everything
[17:57:50] <bjs> teut: correct.
[17:58:00] *** Joins: veracioux (~user@5.43.87.160)
[17:58:08] <teut> or maybe leave a pointer and make another array of size  32
[17:58:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[17:58:24] <bjs> teut: Python makes a new table and copies over
[17:59:04] *** Joins: wyclif (~wyclif@user/wyclif)
[17:59:05] *** Quits: y1n (~y1n@84-115-64-21.wifi.dynamic.surfer.at) (Ping timeout: 248 seconds)
[17:59:05] <bjs> (e.g. doubling the amount of space each time you run over)
[17:59:12] <teut> or maybe leave a pointer and make another array of size  32     <-   on high level view this looks possible, is it impractical  implementing it?
[17:59:38] <bjs> teut: yes because where do you store the pointers? and what happens if you run out of slots for the pointers
[17:59:40] *** Parts: veracioux (~user@5.43.87.160) ()
[17:59:43] <bjs> you get the same problem
[17:59:45] <teut> yes this doubling thing happens in c++ vectors too
[17:59:47] *** Joins: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net)
[17:59:58] *** Joins: rany (~rany@user/rany)
[18:00:29] <teut> bjs use a malloc, and dynamically keep appending pointers to it
[18:00:32] *** Quits: hyper_dave (~hyper_dav@197.156.107.121) (Quit: WeeChat 3.2)
[18:00:43] *** Joins: extropiator (~extropiat@192.252.220.38)
[18:00:44] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 256 seconds)
[18:01:13] <teut> run out of slots for the pointers?   you can run out of slots for the dict too
[18:01:39] *** Joins: hyper_dave (~hyper_dav@197.156.107.121)
[18:02:07] <bjs> teut: yes that's the point, just storing pointers to tables doesn't save you from having to re-allocate bigger arrays
[18:02:14] <bjs> because you'd still just run out of space to store the pointers
[18:02:34] <bjs> you may as well just re-size the actual hashtable and not have the extra pointer indirection at all since you still have to do re-sizing
[18:02:45] *** Joins: i0e (~is0ke3@user/is0ke3)
[18:03:48] *** Quits: SamuelMarks (~samuel@user/samuelmarks) (Ping timeout: 268 seconds)
[18:04:22] <teut> yes saves from  a lot of complexity
[18:04:58] *** Joins: veracioux (~user@5.43.87.160)
[18:05:05] *** Joins: Pyt001 (~Pyt001@2402:e280:3d22:227:993d:cd8a:41a0:5875)
[18:05:10] <bjs> teut: btw I need to make clear, I've over-simplified how Python's hashtables work quite a lot here, there's a lot of complexity to them (and hashtables in general)...
[18:06:11] *** Joins: MDP87900 (~AMP9190@189.34.140.159)
[18:06:11] <teut> yes, that s good enough to tell in an interview which is the requirement
[18:06:51] <bjs> teut: well depends on the interview and how much detail they want you to know about hashtables in general, or generic "dictionary" ADTs or specifically *Python*'s dict type
[18:07:23] <teut> mostly I would have to compute the time complexity of an algo
[18:07:58] <bjs> teut: no interviewer would ask you to "compute the time complexity of dict insert" because to do it properly is pretty advanced and difficult
[18:08:08] <teut> https://bpa.st/YQ5Q#1L9
[18:08:36] <teut> for this what would be the time complexity?   O(numCourses *  ?)
[18:08:47] <bjs> teut: are you asking or saying?
[18:08:52] <teut> asking
[18:08:58] <bjs> teut: what do you think it is? and why?
[18:09:11] <teut> just because if someone asks
[18:09:17] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[18:09:17] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 245 seconds)
[18:09:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[18:09:22] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[18:09:28] <bjs> teut: do you know how to actually calculate the O() ?
[18:09:39] <teut> by masters theorem
[18:09:42] <bjs> teut: no
[18:09:45] <teut> i know math too
[18:09:55] <teut> recurrence relation solving
[18:09:55] <bjs> teut: I'm asking, do you actually *know* how to find the O() for this code?
[18:10:02] *** Joins: wyclif (~wyclif@user/wyclif)
[18:10:10] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:10:17] <teut> O(numCourses *(len(s)  *( ))
[18:10:25] <bjs> like without guessing or trying to remember algorithms and patterns, if I got you a whiteboard and told you to calculate it would you be able to?
[18:10:27] <bjs> figure it out I mean
[18:10:34] <bjs> teut: that sounds like a guess
[18:10:38] *** Joins: akk (~akk@75.161.157.26)
[18:10:40] <teut> why so?
[18:10:48] <teut> for loop , time while loop
[18:10:54] *** Joins: Nanobot567 (~Nanobot56@108-195-7-3.lightspeed.nsvltn.sbcglobal.net)
[18:11:04] <teut> times  what's inside , i.e, the pop and all
[18:11:09] <bjs> teut: I'm going to guess the answer then is "no" you don't know how to calculate these time complexities?
[18:11:21] *** Quits: dev4449 (~dev4449@172.98.71.199) (Quit: Client closed)
[18:11:23] *** Joins: schumaml3 (~schumaml@p200300e2ef3885002dfafc419dcbc474.dip0.t-ipconnect.de)
[18:12:54] *** Joins: y1n (~y1n@84-115-65-127.wifi.dynamic.surfer.at)
[18:13:03] *** Quits: schumaml2 (~schumaml@p57b7eaea.dip0.t-ipconnect.de) (Ping timeout: 268 seconds)
[18:15:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[18:16:01] <teut> I thing I knew till yet and now even that I dont know
[18:16:26] *** Joins: wyclif (~wyclif@user/wyclif)
[18:16:44] *** Quits: Strom (strom@fedora/strom) ()
[18:16:47] <teut> how do you calculate it?
[18:16:49] *** Joins: audiobirb (~audio@2603-8081-1800-00ad-c226-09f2-20c1-b118.res6.spectrum.com)
[18:16:57] <bjs> teut: work out how many times each line can execute (for example) then add them up
[18:17:16] <bjs> teut: the hardest line to work out is how many times `temp = s.pop()` can execute.
[18:17:37] <teut> I used to convert the code to summations
[18:18:12] <teut> then just use math to solve the summations, but thats not how it works
[18:18:17] *** Joins: Strom (strom@fedora/strom)
[18:18:20] <bjs> teut: why is that "not how it works"?
[18:18:34] <teut> that way you require time
[18:18:40] <bjs> teut: require time?
[18:19:11] <bjs> teut: oh you mean it takes *you* time to do the adding up?
[18:19:12] <teut> you may have forgotten how to solve the math and the interviewer wont care.
[18:19:23] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[18:19:33] <bjs> teut: if the interviewer asks you what the complexity of *this* code is they don't care anyway
[18:19:49] <bjs> teut: how many times can this code go around that `while len(s)` loop?
[18:19:53] *** Joins: PantelicGR (~PantelicG@user/pantelicgr)
[18:20:23] *** Joins: sharktamer (~sharktame@cpc91312-watf11-2-0-cust697.15-2.cable.virginm.net)
[18:20:25] <teut> Uploaded file: https://uploads.kiwiirc.com/files/3a718d442e9652cdce8db259d015a180/image.png
[18:20:56] <teut> no like this is one question asked in amazin's interview
[18:21:00] <teut> amazon*
[18:21:40] <teut> now in 45 mins interview and 2 questions are usually asked like this
[18:21:41] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[18:21:58] *** Joins: wyclif (~wyclif@user/wyclif)
[18:21:58] <teut> and then space time complexity calc
[18:22:07] <bjs> teut: I mean you're avoiding your own question about O() now,  if you want to work out the O() for this you need to know how many times that while loop can loop
[18:22:16] <bjs> teut: do you know how many times? can you see/work it out?
[18:22:46] <teut> no no , O(n) is upper bound , not exact
[18:22:50] <bjs> teut: I mean in an interview you can't rely on just remembering/recognising things, and you can't stop and say "just let me ask stackoverflow for the answer". You're gonna have to work it out
[18:22:52] <bjs> teut: what is n?
[18:23:34] <teut> nothing generally people say O()  as O(n)
[18:23:43] <bjs> teut: what?
[18:23:51] <teut> terminology abuse
[18:23:56] <bjs> teut: what are you talking about
[18:24:19] *** Quits: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net) (Quit: Client closed)
[18:24:22] *** Joins: Vornicus (~Vornicus@2603-8000-5d07-7ef0-6860-c946-993e-2148.res6.spectrum.com)
[18:24:32] *** Joins: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net)
[18:24:50] <teut> I meant O()  is taken as upper bound
[18:25:01] <bjs> teut: yes I know
[18:25:01] <teut> ignore n
[18:25:06] <bjs> ignore n?
[18:25:08] <bjs> no what
[18:25:13] <bjs> teut: what are you talking about?
[18:25:38] <teut> ignore   n  here  ->  no no , O(n) is upper bound , not exact
[18:25:46] <bjs> teut: why would I ignore n?
[18:25:50] <bjs> you're making no sense
[18:25:54] <bjs> You didn't even define what n was
[18:26:13] *** Quits: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net) (Client Quit)
[18:26:19] <teut> thats what I m saying  O(n)   is an abuse of terminology
[18:26:28] *** Joins: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net)
[18:26:29] *** Quits: foobaz21267 (~foobaz212@75.188.159.143.dyn.plus.net) (Write error: Broken pipe)
[18:26:29] <bjs> teut: it's not an abuse of terminology, it's only an abuse if you're abusing it
[18:26:32] <bjs> by not defining n
[18:26:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[18:26:57] <teut> its commonly heard so bad habits develop
[18:27:01] <bjs> teut: you're doing all this to avoid actually doing the tiny amount of thinking you actually need to do to solve the problem here
[18:27:23] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[18:27:38] <bjs> teut: there is that "while len(s):" loop, to know the O(whatever) of this algorithm you need to know how many times (yes, an upper bound for the worst-case) it can loop
[18:27:44] *** Joins: wyclif (~wyclif@user/wyclif)
[18:28:09] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[18:28:39] <teut> O(numCouses *  len(s) * O(1))    that would be it
[18:28:53] <bjs> teut: that's not an answer to the question I asked, I asked how many times can it loo
[18:28:55] <bjs> loop*
[18:28:57] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 248 seconds)
[18:28:59] *** lukedashjr is now known as luke-jr
[18:29:08] <teut> len(s) times
[18:29:09] *** Joins: besnn (~besnn@user/besnn)
[18:29:09] *** Joins: GreenResponse (~tomek@r-45-155-148-237.gpon.bialnet.pl)
[18:29:19] <bjs> teut: you can't use s there, because it's not an input
[18:30:03] <bjs> teut: say I give you 1000 courses and some prerequesites how many times can that loop loop for?
[18:30:10] <teut> oh s is dynamically updating
[18:30:15] <bjs> like an actual _number_
[18:30:28] *** Quits: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp) (Quit: shgvbvri)
[18:30:42] <bjs> (for a particular "i")
[18:31:06] <teut> thinking
[18:31:15] <bjs> is it like 1000? is it 1001? is it 10,000? 9,999? what
[18:32:01] <teut> 1000 times for loop
[18:32:03] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[18:32:09] <teut> then we cant decide
[18:32:48] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[18:32:48] <bjs> teut: not the for loop, the while loop
[18:32:59] *** Quits: jazzy (~jaziz@2600:380:466e:dec7:a848:25a6:1ecc:8634) (Ping timeout: 252 seconds)
[18:33:10] <teut> yes , I should have assumed that
[18:33:14] *** Joins: wyclif (~wyclif@user/wyclif)
[18:33:53] *** Parts: veracioux (~user@5.43.87.160) (ERC (IRC client for Emacs 27.2))
[18:33:57] <bjs> teut: okay so each iteration of the while loop does 1 pop(), so it can only go around as many times as there are things that are put in yes?
[18:34:07] <teut> there is if else too , so amortised can be only calculated
[18:34:12] <bjs> teut: forget all that
[18:34:31] *** Quits: extropiator (~extropiat@192.252.220.38) (Ping timeout: 246 seconds)
[18:34:45] <bjs> teut: you're too focused on the fancy maths and you've just forgot to actually look at the while loop and see what it's doing and just *count* the number of times it can do things
[18:35:12] <teut> but s is expanding
[18:35:17] <bjs> teut: yes
[18:35:19] <teut> and poping
[18:35:19] *** Joins: stealth_ (~stelath_@216-197-160-97.regn.static.sasknet.sk.ca)
[18:35:19] <bjs> can it expand forever?
[18:35:26] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 272 seconds)
[18:35:34] <teut> and its not append but extend
[18:35:54] *** Joins: monkey_ (~user@190.104.116.134)
[18:36:11] <teut> so  O(number of requirements ) shall be a part of time complexity
[18:36:21] <bjs> teut: that sounds like a guess
[18:36:35] <teut>                     s.extend(m[temp])
[18:36:44] <bjs> teut: look you're going to have to stop guessing and worrying about the facny O() maths and actually just look at the while loop and do some thinking and basic counting
[18:37:02] <bjs> teut: okay so that `while len(s)` does it always stop?
[18:37:29] <teut> it may  , atleast it should because the solution passed
[18:37:36] <bjs> teut: "may" ?
[18:37:45] <stealth_> even if something calculates in math, most likely has nothing to do with real world
[18:37:55] <bjs> teut: you don't even sound sure that it should _always_ end,  that just implies you're not reading reading the code
[18:38:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[18:38:09] <teut> what makes you know that it will stop?
[18:38:12] <bjs> you're just looking to see "oh it has a for loop, that's O(n) * oh look there's a while loop that's O(blah) * ..."
[18:38:20] <bjs> teut: because I looked at the code and thought about it :)
[18:38:20] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Read error: Connection reset by peer)
[18:38:33] <stealth_> where is the data coming from?
[18:38:33] <teut> yes thats how I do it
[18:38:33] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[18:38:47] *** Joins: wyclif (~wyclif@user/wyclif)
[18:38:51] <teut> and that approach is not fitting well
[18:39:03] <bjs> teut: okay so there's a `if not visited[temp]`, so you agree that at some point it'll have visited all the course?
[18:39:25] *** Quits: s1b1 (~s1b1@user/s1b1) (Read error: Connection reset by peer)
[18:40:07] <bjs> teut: and once it does the loop won't be adding anything more to s, yes?  and from there s gets smaller and smaller each iteration until eventually the loop has to stop because there's nothing left to pop().
[18:40:08] <teut> its not obvious to me, I have lost my talents to thing how I solved these algorithms 2 years bacl
[18:40:10] <teut> k
[18:40:15] <teut> think*
[18:40:32] <bjs> teut: to be honest the fact you don't even see *that* means you're not really trying to understand the code at all
[18:41:16] <stealth_> why commenting the code and leaving example and details matter, 2years later.
[18:42:44] <teut> How is it being so obvious to you , I am not understanding. I will try to relate how  you figured it out by reading the chat again.
[18:42:56] <stealth_> extending a list will eventually come to limit when all the RAM has been used.
[18:43:15] *** Joins: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net)
[18:43:24] <bjs> teut: the code says `if not visited[temp: s.extend(...)`  eventually everything will be visited and it won't extend anymore right?
[18:43:26] <teut> stealth_ I wrote this myself so two years back I knew how to write it so at that time I could have answered bjs probablyy
[18:44:05] <teut> if not visited extend and else returns False.
[18:44:17] <bjs> teut: just because you wrote it then doesn't mean you understand it now
[18:44:19] <teut> so either the size will increase or remain const
[18:44:25] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[18:44:43] <bjs> teut: well it doesn't say "else returns False", and no the loop _always_ decreases the size of s by 1
[18:45:01] <stealth_> teut, don't worry about what you did 2 years ago, and try to solve it now. most likely you were more of a noob back than and did things not to good!
[18:45:16] <bjs> teut: do you see that eventually the loop will have to stop because everything will be visited and it won't be able to extend any more?
[18:45:22] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:46:26] <teut> ah yes because visited[]  = True is there
[18:46:32] <teut> at the end
[18:47:05] <stealth_> otherwise you would have gotten an infinity loop.
[18:47:10] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Read error: Connection reset by peer)
[18:47:23] <teut> yes that I was thinking
[18:47:40] <teut> what could be a good name for s?
[18:48:09] <bjs> teut: well you called it `s` because it's a stack,  but what is it a stack _of_ ?
[18:49:32] *** Joins: superboot (~agentgasm@user/superboot)
[18:50:04] *** Quits: herjazz (~herjazz@p6758124-ipngn30801marunouchi.tokyo.ocn.ne.jp) (Quit: leaving)
[18:50:33] <teut> My dinner is ready . Thanks for explaining. I will come back soon
[18:51:53] *** Joins: RangerBobVA (~bmaddox@user/rangerbobva)
[18:53:13] *** Quits: akk (~akk@75.161.157.26) (Quit: +++)
[18:54:12] *** Joins: aead (~aead@pool-96-232-187-142.nycmny.fios.verizon.net)
[18:54:16] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[18:54:40] *** Joins: Enitin (~Enitin@82.102.22.84)
[18:55:00] *** Quits: aeadio (~aead@ec2-52-2-178-231.compute-1.amazonaws.com) (Ping timeout: 268 seconds)
[18:57:17] *** Joins: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it)
[18:58:04] *** Joins: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae)
[18:58:22] *** Parts: blackout69 (~blackout6@net-2-42-57-150.cust.vodafonedsl.it) ()
[18:59:30] *** Quits: y1n (~y1n@84-115-65-127.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[18:59:53] *** Joins: s1b1 (~s1b1@user/s1b1)
[19:00:47] *** Quits: demo-test (~b0urne@36.57.134.158) (Quit: WeeChat 2.2)
[19:01:07] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[19:03:40] *** Joins: gpap (~gpap@athedsl-386770.home.otenet.gr)
[19:03:51] *** Quits: thiras (~thiras@user/thiras) (Ping timeout: 258 seconds)
[19:08:44] <df_data> Can anyone help me out, im trying to save a requests.json response to csv BUT Why would i get spacing between each row with this https://bpa.st/IDAA
[19:10:00] <az> how I can pass an empty argument to be a command line flag, I don't think I should use *args or *kwargs as I think it would be better to limit the possible inputs for safety https://bpa.st/7I5A
[19:10:45] *** Joins: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com)
[19:12:00] *** Joins: y1n (~y1n@84-115-64-102.wifi.dynamic.surfer.at)
[19:12:43] <stealth_> az, wouldn't empty argument be ignored anyways?
[19:13:41] <az> how to make it empty? something = "" didn't work
[19:14:54] *** Quits: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[19:15:14] *** Joins: Spawns_Carpeting (~pi@user/spawns-carpeting/x-6969421)
[19:17:11] *** Quits: iomari891 (~iomari891@105.112.138.38) (Ping timeout: 268 seconds)
[19:17:14] *** Quits: audiobirb (~audio@2603-8081-1800-00ad-c226-09f2-20c1-b118.res6.spectrum.com) (Ping timeout: 272 seconds)
[19:17:20] <stealth_> az, what you are doing is `ls '' .` you will get an error in terminal as well
[19:18:36] <df_data> Solved, newline=’’ was required in the open csv area
[19:18:58] <stealth_> az, maybe you can rewrite it like so: https://bpa.st/TDLQ though its weird anyone will supply empty "" as argument.
[19:20:43] *** Joins: besnn (~besnn@user/besnn)
[19:21:12] *** Joins: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470)
[19:21:40] <stealth_> az, maybe https://bpa.st/LGYQ don't like using `do_ls = ` when that is also the function name
[19:22:39] *** Quits: rsx (~dummy@ppp-188-174-158-108.dynamic.mnet-online.de) (Quit: rsx)
[19:22:49] *** Quits: ripdog (~quassel@user/ripdog) (Quit: No Ping reply in 180 seconds.)
[19:23:20] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[19:23:39] <df_data> @jinsun: it ended up being ntlm and well documented here thanks heaps: https://docs.python-requests.org/en/master/user/authentication/#basic-authentication
[19:23:40] *** Quits: Oddity (Oddity@user/oddity) (Remote host closed the connection)
[19:24:09] *** Joins: ripdog (~quassel@user/ripdog)
[19:25:11] *** Quits: stoiclunchbox (~stoiclunc@user/stoiclunchbox) (Quit: stoiclunchbox)
[19:27:00] *** Joins: LiftLeft (~LiftLeft@212.102.58.180)
[19:29:59] *** Joins: noneco (~noneco@dslb-188-096-064-125.188.096.pools.vodafone-ip.de)
[19:31:27] *** Quits: kurtthemaker (~kurt@S010644a56e3e0ee9.cn.shawcable.net) (Quit: leaving)
[19:32:09] *** Quits: mickey (~user@user/mickey) (Remote host closed the connection)
[19:32:11] *** Joins: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net)
[19:33:38] *** Joins: no_gravity (~no_gravit@user/no-gravity/x-5639427)
[19:33:51] <no_gravity> Holy moly, it looks Debian 11 is out and comes with cpython 3.9!
[19:34:01] <no_gravity> That should mean the path of the temp cache files will be configurable, right?
[19:34:12] *** Joins: korg815 (~korg815@user/korg815)
[19:34:26] *** Quits: noneco (~noneco@dslb-188-096-064-125.188.096.pools.vodafone-ip.de) (Remote host closed the connection)
[19:34:50] *** Quits: leduyquang753 (~leduyquan@user/leduyquang753) (Quit: Gotta go, see you guys later.)
[19:35:23] <stealth_> no_gravity, i use manjaro (rolling release) it already comes with python 3.9.6+
[19:35:45] *** Joins: FluffyMask (~masque@user/fluffymask)
[19:35:52] <no_gravity> stealth_: Nice. Do you know how to configure the path of the python compile cache files?
[19:36:10] <no_gravity> It is one of my biggest gripes with python, that it litters cache files all over the place.
[19:36:33] *** Quits: FinnElija (~finn_elij@user/finn-elija/x-0085643) (Quit: FinnElija)
[19:37:29] <stealth_> no_gravity, did they add that feature? i was the one who was complaining about that! lol while ago
[19:37:32] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 268 seconds)
[19:37:38] <nedbat> no_gravity: PYTHONCACHEPREFIX env var
[19:37:52] <no_gravity> nedbat: How do you set that?
[19:37:55] *** Joins: feep (~feep@2001:a61:3474:4a01:43f0:91af:ee19:5551)
[19:37:59] <feep> hi
[19:38:09] <nedbat> no_gravity: it's an environment variable. set it to a directory you want to use
[19:38:10] *** Joins: han-solo (~hanish@user/han-solo)
[19:38:14] <stealth_> o nice, looks like they did add it
[19:38:38] <nedbat> no_gravity: btw, all the environment variables are listed with "python --help"
[19:38:44] <no_gravity> nedbat: Yes, but how? Like this? "EXPORT PYTHONCACHEPREFIX=/some/dir/"
[19:39:03] <nedbat> no_gravity: that's a question about your OS, and your shell.
[19:39:14] *** Joins: jpw_ (~jpw@user/jpw)
[19:39:24] <feep> not a frequent python user. how does pip respond to the following case: foo 1.0.0 requires bar >=1.0.0, foo 1.0.1 requires bar >=1.0.0 !=1.0.1? ie. the possible selections are foo 1.0.1 bar 1.0.0, or foo 1.0.0 bar 1.0.1
[19:39:31] <no_gravity> nedbat: Strange, that variable seems to exist in Python3.8 already.
[19:39:42] *** Quits: jpw (~jpw@user/jpw) (Ping timeout: 245 seconds)
[19:39:44] <nedbat> no_gravity: why is that strange?
[19:39:53] <no_gravity> nedbat: Oh, yes, not strange.
[19:39:58] *** Quits: Mikaela (~sid12355@Feneas/Mikaela) (Remote host closed the connection)
[19:40:14] <nedbat> no_gravity: https://docs.python.org/3/whatsnew/3.8.html#parallel-filesystem-cache-for-compiled-bytecode-files
[19:40:14] <no_gravity> Debian 10 came with 3.7
[19:40:17] *** Joins: ice9 (~ice9@user/ice9)
[19:40:26] *** Joins: FinnElija (~finn_elij@user/finn-elija/x-0085643)
[19:40:29] <stealth_> no_gravity, nedbat https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX
[19:40:34] *** Joins: mickey (~user@user/mickey)
[19:40:35] *** Joins: Mikaela (~sid12355@Feneas/Mikaela)
[19:40:43] <no_gravity> nedbat, stealth_: Yes, awesome. Will use that when I switched to Debian 11.
[19:41:05] *** Quits: torandu (~sean@94.10.125.197) (Quit: leaving)
[19:41:13] <no_gravity> Will that also work for pypy?
[19:41:22] <stealth_> also looks like its a python 3.8 feature
[19:42:07] <no_gravity> stealth_: Yes, thats why I am so happy Debian 11 comes with Python 3.9
[19:42:10] *** Joins: cthulchu_ (~Cthulchu@193.194.107.250)
[19:42:10] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[19:42:26] *** Joins: Gustavo6046_ (~Gustavo60@user/gustavo6046)
[19:42:50] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Ping timeout: 252 seconds)
[19:42:55] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[19:43:01] <stealth_> no_gravity, ok, well you can also custom install python, shouldn't really depend on os python version.
[19:43:24] *** Quits: LucaTM (~LucaTM@user/lucatm) (Ping timeout: 250 seconds)
[19:43:37] <no_gravity> stealth_: I only use what is in the Debian repos.
[19:43:39] <az> stealth_, thanks it seems to work. I wanted the "" to be able to handle "-ls" as an example for other commands
[19:43:52] <stealth_> no_gravity, i see, that cool
[19:43:55] *** Joins: entuland (~entuland@user/entuland)
[19:44:14] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[19:44:16] <luckydonald> Is here an uwsgi room?
[19:44:19] *** Gustavo6046_ is now known as Gustavo6046
[19:44:20] <no_gravity> stealth_: Do you know if pypy has that feature too?
[19:44:41] *** Quits: Fluxx (~Fluxx@user/fluxx) (Ping timeout: 248 seconds)
[19:44:46] <luckydonald> no_gravity: That you can surely ask in #pypy
[19:44:48] <stealth_> no_gravity, not sure
[19:44:57] <no_gravity> luckydonald: Good idea, will try.
[19:45:07] <stealth_> no_gravity, `pypy --help` should list it
[19:45:38] *** Quits: stkrdknmibalz (~test@rrcs-75-87-43-226.sw.biz.rr.com) (Quit: WeeChat 3.0.1)
[19:46:31] <no_gravity> stealth_: This comes back empty: pypy3 --help | grep -i pythonpycacheprefix
[19:46:37] <az> stealth_, I see you used args couldn't that be a security issue if one of the inputs come from user of the app?
[19:47:11] *** Joins: korg815 (~korg815@user/korg815)
[19:47:42] <stealth_> az, that depend on who you allow access to that function
[19:48:22] <az> why I can't have two options, either "" or "-ls"
[19:48:33] <az> not "" but nothing
[19:48:40] *** Joins: realies (~realies@user/realies)
[19:48:56] <grym> az: python doesn't have unassigned variables
[19:49:17] <realies> how to .update a hashlib.md5() twice to get a hexdigest that starts with '00'?
[19:49:24] <stealth_> az, `-ls` is an error
[19:49:32] <az> grym, so I should use args, no other way?
[19:49:45] <stealth_> as, `do_ls('ls', '-r', '.')` try that, it works
[19:50:09] <grym> az: you could pass a list of arguments, and validate them
[19:50:45] *** Quits: no_gravity (~no_gravit@user/no-gravity/x-5639427) (Quit: leaving)
[19:50:57] <az> stealth_, what do you mean it's an error?
[19:51:13] <stealth_> az, you meant `do_ls('ls', '-ls', '.')` ? that works
[19:51:23] <az> yeah it works
[19:51:28] <az> no
[19:52:11] *** Quits: nomic (~nomic@host81-157-78-183.range81-157.btcentralplus.com) (Quit: Leaving)
[19:52:22] <az> sorry, it works yes when I use with subprocess as my first example
[19:52:31] *** Quits: luckydonald (~luckydona@static.154.109.217.95.clients.your-server.de) (Changing host)
[19:52:31] *** Joins: luckydonald (~luckydona@user/luckydonald)
[19:52:34] <az> if I put option one as "-ls"
[19:52:44] <stealth_> az, first argument its and error, cause its not valid
[19:53:08] <stealth_> `which -ls` vs `which ls`
[19:54:10] <TML> az: You might find some useful ideas if you look at the python module 'sh': https://amoffat.github.io/sh/
[19:54:13] <az> let us say this, first argument is the command "ls" second is the optional argument "-la" third is path
[19:54:49] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 248 seconds)
[19:55:19] <az> -ls caused confusion
[19:56:38] *** Joins: extropiator (~extropiat@162.253.68.171)
[19:56:45] <stealth_> az, maybe you want this https://bpa.st/KF5A
[19:57:08] <az> TML, I'm using ls command as an example here to simplify not interested in shell commands
[19:57:26] <stealth_> this way `ls` is always set as first command, and since its `do_ls` its only limited to that system function. it should also be secure!
[19:58:01] <nedbat> az: the ls command is no different than the program you *are* interested in running, as far as subprocess is concerned.
[19:58:46] <az> yes but the is the "sh" so?
[19:59:06] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 272 seconds)
[19:59:08] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[19:59:12] <TML> az: OK - I just mentioned sh just because of how it is able to handle all the args you pass it and figure out how to hand them off to the programs correctly
[19:59:40] *** Quits: y1n (~y1n@84-115-64-102.wifi.dynamic.surfer.at) (Ping timeout: 272 seconds)
[20:00:47] <theseb> anyone here use Jenkins?  Reason I ask is it seems it is always easier to just automate things with python instead no?
[20:01:00] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:01:01] <theseb> i.e. python > jenkins
[20:01:56] <stealth_> theseb, how long will it take you to code such a feature?
[20:02:10] <TML> theseb: The comparison doesn't make a whole lot of sense to me, as 1) Jenkins is not a programming language; and 2) you can _use_ python _in_ Jenkins as the way you perform the steps for your CI/CD process
[20:02:21] *** Joins: Snyp (~rksht@49.207.209.246)
[20:02:31] <az> stealth_, thanks seems much better. I was just hoping to find a simple way to add or hide one single argument like "--dry-run" or "--testnet"
[20:02:44] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[20:03:00] <TML> Jenkins gives an appealing visual dashboard and historical reporting for running an arbitrary command on semi-arbitrary events
[20:03:08] <az> I think I have to make it a bit loose and use *args
[20:03:26] *** Quits: jinsun (~quassel@user/jinsun) (Ping timeout: 268 seconds)
[20:03:38] <theseb> stealth_: well stuff i imagine done w/ jenkins is 1. pull code from repo, 2. running unit tests, 3. building Docker containers.....Those seems pretty fast to code up in python no?
[20:03:51] <stealth_> az, you can raise an error like `if '--something' in args: raise ValueError('--something is not supported')`
[20:04:04] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:04:30] <az> yeah, I think it's called sanitizing
[20:04:37] *** Joins: wyclif (~wyclif@user/wyclif)
[20:05:06] <stealth_> az, sure, you should let the user know vs just hiding it, this way they are not stressing over why something doesn't work.
[20:05:08] <theseb> TML: yes you can run python in jenkins,
[20:05:23] <qpdb_> imho jenkins doesn't integrate well with scm, i prefer gitlab for scm+ci/cd
[20:05:27] <theseb> TML: seems like a lot of work to set up jenkins to run python in it
[20:06:16] *** Joins: ice9 (~ice9@user/ice9)
[20:06:16] <theseb> qpdb_: yea..that's another weird thing...if I'm not mistaken, every repo service (github, gitlab) has their own jenkins competitor?
[20:06:17] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[20:06:38] <stealth_> theseb, that depends on your skill-set, no one is saying you have to use external tools like Jenkins, but such tools a built to make things easy for ppl like you.
[20:07:33] <theseb> stealth_: ok, thanks
[20:07:33] <TML> az: cmd = ['ls'] + [x for x in filter(None, args) if x not in ['--dry-run']]
[20:08:18] *** Joins: audiobirb (~audio@2603-8081-1800-00ad-01ab-7923-9d1d-5b47.res6.spectrum.com)
[20:08:30] <TML> theseb: I mean, you have to write the Jenkins jobs in SOME language. Again, Jenkins itself does not have a programming language.
[20:09:08] <grym> but usually, it's configured with groovy
[20:09:12] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[20:09:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:09:49] *** Quits: monkey_ (~user@190.104.116.134) (Remote host closed the connection)
[20:09:50] <TML> theseb: That is to say, you wouldn't be "Setting up Jenkins to write python in it"; you'd be "Setting up Jenkins to get all the features Jenkins provides, and using Python as the language you write the jobs in"
[20:10:05] *** Joins: wyclif (~wyclif@user/wyclif)
[20:10:11] <theseb> TML: makes sense, thanks
[20:10:46] <TML> theseb: Also, there's really not much to "Setting up Jenkins" these days other than "docker pull jenkins" :)
[20:10:51] *** Quits: i0e (~is0ke3@user/is0ke3) (Ping timeout: 268 seconds)
[20:10:57] <az> TML, will check that
[20:11:39] *** Quits: pyfisch (~pyfisch@user/pyfisch) (Read error: Connection reset by peer)
[20:11:51] <TML> az: note that I actually agree with stealth_'s recommendation here - better _not_ to simply swallow things; just showing one possible way to do it the other way if that's your choice
[20:12:01] *** Joins: pyfisch (~pyfisch@user/pyfisch)
[20:12:29] *** Joins: i0e (~is0ke3@user/is0ke3)
[20:12:51] *** Quits: georgios (~georgios@user/georgios) (Ping timeout: 258 seconds)
[20:13:34] *** Quits: Nact (~l@host-85-27-122-107.dynamic.voo.be) (Quit: Konversation terminated!)
[20:14:44] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[20:14:58] *** Quits: extropiator (~extropiat@162.253.68.171) (Ping timeout: 246 seconds)
[20:15:23] <az> guys, here is the full app that I want now to add --testnet flag to it. so you suggest using "cmd=" with args https://gitlab.com/uak/electron-cash-slp-cli-python-basic-lib/-/blob/master/ec_slp_lib.py
[20:15:33] *** Joins: wyclif (~wyclif@user/wyclif)
[20:15:43] <az> I've this option and the other one is to create a test version of the file
[20:16:59] *** Joins: cluelessperson (~cluelessp@user/cluelessperson)
[20:17:08] <TML> I see quite a few different calls to subprocess.run in there, not sure which one you're asking about
[20:17:38] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 268 seconds)
[20:17:58] <az> all the ones with electron_cash_path can accept --testnet argument
[20:18:26] <az> I'll have to add --testnet after electron_cash_path
[20:18:51] *** Quits: ice9 (~ice9@user/ice9) (Ping timeout: 268 seconds)
[20:18:52] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 268 seconds)
[20:21:05] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:21:09] *** Joins: LucaTM (~LucaTM@user/lucatm)
[20:21:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:21:59] <stealth_> az what does this `--testnet` do?
[20:22:09] *** Quits: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se) (Remote host closed the connection)
[20:22:10] <TML> so you're looking to add some kind of boolean option to all of these subprocess.run calls to either pass `--testnet` or an empty string, right?
[20:22:27] <az> TML, right
[20:22:31] *** Joins: wyclif (~wyclif@user/wyclif)
[20:22:51] <az> stealth_, it will use a test network instead of running the transactions on a main net
[20:23:28] *** Joins: Mattiaslndstrm (~Mattiasln@c188-148-207-108.bredband.tele2.se)
[20:23:37] <TML> az: so the quick and dirty way to do that is subprocess.run((electron_cash_path, '--testnet' if foo else '', …)
[20:23:48] <TML> where foo is your boolean test
[20:23:51] *** Joins: jinsun (~quassel@user/jinsun)
[20:24:04] <az> I don't want to use dirty solution with a wallet :)
[20:24:22] <han-solo> `electron_cash_path = ['/path/to/electron/thing']; if test_mode: electron_cash_path += ['--testnet']; ... subprocess.run(*electron_cash_path, ...)` # would that work ?
[20:24:23] *** Parts: feep (~feep@2001:a61:3474:4a01:43f0:91af:ee19:5551) (Konversation terminated!)
[20:24:32] <TML> it's only "dirty" in the sense of "the code isn't that readable"
[20:25:17] <az> han-solo TML I would like to implement a clean solution even if takes time.
[20:25:28] <az> I would like my file to look clean
[20:25:31] <TML> az: han-solo's solution is perfectly fine
[20:26:01] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[20:26:14] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[20:26:14] <stealth_> az, you should refactor your code to using 1 function to handle all this `subprocess.run`
[20:26:37] <az> stealth_, like the cmd= you created
[20:26:42] <TML> 👆🏻
[20:26:44] <stealth_> az, also include your testnet in it, this way is much cleaner.
[20:27:09] <stealth_> az, sure, that could be the parser/cleaner of arguments
[20:27:13] <TML> If you "want your code to look clean", you should refactor all these subprocess.run calls down to a single call
[20:27:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[20:27:34] <TML> I mean, this code currently doesn't look terribly "clean" to me
[20:28:08] *** Joins: wyclif (~wyclif@user/wyclif)
[20:28:40] <TML> Well, maybe 2 calls - one for parsing the various bits of "daemon status", and one for passing the various flags when you're using `-w`
[20:29:40] *** Quits: ayustae (Thunderbir@gateway/vpn/protonvpn/ayustae) (Remote host closed the connection)
[20:30:12] <az> thank you for all those suggestion. will try to do accordingly.
[20:30:42] *** Quits: sebastianos (~sebastian@user/sebastianos) (Ping timeout: 272 seconds)
[20:31:21] <az> this is maybe my 3rd project in python so still much to learn. I would like to invite some of you to examine the space there is good income from it and a lot of demand :)
[20:31:32] *** Joins: lsrtl__ (~lsrtl@user/lsrtl)
[20:33:03] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:33:38] *** Joins: wyclif (~wyclif@user/wyclif)
[20:35:12] <stealth_> az, lets take this for example https://gitlab.com/uak/electron-cash-slp-cli-python-basic-lib/-/blob/master/ec_slp_lib.py#L154 you get `freeze_raw` then try to pass it into json, then try to catch error!, you should first see `if freeze_raw.stderr: # there was an error` happens before passing to json, since its not json error but `ls` error
[20:35:17] <TML> I can't be bothered to invest time in learning cryptocurrency nonsense. I am too risk-adverse and jealous of my free time.
[20:35:45] *** Quits: RangerBobVA (~bmaddox@user/rangerbobva) (Quit: Leaving)
[20:36:33] <stealth_> az, there could also be json error but that's a different story
[20:36:36] *** Joins: Sky_Net (~Sky_Net@176.14.210.40)
[20:37:56] *** Quits: s1b1 (~s1b1@user/s1b1) (Quit: ZNC 1.7.2+deb3 - https://znc.in)
[20:37:59] <stealth_> TML you should create a cryptocurrency based on wasting time! more time you waste doing nothing, most $ you make ;) ;)
[20:38:24] <TML> stealth_: Isn't that essentially the core of all the existing ones? ;)
[20:38:30] <luckydonald> Yeah
[20:38:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[20:38:55] *** jpw_ is now known as jpw
[20:39:11] *** Joins: wyclif (~wyclif@user/wyclif)
[20:39:14] <stealth_> TML pretty much :D just try and create demand out of BS and ppl will buy/invest into it.
[20:39:39] <TML> besides, that would make me the poorest person in that coin - I actually can't even fathom "wasting time". I've got MAYBE 25-30 years left on this Earth, and there are FAR TOO MANY things I want to do with that time
[20:39:53] *** Joins: dcompoze (~dcompoze@5E98D6D9.static.tld.pl)
[20:40:43] *** Quits: superboot (~agentgasm@user/superboot) (Remote host closed the connection)
[20:42:26] *** Joins: rudrab (~rudrab@2402:e280:215f:228:c249:d16f:6fe:ea85)
[20:43:56] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[20:44:23] *** Joins: iomari891 (~iomari891@105.112.138.38)
[20:44:44] *** Joins: wyclif (~wyclif@user/wyclif)
[20:44:57] *** Joins: georgios (~georgios@user/georgios)
[20:45:43] <stealth_> TML better to get some extra sleep
[20:45:55] <az> wouldn't say it's all BS, many real life projects have been funded successfully  https://flipstarters.bitcoincash.network/#/completed
[20:46:14] <az> if you don't have interest in some just sell it
[20:46:19] <az> after getting paid
[20:46:22] <TML> See, I already resent the sleep my body forces me to get, as well as the time I have to spend eating and performing other tasks of physical maintenance
[20:46:38] <TML> once uploading your brain is a thing, I'll be in line
[20:46:53] <teut> a = [90, 67]      ; l = copy(a)    / l= deepcopy(a)   what will be the physical difference?
[20:47:05] <teut> observable difference
[20:47:08] <TML> teut: None
[20:47:33] <TML> > The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):
[20:47:42] <stealth_> TML you live + experience + die multiple lifetimes in a single sleep cycle.
[20:48:00] <teut> so things which has associated metadata , will only  be differentiable , right?
[20:48:10] <teut> have*
[20:48:15] *** Quits: georgios (~georgios@user/georgios) (Client Quit)
[20:48:20] <TML> stealth_: That's what they say, but even if that's true, I've never once remembered doing any of them
[20:48:33] <luckydonald> :az: Those campains are some kind of self jerking...
[20:48:34] <TML> teut: I don't understand what you mean by that question, sorry
[20:49:22] <teut> what I know is if you use copy, meta data is shared , and if you use deepcopy , metadata is duplicated
[20:49:29] <TML> stealth_: so if you can't remember it, is there really any value in it? :)
[20:49:32] <stealth_> TML its cause you are not really living properly :p thinking of uploading your mind! you have already lost of plot of what living means.
[20:49:36] <teut> but I dont know metadata strongly
[20:49:42] *** Quits: audiobirb (~audio@2603-8081-1800-00ad-01ab-7923-9d1d-5b47.res6.spectrum.com) (Ping timeout: 245 seconds)
[20:49:42] <TML> teut: what do you mean by "metadata" in this context?
[20:49:45] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[20:50:02] *** Quits: ziky (sid27087@user/ziky) (Ping timeout: 258 seconds)
[20:50:20] *** Quits: Sky_Net (~Sky_Net@176.14.210.40) (Ping timeout: 272 seconds)
[20:50:20] *** Joins: wyclif (~wyclif@user/wyclif)
[20:50:25] *** Quits: eichin (sid27120@tinside.irccloud.com) (Ping timeout: 258 seconds)
[20:50:48] *** Quits: Evolver (sid32215@user/evolver) (Ping timeout: 258 seconds)
[20:50:48] *** Quits: darxun (sid504814@tinside.irccloud.com) (Ping timeout: 258 seconds)
[20:51:15] <teut> l = [[89],67]   yes , I could see the object here
[20:51:28] *** Joins: ziky (sid27087@user/ziky)
[20:51:31] <teut> I could see the difference with this  *
[20:51:37] <luckydonald> (az: especially https://flipstarter.bitcoinbch.com where they found SEO for a crappy youtube about their own crypto thingy. Ouch. Like why the heck would they even need money for that)
[20:51:41] *** Joins: jstein (~jstein@gentoo/developer/jstein)
[20:51:46] <luckydonald> (okey, enough off-topic, sorry)
[20:52:57] <teut> I do not have much understanding of the term metadata
[20:53:36] *** Joins: eichin (sid27120@id-27120.tinside.irccloud.com)
[20:53:40] *** Joins: Evolver (sid32215@user/evolver)
[20:53:52] <TML> teut: I cannot think of any meaningful definition of the term "metadata" in regards to copy() vs deepcopy()
[20:54:05] <teut> very vague one,  one way that I visualize  is  that a pdf file has meta data like page number, bookmarks and many attributes
[20:54:11] <TML> you might as well be saying "finklehose"
[20:54:26] *** Joins: darxun (sid504814@id-504814.tinside.irccloud.com)
[20:54:39] <TML> teut: Sure, that is true. What does that have to do with your question about copy() vs deepcopy(), though?
[20:54:58] <teut> metadata is shared  if you use copy
[20:55:05] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 248 seconds)
[20:55:07] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Quit: ZNC 1.8.2 - https://znc.in)
[20:55:15] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[20:55:20] <TML> No
[20:55:27] <TML> That's a completely nonsense sentence
[20:55:37] <TML> "metadata" doesn't have any meaningful application here
[20:55:44] *** Joins: Enitin (~Enitin@82.102.22.84)
[20:55:54] *** Joins: wyclif (~wyclif@user/wyclif)
[20:56:04] <rudrab> Hi friends, can anybody kindly have a look at https://stackoverflow.com/questions/68782161/create-stackbar-from-two-different-pandas-output?noredirect=1#comment121557991_68782161
[20:56:06] <TML> teut: https://realpython.com/copying-python-objects/
[20:56:14] <teut> ok, as I said I dont have  much understanding here
[20:56:19] *** Joins: Auron (~Auron956@user/auron)
[20:56:27] <teut> the term metadata is quite unclear
[20:56:46] <rudrab> Sorry, this is the correct link: https://stackoverflow.com/questions/68782161/create-stackbar-from-two-different-pandas-output
[20:56:56] *** dcaro is now known as dcaro_away
[20:57:35] <TML> teut: That's because you're applying it in a context where it has no meaning
[20:57:50] <TML> teut: What put you on the path of using the term "metadata" in this context to begin with?
[20:58:06] <teut> it was in my memory
[20:58:23] <teut> now how it got there , I dont have much idea
[20:58:38] *** Joins: cedric (~cedric@2a01:cb11:867:c200:b279:d575:78c1:92dd)
[20:59:09] *** Joins: s1b1 (~s1b1@user/s1b1)
[20:59:26] *** Joins: dcompoze_ (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[20:59:41] *** Joins: Julian (~tos9@python/site-packages/Julian)
[21:00:07] *** Joins: dez (uid92154@user/dez)
[21:00:14] <teut> Uploaded file: https://uploads.kiwiirc.com/files/f9d1547ca6e1935de9f7c218e812c159/pasted.txt
[21:00:47] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:01:17] <teut> from realpython , so here the xs , that extended the list , but ys had no effect
[21:01:27] *** Joins: wyclif (~wyclif@user/wyclif)
[21:01:54] <teut> is the level  thing  to be related to the  "["  "]"  syntax?
[21:02:12] *** Quits: dcompoze (~dcompoze@5E98D6D9.static.tld.pl) (Ping timeout: 245 seconds)
[21:02:15] <han-solo> `copy` does a shallow copy, `deepcopy` does well.. a deep copy :)
[21:02:46] <teut> yes, I knew that already deep is recursive
[21:03:22] <teut> but I didnt know about the above example and this can be problamatic for me
[21:04:12] <han-solo> Okay...
[21:04:21] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:04:59] *** Quits: Gustavo6046 (~Gustavo60@user/gustavo6046) (Remote host closed the connection)
[21:05:38] *** Quits: cthulchu_ (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[21:05:38] *** Quits: cthulchu (~Cthulchu@193.194.107.250) (Read error: Connection reset by peer)
[21:06:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:07:01] *** Joins: wyclif (~wyclif@user/wyclif)
[21:07:21] *** Quits: tims (~tims@61.69.131.46) (Ping timeout: 248 seconds)
[21:08:16] <amirouche> is it possible to map an asynchronous generator to an asynchronous function ?
[21:08:22] <amirouche> with aiostream ?
[21:08:32] *** Joins: be3uykpy (~be3uykpy@2a00:a040:19a:b060:6993:c8f6:4710:a4f5)
[21:09:48] <amirouche> the answer is yes: https://aiostream.readthedocs.io/en/stable/operators.html#aiostream.stream.map
[21:10:56] <luckydonald> Anyone knowing how to set up pypy + uwsgi?  I try to follow the docs on that but get `OperationError: operror-value: ("Missing parentheses in call to 'print'", ('c callback', 332, 15, '        print "PyPy WARNING: unable to load logging.config"\n', 0))` which sounds like there's py2 code ending up in that...
[21:11:24] <stealth_> amirouche, there is also `async for i in something_to_await():`
[21:11:54] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:12:03] *** Joins: sebastianos (~sebastian@user/sebastianos)
[21:12:20] *** Joins: Gustavo6046 (~Gustavo60@user/gustavo6046)
[21:12:32] *** Joins: wyclif (~wyclif@user/wyclif)
[21:13:22] *** Joins: Gurkenglas (~Gurkengla@dslb-002-203-144-156.002.203.pools.vodafone-ip.de)
[21:16:18] *** Joins: ExeciN (~ExeciN@user/nicexe)
[21:17:04] *** Joins: mefistofeles (~mefistofe@user/mefistofeles)
[21:17:38] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:18:06] *** Joins: wyclif (~wyclif@user/wyclif)
[21:19:40] *** Joins: netsan (~netsan@user/netsan)
[21:20:50] *** Joins: Lando-SpacePimp (~Lando@user/lando-spacepimp)
[21:23:16] *** Joins: manti7 (~manti7@176.10.104.94)
[21:23:20] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:23:39] *** Joins: wyclif (~wyclif@user/wyclif)
[21:25:41] *** Joins: CodeMouse92 (~CodeMouse@user/codemouse92)
[21:26:30] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[21:26:53] <cloudbender> .... data   = open(self.file,'rb').read()
[21:27:05] <cloudbender> does .close() happen automatically ?
[21:27:11] <grym> cloudbender: no
[21:27:28] <grym> cloudbender: with open(...) as f: f.read() does, though
[21:27:43] <cloudbender> ok
[21:27:48] <grym> cloudbender: as does `pathlib.Path(self.file).read_bytes()
[21:28:19] *** Joins: Betal (~Betal@user/betal)
[21:28:28] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[21:28:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:29:03] <grym> (which is very tidy, if you're going to read the whole thing anyway)
[21:29:05] <cloudbender> oh I see I'm trying to close the data, not the handle derp
[21:29:11] *** Joins: wyclif (~wyclif@user/wyclif)
[21:29:13] <grym> close .. the .. data?
[21:29:44] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[21:29:51] <grym> (either way, prefer at least the explicit context manager, and in some cases the tidy implicit one)
[21:30:11] *** Quits: wolfgang (~wolfgang@101.174.170.3) (Remote host closed the connection)
[21:31:02] *** Joins: nef (~nef@user/nef)
[21:31:06] <stealth_> cloudbender, `data = open(self.file,'rb'); data.close()`
[21:31:23] <cloudbender> nice
[21:31:24] <stealth_> i seen many ppl use `open(...).read()` so ugly
[21:31:27] <grym> stealth_: still a little gross!
[21:31:52] <cloudbender> I use continuations often
[21:31:54] <stealth_> grym, there are cases when you can't use context manager
[21:32:08] *** Quits: manti7 (~manti7@176.10.104.94) (Ping timeout: 272 seconds)
[21:32:09] <grym> stealth_: i try very hard to avoid them
[21:32:21] <cloudbender> I guess that's an anti-pattern
[21:32:26] <cloudbender> ... in python
[21:32:48] <grym> ¯\_(ツ)_/¯
[21:32:52] <grym> i don't leave dangling file handles, anyway
[21:33:00] <grym> that has little to do with continuations or lack thereof
[21:33:02] *** Joins: cthulchu (~Cthulchu@193.194.107.250)
[21:33:30] *** Quits: knipster (~knipster@user/knipster) (Quit: The Lounge - https://thelounge.chat)
[21:33:33] *** Joins: manti7 (~manti7@176.10.104.94)
[21:33:38] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[21:33:48] <sazawal> Hi all. If I want to implement ssh type rsa authentication on a webserver, what python libraries should I look for?
[21:33:56] *** Joins: wolfgang (~wolfgang@101.174.170.3)
[21:34:07] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[21:34:49] *** Joins: shibboleth (~shibbolet@user/shibboleth)
[21:35:09] *** Joins: wyclif (~wyclif@user/wyclif)
[21:35:34] <stealth_> sazawal, rather then python, just use `openssh` on the server?
[21:35:42] *** Quits: Julian (~tos9@python/site-packages/Julian) (Quit: leaving)
[21:35:56] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Remote host closed the connection)
[21:36:14] *** Joins: Hax0r (~Hax0r@87.101.193.195)
[21:36:20] <az>  TypeError: expected str, bytes or os.PathLike object, not bool https://bpa.st/HNQQ
[21:36:30] *** Quits: Snyp (~rksht@49.207.209.246) (Quit: WeeChat 3.2)
[21:36:57] <nedbat> cloudbender: the python way is:  with open() as f:    like grym showed
[21:37:13] <cloudbender> I understand
[21:37:17] <nedbat> cloudbender: but i'm curious what you meant by continuations?
[21:37:31] <sazawal> stealth_, I want to make an app on my local system, which can communicate with the remote system from time to time. For that I used Django with Apache webserver on the remote system. The communication works well, I just want the client (local system) to be authenticated by the webserver before connection.
[21:37:40] <stealth_> az, `capture_output` and such should be keyword argument, you are just providing it as bool into wrong field
[21:37:43] <cloudbender> new object().func().func().report()
[21:37:47] *** Quits: gambl0re (~gambl0re@104.247.245.205) (Ping timeout: 268 seconds)
[21:37:52] *** Joins: lordrishav (~LordRisha@user/lordrishav)
[21:37:55] <grym> cloudbender: i know that as "fluent"
[21:38:03] <rendar> why i get this error from this asyncio snippet?! https://bpa.st/DCHQ
[21:38:08] <cloudbender> yes, fluent is a style
[21:38:23] <cloudbender> continuations are an architecture
[21:38:35] <grym> continuations are, (and i'm uneducated here) something you get to do with tail-call recursion, which python doesn't
[21:39:10] *** Joins: ExeciN (~ExeciN@user/nicexe)
[21:39:14] <stealth_> az, https://bpa.st/YBGA
[21:39:29] *** lordrishav is now known as LordRishav
[21:39:33] <cloudbender> I'll show the method in a second.  One thing I love about python is that self is truely self
[21:39:46] <cloudbender> and can be returned as self
[21:40:05] <cloudbender> I also love that everything is an object
[21:40:22] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[21:40:44] *** Joins: wyclif (~wyclif@user/wyclif)
[21:41:01] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Ping timeout: 258 seconds)
[21:41:03] <stealth_> sazawal, normally webserver use ssl, not ssh
[21:41:22] <greatgatsby> late to the conversation, but I've seen the term 'method chaining'.  Is that what's being discussed?
[21:41:37] <grym> that's another word, i think
[21:42:02] <grym> if you can always return an instance of the type that you are at every method, it works.  you can do lots of string ops this way, for instance
[21:42:24] <grym> in my experience, it feels contrived or otherwise feels like pulling teeth for classes i write myself
[21:42:55] *** Joins: extropiator (~extropiat@162.253.68.148)
[21:43:01] <grym> (often)
[21:43:23] <grym> probably because i tend to treat classes as sacks of data that sometimes know how to tell me things about themselves
[21:43:26] <sazawal> stealth_, Yes, but that is not authentication. I want the server to verify if the local system is the right one to connect to.
[21:43:52] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[21:44:58] <stealth_> sazawal, ok, sorry, i don't fully grasp the situation to properly advise
[21:45:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:46:18] *** Joins: wyclif (~wyclif@user/wyclif)
[21:47:07] <sazawal> stealth_, Okay. See just like the openssh server checks for the public key of the client and verifies the signature and then allows the client to connect. I want to implement a similar type of authentication system on a webserver.
[21:47:52] *** Joins: besnn (~besnn@user/besnn)
[21:48:48] <stealth_> sazawal, don't think openssh checks for public key
[21:49:38] <stealth_> maybe you are thinking of ssl/tls
[21:50:33] *** Joins: ogis (~Android@p311253-omed01.osaka.ocn.ne.jp)
[21:51:05] *** Quits: vicfred (~vicfred@user/vicfred) (Ping timeout: 248 seconds)
[21:51:12] *** Quits: besnn (~besnn@user/besnn) (Read error: Connection reset by peer)
[21:51:13] *** Quits: extropiator (~extropiat@162.253.68.148) (Ping timeout: 246 seconds)
[21:51:16] <rendar> any help?
[21:51:21] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[21:51:25] <sazawal> stealth_, Hmm I am not an expert but I read the pages that first the user manually saves his public key on the remote system. Then when the user connects via client, the server checks if the public key of that user exists on the system, then user signs it's user id with its private key and sends to the server. The server then verifies the signature using the present public key. If the verification is successful then the client is authenticated and
[21:51:25] <sazawal> connected.
[21:51:52] *** Joins: wyclif (~wyclif@user/wyclif)
[21:52:32] <stealth_> rendar, not sure what line:24-25 is suppose to do!
[21:52:38] *** Quits: FoodMan (~FoodMan@cpc104776-belf12-2-0-cust417.2-1.cable.virginm.net) (Quit: QUIT)
[21:52:45] *** Quits: ogis (~Android@p311253-omed01.osaka.ocn.ne.jp) (Client Quit)
[21:52:47] *** Quits: theseb (~cs@47-220-214-54.cnrocmta03.res.dyn.suddenlink.net) (Quit: Leaving)
[21:53:13] *** Joins: Atque (~Atque@user/atque)
[21:53:32] *** Joins: ogis (~Android@240d:1c:3d:9500:c57d:fb6f:b32f:7cd7)
[21:54:05] <stealth_> sazawal, o, that public key! lol i thought you meant like confirmation of the public key with the 3rd party
[21:54:08] <rendar> stealth_: await all pending tasks
[21:55:54] *** Quits: Xaldafax (~xaldafax@cpe-198-72-160-101.socal.res.rr.com) (Quit: Bye...)
[21:56:17] <sazawal> stealth_, Oh. You must be talking about a certificate I guess. openssh authentication is pretty straightforward, what I read. I have a limited number of client computers and the public keys of them I will save on the remote system. And when those clients try to connect with the webserver, the webserver must authenticate that these are the known clients and allowed to connect.
[21:56:25] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[21:57:04] <amirouche> aiostream is such a gem :>
[21:57:15] <rendar> amirouche: why?
[21:57:23] *** Joins: wyclif (~wyclif@user/wyclif)
[21:57:41] <graingert[m]> <grym> "continuations are, (and i'm..." <- continuations are just a callback
[21:57:56] <graingert[m]> Well a specific type of callback, called at a specific time
[21:58:41] <graingert[m]> Usually it's when you have a callback as the last parameter of a function and it's called at the last moment by that function
[21:58:46] <graingert[m]> With the result
[21:59:10] *** Joins: Leonarbro_ (~Leonet@user/leonarbro)
[21:59:17] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Quit: Connection closed for inactivity)
[21:59:17] <foo> graingert[m]>: "Hey look it's imaplib2" -> is something more you meant by this? Were you surprised to see imaplib2?
[21:59:22] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 268 seconds)
[21:59:50] <graingert[m]> foo: I'm a lazy/lapsed maintainer of imaplib2
[21:59:52] <mawk> nothing wrong with a dangling file handle if you open it just once and not recursively grym
[21:59:56] <mawk> and file is read only
[22:00:03] <grym> mawk: untidy! nein!
[22:00:06] <mawk> lol
[22:00:11] <rendar> graingert[m]: can you spot the error here? https://bpa.st/DCHQ
[22:00:12] <mawk> kernel will close it for you
[22:00:16] <foo> graingert[m]: well thank you for your work. :)
[22:00:16] <grym> mawk: untidy! nein!
[22:00:17] <grym> :)
[22:00:18] *** Quits: Tier (~tier@37.214.52.86) (Quit: Leaving)
[22:00:19] <mawk> just lean back and relax
[22:00:31] *** Joins: wootehfoot (~wootehfoo@user/wootehfoot)
[22:00:38] <mawk> let maid linux do the sweeping
[22:00:46] <han-solo> rendar: https://bpa.st/EU6A # is this doable ?
[22:01:31] *** Joins: mei (~mei@user/mei)
[22:01:54] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Ping timeout: 272 seconds)
[22:01:55] *** Quits: ogis (~Android@240d:1c:3d:9500:c57d:fb6f:b32f:7cd7) (Quit: -a- IRC for Android 2.1.59)
[22:01:55] *** Joins: gambl0re (~gambl0re@104.247.245.205)
[22:01:55] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[22:01:59] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 252 seconds)
[22:02:00] *** Joins: ExeciN (~ExeciN@user/nicexe)
[22:02:08] <amirouche> rendar: apparantly my wikimedia crawler is 4 times faster :)
[22:02:15] <stealth_> sazawal, hmm.. sounds like a good idea. i just haven't tried it myself or know of anything that does that off-hand. maybe other can help you or do a search i suppose.
[22:02:31] <SnoopJ> graingert[m], ah, I was wondering what that was about
[22:02:48] <foo> graingert[m]: Perhaps you can confirm my conceptual plan of what I'm wanting to do. I'm resuming my fun hobby project from yesterday. :) At a high level, I want to pipe email into Python. I used to do procmail recipes to do this. But it looks like IMAP Idle can give me the immediacy I'm looking for (these emails can someone be time sensitive). As I understand, I need to have two connections open: 1 in IMAP
[22:02:48] <rendar> han-solo: yes i can do that
[22:02:51] <graingert[m]> rendar: Use an anyio.create_task_group instead
[22:02:54] <foo> Idle that "looks for new messages" and another connection that actually fetches the latest email. Does this sound about right, if you're familiar with the idle implementation?
[22:02:56] *** Joins: wyclif (~wyclif@user/wyclif)
[22:02:59] <rendar> han-solo: but that's only a snippet to learn things
[22:03:03] *** Joins: betelgeuse (~john2gb@94-225-47-8.access.telenet.be)
[22:03:15] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[22:03:17] <rendar> graingert[m]: i know, again, it's a learning snippet to learn how asyncio works
[22:03:26] <rendar> i wish to understand why i can't await all pending tasks
[22:03:33] <sazawal> stealth_, Just don't find a popular solution for it.
[22:03:46] <graingert[m]> foo: Probably you'd want to do it with trio and some sans-io IMAP Library
[22:04:03] <foo> graingert[m]: ah, are you suggesting imaplib2 might not be the way to go?
[22:04:10] <graingert[m]> rendar: As the error says a task can't await itself
[22:04:22] <foo> graingert[m]: or do you mean, in addition to imaplib2 - I'd want trio/sans-io IMAP library?
[22:04:23] <graingert[m]> foo: Well it's fine
[22:04:41] <graingert[m]> But I think doing networking with trio is more fun
[22:04:44] <rendar> graingert[m]: but the thing i can't get, why the task is awaiting itself, since i create the tasks with create_task and they run a completely different coroutine?!
[22:04:53] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[22:05:00] *** Quits: rudrab (~rudrab@2402:e280:215f:228:c249:d16f:6fe:ea85) (Quit: rudrab)
[22:05:24] <stealth_> sazawal, another way to go about it is to use https on the server, and create a server ssh-key, then you as a client (using browser) to connect to that server using https: you accept the servers certificate (this way it doesn't need 3rd party confirmation)
[22:05:28] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[22:05:31] *** Joins: extropiator (~extropiat@162.253.68.199)
[22:05:33] <graingert[m]> rendar: What do you think asyncio.all_tasks does?
[22:05:49] <rendar> graingert: it yields all tasks objects?
[22:06:17] <graingert[m]> I think it's a list
[22:06:18] <han-solo> it runs the `amain` too
[22:06:24] <amirouche> rendar: I will publish the code in a moment
[22:06:38] <han-solo> so you are trying to await the `amain` inside the `amain` itself...
[22:06:43] <rendar> graingert[m]: ok, even if it's a list, that doesn't answer to my question: i create a task with a complete different coroutine
[22:06:57] <rendar> han-solo: oh..
[22:07:17] *** Joins: mertyildiran (~mertyildi@88.234.29.56)
[22:07:21] <graingert[m]> rendar: What do you mean by a complete different Coroutine?
[22:07:37] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[22:07:44] <graingert[m]> Why would that effect what tasks are in `asyncio.all_tasks()`
[22:08:00] <foo> graingert[m]: aha, I see. :) I'm starting with this example: https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb -> As I understand, this will set up the idle connection, and I'd need to write separate code to actually fetch latest emails and process only new ones. eg. something like this: https://alluaravind1313.medium.com/email-reading-using-python-imaplib-2d50912c119 - Am I on the right
[22:08:06] <foo> track? :)
[22:08:07] <stealth_> rendar, replace line:24:25 with `await asyncio.gather(*asyncio.all_tasks(), return_exceptions=True)`
[22:08:23] <han-solo> stealth_: i don't think that would solve the problem
[22:08:23] <sazawal> stealth_, Yes but that way is for the client to authenticate that the server is authentic. I know that the server is authentic as it is mine. I want the server to authenticate if the client connecting to it are the ones it identifies. I will tell the servers what clients to connect to.
[22:08:25] <rendar> stealth_: i know how asyncio.gather() works, thanks..
[22:08:30] *** Joins: wyclif (~wyclif@user/wyclif)
[22:08:33] <rendar> stealth_: this is just for learning purpose
[22:09:15] <stealth_> rendar, you were also `await` `amain` as well within it.
[22:09:17] <rendar> graingert[m]: well, i want to understand the purpose of asyncio.all_tasks() then, if i could ever await all tasks..
[22:09:25] <rendar> stealth_: yeah that's the problem
[22:09:37] <graingert[m]> rendar: maybe print(f"{asyncio.current_task()=} {asyncio.all_tasks()=}") ?
[22:09:37] <amirouche> rendar: here is the interesting part of the code https://git.io/JRpIf
[22:09:38] <rendar> can i tell python, `if t == 'amain' : continue`
[22:09:41] <rendar> or something like that?
[22:10:17] <graingert[m]> rendar: Did you print that out?
[22:10:18] *** Joins: devcpu (~rusty@108.162.160.184)
[22:10:22] <rendar> amirouche: thanks
[22:10:28] <rendar> graingert[m]: one sec.
[22:10:29] <graingert[m]> graingert[m]: This one?
[22:10:50] *** Joins: FoodMan_ (~glucose@194.110.13.12)
[22:11:08] *** Quits: hexology (~hexology@user/hexology) (Quit: hex on you ...)
[22:11:17] <Adois> hello, I have been trying to solve this, but couldnt yet : hhttps://bpa.st/PLMA   how can I avoid the vertical words from being concatenated, but rather aligning them side by side under the dashes?
[22:11:33] <Adois> this is the related part of the code, since it is as a whole a bit long
[22:12:03] <graingert[m]> rendar: But what are you actually trying to do?
[22:12:21] <graingert[m]> anyio.run already awaits all your tasks
[22:12:26] <graingert[m]> Or asyncio.rub
[22:12:37] <rendar> graingert[m]: await all tasks that haven't been awaited during the program, to gracefully shutdown
[22:12:48] <rendar> graingert[m]: i know, but i'm learning asyncio
[22:13:02] <graingert[m]> asyncio.run already does it though
[22:13:03] <rendar> nope asyncio.run() doesn't await all of them
[22:13:06] <rendar> nope
[22:13:07] <graingert[m]> You don't need to do it yourself
[22:13:19] <rendar> if there is some pending task, run() will exit
[22:13:20] <graingert[m]> rendar: Yes it does
[22:13:27] <graingert[m]> Nope
[22:13:29] <rendar> graingert[m]: nope, let me show you, wait
[22:13:34] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:13:37] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[22:14:01] *** Joins: wyclif (~wyclif@user/wyclif)
[22:14:11] <rendar> graingert[m]: https://bpa.st/WM6A
[22:14:22] <rendar> as you can see this program runs for only 1 sec
[22:14:26] <Adois> hmm, fell into the middle of a heated conversation...:)
[22:14:27] <rendar> and not 20 secs
[22:14:43] <rendar> the tasks created and now awaited, are *not* awaited by run()
[22:14:51] <rendar> otherwise the program will run for the entire 20 seconds!
[22:14:51] *** Joins: merijn (~merijn@83-160-49-249.ip.xs4all.nl)
[22:14:57] *** Joins: Celeo (~Celeo@user/celeo)
[22:15:22] *** Quits: extropiator (~extropiat@162.253.68.199) (Ping timeout: 246 seconds)
[22:15:57] <graingert[m]> rendar: https://github.com/python/cpython/blob/3.9/Lib/asyncio/runners.py#L64
[22:16:04] <graingert[m]> You need to catch the cancelled error
[22:16:12] <rendar> ok
[22:16:22] *** Joins: kuler (~kulernil@gateway/tor-sasl/kuler)
[22:16:27] <rendar> graingert[m]: so those tasks get cancelled and are not awaited?
[22:16:57] <rendar> or, they are awaited by then cancelled so it quits anyway?
[22:17:10] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[22:18:04] <foo> graingert[m]: I *think* I can do this without trio first, then add the trio layer, too.
[22:18:17] <graingert[m]> They are cancelled then awaited
[22:18:33] <stealth_> Adois, https://bpa.st/3L3Q
[22:18:35] *** Quits: nef (~nef@user/nef) (Ping timeout: 258 seconds)
[22:18:53] *** Joins: entuland (~entuland@user/entuland)
[22:19:11] *** Quits: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net) (Remote host closed the connection)
[22:19:25] *** Joins: puff (~user@S0106d4ca6d80a83c.vs.shawcable.net)
[22:19:32] <SnoopJ> foo, you could probably use trio along with imaplib2 well enough, in place of that other code's use of threads. It would make shuffling data around a little more convenient
[22:19:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[22:20:34] *** Joins: lukedashjr (~luke-jr@user/luke-jr)
[22:20:53] *** Joins: wyclif (~wyclif@user/wyclif)
[22:21:00] <foo> SnoopJ: oh, that's a great point. And, good day to you. I haven't understood Trio yet or worked with it before but have a general idea of what's involved.
[22:21:05] *** Joins: Codaraxis (~Codaraxis@user/codaraxis)
[22:21:33] *** Joins: extropiator (~extropiat@192.252.220.12)
[22:22:20] <foo> SnoopJ: I'm currently trying to simulate fetching email so I can prep the other connection. Once I have this figured out I can tie everything together.
[22:22:53] *** Quits: luke-jr (~luke-jr@user/luke-jr) (Ping timeout: 252 seconds)
[22:23:20] <Adois> stealth, thank you very much,  I saw that you replied but I am trying something that just occured to me, and then I will view your paste :)
[22:23:41] *** Joins: luke-jr- (~luke-jr@user/luke-jr)
[22:24:13] <stealth_> Adois, i only solved half the problem, i will let you adapt it as you like.
[22:24:44] *** luke-jr- is now known as luke-jr
[22:24:55] *** Joins: nergar (~Nergar@177.225.152.13)
[22:25:54] *** Quits: lukedashjr (~luke-jr@user/luke-jr) (Ping timeout: 268 seconds)
[22:25:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[22:26:27] *** Joins: wyclif (~wyclif@user/wyclif)
[22:28:04] *** Joins: Blankspace (~androirc@user/blankspace)
[22:28:07] *** Joins: yogoyo (~yogoyo@user/yogoyo)
[22:28:10] <foo> SnoopJ / graingert[m] - well, pulling the email is easy: https://bpa.st/GCFA
[22:28:28] <SnoopJ> foo, much of IMAP is, especially with a library that speaks the protocol :)
[22:28:29] <foo> I've used a mail library in the past to process the raw email into different parts
[22:28:33] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[22:29:08] <foo> SnoopJ: Correct me if I'm mistaken, but using trio makes a lot more sense than threads - agree?
[22:29:41] <SnoopJ> foo, it's another way to do the same work, but it does it in a way less unpleasant than threads
[22:30:04] <SnoopJ> especially for applications with a lot of asynchrony going on
[22:31:18] <foo> SnoopJ: "way less unpleasant" - is that "unpleasant" due to the technical nature of threads versus async,  or "less unpleasant" because the same implementation coding-wise is much simpler/nicer/cleaner with trio? My hunch is the former, but you might mean both
[22:31:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:31:41] <SnoopJ> bit of both, mostly the latter
[22:31:59] *** Joins: wyclif (~wyclif@user/wyclif)
[22:31:59] <foo> SnoopJ: aha, thanks
[22:33:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[22:33:15] *** Joins: varaindemian (uid73404@id-73404.charlton.irccloud.com)
[22:33:49] <foo> I also believe last time I checked, trio was the answer to async and/or highly preferred these days. /me has looked into this for other stuff previously
[22:34:09] <SnoopJ> it's one of the popular frameworks yep
[22:34:45] * foo goes through https://trio.readthedocs.io/en/stable/tutorial.html
[22:35:03] *** Joins: lsrtl_ (~lsrtl@user/lsrtl)
[22:35:27] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[22:35:39] <foo> Small nuanced commentary, likely off topic: From https://github.com/python-trio/trio : "The resulting design is radically simpler than older competitors like asyncio and Twisted, yet just as capable." -> Not sure I see libraries as "competitors," simply alternatives with pros and cons.
[22:35:46] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 268 seconds)
[22:36:10] *** Joins: mci64 (~x@185.242.190.95)
[22:36:19] *** shantaram is now known as shan
[22:36:42] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:37:03] *** Joins: ExeciN (~ExeciN@user/nicexe)
[22:37:08] *** Joins: vicfred (~vicfred@user/vicfred)
[22:37:29] *** Quits: lsrtl__ (~lsrtl@user/lsrtl) (Ping timeout: 248 seconds)
[22:37:31] *** Joins: wyclif (~wyclif@user/wyclif)
[22:37:48] <nedbat> foo: library authors want their work to be used. they compete for attention and adoption
[22:38:21] <stealth_> nedbat, they do?
[22:38:44] <nedbat> stealth_: are you asking if authors want their work to be used? or if libraries compete for attention?
[22:38:45] *** Joins: Leonarbro (~Leonet@user/leonarbro)
[22:38:56] *** Quits: korg815 (~korg815@user/korg815) (Quit: WeeChat 2.8)
[22:39:00] <stealth_> nedbat, second part
[22:39:10] <foo> nedbat: Yeah, I get it. That's one way of seeing it. I'd rather live in a world with alternatives than everyone thinking they're competing against each other. I see different implications for seeing things different ways.
[22:39:14] <nedbat> stealth_: do you think they don't?
[22:39:29] <stealth_> nedbat, i know i don't!
[22:39:45] <nedbat> stealth_: have you made libraries that you wanted other people to use?
[22:39:45] *** Joins: cloudbender (~cloudbend@user/cloudbender)
[22:39:53] <stealth_> nedbat, ya
[22:40:02] <foo> eg. a ruthless survival of the fittest mentality versus a gentler "There are multiple right answers" approach, here is what "ours does"
[22:40:28] <nedbat> foo: why even say "here's what ours does" if you don't want people to use it?
[22:40:36] <cloudbender> yes I'm using os._exit(...) just for the test
[22:40:41] <nedbat> foo: I'm not talking about ruthless competition.
[22:40:42] <cloudbender> https://bpa.st/42OA
[22:40:50] <hexnewbie> foo: That is still survival of the fittest. If you don't overly push, your library may die nobody knowing about it
[22:41:02] <nedbat> foo: but authors want their stuff used, and will do things like promote it, or add competing features, etc.
[22:41:09] *** Quits: Blankspace (~androirc@user/blankspace) (Quit: AndroIRC - Android IRC Client ( http://www.androirc.com ))
[22:41:20] *** Quits: scaleww (~scaleww@77-41-20-31.ftth.glasoperator.nl) (Quit: Leaving)
[22:41:22] *** Joins: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566)
[22:41:31] <nedbat> cloudbender: i missed the discussion: why os._exit?
[22:41:45] <cloudbender> it was a prior conversation sorry
[22:41:56] <cloudbender> I promised to post the method
[22:42:11] <nedbat> cloudbender: why did you decide against "with open(..):"
[22:42:17] *** Quits: vdamewood (~vdamewood@fedora/vdamewood) (Quit: My MacBook Pro has gone to sleep. ZZZzzz…)
[22:42:33] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:42:33] *** Quits: Leonarbro_ (~Leonet@user/leonarbro) (Ping timeout: 268 seconds)
[22:42:47] <cloudbender> I love using 'with' but I avoid the habit since it kills node.js
[22:43:04] *** Joins: wyclif (~wyclif@user/wyclif)
[22:43:05] <nedbat> cloudbender: how does your Python code kill node.js?
[22:43:06] <cloudbender> I love it in ObjectPscal
[22:43:29] <cloudbender> as I say, I avoid the habit
[22:43:34] <cloudbender> maybe there is no need
[22:43:38] <nedbat> cloudbender: different languages need different habits
[22:43:43] <cloudbender> right
[22:43:52] <graingert[m]> There's actually quite a lot of overlap in asyncio trio curio and twisted maintainers
[22:44:04] <graingert[m]> So really not that much competition
[22:44:12] <nedbat> cloudbender: os._exit is really aggressive.
[22:44:12] <graingert[m]> Twisted's winning comfortably anyway
[22:44:20] <nedbat> graingert[m]: "winning" :)
[22:44:23] <cloudbender> yes it is
[22:44:39] <nedbat> cloudbender: are you interested in feedback about the error handling here?
[22:44:42] <cloudbender> I did read about thread-sensitive means of breaking
[22:44:46] <graingert[m]> nedbat: What else would you call it xD
[22:44:47] <cloudbender> sure
[22:45:00] *** Joins: kickingvegas (~cchoi@c-24-5-40-20.hsd1.ca.comcast.net)
[22:45:03] <nedbat> graingert[m]: it's just funny that you said "not much competition" and then "winning"
[22:45:03] <han-solo> i always thought curio was more of a proof of concept thing...don't know why
[22:45:17] <nedbat> cloudbender: "except:" hides problems because it swallows everything.
[22:45:23] <cloudbender> right
[22:45:31] <graingert[m]> han-solo: Curio's great tbh
[22:45:36] *** Quits: entuland (~entuland@user/entuland) (Ping timeout: 272 seconds)
[22:45:37] <nedbat> cloudbender: best is to put "try" around the smallest code possible, and only for exceptions you can do something about.
[22:45:44] *** Quits: Leonarbro (~Leonet@user/leonarbro) (Read error: Connection reset by peer)
[22:45:45] <cloudbender> ok
[22:45:49] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[22:45:52] <graingert[m]> Probably the best way to learn how async works by reading the code
[22:45:52] <nedbat> cloudbender: exiting the program like you are doing makes this class really hard to use.
[22:45:55] <stealth_> han-solo, curio, doesn't want to be just like every other copycat framework out there.
[22:46:01] <cloudbender> it's just a test
[22:46:03] <SnoopJ> foo, my suggestion: try out a bunch of things, see what different approaches to problems have as pros/cons, figure out which tools you like for which jobs.
[22:46:06] <foo> nedbat / hexnewbie - perhaps the word "compete" has a different meaning for me. I understand the value of marketing, convincing, adding new features, etc. I see this dynamic in business, code just seems a bit different. Just because someone doesn't see their library as competing with others doesn't mean not to do a great job promoting it/marketing it. It's possible this might just be written off to semantics,
[22:46:12] <foo> too.
[22:46:16] <han-solo> graingert[m]: I see. maybe i thought like that 'cos haven't seen much questions regarding it
[22:46:17] <SnoopJ> foo, and avoid anyone who is selling a bridge that is a little too good to be true.
[22:46:28] <nedbat> cloudbender: a test of what?
[22:46:34] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[22:46:38] <foo> SnoopJ: oh? I'm using trio just because you told me and you have a God-like presence in my world.
[22:46:39] <graingert[m]> han-solo: anyio is more popular than trio by a looong way
[22:46:53] <cloudbender> hashlib non-chunking on photo files
[22:47:03] <graingert[m]> But anyio isn't competing with trio it's supposed to be an on ramp
[22:47:06] <SnoopJ> foo, well, take graingert[m]'s word over mine, they write a lot more async than I do
[22:47:08] <han-solo> stealth_: i see
[22:47:09] <nedbat> cloudbender: if you just want to see how it does that, then remove all of the error handling and closing.
[22:47:24] *** Quits: metal_egg (~metal0egg@pool-72-94-145-43.phlapa.fios.verizon.net) (Remote host closed the connection)
[22:47:30] <foo> SnoopJ: and just like that, you lose your god-status - with async. ;P
[22:47:35] <hexnewbie> cloudbender: I'll just go with (untested): https://bpa.st/YEHQ
[22:47:37] *** Quits: trace1918 (~trace1918@94-137-125-182.customers.ownit.se) (Ping timeout: 248 seconds)
[22:47:56] <han-solo> graingert[m]: mm
[22:47:58] <nedbat> cloudbender: also i noticed you mentioned Python 2.7 at the top.  why is that?
[22:48:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 256 seconds)
[22:48:14] <graingert[m]> SnoopJ: I actually write very little async code xD
[22:48:19] <stealth_> han-solo, it was first software to come out with the whole co-routine way vs callback hell way every other software was doing.
[22:48:20] *** Joins: Akuli (~Akuli@87-94-111-5.bb.dnainternet.fi)
[22:48:26] *** Atque is now known as Atque-
[22:48:30] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[22:48:31] <Adois> stealth, it is a nice one-liner solution, only if I as a learner were not trying to solve it without using libraries )
[22:48:33] *** Atque- is now known as Atque
[22:48:37] *** Joins: wyclif (~wyclif@user/wyclif)
[22:48:39] <Adois> thank you again :)
[22:48:42] <foo> nedbat: as always, thanks for sharing your thoughts. :)
[22:48:47] *** Joins: netsan_ (~netsan@user/netsan)
[22:48:56] <graingert[m]> stealth_: What was the first?
[22:49:05] <stealth_> graingert[m], curio
[22:49:13] *** Quits: merijn (~merijn@83-160-49-249.ip.xs4all.nl) (Ping timeout: 248 seconds)
[22:49:19] <nedbat> foo: I think you are right that "competition" is a loaded word.  I find people also object when I refer to my users as "customers" even though no money is changing hands.
[22:49:42] <graingert[m]> stealth_: Oh I see what you mean. It's all callbacks under the hood
[22:49:45] <SnoopJ> graingert[m], so just imagine how little *I* write :)
[22:50:20] <graingert[m]> stealth_: I was going to say that twisted inlineCallbacks predates asyncio
[22:50:30] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[22:50:32] <cloudbender> @nedbat I need to run the same python as the node.js package manager
[22:50:43] <cloudbender> ... for now
[22:50:48] <stealth_> graingert[m], it takes out of the main callback hell part out, so mixing co-routine is awesome.
[22:51:07] *** Quits: netsan (~netsan@user/netsan) (Ping timeout: 244 seconds)
[22:51:17] *** Quits: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea) (Client Quit)
[22:51:18] <stealth_> graingert[m], i would say curio went with "design first" approach
[22:51:38] *** Quits: jinsun (~quassel@user/jinsun) (Quit: https://quassel-irc.org - Chat comfortably. Anywhere.)
[22:51:49] <graingert[m]> stealth_: Oh for sure
[22:51:53] <nedbat> cloudbender: ok, that's a good reason
[22:51:57] *** Joins: jinsun (~quassel@user/jinsun)
[22:52:08] <graingert[m]> Asyncio went with a copy all of twisted's design flaws approach
[22:52:13] <stealth_> graingert[m], with what i do with io_uring, there is no callback! so co-routine wins
[22:52:14] <cloudbender> @nedbat that edit you did is nice.  I'm nervous about not explcitly closing the file
[22:52:24] <nedbat> cloudbender: "it's just a test"
[22:52:28] <cloudbender> ok
[22:52:32] <nedbat> cloudbender: (btw, it wasn't my edit)
[22:52:40] <cloudbender> oh
[22:52:43] <graingert[m]> stealth_: send is a callback!
[22:52:47] *** Joins: death916 (UserNick@user/death916)
[22:52:57] <stealth_> graingert[m], well asyncio goes with "we will support everything" approach
[22:53:15] <graingert[m]> stealth_: Support everything?
[22:54:08] *** Joins: shgvbvri (~rvgzuuqp@gateway/tor-sasl/rvgzuuqp)
[22:54:17] <stealth_> graingert[m], suppose. ya backward comparability
[22:54:34] *** Quits: ouzel8_ (~ouzel8_@110.148.212.146) (Ping timeout: 246 seconds)
[22:54:39] <stealth_> graingert[m], since curio/trio approach become popular they added `run` to asyncio
[22:54:51] <stealth_> graingert[m], asyncio is both callback/co-routine
[22:54:53] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[22:55:47] *** Joins: wyclif (~wyclif@user/wyclif)
[22:56:55] *** Joins: rubion (~rubion@cpc124316-ayle4-2-0-cust156.15-2.cable.virginm.net)
[22:56:55] *** Joins: penguino (~mrpenguin@user/mrpenguin)
[22:57:04] *** Joins: nomic (~nomic@2a00:23c6:9902:2401:8954:d8dc:26ce:39ea)
[23:00:10] *** Quits: Adois (~Adoi@user/adoi) (Ping timeout: 272 seconds)
[23:00:32] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[23:01:14] *** Quits: mIk3_08 (~Thunderbi@user/mik3-08/x-2852566) (Quit: mIk3_08)
[23:01:20] *** Joins: wyclif (~wyclif@user/wyclif)
[23:01:31] <SnoopJ> graingert[m], doesn't that violate the anti-robustness principle?
[23:02:01] *** Quits: mci64 (~x@185.242.190.95) (Quit: Leaving)
[23:02:24] *** Joins: dakh7 (~dakh7@ip98-169-201-138.dc.dc.cox.net)
[23:02:27] <graingert[m]> <stealth_> "graingert, asyncio is both..." <- Oh you mean like Protocol vs Stream ?
[23:02:38] <graingert[m]> SnoopJ: Sorry what
[23:02:53] *** Joins: Fiji (~Fiji@user/fiji)
[23:03:17] *** Joins: gruuf (~gruuf@94.31.99.29)
[23:03:44] *** Joins: magla (~gelignite@55d4fb74.access.ecotel.net)
[23:03:52] <graingert[m]> <stealth_> "graingert, since curio/trio..." <- twisted had run before curio
[23:04:03] <graingert[m]> They just called it twisted.task.react
[23:04:09] *** Joins: entuland (~entuland@user/entuland)
[23:04:51] * enyc meows
[23:04:53] <stealth_> graingert[m], i am not good at explaining such things, maybe there is an article that explains it better.
[23:05:17] <enyc> stealth_: hrrm i need to sort out my  ... python resources
[23:05:21] *** Quits: Enitin (~Enitin@82.102.22.84) (Ping timeout: 258 seconds)
[23:05:36] <enyc> pydoc3  has its' uses,  python.org  differently useful,  but also other website examples etc etc equally helpful
[23:05:45] <enyc> but more likely to be out of date or wrong
[23:05:56] <graingert[m]> stealth_: I'm not quite sure what you're getting at
[23:05:59] <han-solo> enyc: https://pymotw.com/3/ # was very helpful
[23:06:05] <stealth_> graingert[m], i was saying corio was first to come up with co-routine (as far as i know) not about `run` itself.
[23:06:17] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[23:06:17] <enyc> I found, what you use best with  'integrated'   library functions is different to  ...3rd party...
[23:06:43] <enyc> han-solo: OoOOOOOO
[23:06:52] *** Joins: wyclif (~wyclif@user/wyclif)
[23:07:02] <enyc> anyhow I have to try to do this C/C++ exercise, come back to python  HOPEFULLY tomorrow
[23:07:05] <stealth_> enyc, ?
[23:09:10] <graingert[m]> stealth_: inlineCallbacks supports "Coroutines" with generators
[23:09:44] *** Joins: Barones (~Barones@2804:7f3:8986:e028:6d72:919e:6719:d7c5)
[23:10:22] <stealth_> graingert[m], yes to your protocol vs stream
[23:10:42] *** Joins: Enitin (~Enitin@82.102.22.84)
[23:11:01] *** Quits: entuland (~entuland@user/entuland) (Read error: Connection reset by peer)
[23:11:45] <stealth_> graingert[m], technically speaking callback is faster but its harder to code/manage
[23:11:52] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:12:25] *** Joins: wyclif (~wyclif@user/wyclif)
[23:12:58] <foo> This trio tutorial is helpful. I am beginning to see the value of async (despite loosely looking into it over the past year). For example, I have my own queue code that I wrote which simply looks at the timestamp, if it passed, run the code. But it runs sequentially, whereas with Trio managing my queue it would run in a nursery and things would run concurrently (if I'm following). I suppose I could also have
[23:12:59] *** Joins: birkoff (birkoff@user/birkoff)
[23:13:04] <foo> used rq, but writing my own queue and wrapping my head around this allows me to see the value of using something like rq (or another queue manager)
[23:13:29] *** Joins: mx7ca (~max@user/mx7ca)
[23:13:52] <graingert[m]> foo: The main thing trio gets you is handling failures in concurrent child tasks
[23:14:04] <foo> Is it safe to say python threads were originally a way to accomplish what async does, and async is simply a nicer implementation (taking learnings from threads)
[23:14:13] *** Joins: ExeciN (~ExeciN@user/nicexe)
[23:14:15] *** Joins: wedwards (~wedwards@rtr0.17.31.bogert.cyberfusion.cloud)
[23:14:17] *** Quits: Powerhouse6666 (~Powerhous@security.orcacomputers.com) (Ping timeout: 245 seconds)
[23:14:22] <foo> graingert[m]: thanks, while I think I'm following, can you share a conceptual example?
[23:14:52] *** Joins: Cleverness (~clevernes@pool-108-54-152-186.nycmny.fios.verizon.net)
[23:16:57] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[23:17:01] *** Quits: dcompoze_ (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Quit: WeeChat 3.2)
[23:17:16] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[23:17:58] *** Joins: wyclif (~wyclif@user/wyclif)
[23:18:43] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[23:18:57] *** Joins: besnn (~besnn@user/besnn)
[23:19:06] <graingert[m]> foo: Of a Nursery? It's in the tutorial
[23:20:11] <han-solo> foo: i think, async and threads a bit different things. Although on a higher level "run these bunch of tasks while i do some others stuffs" definition, they could be in the same category ? async gives you more control than threads is one of the key things maybe ? i don't have deep knowledge in this
[23:20:51] <foo> graingert[m]: oh, I'm not there yet. :) I'll get to that soon then.
[23:21:00] <graingert[m]> "a gentler kinder GIL"
[23:21:11] <foo> han-solo: thanks for sharing.
[23:21:48] <graingert[m]> https://trio.readthedocs.io/en/stable/tutorial.html#a-kinder-gentler-gil
[23:22:07] <han-solo> also, async things are done in a single thread, unless specified otherwise by `.run_in_thread` or something like that i guess
[23:22:33] <graingert[m]> han-solo: https://glyph.twistedmatrix.com/2014/02/unyielding.html
[23:22:47] <han-solo> graingert[m]: Thanks
[23:22:49] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[23:23:20] <graingert[m]> han-solo: https://github.com/tiangolo/fastapi/discussions/3561
[23:23:27] *** Quits: Alexer (~alexer@alexer.net) (Ping timeout: 245 seconds)
[23:23:29] *** Joins: wyclif (~wyclif@user/wyclif)
[23:23:34] <graingert[m]> Here's a bunch of posts that need merging into one big one
[23:23:34] *** Quits: KnownSyntax (sid233169@user/knownsyntax) (Read error: Connection reset by peer)
[23:23:34] <InPhase> foo: Async things are spliced in at specified breakpoints, and if you fail to put a break point, a routine is not interrupted.  Threads run in parallel (although with a GIL in current Python implementations that heavily restricts the parallel benefits), and thus the splices can be all over the place.
[23:23:42] *** Quits: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[23:23:45] *** Quits: jwhisnant (~jwhisnant@user/jwhisnant) (Ping timeout: 258 seconds)
[23:23:45] *** Quits: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:23:45] *** Quits: Lvl4Sword (sid483043@user/lvl4sword) (Ping timeout: 258 seconds)
[23:23:45] *** Quits: llinguini (sid257922@id-257922.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:23:49] <han-solo> graingert[m]: cool. That's nice
[23:23:52] *** Quits: altendky (sid135382@id-135382.stonehaven.irccloud.com) (Ping timeout: 245 seconds)
[23:23:53] *** Quits: m4r35n357 (~ian@host-92-13-130-45.as13285.net) (Quit: Ex-Chat)
[23:24:12] *** Quits: Tiago_Paolini (sid172748@id-172748.stonehaven.irccloud.com) (Read error: Connection reset by peer)
[23:24:12] *** Quits: raydeeam (uid325131@dgplug/raydeeam) (Read error: Connection reset by peer)
[23:24:14] *** Quits: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:24:14] *** Quits: sharpertool (sid80151@id-80151.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:24:18] *** Quits: morgabra (sid500580@user/morgabra) (Ping timeout: 272 seconds)
[23:24:18] *** Quits: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:24:18] *** Quits: pjlsergeant (sid143467@id-143467.stonehaven.irccloud.com) (Ping timeout: 272 seconds)
[23:24:18] *** Quits: Keira (~k@lulzsec.co.uk) (Quit: Keira)
[23:24:23] *** Quits: netsan_ (~netsan@user/netsan) (Remote host closed the connection)
[23:24:23] <stealth_> i don't get the bashing on GIL, isn't it just an atomic counter?
[23:24:29] *** Quits: df_data (sid466269@id-466269.charlton.irccloud.com) (Ping timeout: 252 seconds)
[23:24:31] *** Quits: nubonix (uid492751@id-492751.charlton.irccloud.com) (Ping timeout: 258 seconds)
[23:24:47] <InPhase> foo: If you want true parallelism in Python, you have to jump to something like the multiprocessing library.
[23:24:52] *** Quits: elliewhatever (uid512890@id-512890.brockwell.irccloud.com) (Ping timeout: 256 seconds)
[23:24:52] *** Quits: seds (sid492514@user/seds) (Ping timeout: 256 seconds)
[23:24:54] *** Quits: fury (uid193779@id-193779.brockwell.irccloud.com) (Ping timeout: 258 seconds)
[23:25:17] *** Quits: crazysim (sid86009@id-86009.stonehaven.irccloud.com) (Ping timeout: 258 seconds)
[23:25:21] *** Joins: Alexer (~alexer@alexer.net)
[23:25:30] *** Quits: roolebo (sid64806@id-64806.charlton.irccloud.com) (Ping timeout: 240 seconds)
[23:25:30] *** Quits: liam (sid7517@id-7517.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:25:30] *** Quits: SrPx (sid108780@id-108780.highgate.irccloud.com) (Ping timeout: 240 seconds)
[23:25:32] *** Quits: Knyght (sid365271@id-365271.brockwell.irccloud.com) (Ping timeout: 245 seconds)
[23:25:52] <foo> InPhase: thank you. I suspect the breakpoints element here is what han-solo meant when he said async gives me more control
[23:25:54] *** Quits: flagrama (sid145621@id-145621.stonehaven.irccloud.com) (Ping timeout: 240 seconds)
[23:25:54] *** Quits: mindlesstux (sid18072@id-18072.tooting.irccloud.com) (Ping timeout: 240 seconds)
[23:25:57] <InPhase> stealth_: Because the GIL prevents multi-threaded programs from performing well in Python.  They can be used to provide asynchronous execution, but not to provide fast performance.
[23:25:57] *** Quits: dez (uid92154@user/dez) (Ping timeout: 245 seconds)
[23:25:57] *** Quits: MrNaz (sid133418@id-133418.highgate.irccloud.com) (Ping timeout: 245 seconds)
[23:26:00] *** Quits: AhmedAmerican (sid470527@id-470527.charlton.irccloud.com) (Ping timeout: 256 seconds)
[23:26:08] *** Quits: jposer (sid132110@id-132110.highgate.irccloud.com) (Ping timeout: 252 seconds)
[23:26:14] *** Quits: hsiktas (sid224847@id-224847.tooting.irccloud.com) (Ping timeout: 252 seconds)
[23:26:18] *** Quits: hogarius (hogarius@id-222644.highgate.irccloud.com) (Ping timeout: 240 seconds)
[23:26:26] *** Quits: bn_work (uid268505@id-268505.highgate.irccloud.com) (Ping timeout: 258 seconds)
[23:26:26] *** Quits: ormiret (sid314108@id-314108.tooting.irccloud.com) (Ping timeout: 258 seconds)
[23:26:31] <InPhase> stealth_: It is a deviation from the norm in other languages, and thus requires leaping to multiple processes to get around it.
[23:26:33] *** Joins: jaggz (~jaggz@user/jaggz)
[23:26:36] *** Joins: ExeciN (~ExeciN@user/nicexe)
[23:26:36] <foo> async is such a different way of thinking of things.
[23:26:42] *** Quits: dunc (sid16@id-16.highgate.irccloud.com) (Ping timeout: 240 seconds)
[23:26:50] *** Quits: varaindemian (uid73404@id-73404.charlton.irccloud.com) (Ping timeout: 272 seconds)
[23:26:53] <jaggz> what am I supposed to do with my python giving me underruns in audio when I try to play sounds?
[23:26:56] <foo> Here's a question, and I'm possibly taking this to the extreme - is there any reason *not* to write code in async?
[23:26:57] <han-solo> GIL predates multi core systems, or so i remember reading
[23:27:03] *** Quits: TallonRain (sid214799@user/tallonrain) (Ping timeout: 276 seconds)
[23:27:06] *** Quits: Freso (sid7914@libera/staff/metabrainz.user.Freso) (Ping timeout: 240 seconds)
[23:27:06] *** Quits: matthewwilkes (sid500242@id-500242.highgate.irccloud.com) (Ping timeout: 240 seconds)
[23:27:13] <jaggz> I'm in ipdb right now and using sd (sounddevice) .play(audio_numpy_array) and it's choking on them
[23:27:20] *** Joins: matsaman (~matsaman@user/matsaman)
[23:27:23] <InPhase> foo: Yes.  It makes the order of execution much more difficult to follow, and thus is a deficit if it is not needed.
[23:27:23] *** Joins: roolebo (sid64806@charlton.irccloud.com)
[23:27:26] <foo> It seems like async offers more benefits and can deal with sync/async, whereas writing non-async code is "1 sided"
[23:27:29] <stealth_> InPhase, that becomes ppl are sharing large data between process and noting really to do with the reference counter lock
[23:27:30] *** Quits: jtanner (sid194399@id-194399.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:27:36] <jaggz> is there some other thread going that's causing this?  maybe ipdb?
[23:27:45] *** Joins: nicholasserra (~nicholass@2603-6011-5406-3600-6884-02a6-e5f5-8bf0.res6.spectrum.com)
[23:27:47] *** Quits: kmikita (uid461814@id-461814.brockwell.irccloud.com) (Ping timeout: 268 seconds)
[23:27:47] *** Quits: TJ- (~root@2a01:7e00:e001:ee00:fa75:a4ff:fef3:42b4) (Ping timeout: 252 seconds)
[23:27:53] <jaggz> the initial play, before ipdb breaks at my set_trace(), also seems to be cut short
[23:27:54] *** Quits: nocko (sid501219@user/nocko) (Ping timeout: 240 seconds)
[23:27:54] *** Quits: BlueShark (sid10311@user/blueshark) (Ping timeout: 240 seconds)
[23:27:54] *** Quits: han-` (sid293063@id-293063.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:28:01] <foo> InPhase: Well said, agree. FWIW, the primary app I'm working on is a chatbot. And it's not done async... which means it's somewhat limited in the way it works
[23:28:02] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 245 seconds)
[23:28:02] *** Quits: gitesh (uid423739@id-423739.charlton.irccloud.com) (Ping timeout: 245 seconds)
[23:28:04] <InPhase> foo: I think the multiprocessing library can actually be easier to reason about, because you manually draw out the lines of what's happening where and in what serial order.
[23:28:12] <jaggz> sd.play(audio, 16000); sd.wait() doesn't change it
[23:28:15] <matsaman> cloudcell: you find a faster implementation?
[23:28:22] *** Quits: bjs (sid190364@user/bjs) (Ping timeout: 258 seconds)
[23:28:23] *** Quits: cyberpear (uid364019@fedora/cyberpear) (Ping timeout: 268 seconds)
[23:28:32] *** Joins: hogarius (hogarius@highgate.irccloud.com)
[23:28:34] *** Quits: nicholasserra (~nicholass@2603-6011-5406-3600-6884-02a6-e5f5-8bf0.res6.spectrum.com) (Client Quit)
[23:28:39] *** Joins: ormiret (sid314108@tooting.irccloud.com)
[23:28:40] <InPhase> foo: However, the relative benefits depend on the particular target application.
[23:28:42] *** Quits: NiKaN (sid385034@id-385034.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:28:58] <han-solo> I/O ? async good
[23:28:59] *** Joins: jposer (sid132110@highgate.irccloud.com)
[23:28:59] *** Joins: seds (sid492514@user/seds)
[23:29:00] *** Quits: hwrd (sid64402@id-64402.tooting.irccloud.com) (Ping timeout: 276 seconds)
[23:29:02] *** Joins: wyclif (~wyclif@user/wyclif)
[23:29:06] *** Quits: coldmountain (sid484352@id-484352.brockwell.irccloud.com) (Ping timeout: 240 seconds)
[23:29:06] <jaggz> https://paste.debian.net/hidden/0e541ceb/
[23:29:07] *** Quits: Pent (sid313808@id-313808.tooting.irccloud.com) (Ping timeout: 258 seconds)
[23:29:11] *** Joins: varaindemian (uid73404@charlton.irccloud.com)
[23:29:17] <stealth_> InPhase, in multiprocessing all you are doing is offloading data transfer to socket. At which point people stop complaining about GIL and start saying how multiprocessing is slow/shitty
[23:29:19] <cloudcell> matsaman: I am now implementing what hexnewbie suggested
[23:29:22] *** Quits: cloudbender (~cloudbend@user/cloudbender) (Ping timeout: 272 seconds)
[23:29:23] <InPhase> foo: A chat bot in Python might be a reasonable target application for an async approach.
[23:29:26] <jaggz> def pla(a, sr=SAMPLING_RATE): sd.play(a, sr)
[23:29:30] *** Quits: recursion (sid504862@user/recursion) (Ping timeout: 240 seconds)
[23:29:30] *** Quits: monchi (sid347418@id-347418.charlton.irccloud.com) (Ping timeout: 258 seconds)
[23:29:30] *** Quits: r0bby (r0bby@user/r0bby) (Ping timeout: 258 seconds)
[23:29:32] <matsaman> cloudcell: oh can I see?
[23:29:38] *** Joins: AhmedAmerican (sid470527@charlton.irccloud.com)
[23:29:40] *** Joins: Knyght (sid365271@id-365271.brockwell.irccloud.com)
[23:29:41] *** Joins: han-` (sid293063@brockwell.irccloud.com)
[23:29:41] *** Joins: MrNaz (sid133418@id-133418.highgate.irccloud.com)
[23:29:43] *** Joins: mindlesstux (sid18072@tooting.irccloud.com)
[23:29:45] *** Joins: gitesh (uid423739@id-423739.charlton.irccloud.com)
[23:29:46] *** Joins: jtanner (sid194399@brockwell.irccloud.com)
[23:29:48] *** Joins: dez (uid92154@user/dez)
[23:29:50] <InPhase> stealth_: Yes, but you can also reason about what data is transferred and when, and thus control your performance.
[23:29:52] *** Joins: BlueShark (sid10311@user/blueshark)
[23:29:53] *** Joins: hsiktas (sid224847@tooting.irccloud.com)
[23:29:54] *** Joins: nocko (sid501219@user/nocko)
[23:30:07] *** Joins: Freso (sid7914@libera/staff/metabrainz.user.Freso)
[23:30:12] *** Joins: matthewwilkes (sid500242@highgate.irccloud.com)
[23:30:15] <cloudcell> I am new to python, so it's not ready yet, ping me later, I'll share
[23:30:22] *** Joins: liam (sid7517@brockwell.irccloud.com)
[23:30:25] <stealth_> InPhase, in theory! people will not know/do such things.
[23:30:26] <matsaman> =)
[23:30:28] *** Joins: coldmountain (sid484352@id-484352.brockwell.irccloud.com)
[23:30:28] *** Joins: kmikita (uid461814@id-461814.brockwell.irccloud.com)
[23:30:30] <InPhase> stealth_: By limiting transfers and maximizing serialization, things will go faster.
[23:30:30] *** Joins: bn_work (uid268505@id-268505.highgate.irccloud.com)
[23:30:34] *** Joins: TallonRain (sid214799@user/tallonrain)
[23:30:38] <cloudcell> I am using numpy array to create an array now
[23:30:39] *** Joins: cyberpear (uid364019@fedora/cyberpear)
[23:30:40] *** Joins: hwrd (sid64402@id-64402.tooting.irccloud.com)
[23:30:43] *** Joins: r0bby (r0bby@user/r0bby)
[23:30:47] <InPhase> stealth_: Well...  But when they need it, they at least have a chance to learn.  :)  It's not my job to make them.
[23:30:54] *** Joins: bjs (sid190364@user/bjs)
[23:30:55] <cloudcell> because a dictionary takes too much memory matsaman
[23:30:57] *** Joins: monchi (sid347418@id-347418.charlton.irccloud.com)
[23:31:02] *** Quits: LordRishav (~LordRisha@user/lordrishav) (Ping timeout: 258 seconds)
[23:31:03] *** Joins: fury (uid193779@brockwell.irccloud.com)
[23:31:06] *** Joins: Pent (sid313808@id-313808.tooting.irccloud.com)
[23:31:15] *** Joins: altendky (sid135382@stonehaven.irccloud.com)
[23:31:22] *** Joins: nubonix (uid492751@id-492751.charlton.irccloud.com)
[23:31:24] <foo> InPhase: Yeah, I use flask a lot, too for various endpoints and simple landing pages
[23:31:34] <cloudcell> matsaman: or I am doing something seriously wrong :|
[23:31:46] <InPhase> irccloud is clearly having issues today...  That's a lot of bouncing connections.
[23:32:01] *** Quits: ExeciN (~ExeciN@user/nicexe) (Ping timeout: 246 seconds)
[23:32:04] <matsaman> cloudcell: no I'm just curious myself
[23:32:20] <matsaman> cloudcell: was an interesting exercise
[23:32:32] <matsaman> I did one that was fewer lines than yours, but slower =)
[23:32:35] *** Joins: audiobirb (~audio@2603-8081-1800-00ad-2c12-98df-64de-3b19.res6.spectrum.com)
[23:32:40] <matsaman> heheh
[23:32:41] <stealth_> InPhase, serialization! now you have 2 problems to deal with
[23:32:47] *** Quits: hendursa1 (~weechat@user/hendursaga) (Remote host closed the connection)
[23:32:57] *** Quits: Fiji (~Fiji@user/fiji) (Ping timeout: 258 seconds)
[23:33:07] <cloudcell> matsaman: I don't mind the size, speed is everything for me at the moment
[23:33:13] *** Joins: hendursa1 (~weechat@user/hendursaga)
[23:33:14] <InPhase> stealth_: By serialization I mean of instruction flow, not of data.
[23:33:23] *** Quits: [itchyjunk] (~itchyjunk@user/itchyjunk/x-7353470) (Remote host closed the connection)
[23:33:24] <matsaman> cloudcell: yes you did say
[23:33:28] *** Joins: LordRishav (~LordRisha@user/lordrishav)
[23:33:37] <InPhase> stealth_: As in single processes go in a single order, which lets you establish guarantees for the order of data processing.
[23:34:01] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 248 seconds)
[23:34:27] *** Joins: NiKaN (sid385034@id-385034.brockwell.irccloud.com)
[23:34:51] <stealth_> InPhase, well they all add up and now your software is x3 slower then running it in single process and you start scratching your head going wtf is going on!!!
[23:34:58] *** Joins: wyclif (~wyclif@user/wyclif)
[23:35:02] *** Quits: mohabaks (~mohabaks@gateway/tor-sasl/mohabaks) (Ping timeout: 244 seconds)
[23:35:38] *** Joins: minip (~minip@user/minip)
[23:35:41] *** Joins: WhyNotHugo (sid269118@id-269118.stonehaven.irccloud.com)
[23:35:41] *** Joins: jwhisnant (~jwhisnant@user/jwhisnant)
[23:35:49] *** Joins: raydeeam (uid325131@dgplug/raydeeam)
[23:35:52] <graingert[m]> subinterpreters look exiting though
[23:35:57] *** Joins: hnOsmium0001 (uid453710@id-453710.stonehaven.irccloud.com)
[23:36:08] *** Joins: Lvl4Sword (sid483043@user/lvl4sword)
[23:36:12] *** Joins: JayDoubleu (sid339529@id-339529.stonehaven.irccloud.com)
[23:36:17] *** Joins: flagrama (sid145621@id-145621.stonehaven.irccloud.com)
[23:36:23] <InPhase> stealth_: Well that's not my typical experience with parallelization.  But it does require some additional learning beyond synchronous single process development.
[23:36:32] <ali1234> doesn't multiprocessing use pipes, rather than sockets?
[23:36:47] *** Joins: KnownSyntax (sid233169@user/knownsyntax)
[23:36:50] *** Joins: llinguini (sid257922@id-257922.stonehaven.irccloud.com)
[23:36:57] *** Joins: crazysim (sid86009@id-86009.stonehaven.irccloud.com)
[23:36:59] <stealth_> ali1234, socket (last time i checked)
[23:37:00] *** Joins: Pr0phet (sid505706@id-505706.stonehaven.irccloud.com)
[23:37:26] *** Quits: daevski (~daevski@76-253-184-89.lightspeed.rlghnc.sbcglobal.net) (Ping timeout: 268 seconds)
[23:37:42] *** Joins: morgabra (sid500580@user/morgabra)
[23:37:48] <InPhase> ali1234: They are called sockets most places, and called named pipes on Windows, but it basically provides an abstraction around them.
[23:37:59] <ali1234> ah yes, named pipes
[23:38:49] <ali1234> i still use multiprocessing, but i gave up on multiprocessing.Queue and replaced it with zeromq instead, because that uses ip sockets everywhere
[23:39:14] <InPhase> ali1234: It also supports shared memory sections.
[23:39:17] <ali1234> it is a lot more predictable across different operating systems
[23:39:24] *** Joins: sharpertool (sid80151@id-80151.stonehaven.irccloud.com)
[23:39:51] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 258 seconds)
[23:40:11] <InPhase> ali1234: Yeah.  We just phased zeromq out of an application for the cardinal sin of mysteriously eating data.
[23:40:33] *** Joins: wyclif (~wyclif@user/wyclif)
[23:40:56] *** Joins: Tiago_Paolini (sid172748@stonehaven.irccloud.com)
[23:41:11] *** Quits: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net) (Quit: WeeChat 3.2)
[23:41:25] <ali1234> the main problem i had with named pipes is one side or the other hanging because it didn't realise the other side had shut down
[23:41:31] <InPhase> It fortunately took less time to remove it than the days to realize it was a problem in zeromq that we couldn't fix.
[23:41:33] *** Joins: pjlsergeant (sid143467@stonehaven.irccloud.com)
[23:41:52] <han-solo> oh yeah, i remember using zeromq for rpc calls, and for some reason it didn't work well(for some reason) and we switched it to a simple rest api
[23:42:24] <stealth_> did they add sub-interpreters yet?
[23:43:29] *** Joins: dcompoze (~dcompoze@cpc97624-walt24-2-0-cust75.13-2.cable.virginm.net)
[23:43:44] <han-solo> still in draft, i;m reading
[23:45:27] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 268 seconds)
[23:46:07] *** Joins: wyclif (~wyclif@user/wyclif)
[23:48:11] *** Quits: Hax0r (~Hax0r@87.101.193.195) (Quit: Leaving)
[23:48:50] <foo> Can someone explain where Event() is coming from? https://gist.github.com/thomaswieland/3cac92843896040b11c4635f7bf61cfb#file-gistfile1-py-L10 -> I wonder if this is only true to threads
[23:49:34] *** Joins: knipster5 (~knipster@user/knipster)
[23:49:40] <matsaman> foo: from threading import *
[23:50:15] <han-solo> https://docs.python.org/3/library/threading.html#threading.Event
[23:50:20] <foo> matsaman: oh, heh, thanks - missed that. (one of the reasons I don't like using *)
[23:50:22] <matsaman> if you call 'Event()' on its own it will say, even
[23:50:24] <foo> han-solo: thank you.
[23:50:29] <matsaman> <threading.Event object at 0x7fbd45dd5c40>
[23:50:33] <foo> matsaman: right, right
[23:50:49] <foo> Trying to turn this code into async with trio. /me takes his first stab at this
[23:50:55] *** Joins: mci64 (~X@185.242.190.95)
[23:50:56] <matsaman> stab stab
[23:50:58] <matsaman> ha-haaaaAAaaa
[23:51:54] *** Quits: mci64 (~X@185.242.190.95) (Client Quit)
[23:55:53] *** Quits: besnn (~besnn@user/besnn) (Ping timeout: 248 seconds)
[23:55:58] *** Quits: wyclif (~wyclif@user/wyclif) (Ping timeout: 272 seconds)
[23:56:11] <stealth_> foo, whatever this `imaplib2` is needs to support async first.
[23:56:30] <stealth_> you can't just throw something in async and call it a day, it will be sync code
[23:57:12] *** Joins: wyclif (~wyclif@user/wyclif)
[23:57:38] *** Joins: mci64 (~x@185.242.190.95)
[23:57:57] <han-solo> atleast there seems to be `aioimaplib` for asyncio
[23:58:22] *** Quits: mci64 (~x@185.242.190.95) (Remote host closed the connection)
[23:58:40] *** Joins: mci64 (~x@185.242.190.95)
[23:59:17] *** Quits: Atque (~Atque@user/atque) (Quit: ...)
